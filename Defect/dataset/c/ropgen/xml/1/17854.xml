<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17854.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">mxf_read_generic_descriptor</name><parameter_list pos:start="1:39" pos:end="1:114">(<parameter pos:start="1:40" pos:end="1:48"><decl pos:start="1:40" pos:end="1:48"><type pos:start="1:40" pos:end="1:48"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">arg</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:61">AVIOContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">pb</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:74"><decl pos:start="1:68" pos:end="1:74"><type pos:start="1:68" pos:end="1:74"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:74">tag</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:84"><decl pos:start="1:77" pos:end="1:84"><type pos:start="1:77" pos:end="1:84"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:84">size</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:93"><decl pos:start="1:87" pos:end="1:93"><type pos:start="1:87" pos:end="1:93"><name pos:start="1:87" pos:end="1:89">UID</name></type> <name pos:start="1:91" pos:end="1:93">uid</name></decl></parameter>, <parameter pos:start="1:96" pos:end="1:113"><decl pos:start="1:96" pos:end="1:113"><type pos:start="1:96" pos:end="1:113"><name pos:start="1:96" pos:end="1:102">int64_t</name></type> <name pos:start="1:104" pos:end="1:113">klv_offset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">MXFDescriptor</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:29">descriptor</name> <init pos:start="5:31" pos:end="5:35">= <expr pos:start="5:33" pos:end="5:35"><name pos:start="5:33" pos:end="5:35">arg</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:42"><expr pos:start="7:5" pos:end="7:41"><name pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:14">descriptor</name><operator pos:start="7:15" pos:end="7:16">-&gt;</operator><name pos:start="7:17" pos:end="7:23">pix_fmt</name></name> <operator pos:start="7:25" pos:end="7:25">=</operator> <name pos:start="7:27" pos:end="7:41">AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

    <switch pos:start="9:5" pos:end="147:5">switch<condition pos:start="9:11" pos:end="9:15">(<expr pos:start="9:12" pos:end="9:14"><name pos:start="9:12" pos:end="9:14">tag</name></expr>)</condition> <block pos:start="9:17" pos:end="147:5">{<block_content pos:start="11:5" pos:end="145:14">

    <case pos:start="11:5" pos:end="11:16">case <expr pos:start="11:10" pos:end="11:15"><literal type="number" pos:start="11:10" pos:end="11:15">0x3F01</literal></expr>:</case>

        <expr_stmt pos:start="13:9" pos:end="13:58"><expr pos:start="13:9" pos:end="13:57"><name pos:start="13:9" pos:end="13:41"><name pos:start="13:9" pos:end="13:18">descriptor</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:41">sub_descriptors_count</name></name> <operator pos:start="13:43" pos:end="13:43">=</operator> <call pos:start="13:45" pos:end="13:57"><name pos:start="13:45" pos:end="13:53">avio_rb32</name><argument_list pos:start="13:54" pos:end="13:57">(<argument pos:start="13:55" pos:end="13:56"><expr pos:start="13:55" pos:end="13:56"><name pos:start="13:55" pos:end="13:56">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="17:39"><if pos:start="15:9" pos:end="17:39">if <condition pos:start="15:12" pos:end="15:72">(<expr pos:start="15:13" pos:end="15:71"><name pos:start="15:13" pos:end="15:45"><name pos:start="15:13" pos:end="15:22">descriptor</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:45">sub_descriptors_count</name></name> <operator pos:start="15:47" pos:end="15:48">&gt;=</operator> <name pos:start="15:50" pos:end="15:57">UINT_MAX</name> <operator pos:start="15:59" pos:end="15:59">/</operator> <sizeof pos:start="15:61" pos:end="15:71">sizeof<argument_list pos:start="15:67" pos:end="15:71">(<argument pos:start="15:68" pos:end="15:70"><expr pos:start="15:68" pos:end="15:70"><name pos:start="15:68" pos:end="15:70">UID</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:39"><block_content pos:start="17:13" pos:end="17:39">

            <return pos:start="17:13" pos:end="17:39">return <expr pos:start="17:20" pos:end="17:38"><name pos:start="17:20" pos:end="17:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:102"><expr pos:start="19:9" pos:end="19:101"><name pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:18">descriptor</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:40">sub_descriptors_refs</name></name> <operator pos:start="19:42" pos:end="19:42">=</operator> <call pos:start="19:44" pos:end="19:101"><name pos:start="19:44" pos:end="19:52">av_malloc</name><argument_list pos:start="19:53" pos:end="19:101">(<argument pos:start="19:54" pos:end="19:100"><expr pos:start="19:54" pos:end="19:100"><name pos:start="19:54" pos:end="19:86"><name pos:start="19:54" pos:end="19:63">descriptor</name><operator pos:start="19:64" pos:end="19:65">-&gt;</operator><name pos:start="19:66" pos:end="19:86">sub_descriptors_count</name></name> <operator pos:start="19:88" pos:end="19:88">*</operator> <sizeof pos:start="19:90" pos:end="19:100">sizeof<argument_list pos:start="19:96" pos:end="19:100">(<argument pos:start="19:97" pos:end="19:99"><expr pos:start="19:97" pos:end="19:99"><name pos:start="19:97" pos:end="19:99">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:35"><if pos:start="21:9" pos:end="23:35">if <condition pos:start="21:12" pos:end="21:46">(<expr pos:start="21:13" pos:end="21:45"><operator pos:start="21:13" pos:end="21:13">!</operator><name pos:start="21:14" pos:end="21:45"><name pos:start="21:14" pos:end="21:23">descriptor</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:45">sub_descriptors_refs</name></name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:35"><block_content pos:start="23:13" pos:end="23:35">

            <return pos:start="23:13" pos:end="23:35">return <expr pos:start="23:20" pos:end="23:34"><call pos:start="23:20" pos:end="23:34"><name pos:start="23:20" pos:end="23:26">AVERROR</name><argument_list pos:start="23:27" pos:end="23:34">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:25"><expr pos:start="25:9" pos:end="25:24"><call pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:17">avio_skip</name><argument_list pos:start="25:18" pos:end="25:24">(<argument pos:start="25:19" pos:end="25:20"><expr pos:start="25:19" pos:end="25:20"><name pos:start="25:19" pos:end="25:20">pb</name></expr></argument>, <argument pos:start="25:23" pos:end="25:23"><expr pos:start="25:23" pos:end="25:23"><literal type="number" pos:start="25:23" pos:end="25:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="25:27" pos:end="25:85">/* useless size of objects, always 16 according to specs */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:116"><expr pos:start="27:9" pos:end="27:115"><call pos:start="27:9" pos:end="27:115"><name pos:start="27:9" pos:end="27:17">avio_read</name><argument_list pos:start="27:18" pos:end="27:115">(<argument pos:start="27:19" pos:end="27:20"><expr pos:start="27:19" pos:end="27:20"><name pos:start="27:19" pos:end="27:20">pb</name></expr></argument>, <argument pos:start="27:23" pos:end="27:65"><expr pos:start="27:23" pos:end="27:65"><operator pos:start="27:23" pos:end="27:23">(</operator><name pos:start="27:24" pos:end="27:30">uint8_t</name> <operator pos:start="27:32" pos:end="27:32">*</operator><operator pos:start="27:33" pos:end="27:33">)</operator><name pos:start="27:34" pos:end="27:65"><name pos:start="27:34" pos:end="27:43">descriptor</name><operator pos:start="27:44" pos:end="27:45">-&gt;</operator><name pos:start="27:46" pos:end="27:65">sub_descriptors_refs</name></name></expr></argument>, <argument pos:start="27:68" pos:end="27:114"><expr pos:start="27:68" pos:end="27:114"><name pos:start="27:68" pos:end="27:100"><name pos:start="27:68" pos:end="27:77">descriptor</name><operator pos:start="27:78" pos:end="27:79">-&gt;</operator><name pos:start="27:80" pos:end="27:100">sub_descriptors_count</name></name> <operator pos:start="27:102" pos:end="27:102">*</operator> <sizeof pos:start="27:104" pos:end="27:114">sizeof<argument_list pos:start="27:110" pos:end="27:114">(<argument pos:start="27:111" pos:end="27:113"><expr pos:start="27:111" pos:end="27:113"><name pos:start="27:111" pos:end="27:113">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:16">case <expr pos:start="31:10" pos:end="31:15"><literal type="number" pos:start="31:10" pos:end="31:15">0x3004</literal></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:60"><expr pos:start="33:9" pos:end="33:59"><call pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:17">avio_read</name><argument_list pos:start="33:18" pos:end="33:59">(<argument pos:start="33:19" pos:end="33:20"><expr pos:start="33:19" pos:end="33:20"><name pos:start="33:19" pos:end="33:20">pb</name></expr></argument>, <argument pos:start="33:23" pos:end="33:54"><expr pos:start="33:23" pos:end="33:54"><name pos:start="33:23" pos:end="33:54"><name pos:start="33:23" pos:end="33:32">descriptor</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:54">essence_container_ul</name></name></expr></argument>, <argument pos:start="33:57" pos:end="33:58"><expr pos:start="33:57" pos:end="33:58"><literal type="number" pos:start="33:57" pos:end="33:58">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>

    <case pos:start="37:5" pos:end="37:16">case <expr pos:start="37:10" pos:end="37:15"><literal type="number" pos:start="37:10" pos:end="37:15">0x3006</literal></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:52"><expr pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:18">descriptor</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:35">linked_track_id</name></name> <operator pos:start="39:37" pos:end="39:37">=</operator> <call pos:start="39:39" pos:end="39:51"><name pos:start="39:39" pos:end="39:47">avio_rb32</name><argument_list pos:start="39:48" pos:end="39:51">(<argument pos:start="39:49" pos:end="39:50"><expr pos:start="39:49" pos:end="39:50"><name pos:start="39:49" pos:end="39:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:16">case <expr pos:start="43:10" pos:end="43:15"><literal type="number" pos:start="43:10" pos:end="43:15">0x3201</literal></expr>:</case> <comment type="block" pos:start="43:18" pos:end="43:43">/* PictureEssenceCoding */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:56"><expr pos:start="45:9" pos:end="45:55"><call pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:17">avio_read</name><argument_list pos:start="45:18" pos:end="45:55">(<argument pos:start="45:19" pos:end="45:20"><expr pos:start="45:19" pos:end="45:20"><name pos:start="45:19" pos:end="45:20">pb</name></expr></argument>, <argument pos:start="45:23" pos:end="45:50"><expr pos:start="45:23" pos:end="45:50"><name pos:start="45:23" pos:end="45:50"><name pos:start="45:23" pos:end="45:32">descriptor</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:50">essence_codec_ul</name></name></expr></argument>, <argument pos:start="45:53" pos:end="45:54"><expr pos:start="45:53" pos:end="45:54"><literal type="number" pos:start="45:53" pos:end="45:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:16">case <expr pos:start="49:10" pos:end="49:15"><literal type="number" pos:start="49:10" pos:end="49:15">0x3203</literal></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:42"><expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:18">descriptor</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:25">width</name></name> <operator pos:start="51:27" pos:end="51:27">=</operator> <call pos:start="51:29" pos:end="51:41"><name pos:start="51:29" pos:end="51:37">avio_rb32</name><argument_list pos:start="51:38" pos:end="51:41">(<argument pos:start="51:39" pos:end="51:40"><expr pos:start="51:39" pos:end="51:40"><name pos:start="51:39" pos:end="51:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:16">case <expr pos:start="55:10" pos:end="55:15"><literal type="number" pos:start="55:10" pos:end="55:15">0x3202</literal></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:18">descriptor</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:26">height</name></name> <operator pos:start="57:28" pos:end="57:28">=</operator> <call pos:start="57:30" pos:end="57:42"><name pos:start="57:30" pos:end="57:38">avio_rb32</name><argument_list pos:start="57:39" pos:end="57:42">(<argument pos:start="57:40" pos:end="57:41"><expr pos:start="57:40" pos:end="57:41"><name pos:start="57:40" pos:end="57:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:16">case <expr pos:start="61:10" pos:end="61:15"><literal type="number" pos:start="61:10" pos:end="61:15">0x320C</literal></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:47"><expr pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:32"><name pos:start="63:9" pos:end="63:18">descriptor</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:32">frame_layout</name></name> <operator pos:start="63:34" pos:end="63:34">=</operator> <call pos:start="63:36" pos:end="63:46"><name pos:start="63:36" pos:end="63:42">avio_r8</name><argument_list pos:start="63:43" pos:end="63:46">(<argument pos:start="63:44" pos:end="63:45"><expr pos:start="63:44" pos:end="63:45"><name pos:start="63:44" pos:end="63:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:16">case <expr pos:start="67:10" pos:end="67:15"><literal type="number" pos:start="67:10" pos:end="67:15">0x320E</literal></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:53"><expr pos:start="69:9" pos:end="69:52"><name pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:18">descriptor</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:32">aspect_ratio</name><operator pos:start="69:33" pos:end="69:33">.</operator><name pos:start="69:34" pos:end="69:36">num</name></name> <operator pos:start="69:38" pos:end="69:38">=</operator> <call pos:start="69:40" pos:end="69:52"><name pos:start="69:40" pos:end="69:48">avio_rb32</name><argument_list pos:start="69:49" pos:end="69:52">(<argument pos:start="69:50" pos:end="69:51"><expr pos:start="69:50" pos:end="69:51"><name pos:start="69:50" pos:end="69:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:53"><expr pos:start="71:9" pos:end="71:52"><name pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:18">descriptor</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:32">aspect_ratio</name><operator pos:start="71:33" pos:end="71:33">.</operator><name pos:start="71:34" pos:end="71:36">den</name></name> <operator pos:start="71:38" pos:end="71:38">=</operator> <call pos:start="71:40" pos:end="71:52"><name pos:start="71:40" pos:end="71:48">avio_rb32</name><argument_list pos:start="71:49" pos:end="71:52">(<argument pos:start="71:50" pos:end="71:51"><expr pos:start="71:50" pos:end="71:51"><name pos:start="71:50" pos:end="71:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:16">case <expr pos:start="75:10" pos:end="75:15"><literal type="number" pos:start="75:10" pos:end="75:15">0x3301</literal></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:52"><expr pos:start="77:9" pos:end="77:51"><name pos:start="77:9" pos:end="77:35"><name pos:start="77:9" pos:end="77:18">descriptor</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:35">component_depth</name></name> <operator pos:start="77:37" pos:end="77:37">=</operator> <call pos:start="77:39" pos:end="77:51"><name pos:start="77:39" pos:end="77:47">avio_rb32</name><argument_list pos:start="77:48" pos:end="77:51">(<argument pos:start="77:49" pos:end="77:50"><expr pos:start="77:49" pos:end="77:50"><name pos:start="77:49" pos:end="77:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:16">case <expr pos:start="81:10" pos:end="81:15"><literal type="number" pos:start="81:10" pos:end="81:15">0x3302</literal></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:54"><expr pos:start="83:9" pos:end="83:53"><name pos:start="83:9" pos:end="83:37"><name pos:start="83:9" pos:end="83:18">descriptor</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:37">horiz_subsampling</name></name> <operator pos:start="83:39" pos:end="83:39">=</operator> <call pos:start="83:41" pos:end="83:53"><name pos:start="83:41" pos:end="83:49">avio_rb32</name><argument_list pos:start="83:50" pos:end="83:53">(<argument pos:start="83:51" pos:end="83:52"><expr pos:start="83:51" pos:end="83:52"><name pos:start="83:51" pos:end="83:52">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:16">case <expr pos:start="87:10" pos:end="87:15"><literal type="number" pos:start="87:10" pos:end="87:15">0x3308</literal></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:53"><expr pos:start="89:9" pos:end="89:52"><name pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:18">descriptor</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:36">vert_subsampling</name></name> <operator pos:start="89:38" pos:end="89:38">=</operator> <call pos:start="89:40" pos:end="89:52"><name pos:start="89:40" pos:end="89:48">avio_rb32</name><argument_list pos:start="89:49" pos:end="89:52">(<argument pos:start="89:50" pos:end="89:51"><expr pos:start="89:50" pos:end="89:51"><name pos:start="89:50" pos:end="89:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:16">case <expr pos:start="93:10" pos:end="93:15"><literal type="number" pos:start="93:10" pos:end="93:15">0x3D03</literal></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:52"><expr pos:start="95:9" pos:end="95:51"><name pos:start="95:9" pos:end="95:35"><name pos:start="95:9" pos:end="95:18">descriptor</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:31">sample_rate</name><operator pos:start="95:32" pos:end="95:32">.</operator><name pos:start="95:33" pos:end="95:35">num</name></name> <operator pos:start="95:37" pos:end="95:37">=</operator> <call pos:start="95:39" pos:end="95:51"><name pos:start="95:39" pos:end="95:47">avio_rb32</name><argument_list pos:start="95:48" pos:end="95:51">(<argument pos:start="95:49" pos:end="95:50"><expr pos:start="95:49" pos:end="95:50"><name pos:start="95:49" pos:end="95:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:52"><expr pos:start="97:9" pos:end="97:51"><name pos:start="97:9" pos:end="97:35"><name pos:start="97:9" pos:end="97:18">descriptor</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:31">sample_rate</name><operator pos:start="97:32" pos:end="97:32">.</operator><name pos:start="97:33" pos:end="97:35">den</name></name> <operator pos:start="97:37" pos:end="97:37">=</operator> <call pos:start="97:39" pos:end="97:51"><name pos:start="97:39" pos:end="97:47">avio_rb32</name><argument_list pos:start="97:48" pos:end="97:51">(<argument pos:start="97:49" pos:end="97:50"><expr pos:start="97:49" pos:end="97:50"><name pos:start="97:49" pos:end="97:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:16">case <expr pos:start="101:10" pos:end="101:15"><literal type="number" pos:start="101:10" pos:end="101:15">0x3D06</literal></expr>:</case> <comment type="block" pos:start="101:18" pos:end="101:46">/* SoundEssenceCompression */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:56"><expr pos:start="103:9" pos:end="103:55"><call pos:start="103:9" pos:end="103:55"><name pos:start="103:9" pos:end="103:17">avio_read</name><argument_list pos:start="103:18" pos:end="103:55">(<argument pos:start="103:19" pos:end="103:20"><expr pos:start="103:19" pos:end="103:20"><name pos:start="103:19" pos:end="103:20">pb</name></expr></argument>, <argument pos:start="103:23" pos:end="103:50"><expr pos:start="103:23" pos:end="103:50"><name pos:start="103:23" pos:end="103:50"><name pos:start="103:23" pos:end="103:32">descriptor</name><operator pos:start="103:33" pos:end="103:34">-&gt;</operator><name pos:start="103:35" pos:end="103:50">essence_codec_ul</name></name></expr></argument>, <argument pos:start="103:53" pos:end="103:54"><expr pos:start="103:53" pos:end="103:54"><literal type="number" pos:start="103:53" pos:end="103:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:16">case <expr pos:start="107:10" pos:end="107:15"><literal type="number" pos:start="107:10" pos:end="107:15">0x3D07</literal></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:45"><expr pos:start="109:9" pos:end="109:44"><name pos:start="109:9" pos:end="109:28"><name pos:start="109:9" pos:end="109:18">descriptor</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:28">channels</name></name> <operator pos:start="109:30" pos:end="109:30">=</operator> <call pos:start="109:32" pos:end="109:44"><name pos:start="109:32" pos:end="109:40">avio_rb32</name><argument_list pos:start="109:41" pos:end="109:44">(<argument pos:start="109:42" pos:end="109:43"><expr pos:start="109:42" pos:end="109:43"><name pos:start="109:42" pos:end="109:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:16">case <expr pos:start="113:10" pos:end="113:15"><literal type="number" pos:start="113:10" pos:end="113:15">0x3D01</literal></expr>:</case>

        <expr_stmt pos:start="115:9" pos:end="115:52"><expr pos:start="115:9" pos:end="115:51"><name pos:start="115:9" pos:end="115:35"><name pos:start="115:9" pos:end="115:18">descriptor</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:35">bits_per_sample</name></name> <operator pos:start="115:37" pos:end="115:37">=</operator> <call pos:start="115:39" pos:end="115:51"><name pos:start="115:39" pos:end="115:47">avio_rb32</name><argument_list pos:start="115:48" pos:end="115:51">(<argument pos:start="115:49" pos:end="115:50"><expr pos:start="115:49" pos:end="115:50"><name pos:start="115:49" pos:end="115:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:16">case <expr pos:start="119:10" pos:end="119:15"><literal type="number" pos:start="119:10" pos:end="119:15">0x3401</literal></expr>:</case>

        <expr_stmt pos:start="121:9" pos:end="121:46"><expr pos:start="121:9" pos:end="121:45"><call pos:start="121:9" pos:end="121:45"><name pos:start="121:9" pos:end="121:29">mxf_read_pixel_layout</name><argument_list pos:start="121:30" pos:end="121:45">(<argument pos:start="121:31" pos:end="121:32"><expr pos:start="121:31" pos:end="121:32"><name pos:start="121:31" pos:end="121:32">pb</name></expr></argument>, <argument pos:start="121:35" pos:end="121:44"><expr pos:start="121:35" pos:end="121:44"><name pos:start="121:35" pos:end="121:44">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <default pos:start="125:5" pos:end="125:12">default:</default>

        <comment type="block" pos:start="127:9" pos:end="127:51">/* Private uid used by SONY C0023S01.mxf */</comment>

        <if_stmt pos:start="129:9" pos:end="143:9"><if pos:start="129:9" pos:end="143:9">if <condition pos:start="129:12" pos:end="129:54">(<expr pos:start="129:13" pos:end="129:53"><call pos:start="129:13" pos:end="129:53"><name pos:start="129:13" pos:end="129:22">IS_KLV_KEY</name><argument_list pos:start="129:23" pos:end="129:53">(<argument pos:start="129:24" pos:end="129:26"><expr pos:start="129:24" pos:end="129:26"><name pos:start="129:24" pos:end="129:26">uid</name></expr></argument>, <argument pos:start="129:29" pos:end="129:52"><expr pos:start="129:29" pos:end="129:52"><name pos:start="129:29" pos:end="129:52">mxf_sony_mpeg4_extradata</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:56" pos:end="143:9">{<block_content pos:start="133:13" pos:end="141:55">



            <expr_stmt pos:start="133:13" pos:end="133:83"><expr pos:start="133:13" pos:end="133:82"><name pos:start="133:13" pos:end="133:33"><name pos:start="133:13" pos:end="133:22">descriptor</name><operator pos:start="133:23" pos:end="133:24">-&gt;</operator><name pos:start="133:25" pos:end="133:33">extradata</name></name> <operator pos:start="133:35" pos:end="133:35">=</operator> <call pos:start="133:37" pos:end="133:82"><name pos:start="133:37" pos:end="133:45">av_malloc</name><argument_list pos:start="133:46" pos:end="133:82">(<argument pos:start="133:47" pos:end="133:81"><expr pos:start="133:47" pos:end="133:81"><name pos:start="133:47" pos:end="133:50">size</name> <operator pos:start="133:52" pos:end="133:52">+</operator> <name pos:start="133:54" pos:end="133:81">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="137:39"><if pos:start="135:13" pos:end="137:39">if <condition pos:start="135:16" pos:end="135:39">(<expr pos:start="135:17" pos:end="135:38"><operator pos:start="135:17" pos:end="135:17">!</operator><name pos:start="135:18" pos:end="135:38"><name pos:start="135:18" pos:end="135:27">descriptor</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:38">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:39"><block_content pos:start="137:17" pos:end="137:39">

                <return pos:start="137:17" pos:end="137:39">return <expr pos:start="137:24" pos:end="137:38"><call pos:start="137:24" pos:end="137:38"><name pos:start="137:24" pos:end="137:30">AVERROR</name><argument_list pos:start="137:31" pos:end="137:38">(<argument pos:start="137:32" pos:end="137:37"><expr pos:start="137:32" pos:end="137:37"><name pos:start="137:32" pos:end="137:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:46"><expr pos:start="139:13" pos:end="139:45"><name pos:start="139:13" pos:end="139:38"><name pos:start="139:13" pos:end="139:22">descriptor</name><operator pos:start="139:23" pos:end="139:24">-&gt;</operator><name pos:start="139:25" pos:end="139:38">extradata_size</name></name> <operator pos:start="139:40" pos:end="139:40">=</operator> <name pos:start="139:42" pos:end="139:45">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:55"><expr pos:start="141:13" pos:end="141:54"><call pos:start="141:13" pos:end="141:54"><name pos:start="141:13" pos:end="141:21">avio_read</name><argument_list pos:start="141:22" pos:end="141:54">(<argument pos:start="141:23" pos:end="141:24"><expr pos:start="141:23" pos:end="141:24"><name pos:start="141:23" pos:end="141:24">pb</name></expr></argument>, <argument pos:start="141:27" pos:end="141:47"><expr pos:start="141:27" pos:end="141:47"><name pos:start="141:27" pos:end="141:47"><name pos:start="141:27" pos:end="141:36">descriptor</name><operator pos:start="141:37" pos:end="141:38">-&gt;</operator><name pos:start="141:39" pos:end="141:47">extradata</name></name></expr></argument>, <argument pos:start="141:50" pos:end="141:53"><expr pos:start="141:50" pos:end="141:53"><name pos:start="141:50" pos:end="141:53">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="149:5" pos:end="149:13">return <expr pos:start="149:12" pos:end="149:12"><literal type="number" pos:start="149:12" pos:end="149:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
