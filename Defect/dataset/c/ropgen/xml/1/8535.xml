<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8535.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:27"><name pos:start="1:1" pos:end="1:25">GuestNetworkInterfaceList</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:59">qmp_guest_network_get_interfaces</name><parameter_list pos:start="1:60" pos:end="1:73">(<parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:68"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="283:1">{<block_content pos:start="5:5" pos:end="281:16">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:31"><name pos:start="5:5" pos:end="5:29">GuestNetworkInterfaceList</name> <modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:35">head</name> <init pos:start="5:37" pos:end="5:42">= <expr pos:start="5:39" pos:end="5:42"><name pos:start="5:39" pos:end="5:42">NULL</name></expr></init></decl>, <decl pos:start="5:45" pos:end="5:60"><type ref="prev" pos:start="5:5" pos:end="5:31"><modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:53">cur_item</name> <init pos:start="5:55" pos:end="5:60">= <expr pos:start="5:57" pos:end="5:60"><name pos:start="5:57" pos:end="5:60">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">ifaddrs</name></name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">ifap</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:20"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">ifa</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:30">(<expr pos:start="11:9" pos:end="11:29"><call pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:18">getifaddrs</name><argument_list pos:start="11:19" pos:end="11:25">(<argument pos:start="11:20" pos:end="11:24"><expr pos:start="11:20" pos:end="11:24"><operator pos:start="11:20" pos:end="11:20">&amp;</operator><name pos:start="11:21" pos:end="11:24">ifap</name></expr></argument>)</argument_list></call> <operator pos:start="11:27" pos:end="11:27">&lt;</operator> <literal type="number" pos:start="11:29" pos:end="11:29">0</literal></expr>)</condition> <block pos:start="11:32" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:19">

        <expr_stmt pos:start="13:9" pos:end="13:59"><expr pos:start="13:9" pos:end="13:58"><call pos:start="13:9" pos:end="13:58"><name pos:start="13:9" pos:end="13:24">error_setg_errno</name><argument_list pos:start="13:25" pos:end="13:58">(<argument pos:start="13:26" pos:end="13:29"><expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">errp</name></expr></argument>, <argument pos:start="13:32" pos:end="13:36"><expr pos:start="13:32" pos:end="13:36"><name pos:start="13:32" pos:end="13:36">errno</name></expr></argument>, <argument pos:start="13:39" pos:end="13:57"><expr pos:start="13:39" pos:end="13:57"><literal type="string" pos:start="13:39" pos:end="13:57">"getifaddrs failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="15:9" pos:end="15:19">goto <name pos:start="15:14" pos:end="15:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="21:5" pos:end="265:5">for <control pos:start="21:9" pos:end="21:46">(<init pos:start="21:10" pos:end="21:20"><expr pos:start="21:10" pos:end="21:19"><name pos:start="21:10" pos:end="21:12">ifa</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:19">ifap</name></expr>;</init> <condition pos:start="21:22" pos:end="21:25"><expr pos:start="21:22" pos:end="21:24"><name pos:start="21:22" pos:end="21:24">ifa</name></expr>;</condition> <incr pos:start="21:27" pos:end="21:45"><expr pos:start="21:27" pos:end="21:45"><name pos:start="21:27" pos:end="21:29">ifa</name> <operator pos:start="21:31" pos:end="21:31">=</operator> <name pos:start="21:33" pos:end="21:45"><name pos:start="21:33" pos:end="21:35">ifa</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:45">ifa_next</name></name></expr></incr>)</control> <block pos:start="21:48" pos:end="265:5">{<block_content pos:start="23:9" pos:end="259:45">

        <decl_stmt pos:start="23:9" pos:end="23:40"><decl pos:start="23:9" pos:end="23:39"><type pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:33">GuestNetworkInterfaceList</name> <modifier pos:start="23:35" pos:end="23:35">*</modifier></type><name pos:start="23:36" pos:end="23:39">info</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:71"><decl pos:start="25:9" pos:end="25:48"><type pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:26">GuestIpAddressList</name> <modifier pos:start="25:28" pos:end="25:28">*</modifier><modifier pos:start="25:29" pos:end="25:29">*</modifier></type><name pos:start="25:30" pos:end="25:41">address_list</name> <init pos:start="25:43" pos:end="25:48">= <expr pos:start="25:45" pos:end="25:48"><name pos:start="25:45" pos:end="25:48">NULL</name></expr></init></decl>, <decl pos:start="25:51" pos:end="25:70"><type ref="prev" pos:start="25:9" pos:end="25:29"><modifier pos:start="25:51" pos:end="25:51">*</modifier></type><name pos:start="25:52" pos:end="25:63">address_item</name> <init pos:start="25:65" pos:end="25:70">= <expr pos:start="25:67" pos:end="25:70"><name pos:start="25:67" pos:end="25:70">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:36"><decl pos:start="27:9" pos:end="27:35"><type pos:start="27:9" pos:end="27:12"><name pos:start="27:9" pos:end="27:12">char</name></type> <name pos:start="27:14" pos:end="27:35"><name pos:start="27:14" pos:end="27:18">addr4</name><index pos:start="27:19" pos:end="27:35">[<expr pos:start="27:20" pos:end="27:34"><name pos:start="27:20" pos:end="27:34">INET_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:37"><decl pos:start="29:9" pos:end="29:36"><type pos:start="29:9" pos:end="29:12"><name pos:start="29:9" pos:end="29:12">char</name></type> <name pos:start="29:14" pos:end="29:36"><name pos:start="29:14" pos:end="29:18">addr6</name><index pos:start="29:19" pos:end="29:36">[<expr pos:start="29:20" pos:end="29:35"><name pos:start="29:20" pos:end="29:35">INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:17"><decl pos:start="31:9" pos:end="31:16"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:16">sock</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:25"><decl pos:start="33:9" pos:end="33:24"><type pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:14">struct</name> <name pos:start="33:16" pos:end="33:20">ifreq</name></name></type> <name pos:start="33:22" pos:end="33:24">ifr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:32"><decl pos:start="35:9" pos:end="35:31"><type pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:16">unsigned</name> <name pos:start="35:18" pos:end="35:21">char</name> <modifier pos:start="35:23" pos:end="35:23">*</modifier></type><name pos:start="35:24" pos:end="35:31">mac_addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:16"><decl pos:start="37:9" pos:end="37:15"><type pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:12">void</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:15">p</name></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:58"><expr pos:start="41:9" pos:end="41:57"><call pos:start="41:9" pos:end="41:57"><name pos:start="41:9" pos:end="41:15">g_debug</name><argument_list pos:start="41:16" pos:end="41:57">(<argument pos:start="41:17" pos:end="41:41"><expr pos:start="41:17" pos:end="41:41"><literal type="string" pos:start="41:17" pos:end="41:41">"Processing %s interface"</literal></expr></argument>, <argument pos:start="41:44" pos:end="41:56"><expr pos:start="41:44" pos:end="41:56"><name pos:start="41:44" pos:end="41:56"><name pos:start="41:44" pos:end="41:46">ifa</name><operator pos:start="41:47" pos:end="41:48">-&gt;</operator><name pos:start="41:49" pos:end="41:56">ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:57"><expr pos:start="45:9" pos:end="45:56"><name pos:start="45:9" pos:end="45:12">info</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:56"><name pos:start="45:16" pos:end="45:35">guest_find_interface</name><argument_list pos:start="45:36" pos:end="45:56">(<argument pos:start="45:37" pos:end="45:40"><expr pos:start="45:37" pos:end="45:40"><name pos:start="45:37" pos:end="45:40">head</name></expr></argument>, <argument pos:start="45:43" pos:end="45:55"><expr pos:start="45:43" pos:end="45:55"><name pos:start="45:43" pos:end="45:55"><name pos:start="45:43" pos:end="45:45">ifa</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:55">ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="49:9" pos:end="71:9"><if pos:start="49:9" pos:end="71:9">if <condition pos:start="49:12" pos:end="49:18">(<expr pos:start="49:13" pos:end="49:17"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:17">info</name></expr>)</condition> <block pos:start="49:20" pos:end="71:9">{<block_content pos:start="51:13" pos:end="69:13">

            <expr_stmt pos:start="51:13" pos:end="51:44"><expr pos:start="51:13" pos:end="51:43"><name pos:start="51:13" pos:end="51:16">info</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:43"><name pos:start="51:20" pos:end="51:28">g_malloc0</name><argument_list pos:start="51:29" pos:end="51:43">(<argument pos:start="51:30" pos:end="51:42"><expr pos:start="51:30" pos:end="51:42"><sizeof pos:start="51:30" pos:end="51:42">sizeof<argument_list pos:start="51:36" pos:end="51:42">(<argument pos:start="51:37" pos:end="51:41"><expr pos:start="51:37" pos:end="51:41"><operator pos:start="51:37" pos:end="51:37">*</operator><name pos:start="51:38" pos:end="51:41">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:58"><expr pos:start="53:13" pos:end="53:57"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:16">info</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:23">value</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <call pos:start="53:27" pos:end="53:57"><name pos:start="53:27" pos:end="53:35">g_malloc0</name><argument_list pos:start="53:36" pos:end="53:57">(<argument pos:start="53:37" pos:end="53:56"><expr pos:start="53:37" pos:end="53:56"><sizeof pos:start="53:37" pos:end="53:56">sizeof<argument_list pos:start="53:43" pos:end="53:56">(<argument pos:start="53:44" pos:end="53:55"><expr pos:start="53:44" pos:end="53:55"><operator pos:start="53:44" pos:end="53:44">*</operator><name pos:start="53:45" pos:end="53:55"><name pos:start="53:45" pos:end="53:48">info</name><operator pos:start="53:49" pos:end="53:50">-&gt;</operator><name pos:start="53:51" pos:end="53:55">value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:56"><expr pos:start="55:13" pos:end="55:55"><name pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:16">info</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:23">value</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:29">name</name></name> <operator pos:start="55:31" pos:end="55:31">=</operator> <call pos:start="55:33" pos:end="55:55"><name pos:start="55:33" pos:end="55:40">g_strdup</name><argument_list pos:start="55:41" pos:end="55:55">(<argument pos:start="55:42" pos:end="55:54"><expr pos:start="55:42" pos:end="55:54"><name pos:start="55:42" pos:end="55:54"><name pos:start="55:42" pos:end="55:44">ifa</name><operator pos:start="55:45" pos:end="55:46">-&gt;</operator><name pos:start="55:47" pos:end="55:54">ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="59:13" pos:end="69:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:26">(<expr pos:start="59:17" pos:end="59:25"><operator pos:start="59:17" pos:end="59:17">!</operator><name pos:start="59:18" pos:end="59:25">cur_item</name></expr>)</condition> <block pos:start="59:28" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:39">

                <expr_stmt pos:start="61:17" pos:end="61:39"><expr pos:start="61:17" pos:end="61:38"><name pos:start="61:17" pos:end="61:20">head</name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:31">cur_item</name> <operator pos:start="61:33" pos:end="61:33">=</operator> <name pos:start="61:35" pos:end="61:38">info</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="63:15" pos:end="69:13">else <block pos:start="63:20" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:32">

                <expr_stmt pos:start="65:17" pos:end="65:38"><expr pos:start="65:17" pos:end="65:37"><name pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:24">cur_item</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:30">next</name></name> <operator pos:start="65:32" pos:end="65:32">=</operator> <name pos:start="65:34" pos:end="65:37">info</name></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:24">cur_item</name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:31">info</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="75:9" pos:end="131:9"><if pos:start="75:9" pos:end="131:9">if <condition pos:start="75:12" pos:end="77:43">(<expr pos:start="75:13" pos:end="77:42"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:46"><name pos:start="75:14" pos:end="75:17">info</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:24">value</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:46">has_hardware_address</name></name> <operator pos:start="75:48" pos:end="75:49">&amp;&amp;</operator>

            <name pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:15">ifa</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:26">ifa_flags</name></name> <operator pos:start="77:28" pos:end="77:28">&amp;</operator> <name pos:start="77:30" pos:end="77:42">SIOCGIFHWADDR</name></expr>)</condition> <block pos:start="77:45" pos:end="131:9">{<block_content pos:start="81:13" pos:end="129:24">

            <comment type="block" pos:start="79:13" pos:end="79:52">/* we haven't obtained HW address yet */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:51"><expr pos:start="81:13" pos:end="81:50"><name pos:start="81:13" pos:end="81:16">sock</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <call pos:start="81:20" pos:end="81:50"><name pos:start="81:20" pos:end="81:25">socket</name><argument_list pos:start="81:26" pos:end="81:50">(<argument pos:start="81:27" pos:end="81:33"><expr pos:start="81:27" pos:end="81:33"><name pos:start="81:27" pos:end="81:33">PF_INET</name></expr></argument>, <argument pos:start="81:36" pos:end="81:46"><expr pos:start="81:36" pos:end="81:46"><name pos:start="81:36" pos:end="81:46">SOCK_STREAM</name></expr></argument>, <argument pos:start="81:49" pos:end="81:49"><expr pos:start="81:49" pos:end="81:49"><literal type="number" pos:start="81:49" pos:end="81:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="83:13" pos:end="89:13"><if pos:start="83:13" pos:end="89:13">if <condition pos:start="83:16" pos:end="83:27">(<expr pos:start="83:17" pos:end="83:26"><name pos:start="83:17" pos:end="83:20">sock</name> <operator pos:start="83:22" pos:end="83:23">==</operator> <operator pos:start="83:25" pos:end="83:25">-</operator><literal type="number" pos:start="83:26" pos:end="83:26">1</literal></expr>)</condition> <block pos:start="83:29" pos:end="89:13">{<block_content pos:start="85:17" pos:end="87:27">

                <expr_stmt pos:start="85:17" pos:end="85:73"><expr pos:start="85:17" pos:end="85:72"><call pos:start="85:17" pos:end="85:72"><name pos:start="85:17" pos:end="85:32">error_setg_errno</name><argument_list pos:start="85:33" pos:end="85:72">(<argument pos:start="85:34" pos:end="85:37"><expr pos:start="85:34" pos:end="85:37"><name pos:start="85:34" pos:end="85:37">errp</name></expr></argument>, <argument pos:start="85:40" pos:end="85:44"><expr pos:start="85:40" pos:end="85:44"><name pos:start="85:40" pos:end="85:44">errno</name></expr></argument>, <argument pos:start="85:47" pos:end="85:71"><expr pos:start="85:47" pos:end="85:71"><literal type="string" pos:start="85:47" pos:end="85:71">"failed to create socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="87:17" pos:end="87:27">goto <name pos:start="87:22" pos:end="87:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="93:13" pos:end="93:41"><expr pos:start="93:13" pos:end="93:40"><call pos:start="93:13" pos:end="93:40"><name pos:start="93:13" pos:end="93:18">memset</name><argument_list pos:start="93:19" pos:end="93:40">(<argument pos:start="93:20" pos:end="93:23"><expr pos:start="93:20" pos:end="93:23"><operator pos:start="93:20" pos:end="93:20">&amp;</operator><name pos:start="93:21" pos:end="93:23">ifr</name></expr></argument>, <argument pos:start="93:26" pos:end="93:26"><expr pos:start="93:26" pos:end="93:26"><literal type="number" pos:start="93:26" pos:end="93:26">0</literal></expr></argument>, <argument pos:start="93:29" pos:end="93:39"><expr pos:start="93:29" pos:end="93:39"><sizeof pos:start="93:29" pos:end="93:39">sizeof<argument_list pos:start="93:35" pos:end="93:39">(<argument pos:start="93:36" pos:end="93:38"><expr pos:start="93:36" pos:end="93:38"><name pos:start="93:36" pos:end="93:38">ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:66"><expr pos:start="95:13" pos:end="95:65"><call pos:start="95:13" pos:end="95:65"><name pos:start="95:13" pos:end="95:19">pstrcpy</name><argument_list pos:start="95:20" pos:end="95:65">(<argument pos:start="95:21" pos:end="95:32"><expr pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:23">ifr</name><operator pos:start="95:24" pos:end="95:24">.</operator><name pos:start="95:25" pos:end="95:32">ifr_name</name></name></expr></argument>, <argument pos:start="95:35" pos:end="95:45"><expr pos:start="95:35" pos:end="95:45"><name pos:start="95:35" pos:end="95:45">IF_NAMESIZE</name></expr></argument>, <argument pos:start="95:48" pos:end="95:64"><expr pos:start="95:48" pos:end="95:64"><name pos:start="95:48" pos:end="95:64"><name pos:start="95:48" pos:end="95:51">info</name><operator pos:start="95:52" pos:end="95:53">-&gt;</operator><name pos:start="95:54" pos:end="95:58">value</name><operator pos:start="95:59" pos:end="95:60">-&gt;</operator><name pos:start="95:61" pos:end="95:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="107:13"><if pos:start="97:13" pos:end="107:13">if <condition pos:start="97:16" pos:end="97:55">(<expr pos:start="97:17" pos:end="97:54"><call pos:start="97:17" pos:end="97:48"><name pos:start="97:17" pos:end="97:21">ioctl</name><argument_list pos:start="97:22" pos:end="97:48">(<argument pos:start="97:23" pos:end="97:26"><expr pos:start="97:23" pos:end="97:26"><name pos:start="97:23" pos:end="97:26">sock</name></expr></argument>, <argument pos:start="97:29" pos:end="97:41"><expr pos:start="97:29" pos:end="97:41"><name pos:start="97:29" pos:end="97:41">SIOCGIFHWADDR</name></expr></argument>, <argument pos:start="97:44" pos:end="97:47"><expr pos:start="97:44" pos:end="97:47"><operator pos:start="97:44" pos:end="97:44">&amp;</operator><name pos:start="97:45" pos:end="97:47">ifr</name></expr></argument>)</argument_list></call> <operator pos:start="97:50" pos:end="97:51">==</operator> <operator pos:start="97:53" pos:end="97:53">-</operator><literal type="number" pos:start="97:54" pos:end="97:54">1</literal></expr>)</condition> <block pos:start="97:57" pos:end="107:13">{<block_content pos:start="99:17" pos:end="105:27">

                <expr_stmt pos:start="99:17" pos:end="103:48"><expr pos:start="99:17" pos:end="103:47"><call pos:start="99:17" pos:end="103:47"><name pos:start="99:17" pos:end="99:32">error_setg_errno</name><argument_list pos:start="99:33" pos:end="103:47">(<argument pos:start="99:34" pos:end="99:37"><expr pos:start="99:34" pos:end="99:37"><name pos:start="99:34" pos:end="99:37">errp</name></expr></argument>, <argument pos:start="99:40" pos:end="99:44"><expr pos:start="99:40" pos:end="99:44"><name pos:start="99:40" pos:end="99:44">errno</name></expr></argument>,

                                 <argument pos:start="101:34" pos:end="101:66"><expr pos:start="101:34" pos:end="101:66"><literal type="string" pos:start="101:34" pos:end="101:66">"failed to get MAC address of %s"</literal></expr></argument>,

                                 <argument pos:start="103:34" pos:end="103:46"><expr pos:start="103:34" pos:end="103:46"><name pos:start="103:34" pos:end="103:46"><name pos:start="103:34" pos:end="103:36">ifa</name><operator pos:start="103:37" pos:end="103:38">-&gt;</operator><name pos:start="103:39" pos:end="103:46">ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="105:17" pos:end="105:27">goto <name pos:start="105:22" pos:end="105:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:65"><expr pos:start="111:13" pos:end="111:64"><name pos:start="111:13" pos:end="111:20">mac_addr</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <operator pos:start="111:24" pos:end="111:24">(</operator><name pos:start="111:25" pos:end="111:32">unsigned</name> <name pos:start="111:34" pos:end="111:37">char</name> <operator pos:start="111:39" pos:end="111:39">*</operator><operator pos:start="111:40" pos:end="111:40">)</operator> <operator pos:start="111:42" pos:end="111:42">&amp;</operator><name pos:start="111:43" pos:end="111:64"><name pos:start="111:43" pos:end="111:45">ifr</name><operator pos:start="111:46" pos:end="111:46">.</operator><name pos:start="111:47" pos:end="111:56">ifr_hwaddr</name><operator pos:start="111:57" pos:end="111:57">.</operator><name pos:start="111:58" pos:end="111:64">sa_data</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="115:13" pos:end="123:70"><expr pos:start="115:13" pos:end="123:69"><name pos:start="115:13" pos:end="115:41"><name pos:start="115:13" pos:end="115:16">info</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:23">value</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:41">hardware_address</name></name> <operator pos:start="115:43" pos:end="115:43">=</operator>

                <call pos:start="117:17" pos:end="123:69"><name pos:start="117:17" pos:end="117:31">g_strdup_printf</name><argument_list pos:start="117:32" pos:end="123:69">(<argument pos:start="117:33" pos:end="117:63"><expr pos:start="117:33" pos:end="117:63"><literal type="string" pos:start="117:33" pos:end="117:63">"%02x:%02x:%02x:%02x:%02x:%02x"</literal></expr></argument>,

                                <argument pos:start="119:33" pos:end="119:49"><expr pos:start="119:33" pos:end="119:49"><operator pos:start="119:33" pos:end="119:33">(</operator><name pos:start="119:34" pos:end="119:36">int</name><operator pos:start="119:37" pos:end="119:37">)</operator> <name pos:start="119:39" pos:end="119:49"><name pos:start="119:39" pos:end="119:46">mac_addr</name><index pos:start="119:47" pos:end="119:49">[<expr pos:start="119:48" pos:end="119:48"><literal type="number" pos:start="119:48" pos:end="119:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="119:52" pos:end="119:68"><expr pos:start="119:52" pos:end="119:68"><operator pos:start="119:52" pos:end="119:52">(</operator><name pos:start="119:53" pos:end="119:55">int</name><operator pos:start="119:56" pos:end="119:56">)</operator> <name pos:start="119:58" pos:end="119:68"><name pos:start="119:58" pos:end="119:65">mac_addr</name><index pos:start="119:66" pos:end="119:68">[<expr pos:start="119:67" pos:end="119:67"><literal type="number" pos:start="119:67" pos:end="119:67">1</literal></expr>]</index></name></expr></argument>,

                                <argument pos:start="121:33" pos:end="121:49"><expr pos:start="121:33" pos:end="121:49"><operator pos:start="121:33" pos:end="121:33">(</operator><name pos:start="121:34" pos:end="121:36">int</name><operator pos:start="121:37" pos:end="121:37">)</operator> <name pos:start="121:39" pos:end="121:49"><name pos:start="121:39" pos:end="121:46">mac_addr</name><index pos:start="121:47" pos:end="121:49">[<expr pos:start="121:48" pos:end="121:48"><literal type="number" pos:start="121:48" pos:end="121:48">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:52" pos:end="121:68"><expr pos:start="121:52" pos:end="121:68"><operator pos:start="121:52" pos:end="121:52">(</operator><name pos:start="121:53" pos:end="121:55">int</name><operator pos:start="121:56" pos:end="121:56">)</operator> <name pos:start="121:58" pos:end="121:68"><name pos:start="121:58" pos:end="121:65">mac_addr</name><index pos:start="121:66" pos:end="121:68">[<expr pos:start="121:67" pos:end="121:67"><literal type="number" pos:start="121:67" pos:end="121:67">3</literal></expr>]</index></name></expr></argument>,

                                <argument pos:start="123:33" pos:end="123:49"><expr pos:start="123:33" pos:end="123:49"><operator pos:start="123:33" pos:end="123:33">(</operator><name pos:start="123:34" pos:end="123:36">int</name><operator pos:start="123:37" pos:end="123:37">)</operator> <name pos:start="123:39" pos:end="123:49"><name pos:start="123:39" pos:end="123:46">mac_addr</name><index pos:start="123:47" pos:end="123:49">[<expr pos:start="123:48" pos:end="123:48"><literal type="number" pos:start="123:48" pos:end="123:48">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="123:52" pos:end="123:68"><expr pos:start="123:52" pos:end="123:68"><operator pos:start="123:52" pos:end="123:52">(</operator><name pos:start="123:53" pos:end="123:55">int</name><operator pos:start="123:56" pos:end="123:56">)</operator> <name pos:start="123:58" pos:end="123:68"><name pos:start="123:58" pos:end="123:65">mac_addr</name><index pos:start="123:66" pos:end="123:68">[<expr pos:start="123:67" pos:end="123:67"><literal type="number" pos:start="123:67" pos:end="123:67">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="127:13" pos:end="127:53"><expr pos:start="127:13" pos:end="127:52"><name pos:start="127:13" pos:end="127:45"><name pos:start="127:13" pos:end="127:16">info</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:23">value</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:45">has_hardware_address</name></name> <operator pos:start="127:47" pos:end="127:47">=</operator> <name pos:start="127:49" pos:end="127:52">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:24"><expr pos:start="129:13" pos:end="129:23"><call pos:start="129:13" pos:end="129:23"><name pos:start="129:13" pos:end="129:17">close</name><argument_list pos:start="129:18" pos:end="129:23">(<argument pos:start="129:19" pos:end="129:22"><expr pos:start="129:19" pos:end="129:22"><name pos:start="129:19" pos:end="129:22">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="135:9" pos:end="223:9"><if pos:start="135:9" pos:end="175:9">if <condition pos:start="135:12" pos:end="137:48">(<expr pos:start="135:13" pos:end="137:47"><name pos:start="135:13" pos:end="135:25"><name pos:start="135:13" pos:end="135:15">ifa</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:25">ifa_addr</name></name> <operator pos:start="135:27" pos:end="135:28">&amp;&amp;</operator>

            <name pos:start="137:13" pos:end="137:36"><name pos:start="137:13" pos:end="137:15">ifa</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:25">ifa_addr</name><operator pos:start="137:26" pos:end="137:27">-&gt;</operator><name pos:start="137:28" pos:end="137:36">sa_family</name></name> <operator pos:start="137:38" pos:end="137:39">==</operator> <name pos:start="137:41" pos:end="137:47">AF_INET</name></expr>)</condition> <block pos:start="137:50" pos:end="175:9">{<block_content pos:start="141:13" pos:end="173:13">

            <comment type="block" pos:start="139:13" pos:end="139:45">/* interface with IPv4 address */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:60"><expr pos:start="141:13" pos:end="141:59"><name pos:start="141:13" pos:end="141:24">address_item</name> <operator pos:start="141:26" pos:end="141:26">=</operator> <call pos:start="141:28" pos:end="141:59"><name pos:start="141:28" pos:end="141:36">g_malloc0</name><argument_list pos:start="141:37" pos:end="141:59">(<argument pos:start="141:38" pos:end="141:58"><expr pos:start="141:38" pos:end="141:58"><sizeof pos:start="141:38" pos:end="141:58">sizeof<argument_list pos:start="141:44" pos:end="141:58">(<argument pos:start="141:45" pos:end="141:57"><expr pos:start="141:45" pos:end="141:57"><operator pos:start="141:45" pos:end="141:45">*</operator><name pos:start="141:46" pos:end="141:57">address_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:74"><expr pos:start="143:13" pos:end="143:73"><name pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:24">address_item</name><operator pos:start="143:25" pos:end="143:26">-&gt;</operator><name pos:start="143:27" pos:end="143:31">value</name></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <call pos:start="143:35" pos:end="143:73"><name pos:start="143:35" pos:end="143:43">g_malloc0</name><argument_list pos:start="143:44" pos:end="143:73">(<argument pos:start="143:45" pos:end="143:72"><expr pos:start="143:45" pos:end="143:72"><sizeof pos:start="143:45" pos:end="143:72">sizeof<argument_list pos:start="143:51" pos:end="143:72">(<argument pos:start="143:52" pos:end="143:71"><expr pos:start="143:52" pos:end="143:71"><operator pos:start="143:52" pos:end="143:52">*</operator><name pos:start="143:53" pos:end="143:71"><name pos:start="143:53" pos:end="143:64">address_item</name><operator pos:start="143:65" pos:end="143:66">-&gt;</operator><name pos:start="143:67" pos:end="143:71">value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:65"><expr pos:start="145:13" pos:end="145:64"><name pos:start="145:13" pos:end="145:13">p</name> <operator pos:start="145:15" pos:end="145:15">=</operator> <operator pos:start="145:17" pos:end="145:17">&amp;</operator><operator pos:start="145:18" pos:end="145:18">(</operator><operator pos:start="145:19" pos:end="145:19">(</operator>struct <name pos:start="145:27" pos:end="145:37">sockaddr_in</name> <operator pos:start="145:39" pos:end="145:39">*</operator><operator pos:start="145:40" pos:end="145:40">)</operator><name pos:start="145:41" pos:end="145:53"><name pos:start="145:41" pos:end="145:43">ifa</name><operator pos:start="145:44" pos:end="145:45">-&gt;</operator><name pos:start="145:46" pos:end="145:53">ifa_addr</name></name><operator pos:start="145:54" pos:end="145:54">)</operator><operator pos:start="145:55" pos:end="145:56">-&gt;</operator><name pos:start="145:57" pos:end="145:64">sin_addr</name></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="153:13"><if pos:start="147:13" pos:end="153:13">if <condition pos:start="147:16" pos:end="147:61">(<expr pos:start="147:17" pos:end="147:60"><operator pos:start="147:17" pos:end="147:17">!</operator><call pos:start="147:18" pos:end="147:60"><name pos:start="147:18" pos:end="147:26">inet_ntop</name><argument_list pos:start="147:27" pos:end="147:60">(<argument pos:start="147:28" pos:end="147:34"><expr pos:start="147:28" pos:end="147:34"><name pos:start="147:28" pos:end="147:34">AF_INET</name></expr></argument>, <argument pos:start="147:37" pos:end="147:37"><expr pos:start="147:37" pos:end="147:37"><name pos:start="147:37" pos:end="147:37">p</name></expr></argument>, <argument pos:start="147:40" pos:end="147:44"><expr pos:start="147:40" pos:end="147:44"><name pos:start="147:40" pos:end="147:44">addr4</name></expr></argument>, <argument pos:start="147:47" pos:end="147:59"><expr pos:start="147:47" pos:end="147:59"><sizeof pos:start="147:47" pos:end="147:59">sizeof<argument_list pos:start="147:53" pos:end="147:59">(<argument pos:start="147:54" pos:end="147:58"><expr pos:start="147:54" pos:end="147:58"><name pos:start="147:54" pos:end="147:58">addr4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:63" pos:end="153:13">{<block_content pos:start="149:17" pos:end="151:27">

                <expr_stmt pos:start="149:17" pos:end="149:66"><expr pos:start="149:17" pos:end="149:65"><call pos:start="149:17" pos:end="149:65"><name pos:start="149:17" pos:end="149:32">error_setg_errno</name><argument_list pos:start="149:33" pos:end="149:65">(<argument pos:start="149:34" pos:end="149:37"><expr pos:start="149:34" pos:end="149:37"><name pos:start="149:34" pos:end="149:37">errp</name></expr></argument>, <argument pos:start="149:40" pos:end="149:44"><expr pos:start="149:40" pos:end="149:44"><name pos:start="149:40" pos:end="149:44">errno</name></expr></argument>, <argument pos:start="149:47" pos:end="149:64"><expr pos:start="149:47" pos:end="149:64"><literal type="string" pos:start="149:47" pos:end="149:64">"inet_ntop failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="151:17" pos:end="151:27">goto <name pos:start="151:22" pos:end="151:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="157:13" pos:end="157:62"><expr pos:start="157:13" pos:end="157:61"><name pos:start="157:13" pos:end="157:43"><name pos:start="157:13" pos:end="157:24">address_item</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:31">value</name><operator pos:start="157:32" pos:end="157:33">-&gt;</operator><name pos:start="157:34" pos:end="157:43">ip_address</name></name> <operator pos:start="157:45" pos:end="157:45">=</operator> <call pos:start="157:47" pos:end="157:61"><name pos:start="157:47" pos:end="157:54">g_strdup</name><argument_list pos:start="157:55" pos:end="157:61">(<argument pos:start="157:56" pos:end="157:60"><expr pos:start="157:56" pos:end="157:60"><name pos:start="157:56" pos:end="157:60">addr4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:78"><expr pos:start="159:13" pos:end="159:77"><name pos:start="159:13" pos:end="159:48"><name pos:start="159:13" pos:end="159:24">address_item</name><operator pos:start="159:25" pos:end="159:26">-&gt;</operator><name pos:start="159:27" pos:end="159:31">value</name><operator pos:start="159:32" pos:end="159:33">-&gt;</operator><name pos:start="159:34" pos:end="159:48">ip_address_type</name></name> <operator pos:start="159:50" pos:end="159:50">=</operator> <name pos:start="159:52" pos:end="159:77">GUEST_IP_ADDRESS_TYPE_IPV4</name></expr>;</expr_stmt>



            <if_stmt pos:start="163:13" pos:end="173:13"><if pos:start="163:13" pos:end="173:13">if <condition pos:start="163:16" pos:end="163:33">(<expr pos:start="163:17" pos:end="163:32"><name pos:start="163:17" pos:end="163:32"><name pos:start="163:17" pos:end="163:19">ifa</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:32">ifa_netmask</name></name></expr>)</condition> <block pos:start="163:35" pos:end="173:13">{<block_content pos:start="169:17" pos:end="171:75">

                <comment type="block" pos:start="165:17" pos:end="167:80">/* Count the number of set bits in netmask.

                 * This is safe as '1' and '0' cannot be shuffled in netmask. */</comment>

                <expr_stmt pos:start="169:17" pos:end="169:72"><expr pos:start="169:17" pos:end="169:71"><name pos:start="169:17" pos:end="169:17">p</name> <operator pos:start="169:19" pos:end="169:19">=</operator> <operator pos:start="169:21" pos:end="169:21">&amp;</operator><operator pos:start="169:22" pos:end="169:22">(</operator><operator pos:start="169:23" pos:end="169:23">(</operator>struct <name pos:start="169:31" pos:end="169:41">sockaddr_in</name> <operator pos:start="169:43" pos:end="169:43">*</operator><operator pos:start="169:44" pos:end="169:44">)</operator><name pos:start="169:45" pos:end="169:60"><name pos:start="169:45" pos:end="169:47">ifa</name><operator pos:start="169:48" pos:end="169:49">-&gt;</operator><name pos:start="169:50" pos:end="169:60">ifa_netmask</name></name><operator pos:start="169:61" pos:end="169:61">)</operator><operator pos:start="169:62" pos:end="169:63">-&gt;</operator><name pos:start="169:64" pos:end="169:71">sin_addr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:75"><expr pos:start="171:17" pos:end="171:74"><name pos:start="171:17" pos:end="171:43"><name pos:start="171:17" pos:end="171:28">address_item</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:35">value</name><operator pos:start="171:36" pos:end="171:37">-&gt;</operator><name pos:start="171:38" pos:end="171:43">prefix</name></name> <operator pos:start="171:45" pos:end="171:45">=</operator> <call pos:start="171:47" pos:end="171:74"><name pos:start="171:47" pos:end="171:53">ctpop32</name><argument_list pos:start="171:54" pos:end="171:74">(<argument pos:start="171:55" pos:end="171:73"><expr pos:start="171:55" pos:end="171:73"><operator pos:start="171:55" pos:end="171:55">(</operator><operator pos:start="171:56" pos:end="171:56">(</operator><name pos:start="171:57" pos:end="171:64">uint32_t</name> <operator pos:start="171:66" pos:end="171:66">*</operator><operator pos:start="171:67" pos:end="171:67">)</operator> <name pos:start="171:69" pos:end="171:69">p</name><operator pos:start="171:70" pos:end="171:70">)</operator><index pos:start="171:71" pos:end="171:73">[<expr pos:start="171:72" pos:end="171:72"><literal type="number" pos:start="171:72" pos:end="171:72">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="175:11" pos:end="223:9">else if <condition pos:start="175:19" pos:end="177:56">(<expr pos:start="175:20" pos:end="177:55"><name pos:start="175:20" pos:end="175:32"><name pos:start="175:20" pos:end="175:22">ifa</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:32">ifa_addr</name></name> <operator pos:start="175:34" pos:end="175:35">&amp;&amp;</operator>

                   <name pos:start="177:20" pos:end="177:43"><name pos:start="177:20" pos:end="177:22">ifa</name><operator pos:start="177:23" pos:end="177:24">-&gt;</operator><name pos:start="177:25" pos:end="177:32">ifa_addr</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:43">sa_family</name></name> <operator pos:start="177:45" pos:end="177:46">==</operator> <name pos:start="177:48" pos:end="177:55">AF_INET6</name></expr>)</condition> <block pos:start="177:58" pos:end="223:9">{<block_content pos:start="181:13" pos:end="221:13">

            <comment type="block" pos:start="179:13" pos:end="179:45">/* interface with IPv6 address */</comment>

            <expr_stmt pos:start="181:13" pos:end="181:60"><expr pos:start="181:13" pos:end="181:59"><name pos:start="181:13" pos:end="181:24">address_item</name> <operator pos:start="181:26" pos:end="181:26">=</operator> <call pos:start="181:28" pos:end="181:59"><name pos:start="181:28" pos:end="181:36">g_malloc0</name><argument_list pos:start="181:37" pos:end="181:59">(<argument pos:start="181:38" pos:end="181:58"><expr pos:start="181:38" pos:end="181:58"><sizeof pos:start="181:38" pos:end="181:58">sizeof<argument_list pos:start="181:44" pos:end="181:58">(<argument pos:start="181:45" pos:end="181:57"><expr pos:start="181:45" pos:end="181:57"><operator pos:start="181:45" pos:end="181:45">*</operator><name pos:start="181:46" pos:end="181:57">address_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:74"><expr pos:start="183:13" pos:end="183:73"><name pos:start="183:13" pos:end="183:31"><name pos:start="183:13" pos:end="183:24">address_item</name><operator pos:start="183:25" pos:end="183:26">-&gt;</operator><name pos:start="183:27" pos:end="183:31">value</name></name> <operator pos:start="183:33" pos:end="183:33">=</operator> <call pos:start="183:35" pos:end="183:73"><name pos:start="183:35" pos:end="183:43">g_malloc0</name><argument_list pos:start="183:44" pos:end="183:73">(<argument pos:start="183:45" pos:end="183:72"><expr pos:start="183:45" pos:end="183:72"><sizeof pos:start="183:45" pos:end="183:72">sizeof<argument_list pos:start="183:51" pos:end="183:72">(<argument pos:start="183:52" pos:end="183:71"><expr pos:start="183:52" pos:end="183:71"><operator pos:start="183:52" pos:end="183:52">*</operator><name pos:start="183:53" pos:end="183:71"><name pos:start="183:53" pos:end="183:64">address_item</name><operator pos:start="183:65" pos:end="183:66">-&gt;</operator><name pos:start="183:67" pos:end="183:71">value</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:67"><expr pos:start="185:13" pos:end="185:66"><name pos:start="185:13" pos:end="185:13">p</name> <operator pos:start="185:15" pos:end="185:15">=</operator> <operator pos:start="185:17" pos:end="185:17">&amp;</operator><operator pos:start="185:18" pos:end="185:18">(</operator><operator pos:start="185:19" pos:end="185:19">(</operator>struct <name pos:start="185:27" pos:end="185:38">sockaddr_in6</name> <operator pos:start="185:40" pos:end="185:40">*</operator><operator pos:start="185:41" pos:end="185:41">)</operator><name pos:start="185:42" pos:end="185:54"><name pos:start="185:42" pos:end="185:44">ifa</name><operator pos:start="185:45" pos:end="185:46">-&gt;</operator><name pos:start="185:47" pos:end="185:54">ifa_addr</name></name><operator pos:start="185:55" pos:end="185:55">)</operator><operator pos:start="185:56" pos:end="185:57">-&gt;</operator><name pos:start="185:58" pos:end="185:66">sin6_addr</name></expr>;</expr_stmt>

            <if_stmt pos:start="187:13" pos:end="193:13"><if pos:start="187:13" pos:end="193:13">if <condition pos:start="187:16" pos:end="187:62">(<expr pos:start="187:17" pos:end="187:61"><operator pos:start="187:17" pos:end="187:17">!</operator><call pos:start="187:18" pos:end="187:61"><name pos:start="187:18" pos:end="187:26">inet_ntop</name><argument_list pos:start="187:27" pos:end="187:61">(<argument pos:start="187:28" pos:end="187:35"><expr pos:start="187:28" pos:end="187:35"><name pos:start="187:28" pos:end="187:35">AF_INET6</name></expr></argument>, <argument pos:start="187:38" pos:end="187:38"><expr pos:start="187:38" pos:end="187:38"><name pos:start="187:38" pos:end="187:38">p</name></expr></argument>, <argument pos:start="187:41" pos:end="187:45"><expr pos:start="187:41" pos:end="187:45"><name pos:start="187:41" pos:end="187:45">addr6</name></expr></argument>, <argument pos:start="187:48" pos:end="187:60"><expr pos:start="187:48" pos:end="187:60"><sizeof pos:start="187:48" pos:end="187:60">sizeof<argument_list pos:start="187:54" pos:end="187:60">(<argument pos:start="187:55" pos:end="187:59"><expr pos:start="187:55" pos:end="187:59"><name pos:start="187:55" pos:end="187:59">addr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:64" pos:end="193:13">{<block_content pos:start="189:17" pos:end="191:27">

                <expr_stmt pos:start="189:17" pos:end="189:66"><expr pos:start="189:17" pos:end="189:65"><call pos:start="189:17" pos:end="189:65"><name pos:start="189:17" pos:end="189:32">error_setg_errno</name><argument_list pos:start="189:33" pos:end="189:65">(<argument pos:start="189:34" pos:end="189:37"><expr pos:start="189:34" pos:end="189:37"><name pos:start="189:34" pos:end="189:37">errp</name></expr></argument>, <argument pos:start="189:40" pos:end="189:44"><expr pos:start="189:40" pos:end="189:44"><name pos:start="189:40" pos:end="189:44">errno</name></expr></argument>, <argument pos:start="189:47" pos:end="189:64"><expr pos:start="189:47" pos:end="189:64"><literal type="string" pos:start="189:47" pos:end="189:64">"inet_ntop failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="191:17" pos:end="191:27">goto <name pos:start="191:22" pos:end="191:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="197:13" pos:end="197:62"><expr pos:start="197:13" pos:end="197:61"><name pos:start="197:13" pos:end="197:43"><name pos:start="197:13" pos:end="197:24">address_item</name><operator pos:start="197:25" pos:end="197:26">-&gt;</operator><name pos:start="197:27" pos:end="197:31">value</name><operator pos:start="197:32" pos:end="197:33">-&gt;</operator><name pos:start="197:34" pos:end="197:43">ip_address</name></name> <operator pos:start="197:45" pos:end="197:45">=</operator> <call pos:start="197:47" pos:end="197:61"><name pos:start="197:47" pos:end="197:54">g_strdup</name><argument_list pos:start="197:55" pos:end="197:61">(<argument pos:start="197:56" pos:end="197:60"><expr pos:start="197:56" pos:end="197:60"><name pos:start="197:56" pos:end="197:60">addr6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:78"><expr pos:start="199:13" pos:end="199:77"><name pos:start="199:13" pos:end="199:48"><name pos:start="199:13" pos:end="199:24">address_item</name><operator pos:start="199:25" pos:end="199:26">-&gt;</operator><name pos:start="199:27" pos:end="199:31">value</name><operator pos:start="199:32" pos:end="199:33">-&gt;</operator><name pos:start="199:34" pos:end="199:48">ip_address_type</name></name> <operator pos:start="199:50" pos:end="199:50">=</operator> <name pos:start="199:52" pos:end="199:77">GUEST_IP_ADDRESS_TYPE_IPV6</name></expr>;</expr_stmt>



            <if_stmt pos:start="203:13" pos:end="221:13"><if pos:start="203:13" pos:end="221:13">if <condition pos:start="203:16" pos:end="203:33">(<expr pos:start="203:17" pos:end="203:32"><name pos:start="203:17" pos:end="203:32"><name pos:start="203:17" pos:end="203:19">ifa</name><operator pos:start="203:20" pos:end="203:21">-&gt;</operator><name pos:start="203:22" pos:end="203:32">ifa_netmask</name></name></expr>)</condition> <block pos:start="203:35" pos:end="221:13">{<block_content pos:start="209:17" pos:end="219:49">

                <comment type="block" pos:start="205:17" pos:end="207:80">/* Count the number of set bits in netmask.

                 * This is safe as '1' and '0' cannot be shuffled in netmask. */</comment>

                <expr_stmt pos:start="209:17" pos:end="209:74"><expr pos:start="209:17" pos:end="209:73"><name pos:start="209:17" pos:end="209:17">p</name> <operator pos:start="209:19" pos:end="209:19">=</operator> <operator pos:start="209:21" pos:end="209:21">&amp;</operator><operator pos:start="209:22" pos:end="209:22">(</operator><operator pos:start="209:23" pos:end="209:23">(</operator>struct <name pos:start="209:31" pos:end="209:42">sockaddr_in6</name> <operator pos:start="209:44" pos:end="209:44">*</operator><operator pos:start="209:45" pos:end="209:45">)</operator><name pos:start="209:46" pos:end="209:61"><name pos:start="209:46" pos:end="209:48">ifa</name><operator pos:start="209:49" pos:end="209:50">-&gt;</operator><name pos:start="209:51" pos:end="209:61">ifa_netmask</name></name><operator pos:start="209:62" pos:end="209:62">)</operator><operator pos:start="209:63" pos:end="209:64">-&gt;</operator><name pos:start="209:65" pos:end="209:73">sin6_addr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="219:49"><expr pos:start="211:17" pos:end="219:48"><name pos:start="211:17" pos:end="211:43"><name pos:start="211:17" pos:end="211:28">address_item</name><operator pos:start="211:29" pos:end="211:30">-&gt;</operator><name pos:start="211:31" pos:end="211:35">value</name><operator pos:start="211:36" pos:end="211:37">-&gt;</operator><name pos:start="211:38" pos:end="211:43">prefix</name></name> <operator pos:start="211:45" pos:end="211:45">=</operator>

                    <call pos:start="213:21" pos:end="213:48"><name pos:start="213:21" pos:end="213:27">ctpop32</name><argument_list pos:start="213:28" pos:end="213:48">(<argument pos:start="213:29" pos:end="213:47"><expr pos:start="213:29" pos:end="213:47"><operator pos:start="213:29" pos:end="213:29">(</operator><operator pos:start="213:30" pos:end="213:30">(</operator><name pos:start="213:31" pos:end="213:38">uint32_t</name> <operator pos:start="213:40" pos:end="213:40">*</operator><operator pos:start="213:41" pos:end="213:41">)</operator> <name pos:start="213:43" pos:end="213:43">p</name><operator pos:start="213:44" pos:end="213:44">)</operator><index pos:start="213:45" pos:end="213:47">[<expr pos:start="213:46" pos:end="213:46"><literal type="number" pos:start="213:46" pos:end="213:46">0</literal></expr>]</index></expr></argument>)</argument_list></call> <operator pos:start="213:50" pos:end="213:50">+</operator>

                    <call pos:start="215:21" pos:end="215:48"><name pos:start="215:21" pos:end="215:27">ctpop32</name><argument_list pos:start="215:28" pos:end="215:48">(<argument pos:start="215:29" pos:end="215:47"><expr pos:start="215:29" pos:end="215:47"><operator pos:start="215:29" pos:end="215:29">(</operator><operator pos:start="215:30" pos:end="215:30">(</operator><name pos:start="215:31" pos:end="215:38">uint32_t</name> <operator pos:start="215:40" pos:end="215:40">*</operator><operator pos:start="215:41" pos:end="215:41">)</operator> <name pos:start="215:43" pos:end="215:43">p</name><operator pos:start="215:44" pos:end="215:44">)</operator><index pos:start="215:45" pos:end="215:47">[<expr pos:start="215:46" pos:end="215:46"><literal type="number" pos:start="215:46" pos:end="215:46">1</literal></expr>]</index></expr></argument>)</argument_list></call> <operator pos:start="215:50" pos:end="215:50">+</operator>

                    <call pos:start="217:21" pos:end="217:48"><name pos:start="217:21" pos:end="217:27">ctpop32</name><argument_list pos:start="217:28" pos:end="217:48">(<argument pos:start="217:29" pos:end="217:47"><expr pos:start="217:29" pos:end="217:47"><operator pos:start="217:29" pos:end="217:29">(</operator><operator pos:start="217:30" pos:end="217:30">(</operator><name pos:start="217:31" pos:end="217:38">uint32_t</name> <operator pos:start="217:40" pos:end="217:40">*</operator><operator pos:start="217:41" pos:end="217:41">)</operator> <name pos:start="217:43" pos:end="217:43">p</name><operator pos:start="217:44" pos:end="217:44">)</operator><index pos:start="217:45" pos:end="217:47">[<expr pos:start="217:46" pos:end="217:46"><literal type="number" pos:start="217:46" pos:end="217:46">2</literal></expr>]</index></expr></argument>)</argument_list></call> <operator pos:start="217:50" pos:end="217:50">+</operator>

                    <call pos:start="219:21" pos:end="219:48"><name pos:start="219:21" pos:end="219:27">ctpop32</name><argument_list pos:start="219:28" pos:end="219:48">(<argument pos:start="219:29" pos:end="219:47"><expr pos:start="219:29" pos:end="219:47"><operator pos:start="219:29" pos:end="219:29">(</operator><operator pos:start="219:30" pos:end="219:30">(</operator><name pos:start="219:31" pos:end="219:38">uint32_t</name> <operator pos:start="219:40" pos:end="219:40">*</operator><operator pos:start="219:41" pos:end="219:41">)</operator> <name pos:start="219:43" pos:end="219:43">p</name><operator pos:start="219:44" pos:end="219:44">)</operator><index pos:start="219:45" pos:end="219:47">[<expr pos:start="219:46" pos:end="219:46"><literal type="number" pos:start="219:46" pos:end="219:46">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="227:9" pos:end="231:9"><if pos:start="227:9" pos:end="231:9">if <condition pos:start="227:12" pos:end="227:26">(<expr pos:start="227:13" pos:end="227:25"><operator pos:start="227:13" pos:end="227:13">!</operator><name pos:start="227:14" pos:end="227:25">address_item</name></expr>)</condition> <block pos:start="227:28" pos:end="231:9">{<block_content pos:start="229:13" pos:end="229:21">

            <continue pos:start="229:13" pos:end="229:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="235:9" pos:end="235:50"><expr pos:start="235:9" pos:end="235:49"><name pos:start="235:9" pos:end="235:20">address_list</name> <operator pos:start="235:22" pos:end="235:22">=</operator> <operator pos:start="235:24" pos:end="235:24">&amp;</operator><name pos:start="235:25" pos:end="235:49"><name pos:start="235:25" pos:end="235:28">info</name><operator pos:start="235:29" pos:end="235:30">-&gt;</operator><name pos:start="235:31" pos:end="235:35">value</name><operator pos:start="235:36" pos:end="235:37">-&gt;</operator><name pos:start="235:38" pos:end="235:49">ip_addresses</name></name></expr>;</expr_stmt>



        <while pos:start="239:9" pos:end="243:9">while <condition pos:start="239:15" pos:end="239:54">(<expr pos:start="239:16" pos:end="239:53"><operator pos:start="239:16" pos:end="239:16">*</operator><name pos:start="239:17" pos:end="239:28">address_list</name> <operator pos:start="239:30" pos:end="239:31">&amp;&amp;</operator> <name pos:start="239:33" pos:end="239:53"><operator pos:start="239:33" pos:end="239:33">(</operator><operator pos:start="239:34" pos:end="239:34">*</operator><name pos:start="239:35" pos:end="239:46">address_list</name><operator pos:start="239:47" pos:end="239:47">)</operator><operator pos:start="239:48" pos:end="239:49">-&gt;</operator><name pos:start="239:50" pos:end="239:53">next</name></name></expr>)</condition> <block pos:start="239:56" pos:end="243:9">{<block_content pos:start="241:13" pos:end="241:50">

            <expr_stmt pos:start="241:13" pos:end="241:50"><expr pos:start="241:13" pos:end="241:49"><name pos:start="241:13" pos:end="241:24">address_list</name> <operator pos:start="241:26" pos:end="241:26">=</operator> <operator pos:start="241:28" pos:end="241:28">&amp;</operator><name pos:start="241:29" pos:end="241:49"><operator pos:start="241:29" pos:end="241:29">(</operator><operator pos:start="241:30" pos:end="241:30">*</operator><name pos:start="241:31" pos:end="241:42">address_list</name><operator pos:start="241:43" pos:end="241:43">)</operator><operator pos:start="241:44" pos:end="241:45">-&gt;</operator><name pos:start="241:46" pos:end="241:49">next</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="247:9" pos:end="255:9"><if pos:start="247:9" pos:end="251:9">if <condition pos:start="247:12" pos:end="247:27">(<expr pos:start="247:13" pos:end="247:26"><operator pos:start="247:13" pos:end="247:13">!</operator><operator pos:start="247:14" pos:end="247:14">*</operator><name pos:start="247:15" pos:end="247:26">address_list</name></expr>)</condition> <block pos:start="247:29" pos:end="251:9">{<block_content pos:start="249:13" pos:end="249:41">

            <expr_stmt pos:start="249:13" pos:end="249:41"><expr pos:start="249:13" pos:end="249:40"><operator pos:start="249:13" pos:end="249:13">*</operator><name pos:start="249:14" pos:end="249:25">address_list</name> <operator pos:start="249:27" pos:end="249:27">=</operator> <name pos:start="249:29" pos:end="249:40">address_item</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="251:11" pos:end="255:9">else <block pos:start="251:16" pos:end="255:9">{<block_content pos:start="253:13" pos:end="253:49">

            <expr_stmt pos:start="253:13" pos:end="253:49"><expr pos:start="253:13" pos:end="253:48"><name pos:start="253:13" pos:end="253:33"><operator pos:start="253:13" pos:end="253:13">(</operator><operator pos:start="253:14" pos:end="253:14">*</operator><name pos:start="253:15" pos:end="253:26">address_list</name><operator pos:start="253:27" pos:end="253:27">)</operator><operator pos:start="253:28" pos:end="253:29">-&gt;</operator><name pos:start="253:30" pos:end="253:33">next</name></name> <operator pos:start="253:35" pos:end="253:35">=</operator> <name pos:start="253:37" pos:end="253:48">address_item</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="259:9" pos:end="259:45"><expr pos:start="259:9" pos:end="259:44"><name pos:start="259:9" pos:end="259:37"><name pos:start="259:9" pos:end="259:12">info</name><operator pos:start="259:13" pos:end="259:14">-&gt;</operator><name pos:start="259:15" pos:end="259:19">value</name><operator pos:start="259:20" pos:end="259:21">-&gt;</operator><name pos:start="259:22" pos:end="259:37">has_ip_addresses</name></name> <operator pos:start="259:39" pos:end="259:39">=</operator> <name pos:start="259:41" pos:end="259:44">true</name></expr>;</expr_stmt>





    </block_content>}</block></for>



    <expr_stmt pos:start="269:5" pos:end="269:22"><expr pos:start="269:5" pos:end="269:21"><call pos:start="269:5" pos:end="269:21"><name pos:start="269:5" pos:end="269:15">freeifaddrs</name><argument_list pos:start="269:16" pos:end="269:21">(<argument pos:start="269:17" pos:end="269:20"><expr pos:start="269:17" pos:end="269:20"><name pos:start="269:17" pos:end="269:20">ifap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="271:5" pos:end="271:16">return <expr pos:start="271:12" pos:end="271:15"><name pos:start="271:12" pos:end="271:15">head</name></expr>;</return>



<label pos:start="275:1" pos:end="275:6"><name pos:start="275:1" pos:end="275:5">error</name>:</label>

    <expr_stmt pos:start="277:5" pos:end="277:22"><expr pos:start="277:5" pos:end="277:21"><call pos:start="277:5" pos:end="277:21"><name pos:start="277:5" pos:end="277:15">freeifaddrs</name><argument_list pos:start="277:16" pos:end="277:21">(<argument pos:start="277:17" pos:end="277:20"><expr pos:start="277:17" pos:end="277:20"><name pos:start="277:17" pos:end="277:20">ifap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:46"><expr pos:start="279:5" pos:end="279:45"><call pos:start="279:5" pos:end="279:45"><name pos:start="279:5" pos:end="279:39">qapi_free_GuestNetworkInterfaceList</name><argument_list pos:start="279:40" pos:end="279:45">(<argument pos:start="279:41" pos:end="279:44"><expr pos:start="279:41" pos:end="279:44"><name pos:start="279:41" pos:end="279:44">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="281:5" pos:end="281:16">return <expr pos:start="281:12" pos:end="281:15"><name pos:start="281:12" pos:end="281:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
