<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24821.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name> <name pos:start="1:17" pos:end="1:20">long</name></type> <name pos:start="1:22" pos:end="1:37">copy_elf_strings</name><parameter_list pos:start="1:38" pos:end="3:54">(<parameter pos:start="1:39" pos:end="1:46"><decl pos:start="1:39" pos:end="1:46"><type pos:start="1:39" pos:end="1:46"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:46">argc</name></decl></parameter>,<parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier><modifier pos:start="1:54" pos:end="1:54">*</modifier></type> <name pos:start="1:56" pos:end="1:59">argv</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:72"><decl pos:start="1:62" pos:end="1:72"><type pos:start="1:62" pos:end="1:72"><name pos:start="1:62" pos:end="1:65">void</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">page</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:53"><decl pos:start="3:39" pos:end="3:53"><type pos:start="3:39" pos:end="3:53"><name pos:start="3:39" pos:end="3:46">unsigned</name> <name pos:start="3:48" pos:end="3:51">long</name></type> <name pos:start="3:53" pos:end="3:53">p</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">tmp</name></decl>, <decl pos:start="7:16" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">tmp1</name></decl>, <decl pos:start="7:23" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:26">pag</name> <init pos:start="7:28" pos:end="7:33">= <expr pos:start="7:30" pos:end="7:33"><name pos:start="7:30" pos:end="7:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>, <decl pos:start="9:14" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:19">offset</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:11">(<expr pos:start="13:9" pos:end="13:10"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:10">p</name></expr>)</condition> <block pos:start="13:13" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:17">

	<return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return>       <comment type="block" pos:start="15:25" pos:end="15:45">/* bullet-proofing */</comment>

    </block_content>}</block></if></if_stmt>

    <while pos:start="19:5" pos:end="91:5">while <condition pos:start="19:11" pos:end="19:22">(<expr pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:15">argc</name><operator pos:start="19:16" pos:end="19:17">--</operator> <operator pos:start="19:19" pos:end="19:19">&gt;</operator> <literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr>)</condition> <block pos:start="19:24" pos:end="91:5">{<block_content pos:start="21:9" pos:end="89:9">

        <expr_stmt pos:start="21:9" pos:end="21:25"><expr pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:11">tmp</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:24"><name pos:start="21:15" pos:end="21:18">argv</name><index pos:start="21:19" pos:end="21:24">[<expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">argc</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:17">(<expr pos:start="23:13" pos:end="23:16"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:16">tmp</name></expr>)</condition> <block pos:start="23:19" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

	    <expr_stmt pos:start="25:13" pos:end="25:50"><expr pos:start="25:13" pos:end="25:49"><call pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:19">fprintf</name><argument_list pos:start="25:20" pos:end="25:49">(<argument pos:start="25:21" pos:end="25:26"><expr pos:start="25:21" pos:end="25:26"><name pos:start="25:21" pos:end="25:26">stderr</name></expr></argument>, <argument pos:start="25:29" pos:end="25:48"><expr pos:start="25:29" pos:end="25:48"><literal type="string" pos:start="25:29" pos:end="25:48">"VFS: argc is wrong"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="27:13" pos:end="27:21"><expr pos:start="27:13" pos:end="27:20"><call pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:16">exit</name><argument_list pos:start="27:17" pos:end="27:20">(<argument pos:start="27:18" pos:end="27:19"><expr pos:start="27:18" pos:end="27:19"><operator pos:start="27:18" pos:end="27:18">-</operator><literal type="number" pos:start="27:19" pos:end="27:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:12">tmp1</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:18">tmp</name></expr>;</expr_stmt>

	<while pos:start="33:9" pos:end="33:23">while <condition pos:start="33:15" pos:end="33:22">(<expr pos:start="33:16" pos:end="33:21"><operator pos:start="33:16" pos:end="33:16">*</operator><name pos:start="33:17" pos:end="33:19">tmp</name><operator pos:start="33:20" pos:end="33:21">++</operator></expr>)</condition><block type="pseudo" pos:start="33:23" pos:end="33:23"><block_content pos:start="33:23" pos:end="33:23"><empty_stmt pos:start="33:23" pos:end="33:23">;</empty_stmt></block_content></block></while>

	<expr_stmt pos:start="35:9" pos:end="35:25"><expr pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:11">len</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:17">tmp</name> <operator pos:start="35:19" pos:end="35:19">-</operator> <name pos:start="35:21" pos:end="35:24">tmp1</name></expr>;</expr_stmt>

	<if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:20">(<expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:13">p</name> <operator pos:start="37:15" pos:end="37:15">&lt;</operator> <name pos:start="37:17" pos:end="37:19">len</name></expr>)</condition> <block pos:start="37:22" pos:end="41:9">{<block_content pos:start="39:17" pos:end="39:25">  <comment type="block" pos:start="37:25" pos:end="37:59">/* this shouldn't happen - 128kB */</comment>

		<return pos:start="39:17" pos:end="39:25">return <expr pos:start="39:24" pos:end="39:24"><literal type="number" pos:start="39:24" pos:end="39:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<while pos:start="43:9" pos:end="89:9">while <condition pos:start="43:15" pos:end="43:19">(<expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">len</name></expr>)</condition> <block pos:start="43:21" pos:end="89:9">{<block_content pos:start="45:13" pos:end="87:13">

	    <expr_stmt pos:start="45:13" pos:end="45:16"><expr pos:start="45:13" pos:end="45:15"><operator pos:start="45:13" pos:end="45:14">--</operator><name pos:start="45:15" pos:end="45:15">p</name></expr>;</expr_stmt> <expr_stmt pos:start="45:18" pos:end="45:23"><expr pos:start="45:18" pos:end="45:22"><operator pos:start="45:18" pos:end="45:19">--</operator><name pos:start="45:20" pos:end="45:22">tmp</name></expr>;</expr_stmt> <expr_stmt pos:start="45:25" pos:end="45:30"><expr pos:start="45:25" pos:end="45:29"><operator pos:start="45:25" pos:end="45:26">--</operator><name pos:start="45:27" pos:end="45:29">len</name></expr>;</expr_stmt>

	    <if_stmt pos:start="47:13" pos:end="65:13"><if pos:start="47:13" pos:end="65:13">if <condition pos:start="47:16" pos:end="47:29">(<expr pos:start="47:17" pos:end="47:28"><operator pos:start="47:17" pos:end="47:18">--</operator><name pos:start="47:19" pos:end="47:24">offset</name> <operator pos:start="47:26" pos:end="47:26">&lt;</operator> <literal type="number" pos:start="47:28" pos:end="47:28">0</literal></expr>)</condition> <block pos:start="47:31" pos:end="65:13">{<block_content pos:start="49:17" pos:end="63:17">

		<expr_stmt pos:start="49:17" pos:end="49:46"><expr pos:start="49:17" pos:end="49:45"><name pos:start="49:17" pos:end="49:22">offset</name> <operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:26">p</name> <operator pos:start="49:28" pos:end="49:28">%</operator> <name pos:start="49:30" pos:end="49:45">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:55"><expr pos:start="51:17" pos:end="51:54"><name pos:start="51:17" pos:end="51:19">pag</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <operator pos:start="51:23" pos:end="51:23">(</operator><name pos:start="51:24" pos:end="51:27">char</name> <operator pos:start="51:29" pos:end="51:29">*</operator><operator pos:start="51:30" pos:end="51:30">)</operator><name pos:start="51:31" pos:end="51:54"><name pos:start="51:31" pos:end="51:34">page</name><index pos:start="51:35" pos:end="51:54">[<expr pos:start="51:36" pos:end="51:53"><name pos:start="51:36" pos:end="51:36">p</name><operator pos:start="51:37" pos:end="51:37">/</operator><name pos:start="51:38" pos:end="51:53">TARGET_PAGE_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="53:17" pos:end="63:17"><if pos:start="53:17" pos:end="63:17">if <condition pos:start="53:20" pos:end="53:25">(<expr pos:start="53:21" pos:end="53:24"><operator pos:start="53:21" pos:end="53:21">!</operator><name pos:start="53:22" pos:end="53:24">pag</name></expr>)</condition> <block pos:start="53:27" pos:end="63:17">{<block_content pos:start="55:21" pos:end="61:33">

                    <expr_stmt pos:start="55:21" pos:end="55:59"><expr pos:start="55:21" pos:end="55:58"><name pos:start="55:21" pos:end="55:23">pag</name> <operator pos:start="55:25" pos:end="55:25">=</operator> <operator pos:start="55:27" pos:end="55:27">(</operator><name pos:start="55:28" pos:end="55:31">char</name> <operator pos:start="55:33" pos:end="55:33">*</operator><operator pos:start="55:34" pos:end="55:34">)</operator><call pos:start="55:35" pos:end="55:58"><name pos:start="55:35" pos:end="55:40">malloc</name><argument_list pos:start="55:41" pos:end="55:58">(<argument pos:start="55:42" pos:end="55:57"><expr pos:start="55:42" pos:end="55:57"><name pos:start="55:42" pos:end="55:57">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:51"><expr pos:start="57:21" pos:end="57:50"><name pos:start="57:21" pos:end="57:44"><name pos:start="57:21" pos:end="57:24">page</name><index pos:start="57:25" pos:end="57:44">[<expr pos:start="57:26" pos:end="57:43"><name pos:start="57:26" pos:end="57:26">p</name><operator pos:start="57:27" pos:end="57:27">/</operator><name pos:start="57:28" pos:end="57:43">TARGET_PAGE_SIZE</name></expr>]</index></name> <operator pos:start="57:46" pos:end="57:46">=</operator> <name pos:start="57:48" pos:end="57:50">pag</name></expr>;</expr_stmt>

                    <if_stmt pos:start="59:21" pos:end="61:33"><if pos:start="59:21" pos:end="61:33">if <condition pos:start="59:24" pos:end="59:29">(<expr pos:start="59:25" pos:end="59:28"><operator pos:start="59:25" pos:end="59:25">!</operator><name pos:start="59:26" pos:end="59:28">pag</name></expr>)</condition><block type="pseudo" pos:start="61:25" pos:end="61:33"><block_content pos:start="61:25" pos:end="61:33">

                        <return pos:start="61:25" pos:end="61:33">return <expr pos:start="61:32" pos:end="61:32"><literal type="number" pos:start="61:32" pos:end="61:32">0</literal></expr>;</return></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt>

	    </block_content>}</block></if></if_stmt>

	    <if_stmt pos:start="67:13" pos:end="87:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:40">(<expr pos:start="67:17" pos:end="67:39"><name pos:start="67:17" pos:end="67:19">len</name> <operator pos:start="67:21" pos:end="67:22">==</operator> <literal type="number" pos:start="67:24" pos:end="67:24">0</literal> <operator pos:start="67:26" pos:end="67:27">||</operator> <name pos:start="67:29" pos:end="67:34">offset</name> <operator pos:start="67:36" pos:end="67:37">==</operator> <literal type="number" pos:start="67:39" pos:end="67:39">0</literal></expr>)</condition> <block pos:start="67:42" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:39">

	        <expr_stmt pos:start="69:17" pos:end="69:39"><expr pos:start="69:17" pos:end="69:38"><operator pos:start="69:17" pos:end="69:17">*</operator><operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:21">pag</name> <operator pos:start="69:23" pos:end="69:23">+</operator> <name pos:start="69:25" pos:end="69:30">offset</name><operator pos:start="69:31" pos:end="69:31">)</operator> <operator pos:start="69:33" pos:end="69:33">=</operator> <operator pos:start="69:35" pos:end="69:35">*</operator><name pos:start="69:36" pos:end="69:38">tmp</name></expr>;</expr_stmt>

	    </block_content>}</block></if>

	    <else pos:start="73:13" pos:end="87:13">else <block pos:start="73:18" pos:end="87:13">{<block_content pos:start="75:15" pos:end="85:66">

	      <decl_stmt pos:start="75:15" pos:end="75:64"><decl pos:start="75:15" pos:end="75:63"><type pos:start="75:15" pos:end="75:17"><name pos:start="75:15" pos:end="75:17">int</name></type> <name pos:start="75:19" pos:end="75:31">bytes_to_copy</name> <init pos:start="75:33" pos:end="75:63">= <expr pos:start="75:35" pos:end="75:63"><ternary pos:start="75:35" pos:end="75:63"><condition pos:start="75:35" pos:end="75:50"><expr pos:start="75:35" pos:end="75:48"><operator pos:start="75:35" pos:end="75:35">(</operator><name pos:start="75:36" pos:end="75:38">len</name> <operator pos:start="75:40" pos:end="75:40">&gt;</operator> <name pos:start="75:42" pos:end="75:47">offset</name><operator pos:start="75:48" pos:end="75:48">)</operator></expr> ?</condition><then pos:start="75:52" pos:end="75:57"> <expr pos:start="75:52" pos:end="75:57"><name pos:start="75:52" pos:end="75:57">offset</name></expr> </then><else pos:start="75:59" pos:end="75:63">: <expr pos:start="75:61" pos:end="75:63"><name pos:start="75:61" pos:end="75:63">len</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	      <expr_stmt pos:start="77:15" pos:end="77:35"><expr pos:start="77:15" pos:end="77:34"><name pos:start="77:15" pos:end="77:17">tmp</name> <operator pos:start="77:19" pos:end="77:20">-=</operator> <name pos:start="77:22" pos:end="77:34">bytes_to_copy</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="79:15" pos:end="79:33"><expr pos:start="79:15" pos:end="79:32"><name pos:start="79:15" pos:end="79:15">p</name> <operator pos:start="79:17" pos:end="79:18">-=</operator> <name pos:start="79:20" pos:end="79:32">bytes_to_copy</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="81:15" pos:end="81:38"><expr pos:start="81:15" pos:end="81:37"><name pos:start="81:15" pos:end="81:20">offset</name> <operator pos:start="81:22" pos:end="81:23">-=</operator> <name pos:start="81:25" pos:end="81:37">bytes_to_copy</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="83:15" pos:end="83:35"><expr pos:start="83:15" pos:end="83:34"><name pos:start="83:15" pos:end="83:17">len</name> <operator pos:start="83:19" pos:end="83:20">-=</operator> <name pos:start="83:22" pos:end="83:34">bytes_to_copy</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="85:15" pos:end="85:66"><expr pos:start="85:15" pos:end="85:65"><call pos:start="85:15" pos:end="85:65"><name pos:start="85:15" pos:end="85:27">memcpy_fromfs</name><argument_list pos:start="85:28" pos:end="85:65">(<argument pos:start="85:29" pos:end="85:40"><expr pos:start="85:29" pos:end="85:40"><name pos:start="85:29" pos:end="85:31">pag</name> <operator pos:start="85:33" pos:end="85:33">+</operator> <name pos:start="85:35" pos:end="85:40">offset</name></expr></argument>, <argument pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:45">tmp</name></expr></argument>, <argument pos:start="85:48" pos:end="85:64"><expr pos:start="85:48" pos:end="85:64"><name pos:start="85:48" pos:end="85:60">bytes_to_copy</name> <operator pos:start="85:62" pos:end="85:62">+</operator> <literal type="number" pos:start="85:64" pos:end="85:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>

	</block_content>}</block></while>

    </block_content>}</block></while>

    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><name pos:start="93:12" pos:end="93:12">p</name></expr>;</return>

</block_content>}</block></function>
</unit>
