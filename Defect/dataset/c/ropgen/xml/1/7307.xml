<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7307.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:12">void</name></type> <name pos:start="1:14" pos:end="1:31">ff_ac3dsp_init_x86</name><parameter_list pos:start="1:32" pos:end="1:64">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:45">AC3DSPContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">c</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:63">bit_exact</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="92:0">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">mm_flags</name> <init pos:start="5:18" pos:end="5:37">= <expr pos:start="5:20" pos:end="5:37"><call pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:35">av_get_cpu_flags</name><argument_list pos:start="5:36" pos:end="5:37">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="19:5"><if pos:start="9:5" pos:end="19:5">if <condition pos:start="9:8" pos:end="9:31">(<expr pos:start="9:9" pos:end="9:30"><call pos:start="9:9" pos:end="9:30"><name pos:start="9:9" pos:end="9:20">EXTERNAL_MMX</name><argument_list pos:start="9:21" pos:end="9:30">(<argument pos:start="9:22" pos:end="9:29"><expr pos:start="9:22" pos:end="9:29"><name pos:start="9:22" pos:end="9:29">mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:33" pos:end="19:5">{<block_content pos:start="11:9" pos:end="17:54">

        <expr_stmt pos:start="11:9" pos:end="11:54"><expr pos:start="11:9" pos:end="11:53"><name pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:9">c</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:27">ac3_exponent_min</name></name> <operator pos:start="11:29" pos:end="11:29">=</operator> <name pos:start="11:31" pos:end="11:53">ff_ac3_exponent_min_mmx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:64"><expr pos:start="13:9" pos:end="13:63"><name pos:start="13:9" pos:end="13:32"><name pos:start="13:9" pos:end="13:9">c</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:32">ac3_max_msb_abs_int16</name></name> <operator pos:start="13:34" pos:end="13:34">=</operator> <name pos:start="13:36" pos:end="13:63">ff_ac3_max_msb_abs_int16_mmx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:54"><expr pos:start="15:9" pos:end="15:53"><name pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:9">c</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:27">ac3_lshift_int16</name></name> <operator pos:start="15:29" pos:end="15:29">=</operator> <name pos:start="15:31" pos:end="15:53">ff_ac3_lshift_int16_mmx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:54"><expr pos:start="17:9" pos:end="17:53"><name pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:9">c</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:27">ac3_rshift_int32</name></name> <operator pos:start="17:29" pos:end="17:29">=</operator> <name pos:start="17:31" pos:end="17:53">ff_ac3_rshift_int32_mmx</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:36">(<expr pos:start="21:9" pos:end="21:35"><call pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:25">EXTERNAL_AMD3DNOW</name><argument_list pos:start="21:26" pos:end="21:35">(<argument pos:start="21:27" pos:end="21:34"><expr pos:start="21:27" pos:end="21:34"><name pos:start="21:27" pos:end="21:34">mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:38" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:9">

        <expr_stmt pos:start="23:9" pos:end="23:62"><expr pos:start="23:9" pos:end="23:61"><name pos:start="23:9" pos:end="23:28"><name pos:start="23:9" pos:end="23:9">c</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:28">extract_exponents</name></name> <operator pos:start="23:30" pos:end="23:30">=</operator> <name pos:start="23:32" pos:end="23:61">ff_ac3_extract_exponents_3dnow</name></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:23">(<expr pos:start="25:13" pos:end="25:22"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:22">bit_exact</name></expr>)</condition> <block pos:start="25:25" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:60">

            <expr_stmt pos:start="27:13" pos:end="27:60"><expr pos:start="27:13" pos:end="27:59"><name pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:13">c</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:31">float_to_fixed24</name></name> <operator pos:start="27:33" pos:end="27:33">=</operator> <name pos:start="27:35" pos:end="27:59">ff_float_to_fixed24_3dnow</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:34">(<expr pos:start="33:9" pos:end="33:33"><call pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:23">EXTERNAL_MMXEXT</name><argument_list pos:start="33:24" pos:end="33:33">(<argument pos:start="33:25" pos:end="33:32"><expr pos:start="33:25" pos:end="33:32"><name pos:start="33:25" pos:end="33:32">mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:36" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:67">

        <expr_stmt pos:start="35:9" pos:end="35:57"><expr pos:start="35:9" pos:end="35:56"><name pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:9">c</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:27">ac3_exponent_min</name></name> <operator pos:start="35:29" pos:end="35:29">=</operator> <name pos:start="35:31" pos:end="35:56">ff_ac3_exponent_min_mmxext</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:67"><expr pos:start="37:9" pos:end="37:66"><name pos:start="37:9" pos:end="37:32"><name pos:start="37:9" pos:end="37:9">c</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:32">ac3_max_msb_abs_int16</name></name> <operator pos:start="37:34" pos:end="37:34">=</operator> <name pos:start="37:36" pos:end="37:66">ff_ac3_max_msb_abs_int16_mmxext</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:31">(<expr pos:start="41:9" pos:end="41:30"><call pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:20">EXTERNAL_SSE</name><argument_list pos:start="41:21" pos:end="41:30">(<argument pos:start="41:22" pos:end="41:29"><expr pos:start="41:22" pos:end="41:29"><name pos:start="41:22" pos:end="41:29">mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:33" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:54">

        <expr_stmt pos:start="43:9" pos:end="43:54"><expr pos:start="43:9" pos:end="43:53"><name pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:9">c</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:27">float_to_fixed24</name></name> <operator pos:start="43:29" pos:end="43:29">=</operator> <name pos:start="43:31" pos:end="43:53">ff_float_to_fixed24_sse</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="67:5"><if pos:start="47:5" pos:end="67:5">if <condition pos:start="47:8" pos:end="47:32">(<expr pos:start="47:9" pos:end="47:31"><call pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:21">EXTERNAL_SSE2</name><argument_list pos:start="47:22" pos:end="47:31">(<argument pos:start="47:23" pos:end="47:30"><expr pos:start="47:23" pos:end="47:30"><name pos:start="47:23" pos:end="47:30">mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:34" pos:end="67:5">{<block_content pos:start="49:9" pos:end="65:9">

        <expr_stmt pos:start="49:9" pos:end="49:55"><expr pos:start="49:9" pos:end="49:54"><name pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:9">c</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:27">ac3_exponent_min</name></name> <operator pos:start="49:29" pos:end="49:29">=</operator> <name pos:start="49:31" pos:end="49:54">ff_ac3_exponent_min_sse2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:65"><expr pos:start="51:9" pos:end="51:64"><name pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:9">c</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:32">ac3_max_msb_abs_int16</name></name> <operator pos:start="51:34" pos:end="51:34">=</operator> <name pos:start="51:36" pos:end="51:64">ff_ac3_max_msb_abs_int16_sse2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:55"><expr pos:start="53:9" pos:end="53:54"><name pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:9">c</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:27">float_to_fixed24</name></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <name pos:start="53:31" pos:end="53:54">ff_float_to_fixed24_sse2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:69"><expr pos:start="55:9" pos:end="55:68"><name pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:9">c</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:32">compute_mantissa_size</name></name> <operator pos:start="55:34" pos:end="55:34">=</operator> <name pos:start="55:36" pos:end="55:68">ff_ac3_compute_mantissa_size_sse2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:61"><expr pos:start="57:9" pos:end="57:60"><name pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:9">c</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:28">extract_exponents</name></name> <operator pos:start="57:30" pos:end="57:30">=</operator> <name pos:start="57:32" pos:end="57:60">ff_ac3_extract_exponents_sse2</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:47">(<expr pos:start="59:13" pos:end="59:46"><operator pos:start="59:13" pos:end="59:13">!</operator><operator pos:start="59:14" pos:end="59:14">(</operator><name pos:start="59:15" pos:end="59:22">mm_flags</name> <operator pos:start="59:24" pos:end="59:24">&amp;</operator> <name pos:start="59:26" pos:end="59:45">AV_CPU_FLAG_SSE2SLOW</name><operator pos:start="59:46" pos:end="59:46">)</operator></expr>)</condition> <block pos:start="59:49" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:59">

            <expr_stmt pos:start="61:13" pos:end="61:59"><expr pos:start="61:13" pos:end="61:58"><name pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:13">c</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:31">ac3_lshift_int16</name></name> <operator pos:start="61:33" pos:end="61:33">=</operator> <name pos:start="61:35" pos:end="61:58">ff_ac3_lshift_int16_sse2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:59"><expr pos:start="63:13" pos:end="63:58"><name pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:13">c</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:31">ac3_rshift_int32</name></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <name pos:start="63:35" pos:end="63:58">ff_ac3_rshift_int32_sse2</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="84:0"><if pos:start="69:5" pos:end="84:0">if <condition pos:start="69:8" pos:end="69:33">(<expr pos:start="69:9" pos:end="69:32"><call pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:22">EXTERNAL_SSSE3</name><argument_list pos:start="69:23" pos:end="69:32">(<argument pos:start="69:24" pos:end="69:31"><expr pos:start="69:24" pos:end="69:31"><name pos:start="69:24" pos:end="69:31">mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:35" pos:end="84:0">{<block_content pos:start="71:9" pos:end="77:9">

        <expr_stmt pos:start="71:9" pos:end="71:66"><expr pos:start="71:9" pos:end="71:65"><name pos:start="71:9" pos:end="71:32"><name pos:start="71:9" pos:end="71:9">c</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:32">ac3_max_msb_abs_int16</name></name> <operator pos:start="71:34" pos:end="71:34">=</operator> <name pos:start="71:36" pos:end="71:65">ff_ac3_max_msb_abs_int16_ssse3</name></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:43">(<expr pos:start="73:13" pos:end="73:42"><operator pos:start="73:13" pos:end="73:13">!</operator><operator pos:start="73:14" pos:end="73:14">(</operator><name pos:start="73:15" pos:end="73:22">mm_flags</name> <operator pos:start="73:24" pos:end="73:24">&amp;</operator> <name pos:start="73:26" pos:end="73:41">AV_CPU_FLAG_ATOM</name><operator pos:start="73:42" pos:end="73:42">)</operator></expr>)</condition> <block pos:start="73:45" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:66">

            <expr_stmt pos:start="75:13" pos:end="75:66"><expr pos:start="75:13" pos:end="75:65"><name pos:start="75:13" pos:end="75:32"><name pos:start="75:13" pos:end="75:13">c</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:32">extract_exponents</name></name> <operator pos:start="75:34" pos:end="75:34">=</operator> <name pos:start="75:36" pos:end="75:65">ff_ac3_extract_exponents_ssse3</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="83:1" pos:end="83:33">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:33"><name pos:start="83:5" pos:end="83:19">HAVE_SSE_INLINE</name> <operator pos:start="83:21" pos:end="83:22">&amp;&amp;</operator> <name pos:start="83:24" pos:end="83:33">HAVE_7REGS</name></expr></cpp:if>

    <if_stmt pos:start="85:5" pos:end="92:0"><if pos:start="85:5" pos:end="92:0">if <condition pos:start="85:8" pos:end="85:29">(<expr pos:start="85:9" pos:end="85:28"><call pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:18">INLINE_SSE</name><argument_list pos:start="85:19" pos:end="85:28">(<argument pos:start="85:20" pos:end="85:27"><expr pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:27">mm_flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:31" pos:end="92:0">{<block_content pos:start="87:9" pos:end="87:37">

        <expr_stmt pos:start="87:9" pos:end="87:37"><expr pos:start="87:9" pos:end="87:36"><name pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:9">c</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:18">downmix</name></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <name pos:start="87:22" pos:end="87:36">ac3_downmix_sse</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
