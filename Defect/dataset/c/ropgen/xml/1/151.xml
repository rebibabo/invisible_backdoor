<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/151.c" pos:tabs="8"><function pos:start="1:1" pos:end="399:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">flac_parse</name><parameter_list pos:start="1:22" pos:end="5:55">(<parameter pos:start="1:23" pos:end="1:45"><decl pos:start="1:23" pos:end="1:45"><type pos:start="1:23" pos:end="1:45"><name pos:start="1:23" pos:end="1:42">AVCodecParserContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:68"><decl pos:start="1:48" pos:end="1:68"><type pos:start="1:48" pos:end="1:68"><name pos:start="1:48" pos:end="1:61">AVCodecContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:68">avctx</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:45"><decl pos:start="3:23" pos:end="3:45"><type pos:start="3:23" pos:end="3:45"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:35">uint8_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier><modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:45">poutbuf</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:64"><decl pos:start="3:48" pos:end="3:64"><type pos:start="3:48" pos:end="3:64"><name pos:start="3:48" pos:end="3:50">int</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:64">poutbuf_size</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:40"><decl pos:start="5:23" pos:end="5:40"><type pos:start="5:23" pos:end="5:40"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="399:1">{<block_content pos:start="9:5" pos:end="397:41">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">FLACParseContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">fpc</name> <init pos:start="9:27" pos:end="9:40">= <expr pos:start="9:29" pos:end="9:40"><name pos:start="9:29" pos:end="9:40"><name pos:start="9:29" pos:end="9:29">s</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">FLACHeaderMarker</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">curr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">nb_headers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:27">read_end</name>   <init pos:start="15:31" pos:end="15:35">= <expr pos:start="15:33" pos:end="15:35"><name pos:start="15:33" pos:end="15:35">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:29">read_start</name> <init pos:start="17:31" pos:end="17:35">= <expr pos:start="17:33" pos:end="17:35"><name pos:start="17:33" pos:end="17:35">buf</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="51:5"><if pos:start="21:5" pos:end="51:5">if <condition pos:start="21:8" pos:end="21:47">(<expr pos:start="21:9" pos:end="21:46"><name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:16">flags</name></name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <name pos:start="21:20" pos:end="21:46">PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block pos:start="21:49" pos:end="51:5">{<block_content pos:start="23:9" pos:end="49:24">

        <decl_stmt pos:start="23:9" pos:end="23:25"><decl pos:start="23:9" pos:end="23:24"><type pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:21">FLACFrameInfo</name></type> <name pos:start="23:23" pos:end="23:24">fi</name></decl>;</decl_stmt>

        <if_stmt pos:start="25:9" pos:end="43:9"><if pos:start="25:9" pos:end="43:9">if <condition pos:start="25:12" pos:end="25:51">(<expr pos:start="25:13" pos:end="25:50"><call pos:start="25:13" pos:end="25:50"><name pos:start="25:13" pos:end="25:33">frame_header_is_valid</name><argument_list pos:start="25:34" pos:end="25:50">(<argument pos:start="25:35" pos:end="25:39"><expr pos:start="25:35" pos:end="25:39"><name pos:start="25:35" pos:end="25:39">avctx</name></expr></argument>, <argument pos:start="25:42" pos:end="25:44"><expr pos:start="25:42" pos:end="25:44"><name pos:start="25:42" pos:end="25:44">buf</name></expr></argument>, <argument pos:start="25:47" pos:end="25:49"><expr pos:start="25:47" pos:end="25:49"><operator pos:start="25:47" pos:end="25:47">&amp;</operator><name pos:start="25:48" pos:end="25:49">fi</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:53" pos:end="43:9">{<block_content pos:start="27:13" pos:end="41:13">

            <expr_stmt pos:start="27:13" pos:end="27:39"><expr pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:23">duration</name></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <name pos:start="27:27" pos:end="27:38"><name pos:start="27:27" pos:end="27:28">fi</name><operator pos:start="27:29" pos:end="27:29">.</operator><name pos:start="27:30" pos:end="27:38">blocksize</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="29:13" pos:end="31:51"><if pos:start="29:13" pos:end="31:51">if <condition pos:start="29:16" pos:end="29:36">(<expr pos:start="29:17" pos:end="29:35"><operator pos:start="29:17" pos:end="29:17">!</operator><name pos:start="29:18" pos:end="29:35"><name pos:start="29:18" pos:end="29:22">avctx</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:35">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="31:17" pos:end="31:51"><block_content pos:start="31:17" pos:end="31:51">

                <expr_stmt pos:start="31:17" pos:end="31:51"><expr pos:start="31:17" pos:end="31:50"><name pos:start="31:17" pos:end="31:34"><name pos:start="31:17" pos:end="31:21">avctx</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:34">sample_rate</name></name> <operator pos:start="31:36" pos:end="31:36">=</operator> <name pos:start="31:38" pos:end="31:50"><name pos:start="31:38" pos:end="31:39">fi</name><operator pos:start="31:40" pos:end="31:40">.</operator><name pos:start="31:41" pos:end="31:50">samplerate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="33:13" pos:end="41:13"><if pos:start="33:13" pos:end="41:13">if <condition pos:start="33:16" pos:end="33:58">(<expr pos:start="33:17" pos:end="33:57"><name pos:start="33:17" pos:end="33:30"><name pos:start="33:17" pos:end="33:19">fpc</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:23">pc</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:30">flags</name></name> <operator pos:start="33:32" pos:end="33:32">&amp;</operator> <name pos:start="33:34" pos:end="33:57">PARSER_FLAG_USE_CODEC_TS</name></expr>)</condition><block pos:start="33:59" pos:end="41:13">{<block_content pos:start="35:17" pos:end="39:47">

                <expr_stmt pos:start="35:17" pos:end="35:54"><expr pos:start="35:17" pos:end="35:53"><name pos:start="35:17" pos:end="35:28"><name pos:start="35:17" pos:end="35:19">fpc</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:23">pc</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:28">pts</name></name> <operator pos:start="35:30" pos:end="35:30">=</operator> <name pos:start="35:32" pos:end="35:53"><name pos:start="35:32" pos:end="35:33">fi</name><operator pos:start="35:34" pos:end="35:34">.</operator><name pos:start="35:35" pos:end="35:53">frame_or_sample_num</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="37:17" pos:end="39:47"><if pos:start="37:17" pos:end="39:47">if <condition pos:start="37:20" pos:end="37:36">(<expr pos:start="37:21" pos:end="37:35"><operator pos:start="37:21" pos:end="37:21">!</operator><name pos:start="37:22" pos:end="37:35"><name pos:start="37:22" pos:end="37:23">fi</name><operator pos:start="37:24" pos:end="37:24">.</operator><name pos:start="37:25" pos:end="37:35">is_var_size</name></name></expr>)</condition><block type="pseudo" pos:start="39:19" pos:end="39:47"><block_content pos:start="39:19" pos:end="39:47">

                  <expr_stmt pos:start="39:19" pos:end="39:47"><expr pos:start="39:19" pos:end="39:46"><name pos:start="39:19" pos:end="39:30"><name pos:start="39:19" pos:end="39:21">fpc</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:25">pc</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:30">pts</name></name> <operator pos:start="39:32" pos:end="39:33">*=</operator> <name pos:start="39:35" pos:end="39:46"><name pos:start="39:35" pos:end="39:36">fi</name><operator pos:start="39:37" pos:end="39:37">.</operator><name pos:start="39:38" pos:end="39:46">blocksize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:28"><expr pos:start="45:9" pos:end="45:27"><operator pos:start="45:9" pos:end="45:9">*</operator><name pos:start="45:10" pos:end="45:16">poutbuf</name>      <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:27">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><operator pos:start="47:9" pos:end="47:9">*</operator><name pos:start="47:10" pos:end="47:21">poutbuf_size</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:32">buf_size</name></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:24">return <expr pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:14"><name pos:start="55:5" pos:end="55:7">fpc</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:14">avctx</name></name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:22">avctx</name></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="59:59"><if pos:start="57:5" pos:end="59:59">if <condition pos:start="57:8" pos:end="57:31">(<expr pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:11">fpc</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:30">best_header_valid</name></name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:59"><block_content pos:start="59:9" pos:end="59:59">

        <return pos:start="59:9" pos:end="59:59">return <expr pos:start="59:16" pos:end="59:58"><call pos:start="59:16" pos:end="59:58"><name pos:start="59:16" pos:end="59:30">get_best_header</name><argument_list pos:start="59:31" pos:end="59:58">(<argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">fpc</name></expr></argument>, <argument pos:start="59:37" pos:end="59:43"><expr pos:start="59:37" pos:end="59:43"><name pos:start="59:37" pos:end="59:43">poutbuf</name></expr></argument>, <argument pos:start="59:46" pos:end="59:57"><expr pos:start="59:46" pos:end="59:57"><name pos:start="59:46" pos:end="59:57">poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:78">/* If a best_header was found last call remove it with the buffer data. */</comment>

    <if_stmt pos:start="65:5" pos:end="151:5"><if pos:start="65:5" pos:end="125:5">if <condition pos:start="65:8" pos:end="65:57">(<expr pos:start="65:9" pos:end="65:56"><name pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:11">fpc</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:24">best_header</name></name> <operator pos:start="65:26" pos:end="65:27">&amp;&amp;</operator> <name pos:start="65:29" pos:end="65:56"><name pos:start="65:29" pos:end="65:31">fpc</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:44">best_header</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:56">best_child</name></name></expr>)</condition> <block pos:start="65:59" pos:end="125:5">{<block_content pos:start="67:9" pos:end="123:34">

        <decl_stmt pos:start="67:9" pos:end="67:31"><decl pos:start="67:9" pos:end="67:30"><type pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:24">FLACHeaderMarker</name> <modifier pos:start="67:26" pos:end="67:26">*</modifier></type><name pos:start="67:27" pos:end="67:30">temp</name></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:68"><decl pos:start="69:9" pos:end="69:67"><type pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:24">FLACHeaderMarker</name> <modifier pos:start="69:26" pos:end="69:26">*</modifier></type><name pos:start="69:27" pos:end="69:36">best_child</name> <init pos:start="69:38" pos:end="69:67">= <expr pos:start="69:40" pos:end="69:67"><name pos:start="69:40" pos:end="69:67"><name pos:start="69:40" pos:end="69:42">fpc</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:55">best_header</name><operator pos:start="69:56" pos:end="69:57">-&gt;</operator><name pos:start="69:58" pos:end="69:67">best_child</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:70">/* Remove headers in list until the end of the best_header. */</comment>

        <for pos:start="75:9" pos:end="94:9">for <control pos:start="75:13" pos:end="75:66">(<init pos:start="75:14" pos:end="75:33"><expr pos:start="75:14" pos:end="75:32"><name pos:start="75:14" pos:end="75:17">curr</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:23">fpc</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:32">headers</name></name></expr>;</init> <condition pos:start="75:35" pos:end="75:53"><expr pos:start="75:35" pos:end="75:52"><name pos:start="75:35" pos:end="75:38">curr</name> <operator pos:start="75:40" pos:end="75:41">!=</operator> <name pos:start="75:43" pos:end="75:52">best_child</name></expr>;</condition> <incr pos:start="75:55" pos:end="75:65"><expr pos:start="75:55" pos:end="75:65"><name pos:start="75:55" pos:end="75:58">curr</name> <operator pos:start="75:60" pos:end="75:60">=</operator> <name pos:start="75:62" pos:end="75:65">temp</name></expr></incr>)</control> <block pos:start="75:68" pos:end="94:9">{<block_content pos:start="77:13" pos:end="91:26">

            <if_stmt pos:start="77:13" pos:end="85:13"><if pos:start="77:13" pos:end="85:13">if <condition pos:start="77:16" pos:end="77:41">(<expr pos:start="77:17" pos:end="77:40"><name pos:start="77:17" pos:end="77:20">curr</name> <operator pos:start="77:22" pos:end="77:23">!=</operator> <name pos:start="77:25" pos:end="77:40"><name pos:start="77:25" pos:end="77:27">fpc</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:40">best_header</name></name></expr>)</condition> <block pos:start="77:43" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:74">

                <expr_stmt pos:start="79:17" pos:end="83:74"><expr pos:start="79:17" pos:end="83:73"><call pos:start="79:17" pos:end="83:73"><name pos:start="79:17" pos:end="79:22">av_log</name><argument_list pos:start="79:23" pos:end="83:73">(<argument pos:start="79:24" pos:end="79:28"><expr pos:start="79:24" pos:end="79:28"><name pos:start="79:24" pos:end="79:28">avctx</name></expr></argument>, <argument pos:start="79:31" pos:end="79:42"><expr pos:start="79:31" pos:end="79:42"><name pos:start="79:31" pos:end="79:42">AV_LOG_DEBUG</name></expr></argument>,

                       <argument pos:start="81:24" pos:end="81:82"><expr pos:start="81:24" pos:end="81:82"><literal type="string" pos:start="81:24" pos:end="81:82">"dropping low score %i frame header from offset %i to %i\n"</literal></expr></argument>,

                       <argument pos:start="83:24" pos:end="83:38"><expr pos:start="83:24" pos:end="83:38"><name pos:start="83:24" pos:end="83:38"><name pos:start="83:24" pos:end="83:27">curr</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:38">max_score</name></name></expr></argument>, <argument pos:start="83:41" pos:end="83:52"><expr pos:start="83:41" pos:end="83:52"><name pos:start="83:41" pos:end="83:52"><name pos:start="83:41" pos:end="83:44">curr</name><operator pos:start="83:45" pos:end="83:46">-&gt;</operator><name pos:start="83:47" pos:end="83:52">offset</name></name></expr></argument>, <argument pos:start="83:55" pos:end="83:72"><expr pos:start="83:55" pos:end="83:72"><name pos:start="83:55" pos:end="83:72"><name pos:start="83:55" pos:end="83:58">curr</name><operator pos:start="83:59" pos:end="83:60">-&gt;</operator><name pos:start="83:61" pos:end="83:64">next</name><operator pos:start="83:65" pos:end="83:66">-&gt;</operator><name pos:start="83:67" pos:end="83:72">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:30"><expr pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:16">temp</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:29"><name pos:start="87:20" pos:end="87:23">curr</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:29">next</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:42"><expr pos:start="89:13" pos:end="89:41"><call pos:start="89:13" pos:end="89:41"><name pos:start="89:13" pos:end="89:20">av_freep</name><argument_list pos:start="89:21" pos:end="89:41">(<argument pos:start="89:22" pos:end="89:40"><expr pos:start="89:22" pos:end="89:40"><operator pos:start="89:22" pos:end="89:22">&amp;</operator><name pos:start="89:23" pos:end="89:40"><name pos:start="89:23" pos:end="89:26">curr</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:40">link_penalty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:26"><expr pos:start="91:13" pos:end="91:25"><call pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:19">av_free</name><argument_list pos:start="91:20" pos:end="91:25">(<argument pos:start="91:21" pos:end="91:24"><expr pos:start="91:21" pos:end="91:24"><name pos:start="91:21" pos:end="91:24">curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></for>

        <comment type="block" pos:start="96:9" pos:end="96:53">/* Release returned data from ring buffer. */</comment>

        <expr_stmt pos:start="98:9" pos:end="98:57"><expr pos:start="98:9" pos:end="98:56"><call pos:start="98:9" pos:end="98:56"><name pos:start="98:9" pos:end="98:21">av_fifo_drain</name><argument_list pos:start="98:22" pos:end="98:56">(<argument pos:start="98:23" pos:end="98:35"><expr pos:start="98:23" pos:end="98:35"><name pos:start="98:23" pos:end="98:35"><name pos:start="98:23" pos:end="98:25">fpc</name><operator pos:start="98:26" pos:end="98:27">-&gt;</operator><name pos:start="98:28" pos:end="98:35">fifo_buf</name></name></expr></argument>, <argument pos:start="98:38" pos:end="98:55"><expr pos:start="98:38" pos:end="98:55"><name pos:start="98:38" pos:end="98:55"><name pos:start="98:38" pos:end="98:47">best_child</name><operator pos:start="98:48" pos:end="98:49">-&gt;</operator><name pos:start="98:50" pos:end="98:55">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="102:9" pos:end="102:79">/* Fix the offset for the headers remaining to match the new buffer. */</comment>

        <for pos:start="104:9" pos:end="106:47">for <control pos:start="104:13" pos:end="104:62">(<init pos:start="104:14" pos:end="104:37"><expr pos:start="104:14" pos:end="104:36"><name pos:start="104:14" pos:end="104:17">curr</name> <operator pos:start="104:19" pos:end="104:19">=</operator> <name pos:start="104:21" pos:end="104:36"><name pos:start="104:21" pos:end="104:30">best_child</name><operator pos:start="104:31" pos:end="104:32">-&gt;</operator><name pos:start="104:33" pos:end="104:36">next</name></name></expr>;</init> <condition pos:start="104:39" pos:end="104:43"><expr pos:start="104:39" pos:end="104:42"><name pos:start="104:39" pos:end="104:42">curr</name></expr>;</condition> <incr pos:start="104:45" pos:end="104:61"><expr pos:start="104:45" pos:end="104:61"><name pos:start="104:45" pos:end="104:48">curr</name> <operator pos:start="104:50" pos:end="104:50">=</operator> <name pos:start="104:52" pos:end="104:61"><name pos:start="104:52" pos:end="104:55">curr</name><operator pos:start="104:56" pos:end="104:57">-&gt;</operator><name pos:start="104:58" pos:end="104:61">next</name></name></expr></incr>)</control><block type="pseudo" pos:start="106:13" pos:end="106:47"><block_content pos:start="106:13" pos:end="106:47">

            <expr_stmt pos:start="106:13" pos:end="106:47"><expr pos:start="106:13" pos:end="106:46"><name pos:start="106:13" pos:end="106:24"><name pos:start="106:13" pos:end="106:16">curr</name><operator pos:start="106:17" pos:end="106:18">-&gt;</operator><name pos:start="106:19" pos:end="106:24">offset</name></name> <operator pos:start="106:26" pos:end="106:27">-=</operator> <name pos:start="106:29" pos:end="106:46"><name pos:start="106:29" pos:end="106:38">best_child</name><operator pos:start="106:39" pos:end="106:40">-&gt;</operator><name pos:start="106:41" pos:end="106:46">offset</name></name></expr>;</expr_stmt></block_content></block></for>




        <expr_stmt pos:start="111:9" pos:end="111:31"><expr pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:18">best_child</name><operator pos:start="111:19" pos:end="111:20">-&gt;</operator><name pos:start="111:21" pos:end="111:26">offset</name></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <literal type="number" pos:start="111:30" pos:end="111:30">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:40"><expr pos:start="113:9" pos:end="113:39"><name pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:11">fpc</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:20">headers</name></name>       <operator pos:start="113:28" pos:end="113:28">=</operator> <name pos:start="113:30" pos:end="113:39">best_child</name></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:57">(<expr pos:start="115:13" pos:end="115:56"><name pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:15">fpc</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:36">nb_headers_buffered</name></name> <operator pos:start="115:38" pos:end="115:39">&gt;=</operator> <name pos:start="115:41" pos:end="115:56">FLAC_MIN_HEADERS</name></expr>)</condition> <block pos:start="115:59" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:63">

            <expr_stmt pos:start="117:13" pos:end="117:42"><expr pos:start="117:13" pos:end="117:41"><name pos:start="117:13" pos:end="117:28"><name pos:start="117:13" pos:end="117:15">fpc</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:28">best_header</name></name> <operator pos:start="117:30" pos:end="117:30">=</operator> <name pos:start="117:32" pos:end="117:41">best_child</name></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:63">return <expr pos:start="119:20" pos:end="119:62"><call pos:start="119:20" pos:end="119:62"><name pos:start="119:20" pos:end="119:34">get_best_header</name><argument_list pos:start="119:35" pos:end="119:62">(<argument pos:start="119:36" pos:end="119:38"><expr pos:start="119:36" pos:end="119:38"><name pos:start="119:36" pos:end="119:38">fpc</name></expr></argument>, <argument pos:start="119:41" pos:end="119:47"><expr pos:start="119:41" pos:end="119:47"><name pos:start="119:41" pos:end="119:47">poutbuf</name></expr></argument>, <argument pos:start="119:50" pos:end="119:61"><expr pos:start="119:50" pos:end="119:61"><name pos:start="119:50" pos:end="119:61">poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:34"><expr pos:start="123:9" pos:end="123:33"><name pos:start="123:9" pos:end="123:24"><name pos:start="123:9" pos:end="123:11">fpc</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:24">best_header</name></name>   <operator pos:start="123:28" pos:end="123:28">=</operator> <name pos:start="123:30" pos:end="123:33">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="151:5">else if <condition pos:start="125:15" pos:end="125:32">(<expr pos:start="125:16" pos:end="125:31"><name pos:start="125:16" pos:end="125:31"><name pos:start="125:16" pos:end="125:18">fpc</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:31">best_header</name></name></expr>)</condition> <block pos:start="125:34" pos:end="151:5">{<block_content pos:start="129:9" pos:end="148:36">

        <comment type="block" pos:start="127:9" pos:end="127:69">/* No end frame no need to delete the buffer; probably eof */</comment>

        <decl_stmt pos:start="129:9" pos:end="129:31"><decl pos:start="129:9" pos:end="129:30"><type pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:24">FLACHeaderMarker</name> <modifier pos:start="129:26" pos:end="129:26">*</modifier></type><name pos:start="129:27" pos:end="129:30">temp</name></decl>;</decl_stmt>



        <for pos:start="133:9" pos:end="142:9">for <control pos:start="133:13" pos:end="133:72">(<init pos:start="133:14" pos:end="133:33"><expr pos:start="133:14" pos:end="133:32"><name pos:start="133:14" pos:end="133:17">curr</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <name pos:start="133:21" pos:end="133:32"><name pos:start="133:21" pos:end="133:23">fpc</name><operator pos:start="133:24" pos:end="133:25">-&gt;</operator><name pos:start="133:26" pos:end="133:32">headers</name></name></expr>;</init> <condition pos:start="133:35" pos:end="133:59"><expr pos:start="133:35" pos:end="133:58"><name pos:start="133:35" pos:end="133:38">curr</name> <operator pos:start="133:40" pos:end="133:41">!=</operator> <name pos:start="133:43" pos:end="133:58"><name pos:start="133:43" pos:end="133:45">fpc</name><operator pos:start="133:46" pos:end="133:47">-&gt;</operator><name pos:start="133:48" pos:end="133:58">best_header</name></name></expr>;</condition> <incr pos:start="133:61" pos:end="133:71"><expr pos:start="133:61" pos:end="133:71"><name pos:start="133:61" pos:end="133:64">curr</name> <operator pos:start="133:66" pos:end="133:66">=</operator> <name pos:start="133:68" pos:end="133:71">temp</name></expr></incr>)</control> <block pos:start="133:74" pos:end="142:9">{<block_content pos:start="135:13" pos:end="139:26">

            <expr_stmt pos:start="135:13" pos:end="135:30"><expr pos:start="135:13" pos:end="135:29"><name pos:start="135:13" pos:end="135:16">temp</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:29"><name pos:start="135:20" pos:end="135:23">curr</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:29">next</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:42"><expr pos:start="137:13" pos:end="137:41"><call pos:start="137:13" pos:end="137:41"><name pos:start="137:13" pos:end="137:20">av_freep</name><argument_list pos:start="137:21" pos:end="137:41">(<argument pos:start="137:22" pos:end="137:40"><expr pos:start="137:22" pos:end="137:40"><operator pos:start="137:22" pos:end="137:22">&amp;</operator><name pos:start="137:23" pos:end="137:40"><name pos:start="137:23" pos:end="137:26">curr</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:40">link_penalty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:26"><expr pos:start="139:13" pos:end="139:25"><call pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:19">av_free</name><argument_list pos:start="139:20" pos:end="139:25">(<argument pos:start="139:21" pos:end="139:24"><expr pos:start="139:21" pos:end="139:24"><name pos:start="139:21" pos:end="139:24">curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></for>

        <expr_stmt pos:start="144:9" pos:end="144:46"><expr pos:start="144:9" pos:end="144:45"><name pos:start="144:9" pos:end="144:20"><name pos:start="144:9" pos:end="144:11">fpc</name><operator pos:start="144:12" pos:end="144:13">-&gt;</operator><name pos:start="144:14" pos:end="144:20">headers</name></name> <operator pos:start="144:22" pos:end="144:22">=</operator> <name pos:start="144:24" pos:end="144:45"><name pos:start="144:24" pos:end="144:26">fpc</name><operator pos:start="144:27" pos:end="144:28">-&gt;</operator><name pos:start="144:29" pos:end="144:39">best_header</name><operator pos:start="144:40" pos:end="144:41">-&gt;</operator><name pos:start="144:42" pos:end="144:45">next</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="146:9" pos:end="146:50"><expr pos:start="146:9" pos:end="146:49"><call pos:start="146:9" pos:end="146:49"><name pos:start="146:9" pos:end="146:16">av_freep</name><argument_list pos:start="146:17" pos:end="146:49">(<argument pos:start="146:18" pos:end="146:48"><expr pos:start="146:18" pos:end="146:48"><operator pos:start="146:18" pos:end="146:18">&amp;</operator><name pos:start="146:19" pos:end="146:48"><name pos:start="146:19" pos:end="146:21">fpc</name><operator pos:start="146:22" pos:end="146:23">-&gt;</operator><name pos:start="146:24" pos:end="146:34">best_header</name><operator pos:start="146:35" pos:end="146:36">-&gt;</operator><name pos:start="146:37" pos:end="146:48">link_penalty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="148:9" pos:end="148:36"><expr pos:start="148:9" pos:end="148:35"><call pos:start="148:9" pos:end="148:35"><name pos:start="148:9" pos:end="148:16">av_freep</name><argument_list pos:start="148:17" pos:end="148:35">(<argument pos:start="148:18" pos:end="148:34"><expr pos:start="148:18" pos:end="148:34"><operator pos:start="148:18" pos:end="148:18">&amp;</operator><name pos:start="148:19" pos:end="148:34"><name pos:start="148:19" pos:end="148:21">fpc</name><operator pos:start="148:22" pos:end="148:23">-&gt;</operator><name pos:start="148:24" pos:end="148:34">best_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:73">/* Find and score new headers.                                     */</comment>

    <comment type="block" pos:start="157:5" pos:end="157:73">/* buf_size is to zero when padding, so check for this since we do */</comment>

    <comment type="block" pos:start="159:5" pos:end="159:73">/* not want to try to read more input once we have found the end.  */</comment>

    <comment type="block" pos:start="161:5" pos:end="161:73">/* Note that as (non-modified) parameters, buf can be non-NULL,    */</comment>

    <comment type="block" pos:start="163:5" pos:end="163:73">/* while buf_size is 0.                                            */</comment>

    <while pos:start="165:5" pos:end="333:5">while <condition pos:start="165:11" pos:end="169:56">(<expr pos:start="165:12" pos:end="169:55"><operator pos:start="165:12" pos:end="165:12">(</operator><name pos:start="165:13" pos:end="165:15">buf</name> <operator pos:start="165:17" pos:end="165:18">&amp;&amp;</operator> <name pos:start="165:20" pos:end="165:27">buf_size</name> <operator pos:start="165:29" pos:end="165:30">&amp;&amp;</operator> <name pos:start="165:32" pos:end="165:39">read_end</name> <operator pos:start="165:41" pos:end="165:41">&lt;</operator> <name pos:start="165:43" pos:end="165:45">buf</name> <operator pos:start="165:47" pos:end="165:47">+</operator> <name pos:start="165:49" pos:end="165:56">buf_size</name> <operator pos:start="165:58" pos:end="165:59">&amp;&amp;</operator>

            <name pos:start="167:13" pos:end="167:36"><name pos:start="167:13" pos:end="167:15">fpc</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:36">nb_headers_buffered</name></name> <operator pos:start="167:38" pos:end="167:38">&lt;</operator> <name pos:start="167:40" pos:end="167:55">FLAC_MIN_HEADERS</name><operator pos:start="167:56" pos:end="167:56">)</operator>

           <operator pos:start="169:12" pos:end="169:13">||</operator> <operator pos:start="169:15" pos:end="169:15">(</operator><operator pos:start="169:16" pos:end="169:16">(</operator><operator pos:start="169:17" pos:end="169:17">!</operator><name pos:start="169:18" pos:end="169:20">buf</name> <operator pos:start="169:22" pos:end="169:23">||</operator> <operator pos:start="169:25" pos:end="169:25">!</operator><name pos:start="169:26" pos:end="169:33">buf_size</name><operator pos:start="169:34" pos:end="169:34">)</operator> <operator pos:start="169:36" pos:end="169:37">&amp;&amp;</operator> <operator pos:start="169:39" pos:end="169:39">!</operator><name pos:start="169:40" pos:end="169:54"><name pos:start="169:40" pos:end="169:42">fpc</name><operator pos:start="169:43" pos:end="169:44">-&gt;</operator><name pos:start="169:45" pos:end="169:54">end_padded</name></name><operator pos:start="169:55" pos:end="169:55">)</operator></expr>)</condition> <block pos:start="169:58" pos:end="333:5">{<block_content pos:start="171:9" pos:end="331:9">

        <decl_stmt pos:start="171:9" pos:end="171:25"><decl pos:start="171:9" pos:end="171:24"><type pos:start="171:9" pos:end="171:11"><name pos:start="171:9" pos:end="171:11">int</name></type> <name pos:start="171:13" pos:end="171:24">start_offset</name></decl>;</decl_stmt>



        <comment type="block" pos:start="175:9" pos:end="175:77">/* Pad the end once if EOF, to check the final region for headers. */</comment>

        <if_stmt pos:start="177:9" pos:end="197:9"><if pos:start="177:9" pos:end="185:9">if <condition pos:start="177:12" pos:end="177:30">(<expr pos:start="177:13" pos:end="177:29"><operator pos:start="177:13" pos:end="177:13">!</operator><name pos:start="177:14" pos:end="177:16">buf</name> <operator pos:start="177:18" pos:end="177:19">||</operator> <operator pos:start="177:21" pos:end="177:21">!</operator><name pos:start="177:22" pos:end="177:29">buf_size</name></expr>)</condition> <block pos:start="177:32" pos:end="185:9">{<block_content pos:start="179:13" pos:end="183:58">

            <expr_stmt pos:start="179:13" pos:end="179:37"><expr pos:start="179:13" pos:end="179:36"><name pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:15">fpc</name><operator pos:start="179:16" pos:end="179:17">-&gt;</operator><name pos:start="179:18" pos:end="179:27">end_padded</name></name>      <operator pos:start="179:34" pos:end="179:34">=</operator> <literal type="number" pos:start="179:36" pos:end="179:36">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:45"><expr pos:start="181:13" pos:end="181:44"><name pos:start="181:13" pos:end="181:20">buf_size</name> <operator pos:start="181:22" pos:end="181:22">=</operator> <name pos:start="181:24" pos:end="181:44">MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:58"><expr pos:start="183:13" pos:end="183:57"><name pos:start="183:13" pos:end="183:20">read_end</name> <operator pos:start="183:22" pos:end="183:22">=</operator> <name pos:start="183:24" pos:end="183:33">read_start</name> <operator pos:start="183:35" pos:end="183:35">+</operator> <name pos:start="183:37" pos:end="183:57">MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="197:9">else <block pos:start="185:16" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:80">

            <comment type="block" pos:start="187:13" pos:end="189:70">/* The maximum read size is the upper-bound of what the parser

               needs to have the required number of frames buffered */</comment>

            <decl_stmt pos:start="191:13" pos:end="191:77"><decl pos:start="191:13" pos:end="191:76"><type pos:start="191:13" pos:end="191:15"><name pos:start="191:13" pos:end="191:15">int</name></type> <name pos:start="191:17" pos:end="191:26">nb_desired</name> <init pos:start="191:28" pos:end="191:76">= <expr pos:start="191:30" pos:end="191:76"><name pos:start="191:30" pos:end="191:45">FLAC_MIN_HEADERS</name> <operator pos:start="191:47" pos:end="191:47">-</operator> <name pos:start="191:49" pos:end="191:72"><name pos:start="191:49" pos:end="191:51">fpc</name><operator pos:start="191:52" pos:end="191:53">-&gt;</operator><name pos:start="191:54" pos:end="191:72">nb_headers_buffered</name></name> <operator pos:start="191:74" pos:end="191:74">+</operator> <literal type="number" pos:start="191:76" pos:end="191:76">1</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="193:13" pos:end="195:80"><expr pos:start="193:13" pos:end="195:79"><name pos:start="193:13" pos:end="193:20">read_end</name>       <operator pos:start="193:28" pos:end="193:28">=</operator> <name pos:start="193:30" pos:end="193:37">read_end</name> <operator pos:start="193:39" pos:end="193:39">+</operator> <call pos:start="193:41" pos:end="195:79"><name pos:start="193:41" pos:end="193:45">FFMIN</name><argument_list pos:start="193:46" pos:end="195:79">(<argument pos:start="193:47" pos:end="193:71"><expr pos:start="193:47" pos:end="193:71"><name pos:start="193:47" pos:end="193:49">buf</name> <operator pos:start="193:51" pos:end="193:51">+</operator> <name pos:start="193:53" pos:end="193:60">buf_size</name> <operator pos:start="193:62" pos:end="193:62">-</operator> <name pos:start="193:64" pos:end="193:71">read_end</name></expr></argument>,

                                              <argument pos:start="195:47" pos:end="195:78"><expr pos:start="195:47" pos:end="195:78"><name pos:start="195:47" pos:end="195:56">nb_desired</name> <operator pos:start="195:58" pos:end="195:58">*</operator> <name pos:start="195:60" pos:end="195:78">FLAC_AVG_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="201:9" pos:end="215:9"><if pos:start="201:9" pos:end="215:9">if <condition pos:start="201:12" pos:end="205:42">(<expr pos:start="201:13" pos:end="205:41"><operator pos:start="201:13" pos:end="201:13">!</operator><call pos:start="201:14" pos:end="201:41"><name pos:start="201:14" pos:end="201:26">av_fifo_space</name><argument_list pos:start="201:27" pos:end="201:41">(<argument pos:start="201:28" pos:end="201:40"><expr pos:start="201:28" pos:end="201:40"><name pos:start="201:28" pos:end="201:40"><name pos:start="201:28" pos:end="201:30">fpc</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:40">fifo_buf</name></name></expr></argument>)</argument_list></call> <operator pos:start="201:43" pos:end="201:44">&amp;&amp;</operator>

            <call pos:start="203:13" pos:end="203:39"><name pos:start="203:13" pos:end="203:24">av_fifo_size</name><argument_list pos:start="203:25" pos:end="203:39">(<argument pos:start="203:26" pos:end="203:38"><expr pos:start="203:26" pos:end="203:38"><name pos:start="203:26" pos:end="203:38"><name pos:start="203:26" pos:end="203:28">fpc</name><operator pos:start="203:29" pos:end="203:30">-&gt;</operator><name pos:start="203:31" pos:end="203:38">fifo_buf</name></name></expr></argument>)</argument_list></call> <operator pos:start="203:41" pos:end="203:41">/</operator> <name pos:start="203:43" pos:end="203:61">FLAC_AVG_FRAME_SIZE</name> <operator pos:start="203:63" pos:end="203:63">&gt;</operator>

            <name pos:start="205:13" pos:end="205:36"><name pos:start="205:13" pos:end="205:15">fpc</name><operator pos:start="205:16" pos:end="205:17">-&gt;</operator><name pos:start="205:18" pos:end="205:36">nb_headers_buffered</name></name> <operator pos:start="205:38" pos:end="205:38">*</operator> <literal type="number" pos:start="205:40" pos:end="205:41">20</literal></expr>)</condition> <block pos:start="205:44" pos:end="215:9">{<block_content pos:start="213:13" pos:end="213:30">

            <comment type="block" pos:start="207:13" pos:end="211:56">/* There is less than one valid flac header buffered for 20 headers

             * buffered. Therefore the fifo is most likely filled with invalid

             * data and the input is not a flac file. */</comment>

            <goto pos:start="213:13" pos:end="213:30">goto <name pos:start="213:18" pos:end="213:29">handle_error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="219:9" pos:end="219:30">/* Fill the buffer. */</comment>

        <if_stmt pos:start="221:9" pos:end="233:9"><if pos:start="221:9" pos:end="233:9">if <condition pos:start="221:12" pos:end="223:108">(   <expr pos:start="221:16" pos:end="223:107"><call pos:start="221:16" pos:end="221:43"><name pos:start="221:16" pos:end="221:28">av_fifo_space</name><argument_list pos:start="221:29" pos:end="221:43">(<argument pos:start="221:30" pos:end="221:42"><expr pos:start="221:30" pos:end="221:42"><name pos:start="221:30" pos:end="221:42"><name pos:start="221:30" pos:end="221:32">fpc</name><operator pos:start="221:33" pos:end="221:34">-&gt;</operator><name pos:start="221:35" pos:end="221:42">fifo_buf</name></name></expr></argument>)</argument_list></call> <operator pos:start="221:45" pos:end="221:45">&lt;</operator> <name pos:start="221:47" pos:end="221:54">read_end</name> <operator pos:start="221:56" pos:end="221:56">-</operator> <name pos:start="221:58" pos:end="221:67">read_start</name>

            <operator pos:start="223:13" pos:end="223:14">&amp;&amp;</operator> <call pos:start="223:16" pos:end="223:103"><name pos:start="223:16" pos:end="223:31">av_fifo_realloc2</name><argument_list pos:start="223:32" pos:end="223:103">(<argument pos:start="223:33" pos:end="223:45"><expr pos:start="223:33" pos:end="223:45"><name pos:start="223:33" pos:end="223:45"><name pos:start="223:33" pos:end="223:35">fpc</name><operator pos:start="223:36" pos:end="223:37">-&gt;</operator><name pos:start="223:38" pos:end="223:45">fifo_buf</name></name></expr></argument>, <argument pos:start="223:48" pos:end="223:102"><expr pos:start="223:48" pos:end="223:102"><operator pos:start="223:48" pos:end="223:48">(</operator><name pos:start="223:49" pos:end="223:56">read_end</name> <operator pos:start="223:58" pos:end="223:58">-</operator> <name pos:start="223:60" pos:end="223:69">read_start</name><operator pos:start="223:70" pos:end="223:70">)</operator> <operator pos:start="223:72" pos:end="223:72">+</operator> <literal type="number" pos:start="223:74" pos:end="223:74">2</literal><operator pos:start="223:75" pos:end="223:75">*</operator><call pos:start="223:76" pos:end="223:102"><name pos:start="223:76" pos:end="223:87">av_fifo_size</name><argument_list pos:start="223:88" pos:end="223:102">(<argument pos:start="223:89" pos:end="223:101"><expr pos:start="223:89" pos:end="223:101"><name pos:start="223:89" pos:end="223:101"><name pos:start="223:89" pos:end="223:91">fpc</name><operator pos:start="223:92" pos:end="223:93">-&gt;</operator><name pos:start="223:94" pos:end="223:101">fifo_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="223:105" pos:end="223:105">&lt;</operator> <literal type="number" pos:start="223:107" pos:end="223:107">0</literal></expr>)</condition> <block pos:start="223:110" pos:end="233:9">{<block_content pos:start="225:13" pos:end="231:30">

            <expr_stmt pos:start="225:13" pos:end="229:74"><expr pos:start="225:13" pos:end="229:73"><call pos:start="225:13" pos:end="229:73"><name pos:start="225:13" pos:end="225:18">av_log</name><argument_list pos:start="225:19" pos:end="229:73">(<argument pos:start="225:20" pos:end="225:24"><expr pos:start="225:20" pos:end="225:24"><name pos:start="225:20" pos:end="225:24">avctx</name></expr></argument>, <argument pos:start="225:27" pos:end="225:38"><expr pos:start="225:27" pos:end="225:38"><name pos:start="225:27" pos:end="225:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="227:20" pos:end="227:78"><expr pos:start="227:20" pos:end="227:78"><literal type="string" pos:start="227:20" pos:end="227:57">"couldn't reallocate buffer of size %"</literal><name pos:start="227:58" pos:end="227:74">PTRDIFF_SPECIFIER</name><literal type="string" pos:start="227:75" pos:end="227:78">"\n"</literal></expr></argument>,

                   <argument pos:start="229:20" pos:end="229:72"><expr pos:start="229:20" pos:end="229:72"><operator pos:start="229:20" pos:end="229:20">(</operator><name pos:start="229:21" pos:end="229:28">read_end</name> <operator pos:start="229:30" pos:end="229:30">-</operator> <name pos:start="229:32" pos:end="229:41">read_start</name><operator pos:start="229:42" pos:end="229:42">)</operator> <operator pos:start="229:44" pos:end="229:44">+</operator> <call pos:start="229:46" pos:end="229:72"><name pos:start="229:46" pos:end="229:57">av_fifo_size</name><argument_list pos:start="229:58" pos:end="229:72">(<argument pos:start="229:59" pos:end="229:71"><expr pos:start="229:59" pos:end="229:71"><name pos:start="229:59" pos:end="229:71"><name pos:start="229:59" pos:end="229:61">fpc</name><operator pos:start="229:62" pos:end="229:63">-&gt;</operator><name pos:start="229:64" pos:end="229:71">fifo_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="231:13" pos:end="231:30">goto <name pos:start="231:18" pos:end="231:29">handle_error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="237:9" pos:end="249:9"><if pos:start="237:9" pos:end="243:9">if <condition pos:start="237:12" pos:end="237:28">(<expr pos:start="237:13" pos:end="237:27"><name pos:start="237:13" pos:end="237:15">buf</name> <operator pos:start="237:17" pos:end="237:18">&amp;&amp;</operator> <name pos:start="237:20" pos:end="237:27">buf_size</name></expr>)</condition> <block pos:start="237:30" pos:end="243:9">{<block_content pos:start="239:13" pos:end="241:63">

            <expr_stmt pos:start="239:13" pos:end="241:63"><expr pos:start="239:13" pos:end="241:62"><call pos:start="239:13" pos:end="241:62"><name pos:start="239:13" pos:end="239:33">av_fifo_generic_write</name><argument_list pos:start="239:34" pos:end="241:62">(<argument pos:start="239:35" pos:end="239:47"><expr pos:start="239:35" pos:end="239:47"><name pos:start="239:35" pos:end="239:47"><name pos:start="239:35" pos:end="239:37">fpc</name><operator pos:start="239:38" pos:end="239:39">-&gt;</operator><name pos:start="239:40" pos:end="239:47">fifo_buf</name></name></expr></argument>, <argument pos:start="239:50" pos:end="239:67"><expr pos:start="239:50" pos:end="239:67"><operator pos:start="239:50" pos:end="239:50">(</operator><name pos:start="239:51" pos:end="239:54">void</name><operator pos:start="239:55" pos:end="239:55">*</operator><operator pos:start="239:56" pos:end="239:56">)</operator> <name pos:start="239:58" pos:end="239:67">read_start</name></expr></argument>,

                                  <argument pos:start="241:35" pos:end="241:55"><expr pos:start="241:35" pos:end="241:55"><name pos:start="241:35" pos:end="241:42">read_end</name> <operator pos:start="241:44" pos:end="241:44">-</operator> <name pos:start="241:46" pos:end="241:55">read_start</name></expr></argument>, <argument pos:start="241:58" pos:end="241:61"><expr pos:start="241:58" pos:end="241:61"><name pos:start="241:58" pos:end="241:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="243:11" pos:end="249:9">else <block pos:start="243:16" pos:end="249:9">{<block_content pos:start="245:13" pos:end="247:81">

            <decl_stmt pos:start="245:13" pos:end="245:54"><decl pos:start="245:13" pos:end="245:53"><type pos:start="245:13" pos:end="245:18"><name pos:start="245:13" pos:end="245:18">int8_t</name></type> <name pos:start="245:20" pos:end="245:45"><name pos:start="245:20" pos:end="245:22">pad</name><index pos:start="245:23" pos:end="245:45">[<expr pos:start="245:24" pos:end="245:44"><name pos:start="245:24" pos:end="245:44">MAX_FRAME_HEADER_SIZE</name></expr>]</index></name> <init pos:start="245:47" pos:end="245:53">= <expr pos:start="245:49" pos:end="245:53"><block pos:start="245:49" pos:end="245:53">{ <expr pos:start="245:51" pos:end="245:51"><literal type="number" pos:start="245:51" pos:end="245:51">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:81"><expr pos:start="247:13" pos:end="247:80"><call pos:start="247:13" pos:end="247:80"><name pos:start="247:13" pos:end="247:33">av_fifo_generic_write</name><argument_list pos:start="247:34" pos:end="247:80">(<argument pos:start="247:35" pos:end="247:47"><expr pos:start="247:35" pos:end="247:47"><name pos:start="247:35" pos:end="247:47"><name pos:start="247:35" pos:end="247:37">fpc</name><operator pos:start="247:38" pos:end="247:39">-&gt;</operator><name pos:start="247:40" pos:end="247:47">fifo_buf</name></name></expr></argument>, <argument pos:start="247:50" pos:end="247:60"><expr pos:start="247:50" pos:end="247:60"><operator pos:start="247:50" pos:end="247:50">(</operator><name pos:start="247:51" pos:end="247:54">void</name><operator pos:start="247:55" pos:end="247:55">*</operator><operator pos:start="247:56" pos:end="247:56">)</operator> <name pos:start="247:58" pos:end="247:60">pad</name></expr></argument>, <argument pos:start="247:63" pos:end="247:73"><expr pos:start="247:63" pos:end="247:73"><sizeof pos:start="247:63" pos:end="247:73">sizeof<argument_list pos:start="247:69" pos:end="247:73">(<argument pos:start="247:70" pos:end="247:72"><expr pos:start="247:70" pos:end="247:72"><name pos:start="247:70" pos:end="247:72">pad</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="247:76" pos:end="247:79"><expr pos:start="247:76" pos:end="247:79"><name pos:start="247:76" pos:end="247:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="253:9" pos:end="253:47">/* Tag headers and update sequences. */</comment>

        <expr_stmt pos:start="255:9" pos:end="257:79"><expr pos:start="255:9" pos:end="257:78"><name pos:start="255:9" pos:end="255:20">start_offset</name> <operator pos:start="255:22" pos:end="255:22">=</operator> <call pos:start="255:24" pos:end="255:50"><name pos:start="255:24" pos:end="255:35">av_fifo_size</name><argument_list pos:start="255:36" pos:end="255:50">(<argument pos:start="255:37" pos:end="255:49"><expr pos:start="255:37" pos:end="255:49"><name pos:start="255:37" pos:end="255:49"><name pos:start="255:37" pos:end="255:39">fpc</name><operator pos:start="255:40" pos:end="255:41">-&gt;</operator><name pos:start="255:42" pos:end="255:49">fifo_buf</name></name></expr></argument>)</argument_list></call> <operator pos:start="255:52" pos:end="255:52">-</operator>

                       <operator pos:start="257:24" pos:end="257:24">(</operator><operator pos:start="257:25" pos:end="257:25">(</operator><name pos:start="257:26" pos:end="257:33">read_end</name> <operator pos:start="257:35" pos:end="257:35">-</operator> <name pos:start="257:37" pos:end="257:46">read_start</name><operator pos:start="257:47" pos:end="257:47">)</operator> <operator pos:start="257:49" pos:end="257:49">+</operator> <operator pos:start="257:51" pos:end="257:51">(</operator><name pos:start="257:52" pos:end="257:72">MAX_FRAME_HEADER_SIZE</name> <operator pos:start="257:74" pos:end="257:74">-</operator> <literal type="number" pos:start="257:76" pos:end="257:76">1</literal><operator pos:start="257:77" pos:end="257:77">)</operator><operator pos:start="257:78" pos:end="257:78">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:46"><expr pos:start="259:9" pos:end="259:45"><name pos:start="259:9" pos:end="259:20">start_offset</name> <operator pos:start="259:22" pos:end="259:22">=</operator> <call pos:start="259:24" pos:end="259:45"><name pos:start="259:24" pos:end="259:28">FFMAX</name><argument_list pos:start="259:29" pos:end="259:45">(<argument pos:start="259:30" pos:end="259:30"><expr pos:start="259:30" pos:end="259:30"><literal type="number" pos:start="259:30" pos:end="259:30">0</literal></expr></argument>, <argument pos:start="259:33" pos:end="259:44"><expr pos:start="259:33" pos:end="259:44"><name pos:start="259:33" pos:end="259:44">start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:59"><expr pos:start="261:9" pos:end="261:58"><name pos:start="261:9" pos:end="261:18">nb_headers</name>   <operator pos:start="261:22" pos:end="261:22">=</operator> <call pos:start="261:24" pos:end="261:58"><name pos:start="261:24" pos:end="261:39">find_new_headers</name><argument_list pos:start="261:40" pos:end="261:58">(<argument pos:start="261:41" pos:end="261:43"><expr pos:start="261:41" pos:end="261:43"><name pos:start="261:41" pos:end="261:43">fpc</name></expr></argument>, <argument pos:start="261:46" pos:end="261:57"><expr pos:start="261:46" pos:end="261:57"><name pos:start="261:46" pos:end="261:57">start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="265:9" pos:end="273:9"><if pos:start="265:9" pos:end="273:9">if <condition pos:start="265:12" pos:end="265:27">(<expr pos:start="265:13" pos:end="265:26"><name pos:start="265:13" pos:end="265:22">nb_headers</name> <operator pos:start="265:24" pos:end="265:24">&lt;</operator> <literal type="number" pos:start="265:26" pos:end="265:26">0</literal></expr>)</condition> <block pos:start="265:29" pos:end="273:9">{<block_content pos:start="267:13" pos:end="271:30">

            <expr_stmt pos:start="267:13" pos:end="269:71"><expr pos:start="267:13" pos:end="269:70"><call pos:start="267:13" pos:end="269:70"><name pos:start="267:13" pos:end="267:18">av_log</name><argument_list pos:start="267:19" pos:end="269:70">(<argument pos:start="267:20" pos:end="267:24"><expr pos:start="267:20" pos:end="267:24"><name pos:start="267:20" pos:end="267:24">avctx</name></expr></argument>, <argument pos:start="267:27" pos:end="267:38"><expr pos:start="267:27" pos:end="267:38"><name pos:start="267:27" pos:end="267:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="269:20" pos:end="269:69"><expr pos:start="269:20" pos:end="269:69"><literal type="string" pos:start="269:20" pos:end="269:69">"find_new_headers couldn't allocate FLAC header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="271:13" pos:end="271:30">goto <name pos:start="271:18" pos:end="271:29">handle_error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="277:9" pos:end="277:46"><expr pos:start="277:9" pos:end="277:45"><name pos:start="277:9" pos:end="277:32"><name pos:start="277:9" pos:end="277:11">fpc</name><operator pos:start="277:12" pos:end="277:13">-&gt;</operator><name pos:start="277:14" pos:end="277:32">nb_headers_buffered</name></name> <operator pos:start="277:34" pos:end="277:34">=</operator> <name pos:start="277:36" pos:end="277:45">nb_headers</name></expr>;</expr_stmt>

        <comment type="block" pos:start="279:9" pos:end="279:65">/* Wait till FLAC_MIN_HEADERS to output a valid frame. */</comment>

        <if_stmt pos:start="281:9" pos:end="295:9"><if pos:start="281:9" pos:end="295:9">if <condition pos:start="281:12" pos:end="281:76">(<expr pos:start="281:13" pos:end="281:75"><operator pos:start="281:13" pos:end="281:13">!</operator><name pos:start="281:14" pos:end="281:28"><name pos:start="281:14" pos:end="281:16">fpc</name><operator pos:start="281:17" pos:end="281:18">-&gt;</operator><name pos:start="281:19" pos:end="281:28">end_padded</name></name> <operator pos:start="281:30" pos:end="281:31">&amp;&amp;</operator> <name pos:start="281:33" pos:end="281:56"><name pos:start="281:33" pos:end="281:35">fpc</name><operator pos:start="281:36" pos:end="281:37">-&gt;</operator><name pos:start="281:38" pos:end="281:56">nb_headers_buffered</name></name> <operator pos:start="281:58" pos:end="281:58">&lt;</operator> <name pos:start="281:60" pos:end="281:75">FLAC_MIN_HEADERS</name></expr>)</condition> <block pos:start="281:78" pos:end="295:9">{<block_content pos:start="283:13" pos:end="293:13">

            <if_stmt pos:start="283:13" pos:end="293:13"><if pos:start="283:13" pos:end="289:13">if <condition pos:start="283:16" pos:end="283:49">(<expr pos:start="283:17" pos:end="283:48"><name pos:start="283:17" pos:end="283:19">buf</name> <operator pos:start="283:21" pos:end="283:22">&amp;&amp;</operator> <name pos:start="283:24" pos:end="283:31">read_end</name> <operator pos:start="283:33" pos:end="283:33">&lt;</operator> <name pos:start="283:35" pos:end="283:37">buf</name> <operator pos:start="283:39" pos:end="283:39">+</operator> <name pos:start="283:41" pos:end="283:48">buf_size</name></expr>)</condition> <block pos:start="283:51" pos:end="289:13">{<block_content pos:start="285:17" pos:end="287:25">

                <expr_stmt pos:start="285:17" pos:end="285:38"><expr pos:start="285:17" pos:end="285:37"><name pos:start="285:17" pos:end="285:26">read_start</name> <operator pos:start="285:28" pos:end="285:28">=</operator> <name pos:start="285:30" pos:end="285:37">read_end</name></expr>;</expr_stmt>

                <continue pos:start="287:17" pos:end="287:25">continue;</continue>

            </block_content>}</block></if> <else pos:start="289:15" pos:end="293:13">else <block pos:start="289:20" pos:end="293:13">{<block_content pos:start="291:17" pos:end="291:34">

                <goto pos:start="291:17" pos:end="291:34">goto <name pos:start="291:22" pos:end="291:33">handle_error</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="299:9" pos:end="299:78">/* If headers found, update the scores since we have longer chains. */</comment>

        <if_stmt pos:start="301:9" pos:end="303:33"><if pos:start="301:9" pos:end="303:33">if <condition pos:start="301:12" pos:end="301:53">(<expr pos:start="301:13" pos:end="301:52"><name pos:start="301:13" pos:end="301:27"><name pos:start="301:13" pos:end="301:15">fpc</name><operator pos:start="301:16" pos:end="301:17">-&gt;</operator><name pos:start="301:18" pos:end="301:27">end_padded</name></name> <operator pos:start="301:29" pos:end="301:30">||</operator> <name pos:start="301:32" pos:end="301:52"><name pos:start="301:32" pos:end="301:34">fpc</name><operator pos:start="301:35" pos:end="301:36">-&gt;</operator><name pos:start="301:37" pos:end="301:52">nb_headers_found</name></name></expr>)</condition><block type="pseudo" pos:start="303:13" pos:end="303:33"><block_content pos:start="303:13" pos:end="303:33">

            <expr_stmt pos:start="303:13" pos:end="303:33"><expr pos:start="303:13" pos:end="303:32"><call pos:start="303:13" pos:end="303:32"><name pos:start="303:13" pos:end="303:27">score_sequences</name><argument_list pos:start="303:28" pos:end="303:32">(<argument pos:start="303:29" pos:end="303:31"><expr pos:start="303:29" pos:end="303:31"><name pos:start="303:29" pos:end="303:31">fpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="307:9" pos:end="307:43">/* restore the state pre-padding */</comment>

        <if_stmt pos:start="309:9" pos:end="331:9"><if pos:start="309:9" pos:end="331:9">if <condition pos:start="309:12" pos:end="309:28">(<expr pos:start="309:13" pos:end="309:27"><name pos:start="309:13" pos:end="309:27"><name pos:start="309:13" pos:end="309:15">fpc</name><operator pos:start="309:16" pos:end="309:17">-&gt;</operator><name pos:start="309:18" pos:end="309:27">end_padded</name></name></expr>)</condition> <block pos:start="309:30" pos:end="331:9">{<block_content pos:start="311:13" pos:end="329:41">

            <decl_stmt pos:start="311:13" pos:end="311:91"><decl pos:start="311:13" pos:end="311:90"><type pos:start="311:13" pos:end="311:15"><name pos:start="311:13" pos:end="311:15">int</name></type> <name pos:start="311:17" pos:end="311:20">warp</name> <init pos:start="311:22" pos:end="311:90">= <expr pos:start="311:24" pos:end="311:90"><name pos:start="311:24" pos:end="311:42"><name pos:start="311:24" pos:end="311:26">fpc</name><operator pos:start="311:27" pos:end="311:28">-&gt;</operator><name pos:start="311:29" pos:end="311:36">fifo_buf</name><operator pos:start="311:37" pos:end="311:38">-&gt;</operator><name pos:start="311:39" pos:end="311:42">wptr</name></name> <operator pos:start="311:44" pos:end="311:44">-</operator> <name pos:start="311:46" pos:end="311:66"><name pos:start="311:46" pos:end="311:48">fpc</name><operator pos:start="311:49" pos:end="311:50">-&gt;</operator><name pos:start="311:51" pos:end="311:58">fifo_buf</name><operator pos:start="311:59" pos:end="311:60">-&gt;</operator><name pos:start="311:61" pos:end="311:66">buffer</name></name> <operator pos:start="311:68" pos:end="311:68">&lt;</operator> <name pos:start="311:70" pos:end="311:90">MAX_FRAME_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="313:13" pos:end="313:50">/* HACK: drain the tail of the fifo */</comment>

            <expr_stmt pos:start="315:13" pos:end="315:57"><expr pos:start="315:13" pos:end="315:56"><name pos:start="315:13" pos:end="315:31"><name pos:start="315:13" pos:end="315:15">fpc</name><operator pos:start="315:16" pos:end="315:17">-&gt;</operator><name pos:start="315:18" pos:end="315:25">fifo_buf</name><operator pos:start="315:26" pos:end="315:27">-&gt;</operator><name pos:start="315:28" pos:end="315:31">wptr</name></name> <operator pos:start="315:33" pos:end="315:34">-=</operator> <name pos:start="315:36" pos:end="315:56">MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:57"><expr pos:start="317:13" pos:end="317:56"><name pos:start="317:13" pos:end="317:31"><name pos:start="317:13" pos:end="317:15">fpc</name><operator pos:start="317:16" pos:end="317:17">-&gt;</operator><name pos:start="317:18" pos:end="317:25">fifo_buf</name><operator pos:start="317:26" pos:end="317:27">-&gt;</operator><name pos:start="317:28" pos:end="317:31">wndx</name></name> <operator pos:start="317:33" pos:end="317:34">-=</operator> <name pos:start="317:36" pos:end="317:56">MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

            <if_stmt pos:start="319:13" pos:end="325:13"><if pos:start="319:13" pos:end="325:13">if <condition pos:start="319:16" pos:end="319:21">(<expr pos:start="319:17" pos:end="319:20"><name pos:start="319:17" pos:end="319:20">warp</name></expr>)</condition> <block pos:start="319:23" pos:end="325:13">{<block_content pos:start="321:17" pos:end="323:42">

                <expr_stmt pos:start="321:17" pos:end="323:42"><expr pos:start="321:17" pos:end="323:41"><name pos:start="321:17" pos:end="321:35"><name pos:start="321:17" pos:end="321:19">fpc</name><operator pos:start="321:20" pos:end="321:21">-&gt;</operator><name pos:start="321:22" pos:end="321:29">fifo_buf</name><operator pos:start="321:30" pos:end="321:31">-&gt;</operator><name pos:start="321:32" pos:end="321:35">wptr</name></name> <operator pos:start="321:37" pos:end="321:38">+=</operator> <name pos:start="321:40" pos:end="321:57"><name pos:start="321:40" pos:end="321:42">fpc</name><operator pos:start="321:43" pos:end="321:44">-&gt;</operator><name pos:start="321:45" pos:end="321:52">fifo_buf</name><operator pos:start="321:53" pos:end="321:54">-&gt;</operator><name pos:start="321:55" pos:end="321:57">end</name></name> <operator pos:start="321:59" pos:end="321:59">-</operator>

                    <name pos:start="323:21" pos:end="323:41"><name pos:start="323:21" pos:end="323:23">fpc</name><operator pos:start="323:24" pos:end="323:25">-&gt;</operator><name pos:start="323:26" pos:end="323:33">fifo_buf</name><operator pos:start="323:34" pos:end="323:35">-&gt;</operator><name pos:start="323:36" pos:end="323:41">buffer</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:25"><expr pos:start="327:13" pos:end="327:24"><name pos:start="327:13" pos:end="327:20">buf_size</name> <operator pos:start="327:22" pos:end="327:22">=</operator> <literal type="number" pos:start="327:24" pos:end="327:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:41"><expr pos:start="329:13" pos:end="329:40"><name pos:start="329:13" pos:end="329:22">read_start</name> <operator pos:start="329:24" pos:end="329:24">=</operator> <name pos:start="329:26" pos:end="329:33">read_end</name> <operator pos:start="329:35" pos:end="329:35">=</operator> <name pos:start="329:37" pos:end="329:40">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <for pos:start="337:5" pos:end="347:5">for <control pos:start="337:9" pos:end="337:54">(<init pos:start="337:10" pos:end="337:29"><expr pos:start="337:10" pos:end="337:28"><name pos:start="337:10" pos:end="337:13">curr</name> <operator pos:start="337:15" pos:end="337:15">=</operator> <name pos:start="337:17" pos:end="337:28"><name pos:start="337:17" pos:end="337:19">fpc</name><operator pos:start="337:20" pos:end="337:21">-&gt;</operator><name pos:start="337:22" pos:end="337:28">headers</name></name></expr>;</init> <condition pos:start="337:31" pos:end="337:35"><expr pos:start="337:31" pos:end="337:34"><name pos:start="337:31" pos:end="337:34">curr</name></expr>;</condition> <incr pos:start="337:37" pos:end="337:53"><expr pos:start="337:37" pos:end="337:53"><name pos:start="337:37" pos:end="337:40">curr</name> <operator pos:start="337:42" pos:end="337:42">=</operator> <name pos:start="337:44" pos:end="337:53"><name pos:start="337:44" pos:end="337:47">curr</name><operator pos:start="337:48" pos:end="337:49">-&gt;</operator><name pos:start="337:50" pos:end="337:53">next</name></name></expr></incr>)</control> <block pos:start="337:56" pos:end="347:5">{<block_content pos:start="339:9" pos:end="345:9">

        <if_stmt pos:start="339:9" pos:end="345:9"><if pos:start="339:9" pos:end="345:9">if <condition pos:start="339:12" pos:end="341:81">(<expr pos:start="339:13" pos:end="341:80"><name pos:start="339:13" pos:end="339:27"><name pos:start="339:13" pos:end="339:16">curr</name><operator pos:start="339:17" pos:end="339:18">-&gt;</operator><name pos:start="339:19" pos:end="339:27">max_score</name></name> <operator pos:start="339:29" pos:end="339:29">&gt;</operator> <literal type="number" pos:start="339:31" pos:end="339:31">0</literal> <operator pos:start="339:33" pos:end="339:34">&amp;&amp;</operator>

            <operator pos:start="341:13" pos:end="341:13">(</operator><operator pos:start="341:14" pos:end="341:14">!</operator><name pos:start="341:15" pos:end="341:30"><name pos:start="341:15" pos:end="341:17">fpc</name><operator pos:start="341:18" pos:end="341:19">-&gt;</operator><name pos:start="341:20" pos:end="341:30">best_header</name></name> <operator pos:start="341:32" pos:end="341:33">||</operator> <name pos:start="341:35" pos:end="341:49"><name pos:start="341:35" pos:end="341:38">curr</name><operator pos:start="341:39" pos:end="341:40">-&gt;</operator><name pos:start="341:41" pos:end="341:49">max_score</name></name> <operator pos:start="341:51" pos:end="341:51">&gt;</operator> <name pos:start="341:53" pos:end="341:79"><name pos:start="341:53" pos:end="341:55">fpc</name><operator pos:start="341:56" pos:end="341:57">-&gt;</operator><name pos:start="341:58" pos:end="341:68">best_header</name><operator pos:start="341:69" pos:end="341:70">-&gt;</operator><name pos:start="341:71" pos:end="341:79">max_score</name></name><operator pos:start="341:80" pos:end="341:80">)</operator></expr>)</condition> <block pos:start="341:83" pos:end="345:9">{<block_content pos:start="343:13" pos:end="343:36">

            <expr_stmt pos:start="343:13" pos:end="343:36"><expr pos:start="343:13" pos:end="343:35"><name pos:start="343:13" pos:end="343:28"><name pos:start="343:13" pos:end="343:15">fpc</name><operator pos:start="343:16" pos:end="343:17">-&gt;</operator><name pos:start="343:18" pos:end="343:28">best_header</name></name> <operator pos:start="343:30" pos:end="343:30">=</operator> <name pos:start="343:32" pos:end="343:35">curr</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="351:5" pos:end="387:5"><if pos:start="351:5" pos:end="387:5">if <condition pos:start="351:8" pos:end="351:25">(<expr pos:start="351:9" pos:end="351:24"><name pos:start="351:9" pos:end="351:24"><name pos:start="351:9" pos:end="351:11">fpc</name><operator pos:start="351:12" pos:end="351:13">-&gt;</operator><name pos:start="351:14" pos:end="351:24">best_header</name></name></expr>)</condition> <block pos:start="351:27" pos:end="387:5">{<block_content pos:start="353:9" pos:end="385:63">

        <expr_stmt pos:start="353:9" pos:end="353:35"><expr pos:start="353:9" pos:end="353:34"><name pos:start="353:9" pos:end="353:30"><name pos:start="353:9" pos:end="353:11">fpc</name><operator pos:start="353:12" pos:end="353:13">-&gt;</operator><name pos:start="353:14" pos:end="353:30">best_header_valid</name></name> <operator pos:start="353:32" pos:end="353:32">=</operator> <literal type="number" pos:start="353:34" pos:end="353:34">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="355:9" pos:end="381:9"><if pos:start="355:9" pos:end="381:9">if <condition pos:start="355:12" pos:end="355:41">(<expr pos:start="355:13" pos:end="355:40"><name pos:start="355:13" pos:end="355:36"><name pos:start="355:13" pos:end="355:15">fpc</name><operator pos:start="355:16" pos:end="355:17">-&gt;</operator><name pos:start="355:18" pos:end="355:28">best_header</name><operator pos:start="355:29" pos:end="355:30">-&gt;</operator><name pos:start="355:31" pos:end="355:36">offset</name></name> <operator pos:start="355:38" pos:end="355:38">&gt;</operator> <literal type="number" pos:start="355:40" pos:end="355:40">0</literal></expr>)</condition> <block pos:start="355:43" pos:end="381:9">{<block_content pos:start="359:13" pos:end="379:72">

            <comment type="block" pos:start="357:13" pos:end="357:38">/* Output a junk frame. */</comment>

            <expr_stmt pos:start="359:13" pos:end="361:45"><expr pos:start="359:13" pos:end="361:44"><call pos:start="359:13" pos:end="361:44"><name pos:start="359:13" pos:end="359:18">av_log</name><argument_list pos:start="359:19" pos:end="361:44">(<argument pos:start="359:20" pos:end="359:24"><expr pos:start="359:20" pos:end="359:24"><name pos:start="359:20" pos:end="359:24">avctx</name></expr></argument>, <argument pos:start="359:27" pos:end="359:38"><expr pos:start="359:27" pos:end="359:38"><name pos:start="359:27" pos:end="359:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="359:41" pos:end="359:69"><expr pos:start="359:41" pos:end="359:69"><literal type="string" pos:start="359:41" pos:end="359:69">"Junk frame till offset %i\n"</literal></expr></argument>,

                   <argument pos:start="361:20" pos:end="361:43"><expr pos:start="361:20" pos:end="361:43"><name pos:start="361:20" pos:end="361:43"><name pos:start="361:20" pos:end="361:22">fpc</name><operator pos:start="361:23" pos:end="361:24">-&gt;</operator><name pos:start="361:25" pos:end="361:35">best_header</name><operator pos:start="361:36" pos:end="361:37">-&gt;</operator><name pos:start="361:38" pos:end="361:43">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="365:13" pos:end="365:78">/* Set duration to 0. It is unknown or invalid in a junk frame. */</comment>

            <expr_stmt pos:start="367:13" pos:end="367:28"><expr pos:start="367:13" pos:end="367:27"><name pos:start="367:13" pos:end="367:23"><name pos:start="367:13" pos:end="367:13">s</name><operator pos:start="367:14" pos:end="367:15">-&gt;</operator><name pos:start="367:16" pos:end="367:23">duration</name></name> <operator pos:start="367:25" pos:end="367:25">=</operator> <literal type="number" pos:start="367:27" pos:end="367:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:57"><expr pos:start="369:13" pos:end="369:56"><operator pos:start="369:13" pos:end="369:13">*</operator><name pos:start="369:14" pos:end="369:25">poutbuf_size</name>     <operator pos:start="369:31" pos:end="369:31">=</operator> <name pos:start="369:33" pos:end="369:56"><name pos:start="369:33" pos:end="369:35">fpc</name><operator pos:start="369:36" pos:end="369:37">-&gt;</operator><name pos:start="369:38" pos:end="369:48">best_header</name><operator pos:start="369:49" pos:end="369:50">-&gt;</operator><name pos:start="369:51" pos:end="369:56">offset</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="375:83"><expr pos:start="371:13" pos:end="375:82"><operator pos:start="371:13" pos:end="371:13">*</operator><name pos:start="371:14" pos:end="371:20">poutbuf</name>          <operator pos:start="371:31" pos:end="371:31">=</operator> <call pos:start="371:33" pos:end="375:82"><name pos:start="371:33" pos:end="371:51">flac_fifo_read_wrap</name><argument_list pos:start="371:52" pos:end="375:82">(<argument pos:start="371:53" pos:end="371:55"><expr pos:start="371:53" pos:end="371:55"><name pos:start="371:53" pos:end="371:55">fpc</name></expr></argument>, <argument pos:start="371:58" pos:end="371:58"><expr pos:start="371:58" pos:end="371:58"><literal type="number" pos:start="371:58" pos:end="371:58">0</literal></expr></argument>, <argument pos:start="371:61" pos:end="371:73"><expr pos:start="371:61" pos:end="371:73"><operator pos:start="371:61" pos:end="371:61">*</operator><name pos:start="371:62" pos:end="371:73">poutbuf_size</name></expr></argument>,

                                                    <argument pos:start="373:53" pos:end="373:66"><expr pos:start="373:53" pos:end="373:66"><operator pos:start="373:53" pos:end="373:53">&amp;</operator><name pos:start="373:54" pos:end="373:66"><name pos:start="373:54" pos:end="373:56">fpc</name><operator pos:start="373:57" pos:end="373:58">-&gt;</operator><name pos:start="373:59" pos:end="373:66">wrap_buf</name></name></expr></argument>,

                                                    <argument pos:start="375:53" pos:end="375:81"><expr pos:start="375:53" pos:end="375:81"><operator pos:start="375:53" pos:end="375:53">&amp;</operator><name pos:start="375:54" pos:end="375:81"><name pos:start="375:54" pos:end="375:56">fpc</name><operator pos:start="375:57" pos:end="375:58">-&gt;</operator><name pos:start="375:59" pos:end="375:81">wrap_buf_allocated_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="377:13" pos:end="379:72">return <expr pos:start="377:20" pos:end="379:71"><ternary pos:start="377:20" pos:end="379:71"><condition pos:start="377:20" pos:end="377:29"><expr pos:start="377:20" pos:end="377:27"><name pos:start="377:20" pos:end="377:27">buf_size</name></expr> ?</condition><then pos:start="377:31" pos:end="377:46"> <expr pos:start="377:31" pos:end="377:46"><operator pos:start="377:31" pos:end="377:31">(</operator><name pos:start="377:32" pos:end="377:39">read_end</name> <operator pos:start="377:41" pos:end="377:41">-</operator> <name pos:start="377:43" pos:end="377:45">buf</name><operator pos:start="377:46" pos:end="377:46">)</operator></expr> </then><else pos:start="377:48" pos:end="379:71">: <expr pos:start="377:50" pos:end="379:71"><operator pos:start="377:50" pos:end="377:50">(</operator><name pos:start="377:51" pos:end="377:74"><name pos:start="377:51" pos:end="377:53">fpc</name><operator pos:start="377:54" pos:end="377:55">-&gt;</operator><name pos:start="377:56" pos:end="377:66">best_header</name><operator pos:start="377:67" pos:end="377:68">-&gt;</operator><name pos:start="377:69" pos:end="377:74">offset</name></name> <operator pos:start="377:76" pos:end="377:76">-</operator>

                                           <call pos:start="379:44" pos:end="379:70"><name pos:start="379:44" pos:end="379:55">av_fifo_size</name><argument_list pos:start="379:56" pos:end="379:70">(<argument pos:start="379:57" pos:end="379:69"><expr pos:start="379:57" pos:end="379:69"><name pos:start="379:57" pos:end="379:69"><name pos:start="379:57" pos:end="379:59">fpc</name><operator pos:start="379:60" pos:end="379:61">-&gt;</operator><name pos:start="379:62" pos:end="379:69">fifo_buf</name></name></expr></argument>)</argument_list></call><operator pos:start="379:71" pos:end="379:71">)</operator></expr></else></ternary></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="383:9" pos:end="385:63"><if pos:start="383:9" pos:end="385:63">if <condition pos:start="383:12" pos:end="383:22">(<expr pos:start="383:13" pos:end="383:21"><operator pos:start="383:13" pos:end="383:13">!</operator><name pos:start="383:14" pos:end="383:21">buf_size</name></expr>)</condition><block type="pseudo" pos:start="385:13" pos:end="385:63"><block_content pos:start="385:13" pos:end="385:63">

            <return pos:start="385:13" pos:end="385:63">return <expr pos:start="385:20" pos:end="385:62"><call pos:start="385:20" pos:end="385:62"><name pos:start="385:20" pos:end="385:34">get_best_header</name><argument_list pos:start="385:35" pos:end="385:62">(<argument pos:start="385:36" pos:end="385:38"><expr pos:start="385:36" pos:end="385:38"><name pos:start="385:36" pos:end="385:38">fpc</name></expr></argument>, <argument pos:start="385:41" pos:end="385:47"><expr pos:start="385:41" pos:end="385:47"><name pos:start="385:41" pos:end="385:47">poutbuf</name></expr></argument>, <argument pos:start="385:50" pos:end="385:61"><expr pos:start="385:50" pos:end="385:61"><name pos:start="385:50" pos:end="385:61">poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="391:1" pos:end="391:13"><name pos:start="391:1" pos:end="391:12">handle_error</name>:</label>

    <expr_stmt pos:start="393:5" pos:end="393:25"><expr pos:start="393:5" pos:end="393:24"><operator pos:start="393:5" pos:end="393:5">*</operator><name pos:start="393:6" pos:end="393:12">poutbuf</name>      <operator pos:start="393:19" pos:end="393:19">=</operator> <name pos:start="393:21" pos:end="393:24">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:22"><expr pos:start="395:5" pos:end="395:21"><operator pos:start="395:5" pos:end="395:5">*</operator><name pos:start="395:6" pos:end="395:17">poutbuf_size</name> <operator pos:start="395:19" pos:end="395:19">=</operator> <literal type="number" pos:start="395:21" pos:end="395:21">0</literal></expr>;</expr_stmt>

    <return pos:start="397:5" pos:end="397:41">return <expr pos:start="397:12" pos:end="397:40"><ternary pos:start="397:12" pos:end="397:40"><condition pos:start="397:12" pos:end="397:21"><expr pos:start="397:12" pos:end="397:19"><name pos:start="397:12" pos:end="397:19">buf_size</name></expr> ?</condition><then pos:start="397:23" pos:end="397:36"> <expr pos:start="397:23" pos:end="397:36"><name pos:start="397:23" pos:end="397:30">read_end</name> <operator pos:start="397:32" pos:end="397:32">-</operator> <name pos:start="397:34" pos:end="397:36">buf</name></expr> </then><else pos:start="397:38" pos:end="397:40">: <expr pos:start="397:40" pos:end="397:40"><literal type="number" pos:start="397:40" pos:end="397:40">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function></unit>
