<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21064.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">ff_alloc_picture</name><parameter_list pos:start="1:21" pos:end="1:65">(<parameter pos:start="1:22" pos:end="1:38"><decl pos:start="1:22" pos:end="1:38"><type pos:start="1:22" pos:end="1:38"><name pos:start="1:22" pos:end="1:35">MpegEncContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:47">Picture</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">pic</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:64">shared</name></decl></parameter>)</parameter_list><block pos:start="1:66" pos:end="137:1">{<block_content pos:start="3:5" pos:end="135:14">

    <decl_stmt pos:start="3:5" pos:end="3:60"><decl pos:start="3:5" pos:end="3:59"><type pos:start="3:5" pos:end="3:13"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:13">int</name></type> <name pos:start="3:15" pos:end="3:24">big_mb_num</name><init pos:start="3:25" pos:end="3:59">= <expr pos:start="3:27" pos:end="3:59"><name pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:27">s</name><operator pos:start="3:28" pos:end="3:29">-&gt;</operator><name pos:start="3:30" pos:end="3:38">mb_stride</name></name><operator pos:start="3:39" pos:end="3:39">*</operator><operator pos:start="3:40" pos:end="3:40">(</operator><name pos:start="3:41" pos:end="3:52"><name pos:start="3:41" pos:end="3:41">s</name><operator pos:start="3:42" pos:end="3:43">-&gt;</operator><name pos:start="3:44" pos:end="3:52">mb_height</name></name><operator pos:start="3:53" pos:end="3:53">+</operator><literal type="number" pos:start="3:54" pos:end="3:54">1</literal><operator pos:start="3:55" pos:end="3:55">)</operator> <operator pos:start="3:57" pos:end="3:57">+</operator> <literal type="number" pos:start="3:59" pos:end="3:59">1</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="3:62" pos:end="3:121">//the +1 is needed so memset(,,stride*height) does not sig11</comment>

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:27">mb_array_size</name><init pos:start="5:28" pos:end="5:54">= <expr pos:start="5:30" pos:end="5:54"><name pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:30">s</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">mb_stride</name></name><operator pos:start="5:42" pos:end="5:42">*</operator><name pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:43">s</name><operator pos:start="5:44" pos:end="5:45">-&gt;</operator><name pos:start="5:46" pos:end="5:54">mb_height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:13"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:13">int</name></type> <name pos:start="7:15" pos:end="7:27">b8_array_size</name><init pos:start="7:28" pos:end="7:56">= <expr pos:start="7:30" pos:end="7:56"><name pos:start="7:30" pos:end="7:41"><name pos:start="7:30" pos:end="7:30">s</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">b8_stride</name></name><operator pos:start="7:42" pos:end="7:42">*</operator><name pos:start="7:43" pos:end="7:54"><name pos:start="7:43" pos:end="7:43">s</name><operator pos:start="7:44" pos:end="7:45">-&gt;</operator><name pos:start="7:46" pos:end="7:54">mb_height</name></name><operator pos:start="7:55" pos:end="7:55">*</operator><literal type="number" pos:start="7:56" pos:end="7:56">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:27">b4_array_size</name><init pos:start="9:28" pos:end="9:56">= <expr pos:start="9:30" pos:end="9:56"><name pos:start="9:30" pos:end="9:41"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:41">b4_stride</name></name><operator pos:start="9:42" pos:end="9:42">*</operator><name pos:start="9:43" pos:end="9:54"><name pos:start="9:43" pos:end="9:43">s</name><operator pos:start="9:44" pos:end="9:45">-&gt;</operator><name pos:start="9:46" pos:end="9:54">mb_height</name></name><operator pos:start="9:55" pos:end="9:55">*</operator><literal type="number" pos:start="9:56" pos:end="9:56">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">r</name><init pos:start="13:10" pos:end="13:13">= <expr pos:start="13:12" pos:end="13:13"><operator pos:start="13:12" pos:end="13:12">-</operator><literal type="number" pos:start="13:13" pos:end="13:13">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="41:5"><if pos:start="17:5" pos:end="25:5">if<condition pos:start="17:7" pos:end="17:14">(<expr pos:start="17:8" pos:end="17:13"><name pos:start="17:8" pos:end="17:13">shared</name></expr>)</condition><block pos:start="17:15" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:41">

        <expr_stmt pos:start="19:9" pos:end="19:29"><expr pos:start="19:9" pos:end="19:28"><call pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:14">assert</name><argument_list pos:start="19:15" pos:end="19:28">(<argument pos:start="19:16" pos:end="19:27"><expr pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:18">pic</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:24">data</name><index pos:start="19:25" pos:end="19:27">[<expr pos:start="19:26" pos:end="19:26"><literal type="number" pos:start="19:26" pos:end="19:26">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:69"><expr pos:start="21:9" pos:end="21:68"><call pos:start="21:9" pos:end="21:68"><name pos:start="21:9" pos:end="21:14">assert</name><argument_list pos:start="21:15" pos:end="21:68">(<argument pos:start="21:16" pos:end="21:67"><expr pos:start="21:16" pos:end="21:67"><name pos:start="21:16" pos:end="21:24"><name pos:start="21:16" pos:end="21:18">pic</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:24">type</name></name> <operator pos:start="21:26" pos:end="21:27">==</operator> <literal type="number" pos:start="21:29" pos:end="21:29">0</literal> <operator pos:start="21:31" pos:end="21:32">||</operator> <name pos:start="21:34" pos:end="21:42"><name pos:start="21:34" pos:end="21:36">pic</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:42">type</name></name> <operator pos:start="21:44" pos:end="21:45">==</operator> <name pos:start="21:47" pos:end="21:67">FF_BUFFER_TYPE_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:11">pic</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:17">type</name></name><operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:40">FF_BUFFER_TYPE_SHARED</name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="25:6" pos:end="41:5">else<block pos:start="25:10" pos:end="41:5">{<block_content pos:start="27:9" pos:end="39:40">

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><call pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:14">assert</name><argument_list pos:start="27:15" pos:end="27:29">(<argument pos:start="27:16" pos:end="27:28"><expr pos:start="27:16" pos:end="27:28"><operator pos:start="27:16" pos:end="27:16">!</operator><name pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:19">pic</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:25">data</name><index pos:start="27:26" pos:end="27:28">[<expr pos:start="27:27" pos:end="27:27"><literal type="number" pos:start="27:27" pos:end="27:27">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="33:22"><if pos:start="31:9" pos:end="33:22">if <condition pos:start="31:12" pos:end="31:43">(<expr pos:start="31:13" pos:end="31:42"><call pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:30">alloc_frame_buffer</name><argument_list pos:start="31:31" pos:end="31:38">(<argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><name pos:start="31:32" pos:end="31:32">s</name></expr></argument>, <argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><name pos:start="31:35" pos:end="31:37">pic</name></expr></argument>)</argument_list></call> <operator pos:start="31:40" pos:end="31:40">&lt;</operator> <literal type="number" pos:start="31:42" pos:end="31:42">0</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:22"><block_content pos:start="33:13" pos:end="33:22">

            <return pos:start="33:13" pos:end="33:22">return <expr pos:start="33:20" pos:end="33:21"><operator pos:start="33:20" pos:end="33:20">-</operator><literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:19">linesize</name></name>  <operator pos:start="37:22" pos:end="37:22">=</operator> <name pos:start="37:24" pos:end="37:39"><name pos:start="37:24" pos:end="37:26">pic</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:36">linesize</name><index pos:start="37:37" pos:end="37:39">[<expr pos:start="37:38" pos:end="37:38"><literal type="number" pos:start="37:38" pos:end="37:38">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:40"><expr pos:start="39:9" pos:end="39:39"><name pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:21">uvlinesize</name></name><operator pos:start="39:22" pos:end="39:22">=</operator> <name pos:start="39:24" pos:end="39:39"><name pos:start="39:24" pos:end="39:26">pic</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:36">linesize</name><index pos:start="39:37" pos:end="39:39">[<expr pos:start="39:38" pos:end="39:38"><literal type="number" pos:start="39:38" pos:end="39:38">1</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="45:5" pos:end="107:5"><if pos:start="45:5" pos:end="107:5">if<condition pos:start="45:7" pos:end="45:31">(<expr pos:start="45:8" pos:end="45:30"><name pos:start="45:8" pos:end="45:24"><name pos:start="45:8" pos:end="45:10">pic</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:24">qscale_table</name></name><operator pos:start="45:25" pos:end="45:26">==</operator><name pos:start="45:27" pos:end="45:30">NULL</name></expr>)</condition><block pos:start="45:32" pos:end="107:5">{<block_content pos:start="47:9" pos:end="105:80">

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:24">(<expr pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:23">encoding</name></name></expr>)</condition> <block pos:start="47:26" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:96">

            <macro pos:start="49:13" pos:end="49:96"><name pos:start="49:13" pos:end="49:29">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="49:30" pos:end="49:96">(<argument pos:start="49:31" pos:end="49:38">s-&gt;avctx</argument>, <argument pos:start="49:41" pos:end="49:51">pic-&gt;mb_var</argument>   , <argument pos:start="49:57" pos:end="49:87">mb_array_size * sizeof(int16_t)</argument>  , <argument pos:start="49:92" pos:end="49:95">fail</argument>)</argument_list></macro>

            <macro pos:start="51:13" pos:end="51:96"><name pos:start="51:13" pos:end="51:29">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="51:30" pos:end="51:96">(<argument pos:start="51:31" pos:end="51:38">s-&gt;avctx</argument>, <argument pos:start="51:41" pos:end="51:54">pic-&gt;mc_mb_var</argument>, <argument pos:start="51:57" pos:end="51:87">mb_array_size * sizeof(int16_t)</argument>  , <argument pos:start="51:92" pos:end="51:95">fail</argument>)</argument_list></macro>

            <macro pos:start="53:13" pos:end="53:96"><name pos:start="53:13" pos:end="53:29">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="53:30" pos:end="53:96">(<argument pos:start="53:31" pos:end="53:38">s-&gt;avctx</argument>, <argument pos:start="53:41" pos:end="53:52">pic-&gt;mb_mean</argument>  , <argument pos:start="53:57" pos:end="53:87">mb_array_size * sizeof(int8_t )</argument>  , <argument pos:start="53:92" pos:end="53:95">fail</argument>)</argument_list></macro>

        </block_content>}</block></if></if_stmt>



        <macro pos:start="59:9" pos:end="59:96"><name pos:start="59:9" pos:end="59:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="59:26" pos:end="59:96">(<argument pos:start="59:27" pos:end="59:34">s-&gt;avctx</argument>, <argument pos:start="59:37" pos:end="59:53">pic-&gt;mbskip_table</argument> , <argument pos:start="59:57" pos:end="59:89">mb_array_size * sizeof(uint8_t)+<literal type="number" pos:start="59:89" pos:end="59:89">2</literal></argument>, <argument pos:start="59:92" pos:end="59:95">fail</argument>)</argument_list></macro> <comment type="line" pos:start="59:98" pos:end="59:132">//the +2 is for the slice end check</comment>

        <macro pos:start="61:9" pos:end="61:96"><name pos:start="61:9" pos:end="61:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="61:26" pos:end="61:96">(<argument pos:start="61:27" pos:end="61:34">s-&gt;avctx</argument>, <argument pos:start="61:37" pos:end="61:53">pic-&gt;qscale_table</argument> , <argument pos:start="61:57" pos:end="61:87">mb_array_size * sizeof(uint8_t)</argument>  , <argument pos:start="61:92" pos:end="61:95">fail</argument>)</argument_list></macro>

        <macro pos:start="63:9" pos:end="63:109"><name pos:start="63:9" pos:end="63:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="63:26" pos:end="63:109">(<argument pos:start="63:27" pos:end="63:34">s-&gt;avctx</argument>, <argument pos:start="63:37" pos:end="63:53">pic-&gt;mb_type_base</argument> , <argument pos:start="63:57" pos:end="63:102">(big_mb_num + s-&gt;mb_stride) * sizeof(uint32_t)</argument>, <argument pos:start="63:105" pos:end="63:108">fail</argument>)</argument_list></macro>

        <expr_stmt pos:start="65:9" pos:end="65:59"><expr pos:start="65:9" pos:end="65:58"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:11">pic</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:20">mb_type</name></name><operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:39"><name pos:start="65:23" pos:end="65:25">pic</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:39">mb_type_base</name></name> <operator pos:start="65:41" pos:end="65:41">+</operator> <literal type="number" pos:start="65:43" pos:end="65:43">2</literal><operator pos:start="65:44" pos:end="65:44">*</operator><name pos:start="65:45" pos:end="65:56"><name pos:start="65:45" pos:end="65:45">s</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:56">mb_stride</name></name><operator pos:start="65:57" pos:end="65:57">+</operator><literal type="number" pos:start="65:58" pos:end="65:58">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="95:9"><if pos:start="67:9" pos:end="81:9">if<condition pos:start="67:11" pos:end="67:37">(<expr pos:start="67:12" pos:end="67:36"><name pos:start="67:12" pos:end="67:24"><name pos:start="67:12" pos:end="67:12">s</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:24">out_format</name></name> <operator pos:start="67:26" pos:end="67:27">==</operator> <name pos:start="67:29" pos:end="67:36">FMT_H264</name></expr>)</condition><block pos:start="67:38" pos:end="81:9">{<block_content pos:start="69:13" pos:end="79:42">

            <for pos:start="69:13" pos:end="77:13">for<control pos:start="69:16" pos:end="69:30">(<init pos:start="69:17" pos:end="69:20"><expr pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:17">i</name><operator pos:start="69:18" pos:end="69:18">=</operator><literal type="number" pos:start="69:19" pos:end="69:19">0</literal></expr>;</init> <condition pos:start="69:22" pos:end="69:25"><expr pos:start="69:22" pos:end="69:24"><name pos:start="69:22" pos:end="69:22">i</name><operator pos:start="69:23" pos:end="69:23">&lt;</operator><literal type="number" pos:start="69:24" pos:end="69:24">2</literal></expr>;</condition> <incr pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:27">i</name><operator pos:start="69:28" pos:end="69:29">++</operator></expr></incr>)</control><block pos:start="69:31" pos:end="77:13">{<block_content pos:start="71:17" pos:end="75:103">

                <macro pos:start="71:17" pos:end="71:116"><name pos:start="71:17" pos:end="71:33">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="71:34" pos:end="71:116">(<argument pos:start="71:35" pos:end="71:42">s-&gt;avctx</argument>, <argument pos:start="71:45" pos:end="71:67">pic-&gt;motion_val_base[i]</argument>, <argument pos:start="71:70" pos:end="71:109"><literal type="number" pos:start="71:70" pos:end="71:70">2</literal> * (b4_array_size+<literal type="number" pos:start="71:89" pos:end="71:89">4</literal>)  * sizeof(int16_t)</argument>, <argument pos:start="71:112" pos:end="71:115">fail</argument>)</argument_list></macro>

                <expr_stmt pos:start="73:17" pos:end="73:62"><expr pos:start="73:17" pos:end="73:61"><name pos:start="73:17" pos:end="73:34"><name pos:start="73:17" pos:end="73:19">pic</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:31">motion_val</name><index pos:start="73:32" pos:end="73:34">[<expr pos:start="73:33" pos:end="73:33"><name pos:start="73:33" pos:end="73:33">i</name></expr>]</index></name><operator pos:start="73:35" pos:end="73:35">=</operator> <name pos:start="73:37" pos:end="73:59"><name pos:start="73:37" pos:end="73:39">pic</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:56">motion_val_base</name><index pos:start="73:57" pos:end="73:59">[<expr pos:start="73:58" pos:end="73:58"><name pos:start="73:58" pos:end="73:58">i</name></expr>]</index></name><operator pos:start="73:60" pos:end="73:60">+</operator><literal type="number" pos:start="73:61" pos:end="73:61">4</literal></expr>;</expr_stmt>

                <macro pos:start="75:17" pos:end="75:103"><name pos:start="75:17" pos:end="75:33">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="75:34" pos:end="75:103">(<argument pos:start="75:35" pos:end="75:42">s-&gt;avctx</argument>, <argument pos:start="75:45" pos:end="75:61">pic-&gt;ref_index[i]</argument>, <argument pos:start="75:64" pos:end="75:96"><literal type="number" pos:start="75:64" pos:end="75:64">4</literal>*mb_array_size * sizeof(uint8_t)</argument>, <argument pos:start="75:99" pos:end="75:102">fail</argument>)</argument_list></macro>

            </block_content>}</block></for>

            <expr_stmt pos:start="79:13" pos:end="79:42"><expr pos:start="79:13" pos:end="79:41"><name pos:start="79:13" pos:end="79:38"><name pos:start="79:13" pos:end="79:15">pic</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:38">motion_subsample_log2</name></name><operator pos:start="79:39" pos:end="79:39">=</operator> <literal type="number" pos:start="79:41" pos:end="79:41">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="81:10" pos:end="95:9">else if<condition pos:start="81:17" pos:end="81:115">(<expr pos:start="81:18" pos:end="81:114"><name pos:start="81:18" pos:end="81:30"><name pos:start="81:18" pos:end="81:18">s</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:30">out_format</name></name> <operator pos:start="81:32" pos:end="81:33">==</operator> <name pos:start="81:35" pos:end="81:42">FMT_H263</name> <operator pos:start="81:44" pos:end="81:45">||</operator> <name pos:start="81:47" pos:end="81:57"><name pos:start="81:47" pos:end="81:47">s</name><operator pos:start="81:48" pos:end="81:49">-&gt;</operator><name pos:start="81:50" pos:end="81:57">encoding</name></name> <operator pos:start="81:59" pos:end="81:60">||</operator> <operator pos:start="81:62" pos:end="81:62">(</operator><name pos:start="81:63" pos:end="81:77"><name pos:start="81:63" pos:end="81:63">s</name><operator pos:start="81:64" pos:end="81:65">-&gt;</operator><name pos:start="81:66" pos:end="81:70">avctx</name><operator pos:start="81:71" pos:end="81:72">-&gt;</operator><name pos:start="81:73" pos:end="81:77">debug</name></name><operator pos:start="81:78" pos:end="81:78">&amp;</operator><name pos:start="81:79" pos:end="81:89">FF_DEBUG_MV</name><operator pos:start="81:90" pos:end="81:90">)</operator> <operator pos:start="81:92" pos:end="81:93">||</operator> <operator pos:start="81:95" pos:end="81:95">(</operator><name pos:start="81:96" pos:end="81:113"><name pos:start="81:96" pos:end="81:96">s</name><operator pos:start="81:97" pos:end="81:98">-&gt;</operator><name pos:start="81:99" pos:end="81:103">avctx</name><operator pos:start="81:104" pos:end="81:105">-&gt;</operator><name pos:start="81:106" pos:end="81:113">debug_mv</name></name><operator pos:start="81:114" pos:end="81:114">)</operator></expr>)</condition><block pos:start="81:116" pos:end="95:9">{<block_content pos:start="83:13" pos:end="93:42">

            <for pos:start="83:13" pos:end="91:13">for<control pos:start="83:16" pos:end="83:30">(<init pos:start="83:17" pos:end="83:20"><expr pos:start="83:17" pos:end="83:19"><name pos:start="83:17" pos:end="83:17">i</name><operator pos:start="83:18" pos:end="83:18">=</operator><literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr>;</init> <condition pos:start="83:22" pos:end="83:25"><expr pos:start="83:22" pos:end="83:24"><name pos:start="83:22" pos:end="83:22">i</name><operator pos:start="83:23" pos:end="83:23">&lt;</operator><literal type="number" pos:start="83:24" pos:end="83:24">2</literal></expr>;</condition> <incr pos:start="83:27" pos:end="83:29"><expr pos:start="83:27" pos:end="83:29"><name pos:start="83:27" pos:end="83:27">i</name><operator pos:start="83:28" pos:end="83:29">++</operator></expr></incr>)</control><block pos:start="83:31" pos:end="91:13">{<block_content pos:start="85:17" pos:end="89:103">

                <macro pos:start="85:17" pos:end="85:115"><name pos:start="85:17" pos:end="85:33">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="85:34" pos:end="85:115">(<argument pos:start="85:35" pos:end="85:42">s-&gt;avctx</argument>, <argument pos:start="85:45" pos:end="85:67">pic-&gt;motion_val_base[i]</argument>, <argument pos:start="85:70" pos:end="85:108"><literal type="number" pos:start="85:70" pos:end="85:70">2</literal> * (b8_array_size+<literal type="number" pos:start="85:89" pos:end="85:89">4</literal>) * sizeof(int16_t)</argument>, <argument pos:start="85:111" pos:end="85:114">fail</argument>)</argument_list></macro>

                <expr_stmt pos:start="87:17" pos:end="87:62"><expr pos:start="87:17" pos:end="87:61"><name pos:start="87:17" pos:end="87:34"><name pos:start="87:17" pos:end="87:19">pic</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:31">motion_val</name><index pos:start="87:32" pos:end="87:34">[<expr pos:start="87:33" pos:end="87:33"><name pos:start="87:33" pos:end="87:33">i</name></expr>]</index></name><operator pos:start="87:35" pos:end="87:35">=</operator> <name pos:start="87:37" pos:end="87:59"><name pos:start="87:37" pos:end="87:39">pic</name><operator pos:start="87:40" pos:end="87:41">-&gt;</operator><name pos:start="87:42" pos:end="87:56">motion_val_base</name><index pos:start="87:57" pos:end="87:59">[<expr pos:start="87:58" pos:end="87:58"><name pos:start="87:58" pos:end="87:58">i</name></expr>]</index></name><operator pos:start="87:60" pos:end="87:60">+</operator><literal type="number" pos:start="87:61" pos:end="87:61">4</literal></expr>;</expr_stmt>

                <macro pos:start="89:17" pos:end="89:103"><name pos:start="89:17" pos:end="89:33">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="89:34" pos:end="89:103">(<argument pos:start="89:35" pos:end="89:42">s-&gt;avctx</argument>, <argument pos:start="89:45" pos:end="89:61">pic-&gt;ref_index[i]</argument>, <argument pos:start="89:64" pos:end="89:96"><literal type="number" pos:start="89:64" pos:end="89:64">4</literal>*mb_array_size * sizeof(uint8_t)</argument>, <argument pos:start="89:99" pos:end="89:102">fail</argument>)</argument_list></macro>

            </block_content>}</block></for>

            <expr_stmt pos:start="93:13" pos:end="93:42"><expr pos:start="93:13" pos:end="93:41"><name pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:15">pic</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:38">motion_subsample_log2</name></name><operator pos:start="93:39" pos:end="93:39">=</operator> <literal type="number" pos:start="93:41" pos:end="93:41">3</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if<condition pos:start="97:11" pos:end="97:46">(<expr pos:start="97:12" pos:end="97:45"><name pos:start="97:12" pos:end="97:26"><name pos:start="97:12" pos:end="97:12">s</name><operator pos:start="97:13" pos:end="97:14">-&gt;</operator><name pos:start="97:15" pos:end="97:19">avctx</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:26">debug</name></name><operator pos:start="97:27" pos:end="97:27">&amp;</operator><name pos:start="97:28" pos:end="97:45">FF_DEBUG_DCT_COEFF</name></expr>)</condition> <block pos:start="97:48" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:101">

            <macro pos:start="99:13" pos:end="99:101"><name pos:start="99:13" pos:end="99:29">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="99:30" pos:end="99:101">(<argument pos:start="99:31" pos:end="99:38">s-&gt;avctx</argument>, <argument pos:start="99:41" pos:end="99:54">pic-&gt;dct_coeff</argument>, <argument pos:start="99:57" pos:end="99:94"><literal type="number" pos:start="99:57" pos:end="99:58">64</literal> * mb_array_size * sizeof(DCTELEM)*<literal type="number" pos:start="99:94" pos:end="99:94">6</literal></argument>, <argument pos:start="99:97" pos:end="99:100">fail</argument>)</argument_list></macro>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:35"><expr pos:start="103:9" pos:end="103:34"><name pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:11">pic</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:20">qstride</name></name><operator pos:start="103:21" pos:end="103:21">=</operator> <name pos:start="103:23" pos:end="103:34"><name pos:start="103:23" pos:end="103:23">s</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:34">mb_stride</name></name></expr>;</expr_stmt>

        <macro pos:start="105:9" pos:end="105:80"><name pos:start="105:9" pos:end="105:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="105:26" pos:end="105:80">(<argument pos:start="105:27" pos:end="105:34">s-&gt;avctx</argument>, <argument pos:start="105:37" pos:end="105:49">pic-&gt;pan_scan</argument> , <argument pos:start="105:53" pos:end="105:73"><literal type="number" pos:start="105:53" pos:end="105:53">1</literal> * sizeof(AVPanScan)</argument>, <argument pos:start="105:76" pos:end="105:79">fail</argument>)</argument_list></macro>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="113:45">/* It might be nicer if the application would keep track of these

     * but it would require an API change. */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:85"><expr pos:start="115:5" pos:end="115:84"><call pos:start="115:5" pos:end="115:84"><name pos:start="115:5" pos:end="115:11">memmove</name><argument_list pos:start="115:12" pos:end="115:84">(<argument pos:start="115:13" pos:end="115:32"><expr pos:start="115:13" pos:end="115:32"><name pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:30">prev_pict_types</name></name><operator pos:start="115:31" pos:end="115:31">+</operator><literal type="number" pos:start="115:32" pos:end="115:32">1</literal></expr></argument>, <argument pos:start="115:35" pos:end="115:52"><expr pos:start="115:35" pos:end="115:52"><name pos:start="115:35" pos:end="115:52"><name pos:start="115:35" pos:end="115:35">s</name><operator pos:start="115:36" pos:end="115:37">-&gt;</operator><name pos:start="115:38" pos:end="115:52">prev_pict_types</name></name></expr></argument>, <argument pos:start="115:55" pos:end="115:83"><expr pos:start="115:55" pos:end="115:83"><name pos:start="115:55" pos:end="115:81">PREV_PICT_TYPES_BUFFER_SIZE</name><operator pos:start="115:82" pos:end="115:82">-</operator><literal type="number" pos:start="115:83" pos:end="115:83">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:74"><expr pos:start="117:5" pos:end="117:73"><name pos:start="117:5" pos:end="117:25"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:22">prev_pict_types</name><index pos:start="117:23" pos:end="117:25">[<expr pos:start="117:24" pos:end="117:24"><literal type="number" pos:start="117:24" pos:end="117:24">0</literal></expr>]</index></name><operator pos:start="117:26" pos:end="117:26">=</operator> <ternary pos:start="117:28" pos:end="117:73"><condition pos:start="117:28" pos:end="117:40"><expr pos:start="117:28" pos:end="117:38"><name pos:start="117:28" pos:end="117:38"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:38">dropable</name></name></expr> ?</condition><then pos:start="117:42" pos:end="117:58"> <expr pos:start="117:42" pos:end="117:58"><name pos:start="117:42" pos:end="117:58">AV_PICTURE_TYPE_B</name></expr> </then><else pos:start="117:60" pos:end="117:73">: <expr pos:start="117:62" pos:end="117:73"><name pos:start="117:62" pos:end="117:73"><name pos:start="117:62" pos:end="117:62">s</name><operator pos:start="117:63" pos:end="117:64">-&gt;</operator><name pos:start="117:65" pos:end="117:73">pict_type</name></name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="121:26"><if pos:start="119:5" pos:end="121:26">if<condition pos:start="119:7" pos:end="119:99">(<expr pos:start="119:8" pos:end="119:98"><name pos:start="119:8" pos:end="119:15"><name pos:start="119:8" pos:end="119:10">pic</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:15">age</name></name> <operator pos:start="119:17" pos:end="119:17">&lt;</operator> <name pos:start="119:19" pos:end="119:45">PREV_PICT_TYPES_BUFFER_SIZE</name> <operator pos:start="119:47" pos:end="119:48">&amp;&amp;</operator> <name pos:start="119:50" pos:end="119:77"><name pos:start="119:50" pos:end="119:50">s</name><operator pos:start="119:51" pos:end="119:52">-&gt;</operator><name pos:start="119:53" pos:end="119:67">prev_pict_types</name><index pos:start="119:68" pos:end="119:77">[<expr pos:start="119:69" pos:end="119:76"><name pos:start="119:69" pos:end="119:76"><name pos:start="119:69" pos:end="119:71">pic</name><operator pos:start="119:72" pos:end="119:73">-&gt;</operator><name pos:start="119:74" pos:end="119:76">age</name></name></expr>]</index></name> <operator pos:start="119:79" pos:end="119:80">==</operator> <name pos:start="119:82" pos:end="119:98">AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:26"><block_content pos:start="121:9" pos:end="121:26">

        <expr_stmt pos:start="121:9" pos:end="121:26"><expr pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:11">pic</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:16">age</name></name><operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:25">INT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="121:28" pos:end="121:124">// Skipped MBs in B-frames are quite rare in MPEG-1/2 and it is a bit tricky to skip them anyway.</comment>

    <expr_stmt pos:start="123:5" pos:end="123:23"><expr pos:start="123:5" pos:end="123:22"><name pos:start="123:5" pos:end="123:15"><name pos:start="123:5" pos:end="123:7">pic</name><operator pos:start="123:8" pos:end="123:9">-&gt;</operator><name pos:start="123:10" pos:end="123:15">owner2</name></name> <operator pos:start="123:17" pos:end="123:17">=</operator> <name pos:start="123:19" pos:end="123:22">NULL</name></expr>;</expr_stmt>



    <return pos:start="127:5" pos:end="127:13">return <expr pos:start="127:12" pos:end="127:12"><literal type="number" pos:start="127:12" pos:end="127:12">0</literal></expr>;</return>

<label pos:start="129:1" pos:end="129:5"><name pos:start="129:1" pos:end="129:4">fail</name>:</label> <comment type="line" pos:start="129:7" pos:end="129:39">//for the FF_ALLOCZ_OR_GOTO macro</comment>

    <if_stmt pos:start="131:5" pos:end="133:34"><if pos:start="131:5" pos:end="133:34">if<condition pos:start="131:7" pos:end="131:12">(<expr pos:start="131:8" pos:end="131:11"><name pos:start="131:8" pos:end="131:8">r</name><operator pos:start="131:9" pos:end="131:10">&gt;=</operator><literal type="number" pos:start="131:11" pos:end="131:11">0</literal></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:34"><block_content pos:start="133:9" pos:end="133:34">

        <expr_stmt pos:start="133:9" pos:end="133:34"><expr pos:start="133:9" pos:end="133:33"><call pos:start="133:9" pos:end="133:33"><name pos:start="133:9" pos:end="133:25">free_frame_buffer</name><argument_list pos:start="133:26" pos:end="133:33">(<argument pos:start="133:27" pos:end="133:27"><expr pos:start="133:27" pos:end="133:27"><name pos:start="133:27" pos:end="133:27">s</name></expr></argument>, <argument pos:start="133:30" pos:end="133:32"><expr pos:start="133:30" pos:end="133:32"><name pos:start="133:30" pos:end="133:32">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="135:5" pos:end="135:14">return <expr pos:start="135:12" pos:end="135:13"><operator pos:start="135:12" pos:end="135:12">-</operator><literal type="number" pos:start="135:13" pos:end="135:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
