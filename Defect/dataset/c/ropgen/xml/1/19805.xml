<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19805.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">save_xbzrle_page</name><parameter_list pos:start="1:28" pos:end="5:73">(<parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:36">QEMUFile</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">f</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:62"><decl pos:start="1:42" pos:end="1:62"><type pos:start="1:42" pos:end="1:62"><name pos:start="1:42" pos:end="1:48">uint8_t</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:62">current_data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:51"><decl pos:start="3:29" pos:end="3:51"><type pos:start="3:29" pos:end="3:51"><name pos:start="3:29" pos:end="3:38">ram_addr_t</name></type> <name pos:start="3:40" pos:end="3:51">current_addr</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:61">RAMBlock</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:68">block</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:45"><decl pos:start="5:29" pos:end="5:45"><type pos:start="5:29" pos:end="5:45"><name pos:start="5:29" pos:end="5:38">ram_addr_t</name></type> <name pos:start="5:40" pos:end="5:45">offset</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:55"><decl pos:start="5:48" pos:end="5:55"><type pos:start="5:48" pos:end="5:55"><name pos:start="5:48" pos:end="5:50">int</name></type> <name pos:start="5:52" pos:end="5:55">cont</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:72"><decl pos:start="5:58" pos:end="5:72"><type pos:start="5:58" pos:end="5:72"><name pos:start="5:58" pos:end="5:61">bool</name></type> <name pos:start="5:63" pos:end="5:72">last_stage</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="105:1">{<block_content pos:start="9:5" pos:end="103:22">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">encoded_len</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>, <decl pos:start="9:26" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:26" pos:end="9:35">bytes_sent</name> <init pos:start="9:37" pos:end="9:40">= <expr pos:start="9:39" pos:end="9:40"><operator pos:start="9:39" pos:end="9:39">-</operator><literal type="number" pos:start="9:40" pos:end="9:40">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:29">prev_cached_page</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="31:5"><if pos:start="15:5" pos:end="31:5">if <condition pos:start="15:8" pos:end="15:53">(<expr pos:start="15:9" pos:end="15:52"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:52"><name pos:start="15:10" pos:end="15:24">cache_is_cached</name><argument_list pos:start="15:25" pos:end="15:52">(<argument pos:start="15:26" pos:end="15:37"><expr pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:31">XBZRLE</name><operator pos:start="15:32" pos:end="15:32">.</operator><name pos:start="15:33" pos:end="15:37">cache</name></name></expr></argument>, <argument pos:start="15:40" pos:end="15:51"><expr pos:start="15:40" pos:end="15:51"><name pos:start="15:40" pos:end="15:51">current_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:55" pos:end="31:5">{<block_content pos:start="17:9" pos:end="29:18">

        <if_stmt pos:start="17:9" pos:end="25:9"><if pos:start="17:9" pos:end="25:9">if <condition pos:start="17:12" pos:end="17:24">(<expr pos:start="17:13" pos:end="17:23"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:23">last_stage</name></expr>)</condition> <block pos:start="17:26" pos:end="25:9">{<block_content pos:start="19:13" pos:end="23:13">

            <if_stmt pos:start="19:13" pos:end="23:13"><if pos:start="19:13" pos:end="23:13">if <condition pos:start="19:16" pos:end="19:77">(<expr pos:start="19:17" pos:end="19:76"><call pos:start="19:17" pos:end="19:70"><name pos:start="19:17" pos:end="19:28">cache_insert</name><argument_list pos:start="19:29" pos:end="19:70">(<argument pos:start="19:30" pos:end="19:41"><expr pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:35">XBZRLE</name><operator pos:start="19:36" pos:end="19:36">.</operator><name pos:start="19:37" pos:end="19:41">cache</name></name></expr></argument>, <argument pos:start="19:44" pos:end="19:55"><expr pos:start="19:44" pos:end="19:55"><name pos:start="19:44" pos:end="19:55">current_addr</name></expr></argument>, <argument pos:start="19:58" pos:end="19:69"><expr pos:start="19:58" pos:end="19:69"><name pos:start="19:58" pos:end="19:69">current_data</name></expr></argument>)</argument_list></call> <operator pos:start="19:72" pos:end="19:73">==</operator> <operator pos:start="19:75" pos:end="19:75">-</operator><literal type="number" pos:start="19:76" pos:end="19:76">1</literal></expr>)</condition> <block pos:start="19:79" pos:end="23:13">{<block_content pos:start="21:17" pos:end="21:26">

                <return pos:start="21:17" pos:end="21:26">return <expr pos:start="21:24" pos:end="21:25"><operator pos:start="21:24" pos:end="21:24">-</operator><literal type="number" pos:start="21:25" pos:end="21:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:17">acct_info</name><operator pos:start="27:18" pos:end="27:18">.</operator><name pos:start="27:19" pos:end="27:35">xbzrle_cache_miss</name></name><operator pos:start="27:36" pos:end="27:37">++</operator></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:67"><expr pos:start="35:5" pos:end="35:66"><name pos:start="35:5" pos:end="35:20">prev_cached_page</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:66"><name pos:start="35:24" pos:end="35:38">get_cached_data</name><argument_list pos:start="35:39" pos:end="35:66">(<argument pos:start="35:40" pos:end="35:51"><expr pos:start="35:40" pos:end="35:51"><name pos:start="35:40" pos:end="35:51"><name pos:start="35:40" pos:end="35:45">XBZRLE</name><operator pos:start="35:46" pos:end="35:46">.</operator><name pos:start="35:47" pos:end="35:51">cache</name></name></expr></argument>, <argument pos:start="35:54" pos:end="35:65"><expr pos:start="35:54" pos:end="35:65"><name pos:start="35:54" pos:end="35:65">current_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:41">/* save current buffer into memory */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:63"><expr pos:start="41:5" pos:end="41:62"><call pos:start="41:5" pos:end="41:62"><name pos:start="41:5" pos:end="41:10">memcpy</name><argument_list pos:start="41:11" pos:end="41:62">(<argument pos:start="41:12" pos:end="41:29"><expr pos:start="41:12" pos:end="41:29"><name pos:start="41:12" pos:end="41:29"><name pos:start="41:12" pos:end="41:17">XBZRLE</name><operator pos:start="41:18" pos:end="41:18">.</operator><name pos:start="41:19" pos:end="41:29">current_buf</name></name></expr></argument>, <argument pos:start="41:32" pos:end="41:43"><expr pos:start="41:32" pos:end="41:43"><name pos:start="41:32" pos:end="41:43">current_data</name></expr></argument>, <argument pos:start="41:46" pos:end="41:61"><expr pos:start="41:46" pos:end="41:61"><name pos:start="41:46" pos:end="41:61">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:51">/* XBZRLE encoding (if there is no overflow) */</comment>

    <expr_stmt pos:start="47:5" pos:end="51:57"><expr pos:start="47:5" pos:end="51:56"><name pos:start="47:5" pos:end="47:15">encoded_len</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="51:56"><name pos:start="47:19" pos:end="47:38">xbzrle_encode_buffer</name><argument_list pos:start="47:39" pos:end="51:56">(<argument pos:start="47:40" pos:end="47:55"><expr pos:start="47:40" pos:end="47:55"><name pos:start="47:40" pos:end="47:55">prev_cached_page</name></expr></argument>, <argument pos:start="47:58" pos:end="47:75"><expr pos:start="47:58" pos:end="47:75"><name pos:start="47:58" pos:end="47:75"><name pos:start="47:58" pos:end="47:63">XBZRLE</name><operator pos:start="47:64" pos:end="47:64">.</operator><name pos:start="47:65" pos:end="47:75">current_buf</name></name></expr></argument>,

                                       <argument pos:start="49:40" pos:end="49:55"><expr pos:start="49:40" pos:end="49:55"><name pos:start="49:40" pos:end="49:55">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="49:58" pos:end="49:75"><expr pos:start="49:58" pos:end="49:75"><name pos:start="49:58" pos:end="49:75"><name pos:start="49:58" pos:end="49:63">XBZRLE</name><operator pos:start="49:64" pos:end="49:64">.</operator><name pos:start="49:65" pos:end="49:75">encoded_buf</name></name></expr></argument>,

                                       <argument pos:start="51:40" pos:end="51:55"><expr pos:start="51:40" pos:end="51:55"><name pos:start="51:40" pos:end="51:55">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="71:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:25">(<expr pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:19">encoded_len</name> <operator pos:start="53:21" pos:end="53:22">==</operator> <literal type="number" pos:start="53:24" pos:end="53:24">0</literal></expr>)</condition> <block pos:start="53:27" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:17">

        <expr_stmt pos:start="55:9" pos:end="55:46"><expr pos:start="55:9" pos:end="55:45"><call pos:start="55:9" pos:end="55:45"><name pos:start="55:9" pos:end="55:15">DPRINTF</name><argument_list pos:start="55:16" pos:end="55:45">(<argument pos:start="55:17" pos:end="55:44"><expr pos:start="55:17" pos:end="55:44"><literal type="string" pos:start="55:17" pos:end="55:44">"Skipping unmodified page\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:17">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="71:5">else if <condition pos:start="59:15" pos:end="59:33">(<expr pos:start="59:16" pos:end="59:32"><name pos:start="59:16" pos:end="59:26">encoded_len</name> <operator pos:start="59:28" pos:end="59:29">==</operator> <operator pos:start="59:31" pos:end="59:31">-</operator><literal type="number" pos:start="59:32" pos:end="59:32">1</literal></expr>)</condition> <block pos:start="59:35" pos:end="71:5">{<block_content pos:start="61:9" pos:end="69:18">

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><call pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:15">DPRINTF</name><argument_list pos:start="61:16" pos:end="61:29">(<argument pos:start="61:17" pos:end="61:28"><expr pos:start="61:17" pos:end="61:28"><literal type="string" pos:start="61:17" pos:end="61:28">"Overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:17">acct_info</name><operator pos:start="63:18" pos:end="63:18">.</operator><name pos:start="63:19" pos:end="63:34">xbzrle_overflows</name></name><operator pos:start="63:35" pos:end="63:36">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:38">/* update data in the cache */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:65"><expr pos:start="67:9" pos:end="67:64"><call pos:start="67:9" pos:end="67:64"><name pos:start="67:9" pos:end="67:14">memcpy</name><argument_list pos:start="67:15" pos:end="67:64">(<argument pos:start="67:16" pos:end="67:31"><expr pos:start="67:16" pos:end="67:31"><name pos:start="67:16" pos:end="67:31">prev_cached_page</name></expr></argument>, <argument pos:start="67:34" pos:end="67:45"><expr pos:start="67:34" pos:end="67:45"><name pos:start="67:34" pos:end="67:45">current_data</name></expr></argument>, <argument pos:start="67:48" pos:end="67:63"><expr pos:start="67:48" pos:end="67:63"><name pos:start="67:48" pos:end="67:63">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:80">/* we need to update the data in the cache, in order to get the same data */</comment>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:20">(<expr pos:start="77:9" pos:end="77:19"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:19">last_stage</name></expr>)</condition> <block pos:start="77:22" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:71">

        <expr_stmt pos:start="79:9" pos:end="79:71"><expr pos:start="79:9" pos:end="79:70"><call pos:start="79:9" pos:end="79:70"><name pos:start="79:9" pos:end="79:14">memcpy</name><argument_list pos:start="79:15" pos:end="79:70">(<argument pos:start="79:16" pos:end="79:31"><expr pos:start="79:16" pos:end="79:31"><name pos:start="79:16" pos:end="79:31">prev_cached_page</name></expr></argument>, <argument pos:start="79:34" pos:end="79:51"><expr pos:start="79:34" pos:end="79:51"><name pos:start="79:34" pos:end="79:51"><name pos:start="79:34" pos:end="79:39">XBZRLE</name><operator pos:start="79:40" pos:end="79:40">.</operator><name pos:start="79:41" pos:end="79:51">current_buf</name></name></expr></argument>, <argument pos:start="79:54" pos:end="79:69"><expr pos:start="79:54" pos:end="79:69"><name pos:start="79:54" pos:end="79:69">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:43">/* Send XBZRLE based compressed page */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:78"><expr pos:start="87:5" pos:end="87:77"><name pos:start="87:5" pos:end="87:14">bytes_sent</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:77"><name pos:start="87:18" pos:end="87:31">save_block_hdr</name><argument_list pos:start="87:32" pos:end="87:77">(<argument pos:start="87:33" pos:end="87:33"><expr pos:start="87:33" pos:end="87:33"><name pos:start="87:33" pos:end="87:33">f</name></expr></argument>, <argument pos:start="87:36" pos:end="87:40"><expr pos:start="87:36" pos:end="87:40"><name pos:start="87:36" pos:end="87:40">block</name></expr></argument>, <argument pos:start="87:43" pos:end="87:48"><expr pos:start="87:43" pos:end="87:48"><name pos:start="87:43" pos:end="87:48">offset</name></expr></argument>, <argument pos:start="87:51" pos:end="87:54"><expr pos:start="87:51" pos:end="87:54"><name pos:start="87:51" pos:end="87:54">cont</name></expr></argument>, <argument pos:start="87:57" pos:end="87:76"><expr pos:start="87:57" pos:end="87:76"><name pos:start="87:57" pos:end="87:76">RAM_SAVE_FLAG_XBZRLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:43"><expr pos:start="89:5" pos:end="89:42"><call pos:start="89:5" pos:end="89:42"><name pos:start="89:5" pos:end="89:17">qemu_put_byte</name><argument_list pos:start="89:18" pos:end="89:42">(<argument pos:start="89:19" pos:end="89:19"><expr pos:start="89:19" pos:end="89:19"><name pos:start="89:19" pos:end="89:19">f</name></expr></argument>, <argument pos:start="89:22" pos:end="89:41"><expr pos:start="89:22" pos:end="89:41"><name pos:start="89:22" pos:end="89:41">ENCODING_FLAG_XBZRLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:34"><expr pos:start="91:5" pos:end="91:33"><call pos:start="91:5" pos:end="91:33"><name pos:start="91:5" pos:end="91:17">qemu_put_be16</name><argument_list pos:start="91:18" pos:end="91:33">(<argument pos:start="91:19" pos:end="91:19"><expr pos:start="91:19" pos:end="91:19"><name pos:start="91:19" pos:end="91:19">f</name></expr></argument>, <argument pos:start="91:22" pos:end="91:32"><expr pos:start="91:22" pos:end="91:32"><name pos:start="91:22" pos:end="91:32">encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:56"><expr pos:start="93:5" pos:end="93:55"><call pos:start="93:5" pos:end="93:55"><name pos:start="93:5" pos:end="93:19">qemu_put_buffer</name><argument_list pos:start="93:20" pos:end="93:55">(<argument pos:start="93:21" pos:end="93:21"><expr pos:start="93:21" pos:end="93:21"><name pos:start="93:21" pos:end="93:21">f</name></expr></argument>, <argument pos:start="93:24" pos:end="93:41"><expr pos:start="93:24" pos:end="93:41"><name pos:start="93:24" pos:end="93:41"><name pos:start="93:24" pos:end="93:29">XBZRLE</name><operator pos:start="93:30" pos:end="93:30">.</operator><name pos:start="93:31" pos:end="93:41">encoded_buf</name></name></expr></argument>, <argument pos:start="93:44" pos:end="93:54"><expr pos:start="93:44" pos:end="93:54"><name pos:start="93:44" pos:end="93:54">encoded_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:38"><expr pos:start="95:5" pos:end="95:37"><name pos:start="95:5" pos:end="95:14">bytes_sent</name> <operator pos:start="95:16" pos:end="95:17">+=</operator> <name pos:start="95:19" pos:end="95:29">encoded_len</name> <operator pos:start="95:31" pos:end="95:31">+</operator> <literal type="number" pos:start="95:33" pos:end="95:35">1</literal> <operator pos:start="95:35" pos:end="95:35">+</operator> <literal type="number" pos:start="95:37" pos:end="95:37">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><name pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:13">acct_info</name><operator pos:start="97:14" pos:end="97:14">.</operator><name pos:start="97:15" pos:end="97:26">xbzrle_pages</name></name><operator pos:start="97:27" pos:end="97:28">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:13">acct_info</name><operator pos:start="99:14" pos:end="99:14">.</operator><name pos:start="99:15" pos:end="99:26">xbzrle_bytes</name></name> <operator pos:start="99:28" pos:end="99:29">+=</operator> <name pos:start="99:31" pos:end="99:40">bytes_sent</name></expr>;</expr_stmt>



    <return pos:start="103:5" pos:end="103:22">return <expr pos:start="103:12" pos:end="103:21"><name pos:start="103:12" pos:end="103:21">bytes_sent</name></expr>;</return>

</block_content>}</block></function>
</unit>
