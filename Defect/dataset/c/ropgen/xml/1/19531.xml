<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19531.c" pos:tabs="8"><function pos:start="1:1" pos:end="52:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">qmp_transaction</name><parameter_list pos:start="1:21" pos:end="1:67">(<parameter pos:start="1:22" pos:end="1:52"><decl pos:start="1:22" pos:end="1:52"><type pos:start="1:22" pos:end="1:52"><name pos:start="1:22" pos:end="1:42">TransactionActionList</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:52">dev_list</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:59">Error</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier><modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">errp</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="52:1">{<block_content pos:start="3:5" pos:end="51:5">
    <decl_stmt pos:start="3:5" pos:end="3:48"><decl pos:start="3:5" pos:end="3:47"><type pos:start="3:5" pos:end="3:27"><name pos:start="3:5" pos:end="3:25">TransactionActionList</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:36">dev_entry</name> <init pos:start="3:38" pos:end="3:47">= <expr pos:start="3:40" pos:end="3:47"><name pos:start="3:40" pos:end="3:47">dev_list</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:38"><decl pos:start="4:5" pos:end="4:30"><type pos:start="4:5" pos:end="4:25"><name pos:start="4:5" pos:end="4:23">BlkTransactionState</name> <modifier pos:start="4:25" pos:end="4:25">*</modifier></type><name pos:start="4:26" pos:end="4:30">state</name></decl>, <decl pos:start="4:33" pos:end="4:37"><type ref="prev" pos:start="4:5" pos:end="4:25"><modifier pos:start="4:33" pos:end="4:33">*</modifier></type><name pos:start="4:34" pos:end="4:37">next</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>
    <macro pos:start="6:5" pos:end="6:56"><name pos:start="6:5" pos:end="6:17">QSIMPLEQ_HEAD</name><argument_list pos:start="6:18" pos:end="6:56">(<argument pos:start="6:19" pos:end="6:34">snap_bdrv_states</argument>, <argument pos:start="6:37" pos:end="6:55">BlkTransactionState</argument>)</argument_list></macro> <expr_stmt pos:start="6:58" pos:end="6:74"><expr pos:start="6:58" pos:end="6:73"><name pos:start="6:58" pos:end="6:73">snap_bdrv_states</name></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:37"><expr pos:start="7:5" pos:end="7:36"><call pos:start="7:5" pos:end="7:36"><name pos:start="7:5" pos:end="7:17">QSIMPLEQ_INIT</name><argument_list pos:start="7:18" pos:end="7:36">(<argument pos:start="7:19" pos:end="7:35"><expr pos:start="7:19" pos:end="7:35"><operator pos:start="7:19" pos:end="7:19">&amp;</operator><name pos:start="7:20" pos:end="7:35">snap_bdrv_states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:44">/* drain all i/o before any snapshots */</comment>
    <expr_stmt pos:start="9:5" pos:end="9:21"><expr pos:start="9:5" pos:end="9:20"><call pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">bdrv_drain_all</name><argument_list pos:start="9:19" pos:end="9:20">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="10:5" pos:end="10:75">/* We don't do anything in this loop that commits us to the snapshot */</comment>
    <while pos:start="11:5" pos:end="27:5">while <condition pos:start="11:11" pos:end="11:29">(<expr pos:start="11:12" pos:end="11:28"><name pos:start="11:12" pos:end="11:15">NULL</name> <operator pos:start="11:17" pos:end="11:18">!=</operator> <name pos:start="11:20" pos:end="11:28">dev_entry</name></expr>)</condition> <block pos:start="11:31" pos:end="27:5">{<block_content pos:start="12:9" pos:end="26:9">
        <decl_stmt pos:start="12:9" pos:end="12:43"><decl pos:start="12:9" pos:end="12:42"><type pos:start="12:9" pos:end="12:27"><name pos:start="12:9" pos:end="12:25">TransactionAction</name> <modifier pos:start="12:27" pos:end="12:27">*</modifier></type><name pos:start="12:28" pos:end="12:35">dev_info</name> <init pos:start="12:37" pos:end="12:42">= <expr pos:start="12:39" pos:end="12:42"><name pos:start="12:39" pos:end="12:42">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="13:9" pos:end="13:33"><decl pos:start="13:9" pos:end="13:32"><type pos:start="13:9" pos:end="13:29"><specifier pos:start="13:9" pos:end="13:13">const</specifier> <name pos:start="13:15" pos:end="13:27">BdrvActionOps</name> <modifier pos:start="13:29" pos:end="13:29">*</modifier></type><name pos:start="13:30" pos:end="13:32">ops</name></decl>;</decl_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:36"><expr pos:start="14:9" pos:end="14:35"><name pos:start="14:9" pos:end="14:16">dev_info</name> <operator pos:start="14:18" pos:end="14:18">=</operator> <name pos:start="14:20" pos:end="14:35"><name pos:start="14:20" pos:end="14:28">dev_entry</name><operator pos:start="14:29" pos:end="14:30">-&gt;</operator><name pos:start="14:31" pos:end="14:35">value</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:36"><expr pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:17">dev_entry</name> <operator pos:start="15:19" pos:end="15:19">=</operator> <name pos:start="15:21" pos:end="15:35"><name pos:start="15:21" pos:end="15:29">dev_entry</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:35">next</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:53"><expr pos:start="16:9" pos:end="16:52"><call pos:start="16:9" pos:end="16:52"><name pos:start="16:9" pos:end="16:14">assert</name><argument_list pos:start="16:15" pos:end="16:52">(<argument pos:start="16:16" pos:end="16:51"><expr pos:start="16:16" pos:end="16:51"><name pos:start="16:16" pos:end="16:29"><name pos:start="16:16" pos:end="16:23">dev_info</name><operator pos:start="16:24" pos:end="16:25">-&gt;</operator><name pos:start="16:26" pos:end="16:29">kind</name></name> <operator pos:start="16:31" pos:end="16:31">&lt;</operator> <call pos:start="16:33" pos:end="16:51"><name pos:start="16:33" pos:end="16:42">ARRAY_SIZE</name><argument_list pos:start="16:43" pos:end="16:51">(<argument pos:start="16:44" pos:end="16:50"><expr pos:start="16:44" pos:end="16:50"><name pos:start="16:44" pos:end="16:50">actions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:39"><expr pos:start="17:9" pos:end="17:38"><name pos:start="17:9" pos:end="17:11">ops</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <operator pos:start="17:15" pos:end="17:15">&amp;</operator><name pos:start="17:16" pos:end="17:38"><name pos:start="17:16" pos:end="17:22">actions</name><index pos:start="17:23" pos:end="17:38">[<expr pos:start="17:24" pos:end="17:37"><name pos:start="17:24" pos:end="17:37"><name pos:start="17:24" pos:end="17:31">dev_info</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:37">kind</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:46"><expr pos:start="18:9" pos:end="18:45"><name pos:start="18:9" pos:end="18:13">state</name> <operator pos:start="18:15" pos:end="18:15">=</operator> <call pos:start="18:17" pos:end="18:45"><name pos:start="18:17" pos:end="18:25">g_malloc0</name><argument_list pos:start="18:26" pos:end="18:45">(<argument pos:start="18:27" pos:end="18:44"><expr pos:start="18:27" pos:end="18:44"><name pos:start="18:27" pos:end="18:44"><name pos:start="18:27" pos:end="18:29">ops</name><operator pos:start="18:30" pos:end="18:31">-&gt;</operator><name pos:start="18:32" pos:end="18:44">instance_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="19:9" pos:end="19:25"><expr pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:13">state</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:18">ops</name></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:24">ops</name></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="20:33"><expr pos:start="20:9" pos:end="20:32"><name pos:start="20:9" pos:end="20:21"><name pos:start="20:9" pos:end="20:13">state</name><operator pos:start="20:14" pos:end="20:15">-&gt;</operator><name pos:start="20:16" pos:end="20:21">action</name></name> <operator pos:start="20:23" pos:end="20:23">=</operator> <name pos:start="20:25" pos:end="20:32">dev_info</name></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="21:62"><expr pos:start="21:9" pos:end="21:61"><call pos:start="21:9" pos:end="21:61"><name pos:start="21:9" pos:end="21:28">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="21:29" pos:end="21:61">(<argument pos:start="21:30" pos:end="21:46"><expr pos:start="21:30" pos:end="21:46"><operator pos:start="21:30" pos:end="21:30">&amp;</operator><name pos:start="21:31" pos:end="21:46">snap_bdrv_states</name></expr></argument>, <argument pos:start="21:49" pos:end="21:53"><expr pos:start="21:49" pos:end="21:53"><name pos:start="21:49" pos:end="21:53">state</name></expr></argument>, <argument pos:start="21:56" pos:end="21:60"><expr pos:start="21:56" pos:end="21:60"><name pos:start="21:56" pos:end="21:60">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:47"><expr pos:start="22:9" pos:end="22:46"><call pos:start="22:9" pos:end="22:46"><name pos:start="22:9" pos:end="22:27"><name pos:start="22:9" pos:end="22:13">state</name><operator pos:start="22:14" pos:end="22:15">-&gt;</operator><name pos:start="22:16" pos:end="22:18">ops</name><operator pos:start="22:19" pos:end="22:20">-&gt;</operator><name pos:start="22:21" pos:end="22:27">prepare</name></name><argument_list pos:start="22:28" pos:end="22:46">(<argument pos:start="22:29" pos:end="22:33"><expr pos:start="22:29" pos:end="22:33"><name pos:start="22:29" pos:end="22:33">state</name></expr></argument>, <argument pos:start="22:36" pos:end="22:45"><expr pos:start="22:36" pos:end="22:45"><operator pos:start="22:36" pos:end="22:36">&amp;</operator><name pos:start="22:37" pos:end="22:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="23:9" pos:end="26:9"><if pos:start="23:9" pos:end="26:9">if <condition pos:start="23:12" pos:end="23:37">(<expr pos:start="23:13" pos:end="23:36"><call pos:start="23:13" pos:end="23:36"><name pos:start="23:13" pos:end="23:24">error_is_set</name><argument_list pos:start="23:25" pos:end="23:36">(<argument pos:start="23:26" pos:end="23:35"><expr pos:start="23:26" pos:end="23:35"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:35">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:39" pos:end="26:9">{<block_content pos:start="24:13" pos:end="25:33">
            <expr_stmt pos:start="24:13" pos:end="24:45"><expr pos:start="24:13" pos:end="24:44"><call pos:start="24:13" pos:end="24:44"><name pos:start="24:13" pos:end="24:27">error_propagate</name><argument_list pos:start="24:28" pos:end="24:44">(<argument pos:start="24:29" pos:end="24:32"><expr pos:start="24:29" pos:end="24:32"><name pos:start="24:29" pos:end="24:32">errp</name></expr></argument>, <argument pos:start="24:35" pos:end="24:43"><expr pos:start="24:35" pos:end="24:43"><name pos:start="24:35" pos:end="24:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto pos:start="25:13" pos:end="25:33">goto <name pos:start="25:18" pos:end="25:32">delete_and_fail</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <macro pos:start="28:5" pos:end="28:53"><name pos:start="28:5" pos:end="28:20">QSIMPLEQ_FOREACH</name><argument_list pos:start="28:21" pos:end="28:53">(<argument pos:start="28:22" pos:end="28:26">state</argument>, <argument pos:start="28:29" pos:end="28:45">&amp;snap_bdrv_states</argument>, <argument pos:start="28:48" pos:end="28:52">entry</argument>)</argument_list></macro> <block pos:start="28:55" pos:end="32:5">{<block_content pos:start="29:9" pos:end="31:9">
        <if_stmt pos:start="29:9" pos:end="31:9"><if pos:start="29:9" pos:end="31:9">if <condition pos:start="29:12" pos:end="29:31">(<expr pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:17">state</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:22">ops</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:30">commit</name></name></expr>)</condition> <block pos:start="29:33" pos:end="31:9">{<block_content pos:start="30:13" pos:end="30:38">
            <expr_stmt pos:start="30:13" pos:end="30:38"><expr pos:start="30:13" pos:end="30:37"><call pos:start="30:13" pos:end="30:37"><name pos:start="30:13" pos:end="30:30"><name pos:start="30:13" pos:end="30:17">state</name><operator pos:start="30:18" pos:end="30:19">-&gt;</operator><name pos:start="30:20" pos:end="30:22">ops</name><operator pos:start="30:23" pos:end="30:24">-&gt;</operator><name pos:start="30:25" pos:end="30:30">commit</name></name><argument_list pos:start="30:31" pos:end="30:37">(<argument pos:start="30:32" pos:end="30:36"><expr pos:start="30:32" pos:end="30:36"><name pos:start="30:32" pos:end="30:36">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <comment type="block" pos:start="33:5" pos:end="33:17">/* success */</comment>
    <goto pos:start="34:5" pos:end="34:14">goto <name pos:start="34:10" pos:end="34:13">exit</name>;</goto>
<label pos:start="35:1" pos:end="35:16"><name pos:start="35:1" pos:end="35:15">delete_and_fail</name>:</label>
    <comment type="block" pos:start="36:5" pos:end="39:6">/*
    * failure, and it is all-or-none; abandon each new bs, and keep using
    * the original bs for all images
    */</comment>
    <macro pos:start="40:5" pos:end="40:53"><name pos:start="40:5" pos:end="40:20">QSIMPLEQ_FOREACH</name><argument_list pos:start="40:21" pos:end="40:53">(<argument pos:start="40:22" pos:end="40:26">state</argument>, <argument pos:start="40:29" pos:end="40:45">&amp;snap_bdrv_states</argument>, <argument pos:start="40:48" pos:end="40:52">entry</argument>)</argument_list></macro> <block pos:start="40:55" pos:end="44:5">{<block_content pos:start="41:9" pos:end="43:9">
        <if_stmt pos:start="41:9" pos:end="43:9"><if pos:start="41:9" pos:end="43:9">if <condition pos:start="41:12" pos:end="41:30">(<expr pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:17">state</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:22">ops</name><operator pos:start="41:23" pos:end="41:24">-&gt;</operator><name pos:start="41:25" pos:end="41:29">abort</name></name></expr>)</condition> <block pos:start="41:32" pos:end="43:9">{<block_content pos:start="42:13" pos:end="42:37">
            <expr_stmt pos:start="42:13" pos:end="42:37"><expr pos:start="42:13" pos:end="42:36"><call pos:start="42:13" pos:end="42:36"><name pos:start="42:13" pos:end="42:29"><name pos:start="42:13" pos:end="42:17">state</name><operator pos:start="42:18" pos:end="42:19">-&gt;</operator><name pos:start="42:20" pos:end="42:22">ops</name><operator pos:start="42:23" pos:end="42:24">-&gt;</operator><name pos:start="42:25" pos:end="42:29">abort</name></name><argument_list pos:start="42:30" pos:end="42:36">(<argument pos:start="42:31" pos:end="42:35"><expr pos:start="42:31" pos:end="42:35"><name pos:start="42:31" pos:end="42:35">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
<label pos:start="45:1" pos:end="45:5"><name pos:start="45:1" pos:end="45:4">exit</name>:</label>
    <macro pos:start="46:5" pos:end="46:64"><name pos:start="46:5" pos:end="46:25">QSIMPLEQ_FOREACH_SAFE</name><argument_list pos:start="46:26" pos:end="46:64">(<argument pos:start="46:27" pos:end="46:31">state</argument>, <argument pos:start="46:34" pos:end="46:50">&amp;snap_bdrv_states</argument>, <argument pos:start="46:53" pos:end="46:57">entry</argument>, <argument pos:start="46:60" pos:end="46:63">next</argument>)</argument_list></macro> <block pos:start="46:66" pos:end="51:5">{<block_content pos:start="47:9" pos:end="50:22">
        <if_stmt pos:start="47:9" pos:end="49:9"><if pos:start="47:9" pos:end="49:9">if <condition pos:start="47:12" pos:end="47:30">(<expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:17">state</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:22">ops</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:29">clean</name></name></expr>)</condition> <block pos:start="47:32" pos:end="49:9">{<block_content pos:start="48:13" pos:end="48:37">
            <expr_stmt pos:start="48:13" pos:end="48:37"><expr pos:start="48:13" pos:end="48:36"><call pos:start="48:13" pos:end="48:36"><name pos:start="48:13" pos:end="48:29"><name pos:start="48:13" pos:end="48:17">state</name><operator pos:start="48:18" pos:end="48:19">-&gt;</operator><name pos:start="48:20" pos:end="48:22">ops</name><operator pos:start="48:23" pos:end="48:24">-&gt;</operator><name pos:start="48:25" pos:end="48:29">clean</name></name><argument_list pos:start="48:30" pos:end="48:36">(<argument pos:start="48:31" pos:end="48:35"><expr pos:start="48:31" pos:end="48:35"><name pos:start="48:31" pos:end="48:35">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="50:9" pos:end="50:22"><expr pos:start="50:9" pos:end="50:21"><call pos:start="50:9" pos:end="50:21"><name pos:start="50:9" pos:end="50:14">g_free</name><argument_list pos:start="50:15" pos:end="50:21">(<argument pos:start="50:16" pos:end="50:20"><expr pos:start="50:16" pos:end="50:20"><name pos:start="50:16" pos:end="50:20">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function></unit>
