<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12597.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">inject_error</name><parameter_list pos:start="1:24" pos:end="1:65">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:64"><decl pos:start="1:47" pos:end="1:64"><type pos:start="1:47" pos:end="1:64"><name pos:start="1:47" pos:end="1:58">BlkdebugRule</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">rule</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:18">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">BDRVBlkdebugState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:37">= <expr pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:29">bs</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:37">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">error</name> <init pos:start="7:15" pos:end="7:42">= <expr pos:start="7:17" pos:end="7:42"><name pos:start="7:17" pos:end="7:42"><name pos:start="7:17" pos:end="7:20">rule</name><operator pos:start="7:21" pos:end="7:22">-&gt;</operator><name pos:start="7:23" pos:end="7:29">options</name><operator pos:start="7:30" pos:end="7:30">.</operator><name pos:start="7:31" pos:end="7:36">inject</name><operator pos:start="7:37" pos:end="7:37">.</operator><name pos:start="7:38" pos:end="7:42">error</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:20">immediately</name> <init pos:start="9:22" pos:end="9:55">= <expr pos:start="9:24" pos:end="9:55"><name pos:start="9:24" pos:end="9:55"><name pos:start="9:24" pos:end="9:27">rule</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:36">options</name><operator pos:start="9:37" pos:end="9:37">.</operator><name pos:start="9:38" pos:end="9:43">inject</name><operator pos:start="9:44" pos:end="9:44">.</operator><name pos:start="9:45" pos:end="9:55">immediately</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:34">(<expr pos:start="13:9" pos:end="13:33"><name pos:start="13:9" pos:end="13:33"><name pos:start="13:9" pos:end="13:12">rule</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:21">options</name><operator pos:start="13:22" pos:end="13:22">.</operator><name pos:start="13:23" pos:end="13:28">inject</name><operator pos:start="13:29" pos:end="13:29">.</operator><name pos:start="13:30" pos:end="13:33">once</name></name></expr>)</condition> <block pos:start="13:36" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:26">

        <expr_stmt pos:start="15:9" pos:end="15:75"><expr pos:start="15:9" pos:end="15:74"><call pos:start="15:9" pos:end="15:74"><name pos:start="15:9" pos:end="15:23">QSIMPLEQ_REMOVE</name><argument_list pos:start="15:24" pos:end="15:74">(<argument pos:start="15:25" pos:end="15:40"><expr pos:start="15:25" pos:end="15:40"><operator pos:start="15:25" pos:end="15:25">&amp;</operator><name pos:start="15:26" pos:end="15:40"><name pos:start="15:26" pos:end="15:26">s</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:40">active_rules</name></name></expr></argument>, <argument pos:start="15:43" pos:end="15:46"><expr pos:start="15:43" pos:end="15:46"><name pos:start="15:43" pos:end="15:46">rule</name></expr></argument>, <argument pos:start="15:49" pos:end="15:60"><expr pos:start="15:49" pos:end="15:60"><name pos:start="15:49" pos:end="15:60">BlkdebugRule</name></expr></argument>, <argument pos:start="15:63" pos:end="15:73"><expr pos:start="15:63" pos:end="15:73"><name pos:start="15:63" pos:end="15:73">active_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:26"><expr pos:start="17:9" pos:end="17:25"><call pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:19">remove_rule</name><argument_list pos:start="17:20" pos:end="17:25">(<argument pos:start="17:21" pos:end="17:24"><expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:20">immediately</name></expr>)</condition> <block pos:start="23:23" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:31">

        <expr_stmt pos:start="25:9" pos:end="27:55"><expr pos:start="25:9" pos:end="27:54"><call pos:start="25:9" pos:end="27:54"><name pos:start="25:9" pos:end="25:31">aio_bh_schedule_oneshot</name><argument_list pos:start="25:32" pos:end="27:54">(<argument pos:start="25:33" pos:end="25:56"><expr pos:start="25:33" pos:end="25:56"><call pos:start="25:33" pos:end="25:56"><name pos:start="25:33" pos:end="25:52">bdrv_get_aio_context</name><argument_list pos:start="25:53" pos:end="25:56">(<argument pos:start="25:54" pos:end="25:55"><expr pos:start="25:54" pos:end="25:55"><name pos:start="25:54" pos:end="25:55">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:59" pos:end="25:75"><expr pos:start="25:59" pos:end="25:75"><name pos:start="25:59" pos:end="25:75">error_callback_bh</name></expr></argument>,

                                <argument pos:start="27:33" pos:end="27:53"><expr pos:start="27:33" pos:end="27:53"><call pos:start="27:33" pos:end="27:53"><name pos:start="27:33" pos:end="27:51">qemu_coroutine_self</name><argument_list pos:start="27:52" pos:end="27:53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><call pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:28">qemu_coroutine_yield</name><argument_list pos:start="29:29" pos:end="29:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="35:5" pos:end="35:18">return <expr pos:start="35:12" pos:end="35:17"><operator pos:start="35:12" pos:end="35:12">-</operator><name pos:start="35:13" pos:end="35:17">error</name></expr>;</return>

</block_content>}</block></function>
</unit>
