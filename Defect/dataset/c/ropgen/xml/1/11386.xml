<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11386.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:8">main</name> <parameter_list pos:start="1:10" pos:end="1:32">(<parameter pos:start="1:11" pos:end="1:18"><decl pos:start="1:11" pos:end="1:18"><type pos:start="1:11" pos:end="1:18"><name pos:start="1:11" pos:end="1:13">int</name></type> <name pos:start="1:15" pos:end="1:18">argc</name></decl></parameter>, <parameter pos:start="1:21" pos:end="1:31"><decl pos:start="1:21" pos:end="1:31"><type pos:start="1:21" pos:end="1:31"><name pos:start="1:21" pos:end="1:24">char</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier><modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:31">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="5:5" pos:end="295:19">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:26">got_frame</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="25:5"><if pos:start="9:5" pos:end="25:5">if <condition pos:start="9:8" pos:end="9:18">(<expr pos:start="9:9" pos:end="9:17"><name pos:start="9:9" pos:end="9:12">argc</name> <operator pos:start="9:14" pos:end="9:15">!=</operator> <literal type="number" pos:start="9:17" pos:end="9:17">4</literal></expr>)</condition> <block pos:start="9:20" pos:end="25:5">{<block_content pos:start="11:9" pos:end="23:16">

        <expr_stmt pos:start="11:9" pos:end="21:31"><expr pos:start="11:9" pos:end="21:30"><call pos:start="11:9" pos:end="21:30"><name pos:start="11:9" pos:end="11:15">fprintf</name><argument_list pos:start="11:16" pos:end="21:30">(<argument pos:start="11:17" pos:end="11:22"><expr pos:start="11:17" pos:end="11:22"><name pos:start="11:17" pos:end="11:22">stderr</name></expr></argument>, <argument pos:start="11:25" pos:end="21:20"><expr pos:start="11:25" pos:end="21:20"><literal type="string" pos:start="11:25" pos:end="11:84">"usage: %s input_file video_output_file audio_output_file\n"</literal>

                <literal type="string" pos:start="13:17" pos:end="13:86">"API example program to show how to read frames from an input file.\n"</literal>

                <literal type="string" pos:start="15:17" pos:end="15:91">"This program reads frames from a file, decodes them, and writes decoded\n"</literal>

                <literal type="string" pos:start="17:17" pos:end="17:88">"video frames to a rawvideo file named video_output_file, and decoded\n"</literal>

                <literal type="string" pos:start="19:17" pos:end="19:76">"audio frames to a rawaudio file named audio_output_file.\n"</literal>

                <literal type="string" pos:start="21:17" pos:end="21:20">"\n"</literal></expr></argument>, <argument pos:start="21:23" pos:end="21:29"><expr pos:start="21:23" pos:end="21:29"><name pos:start="21:23" pos:end="21:29"><name pos:start="21:23" pos:end="21:26">argv</name><index pos:start="21:27" pos:end="21:29">[<expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><call pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:12">exit</name><argument_list pos:start="23:13" pos:end="23:15">(<argument pos:start="23:14" pos:end="23:14"><expr pos:start="23:14" pos:end="23:14"><literal type="number" pos:start="23:14" pos:end="23:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:16">src_filename</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:26"><name pos:start="27:20" pos:end="27:23">argv</name><index pos:start="27:24" pos:end="27:26">[<expr pos:start="27:25" pos:end="27:25"><literal type="number" pos:start="27:25" pos:end="27:25">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:22">video_dst_filename</name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:32"><name pos:start="29:26" pos:end="29:29">argv</name><index pos:start="29:30" pos:end="29:32">[<expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:22">audio_dst_filename</name> <operator pos:start="31:24" pos:end="31:24">=</operator> <name pos:start="31:26" pos:end="31:32"><name pos:start="31:26" pos:end="31:29">argv</name><index pos:start="31:30" pos:end="31:32">[<expr pos:start="31:31" pos:end="31:31"><literal type="number" pos:start="31:31" pos:end="31:31">3</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:41">/* register all formats and codecs */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><call pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:19">av_register_all</name><argument_list pos:start="37:20" pos:end="37:21">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:54">/* open input file, and allocate format context */</comment>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:68">(<expr pos:start="43:9" pos:end="43:67"><call pos:start="43:9" pos:end="43:63"><name pos:start="43:9" pos:end="43:27">avformat_open_input</name><argument_list pos:start="43:28" pos:end="43:63">(<argument pos:start="43:29" pos:end="43:36"><expr pos:start="43:29" pos:end="43:36"><operator pos:start="43:29" pos:end="43:29">&amp;</operator><name pos:start="43:30" pos:end="43:36">fmt_ctx</name></expr></argument>, <argument pos:start="43:39" pos:end="43:50"><expr pos:start="43:39" pos:end="43:50"><name pos:start="43:39" pos:end="43:50">src_filename</name></expr></argument>, <argument pos:start="43:53" pos:end="43:56"><expr pos:start="43:53" pos:end="43:56"><name pos:start="43:53" pos:end="43:56">NULL</name></expr></argument>, <argument pos:start="43:59" pos:end="43:62"><expr pos:start="43:59" pos:end="43:62"><name pos:start="43:59" pos:end="43:62">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="43:65" pos:end="43:65">&lt;</operator> <literal type="number" pos:start="43:67" pos:end="43:67">0</literal></expr>)</condition> <block pos:start="43:70" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:16">

        <expr_stmt pos:start="45:9" pos:end="45:73"><expr pos:start="45:9" pos:end="45:72"><call pos:start="45:9" pos:end="45:72"><name pos:start="45:9" pos:end="45:15">fprintf</name><argument_list pos:start="45:16" pos:end="45:72">(<argument pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:22"><name pos:start="45:17" pos:end="45:22">stderr</name></expr></argument>, <argument pos:start="45:25" pos:end="45:57"><expr pos:start="45:25" pos:end="45:57"><literal type="string" pos:start="45:25" pos:end="45:57">"Could not open source file %s\n"</literal></expr></argument>, <argument pos:start="45:60" pos:end="45:71"><expr pos:start="45:60" pos:end="45:71"><name pos:start="45:60" pos:end="45:71">src_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><call pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:12">exit</name><argument_list pos:start="47:13" pos:end="47:15">(<argument pos:start="47:14" pos:end="47:14"><expr pos:start="47:14" pos:end="47:14"><literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:37">/* retrieve stream information */</comment>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:53">(<expr pos:start="55:9" pos:end="55:52"><call pos:start="55:9" pos:end="55:48"><name pos:start="55:9" pos:end="55:33">avformat_find_stream_info</name><argument_list pos:start="55:34" pos:end="55:48">(<argument pos:start="55:35" pos:end="55:41"><expr pos:start="55:35" pos:end="55:41"><name pos:start="55:35" pos:end="55:41">fmt_ctx</name></expr></argument>, <argument pos:start="55:44" pos:end="55:47"><expr pos:start="55:44" pos:end="55:47"><name pos:start="55:44" pos:end="55:47">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="55:50" pos:end="55:50">&lt;</operator> <literal type="number" pos:start="55:52" pos:end="55:52">0</literal></expr>)</condition> <block pos:start="55:55" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:16">

        <expr_stmt pos:start="57:9" pos:end="57:63"><expr pos:start="57:9" pos:end="57:62"><call pos:start="57:9" pos:end="57:62"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="57:62">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:61"><expr pos:start="57:25" pos:end="57:61"><literal type="string" pos:start="57:25" pos:end="57:61">"Could not find stream information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><call pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:12">exit</name><argument_list pos:start="59:13" pos:end="59:15">(<argument pos:start="59:14" pos:end="59:14"><expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="105:5"><if pos:start="65:5" pos:end="105:5">if <condition pos:start="65:8" pos:end="65:80">(<expr pos:start="65:9" pos:end="65:79"><call pos:start="65:9" pos:end="65:74"><name pos:start="65:9" pos:end="65:26">open_codec_context</name><argument_list pos:start="65:27" pos:end="65:74">(<argument pos:start="65:28" pos:end="65:44"><expr pos:start="65:28" pos:end="65:44"><operator pos:start="65:28" pos:end="65:28">&amp;</operator><name pos:start="65:29" pos:end="65:44">video_stream_idx</name></expr></argument>, <argument pos:start="65:47" pos:end="65:53"><expr pos:start="65:47" pos:end="65:53"><name pos:start="65:47" pos:end="65:53">fmt_ctx</name></expr></argument>, <argument pos:start="65:56" pos:end="65:73"><expr pos:start="65:56" pos:end="65:73"><name pos:start="65:56" pos:end="65:73">AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call> <operator pos:start="65:76" pos:end="65:77">&gt;=</operator> <literal type="number" pos:start="65:79" pos:end="65:79">0</literal></expr>)</condition> <block pos:start="65:82" pos:end="105:5">{<block_content pos:start="67:9" pos:end="103:32">

        <expr_stmt pos:start="67:9" pos:end="67:58"><expr pos:start="67:9" pos:end="67:57"><name pos:start="67:9" pos:end="67:20">video_stream</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:57"><name pos:start="67:24" pos:end="67:30">fmt_ctx</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:39">streams</name><index pos:start="67:40" pos:end="67:57">[<expr pos:start="67:41" pos:end="67:56"><name pos:start="67:41" pos:end="67:56">video_stream_idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:44"><expr pos:start="69:9" pos:end="69:43"><name pos:start="69:9" pos:end="69:21">video_dec_ctx</name> <operator pos:start="69:23" pos:end="69:23">=</operator> <name pos:start="69:25" pos:end="69:43"><name pos:start="69:25" pos:end="69:36">video_stream</name><operator pos:start="69:37" pos:end="69:38">-&gt;</operator><name pos:start="69:39" pos:end="69:43">codec</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:57"><expr pos:start="73:9" pos:end="73:56"><name pos:start="73:9" pos:end="73:22">video_dst_file</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <call pos:start="73:26" pos:end="73:56"><name pos:start="73:26" pos:end="73:30">fopen</name><argument_list pos:start="73:31" pos:end="73:56">(<argument pos:start="73:32" pos:end="73:49"><expr pos:start="73:32" pos:end="73:49"><name pos:start="73:32" pos:end="73:49">video_dst_filename</name></expr></argument>, <argument pos:start="73:52" pos:end="73:55"><expr pos:start="73:52" pos:end="73:55"><literal type="string" pos:start="73:52" pos:end="73:55">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="83:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:28">(<expr pos:start="75:13" pos:end="75:27"><operator pos:start="75:13" pos:end="75:13">!</operator><name pos:start="75:14" pos:end="75:27">video_dst_file</name></expr>)</condition> <block pos:start="75:30" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:21">

            <expr_stmt pos:start="77:13" pos:end="77:88"><expr pos:start="77:13" pos:end="77:87"><call pos:start="77:13" pos:end="77:87"><name pos:start="77:13" pos:end="77:19">fprintf</name><argument_list pos:start="77:20" pos:end="77:87">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stderr</name></expr></argument>, <argument pos:start="77:29" pos:end="77:66"><expr pos:start="77:29" pos:end="77:66"><literal type="string" pos:start="77:29" pos:end="77:66">"Could not open destination file %s\n"</literal></expr></argument>, <argument pos:start="77:69" pos:end="77:86"><expr pos:start="77:69" pos:end="77:86"><name pos:start="77:69" pos:end="77:86">video_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:20"><expr pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <literal type="number" pos:start="79:19" pos:end="79:19">1</literal></expr>;</expr_stmt>

            <goto pos:start="81:13" pos:end="81:21">goto <name pos:start="81:18" pos:end="81:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="87:9" pos:end="87:64">/* allocate image where the decoded image will be put */</comment>

        <expr_stmt pos:start="89:9" pos:end="93:56"><expr pos:start="89:9" pos:end="93:55"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="93:55"><name pos:start="89:15" pos:end="89:28">av_image_alloc</name><argument_list pos:start="89:29" pos:end="93:55">(<argument pos:start="89:30" pos:end="89:43"><expr pos:start="89:30" pos:end="89:43"><name pos:start="89:30" pos:end="89:43">video_dst_data</name></expr></argument>, <argument pos:start="89:46" pos:end="89:63"><expr pos:start="89:46" pos:end="89:63"><name pos:start="89:46" pos:end="89:63">video_dst_linesize</name></expr></argument>,

                             <argument pos:start="91:30" pos:end="91:49"><expr pos:start="91:30" pos:end="91:49"><name pos:start="91:30" pos:end="91:49"><name pos:start="91:30" pos:end="91:42">video_dec_ctx</name><operator pos:start="91:43" pos:end="91:44">-&gt;</operator><name pos:start="91:45" pos:end="91:49">width</name></name></expr></argument>, <argument pos:start="91:52" pos:end="91:72"><expr pos:start="91:52" pos:end="91:72"><name pos:start="91:52" pos:end="91:72"><name pos:start="91:52" pos:end="91:64">video_dec_ctx</name><operator pos:start="91:65" pos:end="91:66">-&gt;</operator><name pos:start="91:67" pos:end="91:72">height</name></name></expr></argument>,

                             <argument pos:start="93:30" pos:end="93:51"><expr pos:start="93:30" pos:end="93:51"><name pos:start="93:30" pos:end="93:51"><name pos:start="93:30" pos:end="93:42">video_dec_ctx</name><operator pos:start="93:43" pos:end="93:44">-&gt;</operator><name pos:start="93:45" pos:end="93:51">pix_fmt</name></name></expr></argument>, <argument pos:start="93:54" pos:end="93:54"><expr pos:start="93:54" pos:end="93:54"><literal type="number" pos:start="93:54" pos:end="93:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:20">(<expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:15">ret</name> <operator pos:start="95:17" pos:end="95:17">&lt;</operator> <literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr>)</condition> <block pos:start="95:22" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:21">

            <expr_stmt pos:start="97:13" pos:end="97:69"><expr pos:start="97:13" pos:end="97:68"><call pos:start="97:13" pos:end="97:68"><name pos:start="97:13" pos:end="97:19">fprintf</name><argument_list pos:start="97:20" pos:end="97:68">(<argument pos:start="97:21" pos:end="97:26"><expr pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:26">stderr</name></expr></argument>, <argument pos:start="97:29" pos:end="97:67"><expr pos:start="97:29" pos:end="97:67"><literal type="string" pos:start="97:29" pos:end="97:67">"Could not allocate raw video buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="99:13" pos:end="99:21">goto <name pos:start="99:18" pos:end="99:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:32"><expr pos:start="103:9" pos:end="103:31"><name pos:start="103:9" pos:end="103:25">video_dst_bufsize</name> <operator pos:start="103:27" pos:end="103:27">=</operator> <name pos:start="103:29" pos:end="103:31">ret</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="149:5"><if pos:start="109:5" pos:end="149:5">if <condition pos:start="109:8" pos:end="109:80">(<expr pos:start="109:9" pos:end="109:79"><call pos:start="109:9" pos:end="109:74"><name pos:start="109:9" pos:end="109:26">open_codec_context</name><argument_list pos:start="109:27" pos:end="109:74">(<argument pos:start="109:28" pos:end="109:44"><expr pos:start="109:28" pos:end="109:44"><operator pos:start="109:28" pos:end="109:28">&amp;</operator><name pos:start="109:29" pos:end="109:44">audio_stream_idx</name></expr></argument>, <argument pos:start="109:47" pos:end="109:53"><expr pos:start="109:47" pos:end="109:53"><name pos:start="109:47" pos:end="109:53">fmt_ctx</name></expr></argument>, <argument pos:start="109:56" pos:end="109:73"><expr pos:start="109:56" pos:end="109:73"><name pos:start="109:56" pos:end="109:73">AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call> <operator pos:start="109:76" pos:end="109:77">&gt;=</operator> <literal type="number" pos:start="109:79" pos:end="109:79">0</literal></expr>)</condition> <block pos:start="109:82" pos:end="149:5">{<block_content pos:start="111:9" pos:end="147:9">

        <decl_stmt pos:start="111:9" pos:end="111:22"><decl pos:start="111:9" pos:end="111:21"><type pos:start="111:9" pos:end="111:11"><name pos:start="111:9" pos:end="111:11">int</name></type> <name pos:start="111:13" pos:end="111:21">nb_planes</name></decl>;</decl_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:58"><expr pos:start="115:9" pos:end="115:57"><name pos:start="115:9" pos:end="115:20">audio_stream</name> <operator pos:start="115:22" pos:end="115:22">=</operator> <name pos:start="115:24" pos:end="115:57"><name pos:start="115:24" pos:end="115:30">fmt_ctx</name><operator pos:start="115:31" pos:end="115:32">-&gt;</operator><name pos:start="115:33" pos:end="115:39">streams</name><index pos:start="115:40" pos:end="115:57">[<expr pos:start="115:41" pos:end="115:56"><name pos:start="115:41" pos:end="115:56">audio_stream_idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:21">audio_dec_ctx</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <name pos:start="117:25" pos:end="117:43"><name pos:start="117:25" pos:end="117:36">audio_stream</name><operator pos:start="117:37" pos:end="117:38">-&gt;</operator><name pos:start="117:39" pos:end="117:43">codec</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:57"><expr pos:start="119:9" pos:end="119:56"><name pos:start="119:9" pos:end="119:22">audio_dst_file</name> <operator pos:start="119:24" pos:end="119:24">=</operator> <call pos:start="119:26" pos:end="119:56"><name pos:start="119:26" pos:end="119:30">fopen</name><argument_list pos:start="119:31" pos:end="119:56">(<argument pos:start="119:32" pos:end="119:49"><expr pos:start="119:32" pos:end="119:49"><name pos:start="119:32" pos:end="119:49">audio_dst_filename</name></expr></argument>, <argument pos:start="119:52" pos:end="119:55"><expr pos:start="119:52" pos:end="119:55"><literal type="string" pos:start="119:52" pos:end="119:55">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="129:9"><if pos:start="121:9" pos:end="129:9">if <condition pos:start="121:12" pos:end="121:28">(<expr pos:start="121:13" pos:end="121:27"><operator pos:start="121:13" pos:end="121:13">!</operator><name pos:start="121:14" pos:end="121:27">audio_dst_file</name></expr>)</condition> <block pos:start="121:30" pos:end="129:9">{<block_content pos:start="123:13" pos:end="127:21">

            <expr_stmt pos:start="123:13" pos:end="123:88"><expr pos:start="123:13" pos:end="123:87"><call pos:start="123:13" pos:end="123:87"><name pos:start="123:13" pos:end="123:19">fprintf</name><argument_list pos:start="123:20" pos:end="123:87">(<argument pos:start="123:21" pos:end="123:26"><expr pos:start="123:21" pos:end="123:26"><name pos:start="123:21" pos:end="123:26">stderr</name></expr></argument>, <argument pos:start="123:29" pos:end="123:66"><expr pos:start="123:29" pos:end="123:66"><literal type="string" pos:start="123:29" pos:end="123:66">"Could not open destination file %s\n"</literal></expr></argument>, <argument pos:start="123:69" pos:end="123:86"><expr pos:start="123:69" pos:end="123:86"><name pos:start="123:69" pos:end="123:86">video_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:20"><expr pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:15">ret</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <literal type="number" pos:start="125:19" pos:end="125:19">1</literal></expr>;</expr_stmt>

            <goto pos:start="127:13" pos:end="127:21">goto <name pos:start="127:18" pos:end="127:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="133:9" pos:end="135:40"><expr pos:start="133:9" pos:end="135:39"><name pos:start="133:9" pos:end="133:17">nb_planes</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <ternary pos:start="133:21" pos:end="135:39"><condition pos:start="133:21" pos:end="133:72"><expr pos:start="133:21" pos:end="133:70"><call pos:start="133:21" pos:end="133:70"><name pos:start="133:21" pos:end="133:43">av_sample_fmt_is_planar</name><argument_list pos:start="133:44" pos:end="133:70">(<argument pos:start="133:45" pos:end="133:69"><expr pos:start="133:45" pos:end="133:69"><name pos:start="133:45" pos:end="133:69"><name pos:start="133:45" pos:end="133:57">audio_dec_ctx</name><operator pos:start="133:58" pos:end="133:59">-&gt;</operator><name pos:start="133:60" pos:end="133:69">sample_fmt</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="135:13" pos:end="135:35">

            <expr pos:start="135:13" pos:end="135:35"><name pos:start="135:13" pos:end="135:35"><name pos:start="135:13" pos:end="135:25">audio_dec_ctx</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:35">channels</name></name></expr> </then><else pos:start="135:37" pos:end="135:39">: <expr pos:start="135:39" pos:end="135:39"><literal type="number" pos:start="135:39" pos:end="135:39">1</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:67"><expr pos:start="137:9" pos:end="137:66"><name pos:start="137:9" pos:end="137:22">audio_dst_data</name> <operator pos:start="137:24" pos:end="137:24">=</operator> <call pos:start="137:26" pos:end="137:66"><name pos:start="137:26" pos:end="137:35">av_mallocz</name><argument_list pos:start="137:36" pos:end="137:66">(<argument pos:start="137:37" pos:end="137:65"><expr pos:start="137:37" pos:end="137:65"><sizeof pos:start="137:37" pos:end="137:53">sizeof<argument_list pos:start="137:43" pos:end="137:53">(<argument pos:start="137:44" pos:end="137:52"><expr pos:start="137:44" pos:end="137:52"><name pos:start="137:44" pos:end="137:50">uint8_t</name> <operator pos:start="137:52" pos:end="137:52">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="137:55" pos:end="137:55">*</operator> <name pos:start="137:57" pos:end="137:65">nb_planes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="147:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="139:28">(<expr pos:start="139:13" pos:end="139:27"><operator pos:start="139:13" pos:end="139:13">!</operator><name pos:start="139:14" pos:end="139:27">audio_dst_data</name></expr>)</condition> <block pos:start="139:30" pos:end="147:9">{<block_content pos:start="141:13" pos:end="145:21">

            <expr_stmt pos:start="141:13" pos:end="141:71"><expr pos:start="141:13" pos:end="141:70"><call pos:start="141:13" pos:end="141:70"><name pos:start="141:13" pos:end="141:19">fprintf</name><argument_list pos:start="141:20" pos:end="141:70">(<argument pos:start="141:21" pos:end="141:26"><expr pos:start="141:21" pos:end="141:26"><name pos:start="141:21" pos:end="141:26">stderr</name></expr></argument>, <argument pos:start="141:29" pos:end="141:69"><expr pos:start="141:29" pos:end="141:69"><literal type="string" pos:start="141:29" pos:end="141:69">"Could not allocate audio data buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:34"><expr pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <call pos:start="143:19" pos:end="143:33"><name pos:start="143:19" pos:end="143:25">AVERROR</name><argument_list pos:start="143:26" pos:end="143:33">(<argument pos:start="143:27" pos:end="143:32"><expr pos:start="143:27" pos:end="143:32"><name pos:start="143:27" pos:end="143:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="145:13" pos:end="145:21">goto <name pos:start="145:18" pos:end="145:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:42">/* dump input information to stderr */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:48"><expr pos:start="155:5" pos:end="155:47"><call pos:start="155:5" pos:end="155:47"><name pos:start="155:5" pos:end="155:18">av_dump_format</name><argument_list pos:start="155:19" pos:end="155:47">(<argument pos:start="155:20" pos:end="155:26"><expr pos:start="155:20" pos:end="155:26"><name pos:start="155:20" pos:end="155:26">fmt_ctx</name></expr></argument>, <argument pos:start="155:29" pos:end="155:29"><expr pos:start="155:29" pos:end="155:29"><literal type="number" pos:start="155:29" pos:end="155:29">0</literal></expr></argument>, <argument pos:start="155:32" pos:end="155:43"><expr pos:start="155:32" pos:end="155:43"><name pos:start="155:32" pos:end="155:43">src_filename</name></expr></argument>, <argument pos:start="155:46" pos:end="155:46"><expr pos:start="155:46" pos:end="155:46"><literal type="number" pos:start="155:46" pos:end="155:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="167:5"><if pos:start="159:5" pos:end="167:5">if <condition pos:start="159:8" pos:end="159:39">(<expr pos:start="159:9" pos:end="159:38"><operator pos:start="159:9" pos:end="159:9">!</operator><name pos:start="159:10" pos:end="159:21">audio_stream</name> <operator pos:start="159:23" pos:end="159:24">&amp;&amp;</operator> <operator pos:start="159:26" pos:end="159:26">!</operator><name pos:start="159:27" pos:end="159:38">video_stream</name></expr>)</condition> <block pos:start="159:41" pos:end="167:5">{<block_content pos:start="161:9" pos:end="165:17">

        <expr_stmt pos:start="161:9" pos:end="161:89"><expr pos:start="161:9" pos:end="161:88"><call pos:start="161:9" pos:end="161:88"><name pos:start="161:9" pos:end="161:15">fprintf</name><argument_list pos:start="161:16" pos:end="161:88">(<argument pos:start="161:17" pos:end="161:22"><expr pos:start="161:17" pos:end="161:22"><name pos:start="161:17" pos:end="161:22">stderr</name></expr></argument>, <argument pos:start="161:25" pos:end="161:87"><expr pos:start="161:25" pos:end="161:87"><literal type="string" pos:start="161:25" pos:end="161:87">"Could not find audio or video stream in the input, aborting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:16"><expr pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <literal type="number" pos:start="163:15" pos:end="163:15">1</literal></expr>;</expr_stmt>

        <goto pos:start="165:9" pos:end="165:17">goto <name pos:start="165:14" pos:end="165:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:34"><expr pos:start="171:5" pos:end="171:33"><name pos:start="171:5" pos:end="171:9">frame</name> <operator pos:start="171:11" pos:end="171:11">=</operator> <call pos:start="171:13" pos:end="171:33"><name pos:start="171:13" pos:end="171:31">avcodec_alloc_frame</name><argument_list pos:start="171:32" pos:end="171:33">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="181:5"><if pos:start="173:5" pos:end="181:5">if <condition pos:start="173:8" pos:end="173:15">(<expr pos:start="173:9" pos:end="173:14"><operator pos:start="173:9" pos:end="173:9">!</operator><name pos:start="173:10" pos:end="173:14">frame</name></expr>)</condition> <block pos:start="173:17" pos:end="181:5">{<block_content pos:start="175:9" pos:end="179:17">

        <expr_stmt pos:start="175:9" pos:end="175:54"><expr pos:start="175:9" pos:end="175:53"><call pos:start="175:9" pos:end="175:53"><name pos:start="175:9" pos:end="175:15">fprintf</name><argument_list pos:start="175:16" pos:end="175:53">(<argument pos:start="175:17" pos:end="175:22"><expr pos:start="175:17" pos:end="175:22"><name pos:start="175:17" pos:end="175:22">stderr</name></expr></argument>, <argument pos:start="175:25" pos:end="175:52"><expr pos:start="175:25" pos:end="175:52"><literal type="string" pos:start="175:25" pos:end="175:52">"Could not allocate frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:30"><expr pos:start="177:9" pos:end="177:29"><name pos:start="177:9" pos:end="177:11">ret</name> <operator pos:start="177:13" pos:end="177:13">=</operator> <call pos:start="177:15" pos:end="177:29"><name pos:start="177:15" pos:end="177:21">AVERROR</name><argument_list pos:start="177:22" pos:end="177:29">(<argument pos:start="177:23" pos:end="177:28"><expr pos:start="177:23" pos:end="177:28"><name pos:start="177:23" pos:end="177:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="179:9" pos:end="179:17">goto <name pos:start="179:14" pos:end="179:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:70">/* initialize packet, set data to NULL, let the demuxer fill it */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:25"><expr pos:start="187:5" pos:end="187:24"><call pos:start="187:5" pos:end="187:24"><name pos:start="187:5" pos:end="187:18">av_init_packet</name><argument_list pos:start="187:19" pos:end="187:24">(<argument pos:start="187:20" pos:end="187:23"><expr pos:start="187:20" pos:end="187:23"><operator pos:start="187:20" pos:end="187:20">&amp;</operator><name pos:start="187:21" pos:end="187:23">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:20"><expr pos:start="189:5" pos:end="189:19"><name pos:start="189:5" pos:end="189:12"><name pos:start="189:5" pos:end="189:7">pkt</name><operator pos:start="189:8" pos:end="189:8">.</operator><name pos:start="189:9" pos:end="189:12">data</name></name> <operator pos:start="189:14" pos:end="189:14">=</operator> <name pos:start="189:16" pos:end="189:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:17"><expr pos:start="191:5" pos:end="191:16"><name pos:start="191:5" pos:end="191:12"><name pos:start="191:5" pos:end="191:7">pkt</name><operator pos:start="191:8" pos:end="191:8">.</operator><name pos:start="191:9" pos:end="191:12">size</name></name> <operator pos:start="191:14" pos:end="191:14">=</operator> <literal type="number" pos:start="191:16" pos:end="191:16">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="195:5" pos:end="197:94"><if pos:start="195:5" pos:end="197:94">if <condition pos:start="195:8" pos:end="195:21">(<expr pos:start="195:9" pos:end="195:20"><name pos:start="195:9" pos:end="195:20">video_stream</name></expr>)</condition><block type="pseudo" pos:start="197:9" pos:end="197:94"><block_content pos:start="197:9" pos:end="197:94">

        <expr_stmt pos:start="197:9" pos:end="197:94"><expr pos:start="197:9" pos:end="197:93"><call pos:start="197:9" pos:end="197:93"><name pos:start="197:9" pos:end="197:14">printf</name><argument_list pos:start="197:15" pos:end="197:93">(<argument pos:start="197:16" pos:end="197:58"><expr pos:start="197:16" pos:end="197:58"><literal type="string" pos:start="197:16" pos:end="197:58">"Demuxing video from file '%s' into '%s'\n"</literal></expr></argument>, <argument pos:start="197:61" pos:end="197:72"><expr pos:start="197:61" pos:end="197:72"><name pos:start="197:61" pos:end="197:72">src_filename</name></expr></argument>, <argument pos:start="197:75" pos:end="197:92"><expr pos:start="197:75" pos:end="197:92"><name pos:start="197:75" pos:end="197:92">video_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="199:5" pos:end="201:94"><if pos:start="199:5" pos:end="201:94">if <condition pos:start="199:8" pos:end="199:21">(<expr pos:start="199:9" pos:end="199:20"><name pos:start="199:9" pos:end="199:20">audio_stream</name></expr>)</condition><block type="pseudo" pos:start="201:9" pos:end="201:94"><block_content pos:start="201:9" pos:end="201:94">

        <expr_stmt pos:start="201:9" pos:end="201:94"><expr pos:start="201:9" pos:end="201:93"><call pos:start="201:9" pos:end="201:93"><name pos:start="201:9" pos:end="201:14">printf</name><argument_list pos:start="201:15" pos:end="201:93">(<argument pos:start="201:16" pos:end="201:58"><expr pos:start="201:16" pos:end="201:58"><literal type="string" pos:start="201:16" pos:end="201:58">"Demuxing audio from file '%s' into '%s'\n"</literal></expr></argument>, <argument pos:start="201:61" pos:end="201:72"><expr pos:start="201:61" pos:end="201:72"><name pos:start="201:61" pos:end="201:72">src_filename</name></expr></argument>, <argument pos:start="201:75" pos:end="201:92"><expr pos:start="201:75" pos:end="201:92"><name pos:start="201:75" pos:end="201:92">audio_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="205:5" pos:end="205:35">/* read frames from the file */</comment>

    <while pos:start="207:5" pos:end="209:37">while <condition pos:start="207:11" pos:end="207:45">(<expr pos:start="207:12" pos:end="207:44"><call pos:start="207:12" pos:end="207:39"><name pos:start="207:12" pos:end="207:24">av_read_frame</name><argument_list pos:start="207:25" pos:end="207:39">(<argument pos:start="207:26" pos:end="207:32"><expr pos:start="207:26" pos:end="207:32"><name pos:start="207:26" pos:end="207:32">fmt_ctx</name></expr></argument>, <argument pos:start="207:35" pos:end="207:38"><expr pos:start="207:35" pos:end="207:38"><operator pos:start="207:35" pos:end="207:35">&amp;</operator><name pos:start="207:36" pos:end="207:38">pkt</name></expr></argument>)</argument_list></call> <operator pos:start="207:41" pos:end="207:42">&gt;=</operator> <literal type="number" pos:start="207:44" pos:end="207:44">0</literal></expr>)</condition><block type="pseudo" pos:start="209:9" pos:end="209:37"><block_content pos:start="209:9" pos:end="209:37">

        <expr_stmt pos:start="209:9" pos:end="209:37"><expr pos:start="209:9" pos:end="209:36"><call pos:start="209:9" pos:end="209:36"><name pos:start="209:9" pos:end="209:21">decode_packet</name><argument_list pos:start="209:22" pos:end="209:36">(<argument pos:start="209:23" pos:end="209:32"><expr pos:start="209:23" pos:end="209:32"><operator pos:start="209:23" pos:end="209:23">&amp;</operator><name pos:start="209:24" pos:end="209:32">got_frame</name></expr></argument>, <argument pos:start="209:35" pos:end="209:35"><expr pos:start="209:35" pos:end="209:35"><literal type="number" pos:start="209:35" pos:end="209:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <comment type="block" pos:start="213:5" pos:end="213:29">/* flush cached frames */</comment>

    <expr_stmt pos:start="215:5" pos:end="215:20"><expr pos:start="215:5" pos:end="215:19"><name pos:start="215:5" pos:end="215:12"><name pos:start="215:5" pos:end="215:7">pkt</name><operator pos:start="215:8" pos:end="215:8">.</operator><name pos:start="215:9" pos:end="215:12">data</name></name> <operator pos:start="215:14" pos:end="215:14">=</operator> <name pos:start="215:16" pos:end="215:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:17"><expr pos:start="217:5" pos:end="217:16"><name pos:start="217:5" pos:end="217:12"><name pos:start="217:5" pos:end="217:7">pkt</name><operator pos:start="217:8" pos:end="217:8">.</operator><name pos:start="217:9" pos:end="217:12">size</name></name> <operator pos:start="217:14" pos:end="217:14">=</operator> <literal type="number" pos:start="217:16" pos:end="217:16">0</literal></expr>;</expr_stmt>

    <do pos:start="219:5" pos:end="223:24">do <block pos:start="219:8" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:37">

        <expr_stmt pos:start="221:9" pos:end="221:37"><expr pos:start="221:9" pos:end="221:36"><call pos:start="221:9" pos:end="221:36"><name pos:start="221:9" pos:end="221:21">decode_packet</name><argument_list pos:start="221:22" pos:end="221:36">(<argument pos:start="221:23" pos:end="221:32"><expr pos:start="221:23" pos:end="221:32"><operator pos:start="221:23" pos:end="221:23">&amp;</operator><name pos:start="221:24" pos:end="221:32">got_frame</name></expr></argument>, <argument pos:start="221:35" pos:end="221:35"><expr pos:start="221:35" pos:end="221:35"><literal type="number" pos:start="221:35" pos:end="221:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="223:13" pos:end="223:23">(<expr pos:start="223:14" pos:end="223:22"><name pos:start="223:14" pos:end="223:22">got_frame</name></expr>)</condition>;</do>



    <expr_stmt pos:start="227:5" pos:end="227:36"><expr pos:start="227:5" pos:end="227:35"><call pos:start="227:5" pos:end="227:35"><name pos:start="227:5" pos:end="227:10">printf</name><argument_list pos:start="227:11" pos:end="227:35">(<argument pos:start="227:12" pos:end="227:34"><expr pos:start="227:12" pos:end="227:34"><literal type="string" pos:start="227:12" pos:end="227:34">"Demuxing succeeded.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="231:5" pos:end="241:5"><if pos:start="231:5" pos:end="241:5">if <condition pos:start="231:8" pos:end="231:21">(<expr pos:start="231:9" pos:end="231:20"><name pos:start="231:9" pos:end="231:20">video_stream</name></expr>)</condition> <block pos:start="231:23" pos:end="241:5">{<block_content pos:start="233:9" pos:end="239:35">

        <expr_stmt pos:start="233:9" pos:end="239:35"><expr pos:start="233:9" pos:end="239:34"><call pos:start="233:9" pos:end="239:34"><name pos:start="233:9" pos:end="233:14">printf</name><argument_list pos:start="233:15" pos:end="239:34">(<argument pos:start="233:16" pos:end="235:70"><expr pos:start="233:16" pos:end="235:70"><literal type="string" pos:start="233:16" pos:end="233:63">"Play the output video file with the command:\n"</literal>

               <literal type="string" pos:start="235:16" pos:end="235:70">"ffplay -f rawvideo -pix_fmt %s -video_size %dx%d %s\n"</literal></expr></argument>,

               <argument pos:start="237:16" pos:end="237:58"><expr pos:start="237:16" pos:end="237:58"><call pos:start="237:16" pos:end="237:58"><name pos:start="237:16" pos:end="237:34">av_get_pix_fmt_name</name><argument_list pos:start="237:35" pos:end="237:58">(<argument pos:start="237:36" pos:end="237:57"><expr pos:start="237:36" pos:end="237:57"><name pos:start="237:36" pos:end="237:57"><name pos:start="237:36" pos:end="237:48">video_dec_ctx</name><operator pos:start="237:49" pos:end="237:50">-&gt;</operator><name pos:start="237:51" pos:end="237:57">pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="237:61" pos:end="237:80"><expr pos:start="237:61" pos:end="237:80"><name pos:start="237:61" pos:end="237:80"><name pos:start="237:61" pos:end="237:73">video_dec_ctx</name><operator pos:start="237:74" pos:end="237:75">-&gt;</operator><name pos:start="237:76" pos:end="237:80">width</name></name></expr></argument>, <argument pos:start="237:83" pos:end="237:103"><expr pos:start="237:83" pos:end="237:103"><name pos:start="237:83" pos:end="237:103"><name pos:start="237:83" pos:end="237:95">video_dec_ctx</name><operator pos:start="237:96" pos:end="237:97">-&gt;</operator><name pos:start="237:98" pos:end="237:103">height</name></name></expr></argument>,

               <argument pos:start="239:16" pos:end="239:33"><expr pos:start="239:16" pos:end="239:33"><name pos:start="239:16" pos:end="239:33">video_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="263:5"><if pos:start="245:5" pos:end="263:5">if <condition pos:start="245:8" pos:end="245:21">(<expr pos:start="245:9" pos:end="245:20"><name pos:start="245:9" pos:end="245:20">audio_stream</name></expr>)</condition> <block pos:start="245:23" pos:end="263:5">{<block_content pos:start="247:9" pos:end="261:35">

        <decl_stmt pos:start="247:9" pos:end="247:24"><decl pos:start="247:9" pos:end="247:23"><type pos:start="247:9" pos:end="247:20"><specifier pos:start="247:9" pos:end="247:13">const</specifier> <name pos:start="247:15" pos:end="247:18">char</name> <modifier pos:start="247:20" pos:end="247:20">*</modifier></type><name pos:start="247:21" pos:end="247:23">fmt</name></decl>;</decl_stmt>



        <if_stmt pos:start="251:9" pos:end="253:21"><if pos:start="251:9" pos:end="253:21">if <condition pos:start="251:12" pos:end="251:84">(<expr pos:start="251:13" pos:end="251:83"><operator pos:start="251:13" pos:end="251:13">(</operator><name pos:start="251:14" pos:end="251:16">ret</name> <operator pos:start="251:18" pos:end="251:18">=</operator> <call pos:start="251:20" pos:end="251:78"><name pos:start="251:20" pos:end="251:45">get_format_from_sample_fmt</name><argument_list pos:start="251:46" pos:end="251:78">(<argument pos:start="251:47" pos:end="251:50"><expr pos:start="251:47" pos:end="251:50"><operator pos:start="251:47" pos:end="251:47">&amp;</operator><name pos:start="251:48" pos:end="251:50">fmt</name></expr></argument>, <argument pos:start="251:53" pos:end="251:77"><expr pos:start="251:53" pos:end="251:77"><name pos:start="251:53" pos:end="251:77"><name pos:start="251:53" pos:end="251:65">audio_dec_ctx</name><operator pos:start="251:66" pos:end="251:67">-&gt;</operator><name pos:start="251:68" pos:end="251:77">sample_fmt</name></name></expr></argument>)</argument_list></call><operator pos:start="251:79" pos:end="251:79">)</operator> <operator pos:start="251:81" pos:end="251:81">&lt;</operator> <literal type="number" pos:start="251:83" pos:end="251:83">0</literal></expr>)</condition><block type="pseudo" pos:start="253:13" pos:end="253:21"><block_content pos:start="253:13" pos:end="253:21">

            <goto pos:start="253:13" pos:end="253:21">goto <name pos:start="253:18" pos:end="253:20">end</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="255:9" pos:end="261:35"><expr pos:start="255:9" pos:end="261:34"><call pos:start="255:9" pos:end="261:34"><name pos:start="255:9" pos:end="255:14">printf</name><argument_list pos:start="255:15" pos:end="261:34">(<argument pos:start="255:16" pos:end="257:48"><expr pos:start="255:16" pos:end="257:48"><literal type="string" pos:start="255:16" pos:end="255:63">"Play the output audio file with the command:\n"</literal>

               <literal type="string" pos:start="257:16" pos:end="257:48">"ffplay -f %s -ac %d -ar %d %s\n"</literal></expr></argument>,

               <argument pos:start="259:16" pos:end="259:18"><expr pos:start="259:16" pos:end="259:18"><name pos:start="259:16" pos:end="259:18">fmt</name></expr></argument>, <argument pos:start="259:21" pos:end="259:43"><expr pos:start="259:21" pos:end="259:43"><name pos:start="259:21" pos:end="259:43"><name pos:start="259:21" pos:end="259:33">audio_dec_ctx</name><operator pos:start="259:34" pos:end="259:35">-&gt;</operator><name pos:start="259:36" pos:end="259:43">channels</name></name></expr></argument>, <argument pos:start="259:46" pos:end="259:71"><expr pos:start="259:46" pos:end="259:71"><name pos:start="259:46" pos:end="259:71"><name pos:start="259:46" pos:end="259:58">audio_dec_ctx</name><operator pos:start="259:59" pos:end="259:60">-&gt;</operator><name pos:start="259:61" pos:end="259:71">sample_rate</name></name></expr></argument>,

               <argument pos:start="261:16" pos:end="261:33"><expr pos:start="261:16" pos:end="261:33"><name pos:start="261:16" pos:end="261:33">audio_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="267:1" pos:end="267:4"><name pos:start="267:1" pos:end="267:3">end</name>:</label>

    <if_stmt pos:start="269:5" pos:end="271:37"><if pos:start="269:5" pos:end="271:37">if <condition pos:start="269:8" pos:end="269:22">(<expr pos:start="269:9" pos:end="269:21"><name pos:start="269:9" pos:end="269:21">video_dec_ctx</name></expr>)</condition><block type="pseudo" pos:start="271:9" pos:end="271:37"><block_content pos:start="271:9" pos:end="271:37">

        <expr_stmt pos:start="271:9" pos:end="271:37"><expr pos:start="271:9" pos:end="271:36"><call pos:start="271:9" pos:end="271:36"><name pos:start="271:9" pos:end="271:21">avcodec_close</name><argument_list pos:start="271:22" pos:end="271:36">(<argument pos:start="271:23" pos:end="271:35"><expr pos:start="271:23" pos:end="271:35"><name pos:start="271:23" pos:end="271:35">video_dec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="273:5" pos:end="275:37"><if pos:start="273:5" pos:end="275:37">if <condition pos:start="273:8" pos:end="273:22">(<expr pos:start="273:9" pos:end="273:21"><name pos:start="273:9" pos:end="273:21">audio_dec_ctx</name></expr>)</condition><block type="pseudo" pos:start="275:9" pos:end="275:37"><block_content pos:start="275:9" pos:end="275:37">

        <expr_stmt pos:start="275:9" pos:end="275:37"><expr pos:start="275:9" pos:end="275:36"><call pos:start="275:9" pos:end="275:36"><name pos:start="275:9" pos:end="275:21">avcodec_close</name><argument_list pos:start="275:22" pos:end="275:36">(<argument pos:start="275:23" pos:end="275:35"><expr pos:start="275:23" pos:end="275:35"><name pos:start="275:23" pos:end="275:35">audio_dec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:35"><expr pos:start="277:5" pos:end="277:34"><call pos:start="277:5" pos:end="277:34"><name pos:start="277:5" pos:end="277:24">avformat_close_input</name><argument_list pos:start="277:25" pos:end="277:34">(<argument pos:start="277:26" pos:end="277:33"><expr pos:start="277:26" pos:end="277:33"><operator pos:start="277:26" pos:end="277:26">&amp;</operator><name pos:start="277:27" pos:end="277:33">fmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="279:5" pos:end="281:31"><if pos:start="279:5" pos:end="281:31">if <condition pos:start="279:8" pos:end="279:23">(<expr pos:start="279:9" pos:end="279:22"><name pos:start="279:9" pos:end="279:22">video_dst_file</name></expr>)</condition><block type="pseudo" pos:start="281:9" pos:end="281:31"><block_content pos:start="281:9" pos:end="281:31">

        <expr_stmt pos:start="281:9" pos:end="281:31"><expr pos:start="281:9" pos:end="281:30"><call pos:start="281:9" pos:end="281:30"><name pos:start="281:9" pos:end="281:14">fclose</name><argument_list pos:start="281:15" pos:end="281:30">(<argument pos:start="281:16" pos:end="281:29"><expr pos:start="281:16" pos:end="281:29"><name pos:start="281:16" pos:end="281:29">video_dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="283:5" pos:end="285:31"><if pos:start="283:5" pos:end="285:31">if <condition pos:start="283:8" pos:end="283:23">(<expr pos:start="283:9" pos:end="283:22"><name pos:start="283:9" pos:end="283:22">audio_dst_file</name></expr>)</condition><block type="pseudo" pos:start="285:9" pos:end="285:31"><block_content pos:start="285:9" pos:end="285:31">

        <expr_stmt pos:start="285:9" pos:end="285:31"><expr pos:start="285:9" pos:end="285:30"><call pos:start="285:9" pos:end="285:30"><name pos:start="285:9" pos:end="285:14">fclose</name><argument_list pos:start="285:15" pos:end="285:30">(<argument pos:start="285:16" pos:end="285:29"><expr pos:start="285:16" pos:end="285:29"><name pos:start="285:16" pos:end="285:29">audio_dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:19"><expr pos:start="287:5" pos:end="287:18"><call pos:start="287:5" pos:end="287:18"><name pos:start="287:5" pos:end="287:11">av_free</name><argument_list pos:start="287:12" pos:end="287:18">(<argument pos:start="287:13" pos:end="287:17"><expr pos:start="287:13" pos:end="287:17"><name pos:start="287:13" pos:end="287:17">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:31"><expr pos:start="289:5" pos:end="289:30"><call pos:start="289:5" pos:end="289:30"><name pos:start="289:5" pos:end="289:11">av_free</name><argument_list pos:start="289:12" pos:end="289:30">(<argument pos:start="289:13" pos:end="289:29"><expr pos:start="289:13" pos:end="289:29"><name pos:start="289:13" pos:end="289:29"><name pos:start="289:13" pos:end="289:26">video_dst_data</name><index pos:start="289:27" pos:end="289:29">[<expr pos:start="289:28" pos:end="289:28"><literal type="number" pos:start="289:28" pos:end="289:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:28"><expr pos:start="291:5" pos:end="291:27"><call pos:start="291:5" pos:end="291:27"><name pos:start="291:5" pos:end="291:11">av_free</name><argument_list pos:start="291:12" pos:end="291:27">(<argument pos:start="291:13" pos:end="291:26"><expr pos:start="291:13" pos:end="291:26"><name pos:start="291:13" pos:end="291:26">audio_dst_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="295:5" pos:end="295:19">return <expr pos:start="295:12" pos:end="295:18"><name pos:start="295:12" pos:end="295:14">ret</name> <operator pos:start="295:16" pos:end="295:16">&lt;</operator> <literal type="number" pos:start="295:18" pos:end="295:18">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
