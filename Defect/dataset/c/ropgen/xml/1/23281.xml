<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23281.c" pos:tabs="8"><function pos:start="1:1" pos:end="551:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vqa_decode_chunk</name><parameter_list pos:start="1:28" pos:end="1:42">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:38">VqaContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="551:1">{<block_content pos:start="5:5" pos:end="549:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:27">chunk_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">byte_skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:22">index</name> <init pos:start="11:24" pos:end="11:26">= <expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">char</name></type> <name pos:start="15:19" pos:end="15:19">r</name></decl>, <decl pos:start="15:22" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:22" pos:end="15:22">g</name></decl>, <decl pos:start="15:25" pos:end="15:25"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:25" pos:end="15:25">b</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">index_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">res</name></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">cbf0_chunk</name> <init pos:start="23:20" pos:end="23:23">= <expr pos:start="23:22" pos:end="23:23"><operator pos:start="23:22" pos:end="23:22">-</operator><literal type="number" pos:start="23:23" pos:end="23:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">cbfz_chunk</name> <init pos:start="25:20" pos:end="25:23">= <expr pos:start="25:22" pos:end="25:23"><operator pos:start="25:22" pos:end="25:22">-</operator><literal type="number" pos:start="25:23" pos:end="25:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">cbp0_chunk</name> <init pos:start="27:20" pos:end="27:23">= <expr pos:start="27:22" pos:end="27:23"><operator pos:start="27:22" pos:end="27:22">-</operator><literal type="number" pos:start="27:23" pos:end="27:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">cbpz_chunk</name> <init pos:start="29:20" pos:end="29:23">= <expr pos:start="29:22" pos:end="29:23"><operator pos:start="29:22" pos:end="29:22">-</operator><literal type="number" pos:start="29:23" pos:end="29:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:18">cpl0_chunk</name> <init pos:start="31:20" pos:end="31:23">= <expr pos:start="31:22" pos:end="31:23"><operator pos:start="31:22" pos:end="31:22">-</operator><literal type="number" pos:start="31:23" pos:end="31:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:24"><decl pos:start="33:5" pos:end="33:23"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:18">cplz_chunk</name> <init pos:start="33:20" pos:end="33:23">= <expr pos:start="33:22" pos:end="33:23"><operator pos:start="33:22" pos:end="33:22">-</operator><literal type="number" pos:start="33:23" pos:end="33:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:18">vptz_chunk</name> <init pos:start="35:20" pos:end="35:23">= <expr pos:start="35:22" pos:end="35:23"><operator pos:start="35:22" pos:end="35:22">-</operator><literal type="number" pos:start="35:23" pos:end="35:23">1</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="39:5" pos:end="39:13"><decl pos:start="39:5" pos:end="39:9"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:9">x</name></decl>, <decl pos:start="39:12" pos:end="39:12"><type ref="prev" pos:start="39:5" pos:end="39:7"/><name pos:start="39:12" pos:end="39:12">y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:18"><decl pos:start="41:5" pos:end="41:17"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">lines</name> <init pos:start="41:15" pos:end="41:17">= <expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:18"><decl pos:start="43:5" pos:end="43:17"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:17">pixel_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:25"><decl pos:start="45:5" pos:end="45:24"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:20">vector_index</name> <init pos:start="45:22" pos:end="45:24">= <expr pos:start="45:24" pos:end="45:24"><literal type="number" pos:start="45:24" pos:end="45:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:19"><decl pos:start="47:5" pos:end="47:18"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:14">lobyte</name> <init pos:start="47:16" pos:end="47:18">= <expr pos:start="47:18" pos:end="47:18"><literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:19"><decl pos:start="49:5" pos:end="49:18"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:14">hibyte</name> <init pos:start="49:16" pos:end="49:18">= <expr pos:start="49:18" pos:end="49:18"><literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:20"><decl pos:start="51:5" pos:end="51:19"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:15">lobytes</name> <init pos:start="51:17" pos:end="51:19">= <expr pos:start="51:19" pos:end="51:19"><literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:44"><decl pos:start="53:5" pos:end="53:43"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:15">hibytes</name> <init pos:start="53:17" pos:end="53:43">= <expr pos:start="53:19" pos:end="53:43"><name pos:start="53:19" pos:end="53:39"><name pos:start="53:19" pos:end="53:19">s</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:39">decode_buffer_size</name></name> <operator pos:start="53:41" pos:end="53:41">/</operator> <literal type="number" pos:start="53:43" pos:end="53:43">2</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:66">/* first, traverse through the frame and find the subchunks */</comment>

    <while pos:start="59:5" pos:end="155:5">while <condition pos:start="59:11" pos:end="59:51">(<expr pos:start="59:12" pos:end="59:50"><call pos:start="59:12" pos:end="59:45"><name pos:start="59:12" pos:end="59:37">bytestream2_get_bytes_left</name><argument_list pos:start="59:38" pos:end="59:45">(<argument pos:start="59:39" pos:end="59:44"><expr pos:start="59:39" pos:end="59:44"><operator pos:start="59:39" pos:end="59:39">&amp;</operator><name pos:start="59:40" pos:end="59:44"><name pos:start="59:40" pos:end="59:40">s</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:47" pos:end="59:48">&gt;=</operator> <literal type="number" pos:start="59:50" pos:end="59:50">8</literal></expr>)</condition> <block pos:start="59:53" pos:end="155:5">{<block_content pos:start="63:9" pos:end="153:57">



        <expr_stmt pos:start="63:9" pos:end="63:51"><expr pos:start="63:9" pos:end="63:50"><name pos:start="63:9" pos:end="63:18">chunk_type</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <call pos:start="63:22" pos:end="63:50"><name pos:start="63:22" pos:end="63:42">bytestream2_get_be32u</name><argument_list pos:start="63:43" pos:end="63:50">(<argument pos:start="63:44" pos:end="63:49"><expr pos:start="63:44" pos:end="63:49"><operator pos:start="63:44" pos:end="63:44">&amp;</operator><name pos:start="63:45" pos:end="63:49"><name pos:start="63:45" pos:end="63:45">s</name><operator pos:start="63:46" pos:end="63:47">-&gt;</operator><name pos:start="63:48" pos:end="63:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:46"><expr pos:start="65:9" pos:end="65:45"><name pos:start="65:9" pos:end="65:13">index</name>      <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:45"><name pos:start="65:22" pos:end="65:37">bytestream2_tell</name><argument_list pos:start="65:38" pos:end="65:45">(<argument pos:start="65:39" pos:end="65:44"><expr pos:start="65:39" pos:end="65:44"><operator pos:start="65:39" pos:end="65:39">&amp;</operator><name pos:start="65:40" pos:end="65:44"><name pos:start="65:40" pos:end="65:40">s</name><operator pos:start="65:41" pos:end="65:42">-&gt;</operator><name pos:start="65:43" pos:end="65:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:18">chunk_size</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <call pos:start="67:22" pos:end="67:50"><name pos:start="67:22" pos:end="67:42">bytestream2_get_be32u</name><argument_list pos:start="67:43" pos:end="67:50">(<argument pos:start="67:44" pos:end="67:49"><expr pos:start="67:44" pos:end="67:49"><operator pos:start="67:44" pos:end="67:44">&amp;</operator><name pos:start="67:45" pos:end="67:49"><name pos:start="67:45" pos:end="67:45">s</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="71:9" pos:end="147:9">switch <condition pos:start="71:16" pos:end="71:27">(<expr pos:start="71:17" pos:end="71:26"><name pos:start="71:17" pos:end="71:26">chunk_type</name></expr>)</condition> <block pos:start="71:29" pos:end="147:9">{<block_content pos:start="75:9" pos:end="145:18">



        <case pos:start="75:9" pos:end="75:22">case <expr pos:start="75:14" pos:end="75:21"><name pos:start="75:14" pos:end="75:21">CBF0_TAG</name></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:31"><expr pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:22">cbf0_chunk</name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:30">index</name></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>



        <case pos:start="83:9" pos:end="83:22">case <expr pos:start="83:14" pos:end="83:21"><name pos:start="83:14" pos:end="83:21">CBFZ_TAG</name></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="85:31"><expr pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:22">cbfz_chunk</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:30">index</name></expr>;</expr_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>



        <case pos:start="91:9" pos:end="91:22">case <expr pos:start="91:14" pos:end="91:21"><name pos:start="91:14" pos:end="91:21">CBP0_TAG</name></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:31"><expr pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:22">cbp0_chunk</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:30">index</name></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>



        <case pos:start="99:9" pos:end="99:22">case <expr pos:start="99:14" pos:end="99:21"><name pos:start="99:14" pos:end="99:21">CBPZ_TAG</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:31"><expr pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:22">cbpz_chunk</name> <operator pos:start="101:24" pos:end="101:24">=</operator> <name pos:start="101:26" pos:end="101:30">index</name></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>



        <case pos:start="107:9" pos:end="107:22">case <expr pos:start="107:14" pos:end="107:21"><name pos:start="107:14" pos:end="107:21">CPL0_TAG</name></expr>:</case>

            <expr_stmt pos:start="109:13" pos:end="109:31"><expr pos:start="109:13" pos:end="109:30"><name pos:start="109:13" pos:end="109:22">cpl0_chunk</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <name pos:start="109:26" pos:end="109:30">index</name></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>



        <case pos:start="115:9" pos:end="115:22">case <expr pos:start="115:14" pos:end="115:21"><name pos:start="115:14" pos:end="115:21">CPLZ_TAG</name></expr>:</case>

            <expr_stmt pos:start="117:13" pos:end="117:31"><expr pos:start="117:13" pos:end="117:30"><name pos:start="117:13" pos:end="117:22">cplz_chunk</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <name pos:start="117:26" pos:end="117:30">index</name></expr>;</expr_stmt>

            <break pos:start="119:13" pos:end="119:18">break;</break>



        <case pos:start="123:9" pos:end="123:22">case <expr pos:start="123:14" pos:end="123:21"><name pos:start="123:14" pos:end="123:21">VPTZ_TAG</name></expr>:</case>

            <expr_stmt pos:start="125:13" pos:end="125:31"><expr pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:22">vptz_chunk</name> <operator pos:start="125:24" pos:end="125:24">=</operator> <name pos:start="125:26" pos:end="125:30">index</name></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>



        <default pos:start="131:9" pos:end="131:16">default:</default>

            <expr_stmt pos:start="133:13" pos:end="143:24"><expr pos:start="133:13" pos:end="143:23"><call pos:start="133:13" pos:end="143:23"><name pos:start="133:13" pos:end="133:18">av_log</name><argument_list pos:start="133:19" pos:end="143:23">(<argument pos:start="133:20" pos:end="133:27"><expr pos:start="133:20" pos:end="133:27"><name pos:start="133:20" pos:end="133:27"><name pos:start="133:20" pos:end="133:20">s</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:27">avctx</name></name></expr></argument>, <argument pos:start="133:30" pos:end="133:41"><expr pos:start="133:30" pos:end="133:41"><name pos:start="133:30" pos:end="133:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:44" pos:end="133:88"><expr pos:start="133:44" pos:end="133:88"><literal type="string" pos:start="133:44" pos:end="133:88">"Found unknown chunk type: %c%c%c%c (%08X)\n"</literal></expr></argument>,

            <argument pos:start="135:13" pos:end="135:37"><expr pos:start="135:13" pos:end="135:37"><operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:23">chunk_type</name> <operator pos:start="135:25" pos:end="135:26">&gt;&gt;</operator> <literal type="number" pos:start="135:28" pos:end="135:29">24</literal><operator pos:start="135:30" pos:end="135:30">)</operator> <operator pos:start="135:32" pos:end="135:32">&amp;</operator> <literal type="number" pos:start="135:34" pos:end="135:37">0xFF</literal></expr></argument>,

            <argument pos:start="137:13" pos:end="137:37"><expr pos:start="137:13" pos:end="137:37"><operator pos:start="137:13" pos:end="137:13">(</operator><name pos:start="137:14" pos:end="137:23">chunk_type</name> <operator pos:start="137:25" pos:end="137:26">&gt;&gt;</operator> <literal type="number" pos:start="137:28" pos:end="137:29">16</literal><operator pos:start="137:30" pos:end="137:30">)</operator> <operator pos:start="137:32" pos:end="137:32">&amp;</operator> <literal type="number" pos:start="137:34" pos:end="137:37">0xFF</literal></expr></argument>,

            <argument pos:start="139:13" pos:end="139:37"><expr pos:start="139:13" pos:end="139:37"><operator pos:start="139:13" pos:end="139:13">(</operator><name pos:start="139:14" pos:end="139:23">chunk_type</name> <operator pos:start="139:25" pos:end="139:26">&gt;&gt;</operator>  <literal type="number" pos:start="139:29" pos:end="139:29">8</literal><operator pos:start="139:30" pos:end="139:30">)</operator> <operator pos:start="139:32" pos:end="139:32">&amp;</operator> <literal type="number" pos:start="139:34" pos:end="139:37">0xFF</literal></expr></argument>,

            <argument pos:start="141:13" pos:end="141:37"><expr pos:start="141:13" pos:end="141:37"><operator pos:start="141:13" pos:end="141:13">(</operator><name pos:start="141:14" pos:end="141:23">chunk_type</name> <operator pos:start="141:25" pos:end="141:26">&gt;&gt;</operator>  <literal type="number" pos:start="141:29" pos:end="141:29">0</literal><operator pos:start="141:30" pos:end="141:30">)</operator> <operator pos:start="141:32" pos:end="141:32">&amp;</operator> <literal type="number" pos:start="141:34" pos:end="141:37">0xFF</literal></expr></argument>,

            <argument pos:start="143:13" pos:end="143:22"><expr pos:start="143:13" pos:end="143:22"><name pos:start="143:13" pos:end="143:22">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="151:9" pos:end="151:38"><expr pos:start="151:9" pos:end="151:37"><name pos:start="151:9" pos:end="151:17">byte_skip</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <name pos:start="151:21" pos:end="151:30">chunk_size</name> <operator pos:start="151:32" pos:end="151:32">&amp;</operator> <literal type="number" pos:start="151:34" pos:end="151:37">0x01</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:57"><expr pos:start="153:9" pos:end="153:56"><call pos:start="153:9" pos:end="153:56"><name pos:start="153:9" pos:end="153:24">bytestream2_skip</name><argument_list pos:start="153:25" pos:end="153:56">(<argument pos:start="153:26" pos:end="153:31"><expr pos:start="153:26" pos:end="153:31"><operator pos:start="153:26" pos:end="153:26">&amp;</operator><name pos:start="153:27" pos:end="153:31"><name pos:start="153:27" pos:end="153:27">s</name><operator pos:start="153:28" pos:end="153:29">-&gt;</operator><name pos:start="153:30" pos:end="153:31">gb</name></name></expr></argument>, <argument pos:start="153:34" pos:end="153:55"><expr pos:start="153:34" pos:end="153:55"><name pos:start="153:34" pos:end="153:43">chunk_size</name> <operator pos:start="153:45" pos:end="153:45">+</operator> <name pos:start="153:47" pos:end="153:55">byte_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="159:5" pos:end="159:37">/* next, deal with the palette */</comment>

    <if_stmt pos:start="161:5" pos:end="171:5"><if pos:start="161:5" pos:end="171:5">if <condition pos:start="161:8" pos:end="161:49">(<expr pos:start="161:9" pos:end="161:48"><operator pos:start="161:9" pos:end="161:9">(</operator><name pos:start="161:10" pos:end="161:19">cpl0_chunk</name> <operator pos:start="161:21" pos:end="161:22">!=</operator> <operator pos:start="161:24" pos:end="161:24">-</operator><literal type="number" pos:start="161:25" pos:end="161:25">1</literal><operator pos:start="161:26" pos:end="161:26">)</operator> <operator pos:start="161:28" pos:end="161:29">&amp;&amp;</operator> <operator pos:start="161:31" pos:end="161:31">(</operator><name pos:start="161:32" pos:end="161:41">cplz_chunk</name> <operator pos:start="161:43" pos:end="161:44">!=</operator> <operator pos:start="161:46" pos:end="161:46">-</operator><literal type="number" pos:start="161:47" pos:end="161:47">1</literal><operator pos:start="161:48" pos:end="161:48">)</operator></expr>)</condition> <block pos:start="161:51" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:35">



        <comment type="block" pos:start="165:9" pos:end="165:54">/* a chunk should not have both chunk types */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:85"><expr pos:start="167:9" pos:end="167:84"><call pos:start="167:9" pos:end="167:84"><name pos:start="167:9" pos:end="167:14">av_log</name><argument_list pos:start="167:15" pos:end="167:84">(<argument pos:start="167:16" pos:end="167:23"><expr pos:start="167:16" pos:end="167:23"><name pos:start="167:16" pos:end="167:23"><name pos:start="167:16" pos:end="167:16">s</name><operator pos:start="167:17" pos:end="167:18">-&gt;</operator><name pos:start="167:19" pos:end="167:23">avctx</name></name></expr></argument>, <argument pos:start="167:26" pos:end="167:37"><expr pos:start="167:26" pos:end="167:37"><name pos:start="167:26" pos:end="167:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:40" pos:end="167:83"><expr pos:start="167:40" pos:end="167:83"><literal type="string" pos:start="167:40" pos:end="167:83">"problem: found both CPL0 and CPLZ chunks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="169:9" pos:end="169:35">return <expr pos:start="169:16" pos:end="169:34"><name pos:start="169:16" pos:end="169:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:38">/* decompress the palette chunk */</comment>

    <if_stmt pos:start="177:5" pos:end="185:5"><if pos:start="177:5" pos:end="185:5">if <condition pos:start="177:8" pos:end="177:25">(<expr pos:start="177:9" pos:end="177:24"><name pos:start="177:9" pos:end="177:18">cplz_chunk</name> <operator pos:start="177:20" pos:end="177:21">!=</operator> <operator pos:start="177:23" pos:end="177:23">-</operator><literal type="number" pos:start="177:24" pos:end="177:24">1</literal></expr>)</condition> <block pos:start="177:27" pos:end="185:5">{<block_content>



<comment type="block" pos:start="181:1" pos:end="181:23">/* yet to be handled */</comment>



    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:66">/* convert the RGB palette into the machine's endian format */</comment>

    <if_stmt pos:start="191:5" pos:end="227:5"><if pos:start="191:5" pos:end="227:5">if <condition pos:start="191:8" pos:end="191:25">(<expr pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:18">cpl0_chunk</name> <operator pos:start="191:20" pos:end="191:21">!=</operator> <operator pos:start="191:23" pos:end="191:23">-</operator><literal type="number" pos:start="191:24" pos:end="191:24">1</literal></expr>)</condition> <block pos:start="191:27" pos:end="227:5">{<block_content pos:start="195:9" pos:end="225:9">



        <expr_stmt pos:start="195:9" pos:end="195:55"><expr pos:start="195:9" pos:end="195:54"><call pos:start="195:9" pos:end="195:54"><name pos:start="195:9" pos:end="195:24">bytestream2_seek</name><argument_list pos:start="195:25" pos:end="195:54">(<argument pos:start="195:26" pos:end="195:31"><expr pos:start="195:26" pos:end="195:31"><operator pos:start="195:26" pos:end="195:26">&amp;</operator><name pos:start="195:27" pos:end="195:31"><name pos:start="195:27" pos:end="195:27">s</name><operator pos:start="195:28" pos:end="195:29">-&gt;</operator><name pos:start="195:30" pos:end="195:31">gb</name></name></expr></argument>, <argument pos:start="195:34" pos:end="195:43"><expr pos:start="195:34" pos:end="195:43"><name pos:start="195:34" pos:end="195:43">cpl0_chunk</name></expr></argument>, <argument pos:start="195:46" pos:end="195:53"><expr pos:start="195:46" pos:end="195:53"><name pos:start="195:46" pos:end="195:53">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:50"><expr pos:start="197:9" pos:end="197:49"><name pos:start="197:9" pos:end="197:18">chunk_size</name> <operator pos:start="197:20" pos:end="197:20">=</operator> <call pos:start="197:22" pos:end="197:49"><name pos:start="197:22" pos:end="197:41">bytestream2_get_be32</name><argument_list pos:start="197:42" pos:end="197:49">(<argument pos:start="197:43" pos:end="197:48"><expr pos:start="197:43" pos:end="197:48"><operator pos:start="197:43" pos:end="197:43">&amp;</operator><name pos:start="197:44" pos:end="197:48"><name pos:start="197:44" pos:end="197:44">s</name><operator pos:start="197:45" pos:end="197:46">-&gt;</operator><name pos:start="197:47" pos:end="197:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="199:9" pos:end="199:43">/* sanity check the palette size */</comment>

        <if_stmt pos:start="201:9" pos:end="209:9"><if pos:start="201:9" pos:end="209:9">if <condition pos:start="201:12" pos:end="201:84">(<expr pos:start="201:13" pos:end="201:83"><name pos:start="201:13" pos:end="201:22">chunk_size</name> <operator pos:start="201:24" pos:end="201:24">/</operator> <literal type="number" pos:start="201:26" pos:end="201:26">3</literal> <operator pos:start="201:28" pos:end="201:28">&gt;</operator> <literal type="number" pos:start="201:30" pos:end="201:32">256</literal> <operator pos:start="201:34" pos:end="201:35">||</operator> <name pos:start="201:37" pos:end="201:46">chunk_size</name> <operator pos:start="201:48" pos:end="201:48">&gt;</operator> <call pos:start="201:50" pos:end="201:83"><name pos:start="201:50" pos:end="201:75">bytestream2_get_bytes_left</name><argument_list pos:start="201:76" pos:end="201:83">(<argument pos:start="201:77" pos:end="201:82"><expr pos:start="201:77" pos:end="201:82"><operator pos:start="201:77" pos:end="201:77">&amp;</operator><name pos:start="201:78" pos:end="201:82"><name pos:start="201:78" pos:end="201:78">s</name><operator pos:start="201:79" pos:end="201:80">-&gt;</operator><name pos:start="201:81" pos:end="201:82">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="201:86" pos:end="209:9">{<block_content pos:start="203:13" pos:end="207:39">

            <expr_stmt pos:start="203:13" pos:end="205:32"><expr pos:start="203:13" pos:end="205:31"><call pos:start="203:13" pos:end="205:31"><name pos:start="203:13" pos:end="203:18">av_log</name><argument_list pos:start="203:19" pos:end="205:31">(<argument pos:start="203:20" pos:end="203:27"><expr pos:start="203:20" pos:end="203:27"><name pos:start="203:20" pos:end="203:27"><name pos:start="203:20" pos:end="203:20">s</name><operator pos:start="203:21" pos:end="203:22">-&gt;</operator><name pos:start="203:23" pos:end="203:27">avctx</name></name></expr></argument>, <argument pos:start="203:30" pos:end="203:41"><expr pos:start="203:30" pos:end="203:41"><name pos:start="203:30" pos:end="203:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="203:44" pos:end="203:92"><expr pos:start="203:44" pos:end="203:92"><literal type="string" pos:start="203:44" pos:end="203:92">"problem: found a palette chunk with %d colors\n"</literal></expr></argument>,

                <argument pos:start="205:17" pos:end="205:30"><expr pos:start="205:17" pos:end="205:30"><name pos:start="205:17" pos:end="205:26">chunk_size</name> <operator pos:start="205:28" pos:end="205:28">/</operator> <literal type="number" pos:start="205:30" pos:end="205:30">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="207:13" pos:end="207:39">return <expr pos:start="207:20" pos:end="207:38"><name pos:start="207:20" pos:end="207:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <for pos:start="211:9" pos:end="225:9">for <control pos:start="211:13" pos:end="211:44">(<init pos:start="211:14" pos:end="211:19"><expr pos:start="211:14" pos:end="211:18"><name pos:start="211:14" pos:end="211:14">i</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <literal type="number" pos:start="211:18" pos:end="211:18">0</literal></expr>;</init> <condition pos:start="211:21" pos:end="211:39"><expr pos:start="211:21" pos:end="211:38"><name pos:start="211:21" pos:end="211:21">i</name> <operator pos:start="211:23" pos:end="211:23">&lt;</operator> <name pos:start="211:25" pos:end="211:34">chunk_size</name> <operator pos:start="211:36" pos:end="211:36">/</operator> <literal type="number" pos:start="211:38" pos:end="211:38">3</literal></expr>;</condition> <incr pos:start="211:41" pos:end="211:43"><expr pos:start="211:41" pos:end="211:43"><name pos:start="211:41" pos:end="211:41">i</name><operator pos:start="211:42" pos:end="211:43">++</operator></expr></incr>)</control> <block pos:start="211:46" pos:end="225:9">{<block_content pos:start="215:13" pos:end="223:58">

            <comment type="block" pos:start="213:13" pos:end="213:64">/* scale by 4 to transform 6-bit palette -&gt; 8-bit */</comment>

            <expr_stmt pos:start="215:13" pos:end="215:50"><expr pos:start="215:13" pos:end="215:49"><name pos:start="215:13" pos:end="215:13">r</name> <operator pos:start="215:15" pos:end="215:15">=</operator> <call pos:start="215:17" pos:end="215:45"><name pos:start="215:17" pos:end="215:37">bytestream2_get_byteu</name><argument_list pos:start="215:38" pos:end="215:45">(<argument pos:start="215:39" pos:end="215:44"><expr pos:start="215:39" pos:end="215:44"><operator pos:start="215:39" pos:end="215:39">&amp;</operator><name pos:start="215:40" pos:end="215:44"><name pos:start="215:40" pos:end="215:40">s</name><operator pos:start="215:41" pos:end="215:42">-&gt;</operator><name pos:start="215:43" pos:end="215:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="215:47" pos:end="215:47">*</operator> <literal type="number" pos:start="215:49" pos:end="215:49">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:50"><expr pos:start="217:13" pos:end="217:49"><name pos:start="217:13" pos:end="217:13">g</name> <operator pos:start="217:15" pos:end="217:15">=</operator> <call pos:start="217:17" pos:end="217:45"><name pos:start="217:17" pos:end="217:37">bytestream2_get_byteu</name><argument_list pos:start="217:38" pos:end="217:45">(<argument pos:start="217:39" pos:end="217:44"><expr pos:start="217:39" pos:end="217:44"><operator pos:start="217:39" pos:end="217:39">&amp;</operator><name pos:start="217:40" pos:end="217:44"><name pos:start="217:40" pos:end="217:40">s</name><operator pos:start="217:41" pos:end="217:42">-&gt;</operator><name pos:start="217:43" pos:end="217:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="217:47" pos:end="217:47">*</operator> <literal type="number" pos:start="217:49" pos:end="217:49">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:50"><expr pos:start="219:13" pos:end="219:49"><name pos:start="219:13" pos:end="219:13">b</name> <operator pos:start="219:15" pos:end="219:15">=</operator> <call pos:start="219:17" pos:end="219:45"><name pos:start="219:17" pos:end="219:37">bytestream2_get_byteu</name><argument_list pos:start="219:38" pos:end="219:45">(<argument pos:start="219:39" pos:end="219:44"><expr pos:start="219:39" pos:end="219:44"><operator pos:start="219:39" pos:end="219:39">&amp;</operator><name pos:start="219:40" pos:end="219:44"><name pos:start="219:40" pos:end="219:40">s</name><operator pos:start="219:41" pos:end="219:42">-&gt;</operator><name pos:start="219:43" pos:end="219:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="219:47" pos:end="219:47">*</operator> <literal type="number" pos:start="219:49" pos:end="219:49">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:62"><expr pos:start="221:13" pos:end="221:61"><name pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:22">palette</name><index pos:start="221:23" pos:end="221:25">[<expr pos:start="221:24" pos:end="221:24"><name pos:start="221:24" pos:end="221:24">i</name></expr>]</index></name> <operator pos:start="221:27" pos:end="221:27">=</operator> <literal type="number" pos:start="221:29" pos:end="221:32">0xFF</literal> <operator pos:start="221:34" pos:end="221:35">&lt;&lt;</operator> <literal type="number" pos:start="221:37" pos:end="221:38">24</literal> <operator pos:start="221:40" pos:end="221:40">|</operator> <name pos:start="221:42" pos:end="221:42">r</name> <operator pos:start="221:44" pos:end="221:45">&lt;&lt;</operator> <literal type="number" pos:start="221:47" pos:end="221:48">16</literal> <operator pos:start="221:50" pos:end="221:50">|</operator> <name pos:start="221:52" pos:end="221:52">g</name> <operator pos:start="221:54" pos:end="221:55">&lt;&lt;</operator> <literal type="number" pos:start="221:57" pos:end="221:57">8</literal> <operator pos:start="221:59" pos:end="221:59">|</operator> <name pos:start="221:61" pos:end="221:61">b</name></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:58"><expr pos:start="223:13" pos:end="223:57"><name pos:start="223:13" pos:end="223:25"><name pos:start="223:13" pos:end="223:13">s</name><operator pos:start="223:14" pos:end="223:15">-&gt;</operator><name pos:start="223:16" pos:end="223:22">palette</name><index pos:start="223:23" pos:end="223:25">[<expr pos:start="223:24" pos:end="223:24"><name pos:start="223:24" pos:end="223:24">i</name></expr>]</index></name> <operator pos:start="223:27" pos:end="223:28">|=</operator> <name pos:start="223:30" pos:end="223:42"><name pos:start="223:30" pos:end="223:30">s</name><operator pos:start="223:31" pos:end="223:32">-&gt;</operator><name pos:start="223:33" pos:end="223:39">palette</name><index pos:start="223:40" pos:end="223:42">[<expr pos:start="223:41" pos:end="223:41"><name pos:start="223:41" pos:end="223:41">i</name></expr>]</index></name> <operator pos:start="223:44" pos:end="223:45">&gt;&gt;</operator> <literal type="number" pos:start="223:47" pos:end="223:47">6</literal> <operator pos:start="223:49" pos:end="223:49">&amp;</operator> <literal type="number" pos:start="223:51" pos:end="223:57">0x30303</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:40">/* next, look for a full codebook */</comment>

    <if_stmt pos:start="233:5" pos:end="243:5"><if pos:start="233:5" pos:end="243:5">if <condition pos:start="233:8" pos:end="233:49">(<expr pos:start="233:9" pos:end="233:48"><operator pos:start="233:9" pos:end="233:9">(</operator><name pos:start="233:10" pos:end="233:19">cbf0_chunk</name> <operator pos:start="233:21" pos:end="233:22">!=</operator> <operator pos:start="233:24" pos:end="233:24">-</operator><literal type="number" pos:start="233:25" pos:end="233:25">1</literal><operator pos:start="233:26" pos:end="233:26">)</operator> <operator pos:start="233:28" pos:end="233:29">&amp;&amp;</operator> <operator pos:start="233:31" pos:end="233:31">(</operator><name pos:start="233:32" pos:end="233:41">cbfz_chunk</name> <operator pos:start="233:43" pos:end="233:44">!=</operator> <operator pos:start="233:46" pos:end="233:46">-</operator><literal type="number" pos:start="233:47" pos:end="233:47">1</literal><operator pos:start="233:48" pos:end="233:48">)</operator></expr>)</condition> <block pos:start="233:51" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:35">



        <comment type="block" pos:start="237:9" pos:end="237:54">/* a chunk should not have both chunk types */</comment>

        <expr_stmt pos:start="239:9" pos:end="239:85"><expr pos:start="239:9" pos:end="239:84"><call pos:start="239:9" pos:end="239:84"><name pos:start="239:9" pos:end="239:14">av_log</name><argument_list pos:start="239:15" pos:end="239:84">(<argument pos:start="239:16" pos:end="239:23"><expr pos:start="239:16" pos:end="239:23"><name pos:start="239:16" pos:end="239:23"><name pos:start="239:16" pos:end="239:16">s</name><operator pos:start="239:17" pos:end="239:18">-&gt;</operator><name pos:start="239:19" pos:end="239:23">avctx</name></name></expr></argument>, <argument pos:start="239:26" pos:end="239:37"><expr pos:start="239:26" pos:end="239:37"><name pos:start="239:26" pos:end="239:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="239:40" pos:end="239:83"><expr pos:start="239:40" pos:end="239:83"><literal type="string" pos:start="239:40" pos:end="239:83">"problem: found both CBF0 and CBFZ chunks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="241:9" pos:end="241:35">return <expr pos:start="241:16" pos:end="241:34"><name pos:start="241:16" pos:end="241:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="247:5" pos:end="247:44">/* decompress the full codebook chunk */</comment>

    <if_stmt pos:start="249:5" pos:end="263:5"><if pos:start="249:5" pos:end="263:5">if <condition pos:start="249:8" pos:end="249:25">(<expr pos:start="249:9" pos:end="249:24"><name pos:start="249:9" pos:end="249:18">cbfz_chunk</name> <operator pos:start="249:20" pos:end="249:21">!=</operator> <operator pos:start="249:23" pos:end="249:23">-</operator><literal type="number" pos:start="249:24" pos:end="249:24">1</literal></expr>)</condition> <block pos:start="249:27" pos:end="263:5">{<block_content pos:start="253:9" pos:end="261:23">



        <expr_stmt pos:start="253:9" pos:end="253:55"><expr pos:start="253:9" pos:end="253:54"><call pos:start="253:9" pos:end="253:54"><name pos:start="253:9" pos:end="253:24">bytestream2_seek</name><argument_list pos:start="253:25" pos:end="253:54">(<argument pos:start="253:26" pos:end="253:31"><expr pos:start="253:26" pos:end="253:31"><operator pos:start="253:26" pos:end="253:26">&amp;</operator><name pos:start="253:27" pos:end="253:31"><name pos:start="253:27" pos:end="253:27">s</name><operator pos:start="253:28" pos:end="253:29">-&gt;</operator><name pos:start="253:30" pos:end="253:31">gb</name></name></expr></argument>, <argument pos:start="253:34" pos:end="253:43"><expr pos:start="253:34" pos:end="253:43"><name pos:start="253:34" pos:end="253:43">cbfz_chunk</name></expr></argument>, <argument pos:start="253:46" pos:end="253:53"><expr pos:start="253:46" pos:end="253:53"><name pos:start="253:46" pos:end="253:53">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:50"><expr pos:start="255:9" pos:end="255:49"><name pos:start="255:9" pos:end="255:18">chunk_size</name> <operator pos:start="255:20" pos:end="255:20">=</operator> <call pos:start="255:22" pos:end="255:49"><name pos:start="255:22" pos:end="255:41">bytestream2_get_be32</name><argument_list pos:start="255:42" pos:end="255:49">(<argument pos:start="255:43" pos:end="255:48"><expr pos:start="255:43" pos:end="255:48"><operator pos:start="255:43" pos:end="255:43">&amp;</operator><name pos:start="255:44" pos:end="255:48"><name pos:start="255:44" pos:end="255:44">s</name><operator pos:start="255:45" pos:end="255:46">-&gt;</operator><name pos:start="255:47" pos:end="255:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="261:23"><if pos:start="257:9" pos:end="261:23">if <condition pos:start="257:12" pos:end="259:61">(<expr pos:start="257:13" pos:end="259:60"><operator pos:start="257:13" pos:end="257:13">(</operator><name pos:start="257:14" pos:end="257:16">res</name> <operator pos:start="257:18" pos:end="257:18">=</operator> <call pos:start="257:20" pos:end="259:55"><name pos:start="257:20" pos:end="257:34">decode_format80</name><argument_list pos:start="257:35" pos:end="259:55">(<argument pos:start="257:36" pos:end="257:36"><expr pos:start="257:36" pos:end="257:36"><name pos:start="257:36" pos:end="257:36">s</name></expr></argument>, <argument pos:start="257:39" pos:end="257:48"><expr pos:start="257:39" pos:end="257:48"><name pos:start="257:39" pos:end="257:48">chunk_size</name></expr></argument>, <argument pos:start="257:51" pos:end="257:61"><expr pos:start="257:51" pos:end="257:61"><name pos:start="257:51" pos:end="257:61"><name pos:start="257:51" pos:end="257:51">s</name><operator pos:start="257:52" pos:end="257:53">-&gt;</operator><name pos:start="257:54" pos:end="257:61">codebook</name></name></expr></argument>,

                                   <argument pos:start="259:36" pos:end="259:51"><expr pos:start="259:36" pos:end="259:51"><name pos:start="259:36" pos:end="259:51"><name pos:start="259:36" pos:end="259:36">s</name><operator pos:start="259:37" pos:end="259:38">-&gt;</operator><name pos:start="259:39" pos:end="259:51">codebook_size</name></name></expr></argument>, <argument pos:start="259:54" pos:end="259:54"><expr pos:start="259:54" pos:end="259:54"><literal type="number" pos:start="259:54" pos:end="259:54">0</literal></expr></argument>)</argument_list></call><operator pos:start="259:56" pos:end="259:56">)</operator> <operator pos:start="259:58" pos:end="259:58">&lt;</operator> <literal type="number" pos:start="259:60" pos:end="259:60">0</literal></expr>)</condition><block type="pseudo" pos:start="261:13" pos:end="261:23"><block_content pos:start="261:13" pos:end="261:23">

            <return pos:start="261:13" pos:end="261:23">return <expr pos:start="261:20" pos:end="261:22"><name pos:start="261:20" pos:end="261:22">res</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:30">/* copy a full codebook */</comment>

    <if_stmt pos:start="269:5" pos:end="293:5"><if pos:start="269:5" pos:end="293:5">if <condition pos:start="269:8" pos:end="269:25">(<expr pos:start="269:9" pos:end="269:24"><name pos:start="269:9" pos:end="269:18">cbf0_chunk</name> <operator pos:start="269:20" pos:end="269:21">!=</operator> <operator pos:start="269:23" pos:end="269:23">-</operator><literal type="number" pos:start="269:24" pos:end="269:24">1</literal></expr>)</condition> <block pos:start="269:27" pos:end="293:5">{<block_content pos:start="273:9" pos:end="291:64">



        <expr_stmt pos:start="273:9" pos:end="273:55"><expr pos:start="273:9" pos:end="273:54"><call pos:start="273:9" pos:end="273:54"><name pos:start="273:9" pos:end="273:24">bytestream2_seek</name><argument_list pos:start="273:25" pos:end="273:54">(<argument pos:start="273:26" pos:end="273:31"><expr pos:start="273:26" pos:end="273:31"><operator pos:start="273:26" pos:end="273:26">&amp;</operator><name pos:start="273:27" pos:end="273:31"><name pos:start="273:27" pos:end="273:27">s</name><operator pos:start="273:28" pos:end="273:29">-&gt;</operator><name pos:start="273:30" pos:end="273:31">gb</name></name></expr></argument>, <argument pos:start="273:34" pos:end="273:43"><expr pos:start="273:34" pos:end="273:43"><name pos:start="273:34" pos:end="273:43">cbf0_chunk</name></expr></argument>, <argument pos:start="273:46" pos:end="273:53"><expr pos:start="273:46" pos:end="273:53"><name pos:start="273:46" pos:end="273:53">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:50"><expr pos:start="275:9" pos:end="275:49"><name pos:start="275:9" pos:end="275:18">chunk_size</name> <operator pos:start="275:20" pos:end="275:20">=</operator> <call pos:start="275:22" pos:end="275:49"><name pos:start="275:22" pos:end="275:41">bytestream2_get_be32</name><argument_list pos:start="275:42" pos:end="275:49">(<argument pos:start="275:43" pos:end="275:48"><expr pos:start="275:43" pos:end="275:48"><operator pos:start="275:43" pos:end="275:43">&amp;</operator><name pos:start="275:44" pos:end="275:48"><name pos:start="275:44" pos:end="275:44">s</name><operator pos:start="275:45" pos:end="275:46">-&gt;</operator><name pos:start="275:47" pos:end="275:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="277:9" pos:end="277:49">/* sanity check the full codebook size */</comment>

        <if_stmt pos:start="279:9" pos:end="287:9"><if pos:start="279:9" pos:end="287:9">if <condition pos:start="279:12" pos:end="279:43">(<expr pos:start="279:13" pos:end="279:42"><name pos:start="279:13" pos:end="279:22">chunk_size</name> <operator pos:start="279:24" pos:end="279:24">&gt;</operator> <name pos:start="279:26" pos:end="279:42">MAX_CODEBOOK_SIZE</name></expr>)</condition> <block pos:start="279:45" pos:end="287:9">{<block_content pos:start="281:13" pos:end="285:39">

            <expr_stmt pos:start="281:13" pos:end="283:28"><expr pos:start="281:13" pos:end="283:27"><call pos:start="281:13" pos:end="283:27"><name pos:start="281:13" pos:end="281:18">av_log</name><argument_list pos:start="281:19" pos:end="283:27">(<argument pos:start="281:20" pos:end="281:27"><expr pos:start="281:20" pos:end="281:27"><name pos:start="281:20" pos:end="281:27"><name pos:start="281:20" pos:end="281:20">s</name><operator pos:start="281:21" pos:end="281:22">-&gt;</operator><name pos:start="281:23" pos:end="281:27">avctx</name></name></expr></argument>, <argument pos:start="281:30" pos:end="281:41"><expr pos:start="281:30" pos:end="281:41"><name pos:start="281:30" pos:end="281:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="281:44" pos:end="281:89"><expr pos:start="281:44" pos:end="281:89"><literal type="string" pos:start="281:44" pos:end="281:89">"problem: CBF0 chunk too large (0x%X bytes)\n"</literal></expr></argument>,

                <argument pos:start="283:17" pos:end="283:26"><expr pos:start="283:17" pos:end="283:26"><name pos:start="283:17" pos:end="283:26">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="285:13" pos:end="285:39">return <expr pos:start="285:20" pos:end="285:38"><name pos:start="285:20" pos:end="285:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="291:9" pos:end="291:64"><expr pos:start="291:9" pos:end="291:63"><call pos:start="291:9" pos:end="291:63"><name pos:start="291:9" pos:end="291:30">bytestream2_get_buffer</name><argument_list pos:start="291:31" pos:end="291:63">(<argument pos:start="291:32" pos:end="291:37"><expr pos:start="291:32" pos:end="291:37"><operator pos:start="291:32" pos:end="291:32">&amp;</operator><name pos:start="291:33" pos:end="291:37"><name pos:start="291:33" pos:end="291:33">s</name><operator pos:start="291:34" pos:end="291:35">-&gt;</operator><name pos:start="291:36" pos:end="291:37">gb</name></name></expr></argument>, <argument pos:start="291:40" pos:end="291:50"><expr pos:start="291:40" pos:end="291:50"><name pos:start="291:40" pos:end="291:50"><name pos:start="291:40" pos:end="291:40">s</name><operator pos:start="291:41" pos:end="291:42">-&gt;</operator><name pos:start="291:43" pos:end="291:50">codebook</name></name></expr></argument>, <argument pos:start="291:53" pos:end="291:62"><expr pos:start="291:53" pos:end="291:62"><name pos:start="291:53" pos:end="291:62">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="297:5" pos:end="297:26">/* decode the frame */</comment>

    <if_stmt pos:start="299:5" pos:end="309:5"><if pos:start="299:5" pos:end="309:5">if <condition pos:start="299:8" pos:end="299:25">(<expr pos:start="299:9" pos:end="299:24"><name pos:start="299:9" pos:end="299:18">vptz_chunk</name> <operator pos:start="299:20" pos:end="299:21">==</operator> <operator pos:start="299:23" pos:end="299:23">-</operator><literal type="number" pos:start="299:24" pos:end="299:24">1</literal></expr>)</condition> <block pos:start="299:27" pos:end="309:5">{<block_content pos:start="305:9" pos:end="307:35">



        <comment type="block" pos:start="303:9" pos:end="303:58">/* something is wrong if there is no VPTZ chunk */</comment>

        <expr_stmt pos:start="305:9" pos:end="305:73"><expr pos:start="305:9" pos:end="305:72"><call pos:start="305:9" pos:end="305:72"><name pos:start="305:9" pos:end="305:14">av_log</name><argument_list pos:start="305:15" pos:end="305:72">(<argument pos:start="305:16" pos:end="305:23"><expr pos:start="305:16" pos:end="305:23"><name pos:start="305:16" pos:end="305:23"><name pos:start="305:16" pos:end="305:16">s</name><operator pos:start="305:17" pos:end="305:18">-&gt;</operator><name pos:start="305:19" pos:end="305:23">avctx</name></name></expr></argument>, <argument pos:start="305:26" pos:end="305:37"><expr pos:start="305:26" pos:end="305:37"><name pos:start="305:26" pos:end="305:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="305:40" pos:end="305:71"><expr pos:start="305:40" pos:end="305:71"><literal type="string" pos:start="305:40" pos:end="305:71">"problem: no VPTZ chunk found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="307:9" pos:end="307:35">return <expr pos:start="307:16" pos:end="307:34"><name pos:start="307:16" pos:end="307:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="313:5" pos:end="313:51"><expr pos:start="313:5" pos:end="313:50"><call pos:start="313:5" pos:end="313:50"><name pos:start="313:5" pos:end="313:20">bytestream2_seek</name><argument_list pos:start="313:21" pos:end="313:50">(<argument pos:start="313:22" pos:end="313:27"><expr pos:start="313:22" pos:end="313:27"><operator pos:start="313:22" pos:end="313:22">&amp;</operator><name pos:start="313:23" pos:end="313:27"><name pos:start="313:23" pos:end="313:23">s</name><operator pos:start="313:24" pos:end="313:25">-&gt;</operator><name pos:start="313:26" pos:end="313:27">gb</name></name></expr></argument>, <argument pos:start="313:30" pos:end="313:39"><expr pos:start="313:30" pos:end="313:39"><name pos:start="313:30" pos:end="313:39">vptz_chunk</name></expr></argument>, <argument pos:start="313:42" pos:end="313:49"><expr pos:start="313:42" pos:end="313:49"><name pos:start="313:42" pos:end="313:49">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="315:46"><expr pos:start="315:5" pos:end="315:45"><name pos:start="315:5" pos:end="315:14">chunk_size</name> <operator pos:start="315:16" pos:end="315:16">=</operator> <call pos:start="315:18" pos:end="315:45"><name pos:start="315:18" pos:end="315:37">bytestream2_get_be32</name><argument_list pos:start="315:38" pos:end="315:45">(<argument pos:start="315:39" pos:end="315:44"><expr pos:start="315:39" pos:end="315:44"><operator pos:start="315:39" pos:end="315:39">&amp;</operator><name pos:start="315:40" pos:end="315:44"><name pos:start="315:40" pos:end="315:40">s</name><operator pos:start="315:41" pos:end="315:42">-&gt;</operator><name pos:start="315:43" pos:end="315:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="317:5" pos:end="321:19"><if pos:start="317:5" pos:end="321:19">if <condition pos:start="317:8" pos:end="319:80">(<expr pos:start="317:9" pos:end="319:79"><operator pos:start="317:9" pos:end="317:9">(</operator><name pos:start="317:10" pos:end="317:12">res</name> <operator pos:start="317:14" pos:end="317:14">=</operator> <call pos:start="317:16" pos:end="319:74"><name pos:start="317:16" pos:end="317:30">decode_format80</name><argument_list pos:start="317:31" pos:end="319:74">(<argument pos:start="317:32" pos:end="317:32"><expr pos:start="317:32" pos:end="317:32"><name pos:start="317:32" pos:end="317:32">s</name></expr></argument>, <argument pos:start="317:35" pos:end="317:44"><expr pos:start="317:35" pos:end="317:44"><name pos:start="317:35" pos:end="317:44">chunk_size</name></expr></argument>,

                               <argument pos:start="319:32" pos:end="319:47"><expr pos:start="319:32" pos:end="319:47"><name pos:start="319:32" pos:end="319:47"><name pos:start="319:32" pos:end="319:32">s</name><operator pos:start="319:33" pos:end="319:34">-&gt;</operator><name pos:start="319:35" pos:end="319:47">decode_buffer</name></name></expr></argument>, <argument pos:start="319:50" pos:end="319:70"><expr pos:start="319:50" pos:end="319:70"><name pos:start="319:50" pos:end="319:70"><name pos:start="319:50" pos:end="319:50">s</name><operator pos:start="319:51" pos:end="319:52">-&gt;</operator><name pos:start="319:53" pos:end="319:70">decode_buffer_size</name></name></expr></argument>, <argument pos:start="319:73" pos:end="319:73"><expr pos:start="319:73" pos:end="319:73"><literal type="number" pos:start="319:73" pos:end="319:73">1</literal></expr></argument>)</argument_list></call><operator pos:start="319:75" pos:end="319:75">)</operator> <operator pos:start="319:77" pos:end="319:77">&lt;</operator> <literal type="number" pos:start="319:79" pos:end="319:79">0</literal></expr>)</condition><block type="pseudo" pos:start="321:9" pos:end="321:19"><block_content pos:start="321:9" pos:end="321:19">

        <return pos:start="321:9" pos:end="321:19">return <expr pos:start="321:16" pos:end="321:18"><name pos:start="321:16" pos:end="321:18">res</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="325:5" pos:end="325:37">/* render the final PAL8 frame */</comment>

    <if_stmt pos:start="327:5" pos:end="333:24"><if pos:start="327:5" pos:end="329:24">if <condition pos:start="327:8" pos:end="327:30">(<expr pos:start="327:9" pos:end="327:29"><name pos:start="327:9" pos:end="327:24"><name pos:start="327:9" pos:end="327:9">s</name><operator pos:start="327:10" pos:end="327:11">-&gt;</operator><name pos:start="327:12" pos:end="327:24">vector_height</name></name> <operator pos:start="327:26" pos:end="327:27">==</operator> <literal type="number" pos:start="327:29" pos:end="327:29">4</literal></expr>)</condition><block type="pseudo" pos:start="329:9" pos:end="329:24"><block_content pos:start="329:9" pos:end="329:24">

        <expr_stmt pos:start="329:9" pos:end="329:24"><expr pos:start="329:9" pos:end="329:23"><name pos:start="329:9" pos:end="329:19">index_shift</name> <operator pos:start="329:21" pos:end="329:21">=</operator> <literal type="number" pos:start="329:23" pos:end="329:23">4</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="331:5" pos:end="333:24">else<block type="pseudo" pos:start="333:9" pos:end="333:24"><block_content pos:start="333:9" pos:end="333:24">

        <expr_stmt pos:start="333:9" pos:end="333:24"><expr pos:start="333:9" pos:end="333:23"><name pos:start="333:9" pos:end="333:19">index_shift</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <literal type="number" pos:start="333:23" pos:end="333:23">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <for pos:start="335:5" pos:end="433:5">for <control pos:start="335:9" pos:end="335:53">(<init pos:start="335:10" pos:end="335:15"><expr pos:start="335:10" pos:end="335:14"><name pos:start="335:10" pos:end="335:10">y</name> <operator pos:start="335:12" pos:end="335:12">=</operator> <literal type="number" pos:start="335:14" pos:end="335:14">0</literal></expr>;</init> <condition pos:start="335:17" pos:end="335:30"><expr pos:start="335:17" pos:end="335:29"><name pos:start="335:17" pos:end="335:17">y</name> <operator pos:start="335:19" pos:end="335:19">&lt;</operator> <name pos:start="335:21" pos:end="335:29"><name pos:start="335:21" pos:end="335:21">s</name><operator pos:start="335:22" pos:end="335:23">-&gt;</operator><name pos:start="335:24" pos:end="335:29">height</name></name></expr>;</condition> <incr pos:start="335:32" pos:end="335:52"><expr pos:start="335:32" pos:end="335:52"><name pos:start="335:32" pos:end="335:32">y</name> <operator pos:start="335:34" pos:end="335:35">+=</operator> <name pos:start="335:37" pos:end="335:52"><name pos:start="335:37" pos:end="335:37">s</name><operator pos:start="335:38" pos:end="335:39">-&gt;</operator><name pos:start="335:40" pos:end="335:52">vector_height</name></name></expr></incr>)</control> <block pos:start="335:55" pos:end="433:5">{<block_content pos:start="337:9" pos:end="431:9">

        <for pos:start="337:9" pos:end="431:9">for <control pos:start="337:13" pos:end="337:63">(<init pos:start="337:14" pos:end="337:19"><expr pos:start="337:14" pos:end="337:18"><name pos:start="337:14" pos:end="337:14">x</name> <operator pos:start="337:16" pos:end="337:16">=</operator> <literal type="number" pos:start="337:18" pos:end="337:18">0</literal></expr>;</init> <condition pos:start="337:21" pos:end="337:33"><expr pos:start="337:21" pos:end="337:32"><name pos:start="337:21" pos:end="337:21">x</name> <operator pos:start="337:23" pos:end="337:23">&lt;</operator> <name pos:start="337:25" pos:end="337:32"><name pos:start="337:25" pos:end="337:25">s</name><operator pos:start="337:26" pos:end="337:27">-&gt;</operator><name pos:start="337:28" pos:end="337:32">width</name></name></expr>;</condition> <incr pos:start="337:35" pos:end="337:62"><expr pos:start="337:35" pos:end="337:40"><name pos:start="337:35" pos:end="337:35">x</name> <operator pos:start="337:37" pos:end="337:38">+=</operator> <literal type="number" pos:start="337:40" pos:end="337:40">4</literal></expr><operator pos:start="337:41" pos:end="337:41">,</operator> <expr pos:start="337:43" pos:end="337:51"><name pos:start="337:43" pos:end="337:49">lobytes</name><operator pos:start="337:50" pos:end="337:51">++</operator></expr><operator pos:start="337:52" pos:end="337:52">,</operator> <expr pos:start="337:54" pos:end="337:62"><name pos:start="337:54" pos:end="337:60">hibytes</name><operator pos:start="337:61" pos:end="337:62">++</operator></expr></incr>)</control> <block pos:start="337:65" pos:end="431:9">{<block_content pos:start="339:13" pos:end="429:13">

            <expr_stmt pos:start="339:13" pos:end="339:53"><expr pos:start="339:13" pos:end="339:52"><name pos:start="339:13" pos:end="339:21">pixel_ptr</name> <operator pos:start="339:23" pos:end="339:23">=</operator> <name pos:start="339:25" pos:end="339:25">y</name> <operator pos:start="339:27" pos:end="339:27">*</operator> <name pos:start="339:29" pos:end="339:48"><name pos:start="339:29" pos:end="339:29">s</name><operator pos:start="339:30" pos:end="339:31">-&gt;</operator><name pos:start="339:32" pos:end="339:36">frame</name><operator pos:start="339:37" pos:end="339:37">.</operator><name pos:start="339:38" pos:end="339:45">linesize</name><index pos:start="339:46" pos:end="339:48">[<expr pos:start="339:47" pos:end="339:47"><literal type="number" pos:start="339:47" pos:end="339:47">0</literal></expr>]</index></name> <operator pos:start="339:50" pos:end="339:50">+</operator> <name pos:start="339:52" pos:end="339:52">x</name></expr>;</expr_stmt>



            <comment type="block" pos:start="343:13" pos:end="345:34">/* get the vector index, the method for which varies according to

             * VQA file version */</comment>

            <switch pos:start="347:13" pos:end="413:13">switch <condition pos:start="347:20" pos:end="347:35">(<expr pos:start="347:21" pos:end="347:34"><name pos:start="347:21" pos:end="347:34"><name pos:start="347:21" pos:end="347:21">s</name><operator pos:start="347:22" pos:end="347:23">-&gt;</operator><name pos:start="347:24" pos:end="347:34">vqa_version</name></name></expr>)</condition> <block pos:start="347:37" pos:end="413:13">{<block_content pos:start="351:13" pos:end="411:22">



            <case pos:start="351:13" pos:end="351:19">case <expr pos:start="351:18" pos:end="351:18"><literal type="number" pos:start="351:18" pos:end="351:18">1</literal></expr>:</case>

                <expr_stmt pos:start="353:17" pos:end="353:55"><expr pos:start="353:17" pos:end="353:54"><name pos:start="353:17" pos:end="353:22">lobyte</name> <operator pos:start="353:24" pos:end="353:24">=</operator> <name pos:start="353:26" pos:end="353:54"><name pos:start="353:26" pos:end="353:26">s</name><operator pos:start="353:27" pos:end="353:28">-&gt;</operator><name pos:start="353:29" pos:end="353:41">decode_buffer</name><index pos:start="353:42" pos:end="353:54">[<expr pos:start="353:43" pos:end="353:53"><name pos:start="353:43" pos:end="353:49">lobytes</name> <operator pos:start="353:51" pos:end="353:51">*</operator> <literal type="number" pos:start="353:53" pos:end="353:53">2</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="355:17" pos:end="355:61"><expr pos:start="355:17" pos:end="355:60"><name pos:start="355:17" pos:end="355:22">hibyte</name> <operator pos:start="355:24" pos:end="355:24">=</operator> <name pos:start="355:26" pos:end="355:60"><name pos:start="355:26" pos:end="355:26">s</name><operator pos:start="355:27" pos:end="355:28">-&gt;</operator><name pos:start="355:29" pos:end="355:41">decode_buffer</name><index pos:start="355:42" pos:end="355:60">[<expr pos:start="355:43" pos:end="355:59"><operator pos:start="355:43" pos:end="355:43">(</operator><name pos:start="355:44" pos:end="355:50">lobytes</name> <operator pos:start="355:52" pos:end="355:52">*</operator> <literal type="number" pos:start="355:54" pos:end="355:54">2</literal><operator pos:start="355:55" pos:end="355:55">)</operator> <operator pos:start="355:57" pos:end="355:57">+</operator> <literal type="number" pos:start="355:59" pos:end="355:59">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:61"><expr pos:start="357:17" pos:end="357:60"><name pos:start="357:17" pos:end="357:28">vector_index</name> <operator pos:start="357:30" pos:end="357:30">=</operator> <operator pos:start="357:32" pos:end="357:32">(</operator><operator pos:start="357:33" pos:end="357:33">(</operator><name pos:start="357:34" pos:end="357:39">hibyte</name> <operator pos:start="357:41" pos:end="357:42">&lt;&lt;</operator> <literal type="number" pos:start="357:44" pos:end="357:44">8</literal><operator pos:start="357:45" pos:end="357:45">)</operator> <operator pos:start="357:47" pos:end="357:47">|</operator> <name pos:start="357:49" pos:end="357:54">lobyte</name><operator pos:start="357:55" pos:end="357:55">)</operator> <operator pos:start="357:57" pos:end="357:58">&gt;&gt;</operator> <literal type="number" pos:start="357:60" pos:end="357:60">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:45"><expr pos:start="359:17" pos:end="359:44"><name pos:start="359:17" pos:end="359:28">vector_index</name> <operator pos:start="359:30" pos:end="359:32">&lt;&lt;=</operator> <name pos:start="359:34" pos:end="359:44">index_shift</name></expr>;</expr_stmt>

                <expr_stmt pos:start="361:17" pos:end="361:41"><expr pos:start="361:17" pos:end="361:40"><name pos:start="361:17" pos:end="361:21">lines</name> <operator pos:start="361:23" pos:end="361:23">=</operator> <name pos:start="361:25" pos:end="361:40"><name pos:start="361:25" pos:end="361:25">s</name><operator pos:start="361:26" pos:end="361:27">-&gt;</operator><name pos:start="361:28" pos:end="361:40">vector_height</name></name></expr>;</expr_stmt>

                <comment type="block" pos:start="363:17" pos:end="363:55">/* uniform color fill - a quick hack */</comment>

                <if_stmt pos:start="365:17" pos:end="383:17"><if pos:start="365:17" pos:end="383:17">if <condition pos:start="365:20" pos:end="365:35">(<expr pos:start="365:21" pos:end="365:34"><name pos:start="365:21" pos:end="365:26">hibyte</name> <operator pos:start="365:28" pos:end="365:29">==</operator> <literal type="number" pos:start="365:31" pos:end="365:34">0xFF</literal></expr>)</condition> <block pos:start="365:37" pos:end="383:17">{<block_content pos:start="367:21" pos:end="381:28">

                    <while pos:start="367:21" pos:end="379:21">while <condition pos:start="367:27" pos:end="367:35">(<expr pos:start="367:28" pos:end="367:34"><name pos:start="367:28" pos:end="367:32">lines</name><operator pos:start="367:33" pos:end="367:34">--</operator></expr>)</condition> <block pos:start="367:37" pos:end="379:21">{<block_content pos:start="369:25" pos:end="377:58">

                        <expr_stmt pos:start="369:25" pos:end="369:71"><expr pos:start="369:25" pos:end="369:70"><name pos:start="369:25" pos:end="369:55"><name pos:start="369:25" pos:end="369:25">s</name><operator pos:start="369:26" pos:end="369:27">-&gt;</operator><name pos:start="369:28" pos:end="369:32">frame</name><operator pos:start="369:33" pos:end="369:33">.</operator><name pos:start="369:34" pos:end="369:37">data</name><index pos:start="369:38" pos:end="369:40">[<expr pos:start="369:39" pos:end="369:39"><literal type="number" pos:start="369:39" pos:end="369:39">0</literal></expr>]</index><index pos:start="369:41" pos:end="369:55">[<expr pos:start="369:42" pos:end="369:54"><name pos:start="369:42" pos:end="369:50">pixel_ptr</name> <operator pos:start="369:52" pos:end="369:52">+</operator> <literal type="number" pos:start="369:54" pos:end="369:54">0</literal></expr>]</index></name> <operator pos:start="369:57" pos:end="369:57">=</operator> <literal type="number" pos:start="369:59" pos:end="369:63">255</literal> <operator pos:start="369:63" pos:end="369:63">-</operator> <name pos:start="369:65" pos:end="369:70">lobyte</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="371:25" pos:end="371:71"><expr pos:start="371:25" pos:end="371:70"><name pos:start="371:25" pos:end="371:55"><name pos:start="371:25" pos:end="371:25">s</name><operator pos:start="371:26" pos:end="371:27">-&gt;</operator><name pos:start="371:28" pos:end="371:32">frame</name><operator pos:start="371:33" pos:end="371:33">.</operator><name pos:start="371:34" pos:end="371:37">data</name><index pos:start="371:38" pos:end="371:40">[<expr pos:start="371:39" pos:end="371:39"><literal type="number" pos:start="371:39" pos:end="371:39">0</literal></expr>]</index><index pos:start="371:41" pos:end="371:55">[<expr pos:start="371:42" pos:end="371:54"><name pos:start="371:42" pos:end="371:50">pixel_ptr</name> <operator pos:start="371:52" pos:end="371:52">+</operator> <literal type="number" pos:start="371:54" pos:end="371:54">1</literal></expr>]</index></name> <operator pos:start="371:57" pos:end="371:57">=</operator> <literal type="number" pos:start="371:59" pos:end="371:63">255</literal> <operator pos:start="371:63" pos:end="371:63">-</operator> <name pos:start="371:65" pos:end="371:70">lobyte</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="373:25" pos:end="373:71"><expr pos:start="373:25" pos:end="373:70"><name pos:start="373:25" pos:end="373:55"><name pos:start="373:25" pos:end="373:25">s</name><operator pos:start="373:26" pos:end="373:27">-&gt;</operator><name pos:start="373:28" pos:end="373:32">frame</name><operator pos:start="373:33" pos:end="373:33">.</operator><name pos:start="373:34" pos:end="373:37">data</name><index pos:start="373:38" pos:end="373:40">[<expr pos:start="373:39" pos:end="373:39"><literal type="number" pos:start="373:39" pos:end="373:39">0</literal></expr>]</index><index pos:start="373:41" pos:end="373:55">[<expr pos:start="373:42" pos:end="373:54"><name pos:start="373:42" pos:end="373:50">pixel_ptr</name> <operator pos:start="373:52" pos:end="373:52">+</operator> <literal type="number" pos:start="373:54" pos:end="373:54">2</literal></expr>]</index></name> <operator pos:start="373:57" pos:end="373:57">=</operator> <literal type="number" pos:start="373:59" pos:end="373:63">255</literal> <operator pos:start="373:63" pos:end="373:63">-</operator> <name pos:start="373:65" pos:end="373:70">lobyte</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="375:25" pos:end="375:71"><expr pos:start="375:25" pos:end="375:70"><name pos:start="375:25" pos:end="375:55"><name pos:start="375:25" pos:end="375:25">s</name><operator pos:start="375:26" pos:end="375:27">-&gt;</operator><name pos:start="375:28" pos:end="375:32">frame</name><operator pos:start="375:33" pos:end="375:33">.</operator><name pos:start="375:34" pos:end="375:37">data</name><index pos:start="375:38" pos:end="375:40">[<expr pos:start="375:39" pos:end="375:39"><literal type="number" pos:start="375:39" pos:end="375:39">0</literal></expr>]</index><index pos:start="375:41" pos:end="375:55">[<expr pos:start="375:42" pos:end="375:54"><name pos:start="375:42" pos:end="375:50">pixel_ptr</name> <operator pos:start="375:52" pos:end="375:52">+</operator> <literal type="number" pos:start="375:54" pos:end="375:54">3</literal></expr>]</index></name> <operator pos:start="375:57" pos:end="375:57">=</operator> <literal type="number" pos:start="375:59" pos:end="375:63">255</literal> <operator pos:start="375:63" pos:end="375:63">-</operator> <name pos:start="375:65" pos:end="375:70">lobyte</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="377:25" pos:end="377:58"><expr pos:start="377:25" pos:end="377:57"><name pos:start="377:25" pos:end="377:33">pixel_ptr</name> <operator pos:start="377:35" pos:end="377:36">+=</operator> <name pos:start="377:38" pos:end="377:57"><name pos:start="377:38" pos:end="377:38">s</name><operator pos:start="377:39" pos:end="377:40">-&gt;</operator><name pos:start="377:41" pos:end="377:45">frame</name><operator pos:start="377:46" pos:end="377:46">.</operator><name pos:start="377:47" pos:end="377:54">linesize</name><index pos:start="377:55" pos:end="377:57">[<expr pos:start="377:56" pos:end="377:56"><literal type="number" pos:start="377:56" pos:end="377:56">0</literal></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></while>

                    <expr_stmt pos:start="381:21" pos:end="381:28"><expr pos:start="381:21" pos:end="381:27"><name pos:start="381:21" pos:end="381:25">lines</name><operator pos:start="381:26" pos:end="381:26">=</operator><literal type="number" pos:start="381:27" pos:end="381:27">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="385:17" pos:end="385:22">break;</break>



            <case pos:start="389:13" pos:end="389:19">case <expr pos:start="389:18" pos:end="389:18"><literal type="number" pos:start="389:18" pos:end="389:18">2</literal></expr>:</case>

                <expr_stmt pos:start="391:17" pos:end="391:51"><expr pos:start="391:17" pos:end="391:50"><name pos:start="391:17" pos:end="391:22">lobyte</name> <operator pos:start="391:24" pos:end="391:24">=</operator> <name pos:start="391:26" pos:end="391:50"><name pos:start="391:26" pos:end="391:26">s</name><operator pos:start="391:27" pos:end="391:28">-&gt;</operator><name pos:start="391:29" pos:end="391:41">decode_buffer</name><index pos:start="391:42" pos:end="391:50">[<expr pos:start="391:43" pos:end="391:49"><name pos:start="391:43" pos:end="391:49">lobytes</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:51"><expr pos:start="393:17" pos:end="393:50"><name pos:start="393:17" pos:end="393:22">hibyte</name> <operator pos:start="393:24" pos:end="393:24">=</operator> <name pos:start="393:26" pos:end="393:50"><name pos:start="393:26" pos:end="393:26">s</name><operator pos:start="393:27" pos:end="393:28">-&gt;</operator><name pos:start="393:29" pos:end="393:41">decode_buffer</name><index pos:start="393:42" pos:end="393:50">[<expr pos:start="393:43" pos:end="393:49"><name pos:start="393:43" pos:end="393:49">hibytes</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="395:17" pos:end="395:54"><expr pos:start="395:17" pos:end="395:53"><name pos:start="395:17" pos:end="395:28">vector_index</name> <operator pos:start="395:30" pos:end="395:30">=</operator> <operator pos:start="395:32" pos:end="395:32">(</operator><name pos:start="395:33" pos:end="395:38">hibyte</name> <operator pos:start="395:40" pos:end="395:41">&lt;&lt;</operator> <literal type="number" pos:start="395:43" pos:end="395:43">8</literal><operator pos:start="395:44" pos:end="395:44">)</operator> <operator pos:start="395:46" pos:end="395:46">|</operator> <name pos:start="395:48" pos:end="395:53">lobyte</name></expr>;</expr_stmt>

                <expr_stmt pos:start="397:17" pos:end="397:45"><expr pos:start="397:17" pos:end="397:44"><name pos:start="397:17" pos:end="397:28">vector_index</name> <operator pos:start="397:30" pos:end="397:32">&lt;&lt;=</operator> <name pos:start="397:34" pos:end="397:44">index_shift</name></expr>;</expr_stmt>

                <expr_stmt pos:start="399:17" pos:end="399:41"><expr pos:start="399:17" pos:end="399:40"><name pos:start="399:17" pos:end="399:21">lines</name> <operator pos:start="399:23" pos:end="399:23">=</operator> <name pos:start="399:25" pos:end="399:40"><name pos:start="399:25" pos:end="399:25">s</name><operator pos:start="399:26" pos:end="399:27">-&gt;</operator><name pos:start="399:28" pos:end="399:40">vector_height</name></name></expr>;</expr_stmt>

                <break pos:start="401:17" pos:end="401:22">break;</break>



            <case pos:start="405:13" pos:end="405:19">case <expr pos:start="405:18" pos:end="405:18"><literal type="number" pos:start="405:18" pos:end="405:18">3</literal></expr>:</case>

<comment type="block" pos:start="407:1" pos:end="407:25">/* not implemented yet */</comment>

                <expr_stmt pos:start="409:17" pos:end="409:26"><expr pos:start="409:17" pos:end="409:25"><name pos:start="409:17" pos:end="409:21">lines</name> <operator pos:start="409:23" pos:end="409:23">=</operator> <literal type="number" pos:start="409:25" pos:end="409:25">0</literal></expr>;</expr_stmt>

                <break pos:start="411:17" pos:end="411:22">break;</break>

            </block_content>}</block></switch>



            <while pos:start="417:13" pos:end="429:13">while <condition pos:start="417:19" pos:end="417:27">(<expr pos:start="417:20" pos:end="417:26"><name pos:start="417:20" pos:end="417:24">lines</name><operator pos:start="417:25" pos:end="417:26">--</operator></expr>)</condition> <block pos:start="417:29" pos:end="429:13">{<block_content pos:start="419:17" pos:end="427:50">

                <expr_stmt pos:start="419:17" pos:end="419:78"><expr pos:start="419:17" pos:end="419:77"><name pos:start="419:17" pos:end="419:47"><name pos:start="419:17" pos:end="419:17">s</name><operator pos:start="419:18" pos:end="419:19">-&gt;</operator><name pos:start="419:20" pos:end="419:24">frame</name><operator pos:start="419:25" pos:end="419:25">.</operator><name pos:start="419:26" pos:end="419:29">data</name><index pos:start="419:30" pos:end="419:32">[<expr pos:start="419:31" pos:end="419:31"><literal type="number" pos:start="419:31" pos:end="419:31">0</literal></expr>]</index><index pos:start="419:33" pos:end="419:47">[<expr pos:start="419:34" pos:end="419:46"><name pos:start="419:34" pos:end="419:42">pixel_ptr</name> <operator pos:start="419:44" pos:end="419:44">+</operator> <literal type="number" pos:start="419:46" pos:end="419:46">0</literal></expr>]</index></name> <operator pos:start="419:49" pos:end="419:49">=</operator> <name pos:start="419:51" pos:end="419:77"><name pos:start="419:51" pos:end="419:51">s</name><operator pos:start="419:52" pos:end="419:53">-&gt;</operator><name pos:start="419:54" pos:end="419:61">codebook</name><index pos:start="419:62" pos:end="419:77">[<expr pos:start="419:63" pos:end="419:76"><name pos:start="419:63" pos:end="419:74">vector_index</name><operator pos:start="419:75" pos:end="419:76">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="421:17" pos:end="421:78"><expr pos:start="421:17" pos:end="421:77"><name pos:start="421:17" pos:end="421:47"><name pos:start="421:17" pos:end="421:17">s</name><operator pos:start="421:18" pos:end="421:19">-&gt;</operator><name pos:start="421:20" pos:end="421:24">frame</name><operator pos:start="421:25" pos:end="421:25">.</operator><name pos:start="421:26" pos:end="421:29">data</name><index pos:start="421:30" pos:end="421:32">[<expr pos:start="421:31" pos:end="421:31"><literal type="number" pos:start="421:31" pos:end="421:31">0</literal></expr>]</index><index pos:start="421:33" pos:end="421:47">[<expr pos:start="421:34" pos:end="421:46"><name pos:start="421:34" pos:end="421:42">pixel_ptr</name> <operator pos:start="421:44" pos:end="421:44">+</operator> <literal type="number" pos:start="421:46" pos:end="421:46">1</literal></expr>]</index></name> <operator pos:start="421:49" pos:end="421:49">=</operator> <name pos:start="421:51" pos:end="421:77"><name pos:start="421:51" pos:end="421:51">s</name><operator pos:start="421:52" pos:end="421:53">-&gt;</operator><name pos:start="421:54" pos:end="421:61">codebook</name><index pos:start="421:62" pos:end="421:77">[<expr pos:start="421:63" pos:end="421:76"><name pos:start="421:63" pos:end="421:74">vector_index</name><operator pos:start="421:75" pos:end="421:76">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="423:17" pos:end="423:78"><expr pos:start="423:17" pos:end="423:77"><name pos:start="423:17" pos:end="423:47"><name pos:start="423:17" pos:end="423:17">s</name><operator pos:start="423:18" pos:end="423:19">-&gt;</operator><name pos:start="423:20" pos:end="423:24">frame</name><operator pos:start="423:25" pos:end="423:25">.</operator><name pos:start="423:26" pos:end="423:29">data</name><index pos:start="423:30" pos:end="423:32">[<expr pos:start="423:31" pos:end="423:31"><literal type="number" pos:start="423:31" pos:end="423:31">0</literal></expr>]</index><index pos:start="423:33" pos:end="423:47">[<expr pos:start="423:34" pos:end="423:46"><name pos:start="423:34" pos:end="423:42">pixel_ptr</name> <operator pos:start="423:44" pos:end="423:44">+</operator> <literal type="number" pos:start="423:46" pos:end="423:46">2</literal></expr>]</index></name> <operator pos:start="423:49" pos:end="423:49">=</operator> <name pos:start="423:51" pos:end="423:77"><name pos:start="423:51" pos:end="423:51">s</name><operator pos:start="423:52" pos:end="423:53">-&gt;</operator><name pos:start="423:54" pos:end="423:61">codebook</name><index pos:start="423:62" pos:end="423:77">[<expr pos:start="423:63" pos:end="423:76"><name pos:start="423:63" pos:end="423:74">vector_index</name><operator pos:start="423:75" pos:end="423:76">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:78"><expr pos:start="425:17" pos:end="425:77"><name pos:start="425:17" pos:end="425:47"><name pos:start="425:17" pos:end="425:17">s</name><operator pos:start="425:18" pos:end="425:19">-&gt;</operator><name pos:start="425:20" pos:end="425:24">frame</name><operator pos:start="425:25" pos:end="425:25">.</operator><name pos:start="425:26" pos:end="425:29">data</name><index pos:start="425:30" pos:end="425:32">[<expr pos:start="425:31" pos:end="425:31"><literal type="number" pos:start="425:31" pos:end="425:31">0</literal></expr>]</index><index pos:start="425:33" pos:end="425:47">[<expr pos:start="425:34" pos:end="425:46"><name pos:start="425:34" pos:end="425:42">pixel_ptr</name> <operator pos:start="425:44" pos:end="425:44">+</operator> <literal type="number" pos:start="425:46" pos:end="425:46">3</literal></expr>]</index></name> <operator pos:start="425:49" pos:end="425:49">=</operator> <name pos:start="425:51" pos:end="425:77"><name pos:start="425:51" pos:end="425:51">s</name><operator pos:start="425:52" pos:end="425:53">-&gt;</operator><name pos:start="425:54" pos:end="425:61">codebook</name><index pos:start="425:62" pos:end="425:77">[<expr pos:start="425:63" pos:end="425:76"><name pos:start="425:63" pos:end="425:74">vector_index</name><operator pos:start="425:75" pos:end="425:76">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="427:17" pos:end="427:50"><expr pos:start="427:17" pos:end="427:49"><name pos:start="427:17" pos:end="427:25">pixel_ptr</name> <operator pos:start="427:27" pos:end="427:28">+=</operator> <name pos:start="427:30" pos:end="427:49"><name pos:start="427:30" pos:end="427:30">s</name><operator pos:start="427:31" pos:end="427:32">-&gt;</operator><name pos:start="427:33" pos:end="427:37">frame</name><operator pos:start="427:38" pos:end="427:38">.</operator><name pos:start="427:39" pos:end="427:46">linesize</name><index pos:start="427:47" pos:end="427:49">[<expr pos:start="427:48" pos:end="427:48"><literal type="number" pos:start="427:48" pos:end="427:48">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="437:5" pos:end="437:33">/* handle partial codebook */</comment>

    <if_stmt pos:start="439:5" pos:end="447:5"><if pos:start="439:5" pos:end="447:5">if <condition pos:start="439:8" pos:end="439:49">(<expr pos:start="439:9" pos:end="439:48"><operator pos:start="439:9" pos:end="439:9">(</operator><name pos:start="439:10" pos:end="439:19">cbp0_chunk</name> <operator pos:start="439:21" pos:end="439:22">!=</operator> <operator pos:start="439:24" pos:end="439:24">-</operator><literal type="number" pos:start="439:25" pos:end="439:25">1</literal><operator pos:start="439:26" pos:end="439:26">)</operator> <operator pos:start="439:28" pos:end="439:29">&amp;&amp;</operator> <operator pos:start="439:31" pos:end="439:31">(</operator><name pos:start="439:32" pos:end="439:41">cbpz_chunk</name> <operator pos:start="439:43" pos:end="439:44">!=</operator> <operator pos:start="439:46" pos:end="439:46">-</operator><literal type="number" pos:start="439:47" pos:end="439:47">1</literal><operator pos:start="439:48" pos:end="439:48">)</operator></expr>)</condition> <block pos:start="439:51" pos:end="447:5">{<block_content pos:start="443:9" pos:end="445:35">

        <comment type="block" pos:start="441:9" pos:end="441:54">/* a chunk should not have both chunk types */</comment>

        <expr_stmt pos:start="443:9" pos:end="443:85"><expr pos:start="443:9" pos:end="443:84"><call pos:start="443:9" pos:end="443:84"><name pos:start="443:9" pos:end="443:14">av_log</name><argument_list pos:start="443:15" pos:end="443:84">(<argument pos:start="443:16" pos:end="443:23"><expr pos:start="443:16" pos:end="443:23"><name pos:start="443:16" pos:end="443:23"><name pos:start="443:16" pos:end="443:16">s</name><operator pos:start="443:17" pos:end="443:18">-&gt;</operator><name pos:start="443:19" pos:end="443:23">avctx</name></name></expr></argument>, <argument pos:start="443:26" pos:end="443:37"><expr pos:start="443:26" pos:end="443:37"><name pos:start="443:26" pos:end="443:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="443:40" pos:end="443:83"><expr pos:start="443:40" pos:end="443:83"><literal type="string" pos:start="443:40" pos:end="443:83">"problem: found both CBP0 and CBPZ chunks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="445:9" pos:end="445:35">return <expr pos:start="445:16" pos:end="445:34"><name pos:start="445:16" pos:end="445:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="451:5" pos:end="493:5"><if pos:start="451:5" pos:end="493:5">if <condition pos:start="451:8" pos:end="451:25">(<expr pos:start="451:9" pos:end="451:24"><name pos:start="451:9" pos:end="451:18">cbp0_chunk</name> <operator pos:start="451:20" pos:end="451:21">!=</operator> <operator pos:start="451:23" pos:end="451:23">-</operator><literal type="number" pos:start="451:24" pos:end="451:24">1</literal></expr>)</condition> <block pos:start="451:27" pos:end="493:5">{<block_content pos:start="455:9" pos:end="491:9">



        <expr_stmt pos:start="455:9" pos:end="455:55"><expr pos:start="455:9" pos:end="455:54"><call pos:start="455:9" pos:end="455:54"><name pos:start="455:9" pos:end="455:24">bytestream2_seek</name><argument_list pos:start="455:25" pos:end="455:54">(<argument pos:start="455:26" pos:end="455:31"><expr pos:start="455:26" pos:end="455:31"><operator pos:start="455:26" pos:end="455:26">&amp;</operator><name pos:start="455:27" pos:end="455:31"><name pos:start="455:27" pos:end="455:27">s</name><operator pos:start="455:28" pos:end="455:29">-&gt;</operator><name pos:start="455:30" pos:end="455:31">gb</name></name></expr></argument>, <argument pos:start="455:34" pos:end="455:43"><expr pos:start="455:34" pos:end="455:43"><name pos:start="455:34" pos:end="455:43">cbp0_chunk</name></expr></argument>, <argument pos:start="455:46" pos:end="455:53"><expr pos:start="455:46" pos:end="455:53"><name pos:start="455:46" pos:end="455:53">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:50"><expr pos:start="457:9" pos:end="457:49"><name pos:start="457:9" pos:end="457:18">chunk_size</name> <operator pos:start="457:20" pos:end="457:20">=</operator> <call pos:start="457:22" pos:end="457:49"><name pos:start="457:22" pos:end="457:41">bytestream2_get_be32</name><argument_list pos:start="457:42" pos:end="457:49">(<argument pos:start="457:43" pos:end="457:48"><expr pos:start="457:43" pos:end="457:48"><operator pos:start="457:43" pos:end="457:43">&amp;</operator><name pos:start="457:44" pos:end="457:48"><name pos:start="457:44" pos:end="457:44">s</name><operator pos:start="457:45" pos:end="457:46">-&gt;</operator><name pos:start="457:47" pos:end="457:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="461:9" pos:end="461:41">/* accumulate partial codebook */</comment>

        <expr_stmt pos:start="463:9" pos:end="465:43"><expr pos:start="463:9" pos:end="465:42"><call pos:start="463:9" pos:end="465:42"><name pos:start="463:9" pos:end="463:30">bytestream2_get_buffer</name><argument_list pos:start="463:31" pos:end="465:42">(<argument pos:start="463:32" pos:end="463:37"><expr pos:start="463:32" pos:end="463:37"><operator pos:start="463:32" pos:end="463:32">&amp;</operator><name pos:start="463:33" pos:end="463:37"><name pos:start="463:33" pos:end="463:33">s</name><operator pos:start="463:34" pos:end="463:35">-&gt;</operator><name pos:start="463:36" pos:end="463:37">gb</name></name></expr></argument>, <argument pos:start="463:40" pos:end="463:94"><expr pos:start="463:40" pos:end="463:94"><operator pos:start="463:40" pos:end="463:40">&amp;</operator><name pos:start="463:41" pos:end="463:94"><name pos:start="463:41" pos:end="463:41">s</name><operator pos:start="463:42" pos:end="463:43">-&gt;</operator><name pos:start="463:44" pos:end="463:63">next_codebook_buffer</name><index pos:start="463:64" pos:end="463:94">[<expr pos:start="463:65" pos:end="463:93"><name pos:start="463:65" pos:end="463:93"><name pos:start="463:65" pos:end="463:65">s</name><operator pos:start="463:66" pos:end="463:67">-&gt;</operator><name pos:start="463:68" pos:end="463:93">next_codebook_buffer_index</name></name></expr>]</index></name></expr></argument>,

                               <argument pos:start="465:32" pos:end="465:41"><expr pos:start="465:32" pos:end="465:41"><name pos:start="465:32" pos:end="465:41">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:52"><expr pos:start="467:9" pos:end="467:51"><name pos:start="467:9" pos:end="467:37"><name pos:start="467:9" pos:end="467:9">s</name><operator pos:start="467:10" pos:end="467:11">-&gt;</operator><name pos:start="467:12" pos:end="467:37">next_codebook_buffer_index</name></name> <operator pos:start="467:39" pos:end="467:40">+=</operator> <name pos:start="467:42" pos:end="467:51">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="471:9" pos:end="471:31"><expr pos:start="471:9" pos:end="471:30"><name pos:start="471:9" pos:end="471:28"><name pos:start="471:9" pos:end="471:9">s</name><operator pos:start="471:10" pos:end="471:11">-&gt;</operator><name pos:start="471:12" pos:end="471:28">partial_countdown</name></name><operator pos:start="471:29" pos:end="471:30">--</operator></expr>;</expr_stmt>

        <if_stmt pos:start="473:9" pos:end="491:9"><if pos:start="473:9" pos:end="491:9">if <condition pos:start="473:12" pos:end="473:38">(<expr pos:start="473:13" pos:end="473:37"><name pos:start="473:13" pos:end="473:32"><name pos:start="473:13" pos:end="473:13">s</name><operator pos:start="473:14" pos:end="473:15">-&gt;</operator><name pos:start="473:16" pos:end="473:32">partial_countdown</name></name> <operator pos:start="473:34" pos:end="473:35">&lt;=</operator> <literal type="number" pos:start="473:37" pos:end="473:37">0</literal></expr>)</condition> <block pos:start="473:40" pos:end="491:9">{<block_content pos:start="479:13" pos:end="489:52">



            <comment type="block" pos:start="477:13" pos:end="477:42">/* time to replace codebook */</comment>

            <expr_stmt pos:start="479:13" pos:end="481:47"><expr pos:start="479:13" pos:end="481:46"><call pos:start="479:13" pos:end="481:46"><name pos:start="479:13" pos:end="479:18">memcpy</name><argument_list pos:start="479:19" pos:end="481:46">(<argument pos:start="479:20" pos:end="479:30"><expr pos:start="479:20" pos:end="479:30"><name pos:start="479:20" pos:end="479:30"><name pos:start="479:20" pos:end="479:20">s</name><operator pos:start="479:21" pos:end="479:22">-&gt;</operator><name pos:start="479:23" pos:end="479:30">codebook</name></name></expr></argument>, <argument pos:start="479:33" pos:end="479:55"><expr pos:start="479:33" pos:end="479:55"><name pos:start="479:33" pos:end="479:55"><name pos:start="479:33" pos:end="479:33">s</name><operator pos:start="479:34" pos:end="479:35">-&gt;</operator><name pos:start="479:36" pos:end="479:55">next_codebook_buffer</name></name></expr></argument>,

                <argument pos:start="481:17" pos:end="481:45"><expr pos:start="481:17" pos:end="481:45"><name pos:start="481:17" pos:end="481:45"><name pos:start="481:17" pos:end="481:17">s</name><operator pos:start="481:18" pos:end="481:19">-&gt;</operator><name pos:start="481:20" pos:end="481:45">next_codebook_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="485:13" pos:end="485:34">/* reset accounting */</comment>

            <expr_stmt pos:start="487:13" pos:end="487:46"><expr pos:start="487:13" pos:end="487:45"><name pos:start="487:13" pos:end="487:41"><name pos:start="487:13" pos:end="487:13">s</name><operator pos:start="487:14" pos:end="487:15">-&gt;</operator><name pos:start="487:16" pos:end="487:41">next_codebook_buffer_index</name></name> <operator pos:start="487:43" pos:end="487:43">=</operator> <literal type="number" pos:start="487:45" pos:end="487:45">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:52"><expr pos:start="489:13" pos:end="489:51"><name pos:start="489:13" pos:end="489:32"><name pos:start="489:13" pos:end="489:13">s</name><operator pos:start="489:14" pos:end="489:15">-&gt;</operator><name pos:start="489:16" pos:end="489:32">partial_countdown</name></name> <operator pos:start="489:34" pos:end="489:34">=</operator> <name pos:start="489:36" pos:end="489:51"><name pos:start="489:36" pos:end="489:36">s</name><operator pos:start="489:37" pos:end="489:38">-&gt;</operator><name pos:start="489:39" pos:end="489:51">partial_count</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="497:5" pos:end="545:5"><if pos:start="497:5" pos:end="545:5">if <condition pos:start="497:8" pos:end="497:25">(<expr pos:start="497:9" pos:end="497:24"><name pos:start="497:9" pos:end="497:18">cbpz_chunk</name> <operator pos:start="497:20" pos:end="497:21">!=</operator> <operator pos:start="497:23" pos:end="497:23">-</operator><literal type="number" pos:start="497:24" pos:end="497:24">1</literal></expr>)</condition> <block pos:start="497:27" pos:end="545:5">{<block_content pos:start="501:9" pos:end="543:9">



        <expr_stmt pos:start="501:9" pos:end="501:55"><expr pos:start="501:9" pos:end="501:54"><call pos:start="501:9" pos:end="501:54"><name pos:start="501:9" pos:end="501:24">bytestream2_seek</name><argument_list pos:start="501:25" pos:end="501:54">(<argument pos:start="501:26" pos:end="501:31"><expr pos:start="501:26" pos:end="501:31"><operator pos:start="501:26" pos:end="501:26">&amp;</operator><name pos:start="501:27" pos:end="501:31"><name pos:start="501:27" pos:end="501:27">s</name><operator pos:start="501:28" pos:end="501:29">-&gt;</operator><name pos:start="501:30" pos:end="501:31">gb</name></name></expr></argument>, <argument pos:start="501:34" pos:end="501:43"><expr pos:start="501:34" pos:end="501:43"><name pos:start="501:34" pos:end="501:43">cbpz_chunk</name></expr></argument>, <argument pos:start="501:46" pos:end="501:53"><expr pos:start="501:46" pos:end="501:53"><name pos:start="501:46" pos:end="501:53">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="503:9" pos:end="503:50"><expr pos:start="503:9" pos:end="503:49"><name pos:start="503:9" pos:end="503:18">chunk_size</name> <operator pos:start="503:20" pos:end="503:20">=</operator> <call pos:start="503:22" pos:end="503:49"><name pos:start="503:22" pos:end="503:41">bytestream2_get_be32</name><argument_list pos:start="503:42" pos:end="503:49">(<argument pos:start="503:43" pos:end="503:48"><expr pos:start="503:43" pos:end="503:48"><operator pos:start="503:43" pos:end="503:43">&amp;</operator><name pos:start="503:44" pos:end="503:48"><name pos:start="503:44" pos:end="503:44">s</name><operator pos:start="503:45" pos:end="503:46">-&gt;</operator><name pos:start="503:47" pos:end="503:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="507:9" pos:end="507:41">/* accumulate partial codebook */</comment>

        <expr_stmt pos:start="509:9" pos:end="511:43"><expr pos:start="509:9" pos:end="511:42"><call pos:start="509:9" pos:end="511:42"><name pos:start="509:9" pos:end="509:30">bytestream2_get_buffer</name><argument_list pos:start="509:31" pos:end="511:42">(<argument pos:start="509:32" pos:end="509:37"><expr pos:start="509:32" pos:end="509:37"><operator pos:start="509:32" pos:end="509:32">&amp;</operator><name pos:start="509:33" pos:end="509:37"><name pos:start="509:33" pos:end="509:33">s</name><operator pos:start="509:34" pos:end="509:35">-&gt;</operator><name pos:start="509:36" pos:end="509:37">gb</name></name></expr></argument>, <argument pos:start="509:40" pos:end="509:94"><expr pos:start="509:40" pos:end="509:94"><operator pos:start="509:40" pos:end="509:40">&amp;</operator><name pos:start="509:41" pos:end="509:94"><name pos:start="509:41" pos:end="509:41">s</name><operator pos:start="509:42" pos:end="509:43">-&gt;</operator><name pos:start="509:44" pos:end="509:63">next_codebook_buffer</name><index pos:start="509:64" pos:end="509:94">[<expr pos:start="509:65" pos:end="509:93"><name pos:start="509:65" pos:end="509:93"><name pos:start="509:65" pos:end="509:65">s</name><operator pos:start="509:66" pos:end="509:67">-&gt;</operator><name pos:start="509:68" pos:end="509:93">next_codebook_buffer_index</name></name></expr>]</index></name></expr></argument>,

                               <argument pos:start="511:32" pos:end="511:41"><expr pos:start="511:32" pos:end="511:41"><name pos:start="511:32" pos:end="511:41">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="513:9" pos:end="513:52"><expr pos:start="513:9" pos:end="513:51"><name pos:start="513:9" pos:end="513:37"><name pos:start="513:9" pos:end="513:9">s</name><operator pos:start="513:10" pos:end="513:11">-&gt;</operator><name pos:start="513:12" pos:end="513:37">next_codebook_buffer_index</name></name> <operator pos:start="513:39" pos:end="513:40">+=</operator> <name pos:start="513:42" pos:end="513:51">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="517:9" pos:end="517:31"><expr pos:start="517:9" pos:end="517:30"><name pos:start="517:9" pos:end="517:28"><name pos:start="517:9" pos:end="517:9">s</name><operator pos:start="517:10" pos:end="517:11">-&gt;</operator><name pos:start="517:12" pos:end="517:28">partial_countdown</name></name><operator pos:start="517:29" pos:end="517:30">--</operator></expr>;</expr_stmt>

        <if_stmt pos:start="519:9" pos:end="543:9"><if pos:start="519:9" pos:end="543:9">if <condition pos:start="519:12" pos:end="519:38">(<expr pos:start="519:13" pos:end="519:37"><name pos:start="519:13" pos:end="519:32"><name pos:start="519:13" pos:end="519:13">s</name><operator pos:start="519:14" pos:end="519:15">-&gt;</operator><name pos:start="519:16" pos:end="519:32">partial_countdown</name></name> <operator pos:start="519:34" pos:end="519:35">&lt;=</operator> <literal type="number" pos:start="519:37" pos:end="519:37">0</literal></expr>)</condition> <block pos:start="519:40" pos:end="543:9">{<block_content pos:start="521:13" pos:end="541:52">

            <decl_stmt pos:start="521:13" pos:end="521:30"><decl pos:start="521:13" pos:end="521:29"><type pos:start="521:13" pos:end="521:26"><name pos:start="521:13" pos:end="521:26">GetByteContext</name></type> <name pos:start="521:28" pos:end="521:29">gb</name></decl>;</decl_stmt>



            <expr_stmt pos:start="525:13" pos:end="525:90"><expr pos:start="525:13" pos:end="525:89"><call pos:start="525:13" pos:end="525:89"><name pos:start="525:13" pos:end="525:28">bytestream2_init</name><argument_list pos:start="525:29" pos:end="525:89">(<argument pos:start="525:30" pos:end="525:32"><expr pos:start="525:30" pos:end="525:32"><operator pos:start="525:30" pos:end="525:30">&amp;</operator><name pos:start="525:31" pos:end="525:32">gb</name></expr></argument>, <argument pos:start="525:35" pos:end="525:57"><expr pos:start="525:35" pos:end="525:57"><name pos:start="525:35" pos:end="525:57"><name pos:start="525:35" pos:end="525:35">s</name><operator pos:start="525:36" pos:end="525:37">-&gt;</operator><name pos:start="525:38" pos:end="525:57">next_codebook_buffer</name></name></expr></argument>, <argument pos:start="525:60" pos:end="525:88"><expr pos:start="525:60" pos:end="525:88"><name pos:start="525:60" pos:end="525:88"><name pos:start="525:60" pos:end="525:60">s</name><operator pos:start="525:61" pos:end="525:62">-&gt;</operator><name pos:start="525:63" pos:end="525:88">next_codebook_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="527:13" pos:end="527:37">/* decompress codebook */</comment>

            <if_stmt pos:start="529:13" pos:end="533:27"><if pos:start="529:13" pos:end="533:27">if <condition pos:start="529:16" pos:end="531:78">(<expr pos:start="529:17" pos:end="531:77"><operator pos:start="529:17" pos:end="529:17">(</operator><name pos:start="529:18" pos:end="529:20">res</name> <operator pos:start="529:22" pos:end="529:22">=</operator> <call pos:start="529:24" pos:end="531:72"><name pos:start="529:24" pos:end="529:38">decode_format80</name><argument_list pos:start="529:39" pos:end="531:72">(<argument pos:start="529:40" pos:end="529:40"><expr pos:start="529:40" pos:end="529:40"><name pos:start="529:40" pos:end="529:40">s</name></expr></argument>, <argument pos:start="529:43" pos:end="529:71"><expr pos:start="529:43" pos:end="529:71"><name pos:start="529:43" pos:end="529:71"><name pos:start="529:43" pos:end="529:43">s</name><operator pos:start="529:44" pos:end="529:45">-&gt;</operator><name pos:start="529:46" pos:end="529:71">next_codebook_buffer_index</name></name></expr></argument>,

                                       <argument pos:start="531:40" pos:end="531:50"><expr pos:start="531:40" pos:end="531:50"><name pos:start="531:40" pos:end="531:50"><name pos:start="531:40" pos:end="531:40">s</name><operator pos:start="531:41" pos:end="531:42">-&gt;</operator><name pos:start="531:43" pos:end="531:50">codebook</name></name></expr></argument>, <argument pos:start="531:53" pos:end="531:68"><expr pos:start="531:53" pos:end="531:68"><name pos:start="531:53" pos:end="531:68"><name pos:start="531:53" pos:end="531:53">s</name><operator pos:start="531:54" pos:end="531:55">-&gt;</operator><name pos:start="531:56" pos:end="531:68">codebook_size</name></name></expr></argument>, <argument pos:start="531:71" pos:end="531:71"><expr pos:start="531:71" pos:end="531:71"><literal type="number" pos:start="531:71" pos:end="531:71">0</literal></expr></argument>)</argument_list></call><operator pos:start="531:73" pos:end="531:73">)</operator> <operator pos:start="531:75" pos:end="531:75">&lt;</operator> <literal type="number" pos:start="531:77" pos:end="531:77">0</literal></expr>)</condition><block type="pseudo" pos:start="533:17" pos:end="533:27"><block_content pos:start="533:17" pos:end="533:27">

                <return pos:start="533:17" pos:end="533:27">return <expr pos:start="533:24" pos:end="533:26"><name pos:start="533:24" pos:end="533:26">res</name></expr>;</return></block_content></block></if></if_stmt>



            <comment type="block" pos:start="537:13" pos:end="537:34">/* reset accounting */</comment>

            <expr_stmt pos:start="539:13" pos:end="539:46"><expr pos:start="539:13" pos:end="539:45"><name pos:start="539:13" pos:end="539:41"><name pos:start="539:13" pos:end="539:13">s</name><operator pos:start="539:14" pos:end="539:15">-&gt;</operator><name pos:start="539:16" pos:end="539:41">next_codebook_buffer_index</name></name> <operator pos:start="539:43" pos:end="539:43">=</operator> <literal type="number" pos:start="539:45" pos:end="539:45">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="541:13" pos:end="541:52"><expr pos:start="541:13" pos:end="541:51"><name pos:start="541:13" pos:end="541:32"><name pos:start="541:13" pos:end="541:13">s</name><operator pos:start="541:14" pos:end="541:15">-&gt;</operator><name pos:start="541:16" pos:end="541:32">partial_countdown</name></name> <operator pos:start="541:34" pos:end="541:34">=</operator> <name pos:start="541:36" pos:end="541:51"><name pos:start="541:36" pos:end="541:36">s</name><operator pos:start="541:37" pos:end="541:38">-&gt;</operator><name pos:start="541:39" pos:end="541:51">partial_count</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="549:5" pos:end="549:13">return <expr pos:start="549:12" pos:end="549:12"><literal type="number" pos:start="549:12" pos:end="549:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
