<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2494.c" pos:tabs="8"><function pos:start="1:1" pos:end="1591:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">disas_vfp_insn</name><parameter_list pos:start="1:26" pos:end="1:76">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:37">CPUARMState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type> <name pos:start="1:41" pos:end="1:43">env</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:60"><decl pos:start="1:46" pos:end="1:60"><type pos:start="1:46" pos:end="1:60"><name pos:start="1:46" pos:end="1:57">DisasContext</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">s</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:75"><decl pos:start="1:63" pos:end="1:75"><type pos:start="1:63" pos:end="1:75"><name pos:start="1:63" pos:end="1:70">uint32_t</name></type> <name pos:start="1:72" pos:end="1:75">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1591:1">{<block_content pos:start="5:5" pos:end="1589:13">

    <decl_stmt pos:start="5:5" pos:end="5:71"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">rd</name></decl>, <decl pos:start="5:18" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:18" pos:end="5:19">rn</name></decl>, <decl pos:start="5:22" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:22" pos:end="5:23">rm</name></decl>, <decl pos:start="5:26" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:26" pos:end="5:27">op</name></decl>, <decl pos:start="5:30" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:30" pos:end="5:30">i</name></decl>, <decl pos:start="5:33" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:33" pos:end="5:33">n</name></decl>, <decl pos:start="5:36" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:36" pos:end="5:41">offset</name></decl>, <decl pos:start="5:44" pos:end="5:50"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:44" pos:end="5:50">delta_d</name></decl>, <decl pos:start="5:53" pos:end="5:59"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:53" pos:end="5:59">delta_m</name></decl>, <decl pos:start="5:62" pos:end="5:70"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:62" pos:end="5:70">bank_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">dp</name></decl>, <decl pos:start="7:13" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:18">veclen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">TCGv</name></type> <name pos:start="9:10" pos:end="9:13">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">TCGv</name></type> <name pos:start="11:10" pos:end="11:12">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">TCGv</name></type> <name pos:start="13:10" pos:end="13:13">tmp2</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:17"><if pos:start="17:5" pos:end="19:17">if <condition pos:start="17:8" pos:end="17:43">(<expr pos:start="17:9" pos:end="17:42"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:42"><name pos:start="17:10" pos:end="17:20">arm_feature</name><argument_list pos:start="17:21" pos:end="17:42">(<argument pos:start="17:22" pos:end="17:24"><expr pos:start="17:22" pos:end="17:24"><name pos:start="17:22" pos:end="17:24">env</name></expr></argument>, <argument pos:start="17:27" pos:end="17:41"><expr pos:start="17:27" pos:end="17:41"><name pos:start="17:27" pos:end="17:41">ARM_FEATURE_VFP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:17"><block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="39:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:24">(<expr pos:start="23:9" pos:end="23:23"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:23"><name pos:start="23:10" pos:end="23:10">s</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:23">vfp_enabled</name></name></expr>)</condition> <block pos:start="23:26" pos:end="39:5">{<block_content pos:start="27:9" pos:end="37:21">

        <comment type="block" pos:start="25:9" pos:end="25:77">/* VFP disabled.  Only allow fmxr/fmrx to/from some control regs.  */</comment>

        <if_stmt pos:start="27:9" pos:end="29:21"><if pos:start="27:9" pos:end="29:21">if <condition pos:start="27:12" pos:end="27:46">(<expr pos:start="27:13" pos:end="27:45"><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:17">insn</name> <operator pos:start="27:19" pos:end="27:19">&amp;</operator> <literal type="number" pos:start="27:21" pos:end="27:30">0x0fe00fff</literal><operator pos:start="27:31" pos:end="27:31">)</operator> <operator pos:start="27:33" pos:end="27:34">!=</operator> <literal type="number" pos:start="27:36" pos:end="27:45">0x0ee00a10</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:21"><block_content pos:start="29:13" pos:end="29:21">

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:10">rn</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:18">insn</name> <operator pos:start="31:20" pos:end="31:21">&gt;&gt;</operator> <literal type="number" pos:start="31:23" pos:end="31:24">16</literal><operator pos:start="31:25" pos:end="31:25">)</operator> <operator pos:start="31:27" pos:end="31:27">&amp;</operator> <literal type="number" pos:start="31:29" pos:end="31:31">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:21"><if pos:start="33:9" pos:end="37:21">if <condition pos:start="33:12" pos:end="35:58">(<expr pos:start="33:13" pos:end="35:57"><name pos:start="33:13" pos:end="33:14">rn</name> <operator pos:start="33:16" pos:end="33:17">!=</operator> <name pos:start="33:19" pos:end="33:31">ARM_VFP_FPSID</name> <operator pos:start="33:33" pos:end="33:34">&amp;&amp;</operator> <name pos:start="33:36" pos:end="33:37">rn</name> <operator pos:start="33:39" pos:end="33:40">!=</operator> <name pos:start="33:42" pos:end="33:54">ARM_VFP_FPEXC</name>

            <operator pos:start="35:13" pos:end="35:14">&amp;&amp;</operator> <name pos:start="35:16" pos:end="35:17">rn</name> <operator pos:start="35:19" pos:end="35:20">!=</operator> <name pos:start="35:22" pos:end="35:34">ARM_VFP_MVFR1</name> <operator pos:start="35:36" pos:end="35:37">&amp;&amp;</operator> <name pos:start="35:39" pos:end="35:40">rn</name> <operator pos:start="35:42" pos:end="35:43">!=</operator> <name pos:start="35:45" pos:end="35:57">ARM_VFP_MVFR0</name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:21"><block_content pos:start="37:13" pos:end="37:21">

            <return pos:start="37:13" pos:end="37:21">return <expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:35"><expr pos:start="41:5" pos:end="41:34"><name pos:start="41:5" pos:end="41:6">dp</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <operator pos:start="41:10" pos:end="41:10">(</operator><operator pos:start="41:11" pos:end="41:11">(</operator><name pos:start="41:12" pos:end="41:15">insn</name> <operator pos:start="41:17" pos:end="41:17">&amp;</operator> <literal type="number" pos:start="41:19" pos:end="41:23">0xf00</literal><operator pos:start="41:24" pos:end="41:24">)</operator> <operator pos:start="41:26" pos:end="41:27">==</operator> <literal type="number" pos:start="41:29" pos:end="41:33">0xb00</literal><operator pos:start="41:34" pos:end="41:34">)</operator></expr>;</expr_stmt>

    <switch pos:start="43:5" pos:end="1587:5">switch <condition pos:start="43:12" pos:end="43:31">(<expr pos:start="43:13" pos:end="43:30"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:17">insn</name> <operator pos:start="43:19" pos:end="43:20">&gt;&gt;</operator> <literal type="number" pos:start="43:22" pos:end="43:23">24</literal><operator pos:start="43:24" pos:end="43:24">)</operator> <operator pos:start="43:26" pos:end="43:26">&amp;</operator> <literal type="number" pos:start="43:28" pos:end="43:30">0xf</literal></expr>)</condition> <block pos:start="43:33" pos:end="1587:5">{<block_content pos:start="45:5" pos:end="1585:17">

    <case pos:start="45:5" pos:end="45:13">case <expr pos:start="45:10" pos:end="45:12"><literal type="number" pos:start="45:10" pos:end="45:12">0xe</literal></expr>:</case>

        <if_stmt pos:start="47:9" pos:end="1293:9"><if pos:start="47:9" pos:end="433:9">if <condition pos:start="47:12" pos:end="47:28">(<expr pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:16">insn</name> <operator pos:start="47:18" pos:end="47:18">&amp;</operator> <operator pos:start="47:20" pos:end="47:20">(</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal> <operator pos:start="47:23" pos:end="47:24">&lt;&lt;</operator> <literal type="number" pos:start="47:26" pos:end="47:26">4</literal><operator pos:start="47:27" pos:end="47:27">)</operator></expr>)</condition> <block pos:start="47:30" pos:end="433:9">{<block_content pos:start="51:13" pos:end="431:13">

            <comment type="block" pos:start="49:13" pos:end="49:42">/* single register transfer */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:14">rd</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:22">insn</name> <operator pos:start="51:24" pos:end="51:25">&gt;&gt;</operator> <literal type="number" pos:start="51:27" pos:end="51:28">12</literal><operator pos:start="51:29" pos:end="51:29">)</operator> <operator pos:start="51:31" pos:end="51:31">&amp;</operator> <literal type="number" pos:start="51:33" pos:end="51:35">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="431:13"><if pos:start="53:13" pos:end="229:13">if <condition pos:start="53:16" pos:end="53:19">(<expr pos:start="53:17" pos:end="53:18"><name pos:start="53:17" pos:end="53:18">dp</name></expr>)</condition> <block pos:start="53:21" pos:end="229:13">{<block_content pos:start="55:17" pos:end="227:17">

                <decl_stmt pos:start="55:17" pos:end="55:25"><decl pos:start="55:17" pos:end="55:24"><type pos:start="55:17" pos:end="55:19"><name pos:start="55:17" pos:end="55:19">int</name></type> <name pos:start="55:21" pos:end="55:24">size</name></decl>;</decl_stmt>

                <decl_stmt pos:start="57:17" pos:end="57:25"><decl pos:start="57:17" pos:end="57:24"><type pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">int</name></type> <name pos:start="57:21" pos:end="57:24">pass</name></decl>;</decl_stmt>



                <expr_stmt pos:start="61:17" pos:end="61:37"><expr pos:start="61:17" pos:end="61:36"><call pos:start="61:17" pos:end="61:36"><name pos:start="61:17" pos:end="61:26">VFP_DREG_N</name><argument_list pos:start="61:27" pos:end="61:36">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">rn</name></expr></argument>, <argument pos:start="61:32" pos:end="61:35"><expr pos:start="61:32" pos:end="61:35"><name pos:start="61:32" pos:end="61:35">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="65:29"><if pos:start="63:17" pos:end="65:29">if <condition pos:start="63:20" pos:end="63:31">(<expr pos:start="63:21" pos:end="63:30"><name pos:start="63:21" pos:end="63:24">insn</name> <operator pos:start="63:26" pos:end="63:26">&amp;</operator> <literal type="number" pos:start="63:28" pos:end="63:30">0xf</literal></expr>)</condition><block type="pseudo" pos:start="65:21" pos:end="65:29"><block_content pos:start="65:21" pos:end="65:29">

                    <return pos:start="65:21" pos:end="65:29">return <expr pos:start="65:28" pos:end="65:28"><literal type="number" pos:start="65:28" pos:end="65:28">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="67:17" pos:end="71:29"><if pos:start="67:17" pos:end="71:29">if <condition pos:start="67:20" pos:end="69:59">(<expr pos:start="67:21" pos:end="69:58"><name pos:start="67:21" pos:end="67:24">insn</name> <operator pos:start="67:26" pos:end="67:26">&amp;</operator> <literal type="number" pos:start="67:28" pos:end="67:37">0x00c00060</literal>

                    <operator pos:start="69:21" pos:end="69:22">&amp;&amp;</operator> <operator pos:start="69:24" pos:end="69:24">!</operator><call pos:start="69:25" pos:end="69:58"><name pos:start="69:25" pos:end="69:35">arm_feature</name><argument_list pos:start="69:36" pos:end="69:58">(<argument pos:start="69:37" pos:end="69:39"><expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">env</name></expr></argument>, <argument pos:start="69:42" pos:end="69:57"><expr pos:start="69:42" pos:end="69:57"><name pos:start="69:42" pos:end="69:57">ARM_FEATURE_NEON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="71:21" pos:end="71:29"><block_content pos:start="71:21" pos:end="71:29">

                    <return pos:start="71:21" pos:end="71:29">return <expr pos:start="71:28" pos:end="71:28"><literal type="number" pos:start="71:28" pos:end="71:28">1</literal></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="75:17" pos:end="75:40"><expr pos:start="75:17" pos:end="75:39"><name pos:start="75:17" pos:end="75:20">pass</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <operator pos:start="75:24" pos:end="75:24">(</operator><name pos:start="75:25" pos:end="75:28">insn</name> <operator pos:start="75:30" pos:end="75:31">&gt;&gt;</operator> <literal type="number" pos:start="75:33" pos:end="75:34">21</literal><operator pos:start="75:35" pos:end="75:35">)</operator> <operator pos:start="75:37" pos:end="75:37">&amp;</operator> <literal type="number" pos:start="75:39" pos:end="75:39">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="77:17" pos:end="95:17"><if pos:start="77:17" pos:end="83:17">if <condition pos:start="77:20" pos:end="77:37">(<expr pos:start="77:21" pos:end="77:36"><name pos:start="77:21" pos:end="77:24">insn</name> <operator pos:start="77:26" pos:end="77:26">&amp;</operator> <operator pos:start="77:28" pos:end="77:28">(</operator><literal type="number" pos:start="77:29" pos:end="77:29">1</literal> <operator pos:start="77:31" pos:end="77:32">&lt;&lt;</operator> <literal type="number" pos:start="77:34" pos:end="77:35">22</literal><operator pos:start="77:36" pos:end="77:36">)</operator></expr>)</condition> <block pos:start="77:39" pos:end="83:17">{<block_content pos:start="79:21" pos:end="81:51">

                    <expr_stmt pos:start="79:21" pos:end="79:29"><expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:24">size</name> <operator pos:start="79:26" pos:end="79:26">=</operator> <literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:51"><expr pos:start="81:21" pos:end="81:50"><name pos:start="81:21" pos:end="81:26">offset</name> <operator pos:start="81:28" pos:end="81:28">=</operator> <operator pos:start="81:30" pos:end="81:30">(</operator><operator pos:start="81:31" pos:end="81:31">(</operator><name pos:start="81:32" pos:end="81:35">insn</name> <operator pos:start="81:37" pos:end="81:38">&gt;&gt;</operator> <literal type="number" pos:start="81:40" pos:end="81:40">5</literal><operator pos:start="81:41" pos:end="81:41">)</operator> <operator pos:start="81:43" pos:end="81:43">&amp;</operator> <literal type="number" pos:start="81:45" pos:end="81:45">3</literal><operator pos:start="81:46" pos:end="81:46">)</operator> <operator pos:start="81:48" pos:end="81:48">*</operator> <literal type="number" pos:start="81:50" pos:end="81:50">8</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="83:19" pos:end="89:17">else if <condition pos:start="83:27" pos:end="83:43">(<expr pos:start="83:28" pos:end="83:42"><name pos:start="83:28" pos:end="83:31">insn</name> <operator pos:start="83:33" pos:end="83:33">&amp;</operator> <operator pos:start="83:35" pos:end="83:35">(</operator><literal type="number" pos:start="83:36" pos:end="83:36">1</literal> <operator pos:start="83:38" pos:end="83:39">&lt;&lt;</operator> <literal type="number" pos:start="83:41" pos:end="83:41">5</literal><operator pos:start="83:42" pos:end="83:42">)</operator></expr>)</condition> <block pos:start="83:45" pos:end="89:17">{<block_content pos:start="85:21" pos:end="87:56">

                    <expr_stmt pos:start="85:21" pos:end="85:29"><expr pos:start="85:21" pos:end="85:28"><name pos:start="85:21" pos:end="85:24">size</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <literal type="number" pos:start="85:28" pos:end="85:28">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:56"><expr pos:start="87:21" pos:end="87:55"><name pos:start="87:21" pos:end="87:26">offset</name> <operator pos:start="87:28" pos:end="87:28">=</operator> <ternary pos:start="87:30" pos:end="87:55"><condition pos:start="87:30" pos:end="87:48"><expr pos:start="87:30" pos:end="87:46"><operator pos:start="87:30" pos:end="87:30">(</operator><name pos:start="87:31" pos:end="87:34">insn</name> <operator pos:start="87:36" pos:end="87:36">&amp;</operator> <operator pos:start="87:38" pos:end="87:38">(</operator><literal type="number" pos:start="87:39" pos:end="87:39">1</literal> <operator pos:start="87:41" pos:end="87:42">&lt;&lt;</operator> <literal type="number" pos:start="87:44" pos:end="87:44">6</literal><operator pos:start="87:45" pos:end="87:45">)</operator><operator pos:start="87:46" pos:end="87:46">)</operator></expr> ?</condition><then pos:start="87:50" pos:end="87:51"> <expr pos:start="87:50" pos:end="87:51"><literal type="number" pos:start="87:50" pos:end="87:51">16</literal></expr> </then><else pos:start="87:53" pos:end="87:55">: <expr pos:start="87:55" pos:end="87:55"><literal type="number" pos:start="87:55" pos:end="87:55">0</literal></expr></else></ternary></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="89:19" pos:end="95:17">else <block pos:start="89:24" pos:end="95:17">{<block_content pos:start="91:21" pos:end="93:31">

                    <expr_stmt pos:start="91:21" pos:end="91:29"><expr pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:24">size</name> <operator pos:start="91:26" pos:end="91:26">=</operator> <literal type="number" pos:start="91:28" pos:end="91:28">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:31"><expr pos:start="93:21" pos:end="93:30"><name pos:start="93:21" pos:end="93:26">offset</name> <operator pos:start="93:28" pos:end="93:28">=</operator> <literal type="number" pos:start="93:30" pos:end="93:30">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="97:17" pos:end="227:17"><if pos:start="97:17" pos:end="159:17">if <condition pos:start="97:20" pos:end="97:41">(<expr pos:start="97:21" pos:end="97:40"><name pos:start="97:21" pos:end="97:24">insn</name> <operator pos:start="97:26" pos:end="97:26">&amp;</operator> <name pos:start="97:28" pos:end="97:40">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="97:43" pos:end="159:17">{<block_content pos:start="101:21" pos:end="157:42">

                    <comment type="block" pos:start="99:21" pos:end="99:34">/* vfp-&gt;arm */</comment>

                    <expr_stmt pos:start="101:21" pos:end="101:50"><expr pos:start="101:21" pos:end="101:49"><name pos:start="101:21" pos:end="101:23">tmp</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <call pos:start="101:27" pos:end="101:49"><name pos:start="101:27" pos:end="101:39">neon_load_reg</name><argument_list pos:start="101:40" pos:end="101:49">(<argument pos:start="101:41" pos:end="101:42"><expr pos:start="101:41" pos:end="101:42"><name pos:start="101:41" pos:end="101:42">rn</name></expr></argument>, <argument pos:start="101:45" pos:end="101:48"><expr pos:start="101:45" pos:end="101:48"><name pos:start="101:45" pos:end="101:48">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="103:21" pos:end="155:21">switch <condition pos:start="103:28" pos:end="103:33">(<expr pos:start="103:29" pos:end="103:32"><name pos:start="103:29" pos:end="103:32">size</name></expr>)</condition> <block pos:start="103:35" pos:end="155:21">{<block_content pos:start="105:21" pos:end="153:30">

                    <case pos:start="105:21" pos:end="105:27">case <expr pos:start="105:26" pos:end="105:26"><literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr>:</case>

                        <if_stmt pos:start="107:25" pos:end="109:63"><if pos:start="107:25" pos:end="109:63">if <condition pos:start="107:28" pos:end="107:35">(<expr pos:start="107:29" pos:end="107:34"><name pos:start="107:29" pos:end="107:34">offset</name></expr>)</condition><block type="pseudo" pos:start="109:29" pos:end="109:63"><block_content pos:start="109:29" pos:end="109:63">

                            <expr_stmt pos:start="109:29" pos:end="109:63"><expr pos:start="109:29" pos:end="109:62"><call pos:start="109:29" pos:end="109:62"><name pos:start="109:29" pos:end="109:44">tcg_gen_shri_i32</name><argument_list pos:start="109:45" pos:end="109:62">(<argument pos:start="109:46" pos:end="109:48"><expr pos:start="109:46" pos:end="109:48"><name pos:start="109:46" pos:end="109:48">tmp</name></expr></argument>, <argument pos:start="109:51" pos:end="109:53"><expr pos:start="109:51" pos:end="109:53"><name pos:start="109:51" pos:end="109:53">tmp</name></expr></argument>, <argument pos:start="109:56" pos:end="109:61"><expr pos:start="109:56" pos:end="109:61"><name pos:start="109:56" pos:end="109:61">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <if_stmt pos:start="111:25" pos:end="117:42"><if pos:start="111:25" pos:end="113:42">if <condition pos:start="111:28" pos:end="111:45">(<expr pos:start="111:29" pos:end="111:44"><name pos:start="111:29" pos:end="111:32">insn</name> <operator pos:start="111:34" pos:end="111:34">&amp;</operator> <operator pos:start="111:36" pos:end="111:36">(</operator><literal type="number" pos:start="111:37" pos:end="111:37">1</literal> <operator pos:start="111:39" pos:end="111:40">&lt;&lt;</operator> <literal type="number" pos:start="111:42" pos:end="111:43">23</literal><operator pos:start="111:44" pos:end="111:44">)</operator></expr>)</condition><block type="pseudo" pos:start="113:29" pos:end="113:42"><block_content pos:start="113:29" pos:end="113:42">

                            <expr_stmt pos:start="113:29" pos:end="113:42"><expr pos:start="113:29" pos:end="113:41"><call pos:start="113:29" pos:end="113:41"><name pos:start="113:29" pos:end="113:36">gen_uxtb</name><argument_list pos:start="113:37" pos:end="113:41">(<argument pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><name pos:start="113:38" pos:end="113:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="115:25" pos:end="117:42">else<block type="pseudo" pos:start="117:29" pos:end="117:42"><block_content pos:start="117:29" pos:end="117:42">

                            <expr_stmt pos:start="117:29" pos:end="117:42"><expr pos:start="117:29" pos:end="117:41"><call pos:start="117:29" pos:end="117:41"><name pos:start="117:29" pos:end="117:36">gen_sxtb</name><argument_list pos:start="117:37" pos:end="117:41">(<argument pos:start="117:38" pos:end="117:40"><expr pos:start="117:38" pos:end="117:40"><name pos:start="117:38" pos:end="117:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <break pos:start="119:25" pos:end="119:30">break;</break>

                    <case pos:start="121:21" pos:end="121:27">case <expr pos:start="121:26" pos:end="121:26"><literal type="number" pos:start="121:26" pos:end="121:26">1</literal></expr>:</case>

                        <if_stmt pos:start="123:25" pos:end="147:25"><if pos:start="123:25" pos:end="135:25">if <condition pos:start="123:28" pos:end="123:45">(<expr pos:start="123:29" pos:end="123:44"><name pos:start="123:29" pos:end="123:32">insn</name> <operator pos:start="123:34" pos:end="123:34">&amp;</operator> <operator pos:start="123:36" pos:end="123:36">(</operator><literal type="number" pos:start="123:37" pos:end="123:37">1</literal> <operator pos:start="123:39" pos:end="123:40">&lt;&lt;</operator> <literal type="number" pos:start="123:42" pos:end="123:43">23</literal><operator pos:start="123:44" pos:end="123:44">)</operator></expr>)</condition> <block pos:start="123:47" pos:end="135:25">{<block_content pos:start="125:29" pos:end="133:29">

                            <if_stmt pos:start="125:29" pos:end="133:29"><if pos:start="125:29" pos:end="129:29">if <condition pos:start="125:32" pos:end="125:39">(<expr pos:start="125:33" pos:end="125:38"><name pos:start="125:33" pos:end="125:38">offset</name></expr>)</condition> <block pos:start="125:41" pos:end="129:29">{<block_content pos:start="127:33" pos:end="127:63">

                                <expr_stmt pos:start="127:33" pos:end="127:63"><expr pos:start="127:33" pos:end="127:62"><call pos:start="127:33" pos:end="127:62"><name pos:start="127:33" pos:end="127:48">tcg_gen_shri_i32</name><argument_list pos:start="127:49" pos:end="127:62">(<argument pos:start="127:50" pos:end="127:52"><expr pos:start="127:50" pos:end="127:52"><name pos:start="127:50" pos:end="127:52">tmp</name></expr></argument>, <argument pos:start="127:55" pos:end="127:57"><expr pos:start="127:55" pos:end="127:57"><name pos:start="127:55" pos:end="127:57">tmp</name></expr></argument>, <argument pos:start="127:60" pos:end="127:61"><expr pos:start="127:60" pos:end="127:61"><literal type="number" pos:start="127:60" pos:end="127:61">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="129:31" pos:end="133:29">else <block pos:start="129:36" pos:end="133:29">{<block_content pos:start="131:33" pos:end="131:46">

                                <expr_stmt pos:start="131:33" pos:end="131:46"><expr pos:start="131:33" pos:end="131:45"><call pos:start="131:33" pos:end="131:45"><name pos:start="131:33" pos:end="131:40">gen_uxth</name><argument_list pos:start="131:41" pos:end="131:45">(<argument pos:start="131:42" pos:end="131:44"><expr pos:start="131:42" pos:end="131:44"><name pos:start="131:42" pos:end="131:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="135:27" pos:end="147:25">else <block pos:start="135:32" pos:end="147:25">{<block_content pos:start="137:29" pos:end="145:29">

                            <if_stmt pos:start="137:29" pos:end="145:29"><if pos:start="137:29" pos:end="141:29">if <condition pos:start="137:32" pos:end="137:39">(<expr pos:start="137:33" pos:end="137:38"><name pos:start="137:33" pos:end="137:38">offset</name></expr>)</condition> <block pos:start="137:41" pos:end="141:29">{<block_content pos:start="139:33" pos:end="139:63">

                                <expr_stmt pos:start="139:33" pos:end="139:63"><expr pos:start="139:33" pos:end="139:62"><call pos:start="139:33" pos:end="139:62"><name pos:start="139:33" pos:end="139:48">tcg_gen_sari_i32</name><argument_list pos:start="139:49" pos:end="139:62">(<argument pos:start="139:50" pos:end="139:52"><expr pos:start="139:50" pos:end="139:52"><name pos:start="139:50" pos:end="139:52">tmp</name></expr></argument>, <argument pos:start="139:55" pos:end="139:57"><expr pos:start="139:55" pos:end="139:57"><name pos:start="139:55" pos:end="139:57">tmp</name></expr></argument>, <argument pos:start="139:60" pos:end="139:61"><expr pos:start="139:60" pos:end="139:61"><literal type="number" pos:start="139:60" pos:end="139:61">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="141:31" pos:end="145:29">else <block pos:start="141:36" pos:end="145:29">{<block_content pos:start="143:33" pos:end="143:46">

                                <expr_stmt pos:start="143:33" pos:end="143:46"><expr pos:start="143:33" pos:end="143:45"><call pos:start="143:33" pos:end="143:45"><name pos:start="143:33" pos:end="143:40">gen_sxth</name><argument_list pos:start="143:41" pos:end="143:45">(<argument pos:start="143:42" pos:end="143:44"><expr pos:start="143:42" pos:end="143:44"><name pos:start="143:42" pos:end="143:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="149:25" pos:end="149:30">break;</break>

                    <case pos:start="151:21" pos:end="151:27">case <expr pos:start="151:26" pos:end="151:26"><literal type="number" pos:start="151:26" pos:end="151:26">2</literal></expr>:</case>

                        <break pos:start="153:25" pos:end="153:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="157:21" pos:end="157:42"><expr pos:start="157:21" pos:end="157:41"><call pos:start="157:21" pos:end="157:41"><name pos:start="157:21" pos:end="157:29">store_reg</name><argument_list pos:start="157:30" pos:end="157:41">(<argument pos:start="157:31" pos:end="157:31"><expr pos:start="157:31" pos:end="157:31"><name pos:start="157:31" pos:end="157:31">s</name></expr></argument>, <argument pos:start="157:34" pos:end="157:35"><expr pos:start="157:34" pos:end="157:35"><name pos:start="157:34" pos:end="157:35">rd</name></expr></argument>, <argument pos:start="157:38" pos:end="157:40"><expr pos:start="157:38" pos:end="157:40"><name pos:start="157:38" pos:end="157:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="159:19" pos:end="227:17">else <block pos:start="159:24" pos:end="227:17">{<block_content pos:start="163:21" pos:end="225:21">

                    <comment type="block" pos:start="161:21" pos:end="161:34">/* arm-&gt;vfp */</comment>

                    <expr_stmt pos:start="163:21" pos:end="163:42"><expr pos:start="163:21" pos:end="163:41"><name pos:start="163:21" pos:end="163:23">tmp</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <call pos:start="163:27" pos:end="163:41"><name pos:start="163:27" pos:end="163:34">load_reg</name><argument_list pos:start="163:35" pos:end="163:41">(<argument pos:start="163:36" pos:end="163:36"><expr pos:start="163:36" pos:end="163:36"><name pos:start="163:36" pos:end="163:36">s</name></expr></argument>, <argument pos:start="163:39" pos:end="163:40"><expr pos:start="163:39" pos:end="163:40"><name pos:start="163:39" pos:end="163:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="165:21" pos:end="225:21"><if pos:start="165:21" pos:end="191:21">if <condition pos:start="165:24" pos:end="165:41">(<expr pos:start="165:25" pos:end="165:40"><name pos:start="165:25" pos:end="165:28">insn</name> <operator pos:start="165:30" pos:end="165:30">&amp;</operator> <operator pos:start="165:32" pos:end="165:32">(</operator><literal type="number" pos:start="165:33" pos:end="165:33">1</literal> <operator pos:start="165:35" pos:end="165:36">&lt;&lt;</operator> <literal type="number" pos:start="165:38" pos:end="165:39">23</literal><operator pos:start="165:40" pos:end="165:40">)</operator></expr>)</condition> <block pos:start="165:43" pos:end="191:21">{<block_content pos:start="169:25" pos:end="189:51">

                        <comment type="block" pos:start="167:25" pos:end="167:34">/* VDUP */</comment>

                        <if_stmt pos:start="169:25" pos:end="177:25"><if pos:start="169:25" pos:end="173:25">if <condition pos:start="169:28" pos:end="169:38">(<expr pos:start="169:29" pos:end="169:37"><name pos:start="169:29" pos:end="169:32">size</name> <operator pos:start="169:34" pos:end="169:35">==</operator> <literal type="number" pos:start="169:37" pos:end="169:37">0</literal></expr>)</condition> <block pos:start="169:40" pos:end="173:25">{<block_content pos:start="171:29" pos:end="171:52">

                            <expr_stmt pos:start="171:29" pos:end="171:52"><expr pos:start="171:29" pos:end="171:51"><call pos:start="171:29" pos:end="171:51"><name pos:start="171:29" pos:end="171:43">gen_neon_dup_u8</name><argument_list pos:start="171:44" pos:end="171:51">(<argument pos:start="171:45" pos:end="171:47"><expr pos:start="171:45" pos:end="171:47"><name pos:start="171:45" pos:end="171:47">tmp</name></expr></argument>, <argument pos:start="171:50" pos:end="171:50"><expr pos:start="171:50" pos:end="171:50"><literal type="number" pos:start="171:50" pos:end="171:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="173:27" pos:end="177:25">else if <condition pos:start="173:35" pos:end="173:45">(<expr pos:start="173:36" pos:end="173:44"><name pos:start="173:36" pos:end="173:39">size</name> <operator pos:start="173:41" pos:end="173:42">==</operator> <literal type="number" pos:start="173:44" pos:end="173:44">1</literal></expr>)</condition> <block pos:start="173:47" pos:end="177:25">{<block_content pos:start="175:29" pos:end="175:52">

                            <expr_stmt pos:start="175:29" pos:end="175:52"><expr pos:start="175:29" pos:end="175:51"><call pos:start="175:29" pos:end="175:51"><name pos:start="175:29" pos:end="175:46">gen_neon_dup_low16</name><argument_list pos:start="175:47" pos:end="175:51">(<argument pos:start="175:48" pos:end="175:50"><expr pos:start="175:48" pos:end="175:50"><name pos:start="175:48" pos:end="175:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <for pos:start="179:25" pos:end="187:25">for <control pos:start="179:29" pos:end="179:55">(<init pos:start="179:30" pos:end="179:35"><expr pos:start="179:30" pos:end="179:34"><name pos:start="179:30" pos:end="179:30">n</name> <operator pos:start="179:32" pos:end="179:32">=</operator> <literal type="number" pos:start="179:34" pos:end="179:34">0</literal></expr>;</init> <condition pos:start="179:37" pos:end="179:50"><expr pos:start="179:37" pos:end="179:49"><name pos:start="179:37" pos:end="179:37">n</name> <operator pos:start="179:39" pos:end="179:40">&lt;=</operator> <name pos:start="179:42" pos:end="179:45">pass</name> <operator pos:start="179:47" pos:end="179:47">*</operator> <literal type="number" pos:start="179:49" pos:end="179:49">2</literal></expr>;</condition> <incr pos:start="179:52" pos:end="179:54"><expr pos:start="179:52" pos:end="179:54"><name pos:start="179:52" pos:end="179:52">n</name><operator pos:start="179:53" pos:end="179:54">++</operator></expr></incr>)</control> <block pos:start="179:57" pos:end="187:25">{<block_content pos:start="181:29" pos:end="185:56">

                            <expr_stmt pos:start="181:29" pos:end="181:54"><expr pos:start="181:29" pos:end="181:53"><name pos:start="181:29" pos:end="181:32">tmp2</name> <operator pos:start="181:34" pos:end="181:34">=</operator> <call pos:start="181:36" pos:end="181:53"><name pos:start="181:36" pos:end="181:51">tcg_temp_new_i32</name><argument_list pos:start="181:52" pos:end="181:53">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="183:29" pos:end="183:55"><expr pos:start="183:29" pos:end="183:54"><call pos:start="183:29" pos:end="183:54"><name pos:start="183:29" pos:end="183:43">tcg_gen_mov_i32</name><argument_list pos:start="183:44" pos:end="183:54">(<argument pos:start="183:45" pos:end="183:48"><expr pos:start="183:45" pos:end="183:48"><name pos:start="183:45" pos:end="183:48">tmp2</name></expr></argument>, <argument pos:start="183:51" pos:end="183:53"><expr pos:start="183:51" pos:end="183:53"><name pos:start="183:51" pos:end="183:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="185:29" pos:end="185:56"><expr pos:start="185:29" pos:end="185:55"><call pos:start="185:29" pos:end="185:55"><name pos:start="185:29" pos:end="185:42">neon_store_reg</name><argument_list pos:start="185:43" pos:end="185:55">(<argument pos:start="185:44" pos:end="185:45"><expr pos:start="185:44" pos:end="185:45"><name pos:start="185:44" pos:end="185:45">rn</name></expr></argument>, <argument pos:start="185:48" pos:end="185:48"><expr pos:start="185:48" pos:end="185:48"><name pos:start="185:48" pos:end="185:48">n</name></expr></argument>, <argument pos:start="185:51" pos:end="185:54"><expr pos:start="185:51" pos:end="185:54"><name pos:start="185:51" pos:end="185:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="189:25" pos:end="189:51"><expr pos:start="189:25" pos:end="189:50"><call pos:start="189:25" pos:end="189:50"><name pos:start="189:25" pos:end="189:38">neon_store_reg</name><argument_list pos:start="189:39" pos:end="189:50">(<argument pos:start="189:40" pos:end="189:41"><expr pos:start="189:40" pos:end="189:41"><name pos:start="189:40" pos:end="189:41">rn</name></expr></argument>, <argument pos:start="189:44" pos:end="189:44"><expr pos:start="189:44" pos:end="189:44"><name pos:start="189:44" pos:end="189:44">n</name></expr></argument>, <argument pos:start="189:47" pos:end="189:49"><expr pos:start="189:47" pos:end="189:49"><name pos:start="189:47" pos:end="189:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="191:23" pos:end="225:21">else <block pos:start="191:28" pos:end="225:21">{<block_content pos:start="195:25" pos:end="223:54">

                        <comment type="block" pos:start="193:25" pos:end="193:34">/* VMOV */</comment>

                        <switch pos:start="195:25" pos:end="221:25">switch <condition pos:start="195:32" pos:end="195:37">(<expr pos:start="195:33" pos:end="195:36"><name pos:start="195:33" pos:end="195:36">size</name></expr>)</condition> <block pos:start="195:39" pos:end="221:25">{<block_content pos:start="197:25" pos:end="219:34">

                        <case pos:start="197:25" pos:end="197:31">case <expr pos:start="197:30" pos:end="197:30"><literal type="number" pos:start="197:30" pos:end="197:30">0</literal></expr>:</case>

                            <expr_stmt pos:start="199:29" pos:end="199:59"><expr pos:start="199:29" pos:end="199:58"><name pos:start="199:29" pos:end="199:32">tmp2</name> <operator pos:start="199:34" pos:end="199:34">=</operator> <call pos:start="199:36" pos:end="199:58"><name pos:start="199:36" pos:end="199:48">neon_load_reg</name><argument_list pos:start="199:49" pos:end="199:58">(<argument pos:start="199:50" pos:end="199:51"><expr pos:start="199:50" pos:end="199:51"><name pos:start="199:50" pos:end="199:51">rn</name></expr></argument>, <argument pos:start="199:54" pos:end="199:57"><expr pos:start="199:54" pos:end="199:57"><name pos:start="199:54" pos:end="199:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="201:29" pos:end="201:75"><expr pos:start="201:29" pos:end="201:74"><call pos:start="201:29" pos:end="201:74"><name pos:start="201:29" pos:end="201:47">tcg_gen_deposit_i32</name><argument_list pos:start="201:48" pos:end="201:74">(<argument pos:start="201:49" pos:end="201:51"><expr pos:start="201:49" pos:end="201:51"><name pos:start="201:49" pos:end="201:51">tmp</name></expr></argument>, <argument pos:start="201:54" pos:end="201:57"><expr pos:start="201:54" pos:end="201:57"><name pos:start="201:54" pos:end="201:57">tmp2</name></expr></argument>, <argument pos:start="201:60" pos:end="201:62"><expr pos:start="201:60" pos:end="201:62"><name pos:start="201:60" pos:end="201:62">tmp</name></expr></argument>, <argument pos:start="201:65" pos:end="201:70"><expr pos:start="201:65" pos:end="201:70"><name pos:start="201:65" pos:end="201:70">offset</name></expr></argument>, <argument pos:start="201:73" pos:end="201:73"><expr pos:start="201:73" pos:end="201:73"><literal type="number" pos:start="201:73" pos:end="201:73">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="203:29" pos:end="203:52"><expr pos:start="203:29" pos:end="203:51"><call pos:start="203:29" pos:end="203:51"><name pos:start="203:29" pos:end="203:45">tcg_temp_free_i32</name><argument_list pos:start="203:46" pos:end="203:51">(<argument pos:start="203:47" pos:end="203:50"><expr pos:start="203:47" pos:end="203:50"><name pos:start="203:47" pos:end="203:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="205:29" pos:end="205:34">break;</break>

                        <case pos:start="207:25" pos:end="207:31">case <expr pos:start="207:30" pos:end="207:30"><literal type="number" pos:start="207:30" pos:end="207:30">1</literal></expr>:</case>

                            <expr_stmt pos:start="209:29" pos:end="209:59"><expr pos:start="209:29" pos:end="209:58"><name pos:start="209:29" pos:end="209:32">tmp2</name> <operator pos:start="209:34" pos:end="209:34">=</operator> <call pos:start="209:36" pos:end="209:58"><name pos:start="209:36" pos:end="209:48">neon_load_reg</name><argument_list pos:start="209:49" pos:end="209:58">(<argument pos:start="209:50" pos:end="209:51"><expr pos:start="209:50" pos:end="209:51"><name pos:start="209:50" pos:end="209:51">rn</name></expr></argument>, <argument pos:start="209:54" pos:end="209:57"><expr pos:start="209:54" pos:end="209:57"><name pos:start="209:54" pos:end="209:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="211:29" pos:end="211:76"><expr pos:start="211:29" pos:end="211:75"><call pos:start="211:29" pos:end="211:75"><name pos:start="211:29" pos:end="211:47">tcg_gen_deposit_i32</name><argument_list pos:start="211:48" pos:end="211:75">(<argument pos:start="211:49" pos:end="211:51"><expr pos:start="211:49" pos:end="211:51"><name pos:start="211:49" pos:end="211:51">tmp</name></expr></argument>, <argument pos:start="211:54" pos:end="211:57"><expr pos:start="211:54" pos:end="211:57"><name pos:start="211:54" pos:end="211:57">tmp2</name></expr></argument>, <argument pos:start="211:60" pos:end="211:62"><expr pos:start="211:60" pos:end="211:62"><name pos:start="211:60" pos:end="211:62">tmp</name></expr></argument>, <argument pos:start="211:65" pos:end="211:70"><expr pos:start="211:65" pos:end="211:70"><name pos:start="211:65" pos:end="211:70">offset</name></expr></argument>, <argument pos:start="211:73" pos:end="211:74"><expr pos:start="211:73" pos:end="211:74"><literal type="number" pos:start="211:73" pos:end="211:74">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="213:29" pos:end="213:52"><expr pos:start="213:29" pos:end="213:51"><call pos:start="213:29" pos:end="213:51"><name pos:start="213:29" pos:end="213:45">tcg_temp_free_i32</name><argument_list pos:start="213:46" pos:end="213:51">(<argument pos:start="213:47" pos:end="213:50"><expr pos:start="213:47" pos:end="213:50"><name pos:start="213:47" pos:end="213:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="215:29" pos:end="215:34">break;</break>

                        <case pos:start="217:25" pos:end="217:31">case <expr pos:start="217:30" pos:end="217:30"><literal type="number" pos:start="217:30" pos:end="217:30">2</literal></expr>:</case>

                            <break pos:start="219:29" pos:end="219:34">break;</break>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="223:25" pos:end="223:54"><expr pos:start="223:25" pos:end="223:53"><call pos:start="223:25" pos:end="223:53"><name pos:start="223:25" pos:end="223:38">neon_store_reg</name><argument_list pos:start="223:39" pos:end="223:53">(<argument pos:start="223:40" pos:end="223:41"><expr pos:start="223:40" pos:end="223:41"><name pos:start="223:40" pos:end="223:41">rn</name></expr></argument>, <argument pos:start="223:44" pos:end="223:47"><expr pos:start="223:44" pos:end="223:47"><name pos:start="223:44" pos:end="223:47">pass</name></expr></argument>, <argument pos:start="223:50" pos:end="223:52"><expr pos:start="223:50" pos:end="223:52"><name pos:start="223:50" pos:end="223:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="229:15" pos:end="431:13">else <block pos:start="229:20" pos:end="431:13">{<block_content pos:start="231:17" pos:end="429:17"> <comment type="block" pos:start="229:22" pos:end="229:30">/* !dp */</comment>

                <if_stmt pos:start="231:17" pos:end="233:29"><if pos:start="231:17" pos:end="233:29">if <condition pos:start="231:20" pos:end="231:42">(<expr pos:start="231:21" pos:end="231:41"><operator pos:start="231:21" pos:end="231:21">(</operator><name pos:start="231:22" pos:end="231:25">insn</name> <operator pos:start="231:27" pos:end="231:27">&amp;</operator> <literal type="number" pos:start="231:29" pos:end="231:32">0x6f</literal><operator pos:start="231:33" pos:end="231:33">)</operator> <operator pos:start="231:35" pos:end="231:36">!=</operator> <literal type="number" pos:start="231:38" pos:end="231:41">0x00</literal></expr>)</condition><block type="pseudo" pos:start="233:21" pos:end="233:29"><block_content pos:start="233:21" pos:end="233:29">

                    <return pos:start="233:21" pos:end="233:29">return <expr pos:start="233:28" pos:end="233:28"><literal type="number" pos:start="233:28" pos:end="233:28">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:38"><expr pos:start="235:17" pos:end="235:37"><name pos:start="235:17" pos:end="235:18">rn</name> <operator pos:start="235:20" pos:end="235:20">=</operator> <call pos:start="235:22" pos:end="235:37"><name pos:start="235:22" pos:end="235:31">VFP_SREG_N</name><argument_list pos:start="235:32" pos:end="235:37">(<argument pos:start="235:33" pos:end="235:36"><expr pos:start="235:33" pos:end="235:36"><name pos:start="235:33" pos:end="235:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="237:17" pos:end="429:17"><if pos:start="237:17" pos:end="355:17">if <condition pos:start="237:20" pos:end="237:41">(<expr pos:start="237:21" pos:end="237:40"><name pos:start="237:21" pos:end="237:24">insn</name> <operator pos:start="237:26" pos:end="237:26">&amp;</operator> <name pos:start="237:28" pos:end="237:40">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="237:43" pos:end="355:17">{<block_content pos:start="241:21" pos:end="353:21">

                    <comment type="block" pos:start="239:21" pos:end="239:34">/* vfp-&gt;arm */</comment>

                    <if_stmt pos:start="241:21" pos:end="339:21"><if pos:start="241:21" pos:end="333:21">if <condition pos:start="241:24" pos:end="241:41">(<expr pos:start="241:25" pos:end="241:40"><name pos:start="241:25" pos:end="241:28">insn</name> <operator pos:start="241:30" pos:end="241:30">&amp;</operator> <operator pos:start="241:32" pos:end="241:32">(</operator><literal type="number" pos:start="241:33" pos:end="241:33">1</literal> <operator pos:start="241:35" pos:end="241:36">&lt;&lt;</operator> <literal type="number" pos:start="241:38" pos:end="241:39">21</literal><operator pos:start="241:40" pos:end="241:40">)</operator></expr>)</condition> <block pos:start="241:43" pos:end="333:21">{<block_content pos:start="245:25" pos:end="331:25">

                        <comment type="block" pos:start="243:25" pos:end="243:45">/* system register */</comment>

                        <expr_stmt pos:start="245:25" pos:end="245:33"><expr pos:start="245:25" pos:end="245:32"><name pos:start="245:25" pos:end="245:26">rn</name> <operator pos:start="245:28" pos:end="245:30">&gt;&gt;=</operator> <literal type="number" pos:start="245:32" pos:end="245:32">1</literal></expr>;</expr_stmt>



                        <switch pos:start="249:25" pos:end="331:25">switch <condition pos:start="249:32" pos:end="249:35">(<expr pos:start="249:33" pos:end="249:34"><name pos:start="249:33" pos:end="249:34">rn</name></expr>)</condition> <block pos:start="249:37" pos:end="331:25">{<block_content pos:start="251:25" pos:end="329:37">

                        <case pos:start="251:25" pos:end="251:43">case <expr pos:start="251:30" pos:end="251:42"><name pos:start="251:30" pos:end="251:42">ARM_VFP_FPSID</name></expr>:</case>

                            <comment type="block" pos:start="253:29" pos:end="257:44">/* VFP2 allows access to FSID from userspace.

                               VFP3 restricts all id registers to privileged

                               accesses.  */</comment>

                            <if_stmt pos:start="259:29" pos:end="263:41"><if pos:start="259:29" pos:end="263:41">if <condition pos:start="259:32" pos:end="261:70">(<expr pos:start="259:33" pos:end="261:69"><call pos:start="259:33" pos:end="259:42"><name pos:start="259:33" pos:end="259:39">IS_USER</name><argument_list pos:start="259:40" pos:end="259:42">(<argument pos:start="259:41" pos:end="259:41"><expr pos:start="259:41" pos:end="259:41"><name pos:start="259:41" pos:end="259:41">s</name></expr></argument>)</argument_list></call>

                                <operator pos:start="261:33" pos:end="261:34">&amp;&amp;</operator> <call pos:start="261:36" pos:end="261:69"><name pos:start="261:36" pos:end="261:46">arm_feature</name><argument_list pos:start="261:47" pos:end="261:69">(<argument pos:start="261:48" pos:end="261:50"><expr pos:start="261:48" pos:end="261:50"><name pos:start="261:48" pos:end="261:50">env</name></expr></argument>, <argument pos:start="261:53" pos:end="261:68"><expr pos:start="261:53" pos:end="261:68"><name pos:start="261:53" pos:end="261:68">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="263:33" pos:end="263:41"><block_content pos:start="263:33" pos:end="263:41">

                                <return pos:start="263:33" pos:end="263:41">return <expr pos:start="263:40" pos:end="263:40"><literal type="number" pos:start="263:40" pos:end="263:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="265:29" pos:end="265:64"><expr pos:start="265:29" pos:end="265:63"><name pos:start="265:29" pos:end="265:31">tmp</name> <operator pos:start="265:33" pos:end="265:33">=</operator> <call pos:start="265:35" pos:end="265:63"><name pos:start="265:35" pos:end="265:48">load_cpu_field</name><argument_list pos:start="265:49" pos:end="265:63">(<argument pos:start="265:50" pos:end="265:62"><expr pos:start="265:50" pos:end="265:62"><name pos:start="265:50" pos:end="265:62"><name pos:start="265:50" pos:end="265:52">vfp</name><operator pos:start="265:53" pos:end="265:53">.</operator><name pos:start="265:54" pos:end="265:58">xregs</name><index pos:start="265:59" pos:end="265:62">[<expr pos:start="265:60" pos:end="265:61"><name pos:start="265:60" pos:end="265:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="267:29" pos:end="267:34">break;</break>

                        <case pos:start="269:25" pos:end="269:43">case <expr pos:start="269:30" pos:end="269:42"><name pos:start="269:30" pos:end="269:42">ARM_VFP_FPEXC</name></expr>:</case>

                            <if_stmt pos:start="271:29" pos:end="273:41"><if pos:start="271:29" pos:end="273:41">if <condition pos:start="271:32" pos:end="271:43">(<expr pos:start="271:33" pos:end="271:42"><call pos:start="271:33" pos:end="271:42"><name pos:start="271:33" pos:end="271:39">IS_USER</name><argument_list pos:start="271:40" pos:end="271:42">(<argument pos:start="271:41" pos:end="271:41"><expr pos:start="271:41" pos:end="271:41"><name pos:start="271:41" pos:end="271:41">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="273:33" pos:end="273:41"><block_content pos:start="273:33" pos:end="273:41">

                                <return pos:start="273:33" pos:end="273:41">return <expr pos:start="273:40" pos:end="273:40"><literal type="number" pos:start="273:40" pos:end="273:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="275:29" pos:end="275:64"><expr pos:start="275:29" pos:end="275:63"><name pos:start="275:29" pos:end="275:31">tmp</name> <operator pos:start="275:33" pos:end="275:33">=</operator> <call pos:start="275:35" pos:end="275:63"><name pos:start="275:35" pos:end="275:48">load_cpu_field</name><argument_list pos:start="275:49" pos:end="275:63">(<argument pos:start="275:50" pos:end="275:62"><expr pos:start="275:50" pos:end="275:62"><name pos:start="275:50" pos:end="275:62"><name pos:start="275:50" pos:end="275:52">vfp</name><operator pos:start="275:53" pos:end="275:53">.</operator><name pos:start="275:54" pos:end="275:58">xregs</name><index pos:start="275:59" pos:end="275:62">[<expr pos:start="275:60" pos:end="275:61"><name pos:start="275:60" pos:end="275:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="277:29" pos:end="277:34">break;</break>

                        <case pos:start="279:25" pos:end="279:44">case <expr pos:start="279:30" pos:end="279:43"><name pos:start="279:30" pos:end="279:43">ARM_VFP_FPINST</name></expr>:</case>

                        <case pos:start="281:25" pos:end="281:45">case <expr pos:start="281:30" pos:end="281:44"><name pos:start="281:30" pos:end="281:44">ARM_VFP_FPINST2</name></expr>:</case>

                            <comment type="block" pos:start="283:29" pos:end="283:55">/* Not present in VFP3.  */</comment>

                            <if_stmt pos:start="285:29" pos:end="289:41"><if pos:start="285:29" pos:end="289:41">if <condition pos:start="285:32" pos:end="287:70">(<expr pos:start="285:33" pos:end="287:69"><call pos:start="285:33" pos:end="285:42"><name pos:start="285:33" pos:end="285:39">IS_USER</name><argument_list pos:start="285:40" pos:end="285:42">(<argument pos:start="285:41" pos:end="285:41"><expr pos:start="285:41" pos:end="285:41"><name pos:start="285:41" pos:end="285:41">s</name></expr></argument>)</argument_list></call>

                                <operator pos:start="287:33" pos:end="287:34">||</operator> <call pos:start="287:36" pos:end="287:69"><name pos:start="287:36" pos:end="287:46">arm_feature</name><argument_list pos:start="287:47" pos:end="287:69">(<argument pos:start="287:48" pos:end="287:50"><expr pos:start="287:48" pos:end="287:50"><name pos:start="287:48" pos:end="287:50">env</name></expr></argument>, <argument pos:start="287:53" pos:end="287:68"><expr pos:start="287:53" pos:end="287:68"><name pos:start="287:53" pos:end="287:68">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="289:33" pos:end="289:41"><block_content pos:start="289:33" pos:end="289:41">

                                <return pos:start="289:33" pos:end="289:41">return <expr pos:start="289:40" pos:end="289:40"><literal type="number" pos:start="289:40" pos:end="289:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="291:29" pos:end="291:64"><expr pos:start="291:29" pos:end="291:63"><name pos:start="291:29" pos:end="291:31">tmp</name> <operator pos:start="291:33" pos:end="291:33">=</operator> <call pos:start="291:35" pos:end="291:63"><name pos:start="291:35" pos:end="291:48">load_cpu_field</name><argument_list pos:start="291:49" pos:end="291:63">(<argument pos:start="291:50" pos:end="291:62"><expr pos:start="291:50" pos:end="291:62"><name pos:start="291:50" pos:end="291:62"><name pos:start="291:50" pos:end="291:52">vfp</name><operator pos:start="291:53" pos:end="291:53">.</operator><name pos:start="291:54" pos:end="291:58">xregs</name><index pos:start="291:59" pos:end="291:62">[<expr pos:start="291:60" pos:end="291:61"><name pos:start="291:60" pos:end="291:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="293:29" pos:end="293:34">break;</break>

                        <case pos:start="295:25" pos:end="295:43">case <expr pos:start="295:30" pos:end="295:42"><name pos:start="295:30" pos:end="295:42">ARM_VFP_FPSCR</name></expr>:</case>

                            <if_stmt pos:start="297:29" pos:end="309:29"><if pos:start="297:29" pos:end="303:29">if <condition pos:start="297:32" pos:end="297:41">(<expr pos:start="297:33" pos:end="297:40"><name pos:start="297:33" pos:end="297:34">rd</name> <operator pos:start="297:36" pos:end="297:37">==</operator> <literal type="number" pos:start="297:39" pos:end="297:40">15</literal></expr>)</condition> <block pos:start="297:43" pos:end="303:29">{<block_content pos:start="299:33" pos:end="301:71">

                                <expr_stmt pos:start="299:33" pos:end="299:79"><expr pos:start="299:33" pos:end="299:78"><name pos:start="299:33" pos:end="299:35">tmp</name> <operator pos:start="299:37" pos:end="299:37">=</operator> <call pos:start="299:39" pos:end="299:78"><name pos:start="299:39" pos:end="299:52">load_cpu_field</name><argument_list pos:start="299:53" pos:end="299:78">(<argument pos:start="299:54" pos:end="299:77"><expr pos:start="299:54" pos:end="299:77"><name pos:start="299:54" pos:end="299:77"><name pos:start="299:54" pos:end="299:56">vfp</name><operator pos:start="299:57" pos:end="299:57">.</operator><name pos:start="299:58" pos:end="299:62">xregs</name><index pos:start="299:63" pos:end="299:77">[<expr pos:start="299:64" pos:end="299:76"><name pos:start="299:64" pos:end="299:76">ARM_VFP_FPSCR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="301:33" pos:end="301:71"><expr pos:start="301:33" pos:end="301:70"><call pos:start="301:33" pos:end="301:70"><name pos:start="301:33" pos:end="301:48">tcg_gen_andi_i32</name><argument_list pos:start="301:49" pos:end="301:70">(<argument pos:start="301:50" pos:end="301:52"><expr pos:start="301:50" pos:end="301:52"><name pos:start="301:50" pos:end="301:52">tmp</name></expr></argument>, <argument pos:start="301:55" pos:end="301:57"><expr pos:start="301:55" pos:end="301:57"><name pos:start="301:55" pos:end="301:57">tmp</name></expr></argument>, <argument pos:start="301:60" pos:end="301:69"><expr pos:start="301:60" pos:end="301:69"><literal type="number" pos:start="301:60" pos:end="301:69">0xf0000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="303:31" pos:end="309:29">else <block pos:start="303:36" pos:end="309:29">{<block_content pos:start="305:33" pos:end="307:71">

                                <expr_stmt pos:start="305:33" pos:end="305:57"><expr pos:start="305:33" pos:end="305:56"><name pos:start="305:33" pos:end="305:35">tmp</name> <operator pos:start="305:37" pos:end="305:37">=</operator> <call pos:start="305:39" pos:end="305:56"><name pos:start="305:39" pos:end="305:54">tcg_temp_new_i32</name><argument_list pos:start="305:55" pos:end="305:56">()</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="307:33" pos:end="307:71"><expr pos:start="307:33" pos:end="307:70"><call pos:start="307:33" pos:end="307:70"><name pos:start="307:33" pos:end="307:56">gen_helper_vfp_get_fpscr</name><argument_list pos:start="307:57" pos:end="307:70">(<argument pos:start="307:58" pos:end="307:60"><expr pos:start="307:58" pos:end="307:60"><name pos:start="307:58" pos:end="307:60">tmp</name></expr></argument>, <argument pos:start="307:63" pos:end="307:69"><expr pos:start="307:63" pos:end="307:69"><name pos:start="307:63" pos:end="307:69">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <break pos:start="311:29" pos:end="311:34">break;</break>

                        <case pos:start="313:25" pos:end="313:43">case <expr pos:start="313:30" pos:end="313:42"><name pos:start="313:30" pos:end="313:42">ARM_VFP_MVFR0</name></expr>:</case>

                        <case pos:start="315:25" pos:end="315:43">case <expr pos:start="315:30" pos:end="315:42"><name pos:start="315:30" pos:end="315:42">ARM_VFP_MVFR1</name></expr>:</case>

                            <if_stmt pos:start="317:29" pos:end="321:41"><if pos:start="317:29" pos:end="321:41">if <condition pos:start="317:32" pos:end="319:71">(<expr pos:start="317:33" pos:end="319:70"><call pos:start="317:33" pos:end="317:42"><name pos:start="317:33" pos:end="317:39">IS_USER</name><argument_list pos:start="317:40" pos:end="317:42">(<argument pos:start="317:41" pos:end="317:41"><expr pos:start="317:41" pos:end="317:41"><name pos:start="317:41" pos:end="317:41">s</name></expr></argument>)</argument_list></call>

                                <operator pos:start="319:33" pos:end="319:34">||</operator> <operator pos:start="319:36" pos:end="319:36">!</operator><call pos:start="319:37" pos:end="319:70"><name pos:start="319:37" pos:end="319:47">arm_feature</name><argument_list pos:start="319:48" pos:end="319:70">(<argument pos:start="319:49" pos:end="319:51"><expr pos:start="319:49" pos:end="319:51"><name pos:start="319:49" pos:end="319:51">env</name></expr></argument>, <argument pos:start="319:54" pos:end="319:69"><expr pos:start="319:54" pos:end="319:69"><name pos:start="319:54" pos:end="319:69">ARM_FEATURE_MVFR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="321:33" pos:end="321:41"><block_content pos:start="321:33" pos:end="321:41">

                                <return pos:start="321:33" pos:end="321:41">return <expr pos:start="321:40" pos:end="321:40"><literal type="number" pos:start="321:40" pos:end="321:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="323:29" pos:end="323:64"><expr pos:start="323:29" pos:end="323:63"><name pos:start="323:29" pos:end="323:31">tmp</name> <operator pos:start="323:33" pos:end="323:33">=</operator> <call pos:start="323:35" pos:end="323:63"><name pos:start="323:35" pos:end="323:48">load_cpu_field</name><argument_list pos:start="323:49" pos:end="323:63">(<argument pos:start="323:50" pos:end="323:62"><expr pos:start="323:50" pos:end="323:62"><name pos:start="323:50" pos:end="323:62"><name pos:start="323:50" pos:end="323:52">vfp</name><operator pos:start="323:53" pos:end="323:53">.</operator><name pos:start="323:54" pos:end="323:58">xregs</name><index pos:start="323:59" pos:end="323:62">[<expr pos:start="323:60" pos:end="323:61"><name pos:start="323:60" pos:end="323:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="325:29" pos:end="325:34">break;</break>

                        <default pos:start="327:25" pos:end="327:32">default:</default>

                            <return pos:start="329:29" pos:end="329:37">return <expr pos:start="329:36" pos:end="329:36"><literal type="number" pos:start="329:36" pos:end="329:36">1</literal></expr>;</return>

                        </block_content>}</block></switch>

                    </block_content>}</block></if> <else pos:start="333:23" pos:end="339:21">else <block pos:start="333:28" pos:end="339:21">{<block_content pos:start="335:25" pos:end="337:44">

                        <expr_stmt pos:start="335:25" pos:end="335:47"><expr pos:start="335:25" pos:end="335:46"><call pos:start="335:25" pos:end="335:46"><name pos:start="335:25" pos:end="335:39">gen_mov_F0_vreg</name><argument_list pos:start="335:40" pos:end="335:46">(<argument pos:start="335:41" pos:end="335:41"><expr pos:start="335:41" pos:end="335:41"><literal type="number" pos:start="335:41" pos:end="335:41">0</literal></expr></argument>, <argument pos:start="335:44" pos:end="335:45"><expr pos:start="335:44" pos:end="335:45"><name pos:start="335:44" pos:end="335:45">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="337:25" pos:end="337:44"><expr pos:start="337:25" pos:end="337:43"><name pos:start="337:25" pos:end="337:27">tmp</name> <operator pos:start="337:29" pos:end="337:29">=</operator> <call pos:start="337:31" pos:end="337:43"><name pos:start="337:31" pos:end="337:41">gen_vfp_mrs</name><argument_list pos:start="337:42" pos:end="337:43">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="341:21" pos:end="353:21"><if pos:start="341:21" pos:end="349:21">if <condition pos:start="341:24" pos:end="341:33">(<expr pos:start="341:25" pos:end="341:32"><name pos:start="341:25" pos:end="341:26">rd</name> <operator pos:start="341:28" pos:end="341:29">==</operator> <literal type="number" pos:start="341:31" pos:end="341:32">15</literal></expr>)</condition> <block pos:start="341:35" pos:end="349:21">{<block_content pos:start="345:25" pos:end="347:47">

                        <comment type="block" pos:start="343:25" pos:end="343:63">/* Set the 4 flag bits in the CPSR.  */</comment>

                        <expr_stmt pos:start="345:25" pos:end="345:42"><expr pos:start="345:25" pos:end="345:41"><call pos:start="345:25" pos:end="345:41"><name pos:start="345:25" pos:end="345:36">gen_set_nzcv</name><argument_list pos:start="345:37" pos:end="345:41">(<argument pos:start="345:38" pos:end="345:40"><expr pos:start="345:38" pos:end="345:40"><name pos:start="345:38" pos:end="345:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="347:25" pos:end="347:47"><expr pos:start="347:25" pos:end="347:46"><call pos:start="347:25" pos:end="347:46"><name pos:start="347:25" pos:end="347:41">tcg_temp_free_i32</name><argument_list pos:start="347:42" pos:end="347:46">(<argument pos:start="347:43" pos:end="347:45"><expr pos:start="347:43" pos:end="347:45"><name pos:start="347:43" pos:end="347:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="349:23" pos:end="353:21">else <block pos:start="349:28" pos:end="353:21">{<block_content pos:start="351:25" pos:end="351:46">

                        <expr_stmt pos:start="351:25" pos:end="351:46"><expr pos:start="351:25" pos:end="351:45"><call pos:start="351:25" pos:end="351:45"><name pos:start="351:25" pos:end="351:33">store_reg</name><argument_list pos:start="351:34" pos:end="351:45">(<argument pos:start="351:35" pos:end="351:35"><expr pos:start="351:35" pos:end="351:35"><name pos:start="351:35" pos:end="351:35">s</name></expr></argument>, <argument pos:start="351:38" pos:end="351:39"><expr pos:start="351:38" pos:end="351:39"><name pos:start="351:38" pos:end="351:39">rd</name></expr></argument>, <argument pos:start="351:42" pos:end="351:44"><expr pos:start="351:42" pos:end="351:44"><name pos:start="351:42" pos:end="351:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="355:19" pos:end="429:17">else <block pos:start="355:24" pos:end="429:17">{<block_content pos:start="359:21" pos:end="427:21">

                    <comment type="block" pos:start="357:21" pos:end="357:34">/* arm-&gt;vfp */</comment>

                    <expr_stmt pos:start="359:21" pos:end="359:42"><expr pos:start="359:21" pos:end="359:41"><name pos:start="359:21" pos:end="359:23">tmp</name> <operator pos:start="359:25" pos:end="359:25">=</operator> <call pos:start="359:27" pos:end="359:41"><name pos:start="359:27" pos:end="359:34">load_reg</name><argument_list pos:start="359:35" pos:end="359:41">(<argument pos:start="359:36" pos:end="359:36"><expr pos:start="359:36" pos:end="359:36"><name pos:start="359:36" pos:end="359:36">s</name></expr></argument>, <argument pos:start="359:39" pos:end="359:40"><expr pos:start="359:39" pos:end="359:40"><name pos:start="359:39" pos:end="359:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="361:21" pos:end="427:21"><if pos:start="361:21" pos:end="421:21">if <condition pos:start="361:24" pos:end="361:41">(<expr pos:start="361:25" pos:end="361:40"><name pos:start="361:25" pos:end="361:28">insn</name> <operator pos:start="361:30" pos:end="361:30">&amp;</operator> <operator pos:start="361:32" pos:end="361:32">(</operator><literal type="number" pos:start="361:33" pos:end="361:33">1</literal> <operator pos:start="361:35" pos:end="361:36">&lt;&lt;</operator> <literal type="number" pos:start="361:38" pos:end="361:39">21</literal><operator pos:start="361:40" pos:end="361:40">)</operator></expr>)</condition> <block pos:start="361:43" pos:end="421:21">{<block_content pos:start="363:25" pos:end="419:25">

                        <expr_stmt pos:start="363:25" pos:end="363:33"><expr pos:start="363:25" pos:end="363:32"><name pos:start="363:25" pos:end="363:26">rn</name> <operator pos:start="363:28" pos:end="363:30">&gt;&gt;=</operator> <literal type="number" pos:start="363:32" pos:end="363:32">1</literal></expr>;</expr_stmt>

                        <comment type="block" pos:start="365:25" pos:end="365:45">/* system register */</comment>

                        <switch pos:start="367:25" pos:end="419:25">switch <condition pos:start="367:32" pos:end="367:35">(<expr pos:start="367:33" pos:end="367:34"><name pos:start="367:33" pos:end="367:34">rn</name></expr>)</condition> <block pos:start="367:37" pos:end="419:25">{<block_content pos:start="369:25" pos:end="417:37">

                        <case pos:start="369:25" pos:end="369:43">case <expr pos:start="369:30" pos:end="369:42"><name pos:start="369:30" pos:end="369:42">ARM_VFP_FPSID</name></expr>:</case>

                        <case pos:start="371:25" pos:end="371:43">case <expr pos:start="371:30" pos:end="371:42"><name pos:start="371:30" pos:end="371:42">ARM_VFP_MVFR0</name></expr>:</case>

                        <case pos:start="373:25" pos:end="373:43">case <expr pos:start="373:30" pos:end="373:42"><name pos:start="373:30" pos:end="373:42">ARM_VFP_MVFR1</name></expr>:</case>

                            <comment type="block" pos:start="375:29" pos:end="375:54">/* Writes are ignored.  */</comment>

                            <break pos:start="377:29" pos:end="377:34">break;</break>

                        <case pos:start="379:25" pos:end="379:43">case <expr pos:start="379:30" pos:end="379:42"><name pos:start="379:30" pos:end="379:42">ARM_VFP_FPSCR</name></expr>:</case>

                            <expr_stmt pos:start="381:29" pos:end="381:67"><expr pos:start="381:29" pos:end="381:66"><call pos:start="381:29" pos:end="381:66"><name pos:start="381:29" pos:end="381:52">gen_helper_vfp_set_fpscr</name><argument_list pos:start="381:53" pos:end="381:66">(<argument pos:start="381:54" pos:end="381:60"><expr pos:start="381:54" pos:end="381:60"><name pos:start="381:54" pos:end="381:60">cpu_env</name></expr></argument>, <argument pos:start="381:63" pos:end="381:65"><expr pos:start="381:63" pos:end="381:65"><name pos:start="381:63" pos:end="381:65">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="383:29" pos:end="383:51"><expr pos:start="383:29" pos:end="383:50"><call pos:start="383:29" pos:end="383:50"><name pos:start="383:29" pos:end="383:45">tcg_temp_free_i32</name><argument_list pos:start="383:46" pos:end="383:50">(<argument pos:start="383:47" pos:end="383:49"><expr pos:start="383:47" pos:end="383:49"><name pos:start="383:47" pos:end="383:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="385:29" pos:end="385:45"><expr pos:start="385:29" pos:end="385:44"><call pos:start="385:29" pos:end="385:44"><name pos:start="385:29" pos:end="385:41">gen_lookup_tb</name><argument_list pos:start="385:42" pos:end="385:44">(<argument pos:start="385:43" pos:end="385:43"><expr pos:start="385:43" pos:end="385:43"><name pos:start="385:43" pos:end="385:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="387:29" pos:end="387:34">break;</break>

                        <case pos:start="389:25" pos:end="389:43">case <expr pos:start="389:30" pos:end="389:42"><name pos:start="389:30" pos:end="389:42">ARM_VFP_FPEXC</name></expr>:</case>

                            <if_stmt pos:start="391:29" pos:end="393:41"><if pos:start="391:29" pos:end="393:41">if <condition pos:start="391:32" pos:end="391:43">(<expr pos:start="391:33" pos:end="391:42"><call pos:start="391:33" pos:end="391:42"><name pos:start="391:33" pos:end="391:39">IS_USER</name><argument_list pos:start="391:40" pos:end="391:42">(<argument pos:start="391:41" pos:end="391:41"><expr pos:start="391:41" pos:end="391:41"><name pos:start="391:41" pos:end="391:41">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="393:33" pos:end="393:41"><block_content pos:start="393:33" pos:end="393:41">

                                <return pos:start="393:33" pos:end="393:41">return <expr pos:start="393:40" pos:end="393:40"><literal type="number" pos:start="393:40" pos:end="393:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <comment type="block" pos:start="395:29" pos:end="397:63">/* TODO: VFP subarchitecture support.

                             * For now, keep the EN bit only */</comment>

                            <expr_stmt pos:start="399:29" pos:end="399:64"><expr pos:start="399:29" pos:end="399:63"><call pos:start="399:29" pos:end="399:63"><name pos:start="399:29" pos:end="399:44">tcg_gen_andi_i32</name><argument_list pos:start="399:45" pos:end="399:63">(<argument pos:start="399:46" pos:end="399:48"><expr pos:start="399:46" pos:end="399:48"><name pos:start="399:46" pos:end="399:48">tmp</name></expr></argument>, <argument pos:start="399:51" pos:end="399:53"><expr pos:start="399:51" pos:end="399:53"><name pos:start="399:51" pos:end="399:53">tmp</name></expr></argument>, <argument pos:start="399:56" pos:end="399:62"><expr pos:start="399:56" pos:end="399:62"><literal type="number" pos:start="399:56" pos:end="399:56">1</literal> <operator pos:start="399:58" pos:end="399:59">&lt;&lt;</operator> <literal type="number" pos:start="399:61" pos:end="399:62">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="401:29" pos:end="401:64"><expr pos:start="401:29" pos:end="401:63"><call pos:start="401:29" pos:end="401:63"><name pos:start="401:29" pos:end="401:43">store_cpu_field</name><argument_list pos:start="401:44" pos:end="401:63">(<argument pos:start="401:45" pos:end="401:47"><expr pos:start="401:45" pos:end="401:47"><name pos:start="401:45" pos:end="401:47">tmp</name></expr></argument>, <argument pos:start="401:50" pos:end="401:62"><expr pos:start="401:50" pos:end="401:62"><name pos:start="401:50" pos:end="401:62"><name pos:start="401:50" pos:end="401:52">vfp</name><operator pos:start="401:53" pos:end="401:53">.</operator><name pos:start="401:54" pos:end="401:58">xregs</name><index pos:start="401:59" pos:end="401:62">[<expr pos:start="401:60" pos:end="401:61"><name pos:start="401:60" pos:end="401:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="403:29" pos:end="403:45"><expr pos:start="403:29" pos:end="403:44"><call pos:start="403:29" pos:end="403:44"><name pos:start="403:29" pos:end="403:41">gen_lookup_tb</name><argument_list pos:start="403:42" pos:end="403:44">(<argument pos:start="403:43" pos:end="403:43"><expr pos:start="403:43" pos:end="403:43"><name pos:start="403:43" pos:end="403:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="405:29" pos:end="405:34">break;</break>

                        <case pos:start="407:25" pos:end="407:44">case <expr pos:start="407:30" pos:end="407:43"><name pos:start="407:30" pos:end="407:43">ARM_VFP_FPINST</name></expr>:</case>

                        <case pos:start="409:25" pos:end="409:45">case <expr pos:start="409:30" pos:end="409:44"><name pos:start="409:30" pos:end="409:44">ARM_VFP_FPINST2</name></expr>:</case>

                            <expr_stmt pos:start="411:29" pos:end="411:64"><expr pos:start="411:29" pos:end="411:63"><call pos:start="411:29" pos:end="411:63"><name pos:start="411:29" pos:end="411:43">store_cpu_field</name><argument_list pos:start="411:44" pos:end="411:63">(<argument pos:start="411:45" pos:end="411:47"><expr pos:start="411:45" pos:end="411:47"><name pos:start="411:45" pos:end="411:47">tmp</name></expr></argument>, <argument pos:start="411:50" pos:end="411:62"><expr pos:start="411:50" pos:end="411:62"><name pos:start="411:50" pos:end="411:62"><name pos:start="411:50" pos:end="411:52">vfp</name><operator pos:start="411:53" pos:end="411:53">.</operator><name pos:start="411:54" pos:end="411:58">xregs</name><index pos:start="411:59" pos:end="411:62">[<expr pos:start="411:60" pos:end="411:61"><name pos:start="411:60" pos:end="411:61">rn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="413:29" pos:end="413:34">break;</break>

                        <default pos:start="415:25" pos:end="415:32">default:</default>

                            <return pos:start="417:29" pos:end="417:37">return <expr pos:start="417:36" pos:end="417:36"><literal type="number" pos:start="417:36" pos:end="417:36">1</literal></expr>;</return>

                        </block_content>}</block></switch>

                    </block_content>}</block></if> <else pos:start="421:23" pos:end="427:21">else <block pos:start="421:28" pos:end="427:21">{<block_content pos:start="423:25" pos:end="425:47">

                        <expr_stmt pos:start="423:25" pos:end="423:41"><expr pos:start="423:25" pos:end="423:40"><call pos:start="423:25" pos:end="423:40"><name pos:start="423:25" pos:end="423:35">gen_vfp_msr</name><argument_list pos:start="423:36" pos:end="423:40">(<argument pos:start="423:37" pos:end="423:39"><expr pos:start="423:37" pos:end="423:39"><name pos:start="423:37" pos:end="423:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="425:25" pos:end="425:47"><expr pos:start="425:25" pos:end="425:46"><call pos:start="425:25" pos:end="425:46"><name pos:start="425:25" pos:end="425:39">gen_mov_vreg_F0</name><argument_list pos:start="425:40" pos:end="425:46">(<argument pos:start="425:41" pos:end="425:41"><expr pos:start="425:41" pos:end="425:41"><literal type="number" pos:start="425:41" pos:end="425:41">0</literal></expr></argument>, <argument pos:start="425:44" pos:end="425:45"><expr pos:start="425:44" pos:end="425:45"><name pos:start="425:44" pos:end="425:45">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="433:11" pos:end="1293:9">else <block pos:start="433:16" pos:end="1293:9">{<block_content pos:start="439:13" pos:end="1291:13">

            <comment type="block" pos:start="435:13" pos:end="435:33">/* data processing */</comment>

            <comment type="block" pos:start="437:13" pos:end="437:58">/* The opcode is in bits 23, 21, 20 and 6.  */</comment>

            <expr_stmt pos:start="439:13" pos:end="439:77"><expr pos:start="439:13" pos:end="439:76"><name pos:start="439:13" pos:end="439:14">op</name> <operator pos:start="439:16" pos:end="439:16">=</operator> <operator pos:start="439:18" pos:end="439:18">(</operator><operator pos:start="439:19" pos:end="439:19">(</operator><name pos:start="439:20" pos:end="439:23">insn</name> <operator pos:start="439:25" pos:end="439:26">&gt;&gt;</operator> <literal type="number" pos:start="439:28" pos:end="439:29">20</literal><operator pos:start="439:30" pos:end="439:30">)</operator> <operator pos:start="439:32" pos:end="439:32">&amp;</operator> <literal type="number" pos:start="439:34" pos:end="439:34">8</literal><operator pos:start="439:35" pos:end="439:35">)</operator> <operator pos:start="439:37" pos:end="439:37">|</operator> <operator pos:start="439:39" pos:end="439:39">(</operator><operator pos:start="439:40" pos:end="439:40">(</operator><name pos:start="439:41" pos:end="439:44">insn</name> <operator pos:start="439:46" pos:end="439:47">&gt;&gt;</operator> <literal type="number" pos:start="439:49" pos:end="439:50">19</literal><operator pos:start="439:51" pos:end="439:51">)</operator> <operator pos:start="439:53" pos:end="439:53">&amp;</operator> <literal type="number" pos:start="439:55" pos:end="439:55">6</literal><operator pos:start="439:56" pos:end="439:56">)</operator> <operator pos:start="439:58" pos:end="439:58">|</operator> <operator pos:start="439:60" pos:end="439:60">(</operator><operator pos:start="439:61" pos:end="439:61">(</operator><name pos:start="439:62" pos:end="439:65">insn</name> <operator pos:start="439:67" pos:end="439:68">&gt;&gt;</operator> <literal type="number" pos:start="439:70" pos:end="439:70">6</literal><operator pos:start="439:71" pos:end="439:71">)</operator> <operator pos:start="439:73" pos:end="439:73">&amp;</operator> <literal type="number" pos:start="439:75" pos:end="439:75">1</literal><operator pos:start="439:76" pos:end="439:76">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="441:13" pos:end="513:13"><if pos:start="441:13" pos:end="489:13">if <condition pos:start="441:16" pos:end="441:19">(<expr pos:start="441:17" pos:end="441:18"><name pos:start="441:17" pos:end="441:18">dp</name></expr>)</condition> <block pos:start="441:21" pos:end="489:13">{<block_content pos:start="443:17" pos:end="487:17">

                <if_stmt pos:start="443:17" pos:end="455:17"><if pos:start="443:17" pos:end="449:17">if <condition pos:start="443:20" pos:end="443:29">(<expr pos:start="443:21" pos:end="443:28"><name pos:start="443:21" pos:end="443:22">op</name> <operator pos:start="443:24" pos:end="443:25">==</operator> <literal type="number" pos:start="443:27" pos:end="443:28">15</literal></expr>)</condition> <block pos:start="443:31" pos:end="449:17">{<block_content pos:start="447:21" pos:end="447:67">

                    <comment type="block" pos:start="445:21" pos:end="445:38">/* rn is opcode */</comment>

                    <expr_stmt pos:start="447:21" pos:end="447:67"><expr pos:start="447:21" pos:end="447:66"><name pos:start="447:21" pos:end="447:22">rn</name> <operator pos:start="447:24" pos:end="447:24">=</operator> <operator pos:start="447:26" pos:end="447:26">(</operator><operator pos:start="447:27" pos:end="447:27">(</operator><name pos:start="447:28" pos:end="447:31">insn</name> <operator pos:start="447:33" pos:end="447:34">&gt;&gt;</operator> <literal type="number" pos:start="447:36" pos:end="447:37">15</literal><operator pos:start="447:38" pos:end="447:38">)</operator> <operator pos:start="447:40" pos:end="447:40">&amp;</operator> <literal type="number" pos:start="447:42" pos:end="447:45">0x1e</literal><operator pos:start="447:46" pos:end="447:46">)</operator> <operator pos:start="447:48" pos:end="447:48">|</operator> <operator pos:start="447:50" pos:end="447:50">(</operator><operator pos:start="447:51" pos:end="447:51">(</operator><name pos:start="447:52" pos:end="447:55">insn</name> <operator pos:start="447:57" pos:end="447:58">&gt;&gt;</operator> <literal type="number" pos:start="447:60" pos:end="447:60">7</literal><operator pos:start="447:61" pos:end="447:61">)</operator> <operator pos:start="447:63" pos:end="447:63">&amp;</operator> <literal type="number" pos:start="447:65" pos:end="447:65">1</literal><operator pos:start="447:66" pos:end="447:66">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="449:19" pos:end="455:17">else <block pos:start="449:24" pos:end="455:17">{<block_content pos:start="453:21" pos:end="453:41">

                    <comment type="block" pos:start="451:21" pos:end="451:47">/* rn is register number */</comment>

                    <expr_stmt pos:start="453:21" pos:end="453:41"><expr pos:start="453:21" pos:end="453:40"><call pos:start="453:21" pos:end="453:40"><name pos:start="453:21" pos:end="453:30">VFP_DREG_N</name><argument_list pos:start="453:31" pos:end="453:40">(<argument pos:start="453:32" pos:end="453:33"><expr pos:start="453:32" pos:end="453:33"><name pos:start="453:32" pos:end="453:33">rn</name></expr></argument>, <argument pos:start="453:36" pos:end="453:39"><expr pos:start="453:36" pos:end="453:39"><name pos:start="453:36" pos:end="453:39">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="459:17" pos:end="469:17"><if pos:start="459:17" pos:end="465:17">if <condition pos:start="459:20" pos:end="459:68">(<expr pos:start="459:21" pos:end="459:67"><name pos:start="459:21" pos:end="459:22">op</name> <operator pos:start="459:24" pos:end="459:25">==</operator> <literal type="number" pos:start="459:27" pos:end="459:28">15</literal> <operator pos:start="459:30" pos:end="459:31">&amp;&amp;</operator> <operator pos:start="459:33" pos:end="459:33">(</operator><name pos:start="459:34" pos:end="459:35">rn</name> <operator pos:start="459:37" pos:end="459:38">==</operator> <literal type="number" pos:start="459:40" pos:end="459:41">15</literal> <operator pos:start="459:43" pos:end="459:44">||</operator> <operator pos:start="459:46" pos:end="459:46">(</operator><operator pos:start="459:47" pos:end="459:47">(</operator><name pos:start="459:48" pos:end="459:49">rn</name> <operator pos:start="459:51" pos:end="459:51">&amp;</operator> <literal type="number" pos:start="459:53" pos:end="459:56">0x1c</literal><operator pos:start="459:57" pos:end="459:57">)</operator> <operator pos:start="459:59" pos:end="459:60">==</operator> <literal type="number" pos:start="459:62" pos:end="459:65">0x18</literal><operator pos:start="459:66" pos:end="459:66">)</operator><operator pos:start="459:67" pos:end="459:67">)</operator></expr>)</condition> <block pos:start="459:70" pos:end="465:17">{<block_content pos:start="463:21" pos:end="463:42">

                    <comment type="block" pos:start="461:21" pos:end="461:67">/* Integer or single precision destination.  */</comment>

                    <expr_stmt pos:start="463:21" pos:end="463:42"><expr pos:start="463:21" pos:end="463:41"><name pos:start="463:21" pos:end="463:22">rd</name> <operator pos:start="463:24" pos:end="463:24">=</operator> <call pos:start="463:26" pos:end="463:41"><name pos:start="463:26" pos:end="463:35">VFP_SREG_D</name><argument_list pos:start="463:36" pos:end="463:41">(<argument pos:start="463:37" pos:end="463:40"><expr pos:start="463:37" pos:end="463:40"><name pos:start="463:37" pos:end="463:40">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="465:19" pos:end="469:17">else <block pos:start="465:24" pos:end="469:17">{<block_content pos:start="467:21" pos:end="467:41">

                    <expr_stmt pos:start="467:21" pos:end="467:41"><expr pos:start="467:21" pos:end="467:40"><call pos:start="467:21" pos:end="467:40"><name pos:start="467:21" pos:end="467:30">VFP_DREG_D</name><argument_list pos:start="467:31" pos:end="467:40">(<argument pos:start="467:32" pos:end="467:33"><expr pos:start="467:32" pos:end="467:33"><name pos:start="467:32" pos:end="467:33">rd</name></expr></argument>, <argument pos:start="467:36" pos:end="467:39"><expr pos:start="467:36" pos:end="467:39"><name pos:start="467:36" pos:end="467:39">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="471:17" pos:end="487:17"><if pos:start="471:17" pos:end="483:17">if <condition pos:start="471:20" pos:end="473:69">(<expr pos:start="471:21" pos:end="473:68"><name pos:start="471:21" pos:end="471:22">op</name> <operator pos:start="471:24" pos:end="471:25">==</operator> <literal type="number" pos:start="471:27" pos:end="471:28">15</literal> <operator pos:start="471:30" pos:end="471:31">&amp;&amp;</operator>

                    <operator pos:start="473:21" pos:end="473:21">(</operator><operator pos:start="473:22" pos:end="473:22">(</operator><operator pos:start="473:23" pos:end="473:23">(</operator><name pos:start="473:24" pos:end="473:25">rn</name> <operator pos:start="473:27" pos:end="473:27">&amp;</operator> <literal type="number" pos:start="473:29" pos:end="473:32">0x1c</literal><operator pos:start="473:33" pos:end="473:33">)</operator> <operator pos:start="473:35" pos:end="473:36">==</operator> <literal type="number" pos:start="473:38" pos:end="473:41">0x10</literal><operator pos:start="473:42" pos:end="473:42">)</operator> <operator pos:start="473:44" pos:end="473:45">||</operator> <operator pos:start="473:47" pos:end="473:47">(</operator><operator pos:start="473:48" pos:end="473:48">(</operator><name pos:start="473:49" pos:end="473:50">rn</name> <operator pos:start="473:52" pos:end="473:52">&amp;</operator> <literal type="number" pos:start="473:54" pos:end="473:57">0x14</literal><operator pos:start="473:58" pos:end="473:58">)</operator> <operator pos:start="473:60" pos:end="473:61">==</operator> <literal type="number" pos:start="473:63" pos:end="473:66">0x14</literal><operator pos:start="473:67" pos:end="473:67">)</operator><operator pos:start="473:68" pos:end="473:68">)</operator></expr>)</condition> <block pos:start="473:71" pos:end="483:17">{<block_content pos:start="481:21" pos:end="481:42">

                    <comment type="block" pos:start="475:21" pos:end="479:23">/* VCVT from int is always from S reg regardless of dp bit.

                     * VCVT with immediate frac_bits has same format as SREG_M

                     */</comment>

                    <expr_stmt pos:start="481:21" pos:end="481:42"><expr pos:start="481:21" pos:end="481:41"><name pos:start="481:21" pos:end="481:22">rm</name> <operator pos:start="481:24" pos:end="481:24">=</operator> <call pos:start="481:26" pos:end="481:41"><name pos:start="481:26" pos:end="481:35">VFP_SREG_M</name><argument_list pos:start="481:36" pos:end="481:41">(<argument pos:start="481:37" pos:end="481:40"><expr pos:start="481:37" pos:end="481:40"><name pos:start="481:37" pos:end="481:40">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="483:19" pos:end="487:17">else <block pos:start="483:24" pos:end="487:17">{<block_content pos:start="485:21" pos:end="485:41">

                    <expr_stmt pos:start="485:21" pos:end="485:41"><expr pos:start="485:21" pos:end="485:40"><call pos:start="485:21" pos:end="485:40"><name pos:start="485:21" pos:end="485:30">VFP_DREG_M</name><argument_list pos:start="485:31" pos:end="485:40">(<argument pos:start="485:32" pos:end="485:33"><expr pos:start="485:32" pos:end="485:33"><name pos:start="485:32" pos:end="485:33">rm</name></expr></argument>, <argument pos:start="485:36" pos:end="485:39"><expr pos:start="485:36" pos:end="485:39"><name pos:start="485:36" pos:end="485:39">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="489:15" pos:end="513:13">else <block pos:start="489:20" pos:end="513:13">{<block_content pos:start="491:17" pos:end="511:38">

                <expr_stmt pos:start="491:17" pos:end="491:38"><expr pos:start="491:17" pos:end="491:37"><name pos:start="491:17" pos:end="491:18">rn</name> <operator pos:start="491:20" pos:end="491:20">=</operator> <call pos:start="491:22" pos:end="491:37"><name pos:start="491:22" pos:end="491:31">VFP_SREG_N</name><argument_list pos:start="491:32" pos:end="491:37">(<argument pos:start="491:33" pos:end="491:36"><expr pos:start="491:33" pos:end="491:36"><name pos:start="491:33" pos:end="491:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="493:17" pos:end="503:17"><if pos:start="493:17" pos:end="499:17">if <condition pos:start="493:20" pos:end="493:41">(<expr pos:start="493:21" pos:end="493:40"><name pos:start="493:21" pos:end="493:22">op</name> <operator pos:start="493:24" pos:end="493:25">==</operator> <literal type="number" pos:start="493:27" pos:end="493:28">15</literal> <operator pos:start="493:30" pos:end="493:31">&amp;&amp;</operator> <name pos:start="493:33" pos:end="493:34">rn</name> <operator pos:start="493:36" pos:end="493:37">==</operator> <literal type="number" pos:start="493:39" pos:end="493:40">15</literal></expr>)</condition> <block pos:start="493:43" pos:end="499:17">{<block_content pos:start="497:21" pos:end="497:41">

                    <comment type="block" pos:start="495:21" pos:end="495:56">/* Double precision destination.  */</comment>

                    <expr_stmt pos:start="497:21" pos:end="497:41"><expr pos:start="497:21" pos:end="497:40"><call pos:start="497:21" pos:end="497:40"><name pos:start="497:21" pos:end="497:30">VFP_DREG_D</name><argument_list pos:start="497:31" pos:end="497:40">(<argument pos:start="497:32" pos:end="497:33"><expr pos:start="497:32" pos:end="497:33"><name pos:start="497:32" pos:end="497:33">rd</name></expr></argument>, <argument pos:start="497:36" pos:end="497:39"><expr pos:start="497:36" pos:end="497:39"><name pos:start="497:36" pos:end="497:39">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="499:19" pos:end="503:17">else <block pos:start="499:24" pos:end="503:17">{<block_content pos:start="501:21" pos:end="501:42">

                    <expr_stmt pos:start="501:21" pos:end="501:42"><expr pos:start="501:21" pos:end="501:41"><name pos:start="501:21" pos:end="501:22">rd</name> <operator pos:start="501:24" pos:end="501:24">=</operator> <call pos:start="501:26" pos:end="501:41"><name pos:start="501:26" pos:end="501:35">VFP_SREG_D</name><argument_list pos:start="501:36" pos:end="501:41">(<argument pos:start="501:37" pos:end="501:40"><expr pos:start="501:37" pos:end="501:40"><name pos:start="501:37" pos:end="501:40">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <comment type="block" pos:start="505:17" pos:end="509:19">/* NB that we implicitly rely on the encoding for the frac_bits

                 * in VCVT of fixed to float being the same as that of an SREG_M

                 */</comment>

                <expr_stmt pos:start="511:17" pos:end="511:38"><expr pos:start="511:17" pos:end="511:37"><name pos:start="511:17" pos:end="511:18">rm</name> <operator pos:start="511:20" pos:end="511:20">=</operator> <call pos:start="511:22" pos:end="511:37"><name pos:start="511:22" pos:end="511:31">VFP_SREG_M</name><argument_list pos:start="511:32" pos:end="511:37">(<argument pos:start="511:33" pos:end="511:36"><expr pos:start="511:33" pos:end="511:36"><name pos:start="511:33" pos:end="511:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="517:13" pos:end="517:32"><expr pos:start="517:13" pos:end="517:31"><name pos:start="517:13" pos:end="517:18">veclen</name> <operator pos:start="517:20" pos:end="517:20">=</operator> <name pos:start="517:22" pos:end="517:31"><name pos:start="517:22" pos:end="517:22">s</name><operator pos:start="517:23" pos:end="517:24">-&gt;</operator><name pos:start="517:25" pos:end="517:31">vec_len</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="519:13" pos:end="521:27"><if pos:start="519:13" pos:end="521:27">if <condition pos:start="519:16" pos:end="519:35">(<expr pos:start="519:17" pos:end="519:34"><name pos:start="519:17" pos:end="519:18">op</name> <operator pos:start="519:20" pos:end="519:21">==</operator> <literal type="number" pos:start="519:23" pos:end="519:24">15</literal> <operator pos:start="519:26" pos:end="519:27">&amp;&amp;</operator> <name pos:start="519:29" pos:end="519:30">rn</name> <operator pos:start="519:32" pos:end="519:32">&gt;</operator> <literal type="number" pos:start="519:34" pos:end="519:34">3</literal></expr>)</condition><block type="pseudo" pos:start="521:17" pos:end="521:27"><block_content pos:start="521:17" pos:end="521:27">

                <expr_stmt pos:start="521:17" pos:end="521:27"><expr pos:start="521:17" pos:end="521:26"><name pos:start="521:17" pos:end="521:22">veclen</name> <operator pos:start="521:24" pos:end="521:24">=</operator> <literal type="number" pos:start="521:26" pos:end="521:26">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="525:13" pos:end="525:45">/* Shut up compiler warnings.  */</comment>

            <expr_stmt pos:start="527:13" pos:end="527:24"><expr pos:start="527:13" pos:end="527:23"><name pos:start="527:13" pos:end="527:19">delta_m</name> <operator pos:start="527:21" pos:end="527:21">=</operator> <literal type="number" pos:start="527:23" pos:end="527:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="529:13" pos:end="529:24"><expr pos:start="529:13" pos:end="529:23"><name pos:start="529:13" pos:end="529:19">delta_d</name> <operator pos:start="529:21" pos:end="529:21">=</operator> <literal type="number" pos:start="529:23" pos:end="529:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:26"><expr pos:start="531:13" pos:end="531:25"><name pos:start="531:13" pos:end="531:21">bank_mask</name> <operator pos:start="531:23" pos:end="531:23">=</operator> <literal type="number" pos:start="531:25" pos:end="531:25">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="535:13" pos:end="583:13"><if pos:start="535:13" pos:end="583:13">if <condition pos:start="535:16" pos:end="535:27">(<expr pos:start="535:17" pos:end="535:26"><name pos:start="535:17" pos:end="535:22">veclen</name> <operator pos:start="535:24" pos:end="535:24">&gt;</operator> <literal type="number" pos:start="535:26" pos:end="535:26">0</literal></expr>)</condition> <block pos:start="535:29" pos:end="583:13">{<block_content pos:start="537:17" pos:end="581:17">

                <if_stmt pos:start="537:17" pos:end="543:37"><if pos:start="537:17" pos:end="539:36">if <condition pos:start="537:20" pos:end="537:23">(<expr pos:start="537:21" pos:end="537:22"><name pos:start="537:21" pos:end="537:22">dp</name></expr>)</condition><block type="pseudo" pos:start="539:21" pos:end="539:36"><block_content pos:start="539:21" pos:end="539:36">

                    <expr_stmt pos:start="539:21" pos:end="539:36"><expr pos:start="539:21" pos:end="539:35"><name pos:start="539:21" pos:end="539:29">bank_mask</name> <operator pos:start="539:31" pos:end="539:31">=</operator> <literal type="number" pos:start="539:33" pos:end="539:35">0xc</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="541:17" pos:end="543:37">else<block type="pseudo" pos:start="543:21" pos:end="543:37"><block_content pos:start="543:21" pos:end="543:37">

                    <expr_stmt pos:start="543:21" pos:end="543:37"><expr pos:start="543:21" pos:end="543:36"><name pos:start="543:21" pos:end="543:29">bank_mask</name> <operator pos:start="543:31" pos:end="543:31">=</operator> <literal type="number" pos:start="543:33" pos:end="543:36">0x18</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <comment type="block" pos:start="547:17" pos:end="547:72">/* Figure out what type of vector operation this is.  */</comment>

                <if_stmt pos:start="549:17" pos:end="581:17"><if pos:start="549:17" pos:end="555:17">if <condition pos:start="549:20" pos:end="549:42">(<expr pos:start="549:21" pos:end="549:41"><operator pos:start="549:21" pos:end="549:21">(</operator><name pos:start="549:22" pos:end="549:23">rd</name> <operator pos:start="549:25" pos:end="549:25">&amp;</operator> <name pos:start="549:27" pos:end="549:35">bank_mask</name><operator pos:start="549:36" pos:end="549:36">)</operator> <operator pos:start="549:38" pos:end="549:39">==</operator> <literal type="number" pos:start="549:41" pos:end="549:41">0</literal></expr>)</condition> <block pos:start="549:44" pos:end="555:17">{<block_content pos:start="553:21" pos:end="553:31">

                    <comment type="block" pos:start="551:21" pos:end="551:32">/* scalar */</comment>

                    <expr_stmt pos:start="553:21" pos:end="553:31"><expr pos:start="553:21" pos:end="553:30"><name pos:start="553:21" pos:end="553:26">veclen</name> <operator pos:start="553:28" pos:end="553:28">=</operator> <literal type="number" pos:start="553:30" pos:end="553:30">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="555:19" pos:end="581:17">else <block pos:start="555:24" pos:end="581:17">{<block_content pos:start="557:21" pos:end="579:21">

                    <if_stmt pos:start="557:21" pos:end="563:52"><if pos:start="557:21" pos:end="559:59">if <condition pos:start="557:24" pos:end="557:27">(<expr pos:start="557:25" pos:end="557:26"><name pos:start="557:25" pos:end="557:26">dp</name></expr>)</condition><block type="pseudo" pos:start="559:25" pos:end="559:59"><block_content pos:start="559:25" pos:end="559:59">

                        <expr_stmt pos:start="559:25" pos:end="559:59"><expr pos:start="559:25" pos:end="559:58"><name pos:start="559:25" pos:end="559:31">delta_d</name> <operator pos:start="559:33" pos:end="559:33">=</operator> <operator pos:start="559:35" pos:end="559:35">(</operator><name pos:start="559:36" pos:end="559:48"><name pos:start="559:36" pos:end="559:36">s</name><operator pos:start="559:37" pos:end="559:38">-&gt;</operator><name pos:start="559:39" pos:end="559:48">vec_stride</name></name> <operator pos:start="559:50" pos:end="559:51">&gt;&gt;</operator> <literal type="number" pos:start="559:53" pos:end="559:53">1</literal><operator pos:start="559:54" pos:end="559:54">)</operator> <operator pos:start="559:56" pos:end="559:56">+</operator> <literal type="number" pos:start="559:58" pos:end="559:58">1</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="561:21" pos:end="563:52">else<block type="pseudo" pos:start="563:25" pos:end="563:52"><block_content pos:start="563:25" pos:end="563:52">

                        <expr_stmt pos:start="563:25" pos:end="563:52"><expr pos:start="563:25" pos:end="563:51"><name pos:start="563:25" pos:end="563:31">delta_d</name> <operator pos:start="563:33" pos:end="563:33">=</operator> <name pos:start="563:35" pos:end="563:47"><name pos:start="563:35" pos:end="563:35">s</name><operator pos:start="563:36" pos:end="563:37">-&gt;</operator><name pos:start="563:38" pos:end="563:47">vec_stride</name></name> <operator pos:start="563:49" pos:end="563:49">+</operator> <literal type="number" pos:start="563:51" pos:end="563:51">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <if_stmt pos:start="567:21" pos:end="579:21"><if pos:start="567:21" pos:end="573:21">if <condition pos:start="567:24" pos:end="567:46">(<expr pos:start="567:25" pos:end="567:45"><operator pos:start="567:25" pos:end="567:25">(</operator><name pos:start="567:26" pos:end="567:27">rm</name> <operator pos:start="567:29" pos:end="567:29">&amp;</operator> <name pos:start="567:31" pos:end="567:39">bank_mask</name><operator pos:start="567:40" pos:end="567:40">)</operator> <operator pos:start="567:42" pos:end="567:43">==</operator> <literal type="number" pos:start="567:45" pos:end="567:45">0</literal></expr>)</condition> <block pos:start="567:48" pos:end="573:21">{<block_content pos:start="571:25" pos:end="571:36">

                        <comment type="block" pos:start="569:25" pos:end="569:49">/* mixed scalar/vector */</comment>

                        <expr_stmt pos:start="571:25" pos:end="571:36"><expr pos:start="571:25" pos:end="571:35"><name pos:start="571:25" pos:end="571:31">delta_m</name> <operator pos:start="571:33" pos:end="571:33">=</operator> <literal type="number" pos:start="571:35" pos:end="571:35">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="573:23" pos:end="579:21">else <block pos:start="573:28" pos:end="579:21">{<block_content pos:start="577:25" pos:end="577:42">

                        <comment type="block" pos:start="575:25" pos:end="575:36">/* vector */</comment>

                        <expr_stmt pos:start="577:25" pos:end="577:42"><expr pos:start="577:25" pos:end="577:41"><name pos:start="577:25" pos:end="577:31">delta_m</name> <operator pos:start="577:33" pos:end="577:33">=</operator> <name pos:start="577:35" pos:end="577:41">delta_d</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="587:13" pos:end="587:45">/* Load the initial operands.  */</comment>

            <if_stmt pos:start="589:13" pos:end="689:13"><if pos:start="589:13" pos:end="681:13">if <condition pos:start="589:16" pos:end="589:25">(<expr pos:start="589:17" pos:end="589:24"><name pos:start="589:17" pos:end="589:18">op</name> <operator pos:start="589:20" pos:end="589:21">==</operator> <literal type="number" pos:start="589:23" pos:end="589:24">15</literal></expr>)</condition> <block pos:start="589:27" pos:end="681:13">{<block_content pos:start="591:17" pos:end="679:17">

                <switch pos:start="591:17" pos:end="679:17">switch <condition pos:start="591:24" pos:end="591:27">(<expr pos:start="591:25" pos:end="591:26"><name pos:start="591:25" pos:end="591:26">rn</name></expr>)</condition> <block pos:start="591:29" pos:end="679:17">{<block_content pos:start="593:17" pos:end="677:26">

                <case pos:start="593:17" pos:end="593:24">case <expr pos:start="593:22" pos:end="593:23"><literal type="number" pos:start="593:22" pos:end="593:23">16</literal></expr>:</case>

                <case pos:start="595:17" pos:end="595:24">case <expr pos:start="595:22" pos:end="595:23"><literal type="number" pos:start="595:22" pos:end="595:23">17</literal></expr>:</case>

                    <comment type="block" pos:start="597:21" pos:end="597:40">/* Integer source */</comment>

                    <expr_stmt pos:start="599:21" pos:end="599:43"><expr pos:start="599:21" pos:end="599:42"><call pos:start="599:21" pos:end="599:42"><name pos:start="599:21" pos:end="599:35">gen_mov_F0_vreg</name><argument_list pos:start="599:36" pos:end="599:42">(<argument pos:start="599:37" pos:end="599:37"><expr pos:start="599:37" pos:end="599:37"><literal type="number" pos:start="599:37" pos:end="599:37">0</literal></expr></argument>, <argument pos:start="599:40" pos:end="599:41"><expr pos:start="599:40" pos:end="599:41"><name pos:start="599:40" pos:end="599:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="601:21" pos:end="601:26">break;</break>

                <case pos:start="603:17" pos:end="603:23">case <expr pos:start="603:22" pos:end="603:22"><literal type="number" pos:start="603:22" pos:end="603:22">8</literal></expr>:</case>

                <case pos:start="605:17" pos:end="605:23">case <expr pos:start="605:22" pos:end="605:22"><literal type="number" pos:start="605:22" pos:end="605:22">9</literal></expr>:</case>

                    <comment type="block" pos:start="607:21" pos:end="607:33">/* Compare */</comment>

                    <expr_stmt pos:start="609:21" pos:end="609:44"><expr pos:start="609:21" pos:end="609:43"><call pos:start="609:21" pos:end="609:43"><name pos:start="609:21" pos:end="609:35">gen_mov_F0_vreg</name><argument_list pos:start="609:36" pos:end="609:43">(<argument pos:start="609:37" pos:end="609:38"><expr pos:start="609:37" pos:end="609:38"><name pos:start="609:37" pos:end="609:38">dp</name></expr></argument>, <argument pos:start="609:41" pos:end="609:42"><expr pos:start="609:41" pos:end="609:42"><name pos:start="609:41" pos:end="609:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="611:21" pos:end="611:44"><expr pos:start="611:21" pos:end="611:43"><call pos:start="611:21" pos:end="611:43"><name pos:start="611:21" pos:end="611:35">gen_mov_F1_vreg</name><argument_list pos:start="611:36" pos:end="611:43">(<argument pos:start="611:37" pos:end="611:38"><expr pos:start="611:37" pos:end="611:38"><name pos:start="611:37" pos:end="611:38">dp</name></expr></argument>, <argument pos:start="611:41" pos:end="611:42"><expr pos:start="611:41" pos:end="611:42"><name pos:start="611:41" pos:end="611:42">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="613:21" pos:end="613:26">break;</break>

                <case pos:start="615:17" pos:end="615:24">case <expr pos:start="615:22" pos:end="615:23"><literal type="number" pos:start="615:22" pos:end="615:23">10</literal></expr>:</case>

                <case pos:start="617:17" pos:end="617:24">case <expr pos:start="617:22" pos:end="617:23"><literal type="number" pos:start="617:22" pos:end="617:23">11</literal></expr>:</case>

                    <comment type="block" pos:start="619:21" pos:end="619:43">/* Compare with zero */</comment>

                    <expr_stmt pos:start="621:21" pos:end="621:44"><expr pos:start="621:21" pos:end="621:43"><call pos:start="621:21" pos:end="621:43"><name pos:start="621:21" pos:end="621:35">gen_mov_F0_vreg</name><argument_list pos:start="621:36" pos:end="621:43">(<argument pos:start="621:37" pos:end="621:38"><expr pos:start="621:37" pos:end="621:38"><name pos:start="621:37" pos:end="621:38">dp</name></expr></argument>, <argument pos:start="621:41" pos:end="621:42"><expr pos:start="621:41" pos:end="621:42"><name pos:start="621:41" pos:end="621:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="623:21" pos:end="623:39"><expr pos:start="623:21" pos:end="623:38"><call pos:start="623:21" pos:end="623:38"><name pos:start="623:21" pos:end="623:34">gen_vfp_F1_ld0</name><argument_list pos:start="623:35" pos:end="623:38">(<argument pos:start="623:36" pos:end="623:37"><expr pos:start="623:36" pos:end="623:37"><name pos:start="623:36" pos:end="623:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="625:21" pos:end="625:26">break;</break>

                <case pos:start="627:17" pos:end="627:24">case <expr pos:start="627:22" pos:end="627:23"><literal type="number" pos:start="627:22" pos:end="627:23">20</literal></expr>:</case>

                <case pos:start="629:17" pos:end="629:24">case <expr pos:start="629:22" pos:end="629:23"><literal type="number" pos:start="629:22" pos:end="629:23">21</literal></expr>:</case>

                <case pos:start="631:17" pos:end="631:24">case <expr pos:start="631:22" pos:end="631:23"><literal type="number" pos:start="631:22" pos:end="631:23">22</literal></expr>:</case>

                <case pos:start="633:17" pos:end="633:24">case <expr pos:start="633:22" pos:end="633:23"><literal type="number" pos:start="633:22" pos:end="633:23">23</literal></expr>:</case>

                <case pos:start="635:17" pos:end="635:24">case <expr pos:start="635:22" pos:end="635:23"><literal type="number" pos:start="635:22" pos:end="635:23">28</literal></expr>:</case>

                <case pos:start="637:17" pos:end="637:24">case <expr pos:start="637:22" pos:end="637:23"><literal type="number" pos:start="637:22" pos:end="637:23">29</literal></expr>:</case>

                <case pos:start="639:17" pos:end="639:24">case <expr pos:start="639:22" pos:end="639:23"><literal type="number" pos:start="639:22" pos:end="639:23">30</literal></expr>:</case>

                <case pos:start="641:17" pos:end="641:24">case <expr pos:start="641:22" pos:end="641:23"><literal type="number" pos:start="641:22" pos:end="641:23">31</literal></expr>:</case>

                    <comment type="block" pos:start="643:21" pos:end="643:59">/* Source and destination the same.  */</comment>

                    <expr_stmt pos:start="645:21" pos:end="645:44"><expr pos:start="645:21" pos:end="645:43"><call pos:start="645:21" pos:end="645:43"><name pos:start="645:21" pos:end="645:35">gen_mov_F0_vreg</name><argument_list pos:start="645:36" pos:end="645:43">(<argument pos:start="645:37" pos:end="645:38"><expr pos:start="645:37" pos:end="645:38"><name pos:start="645:37" pos:end="645:38">dp</name></expr></argument>, <argument pos:start="645:41" pos:end="645:42"><expr pos:start="645:41" pos:end="645:42"><name pos:start="645:41" pos:end="645:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="647:21" pos:end="647:26">break;</break>

                <case pos:start="649:17" pos:end="649:23">case <expr pos:start="649:22" pos:end="649:22"><literal type="number" pos:start="649:22" pos:end="649:22">4</literal></expr>:</case>

                <case pos:start="651:17" pos:end="651:23">case <expr pos:start="651:22" pos:end="651:22"><literal type="number" pos:start="651:22" pos:end="651:22">5</literal></expr>:</case>

                <case pos:start="653:17" pos:end="653:23">case <expr pos:start="653:22" pos:end="653:22"><literal type="number" pos:start="653:22" pos:end="653:22">6</literal></expr>:</case>

                <case pos:start="655:17" pos:end="655:23">case <expr pos:start="655:22" pos:end="655:22"><literal type="number" pos:start="655:22" pos:end="655:22">7</literal></expr>:</case>

                    <comment type="block" pos:start="657:21" pos:end="661:23">/* VCVTB, VCVTT: only present with the halfprec extension,

                     * UNPREDICTABLE if bit 8 is set (we choose to UNDEF)

                     */</comment>

                    <if_stmt pos:start="663:21" pos:end="667:21"><if pos:start="663:21" pos:end="667:21">if <condition pos:start="663:24" pos:end="663:70">(<expr pos:start="663:25" pos:end="663:69"><name pos:start="663:25" pos:end="663:26">dp</name> <operator pos:start="663:28" pos:end="663:29">||</operator> <operator pos:start="663:31" pos:end="663:31">!</operator><call pos:start="663:32" pos:end="663:69"><name pos:start="663:32" pos:end="663:42">arm_feature</name><argument_list pos:start="663:43" pos:end="663:69">(<argument pos:start="663:44" pos:end="663:46"><expr pos:start="663:44" pos:end="663:46"><name pos:start="663:44" pos:end="663:46">env</name></expr></argument>, <argument pos:start="663:49" pos:end="663:68"><expr pos:start="663:49" pos:end="663:68"><name pos:start="663:49" pos:end="663:68">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="663:72" pos:end="667:21">{<block_content pos:start="665:25" pos:end="665:33">

                        <return pos:start="665:25" pos:end="665:33">return <expr pos:start="665:32" pos:end="665:32"><literal type="number" pos:start="665:32" pos:end="665:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="669:21" pos:end="669:48">/* Otherwise fall through */</comment>

                <default pos:start="671:17" pos:end="671:24">default:</default>

                    <comment type="block" pos:start="673:21" pos:end="673:46">/* One source operand.  */</comment>

                    <expr_stmt pos:start="675:21" pos:end="675:44"><expr pos:start="675:21" pos:end="675:43"><call pos:start="675:21" pos:end="675:43"><name pos:start="675:21" pos:end="675:35">gen_mov_F0_vreg</name><argument_list pos:start="675:36" pos:end="675:43">(<argument pos:start="675:37" pos:end="675:38"><expr pos:start="675:37" pos:end="675:38"><name pos:start="675:37" pos:end="675:38">dp</name></expr></argument>, <argument pos:start="675:41" pos:end="675:42"><expr pos:start="675:41" pos:end="675:42"><name pos:start="675:41" pos:end="675:42">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="677:21" pos:end="677:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="681:15" pos:end="689:13">else <block pos:start="681:20" pos:end="689:13">{<block_content pos:start="685:17" pos:end="687:40">

                <comment type="block" pos:start="683:17" pos:end="683:43">/* Two source operands.  */</comment>

                <expr_stmt pos:start="685:17" pos:end="685:40"><expr pos:start="685:17" pos:end="685:39"><call pos:start="685:17" pos:end="685:39"><name pos:start="685:17" pos:end="685:31">gen_mov_F0_vreg</name><argument_list pos:start="685:32" pos:end="685:39">(<argument pos:start="685:33" pos:end="685:34"><expr pos:start="685:33" pos:end="685:34"><name pos:start="685:33" pos:end="685:34">dp</name></expr></argument>, <argument pos:start="685:37" pos:end="685:38"><expr pos:start="685:37" pos:end="685:38"><name pos:start="685:37" pos:end="685:38">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="687:17" pos:end="687:40"><expr pos:start="687:17" pos:end="687:39"><call pos:start="687:17" pos:end="687:39"><name pos:start="687:17" pos:end="687:31">gen_mov_F1_vreg</name><argument_list pos:start="687:32" pos:end="687:39">(<argument pos:start="687:33" pos:end="687:34"><expr pos:start="687:33" pos:end="687:34"><name pos:start="687:33" pos:end="687:34">dp</name></expr></argument>, <argument pos:start="687:37" pos:end="687:38"><expr pos:start="687:37" pos:end="687:38"><name pos:start="687:37" pos:end="687:38">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <for pos:start="693:13" pos:end="1291:13">for <control pos:start="693:17" pos:end="693:20">(<init pos:start="693:18" pos:end="693:18">;</init><condition pos:start="693:19" pos:end="693:19">;</condition><incr/>)</control> <block pos:start="693:22" pos:end="1291:13">{<block_content pos:start="697:17" pos:end="1289:17">

                <comment type="block" pos:start="695:17" pos:end="695:47">/* Perform the calculation.  */</comment>

                <switch pos:start="697:17" pos:end="1195:17">switch <condition pos:start="697:24" pos:end="697:27">(<expr pos:start="697:25" pos:end="697:26"><name pos:start="697:25" pos:end="697:26">op</name></expr>)</condition> <block pos:start="697:29" pos:end="1195:17">{<block_content pos:start="699:17" pos:end="1193:29">

                <case pos:start="699:17" pos:end="699:23">case <expr pos:start="699:22" pos:end="699:22"><literal type="number" pos:start="699:22" pos:end="699:22">0</literal></expr>:</case> <comment type="block" pos:start="699:25" pos:end="699:50">/* VMLA: fd + (fn * fm) */</comment>

                    <comment type="block" pos:start="701:21" pos:end="701:79">/* Note that order of inputs to the add matters for NaNs */</comment>

                    <expr_stmt pos:start="703:21" pos:end="703:39"><expr pos:start="703:21" pos:end="703:38"><call pos:start="703:21" pos:end="703:38"><name pos:start="703:21" pos:end="703:34">gen_vfp_F1_mul</name><argument_list pos:start="703:35" pos:end="703:38">(<argument pos:start="703:36" pos:end="703:37"><expr pos:start="703:36" pos:end="703:37"><name pos:start="703:36" pos:end="703:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="705:21" pos:end="705:44"><expr pos:start="705:21" pos:end="705:43"><call pos:start="705:21" pos:end="705:43"><name pos:start="705:21" pos:end="705:35">gen_mov_F0_vreg</name><argument_list pos:start="705:36" pos:end="705:43">(<argument pos:start="705:37" pos:end="705:38"><expr pos:start="705:37" pos:end="705:38"><name pos:start="705:37" pos:end="705:38">dp</name></expr></argument>, <argument pos:start="705:41" pos:end="705:42"><expr pos:start="705:41" pos:end="705:42"><name pos:start="705:41" pos:end="705:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="707:21" pos:end="707:36"><expr pos:start="707:21" pos:end="707:35"><call pos:start="707:21" pos:end="707:35"><name pos:start="707:21" pos:end="707:31">gen_vfp_add</name><argument_list pos:start="707:32" pos:end="707:35">(<argument pos:start="707:33" pos:end="707:34"><expr pos:start="707:33" pos:end="707:34"><name pos:start="707:33" pos:end="707:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="709:21" pos:end="709:26">break;</break>

                <case pos:start="711:17" pos:end="711:23">case <expr pos:start="711:22" pos:end="711:22"><literal type="number" pos:start="711:22" pos:end="711:22">1</literal></expr>:</case> <comment type="block" pos:start="711:25" pos:end="711:51">/* VMLS: fd + -(fn * fm) */</comment>

                    <expr_stmt pos:start="713:21" pos:end="713:36"><expr pos:start="713:21" pos:end="713:35"><call pos:start="713:21" pos:end="713:35"><name pos:start="713:21" pos:end="713:31">gen_vfp_mul</name><argument_list pos:start="713:32" pos:end="713:35">(<argument pos:start="713:33" pos:end="713:34"><expr pos:start="713:33" pos:end="713:34"><name pos:start="713:33" pos:end="713:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="715:21" pos:end="715:39"><expr pos:start="715:21" pos:end="715:38"><call pos:start="715:21" pos:end="715:38"><name pos:start="715:21" pos:end="715:34">gen_vfp_F1_neg</name><argument_list pos:start="715:35" pos:end="715:38">(<argument pos:start="715:36" pos:end="715:37"><expr pos:start="715:36" pos:end="715:37"><name pos:start="715:36" pos:end="715:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="717:21" pos:end="717:44"><expr pos:start="717:21" pos:end="717:43"><call pos:start="717:21" pos:end="717:43"><name pos:start="717:21" pos:end="717:35">gen_mov_F0_vreg</name><argument_list pos:start="717:36" pos:end="717:43">(<argument pos:start="717:37" pos:end="717:38"><expr pos:start="717:37" pos:end="717:38"><name pos:start="717:37" pos:end="717:38">dp</name></expr></argument>, <argument pos:start="717:41" pos:end="717:42"><expr pos:start="717:41" pos:end="717:42"><name pos:start="717:41" pos:end="717:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="719:21" pos:end="719:36"><expr pos:start="719:21" pos:end="719:35"><call pos:start="719:21" pos:end="719:35"><name pos:start="719:21" pos:end="719:31">gen_vfp_add</name><argument_list pos:start="719:32" pos:end="719:35">(<argument pos:start="719:33" pos:end="719:34"><expr pos:start="719:33" pos:end="719:34"><name pos:start="719:33" pos:end="719:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="721:21" pos:end="721:26">break;</break>

                <case pos:start="723:17" pos:end="723:23">case <expr pos:start="723:22" pos:end="723:22"><literal type="number" pos:start="723:22" pos:end="723:22">2</literal></expr>:</case> <comment type="block" pos:start="723:25" pos:end="723:52">/* VNMLS: -fd + (fn * fm) */</comment>

                    <comment type="block" pos:start="725:21" pos:end="731:23">/* Note that it isn't valid to replace (-A + B) with (B - A)

                     * or similar plausible looking simplifications

                     * because this will give wrong results for NaNs.

                     */</comment>

                    <expr_stmt pos:start="733:21" pos:end="733:39"><expr pos:start="733:21" pos:end="733:38"><call pos:start="733:21" pos:end="733:38"><name pos:start="733:21" pos:end="733:34">gen_vfp_F1_mul</name><argument_list pos:start="733:35" pos:end="733:38">(<argument pos:start="733:36" pos:end="733:37"><expr pos:start="733:36" pos:end="733:37"><name pos:start="733:36" pos:end="733:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="735:21" pos:end="735:44"><expr pos:start="735:21" pos:end="735:43"><call pos:start="735:21" pos:end="735:43"><name pos:start="735:21" pos:end="735:35">gen_mov_F0_vreg</name><argument_list pos:start="735:36" pos:end="735:43">(<argument pos:start="735:37" pos:end="735:38"><expr pos:start="735:37" pos:end="735:38"><name pos:start="735:37" pos:end="735:38">dp</name></expr></argument>, <argument pos:start="735:41" pos:end="735:42"><expr pos:start="735:41" pos:end="735:42"><name pos:start="735:41" pos:end="735:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="737:21" pos:end="737:36"><expr pos:start="737:21" pos:end="737:35"><call pos:start="737:21" pos:end="737:35"><name pos:start="737:21" pos:end="737:31">gen_vfp_neg</name><argument_list pos:start="737:32" pos:end="737:35">(<argument pos:start="737:33" pos:end="737:34"><expr pos:start="737:33" pos:end="737:34"><name pos:start="737:33" pos:end="737:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="739:21" pos:end="739:36"><expr pos:start="739:21" pos:end="739:35"><call pos:start="739:21" pos:end="739:35"><name pos:start="739:21" pos:end="739:31">gen_vfp_add</name><argument_list pos:start="739:32" pos:end="739:35">(<argument pos:start="739:33" pos:end="739:34"><expr pos:start="739:33" pos:end="739:34"><name pos:start="739:33" pos:end="739:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="741:21" pos:end="741:26">break;</break>

                <case pos:start="743:17" pos:end="743:23">case <expr pos:start="743:22" pos:end="743:22"><literal type="number" pos:start="743:22" pos:end="743:22">3</literal></expr>:</case> <comment type="block" pos:start="743:25" pos:end="743:53">/* VNMLA: -fd + -(fn * fm) */</comment>

                    <expr_stmt pos:start="745:21" pos:end="745:36"><expr pos:start="745:21" pos:end="745:35"><call pos:start="745:21" pos:end="745:35"><name pos:start="745:21" pos:end="745:31">gen_vfp_mul</name><argument_list pos:start="745:32" pos:end="745:35">(<argument pos:start="745:33" pos:end="745:34"><expr pos:start="745:33" pos:end="745:34"><name pos:start="745:33" pos:end="745:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="747:21" pos:end="747:39"><expr pos:start="747:21" pos:end="747:38"><call pos:start="747:21" pos:end="747:38"><name pos:start="747:21" pos:end="747:34">gen_vfp_F1_neg</name><argument_list pos:start="747:35" pos:end="747:38">(<argument pos:start="747:36" pos:end="747:37"><expr pos:start="747:36" pos:end="747:37"><name pos:start="747:36" pos:end="747:37">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="749:21" pos:end="749:44"><expr pos:start="749:21" pos:end="749:43"><call pos:start="749:21" pos:end="749:43"><name pos:start="749:21" pos:end="749:35">gen_mov_F0_vreg</name><argument_list pos:start="749:36" pos:end="749:43">(<argument pos:start="749:37" pos:end="749:38"><expr pos:start="749:37" pos:end="749:38"><name pos:start="749:37" pos:end="749:38">dp</name></expr></argument>, <argument pos:start="749:41" pos:end="749:42"><expr pos:start="749:41" pos:end="749:42"><name pos:start="749:41" pos:end="749:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="751:21" pos:end="751:36"><expr pos:start="751:21" pos:end="751:35"><call pos:start="751:21" pos:end="751:35"><name pos:start="751:21" pos:end="751:31">gen_vfp_neg</name><argument_list pos:start="751:32" pos:end="751:35">(<argument pos:start="751:33" pos:end="751:34"><expr pos:start="751:33" pos:end="751:34"><name pos:start="751:33" pos:end="751:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="753:21" pos:end="753:36"><expr pos:start="753:21" pos:end="753:35"><call pos:start="753:21" pos:end="753:35"><name pos:start="753:21" pos:end="753:31">gen_vfp_add</name><argument_list pos:start="753:32" pos:end="753:35">(<argument pos:start="753:33" pos:end="753:34"><expr pos:start="753:33" pos:end="753:34"><name pos:start="753:33" pos:end="753:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="755:21" pos:end="755:26">break;</break>

                <case pos:start="757:17" pos:end="757:23">case <expr pos:start="757:22" pos:end="757:22"><literal type="number" pos:start="757:22" pos:end="757:22">4</literal></expr>:</case> <comment type="block" pos:start="757:25" pos:end="757:42">/* mul: fn * fm */</comment>

                    <expr_stmt pos:start="759:21" pos:end="759:36"><expr pos:start="759:21" pos:end="759:35"><call pos:start="759:21" pos:end="759:35"><name pos:start="759:21" pos:end="759:31">gen_vfp_mul</name><argument_list pos:start="759:32" pos:end="759:35">(<argument pos:start="759:33" pos:end="759:34"><expr pos:start="759:33" pos:end="759:34"><name pos:start="759:33" pos:end="759:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="761:21" pos:end="761:26">break;</break>

                <case pos:start="763:17" pos:end="763:23">case <expr pos:start="763:22" pos:end="763:22"><literal type="number" pos:start="763:22" pos:end="763:22">5</literal></expr>:</case> <comment type="block" pos:start="763:25" pos:end="763:46">/* nmul: -(fn * fm) */</comment>

                    <expr_stmt pos:start="765:21" pos:end="765:36"><expr pos:start="765:21" pos:end="765:35"><call pos:start="765:21" pos:end="765:35"><name pos:start="765:21" pos:end="765:31">gen_vfp_mul</name><argument_list pos:start="765:32" pos:end="765:35">(<argument pos:start="765:33" pos:end="765:34"><expr pos:start="765:33" pos:end="765:34"><name pos:start="765:33" pos:end="765:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="767:21" pos:end="767:36"><expr pos:start="767:21" pos:end="767:35"><call pos:start="767:21" pos:end="767:35"><name pos:start="767:21" pos:end="767:31">gen_vfp_neg</name><argument_list pos:start="767:32" pos:end="767:35">(<argument pos:start="767:33" pos:end="767:34"><expr pos:start="767:33" pos:end="767:34"><name pos:start="767:33" pos:end="767:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="769:21" pos:end="769:26">break;</break>

                <case pos:start="771:17" pos:end="771:23">case <expr pos:start="771:22" pos:end="771:22"><literal type="number" pos:start="771:22" pos:end="771:22">6</literal></expr>:</case> <comment type="block" pos:start="771:25" pos:end="771:42">/* add: fn + fm */</comment>

                    <expr_stmt pos:start="773:21" pos:end="773:36"><expr pos:start="773:21" pos:end="773:35"><call pos:start="773:21" pos:end="773:35"><name pos:start="773:21" pos:end="773:31">gen_vfp_add</name><argument_list pos:start="773:32" pos:end="773:35">(<argument pos:start="773:33" pos:end="773:34"><expr pos:start="773:33" pos:end="773:34"><name pos:start="773:33" pos:end="773:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="775:21" pos:end="775:26">break;</break>

                <case pos:start="777:17" pos:end="777:23">case <expr pos:start="777:22" pos:end="777:22"><literal type="number" pos:start="777:22" pos:end="777:22">7</literal></expr>:</case> <comment type="block" pos:start="777:25" pos:end="777:42">/* sub: fn - fm */</comment>

                    <expr_stmt pos:start="779:21" pos:end="779:36"><expr pos:start="779:21" pos:end="779:35"><call pos:start="779:21" pos:end="779:35"><name pos:start="779:21" pos:end="779:31">gen_vfp_sub</name><argument_list pos:start="779:32" pos:end="779:35">(<argument pos:start="779:33" pos:end="779:34"><expr pos:start="779:33" pos:end="779:34"><name pos:start="779:33" pos:end="779:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="781:21" pos:end="781:26">break;</break>

                <case pos:start="783:17" pos:end="783:23">case <expr pos:start="783:22" pos:end="783:22"><literal type="number" pos:start="783:22" pos:end="783:22">8</literal></expr>:</case> <comment type="block" pos:start="783:25" pos:end="783:42">/* div: fn / fm */</comment>

                    <expr_stmt pos:start="785:21" pos:end="785:36"><expr pos:start="785:21" pos:end="785:35"><call pos:start="785:21" pos:end="785:35"><name pos:start="785:21" pos:end="785:31">gen_vfp_div</name><argument_list pos:start="785:32" pos:end="785:35">(<argument pos:start="785:33" pos:end="785:34"><expr pos:start="785:33" pos:end="785:34"><name pos:start="785:33" pos:end="785:34">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="787:21" pos:end="787:26">break;</break>

                <case pos:start="789:17" pos:end="789:24">case <expr pos:start="789:22" pos:end="789:23"><literal type="number" pos:start="789:22" pos:end="789:23">10</literal></expr>:</case> <comment type="block" pos:start="789:26" pos:end="789:64">/* VFNMA : fd = muladd(-fd,  fn, fm) */</comment>

                <case pos:start="791:17" pos:end="791:24">case <expr pos:start="791:22" pos:end="791:23"><literal type="number" pos:start="791:22" pos:end="791:23">11</literal></expr>:</case> <comment type="block" pos:start="791:26" pos:end="791:64">/* VFNMS : fd = muladd(-fd, -fn, fm) */</comment>

                <case pos:start="793:17" pos:end="793:24">case <expr pos:start="793:22" pos:end="793:23"><literal type="number" pos:start="793:22" pos:end="793:23">12</literal></expr>:</case> <comment type="block" pos:start="793:26" pos:end="793:64">/* VFMA  : fd = muladd( fd,  fn, fm) */</comment>

                <case pos:start="795:17" pos:end="795:24">case <expr pos:start="795:22" pos:end="795:23"><literal type="number" pos:start="795:22" pos:end="795:23">13</literal></expr>:</case> <comment type="block" pos:start="795:26" pos:end="795:64">/* VFMS  : fd = muladd( fd, -fn, fm) */</comment>

                    <comment type="block" pos:start="797:21" pos:end="809:23">/* These are fused multiply-add, and must be done as one

                     * floating point operation with no rounding between the

                     * multiplication and addition steps.

                     * NB that doing the negations here as separate steps is

                     * correct : an input NaN should come out with its sign bit

                     * flipped if it is a negated-input.

                     */</comment>

                    <if_stmt pos:start="811:21" pos:end="815:21"><if pos:start="811:21" pos:end="815:21">if <condition pos:start="811:24" pos:end="811:60">(<expr pos:start="811:25" pos:end="811:59"><operator pos:start="811:25" pos:end="811:25">!</operator><call pos:start="811:26" pos:end="811:59"><name pos:start="811:26" pos:end="811:36">arm_feature</name><argument_list pos:start="811:37" pos:end="811:59">(<argument pos:start="811:38" pos:end="811:40"><expr pos:start="811:38" pos:end="811:40"><name pos:start="811:38" pos:end="811:40">env</name></expr></argument>, <argument pos:start="811:43" pos:end="811:58"><expr pos:start="811:43" pos:end="811:58"><name pos:start="811:43" pos:end="811:58">ARM_FEATURE_VFP4</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="811:62" pos:end="815:21">{<block_content pos:start="813:25" pos:end="813:33">

                        <return pos:start="813:25" pos:end="813:33">return <expr pos:start="813:32" pos:end="813:32"><literal type="number" pos:start="813:32" pos:end="813:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="817:21" pos:end="887:21"><if pos:start="817:21" pos:end="853:21">if <condition pos:start="817:24" pos:end="817:27">(<expr pos:start="817:25" pos:end="817:26"><name pos:start="817:25" pos:end="817:26">dp</name></expr>)</condition> <block pos:start="817:29" pos:end="853:21">{<block_content pos:start="819:25" pos:end="851:47">

                        <decl_stmt pos:start="819:25" pos:end="819:38"><decl pos:start="819:25" pos:end="819:37"><type pos:start="819:25" pos:end="819:32"><name pos:start="819:25" pos:end="819:32">TCGv_ptr</name></type> <name pos:start="819:34" pos:end="819:37">fpst</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="821:25" pos:end="821:37"><decl pos:start="821:25" pos:end="821:36"><type pos:start="821:25" pos:end="821:32"><name pos:start="821:25" pos:end="821:32">TCGv_i64</name></type> <name pos:start="821:34" pos:end="821:36">frd</name></decl>;</decl_stmt>

                        <if_stmt pos:start="823:25" pos:end="829:25"><if pos:start="823:25" pos:end="829:25">if <condition pos:start="823:28" pos:end="823:35">(<expr pos:start="823:29" pos:end="823:34"><name pos:start="823:29" pos:end="823:30">op</name> <operator pos:start="823:32" pos:end="823:32">&amp;</operator> <literal type="number" pos:start="823:34" pos:end="823:34">1</literal></expr>)</condition> <block pos:start="823:37" pos:end="829:25">{<block_content pos:start="827:29" pos:end="827:66">

                            <comment type="block" pos:start="825:29" pos:end="825:45">/* VFNMS, VFMS */</comment>

                            <expr_stmt pos:start="827:29" pos:end="827:66"><expr pos:start="827:29" pos:end="827:65"><call pos:start="827:29" pos:end="827:65"><name pos:start="827:29" pos:end="827:47">gen_helper_vfp_negd</name><argument_list pos:start="827:48" pos:end="827:65">(<argument pos:start="827:49" pos:end="827:55"><expr pos:start="827:49" pos:end="827:55"><name pos:start="827:49" pos:end="827:55">cpu_F0d</name></expr></argument>, <argument pos:start="827:58" pos:end="827:64"><expr pos:start="827:58" pos:end="827:64"><name pos:start="827:58" pos:end="827:64">cpu_F0d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="831:25" pos:end="831:49"><expr pos:start="831:25" pos:end="831:48"><name pos:start="831:25" pos:end="831:27">frd</name> <operator pos:start="831:29" pos:end="831:29">=</operator> <call pos:start="831:31" pos:end="831:48"><name pos:start="831:31" pos:end="831:46">tcg_temp_new_i64</name><argument_list pos:start="831:47" pos:end="831:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="833:25" pos:end="833:77"><expr pos:start="833:25" pos:end="833:76"><call pos:start="833:25" pos:end="833:76"><name pos:start="833:25" pos:end="833:38">tcg_gen_ld_f64</name><argument_list pos:start="833:39" pos:end="833:76">(<argument pos:start="833:40" pos:end="833:42"><expr pos:start="833:40" pos:end="833:42"><name pos:start="833:40" pos:end="833:42">frd</name></expr></argument>, <argument pos:start="833:45" pos:end="833:51"><expr pos:start="833:45" pos:end="833:51"><name pos:start="833:45" pos:end="833:51">cpu_env</name></expr></argument>, <argument pos:start="833:54" pos:end="833:75"><expr pos:start="833:54" pos:end="833:75"><call pos:start="833:54" pos:end="833:75"><name pos:start="833:54" pos:end="833:67">vfp_reg_offset</name><argument_list pos:start="833:68" pos:end="833:75">(<argument pos:start="833:69" pos:end="833:70"><expr pos:start="833:69" pos:end="833:70"><name pos:start="833:69" pos:end="833:70">dp</name></expr></argument>, <argument pos:start="833:73" pos:end="833:74"><expr pos:start="833:73" pos:end="833:74"><name pos:start="833:73" pos:end="833:74">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="835:25" pos:end="841:25"><if pos:start="835:25" pos:end="841:25">if <condition pos:start="835:28" pos:end="835:35">(<expr pos:start="835:29" pos:end="835:34"><name pos:start="835:29" pos:end="835:30">op</name> <operator pos:start="835:32" pos:end="835:32">&amp;</operator> <literal type="number" pos:start="835:34" pos:end="835:34">2</literal></expr>)</condition> <block pos:start="835:37" pos:end="841:25">{<block_content pos:start="839:29" pos:end="839:58">

                            <comment type="block" pos:start="837:29" pos:end="837:46">/* VFNMA, VFNMS */</comment>

                            <expr_stmt pos:start="839:29" pos:end="839:58"><expr pos:start="839:29" pos:end="839:57"><call pos:start="839:29" pos:end="839:57"><name pos:start="839:29" pos:end="839:47">gen_helper_vfp_negd</name><argument_list pos:start="839:48" pos:end="839:57">(<argument pos:start="839:49" pos:end="839:51"><expr pos:start="839:49" pos:end="839:51"><name pos:start="839:49" pos:end="839:51">frd</name></expr></argument>, <argument pos:start="839:54" pos:end="839:56"><expr pos:start="839:54" pos:end="839:56"><name pos:start="839:54" pos:end="839:56">frd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="843:25" pos:end="843:51"><expr pos:start="843:25" pos:end="843:50"><name pos:start="843:25" pos:end="843:28">fpst</name> <operator pos:start="843:30" pos:end="843:30">=</operator> <call pos:start="843:32" pos:end="843:50"><name pos:start="843:32" pos:end="843:47">get_fpstatus_ptr</name><argument_list pos:start="843:48" pos:end="843:50">(<argument pos:start="843:49" pos:end="843:49"><expr pos:start="843:49" pos:end="843:49"><literal type="number" pos:start="843:49" pos:end="843:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="845:25" pos:end="847:67"><expr pos:start="845:25" pos:end="847:66"><call pos:start="845:25" pos:end="847:66"><name pos:start="845:25" pos:end="845:46">gen_helper_vfp_muladdd</name><argument_list pos:start="845:47" pos:end="847:66">(<argument pos:start="845:48" pos:end="845:54"><expr pos:start="845:48" pos:end="845:54"><name pos:start="845:48" pos:end="845:54">cpu_F0d</name></expr></argument>, <argument pos:start="845:57" pos:end="845:63"><expr pos:start="845:57" pos:end="845:63"><name pos:start="845:57" pos:end="845:63">cpu_F0d</name></expr></argument>,

                                               <argument pos:start="847:48" pos:end="847:54"><expr pos:start="847:48" pos:end="847:54"><name pos:start="847:48" pos:end="847:54">cpu_F1d</name></expr></argument>, <argument pos:start="847:57" pos:end="847:59"><expr pos:start="847:57" pos:end="847:59"><name pos:start="847:57" pos:end="847:59">frd</name></expr></argument>, <argument pos:start="847:62" pos:end="847:65"><expr pos:start="847:62" pos:end="847:65"><name pos:start="847:62" pos:end="847:65">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="849:25" pos:end="849:48"><expr pos:start="849:25" pos:end="849:47"><call pos:start="849:25" pos:end="849:47"><name pos:start="849:25" pos:end="849:41">tcg_temp_free_ptr</name><argument_list pos:start="849:42" pos:end="849:47">(<argument pos:start="849:43" pos:end="849:46"><expr pos:start="849:43" pos:end="849:46"><name pos:start="849:43" pos:end="849:46">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="851:25" pos:end="851:47"><expr pos:start="851:25" pos:end="851:46"><call pos:start="851:25" pos:end="851:46"><name pos:start="851:25" pos:end="851:41">tcg_temp_free_i64</name><argument_list pos:start="851:42" pos:end="851:46">(<argument pos:start="851:43" pos:end="851:45"><expr pos:start="851:43" pos:end="851:45"><name pos:start="851:43" pos:end="851:45">frd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="853:23" pos:end="887:21">else <block pos:start="853:28" pos:end="887:21">{<block_content pos:start="855:25" pos:end="885:47">

                        <decl_stmt pos:start="855:25" pos:end="855:38"><decl pos:start="855:25" pos:end="855:37"><type pos:start="855:25" pos:end="855:32"><name pos:start="855:25" pos:end="855:32">TCGv_ptr</name></type> <name pos:start="855:34" pos:end="855:37">fpst</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="857:25" pos:end="857:37"><decl pos:start="857:25" pos:end="857:36"><type pos:start="857:25" pos:end="857:32"><name pos:start="857:25" pos:end="857:32">TCGv_i32</name></type> <name pos:start="857:34" pos:end="857:36">frd</name></decl>;</decl_stmt>

                        <if_stmt pos:start="859:25" pos:end="865:25"><if pos:start="859:25" pos:end="865:25">if <condition pos:start="859:28" pos:end="859:35">(<expr pos:start="859:29" pos:end="859:34"><name pos:start="859:29" pos:end="859:30">op</name> <operator pos:start="859:32" pos:end="859:32">&amp;</operator> <literal type="number" pos:start="859:34" pos:end="859:34">1</literal></expr>)</condition> <block pos:start="859:37" pos:end="865:25">{<block_content pos:start="863:29" pos:end="863:66">

                            <comment type="block" pos:start="861:29" pos:end="861:45">/* VFNMS, VFMS */</comment>

                            <expr_stmt pos:start="863:29" pos:end="863:66"><expr pos:start="863:29" pos:end="863:65"><call pos:start="863:29" pos:end="863:65"><name pos:start="863:29" pos:end="863:47">gen_helper_vfp_negs</name><argument_list pos:start="863:48" pos:end="863:65">(<argument pos:start="863:49" pos:end="863:55"><expr pos:start="863:49" pos:end="863:55"><name pos:start="863:49" pos:end="863:55">cpu_F0s</name></expr></argument>, <argument pos:start="863:58" pos:end="863:64"><expr pos:start="863:58" pos:end="863:64"><name pos:start="863:58" pos:end="863:64">cpu_F0s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="867:25" pos:end="867:49"><expr pos:start="867:25" pos:end="867:48"><name pos:start="867:25" pos:end="867:27">frd</name> <operator pos:start="867:29" pos:end="867:29">=</operator> <call pos:start="867:31" pos:end="867:48"><name pos:start="867:31" pos:end="867:46">tcg_temp_new_i32</name><argument_list pos:start="867:47" pos:end="867:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="869:25" pos:end="869:77"><expr pos:start="869:25" pos:end="869:76"><call pos:start="869:25" pos:end="869:76"><name pos:start="869:25" pos:end="869:38">tcg_gen_ld_f32</name><argument_list pos:start="869:39" pos:end="869:76">(<argument pos:start="869:40" pos:end="869:42"><expr pos:start="869:40" pos:end="869:42"><name pos:start="869:40" pos:end="869:42">frd</name></expr></argument>, <argument pos:start="869:45" pos:end="869:51"><expr pos:start="869:45" pos:end="869:51"><name pos:start="869:45" pos:end="869:51">cpu_env</name></expr></argument>, <argument pos:start="869:54" pos:end="869:75"><expr pos:start="869:54" pos:end="869:75"><call pos:start="869:54" pos:end="869:75"><name pos:start="869:54" pos:end="869:67">vfp_reg_offset</name><argument_list pos:start="869:68" pos:end="869:75">(<argument pos:start="869:69" pos:end="869:70"><expr pos:start="869:69" pos:end="869:70"><name pos:start="869:69" pos:end="869:70">dp</name></expr></argument>, <argument pos:start="869:73" pos:end="869:74"><expr pos:start="869:73" pos:end="869:74"><name pos:start="869:73" pos:end="869:74">rd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="871:25" pos:end="875:25"><if pos:start="871:25" pos:end="875:25">if <condition pos:start="871:28" pos:end="871:35">(<expr pos:start="871:29" pos:end="871:34"><name pos:start="871:29" pos:end="871:30">op</name> <operator pos:start="871:32" pos:end="871:32">&amp;</operator> <literal type="number" pos:start="871:34" pos:end="871:34">2</literal></expr>)</condition> <block pos:start="871:37" pos:end="875:25">{<block_content pos:start="873:29" pos:end="873:58">

                            <expr_stmt pos:start="873:29" pos:end="873:58"><expr pos:start="873:29" pos:end="873:57"><call pos:start="873:29" pos:end="873:57"><name pos:start="873:29" pos:end="873:47">gen_helper_vfp_negs</name><argument_list pos:start="873:48" pos:end="873:57">(<argument pos:start="873:49" pos:end="873:51"><expr pos:start="873:49" pos:end="873:51"><name pos:start="873:49" pos:end="873:51">frd</name></expr></argument>, <argument pos:start="873:54" pos:end="873:56"><expr pos:start="873:54" pos:end="873:56"><name pos:start="873:54" pos:end="873:56">frd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="877:25" pos:end="877:51"><expr pos:start="877:25" pos:end="877:50"><name pos:start="877:25" pos:end="877:28">fpst</name> <operator pos:start="877:30" pos:end="877:30">=</operator> <call pos:start="877:32" pos:end="877:50"><name pos:start="877:32" pos:end="877:47">get_fpstatus_ptr</name><argument_list pos:start="877:48" pos:end="877:50">(<argument pos:start="877:49" pos:end="877:49"><expr pos:start="877:49" pos:end="877:49"><literal type="number" pos:start="877:49" pos:end="877:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="879:25" pos:end="881:67"><expr pos:start="879:25" pos:end="881:66"><call pos:start="879:25" pos:end="881:66"><name pos:start="879:25" pos:end="879:46">gen_helper_vfp_muladds</name><argument_list pos:start="879:47" pos:end="881:66">(<argument pos:start="879:48" pos:end="879:54"><expr pos:start="879:48" pos:end="879:54"><name pos:start="879:48" pos:end="879:54">cpu_F0s</name></expr></argument>, <argument pos:start="879:57" pos:end="879:63"><expr pos:start="879:57" pos:end="879:63"><name pos:start="879:57" pos:end="879:63">cpu_F0s</name></expr></argument>,

                                               <argument pos:start="881:48" pos:end="881:54"><expr pos:start="881:48" pos:end="881:54"><name pos:start="881:48" pos:end="881:54">cpu_F1s</name></expr></argument>, <argument pos:start="881:57" pos:end="881:59"><expr pos:start="881:57" pos:end="881:59"><name pos:start="881:57" pos:end="881:59">frd</name></expr></argument>, <argument pos:start="881:62" pos:end="881:65"><expr pos:start="881:62" pos:end="881:65"><name pos:start="881:62" pos:end="881:65">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="883:25" pos:end="883:48"><expr pos:start="883:25" pos:end="883:47"><call pos:start="883:25" pos:end="883:47"><name pos:start="883:25" pos:end="883:41">tcg_temp_free_ptr</name><argument_list pos:start="883:42" pos:end="883:47">(<argument pos:start="883:43" pos:end="883:46"><expr pos:start="883:43" pos:end="883:46"><name pos:start="883:43" pos:end="883:46">fpst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="885:25" pos:end="885:47"><expr pos:start="885:25" pos:end="885:46"><call pos:start="885:25" pos:end="885:46"><name pos:start="885:25" pos:end="885:41">tcg_temp_free_i32</name><argument_list pos:start="885:42" pos:end="885:46">(<argument pos:start="885:43" pos:end="885:45"><expr pos:start="885:43" pos:end="885:45"><name pos:start="885:43" pos:end="885:45">frd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="889:21" pos:end="889:26">break;</break>

                <case pos:start="891:17" pos:end="891:24">case <expr pos:start="891:22" pos:end="891:23"><literal type="number" pos:start="891:22" pos:end="891:23">14</literal></expr>:</case> <comment type="block" pos:start="891:26" pos:end="891:37">/* fconst */</comment>

                    <if_stmt pos:start="893:21" pos:end="895:31"><if pos:start="893:21" pos:end="895:31">if <condition pos:start="893:24" pos:end="893:60">(<expr pos:start="893:25" pos:end="893:59"><operator pos:start="893:25" pos:end="893:25">!</operator><call pos:start="893:26" pos:end="893:59"><name pos:start="893:26" pos:end="893:36">arm_feature</name><argument_list pos:start="893:37" pos:end="893:59">(<argument pos:start="893:38" pos:end="893:40"><expr pos:start="893:38" pos:end="893:40"><name pos:start="893:38" pos:end="893:40">env</name></expr></argument>, <argument pos:start="893:43" pos:end="893:58"><expr pos:start="893:43" pos:end="893:58"><name pos:start="893:43" pos:end="893:58">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="895:23" pos:end="895:31"><block_content pos:start="895:23" pos:end="895:31">

                      <return pos:start="895:23" pos:end="895:31">return <expr pos:start="895:30" pos:end="895:30"><literal type="number" pos:start="895:30" pos:end="895:30">1</literal></expr>;</return></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="899:21" pos:end="899:50"><expr pos:start="899:21" pos:end="899:49"><name pos:start="899:21" pos:end="899:21">n</name> <operator pos:start="899:23" pos:end="899:23">=</operator> <operator pos:start="899:25" pos:end="899:25">(</operator><name pos:start="899:26" pos:end="899:29">insn</name> <operator pos:start="899:31" pos:end="899:32">&lt;&lt;</operator> <literal type="number" pos:start="899:34" pos:end="899:35">12</literal><operator pos:start="899:36" pos:end="899:36">)</operator> <operator pos:start="899:38" pos:end="899:38">&amp;</operator> <literal type="number" pos:start="899:40" pos:end="899:49">0x80000000</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="901:21" pos:end="901:61"><expr pos:start="901:21" pos:end="901:60"><name pos:start="901:21" pos:end="901:21">i</name> <operator pos:start="901:23" pos:end="901:23">=</operator> <operator pos:start="901:25" pos:end="901:25">(</operator><operator pos:start="901:26" pos:end="901:26">(</operator><name pos:start="901:27" pos:end="901:30">insn</name> <operator pos:start="901:32" pos:end="901:33">&gt;&gt;</operator> <literal type="number" pos:start="901:35" pos:end="901:36">12</literal><operator pos:start="901:37" pos:end="901:37">)</operator> <operator pos:start="901:39" pos:end="901:39">&amp;</operator> <literal type="number" pos:start="901:41" pos:end="901:44">0x70</literal><operator pos:start="901:45" pos:end="901:45">)</operator> <operator pos:start="901:47" pos:end="901:47">|</operator> <operator pos:start="901:49" pos:end="901:49">(</operator><name pos:start="901:50" pos:end="901:53">insn</name> <operator pos:start="901:55" pos:end="901:55">&amp;</operator> <literal type="number" pos:start="901:57" pos:end="901:59">0xf</literal><operator pos:start="901:60" pos:end="901:60">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="903:21" pos:end="931:21"><if pos:start="903:21" pos:end="917:21">if <condition pos:start="903:24" pos:end="903:27">(<expr pos:start="903:25" pos:end="903:26"><name pos:start="903:25" pos:end="903:26">dp</name></expr>)</condition> <block pos:start="903:29" pos:end="917:21">{<block_content pos:start="905:25" pos:end="915:71">

                        <if_stmt pos:start="905:25" pos:end="911:40"><if pos:start="905:25" pos:end="907:40">if <condition pos:start="905:28" pos:end="905:37">(<expr pos:start="905:29" pos:end="905:36"><name pos:start="905:29" pos:end="905:29">i</name> <operator pos:start="905:31" pos:end="905:31">&amp;</operator> <literal type="number" pos:start="905:33" pos:end="905:36">0x40</literal></expr>)</condition><block type="pseudo" pos:start="907:29" pos:end="907:40"><block_content pos:start="907:29" pos:end="907:40">

                            <expr_stmt pos:start="907:29" pos:end="907:40"><expr pos:start="907:29" pos:end="907:39"><name pos:start="907:29" pos:end="907:29">i</name> <operator pos:start="907:31" pos:end="907:32">|=</operator> <literal type="number" pos:start="907:34" pos:end="907:39">0x3f80</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="909:25" pos:end="911:40">else<block type="pseudo" pos:start="911:29" pos:end="911:40"><block_content pos:start="911:29" pos:end="911:40">

                            <expr_stmt pos:start="911:29" pos:end="911:40"><expr pos:start="911:29" pos:end="911:39"><name pos:start="911:29" pos:end="911:29">i</name> <operator pos:start="911:31" pos:end="911:32">|=</operator> <literal type="number" pos:start="911:34" pos:end="911:39">0x4000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="913:25" pos:end="913:37"><expr pos:start="913:25" pos:end="913:36"><name pos:start="913:25" pos:end="913:25">n</name> <operator pos:start="913:27" pos:end="913:28">|=</operator> <name pos:start="913:30" pos:end="913:30">i</name> <operator pos:start="913:32" pos:end="913:33">&lt;&lt;</operator> <literal type="number" pos:start="913:35" pos:end="913:36">16</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="915:25" pos:end="915:71"><expr pos:start="915:25" pos:end="915:70"><call pos:start="915:25" pos:end="915:70"><name pos:start="915:25" pos:end="915:40">tcg_gen_movi_i64</name><argument_list pos:start="915:41" pos:end="915:70">(<argument pos:start="915:42" pos:end="915:48"><expr pos:start="915:42" pos:end="915:48"><name pos:start="915:42" pos:end="915:48">cpu_F0d</name></expr></argument>, <argument pos:start="915:51" pos:end="915:69"><expr pos:start="915:51" pos:end="915:69"><operator pos:start="915:51" pos:end="915:51">(</operator><operator pos:start="915:52" pos:end="915:52">(</operator><name pos:start="915:53" pos:end="915:60">uint64_t</name><operator pos:start="915:61" pos:end="915:61">)</operator><name pos:start="915:62" pos:end="915:62">n</name><operator pos:start="915:63" pos:end="915:63">)</operator> <operator pos:start="915:65" pos:end="915:66">&lt;&lt;</operator> <literal type="number" pos:start="915:68" pos:end="915:69">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="917:23" pos:end="931:21">else <block pos:start="917:28" pos:end="931:21">{<block_content pos:start="919:25" pos:end="929:53">

                        <if_stmt pos:start="919:25" pos:end="925:39"><if pos:start="919:25" pos:end="921:39">if <condition pos:start="919:28" pos:end="919:37">(<expr pos:start="919:29" pos:end="919:36"><name pos:start="919:29" pos:end="919:29">i</name> <operator pos:start="919:31" pos:end="919:31">&amp;</operator> <literal type="number" pos:start="919:33" pos:end="919:36">0x40</literal></expr>)</condition><block type="pseudo" pos:start="921:29" pos:end="921:39"><block_content pos:start="921:29" pos:end="921:39">

                            <expr_stmt pos:start="921:29" pos:end="921:39"><expr pos:start="921:29" pos:end="921:38"><name pos:start="921:29" pos:end="921:29">i</name> <operator pos:start="921:31" pos:end="921:32">|=</operator> <literal type="number" pos:start="921:34" pos:end="921:38">0x780</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="923:25" pos:end="925:39">else<block type="pseudo" pos:start="925:29" pos:end="925:39"><block_content pos:start="925:29" pos:end="925:39">

                            <expr_stmt pos:start="925:29" pos:end="925:39"><expr pos:start="925:29" pos:end="925:38"><name pos:start="925:29" pos:end="925:29">i</name> <operator pos:start="925:31" pos:end="925:32">|=</operator> <literal type="number" pos:start="925:34" pos:end="925:38">0x800</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="927:25" pos:end="927:37"><expr pos:start="927:25" pos:end="927:36"><name pos:start="927:25" pos:end="927:25">n</name> <operator pos:start="927:27" pos:end="927:28">|=</operator> <name pos:start="927:30" pos:end="927:30">i</name> <operator pos:start="927:32" pos:end="927:33">&lt;&lt;</operator> <literal type="number" pos:start="927:35" pos:end="927:36">19</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="929:25" pos:end="929:53"><expr pos:start="929:25" pos:end="929:52"><call pos:start="929:25" pos:end="929:52"><name pos:start="929:25" pos:end="929:40">tcg_gen_movi_i32</name><argument_list pos:start="929:41" pos:end="929:52">(<argument pos:start="929:42" pos:end="929:48"><expr pos:start="929:42" pos:end="929:48"><name pos:start="929:42" pos:end="929:48">cpu_F0s</name></expr></argument>, <argument pos:start="929:51" pos:end="929:51"><expr pos:start="929:51" pos:end="929:51"><name pos:start="929:51" pos:end="929:51">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="933:21" pos:end="933:26">break;</break>

                <case pos:start="935:17" pos:end="935:24">case <expr pos:start="935:22" pos:end="935:23"><literal type="number" pos:start="935:22" pos:end="935:23">15</literal></expr>:</case> <comment type="block" pos:start="935:26" pos:end="935:46">/* extension space */</comment>

                    <switch pos:start="937:21" pos:end="1187:21">switch <condition pos:start="937:28" pos:end="937:31">(<expr pos:start="937:29" pos:end="937:30"><name pos:start="937:29" pos:end="937:30">rn</name></expr>)</condition> <block pos:start="937:33" pos:end="1187:21">{<block_content pos:start="939:21" pos:end="1185:33">

                    <case pos:start="939:21" pos:end="939:27">case <expr pos:start="939:26" pos:end="939:26"><literal type="number" pos:start="939:26" pos:end="939:26">0</literal></expr>:</case> <comment type="block" pos:start="939:29" pos:end="939:37">/* cpy */</comment>

                        <comment type="block" pos:start="941:25" pos:end="941:35">/* no-op */</comment>

                        <break pos:start="943:25" pos:end="943:30">break;</break>

                    <case pos:start="945:21" pos:end="945:27">case <expr pos:start="945:26" pos:end="945:26"><literal type="number" pos:start="945:26" pos:end="945:26">1</literal></expr>:</case> <comment type="block" pos:start="945:29" pos:end="945:37">/* abs */</comment>

                        <expr_stmt pos:start="947:25" pos:end="947:40"><expr pos:start="947:25" pos:end="947:39"><call pos:start="947:25" pos:end="947:39"><name pos:start="947:25" pos:end="947:35">gen_vfp_abs</name><argument_list pos:start="947:36" pos:end="947:39">(<argument pos:start="947:37" pos:end="947:38"><expr pos:start="947:37" pos:end="947:38"><name pos:start="947:37" pos:end="947:38">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="949:25" pos:end="949:30">break;</break>

                    <case pos:start="951:21" pos:end="951:27">case <expr pos:start="951:26" pos:end="951:26"><literal type="number" pos:start="951:26" pos:end="951:26">2</literal></expr>:</case> <comment type="block" pos:start="951:29" pos:end="951:37">/* neg */</comment>

                        <expr_stmt pos:start="953:25" pos:end="953:40"><expr pos:start="953:25" pos:end="953:39"><call pos:start="953:25" pos:end="953:39"><name pos:start="953:25" pos:end="953:35">gen_vfp_neg</name><argument_list pos:start="953:36" pos:end="953:39">(<argument pos:start="953:37" pos:end="953:38"><expr pos:start="953:37" pos:end="953:38"><name pos:start="953:37" pos:end="953:38">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="955:25" pos:end="955:30">break;</break>

                    <case pos:start="957:21" pos:end="957:27">case <expr pos:start="957:26" pos:end="957:26"><literal type="number" pos:start="957:26" pos:end="957:26">3</literal></expr>:</case> <comment type="block" pos:start="957:29" pos:end="957:38">/* sqrt */</comment>

                        <expr_stmt pos:start="959:25" pos:end="959:41"><expr pos:start="959:25" pos:end="959:40"><call pos:start="959:25" pos:end="959:40"><name pos:start="959:25" pos:end="959:36">gen_vfp_sqrt</name><argument_list pos:start="959:37" pos:end="959:40">(<argument pos:start="959:38" pos:end="959:39"><expr pos:start="959:38" pos:end="959:39"><name pos:start="959:38" pos:end="959:39">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="961:25" pos:end="961:30">break;</break>

                    <case pos:start="963:21" pos:end="963:27">case <expr pos:start="963:26" pos:end="963:26"><literal type="number" pos:start="963:26" pos:end="963:26">4</literal></expr>:</case> <comment type="block" pos:start="963:29" pos:end="963:47">/* vcvtb.f32.f16 */</comment>

                        <expr_stmt pos:start="965:25" pos:end="965:44"><expr pos:start="965:25" pos:end="965:43"><name pos:start="965:25" pos:end="965:27">tmp</name> <operator pos:start="965:29" pos:end="965:29">=</operator> <call pos:start="965:31" pos:end="965:43"><name pos:start="965:31" pos:end="965:41">gen_vfp_mrs</name><argument_list pos:start="965:42" pos:end="965:43">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="967:25" pos:end="967:53"><expr pos:start="967:25" pos:end="967:52"><call pos:start="967:25" pos:end="967:52"><name pos:start="967:25" pos:end="967:42">tcg_gen_ext16u_i32</name><argument_list pos:start="967:43" pos:end="967:52">(<argument pos:start="967:44" pos:end="967:46"><expr pos:start="967:44" pos:end="967:46"><name pos:start="967:44" pos:end="967:46">tmp</name></expr></argument>, <argument pos:start="967:49" pos:end="967:51"><expr pos:start="967:49" pos:end="967:51"><name pos:start="967:49" pos:end="967:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="969:25" pos:end="969:78"><expr pos:start="969:25" pos:end="969:77"><call pos:start="969:25" pos:end="969:77"><name pos:start="969:25" pos:end="969:54">gen_helper_vfp_fcvt_f16_to_f32</name><argument_list pos:start="969:55" pos:end="969:77">(<argument pos:start="969:56" pos:end="969:62"><expr pos:start="969:56" pos:end="969:62"><name pos:start="969:56" pos:end="969:62">cpu_F0s</name></expr></argument>, <argument pos:start="969:65" pos:end="969:67"><expr pos:start="969:65" pos:end="969:67"><name pos:start="969:65" pos:end="969:67">tmp</name></expr></argument>, <argument pos:start="969:70" pos:end="969:76"><expr pos:start="969:70" pos:end="969:76"><name pos:start="969:70" pos:end="969:76">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="971:25" pos:end="971:47"><expr pos:start="971:25" pos:end="971:46"><call pos:start="971:25" pos:end="971:46"><name pos:start="971:25" pos:end="971:41">tcg_temp_free_i32</name><argument_list pos:start="971:42" pos:end="971:46">(<argument pos:start="971:43" pos:end="971:45"><expr pos:start="971:43" pos:end="971:45"><name pos:start="971:43" pos:end="971:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="973:25" pos:end="973:30">break;</break>

                    <case pos:start="975:21" pos:end="975:27">case <expr pos:start="975:26" pos:end="975:26"><literal type="number" pos:start="975:26" pos:end="975:26">5</literal></expr>:</case> <comment type="block" pos:start="975:29" pos:end="975:47">/* vcvtt.f32.f16 */</comment>

                        <expr_stmt pos:start="977:25" pos:end="977:44"><expr pos:start="977:25" pos:end="977:43"><name pos:start="977:25" pos:end="977:27">tmp</name> <operator pos:start="977:29" pos:end="977:29">=</operator> <call pos:start="977:31" pos:end="977:43"><name pos:start="977:31" pos:end="977:41">gen_vfp_mrs</name><argument_list pos:start="977:42" pos:end="977:43">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="979:25" pos:end="979:55"><expr pos:start="979:25" pos:end="979:54"><call pos:start="979:25" pos:end="979:54"><name pos:start="979:25" pos:end="979:40">tcg_gen_shri_i32</name><argument_list pos:start="979:41" pos:end="979:54">(<argument pos:start="979:42" pos:end="979:44"><expr pos:start="979:42" pos:end="979:44"><name pos:start="979:42" pos:end="979:44">tmp</name></expr></argument>, <argument pos:start="979:47" pos:end="979:49"><expr pos:start="979:47" pos:end="979:49"><name pos:start="979:47" pos:end="979:49">tmp</name></expr></argument>, <argument pos:start="979:52" pos:end="979:53"><expr pos:start="979:52" pos:end="979:53"><literal type="number" pos:start="979:52" pos:end="979:53">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="981:25" pos:end="981:78"><expr pos:start="981:25" pos:end="981:77"><call pos:start="981:25" pos:end="981:77"><name pos:start="981:25" pos:end="981:54">gen_helper_vfp_fcvt_f16_to_f32</name><argument_list pos:start="981:55" pos:end="981:77">(<argument pos:start="981:56" pos:end="981:62"><expr pos:start="981:56" pos:end="981:62"><name pos:start="981:56" pos:end="981:62">cpu_F0s</name></expr></argument>, <argument pos:start="981:65" pos:end="981:67"><expr pos:start="981:65" pos:end="981:67"><name pos:start="981:65" pos:end="981:67">tmp</name></expr></argument>, <argument pos:start="981:70" pos:end="981:76"><expr pos:start="981:70" pos:end="981:76"><name pos:start="981:70" pos:end="981:76">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="983:25" pos:end="983:47"><expr pos:start="983:25" pos:end="983:46"><call pos:start="983:25" pos:end="983:46"><name pos:start="983:25" pos:end="983:41">tcg_temp_free_i32</name><argument_list pos:start="983:42" pos:end="983:46">(<argument pos:start="983:43" pos:end="983:45"><expr pos:start="983:43" pos:end="983:45"><name pos:start="983:43" pos:end="983:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="985:25" pos:end="985:30">break;</break>

                    <case pos:start="987:21" pos:end="987:27">case <expr pos:start="987:26" pos:end="987:26"><literal type="number" pos:start="987:26" pos:end="987:26">6</literal></expr>:</case> <comment type="block" pos:start="987:29" pos:end="987:47">/* vcvtb.f16.f32 */</comment>

                        <expr_stmt pos:start="989:25" pos:end="989:49"><expr pos:start="989:25" pos:end="989:48"><name pos:start="989:25" pos:end="989:27">tmp</name> <operator pos:start="989:29" pos:end="989:29">=</operator> <call pos:start="989:31" pos:end="989:48"><name pos:start="989:31" pos:end="989:46">tcg_temp_new_i32</name><argument_list pos:start="989:47" pos:end="989:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="991:25" pos:end="991:78"><expr pos:start="991:25" pos:end="991:77"><call pos:start="991:25" pos:end="991:77"><name pos:start="991:25" pos:end="991:54">gen_helper_vfp_fcvt_f32_to_f16</name><argument_list pos:start="991:55" pos:end="991:77">(<argument pos:start="991:56" pos:end="991:58"><expr pos:start="991:56" pos:end="991:58"><name pos:start="991:56" pos:end="991:58">tmp</name></expr></argument>, <argument pos:start="991:61" pos:end="991:67"><expr pos:start="991:61" pos:end="991:67"><name pos:start="991:61" pos:end="991:67">cpu_F0s</name></expr></argument>, <argument pos:start="991:70" pos:end="991:76"><expr pos:start="991:70" pos:end="991:76"><name pos:start="991:70" pos:end="991:76">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="993:25" pos:end="993:47"><expr pos:start="993:25" pos:end="993:46"><call pos:start="993:25" pos:end="993:46"><name pos:start="993:25" pos:end="993:39">gen_mov_F0_vreg</name><argument_list pos:start="993:40" pos:end="993:46">(<argument pos:start="993:41" pos:end="993:41"><expr pos:start="993:41" pos:end="993:41"><literal type="number" pos:start="993:41" pos:end="993:41">0</literal></expr></argument>, <argument pos:start="993:44" pos:end="993:45"><expr pos:start="993:44" pos:end="993:45"><name pos:start="993:44" pos:end="993:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="995:25" pos:end="995:45"><expr pos:start="995:25" pos:end="995:44"><name pos:start="995:25" pos:end="995:28">tmp2</name> <operator pos:start="995:30" pos:end="995:30">=</operator> <call pos:start="995:32" pos:end="995:44"><name pos:start="995:32" pos:end="995:42">gen_vfp_mrs</name><argument_list pos:start="995:43" pos:end="995:44">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="997:25" pos:end="997:65"><expr pos:start="997:25" pos:end="997:64"><call pos:start="997:25" pos:end="997:64"><name pos:start="997:25" pos:end="997:40">tcg_gen_andi_i32</name><argument_list pos:start="997:41" pos:end="997:64">(<argument pos:start="997:42" pos:end="997:45"><expr pos:start="997:42" pos:end="997:45"><name pos:start="997:42" pos:end="997:45">tmp2</name></expr></argument>, <argument pos:start="997:48" pos:end="997:51"><expr pos:start="997:48" pos:end="997:51"><name pos:start="997:48" pos:end="997:51">tmp2</name></expr></argument>, <argument pos:start="997:54" pos:end="997:63"><expr pos:start="997:54" pos:end="997:63"><literal type="number" pos:start="997:54" pos:end="997:63">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="999:25" pos:end="999:55"><expr pos:start="999:25" pos:end="999:54"><call pos:start="999:25" pos:end="999:54"><name pos:start="999:25" pos:end="999:38">tcg_gen_or_i32</name><argument_list pos:start="999:39" pos:end="999:54">(<argument pos:start="999:40" pos:end="999:42"><expr pos:start="999:40" pos:end="999:42"><name pos:start="999:40" pos:end="999:42">tmp</name></expr></argument>, <argument pos:start="999:45" pos:end="999:47"><expr pos:start="999:45" pos:end="999:47"><name pos:start="999:45" pos:end="999:47">tmp</name></expr></argument>, <argument pos:start="999:50" pos:end="999:53"><expr pos:start="999:50" pos:end="999:53"><name pos:start="999:50" pos:end="999:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1001:25" pos:end="1001:48"><expr pos:start="1001:25" pos:end="1001:47"><call pos:start="1001:25" pos:end="1001:47"><name pos:start="1001:25" pos:end="1001:41">tcg_temp_free_i32</name><argument_list pos:start="1001:42" pos:end="1001:47">(<argument pos:start="1001:43" pos:end="1001:46"><expr pos:start="1001:43" pos:end="1001:46"><name pos:start="1001:43" pos:end="1001:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1003:25" pos:end="1003:41"><expr pos:start="1003:25" pos:end="1003:40"><call pos:start="1003:25" pos:end="1003:40"><name pos:start="1003:25" pos:end="1003:35">gen_vfp_msr</name><argument_list pos:start="1003:36" pos:end="1003:40">(<argument pos:start="1003:37" pos:end="1003:39"><expr pos:start="1003:37" pos:end="1003:39"><name pos:start="1003:37" pos:end="1003:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1005:25" pos:end="1005:30">break;</break>

                    <case pos:start="1007:21" pos:end="1007:27">case <expr pos:start="1007:26" pos:end="1007:26"><literal type="number" pos:start="1007:26" pos:end="1007:26">7</literal></expr>:</case> <comment type="block" pos:start="1007:29" pos:end="1007:47">/* vcvtt.f16.f32 */</comment>

                        <expr_stmt pos:start="1009:25" pos:end="1009:49"><expr pos:start="1009:25" pos:end="1009:48"><name pos:start="1009:25" pos:end="1009:27">tmp</name> <operator pos:start="1009:29" pos:end="1009:29">=</operator> <call pos:start="1009:31" pos:end="1009:48"><name pos:start="1009:31" pos:end="1009:46">tcg_temp_new_i32</name><argument_list pos:start="1009:47" pos:end="1009:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1011:25" pos:end="1011:78"><expr pos:start="1011:25" pos:end="1011:77"><call pos:start="1011:25" pos:end="1011:77"><name pos:start="1011:25" pos:end="1011:54">gen_helper_vfp_fcvt_f32_to_f16</name><argument_list pos:start="1011:55" pos:end="1011:77">(<argument pos:start="1011:56" pos:end="1011:58"><expr pos:start="1011:56" pos:end="1011:58"><name pos:start="1011:56" pos:end="1011:58">tmp</name></expr></argument>, <argument pos:start="1011:61" pos:end="1011:67"><expr pos:start="1011:61" pos:end="1011:67"><name pos:start="1011:61" pos:end="1011:67">cpu_F0s</name></expr></argument>, <argument pos:start="1011:70" pos:end="1011:76"><expr pos:start="1011:70" pos:end="1011:76"><name pos:start="1011:70" pos:end="1011:76">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1013:25" pos:end="1013:55"><expr pos:start="1013:25" pos:end="1013:54"><call pos:start="1013:25" pos:end="1013:54"><name pos:start="1013:25" pos:end="1013:40">tcg_gen_shli_i32</name><argument_list pos:start="1013:41" pos:end="1013:54">(<argument pos:start="1013:42" pos:end="1013:44"><expr pos:start="1013:42" pos:end="1013:44"><name pos:start="1013:42" pos:end="1013:44">tmp</name></expr></argument>, <argument pos:start="1013:47" pos:end="1013:49"><expr pos:start="1013:47" pos:end="1013:49"><name pos:start="1013:47" pos:end="1013:49">tmp</name></expr></argument>, <argument pos:start="1013:52" pos:end="1013:53"><expr pos:start="1013:52" pos:end="1013:53"><literal type="number" pos:start="1013:52" pos:end="1013:53">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1015:25" pos:end="1015:47"><expr pos:start="1015:25" pos:end="1015:46"><call pos:start="1015:25" pos:end="1015:46"><name pos:start="1015:25" pos:end="1015:39">gen_mov_F0_vreg</name><argument_list pos:start="1015:40" pos:end="1015:46">(<argument pos:start="1015:41" pos:end="1015:41"><expr pos:start="1015:41" pos:end="1015:41"><literal type="number" pos:start="1015:41" pos:end="1015:41">0</literal></expr></argument>, <argument pos:start="1015:44" pos:end="1015:45"><expr pos:start="1015:44" pos:end="1015:45"><name pos:start="1015:44" pos:end="1015:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1017:25" pos:end="1017:45"><expr pos:start="1017:25" pos:end="1017:44"><name pos:start="1017:25" pos:end="1017:28">tmp2</name> <operator pos:start="1017:30" pos:end="1017:30">=</operator> <call pos:start="1017:32" pos:end="1017:44"><name pos:start="1017:32" pos:end="1017:42">gen_vfp_mrs</name><argument_list pos:start="1017:43" pos:end="1017:44">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1019:25" pos:end="1019:55"><expr pos:start="1019:25" pos:end="1019:54"><call pos:start="1019:25" pos:end="1019:54"><name pos:start="1019:25" pos:end="1019:42">tcg_gen_ext16u_i32</name><argument_list pos:start="1019:43" pos:end="1019:54">(<argument pos:start="1019:44" pos:end="1019:47"><expr pos:start="1019:44" pos:end="1019:47"><name pos:start="1019:44" pos:end="1019:47">tmp2</name></expr></argument>, <argument pos:start="1019:50" pos:end="1019:53"><expr pos:start="1019:50" pos:end="1019:53"><name pos:start="1019:50" pos:end="1019:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1021:25" pos:end="1021:55"><expr pos:start="1021:25" pos:end="1021:54"><call pos:start="1021:25" pos:end="1021:54"><name pos:start="1021:25" pos:end="1021:38">tcg_gen_or_i32</name><argument_list pos:start="1021:39" pos:end="1021:54">(<argument pos:start="1021:40" pos:end="1021:42"><expr pos:start="1021:40" pos:end="1021:42"><name pos:start="1021:40" pos:end="1021:42">tmp</name></expr></argument>, <argument pos:start="1021:45" pos:end="1021:47"><expr pos:start="1021:45" pos:end="1021:47"><name pos:start="1021:45" pos:end="1021:47">tmp</name></expr></argument>, <argument pos:start="1021:50" pos:end="1021:53"><expr pos:start="1021:50" pos:end="1021:53"><name pos:start="1021:50" pos:end="1021:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1023:25" pos:end="1023:48"><expr pos:start="1023:25" pos:end="1023:47"><call pos:start="1023:25" pos:end="1023:47"><name pos:start="1023:25" pos:end="1023:41">tcg_temp_free_i32</name><argument_list pos:start="1023:42" pos:end="1023:47">(<argument pos:start="1023:43" pos:end="1023:46"><expr pos:start="1023:43" pos:end="1023:46"><name pos:start="1023:43" pos:end="1023:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1025:25" pos:end="1025:41"><expr pos:start="1025:25" pos:end="1025:40"><call pos:start="1025:25" pos:end="1025:40"><name pos:start="1025:25" pos:end="1025:35">gen_vfp_msr</name><argument_list pos:start="1025:36" pos:end="1025:40">(<argument pos:start="1025:37" pos:end="1025:39"><expr pos:start="1025:37" pos:end="1025:39"><name pos:start="1025:37" pos:end="1025:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1027:25" pos:end="1027:30">break;</break>

                    <case pos:start="1029:21" pos:end="1029:27">case <expr pos:start="1029:26" pos:end="1029:26"><literal type="number" pos:start="1029:26" pos:end="1029:26">8</literal></expr>:</case> <comment type="block" pos:start="1029:29" pos:end="1029:37">/* cmp */</comment>

                        <expr_stmt pos:start="1031:25" pos:end="1031:40"><expr pos:start="1031:25" pos:end="1031:39"><call pos:start="1031:25" pos:end="1031:39"><name pos:start="1031:25" pos:end="1031:35">gen_vfp_cmp</name><argument_list pos:start="1031:36" pos:end="1031:39">(<argument pos:start="1031:37" pos:end="1031:38"><expr pos:start="1031:37" pos:end="1031:38"><name pos:start="1031:37" pos:end="1031:38">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1033:25" pos:end="1033:30">break;</break>

                    <case pos:start="1035:21" pos:end="1035:27">case <expr pos:start="1035:26" pos:end="1035:26"><literal type="number" pos:start="1035:26" pos:end="1035:26">9</literal></expr>:</case> <comment type="block" pos:start="1035:29" pos:end="1035:38">/* cmpe */</comment>

                        <expr_stmt pos:start="1037:25" pos:end="1037:41"><expr pos:start="1037:25" pos:end="1037:40"><call pos:start="1037:25" pos:end="1037:40"><name pos:start="1037:25" pos:end="1037:36">gen_vfp_cmpe</name><argument_list pos:start="1037:37" pos:end="1037:40">(<argument pos:start="1037:38" pos:end="1037:39"><expr pos:start="1037:38" pos:end="1037:39"><name pos:start="1037:38" pos:end="1037:39">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1039:25" pos:end="1039:30">break;</break>

                    <case pos:start="1041:21" pos:end="1041:28">case <expr pos:start="1041:26" pos:end="1041:27"><literal type="number" pos:start="1041:26" pos:end="1041:27">10</literal></expr>:</case> <comment type="block" pos:start="1041:30" pos:end="1041:39">/* cmpz */</comment>

                        <expr_stmt pos:start="1043:25" pos:end="1043:40"><expr pos:start="1043:25" pos:end="1043:39"><call pos:start="1043:25" pos:end="1043:39"><name pos:start="1043:25" pos:end="1043:35">gen_vfp_cmp</name><argument_list pos:start="1043:36" pos:end="1043:39">(<argument pos:start="1043:37" pos:end="1043:38"><expr pos:start="1043:37" pos:end="1043:38"><name pos:start="1043:37" pos:end="1043:38">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1045:25" pos:end="1045:30">break;</break>

                    <case pos:start="1047:21" pos:end="1047:28">case <expr pos:start="1047:26" pos:end="1047:27"><literal type="number" pos:start="1047:26" pos:end="1047:27">11</literal></expr>:</case> <comment type="block" pos:start="1047:30" pos:end="1047:40">/* cmpez */</comment>

                        <expr_stmt pos:start="1049:25" pos:end="1049:43"><expr pos:start="1049:25" pos:end="1049:42"><call pos:start="1049:25" pos:end="1049:42"><name pos:start="1049:25" pos:end="1049:38">gen_vfp_F1_ld0</name><argument_list pos:start="1049:39" pos:end="1049:42">(<argument pos:start="1049:40" pos:end="1049:41"><expr pos:start="1049:40" pos:end="1049:41"><name pos:start="1049:40" pos:end="1049:41">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1051:25" pos:end="1051:41"><expr pos:start="1051:25" pos:end="1051:40"><call pos:start="1051:25" pos:end="1051:40"><name pos:start="1051:25" pos:end="1051:36">gen_vfp_cmpe</name><argument_list pos:start="1051:37" pos:end="1051:40">(<argument pos:start="1051:38" pos:end="1051:39"><expr pos:start="1051:38" pos:end="1051:39"><name pos:start="1051:38" pos:end="1051:39">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1053:25" pos:end="1053:30">break;</break>

                    <case pos:start="1055:21" pos:end="1055:28">case <expr pos:start="1055:26" pos:end="1055:27"><literal type="number" pos:start="1055:26" pos:end="1055:27">15</literal></expr>:</case> <comment type="block" pos:start="1055:30" pos:end="1055:61">/* single&lt;-&gt;double conversion */</comment>

                        <if_stmt pos:start="1057:25" pos:end="1063:77"><if pos:start="1057:25" pos:end="1059:77">if <condition pos:start="1057:28" pos:end="1057:31">(<expr pos:start="1057:29" pos:end="1057:30"><name pos:start="1057:29" pos:end="1057:30">dp</name></expr>)</condition><block type="pseudo" pos:start="1059:29" pos:end="1059:77"><block_content pos:start="1059:29" pos:end="1059:77">

                            <expr_stmt pos:start="1059:29" pos:end="1059:77"><expr pos:start="1059:29" pos:end="1059:76"><call pos:start="1059:29" pos:end="1059:76"><name pos:start="1059:29" pos:end="1059:49">gen_helper_vfp_fcvtsd</name><argument_list pos:start="1059:50" pos:end="1059:76">(<argument pos:start="1059:51" pos:end="1059:57"><expr pos:start="1059:51" pos:end="1059:57"><name pos:start="1059:51" pos:end="1059:57">cpu_F0s</name></expr></argument>, <argument pos:start="1059:60" pos:end="1059:66"><expr pos:start="1059:60" pos:end="1059:66"><name pos:start="1059:60" pos:end="1059:66">cpu_F0d</name></expr></argument>, <argument pos:start="1059:69" pos:end="1059:75"><expr pos:start="1059:69" pos:end="1059:75"><name pos:start="1059:69" pos:end="1059:75">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1061:25" pos:end="1063:77">else<block type="pseudo" pos:start="1063:29" pos:end="1063:77"><block_content pos:start="1063:29" pos:end="1063:77">

                            <expr_stmt pos:start="1063:29" pos:end="1063:77"><expr pos:start="1063:29" pos:end="1063:76"><call pos:start="1063:29" pos:end="1063:76"><name pos:start="1063:29" pos:end="1063:49">gen_helper_vfp_fcvtds</name><argument_list pos:start="1063:50" pos:end="1063:76">(<argument pos:start="1063:51" pos:end="1063:57"><expr pos:start="1063:51" pos:end="1063:57"><name pos:start="1063:51" pos:end="1063:57">cpu_F0d</name></expr></argument>, <argument pos:start="1063:60" pos:end="1063:66"><expr pos:start="1063:60" pos:end="1063:66"><name pos:start="1063:60" pos:end="1063:66">cpu_F0s</name></expr></argument>, <argument pos:start="1063:69" pos:end="1063:75"><expr pos:start="1063:69" pos:end="1063:75"><name pos:start="1063:69" pos:end="1063:75">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <break pos:start="1065:25" pos:end="1065:30">break;</break>

                    <case pos:start="1067:21" pos:end="1067:28">case <expr pos:start="1067:26" pos:end="1067:27"><literal type="number" pos:start="1067:26" pos:end="1067:27">16</literal></expr>:</case> <comment type="block" pos:start="1067:30" pos:end="1067:40">/* fuito */</comment>

                        <expr_stmt pos:start="1069:25" pos:end="1069:44"><expr pos:start="1069:25" pos:end="1069:43"><call pos:start="1069:25" pos:end="1069:43"><name pos:start="1069:25" pos:end="1069:36">gen_vfp_uito</name><argument_list pos:start="1069:37" pos:end="1069:43">(<argument pos:start="1069:38" pos:end="1069:39"><expr pos:start="1069:38" pos:end="1069:39"><name pos:start="1069:38" pos:end="1069:39">dp</name></expr></argument>, <argument pos:start="1069:42" pos:end="1069:42"><expr pos:start="1069:42" pos:end="1069:42"><literal type="number" pos:start="1069:42" pos:end="1069:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1071:25" pos:end="1071:30">break;</break>

                    <case pos:start="1073:21" pos:end="1073:28">case <expr pos:start="1073:26" pos:end="1073:27"><literal type="number" pos:start="1073:26" pos:end="1073:27">17</literal></expr>:</case> <comment type="block" pos:start="1073:30" pos:end="1073:40">/* fsito */</comment>

                        <expr_stmt pos:start="1075:25" pos:end="1075:44"><expr pos:start="1075:25" pos:end="1075:43"><call pos:start="1075:25" pos:end="1075:43"><name pos:start="1075:25" pos:end="1075:36">gen_vfp_sito</name><argument_list pos:start="1075:37" pos:end="1075:43">(<argument pos:start="1075:38" pos:end="1075:39"><expr pos:start="1075:38" pos:end="1075:39"><name pos:start="1075:38" pos:end="1075:39">dp</name></expr></argument>, <argument pos:start="1075:42" pos:end="1075:42"><expr pos:start="1075:42" pos:end="1075:42"><literal type="number" pos:start="1075:42" pos:end="1075:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1077:25" pos:end="1077:30">break;</break>

                    <case pos:start="1079:21" pos:end="1079:28">case <expr pos:start="1079:26" pos:end="1079:27"><literal type="number" pos:start="1079:26" pos:end="1079:27">20</literal></expr>:</case> <comment type="block" pos:start="1079:30" pos:end="1079:40">/* fshto */</comment>

                        <if_stmt pos:start="1081:25" pos:end="1083:35"><if pos:start="1081:25" pos:end="1083:35">if <condition pos:start="1081:28" pos:end="1081:64">(<expr pos:start="1081:29" pos:end="1081:63"><operator pos:start="1081:29" pos:end="1081:29">!</operator><call pos:start="1081:30" pos:end="1081:63"><name pos:start="1081:30" pos:end="1081:40">arm_feature</name><argument_list pos:start="1081:41" pos:end="1081:63">(<argument pos:start="1081:42" pos:end="1081:44"><expr pos:start="1081:42" pos:end="1081:44"><name pos:start="1081:42" pos:end="1081:44">env</name></expr></argument>, <argument pos:start="1081:47" pos:end="1081:62"><expr pos:start="1081:47" pos:end="1081:62"><name pos:start="1081:47" pos:end="1081:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1083:27" pos:end="1083:35"><block_content pos:start="1083:27" pos:end="1083:35">

                          <return pos:start="1083:27" pos:end="1083:35">return <expr pos:start="1083:34" pos:end="1083:34"><literal type="number" pos:start="1083:34" pos:end="1083:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1085:25" pos:end="1085:53"><expr pos:start="1085:25" pos:end="1085:52"><call pos:start="1085:25" pos:end="1085:52"><name pos:start="1085:25" pos:end="1085:36">gen_vfp_shto</name><argument_list pos:start="1085:37" pos:end="1085:52">(<argument pos:start="1085:38" pos:end="1085:39"><expr pos:start="1085:38" pos:end="1085:39"><name pos:start="1085:38" pos:end="1085:39">dp</name></expr></argument>, <argument pos:start="1085:42" pos:end="1085:48"><expr pos:start="1085:42" pos:end="1085:48"><literal type="number" pos:start="1085:42" pos:end="1085:45">16</literal> <operator pos:start="1085:45" pos:end="1085:45">-</operator> <name pos:start="1085:47" pos:end="1085:48">rm</name></expr></argument>, <argument pos:start="1085:51" pos:end="1085:51"><expr pos:start="1085:51" pos:end="1085:51"><literal type="number" pos:start="1085:51" pos:end="1085:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1087:25" pos:end="1087:30">break;</break>

                    <case pos:start="1089:21" pos:end="1089:28">case <expr pos:start="1089:26" pos:end="1089:27"><literal type="number" pos:start="1089:26" pos:end="1089:27">21</literal></expr>:</case> <comment type="block" pos:start="1089:30" pos:end="1089:40">/* fslto */</comment>

                        <if_stmt pos:start="1091:25" pos:end="1093:35"><if pos:start="1091:25" pos:end="1093:35">if <condition pos:start="1091:28" pos:end="1091:64">(<expr pos:start="1091:29" pos:end="1091:63"><operator pos:start="1091:29" pos:end="1091:29">!</operator><call pos:start="1091:30" pos:end="1091:63"><name pos:start="1091:30" pos:end="1091:40">arm_feature</name><argument_list pos:start="1091:41" pos:end="1091:63">(<argument pos:start="1091:42" pos:end="1091:44"><expr pos:start="1091:42" pos:end="1091:44"><name pos:start="1091:42" pos:end="1091:44">env</name></expr></argument>, <argument pos:start="1091:47" pos:end="1091:62"><expr pos:start="1091:47" pos:end="1091:62"><name pos:start="1091:47" pos:end="1091:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1093:27" pos:end="1093:35"><block_content pos:start="1093:27" pos:end="1093:35">

                          <return pos:start="1093:27" pos:end="1093:35">return <expr pos:start="1093:34" pos:end="1093:34"><literal type="number" pos:start="1093:34" pos:end="1093:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1095:25" pos:end="1095:53"><expr pos:start="1095:25" pos:end="1095:52"><call pos:start="1095:25" pos:end="1095:52"><name pos:start="1095:25" pos:end="1095:36">gen_vfp_slto</name><argument_list pos:start="1095:37" pos:end="1095:52">(<argument pos:start="1095:38" pos:end="1095:39"><expr pos:start="1095:38" pos:end="1095:39"><name pos:start="1095:38" pos:end="1095:39">dp</name></expr></argument>, <argument pos:start="1095:42" pos:end="1095:48"><expr pos:start="1095:42" pos:end="1095:48"><literal type="number" pos:start="1095:42" pos:end="1095:45">32</literal> <operator pos:start="1095:45" pos:end="1095:45">-</operator> <name pos:start="1095:47" pos:end="1095:48">rm</name></expr></argument>, <argument pos:start="1095:51" pos:end="1095:51"><expr pos:start="1095:51" pos:end="1095:51"><literal type="number" pos:start="1095:51" pos:end="1095:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1097:25" pos:end="1097:30">break;</break>

                    <case pos:start="1099:21" pos:end="1099:28">case <expr pos:start="1099:26" pos:end="1099:27"><literal type="number" pos:start="1099:26" pos:end="1099:27">22</literal></expr>:</case> <comment type="block" pos:start="1099:30" pos:end="1099:40">/* fuhto */</comment>

                        <if_stmt pos:start="1101:25" pos:end="1103:35"><if pos:start="1101:25" pos:end="1103:35">if <condition pos:start="1101:28" pos:end="1101:64">(<expr pos:start="1101:29" pos:end="1101:63"><operator pos:start="1101:29" pos:end="1101:29">!</operator><call pos:start="1101:30" pos:end="1101:63"><name pos:start="1101:30" pos:end="1101:40">arm_feature</name><argument_list pos:start="1101:41" pos:end="1101:63">(<argument pos:start="1101:42" pos:end="1101:44"><expr pos:start="1101:42" pos:end="1101:44"><name pos:start="1101:42" pos:end="1101:44">env</name></expr></argument>, <argument pos:start="1101:47" pos:end="1101:62"><expr pos:start="1101:47" pos:end="1101:62"><name pos:start="1101:47" pos:end="1101:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1103:27" pos:end="1103:35"><block_content pos:start="1103:27" pos:end="1103:35">

                          <return pos:start="1103:27" pos:end="1103:35">return <expr pos:start="1103:34" pos:end="1103:34"><literal type="number" pos:start="1103:34" pos:end="1103:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1105:25" pos:end="1105:53"><expr pos:start="1105:25" pos:end="1105:52"><call pos:start="1105:25" pos:end="1105:52"><name pos:start="1105:25" pos:end="1105:36">gen_vfp_uhto</name><argument_list pos:start="1105:37" pos:end="1105:52">(<argument pos:start="1105:38" pos:end="1105:39"><expr pos:start="1105:38" pos:end="1105:39"><name pos:start="1105:38" pos:end="1105:39">dp</name></expr></argument>, <argument pos:start="1105:42" pos:end="1105:48"><expr pos:start="1105:42" pos:end="1105:48"><literal type="number" pos:start="1105:42" pos:end="1105:45">16</literal> <operator pos:start="1105:45" pos:end="1105:45">-</operator> <name pos:start="1105:47" pos:end="1105:48">rm</name></expr></argument>, <argument pos:start="1105:51" pos:end="1105:51"><expr pos:start="1105:51" pos:end="1105:51"><literal type="number" pos:start="1105:51" pos:end="1105:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1107:25" pos:end="1107:30">break;</break>

                    <case pos:start="1109:21" pos:end="1109:28">case <expr pos:start="1109:26" pos:end="1109:27"><literal type="number" pos:start="1109:26" pos:end="1109:27">23</literal></expr>:</case> <comment type="block" pos:start="1109:30" pos:end="1109:40">/* fulto */</comment>

                        <if_stmt pos:start="1111:25" pos:end="1113:35"><if pos:start="1111:25" pos:end="1113:35">if <condition pos:start="1111:28" pos:end="1111:64">(<expr pos:start="1111:29" pos:end="1111:63"><operator pos:start="1111:29" pos:end="1111:29">!</operator><call pos:start="1111:30" pos:end="1111:63"><name pos:start="1111:30" pos:end="1111:40">arm_feature</name><argument_list pos:start="1111:41" pos:end="1111:63">(<argument pos:start="1111:42" pos:end="1111:44"><expr pos:start="1111:42" pos:end="1111:44"><name pos:start="1111:42" pos:end="1111:44">env</name></expr></argument>, <argument pos:start="1111:47" pos:end="1111:62"><expr pos:start="1111:47" pos:end="1111:62"><name pos:start="1111:47" pos:end="1111:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1113:27" pos:end="1113:35"><block_content pos:start="1113:27" pos:end="1113:35">

                          <return pos:start="1113:27" pos:end="1113:35">return <expr pos:start="1113:34" pos:end="1113:34"><literal type="number" pos:start="1113:34" pos:end="1113:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1115:25" pos:end="1115:53"><expr pos:start="1115:25" pos:end="1115:52"><call pos:start="1115:25" pos:end="1115:52"><name pos:start="1115:25" pos:end="1115:36">gen_vfp_ulto</name><argument_list pos:start="1115:37" pos:end="1115:52">(<argument pos:start="1115:38" pos:end="1115:39"><expr pos:start="1115:38" pos:end="1115:39"><name pos:start="1115:38" pos:end="1115:39">dp</name></expr></argument>, <argument pos:start="1115:42" pos:end="1115:48"><expr pos:start="1115:42" pos:end="1115:48"><literal type="number" pos:start="1115:42" pos:end="1115:45">32</literal> <operator pos:start="1115:45" pos:end="1115:45">-</operator> <name pos:start="1115:47" pos:end="1115:48">rm</name></expr></argument>, <argument pos:start="1115:51" pos:end="1115:51"><expr pos:start="1115:51" pos:end="1115:51"><literal type="number" pos:start="1115:51" pos:end="1115:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1117:25" pos:end="1117:30">break;</break>

                    <case pos:start="1119:21" pos:end="1119:28">case <expr pos:start="1119:26" pos:end="1119:27"><literal type="number" pos:start="1119:26" pos:end="1119:27">24</literal></expr>:</case> <comment type="block" pos:start="1119:30" pos:end="1119:40">/* ftoui */</comment>

                        <expr_stmt pos:start="1121:25" pos:end="1121:44"><expr pos:start="1121:25" pos:end="1121:43"><call pos:start="1121:25" pos:end="1121:43"><name pos:start="1121:25" pos:end="1121:36">gen_vfp_toui</name><argument_list pos:start="1121:37" pos:end="1121:43">(<argument pos:start="1121:38" pos:end="1121:39"><expr pos:start="1121:38" pos:end="1121:39"><name pos:start="1121:38" pos:end="1121:39">dp</name></expr></argument>, <argument pos:start="1121:42" pos:end="1121:42"><expr pos:start="1121:42" pos:end="1121:42"><literal type="number" pos:start="1121:42" pos:end="1121:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1123:25" pos:end="1123:30">break;</break>

                    <case pos:start="1125:21" pos:end="1125:28">case <expr pos:start="1125:26" pos:end="1125:27"><literal type="number" pos:start="1125:26" pos:end="1125:27">25</literal></expr>:</case> <comment type="block" pos:start="1125:30" pos:end="1125:41">/* ftouiz */</comment>

                        <expr_stmt pos:start="1127:25" pos:end="1127:45"><expr pos:start="1127:25" pos:end="1127:44"><call pos:start="1127:25" pos:end="1127:44"><name pos:start="1127:25" pos:end="1127:37">gen_vfp_touiz</name><argument_list pos:start="1127:38" pos:end="1127:44">(<argument pos:start="1127:39" pos:end="1127:40"><expr pos:start="1127:39" pos:end="1127:40"><name pos:start="1127:39" pos:end="1127:40">dp</name></expr></argument>, <argument pos:start="1127:43" pos:end="1127:43"><expr pos:start="1127:43" pos:end="1127:43"><literal type="number" pos:start="1127:43" pos:end="1127:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1129:25" pos:end="1129:30">break;</break>

                    <case pos:start="1131:21" pos:end="1131:28">case <expr pos:start="1131:26" pos:end="1131:27"><literal type="number" pos:start="1131:26" pos:end="1131:27">26</literal></expr>:</case> <comment type="block" pos:start="1131:30" pos:end="1131:40">/* ftosi */</comment>

                        <expr_stmt pos:start="1133:25" pos:end="1133:44"><expr pos:start="1133:25" pos:end="1133:43"><call pos:start="1133:25" pos:end="1133:43"><name pos:start="1133:25" pos:end="1133:36">gen_vfp_tosi</name><argument_list pos:start="1133:37" pos:end="1133:43">(<argument pos:start="1133:38" pos:end="1133:39"><expr pos:start="1133:38" pos:end="1133:39"><name pos:start="1133:38" pos:end="1133:39">dp</name></expr></argument>, <argument pos:start="1133:42" pos:end="1133:42"><expr pos:start="1133:42" pos:end="1133:42"><literal type="number" pos:start="1133:42" pos:end="1133:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1135:25" pos:end="1135:30">break;</break>

                    <case pos:start="1137:21" pos:end="1137:28">case <expr pos:start="1137:26" pos:end="1137:27"><literal type="number" pos:start="1137:26" pos:end="1137:27">27</literal></expr>:</case> <comment type="block" pos:start="1137:30" pos:end="1137:41">/* ftosiz */</comment>

                        <expr_stmt pos:start="1139:25" pos:end="1139:45"><expr pos:start="1139:25" pos:end="1139:44"><call pos:start="1139:25" pos:end="1139:44"><name pos:start="1139:25" pos:end="1139:37">gen_vfp_tosiz</name><argument_list pos:start="1139:38" pos:end="1139:44">(<argument pos:start="1139:39" pos:end="1139:40"><expr pos:start="1139:39" pos:end="1139:40"><name pos:start="1139:39" pos:end="1139:40">dp</name></expr></argument>, <argument pos:start="1139:43" pos:end="1139:43"><expr pos:start="1139:43" pos:end="1139:43"><literal type="number" pos:start="1139:43" pos:end="1139:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1141:25" pos:end="1141:30">break;</break>

                    <case pos:start="1143:21" pos:end="1143:28">case <expr pos:start="1143:26" pos:end="1143:27"><literal type="number" pos:start="1143:26" pos:end="1143:27">28</literal></expr>:</case> <comment type="block" pos:start="1143:30" pos:end="1143:40">/* ftosh */</comment>

                        <if_stmt pos:start="1145:25" pos:end="1147:35"><if pos:start="1145:25" pos:end="1147:35">if <condition pos:start="1145:28" pos:end="1145:64">(<expr pos:start="1145:29" pos:end="1145:63"><operator pos:start="1145:29" pos:end="1145:29">!</operator><call pos:start="1145:30" pos:end="1145:63"><name pos:start="1145:30" pos:end="1145:40">arm_feature</name><argument_list pos:start="1145:41" pos:end="1145:63">(<argument pos:start="1145:42" pos:end="1145:44"><expr pos:start="1145:42" pos:end="1145:44"><name pos:start="1145:42" pos:end="1145:44">env</name></expr></argument>, <argument pos:start="1145:47" pos:end="1145:62"><expr pos:start="1145:47" pos:end="1145:62"><name pos:start="1145:47" pos:end="1145:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1147:27" pos:end="1147:35"><block_content pos:start="1147:27" pos:end="1147:35">

                          <return pos:start="1147:27" pos:end="1147:35">return <expr pos:start="1147:34" pos:end="1147:34"><literal type="number" pos:start="1147:34" pos:end="1147:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1149:25" pos:end="1149:53"><expr pos:start="1149:25" pos:end="1149:52"><call pos:start="1149:25" pos:end="1149:52"><name pos:start="1149:25" pos:end="1149:36">gen_vfp_tosh</name><argument_list pos:start="1149:37" pos:end="1149:52">(<argument pos:start="1149:38" pos:end="1149:39"><expr pos:start="1149:38" pos:end="1149:39"><name pos:start="1149:38" pos:end="1149:39">dp</name></expr></argument>, <argument pos:start="1149:42" pos:end="1149:48"><expr pos:start="1149:42" pos:end="1149:48"><literal type="number" pos:start="1149:42" pos:end="1149:45">16</literal> <operator pos:start="1149:45" pos:end="1149:45">-</operator> <name pos:start="1149:47" pos:end="1149:48">rm</name></expr></argument>, <argument pos:start="1149:51" pos:end="1149:51"><expr pos:start="1149:51" pos:end="1149:51"><literal type="number" pos:start="1149:51" pos:end="1149:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1151:25" pos:end="1151:30">break;</break>

                    <case pos:start="1153:21" pos:end="1153:28">case <expr pos:start="1153:26" pos:end="1153:27"><literal type="number" pos:start="1153:26" pos:end="1153:27">29</literal></expr>:</case> <comment type="block" pos:start="1153:30" pos:end="1153:40">/* ftosl */</comment>

                        <if_stmt pos:start="1155:25" pos:end="1157:35"><if pos:start="1155:25" pos:end="1157:35">if <condition pos:start="1155:28" pos:end="1155:64">(<expr pos:start="1155:29" pos:end="1155:63"><operator pos:start="1155:29" pos:end="1155:29">!</operator><call pos:start="1155:30" pos:end="1155:63"><name pos:start="1155:30" pos:end="1155:40">arm_feature</name><argument_list pos:start="1155:41" pos:end="1155:63">(<argument pos:start="1155:42" pos:end="1155:44"><expr pos:start="1155:42" pos:end="1155:44"><name pos:start="1155:42" pos:end="1155:44">env</name></expr></argument>, <argument pos:start="1155:47" pos:end="1155:62"><expr pos:start="1155:47" pos:end="1155:62"><name pos:start="1155:47" pos:end="1155:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1157:27" pos:end="1157:35"><block_content pos:start="1157:27" pos:end="1157:35">

                          <return pos:start="1157:27" pos:end="1157:35">return <expr pos:start="1157:34" pos:end="1157:34"><literal type="number" pos:start="1157:34" pos:end="1157:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1159:25" pos:end="1159:53"><expr pos:start="1159:25" pos:end="1159:52"><call pos:start="1159:25" pos:end="1159:52"><name pos:start="1159:25" pos:end="1159:36">gen_vfp_tosl</name><argument_list pos:start="1159:37" pos:end="1159:52">(<argument pos:start="1159:38" pos:end="1159:39"><expr pos:start="1159:38" pos:end="1159:39"><name pos:start="1159:38" pos:end="1159:39">dp</name></expr></argument>, <argument pos:start="1159:42" pos:end="1159:48"><expr pos:start="1159:42" pos:end="1159:48"><literal type="number" pos:start="1159:42" pos:end="1159:45">32</literal> <operator pos:start="1159:45" pos:end="1159:45">-</operator> <name pos:start="1159:47" pos:end="1159:48">rm</name></expr></argument>, <argument pos:start="1159:51" pos:end="1159:51"><expr pos:start="1159:51" pos:end="1159:51"><literal type="number" pos:start="1159:51" pos:end="1159:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1161:25" pos:end="1161:30">break;</break>

                    <case pos:start="1163:21" pos:end="1163:28">case <expr pos:start="1163:26" pos:end="1163:27"><literal type="number" pos:start="1163:26" pos:end="1163:27">30</literal></expr>:</case> <comment type="block" pos:start="1163:30" pos:end="1163:40">/* ftouh */</comment>

                        <if_stmt pos:start="1165:25" pos:end="1167:35"><if pos:start="1165:25" pos:end="1167:35">if <condition pos:start="1165:28" pos:end="1165:64">(<expr pos:start="1165:29" pos:end="1165:63"><operator pos:start="1165:29" pos:end="1165:29">!</operator><call pos:start="1165:30" pos:end="1165:63"><name pos:start="1165:30" pos:end="1165:40">arm_feature</name><argument_list pos:start="1165:41" pos:end="1165:63">(<argument pos:start="1165:42" pos:end="1165:44"><expr pos:start="1165:42" pos:end="1165:44"><name pos:start="1165:42" pos:end="1165:44">env</name></expr></argument>, <argument pos:start="1165:47" pos:end="1165:62"><expr pos:start="1165:47" pos:end="1165:62"><name pos:start="1165:47" pos:end="1165:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1167:27" pos:end="1167:35"><block_content pos:start="1167:27" pos:end="1167:35">

                          <return pos:start="1167:27" pos:end="1167:35">return <expr pos:start="1167:34" pos:end="1167:34"><literal type="number" pos:start="1167:34" pos:end="1167:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1169:25" pos:end="1169:53"><expr pos:start="1169:25" pos:end="1169:52"><call pos:start="1169:25" pos:end="1169:52"><name pos:start="1169:25" pos:end="1169:36">gen_vfp_touh</name><argument_list pos:start="1169:37" pos:end="1169:52">(<argument pos:start="1169:38" pos:end="1169:39"><expr pos:start="1169:38" pos:end="1169:39"><name pos:start="1169:38" pos:end="1169:39">dp</name></expr></argument>, <argument pos:start="1169:42" pos:end="1169:48"><expr pos:start="1169:42" pos:end="1169:48"><literal type="number" pos:start="1169:42" pos:end="1169:45">16</literal> <operator pos:start="1169:45" pos:end="1169:45">-</operator> <name pos:start="1169:47" pos:end="1169:48">rm</name></expr></argument>, <argument pos:start="1169:51" pos:end="1169:51"><expr pos:start="1169:51" pos:end="1169:51"><literal type="number" pos:start="1169:51" pos:end="1169:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1171:25" pos:end="1171:30">break;</break>

                    <case pos:start="1173:21" pos:end="1173:28">case <expr pos:start="1173:26" pos:end="1173:27"><literal type="number" pos:start="1173:26" pos:end="1173:27">31</literal></expr>:</case> <comment type="block" pos:start="1173:30" pos:end="1173:40">/* ftoul */</comment>

                        <if_stmt pos:start="1175:25" pos:end="1177:35"><if pos:start="1175:25" pos:end="1177:35">if <condition pos:start="1175:28" pos:end="1175:64">(<expr pos:start="1175:29" pos:end="1175:63"><operator pos:start="1175:29" pos:end="1175:29">!</operator><call pos:start="1175:30" pos:end="1175:63"><name pos:start="1175:30" pos:end="1175:40">arm_feature</name><argument_list pos:start="1175:41" pos:end="1175:63">(<argument pos:start="1175:42" pos:end="1175:44"><expr pos:start="1175:42" pos:end="1175:44"><name pos:start="1175:42" pos:end="1175:44">env</name></expr></argument>, <argument pos:start="1175:47" pos:end="1175:62"><expr pos:start="1175:47" pos:end="1175:62"><name pos:start="1175:47" pos:end="1175:62">ARM_FEATURE_VFP3</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1177:27" pos:end="1177:35"><block_content pos:start="1177:27" pos:end="1177:35">

                          <return pos:start="1177:27" pos:end="1177:35">return <expr pos:start="1177:34" pos:end="1177:34"><literal type="number" pos:start="1177:34" pos:end="1177:34">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1179:25" pos:end="1179:53"><expr pos:start="1179:25" pos:end="1179:52"><call pos:start="1179:25" pos:end="1179:52"><name pos:start="1179:25" pos:end="1179:36">gen_vfp_toul</name><argument_list pos:start="1179:37" pos:end="1179:52">(<argument pos:start="1179:38" pos:end="1179:39"><expr pos:start="1179:38" pos:end="1179:39"><name pos:start="1179:38" pos:end="1179:39">dp</name></expr></argument>, <argument pos:start="1179:42" pos:end="1179:48"><expr pos:start="1179:42" pos:end="1179:48"><literal type="number" pos:start="1179:42" pos:end="1179:45">32</literal> <operator pos:start="1179:45" pos:end="1179:45">-</operator> <name pos:start="1179:47" pos:end="1179:48">rm</name></expr></argument>, <argument pos:start="1179:51" pos:end="1179:51"><expr pos:start="1179:51" pos:end="1179:51"><literal type="number" pos:start="1179:51" pos:end="1179:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1181:25" pos:end="1181:30">break;</break>

                    <default pos:start="1183:21" pos:end="1183:28">default:</default> <comment type="block" pos:start="1183:30" pos:end="1183:44">/* undefined */</comment>

                        <return pos:start="1185:25" pos:end="1185:33">return <expr pos:start="1185:32" pos:end="1185:32"><literal type="number" pos:start="1185:32" pos:end="1185:32">1</literal></expr>;</return>

                    </block_content>}</block></switch>

                    <break pos:start="1189:21" pos:end="1189:26">break;</break>

                <default pos:start="1191:17" pos:end="1191:24">default:</default> <comment type="block" pos:start="1191:26" pos:end="1191:40">/* undefined */</comment>

                    <return pos:start="1193:21" pos:end="1193:29">return <expr pos:start="1193:28" pos:end="1193:28"><literal type="number" pos:start="1193:28" pos:end="1193:28">1</literal></expr>;</return>

                </block_content>}</block></switch>



                <comment type="block" pos:start="1199:17" pos:end="1199:45">/* Write back the result.  */</comment>

                <if_stmt pos:start="1201:17" pos:end="1219:44"><if pos:start="1201:17" pos:end="1203:21">if <condition pos:start="1201:20" pos:end="1201:54">(<expr pos:start="1201:21" pos:end="1201:53"><name pos:start="1201:21" pos:end="1201:22">op</name> <operator pos:start="1201:24" pos:end="1201:25">==</operator> <literal type="number" pos:start="1201:27" pos:end="1201:28">15</literal> <operator pos:start="1201:30" pos:end="1201:31">&amp;&amp;</operator> <operator pos:start="1201:33" pos:end="1201:33">(</operator><name pos:start="1201:34" pos:end="1201:35">rn</name> <operator pos:start="1201:37" pos:end="1201:38">&gt;=</operator> <literal type="number" pos:start="1201:40" pos:end="1201:40">8</literal> <operator pos:start="1201:42" pos:end="1201:43">&amp;&amp;</operator> <name pos:start="1201:45" pos:end="1201:46">rn</name> <operator pos:start="1201:48" pos:end="1201:49">&lt;=</operator> <literal type="number" pos:start="1201:51" pos:end="1201:52">11</literal><operator pos:start="1201:53" pos:end="1201:53">)</operator></expr>)</condition><block type="pseudo" pos:start="1203:21" pos:end="1203:21"><block_content pos:start="1203:21" pos:end="1203:21">

                    <empty_stmt pos:start="1203:21" pos:end="1203:21">;</empty_stmt></block_content></block></if> <comment type="block" pos:start="1203:23" pos:end="1203:52">/* Comparison, do nothing.  */</comment>

                <if type="elseif" pos:start="1205:17" pos:end="1209:43">else if <condition pos:start="1205:25" pos:end="1205:65">(<expr pos:start="1205:26" pos:end="1205:64"><name pos:start="1205:26" pos:end="1205:27">op</name> <operator pos:start="1205:29" pos:end="1205:30">==</operator> <literal type="number" pos:start="1205:32" pos:end="1205:33">15</literal> <operator pos:start="1205:35" pos:end="1205:36">&amp;&amp;</operator> <name pos:start="1205:38" pos:end="1205:39">dp</name> <operator pos:start="1205:41" pos:end="1205:42">&amp;&amp;</operator> <operator pos:start="1205:44" pos:end="1205:44">(</operator><operator pos:start="1205:45" pos:end="1205:45">(</operator><name pos:start="1205:46" pos:end="1205:47">rn</name> <operator pos:start="1205:49" pos:end="1205:49">&amp;</operator> <literal type="number" pos:start="1205:51" pos:end="1205:54">0x1c</literal><operator pos:start="1205:55" pos:end="1205:55">)</operator> <operator pos:start="1205:57" pos:end="1205:58">==</operator> <literal type="number" pos:start="1205:60" pos:end="1205:63">0x18</literal><operator pos:start="1205:64" pos:end="1205:64">)</operator></expr>)</condition><block type="pseudo" pos:start="1209:21" pos:end="1209:43"><block_content pos:start="1209:21" pos:end="1209:43">

                    <comment type="block" pos:start="1207:21" pos:end="1207:68">/* VCVT double to int: always integer result. */</comment>

                    <expr_stmt pos:start="1209:21" pos:end="1209:43"><expr pos:start="1209:21" pos:end="1209:42"><call pos:start="1209:21" pos:end="1209:42"><name pos:start="1209:21" pos:end="1209:35">gen_mov_vreg_F0</name><argument_list pos:start="1209:36" pos:end="1209:42">(<argument pos:start="1209:37" pos:end="1209:37"><expr pos:start="1209:37" pos:end="1209:37"><literal type="number" pos:start="1209:37" pos:end="1209:37">0</literal></expr></argument>, <argument pos:start="1209:40" pos:end="1209:41"><expr pos:start="1209:40" pos:end="1209:41"><name pos:start="1209:40" pos:end="1209:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1211:17" pos:end="1215:45">else if <condition pos:start="1211:25" pos:end="1211:46">(<expr pos:start="1211:26" pos:end="1211:45"><name pos:start="1211:26" pos:end="1211:27">op</name> <operator pos:start="1211:29" pos:end="1211:30">==</operator> <literal type="number" pos:start="1211:32" pos:end="1211:33">15</literal> <operator pos:start="1211:35" pos:end="1211:36">&amp;&amp;</operator> <name pos:start="1211:38" pos:end="1211:39">rn</name> <operator pos:start="1211:41" pos:end="1211:42">==</operator> <literal type="number" pos:start="1211:44" pos:end="1211:45">15</literal></expr>)</condition><block type="pseudo" pos:start="1215:21" pos:end="1215:45"><block_content pos:start="1215:21" pos:end="1215:45">

                    <comment type="block" pos:start="1213:21" pos:end="1213:36">/* conversion */</comment>

                    <expr_stmt pos:start="1215:21" pos:end="1215:45"><expr pos:start="1215:21" pos:end="1215:44"><call pos:start="1215:21" pos:end="1215:44"><name pos:start="1215:21" pos:end="1215:35">gen_mov_vreg_F0</name><argument_list pos:start="1215:36" pos:end="1215:44">(<argument pos:start="1215:37" pos:end="1215:39"><expr pos:start="1215:37" pos:end="1215:39"><operator pos:start="1215:37" pos:end="1215:37">!</operator><name pos:start="1215:38" pos:end="1215:39">dp</name></expr></argument>, <argument pos:start="1215:42" pos:end="1215:43"><expr pos:start="1215:42" pos:end="1215:43"><name pos:start="1215:42" pos:end="1215:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1217:17" pos:end="1219:44">else<block type="pseudo" pos:start="1219:21" pos:end="1219:44"><block_content pos:start="1219:21" pos:end="1219:44">

                    <expr_stmt pos:start="1219:21" pos:end="1219:44"><expr pos:start="1219:21" pos:end="1219:43"><call pos:start="1219:21" pos:end="1219:43"><name pos:start="1219:21" pos:end="1219:35">gen_mov_vreg_F0</name><argument_list pos:start="1219:36" pos:end="1219:43">(<argument pos:start="1219:37" pos:end="1219:38"><expr pos:start="1219:37" pos:end="1219:38"><name pos:start="1219:37" pos:end="1219:38">dp</name></expr></argument>, <argument pos:start="1219:41" pos:end="1219:42"><expr pos:start="1219:41" pos:end="1219:42"><name pos:start="1219:41" pos:end="1219:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <comment type="block" pos:start="1223:17" pos:end="1223:64">/* break out of the loop if we have finished  */</comment>

                <if_stmt pos:start="1225:17" pos:end="1227:26"><if pos:start="1225:17" pos:end="1227:26">if <condition pos:start="1225:20" pos:end="1225:32">(<expr pos:start="1225:21" pos:end="1225:31"><name pos:start="1225:21" pos:end="1225:26">veclen</name> <operator pos:start="1225:28" pos:end="1225:29">==</operator> <literal type="number" pos:start="1225:31" pos:end="1225:31">0</literal></expr>)</condition><block type="pseudo" pos:start="1227:21" pos:end="1227:26"><block_content pos:start="1227:21" pos:end="1227:26">

                    <break pos:start="1227:21" pos:end="1227:26">break;</break></block_content></block></if></if_stmt>



                <if_stmt pos:start="1231:17" pos:end="1247:17"><if pos:start="1231:17" pos:end="1247:17">if <condition pos:start="1231:20" pos:end="1231:45">(<expr pos:start="1231:21" pos:end="1231:44"><name pos:start="1231:21" pos:end="1231:22">op</name> <operator pos:start="1231:24" pos:end="1231:25">==</operator> <literal type="number" pos:start="1231:27" pos:end="1231:28">15</literal> <operator pos:start="1231:30" pos:end="1231:31">&amp;&amp;</operator> <name pos:start="1231:33" pos:end="1231:39">delta_m</name> <operator pos:start="1231:41" pos:end="1231:42">==</operator> <literal type="number" pos:start="1231:44" pos:end="1231:44">0</literal></expr>)</condition> <block pos:start="1231:47" pos:end="1247:17">{<block_content pos:start="1235:21" pos:end="1245:26">

                    <comment type="block" pos:start="1233:21" pos:end="1233:48">/* single source one-many */</comment>

                    <while pos:start="1235:21" pos:end="1243:21">while <condition pos:start="1235:27" pos:end="1235:36">(<expr pos:start="1235:28" pos:end="1235:35"><name pos:start="1235:28" pos:end="1235:33">veclen</name><operator pos:start="1235:34" pos:end="1235:35">--</operator></expr>)</condition> <block pos:start="1235:38" pos:end="1243:21">{<block_content pos:start="1237:25" pos:end="1241:48">

                        <expr_stmt pos:start="1237:25" pos:end="1239:48"><expr pos:start="1237:25" pos:end="1239:47"><name pos:start="1237:25" pos:end="1237:26">rd</name> <operator pos:start="1237:28" pos:end="1237:28">=</operator> <operator pos:start="1237:30" pos:end="1237:30">(</operator><operator pos:start="1237:31" pos:end="1237:31">(</operator><name pos:start="1237:32" pos:end="1237:33">rd</name> <operator pos:start="1237:35" pos:end="1237:35">+</operator> <name pos:start="1237:37" pos:end="1237:43">delta_d</name><operator pos:start="1237:44" pos:end="1237:44">)</operator> <operator pos:start="1237:46" pos:end="1237:46">&amp;</operator> <operator pos:start="1237:48" pos:end="1237:48">(</operator><name pos:start="1237:49" pos:end="1237:57">bank_mask</name> <operator pos:start="1237:59" pos:end="1237:59">-</operator> <literal type="number" pos:start="1237:61" pos:end="1237:61">1</literal><operator pos:start="1237:62" pos:end="1237:62">)</operator><operator pos:start="1237:63" pos:end="1237:63">)</operator>

                             <operator pos:start="1239:30" pos:end="1239:30">|</operator> <operator pos:start="1239:32" pos:end="1239:32">(</operator><name pos:start="1239:33" pos:end="1239:34">rd</name> <operator pos:start="1239:36" pos:end="1239:36">&amp;</operator> <name pos:start="1239:38" pos:end="1239:46">bank_mask</name><operator pos:start="1239:47" pos:end="1239:47">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="1241:25" pos:end="1241:48"><expr pos:start="1241:25" pos:end="1241:47"><call pos:start="1241:25" pos:end="1241:47"><name pos:start="1241:25" pos:end="1241:39">gen_mov_vreg_F0</name><argument_list pos:start="1241:40" pos:end="1241:47">(<argument pos:start="1241:41" pos:end="1241:42"><expr pos:start="1241:41" pos:end="1241:42"><name pos:start="1241:41" pos:end="1241:42">dp</name></expr></argument>, <argument pos:start="1241:45" pos:end="1241:46"><expr pos:start="1241:45" pos:end="1241:46"><name pos:start="1241:45" pos:end="1241:46">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></while>

                    <break pos:start="1245:21" pos:end="1245:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1249:17" pos:end="1249:47">/* Setup the next operands.  */</comment>

                <expr_stmt pos:start="1251:17" pos:end="1251:25"><expr pos:start="1251:17" pos:end="1251:24"><name pos:start="1251:17" pos:end="1251:22">veclen</name><operator pos:start="1251:23" pos:end="1251:24">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1253:17" pos:end="1255:40"><expr pos:start="1253:17" pos:end="1255:39"><name pos:start="1253:17" pos:end="1253:18">rd</name> <operator pos:start="1253:20" pos:end="1253:20">=</operator> <operator pos:start="1253:22" pos:end="1253:22">(</operator><operator pos:start="1253:23" pos:end="1253:23">(</operator><name pos:start="1253:24" pos:end="1253:25">rd</name> <operator pos:start="1253:27" pos:end="1253:27">+</operator> <name pos:start="1253:29" pos:end="1253:35">delta_d</name><operator pos:start="1253:36" pos:end="1253:36">)</operator> <operator pos:start="1253:38" pos:end="1253:38">&amp;</operator> <operator pos:start="1253:40" pos:end="1253:40">(</operator><name pos:start="1253:41" pos:end="1253:49">bank_mask</name> <operator pos:start="1253:51" pos:end="1253:51">-</operator> <literal type="number" pos:start="1253:53" pos:end="1253:53">1</literal><operator pos:start="1253:54" pos:end="1253:54">)</operator><operator pos:start="1253:55" pos:end="1253:55">)</operator>

                     <operator pos:start="1255:22" pos:end="1255:22">|</operator> <operator pos:start="1255:24" pos:end="1255:24">(</operator><name pos:start="1255:25" pos:end="1255:26">rd</name> <operator pos:start="1255:28" pos:end="1255:28">&amp;</operator> <name pos:start="1255:30" pos:end="1255:38">bank_mask</name><operator pos:start="1255:39" pos:end="1255:39">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="1259:17" pos:end="1289:17"><if pos:start="1259:17" pos:end="1269:17">if <condition pos:start="1259:20" pos:end="1259:29">(<expr pos:start="1259:21" pos:end="1259:28"><name pos:start="1259:21" pos:end="1259:22">op</name> <operator pos:start="1259:24" pos:end="1259:25">==</operator> <literal type="number" pos:start="1259:27" pos:end="1259:28">15</literal></expr>)</condition> <block pos:start="1259:31" pos:end="1269:17">{<block_content pos:start="1263:21" pos:end="1267:44">

                    <comment type="block" pos:start="1261:21" pos:end="1261:46">/* One source operand.  */</comment>

                    <expr_stmt pos:start="1263:21" pos:end="1265:44"><expr pos:start="1263:21" pos:end="1265:43"><name pos:start="1263:21" pos:end="1263:22">rm</name> <operator pos:start="1263:24" pos:end="1263:24">=</operator> <operator pos:start="1263:26" pos:end="1263:26">(</operator><operator pos:start="1263:27" pos:end="1263:27">(</operator><name pos:start="1263:28" pos:end="1263:29">rm</name> <operator pos:start="1263:31" pos:end="1263:31">+</operator> <name pos:start="1263:33" pos:end="1263:39">delta_m</name><operator pos:start="1263:40" pos:end="1263:40">)</operator> <operator pos:start="1263:42" pos:end="1263:42">&amp;</operator> <operator pos:start="1263:44" pos:end="1263:44">(</operator><name pos:start="1263:45" pos:end="1263:53">bank_mask</name> <operator pos:start="1263:55" pos:end="1263:55">-</operator> <literal type="number" pos:start="1263:57" pos:end="1263:57">1</literal><operator pos:start="1263:58" pos:end="1263:58">)</operator><operator pos:start="1263:59" pos:end="1263:59">)</operator>

                         <operator pos:start="1265:26" pos:end="1265:26">|</operator> <operator pos:start="1265:28" pos:end="1265:28">(</operator><name pos:start="1265:29" pos:end="1265:30">rm</name> <operator pos:start="1265:32" pos:end="1265:32">&amp;</operator> <name pos:start="1265:34" pos:end="1265:42">bank_mask</name><operator pos:start="1265:43" pos:end="1265:43">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1267:21" pos:end="1267:44"><expr pos:start="1267:21" pos:end="1267:43"><call pos:start="1267:21" pos:end="1267:43"><name pos:start="1267:21" pos:end="1267:35">gen_mov_F0_vreg</name><argument_list pos:start="1267:36" pos:end="1267:43">(<argument pos:start="1267:37" pos:end="1267:38"><expr pos:start="1267:37" pos:end="1267:38"><name pos:start="1267:37" pos:end="1267:38">dp</name></expr></argument>, <argument pos:start="1267:41" pos:end="1267:42"><expr pos:start="1267:41" pos:end="1267:42"><name pos:start="1267:41" pos:end="1267:42">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1269:19" pos:end="1289:17">else <block pos:start="1269:24" pos:end="1289:17">{<block_content pos:start="1273:21" pos:end="1287:21">

                    <comment type="block" pos:start="1271:21" pos:end="1271:47">/* Two source operands.  */</comment>

                    <expr_stmt pos:start="1273:21" pos:end="1275:44"><expr pos:start="1273:21" pos:end="1275:43"><name pos:start="1273:21" pos:end="1273:22">rn</name> <operator pos:start="1273:24" pos:end="1273:24">=</operator> <operator pos:start="1273:26" pos:end="1273:26">(</operator><operator pos:start="1273:27" pos:end="1273:27">(</operator><name pos:start="1273:28" pos:end="1273:29">rn</name> <operator pos:start="1273:31" pos:end="1273:31">+</operator> <name pos:start="1273:33" pos:end="1273:39">delta_d</name><operator pos:start="1273:40" pos:end="1273:40">)</operator> <operator pos:start="1273:42" pos:end="1273:42">&amp;</operator> <operator pos:start="1273:44" pos:end="1273:44">(</operator><name pos:start="1273:45" pos:end="1273:53">bank_mask</name> <operator pos:start="1273:55" pos:end="1273:55">-</operator> <literal type="number" pos:start="1273:57" pos:end="1273:57">1</literal><operator pos:start="1273:58" pos:end="1273:58">)</operator><operator pos:start="1273:59" pos:end="1273:59">)</operator>

                         <operator pos:start="1275:26" pos:end="1275:26">|</operator> <operator pos:start="1275:28" pos:end="1275:28">(</operator><name pos:start="1275:29" pos:end="1275:30">rn</name> <operator pos:start="1275:32" pos:end="1275:32">&amp;</operator> <name pos:start="1275:34" pos:end="1275:42">bank_mask</name><operator pos:start="1275:43" pos:end="1275:43">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1277:21" pos:end="1277:44"><expr pos:start="1277:21" pos:end="1277:43"><call pos:start="1277:21" pos:end="1277:43"><name pos:start="1277:21" pos:end="1277:35">gen_mov_F0_vreg</name><argument_list pos:start="1277:36" pos:end="1277:43">(<argument pos:start="1277:37" pos:end="1277:38"><expr pos:start="1277:37" pos:end="1277:38"><name pos:start="1277:37" pos:end="1277:38">dp</name></expr></argument>, <argument pos:start="1277:41" pos:end="1277:42"><expr pos:start="1277:41" pos:end="1277:42"><name pos:start="1277:41" pos:end="1277:42">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1279:21" pos:end="1287:21"><if pos:start="1279:21" pos:end="1287:21">if <condition pos:start="1279:24" pos:end="1279:32">(<expr pos:start="1279:25" pos:end="1279:31"><name pos:start="1279:25" pos:end="1279:31">delta_m</name></expr>)</condition> <block pos:start="1279:34" pos:end="1287:21">{<block_content pos:start="1281:25" pos:end="1285:48">

                        <expr_stmt pos:start="1281:25" pos:end="1283:48"><expr pos:start="1281:25" pos:end="1283:47"><name pos:start="1281:25" pos:end="1281:26">rm</name> <operator pos:start="1281:28" pos:end="1281:28">=</operator> <operator pos:start="1281:30" pos:end="1281:30">(</operator><operator pos:start="1281:31" pos:end="1281:31">(</operator><name pos:start="1281:32" pos:end="1281:33">rm</name> <operator pos:start="1281:35" pos:end="1281:35">+</operator> <name pos:start="1281:37" pos:end="1281:43">delta_m</name><operator pos:start="1281:44" pos:end="1281:44">)</operator> <operator pos:start="1281:46" pos:end="1281:46">&amp;</operator> <operator pos:start="1281:48" pos:end="1281:48">(</operator><name pos:start="1281:49" pos:end="1281:57">bank_mask</name> <operator pos:start="1281:59" pos:end="1281:59">-</operator> <literal type="number" pos:start="1281:61" pos:end="1281:61">1</literal><operator pos:start="1281:62" pos:end="1281:62">)</operator><operator pos:start="1281:63" pos:end="1281:63">)</operator>

                             <operator pos:start="1283:30" pos:end="1283:30">|</operator> <operator pos:start="1283:32" pos:end="1283:32">(</operator><name pos:start="1283:33" pos:end="1283:34">rm</name> <operator pos:start="1283:36" pos:end="1283:36">&amp;</operator> <name pos:start="1283:38" pos:end="1283:46">bank_mask</name><operator pos:start="1283:47" pos:end="1283:47">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="1285:25" pos:end="1285:48"><expr pos:start="1285:25" pos:end="1285:47"><call pos:start="1285:25" pos:end="1285:47"><name pos:start="1285:25" pos:end="1285:39">gen_mov_F1_vreg</name><argument_list pos:start="1285:40" pos:end="1285:47">(<argument pos:start="1285:41" pos:end="1285:42"><expr pos:start="1285:41" pos:end="1285:42"><name pos:start="1285:41" pos:end="1285:42">dp</name></expr></argument>, <argument pos:start="1285:45" pos:end="1285:46"><expr pos:start="1285:45" pos:end="1285:46"><name pos:start="1285:45" pos:end="1285:46">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1295:9" pos:end="1295:14">break;</break>

    <case pos:start="1297:5" pos:end="1297:13">case <expr pos:start="1297:10" pos:end="1297:12"><literal type="number" pos:start="1297:10" pos:end="1297:12">0xc</literal></expr>:</case>

    <case pos:start="1299:5" pos:end="1299:13">case <expr pos:start="1299:10" pos:end="1299:12"><literal type="number" pos:start="1299:10" pos:end="1299:12">0xd</literal></expr>:</case>

        <if_stmt pos:start="1301:9" pos:end="1577:9"><if pos:start="1301:9" pos:end="1391:9">if <condition pos:start="1301:12" pos:end="1301:46">(<expr pos:start="1301:13" pos:end="1301:45"><operator pos:start="1301:13" pos:end="1301:13">(</operator><name pos:start="1301:14" pos:end="1301:17">insn</name> <operator pos:start="1301:19" pos:end="1301:19">&amp;</operator> <literal type="number" pos:start="1301:21" pos:end="1301:30">0x03e00000</literal><operator pos:start="1301:31" pos:end="1301:31">)</operator> <operator pos:start="1301:33" pos:end="1301:34">==</operator> <literal type="number" pos:start="1301:36" pos:end="1301:45">0x00400000</literal></expr>)</condition> <block pos:start="1301:48" pos:end="1391:9">{<block_content pos:start="1305:13" pos:end="1389:13">

            <comment type="block" pos:start="1303:13" pos:end="1303:39">/* two-register transfer */</comment>

            <expr_stmt pos:start="1305:13" pos:end="1305:36"><expr pos:start="1305:13" pos:end="1305:35"><name pos:start="1305:13" pos:end="1305:14">rn</name> <operator pos:start="1305:16" pos:end="1305:16">=</operator> <operator pos:start="1305:18" pos:end="1305:18">(</operator><name pos:start="1305:19" pos:end="1305:22">insn</name> <operator pos:start="1305:24" pos:end="1305:25">&gt;&gt;</operator> <literal type="number" pos:start="1305:27" pos:end="1305:28">16</literal><operator pos:start="1305:29" pos:end="1305:29">)</operator> <operator pos:start="1305:31" pos:end="1305:31">&amp;</operator> <literal type="number" pos:start="1305:33" pos:end="1305:35">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1307:13" pos:end="1307:36"><expr pos:start="1307:13" pos:end="1307:35"><name pos:start="1307:13" pos:end="1307:14">rd</name> <operator pos:start="1307:16" pos:end="1307:16">=</operator> <operator pos:start="1307:18" pos:end="1307:18">(</operator><name pos:start="1307:19" pos:end="1307:22">insn</name> <operator pos:start="1307:24" pos:end="1307:25">&gt;&gt;</operator> <literal type="number" pos:start="1307:27" pos:end="1307:28">12</literal><operator pos:start="1307:29" pos:end="1307:29">)</operator> <operator pos:start="1307:31" pos:end="1307:31">&amp;</operator> <literal type="number" pos:start="1307:33" pos:end="1307:35">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1309:13" pos:end="1317:13"><if pos:start="1309:13" pos:end="1313:13">if <condition pos:start="1309:16" pos:end="1309:19">(<expr pos:start="1309:17" pos:end="1309:18"><name pos:start="1309:17" pos:end="1309:18">dp</name></expr>)</condition> <block pos:start="1309:21" pos:end="1313:13">{<block_content pos:start="1311:17" pos:end="1311:37">

                <expr_stmt pos:start="1311:17" pos:end="1311:37"><expr pos:start="1311:17" pos:end="1311:36"><call pos:start="1311:17" pos:end="1311:36"><name pos:start="1311:17" pos:end="1311:26">VFP_DREG_M</name><argument_list pos:start="1311:27" pos:end="1311:36">(<argument pos:start="1311:28" pos:end="1311:29"><expr pos:start="1311:28" pos:end="1311:29"><name pos:start="1311:28" pos:end="1311:29">rm</name></expr></argument>, <argument pos:start="1311:32" pos:end="1311:35"><expr pos:start="1311:32" pos:end="1311:35"><name pos:start="1311:32" pos:end="1311:35">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1313:15" pos:end="1317:13">else <block pos:start="1313:20" pos:end="1317:13">{<block_content pos:start="1315:17" pos:end="1315:38">

                <expr_stmt pos:start="1315:17" pos:end="1315:38"><expr pos:start="1315:17" pos:end="1315:37"><name pos:start="1315:17" pos:end="1315:18">rm</name> <operator pos:start="1315:20" pos:end="1315:20">=</operator> <call pos:start="1315:22" pos:end="1315:37"><name pos:start="1315:22" pos:end="1315:31">VFP_SREG_M</name><argument_list pos:start="1315:32" pos:end="1315:37">(<argument pos:start="1315:33" pos:end="1315:36"><expr pos:start="1315:33" pos:end="1315:36"><name pos:start="1315:33" pos:end="1315:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="1321:13" pos:end="1389:13"><if pos:start="1321:13" pos:end="1355:13">if <condition pos:start="1321:16" pos:end="1321:37">(<expr pos:start="1321:17" pos:end="1321:36"><name pos:start="1321:17" pos:end="1321:20">insn</name> <operator pos:start="1321:22" pos:end="1321:22">&amp;</operator> <name pos:start="1321:24" pos:end="1321:36">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="1321:39" pos:end="1355:13">{<block_content pos:start="1325:17" pos:end="1353:17">

                <comment type="block" pos:start="1323:17" pos:end="1323:30">/* vfp-&gt;arm */</comment>

                <if_stmt pos:start="1325:17" pos:end="1353:17"><if pos:start="1325:17" pos:end="1339:17">if <condition pos:start="1325:20" pos:end="1325:23">(<expr pos:start="1325:21" pos:end="1325:22"><name pos:start="1325:21" pos:end="1325:22">dp</name></expr>)</condition> <block pos:start="1325:25" pos:end="1339:17">{<block_content pos:start="1327:21" pos:end="1337:42">

                    <expr_stmt pos:start="1327:21" pos:end="1327:47"><expr pos:start="1327:21" pos:end="1327:46"><call pos:start="1327:21" pos:end="1327:46"><name pos:start="1327:21" pos:end="1327:35">gen_mov_F0_vreg</name><argument_list pos:start="1327:36" pos:end="1327:46">(<argument pos:start="1327:37" pos:end="1327:37"><expr pos:start="1327:37" pos:end="1327:37"><literal type="number" pos:start="1327:37" pos:end="1327:37">0</literal></expr></argument>, <argument pos:start="1327:40" pos:end="1327:45"><expr pos:start="1327:40" pos:end="1327:45"><name pos:start="1327:40" pos:end="1327:41">rm</name> <operator pos:start="1327:43" pos:end="1327:43">*</operator> <literal type="number" pos:start="1327:45" pos:end="1327:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1329:21" pos:end="1329:40"><expr pos:start="1329:21" pos:end="1329:39"><name pos:start="1329:21" pos:end="1329:23">tmp</name> <operator pos:start="1329:25" pos:end="1329:25">=</operator> <call pos:start="1329:27" pos:end="1329:39"><name pos:start="1329:27" pos:end="1329:37">gen_vfp_mrs</name><argument_list pos:start="1329:38" pos:end="1329:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1331:21" pos:end="1331:42"><expr pos:start="1331:21" pos:end="1331:41"><call pos:start="1331:21" pos:end="1331:41"><name pos:start="1331:21" pos:end="1331:29">store_reg</name><argument_list pos:start="1331:30" pos:end="1331:41">(<argument pos:start="1331:31" pos:end="1331:31"><expr pos:start="1331:31" pos:end="1331:31"><name pos:start="1331:31" pos:end="1331:31">s</name></expr></argument>, <argument pos:start="1331:34" pos:end="1331:35"><expr pos:start="1331:34" pos:end="1331:35"><name pos:start="1331:34" pos:end="1331:35">rd</name></expr></argument>, <argument pos:start="1331:38" pos:end="1331:40"><expr pos:start="1331:38" pos:end="1331:40"><name pos:start="1331:38" pos:end="1331:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1333:21" pos:end="1333:51"><expr pos:start="1333:21" pos:end="1333:50"><call pos:start="1333:21" pos:end="1333:50"><name pos:start="1333:21" pos:end="1333:35">gen_mov_F0_vreg</name><argument_list pos:start="1333:36" pos:end="1333:50">(<argument pos:start="1333:37" pos:end="1333:37"><expr pos:start="1333:37" pos:end="1333:37"><literal type="number" pos:start="1333:37" pos:end="1333:37">0</literal></expr></argument>, <argument pos:start="1333:40" pos:end="1333:49"><expr pos:start="1333:40" pos:end="1333:49"><name pos:start="1333:40" pos:end="1333:41">rm</name> <operator pos:start="1333:43" pos:end="1333:43">*</operator> <literal type="number" pos:start="1333:45" pos:end="1333:47">2</literal> <operator pos:start="1333:47" pos:end="1333:47">+</operator> <literal type="number" pos:start="1333:49" pos:end="1333:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1335:21" pos:end="1335:40"><expr pos:start="1335:21" pos:end="1335:39"><name pos:start="1335:21" pos:end="1335:23">tmp</name> <operator pos:start="1335:25" pos:end="1335:25">=</operator> <call pos:start="1335:27" pos:end="1335:39"><name pos:start="1335:27" pos:end="1335:37">gen_vfp_mrs</name><argument_list pos:start="1335:38" pos:end="1335:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1337:21" pos:end="1337:42"><expr pos:start="1337:21" pos:end="1337:41"><call pos:start="1337:21" pos:end="1337:41"><name pos:start="1337:21" pos:end="1337:29">store_reg</name><argument_list pos:start="1337:30" pos:end="1337:41">(<argument pos:start="1337:31" pos:end="1337:31"><expr pos:start="1337:31" pos:end="1337:31"><name pos:start="1337:31" pos:end="1337:31">s</name></expr></argument>, <argument pos:start="1337:34" pos:end="1337:35"><expr pos:start="1337:34" pos:end="1337:35"><name pos:start="1337:34" pos:end="1337:35">rn</name></expr></argument>, <argument pos:start="1337:38" pos:end="1337:40"><expr pos:start="1337:38" pos:end="1337:40"><name pos:start="1337:38" pos:end="1337:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1339:19" pos:end="1353:17">else <block pos:start="1339:24" pos:end="1353:17">{<block_content pos:start="1341:21" pos:end="1351:42">

                    <expr_stmt pos:start="1341:21" pos:end="1341:43"><expr pos:start="1341:21" pos:end="1341:42"><call pos:start="1341:21" pos:end="1341:42"><name pos:start="1341:21" pos:end="1341:35">gen_mov_F0_vreg</name><argument_list pos:start="1341:36" pos:end="1341:42">(<argument pos:start="1341:37" pos:end="1341:37"><expr pos:start="1341:37" pos:end="1341:37"><literal type="number" pos:start="1341:37" pos:end="1341:37">0</literal></expr></argument>, <argument pos:start="1341:40" pos:end="1341:41"><expr pos:start="1341:40" pos:end="1341:41"><name pos:start="1341:40" pos:end="1341:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1343:21" pos:end="1343:40"><expr pos:start="1343:21" pos:end="1343:39"><name pos:start="1343:21" pos:end="1343:23">tmp</name> <operator pos:start="1343:25" pos:end="1343:25">=</operator> <call pos:start="1343:27" pos:end="1343:39"><name pos:start="1343:27" pos:end="1343:37">gen_vfp_mrs</name><argument_list pos:start="1343:38" pos:end="1343:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1345:21" pos:end="1345:42"><expr pos:start="1345:21" pos:end="1345:41"><call pos:start="1345:21" pos:end="1345:41"><name pos:start="1345:21" pos:end="1345:29">store_reg</name><argument_list pos:start="1345:30" pos:end="1345:41">(<argument pos:start="1345:31" pos:end="1345:31"><expr pos:start="1345:31" pos:end="1345:31"><name pos:start="1345:31" pos:end="1345:31">s</name></expr></argument>, <argument pos:start="1345:34" pos:end="1345:35"><expr pos:start="1345:34" pos:end="1345:35"><name pos:start="1345:34" pos:end="1345:35">rd</name></expr></argument>, <argument pos:start="1345:38" pos:end="1345:40"><expr pos:start="1345:38" pos:end="1345:40"><name pos:start="1345:38" pos:end="1345:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1347:21" pos:end="1347:47"><expr pos:start="1347:21" pos:end="1347:46"><call pos:start="1347:21" pos:end="1347:46"><name pos:start="1347:21" pos:end="1347:35">gen_mov_F0_vreg</name><argument_list pos:start="1347:36" pos:end="1347:46">(<argument pos:start="1347:37" pos:end="1347:37"><expr pos:start="1347:37" pos:end="1347:37"><literal type="number" pos:start="1347:37" pos:end="1347:37">0</literal></expr></argument>, <argument pos:start="1347:40" pos:end="1347:45"><expr pos:start="1347:40" pos:end="1347:45"><name pos:start="1347:40" pos:end="1347:41">rm</name> <operator pos:start="1347:43" pos:end="1347:43">+</operator> <literal type="number" pos:start="1347:45" pos:end="1347:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1349:21" pos:end="1349:40"><expr pos:start="1349:21" pos:end="1349:39"><name pos:start="1349:21" pos:end="1349:23">tmp</name> <operator pos:start="1349:25" pos:end="1349:25">=</operator> <call pos:start="1349:27" pos:end="1349:39"><name pos:start="1349:27" pos:end="1349:37">gen_vfp_mrs</name><argument_list pos:start="1349:38" pos:end="1349:39">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1351:21" pos:end="1351:42"><expr pos:start="1351:21" pos:end="1351:41"><call pos:start="1351:21" pos:end="1351:41"><name pos:start="1351:21" pos:end="1351:29">store_reg</name><argument_list pos:start="1351:30" pos:end="1351:41">(<argument pos:start="1351:31" pos:end="1351:31"><expr pos:start="1351:31" pos:end="1351:31"><name pos:start="1351:31" pos:end="1351:31">s</name></expr></argument>, <argument pos:start="1351:34" pos:end="1351:35"><expr pos:start="1351:34" pos:end="1351:35"><name pos:start="1351:34" pos:end="1351:35">rn</name></expr></argument>, <argument pos:start="1351:38" pos:end="1351:40"><expr pos:start="1351:38" pos:end="1351:40"><name pos:start="1351:38" pos:end="1351:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1355:15" pos:end="1389:13">else <block pos:start="1355:20" pos:end="1389:13">{<block_content pos:start="1359:17" pos:end="1387:17">

                <comment type="block" pos:start="1357:17" pos:end="1357:30">/* arm-&gt;vfp */</comment>

                <if_stmt pos:start="1359:17" pos:end="1387:17"><if pos:start="1359:17" pos:end="1373:17">if <condition pos:start="1359:20" pos:end="1359:23">(<expr pos:start="1359:21" pos:end="1359:22"><name pos:start="1359:21" pos:end="1359:22">dp</name></expr>)</condition> <block pos:start="1359:25" pos:end="1373:17">{<block_content pos:start="1361:21" pos:end="1371:51">

                    <expr_stmt pos:start="1361:21" pos:end="1361:42"><expr pos:start="1361:21" pos:end="1361:41"><name pos:start="1361:21" pos:end="1361:23">tmp</name> <operator pos:start="1361:25" pos:end="1361:25">=</operator> <call pos:start="1361:27" pos:end="1361:41"><name pos:start="1361:27" pos:end="1361:34">load_reg</name><argument_list pos:start="1361:35" pos:end="1361:41">(<argument pos:start="1361:36" pos:end="1361:36"><expr pos:start="1361:36" pos:end="1361:36"><name pos:start="1361:36" pos:end="1361:36">s</name></expr></argument>, <argument pos:start="1361:39" pos:end="1361:40"><expr pos:start="1361:39" pos:end="1361:40"><name pos:start="1361:39" pos:end="1361:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1363:21" pos:end="1363:37"><expr pos:start="1363:21" pos:end="1363:36"><call pos:start="1363:21" pos:end="1363:36"><name pos:start="1363:21" pos:end="1363:31">gen_vfp_msr</name><argument_list pos:start="1363:32" pos:end="1363:36">(<argument pos:start="1363:33" pos:end="1363:35"><expr pos:start="1363:33" pos:end="1363:35"><name pos:start="1363:33" pos:end="1363:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1365:21" pos:end="1365:47"><expr pos:start="1365:21" pos:end="1365:46"><call pos:start="1365:21" pos:end="1365:46"><name pos:start="1365:21" pos:end="1365:35">gen_mov_vreg_F0</name><argument_list pos:start="1365:36" pos:end="1365:46">(<argument pos:start="1365:37" pos:end="1365:37"><expr pos:start="1365:37" pos:end="1365:37"><literal type="number" pos:start="1365:37" pos:end="1365:37">0</literal></expr></argument>, <argument pos:start="1365:40" pos:end="1365:45"><expr pos:start="1365:40" pos:end="1365:45"><name pos:start="1365:40" pos:end="1365:41">rm</name> <operator pos:start="1365:43" pos:end="1365:43">*</operator> <literal type="number" pos:start="1365:45" pos:end="1365:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1367:21" pos:end="1367:42"><expr pos:start="1367:21" pos:end="1367:41"><name pos:start="1367:21" pos:end="1367:23">tmp</name> <operator pos:start="1367:25" pos:end="1367:25">=</operator> <call pos:start="1367:27" pos:end="1367:41"><name pos:start="1367:27" pos:end="1367:34">load_reg</name><argument_list pos:start="1367:35" pos:end="1367:41">(<argument pos:start="1367:36" pos:end="1367:36"><expr pos:start="1367:36" pos:end="1367:36"><name pos:start="1367:36" pos:end="1367:36">s</name></expr></argument>, <argument pos:start="1367:39" pos:end="1367:40"><expr pos:start="1367:39" pos:end="1367:40"><name pos:start="1367:39" pos:end="1367:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1369:21" pos:end="1369:37"><expr pos:start="1369:21" pos:end="1369:36"><call pos:start="1369:21" pos:end="1369:36"><name pos:start="1369:21" pos:end="1369:31">gen_vfp_msr</name><argument_list pos:start="1369:32" pos:end="1369:36">(<argument pos:start="1369:33" pos:end="1369:35"><expr pos:start="1369:33" pos:end="1369:35"><name pos:start="1369:33" pos:end="1369:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1371:21" pos:end="1371:51"><expr pos:start="1371:21" pos:end="1371:50"><call pos:start="1371:21" pos:end="1371:50"><name pos:start="1371:21" pos:end="1371:35">gen_mov_vreg_F0</name><argument_list pos:start="1371:36" pos:end="1371:50">(<argument pos:start="1371:37" pos:end="1371:37"><expr pos:start="1371:37" pos:end="1371:37"><literal type="number" pos:start="1371:37" pos:end="1371:37">0</literal></expr></argument>, <argument pos:start="1371:40" pos:end="1371:49"><expr pos:start="1371:40" pos:end="1371:49"><name pos:start="1371:40" pos:end="1371:41">rm</name> <operator pos:start="1371:43" pos:end="1371:43">*</operator> <literal type="number" pos:start="1371:45" pos:end="1371:47">2</literal> <operator pos:start="1371:47" pos:end="1371:47">+</operator> <literal type="number" pos:start="1371:49" pos:end="1371:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1373:19" pos:end="1387:17">else <block pos:start="1373:24" pos:end="1387:17">{<block_content pos:start="1375:21" pos:end="1385:47">

                    <expr_stmt pos:start="1375:21" pos:end="1375:42"><expr pos:start="1375:21" pos:end="1375:41"><name pos:start="1375:21" pos:end="1375:23">tmp</name> <operator pos:start="1375:25" pos:end="1375:25">=</operator> <call pos:start="1375:27" pos:end="1375:41"><name pos:start="1375:27" pos:end="1375:34">load_reg</name><argument_list pos:start="1375:35" pos:end="1375:41">(<argument pos:start="1375:36" pos:end="1375:36"><expr pos:start="1375:36" pos:end="1375:36"><name pos:start="1375:36" pos:end="1375:36">s</name></expr></argument>, <argument pos:start="1375:39" pos:end="1375:40"><expr pos:start="1375:39" pos:end="1375:40"><name pos:start="1375:39" pos:end="1375:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1377:21" pos:end="1377:37"><expr pos:start="1377:21" pos:end="1377:36"><call pos:start="1377:21" pos:end="1377:36"><name pos:start="1377:21" pos:end="1377:31">gen_vfp_msr</name><argument_list pos:start="1377:32" pos:end="1377:36">(<argument pos:start="1377:33" pos:end="1377:35"><expr pos:start="1377:33" pos:end="1377:35"><name pos:start="1377:33" pos:end="1377:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1379:21" pos:end="1379:43"><expr pos:start="1379:21" pos:end="1379:42"><call pos:start="1379:21" pos:end="1379:42"><name pos:start="1379:21" pos:end="1379:35">gen_mov_vreg_F0</name><argument_list pos:start="1379:36" pos:end="1379:42">(<argument pos:start="1379:37" pos:end="1379:37"><expr pos:start="1379:37" pos:end="1379:37"><literal type="number" pos:start="1379:37" pos:end="1379:37">0</literal></expr></argument>, <argument pos:start="1379:40" pos:end="1379:41"><expr pos:start="1379:40" pos:end="1379:41"><name pos:start="1379:40" pos:end="1379:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1381:21" pos:end="1381:42"><expr pos:start="1381:21" pos:end="1381:41"><name pos:start="1381:21" pos:end="1381:23">tmp</name> <operator pos:start="1381:25" pos:end="1381:25">=</operator> <call pos:start="1381:27" pos:end="1381:41"><name pos:start="1381:27" pos:end="1381:34">load_reg</name><argument_list pos:start="1381:35" pos:end="1381:41">(<argument pos:start="1381:36" pos:end="1381:36"><expr pos:start="1381:36" pos:end="1381:36"><name pos:start="1381:36" pos:end="1381:36">s</name></expr></argument>, <argument pos:start="1381:39" pos:end="1381:40"><expr pos:start="1381:39" pos:end="1381:40"><name pos:start="1381:39" pos:end="1381:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1383:21" pos:end="1383:37"><expr pos:start="1383:21" pos:end="1383:36"><call pos:start="1383:21" pos:end="1383:36"><name pos:start="1383:21" pos:end="1383:31">gen_vfp_msr</name><argument_list pos:start="1383:32" pos:end="1383:36">(<argument pos:start="1383:33" pos:end="1383:35"><expr pos:start="1383:33" pos:end="1383:35"><name pos:start="1383:33" pos:end="1383:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1385:21" pos:end="1385:47"><expr pos:start="1385:21" pos:end="1385:46"><call pos:start="1385:21" pos:end="1385:46"><name pos:start="1385:21" pos:end="1385:35">gen_mov_vreg_F0</name><argument_list pos:start="1385:36" pos:end="1385:46">(<argument pos:start="1385:37" pos:end="1385:37"><expr pos:start="1385:37" pos:end="1385:37"><literal type="number" pos:start="1385:37" pos:end="1385:37">0</literal></expr></argument>, <argument pos:start="1385:40" pos:end="1385:45"><expr pos:start="1385:40" pos:end="1385:45"><name pos:start="1385:40" pos:end="1385:41">rm</name> <operator pos:start="1385:43" pos:end="1385:43">+</operator> <literal type="number" pos:start="1385:45" pos:end="1385:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1391:11" pos:end="1577:9">else <block pos:start="1391:16" pos:end="1577:9">{<block_content pos:start="1395:13" pos:end="1575:13">

            <comment type="block" pos:start="1393:13" pos:end="1393:28">/* Load/store */</comment>

            <expr_stmt pos:start="1395:13" pos:end="1395:36"><expr pos:start="1395:13" pos:end="1395:35"><name pos:start="1395:13" pos:end="1395:14">rn</name> <operator pos:start="1395:16" pos:end="1395:16">=</operator> <operator pos:start="1395:18" pos:end="1395:18">(</operator><name pos:start="1395:19" pos:end="1395:22">insn</name> <operator pos:start="1395:24" pos:end="1395:25">&gt;&gt;</operator> <literal type="number" pos:start="1395:27" pos:end="1395:28">16</literal><operator pos:start="1395:29" pos:end="1395:29">)</operator> <operator pos:start="1395:31" pos:end="1395:31">&amp;</operator> <literal type="number" pos:start="1395:33" pos:end="1395:35">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1397:13" pos:end="1403:38"><if pos:start="1397:13" pos:end="1399:37">if <condition pos:start="1397:16" pos:end="1397:19">(<expr pos:start="1397:17" pos:end="1397:18"><name pos:start="1397:17" pos:end="1397:18">dp</name></expr>)</condition><block type="pseudo" pos:start="1399:17" pos:end="1399:37"><block_content pos:start="1399:17" pos:end="1399:37">

                <expr_stmt pos:start="1399:17" pos:end="1399:37"><expr pos:start="1399:17" pos:end="1399:36"><call pos:start="1399:17" pos:end="1399:36"><name pos:start="1399:17" pos:end="1399:26">VFP_DREG_D</name><argument_list pos:start="1399:27" pos:end="1399:36">(<argument pos:start="1399:28" pos:end="1399:29"><expr pos:start="1399:28" pos:end="1399:29"><name pos:start="1399:28" pos:end="1399:29">rd</name></expr></argument>, <argument pos:start="1399:32" pos:end="1399:35"><expr pos:start="1399:32" pos:end="1399:35"><name pos:start="1399:32" pos:end="1399:35">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1401:13" pos:end="1403:38">else<block type="pseudo" pos:start="1403:17" pos:end="1403:38"><block_content pos:start="1403:17" pos:end="1403:38">

                <expr_stmt pos:start="1403:17" pos:end="1403:38"><expr pos:start="1403:17" pos:end="1403:37"><name pos:start="1403:17" pos:end="1403:18">rd</name> <operator pos:start="1403:20" pos:end="1403:20">=</operator> <call pos:start="1403:22" pos:end="1403:37"><name pos:start="1403:22" pos:end="1403:31">VFP_SREG_D</name><argument_list pos:start="1403:32" pos:end="1403:37">(<argument pos:start="1403:33" pos:end="1403:36"><expr pos:start="1403:33" pos:end="1403:36"><name pos:start="1403:33" pos:end="1403:36">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="1405:13" pos:end="1575:13"><if pos:start="1405:13" pos:end="1447:13">if <condition pos:start="1405:16" pos:end="1405:50">(<expr pos:start="1405:17" pos:end="1405:49"><operator pos:start="1405:17" pos:end="1405:17">(</operator><name pos:start="1405:18" pos:end="1405:21">insn</name> <operator pos:start="1405:23" pos:end="1405:23">&amp;</operator> <literal type="number" pos:start="1405:25" pos:end="1405:34">0x01200000</literal><operator pos:start="1405:35" pos:end="1405:35">)</operator> <operator pos:start="1405:37" pos:end="1405:38">==</operator> <literal type="number" pos:start="1405:40" pos:end="1405:49">0x01000000</literal></expr>)</condition> <block pos:start="1405:52" pos:end="1447:13">{<block_content pos:start="1409:17" pos:end="1445:40">

                <comment type="block" pos:start="1407:17" pos:end="1407:39">/* Single load/store */</comment>

                <expr_stmt pos:start="1409:17" pos:end="1409:44"><expr pos:start="1409:17" pos:end="1409:43"><name pos:start="1409:17" pos:end="1409:22">offset</name> <operator pos:start="1409:24" pos:end="1409:24">=</operator> <operator pos:start="1409:26" pos:end="1409:26">(</operator><name pos:start="1409:27" pos:end="1409:30">insn</name> <operator pos:start="1409:32" pos:end="1409:32">&amp;</operator> <literal type="number" pos:start="1409:34" pos:end="1409:37">0xff</literal><operator pos:start="1409:38" pos:end="1409:38">)</operator> <operator pos:start="1409:40" pos:end="1409:41">&lt;&lt;</operator> <literal type="number" pos:start="1409:43" pos:end="1409:43">2</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1411:17" pos:end="1413:37"><if pos:start="1411:17" pos:end="1413:37">if <condition pos:start="1411:20" pos:end="1411:44">(<expr pos:start="1411:21" pos:end="1411:43"><operator pos:start="1411:21" pos:end="1411:21">(</operator><name pos:start="1411:22" pos:end="1411:25">insn</name> <operator pos:start="1411:27" pos:end="1411:27">&amp;</operator> <operator pos:start="1411:29" pos:end="1411:29">(</operator><literal type="number" pos:start="1411:30" pos:end="1411:30">1</literal> <operator pos:start="1411:32" pos:end="1411:33">&lt;&lt;</operator> <literal type="number" pos:start="1411:35" pos:end="1411:36">23</literal><operator pos:start="1411:37" pos:end="1411:37">)</operator><operator pos:start="1411:38" pos:end="1411:38">)</operator> <operator pos:start="1411:40" pos:end="1411:41">==</operator> <literal type="number" pos:start="1411:43" pos:end="1411:43">0</literal></expr>)</condition><block type="pseudo" pos:start="1413:21" pos:end="1413:37"><block_content pos:start="1413:21" pos:end="1413:37">

                    <expr_stmt pos:start="1413:21" pos:end="1413:37"><expr pos:start="1413:21" pos:end="1413:36"><name pos:start="1413:21" pos:end="1413:26">offset</name> <operator pos:start="1413:28" pos:end="1413:28">=</operator> <operator pos:start="1413:30" pos:end="1413:30">-</operator><name pos:start="1413:31" pos:end="1413:36">offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="1415:17" pos:end="1427:17"><if pos:start="1415:17" pos:end="1423:17">if <condition pos:start="1415:20" pos:end="1415:41">(<expr pos:start="1415:21" pos:end="1415:40"><name pos:start="1415:21" pos:end="1415:28"><name pos:start="1415:21" pos:end="1415:21">s</name><operator pos:start="1415:22" pos:end="1415:23">-&gt;</operator><name pos:start="1415:24" pos:end="1415:28">thumb</name></name> <operator pos:start="1415:30" pos:end="1415:31">&amp;&amp;</operator> <name pos:start="1415:33" pos:end="1415:34">rn</name> <operator pos:start="1415:36" pos:end="1415:37">==</operator> <literal type="number" pos:start="1415:39" pos:end="1415:40">15</literal></expr>)</condition> <block pos:start="1415:43" pos:end="1423:17">{<block_content pos:start="1419:21" pos:end="1421:55">

                    <comment type="block" pos:start="1417:21" pos:end="1417:56">/* This is actually UNPREDICTABLE */</comment>

                    <expr_stmt pos:start="1419:21" pos:end="1419:46"><expr pos:start="1419:21" pos:end="1419:45"><name pos:start="1419:21" pos:end="1419:24">addr</name> <operator pos:start="1419:26" pos:end="1419:26">=</operator> <call pos:start="1419:28" pos:end="1419:45"><name pos:start="1419:28" pos:end="1419:43">tcg_temp_new_i32</name><argument_list pos:start="1419:44" pos:end="1419:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1421:21" pos:end="1421:55"><expr pos:start="1421:21" pos:end="1421:54"><call pos:start="1421:21" pos:end="1421:54"><name pos:start="1421:21" pos:end="1421:36">tcg_gen_movi_i32</name><argument_list pos:start="1421:37" pos:end="1421:54">(<argument pos:start="1421:38" pos:end="1421:41"><expr pos:start="1421:38" pos:end="1421:41"><name pos:start="1421:38" pos:end="1421:41">addr</name></expr></argument>, <argument pos:start="1421:44" pos:end="1421:53"><expr pos:start="1421:44" pos:end="1421:53"><name pos:start="1421:44" pos:end="1421:48"><name pos:start="1421:44" pos:end="1421:44">s</name><operator pos:start="1421:45" pos:end="1421:46">-&gt;</operator><name pos:start="1421:47" pos:end="1421:48">pc</name></name> <operator pos:start="1421:50" pos:end="1421:50">&amp;</operator> <operator pos:start="1421:52" pos:end="1421:52">~</operator><literal type="number" pos:start="1421:53" pos:end="1421:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1423:19" pos:end="1427:17">else <block pos:start="1423:24" pos:end="1427:17">{<block_content pos:start="1425:21" pos:end="1425:43">

                    <expr_stmt pos:start="1425:21" pos:end="1425:43"><expr pos:start="1425:21" pos:end="1425:42"><name pos:start="1425:21" pos:end="1425:24">addr</name> <operator pos:start="1425:26" pos:end="1425:26">=</operator> <call pos:start="1425:28" pos:end="1425:42"><name pos:start="1425:28" pos:end="1425:35">load_reg</name><argument_list pos:start="1425:36" pos:end="1425:42">(<argument pos:start="1425:37" pos:end="1425:37"><expr pos:start="1425:37" pos:end="1425:37"><name pos:start="1425:37" pos:end="1425:37">s</name></expr></argument>, <argument pos:start="1425:40" pos:end="1425:41"><expr pos:start="1425:40" pos:end="1425:41"><name pos:start="1425:40" pos:end="1425:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1429:17" pos:end="1429:53"><expr pos:start="1429:17" pos:end="1429:52"><call pos:start="1429:17" pos:end="1429:52"><name pos:start="1429:17" pos:end="1429:32">tcg_gen_addi_i32</name><argument_list pos:start="1429:33" pos:end="1429:52">(<argument pos:start="1429:34" pos:end="1429:37"><expr pos:start="1429:34" pos:end="1429:37"><name pos:start="1429:34" pos:end="1429:37">addr</name></expr></argument>, <argument pos:start="1429:40" pos:end="1429:43"><expr pos:start="1429:40" pos:end="1429:43"><name pos:start="1429:40" pos:end="1429:43">addr</name></expr></argument>, <argument pos:start="1429:46" pos:end="1429:51"><expr pos:start="1429:46" pos:end="1429:51"><name pos:start="1429:46" pos:end="1429:51">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1431:17" pos:end="1443:17"><if pos:start="1431:17" pos:end="1437:17">if <condition pos:start="1431:20" pos:end="1431:37">(<expr pos:start="1431:21" pos:end="1431:36"><name pos:start="1431:21" pos:end="1431:24">insn</name> <operator pos:start="1431:26" pos:end="1431:26">&amp;</operator> <operator pos:start="1431:28" pos:end="1431:28">(</operator><literal type="number" pos:start="1431:29" pos:end="1431:29">1</literal> <operator pos:start="1431:31" pos:end="1431:32">&lt;&lt;</operator> <literal type="number" pos:start="1431:34" pos:end="1431:35">20</literal><operator pos:start="1431:36" pos:end="1431:36">)</operator></expr>)</condition> <block pos:start="1431:39" pos:end="1437:17">{<block_content pos:start="1433:21" pos:end="1435:44">

                    <expr_stmt pos:start="1433:21" pos:end="1433:44"><expr pos:start="1433:21" pos:end="1433:43"><call pos:start="1433:21" pos:end="1433:43"><name pos:start="1433:21" pos:end="1433:30">gen_vfp_ld</name><argument_list pos:start="1433:31" pos:end="1433:43">(<argument pos:start="1433:32" pos:end="1433:32"><expr pos:start="1433:32" pos:end="1433:32"><name pos:start="1433:32" pos:end="1433:32">s</name></expr></argument>, <argument pos:start="1433:35" pos:end="1433:36"><expr pos:start="1433:35" pos:end="1433:36"><name pos:start="1433:35" pos:end="1433:36">dp</name></expr></argument>, <argument pos:start="1433:39" pos:end="1433:42"><expr pos:start="1433:39" pos:end="1433:42"><name pos:start="1433:39" pos:end="1433:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1435:21" pos:end="1435:44"><expr pos:start="1435:21" pos:end="1435:43"><call pos:start="1435:21" pos:end="1435:43"><name pos:start="1435:21" pos:end="1435:35">gen_mov_vreg_F0</name><argument_list pos:start="1435:36" pos:end="1435:43">(<argument pos:start="1435:37" pos:end="1435:38"><expr pos:start="1435:37" pos:end="1435:38"><name pos:start="1435:37" pos:end="1435:38">dp</name></expr></argument>, <argument pos:start="1435:41" pos:end="1435:42"><expr pos:start="1435:41" pos:end="1435:42"><name pos:start="1435:41" pos:end="1435:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1437:19" pos:end="1443:17">else <block pos:start="1437:24" pos:end="1443:17">{<block_content pos:start="1439:21" pos:end="1441:44">

                    <expr_stmt pos:start="1439:21" pos:end="1439:44"><expr pos:start="1439:21" pos:end="1439:43"><call pos:start="1439:21" pos:end="1439:43"><name pos:start="1439:21" pos:end="1439:35">gen_mov_F0_vreg</name><argument_list pos:start="1439:36" pos:end="1439:43">(<argument pos:start="1439:37" pos:end="1439:38"><expr pos:start="1439:37" pos:end="1439:38"><name pos:start="1439:37" pos:end="1439:38">dp</name></expr></argument>, <argument pos:start="1439:41" pos:end="1439:42"><expr pos:start="1439:41" pos:end="1439:42"><name pos:start="1439:41" pos:end="1439:42">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1441:21" pos:end="1441:44"><expr pos:start="1441:21" pos:end="1441:43"><call pos:start="1441:21" pos:end="1441:43"><name pos:start="1441:21" pos:end="1441:30">gen_vfp_st</name><argument_list pos:start="1441:31" pos:end="1441:43">(<argument pos:start="1441:32" pos:end="1441:32"><expr pos:start="1441:32" pos:end="1441:32"><name pos:start="1441:32" pos:end="1441:32">s</name></expr></argument>, <argument pos:start="1441:35" pos:end="1441:36"><expr pos:start="1441:35" pos:end="1441:36"><name pos:start="1441:35" pos:end="1441:36">dp</name></expr></argument>, <argument pos:start="1441:39" pos:end="1441:42"><expr pos:start="1441:39" pos:end="1441:42"><name pos:start="1441:39" pos:end="1441:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1445:17" pos:end="1445:40"><expr pos:start="1445:17" pos:end="1445:39"><call pos:start="1445:17" pos:end="1445:39"><name pos:start="1445:17" pos:end="1445:33">tcg_temp_free_i32</name><argument_list pos:start="1445:34" pos:end="1445:39">(<argument pos:start="1445:35" pos:end="1445:38"><expr pos:start="1445:35" pos:end="1445:38"><name pos:start="1445:35" pos:end="1445:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1447:15" pos:end="1575:13">else <block pos:start="1447:20" pos:end="1575:13">{<block_content pos:start="1451:17" pos:end="1573:17">

                <comment type="block" pos:start="1449:17" pos:end="1449:41">/* load/store multiple */</comment>

                <decl_stmt pos:start="1451:17" pos:end="1451:41"><decl pos:start="1451:17" pos:end="1451:40"><type pos:start="1451:17" pos:end="1451:19"><name pos:start="1451:17" pos:end="1451:19">int</name></type> <name pos:start="1451:21" pos:end="1451:21">w</name> <init pos:start="1451:23" pos:end="1451:40">= <expr pos:start="1451:25" pos:end="1451:40"><name pos:start="1451:25" pos:end="1451:28">insn</name> <operator pos:start="1451:30" pos:end="1451:30">&amp;</operator> <operator pos:start="1451:32" pos:end="1451:32">(</operator><literal type="number" pos:start="1451:33" pos:end="1451:33">1</literal> <operator pos:start="1451:35" pos:end="1451:36">&lt;&lt;</operator> <literal type="number" pos:start="1451:38" pos:end="1451:39">21</literal><operator pos:start="1451:40" pos:end="1451:40">)</operator></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="1453:17" pos:end="1459:36"><if pos:start="1453:17" pos:end="1455:43">if <condition pos:start="1453:20" pos:end="1453:23">(<expr pos:start="1453:21" pos:end="1453:22"><name pos:start="1453:21" pos:end="1453:22">dp</name></expr>)</condition><block type="pseudo" pos:start="1455:21" pos:end="1455:43"><block_content pos:start="1455:21" pos:end="1455:43">

                    <expr_stmt pos:start="1455:21" pos:end="1455:43"><expr pos:start="1455:21" pos:end="1455:42"><name pos:start="1455:21" pos:end="1455:21">n</name> <operator pos:start="1455:23" pos:end="1455:23">=</operator> <operator pos:start="1455:25" pos:end="1455:25">(</operator><name pos:start="1455:26" pos:end="1455:29">insn</name> <operator pos:start="1455:31" pos:end="1455:32">&gt;&gt;</operator> <literal type="number" pos:start="1455:34" pos:end="1455:34">1</literal><operator pos:start="1455:35" pos:end="1455:35">)</operator> <operator pos:start="1455:37" pos:end="1455:37">&amp;</operator> <literal type="number" pos:start="1455:39" pos:end="1455:42">0x7f</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1457:17" pos:end="1459:36">else<block type="pseudo" pos:start="1459:21" pos:end="1459:36"><block_content pos:start="1459:21" pos:end="1459:36">

                    <expr_stmt pos:start="1459:21" pos:end="1459:36"><expr pos:start="1459:21" pos:end="1459:35"><name pos:start="1459:21" pos:end="1459:21">n</name> <operator pos:start="1459:23" pos:end="1459:23">=</operator> <name pos:start="1459:25" pos:end="1459:28">insn</name> <operator pos:start="1459:30" pos:end="1459:30">&amp;</operator> <literal type="number" pos:start="1459:32" pos:end="1459:35">0xff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <if_stmt pos:start="1463:17" pos:end="1469:17"><if pos:start="1463:17" pos:end="1469:17">if <condition pos:start="1463:20" pos:end="1463:62">(<expr pos:start="1463:21" pos:end="1463:61"><name pos:start="1463:21" pos:end="1463:21">w</name> <operator pos:start="1463:23" pos:end="1463:24">&amp;&amp;</operator> <operator pos:start="1463:26" pos:end="1463:26">!</operator><operator pos:start="1463:27" pos:end="1463:27">(</operator><operator pos:start="1463:28" pos:end="1463:28">(</operator><operator pos:start="1463:29" pos:end="1463:29">(</operator><name pos:start="1463:30" pos:end="1463:33">insn</name> <operator pos:start="1463:35" pos:end="1463:36">&gt;&gt;</operator> <literal type="number" pos:start="1463:38" pos:end="1463:39">23</literal><operator pos:start="1463:40" pos:end="1463:40">)</operator> <operator pos:start="1463:42" pos:end="1463:42">^</operator> <operator pos:start="1463:44" pos:end="1463:44">(</operator><name pos:start="1463:45" pos:end="1463:48">insn</name> <operator pos:start="1463:50" pos:end="1463:51">&gt;&gt;</operator> <literal type="number" pos:start="1463:53" pos:end="1463:54">24</literal><operator pos:start="1463:55" pos:end="1463:55">)</operator><operator pos:start="1463:56" pos:end="1463:56">)</operator> <operator pos:start="1463:58" pos:end="1463:58">&amp;</operator> <literal type="number" pos:start="1463:60" pos:end="1463:60">1</literal><operator pos:start="1463:61" pos:end="1463:61">)</operator></expr>)</condition> <block pos:start="1463:64" pos:end="1469:17">{<block_content pos:start="1467:21" pos:end="1467:29">

                    <comment type="block" pos:start="1465:21" pos:end="1465:51">/* P == U , W == 1  =&gt; UNDEF */</comment>

                    <return pos:start="1467:21" pos:end="1467:29">return <expr pos:start="1467:28" pos:end="1467:28"><literal type="number" pos:start="1467:28" pos:end="1467:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1471:17" pos:end="1481:17"><if pos:start="1471:17" pos:end="1481:17">if <condition pos:start="1471:20" pos:end="1471:62">(<expr pos:start="1471:21" pos:end="1471:61"><name pos:start="1471:21" pos:end="1471:21">n</name> <operator pos:start="1471:23" pos:end="1471:24">==</operator> <literal type="number" pos:start="1471:26" pos:end="1471:26">0</literal> <operator pos:start="1471:28" pos:end="1471:29">||</operator> <operator pos:start="1471:31" pos:end="1471:31">(</operator><name pos:start="1471:32" pos:end="1471:33">rd</name> <operator pos:start="1471:35" pos:end="1471:35">+</operator> <name pos:start="1471:37" pos:end="1471:37">n</name><operator pos:start="1471:38" pos:end="1471:38">)</operator> <operator pos:start="1471:40" pos:end="1471:40">&gt;</operator> <literal type="number" pos:start="1471:42" pos:end="1471:43">32</literal> <operator pos:start="1471:45" pos:end="1471:46">||</operator> <operator pos:start="1471:48" pos:end="1471:48">(</operator><name pos:start="1471:49" pos:end="1471:50">dp</name> <operator pos:start="1471:52" pos:end="1471:53">&amp;&amp;</operator> <name pos:start="1471:55" pos:end="1471:55">n</name> <operator pos:start="1471:57" pos:end="1471:57">&gt;</operator> <literal type="number" pos:start="1471:59" pos:end="1471:60">16</literal><operator pos:start="1471:61" pos:end="1471:61">)</operator></expr>)</condition> <block pos:start="1471:64" pos:end="1481:17">{<block_content pos:start="1479:21" pos:end="1479:29">

                    <comment type="block" pos:start="1473:21" pos:end="1477:23">/* UNPREDICTABLE cases for bad immediates: we choose to

                     * UNDEF to avoid generating huge numbers of TCG ops

                     */</comment>

                    <return pos:start="1479:21" pos:end="1479:29">return <expr pos:start="1479:28" pos:end="1479:28"><literal type="number" pos:start="1479:28" pos:end="1479:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1483:17" pos:end="1489:17"><if pos:start="1483:17" pos:end="1489:17">if <condition pos:start="1483:20" pos:end="1483:34">(<expr pos:start="1483:21" pos:end="1483:33"><name pos:start="1483:21" pos:end="1483:22">rn</name> <operator pos:start="1483:24" pos:end="1483:25">==</operator> <literal type="number" pos:start="1483:27" pos:end="1483:28">15</literal> <operator pos:start="1483:30" pos:end="1483:31">&amp;&amp;</operator> <name pos:start="1483:33" pos:end="1483:33">w</name></expr>)</condition> <block pos:start="1483:36" pos:end="1489:17">{<block_content pos:start="1487:21" pos:end="1487:29">

                    <comment type="block" pos:start="1485:21" pos:end="1485:78">/* writeback to PC is UNPREDICTABLE, we choose to UNDEF */</comment>

                    <return pos:start="1487:21" pos:end="1487:29">return <expr pos:start="1487:28" pos:end="1487:28"><literal type="number" pos:start="1487:28" pos:end="1487:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="1493:17" pos:end="1505:17"><if pos:start="1493:17" pos:end="1501:17">if <condition pos:start="1493:20" pos:end="1493:41">(<expr pos:start="1493:21" pos:end="1493:40"><name pos:start="1493:21" pos:end="1493:28"><name pos:start="1493:21" pos:end="1493:21">s</name><operator pos:start="1493:22" pos:end="1493:23">-&gt;</operator><name pos:start="1493:24" pos:end="1493:28">thumb</name></name> <operator pos:start="1493:30" pos:end="1493:31">&amp;&amp;</operator> <name pos:start="1493:33" pos:end="1493:34">rn</name> <operator pos:start="1493:36" pos:end="1493:37">==</operator> <literal type="number" pos:start="1493:39" pos:end="1493:40">15</literal></expr>)</condition> <block pos:start="1493:43" pos:end="1501:17">{<block_content pos:start="1497:21" pos:end="1499:55">

                    <comment type="block" pos:start="1495:21" pos:end="1495:56">/* This is actually UNPREDICTABLE */</comment>

                    <expr_stmt pos:start="1497:21" pos:end="1497:46"><expr pos:start="1497:21" pos:end="1497:45"><name pos:start="1497:21" pos:end="1497:24">addr</name> <operator pos:start="1497:26" pos:end="1497:26">=</operator> <call pos:start="1497:28" pos:end="1497:45"><name pos:start="1497:28" pos:end="1497:43">tcg_temp_new_i32</name><argument_list pos:start="1497:44" pos:end="1497:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1499:21" pos:end="1499:55"><expr pos:start="1499:21" pos:end="1499:54"><call pos:start="1499:21" pos:end="1499:54"><name pos:start="1499:21" pos:end="1499:36">tcg_gen_movi_i32</name><argument_list pos:start="1499:37" pos:end="1499:54">(<argument pos:start="1499:38" pos:end="1499:41"><expr pos:start="1499:38" pos:end="1499:41"><name pos:start="1499:38" pos:end="1499:41">addr</name></expr></argument>, <argument pos:start="1499:44" pos:end="1499:53"><expr pos:start="1499:44" pos:end="1499:53"><name pos:start="1499:44" pos:end="1499:48"><name pos:start="1499:44" pos:end="1499:44">s</name><operator pos:start="1499:45" pos:end="1499:46">-&gt;</operator><name pos:start="1499:47" pos:end="1499:48">pc</name></name> <operator pos:start="1499:50" pos:end="1499:50">&amp;</operator> <operator pos:start="1499:52" pos:end="1499:52">~</operator><literal type="number" pos:start="1499:53" pos:end="1499:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1501:19" pos:end="1505:17">else <block pos:start="1501:24" pos:end="1505:17">{<block_content pos:start="1503:21" pos:end="1503:43">

                    <expr_stmt pos:start="1503:21" pos:end="1503:43"><expr pos:start="1503:21" pos:end="1503:42"><name pos:start="1503:21" pos:end="1503:24">addr</name> <operator pos:start="1503:26" pos:end="1503:26">=</operator> <call pos:start="1503:28" pos:end="1503:42"><name pos:start="1503:28" pos:end="1503:35">load_reg</name><argument_list pos:start="1503:36" pos:end="1503:42">(<argument pos:start="1503:37" pos:end="1503:37"><expr pos:start="1503:37" pos:end="1503:37"><name pos:start="1503:37" pos:end="1503:37">s</name></expr></argument>, <argument pos:start="1503:40" pos:end="1503:41"><expr pos:start="1503:40" pos:end="1503:41"><name pos:start="1503:40" pos:end="1503:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="1507:17" pos:end="1509:72"><if pos:start="1507:17" pos:end="1509:72">if <condition pos:start="1507:20" pos:end="1507:37">(<expr pos:start="1507:21" pos:end="1507:36"><name pos:start="1507:21" pos:end="1507:24">insn</name> <operator pos:start="1507:26" pos:end="1507:26">&amp;</operator> <operator pos:start="1507:28" pos:end="1507:28">(</operator><literal type="number" pos:start="1507:29" pos:end="1507:29">1</literal> <operator pos:start="1507:31" pos:end="1507:32">&lt;&lt;</operator> <literal type="number" pos:start="1507:34" pos:end="1507:35">24</literal><operator pos:start="1507:36" pos:end="1507:36">)</operator></expr>)</condition><block type="pseudo" pos:start="1509:21" pos:end="1509:72"><block_content pos:start="1509:21" pos:end="1509:72"> <comment type="block" pos:start="1507:39" pos:end="1507:57">/* pre-decrement */</comment>

                    <expr_stmt pos:start="1509:21" pos:end="1509:72"><expr pos:start="1509:21" pos:end="1509:71"><call pos:start="1509:21" pos:end="1509:71"><name pos:start="1509:21" pos:end="1509:36">tcg_gen_addi_i32</name><argument_list pos:start="1509:37" pos:end="1509:71">(<argument pos:start="1509:38" pos:end="1509:41"><expr pos:start="1509:38" pos:end="1509:41"><name pos:start="1509:38" pos:end="1509:41">addr</name></expr></argument>, <argument pos:start="1509:44" pos:end="1509:47"><expr pos:start="1509:44" pos:end="1509:47"><name pos:start="1509:44" pos:end="1509:47">addr</name></expr></argument>, <argument pos:start="1509:50" pos:end="1509:70"><expr pos:start="1509:50" pos:end="1509:70"><operator pos:start="1509:50" pos:end="1509:50">-</operator><operator pos:start="1509:51" pos:end="1509:51">(</operator><operator pos:start="1509:52" pos:end="1509:52">(</operator><name pos:start="1509:53" pos:end="1509:56">insn</name> <operator pos:start="1509:58" pos:end="1509:58">&amp;</operator> <literal type="number" pos:start="1509:60" pos:end="1509:63">0xff</literal><operator pos:start="1509:64" pos:end="1509:64">)</operator> <operator pos:start="1509:66" pos:end="1509:67">&lt;&lt;</operator> <literal type="number" pos:start="1509:69" pos:end="1509:69">2</literal><operator pos:start="1509:70" pos:end="1509:70">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="1513:17" pos:end="1519:31"><if pos:start="1513:17" pos:end="1515:31">if <condition pos:start="1513:20" pos:end="1513:23">(<expr pos:start="1513:21" pos:end="1513:22"><name pos:start="1513:21" pos:end="1513:22">dp</name></expr>)</condition><block type="pseudo" pos:start="1515:21" pos:end="1515:31"><block_content pos:start="1515:21" pos:end="1515:31">

                    <expr_stmt pos:start="1515:21" pos:end="1515:31"><expr pos:start="1515:21" pos:end="1515:30"><name pos:start="1515:21" pos:end="1515:26">offset</name> <operator pos:start="1515:28" pos:end="1515:28">=</operator> <literal type="number" pos:start="1515:30" pos:end="1515:30">8</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1517:17" pos:end="1519:31">else<block type="pseudo" pos:start="1519:21" pos:end="1519:31"><block_content pos:start="1519:21" pos:end="1519:31">

                    <expr_stmt pos:start="1519:21" pos:end="1519:31"><expr pos:start="1519:21" pos:end="1519:30"><name pos:start="1519:21" pos:end="1519:26">offset</name> <operator pos:start="1519:28" pos:end="1519:28">=</operator> <literal type="number" pos:start="1519:30" pos:end="1519:30">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <for pos:start="1521:17" pos:end="1543:17">for <control pos:start="1521:21" pos:end="1521:39">(<init pos:start="1521:22" pos:end="1521:27"><expr pos:start="1521:22" pos:end="1521:26"><name pos:start="1521:22" pos:end="1521:22">i</name> <operator pos:start="1521:24" pos:end="1521:24">=</operator> <literal type="number" pos:start="1521:26" pos:end="1521:26">0</literal></expr>;</init> <condition pos:start="1521:29" pos:end="1521:34"><expr pos:start="1521:29" pos:end="1521:33"><name pos:start="1521:29" pos:end="1521:29">i</name> <operator pos:start="1521:31" pos:end="1521:31">&lt;</operator> <name pos:start="1521:33" pos:end="1521:33">n</name></expr>;</condition> <incr pos:start="1521:36" pos:end="1521:38"><expr pos:start="1521:36" pos:end="1521:38"><name pos:start="1521:36" pos:end="1521:36">i</name><operator pos:start="1521:37" pos:end="1521:38">++</operator></expr></incr>)</control> <block pos:start="1521:41" pos:end="1543:17">{<block_content pos:start="1523:21" pos:end="1541:57">

                    <if_stmt pos:start="1523:21" pos:end="1539:21"><if pos:start="1523:21" pos:end="1531:21">if <condition pos:start="1523:24" pos:end="1523:45">(<expr pos:start="1523:25" pos:end="1523:44"><name pos:start="1523:25" pos:end="1523:28">insn</name> <operator pos:start="1523:30" pos:end="1523:30">&amp;</operator> <name pos:start="1523:32" pos:end="1523:44">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="1523:47" pos:end="1531:21">{<block_content pos:start="1527:25" pos:end="1529:52">

                        <comment type="block" pos:start="1525:25" pos:end="1525:34">/* load */</comment>

                        <expr_stmt pos:start="1527:25" pos:end="1527:48"><expr pos:start="1527:25" pos:end="1527:47"><call pos:start="1527:25" pos:end="1527:47"><name pos:start="1527:25" pos:end="1527:34">gen_vfp_ld</name><argument_list pos:start="1527:35" pos:end="1527:47">(<argument pos:start="1527:36" pos:end="1527:36"><expr pos:start="1527:36" pos:end="1527:36"><name pos:start="1527:36" pos:end="1527:36">s</name></expr></argument>, <argument pos:start="1527:39" pos:end="1527:40"><expr pos:start="1527:39" pos:end="1527:40"><name pos:start="1527:39" pos:end="1527:40">dp</name></expr></argument>, <argument pos:start="1527:43" pos:end="1527:46"><expr pos:start="1527:43" pos:end="1527:46"><name pos:start="1527:43" pos:end="1527:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1529:25" pos:end="1529:52"><expr pos:start="1529:25" pos:end="1529:51"><call pos:start="1529:25" pos:end="1529:51"><name pos:start="1529:25" pos:end="1529:39">gen_mov_vreg_F0</name><argument_list pos:start="1529:40" pos:end="1529:51">(<argument pos:start="1529:41" pos:end="1529:42"><expr pos:start="1529:41" pos:end="1529:42"><name pos:start="1529:41" pos:end="1529:42">dp</name></expr></argument>, <argument pos:start="1529:45" pos:end="1529:50"><expr pos:start="1529:45" pos:end="1529:50"><name pos:start="1529:45" pos:end="1529:46">rd</name> <operator pos:start="1529:48" pos:end="1529:48">+</operator> <name pos:start="1529:50" pos:end="1529:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1531:23" pos:end="1539:21">else <block pos:start="1531:28" pos:end="1539:21">{<block_content pos:start="1535:25" pos:end="1537:48">

                        <comment type="block" pos:start="1533:25" pos:end="1533:35">/* store */</comment>

                        <expr_stmt pos:start="1535:25" pos:end="1535:52"><expr pos:start="1535:25" pos:end="1535:51"><call pos:start="1535:25" pos:end="1535:51"><name pos:start="1535:25" pos:end="1535:39">gen_mov_F0_vreg</name><argument_list pos:start="1535:40" pos:end="1535:51">(<argument pos:start="1535:41" pos:end="1535:42"><expr pos:start="1535:41" pos:end="1535:42"><name pos:start="1535:41" pos:end="1535:42">dp</name></expr></argument>, <argument pos:start="1535:45" pos:end="1535:50"><expr pos:start="1535:45" pos:end="1535:50"><name pos:start="1535:45" pos:end="1535:46">rd</name> <operator pos:start="1535:48" pos:end="1535:48">+</operator> <name pos:start="1535:50" pos:end="1535:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1537:25" pos:end="1537:48"><expr pos:start="1537:25" pos:end="1537:47"><call pos:start="1537:25" pos:end="1537:47"><name pos:start="1537:25" pos:end="1537:34">gen_vfp_st</name><argument_list pos:start="1537:35" pos:end="1537:47">(<argument pos:start="1537:36" pos:end="1537:36"><expr pos:start="1537:36" pos:end="1537:36"><name pos:start="1537:36" pos:end="1537:36">s</name></expr></argument>, <argument pos:start="1537:39" pos:end="1537:40"><expr pos:start="1537:39" pos:end="1537:40"><name pos:start="1537:39" pos:end="1537:40">dp</name></expr></argument>, <argument pos:start="1537:43" pos:end="1537:46"><expr pos:start="1537:43" pos:end="1537:46"><name pos:start="1537:43" pos:end="1537:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1541:21" pos:end="1541:57"><expr pos:start="1541:21" pos:end="1541:56"><call pos:start="1541:21" pos:end="1541:56"><name pos:start="1541:21" pos:end="1541:36">tcg_gen_addi_i32</name><argument_list pos:start="1541:37" pos:end="1541:56">(<argument pos:start="1541:38" pos:end="1541:41"><expr pos:start="1541:38" pos:end="1541:41"><name pos:start="1541:38" pos:end="1541:41">addr</name></expr></argument>, <argument pos:start="1541:44" pos:end="1541:47"><expr pos:start="1541:44" pos:end="1541:47"><name pos:start="1541:44" pos:end="1541:47">addr</name></expr></argument>, <argument pos:start="1541:50" pos:end="1541:55"><expr pos:start="1541:50" pos:end="1541:55"><name pos:start="1541:50" pos:end="1541:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="1545:17" pos:end="1573:17"><if pos:start="1545:17" pos:end="1569:17">if <condition pos:start="1545:20" pos:end="1545:22">(<expr pos:start="1545:21" pos:end="1545:21"><name pos:start="1545:21" pos:end="1545:21">w</name></expr>)</condition> <block pos:start="1545:24" pos:end="1569:17">{<block_content pos:start="1549:21" pos:end="1567:43">

                    <comment type="block" pos:start="1547:21" pos:end="1547:35">/* writeback */</comment>

                    <if_stmt pos:start="1549:21" pos:end="1559:35"><if pos:start="1549:21" pos:end="1551:45">if <condition pos:start="1549:24" pos:end="1549:41">(<expr pos:start="1549:25" pos:end="1549:40"><name pos:start="1549:25" pos:end="1549:28">insn</name> <operator pos:start="1549:30" pos:end="1549:30">&amp;</operator> <operator pos:start="1549:32" pos:end="1549:32">(</operator><literal type="number" pos:start="1549:33" pos:end="1549:33">1</literal> <operator pos:start="1549:35" pos:end="1549:36">&lt;&lt;</operator> <literal type="number" pos:start="1549:38" pos:end="1549:39">24</literal><operator pos:start="1549:40" pos:end="1549:40">)</operator></expr>)</condition><block type="pseudo" pos:start="1551:25" pos:end="1551:45"><block_content pos:start="1551:25" pos:end="1551:45">

                        <expr_stmt pos:start="1551:25" pos:end="1551:45"><expr pos:start="1551:25" pos:end="1551:44"><name pos:start="1551:25" pos:end="1551:30">offset</name> <operator pos:start="1551:32" pos:end="1551:32">=</operator> <operator pos:start="1551:34" pos:end="1551:34">-</operator><name pos:start="1551:35" pos:end="1551:40">offset</name> <operator pos:start="1551:42" pos:end="1551:42">*</operator> <name pos:start="1551:44" pos:end="1551:44">n</name></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="1553:21" pos:end="1555:35">else if <condition pos:start="1553:29" pos:end="1553:46">(<expr pos:start="1553:30" pos:end="1553:45"><name pos:start="1553:30" pos:end="1553:31">dp</name> <operator pos:start="1553:33" pos:end="1553:34">&amp;&amp;</operator> <operator pos:start="1553:36" pos:end="1553:36">(</operator><name pos:start="1553:37" pos:end="1553:40">insn</name> <operator pos:start="1553:42" pos:end="1553:42">&amp;</operator> <literal type="number" pos:start="1553:44" pos:end="1553:44">1</literal><operator pos:start="1553:45" pos:end="1553:45">)</operator></expr>)</condition><block type="pseudo" pos:start="1555:25" pos:end="1555:35"><block_content pos:start="1555:25" pos:end="1555:35">

                        <expr_stmt pos:start="1555:25" pos:end="1555:35"><expr pos:start="1555:25" pos:end="1555:34"><name pos:start="1555:25" pos:end="1555:30">offset</name> <operator pos:start="1555:32" pos:end="1555:32">=</operator> <literal type="number" pos:start="1555:34" pos:end="1555:34">4</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1557:21" pos:end="1559:35">else<block type="pseudo" pos:start="1559:25" pos:end="1559:35"><block_content pos:start="1559:25" pos:end="1559:35">

                        <expr_stmt pos:start="1559:25" pos:end="1559:35"><expr pos:start="1559:25" pos:end="1559:34"><name pos:start="1559:25" pos:end="1559:30">offset</name> <operator pos:start="1559:32" pos:end="1559:32">=</operator> <literal type="number" pos:start="1559:34" pos:end="1559:34">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <if_stmt pos:start="1563:21" pos:end="1565:61"><if pos:start="1563:21" pos:end="1565:61">if <condition pos:start="1563:24" pos:end="1563:36">(<expr pos:start="1563:25" pos:end="1563:35"><name pos:start="1563:25" pos:end="1563:30">offset</name> <operator pos:start="1563:32" pos:end="1563:33">!=</operator> <literal type="number" pos:start="1563:35" pos:end="1563:35">0</literal></expr>)</condition><block type="pseudo" pos:start="1565:25" pos:end="1565:61"><block_content pos:start="1565:25" pos:end="1565:61">

                        <expr_stmt pos:start="1565:25" pos:end="1565:61"><expr pos:start="1565:25" pos:end="1565:60"><call pos:start="1565:25" pos:end="1565:60"><name pos:start="1565:25" pos:end="1565:40">tcg_gen_addi_i32</name><argument_list pos:start="1565:41" pos:end="1565:60">(<argument pos:start="1565:42" pos:end="1565:45"><expr pos:start="1565:42" pos:end="1565:45"><name pos:start="1565:42" pos:end="1565:45">addr</name></expr></argument>, <argument pos:start="1565:48" pos:end="1565:51"><expr pos:start="1565:48" pos:end="1565:51"><name pos:start="1565:48" pos:end="1565:51">addr</name></expr></argument>, <argument pos:start="1565:54" pos:end="1565:59"><expr pos:start="1565:54" pos:end="1565:59"><name pos:start="1565:54" pos:end="1565:59">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="1567:21" pos:end="1567:43"><expr pos:start="1567:21" pos:end="1567:42"><call pos:start="1567:21" pos:end="1567:42"><name pos:start="1567:21" pos:end="1567:29">store_reg</name><argument_list pos:start="1567:30" pos:end="1567:42">(<argument pos:start="1567:31" pos:end="1567:31"><expr pos:start="1567:31" pos:end="1567:31"><name pos:start="1567:31" pos:end="1567:31">s</name></expr></argument>, <argument pos:start="1567:34" pos:end="1567:35"><expr pos:start="1567:34" pos:end="1567:35"><name pos:start="1567:34" pos:end="1567:35">rn</name></expr></argument>, <argument pos:start="1567:38" pos:end="1567:41"><expr pos:start="1567:38" pos:end="1567:41"><name pos:start="1567:38" pos:end="1567:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1569:19" pos:end="1573:17">else <block pos:start="1569:24" pos:end="1573:17">{<block_content pos:start="1571:21" pos:end="1571:44">

                    <expr_stmt pos:start="1571:21" pos:end="1571:44"><expr pos:start="1571:21" pos:end="1571:43"><call pos:start="1571:21" pos:end="1571:43"><name pos:start="1571:21" pos:end="1571:37">tcg_temp_free_i32</name><argument_list pos:start="1571:38" pos:end="1571:43">(<argument pos:start="1571:39" pos:end="1571:42"><expr pos:start="1571:39" pos:end="1571:42"><name pos:start="1571:39" pos:end="1571:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1579:9" pos:end="1579:14">break;</break>

    <default pos:start="1581:5" pos:end="1581:12">default:</default>

        <comment type="block" pos:start="1583:9" pos:end="1583:35">/* Should never happen.  */</comment>

        <return pos:start="1585:9" pos:end="1585:17">return <expr pos:start="1585:16" pos:end="1585:16"><literal type="number" pos:start="1585:16" pos:end="1585:16">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <return pos:start="1589:5" pos:end="1589:13">return <expr pos:start="1589:12" pos:end="1589:12"><literal type="number" pos:start="1589:12" pos:end="1589:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
