<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3248.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">xen_pt_config_reg_init</name><parameter_list pos:start="1:34" pos:end="3:76">(<parameter pos:start="1:35" pos:end="1:59"><decl pos:start="1:35" pos:end="1:59"><type pos:start="1:35" pos:end="1:59"><name pos:start="1:35" pos:end="1:56">XenPCIPassthroughState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:56"><decl pos:start="3:35" pos:end="3:56"><type pos:start="3:35" pos:end="3:56"><name pos:start="3:35" pos:end="3:47">XenPTRegGroup</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:56">reg_grp</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:75"><decl pos:start="3:59" pos:end="3:75"><type pos:start="3:59" pos:end="3:75"><name pos:start="3:59" pos:end="3:70">XenPTRegInfo</name> <modifier pos:start="3:72" pos:end="3:72">*</modifier></type><name pos:start="3:73" pos:end="3:75">reg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:13">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">XenPTReg</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:23">reg_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">data</name> <init pos:start="9:19" pos:end="9:21">= <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name> <init pos:start="11:12" pos:end="11:14">= <expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:36"><expr pos:start="15:5" pos:end="15:35"><name pos:start="15:5" pos:end="15:13">reg_entry</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <call pos:start="15:17" pos:end="15:35"><name pos:start="15:17" pos:end="15:22">g_new0</name><argument_list pos:start="15:23" pos:end="15:35">(<argument pos:start="15:24" pos:end="15:31"><expr pos:start="15:24" pos:end="15:31"><name pos:start="15:24" pos:end="15:31">XenPTReg</name></expr></argument>, <argument pos:start="15:34" pos:end="15:34"><expr pos:start="15:34" pos:end="15:34"><literal type="number" pos:start="15:34" pos:end="15:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:13">reg_entry</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:18">reg</name></name> <operator pos:start="17:20" pos:end="17:20">=</operator> <name pos:start="17:22" pos:end="17:24">reg</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="51:5"><if pos:start="21:5" pos:end="51:5">if <condition pos:start="21:8" pos:end="21:18">(<expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:11">reg</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:17">init</name></name></expr>)</condition> <block pos:start="21:20" pos:end="51:5">{<block_content pos:start="25:9" pos:end="49:31">

        <comment type="block" pos:start="23:9" pos:end="23:41">/* initialize emulate register */</comment>

        <expr_stmt pos:start="25:9" pos:end="27:66"><expr pos:start="25:9" pos:end="27:65"><name pos:start="25:9" pos:end="25:10">rc</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="27:65"><name pos:start="25:14" pos:end="25:22"><name pos:start="25:14" pos:end="25:16">reg</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:22">init</name></name><argument_list pos:start="25:23" pos:end="27:65">(<argument pos:start="25:24" pos:end="25:24"><expr pos:start="25:24" pos:end="25:24"><name pos:start="25:24" pos:end="25:24">s</name></expr></argument>, <argument pos:start="25:27" pos:end="25:40"><expr pos:start="25:27" pos:end="25:40"><name pos:start="25:27" pos:end="25:40"><name pos:start="25:27" pos:end="25:35">reg_entry</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:40">reg</name></name></expr></argument>,

                       <argument pos:start="27:24" pos:end="27:57"><expr pos:start="27:24" pos:end="27:57"><name pos:start="27:24" pos:end="27:43"><name pos:start="27:24" pos:end="27:30">reg_grp</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:43">base_offset</name></name> <operator pos:start="27:45" pos:end="27:45">+</operator> <name pos:start="27:47" pos:end="27:57"><name pos:start="27:47" pos:end="27:49">reg</name><operator pos:start="27:50" pos:end="27:51">-&gt;</operator><name pos:start="27:52" pos:end="27:57">offset</name></name></expr></argument>, <argument pos:start="27:60" pos:end="27:64"><expr pos:start="27:60" pos:end="27:64"><operator pos:start="27:60" pos:end="27:60">&amp;</operator><name pos:start="27:61" pos:end="27:64">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:19">(<expr pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:14">rc</name> <operator pos:start="29:16" pos:end="29:16">&lt;</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>)</condition> <block pos:start="29:21" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:22">

            <expr_stmt pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:27"><call pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:16">free</name><argument_list pos:start="31:17" pos:end="31:27">(<argument pos:start="31:18" pos:end="31:26"><expr pos:start="31:18" pos:end="31:26"><name pos:start="31:18" pos:end="31:26">reg_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:22">return <expr pos:start="33:20" pos:end="33:21"><name pos:start="33:20" pos:end="33:21">rc</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:39">(<expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:16">data</name> <operator pos:start="37:18" pos:end="37:19">==</operator> <name pos:start="37:21" pos:end="37:38">XEN_PT_INVALID_REG</name></expr>)</condition> <block pos:start="37:41" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:21">

            <comment type="block" pos:start="39:13" pos:end="39:48">/* free unused BAR register entry */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:28"><expr pos:start="41:13" pos:end="41:27"><call pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:16">free</name><argument_list pos:start="41:17" pos:end="41:27">(<argument pos:start="41:18" pos:end="41:26"><expr pos:start="41:18" pos:end="41:26"><name pos:start="41:18" pos:end="41:26">reg_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:21">return <expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="47:9" pos:end="47:32">/* set register value */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:17">reg_entry</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:23">data</name></name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:30">data</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="53:5" pos:end="53:33">/* list add register entry */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:66"><expr pos:start="55:5" pos:end="55:65"><call pos:start="55:5" pos:end="55:65"><name pos:start="55:5" pos:end="55:21">QLIST_INSERT_HEAD</name><argument_list pos:start="55:22" pos:end="55:65">(<argument pos:start="55:23" pos:end="55:44"><expr pos:start="55:23" pos:end="55:44"><operator pos:start="55:23" pos:end="55:23">&amp;</operator><name pos:start="55:24" pos:end="55:44"><name pos:start="55:24" pos:end="55:30">reg_grp</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:44">reg_tbl_list</name></name></expr></argument>, <argument pos:start="55:47" pos:end="55:55"><expr pos:start="55:47" pos:end="55:55"><name pos:start="55:47" pos:end="55:55">reg_entry</name></expr></argument>, <argument pos:start="55:58" pos:end="55:64"><expr pos:start="55:58" pos:end="55:64"><name pos:start="55:58" pos:end="55:64">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
