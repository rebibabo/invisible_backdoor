<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22742.c" pos:tabs="8"><function pos:start="1:1" pos:end="289:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">flic_decode_frame_8BPP</name><parameter_list pos:start="1:34" pos:end="3:67">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>,
                                  <parameter pos:start="2:35" pos:end="2:44"><decl pos:start="2:35" pos:end="2:44"><type pos:start="2:35" pos:end="2:44"><name pos:start="2:35" pos:end="2:38">void</name> <modifier pos:start="2:40" pos:end="2:40">*</modifier></type><name pos:start="2:41" pos:end="2:44">data</name></decl></parameter>, <parameter pos:start="2:47" pos:end="2:60"><decl pos:start="2:47" pos:end="2:60"><type pos:start="2:47" pos:end="2:60"><name pos:start="2:47" pos:end="2:49">int</name> <modifier pos:start="2:51" pos:end="2:51">*</modifier></type><name pos:start="2:52" pos:end="2:60">got_frame</name></decl></parameter>,
                                  <parameter pos:start="3:35" pos:end="3:52"><decl pos:start="3:35" pos:end="3:52"><type pos:start="3:35" pos:end="3:52"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:47">uint8_t</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:52">buf</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:66"><decl pos:start="3:55" pos:end="3:66"><type pos:start="3:55" pos:end="3:66"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:66">buf_size</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="289:1">{<block_content pos:start="5:5" pos:end="288:20">
    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">FlicDecodeContext</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:43">= <expr pos:start="5:28" pos:end="5:43"><name pos:start="5:28" pos:end="5:43"><name pos:start="5:28" pos:end="5:32">avctx</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:43">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:22"><decl pos:start="6:5" pos:end="6:21"><type pos:start="6:5" pos:end="6:18"><name pos:start="6:5" pos:end="6:18">GetByteContext</name></type> <name pos:start="6:20" pos:end="6:21">g2</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">pixel_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:20"><decl pos:start="8:5" pos:end="8:19"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:19">palette_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">char</name></type> <name pos:start="9:19" pos:end="9:30">palette_idx1</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:31"><decl pos:start="10:5" pos:end="10:30"><type pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:12">unsigned</name> <name pos:start="10:14" pos:end="10:17">char</name></type> <name pos:start="10:19" pos:end="10:30">palette_idx2</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:27">frame_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:19"><decl pos:start="12:5" pos:end="12:18"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:18">num_chunks</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:27">chunk_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:19"><decl pos:start="14:5" pos:end="14:18"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:18">chunk_type</name></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">j</name></decl>, <decl pos:start="15:15" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:17">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:22"><decl pos:start="16:5" pos:end="16:21"><type pos:start="16:5" pos:end="16:7"><name pos:start="16:5" pos:end="16:7">int</name></type> <name pos:start="16:9" pos:end="16:21">color_packets</name></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:21">color_changes</name></decl>;</decl_stmt>
    <decl_stmt pos:start="18:5" pos:end="18:20"><decl pos:start="18:5" pos:end="18:19"><type pos:start="18:5" pos:end="18:7"><name pos:start="18:5" pos:end="18:7">int</name></type> <name pos:start="18:9" pos:end="18:19">color_shift</name></decl>;</decl_stmt>
    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:17">char</name></type> <name pos:start="19:19" pos:end="19:19">r</name></decl>, <decl pos:start="19:22" pos:end="19:22"><type ref="prev" pos:start="19:5" pos:end="19:17"/><name pos:start="19:22" pos:end="19:22">g</name></decl>, <decl pos:start="19:25" pos:end="19:25"><type ref="prev" pos:start="19:5" pos:end="19:17"/><name pos:start="19:25" pos:end="19:25">b</name></decl>;</decl_stmt>
    <decl_stmt pos:start="20:5" pos:end="20:14"><decl pos:start="20:5" pos:end="20:13"><type pos:start="20:5" pos:end="20:7"><name pos:start="20:5" pos:end="20:7">int</name></type> <name pos:start="20:9" pos:end="20:13">lines</name></decl>;</decl_stmt>
    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:24">compressed_lines</name></decl>;</decl_stmt>
    <decl_stmt pos:start="22:5" pos:end="22:22"><decl pos:start="22:5" pos:end="22:21"><type pos:start="22:5" pos:end="22:7"><name pos:start="22:5" pos:end="22:7">int</name></type> <name pos:start="22:9" pos:end="22:21">starting_line</name></decl>;</decl_stmt>
    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:10">signed</name> <name pos:start="23:12" pos:end="23:16">short</name></type> <name pos:start="23:18" pos:end="23:29">line_packets</name></decl>;</decl_stmt>
    <decl_stmt pos:start="24:5" pos:end="24:14"><decl pos:start="24:5" pos:end="24:13"><type pos:start="24:5" pos:end="24:7"><name pos:start="24:5" pos:end="24:7">int</name></type> <name pos:start="24:9" pos:end="24:13">y_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">byte_run</name></decl>;</decl_stmt>
    <decl_stmt pos:start="26:5" pos:end="26:19"><decl pos:start="26:5" pos:end="26:18"><type pos:start="26:5" pos:end="26:7"><name pos:start="26:5" pos:end="26:7">int</name></type> <name pos:start="26:9" pos:end="26:18">pixel_skip</name></decl>;</decl_stmt>
    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:23">pixel_countdown</name></decl>;</decl_stmt>
    <decl_stmt pos:start="28:5" pos:end="28:26"><decl pos:start="28:5" pos:end="28:25"><type pos:start="28:5" pos:end="28:19"><name pos:start="28:5" pos:end="28:12">unsigned</name> <name pos:start="28:14" pos:end="28:17">char</name> <modifier pos:start="28:19" pos:end="28:19">*</modifier></type><name pos:start="28:20" pos:end="28:25">pixels</name></decl>;</decl_stmt>
    <decl_stmt pos:start="29:5" pos:end="29:29"><decl pos:start="29:5" pos:end="29:28"><type pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:16">int</name></type> <name pos:start="29:18" pos:end="29:28">pixel_limit</name></decl>;</decl_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:41"><expr pos:start="30:5" pos:end="30:40"><call pos:start="30:5" pos:end="30:40"><name pos:start="30:5" pos:end="30:20">bytestream2_init</name><argument_list pos:start="30:21" pos:end="30:40">(<argument pos:start="30:22" pos:end="30:24"><expr pos:start="30:22" pos:end="30:24"><operator pos:start="30:22" pos:end="30:22">&amp;</operator><name pos:start="30:23" pos:end="30:24">g2</name></expr></argument>, <argument pos:start="30:27" pos:end="30:29"><expr pos:start="30:27" pos:end="30:29"><name pos:start="30:27" pos:end="30:29">buf</name></expr></argument>, <argument pos:start="30:32" pos:end="30:39"><expr pos:start="30:32" pos:end="30:39"><name pos:start="30:32" pos:end="30:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="31:5" pos:end="32:19"><if pos:start="31:5" pos:end="32:19">if <condition pos:start="31:8" pos:end="31:53">(<expr pos:start="31:9" pos:end="31:52"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:12">ret</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:47"><name pos:start="31:16" pos:end="31:30">ff_reget_buffer</name><argument_list pos:start="31:31" pos:end="31:47">(<argument pos:start="31:32" pos:end="31:36"><expr pos:start="31:32" pos:end="31:36"><name pos:start="31:32" pos:end="31:36">avctx</name></expr></argument>, <argument pos:start="31:39" pos:end="31:46"><expr pos:start="31:39" pos:end="31:46"><name pos:start="31:39" pos:end="31:46"><name pos:start="31:39" pos:end="31:39">s</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:46">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="31:48" pos:end="31:48">)</operator> <operator pos:start="31:50" pos:end="31:50">&lt;</operator> <literal type="number" pos:start="31:52" pos:end="31:52">0</literal></expr>)</condition><block type="pseudo" pos:start="32:9" pos:end="32:19"><block_content pos:start="32:9" pos:end="32:19">
        <return pos:start="32:9" pos:end="32:19">return <expr pos:start="32:16" pos:end="32:18"><name pos:start="32:16" pos:end="32:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:10">pixels</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:30"><name pos:start="33:14" pos:end="33:14">s</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:21">frame</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:27">data</name><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><literal type="number" pos:start="33:29" pos:end="33:29">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:59"><expr pos:start="34:5" pos:end="34:58"><name pos:start="34:5" pos:end="34:15">pixel_limit</name> <operator pos:start="34:17" pos:end="34:17">=</operator> <name pos:start="34:19" pos:end="34:34"><name pos:start="34:19" pos:end="34:19">s</name><operator pos:start="34:20" pos:end="34:21">-&gt;</operator><name pos:start="34:22" pos:end="34:26">avctx</name><operator pos:start="34:27" pos:end="34:28">-&gt;</operator><name pos:start="34:29" pos:end="34:34">height</name></name> <operator pos:start="34:36" pos:end="34:36">*</operator> <name pos:start="34:38" pos:end="34:58"><name pos:start="34:38" pos:end="34:38">s</name><operator pos:start="34:39" pos:end="34:40">-&gt;</operator><name pos:start="34:41" pos:end="34:45">frame</name><operator pos:start="34:46" pos:end="34:47">-&gt;</operator><name pos:start="34:48" pos:end="34:55">linesize</name><index pos:start="34:56" pos:end="34:58">[<expr pos:start="34:57" pos:end="34:57"><literal type="number" pos:start="34:57" pos:end="34:57">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt pos:start="35:5" pos:end="36:43"><if pos:start="35:5" pos:end="36:43">if <condition pos:start="35:8" pos:end="35:87">(<expr pos:start="35:9" pos:end="35:86"><name pos:start="35:9" pos:end="35:35"><name pos:start="35:9" pos:end="35:16">buf_size</name> <argument_list type="generic" pos:start="35:18" pos:end="35:35">&lt; <argument pos:start="35:20" pos:end="35:33"><expr pos:start="35:20" pos:end="35:33"><literal type="number" pos:start="35:20" pos:end="35:21">16</literal> <operator pos:start="35:23" pos:end="35:24">||</operator> <name pos:start="35:26" pos:end="35:33">buf_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="35:37" pos:end="35:43">INT_MAX</name> <operator pos:start="35:45" pos:end="35:45">-</operator> <operator pos:start="35:47" pos:end="35:47">(</operator><literal type="number" pos:start="35:48" pos:end="35:48">3</literal> <operator pos:start="35:50" pos:end="35:50">*</operator> <literal type="number" pos:start="35:52" pos:end="35:56">256</literal> <operator pos:start="35:56" pos:end="35:56">+</operator> <name pos:start="35:58" pos:end="35:85">AV_INPUT_BUFFER_PADDING_SIZE</name><operator pos:start="35:86" pos:end="35:86">)</operator></expr>)</condition><block type="pseudo" pos:start="36:5" pos:end="36:43"><block_content pos:start="36:5" pos:end="36:43">
    <expr_stmt pos:start="36:5" pos:end="36:43"><expr pos:start="36:5" pos:end="36:42"><name pos:start="36:5" pos:end="36:14">frame_size</name> <operator pos:start="36:16" pos:end="36:16">=</operator> <call pos:start="36:18" pos:end="36:42"><name pos:start="36:18" pos:end="36:37">bytestream2_get_le32</name><argument_list pos:start="36:38" pos:end="36:42">(<argument pos:start="36:39" pos:end="36:41"><expr pos:start="36:39" pos:end="36:41"><operator pos:start="36:39" pos:end="36:39">&amp;</operator><name pos:start="36:40" pos:end="36:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="37:5" pos:end="38:30"><if pos:start="37:5" pos:end="38:30">if <condition pos:start="37:8" pos:end="37:30">(<expr pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:18">frame_size</name> <operator pos:start="37:20" pos:end="37:20">&gt;</operator> <name pos:start="37:22" pos:end="37:29">buf_size</name></expr>)</condition><block type="pseudo" pos:start="38:9" pos:end="38:30"><block_content pos:start="38:9" pos:end="38:30">
        <expr_stmt pos:start="38:9" pos:end="38:30"><expr pos:start="38:9" pos:end="38:29"><name pos:start="38:9" pos:end="38:18">frame_size</name> <operator pos:start="38:20" pos:end="38:20">=</operator> <name pos:start="38:22" pos:end="38:29">buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><call pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:20">bytestream2_skip</name><argument_list pos:start="39:21" pos:end="39:28">(<argument pos:start="39:22" pos:end="39:24"><expr pos:start="39:22" pos:end="39:24"><operator pos:start="39:22" pos:end="39:22">&amp;</operator><name pos:start="39:23" pos:end="39:24">g2</name></expr></argument>, <argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><literal type="number" pos:start="39:27" pos:end="39:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:31" pos:end="39:57">/* skip the magic number */</comment>
    <expr_stmt pos:start="40:5" pos:end="40:43"><expr pos:start="40:5" pos:end="40:42"><name pos:start="40:5" pos:end="40:14">num_chunks</name> <operator pos:start="40:16" pos:end="40:16">=</operator> <call pos:start="40:18" pos:end="40:42"><name pos:start="40:18" pos:end="40:37">bytestream2_get_le16</name><argument_list pos:start="40:38" pos:end="40:42">(<argument pos:start="40:39" pos:end="40:41"><expr pos:start="40:39" pos:end="40:41"><operator pos:start="40:39" pos:end="40:39">&amp;</operator><name pos:start="40:40" pos:end="40:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><call pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:20">bytestream2_skip</name><argument_list pos:start="41:21" pos:end="41:28">(<argument pos:start="41:22" pos:end="41:24"><expr pos:start="41:22" pos:end="41:24"><operator pos:start="41:22" pos:end="41:22">&amp;</operator><name pos:start="41:23" pos:end="41:24">g2</name></expr></argument>, <argument pos:start="41:27" pos:end="41:27"><expr pos:start="41:27" pos:end="41:27"><literal type="number" pos:start="41:27" pos:end="41:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="41:32" pos:end="41:49">/* skip padding */</comment>
    <expr_stmt pos:start="42:5" pos:end="42:21"><expr pos:start="42:5" pos:end="42:20"><name pos:start="42:5" pos:end="42:14">frame_size</name> <operator pos:start="42:16" pos:end="42:17">-=</operator> <literal type="number" pos:start="42:19" pos:end="42:20">16</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="43:5" pos:end="43:36">/* iterate through the chunks */</comment>
    <while pos:start="44:5" pos:end="272:5">while <condition pos:start="44:11" pos:end="45:49">(<expr pos:start="44:12" pos:end="45:48"><operator pos:start="44:12" pos:end="44:12">(</operator><name pos:start="44:13" pos:end="44:22">frame_size</name> <operator pos:start="44:24" pos:end="44:25">&gt;=</operator> <literal type="number" pos:start="44:27" pos:end="44:27">6</literal><operator pos:start="44:28" pos:end="44:28">)</operator> <operator pos:start="44:30" pos:end="44:31">&amp;&amp;</operator> <operator pos:start="44:33" pos:end="44:33">(</operator><name pos:start="44:34" pos:end="44:43">num_chunks</name> <operator pos:start="44:45" pos:end="44:45">&gt;</operator> <literal type="number" pos:start="44:47" pos:end="44:47">0</literal><operator pos:start="44:48" pos:end="44:48">)</operator> <operator pos:start="44:50" pos:end="44:51">&amp;&amp;</operator>
            <call pos:start="45:13" pos:end="45:43"><name pos:start="45:13" pos:end="45:38">bytestream2_get_bytes_left</name><argument_list pos:start="45:39" pos:end="45:43">(<argument pos:start="45:40" pos:end="45:42"><expr pos:start="45:40" pos:end="45:42"><operator pos:start="45:40" pos:end="45:40">&amp;</operator><name pos:start="45:41" pos:end="45:42">g2</name></expr></argument>)</argument_list></call> <operator pos:start="45:45" pos:end="45:46">&gt;=</operator> <literal type="number" pos:start="45:48" pos:end="45:48">4</literal></expr>)</condition> <block pos:start="45:51" pos:end="272:5">{<block_content pos:start="46:9" pos:end="271:21">
        <decl_stmt pos:start="46:9" pos:end="46:35"><decl pos:start="46:9" pos:end="46:34"><type pos:start="46:9" pos:end="46:11"><name pos:start="46:9" pos:end="46:11">int</name></type> <name pos:start="46:13" pos:end="46:34">stream_ptr_after_chunk</name></decl>;</decl_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:47"><expr pos:start="47:9" pos:end="47:46"><name pos:start="47:9" pos:end="47:18">chunk_size</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:46"><name pos:start="47:22" pos:end="47:41">bytestream2_get_le32</name><argument_list pos:start="47:42" pos:end="47:46">(<argument pos:start="47:43" pos:end="47:45"><expr pos:start="47:43" pos:end="47:45"><operator pos:start="47:43" pos:end="47:43">&amp;</operator><name pos:start="47:44" pos:end="47:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="48:9" pos:end="52:9"><if pos:start="48:9" pos:end="52:9">if <condition pos:start="48:12" pos:end="48:36">(<expr pos:start="48:13" pos:end="48:35"><name pos:start="48:13" pos:end="48:22">chunk_size</name> <operator pos:start="48:24" pos:end="48:24">&gt;</operator> <name pos:start="48:26" pos:end="48:35">frame_size</name></expr>)</condition> <block pos:start="48:38" pos:end="52:9">{<block_content pos:start="49:13" pos:end="51:36">
            <expr_stmt pos:start="49:13" pos:end="50:90"><expr pos:start="49:13" pos:end="50:89"><call pos:start="49:13" pos:end="50:89"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="50:89">(<argument pos:start="49:20" pos:end="49:24"><expr pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:24">avctx</name></expr></argument>, <argument pos:start="49:27" pos:end="49:40"><expr pos:start="49:27" pos:end="49:40"><name pos:start="49:27" pos:end="49:40">AV_LOG_WARNING</name></expr></argument>,
                   <argument pos:start="50:20" pos:end="50:64"><expr pos:start="50:20" pos:end="50:64"><literal type="string" pos:start="50:20" pos:end="50:64">"Invalid chunk_size = %u &gt; frame_size = %u\n"</literal></expr></argument>, <argument pos:start="50:67" pos:end="50:76"><expr pos:start="50:67" pos:end="50:76"><name pos:start="50:67" pos:end="50:76">chunk_size</name></expr></argument>, <argument pos:start="50:79" pos:end="50:88"><expr pos:start="50:79" pos:end="50:88"><name pos:start="50:79" pos:end="50:88">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:22">chunk_size</name> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:35">frame_size</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:72"><expr pos:start="53:9" pos:end="53:71"><name pos:start="53:9" pos:end="53:30">stream_ptr_after_chunk</name> <operator pos:start="53:32" pos:end="53:32">=</operator> <call pos:start="53:34" pos:end="53:54"><name pos:start="53:34" pos:end="53:49">bytestream2_tell</name><argument_list pos:start="53:50" pos:end="53:54">(<argument pos:start="53:51" pos:end="53:53"><expr pos:start="53:51" pos:end="53:53"><operator pos:start="53:51" pos:end="53:51">&amp;</operator><name pos:start="53:52" pos:end="53:53">g2</name></expr></argument>)</argument_list></call> <operator pos:start="53:56" pos:end="53:56">-</operator> <literal type="number" pos:start="53:58" pos:end="53:60">4</literal> <operator pos:start="53:60" pos:end="53:60">+</operator> <name pos:start="53:62" pos:end="53:71">chunk_size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:47"><expr pos:start="54:9" pos:end="54:46"><name pos:start="54:9" pos:end="54:18">chunk_type</name> <operator pos:start="54:20" pos:end="54:20">=</operator> <call pos:start="54:22" pos:end="54:46"><name pos:start="54:22" pos:end="54:41">bytestream2_get_le16</name><argument_list pos:start="54:42" pos:end="54:46">(<argument pos:start="54:43" pos:end="54:45"><expr pos:start="54:43" pos:end="54:45"><operator pos:start="54:43" pos:end="54:43">&amp;</operator><name pos:start="54:44" pos:end="54:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch pos:start="55:9" pos:end="263:9">switch <condition pos:start="55:16" pos:end="55:27">(<expr pos:start="55:17" pos:end="55:26"><name pos:start="55:17" pos:end="55:26">chunk_type</name></expr>)</condition> <block pos:start="55:29" pos:end="263:9">{<block_content pos:start="56:9" pos:end="262:18">
        <case pos:start="56:9" pos:end="56:27">case <expr pos:start="56:14" pos:end="56:26"><name pos:start="56:14" pos:end="56:26">FLI_256_COLOR</name></expr>:</case>
        <case pos:start="57:9" pos:end="57:23">case <expr pos:start="57:14" pos:end="57:22"><name pos:start="57:14" pos:end="57:22">FLI_COLOR</name></expr>:</case>
            <comment type="block" pos:start="58:13" pos:end="61:33">/* check special case: If this file is from the Magic Carpet
             * game and uses 6-bit colors even though it reports 256-color
             * chunks in a 0xAF12-type file (fli_type is set to 0xAF13 during
             * initialization) */</comment>
            <if_stmt pos:start="62:13" pos:end="65:32"><if pos:start="62:13" pos:end="63:32">if <condition pos:start="62:16" pos:end="62:103">(<expr pos:start="62:17" pos:end="62:102"><operator pos:start="62:17" pos:end="62:17">(</operator><name pos:start="62:18" pos:end="62:27">chunk_type</name> <operator pos:start="62:29" pos:end="62:30">==</operator> <name pos:start="62:32" pos:end="62:44">FLI_256_COLOR</name><operator pos:start="62:45" pos:end="62:45">)</operator> <operator pos:start="62:47" pos:end="62:48">&amp;&amp;</operator> <operator pos:start="62:50" pos:end="62:50">(</operator><name pos:start="62:51" pos:end="62:61"><name pos:start="62:51" pos:end="62:51">s</name><operator pos:start="62:52" pos:end="62:53">-&gt;</operator><name pos:start="62:54" pos:end="62:61">fli_type</name></name> <operator pos:start="62:63" pos:end="62:64">!=</operator> <name pos:start="62:66" pos:end="62:101">FLC_MAGIC_CARPET_SYNTHETIC_TYPE_CODE</name><operator pos:start="62:102" pos:end="62:102">)</operator></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:32"><block_content pos:start="63:17" pos:end="63:32">
                <expr_stmt pos:start="63:17" pos:end="63:32"><expr pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:27">color_shift</name> <operator pos:start="63:29" pos:end="63:29">=</operator> <literal type="number" pos:start="63:31" pos:end="63:31">0</literal></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="64:13" pos:end="65:32">else<block type="pseudo" pos:start="65:17" pos:end="65:32"><block_content pos:start="65:17" pos:end="65:32">
                <expr_stmt pos:start="65:17" pos:end="65:32"><expr pos:start="65:17" pos:end="65:31"><name pos:start="65:17" pos:end="65:27">color_shift</name> <operator pos:start="65:29" pos:end="65:29">=</operator> <literal type="number" pos:start="65:31" pos:end="65:31">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <comment type="block" pos:start="66:13" pos:end="66:36">/* set up the palette */</comment>
            <expr_stmt pos:start="67:13" pos:end="67:54"><expr pos:start="67:13" pos:end="67:53"><name pos:start="67:13" pos:end="67:25">color_packets</name> <operator pos:start="67:27" pos:end="67:27">=</operator> <call pos:start="67:29" pos:end="67:53"><name pos:start="67:29" pos:end="67:48">bytestream2_get_le16</name><argument_list pos:start="67:49" pos:end="67:53">(<argument pos:start="67:50" pos:end="67:52"><expr pos:start="67:50" pos:end="67:52"><operator pos:start="67:50" pos:end="67:50">&amp;</operator><name pos:start="67:51" pos:end="67:52">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:28"><expr pos:start="68:13" pos:end="68:27"><name pos:start="68:13" pos:end="68:23">palette_ptr</name> <operator pos:start="68:25" pos:end="68:25">=</operator> <literal type="number" pos:start="68:27" pos:end="68:27">0</literal></expr>;</expr_stmt>
            <for pos:start="69:13" pos:end="94:13">for <control pos:start="69:17" pos:end="69:47">(<init pos:start="69:18" pos:end="69:23"><expr pos:start="69:18" pos:end="69:22"><name pos:start="69:18" pos:end="69:18">i</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>;</init> <condition pos:start="69:25" pos:end="69:42"><expr pos:start="69:25" pos:end="69:41"><name pos:start="69:25" pos:end="69:25">i</name> <operator pos:start="69:27" pos:end="69:27">&lt;</operator> <name pos:start="69:29" pos:end="69:41">color_packets</name></expr>;</condition> <incr pos:start="69:44" pos:end="69:46"><expr pos:start="69:44" pos:end="69:46"><name pos:start="69:44" pos:end="69:44">i</name><operator pos:start="69:45" pos:end="69:46">++</operator></expr></incr>)</control> <block pos:start="69:49" pos:end="94:13">{<block_content pos:start="71:17" pos:end="93:17">
                <comment type="block" pos:start="70:17" pos:end="70:59">/* first byte is how many colors to skip */</comment>
                <expr_stmt pos:start="71:17" pos:end="71:57"><expr pos:start="71:17" pos:end="71:56"><name pos:start="71:17" pos:end="71:27">palette_ptr</name> <operator pos:start="71:29" pos:end="71:30">+=</operator> <call pos:start="71:32" pos:end="71:56"><name pos:start="71:32" pos:end="71:51">bytestream2_get_byte</name><argument_list pos:start="71:52" pos:end="71:56">(<argument pos:start="71:53" pos:end="71:55"><expr pos:start="71:53" pos:end="71:55"><operator pos:start="71:53" pos:end="71:53">&amp;</operator><name pos:start="71:54" pos:end="71:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="72:17" pos:end="72:68">/* next byte indicates how many entries to change */</comment>
                <expr_stmt pos:start="73:17" pos:end="73:58"><expr pos:start="73:17" pos:end="73:57"><name pos:start="73:17" pos:end="73:29">color_changes</name> <operator pos:start="73:31" pos:end="73:31">=</operator> <call pos:start="73:33" pos:end="73:57"><name pos:start="73:33" pos:end="73:52">bytestream2_get_byte</name><argument_list pos:start="73:53" pos:end="73:57">(<argument pos:start="73:54" pos:end="73:56"><expr pos:start="73:54" pos:end="73:56"><operator pos:start="73:54" pos:end="73:54">&amp;</operator><name pos:start="73:55" pos:end="73:56">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="74:17" pos:end="74:74">/* if there are 0 color changes, there are actually 256 */</comment>
                <if_stmt pos:start="75:17" pos:end="76:40"><if pos:start="75:17" pos:end="76:40">if <condition pos:start="75:20" pos:end="75:39">(<expr pos:start="75:21" pos:end="75:38"><name pos:start="75:21" pos:end="75:33">color_changes</name> <operator pos:start="75:35" pos:end="75:36">==</operator> <literal type="number" pos:start="75:38" pos:end="75:38">0</literal></expr>)</condition><block type="pseudo" pos:start="76:21" pos:end="76:40"><block_content pos:start="76:21" pos:end="76:40">
                    <expr_stmt pos:start="76:21" pos:end="76:40"><expr pos:start="76:21" pos:end="76:39"><name pos:start="76:21" pos:end="76:33">color_changes</name> <operator pos:start="76:35" pos:end="76:35">=</operator> <literal type="number" pos:start="76:37" pos:end="76:39">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="77:17" pos:end="78:26"><if pos:start="77:17" pos:end="78:26">if <condition pos:start="77:20" pos:end="77:87">(<expr pos:start="77:21" pos:end="77:86"><call pos:start="77:21" pos:end="77:41"><name pos:start="77:21" pos:end="77:36">bytestream2_tell</name><argument_list pos:start="77:37" pos:end="77:41">(<argument pos:start="77:38" pos:end="77:40"><expr pos:start="77:38" pos:end="77:40"><operator pos:start="77:38" pos:end="77:38">&amp;</operator><name pos:start="77:39" pos:end="77:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="77:43" pos:end="77:43">+</operator> <name pos:start="77:45" pos:end="77:57">color_changes</name> <operator pos:start="77:59" pos:end="77:59">*</operator> <literal type="number" pos:start="77:61" pos:end="77:61">3</literal> <operator pos:start="77:63" pos:end="77:63">&gt;</operator> <name pos:start="77:65" pos:end="77:86">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="78:21" pos:end="78:26"><block_content pos:start="78:21" pos:end="78:26">
                    <break pos:start="78:21" pos:end="78:26">break;</break></block_content></block></if></if_stmt>
                <for pos:start="79:17" pos:end="93:17">for <control pos:start="79:21" pos:end="79:51">(<init pos:start="79:22" pos:end="79:27"><expr pos:start="79:22" pos:end="79:26"><name pos:start="79:22" pos:end="79:22">j</name> <operator pos:start="79:24" pos:end="79:24">=</operator> <literal type="number" pos:start="79:26" pos:end="79:26">0</literal></expr>;</init> <condition pos:start="79:29" pos:end="79:46"><expr pos:start="79:29" pos:end="79:45"><name pos:start="79:29" pos:end="79:29">j</name> <operator pos:start="79:31" pos:end="79:31">&lt;</operator> <name pos:start="79:33" pos:end="79:45">color_changes</name></expr>;</condition> <incr pos:start="79:48" pos:end="79:50"><expr pos:start="79:48" pos:end="79:50"><name pos:start="79:48" pos:end="79:48">j</name><operator pos:start="79:49" pos:end="79:50">++</operator></expr></incr>)</control> <block pos:start="79:53" pos:end="93:17">{<block_content pos:start="80:21" pos:end="92:54">
                    <decl_stmt pos:start="80:21" pos:end="80:39"><decl pos:start="80:21" pos:end="80:38"><type pos:start="80:21" pos:end="80:32"><name pos:start="80:21" pos:end="80:28">unsigned</name> <name pos:start="80:30" pos:end="80:32">int</name></type> <name pos:start="80:34" pos:end="80:38">entry</name></decl>;</decl_stmt>
                    <comment type="block" pos:start="81:21" pos:end="81:55">/* wrap around, for good measure */</comment>
                    <if_stmt pos:start="82:21" pos:end="83:40"><if pos:start="82:21" pos:end="83:40">if <condition pos:start="82:24" pos:end="82:53">(<expr pos:start="82:25" pos:end="82:52"><operator pos:start="82:25" pos:end="82:25">(</operator><name pos:start="82:26" pos:end="82:33">unsigned</name><operator pos:start="82:34" pos:end="82:34">)</operator><name pos:start="82:35" pos:end="82:45">palette_ptr</name> <operator pos:start="82:47" pos:end="82:48">&gt;=</operator> <literal type="number" pos:start="82:50" pos:end="82:52">256</literal></expr>)</condition><block type="pseudo" pos:start="83:25" pos:end="83:40"><block_content pos:start="83:25" pos:end="83:40">
                        <expr_stmt pos:start="83:25" pos:end="83:40"><expr pos:start="83:25" pos:end="83:39"><name pos:start="83:25" pos:end="83:35">palette_ptr</name> <operator pos:start="83:37" pos:end="83:37">=</operator> <literal type="number" pos:start="83:39" pos:end="83:39">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="84:21" pos:end="84:65"><expr pos:start="84:21" pos:end="84:64"><name pos:start="84:21" pos:end="84:21">r</name> <operator pos:start="84:23" pos:end="84:23">=</operator> <call pos:start="84:25" pos:end="84:49"><name pos:start="84:25" pos:end="84:44">bytestream2_get_byte</name><argument_list pos:start="84:45" pos:end="84:49">(<argument pos:start="84:46" pos:end="84:48"><expr pos:start="84:46" pos:end="84:48"><operator pos:start="84:46" pos:end="84:46">&amp;</operator><name pos:start="84:47" pos:end="84:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="84:51" pos:end="84:52">&lt;&lt;</operator> <name pos:start="84:54" pos:end="84:64">color_shift</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="85:21" pos:end="85:65"><expr pos:start="85:21" pos:end="85:64"><name pos:start="85:21" pos:end="85:21">g</name> <operator pos:start="85:23" pos:end="85:23">=</operator> <call pos:start="85:25" pos:end="85:49"><name pos:start="85:25" pos:end="85:44">bytestream2_get_byte</name><argument_list pos:start="85:45" pos:end="85:49">(<argument pos:start="85:46" pos:end="85:48"><expr pos:start="85:46" pos:end="85:48"><operator pos:start="85:46" pos:end="85:46">&amp;</operator><name pos:start="85:47" pos:end="85:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="85:51" pos:end="85:52">&lt;&lt;</operator> <name pos:start="85:54" pos:end="85:64">color_shift</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="86:21" pos:end="86:65"><expr pos:start="86:21" pos:end="86:64"><name pos:start="86:21" pos:end="86:21">b</name> <operator pos:start="86:23" pos:end="86:23">=</operator> <call pos:start="86:25" pos:end="86:49"><name pos:start="86:25" pos:end="86:44">bytestream2_get_byte</name><argument_list pos:start="86:45" pos:end="86:49">(<argument pos:start="86:46" pos:end="86:48"><expr pos:start="86:46" pos:end="86:48"><operator pos:start="86:46" pos:end="86:46">&amp;</operator><name pos:start="86:47" pos:end="86:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="86:51" pos:end="86:52">&lt;&lt;</operator> <name pos:start="86:54" pos:end="86:64">color_shift</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="87:21" pos:end="87:63"><expr pos:start="87:21" pos:end="87:62"><name pos:start="87:21" pos:end="87:25">entry</name> <operator pos:start="87:27" pos:end="87:27">=</operator> <literal type="number" pos:start="87:29" pos:end="87:33">0xFFU</literal> <operator pos:start="87:35" pos:end="87:36">&lt;&lt;</operator> <literal type="number" pos:start="87:38" pos:end="87:39">24</literal> <operator pos:start="87:41" pos:end="87:41">|</operator> <name pos:start="87:43" pos:end="87:43">r</name> <operator pos:start="87:45" pos:end="87:46">&lt;&lt;</operator> <literal type="number" pos:start="87:48" pos:end="87:49">16</literal> <operator pos:start="87:51" pos:end="87:51">|</operator> <name pos:start="87:53" pos:end="87:53">g</name> <operator pos:start="87:55" pos:end="87:56">&lt;&lt;</operator> <literal type="number" pos:start="87:58" pos:end="87:58">8</literal> <operator pos:start="87:60" pos:end="87:60">|</operator> <name pos:start="87:62" pos:end="87:62">b</name></expr>;</expr_stmt>
                    <if_stmt pos:start="88:21" pos:end="89:54"><if pos:start="88:21" pos:end="89:54">if <condition pos:start="88:24" pos:end="88:41">(<expr pos:start="88:25" pos:end="88:40"><name pos:start="88:25" pos:end="88:35">color_shift</name> <operator pos:start="88:37" pos:end="88:38">==</operator> <literal type="number" pos:start="88:40" pos:end="88:40">2</literal></expr>)</condition><block type="pseudo" pos:start="89:25" pos:end="89:54"><block_content pos:start="89:25" pos:end="89:54">
                        <expr_stmt pos:start="89:25" pos:end="89:54"><expr pos:start="89:25" pos:end="89:53"><name pos:start="89:25" pos:end="89:29">entry</name> <operator pos:start="89:31" pos:end="89:32">|=</operator> <name pos:start="89:34" pos:end="89:38">entry</name> <operator pos:start="89:40" pos:end="89:41">&gt;&gt;</operator> <literal type="number" pos:start="89:43" pos:end="89:43">6</literal> <operator pos:start="89:45" pos:end="89:45">&amp;</operator> <literal type="number" pos:start="89:47" pos:end="89:53">0x30303</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt pos:start="90:21" pos:end="91:43"><if pos:start="90:21" pos:end="91:43">if <condition pos:start="90:24" pos:end="90:57">(<expr pos:start="90:25" pos:end="90:56"><name pos:start="90:25" pos:end="90:47"><name pos:start="90:25" pos:end="90:25">s</name><operator pos:start="90:26" pos:end="90:27">-&gt;</operator><name pos:start="90:28" pos:end="90:34">palette</name><index pos:start="90:35" pos:end="90:47">[<expr pos:start="90:36" pos:end="90:46"><name pos:start="90:36" pos:end="90:46">palette_ptr</name></expr>]</index></name> <operator pos:start="90:49" pos:end="90:50">!=</operator> <name pos:start="90:52" pos:end="90:56">entry</name></expr>)</condition><block type="pseudo" pos:start="91:25" pos:end="91:43"><block_content pos:start="91:25" pos:end="91:43">
                        <expr_stmt pos:start="91:25" pos:end="91:43"><expr pos:start="91:25" pos:end="91:42"><name pos:start="91:25" pos:end="91:38"><name pos:start="91:25" pos:end="91:25">s</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:38">new_palette</name></name> <operator pos:start="91:40" pos:end="91:40">=</operator> <literal type="number" pos:start="91:42" pos:end="91:42">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="92:21" pos:end="92:54"><expr pos:start="92:21" pos:end="92:53"><name pos:start="92:21" pos:end="92:45"><name pos:start="92:21" pos:end="92:21">s</name><operator pos:start="92:22" pos:end="92:23">-&gt;</operator><name pos:start="92:24" pos:end="92:30">palette</name><index pos:start="92:31" pos:end="92:45">[<expr pos:start="92:32" pos:end="92:44"><name pos:start="92:32" pos:end="92:42">palette_ptr</name><operator pos:start="92:43" pos:end="92:44">++</operator></expr>]</index></name> <operator pos:start="92:47" pos:end="92:47">=</operator> <name pos:start="92:49" pos:end="92:53">entry</name></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <break pos:start="95:13" pos:end="95:18">break;</break>
        <case pos:start="96:9" pos:end="96:23">case <expr pos:start="96:14" pos:end="96:22"><name pos:start="96:14" pos:end="96:22">FLI_DELTA</name></expr>:</case>
            <expr_stmt pos:start="97:13" pos:end="97:22"><expr pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:17">y_ptr</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <literal type="number" pos:start="97:21" pos:end="97:21">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="98:13" pos:end="98:57"><expr pos:start="98:13" pos:end="98:56"><name pos:start="98:13" pos:end="98:28">compressed_lines</name> <operator pos:start="98:30" pos:end="98:30">=</operator> <call pos:start="98:32" pos:end="98:56"><name pos:start="98:32" pos:end="98:51">bytestream2_get_le16</name><argument_list pos:start="98:52" pos:end="98:56">(<argument pos:start="98:53" pos:end="98:55"><expr pos:start="98:53" pos:end="98:55"><operator pos:start="98:53" pos:end="98:53">&amp;</operator><name pos:start="98:54" pos:end="98:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:start="99:13" pos:end="147:13">while <condition pos:start="99:19" pos:end="99:40">(<expr pos:start="99:20" pos:end="99:39"><name pos:start="99:20" pos:end="99:35">compressed_lines</name> <operator pos:start="99:37" pos:end="99:37">&gt;</operator> <literal type="number" pos:start="99:39" pos:end="99:39">0</literal></expr>)</condition> <block pos:start="99:42" pos:end="147:13">{<block_content pos:start="100:17" pos:end="146:17">
                <if_stmt pos:start="100:17" pos:end="101:26"><if pos:start="100:17" pos:end="101:26">if <condition pos:start="100:20" pos:end="100:71">(<expr pos:start="100:21" pos:end="100:70"><call pos:start="100:21" pos:end="100:41"><name pos:start="100:21" pos:end="100:36">bytestream2_tell</name><argument_list pos:start="100:37" pos:end="100:41">(<argument pos:start="100:38" pos:end="100:40"><expr pos:start="100:38" pos:end="100:40"><operator pos:start="100:38" pos:end="100:38">&amp;</operator><name pos:start="100:39" pos:end="100:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="100:43" pos:end="100:43">+</operator> <literal type="number" pos:start="100:45" pos:end="100:45">2</literal> <operator pos:start="100:47" pos:end="100:47">&gt;</operator> <name pos:start="100:49" pos:end="100:70">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="101:21" pos:end="101:26"><block_content pos:start="101:21" pos:end="101:26">
                    <break pos:start="101:21" pos:end="101:26">break;</break></block_content></block></if></if_stmt>
                <expr_stmt pos:start="102:17" pos:end="102:57"><expr pos:start="102:17" pos:end="102:56"><name pos:start="102:17" pos:end="102:28">line_packets</name> <operator pos:start="102:30" pos:end="102:30">=</operator> <call pos:start="102:32" pos:end="102:56"><name pos:start="102:32" pos:end="102:51">bytestream2_get_le16</name><argument_list pos:start="102:52" pos:end="102:56">(<argument pos:start="102:53" pos:end="102:55"><expr pos:start="102:53" pos:end="102:55"><operator pos:start="102:53" pos:end="102:53">&amp;</operator><name pos:start="102:54" pos:end="102:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="103:17" pos:end="146:17"><if pos:start="103:17" pos:end="107:17">if <condition pos:start="103:20" pos:end="103:54">(<expr pos:start="103:21" pos:end="103:53"><operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:33">line_packets</name> <operator pos:start="103:35" pos:end="103:35">&amp;</operator> <literal type="number" pos:start="103:37" pos:end="103:42">0xC000</literal><operator pos:start="103:43" pos:end="103:43">)</operator> <operator pos:start="103:45" pos:end="103:46">==</operator> <literal type="number" pos:start="103:48" pos:end="103:53">0xC000</literal></expr>)</condition> <block pos:start="103:56" pos:end="107:17">{<block_content pos:start="105:21" pos:end="106:66">
                    <comment type="line" pos:start="104:21" pos:end="104:39">// line skip opcode</comment>
                    <expr_stmt pos:start="105:21" pos:end="105:49"><expr pos:start="105:21" pos:end="105:48"><name pos:start="105:21" pos:end="105:32">line_packets</name> <operator pos:start="105:34" pos:end="105:34">=</operator> <operator pos:start="105:36" pos:end="105:36">-</operator><name pos:start="105:37" pos:end="105:48">line_packets</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="106:21" pos:end="106:66"><expr pos:start="106:21" pos:end="106:65"><name pos:start="106:21" pos:end="106:25">y_ptr</name> <operator pos:start="106:27" pos:end="106:28">+=</operator> <name pos:start="106:30" pos:end="106:41">line_packets</name> <operator pos:start="106:43" pos:end="106:43">*</operator> <name pos:start="106:45" pos:end="106:65"><name pos:start="106:45" pos:end="106:45">s</name><operator pos:start="106:46" pos:end="106:47">-&gt;</operator><name pos:start="106:48" pos:end="106:52">frame</name><operator pos:start="106:53" pos:end="106:54">-&gt;</operator><name pos:start="106:55" pos:end="106:62">linesize</name><index pos:start="106:63" pos:end="106:65">[<expr pos:start="106:64" pos:end="106:64"><literal type="number" pos:start="106:64" pos:end="106:64">0</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="107:19" pos:end="109:17">else if <condition pos:start="107:27" pos:end="107:61">(<expr pos:start="107:28" pos:end="107:60"><operator pos:start="107:28" pos:end="107:28">(</operator><name pos:start="107:29" pos:end="107:40">line_packets</name> <operator pos:start="107:42" pos:end="107:42">&amp;</operator> <literal type="number" pos:start="107:44" pos:end="107:49">0xC000</literal><operator pos:start="107:50" pos:end="107:50">)</operator> <operator pos:start="107:52" pos:end="107:53">==</operator> <literal type="number" pos:start="107:55" pos:end="107:60">0x4000</literal></expr>)</condition> <block pos:start="107:63" pos:end="109:17">{<block_content pos:start="108:21" pos:end="108:102">
                    <expr_stmt pos:start="108:21" pos:end="108:102"><expr pos:start="108:21" pos:end="108:101"><call pos:start="108:21" pos:end="108:101"><name pos:start="108:21" pos:end="108:26">av_log</name><argument_list pos:start="108:27" pos:end="108:101">(<argument pos:start="108:28" pos:end="108:32"><expr pos:start="108:28" pos:end="108:32"><name pos:start="108:28" pos:end="108:32">avctx</name></expr></argument>, <argument pos:start="108:35" pos:end="108:46"><expr pos:start="108:35" pos:end="108:46"><name pos:start="108:35" pos:end="108:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="108:49" pos:end="108:86"><expr pos:start="108:49" pos:end="108:86"><literal type="string" pos:start="108:49" pos:end="108:86">"Undefined opcode (%x) in DELTA_FLI\n"</literal></expr></argument>, <argument pos:start="108:89" pos:end="108:100"><expr pos:start="108:89" pos:end="108:100"><name pos:start="108:89" pos:end="108:100">line_packets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="109:19" pos:end="114:17">else if <condition pos:start="109:27" pos:end="109:61">(<expr pos:start="109:28" pos:end="109:60"><operator pos:start="109:28" pos:end="109:28">(</operator><name pos:start="109:29" pos:end="109:40">line_packets</name> <operator pos:start="109:42" pos:end="109:42">&amp;</operator> <literal type="number" pos:start="109:44" pos:end="109:49">0xC000</literal><operator pos:start="109:50" pos:end="109:50">)</operator> <operator pos:start="109:52" pos:end="109:53">==</operator> <literal type="number" pos:start="109:55" pos:end="109:60">0x8000</literal></expr>)</condition> <block pos:start="109:63" pos:end="114:17">{<block_content pos:start="111:21" pos:end="113:60">
                    <comment type="line" pos:start="110:21" pos:end="110:41">// "last byte" opcode</comment>
                    <expr_stmt pos:start="111:21" pos:end="111:65"><expr pos:start="111:21" pos:end="111:64"><name pos:start="111:21" pos:end="111:29">pixel_ptr</name><operator pos:start="111:30" pos:end="111:30">=</operator> <name pos:start="111:32" pos:end="111:36">y_ptr</name> <operator pos:start="111:38" pos:end="111:38">+</operator> <name pos:start="111:40" pos:end="111:60"><name pos:start="111:40" pos:end="111:40">s</name><operator pos:start="111:41" pos:end="111:42">-&gt;</operator><name pos:start="111:43" pos:end="111:47">frame</name><operator pos:start="111:48" pos:end="111:49">-&gt;</operator><name pos:start="111:50" pos:end="111:57">linesize</name><index pos:start="111:58" pos:end="111:60">[<expr pos:start="111:59" pos:end="111:59"><literal type="number" pos:start="111:59" pos:end="111:59">0</literal></expr>]</index></name> <operator pos:start="111:62" pos:end="111:62">-</operator> <literal type="number" pos:start="111:64" pos:end="111:64">1</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="112:21" pos:end="112:39"><expr pos:start="112:21" pos:end="112:38"><call pos:start="112:21" pos:end="112:38"><name pos:start="112:21" pos:end="112:35">CHECK_PIXEL_PTR</name><argument_list pos:start="112:36" pos:end="112:38">(<argument pos:start="112:37" pos:end="112:37"><expr pos:start="112:37" pos:end="112:37"><literal type="number" pos:start="112:37" pos:end="112:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="113:21" pos:end="113:60"><expr pos:start="113:21" pos:end="113:59"><name pos:start="113:21" pos:end="113:37"><name pos:start="113:21" pos:end="113:26">pixels</name><index pos:start="113:27" pos:end="113:37">[<expr pos:start="113:28" pos:end="113:36"><name pos:start="113:28" pos:end="113:36">pixel_ptr</name></expr>]</index></name> <operator pos:start="113:39" pos:end="113:39">=</operator> <name pos:start="113:41" pos:end="113:52">line_packets</name> <operator pos:start="113:54" pos:end="113:54">&amp;</operator> <literal type="number" pos:start="113:56" pos:end="113:59">0xff</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="114:19" pos:end="146:17">else <block pos:start="114:24" pos:end="146:17">{<block_content pos:start="115:21" pos:end="145:51">
                    <expr_stmt pos:start="115:21" pos:end="115:39"><expr pos:start="115:21" pos:end="115:38"><name pos:start="115:21" pos:end="115:36">compressed_lines</name><operator pos:start="115:37" pos:end="115:38">--</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="116:21" pos:end="116:38"><expr pos:start="116:21" pos:end="116:37"><name pos:start="116:21" pos:end="116:29">pixel_ptr</name> <operator pos:start="116:31" pos:end="116:31">=</operator> <name pos:start="116:33" pos:end="116:37">y_ptr</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="117:21" pos:end="117:39"><expr pos:start="117:21" pos:end="117:38"><call pos:start="117:21" pos:end="117:38"><name pos:start="117:21" pos:end="117:35">CHECK_PIXEL_PTR</name><argument_list pos:start="117:36" pos:end="117:38">(<argument pos:start="117:37" pos:end="117:37"><expr pos:start="117:37" pos:end="117:37"><literal type="number" pos:start="117:37" pos:end="117:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="118:21" pos:end="118:54"><expr pos:start="118:21" pos:end="118:53"><name pos:start="118:21" pos:end="118:35">pixel_countdown</name> <operator pos:start="118:37" pos:end="118:37">=</operator> <name pos:start="118:39" pos:end="118:53"><name pos:start="118:39" pos:end="118:39">s</name><operator pos:start="118:40" pos:end="118:41">-&gt;</operator><name pos:start="118:42" pos:end="118:46">avctx</name><operator pos:start="118:47" pos:end="118:48">-&gt;</operator><name pos:start="118:49" pos:end="118:53">width</name></name></expr>;</expr_stmt>
                    <for pos:start="119:21" pos:end="144:21">for <control pos:start="119:25" pos:end="119:54">(<init pos:start="119:26" pos:end="119:31"><expr pos:start="119:26" pos:end="119:30"><name pos:start="119:26" pos:end="119:26">i</name> <operator pos:start="119:28" pos:end="119:28">=</operator> <literal type="number" pos:start="119:30" pos:end="119:30">0</literal></expr>;</init> <condition pos:start="119:33" pos:end="119:49"><expr pos:start="119:33" pos:end="119:48"><name pos:start="119:33" pos:end="119:33">i</name> <operator pos:start="119:35" pos:end="119:35">&lt;</operator> <name pos:start="119:37" pos:end="119:48">line_packets</name></expr>;</condition> <incr pos:start="119:51" pos:end="119:53"><expr pos:start="119:51" pos:end="119:53"><name pos:start="119:51" pos:end="119:51">i</name><operator pos:start="119:52" pos:end="119:53">++</operator></expr></incr>)</control> <block pos:start="119:56" pos:end="144:21">{<block_content pos:start="120:25" pos:end="143:25">
                        <if_stmt pos:start="120:25" pos:end="121:34"><if pos:start="120:25" pos:end="121:34">if <condition pos:start="120:28" pos:end="120:79">(<expr pos:start="120:29" pos:end="120:78"><call pos:start="120:29" pos:end="120:49"><name pos:start="120:29" pos:end="120:44">bytestream2_tell</name><argument_list pos:start="120:45" pos:end="120:49">(<argument pos:start="120:46" pos:end="120:48"><expr pos:start="120:46" pos:end="120:48"><operator pos:start="120:46" pos:end="120:46">&amp;</operator><name pos:start="120:47" pos:end="120:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="120:51" pos:end="120:51">+</operator> <literal type="number" pos:start="120:53" pos:end="120:53">2</literal> <operator pos:start="120:55" pos:end="120:55">&gt;</operator> <name pos:start="120:57" pos:end="120:78">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="121:29" pos:end="121:34"><block_content pos:start="121:29" pos:end="121:34">
                            <break pos:start="121:29" pos:end="121:34">break;</break></block_content></block></if></if_stmt>
                        <comment type="block" pos:start="122:25" pos:end="122:56">/* account for the skip bytes */</comment>
                        <expr_stmt pos:start="123:25" pos:end="123:63"><expr pos:start="123:25" pos:end="123:62"><name pos:start="123:25" pos:end="123:34">pixel_skip</name> <operator pos:start="123:36" pos:end="123:36">=</operator> <call pos:start="123:38" pos:end="123:62"><name pos:start="123:38" pos:end="123:57">bytestream2_get_byte</name><argument_list pos:start="123:58" pos:end="123:62">(<argument pos:start="123:59" pos:end="123:61"><expr pos:start="123:59" pos:end="123:61"><operator pos:start="123:59" pos:end="123:59">&amp;</operator><name pos:start="123:60" pos:end="123:61">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="124:25" pos:end="124:48"><expr pos:start="124:25" pos:end="124:47"><name pos:start="124:25" pos:end="124:33">pixel_ptr</name> <operator pos:start="124:35" pos:end="124:36">+=</operator> <name pos:start="124:38" pos:end="124:47">pixel_skip</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="125:25" pos:end="125:54"><expr pos:start="125:25" pos:end="125:53"><name pos:start="125:25" pos:end="125:39">pixel_countdown</name> <operator pos:start="125:41" pos:end="125:42">-=</operator> <name pos:start="125:44" pos:end="125:53">pixel_skip</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="126:25" pos:end="126:77"><expr pos:start="126:25" pos:end="126:76"><name pos:start="126:25" pos:end="126:32">byte_run</name> <operator pos:start="126:34" pos:end="126:34">=</operator> <call pos:start="126:36" pos:end="126:76"><name pos:start="126:36" pos:end="126:46">sign_extend</name><argument_list pos:start="126:47" pos:end="126:76">(<argument pos:start="126:48" pos:end="126:72"><expr pos:start="126:48" pos:end="126:72"><call pos:start="126:48" pos:end="126:72"><name pos:start="126:48" pos:end="126:67">bytestream2_get_byte</name><argument_list pos:start="126:68" pos:end="126:72">(<argument pos:start="126:69" pos:end="126:71"><expr pos:start="126:69" pos:end="126:71"><operator pos:start="126:69" pos:end="126:69">&amp;</operator><name pos:start="126:70" pos:end="126:71">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="126:75" pos:end="126:75"><expr pos:start="126:75" pos:end="126:75"><literal type="number" pos:start="126:75" pos:end="126:75">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="127:25" pos:end="143:25"><if pos:start="127:25" pos:end="136:25">if <condition pos:start="127:28" pos:end="127:41">(<expr pos:start="127:29" pos:end="127:40"><name pos:start="127:29" pos:end="127:36">byte_run</name> <operator pos:start="127:38" pos:end="127:38">&lt;</operator> <literal type="number" pos:start="127:40" pos:end="127:40">0</literal></expr>)</condition> <block pos:start="127:43" pos:end="136:25">{<block_content pos:start="128:29" pos:end="135:29">
                            <expr_stmt pos:start="128:29" pos:end="128:49"><expr pos:start="128:29" pos:end="128:48"><name pos:start="128:29" pos:end="128:36">byte_run</name> <operator pos:start="128:38" pos:end="128:38">=</operator> <operator pos:start="128:40" pos:end="128:40">-</operator><name pos:start="128:41" pos:end="128:48">byte_run</name></expr>;</expr_stmt>
                            <expr_stmt pos:start="129:29" pos:end="129:69"><expr pos:start="129:29" pos:end="129:68"><name pos:start="129:29" pos:end="129:40">palette_idx1</name> <operator pos:start="129:42" pos:end="129:42">=</operator> <call pos:start="129:44" pos:end="129:68"><name pos:start="129:44" pos:end="129:63">bytestream2_get_byte</name><argument_list pos:start="129:64" pos:end="129:68">(<argument pos:start="129:65" pos:end="129:67"><expr pos:start="129:65" pos:end="129:67"><operator pos:start="129:65" pos:end="129:65">&amp;</operator><name pos:start="129:66" pos:end="129:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="130:29" pos:end="130:69"><expr pos:start="130:29" pos:end="130:68"><name pos:start="130:29" pos:end="130:40">palette_idx2</name> <operator pos:start="130:42" pos:end="130:42">=</operator> <call pos:start="130:44" pos:end="130:68"><name pos:start="130:44" pos:end="130:63">bytestream2_get_byte</name><argument_list pos:start="130:64" pos:end="130:68">(<argument pos:start="130:65" pos:end="130:67"><expr pos:start="130:65" pos:end="130:67"><operator pos:start="130:65" pos:end="130:65">&amp;</operator><name pos:start="130:66" pos:end="130:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="131:29" pos:end="131:58"><expr pos:start="131:29" pos:end="131:57"><call pos:start="131:29" pos:end="131:57"><name pos:start="131:29" pos:end="131:43">CHECK_PIXEL_PTR</name><argument_list pos:start="131:44" pos:end="131:57">(<argument pos:start="131:45" pos:end="131:56"><expr pos:start="131:45" pos:end="131:56"><name pos:start="131:45" pos:end="131:52">byte_run</name> <operator pos:start="131:54" pos:end="131:54">*</operator> <literal type="number" pos:start="131:56" pos:end="131:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <for pos:start="132:29" pos:end="135:29">for <control pos:start="132:33" pos:end="132:80">(<init pos:start="132:34" pos:end="132:39"><expr pos:start="132:34" pos:end="132:38"><name pos:start="132:34" pos:end="132:34">j</name> <operator pos:start="132:36" pos:end="132:36">=</operator> <literal type="number" pos:start="132:38" pos:end="132:38">0</literal></expr>;</init> <condition pos:start="132:41" pos:end="132:53"><expr pos:start="132:41" pos:end="132:52"><name pos:start="132:41" pos:end="132:41">j</name> <operator pos:start="132:43" pos:end="132:43">&lt;</operator> <name pos:start="132:45" pos:end="132:52">byte_run</name></expr>;</condition> <incr pos:start="132:55" pos:end="132:79"><expr pos:start="132:55" pos:end="132:57"><name pos:start="132:55" pos:end="132:55">j</name><operator pos:start="132:56" pos:end="132:57">++</operator></expr><operator pos:start="132:58" pos:end="132:58">,</operator> <expr pos:start="132:60" pos:end="132:79"><name pos:start="132:60" pos:end="132:74">pixel_countdown</name> <operator pos:start="132:76" pos:end="132:77">-=</operator> <literal type="number" pos:start="132:79" pos:end="132:79">2</literal></expr></incr>)</control> <block pos:start="132:82" pos:end="135:29">{<block_content pos:start="133:33" pos:end="134:67">
                                <expr_stmt pos:start="133:33" pos:end="133:67"><expr pos:start="133:33" pos:end="133:66"><name pos:start="133:33" pos:end="133:51"><name pos:start="133:33" pos:end="133:38">pixels</name><index pos:start="133:39" pos:end="133:51">[<expr pos:start="133:40" pos:end="133:50"><name pos:start="133:40" pos:end="133:48">pixel_ptr</name><operator pos:start="133:49" pos:end="133:50">++</operator></expr>]</index></name> <operator pos:start="133:53" pos:end="133:53">=</operator> <name pos:start="133:55" pos:end="133:66">palette_idx1</name></expr>;</expr_stmt>
                                <expr_stmt pos:start="134:33" pos:end="134:67"><expr pos:start="134:33" pos:end="134:66"><name pos:start="134:33" pos:end="134:51"><name pos:start="134:33" pos:end="134:38">pixels</name><index pos:start="134:39" pos:end="134:51">[<expr pos:start="134:40" pos:end="134:50"><name pos:start="134:40" pos:end="134:48">pixel_ptr</name><operator pos:start="134:49" pos:end="134:50">++</operator></expr>]</index></name> <operator pos:start="134:53" pos:end="134:53">=</operator> <name pos:start="134:55" pos:end="134:66">palette_idx2</name></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></if> <else pos:start="136:27" pos:end="143:25">else <block pos:start="136:32" pos:end="143:25">{<block_content pos:start="137:29" pos:end="142:29">
                            <expr_stmt pos:start="137:29" pos:end="137:58"><expr pos:start="137:29" pos:end="137:57"><call pos:start="137:29" pos:end="137:57"><name pos:start="137:29" pos:end="137:43">CHECK_PIXEL_PTR</name><argument_list pos:start="137:44" pos:end="137:57">(<argument pos:start="137:45" pos:end="137:56"><expr pos:start="137:45" pos:end="137:56"><name pos:start="137:45" pos:end="137:52">byte_run</name> <operator pos:start="137:54" pos:end="137:54">*</operator> <literal type="number" pos:start="137:56" pos:end="137:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt pos:start="138:29" pos:end="139:38"><if pos:start="138:29" pos:end="139:38">if <condition pos:start="138:32" pos:end="138:94">(<expr pos:start="138:33" pos:end="138:93"><call pos:start="138:33" pos:end="138:53"><name pos:start="138:33" pos:end="138:48">bytestream2_tell</name><argument_list pos:start="138:49" pos:end="138:53">(<argument pos:start="138:50" pos:end="138:52"><expr pos:start="138:50" pos:end="138:52"><operator pos:start="138:50" pos:end="138:50">&amp;</operator><name pos:start="138:51" pos:end="138:52">g2</name></expr></argument>)</argument_list></call> <operator pos:start="138:55" pos:end="138:55">+</operator> <name pos:start="138:57" pos:end="138:64">byte_run</name> <operator pos:start="138:66" pos:end="138:66">*</operator> <literal type="number" pos:start="138:68" pos:end="138:68">2</literal> <operator pos:start="138:70" pos:end="138:70">&gt;</operator> <name pos:start="138:72" pos:end="138:93">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="139:33" pos:end="139:38"><block_content pos:start="139:33" pos:end="139:38">
                                <break pos:start="139:33" pos:end="139:38">break;</break></block_content></block></if></if_stmt>
                            <for pos:start="140:29" pos:end="142:29">for <control pos:start="140:33" pos:end="140:81">(<init pos:start="140:34" pos:end="140:39"><expr pos:start="140:34" pos:end="140:38"><name pos:start="140:34" pos:end="140:34">j</name> <operator pos:start="140:36" pos:end="140:36">=</operator> <literal type="number" pos:start="140:38" pos:end="140:38">0</literal></expr>;</init> <condition pos:start="140:41" pos:end="140:57"><expr pos:start="140:41" pos:end="140:56"><name pos:start="140:41" pos:end="140:41">j</name> <operator pos:start="140:43" pos:end="140:43">&lt;</operator> <name pos:start="140:45" pos:end="140:52">byte_run</name> <operator pos:start="140:54" pos:end="140:54">*</operator> <literal type="number" pos:start="140:56" pos:end="140:56">2</literal></expr>;</condition> <incr pos:start="140:59" pos:end="140:80"><expr pos:start="140:59" pos:end="140:61"><name pos:start="140:59" pos:end="140:59">j</name><operator pos:start="140:60" pos:end="140:61">++</operator></expr><operator pos:start="140:62" pos:end="140:62">,</operator> <expr pos:start="140:64" pos:end="140:80"><name pos:start="140:64" pos:end="140:78">pixel_countdown</name><operator pos:start="140:79" pos:end="140:80">--</operator></expr></incr>)</control> <block pos:start="140:83" pos:end="142:29">{<block_content pos:start="141:33" pos:end="141:80">
                                <expr_stmt pos:start="141:33" pos:end="141:80"><expr pos:start="141:33" pos:end="141:79"><name pos:start="141:33" pos:end="141:51"><name pos:start="141:33" pos:end="141:38">pixels</name><index pos:start="141:39" pos:end="141:51">[<expr pos:start="141:40" pos:end="141:50"><name pos:start="141:40" pos:end="141:48">pixel_ptr</name><operator pos:start="141:49" pos:end="141:50">++</operator></expr>]</index></name> <operator pos:start="141:53" pos:end="141:53">=</operator> <call pos:start="141:55" pos:end="141:79"><name pos:start="141:55" pos:end="141:74">bytestream2_get_byte</name><argument_list pos:start="141:75" pos:end="141:79">(<argument pos:start="141:76" pos:end="141:78"><expr pos:start="141:76" pos:end="141:78"><operator pos:start="141:76" pos:end="141:76">&amp;</operator><name pos:start="141:77" pos:end="141:78">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt pos:start="145:21" pos:end="145:51"><expr pos:start="145:21" pos:end="145:50"><name pos:start="145:21" pos:end="145:25">y_ptr</name> <operator pos:start="145:27" pos:end="145:28">+=</operator> <name pos:start="145:30" pos:end="145:50"><name pos:start="145:30" pos:end="145:30">s</name><operator pos:start="145:31" pos:end="145:32">-&gt;</operator><name pos:start="145:33" pos:end="145:37">frame</name><operator pos:start="145:38" pos:end="145:39">-&gt;</operator><name pos:start="145:40" pos:end="145:47">linesize</name><index pos:start="145:48" pos:end="145:50">[<expr pos:start="145:49" pos:end="145:49"><literal type="number" pos:start="145:49" pos:end="145:49">0</literal></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></while>
            <break pos:start="148:13" pos:end="148:18">break;</break>
        <case pos:start="149:9" pos:end="149:20">case <expr pos:start="149:14" pos:end="149:19"><name pos:start="149:14" pos:end="149:19">FLI_LC</name></expr>:</case>
            <comment type="block" pos:start="150:13" pos:end="150:33">/* line compressed */</comment>
            <expr_stmt pos:start="151:13" pos:end="151:54"><expr pos:start="151:13" pos:end="151:53"><name pos:start="151:13" pos:end="151:25">starting_line</name> <operator pos:start="151:27" pos:end="151:27">=</operator> <call pos:start="151:29" pos:end="151:53"><name pos:start="151:29" pos:end="151:48">bytestream2_get_le16</name><argument_list pos:start="151:49" pos:end="151:53">(<argument pos:start="151:50" pos:end="151:52"><expr pos:start="151:50" pos:end="151:52"><operator pos:start="151:50" pos:end="151:50">&amp;</operator><name pos:start="151:51" pos:end="151:52">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="152:13" pos:end="152:22"><expr pos:start="152:13" pos:end="152:21"><name pos:start="152:13" pos:end="152:17">y_ptr</name> <operator pos:start="152:19" pos:end="152:19">=</operator> <literal type="number" pos:start="152:21" pos:end="152:21">0</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="153:13" pos:end="153:59"><expr pos:start="153:13" pos:end="153:58"><name pos:start="153:13" pos:end="153:17">y_ptr</name> <operator pos:start="153:19" pos:end="153:20">+=</operator> <name pos:start="153:22" pos:end="153:34">starting_line</name> <operator pos:start="153:36" pos:end="153:36">*</operator> <name pos:start="153:38" pos:end="153:58"><name pos:start="153:38" pos:end="153:38">s</name><operator pos:start="153:39" pos:end="153:40">-&gt;</operator><name pos:start="153:41" pos:end="153:45">frame</name><operator pos:start="153:46" pos:end="153:47">-&gt;</operator><name pos:start="153:48" pos:end="153:55">linesize</name><index pos:start="153:56" pos:end="153:58">[<expr pos:start="153:57" pos:end="153:57"><literal type="number" pos:start="153:57" pos:end="153:57">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="154:13" pos:end="154:57"><expr pos:start="154:13" pos:end="154:56"><name pos:start="154:13" pos:end="154:28">compressed_lines</name> <operator pos:start="154:30" pos:end="154:30">=</operator> <call pos:start="154:32" pos:end="154:56"><name pos:start="154:32" pos:end="154:51">bytestream2_get_le16</name><argument_list pos:start="154:52" pos:end="154:56">(<argument pos:start="154:53" pos:end="154:55"><expr pos:start="154:53" pos:end="154:55"><operator pos:start="154:53" pos:end="154:53">&amp;</operator><name pos:start="154:54" pos:end="154:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:start="155:13" pos:end="190:13">while <condition pos:start="155:19" pos:end="155:40">(<expr pos:start="155:20" pos:end="155:39"><name pos:start="155:20" pos:end="155:35">compressed_lines</name> <operator pos:start="155:37" pos:end="155:37">&gt;</operator> <literal type="number" pos:start="155:39" pos:end="155:39">0</literal></expr>)</condition> <block pos:start="155:42" pos:end="190:13">{<block_content pos:start="156:17" pos:end="189:35">
                <expr_stmt pos:start="156:17" pos:end="156:34"><expr pos:start="156:17" pos:end="156:33"><name pos:start="156:17" pos:end="156:25">pixel_ptr</name> <operator pos:start="156:27" pos:end="156:27">=</operator> <name pos:start="156:29" pos:end="156:33">y_ptr</name></expr>;</expr_stmt>
                <expr_stmt pos:start="157:17" pos:end="157:35"><expr pos:start="157:17" pos:end="157:34"><call pos:start="157:17" pos:end="157:34"><name pos:start="157:17" pos:end="157:31">CHECK_PIXEL_PTR</name><argument_list pos:start="157:32" pos:end="157:34">(<argument pos:start="157:33" pos:end="157:33"><expr pos:start="157:33" pos:end="157:33"><literal type="number" pos:start="157:33" pos:end="157:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="158:17" pos:end="158:50"><expr pos:start="158:17" pos:end="158:49"><name pos:start="158:17" pos:end="158:31">pixel_countdown</name> <operator pos:start="158:33" pos:end="158:33">=</operator> <name pos:start="158:35" pos:end="158:49"><name pos:start="158:35" pos:end="158:35">s</name><operator pos:start="158:36" pos:end="158:37">-&gt;</operator><name pos:start="158:38" pos:end="158:42">avctx</name><operator pos:start="158:43" pos:end="158:44">-&gt;</operator><name pos:start="158:45" pos:end="158:49">width</name></name></expr>;</expr_stmt>
                <if_stmt pos:start="159:17" pos:end="160:26"><if pos:start="159:17" pos:end="160:26">if <condition pos:start="159:20" pos:end="159:71">(<expr pos:start="159:21" pos:end="159:70"><call pos:start="159:21" pos:end="159:41"><name pos:start="159:21" pos:end="159:36">bytestream2_tell</name><argument_list pos:start="159:37" pos:end="159:41">(<argument pos:start="159:38" pos:end="159:40"><expr pos:start="159:38" pos:end="159:40"><operator pos:start="159:38" pos:end="159:38">&amp;</operator><name pos:start="159:39" pos:end="159:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="159:43" pos:end="159:43">+</operator> <literal type="number" pos:start="159:45" pos:end="159:45">1</literal> <operator pos:start="159:47" pos:end="159:47">&gt;</operator> <name pos:start="159:49" pos:end="159:70">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="160:21" pos:end="160:26"><block_content pos:start="160:21" pos:end="160:26">
                    <break pos:start="160:21" pos:end="160:26">break;</break></block_content></block></if></if_stmt>
                <expr_stmt pos:start="161:17" pos:end="161:57"><expr pos:start="161:17" pos:end="161:56"><name pos:start="161:17" pos:end="161:28">line_packets</name> <operator pos:start="161:30" pos:end="161:30">=</operator> <call pos:start="161:32" pos:end="161:56"><name pos:start="161:32" pos:end="161:51">bytestream2_get_byte</name><argument_list pos:start="161:52" pos:end="161:56">(<argument pos:start="161:53" pos:end="161:55"><expr pos:start="161:53" pos:end="161:55"><operator pos:start="161:53" pos:end="161:53">&amp;</operator><name pos:start="161:54" pos:end="161:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="162:17" pos:end="187:17"><if pos:start="162:17" pos:end="187:17">if <condition pos:start="162:20" pos:end="162:37">(<expr pos:start="162:21" pos:end="162:36"><name pos:start="162:21" pos:end="162:32">line_packets</name> <operator pos:start="162:34" pos:end="162:34">&gt;</operator> <literal type="number" pos:start="162:36" pos:end="162:36">0</literal></expr>)</condition> <block pos:start="162:39" pos:end="187:17">{<block_content pos:start="163:21" pos:end="186:21">
                    <for pos:start="163:21" pos:end="186:21">for <control pos:start="163:25" pos:end="163:54">(<init pos:start="163:26" pos:end="163:31"><expr pos:start="163:26" pos:end="163:30"><name pos:start="163:26" pos:end="163:26">i</name> <operator pos:start="163:28" pos:end="163:28">=</operator> <literal type="number" pos:start="163:30" pos:end="163:30">0</literal></expr>;</init> <condition pos:start="163:33" pos:end="163:49"><expr pos:start="163:33" pos:end="163:48"><name pos:start="163:33" pos:end="163:33">i</name> <operator pos:start="163:35" pos:end="163:35">&lt;</operator> <name pos:start="163:37" pos:end="163:48">line_packets</name></expr>;</condition> <incr pos:start="163:51" pos:end="163:53"><expr pos:start="163:51" pos:end="163:53"><name pos:start="163:51" pos:end="163:51">i</name><operator pos:start="163:52" pos:end="163:53">++</operator></expr></incr>)</control> <block pos:start="163:56" pos:end="186:21">{<block_content pos:start="165:25" pos:end="185:25">
                        <comment type="block" pos:start="164:25" pos:end="164:56">/* account for the skip bytes */</comment>
                        <if_stmt pos:start="165:25" pos:end="166:34"><if pos:start="165:25" pos:end="166:34">if <condition pos:start="165:28" pos:end="165:79">(<expr pos:start="165:29" pos:end="165:78"><call pos:start="165:29" pos:end="165:49"><name pos:start="165:29" pos:end="165:44">bytestream2_tell</name><argument_list pos:start="165:45" pos:end="165:49">(<argument pos:start="165:46" pos:end="165:48"><expr pos:start="165:46" pos:end="165:48"><operator pos:start="165:46" pos:end="165:46">&amp;</operator><name pos:start="165:47" pos:end="165:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="165:51" pos:end="165:51">+</operator> <literal type="number" pos:start="165:53" pos:end="165:53">1</literal> <operator pos:start="165:55" pos:end="165:55">&gt;</operator> <name pos:start="165:57" pos:end="165:78">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="166:29" pos:end="166:34"><block_content pos:start="166:29" pos:end="166:34">
                            <break pos:start="166:29" pos:end="166:34">break;</break></block_content></block></if></if_stmt>
                        <expr_stmt pos:start="167:25" pos:end="167:63"><expr pos:start="167:25" pos:end="167:62"><name pos:start="167:25" pos:end="167:34">pixel_skip</name> <operator pos:start="167:36" pos:end="167:36">=</operator> <call pos:start="167:38" pos:end="167:62"><name pos:start="167:38" pos:end="167:57">bytestream2_get_byte</name><argument_list pos:start="167:58" pos:end="167:62">(<argument pos:start="167:59" pos:end="167:61"><expr pos:start="167:59" pos:end="167:61"><operator pos:start="167:59" pos:end="167:59">&amp;</operator><name pos:start="167:60" pos:end="167:61">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="168:25" pos:end="168:48"><expr pos:start="168:25" pos:end="168:47"><name pos:start="168:25" pos:end="168:33">pixel_ptr</name> <operator pos:start="168:35" pos:end="168:36">+=</operator> <name pos:start="168:38" pos:end="168:47">pixel_skip</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="169:25" pos:end="169:54"><expr pos:start="169:25" pos:end="169:53"><name pos:start="169:25" pos:end="169:39">pixel_countdown</name> <operator pos:start="169:41" pos:end="169:42">-=</operator> <name pos:start="169:44" pos:end="169:53">pixel_skip</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="170:25" pos:end="170:76"><expr pos:start="170:25" pos:end="170:75"><name pos:start="170:25" pos:end="170:32">byte_run</name> <operator pos:start="170:34" pos:end="170:34">=</operator> <call pos:start="170:36" pos:end="170:75"><name pos:start="170:36" pos:end="170:46">sign_extend</name><argument_list pos:start="170:47" pos:end="170:75">(<argument pos:start="170:48" pos:end="170:72"><expr pos:start="170:48" pos:end="170:72"><call pos:start="170:48" pos:end="170:72"><name pos:start="170:48" pos:end="170:67">bytestream2_get_byte</name><argument_list pos:start="170:68" pos:end="170:72">(<argument pos:start="170:69" pos:end="170:71"><expr pos:start="170:69" pos:end="170:71"><operator pos:start="170:69" pos:end="170:69">&amp;</operator><name pos:start="170:70" pos:end="170:71">g2</name></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="170:74" pos:end="170:74"><expr pos:start="170:74" pos:end="170:74"><literal type="number" pos:start="170:74" pos:end="170:74">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="171:25" pos:end="185:25"><if pos:start="171:25" pos:end="178:25">if <condition pos:start="171:28" pos:end="171:41">(<expr pos:start="171:29" pos:end="171:40"><name pos:start="171:29" pos:end="171:36">byte_run</name> <operator pos:start="171:38" pos:end="171:38">&gt;</operator> <literal type="number" pos:start="171:40" pos:end="171:40">0</literal></expr>)</condition> <block pos:start="171:43" pos:end="178:25">{<block_content pos:start="172:29" pos:end="177:29">
                            <expr_stmt pos:start="172:29" pos:end="172:54"><expr pos:start="172:29" pos:end="172:53"><call pos:start="172:29" pos:end="172:53"><name pos:start="172:29" pos:end="172:43">CHECK_PIXEL_PTR</name><argument_list pos:start="172:44" pos:end="172:53">(<argument pos:start="172:45" pos:end="172:52"><expr pos:start="172:45" pos:end="172:52"><name pos:start="172:45" pos:end="172:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt pos:start="173:29" pos:end="174:38"><if pos:start="173:29" pos:end="174:38">if <condition pos:start="173:32" pos:end="173:90">(<expr pos:start="173:33" pos:end="173:89"><call pos:start="173:33" pos:end="173:53"><name pos:start="173:33" pos:end="173:48">bytestream2_tell</name><argument_list pos:start="173:49" pos:end="173:53">(<argument pos:start="173:50" pos:end="173:52"><expr pos:start="173:50" pos:end="173:52"><operator pos:start="173:50" pos:end="173:50">&amp;</operator><name pos:start="173:51" pos:end="173:52">g2</name></expr></argument>)</argument_list></call> <operator pos:start="173:55" pos:end="173:55">+</operator> <name pos:start="173:57" pos:end="173:64">byte_run</name> <operator pos:start="173:66" pos:end="173:66">&gt;</operator> <name pos:start="173:68" pos:end="173:89">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="174:33" pos:end="174:38"><block_content pos:start="174:33" pos:end="174:38">
                                <break pos:start="174:33" pos:end="174:38">break;</break></block_content></block></if></if_stmt>
                            <for pos:start="175:29" pos:end="177:29">for <control pos:start="175:33" pos:end="175:77">(<init pos:start="175:34" pos:end="175:39"><expr pos:start="175:34" pos:end="175:38"><name pos:start="175:34" pos:end="175:34">j</name> <operator pos:start="175:36" pos:end="175:36">=</operator> <literal type="number" pos:start="175:38" pos:end="175:38">0</literal></expr>;</init> <condition pos:start="175:41" pos:end="175:53"><expr pos:start="175:41" pos:end="175:52"><name pos:start="175:41" pos:end="175:41">j</name> <operator pos:start="175:43" pos:end="175:43">&lt;</operator> <name pos:start="175:45" pos:end="175:52">byte_run</name></expr>;</condition> <incr pos:start="175:55" pos:end="175:76"><expr pos:start="175:55" pos:end="175:57"><name pos:start="175:55" pos:end="175:55">j</name><operator pos:start="175:56" pos:end="175:57">++</operator></expr><operator pos:start="175:58" pos:end="175:58">,</operator> <expr pos:start="175:60" pos:end="175:76"><name pos:start="175:60" pos:end="175:74">pixel_countdown</name><operator pos:start="175:75" pos:end="175:76">--</operator></expr></incr>)</control> <block pos:start="175:79" pos:end="177:29">{<block_content pos:start="176:33" pos:end="176:80">
                                <expr_stmt pos:start="176:33" pos:end="176:80"><expr pos:start="176:33" pos:end="176:79"><name pos:start="176:33" pos:end="176:51"><name pos:start="176:33" pos:end="176:38">pixels</name><index pos:start="176:39" pos:end="176:51">[<expr pos:start="176:40" pos:end="176:50"><name pos:start="176:40" pos:end="176:48">pixel_ptr</name><operator pos:start="176:49" pos:end="176:50">++</operator></expr>]</index></name> <operator pos:start="176:53" pos:end="176:53">=</operator> <call pos:start="176:55" pos:end="176:79"><name pos:start="176:55" pos:end="176:74">bytestream2_get_byte</name><argument_list pos:start="176:75" pos:end="176:79">(<argument pos:start="176:76" pos:end="176:78"><expr pos:start="176:76" pos:end="176:78"><operator pos:start="176:76" pos:end="176:76">&amp;</operator><name pos:start="176:77" pos:end="176:78">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></if> <if type="elseif" pos:start="178:27" pos:end="185:25">else if <condition pos:start="178:35" pos:end="178:48">(<expr pos:start="178:36" pos:end="178:47"><name pos:start="178:36" pos:end="178:43">byte_run</name> <operator pos:start="178:45" pos:end="178:45">&lt;</operator> <literal type="number" pos:start="178:47" pos:end="178:47">0</literal></expr>)</condition> <block pos:start="178:50" pos:end="185:25">{<block_content pos:start="179:29" pos:end="184:29">
                            <expr_stmt pos:start="179:29" pos:end="179:49"><expr pos:start="179:29" pos:end="179:48"><name pos:start="179:29" pos:end="179:36">byte_run</name> <operator pos:start="179:38" pos:end="179:38">=</operator> <operator pos:start="179:40" pos:end="179:40">-</operator><name pos:start="179:41" pos:end="179:48">byte_run</name></expr>;</expr_stmt>
                            <expr_stmt pos:start="180:29" pos:end="180:69"><expr pos:start="180:29" pos:end="180:68"><name pos:start="180:29" pos:end="180:40">palette_idx1</name> <operator pos:start="180:42" pos:end="180:42">=</operator> <call pos:start="180:44" pos:end="180:68"><name pos:start="180:44" pos:end="180:63">bytestream2_get_byte</name><argument_list pos:start="180:64" pos:end="180:68">(<argument pos:start="180:65" pos:end="180:67"><expr pos:start="180:65" pos:end="180:67"><operator pos:start="180:65" pos:end="180:65">&amp;</operator><name pos:start="180:66" pos:end="180:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="181:29" pos:end="181:54"><expr pos:start="181:29" pos:end="181:53"><call pos:start="181:29" pos:end="181:53"><name pos:start="181:29" pos:end="181:43">CHECK_PIXEL_PTR</name><argument_list pos:start="181:44" pos:end="181:53">(<argument pos:start="181:45" pos:end="181:52"><expr pos:start="181:45" pos:end="181:52"><name pos:start="181:45" pos:end="181:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <for pos:start="182:29" pos:end="184:29">for <control pos:start="182:33" pos:end="182:77">(<init pos:start="182:34" pos:end="182:39"><expr pos:start="182:34" pos:end="182:38"><name pos:start="182:34" pos:end="182:34">j</name> <operator pos:start="182:36" pos:end="182:36">=</operator> <literal type="number" pos:start="182:38" pos:end="182:38">0</literal></expr>;</init> <condition pos:start="182:41" pos:end="182:53"><expr pos:start="182:41" pos:end="182:52"><name pos:start="182:41" pos:end="182:41">j</name> <operator pos:start="182:43" pos:end="182:43">&lt;</operator> <name pos:start="182:45" pos:end="182:52">byte_run</name></expr>;</condition> <incr pos:start="182:55" pos:end="182:76"><expr pos:start="182:55" pos:end="182:57"><name pos:start="182:55" pos:end="182:55">j</name><operator pos:start="182:56" pos:end="182:57">++</operator></expr><operator pos:start="182:58" pos:end="182:58">,</operator> <expr pos:start="182:60" pos:end="182:76"><name pos:start="182:60" pos:end="182:74">pixel_countdown</name><operator pos:start="182:75" pos:end="182:76">--</operator></expr></incr>)</control> <block pos:start="182:79" pos:end="184:29">{<block_content pos:start="183:33" pos:end="183:67">
                                <expr_stmt pos:start="183:33" pos:end="183:67"><expr pos:start="183:33" pos:end="183:66"><name pos:start="183:33" pos:end="183:51"><name pos:start="183:33" pos:end="183:38">pixels</name><index pos:start="183:39" pos:end="183:51">[<expr pos:start="183:40" pos:end="183:50"><name pos:start="183:40" pos:end="183:48">pixel_ptr</name><operator pos:start="183:49" pos:end="183:50">++</operator></expr>]</index></name> <operator pos:start="183:53" pos:end="183:53">=</operator> <name pos:start="183:55" pos:end="183:66">palette_idx1</name></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
                <expr_stmt pos:start="188:17" pos:end="188:47"><expr pos:start="188:17" pos:end="188:46"><name pos:start="188:17" pos:end="188:21">y_ptr</name> <operator pos:start="188:23" pos:end="188:24">+=</operator> <name pos:start="188:26" pos:end="188:46"><name pos:start="188:26" pos:end="188:26">s</name><operator pos:start="188:27" pos:end="188:28">-&gt;</operator><name pos:start="188:29" pos:end="188:33">frame</name><operator pos:start="188:34" pos:end="188:35">-&gt;</operator><name pos:start="188:36" pos:end="188:43">linesize</name><index pos:start="188:44" pos:end="188:46">[<expr pos:start="188:45" pos:end="188:45"><literal type="number" pos:start="188:45" pos:end="188:45">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt pos:start="189:17" pos:end="189:35"><expr pos:start="189:17" pos:end="189:34"><name pos:start="189:17" pos:end="189:32">compressed_lines</name><operator pos:start="189:33" pos:end="189:34">--</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
            <break pos:start="191:13" pos:end="191:18">break;</break>
        <case pos:start="192:9" pos:end="192:23">case <expr pos:start="192:14" pos:end="192:22"><name pos:start="192:14" pos:end="192:22">FLI_BLACK</name></expr>:</case>
            <comment type="block" pos:start="193:13" pos:end="193:73">/* set the whole frame to color 0 (which is usually black) */</comment>
            <expr_stmt pos:start="194:13" pos:end="195:58"><expr pos:start="194:13" pos:end="195:57"><call pos:start="194:13" pos:end="195:57"><name pos:start="194:13" pos:end="194:18">memset</name><argument_list pos:start="194:19" pos:end="195:57">(<argument pos:start="194:20" pos:end="194:25"><expr pos:start="194:20" pos:end="194:25"><name pos:start="194:20" pos:end="194:25">pixels</name></expr></argument>, <argument pos:start="194:28" pos:end="194:28"><expr pos:start="194:28" pos:end="194:28"><literal type="number" pos:start="194:28" pos:end="194:28">0</literal></expr></argument>,
                <argument pos:start="195:17" pos:end="195:56"><expr pos:start="195:17" pos:end="195:56"><name pos:start="195:17" pos:end="195:37"><name pos:start="195:17" pos:end="195:17">s</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:24">frame</name><operator pos:start="195:25" pos:end="195:26">-&gt;</operator><name pos:start="195:27" pos:end="195:34">linesize</name><index pos:start="195:35" pos:end="195:37">[<expr pos:start="195:36" pos:end="195:36"><literal type="number" pos:start="195:36" pos:end="195:36">0</literal></expr>]</index></name> <operator pos:start="195:39" pos:end="195:39">*</operator> <name pos:start="195:41" pos:end="195:56"><name pos:start="195:41" pos:end="195:41">s</name><operator pos:start="195:42" pos:end="195:43">-&gt;</operator><name pos:start="195:44" pos:end="195:48">avctx</name><operator pos:start="195:49" pos:end="195:50">-&gt;</operator><name pos:start="195:51" pos:end="195:56">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="196:13" pos:end="196:18">break;</break>
        <case pos:start="197:9" pos:end="197:22">case <expr pos:start="197:14" pos:end="197:21"><name pos:start="197:14" pos:end="197:21">FLI_BRUN</name></expr>:</case>
            <comment type="block" pos:start="198:13" pos:end="199:64">/* Byte run compression: This chunk type only occurs in the first
             * FLI frame and it will update the entire frame. */</comment>
            <expr_stmt pos:start="200:13" pos:end="200:22"><expr pos:start="200:13" pos:end="200:21"><name pos:start="200:13" pos:end="200:17">y_ptr</name> <operator pos:start="200:19" pos:end="200:19">=</operator> <literal type="number" pos:start="200:21" pos:end="200:21">0</literal></expr>;</expr_stmt>
            <for pos:start="201:13" pos:end="239:13">for <control pos:start="201:17" pos:end="201:62">(<init pos:start="201:18" pos:end="201:27"><expr pos:start="201:18" pos:end="201:26"><name pos:start="201:18" pos:end="201:22">lines</name> <operator pos:start="201:24" pos:end="201:24">=</operator> <literal type="number" pos:start="201:26" pos:end="201:26">0</literal></expr>;</init> <condition pos:start="201:29" pos:end="201:53"><expr pos:start="201:29" pos:end="201:52"><name pos:start="201:29" pos:end="201:33">lines</name> <operator pos:start="201:35" pos:end="201:35">&lt;</operator> <name pos:start="201:37" pos:end="201:52"><name pos:start="201:37" pos:end="201:37">s</name><operator pos:start="201:38" pos:end="201:39">-&gt;</operator><name pos:start="201:40" pos:end="201:44">avctx</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:52">height</name></name></expr>;</condition> <incr pos:start="201:55" pos:end="201:61"><expr pos:start="201:55" pos:end="201:61"><name pos:start="201:55" pos:end="201:59">lines</name><operator pos:start="201:60" pos:end="201:61">++</operator></expr></incr>)</control> <block pos:start="201:64" pos:end="239:13">{<block_content pos:start="202:17" pos:end="238:47">
                <expr_stmt pos:start="202:17" pos:end="202:34"><expr pos:start="202:17" pos:end="202:33"><name pos:start="202:17" pos:end="202:25">pixel_ptr</name> <operator pos:start="202:27" pos:end="202:27">=</operator> <name pos:start="202:29" pos:end="202:33">y_ptr</name></expr>;</expr_stmt>
                <comment type="block" pos:start="203:17" pos:end="204:37">/* disregard the line packets; instead, iterate through all
                 * pixels on a row */</comment>
                 <expr_stmt pos:start="205:18" pos:end="205:42"><expr pos:start="205:18" pos:end="205:41"><call pos:start="205:18" pos:end="205:41"><name pos:start="205:18" pos:end="205:33">bytestream2_skip</name><argument_list pos:start="205:34" pos:end="205:41">(<argument pos:start="205:35" pos:end="205:37"><expr pos:start="205:35" pos:end="205:37"><operator pos:start="205:35" pos:end="205:35">&amp;</operator><name pos:start="205:36" pos:end="205:37">g2</name></expr></argument>, <argument pos:start="205:40" pos:end="205:40"><expr pos:start="205:40" pos:end="205:40"><literal type="number" pos:start="205:40" pos:end="205:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="206:17" pos:end="206:50"><expr pos:start="206:17" pos:end="206:49"><name pos:start="206:17" pos:end="206:31">pixel_countdown</name> <operator pos:start="206:33" pos:end="206:33">=</operator> <name pos:start="206:35" pos:end="206:49"><name pos:start="206:35" pos:end="206:35">s</name><operator pos:start="206:36" pos:end="206:37">-&gt;</operator><name pos:start="206:38" pos:end="206:42">avctx</name><operator pos:start="206:43" pos:end="206:44">-&gt;</operator><name pos:start="206:45" pos:end="206:49">width</name></name></expr>;</expr_stmt>
                <while pos:start="207:17" pos:end="237:17">while <condition pos:start="207:23" pos:end="207:43">(<expr pos:start="207:24" pos:end="207:42"><name pos:start="207:24" pos:end="207:38">pixel_countdown</name> <operator pos:start="207:40" pos:end="207:40">&gt;</operator> <literal type="number" pos:start="207:42" pos:end="207:42">0</literal></expr>)</condition> <block pos:start="207:45" pos:end="237:17">{<block_content pos:start="208:21" pos:end="236:21">
                    <if_stmt pos:start="208:21" pos:end="209:30"><if pos:start="208:21" pos:end="209:30">if <condition pos:start="208:24" pos:end="208:75">(<expr pos:start="208:25" pos:end="208:74"><call pos:start="208:25" pos:end="208:45"><name pos:start="208:25" pos:end="208:40">bytestream2_tell</name><argument_list pos:start="208:41" pos:end="208:45">(<argument pos:start="208:42" pos:end="208:44"><expr pos:start="208:42" pos:end="208:44"><operator pos:start="208:42" pos:end="208:42">&amp;</operator><name pos:start="208:43" pos:end="208:44">g2</name></expr></argument>)</argument_list></call> <operator pos:start="208:47" pos:end="208:47">+</operator> <literal type="number" pos:start="208:49" pos:end="208:49">1</literal> <operator pos:start="208:51" pos:end="208:51">&gt;</operator> <name pos:start="208:53" pos:end="208:74">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="209:25" pos:end="209:30"><block_content pos:start="209:25" pos:end="209:30">
                        <break pos:start="209:25" pos:end="209:30">break;</break></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="210:21" pos:end="210:73"><expr pos:start="210:21" pos:end="210:72"><name pos:start="210:21" pos:end="210:28">byte_run</name> <operator pos:start="210:30" pos:end="210:30">=</operator> <call pos:start="210:32" pos:end="210:72"><name pos:start="210:32" pos:end="210:42">sign_extend</name><argument_list pos:start="210:43" pos:end="210:72">(<argument pos:start="210:44" pos:end="210:68"><expr pos:start="210:44" pos:end="210:68"><call pos:start="210:44" pos:end="210:68"><name pos:start="210:44" pos:end="210:63">bytestream2_get_byte</name><argument_list pos:start="210:64" pos:end="210:68">(<argument pos:start="210:65" pos:end="210:67"><expr pos:start="210:65" pos:end="210:67"><operator pos:start="210:65" pos:end="210:65">&amp;</operator><name pos:start="210:66" pos:end="210:67">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="210:71" pos:end="210:71"><expr pos:start="210:71" pos:end="210:71"><literal type="number" pos:start="210:71" pos:end="210:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="211:21" pos:end="213:21"><if pos:start="211:21" pos:end="213:21">if <condition pos:start="211:24" pos:end="211:34">(<expr pos:start="211:25" pos:end="211:33"><operator pos:start="211:25" pos:end="211:25">!</operator><name pos:start="211:26" pos:end="211:33">byte_run</name></expr>)</condition> <block pos:start="211:36" pos:end="213:21">{<block_content pos:start="212:25" pos:end="212:81">
                        <expr_stmt pos:start="212:25" pos:end="212:81"><expr pos:start="212:25" pos:end="212:80"><call pos:start="212:25" pos:end="212:80"><name pos:start="212:25" pos:end="212:30">av_log</name><argument_list pos:start="212:31" pos:end="212:80">(<argument pos:start="212:32" pos:end="212:36"><expr pos:start="212:32" pos:end="212:36"><name pos:start="212:32" pos:end="212:36">avctx</name></expr></argument>, <argument pos:start="212:39" pos:end="212:50"><expr pos:start="212:39" pos:end="212:50"><name pos:start="212:39" pos:end="212:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="212:53" pos:end="212:79"><expr pos:start="212:53" pos:end="212:79"><literal type="string" pos:start="212:53" pos:end="212:79">"Invalid byte run value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt pos:start="214:21" pos:end="236:21"><if pos:start="214:21" pos:end="224:21">if <condition pos:start="214:24" pos:end="214:37">(<expr pos:start="214:25" pos:end="214:36"><name pos:start="214:25" pos:end="214:32">byte_run</name> <operator pos:start="214:34" pos:end="214:34">&gt;</operator> <literal type="number" pos:start="214:36" pos:end="214:36">0</literal></expr>)</condition> <block pos:start="214:39" pos:end="224:21">{<block_content pos:start="215:25" pos:end="223:25">
                        <expr_stmt pos:start="215:25" pos:end="215:65"><expr pos:start="215:25" pos:end="215:64"><name pos:start="215:25" pos:end="215:36">palette_idx1</name> <operator pos:start="215:38" pos:end="215:38">=</operator> <call pos:start="215:40" pos:end="215:64"><name pos:start="215:40" pos:end="215:59">bytestream2_get_byte</name><argument_list pos:start="215:60" pos:end="215:64">(<argument pos:start="215:61" pos:end="215:63"><expr pos:start="215:61" pos:end="215:63"><operator pos:start="215:61" pos:end="215:61">&amp;</operator><name pos:start="215:62" pos:end="215:63">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="216:25" pos:end="216:50"><expr pos:start="216:25" pos:end="216:49"><call pos:start="216:25" pos:end="216:49"><name pos:start="216:25" pos:end="216:39">CHECK_PIXEL_PTR</name><argument_list pos:start="216:40" pos:end="216:49">(<argument pos:start="216:41" pos:end="216:48"><expr pos:start="216:41" pos:end="216:48"><name pos:start="216:41" pos:end="216:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for pos:start="217:25" pos:end="223:25">for <control pos:start="217:29" pos:end="217:54">(<init pos:start="217:30" pos:end="217:35"><expr pos:start="217:30" pos:end="217:34"><name pos:start="217:30" pos:end="217:30">j</name> <operator pos:start="217:32" pos:end="217:32">=</operator> <literal type="number" pos:start="217:34" pos:end="217:34">0</literal></expr>;</init> <condition pos:start="217:37" pos:end="217:49"><expr pos:start="217:37" pos:end="217:48"><name pos:start="217:37" pos:end="217:37">j</name> <operator pos:start="217:39" pos:end="217:39">&lt;</operator> <name pos:start="217:41" pos:end="217:48">byte_run</name></expr>;</condition> <incr pos:start="217:51" pos:end="217:53"><expr pos:start="217:51" pos:end="217:53"><name pos:start="217:51" pos:end="217:51">j</name><operator pos:start="217:52" pos:end="217:53">++</operator></expr></incr>)</control> <block pos:start="217:56" pos:end="223:25">{<block_content pos:start="218:29" pos:end="222:63">
                            <expr_stmt pos:start="218:29" pos:end="218:63"><expr pos:start="218:29" pos:end="218:62"><name pos:start="218:29" pos:end="218:47"><name pos:start="218:29" pos:end="218:34">pixels</name><index pos:start="218:35" pos:end="218:47">[<expr pos:start="218:36" pos:end="218:46"><name pos:start="218:36" pos:end="218:44">pixel_ptr</name><operator pos:start="218:45" pos:end="218:46">++</operator></expr>]</index></name> <operator pos:start="218:49" pos:end="218:49">=</operator> <name pos:start="218:51" pos:end="218:62">palette_idx1</name></expr>;</expr_stmt>
                            <expr_stmt pos:start="219:29" pos:end="219:46"><expr pos:start="219:29" pos:end="219:45"><name pos:start="219:29" pos:end="219:43">pixel_countdown</name><operator pos:start="219:44" pos:end="219:45">--</operator></expr>;</expr_stmt>
                            <if_stmt pos:start="220:29" pos:end="222:63"><if pos:start="220:29" pos:end="222:63">if <condition pos:start="220:32" pos:end="220:52">(<expr pos:start="220:33" pos:end="220:51"><name pos:start="220:33" pos:end="220:47">pixel_countdown</name> <operator pos:start="220:49" pos:end="220:49">&lt;</operator> <literal type="number" pos:start="220:51" pos:end="220:51">0</literal></expr>)</condition><block type="pseudo" pos:start="221:33" pos:end="222:63"><block_content pos:start="221:33" pos:end="222:63">
                                <expr_stmt pos:start="221:33" pos:end="222:63"><expr pos:start="221:33" pos:end="222:62"><call pos:start="221:33" pos:end="222:62"><name pos:start="221:33" pos:end="221:38">av_log</name><argument_list pos:start="221:39" pos:end="222:62">(<argument pos:start="221:40" pos:end="221:44"><expr pos:start="221:40" pos:end="221:44"><name pos:start="221:40" pos:end="221:44">avctx</name></expr></argument>, <argument pos:start="221:47" pos:end="221:58"><expr pos:start="221:47" pos:end="221:58"><name pos:start="221:47" pos:end="221:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="221:61" pos:end="221:99"><expr pos:start="221:61" pos:end="221:99"><literal type="string" pos:start="221:61" pos:end="221:99">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,
                                       <argument pos:start="222:40" pos:end="222:54"><expr pos:start="222:40" pos:end="222:54"><name pos:start="222:40" pos:end="222:54">pixel_countdown</name></expr></argument>, <argument pos:start="222:57" pos:end="222:61"><expr pos:start="222:57" pos:end="222:61"><name pos:start="222:57" pos:end="222:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if> <else pos:start="224:23" pos:end="236:21">else <block pos:start="224:28" pos:end="236:21">{<block_content pos:start="225:25" pos:end="235:25">  <comment type="block" pos:start="224:31" pos:end="224:62">/* copy bytes if byte_run &lt; 0 */</comment>
                        <expr_stmt pos:start="225:25" pos:end="225:45"><expr pos:start="225:25" pos:end="225:44"><name pos:start="225:25" pos:end="225:32">byte_run</name> <operator pos:start="225:34" pos:end="225:34">=</operator> <operator pos:start="225:36" pos:end="225:36">-</operator><name pos:start="225:37" pos:end="225:44">byte_run</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="226:25" pos:end="226:50"><expr pos:start="226:25" pos:end="226:49"><call pos:start="226:25" pos:end="226:49"><name pos:start="226:25" pos:end="226:39">CHECK_PIXEL_PTR</name><argument_list pos:start="226:40" pos:end="226:49">(<argument pos:start="226:41" pos:end="226:48"><expr pos:start="226:41" pos:end="226:48"><name pos:start="226:41" pos:end="226:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="227:25" pos:end="228:34"><if pos:start="227:25" pos:end="228:34">if <condition pos:start="227:28" pos:end="227:86">(<expr pos:start="227:29" pos:end="227:85"><call pos:start="227:29" pos:end="227:49"><name pos:start="227:29" pos:end="227:44">bytestream2_tell</name><argument_list pos:start="227:45" pos:end="227:49">(<argument pos:start="227:46" pos:end="227:48"><expr pos:start="227:46" pos:end="227:48"><operator pos:start="227:46" pos:end="227:46">&amp;</operator><name pos:start="227:47" pos:end="227:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="227:51" pos:end="227:51">+</operator> <name pos:start="227:53" pos:end="227:60">byte_run</name> <operator pos:start="227:62" pos:end="227:62">&gt;</operator> <name pos:start="227:64" pos:end="227:85">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="228:29" pos:end="228:34"><block_content pos:start="228:29" pos:end="228:34">
                            <break pos:start="228:29" pos:end="228:34">break;</break></block_content></block></if></if_stmt>
                        <for pos:start="229:25" pos:end="235:25">for <control pos:start="229:29" pos:end="229:54">(<init pos:start="229:30" pos:end="229:35"><expr pos:start="229:30" pos:end="229:34"><name pos:start="229:30" pos:end="229:30">j</name> <operator pos:start="229:32" pos:end="229:32">=</operator> <literal type="number" pos:start="229:34" pos:end="229:34">0</literal></expr>;</init> <condition pos:start="229:37" pos:end="229:49"><expr pos:start="229:37" pos:end="229:48"><name pos:start="229:37" pos:end="229:37">j</name> <operator pos:start="229:39" pos:end="229:39">&lt;</operator> <name pos:start="229:41" pos:end="229:48">byte_run</name></expr>;</condition> <incr pos:start="229:51" pos:end="229:53"><expr pos:start="229:51" pos:end="229:53"><name pos:start="229:51" pos:end="229:51">j</name><operator pos:start="229:52" pos:end="229:53">++</operator></expr></incr>)</control> <block pos:start="229:56" pos:end="235:25">{<block_content pos:start="230:29" pos:end="234:63">
                            <expr_stmt pos:start="230:29" pos:end="230:76"><expr pos:start="230:29" pos:end="230:75"><name pos:start="230:29" pos:end="230:47"><name pos:start="230:29" pos:end="230:34">pixels</name><index pos:start="230:35" pos:end="230:47">[<expr pos:start="230:36" pos:end="230:46"><name pos:start="230:36" pos:end="230:44">pixel_ptr</name><operator pos:start="230:45" pos:end="230:46">++</operator></expr>]</index></name> <operator pos:start="230:49" pos:end="230:49">=</operator> <call pos:start="230:51" pos:end="230:75"><name pos:start="230:51" pos:end="230:70">bytestream2_get_byte</name><argument_list pos:start="230:71" pos:end="230:75">(<argument pos:start="230:72" pos:end="230:74"><expr pos:start="230:72" pos:end="230:74"><operator pos:start="230:72" pos:end="230:72">&amp;</operator><name pos:start="230:73" pos:end="230:74">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt pos:start="231:29" pos:end="231:46"><expr pos:start="231:29" pos:end="231:45"><name pos:start="231:29" pos:end="231:43">pixel_countdown</name><operator pos:start="231:44" pos:end="231:45">--</operator></expr>;</expr_stmt>
                            <if_stmt pos:start="232:29" pos:end="234:63"><if pos:start="232:29" pos:end="234:63">if <condition pos:start="232:32" pos:end="232:52">(<expr pos:start="232:33" pos:end="232:51"><name pos:start="232:33" pos:end="232:47">pixel_countdown</name> <operator pos:start="232:49" pos:end="232:49">&lt;</operator> <literal type="number" pos:start="232:51" pos:end="232:51">0</literal></expr>)</condition><block type="pseudo" pos:start="233:33" pos:end="234:63"><block_content pos:start="233:33" pos:end="234:63">
                                <expr_stmt pos:start="233:33" pos:end="234:63"><expr pos:start="233:33" pos:end="234:62"><call pos:start="233:33" pos:end="234:62"><name pos:start="233:33" pos:end="233:38">av_log</name><argument_list pos:start="233:39" pos:end="234:62">(<argument pos:start="233:40" pos:end="233:44"><expr pos:start="233:40" pos:end="233:44"><name pos:start="233:40" pos:end="233:44">avctx</name></expr></argument>, <argument pos:start="233:47" pos:end="233:58"><expr pos:start="233:47" pos:end="233:58"><name pos:start="233:47" pos:end="233:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:61" pos:end="233:99"><expr pos:start="233:61" pos:end="233:99"><literal type="string" pos:start="233:61" pos:end="233:99">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,
                                       <argument pos:start="234:40" pos:end="234:54"><expr pos:start="234:40" pos:end="234:54"><name pos:start="234:40" pos:end="234:54">pixel_countdown</name></expr></argument>, <argument pos:start="234:57" pos:end="234:61"><expr pos:start="234:57" pos:end="234:61"><name pos:start="234:57" pos:end="234:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>
                <expr_stmt pos:start="238:17" pos:end="238:47"><expr pos:start="238:17" pos:end="238:46"><name pos:start="238:17" pos:end="238:21">y_ptr</name> <operator pos:start="238:23" pos:end="238:24">+=</operator> <name pos:start="238:26" pos:end="238:46"><name pos:start="238:26" pos:end="238:26">s</name><operator pos:start="238:27" pos:end="238:28">-&gt;</operator><name pos:start="238:29" pos:end="238:33">frame</name><operator pos:start="238:34" pos:end="238:35">-&gt;</operator><name pos:start="238:36" pos:end="238:43">linesize</name><index pos:start="238:44" pos:end="238:46">[<expr pos:start="238:45" pos:end="238:45"><literal type="number" pos:start="238:45" pos:end="238:45">0</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <break pos:start="240:13" pos:end="240:18">break;</break>
        <case pos:start="241:9" pos:end="241:22">case <expr pos:start="241:14" pos:end="241:21"><name pos:start="241:14" pos:end="241:21">FLI_COPY</name></expr>:</case>
            <comment type="block" pos:start="242:13" pos:end="242:53">/* copy the chunk (uncompressed frame) */</comment>
            <if_stmt pos:start="243:13" pos:end="255:13"><if pos:start="243:13" pos:end="247:13">if <condition pos:start="243:16" pos:end="243:81">(<expr pos:start="243:17" pos:end="243:80"><name pos:start="243:17" pos:end="243:26">chunk_size</name> <operator pos:start="243:28" pos:end="243:28">-</operator> <literal type="number" pos:start="243:30" pos:end="243:30">6</literal> <operator pos:start="243:32" pos:end="243:33">!=</operator> <call pos:start="243:35" pos:end="243:61"><name pos:start="243:35" pos:end="243:41">FFALIGN</name><argument_list pos:start="243:42" pos:end="243:61">(<argument pos:start="243:43" pos:end="243:57"><expr pos:start="243:43" pos:end="243:57"><name pos:start="243:43" pos:end="243:57"><name pos:start="243:43" pos:end="243:43">s</name><operator pos:start="243:44" pos:end="243:45">-&gt;</operator><name pos:start="243:46" pos:end="243:50">avctx</name><operator pos:start="243:51" pos:end="243:52">-&gt;</operator><name pos:start="243:53" pos:end="243:57">width</name></name></expr></argument>, <argument pos:start="243:60" pos:end="243:60"><expr pos:start="243:60" pos:end="243:60"><literal type="number" pos:start="243:60" pos:end="243:60">4</literal></expr></argument>)</argument_list></call> <operator pos:start="243:63" pos:end="243:63">*</operator> <name pos:start="243:65" pos:end="243:80"><name pos:start="243:65" pos:end="243:65">s</name><operator pos:start="243:66" pos:end="243:67">-&gt;</operator><name pos:start="243:68" pos:end="243:72">avctx</name><operator pos:start="243:73" pos:end="243:74">-&gt;</operator><name pos:start="243:75" pos:end="243:80">height</name></name></expr>)</condition> <block pos:start="243:83" pos:end="247:13">{<block_content pos:start="244:17" pos:end="246:54">
                <expr_stmt pos:start="244:17" pos:end="245:79"><expr pos:start="244:17" pos:end="245:78"><call pos:start="244:17" pos:end="245:78"><name pos:start="244:17" pos:end="244:22">av_log</name><argument_list pos:start="244:23" pos:end="245:78">(<argument pos:start="244:24" pos:end="244:28"><expr pos:start="244:24" pos:end="244:28"><name pos:start="244:24" pos:end="244:28">avctx</name></expr></argument>, <argument pos:start="244:31" pos:end="244:42"><expr pos:start="244:31" pos:end="244:42"><name pos:start="244:31" pos:end="244:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="244:45" pos:end="245:61"><expr pos:start="244:45" pos:end="245:61"><literal type="string" pos:start="244:45" pos:end="244:89">"In chunk FLI_COPY : source data (%d bytes) "</literal> \
                       <literal type="string" pos:start="245:24" pos:end="245:61">"has incorrect size, skipping chunk\n"</literal></expr></argument>, <argument pos:start="245:64" pos:end="245:77"><expr pos:start="245:64" pos:end="245:77"><name pos:start="245:64" pos:end="245:73">chunk_size</name> <operator pos:start="245:75" pos:end="245:75">-</operator> <literal type="number" pos:start="245:77" pos:end="245:77">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="246:17" pos:end="246:54"><expr pos:start="246:17" pos:end="246:53"><call pos:start="246:17" pos:end="246:53"><name pos:start="246:17" pos:end="246:32">bytestream2_skip</name><argument_list pos:start="246:33" pos:end="246:53">(<argument pos:start="246:34" pos:end="246:36"><expr pos:start="246:34" pos:end="246:36"><operator pos:start="246:34" pos:end="246:34">&amp;</operator><name pos:start="246:35" pos:end="246:36">g2</name></expr></argument>, <argument pos:start="246:39" pos:end="246:52"><expr pos:start="246:39" pos:end="246:52"><name pos:start="246:39" pos:end="246:48">chunk_size</name> <operator pos:start="246:50" pos:end="246:50">-</operator> <literal type="number" pos:start="246:52" pos:end="246:52">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="247:15" pos:end="255:13">else <block pos:start="247:20" pos:end="255:13">{<block_content pos:start="248:17" pos:end="254:17">
                <for pos:start="248:17" pos:end="254:17">for <control pos:start="248:21" pos:end="249:52">(<init pos:start="248:22" pos:end="248:31"><expr pos:start="248:22" pos:end="248:30"><name pos:start="248:22" pos:end="248:26">y_ptr</name> <operator pos:start="248:28" pos:end="248:28">=</operator> <literal type="number" pos:start="248:30" pos:end="248:30">0</literal></expr>;</init> <condition pos:start="248:33" pos:end="248:81"><expr pos:start="248:33" pos:end="248:80"><name pos:start="248:33" pos:end="248:37">y_ptr</name> <operator pos:start="248:39" pos:end="248:39">&lt;</operator> <name pos:start="248:41" pos:end="248:61"><name pos:start="248:41" pos:end="248:41">s</name><operator pos:start="248:42" pos:end="248:43">-&gt;</operator><name pos:start="248:44" pos:end="248:48">frame</name><operator pos:start="248:49" pos:end="248:50">-&gt;</operator><name pos:start="248:51" pos:end="248:58">linesize</name><index pos:start="248:59" pos:end="248:61">[<expr pos:start="248:60" pos:end="248:60"><literal type="number" pos:start="248:60" pos:end="248:60">0</literal></expr>]</index></name> <operator pos:start="248:63" pos:end="248:63">*</operator> <name pos:start="248:65" pos:end="248:80"><name pos:start="248:65" pos:end="248:65">s</name><operator pos:start="248:66" pos:end="248:67">-&gt;</operator><name pos:start="248:68" pos:end="248:72">avctx</name><operator pos:start="248:73" pos:end="248:74">-&gt;</operator><name pos:start="248:75" pos:end="248:80">height</name></name></expr>;</condition>
                     <incr pos:start="249:22" pos:end="249:51"><expr pos:start="249:22" pos:end="249:51"><name pos:start="249:22" pos:end="249:26">y_ptr</name> <operator pos:start="249:28" pos:end="249:29">+=</operator> <name pos:start="249:31" pos:end="249:51"><name pos:start="249:31" pos:end="249:31">s</name><operator pos:start="249:32" pos:end="249:33">-&gt;</operator><name pos:start="249:34" pos:end="249:38">frame</name><operator pos:start="249:39" pos:end="249:40">-&gt;</operator><name pos:start="249:41" pos:end="249:48">linesize</name><index pos:start="249:49" pos:end="249:51">[<expr pos:start="249:50" pos:end="249:50"><literal type="number" pos:start="249:50" pos:end="249:50">0</literal></expr>]</index></name></expr></incr>)</control> <block pos:start="249:54" pos:end="254:17">{<block_content pos:start="250:21" pos:end="253:73">
                    <expr_stmt pos:start="250:21" pos:end="251:60"><expr pos:start="250:21" pos:end="251:59"><call pos:start="250:21" pos:end="251:59"><name pos:start="250:21" pos:end="250:42">bytestream2_get_buffer</name><argument_list pos:start="250:43" pos:end="251:59">(<argument pos:start="250:44" pos:end="250:46"><expr pos:start="250:44" pos:end="250:46"><operator pos:start="250:44" pos:end="250:44">&amp;</operator><name pos:start="250:45" pos:end="250:46">g2</name></expr></argument>, <argument pos:start="250:49" pos:end="250:62"><expr pos:start="250:49" pos:end="250:62"><operator pos:start="250:49" pos:end="250:49">&amp;</operator><name pos:start="250:50" pos:end="250:62"><name pos:start="250:50" pos:end="250:55">pixels</name><index pos:start="250:56" pos:end="250:62">[<expr pos:start="250:57" pos:end="250:61"><name pos:start="250:57" pos:end="250:61">y_ptr</name></expr>]</index></name></expr></argument>,
                                           <argument pos:start="251:44" pos:end="251:58"><expr pos:start="251:44" pos:end="251:58"><name pos:start="251:44" pos:end="251:58"><name pos:start="251:44" pos:end="251:44">s</name><operator pos:start="251:45" pos:end="251:46">-&gt;</operator><name pos:start="251:47" pos:end="251:51">avctx</name><operator pos:start="251:52" pos:end="251:53">-&gt;</operator><name pos:start="251:54" pos:end="251:58">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="252:21" pos:end="253:73"><if pos:start="252:21" pos:end="253:73">if <condition pos:start="252:24" pos:end="252:44">(<expr pos:start="252:25" pos:end="252:43"><name pos:start="252:25" pos:end="252:39"><name pos:start="252:25" pos:end="252:25">s</name><operator pos:start="252:26" pos:end="252:27">-&gt;</operator><name pos:start="252:28" pos:end="252:32">avctx</name><operator pos:start="252:33" pos:end="252:34">-&gt;</operator><name pos:start="252:35" pos:end="252:39">width</name></name> <operator pos:start="252:41" pos:end="252:41">&amp;</operator> <literal type="number" pos:start="252:43" pos:end="252:43">3</literal></expr>)</condition><block type="pseudo" pos:start="253:25" pos:end="253:73"><block_content pos:start="253:25" pos:end="253:73">
                        <expr_stmt pos:start="253:25" pos:end="253:73"><expr pos:start="253:25" pos:end="253:72"><call pos:start="253:25" pos:end="253:72"><name pos:start="253:25" pos:end="253:40">bytestream2_skip</name><argument_list pos:start="253:41" pos:end="253:72">(<argument pos:start="253:42" pos:end="253:44"><expr pos:start="253:42" pos:end="253:44"><operator pos:start="253:42" pos:end="253:42">&amp;</operator><name pos:start="253:43" pos:end="253:44">g2</name></expr></argument>, <argument pos:start="253:47" pos:end="253:71"><expr pos:start="253:47" pos:end="253:71"><literal type="number" pos:start="253:47" pos:end="253:49">4</literal> <operator pos:start="253:49" pos:end="253:49">-</operator> <operator pos:start="253:51" pos:end="253:51">(</operator><name pos:start="253:52" pos:end="253:66"><name pos:start="253:52" pos:end="253:52">s</name><operator pos:start="253:53" pos:end="253:54">-&gt;</operator><name pos:start="253:55" pos:end="253:59">avctx</name><operator pos:start="253:60" pos:end="253:61">-&gt;</operator><name pos:start="253:62" pos:end="253:66">width</name></name> <operator pos:start="253:68" pos:end="253:68">&amp;</operator> <literal type="number" pos:start="253:70" pos:end="253:70">3</literal><operator pos:start="253:71" pos:end="253:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
            <break pos:start="256:13" pos:end="256:18">break;</break>
        <case pos:start="257:9" pos:end="257:22">case <expr pos:start="257:14" pos:end="257:21"><name pos:start="257:14" pos:end="257:21">FLI_MINI</name></expr>:</case>
            <comment type="block" pos:start="258:13" pos:end="258:67">/* some sort of a thumbnail? disregard this chunk... */</comment>
            <break pos:start="259:13" pos:end="259:18">break;</break>
        <default pos:start="260:9" pos:end="260:16">default:</default>
            <expr_stmt pos:start="261:13" pos:end="261:85"><expr pos:start="261:13" pos:end="261:84"><call pos:start="261:13" pos:end="261:84"><name pos:start="261:13" pos:end="261:18">av_log</name><argument_list pos:start="261:19" pos:end="261:84">(<argument pos:start="261:20" pos:end="261:24"><expr pos:start="261:20" pos:end="261:24"><name pos:start="261:20" pos:end="261:24">avctx</name></expr></argument>, <argument pos:start="261:27" pos:end="261:38"><expr pos:start="261:27" pos:end="261:38"><name pos:start="261:27" pos:end="261:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="261:41" pos:end="261:71"><expr pos:start="261:41" pos:end="261:71"><literal type="string" pos:start="261:41" pos:end="261:71">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument pos:start="261:74" pos:end="261:83"><expr pos:start="261:74" pos:end="261:83"><name pos:start="261:74" pos:end="261:83">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="262:13" pos:end="262:18">break;</break>
        </block_content>}</block></switch>
        <if_stmt pos:start="264:9" pos:end="269:9"><if pos:start="264:9" pos:end="266:9">if <condition pos:start="264:12" pos:end="264:64">(<expr pos:start="264:13" pos:end="264:63"><name pos:start="264:13" pos:end="264:34">stream_ptr_after_chunk</name> <operator pos:start="264:36" pos:end="264:36">-</operator> <call pos:start="264:38" pos:end="264:58"><name pos:start="264:38" pos:end="264:53">bytestream2_tell</name><argument_list pos:start="264:54" pos:end="264:58">(<argument pos:start="264:55" pos:end="264:57"><expr pos:start="264:55" pos:end="264:57"><operator pos:start="264:55" pos:end="264:55">&amp;</operator><name pos:start="264:56" pos:end="264:57">g2</name></expr></argument>)</argument_list></call> <operator pos:start="264:60" pos:end="264:61">&gt;=</operator> <literal type="number" pos:start="264:63" pos:end="264:63">0</literal></expr>)</condition> <block pos:start="264:66" pos:end="266:9">{<block_content pos:start="265:13" pos:end="265:82">
            <expr_stmt pos:start="265:13" pos:end="265:82"><expr pos:start="265:13" pos:end="265:81"><call pos:start="265:13" pos:end="265:81"><name pos:start="265:13" pos:end="265:28">bytestream2_skip</name><argument_list pos:start="265:29" pos:end="265:81">(<argument pos:start="265:30" pos:end="265:32"><expr pos:start="265:30" pos:end="265:32"><operator pos:start="265:30" pos:end="265:30">&amp;</operator><name pos:start="265:31" pos:end="265:32">g2</name></expr></argument>, <argument pos:start="265:35" pos:end="265:80"><expr pos:start="265:35" pos:end="265:80"><name pos:start="265:35" pos:end="265:56">stream_ptr_after_chunk</name> <operator pos:start="265:58" pos:end="265:58">-</operator> <call pos:start="265:60" pos:end="265:80"><name pos:start="265:60" pos:end="265:75">bytestream2_tell</name><argument_list pos:start="265:76" pos:end="265:80">(<argument pos:start="265:77" pos:end="265:79"><expr pos:start="265:77" pos:end="265:79"><operator pos:start="265:77" pos:end="265:77">&amp;</operator><name pos:start="265:78" pos:end="265:79">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="266:11" pos:end="269:9">else <block pos:start="266:16" pos:end="269:9">{<block_content pos:start="267:13" pos:end="268:18">
            <expr_stmt pos:start="267:13" pos:end="267:60"><expr pos:start="267:13" pos:end="267:59"><call pos:start="267:13" pos:end="267:59"><name pos:start="267:13" pos:end="267:18">av_log</name><argument_list pos:start="267:19" pos:end="267:59">(<argument pos:start="267:20" pos:end="267:24"><expr pos:start="267:20" pos:end="267:24"><name pos:start="267:20" pos:end="267:24">avctx</name></expr></argument>, <argument pos:start="267:27" pos:end="267:38"><expr pos:start="267:27" pos:end="267:38"><name pos:start="267:27" pos:end="267:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="267:41" pos:end="267:58"><expr pos:start="267:41" pos:end="267:58"><literal type="string" pos:start="267:41" pos:end="267:58">"Chunk overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="268:13" pos:end="268:18">break;</break>
        </block_content>}</block></else></if_stmt>
        <expr_stmt pos:start="270:9" pos:end="270:33"><expr pos:start="270:9" pos:end="270:32"><name pos:start="270:9" pos:end="270:18">frame_size</name> <operator pos:start="270:20" pos:end="270:21">-=</operator> <name pos:start="270:23" pos:end="270:32">chunk_size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="271:9" pos:end="271:21"><expr pos:start="271:9" pos:end="271:20"><name pos:start="271:9" pos:end="271:18">num_chunks</name><operator pos:start="271:19" pos:end="271:20">--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <comment type="block" pos:start="273:5" pos:end="274:71">/* by the end of the chunk, the stream ptr should equal the frame
     * size (minus 1 or 2, possibly); if it doesn't, issue a warning */</comment>
    <if_stmt pos:start="275:5" pos:end="278:59"><if pos:start="275:5" pos:end="278:59">if <condition pos:start="275:8" pos:end="275:44">(<expr pos:start="275:9" pos:end="275:43"><call pos:start="275:9" pos:end="275:39"><name pos:start="275:9" pos:end="275:34">bytestream2_get_bytes_left</name><argument_list pos:start="275:35" pos:end="275:39">(<argument pos:start="275:36" pos:end="275:38"><expr pos:start="275:36" pos:end="275:38"><operator pos:start="275:36" pos:end="275:36">&amp;</operator><name pos:start="275:37" pos:end="275:38">g2</name></expr></argument>)</argument_list></call> <operator pos:start="275:41" pos:end="275:41">&gt;</operator> <literal type="number" pos:start="275:43" pos:end="275:43">2</literal></expr>)</condition><block type="pseudo" pos:start="276:9" pos:end="278:59"><block_content pos:start="276:9" pos:end="278:59">
        <expr_stmt pos:start="276:9" pos:end="278:59"><expr pos:start="276:9" pos:end="278:58"><call pos:start="276:9" pos:end="278:58"><name pos:start="276:9" pos:end="276:14">av_log</name><argument_list pos:start="276:15" pos:end="278:58">(<argument pos:start="276:16" pos:end="276:20"><expr pos:start="276:16" pos:end="276:20"><name pos:start="276:16" pos:end="276:20">avctx</name></expr></argument>, <argument pos:start="276:23" pos:end="276:34"><expr pos:start="276:23" pos:end="276:34"><name pos:start="276:23" pos:end="276:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="276:37" pos:end="277:43"><expr pos:start="276:37" pos:end="277:43"><literal type="string" pos:start="276:37" pos:end="276:80">"Processed FLI chunk where chunk size = %d "</literal> \
               <literal type="string" pos:start="277:16" pos:end="277:43">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument pos:start="277:46" pos:end="277:53"><expr pos:start="277:46" pos:end="277:53"><name pos:start="277:46" pos:end="277:53">buf_size</name></expr></argument>,
               <argument pos:start="278:16" pos:end="278:57"><expr pos:start="278:16" pos:end="278:57"><name pos:start="278:16" pos:end="278:23">buf_size</name> <operator pos:start="278:25" pos:end="278:25">-</operator> <call pos:start="278:27" pos:end="278:57"><name pos:start="278:27" pos:end="278:52">bytestream2_get_bytes_left</name><argument_list pos:start="278:53" pos:end="278:57">(<argument pos:start="278:54" pos:end="278:56"><expr pos:start="278:54" pos:end="278:56"><operator pos:start="278:54" pos:end="278:54">&amp;</operator><name pos:start="278:55" pos:end="278:56">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block" pos:start="279:5" pos:end="279:51">/* make the palette available on the way out */</comment>
    <expr_stmt pos:start="280:5" pos:end="280:58"><expr pos:start="280:5" pos:end="280:57"><call pos:start="280:5" pos:end="280:57"><name pos:start="280:5" pos:end="280:10">memcpy</name><argument_list pos:start="280:11" pos:end="280:57">(<argument pos:start="280:12" pos:end="280:28"><expr pos:start="280:12" pos:end="280:28"><name pos:start="280:12" pos:end="280:28"><name pos:start="280:12" pos:end="280:12">s</name><operator pos:start="280:13" pos:end="280:14">-&gt;</operator><name pos:start="280:15" pos:end="280:19">frame</name><operator pos:start="280:20" pos:end="280:21">-&gt;</operator><name pos:start="280:22" pos:end="280:25">data</name><index pos:start="280:26" pos:end="280:28">[<expr pos:start="280:27" pos:end="280:27"><literal type="number" pos:start="280:27" pos:end="280:27">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="280:31" pos:end="280:40"><expr pos:start="280:31" pos:end="280:40"><name pos:start="280:31" pos:end="280:40"><name pos:start="280:31" pos:end="280:31">s</name><operator pos:start="280:32" pos:end="280:33">-&gt;</operator><name pos:start="280:34" pos:end="280:40">palette</name></name></expr></argument>, <argument pos:start="280:43" pos:end="280:56"><expr pos:start="280:43" pos:end="280:56"><name pos:start="280:43" pos:end="280:56">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="281:5" pos:end="284:5"><if pos:start="281:5" pos:end="284:5">if <condition pos:start="281:8" pos:end="281:23">(<expr pos:start="281:9" pos:end="281:22"><name pos:start="281:9" pos:end="281:22"><name pos:start="281:9" pos:end="281:9">s</name><operator pos:start="281:10" pos:end="281:11">-&gt;</operator><name pos:start="281:12" pos:end="281:22">new_palette</name></name></expr>)</condition> <block pos:start="281:25" pos:end="284:5">{<block_content pos:start="282:9" pos:end="283:27">
        <expr_stmt pos:start="282:9" pos:end="282:42"><expr pos:start="282:9" pos:end="282:41"><name pos:start="282:9" pos:end="282:37"><name pos:start="282:9" pos:end="282:9">s</name><operator pos:start="282:10" pos:end="282:11">-&gt;</operator><name pos:start="282:12" pos:end="282:16">frame</name><operator pos:start="282:17" pos:end="282:18">-&gt;</operator><name pos:start="282:19" pos:end="282:37">palette_has_changed</name></name> <operator pos:start="282:39" pos:end="282:39">=</operator> <literal type="number" pos:start="282:41" pos:end="282:41">1</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="283:9" pos:end="283:27"><expr pos:start="283:9" pos:end="283:26"><name pos:start="283:9" pos:end="283:22"><name pos:start="283:9" pos:end="283:9">s</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:22">new_palette</name></name> <operator pos:start="283:24" pos:end="283:24">=</operator> <literal type="number" pos:start="283:26" pos:end="283:26">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="285:5" pos:end="286:19"><if pos:start="285:5" pos:end="286:19">if <condition pos:start="285:8" pos:end="285:49">(<expr pos:start="285:9" pos:end="285:48"><operator pos:start="285:9" pos:end="285:9">(</operator><name pos:start="285:10" pos:end="285:12">ret</name> <operator pos:start="285:14" pos:end="285:14">=</operator> <call pos:start="285:16" pos:end="285:43"><name pos:start="285:16" pos:end="285:27">av_frame_ref</name><argument_list pos:start="285:28" pos:end="285:43">(<argument pos:start="285:29" pos:end="285:32"><expr pos:start="285:29" pos:end="285:32"><name pos:start="285:29" pos:end="285:32">data</name></expr></argument>, <argument pos:start="285:35" pos:end="285:42"><expr pos:start="285:35" pos:end="285:42"><name pos:start="285:35" pos:end="285:42"><name pos:start="285:35" pos:end="285:35">s</name><operator pos:start="285:36" pos:end="285:37">-&gt;</operator><name pos:start="285:38" pos:end="285:42">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="285:44" pos:end="285:44">)</operator> <operator pos:start="285:46" pos:end="285:46">&lt;</operator> <literal type="number" pos:start="285:48" pos:end="285:48">0</literal></expr>)</condition><block type="pseudo" pos:start="286:9" pos:end="286:19"><block_content pos:start="286:9" pos:end="286:19">
        <return pos:start="286:9" pos:end="286:19">return <expr pos:start="286:16" pos:end="286:18"><name pos:start="286:16" pos:end="286:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="287:5" pos:end="287:19"><expr pos:start="287:5" pos:end="287:18"><operator pos:start="287:5" pos:end="287:5">*</operator><name pos:start="287:6" pos:end="287:14">got_frame</name> <operator pos:start="287:16" pos:end="287:16">=</operator> <literal type="number" pos:start="287:18" pos:end="287:18">1</literal></expr>;</expr_stmt>
    <return pos:start="288:5" pos:end="288:20">return <expr pos:start="288:12" pos:end="288:19"><name pos:start="288:12" pos:end="288:19">buf_size</name></expr>;</return>
</block_content>}</block></function></unit>
