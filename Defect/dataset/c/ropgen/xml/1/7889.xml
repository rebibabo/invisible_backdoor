<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7889.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:35">onenand_prog_main</name><parameter_list pos:start="1:36" pos:end="3:26">(<parameter pos:start="1:37" pos:end="1:51"><decl pos:start="1:37" pos:end="1:51"><type pos:start="1:37" pos:end="1:51"><name pos:start="1:37" pos:end="1:48">OneNANDState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:60"><decl pos:start="1:54" pos:end="1:60"><type pos:start="1:54" pos:end="1:60"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:60">sec</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:70"><decl pos:start="1:63" pos:end="1:70"><type pos:start="1:63" pos:end="1:70"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:70">secn</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:25"><decl pos:start="3:17" pos:end="3:25"><type pos:start="3:17" pos:end="3:25"><name pos:start="3:17" pos:end="3:20">void</name> <modifier pos:start="3:22" pos:end="3:22">*</modifier></type><name pos:start="3:23" pos:end="3:25">src</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:18">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">result</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="67:5"><if pos:start="11:5" pos:end="67:5">if <condition pos:start="11:8" pos:end="11:17">(<expr pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:12">secn</name> <operator pos:start="11:14" pos:end="11:14">&gt;</operator> <literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr>)</condition> <block pos:start="11:19" pos:end="67:5">{<block_content pos:start="13:9" pos:end="65:9">

        <decl_stmt pos:start="13:9" pos:end="13:45"><decl pos:start="13:9" pos:end="13:44"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint32_t</name></type> <name pos:start="13:18" pos:end="13:21">size</name> <init pos:start="13:23" pos:end="13:44">= <expr pos:start="13:25" pos:end="13:44"><operator pos:start="13:25" pos:end="13:25">(</operator><name pos:start="13:26" pos:end="13:33">uint32_t</name><operator pos:start="13:34" pos:end="13:34">)</operator><name pos:start="13:35" pos:end="13:38">secn</name> <operator pos:start="13:40" pos:end="13:40">*</operator> <literal type="number" pos:start="13:42" pos:end="13:44">512</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:49"><decl pos:start="15:9" pos:end="15:48"><type pos:start="15:9" pos:end="15:23"><specifier pos:start="15:9" pos:end="15:13">const</specifier> <name pos:start="15:15" pos:end="15:21">uint8_t</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:25">sp</name> <init pos:start="15:27" pos:end="15:48">= <expr pos:start="15:29" pos:end="15:48"><operator pos:start="15:29" pos:end="15:29">(</operator><specifier pos:start="15:30" pos:end="15:34">const</specifier> <name pos:start="15:36" pos:end="15:42">uint8_t</name> <operator pos:start="15:44" pos:end="15:44">*</operator><operator pos:start="15:45" pos:end="15:45">)</operator><name pos:start="15:46" pos:end="15:48">src</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:24"><decl pos:start="17:9" pos:end="17:23"><type pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:15">uint8_t</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:19">dp</name> <init pos:start="17:21" pos:end="17:23">= <expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="19:9" pos:end="41:9"><if pos:start="19:9" pos:end="29:9">if <condition pos:start="19:12" pos:end="19:23">(<expr pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:22">blk_cur</name></name></expr>)</condition> <block pos:start="19:25" pos:end="29:9">{<block_content pos:start="21:13" pos:end="27:13">

            <expr_stmt pos:start="21:13" pos:end="21:32"><expr pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:14">dp</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:31"><name pos:start="21:18" pos:end="21:25">g_malloc</name><argument_list pos:start="21:26" pos:end="21:31">(<argument pos:start="21:27" pos:end="21:30"><expr pos:start="21:27" pos:end="21:30"><name pos:start="21:27" pos:end="21:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="27:13"><if pos:start="23:13" pos:end="27:13">if <condition pos:start="23:16" pos:end="23:63">(<expr pos:start="23:17" pos:end="23:62"><operator pos:start="23:17" pos:end="23:17">!</operator><name pos:start="23:18" pos:end="23:19">dp</name> <operator pos:start="23:21" pos:end="23:22">||</operator> <call pos:start="23:24" pos:end="23:58"><name pos:start="23:24" pos:end="23:31">blk_read</name><argument_list pos:start="23:32" pos:end="23:58">(<argument pos:start="23:33" pos:end="23:42"><expr pos:start="23:33" pos:end="23:42"><name pos:start="23:33" pos:end="23:42"><name pos:start="23:33" pos:end="23:33">s</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:42">blk_cur</name></name></expr></argument>, <argument pos:start="23:45" pos:end="23:47"><expr pos:start="23:45" pos:end="23:47"><name pos:start="23:45" pos:end="23:47">sec</name></expr></argument>, <argument pos:start="23:50" pos:end="23:51"><expr pos:start="23:50" pos:end="23:51"><name pos:start="23:50" pos:end="23:51">dp</name></expr></argument>, <argument pos:start="23:54" pos:end="23:57"><expr pos:start="23:54" pos:end="23:57"><name pos:start="23:54" pos:end="23:57">secn</name></expr></argument>)</argument_list></call> <operator pos:start="23:60" pos:end="23:60">&lt;</operator> <literal type="number" pos:start="23:62" pos:end="23:62">0</literal></expr>)</condition> <block pos:start="23:65" pos:end="27:13">{<block_content pos:start="25:17" pos:end="25:27">

                <expr_stmt pos:start="25:17" pos:end="25:27"><expr pos:start="25:17" pos:end="25:26"><name pos:start="25:17" pos:end="25:22">result</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <literal type="number" pos:start="25:26" pos:end="25:26">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="41:9">else <block pos:start="29:16" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:13">

            <if_stmt pos:start="31:13" pos:end="39:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:41">(<expr pos:start="31:17" pos:end="31:40"><name pos:start="31:17" pos:end="31:19">sec</name> <operator pos:start="31:21" pos:end="31:21">+</operator> <name pos:start="31:23" pos:end="31:26">secn</name> <operator pos:start="31:28" pos:end="31:28">&gt;</operator> <name pos:start="31:30" pos:end="31:40"><name pos:start="31:30" pos:end="31:30">s</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:40">secs_cur</name></name></expr>)</condition> <block pos:start="31:43" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:27">

                <expr_stmt pos:start="33:17" pos:end="33:27"><expr pos:start="33:17" pos:end="33:26"><name pos:start="33:17" pos:end="33:22">result</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <literal type="number" pos:start="33:26" pos:end="33:26">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="35:15" pos:end="39:13">else <block pos:start="35:20" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:56">

                <expr_stmt pos:start="37:17" pos:end="37:56"><expr pos:start="37:17" pos:end="37:55"><name pos:start="37:17" pos:end="37:18">dp</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <operator pos:start="37:22" pos:end="37:22">(</operator><name pos:start="37:23" pos:end="37:29">uint8_t</name> <operator pos:start="37:31" pos:end="37:31">*</operator><operator pos:start="37:32" pos:end="37:32">)</operator><name pos:start="37:33" pos:end="37:42"><name pos:start="37:33" pos:end="37:33">s</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:42">current</name></name> <operator pos:start="37:44" pos:end="37:44">+</operator> <operator pos:start="37:46" pos:end="37:46">(</operator><name pos:start="37:47" pos:end="37:49">sec</name> <operator pos:start="37:51" pos:end="37:52">&lt;&lt;</operator> <literal type="number" pos:start="37:54" pos:end="37:54">9</literal><operator pos:start="37:55" pos:end="37:55">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="43:9" pos:end="59:9"><if pos:start="43:9" pos:end="59:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:19">result</name></expr>)</condition> <block pos:start="43:22" pos:end="59:9">{<block_content pos:start="45:13" pos:end="57:13">

            <decl_stmt pos:start="45:13" pos:end="45:23"><decl pos:start="45:13" pos:end="45:22"><type pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:20">uint32_t</name></type> <name pos:start="45:22" pos:end="45:22">i</name></decl>;</decl_stmt>

            <for pos:start="47:13" pos:end="51:13">for <control pos:start="47:17" pos:end="47:38">(<init pos:start="47:18" pos:end="47:23"><expr pos:start="47:18" pos:end="47:22"><name pos:start="47:18" pos:end="47:18">i</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</init> <condition pos:start="47:25" pos:end="47:33"><expr pos:start="47:25" pos:end="47:32"><name pos:start="47:25" pos:end="47:25">i</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <name pos:start="47:29" pos:end="47:32">size</name></expr>;</condition> <incr pos:start="47:35" pos:end="47:37"><expr pos:start="47:35" pos:end="47:37"><name pos:start="47:35" pos:end="47:35">i</name><operator pos:start="47:36" pos:end="47:37">++</operator></expr></incr>)</control> <block pos:start="47:40" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:31">

                <expr_stmt pos:start="49:17" pos:end="49:31"><expr pos:start="49:17" pos:end="49:30"><name pos:start="49:17" pos:end="49:21"><name pos:start="49:17" pos:end="49:18">dp</name><index pos:start="49:19" pos:end="49:21">[<expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">i</name></expr>]</index></name> <operator pos:start="49:23" pos:end="49:24">&amp;=</operator> <name pos:start="49:26" pos:end="49:30"><name pos:start="49:26" pos:end="49:27">sp</name><index pos:start="49:28" pos:end="49:30">[<expr pos:start="49:29" pos:end="49:29"><name pos:start="49:29" pos:end="49:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:27">(<expr pos:start="53:17" pos:end="53:26"><name pos:start="53:17" pos:end="53:26"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:26">blk_cur</name></name></expr>)</condition> <block pos:start="53:29" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:66">

                <expr_stmt pos:start="55:17" pos:end="55:66"><expr pos:start="55:17" pos:end="55:65"><name pos:start="55:17" pos:end="55:22">result</name> <operator pos:start="55:24" pos:end="55:24">=</operator> <call pos:start="55:26" pos:end="55:61"><name pos:start="55:26" pos:end="55:34">blk_write</name><argument_list pos:start="55:35" pos:end="55:61">(<argument pos:start="55:36" pos:end="55:45"><expr pos:start="55:36" pos:end="55:45"><name pos:start="55:36" pos:end="55:45"><name pos:start="55:36" pos:end="55:36">s</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:45">blk_cur</name></name></expr></argument>, <argument pos:start="55:48" pos:end="55:50"><expr pos:start="55:48" pos:end="55:50"><name pos:start="55:48" pos:end="55:50">sec</name></expr></argument>, <argument pos:start="55:53" pos:end="55:54"><expr pos:start="55:53" pos:end="55:54"><name pos:start="55:53" pos:end="55:54">dp</name></expr></argument>, <argument pos:start="55:57" pos:end="55:60"><expr pos:start="55:57" pos:end="55:60"><name pos:start="55:57" pos:end="55:60">secn</name></expr></argument>)</argument_list></call> <operator pos:start="55:63" pos:end="55:63">&lt;</operator> <literal type="number" pos:start="55:65" pos:end="55:65">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:29">(<expr pos:start="61:13" pos:end="61:28"><name pos:start="61:13" pos:end="61:14">dp</name> <operator pos:start="61:16" pos:end="61:17">&amp;&amp;</operator> <name pos:start="61:19" pos:end="61:28"><name pos:start="61:19" pos:end="61:19">s</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:28">blk_cur</name></name></expr>)</condition> <block pos:start="61:31" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:23">

            <expr_stmt pos:start="63:13" pos:end="63:23"><expr pos:start="63:13" pos:end="63:22"><call pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:18">g_free</name><argument_list pos:start="63:19" pos:end="63:22">(<argument pos:start="63:20" pos:end="63:21"><expr pos:start="63:20" pos:end="63:21"><name pos:start="63:20" pos:end="63:21">dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="71:5" pos:end="71:18">return <expr pos:start="71:12" pos:end="71:17"><name pos:start="71:12" pos:end="71:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
