<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5793.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">gen_mtspr</name><parameter_list pos:start="1:22" pos:end="1:40">(<parameter pos:start="1:23" pos:end="1:39"><decl pos:start="1:23" pos:end="1:39"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:34">DisasContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:5">

    <function_decl pos:start="5:5" pos:end="5:60"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">void</name></type> (<modifier pos:start="5:11" pos:end="5:11">*</modifier><name pos:start="5:12" pos:end="5:19">write_cb</name>)<parameter_list pos:start="5:21" pos:end="5:59">(<parameter pos:start="5:22" pos:end="5:38"><decl pos:start="5:22" pos:end="5:38"><type pos:start="5:22" pos:end="5:38"><name pos:start="5:22" pos:end="5:33">DisasContext</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:38">ctx</name></decl></parameter>, <parameter pos:start="5:41" pos:end="5:48"><decl pos:start="5:41" pos:end="5:48"><type pos:start="5:41" pos:end="5:48"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:48">sprn</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:58"><decl pos:start="5:51" pos:end="5:58"><type pos:start="5:51" pos:end="5:58"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:58">gprn</name></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">sprn</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><call pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:23">SPR</name><argument_list pos:start="7:24" pos:end="7:36">(<argument pos:start="7:25" pos:end="7:35"><expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:29">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:29"><call pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:29">(<argument pos:start="11:13" pos:end="11:28"><expr pos:start="11:13" pos:end="11:28"><name pos:start="11:13" pos:end="11:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="13:5" pos:end="16:0"><expr pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:12">write_cb</name> <operator pos:start="13:14" pos:end="13:14">=</operator> <name pos:start="13:16" pos:end="13:32"><name pos:start="13:16" pos:end="13:18">ctx</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:26">spr_cb</name><index pos:start="13:27" pos:end="13:32">[<expr pos:start="13:28" pos:end="13:31"><name pos:start="13:28" pos:end="13:31">sprn</name></expr>]</index></name><operator pos:start="13:33" pos:end="13:33">.</operator><name pos:start="13:34" pos:end="13:42">uea_write</name></expr>;</expr_stmt>

<cpp:else pos:start="15:1" pos:end="15:5">#<cpp:directive pos:start="15:2" pos:end="15:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="17:5" pos:end="32:0"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:11">ctx</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:15">pr</name></name></expr>)</condition> <block pos:start="17:18" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:47">

        <expr_stmt pos:start="19:9" pos:end="19:47"><expr pos:start="19:9" pos:end="19:46"><name pos:start="19:9" pos:end="19:16">write_cb</name> <operator pos:start="19:18" pos:end="19:18">=</operator> <name pos:start="19:20" pos:end="19:36"><name pos:start="19:20" pos:end="19:22">ctx</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:30">spr_cb</name><index pos:start="19:31" pos:end="19:36">[<expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">sprn</name></expr>]</index></name><operator pos:start="19:37" pos:end="19:37">.</operator><name pos:start="19:38" pos:end="19:46">uea_write</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="21:7" pos:end="25:5">else if <condition pos:start="21:15" pos:end="21:23">(<expr pos:start="21:16" pos:end="21:22"><name pos:start="21:16" pos:end="21:22"><name pos:start="21:16" pos:end="21:18">ctx</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:22">hv</name></name></expr>)</condition> <block pos:start="21:25" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:47">

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:16">write_cb</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:36"><name pos:start="23:20" pos:end="23:22">ctx</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:30">spr_cb</name><index pos:start="23:31" pos:end="23:36">[<expr pos:start="23:32" pos:end="23:35"><name pos:start="23:32" pos:end="23:35">sprn</name></expr>]</index></name><operator pos:start="23:37" pos:end="23:37">.</operator><name pos:start="23:38" pos:end="23:46">hea_write</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="32:0">else <block pos:start="25:12" pos:end="32:0">{<block_content pos:start="27:9" pos:end="27:47">

        <expr_stmt pos:start="27:9" pos:end="27:47"><expr pos:start="27:9" pos:end="27:46"><name pos:start="27:9" pos:end="27:16">write_cb</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:36"><name pos:start="27:20" pos:end="27:22">ctx</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:30">spr_cb</name><index pos:start="27:31" pos:end="27:36">[<expr pos:start="27:32" pos:end="27:35"><name pos:start="27:32" pos:end="27:35">sprn</name></expr>]</index></name><operator pos:start="27:37" pos:end="27:37">.</operator><name pos:start="27:38" pos:end="27:46">oea_write</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="33:5" pos:end="77:5"><if pos:start="33:5" pos:end="59:5">if <condition pos:start="33:8" pos:end="33:33">(<expr pos:start="33:9" pos:end="33:32"><call pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:14">likely</name><argument_list pos:start="33:15" pos:end="33:32">(<argument pos:start="33:16" pos:end="33:31"><expr pos:start="33:16" pos:end="33:31"><name pos:start="33:16" pos:end="33:23">write_cb</name> <operator pos:start="33:25" pos:end="33:26">!=</operator> <name pos:start="33:28" pos:end="33:31">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:35" pos:end="59:5">{<block_content pos:start="35:9" pos:end="57:9">

        <if_stmt pos:start="35:9" pos:end="57:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:45">(<expr pos:start="35:13" pos:end="35:44"><call pos:start="35:13" pos:end="35:44"><name pos:start="35:13" pos:end="35:18">likely</name><argument_list pos:start="35:19" pos:end="35:44">(<argument pos:start="35:20" pos:end="35:43"><expr pos:start="35:20" pos:end="35:43"><name pos:start="35:20" pos:end="35:27">write_cb</name> <operator pos:start="35:29" pos:end="35:30">!=</operator> <name pos:start="35:32" pos:end="35:43">SPR_NOACCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:47" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:52">

            <expr_stmt pos:start="37:13" pos:end="37:52"><expr pos:start="37:13" pos:end="37:51"><call pos:start="37:13" pos:end="37:51">(<modifier pos:start="37:14" pos:end="37:14">*</modifier><name pos:start="37:15" pos:end="37:22">write_cb</name>)<argument_list pos:start="37:24" pos:end="37:51">(<argument pos:start="37:25" pos:end="37:27"><expr pos:start="37:25" pos:end="37:27"><name pos:start="37:25" pos:end="37:27">ctx</name></expr></argument>, <argument pos:start="37:30" pos:end="37:33"><expr pos:start="37:30" pos:end="37:33"><name pos:start="37:30" pos:end="37:33">sprn</name></expr></argument>, <argument pos:start="37:36" pos:end="37:50"><expr pos:start="37:36" pos:end="37:50"><call pos:start="37:36" pos:end="37:50"><name pos:start="37:36" pos:end="37:37">rS</name><argument_list pos:start="37:38" pos:end="37:50">(<argument pos:start="37:39" pos:end="37:49"><expr pos:start="37:39" pos:end="37:49"><name pos:start="37:39" pos:end="37:49"><name pos:start="37:39" pos:end="37:41">ctx</name><operator pos:start="37:42" pos:end="37:43">-&gt;</operator><name pos:start="37:44" pos:end="37:49">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="57:9">else <block pos:start="39:16" pos:end="57:9">{<block_content pos:start="43:13" pos:end="55:60">

            <comment type="block" pos:start="41:13" pos:end="41:37">/* Privilege exception */</comment>

            <expr_stmt pos:start="43:13" pos:end="45:66"><expr pos:start="43:13" pos:end="45:65"><call pos:start="43:13" pos:end="45:65"><name pos:start="43:13" pos:end="43:19">fprintf</name><argument_list pos:start="43:20" pos:end="45:65">(<argument pos:start="43:21" pos:end="43:26"><expr pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:26">stderr</name></expr></argument>, <argument pos:start="43:29" pos:end="45:38"><expr pos:start="43:29" pos:end="45:38"><literal type="string" pos:start="43:29" pos:end="43:76">"Trying to write privileged spr %d (0x%03x) at "</literal>

                    <name pos:start="45:21" pos:end="45:33">TARGET_FMT_lx</name> <literal type="string" pos:start="45:35" pos:end="45:38">"\n"</literal></expr></argument>, <argument pos:start="45:41" pos:end="45:44"><expr pos:start="45:41" pos:end="45:44"><name pos:start="45:41" pos:end="45:44">sprn</name></expr></argument>, <argument pos:start="45:47" pos:end="45:50"><expr pos:start="45:47" pos:end="45:50"><name pos:start="45:47" pos:end="45:50">sprn</name></expr></argument>, <argument pos:start="45:53" pos:end="45:64"><expr pos:start="45:53" pos:end="45:64"><name pos:start="45:53" pos:end="45:60"><name pos:start="45:53" pos:end="45:55">ctx</name><operator pos:start="45:56" pos:end="45:57">-&gt;</operator><name pos:start="45:58" pos:end="45:60">nip</name></name> <operator pos:start="45:62" pos:end="45:62">-</operator> <literal type="number" pos:start="45:64" pos:end="45:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if <condition pos:start="47:16" pos:end="47:36">(<expr pos:start="47:17" pos:end="47:35"><call pos:start="47:17" pos:end="47:35"><name pos:start="47:17" pos:end="47:33">qemu_log_separate</name><argument_list pos:start="47:34" pos:end="47:35">()</argument_list></call></expr>)</condition> <block pos:start="47:38" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:71">

                <expr_stmt pos:start="49:17" pos:end="51:71"><expr pos:start="49:17" pos:end="51:70"><call pos:start="49:17" pos:end="51:70"><name pos:start="49:17" pos:end="49:24">qemu_log</name><argument_list pos:start="49:25" pos:end="51:70">(<argument pos:start="49:26" pos:end="51:43"><expr pos:start="49:26" pos:end="51:43"><literal type="string" pos:start="49:26" pos:end="49:73">"Trying to write privileged spr %d (0x%03x) at "</literal>

                         <name pos:start="51:26" pos:end="51:38">TARGET_FMT_lx</name> <literal type="string" pos:start="51:40" pos:end="51:43">"\n"</literal></expr></argument>, <argument pos:start="51:46" pos:end="51:49"><expr pos:start="51:46" pos:end="51:49"><name pos:start="51:46" pos:end="51:49">sprn</name></expr></argument>, <argument pos:start="51:52" pos:end="51:55"><expr pos:start="51:52" pos:end="51:55"><name pos:start="51:52" pos:end="51:55">sprn</name></expr></argument>, <argument pos:start="51:58" pos:end="51:69"><expr pos:start="51:58" pos:end="51:69"><name pos:start="51:58" pos:end="51:65"><name pos:start="51:58" pos:end="51:60">ctx</name><operator pos:start="51:61" pos:end="51:62">-&gt;</operator><name pos:start="51:63" pos:end="51:65">nip</name></name> <operator pos:start="51:67" pos:end="51:67">-</operator> <literal type="number" pos:start="51:69" pos:end="51:69">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:60"><expr pos:start="55:13" pos:end="55:59"><call pos:start="55:13" pos:end="55:59"><name pos:start="55:13" pos:end="55:31">gen_inval_exception</name><argument_list pos:start="55:32" pos:end="55:59">(<argument pos:start="55:33" pos:end="55:35"><expr pos:start="55:33" pos:end="55:35"><name pos:start="55:33" pos:end="55:35">ctx</name></expr></argument>, <argument pos:start="55:38" pos:end="55:58"><expr pos:start="55:38" pos:end="55:58"><name pos:start="55:38" pos:end="55:58">POWERPC_EXCP_PRIV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="77:5">else <block pos:start="59:12" pos:end="77:5">{<block_content pos:start="63:9" pos:end="75:57">

        <comment type="block" pos:start="61:9" pos:end="61:25">/* Not defined */</comment>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:32">(<expr pos:start="63:13" pos:end="63:31"><call pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:29">qemu_log_separate</name><argument_list pos:start="63:30" pos:end="63:31">()</argument_list></call></expr>)</condition> <block pos:start="63:34" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:67">

            <expr_stmt pos:start="65:13" pos:end="67:67"><expr pos:start="65:13" pos:end="67:66"><call pos:start="65:13" pos:end="67:66"><name pos:start="65:13" pos:end="65:20">qemu_log</name><argument_list pos:start="65:21" pos:end="67:66">(<argument pos:start="65:22" pos:end="67:39"><expr pos:start="65:22" pos:end="67:39"><literal type="string" pos:start="65:22" pos:end="65:66">"Trying to write invalid spr %d (0x%03x) at "</literal>

                     <name pos:start="67:22" pos:end="67:34">TARGET_FMT_lx</name> <literal type="string" pos:start="67:36" pos:end="67:39">"\n"</literal></expr></argument>, <argument pos:start="67:42" pos:end="67:45"><expr pos:start="67:42" pos:end="67:45"><name pos:start="67:42" pos:end="67:45">sprn</name></expr></argument>, <argument pos:start="67:48" pos:end="67:51"><expr pos:start="67:48" pos:end="67:51"><name pos:start="67:48" pos:end="67:51">sprn</name></expr></argument>, <argument pos:start="67:54" pos:end="67:65"><expr pos:start="67:54" pos:end="67:65"><name pos:start="67:54" pos:end="67:61"><name pos:start="67:54" pos:end="67:56">ctx</name><operator pos:start="67:57" pos:end="67:58">-&gt;</operator><name pos:start="67:59" pos:end="67:61">nip</name></name> <operator pos:start="67:63" pos:end="67:63">-</operator> <literal type="number" pos:start="67:65" pos:end="67:65">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:62"><expr pos:start="71:9" pos:end="73:61"><call pos:start="71:9" pos:end="73:61"><name pos:start="71:9" pos:end="71:15">fprintf</name><argument_list pos:start="71:16" pos:end="73:61">(<argument pos:start="71:17" pos:end="71:22"><expr pos:start="71:17" pos:end="71:22"><name pos:start="71:17" pos:end="71:22">stderr</name></expr></argument>, <argument pos:start="71:25" pos:end="73:34"><expr pos:start="71:25" pos:end="73:34"><literal type="string" pos:start="71:25" pos:end="71:69">"Trying to write invalid spr %d (0x%03x) at "</literal>

                <name pos:start="73:17" pos:end="73:29">TARGET_FMT_lx</name> <literal type="string" pos:start="73:31" pos:end="73:34">"\n"</literal></expr></argument>, <argument pos:start="73:37" pos:end="73:40"><expr pos:start="73:37" pos:end="73:40"><name pos:start="73:37" pos:end="73:40">sprn</name></expr></argument>, <argument pos:start="73:43" pos:end="73:46"><expr pos:start="73:43" pos:end="73:46"><name pos:start="73:43" pos:end="73:46">sprn</name></expr></argument>, <argument pos:start="73:49" pos:end="73:60"><expr pos:start="73:49" pos:end="73:60"><name pos:start="73:49" pos:end="73:56"><name pos:start="73:49" pos:end="73:51">ctx</name><operator pos:start="73:52" pos:end="73:53">-&gt;</operator><name pos:start="73:54" pos:end="73:56">nip</name></name> <operator pos:start="73:58" pos:end="73:58">-</operator> <literal type="number" pos:start="73:60" pos:end="73:60">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:57"><expr pos:start="75:9" pos:end="75:56"><call pos:start="75:9" pos:end="75:56"><name pos:start="75:9" pos:end="75:27">gen_inval_exception</name><argument_list pos:start="75:28" pos:end="75:56">(<argument pos:start="75:29" pos:end="75:31"><expr pos:start="75:29" pos:end="75:31"><name pos:start="75:29" pos:end="75:31">ctx</name></expr></argument>, <argument pos:start="75:34" pos:end="75:55"><expr pos:start="75:34" pos:end="75:55"><name pos:start="75:34" pos:end="75:55">POWERPC_EXCP_INVAL_SPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
