<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5455.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:40"><name pos:start="1:1" pos:end="1:23">vmxnet3_indicate_packet</name><argument_list pos:start="1:24" pos:end="1:40">(<argument pos:start="1:25" pos:end="1:39">VMXNET3State *s</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="193:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:25">Vmxnet3_RxDesc</name></name></type> <name pos:start="5:27" pos:end="5:29">rxd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:16">is_head</name> <init pos:start="7:18" pos:end="7:23">= <expr pos:start="7:20" pos:end="7:23"><name pos:start="7:20" pos:end="7:23">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:20">rxd_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">rx_ridx</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:29">Vmxnet3_RxCompDesc</name></name></type> <name pos:start="15:31" pos:end="15:34">rxcd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:45"><decl pos:start="17:5" pos:end="17:44"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:25">new_rxcd_gen</name> <init pos:start="17:27" pos:end="17:44">= <expr pos:start="17:29" pos:end="17:44"><name pos:start="17:29" pos:end="17:44">VMXNET3_INIT_GEN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">hwaddr</name></type> <name pos:start="19:12" pos:end="19:22">new_rxcd_pa</name> <init pos:start="19:24" pos:end="19:26">= <expr pos:start="19:26" pos:end="19:26"><literal type="number" pos:start="19:26" pos:end="19:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">hwaddr</name></type> <name pos:start="21:12" pos:end="21:24">ready_rxcd_pa</name> <init pos:start="21:26" pos:end="21:28">= <expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:60"><decl pos:start="23:5" pos:end="23:59"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:16">iovec</name></name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:22">data</name> <init pos:start="23:24" pos:end="23:59">= <expr pos:start="23:26" pos:end="23:59"><call pos:start="23:26" pos:end="23:59"><name pos:start="23:26" pos:end="23:48">vmxnet_rx_pkt_get_iovec</name><argument_list pos:start="23:49" pos:end="23:59">(<argument pos:start="23:50" pos:end="23:58"><expr pos:start="23:50" pos:end="23:58"><name pos:start="23:50" pos:end="23:58"><name pos:start="23:50" pos:end="23:50">s</name><operator pos:start="23:51" pos:end="23:52">-&gt;</operator><name pos:start="23:53" pos:end="23:58">rx_pkt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">size_t</name></type> <name pos:start="25:12" pos:end="25:23">bytes_copied</name> <init pos:start="25:25" pos:end="25:27">= <expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:63"><decl pos:start="27:5" pos:end="27:62"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:10">size_t</name></type> <name pos:start="27:12" pos:end="27:21">bytes_left</name> <init pos:start="27:23" pos:end="27:62">= <expr pos:start="27:25" pos:end="27:62"><call pos:start="27:25" pos:end="27:62"><name pos:start="27:25" pos:end="27:51">vmxnet_rx_pkt_get_total_len</name><argument_list pos:start="27:52" pos:end="27:62">(<argument pos:start="27:53" pos:end="27:61"><expr pos:start="27:53" pos:end="27:61"><name pos:start="27:53" pos:end="27:61"><name pos:start="27:53" pos:end="27:53">s</name><operator pos:start="27:54" pos:end="27:55">-&gt;</operator><name pos:start="27:56" pos:end="27:61">rx_pkt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint16_t</name></type> <name pos:start="29:14" pos:end="29:22">num_frags</name> <init pos:start="29:24" pos:end="29:26">= <expr pos:start="29:26" pos:end="29:26"><literal type="number" pos:start="29:26" pos:end="29:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:10">size_t</name></type> <name pos:start="31:12" pos:end="31:21">chunk_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><call pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:22">vmxnet_rx_pkt_dump</name><argument_list pos:start="35:23" pos:end="35:33">(<argument pos:start="35:24" pos:end="35:32"><expr pos:start="35:24" pos:end="35:32"><name pos:start="35:24" pos:end="35:32"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:32">rx_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="39:5" pos:end="139:5">while <condition pos:start="39:11" pos:end="39:26">(<expr pos:start="39:12" pos:end="39:25"><name pos:start="39:12" pos:end="39:21">bytes_left</name> <operator pos:start="39:23" pos:end="39:23">&gt;</operator> <literal type="number" pos:start="39:25" pos:end="39:25">0</literal></expr>)</condition> <block pos:start="39:28" pos:end="139:5">{<block_content pos:start="45:9" pos:end="137:24">



        <comment type="block" pos:start="43:9" pos:end="43:45">/* cannot add more frags to packet */</comment>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:41">(<expr pos:start="45:13" pos:end="45:40"><name pos:start="45:13" pos:end="45:21">num_frags</name> <operator pos:start="45:23" pos:end="45:24">==</operator> <name pos:start="45:26" pos:end="45:40"><name pos:start="45:26" pos:end="45:26">s</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:40">max_rx_frags</name></name></expr>)</condition> <block pos:start="45:43" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:18">

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:71"><expr pos:start="53:9" pos:end="53:70"><name pos:start="53:9" pos:end="53:19">new_rxcd_pa</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:70"><name pos:start="53:23" pos:end="53:43">vmxnet3_pop_rxc_descr</name><argument_list pos:start="53:44" pos:end="53:70">(<argument pos:start="53:45" pos:end="53:45"><expr pos:start="53:45" pos:end="53:45"><name pos:start="53:45" pos:end="53:45">s</name></expr></argument>, <argument pos:start="53:48" pos:end="53:54"><expr pos:start="53:48" pos:end="53:54"><name pos:start="53:48" pos:end="53:54">RXQ_IDX</name></expr></argument>, <argument pos:start="53:57" pos:end="53:69"><expr pos:start="53:57" pos:end="53:69"><operator pos:start="53:57" pos:end="53:57">&amp;</operator><name pos:start="53:58" pos:end="53:69">new_rxcd_gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:25">(<expr pos:start="55:13" pos:end="55:24"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:24">new_rxcd_pa</name></expr>)</condition> <block pos:start="55:27" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:18">

            <break pos:start="57:13" pos:end="57:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:77">(<expr pos:start="63:13" pos:end="63:76"><operator pos:start="63:13" pos:end="63:13">!</operator><call pos:start="63:14" pos:end="63:76"><name pos:start="63:14" pos:end="63:38">vmxnet3_get_next_rx_descr</name><argument_list pos:start="63:39" pos:end="63:76">(<argument pos:start="63:40" pos:end="63:40"><expr pos:start="63:40" pos:end="63:40"><name pos:start="63:40" pos:end="63:40">s</name></expr></argument>, <argument pos:start="63:43" pos:end="63:49"><expr pos:start="63:43" pos:end="63:49"><name pos:start="63:43" pos:end="63:49">is_head</name></expr></argument>, <argument pos:start="63:52" pos:end="63:55"><expr pos:start="63:52" pos:end="63:55"><operator pos:start="63:52" pos:end="63:52">&amp;</operator><name pos:start="63:53" pos:end="63:55">rxd</name></expr></argument>, <argument pos:start="63:58" pos:end="63:65"><expr pos:start="63:58" pos:end="63:65"><operator pos:start="63:58" pos:end="63:58">&amp;</operator><name pos:start="63:59" pos:end="63:65">rxd_idx</name></expr></argument>, <argument pos:start="63:68" pos:end="63:75"><expr pos:start="63:68" pos:end="63:75"><operator pos:start="63:68" pos:end="63:68">&amp;</operator><name pos:start="63:69" pos:end="63:75">rx_ridx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:79" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:18">

            <break pos:start="65:13" pos:end="65:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:46"><expr pos:start="71:9" pos:end="71:45"><name pos:start="71:9" pos:end="71:18">chunk_size</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <call pos:start="71:22" pos:end="71:45"><name pos:start="71:22" pos:end="71:24">MIN</name><argument_list pos:start="71:25" pos:end="71:45">(<argument pos:start="71:26" pos:end="71:35"><expr pos:start="71:26" pos:end="71:35"><name pos:start="71:26" pos:end="71:35">bytes_left</name></expr></argument>, <argument pos:start="71:38" pos:end="71:44"><expr pos:start="71:38" pos:end="71:44"><name pos:start="71:38" pos:end="71:44"><name pos:start="71:38" pos:end="71:40">rxd</name><operator pos:start="71:41" pos:end="71:41">.</operator><name pos:start="71:42" pos:end="71:44">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="75:74"><expr pos:start="73:9" pos:end="75:73"><call pos:start="73:9" pos:end="75:73"><name pos:start="73:9" pos:end="73:38">vmxnet3_physical_memory_writev</name><argument_list pos:start="73:39" pos:end="75:73">(<argument pos:start="73:40" pos:end="73:43"><expr pos:start="73:40" pos:end="73:43"><name pos:start="73:40" pos:end="73:43">data</name></expr></argument>, <argument pos:start="73:46" pos:end="73:57"><expr pos:start="73:46" pos:end="73:57"><name pos:start="73:46" pos:end="73:57">bytes_copied</name></expr></argument>,

                                       <argument pos:start="75:40" pos:end="75:60"><expr pos:start="75:40" pos:end="75:60"><call pos:start="75:40" pos:end="75:60"><name pos:start="75:40" pos:end="75:50">le64_to_cpu</name><argument_list pos:start="75:51" pos:end="75:60">(<argument pos:start="75:52" pos:end="75:59"><expr pos:start="75:52" pos:end="75:59"><name pos:start="75:52" pos:end="75:59"><name pos:start="75:52" pos:end="75:54">rxd</name><operator pos:start="75:55" pos:end="75:55">.</operator><name pos:start="75:56" pos:end="75:59">addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:63" pos:end="75:72"><expr pos:start="75:63" pos:end="75:72"><name pos:start="75:63" pos:end="75:72">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:35"><expr pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:20">bytes_copied</name> <operator pos:start="77:22" pos:end="77:23">+=</operator> <name pos:start="77:25" pos:end="77:34">chunk_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:18">bytes_left</name> <operator pos:start="79:20" pos:end="79:21">-=</operator> <name pos:start="79:23" pos:end="79:32">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:36"><expr pos:start="83:9" pos:end="83:35"><call pos:start="83:9" pos:end="83:35"><name pos:start="83:9" pos:end="83:29">vmxnet3_dump_rx_descr</name><argument_list pos:start="83:30" pos:end="83:35">(<argument pos:start="83:31" pos:end="83:34"><expr pos:start="83:31" pos:end="83:34"><operator pos:start="83:31" pos:end="83:31">&amp;</operator><name pos:start="83:32" pos:end="83:34">rxd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:31">(<expr pos:start="87:13" pos:end="87:30"><literal type="number" pos:start="87:13" pos:end="87:13">0</literal> <operator pos:start="87:15" pos:end="87:16">!=</operator> <name pos:start="87:18" pos:end="87:30">ready_rxcd_pa</name></expr>)</condition> <block pos:start="87:33" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:74">

            <expr_stmt pos:start="89:13" pos:end="89:74"><expr pos:start="89:13" pos:end="89:73"><call pos:start="89:13" pos:end="89:73"><name pos:start="89:13" pos:end="89:37">cpu_physical_memory_write</name><argument_list pos:start="89:38" pos:end="89:73">(<argument pos:start="89:39" pos:end="89:51"><expr pos:start="89:39" pos:end="89:51"><name pos:start="89:39" pos:end="89:51">ready_rxcd_pa</name></expr></argument>, <argument pos:start="89:54" pos:end="89:58"><expr pos:start="89:54" pos:end="89:58"><operator pos:start="89:54" pos:end="89:54">&amp;</operator><name pos:start="89:55" pos:end="89:58">rxcd</name></expr></argument>, <argument pos:start="89:61" pos:end="89:72"><expr pos:start="89:61" pos:end="89:72"><sizeof pos:start="89:61" pos:end="89:72">sizeof<argument_list pos:start="89:67" pos:end="89:72">(<argument pos:start="89:68" pos:end="89:71"><expr pos:start="89:68" pos:end="89:71"><name pos:start="89:68" pos:end="89:71">rxcd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:60"><expr pos:start="95:9" pos:end="95:59"><call pos:start="95:9" pos:end="95:59"><name pos:start="95:9" pos:end="95:14">memset</name><argument_list pos:start="95:15" pos:end="95:59">(<argument pos:start="95:16" pos:end="95:20"><expr pos:start="95:16" pos:end="95:20"><operator pos:start="95:16" pos:end="95:16">&amp;</operator><name pos:start="95:17" pos:end="95:20">rxcd</name></expr></argument>, <argument pos:start="95:23" pos:end="95:23"><expr pos:start="95:23" pos:end="95:23"><literal type="number" pos:start="95:23" pos:end="95:23">0</literal></expr></argument>, <argument pos:start="95:26" pos:end="95:58"><expr pos:start="95:26" pos:end="95:58"><sizeof pos:start="95:26" pos:end="95:58">sizeof<argument_list pos:start="95:32" pos:end="95:58">(<argument pos:start="95:33" pos:end="95:57"><expr pos:start="95:33" pos:end="95:57">struct <name pos:start="95:40" pos:end="95:57">Vmxnet3_RxCompDesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:12">rxcd</name><operator pos:start="97:13" pos:end="97:13">.</operator><name pos:start="97:14" pos:end="97:19">rxdIdx</name></name> <operator pos:start="97:21" pos:end="97:21">=</operator> <name pos:start="97:23" pos:end="97:29">rxd_idx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:12">rxcd</name><operator pos:start="99:13" pos:end="99:13">.</operator><name pos:start="99:14" pos:end="99:16">len</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:29">chunk_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:27"><expr pos:start="101:9" pos:end="101:26"><name pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:12">rxcd</name><operator pos:start="101:13" pos:end="101:13">.</operator><name pos:start="101:14" pos:end="101:16">sop</name></name> <operator pos:start="101:18" pos:end="101:18">=</operator> <name pos:start="101:20" pos:end="101:26">is_head</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:32"><expr pos:start="103:9" pos:end="103:31"><name pos:start="103:9" pos:end="103:16"><name pos:start="103:9" pos:end="103:12">rxcd</name><operator pos:start="103:13" pos:end="103:13">.</operator><name pos:start="103:14" pos:end="103:16">gen</name></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <name pos:start="103:20" pos:end="103:31">new_rxcd_gen</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:51"><expr pos:start="105:9" pos:end="105:50"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:12">rxcd</name><operator pos:start="105:13" pos:end="105:13">.</operator><name pos:start="105:14" pos:end="105:17">rqID</name></name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:27">RXQ_IDX</name> <operator pos:start="105:29" pos:end="105:29">+</operator> <name pos:start="105:31" pos:end="105:37">rx_ridx</name> <operator pos:start="105:39" pos:end="105:39">*</operator> <name pos:start="105:41" pos:end="105:50"><name pos:start="105:41" pos:end="105:41">s</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:50">rxq_num</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:28">(<expr pos:start="109:13" pos:end="109:27"><literal type="number" pos:start="109:13" pos:end="109:13">0</literal> <operator pos:start="109:15" pos:end="109:16">==</operator> <name pos:start="109:18" pos:end="109:27">bytes_left</name></expr>)</condition> <block pos:start="109:30" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:54">

            <expr_stmt pos:start="111:13" pos:end="111:54"><expr pos:start="111:13" pos:end="111:53"><call pos:start="111:13" pos:end="111:53"><name pos:start="111:13" pos:end="111:35">vmxnet3_rx_update_descr</name><argument_list pos:start="111:36" pos:end="111:53">(<argument pos:start="111:37" pos:end="111:45"><expr pos:start="111:37" pos:end="111:45"><name pos:start="111:37" pos:end="111:45"><name pos:start="111:37" pos:end="111:37">s</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:45">rx_pkt</name></name></expr></argument>, <argument pos:start="111:48" pos:end="111:52"><expr pos:start="111:48" pos:end="111:52"><operator pos:start="111:48" pos:end="111:48">&amp;</operator><name pos:start="111:49" pos:end="111:52">rxcd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="117:9" pos:end="129:44"><expr pos:start="117:9" pos:end="129:43"><call pos:start="117:9" pos:end="129:43"><name pos:start="117:9" pos:end="117:17">VMW_RIPRN</name><argument_list pos:start="117:18" pos:end="129:43">(<argument pos:start="117:19" pos:end="119:43"><expr pos:start="117:19" pos:end="119:43"><literal type="string" pos:start="117:19" pos:end="117:76">"RX Completion descriptor: rxRing: %lu rxIdx %lu len %lu "</literal>

                  <literal type="string" pos:start="119:19" pos:end="119:43">"sop %d csum_correct %lu"</literal></expr></argument>,

                  <argument pos:start="121:19" pos:end="121:41"><expr pos:start="121:19" pos:end="121:41"><operator pos:start="121:19" pos:end="121:19">(</operator><name pos:start="121:20" pos:end="121:27">unsigned</name> <name pos:start="121:29" pos:end="121:32">long</name><operator pos:start="121:33" pos:end="121:33">)</operator> <name pos:start="121:35" pos:end="121:41">rx_ridx</name></expr></argument>,

                  <argument pos:start="123:19" pos:end="123:45"><expr pos:start="123:19" pos:end="123:45"><operator pos:start="123:19" pos:end="123:19">(</operator><name pos:start="123:20" pos:end="123:27">unsigned</name> <name pos:start="123:29" pos:end="123:32">long</name><operator pos:start="123:33" pos:end="123:33">)</operator> <name pos:start="123:35" pos:end="123:45"><name pos:start="123:35" pos:end="123:38">rxcd</name><operator pos:start="123:39" pos:end="123:39">.</operator><name pos:start="123:40" pos:end="123:45">rxdIdx</name></name></expr></argument>,

                  <argument pos:start="125:19" pos:end="125:42"><expr pos:start="125:19" pos:end="125:42"><operator pos:start="125:19" pos:end="125:19">(</operator><name pos:start="125:20" pos:end="125:27">unsigned</name> <name pos:start="125:29" pos:end="125:32">long</name><operator pos:start="125:33" pos:end="125:33">)</operator> <name pos:start="125:35" pos:end="125:42"><name pos:start="125:35" pos:end="125:38">rxcd</name><operator pos:start="125:39" pos:end="125:39">.</operator><name pos:start="125:40" pos:end="125:42">len</name></name></expr></argument>,

                  <argument pos:start="127:19" pos:end="127:32"><expr pos:start="127:19" pos:end="127:32"><operator pos:start="127:19" pos:end="127:19">(</operator><name pos:start="127:20" pos:end="127:22">int</name><operator pos:start="127:23" pos:end="127:23">)</operator> <name pos:start="127:25" pos:end="127:32"><name pos:start="127:25" pos:end="127:28">rxcd</name><operator pos:start="127:29" pos:end="127:29">.</operator><name pos:start="127:30" pos:end="127:32">sop</name></name></expr></argument>,

                  <argument pos:start="129:19" pos:end="129:42"><expr pos:start="129:19" pos:end="129:42"><operator pos:start="129:19" pos:end="129:19">(</operator><name pos:start="129:20" pos:end="129:27">unsigned</name> <name pos:start="129:29" pos:end="129:32">long</name><operator pos:start="129:33" pos:end="129:33">)</operator> <name pos:start="129:35" pos:end="129:42"><name pos:start="129:35" pos:end="129:38">rxcd</name><operator pos:start="129:39" pos:end="129:39">.</operator><name pos:start="129:40" pos:end="129:42">tuc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:24"><expr pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:15">is_head</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:23">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:36"><expr pos:start="135:9" pos:end="135:35"><name pos:start="135:9" pos:end="135:21">ready_rxcd_pa</name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:35">new_rxcd_pa</name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:24"><expr pos:start="137:9" pos:end="137:23"><name pos:start="137:9" pos:end="137:19">new_rxcd_pa</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="143:5" pos:end="157:5"><if pos:start="143:5" pos:end="157:5">if <condition pos:start="143:8" pos:end="143:27">(<expr pos:start="143:9" pos:end="143:26"><literal type="number" pos:start="143:9" pos:end="143:9">0</literal> <operator pos:start="143:11" pos:end="143:12">!=</operator> <name pos:start="143:14" pos:end="143:26">ready_rxcd_pa</name></expr>)</condition> <block pos:start="143:29" pos:end="157:5">{<block_content pos:start="145:9" pos:end="155:18">

        <expr_stmt pos:start="145:9" pos:end="145:21"><expr pos:start="145:9" pos:end="145:20"><name pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:12">rxcd</name><operator pos:start="145:13" pos:end="145:13">.</operator><name pos:start="145:14" pos:end="145:16">eop</name></name> <operator pos:start="145:18" pos:end="145:18">=</operator> <literal type="number" pos:start="145:20" pos:end="145:20">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:37"><expr pos:start="147:9" pos:end="147:36"><name pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:12">rxcd</name><operator pos:start="147:13" pos:end="147:13">.</operator><name pos:start="147:14" pos:end="147:16">err</name></name> <operator pos:start="147:18" pos:end="147:18">=</operator> <operator pos:start="147:20" pos:end="147:20">(</operator><literal type="number" pos:start="147:21" pos:end="147:21">0</literal> <operator pos:start="147:23" pos:end="147:24">!=</operator> <name pos:start="147:26" pos:end="147:35">bytes_left</name><operator pos:start="147:36" pos:end="147:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:70"><expr pos:start="149:9" pos:end="149:69"><call pos:start="149:9" pos:end="149:69"><name pos:start="149:9" pos:end="149:33">cpu_physical_memory_write</name><argument_list pos:start="149:34" pos:end="149:69">(<argument pos:start="149:35" pos:end="149:47"><expr pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:47">ready_rxcd_pa</name></expr></argument>, <argument pos:start="149:50" pos:end="149:54"><expr pos:start="149:50" pos:end="149:54"><operator pos:start="149:50" pos:end="149:50">&amp;</operator><name pos:start="149:51" pos:end="149:54">rxcd</name></expr></argument>, <argument pos:start="149:57" pos:end="149:68"><expr pos:start="149:57" pos:end="149:68"><sizeof pos:start="149:57" pos:end="149:68">sizeof<argument_list pos:start="149:63" pos:end="149:68">(<argument pos:start="149:64" pos:end="149:67"><expr pos:start="149:64" pos:end="149:67"><name pos:start="149:64" pos:end="149:67">rxcd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="153:9" pos:end="153:41">/* Flush RX descriptor changes */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:18"><expr pos:start="155:9" pos:end="155:17"><call pos:start="155:9" pos:end="155:17"><name pos:start="155:9" pos:end="155:15">smp_wmb</name><argument_list pos:start="155:16" pos:end="155:17">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:25">(<expr pos:start="161:9" pos:end="161:24"><literal type="number" pos:start="161:9" pos:end="161:9">0</literal> <operator pos:start="161:11" pos:end="161:12">!=</operator> <name pos:start="161:14" pos:end="161:24">new_rxcd_pa</name></expr>)</condition> <block pos:start="161:27" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:45">

        <expr_stmt pos:start="163:9" pos:end="163:45"><expr pos:start="163:9" pos:end="163:44"><call pos:start="163:9" pos:end="163:44"><name pos:start="163:9" pos:end="163:32">vmxnet3_revert_rxc_descr</name><argument_list pos:start="163:33" pos:end="163:44">(<argument pos:start="163:34" pos:end="163:34"><expr pos:start="163:34" pos:end="163:34"><name pos:start="163:34" pos:end="163:34">s</name></expr></argument>, <argument pos:start="163:37" pos:end="163:43"><expr pos:start="163:37" pos:end="163:43"><name pos:start="163:37" pos:end="163:43">RXQ_IDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:65"><expr pos:start="169:5" pos:end="169:64"><call pos:start="169:5" pos:end="169:64"><name pos:start="169:5" pos:end="169:29">vmxnet3_trigger_interrupt</name><argument_list pos:start="169:30" pos:end="169:64">(<argument pos:start="169:31" pos:end="169:31"><expr pos:start="169:31" pos:end="169:31"><name pos:start="169:31" pos:end="169:31">s</name></expr></argument>, <argument pos:start="169:34" pos:end="169:63"><expr pos:start="169:34" pos:end="169:63"><name pos:start="169:34" pos:end="169:54"><name pos:start="169:34" pos:end="169:34">s</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:45">rxq_descr</name><index pos:start="169:46" pos:end="169:54">[<expr pos:start="169:47" pos:end="169:53"><name pos:start="169:47" pos:end="169:53">RXQ_IDX</name></expr>]</index></name><operator pos:start="169:55" pos:end="169:55">.</operator><name pos:start="169:56" pos:end="169:63">intr_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="173:5" pos:end="193:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="173:24">(<expr pos:start="173:9" pos:end="173:23"><name pos:start="173:9" pos:end="173:18">bytes_left</name> <operator pos:start="173:20" pos:end="173:21">==</operator> <literal type="number" pos:start="173:23" pos:end="173:23">0</literal></expr>)</condition> <block pos:start="173:26" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:20">

        <expr_stmt pos:start="175:9" pos:end="175:75"><expr pos:start="175:9" pos:end="175:74"><call pos:start="175:9" pos:end="175:74"><name pos:start="175:9" pos:end="175:39">vmxnet3_on_rx_done_update_stats</name><argument_list pos:start="175:40" pos:end="175:74">(<argument pos:start="175:41" pos:end="175:41"><expr pos:start="175:41" pos:end="175:41"><name pos:start="175:41" pos:end="175:41">s</name></expr></argument>, <argument pos:start="175:44" pos:end="175:50"><expr pos:start="175:44" pos:end="175:50"><name pos:start="175:44" pos:end="175:50">RXQ_IDX</name></expr></argument>, <argument pos:start="175:53" pos:end="175:73"><expr pos:start="175:53" pos:end="175:73"><name pos:start="175:53" pos:end="175:73">VMXNET3_PKT_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:20">return <expr pos:start="177:16" pos:end="177:19"><name pos:start="177:16" pos:end="177:19">true</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="179:7" pos:end="185:5">else if <condition pos:start="179:15" pos:end="179:44">(<expr pos:start="179:16" pos:end="179:43"><name pos:start="179:16" pos:end="179:24">num_frags</name> <operator pos:start="179:26" pos:end="179:27">==</operator> <name pos:start="179:29" pos:end="179:43"><name pos:start="179:29" pos:end="179:29">s</name><operator pos:start="179:30" pos:end="179:31">-&gt;</operator><name pos:start="179:32" pos:end="179:43">max_rx_frags</name></name></expr>)</condition> <block pos:start="179:46" pos:end="185:5">{<block_content pos:start="181:9" pos:end="183:21">

        <expr_stmt pos:start="181:9" pos:end="181:78"><expr pos:start="181:9" pos:end="181:77"><call pos:start="181:9" pos:end="181:77"><name pos:start="181:9" pos:end="181:39">vmxnet3_on_rx_done_update_stats</name><argument_list pos:start="181:40" pos:end="181:77">(<argument pos:start="181:41" pos:end="181:41"><expr pos:start="181:41" pos:end="181:41"><name pos:start="181:41" pos:end="181:41">s</name></expr></argument>, <argument pos:start="181:44" pos:end="181:50"><expr pos:start="181:44" pos:end="181:50"><name pos:start="181:44" pos:end="181:50">RXQ_IDX</name></expr></argument>, <argument pos:start="181:53" pos:end="181:76"><expr pos:start="181:53" pos:end="181:76"><name pos:start="181:53" pos:end="181:76">VMXNET3_PKT_STATUS_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="183:9" pos:end="183:21">return <expr pos:start="183:16" pos:end="183:20"><name pos:start="183:16" pos:end="183:20">false</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="193:5">else <block pos:start="185:12" pos:end="193:5">{<block_content pos:start="187:9" pos:end="191:21">

        <expr_stmt pos:start="187:9" pos:end="189:71"><expr pos:start="187:9" pos:end="189:70"><call pos:start="187:9" pos:end="189:70"><name pos:start="187:9" pos:end="187:39">vmxnet3_on_rx_done_update_stats</name><argument_list pos:start="187:40" pos:end="189:70">(<argument pos:start="187:41" pos:end="187:41"><expr pos:start="187:41" pos:end="187:41"><name pos:start="187:41" pos:end="187:41">s</name></expr></argument>, <argument pos:start="187:44" pos:end="187:50"><expr pos:start="187:44" pos:end="187:50"><name pos:start="187:44" pos:end="187:50">RXQ_IDX</name></expr></argument>,

                                        <argument pos:start="189:41" pos:end="189:69"><expr pos:start="189:41" pos:end="189:69"><name pos:start="189:41" pos:end="189:69">VMXNET3_PKT_STATUS_OUT_OF_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="191:9" pos:end="191:21">return <expr pos:start="191:16" pos:end="191:20"><name pos:start="191:16" pos:end="191:20">false</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block>
</unit>
