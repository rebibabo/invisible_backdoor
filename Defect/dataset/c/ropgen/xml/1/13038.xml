<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13038.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:19">v7m_msr</name>)<parameter_list pos:start="1:21" pos:end="1:70">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:32">CPUARMState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">env</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:47">uint32_t</name></type> <name pos:start="1:49" pos:end="1:55">maskreg</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:65">uint32_t</name></type> <name pos:start="1:67" pos:end="1:69">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="19:5" pos:end="155:5">

    <comment type="block" pos:start="5:5" pos:end="17:7">/* We're passed bits [11..0] of the instruction; extract

     * SYSm and the mask bits.

     * Invalid combinations of SYSm and mask are UNPREDICTABLE;

     * we choose to treat them as if the mask bits were valid.

     * NB that the pseudocode 'mask' variable is bits [11..10],

     * whereas ours is [11..8].

     */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:45"><decl pos:start="19:5" pos:end="19:44"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:17">mask</name> <init pos:start="19:19" pos:end="19:44">= <expr pos:start="19:21" pos:end="19:44"><call pos:start="19:21" pos:end="19:44"><name pos:start="19:21" pos:end="19:29">extract32</name><argument_list pos:start="19:30" pos:end="19:44">(<argument pos:start="19:31" pos:end="19:37"><expr pos:start="19:31" pos:end="19:37"><name pos:start="19:31" pos:end="19:37">maskreg</name></expr></argument>, <argument pos:start="19:40" pos:end="19:40"><expr pos:start="19:40" pos:end="19:40"><literal type="number" pos:start="19:40" pos:end="19:40">8</literal></expr></argument>, <argument pos:start="19:43" pos:end="19:43"><expr pos:start="19:43" pos:end="19:43"><literal type="number" pos:start="19:43" pos:end="19:43">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:44"><decl pos:start="21:5" pos:end="21:43"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:16">reg</name> <init pos:start="21:18" pos:end="21:43">= <expr pos:start="21:20" pos:end="21:43"><call pos:start="21:20" pos:end="21:43"><name pos:start="21:20" pos:end="21:28">extract32</name><argument_list pos:start="21:29" pos:end="21:43">(<argument pos:start="21:30" pos:end="21:36"><expr pos:start="21:30" pos:end="21:36"><name pos:start="21:30" pos:end="21:36">maskreg</name></expr></argument>, <argument pos:start="21:39" pos:end="21:39"><expr pos:start="21:39" pos:end="21:39"><literal type="number" pos:start="21:39" pos:end="21:39">0</literal></expr></argument>, <argument pos:start="21:42" pos:end="21:42"><expr pos:start="21:42" pos:end="21:42"><literal type="number" pos:start="21:42" pos:end="21:42">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:44">(<expr pos:start="25:9" pos:end="25:43"><call pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:22">arm_current_el</name><argument_list pos:start="25:23" pos:end="25:27">(<argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">env</name></expr></argument>)</argument_list></call> <operator pos:start="25:29" pos:end="25:30">==</operator> <literal type="number" pos:start="25:32" pos:end="25:32">0</literal> <operator pos:start="25:34" pos:end="25:35">&amp;&amp;</operator> <name pos:start="25:37" pos:end="25:39">reg</name> <operator pos:start="25:41" pos:end="25:41">&gt;</operator> <literal type="number" pos:start="25:43" pos:end="25:43">7</literal></expr>)</condition> <block pos:start="25:46" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:15">

        <comment type="block" pos:start="27:9" pos:end="27:65">/* only xPSR sub-fields may be written by unprivileged */</comment>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="35:5" pos:end="155:5">switch <condition pos:start="35:12" pos:end="35:16">(<expr pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">reg</name></expr>)</condition> <block pos:start="35:18" pos:end="155:5">{<block_content pos:start="37:5" pos:end="153:15">

    <case pos:start="37:5" pos:end="37:17">case <expr pos:start="37:10" pos:end="37:16"><literal type="number" pos:start="37:10" pos:end="37:10">0</literal> <operator pos:start="37:12" pos:end="37:14">...</operator> <literal type="number" pos:start="37:16" pos:end="37:16">7</literal></expr>:</case> <comment type="block" pos:start="37:19" pos:end="37:39">/* xPSR sub-fields */</comment>

        <comment type="block" pos:start="39:9" pos:end="39:44">/* only APSR is actually writable */</comment>

        <if_stmt pos:start="41:9" pos:end="61:9"><if pos:start="41:9" pos:end="61:9">if <condition pos:start="41:12" pos:end="41:23">(<expr pos:start="41:13" pos:end="41:22"><operator pos:start="41:13" pos:end="41:13">!</operator><operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:17">reg</name> <operator pos:start="41:19" pos:end="41:19">&amp;</operator> <literal type="number" pos:start="41:21" pos:end="41:21">4</literal><operator pos:start="41:22" pos:end="41:22">)</operator></expr>)</condition> <block pos:start="41:25" pos:end="61:9">{<block_content pos:start="43:13" pos:end="59:43">

            <decl_stmt pos:start="43:13" pos:end="43:34"><decl pos:start="43:13" pos:end="43:33"><type pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:20">uint32_t</name></type> <name pos:start="43:22" pos:end="43:29">apsrmask</name> <init pos:start="43:31" pos:end="43:33">= <expr pos:start="43:33" pos:end="43:33"><literal type="number" pos:start="43:33" pos:end="43:33">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:25">(<expr pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:20">mask</name> <operator pos:start="47:22" pos:end="47:22">&amp;</operator> <literal type="number" pos:start="47:24" pos:end="47:24">8</literal></expr>)</condition> <block pos:start="47:27" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:39">

                <expr_stmt pos:start="49:17" pos:end="49:39"><expr pos:start="49:17" pos:end="49:38"><name pos:start="49:17" pos:end="49:24">apsrmask</name> <operator pos:start="49:26" pos:end="49:27">|=</operator> <literal type="number" pos:start="49:29" pos:end="49:38">0xf8000000</literal></expr>;</expr_stmt> <comment type="block" pos:start="49:41" pos:end="49:56">/* APSR NZCVQ */</comment>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:70">(<expr pos:start="53:17" pos:end="53:69"><operator pos:start="53:17" pos:end="53:17">(</operator><name pos:start="53:18" pos:end="53:21">mask</name> <operator pos:start="53:23" pos:end="53:23">&amp;</operator> <literal type="number" pos:start="53:25" pos:end="53:25">4</literal><operator pos:start="53:26" pos:end="53:26">)</operator> <operator pos:start="53:28" pos:end="53:29">&amp;&amp;</operator> <call pos:start="53:31" pos:end="53:69"><name pos:start="53:31" pos:end="53:41">arm_feature</name><argument_list pos:start="53:42" pos:end="53:69">(<argument pos:start="53:43" pos:end="53:45"><expr pos:start="53:43" pos:end="53:45"><name pos:start="53:43" pos:end="53:45">env</name></expr></argument>, <argument pos:start="53:48" pos:end="53:68"><expr pos:start="53:48" pos:end="53:68"><name pos:start="53:48" pos:end="53:68">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:72" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:39">

                <expr_stmt pos:start="55:17" pos:end="55:39"><expr pos:start="55:17" pos:end="55:38"><name pos:start="55:17" pos:end="55:24">apsrmask</name> <operator pos:start="55:26" pos:end="55:27">|=</operator> <literal type="number" pos:start="55:29" pos:end="55:38">0x000f0000</literal></expr>;</expr_stmt> <comment type="block" pos:start="55:41" pos:end="55:58">/* APSR GE[3:0] */</comment>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:43"><expr pos:start="59:13" pos:end="59:42"><call pos:start="59:13" pos:end="59:42"><name pos:start="59:13" pos:end="59:22">xpsr_write</name><argument_list pos:start="59:23" pos:end="59:42">(<argument pos:start="59:24" pos:end="59:26"><expr pos:start="59:24" pos:end="59:26"><name pos:start="59:24" pos:end="59:26">env</name></expr></argument>, <argument pos:start="59:29" pos:end="59:31"><expr pos:start="59:29" pos:end="59:31"><name pos:start="59:29" pos:end="59:31">val</name></expr></argument>, <argument pos:start="59:34" pos:end="59:41"><expr pos:start="59:34" pos:end="59:41"><name pos:start="59:34" pos:end="59:41">apsrmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:11">case <expr pos:start="65:10" pos:end="65:10"><literal type="number" pos:start="65:10" pos:end="65:10">8</literal></expr>:</case> <comment type="block" pos:start="65:13" pos:end="65:21">/* MSP */</comment>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:56">(<expr pos:start="67:13" pos:end="67:55"><name pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:15">env</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:20">v7m</name><operator pos:start="67:21" pos:end="67:21">.</operator><name pos:start="67:22" pos:end="67:28">control</name></name> <operator pos:start="67:30" pos:end="67:30">&amp;</operator> <name pos:start="67:32" pos:end="67:55">R_V7M_CONTROL_SPSEL_MASK</name></expr>)</condition> <block pos:start="67:58" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:36">

            <expr_stmt pos:start="69:13" pos:end="69:36"><expr pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:15">env</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:20">v7m</name><operator pos:start="69:21" pos:end="69:21">.</operator><name pos:start="69:22" pos:end="69:29">other_sp</name></name> <operator pos:start="69:31" pos:end="69:31">=</operator> <name pos:start="69:33" pos:end="69:35">val</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="75:9">else <block pos:start="71:16" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:32">

            <expr_stmt pos:start="73:13" pos:end="73:32"><expr pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:15">env</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:21">regs</name><index pos:start="73:22" pos:end="73:25">[<expr pos:start="73:23" pos:end="73:24"><literal type="number" pos:start="73:23" pos:end="73:24">13</literal></expr>]</index></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <name pos:start="73:29" pos:end="73:31">val</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:11">case <expr pos:start="79:10" pos:end="79:10"><literal type="number" pos:start="79:10" pos:end="79:10">9</literal></expr>:</case> <comment type="block" pos:start="79:13" pos:end="79:21">/* PSP */</comment>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:56">(<expr pos:start="81:13" pos:end="81:55"><name pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:15">env</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:20">v7m</name><operator pos:start="81:21" pos:end="81:21">.</operator><name pos:start="81:22" pos:end="81:28">control</name></name> <operator pos:start="81:30" pos:end="81:30">&amp;</operator> <name pos:start="81:32" pos:end="81:55">R_V7M_CONTROL_SPSEL_MASK</name></expr>)</condition> <block pos:start="81:58" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:32">

            <expr_stmt pos:start="83:13" pos:end="83:32"><expr pos:start="83:13" pos:end="83:31"><name pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:15">env</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:21">regs</name><index pos:start="83:22" pos:end="83:25">[<expr pos:start="83:23" pos:end="83:24"><literal type="number" pos:start="83:23" pos:end="83:24">13</literal></expr>]</index></name> <operator pos:start="83:27" pos:end="83:27">=</operator> <name pos:start="83:29" pos:end="83:31">val</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="89:9">else <block pos:start="85:16" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:36">

            <expr_stmt pos:start="87:13" pos:end="87:36"><expr pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:29"><name pos:start="87:13" pos:end="87:15">env</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:20">v7m</name><operator pos:start="87:21" pos:end="87:21">.</operator><name pos:start="87:22" pos:end="87:29">other_sp</name></name> <operator pos:start="87:31" pos:end="87:31">=</operator> <name pos:start="87:33" pos:end="87:35">val</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:12">case <expr pos:start="93:10" pos:end="93:11"><literal type="number" pos:start="93:10" pos:end="93:11">16</literal></expr>:</case> <comment type="block" pos:start="93:14" pos:end="93:26">/* PRIMASK */</comment>

        <if_stmt pos:start="95:9" pos:end="103:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:20">(<expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:15">val</name> <operator pos:start="95:17" pos:end="95:17">&amp;</operator> <literal type="number" pos:start="95:19" pos:end="95:19">1</literal></expr>)</condition> <block pos:start="95:22" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:34">

            <expr_stmt pos:start="97:13" pos:end="97:34"><expr pos:start="97:13" pos:end="97:33"><name pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:15">env</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:21">daif</name></name> <operator pos:start="97:23" pos:end="97:24">|=</operator> <name pos:start="97:26" pos:end="97:33">PSTATE_I</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="103:9">else <block pos:start="99:16" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:35">

            <expr_stmt pos:start="101:13" pos:end="101:35"><expr pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:15">env</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:21">daif</name></name> <operator pos:start="101:23" pos:end="101:24">&amp;=</operator> <operator pos:start="101:26" pos:end="101:26">~</operator><name pos:start="101:27" pos:end="101:34">PSTATE_I</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:12">case <expr pos:start="107:10" pos:end="107:11"><literal type="number" pos:start="107:10" pos:end="107:11">17</literal></expr>:</case> <comment type="block" pos:start="107:14" pos:end="107:26">/* BASEPRI */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:38"><expr pos:start="109:9" pos:end="109:37"><name pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:11">env</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:16">v7m</name><operator pos:start="109:17" pos:end="109:17">.</operator><name pos:start="109:18" pos:end="109:24">basepri</name></name> <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:30">val</name> <operator pos:start="109:32" pos:end="109:32">&amp;</operator> <literal type="number" pos:start="109:34" pos:end="109:37">0xff</literal></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:12">case <expr pos:start="113:10" pos:end="113:11"><literal type="number" pos:start="113:10" pos:end="113:11">18</literal></expr>:</case> <comment type="block" pos:start="113:14" pos:end="113:30">/* BASEPRI_MAX */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:20"><expr pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:11">val</name> <operator pos:start="115:13" pos:end="115:14">&amp;=</operator> <literal type="number" pos:start="115:16" pos:end="115:19">0xff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="119:35"><if pos:start="117:9" pos:end="119:35">if <condition pos:start="117:12" pos:end="117:74">(<expr pos:start="117:13" pos:end="117:73"><name pos:start="117:13" pos:end="117:15">val</name> <operator pos:start="117:17" pos:end="117:18">!=</operator> <literal type="number" pos:start="117:20" pos:end="117:20">0</literal> <operator pos:start="117:22" pos:end="117:23">&amp;&amp;</operator> <operator pos:start="117:25" pos:end="117:25">(</operator><name pos:start="117:26" pos:end="117:28">val</name> <operator pos:start="117:30" pos:end="117:30">&lt;</operator> <name pos:start="117:32" pos:end="117:47"><name pos:start="117:32" pos:end="117:34">env</name><operator pos:start="117:35" pos:end="117:36">-&gt;</operator><name pos:start="117:37" pos:end="117:39">v7m</name><operator pos:start="117:40" pos:end="117:40">.</operator><name pos:start="117:41" pos:end="117:47">basepri</name></name> <operator pos:start="117:49" pos:end="117:50">||</operator> <name pos:start="117:52" pos:end="117:67"><name pos:start="117:52" pos:end="117:54">env</name><operator pos:start="117:55" pos:end="117:56">-&gt;</operator><name pos:start="117:57" pos:end="117:59">v7m</name><operator pos:start="117:60" pos:end="117:60">.</operator><name pos:start="117:61" pos:end="117:67">basepri</name></name> <operator pos:start="117:69" pos:end="117:70">==</operator> <literal type="number" pos:start="117:72" pos:end="117:72">0</literal><operator pos:start="117:73" pos:end="117:73">)</operator></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:35"><block_content pos:start="119:13" pos:end="119:35">

            <expr_stmt pos:start="119:13" pos:end="119:35"><expr pos:start="119:13" pos:end="119:34"><name pos:start="119:13" pos:end="119:28"><name pos:start="119:13" pos:end="119:15">env</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:20">v7m</name><operator pos:start="119:21" pos:end="119:21">.</operator><name pos:start="119:22" pos:end="119:28">basepri</name></name> <operator pos:start="119:30" pos:end="119:30">=</operator> <name pos:start="119:32" pos:end="119:34">val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:12">case <expr pos:start="123:10" pos:end="123:11"><literal type="number" pos:start="123:10" pos:end="123:11">19</literal></expr>:</case> <comment type="block" pos:start="123:14" pos:end="123:28">/* FAULTMASK */</comment>

        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:20">(<expr pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:15">val</name> <operator pos:start="125:17" pos:end="125:17">&amp;</operator> <literal type="number" pos:start="125:19" pos:end="125:19">1</literal></expr>)</condition> <block pos:start="125:22" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:34">

            <expr_stmt pos:start="127:13" pos:end="127:34"><expr pos:start="127:13" pos:end="127:33"><name pos:start="127:13" pos:end="127:21"><name pos:start="127:13" pos:end="127:15">env</name><operator pos:start="127:16" pos:end="127:17">-&gt;</operator><name pos:start="127:18" pos:end="127:21">daif</name></name> <operator pos:start="127:23" pos:end="127:24">|=</operator> <name pos:start="127:26" pos:end="127:33">PSTATE_F</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="129:11" pos:end="133:9">else <block pos:start="129:16" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:35">

            <expr_stmt pos:start="131:13" pos:end="131:35"><expr pos:start="131:13" pos:end="131:34"><name pos:start="131:13" pos:end="131:21"><name pos:start="131:13" pos:end="131:15">env</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:21">daif</name></name> <operator pos:start="131:23" pos:end="131:24">&amp;=</operator> <operator pos:start="131:26" pos:end="131:26">~</operator><name pos:start="131:27" pos:end="131:34">PSTATE_F</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:12">case <expr pos:start="137:10" pos:end="137:11"><literal type="number" pos:start="137:10" pos:end="137:11">20</literal></expr>:</case> <comment type="block" pos:start="137:14" pos:end="137:26">/* CONTROL */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:66"><expr pos:start="139:9" pos:end="139:65"><call pos:start="139:9" pos:end="139:65"><name pos:start="139:9" pos:end="139:21">switch_v7m_sp</name><argument_list pos:start="139:22" pos:end="139:65">(<argument pos:start="139:23" pos:end="139:25"><expr pos:start="139:23" pos:end="139:25"><name pos:start="139:23" pos:end="139:25">env</name></expr></argument>, <argument pos:start="139:28" pos:end="139:64"><expr pos:start="139:28" pos:end="139:64"><operator pos:start="139:28" pos:end="139:28">(</operator><name pos:start="139:29" pos:end="139:31">val</name> <operator pos:start="139:33" pos:end="139:33">&amp;</operator> <name pos:start="139:35" pos:end="139:58">R_V7M_CONTROL_SPSEL_MASK</name><operator pos:start="139:59" pos:end="139:59">)</operator> <operator pos:start="139:61" pos:end="139:62">!=</operator> <literal type="number" pos:start="139:64" pos:end="139:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="143:60"><expr pos:start="141:9" pos:end="143:59"><name pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:11">env</name><operator pos:start="141:12" pos:end="141:13">-&gt;</operator><name pos:start="141:14" pos:end="141:16">v7m</name><operator pos:start="141:17" pos:end="141:17">.</operator><name pos:start="141:18" pos:end="141:24">control</name></name> <operator pos:start="141:26" pos:end="141:26">=</operator> <name pos:start="141:28" pos:end="141:30">val</name> <operator pos:start="141:32" pos:end="141:32">&amp;</operator> <operator pos:start="141:34" pos:end="141:34">(</operator><name pos:start="141:35" pos:end="141:58">R_V7M_CONTROL_SPSEL_MASK</name> <operator pos:start="141:60" pos:end="141:60">|</operator>

                                  <name pos:start="143:35" pos:end="143:58">R_V7M_CONTROL_NPRIV_MASK</name><operator pos:start="143:59" pos:end="143:59">)</operator></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <default pos:start="147:5" pos:end="147:12">default:</default>

        <expr_stmt pos:start="149:9" pos:end="151:62"><expr pos:start="149:9" pos:end="151:61"><call pos:start="149:9" pos:end="151:61"><name pos:start="149:9" pos:end="149:21">qemu_log_mask</name><argument_list pos:start="149:22" pos:end="151:61">(<argument pos:start="149:23" pos:end="149:37"><expr pos:start="149:23" pos:end="149:37"><name pos:start="149:23" pos:end="149:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="149:40" pos:end="151:55"><expr pos:start="149:40" pos:end="151:55"><literal type="string" pos:start="149:40" pos:end="149:73">"Attempt to write unknown special"</literal>

                                       <literal type="string" pos:start="151:40" pos:end="151:55">" register %d\n"</literal></expr></argument>, <argument pos:start="151:58" pos:end="151:60"><expr pos:start="151:58" pos:end="151:60"><name pos:start="151:58" pos:end="151:60">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="153:9" pos:end="153:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
