<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20347.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">nsv_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">NSVContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">nsv</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:39"><expr pos:start="11:5" pos:end="11:38"><call pos:start="11:5" pos:end="11:38"><name pos:start="11:5" pos:end="11:11">av_dlog</name><argument_list pos:start="11:12" pos:end="11:38">(<argument pos:start="11:13" pos:end="11:13"><expr pos:start="11:13" pos:end="11:13"><name pos:start="11:13" pos:end="11:13">s</name></expr></argument>, <argument pos:start="11:16" pos:end="11:23"><expr pos:start="11:16" pos:end="11:23"><literal type="string" pos:start="11:16" pos:end="11:23">"%s()\n"</literal></expr></argument>, <argument pos:start="11:26" pos:end="11:37"><expr pos:start="11:26" pos:end="11:37"><name pos:start="11:26" pos:end="11:37">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:47"><expr pos:start="13:5" pos:end="13:46"><call pos:start="13:5" pos:end="13:46"><name pos:start="13:5" pos:end="13:11">av_dlog</name><argument_list pos:start="13:12" pos:end="13:46">(<argument pos:start="13:13" pos:end="13:13"><expr pos:start="13:13" pos:end="13:13"><name pos:start="13:13" pos:end="13:13">s</name></expr></argument>, <argument pos:start="13:16" pos:end="13:32"><expr pos:start="13:16" pos:end="13:32"><literal type="string" pos:start="13:16" pos:end="13:32">"filename '%s'\n"</literal></expr></argument>, <argument pos:start="13:35" pos:end="13:45"><expr pos:start="13:35" pos:end="13:45"><name pos:start="13:35" pos:end="13:45"><name pos:start="13:35" pos:end="13:35">s</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:45">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:7">nsv</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:14">state</name></name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:27">NSV_UNSYNC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:51"><expr pos:start="19:5" pos:end="19:50"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:7">nsv</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:14">ahead</name><index pos:start="19:15" pos:end="19:17">[<expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>]</index></name><operator pos:start="19:18" pos:end="19:18">.</operator><name pos:start="19:19" pos:end="19:22">data</name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:38"><name pos:start="19:26" pos:end="19:28">nsv</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:35">ahead</name><index pos:start="19:36" pos:end="19:38">[<expr pos:start="19:37" pos:end="19:37"><literal type="number" pos:start="19:37" pos:end="19:37">1</literal></expr>]</index></name><operator pos:start="19:39" pos:end="19:39">.</operator><name pos:start="19:40" pos:end="19:43">data</name> <operator pos:start="19:45" pos:end="19:45">=</operator> <name pos:start="19:47" pos:end="19:50">NULL</name></expr>;</expr_stmt>



    <for pos:start="23:5" pos:end="43:5">for <control pos:start="23:9" pos:end="23:46">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:41"><expr pos:start="23:17" pos:end="23:40"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:40">NSV_MAX_RESYNC_TRIES</name></expr>;</condition> <incr pos:start="23:43" pos:end="23:45"><expr pos:start="23:43" pos:end="23:45"><name pos:start="23:43" pos:end="23:43">i</name><operator pos:start="23:44" pos:end="23:45">++</operator></expr></incr>)</control> <block pos:start="23:48" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:9">

        <if_stmt pos:start="25:9" pos:end="27:22"><if pos:start="25:9" pos:end="27:22">if <condition pos:start="25:12" pos:end="25:30">(<expr pos:start="25:13" pos:end="25:29"><call pos:start="25:13" pos:end="25:25"><name pos:start="25:13" pos:end="25:22">nsv_resync</name><argument_list pos:start="25:23" pos:end="25:25">(<argument pos:start="25:24" pos:end="25:24"><expr pos:start="25:24" pos:end="25:24"><name pos:start="25:24" pos:end="25:24">s</name></expr></argument>)</argument_list></call> <operator pos:start="25:27" pos:end="25:27">&lt;</operator> <literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:22"><block_content pos:start="27:13" pos:end="27:22">

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="31:43"><if pos:start="29:9" pos:end="31:43">if <condition pos:start="29:12" pos:end="29:41">(<expr pos:start="29:13" pos:end="29:40"><name pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:15">nsv</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:22">state</name></name> <operator pos:start="29:24" pos:end="29:25">==</operator> <name pos:start="29:27" pos:end="29:40">NSV_FOUND_NSVF</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:43"><block_content pos:start="31:13" pos:end="31:43">

            <expr_stmt pos:start="31:13" pos:end="31:43"><expr pos:start="31:13" pos:end="31:42"><name pos:start="31:13" pos:end="31:15">err</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:42"><name pos:start="31:19" pos:end="31:39">nsv_parse_NSVf_header</name><argument_list pos:start="31:40" pos:end="31:42">(<argument pos:start="31:41" pos:end="31:41"><expr pos:start="31:41" pos:end="31:41"><name pos:start="31:41" pos:end="31:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="33:13" pos:end="33:48">/* we need the first NSVs also... */</comment>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:41">(<expr pos:start="35:13" pos:end="35:40"><name pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:15">nsv</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:22">state</name></name> <operator pos:start="35:24" pos:end="35:25">==</operator> <name pos:start="35:27" pos:end="35:40">NSV_FOUND_NSVS</name></expr>)</condition> <block pos:start="35:43" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:18">

            <expr_stmt pos:start="37:13" pos:end="37:43"><expr pos:start="37:13" pos:end="37:42"><name pos:start="37:13" pos:end="37:15">err</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:42"><name pos:start="37:19" pos:end="37:39">nsv_parse_NSVs_header</name><argument_list pos:start="37:40" pos:end="37:42">(<argument pos:start="37:41" pos:end="37:41"><expr pos:start="37:41" pos:end="37:41"><name pos:start="37:41" pos:end="37:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break> <comment type="block" pos:start="39:20" pos:end="39:51">/* we just want the first one */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="45:5" pos:end="47:18"><if pos:start="45:5" pos:end="47:18">if <condition pos:start="45:8" pos:end="45:26">(<expr pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:21">nb_streams</name></name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <literal type="number" pos:start="45:25" pos:end="45:25">1</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:18"><block_content pos:start="47:9" pos:end="47:18"> <comment type="block" pos:start="45:28" pos:end="45:47">/* no luck so far */</comment>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:73">/* now read the first chunk, so we can attempt to decode more info */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:7">err</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:30"><name pos:start="51:11" pos:end="51:24">nsv_read_chunk</name><argument_list pos:start="51:25" pos:end="51:30">(<argument pos:start="51:26" pos:end="51:26"><expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">s</name></expr></argument>, <argument pos:start="51:29" pos:end="51:29"><expr pos:start="51:29" pos:end="51:29"><literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:34"><expr pos:start="55:5" pos:end="55:33"><call pos:start="55:5" pos:end="55:33"><name pos:start="55:5" pos:end="55:11">av_dlog</name><argument_list pos:start="55:12" pos:end="55:33">(<argument pos:start="55:13" pos:end="55:13"><expr pos:start="55:13" pos:end="55:13"><name pos:start="55:13" pos:end="55:13">s</name></expr></argument>, <argument pos:start="55:16" pos:end="55:32"><expr pos:start="55:16" pos:end="55:32"><literal type="string" pos:start="55:16" pos:end="55:32">"parsed header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="57:5" pos:end="57:15">return <expr pos:start="57:12" pos:end="57:14"><name pos:start="57:12" pos:end="57:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
