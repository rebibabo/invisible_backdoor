<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19445.c" pos:tabs="8"><function pos:start="1:1" pos:end="46:15"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:36">copy_sectors</name><parameter_list pos:start="1:37" pos:end="4:60">(<parameter pos:start="1:38" pos:end="1:57"><decl pos:start="1:38" pos:end="1:57"><type pos:start="1:38" pos:end="1:57"><name pos:start="1:38" pos:end="1:53">BlockDriverState</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">bs</name></decl></parameter>,
                                     <parameter pos:start="2:38" pos:end="2:56"><decl pos:start="2:38" pos:end="2:56"><type pos:start="2:38" pos:end="2:56"><name pos:start="2:38" pos:end="2:45">uint64_t</name></type> <name pos:start="2:47" pos:end="2:56">start_sect</name></decl></parameter>,
                                     <parameter pos:start="3:38" pos:end="3:60"><decl pos:start="3:38" pos:end="3:60"><type pos:start="3:38" pos:end="3:60"><name pos:start="3:38" pos:end="3:45">uint64_t</name></type> <name pos:start="3:47" pos:end="3:60">cluster_offset</name></decl></parameter>,
                                     <parameter pos:start="4:38" pos:end="4:48"><decl pos:start="4:38" pos:end="4:48"><type pos:start="4:38" pos:end="4:48"><name pos:start="4:38" pos:end="4:40">int</name></type> <name pos:start="4:42" pos:end="4:48">n_start</name></decl></parameter>, <parameter pos:start="4:51" pos:end="4:59"><decl pos:start="4:51" pos:end="4:59"><type pos:start="4:51" pos:end="4:59"><name pos:start="4:51" pos:end="4:53">int</name></type> <name pos:start="4:55" pos:end="4:59">n_end</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="46:15">{<block_content pos:start="6:5" pos:end="46:15">
    <decl_stmt pos:start="6:5" pos:end="6:34"><decl pos:start="6:5" pos:end="6:33"><type pos:start="6:5" pos:end="6:19"><name pos:start="6:5" pos:end="6:17">BDRVQcowState</name> <modifier pos:start="6:19" pos:end="6:19">*</modifier></type><name pos:start="6:20" pos:end="6:20">s</name> <init pos:start="6:22" pos:end="6:33">= <expr pos:start="6:24" pos:end="6:33"><name pos:start="6:24" pos:end="6:33"><name pos:start="6:24" pos:end="6:25">bs</name><operator pos:start="6:26" pos:end="6:27">-&gt;</operator><name pos:start="6:28" pos:end="6:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">QEMUIOVector</name></type> <name pos:start="7:18" pos:end="7:21">qiov</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:21"><decl pos:start="8:5" pos:end="8:20"><type pos:start="8:5" pos:end="8:16"><name pos:start="8:5" pos:end="8:16"><name pos:start="8:5" pos:end="8:10">struct</name> <name pos:start="8:12" pos:end="8:16">iovec</name></name></type> <name pos:start="8:18" pos:end="8:20">iov</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>;</decl_stmt>
    <comment type="block" pos:start="10:5" pos:end="14:7">/*
     * If this is the last cluster and it is only partially used, we must only
     * copy until the end of the image, or bdrv_check_request will fail for the
     * bdrv_read/write calls below.
     */</comment>
    <if_stmt pos:start="15:5" pos:end="46:15"><if pos:start="15:5" pos:end="46:15">if <condition pos:start="15:8" pos:end="15:47">(<expr pos:start="15:9" pos:end="15:46"><name pos:start="15:9" pos:end="15:18">start_sect</name> <operator pos:start="15:20" pos:end="15:20">+</operator> <name pos:start="15:22" pos:end="15:26">n_end</name> <operator pos:start="15:28" pos:end="15:28">&gt;</operator> <name pos:start="15:30" pos:end="15:46"><name pos:start="15:30" pos:end="15:31">bs</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:46">total_sectors</name></name></expr>)</condition> <block pos:start="15:49" pos:end="46:15">{<block_content pos:start="16:9" pos:end="46:15">
        <expr_stmt pos:start="16:9" pos:end="16:47"><expr pos:start="16:9" pos:end="16:46"><name pos:start="16:9" pos:end="16:13">n_end</name> <operator pos:start="16:15" pos:end="16:15">=</operator> <name pos:start="16:17" pos:end="16:33"><name pos:start="16:17" pos:end="16:18">bs</name><operator pos:start="16:19" pos:end="16:20">-&gt;</operator><name pos:start="16:21" pos:end="16:33">total_sectors</name></name> <operator pos:start="16:35" pos:end="16:35">-</operator> <name pos:start="16:37" pos:end="16:46">start_sect</name></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:24"><expr pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:5">n</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <name pos:start="17:9" pos:end="17:13">n_end</name> <operator pos:start="17:15" pos:end="17:15">-</operator> <name pos:start="17:17" pos:end="17:23">n_start</name></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="46:15"><if pos:start="18:5" pos:end="46:15">if <condition pos:start="18:8" pos:end="18:15">(<expr pos:start="18:9" pos:end="18:14"><name pos:start="18:9" pos:end="18:9">n</name> <operator pos:start="18:11" pos:end="18:12">&lt;=</operator> <literal type="number" pos:start="18:14" pos:end="18:14">0</literal></expr>)</condition> <block pos:start="18:17" pos:end="46:15">{<block_content pos:start="19:9" pos:end="46:15">
        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return>
    <expr_stmt pos:start="20:5" pos:end="20:39"><expr pos:start="20:5" pos:end="20:38"><name pos:start="20:5" pos:end="20:15"><name pos:start="20:5" pos:end="20:7">iov</name><operator pos:start="20:8" pos:end="20:8">.</operator><name pos:start="20:9" pos:end="20:15">iov_len</name></name> <operator pos:start="20:17" pos:end="20:17">=</operator> <name pos:start="20:19" pos:end="20:19">n</name> <operator pos:start="20:21" pos:end="20:21">*</operator> <name pos:start="20:23" pos:end="20:38">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:7">iov</name><operator pos:start="21:8" pos:end="21:8">.</operator><name pos:start="21:9" pos:end="21:16">iov_base</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="21:51"><name pos:start="21:20" pos:end="21:34">qemu_blockalign</name><argument_list pos:start="21:35" pos:end="21:51">(<argument pos:start="21:36" pos:end="21:37"><expr pos:start="21:36" pos:end="21:37"><name pos:start="21:36" pos:end="21:37">bs</name></expr></argument>, <argument pos:start="21:40" pos:end="21:50"><expr pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:50"><name pos:start="21:40" pos:end="21:42">iov</name><operator pos:start="21:43" pos:end="21:43">.</operator><name pos:start="21:44" pos:end="21:50">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:45"><expr pos:start="22:5" pos:end="22:44"><call pos:start="22:5" pos:end="22:44"><name pos:start="22:5" pos:end="22:28">qemu_iovec_init_external</name><argument_list pos:start="22:29" pos:end="22:44">(<argument pos:start="22:30" pos:end="22:34"><expr pos:start="22:30" pos:end="22:34"><operator pos:start="22:30" pos:end="22:30">&amp;</operator><name pos:start="22:31" pos:end="22:34">qiov</name></expr></argument>, <argument pos:start="22:37" pos:end="22:40"><expr pos:start="22:37" pos:end="22:40"><operator pos:start="22:37" pos:end="22:37">&amp;</operator><name pos:start="22:38" pos:end="22:40">iov</name></expr></argument>, <argument pos:start="22:43" pos:end="22:43"><expr pos:start="22:43" pos:end="22:43"><literal type="number" pos:start="22:43" pos:end="22:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><call pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:16">BLKDBG_EVENT</name><argument_list pos:start="23:17" pos:end="23:43">(<argument pos:start="23:18" pos:end="23:25"><expr pos:start="23:18" pos:end="23:25"><name pos:start="23:18" pos:end="23:25"><name pos:start="23:18" pos:end="23:19">bs</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:25">file</name></name></expr></argument>, <argument pos:start="23:28" pos:end="23:42"><expr pos:start="23:28" pos:end="23:42"><name pos:start="23:28" pos:end="23:42">BLKDBG_COW_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="24:5" pos:end="27:7">/* Call .bdrv_co_readv() directly instead of using the public block-layer
     * interface.  This avoids double I/O throttling and request tracking,
     * which can lead to deadlock when block layer copy-on-read is enabled.
     */</comment>
    <expr_stmt pos:start="28:5" pos:end="28:69"><expr pos:start="28:5" pos:end="28:68"><name pos:start="28:5" pos:end="28:7">ret</name> <operator pos:start="28:9" pos:end="28:9">=</operator> <call pos:start="28:11" pos:end="28:68"><name pos:start="28:11" pos:end="28:32"><name pos:start="28:11" pos:end="28:12">bs</name><operator pos:start="28:13" pos:end="28:14">-&gt;</operator><name pos:start="28:15" pos:end="28:17">drv</name><operator pos:start="28:18" pos:end="28:19">-&gt;</operator><name pos:start="28:20" pos:end="28:32">bdrv_co_readv</name></name><argument_list pos:start="28:33" pos:end="28:68">(<argument pos:start="28:34" pos:end="28:35"><expr pos:start="28:34" pos:end="28:35"><name pos:start="28:34" pos:end="28:35">bs</name></expr></argument>, <argument pos:start="28:38" pos:end="28:57"><expr pos:start="28:38" pos:end="28:57"><name pos:start="28:38" pos:end="28:47">start_sect</name> <operator pos:start="28:49" pos:end="28:49">+</operator> <name pos:start="28:51" pos:end="28:57">n_start</name></expr></argument>, <argument pos:start="28:60" pos:end="28:60"><expr pos:start="28:60" pos:end="28:60"><name pos:start="28:60" pos:end="28:60">n</name></expr></argument>, <argument pos:start="28:63" pos:end="28:67"><expr pos:start="28:63" pos:end="28:67"><operator pos:start="28:63" pos:end="28:63">&amp;</operator><name pos:start="28:64" pos:end="28:67">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="29:5" pos:end="46:15"><if pos:start="29:5" pos:end="46:15">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="46:15">{<block_content pos:start="30:9" pos:end="46:15">
        <goto pos:start="30:9" pos:end="30:17">goto <name pos:start="30:14" pos:end="30:16">out</name>;</goto>
    <if_stmt pos:start="31:5" pos:end="46:15"><if pos:start="31:5" pos:end="46:15">if <condition pos:start="31:8" pos:end="31:24">(<expr pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:23">crypt_method</name></name></expr>)</condition> <block pos:start="31:26" pos:end="46:15">{<block_content pos:start="32:9" pos:end="46:15">
        <expr_stmt pos:start="32:9" pos:end="34:45"><expr pos:start="32:9" pos:end="34:44"><call pos:start="32:9" pos:end="34:44"><name pos:start="32:9" pos:end="32:29">qcow2_encrypt_sectors</name><argument_list pos:start="32:30" pos:end="34:44">(<argument pos:start="32:31" pos:end="32:31"><expr pos:start="32:31" pos:end="32:31"><name pos:start="32:31" pos:end="32:31">s</name></expr></argument>, <argument pos:start="32:34" pos:end="32:53"><expr pos:start="32:34" pos:end="32:53"><name pos:start="32:34" pos:end="32:43">start_sect</name> <operator pos:start="32:45" pos:end="32:45">+</operator> <name pos:start="32:47" pos:end="32:53">n_start</name></expr></argument>,
                        <argument pos:start="33:25" pos:end="33:36"><expr pos:start="33:25" pos:end="33:36"><name pos:start="33:25" pos:end="33:36"><name pos:start="33:25" pos:end="33:27">iov</name><operator pos:start="33:28" pos:end="33:28">.</operator><name pos:start="33:29" pos:end="33:36">iov_base</name></name></expr></argument>, <argument pos:start="33:39" pos:end="33:50"><expr pos:start="33:39" pos:end="33:50"><name pos:start="33:39" pos:end="33:50"><name pos:start="33:39" pos:end="33:41">iov</name><operator pos:start="33:42" pos:end="33:42">.</operator><name pos:start="33:43" pos:end="33:50">iov_base</name></name></expr></argument>, <argument pos:start="33:53" pos:end="33:53"><expr pos:start="33:53" pos:end="33:53"><name pos:start="33:53" pos:end="33:53">n</name></expr></argument>, <argument pos:start="33:56" pos:end="33:56"><expr pos:start="33:56" pos:end="33:56"><literal type="number" pos:start="33:56" pos:end="33:56">1</literal></expr></argument>,
                        <argument pos:start="34:25" pos:end="34:43"><expr pos:start="34:25" pos:end="34:43"><operator pos:start="34:25" pos:end="34:25">&amp;</operator><name pos:start="34:26" pos:end="34:43"><name pos:start="34:26" pos:end="34:26">s</name><operator pos:start="34:27" pos:end="34:28">-&gt;</operator><name pos:start="34:29" pos:end="34:43">aes_encrypt_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="36:79"><expr pos:start="35:5" pos:end="36:78"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="36:78"><name pos:start="35:11" pos:end="35:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="35:40" pos:end="36:78">(<argument pos:start="35:41" pos:end="35:42"><expr pos:start="35:41" pos:end="35:42"><name pos:start="35:41" pos:end="35:42">bs</name></expr></argument>, <argument pos:start="35:45" pos:end="35:45"><expr pos:start="35:45" pos:end="35:45"><literal type="number" pos:start="35:45" pos:end="35:45">0</literal></expr></argument>,
            <argument pos:start="36:13" pos:end="36:55"><expr pos:start="36:13" pos:end="36:55"><name pos:start="36:13" pos:end="36:26">cluster_offset</name> <operator pos:start="36:28" pos:end="36:28">+</operator> <name pos:start="36:30" pos:end="36:36">n_start</name> <operator pos:start="36:38" pos:end="36:38">*</operator> <name pos:start="36:40" pos:end="36:55">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="36:58" pos:end="36:77"><expr pos:start="36:58" pos:end="36:77"><name pos:start="36:58" pos:end="36:58">n</name> <operator pos:start="36:60" pos:end="36:60">*</operator> <name pos:start="36:62" pos:end="36:77">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="37:5" pos:end="46:15"><if pos:start="37:5" pos:end="46:15">if <condition pos:start="37:8" pos:end="37:16">(<expr pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">&lt;</operator> <literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>)</condition> <block pos:start="37:18" pos:end="46:15">{<block_content pos:start="38:9" pos:end="46:15">
        <goto pos:start="38:9" pos:end="38:17">goto <name pos:start="38:14" pos:end="38:16">out</name>;</goto>
    <expr_stmt pos:start="39:5" pos:end="39:45"><expr pos:start="39:5" pos:end="39:44"><call pos:start="39:5" pos:end="39:44"><name pos:start="39:5" pos:end="39:16">BLKDBG_EVENT</name><argument_list pos:start="39:17" pos:end="39:44">(<argument pos:start="39:18" pos:end="39:25"><expr pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:19">bs</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:25">file</name></name></expr></argument>, <argument pos:start="39:28" pos:end="39:43"><expr pos:start="39:28" pos:end="39:43"><name pos:start="39:28" pos:end="39:43">BLKDBG_COW_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:78"><expr pos:start="40:5" pos:end="40:77"><name pos:start="40:5" pos:end="40:7">ret</name> <operator pos:start="40:9" pos:end="40:9">=</operator> <call pos:start="40:11" pos:end="40:77"><name pos:start="40:11" pos:end="40:24">bdrv_co_writev</name><argument_list pos:start="40:25" pos:end="40:77">(<argument pos:start="40:26" pos:end="40:33"><expr pos:start="40:26" pos:end="40:33"><name pos:start="40:26" pos:end="40:33"><name pos:start="40:26" pos:end="40:27">bs</name><operator pos:start="40:28" pos:end="40:29">-&gt;</operator><name pos:start="40:30" pos:end="40:33">file</name></name></expr></argument>, <argument pos:start="40:36" pos:end="40:66"><expr pos:start="40:36" pos:end="40:66"><operator pos:start="40:36" pos:end="40:36">(</operator><name pos:start="40:37" pos:end="40:50">cluster_offset</name> <operator pos:start="40:52" pos:end="40:53">&gt;&gt;</operator> <literal type="number" pos:start="40:55" pos:end="40:55">9</literal><operator pos:start="40:56" pos:end="40:56">)</operator> <operator pos:start="40:58" pos:end="40:58">+</operator> <name pos:start="40:60" pos:end="40:66">n_start</name></expr></argument>, <argument pos:start="40:69" pos:end="40:69"><expr pos:start="40:69" pos:end="40:69"><name pos:start="40:69" pos:end="40:69">n</name></expr></argument>, <argument pos:start="40:72" pos:end="40:76"><expr pos:start="40:72" pos:end="40:76"><operator pos:start="40:72" pos:end="40:72">&amp;</operator><name pos:start="40:73" pos:end="40:76">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="41:5" pos:end="46:15"><if pos:start="41:5" pos:end="46:15">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition> <block pos:start="41:18" pos:end="46:15">{<block_content pos:start="42:9" pos:end="46:15">
        <goto pos:start="42:9" pos:end="42:17">goto <name pos:start="42:14" pos:end="42:16">out</name>;</goto>
    <expr_stmt pos:start="43:5" pos:end="43:12"><expr pos:start="43:5" pos:end="43:11"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <literal type="number" pos:start="43:11" pos:end="43:11">0</literal></expr>;</expr_stmt>
<label pos:start="44:1" pos:end="44:4"><name pos:start="44:1" pos:end="44:3">out</name>:</label>
    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><call pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:14">qemu_vfree</name><argument_list pos:start="45:15" pos:end="45:28">(<argument pos:start="45:16" pos:end="45:27"><expr pos:start="45:16" pos:end="45:27"><name pos:start="45:16" pos:end="45:27"><name pos:start="45:16" pos:end="45:18">iov</name><operator pos:start="45:19" pos:end="45:19">.</operator><name pos:start="45:20" pos:end="45:27">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="46:5" pos:end="46:15">return <expr pos:start="46:12" pos:end="46:14"><name pos:start="46:12" pos:end="46:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
