<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22299.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">frame_thread_init</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:15">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">thread_count</name> <init pos:start="5:22" pos:end="5:42">= <expr pos:start="5:24" pos:end="5:42"><name pos:start="5:24" pos:end="5:42"><name pos:start="5:24" pos:end="5:28">avctx</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:42">thread_count</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVCodec</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">codec</name> <init pos:start="7:20" pos:end="7:33">= <expr pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:33"><name pos:start="7:22" pos:end="7:26">avctx</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:33">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">src</name> <init pos:start="9:25" pos:end="9:31">= <expr pos:start="9:27" pos:end="9:31"><name pos:start="9:27" pos:end="9:31">avctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22">FrameThreadContext</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:28">fctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">err</name> <init pos:start="13:16" pos:end="13:18">= <expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:26">(<expr pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:20">thread_count</name> <operator pos:start="17:22" pos:end="17:23">&lt;=</operator> <literal type="number" pos:start="17:25" pos:end="17:25">1</literal></expr>)</condition> <block pos:start="17:28" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:17">

        <expr_stmt pos:start="19:9" pos:end="19:38"><expr pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:13">avctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:33">active_thread_type</name></name> <operator pos:start="19:35" pos:end="19:35">=</operator> <literal type="number" pos:start="19:37" pos:end="19:37">0</literal></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:73"><expr pos:start="27:5" pos:end="27:72"><name pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:9">avctx</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:24">thread_opaque</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <name pos:start="27:28" pos:end="27:31">fctx</name> <operator pos:start="27:33" pos:end="27:33">=</operator> <call pos:start="27:35" pos:end="27:72"><name pos:start="27:35" pos:end="27:44">av_mallocz</name><argument_list pos:start="27:45" pos:end="27:72">(<argument pos:start="27:46" pos:end="27:71"><expr pos:start="27:46" pos:end="27:71"><sizeof pos:start="27:46" pos:end="27:71">sizeof<argument_list pos:start="27:52" pos:end="27:71">(<argument pos:start="27:53" pos:end="27:70"><expr pos:start="27:53" pos:end="27:70"><name pos:start="27:53" pos:end="27:70">FrameThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:72"><expr pos:start="31:5" pos:end="31:71"><name pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:8">fctx</name><operator pos:start="31:9" pos:end="31:10">-&gt;</operator><name pos:start="31:11" pos:end="31:17">threads</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <call pos:start="31:21" pos:end="31:71"><name pos:start="31:21" pos:end="31:30">av_mallocz</name><argument_list pos:start="31:31" pos:end="31:71">(<argument pos:start="31:32" pos:end="31:70"><expr pos:start="31:32" pos:end="31:70"><sizeof pos:start="31:32" pos:end="31:55">sizeof<argument_list pos:start="31:38" pos:end="31:55">(<argument pos:start="31:39" pos:end="31:54"><expr pos:start="31:39" pos:end="31:54"><name pos:start="31:39" pos:end="31:54">PerThreadContext</name></expr></argument>)</argument_list></sizeof> <operator pos:start="31:57" pos:end="31:57">*</operator> <name pos:start="31:59" pos:end="31:70">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><call pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:22">pthread_mutex_init</name><argument_list pos:start="33:23" pos:end="33:49">(<argument pos:start="33:24" pos:end="33:42"><expr pos:start="33:24" pos:end="33:42"><operator pos:start="33:24" pos:end="33:24">&amp;</operator><name pos:start="33:25" pos:end="33:42"><name pos:start="33:25" pos:end="33:28">fctx</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:42">buffer_mutex</name></name></expr></argument>, <argument pos:start="33:45" pos:end="33:48"><expr pos:start="33:45" pos:end="33:48"><name pos:start="33:45" pos:end="33:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:23"><expr pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:8">fctx</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:18">delaying</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <literal type="number" pos:start="35:22" pos:end="35:22">1</literal></expr>;</expr_stmt>



    <for pos:start="39:5" pos:end="141:5">for <control pos:start="39:9" pos:end="39:38">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:33"><expr pos:start="39:17" pos:end="39:32"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <name pos:start="39:21" pos:end="39:32">thread_count</name></expr>;</condition> <incr pos:start="39:35" pos:end="39:37"><expr pos:start="39:35" pos:end="39:37"><name pos:start="39:35" pos:end="39:35">i</name><operator pos:start="39:36" pos:end="39:37">++</operator></expr></incr>)</control> <block pos:start="39:40" pos:end="141:5">{<block_content pos:start="41:9" pos:end="139:65">

        <decl_stmt pos:start="41:9" pos:end="41:65"><decl pos:start="41:9" pos:end="41:64"><type pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:22">AVCodecContext</name> <modifier pos:start="41:24" pos:end="41:24">*</modifier></type><name pos:start="41:25" pos:end="41:28">copy</name> <init pos:start="41:30" pos:end="41:64">= <expr pos:start="41:32" pos:end="41:64"><call pos:start="41:32" pos:end="41:64"><name pos:start="41:32" pos:end="41:40">av_malloc</name><argument_list pos:start="41:41" pos:end="41:64">(<argument pos:start="41:42" pos:end="41:63"><expr pos:start="41:42" pos:end="41:63"><sizeof pos:start="41:42" pos:end="41:63">sizeof<argument_list pos:start="41:48" pos:end="41:63">(<argument pos:start="41:49" pos:end="41:62"><expr pos:start="41:49" pos:end="41:62"><name pos:start="41:49" pos:end="41:62">AVCodecContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:49"><decl pos:start="43:9" pos:end="43:48"><type pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:24">PerThreadContext</name> <modifier pos:start="43:26" pos:end="43:26">*</modifier></type><name pos:start="43:27" pos:end="43:27">p</name>  <init pos:start="43:30" pos:end="43:48">= <expr pos:start="43:32" pos:end="43:48"><operator pos:start="43:32" pos:end="43:32">&amp;</operator><name pos:start="43:33" pos:end="43:48"><name pos:start="43:33" pos:end="43:36">fctx</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:45">threads</name><index pos:start="43:46" pos:end="43:48">[<expr pos:start="43:47" pos:end="43:47"><name pos:start="43:47" pos:end="43:47">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><call pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:26">pthread_mutex_init</name><argument_list pos:start="47:27" pos:end="47:43">(<argument pos:start="47:28" pos:end="47:36"><expr pos:start="47:28" pos:end="47:36"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:36"><name pos:start="47:29" pos:end="47:29">p</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:36">mutex</name></name></expr></argument>, <argument pos:start="47:39" pos:end="47:42"><expr pos:start="47:39" pos:end="47:42"><name pos:start="47:39" pos:end="47:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:53"><expr pos:start="49:9" pos:end="49:52"><call pos:start="49:9" pos:end="49:52"><name pos:start="49:9" pos:end="49:26">pthread_mutex_init</name><argument_list pos:start="49:27" pos:end="49:52">(<argument pos:start="49:28" pos:end="49:45"><expr pos:start="49:28" pos:end="49:45"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:45"><name pos:start="49:29" pos:end="49:29">p</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:45">progress_mutex</name></name></expr></argument>, <argument pos:start="49:48" pos:end="49:51"><expr pos:start="49:48" pos:end="49:51"><name pos:start="49:48" pos:end="49:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:48"><expr pos:start="51:9" pos:end="51:47"><call pos:start="51:9" pos:end="51:47"><name pos:start="51:9" pos:end="51:25">pthread_cond_init</name><argument_list pos:start="51:26" pos:end="51:47">(<argument pos:start="51:27" pos:end="51:40"><expr pos:start="51:27" pos:end="51:40"><operator pos:start="51:27" pos:end="51:27">&amp;</operator><name pos:start="51:28" pos:end="51:40"><name pos:start="51:28" pos:end="51:28">p</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:40">input_cond</name></name></expr></argument>, <argument pos:start="51:43" pos:end="51:46"><expr pos:start="51:43" pos:end="51:46"><name pos:start="51:43" pos:end="51:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><call pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:25">pthread_cond_init</name><argument_list pos:start="53:26" pos:end="53:50">(<argument pos:start="53:27" pos:end="53:43"><expr pos:start="53:27" pos:end="53:43"><operator pos:start="53:27" pos:end="53:27">&amp;</operator><name pos:start="53:28" pos:end="53:43"><name pos:start="53:28" pos:end="53:28">p</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:43">progress_cond</name></name></expr></argument>, <argument pos:start="53:46" pos:end="53:49"><expr pos:start="53:46" pos:end="53:49"><name pos:start="53:46" pos:end="53:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:49"><expr pos:start="55:9" pos:end="55:48"><call pos:start="55:9" pos:end="55:48"><name pos:start="55:9" pos:end="55:25">pthread_cond_init</name><argument_list pos:start="55:26" pos:end="55:48">(<argument pos:start="55:27" pos:end="55:41"><expr pos:start="55:27" pos:end="55:41"><operator pos:start="55:27" pos:end="55:27">&amp;</operator><name pos:start="55:28" pos:end="55:41"><name pos:start="55:28" pos:end="55:28">p</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:41">output_cond</name></name></expr></argument>, <argument pos:start="55:44" pos:end="55:47"><expr pos:start="55:44" pos:end="55:47"><name pos:start="55:44" pos:end="55:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:25"><expr pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:9">p</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:17">parent</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:24">fctx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:25"><expr pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:9">p</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:16">avctx</name></name>  <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:24">copy</name></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:18">(<expr pos:start="65:13" pos:end="65:17"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:17">copy</name></expr>)</condition> <block pos:start="65:20" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:23">

            <expr_stmt pos:start="67:13" pos:end="67:34"><expr pos:start="67:13" pos:end="67:33"><name pos:start="67:13" pos:end="67:15">err</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:33"><name pos:start="67:19" pos:end="67:25">AVERROR</name><argument_list pos:start="67:26" pos:end="67:33">(<argument pos:start="67:27" pos:end="67:32"><expr pos:start="67:27" pos:end="67:32"><name pos:start="67:27" pos:end="67:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="69:13" pos:end="69:23">goto <name pos:start="69:18" pos:end="69:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:21"><expr pos:start="75:9" pos:end="75:20"><operator pos:start="75:9" pos:end="75:9">*</operator><name pos:start="75:10" pos:end="75:13">copy</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <operator pos:start="75:17" pos:end="75:17">*</operator><name pos:start="75:18" pos:end="75:20">src</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:12">copy</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:27">thread_opaque</name></name> <operator pos:start="77:29" pos:end="77:29">=</operator> <name pos:start="77:31" pos:end="77:31">p</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:12">copy</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:17">pkt</name></name> <operator pos:start="79:19" pos:end="79:19">=</operator> <operator pos:start="79:21" pos:end="79:21">&amp;</operator><name pos:start="79:22" pos:end="79:29"><name pos:start="79:22" pos:end="79:22">p</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:29">avpkt</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="83:9" pos:end="131:9"><if pos:start="83:9" pos:end="97:9">if <condition pos:start="83:12" pos:end="83:15">(<expr pos:start="83:13" pos:end="83:14"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:14">i</name></expr>)</condition> <block pos:start="83:17" pos:end="97:9">{<block_content pos:start="85:13" pos:end="95:55">

            <expr_stmt pos:start="85:13" pos:end="85:23"><expr pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:15">src</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:22">copy</name></expr>;</expr_stmt>



            <if_stmt pos:start="89:13" pos:end="91:40"><if pos:start="89:13" pos:end="91:40">if <condition pos:start="89:16" pos:end="89:28">(<expr pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:21">codec</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:27">init</name></name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:40"><block_content pos:start="91:17" pos:end="91:40">

                <expr_stmt pos:start="91:17" pos:end="91:40"><expr pos:start="91:17" pos:end="91:39"><name pos:start="91:17" pos:end="91:19">err</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <call pos:start="91:23" pos:end="91:39"><name pos:start="91:23" pos:end="91:33"><name pos:start="91:23" pos:end="91:27">codec</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:33">init</name></name><argument_list pos:start="91:34" pos:end="91:39">(<argument pos:start="91:35" pos:end="91:38"><expr pos:start="91:35" pos:end="91:38"><name pos:start="91:35" pos:end="91:38">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><call pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:38">update_context_from_thread</name><argument_list pos:start="95:39" pos:end="95:54">(<argument pos:start="95:40" pos:end="95:44"><expr pos:start="95:40" pos:end="95:44"><name pos:start="95:40" pos:end="95:44">avctx</name></expr></argument>, <argument pos:start="95:47" pos:end="95:50"><expr pos:start="95:47" pos:end="95:50"><name pos:start="95:47" pos:end="95:50">copy</name></expr></argument>, <argument pos:start="95:53" pos:end="95:53"><expr pos:start="95:53" pos:end="95:53"><literal type="number" pos:start="95:53" pos:end="95:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="131:9">else <block pos:start="97:16" pos:end="131:9">{<block_content pos:start="99:13" pos:end="129:52">

            <expr_stmt pos:start="99:13" pos:end="99:63"><expr pos:start="99:13" pos:end="99:62"><name pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:16">copy</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:27">priv_data</name></name> <operator pos:start="99:29" pos:end="99:29">=</operator> <call pos:start="99:31" pos:end="99:62"><name pos:start="99:31" pos:end="99:39">av_malloc</name><argument_list pos:start="99:40" pos:end="99:62">(<argument pos:start="99:41" pos:end="99:61"><expr pos:start="99:41" pos:end="99:61"><name pos:start="99:41" pos:end="99:61"><name pos:start="99:41" pos:end="99:45">codec</name><operator pos:start="99:46" pos:end="99:47">-&gt;</operator><name pos:start="99:48" pos:end="99:61">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="107:13"><if pos:start="101:13" pos:end="107:13">if <condition pos:start="101:16" pos:end="101:33">(<expr pos:start="101:17" pos:end="101:32"><operator pos:start="101:17" pos:end="101:17">!</operator><name pos:start="101:18" pos:end="101:32"><name pos:start="101:18" pos:end="101:21">copy</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:32">priv_data</name></name></expr>)</condition> <block pos:start="101:35" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:27">

                <expr_stmt pos:start="103:17" pos:end="103:38"><expr pos:start="103:17" pos:end="103:37"><name pos:start="103:17" pos:end="103:19">err</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="103:37"><name pos:start="103:23" pos:end="103:29">AVERROR</name><argument_list pos:start="103:30" pos:end="103:37">(<argument pos:start="103:31" pos:end="103:36"><expr pos:start="103:31" pos:end="103:36"><name pos:start="103:31" pos:end="103:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="105:17" pos:end="105:27">goto <name pos:start="105:22" pos:end="105:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:75"><expr pos:start="109:13" pos:end="109:74"><call pos:start="109:13" pos:end="109:74"><name pos:start="109:13" pos:end="109:18">memcpy</name><argument_list pos:start="109:19" pos:end="109:74">(<argument pos:start="109:20" pos:end="109:34"><expr pos:start="109:20" pos:end="109:34"><name pos:start="109:20" pos:end="109:34"><name pos:start="109:20" pos:end="109:23">copy</name><operator pos:start="109:24" pos:end="109:25">-&gt;</operator><name pos:start="109:26" pos:end="109:34">priv_data</name></name></expr></argument>, <argument pos:start="109:37" pos:end="109:50"><expr pos:start="109:37" pos:end="109:50"><name pos:start="109:37" pos:end="109:50"><name pos:start="109:37" pos:end="109:39">src</name><operator pos:start="109:40" pos:end="109:41">-&gt;</operator><name pos:start="109:42" pos:end="109:50">priv_data</name></name></expr></argument>, <argument pos:start="109:53" pos:end="109:73"><expr pos:start="109:53" pos:end="109:73"><name pos:start="109:53" pos:end="109:73"><name pos:start="109:53" pos:end="109:57">codec</name><operator pos:start="109:58" pos:end="109:59">-&gt;</operator><name pos:start="109:60" pos:end="109:73">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:64"><expr pos:start="111:13" pos:end="111:63"><name pos:start="111:13" pos:end="111:26"><name pos:start="111:13" pos:end="111:16">copy</name><operator pos:start="111:17" pos:end="111:18">-&gt;</operator><name pos:start="111:19" pos:end="111:26">internal</name></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <call pos:start="111:30" pos:end="111:63"><name pos:start="111:30" pos:end="111:38">av_malloc</name><argument_list pos:start="111:39" pos:end="111:63">(<argument pos:start="111:40" pos:end="111:62"><expr pos:start="111:40" pos:end="111:62"><sizeof pos:start="111:40" pos:end="111:62">sizeof<argument_list pos:start="111:46" pos:end="111:62">(<argument pos:start="111:47" pos:end="111:61"><expr pos:start="111:47" pos:end="111:61"><name pos:start="111:47" pos:end="111:61">AVCodecInternal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:32">(<expr pos:start="113:17" pos:end="113:31"><operator pos:start="113:17" pos:end="113:17">!</operator><name pos:start="113:18" pos:end="113:31"><name pos:start="113:18" pos:end="113:21">copy</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:31">internal</name></name></expr>)</condition> <block pos:start="113:34" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:27">

                <expr_stmt pos:start="115:17" pos:end="115:38"><expr pos:start="115:17" pos:end="115:37"><name pos:start="115:17" pos:end="115:19">err</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <call pos:start="115:23" pos:end="115:37"><name pos:start="115:23" pos:end="115:29">AVERROR</name><argument_list pos:start="115:30" pos:end="115:37">(<argument pos:start="115:31" pos:end="115:36"><expr pos:start="115:31" pos:end="115:36"><name pos:start="115:31" pos:end="115:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="117:17" pos:end="117:27">goto <name pos:start="117:22" pos:end="117:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:49"><expr pos:start="121:13" pos:end="121:48"><operator pos:start="121:13" pos:end="121:13">*</operator><operator pos:start="121:14" pos:end="121:14">(</operator><name pos:start="121:15" pos:end="121:28"><name pos:start="121:15" pos:end="121:18">copy</name><operator pos:start="121:19" pos:end="121:20">-&gt;</operator><name pos:start="121:21" pos:end="121:28">internal</name></name><operator pos:start="121:29" pos:end="121:29">)</operator> <operator pos:start="121:31" pos:end="121:31">=</operator> <operator pos:start="121:33" pos:end="121:33">*</operator><operator pos:start="121:34" pos:end="121:34">(</operator><name pos:start="121:35" pos:end="121:47"><name pos:start="121:35" pos:end="121:37">src</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:47">internal</name></name><operator pos:start="121:48" pos:end="121:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:40"><expr pos:start="123:13" pos:end="123:39"><name pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:16">copy</name><operator pos:start="123:17" pos:end="123:18">-&gt;</operator><name pos:start="123:19" pos:end="123:26">internal</name><operator pos:start="123:27" pos:end="123:28">-&gt;</operator><name pos:start="123:29" pos:end="123:35">is_copy</name></name> <operator pos:start="123:37" pos:end="123:37">=</operator> <literal type="number" pos:start="123:39" pos:end="123:39">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="127:13" pos:end="129:52"><if pos:start="127:13" pos:end="129:52">if <condition pos:start="127:16" pos:end="127:40">(<expr pos:start="127:17" pos:end="127:39"><name pos:start="127:17" pos:end="127:39"><name pos:start="127:17" pos:end="127:21">codec</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:39">init_thread_copy</name></name></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:52"><block_content pos:start="129:17" pos:end="129:52">

                <expr_stmt pos:start="129:17" pos:end="129:52"><expr pos:start="129:17" pos:end="129:51"><name pos:start="129:17" pos:end="129:19">err</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <call pos:start="129:23" pos:end="129:51"><name pos:start="129:23" pos:end="129:45"><name pos:start="129:23" pos:end="129:27">codec</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:45">init_thread_copy</name></name><argument_list pos:start="129:46" pos:end="129:51">(<argument pos:start="129:47" pos:end="129:50"><expr pos:start="129:47" pos:end="129:50"><name pos:start="129:47" pos:end="129:50">copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="135:9" pos:end="135:28"><if pos:start="135:9" pos:end="135:28">if <condition pos:start="135:12" pos:end="135:16">(<expr pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">err</name></expr>)</condition><block type="pseudo" pos:start="135:18" pos:end="135:28"><block_content pos:start="135:18" pos:end="135:28"> <goto pos:start="135:18" pos:end="135:28">goto <name pos:start="135:23" pos:end="135:27">error</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:65"><expr pos:start="139:9" pos:end="139:64"><call pos:start="139:9" pos:end="139:64"><name pos:start="139:9" pos:end="139:22">pthread_create</name><argument_list pos:start="139:23" pos:end="139:64">(<argument pos:start="139:24" pos:end="139:33"><expr pos:start="139:24" pos:end="139:33"><operator pos:start="139:24" pos:end="139:24">&amp;</operator><name pos:start="139:25" pos:end="139:33"><name pos:start="139:25" pos:end="139:25">p</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:33">thread</name></name></expr></argument>, <argument pos:start="139:36" pos:end="139:39"><expr pos:start="139:36" pos:end="139:39"><name pos:start="139:36" pos:end="139:39">NULL</name></expr></argument>, <argument pos:start="139:42" pos:end="139:60"><expr pos:start="139:42" pos:end="139:60"><name pos:start="139:42" pos:end="139:60">frame_worker_thread</name></expr></argument>, <argument pos:start="139:63" pos:end="139:63"><expr pos:start="139:63" pos:end="139:63"><name pos:start="139:63" pos:end="139:63">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="145:5" pos:end="145:13">return <expr pos:start="145:12" pos:end="145:12"><literal type="number" pos:start="145:12" pos:end="145:12">0</literal></expr>;</return>



<label pos:start="149:1" pos:end="149:6"><name pos:start="149:1" pos:end="149:5">error</name>:</label>

    <expr_stmt pos:start="151:5" pos:end="151:34"><expr pos:start="151:5" pos:end="151:33"><call pos:start="151:5" pos:end="151:33"><name pos:start="151:5" pos:end="151:21">frame_thread_free</name><argument_list pos:start="151:22" pos:end="151:33">(<argument pos:start="151:23" pos:end="151:27"><expr pos:start="151:23" pos:end="151:27"><name pos:start="151:23" pos:end="151:27">avctx</name></expr></argument>, <argument pos:start="151:30" pos:end="151:32"><expr pos:start="151:30" pos:end="151:32"><name pos:start="151:30" pos:end="151:30">i</name><operator pos:start="151:31" pos:end="151:31">+</operator><literal type="number" pos:start="151:32" pos:end="151:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="155:5" pos:end="155:15">return <expr pos:start="155:12" pos:end="155:14"><name pos:start="155:12" pos:end="155:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
