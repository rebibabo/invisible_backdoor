<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/145.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">block_load</name><parameter_list pos:start="1:22" pos:end="1:64">(<parameter pos:start="1:23" pos:end="1:33"><decl pos:start="1:23" pos:end="1:33"><type pos:start="1:23" pos:end="1:33"><name pos:start="1:23" pos:end="1:30">QEMUFile</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">f</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:63"><decl pos:start="1:50" pos:end="1:63"><type pos:start="1:50" pos:end="1:63"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:63">version_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:13">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:14"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:14">int</name></type> <name pos:start="5:16" pos:end="5:29">banner_printed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>, <decl pos:start="7:14" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:25"><name pos:start="9:10" pos:end="9:20">device_name</name><index pos:start="9:21" pos:end="9:25">[<expr pos:start="9:22" pos:end="9:24"><literal type="number" pos:start="9:22" pos:end="9:24">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:16">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:16">buf</name></decl>;</decl_stmt>



    <do pos:start="19:5" pos:end="107:42">do <block pos:start="19:8" pos:end="107:5">{<block_content pos:start="21:9" pos:end="105:9">

        <expr_stmt pos:start="21:9" pos:end="21:32"><expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:12">addr</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:31"><name pos:start="21:16" pos:end="21:28">qemu_get_be64</name><argument_list pos:start="21:29" pos:end="21:31">(<argument pos:start="21:30" pos:end="21:30"><expr pos:start="21:30" pos:end="21:30"><name pos:start="21:30" pos:end="21:30">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:41"><expr pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:13">flags</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:20">addr</name> <operator pos:start="25:22" pos:end="25:22">&amp;</operator> <operator pos:start="25:24" pos:end="25:24">~</operator><name pos:start="25:25" pos:end="25:40">BDRV_SECTOR_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:34"><expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:12">addr</name> <operator pos:start="27:14" pos:end="27:16">&gt;&gt;=</operator> <name pos:start="27:18" pos:end="27:33">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="99:9"><if pos:start="31:9" pos:end="77:9">if <condition pos:start="31:12" pos:end="31:46">(<expr pos:start="31:13" pos:end="31:45"><name pos:start="31:13" pos:end="31:17">flags</name> <operator pos:start="31:19" pos:end="31:19">&amp;</operator> <name pos:start="31:21" pos:end="31:45">BLK_MIG_FLAG_DEVICE_BLOCK</name></expr>)</condition> <block pos:start="31:48" pos:end="77:9">{<block_content pos:start="33:13" pos:end="75:13">

            <decl_stmt pos:start="33:13" pos:end="33:20"><decl pos:start="33:13" pos:end="33:19"><type pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">int</name></type> <name pos:start="33:17" pos:end="33:19">ret</name></decl>;</decl_stmt>

            <comment type="block" pos:start="35:13" pos:end="35:33">/* get device name */</comment>

            <expr_stmt pos:start="37:13" pos:end="37:35"><expr pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:15">len</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <call pos:start="37:19" pos:end="37:34"><name pos:start="37:19" pos:end="37:31">qemu_get_byte</name><argument_list pos:start="37:32" pos:end="37:34">(<argument pos:start="37:33" pos:end="37:33"><expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:60"><expr pos:start="39:13" pos:end="39:59"><call pos:start="39:13" pos:end="39:59"><name pos:start="39:13" pos:end="39:27">qemu_get_buffer</name><argument_list pos:start="39:28" pos:end="39:59">(<argument pos:start="39:29" pos:end="39:29"><expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">f</name></expr></argument>, <argument pos:start="39:32" pos:end="39:53"><expr pos:start="39:32" pos:end="39:53"><operator pos:start="39:32" pos:end="39:32">(</operator><name pos:start="39:33" pos:end="39:39">uint8_t</name> <operator pos:start="39:41" pos:end="39:41">*</operator><operator pos:start="39:42" pos:end="39:42">)</operator><name pos:start="39:43" pos:end="39:53">device_name</name></expr></argument>, <argument pos:start="39:56" pos:end="39:58"><expr pos:start="39:56" pos:end="39:58"><name pos:start="39:56" pos:end="39:58">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:36"><expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:23">device_name</name><index pos:start="41:24" pos:end="41:28">[<expr pos:start="41:25" pos:end="41:27"><name pos:start="41:25" pos:end="41:27">len</name></expr>]</index></name> <operator pos:start="41:30" pos:end="41:30">=</operator> <literal type="char" pos:start="41:32" pos:end="41:35">'\0'</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="45:13" pos:end="45:40"><expr pos:start="45:13" pos:end="45:39"><name pos:start="45:13" pos:end="45:14">bs</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:39"><name pos:start="45:18" pos:end="45:26">bdrv_find</name><argument_list pos:start="45:27" pos:end="45:39">(<argument pos:start="45:28" pos:end="45:38"><expr pos:start="45:28" pos:end="45:38"><name pos:start="45:28" pos:end="45:38">device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="55:13"><if pos:start="47:13" pos:end="55:13">if <condition pos:start="47:16" pos:end="47:20">(<expr pos:start="47:17" pos:end="47:19"><operator pos:start="47:17" pos:end="47:17">!</operator><name pos:start="47:18" pos:end="47:19">bs</name></expr>)</condition> <block pos:start="47:22" pos:end="55:13">{<block_content pos:start="49:17" pos:end="53:31">

                <expr_stmt pos:start="49:17" pos:end="51:37"><expr pos:start="49:17" pos:end="51:36"><call pos:start="49:17" pos:end="51:36"><name pos:start="49:17" pos:end="49:23">fprintf</name><argument_list pos:start="49:24" pos:end="51:36">(<argument pos:start="49:25" pos:end="49:30"><expr pos:start="49:25" pos:end="49:30"><name pos:start="49:25" pos:end="49:30">stderr</name></expr></argument>, <argument pos:start="49:33" pos:end="49:65"><expr pos:start="49:33" pos:end="49:65"><literal type="string" pos:start="49:33" pos:end="49:65">"Error unknown block device %s\n"</literal></expr></argument>,

                        <argument pos:start="51:25" pos:end="51:35"><expr pos:start="51:25" pos:end="51:35"><name pos:start="51:25" pos:end="51:35">device_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="53:17" pos:end="53:31">return <expr pos:start="53:24" pos:end="53:30"><operator pos:start="53:24" pos:end="53:24">-</operator><name pos:start="53:25" pos:end="53:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="59:13" pos:end="59:42"><expr pos:start="59:13" pos:end="59:41"><name pos:start="59:13" pos:end="59:15">buf</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:41"><name pos:start="59:19" pos:end="59:29">qemu_malloc</name><argument_list pos:start="59:30" pos:end="59:41">(<argument pos:start="59:31" pos:end="59:40"><expr pos:start="59:31" pos:end="59:40"><name pos:start="59:31" pos:end="59:40">BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="63:13" pos:end="63:48"><expr pos:start="63:13" pos:end="63:47"><call pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:27">qemu_get_buffer</name><argument_list pos:start="63:28" pos:end="63:47">(<argument pos:start="63:29" pos:end="63:29"><expr pos:start="63:29" pos:end="63:29"><name pos:start="63:29" pos:end="63:29">f</name></expr></argument>, <argument pos:start="63:32" pos:end="63:34"><expr pos:start="63:32" pos:end="63:34"><name pos:start="63:32" pos:end="63:34">buf</name></expr></argument>, <argument pos:start="63:37" pos:end="63:46"><expr pos:start="63:37" pos:end="63:46"><name pos:start="63:37" pos:end="63:46">BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:74"><expr pos:start="65:13" pos:end="65:73"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:73"><name pos:start="65:19" pos:end="65:28">bdrv_write</name><argument_list pos:start="65:29" pos:end="65:73">(<argument pos:start="65:30" pos:end="65:31"><expr pos:start="65:30" pos:end="65:31"><name pos:start="65:30" pos:end="65:31">bs</name></expr></argument>, <argument pos:start="65:34" pos:end="65:37"><expr pos:start="65:34" pos:end="65:37"><name pos:start="65:34" pos:end="65:37">addr</name></expr></argument>, <argument pos:start="65:40" pos:end="65:42"><expr pos:start="65:40" pos:end="65:42"><name pos:start="65:40" pos:end="65:42">buf</name></expr></argument>, <argument pos:start="65:45" pos:end="65:72"><expr pos:start="65:45" pos:end="65:72"><name pos:start="65:45" pos:end="65:72">BDRV_SECTORS_PER_DIRTY_CHUNK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><call pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:21">qemu_free</name><argument_list pos:start="69:22" pos:end="69:26">(<argument pos:start="69:23" pos:end="69:25"><expr pos:start="69:23" pos:end="69:25"><name pos:start="69:23" pos:end="69:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="75:13"><if pos:start="71:13" pos:end="75:13">if <condition pos:start="71:16" pos:end="71:24">(<expr pos:start="71:17" pos:end="71:23"><name pos:start="71:17" pos:end="71:19">ret</name> <operator pos:start="71:21" pos:end="71:21">&lt;</operator> <literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr>)</condition> <block pos:start="71:26" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:27">

                <return pos:start="73:17" pos:end="73:27">return <expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="77:11" pos:end="93:9">else if <condition pos:start="77:19" pos:end="77:49">(<expr pos:start="77:20" pos:end="77:48"><name pos:start="77:20" pos:end="77:24">flags</name> <operator pos:start="77:26" pos:end="77:26">&amp;</operator> <name pos:start="77:28" pos:end="77:48">BLK_MIG_FLAG_PROGRESS</name></expr>)</condition> <block pos:start="77:51" pos:end="93:9">{<block_content pos:start="79:13" pos:end="91:27">

            <if_stmt pos:start="79:13" pos:end="85:13"><if pos:start="79:13" pos:end="85:13">if <condition pos:start="79:16" pos:end="79:32">(<expr pos:start="79:17" pos:end="79:31"><operator pos:start="79:17" pos:end="79:17">!</operator><name pos:start="79:18" pos:end="79:31">banner_printed</name></expr>)</condition> <block pos:start="79:34" pos:end="85:13">{<block_content pos:start="81:17" pos:end="83:35">

                <expr_stmt pos:start="81:17" pos:end="81:58"><expr pos:start="81:17" pos:end="81:57"><call pos:start="81:17" pos:end="81:57"><name pos:start="81:17" pos:end="81:22">printf</name><argument_list pos:start="81:23" pos:end="81:57">(<argument pos:start="81:24" pos:end="81:56"><expr pos:start="81:24" pos:end="81:56"><literal type="string" pos:start="81:24" pos:end="81:56">"Receiving block device images\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:35"><expr pos:start="83:17" pos:end="83:34"><name pos:start="83:17" pos:end="83:30">banner_printed</name> <operator pos:start="83:32" pos:end="83:32">=</operator> <literal type="number" pos:start="83:34" pos:end="83:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="89:48"><expr pos:start="87:13" pos:end="89:47"><call pos:start="87:13" pos:end="89:47"><name pos:start="87:13" pos:end="87:18">printf</name><argument_list pos:start="87:19" pos:end="89:47">(<argument pos:start="87:20" pos:end="87:38"><expr pos:start="87:20" pos:end="87:38"><literal type="string" pos:start="87:20" pos:end="87:38">"Completed %d %%%c"</literal></expr></argument>, <argument pos:start="87:41" pos:end="87:49"><expr pos:start="87:41" pos:end="87:49"><operator pos:start="87:41" pos:end="87:41">(</operator><name pos:start="87:42" pos:end="87:44">int</name><operator pos:start="87:45" pos:end="87:45">)</operator><name pos:start="87:46" pos:end="87:49">addr</name></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:46"><expr pos:start="89:20" pos:end="89:46"><ternary pos:start="89:20" pos:end="89:46"><condition pos:start="89:20" pos:end="89:34"><expr pos:start="89:20" pos:end="89:32"><operator pos:start="89:20" pos:end="89:20">(</operator><name pos:start="89:21" pos:end="89:24">addr</name> <operator pos:start="89:26" pos:end="89:27">==</operator> <literal type="number" pos:start="89:29" pos:end="89:31">100</literal><operator pos:start="89:32" pos:end="89:32">)</operator></expr> ?</condition><then pos:start="89:36" pos:end="89:39"> <expr pos:start="89:36" pos:end="89:39"><literal type="char" pos:start="89:36" pos:end="89:39">'\n'</literal></expr> </then><else pos:start="89:41" pos:end="89:46">: <expr pos:start="89:43" pos:end="89:46"><literal type="char" pos:start="89:43" pos:end="89:46">'\r'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:27"><expr pos:start="91:13" pos:end="91:26"><call pos:start="91:13" pos:end="91:26"><name pos:start="91:13" pos:end="91:18">fflush</name><argument_list pos:start="91:19" pos:end="91:26">(<argument pos:start="91:20" pos:end="91:25"><expr pos:start="91:20" pos:end="91:25"><name pos:start="91:20" pos:end="91:25">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="93:11" pos:end="99:9">else if <condition pos:start="93:19" pos:end="93:47">(<expr pos:start="93:20" pos:end="93:46"><operator pos:start="93:20" pos:end="93:20">!</operator><operator pos:start="93:21" pos:end="93:21">(</operator><name pos:start="93:22" pos:end="93:26">flags</name> <operator pos:start="93:28" pos:end="93:28">&amp;</operator> <name pos:start="93:30" pos:end="93:45">BLK_MIG_FLAG_EOS</name><operator pos:start="93:46" pos:end="93:46">)</operator></expr>)</condition> <block pos:start="93:49" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:27">

            <expr_stmt pos:start="95:13" pos:end="95:47"><expr pos:start="95:13" pos:end="95:46"><call pos:start="95:13" pos:end="95:46"><name pos:start="95:13" pos:end="95:19">fprintf</name><argument_list pos:start="95:20" pos:end="95:46">(<argument pos:start="95:21" pos:end="95:26"><expr pos:start="95:21" pos:end="95:26"><name pos:start="95:21" pos:end="95:26">stderr</name></expr></argument>, <argument pos:start="95:29" pos:end="95:45"><expr pos:start="95:29" pos:end="95:45"><literal type="string" pos:start="95:29" pos:end="95:45">"Unknown flags\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:27">return <expr pos:start="97:20" pos:end="97:26"><operator pos:start="97:20" pos:end="97:20">-</operator><name pos:start="97:21" pos:end="97:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:35">(<expr pos:start="101:13" pos:end="101:34"><call pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:31">qemu_file_has_error</name><argument_list pos:start="101:32" pos:end="101:34">(<argument pos:start="101:33" pos:end="101:33"><expr pos:start="101:33" pos:end="101:33"><name pos:start="101:33" pos:end="101:33">f</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:37" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:24">

            <return pos:start="103:13" pos:end="103:24">return <expr pos:start="103:20" pos:end="103:23"><operator pos:start="103:20" pos:end="103:20">-</operator><name pos:start="103:21" pos:end="103:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="107:13" pos:end="107:41">(<expr pos:start="107:14" pos:end="107:40"><operator pos:start="107:14" pos:end="107:14">!</operator><operator pos:start="107:15" pos:end="107:15">(</operator><name pos:start="107:16" pos:end="107:20">flags</name> <operator pos:start="107:22" pos:end="107:22">&amp;</operator> <name pos:start="107:24" pos:end="107:39">BLK_MIG_FLAG_EOS</name><operator pos:start="107:40" pos:end="107:40">)</operator></expr>)</condition>;</do>



    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
