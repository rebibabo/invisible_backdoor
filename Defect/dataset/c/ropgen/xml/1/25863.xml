<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25863.c" pos:tabs="8"><function pos:start="1:1" pos:end="587:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">flic_decode_frame_15_16BPP</name><parameter_list pos:start="1:38" pos:end="5:71">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:48"><decl pos:start="3:39" pos:end="3:48"><type pos:start="3:39" pos:end="3:48"><name pos:start="3:39" pos:end="3:42">void</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:48">data</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:64"><decl pos:start="3:51" pos:end="3:64"><type pos:start="3:51" pos:end="3:64"><name pos:start="3:51" pos:end="3:53">int</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:64">got_frame</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:56"><decl pos:start="5:39" pos:end="5:56"><type pos:start="5:39" pos:end="5:56"><specifier pos:start="5:39" pos:end="5:43">const</specifier> <name pos:start="5:45" pos:end="5:51">uint8_t</name> <modifier pos:start="5:53" pos:end="5:53">*</modifier></type><name pos:start="5:54" pos:end="5:56">buf</name></decl></parameter>, <parameter pos:start="5:59" pos:end="5:70"><decl pos:start="5:59" pos:end="5:70"><type pos:start="5:59" pos:end="5:70"><name pos:start="5:59" pos:end="5:61">int</name></type> <name pos:start="5:63" pos:end="5:70">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="587:1">{<block_content pos:start="13:5" pos:end="585:20">

    <comment type="block" pos:start="9:5" pos:end="9:63">/* Note, the only difference between the 15Bpp and 16Bpp */</comment>

    <comment type="block" pos:start="11:5" pos:end="11:73">/* Format is the pixel format, the packets are processed the same. */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">FlicDecodeContext</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:24">s</name> <init pos:start="13:26" pos:end="13:43">= <expr pos:start="13:28" pos:end="13:43"><name pos:start="13:28" pos:end="13:43"><name pos:start="13:28" pos:end="13:32">avctx</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:43">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18">GetByteContext</name></type> <name pos:start="17:20" pos:end="17:21">g2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">pixel_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:17">char</name></type> <name pos:start="21:19" pos:end="21:30">palette_idx1</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:28"><decl pos:start="25:5" pos:end="25:27"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:16">int</name></type> <name pos:start="25:18" pos:end="25:27">frame_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">num_chunks</name></decl>;</decl_stmt>



    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:16">int</name></type> <name pos:start="31:18" pos:end="31:27">chunk_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:19"><decl pos:start="33:5" pos:end="33:18"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:18">chunk_type</name></decl>;</decl_stmt>



    <decl_stmt pos:start="37:5" pos:end="37:18"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>, <decl pos:start="37:12" pos:end="37:12"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:12" pos:end="37:12">j</name></decl>, <decl pos:start="37:15" pos:end="37:17"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:15" pos:end="37:17">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="41:5" pos:end="41:14"><decl pos:start="41:5" pos:end="41:13"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:25"><decl pos:start="43:5" pos:end="43:24"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:24">compressed_lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:30"><decl pos:start="45:5" pos:end="45:29"><type pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:10">signed</name> <name pos:start="45:12" pos:end="45:16">short</name></type> <name pos:start="45:18" pos:end="45:29">line_packets</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:14"><decl pos:start="47:5" pos:end="47:13"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:13">y_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:17"><decl pos:start="49:5" pos:end="49:16"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:16">byte_run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:19"><decl pos:start="51:5" pos:end="51:18"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:18">pixel_skip</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:24"><decl pos:start="53:5" pos:end="53:23"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:23">pixel_countdown</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:26"><decl pos:start="55:5" pos:end="55:25"><type pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:12">unsigned</name> <name pos:start="55:14" pos:end="55:17">char</name> <modifier pos:start="55:19" pos:end="55:19">*</modifier></type><name pos:start="55:20" pos:end="55:25">pixels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:14"><decl pos:start="57:5" pos:end="57:13"><type pos:start="57:5" pos:end="57:7"><name pos:start="57:5" pos:end="57:7">int</name></type> <name pos:start="57:9" pos:end="57:13">pixel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:29"><decl pos:start="59:5" pos:end="59:28"><type pos:start="59:5" pos:end="59:16"><name pos:start="59:5" pos:end="59:12">unsigned</name> <name pos:start="59:14" pos:end="59:16">int</name></type> <name pos:start="59:18" pos:end="59:28">pixel_limit</name></decl>;</decl_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:41"><expr pos:start="63:5" pos:end="63:40"><call pos:start="63:5" pos:end="63:40"><name pos:start="63:5" pos:end="63:20">bytestream2_init</name><argument_list pos:start="63:21" pos:end="63:40">(<argument pos:start="63:22" pos:end="63:24"><expr pos:start="63:22" pos:end="63:24"><operator pos:start="63:22" pos:end="63:22">&amp;</operator><name pos:start="63:23" pos:end="63:24">g2</name></expr></argument>, <argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">buf</name></expr></argument>, <argument pos:start="63:32" pos:end="63:39"><expr pos:start="63:32" pos:end="63:39"><name pos:start="63:32" pos:end="63:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="69:19"><if pos:start="67:5" pos:end="69:19">if <condition pos:start="67:8" pos:end="67:53">(<expr pos:start="67:9" pos:end="67:52"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:12">ret</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <call pos:start="67:16" pos:end="67:47"><name pos:start="67:16" pos:end="67:30">ff_reget_buffer</name><argument_list pos:start="67:31" pos:end="67:47">(<argument pos:start="67:32" pos:end="67:36"><expr pos:start="67:32" pos:end="67:36"><name pos:start="67:32" pos:end="67:36">avctx</name></expr></argument>, <argument pos:start="67:39" pos:end="67:46"><expr pos:start="67:39" pos:end="67:46"><name pos:start="67:39" pos:end="67:46"><name pos:start="67:39" pos:end="67:39">s</name><operator pos:start="67:40" pos:end="67:41">-&gt;</operator><name pos:start="67:42" pos:end="67:46">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="67:48" pos:end="67:48">)</operator> <operator pos:start="67:50" pos:end="67:50">&lt;</operator> <literal type="number" pos:start="67:52" pos:end="67:52">0</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:19"><block_content pos:start="69:9" pos:end="69:19">

        <return pos:start="69:9" pos:end="69:19">return <expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:31"><expr pos:start="73:5" pos:end="73:30"><name pos:start="73:5" pos:end="73:10">pixels</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <name pos:start="73:14" pos:end="73:30"><name pos:start="73:14" pos:end="73:14">s</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:21">frame</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:27">data</name><index pos:start="73:28" pos:end="73:30">[<expr pos:start="73:29" pos:end="73:29"><literal type="number" pos:start="73:29" pos:end="73:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:59"><expr pos:start="75:5" pos:end="75:58"><name pos:start="75:5" pos:end="75:15">pixel_limit</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:34"><name pos:start="75:19" pos:end="75:19">s</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:26">avctx</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:34">height</name></name> <operator pos:start="75:36" pos:end="75:36">*</operator> <name pos:start="75:38" pos:end="75:58"><name pos:start="75:38" pos:end="75:38">s</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:45">frame</name><operator pos:start="75:46" pos:end="75:47">-&gt;</operator><name pos:start="75:48" pos:end="75:55">linesize</name><index pos:start="75:56" pos:end="75:58">[<expr pos:start="75:57" pos:end="75:57"><literal type="number" pos:start="75:57" pos:end="75:57">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:43"><expr pos:start="79:5" pos:end="79:42"><name pos:start="79:5" pos:end="79:14">frame_size</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <call pos:start="79:18" pos:end="79:42"><name pos:start="79:18" pos:end="79:37">bytestream2_get_le32</name><argument_list pos:start="79:38" pos:end="79:42">(<argument pos:start="79:39" pos:end="79:41"><expr pos:start="79:39" pos:end="79:41"><operator pos:start="79:39" pos:end="79:39">&amp;</operator><name pos:start="79:40" pos:end="79:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><call pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:20">bytestream2_skip</name><argument_list pos:start="81:21" pos:end="81:28">(<argument pos:start="81:22" pos:end="81:24"><expr pos:start="81:22" pos:end="81:24"><operator pos:start="81:22" pos:end="81:22">&amp;</operator><name pos:start="81:23" pos:end="81:24">g2</name></expr></argument>, <argument pos:start="81:27" pos:end="81:27"><expr pos:start="81:27" pos:end="81:27"><literal type="number" pos:start="81:27" pos:end="81:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="81:32" pos:end="81:58">/* skip the magic number */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:43"><expr pos:start="83:5" pos:end="83:42"><name pos:start="83:5" pos:end="83:14">num_chunks</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <call pos:start="83:18" pos:end="83:42"><name pos:start="83:18" pos:end="83:37">bytestream2_get_le16</name><argument_list pos:start="83:38" pos:end="83:42">(<argument pos:start="83:39" pos:end="83:41"><expr pos:start="83:39" pos:end="83:41"><operator pos:start="83:39" pos:end="83:39">&amp;</operator><name pos:start="83:40" pos:end="83:41">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:29"><expr pos:start="85:5" pos:end="85:28"><call pos:start="85:5" pos:end="85:28"><name pos:start="85:5" pos:end="85:20">bytestream2_skip</name><argument_list pos:start="85:21" pos:end="85:28">(<argument pos:start="85:22" pos:end="85:24"><expr pos:start="85:22" pos:end="85:24"><operator pos:start="85:22" pos:end="85:22">&amp;</operator><name pos:start="85:23" pos:end="85:24">g2</name></expr></argument>, <argument pos:start="85:27" pos:end="85:27"><expr pos:start="85:27" pos:end="85:27"><literal type="number" pos:start="85:27" pos:end="85:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="85:32" pos:end="85:49">/* skip padding */</comment>

    <if_stmt pos:start="87:5" pos:end="89:30"><if pos:start="87:5" pos:end="89:30">if <condition pos:start="87:8" pos:end="87:30">(<expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:18">frame_size</name> <operator pos:start="87:20" pos:end="87:20">&gt;</operator> <name pos:start="87:22" pos:end="87:29">buf_size</name></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:30"><block_content pos:start="89:9" pos:end="89:30">

        <expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:18">frame_size</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:29">buf_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>





    <expr_stmt pos:start="95:5" pos:end="95:21"><expr pos:start="95:5" pos:end="95:20"><name pos:start="95:5" pos:end="95:14">frame_size</name> <operator pos:start="95:16" pos:end="95:17">-=</operator> <literal type="number" pos:start="95:19" pos:end="95:20">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:36">/* iterate through the chunks */</comment>

    <while pos:start="101:5" pos:end="559:5">while <condition pos:start="101:11" pos:end="103:49">(<expr pos:start="101:12" pos:end="103:48"><operator pos:start="101:12" pos:end="101:12">(</operator><name pos:start="101:13" pos:end="101:22">frame_size</name> <operator pos:start="101:24" pos:end="101:24">&gt;</operator> <literal type="number" pos:start="101:26" pos:end="101:26">0</literal><operator pos:start="101:27" pos:end="101:27">)</operator> <operator pos:start="101:29" pos:end="101:30">&amp;&amp;</operator> <operator pos:start="101:32" pos:end="101:32">(</operator><name pos:start="101:33" pos:end="101:42">num_chunks</name> <operator pos:start="101:44" pos:end="101:44">&gt;</operator> <literal type="number" pos:start="101:46" pos:end="101:46">0</literal><operator pos:start="101:47" pos:end="101:47">)</operator> <operator pos:start="101:49" pos:end="101:50">&amp;&amp;</operator>

            <call pos:start="103:13" pos:end="103:43"><name pos:start="103:13" pos:end="103:38">bytestream2_get_bytes_left</name><argument_list pos:start="103:39" pos:end="103:43">(<argument pos:start="103:40" pos:end="103:42"><expr pos:start="103:40" pos:end="103:42"><operator pos:start="103:40" pos:end="103:40">&amp;</operator><name pos:start="103:41" pos:end="103:42">g2</name></expr></argument>)</argument_list></call> <operator pos:start="103:45" pos:end="103:46">&gt;=</operator> <literal type="number" pos:start="103:48" pos:end="103:48">4</literal></expr>)</condition> <block pos:start="103:51" pos:end="559:5">{<block_content pos:start="105:9" pos:end="557:21">

        <decl_stmt pos:start="105:9" pos:end="105:35"><decl pos:start="105:9" pos:end="105:34"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:34">stream_ptr_after_chunk</name></decl>;</decl_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:47"><expr pos:start="107:9" pos:end="107:46"><name pos:start="107:9" pos:end="107:18">chunk_size</name> <operator pos:start="107:20" pos:end="107:20">=</operator> <call pos:start="107:22" pos:end="107:46"><name pos:start="107:22" pos:end="107:41">bytestream2_get_le32</name><argument_list pos:start="107:42" pos:end="107:46">(<argument pos:start="107:43" pos:end="107:45"><expr pos:start="107:43" pos:end="107:45"><operator pos:start="107:43" pos:end="107:43">&amp;</operator><name pos:start="107:44" pos:end="107:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="117:9"><if pos:start="109:9" pos:end="117:9">if <condition pos:start="109:12" pos:end="109:36">(<expr pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:22">chunk_size</name> <operator pos:start="109:24" pos:end="109:24">&gt;</operator> <name pos:start="109:26" pos:end="109:35">frame_size</name></expr>)</condition> <block pos:start="109:38" pos:end="117:9">{<block_content pos:start="111:13" pos:end="115:36">

            <expr_stmt pos:start="111:13" pos:end="113:90"><expr pos:start="111:13" pos:end="113:89"><call pos:start="111:13" pos:end="113:89"><name pos:start="111:13" pos:end="111:18">av_log</name><argument_list pos:start="111:19" pos:end="113:89">(<argument pos:start="111:20" pos:end="111:24"><expr pos:start="111:20" pos:end="111:24"><name pos:start="111:20" pos:end="111:24">avctx</name></expr></argument>, <argument pos:start="111:27" pos:end="111:40"><expr pos:start="111:27" pos:end="111:40"><name pos:start="111:27" pos:end="111:40">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="113:20" pos:end="113:64"><expr pos:start="113:20" pos:end="113:64"><literal type="string" pos:start="113:20" pos:end="113:64">"Invalid chunk_size = %u &gt; frame_size = %u\n"</literal></expr></argument>, <argument pos:start="113:67" pos:end="113:76"><expr pos:start="113:67" pos:end="113:76"><name pos:start="113:67" pos:end="113:76">chunk_size</name></expr></argument>, <argument pos:start="113:79" pos:end="113:88"><expr pos:start="113:79" pos:end="113:88"><name pos:start="113:79" pos:end="113:88">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:36"><expr pos:start="115:13" pos:end="115:35"><name pos:start="115:13" pos:end="115:22">chunk_size</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <name pos:start="115:26" pos:end="115:35">frame_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:72"><expr pos:start="119:9" pos:end="119:71"><name pos:start="119:9" pos:end="119:30">stream_ptr_after_chunk</name> <operator pos:start="119:32" pos:end="119:32">=</operator> <call pos:start="119:34" pos:end="119:54"><name pos:start="119:34" pos:end="119:49">bytestream2_tell</name><argument_list pos:start="119:50" pos:end="119:54">(<argument pos:start="119:51" pos:end="119:53"><expr pos:start="119:51" pos:end="119:53"><operator pos:start="119:51" pos:end="119:51">&amp;</operator><name pos:start="119:52" pos:end="119:53">g2</name></expr></argument>)</argument_list></call> <operator pos:start="119:56" pos:end="119:56">-</operator> <literal type="number" pos:start="119:58" pos:end="119:60">4</literal> <operator pos:start="119:60" pos:end="119:60">+</operator> <name pos:start="119:62" pos:end="119:71">chunk_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:47"><expr pos:start="123:9" pos:end="123:46"><name pos:start="123:9" pos:end="123:18">chunk_type</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <call pos:start="123:22" pos:end="123:46"><name pos:start="123:22" pos:end="123:41">bytestream2_get_le16</name><argument_list pos:start="123:42" pos:end="123:46">(<argument pos:start="123:43" pos:end="123:45"><expr pos:start="123:43" pos:end="123:45"><operator pos:start="123:43" pos:end="123:43">&amp;</operator><name pos:start="123:44" pos:end="123:45">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <switch pos:start="129:9" pos:end="537:9">switch <condition pos:start="129:16" pos:end="129:27">(<expr pos:start="129:17" pos:end="129:26"><name pos:start="129:17" pos:end="129:26">chunk_type</name></expr>)</condition> <block pos:start="129:29" pos:end="537:9">{<block_content pos:start="131:9" pos:end="535:18">

        <case pos:start="131:9" pos:end="131:27">case <expr pos:start="131:14" pos:end="131:26"><name pos:start="131:14" pos:end="131:26">FLI_256_COLOR</name></expr>:</case>

        <case pos:start="133:9" pos:end="133:23">case <expr pos:start="133:14" pos:end="133:22"><name pos:start="133:14" pos:end="133:22">FLI_COLOR</name></expr>:</case>

            <comment type="block" pos:start="135:13" pos:end="139:64">/* For some reason, it seems that non-palettized flics do

             * include one of these chunks in their first frame.

             * Why I do not know, it seems rather extraneous. */</comment>

            <expr_stmt pos:start="141:13" pos:end="145:32"><expr pos:start="141:13" pos:end="145:31"><call pos:start="141:13" pos:end="145:31"><name pos:start="141:13" pos:end="141:19">ff_dlog</name><argument_list pos:start="141:20" pos:end="145:31">(<argument pos:start="141:21" pos:end="141:25"><expr pos:start="141:21" pos:end="141:25"><name pos:start="141:21" pos:end="141:25">avctx</name></expr></argument>,

                    <argument pos:start="143:21" pos:end="143:73"><expr pos:start="143:21" pos:end="143:73"><literal type="string" pos:start="143:21" pos:end="143:73">"Unexpected Palette chunk %d in non-palettized FLC\n"</literal></expr></argument>,

                    <argument pos:start="145:21" pos:end="145:30"><expr pos:start="145:21" pos:end="145:30"><name pos:start="145:21" pos:end="145:30">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:50"><expr pos:start="147:13" pos:end="147:49"><call pos:start="147:13" pos:end="147:49"><name pos:start="147:13" pos:end="147:28">bytestream2_skip</name><argument_list pos:start="147:29" pos:end="147:49">(<argument pos:start="147:30" pos:end="147:32"><expr pos:start="147:30" pos:end="147:32"><operator pos:start="147:30" pos:end="147:30">&amp;</operator><name pos:start="147:31" pos:end="147:32">g2</name></expr></argument>, <argument pos:start="147:35" pos:end="147:48"><expr pos:start="147:35" pos:end="147:48"><name pos:start="147:35" pos:end="147:44">chunk_size</name> <operator pos:start="147:46" pos:end="147:46">-</operator> <literal type="number" pos:start="147:48" pos:end="147:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>



        <case pos:start="153:9" pos:end="153:23">case <expr pos:start="153:14" pos:end="153:22"><name pos:start="153:14" pos:end="153:22">FLI_DELTA</name></expr>:</case>

        <case pos:start="155:9" pos:end="155:24">case <expr pos:start="155:14" pos:end="155:23"><name pos:start="155:14" pos:end="155:23">FLI_DTA_LC</name></expr>:</case>

            <expr_stmt pos:start="157:13" pos:end="157:22"><expr pos:start="157:13" pos:end="157:21"><name pos:start="157:13" pos:end="157:17">y_ptr</name> <operator pos:start="157:19" pos:end="157:19">=</operator> <literal type="number" pos:start="157:21" pos:end="157:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:57"><expr pos:start="159:13" pos:end="159:56"><name pos:start="159:13" pos:end="159:28">compressed_lines</name> <operator pos:start="159:30" pos:end="159:30">=</operator> <call pos:start="159:32" pos:end="159:56"><name pos:start="159:32" pos:end="159:51">bytestream2_get_le16</name><argument_list pos:start="159:52" pos:end="159:56">(<argument pos:start="159:53" pos:end="159:55"><expr pos:start="159:53" pos:end="159:55"><operator pos:start="159:53" pos:end="159:53">&amp;</operator><name pos:start="159:54" pos:end="159:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="161:13" pos:end="243:13">while <condition pos:start="161:19" pos:end="161:40">(<expr pos:start="161:20" pos:end="161:39"><name pos:start="161:20" pos:end="161:35">compressed_lines</name> <operator pos:start="161:37" pos:end="161:37">&gt;</operator> <literal type="number" pos:start="161:39" pos:end="161:39">0</literal></expr>)</condition> <block pos:start="161:42" pos:end="243:13">{<block_content pos:start="163:17" pos:end="241:17">

                <if_stmt pos:start="163:17" pos:end="165:26"><if pos:start="163:17" pos:end="165:26">if <condition pos:start="163:20" pos:end="163:71">(<expr pos:start="163:21" pos:end="163:70"><call pos:start="163:21" pos:end="163:41"><name pos:start="163:21" pos:end="163:36">bytestream2_tell</name><argument_list pos:start="163:37" pos:end="163:41">(<argument pos:start="163:38" pos:end="163:40"><expr pos:start="163:38" pos:end="163:40"><operator pos:start="163:38" pos:end="163:38">&amp;</operator><name pos:start="163:39" pos:end="163:40">g2</name></expr></argument>)</argument_list></call> <operator pos:start="163:43" pos:end="163:43">+</operator> <literal type="number" pos:start="163:45" pos:end="163:45">2</literal> <operator pos:start="163:47" pos:end="163:47">&gt;</operator> <name pos:start="163:49" pos:end="163:70">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="165:21" pos:end="165:26"><block_content pos:start="165:21" pos:end="165:26">

                    <break pos:start="165:21" pos:end="165:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="167:17" pos:end="167:57"><expr pos:start="167:17" pos:end="167:56"><name pos:start="167:17" pos:end="167:28">line_packets</name> <operator pos:start="167:30" pos:end="167:30">=</operator> <call pos:start="167:32" pos:end="167:56"><name pos:start="167:32" pos:end="167:51">bytestream2_get_le16</name><argument_list pos:start="167:52" pos:end="167:56">(<argument pos:start="167:53" pos:end="167:55"><expr pos:start="167:53" pos:end="167:55"><operator pos:start="167:53" pos:end="167:53">&amp;</operator><name pos:start="167:54" pos:end="167:55">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="169:17" pos:end="241:17"><if pos:start="169:17" pos:end="175:17">if <condition pos:start="169:20" pos:end="169:37">(<expr pos:start="169:21" pos:end="169:36"><name pos:start="169:21" pos:end="169:32">line_packets</name> <operator pos:start="169:34" pos:end="169:34">&lt;</operator> <literal type="number" pos:start="169:36" pos:end="169:36">0</literal></expr>)</condition> <block pos:start="169:39" pos:end="175:17">{<block_content pos:start="171:21" pos:end="173:66">

                    <expr_stmt pos:start="171:21" pos:end="171:49"><expr pos:start="171:21" pos:end="171:48"><name pos:start="171:21" pos:end="171:32">line_packets</name> <operator pos:start="171:34" pos:end="171:34">=</operator> <operator pos:start="171:36" pos:end="171:36">-</operator><name pos:start="171:37" pos:end="171:48">line_packets</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="173:21" pos:end="173:66"><expr pos:start="173:21" pos:end="173:65"><name pos:start="173:21" pos:end="173:25">y_ptr</name> <operator pos:start="173:27" pos:end="173:28">+=</operator> <name pos:start="173:30" pos:end="173:41">line_packets</name> <operator pos:start="173:43" pos:end="173:43">*</operator> <name pos:start="173:45" pos:end="173:65"><name pos:start="173:45" pos:end="173:45">s</name><operator pos:start="173:46" pos:end="173:47">-&gt;</operator><name pos:start="173:48" pos:end="173:52">frame</name><operator pos:start="173:53" pos:end="173:54">-&gt;</operator><name pos:start="173:55" pos:end="173:62">linesize</name><index pos:start="173:63" pos:end="173:65">[<expr pos:start="173:64" pos:end="173:64"><literal type="number" pos:start="173:64" pos:end="173:64">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="175:19" pos:end="241:17">else <block pos:start="175:24" pos:end="241:17">{<block_content pos:start="177:21" pos:end="239:51">

                    <expr_stmt pos:start="177:21" pos:end="177:39"><expr pos:start="177:21" pos:end="177:38"><name pos:start="177:21" pos:end="177:36">compressed_lines</name><operator pos:start="177:37" pos:end="177:38">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:38"><expr pos:start="179:21" pos:end="179:37"><name pos:start="179:21" pos:end="179:29">pixel_ptr</name> <operator pos:start="179:31" pos:end="179:31">=</operator> <name pos:start="179:33" pos:end="179:37">y_ptr</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="181:21" pos:end="181:39"><expr pos:start="181:21" pos:end="181:38"><call pos:start="181:21" pos:end="181:38"><name pos:start="181:21" pos:end="181:35">CHECK_PIXEL_PTR</name><argument_list pos:start="181:36" pos:end="181:38">(<argument pos:start="181:37" pos:end="181:37"><expr pos:start="181:37" pos:end="181:37"><literal type="number" pos:start="181:37" pos:end="181:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="183:21" pos:end="183:54"><expr pos:start="183:21" pos:end="183:53"><name pos:start="183:21" pos:end="183:35">pixel_countdown</name> <operator pos:start="183:37" pos:end="183:37">=</operator> <name pos:start="183:39" pos:end="183:53"><name pos:start="183:39" pos:end="183:39">s</name><operator pos:start="183:40" pos:end="183:41">-&gt;</operator><name pos:start="183:42" pos:end="183:46">avctx</name><operator pos:start="183:47" pos:end="183:48">-&gt;</operator><name pos:start="183:49" pos:end="183:53">width</name></name></expr>;</expr_stmt>

                    <for pos:start="185:21" pos:end="235:21">for <control pos:start="185:25" pos:end="185:54">(<init pos:start="185:26" pos:end="185:31"><expr pos:start="185:26" pos:end="185:30"><name pos:start="185:26" pos:end="185:26">i</name> <operator pos:start="185:28" pos:end="185:28">=</operator> <literal type="number" pos:start="185:30" pos:end="185:30">0</literal></expr>;</init> <condition pos:start="185:33" pos:end="185:49"><expr pos:start="185:33" pos:end="185:48"><name pos:start="185:33" pos:end="185:33">i</name> <operator pos:start="185:35" pos:end="185:35">&lt;</operator> <name pos:start="185:37" pos:end="185:48">line_packets</name></expr>;</condition> <incr pos:start="185:51" pos:end="185:53"><expr pos:start="185:51" pos:end="185:53"><name pos:start="185:51" pos:end="185:51">i</name><operator pos:start="185:52" pos:end="185:53">++</operator></expr></incr>)</control> <block pos:start="185:56" pos:end="235:21">{<block_content pos:start="189:25" pos:end="233:25">

                        <comment type="block" pos:start="187:25" pos:end="187:56">/* account for the skip bytes */</comment>

                        <if_stmt pos:start="189:25" pos:end="191:34"><if pos:start="189:25" pos:end="191:34">if <condition pos:start="189:28" pos:end="189:79">(<expr pos:start="189:29" pos:end="189:78"><call pos:start="189:29" pos:end="189:49"><name pos:start="189:29" pos:end="189:44">bytestream2_tell</name><argument_list pos:start="189:45" pos:end="189:49">(<argument pos:start="189:46" pos:end="189:48"><expr pos:start="189:46" pos:end="189:48"><operator pos:start="189:46" pos:end="189:46">&amp;</operator><name pos:start="189:47" pos:end="189:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="189:51" pos:end="189:51">+</operator> <literal type="number" pos:start="189:53" pos:end="189:53">2</literal> <operator pos:start="189:55" pos:end="189:55">&gt;</operator> <name pos:start="189:57" pos:end="189:78">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="191:29" pos:end="191:34"><block_content pos:start="191:29" pos:end="191:34">

                            <break pos:start="191:29" pos:end="191:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="193:25" pos:end="193:63"><expr pos:start="193:25" pos:end="193:62"><name pos:start="193:25" pos:end="193:34">pixel_skip</name> <operator pos:start="193:36" pos:end="193:36">=</operator> <call pos:start="193:38" pos:end="193:62"><name pos:start="193:38" pos:end="193:57">bytestream2_get_byte</name><argument_list pos:start="193:58" pos:end="193:62">(<argument pos:start="193:59" pos:end="193:61"><expr pos:start="193:59" pos:end="193:61"><operator pos:start="193:59" pos:end="193:59">&amp;</operator><name pos:start="193:60" pos:end="193:61">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="195:25" pos:end="195:52"><expr pos:start="195:25" pos:end="195:51"><name pos:start="195:25" pos:end="195:33">pixel_ptr</name> <operator pos:start="195:35" pos:end="195:36">+=</operator> <operator pos:start="195:38" pos:end="195:38">(</operator><name pos:start="195:39" pos:end="195:48">pixel_skip</name><operator pos:start="195:49" pos:end="195:49">*</operator><literal type="number" pos:start="195:50" pos:end="195:50">2</literal><operator pos:start="195:51" pos:end="195:51">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="195:54" pos:end="195:80">/* Pixel is 2 bytes wide */</comment>

                        <expr_stmt pos:start="197:25" pos:end="197:54"><expr pos:start="197:25" pos:end="197:53"><name pos:start="197:25" pos:end="197:39">pixel_countdown</name> <operator pos:start="197:41" pos:end="197:42">-=</operator> <name pos:start="197:44" pos:end="197:53">pixel_skip</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="199:25" pos:end="199:77"><expr pos:start="199:25" pos:end="199:76"><name pos:start="199:25" pos:end="199:32">byte_run</name> <operator pos:start="199:34" pos:end="199:34">=</operator> <call pos:start="199:36" pos:end="199:76"><name pos:start="199:36" pos:end="199:46">sign_extend</name><argument_list pos:start="199:47" pos:end="199:76">(<argument pos:start="199:48" pos:end="199:72"><expr pos:start="199:48" pos:end="199:72"><call pos:start="199:48" pos:end="199:72"><name pos:start="199:48" pos:end="199:67">bytestream2_get_byte</name><argument_list pos:start="199:68" pos:end="199:72">(<argument pos:start="199:69" pos:end="199:71"><expr pos:start="199:69" pos:end="199:71"><operator pos:start="199:69" pos:end="199:69">&amp;</operator><name pos:start="199:70" pos:end="199:71">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="199:75" pos:end="199:75"><expr pos:start="199:75" pos:end="199:75"><literal type="number" pos:start="199:75" pos:end="199:75">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="201:25" pos:end="233:25"><if pos:start="201:25" pos:end="217:25">if <condition pos:start="201:28" pos:end="201:41">(<expr pos:start="201:29" pos:end="201:40"><name pos:start="201:29" pos:end="201:36">byte_run</name> <operator pos:start="201:38" pos:end="201:38">&lt;</operator> <literal type="number" pos:start="201:40" pos:end="201:40">0</literal></expr>)</condition> <block pos:start="201:43" pos:end="217:25">{<block_content pos:start="203:29" pos:end="215:29">

                            <expr_stmt pos:start="203:29" pos:end="203:49"><expr pos:start="203:29" pos:end="203:48"><name pos:start="203:29" pos:end="203:36">byte_run</name> <operator pos:start="203:38" pos:end="203:38">=</operator> <operator pos:start="203:40" pos:end="203:40">-</operator><name pos:start="203:41" pos:end="203:48">byte_run</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="205:29" pos:end="205:65"><expr pos:start="205:29" pos:end="205:64"><name pos:start="205:29" pos:end="205:33">pixel</name>    <operator pos:start="205:38" pos:end="205:38">=</operator> <call pos:start="205:40" pos:end="205:64"><name pos:start="205:40" pos:end="205:59">bytestream2_get_le16</name><argument_list pos:start="205:60" pos:end="205:64">(<argument pos:start="205:61" pos:end="205:63"><expr pos:start="205:61" pos:end="205:63"><operator pos:start="205:61" pos:end="205:61">&amp;</operator><name pos:start="205:62" pos:end="205:63">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="207:29" pos:end="207:58"><expr pos:start="207:29" pos:end="207:57"><call pos:start="207:29" pos:end="207:57"><name pos:start="207:29" pos:end="207:43">CHECK_PIXEL_PTR</name><argument_list pos:start="207:44" pos:end="207:57">(<argument pos:start="207:45" pos:end="207:56"><expr pos:start="207:45" pos:end="207:56"><literal type="number" pos:start="207:45" pos:end="207:45">2</literal> <operator pos:start="207:47" pos:end="207:47">*</operator> <name pos:start="207:49" pos:end="207:56">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="209:29" pos:end="215:29">for <control pos:start="209:33" pos:end="209:80">(<init pos:start="209:34" pos:end="209:39"><expr pos:start="209:34" pos:end="209:38"><name pos:start="209:34" pos:end="209:34">j</name> <operator pos:start="209:36" pos:end="209:36">=</operator> <literal type="number" pos:start="209:38" pos:end="209:38">0</literal></expr>;</init> <condition pos:start="209:41" pos:end="209:53"><expr pos:start="209:41" pos:end="209:52"><name pos:start="209:41" pos:end="209:41">j</name> <operator pos:start="209:43" pos:end="209:43">&lt;</operator> <name pos:start="209:45" pos:end="209:52">byte_run</name></expr>;</condition> <incr pos:start="209:55" pos:end="209:79"><expr pos:start="209:55" pos:end="209:57"><name pos:start="209:55" pos:end="209:55">j</name><operator pos:start="209:56" pos:end="209:57">++</operator></expr><operator pos:start="209:58" pos:end="209:58">,</operator> <expr pos:start="209:60" pos:end="209:79"><name pos:start="209:60" pos:end="209:74">pixel_countdown</name> <operator pos:start="209:76" pos:end="209:77">-=</operator> <literal type="number" pos:start="209:79" pos:end="209:79">2</literal></expr></incr>)</control> <block pos:start="209:82" pos:end="215:29">{<block_content pos:start="211:33" pos:end="213:47">

                                <expr_stmt pos:start="211:33" pos:end="211:79"><expr pos:start="211:33" pos:end="211:78"><operator pos:start="211:33" pos:end="211:33">*</operator><operator pos:start="211:34" pos:end="211:34">(</operator><operator pos:start="211:35" pos:end="211:35">(</operator><name pos:start="211:36" pos:end="211:41">signed</name> <name pos:start="211:43" pos:end="211:47">short</name><operator pos:start="211:48" pos:end="211:48">*</operator><operator pos:start="211:49" pos:end="211:49">)</operator><operator pos:start="211:50" pos:end="211:50">(</operator><operator pos:start="211:51" pos:end="211:51">&amp;</operator><name pos:start="211:52" pos:end="211:68"><name pos:start="211:52" pos:end="211:57">pixels</name><index pos:start="211:58" pos:end="211:68">[<expr pos:start="211:59" pos:end="211:67"><name pos:start="211:59" pos:end="211:67">pixel_ptr</name></expr>]</index></name><operator pos:start="211:69" pos:end="211:69">)</operator><operator pos:start="211:70" pos:end="211:70">)</operator> <operator pos:start="211:72" pos:end="211:72">=</operator> <name pos:start="211:74" pos:end="211:78">pixel</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="213:33" pos:end="213:47"><expr pos:start="213:33" pos:end="213:46"><name pos:start="213:33" pos:end="213:41">pixel_ptr</name> <operator pos:start="213:43" pos:end="213:44">+=</operator> <literal type="number" pos:start="213:46" pos:end="213:46">2</literal></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></if> <else pos:start="217:27" pos:end="233:25">else <block pos:start="217:32" pos:end="233:25">{<block_content pos:start="219:29" pos:end="231:29">

                            <if_stmt pos:start="219:29" pos:end="221:38"><if pos:start="219:29" pos:end="221:38">if <condition pos:start="219:32" pos:end="219:92">(<expr pos:start="219:33" pos:end="219:91"><call pos:start="219:33" pos:end="219:53"><name pos:start="219:33" pos:end="219:48">bytestream2_tell</name><argument_list pos:start="219:49" pos:end="219:53">(<argument pos:start="219:50" pos:end="219:52"><expr pos:start="219:50" pos:end="219:52"><operator pos:start="219:50" pos:end="219:50">&amp;</operator><name pos:start="219:51" pos:end="219:52">g2</name></expr></argument>)</argument_list></call> <operator pos:start="219:55" pos:end="219:55">+</operator> <literal type="number" pos:start="219:57" pos:end="219:57">2</literal><operator pos:start="219:58" pos:end="219:58">*</operator><name pos:start="219:59" pos:end="219:66">byte_run</name> <operator pos:start="219:68" pos:end="219:68">&gt;</operator> <name pos:start="219:70" pos:end="219:91">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="221:33" pos:end="221:38"><block_content pos:start="221:33" pos:end="221:38">

                                <break pos:start="221:33" pos:end="221:38">break;</break></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="223:29" pos:end="223:58"><expr pos:start="223:29" pos:end="223:57"><call pos:start="223:29" pos:end="223:57"><name pos:start="223:29" pos:end="223:43">CHECK_PIXEL_PTR</name><argument_list pos:start="223:44" pos:end="223:57">(<argument pos:start="223:45" pos:end="223:56"><expr pos:start="223:45" pos:end="223:56"><literal type="number" pos:start="223:45" pos:end="223:45">2</literal> <operator pos:start="223:47" pos:end="223:47">*</operator> <name pos:start="223:49" pos:end="223:56">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="225:29" pos:end="231:29">for <control pos:start="225:33" pos:end="225:77">(<init pos:start="225:34" pos:end="225:39"><expr pos:start="225:34" pos:end="225:38"><name pos:start="225:34" pos:end="225:34">j</name> <operator pos:start="225:36" pos:end="225:36">=</operator> <literal type="number" pos:start="225:38" pos:end="225:38">0</literal></expr>;</init> <condition pos:start="225:41" pos:end="225:53"><expr pos:start="225:41" pos:end="225:52"><name pos:start="225:41" pos:end="225:41">j</name> <operator pos:start="225:43" pos:end="225:43">&lt;</operator> <name pos:start="225:45" pos:end="225:52">byte_run</name></expr>;</condition> <incr pos:start="225:55" pos:end="225:76"><expr pos:start="225:55" pos:end="225:57"><name pos:start="225:55" pos:end="225:55">j</name><operator pos:start="225:56" pos:end="225:57">++</operator></expr><operator pos:start="225:58" pos:end="225:58">,</operator> <expr pos:start="225:60" pos:end="225:76"><name pos:start="225:60" pos:end="225:74">pixel_countdown</name><operator pos:start="225:75" pos:end="225:76">--</operator></expr></incr>)</control> <block pos:start="225:79" pos:end="231:29">{<block_content pos:start="227:33" pos:end="229:47">

                                <expr_stmt pos:start="227:33" pos:end="227:99"><expr pos:start="227:33" pos:end="227:98"><operator pos:start="227:33" pos:end="227:33">*</operator><operator pos:start="227:34" pos:end="227:34">(</operator><operator pos:start="227:35" pos:end="227:35">(</operator><name pos:start="227:36" pos:end="227:41">signed</name> <name pos:start="227:43" pos:end="227:47">short</name><operator pos:start="227:48" pos:end="227:48">*</operator><operator pos:start="227:49" pos:end="227:49">)</operator><operator pos:start="227:50" pos:end="227:50">(</operator><operator pos:start="227:51" pos:end="227:51">&amp;</operator><name pos:start="227:52" pos:end="227:68"><name pos:start="227:52" pos:end="227:57">pixels</name><index pos:start="227:58" pos:end="227:68">[<expr pos:start="227:59" pos:end="227:67"><name pos:start="227:59" pos:end="227:67">pixel_ptr</name></expr>]</index></name><operator pos:start="227:69" pos:end="227:69">)</operator><operator pos:start="227:70" pos:end="227:70">)</operator> <operator pos:start="227:72" pos:end="227:72">=</operator> <call pos:start="227:74" pos:end="227:98"><name pos:start="227:74" pos:end="227:93">bytestream2_get_le16</name><argument_list pos:start="227:94" pos:end="227:98">(<argument pos:start="227:95" pos:end="227:97"><expr pos:start="227:95" pos:end="227:97"><operator pos:start="227:95" pos:end="227:95">&amp;</operator><name pos:start="227:96" pos:end="227:97">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="229:33" pos:end="229:47"><expr pos:start="229:33" pos:end="229:46"><name pos:start="229:33" pos:end="229:41">pixel_ptr</name> <operator pos:start="229:43" pos:end="229:44">+=</operator> <literal type="number" pos:start="229:46" pos:end="229:46">2</literal></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>



                    <expr_stmt pos:start="239:21" pos:end="239:51"><expr pos:start="239:21" pos:end="239:50"><name pos:start="239:21" pos:end="239:25">y_ptr</name> <operator pos:start="239:27" pos:end="239:28">+=</operator> <name pos:start="239:30" pos:end="239:50"><name pos:start="239:30" pos:end="239:30">s</name><operator pos:start="239:31" pos:end="239:32">-&gt;</operator><name pos:start="239:33" pos:end="239:37">frame</name><operator pos:start="239:38" pos:end="239:39">-&gt;</operator><name pos:start="239:40" pos:end="239:47">linesize</name><index pos:start="239:48" pos:end="239:50">[<expr pos:start="239:49" pos:end="239:49"><literal type="number" pos:start="239:49" pos:end="239:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></while>

            <break pos:start="245:13" pos:end="245:18">break;</break>



        <case pos:start="249:9" pos:end="249:20">case <expr pos:start="249:14" pos:end="249:19"><name pos:start="249:14" pos:end="249:19">FLI_LC</name></expr>:</case>

            <expr_stmt pos:start="251:13" pos:end="251:91"><expr pos:start="251:13" pos:end="251:90"><call pos:start="251:13" pos:end="251:90"><name pos:start="251:13" pos:end="251:18">av_log</name><argument_list pos:start="251:19" pos:end="251:90">(<argument pos:start="251:20" pos:end="251:24"><expr pos:start="251:20" pos:end="251:24"><name pos:start="251:20" pos:end="251:24">avctx</name></expr></argument>, <argument pos:start="251:27" pos:end="251:38"><expr pos:start="251:27" pos:end="251:38"><name pos:start="251:27" pos:end="251:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="251:41" pos:end="251:89"><expr pos:start="251:41" pos:end="251:89"><literal type="string" pos:start="251:41" pos:end="251:89">"Unexpected FLI_LC chunk in non-palettized FLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:50"><expr pos:start="253:13" pos:end="253:49"><call pos:start="253:13" pos:end="253:49"><name pos:start="253:13" pos:end="253:28">bytestream2_skip</name><argument_list pos:start="253:29" pos:end="253:49">(<argument pos:start="253:30" pos:end="253:32"><expr pos:start="253:30" pos:end="253:32"><operator pos:start="253:30" pos:end="253:30">&amp;</operator><name pos:start="253:31" pos:end="253:32">g2</name></expr></argument>, <argument pos:start="253:35" pos:end="253:48"><expr pos:start="253:35" pos:end="253:48"><name pos:start="253:35" pos:end="253:44">chunk_size</name> <operator pos:start="253:46" pos:end="253:46">-</operator> <literal type="number" pos:start="253:48" pos:end="253:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="255:13" pos:end="255:18">break;</break>



        <case pos:start="259:9" pos:end="259:23">case <expr pos:start="259:14" pos:end="259:22"><name pos:start="259:14" pos:end="259:22">FLI_BLACK</name></expr>:</case>

            <comment type="block" pos:start="261:13" pos:end="261:93">/* set the whole frame to 0x0000 which is black in both 15Bpp and 16Bpp modes. */</comment>

            <expr_stmt pos:start="263:13" pos:end="265:61"><expr pos:start="263:13" pos:end="265:60"><call pos:start="263:13" pos:end="265:60"><name pos:start="263:13" pos:end="263:18">memset</name><argument_list pos:start="263:19" pos:end="265:60">(<argument pos:start="263:20" pos:end="263:25"><expr pos:start="263:20" pos:end="263:25"><name pos:start="263:20" pos:end="263:25">pixels</name></expr></argument>, <argument pos:start="263:28" pos:end="263:33"><expr pos:start="263:28" pos:end="263:33"><literal type="number" pos:start="263:28" pos:end="263:33">0x0000</literal></expr></argument>,

                   <argument pos:start="265:20" pos:end="265:59"><expr pos:start="265:20" pos:end="265:59"><name pos:start="265:20" pos:end="265:40"><name pos:start="265:20" pos:end="265:20">s</name><operator pos:start="265:21" pos:end="265:22">-&gt;</operator><name pos:start="265:23" pos:end="265:27">frame</name><operator pos:start="265:28" pos:end="265:29">-&gt;</operator><name pos:start="265:30" pos:end="265:37">linesize</name><index pos:start="265:38" pos:end="265:40">[<expr pos:start="265:39" pos:end="265:39"><literal type="number" pos:start="265:39" pos:end="265:39">0</literal></expr>]</index></name> <operator pos:start="265:42" pos:end="265:42">*</operator> <name pos:start="265:44" pos:end="265:59"><name pos:start="265:44" pos:end="265:44">s</name><operator pos:start="265:45" pos:end="265:46">-&gt;</operator><name pos:start="265:47" pos:end="265:51">avctx</name><operator pos:start="265:52" pos:end="265:53">-&gt;</operator><name pos:start="265:54" pos:end="265:59">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="267:13" pos:end="267:18">break;</break>



        <case pos:start="271:9" pos:end="271:22">case <expr pos:start="271:14" pos:end="271:21"><name pos:start="271:14" pos:end="271:21">FLI_BRUN</name></expr>:</case>

            <expr_stmt pos:start="273:13" pos:end="273:22"><expr pos:start="273:13" pos:end="273:21"><name pos:start="273:13" pos:end="273:17">y_ptr</name> <operator pos:start="273:19" pos:end="273:19">=</operator> <literal type="number" pos:start="273:21" pos:end="273:21">0</literal></expr>;</expr_stmt>

            <for pos:start="275:13" pos:end="377:13">for <control pos:start="275:17" pos:end="275:62">(<init pos:start="275:18" pos:end="275:27"><expr pos:start="275:18" pos:end="275:26"><name pos:start="275:18" pos:end="275:22">lines</name> <operator pos:start="275:24" pos:end="275:24">=</operator> <literal type="number" pos:start="275:26" pos:end="275:26">0</literal></expr>;</init> <condition pos:start="275:29" pos:end="275:53"><expr pos:start="275:29" pos:end="275:52"><name pos:start="275:29" pos:end="275:33">lines</name> <operator pos:start="275:35" pos:end="275:35">&lt;</operator> <name pos:start="275:37" pos:end="275:52"><name pos:start="275:37" pos:end="275:37">s</name><operator pos:start="275:38" pos:end="275:39">-&gt;</operator><name pos:start="275:40" pos:end="275:44">avctx</name><operator pos:start="275:45" pos:end="275:46">-&gt;</operator><name pos:start="275:47" pos:end="275:52">height</name></name></expr>;</condition> <incr pos:start="275:55" pos:end="275:61"><expr pos:start="275:55" pos:end="275:61"><name pos:start="275:55" pos:end="275:59">lines</name><operator pos:start="275:60" pos:end="275:61">++</operator></expr></incr>)</control> <block pos:start="275:64" pos:end="377:13">{<block_content pos:start="277:17" pos:end="375:47">

                <expr_stmt pos:start="277:17" pos:end="277:34"><expr pos:start="277:17" pos:end="277:33"><name pos:start="277:17" pos:end="277:25">pixel_ptr</name> <operator pos:start="277:27" pos:end="277:27">=</operator> <name pos:start="277:29" pos:end="277:33">y_ptr</name></expr>;</expr_stmt>

                <comment type="block" pos:start="279:17" pos:end="281:37">/* disregard the line packets; instead, iterate through all

                 * pixels on a row */</comment>

                <expr_stmt pos:start="283:17" pos:end="283:41"><expr pos:start="283:17" pos:end="283:40"><call pos:start="283:17" pos:end="283:40"><name pos:start="283:17" pos:end="283:32">bytestream2_skip</name><argument_list pos:start="283:33" pos:end="283:40">(<argument pos:start="283:34" pos:end="283:36"><expr pos:start="283:34" pos:end="283:36"><operator pos:start="283:34" pos:end="283:34">&amp;</operator><name pos:start="283:35" pos:end="283:36">g2</name></expr></argument>, <argument pos:start="283:39" pos:end="283:39"><expr pos:start="283:39" pos:end="283:39"><literal type="number" pos:start="283:39" pos:end="283:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:56"><expr pos:start="285:17" pos:end="285:55"><name pos:start="285:17" pos:end="285:31">pixel_countdown</name> <operator pos:start="285:33" pos:end="285:33">=</operator> <operator pos:start="285:35" pos:end="285:35">(</operator><name pos:start="285:36" pos:end="285:50"><name pos:start="285:36" pos:end="285:36">s</name><operator pos:start="285:37" pos:end="285:38">-&gt;</operator><name pos:start="285:39" pos:end="285:43">avctx</name><operator pos:start="285:44" pos:end="285:45">-&gt;</operator><name pos:start="285:46" pos:end="285:50">width</name></name> <operator pos:start="285:52" pos:end="285:52">*</operator> <literal type="number" pos:start="285:54" pos:end="285:54">2</literal><operator pos:start="285:55" pos:end="285:55">)</operator></expr>;</expr_stmt>



                <while pos:start="289:17" pos:end="360:0">while <condition pos:start="289:23" pos:end="289:43">(<expr pos:start="289:24" pos:end="289:42"><name pos:start="289:24" pos:end="289:38">pixel_countdown</name> <operator pos:start="289:40" pos:end="289:40">&gt;</operator> <literal type="number" pos:start="289:42" pos:end="289:42">0</literal></expr>)</condition> <block pos:start="289:45" pos:end="360:0">{<block_content pos:start="291:21" pos:end="343:21">

                    <if_stmt pos:start="291:21" pos:end="293:30"><if pos:start="291:21" pos:end="293:30">if <condition pos:start="291:24" pos:end="291:75">(<expr pos:start="291:25" pos:end="291:74"><call pos:start="291:25" pos:end="291:45"><name pos:start="291:25" pos:end="291:40">bytestream2_tell</name><argument_list pos:start="291:41" pos:end="291:45">(<argument pos:start="291:42" pos:end="291:44"><expr pos:start="291:42" pos:end="291:44"><operator pos:start="291:42" pos:end="291:42">&amp;</operator><name pos:start="291:43" pos:end="291:44">g2</name></expr></argument>)</argument_list></call> <operator pos:start="291:47" pos:end="291:47">+</operator> <literal type="number" pos:start="291:49" pos:end="291:49">1</literal> <operator pos:start="291:51" pos:end="291:51">&gt;</operator> <name pos:start="291:53" pos:end="291:74">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="293:25" pos:end="293:30"><block_content pos:start="293:25" pos:end="293:30">

                        <break pos:start="293:25" pos:end="293:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:73"><expr pos:start="295:21" pos:end="295:72"><name pos:start="295:21" pos:end="295:28">byte_run</name> <operator pos:start="295:30" pos:end="295:30">=</operator> <call pos:start="295:32" pos:end="295:72"><name pos:start="295:32" pos:end="295:42">sign_extend</name><argument_list pos:start="295:43" pos:end="295:72">(<argument pos:start="295:44" pos:end="295:68"><expr pos:start="295:44" pos:end="295:68"><call pos:start="295:44" pos:end="295:68"><name pos:start="295:44" pos:end="295:63">bytestream2_get_byte</name><argument_list pos:start="295:64" pos:end="295:68">(<argument pos:start="295:65" pos:end="295:67"><expr pos:start="295:65" pos:end="295:67"><operator pos:start="295:65" pos:end="295:65">&amp;</operator><name pos:start="295:66" pos:end="295:67">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="295:71" pos:end="295:71"><expr pos:start="295:71" pos:end="295:71"><literal type="number" pos:start="295:71" pos:end="295:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="297:21" pos:end="343:21"><if pos:start="297:21" pos:end="317:21">if <condition pos:start="297:24" pos:end="297:37">(<expr pos:start="297:25" pos:end="297:36"><name pos:start="297:25" pos:end="297:32">byte_run</name> <operator pos:start="297:34" pos:end="297:34">&gt;</operator> <literal type="number" pos:start="297:36" pos:end="297:36">0</literal></expr>)</condition> <block pos:start="297:39" pos:end="317:21">{<block_content pos:start="299:25" pos:end="315:25">

                        <expr_stmt pos:start="299:25" pos:end="299:65"><expr pos:start="299:25" pos:end="299:64"><name pos:start="299:25" pos:end="299:36">palette_idx1</name> <operator pos:start="299:38" pos:end="299:38">=</operator> <call pos:start="299:40" pos:end="299:64"><name pos:start="299:40" pos:end="299:59">bytestream2_get_byte</name><argument_list pos:start="299:60" pos:end="299:64">(<argument pos:start="299:61" pos:end="299:63"><expr pos:start="299:61" pos:end="299:63"><operator pos:start="299:61" pos:end="299:61">&amp;</operator><name pos:start="299:62" pos:end="299:63">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="301:25" pos:end="301:50"><expr pos:start="301:25" pos:end="301:49"><call pos:start="301:25" pos:end="301:49"><name pos:start="301:25" pos:end="301:39">CHECK_PIXEL_PTR</name><argument_list pos:start="301:40" pos:end="301:49">(<argument pos:start="301:41" pos:end="301:48"><expr pos:start="301:41" pos:end="301:48"><name pos:start="301:41" pos:end="301:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="303:25" pos:end="315:25">for <control pos:start="303:29" pos:end="303:54">(<init pos:start="303:30" pos:end="303:35"><expr pos:start="303:30" pos:end="303:34"><name pos:start="303:30" pos:end="303:30">j</name> <operator pos:start="303:32" pos:end="303:32">=</operator> <literal type="number" pos:start="303:34" pos:end="303:34">0</literal></expr>;</init> <condition pos:start="303:37" pos:end="303:49"><expr pos:start="303:37" pos:end="303:48"><name pos:start="303:37" pos:end="303:37">j</name> <operator pos:start="303:39" pos:end="303:39">&lt;</operator> <name pos:start="303:41" pos:end="303:48">byte_run</name></expr>;</condition> <incr pos:start="303:51" pos:end="303:53"><expr pos:start="303:51" pos:end="303:53"><name pos:start="303:51" pos:end="303:51">j</name><operator pos:start="303:52" pos:end="303:53">++</operator></expr></incr>)</control> <block pos:start="303:56" pos:end="315:25">{<block_content pos:start="305:29" pos:end="313:63">

                            <expr_stmt pos:start="305:29" pos:end="305:63"><expr pos:start="305:29" pos:end="305:62"><name pos:start="305:29" pos:end="305:47"><name pos:start="305:29" pos:end="305:34">pixels</name><index pos:start="305:35" pos:end="305:47">[<expr pos:start="305:36" pos:end="305:46"><name pos:start="305:36" pos:end="305:44">pixel_ptr</name><operator pos:start="305:45" pos:end="305:46">++</operator></expr>]</index></name> <operator pos:start="305:49" pos:end="305:49">=</operator> <name pos:start="305:51" pos:end="305:62">palette_idx1</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="307:29" pos:end="307:46"><expr pos:start="307:29" pos:end="307:45"><name pos:start="307:29" pos:end="307:43">pixel_countdown</name><operator pos:start="307:44" pos:end="307:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="309:29" pos:end="313:63"><if pos:start="309:29" pos:end="313:63">if <condition pos:start="309:32" pos:end="309:52">(<expr pos:start="309:33" pos:end="309:51"><name pos:start="309:33" pos:end="309:47">pixel_countdown</name> <operator pos:start="309:49" pos:end="309:49">&lt;</operator> <literal type="number" pos:start="309:51" pos:end="309:51">0</literal></expr>)</condition><block type="pseudo" pos:start="311:33" pos:end="313:63"><block_content pos:start="311:33" pos:end="313:63">

                                <expr_stmt pos:start="311:33" pos:end="313:63"><expr pos:start="311:33" pos:end="313:62"><call pos:start="311:33" pos:end="313:62"><name pos:start="311:33" pos:end="311:38">av_log</name><argument_list pos:start="311:39" pos:end="313:62">(<argument pos:start="311:40" pos:end="311:44"><expr pos:start="311:40" pos:end="311:44"><name pos:start="311:40" pos:end="311:44">avctx</name></expr></argument>, <argument pos:start="311:47" pos:end="311:58"><expr pos:start="311:47" pos:end="311:58"><name pos:start="311:47" pos:end="311:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="311:61" pos:end="311:98"><expr pos:start="311:61" pos:end="311:98"><literal type="string" pos:start="311:61" pos:end="311:98">"pixel_countdown &lt; 0 (%d) (linea%d)\n"</literal></expr></argument>,

                                       <argument pos:start="313:40" pos:end="313:54"><expr pos:start="313:40" pos:end="313:54"><name pos:start="313:40" pos:end="313:54">pixel_countdown</name></expr></argument>, <argument pos:start="313:57" pos:end="313:61"><expr pos:start="313:57" pos:end="313:61"><name pos:start="313:57" pos:end="313:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="317:23" pos:end="343:21">else <block pos:start="317:28" pos:end="343:21">{<block_content pos:start="319:25" pos:end="341:25">  <comment type="block" pos:start="317:31" pos:end="317:62">/* copy bytes if byte_run &lt; 0 */</comment>

                        <expr_stmt pos:start="319:25" pos:end="319:45"><expr pos:start="319:25" pos:end="319:44"><name pos:start="319:25" pos:end="319:32">byte_run</name> <operator pos:start="319:34" pos:end="319:34">=</operator> <operator pos:start="319:36" pos:end="319:36">-</operator><name pos:start="319:37" pos:end="319:44">byte_run</name></expr>;</expr_stmt>

                        <if_stmt pos:start="321:25" pos:end="323:34"><if pos:start="321:25" pos:end="323:34">if <condition pos:start="321:28" pos:end="321:86">(<expr pos:start="321:29" pos:end="321:85"><call pos:start="321:29" pos:end="321:49"><name pos:start="321:29" pos:end="321:44">bytestream2_tell</name><argument_list pos:start="321:45" pos:end="321:49">(<argument pos:start="321:46" pos:end="321:48"><expr pos:start="321:46" pos:end="321:48"><operator pos:start="321:46" pos:end="321:46">&amp;</operator><name pos:start="321:47" pos:end="321:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="321:51" pos:end="321:51">+</operator> <name pos:start="321:53" pos:end="321:60">byte_run</name> <operator pos:start="321:62" pos:end="321:62">&gt;</operator> <name pos:start="321:64" pos:end="321:85">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="323:29" pos:end="323:34"><block_content pos:start="323:29" pos:end="323:34">

                            <break pos:start="323:29" pos:end="323:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="325:25" pos:end="325:50"><expr pos:start="325:25" pos:end="325:49"><call pos:start="325:25" pos:end="325:49"><name pos:start="325:25" pos:end="325:39">CHECK_PIXEL_PTR</name><argument_list pos:start="325:40" pos:end="325:49">(<argument pos:start="325:41" pos:end="325:48"><expr pos:start="325:41" pos:end="325:48"><name pos:start="325:41" pos:end="325:48">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="327:25" pos:end="341:25">for <control pos:start="327:29" pos:end="327:54">(<init pos:start="327:30" pos:end="327:35"><expr pos:start="327:30" pos:end="327:34"><name pos:start="327:30" pos:end="327:30">j</name> <operator pos:start="327:32" pos:end="327:32">=</operator> <literal type="number" pos:start="327:34" pos:end="327:34">0</literal></expr>;</init> <condition pos:start="327:37" pos:end="327:49"><expr pos:start="327:37" pos:end="327:48"><name pos:start="327:37" pos:end="327:37">j</name> <operator pos:start="327:39" pos:end="327:39">&lt;</operator> <name pos:start="327:41" pos:end="327:48">byte_run</name></expr>;</condition> <incr pos:start="327:51" pos:end="327:53"><expr pos:start="327:51" pos:end="327:53"><name pos:start="327:51" pos:end="327:51">j</name><operator pos:start="327:52" pos:end="327:53">++</operator></expr></incr>)</control> <block pos:start="327:56" pos:end="341:25">{<block_content pos:start="329:29" pos:end="339:63">

                            <expr_stmt pos:start="329:29" pos:end="329:69"><expr pos:start="329:29" pos:end="329:68"><name pos:start="329:29" pos:end="329:40">palette_idx1</name> <operator pos:start="329:42" pos:end="329:42">=</operator> <call pos:start="329:44" pos:end="329:68"><name pos:start="329:44" pos:end="329:63">bytestream2_get_byte</name><argument_list pos:start="329:64" pos:end="329:68">(<argument pos:start="329:65" pos:end="329:67"><expr pos:start="329:65" pos:end="329:67"><operator pos:start="329:65" pos:end="329:65">&amp;</operator><name pos:start="329:66" pos:end="329:67">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="331:29" pos:end="331:63"><expr pos:start="331:29" pos:end="331:62"><name pos:start="331:29" pos:end="331:47"><name pos:start="331:29" pos:end="331:34">pixels</name><index pos:start="331:35" pos:end="331:47">[<expr pos:start="331:36" pos:end="331:46"><name pos:start="331:36" pos:end="331:44">pixel_ptr</name><operator pos:start="331:45" pos:end="331:46">++</operator></expr>]</index></name> <operator pos:start="331:49" pos:end="331:49">=</operator> <name pos:start="331:51" pos:end="331:62">palette_idx1</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="333:29" pos:end="333:46"><expr pos:start="333:29" pos:end="333:45"><name pos:start="333:29" pos:end="333:43">pixel_countdown</name><operator pos:start="333:44" pos:end="333:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="335:29" pos:end="339:63"><if pos:start="335:29" pos:end="339:63">if <condition pos:start="335:32" pos:end="335:52">(<expr pos:start="335:33" pos:end="335:51"><name pos:start="335:33" pos:end="335:47">pixel_countdown</name> <operator pos:start="335:49" pos:end="335:49">&lt;</operator> <literal type="number" pos:start="335:51" pos:end="335:51">0</literal></expr>)</condition><block type="pseudo" pos:start="337:33" pos:end="339:63"><block_content pos:start="337:33" pos:end="339:63">

                                <expr_stmt pos:start="337:33" pos:end="339:63"><expr pos:start="337:33" pos:end="339:62"><call pos:start="337:33" pos:end="339:62"><name pos:start="337:33" pos:end="337:38">av_log</name><argument_list pos:start="337:39" pos:end="339:62">(<argument pos:start="337:40" pos:end="337:44"><expr pos:start="337:40" pos:end="337:44"><name pos:start="337:40" pos:end="337:44">avctx</name></expr></argument>, <argument pos:start="337:47" pos:end="337:58"><expr pos:start="337:47" pos:end="337:58"><name pos:start="337:47" pos:end="337:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="337:61" pos:end="337:99"><expr pos:start="337:61" pos:end="337:99"><literal type="string" pos:start="337:61" pos:end="337:99">"pixel_countdown &lt; 0 (%d) at line %d\n"</literal></expr></argument>,

                                       <argument pos:start="339:40" pos:end="339:54"><expr pos:start="339:40" pos:end="339:54"><name pos:start="339:40" pos:end="339:54">pixel_countdown</name></expr></argument>, <argument pos:start="339:57" pos:end="339:61"><expr pos:start="339:57" pos:end="339:61"><name pos:start="339:57" pos:end="339:61">lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></while>



                <comment type="block" pos:start="349:17" pos:end="357:19">/* Now FLX is strange, in that it is "byte" as opposed to "pixel" run length compressed.

                 * This does not give us any good opportunity to perform word endian conversion

                 * during decompression. So if it is required (i.e., this is not a LE target, we do

                 * a second pass over the line here, swapping the bytes.

                 */</comment>

<cpp:if pos:start="359:1" pos:end="359:18">#<cpp:directive pos:start="359:2" pos:end="359:3">if</cpp:directive> <expr pos:start="359:5" pos:end="359:18"><name pos:start="359:5" pos:end="359:18">HAVE_BIGENDIAN</name></expr></cpp:if>

                <expr_stmt pos:start="361:17" pos:end="361:34"><expr pos:start="361:17" pos:end="361:33"><name pos:start="361:17" pos:end="361:25">pixel_ptr</name> <operator pos:start="361:27" pos:end="361:27">=</operator> <name pos:start="361:29" pos:end="361:33">y_ptr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:50"><expr pos:start="363:17" pos:end="363:49"><name pos:start="363:17" pos:end="363:31">pixel_countdown</name> <operator pos:start="363:33" pos:end="363:33">=</operator> <name pos:start="363:35" pos:end="363:49"><name pos:start="363:35" pos:end="363:35">s</name><operator pos:start="363:36" pos:end="363:37">-&gt;</operator><name pos:start="363:38" pos:end="363:42">avctx</name><operator pos:start="363:43" pos:end="363:44">-&gt;</operator><name pos:start="363:45" pos:end="363:49">width</name></name></expr>;</expr_stmt>

                <while pos:start="365:17" pos:end="374:0">while <condition pos:start="365:23" pos:end="365:43">(<expr pos:start="365:24" pos:end="365:42"><name pos:start="365:24" pos:end="365:38">pixel_countdown</name> <operator pos:start="365:40" pos:end="365:40">&gt;</operator> <literal type="number" pos:start="365:42" pos:end="365:42">0</literal></expr>)</condition> <block pos:start="365:45" pos:end="374:0">{<block_content pos:start="367:21" pos:end="369:35">

                    <expr_stmt pos:start="367:21" pos:end="367:86"><expr pos:start="367:21" pos:end="367:85"><operator pos:start="367:21" pos:end="367:21">*</operator><operator pos:start="367:22" pos:end="367:22">(</operator><operator pos:start="367:23" pos:end="367:23">(</operator><name pos:start="367:24" pos:end="367:29">signed</name> <name pos:start="367:31" pos:end="367:35">short</name><operator pos:start="367:36" pos:end="367:36">*</operator><operator pos:start="367:37" pos:end="367:37">)</operator><operator pos:start="367:38" pos:end="367:38">(</operator><operator pos:start="367:39" pos:end="367:39">&amp;</operator><name pos:start="367:40" pos:end="367:56"><name pos:start="367:40" pos:end="367:45">pixels</name><index pos:start="367:46" pos:end="367:56">[<expr pos:start="367:47" pos:end="367:55"><name pos:start="367:47" pos:end="367:55">pixel_ptr</name></expr>]</index></name><operator pos:start="367:57" pos:end="367:57">)</operator><operator pos:start="367:58" pos:end="367:58">)</operator> <operator pos:start="367:60" pos:end="367:60">=</operator> <call pos:start="367:62" pos:end="367:85"><name pos:start="367:62" pos:end="367:68">AV_RL16</name><argument_list pos:start="367:69" pos:end="367:85">(<argument pos:start="367:70" pos:end="367:84"><expr pos:start="367:70" pos:end="367:84"><operator pos:start="367:70" pos:end="367:70">&amp;</operator><name pos:start="367:71" pos:end="367:84"><name pos:start="367:71" pos:end="367:73">buf</name><index pos:start="367:74" pos:end="367:84">[<expr pos:start="367:75" pos:end="367:83"><name pos:start="367:75" pos:end="367:83">pixel_ptr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:35"><expr pos:start="369:21" pos:end="369:34"><name pos:start="369:21" pos:end="369:29">pixel_ptr</name> <operator pos:start="369:31" pos:end="369:32">+=</operator> <literal type="number" pos:start="369:34" pos:end="369:34">2</literal></expr>;</expr_stmt>

                </block_content>}</block></while>

<cpp:endif pos:start="373:1" pos:end="373:6">#<cpp:directive pos:start="373:2" pos:end="373:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="375:17" pos:end="375:47"><expr pos:start="375:17" pos:end="375:46"><name pos:start="375:17" pos:end="375:21">y_ptr</name> <operator pos:start="375:23" pos:end="375:24">+=</operator> <name pos:start="375:26" pos:end="375:46"><name pos:start="375:26" pos:end="375:26">s</name><operator pos:start="375:27" pos:end="375:28">-&gt;</operator><name pos:start="375:29" pos:end="375:33">frame</name><operator pos:start="375:34" pos:end="375:35">-&gt;</operator><name pos:start="375:36" pos:end="375:43">linesize</name><index pos:start="375:44" pos:end="375:46">[<expr pos:start="375:45" pos:end="375:45"><literal type="number" pos:start="375:45" pos:end="375:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="379:13" pos:end="379:18">break;</break>



        <case pos:start="383:9" pos:end="383:26">case <expr pos:start="383:14" pos:end="383:25"><name pos:start="383:14" pos:end="383:25">FLI_DTA_BRUN</name></expr>:</case>

            <expr_stmt pos:start="385:13" pos:end="385:22"><expr pos:start="385:13" pos:end="385:21"><name pos:start="385:13" pos:end="385:17">y_ptr</name> <operator pos:start="385:19" pos:end="385:19">=</operator> <literal type="number" pos:start="385:21" pos:end="385:21">0</literal></expr>;</expr_stmt>

            <for pos:start="387:13" pos:end="465:13">for <control pos:start="387:17" pos:end="387:62">(<init pos:start="387:18" pos:end="387:27"><expr pos:start="387:18" pos:end="387:26"><name pos:start="387:18" pos:end="387:22">lines</name> <operator pos:start="387:24" pos:end="387:24">=</operator> <literal type="number" pos:start="387:26" pos:end="387:26">0</literal></expr>;</init> <condition pos:start="387:29" pos:end="387:53"><expr pos:start="387:29" pos:end="387:52"><name pos:start="387:29" pos:end="387:33">lines</name> <operator pos:start="387:35" pos:end="387:35">&lt;</operator> <name pos:start="387:37" pos:end="387:52"><name pos:start="387:37" pos:end="387:37">s</name><operator pos:start="387:38" pos:end="387:39">-&gt;</operator><name pos:start="387:40" pos:end="387:44">avctx</name><operator pos:start="387:45" pos:end="387:46">-&gt;</operator><name pos:start="387:47" pos:end="387:52">height</name></name></expr>;</condition> <incr pos:start="387:55" pos:end="387:61"><expr pos:start="387:55" pos:end="387:61"><name pos:start="387:55" pos:end="387:59">lines</name><operator pos:start="387:60" pos:end="387:61">++</operator></expr></incr>)</control> <block pos:start="387:64" pos:end="465:13">{<block_content pos:start="389:17" pos:end="463:47">

                <expr_stmt pos:start="389:17" pos:end="389:34"><expr pos:start="389:17" pos:end="389:33"><name pos:start="389:17" pos:end="389:25">pixel_ptr</name> <operator pos:start="389:27" pos:end="389:27">=</operator> <name pos:start="389:29" pos:end="389:33">y_ptr</name></expr>;</expr_stmt>

                <comment type="block" pos:start="391:17" pos:end="393:37">/* disregard the line packets; instead, iterate through all

                 * pixels on a row */</comment>

                <expr_stmt pos:start="395:17" pos:end="395:41"><expr pos:start="395:17" pos:end="395:40"><call pos:start="395:17" pos:end="395:40"><name pos:start="395:17" pos:end="395:32">bytestream2_skip</name><argument_list pos:start="395:33" pos:end="395:40">(<argument pos:start="395:34" pos:end="395:36"><expr pos:start="395:34" pos:end="395:36"><operator pos:start="395:34" pos:end="395:34">&amp;</operator><name pos:start="395:35" pos:end="395:36">g2</name></expr></argument>, <argument pos:start="395:39" pos:end="395:39"><expr pos:start="395:39" pos:end="395:39"><literal type="number" pos:start="395:39" pos:end="395:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="397:17" pos:end="397:50"><expr pos:start="397:17" pos:end="397:49"><name pos:start="397:17" pos:end="397:31">pixel_countdown</name> <operator pos:start="397:33" pos:end="397:33">=</operator> <name pos:start="397:35" pos:end="397:49"><name pos:start="397:35" pos:end="397:35">s</name><operator pos:start="397:36" pos:end="397:37">-&gt;</operator><name pos:start="397:38" pos:end="397:42">avctx</name><operator pos:start="397:43" pos:end="397:44">-&gt;</operator><name pos:start="397:45" pos:end="397:49">width</name></name></expr>;</expr_stmt> <comment type="block" pos:start="397:52" pos:end="397:86">/* Width is in pixels, not bytes */</comment>



                <while pos:start="401:17" pos:end="459:17">while <condition pos:start="401:23" pos:end="401:43">(<expr pos:start="401:24" pos:end="401:42"><name pos:start="401:24" pos:end="401:38">pixel_countdown</name> <operator pos:start="401:40" pos:end="401:40">&gt;</operator> <literal type="number" pos:start="401:42" pos:end="401:42">0</literal></expr>)</condition> <block pos:start="401:45" pos:end="459:17">{<block_content pos:start="403:21" pos:end="457:21">

                    <if_stmt pos:start="403:21" pos:end="405:30"><if pos:start="403:21" pos:end="405:30">if <condition pos:start="403:24" pos:end="403:75">(<expr pos:start="403:25" pos:end="403:74"><call pos:start="403:25" pos:end="403:45"><name pos:start="403:25" pos:end="403:40">bytestream2_tell</name><argument_list pos:start="403:41" pos:end="403:45">(<argument pos:start="403:42" pos:end="403:44"><expr pos:start="403:42" pos:end="403:44"><operator pos:start="403:42" pos:end="403:42">&amp;</operator><name pos:start="403:43" pos:end="403:44">g2</name></expr></argument>)</argument_list></call> <operator pos:start="403:47" pos:end="403:47">+</operator> <literal type="number" pos:start="403:49" pos:end="403:49">1</literal> <operator pos:start="403:51" pos:end="403:51">&gt;</operator> <name pos:start="403:53" pos:end="403:74">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="405:25" pos:end="405:30"><block_content pos:start="405:25" pos:end="405:30">

                        <break pos:start="405:25" pos:end="405:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="407:21" pos:end="407:73"><expr pos:start="407:21" pos:end="407:72"><name pos:start="407:21" pos:end="407:28">byte_run</name> <operator pos:start="407:30" pos:end="407:30">=</operator> <call pos:start="407:32" pos:end="407:72"><name pos:start="407:32" pos:end="407:42">sign_extend</name><argument_list pos:start="407:43" pos:end="407:72">(<argument pos:start="407:44" pos:end="407:68"><expr pos:start="407:44" pos:end="407:68"><call pos:start="407:44" pos:end="407:68"><name pos:start="407:44" pos:end="407:63">bytestream2_get_byte</name><argument_list pos:start="407:64" pos:end="407:68">(<argument pos:start="407:65" pos:end="407:67"><expr pos:start="407:65" pos:end="407:67"><operator pos:start="407:65" pos:end="407:65">&amp;</operator><name pos:start="407:66" pos:end="407:67">g2</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="407:71" pos:end="407:71"><expr pos:start="407:71" pos:end="407:71"><literal type="number" pos:start="407:71" pos:end="407:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="409:21" pos:end="457:21"><if pos:start="409:21" pos:end="431:21">if <condition pos:start="409:24" pos:end="409:37">(<expr pos:start="409:25" pos:end="409:36"><name pos:start="409:25" pos:end="409:32">byte_run</name> <operator pos:start="409:34" pos:end="409:34">&gt;</operator> <literal type="number" pos:start="409:36" pos:end="409:36">0</literal></expr>)</condition> <block pos:start="409:39" pos:end="431:21">{<block_content pos:start="411:25" pos:end="429:25">

                        <expr_stmt pos:start="411:25" pos:end="411:61"><expr pos:start="411:25" pos:end="411:60"><name pos:start="411:25" pos:end="411:29">pixel</name>    <operator pos:start="411:34" pos:end="411:34">=</operator> <call pos:start="411:36" pos:end="411:60"><name pos:start="411:36" pos:end="411:55">bytestream2_get_le16</name><argument_list pos:start="411:56" pos:end="411:60">(<argument pos:start="411:57" pos:end="411:59"><expr pos:start="411:57" pos:end="411:59"><operator pos:start="411:57" pos:end="411:57">&amp;</operator><name pos:start="411:58" pos:end="411:59">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="413:25" pos:end="413:54"><expr pos:start="413:25" pos:end="413:53"><call pos:start="413:25" pos:end="413:53"><name pos:start="413:25" pos:end="413:39">CHECK_PIXEL_PTR</name><argument_list pos:start="413:40" pos:end="413:53">(<argument pos:start="413:41" pos:end="413:52"><expr pos:start="413:41" pos:end="413:52"><literal type="number" pos:start="413:41" pos:end="413:41">2</literal> <operator pos:start="413:43" pos:end="413:43">*</operator> <name pos:start="413:45" pos:end="413:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="415:25" pos:end="429:25">for <control pos:start="415:29" pos:end="415:54">(<init pos:start="415:30" pos:end="415:35"><expr pos:start="415:30" pos:end="415:34"><name pos:start="415:30" pos:end="415:30">j</name> <operator pos:start="415:32" pos:end="415:32">=</operator> <literal type="number" pos:start="415:34" pos:end="415:34">0</literal></expr>;</init> <condition pos:start="415:37" pos:end="415:49"><expr pos:start="415:37" pos:end="415:48"><name pos:start="415:37" pos:end="415:37">j</name> <operator pos:start="415:39" pos:end="415:39">&lt;</operator> <name pos:start="415:41" pos:end="415:48">byte_run</name></expr>;</condition> <incr pos:start="415:51" pos:end="415:53"><expr pos:start="415:51" pos:end="415:53"><name pos:start="415:51" pos:end="415:51">j</name><operator pos:start="415:52" pos:end="415:53">++</operator></expr></incr>)</control> <block pos:start="415:56" pos:end="429:25">{<block_content pos:start="417:29" pos:end="427:56">

                            <expr_stmt pos:start="417:29" pos:end="417:75"><expr pos:start="417:29" pos:end="417:74"><operator pos:start="417:29" pos:end="417:29">*</operator><operator pos:start="417:30" pos:end="417:30">(</operator><operator pos:start="417:31" pos:end="417:31">(</operator><name pos:start="417:32" pos:end="417:37">signed</name> <name pos:start="417:39" pos:end="417:43">short</name><operator pos:start="417:44" pos:end="417:44">*</operator><operator pos:start="417:45" pos:end="417:45">)</operator><operator pos:start="417:46" pos:end="417:46">(</operator><operator pos:start="417:47" pos:end="417:47">&amp;</operator><name pos:start="417:48" pos:end="417:64"><name pos:start="417:48" pos:end="417:53">pixels</name><index pos:start="417:54" pos:end="417:64">[<expr pos:start="417:55" pos:end="417:63"><name pos:start="417:55" pos:end="417:63">pixel_ptr</name></expr>]</index></name><operator pos:start="417:65" pos:end="417:65">)</operator><operator pos:start="417:66" pos:end="417:66">)</operator> <operator pos:start="417:68" pos:end="417:68">=</operator> <name pos:start="417:70" pos:end="417:74">pixel</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="419:29" pos:end="419:43"><expr pos:start="419:29" pos:end="419:42"><name pos:start="419:29" pos:end="419:37">pixel_ptr</name> <operator pos:start="419:39" pos:end="419:40">+=</operator> <literal type="number" pos:start="419:42" pos:end="419:42">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="421:29" pos:end="421:46"><expr pos:start="421:29" pos:end="421:45"><name pos:start="421:29" pos:end="421:43">pixel_countdown</name><operator pos:start="421:44" pos:end="421:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="423:29" pos:end="427:56"><if pos:start="423:29" pos:end="427:56">if <condition pos:start="423:32" pos:end="423:52">(<expr pos:start="423:33" pos:end="423:51"><name pos:start="423:33" pos:end="423:47">pixel_countdown</name> <operator pos:start="423:49" pos:end="423:49">&lt;</operator> <literal type="number" pos:start="423:51" pos:end="423:51">0</literal></expr>)</condition><block type="pseudo" pos:start="425:33" pos:end="427:56"><block_content pos:start="425:33" pos:end="427:56">

                                <expr_stmt pos:start="425:33" pos:end="427:56"><expr pos:start="425:33" pos:end="427:55"><call pos:start="425:33" pos:end="427:55"><name pos:start="425:33" pos:end="425:38">av_log</name><argument_list pos:start="425:39" pos:end="427:55">(<argument pos:start="425:40" pos:end="425:44"><expr pos:start="425:40" pos:end="425:44"><name pos:start="425:40" pos:end="425:44">avctx</name></expr></argument>, <argument pos:start="425:47" pos:end="425:58"><expr pos:start="425:47" pos:end="425:58"><name pos:start="425:47" pos:end="425:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="425:61" pos:end="425:88"><expr pos:start="425:61" pos:end="425:88"><literal type="string" pos:start="425:61" pos:end="425:88">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

                                       <argument pos:start="427:40" pos:end="427:54"><expr pos:start="427:40" pos:end="427:54"><name pos:start="427:40" pos:end="427:54">pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="431:23" pos:end="457:21">else <block pos:start="431:28" pos:end="457:21">{<block_content pos:start="433:25" pos:end="455:25">  <comment type="block" pos:start="431:31" pos:end="431:63">/* copy pixels if byte_run &lt; 0 */</comment>

                        <expr_stmt pos:start="433:25" pos:end="433:45"><expr pos:start="433:25" pos:end="433:44"><name pos:start="433:25" pos:end="433:32">byte_run</name> <operator pos:start="433:34" pos:end="433:34">=</operator> <operator pos:start="433:36" pos:end="433:36">-</operator><name pos:start="433:37" pos:end="433:44">byte_run</name></expr>;</expr_stmt>

                        <if_stmt pos:start="435:25" pos:end="437:34"><if pos:start="435:25" pos:end="437:34">if <condition pos:start="435:28" pos:end="435:90">(<expr pos:start="435:29" pos:end="435:89"><call pos:start="435:29" pos:end="435:49"><name pos:start="435:29" pos:end="435:44">bytestream2_tell</name><argument_list pos:start="435:45" pos:end="435:49">(<argument pos:start="435:46" pos:end="435:48"><expr pos:start="435:46" pos:end="435:48"><operator pos:start="435:46" pos:end="435:46">&amp;</operator><name pos:start="435:47" pos:end="435:48">g2</name></expr></argument>)</argument_list></call> <operator pos:start="435:51" pos:end="435:51">+</operator> <literal type="number" pos:start="435:53" pos:end="435:53">2</literal> <operator pos:start="435:55" pos:end="435:55">*</operator> <name pos:start="435:57" pos:end="435:64">byte_run</name> <operator pos:start="435:66" pos:end="435:66">&gt;</operator> <name pos:start="435:68" pos:end="435:89">stream_ptr_after_chunk</name></expr>)</condition><block type="pseudo" pos:start="437:29" pos:end="437:34"><block_content pos:start="437:29" pos:end="437:34">

                            <break pos:start="437:29" pos:end="437:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="439:25" pos:end="439:54"><expr pos:start="439:25" pos:end="439:53"><call pos:start="439:25" pos:end="439:53"><name pos:start="439:25" pos:end="439:39">CHECK_PIXEL_PTR</name><argument_list pos:start="439:40" pos:end="439:53">(<argument pos:start="439:41" pos:end="439:52"><expr pos:start="439:41" pos:end="439:52"><literal type="number" pos:start="439:41" pos:end="439:41">2</literal> <operator pos:start="439:43" pos:end="439:43">*</operator> <name pos:start="439:45" pos:end="439:52">byte_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="441:25" pos:end="455:25">for <control pos:start="441:29" pos:end="441:54">(<init pos:start="441:30" pos:end="441:35"><expr pos:start="441:30" pos:end="441:34"><name pos:start="441:30" pos:end="441:30">j</name> <operator pos:start="441:32" pos:end="441:32">=</operator> <literal type="number" pos:start="441:34" pos:end="441:34">0</literal></expr>;</init> <condition pos:start="441:37" pos:end="441:49"><expr pos:start="441:37" pos:end="441:48"><name pos:start="441:37" pos:end="441:37">j</name> <operator pos:start="441:39" pos:end="441:39">&lt;</operator> <name pos:start="441:41" pos:end="441:48">byte_run</name></expr>;</condition> <incr pos:start="441:51" pos:end="441:53"><expr pos:start="441:51" pos:end="441:53"><name pos:start="441:51" pos:end="441:51">j</name><operator pos:start="441:52" pos:end="441:53">++</operator></expr></incr>)</control> <block pos:start="441:56" pos:end="455:25">{<block_content pos:start="443:29" pos:end="453:56">

                            <expr_stmt pos:start="443:29" pos:end="443:95"><expr pos:start="443:29" pos:end="443:94"><operator pos:start="443:29" pos:end="443:29">*</operator><operator pos:start="443:30" pos:end="443:30">(</operator><operator pos:start="443:31" pos:end="443:31">(</operator><name pos:start="443:32" pos:end="443:37">signed</name> <name pos:start="443:39" pos:end="443:43">short</name><operator pos:start="443:44" pos:end="443:44">*</operator><operator pos:start="443:45" pos:end="443:45">)</operator><operator pos:start="443:46" pos:end="443:46">(</operator><operator pos:start="443:47" pos:end="443:47">&amp;</operator><name pos:start="443:48" pos:end="443:64"><name pos:start="443:48" pos:end="443:53">pixels</name><index pos:start="443:54" pos:end="443:64">[<expr pos:start="443:55" pos:end="443:63"><name pos:start="443:55" pos:end="443:63">pixel_ptr</name></expr>]</index></name><operator pos:start="443:65" pos:end="443:65">)</operator><operator pos:start="443:66" pos:end="443:66">)</operator> <operator pos:start="443:68" pos:end="443:68">=</operator> <call pos:start="443:70" pos:end="443:94"><name pos:start="443:70" pos:end="443:89">bytestream2_get_le16</name><argument_list pos:start="443:90" pos:end="443:94">(<argument pos:start="443:91" pos:end="443:93"><expr pos:start="443:91" pos:end="443:93"><operator pos:start="443:91" pos:end="443:91">&amp;</operator><name pos:start="443:92" pos:end="443:93">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="445:29" pos:end="445:44"><expr pos:start="445:29" pos:end="445:43"><name pos:start="445:29" pos:end="445:37">pixel_ptr</name>  <operator pos:start="445:40" pos:end="445:41">+=</operator> <literal type="number" pos:start="445:43" pos:end="445:43">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="447:29" pos:end="447:46"><expr pos:start="447:29" pos:end="447:45"><name pos:start="447:29" pos:end="447:43">pixel_countdown</name><operator pos:start="447:44" pos:end="447:45">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="449:29" pos:end="453:56"><if pos:start="449:29" pos:end="453:56">if <condition pos:start="449:32" pos:end="449:52">(<expr pos:start="449:33" pos:end="449:51"><name pos:start="449:33" pos:end="449:47">pixel_countdown</name> <operator pos:start="449:49" pos:end="449:49">&lt;</operator> <literal type="number" pos:start="449:51" pos:end="449:51">0</literal></expr>)</condition><block type="pseudo" pos:start="451:33" pos:end="453:56"><block_content pos:start="451:33" pos:end="453:56">

                                <expr_stmt pos:start="451:33" pos:end="453:56"><expr pos:start="451:33" pos:end="453:55"><call pos:start="451:33" pos:end="453:55"><name pos:start="451:33" pos:end="451:38">av_log</name><argument_list pos:start="451:39" pos:end="453:55">(<argument pos:start="451:40" pos:end="451:44"><expr pos:start="451:40" pos:end="451:44"><name pos:start="451:40" pos:end="451:44">avctx</name></expr></argument>, <argument pos:start="451:47" pos:end="451:58"><expr pos:start="451:47" pos:end="451:58"><name pos:start="451:47" pos:end="451:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="451:61" pos:end="451:88"><expr pos:start="451:61" pos:end="451:88"><literal type="string" pos:start="451:61" pos:end="451:88">"pixel_countdown &lt; 0 (%d)\n"</literal></expr></argument>,

                                       <argument pos:start="453:40" pos:end="453:54"><expr pos:start="453:40" pos:end="453:54"><name pos:start="453:40" pos:end="453:54">pixel_countdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></while>



                <expr_stmt pos:start="463:17" pos:end="463:47"><expr pos:start="463:17" pos:end="463:46"><name pos:start="463:17" pos:end="463:21">y_ptr</name> <operator pos:start="463:23" pos:end="463:24">+=</operator> <name pos:start="463:26" pos:end="463:46"><name pos:start="463:26" pos:end="463:26">s</name><operator pos:start="463:27" pos:end="463:28">-&gt;</operator><name pos:start="463:29" pos:end="463:33">frame</name><operator pos:start="463:34" pos:end="463:35">-&gt;</operator><name pos:start="463:36" pos:end="463:43">linesize</name><index pos:start="463:44" pos:end="463:46">[<expr pos:start="463:45" pos:end="463:45"><literal type="number" pos:start="463:45" pos:end="463:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="467:13" pos:end="467:18">break;</break>



        <case pos:start="471:9" pos:end="471:22">case <expr pos:start="471:14" pos:end="471:21"><name pos:start="471:14" pos:end="471:21">FLI_COPY</name></expr>:</case>

        <case pos:start="473:9" pos:end="473:26">case <expr pos:start="473:14" pos:end="473:25"><name pos:start="473:14" pos:end="473:25">FLI_DTA_COPY</name></expr>:</case>

            <comment type="block" pos:start="475:13" pos:end="475:53">/* copy the chunk (uncompressed frame) */</comment>

            <if_stmt pos:start="477:13" pos:end="515:13"><if pos:start="477:13" pos:end="485:13">if <condition pos:start="477:16" pos:end="477:98">(<expr pos:start="477:17" pos:end="477:97"><name pos:start="477:17" pos:end="477:26">chunk_size</name> <operator pos:start="477:28" pos:end="477:28">-</operator> <literal type="number" pos:start="477:30" pos:end="477:30">6</literal> <operator pos:start="477:32" pos:end="477:32">&gt;</operator> <operator pos:start="477:34" pos:end="477:34">(</operator><name pos:start="477:35" pos:end="477:42">unsigned</name> <name pos:start="477:44" pos:end="477:46">int</name><operator pos:start="477:47" pos:end="477:47">)</operator><operator pos:start="477:48" pos:end="477:48">(</operator><call pos:start="477:49" pos:end="477:75"><name pos:start="477:49" pos:end="477:55">FFALIGN</name><argument_list pos:start="477:56" pos:end="477:75">(<argument pos:start="477:57" pos:end="477:71"><expr pos:start="477:57" pos:end="477:71"><name pos:start="477:57" pos:end="477:71"><name pos:start="477:57" pos:end="477:57">s</name><operator pos:start="477:58" pos:end="477:59">-&gt;</operator><name pos:start="477:60" pos:end="477:64">avctx</name><operator pos:start="477:65" pos:end="477:66">-&gt;</operator><name pos:start="477:67" pos:end="477:71">width</name></name></expr></argument>, <argument pos:start="477:74" pos:end="477:74"><expr pos:start="477:74" pos:end="477:74"><literal type="number" pos:start="477:74" pos:end="477:74">2</literal></expr></argument>)</argument_list></call> <operator pos:start="477:77" pos:end="477:77">*</operator> <name pos:start="477:79" pos:end="477:94"><name pos:start="477:79" pos:end="477:79">s</name><operator pos:start="477:80" pos:end="477:81">-&gt;</operator><name pos:start="477:82" pos:end="477:86">avctx</name><operator pos:start="477:87" pos:end="477:88">-&gt;</operator><name pos:start="477:89" pos:end="477:94">height</name></name><operator pos:start="477:95" pos:end="477:95">)</operator><operator pos:start="477:96" pos:end="477:96">*</operator><literal type="number" pos:start="477:97" pos:end="477:97">2</literal></expr>)</condition> <block pos:start="477:100" pos:end="485:13">{<block_content pos:start="479:17" pos:end="483:54">

                <expr_stmt pos:start="479:17" pos:end="481:78"><expr pos:start="479:17" pos:end="481:77"><call pos:start="479:17" pos:end="481:77"><name pos:start="479:17" pos:end="479:22">av_log</name><argument_list pos:start="479:23" pos:end="481:77">(<argument pos:start="479:24" pos:end="479:28"><expr pos:start="479:24" pos:end="479:28"><name pos:start="479:24" pos:end="479:28">avctx</name></expr></argument>, <argument pos:start="479:31" pos:end="479:42"><expr pos:start="479:31" pos:end="479:42"><name pos:start="479:31" pos:end="479:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="479:45" pos:end="481:60"><expr pos:start="479:45" pos:end="481:60"><literal type="string" pos:start="479:45" pos:end="479:89">"In chunk FLI_COPY : source data (%d bytes) "</literal> \

                       <literal type="string" pos:start="481:24" pos:end="481:60">"bigger than image, skipping chunk\n"</literal></expr></argument>, <argument pos:start="481:63" pos:end="481:76"><expr pos:start="481:63" pos:end="481:76"><name pos:start="481:63" pos:end="481:72">chunk_size</name> <operator pos:start="481:74" pos:end="481:74">-</operator> <literal type="number" pos:start="481:76" pos:end="481:76">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="483:17" pos:end="483:54"><expr pos:start="483:17" pos:end="483:53"><call pos:start="483:17" pos:end="483:53"><name pos:start="483:17" pos:end="483:32">bytestream2_skip</name><argument_list pos:start="483:33" pos:end="483:53">(<argument pos:start="483:34" pos:end="483:36"><expr pos:start="483:34" pos:end="483:36"><operator pos:start="483:34" pos:end="483:34">&amp;</operator><name pos:start="483:35" pos:end="483:36">g2</name></expr></argument>, <argument pos:start="483:39" pos:end="483:52"><expr pos:start="483:39" pos:end="483:52"><name pos:start="483:39" pos:end="483:48">chunk_size</name> <operator pos:start="483:50" pos:end="483:50">-</operator> <literal type="number" pos:start="483:52" pos:end="483:52">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="485:15" pos:end="515:13">else <block pos:start="485:20" pos:end="515:13">{<block_content pos:start="489:17" pos:end="513:17">



                <for pos:start="489:17" pos:end="513:17">for <control pos:start="489:21" pos:end="491:52">(<init pos:start="489:22" pos:end="489:31"><expr pos:start="489:22" pos:end="489:30"><name pos:start="489:22" pos:end="489:26">y_ptr</name> <operator pos:start="489:28" pos:end="489:28">=</operator> <literal type="number" pos:start="489:30" pos:end="489:30">0</literal></expr>;</init> <condition pos:start="489:33" pos:end="489:81"><expr pos:start="489:33" pos:end="489:80"><name pos:start="489:33" pos:end="489:37">y_ptr</name> <operator pos:start="489:39" pos:end="489:39">&lt;</operator> <name pos:start="489:41" pos:end="489:61"><name pos:start="489:41" pos:end="489:41">s</name><operator pos:start="489:42" pos:end="489:43">-&gt;</operator><name pos:start="489:44" pos:end="489:48">frame</name><operator pos:start="489:49" pos:end="489:50">-&gt;</operator><name pos:start="489:51" pos:end="489:58">linesize</name><index pos:start="489:59" pos:end="489:61">[<expr pos:start="489:60" pos:end="489:60"><literal type="number" pos:start="489:60" pos:end="489:60">0</literal></expr>]</index></name> <operator pos:start="489:63" pos:end="489:63">*</operator> <name pos:start="489:65" pos:end="489:80"><name pos:start="489:65" pos:end="489:65">s</name><operator pos:start="489:66" pos:end="489:67">-&gt;</operator><name pos:start="489:68" pos:end="489:72">avctx</name><operator pos:start="489:73" pos:end="489:74">-&gt;</operator><name pos:start="489:75" pos:end="489:80">height</name></name></expr>;</condition>

                     <incr pos:start="491:22" pos:end="491:51"><expr pos:start="491:22" pos:end="491:51"><name pos:start="491:22" pos:end="491:26">y_ptr</name> <operator pos:start="491:28" pos:end="491:29">+=</operator> <name pos:start="491:31" pos:end="491:51"><name pos:start="491:31" pos:end="491:31">s</name><operator pos:start="491:32" pos:end="491:33">-&gt;</operator><name pos:start="491:34" pos:end="491:38">frame</name><operator pos:start="491:39" pos:end="491:40">-&gt;</operator><name pos:start="491:41" pos:end="491:48">linesize</name><index pos:start="491:49" pos:end="491:51">[<expr pos:start="491:50" pos:end="491:50"><literal type="number" pos:start="491:50" pos:end="491:50">0</literal></expr>]</index></name></expr></incr>)</control> <block pos:start="491:54" pos:end="513:17">{<block_content pos:start="495:21" pos:end="511:49">



                    <expr_stmt pos:start="495:21" pos:end="495:54"><expr pos:start="495:21" pos:end="495:53"><name pos:start="495:21" pos:end="495:35">pixel_countdown</name> <operator pos:start="495:37" pos:end="495:37">=</operator> <name pos:start="495:39" pos:end="495:53"><name pos:start="495:39" pos:end="495:39">s</name><operator pos:start="495:40" pos:end="495:41">-&gt;</operator><name pos:start="495:42" pos:end="495:46">avctx</name><operator pos:start="495:47" pos:end="495:48">-&gt;</operator><name pos:start="495:49" pos:end="495:53">width</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="497:21" pos:end="497:34"><expr pos:start="497:21" pos:end="497:33"><name pos:start="497:21" pos:end="497:29">pixel_ptr</name> <operator pos:start="497:31" pos:end="497:31">=</operator> <literal type="number" pos:start="497:33" pos:end="497:33">0</literal></expr>;</expr_stmt>

                    <while pos:start="499:21" pos:end="507:21">while <condition pos:start="499:27" pos:end="499:47">(<expr pos:start="499:28" pos:end="499:46"><name pos:start="499:28" pos:end="499:42">pixel_countdown</name> <operator pos:start="499:44" pos:end="499:44">&gt;</operator> <literal type="number" pos:start="499:46" pos:end="499:46">0</literal></expr>)</condition> <block pos:start="499:49" pos:end="507:21">{<block_content pos:start="501:23" pos:end="505:40">

                      <expr_stmt pos:start="501:23" pos:end="501:97"><expr pos:start="501:23" pos:end="501:96"><operator pos:start="501:23" pos:end="501:23">*</operator><operator pos:start="501:24" pos:end="501:24">(</operator><operator pos:start="501:25" pos:end="501:25">(</operator><name pos:start="501:26" pos:end="501:31">signed</name> <name pos:start="501:33" pos:end="501:37">short</name><operator pos:start="501:38" pos:end="501:38">*</operator><operator pos:start="501:39" pos:end="501:39">)</operator><operator pos:start="501:40" pos:end="501:40">(</operator><operator pos:start="501:41" pos:end="501:41">&amp;</operator><name pos:start="501:42" pos:end="501:66"><name pos:start="501:42" pos:end="501:47">pixels</name><index pos:start="501:48" pos:end="501:66">[<expr pos:start="501:49" pos:end="501:65"><name pos:start="501:49" pos:end="501:53">y_ptr</name> <operator pos:start="501:55" pos:end="501:55">+</operator> <name pos:start="501:57" pos:end="501:65">pixel_ptr</name></expr>]</index></name><operator pos:start="501:67" pos:end="501:67">)</operator><operator pos:start="501:68" pos:end="501:68">)</operator> <operator pos:start="501:70" pos:end="501:70">=</operator> <call pos:start="501:72" pos:end="501:96"><name pos:start="501:72" pos:end="501:91">bytestream2_get_le16</name><argument_list pos:start="501:92" pos:end="501:96">(<argument pos:start="501:93" pos:end="501:95"><expr pos:start="501:93" pos:end="501:95"><operator pos:start="501:93" pos:end="501:93">&amp;</operator><name pos:start="501:94" pos:end="501:95">g2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                      <expr_stmt pos:start="503:23" pos:end="503:37"><expr pos:start="503:23" pos:end="503:36"><name pos:start="503:23" pos:end="503:31">pixel_ptr</name> <operator pos:start="503:33" pos:end="503:34">+=</operator> <literal type="number" pos:start="503:36" pos:end="503:36">2</literal></expr>;</expr_stmt>

                      <expr_stmt pos:start="505:23" pos:end="505:40"><expr pos:start="505:23" pos:end="505:39"><name pos:start="505:23" pos:end="505:37">pixel_countdown</name><operator pos:start="505:38" pos:end="505:39">--</operator></expr>;</expr_stmt>

                    </block_content>}</block></while>

                    <if_stmt pos:start="509:21" pos:end="511:49"><if pos:start="509:21" pos:end="511:49">if <condition pos:start="509:24" pos:end="509:44">(<expr pos:start="509:25" pos:end="509:43"><name pos:start="509:25" pos:end="509:39"><name pos:start="509:25" pos:end="509:25">s</name><operator pos:start="509:26" pos:end="509:27">-&gt;</operator><name pos:start="509:28" pos:end="509:32">avctx</name><operator pos:start="509:33" pos:end="509:34">-&gt;</operator><name pos:start="509:35" pos:end="509:39">width</name></name> <operator pos:start="509:41" pos:end="509:41">&amp;</operator> <literal type="number" pos:start="509:43" pos:end="509:43">1</literal></expr>)</condition><block type="pseudo" pos:start="511:25" pos:end="511:49"><block_content pos:start="511:25" pos:end="511:49">

                        <expr_stmt pos:start="511:25" pos:end="511:49"><expr pos:start="511:25" pos:end="511:48"><call pos:start="511:25" pos:end="511:48"><name pos:start="511:25" pos:end="511:40">bytestream2_skip</name><argument_list pos:start="511:41" pos:end="511:48">(<argument pos:start="511:42" pos:end="511:44"><expr pos:start="511:42" pos:end="511:44"><operator pos:start="511:42" pos:end="511:42">&amp;</operator><name pos:start="511:43" pos:end="511:44">g2</name></expr></argument>, <argument pos:start="511:47" pos:end="511:47"><expr pos:start="511:47" pos:end="511:47"><literal type="number" pos:start="511:47" pos:end="511:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="517:13" pos:end="517:18">break;</break>



        <case pos:start="521:9" pos:end="521:22">case <expr pos:start="521:14" pos:end="521:21"><name pos:start="521:14" pos:end="521:21">FLI_MINI</name></expr>:</case>

            <comment type="block" pos:start="523:13" pos:end="523:67">/* some sort of a thumbnail? disregard this chunk... */</comment>

            <expr_stmt pos:start="525:13" pos:end="525:50"><expr pos:start="525:13" pos:end="525:49"><call pos:start="525:13" pos:end="525:49"><name pos:start="525:13" pos:end="525:28">bytestream2_skip</name><argument_list pos:start="525:29" pos:end="525:49">(<argument pos:start="525:30" pos:end="525:32"><expr pos:start="525:30" pos:end="525:32"><operator pos:start="525:30" pos:end="525:30">&amp;</operator><name pos:start="525:31" pos:end="525:32">g2</name></expr></argument>, <argument pos:start="525:35" pos:end="525:48"><expr pos:start="525:35" pos:end="525:48"><name pos:start="525:35" pos:end="525:44">chunk_size</name> <operator pos:start="525:46" pos:end="525:46">-</operator> <literal type="number" pos:start="525:48" pos:end="525:48">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="527:13" pos:end="527:18">break;</break>



        <default pos:start="531:9" pos:end="531:16">default:</default>

            <expr_stmt pos:start="533:13" pos:end="533:85"><expr pos:start="533:13" pos:end="533:84"><call pos:start="533:13" pos:end="533:84"><name pos:start="533:13" pos:end="533:18">av_log</name><argument_list pos:start="533:19" pos:end="533:84">(<argument pos:start="533:20" pos:end="533:24"><expr pos:start="533:20" pos:end="533:24"><name pos:start="533:20" pos:end="533:24">avctx</name></expr></argument>, <argument pos:start="533:27" pos:end="533:38"><expr pos:start="533:27" pos:end="533:38"><name pos:start="533:27" pos:end="533:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="533:41" pos:end="533:71"><expr pos:start="533:41" pos:end="533:71"><literal type="string" pos:start="533:41" pos:end="533:71">"Unrecognized chunk type: %d\n"</literal></expr></argument>, <argument pos:start="533:74" pos:end="533:83"><expr pos:start="533:74" pos:end="533:83"><name pos:start="533:74" pos:end="533:83">chunk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="535:13" pos:end="535:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="541:9" pos:end="551:9"><if pos:start="541:9" pos:end="545:9">if <condition pos:start="541:12" pos:end="541:64">(<expr pos:start="541:13" pos:end="541:63"><name pos:start="541:13" pos:end="541:34">stream_ptr_after_chunk</name> <operator pos:start="541:36" pos:end="541:36">-</operator> <call pos:start="541:38" pos:end="541:58"><name pos:start="541:38" pos:end="541:53">bytestream2_tell</name><argument_list pos:start="541:54" pos:end="541:58">(<argument pos:start="541:55" pos:end="541:57"><expr pos:start="541:55" pos:end="541:57"><operator pos:start="541:55" pos:end="541:55">&amp;</operator><name pos:start="541:56" pos:end="541:57">g2</name></expr></argument>)</argument_list></call> <operator pos:start="541:60" pos:end="541:61">&gt;=</operator> <literal type="number" pos:start="541:63" pos:end="541:63">0</literal></expr>)</condition> <block pos:start="541:66" pos:end="545:9">{<block_content pos:start="543:13" pos:end="543:82">

            <expr_stmt pos:start="543:13" pos:end="543:82"><expr pos:start="543:13" pos:end="543:81"><call pos:start="543:13" pos:end="543:81"><name pos:start="543:13" pos:end="543:28">bytestream2_skip</name><argument_list pos:start="543:29" pos:end="543:81">(<argument pos:start="543:30" pos:end="543:32"><expr pos:start="543:30" pos:end="543:32"><operator pos:start="543:30" pos:end="543:30">&amp;</operator><name pos:start="543:31" pos:end="543:32">g2</name></expr></argument>, <argument pos:start="543:35" pos:end="543:80"><expr pos:start="543:35" pos:end="543:80"><name pos:start="543:35" pos:end="543:56">stream_ptr_after_chunk</name> <operator pos:start="543:58" pos:end="543:58">-</operator> <call pos:start="543:60" pos:end="543:80"><name pos:start="543:60" pos:end="543:75">bytestream2_tell</name><argument_list pos:start="543:76" pos:end="543:80">(<argument pos:start="543:77" pos:end="543:79"><expr pos:start="543:77" pos:end="543:79"><operator pos:start="543:77" pos:end="543:77">&amp;</operator><name pos:start="543:78" pos:end="543:79">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="545:11" pos:end="551:9">else <block pos:start="545:16" pos:end="551:9">{<block_content pos:start="547:13" pos:end="549:18">

            <expr_stmt pos:start="547:13" pos:end="547:60"><expr pos:start="547:13" pos:end="547:59"><call pos:start="547:13" pos:end="547:59"><name pos:start="547:13" pos:end="547:18">av_log</name><argument_list pos:start="547:19" pos:end="547:59">(<argument pos:start="547:20" pos:end="547:24"><expr pos:start="547:20" pos:end="547:24"><name pos:start="547:20" pos:end="547:24">avctx</name></expr></argument>, <argument pos:start="547:27" pos:end="547:38"><expr pos:start="547:27" pos:end="547:38"><name pos:start="547:27" pos:end="547:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="547:41" pos:end="547:58"><expr pos:start="547:41" pos:end="547:58"><literal type="string" pos:start="547:41" pos:end="547:58">"Chunk overread\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="549:13" pos:end="549:18">break;</break>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="555:9" pos:end="555:33"><expr pos:start="555:9" pos:end="555:32"><name pos:start="555:9" pos:end="555:18">frame_size</name> <operator pos:start="555:20" pos:end="555:21">-=</operator> <name pos:start="555:23" pos:end="555:32">chunk_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="557:9" pos:end="557:21"><expr pos:start="557:9" pos:end="557:20"><name pos:start="557:9" pos:end="557:18">num_chunks</name><operator pos:start="557:19" pos:end="557:20">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="563:5" pos:end="565:66">/* by the end of the chunk, the stream ptr should equal the frame

     * size (minus 1, possibly); if it doesn't, issue a warning */</comment>

    <if_stmt pos:start="567:5" pos:end="571:78"><if pos:start="567:5" pos:end="571:78">if <condition pos:start="567:8" pos:end="567:89">(<expr pos:start="567:9" pos:end="567:88"><operator pos:start="567:9" pos:end="567:9">(</operator><call pos:start="567:10" pos:end="567:40"><name pos:start="567:10" pos:end="567:35">bytestream2_get_bytes_left</name><argument_list pos:start="567:36" pos:end="567:40">(<argument pos:start="567:37" pos:end="567:39"><expr pos:start="567:37" pos:end="567:39"><operator pos:start="567:37" pos:end="567:37">&amp;</operator><name pos:start="567:38" pos:end="567:39">g2</name></expr></argument>)</argument_list></call> <operator pos:start="567:42" pos:end="567:43">!=</operator> <literal type="number" pos:start="567:45" pos:end="567:45">0</literal><operator pos:start="567:46" pos:end="567:46">)</operator> <operator pos:start="567:48" pos:end="567:49">&amp;&amp;</operator> <operator pos:start="567:51" pos:end="567:51">(</operator><call pos:start="567:52" pos:end="567:82"><name pos:start="567:52" pos:end="567:77">bytestream2_get_bytes_left</name><argument_list pos:start="567:78" pos:end="567:82">(<argument pos:start="567:79" pos:end="567:81"><expr pos:start="567:79" pos:end="567:81"><operator pos:start="567:79" pos:end="567:79">&amp;</operator><name pos:start="567:80" pos:end="567:81">g2</name></expr></argument>)</argument_list></call> <operator pos:start="567:84" pos:end="567:85">!=</operator> <literal type="number" pos:start="567:87" pos:end="567:87">1</literal><operator pos:start="567:88" pos:end="567:88">)</operator></expr>)</condition><block type="pseudo" pos:start="569:9" pos:end="571:78"><block_content pos:start="569:9" pos:end="571:78">

        <expr_stmt pos:start="569:9" pos:end="571:78"><expr pos:start="569:9" pos:end="571:77"><call pos:start="569:9" pos:end="571:77"><name pos:start="569:9" pos:end="569:14">av_log</name><argument_list pos:start="569:15" pos:end="571:77">(<argument pos:start="569:16" pos:end="569:20"><expr pos:start="569:16" pos:end="569:20"><name pos:start="569:16" pos:end="569:20">avctx</name></expr></argument>, <argument pos:start="569:23" pos:end="569:34"><expr pos:start="569:23" pos:end="569:34"><name pos:start="569:23" pos:end="569:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="569:37" pos:end="571:43"><expr pos:start="569:37" pos:end="571:43"><literal type="string" pos:start="569:37" pos:end="569:80">"Processed FLI chunk where chunk size = %d "</literal> \

               <literal type="string" pos:start="571:16" pos:end="571:43">"and final chunk ptr = %d\n"</literal></expr></argument>, <argument pos:start="571:46" pos:end="571:53"><expr pos:start="571:46" pos:end="571:53"><name pos:start="571:46" pos:end="571:53">buf_size</name></expr></argument>, <argument pos:start="571:56" pos:end="571:76"><expr pos:start="571:56" pos:end="571:76"><call pos:start="571:56" pos:end="571:76"><name pos:start="571:56" pos:end="571:71">bytestream2_tell</name><argument_list pos:start="571:72" pos:end="571:76">(<argument pos:start="571:73" pos:end="571:75"><expr pos:start="571:73" pos:end="571:75"><operator pos:start="571:73" pos:end="571:73">&amp;</operator><name pos:start="571:74" pos:end="571:75">g2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="575:5" pos:end="577:19"><if pos:start="575:5" pos:end="577:19">if <condition pos:start="575:8" pos:end="575:49">(<expr pos:start="575:9" pos:end="575:48"><operator pos:start="575:9" pos:end="575:9">(</operator><name pos:start="575:10" pos:end="575:12">ret</name> <operator pos:start="575:14" pos:end="575:14">=</operator> <call pos:start="575:16" pos:end="575:43"><name pos:start="575:16" pos:end="575:27">av_frame_ref</name><argument_list pos:start="575:28" pos:end="575:43">(<argument pos:start="575:29" pos:end="575:32"><expr pos:start="575:29" pos:end="575:32"><name pos:start="575:29" pos:end="575:32">data</name></expr></argument>, <argument pos:start="575:35" pos:end="575:42"><expr pos:start="575:35" pos:end="575:42"><name pos:start="575:35" pos:end="575:42"><name pos:start="575:35" pos:end="575:35">s</name><operator pos:start="575:36" pos:end="575:37">-&gt;</operator><name pos:start="575:38" pos:end="575:42">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="575:44" pos:end="575:44">)</operator> <operator pos:start="575:46" pos:end="575:46">&lt;</operator> <literal type="number" pos:start="575:48" pos:end="575:48">0</literal></expr>)</condition><block type="pseudo" pos:start="577:9" pos:end="577:19"><block_content pos:start="577:9" pos:end="577:19">

        <return pos:start="577:9" pos:end="577:19">return <expr pos:start="577:16" pos:end="577:18"><name pos:start="577:16" pos:end="577:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="581:5" pos:end="581:19"><expr pos:start="581:5" pos:end="581:18"><operator pos:start="581:5" pos:end="581:5">*</operator><name pos:start="581:6" pos:end="581:14">got_frame</name> <operator pos:start="581:16" pos:end="581:16">=</operator> <literal type="number" pos:start="581:18" pos:end="581:18">1</literal></expr>;</expr_stmt>



    <return pos:start="585:5" pos:end="585:20">return <expr pos:start="585:12" pos:end="585:19"><name pos:start="585:12" pos:end="585:19">buf_size</name></expr>;</return>

</block_content>}</block></function></unit>
