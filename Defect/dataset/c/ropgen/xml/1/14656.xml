<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14656.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">fraps2_decode_plane</name><parameter_list pos:start="1:31" pos:end="5:46">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:43">FrapsContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:55">uint8_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">dst</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:72"><decl pos:start="1:63" pos:end="1:72"><type pos:start="1:63" pos:end="1:72"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:72">stride</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:79"><decl pos:start="1:75" pos:end="1:79"><type pos:start="1:75" pos:end="1:79"><name pos:start="1:75" pos:end="1:77">int</name></type> <name pos:start="1:79" pos:end="1:79">w</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:36"><decl pos:start="3:32" pos:end="3:36"><type pos:start="3:32" pos:end="3:36"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:36">h</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:56"><decl pos:start="3:39" pos:end="3:56"><type pos:start="3:39" pos:end="3:56"><specifier pos:start="3:39" pos:end="3:43">const</specifier> <name pos:start="3:45" pos:end="3:51">uint8_t</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:56">src</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:66"><decl pos:start="3:59" pos:end="3:66"><type pos:start="3:59" pos:end="3:66"><name pos:start="3:59" pos:end="3:61">int</name></type> <name pos:start="3:63" pos:end="3:66">size</name></decl></parameter>, <parameter pos:start="3:69" pos:end="3:76"><decl pos:start="3:69" pos:end="3:76"><type pos:start="3:69" pos:end="3:76"><name pos:start="3:69" pos:end="3:71">int</name></type> <name pos:start="3:73" pos:end="3:76">Uoff</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:45"><decl pos:start="5:32" pos:end="5:45"><type pos:start="5:32" pos:end="5:45"><specifier pos:start="5:32" pos:end="5:36">const</specifier> <name pos:start="5:38" pos:end="5:40">int</name></type> <name pos:start="5:42" pos:end="5:45">step</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="77:1">{<block_content pos:start="9:5" pos:end="75:13">

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">VLC</name></type> <name pos:start="13:9" pos:end="13:11">vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">Node</name></type> <name pos:start="15:10" pos:end="15:19"><name pos:start="15:10" pos:end="15:14">nodes</name><index pos:start="15:15" pos:end="15:19">[<expr pos:start="15:16" pos:end="15:18"><literal type="number" pos:start="15:16" pos:end="15:18">512</literal></expr>]</index></name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="21:51">for<control pos:start="19:8" pos:end="19:28">(<init pos:start="19:9" pos:end="19:14"><expr pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:9">i</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <literal type="number" pos:start="19:13" pos:end="19:13">0</literal></expr>;</init> <condition pos:start="19:16" pos:end="19:23"><expr pos:start="19:16" pos:end="19:22"><name pos:start="19:16" pos:end="19:16">i</name> <operator pos:start="19:18" pos:end="19:18">&lt;</operator> <literal type="number" pos:start="19:20" pos:end="19:22">256</literal></expr>;</condition> <incr pos:start="19:25" pos:end="19:27"><expr pos:start="19:25" pos:end="19:27"><name pos:start="19:25" pos:end="19:25">i</name><operator pos:start="19:26" pos:end="19:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="21:9" pos:end="21:51"><block_content pos:start="21:9" pos:end="21:51">

        <expr_stmt pos:start="21:9" pos:end="21:51"><expr pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:13">nodes</name><index pos:start="21:14" pos:end="21:16">[<expr pos:start="21:15" pos:end="21:15"><name pos:start="21:15" pos:end="21:15">i</name></expr>]</index></name><operator pos:start="21:17" pos:end="21:17">.</operator><name pos:start="21:18" pos:end="21:22">count</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="21:50"><name pos:start="21:26" pos:end="21:44">bytestream_get_le32</name><argument_list pos:start="21:45" pos:end="21:50">(<argument pos:start="21:46" pos:end="21:49"><expr pos:start="21:46" pos:end="21:49"><operator pos:start="21:46" pos:end="21:46">&amp;</operator><name pos:start="21:47" pos:end="21:49">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="23:5" pos:end="23:17"><expr pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:8">size</name> <operator pos:start="23:10" pos:end="23:11">-=</operator> <literal type="number" pos:start="23:13" pos:end="23:16">1024</literal></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:18"><if pos:start="25:5" pos:end="29:18">if <condition pos:start="25:8" pos:end="27:59">(<expr pos:start="25:9" pos:end="27:58"><call pos:start="25:9" pos:end="27:54"><name pos:start="25:9" pos:end="25:26">ff_huff_build_tree</name><argument_list pos:start="25:27" pos:end="27:54">(<argument pos:start="25:28" pos:end="25:35"><expr pos:start="25:28" pos:end="25:35"><name pos:start="25:28" pos:end="25:35"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:35">avctx</name></name></expr></argument>, <argument pos:start="25:38" pos:end="25:41"><expr pos:start="25:38" pos:end="25:41"><operator pos:start="25:38" pos:end="25:38">&amp;</operator><name pos:start="25:39" pos:end="25:41">vlc</name></expr></argument>, <argument pos:start="25:44" pos:end="25:46"><expr pos:start="25:44" pos:end="25:46"><literal type="number" pos:start="25:44" pos:end="25:46">256</literal></expr></argument>, <argument pos:start="25:49" pos:end="25:53"><expr pos:start="25:49" pos:end="25:53"><name pos:start="25:49" pos:end="25:53">nodes</name></expr></argument>, <argument pos:start="25:56" pos:end="25:63"><expr pos:start="25:56" pos:end="25:63"><name pos:start="25:56" pos:end="25:63">huff_cmp</name></expr></argument>,

                           <argument pos:start="27:28" pos:end="27:53"><expr pos:start="27:28" pos:end="27:53"><name pos:start="27:28" pos:end="27:53">FF_HUFFMAN_FLAG_ZERO_COUNT</name></expr></argument>)</argument_list></call> <operator pos:start="27:56" pos:end="27:56">&lt;</operator> <literal type="number" pos:start="27:58" pos:end="27:58">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:18"><block_content pos:start="29:9" pos:end="29:18">

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:67">/* we have built Huffman table and are ready to decode plane */</comment>



    <comment type="block" pos:start="35:5" pos:end="35:64">/* convert bits so they may be used by standard bitreader */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:78"><expr pos:start="37:5" pos:end="37:77"><call pos:start="37:5" pos:end="37:77"><name pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:10">dsp</name><operator pos:start="37:11" pos:end="37:11">.</operator><name pos:start="37:12" pos:end="37:20">bswap_buf</name></name><argument_list pos:start="37:21" pos:end="37:77">(<argument pos:start="37:22" pos:end="37:42"><expr pos:start="37:22" pos:end="37:42"><operator pos:start="37:22" pos:end="37:22">(</operator><name pos:start="37:23" pos:end="37:30">uint32_t</name> <operator pos:start="37:32" pos:end="37:32">*</operator><operator pos:start="37:33" pos:end="37:33">)</operator><name pos:start="37:34" pos:end="37:42"><name pos:start="37:34" pos:end="37:34">s</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:42">tmpbuf</name></name></expr></argument>, <argument pos:start="37:45" pos:end="37:65"><expr pos:start="37:45" pos:end="37:65"><operator pos:start="37:45" pos:end="37:45">(</operator><specifier pos:start="37:46" pos:end="37:50">const</specifier> <name pos:start="37:52" pos:end="37:59">uint32_t</name> <operator pos:start="37:61" pos:end="37:61">*</operator><operator pos:start="37:62" pos:end="37:62">)</operator><name pos:start="37:63" pos:end="37:65">src</name></expr></argument>, <argument pos:start="37:68" pos:end="37:76"><expr pos:start="37:68" pos:end="37:76"><name pos:start="37:68" pos:end="37:71">size</name> <operator pos:start="37:73" pos:end="37:74">&gt;&gt;</operator> <literal type="number" pos:start="37:76" pos:end="37:76">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><call pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:17">init_get_bits</name><argument_list pos:start="41:18" pos:end="41:43">(<argument pos:start="41:19" pos:end="41:21"><expr pos:start="41:19" pos:end="41:21"><operator pos:start="41:19" pos:end="41:19">&amp;</operator><name pos:start="41:20" pos:end="41:21">gb</name></expr></argument>, <argument pos:start="41:24" pos:end="41:32"><expr pos:start="41:24" pos:end="41:32"><name pos:start="41:24" pos:end="41:32"><name pos:start="41:24" pos:end="41:24">s</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:32">tmpbuf</name></name></expr></argument>, <argument pos:start="41:35" pos:end="41:42"><expr pos:start="41:35" pos:end="41:42"><name pos:start="41:35" pos:end="41:38">size</name> <operator pos:start="41:40" pos:end="41:40">*</operator> <literal type="number" pos:start="41:42" pos:end="41:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="71:5">for<control pos:start="43:8" pos:end="43:26">(<init pos:start="43:9" pos:end="43:14"><expr pos:start="43:9" pos:end="43:13"><name pos:start="43:9" pos:end="43:9">j</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>;</init> <condition pos:start="43:16" pos:end="43:21"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:16">j</name> <operator pos:start="43:18" pos:end="43:18">&lt;</operator> <name pos:start="43:20" pos:end="43:20">h</name></expr>;</condition> <incr pos:start="43:23" pos:end="43:25"><expr pos:start="43:23" pos:end="43:25"><name pos:start="43:23" pos:end="43:23">j</name><operator pos:start="43:24" pos:end="43:25">++</operator></expr></incr>)</control><block pos:start="43:27" pos:end="71:5">{<block_content pos:start="45:9" pos:end="69:9">

        <for pos:start="45:9" pos:end="59:9">for<control pos:start="45:12" pos:end="45:41">(<init pos:start="45:13" pos:end="45:18"><expr pos:start="45:13" pos:end="45:17"><name pos:start="45:13" pos:end="45:13">i</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>;</init> <condition pos:start="45:20" pos:end="45:30"><expr pos:start="45:20" pos:end="45:29"><name pos:start="45:20" pos:end="45:20">i</name> <operator pos:start="45:22" pos:end="45:22">&lt;</operator> <name pos:start="45:24" pos:end="45:24">w</name><operator pos:start="45:25" pos:end="45:25">*</operator><name pos:start="45:26" pos:end="45:29">step</name></expr>;</condition> <incr pos:start="45:32" pos:end="45:40"><expr pos:start="45:32" pos:end="45:40"><name pos:start="45:32" pos:end="45:32">i</name> <operator pos:start="45:34" pos:end="45:35">+=</operator> <name pos:start="45:37" pos:end="45:40">step</name></expr></incr>)</control><block pos:start="45:42" pos:end="59:9">{<block_content pos:start="47:13" pos:end="57:41">

            <expr_stmt pos:start="47:13" pos:end="47:52"><expr pos:start="47:13" pos:end="47:51"><name pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:15">dst</name><index pos:start="47:16" pos:end="47:18">[<expr pos:start="47:17" pos:end="47:17"><name pos:start="47:17" pos:end="47:17">i</name></expr>]</index></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:51"><name pos:start="47:22" pos:end="47:29">get_vlc2</name><argument_list pos:start="47:30" pos:end="47:51">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><operator pos:start="47:31" pos:end="47:31">&amp;</operator><name pos:start="47:32" pos:end="47:33">gb</name></expr></argument>, <argument pos:start="47:36" pos:end="47:44"><expr pos:start="47:36" pos:end="47:44"><name pos:start="47:36" pos:end="47:44"><name pos:start="47:36" pos:end="47:38">vlc</name><operator pos:start="47:39" pos:end="47:39">.</operator><name pos:start="47:40" pos:end="47:44">table</name></name></expr></argument>, <argument pos:start="47:47" pos:end="47:47"><expr pos:start="47:47" pos:end="47:47"><literal type="number" pos:start="47:47" pos:end="47:47">9</literal></expr></argument>, <argument pos:start="47:50" pos:end="47:50"><expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="49:13" pos:end="53:15">/* lines are stored as deltas between previous lines

             * and we need to add 0x80 to the first lines of chroma planes

             */</comment>

            <if_stmt pos:start="55:13" pos:end="57:41"><if pos:start="55:13" pos:end="55:44">if<condition pos:start="55:15" pos:end="55:17">(<expr pos:start="55:16" pos:end="55:16"><name pos:start="55:16" pos:end="55:16">j</name></expr>)</condition><block type="pseudo" pos:start="55:19" pos:end="55:44"><block_content pos:start="55:19" pos:end="55:44"> <expr_stmt pos:start="55:19" pos:end="55:44"><expr pos:start="55:19" pos:end="55:43"><name pos:start="55:19" pos:end="55:24"><name pos:start="55:19" pos:end="55:21">dst</name><index pos:start="55:22" pos:end="55:24">[<expr pos:start="55:23" pos:end="55:23"><name pos:start="55:23" pos:end="55:23">i</name></expr>]</index></name> <operator pos:start="55:26" pos:end="55:27">+=</operator> <name pos:start="55:29" pos:end="55:43"><name pos:start="55:29" pos:end="55:31">dst</name><index pos:start="55:32" pos:end="55:43">[<expr pos:start="55:33" pos:end="55:42"><name pos:start="55:33" pos:end="55:33">i</name> <operator pos:start="55:35" pos:end="55:35">-</operator> <name pos:start="55:37" pos:end="55:42">stride</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="57:13" pos:end="57:41">else if<condition pos:start="57:20" pos:end="57:25">(<expr pos:start="57:21" pos:end="57:24"><name pos:start="57:21" pos:end="57:24">Uoff</name></expr>)</condition><block type="pseudo" pos:start="57:27" pos:end="57:41"><block_content pos:start="57:27" pos:end="57:41"> <expr_stmt pos:start="57:27" pos:end="57:41"><expr pos:start="57:27" pos:end="57:40"><name pos:start="57:27" pos:end="57:32"><name pos:start="57:27" pos:end="57:29">dst</name><index pos:start="57:30" pos:end="57:32">[<expr pos:start="57:31" pos:end="57:31"><name pos:start="57:31" pos:end="57:31">i</name></expr>]</index></name> <operator pos:start="57:34" pos:end="57:35">+=</operator> <literal type="number" pos:start="57:37" pos:end="57:40">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:11">dst</name> <operator pos:start="61:13" pos:end="61:14">+=</operator> <name pos:start="61:16" pos:end="61:21">stride</name></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if<condition pos:start="63:11" pos:end="63:34">(<expr pos:start="63:12" pos:end="63:33"><call pos:start="63:12" pos:end="63:29"><name pos:start="63:12" pos:end="63:24">get_bits_left</name><argument_list pos:start="63:25" pos:end="63:29">(<argument pos:start="63:26" pos:end="63:28"><expr pos:start="63:26" pos:end="63:28"><operator pos:start="63:26" pos:end="63:26">&amp;</operator><name pos:start="63:27" pos:end="63:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="63:31" pos:end="63:31">&lt;</operator> <literal type="number" pos:start="63:33" pos:end="63:33">0</literal></expr>)</condition><block pos:start="63:35" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:22">

            <expr_stmt pos:start="65:13" pos:end="65:27"><expr pos:start="65:13" pos:end="65:26"><call pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:20">free_vlc</name><argument_list pos:start="65:21" pos:end="65:26">(<argument pos:start="65:22" pos:end="65:25"><expr pos:start="65:22" pos:end="65:25"><operator pos:start="65:22" pos:end="65:22">&amp;</operator><name pos:start="65:23" pos:end="65:25">vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:22">return <expr pos:start="67:20" pos:end="67:21"><operator pos:start="67:20" pos:end="67:20">-</operator><literal type="number" pos:start="67:21" pos:end="67:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="73:5" pos:end="73:19"><expr pos:start="73:5" pos:end="73:18"><call pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:12">free_vlc</name><argument_list pos:start="73:13" pos:end="73:18">(<argument pos:start="73:14" pos:end="73:17"><expr pos:start="73:14" pos:end="73:17"><operator pos:start="73:14" pos:end="73:14">&amp;</operator><name pos:start="73:15" pos:end="73:17">vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
