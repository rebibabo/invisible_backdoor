<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4733.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:29">cas_check_pvr</name><parameter_list pos:start="1:30" pos:end="3:43">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:40">PowerPCCPU</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">cpu</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><name pos:start="1:48" pos:end="1:59">target_ulong</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">addr</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:42"><decl pos:start="3:31" pos:end="3:42"><type pos:start="3:31" pos:end="3:42"><name pos:start="3:31" pos:end="3:35">Error</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier><modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="91:1">{<block_content pos:start="7:5" pos:end="89:23">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:23">explicit_match</name> <init pos:start="7:25" pos:end="7:31">= <expr pos:start="7:27" pos:end="7:31"><name pos:start="7:27" pos:end="7:31">false</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="7:34" pos:end="7:65">/* Matched the CPU's real PVR */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:23">max_compat</name> <init pos:start="9:25" pos:end="9:41">= <expr pos:start="9:27" pos:end="9:41"><name pos:start="9:27" pos:end="9:41"><name pos:start="9:27" pos:end="9:29">cpu</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:41">max_compat</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">best_compat</name> <init pos:start="11:26" pos:end="11:28">= <expr pos:start="11:28" pos:end="11:28"><literal type="number" pos:start="11:28" pos:end="11:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="25:7">/*

     * We scan the supplied table of PVRs looking for two things

     *   1. Is our real CPU PVR in the list?

     *   2. What's the "best" listed logical PVR

     */</comment>

    <for pos:start="27:5" pos:end="63:5">for <control pos:start="27:9" pos:end="27:29">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:24"><expr pos:start="27:17" pos:end="27:23"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <literal type="number" pos:start="27:21" pos:end="27:23">512</literal></expr>;</condition> <incr pos:start="27:26" pos:end="27:28"><expr pos:start="27:26" pos:end="27:28"><operator pos:start="27:26" pos:end="27:27">++</operator><name pos:start="27:28" pos:end="27:28">i</name></expr></incr>)</control> <block pos:start="27:31" pos:end="63:5">{<block_content pos:start="29:9" pos:end="61:9">

        <decl_stmt pos:start="29:9" pos:end="29:31"><decl pos:start="29:9" pos:end="29:20"><type pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:16">uint32_t</name></type> <name pos:start="29:18" pos:end="29:20">pvr</name></decl>, <decl pos:start="29:23" pos:end="29:30"><type ref="prev" pos:start="29:9" pos:end="29:16"/><name pos:start="29:23" pos:end="29:30">pvr_mask</name></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:61"><expr pos:start="33:9" pos:end="33:60"><name pos:start="33:9" pos:end="33:16">pvr_mask</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:60"><name pos:start="33:20" pos:end="33:30">ldl_be_phys</name><argument_list pos:start="33:31" pos:end="33:60">(<argument pos:start="33:32" pos:end="33:52"><expr pos:start="33:32" pos:end="33:52"><operator pos:start="33:32" pos:end="33:32">&amp;</operator><name pos:start="33:33" pos:end="33:52">address_space_memory</name></expr></argument>, <argument pos:start="33:55" pos:end="33:59"><expr pos:start="33:55" pos:end="33:59"><operator pos:start="33:55" pos:end="33:55">*</operator><name pos:start="33:56" pos:end="33:59">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:60"><expr pos:start="35:9" pos:end="35:59"><name pos:start="35:9" pos:end="35:11">pvr</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:59"><name pos:start="35:15" pos:end="35:25">ldl_be_phys</name><argument_list pos:start="35:26" pos:end="35:59">(<argument pos:start="35:27" pos:end="35:47"><expr pos:start="35:27" pos:end="35:47"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:47">address_space_memory</name></expr></argument>, <argument pos:start="35:50" pos:end="35:58"><expr pos:start="35:50" pos:end="35:58"><operator pos:start="35:50" pos:end="35:50">*</operator><name pos:start="35:51" pos:end="35:54">addr</name> <operator pos:start="35:56" pos:end="35:56">+</operator> <literal type="number" pos:start="35:58" pos:end="35:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:19"><expr pos:start="37:9" pos:end="37:18"><operator pos:start="37:9" pos:end="37:9">*</operator><name pos:start="37:10" pos:end="37:13">addr</name> <operator pos:start="37:15" pos:end="37:16">+=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">8</literal></expr>;</expr_stmt>



        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:28">(<expr pos:start="41:13" pos:end="41:27"><operator pos:start="41:13" pos:end="41:13">~</operator><name pos:start="41:14" pos:end="41:21">pvr_mask</name> <operator pos:start="41:23" pos:end="41:23">&amp;</operator> <name pos:start="41:25" pos:end="41:27">pvr</name></expr>)</condition> <block pos:start="41:30" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:18">

            <break pos:start="43:13" pos:end="43:18">break;</break> <comment type="block" pos:start="43:20" pos:end="43:42">/* Terminator record */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="49:9" pos:end="61:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:67">(<expr pos:start="49:13" pos:end="49:66"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:34"><name pos:start="49:14" pos:end="49:16">cpu</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:21">env</name><operator pos:start="49:22" pos:end="49:22">.</operator><name pos:start="49:23" pos:end="49:25">spr</name><index pos:start="49:26" pos:end="49:34">[<expr pos:start="49:27" pos:end="49:33"><name pos:start="49:27" pos:end="49:33">SPR_PVR</name></expr>]</index></name> <operator pos:start="49:36" pos:end="49:36">&amp;</operator> <name pos:start="49:38" pos:end="49:45">pvr_mask</name><operator pos:start="49:46" pos:end="49:46">)</operator> <operator pos:start="49:48" pos:end="49:49">==</operator> <operator pos:start="49:51" pos:end="49:51">(</operator><name pos:start="49:52" pos:end="49:54">pvr</name> <operator pos:start="49:56" pos:end="49:56">&amp;</operator> <name pos:start="49:58" pos:end="49:65">pvr_mask</name><operator pos:start="49:66" pos:end="49:66">)</operator></expr>)</condition> <block pos:start="49:69" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:34">

            <expr_stmt pos:start="51:13" pos:end="51:34"><expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:26">explicit_match</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <name pos:start="51:30" pos:end="51:33">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="61:9">else <block pos:start="53:16" pos:end="61:9">{<block_content pos:start="55:13" pos:end="59:13">

            <if_stmt pos:start="55:13" pos:end="59:13"><if pos:start="55:13" pos:end="59:13">if <condition pos:start="55:16" pos:end="55:68">(<expr pos:start="55:17" pos:end="55:67"><call pos:start="55:17" pos:end="55:67"><name pos:start="55:17" pos:end="55:32">ppc_check_compat</name><argument_list pos:start="55:33" pos:end="55:67">(<argument pos:start="55:34" pos:end="55:36"><expr pos:start="55:34" pos:end="55:36"><name pos:start="55:34" pos:end="55:36">cpu</name></expr></argument>, <argument pos:start="55:39" pos:end="55:41"><expr pos:start="55:39" pos:end="55:41"><name pos:start="55:39" pos:end="55:41">pvr</name></expr></argument>, <argument pos:start="55:44" pos:end="55:54"><expr pos:start="55:44" pos:end="55:54"><name pos:start="55:44" pos:end="55:54">best_compat</name></expr></argument>, <argument pos:start="55:57" pos:end="55:66"><expr pos:start="55:57" pos:end="55:66"><name pos:start="55:57" pos:end="55:66">max_compat</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:70" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:34">

                <expr_stmt pos:start="57:17" pos:end="57:34"><expr pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:27">best_compat</name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:33">pvr</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="67:5" pos:end="79:5"><if pos:start="67:5" pos:end="79:5">if <condition pos:start="67:8" pos:end="67:62">(<expr pos:start="67:9" pos:end="67:61"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:20">best_compat</name> <operator pos:start="67:22" pos:end="67:23">==</operator> <literal type="number" pos:start="67:25" pos:end="67:25">0</literal><operator pos:start="67:26" pos:end="67:26">)</operator> <operator pos:start="67:28" pos:end="67:29">&amp;&amp;</operator> <operator pos:start="67:31" pos:end="67:31">(</operator><operator pos:start="67:32" pos:end="67:32">!</operator><name pos:start="67:33" pos:end="67:46">explicit_match</name> <operator pos:start="67:48" pos:end="67:49">||</operator> <name pos:start="67:51" pos:end="67:60">max_compat</name><operator pos:start="67:61" pos:end="67:61">)</operator></expr>)</condition> <block pos:start="67:64" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:17">

        <comment type="block" pos:start="69:9" pos:end="73:67">/* We couldn't find a suitable compatibility mode, and either

         * the guest doesn't support "raw" mode for this CPU, or raw

         * mode is disabled because a maximum compat mode is set */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:73"><expr pos:start="75:9" pos:end="75:72"><call pos:start="75:9" pos:end="75:72"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="75:72">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">errp</name></expr></argument>, <argument pos:start="75:26" pos:end="75:71"><expr pos:start="75:26" pos:end="75:71"><literal type="string" pos:start="75:26" pos:end="75:71">"Couldn't negotiate a suitable PVR during CAS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:17">return <expr pos:start="77:16" pos:end="77:16"><literal type="number" pos:start="77:16" pos:end="77:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:26">/* Parsing finished */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:70"><expr pos:start="85:5" pos:end="85:69"><call pos:start="85:5" pos:end="85:69"><name pos:start="85:5" pos:end="85:23">trace_spapr_cas_pvr</name><argument_list pos:start="85:24" pos:end="85:69">(<argument pos:start="85:25" pos:end="85:39"><expr pos:start="85:25" pos:end="85:39"><name pos:start="85:25" pos:end="85:39"><name pos:start="85:25" pos:end="85:27">cpu</name><operator pos:start="85:28" pos:end="85:29">-&gt;</operator><name pos:start="85:30" pos:end="85:39">compat_pvr</name></name></expr></argument>, <argument pos:start="85:42" pos:end="85:55"><expr pos:start="85:42" pos:end="85:55"><name pos:start="85:42" pos:end="85:55">explicit_match</name></expr></argument>, <argument pos:start="85:58" pos:end="85:68"><expr pos:start="85:58" pos:end="85:68"><name pos:start="85:58" pos:end="85:68">best_compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="89:5" pos:end="89:23">return <expr pos:start="89:12" pos:end="89:22"><name pos:start="89:12" pos:end="89:22">best_compat</name></expr>;</return>

</block_content>}</block></function>
</unit>
