<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25849.c" pos:tabs="8"><function pos:start="1:1" pos:end="231:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">ff_h2645_extract_rbsp</name><parameter_list pos:start="1:26" pos:end="3:59">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:39">uint8_t</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">src</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:56"><decl pos:start="1:47" pos:end="1:56"><type pos:start="1:47" pos:end="1:56"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:56">length</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:34">H2645NAL</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">nal</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:58"><decl pos:start="3:42" pos:end="3:58"><type pos:start="3:42" pos:end="3:58"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:58">small_padding</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="231:1">{<block_content pos:start="7:5" pos:end="229:14">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:13"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:13">si</name></decl>, <decl pos:start="7:16" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:17">di</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:85"><decl pos:start="11:5" pos:end="11:84"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:19">padding</name> <init pos:start="11:21" pos:end="11:84">= <expr pos:start="11:23" pos:end="11:84"><ternary pos:start="11:23" pos:end="11:84"><condition pos:start="11:23" pos:end="11:37"><expr pos:start="11:23" pos:end="11:35"><name pos:start="11:23" pos:end="11:35">small_padding</name></expr> ?</condition><then pos:start="11:39" pos:end="11:66"> <expr pos:start="11:39" pos:end="11:66"><name pos:start="11:39" pos:end="11:66">AV_INPUT_BUFFER_PADDING_SIZE</name></expr> </then><else pos:start="11:68" pos:end="11:84">: <expr pos:start="11:70" pos:end="11:84"><name pos:start="11:70" pos:end="11:84">MAX_MBPAIR_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="46:0"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:7">nal</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:22">skipped_bytes</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr>;</expr_stmt>

<cpp:define pos:start="17:1" pos:end="31:9">#<cpp:directive pos:start="17:2" pos:end="17:7">define</cpp:directive> <cpp:macro pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:22">STARTCODE_TEST</name></cpp:macro>                                                  \

        <cpp:value pos:start="19:9" pos:end="31:9">if (i + 2 &lt; length &amp;&amp; src[i + 1] == 0 &amp;&amp; src[i + 2] &lt;= 3) {     \

            if (src[i + 2] != 3 &amp;&amp; src[i + 2] != 0) {                   \

                <comment type="block" pos:start="23:17" pos:end="23:59">/* startcode, so we must be past the end */</comment>             \

                length = i;                                             \

            }                                                           \

            break;                                                      \

        }</cpp:value></cpp:define>

<cpp:if pos:start="33:1" pos:end="33:23">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:23">HAVE_FAST_UNALIGNED</name></expr></cpp:if>

<cpp:define pos:start="35:1" pos:end="43:15">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:23">FIND_FIRST_ZERO</name></cpp:macro>                                                 \

        <cpp:value pos:start="37:9" pos:end="43:15">if (i &gt; 0 &amp;&amp; !src[i])                                           \

            i--;                                                        \

        while (src[i])                                                  \

            i++</cpp:value></cpp:define>

<cpp:if pos:start="45:1" pos:end="45:19">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:19">HAVE_FAST_64BIT</name></expr></cpp:if>

    <for pos:start="47:5" pos:end="66:0">for <control pos:start="47:9" pos:end="47:39">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">i</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:31"><expr pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:17">i</name> <operator pos:start="47:19" pos:end="47:19">+</operator> <literal type="number" pos:start="47:21" pos:end="47:21">1</literal> <operator pos:start="47:23" pos:end="47:23">&lt;</operator> <name pos:start="47:25" pos:end="47:30">length</name></expr>;</condition> <incr pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:33">i</name> <operator pos:start="47:35" pos:end="47:36">+=</operator> <literal type="number" pos:start="47:38" pos:end="47:38">9</literal></expr></incr>)</control> <block pos:start="47:41" pos:end="66:0">{<block_content pos:start="49:9" pos:end="61:15">

        <if_stmt pos:start="49:9" pos:end="55:21"><if pos:start="49:9" pos:end="55:21">if <condition pos:start="49:12" pos:end="53:37">(<expr pos:start="49:13" pos:end="53:36"><operator pos:start="49:13" pos:end="49:13">!</operator><operator pos:start="49:14" pos:end="49:14">(</operator><operator pos:start="49:15" pos:end="49:15">(</operator><operator pos:start="49:16" pos:end="49:16">~</operator><call pos:start="49:17" pos:end="49:33"><name pos:start="49:17" pos:end="49:24">AV_RN64A</name><argument_list pos:start="49:25" pos:end="49:33">(<argument pos:start="49:26" pos:end="49:32"><expr pos:start="49:26" pos:end="49:32"><name pos:start="49:26" pos:end="49:28">src</name> <operator pos:start="49:30" pos:end="49:30">+</operator> <name pos:start="49:32" pos:end="49:32">i</name></expr></argument>)</argument_list></call> <operator pos:start="49:35" pos:end="49:35">&amp;</operator>

               <operator pos:start="51:16" pos:end="51:16">(</operator><call pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:24">AV_RN64A</name><argument_list pos:start="51:25" pos:end="51:33">(<argument pos:start="51:26" pos:end="51:32"><expr pos:start="51:26" pos:end="51:32"><name pos:start="51:26" pos:end="51:28">src</name> <operator pos:start="51:30" pos:end="51:30">+</operator> <name pos:start="51:32" pos:end="51:32">i</name></expr></argument>)</argument_list></call> <operator pos:start="51:35" pos:end="51:35">-</operator> <literal type="number" pos:start="51:37" pos:end="51:57">0x0100010001000101ULL</literal><operator pos:start="51:58" pos:end="51:58">)</operator><operator pos:start="51:59" pos:end="51:59">)</operator> <operator pos:start="51:61" pos:end="51:61">&amp;</operator>

              <literal type="number" pos:start="53:15" pos:end="53:35">0x8000800080008080ULL</literal><operator pos:start="53:36" pos:end="53:36">)</operator></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:21"><block_content pos:start="55:13" pos:end="55:21">

            <continue pos:start="55:13" pos:end="55:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:23">FIND_FIRST_ZERO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:23"><expr pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:22">STARTCODE_TEST</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:15"><expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:9">i</name> <operator pos:start="61:11" pos:end="61:12">-=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">7</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:else pos:start="65:1" pos:end="65:5">#<cpp:directive pos:start="65:2" pos:end="65:5">else</cpp:directive></cpp:else>

    <for pos:start="67:5" pos:end="88:0">for <control pos:start="67:9" pos:end="67:39">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:31"><expr pos:start="67:17" pos:end="67:30"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">+</operator> <literal type="number" pos:start="67:21" pos:end="67:21">1</literal> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <name pos:start="67:25" pos:end="67:30">length</name></expr>;</condition> <incr pos:start="67:33" pos:end="67:38"><expr pos:start="67:33" pos:end="67:38"><name pos:start="67:33" pos:end="67:33">i</name> <operator pos:start="67:35" pos:end="67:36">+=</operator> <literal type="number" pos:start="67:38" pos:end="67:38">5</literal></expr></incr>)</control> <block pos:start="67:41" pos:end="88:0">{<block_content pos:start="69:9" pos:end="81:15">

        <if_stmt pos:start="69:9" pos:end="75:21"><if pos:start="69:9" pos:end="75:21">if <condition pos:start="69:12" pos:end="73:27">(<expr pos:start="69:13" pos:end="73:26"><operator pos:start="69:13" pos:end="69:13">!</operator><operator pos:start="69:14" pos:end="69:14">(</operator><operator pos:start="69:15" pos:end="69:15">(</operator><operator pos:start="69:16" pos:end="69:16">~</operator><call pos:start="69:17" pos:end="69:33"><name pos:start="69:17" pos:end="69:24">AV_RN32A</name><argument_list pos:start="69:25" pos:end="69:33">(<argument pos:start="69:26" pos:end="69:32"><expr pos:start="69:26" pos:end="69:32"><name pos:start="69:26" pos:end="69:28">src</name> <operator pos:start="69:30" pos:end="69:30">+</operator> <name pos:start="69:32" pos:end="69:32">i</name></expr></argument>)</argument_list></call> <operator pos:start="69:35" pos:end="69:35">&amp;</operator>

               <operator pos:start="71:16" pos:end="71:16">(</operator><call pos:start="71:17" pos:end="71:33"><name pos:start="71:17" pos:end="71:24">AV_RN32A</name><argument_list pos:start="71:25" pos:end="71:33">(<argument pos:start="71:26" pos:end="71:32"><expr pos:start="71:26" pos:end="71:32"><name pos:start="71:26" pos:end="71:28">src</name> <operator pos:start="71:30" pos:end="71:30">+</operator> <name pos:start="71:32" pos:end="71:32">i</name></expr></argument>)</argument_list></call> <operator pos:start="71:35" pos:end="71:35">-</operator> <literal type="number" pos:start="71:37" pos:end="71:47">0x01000101U</literal><operator pos:start="71:48" pos:end="71:48">)</operator><operator pos:start="71:49" pos:end="71:49">)</operator> <operator pos:start="71:51" pos:end="71:51">&amp;</operator>

              <literal type="number" pos:start="73:15" pos:end="73:25">0x80008080U</literal><operator pos:start="73:26" pos:end="73:26">)</operator></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:21"><block_content pos:start="75:13" pos:end="75:21">

            <continue pos:start="75:13" pos:end="75:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:23">FIND_FIRST_ZERO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:22">STARTCODE_TEST</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:15"><expr pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:9">i</name> <operator pos:start="81:11" pos:end="81:12">-=</operator> <literal type="number" pos:start="81:14" pos:end="81:14">3</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="85:8" pos:end="85:28">/* HAVE_FAST_64BIT */</comment>

<cpp:else pos:start="87:1" pos:end="87:5">#<cpp:directive pos:start="87:2" pos:end="87:5">else</cpp:directive></cpp:else>

    <for pos:start="89:5" pos:end="104:0">for <control pos:start="89:9" pos:end="89:39">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:31"><expr pos:start="89:17" pos:end="89:30"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">+</operator> <literal type="number" pos:start="89:21" pos:end="89:21">1</literal> <operator pos:start="89:23" pos:end="89:23">&lt;</operator> <name pos:start="89:25" pos:end="89:30">length</name></expr>;</condition> <incr pos:start="89:33" pos:end="89:38"><expr pos:start="89:33" pos:end="89:38"><name pos:start="89:33" pos:end="89:33">i</name> <operator pos:start="89:35" pos:end="89:36">+=</operator> <literal type="number" pos:start="89:38" pos:end="89:38">2</literal></expr></incr>)</control> <block pos:start="89:41" pos:end="104:0">{<block_content pos:start="91:9" pos:end="99:23">

        <if_stmt pos:start="91:9" pos:end="93:21"><if pos:start="91:9" pos:end="93:21">if <condition pos:start="91:12" pos:end="91:19">(<expr pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:15">src</name><index pos:start="91:16" pos:end="91:18">[<expr pos:start="91:17" pos:end="91:17"><name pos:start="91:17" pos:end="91:17">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:21"><block_content pos:start="93:13" pos:end="93:21">

            <continue pos:start="93:13" pos:end="93:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="97:16"><if pos:start="95:9" pos:end="97:16">if <condition pos:start="95:12" pos:end="95:37">(<expr pos:start="95:13" pos:end="95:36"><name pos:start="95:13" pos:end="95:13">i</name> <operator pos:start="95:15" pos:end="95:15">&gt;</operator> <literal type="number" pos:start="95:17" pos:end="95:17">0</literal> <operator pos:start="95:19" pos:end="95:20">&amp;&amp;</operator> <name pos:start="95:22" pos:end="95:31"><name pos:start="95:22" pos:end="95:24">src</name><index pos:start="95:25" pos:end="95:31">[<expr pos:start="95:26" pos:end="95:30"><name pos:start="95:26" pos:end="95:26">i</name> <operator pos:start="95:28" pos:end="95:28">-</operator> <literal type="number" pos:start="95:30" pos:end="95:30">1</literal></expr>]</index></name> <operator pos:start="95:33" pos:end="95:34">==</operator> <literal type="number" pos:start="95:36" pos:end="95:36">0</literal></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:16"><block_content pos:start="97:13" pos:end="97:16">

            <expr_stmt pos:start="97:13" pos:end="97:16"><expr pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:13">i</name><operator pos:start="97:14" pos:end="97:15">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:23"><expr pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:22">STARTCODE_TEST</name></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="103:8" pos:end="103:32">/* HAVE_FAST_UNALIGNED */</comment>



    <if_stmt pos:start="107:5" pos:end="119:5"><if pos:start="107:5" pos:end="119:5">if <condition pos:start="107:8" pos:end="107:41">(<expr pos:start="107:9" pos:end="107:40"><name pos:start="107:9" pos:end="107:9">i</name> <operator pos:start="107:11" pos:end="107:12">&gt;=</operator> <name pos:start="107:14" pos:end="107:19">length</name> <operator pos:start="107:21" pos:end="107:21">-</operator> <literal type="number" pos:start="107:23" pos:end="107:23">1</literal> <operator pos:start="107:25" pos:end="107:26">&amp;&amp;</operator> <name pos:start="107:28" pos:end="107:40">small_padding</name></expr>)</condition> <block pos:start="107:43" pos:end="119:5">{<block_content pos:start="109:9" pos:end="117:22"> <comment type="line" pos:start="107:45" pos:end="107:59">// no escaped 0</comment>

        <expr_stmt pos:start="109:9" pos:end="111:28"><expr pos:start="109:9" pos:end="111:27"><name pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:11">nal</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:17">data</name></name>     <operator pos:start="109:23" pos:end="109:23">=</operator>

        <name pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:11">nal</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:21">raw_data</name></name> <operator pos:start="111:23" pos:end="111:23">=</operator> <name pos:start="111:25" pos:end="111:27">src</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="115:31"><expr pos:start="113:9" pos:end="115:30"><name pos:start="113:9" pos:end="113:17"><name pos:start="113:9" pos:end="113:11">nal</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:17">size</name></name>     <operator pos:start="113:23" pos:end="113:23">=</operator>

        <name pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:11">nal</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:21">raw_size</name></name> <operator pos:start="115:23" pos:end="115:23">=</operator> <name pos:start="115:25" pos:end="115:30">length</name></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:22">return <expr pos:start="117:16" pos:end="117:21"><name pos:start="117:16" pos:end="117:21">length</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="125:37"><expr pos:start="123:5" pos:end="125:36"><call pos:start="123:5" pos:end="125:36"><name pos:start="123:5" pos:end="123:18">av_fast_malloc</name><argument_list pos:start="123:19" pos:end="125:36">(<argument pos:start="123:20" pos:end="123:36"><expr pos:start="123:20" pos:end="123:36"><operator pos:start="123:20" pos:end="123:20">&amp;</operator><name pos:start="123:21" pos:end="123:36"><name pos:start="123:21" pos:end="123:23">nal</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:36">rbsp_buffer</name></name></expr></argument>, <argument pos:start="123:39" pos:end="123:60"><expr pos:start="123:39" pos:end="123:60"><operator pos:start="123:39" pos:end="123:39">&amp;</operator><name pos:start="123:40" pos:end="123:60"><name pos:start="123:40" pos:end="123:42">nal</name><operator pos:start="123:43" pos:end="123:44">-&gt;</operator><name pos:start="123:45" pos:end="123:60">rbsp_buffer_size</name></name></expr></argument>,

                   <argument pos:start="125:20" pos:end="125:35"><expr pos:start="125:20" pos:end="125:35"><name pos:start="125:20" pos:end="125:25">length</name> <operator pos:start="125:27" pos:end="125:27">+</operator> <name pos:start="125:29" pos:end="125:35">padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="129:31"><if pos:start="127:5" pos:end="129:31">if <condition pos:start="127:8" pos:end="127:26">(<expr pos:start="127:9" pos:end="127:25"><operator pos:start="127:9" pos:end="127:9">!</operator><name pos:start="127:10" pos:end="127:25"><name pos:start="127:10" pos:end="127:12">nal</name><operator pos:start="127:13" pos:end="127:14">-&gt;</operator><name pos:start="127:15" pos:end="127:25">rbsp_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:31"><block_content pos:start="129:9" pos:end="129:31">

        <return pos:start="129:9" pos:end="129:31">return <expr pos:start="129:16" pos:end="129:30"><call pos:start="129:16" pos:end="129:30"><name pos:start="129:16" pos:end="129:22">AVERROR</name><argument_list pos:start="129:23" pos:end="129:30">(<argument pos:start="129:24" pos:end="129:29"><expr pos:start="129:24" pos:end="129:29"><name pos:start="129:24" pos:end="129:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:27"><expr pos:start="133:5" pos:end="133:26"><name pos:start="133:5" pos:end="133:7">dst</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <name pos:start="133:11" pos:end="133:26"><name pos:start="133:11" pos:end="133:13">nal</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:26">rbsp_buffer</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:24"><expr pos:start="137:5" pos:end="137:23"><call pos:start="137:5" pos:end="137:23"><name pos:start="137:5" pos:end="137:10">memcpy</name><argument_list pos:start="137:11" pos:end="137:23">(<argument pos:start="137:12" pos:end="137:14"><expr pos:start="137:12" pos:end="137:14"><name pos:start="137:12" pos:end="137:14">dst</name></expr></argument>, <argument pos:start="137:17" pos:end="137:19"><expr pos:start="137:17" pos:end="137:19"><name pos:start="137:17" pos:end="137:19">src</name></expr></argument>, <argument pos:start="137:22" pos:end="137:22"><expr pos:start="137:22" pos:end="137:22"><name pos:start="137:22" pos:end="137:22">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:16"><expr pos:start="139:5" pos:end="139:15"><name pos:start="139:5" pos:end="139:6">si</name> <operator pos:start="139:8" pos:end="139:8">=</operator> <name pos:start="139:10" pos:end="139:11">di</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <name pos:start="139:15" pos:end="139:15">i</name></expr>;</expr_stmt>

    <while pos:start="141:5" pos:end="207:5">while <condition pos:start="141:11" pos:end="141:27">(<expr pos:start="141:12" pos:end="141:26"><name pos:start="141:12" pos:end="141:13">si</name> <operator pos:start="141:15" pos:end="141:15">+</operator> <literal type="number" pos:start="141:17" pos:end="141:17">2</literal> <operator pos:start="141:19" pos:end="141:19">&lt;</operator> <name pos:start="141:21" pos:end="141:26">length</name></expr>)</condition> <block pos:start="141:29" pos:end="207:5">{<block_content pos:start="145:9" pos:end="205:30">

        <comment type="line" pos:start="143:9" pos:end="143:44">// remove escapes (very rare 1:2^22)</comment>

        <if_stmt pos:start="145:9" pos:end="201:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:28">(<expr pos:start="145:13" pos:end="145:27"><name pos:start="145:13" pos:end="145:23"><name pos:start="145:13" pos:end="145:15">src</name><index pos:start="145:16" pos:end="145:23">[<expr pos:start="145:17" pos:end="145:22"><name pos:start="145:17" pos:end="145:18">si</name> <operator pos:start="145:20" pos:end="145:20">+</operator> <literal type="number" pos:start="145:22" pos:end="145:22">2</literal></expr>]</index></name> <operator pos:start="145:25" pos:end="145:25">&gt;</operator> <literal type="number" pos:start="145:27" pos:end="145:27">3</literal></expr>)</condition> <block pos:start="145:30" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:34">

            <expr_stmt pos:start="147:13" pos:end="147:34"><expr pos:start="147:13" pos:end="147:33"><name pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:15">dst</name><index pos:start="147:16" pos:end="147:21">[<expr pos:start="147:17" pos:end="147:20"><name pos:start="147:17" pos:end="147:18">di</name><operator pos:start="147:19" pos:end="147:20">++</operator></expr>]</index></name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:33"><name pos:start="147:25" pos:end="147:27">src</name><index pos:start="147:28" pos:end="147:33">[<expr pos:start="147:29" pos:end="147:32"><name pos:start="147:29" pos:end="147:30">si</name><operator pos:start="147:31" pos:end="147:32">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:34"><expr pos:start="149:13" pos:end="149:33"><name pos:start="149:13" pos:end="149:21"><name pos:start="149:13" pos:end="149:15">dst</name><index pos:start="149:16" pos:end="149:21">[<expr pos:start="149:17" pos:end="149:20"><name pos:start="149:17" pos:end="149:18">di</name><operator pos:start="149:19" pos:end="149:20">++</operator></expr>]</index></name> <operator pos:start="149:23" pos:end="149:23">=</operator> <name pos:start="149:25" pos:end="149:33"><name pos:start="149:25" pos:end="149:27">src</name><index pos:start="149:28" pos:end="149:33">[<expr pos:start="149:29" pos:end="149:32"><name pos:start="149:29" pos:end="149:30">si</name><operator pos:start="149:31" pos:end="149:32">++</operator></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="151:11" pos:end="201:9">else if <condition pos:start="151:19" pos:end="151:72">(<expr pos:start="151:20" pos:end="151:71"><name pos:start="151:20" pos:end="151:26"><name pos:start="151:20" pos:end="151:22">src</name><index pos:start="151:23" pos:end="151:26">[<expr pos:start="151:24" pos:end="151:25"><name pos:start="151:24" pos:end="151:25">si</name></expr>]</index></name> <operator pos:start="151:28" pos:end="151:29">==</operator> <literal type="number" pos:start="151:31" pos:end="151:31">0</literal> <operator pos:start="151:33" pos:end="151:34">&amp;&amp;</operator> <name pos:start="151:36" pos:end="151:46"><name pos:start="151:36" pos:end="151:38">src</name><index pos:start="151:39" pos:end="151:46">[<expr pos:start="151:40" pos:end="151:45"><name pos:start="151:40" pos:end="151:41">si</name> <operator pos:start="151:43" pos:end="151:43">+</operator> <literal type="number" pos:start="151:45" pos:end="151:45">1</literal></expr>]</index></name> <operator pos:start="151:48" pos:end="151:49">==</operator> <literal type="number" pos:start="151:51" pos:end="151:51">0</literal> <operator pos:start="151:53" pos:end="151:54">&amp;&amp;</operator> <name pos:start="151:56" pos:end="151:66"><name pos:start="151:56" pos:end="151:58">src</name><index pos:start="151:59" pos:end="151:66">[<expr pos:start="151:60" pos:end="151:65"><name pos:start="151:60" pos:end="151:61">si</name> <operator pos:start="151:63" pos:end="151:63">+</operator> <literal type="number" pos:start="151:65" pos:end="151:65">2</literal></expr>]</index></name> <operator pos:start="151:68" pos:end="151:69">!=</operator> <literal type="number" pos:start="151:71" pos:end="151:71">0</literal></expr>)</condition> <block pos:start="151:74" pos:end="201:9">{<block_content pos:start="153:13" pos:end="199:25">

            <if_stmt pos:start="153:13" pos:end="199:25"><if pos:start="153:13" pos:end="197:13">if <condition pos:start="153:16" pos:end="153:33">(<expr pos:start="153:17" pos:end="153:32"><name pos:start="153:17" pos:end="153:27"><name pos:start="153:17" pos:end="153:19">src</name><index pos:start="153:20" pos:end="153:27">[<expr pos:start="153:21" pos:end="153:26"><name pos:start="153:21" pos:end="153:22">si</name> <operator pos:start="153:24" pos:end="153:24">+</operator> <literal type="number" pos:start="153:26" pos:end="153:26">2</literal></expr>]</index></name> <operator pos:start="153:29" pos:end="153:30">==</operator> <literal type="number" pos:start="153:32" pos:end="153:32">3</literal></expr>)</condition> <block pos:start="153:35" pos:end="197:13">{<block_content pos:start="155:17" pos:end="195:25"> <comment type="line" pos:start="153:37" pos:end="153:45">// escape</comment>

                <expr_stmt pos:start="155:17" pos:end="155:30"><expr pos:start="155:17" pos:end="155:29"><name pos:start="155:17" pos:end="155:25"><name pos:start="155:17" pos:end="155:19">dst</name><index pos:start="155:20" pos:end="155:25">[<expr pos:start="155:21" pos:end="155:24"><name pos:start="155:21" pos:end="155:22">di</name><operator pos:start="155:23" pos:end="155:24">++</operator></expr>]</index></name> <operator pos:start="155:27" pos:end="155:27">=</operator> <literal type="number" pos:start="155:29" pos:end="155:29">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:30"><expr pos:start="157:17" pos:end="157:29"><name pos:start="157:17" pos:end="157:25"><name pos:start="157:17" pos:end="157:19">dst</name><index pos:start="157:20" pos:end="157:25">[<expr pos:start="157:21" pos:end="157:24"><name pos:start="157:21" pos:end="157:22">di</name><operator pos:start="157:23" pos:end="157:24">++</operator></expr>]</index></name> <operator pos:start="157:27" pos:end="157:27">=</operator> <literal type="number" pos:start="157:29" pos:end="157:29">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:30"><expr pos:start="159:17" pos:end="159:29"><name pos:start="159:17" pos:end="159:18">si</name>       <operator pos:start="159:26" pos:end="159:27">+=</operator> <literal type="number" pos:start="159:29" pos:end="159:29">3</literal></expr>;</expr_stmt>



                <if_stmt pos:start="163:17" pos:end="193:17"><if pos:start="163:17" pos:end="193:17">if <condition pos:start="163:20" pos:end="163:43">(<expr pos:start="163:21" pos:end="163:42"><name pos:start="163:21" pos:end="163:42"><name pos:start="163:21" pos:end="163:23">nal</name><operator pos:start="163:24" pos:end="163:25">-&gt;</operator><name pos:start="163:26" pos:end="163:42">skipped_bytes_pos</name></name></expr>)</condition> <block pos:start="163:45" pos:end="193:17">{<block_content pos:start="165:21" pos:end="191:78">

                    <expr_stmt pos:start="165:21" pos:end="165:41"><expr pos:start="165:21" pos:end="165:40"><name pos:start="165:21" pos:end="165:38"><name pos:start="165:21" pos:end="165:23">nal</name><operator pos:start="165:24" pos:end="165:25">-&gt;</operator><name pos:start="165:26" pos:end="165:38">skipped_bytes</name></name><operator pos:start="165:39" pos:end="165:40">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="167:21" pos:end="187:21"><if pos:start="167:21" pos:end="187:21">if <condition pos:start="167:24" pos:end="167:73">(<expr pos:start="167:25" pos:end="167:72"><name pos:start="167:25" pos:end="167:51"><name pos:start="167:25" pos:end="167:27">nal</name><operator pos:start="167:28" pos:end="167:29">-&gt;</operator><name pos:start="167:30" pos:end="167:51">skipped_bytes_pos_size</name></name> <operator pos:start="167:53" pos:end="167:53">&lt;</operator> <name pos:start="167:55" pos:end="167:72"><name pos:start="167:55" pos:end="167:57">nal</name><operator pos:start="167:58" pos:end="167:59">-&gt;</operator><name pos:start="167:60" pos:end="167:72">skipped_bytes</name></name></expr>)</condition> <block pos:start="167:75" pos:end="187:21">{<block_content pos:start="169:25" pos:end="185:25">

                        <expr_stmt pos:start="169:25" pos:end="169:57"><expr pos:start="169:25" pos:end="169:56"><name pos:start="169:25" pos:end="169:51"><name pos:start="169:25" pos:end="169:27">nal</name><operator pos:start="169:28" pos:end="169:29">-&gt;</operator><name pos:start="169:30" pos:end="169:51">skipped_bytes_pos_size</name></name> <operator pos:start="169:53" pos:end="169:54">*=</operator> <literal type="number" pos:start="169:56" pos:end="169:56">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="171:25" pos:end="171:86"><expr pos:start="171:25" pos:end="171:85"><call pos:start="171:25" pos:end="171:85"><name pos:start="171:25" pos:end="171:34">av_assert0</name><argument_list pos:start="171:35" pos:end="171:85">(<argument pos:start="171:36" pos:end="171:84"><expr pos:start="171:36" pos:end="171:84"><name pos:start="171:36" pos:end="171:62"><name pos:start="171:36" pos:end="171:38">nal</name><operator pos:start="171:39" pos:end="171:40">-&gt;</operator><name pos:start="171:41" pos:end="171:62">skipped_bytes_pos_size</name></name> <operator pos:start="171:64" pos:end="171:65">&gt;=</operator> <name pos:start="171:67" pos:end="171:84"><name pos:start="171:67" pos:end="171:69">nal</name><operator pos:start="171:70" pos:end="171:71">-&gt;</operator><name pos:start="171:72" pos:end="171:84">skipped_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="173:25" pos:end="177:65"><expr pos:start="173:25" pos:end="177:64"><call pos:start="173:25" pos:end="177:64"><name pos:start="173:25" pos:end="173:41">av_reallocp_array</name><argument_list pos:start="173:42" pos:end="177:64">(<argument pos:start="173:43" pos:end="173:65"><expr pos:start="173:43" pos:end="173:65"><operator pos:start="173:43" pos:end="173:43">&amp;</operator><name pos:start="173:44" pos:end="173:65"><name pos:start="173:44" pos:end="173:46">nal</name><operator pos:start="173:47" pos:end="173:48">-&gt;</operator><name pos:start="173:49" pos:end="173:65">skipped_bytes_pos</name></name></expr></argument>,

                                <argument pos:start="175:33" pos:end="175:59"><expr pos:start="175:33" pos:end="175:59"><name pos:start="175:33" pos:end="175:59"><name pos:start="175:33" pos:end="175:35">nal</name><operator pos:start="175:36" pos:end="175:37">-&gt;</operator><name pos:start="175:38" pos:end="175:59">skipped_bytes_pos_size</name></name></expr></argument>,

                                <argument pos:start="177:33" pos:end="177:63"><expr pos:start="177:33" pos:end="177:63"><sizeof pos:start="177:33" pos:end="177:63">sizeof<argument_list pos:start="177:39" pos:end="177:63">(<argument pos:start="177:40" pos:end="177:62"><expr pos:start="177:40" pos:end="177:62"><operator pos:start="177:40" pos:end="177:40">*</operator><name pos:start="177:41" pos:end="177:62"><name pos:start="177:41" pos:end="177:43">nal</name><operator pos:start="177:44" pos:end="177:45">-&gt;</operator><name pos:start="177:46" pos:end="177:62">skipped_bytes_pos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="179:25" pos:end="185:25"><if pos:start="179:25" pos:end="185:25">if <condition pos:start="179:28" pos:end="179:52">(<expr pos:start="179:29" pos:end="179:51"><operator pos:start="179:29" pos:end="179:29">!</operator><name pos:start="179:30" pos:end="179:51"><name pos:start="179:30" pos:end="179:32">nal</name><operator pos:start="179:33" pos:end="179:34">-&gt;</operator><name pos:start="179:35" pos:end="179:51">skipped_bytes_pos</name></name></expr>)</condition> <block pos:start="179:54" pos:end="185:25">{<block_content pos:start="181:29" pos:end="183:51">

                            <expr_stmt pos:start="181:29" pos:end="181:60"><expr pos:start="181:29" pos:end="181:59"><name pos:start="181:29" pos:end="181:55"><name pos:start="181:29" pos:end="181:31">nal</name><operator pos:start="181:32" pos:end="181:33">-&gt;</operator><name pos:start="181:34" pos:end="181:55">skipped_bytes_pos_size</name></name> <operator pos:start="181:57" pos:end="181:57">=</operator> <literal type="number" pos:start="181:59" pos:end="181:59">0</literal></expr>;</expr_stmt>

                            <return pos:start="183:29" pos:end="183:51">return <expr pos:start="183:36" pos:end="183:50"><call pos:start="183:36" pos:end="183:50"><name pos:start="183:36" pos:end="183:42">AVERROR</name><argument_list pos:start="183:43" pos:end="183:50">(<argument pos:start="183:44" pos:end="183:49"><expr pos:start="183:44" pos:end="183:49"><name pos:start="183:44" pos:end="183:49">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="189:21" pos:end="191:78"><if pos:start="189:21" pos:end="191:78">if <condition pos:start="189:24" pos:end="189:47">(<expr pos:start="189:25" pos:end="189:46"><name pos:start="189:25" pos:end="189:46"><name pos:start="189:25" pos:end="189:27">nal</name><operator pos:start="189:28" pos:end="189:29">-&gt;</operator><name pos:start="189:30" pos:end="189:46">skipped_bytes_pos</name></name></expr>)</condition><block type="pseudo" pos:start="191:25" pos:end="191:78"><block_content pos:start="191:25" pos:end="191:78">

                        <expr_stmt pos:start="191:25" pos:end="191:78"><expr pos:start="191:25" pos:end="191:77"><name pos:start="191:25" pos:end="191:68"><name pos:start="191:25" pos:end="191:27">nal</name><operator pos:start="191:28" pos:end="191:29">-&gt;</operator><name pos:start="191:30" pos:end="191:46">skipped_bytes_pos</name><index pos:start="191:47" pos:end="191:68">[<expr pos:start="191:48" pos:end="191:67"><name pos:start="191:48" pos:end="191:65"><name pos:start="191:48" pos:end="191:50">nal</name><operator pos:start="191:51" pos:end="191:52">-&gt;</operator><name pos:start="191:53" pos:end="191:65">skipped_bytes</name></name><operator pos:start="191:66" pos:end="191:66">-</operator><literal type="number" pos:start="191:67" pos:end="191:67">1</literal></expr>]</index></name> <operator pos:start="191:70" pos:end="191:70">=</operator> <name pos:start="191:72" pos:end="191:73">di</name> <operator pos:start="191:75" pos:end="191:75">-</operator> <literal type="number" pos:start="191:77" pos:end="191:77">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <continue pos:start="195:17" pos:end="195:25">continue;</continue>

            </block_content>}</block></if> <else pos:start="197:15" pos:end="199:25">else<block type="pseudo" pos:start="199:17" pos:end="199:25"><block_content pos:start="199:17" pos:end="199:25"> <comment type="line" pos:start="197:20" pos:end="197:37">// next start code</comment>

                <goto pos:start="199:17" pos:end="199:25">goto <name pos:start="199:22" pos:end="199:24">nsc</name>;</goto></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="205:9" pos:end="205:30"><expr pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:17"><name pos:start="205:9" pos:end="205:11">dst</name><index pos:start="205:12" pos:end="205:17">[<expr pos:start="205:13" pos:end="205:16"><name pos:start="205:13" pos:end="205:14">di</name><operator pos:start="205:15" pos:end="205:16">++</operator></expr>]</index></name> <operator pos:start="205:19" pos:end="205:19">=</operator> <name pos:start="205:21" pos:end="205:29"><name pos:start="205:21" pos:end="205:23">src</name><index pos:start="205:24" pos:end="205:29">[<expr pos:start="205:25" pos:end="205:28"><name pos:start="205:25" pos:end="205:26">si</name><operator pos:start="205:27" pos:end="205:28">++</operator></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <while pos:start="209:5" pos:end="211:30">while <condition pos:start="209:11" pos:end="209:23">(<expr pos:start="209:12" pos:end="209:22"><name pos:start="209:12" pos:end="209:13">si</name> <operator pos:start="209:15" pos:end="209:15">&lt;</operator> <name pos:start="209:17" pos:end="209:22">length</name></expr>)</condition><block type="pseudo" pos:start="211:9" pos:end="211:30"><block_content pos:start="211:9" pos:end="211:30">

        <expr_stmt pos:start="211:9" pos:end="211:30"><expr pos:start="211:9" pos:end="211:29"><name pos:start="211:9" pos:end="211:17"><name pos:start="211:9" pos:end="211:11">dst</name><index pos:start="211:12" pos:end="211:17">[<expr pos:start="211:13" pos:end="211:16"><name pos:start="211:13" pos:end="211:14">di</name><operator pos:start="211:15" pos:end="211:16">++</operator></expr>]</index></name> <operator pos:start="211:19" pos:end="211:19">=</operator> <name pos:start="211:21" pos:end="211:29"><name pos:start="211:21" pos:end="211:23">src</name><index pos:start="211:24" pos:end="211:29">[<expr pos:start="211:25" pos:end="211:28"><name pos:start="211:25" pos:end="211:26">si</name><operator pos:start="211:27" pos:end="211:28">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>



<label pos:start="215:1" pos:end="215:4"><name pos:start="215:1" pos:end="215:3">nsc</name>:</label>

    <expr_stmt pos:start="217:5" pos:end="217:54"><expr pos:start="217:5" pos:end="217:53"><call pos:start="217:5" pos:end="217:53"><name pos:start="217:5" pos:end="217:10">memset</name><argument_list pos:start="217:11" pos:end="217:53">(<argument pos:start="217:12" pos:end="217:19"><expr pos:start="217:12" pos:end="217:19"><name pos:start="217:12" pos:end="217:14">dst</name> <operator pos:start="217:16" pos:end="217:16">+</operator> <name pos:start="217:18" pos:end="217:19">di</name></expr></argument>, <argument pos:start="217:22" pos:end="217:22"><expr pos:start="217:22" pos:end="217:22"><literal type="number" pos:start="217:22" pos:end="217:22">0</literal></expr></argument>, <argument pos:start="217:25" pos:end="217:52"><expr pos:start="217:25" pos:end="217:52"><name pos:start="217:25" pos:end="217:52">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:20"><expr pos:start="221:5" pos:end="221:19"><name pos:start="221:5" pos:end="221:13"><name pos:start="221:5" pos:end="221:7">nal</name><operator pos:start="221:8" pos:end="221:9">-&gt;</operator><name pos:start="221:10" pos:end="221:13">data</name></name> <operator pos:start="221:15" pos:end="221:15">=</operator> <name pos:start="221:17" pos:end="221:19">dst</name></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:19"><expr pos:start="223:5" pos:end="223:18"><name pos:start="223:5" pos:end="223:13"><name pos:start="223:5" pos:end="223:7">nal</name><operator pos:start="223:8" pos:end="223:9">-&gt;</operator><name pos:start="223:10" pos:end="223:13">size</name></name> <operator pos:start="223:15" pos:end="223:15">=</operator> <name pos:start="223:17" pos:end="223:18">di</name></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:24"><expr pos:start="225:5" pos:end="225:23"><name pos:start="225:5" pos:end="225:17"><name pos:start="225:5" pos:end="225:7">nal</name><operator pos:start="225:8" pos:end="225:9">-&gt;</operator><name pos:start="225:10" pos:end="225:17">raw_data</name></name> <operator pos:start="225:19" pos:end="225:19">=</operator> <name pos:start="225:21" pos:end="225:23">src</name></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:23"><expr pos:start="227:5" pos:end="227:22"><name pos:start="227:5" pos:end="227:17"><name pos:start="227:5" pos:end="227:7">nal</name><operator pos:start="227:8" pos:end="227:9">-&gt;</operator><name pos:start="227:10" pos:end="227:17">raw_size</name></name> <operator pos:start="227:19" pos:end="227:19">=</operator> <name pos:start="227:21" pos:end="227:22">si</name></expr>;</expr_stmt>

    <return pos:start="229:5" pos:end="229:14">return <expr pos:start="229:12" pos:end="229:13"><name pos:start="229:12" pos:end="229:13">si</name></expr>;</return>

</block_content>}</block></function>
</unit>
