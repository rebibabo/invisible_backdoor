<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23787.c" pos:tabs="8"><function pos:start="1:1" pos:end="395:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">build_pci_bus_end</name><parameter_list pos:start="1:30" pos:end="1:59">(<parameter pos:start="1:31" pos:end="1:41"><decl pos:start="1:31" pos:end="1:41"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:36">PCIBus</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">bus</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:58"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:58">bus_state</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="395:1">{<block_content pos:start="5:5" pos:end="393:18">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:33"><name pos:start="5:5" pos:end="5:31">AcpiBuildPciBusHotplugState</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:38">child</name> <init pos:start="5:40" pos:end="5:50">= <expr pos:start="5:42" pos:end="5:50"><name pos:start="5:42" pos:end="5:50">bus_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:33"><name pos:start="7:5" pos:end="7:31">AcpiBuildPciBusHotplugState</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:39">parent</name> <init pos:start="7:41" pos:end="7:55">= <expr pos:start="7:43" pos:end="7:55"><name pos:start="7:43" pos:end="7:55"><name pos:start="7:43" pos:end="7:47">child</name><operator pos:start="7:48" pos:end="7:49">-&gt;</operator><name pos:start="7:50" pos:end="7:55">parent</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">GArray</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:21">bus_table</name> <init pos:start="9:23" pos:end="9:43">= <expr pos:start="9:25" pos:end="9:43"><call pos:start="9:25" pos:end="9:43"><name pos:start="9:25" pos:end="9:41">build_alloc_array</name><argument_list pos:start="9:42" pos:end="9:43">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:54"><expr pos:start="11:5" pos:end="11:53"><call pos:start="11:5" pos:end="11:53"><name pos:start="11:5" pos:end="11:18">DECLARE_BITMAP</name><argument_list pos:start="11:19" pos:end="11:53">(<argument pos:start="11:20" pos:end="11:38"><expr pos:start="11:20" pos:end="11:38"><name pos:start="11:20" pos:end="11:38">slot_hotplug_enable</name></expr></argument>, <argument pos:start="11:41" pos:end="11:52"><expr pos:start="11:41" pos:end="11:52"><name pos:start="11:41" pos:end="11:52">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:54"><expr pos:start="13:5" pos:end="13:53"><call pos:start="13:5" pos:end="13:53"><name pos:start="13:5" pos:end="13:18">DECLARE_BITMAP</name><argument_list pos:start="13:19" pos:end="13:53">(<argument pos:start="13:20" pos:end="13:38"><expr pos:start="13:20" pos:end="13:38"><name pos:start="13:20" pos:end="13:38">slot_device_present</name></expr></argument>, <argument pos:start="13:41" pos:end="13:52"><expr pos:start="13:41" pos:end="13:52"><name pos:start="13:41" pos:end="13:52">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:53"><expr pos:start="15:5" pos:end="15:52"><call pos:start="15:5" pos:end="15:52"><name pos:start="15:5" pos:end="15:18">DECLARE_BITMAP</name><argument_list pos:start="15:19" pos:end="15:52">(<argument pos:start="15:20" pos:end="15:37"><expr pos:start="15:20" pos:end="15:37"><name pos:start="15:20" pos:end="15:37">slot_device_system</name></expr></argument>, <argument pos:start="15:40" pos:end="15:51"><expr pos:start="15:40" pos:end="15:51"><name pos:start="15:40" pos:end="15:51">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:50"><expr pos:start="17:5" pos:end="17:49"><call pos:start="17:5" pos:end="17:49"><name pos:start="17:5" pos:end="17:18">DECLARE_BITMAP</name><argument_list pos:start="17:19" pos:end="17:49">(<argument pos:start="17:20" pos:end="17:34"><expr pos:start="17:20" pos:end="17:34"><name pos:start="17:20" pos:end="17:34">slot_device_vga</name></expr></argument>, <argument pos:start="17:37" pos:end="17:48"><expr pos:start="17:37" pos:end="17:48"><name pos:start="17:37" pos:end="17:48">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:50"><expr pos:start="19:5" pos:end="19:49"><call pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:18">DECLARE_BITMAP</name><argument_list pos:start="19:19" pos:end="19:49">(<argument pos:start="19:20" pos:end="19:34"><expr pos:start="19:20" pos:end="19:34"><name pos:start="19:20" pos:end="19:34">slot_device_qxl</name></expr></argument>, <argument pos:start="19:37" pos:end="19:48"><expr pos:start="19:37" pos:end="19:48"><name pos:start="19:37" pos:end="19:48">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:14">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">QObject</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:17">bsel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">GArray</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:18">method</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:37"><decl pos:start="29:5" pos:end="29:36"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">bool</name></type> <name pos:start="29:10" pos:end="29:28">bus_hotplug_support</name> <init pos:start="29:30" pos:end="29:36">= <expr pos:start="29:32" pos:end="29:36"><name pos:start="29:32" pos:end="29:36">false</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="61:5"><if pos:start="33:5" pos:end="55:5">if <condition pos:start="33:8" pos:end="33:24">(<expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:11">bus</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:23">parent_dev</name></name></expr>)</condition> <block pos:start="33:26" pos:end="55:5">{<block_content pos:start="35:9" pos:end="53:64">

        <expr_stmt pos:start="35:9" pos:end="35:18"><expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:10">op</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:17">0x82</literal></expr>;</expr_stmt> <comment type="block" pos:start="35:20" pos:end="35:33">/* DeviceOp */</comment>

        <expr_stmt pos:start="37:9" pos:end="39:53"><expr pos:start="37:9" pos:end="39:52"><call pos:start="37:9" pos:end="39:52"><name pos:start="37:9" pos:end="37:28">build_append_nameseg</name><argument_list pos:start="37:29" pos:end="39:52">(<argument pos:start="37:30" pos:end="37:38"><expr pos:start="37:30" pos:end="37:38"><name pos:start="37:30" pos:end="37:38">bus_table</name></expr></argument>, <argument pos:start="37:41" pos:end="37:49"><expr pos:start="37:41" pos:end="37:49"><literal type="string" pos:start="37:41" pos:end="37:49">"S%.02X_"</literal></expr></argument>,

                             <argument pos:start="39:30" pos:end="39:51"><expr pos:start="39:30" pos:end="39:51"><name pos:start="39:30" pos:end="39:51"><name pos:start="39:30" pos:end="39:32">bus</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:44">parent_dev</name><operator pos:start="39:45" pos:end="39:46">-&gt;</operator><name pos:start="39:47" pos:end="39:51">devfn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><call pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:25">build_append_byte</name><argument_list pos:start="41:26" pos:end="41:42">(<argument pos:start="41:27" pos:end="41:35"><expr pos:start="41:27" pos:end="41:35"><name pos:start="41:27" pos:end="41:35">bus_table</name></expr></argument>, <argument pos:start="41:38" pos:end="41:41"><expr pos:start="41:38" pos:end="41:41"><literal type="number" pos:start="41:38" pos:end="41:41">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="41:45" pos:end="41:56">/* NameOp */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:48"><expr pos:start="43:9" pos:end="43:47"><call pos:start="43:9" pos:end="43:47"><name pos:start="43:9" pos:end="43:28">build_append_nameseg</name><argument_list pos:start="43:29" pos:end="43:47">(<argument pos:start="43:30" pos:end="43:38"><expr pos:start="43:30" pos:end="43:38"><name pos:start="43:30" pos:end="43:38">bus_table</name></expr></argument>, <argument pos:start="43:41" pos:end="43:46"><expr pos:start="43:41" pos:end="43:46"><literal type="string" pos:start="43:41" pos:end="43:46">"_SUN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:75"><expr pos:start="45:9" pos:end="45:74"><call pos:start="45:9" pos:end="45:74"><name pos:start="45:9" pos:end="45:26">build_append_value</name><argument_list pos:start="45:27" pos:end="45:74">(<argument pos:start="45:28" pos:end="45:36"><expr pos:start="45:28" pos:end="45:36"><name pos:start="45:28" pos:end="45:36">bus_table</name></expr></argument>, <argument pos:start="45:39" pos:end="45:70"><expr pos:start="45:39" pos:end="45:70"><call pos:start="45:39" pos:end="45:70"><name pos:start="45:39" pos:end="45:46">PCI_SLOT</name><argument_list pos:start="45:47" pos:end="45:70">(<argument pos:start="45:48" pos:end="45:69"><expr pos:start="45:48" pos:end="45:69"><name pos:start="45:48" pos:end="45:69"><name pos:start="45:48" pos:end="45:50">bus</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:62">parent_dev</name><operator pos:start="45:63" pos:end="45:64">-&gt;</operator><name pos:start="45:65" pos:end="45:69">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="45:73" pos:end="45:73"><expr pos:start="45:73" pos:end="45:73"><literal type="number" pos:start="45:73" pos:end="45:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:43"><expr pos:start="47:9" pos:end="47:42"><call pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:25">build_append_byte</name><argument_list pos:start="47:26" pos:end="47:42">(<argument pos:start="47:27" pos:end="47:35"><expr pos:start="47:27" pos:end="47:35"><name pos:start="47:27" pos:end="47:35">bus_table</name></expr></argument>, <argument pos:start="47:38" pos:end="47:41"><expr pos:start="47:38" pos:end="47:41"><literal type="number" pos:start="47:38" pos:end="47:41">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:45" pos:end="47:56">/* NameOp */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:48"><expr pos:start="49:9" pos:end="49:47"><call pos:start="49:9" pos:end="49:47"><name pos:start="49:9" pos:end="49:28">build_append_nameseg</name><argument_list pos:start="49:29" pos:end="49:47">(<argument pos:start="49:30" pos:end="49:38"><expr pos:start="49:30" pos:end="49:38"><name pos:start="49:30" pos:end="49:38">bus_table</name></expr></argument>, <argument pos:start="49:41" pos:end="49:46"><expr pos:start="49:41" pos:end="49:46"><literal type="string" pos:start="49:41" pos:end="49:46">"_ADR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="53:64"><expr pos:start="51:9" pos:end="53:63"><call pos:start="51:9" pos:end="53:63"><name pos:start="51:9" pos:end="51:26">build_append_value</name><argument_list pos:start="51:27" pos:end="53:63">(<argument pos:start="51:28" pos:end="51:36"><expr pos:start="51:28" pos:end="51:36"><name pos:start="51:28" pos:end="51:36">bus_table</name></expr></argument>, <argument pos:start="51:39" pos:end="53:59"><expr pos:start="51:39" pos:end="53:59"><operator pos:start="51:39" pos:end="51:39">(</operator><call pos:start="51:40" pos:end="51:71"><name pos:start="51:40" pos:end="51:47">PCI_SLOT</name><argument_list pos:start="51:48" pos:end="51:71">(<argument pos:start="51:49" pos:end="51:70"><expr pos:start="51:49" pos:end="51:70"><name pos:start="51:49" pos:end="51:70"><name pos:start="51:49" pos:end="51:51">bus</name><operator pos:start="51:52" pos:end="51:53">-&gt;</operator><name pos:start="51:54" pos:end="51:63">parent_dev</name><operator pos:start="51:64" pos:end="51:65">-&gt;</operator><name pos:start="51:66" pos:end="51:70">devfn</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:73" pos:end="51:74">&lt;&lt;</operator> <literal type="number" pos:start="51:76" pos:end="51:77">16</literal><operator pos:start="51:78" pos:end="51:78">)</operator> <operator pos:start="51:80" pos:end="51:80">|</operator>

                           <call pos:start="53:28" pos:end="53:59"><name pos:start="53:28" pos:end="53:35">PCI_FUNC</name><argument_list pos:start="53:36" pos:end="53:59">(<argument pos:start="53:37" pos:end="53:58"><expr pos:start="53:37" pos:end="53:58"><name pos:start="53:37" pos:end="53:58"><name pos:start="53:37" pos:end="53:39">bus</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:51">parent_dev</name><operator pos:start="53:52" pos:end="53:53">-&gt;</operator><name pos:start="53:54" pos:end="53:58">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:62" pos:end="53:62"><expr pos:start="53:62" pos:end="53:62"><literal type="number" pos:start="53:62" pos:end="53:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="61:5">else <block pos:start="55:12" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:48">

        <expr_stmt pos:start="57:9" pos:end="57:18"><expr pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:10">op</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:17">0x10</literal></expr>;</expr_stmt> <comment type="block" pos:start="57:20" pos:end="57:32">/* ScopeOp */</comment><empty_stmt pos:start="57:33" pos:end="57:33">;</empty_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><call pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:28">build_append_nameseg</name><argument_list pos:start="59:29" pos:end="59:47">(<argument pos:start="59:30" pos:end="59:38"><expr pos:start="59:30" pos:end="59:38"><name pos:start="59:30" pos:end="59:38">bus_table</name></expr></argument>, <argument pos:start="59:41" pos:end="59:46"><expr pos:start="59:41" pos:end="59:46"><literal type="string" pos:start="59:41" pos:end="59:46">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:80"><expr pos:start="65:5" pos:end="65:79"><name pos:start="65:5" pos:end="65:8">bsel</name> <operator pos:start="65:10" pos:end="65:10">=</operator> <call pos:start="65:12" pos:end="65:79"><name pos:start="65:12" pos:end="65:38">object_property_get_qobject</name><argument_list pos:start="65:39" pos:end="65:79">(<argument pos:start="65:40" pos:end="65:50"><expr pos:start="65:40" pos:end="65:50"><call pos:start="65:40" pos:end="65:50"><name pos:start="65:40" pos:end="65:45">OBJECT</name><argument_list pos:start="65:46" pos:end="65:50">(<argument pos:start="65:47" pos:end="65:49"><expr pos:start="65:47" pos:end="65:49"><name pos:start="65:47" pos:end="65:49">bus</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:53" pos:end="65:72"><expr pos:start="65:53" pos:end="65:72"><name pos:start="65:53" pos:end="65:72">ACPI_PCIHP_PROP_BSEL</name></expr></argument>, <argument pos:start="65:75" pos:end="65:78"><expr pos:start="65:75" pos:end="65:78"><name pos:start="65:75" pos:end="65:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="83:5"><if pos:start="67:5" pos:end="77:5">if <condition pos:start="67:8" pos:end="67:13">(<expr pos:start="67:9" pos:end="67:12"><name pos:start="67:9" pos:end="67:12">bsel</name></expr>)</condition> <block pos:start="67:15" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:70">

        <expr_stmt pos:start="69:9" pos:end="69:43"><expr pos:start="69:9" pos:end="69:42"><call pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:25">build_append_byte</name><argument_list pos:start="69:26" pos:end="69:42">(<argument pos:start="69:27" pos:end="69:35"><expr pos:start="69:27" pos:end="69:35"><name pos:start="69:27" pos:end="69:35">bus_table</name></expr></argument>, <argument pos:start="69:38" pos:end="69:41"><expr pos:start="69:38" pos:end="69:41"><literal type="number" pos:start="69:38" pos:end="69:41">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="69:45" pos:end="69:56">/* NameOp */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:48"><expr pos:start="71:9" pos:end="71:47"><call pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:28">build_append_nameseg</name><argument_list pos:start="71:29" pos:end="71:47">(<argument pos:start="71:30" pos:end="71:38"><expr pos:start="71:30" pos:end="71:38"><name pos:start="71:30" pos:end="71:38">bus_table</name></expr></argument>, <argument pos:start="71:41" pos:end="71:46"><expr pos:start="71:41" pos:end="71:46"><literal type="string" pos:start="71:41" pos:end="71:46">"BSEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:73"><expr pos:start="73:9" pos:end="73:72"><call pos:start="73:9" pos:end="73:72"><name pos:start="73:9" pos:end="73:24">build_append_int</name><argument_list pos:start="73:25" pos:end="73:72">(<argument pos:start="73:26" pos:end="73:34"><expr pos:start="73:26" pos:end="73:34"><name pos:start="73:26" pos:end="73:34">bus_table</name></expr></argument>, <argument pos:start="73:37" pos:end="73:71"><expr pos:start="73:37" pos:end="73:71"><call pos:start="73:37" pos:end="73:71"><name pos:start="73:37" pos:end="73:48">qint_get_int</name><argument_list pos:start="73:49" pos:end="73:71">(<argument pos:start="73:50" pos:end="73:70"><expr pos:start="73:50" pos:end="73:70"><call pos:start="73:50" pos:end="73:70"><name pos:start="73:50" pos:end="73:64">qobject_to_qint</name><argument_list pos:start="73:65" pos:end="73:70">(<argument pos:start="73:66" pos:end="73:69"><expr pos:start="73:66" pos:end="73:69"><name pos:start="73:66" pos:end="73:69">bsel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:70"><expr pos:start="75:9" pos:end="75:69"><call pos:start="75:9" pos:end="75:69"><name pos:start="75:9" pos:end="75:14">memset</name><argument_list pos:start="75:15" pos:end="75:69">(<argument pos:start="75:16" pos:end="75:34"><expr pos:start="75:16" pos:end="75:34"><name pos:start="75:16" pos:end="75:34">slot_hotplug_enable</name></expr></argument>, <argument pos:start="75:37" pos:end="75:40"><expr pos:start="75:37" pos:end="75:40"><literal type="number" pos:start="75:37" pos:end="75:40">0xff</literal></expr></argument>, <argument pos:start="75:43" pos:end="75:68"><expr pos:start="75:43" pos:end="75:68"><sizeof pos:start="75:43" pos:end="75:68">sizeof <name pos:start="75:50" pos:end="75:68">slot_hotplug_enable</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="83:5">else <block pos:start="77:12" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:70">

        <comment type="block" pos:start="79:9" pos:end="79:50">/* No bsel - no slots are hot-pluggable */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:70"><expr pos:start="81:9" pos:end="81:69"><call pos:start="81:9" pos:end="81:69"><name pos:start="81:9" pos:end="81:14">memset</name><argument_list pos:start="81:15" pos:end="81:69">(<argument pos:start="81:16" pos:end="81:34"><expr pos:start="81:16" pos:end="81:34"><name pos:start="81:16" pos:end="81:34">slot_hotplug_enable</name></expr></argument>, <argument pos:start="81:37" pos:end="81:40"><expr pos:start="81:37" pos:end="81:40"><literal type="number" pos:start="81:37" pos:end="81:40">0x00</literal></expr></argument>, <argument pos:start="81:43" pos:end="81:68"><expr pos:start="81:43" pos:end="81:68"><sizeof pos:start="81:43" pos:end="81:68">sizeof <name pos:start="81:50" pos:end="81:68">slot_hotplug_enable</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:66"><expr pos:start="87:5" pos:end="87:65"><call pos:start="87:5" pos:end="87:65"><name pos:start="87:5" pos:end="87:10">memset</name><argument_list pos:start="87:11" pos:end="87:65">(<argument pos:start="87:12" pos:end="87:30"><expr pos:start="87:12" pos:end="87:30"><name pos:start="87:12" pos:end="87:30">slot_device_present</name></expr></argument>, <argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><literal type="number" pos:start="87:33" pos:end="87:36">0x00</literal></expr></argument>, <argument pos:start="87:39" pos:end="87:64"><expr pos:start="87:39" pos:end="87:64"><sizeof pos:start="87:39" pos:end="87:64">sizeof <name pos:start="87:46" pos:end="87:64">slot_device_present</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:65"><expr pos:start="89:5" pos:end="89:64"><call pos:start="89:5" pos:end="89:64"><name pos:start="89:5" pos:end="89:10">memset</name><argument_list pos:start="89:11" pos:end="89:64">(<argument pos:start="89:12" pos:end="89:29"><expr pos:start="89:12" pos:end="89:29"><name pos:start="89:12" pos:end="89:29">slot_device_system</name></expr></argument>, <argument pos:start="89:32" pos:end="89:35"><expr pos:start="89:32" pos:end="89:35"><literal type="number" pos:start="89:32" pos:end="89:35">0x00</literal></expr></argument>, <argument pos:start="89:38" pos:end="89:63"><expr pos:start="89:38" pos:end="89:63"><sizeof pos:start="89:38" pos:end="89:63">sizeof <name pos:start="89:45" pos:end="89:63">slot_device_present</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:58"><expr pos:start="91:5" pos:end="91:57"><call pos:start="91:5" pos:end="91:57"><name pos:start="91:5" pos:end="91:10">memset</name><argument_list pos:start="91:11" pos:end="91:57">(<argument pos:start="91:12" pos:end="91:26"><expr pos:start="91:12" pos:end="91:26"><name pos:start="91:12" pos:end="91:26">slot_device_vga</name></expr></argument>, <argument pos:start="91:29" pos:end="91:32"><expr pos:start="91:29" pos:end="91:32"><literal type="number" pos:start="91:29" pos:end="91:32">0x00</literal></expr></argument>, <argument pos:start="91:35" pos:end="91:56"><expr pos:start="91:35" pos:end="91:56"><sizeof pos:start="91:35" pos:end="91:56">sizeof <name pos:start="91:42" pos:end="91:56">slot_device_vga</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:58"><expr pos:start="93:5" pos:end="93:57"><call pos:start="93:5" pos:end="93:57"><name pos:start="93:5" pos:end="93:10">memset</name><argument_list pos:start="93:11" pos:end="93:57">(<argument pos:start="93:12" pos:end="93:26"><expr pos:start="93:12" pos:end="93:26"><name pos:start="93:12" pos:end="93:26">slot_device_qxl</name></expr></argument>, <argument pos:start="93:29" pos:end="93:32"><expr pos:start="93:29" pos:end="93:32"><literal type="number" pos:start="93:29" pos:end="93:32">0x00</literal></expr></argument>, <argument pos:start="93:35" pos:end="93:56"><expr pos:start="93:35" pos:end="93:56"><sizeof pos:start="93:35" pos:end="93:56">sizeof <name pos:start="93:42" pos:end="93:56">slot_device_qxl</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="97:5" pos:end="155:5">for <control pos:start="97:9" pos:end="97:64">(<init pos:start="97:10" pos:end="97:15"><expr pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">i</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>;</init> <condition pos:start="97:17" pos:end="97:45"><expr pos:start="97:17" pos:end="97:44"><name pos:start="97:17" pos:end="97:17">i</name> <operator pos:start="97:19" pos:end="97:19">&lt;</operator> <call pos:start="97:21" pos:end="97:44"><name pos:start="97:21" pos:end="97:30">ARRAY_SIZE</name><argument_list pos:start="97:31" pos:end="97:44">(<argument pos:start="97:32" pos:end="97:43"><expr pos:start="97:32" pos:end="97:43"><name pos:start="97:32" pos:end="97:43"><name pos:start="97:32" pos:end="97:34">bus</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:43">devices</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="97:47" pos:end="97:63"><expr pos:start="97:47" pos:end="97:63"><name pos:start="97:47" pos:end="97:47">i</name> <operator pos:start="97:49" pos:end="97:50">+=</operator> <name pos:start="97:52" pos:end="97:63">PCI_FUNC_MAX</name></expr></incr>)</control> <block pos:start="97:66" pos:end="155:5">{<block_content pos:start="99:9" pos:end="153:9">

        <decl_stmt pos:start="99:9" pos:end="99:24"><decl pos:start="99:9" pos:end="99:23"><type pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:19">DeviceClass</name> <modifier pos:start="99:21" pos:end="99:21">*</modifier></type><name pos:start="99:22" pos:end="99:23">dc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="101:9" pos:end="101:27"><decl pos:start="101:9" pos:end="101:26"><type pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:22">PCIDeviceClass</name> <modifier pos:start="101:24" pos:end="101:24">*</modifier></type><name pos:start="101:25" pos:end="101:26">pc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:42"><decl pos:start="103:9" pos:end="103:41"><type pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:17">PCIDevice</name> <modifier pos:start="103:19" pos:end="103:19">*</modifier></type><name pos:start="103:20" pos:end="103:23">pdev</name> <init pos:start="103:25" pos:end="103:41">= <expr pos:start="103:27" pos:end="103:41"><name pos:start="103:27" pos:end="103:41"><name pos:start="103:27" pos:end="103:29">bus</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:38">devices</name><index pos:start="103:39" pos:end="103:41">[<expr pos:start="103:40" pos:end="103:40"><name pos:start="103:40" pos:end="103:40">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="105:9" pos:end="105:31"><decl pos:start="105:9" pos:end="105:30"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:16">slot</name> <init pos:start="105:18" pos:end="105:30">= <expr pos:start="105:20" pos:end="105:30"><call pos:start="105:20" pos:end="105:30"><name pos:start="105:20" pos:end="105:27">PCI_SLOT</name><argument_list pos:start="105:28" pos:end="105:30">(<argument pos:start="105:29" pos:end="105:29"><expr pos:start="105:29" pos:end="105:29"><name pos:start="105:29" pos:end="105:29">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:18">(<expr pos:start="109:13" pos:end="109:17"><operator pos:start="109:13" pos:end="109:13">!</operator><name pos:start="109:14" pos:end="109:17">pdev</name></expr>)</condition> <block pos:start="109:20" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:21">

            <continue pos:start="111:13" pos:end="111:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:43"><expr pos:start="117:9" pos:end="117:42"><call pos:start="117:9" pos:end="117:42"><name pos:start="117:9" pos:end="117:15">set_bit</name><argument_list pos:start="117:16" pos:end="117:42">(<argument pos:start="117:17" pos:end="117:20"><expr pos:start="117:17" pos:end="117:20"><name pos:start="117:17" pos:end="117:20">slot</name></expr></argument>, <argument pos:start="117:23" pos:end="117:41"><expr pos:start="117:23" pos:end="117:41"><name pos:start="117:23" pos:end="117:41">slot_device_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:40"><expr pos:start="119:9" pos:end="119:39"><name pos:start="119:9" pos:end="119:10">pc</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <call pos:start="119:14" pos:end="119:39"><name pos:start="119:14" pos:end="119:33">PCI_DEVICE_GET_CLASS</name><argument_list pos:start="119:34" pos:end="119:39">(<argument pos:start="119:35" pos:end="119:38"><expr pos:start="119:35" pos:end="119:38"><name pos:start="119:35" pos:end="119:38">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:36"><expr pos:start="121:9" pos:end="121:35"><name pos:start="121:9" pos:end="121:10">dc</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <call pos:start="121:14" pos:end="121:35"><name pos:start="121:14" pos:end="121:29">DEVICE_GET_CLASS</name><argument_list pos:start="121:30" pos:end="121:35">(<argument pos:start="121:31" pos:end="121:34"><expr pos:start="121:31" pos:end="121:34"><name pos:start="121:31" pos:end="121:34">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="125:9" pos:end="129:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:49">(<expr pos:start="125:13" pos:end="125:48"><name pos:start="125:13" pos:end="125:24"><name pos:start="125:13" pos:end="125:14">pc</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:24">class_id</name></name> <operator pos:start="125:26" pos:end="125:27">==</operator> <name pos:start="125:29" pos:end="125:48">PCI_CLASS_BRIDGE_ISA</name></expr>)</condition> <block pos:start="125:51" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:46">

            <expr_stmt pos:start="127:13" pos:end="127:46"><expr pos:start="127:13" pos:end="127:45"><call pos:start="127:13" pos:end="127:45"><name pos:start="127:13" pos:end="127:19">set_bit</name><argument_list pos:start="127:20" pos:end="127:45">(<argument pos:start="127:21" pos:end="127:24"><expr pos:start="127:21" pos:end="127:24"><name pos:start="127:21" pos:end="127:24">slot</name></expr></argument>, <argument pos:start="127:27" pos:end="127:44"><expr pos:start="127:27" pos:end="127:44"><name pos:start="127:27" pos:end="127:44">slot_device_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="133:9" pos:end="145:9"><if pos:start="133:9" pos:end="145:9">if <condition pos:start="133:12" pos:end="133:50">(<expr pos:start="133:13" pos:end="133:49"><name pos:start="133:13" pos:end="133:24"><name pos:start="133:13" pos:end="133:14">pc</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:24">class_id</name></name> <operator pos:start="133:26" pos:end="133:27">==</operator> <name pos:start="133:29" pos:end="133:49">PCI_CLASS_DISPLAY_VGA</name></expr>)</condition> <block pos:start="133:52" pos:end="145:9">{<block_content pos:start="135:13" pos:end="143:13">

            <expr_stmt pos:start="135:13" pos:end="135:43"><expr pos:start="135:13" pos:end="135:42"><call pos:start="135:13" pos:end="135:42"><name pos:start="135:13" pos:end="135:19">set_bit</name><argument_list pos:start="135:20" pos:end="135:42">(<argument pos:start="135:21" pos:end="135:24"><expr pos:start="135:21" pos:end="135:24"><name pos:start="135:21" pos:end="135:24">slot</name></expr></argument>, <argument pos:start="135:27" pos:end="135:41"><expr pos:start="135:27" pos:end="135:41"><name pos:start="135:27" pos:end="135:41">slot_device_vga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:61">(<expr pos:start="139:17" pos:end="139:60"><call pos:start="139:17" pos:end="139:60"><name pos:start="139:17" pos:end="139:35">object_dynamic_cast</name><argument_list pos:start="139:36" pos:end="139:60">(<argument pos:start="139:37" pos:end="139:48"><expr pos:start="139:37" pos:end="139:48"><call pos:start="139:37" pos:end="139:48"><name pos:start="139:37" pos:end="139:42">OBJECT</name><argument_list pos:start="139:43" pos:end="139:48">(<argument pos:start="139:44" pos:end="139:47"><expr pos:start="139:44" pos:end="139:47"><name pos:start="139:44" pos:end="139:47">pdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="139:51" pos:end="139:59"><expr pos:start="139:51" pos:end="139:59"><literal type="string" pos:start="139:51" pos:end="139:59">"qxl-vga"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:63" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:47">

                <expr_stmt pos:start="141:17" pos:end="141:47"><expr pos:start="141:17" pos:end="141:46"><call pos:start="141:17" pos:end="141:46"><name pos:start="141:17" pos:end="141:23">set_bit</name><argument_list pos:start="141:24" pos:end="141:46">(<argument pos:start="141:25" pos:end="141:28"><expr pos:start="141:25" pos:end="141:28"><name pos:start="141:25" pos:end="141:28">slot</name></expr></argument>, <argument pos:start="141:31" pos:end="141:45"><expr pos:start="141:31" pos:end="141:45"><name pos:start="141:31" pos:end="141:45">slot_device_qxl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="149:9" pos:end="153:9"><if pos:start="149:9" pos:end="153:9">if <condition pos:start="149:12" pos:end="149:47">(<expr pos:start="149:13" pos:end="149:46"><operator pos:start="149:13" pos:end="149:13">!</operator><name pos:start="149:14" pos:end="149:29"><name pos:start="149:14" pos:end="149:15">dc</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:29">hotpluggable</name></name> <operator pos:start="149:31" pos:end="149:32">||</operator> <name pos:start="149:34" pos:end="149:46"><name pos:start="149:34" pos:end="149:35">pc</name><operator pos:start="149:36" pos:end="149:37">-&gt;</operator><name pos:start="149:38" pos:end="149:46">is_bridge</name></name></expr>)</condition> <block pos:start="149:49" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:49">

            <expr_stmt pos:start="151:13" pos:end="151:49"><expr pos:start="151:13" pos:end="151:48"><call pos:start="151:13" pos:end="151:48"><name pos:start="151:13" pos:end="151:21">clear_bit</name><argument_list pos:start="151:22" pos:end="151:48">(<argument pos:start="151:23" pos:end="151:26"><expr pos:start="151:23" pos:end="151:26"><name pos:start="151:23" pos:end="151:26">slot</name></expr></argument>, <argument pos:start="151:29" pos:end="151:47"><expr pos:start="151:29" pos:end="151:47"><name pos:start="151:29" pos:end="151:47">slot_hotplug_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="159:5" pos:end="159:44">/* Append Device object for each slot */</comment>

    <for pos:start="161:5" pos:end="221:5">for <control pos:start="161:9" pos:end="161:38">(<init pos:start="161:10" pos:end="161:15"><expr pos:start="161:10" pos:end="161:14"><name pos:start="161:10" pos:end="161:10">i</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <literal type="number" pos:start="161:14" pos:end="161:14">0</literal></expr>;</init> <condition pos:start="161:17" pos:end="161:33"><expr pos:start="161:17" pos:end="161:32"><name pos:start="161:17" pos:end="161:17">i</name> <operator pos:start="161:19" pos:end="161:19">&lt;</operator> <name pos:start="161:21" pos:end="161:32">PCI_SLOT_MAX</name></expr>;</condition> <incr pos:start="161:35" pos:end="161:37"><expr pos:start="161:35" pos:end="161:37"><name pos:start="161:35" pos:end="161:35">i</name><operator pos:start="161:36" pos:end="161:37">++</operator></expr></incr>)</control> <block pos:start="161:40" pos:end="221:5">{<block_content pos:start="163:9" pos:end="219:9">

        <decl_stmt pos:start="163:9" pos:end="163:58"><decl pos:start="163:9" pos:end="163:57"><type pos:start="163:9" pos:end="163:12"><name pos:start="163:9" pos:end="163:12">bool</name></type> <name pos:start="163:14" pos:end="163:22">can_eject</name> <init pos:start="163:24" pos:end="163:57">= <expr pos:start="163:26" pos:end="163:57"><call pos:start="163:26" pos:end="163:57"><name pos:start="163:26" pos:end="163:33">test_bit</name><argument_list pos:start="163:34" pos:end="163:57">(<argument pos:start="163:35" pos:end="163:35"><expr pos:start="163:35" pos:end="163:35"><name pos:start="163:35" pos:end="163:35">i</name></expr></argument>, <argument pos:start="163:38" pos:end="163:56"><expr pos:start="163:38" pos:end="163:56"><name pos:start="163:38" pos:end="163:56">slot_hotplug_enable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:56"><decl pos:start="165:9" pos:end="165:55"><type pos:start="165:9" pos:end="165:12"><name pos:start="165:9" pos:end="165:12">bool</name></type> <name pos:start="165:14" pos:end="165:20">present</name> <init pos:start="165:22" pos:end="165:55">= <expr pos:start="165:24" pos:end="165:55"><call pos:start="165:24" pos:end="165:55"><name pos:start="165:24" pos:end="165:31">test_bit</name><argument_list pos:start="165:32" pos:end="165:55">(<argument pos:start="165:33" pos:end="165:33"><expr pos:start="165:33" pos:end="165:33"><name pos:start="165:33" pos:end="165:33">i</name></expr></argument>, <argument pos:start="165:36" pos:end="165:54"><expr pos:start="165:36" pos:end="165:54"><name pos:start="165:36" pos:end="165:54">slot_device_present</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="167:9" pos:end="167:48"><decl pos:start="167:9" pos:end="167:47"><type pos:start="167:9" pos:end="167:12"><name pos:start="167:9" pos:end="167:12">bool</name></type> <name pos:start="167:14" pos:end="167:16">vga</name> <init pos:start="167:18" pos:end="167:47">= <expr pos:start="167:20" pos:end="167:47"><call pos:start="167:20" pos:end="167:47"><name pos:start="167:20" pos:end="167:27">test_bit</name><argument_list pos:start="167:28" pos:end="167:47">(<argument pos:start="167:29" pos:end="167:29"><expr pos:start="167:29" pos:end="167:29"><name pos:start="167:29" pos:end="167:29">i</name></expr></argument>, <argument pos:start="167:32" pos:end="167:46"><expr pos:start="167:32" pos:end="167:46"><name pos:start="167:32" pos:end="167:46">slot_device_vga</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="169:9" pos:end="169:48"><decl pos:start="169:9" pos:end="169:47"><type pos:start="169:9" pos:end="169:12"><name pos:start="169:9" pos:end="169:12">bool</name></type> <name pos:start="169:14" pos:end="169:16">qxl</name> <init pos:start="169:18" pos:end="169:47">= <expr pos:start="169:20" pos:end="169:47"><call pos:start="169:20" pos:end="169:47"><name pos:start="169:20" pos:end="169:27">test_bit</name><argument_list pos:start="169:28" pos:end="169:47">(<argument pos:start="169:29" pos:end="169:29"><expr pos:start="169:29" pos:end="169:29"><name pos:start="169:29" pos:end="169:29">i</name></expr></argument>, <argument pos:start="169:32" pos:end="169:46"><expr pos:start="169:32" pos:end="169:46"><name pos:start="169:32" pos:end="169:46">slot_device_qxl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="171:9" pos:end="171:54"><decl pos:start="171:9" pos:end="171:53"><type pos:start="171:9" pos:end="171:12"><name pos:start="171:9" pos:end="171:12">bool</name></type> <name pos:start="171:14" pos:end="171:19">system</name> <init pos:start="171:21" pos:end="171:53">= <expr pos:start="171:23" pos:end="171:53"><call pos:start="171:23" pos:end="171:53"><name pos:start="171:23" pos:end="171:30">test_bit</name><argument_list pos:start="171:31" pos:end="171:53">(<argument pos:start="171:32" pos:end="171:32"><expr pos:start="171:32" pos:end="171:32"><name pos:start="171:32" pos:end="171:32">i</name></expr></argument>, <argument pos:start="171:35" pos:end="171:52"><expr pos:start="171:35" pos:end="171:52"><name pos:start="171:35" pos:end="171:52">slot_device_system</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="173:9" pos:end="219:9"><if pos:start="173:9" pos:end="185:9">if <condition pos:start="173:12" pos:end="173:22">(<expr pos:start="173:13" pos:end="173:21"><name pos:start="173:13" pos:end="173:21">can_eject</name></expr>)</condition> <block pos:start="173:24" pos:end="185:9">{<block_content pos:start="175:13" pos:end="183:39">

            <decl_stmt pos:start="175:13" pos:end="177:60"><decl pos:start="175:13" pos:end="177:59"><type pos:start="175:13" pos:end="175:18"><name pos:start="175:13" pos:end="175:16">void</name> <modifier pos:start="175:18" pos:end="175:18">*</modifier></type><name pos:start="175:19" pos:end="175:23">pcihp</name> <init pos:start="175:25" pos:end="177:59">= <expr pos:start="175:27" pos:end="177:59"><call pos:start="175:27" pos:end="177:59"><name pos:start="175:27" pos:end="175:40">acpi_data_push</name><argument_list pos:start="175:41" pos:end="177:59">(<argument pos:start="175:42" pos:end="175:50"><expr pos:start="175:42" pos:end="175:50"><name pos:start="175:42" pos:end="175:50">bus_table</name></expr></argument>,

                                         <argument pos:start="177:42" pos:end="177:58"><expr pos:start="177:42" pos:end="177:58"><name pos:start="177:42" pos:end="177:58">ACPI_PCIHP_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:61"><expr pos:start="179:13" pos:end="179:60"><call pos:start="179:13" pos:end="179:60"><name pos:start="179:13" pos:end="179:18">memcpy</name><argument_list pos:start="179:19" pos:end="179:60">(<argument pos:start="179:20" pos:end="179:24"><expr pos:start="179:20" pos:end="179:24"><name pos:start="179:20" pos:end="179:24">pcihp</name></expr></argument>, <argument pos:start="179:27" pos:end="179:40"><expr pos:start="179:27" pos:end="179:40"><name pos:start="179:27" pos:end="179:40">ACPI_PCIHP_AML</name></expr></argument>, <argument pos:start="179:43" pos:end="179:59"><expr pos:start="179:43" pos:end="179:59"><name pos:start="179:43" pos:end="179:59">ACPI_PCIHP_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:34"><expr pos:start="181:13" pos:end="181:33"><call pos:start="181:13" pos:end="181:33"><name pos:start="181:13" pos:end="181:23">patch_pcihp</name><argument_list pos:start="181:24" pos:end="181:33">(<argument pos:start="181:25" pos:end="181:25"><expr pos:start="181:25" pos:end="181:25"><name pos:start="181:25" pos:end="181:25">i</name></expr></argument>, <argument pos:start="181:28" pos:end="181:32"><expr pos:start="181:28" pos:end="181:32"><name pos:start="181:28" pos:end="181:32">pcihp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:31">bus_hotplug_support</name> <operator pos:start="183:33" pos:end="183:33">=</operator> <name pos:start="183:35" pos:end="183:38">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="185:11" pos:end="195:9">else if <condition pos:start="185:19" pos:end="185:23">(<expr pos:start="185:20" pos:end="185:22"><name pos:start="185:20" pos:end="185:22">qxl</name></expr>)</condition> <block pos:start="185:25" pos:end="195:9">{<block_content pos:start="187:13" pos:end="193:35">

            <decl_stmt pos:start="187:13" pos:end="189:61"><decl pos:start="187:13" pos:end="189:60"><type pos:start="187:13" pos:end="187:18"><name pos:start="187:13" pos:end="187:16">void</name> <modifier pos:start="187:18" pos:end="187:18">*</modifier></type><name pos:start="187:19" pos:end="187:23">pcihp</name> <init pos:start="187:25" pos:end="189:60">= <expr pos:start="187:27" pos:end="189:60"><call pos:start="187:27" pos:end="189:60"><name pos:start="187:27" pos:end="187:40">acpi_data_push</name><argument_list pos:start="187:41" pos:end="189:60">(<argument pos:start="187:42" pos:end="187:50"><expr pos:start="187:42" pos:end="187:50"><name pos:start="187:42" pos:end="187:50">bus_table</name></expr></argument>,

                                         <argument pos:start="189:42" pos:end="189:59"><expr pos:start="189:42" pos:end="189:59"><name pos:start="189:42" pos:end="189:59">ACPI_PCIQXL_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:63"><expr pos:start="191:13" pos:end="191:62"><call pos:start="191:13" pos:end="191:62"><name pos:start="191:13" pos:end="191:18">memcpy</name><argument_list pos:start="191:19" pos:end="191:62">(<argument pos:start="191:20" pos:end="191:24"><expr pos:start="191:20" pos:end="191:24"><name pos:start="191:20" pos:end="191:24">pcihp</name></expr></argument>, <argument pos:start="191:27" pos:end="191:41"><expr pos:start="191:27" pos:end="191:41"><name pos:start="191:27" pos:end="191:41">ACPI_PCIQXL_AML</name></expr></argument>, <argument pos:start="191:44" pos:end="191:61"><expr pos:start="191:44" pos:end="191:61"><name pos:start="191:44" pos:end="191:61">ACPI_PCIQXL_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:35"><expr pos:start="193:13" pos:end="193:34"><call pos:start="193:13" pos:end="193:34"><name pos:start="193:13" pos:end="193:24">patch_pciqxl</name><argument_list pos:start="193:25" pos:end="193:34">(<argument pos:start="193:26" pos:end="193:26"><expr pos:start="193:26" pos:end="193:26"><name pos:start="193:26" pos:end="193:26">i</name></expr></argument>, <argument pos:start="193:29" pos:end="193:33"><expr pos:start="193:29" pos:end="193:33"><name pos:start="193:29" pos:end="193:33">pcihp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="195:11" pos:end="205:9">else if <condition pos:start="195:19" pos:end="195:23">(<expr pos:start="195:20" pos:end="195:22"><name pos:start="195:20" pos:end="195:22">vga</name></expr>)</condition> <block pos:start="195:25" pos:end="205:9">{<block_content pos:start="197:13" pos:end="203:35">

            <decl_stmt pos:start="197:13" pos:end="199:61"><decl pos:start="197:13" pos:end="199:60"><type pos:start="197:13" pos:end="197:18"><name pos:start="197:13" pos:end="197:16">void</name> <modifier pos:start="197:18" pos:end="197:18">*</modifier></type><name pos:start="197:19" pos:end="197:23">pcihp</name> <init pos:start="197:25" pos:end="199:60">= <expr pos:start="197:27" pos:end="199:60"><call pos:start="197:27" pos:end="199:60"><name pos:start="197:27" pos:end="197:40">acpi_data_push</name><argument_list pos:start="197:41" pos:end="199:60">(<argument pos:start="197:42" pos:end="197:50"><expr pos:start="197:42" pos:end="197:50"><name pos:start="197:42" pos:end="197:50">bus_table</name></expr></argument>,

                                         <argument pos:start="199:42" pos:end="199:59"><expr pos:start="199:42" pos:end="199:59"><name pos:start="199:42" pos:end="199:59">ACPI_PCIVGA_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:63"><expr pos:start="201:13" pos:end="201:62"><call pos:start="201:13" pos:end="201:62"><name pos:start="201:13" pos:end="201:18">memcpy</name><argument_list pos:start="201:19" pos:end="201:62">(<argument pos:start="201:20" pos:end="201:24"><expr pos:start="201:20" pos:end="201:24"><name pos:start="201:20" pos:end="201:24">pcihp</name></expr></argument>, <argument pos:start="201:27" pos:end="201:41"><expr pos:start="201:27" pos:end="201:41"><name pos:start="201:27" pos:end="201:41">ACPI_PCIVGA_AML</name></expr></argument>, <argument pos:start="201:44" pos:end="201:61"><expr pos:start="201:44" pos:end="201:61"><name pos:start="201:44" pos:end="201:61">ACPI_PCIVGA_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:35"><expr pos:start="203:13" pos:end="203:34"><call pos:start="203:13" pos:end="203:34"><name pos:start="203:13" pos:end="203:24">patch_pcivga</name><argument_list pos:start="203:25" pos:end="203:34">(<argument pos:start="203:26" pos:end="203:26"><expr pos:start="203:26" pos:end="203:26"><name pos:start="203:26" pos:end="203:26">i</name></expr></argument>, <argument pos:start="203:29" pos:end="203:33"><expr pos:start="203:29" pos:end="203:33"><name pos:start="203:29" pos:end="203:33">pcihp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="205:11" pos:end="209:9">else if <condition pos:start="205:19" pos:end="205:26">(<expr pos:start="205:20" pos:end="205:25"><name pos:start="205:20" pos:end="205:25">system</name></expr>)</condition> <block pos:start="205:28" pos:end="209:9">{<block_content>

            <comment type="block" pos:start="207:13" pos:end="207:60">/* Nothing to do: system devices are in DSDT. */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="209:11" pos:end="219:9">else if <condition pos:start="209:19" pos:end="209:27">(<expr pos:start="209:20" pos:end="209:26"><name pos:start="209:20" pos:end="209:26">present</name></expr>)</condition> <block pos:start="209:29" pos:end="219:9">{<block_content pos:start="211:13" pos:end="217:36">

            <decl_stmt pos:start="211:13" pos:end="213:62"><decl pos:start="211:13" pos:end="213:61"><type pos:start="211:13" pos:end="211:18"><name pos:start="211:13" pos:end="211:16">void</name> <modifier pos:start="211:18" pos:end="211:18">*</modifier></type><name pos:start="211:19" pos:end="211:23">pcihp</name> <init pos:start="211:25" pos:end="213:61">= <expr pos:start="211:27" pos:end="213:61"><call pos:start="211:27" pos:end="213:61"><name pos:start="211:27" pos:end="211:40">acpi_data_push</name><argument_list pos:start="211:41" pos:end="213:61">(<argument pos:start="211:42" pos:end="211:50"><expr pos:start="211:42" pos:end="211:50"><name pos:start="211:42" pos:end="211:50">bus_table</name></expr></argument>,

                                         <argument pos:start="213:42" pos:end="213:60"><expr pos:start="213:42" pos:end="213:60"><name pos:start="213:42" pos:end="213:60">ACPI_PCINOHP_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:65"><expr pos:start="215:13" pos:end="215:64"><call pos:start="215:13" pos:end="215:64"><name pos:start="215:13" pos:end="215:18">memcpy</name><argument_list pos:start="215:19" pos:end="215:64">(<argument pos:start="215:20" pos:end="215:24"><expr pos:start="215:20" pos:end="215:24"><name pos:start="215:20" pos:end="215:24">pcihp</name></expr></argument>, <argument pos:start="215:27" pos:end="215:42"><expr pos:start="215:27" pos:end="215:42"><name pos:start="215:27" pos:end="215:42">ACPI_PCINOHP_AML</name></expr></argument>, <argument pos:start="215:45" pos:end="215:63"><expr pos:start="215:45" pos:end="215:63"><name pos:start="215:45" pos:end="215:63">ACPI_PCINOHP_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:36"><expr pos:start="217:13" pos:end="217:35"><call pos:start="217:13" pos:end="217:35"><name pos:start="217:13" pos:end="217:25">patch_pcinohp</name><argument_list pos:start="217:26" pos:end="217:35">(<argument pos:start="217:27" pos:end="217:27"><expr pos:start="217:27" pos:end="217:27"><name pos:start="217:27" pos:end="217:27">i</name></expr></argument>, <argument pos:start="217:30" pos:end="217:34"><expr pos:start="217:30" pos:end="217:34"><name pos:start="217:30" pos:end="217:34">pcihp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="225:5" pos:end="287:5"><if pos:start="225:5" pos:end="287:5">if <condition pos:start="225:8" pos:end="225:13">(<expr pos:start="225:9" pos:end="225:12"><name pos:start="225:9" pos:end="225:12">bsel</name></expr>)</condition> <block pos:start="225:15" pos:end="287:5">{<block_content pos:start="227:9" pos:end="285:59">

        <expr_stmt pos:start="227:9" pos:end="227:47"><expr pos:start="227:9" pos:end="227:46"><name pos:start="227:9" pos:end="227:14">method</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <call pos:start="227:18" pos:end="227:46"><name pos:start="227:18" pos:end="227:35">build_alloc_method</name><argument_list pos:start="227:36" pos:end="227:46">(<argument pos:start="227:37" pos:end="227:42"><expr pos:start="227:37" pos:end="227:42"><literal type="string" pos:start="227:37" pos:end="227:42">"DVNT"</literal></expr></argument>, <argument pos:start="227:45" pos:end="227:45"><expr pos:start="227:45" pos:end="227:45"><literal type="number" pos:start="227:45" pos:end="227:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="231:9" pos:end="281:9">for <control pos:start="231:13" pos:end="231:42">(<init pos:start="231:14" pos:end="231:19"><expr pos:start="231:14" pos:end="231:18"><name pos:start="231:14" pos:end="231:14">i</name> <operator pos:start="231:16" pos:end="231:16">=</operator> <literal type="number" pos:start="231:18" pos:end="231:18">0</literal></expr>;</init> <condition pos:start="231:21" pos:end="231:37"><expr pos:start="231:21" pos:end="231:36"><name pos:start="231:21" pos:end="231:21">i</name> <operator pos:start="231:23" pos:end="231:23">&lt;</operator> <name pos:start="231:25" pos:end="231:36">PCI_SLOT_MAX</name></expr>;</condition> <incr pos:start="231:39" pos:end="231:41"><expr pos:start="231:39" pos:end="231:41"><name pos:start="231:39" pos:end="231:39">i</name><operator pos:start="231:40" pos:end="231:41">++</operator></expr></incr>)</control> <block pos:start="231:44" pos:end="281:9">{<block_content pos:start="233:13" pos:end="279:37">

            <decl_stmt pos:start="233:13" pos:end="233:27"><decl pos:start="233:13" pos:end="233:26"><type pos:start="233:13" pos:end="233:20"><name pos:start="233:13" pos:end="233:18">GArray</name> <modifier pos:start="233:20" pos:end="233:20">*</modifier></type><name pos:start="233:21" pos:end="233:26">notify</name></decl>;</decl_stmt>

            <decl_stmt pos:start="235:13" pos:end="235:23"><decl pos:start="235:13" pos:end="235:22"><type pos:start="235:13" pos:end="235:19"><name pos:start="235:13" pos:end="235:19">uint8_t</name></type> <name pos:start="235:21" pos:end="235:22">op</name></decl>;</decl_stmt>



            <if_stmt pos:start="239:13" pos:end="243:13"><if pos:start="239:13" pos:end="243:13">if <condition pos:start="239:16" pos:end="239:50">(<expr pos:start="239:17" pos:end="239:49"><operator pos:start="239:17" pos:end="239:17">!</operator><call pos:start="239:18" pos:end="239:49"><name pos:start="239:18" pos:end="239:25">test_bit</name><argument_list pos:start="239:26" pos:end="239:49">(<argument pos:start="239:27" pos:end="239:27"><expr pos:start="239:27" pos:end="239:27"><name pos:start="239:27" pos:end="239:27">i</name></expr></argument>, <argument pos:start="239:30" pos:end="239:48"><expr pos:start="239:30" pos:end="239:48"><name pos:start="239:30" pos:end="239:48">slot_hotplug_enable</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="239:52" pos:end="243:13">{<block_content pos:start="241:17" pos:end="241:25">

                <continue pos:start="241:17" pos:end="241:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="247:13" pos:end="247:41"><expr pos:start="247:13" pos:end="247:40"><name pos:start="247:13" pos:end="247:18">notify</name> <operator pos:start="247:20" pos:end="247:20">=</operator> <call pos:start="247:22" pos:end="247:40"><name pos:start="247:22" pos:end="247:38">build_alloc_array</name><argument_list pos:start="247:39" pos:end="247:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:22"><expr pos:start="249:13" pos:end="249:21"><name pos:start="249:13" pos:end="249:14">op</name> <operator pos:start="249:16" pos:end="249:16">=</operator> <literal type="number" pos:start="249:18" pos:end="249:21">0xA0</literal></expr>;</expr_stmt> <comment type="block" pos:start="249:24" pos:end="249:33">/* IfOp */</comment>



            <expr_stmt pos:start="253:13" pos:end="253:44"><expr pos:start="253:13" pos:end="253:43"><call pos:start="253:13" pos:end="253:43"><name pos:start="253:13" pos:end="253:29">build_append_byte</name><argument_list pos:start="253:30" pos:end="253:43">(<argument pos:start="253:31" pos:end="253:36"><expr pos:start="253:31" pos:end="253:36"><name pos:start="253:31" pos:end="253:36">notify</name></expr></argument>, <argument pos:start="253:39" pos:end="253:42"><expr pos:start="253:39" pos:end="253:42"><literal type="number" pos:start="253:39" pos:end="253:42">0x7B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="253:46" pos:end="253:56">/* AndOp */</comment>

            <expr_stmt pos:start="255:13" pos:end="255:44"><expr pos:start="255:13" pos:end="255:43"><call pos:start="255:13" pos:end="255:43"><name pos:start="255:13" pos:end="255:29">build_append_byte</name><argument_list pos:start="255:30" pos:end="255:43">(<argument pos:start="255:31" pos:end="255:36"><expr pos:start="255:31" pos:end="255:36"><name pos:start="255:31" pos:end="255:36">notify</name></expr></argument>, <argument pos:start="255:39" pos:end="255:42"><expr pos:start="255:39" pos:end="255:42"><literal type="number" pos:start="255:39" pos:end="255:42">0x68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="255:46" pos:end="255:57">/* Arg0Op */</comment>

            <expr_stmt pos:start="257:13" pos:end="257:47"><expr pos:start="257:13" pos:end="257:46"><call pos:start="257:13" pos:end="257:46"><name pos:start="257:13" pos:end="257:28">build_append_int</name><argument_list pos:start="257:29" pos:end="257:46">(<argument pos:start="257:30" pos:end="257:35"><expr pos:start="257:30" pos:end="257:35"><name pos:start="257:30" pos:end="257:35">notify</name></expr></argument>, <argument pos:start="257:38" pos:end="257:45"><expr pos:start="257:38" pos:end="257:45"><literal type="number" pos:start="257:38" pos:end="257:40">0x1</literal> <operator pos:start="257:42" pos:end="257:43">&lt;&lt;</operator> <name pos:start="257:45" pos:end="257:45">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:44"><expr pos:start="259:13" pos:end="259:43"><call pos:start="259:13" pos:end="259:43"><name pos:start="259:13" pos:end="259:29">build_append_byte</name><argument_list pos:start="259:30" pos:end="259:43">(<argument pos:start="259:31" pos:end="259:36"><expr pos:start="259:31" pos:end="259:36"><name pos:start="259:31" pos:end="259:36">notify</name></expr></argument>, <argument pos:start="259:39" pos:end="259:42"><expr pos:start="259:39" pos:end="259:42"><literal type="number" pos:start="259:39" pos:end="259:42">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="259:46" pos:end="259:59">/* NullName */</comment>

            <expr_stmt pos:start="261:13" pos:end="261:44"><expr pos:start="261:13" pos:end="261:43"><call pos:start="261:13" pos:end="261:43"><name pos:start="261:13" pos:end="261:29">build_append_byte</name><argument_list pos:start="261:30" pos:end="261:43">(<argument pos:start="261:31" pos:end="261:36"><expr pos:start="261:31" pos:end="261:36"><name pos:start="261:31" pos:end="261:36">notify</name></expr></argument>, <argument pos:start="261:39" pos:end="261:42"><expr pos:start="261:39" pos:end="261:42"><literal type="number" pos:start="261:39" pos:end="261:42">0x86</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="261:46" pos:end="261:59">/* NotifyOp */</comment>

            <expr_stmt pos:start="263:13" pos:end="263:69"><expr pos:start="263:13" pos:end="263:68"><call pos:start="263:13" pos:end="263:68"><name pos:start="263:13" pos:end="263:32">build_append_nameseg</name><argument_list pos:start="263:33" pos:end="263:68">(<argument pos:start="263:34" pos:end="263:39"><expr pos:start="263:34" pos:end="263:39"><name pos:start="263:34" pos:end="263:39">notify</name></expr></argument>, <argument pos:start="263:42" pos:end="263:50"><expr pos:start="263:42" pos:end="263:50"><literal type="string" pos:start="263:42" pos:end="263:50">"S%.02X_"</literal></expr></argument>, <argument pos:start="263:53" pos:end="263:67"><expr pos:start="263:53" pos:end="263:67"><call pos:start="263:53" pos:end="263:67"><name pos:start="263:53" pos:end="263:61">PCI_DEVFN</name><argument_list pos:start="263:62" pos:end="263:67">(<argument pos:start="263:63" pos:end="263:63"><expr pos:start="263:63" pos:end="263:63"><name pos:start="263:63" pos:end="263:63">i</name></expr></argument>, <argument pos:start="263:66" pos:end="263:66"><expr pos:start="263:66" pos:end="263:66"><literal type="number" pos:start="263:66" pos:end="263:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:44"><expr pos:start="265:13" pos:end="265:43"><call pos:start="265:13" pos:end="265:43"><name pos:start="265:13" pos:end="265:29">build_append_byte</name><argument_list pos:start="265:30" pos:end="265:43">(<argument pos:start="265:31" pos:end="265:36"><expr pos:start="265:31" pos:end="265:36"><name pos:start="265:31" pos:end="265:36">notify</name></expr></argument>, <argument pos:start="265:39" pos:end="265:42"><expr pos:start="265:39" pos:end="265:42"><literal type="number" pos:start="265:39" pos:end="265:42">0x69</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="265:46" pos:end="265:57">/* Arg1Op */</comment>



            <comment type="block" pos:start="269:13" pos:end="269:28">/* Pack it up */</comment>

            <expr_stmt pos:start="271:13" pos:end="271:41"><expr pos:start="271:13" pos:end="271:40"><call pos:start="271:13" pos:end="271:40"><name pos:start="271:13" pos:end="271:25">build_package</name><argument_list pos:start="271:26" pos:end="271:40">(<argument pos:start="271:27" pos:end="271:32"><expr pos:start="271:27" pos:end="271:32"><name pos:start="271:27" pos:end="271:32">notify</name></expr></argument>, <argument pos:start="271:35" pos:end="271:36"><expr pos:start="271:35" pos:end="271:36"><name pos:start="271:35" pos:end="271:36">op</name></expr></argument>, <argument pos:start="271:39" pos:end="271:39"><expr pos:start="271:39" pos:end="271:39"><literal type="number" pos:start="271:39" pos:end="271:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="275:13" pos:end="275:47"><expr pos:start="275:13" pos:end="275:46"><call pos:start="275:13" pos:end="275:46"><name pos:start="275:13" pos:end="275:30">build_append_array</name><argument_list pos:start="275:31" pos:end="275:46">(<argument pos:start="275:32" pos:end="275:37"><expr pos:start="275:32" pos:end="275:37"><name pos:start="275:32" pos:end="275:37">method</name></expr></argument>, <argument pos:start="275:40" pos:end="275:45"><expr pos:start="275:40" pos:end="275:45"><name pos:start="275:40" pos:end="275:45">notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="279:13" pos:end="279:37"><expr pos:start="279:13" pos:end="279:36"><call pos:start="279:13" pos:end="279:36"><name pos:start="279:13" pos:end="279:28">build_free_array</name><argument_list pos:start="279:29" pos:end="279:36">(<argument pos:start="279:30" pos:end="279:35"><expr pos:start="279:30" pos:end="279:35"><name pos:start="279:30" pos:end="279:35">notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="285:9" pos:end="285:59"><expr pos:start="285:9" pos:end="285:58"><call pos:start="285:9" pos:end="285:58"><name pos:start="285:9" pos:end="285:39">build_append_and_cleanup_method</name><argument_list pos:start="285:40" pos:end="285:58">(<argument pos:start="285:41" pos:end="285:49"><expr pos:start="285:41" pos:end="285:49"><name pos:start="285:41" pos:end="285:49">bus_table</name></expr></argument>, <argument pos:start="285:52" pos:end="285:57"><expr pos:start="285:52" pos:end="285:57"><name pos:start="285:52" pos:end="285:57">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="291:5" pos:end="295:7">/* Append PCNT method to notify about events on local and child buses.

     * Add unconditionally for root since DSDT expects it.

     */</comment>

    <if_stmt pos:start="297:5" pos:end="385:5"><if pos:start="297:5" pos:end="385:5">if <condition pos:start="297:8" pos:end="297:76">(<expr pos:start="297:9" pos:end="297:75"><name pos:start="297:9" pos:end="297:27">bus_hotplug_support</name> <operator pos:start="297:29" pos:end="297:30">||</operator> <name pos:start="297:32" pos:end="297:55"><name pos:start="297:32" pos:end="297:36">child</name><operator pos:start="297:37" pos:end="297:38">-&gt;</operator><name pos:start="297:39" pos:end="297:50">notify_table</name><operator pos:start="297:51" pos:end="297:52">-&gt;</operator><name pos:start="297:53" pos:end="297:55">len</name></name> <operator pos:start="297:57" pos:end="297:58">||</operator> <operator pos:start="297:60" pos:end="297:60">!</operator><name pos:start="297:61" pos:end="297:75"><name pos:start="297:61" pos:end="297:63">bus</name><operator pos:start="297:64" pos:end="297:65">-&gt;</operator><name pos:start="297:66" pos:end="297:75">parent_dev</name></name></expr>)</condition> <block pos:start="297:78" pos:end="385:5">{<block_content pos:start="299:9" pos:end="383:9">

        <expr_stmt pos:start="299:9" pos:end="299:47"><expr pos:start="299:9" pos:end="299:46"><name pos:start="299:9" pos:end="299:14">method</name> <operator pos:start="299:16" pos:end="299:16">=</operator> <call pos:start="299:18" pos:end="299:46"><name pos:start="299:18" pos:end="299:35">build_alloc_method</name><argument_list pos:start="299:36" pos:end="299:46">(<argument pos:start="299:37" pos:end="299:42"><expr pos:start="299:37" pos:end="299:42"><literal type="string" pos:start="299:37" pos:end="299:42">"PCNT"</literal></expr></argument>, <argument pos:start="299:45" pos:end="299:45"><expr pos:start="299:45" pos:end="299:45"><literal type="number" pos:start="299:45" pos:end="299:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="303:9" pos:end="303:77">/* If bus supports hotplug select it and notify about local events */</comment>

        <if_stmt pos:start="305:9" pos:end="325:9"><if pos:start="305:9" pos:end="325:9">if <condition pos:start="305:12" pos:end="305:17">(<expr pos:start="305:13" pos:end="305:16"><name pos:start="305:13" pos:end="305:16">bsel</name></expr>)</condition> <block pos:start="305:19" pos:end="325:9">{<block_content pos:start="307:13" pos:end="323:40">

            <expr_stmt pos:start="307:13" pos:end="307:44"><expr pos:start="307:13" pos:end="307:43"><call pos:start="307:13" pos:end="307:43"><name pos:start="307:13" pos:end="307:29">build_append_byte</name><argument_list pos:start="307:30" pos:end="307:43">(<argument pos:start="307:31" pos:end="307:36"><expr pos:start="307:31" pos:end="307:36"><name pos:start="307:31" pos:end="307:36">method</name></expr></argument>, <argument pos:start="307:39" pos:end="307:42"><expr pos:start="307:39" pos:end="307:42"><literal type="number" pos:start="307:39" pos:end="307:42">0x70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="307:46" pos:end="307:58">/* StoreOp */</comment>

            <expr_stmt pos:start="309:13" pos:end="309:74"><expr pos:start="309:13" pos:end="309:73"><call pos:start="309:13" pos:end="309:73"><name pos:start="309:13" pos:end="309:28">build_append_int</name><argument_list pos:start="309:29" pos:end="309:73">(<argument pos:start="309:30" pos:end="309:35"><expr pos:start="309:30" pos:end="309:35"><name pos:start="309:30" pos:end="309:35">method</name></expr></argument>, <argument pos:start="309:38" pos:end="309:72"><expr pos:start="309:38" pos:end="309:72"><call pos:start="309:38" pos:end="309:72"><name pos:start="309:38" pos:end="309:49">qint_get_int</name><argument_list pos:start="309:50" pos:end="309:72">(<argument pos:start="309:51" pos:end="309:71"><expr pos:start="309:51" pos:end="309:71"><call pos:start="309:51" pos:end="309:71"><name pos:start="309:51" pos:end="309:65">qobject_to_qint</name><argument_list pos:start="309:66" pos:end="309:71">(<argument pos:start="309:67" pos:end="309:70"><expr pos:start="309:67" pos:end="309:70"><name pos:start="309:67" pos:end="309:70">bsel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:49"><expr pos:start="311:13" pos:end="311:48"><call pos:start="311:13" pos:end="311:48"><name pos:start="311:13" pos:end="311:32">build_append_nameseg</name><argument_list pos:start="311:33" pos:end="311:48">(<argument pos:start="311:34" pos:end="311:39"><expr pos:start="311:34" pos:end="311:39"><name pos:start="311:34" pos:end="311:39">method</name></expr></argument>, <argument pos:start="311:42" pos:end="311:47"><expr pos:start="311:42" pos:end="311:47"><literal type="string" pos:start="311:42" pos:end="311:47">"BNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:49"><expr pos:start="313:13" pos:end="313:48"><call pos:start="313:13" pos:end="313:48"><name pos:start="313:13" pos:end="313:32">build_append_nameseg</name><argument_list pos:start="313:33" pos:end="313:48">(<argument pos:start="313:34" pos:end="313:39"><expr pos:start="313:34" pos:end="313:39"><name pos:start="313:34" pos:end="313:39">method</name></expr></argument>, <argument pos:start="313:42" pos:end="313:47"><expr pos:start="313:42" pos:end="313:47"><literal type="string" pos:start="313:42" pos:end="313:47">"DVNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:49"><expr pos:start="315:13" pos:end="315:48"><call pos:start="315:13" pos:end="315:48"><name pos:start="315:13" pos:end="315:32">build_append_nameseg</name><argument_list pos:start="315:33" pos:end="315:48">(<argument pos:start="315:34" pos:end="315:39"><expr pos:start="315:34" pos:end="315:39"><name pos:start="315:34" pos:end="315:39">method</name></expr></argument>, <argument pos:start="315:42" pos:end="315:47"><expr pos:start="315:42" pos:end="315:47"><literal type="string" pos:start="315:42" pos:end="315:47">"PCIU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:40"><expr pos:start="317:13" pos:end="317:39"><call pos:start="317:13" pos:end="317:39"><name pos:start="317:13" pos:end="317:28">build_append_int</name><argument_list pos:start="317:29" pos:end="317:39">(<argument pos:start="317:30" pos:end="317:35"><expr pos:start="317:30" pos:end="317:35"><name pos:start="317:30" pos:end="317:35">method</name></expr></argument>, <argument pos:start="317:38" pos:end="317:38"><expr pos:start="317:38" pos:end="317:38"><literal type="number" pos:start="317:38" pos:end="317:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="317:42" pos:end="317:59">/* Device Check */</comment>

            <expr_stmt pos:start="319:13" pos:end="319:49"><expr pos:start="319:13" pos:end="319:48"><call pos:start="319:13" pos:end="319:48"><name pos:start="319:13" pos:end="319:32">build_append_nameseg</name><argument_list pos:start="319:33" pos:end="319:48">(<argument pos:start="319:34" pos:end="319:39"><expr pos:start="319:34" pos:end="319:39"><name pos:start="319:34" pos:end="319:39">method</name></expr></argument>, <argument pos:start="319:42" pos:end="319:47"><expr pos:start="319:42" pos:end="319:47"><literal type="string" pos:start="319:42" pos:end="319:47">"DVNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:49"><expr pos:start="321:13" pos:end="321:48"><call pos:start="321:13" pos:end="321:48"><name pos:start="321:13" pos:end="321:32">build_append_nameseg</name><argument_list pos:start="321:33" pos:end="321:48">(<argument pos:start="321:34" pos:end="321:39"><expr pos:start="321:34" pos:end="321:39"><name pos:start="321:34" pos:end="321:39">method</name></expr></argument>, <argument pos:start="321:42" pos:end="321:47"><expr pos:start="321:42" pos:end="321:47"><literal type="string" pos:start="321:42" pos:end="321:47">"PCID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:40"><expr pos:start="323:13" pos:end="323:39"><call pos:start="323:13" pos:end="323:39"><name pos:start="323:13" pos:end="323:28">build_append_int</name><argument_list pos:start="323:29" pos:end="323:39">(<argument pos:start="323:30" pos:end="323:35"><expr pos:start="323:30" pos:end="323:35"><name pos:start="323:30" pos:end="323:35">method</name></expr></argument>, <argument pos:start="323:38" pos:end="323:38"><expr pos:start="323:38" pos:end="323:38"><literal type="number" pos:start="323:38" pos:end="323:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="323:42" pos:end="323:60">/* Eject Request */</comment>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="329:9" pos:end="329:55">/* Notify about child bus events in any case */</comment>

        <expr_stmt pos:start="331:9" pos:end="331:56"><expr pos:start="331:9" pos:end="331:55"><call pos:start="331:9" pos:end="331:55"><name pos:start="331:9" pos:end="331:26">build_append_array</name><argument_list pos:start="331:27" pos:end="331:55">(<argument pos:start="331:28" pos:end="331:33"><expr pos:start="331:28" pos:end="331:33"><name pos:start="331:28" pos:end="331:33">method</name></expr></argument>, <argument pos:start="331:36" pos:end="331:54"><expr pos:start="331:36" pos:end="331:54"><name pos:start="331:36" pos:end="331:54"><name pos:start="331:36" pos:end="331:40">child</name><operator pos:start="331:41" pos:end="331:42">-&gt;</operator><name pos:start="331:43" pos:end="331:54">notify_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:59"><expr pos:start="335:9" pos:end="335:58"><call pos:start="335:9" pos:end="335:58"><name pos:start="335:9" pos:end="335:39">build_append_and_cleanup_method</name><argument_list pos:start="335:40" pos:end="335:58">(<argument pos:start="335:41" pos:end="335:49"><expr pos:start="335:41" pos:end="335:49"><name pos:start="335:41" pos:end="335:49">bus_table</name></expr></argument>, <argument pos:start="335:52" pos:end="335:57"><expr pos:start="335:52" pos:end="335:57"><name pos:start="335:52" pos:end="335:57">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="339:9" pos:end="339:47">/* Append description of child buses */</comment>

        <expr_stmt pos:start="341:9" pos:end="341:59"><expr pos:start="341:9" pos:end="341:58"><call pos:start="341:9" pos:end="341:58"><name pos:start="341:9" pos:end="341:26">build_append_array</name><argument_list pos:start="341:27" pos:end="341:58">(<argument pos:start="341:28" pos:end="341:36"><expr pos:start="341:28" pos:end="341:36"><name pos:start="341:28" pos:end="341:36">bus_table</name></expr></argument>, <argument pos:start="341:39" pos:end="341:57"><expr pos:start="341:39" pos:end="341:57"><name pos:start="341:39" pos:end="341:57"><name pos:start="341:39" pos:end="341:43">child</name><operator pos:start="341:44" pos:end="341:45">-&gt;</operator><name pos:start="341:46" pos:end="341:57">device_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="345:9" pos:end="345:24">/* Pack it up */</comment>

        <if_stmt pos:start="347:9" pos:end="355:9"><if pos:start="347:9" pos:end="351:9">if <condition pos:start="347:12" pos:end="347:28">(<expr pos:start="347:13" pos:end="347:27"><name pos:start="347:13" pos:end="347:27"><name pos:start="347:13" pos:end="347:15">bus</name><operator pos:start="347:16" pos:end="347:17">-&gt;</operator><name pos:start="347:18" pos:end="347:27">parent_dev</name></name></expr>)</condition> <block pos:start="347:30" pos:end="351:9">{<block_content pos:start="349:13" pos:end="349:47">

            <expr_stmt pos:start="349:13" pos:end="349:47"><expr pos:start="349:13" pos:end="349:46"><call pos:start="349:13" pos:end="349:46"><name pos:start="349:13" pos:end="349:31">build_extop_package</name><argument_list pos:start="349:32" pos:end="349:46">(<argument pos:start="349:33" pos:end="349:41"><expr pos:start="349:33" pos:end="349:41"><name pos:start="349:33" pos:end="349:41">bus_table</name></expr></argument>, <argument pos:start="349:44" pos:end="349:45"><expr pos:start="349:44" pos:end="349:45"><name pos:start="349:44" pos:end="349:45">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="351:11" pos:end="355:9">else <block pos:start="351:16" pos:end="355:9">{<block_content pos:start="353:13" pos:end="353:44">

            <expr_stmt pos:start="353:13" pos:end="353:44"><expr pos:start="353:13" pos:end="353:43"><call pos:start="353:13" pos:end="353:43"><name pos:start="353:13" pos:end="353:25">build_package</name><argument_list pos:start="353:26" pos:end="353:43">(<argument pos:start="353:27" pos:end="353:35"><expr pos:start="353:27" pos:end="353:35"><name pos:start="353:27" pos:end="353:35">bus_table</name></expr></argument>, <argument pos:start="353:38" pos:end="353:39"><expr pos:start="353:38" pos:end="353:39"><name pos:start="353:38" pos:end="353:39">op</name></expr></argument>, <argument pos:start="353:42" pos:end="353:42"><expr pos:start="353:42" pos:end="353:42"><literal type="number" pos:start="353:42" pos:end="353:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="359:9" pos:end="359:56">/* Append our bus description to parent table */</comment>

        <expr_stmt pos:start="361:9" pos:end="361:60"><expr pos:start="361:9" pos:end="361:59"><call pos:start="361:9" pos:end="361:59"><name pos:start="361:9" pos:end="361:26">build_append_array</name><argument_list pos:start="361:27" pos:end="361:59">(<argument pos:start="361:28" pos:end="361:47"><expr pos:start="361:28" pos:end="361:47"><name pos:start="361:28" pos:end="361:47"><name pos:start="361:28" pos:end="361:33">parent</name><operator pos:start="361:34" pos:end="361:35">-&gt;</operator><name pos:start="361:36" pos:end="361:47">device_table</name></name></expr></argument>, <argument pos:start="361:50" pos:end="361:58"><expr pos:start="361:50" pos:end="361:58"><name pos:start="361:50" pos:end="361:58">bus_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="365:9" pos:end="369:11">/* Also tell parent how to notify us, invoking PCNT method.

         * At the moment this is not needed for root as we have a single root.

         */</comment>

        <if_stmt pos:start="371:9" pos:end="383:9"><if pos:start="371:9" pos:end="383:9">if <condition pos:start="371:12" pos:end="371:28">(<expr pos:start="371:13" pos:end="371:27"><name pos:start="371:13" pos:end="371:27"><name pos:start="371:13" pos:end="371:15">bus</name><operator pos:start="371:16" pos:end="371:17">-&gt;</operator><name pos:start="371:18" pos:end="371:27">parent_dev</name></name></expr>)</condition> <block pos:start="371:30" pos:end="383:9">{<block_content pos:start="373:13" pos:end="381:63">

            <expr_stmt pos:start="373:13" pos:end="373:57"><expr pos:start="373:13" pos:end="373:56"><call pos:start="373:13" pos:end="373:56"><name pos:start="373:13" pos:end="373:29">build_append_byte</name><argument_list pos:start="373:30" pos:end="373:56">(<argument pos:start="373:31" pos:end="373:50"><expr pos:start="373:31" pos:end="373:50"><name pos:start="373:31" pos:end="373:50"><name pos:start="373:31" pos:end="373:36">parent</name><operator pos:start="373:37" pos:end="373:38">-&gt;</operator><name pos:start="373:39" pos:end="373:50">notify_table</name></name></expr></argument>, <argument pos:start="373:53" pos:end="373:55"><expr pos:start="373:53" pos:end="373:55"><literal type="char" pos:start="373:53" pos:end="373:55">'^'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="373:59" pos:end="373:80">/* ParentPrefixChar */</comment>

            <expr_stmt pos:start="375:13" pos:end="375:58"><expr pos:start="375:13" pos:end="375:57"><call pos:start="375:13" pos:end="375:57"><name pos:start="375:13" pos:end="375:29">build_append_byte</name><argument_list pos:start="375:30" pos:end="375:57">(<argument pos:start="375:31" pos:end="375:50"><expr pos:start="375:31" pos:end="375:50"><name pos:start="375:31" pos:end="375:50"><name pos:start="375:31" pos:end="375:36">parent</name><operator pos:start="375:37" pos:end="375:38">-&gt;</operator><name pos:start="375:39" pos:end="375:50">notify_table</name></name></expr></argument>, <argument pos:start="375:53" pos:end="375:56"><expr pos:start="375:53" pos:end="375:56"><literal type="number" pos:start="375:53" pos:end="375:56">0x2E</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="375:60" pos:end="375:79">/* DualNamePrefix */</comment>

            <expr_stmt pos:start="377:13" pos:end="379:57"><expr pos:start="377:13" pos:end="379:56"><call pos:start="377:13" pos:end="379:56"><name pos:start="377:13" pos:end="377:32">build_append_nameseg</name><argument_list pos:start="377:33" pos:end="379:56">(<argument pos:start="377:34" pos:end="377:53"><expr pos:start="377:34" pos:end="377:53"><name pos:start="377:34" pos:end="377:53"><name pos:start="377:34" pos:end="377:39">parent</name><operator pos:start="377:40" pos:end="377:41">-&gt;</operator><name pos:start="377:42" pos:end="377:53">notify_table</name></name></expr></argument>, <argument pos:start="377:56" pos:end="377:64"><expr pos:start="377:56" pos:end="377:64"><literal type="string" pos:start="377:56" pos:end="377:64">"S%.02X_"</literal></expr></argument>,

                                 <argument pos:start="379:34" pos:end="379:55"><expr pos:start="379:34" pos:end="379:55"><name pos:start="379:34" pos:end="379:55"><name pos:start="379:34" pos:end="379:36">bus</name><operator pos:start="379:37" pos:end="379:38">-&gt;</operator><name pos:start="379:39" pos:end="379:48">parent_dev</name><operator pos:start="379:49" pos:end="379:50">-&gt;</operator><name pos:start="379:51" pos:end="379:55">devfn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:63"><expr pos:start="381:13" pos:end="381:62"><call pos:start="381:13" pos:end="381:62"><name pos:start="381:13" pos:end="381:32">build_append_nameseg</name><argument_list pos:start="381:33" pos:end="381:62">(<argument pos:start="381:34" pos:end="381:53"><expr pos:start="381:34" pos:end="381:53"><name pos:start="381:34" pos:end="381:53"><name pos:start="381:34" pos:end="381:39">parent</name><operator pos:start="381:40" pos:end="381:41">-&gt;</operator><name pos:start="381:42" pos:end="381:53">notify_table</name></name></expr></argument>, <argument pos:start="381:56" pos:end="381:61"><expr pos:start="381:56" pos:end="381:61"><literal type="string" pos:start="381:56" pos:end="381:61">"PCNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="389:5" pos:end="389:32"><expr pos:start="389:5" pos:end="389:31"><call pos:start="389:5" pos:end="389:31"><name pos:start="389:5" pos:end="389:20">build_free_array</name><argument_list pos:start="389:21" pos:end="389:31">(<argument pos:start="389:22" pos:end="389:30"><expr pos:start="389:22" pos:end="389:30"><name pos:start="389:22" pos:end="389:30">bus_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:39"><expr pos:start="391:5" pos:end="391:38"><call pos:start="391:5" pos:end="391:38"><name pos:start="391:5" pos:end="391:31">build_pci_bus_state_cleanup</name><argument_list pos:start="391:32" pos:end="391:38">(<argument pos:start="391:33" pos:end="391:37"><expr pos:start="391:33" pos:end="391:37"><name pos:start="391:33" pos:end="391:37">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:18"><expr pos:start="393:5" pos:end="393:17"><call pos:start="393:5" pos:end="393:17"><name pos:start="393:5" pos:end="393:10">g_free</name><argument_list pos:start="393:11" pos:end="393:17">(<argument pos:start="393:12" pos:end="393:16"><expr pos:start="393:12" pos:end="393:16"><name pos:start="393:12" pos:end="393:16">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
