<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7253.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">BlockDriverAIOCB</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:39">raw_aio_writev</name><parameter_list pos:start="1:40" pos:end="5:48">(<parameter pos:start="1:41" pos:end="1:60"><decl pos:start="1:41" pos:end="1:60"><type pos:start="1:41" pos:end="1:60"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:22"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:22">sector_num</name></decl></parameter>, <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:36">QEMUIOVector</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:42">qiov</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:58">nb_sectors</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:33"><name pos:start="5:5" pos:end="5:29">BlockDriverCompletionFunc</name> <modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:33">cb</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:47"><decl pos:start="5:36" pos:end="5:47"><type pos:start="5:36" pos:end="5:47"><name pos:start="5:36" pos:end="5:39">void</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:47">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="95:1">{<block_content pos:start="9:5" pos:end="93:79">

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:28">first_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:23">first_buf_index</name> <init pos:start="11:25" pos:end="11:27">= <expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr></init></decl>, <decl pos:start="11:30" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:30" pos:end="11:30">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="17:18">/* This is probably being paranoid, but handle cases of zero size

       vectors. */</comment>

    <for pos:start="19:5" pos:end="31:5">for <control pos:start="19:9" pos:end="19:36">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:31"><expr pos:start="19:17" pos:end="19:30"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:30"><name pos:start="19:21" pos:end="19:24">qiov</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:30">niov</name></name></expr>;</condition> <incr pos:start="19:33" pos:end="19:35"><expr pos:start="19:33" pos:end="19:35"><name pos:start="19:33" pos:end="19:33">i</name><operator pos:start="19:34" pos:end="19:35">++</operator></expr></incr>)</control> <block pos:start="19:38" pos:end="31:5">{<block_content pos:start="21:9" pos:end="29:9">

        <if_stmt pos:start="21:9" pos:end="29:9"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="21:33">(<expr pos:start="21:13" pos:end="21:32"><name pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:16">qiov</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:21">iov</name><index pos:start="21:22" pos:end="21:24">[<expr pos:start="21:23" pos:end="21:23"><name pos:start="21:23" pos:end="21:23">i</name></expr>]</index></name><operator pos:start="21:25" pos:end="21:25">.</operator><name pos:start="21:26" pos:end="21:32">iov_len</name></expr>)</condition> <block pos:start="21:35" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:18">

            <expr_stmt pos:start="23:13" pos:end="23:48"><expr pos:start="23:13" pos:end="23:47"><call pos:start="23:13" pos:end="23:47"><name pos:start="23:13" pos:end="23:18">assert</name><argument_list pos:start="23:19" pos:end="23:47">(<argument pos:start="23:20" pos:end="23:46"><expr pos:start="23:20" pos:end="23:46"><name pos:start="23:20" pos:end="23:31"><name pos:start="23:20" pos:end="23:23">qiov</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:28">iov</name><index pos:start="23:29" pos:end="23:31">[<expr pos:start="23:30" pos:end="23:30"><name pos:start="23:30" pos:end="23:30">i</name></expr>]</index></name><operator pos:start="23:32" pos:end="23:32">.</operator><name pos:start="23:33" pos:end="23:39">iov_len</name> <operator pos:start="23:41" pos:end="23:42">&gt;=</operator> <literal type="number" pos:start="23:44" pos:end="23:46">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:32"><expr pos:start="25:13" pos:end="25:31"><name pos:start="25:13" pos:end="25:27">first_buf_index</name> <operator pos:start="25:29" pos:end="25:29">=</operator> <name pos:start="25:31" pos:end="25:31">i</name></expr>;</expr_stmt>

            <break pos:start="27:13" pos:end="27:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="35:5" pos:end="35:52"><expr pos:start="35:5" pos:end="35:51"><name pos:start="35:5" pos:end="35:13">first_buf</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:42"><name pos:start="35:17" pos:end="35:20">qiov</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:25">iov</name><index pos:start="35:26" pos:end="35:42">[<expr pos:start="35:27" pos:end="35:41"><name pos:start="35:27" pos:end="35:41">first_buf_index</name></expr>]</index></name><operator pos:start="35:43" pos:end="35:43">.</operator><name pos:start="35:44" pos:end="35:51">iov_base</name></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="89:5"><if pos:start="39:5" pos:end="89:5">if <condition pos:start="39:8" pos:end="39:66">(<expr pos:start="39:9" pos:end="39:65"><call pos:start="39:9" pos:end="39:65"><name pos:start="39:9" pos:end="39:26">check_write_unsafe</name><argument_list pos:start="39:27" pos:end="39:65">(<argument pos:start="39:28" pos:end="39:29"><expr pos:start="39:28" pos:end="39:29"><name pos:start="39:28" pos:end="39:29">bs</name></expr></argument>, <argument pos:start="39:32" pos:end="39:41"><expr pos:start="39:32" pos:end="39:41"><name pos:start="39:32" pos:end="39:41">sector_num</name></expr></argument>, <argument pos:start="39:44" pos:end="39:52"><expr pos:start="39:44" pos:end="39:52"><name pos:start="39:44" pos:end="39:52">first_buf</name></expr></argument>, <argument pos:start="39:55" pos:end="39:64"><expr pos:start="39:55" pos:end="39:64"><name pos:start="39:55" pos:end="39:64">nb_sectors</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:68" pos:end="89:5">{<block_content pos:start="41:9" pos:end="87:75">

        <decl_stmt pos:start="41:9" pos:end="41:29"><decl pos:start="41:9" pos:end="41:28"><type pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:25">RawScrubberBounce</name> <modifier pos:start="41:27" pos:end="41:27">*</modifier></type><name pos:start="41:28" pos:end="41:28">b</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:16"><decl pos:start="43:9" pos:end="43:15"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:15">ret</name></decl>;</decl_stmt>



        <comment type="block" pos:start="47:9" pos:end="47:51">/* write the first sector using sync I/O */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:57"><expr pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:56"><name pos:start="49:15" pos:end="49:41">raw_write_scrubbed_bootsect</name><argument_list pos:start="49:42" pos:end="49:56">(<argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><name pos:start="49:43" pos:end="49:44">bs</name></expr></argument>, <argument pos:start="49:47" pos:end="49:55"><expr pos:start="49:47" pos:end="49:55"><name pos:start="49:47" pos:end="49:55">first_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>)</condition> <block pos:start="51:22" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:24">

            <return pos:start="53:13" pos:end="53:24">return <expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="59:9" pos:end="59:62">/* adjust request to be everything but first sector */</comment>



        <expr_stmt pos:start="63:9" pos:end="63:36"><expr pos:start="63:9" pos:end="63:35"><name pos:start="63:9" pos:end="63:9">b</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:23">qemu_malloc</name><argument_list pos:start="63:24" pos:end="63:35">(<argument pos:start="63:25" pos:end="63:34"><expr pos:start="63:25" pos:end="63:34"><sizeof pos:start="63:25" pos:end="63:34">sizeof<argument_list pos:start="63:31" pos:end="63:34">(<argument pos:start="63:32" pos:end="63:33"><expr pos:start="63:32" pos:end="63:33"><operator pos:start="63:32" pos:end="63:32">*</operator><name pos:start="63:33" pos:end="63:33">b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:19"><expr pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:13"><name pos:start="65:9" pos:end="65:9">b</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:13">cb</name></name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:18">cb</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:9">b</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">opaque</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:26">opaque</name></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:48"><expr pos:start="71:9" pos:end="71:47"><call pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:23">qemu_iovec_init</name><argument_list pos:start="71:24" pos:end="71:47">(<argument pos:start="71:25" pos:end="71:32"><expr pos:start="71:25" pos:end="71:32"><operator pos:start="71:25" pos:end="71:25">&amp;</operator><name pos:start="71:26" pos:end="71:32"><name pos:start="71:26" pos:end="71:26">b</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:32">qiov</name></name></expr></argument>, <argument pos:start="71:35" pos:end="71:46"><expr pos:start="71:35" pos:end="71:46"><name pos:start="71:35" pos:end="71:46"><name pos:start="71:35" pos:end="71:38">qiov</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:46">nalloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:54"><expr pos:start="73:9" pos:end="73:53"><call pos:start="73:9" pos:end="73:53"><name pos:start="73:9" pos:end="73:25">qemu_iovec_concat</name><argument_list pos:start="73:26" pos:end="73:53">(<argument pos:start="73:27" pos:end="73:34"><expr pos:start="73:27" pos:end="73:34"><operator pos:start="73:27" pos:end="73:27">&amp;</operator><name pos:start="73:28" pos:end="73:34"><name pos:start="73:28" pos:end="73:28">b</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:34">qiov</name></name></expr></argument>, <argument pos:start="73:37" pos:end="73:40"><expr pos:start="73:37" pos:end="73:40"><name pos:start="73:37" pos:end="73:40">qiov</name></expr></argument>, <argument pos:start="73:43" pos:end="73:52"><expr pos:start="73:43" pos:end="73:52"><name pos:start="73:43" pos:end="73:52"><name pos:start="73:43" pos:end="73:46">qiov</name><operator pos:start="73:47" pos:end="73:48">-&gt;</operator><name pos:start="73:49" pos:end="73:52">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:28"><expr pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:9">b</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:15">qiov</name><operator pos:start="77:16" pos:end="77:16">.</operator><name pos:start="77:17" pos:end="77:20">size</name></name> <operator pos:start="77:22" pos:end="77:23">-=</operator> <literal type="number" pos:start="77:25" pos:end="77:27">512</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:53"><expr pos:start="79:9" pos:end="79:52"><name pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:9">b</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:15">qiov</name><operator pos:start="79:16" pos:end="79:16">.</operator><name pos:start="79:17" pos:end="79:19">iov</name><index pos:start="79:20" pos:end="79:36">[<expr pos:start="79:21" pos:end="79:35"><name pos:start="79:21" pos:end="79:35">first_buf_index</name></expr>]</index></name><operator pos:start="79:37" pos:end="79:37">.</operator><name pos:start="79:38" pos:end="79:45">iov_base</name> <operator pos:start="79:47" pos:end="79:48">+=</operator> <literal type="number" pos:start="79:50" pos:end="79:52">512</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:52"><expr pos:start="81:9" pos:end="81:51"><name pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:9">b</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:15">qiov</name><operator pos:start="81:16" pos:end="81:16">.</operator><name pos:start="81:17" pos:end="81:19">iov</name><index pos:start="81:20" pos:end="81:36">[<expr pos:start="81:21" pos:end="81:35"><name pos:start="81:21" pos:end="81:35">first_buf_index</name></expr>]</index></name><operator pos:start="81:37" pos:end="81:37">.</operator><name pos:start="81:38" pos:end="81:44">iov_len</name> <operator pos:start="81:46" pos:end="81:47">-=</operator> <literal type="number" pos:start="81:49" pos:end="81:51">512</literal></expr>;</expr_stmt>



        <return pos:start="85:9" pos:end="87:75">return <expr pos:start="85:16" pos:end="87:74"><call pos:start="85:16" pos:end="87:74"><name pos:start="85:16" pos:end="85:30">bdrv_aio_writev</name><argument_list pos:start="85:31" pos:end="87:74">(<argument pos:start="85:32" pos:end="85:39"><expr pos:start="85:32" pos:end="85:39"><name pos:start="85:32" pos:end="85:39"><name pos:start="85:32" pos:end="85:33">bs</name><operator pos:start="85:34" pos:end="85:35">-&gt;</operator><name pos:start="85:36" pos:end="85:39">file</name></name></expr></argument>, <argument pos:start="85:42" pos:end="85:55"><expr pos:start="85:42" pos:end="85:55"><name pos:start="85:42" pos:end="85:51">sector_num</name> <operator pos:start="85:53" pos:end="85:53">+</operator> <literal type="number" pos:start="85:55" pos:end="85:55">1</literal></expr></argument>, <argument pos:start="85:58" pos:end="85:65"><expr pos:start="85:58" pos:end="85:65"><operator pos:start="85:58" pos:end="85:58">&amp;</operator><name pos:start="85:59" pos:end="85:65"><name pos:start="85:59" pos:end="85:59">b</name><operator pos:start="85:60" pos:end="85:61">-&gt;</operator><name pos:start="85:62" pos:end="85:65">qiov</name></name></expr></argument>,

                               <argument pos:start="87:32" pos:end="87:45"><expr pos:start="87:32" pos:end="87:45"><name pos:start="87:32" pos:end="87:41">nb_sectors</name> <operator pos:start="87:43" pos:end="87:43">-</operator> <literal type="number" pos:start="87:45" pos:end="87:45">1</literal></expr></argument>, <argument pos:start="87:48" pos:end="87:70"><expr pos:start="87:48" pos:end="87:70"><name pos:start="87:48" pos:end="87:70">raw_aio_writev_scrubbed</name></expr></argument>, <argument pos:start="87:73" pos:end="87:73"><expr pos:start="87:73" pos:end="87:73"><name pos:start="87:73" pos:end="87:73">b</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="93:5" pos:end="93:79">return <expr pos:start="93:12" pos:end="93:78"><call pos:start="93:12" pos:end="93:78"><name pos:start="93:12" pos:end="93:26">bdrv_aio_writev</name><argument_list pos:start="93:27" pos:end="93:78">(<argument pos:start="93:28" pos:end="93:35"><expr pos:start="93:28" pos:end="93:35"><name pos:start="93:28" pos:end="93:35"><name pos:start="93:28" pos:end="93:29">bs</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:35">file</name></name></expr></argument>, <argument pos:start="93:38" pos:end="93:47"><expr pos:start="93:38" pos:end="93:47"><name pos:start="93:38" pos:end="93:47">sector_num</name></expr></argument>, <argument pos:start="93:50" pos:end="93:53"><expr pos:start="93:50" pos:end="93:53"><name pos:start="93:50" pos:end="93:53">qiov</name></expr></argument>, <argument pos:start="93:56" pos:end="93:65"><expr pos:start="93:56" pos:end="93:65"><name pos:start="93:56" pos:end="93:65">nb_sectors</name></expr></argument>, <argument pos:start="93:68" pos:end="93:69"><expr pos:start="93:68" pos:end="93:69"><name pos:start="93:68" pos:end="93:69">cb</name></expr></argument>, <argument pos:start="93:72" pos:end="93:77"><expr pos:start="93:72" pos:end="93:77"><name pos:start="93:72" pos:end="93:77">opaque</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
