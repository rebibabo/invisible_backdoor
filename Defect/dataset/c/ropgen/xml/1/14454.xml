<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14454.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">adaptive_cb_search</name><parameter_list pos:start="1:30" pos:end="3:62">(<parameter pos:start="1:31" pos:end="1:53"><decl pos:start="1:31" pos:end="1:53"><type pos:start="1:31" pos:end="1:53"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:43">int16_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:53">adapt_cb</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:60">float</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">work</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:41">float</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:48">coefs</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:61"><decl pos:start="3:51" pos:end="3:61"><type pos:start="3:51" pos:end="3:61"><name pos:start="3:51" pos:end="3:55">float</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:61">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:41">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:20">best_vect</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">float</name></type> <name pos:start="9:11" pos:end="9:15">score</name></decl>, <decl pos:start="9:18" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:9"/><name pos:start="9:18" pos:end="9:21">gain</name></decl>, <decl pos:start="9:24" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:9"/><name pos:start="9:24" pos:end="9:33">best_score</name></decl>, <decl pos:start="9:36" pos:end="9:44"><type ref="prev" pos:start="9:5" pos:end="9:9"/><name pos:start="9:36" pos:end="9:44">best_gain</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:9">float</name></type> <name pos:start="11:11" pos:end="11:24"><name pos:start="11:11" pos:end="11:13">exc</name><index pos:start="11:14" pos:end="11:24">[<expr pos:start="11:15" pos:end="11:23"><name pos:start="11:15" pos:end="11:23">BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:8">gain</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <name pos:start="15:12" pos:end="15:21">best_score</name> <operator pos:start="15:23" pos:end="15:23">=</operator> <literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="33:5">for <control pos:start="17:9" pos:end="17:49">(<init pos:start="17:10" pos:end="17:27"><expr pos:start="17:10" pos:end="17:26"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:22">BLOCKSIZE</name> <operator pos:start="17:24" pos:end="17:24">/</operator> <literal type="number" pos:start="17:26" pos:end="17:26">2</literal></expr>;</init> <condition pos:start="17:29" pos:end="17:44"><expr pos:start="17:29" pos:end="17:43"><name pos:start="17:29" pos:end="17:29">i</name> <operator pos:start="17:31" pos:end="17:32">&lt;=</operator> <name pos:start="17:34" pos:end="17:43">BUFFERSIZE</name></expr>;</condition> <incr pos:start="17:46" pos:end="17:48"><expr pos:start="17:46" pos:end="17:48"><name pos:start="17:46" pos:end="17:46">i</name><operator pos:start="17:47" pos:end="17:48">++</operator></expr></incr>)</control> <block pos:start="17:51" pos:end="33:5">{<block_content pos:start="19:9" pos:end="31:9">

        <expr_stmt pos:start="19:9" pos:end="19:44"><expr pos:start="19:9" pos:end="19:43"><call pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:25">create_adapt_vect</name><argument_list pos:start="19:26" pos:end="19:43">(<argument pos:start="19:27" pos:end="19:29"><expr pos:start="19:27" pos:end="19:29"><name pos:start="19:27" pos:end="19:29">exc</name></expr></argument>, <argument pos:start="19:32" pos:end="19:39"><expr pos:start="19:32" pos:end="19:39"><name pos:start="19:32" pos:end="19:39">adapt_cb</name></expr></argument>, <argument pos:start="19:42" pos:end="19:42"><expr pos:start="19:42" pos:end="19:42"><name pos:start="19:42" pos:end="19:42">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:75"><expr pos:start="21:9" pos:end="21:74"><call pos:start="21:9" pos:end="21:74"><name pos:start="21:9" pos:end="21:23">get_match_score</name><argument_list pos:start="21:24" pos:end="21:74">(<argument pos:start="21:25" pos:end="21:28"><expr pos:start="21:25" pos:end="21:28"><name pos:start="21:25" pos:end="21:28">work</name></expr></argument>, <argument pos:start="21:31" pos:end="21:35"><expr pos:start="21:31" pos:end="21:35"><name pos:start="21:31" pos:end="21:35">coefs</name></expr></argument>, <argument pos:start="21:38" pos:end="21:40"><expr pos:start="21:38" pos:end="21:40"><name pos:start="21:38" pos:end="21:40">exc</name></expr></argument>, <argument pos:start="21:43" pos:end="21:46"><expr pos:start="21:43" pos:end="21:46"><name pos:start="21:43" pos:end="21:46">NULL</name></expr></argument>, <argument pos:start="21:49" pos:end="21:52"><expr pos:start="21:49" pos:end="21:52"><name pos:start="21:49" pos:end="21:52">NULL</name></expr></argument>, <argument pos:start="21:55" pos:end="21:58"><expr pos:start="21:55" pos:end="21:58"><name pos:start="21:55" pos:end="21:58">data</name></expr></argument>, <argument pos:start="21:61" pos:end="21:66"><expr pos:start="21:61" pos:end="21:66"><operator pos:start="21:61" pos:end="21:61">&amp;</operator><name pos:start="21:62" pos:end="21:66">score</name></expr></argument>, <argument pos:start="21:69" pos:end="21:73"><expr pos:start="21:69" pos:end="21:73"><operator pos:start="21:69" pos:end="21:69">&amp;</operator><name pos:start="21:70" pos:end="21:73">gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="31:9">if <condition pos:start="23:12" pos:end="23:31">(<expr pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:17">score</name> <operator pos:start="23:19" pos:end="23:19">&gt;</operator> <name pos:start="23:21" pos:end="23:30">best_score</name></expr>)</condition> <block pos:start="23:33" pos:end="31:9">{<block_content pos:start="25:13" pos:end="29:29">

            <expr_stmt pos:start="25:13" pos:end="25:31"><expr pos:start="25:13" pos:end="25:30"><name pos:start="25:13" pos:end="25:22">best_score</name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:30">score</name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:26"><expr pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:21">best_vect</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:25">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:29"><expr pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:21">best_gain</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:28">gain</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="35:5" pos:end="37:17"><if pos:start="35:5" pos:end="37:17">if <condition pos:start="35:8" pos:end="35:20">(<expr pos:start="35:9" pos:end="35:19"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:19">best_score</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:17"><block_content pos:start="37:9" pos:end="37:17">

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="41:5" pos:end="47:7">/**

     * Re-calculate the filtered vector from the vector with maximum match score

     * and remove its contribution from input data.

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:48"><expr pos:start="49:5" pos:end="49:47"><call pos:start="49:5" pos:end="49:47"><name pos:start="49:5" pos:end="49:21">create_adapt_vect</name><argument_list pos:start="49:22" pos:end="49:47">(<argument pos:start="49:23" pos:end="49:25"><expr pos:start="49:23" pos:end="49:25"><name pos:start="49:23" pos:end="49:25">exc</name></expr></argument>, <argument pos:start="49:28" pos:end="49:35"><expr pos:start="49:28" pos:end="49:35"><name pos:start="49:28" pos:end="49:35">adapt_cb</name></expr></argument>, <argument pos:start="49:38" pos:end="49:46"><expr pos:start="49:38" pos:end="49:46"><name pos:start="49:38" pos:end="49:46">best_vect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:73"><expr pos:start="51:5" pos:end="51:72"><call pos:start="51:5" pos:end="51:72"><name pos:start="51:5" pos:end="51:32">ff_celp_lp_synthesis_filterf</name><argument_list pos:start="51:33" pos:end="51:72">(<argument pos:start="51:34" pos:end="51:37"><expr pos:start="51:34" pos:end="51:37"><name pos:start="51:34" pos:end="51:37">work</name></expr></argument>, <argument pos:start="51:40" pos:end="51:44"><expr pos:start="51:40" pos:end="51:44"><name pos:start="51:40" pos:end="51:44">coefs</name></expr></argument>, <argument pos:start="51:47" pos:end="51:49"><expr pos:start="51:47" pos:end="51:49"><name pos:start="51:47" pos:end="51:49">exc</name></expr></argument>, <argument pos:start="51:52" pos:end="51:60"><expr pos:start="51:52" pos:end="51:60"><name pos:start="51:52" pos:end="51:60">BLOCKSIZE</name></expr></argument>, <argument pos:start="51:63" pos:end="51:71"><expr pos:start="51:63" pos:end="51:71"><name pos:start="51:63" pos:end="51:71">LPC_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="53:5" pos:end="55:39">for <control pos:start="53:9" pos:end="53:35">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:30"><expr pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:29">BLOCKSIZE</name></expr>;</condition> <incr pos:start="53:32" pos:end="53:34"><expr pos:start="53:32" pos:end="53:34"><name pos:start="53:32" pos:end="53:32">i</name><operator pos:start="53:33" pos:end="53:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="55:9" pos:end="55:39"><block_content pos:start="55:9" pos:end="55:39">

        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:12">data</name><index pos:start="55:13" pos:end="55:15">[<expr pos:start="55:14" pos:end="55:14"><name pos:start="55:14" pos:end="55:14">i</name></expr>]</index></name> <operator pos:start="55:17" pos:end="55:18">-=</operator> <name pos:start="55:20" pos:end="55:28">best_gain</name> <operator pos:start="55:30" pos:end="55:30">*</operator> <name pos:start="55:32" pos:end="55:38"><name pos:start="55:32" pos:end="55:35">work</name><index pos:start="55:36" pos:end="55:38">[<expr pos:start="55:37" pos:end="55:37"><name pos:start="55:37" pos:end="55:37">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <return pos:start="57:5" pos:end="57:41">return <expr pos:start="57:12" pos:end="57:40"><name pos:start="57:12" pos:end="57:20">best_vect</name> <operator pos:start="57:22" pos:end="57:22">-</operator> <name pos:start="57:24" pos:end="57:32">BLOCKSIZE</name> <operator pos:start="57:34" pos:end="57:34">/</operator> <literal type="number" pos:start="57:36" pos:end="57:38">2</literal> <operator pos:start="57:38" pos:end="57:38">+</operator> <literal type="number" pos:start="57:40" pos:end="57:40">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
