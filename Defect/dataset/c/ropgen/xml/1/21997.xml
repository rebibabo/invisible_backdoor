<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21997.c" pos:tabs="8"><function pos:start="1:1" pos:end="309:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:33">hyscale</name>)<parameter_list pos:start="1:35" pos:end="9:58">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint16_t</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">dst</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:62">dstWidth</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:76"><decl pos:start="1:65" pos:end="1:76"><type pos:start="1:65" pos:end="1:76"><name pos:start="1:65" pos:end="1:71">uint8_t</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">src</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:86"><decl pos:start="1:79" pos:end="1:86"><type pos:start="1:79" pos:end="1:86"><name pos:start="1:79" pos:end="1:81">int</name></type> <name pos:start="1:83" pos:end="1:86">srcW</name></decl></parameter>, <parameter pos:start="1:89" pos:end="1:96"><decl pos:start="1:89" pos:end="1:96"><type pos:start="1:89" pos:end="1:96"><name pos:start="1:89" pos:end="1:91">int</name></type> <name pos:start="1:93" pos:end="1:96">xInc</name></decl></parameter>,

				   <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:44">flags</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:63"><decl pos:start="3:47" pos:end="3:63"><type pos:start="3:47" pos:end="3:63"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:63">canMMX2BeUsed</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:84"><decl pos:start="3:66" pos:end="3:84"><type pos:start="3:66" pos:end="3:84"><name pos:start="3:66" pos:end="3:72">int16_t</name> <modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:84">hLumFilter</name></decl></parameter>,

				   <parameter pos:start="5:36" pos:end="5:57"><decl pos:start="5:36" pos:end="5:57"><type pos:start="5:36" pos:end="5:57"><name pos:start="5:36" pos:end="5:42">int16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:57">hLumFilterPos</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:77"><decl pos:start="5:60" pos:end="5:77"><type pos:start="5:60" pos:end="5:77"><name pos:start="5:60" pos:end="5:62">int</name></type> <name pos:start="5:64" pos:end="5:77">hLumFilterSize</name></decl></parameter>, <parameter pos:start="5:80" pos:end="5:95"><decl pos:start="5:80" pos:end="5:95"><type pos:start="5:80" pos:end="5:95"><name pos:start="5:80" pos:end="5:83">void</name> <modifier pos:start="5:85" pos:end="5:85">*</modifier></type><name pos:start="5:86" pos:end="5:95">funnyYCode</name></decl></parameter>, 

				   <parameter pos:start="7:36" pos:end="7:48"><decl pos:start="7:36" pos:end="7:48"><type pos:start="7:36" pos:end="7:48"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:48">srcFormat</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:75"><decl pos:start="7:51" pos:end="7:75"><type pos:start="7:51" pos:end="7:75"><name pos:start="7:51" pos:end="7:57">uint8_t</name> <modifier pos:start="7:59" pos:end="7:59">*</modifier></type><name pos:start="7:60" pos:end="7:75">formatConvBuffer</name></decl></parameter>, <parameter pos:start="7:78" pos:end="7:96"><decl pos:start="7:78" pos:end="7:96"><type pos:start="7:78" pos:end="7:96"><name pos:start="7:78" pos:end="7:84">int16_t</name> <modifier pos:start="7:86" pos:end="7:86">*</modifier></type><name pos:start="7:87" pos:end="7:96">mmx2Filter</name></decl></parameter>,

				   <parameter pos:start="9:36" pos:end="9:57"><decl pos:start="9:36" pos:end="9:57"><type pos:start="9:36" pos:end="9:57"><name pos:start="9:36" pos:end="9:42">int32_t</name> <modifier pos:start="9:44" pos:end="9:44">*</modifier></type><name pos:start="9:45" pos:end="9:57">mmx2FilterPos</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="309:1">{<block_content pos:start="13:5" pos:end="307:5">

    <if_stmt pos:start="13:5" pos:end="96:0"><if pos:start="13:5" pos:end="21:5">if<condition pos:start="13:7" pos:end="13:30">(<expr pos:start="13:8" pos:end="13:29"><name pos:start="13:8" pos:end="13:16">srcFormat</name><operator pos:start="13:17" pos:end="13:18">==</operator><name pos:start="13:19" pos:end="13:29">IMGFMT_YUY2</name></expr>)</condition>

    <block pos:start="15:5" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:30">

	<function_decl pos:start="17:9" pos:end="17:53"><type pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:14">RENAME</name></type>(<name pos:start="17:16" pos:end="17:22">yuy2ToY</name>)<parameter_list pos:start="17:24" pos:end="17:52">(<parameter pos:start="17:25" pos:end="17:40"><decl pos:start="17:25" pos:end="17:40"><type pos:start="17:25" pos:end="17:40"><name pos:start="17:25" pos:end="17:40">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="17:43" pos:end="17:45"><decl pos:start="17:43" pos:end="17:45"><type pos:start="17:43" pos:end="17:45"><name pos:start="17:43" pos:end="17:45">src</name></type></decl></parameter>, <parameter pos:start="17:48" pos:end="17:51"><decl pos:start="17:48" pos:end="17:51"><type pos:start="17:48" pos:end="17:51"><name pos:start="17:48" pos:end="17:51">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:11">src</name><operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="23:5" pos:end="31:5">else if<condition pos:start="23:12" pos:end="23:35">(<expr pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:21">srcFormat</name><operator pos:start="23:22" pos:end="23:23">==</operator><name pos:start="23:24" pos:end="23:34">IMGFMT_UYVY</name></expr>)</condition>

    <block pos:start="25:5" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:30">

	<function_decl pos:start="27:9" pos:end="27:53"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:14">RENAME</name></type>(<name pos:start="27:16" pos:end="27:22">uyvyToY</name>)<parameter_list pos:start="27:24" pos:end="27:52">(<parameter pos:start="27:25" pos:end="27:40"><decl pos:start="27:25" pos:end="27:40"><type pos:start="27:25" pos:end="27:40"><name pos:start="27:25" pos:end="27:40">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="27:43" pos:end="27:45"><decl pos:start="27:43" pos:end="27:45"><type pos:start="27:43" pos:end="27:45"><name pos:start="27:43" pos:end="27:45">src</name></type></decl></parameter>, <parameter pos:start="27:48" pos:end="27:51"><decl pos:start="27:48" pos:end="27:51"><type pos:start="27:48" pos:end="27:51"><name pos:start="27:48" pos:end="27:51">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:11">src</name><operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="33:5" pos:end="41:5">else if<condition pos:start="33:12" pos:end="33:36">(<expr pos:start="33:13" pos:end="33:35"><name pos:start="33:13" pos:end="33:21">srcFormat</name><operator pos:start="33:22" pos:end="33:23">==</operator><name pos:start="33:24" pos:end="33:35">IMGFMT_BGR32</name></expr>)</condition>

    <block pos:start="35:5" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:30">

	<function_decl pos:start="37:9" pos:end="37:54"><type pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:14">RENAME</name></type>(<name pos:start="37:16" pos:end="37:23">bgr32ToY</name>)<parameter_list pos:start="37:25" pos:end="37:53">(<parameter pos:start="37:26" pos:end="37:41"><decl pos:start="37:26" pos:end="37:41"><type pos:start="37:26" pos:end="37:41"><name pos:start="37:26" pos:end="37:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="37:44" pos:end="37:46"><decl pos:start="37:44" pos:end="37:46"><type pos:start="37:44" pos:end="37:46"><name pos:start="37:44" pos:end="37:46">src</name></type></decl></parameter>, <parameter pos:start="37:49" pos:end="37:52"><decl pos:start="37:49" pos:end="37:52"><type pos:start="37:49" pos:end="37:52"><name pos:start="37:49" pos:end="37:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:11">src</name><operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="43:5" pos:end="51:5">else if<condition pos:start="43:12" pos:end="43:36">(<expr pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:21">srcFormat</name><operator pos:start="43:22" pos:end="43:23">==</operator><name pos:start="43:24" pos:end="43:35">IMGFMT_BGR24</name></expr>)</condition>

    <block pos:start="45:5" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:30">

	<function_decl pos:start="47:9" pos:end="47:54"><type pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:14">RENAME</name></type>(<name pos:start="47:16" pos:end="47:23">bgr24ToY</name>)<parameter_list pos:start="47:25" pos:end="47:53">(<parameter pos:start="47:26" pos:end="47:41"><decl pos:start="47:26" pos:end="47:41"><type pos:start="47:26" pos:end="47:41"><name pos:start="47:26" pos:end="47:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="47:44" pos:end="47:46"><decl pos:start="47:44" pos:end="47:46"><type pos:start="47:44" pos:end="47:46"><name pos:start="47:44" pos:end="47:46">src</name></type></decl></parameter>, <parameter pos:start="47:49" pos:end="47:52"><decl pos:start="47:49" pos:end="47:52"><type pos:start="47:49" pos:end="47:52"><name pos:start="47:49" pos:end="47:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:11">src</name><operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="53:5" pos:end="61:5">else if<condition pos:start="53:12" pos:end="53:36">(<expr pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:21">srcFormat</name><operator pos:start="53:22" pos:end="53:23">==</operator><name pos:start="53:24" pos:end="53:35">IMGFMT_BGR16</name></expr>)</condition>

    <block pos:start="55:5" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:30">

	<function_decl pos:start="57:9" pos:end="57:54"><type pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:14">RENAME</name></type>(<name pos:start="57:16" pos:end="57:23">bgr16ToY</name>)<parameter_list pos:start="57:25" pos:end="57:53">(<parameter pos:start="57:26" pos:end="57:41"><decl pos:start="57:26" pos:end="57:41"><type pos:start="57:26" pos:end="57:41"><name pos:start="57:26" pos:end="57:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="57:44" pos:end="57:46"><decl pos:start="57:44" pos:end="57:46"><type pos:start="57:44" pos:end="57:46"><name pos:start="57:44" pos:end="57:46">src</name></type></decl></parameter>, <parameter pos:start="57:49" pos:end="57:52"><decl pos:start="57:49" pos:end="57:52"><type pos:start="57:49" pos:end="57:52"><name pos:start="57:49" pos:end="57:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:11">src</name><operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="63:5" pos:end="71:5">else if<condition pos:start="63:12" pos:end="63:36">(<expr pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:21">srcFormat</name><operator pos:start="63:22" pos:end="63:23">==</operator><name pos:start="63:24" pos:end="63:35">IMGFMT_BGR15</name></expr>)</condition>

    <block pos:start="65:5" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:30">

	<function_decl pos:start="67:9" pos:end="67:54"><type pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:14">RENAME</name></type>(<name pos:start="67:16" pos:end="67:23">bgr15ToY</name>)<parameter_list pos:start="67:25" pos:end="67:53">(<parameter pos:start="67:26" pos:end="67:41"><decl pos:start="67:26" pos:end="67:41"><type pos:start="67:26" pos:end="67:41"><name pos:start="67:26" pos:end="67:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="67:44" pos:end="67:46"><decl pos:start="67:44" pos:end="67:46"><type pos:start="67:44" pos:end="67:46"><name pos:start="67:44" pos:end="67:46">src</name></type></decl></parameter>, <parameter pos:start="67:49" pos:end="67:52"><decl pos:start="67:49" pos:end="67:52"><type pos:start="67:49" pos:end="67:52"><name pos:start="67:49" pos:end="67:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="69:9" pos:end="69:30"><expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:11">src</name><operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="73:5" pos:end="81:5">else if<condition pos:start="73:12" pos:end="73:36">(<expr pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:21">srcFormat</name><operator pos:start="73:22" pos:end="73:23">==</operator><name pos:start="73:24" pos:end="73:35">IMGFMT_RGB32</name></expr>)</condition>

    <block pos:start="75:5" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:30">

	<function_decl pos:start="77:9" pos:end="77:54"><type pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:14">RENAME</name></type>(<name pos:start="77:16" pos:end="77:23">rgb32ToY</name>)<parameter_list pos:start="77:25" pos:end="77:53">(<parameter pos:start="77:26" pos:end="77:41"><decl pos:start="77:26" pos:end="77:41"><type pos:start="77:26" pos:end="77:41"><name pos:start="77:26" pos:end="77:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="77:44" pos:end="77:46"><decl pos:start="77:44" pos:end="77:46"><type pos:start="77:44" pos:end="77:46"><name pos:start="77:44" pos:end="77:46">src</name></type></decl></parameter>, <parameter pos:start="77:49" pos:end="77:52"><decl pos:start="77:49" pos:end="77:52"><type pos:start="77:49" pos:end="77:52"><name pos:start="77:49" pos:end="77:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:11">src</name><operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="83:5" pos:end="96:0">else if<condition pos:start="83:12" pos:end="83:36">(<expr pos:start="83:13" pos:end="83:35"><name pos:start="83:13" pos:end="83:21">srcFormat</name><operator pos:start="83:22" pos:end="83:23">==</operator><name pos:start="83:24" pos:end="83:35">IMGFMT_RGB24</name></expr>)</condition>

    <block pos:start="85:5" pos:end="96:0">{<block_content pos:start="87:9" pos:end="89:30">

	<function_decl pos:start="87:9" pos:end="87:54"><type pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:14">RENAME</name></type>(<name pos:start="87:16" pos:end="87:23">rgb24ToY</name>)<parameter_list pos:start="87:25" pos:end="87:53">(<parameter pos:start="87:26" pos:end="87:41"><decl pos:start="87:26" pos:end="87:41"><type pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:41">formatConvBuffer</name></type></decl></parameter>, <parameter pos:start="87:44" pos:end="87:46"><decl pos:start="87:44" pos:end="87:46"><type pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:46">src</name></type></decl></parameter>, <parameter pos:start="87:49" pos:end="87:52"><decl pos:start="87:49" pos:end="87:52"><type pos:start="87:49" pos:end="87:52"><name pos:start="87:49" pos:end="87:52">srcW</name></type></decl></parameter>)</parameter_list>;</function_decl>

	<expr_stmt pos:start="89:9" pos:end="89:30"><expr pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:11">src</name><operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:29">formatConvBuffer</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="95:1" pos:end="95:15">#<cpp:directive pos:start="95:2" pos:end="95:6">ifdef</cpp:directive> <name pos:start="95:8" pos:end="95:15">HAVE_MMX</name></cpp:ifdef>

	<comment type="line" pos:start="97:9" pos:end="97:90">// use the new MMX scaler if th mmx2 cant be used (its faster than the x86asm one)</comment>

    <if_stmt pos:start="99:5" pos:end="307:5"><if pos:start="99:5" pos:end="307:5">if<condition pos:start="99:7" pos:end="102:0">(<expr pos:start="99:8" pos:end="99:53"><operator pos:start="99:8" pos:end="99:8">!</operator><operator pos:start="99:9" pos:end="99:9">(</operator><name pos:start="99:10" pos:end="99:14">flags</name><operator pos:start="99:15" pos:end="99:15">&amp;</operator><name pos:start="99:16" pos:end="99:32">SWS_FAST_BILINEAR</name><operator pos:start="99:33" pos:end="99:33">)</operator> <operator pos:start="99:35" pos:end="99:36">||</operator> <operator pos:start="99:38" pos:end="99:38">(</operator><operator pos:start="99:39" pos:end="99:39">!</operator><name pos:start="99:40" pos:end="99:52">canMMX2BeUsed</name><operator pos:start="99:53" pos:end="99:53">)</operator></expr>)</condition><block type="pseudo" pos:start="103:5" pos:end="307:5"><block_content pos:start="103:5" pos:end="307:5">

<cpp:else pos:start="101:1" pos:end="101:5">#<cpp:directive pos:start="101:2" pos:end="101:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="103:5" pos:end="307:5"><if pos:start="103:5" pos:end="111:5">if<condition pos:start="103:7" pos:end="106:0">(<expr pos:start="103:8" pos:end="103:33"><operator pos:start="103:8" pos:end="103:8">!</operator><operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:14">flags</name><operator pos:start="103:15" pos:end="103:15">&amp;</operator><name pos:start="103:16" pos:end="103:32">SWS_FAST_BILINEAR</name><operator pos:start="103:33" pos:end="103:33">)</operator></expr>)</condition>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

    <block pos:start="107:5" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:98">

    	<function_decl pos:start="109:9" pos:end="109:98"><type pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:14">RENAME</name></type>(<name pos:start="109:16" pos:end="109:21">hScale</name>)<parameter_list pos:start="109:23" pos:end="109:97">(<parameter pos:start="109:24" pos:end="109:26"><decl pos:start="109:24" pos:end="109:26"><type pos:start="109:24" pos:end="109:26"><name pos:start="109:24" pos:end="109:26">dst</name></type></decl></parameter>, <parameter pos:start="109:29" pos:end="109:36"><decl pos:start="109:29" pos:end="109:36"><type pos:start="109:29" pos:end="109:36"><name pos:start="109:29" pos:end="109:36">dstWidth</name></type></decl></parameter>, <parameter pos:start="109:39" pos:end="109:41"><decl pos:start="109:39" pos:end="109:41"><type pos:start="109:39" pos:end="109:41"><name pos:start="109:39" pos:end="109:41">src</name></type></decl></parameter>, <parameter pos:start="109:44" pos:end="109:47"><decl pos:start="109:44" pos:end="109:47"><type pos:start="109:44" pos:end="109:47"><name pos:start="109:44" pos:end="109:47">srcW</name></type></decl></parameter>, <parameter pos:start="109:50" pos:end="109:53"><decl pos:start="109:50" pos:end="109:53"><type pos:start="109:50" pos:end="109:53"><name pos:start="109:50" pos:end="109:53">xInc</name></type></decl></parameter>, <parameter pos:start="109:56" pos:end="109:65"><decl pos:start="109:56" pos:end="109:65"><type pos:start="109:56" pos:end="109:65"><name pos:start="109:56" pos:end="109:65">hLumFilter</name></type></decl></parameter>, <parameter pos:start="109:68" pos:end="109:80"><decl pos:start="109:68" pos:end="109:80"><type pos:start="109:68" pos:end="109:80"><name pos:start="109:68" pos:end="109:80">hLumFilterPos</name></type></decl></parameter>, <parameter pos:start="109:83" pos:end="109:96"><decl pos:start="109:83" pos:end="109:96"><type pos:start="109:83" pos:end="109:96"><name pos:start="109:83" pos:end="109:96">hLumFilterSize</name></type></decl></parameter>)</parameter_list>;</function_decl>

    </block_content>}</block></if>

    <else pos:start="113:5" pos:end="307:5">else <comment type="line" pos:start="113:10" pos:end="113:50">// Fast Bilinear upscale / crap downscale</comment>

    <block pos:start="115:5" pos:end="307:5">{<block_content pos:start="121:9" pos:end="306:0">

<cpp:ifdef pos:start="117:1" pos:end="117:15">#<cpp:directive pos:start="117:2" pos:end="117:6">ifdef</cpp:directive> <name pos:start="117:8" pos:end="117:15">ARCH_X86</name></cpp:ifdef>

<cpp:ifdef pos:start="119:1" pos:end="119:16">#<cpp:directive pos:start="119:2" pos:end="119:6">ifdef</cpp:directive> <name pos:start="119:8" pos:end="119:16">HAVE_MMX2</name></cpp:ifdef>

	<decl_stmt pos:start="121:9" pos:end="121:14"><decl pos:start="121:9" pos:end="121:13"><type pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:11">int</name></type> <name pos:start="121:13" pos:end="121:13">i</name></decl>;</decl_stmt>

	<if_stmt pos:start="123:9" pos:end="286:0"><if pos:start="123:9" pos:end="191:9">if<condition pos:start="123:11" pos:end="123:25">(<expr pos:start="123:12" pos:end="123:24"><name pos:start="123:12" pos:end="123:24">canMMX2BeUsed</name></expr>)</condition>

	<block pos:start="125:9" pos:end="191:9">{<block_content pos:start="127:17" pos:end="189:87">

		<asm pos:start="127:17" pos:end="187:18">asm <specifier pos:start="127:21" pos:end="127:28">volatile</specifier>(

			"pxor %%mm7, %%mm7		\n\t"

			"movl %0, %%ecx			\n\t"

			"movl %1, %%edi			\n\t"

			"movl %2, %%edx			\n\t"

			"movl %3, %%ebx			\n\t"

			"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="139:63" pos:end="139:66">// i</comment>

			PREFETCH" (%%ecx)		\n\t"

			PREFETCH" 32(%%ecx)		\n\t"

			PREFETCH" 64(%%ecx)		\n\t"



<cpp:define pos:start="149:1" pos:end="163:12">#<cpp:directive pos:start="149:2" pos:end="149:7">define</cpp:directive> <cpp:macro pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:20">FUNNY_Y_CODE</name></cpp:macro> \

			<cpp:value pos:start="151:25" pos:end="163:12">"movl (%%ebx), %%esi		\n\t"\

			"call *%4			\n\t"\

			"addl (%%ebx, %%eax), %%ecx	\n\t"\

			"addl %%eax, %%edi		\n\t"\

			"xorl %%eax, %%eax		\n\t"\



FUNNY_Y_CODE</cpp:value></cpp:define>

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE

FUNNY_Y_CODE



			:: "m" (src), "m" (dst), "m" (mmx2Filter), "m" (mmx2FilterPos),

			"m" (funnyYCode)

			: "%eax", "%ebx", "%ecx", "%edx", "%esi", "%edi"

		);</asm>

		<for pos:start="189:17" pos:end="189:87">for<control pos:start="189:20" pos:end="189:61">(<init pos:start="189:21" pos:end="189:33"><expr pos:start="189:21" pos:end="189:32"><name pos:start="189:21" pos:end="189:21">i</name><operator pos:start="189:22" pos:end="189:22">=</operator><name pos:start="189:23" pos:end="189:30">dstWidth</name><operator pos:start="189:31" pos:end="189:31">-</operator><literal type="number" pos:start="189:32" pos:end="189:32">1</literal></expr>;</init> <condition pos:start="189:35" pos:end="189:56"><expr pos:start="189:35" pos:end="189:55"><operator pos:start="189:35" pos:end="189:35">(</operator><name pos:start="189:36" pos:end="189:36">i</name><operator pos:start="189:37" pos:end="189:37">*</operator><name pos:start="189:38" pos:end="189:41">xInc</name><operator pos:start="189:42" pos:end="189:42">)</operator><operator pos:start="189:43" pos:end="189:44">&gt;&gt;</operator><literal type="number" pos:start="189:45" pos:end="189:46">16</literal> <operator pos:start="189:48" pos:end="189:49">&gt;=</operator><name pos:start="189:50" pos:end="189:53">srcW</name><operator pos:start="189:54" pos:end="189:54">-</operator><literal type="number" pos:start="189:55" pos:end="189:55">1</literal></expr>;</condition> <incr pos:start="189:58" pos:end="189:60"><expr pos:start="189:58" pos:end="189:60"><name pos:start="189:58" pos:end="189:58">i</name><operator pos:start="189:59" pos:end="189:60">--</operator></expr></incr>)</control><block type="pseudo" pos:start="189:63" pos:end="189:87"><block_content pos:start="189:63" pos:end="189:87"> <expr_stmt pos:start="189:63" pos:end="189:87"><expr pos:start="189:63" pos:end="189:86"><name pos:start="189:63" pos:end="189:68"><name pos:start="189:63" pos:end="189:65">dst</name><index pos:start="189:66" pos:end="189:68">[<expr pos:start="189:67" pos:end="189:67"><name pos:start="189:67" pos:end="189:67">i</name></expr>]</index></name> <operator pos:start="189:70" pos:end="189:70">=</operator> <name pos:start="189:72" pos:end="189:82"><name pos:start="189:72" pos:end="189:74">src</name><index pos:start="189:75" pos:end="189:82">[<expr pos:start="189:76" pos:end="189:81"><name pos:start="189:76" pos:end="189:79">srcW</name><operator pos:start="189:80" pos:end="189:80">-</operator><literal type="number" pos:start="189:81" pos:end="189:81">1</literal></expr>]</index></name><operator pos:start="189:83" pos:end="189:83">*</operator><literal type="number" pos:start="189:84" pos:end="189:86">128</literal></expr>;</expr_stmt></block_content></block></for>

	</block_content>}</block></if>

	<else pos:start="193:9" pos:end="286:0">else

	<block pos:start="195:9" pos:end="286:0">{<block_content pos:start="201:9" pos:end="280:0">

<cpp:endif pos:start="197:1" pos:end="197:6">#<cpp:directive pos:start="197:2" pos:end="197:6">endif</cpp:directive></cpp:endif>

	<comment type="line" pos:start="199:9" pos:end="199:36">//NO MMX just normal asm ...</comment>

	<asm pos:start="201:9" pos:end="280:0">asm <specifier pos:start="201:13" pos:end="201:20">volatile</specifier>(

		"xorl %%eax, %%eax		\n\t" <comment type="line" pos:start="203:55" pos:end="203:58">// i</comment>

		"xorl %%ebx, %%ebx		\n\t" <comment type="line" pos:start="205:55" pos:end="205:59">// xx</comment>

		"xorl %%ecx, %%ecx		\n\t" <comment type="line" pos:start="207:55" pos:end="207:65">// 2*xalpha</comment>

		".balign 16			\n\t"

		"1:				\n\t"

		"movzbl  (%0, %%ebx), %%edi	\n\t" <comment type="line" pos:start="213:55" pos:end="213:63">//src[xx]</comment>

		"movzbl 1(%0, %%ebx), %%esi	\n\t" <comment type="line" pos:start="215:55" pos:end="215:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="217:55" pos:end="217:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="219:55" pos:end="219:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="223:55" pos:end="223:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"movl %1, %%edi			\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, (%%edi, %%eax, 2)	\n\t"

		"addw %4, %%cx			\n\t" <comment type="line" pos:start="231:55" pos:end="231:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adcl %3, %%ebx			\n\t" <comment type="line" pos:start="233:55" pos:end="233:76">//xx+= xInc&gt;&gt;8 + carry</comment>



		"movzbl (%0, %%ebx), %%edi	\n\t" <comment type="line" pos:start="237:55" pos:end="237:63">//src[xx]</comment>

		"movzbl 1(%0, %%ebx), %%esi	\n\t" <comment type="line" pos:start="239:55" pos:end="239:65">//src[xx+1]</comment>

		"subl %%edi, %%esi		\n\t" <comment type="line" pos:start="241:55" pos:end="241:75">//src[xx+1] - src[xx]</comment>

		"imull %%ecx, %%esi		\n\t" <comment type="line" pos:start="243:55" pos:end="243:86">//(src[xx+1] - src[xx])*2*xalpha</comment>

		"shll $16, %%edi		\n\t"

		"addl %%edi, %%esi		\n\t" <comment type="line" pos:start="247:55" pos:end="247:97">//src[xx+1]*2*xalpha + src[xx]*(1-2*xalpha)</comment>

		"movl %1, %%edi			\n\t"

		"shrl $9, %%esi			\n\t"

		"movw %%si, 2(%%edi, %%eax, 2)	\n\t"

		"addw %4, %%cx			\n\t" <comment type="line" pos:start="255:55" pos:end="255:77">//2*xalpha += xInc&amp;0xFF</comment>

		"adcl %3, %%ebx			\n\t" <comment type="line" pos:start="257:55" pos:end="257:76">//xx+= xInc&gt;&gt;8 + carry</comment>





		"addl $2, %%eax			\n\t"

		"cmpl %2, %%eax			\n\t"

		" jb 1b				\n\t"





		:: "r" (src), "m" (dst), "m" (dstWidth), "m" (xInc&gt;&gt;16), "m" (xInc&amp;0xFFFF)

		: "%eax", "%ebx", "%ecx", "%edi", "%esi"

		);</asm>

<cpp:ifdef pos:start="279:1" pos:end="279:16">#<cpp:directive pos:start="279:2" pos:end="279:6">ifdef</cpp:directive> <name pos:start="279:8" pos:end="279:16">HAVE_MMX2</name></cpp:ifdef>

	</block_content>}</block></else></if_stmt> <comment type="line" pos:start="281:11" pos:end="281:32">//if MMX2 cant be used</comment>

<cpp:endif pos:start="283:1" pos:end="283:6">#<cpp:directive pos:start="283:2" pos:end="283:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="285:1" pos:end="285:5">#<cpp:directive pos:start="285:2" pos:end="285:5">else</cpp:directive></cpp:else>

	<decl_stmt pos:start="287:9" pos:end="287:14"><decl pos:start="287:9" pos:end="287:13"><type pos:start="287:9" pos:end="287:11"><name pos:start="287:9" pos:end="287:11">int</name></type> <name pos:start="287:13" pos:end="287:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="289:9" pos:end="289:28"><decl pos:start="289:9" pos:end="289:27"><type pos:start="289:9" pos:end="289:20"><name pos:start="289:9" pos:end="289:16">unsigned</name> <name pos:start="289:18" pos:end="289:20">int</name></type> <name pos:start="289:22" pos:end="289:25">xpos</name><init pos:start="289:26" pos:end="289:27">=<expr pos:start="289:27" pos:end="289:27"><literal type="number" pos:start="289:27" pos:end="289:27">0</literal></expr></init></decl>;</decl_stmt>

	<for pos:start="291:9" pos:end="306:0">for<control pos:start="291:12" pos:end="291:31">(<init pos:start="291:13" pos:end="291:16"><expr pos:start="291:13" pos:end="291:15"><name pos:start="291:13" pos:end="291:13">i</name><operator pos:start="291:14" pos:end="291:14">=</operator><literal type="number" pos:start="291:15" pos:end="291:15">0</literal></expr>;</init><condition pos:start="291:17" pos:end="291:27"><expr pos:start="291:17" pos:end="291:26"><name pos:start="291:17" pos:end="291:17">i</name><operator pos:start="291:18" pos:end="291:18">&lt;</operator><name pos:start="291:19" pos:end="291:26">dstWidth</name></expr>;</condition><incr pos:start="291:28" pos:end="291:30"><expr pos:start="291:28" pos:end="291:30"><name pos:start="291:28" pos:end="291:28">i</name><operator pos:start="291:29" pos:end="291:30">++</operator></expr></incr>)</control>

	<block pos:start="293:9" pos:end="306:0">{<block_content pos:start="295:17" pos:end="301:27">

		<decl_stmt pos:start="295:17" pos:end="295:50"><decl pos:start="295:17" pos:end="295:49"><type pos:start="295:17" pos:end="295:37"><specifier pos:start="295:17" pos:end="295:24">register</specifier> <name pos:start="295:26" pos:end="295:33">unsigned</name> <name pos:start="295:35" pos:end="295:37">int</name></type> <name pos:start="295:39" pos:end="295:40">xx</name><init pos:start="295:41" pos:end="295:49">=<expr pos:start="295:42" pos:end="295:49"><name pos:start="295:42" pos:end="295:45">xpos</name><operator pos:start="295:46" pos:end="295:47">&gt;&gt;</operator><literal type="number" pos:start="295:48" pos:end="295:49">16</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="297:17" pos:end="297:62"><decl pos:start="297:17" pos:end="297:61"><type pos:start="297:17" pos:end="297:37"><specifier pos:start="297:17" pos:end="297:24">register</specifier> <name pos:start="297:26" pos:end="297:33">unsigned</name> <name pos:start="297:35" pos:end="297:37">int</name></type> <name pos:start="297:39" pos:end="297:44">xalpha</name><init pos:start="297:45" pos:end="297:61">=<expr pos:start="297:46" pos:end="297:61"><operator pos:start="297:46" pos:end="297:46">(</operator><name pos:start="297:47" pos:end="297:50">xpos</name><operator pos:start="297:51" pos:end="297:51">&amp;</operator><literal type="number" pos:start="297:52" pos:end="297:57">0xFFFF</literal><operator pos:start="297:58" pos:end="297:58">)</operator><operator pos:start="297:59" pos:end="297:60">&gt;&gt;</operator><literal type="number" pos:start="297:61" pos:end="297:61">9</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="299:17" pos:end="299:68"><expr pos:start="299:17" pos:end="299:67"><name pos:start="299:17" pos:end="299:22"><name pos:start="299:17" pos:end="299:19">dst</name><index pos:start="299:20" pos:end="299:22">[<expr pos:start="299:21" pos:end="299:21"><name pos:start="299:21" pos:end="299:21">i</name></expr>]</index></name><operator pos:start="299:23" pos:end="299:23">=</operator> <operator pos:start="299:25" pos:end="299:25">(</operator><name pos:start="299:26" pos:end="299:32"><name pos:start="299:26" pos:end="299:28">src</name><index pos:start="299:29" pos:end="299:32">[<expr pos:start="299:30" pos:end="299:31"><name pos:start="299:30" pos:end="299:31">xx</name></expr>]</index></name><operator pos:start="299:33" pos:end="299:34">&lt;&lt;</operator><literal type="number" pos:start="299:35" pos:end="299:35">7</literal><operator pos:start="299:36" pos:end="299:36">)</operator> <operator pos:start="299:38" pos:end="299:38">+</operator> <operator pos:start="299:40" pos:end="299:40">(</operator><name pos:start="299:41" pos:end="299:49"><name pos:start="299:41" pos:end="299:43">src</name><index pos:start="299:44" pos:end="299:49">[<expr pos:start="299:45" pos:end="299:48"><name pos:start="299:45" pos:end="299:46">xx</name><operator pos:start="299:47" pos:end="299:47">+</operator><literal type="number" pos:start="299:48" pos:end="299:48">1</literal></expr>]</index></name> <operator pos:start="299:51" pos:end="299:51">-</operator> <name pos:start="299:53" pos:end="299:59"><name pos:start="299:53" pos:end="299:55">src</name><index pos:start="299:56" pos:end="299:59">[<expr pos:start="299:57" pos:end="299:58"><name pos:start="299:57" pos:end="299:58">xx</name></expr>]</index></name><operator pos:start="299:60" pos:end="299:60">)</operator><operator pos:start="299:61" pos:end="299:61">*</operator><name pos:start="299:62" pos:end="299:67">xalpha</name></expr>;</expr_stmt>

		<expr_stmt pos:start="301:17" pos:end="301:27"><expr pos:start="301:17" pos:end="301:26"><name pos:start="301:17" pos:end="301:20">xpos</name><operator pos:start="301:21" pos:end="301:22">+=</operator><name pos:start="301:23" pos:end="301:26">xInc</name></expr>;</expr_stmt>

	</block_content>}</block></for>

<cpp:endif pos:start="305:1" pos:end="305:6">#<cpp:directive pos:start="305:2" pos:end="305:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
