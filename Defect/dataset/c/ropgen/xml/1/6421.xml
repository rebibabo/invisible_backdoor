<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6421.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gic_cpu_write</name><parameter_list pos:start="1:26" pos:end="1:76">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:35">gic_state</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:47"><decl pos:start="1:41" pos:end="1:47"><type pos:start="1:41" pos:end="1:47"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:47">cpu</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:59">offset</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:75"><decl pos:start="1:62" pos:end="1:75"><type pos:start="1:62" pos:end="1:75"><name pos:start="1:62" pos:end="1:69">uint32_t</name></type> <name pos:start="1:71" pos:end="1:75">value</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:18">

    <switch pos:start="5:5" pos:end="37:5">switch <condition pos:start="5:12" pos:end="5:19">(<expr pos:start="5:13" pos:end="5:18"><name pos:start="5:13" pos:end="5:18">offset</name></expr>)</condition> <block pos:start="5:21" pos:end="37:5">{<block_content pos:start="7:5" pos:end="35:15">

    <case pos:start="7:5" pos:end="7:14">case <expr pos:start="7:10" pos:end="7:13"><literal type="number" pos:start="7:10" pos:end="7:13">0x00</literal></expr>:</case> <comment type="block" pos:start="7:16" pos:end="7:28">/* Control */</comment>

        <expr_stmt pos:start="9:9" pos:end="9:42"><expr pos:start="9:9" pos:end="9:41"><name pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:9">s</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:22">cpu_enabled</name><index pos:start="9:23" pos:end="9:27">[<expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:26">cpu</name></expr>]</index></name> <operator pos:start="9:29" pos:end="9:29">=</operator> <operator pos:start="9:31" pos:end="9:31">(</operator><name pos:start="9:32" pos:end="9:36">value</name> <operator pos:start="9:38" pos:end="9:38">&amp;</operator> <literal type="number" pos:start="9:40" pos:end="9:40">1</literal><operator pos:start="9:41" pos:end="9:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="11:9" pos:end="11:72"><expr pos:start="11:9" pos:end="11:71"><call pos:start="11:9" pos:end="11:71"><name pos:start="11:9" pos:end="11:15">DPRINTF</name><argument_list pos:start="11:16" pos:end="11:71">(<argument pos:start="11:17" pos:end="11:34"><expr pos:start="11:17" pos:end="11:34"><literal type="string" pos:start="11:17" pos:end="11:34">"CPU %d %sabled\n"</literal></expr></argument>, <argument pos:start="11:37" pos:end="11:39"><expr pos:start="11:37" pos:end="11:39"><name pos:start="11:37" pos:end="11:39">cpu</name></expr></argument>, <argument pos:start="11:42" pos:end="11:70"><expr pos:start="11:42" pos:end="11:70"><ternary pos:start="11:42" pos:end="11:70"><condition pos:start="11:42" pos:end="11:57"><expr pos:start="11:42" pos:end="11:55"><name pos:start="11:42" pos:end="11:55"><name pos:start="11:42" pos:end="11:42">s</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:55">cpu_enabled</name></name></expr> ?</condition><then pos:start="11:59" pos:end="11:62"> <expr pos:start="11:59" pos:end="11:62"><literal type="string" pos:start="11:59" pos:end="11:62">"En"</literal></expr> </then><else pos:start="11:64" pos:end="11:70">: <expr pos:start="11:66" pos:end="11:70"><literal type="string" pos:start="11:66" pos:end="11:70">"Dis"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="13:9" pos:end="13:14">break;</break>

    <case pos:start="15:5" pos:end="15:14">case <expr pos:start="15:10" pos:end="15:13"><literal type="number" pos:start="15:10" pos:end="15:13">0x04</literal></expr>:</case> <comment type="block" pos:start="15:16" pos:end="15:34">/* Priority mask */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:47"><expr pos:start="17:9" pos:end="17:46"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:24">priority_mask</name><index pos:start="17:25" pos:end="17:29">[<expr pos:start="17:26" pos:end="17:28"><name pos:start="17:26" pos:end="17:28">cpu</name></expr>]</index></name> <operator pos:start="17:31" pos:end="17:31">=</operator> <operator pos:start="17:33" pos:end="17:33">(</operator><name pos:start="17:34" pos:end="17:38">value</name> <operator pos:start="17:40" pos:end="17:40">&amp;</operator> <literal type="number" pos:start="17:42" pos:end="17:45">0xff</literal><operator pos:start="17:46" pos:end="17:46">)</operator></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:14">case <expr pos:start="21:10" pos:end="21:13"><literal type="number" pos:start="21:10" pos:end="21:13">0x08</literal></expr>:</case> <comment type="block" pos:start="21:16" pos:end="21:33">/* Binary Point */</comment>

        <comment type="block" pos:start="23:9" pos:end="23:35">/* ??? Not implemented.  */</comment>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:14">case <expr pos:start="27:10" pos:end="27:13"><literal type="number" pos:start="27:10" pos:end="27:13">0x10</literal></expr>:</case> <comment type="block" pos:start="27:16" pos:end="27:37">/* End Of Interrupt */</comment>

        <return pos:start="29:9" pos:end="29:55">return <expr pos:start="29:16" pos:end="29:54"><call pos:start="29:16" pos:end="29:54"><name pos:start="29:16" pos:end="29:31">gic_complete_irq</name><argument_list pos:start="29:32" pos:end="29:54">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">s</name></expr></argument>, <argument pos:start="29:36" pos:end="29:38"><expr pos:start="29:36" pos:end="29:38"><name pos:start="29:36" pos:end="29:38">cpu</name></expr></argument>, <argument pos:start="29:41" pos:end="29:53"><expr pos:start="29:41" pos:end="29:53"><name pos:start="29:41" pos:end="29:45">value</name> <operator pos:start="29:47" pos:end="29:47">&amp;</operator> <literal type="number" pos:start="29:49" pos:end="29:53">0x3ff</literal></expr></argument>)</argument_list></call></expr>;</return>

    <default pos:start="31:5" pos:end="31:12">default:</default>

        <expr_stmt pos:start="33:9" pos:end="33:64"><expr pos:start="33:9" pos:end="33:63"><call pos:start="33:9" pos:end="33:63"><name pos:start="33:9" pos:end="33:16">hw_error</name><argument_list pos:start="33:17" pos:end="33:63">(<argument pos:start="33:18" pos:end="33:49"><expr pos:start="33:18" pos:end="33:49"><literal type="string" pos:start="33:18" pos:end="33:49">"gic_cpu_write: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="33:52" pos:end="33:62"><expr pos:start="33:52" pos:end="33:62"><operator pos:start="33:52" pos:end="33:52">(</operator><name pos:start="33:53" pos:end="33:55">int</name><operator pos:start="33:56" pos:end="33:56">)</operator><name pos:start="33:57" pos:end="33:62">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><call pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:14">gic_update</name><argument_list pos:start="39:15" pos:end="39:17">(<argument pos:start="39:16" pos:end="39:16"><expr pos:start="39:16" pos:end="39:16"><name pos:start="39:16" pos:end="39:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
