<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14998.c" pos:tabs="8"><function pos:start="1:1" pos:end="96:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">blk_send_response_one</name><parameter_list pos:start="1:33" pos:end="1:53">(<parameter pos:start="1:34" pos:end="1:52"><decl pos:start="1:34" pos:end="1:52"><type pos:start="1:34" pos:end="1:52"><name pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:39">struct</name> <name pos:start="1:41" pos:end="1:45">ioreq</name></name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">ioreq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="96:1">{<block_content pos:start="5:5" pos:end="94:23">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:20">XenBlkDev</name></name>  <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:29">blkdev</name> <init pos:start="5:31" pos:end="5:45">= <expr pos:start="5:33" pos:end="5:45"><name pos:start="5:33" pos:end="5:45"><name pos:start="5:33" pos:end="5:37">ioreq</name><operator pos:start="5:38" pos:end="5:39">-&gt;</operator><name pos:start="5:40" pos:end="5:45">blkdev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type>               <name pos:start="7:23" pos:end="7:33">send_notify</name>   <init pos:start="7:37" pos:end="7:39">= <expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type>               <name pos:start="9:23" pos:end="9:35">have_requests</name> <init pos:start="9:37" pos:end="9:39">= <expr pos:start="9:39" pos:end="9:39"><literal type="number" pos:start="9:39" pos:end="9:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20">blkif_response_t</name></type>  <name pos:start="11:23" pos:end="11:26">resp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:8">void</name>              <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:26">dst</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:35"><expr pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:8">resp</name><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:11">id</name></name>        <operator pos:start="17:20" pos:end="17:20">=</operator> <name pos:start="17:22" pos:end="17:34"><name pos:start="17:22" pos:end="17:26">ioreq</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:31">req</name><operator pos:start="17:32" pos:end="17:32">.</operator><name pos:start="17:33" pos:end="17:34">id</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:8">resp</name><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:18">operation</name></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:41"><name pos:start="19:22" pos:end="19:26">ioreq</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:31">req</name><operator pos:start="19:32" pos:end="19:32">.</operator><name pos:start="19:33" pos:end="19:41">operation</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:8">resp</name><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:15">status</name></name>    <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:34"><name pos:start="21:22" pos:end="21:26">ioreq</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:34">status</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:61">/* Place on the response ring for the relevant domain. */</comment>

    <switch pos:start="27:5" pos:end="56:5">switch <condition pos:start="27:12" pos:end="27:29">(<expr pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:18">blkdev</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:28">protocol</name></name></expr>)</condition> <block pos:start="27:31" pos:end="56:5">{<block_content pos:start="29:5" pos:end="53:19">

    <case pos:start="29:5" pos:end="29:31">case <expr pos:start="29:10" pos:end="29:30"><name pos:start="29:10" pos:end="29:30">BLKIF_PROTOCOL_NATIVE</name></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:90"><expr pos:start="31:9" pos:end="31:89"><name pos:start="31:9" pos:end="31:11">dst</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:89"><name pos:start="31:15" pos:end="31:31">RING_GET_RESPONSE</name><argument_list pos:start="31:32" pos:end="31:89">(<argument pos:start="31:33" pos:end="31:53"><expr pos:start="31:33" pos:end="31:53"><operator pos:start="31:33" pos:end="31:33">&amp;</operator><name pos:start="31:34" pos:end="31:53"><name pos:start="31:34" pos:end="31:39">blkdev</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:46">rings</name><operator pos:start="31:47" pos:end="31:47">.</operator><name pos:start="31:48" pos:end="31:53">native</name></name></expr></argument>, <argument pos:start="31:56" pos:end="31:88"><expr pos:start="31:56" pos:end="31:88"><name pos:start="31:56" pos:end="31:88"><name pos:start="31:56" pos:end="31:61">blkdev</name><operator pos:start="31:62" pos:end="31:63">-&gt;</operator><name pos:start="31:64" pos:end="31:68">rings</name><operator pos:start="31:69" pos:end="31:69">.</operator><name pos:start="31:70" pos:end="31:75">native</name><operator pos:start="31:76" pos:end="31:76">.</operator><name pos:start="31:77" pos:end="31:88">rsp_prod_pvt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:31">case <expr pos:start="35:10" pos:end="35:30"><name pos:start="35:10" pos:end="35:30">BLKIF_PROTOCOL_X86_32</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="39:72"><expr pos:start="37:9" pos:end="39:71"><name pos:start="37:9" pos:end="37:11">dst</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="39:71"><name pos:start="37:15" pos:end="37:31">RING_GET_RESPONSE</name><argument_list pos:start="37:32" pos:end="39:71">(<argument pos:start="37:33" pos:end="37:58"><expr pos:start="37:33" pos:end="37:58"><operator pos:start="37:33" pos:end="37:33">&amp;</operator><name pos:start="37:34" pos:end="37:58"><name pos:start="37:34" pos:end="37:39">blkdev</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:46">rings</name><operator pos:start="37:47" pos:end="37:47">.</operator><name pos:start="37:48" pos:end="37:58">x86_32_part</name></name></expr></argument>,

                                <argument pos:start="39:33" pos:end="39:70"><expr pos:start="39:33" pos:end="39:70"><name pos:start="39:33" pos:end="39:70"><name pos:start="39:33" pos:end="39:38">blkdev</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:45">rings</name><operator pos:start="39:46" pos:end="39:46">.</operator><name pos:start="39:47" pos:end="39:57">x86_32_part</name><operator pos:start="39:58" pos:end="39:58">.</operator><name pos:start="39:59" pos:end="39:70">rsp_prod_pvt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:31">case <expr pos:start="43:10" pos:end="43:30"><name pos:start="43:10" pos:end="43:30">BLKIF_PROTOCOL_X86_64</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="47:72"><expr pos:start="45:9" pos:end="47:71"><name pos:start="45:9" pos:end="45:11">dst</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="47:71"><name pos:start="45:15" pos:end="45:31">RING_GET_RESPONSE</name><argument_list pos:start="45:32" pos:end="47:71">(<argument pos:start="45:33" pos:end="45:58"><expr pos:start="45:33" pos:end="45:58"><operator pos:start="45:33" pos:end="45:33">&amp;</operator><name pos:start="45:34" pos:end="45:58"><name pos:start="45:34" pos:end="45:39">blkdev</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:46">rings</name><operator pos:start="45:47" pos:end="45:47">.</operator><name pos:start="45:48" pos:end="45:58">x86_64_part</name></name></expr></argument>,

                                <argument pos:start="47:33" pos:end="47:70"><expr pos:start="47:33" pos:end="47:70"><name pos:start="47:33" pos:end="47:70"><name pos:start="47:33" pos:end="47:38">blkdev</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:45">rings</name><operator pos:start="47:46" pos:end="47:46">.</operator><name pos:start="47:47" pos:end="47:57">x86_64_part</name><operator pos:start="47:58" pos:end="47:58">.</operator><name pos:start="47:59" pos:end="47:70">rsp_prod_pvt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <default pos:start="51:5" pos:end="51:12">default:</default>

        <expr_stmt pos:start="53:9" pos:end="53:19"><expr pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:11">dst</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <name pos:start="53:15" pos:end="53:18">NULL</name></expr>;</expr_stmt>


    </block_content>}</block></switch>

    <expr_stmt pos:start="58:5" pos:end="58:37"><expr pos:start="58:5" pos:end="58:36"><call pos:start="58:5" pos:end="58:36"><name pos:start="58:5" pos:end="58:10">memcpy</name><argument_list pos:start="58:11" pos:end="58:36">(<argument pos:start="58:12" pos:end="58:14"><expr pos:start="58:12" pos:end="58:14"><name pos:start="58:12" pos:end="58:14">dst</name></expr></argument>, <argument pos:start="58:17" pos:end="58:21"><expr pos:start="58:17" pos:end="58:21"><operator pos:start="58:17" pos:end="58:17">&amp;</operator><name pos:start="58:18" pos:end="58:21">resp</name></expr></argument>, <argument pos:start="58:24" pos:end="58:35"><expr pos:start="58:24" pos:end="58:35"><sizeof pos:start="58:24" pos:end="58:35">sizeof<argument_list pos:start="58:30" pos:end="58:35">(<argument pos:start="58:31" pos:end="58:34"><expr pos:start="58:31" pos:end="58:34"><name pos:start="58:31" pos:end="58:34">resp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="60:5" pos:end="60:40"><expr pos:start="60:5" pos:end="60:39"><name pos:start="60:5" pos:end="60:37"><name pos:start="60:5" pos:end="60:10">blkdev</name><operator pos:start="60:11" pos:end="60:12">-&gt;</operator><name pos:start="60:13" pos:end="60:17">rings</name><operator pos:start="60:18" pos:end="60:18">.</operator><name pos:start="60:19" pos:end="60:24">common</name><operator pos:start="60:25" pos:end="60:25">.</operator><name pos:start="60:26" pos:end="60:37">rsp_prod_pvt</name></name><operator pos:start="60:38" pos:end="60:39">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="64:5" pos:end="64:77"><expr pos:start="64:5" pos:end="64:76"><call pos:start="64:5" pos:end="64:76"><name pos:start="64:5" pos:end="64:40">RING_PUSH_RESPONSES_AND_CHECK_NOTIFY</name><argument_list pos:start="64:41" pos:end="64:76">(<argument pos:start="64:42" pos:end="64:62"><expr pos:start="64:42" pos:end="64:62"><operator pos:start="64:42" pos:end="64:42">&amp;</operator><name pos:start="64:43" pos:end="64:62"><name pos:start="64:43" pos:end="64:48">blkdev</name><operator pos:start="64:49" pos:end="64:50">-&gt;</operator><name pos:start="64:51" pos:end="64:55">rings</name><operator pos:start="64:56" pos:end="64:56">.</operator><name pos:start="64:57" pos:end="64:62">common</name></name></expr></argument>, <argument pos:start="64:65" pos:end="64:75"><expr pos:start="64:65" pos:end="64:75"><name pos:start="64:65" pos:end="64:75">send_notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="66:5" pos:end="84:5"><if pos:start="66:5" pos:end="80:5">if <condition pos:start="66:8" pos:end="66:75">(<expr pos:start="66:9" pos:end="66:74"><name pos:start="66:9" pos:end="66:41"><name pos:start="66:9" pos:end="66:14">blkdev</name><operator pos:start="66:15" pos:end="66:16">-&gt;</operator><name pos:start="66:17" pos:end="66:21">rings</name><operator pos:start="66:22" pos:end="66:22">.</operator><name pos:start="66:23" pos:end="66:28">common</name><operator pos:start="66:29" pos:end="66:29">.</operator><name pos:start="66:30" pos:end="66:41">rsp_prod_pvt</name></name> <operator pos:start="66:43" pos:end="66:44">==</operator> <name pos:start="66:46" pos:end="66:74"><name pos:start="66:46" pos:end="66:51">blkdev</name><operator pos:start="66:52" pos:end="66:53">-&gt;</operator><name pos:start="66:54" pos:end="66:58">rings</name><operator pos:start="66:59" pos:end="66:59">.</operator><name pos:start="66:60" pos:end="66:65">common</name><operator pos:start="66:66" pos:end="66:66">.</operator><name pos:start="66:67" pos:end="66:74">req_cons</name></name></expr>)</condition> <block pos:start="66:77" pos:end="80:5">{<block_content pos:start="78:9" pos:end="78:76">

        <comment type="block" pos:start="68:9" pos:end="76:11">/*

         * Tail check for pending requests. Allows frontend to avoid

         * notifications if requests are already in flight (lower

         * overheads and promotes batching).

         */</comment>

        <expr_stmt pos:start="78:9" pos:end="78:76"><expr pos:start="78:9" pos:end="78:75"><call pos:start="78:9" pos:end="78:75"><name pos:start="78:9" pos:end="78:37">RING_FINAL_CHECK_FOR_REQUESTS</name><argument_list pos:start="78:38" pos:end="78:75">(<argument pos:start="78:39" pos:end="78:59"><expr pos:start="78:39" pos:end="78:59"><operator pos:start="78:39" pos:end="78:39">&amp;</operator><name pos:start="78:40" pos:end="78:59"><name pos:start="78:40" pos:end="78:45">blkdev</name><operator pos:start="78:46" pos:end="78:47">-&gt;</operator><name pos:start="78:48" pos:end="78:52">rings</name><operator pos:start="78:53" pos:end="78:53">.</operator><name pos:start="78:54" pos:end="78:59">common</name></name></expr></argument>, <argument pos:start="78:62" pos:end="78:74"><expr pos:start="78:62" pos:end="78:74"><name pos:start="78:62" pos:end="78:74">have_requests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="80:7" pos:end="84:5">else if <condition pos:start="80:15" pos:end="80:67">(<expr pos:start="80:16" pos:end="80:66"><call pos:start="80:16" pos:end="80:66"><name pos:start="80:16" pos:end="80:43">RING_HAS_UNCONSUMED_REQUESTS</name><argument_list pos:start="80:44" pos:end="80:66">(<argument pos:start="80:45" pos:end="80:65"><expr pos:start="80:45" pos:end="80:65"><operator pos:start="80:45" pos:end="80:45">&amp;</operator><name pos:start="80:46" pos:end="80:65"><name pos:start="80:46" pos:end="80:51">blkdev</name><operator pos:start="80:52" pos:end="80:53">-&gt;</operator><name pos:start="80:54" pos:end="80:58">rings</name><operator pos:start="80:59" pos:end="80:59">.</operator><name pos:start="80:60" pos:end="80:65">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="80:69" pos:end="84:5">{<block_content pos:start="82:9" pos:end="82:26">

        <expr_stmt pos:start="82:9" pos:end="82:26"><expr pos:start="82:9" pos:end="82:25"><name pos:start="82:9" pos:end="82:21">have_requests</name> <operator pos:start="82:23" pos:end="82:23">=</operator> <literal type="number" pos:start="82:25" pos:end="82:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="88:5" pos:end="92:5"><if pos:start="88:5" pos:end="92:5">if <condition pos:start="88:8" pos:end="88:22">(<expr pos:start="88:9" pos:end="88:21"><name pos:start="88:9" pos:end="88:21">have_requests</name></expr>)</condition> <block pos:start="88:24" pos:end="92:5">{<block_content pos:start="90:9" pos:end="90:28">

        <expr_stmt pos:start="90:9" pos:end="90:28"><expr pos:start="90:9" pos:end="90:27"><name pos:start="90:9" pos:end="90:25"><name pos:start="90:9" pos:end="90:14">blkdev</name><operator pos:start="90:15" pos:end="90:16">-&gt;</operator><name pos:start="90:17" pos:end="90:25">more_work</name></name><operator pos:start="90:26" pos:end="90:27">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="94:5" pos:end="94:23">return <expr pos:start="94:12" pos:end="94:22"><name pos:start="94:12" pos:end="94:22">send_notify</name></expr>;</return>

</block_content>}</block></function></unit>
