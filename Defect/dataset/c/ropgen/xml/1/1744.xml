<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1744.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:26">xscom_read</name><parameter_list pos:start="1:27" pos:end="1:69">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:47">hwaddr</name></type> <name pos:start="1:49" pos:end="1:52">addr</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:62">unsigned</name></type> <name pos:start="1:64" pos:end="1:68">width</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:15">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">PnvChip</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:17">chip</name> <init pos:start="5:19" pos:end="5:26">= <expr pos:start="5:21" pos:end="5:26"><name pos:start="5:21" pos:end="5:26">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">pcba</name> <init pos:start="7:19" pos:end="7:46">= <expr pos:start="7:21" pos:end="7:46"><call pos:start="7:21" pos:end="7:46"><name pos:start="7:21" pos:end="7:34">pnv_xscom_pcba</name><argument_list pos:start="7:35" pos:end="7:46">(<argument pos:start="7:36" pos:end="7:39"><expr pos:start="7:36" pos:end="7:39"><name pos:start="7:36" pos:end="7:39">chip</name></expr></argument>, <argument pos:start="7:42" pos:end="7:45"><expr pos:start="7:42" pos:end="7:45"><name pos:start="7:42" pos:end="7:45">addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15">MemTxResult</name></type> <name pos:start="11:17" pos:end="11:22">result</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:48">/* Handle some SCOMs here before dispatch */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:7">val</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:40"><name pos:start="17:11" pos:end="17:28">xscom_read_default</name><argument_list pos:start="17:29" pos:end="17:40">(<argument pos:start="17:30" pos:end="17:33"><expr pos:start="17:30" pos:end="17:33"><name pos:start="17:30" pos:end="17:33">chip</name></expr></argument>, <argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:39">pcba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:11">val</name> <operator pos:start="19:13" pos:end="19:14">!=</operator> <operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>)</condition> <block pos:start="19:20" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:22">

        <goto pos:start="21:9" pos:end="21:22">goto <name pos:start="21:14" pos:end="21:21">complete</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="29:37"><expr pos:start="27:5" pos:end="29:36"><name pos:start="27:5" pos:end="27:7">val</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="29:36"><name pos:start="27:11" pos:end="27:27">address_space_ldq</name><argument_list pos:start="27:28" pos:end="29:36">(<argument pos:start="27:29" pos:end="27:43"><expr pos:start="27:29" pos:end="27:43"><operator pos:start="27:29" pos:end="27:29">&amp;</operator><name pos:start="27:30" pos:end="27:43"><name pos:start="27:30" pos:end="27:33">chip</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:43">xscom_as</name></name></expr></argument>, <argument pos:start="27:46" pos:end="27:54"><expr pos:start="27:46" pos:end="27:54"><name pos:start="27:46" pos:end="27:49">pcba</name> <operator pos:start="27:51" pos:end="27:52">&lt;&lt;</operator> <literal type="number" pos:start="27:54" pos:end="27:54">3</literal></expr></argument>, <argument pos:start="27:57" pos:end="27:78"><expr pos:start="27:57" pos:end="27:78"><name pos:start="27:57" pos:end="27:78">MEMTXATTRS_UNSPECIFIED</name></expr></argument>,

                            <argument pos:start="29:29" pos:end="29:35"><expr pos:start="29:29" pos:end="29:35"><operator pos:start="29:29" pos:end="29:29">&amp;</operator><name pos:start="29:30" pos:end="29:35">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:27">(<expr pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:14">result</name> <operator pos:start="31:16" pos:end="31:17">!=</operator> <name pos:start="31:19" pos:end="31:26">MEMTX_OK</name></expr>)</condition> <block pos:start="31:29" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:17">

        <expr_stmt pos:start="33:9" pos:end="35:64"><expr pos:start="33:9" pos:end="35:63"><call pos:start="33:9" pos:end="35:63"><name pos:start="33:9" pos:end="33:21">qemu_log_mask</name><argument_list pos:start="33:22" pos:end="35:63">(<argument pos:start="33:23" pos:end="33:37"><expr pos:start="33:23" pos:end="33:37"><name pos:start="33:23" pos:end="33:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="33:40" pos:end="35:50"><expr pos:start="33:40" pos:end="35:50"><literal type="string" pos:start="33:40" pos:end="33:66">"XSCOM read failed at @0x%"</literal>

                      <name pos:start="35:23" pos:end="35:33">HWADDR_PRIx</name> <literal type="string" pos:start="35:35" pos:end="35:50">" pcba=0x%08x\n"</literal></expr></argument>, <argument pos:start="35:53" pos:end="35:56"><expr pos:start="35:53" pos:end="35:56"><name pos:start="35:53" pos:end="35:56">addr</name></expr></argument>, <argument pos:start="35:59" pos:end="35:62"><expr pos:start="35:59" pos:end="35:62"><name pos:start="35:59" pos:end="35:62">pcba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:71"><expr pos:start="37:9" pos:end="37:70"><call pos:start="37:9" pos:end="37:70"><name pos:start="37:9" pos:end="37:22">xscom_complete</name><argument_list pos:start="37:23" pos:end="37:70">(<argument pos:start="37:24" pos:end="37:34"><expr pos:start="37:24" pos:end="37:34"><name pos:start="37:24" pos:end="37:34">current_cpu</name></expr></argument>, <argument pos:start="37:37" pos:end="37:69"><expr pos:start="37:37" pos:end="37:69"><name pos:start="37:37" pos:end="37:51">HMER_XSCOM_FAIL</name> <operator pos:start="37:53" pos:end="37:53">|</operator> <name pos:start="37:55" pos:end="37:69">HMER_XSCOM_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<label pos:start="45:1" pos:end="45:9"><name pos:start="45:1" pos:end="45:8">complete</name>:</label>

    <expr_stmt pos:start="47:5" pos:end="47:49"><expr pos:start="47:5" pos:end="47:48"><call pos:start="47:5" pos:end="47:48"><name pos:start="47:5" pos:end="47:18">xscom_complete</name><argument_list pos:start="47:19" pos:end="47:48">(<argument pos:start="47:20" pos:end="47:30"><expr pos:start="47:20" pos:end="47:30"><name pos:start="47:20" pos:end="47:30">current_cpu</name></expr></argument>, <argument pos:start="47:33" pos:end="47:47"><expr pos:start="47:33" pos:end="47:47"><name pos:start="47:33" pos:end="47:47">HMER_XSCOM_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="49:5" pos:end="49:15">return <expr pos:start="49:12" pos:end="49:14"><name pos:start="49:12" pos:end="49:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
