<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6420.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:33"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">handle_sys</name><parameter_list pos:start="1:23" pos:end="3:75">(<parameter pos:start="1:24" pos:end="1:38"><decl pos:start="1:24" pos:end="1:38"><type pos:start="1:24" pos:end="1:38"><name pos:start="1:24" pos:end="1:35">DisasContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">uint32_t</name></type> <name pos:start="1:50" pos:end="1:53">insn</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:59">bool</name></type> <name pos:start="1:61" pos:end="1:66">isread</name></decl></parameter>,
                       <parameter pos:start="2:24" pos:end="2:39"><decl pos:start="2:24" pos:end="2:39"><type pos:start="2:24" pos:end="2:39"><name pos:start="2:24" pos:end="2:31">unsigned</name> <name pos:start="2:33" pos:end="2:35">int</name></type> <name pos:start="2:37" pos:end="2:39">op0</name></decl></parameter>, <parameter pos:start="2:42" pos:end="2:57"><decl pos:start="2:42" pos:end="2:57"><type pos:start="2:42" pos:end="2:57"><name pos:start="2:42" pos:end="2:49">unsigned</name> <name pos:start="2:51" pos:end="2:53">int</name></type> <name pos:start="2:55" pos:end="2:57">op1</name></decl></parameter>, <parameter pos:start="2:60" pos:end="2:75"><decl pos:start="2:60" pos:end="2:75"><type pos:start="2:60" pos:end="2:75"><name pos:start="2:60" pos:end="2:67">unsigned</name> <name pos:start="2:69" pos:end="2:71">int</name></type> <name pos:start="2:73" pos:end="2:75">op2</name></decl></parameter>,
                       <parameter pos:start="3:24" pos:end="3:39"><decl pos:start="3:24" pos:end="3:39"><type pos:start="3:24" pos:end="3:39"><name pos:start="3:24" pos:end="3:31">unsigned</name> <name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:39">crn</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:57"><decl pos:start="3:42" pos:end="3:57"><type pos:start="3:42" pos:end="3:57"><name pos:start="3:42" pos:end="3:49">unsigned</name> <name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:57">crm</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:74"><decl pos:start="3:60" pos:end="3:74"><type pos:start="3:60" pos:end="3:74"><name pos:start="3:60" pos:end="3:67">unsigned</name> <name pos:start="3:69" pos:end="3:71">int</name></type> <name pos:start="3:73" pos:end="3:74">rt</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="57:65">{<block_content pos:start="5:5" pos:end="57:65">
    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:24"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:22">ARMCPRegInfo</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:26">ri</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:20"><decl pos:start="6:5" pos:end="6:19"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">TCGv_i64</name></type> <name pos:start="6:14" pos:end="6:19">tcg_rt</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="9:73"><expr pos:start="7:5" pos:end="9:72"><name pos:start="7:5" pos:end="7:6">ri</name> <operator pos:start="7:8" pos:end="7:8">=</operator> <call pos:start="7:10" pos:end="9:72"><name pos:start="7:10" pos:end="7:27">get_arm_cp_reginfo</name><argument_list pos:start="7:28" pos:end="9:72">(<argument pos:start="7:29" pos:end="7:38"><expr pos:start="7:29" pos:end="7:38"><name pos:start="7:29" pos:end="7:38"><name pos:start="7:29" pos:end="7:29">s</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:38">cp_regs</name></name></expr></argument>,
                            <argument pos:start="8:29" pos:end="9:71"><expr pos:start="8:29" pos:end="9:71"><call pos:start="8:29" pos:end="9:71"><name pos:start="8:29" pos:end="8:46">ENCODE_AA64_CP_REG</name><argument_list pos:start="8:47" pos:end="9:71">(<argument pos:start="8:48" pos:end="8:69"><expr pos:start="8:48" pos:end="8:69"><name pos:start="8:48" pos:end="8:69">CP_REG_ARM64_SYSREG_CP</name></expr></argument>,
                                               <argument pos:start="9:48" pos:end="9:50"><expr pos:start="9:48" pos:end="9:50"><name pos:start="9:48" pos:end="9:50">crn</name></expr></argument>, <argument pos:start="9:53" pos:end="9:55"><expr pos:start="9:53" pos:end="9:55"><name pos:start="9:53" pos:end="9:55">crm</name></expr></argument>, <argument pos:start="9:58" pos:end="9:60"><expr pos:start="9:58" pos:end="9:60"><name pos:start="9:58" pos:end="9:60">op0</name></expr></argument>, <argument pos:start="9:63" pos:end="9:65"><expr pos:start="9:63" pos:end="9:65"><name pos:start="9:63" pos:end="9:65">op1</name></expr></argument>, <argument pos:start="9:68" pos:end="9:70"><expr pos:start="9:68" pos:end="9:70"><name pos:start="9:68" pos:end="9:70">op2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="10:5" pos:end="57:65"><if pos:start="10:5" pos:end="57:65">if <condition pos:start="10:8" pos:end="10:12">(<expr pos:start="10:9" pos:end="10:11"><operator pos:start="10:9" pos:end="10:9">!</operator><name pos:start="10:10" pos:end="10:11">ri</name></expr>)</condition> <block pos:start="10:14" pos:end="57:65">{<block_content pos:start="19:5" pos:end="57:65">
        <comment type="block" pos:start="11:9" pos:end="18:34">/* Unknown register; this might be a guest error or a QEMU
         * unimplemented feature.
        qemu_log_mask(LOG_UNIMP, "%s access to unsupported AArch64 "
                      "system register op0:%d op1:%d crn:%d crm:%d op2:%d\n",
                      isread ? "read" : "write", op0, op1, crn, crm, op2);
        unallocated_encoding(s);
        return;
    /* Check access permissions */</comment>
    <if_stmt pos:start="19:5" pos:end="57:65"><if pos:start="19:5" pos:end="57:65">if <condition pos:start="19:8" pos:end="19:49">(<expr pos:start="19:9" pos:end="19:48"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:48"><name pos:start="19:10" pos:end="19:21">cp_access_ok</name><argument_list pos:start="19:22" pos:end="19:48">(<argument pos:start="19:23" pos:end="19:35"><expr pos:start="19:23" pos:end="19:35"><name pos:start="19:23" pos:end="19:35"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:35">current_pl</name></name></expr></argument>, <argument pos:start="19:38" pos:end="19:39"><expr pos:start="19:38" pos:end="19:39"><name pos:start="19:38" pos:end="19:39">ri</name></expr></argument>, <argument pos:start="19:42" pos:end="19:47"><expr pos:start="19:42" pos:end="19:47"><name pos:start="19:42" pos:end="19:47">isread</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:51" pos:end="57:65">{<block_content pos:start="20:9" pos:end="57:65">
        <expr_stmt pos:start="20:9" pos:end="20:32"><expr pos:start="20:9" pos:end="20:31"><call pos:start="20:9" pos:end="20:31"><name pos:start="20:9" pos:end="20:28">unallocated_encoding</name><argument_list pos:start="20:29" pos:end="20:31">(<argument pos:start="20:30" pos:end="20:30"><expr pos:start="20:30" pos:end="20:30"><name pos:start="20:30" pos:end="20:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="21:9" pos:end="21:15">return;</return>
    <comment type="block" pos:start="22:5" pos:end="22:36">/* Handle special cases first */</comment>
    <switch pos:start="23:5" pos:end="57:65">switch <condition pos:start="23:12" pos:end="23:61">(<expr pos:start="23:13" pos:end="23:60"><name pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:14">ri</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:20">type</name></name> <operator pos:start="23:22" pos:end="23:22">&amp;</operator> <operator pos:start="23:24" pos:end="23:24">~</operator><operator pos:start="23:25" pos:end="23:25">(</operator><name pos:start="23:26" pos:end="23:41">ARM_CP_FLAG_MASK</name> <operator pos:start="23:43" pos:end="23:43">&amp;</operator> <operator pos:start="23:45" pos:end="23:45">~</operator><name pos:start="23:46" pos:end="23:59">ARM_CP_SPECIAL</name><operator pos:start="23:60" pos:end="23:60">)</operator></expr>)</condition> <block pos:start="23:63" pos:end="57:65">{<block_content pos:start="24:5" pos:end="57:65">
    <case pos:start="24:5" pos:end="24:20">case <expr pos:start="24:10" pos:end="24:19"><name pos:start="24:10" pos:end="24:19">ARM_CP_NOP</name></expr>:</case>
        <return pos:start="25:9" pos:end="25:15">return;</return>
    <case pos:start="26:5" pos:end="26:21">case <expr pos:start="26:10" pos:end="26:20"><name pos:start="26:10" pos:end="26:20">ARM_CP_NZCV</name></expr>:</case>
        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:14">tcg_rt</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="27:31"><name pos:start="27:18" pos:end="27:24">cpu_reg</name><argument_list pos:start="27:25" pos:end="27:31">(<argument pos:start="27:26" pos:end="27:26"><expr pos:start="27:26" pos:end="27:26"><name pos:start="27:26" pos:end="27:26">s</name></expr></argument>, <argument pos:start="27:29" pos:end="27:30"><expr pos:start="27:29" pos:end="27:30"><name pos:start="27:29" pos:end="27:30">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="28:9" pos:end="57:65"><if pos:start="28:9" pos:end="30:9">if <condition pos:start="28:12" pos:end="28:19">(<expr pos:start="28:13" pos:end="28:18"><name pos:start="28:13" pos:end="28:18">isread</name></expr>)</condition> <block pos:start="28:21" pos:end="30:9">{<block_content pos:start="29:13" pos:end="29:33">
            <expr_stmt pos:start="29:13" pos:end="29:33"><expr pos:start="29:13" pos:end="29:32"><call pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:24">gen_get_nzcv</name><argument_list pos:start="29:25" pos:end="29:32">(<argument pos:start="29:26" pos:end="29:31"><expr pos:start="29:26" pos:end="29:31"><name pos:start="29:26" pos:end="29:31">tcg_rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="30:11" pos:end="57:65">else <block pos:start="30:16" pos:end="57:65">{<block_content pos:start="31:13" pos:end="57:65">
            <expr_stmt pos:start="31:13" pos:end="31:33"><expr pos:start="31:13" pos:end="31:32"><call pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:24">gen_set_nzcv</name><argument_list pos:start="31:25" pos:end="31:32">(<argument pos:start="31:26" pos:end="31:31"><expr pos:start="31:26" pos:end="31:31"><name pos:start="31:26" pos:end="31:31">tcg_rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="32:9" pos:end="32:15">return;</return>
    <default pos:start="33:5" pos:end="33:12">default:</default>
        <break pos:start="34:9" pos:end="34:14">break;</break>
    <if_stmt pos:start="35:5" pos:end="57:65"><if pos:start="35:5" pos:end="57:65">if <condition pos:start="35:8" pos:end="35:45">(<expr pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:18">use_icount</name> <operator pos:start="35:20" pos:end="35:21">&amp;&amp;</operator> <operator pos:start="35:23" pos:end="35:23">(</operator><name pos:start="35:24" pos:end="35:31"><name pos:start="35:24" pos:end="35:25">ri</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:31">type</name></name> <operator pos:start="35:33" pos:end="35:33">&amp;</operator> <name pos:start="35:35" pos:end="35:43">ARM_CP_IO</name><operator pos:start="35:44" pos:end="35:44">)</operator></expr>)</condition> <block pos:start="35:47" pos:end="57:65">{<block_content pos:start="36:9" pos:end="57:65">
        <expr_stmt pos:start="36:9" pos:end="36:23"><expr pos:start="36:9" pos:end="36:22"><call pos:start="36:9" pos:end="36:22"><name pos:start="36:9" pos:end="36:20">gen_io_start</name><argument_list pos:start="36:21" pos:end="36:22">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:10">tcg_rt</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:27"><name pos:start="37:14" pos:end="37:20">cpu_reg</name><argument_list pos:start="37:21" pos:end="37:27">(<argument pos:start="37:22" pos:end="37:22"><expr pos:start="37:22" pos:end="37:22"><name pos:start="37:22" pos:end="37:22">s</name></expr></argument>, <argument pos:start="37:25" pos:end="37:26"><expr pos:start="37:25" pos:end="37:26"><name pos:start="37:25" pos:end="37:26">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="38:5" pos:end="57:65"><if pos:start="38:5" pos:end="57:65">if <condition pos:start="38:8" pos:end="38:15">(<expr pos:start="38:9" pos:end="38:14"><name pos:start="38:9" pos:end="38:14">isread</name></expr>)</condition> <block pos:start="38:17" pos:end="57:65">{<block_content pos:start="39:9" pos:end="57:65">
        <if_stmt pos:start="39:9" pos:end="45:5"><if pos:start="39:9" pos:end="41:9">if <condition pos:start="39:12" pos:end="39:36">(<expr pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:14">ri</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:20">type</name></name> <operator pos:start="39:22" pos:end="39:22">&amp;</operator> <name pos:start="39:24" pos:end="39:35">ARM_CP_CONST</name></expr>)</condition> <block pos:start="39:38" pos:end="41:9">{<block_content pos:start="40:13" pos:end="40:53">
            <expr_stmt pos:start="40:13" pos:end="40:53"><expr pos:start="40:13" pos:end="40:52"><call pos:start="40:13" pos:end="40:52"><name pos:start="40:13" pos:end="40:28">tcg_gen_movi_i64</name><argument_list pos:start="40:29" pos:end="40:52">(<argument pos:start="40:30" pos:end="40:35"><expr pos:start="40:30" pos:end="40:35"><name pos:start="40:30" pos:end="40:35">tcg_rt</name></expr></argument>, <argument pos:start="40:38" pos:end="40:51"><expr pos:start="40:38" pos:end="40:51"><name pos:start="40:38" pos:end="40:51"><name pos:start="40:38" pos:end="40:39">ri</name><operator pos:start="40:40" pos:end="40:41">-&gt;</operator><name pos:start="40:42" pos:end="40:51">resetvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="41:11" pos:end="43:9">else if <condition pos:start="41:19" pos:end="41:30">(<expr pos:start="41:20" pos:end="41:29"><name pos:start="41:20" pos:end="41:29"><name pos:start="41:20" pos:end="41:21">ri</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:29">readfn</name></name></expr>)</condition> <block pos:start="41:32" pos:end="43:9">{<block_content pos:start="42:13" pos:end="42:61">
            <expr_stmt pos:start="42:13" pos:end="42:61"><expr pos:start="42:13" pos:end="42:60"><call pos:start="42:13" pos:end="42:60"><name pos:start="42:13" pos:end="42:35">gen_helper_get_cp_reg64</name><argument_list pos:start="42:36" pos:end="42:60">(<argument pos:start="42:37" pos:end="42:42"><expr pos:start="42:37" pos:end="42:42"><name pos:start="42:37" pos:end="42:42">tcg_rt</name></expr></argument>, <argument pos:start="42:45" pos:end="42:51"><expr pos:start="42:45" pos:end="42:51"><name pos:start="42:45" pos:end="42:51">cpu_env</name></expr></argument>, <argument pos:start="42:54" pos:end="42:59"><expr pos:start="42:54" pos:end="42:59"><name pos:start="42:54" pos:end="42:59">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="43:11" pos:end="45:5">else <block pos:start="43:16" pos:end="45:5">{<block_content pos:start="44:13" pos:end="44:61">
            <expr_stmt pos:start="44:13" pos:end="44:61"><expr pos:start="44:13" pos:end="44:60"><call pos:start="44:13" pos:end="44:60"><name pos:start="44:13" pos:end="44:26">tcg_gen_ld_i64</name><argument_list pos:start="44:27" pos:end="44:60">(<argument pos:start="44:28" pos:end="44:33"><expr pos:start="44:28" pos:end="44:33"><name pos:start="44:28" pos:end="44:33">tcg_rt</name></expr></argument>, <argument pos:start="44:36" pos:end="44:42"><expr pos:start="44:36" pos:end="44:42"><name pos:start="44:36" pos:end="44:42">cpu_env</name></expr></argument>, <argument pos:start="44:45" pos:end="44:59"><expr pos:start="44:45" pos:end="44:59"><name pos:start="44:45" pos:end="44:59"><name pos:start="44:45" pos:end="44:46">ri</name><operator pos:start="44:47" pos:end="44:48">-&gt;</operator><name pos:start="44:49" pos:end="44:59">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt> <if_stmt pos:start="45:7" pos:end="57:65"><else pos:start="45:7" pos:end="57:65">else <block pos:start="45:12" pos:end="57:65">{<block_content pos:start="46:9" pos:end="57:65">
        <if_stmt pos:start="46:9" pos:end="57:65"><if pos:start="46:9" pos:end="49:9">if <condition pos:start="46:12" pos:end="46:36">(<expr pos:start="46:13" pos:end="46:35"><name pos:start="46:13" pos:end="46:20"><name pos:start="46:13" pos:end="46:14">ri</name><operator pos:start="46:15" pos:end="46:16">-&gt;</operator><name pos:start="46:17" pos:end="46:20">type</name></name> <operator pos:start="46:22" pos:end="46:22">&amp;</operator> <name pos:start="46:24" pos:end="46:35">ARM_CP_CONST</name></expr>)</condition> <block pos:start="46:38" pos:end="49:9">{<block_content pos:start="48:13" pos:end="48:19">
            <comment type="block" pos:start="47:13" pos:end="47:69">/* If not forbidden by access permissions, treat as WI */</comment>
            <return pos:start="48:13" pos:end="48:19">return;</return>
        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="51:9">else if <condition pos:start="49:19" pos:end="49:31">(<expr pos:start="49:20" pos:end="49:30"><name pos:start="49:20" pos:end="49:30"><name pos:start="49:20" pos:end="49:21">ri</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:30">writefn</name></name></expr>)</condition> <block pos:start="49:33" pos:end="51:9">{<block_content pos:start="50:13" pos:end="50:61">
            <expr_stmt pos:start="50:13" pos:end="50:61"><expr pos:start="50:13" pos:end="50:60"><call pos:start="50:13" pos:end="50:60"><name pos:start="50:13" pos:end="50:35">gen_helper_set_cp_reg64</name><argument_list pos:start="50:36" pos:end="50:60">(<argument pos:start="50:37" pos:end="50:43"><expr pos:start="50:37" pos:end="50:43"><name pos:start="50:37" pos:end="50:43">cpu_env</name></expr></argument>, <argument pos:start="50:46" pos:end="50:51"><expr pos:start="50:46" pos:end="50:51"><name pos:start="50:46" pos:end="50:51">tmpptr</name></expr></argument>, <argument pos:start="50:54" pos:end="50:59"><expr pos:start="50:54" pos:end="50:59"><name pos:start="50:54" pos:end="50:59">tcg_rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="51:11" pos:end="57:65">else <block pos:start="51:16" pos:end="57:65">{<block_content pos:start="52:13" pos:end="57:65">
            <expr_stmt pos:start="52:13" pos:end="52:61"><expr pos:start="52:13" pos:end="52:60"><call pos:start="52:13" pos:end="52:60"><name pos:start="52:13" pos:end="52:26">tcg_gen_st_i64</name><argument_list pos:start="52:27" pos:end="52:60">(<argument pos:start="52:28" pos:end="52:33"><expr pos:start="52:28" pos:end="52:33"><name pos:start="52:28" pos:end="52:33">tcg_rt</name></expr></argument>, <argument pos:start="52:36" pos:end="52:42"><expr pos:start="52:36" pos:end="52:42"><name pos:start="52:36" pos:end="52:42">cpu_env</name></expr></argument>, <argument pos:start="52:45" pos:end="52:59"><expr pos:start="52:45" pos:end="52:59"><name pos:start="52:45" pos:end="52:59"><name pos:start="52:45" pos:end="52:46">ri</name><operator pos:start="52:47" pos:end="52:48">-&gt;</operator><name pos:start="52:49" pos:end="52:59">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="53:5" pos:end="57:65"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:45">(<expr pos:start="53:9" pos:end="53:44"><name pos:start="53:9" pos:end="53:18">use_icount</name> <operator pos:start="53:20" pos:end="53:21">&amp;&amp;</operator> <operator pos:start="53:23" pos:end="53:23">(</operator><name pos:start="53:24" pos:end="53:31"><name pos:start="53:24" pos:end="53:25">ri</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:31">type</name></name> <operator pos:start="53:33" pos:end="53:33">&amp;</operator> <name pos:start="53:35" pos:end="53:43">ARM_CP_IO</name><operator pos:start="53:44" pos:end="53:44">)</operator></expr>)</condition> <block pos:start="53:47" pos:end="57:5">{<block_content pos:start="55:9" pos:end="56:33">
        <comment type="block" pos:start="54:9" pos:end="54:73">/* I/O operations must end the TB here (whether read or write) */</comment>
        <expr_stmt pos:start="55:9" pos:end="55:21"><expr pos:start="55:9" pos:end="55:20"><call pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:18">gen_io_end</name><argument_list pos:start="55:19" pos:end="55:20">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="56:9" pos:end="56:33"><expr pos:start="56:9" pos:end="56:32"><name pos:start="56:9" pos:end="56:17"><name pos:start="56:9" pos:end="56:9">s</name><operator pos:start="56:10" pos:end="56:11">-&gt;</operator><name pos:start="56:12" pos:end="56:17">is_jmp</name></name> <operator pos:start="56:19" pos:end="56:19">=</operator> <name pos:start="56:21" pos:end="56:32">DISAS_UPDATE</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="57:65">else if <condition pos:start="57:15" pos:end="57:63">(<expr pos:start="57:16" pos:end="57:62"><operator pos:start="57:16" pos:end="57:16">!</operator><name pos:start="57:17" pos:end="57:22">isread</name> <operator pos:start="57:24" pos:end="57:25">&amp;&amp;</operator> <operator pos:start="57:27" pos:end="57:27">!</operator><operator pos:start="57:28" pos:end="57:28">(</operator><name pos:start="57:29" pos:end="57:36"><name pos:start="57:29" pos:end="57:30">ri</name><operator pos:start="57:31" pos:end="57:32">-&gt;</operator><name pos:start="57:33" pos:end="57:36">type</name></name> <operator pos:start="57:38" pos:end="57:38">&amp;</operator> <name pos:start="57:40" pos:end="57:61">ARM_CP_SUPPRESS_TB_END</name><operator pos:start="57:62" pos:end="57:62">)</operator></expr>)</condition> <block pos:start="57:65" pos:end="57:65">{<block_content/></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
        <comment type="block">/* We default to ending the TB on a coprocessor register write,
         * but allow this to be suppressed by the register definition
         * (usually only necessary to work around guest bugs).
        s-&gt;is_jmp = DISAS_UPDATE;</comment></unit>
