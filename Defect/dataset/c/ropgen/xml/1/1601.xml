<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1601.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">huf_decode</name><parameter_list pos:start="1:22" pos:end="5:53">(<parameter pos:start="1:23" pos:end="1:43"><decl pos:start="1:23" pos:end="1:43"><type pos:start="1:23" pos:end="1:43"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:36">uint64_t</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:43">hcode</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:57">HufDec</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:65">hdecod</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:40"><decl pos:start="3:23" pos:end="3:40"><type pos:start="3:23" pos:end="3:40"><name pos:start="3:23" pos:end="3:36">GetByteContext</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:40">gb</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:51"><decl pos:start="3:43" pos:end="3:51"><type pos:start="3:43" pos:end="3:51"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:51">nbits</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:29"><decl pos:start="5:23" pos:end="5:29"><type pos:start="5:23" pos:end="5:29"><name pos:start="5:23" pos:end="5:25">int</name></type> <name pos:start="5:27" pos:end="5:29">rlc</name></decl></parameter>, <parameter pos:start="5:32" pos:end="5:37"><decl pos:start="5:32" pos:end="5:37"><type pos:start="5:32" pos:end="5:37"><name pos:start="5:32" pos:end="5:34">int</name></type> <name pos:start="5:36" pos:end="5:37">no</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:52"><decl pos:start="5:40" pos:end="5:52"><type pos:start="5:40" pos:end="5:52"><name pos:start="5:40" pos:end="5:47">uint16_t</name> <modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:52">out</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="133:1">{<block_content pos:start="9:5" pos:end="131:13">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:14">c</name>        <init pos:start="9:23" pos:end="9:25">= <expr pos:start="9:25" pos:end="9:25"><literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint16_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:18">outb</name>    <init pos:start="11:23" pos:end="11:27">= <expr pos:start="11:25" pos:end="11:27"><name pos:start="11:25" pos:end="11:27">out</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint16_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">oe</name>      <init pos:start="13:23" pos:end="13:32">= <expr pos:start="13:25" pos:end="13:32"><name pos:start="13:25" pos:end="13:27">out</name> <operator pos:start="13:29" pos:end="13:29">+</operator> <name pos:start="13:31" pos:end="13:32">no</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:53"><decl pos:start="15:5" pos:end="15:52"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">ie</name> <init pos:start="15:23" pos:end="15:52">= <expr pos:start="15:25" pos:end="15:52"><name pos:start="15:25" pos:end="15:34"><name pos:start="15:25" pos:end="15:26">gb</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:34">buffer</name></name> <operator pos:start="15:36" pos:end="15:36">+</operator> <operator pos:start="15:38" pos:end="15:38">(</operator><name pos:start="15:39" pos:end="15:43">nbits</name> <operator pos:start="15:45" pos:end="15:45">+</operator> <literal type="number" pos:start="15:47" pos:end="15:47">7</literal><operator pos:start="15:48" pos:end="15:48">)</operator> <operator pos:start="15:50" pos:end="15:50">/</operator> <literal type="number" pos:start="15:52" pos:end="15:52">8</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="15:55" pos:end="15:72">// input byte size</comment>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:14">cs</name></decl>, <decl pos:start="17:17" pos:end="17:17"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:17" pos:end="17:17">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:17"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:13">lc</name> <init pos:start="19:15" pos:end="19:17">= <expr pos:start="19:17" pos:end="19:17"><literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="23:5" pos:end="93:5">while <condition pos:start="23:11" pos:end="23:27">(<expr pos:start="23:12" pos:end="23:26"><name pos:start="23:12" pos:end="23:21"><name pos:start="23:12" pos:end="23:13">gb</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:21">buffer</name></name> <operator pos:start="23:23" pos:end="23:23">&lt;</operator> <name pos:start="23:25" pos:end="23:26">ie</name></expr>)</condition> <block pos:start="23:29" pos:end="93:5">{<block_content pos:start="25:9" pos:end="91:9">

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><call pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:16">get_char</name><argument_list pos:start="25:17" pos:end="25:27">(<argument pos:start="25:18" pos:end="25:18"><expr pos:start="25:18" pos:end="25:18"><name pos:start="25:18" pos:end="25:18">c</name></expr></argument>, <argument pos:start="25:21" pos:end="25:22"><expr pos:start="25:21" pos:end="25:22"><name pos:start="25:21" pos:end="25:22">lc</name></expr></argument>, <argument pos:start="25:25" pos:end="25:26"><expr pos:start="25:25" pos:end="25:26"><name pos:start="25:25" pos:end="25:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="29:9" pos:end="91:9">while <condition pos:start="29:15" pos:end="29:33">(<expr pos:start="29:16" pos:end="29:32"><name pos:start="29:16" pos:end="29:17">lc</name> <operator pos:start="29:19" pos:end="29:20">&gt;=</operator> <name pos:start="29:22" pos:end="29:32">HUF_DECBITS</name></expr>)</condition> <block pos:start="29:35" pos:end="91:9">{<block_content pos:start="31:13" pos:end="89:13">

            <decl_stmt pos:start="31:13" pos:end="31:78"><decl pos:start="31:13" pos:end="31:77"><type pos:start="31:13" pos:end="31:24"><specifier pos:start="31:13" pos:end="31:17">const</specifier> <name pos:start="31:19" pos:end="31:24">HufDec</name></type> <name pos:start="31:26" pos:end="31:27">pl</name> <init pos:start="31:29" pos:end="31:77">= <expr pos:start="31:31" pos:end="31:77"><name pos:start="31:31" pos:end="31:77"><name pos:start="31:31" pos:end="31:36">hdecod</name><index pos:start="31:37" pos:end="31:77">[<expr pos:start="31:38" pos:end="31:76"><operator pos:start="31:38" pos:end="31:38">(</operator><name pos:start="31:39" pos:end="31:39">c</name> <operator pos:start="31:41" pos:end="31:42">&gt;&gt;</operator> <operator pos:start="31:44" pos:end="31:44">(</operator><name pos:start="31:45" pos:end="31:46">lc</name> <operator pos:start="31:48" pos:end="31:48">-</operator> <name pos:start="31:50" pos:end="31:60">HUF_DECBITS</name><operator pos:start="31:61" pos:end="31:61">)</operator><operator pos:start="31:62" pos:end="31:62">)</operator> <operator pos:start="31:64" pos:end="31:64">&amp;</operator> <name pos:start="31:66" pos:end="31:76">HUF_DECMASK</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="35:13" pos:end="89:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:23">(<expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:18">pl</name><operator pos:start="35:19" pos:end="35:19">.</operator><name pos:start="35:20" pos:end="35:22">len</name></name></expr>)</condition> <block pos:start="35:25" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:58">

                <expr_stmt pos:start="37:17" pos:end="37:29"><expr pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:18">lc</name> <operator pos:start="37:20" pos:end="37:21">-=</operator> <name pos:start="37:23" pos:end="37:28"><name pos:start="37:23" pos:end="37:24">pl</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:28">len</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:58"><expr pos:start="39:17" pos:end="39:57"><call pos:start="39:17" pos:end="39:57"><name pos:start="39:17" pos:end="39:24">get_code</name><argument_list pos:start="39:25" pos:end="39:57">(<argument pos:start="39:26" pos:end="39:31"><expr pos:start="39:26" pos:end="39:31"><name pos:start="39:26" pos:end="39:31"><name pos:start="39:26" pos:end="39:27">pl</name><operator pos:start="39:28" pos:end="39:28">.</operator><name pos:start="39:29" pos:end="39:31">lit</name></name></expr></argument>, <argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">rlc</name></expr></argument>, <argument pos:start="39:39" pos:end="39:39"><expr pos:start="39:39" pos:end="39:39"><name pos:start="39:39" pos:end="39:39">c</name></expr></argument>, <argument pos:start="39:42" pos:end="39:43"><expr pos:start="39:42" pos:end="39:43"><name pos:start="39:42" pos:end="39:43">lc</name></expr></argument>, <argument pos:start="39:46" pos:end="39:47"><expr pos:start="39:46" pos:end="39:47"><name pos:start="39:46" pos:end="39:47">gb</name></expr></argument>, <argument pos:start="39:50" pos:end="39:52"><expr pos:start="39:50" pos:end="39:52"><name pos:start="39:50" pos:end="39:52">out</name></expr></argument>, <argument pos:start="39:55" pos:end="39:56"><expr pos:start="39:55" pos:end="39:56"><name pos:start="39:55" pos:end="39:56">oe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="41:15" pos:end="89:13">else <block pos:start="41:20" pos:end="89:13">{<block_content pos:start="43:17" pos:end="87:47">

                <decl_stmt pos:start="43:17" pos:end="43:22"><decl pos:start="43:17" pos:end="43:21"><type pos:start="43:17" pos:end="43:19"><name pos:start="43:17" pos:end="43:19">int</name></type> <name pos:start="43:21" pos:end="43:21">j</name></decl>;</decl_stmt>



                <if_stmt pos:start="47:17" pos:end="49:47"><if pos:start="47:17" pos:end="49:47">if <condition pos:start="47:20" pos:end="47:26">(<expr pos:start="47:21" pos:end="47:25"><operator pos:start="47:21" pos:end="47:21">!</operator><name pos:start="47:22" pos:end="47:25"><name pos:start="47:22" pos:end="47:23">pl</name><operator pos:start="47:24" pos:end="47:24">.</operator><name pos:start="47:25" pos:end="47:25">p</name></name></expr>)</condition><block type="pseudo" pos:start="49:21" pos:end="49:47"><block_content pos:start="49:21" pos:end="49:47">

                    <return pos:start="49:21" pos:end="49:47">return <expr pos:start="49:28" pos:end="49:46"><name pos:start="49:28" pos:end="49:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                <for pos:start="53:17" pos:end="81:17">for <control pos:start="53:21" pos:end="53:44">(<init pos:start="53:22" pos:end="53:27"><expr pos:start="53:22" pos:end="53:26"><name pos:start="53:22" pos:end="53:22">j</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <literal type="number" pos:start="53:26" pos:end="53:26">0</literal></expr>;</init> <condition pos:start="53:29" pos:end="53:39"><expr pos:start="53:29" pos:end="53:38"><name pos:start="53:29" pos:end="53:29">j</name> <operator pos:start="53:31" pos:end="53:31">&lt;</operator> <name pos:start="53:33" pos:end="53:38"><name pos:start="53:33" pos:end="53:34">pl</name><operator pos:start="53:35" pos:end="53:35">.</operator><name pos:start="53:36" pos:end="53:38">lit</name></name></expr>;</condition> <incr pos:start="53:41" pos:end="53:43"><expr pos:start="53:41" pos:end="53:43"><name pos:start="53:41" pos:end="53:41">j</name><operator pos:start="53:42" pos:end="53:43">++</operator></expr></incr>)</control> <block pos:start="53:46" pos:end="81:17">{<block_content pos:start="55:21" pos:end="79:21">

                    <decl_stmt pos:start="55:21" pos:end="55:48"><decl pos:start="55:21" pos:end="55:47"><type pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:23">int</name></type> <name pos:start="55:25" pos:end="55:25">l</name> <init pos:start="55:27" pos:end="55:47">= <expr pos:start="55:29" pos:end="55:47"><name pos:start="55:29" pos:end="55:42"><name pos:start="55:29" pos:end="55:33">hcode</name><index pos:start="55:34" pos:end="55:42">[<expr pos:start="55:35" pos:end="55:41"><name pos:start="55:35" pos:end="55:41"><name pos:start="55:35" pos:end="55:36">pl</name><operator pos:start="55:37" pos:end="55:37">.</operator><name pos:start="55:38" pos:end="55:38">p</name><index pos:start="55:39" pos:end="55:41">[<expr pos:start="55:40" pos:end="55:40"><name pos:start="55:40" pos:end="55:40">j</name></expr>]</index></name></expr>]</index></name> <operator pos:start="55:44" pos:end="55:44">&amp;</operator> <literal type="number" pos:start="55:46" pos:end="55:47">63</literal></expr></init></decl>;</decl_stmt>



                    <while pos:start="59:21" pos:end="61:44">while <condition pos:start="59:27" pos:end="59:72">(<expr pos:start="59:28" pos:end="59:71"><name pos:start="59:28" pos:end="59:69"><name pos:start="59:28" pos:end="59:29">lc</name> <argument_list type="generic" pos:start="59:31" pos:end="59:69">&lt; <argument pos:start="59:33" pos:end="59:67"><expr pos:start="59:33" pos:end="59:67"><name pos:start="59:33" pos:end="59:33">l</name> <operator pos:start="59:35" pos:end="59:36">&amp;&amp;</operator> <name pos:start="59:38" pos:end="59:63">bytestream2_get_bytes_left</name><operator pos:start="59:64" pos:end="59:64">(</operator><name pos:start="59:65" pos:end="59:66">gb</name><operator pos:start="59:67" pos:end="59:67">)</operator></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="59:71" pos:end="59:71">0</literal></expr>)</condition><block type="pseudo" pos:start="61:25" pos:end="61:44"><block_content pos:start="61:25" pos:end="61:44">

                        <expr_stmt pos:start="61:25" pos:end="61:44"><expr pos:start="61:25" pos:end="61:43"><call pos:start="61:25" pos:end="61:43"><name pos:start="61:25" pos:end="61:32">get_char</name><argument_list pos:start="61:33" pos:end="61:43">(<argument pos:start="61:34" pos:end="61:34"><expr pos:start="61:34" pos:end="61:34"><name pos:start="61:34" pos:end="61:34">c</name></expr></argument>, <argument pos:start="61:37" pos:end="61:38"><expr pos:start="61:37" pos:end="61:38"><name pos:start="61:37" pos:end="61:38">lc</name></expr></argument>, <argument pos:start="61:41" pos:end="61:42"><expr pos:start="61:41" pos:end="61:42"><name pos:start="61:41" pos:end="61:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



                    <if_stmt pos:start="65:21" pos:end="79:21"><if pos:start="65:21" pos:end="79:21">if <condition pos:start="65:24" pos:end="65:32">(<expr pos:start="65:25" pos:end="65:31"><name pos:start="65:25" pos:end="65:26">lc</name> <operator pos:start="65:28" pos:end="65:29">&gt;=</operator> <name pos:start="65:31" pos:end="65:31">l</name></expr>)</condition> <block pos:start="65:34" pos:end="79:21">{<block_content pos:start="67:25" pos:end="77:25">

                        <if_stmt pos:start="67:25" pos:end="77:25"><if pos:start="67:25" pos:end="77:25">if <condition pos:start="67:28" pos:end="69:65">(<expr pos:start="67:29" pos:end="69:64"><operator pos:start="67:29" pos:end="67:29">(</operator><name pos:start="67:30" pos:end="67:43"><name pos:start="67:30" pos:end="67:34">hcode</name><index pos:start="67:35" pos:end="67:43">[<expr pos:start="67:36" pos:end="67:42"><name pos:start="67:36" pos:end="67:42"><name pos:start="67:36" pos:end="67:37">pl</name><operator pos:start="67:38" pos:end="67:38">.</operator><name pos:start="67:39" pos:end="67:39">p</name><index pos:start="67:40" pos:end="67:42">[<expr pos:start="67:41" pos:end="67:41"><name pos:start="67:41" pos:end="67:41">j</name></expr>]</index></name></expr>]</index></name> <operator pos:start="67:45" pos:end="67:46">&gt;&gt;</operator> <literal type="number" pos:start="67:48" pos:end="67:48">6</literal><operator pos:start="67:49" pos:end="67:49">)</operator> <operator pos:start="67:51" pos:end="67:52">==</operator>

                            <operator pos:start="69:29" pos:end="69:29">(</operator><operator pos:start="69:30" pos:end="69:30">(</operator><name pos:start="69:31" pos:end="69:31">c</name> <operator pos:start="69:33" pos:end="69:34">&gt;&gt;</operator> <operator pos:start="69:36" pos:end="69:36">(</operator><name pos:start="69:37" pos:end="69:38">lc</name> <operator pos:start="69:40" pos:end="69:40">-</operator> <name pos:start="69:42" pos:end="69:42">l</name><operator pos:start="69:43" pos:end="69:43">)</operator><operator pos:start="69:44" pos:end="69:44">)</operator> <operator pos:start="69:46" pos:end="69:46">&amp;</operator> <operator pos:start="69:48" pos:end="69:48">(</operator><operator pos:start="69:49" pos:end="69:49">(</operator><literal type="number" pos:start="69:50" pos:end="69:52">1LL</literal> <operator pos:start="69:54" pos:end="69:55">&lt;&lt;</operator> <name pos:start="69:57" pos:end="69:57">l</name><operator pos:start="69:58" pos:end="69:58">)</operator> <operator pos:start="69:60" pos:end="69:60">-</operator> <literal type="number" pos:start="69:62" pos:end="69:62">1</literal><operator pos:start="69:63" pos:end="69:63">)</operator><operator pos:start="69:64" pos:end="69:64">)</operator></expr>)</condition> <block pos:start="69:67" pos:end="77:25">{<block_content pos:start="71:29" pos:end="75:34">

                            <expr_stmt pos:start="71:29" pos:end="71:36"><expr pos:start="71:29" pos:end="71:35"><name pos:start="71:29" pos:end="71:30">lc</name> <operator pos:start="71:32" pos:end="71:33">-=</operator> <name pos:start="71:35" pos:end="71:35">l</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="73:29" pos:end="73:71"><expr pos:start="73:29" pos:end="73:70"><call pos:start="73:29" pos:end="73:70"><name pos:start="73:29" pos:end="73:36">get_code</name><argument_list pos:start="73:37" pos:end="73:70">(<argument pos:start="73:38" pos:end="73:44"><expr pos:start="73:38" pos:end="73:44"><name pos:start="73:38" pos:end="73:44"><name pos:start="73:38" pos:end="73:39">pl</name><operator pos:start="73:40" pos:end="73:40">.</operator><name pos:start="73:41" pos:end="73:41">p</name><index pos:start="73:42" pos:end="73:44">[<expr pos:start="73:43" pos:end="73:43"><name pos:start="73:43" pos:end="73:43">j</name></expr>]</index></name></expr></argument>, <argument pos:start="73:47" pos:end="73:49"><expr pos:start="73:47" pos:end="73:49"><name pos:start="73:47" pos:end="73:49">rlc</name></expr></argument>, <argument pos:start="73:52" pos:end="73:52"><expr pos:start="73:52" pos:end="73:52"><name pos:start="73:52" pos:end="73:52">c</name></expr></argument>, <argument pos:start="73:55" pos:end="73:56"><expr pos:start="73:55" pos:end="73:56"><name pos:start="73:55" pos:end="73:56">lc</name></expr></argument>, <argument pos:start="73:59" pos:end="73:60"><expr pos:start="73:59" pos:end="73:60"><name pos:start="73:59" pos:end="73:60">gb</name></expr></argument>, <argument pos:start="73:63" pos:end="73:65"><expr pos:start="73:63" pos:end="73:65"><name pos:start="73:63" pos:end="73:65">out</name></expr></argument>, <argument pos:start="73:68" pos:end="73:69"><expr pos:start="73:68" pos:end="73:69"><name pos:start="73:68" pos:end="73:69">oe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="75:29" pos:end="75:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <if_stmt pos:start="85:17" pos:end="87:47"><if pos:start="85:17" pos:end="87:47">if <condition pos:start="85:20" pos:end="85:32">(<expr pos:start="85:21" pos:end="85:31"><name pos:start="85:21" pos:end="85:21">j</name> <operator pos:start="85:23" pos:end="85:24">==</operator> <name pos:start="85:26" pos:end="85:31"><name pos:start="85:26" pos:end="85:27">pl</name><operator pos:start="85:28" pos:end="85:28">.</operator><name pos:start="85:29" pos:end="85:31">lit</name></name></expr>)</condition><block type="pseudo" pos:start="87:21" pos:end="87:47"><block_content pos:start="87:21" pos:end="87:47">

                    <return pos:start="87:21" pos:end="87:47">return <expr pos:start="87:28" pos:end="87:46"><name pos:start="87:28" pos:end="87:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></while>



    <expr_stmt pos:start="97:5" pos:end="97:26"><expr pos:start="97:5" pos:end="97:25"><name pos:start="97:5" pos:end="97:5">i</name>   <operator pos:start="97:9" pos:end="97:9">=</operator> <operator pos:start="97:11" pos:end="97:11">(</operator><literal type="number" pos:start="97:12" pos:end="97:14">8</literal> <operator pos:start="97:14" pos:end="97:14">-</operator> <name pos:start="97:16" pos:end="97:20">nbits</name><operator pos:start="97:21" pos:end="97:21">)</operator> <operator pos:start="97:23" pos:end="97:23">&amp;</operator> <literal type="number" pos:start="97:25" pos:end="97:25">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:12"><expr pos:start="99:5" pos:end="99:11"><name pos:start="99:5" pos:end="99:5">c</name> <operator pos:start="99:7" pos:end="99:9">&gt;&gt;=</operator> <name pos:start="99:11" pos:end="99:11">i</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:12"><expr pos:start="101:5" pos:end="101:11"><name pos:start="101:5" pos:end="101:6">lc</name> <operator pos:start="101:8" pos:end="101:9">-=</operator> <name pos:start="101:11" pos:end="101:11">i</name></expr>;</expr_stmt>



    <while pos:start="105:5" pos:end="123:5">while <condition pos:start="105:11" pos:end="105:18">(<expr pos:start="105:12" pos:end="105:17"><name pos:start="105:12" pos:end="105:13">lc</name> <operator pos:start="105:15" pos:end="105:15">&gt;</operator> <literal type="number" pos:start="105:17" pos:end="105:17">0</literal></expr>)</condition> <block pos:start="105:20" pos:end="123:5">{<block_content pos:start="107:9" pos:end="121:9">

        <decl_stmt pos:start="107:9" pos:end="107:74"><decl pos:start="107:9" pos:end="107:73"><type pos:start="107:9" pos:end="107:20"><specifier pos:start="107:9" pos:end="107:13">const</specifier> <name pos:start="107:15" pos:end="107:20">HufDec</name></type> <name pos:start="107:22" pos:end="107:23">pl</name> <init pos:start="107:25" pos:end="107:73">= <expr pos:start="107:27" pos:end="107:73"><name pos:start="107:27" pos:end="107:73"><name pos:start="107:27" pos:end="107:32">hdecod</name><index pos:start="107:33" pos:end="107:73">[<expr pos:start="107:34" pos:end="107:72"><operator pos:start="107:34" pos:end="107:34">(</operator><name pos:start="107:35" pos:end="107:35">c</name> <operator pos:start="107:37" pos:end="107:38">&lt;&lt;</operator> <operator pos:start="107:40" pos:end="107:40">(</operator><name pos:start="107:41" pos:end="107:51">HUF_DECBITS</name> <operator pos:start="107:53" pos:end="107:53">-</operator> <name pos:start="107:55" pos:end="107:56">lc</name><operator pos:start="107:57" pos:end="107:57">)</operator><operator pos:start="107:58" pos:end="107:58">)</operator> <operator pos:start="107:60" pos:end="107:60">&amp;</operator> <name pos:start="107:62" pos:end="107:72">HUF_DECMASK</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="111:9" pos:end="121:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:19">(<expr pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:14">pl</name><operator pos:start="111:15" pos:end="111:15">.</operator><name pos:start="111:16" pos:end="111:18">len</name></name></expr>)</condition> <block pos:start="111:21" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:54">

            <expr_stmt pos:start="113:13" pos:end="113:25"><expr pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:14">lc</name> <operator pos:start="113:16" pos:end="113:17">-=</operator> <name pos:start="113:19" pos:end="113:24"><name pos:start="113:19" pos:end="113:20">pl</name><operator pos:start="113:21" pos:end="113:21">.</operator><name pos:start="113:22" pos:end="113:24">len</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:54"><expr pos:start="115:13" pos:end="115:53"><call pos:start="115:13" pos:end="115:53"><name pos:start="115:13" pos:end="115:20">get_code</name><argument_list pos:start="115:21" pos:end="115:53">(<argument pos:start="115:22" pos:end="115:27"><expr pos:start="115:22" pos:end="115:27"><name pos:start="115:22" pos:end="115:27"><name pos:start="115:22" pos:end="115:23">pl</name><operator pos:start="115:24" pos:end="115:24">.</operator><name pos:start="115:25" pos:end="115:27">lit</name></name></expr></argument>, <argument pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><name pos:start="115:30" pos:end="115:32">rlc</name></expr></argument>, <argument pos:start="115:35" pos:end="115:35"><expr pos:start="115:35" pos:end="115:35"><name pos:start="115:35" pos:end="115:35">c</name></expr></argument>, <argument pos:start="115:38" pos:end="115:39"><expr pos:start="115:38" pos:end="115:39"><name pos:start="115:38" pos:end="115:39">lc</name></expr></argument>, <argument pos:start="115:42" pos:end="115:43"><expr pos:start="115:42" pos:end="115:43"><name pos:start="115:42" pos:end="115:43">gb</name></expr></argument>, <argument pos:start="115:46" pos:end="115:48"><expr pos:start="115:46" pos:end="115:48"><name pos:start="115:46" pos:end="115:48">out</name></expr></argument>, <argument pos:start="115:51" pos:end="115:52"><expr pos:start="115:51" pos:end="115:52"><name pos:start="115:51" pos:end="115:52">oe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="117:11" pos:end="121:9">else <block pos:start="117:16" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:39">

            <return pos:start="119:13" pos:end="119:39">return <expr pos:start="119:20" pos:end="119:38"><name pos:start="119:20" pos:end="119:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="127:5" pos:end="129:35"><if pos:start="127:5" pos:end="129:35">if <condition pos:start="127:8" pos:end="127:25">(<expr pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:11">out</name> <operator pos:start="127:13" pos:end="127:13">-</operator> <name pos:start="127:15" pos:end="127:18">outb</name> <operator pos:start="127:20" pos:end="127:21">!=</operator> <name pos:start="127:23" pos:end="127:24">no</name></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:35"><block_content pos:start="129:9" pos:end="129:35">

        <return pos:start="129:9" pos:end="129:35">return <expr pos:start="129:16" pos:end="129:34"><name pos:start="129:16" pos:end="129:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="131:5" pos:end="131:13">return <expr pos:start="131:12" pos:end="131:12"><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
