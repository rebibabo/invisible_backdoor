<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12605.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">bios_supports_mode</name><parameter_list pos:start="1:31" pos:end="3:68">(<parameter pos:start="1:32" pos:end="1:54"><decl pos:start="1:32" pos:end="1:54"><type pos:start="1:32" pos:end="1:54"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:54">pmutils_bin</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:79"><decl pos:start="1:57" pos:end="1:79"><type pos:start="1:57" pos:end="1:79"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:66">char</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:79">pmutils_arg</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:54"><decl pos:start="3:32" pos:end="3:54"><type pos:start="3:32" pos:end="3:54"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:54">sysfile_str</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:67"><decl pos:start="3:57" pos:end="3:67"><type pos:start="3:57" pos:end="3:67"><name pos:start="3:57" pos:end="3:61">Error</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier><modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:67">err</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="195:1">{<block_content pos:start="7:5" pos:end="193:22">

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">pid_t</name></type> <name pos:start="7:11" pos:end="7:13">pid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:22">pmutils_path</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">status</name></decl>, <decl pos:start="13:17" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:26"><name pos:start="13:17" pos:end="13:23">pipefds</name><index pos:start="13:24" pos:end="13:26">[<expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">2</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:26">(<expr pos:start="17:9" pos:end="17:25"><call pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:12">pipe</name><argument_list pos:start="17:13" pos:end="17:21">(<argument pos:start="17:14" pos:end="17:20"><expr pos:start="17:14" pos:end="17:20"><name pos:start="17:14" pos:end="17:20">pipefds</name></expr></argument>)</argument_list></call> <operator pos:start="17:23" pos:end="17:23">&lt;</operator> <literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr>)</condition> <block pos:start="17:28" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><call pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:17">error_set</name><argument_list pos:start="19:18" pos:end="19:44">(<argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><name pos:start="19:19" pos:end="19:21">err</name></expr></argument>, <argument pos:start="19:24" pos:end="19:43"><expr pos:start="19:24" pos:end="19:43"><name pos:start="19:24" pos:end="19:43">QERR_UNDEFINED_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:55"><expr pos:start="27:5" pos:end="27:54"><name pos:start="27:5" pos:end="27:16">pmutils_path</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:54"><name pos:start="27:20" pos:end="27:41">g_find_program_in_path</name><argument_list pos:start="27:42" pos:end="27:54">(<argument pos:start="27:43" pos:end="27:53"><expr pos:start="27:43" pos:end="27:53"><name pos:start="27:43" pos:end="27:53">pmutils_bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:7">pid</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:16"><name pos:start="31:11" pos:end="31:14">fork</name><argument_list pos:start="31:15" pos:end="31:16">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="155:5"><if pos:start="33:5" pos:end="155:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">pid</name></expr>)</condition> <block pos:start="33:15" pos:end="155:5">{<block_content pos:start="35:9" pos:end="153:28">

        <decl_stmt pos:start="35:9" pos:end="35:29"><decl pos:start="35:9" pos:end="35:28"><type pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:14">struct</name> <name pos:start="35:16" pos:end="35:24">sigaction</name></name></type> <name pos:start="35:26" pos:end="35:28">act</name></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:37"><expr pos:start="39:9" pos:end="39:36"><call pos:start="39:9" pos:end="39:36"><name pos:start="39:9" pos:end="39:14">memset</name><argument_list pos:start="39:15" pos:end="39:36">(<argument pos:start="39:16" pos:end="39:19"><expr pos:start="39:16" pos:end="39:19"><operator pos:start="39:16" pos:end="39:16">&amp;</operator><name pos:start="39:17" pos:end="39:19">act</name></expr></argument>, <argument pos:start="39:22" pos:end="39:22"><expr pos:start="39:22" pos:end="39:22"><literal type="number" pos:start="39:22" pos:end="39:22">0</literal></expr></argument>, <argument pos:start="39:25" pos:end="39:35"><expr pos:start="39:25" pos:end="39:35"><sizeof pos:start="39:25" pos:end="39:35">sizeof<argument_list pos:start="39:31" pos:end="39:35">(<argument pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><name pos:start="39:32" pos:end="39:34">act</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:11">act</name><operator pos:start="41:12" pos:end="41:12">.</operator><name pos:start="41:13" pos:end="41:22">sa_handler</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:32">SIG_DFL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><call pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:17">sigaction</name><argument_list pos:start="43:18" pos:end="43:38">(<argument pos:start="43:19" pos:end="43:25"><expr pos:start="43:19" pos:end="43:25"><name pos:start="43:19" pos:end="43:25">SIGCHLD</name></expr></argument>, <argument pos:start="43:28" pos:end="43:31"><expr pos:start="43:28" pos:end="43:31"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:31">act</name></expr></argument>, <argument pos:start="43:34" pos:end="43:37"><expr pos:start="43:34" pos:end="43:37"><name pos:start="43:34" pos:end="43:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><call pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:14">setsid</name><argument_list pos:start="47:15" pos:end="47:16">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:26"><expr pos:start="49:9" pos:end="49:25"><call pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:13">close</name><argument_list pos:start="49:14" pos:end="49:25">(<argument pos:start="49:15" pos:end="49:24"><expr pos:start="49:15" pos:end="49:24"><name pos:start="49:15" pos:end="49:24"><name pos:start="49:15" pos:end="49:21">pipefds</name><index pos:start="49:22" pos:end="49:24">[<expr pos:start="49:23" pos:end="49:23"><literal type="number" pos:start="49:23" pos:end="49:23">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:29"><expr pos:start="51:9" pos:end="51:28"><call pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:25">reopen_fd_to_null</name><argument_list pos:start="51:26" pos:end="51:28">(<argument pos:start="51:27" pos:end="51:27"><expr pos:start="51:27" pos:end="51:27"><literal type="number" pos:start="51:27" pos:end="51:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><call pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:25">reopen_fd_to_null</name><argument_list pos:start="53:26" pos:end="53:28">(<argument pos:start="53:27" pos:end="53:27"><expr pos:start="53:27" pos:end="53:27"><literal type="number" pos:start="53:27" pos:end="53:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><call pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:25">reopen_fd_to_null</name><argument_list pos:start="55:26" pos:end="55:28">(<argument pos:start="55:27" pos:end="55:27"><expr pos:start="55:27" pos:end="55:27"><literal type="number" pos:start="55:27" pos:end="55:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:21"><expr pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:11">pid</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:20"><name pos:start="59:15" pos:end="59:18">fork</name><argument_list pos:start="59:19" pos:end="59:20">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="127:9"><if pos:start="61:9" pos:end="127:9">if <condition pos:start="61:12" pos:end="61:17">(<expr pos:start="61:13" pos:end="61:16"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:16">pid</name></expr>)</condition> <block pos:start="61:19" pos:end="127:9">{<block_content pos:start="63:13" pos:end="125:41">

            <decl_stmt pos:start="63:13" pos:end="63:19"><decl pos:start="63:13" pos:end="63:18"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:18">fd</name></decl>;</decl_stmt>

            <decl_stmt pos:start="65:13" pos:end="65:25"><decl pos:start="65:13" pos:end="65:24"><type pos:start="65:13" pos:end="65:16"><name pos:start="65:13" pos:end="65:16">char</name></type> <name pos:start="65:18" pos:end="65:24"><name pos:start="65:18" pos:end="65:20">buf</name><index pos:start="65:21" pos:end="65:24">[<expr pos:start="65:22" pos:end="65:23"><literal type="number" pos:start="65:22" pos:end="65:23">32</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="65:27" pos:end="65:52">/* hopefully big enough */</comment>



            <if_stmt pos:start="69:13" pos:end="73:13"><if pos:start="69:13" pos:end="73:13">if <condition pos:start="69:16" pos:end="69:29">(<expr pos:start="69:17" pos:end="69:28"><name pos:start="69:17" pos:end="69:28">pmutils_path</name></expr>)</condition> <block pos:start="69:31" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:78">

                <expr_stmt pos:start="71:17" pos:end="71:78"><expr pos:start="71:17" pos:end="71:77"><call pos:start="71:17" pos:end="71:77"><name pos:start="71:17" pos:end="71:22">execle</name><argument_list pos:start="71:23" pos:end="71:77">(<argument pos:start="71:24" pos:end="71:35"><expr pos:start="71:24" pos:end="71:35"><name pos:start="71:24" pos:end="71:35">pmutils_path</name></expr></argument>, <argument pos:start="71:38" pos:end="71:48"><expr pos:start="71:38" pos:end="71:48"><name pos:start="71:38" pos:end="71:48">pmutils_bin</name></expr></argument>, <argument pos:start="71:51" pos:end="71:61"><expr pos:start="71:51" pos:end="71:61"><name pos:start="71:51" pos:end="71:61">pmutils_arg</name></expr></argument>, <argument pos:start="71:64" pos:end="71:67"><expr pos:start="71:64" pos:end="71:67"><name pos:start="71:64" pos:end="71:67">NULL</name></expr></argument>, <argument pos:start="71:70" pos:end="71:76"><expr pos:start="71:70" pos:end="71:76"><name pos:start="71:70" pos:end="71:76">environ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="77:13" pos:end="83:15">/*

             * If we get here either pm-utils is not installed or execle() has

             * failed. Let's try the manual method if the caller wants it.

             */</comment>



            <if_stmt pos:start="87:13" pos:end="91:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:29">(<expr pos:start="87:17" pos:end="87:28"><operator pos:start="87:17" pos:end="87:17">!</operator><name pos:start="87:18" pos:end="87:28">sysfile_str</name></expr>)</condition> <block pos:start="87:31" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:45">

                <expr_stmt pos:start="89:17" pos:end="89:45"><expr pos:start="89:17" pos:end="89:44"><call pos:start="89:17" pos:end="89:44"><name pos:start="89:17" pos:end="89:21">_exit</name><argument_list pos:start="89:22" pos:end="89:44">(<argument pos:start="89:23" pos:end="89:43"><expr pos:start="89:23" pos:end="89:43"><name pos:start="89:23" pos:end="89:43">SUSPEND_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:54"><expr pos:start="95:13" pos:end="95:53"><name pos:start="95:13" pos:end="95:14">fd</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:53"><name pos:start="95:18" pos:end="95:21">open</name><argument_list pos:start="95:22" pos:end="95:53">(<argument pos:start="95:23" pos:end="95:42"><expr pos:start="95:23" pos:end="95:42"><name pos:start="95:23" pos:end="95:42">LINUX_SYS_STATE_FILE</name></expr></argument>, <argument pos:start="95:45" pos:end="95:52"><expr pos:start="95:45" pos:end="95:52"><name pos:start="95:45" pos:end="95:52">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="101:13"><if pos:start="97:13" pos:end="101:13">if <condition pos:start="97:16" pos:end="97:23">(<expr pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:18">fd</name> <operator pos:start="97:20" pos:end="97:20">&lt;</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal></expr>)</condition> <block pos:start="97:25" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:45">

                <expr_stmt pos:start="99:17" pos:end="99:45"><expr pos:start="99:17" pos:end="99:44"><call pos:start="99:17" pos:end="99:44"><name pos:start="99:17" pos:end="99:21">_exit</name><argument_list pos:start="99:22" pos:end="99:44">(<argument pos:start="99:23" pos:end="99:43"><expr pos:start="99:23" pos:end="99:43"><name pos:start="99:23" pos:end="99:43">SUSPEND_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="105:13" pos:end="105:47"><expr pos:start="105:13" pos:end="105:46"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <call pos:start="105:19" pos:end="105:46"><name pos:start="105:19" pos:end="105:22">read</name><argument_list pos:start="105:23" pos:end="105:46">(<argument pos:start="105:24" pos:end="105:25"><expr pos:start="105:24" pos:end="105:25"><name pos:start="105:24" pos:end="105:25">fd</name></expr></argument>, <argument pos:start="105:28" pos:end="105:30"><expr pos:start="105:28" pos:end="105:30"><name pos:start="105:28" pos:end="105:30">buf</name></expr></argument>, <argument pos:start="105:33" pos:end="105:45"><expr pos:start="105:33" pos:end="105:45"><sizeof pos:start="105:33" pos:end="105:43">sizeof<argument_list pos:start="105:39" pos:end="105:43">(<argument pos:start="105:40" pos:end="105:42"><expr pos:start="105:40" pos:end="105:42"><name pos:start="105:40" pos:end="105:42">buf</name></expr></argument>)</argument_list></sizeof><operator pos:start="105:44" pos:end="105:44">-</operator><literal type="number" pos:start="105:45" pos:end="105:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="111:13"><if pos:start="107:13" pos:end="111:13">if <condition pos:start="107:16" pos:end="107:25">(<expr pos:start="107:17" pos:end="107:24"><name pos:start="107:17" pos:end="107:19">ret</name> <operator pos:start="107:21" pos:end="107:22">&lt;=</operator> <literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>)</condition> <block pos:start="107:27" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:45">

                <expr_stmt pos:start="109:17" pos:end="109:45"><expr pos:start="109:17" pos:end="109:44"><call pos:start="109:17" pos:end="109:44"><name pos:start="109:17" pos:end="109:21">_exit</name><argument_list pos:start="109:22" pos:end="109:44">(<argument pos:start="109:23" pos:end="109:43"><expr pos:start="109:23" pos:end="109:43"><name pos:start="109:23" pos:end="109:43">SUSPEND_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:28"><expr pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:15">buf</name><index pos:start="113:16" pos:end="113:20">[<expr pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:19">ret</name></expr>]</index></name> <operator pos:start="113:22" pos:end="113:22">=</operator> <literal type="char" pos:start="113:24" pos:end="113:27">'\0'</literal></expr>;</expr_stmt>



            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:41">(<expr pos:start="117:17" pos:end="117:40"><call pos:start="117:17" pos:end="117:40"><name pos:start="117:17" pos:end="117:22">strstr</name><argument_list pos:start="117:23" pos:end="117:40">(<argument pos:start="117:24" pos:end="117:26"><expr pos:start="117:24" pos:end="117:26"><name pos:start="117:24" pos:end="117:26">buf</name></expr></argument>, <argument pos:start="117:29" pos:end="117:39"><expr pos:start="117:29" pos:end="117:39"><name pos:start="117:29" pos:end="117:39">sysfile_str</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:43" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:41">

                <expr_stmt pos:start="119:17" pos:end="119:41"><expr pos:start="119:17" pos:end="119:40"><call pos:start="119:17" pos:end="119:40"><name pos:start="119:17" pos:end="119:21">_exit</name><argument_list pos:start="119:22" pos:end="119:40">(<argument pos:start="119:23" pos:end="119:39"><expr pos:start="119:23" pos:end="119:39"><name pos:start="119:23" pos:end="119:39">SUSPEND_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="125:13" pos:end="125:41"><expr pos:start="125:13" pos:end="125:40"><call pos:start="125:13" pos:end="125:40"><name pos:start="125:13" pos:end="125:17">_exit</name><argument_list pos:start="125:18" pos:end="125:40">(<argument pos:start="125:19" pos:end="125:39"><expr pos:start="125:19" pos:end="125:39"><name pos:start="125:19" pos:end="125:39">SUSPEND_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:20">(<expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">pid</name> <operator pos:start="131:17" pos:end="131:17">&gt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition> <block pos:start="131:22" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:26">

            <expr_stmt pos:start="133:13" pos:end="133:26"><expr pos:start="133:13" pos:end="133:25"><call pos:start="133:13" pos:end="133:25"><name pos:start="133:13" pos:end="133:16">wait</name><argument_list pos:start="133:17" pos:end="133:25">(<argument pos:start="133:18" pos:end="133:24"><expr pos:start="133:18" pos:end="133:24"><operator pos:start="133:18" pos:end="133:18">&amp;</operator><name pos:start="133:19" pos:end="133:24">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="139:9">else <block pos:start="135:16" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:43">

            <expr_stmt pos:start="137:13" pos:end="137:43"><expr pos:start="137:13" pos:end="137:42"><name pos:start="137:13" pos:end="137:18">status</name> <operator pos:start="137:20" pos:end="137:20">=</operator> <name pos:start="137:22" pos:end="137:42">SUSPEND_NOT_SUPPORTED</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:57"><expr pos:start="143:9" pos:end="143:56"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <call pos:start="143:15" pos:end="143:56"><name pos:start="143:15" pos:end="143:19">write</name><argument_list pos:start="143:20" pos:end="143:56">(<argument pos:start="143:21" pos:end="143:30"><expr pos:start="143:21" pos:end="143:30"><name pos:start="143:21" pos:end="143:30"><name pos:start="143:21" pos:end="143:27">pipefds</name><index pos:start="143:28" pos:end="143:30">[<expr pos:start="143:29" pos:end="143:29"><literal type="number" pos:start="143:29" pos:end="143:29">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="143:33" pos:end="143:39"><expr pos:start="143:33" pos:end="143:39"><operator pos:start="143:33" pos:end="143:33">&amp;</operator><name pos:start="143:34" pos:end="143:39">status</name></expr></argument>, <argument pos:start="143:42" pos:end="143:55"><expr pos:start="143:42" pos:end="143:55"><sizeof pos:start="143:42" pos:end="143:55">sizeof<argument_list pos:start="143:48" pos:end="143:55">(<argument pos:start="143:49" pos:end="143:54"><expr pos:start="143:49" pos:end="143:54"><name pos:start="143:49" pos:end="143:54">status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:34">(<expr pos:start="145:13" pos:end="145:33"><name pos:start="145:13" pos:end="145:15">ret</name> <operator pos:start="145:17" pos:end="145:18">!=</operator> <sizeof pos:start="145:20" pos:end="145:33">sizeof<argument_list pos:start="145:26" pos:end="145:33">(<argument pos:start="145:27" pos:end="145:32"><expr pos:start="145:27" pos:end="145:32"><name pos:start="145:27" pos:end="145:32">status</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="145:36" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:32">

            <expr_stmt pos:start="147:13" pos:end="147:32"><expr pos:start="147:13" pos:end="147:31"><call pos:start="147:13" pos:end="147:31"><name pos:start="147:13" pos:end="147:17">_exit</name><argument_list pos:start="147:18" pos:end="147:31">(<argument pos:start="147:19" pos:end="147:30"><expr pos:start="147:19" pos:end="147:30"><name pos:start="147:19" pos:end="147:30">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:28"><expr pos:start="153:9" pos:end="153:27"><call pos:start="153:9" pos:end="153:27"><name pos:start="153:9" pos:end="153:13">_exit</name><argument_list pos:start="153:14" pos:end="153:27">(<argument pos:start="153:15" pos:end="153:26"><expr pos:start="153:15" pos:end="153:26"><name pos:start="153:15" pos:end="153:26">EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:22"><expr pos:start="159:5" pos:end="159:21"><call pos:start="159:5" pos:end="159:21"><name pos:start="159:5" pos:end="159:9">close</name><argument_list pos:start="159:10" pos:end="159:21">(<argument pos:start="159:11" pos:end="159:20"><expr pos:start="159:11" pos:end="159:20"><name pos:start="159:11" pos:end="159:20"><name pos:start="159:11" pos:end="159:17">pipefds</name><index pos:start="159:18" pos:end="159:20">[<expr pos:start="159:19" pos:end="159:19"><literal type="number" pos:start="159:19" pos:end="159:19">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:25"><expr pos:start="161:5" pos:end="161:24"><call pos:start="161:5" pos:end="161:24"><name pos:start="161:5" pos:end="161:10">g_free</name><argument_list pos:start="161:11" pos:end="161:24">(<argument pos:start="161:12" pos:end="161:23"><expr pos:start="161:12" pos:end="161:23"><name pos:start="161:12" pos:end="161:23">pmutils_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="165:5" pos:end="171:5"><if pos:start="165:5" pos:end="171:5">if <condition pos:start="165:8" pos:end="165:16">(<expr pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:11">pid</name> <operator pos:start="165:13" pos:end="165:13">&lt;</operator> <literal type="number" pos:start="165:15" pos:end="165:15">0</literal></expr>)</condition> <block pos:start="165:18" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:17">

        <expr_stmt pos:start="167:9" pos:end="167:45"><expr pos:start="167:9" pos:end="167:44"><call pos:start="167:9" pos:end="167:44"><name pos:start="167:9" pos:end="167:17">error_set</name><argument_list pos:start="167:18" pos:end="167:44">(<argument pos:start="167:19" pos:end="167:21"><expr pos:start="167:19" pos:end="167:21"><name pos:start="167:19" pos:end="167:21">err</name></expr></argument>, <argument pos:start="167:24" pos:end="167:43"><expr pos:start="167:24" pos:end="167:43"><name pos:start="167:24" pos:end="167:43">QERR_UNDEFINED_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="169:9" pos:end="169:17">goto <name pos:start="169:14" pos:end="169:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:52"><expr pos:start="175:5" pos:end="175:51"><name pos:start="175:5" pos:end="175:7">ret</name> <operator pos:start="175:9" pos:end="175:9">=</operator> <call pos:start="175:11" pos:end="175:51"><name pos:start="175:11" pos:end="175:14">read</name><argument_list pos:start="175:15" pos:end="175:51">(<argument pos:start="175:16" pos:end="175:25"><expr pos:start="175:16" pos:end="175:25"><name pos:start="175:16" pos:end="175:25"><name pos:start="175:16" pos:end="175:22">pipefds</name><index pos:start="175:23" pos:end="175:25">[<expr pos:start="175:24" pos:end="175:24"><literal type="number" pos:start="175:24" pos:end="175:24">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="175:28" pos:end="175:34"><expr pos:start="175:28" pos:end="175:34"><operator pos:start="175:28" pos:end="175:28">&amp;</operator><name pos:start="175:29" pos:end="175:34">status</name></expr></argument>, <argument pos:start="175:37" pos:end="175:50"><expr pos:start="175:37" pos:end="175:50"><sizeof pos:start="175:37" pos:end="175:50">sizeof<argument_list pos:start="175:43" pos:end="175:50">(<argument pos:start="175:44" pos:end="175:49"><expr pos:start="175:44" pos:end="175:49"><name pos:start="175:44" pos:end="175:49">status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="183:5"><if pos:start="177:5" pos:end="183:5">if <condition pos:start="177:8" pos:end="179:49">(<expr pos:start="177:9" pos:end="179:48"><name pos:start="177:9" pos:end="177:11">ret</name> <operator pos:start="177:13" pos:end="177:14">==</operator> <sizeof pos:start="177:16" pos:end="177:29">sizeof<argument_list pos:start="177:22" pos:end="177:29">(<argument pos:start="177:23" pos:end="177:28"><expr pos:start="177:23" pos:end="177:28"><name pos:start="177:23" pos:end="177:28">status</name></expr></argument>)</argument_list></sizeof> <operator pos:start="177:31" pos:end="177:32">&amp;&amp;</operator> <call pos:start="177:34" pos:end="177:50"><name pos:start="177:34" pos:end="177:42">WIFEXITED</name><argument_list pos:start="177:43" pos:end="177:50">(<argument pos:start="177:44" pos:end="177:49"><expr pos:start="177:44" pos:end="177:49"><name pos:start="177:44" pos:end="177:49">status</name></expr></argument>)</argument_list></call> <operator pos:start="177:52" pos:end="177:53">&amp;&amp;</operator>

        <call pos:start="179:9" pos:end="179:27"><name pos:start="179:9" pos:end="179:19">WEXITSTATUS</name><argument_list pos:start="179:20" pos:end="179:27">(<argument pos:start="179:21" pos:end="179:26"><expr pos:start="179:21" pos:end="179:26"><name pos:start="179:21" pos:end="179:26">status</name></expr></argument>)</argument_list></call> <operator pos:start="179:29" pos:end="179:30">==</operator> <name pos:start="179:32" pos:end="179:48">SUSPEND_SUPPORTED</name></expr>)</condition> <block pos:start="179:51" pos:end="183:5">{<block_content pos:start="181:13" pos:end="181:21">

            <goto pos:start="181:13" pos:end="181:21">goto <name pos:start="181:18" pos:end="181:20">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:37"><expr pos:start="187:5" pos:end="187:36"><call pos:start="187:5" pos:end="187:36"><name pos:start="187:5" pos:end="187:13">error_set</name><argument_list pos:start="187:14" pos:end="187:36">(<argument pos:start="187:15" pos:end="187:17"><expr pos:start="187:15" pos:end="187:17"><name pos:start="187:15" pos:end="187:17">err</name></expr></argument>, <argument pos:start="187:20" pos:end="187:35"><expr pos:start="187:20" pos:end="187:35"><name pos:start="187:20" pos:end="187:35">QERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="191:1" pos:end="191:4"><name pos:start="191:1" pos:end="191:3">out</name>:</label>

    <expr_stmt pos:start="193:5" pos:end="193:22"><expr pos:start="193:5" pos:end="193:21"><call pos:start="193:5" pos:end="193:21"><name pos:start="193:5" pos:end="193:9">close</name><argument_list pos:start="193:10" pos:end="193:21">(<argument pos:start="193:11" pos:end="193:20"><expr pos:start="193:11" pos:end="193:20"><name pos:start="193:11" pos:end="193:20"><name pos:start="193:11" pos:end="193:17">pipefds</name><index pos:start="193:18" pos:end="193:20">[<expr pos:start="193:19" pos:end="193:19"><literal type="number" pos:start="193:19" pos:end="193:19">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
