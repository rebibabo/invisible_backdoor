<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15570.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:49"><name pos:start="1:1" pos:end="1:35">qio_channel_websock_extract_headers</name><argument_list pos:start="1:36" pos:end="7:49">(<argument pos:start="1:37" pos:end="1:48">char *buffer</argument>,

                                    <argument pos:start="3:37" pos:end="3:69">QIOChannelWebsockHTTPHeader *hdrs</argument>,

                                    <argument pos:start="5:37" pos:end="5:53">size_t nhdrsalloc</argument>,

                                    <argument pos:start="7:37" pos:end="7:48">Error **errp</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="215:1">{<block_content pos:start="11:5" pos:end="213:17">

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:12">nl</name></decl>, <decl pos:start="11:15" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">sep</name></decl>, <decl pos:start="11:21" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:16">nhdrs</name> <init pos:start="13:18" pos:end="13:20">= <expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="33:7">/*

     * First parse the HTTP protocol greeting of format:

     *

     *   $METHOD $PATH $VERSION

     *

     * e.g.

     *

     *   GET / HTTP/1.1

     */</comment>



    <expr_stmt pos:start="37:5" pos:end="37:61"><expr pos:start="37:5" pos:end="37:60"><name pos:start="37:5" pos:end="37:6">nl</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:60"><name pos:start="37:10" pos:end="37:15">strstr</name><argument_list pos:start="37:16" pos:end="37:60">(<argument pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">buffer</name></expr></argument>, <argument pos:start="37:25" pos:end="37:59"><expr pos:start="37:25" pos:end="37:59"><name pos:start="37:25" pos:end="37:59">QIO_CHANNEL_WEBSOCK_HANDSHAKE_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:12">(<expr pos:start="39:9" pos:end="39:11"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:11">nl</name></expr>)</condition> <block pos:start="39:14" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:17">

        <expr_stmt pos:start="41:9" pos:end="41:58"><expr pos:start="41:9" pos:end="41:57"><call pos:start="41:9" pos:end="41:57"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="41:57">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="41:56"><expr pos:start="41:26" pos:end="41:56"><literal type="string" pos:start="41:26" pos:end="41:56">"Missing HTTP header delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:17">return <expr pos:start="43:16" pos:end="43:16"><literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:15"><expr pos:start="47:5" pos:end="47:14"><operator pos:start="47:5" pos:end="47:5">*</operator><name pos:start="47:6" pos:end="47:7">nl</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <literal type="char" pos:start="47:11" pos:end="47:14">'\0'</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:7">tmp</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:29"><name pos:start="51:11" pos:end="51:16">strchr</name><argument_list pos:start="51:17" pos:end="51:29">(<argument pos:start="51:18" pos:end="51:23"><expr pos:start="51:18" pos:end="51:23"><name pos:start="51:18" pos:end="51:23">buffer</name></expr></argument>, <argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><literal type="char" pos:start="51:26" pos:end="51:28">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:12">tmp</name></expr>)</condition> <block pos:start="53:15" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:17">

        <expr_stmt pos:start="55:9" pos:end="55:56"><expr pos:start="55:9" pos:end="55:55"><call pos:start="55:9" pos:end="55:55"><name pos:start="55:9" pos:end="55:18">error_setg</name><argument_list pos:start="55:19" pos:end="55:55">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">errp</name></expr></argument>, <argument pos:start="55:26" pos:end="55:54"><expr pos:start="55:26" pos:end="55:54"><literal type="string" pos:start="55:26" pos:end="55:54">"Missing HTTP path delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:17">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:16"><expr pos:start="61:5" pos:end="61:15"><operator pos:start="61:5" pos:end="61:5">*</operator><name pos:start="61:6" pos:end="61:8">tmp</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <literal type="char" pos:start="61:12" pos:end="61:15">'\0'</literal></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:62">(<expr pos:start="65:9" pos:end="65:61"><operator pos:start="65:9" pos:end="65:9">!</operator><call pos:start="65:10" pos:end="65:61"><name pos:start="65:10" pos:end="65:20">g_str_equal</name><argument_list pos:start="65:21" pos:end="65:61">(<argument pos:start="65:22" pos:end="65:27"><expr pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:27">buffer</name></expr></argument>, <argument pos:start="65:30" pos:end="65:60"><expr pos:start="65:30" pos:end="65:60"><name pos:start="65:30" pos:end="65:60">QIO_CHANNEL_WEBSOCK_HTTP_METHOD</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:64" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:17">

        <expr_stmt pos:start="67:9" pos:end="67:63"><expr pos:start="67:9" pos:end="67:62"><call pos:start="67:9" pos:end="67:62"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="67:62">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">errp</name></expr></argument>, <argument pos:start="67:26" pos:end="67:53"><expr pos:start="67:26" pos:end="67:53"><literal type="string" pos:start="67:26" pos:end="67:53">"Unsupported HTTP method %s"</literal></expr></argument>, <argument pos:start="67:56" pos:end="67:61"><expr pos:start="67:56" pos:end="67:61"><name pos:start="67:56" pos:end="67:61">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:21"><expr pos:start="75:5" pos:end="75:20"><name pos:start="75:5" pos:end="75:10">buffer</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:16">tmp</name> <operator pos:start="75:18" pos:end="75:18">+</operator> <literal type="number" pos:start="75:20" pos:end="75:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:30"><expr pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:7">tmp</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:29"><name pos:start="77:11" pos:end="77:16">strchr</name><argument_list pos:start="77:17" pos:end="77:29">(<argument pos:start="77:18" pos:end="77:23"><expr pos:start="77:18" pos:end="77:23"><name pos:start="77:18" pos:end="77:23">buffer</name></expr></argument>, <argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><literal type="char" pos:start="77:26" pos:end="77:28">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:13">(<expr pos:start="79:9" pos:end="79:12"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:12">tmp</name></expr>)</condition> <block pos:start="79:15" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:17">

        <expr_stmt pos:start="81:9" pos:end="81:59"><expr pos:start="81:9" pos:end="81:58"><call pos:start="81:9" pos:end="81:58"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="81:58">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="81:57"><expr pos:start="81:26" pos:end="81:57"><literal type="string" pos:start="81:26" pos:end="81:57">"Missing HTTP version delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:17">return <expr pos:start="83:16" pos:end="83:16"><literal type="number" pos:start="83:16" pos:end="83:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:16"><expr pos:start="87:5" pos:end="87:15"><operator pos:start="87:5" pos:end="87:5">*</operator><name pos:start="87:6" pos:end="87:8">tmp</name> <operator pos:start="87:10" pos:end="87:10">=</operator> <literal type="char" pos:start="87:12" pos:end="87:15">'\0'</literal></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:60">(<expr pos:start="91:9" pos:end="91:59"><operator pos:start="91:9" pos:end="91:9">!</operator><call pos:start="91:10" pos:end="91:59"><name pos:start="91:10" pos:end="91:20">g_str_equal</name><argument_list pos:start="91:21" pos:end="91:59">(<argument pos:start="91:22" pos:end="91:27"><expr pos:start="91:22" pos:end="91:27"><name pos:start="91:22" pos:end="91:27">buffer</name></expr></argument>, <argument pos:start="91:30" pos:end="91:58"><expr pos:start="91:30" pos:end="91:58"><name pos:start="91:30" pos:end="91:58">QIO_CHANNEL_WEBSOCK_HTTP_PATH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:62" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:17">

        <expr_stmt pos:start="93:9" pos:end="93:60"><expr pos:start="93:9" pos:end="93:59"><call pos:start="93:9" pos:end="93:59"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="93:59">(<argument pos:start="93:20" pos:end="93:23"><expr pos:start="93:20" pos:end="93:23"><name pos:start="93:20" pos:end="93:23">errp</name></expr></argument>, <argument pos:start="93:26" pos:end="93:50"><expr pos:start="93:26" pos:end="93:50"><literal type="string" pos:start="93:26" pos:end="93:50">"Unexpected HTTP path %s"</literal></expr></argument>, <argument pos:start="93:53" pos:end="93:58"><expr pos:start="93:53" pos:end="93:58"><name pos:start="93:53" pos:end="93:58">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:17">return <expr pos:start="95:16" pos:end="95:16"><literal type="number" pos:start="95:16" pos:end="95:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:21"><expr pos:start="101:5" pos:end="101:20"><name pos:start="101:5" pos:end="101:10">buffer</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <name pos:start="101:14" pos:end="101:16">tmp</name> <operator pos:start="101:18" pos:end="101:18">+</operator> <literal type="number" pos:start="101:20" pos:end="101:20">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:63">(<expr pos:start="105:9" pos:end="105:62"><operator pos:start="105:9" pos:end="105:9">!</operator><call pos:start="105:10" pos:end="105:62"><name pos:start="105:10" pos:end="105:20">g_str_equal</name><argument_list pos:start="105:21" pos:end="105:62">(<argument pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:27"><name pos:start="105:22" pos:end="105:27">buffer</name></expr></argument>, <argument pos:start="105:30" pos:end="105:61"><expr pos:start="105:30" pos:end="105:61"><name pos:start="105:30" pos:end="105:61">QIO_CHANNEL_WEBSOCK_HTTP_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:65" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:17">

        <expr_stmt pos:start="107:9" pos:end="107:64"><expr pos:start="107:9" pos:end="107:63"><call pos:start="107:9" pos:end="107:63"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="107:63">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>, <argument pos:start="107:26" pos:end="107:54"><expr pos:start="107:26" pos:end="107:54"><literal type="string" pos:start="107:26" pos:end="107:54">"Unsupported HTTP version %s"</literal></expr></argument>, <argument pos:start="107:57" pos:end="107:62"><expr pos:start="107:57" pos:end="107:62"><name pos:start="107:57" pos:end="107:62">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:17">return <expr pos:start="109:16" pos:end="109:16"><literal type="number" pos:start="109:16" pos:end="109:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:62"><expr pos:start="115:5" pos:end="115:61"><name pos:start="115:5" pos:end="115:10">buffer</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <name pos:start="115:14" pos:end="115:15">nl</name> <operator pos:start="115:17" pos:end="115:17">+</operator> <call pos:start="115:19" pos:end="115:61"><name pos:start="115:19" pos:end="115:24">strlen</name><argument_list pos:start="115:25" pos:end="115:61">(<argument pos:start="115:26" pos:end="115:60"><expr pos:start="115:26" pos:end="115:60"><name pos:start="115:26" pos:end="115:60">QIO_CHANNEL_WEBSOCK_HANDSHAKE_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="135:7">/*

     * Now parse all the header fields of format

     *

     *   $NAME: $VALUE

     *

     * e.g.

     *

     *   Cache-control: no-cache

     */</comment>

    <do pos:start="137:5" pos:end="209:25">do <block pos:start="137:8" pos:end="209:5">{<block_content pos:start="139:9" pos:end="207:9">

        <decl_stmt pos:start="139:9" pos:end="139:41"><decl pos:start="139:9" pos:end="139:40"><type pos:start="139:9" pos:end="139:37"><name pos:start="139:9" pos:end="139:35">QIOChannelWebsockHTTPHeader</name> <modifier pos:start="139:37" pos:end="139:37">*</modifier></type><name pos:start="139:38" pos:end="139:40">hdr</name></decl>;</decl_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:65"><expr pos:start="143:9" pos:end="143:64"><name pos:start="143:9" pos:end="143:10">nl</name> <operator pos:start="143:12" pos:end="143:12">=</operator> <call pos:start="143:14" pos:end="143:64"><name pos:start="143:14" pos:end="143:19">strstr</name><argument_list pos:start="143:20" pos:end="143:64">(<argument pos:start="143:21" pos:end="143:26"><expr pos:start="143:21" pos:end="143:26"><name pos:start="143:21" pos:end="143:26">buffer</name></expr></argument>, <argument pos:start="143:29" pos:end="143:63"><expr pos:start="143:29" pos:end="143:63"><name pos:start="143:29" pos:end="143:63">QIO_CHANNEL_WEBSOCK_HANDSHAKE_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:15">(<expr pos:start="145:13" pos:end="145:14"><name pos:start="145:13" pos:end="145:14">nl</name></expr>)</condition> <block pos:start="145:17" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:23">

            <expr_stmt pos:start="147:13" pos:end="147:23"><expr pos:start="147:13" pos:end="147:22"><operator pos:start="147:13" pos:end="147:13">*</operator><name pos:start="147:14" pos:end="147:15">nl</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <literal type="char" pos:start="147:19" pos:end="147:22">'\0'</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:34"><expr pos:start="153:9" pos:end="153:33"><name pos:start="153:9" pos:end="153:11">sep</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:33"><name pos:start="153:15" pos:end="153:20">strchr</name><argument_list pos:start="153:21" pos:end="153:33">(<argument pos:start="153:22" pos:end="153:27"><expr pos:start="153:22" pos:end="153:27"><name pos:start="153:22" pos:end="153:27">buffer</name></expr></argument>, <argument pos:start="153:30" pos:end="153:32"><expr pos:start="153:30" pos:end="153:32"><literal type="char" pos:start="153:30" pos:end="153:32">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:17">(<expr pos:start="155:13" pos:end="155:16"><operator pos:start="155:13" pos:end="155:13">!</operator><name pos:start="155:14" pos:end="155:16">sep</name></expr>)</condition> <block pos:start="155:19" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:21">

            <expr_stmt pos:start="157:13" pos:end="157:54"><expr pos:start="157:13" pos:end="157:53"><call pos:start="157:13" pos:end="157:53"><name pos:start="157:13" pos:end="157:22">error_setg</name><argument_list pos:start="157:23" pos:end="157:53">(<argument pos:start="157:24" pos:end="157:27"><expr pos:start="157:24" pos:end="157:27"><name pos:start="157:24" pos:end="157:27">errp</name></expr></argument>, <argument pos:start="157:30" pos:end="157:52"><expr pos:start="157:30" pos:end="157:52"><literal type="string" pos:start="157:30" pos:end="157:52">"Malformed HTTP header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:21">return <expr pos:start="159:20" pos:end="159:20"><literal type="number" pos:start="159:20" pos:end="159:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:20"><expr pos:start="163:9" pos:end="163:19"><operator pos:start="163:9" pos:end="163:9">*</operator><name pos:start="163:10" pos:end="163:12">sep</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <literal type="char" pos:start="163:16" pos:end="163:19">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:14"><expr pos:start="165:9" pos:end="165:13"><name pos:start="165:9" pos:end="165:11">sep</name><operator pos:start="165:12" pos:end="165:13">++</operator></expr>;</expr_stmt>

        <while pos:start="167:9" pos:end="171:9">while <condition pos:start="167:15" pos:end="167:27">(<expr pos:start="167:16" pos:end="167:26"><operator pos:start="167:16" pos:end="167:16">*</operator><name pos:start="167:17" pos:end="167:19">sep</name> <operator pos:start="167:21" pos:end="167:22">==</operator> <literal type="char" pos:start="167:24" pos:end="167:26">' '</literal></expr>)</condition> <block pos:start="167:29" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:18">

            <expr_stmt pos:start="169:13" pos:end="169:18"><expr pos:start="169:13" pos:end="169:17"><name pos:start="169:13" pos:end="169:15">sep</name><operator pos:start="169:16" pos:end="169:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="175:9" pos:end="181:9"><if pos:start="175:9" pos:end="181:9">if <condition pos:start="175:12" pos:end="175:32">(<expr pos:start="175:13" pos:end="175:31"><name pos:start="175:13" pos:end="175:17">nhdrs</name> <operator pos:start="175:19" pos:end="175:20">&gt;=</operator> <name pos:start="175:22" pos:end="175:31">nhdrsalloc</name></expr>)</condition> <block pos:start="175:34" pos:end="181:9">{<block_content pos:start="177:13" pos:end="179:21">

            <expr_stmt pos:start="177:13" pos:end="177:54"><expr pos:start="177:13" pos:end="177:53"><call pos:start="177:13" pos:end="177:53"><name pos:start="177:13" pos:end="177:22">error_setg</name><argument_list pos:start="177:23" pos:end="177:53">(<argument pos:start="177:24" pos:end="177:27"><expr pos:start="177:24" pos:end="177:27"><name pos:start="177:24" pos:end="177:27">errp</name></expr></argument>, <argument pos:start="177:30" pos:end="177:52"><expr pos:start="177:30" pos:end="177:52"><literal type="string" pos:start="177:30" pos:end="177:52">"Too many HTTP headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="179:13" pos:end="179:21">return <expr pos:start="179:20" pos:end="179:20"><literal type="number" pos:start="179:20" pos:end="179:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:29"><expr pos:start="185:9" pos:end="185:28"><name pos:start="185:9" pos:end="185:11">hdr</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <operator pos:start="185:15" pos:end="185:15">&amp;</operator><name pos:start="185:16" pos:end="185:28"><name pos:start="185:16" pos:end="185:19">hdrs</name><index pos:start="185:20" pos:end="185:28">[<expr pos:start="185:21" pos:end="185:27"><name pos:start="185:21" pos:end="185:25">nhdrs</name><operator pos:start="185:26" pos:end="185:27">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:27"><expr pos:start="187:9" pos:end="187:26"><name pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:11">hdr</name><operator pos:start="187:12" pos:end="187:13">-&gt;</operator><name pos:start="187:14" pos:end="187:17">name</name></name> <operator pos:start="187:19" pos:end="187:19">=</operator> <name pos:start="187:21" pos:end="187:26">buffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:25"><expr pos:start="189:9" pos:end="189:24"><name pos:start="189:9" pos:end="189:18"><name pos:start="189:9" pos:end="189:11">hdr</name><operator pos:start="189:12" pos:end="189:13">-&gt;</operator><name pos:start="189:14" pos:end="189:18">value</name></name> <operator pos:start="189:20" pos:end="189:20">=</operator> <name pos:start="189:22" pos:end="189:24">sep</name></expr>;</expr_stmt>



        <comment type="block" pos:start="193:9" pos:end="193:70">/* Canonicalize header name for easier identification later */</comment>

        <for pos:start="195:9" pos:end="199:9">for <control pos:start="195:13" pos:end="195:42">(<init pos:start="195:14" pos:end="195:29"><expr pos:start="195:14" pos:end="195:28"><name pos:start="195:14" pos:end="195:16">tmp</name> <operator pos:start="195:18" pos:end="195:18">=</operator> <name pos:start="195:20" pos:end="195:28"><name pos:start="195:20" pos:end="195:22">hdr</name><operator pos:start="195:23" pos:end="195:24">-&gt;</operator><name pos:start="195:25" pos:end="195:28">name</name></name></expr>;</init> <condition pos:start="195:31" pos:end="195:35"><expr pos:start="195:31" pos:end="195:34"><operator pos:start="195:31" pos:end="195:31">*</operator><name pos:start="195:32" pos:end="195:34">tmp</name></expr>;</condition> <incr pos:start="195:37" pos:end="195:41"><expr pos:start="195:37" pos:end="195:41"><name pos:start="195:37" pos:end="195:39">tmp</name><operator pos:start="195:40" pos:end="195:41">++</operator></expr></incr>)</control> <block pos:start="195:44" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:41">

            <expr_stmt pos:start="197:13" pos:end="197:41"><expr pos:start="197:13" pos:end="197:40"><operator pos:start="197:13" pos:end="197:13">*</operator><name pos:start="197:14" pos:end="197:16">tmp</name> <operator pos:start="197:18" pos:end="197:18">=</operator> <call pos:start="197:20" pos:end="197:40"><name pos:start="197:20" pos:end="197:34">g_ascii_tolower</name><argument_list pos:start="197:35" pos:end="197:40">(<argument pos:start="197:36" pos:end="197:39"><expr pos:start="197:36" pos:end="197:39"><operator pos:start="197:36" pos:end="197:36">*</operator><name pos:start="197:37" pos:end="197:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="203:9" pos:end="207:9"><if pos:start="203:9" pos:end="207:9">if <condition pos:start="203:12" pos:end="203:15">(<expr pos:start="203:13" pos:end="203:14"><name pos:start="203:13" pos:end="203:14">nl</name></expr>)</condition> <block pos:start="203:17" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:70">

            <expr_stmt pos:start="205:13" pos:end="205:70"><expr pos:start="205:13" pos:end="205:69"><name pos:start="205:13" pos:end="205:18">buffer</name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:23">nl</name> <operator pos:start="205:25" pos:end="205:25">+</operator> <call pos:start="205:27" pos:end="205:69"><name pos:start="205:27" pos:end="205:32">strlen</name><argument_list pos:start="205:33" pos:end="205:69">(<argument pos:start="205:34" pos:end="205:68"><expr pos:start="205:34" pos:end="205:68"><name pos:start="205:34" pos:end="205:68">QIO_CHANNEL_WEBSOCK_HANDSHAKE_DELIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="209:13" pos:end="209:24">(<expr pos:start="209:14" pos:end="209:23"><name pos:start="209:14" pos:end="209:15">nl</name> <operator pos:start="209:17" pos:end="209:18">!=</operator> <name pos:start="209:20" pos:end="209:23">NULL</name></expr>)</condition>;</do>



    <return pos:start="213:5" pos:end="213:17">return <expr pos:start="213:12" pos:end="213:16"><name pos:start="213:12" pos:end="213:16">nhdrs</name></expr>;</return>

</block_content>}</block>
</unit>
