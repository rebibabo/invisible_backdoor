<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25673.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">ff_init_vlc_sparse</name><parameter_list pos:start="1:23" pos:end="9:33">(<parameter pos:start="1:24" pos:end="1:31"><decl pos:start="1:24" pos:end="1:31"><type pos:start="1:24" pos:end="1:31"><name pos:start="1:24" pos:end="1:26">VLC</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">vlc</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:36">int</name></type> <name pos:start="1:38" pos:end="1:44">nb_bits</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:58">nb_codes</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:39"><decl pos:start="3:24" pos:end="3:39"><type pos:start="3:24" pos:end="3:39"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">bits</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:54">bits_wrap</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:69"><decl pos:start="3:57" pos:end="3:69"><type pos:start="3:57" pos:end="3:69"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:69">bits_size</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:40"><decl pos:start="5:24" pos:end="5:40"><type pos:start="5:24" pos:end="5:40"><specifier pos:start="5:24" pos:end="5:28">const</specifier> <name pos:start="5:30" pos:end="5:33">void</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:40">codes</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:56"><decl pos:start="5:43" pos:end="5:56"><type pos:start="5:43" pos:end="5:56"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:56">codes_wrap</name></decl></parameter>, <parameter pos:start="5:59" pos:end="5:72"><decl pos:start="5:59" pos:end="5:72"><type pos:start="5:59" pos:end="5:72"><name pos:start="5:59" pos:end="5:61">int</name></type> <name pos:start="5:63" pos:end="5:72">codes_size</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:42"><decl pos:start="7:24" pos:end="7:42"><type pos:start="7:24" pos:end="7:42"><specifier pos:start="7:24" pos:end="7:28">const</specifier> <name pos:start="7:30" pos:end="7:33">void</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:42">symbols</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:60"><decl pos:start="7:45" pos:end="7:60"><type pos:start="7:45" pos:end="7:60"><name pos:start="7:45" pos:end="7:47">int</name></type> <name pos:start="7:49" pos:end="7:60">symbols_wrap</name></decl></parameter>, <parameter pos:start="7:63" pos:end="7:78"><decl pos:start="7:63" pos:end="7:78"><type pos:start="7:63" pos:end="7:78"><name pos:start="7:63" pos:end="7:65">int</name></type> <name pos:start="7:67" pos:end="7:78">symbols_size</name></decl></parameter>,

                       <parameter pos:start="9:24" pos:end="9:32"><decl pos:start="9:24" pos:end="9:32"><type pos:start="9:24" pos:end="9:32"><name pos:start="9:24" pos:end="9:26">int</name></type> <name pos:start="9:28" pos:end="9:32">flags</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="165:1">{<block_content pos:start="13:5" pos:end="163:13">

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">VLCcode</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">j</name></decl>, <decl pos:start="15:15" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:17">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:7">vlc</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:13">bits</name></name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:23">nb_bits</name></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="67:5"><if pos:start="21:5" pos:end="59:5">if <condition pos:start="21:8" pos:end="21:40">(<expr pos:start="21:9" pos:end="21:39"><name pos:start="21:9" pos:end="21:13">flags</name> <operator pos:start="21:15" pos:end="21:15">&amp;</operator> <name pos:start="21:17" pos:end="21:39">INIT_VLC_USE_NEW_STATIC</name></expr>)</condition> <block pos:start="21:42" pos:end="59:5">{<block_content pos:start="23:9" pos:end="57:17">

        <decl_stmt pos:start="23:9" pos:end="23:27"><decl pos:start="23:9" pos:end="23:26"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">VLC</name></type> <name pos:start="23:13" pos:end="23:19">dyn_vlc</name> <init pos:start="23:21" pos:end="23:26">= <expr pos:start="23:23" pos:end="23:26"><operator pos:start="23:23" pos:end="23:23">*</operator><name pos:start="23:24" pos:end="23:26">vlc</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="27:9" pos:end="29:21"><if pos:start="27:9" pos:end="29:21">if <condition pos:start="27:12" pos:end="27:28">(<expr pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:15">vlc</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:27">table_size</name></name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:21"><block_content pos:start="29:13" pos:end="29:21">

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="33:9" pos:end="41:67"><expr pos:start="33:9" pos:end="41:66"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="41:66"><name pos:start="33:15" pos:end="33:32">ff_init_vlc_sparse</name><argument_list pos:start="33:33" pos:end="41:66">(<argument pos:start="33:34" pos:end="33:41"><expr pos:start="33:34" pos:end="33:41"><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:41">dyn_vlc</name></expr></argument>, <argument pos:start="33:44" pos:end="33:50"><expr pos:start="33:44" pos:end="33:50"><name pos:start="33:44" pos:end="33:50">nb_bits</name></expr></argument>, <argument pos:start="33:53" pos:end="33:60"><expr pos:start="33:53" pos:end="33:60"><name pos:start="33:53" pos:end="33:60">nb_codes</name></expr></argument>,

                                 <argument pos:start="35:34" pos:end="35:37"><expr pos:start="35:34" pos:end="35:37"><name pos:start="35:34" pos:end="35:37">bits</name></expr></argument>, <argument pos:start="35:40" pos:end="35:48"><expr pos:start="35:40" pos:end="35:48"><name pos:start="35:40" pos:end="35:48">bits_wrap</name></expr></argument>, <argument pos:start="35:51" pos:end="35:59"><expr pos:start="35:51" pos:end="35:59"><name pos:start="35:51" pos:end="35:59">bits_size</name></expr></argument>,

                                 <argument pos:start="37:34" pos:end="37:38"><expr pos:start="37:34" pos:end="37:38"><name pos:start="37:34" pos:end="37:38">codes</name></expr></argument>, <argument pos:start="37:41" pos:end="37:50"><expr pos:start="37:41" pos:end="37:50"><name pos:start="37:41" pos:end="37:50">codes_wrap</name></expr></argument>, <argument pos:start="37:53" pos:end="37:62"><expr pos:start="37:53" pos:end="37:62"><name pos:start="37:53" pos:end="37:62">codes_size</name></expr></argument>,

                                 <argument pos:start="39:34" pos:end="39:40"><expr pos:start="39:34" pos:end="39:40"><name pos:start="39:34" pos:end="39:40">symbols</name></expr></argument>, <argument pos:start="39:43" pos:end="39:54"><expr pos:start="39:43" pos:end="39:54"><name pos:start="39:43" pos:end="39:54">symbols_wrap</name></expr></argument>, <argument pos:start="39:57" pos:end="39:68"><expr pos:start="39:57" pos:end="39:68"><name pos:start="39:57" pos:end="39:68">symbols_size</name></expr></argument>,

                                 <argument pos:start="41:34" pos:end="41:65"><expr pos:start="41:34" pos:end="41:65"><name pos:start="41:34" pos:end="41:38">flags</name> <operator pos:start="41:40" pos:end="41:40">&amp;</operator> <operator pos:start="41:42" pos:end="41:42">~</operator><name pos:start="41:43" pos:end="41:65">INIT_VLC_USE_NEW_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:29"><expr pos:start="43:9" pos:end="43:28"><call pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:18">av_assert0</name><argument_list pos:start="43:19" pos:end="43:28">(<argument pos:start="43:20" pos:end="43:27"><expr pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:22">ret</name> <operator pos:start="43:24" pos:end="43:25">&gt;=</operator> <literal type="number" pos:start="43:27" pos:end="43:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:63"><expr pos:start="45:9" pos:end="45:62"><call pos:start="45:9" pos:end="45:62"><name pos:start="45:9" pos:end="45:18">av_assert0</name><argument_list pos:start="45:19" pos:end="45:62">(<argument pos:start="45:20" pos:end="45:61"><expr pos:start="45:20" pos:end="45:61"><name pos:start="45:20" pos:end="45:37"><name pos:start="45:20" pos:end="45:26">dyn_vlc</name><operator pos:start="45:27" pos:end="45:27">.</operator><name pos:start="45:28" pos:end="45:37">table_size</name></name> <operator pos:start="45:39" pos:end="45:40">&lt;=</operator> <name pos:start="45:42" pos:end="45:61"><name pos:start="45:42" pos:end="45:44">vlc</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:61">table_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="49:103"><if pos:start="47:9" pos:end="49:103">if <condition pos:start="47:12" pos:end="47:54">(<expr pos:start="47:13" pos:end="47:53"><name pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:19">dyn_vlc</name><operator pos:start="47:20" pos:end="47:20">.</operator><name pos:start="47:21" pos:end="47:30">table_size</name></name> <operator pos:start="47:32" pos:end="47:32">&lt;</operator> <name pos:start="47:34" pos:end="47:53"><name pos:start="47:34" pos:end="47:36">vlc</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:53">table_allocated</name></name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:103"><block_content pos:start="49:13" pos:end="49:103">

            <expr_stmt pos:start="49:13" pos:end="49:103"><expr pos:start="49:13" pos:end="49:102"><call pos:start="49:13" pos:end="49:102"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="49:102">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">NULL</name></expr></argument>, <argument pos:start="49:26" pos:end="49:37"><expr pos:start="49:26" pos:end="49:37"><name pos:start="49:26" pos:end="49:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:40" pos:end="49:59"><expr pos:start="49:40" pos:end="49:59"><literal type="string" pos:start="49:40" pos:end="49:59">"needed %d had %d\n"</literal></expr></argument>, <argument pos:start="49:62" pos:end="49:79"><expr pos:start="49:62" pos:end="49:79"><name pos:start="49:62" pos:end="49:79"><name pos:start="49:62" pos:end="49:68">dyn_vlc</name><operator pos:start="49:69" pos:end="49:69">.</operator><name pos:start="49:70" pos:end="49:79">table_size</name></name></expr></argument>, <argument pos:start="49:82" pos:end="49:101"><expr pos:start="49:82" pos:end="49:101"><name pos:start="49:82" pos:end="49:101"><name pos:start="49:82" pos:end="49:84">vlc</name><operator pos:start="49:85" pos:end="49:86">-&gt;</operator><name pos:start="49:87" pos:end="49:101">table_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:84"><expr pos:start="51:9" pos:end="51:83"><call pos:start="51:9" pos:end="51:83"><name pos:start="51:9" pos:end="51:14">memcpy</name><argument_list pos:start="51:15" pos:end="51:83">(<argument pos:start="51:16" pos:end="51:25"><expr pos:start="51:16" pos:end="51:25"><name pos:start="51:16" pos:end="51:25"><name pos:start="51:16" pos:end="51:18">vlc</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:25">table</name></name></expr></argument>, <argument pos:start="51:28" pos:end="51:40"><expr pos:start="51:28" pos:end="51:40"><name pos:start="51:28" pos:end="51:40"><name pos:start="51:28" pos:end="51:34">dyn_vlc</name><operator pos:start="51:35" pos:end="51:35">.</operator><name pos:start="51:36" pos:end="51:40">table</name></name></expr></argument>, <argument pos:start="51:43" pos:end="51:82"><expr pos:start="51:43" pos:end="51:82"><name pos:start="51:43" pos:end="51:60"><name pos:start="51:43" pos:end="51:49">dyn_vlc</name><operator pos:start="51:50" pos:end="51:50">.</operator><name pos:start="51:51" pos:end="51:60">table_size</name></name> <operator pos:start="51:62" pos:end="51:62">*</operator> <sizeof pos:start="51:64" pos:end="51:82">sizeof<argument_list pos:start="51:70" pos:end="51:82">(<argument pos:start="51:71" pos:end="51:81"><expr pos:start="51:71" pos:end="51:81"><operator pos:start="51:71" pos:end="51:71">*</operator><name pos:start="51:72" pos:end="51:81"><name pos:start="51:72" pos:end="51:74">vlc</name><operator pos:start="51:75" pos:end="51:76">-&gt;</operator><name pos:start="51:77" pos:end="51:81">table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:45"><expr pos:start="53:9" pos:end="53:44"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:11">vlc</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:23">table_size</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:44"><name pos:start="53:27" pos:end="53:33">dyn_vlc</name><operator pos:start="53:34" pos:end="53:34">.</operator><name pos:start="53:35" pos:end="53:44">table_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><call pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:19">ff_free_vlc</name><argument_list pos:start="55:20" pos:end="55:29">(<argument pos:start="55:21" pos:end="55:28"><expr pos:start="55:21" pos:end="55:28"><operator pos:start="55:21" pos:end="55:21">&amp;</operator><name pos:start="55:22" pos:end="55:28">dyn_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:17">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="67:5">else <block pos:start="59:12" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:33">

        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:11">vlc</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:18">table</name></name>           <operator pos:start="61:30" pos:end="61:30">=</operator> <name pos:start="61:32" pos:end="61:35">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:33"><expr pos:start="63:9" pos:end="63:32"><name pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:11">vlc</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:28">table_allocated</name></name> <operator pos:start="63:30" pos:end="63:30">=</operator> <literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:11">vlc</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:23">table_size</name></name>      <operator pos:start="65:30" pos:end="65:30">=</operator> <literal type="number" pos:start="65:32" pos:end="65:32">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:57"><expr pos:start="71:5" pos:end="71:56"><call pos:start="71:5" pos:end="71:56"><name pos:start="71:5" pos:end="71:11">av_dlog</name><argument_list pos:start="71:12" pos:end="71:56">(<argument pos:start="71:13" pos:end="71:16"><expr pos:start="71:13" pos:end="71:16"><name pos:start="71:13" pos:end="71:16">NULL</name></expr></argument>, <argument pos:start="71:19" pos:end="71:45"><expr pos:start="71:19" pos:end="71:45"><literal type="string" pos:start="71:19" pos:end="71:45">"build table nb_codes=%d\n"</literal></expr></argument>, <argument pos:start="71:48" pos:end="71:55"><expr pos:start="71:48" pos:end="71:55"><name pos:start="71:48" pos:end="71:55">nb_codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:54"><expr pos:start="75:5" pos:end="75:53"><name pos:start="75:5" pos:end="75:7">buf</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:53"><name pos:start="75:11" pos:end="75:19">av_malloc</name><argument_list pos:start="75:20" pos:end="75:53">(<argument pos:start="75:21" pos:end="75:52"><expr pos:start="75:21" pos:end="75:52"><operator pos:start="75:21" pos:end="75:21">(</operator><name pos:start="75:22" pos:end="75:29">nb_codes</name> <operator pos:start="75:31" pos:end="75:31">+</operator> <literal type="number" pos:start="75:33" pos:end="75:33">1</literal><operator pos:start="75:34" pos:end="75:34">)</operator> <operator pos:start="75:36" pos:end="75:36">*</operator> <sizeof pos:start="75:38" pos:end="75:52">sizeof<argument_list pos:start="75:44" pos:end="75:52">(<argument pos:start="75:45" pos:end="75:51"><expr pos:start="75:45" pos:end="75:51"><name pos:start="75:45" pos:end="75:51">VLCcode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="81:5" pos:end="81:46"><expr pos:start="81:5" pos:end="81:45"><call pos:start="81:5" pos:end="81:45"><name pos:start="81:5" pos:end="81:14">av_assert0</name><argument_list pos:start="81:15" pos:end="81:45">(<argument pos:start="81:16" pos:end="81:44"><expr pos:start="81:16" pos:end="81:44"><name pos:start="81:16" pos:end="81:27">symbols_size</name> <operator pos:start="81:29" pos:end="81:30">&lt;=</operator> <literal type="number" pos:start="81:32" pos:end="81:32">2</literal> <operator pos:start="81:34" pos:end="81:35">||</operator> <operator pos:start="81:37" pos:end="81:37">!</operator><name pos:start="81:38" pos:end="81:44">symbols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="136:0"><expr pos:start="83:5" pos:end="83:9"><name pos:start="83:5" pos:end="83:5">j</name> <operator pos:start="83:7" pos:end="83:7">=</operator> <literal type="number" pos:start="83:9" pos:end="83:9">0</literal></expr>;</expr_stmt>

<cpp:define pos:start="85:1" pos:end="135:5">#<cpp:directive pos:start="85:2" pos:end="85:7">define</cpp:directive> <cpp:macro pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:12">COPY</name><parameter_list pos:start="85:13" pos:end="85:23">(<parameter pos:start="85:14" pos:end="85:22"><type pos:start="85:14" pos:end="85:22"><name pos:start="85:14" pos:end="85:22">condition</name></type></parameter>)</parameter_list></cpp:macro>\

    <cpp:value pos:start="87:5" pos:end="135:5">for (i = 0; i &lt; nb_codes; i++) {                                        \

        GET_DATA(buf[j].bits, bits, i, bits_wrap, bits_size);               \

        if (!(condition))                                                   \

            continue;                                                       \

        if (buf[j].bits &gt; 3*nb_bits || buf[j].bits&gt;32) {                    \

            av_log(NULL, AV_LOG_ERROR, "Too long VLC (%d) in init_vlc\n", buf[j].bits);\

            av_free(buf);                                                   \

            return -1;                                                      \

        }                                                                   \

        GET_DATA(buf[j].code, codes, i, codes_wrap, codes_size);            \

        if (buf[j].code &gt;= (1LL&lt;&lt;buf[j].bits)) {                            \

            av_log(NULL, AV_LOG_ERROR, "Invalid code in init_vlc\n");       \

            av_free(buf);                                                   \

            return -1;                                                      \

        }                                                                   \

        if (flags &amp; INIT_VLC_LE)                                            \

            buf[j].code = bitswap_32(buf[j].code);                          \

        else                                                                \

            buf[j].code &lt;&lt;= 32 - buf[j].bits;                               \

        if (symbols)                                                        \

            GET_DATA(buf[j].symbol, symbols, i, symbols_wrap, symbols_size) \

        else                                                                \

            buf[j].symbol = i;                                              \

        j++;                                                                \

    }</cpp:value></cpp:define>

    <expr_stmt pos:start="137:5" pos:end="137:32"><expr pos:start="137:5" pos:end="137:31"><call pos:start="137:5" pos:end="137:31"><name pos:start="137:5" pos:end="137:8">COPY</name><argument_list pos:start="137:9" pos:end="137:31">(<argument pos:start="137:10" pos:end="137:30"><expr pos:start="137:10" pos:end="137:30"><name pos:start="137:10" pos:end="137:15"><name pos:start="137:10" pos:end="137:12">buf</name><index pos:start="137:13" pos:end="137:15">[<expr pos:start="137:14" pos:end="137:14"><name pos:start="137:14" pos:end="137:14">j</name></expr>]</index></name><operator pos:start="137:16" pos:end="137:16">.</operator><name pos:start="137:17" pos:end="137:20">bits</name> <operator pos:start="137:22" pos:end="137:22">&gt;</operator> <name pos:start="137:24" pos:end="137:30">nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="139:5" pos:end="139:87">// qsort is the slowest part of init_vlc, and could probably be improved or avoided</comment>

    <expr_stmt pos:start="141:5" pos:end="141:52"><expr pos:start="141:5" pos:end="141:51"><call pos:start="141:5" pos:end="141:51"><name pos:start="141:5" pos:end="141:9">qsort</name><argument_list pos:start="141:10" pos:end="141:51">(<argument pos:start="141:11" pos:end="141:13"><expr pos:start="141:11" pos:end="141:13"><name pos:start="141:11" pos:end="141:13">buf</name></expr></argument>, <argument pos:start="141:16" pos:end="141:16"><expr pos:start="141:16" pos:end="141:16"><name pos:start="141:16" pos:end="141:16">j</name></expr></argument>, <argument pos:start="141:19" pos:end="141:33"><expr pos:start="141:19" pos:end="141:33"><sizeof pos:start="141:19" pos:end="141:33">sizeof<argument_list pos:start="141:25" pos:end="141:33">(<argument pos:start="141:26" pos:end="141:32"><expr pos:start="141:26" pos:end="141:32"><name pos:start="141:26" pos:end="141:32">VLCcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="141:36" pos:end="141:50"><expr pos:start="141:36" pos:end="141:50"><name pos:start="141:36" pos:end="141:50">compare_vlcspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:48"><expr pos:start="143:5" pos:end="143:47"><call pos:start="143:5" pos:end="143:47"><name pos:start="143:5" pos:end="143:8">COPY</name><argument_list pos:start="143:9" pos:end="143:47">(<argument pos:start="143:10" pos:end="143:46"><expr pos:start="143:10" pos:end="143:46"><name pos:start="143:10" pos:end="143:15"><name pos:start="143:10" pos:end="143:12">buf</name><index pos:start="143:13" pos:end="143:15">[<expr pos:start="143:14" pos:end="143:14"><name pos:start="143:14" pos:end="143:14">j</name></expr>]</index></name><operator pos:start="143:16" pos:end="143:16">.</operator><name pos:start="143:17" pos:end="143:20">bits</name> <operator pos:start="143:22" pos:end="143:23">&amp;&amp;</operator> <name pos:start="143:25" pos:end="143:30"><name pos:start="143:25" pos:end="143:27">buf</name><index pos:start="143:28" pos:end="143:30">[<expr pos:start="143:29" pos:end="143:29"><name pos:start="143:29" pos:end="143:29">j</name></expr>]</index></name><operator pos:start="143:31" pos:end="143:31">.</operator><name pos:start="143:32" pos:end="143:35">bits</name> <operator pos:start="143:37" pos:end="143:38">&lt;=</operator> <name pos:start="143:40" pos:end="143:46">nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:17"><expr pos:start="145:5" pos:end="145:16"><name pos:start="145:5" pos:end="145:12">nb_codes</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <name pos:start="145:16" pos:end="145:16">j</name></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:58"><expr pos:start="149:5" pos:end="149:57"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="149:57"><name pos:start="149:11" pos:end="149:21">build_table</name><argument_list pos:start="149:22" pos:end="149:57">(<argument pos:start="149:23" pos:end="149:25"><expr pos:start="149:23" pos:end="149:25"><name pos:start="149:23" pos:end="149:25">vlc</name></expr></argument>, <argument pos:start="149:28" pos:end="149:34"><expr pos:start="149:28" pos:end="149:34"><name pos:start="149:28" pos:end="149:34">nb_bits</name></expr></argument>, <argument pos:start="149:37" pos:end="149:44"><expr pos:start="149:37" pos:end="149:44"><name pos:start="149:37" pos:end="149:44">nb_codes</name></expr></argument>, <argument pos:start="149:47" pos:end="149:49"><expr pos:start="149:47" pos:end="149:49"><name pos:start="149:47" pos:end="149:49">buf</name></expr></argument>, <argument pos:start="149:52" pos:end="149:56"><expr pos:start="149:52" pos:end="149:56"><name pos:start="149:52" pos:end="149:56">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:17"><expr pos:start="153:5" pos:end="153:16"><call pos:start="153:5" pos:end="153:16"><name pos:start="153:5" pos:end="153:11">av_free</name><argument_list pos:start="153:12" pos:end="153:16">(<argument pos:start="153:13" pos:end="153:15"><expr pos:start="153:13" pos:end="153:15"><name pos:start="153:13" pos:end="153:15">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="161:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:16">(<expr pos:start="155:9" pos:end="155:15"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">&lt;</operator> <literal type="number" pos:start="155:15" pos:end="155:15">0</literal></expr>)</condition> <block pos:start="155:18" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:19">

        <expr_stmt pos:start="157:9" pos:end="157:30"><expr pos:start="157:9" pos:end="157:29"><call pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:16">av_freep</name><argument_list pos:start="157:17" pos:end="157:29">(<argument pos:start="157:18" pos:end="157:28"><expr pos:start="157:18" pos:end="157:28"><operator pos:start="157:18" pos:end="157:18">&amp;</operator><name pos:start="157:19" pos:end="157:28"><name pos:start="157:19" pos:end="157:21">vlc</name><operator pos:start="157:22" pos:end="157:23">-&gt;</operator><name pos:start="157:24" pos:end="157:28">table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="159:9" pos:end="159:19">return <expr pos:start="159:16" pos:end="159:18"><name pos:start="159:16" pos:end="159:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="163:5" pos:end="163:13">return <expr pos:start="163:12" pos:end="163:12"><literal type="number" pos:start="163:12" pos:end="163:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
