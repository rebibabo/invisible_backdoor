<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3402.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">run_block_job</name><parameter_list pos:start="1:26" pos:end="1:54">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:34">BlockJob</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">job</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:46">Error</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier><modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:34">

    <decl_stmt pos:start="5:5" pos:end="5:60"><decl pos:start="5:5" pos:end="5:59"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AioContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:27">aio_context</name> <init pos:start="5:29" pos:end="5:59">= <expr pos:start="5:31" pos:end="5:59"><call pos:start="5:31" pos:end="5:59"><name pos:start="5:31" pos:end="5:49">blk_get_aio_context</name><argument_list pos:start="5:50" pos:end="5:59">(<argument pos:start="5:51" pos:end="5:58"><expr pos:start="5:51" pos:end="5:58"><name pos:start="5:51" pos:end="5:58"><name pos:start="5:51" pos:end="5:53">job</name><operator pos:start="5:54" pos:end="5:55">-&gt;</operator><name pos:start="5:56" pos:end="5:58">blk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="11:24">/* FIXME In error cases, the job simply goes away and we access a dangling

     * pointer below. */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><call pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:23">aio_context_acquire</name><argument_list pos:start="13:24" pos:end="13:36">(<argument pos:start="13:25" pos:end="13:35"><expr pos:start="13:25" pos:end="13:35"><name pos:start="13:25" pos:end="13:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="15:5" pos:end="23:26">do <block pos:start="15:8" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:79">

        <expr_stmt pos:start="17:9" pos:end="17:36"><expr pos:start="17:9" pos:end="17:35"><call pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:16">aio_poll</name><argument_list pos:start="17:17" pos:end="17:35">(<argument pos:start="17:18" pos:end="17:28"><expr pos:start="17:18" pos:end="17:28"><name pos:start="17:18" pos:end="17:28">aio_context</name></expr></argument>, <argument pos:start="17:31" pos:end="17:34"><expr pos:start="17:31" pos:end="17:34"><name pos:start="17:31" pos:end="17:34">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="21:79"><expr pos:start="19:9" pos:end="21:78"><call pos:start="19:9" pos:end="21:78"><name pos:start="19:9" pos:end="19:27">qemu_progress_print</name><argument_list pos:start="19:28" pos:end="21:78">(<argument pos:start="19:29" pos:end="21:74"><expr pos:start="19:29" pos:end="21:74"><ternary pos:start="19:29" pos:end="21:74"><condition pos:start="19:29" pos:end="19:38"><expr pos:start="19:29" pos:end="19:36"><name pos:start="19:29" pos:end="19:36"><name pos:start="19:29" pos:end="19:31">job</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:36">len</name></name></expr> ?</condition><then pos:start="21:29" pos:end="21:67">

                            <expr pos:start="21:29" pos:end="21:67"><operator pos:start="21:29" pos:end="21:29">(</operator><operator pos:start="21:30" pos:end="21:30">(</operator><name pos:start="21:31" pos:end="21:35">float</name><operator pos:start="21:36" pos:end="21:36">)</operator><name pos:start="21:37" pos:end="21:47"><name pos:start="21:37" pos:end="21:39">job</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:47">offset</name></name> <operator pos:start="21:49" pos:end="21:49">/</operator> <name pos:start="21:51" pos:end="21:58"><name pos:start="21:51" pos:end="21:53">job</name><operator pos:start="21:54" pos:end="21:55">-&gt;</operator><name pos:start="21:56" pos:end="21:58">len</name></name> <operator pos:start="21:60" pos:end="21:60">*</operator> <literal type="number" pos:start="21:62" pos:end="21:66">100.f</literal><operator pos:start="21:67" pos:end="21:67">)</operator></expr> </then><else pos:start="21:69" pos:end="21:74">: <expr pos:start="21:71" pos:end="21:74"><literal type="number" pos:start="21:71" pos:end="21:74">0.0f</literal></expr></else></ternary></expr></argument>, <argument pos:start="21:77" pos:end="21:77"><expr pos:start="21:77" pos:end="21:77"><literal type="number" pos:start="21:77" pos:end="21:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="23:13" pos:end="23:25">(<expr pos:start="23:14" pos:end="23:24"><operator pos:start="23:14" pos:end="23:14">!</operator><name pos:start="23:15" pos:end="23:24"><name pos:start="23:15" pos:end="23:17">job</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:24">ready</name></name></expr>)</condition>;</do>



    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><call pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:27">block_job_complete_sync</name><argument_list pos:start="27:28" pos:end="27:38">(<argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">job</name></expr></argument>, <argument pos:start="27:34" pos:end="27:37"><expr pos:start="27:34" pos:end="27:37"><name pos:start="27:34" pos:end="27:37">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:23">aio_context_release</name><argument_list pos:start="29:24" pos:end="29:36">(<argument pos:start="29:25" pos:end="29:35"><expr pos:start="29:25" pos:end="29:35"><name pos:start="29:25" pos:end="29:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="35:40">/* A block job may finish instantaneously without publishing any progress,

     * so just signal completion here */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:34"><expr pos:start="37:5" pos:end="37:33"><call pos:start="37:5" pos:end="37:33"><name pos:start="37:5" pos:end="37:23">qemu_progress_print</name><argument_list pos:start="37:24" pos:end="37:33">(<argument pos:start="37:25" pos:end="37:29"><expr pos:start="37:25" pos:end="37:29"><literal type="number" pos:start="37:25" pos:end="37:29">100.f</literal></expr></argument>, <argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><literal type="number" pos:start="37:32" pos:end="37:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
