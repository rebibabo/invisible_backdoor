<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2206.c" pos:tabs="8"><function pos:start="1:1" pos:end="319:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">dnxhd_decode_header</name><parameter_list pos:start="1:31" pos:end="5:47">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:43">DNXHDContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">ctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:64"><decl pos:start="1:51" pos:end="1:64"><type pos:start="1:51" pos:end="1:64"><name pos:start="1:51" pos:end="1:57">AVFrame</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:64">frame</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:49"><decl pos:start="3:32" pos:end="3:49"><type pos:start="3:32" pos:end="3:49"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:44">uint8_t</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:49">buf</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:63"><decl pos:start="3:52" pos:end="3:63"><type pos:start="3:52" pos:end="3:63"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:63">buf_size</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:46"><decl pos:start="5:32" pos:end="5:46"><type pos:start="5:32" pos:end="5:46"><name pos:start="5:32" pos:end="5:34">int</name></type> <name pos:start="5:36" pos:end="5:46">first_field</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="319:1">{<block_content pos:start="9:5" pos:end="317:13">

    <decl_stmt pos:start="9:5" pos:end="9:79"><decl pos:start="9:5" pos:end="9:78"><type pos:start="9:5" pos:end="9:24"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <specifier pos:start="9:12" pos:end="9:16">const</specifier> <name pos:start="9:18" pos:end="9:24">uint8_t</name></type> <name pos:start="9:26" pos:end="9:40"><name pos:start="9:26" pos:end="9:38">header_prefix</name><index pos:start="9:39" pos:end="9:40">[]</index></name>    <init pos:start="9:45" pos:end="9:78">= <expr pos:start="9:47" pos:end="9:78"><block pos:start="9:47" pos:end="9:78">{ <expr pos:start="9:49" pos:end="9:52"><literal type="number" pos:start="9:49" pos:end="9:52">0x00</literal></expr>, <expr pos:start="9:55" pos:end="9:58"><literal type="number" pos:start="9:55" pos:end="9:58">0x00</literal></expr>, <expr pos:start="9:61" pos:end="9:64"><literal type="number" pos:start="9:61" pos:end="9:64">0x02</literal></expr>, <expr pos:start="9:67" pos:end="9:70"><literal type="number" pos:start="9:67" pos:end="9:70">0x80</literal></expr>, <expr pos:start="9:73" pos:end="9:76"><literal type="number" pos:start="9:73" pos:end="9:76">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:79"><decl pos:start="11:5" pos:end="11:78"><type pos:start="11:5" pos:end="11:24"><specifier pos:start="11:5" pos:end="11:10">static</specifier> <specifier pos:start="11:12" pos:end="11:16">const</specifier> <name pos:start="11:18" pos:end="11:24">uint8_t</name></type> <name pos:start="11:26" pos:end="11:43"><name pos:start="11:26" pos:end="11:41">header_prefix444</name><index pos:start="11:42" pos:end="11:43">[]</index></name> <init pos:start="11:45" pos:end="11:78">= <expr pos:start="11:47" pos:end="11:78"><block pos:start="11:47" pos:end="11:78">{ <expr pos:start="11:49" pos:end="11:52"><literal type="number" pos:start="11:49" pos:end="11:52">0x00</literal></expr>, <expr pos:start="11:55" pos:end="11:58"><literal type="number" pos:start="11:55" pos:end="11:58">0x00</literal></expr>, <expr pos:start="11:61" pos:end="11:64"><literal type="number" pos:start="11:61" pos:end="11:64">0x02</literal></expr>, <expr pos:start="11:67" pos:end="11:70"><literal type="number" pos:start="11:67" pos:end="11:70">0x80</literal></expr>, <expr pos:start="11:73" pos:end="11:76"><literal type="number" pos:start="11:73" pos:end="11:76">0x02</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:79"><decl pos:start="13:5" pos:end="13:78"><type pos:start="13:5" pos:end="13:24"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <specifier pos:start="13:12" pos:end="13:16">const</specifier> <name pos:start="13:18" pos:end="13:24">uint8_t</name></type> <name pos:start="13:26" pos:end="13:43"><name pos:start="13:26" pos:end="13:41">header_prefixhr1</name><index pos:start="13:42" pos:end="13:43">[]</index></name> <init pos:start="13:45" pos:end="13:78">= <expr pos:start="13:47" pos:end="13:78"><block pos:start="13:47" pos:end="13:78">{ <expr pos:start="13:49" pos:end="13:52"><literal type="number" pos:start="13:49" pos:end="13:52">0x00</literal></expr>, <expr pos:start="13:55" pos:end="13:58"><literal type="number" pos:start="13:55" pos:end="13:58">0x00</literal></expr>, <expr pos:start="13:61" pos:end="13:64"><literal type="number" pos:start="13:61" pos:end="13:64">0x02</literal></expr>, <expr pos:start="13:67" pos:end="13:70"><literal type="number" pos:start="13:67" pos:end="13:70">0x80</literal></expr>, <expr pos:start="13:73" pos:end="13:76"><literal type="number" pos:start="13:73" pos:end="13:76">0x03</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:79"><decl pos:start="15:5" pos:end="15:78"><type pos:start="15:5" pos:end="15:24"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <specifier pos:start="15:12" pos:end="15:16">const</specifier> <name pos:start="15:18" pos:end="15:24">uint8_t</name></type> <name pos:start="15:26" pos:end="15:43"><name pos:start="15:26" pos:end="15:41">header_prefixhr2</name><index pos:start="15:42" pos:end="15:43">[]</index></name> <init pos:start="15:45" pos:end="15:78">= <expr pos:start="15:47" pos:end="15:78"><block pos:start="15:47" pos:end="15:78">{ <expr pos:start="15:49" pos:end="15:52"><literal type="number" pos:start="15:49" pos:end="15:52">0x00</literal></expr>, <expr pos:start="15:55" pos:end="15:58"><literal type="number" pos:start="15:55" pos:end="15:58">0x00</literal></expr>, <expr pos:start="15:61" pos:end="15:64"><literal type="number" pos:start="15:61" pos:end="15:64">0x03</literal></expr>, <expr pos:start="15:67" pos:end="15:70"><literal type="number" pos:start="15:67" pos:end="15:70">0x8C</literal></expr>, <expr pos:start="15:73" pos:end="15:76"><literal type="number" pos:start="15:73" pos:end="15:76">0x03</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:14">cid</name></decl>, <decl pos:start="17:17" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:17" pos:end="17:19">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:49"><decl pos:start="19:5" pos:end="19:38"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:21">old_bit_depth</name> <init pos:start="19:23" pos:end="19:38">= <expr pos:start="19:25" pos:end="19:38"><name pos:start="19:25" pos:end="19:38"><name pos:start="19:25" pos:end="19:27">ctx</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:38">bit_depth</name></name></expr></init></decl>, <decl pos:start="19:41" pos:end="19:48"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:41" pos:end="19:48">bitdepth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:38"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:21">old_mb_height</name> <init pos:start="21:23" pos:end="21:38">= <expr pos:start="21:25" pos:end="21:38"><name pos:start="21:25" pos:end="21:38"><name pos:start="21:25" pos:end="21:27">ctx</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:38">mb_height</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:25">(<expr pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:16">buf_size</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <literal type="number" pos:start="25:20" pos:end="25:24">0x280</literal></expr>)</condition> <block pos:start="25:27" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:35">

        <expr_stmt pos:start="27:9" pos:end="29:59"><expr pos:start="27:9" pos:end="29:58"><call pos:start="27:9" pos:end="29:58"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="29:58">(<argument pos:start="27:16" pos:end="27:25"><expr pos:start="27:16" pos:end="27:25"><name pos:start="27:16" pos:end="27:25"><name pos:start="27:16" pos:end="27:18">ctx</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:25">avctx</name></name></expr></argument>, <argument pos:start="27:28" pos:end="27:39"><expr pos:start="27:28" pos:end="27:39"><name pos:start="27:28" pos:end="27:39">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="29:16" pos:end="29:47"><expr pos:start="29:16" pos:end="29:47"><literal type="string" pos:start="29:16" pos:end="29:47">"buffer too small (%d &lt; 640).\n"</literal></expr></argument>, <argument pos:start="29:50" pos:end="29:57"><expr pos:start="29:50" pos:end="29:57"><name pos:start="29:50" pos:end="29:57">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="49:5">if <condition pos:start="37:8" pos:end="39:77">(<expr pos:start="37:9" pos:end="39:76"><call pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:14">memcmp</name><argument_list pos:start="37:15" pos:end="37:37">(<argument pos:start="37:16" pos:end="37:18"><expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">buf</name></expr></argument>, <argument pos:start="37:21" pos:end="37:33"><expr pos:start="37:21" pos:end="37:33"><name pos:start="37:21" pos:end="37:33">header_prefix</name></expr></argument>, <argument pos:start="37:36" pos:end="37:36"><expr pos:start="37:36" pos:end="37:36"><literal type="number" pos:start="37:36" pos:end="37:36">5</literal></expr></argument>)</argument_list></call> <operator pos:start="37:39" pos:end="37:40">&amp;&amp;</operator> <call pos:start="37:42" pos:end="37:73"><name pos:start="37:42" pos:end="37:47">memcmp</name><argument_list pos:start="37:48" pos:end="37:73">(<argument pos:start="37:49" pos:end="37:51"><expr pos:start="37:49" pos:end="37:51"><name pos:start="37:49" pos:end="37:51">buf</name></expr></argument>, <argument pos:start="37:54" pos:end="37:69"><expr pos:start="37:54" pos:end="37:69"><name pos:start="37:54" pos:end="37:69">header_prefix444</name></expr></argument>, <argument pos:start="37:72" pos:end="37:72"><expr pos:start="37:72" pos:end="37:72"><literal type="number" pos:start="37:72" pos:end="37:72">5</literal></expr></argument>)</argument_list></call> <operator pos:start="37:75" pos:end="37:76">&amp;&amp;</operator>

        <call pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:14">memcmp</name><argument_list pos:start="39:15" pos:end="39:40">(<argument pos:start="39:16" pos:end="39:18"><expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">buf</name></expr></argument>, <argument pos:start="39:21" pos:end="39:36"><expr pos:start="39:21" pos:end="39:36"><name pos:start="39:21" pos:end="39:36">header_prefixhr1</name></expr></argument>, <argument pos:start="39:39" pos:end="39:39"><expr pos:start="39:39" pos:end="39:39"><literal type="number" pos:start="39:39" pos:end="39:39">5</literal></expr></argument>)</argument_list></call> <operator pos:start="39:42" pos:end="39:43">&amp;&amp;</operator> <call pos:start="39:45" pos:end="39:76"><name pos:start="39:45" pos:end="39:50">memcmp</name><argument_list pos:start="39:51" pos:end="39:76">(<argument pos:start="39:52" pos:end="39:54"><expr pos:start="39:52" pos:end="39:54"><name pos:start="39:52" pos:end="39:54">buf</name></expr></argument>, <argument pos:start="39:57" pos:end="39:72"><expr pos:start="39:57" pos:end="39:72"><name pos:start="39:57" pos:end="39:72">header_prefixhr2</name></expr></argument>, <argument pos:start="39:75" pos:end="39:75"><expr pos:start="39:75" pos:end="39:75"><literal type="number" pos:start="39:75" pos:end="39:75">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:79" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:35">

        <expr_stmt pos:start="41:9" pos:end="45:55"><expr pos:start="41:9" pos:end="45:54"><call pos:start="41:9" pos:end="45:54"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="45:54">(<argument pos:start="41:16" pos:end="41:25"><expr pos:start="41:16" pos:end="41:25"><name pos:start="41:16" pos:end="41:25"><name pos:start="41:16" pos:end="41:18">ctx</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:25">avctx</name></name></expr></argument>, <argument pos:start="41:28" pos:end="41:39"><expr pos:start="41:28" pos:end="41:39"><name pos:start="41:28" pos:end="41:39">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="43:16" pos:end="43:68"><expr pos:start="43:16" pos:end="43:68"><literal type="string" pos:start="43:16" pos:end="43:68">"unknown header 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\n"</literal></expr></argument>,

               <argument pos:start="45:16" pos:end="45:21"><expr pos:start="45:16" pos:end="45:21"><name pos:start="45:16" pos:end="45:21"><name pos:start="45:16" pos:end="45:18">buf</name><index pos:start="45:19" pos:end="45:21">[<expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:24" pos:end="45:29"><expr pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:26">buf</name><index pos:start="45:27" pos:end="45:29">[<expr pos:start="45:28" pos:end="45:28"><literal type="number" pos:start="45:28" pos:end="45:28">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:32" pos:end="45:37"><expr pos:start="45:32" pos:end="45:37"><name pos:start="45:32" pos:end="45:37"><name pos:start="45:32" pos:end="45:34">buf</name><index pos:start="45:35" pos:end="45:37">[<expr pos:start="45:36" pos:end="45:36"><literal type="number" pos:start="45:36" pos:end="45:36">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:40" pos:end="45:45"><expr pos:start="45:40" pos:end="45:45"><name pos:start="45:40" pos:end="45:45"><name pos:start="45:40" pos:end="45:42">buf</name><index pos:start="45:43" pos:end="45:45">[<expr pos:start="45:44" pos:end="45:44"><literal type="number" pos:start="45:44" pos:end="45:44">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:48" pos:end="45:53"><expr pos:start="45:48" pos:end="45:53"><name pos:start="45:48" pos:end="45:53"><name pos:start="45:48" pos:end="45:50">buf</name><index pos:start="45:51" pos:end="45:53">[<expr pos:start="45:52" pos:end="45:52"><literal type="number" pos:start="45:52" pos:end="45:52">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:35">return <expr pos:start="47:16" pos:end="47:34"><name pos:start="47:16" pos:end="47:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="67:5"><if pos:start="51:5" pos:end="63:5">if <condition pos:start="51:8" pos:end="51:19">(<expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:11">buf</name><index pos:start="51:12" pos:end="51:14">[<expr pos:start="51:13" pos:end="51:13"><literal type="number" pos:start="51:13" pos:end="51:13">5</literal></expr>]</index></name> <operator pos:start="51:16" pos:end="51:16">&amp;</operator> <literal type="number" pos:start="51:18" pos:end="51:18">2</literal></expr>)</condition> <block pos:start="51:21" pos:end="63:5">{<block_content pos:start="53:9" pos:end="61:76"> <comment type="block" pos:start="51:23" pos:end="51:38">/* interlaced */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:36"><expr pos:start="53:9" pos:end="53:35"><name pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:11">ctx</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:22">cur_field</name></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:31"><name pos:start="53:26" pos:end="53:28">buf</name><index pos:start="53:29" pos:end="53:31">[<expr pos:start="53:30" pos:end="53:30"><literal type="number" pos:start="53:30" pos:end="53:30">5</literal></expr>]</index></name> <operator pos:start="53:33" pos:end="53:33">&amp;</operator> <literal type="number" pos:start="53:35" pos:end="53:35">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:13">frame</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:31">interlaced_frame</name></name> <operator pos:start="55:33" pos:end="55:33">=</operator> <literal type="number" pos:start="55:35" pos:end="55:35">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:63"><expr pos:start="57:9" pos:end="57:62"><name pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:13">frame</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:30">top_field_first</name></name>  <operator pos:start="57:33" pos:end="57:33">=</operator> <name pos:start="57:35" pos:end="57:45">first_field</name> <operator pos:start="57:47" pos:end="57:47">^</operator> <name pos:start="57:49" pos:end="57:62"><name pos:start="57:49" pos:end="57:51">ctx</name><operator pos:start="57:52" pos:end="57:53">-&gt;</operator><name pos:start="57:54" pos:end="57:62">cur_field</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="61:76"><expr pos:start="59:9" pos:end="61:75"><call pos:start="59:9" pos:end="61:75"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="61:75">(<argument pos:start="59:16" pos:end="59:25"><expr pos:start="59:16" pos:end="59:25"><name pos:start="59:16" pos:end="59:25"><name pos:start="59:16" pos:end="59:18">ctx</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:25">avctx</name></name></expr></argument>, <argument pos:start="59:28" pos:end="59:39"><expr pos:start="59:28" pos:end="59:39"><name pos:start="59:28" pos:end="59:39">AV_LOG_DEBUG</name></expr></argument>,

               <argument pos:start="61:16" pos:end="61:46"><expr pos:start="61:16" pos:end="61:46"><literal type="string" pos:start="61:16" pos:end="61:46">"interlaced %d, cur field %d\n"</literal></expr></argument>, <argument pos:start="61:49" pos:end="61:58"><expr pos:start="61:49" pos:end="61:58"><name pos:start="61:49" pos:end="61:54"><name pos:start="61:49" pos:end="61:51">buf</name><index pos:start="61:52" pos:end="61:54">[<expr pos:start="61:53" pos:end="61:53"><literal type="number" pos:start="61:53" pos:end="61:53">5</literal></expr>]</index></name> <operator pos:start="61:56" pos:end="61:56">&amp;</operator> <literal type="number" pos:start="61:58" pos:end="61:58">3</literal></expr></argument>, <argument pos:start="61:61" pos:end="61:74"><expr pos:start="61:61" pos:end="61:74"><name pos:start="61:61" pos:end="61:74"><name pos:start="61:61" pos:end="61:63">ctx</name><operator pos:start="61:64" pos:end="61:65">-&gt;</operator><name pos:start="61:66" pos:end="61:74">cur_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="67:5">else <block pos:start="63:12" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:27">

        <expr_stmt pos:start="65:9" pos:end="65:27"><expr pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:11">ctx</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:22">cur_field</name></name> <operator pos:start="65:24" pos:end="65:24">=</operator> <literal type="number" pos:start="65:26" pos:end="65:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:7">ctx</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:14">mbaff</name></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:26"><name pos:start="69:19" pos:end="69:21">buf</name><index pos:start="69:22" pos:end="69:26">[<expr pos:start="69:23" pos:end="69:25"><literal type="number" pos:start="69:23" pos:end="69:25">0x6</literal></expr>]</index></name> <operator pos:start="69:28" pos:end="69:29">&gt;&gt;</operator> <literal type="number" pos:start="69:31" pos:end="69:31">5</literal><operator pos:start="69:32" pos:end="69:32">)</operator> <operator pos:start="69:34" pos:end="69:34">&amp;</operator> <literal type="number" pos:start="69:36" pos:end="69:36">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:38"><expr pos:start="73:5" pos:end="73:37"><name pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:7">ctx</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:15">height</name></name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:37"><name pos:start="73:19" pos:end="73:25">AV_RB16</name><argument_list pos:start="73:26" pos:end="73:37">(<argument pos:start="73:27" pos:end="73:36"><expr pos:start="73:27" pos:end="73:36"><name pos:start="73:27" pos:end="73:29">buf</name> <operator pos:start="73:31" pos:end="73:31">+</operator> <literal type="number" pos:start="73:33" pos:end="73:36">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:38"><expr pos:start="75:5" pos:end="75:37"><name pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:7">ctx</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:14">width</name></name>  <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:37"><name pos:start="75:19" pos:end="75:25">AV_RB16</name><argument_list pos:start="75:26" pos:end="75:37">(<argument pos:start="75:27" pos:end="75:36"><expr pos:start="75:27" pos:end="75:36"><name pos:start="75:27" pos:end="75:29">buf</name> <operator pos:start="75:31" pos:end="75:31">+</operator> <literal type="number" pos:start="75:33" pos:end="75:36">0x1a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="79:5" pos:end="95:5">switch<condition pos:start="79:11" pos:end="79:26">(<expr pos:start="79:12" pos:end="79:25"><name pos:start="79:12" pos:end="79:20"><name pos:start="79:12" pos:end="79:14">buf</name><index pos:start="79:15" pos:end="79:20">[<expr pos:start="79:16" pos:end="79:19"><literal type="number" pos:start="79:16" pos:end="79:19">0x21</literal></expr>]</index></name> <operator pos:start="79:22" pos:end="79:23">&gt;&gt;</operator> <literal type="number" pos:start="79:25" pos:end="79:25">5</literal></expr>)</condition> <block pos:start="79:28" pos:end="95:5">{<block_content pos:start="81:5" pos:end="93:35">

    <case pos:start="81:5" pos:end="81:11">case <expr pos:start="81:10" pos:end="81:10"><literal type="number" pos:start="81:10" pos:end="81:10">1</literal></expr>:</case> <expr_stmt pos:start="81:13" pos:end="81:25"><expr pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:20">bitdepth</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <literal type="number" pos:start="81:24" pos:end="81:24">8</literal></expr>;</expr_stmt> <break pos:start="81:27" pos:end="81:32">break;</break>

    <case pos:start="83:5" pos:end="83:11">case <expr pos:start="83:10" pos:end="83:10"><literal type="number" pos:start="83:10" pos:end="83:10">2</literal></expr>:</case> <expr_stmt pos:start="83:13" pos:end="83:26"><expr pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:20">bitdepth</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <literal type="number" pos:start="83:24" pos:end="83:25">10</literal></expr>;</expr_stmt> <break pos:start="83:28" pos:end="83:33">break;</break>

    <case pos:start="85:5" pos:end="85:11">case <expr pos:start="85:10" pos:end="85:10"><literal type="number" pos:start="85:10" pos:end="85:10">3</literal></expr>:</case> <expr_stmt pos:start="85:13" pos:end="85:26"><expr pos:start="85:13" pos:end="85:25"><name pos:start="85:13" pos:end="85:20">bitdepth</name> <operator pos:start="85:22" pos:end="85:22">=</operator> <literal type="number" pos:start="85:24" pos:end="85:25">12</literal></expr>;</expr_stmt> <break pos:start="85:28" pos:end="85:33">break;</break>

    <default pos:start="87:5" pos:end="87:12">default:</default>

        <expr_stmt pos:start="89:9" pos:end="91:68"><expr pos:start="89:9" pos:end="91:67"><call pos:start="89:9" pos:end="91:67"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="91:67">(<argument pos:start="89:16" pos:end="89:25"><expr pos:start="89:16" pos:end="89:25"><name pos:start="89:16" pos:end="89:25"><name pos:start="89:16" pos:end="89:18">ctx</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:25">avctx</name></name></expr></argument>, <argument pos:start="89:28" pos:end="89:39"><expr pos:start="89:28" pos:end="89:39"><name pos:start="89:28" pos:end="89:39">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="91:16" pos:end="91:50"><expr pos:start="91:16" pos:end="91:50"><literal type="string" pos:start="91:16" pos:end="91:50">"Unknown bitdepth indicator (%d)\n"</literal></expr></argument>, <argument pos:start="91:53" pos:end="91:66"><expr pos:start="91:53" pos:end="91:66"><name pos:start="91:53" pos:end="91:61"><name pos:start="91:53" pos:end="91:55">buf</name><index pos:start="91:56" pos:end="91:61">[<expr pos:start="91:57" pos:end="91:60"><literal type="number" pos:start="91:57" pos:end="91:60">0x21</literal></expr>]</index></name> <operator pos:start="91:63" pos:end="91:64">&gt;&gt;</operator> <literal type="number" pos:start="91:66" pos:end="91:66">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:35">return <expr pos:start="93:16" pos:end="93:34"><name pos:start="93:16" pos:end="93:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="99:5" pos:end="99:30"><expr pos:start="99:5" pos:end="99:29"><name pos:start="99:5" pos:end="99:7">cid</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:29"><name pos:start="99:11" pos:end="99:17">AV_RB32</name><argument_list pos:start="99:18" pos:end="99:29">(<argument pos:start="99:19" pos:end="99:28"><expr pos:start="99:19" pos:end="99:28"><name pos:start="99:19" pos:end="99:21">buf</name> <operator pos:start="99:23" pos:end="99:23">+</operator> <literal type="number" pos:start="99:25" pos:end="99:28">0x28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="103:19"><if pos:start="101:5" pos:end="103:19">if <condition pos:start="101:8" pos:end="101:55">(<expr pos:start="101:9" pos:end="101:54"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:12">ret</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:49"><name pos:start="101:16" pos:end="101:29">dnxhd_init_vlc</name><argument_list pos:start="101:30" pos:end="101:49">(<argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">ctx</name></expr></argument>, <argument pos:start="101:36" pos:end="101:38"><expr pos:start="101:36" pos:end="101:38"><name pos:start="101:36" pos:end="101:38">cid</name></expr></argument>, <argument pos:start="101:41" pos:end="101:48"><expr pos:start="101:41" pos:end="101:48"><name pos:start="101:41" pos:end="101:48">bitdepth</name></expr></argument>)</argument_list></call><operator pos:start="101:50" pos:end="101:50">)</operator> <operator pos:start="101:52" pos:end="101:52">&lt;</operator> <literal type="number" pos:start="101:54" pos:end="101:54">0</literal></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:19"><block_content pos:start="103:9" pos:end="103:19">

        <return pos:start="103:9" pos:end="103:19">return <expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="109:74"><if pos:start="105:5" pos:end="109:74">if <condition pos:start="105:8" pos:end="105:50">(<expr pos:start="105:9" pos:end="105:49"><name pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:11">ctx</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:18">mbaff</name></name> <operator pos:start="105:20" pos:end="105:21">&amp;&amp;</operator> <name pos:start="105:23" pos:end="105:41"><name pos:start="105:23" pos:end="105:25">ctx</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:36">cid_table</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:41">cid</name></name> <operator pos:start="105:43" pos:end="105:44">!=</operator> <literal type="number" pos:start="105:46" pos:end="105:49">1260</literal></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="109:74"><block_content pos:start="107:9" pos:end="109:74">

        <expr_stmt pos:start="107:9" pos:end="109:74"><expr pos:start="107:9" pos:end="109:73"><call pos:start="107:9" pos:end="109:73"><name pos:start="107:9" pos:end="107:14">av_log</name><argument_list pos:start="107:15" pos:end="109:73">(<argument pos:start="107:16" pos:end="107:25"><expr pos:start="107:16" pos:end="107:25"><name pos:start="107:16" pos:end="107:25"><name pos:start="107:16" pos:end="107:18">ctx</name><operator pos:start="107:19" pos:end="107:20">-&gt;</operator><name pos:start="107:21" pos:end="107:25">avctx</name></name></expr></argument>, <argument pos:start="107:28" pos:end="107:41"><expr pos:start="107:28" pos:end="107:41"><name pos:start="107:28" pos:end="107:41">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="109:16" pos:end="109:72"><expr pos:start="109:16" pos:end="109:72"><literal type="string" pos:start="109:16" pos:end="109:72">"Adaptive MB interlace flag in an unsupported profile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:29"><expr pos:start="113:5" pos:end="113:28"><name pos:start="113:5" pos:end="113:12"><name pos:start="113:5" pos:end="113:7">ctx</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:12">act</name></name> <operator pos:start="113:14" pos:end="113:14">=</operator> <name pos:start="113:16" pos:end="113:24"><name pos:start="113:16" pos:end="113:18">buf</name><index pos:start="113:19" pos:end="113:24">[<expr pos:start="113:20" pos:end="113:23"><literal type="number" pos:start="113:20" pos:end="113:23">0x2C</literal></expr>]</index></name> <operator pos:start="113:26" pos:end="113:26">&amp;</operator> <literal type="number" pos:start="113:28" pos:end="113:28">7</literal></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="119:72"><if pos:start="115:5" pos:end="119:72">if <condition pos:start="115:8" pos:end="115:79">(<expr pos:start="115:9" pos:end="115:78"><name pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:11">ctx</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:16">act</name></name> <operator pos:start="115:18" pos:end="115:19">&amp;&amp;</operator> <name pos:start="115:21" pos:end="115:39"><name pos:start="115:21" pos:end="115:23">ctx</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:34">cid_table</name><operator pos:start="115:35" pos:end="115:36">-&gt;</operator><name pos:start="115:37" pos:end="115:39">cid</name></name> <operator pos:start="115:41" pos:end="115:42">!=</operator> <literal type="number" pos:start="115:44" pos:end="115:47">1256</literal> <operator pos:start="115:49" pos:end="115:50">&amp;&amp;</operator> <name pos:start="115:52" pos:end="115:70"><name pos:start="115:52" pos:end="115:54">ctx</name><operator pos:start="115:55" pos:end="115:56">-&gt;</operator><name pos:start="115:57" pos:end="115:65">cid_table</name><operator pos:start="115:66" pos:end="115:67">-&gt;</operator><name pos:start="115:68" pos:end="115:70">cid</name></name> <operator pos:start="115:72" pos:end="115:73">!=</operator> <literal type="number" pos:start="115:75" pos:end="115:78">1270</literal></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="119:72"><block_content pos:start="117:9" pos:end="119:72">

        <expr_stmt pos:start="117:9" pos:end="119:72"><expr pos:start="117:9" pos:end="119:71"><call pos:start="117:9" pos:end="119:71"><name pos:start="117:9" pos:end="117:14">av_log</name><argument_list pos:start="117:15" pos:end="119:71">(<argument pos:start="117:16" pos:end="117:25"><expr pos:start="117:16" pos:end="117:25"><name pos:start="117:16" pos:end="117:25"><name pos:start="117:16" pos:end="117:18">ctx</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:25">avctx</name></name></expr></argument>, <argument pos:start="117:28" pos:end="117:41"><expr pos:start="117:28" pos:end="117:41"><name pos:start="117:28" pos:end="117:41">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="119:16" pos:end="119:70"><expr pos:start="119:16" pos:end="119:70"><literal type="string" pos:start="119:16" pos:end="119:70">"Adaptive color transform in an unsupported profile.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:39"><expr pos:start="123:5" pos:end="123:38"><name pos:start="123:5" pos:end="123:15"><name pos:start="123:5" pos:end="123:7">ctx</name><operator pos:start="123:8" pos:end="123:9">-&gt;</operator><name pos:start="123:10" pos:end="123:15">is_444</name></name> <operator pos:start="123:17" pos:end="123:17">=</operator> <operator pos:start="123:19" pos:end="123:19">(</operator><name pos:start="123:20" pos:end="123:28"><name pos:start="123:20" pos:end="123:22">buf</name><index pos:start="123:23" pos:end="123:28">[<expr pos:start="123:24" pos:end="123:27"><literal type="number" pos:start="123:24" pos:end="123:27">0x2C</literal></expr>]</index></name> <operator pos:start="123:30" pos:end="123:31">&gt;&gt;</operator> <literal type="number" pos:start="123:33" pos:end="123:33">6</literal><operator pos:start="123:34" pos:end="123:34">)</operator> <operator pos:start="123:36" pos:end="123:36">&amp;</operator> <literal type="number" pos:start="123:38" pos:end="123:38">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="169:5"><if pos:start="125:5" pos:end="151:5">if <condition pos:start="125:8" pos:end="125:20">(<expr pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:11">ctx</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:19">is_444</name></name></expr>)</condition> <block pos:start="125:22" pos:end="151:5">{<block_content pos:start="127:9" pos:end="149:9">

        <if_stmt pos:start="127:9" pos:end="149:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:26">(<expr pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:20">bitdepth</name> <operator pos:start="127:22" pos:end="127:23">==</operator> <literal type="number" pos:start="127:25" pos:end="127:25">8</literal></expr>)</condition> <block pos:start="127:28" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:39">

            <expr_stmt pos:start="129:13" pos:end="129:64"><expr pos:start="129:13" pos:end="129:63"><call pos:start="129:13" pos:end="129:63"><name pos:start="129:13" pos:end="129:33">avpriv_request_sample</name><argument_list pos:start="129:34" pos:end="129:63">(<argument pos:start="129:35" pos:end="129:44"><expr pos:start="129:35" pos:end="129:44"><name pos:start="129:35" pos:end="129:44"><name pos:start="129:35" pos:end="129:37">ctx</name><operator pos:start="129:38" pos:end="129:39">-&gt;</operator><name pos:start="129:40" pos:end="129:44">avctx</name></name></expr></argument>, <argument pos:start="129:47" pos:end="129:62"><expr pos:start="129:47" pos:end="129:62"><literal type="string" pos:start="129:47" pos:end="129:62">"4:4:4 8 bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:39">return <expr pos:start="131:20" pos:end="131:38"><name pos:start="131:20" pos:end="131:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="133:11" pos:end="141:9">else if <condition pos:start="133:19" pos:end="133:34">(<expr pos:start="133:20" pos:end="133:33"><name pos:start="133:20" pos:end="133:27">bitdepth</name> <operator pos:start="133:29" pos:end="133:30">==</operator> <literal type="number" pos:start="133:32" pos:end="133:33">10</literal></expr>)</condition> <block pos:start="133:36" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:56">

            <expr_stmt pos:start="135:13" pos:end="135:66"><expr pos:start="135:13" pos:end="135:65"><name pos:start="135:13" pos:end="135:33"><name pos:start="135:13" pos:end="135:15">ctx</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:33">decode_dct_block</name></name> <operator pos:start="135:35" pos:end="135:35">=</operator> <name pos:start="135:37" pos:end="135:65">dnxhd_decode_dct_block_10_444</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="139:56"><expr pos:start="137:13" pos:end="139:55"><name pos:start="137:13" pos:end="137:24"><name pos:start="137:13" pos:end="137:15">ctx</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:24">pix_fmt</name></name> <operator pos:start="137:26" pos:end="137:26">=</operator> <ternary pos:start="137:28" pos:end="139:55"><condition pos:start="137:28" pos:end="137:37"><expr pos:start="137:28" pos:end="137:35"><name pos:start="137:28" pos:end="137:35"><name pos:start="137:28" pos:end="137:30">ctx</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:35">act</name></name></expr> ?</condition><then pos:start="137:39" pos:end="137:58"> <expr pos:start="137:39" pos:end="137:58"><name pos:start="137:39" pos:end="137:58">AV_PIX_FMT_YUV444P10</name></expr>

                                    </then><else pos:start="139:37" pos:end="139:55">: <expr pos:start="139:39" pos:end="139:55"><name pos:start="139:39" pos:end="139:55">AV_PIX_FMT_GBRP10</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="141:11" pos:end="149:9">else <block pos:start="141:16" pos:end="149:9">{<block_content pos:start="143:13" pos:end="147:56">

            <expr_stmt pos:start="143:13" pos:end="143:66"><expr pos:start="143:13" pos:end="143:65"><name pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:15">ctx</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:33">decode_dct_block</name></name> <operator pos:start="143:35" pos:end="143:35">=</operator> <name pos:start="143:37" pos:end="143:65">dnxhd_decode_dct_block_12_444</name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="147:56"><expr pos:start="145:13" pos:end="147:55"><name pos:start="145:13" pos:end="145:24"><name pos:start="145:13" pos:end="145:15">ctx</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:24">pix_fmt</name></name> <operator pos:start="145:26" pos:end="145:26">=</operator> <ternary pos:start="145:28" pos:end="147:55"><condition pos:start="145:28" pos:end="145:37"><expr pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:30">ctx</name><operator pos:start="145:31" pos:end="145:32">-&gt;</operator><name pos:start="145:33" pos:end="145:35">act</name></name></expr> ?</condition><then pos:start="145:39" pos:end="145:58"> <expr pos:start="145:39" pos:end="145:58"><name pos:start="145:39" pos:end="145:58">AV_PIX_FMT_YUV444P12</name></expr>

                                    </then><else pos:start="147:37" pos:end="147:55">: <expr pos:start="147:39" pos:end="147:55"><name pos:start="147:39" pos:end="147:55">AV_PIX_FMT_GBRP12</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="151:7" pos:end="157:5">else if <condition pos:start="151:15" pos:end="151:30">(<expr pos:start="151:16" pos:end="151:29"><name pos:start="151:16" pos:end="151:23">bitdepth</name> <operator pos:start="151:25" pos:end="151:26">==</operator> <literal type="number" pos:start="151:28" pos:end="151:29">12</literal></expr>)</condition> <block pos:start="151:32" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:44">

        <expr_stmt pos:start="153:9" pos:end="153:58"><expr pos:start="153:9" pos:end="153:57"><name pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:11">ctx</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:29">decode_dct_block</name></name> <operator pos:start="153:31" pos:end="153:31">=</operator> <name pos:start="153:33" pos:end="153:57">dnxhd_decode_dct_block_12</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:44"><expr pos:start="155:9" pos:end="155:43"><name pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:11">ctx</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:20">pix_fmt</name></name> <operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:43">AV_PIX_FMT_YUV422P12</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="157:7" pos:end="163:5">else if <condition pos:start="157:15" pos:end="157:30">(<expr pos:start="157:16" pos:end="157:29"><name pos:start="157:16" pos:end="157:23">bitdepth</name> <operator pos:start="157:25" pos:end="157:26">==</operator> <literal type="number" pos:start="157:28" pos:end="157:29">10</literal></expr>)</condition> <block pos:start="157:32" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:44">

        <expr_stmt pos:start="159:9" pos:end="159:58"><expr pos:start="159:9" pos:end="159:57"><name pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:11">ctx</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:29">decode_dct_block</name></name> <operator pos:start="159:31" pos:end="159:31">=</operator> <name pos:start="159:33" pos:end="159:57">dnxhd_decode_dct_block_10</name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:44"><expr pos:start="161:9" pos:end="161:43"><name pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:11">ctx</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:20">pix_fmt</name></name> <operator pos:start="161:22" pos:end="161:22">=</operator> <name pos:start="161:24" pos:end="161:43">AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="169:5">else <block pos:start="163:12" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:42">

        <expr_stmt pos:start="165:9" pos:end="165:57"><expr pos:start="165:9" pos:end="165:56"><name pos:start="165:9" pos:end="165:29"><name pos:start="165:9" pos:end="165:11">ctx</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:29">decode_dct_block</name></name> <operator pos:start="165:31" pos:end="165:31">=</operator> <name pos:start="165:33" pos:end="165:56">dnxhd_decode_dct_block_8</name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:42"><expr pos:start="167:9" pos:end="167:41"><name pos:start="167:9" pos:end="167:20"><name pos:start="167:9" pos:end="167:11">ctx</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:20">pix_fmt</name></name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:41">AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:64"><expr pos:start="173:5" pos:end="173:63"><name pos:start="173:5" pos:end="173:35"><name pos:start="173:5" pos:end="173:7">ctx</name><operator pos:start="173:8" pos:end="173:9">-&gt;</operator><name pos:start="173:10" pos:end="173:14">avctx</name><operator pos:start="173:15" pos:end="173:16">-&gt;</operator><name pos:start="173:17" pos:end="173:35">bits_per_raw_sample</name></name> <operator pos:start="173:37" pos:end="173:37">=</operator> <name pos:start="173:39" pos:end="173:52"><name pos:start="173:39" pos:end="173:41">ctx</name><operator pos:start="173:42" pos:end="173:43">-&gt;</operator><name pos:start="173:44" pos:end="173:52">bit_depth</name></name> <operator pos:start="173:54" pos:end="173:54">=</operator> <name pos:start="173:56" pos:end="173:63">bitdepth</name></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="185:5"><if pos:start="175:5" pos:end="185:5">if <condition pos:start="175:8" pos:end="175:40">(<expr pos:start="175:9" pos:end="175:39"><name pos:start="175:9" pos:end="175:22"><name pos:start="175:9" pos:end="175:11">ctx</name><operator pos:start="175:12" pos:end="175:13">-&gt;</operator><name pos:start="175:14" pos:end="175:22">bit_depth</name></name> <operator pos:start="175:24" pos:end="175:25">!=</operator> <name pos:start="175:27" pos:end="175:39">old_bit_depth</name></expr>)</condition> <block pos:start="175:42" pos:end="185:5">{<block_content pos:start="177:9" pos:end="183:44">

        <expr_stmt pos:start="177:9" pos:end="177:49"><expr pos:start="177:9" pos:end="177:48"><call pos:start="177:9" pos:end="177:48"><name pos:start="177:9" pos:end="177:24">ff_blockdsp_init</name><argument_list pos:start="177:25" pos:end="177:48">(<argument pos:start="177:26" pos:end="177:35"><expr pos:start="177:26" pos:end="177:35"><operator pos:start="177:26" pos:end="177:26">&amp;</operator><name pos:start="177:27" pos:end="177:35"><name pos:start="177:27" pos:end="177:29">ctx</name><operator pos:start="177:30" pos:end="177:31">-&gt;</operator><name pos:start="177:32" pos:end="177:35">bdsp</name></name></expr></argument>, <argument pos:start="177:38" pos:end="177:47"><expr pos:start="177:38" pos:end="177:47"><name pos:start="177:38" pos:end="177:47"><name pos:start="177:38" pos:end="177:40">ctx</name><operator pos:start="177:41" pos:end="177:42">-&gt;</operator><name pos:start="177:43" pos:end="177:47">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:48"><expr pos:start="179:9" pos:end="179:47"><call pos:start="179:9" pos:end="179:47"><name pos:start="179:9" pos:end="179:23">ff_idctdsp_init</name><argument_list pos:start="179:24" pos:end="179:47">(<argument pos:start="179:25" pos:end="179:34"><expr pos:start="179:25" pos:end="179:34"><operator pos:start="179:25" pos:end="179:25">&amp;</operator><name pos:start="179:26" pos:end="179:34"><name pos:start="179:26" pos:end="179:28">ctx</name><operator pos:start="179:29" pos:end="179:30">-&gt;</operator><name pos:start="179:31" pos:end="179:34">idsp</name></name></expr></argument>, <argument pos:start="179:37" pos:end="179:46"><expr pos:start="179:37" pos:end="179:46"><name pos:start="179:37" pos:end="179:46"><name pos:start="179:37" pos:end="179:39">ctx</name><operator pos:start="179:40" pos:end="179:41">-&gt;</operator><name pos:start="179:42" pos:end="179:46">avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="183:44"><expr pos:start="181:9" pos:end="183:43"><call pos:start="181:9" pos:end="183:43"><name pos:start="181:9" pos:end="181:25">ff_init_scantable</name><argument_list pos:start="181:26" pos:end="183:43">(<argument pos:start="181:27" pos:end="181:52"><expr pos:start="181:27" pos:end="181:52"><name pos:start="181:27" pos:end="181:52"><name pos:start="181:27" pos:end="181:29">ctx</name><operator pos:start="181:30" pos:end="181:31">-&gt;</operator><name pos:start="181:32" pos:end="181:35">idsp</name><operator pos:start="181:36" pos:end="181:36">.</operator><name pos:start="181:37" pos:end="181:52">idct_permutation</name></name></expr></argument>, <argument pos:start="181:55" pos:end="181:69"><expr pos:start="181:55" pos:end="181:69"><operator pos:start="181:55" pos:end="181:55">&amp;</operator><name pos:start="181:56" pos:end="181:69"><name pos:start="181:56" pos:end="181:58">ctx</name><operator pos:start="181:59" pos:end="181:60">-&gt;</operator><name pos:start="181:61" pos:end="181:69">scantable</name></name></expr></argument>,

                          <argument pos:start="183:27" pos:end="183:42"><expr pos:start="183:27" pos:end="183:42"><name pos:start="183:27" pos:end="183:42">ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="189:5" pos:end="189:55">// make sure profile size constraints are respected</comment>

    <comment type="line" pos:start="191:5" pos:end="191:57">// DNx100 allows 1920-&gt;1440 and 1280-&gt;960 subsampling</comment>

    <if_stmt pos:start="193:5" pos:end="205:5"><if pos:start="193:5" pos:end="205:5">if <condition pos:start="193:8" pos:end="195:48">(<expr pos:start="193:9" pos:end="195:47"><name pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:11">ctx</name><operator pos:start="193:12" pos:end="193:13">-&gt;</operator><name pos:start="193:14" pos:end="193:18">width</name></name> <operator pos:start="193:20" pos:end="193:21">!=</operator> <name pos:start="193:23" pos:end="193:43"><name pos:start="193:23" pos:end="193:25">ctx</name><operator pos:start="193:26" pos:end="193:27">-&gt;</operator><name pos:start="193:28" pos:end="193:36">cid_table</name><operator pos:start="193:37" pos:end="193:38">-&gt;</operator><name pos:start="193:39" pos:end="193:43">width</name></name> <operator pos:start="193:45" pos:end="193:46">&amp;&amp;</operator>

        <name pos:start="195:9" pos:end="195:29"><name pos:start="195:9" pos:end="195:11">ctx</name><operator pos:start="195:12" pos:end="195:13">-&gt;</operator><name pos:start="195:14" pos:end="195:22">cid_table</name><operator pos:start="195:23" pos:end="195:24">-&gt;</operator><name pos:start="195:25" pos:end="195:29">width</name></name> <operator pos:start="195:31" pos:end="195:32">!=</operator> <name pos:start="195:34" pos:end="195:47">DNXHD_VARIABLE</name></expr>)</condition> <block pos:start="195:50" pos:end="205:5">{<block_content pos:start="197:9" pos:end="203:43">

        <expr_stmt pos:start="197:9" pos:end="201:58"><expr pos:start="197:9" pos:end="201:57"><call pos:start="197:9" pos:end="201:57"><name pos:start="197:9" pos:end="197:17">av_reduce</name><argument_list pos:start="197:18" pos:end="201:57">(<argument pos:start="197:19" pos:end="197:54"><expr pos:start="197:19" pos:end="197:54"><operator pos:start="197:19" pos:end="197:19">&amp;</operator><name pos:start="197:20" pos:end="197:54"><name pos:start="197:20" pos:end="197:22">ctx</name><operator pos:start="197:23" pos:end="197:24">-&gt;</operator><name pos:start="197:25" pos:end="197:29">avctx</name><operator pos:start="197:30" pos:end="197:31">-&gt;</operator><name pos:start="197:32" pos:end="197:50">sample_aspect_ratio</name><operator pos:start="197:51" pos:end="197:51">.</operator><name pos:start="197:52" pos:end="197:54">num</name></name></expr></argument>,

                  <argument pos:start="199:19" pos:end="199:54"><expr pos:start="199:19" pos:end="199:54"><operator pos:start="199:19" pos:end="199:19">&amp;</operator><name pos:start="199:20" pos:end="199:54"><name pos:start="199:20" pos:end="199:22">ctx</name><operator pos:start="199:23" pos:end="199:24">-&gt;</operator><name pos:start="199:25" pos:end="199:29">avctx</name><operator pos:start="199:30" pos:end="199:31">-&gt;</operator><name pos:start="199:32" pos:end="199:50">sample_aspect_ratio</name><operator pos:start="199:51" pos:end="199:51">.</operator><name pos:start="199:52" pos:end="199:54">den</name></name></expr></argument>,

                  <argument pos:start="201:19" pos:end="201:28"><expr pos:start="201:19" pos:end="201:28"><name pos:start="201:19" pos:end="201:28"><name pos:start="201:19" pos:end="201:21">ctx</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:28">width</name></name></expr></argument>, <argument pos:start="201:31" pos:end="201:51"><expr pos:start="201:31" pos:end="201:51"><name pos:start="201:31" pos:end="201:51"><name pos:start="201:31" pos:end="201:33">ctx</name><operator pos:start="201:34" pos:end="201:35">-&gt;</operator><name pos:start="201:36" pos:end="201:44">cid_table</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:51">width</name></name></expr></argument>, <argument pos:start="201:54" pos:end="201:56"><expr pos:start="201:54" pos:end="201:56"><literal type="number" pos:start="201:54" pos:end="201:56">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:43"><expr pos:start="203:9" pos:end="203:42"><name pos:start="203:9" pos:end="203:18"><name pos:start="203:9" pos:end="203:11">ctx</name><operator pos:start="203:12" pos:end="203:13">-&gt;</operator><name pos:start="203:14" pos:end="203:18">width</name></name> <operator pos:start="203:20" pos:end="203:20">=</operator> <name pos:start="203:22" pos:end="203:42"><name pos:start="203:22" pos:end="203:24">ctx</name><operator pos:start="203:25" pos:end="203:26">-&gt;</operator><name pos:start="203:27" pos:end="203:35">cid_table</name><operator pos:start="203:36" pos:end="203:37">-&gt;</operator><name pos:start="203:38" pos:end="203:42">width</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="209:5" pos:end="217:5"><if pos:start="209:5" pos:end="217:5">if <condition pos:start="209:8" pos:end="209:52">(<expr pos:start="209:9" pos:end="209:51"><name pos:start="209:9" pos:end="209:16">buf_size</name> <operator pos:start="209:18" pos:end="209:18">&lt;</operator> <name pos:start="209:20" pos:end="209:51"><name pos:start="209:20" pos:end="209:22">ctx</name><operator pos:start="209:23" pos:end="209:24">-&gt;</operator><name pos:start="209:25" pos:end="209:33">cid_table</name><operator pos:start="209:34" pos:end="209:35">-&gt;</operator><name pos:start="209:36" pos:end="209:51">coding_unit_size</name></name></expr>)</condition> <block pos:start="209:54" pos:end="217:5">{<block_content pos:start="211:9" pos:end="215:35">

        <expr_stmt pos:start="211:9" pos:end="213:59"><expr pos:start="211:9" pos:end="213:58"><call pos:start="211:9" pos:end="213:58"><name pos:start="211:9" pos:end="211:14">av_log</name><argument_list pos:start="211:15" pos:end="213:58">(<argument pos:start="211:16" pos:end="211:25"><expr pos:start="211:16" pos:end="211:25"><name pos:start="211:16" pos:end="211:25"><name pos:start="211:16" pos:end="211:18">ctx</name><operator pos:start="211:19" pos:end="211:20">-&gt;</operator><name pos:start="211:21" pos:end="211:25">avctx</name></name></expr></argument>, <argument pos:start="211:28" pos:end="211:39"><expr pos:start="211:28" pos:end="211:39"><name pos:start="211:28" pos:end="211:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="211:42" pos:end="211:76"><expr pos:start="211:42" pos:end="211:76"><literal type="string" pos:start="211:42" pos:end="211:76">"incorrect frame size (%d &lt; %d).\n"</literal></expr></argument>,

               <argument pos:start="213:16" pos:end="213:23"><expr pos:start="213:16" pos:end="213:23"><name pos:start="213:16" pos:end="213:23">buf_size</name></expr></argument>, <argument pos:start="213:26" pos:end="213:57"><expr pos:start="213:26" pos:end="213:57"><name pos:start="213:26" pos:end="213:57"><name pos:start="213:26" pos:end="213:28">ctx</name><operator pos:start="213:29" pos:end="213:30">-&gt;</operator><name pos:start="213:31" pos:end="213:39">cid_table</name><operator pos:start="213:40" pos:end="213:41">-&gt;</operator><name pos:start="213:42" pos:end="213:57">coding_unit_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="215:9" pos:end="215:35">return <expr pos:start="215:16" pos:end="215:34"><name pos:start="215:16" pos:end="215:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:43"><expr pos:start="221:5" pos:end="221:42"><name pos:start="221:5" pos:end="221:17"><name pos:start="221:5" pos:end="221:7">ctx</name><operator pos:start="221:8" pos:end="221:9">-&gt;</operator><name pos:start="221:10" pos:end="221:17">mb_width</name></name>  <operator pos:start="221:20" pos:end="221:20">=</operator> <operator pos:start="221:22" pos:end="221:22">(</operator><name pos:start="221:23" pos:end="221:32"><name pos:start="221:23" pos:end="221:25">ctx</name><operator pos:start="221:26" pos:end="221:27">-&gt;</operator><name pos:start="221:28" pos:end="221:32">width</name></name> <operator pos:start="221:34" pos:end="221:34">+</operator> <literal type="number" pos:start="221:36" pos:end="221:37">15</literal><operator pos:start="221:38" pos:end="221:38">)</operator><operator pos:start="221:39" pos:end="221:40">&gt;&gt;</operator> <literal type="number" pos:start="221:42" pos:end="221:42">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:32"><expr pos:start="223:5" pos:end="223:31"><name pos:start="223:5" pos:end="223:18"><name pos:start="223:5" pos:end="223:7">ctx</name><operator pos:start="223:8" pos:end="223:9">-&gt;</operator><name pos:start="223:10" pos:end="223:18">mb_height</name></name> <operator pos:start="223:20" pos:end="223:20">=</operator> <name pos:start="223:22" pos:end="223:31"><name pos:start="223:22" pos:end="223:24">buf</name><index pos:start="223:25" pos:end="223:31">[<expr pos:start="223:26" pos:end="223:30"><literal type="number" pos:start="223:26" pos:end="223:30">0x16d</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="227:5" pos:end="229:26"><if pos:start="227:5" pos:end="229:26">if <condition pos:start="227:8" pos:end="227:77">(<expr pos:start="227:9" pos:end="227:76"><operator pos:start="227:9" pos:end="227:9">(</operator><name pos:start="227:10" pos:end="227:20"><name pos:start="227:10" pos:end="227:12">ctx</name><operator pos:start="227:13" pos:end="227:14">-&gt;</operator><name pos:start="227:15" pos:end="227:20">height</name></name> <operator pos:start="227:22" pos:end="227:22">+</operator> <literal type="number" pos:start="227:24" pos:end="227:25">15</literal><operator pos:start="227:26" pos:end="227:26">)</operator> <operator pos:start="227:28" pos:end="227:29">&gt;&gt;</operator> <literal type="number" pos:start="227:31" pos:end="227:31">4</literal> <operator pos:start="227:33" pos:end="227:34">==</operator> <name pos:start="227:36" pos:end="227:49"><name pos:start="227:36" pos:end="227:38">ctx</name><operator pos:start="227:39" pos:end="227:40">-&gt;</operator><name pos:start="227:41" pos:end="227:49">mb_height</name></name> <operator pos:start="227:51" pos:end="227:52">&amp;&amp;</operator> <name pos:start="227:54" pos:end="227:76"><name pos:start="227:54" pos:end="227:58">frame</name><operator pos:start="227:59" pos:end="227:60">-&gt;</operator><name pos:start="227:61" pos:end="227:76">interlaced_frame</name></name></expr>)</condition><block type="pseudo" pos:start="229:9" pos:end="229:26"><block_content pos:start="229:9" pos:end="229:26">

        <expr_stmt pos:start="229:9" pos:end="229:26"><expr pos:start="229:9" pos:end="229:25"><name pos:start="229:9" pos:end="229:19"><name pos:start="229:9" pos:end="229:11">ctx</name><operator pos:start="229:12" pos:end="229:13">-&gt;</operator><name pos:start="229:14" pos:end="229:19">height</name></name> <operator pos:start="229:21" pos:end="229:23">&lt;&lt;=</operator> <literal type="number" pos:start="229:25" pos:end="229:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="237:49"><expr pos:start="233:5" pos:end="237:48"><call pos:start="233:5" pos:end="237:48"><name pos:start="233:5" pos:end="233:10">av_log</name><argument_list pos:start="233:11" pos:end="237:48">(<argument pos:start="233:12" pos:end="233:21"><expr pos:start="233:12" pos:end="233:21"><name pos:start="233:12" pos:end="233:21"><name pos:start="233:12" pos:end="233:14">ctx</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:21">avctx</name></name></expr></argument>, <argument pos:start="233:24" pos:end="233:37"><expr pos:start="233:24" pos:end="233:37"><name pos:start="233:24" pos:end="233:37">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="233:40" pos:end="233:79"><expr pos:start="233:40" pos:end="233:79"><literal type="string" pos:start="233:40" pos:end="233:79">"%dx%d, 4:%s %d bits, MBAFF=%d ACT=%d\n"</literal></expr></argument>,

           <argument pos:start="235:12" pos:end="235:21"><expr pos:start="235:12" pos:end="235:21"><name pos:start="235:12" pos:end="235:21"><name pos:start="235:12" pos:end="235:14">ctx</name><operator pos:start="235:15" pos:end="235:16">-&gt;</operator><name pos:start="235:17" pos:end="235:21">width</name></name></expr></argument>, <argument pos:start="235:24" pos:end="235:34"><expr pos:start="235:24" pos:end="235:34"><name pos:start="235:24" pos:end="235:34"><name pos:start="235:24" pos:end="235:26">ctx</name><operator pos:start="235:27" pos:end="235:28">-&gt;</operator><name pos:start="235:29" pos:end="235:34">height</name></name></expr></argument>, <argument pos:start="235:37" pos:end="235:63"><expr pos:start="235:37" pos:end="235:63"><ternary pos:start="235:37" pos:end="235:63"><condition pos:start="235:37" pos:end="235:49"><expr pos:start="235:37" pos:end="235:47"><name pos:start="235:37" pos:end="235:47"><name pos:start="235:37" pos:end="235:39">ctx</name><operator pos:start="235:40" pos:end="235:41">-&gt;</operator><name pos:start="235:42" pos:end="235:47">is_444</name></name></expr> ?</condition><then pos:start="235:51" pos:end="235:55"> <expr pos:start="235:51" pos:end="235:55"><literal type="string" pos:start="235:51" pos:end="235:55">"4:4"</literal></expr> </then><else pos:start="235:57" pos:end="235:63">: <expr pos:start="235:59" pos:end="235:63"><literal type="string" pos:start="235:59" pos:end="235:63">"2:2"</literal></expr></else></ternary></expr></argument>,

           <argument pos:start="237:12" pos:end="237:25"><expr pos:start="237:12" pos:end="237:25"><name pos:start="237:12" pos:end="237:25"><name pos:start="237:12" pos:end="237:14">ctx</name><operator pos:start="237:15" pos:end="237:16">-&gt;</operator><name pos:start="237:17" pos:end="237:25">bit_depth</name></name></expr></argument>, <argument pos:start="237:28" pos:end="237:37"><expr pos:start="237:28" pos:end="237:37"><name pos:start="237:28" pos:end="237:37"><name pos:start="237:28" pos:end="237:30">ctx</name><operator pos:start="237:31" pos:end="237:32">-&gt;</operator><name pos:start="237:33" pos:end="237:37">mbaff</name></name></expr></argument>, <argument pos:start="237:40" pos:end="237:47"><expr pos:start="237:40" pos:end="237:47"><name pos:start="237:40" pos:end="237:47"><name pos:start="237:40" pos:end="237:42">ctx</name><operator pos:start="237:43" pos:end="237:44">-&gt;</operator><name pos:start="237:45" pos:end="237:47">act</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="241:5" pos:end="241:57">// Newer format supports variable mb_scan_index sizes</comment>

    <if_stmt pos:start="243:5" pos:end="263:5"><if pos:start="243:5" pos:end="247:5">if <condition pos:start="243:8" pos:end="243:42">(<expr pos:start="243:9" pos:end="243:41"><operator pos:start="243:9" pos:end="243:9">!</operator><call pos:start="243:10" pos:end="243:41"><name pos:start="243:10" pos:end="243:15">memcmp</name><argument_list pos:start="243:16" pos:end="243:41">(<argument pos:start="243:17" pos:end="243:19"><expr pos:start="243:17" pos:end="243:19"><name pos:start="243:17" pos:end="243:19">buf</name></expr></argument>, <argument pos:start="243:22" pos:end="243:37"><expr pos:start="243:22" pos:end="243:37"><name pos:start="243:22" pos:end="243:37">header_prefixhr2</name></expr></argument>, <argument pos:start="243:40" pos:end="243:40"><expr pos:start="243:40" pos:end="243:40"><literal type="number" pos:start="243:40" pos:end="243:40">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="243:44" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:57">

        <expr_stmt pos:start="245:9" pos:end="245:57"><expr pos:start="245:9" pos:end="245:56"><name pos:start="245:9" pos:end="245:24"><name pos:start="245:9" pos:end="245:11">ctx</name><operator pos:start="245:12" pos:end="245:13">-&gt;</operator><name pos:start="245:14" pos:end="245:24">data_offset</name></name> <operator pos:start="245:26" pos:end="245:26">=</operator> <literal type="number" pos:start="245:28" pos:end="245:34">0x170</literal> <operator pos:start="245:34" pos:end="245:34">+</operator> <operator pos:start="245:36" pos:end="245:36">(</operator><name pos:start="245:37" pos:end="245:50"><name pos:start="245:37" pos:end="245:39">ctx</name><operator pos:start="245:40" pos:end="245:41">-&gt;</operator><name pos:start="245:42" pos:end="245:50">mb_height</name></name> <operator pos:start="245:52" pos:end="245:53">&lt;&lt;</operator> <literal type="number" pos:start="245:55" pos:end="245:55">2</literal><operator pos:start="245:56" pos:end="245:56">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="247:7" pos:end="263:5">else <block pos:start="247:12" pos:end="263:5">{<block_content pos:start="249:9" pos:end="261:33">

        <if_stmt pos:start="249:9" pos:end="259:9"><if pos:start="249:9" pos:end="259:9">if <condition pos:start="249:12" pos:end="251:82">(<expr pos:start="249:13" pos:end="251:81"><name pos:start="249:13" pos:end="249:26"><name pos:start="249:13" pos:end="249:15">ctx</name><operator pos:start="249:16" pos:end="249:17">-&gt;</operator><name pos:start="249:18" pos:end="249:26">mb_height</name></name> <operator pos:start="249:28" pos:end="249:28">&gt;</operator> <literal type="number" pos:start="249:30" pos:end="249:31">68</literal> <operator pos:start="249:33" pos:end="249:34">||</operator>

            <operator pos:start="251:13" pos:end="251:13">(</operator><name pos:start="251:14" pos:end="251:27"><name pos:start="251:14" pos:end="251:16">ctx</name><operator pos:start="251:17" pos:end="251:18">-&gt;</operator><name pos:start="251:19" pos:end="251:27">mb_height</name></name> <operator pos:start="251:29" pos:end="251:30">&lt;&lt;</operator> <name pos:start="251:32" pos:end="251:54"><name pos:start="251:32" pos:end="251:36">frame</name><operator pos:start="251:37" pos:end="251:38">-&gt;</operator><name pos:start="251:39" pos:end="251:54">interlaced_frame</name></name><operator pos:start="251:55" pos:end="251:55">)</operator> <operator pos:start="251:57" pos:end="251:57">&gt;</operator> <operator pos:start="251:59" pos:end="251:59">(</operator><name pos:start="251:60" pos:end="251:70"><name pos:start="251:60" pos:end="251:62">ctx</name><operator pos:start="251:63" pos:end="251:64">-&gt;</operator><name pos:start="251:65" pos:end="251:70">height</name></name> <operator pos:start="251:72" pos:end="251:72">+</operator> <literal type="number" pos:start="251:74" pos:end="251:75">15</literal><operator pos:start="251:76" pos:end="251:76">)</operator> <operator pos:start="251:78" pos:end="251:79">&gt;&gt;</operator> <literal type="number" pos:start="251:81" pos:end="251:81">4</literal></expr>)</condition> <block pos:start="251:84" pos:end="259:9">{<block_content pos:start="253:13" pos:end="257:39">

            <expr_stmt pos:start="253:13" pos:end="255:62"><expr pos:start="253:13" pos:end="255:61"><call pos:start="253:13" pos:end="255:61"><name pos:start="253:13" pos:end="253:18">av_log</name><argument_list pos:start="253:19" pos:end="255:61">(<argument pos:start="253:20" pos:end="253:29"><expr pos:start="253:20" pos:end="253:29"><name pos:start="253:20" pos:end="253:29"><name pos:start="253:20" pos:end="253:22">ctx</name><operator pos:start="253:23" pos:end="253:24">-&gt;</operator><name pos:start="253:25" pos:end="253:29">avctx</name></name></expr></argument>, <argument pos:start="253:32" pos:end="253:43"><expr pos:start="253:32" pos:end="253:43"><name pos:start="253:32" pos:end="253:43">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="255:20" pos:end="255:44"><expr pos:start="255:20" pos:end="255:44"><literal type="string" pos:start="255:20" pos:end="255:44">"mb height too big: %d\n"</literal></expr></argument>, <argument pos:start="255:47" pos:end="255:60"><expr pos:start="255:47" pos:end="255:60"><name pos:start="255:47" pos:end="255:60"><name pos:start="255:47" pos:end="255:49">ctx</name><operator pos:start="255:50" pos:end="255:51">-&gt;</operator><name pos:start="255:52" pos:end="255:60">mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="257:13" pos:end="257:39">return <expr pos:start="257:20" pos:end="257:38"><name pos:start="257:20" pos:end="257:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:33"><expr pos:start="261:9" pos:end="261:32"><name pos:start="261:9" pos:end="261:24"><name pos:start="261:9" pos:end="261:11">ctx</name><operator pos:start="261:12" pos:end="261:13">-&gt;</operator><name pos:start="261:14" pos:end="261:24">data_offset</name></name> <operator pos:start="261:26" pos:end="261:26">=</operator> <literal type="number" pos:start="261:28" pos:end="261:32">0x280</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="267:5" pos:end="275:5"><if pos:start="267:5" pos:end="275:5">if <condition pos:start="267:8" pos:end="267:36">(<expr pos:start="267:9" pos:end="267:35"><name pos:start="267:9" pos:end="267:16">buf_size</name> <operator pos:start="267:18" pos:end="267:18">&lt;</operator> <name pos:start="267:20" pos:end="267:35"><name pos:start="267:20" pos:end="267:22">ctx</name><operator pos:start="267:23" pos:end="267:24">-&gt;</operator><name pos:start="267:25" pos:end="267:35">data_offset</name></name></expr>)</condition> <block pos:start="267:38" pos:end="275:5">{<block_content pos:start="269:9" pos:end="273:35">

        <expr_stmt pos:start="269:9" pos:end="271:76"><expr pos:start="269:9" pos:end="271:75"><call pos:start="269:9" pos:end="271:75"><name pos:start="269:9" pos:end="269:14">av_log</name><argument_list pos:start="269:15" pos:end="271:75">(<argument pos:start="269:16" pos:end="269:25"><expr pos:start="269:16" pos:end="269:25"><name pos:start="269:16" pos:end="269:25"><name pos:start="269:16" pos:end="269:18">ctx</name><operator pos:start="269:19" pos:end="269:20">-&gt;</operator><name pos:start="269:21" pos:end="269:25">avctx</name></name></expr></argument>, <argument pos:start="269:28" pos:end="269:39"><expr pos:start="269:28" pos:end="269:39"><name pos:start="269:28" pos:end="269:39">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="271:16" pos:end="271:46"><expr pos:start="271:16" pos:end="271:46"><literal type="string" pos:start="271:16" pos:end="271:46">"buffer too small (%d &lt; %d).\n"</literal></expr></argument>, <argument pos:start="271:49" pos:end="271:56"><expr pos:start="271:49" pos:end="271:56"><name pos:start="271:49" pos:end="271:56">buf_size</name></expr></argument>, <argument pos:start="271:59" pos:end="271:74"><expr pos:start="271:59" pos:end="271:74"><name pos:start="271:59" pos:end="271:74"><name pos:start="271:59" pos:end="271:61">ctx</name><operator pos:start="271:62" pos:end="271:63">-&gt;</operator><name pos:start="271:64" pos:end="271:74">data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="273:9" pos:end="273:35">return <expr pos:start="273:16" pos:end="273:34"><name pos:start="273:16" pos:end="273:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="279:5" pos:end="291:5"><if pos:start="279:5" pos:end="291:5">if <condition pos:start="279:8" pos:end="279:40">(<expr pos:start="279:9" pos:end="279:39"><name pos:start="279:9" pos:end="279:22"><name pos:start="279:9" pos:end="279:11">ctx</name><operator pos:start="279:12" pos:end="279:13">-&gt;</operator><name pos:start="279:14" pos:end="279:22">mb_height</name></name> <operator pos:start="279:24" pos:end="279:25">!=</operator> <name pos:start="279:27" pos:end="279:39">old_mb_height</name></expr>)</condition> <block pos:start="279:42" pos:end="291:5">{<block_content pos:start="281:9" pos:end="289:35">

        <expr_stmt pos:start="281:9" pos:end="281:38"><expr pos:start="281:9" pos:end="281:37"><call pos:start="281:9" pos:end="281:37"><name pos:start="281:9" pos:end="281:16">av_freep</name><argument_list pos:start="281:17" pos:end="281:37">(<argument pos:start="281:18" pos:end="281:36"><expr pos:start="281:18" pos:end="281:36"><operator pos:start="281:18" pos:end="281:18">&amp;</operator><name pos:start="281:19" pos:end="281:36"><name pos:start="281:19" pos:end="281:21">ctx</name><operator pos:start="281:22" pos:end="281:23">-&gt;</operator><name pos:start="281:24" pos:end="281:36">mb_scan_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="285:9" pos:end="285:80"><expr pos:start="285:9" pos:end="285:79"><name pos:start="285:9" pos:end="285:26"><name pos:start="285:9" pos:end="285:11">ctx</name><operator pos:start="285:12" pos:end="285:13">-&gt;</operator><name pos:start="285:14" pos:end="285:26">mb_scan_index</name></name> <operator pos:start="285:28" pos:end="285:28">=</operator> <call pos:start="285:30" pos:end="285:79"><name pos:start="285:30" pos:end="285:45">av_mallocz_array</name><argument_list pos:start="285:46" pos:end="285:79">(<argument pos:start="285:47" pos:end="285:60"><expr pos:start="285:47" pos:end="285:60"><name pos:start="285:47" pos:end="285:60"><name pos:start="285:47" pos:end="285:49">ctx</name><operator pos:start="285:50" pos:end="285:51">-&gt;</operator><name pos:start="285:52" pos:end="285:60">mb_height</name></name></expr></argument>, <argument pos:start="285:63" pos:end="285:78"><expr pos:start="285:63" pos:end="285:78"><sizeof pos:start="285:63" pos:end="285:78">sizeof<argument_list pos:start="285:69" pos:end="285:78">(<argument pos:start="285:70" pos:end="285:77"><expr pos:start="285:70" pos:end="285:77"><name pos:start="285:70" pos:end="285:77">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="287:9" pos:end="289:35"><if pos:start="287:9" pos:end="289:35">if <condition pos:start="287:12" pos:end="287:32">(<expr pos:start="287:13" pos:end="287:31"><operator pos:start="287:13" pos:end="287:13">!</operator><name pos:start="287:14" pos:end="287:31"><name pos:start="287:14" pos:end="287:16">ctx</name><operator pos:start="287:17" pos:end="287:18">-&gt;</operator><name pos:start="287:19" pos:end="287:31">mb_scan_index</name></name></expr>)</condition><block type="pseudo" pos:start="289:13" pos:end="289:35"><block_content pos:start="289:13" pos:end="289:35">

            <return pos:start="289:13" pos:end="289:35">return <expr pos:start="289:20" pos:end="289:34"><call pos:start="289:20" pos:end="289:34"><name pos:start="289:20" pos:end="289:26">AVERROR</name><argument_list pos:start="289:27" pos:end="289:34">(<argument pos:start="289:28" pos:end="289:33"><expr pos:start="289:28" pos:end="289:33"><name pos:start="289:28" pos:end="289:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="295:5" pos:end="313:5">for <control pos:start="295:9" pos:end="295:40">(<init pos:start="295:10" pos:end="295:15"><expr pos:start="295:10" pos:end="295:14"><name pos:start="295:10" pos:end="295:10">i</name> <operator pos:start="295:12" pos:end="295:12">=</operator> <literal type="number" pos:start="295:14" pos:end="295:14">0</literal></expr>;</init> <condition pos:start="295:17" pos:end="295:35"><expr pos:start="295:17" pos:end="295:34"><name pos:start="295:17" pos:end="295:17">i</name> <operator pos:start="295:19" pos:end="295:19">&lt;</operator> <name pos:start="295:21" pos:end="295:34"><name pos:start="295:21" pos:end="295:23">ctx</name><operator pos:start="295:24" pos:end="295:25">-&gt;</operator><name pos:start="295:26" pos:end="295:34">mb_height</name></name></expr>;</condition> <incr pos:start="295:37" pos:end="295:39"><expr pos:start="295:37" pos:end="295:39"><name pos:start="295:37" pos:end="295:37">i</name><operator pos:start="295:38" pos:end="295:39">++</operator></expr></incr>)</control> <block pos:start="295:42" pos:end="313:5">{<block_content pos:start="297:9" pos:end="311:9">

        <expr_stmt pos:start="297:9" pos:end="297:64"><expr pos:start="297:9" pos:end="297:63"><name pos:start="297:9" pos:end="297:29"><name pos:start="297:9" pos:end="297:11">ctx</name><operator pos:start="297:12" pos:end="297:13">-&gt;</operator><name pos:start="297:14" pos:end="297:26">mb_scan_index</name><index pos:start="297:27" pos:end="297:29">[<expr pos:start="297:28" pos:end="297:28"><name pos:start="297:28" pos:end="297:28">i</name></expr>]</index></name> <operator pos:start="297:31" pos:end="297:31">=</operator> <call pos:start="297:33" pos:end="297:63"><name pos:start="297:33" pos:end="297:39">AV_RB32</name><argument_list pos:start="297:40" pos:end="297:63">(<argument pos:start="297:41" pos:end="297:62"><expr pos:start="297:41" pos:end="297:62"><name pos:start="297:41" pos:end="297:43">buf</name> <operator pos:start="297:45" pos:end="297:45">+</operator> <literal type="number" pos:start="297:47" pos:end="297:53">0x170</literal> <operator pos:start="297:53" pos:end="297:53">+</operator> <operator pos:start="297:55" pos:end="297:55">(</operator><name pos:start="297:56" pos:end="297:56">i</name> <operator pos:start="297:58" pos:end="297:59">&lt;&lt;</operator> <literal type="number" pos:start="297:61" pos:end="297:61">2</literal><operator pos:start="297:62" pos:end="297:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:106"><expr pos:start="299:9" pos:end="299:105"><call pos:start="299:9" pos:end="299:105"><name pos:start="299:9" pos:end="299:15">ff_dlog</name><argument_list pos:start="299:16" pos:end="299:105">(<argument pos:start="299:17" pos:end="299:26"><expr pos:start="299:17" pos:end="299:26"><name pos:start="299:17" pos:end="299:26"><name pos:start="299:17" pos:end="299:19">ctx</name><operator pos:start="299:20" pos:end="299:21">-&gt;</operator><name pos:start="299:22" pos:end="299:26">avctx</name></name></expr></argument>, <argument pos:start="299:29" pos:end="299:60"><expr pos:start="299:29" pos:end="299:60"><literal type="string" pos:start="299:29" pos:end="299:60">"mb scan index %d, pos %d: %u\n"</literal></expr></argument>, <argument pos:start="299:63" pos:end="299:63"><expr pos:start="299:63" pos:end="299:63"><name pos:start="299:63" pos:end="299:63">i</name></expr></argument>, <argument pos:start="299:66" pos:end="299:81"><expr pos:start="299:66" pos:end="299:81"><literal type="number" pos:start="299:66" pos:end="299:72">0x170</literal> <operator pos:start="299:72" pos:end="299:72">+</operator> <operator pos:start="299:74" pos:end="299:74">(</operator><name pos:start="299:75" pos:end="299:75">i</name> <operator pos:start="299:77" pos:end="299:78">&lt;&lt;</operator> <literal type="number" pos:start="299:80" pos:end="299:80">2</literal><operator pos:start="299:81" pos:end="299:81">)</operator></expr></argument>, <argument pos:start="299:84" pos:end="299:104"><expr pos:start="299:84" pos:end="299:104"><name pos:start="299:84" pos:end="299:104"><name pos:start="299:84" pos:end="299:86">ctx</name><operator pos:start="299:87" pos:end="299:88">-&gt;</operator><name pos:start="299:89" pos:end="299:101">mb_scan_index</name><index pos:start="299:102" pos:end="299:104">[<expr pos:start="299:103" pos:end="299:103"><name pos:start="299:103" pos:end="299:103">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="301:9" pos:end="311:9"><if pos:start="301:9" pos:end="311:9">if <condition pos:start="301:12" pos:end="301:64">(<expr pos:start="301:13" pos:end="301:63"><name pos:start="301:13" pos:end="301:20">buf_size</name> <operator pos:start="301:22" pos:end="301:22">-</operator> <name pos:start="301:24" pos:end="301:39"><name pos:start="301:24" pos:end="301:26">ctx</name><operator pos:start="301:27" pos:end="301:28">-&gt;</operator><name pos:start="301:29" pos:end="301:39">data_offset</name></name> <operator pos:start="301:41" pos:end="301:41">&lt;</operator> <name pos:start="301:43" pos:end="301:63"><name pos:start="301:43" pos:end="301:45">ctx</name><operator pos:start="301:46" pos:end="301:47">-&gt;</operator><name pos:start="301:48" pos:end="301:60">mb_scan_index</name><index pos:start="301:61" pos:end="301:63">[<expr pos:start="301:62" pos:end="301:62"><name pos:start="301:62" pos:end="301:62">i</name></expr>]</index></name></expr>)</condition> <block pos:start="301:66" pos:end="311:9">{<block_content pos:start="303:13" pos:end="309:39">

            <expr_stmt pos:start="303:13" pos:end="307:71"><expr pos:start="303:13" pos:end="307:70"><call pos:start="303:13" pos:end="307:70"><name pos:start="303:13" pos:end="303:18">av_log</name><argument_list pos:start="303:19" pos:end="307:70">(<argument pos:start="303:20" pos:end="303:29"><expr pos:start="303:20" pos:end="303:29"><name pos:start="303:20" pos:end="303:29"><name pos:start="303:20" pos:end="303:22">ctx</name><operator pos:start="303:23" pos:end="303:24">-&gt;</operator><name pos:start="303:25" pos:end="303:29">avctx</name></name></expr></argument>, <argument pos:start="303:32" pos:end="303:43"><expr pos:start="303:32" pos:end="303:43"><name pos:start="303:32" pos:end="303:43">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="305:20" pos:end="305:56"><expr pos:start="305:20" pos:end="305:56"><literal type="string" pos:start="305:20" pos:end="305:56">"invalid mb scan index (%u vs %u).\n"</literal></expr></argument>,

                   <argument pos:start="307:20" pos:end="307:40"><expr pos:start="307:20" pos:end="307:40"><name pos:start="307:20" pos:end="307:40"><name pos:start="307:20" pos:end="307:22">ctx</name><operator pos:start="307:23" pos:end="307:24">-&gt;</operator><name pos:start="307:25" pos:end="307:37">mb_scan_index</name><index pos:start="307:38" pos:end="307:40">[<expr pos:start="307:39" pos:end="307:39"><name pos:start="307:39" pos:end="307:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="307:43" pos:end="307:69"><expr pos:start="307:43" pos:end="307:69"><name pos:start="307:43" pos:end="307:50">buf_size</name> <operator pos:start="307:52" pos:end="307:52">-</operator> <name pos:start="307:54" pos:end="307:69"><name pos:start="307:54" pos:end="307:56">ctx</name><operator pos:start="307:57" pos:end="307:58">-&gt;</operator><name pos:start="307:59" pos:end="307:69">data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="309:13" pos:end="309:39">return <expr pos:start="309:20" pos:end="309:38"><name pos:start="309:20" pos:end="309:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="317:5" pos:end="317:13">return <expr pos:start="317:12" pos:end="317:12"><literal type="number" pos:start="317:12" pos:end="317:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
