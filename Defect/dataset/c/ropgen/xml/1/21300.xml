<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21300.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">tlb_flush_by_mmuidx_async_work</name><parameter_list pos:start="1:43" pos:end="1:79">(<parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">CPUState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">cpu</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:78"><decl pos:start="1:59" pos:end="1:78"><type pos:start="1:59" pos:end="1:78"><name pos:start="1:59" pos:end="1:73">run_on_cpu_data</name></type> <name pos:start="1:75" pos:end="1:78">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:16">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CPUArchState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">env</name> <init pos:start="5:23" pos:end="5:36">= <expr pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">long</name></type> <name pos:start="7:19" pos:end="7:33">mmu_idx_bitmask</name> <init pos:start="7:35" pos:end="7:49">= <expr pos:start="7:37" pos:end="7:49"><name pos:start="7:37" pos:end="7:49"><name pos:start="7:37" pos:end="7:40">data</name><operator pos:start="7:41" pos:end="7:41">.</operator><name pos:start="7:42" pos:end="7:49">host_int</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">mmu_idx</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:28"><expr pos:start="13:5" pos:end="13:27"><call pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:22">assert_cpu_is_self</name><argument_list pos:start="13:23" pos:end="13:27">(<argument pos:start="13:24" pos:end="13:26"><expr pos:start="13:24" pos:end="13:26"><name pos:start="13:24" pos:end="13:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:14"><expr pos:start="17:5" pos:end="17:13"><call pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">tb_lock</name><argument_list pos:start="17:12" pos:end="17:13">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:59"><expr pos:start="21:5" pos:end="21:58"><call pos:start="21:5" pos:end="21:58"><name pos:start="21:5" pos:end="21:13">tlb_debug</name><argument_list pos:start="21:14" pos:end="21:58">(<argument pos:start="21:15" pos:end="21:40"><expr pos:start="21:15" pos:end="21:40"><literal type="string" pos:start="21:15" pos:end="21:40">"start: mmu_idx:0x%04lx\n"</literal></expr></argument>, <argument pos:start="21:43" pos:end="21:57"><expr pos:start="21:43" pos:end="21:57"><name pos:start="21:43" pos:end="21:57">mmu_idx_bitmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="25:5" pos:end="41:5">for <control pos:start="25:9" pos:end="25:56">(<init pos:start="25:10" pos:end="25:21"><expr pos:start="25:10" pos:end="25:20"><name pos:start="25:10" pos:end="25:16">mmu_idx</name> <operator pos:start="25:18" pos:end="25:18">=</operator> <literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>;</init> <condition pos:start="25:23" pos:end="25:45"><expr pos:start="25:23" pos:end="25:44"><name pos:start="25:23" pos:end="25:29">mmu_idx</name> <operator pos:start="25:31" pos:end="25:31">&lt;</operator> <name pos:start="25:33" pos:end="25:44">NB_MMU_MODES</name></expr>;</condition> <incr pos:start="25:47" pos:end="25:55"><expr pos:start="25:47" pos:end="25:55"><name pos:start="25:47" pos:end="25:53">mmu_idx</name><operator pos:start="25:54" pos:end="25:55">++</operator></expr></incr>)</control> <block pos:start="25:58" pos:end="41:5">{<block_content pos:start="29:9" pos:end="39:9">



        <if_stmt pos:start="29:9" pos:end="39:9"><if pos:start="29:9" pos:end="39:9">if <condition pos:start="29:12" pos:end="29:48">(<expr pos:start="29:13" pos:end="29:47"><call pos:start="29:13" pos:end="29:47"><name pos:start="29:13" pos:end="29:20">test_bit</name><argument_list pos:start="29:21" pos:end="29:47">(<argument pos:start="29:22" pos:end="29:28"><expr pos:start="29:22" pos:end="29:28"><name pos:start="29:22" pos:end="29:28">mmu_idx</name></expr></argument>, <argument pos:start="29:31" pos:end="29:46"><expr pos:start="29:31" pos:end="29:46"><operator pos:start="29:31" pos:end="29:31">&amp;</operator><name pos:start="29:32" pos:end="29:46">mmu_idx_bitmask</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:50" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:79">

            <expr_stmt pos:start="31:13" pos:end="31:39"><expr pos:start="31:13" pos:end="31:38"><call pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:21">tlb_debug</name><argument_list pos:start="31:22" pos:end="31:38">(<argument pos:start="31:23" pos:end="31:28"><expr pos:start="31:23" pos:end="31:28"><literal type="string" pos:start="31:23" pos:end="31:28">"%d\n"</literal></expr></argument>, <argument pos:start="31:31" pos:end="31:37"><expr pos:start="31:31" pos:end="31:37"><name pos:start="31:31" pos:end="31:37">mmu_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="35:13" pos:end="35:75"><expr pos:start="35:13" pos:end="35:74"><call pos:start="35:13" pos:end="35:74"><name pos:start="35:13" pos:end="35:18">memset</name><argument_list pos:start="35:19" pos:end="35:74">(<argument pos:start="35:20" pos:end="35:42"><expr pos:start="35:20" pos:end="35:42"><name pos:start="35:20" pos:end="35:42"><name pos:start="35:20" pos:end="35:22">env</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:33">tlb_table</name><index pos:start="35:34" pos:end="35:42">[<expr pos:start="35:35" pos:end="35:41"><name pos:start="35:35" pos:end="35:41">mmu_idx</name></expr>]</index></name></expr></argument>, <argument pos:start="35:45" pos:end="35:46"><expr pos:start="35:45" pos:end="35:46"><operator pos:start="35:45" pos:end="35:45">-</operator><literal type="number" pos:start="35:46" pos:end="35:46">1</literal></expr></argument>, <argument pos:start="35:49" pos:end="35:73"><expr pos:start="35:49" pos:end="35:73"><sizeof pos:start="35:49" pos:end="35:73">sizeof<argument_list pos:start="35:55" pos:end="35:73">(<argument pos:start="35:56" pos:end="35:72"><expr pos:start="35:56" pos:end="35:72"><name pos:start="35:56" pos:end="35:72"><name pos:start="35:56" pos:end="35:58">env</name><operator pos:start="35:59" pos:end="35:60">-&gt;</operator><name pos:start="35:61" pos:end="35:69">tlb_table</name><index pos:start="35:70" pos:end="35:72">[<expr pos:start="35:71" pos:end="35:71"><literal type="number" pos:start="35:71" pos:end="35:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:79"><expr pos:start="37:13" pos:end="37:78"><call pos:start="37:13" pos:end="37:78"><name pos:start="37:13" pos:end="37:18">memset</name><argument_list pos:start="37:19" pos:end="37:78">(<argument pos:start="37:20" pos:end="37:44"><expr pos:start="37:20" pos:end="37:44"><name pos:start="37:20" pos:end="37:44"><name pos:start="37:20" pos:end="37:22">env</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:35">tlb_v_table</name><index pos:start="37:36" pos:end="37:44">[<expr pos:start="37:37" pos:end="37:43"><name pos:start="37:37" pos:end="37:43">mmu_idx</name></expr>]</index></name></expr></argument>, <argument pos:start="37:47" pos:end="37:48"><expr pos:start="37:47" pos:end="37:48"><operator pos:start="37:47" pos:end="37:47">-</operator><literal type="number" pos:start="37:48" pos:end="37:48">1</literal></expr></argument>, <argument pos:start="37:51" pos:end="37:77"><expr pos:start="37:51" pos:end="37:77"><sizeof pos:start="37:51" pos:end="37:77">sizeof<argument_list pos:start="37:57" pos:end="37:77">(<argument pos:start="37:58" pos:end="37:76"><expr pos:start="37:58" pos:end="37:76"><name pos:start="37:58" pos:end="37:76"><name pos:start="37:58" pos:end="37:60">env</name><operator pos:start="37:61" pos:end="37:62">-&gt;</operator><name pos:start="37:63" pos:end="37:73">tlb_v_table</name><index pos:start="37:74" pos:end="37:76">[<expr pos:start="37:75" pos:end="37:75"><literal type="number" pos:start="37:75" pos:end="37:75">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="45:5" pos:end="45:60"><expr pos:start="45:5" pos:end="45:59"><call pos:start="45:5" pos:end="45:59"><name pos:start="45:5" pos:end="45:10">memset</name><argument_list pos:start="45:11" pos:end="45:59">(<argument pos:start="45:12" pos:end="45:28"><expr pos:start="45:12" pos:end="45:28"><name pos:start="45:12" pos:end="45:28"><name pos:start="45:12" pos:end="45:14">cpu</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:28">tb_jmp_cache</name></name></expr></argument>, <argument pos:start="45:31" pos:end="45:31"><expr pos:start="45:31" pos:end="45:31"><literal type="number" pos:start="45:31" pos:end="45:31">0</literal></expr></argument>, <argument pos:start="45:34" pos:end="45:58"><expr pos:start="45:34" pos:end="45:58"><sizeof pos:start="45:34" pos:end="45:58">sizeof<argument_list pos:start="45:40" pos:end="45:58">(<argument pos:start="45:41" pos:end="45:57"><expr pos:start="45:41" pos:end="45:57"><name pos:start="45:41" pos:end="45:57"><name pos:start="45:41" pos:end="45:43">cpu</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:57">tb_jmp_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:24"><expr pos:start="49:5" pos:end="49:23"><call pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:13">tlb_debug</name><argument_list pos:start="49:14" pos:end="49:23">(<argument pos:start="49:15" pos:end="49:22"><expr pos:start="49:15" pos:end="49:22"><literal type="string" pos:start="49:15" pos:end="49:22">"done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:16"><expr pos:start="53:5" pos:end="53:15"><call pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:13">tb_unlock</name><argument_list pos:start="53:14" pos:end="53:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
