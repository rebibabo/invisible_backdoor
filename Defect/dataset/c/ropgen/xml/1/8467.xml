<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8467.c" pos:tabs="8"><function pos:start="1:1" pos:end="239:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">bareetraxfs_init</name> <parameter_list pos:start="1:23" pos:end="7:74">(<parameter pos:start="1:24" pos:end="1:42"><decl pos:start="1:24" pos:end="1:42"><type pos:start="1:24" pos:end="1:42"><name pos:start="1:24" pos:end="1:33">ram_addr_t</name></type> <name pos:start="1:35" pos:end="1:42">ram_size</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:46"><decl pos:start="3:24" pos:end="3:46"><type pos:start="3:24" pos:end="3:46"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:33">char</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:46">boot_device</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:50"><decl pos:start="5:24" pos:end="5:50"><type pos:start="5:24" pos:end="5:50"><specifier pos:start="5:24" pos:end="5:28">const</specifier> <name pos:start="5:30" pos:end="5:33">char</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:50">kernel_filename</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:78"><decl pos:start="5:53" pos:end="5:78"><type pos:start="5:53" pos:end="5:78"><specifier pos:start="5:53" pos:end="5:57">const</specifier> <name pos:start="5:59" pos:end="5:62">char</name> <modifier pos:start="5:64" pos:end="5:64">*</modifier></type><name pos:start="5:65" pos:end="5:78">kernel_cmdline</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:50"><decl pos:start="7:24" pos:end="7:50"><type pos:start="7:24" pos:end="7:50"><specifier pos:start="7:24" pos:end="7:28">const</specifier> <name pos:start="7:30" pos:end="7:33">char</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:50">initrd_filename</name></decl></parameter>, <parameter pos:start="7:53" pos:end="7:73"><decl pos:start="7:53" pos:end="7:73"><type pos:start="7:53" pos:end="7:73"><specifier pos:start="7:53" pos:end="7:57">const</specifier> <name pos:start="7:59" pos:end="7:62">char</name> <modifier pos:start="7:64" pos:end="7:64">*</modifier></type><name pos:start="7:65" pos:end="7:73">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="239:1">{<block_content pos:start="11:5" pos:end="237:41">

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">DeviceState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">SysBusDevice</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">qemu_irq</name></type> <name pos:start="17:14" pos:end="17:20"><name pos:start="17:14" pos:end="17:16">irq</name><index pos:start="17:17" pos:end="17:20">[<expr pos:start="17:18" pos:end="17:19"><literal type="number" pos:start="17:18" pos:end="17:19">30</literal></expr>]</index></name></decl>, <decl pos:start="17:23" pos:end="17:28"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:23" pos:end="17:28"><name pos:start="17:23" pos:end="17:25">nmi</name><index pos:start="17:26" pos:end="17:28">[<expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">2</literal></expr>]</index></name></decl>, <decl pos:start="17:31" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:12"><modifier pos:start="17:31" pos:end="17:31">*</modifier></type><name pos:start="17:32" pos:end="17:38">cpu_irq</name></decl>;</decl_stmt> 

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:22">etraxfs_dmac</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:53"><decl pos:start="21:5" pos:end="21:52"><type pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:29">etraxfs_dma_client</name></name> <modifier pos:start="21:31" pos:end="21:31">*</modifier></type><name pos:start="21:32" pos:end="21:37"><name pos:start="21:32" pos:end="21:34">eth</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><literal type="number" pos:start="21:36" pos:end="21:36">2</literal></expr>]</index></name> <init pos:start="21:39" pos:end="21:52">= <expr pos:start="21:41" pos:end="21:52"><block pos:start="21:41" pos:end="21:52">{<expr pos:start="21:42" pos:end="21:45"><name pos:start="21:42" pos:end="21:45">NULL</name></expr>, <expr pos:start="21:48" pos:end="21:51"><name pos:start="21:48" pos:end="21:51">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">DriveInfo</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:14">ram_addr_t</name></type> <name pos:start="29:16" pos:end="29:23">phys_ram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:26"><decl pos:start="31:5" pos:end="31:25"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:14">ram_addr_t</name></type> <name pos:start="31:16" pos:end="31:25">phys_flash</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:27"><decl pos:start="33:5" pos:end="33:26"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:14">ram_addr_t</name></type> <name pos:start="33:16" pos:end="33:26">phys_intmem</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:19">/* init CPUs */</comment>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:26">(<expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:17">cpu_model</name> <operator pos:start="39:19" pos:end="39:20">==</operator> <name pos:start="39:22" pos:end="39:25">NULL</name></expr>)</condition> <block pos:start="39:28" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:30">

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="string" pos:start="41:21" pos:end="41:29">"crisv32"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:7">env</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:29"><name pos:start="45:11" pos:end="45:18">cpu_init</name><argument_list pos:start="45:19" pos:end="45:29">(<argument pos:start="45:20" pos:end="45:28"><expr pos:start="45:20" pos:end="45:28"><name pos:start="45:20" pos:end="45:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><call pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:23">qemu_register_reset</name><argument_list pos:start="47:24" pos:end="47:44">(<argument pos:start="47:25" pos:end="47:38"><expr pos:start="47:25" pos:end="47:38"><name pos:start="47:25" pos:end="47:38">main_cpu_reset</name></expr></argument>, <argument pos:start="47:41" pos:end="47:43"><expr pos:start="47:41" pos:end="47:43"><name pos:start="47:41" pos:end="47:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:12">phys_ram</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:39"><name pos:start="53:16" pos:end="53:29">qemu_ram_alloc</name><argument_list pos:start="53:30" pos:end="53:39">(<argument pos:start="53:31" pos:end="53:38"><expr pos:start="53:31" pos:end="53:38"><name pos:start="53:31" pos:end="53:38">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:78"><expr pos:start="55:5" pos:end="55:77"><call pos:start="55:5" pos:end="55:77"><name pos:start="55:5" pos:end="55:32">cpu_register_physical_memory</name><argument_list pos:start="55:33" pos:end="55:77">(<argument pos:start="55:34" pos:end="55:43"><expr pos:start="55:34" pos:end="55:43"><literal type="number" pos:start="55:34" pos:end="55:43">0x40000000</literal></expr></argument>, <argument pos:start="55:46" pos:end="55:53"><expr pos:start="55:46" pos:end="55:53"><name pos:start="55:46" pos:end="55:53">ram_size</name></expr></argument>, <argument pos:start="55:56" pos:end="55:76"><expr pos:start="55:56" pos:end="55:76"><name pos:start="55:56" pos:end="55:63">phys_ram</name> <operator pos:start="55:65" pos:end="55:65">|</operator> <name pos:start="55:67" pos:end="55:76">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="61:27">/* The ETRAX-FS has 128Kb on chip ram, the docs refer to it as the 

       internal memory.  */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:46"><expr pos:start="63:5" pos:end="63:45"><name pos:start="63:5" pos:end="63:15">phys_intmem</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:45"><name pos:start="63:19" pos:end="63:32">qemu_ram_alloc</name><argument_list pos:start="63:33" pos:end="63:45">(<argument pos:start="63:34" pos:end="63:44"><expr pos:start="63:34" pos:end="63:44"><name pos:start="63:34" pos:end="63:44">INTMEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:59"><expr pos:start="65:5" pos:end="67:58"><call pos:start="65:5" pos:end="67:58"><name pos:start="65:5" pos:end="65:32">cpu_register_physical_memory</name><argument_list pos:start="65:33" pos:end="67:58">(<argument pos:start="65:34" pos:end="65:43"><expr pos:start="65:34" pos:end="65:43"><literal type="number" pos:start="65:34" pos:end="65:43">0x38000000</literal></expr></argument>, <argument pos:start="65:46" pos:end="65:56"><expr pos:start="65:46" pos:end="65:56"><name pos:start="65:46" pos:end="65:56">INTMEM_SIZE</name></expr></argument>,

                                 <argument pos:start="67:34" pos:end="67:57"><expr pos:start="67:34" pos:end="67:57"><name pos:start="67:34" pos:end="67:44">phys_intmem</name> <operator pos:start="67:46" pos:end="67:46">|</operator> <name pos:start="67:48" pos:end="67:57">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:14">phys_flash</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <call pos:start="73:18" pos:end="73:43"><name pos:start="73:18" pos:end="73:31">qemu_ram_alloc</name><argument_list pos:start="73:32" pos:end="73:43">(<argument pos:start="73:33" pos:end="73:42"><expr pos:start="73:33" pos:end="73:42"><name pos:start="73:33" pos:end="73:42">FLASH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:39"><expr pos:start="75:5" pos:end="75:38"><name pos:start="75:5" pos:end="75:9">dinfo</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <call pos:start="75:13" pos:end="75:38"><name pos:start="75:13" pos:end="75:21">drive_get</name><argument_list pos:start="75:22" pos:end="75:38">(<argument pos:start="75:23" pos:end="75:31"><expr pos:start="75:23" pos:end="75:31"><name pos:start="75:23" pos:end="75:31">IF_PFLASH</name></expr></argument>, <argument pos:start="75:34" pos:end="75:34"><expr pos:start="75:34" pos:end="75:34"><literal type="number" pos:start="75:34" pos:end="75:34">0</literal></expr></argument>, <argument pos:start="75:37" pos:end="75:37"><expr pos:start="75:37" pos:end="75:37"><literal type="number" pos:start="75:37" pos:end="75:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="85:40"><expr pos:start="77:5" pos:end="85:39"><call pos:start="77:5" pos:end="85:39"><name pos:start="77:5" pos:end="77:25">pflash_cfi02_register</name><argument_list pos:start="77:26" pos:end="85:39">(<argument pos:start="77:27" pos:end="77:29"><expr pos:start="77:27" pos:end="77:29"><literal type="number" pos:start="77:27" pos:end="77:29">0x0</literal></expr></argument>, <argument pos:start="77:32" pos:end="77:41"><expr pos:start="77:32" pos:end="77:41"><name pos:start="77:32" pos:end="77:41">phys_flash</name></expr></argument>,

                          <argument pos:start="79:27" pos:end="79:52"><expr pos:start="79:27" pos:end="79:52"><ternary pos:start="79:27" pos:end="79:52"><condition pos:start="79:27" pos:end="79:33"><expr pos:start="79:27" pos:end="79:31"><name pos:start="79:27" pos:end="79:31">dinfo</name></expr> ?</condition><then pos:start="79:35" pos:end="79:45"> <expr pos:start="79:35" pos:end="79:45"><name pos:start="79:35" pos:end="79:45"><name pos:start="79:35" pos:end="79:39">dinfo</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:45">bdrv</name></name></expr> </then><else pos:start="79:47" pos:end="79:52">: <expr pos:start="79:49" pos:end="79:52"><name pos:start="79:49" pos:end="79:52">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="79:55" pos:end="79:65"><expr pos:start="79:55" pos:end="79:65"><operator pos:start="79:55" pos:end="79:55">(</operator><literal type="number" pos:start="79:56" pos:end="79:57">64</literal> <operator pos:start="79:59" pos:end="79:59">*</operator> <literal type="number" pos:start="79:61" pos:end="79:64">1024</literal><operator pos:start="79:65" pos:end="79:65">)</operator></expr></argument>,

                          <argument pos:start="81:27" pos:end="81:42"><expr pos:start="81:27" pos:end="81:42"><name pos:start="81:27" pos:end="81:36">FLASH_SIZE</name> <operator pos:start="81:38" pos:end="81:39">&gt;&gt;</operator> <literal type="number" pos:start="81:41" pos:end="81:42">16</literal></expr></argument>,

                          <argument pos:start="83:27" pos:end="83:27"><expr pos:start="83:27" pos:end="83:27"><literal type="number" pos:start="83:27" pos:end="83:27">1</literal></expr></argument>, <argument pos:start="83:30" pos:end="83:30"><expr pos:start="83:30" pos:end="83:30"><literal type="number" pos:start="83:30" pos:end="83:30">2</literal></expr></argument>, <argument pos:start="83:33" pos:end="83:38"><expr pos:start="83:33" pos:end="83:38"><literal type="number" pos:start="83:33" pos:end="83:38">0x0000</literal></expr></argument>, <argument pos:start="83:41" pos:end="83:46"><expr pos:start="83:41" pos:end="83:46"><literal type="number" pos:start="83:41" pos:end="83:46">0x0000</literal></expr></argument>, <argument pos:start="83:49" pos:end="83:54"><expr pos:start="83:49" pos:end="83:54"><literal type="number" pos:start="83:49" pos:end="83:54">0x0000</literal></expr></argument>, <argument pos:start="83:57" pos:end="83:62"><expr pos:start="83:57" pos:end="83:62"><literal type="number" pos:start="83:57" pos:end="83:62">0x0000</literal></expr></argument>,

                          <argument pos:start="85:27" pos:end="85:31"><expr pos:start="85:27" pos:end="85:31"><literal type="number" pos:start="85:27" pos:end="85:31">0x555</literal></expr></argument>, <argument pos:start="85:34" pos:end="85:38"><expr pos:start="85:34" pos:end="85:38"><literal type="number" pos:start="85:34" pos:end="85:38">0x2aa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:37"><expr pos:start="87:5" pos:end="87:36"><name pos:start="87:5" pos:end="87:11">cpu_irq</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:36"><name pos:start="87:15" pos:end="87:31">cris_pic_init_cpu</name><argument_list pos:start="87:32" pos:end="87:36">(<argument pos:start="87:33" pos:end="87:35"><expr pos:start="87:33" pos:end="87:35"><name pos:start="87:33" pos:end="87:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:43"><expr pos:start="89:5" pos:end="89:42"><name pos:start="89:5" pos:end="89:7">dev</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:42"><name pos:start="89:11" pos:end="89:21">qdev_create</name><argument_list pos:start="89:22" pos:end="89:42">(<argument pos:start="89:23" pos:end="89:26"><expr pos:start="89:23" pos:end="89:26"><name pos:start="89:23" pos:end="89:26">NULL</name></expr></argument>, <argument pos:start="89:29" pos:end="89:41"><expr pos:start="89:29" pos:end="89:41"><literal type="string" pos:start="89:29" pos:end="89:41">"etraxfs,pic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="91:5" pos:end="91:74">/* FIXME: Is there a proper way to signal vectors to the CPU core?  */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:71"><expr pos:start="93:5" pos:end="93:70"><call pos:start="93:5" pos:end="93:70"><name pos:start="93:5" pos:end="93:21">qdev_prop_set_ptr</name><argument_list pos:start="93:22" pos:end="93:70">(<argument pos:start="93:23" pos:end="93:25"><expr pos:start="93:23" pos:end="93:25"><name pos:start="93:23" pos:end="93:25">dev</name></expr></argument>, <argument pos:start="93:28" pos:end="93:45"><expr pos:start="93:28" pos:end="93:45"><literal type="string" pos:start="93:28" pos:end="93:45">"interrupt_vector"</literal></expr></argument>, <argument pos:start="93:48" pos:end="93:69"><expr pos:start="93:48" pos:end="93:69"><operator pos:start="93:48" pos:end="93:48">&amp;</operator><name pos:start="93:49" pos:end="93:69"><name pos:start="93:49" pos:end="93:51">env</name><operator pos:start="93:52" pos:end="93:53">-&gt;</operator><name pos:start="93:54" pos:end="93:69">interrupt_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:19"><expr pos:start="95:5" pos:end="95:18"><call pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:13">qdev_init</name><argument_list pos:start="95:14" pos:end="95:18">(<argument pos:start="95:15" pos:end="95:17"><expr pos:start="95:15" pos:end="95:17"><name pos:start="95:15" pos:end="95:17">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:30"><expr pos:start="97:5" pos:end="97:29"><name pos:start="97:5" pos:end="97:5">s</name> <operator pos:start="97:7" pos:end="97:7">=</operator> <call pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:24">sysbus_from_qdev</name><argument_list pos:start="97:25" pos:end="97:29">(<argument pos:start="97:26" pos:end="97:28"><expr pos:start="97:26" pos:end="97:28"><name pos:start="97:26" pos:end="97:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:38"><expr pos:start="99:5" pos:end="99:37"><call pos:start="99:5" pos:end="99:37"><name pos:start="99:5" pos:end="99:19">sysbus_mmio_map</name><argument_list pos:start="99:20" pos:end="99:37">(<argument pos:start="99:21" pos:end="99:21"><expr pos:start="99:21" pos:end="99:21"><name pos:start="99:21" pos:end="99:21">s</name></expr></argument>, <argument pos:start="99:24" pos:end="99:24"><expr pos:start="99:24" pos:end="99:24"><literal type="number" pos:start="99:24" pos:end="99:24">0</literal></expr></argument>, <argument pos:start="99:27" pos:end="99:36"><expr pos:start="99:27" pos:end="99:36"><literal type="number" pos:start="99:27" pos:end="99:36">0x3001c000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:41"><expr pos:start="101:5" pos:end="101:40"><call pos:start="101:5" pos:end="101:40"><name pos:start="101:5" pos:end="101:22">sysbus_connect_irq</name><argument_list pos:start="101:23" pos:end="101:40">(<argument pos:start="101:24" pos:end="101:24"><expr pos:start="101:24" pos:end="101:24"><name pos:start="101:24" pos:end="101:24">s</name></expr></argument>, <argument pos:start="101:27" pos:end="101:27"><expr pos:start="101:27" pos:end="101:27"><literal type="number" pos:start="101:27" pos:end="101:27">0</literal></expr></argument>, <argument pos:start="101:30" pos:end="101:39"><expr pos:start="101:30" pos:end="101:39"><name pos:start="101:30" pos:end="101:39"><name pos:start="101:30" pos:end="101:36">cpu_irq</name><index pos:start="101:37" pos:end="101:39">[<expr pos:start="101:38" pos:end="101:38"><literal type="number" pos:start="101:38" pos:end="101:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><call pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:22">sysbus_connect_irq</name><argument_list pos:start="103:23" pos:end="103:40">(<argument pos:start="103:24" pos:end="103:24"><expr pos:start="103:24" pos:end="103:24"><name pos:start="103:24" pos:end="103:24">s</name></expr></argument>, <argument pos:start="103:27" pos:end="103:27"><expr pos:start="103:27" pos:end="103:27"><literal type="number" pos:start="103:27" pos:end="103:27">1</literal></expr></argument>, <argument pos:start="103:30" pos:end="103:39"><expr pos:start="103:30" pos:end="103:39"><name pos:start="103:30" pos:end="103:39"><name pos:start="103:30" pos:end="103:36">cpu_irq</name><index pos:start="103:37" pos:end="103:39">[<expr pos:start="103:38" pos:end="103:38"><literal type="number" pos:start="103:38" pos:end="103:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="105:5" pos:end="109:5">for <control pos:start="105:9" pos:end="105:28">(<init pos:start="105:10" pos:end="105:15"><expr pos:start="105:10" pos:end="105:14"><name pos:start="105:10" pos:end="105:10">i</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <literal type="number" pos:start="105:14" pos:end="105:14">0</literal></expr>;</init> <condition pos:start="105:17" pos:end="105:23"><expr pos:start="105:17" pos:end="105:22"><name pos:start="105:17" pos:end="105:17">i</name> <operator pos:start="105:19" pos:end="105:19">&lt;</operator> <literal type="number" pos:start="105:21" pos:end="105:22">30</literal></expr>;</condition> <incr pos:start="105:25" pos:end="105:27"><expr pos:start="105:25" pos:end="105:27"><name pos:start="105:25" pos:end="105:25">i</name><operator pos:start="105:26" pos:end="105:27">++</operator></expr></incr>)</control> <block pos:start="105:30" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:42">

        <expr_stmt pos:start="107:9" pos:end="107:42"><expr pos:start="107:9" pos:end="107:41"><name pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:11">irq</name><index pos:start="107:12" pos:end="107:14">[<expr pos:start="107:13" pos:end="107:13"><name pos:start="107:13" pos:end="107:13">i</name></expr>]</index></name> <operator pos:start="107:16" pos:end="107:16">=</operator> <call pos:start="107:18" pos:end="107:41"><name pos:start="107:18" pos:end="107:33">qdev_get_gpio_in</name><argument_list pos:start="107:34" pos:end="107:41">(<argument pos:start="107:35" pos:end="107:37"><expr pos:start="107:35" pos:end="107:37"><name pos:start="107:35" pos:end="107:37">dev</name></expr></argument>, <argument pos:start="107:40" pos:end="107:40"><expr pos:start="107:40" pos:end="107:40"><name pos:start="107:40" pos:end="107:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="111:5" pos:end="111:39"><expr pos:start="111:5" pos:end="111:38"><name pos:start="111:5" pos:end="111:10"><name pos:start="111:5" pos:end="111:7">nmi</name><index pos:start="111:8" pos:end="111:10">[<expr pos:start="111:9" pos:end="111:9"><literal type="number" pos:start="111:9" pos:end="111:9">0</literal></expr>]</index></name> <operator pos:start="111:12" pos:end="111:12">=</operator> <call pos:start="111:14" pos:end="111:38"><name pos:start="111:14" pos:end="111:29">qdev_get_gpio_in</name><argument_list pos:start="111:30" pos:end="111:38">(<argument pos:start="111:31" pos:end="111:33"><expr pos:start="111:31" pos:end="111:33"><name pos:start="111:31" pos:end="111:33">dev</name></expr></argument>, <argument pos:start="111:36" pos:end="111:37"><expr pos:start="111:36" pos:end="111:37"><literal type="number" pos:start="111:36" pos:end="111:37">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:39"><expr pos:start="113:5" pos:end="113:38"><name pos:start="113:5" pos:end="113:10"><name pos:start="113:5" pos:end="113:7">nmi</name><index pos:start="113:8" pos:end="113:10">[<expr pos:start="113:9" pos:end="113:9"><literal type="number" pos:start="113:9" pos:end="113:9">1</literal></expr>]</index></name> <operator pos:start="113:12" pos:end="113:12">=</operator> <call pos:start="113:14" pos:end="113:38"><name pos:start="113:14" pos:end="113:29">qdev_get_gpio_in</name><argument_list pos:start="113:30" pos:end="113:38">(<argument pos:start="113:31" pos:end="113:33"><expr pos:start="113:31" pos:end="113:33"><name pos:start="113:31" pos:end="113:33">dev</name></expr></argument>, <argument pos:start="113:36" pos:end="113:37"><expr pos:start="113:36" pos:end="113:37"><literal type="number" pos:start="113:36" pos:end="113:37">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:53"><expr pos:start="117:5" pos:end="117:52"><name pos:start="117:5" pos:end="117:16">etraxfs_dmac</name> <operator pos:start="117:18" pos:end="117:18">=</operator> <call pos:start="117:20" pos:end="117:52"><name pos:start="117:20" pos:end="117:36">etraxfs_dmac_init</name><argument_list pos:start="117:37" pos:end="117:52">(<argument pos:start="117:38" pos:end="117:47"><expr pos:start="117:38" pos:end="117:47"><literal type="number" pos:start="117:38" pos:end="117:47">0x30000000</literal></expr></argument>, <argument pos:start="117:50" pos:end="117:51"><expr pos:start="117:50" pos:end="117:51"><literal type="number" pos:start="117:50" pos:end="117:51">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="119:5" pos:end="125:5">for <control pos:start="119:9" pos:end="119:28">(<init pos:start="119:10" pos:end="119:15"><expr pos:start="119:10" pos:end="119:14"><name pos:start="119:10" pos:end="119:10">i</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <literal type="number" pos:start="119:14" pos:end="119:14">0</literal></expr>;</init> <condition pos:start="119:17" pos:end="119:23"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:17">i</name> <operator pos:start="119:19" pos:end="119:19">&lt;</operator> <literal type="number" pos:start="119:21" pos:end="119:22">10</literal></expr>;</condition> <incr pos:start="119:25" pos:end="119:27"><expr pos:start="119:25" pos:end="119:27"><name pos:start="119:25" pos:end="119:25">i</name><operator pos:start="119:26" pos:end="119:27">++</operator></expr></incr>)</control> <block pos:start="119:30" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:66">

        <comment type="block" pos:start="121:9" pos:end="121:58">/* On ETRAX, odd numbered channels are inputs.  */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:66"><expr pos:start="123:9" pos:end="123:65"><call pos:start="123:9" pos:end="123:65"><name pos:start="123:9" pos:end="123:28">etraxfs_dmac_connect</name><argument_list pos:start="123:29" pos:end="123:65">(<argument pos:start="123:30" pos:end="123:41"><expr pos:start="123:30" pos:end="123:41"><name pos:start="123:30" pos:end="123:41">etraxfs_dmac</name></expr></argument>, <argument pos:start="123:44" pos:end="123:44"><expr pos:start="123:44" pos:end="123:44"><name pos:start="123:44" pos:end="123:44">i</name></expr></argument>, <argument pos:start="123:47" pos:end="123:57"><expr pos:start="123:47" pos:end="123:57"><name pos:start="123:47" pos:end="123:49">irq</name> <operator pos:start="123:51" pos:end="123:51">+</operator> <literal type="number" pos:start="123:53" pos:end="123:55">7</literal> <operator pos:start="123:55" pos:end="123:55">+</operator> <name pos:start="123:57" pos:end="123:57">i</name></expr></argument>, <argument pos:start="123:60" pos:end="123:64"><expr pos:start="123:60" pos:end="123:64"><name pos:start="123:60" pos:end="123:60">i</name> <operator pos:start="123:62" pos:end="123:62">&amp;</operator> <literal type="number" pos:start="123:64" pos:end="123:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="129:5" pos:end="129:39">/* Add the two ethernet blocks.  */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:59"><expr pos:start="131:5" pos:end="131:58"><name pos:start="131:5" pos:end="131:10"><name pos:start="131:5" pos:end="131:7">eth</name><index pos:start="131:8" pos:end="131:10">[<expr pos:start="131:9" pos:end="131:9"><literal type="number" pos:start="131:9" pos:end="131:9">0</literal></expr>]</index></name> <operator pos:start="131:12" pos:end="131:12">=</operator> <call pos:start="131:14" pos:end="131:58"><name pos:start="131:14" pos:end="131:29">etraxfs_eth_init</name><argument_list pos:start="131:30" pos:end="131:58">(<argument pos:start="131:31" pos:end="131:42"><expr pos:start="131:31" pos:end="131:42"><operator pos:start="131:31" pos:end="131:31">&amp;</operator><name pos:start="131:32" pos:end="131:42"><name pos:start="131:32" pos:end="131:39">nd_table</name><index pos:start="131:40" pos:end="131:42">[<expr pos:start="131:41" pos:end="131:41"><literal type="number" pos:start="131:41" pos:end="131:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="131:45" pos:end="131:54"><expr pos:start="131:45" pos:end="131:54"><literal type="number" pos:start="131:45" pos:end="131:54">0x30034000</literal></expr></argument>, <argument pos:start="131:57" pos:end="131:57"><expr pos:start="131:57" pos:end="131:57"><literal type="number" pos:start="131:57" pos:end="131:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="135:63"><if pos:start="133:5" pos:end="135:63">if <condition pos:start="133:8" pos:end="133:20">(<expr pos:start="133:9" pos:end="133:19"><name pos:start="133:9" pos:end="133:15">nb_nics</name> <operator pos:start="133:17" pos:end="133:17">&gt;</operator> <literal type="number" pos:start="133:19" pos:end="133:19">1</literal></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:63"><block_content pos:start="135:9" pos:end="135:63">

        <expr_stmt pos:start="135:9" pos:end="135:63"><expr pos:start="135:9" pos:end="135:62"><name pos:start="135:9" pos:end="135:14"><name pos:start="135:9" pos:end="135:11">eth</name><index pos:start="135:12" pos:end="135:14">[<expr pos:start="135:13" pos:end="135:13"><literal type="number" pos:start="135:13" pos:end="135:13">1</literal></expr>]</index></name> <operator pos:start="135:16" pos:end="135:16">=</operator> <call pos:start="135:18" pos:end="135:62"><name pos:start="135:18" pos:end="135:33">etraxfs_eth_init</name><argument_list pos:start="135:34" pos:end="135:62">(<argument pos:start="135:35" pos:end="135:46"><expr pos:start="135:35" pos:end="135:46"><operator pos:start="135:35" pos:end="135:35">&amp;</operator><name pos:start="135:36" pos:end="135:46"><name pos:start="135:36" pos:end="135:43">nd_table</name><index pos:start="135:44" pos:end="135:46">[<expr pos:start="135:45" pos:end="135:45"><literal type="number" pos:start="135:45" pos:end="135:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="135:49" pos:end="135:58"><expr pos:start="135:49" pos:end="135:58"><literal type="number" pos:start="135:49" pos:end="135:58">0x30036000</literal></expr></argument>, <argument pos:start="135:61" pos:end="135:61"><expr pos:start="135:61" pos:end="135:61"><literal type="number" pos:start="135:61" pos:end="135:61">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:71">/* The DMA Connector block is missing, hardwire things for now.  */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:57"><expr pos:start="141:5" pos:end="141:56"><call pos:start="141:5" pos:end="141:56"><name pos:start="141:5" pos:end="141:31">etraxfs_dmac_connect_client</name><argument_list pos:start="141:32" pos:end="141:56">(<argument pos:start="141:33" pos:end="141:44"><expr pos:start="141:33" pos:end="141:44"><name pos:start="141:33" pos:end="141:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="141:47" pos:end="141:47"><expr pos:start="141:47" pos:end="141:47"><literal type="number" pos:start="141:47" pos:end="141:47">0</literal></expr></argument>, <argument pos:start="141:50" pos:end="141:55"><expr pos:start="141:50" pos:end="141:55"><name pos:start="141:50" pos:end="141:55"><name pos:start="141:50" pos:end="141:52">eth</name><index pos:start="141:53" pos:end="141:55">[<expr pos:start="141:54" pos:end="141:54"><literal type="number" pos:start="141:54" pos:end="141:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:61"><expr pos:start="143:5" pos:end="143:60"><call pos:start="143:5" pos:end="143:60"><name pos:start="143:5" pos:end="143:31">etraxfs_dmac_connect_client</name><argument_list pos:start="143:32" pos:end="143:60">(<argument pos:start="143:33" pos:end="143:44"><expr pos:start="143:33" pos:end="143:44"><name pos:start="143:33" pos:end="143:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="143:47" pos:end="143:47"><expr pos:start="143:47" pos:end="143:47"><literal type="number" pos:start="143:47" pos:end="143:47">1</literal></expr></argument>, <argument pos:start="143:50" pos:end="143:59"><expr pos:start="143:50" pos:end="143:59"><name pos:start="143:50" pos:end="143:55"><name pos:start="143:50" pos:end="143:52">eth</name><index pos:start="143:53" pos:end="143:55">[<expr pos:start="143:54" pos:end="143:54"><literal type="number" pos:start="143:54" pos:end="143:54">0</literal></expr>]</index></name> <operator pos:start="143:57" pos:end="143:57">+</operator> <literal type="number" pos:start="143:59" pos:end="143:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:15">(<expr pos:start="145:9" pos:end="145:14"><name pos:start="145:9" pos:end="145:14"><name pos:start="145:9" pos:end="145:11">eth</name><index pos:start="145:12" pos:end="145:14">[<expr pos:start="145:13" pos:end="145:13"><literal type="number" pos:start="145:13" pos:end="145:13">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="145:17" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:65">

        <expr_stmt pos:start="147:9" pos:end="147:61"><expr pos:start="147:9" pos:end="147:60"><call pos:start="147:9" pos:end="147:60"><name pos:start="147:9" pos:end="147:35">etraxfs_dmac_connect_client</name><argument_list pos:start="147:36" pos:end="147:60">(<argument pos:start="147:37" pos:end="147:48"><expr pos:start="147:37" pos:end="147:48"><name pos:start="147:37" pos:end="147:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="147:51" pos:end="147:51"><expr pos:start="147:51" pos:end="147:51"><literal type="number" pos:start="147:51" pos:end="147:51">6</literal></expr></argument>, <argument pos:start="147:54" pos:end="147:59"><expr pos:start="147:54" pos:end="147:59"><name pos:start="147:54" pos:end="147:59"><name pos:start="147:54" pos:end="147:56">eth</name><index pos:start="147:57" pos:end="147:59">[<expr pos:start="147:58" pos:end="147:58"><literal type="number" pos:start="147:58" pos:end="147:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:65"><expr pos:start="149:9" pos:end="149:64"><call pos:start="149:9" pos:end="149:64"><name pos:start="149:9" pos:end="149:35">etraxfs_dmac_connect_client</name><argument_list pos:start="149:36" pos:end="149:64">(<argument pos:start="149:37" pos:end="149:48"><expr pos:start="149:37" pos:end="149:48"><name pos:start="149:37" pos:end="149:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="149:51" pos:end="149:51"><expr pos:start="149:51" pos:end="149:51"><literal type="number" pos:start="149:51" pos:end="149:51">7</literal></expr></argument>, <argument pos:start="149:54" pos:end="149:63"><expr pos:start="149:54" pos:end="149:63"><name pos:start="149:54" pos:end="149:59"><name pos:start="149:54" pos:end="149:56">eth</name><index pos:start="149:57" pos:end="149:59">[<expr pos:start="149:58" pos:end="149:58"><literal type="number" pos:start="149:58" pos:end="149:58">1</literal></expr>]</index></name> <operator pos:start="149:61" pos:end="149:61">+</operator> <literal type="number" pos:start="149:63" pos:end="149:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:20">/* 2 timers.  */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:80"><expr pos:start="157:5" pos:end="157:79"><call pos:start="157:5" pos:end="157:79"><name pos:start="157:5" pos:end="157:25">sysbus_create_varargs</name><argument_list pos:start="157:26" pos:end="157:79">(<argument pos:start="157:27" pos:end="157:41"><expr pos:start="157:27" pos:end="157:41"><literal type="string" pos:start="157:27" pos:end="157:41">"etraxfs,timer"</literal></expr></argument>, <argument pos:start="157:44" pos:end="157:53"><expr pos:start="157:44" pos:end="157:53"><literal type="number" pos:start="157:44" pos:end="157:53">0x3001e000</literal></expr></argument>, <argument pos:start="157:56" pos:end="157:64"><expr pos:start="157:56" pos:end="157:64"><name pos:start="157:56" pos:end="157:64"><name pos:start="157:56" pos:end="157:58">irq</name><index pos:start="157:59" pos:end="157:64">[<expr pos:start="157:60" pos:end="157:63"><literal type="number" pos:start="157:60" pos:end="157:63">0x1b</literal></expr>]</index></name></expr></argument>, <argument pos:start="157:67" pos:end="157:72"><expr pos:start="157:67" pos:end="157:72"><name pos:start="157:67" pos:end="157:72"><name pos:start="157:67" pos:end="157:69">nmi</name><index pos:start="157:70" pos:end="157:72">[<expr pos:start="157:71" pos:end="157:71"><literal type="number" pos:start="157:71" pos:end="157:71">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="157:75" pos:end="157:78"><expr pos:start="157:75" pos:end="157:78"><name pos:start="157:75" pos:end="157:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:80"><expr pos:start="159:5" pos:end="159:79"><call pos:start="159:5" pos:end="159:79"><name pos:start="159:5" pos:end="159:25">sysbus_create_varargs</name><argument_list pos:start="159:26" pos:end="159:79">(<argument pos:start="159:27" pos:end="159:41"><expr pos:start="159:27" pos:end="159:41"><literal type="string" pos:start="159:27" pos:end="159:41">"etraxfs,timer"</literal></expr></argument>, <argument pos:start="159:44" pos:end="159:53"><expr pos:start="159:44" pos:end="159:53"><literal type="number" pos:start="159:44" pos:end="159:53">0x3005e000</literal></expr></argument>, <argument pos:start="159:56" pos:end="159:64"><expr pos:start="159:56" pos:end="159:64"><name pos:start="159:56" pos:end="159:64"><name pos:start="159:56" pos:end="159:58">irq</name><index pos:start="159:59" pos:end="159:64">[<expr pos:start="159:60" pos:end="159:63"><literal type="number" pos:start="159:60" pos:end="159:63">0x1b</literal></expr>]</index></name></expr></argument>, <argument pos:start="159:67" pos:end="159:72"><expr pos:start="159:67" pos:end="159:72"><name pos:start="159:67" pos:end="159:72"><name pos:start="159:67" pos:end="159:69">nmi</name><index pos:start="159:70" pos:end="159:72">[<expr pos:start="159:71" pos:end="159:71"><literal type="number" pos:start="159:71" pos:end="159:71">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="159:75" pos:end="159:78"><expr pos:start="159:75" pos:end="159:78"><name pos:start="159:75" pos:end="159:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="163:5" pos:end="169:5">for <control pos:start="163:9" pos:end="163:27">(<init pos:start="163:10" pos:end="163:15"><expr pos:start="163:10" pos:end="163:14"><name pos:start="163:10" pos:end="163:10">i</name> <operator pos:start="163:12" pos:end="163:12">=</operator> <literal type="number" pos:start="163:14" pos:end="163:14">0</literal></expr>;</init> <condition pos:start="163:17" pos:end="163:22"><expr pos:start="163:17" pos:end="163:21"><name pos:start="163:17" pos:end="163:17">i</name> <operator pos:start="163:19" pos:end="163:19">&lt;</operator> <literal type="number" pos:start="163:21" pos:end="163:21">4</literal></expr>;</condition> <incr pos:start="163:24" pos:end="163:26"><expr pos:start="163:24" pos:end="163:26"><name pos:start="163:24" pos:end="163:24">i</name><operator pos:start="163:25" pos:end="163:26">++</operator></expr></incr>)</control> <block pos:start="163:29" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:44">

        <expr_stmt pos:start="165:9" pos:end="167:44"><expr pos:start="165:9" pos:end="167:43"><call pos:start="165:9" pos:end="167:43"><name pos:start="165:9" pos:end="165:28">sysbus_create_simple</name><argument_list pos:start="165:29" pos:end="167:43">(<argument pos:start="165:30" pos:end="165:45"><expr pos:start="165:30" pos:end="165:45"><literal type="string" pos:start="165:30" pos:end="165:45">"etraxfs,serial"</literal></expr></argument>, <argument pos:start="165:48" pos:end="165:70"><expr pos:start="165:48" pos:end="165:70"><literal type="number" pos:start="165:48" pos:end="165:59">0x30026000</literal> <operator pos:start="165:59" pos:end="165:59">+</operator> <name pos:start="165:61" pos:end="165:61">i</name> <operator pos:start="165:63" pos:end="165:63">*</operator> <literal type="number" pos:start="165:65" pos:end="165:70">0x2000</literal></expr></argument>,

                             <argument pos:start="167:30" pos:end="167:42"><expr pos:start="167:30" pos:end="167:42"><name pos:start="167:30" pos:end="167:42"><name pos:start="167:30" pos:end="167:32">irq</name><index pos:start="167:33" pos:end="167:42">[<expr pos:start="167:34" pos:end="167:41"><literal type="number" pos:start="167:34" pos:end="167:39">0x14</literal> <operator pos:start="167:39" pos:end="167:39">+</operator> <name pos:start="167:41" pos:end="167:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    </block_content>}</block></for>



    <if_stmt pos:start="173:5" pos:end="229:5"><if pos:start="173:5" pos:end="229:5">if <condition pos:start="173:8" pos:end="173:24">(<expr pos:start="173:9" pos:end="173:23"><name pos:start="173:9" pos:end="173:23">kernel_filename</name></expr>)</condition> <block pos:start="173:26" pos:end="229:5">{<block_content pos:start="175:9" pos:end="227:9">

        <decl_stmt pos:start="175:9" pos:end="175:29"><decl pos:start="175:9" pos:end="175:22"><type pos:start="175:9" pos:end="175:16"><name pos:start="175:9" pos:end="175:16">uint64_t</name></type> <name pos:start="175:18" pos:end="175:22">entry</name></decl>, <decl pos:start="175:25" pos:end="175:28"><type ref="prev" pos:start="175:9" pos:end="175:16"/><name pos:start="175:25" pos:end="175:28">high</name></decl>;</decl_stmt>

        <decl_stmt pos:start="177:9" pos:end="177:25"><decl pos:start="177:9" pos:end="177:24"><type pos:start="177:9" pos:end="177:11"><name pos:start="177:9" pos:end="177:11">int</name></type> <name pos:start="177:13" pos:end="177:24">kcmdline_len</name></decl>;</decl_stmt>



        <comment type="block" pos:start="181:9" pos:end="183:28">/* Boots a kernel elf binary, os/linux-2.6/vmlinux from the axis 

           devboard SDK.  */</comment>

        <expr_stmt pos:start="185:9" pos:end="187:71"><expr pos:start="185:9" pos:end="187:70"><name pos:start="185:9" pos:end="185:19">kernel_size</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <call pos:start="185:23" pos:end="187:70"><name pos:start="185:23" pos:end="185:30">load_elf</name><argument_list pos:start="185:31" pos:end="187:70">(<argument pos:start="185:32" pos:end="185:46"><expr pos:start="185:32" pos:end="185:46"><name pos:start="185:32" pos:end="185:46">kernel_filename</name></expr></argument>, <argument pos:start="185:49" pos:end="185:61"><expr pos:start="185:49" pos:end="185:61"><operator pos:start="185:49" pos:end="185:49">-</operator><literal type="number" pos:start="185:50" pos:end="185:61">0x80000000LL</literal></expr></argument>,

                               <argument pos:start="187:32" pos:end="187:37"><expr pos:start="187:32" pos:end="187:37"><operator pos:start="187:32" pos:end="187:32">&amp;</operator><name pos:start="187:33" pos:end="187:37">entry</name></expr></argument>, <argument pos:start="187:40" pos:end="187:43"><expr pos:start="187:40" pos:end="187:43"><name pos:start="187:40" pos:end="187:43">NULL</name></expr></argument>, <argument pos:start="187:46" pos:end="187:50"><expr pos:start="187:46" pos:end="187:50"><operator pos:start="187:46" pos:end="187:46">&amp;</operator><name pos:start="187:47" pos:end="187:50">high</name></expr></argument>, <argument pos:start="187:53" pos:end="187:53"><expr pos:start="187:53" pos:end="187:53"><literal type="number" pos:start="187:53" pos:end="187:53">0</literal></expr></argument>, <argument pos:start="187:56" pos:end="187:66"><expr pos:start="187:56" pos:end="187:66"><name pos:start="187:56" pos:end="187:66">ELF_MACHINE</name></expr></argument>, <argument pos:start="187:69" pos:end="187:69"><expr pos:start="187:69" pos:end="187:69"><literal type="number" pos:start="187:69" pos:end="187:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:29"><expr pos:start="189:9" pos:end="189:28"><name pos:start="189:9" pos:end="189:20">bootstrap_pc</name> <operator pos:start="189:22" pos:end="189:22">=</operator> <name pos:start="189:24" pos:end="189:28">entry</name></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="203:9"><if pos:start="191:9" pos:end="203:9">if <condition pos:start="191:12" pos:end="191:28">(<expr pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:23">kernel_size</name> <operator pos:start="191:25" pos:end="191:25">&lt;</operator> <literal type="number" pos:start="191:27" pos:end="191:27">0</literal></expr>)</condition> <block pos:start="191:30" pos:end="203:9">{<block_content pos:start="195:13" pos:end="201:52">

            <comment type="block" pos:start="193:13" pos:end="193:61">/* Takes a kimage from the axis devboard SDK.  */</comment>

            <expr_stmt pos:start="195:13" pos:end="197:56"><expr pos:start="195:13" pos:end="197:55"><name pos:start="195:13" pos:end="195:23">kernel_size</name> <operator pos:start="195:25" pos:end="195:25">=</operator> <call pos:start="195:27" pos:end="197:55"><name pos:start="195:27" pos:end="195:45">load_image_targphys</name><argument_list pos:start="195:46" pos:end="197:55">(<argument pos:start="195:47" pos:end="195:61"><expr pos:start="195:47" pos:end="195:61"><name pos:start="195:47" pos:end="195:61">kernel_filename</name></expr></argument>, <argument pos:start="195:64" pos:end="195:73"><expr pos:start="195:64" pos:end="195:73"><literal type="number" pos:start="195:64" pos:end="195:73">0x40004000</literal></expr></argument>,

                                              <argument pos:start="197:47" pos:end="197:54"><expr pos:start="197:47" pos:end="197:54"><name pos:start="197:47" pos:end="197:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:38"><expr pos:start="199:13" pos:end="199:37"><name pos:start="199:13" pos:end="199:24">bootstrap_pc</name> <operator pos:start="199:26" pos:end="199:26">=</operator> <literal type="number" pos:start="199:28" pos:end="199:37">0x40004000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:52"><expr pos:start="201:13" pos:end="201:51"><name pos:start="201:13" pos:end="201:24"><name pos:start="201:13" pos:end="201:15">env</name><operator pos:start="201:16" pos:end="201:17">-&gt;</operator><name pos:start="201:18" pos:end="201:21">regs</name><index pos:start="201:22" pos:end="201:24">[<expr pos:start="201:23" pos:end="201:23"><literal type="number" pos:start="201:23" pos:end="201:23">9</literal></expr>]</index></name> <operator pos:start="201:26" pos:end="201:26">=</operator> <literal type="number" pos:start="201:28" pos:end="201:39">0x40004000</literal> <operator pos:start="201:39" pos:end="201:39">+</operator> <name pos:start="201:41" pos:end="201:51">kernel_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:34"><expr pos:start="205:9" pos:end="205:33"><name pos:start="205:9" pos:end="205:20"><name pos:start="205:9" pos:end="205:11">env</name><operator pos:start="205:12" pos:end="205:13">-&gt;</operator><name pos:start="205:14" pos:end="205:17">regs</name><index pos:start="205:18" pos:end="205:20">[<expr pos:start="205:19" pos:end="205:19"><literal type="number" pos:start="205:19" pos:end="205:19">8</literal></expr>]</index></name> <operator pos:start="205:22" pos:end="205:22">=</operator> <literal type="number" pos:start="205:24" pos:end="205:33">0x56902387</literal></expr>;</expr_stmt> <comment type="block" pos:start="205:36" pos:end="205:57">/* RAM init magic.  */</comment>



        <if_stmt pos:start="209:9" pos:end="227:9"><if pos:start="209:9" pos:end="227:9">if <condition pos:start="209:12" pos:end="209:70">(<expr pos:start="209:13" pos:end="209:69"><name pos:start="209:13" pos:end="209:26">kernel_cmdline</name> <operator pos:start="209:28" pos:end="209:29">&amp;&amp;</operator> <operator pos:start="209:31" pos:end="209:31">(</operator><name pos:start="209:32" pos:end="209:43">kcmdline_len</name> <operator pos:start="209:45" pos:end="209:45">=</operator> <call pos:start="209:47" pos:end="209:68"><name pos:start="209:47" pos:end="209:52">strlen</name><argument_list pos:start="209:53" pos:end="209:68">(<argument pos:start="209:54" pos:end="209:67"><expr pos:start="209:54" pos:end="209:67"><name pos:start="209:54" pos:end="209:67">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="209:69" pos:end="209:69">)</operator></expr>)</condition> <block pos:start="209:72" pos:end="227:9">{<block_content pos:start="211:13" pos:end="225:65">

            <if_stmt pos:start="211:13" pos:end="217:13"><if pos:start="211:13" pos:end="217:13">if <condition pos:start="211:16" pos:end="211:35">(<expr pos:start="211:17" pos:end="211:34"><name pos:start="211:17" pos:end="211:28">kcmdline_len</name> <operator pos:start="211:30" pos:end="211:30">&gt;</operator> <literal type="number" pos:start="211:32" pos:end="211:34">256</literal></expr>)</condition> <block pos:start="211:37" pos:end="217:13">{<block_content pos:start="213:17" pos:end="215:24">

                <expr_stmt pos:start="213:17" pos:end="213:76"><expr pos:start="213:17" pos:end="213:75"><call pos:start="213:17" pos:end="213:75"><name pos:start="213:17" pos:end="213:23">fprintf</name><argument_list pos:start="213:24" pos:end="213:75">(<argument pos:start="213:25" pos:end="213:30"><expr pos:start="213:25" pos:end="213:30"><name pos:start="213:25" pos:end="213:30">stderr</name></expr></argument>, <argument pos:start="213:33" pos:end="213:74"><expr pos:start="213:33" pos:end="213:74"><literal type="string" pos:start="213:33" pos:end="213:74">"Too long CRIS kernel cmdline (max 256)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:24"><expr pos:start="215:17" pos:end="215:23"><call pos:start="215:17" pos:end="215:23"><name pos:start="215:17" pos:end="215:20">exit</name><argument_list pos:start="215:21" pos:end="215:23">(<argument pos:start="215:22" pos:end="215:22"><expr pos:start="215:22" pos:end="215:22"><literal type="number" pos:start="215:22" pos:end="215:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="219:13" pos:end="219:68">/* Let the kernel know we are modifying the cmdline.  */</comment>

            <expr_stmt pos:start="221:13" pos:end="221:39"><expr pos:start="221:13" pos:end="221:38"><name pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:15">env</name><operator pos:start="221:16" pos:end="221:17">-&gt;</operator><name pos:start="221:18" pos:end="221:21">regs</name><index pos:start="221:22" pos:end="221:25">[<expr pos:start="221:23" pos:end="221:24"><literal type="number" pos:start="221:23" pos:end="221:24">10</literal></expr>]</index></name> <operator pos:start="221:27" pos:end="221:27">=</operator> <literal type="number" pos:start="221:29" pos:end="221:38">0x87109563</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:39"><expr pos:start="223:13" pos:end="223:38"><name pos:start="223:13" pos:end="223:25"><name pos:start="223:13" pos:end="223:15">env</name><operator pos:start="223:16" pos:end="223:17">-&gt;</operator><name pos:start="223:18" pos:end="223:21">regs</name><index pos:start="223:22" pos:end="223:25">[<expr pos:start="223:23" pos:end="223:24"><literal type="number" pos:start="223:23" pos:end="223:24">11</literal></expr>]</index></name> <operator pos:start="223:27" pos:end="223:27">=</operator> <literal type="number" pos:start="223:29" pos:end="223:38">0x40000000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:65"><expr pos:start="225:13" pos:end="225:64"><call pos:start="225:13" pos:end="225:64"><name pos:start="225:13" pos:end="225:28">pstrcpy_targphys</name><argument_list pos:start="225:29" pos:end="225:64">(<argument pos:start="225:30" pos:end="225:42"><expr pos:start="225:30" pos:end="225:42"><name pos:start="225:30" pos:end="225:42"><name pos:start="225:30" pos:end="225:32">env</name><operator pos:start="225:33" pos:end="225:34">-&gt;</operator><name pos:start="225:35" pos:end="225:38">regs</name><index pos:start="225:39" pos:end="225:42">[<expr pos:start="225:40" pos:end="225:41"><literal type="number" pos:start="225:40" pos:end="225:41">11</literal></expr>]</index></name></expr></argument>, <argument pos:start="225:45" pos:end="225:47"><expr pos:start="225:45" pos:end="225:47"><literal type="number" pos:start="225:45" pos:end="225:47">256</literal></expr></argument>, <argument pos:start="225:50" pos:end="225:63"><expr pos:start="225:50" pos:end="225:63"><name pos:start="225:50" pos:end="225:63">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:27"><expr pos:start="231:5" pos:end="231:26"><name pos:start="231:5" pos:end="231:11"><name pos:start="231:5" pos:end="231:7">env</name><operator pos:start="231:8" pos:end="231:9">-&gt;</operator><name pos:start="231:10" pos:end="231:11">pc</name></name> <operator pos:start="231:13" pos:end="231:13">=</operator> <name pos:start="231:15" pos:end="231:26">bootstrap_pc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:33"><expr pos:start="235:5" pos:end="235:32"><call pos:start="235:5" pos:end="235:32"><name pos:start="235:5" pos:end="235:10">printf</name> <argument_list pos:start="235:12" pos:end="235:32">(<argument pos:start="235:13" pos:end="235:22"><expr pos:start="235:13" pos:end="235:22"><literal type="string" pos:start="235:13" pos:end="235:22">"pc =%x\n"</literal></expr></argument>, <argument pos:start="235:25" pos:end="235:31"><expr pos:start="235:25" pos:end="235:31"><name pos:start="235:25" pos:end="235:31"><name pos:start="235:25" pos:end="235:27">env</name><operator pos:start="235:28" pos:end="235:29">-&gt;</operator><name pos:start="235:30" pos:end="235:31">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:41"><expr pos:start="237:5" pos:end="237:40"><call pos:start="237:5" pos:end="237:40"><name pos:start="237:5" pos:end="237:10">printf</name> <argument_list pos:start="237:12" pos:end="237:40">(<argument pos:start="237:13" pos:end="237:29"><expr pos:start="237:13" pos:end="237:29"><literal type="string" pos:start="237:13" pos:end="237:29">"ram size =%ld\n"</literal></expr></argument>, <argument pos:start="237:32" pos:end="237:39"><expr pos:start="237:32" pos:end="237:39"><name pos:start="237:32" pos:end="237:39">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
