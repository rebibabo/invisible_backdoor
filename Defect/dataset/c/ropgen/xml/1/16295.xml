<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16295.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">xics_kvm_realize</name><parameter_list pos:start="1:29" pos:end="1:60">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:40">DeviceState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dev</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:52">Error</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:54">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">KVMXICSState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:24">icpkvm</name> <init pos:start="5:26" pos:end="5:40">= <expr pos:start="5:28" pos:end="5:40"><call pos:start="5:28" pos:end="5:40"><name pos:start="5:28" pos:end="5:35">KVM_XICS</name><argument_list pos:start="5:36" pos:end="5:40">(<argument pos:start="5:37" pos:end="5:39"><expr pos:start="5:37" pos:end="5:39"><name pos:start="5:37" pos:end="5:39">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">XICSState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">icp</name> <init pos:start="7:20" pos:end="7:37">= <expr pos:start="7:22" pos:end="7:37"><call pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:32">XICS_COMMON</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:13"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:13">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:16">error</name> <init pos:start="11:18" pos:end="11:23">= <expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="19:6"><decl pos:start="13:5" pos:end="19:5"><type pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:28">kvm_create_device</name></name></type> <name pos:start="13:30" pos:end="13:47">xics_create_device</name> <init pos:start="13:49" pos:end="19:5">= <expr pos:start="13:51" pos:end="19:5"><block pos:start="13:51" pos:end="19:5">{

        <expr pos:start="15:9" pos:end="15:33"><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:13">type</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:33">KVM_DEV_TYPE_XICS</name></expr>,

        <expr pos:start="17:9" pos:end="17:18"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:14">flags</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:76">(<expr pos:start="23:9" pos:end="23:75"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:20">kvm_enabled</name><argument_list pos:start="23:21" pos:end="23:22">()</argument_list></call> <operator pos:start="23:24" pos:end="23:25">||</operator> <operator pos:start="23:27" pos:end="23:27">!</operator><call pos:start="23:28" pos:end="23:75"><name pos:start="23:28" pos:end="23:46">kvm_check_extension</name><argument_list pos:start="23:47" pos:end="23:75">(<argument pos:start="23:48" pos:end="23:56"><expr pos:start="23:48" pos:end="23:56"><name pos:start="23:48" pos:end="23:56">kvm_state</name></expr></argument>, <argument pos:start="23:59" pos:end="23:74"><expr pos:start="23:59" pos:end="23:74"><name pos:start="23:59" pos:end="23:74">KVM_CAP_IRQ_XICS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:78" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:18">

        <expr_stmt pos:start="25:9" pos:end="27:85"><expr pos:start="25:9" pos:end="27:84"><call pos:start="25:9" pos:end="27:84"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:84">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>,

                   <argument pos:start="27:20" pos:end="27:83"><expr pos:start="27:20" pos:end="27:83"><literal type="string" pos:start="27:20" pos:end="27:83">"KVM and IRQ_XICS capability must be present for in-kernel XICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:77"><expr pos:start="35:5" pos:end="35:76"><name pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:10">icpkvm</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:26">set_xive_token</name></name> <operator pos:start="35:28" pos:end="35:28">=</operator> <call pos:start="35:30" pos:end="35:76"><name pos:start="35:30" pos:end="35:48">spapr_rtas_register</name><argument_list pos:start="35:49" pos:end="35:76">(<argument pos:start="35:50" pos:end="35:63"><expr pos:start="35:50" pos:end="35:63"><literal type="string" pos:start="35:50" pos:end="35:63">"ibm,set-xive"</literal></expr></argument>, <argument pos:start="35:66" pos:end="35:75"><expr pos:start="35:66" pos:end="35:75"><name pos:start="35:66" pos:end="35:75">rtas_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:77"><expr pos:start="37:5" pos:end="37:76"><name pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:10">icpkvm</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:26">get_xive_token</name></name> <operator pos:start="37:28" pos:end="37:28">=</operator> <call pos:start="37:30" pos:end="37:76"><name pos:start="37:30" pos:end="37:48">spapr_rtas_register</name><argument_list pos:start="37:49" pos:end="37:76">(<argument pos:start="37:50" pos:end="37:63"><expr pos:start="37:50" pos:end="37:63"><literal type="string" pos:start="37:50" pos:end="37:63">"ibm,get-xive"</literal></expr></argument>, <argument pos:start="37:66" pos:end="37:75"><expr pos:start="37:66" pos:end="37:75"><name pos:start="37:66" pos:end="37:75">rtas_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:75"><expr pos:start="39:5" pos:end="39:74"><name pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:10">icpkvm</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:25">int_off_token</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <call pos:start="39:29" pos:end="39:74"><name pos:start="39:29" pos:end="39:47">spapr_rtas_register</name><argument_list pos:start="39:48" pos:end="39:74">(<argument pos:start="39:49" pos:end="39:61"><expr pos:start="39:49" pos:end="39:61"><literal type="string" pos:start="39:49" pos:end="39:61">"ibm,int-off"</literal></expr></argument>, <argument pos:start="39:64" pos:end="39:73"><expr pos:start="39:64" pos:end="39:73"><name pos:start="39:64" pos:end="39:73">rtas_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:73"><expr pos:start="41:5" pos:end="41:72"><name pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:10">icpkvm</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:24">int_on_token</name></name> <operator pos:start="41:26" pos:end="41:26">=</operator> <call pos:start="41:28" pos:end="41:72"><name pos:start="41:28" pos:end="41:46">spapr_rtas_register</name><argument_list pos:start="41:47" pos:end="41:72">(<argument pos:start="41:48" pos:end="41:59"><expr pos:start="41:48" pos:end="41:59"><literal type="string" pos:start="41:48" pos:end="41:59">"ibm,int-on"</literal></expr></argument>, <argument pos:start="41:62" pos:end="41:71"><expr pos:start="41:62" pos:end="41:71"><name pos:start="41:62" pos:end="41:71">rtas_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="47:57"><expr pos:start="45:5" pos:end="47:56"><name pos:start="45:5" pos:end="45:6">rc</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="47:56"><name pos:start="45:10" pos:end="45:40">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="45:41" pos:end="47:56">(<argument pos:start="45:42" pos:end="45:63"><expr pos:start="45:42" pos:end="45:63"><name pos:start="45:42" pos:end="45:63"><name pos:start="45:42" pos:end="45:47">icpkvm</name><operator pos:start="45:48" pos:end="45:49">-&gt;</operator><name pos:start="45:50" pos:end="45:63">set_xive_token</name></name></expr></argument>,

                                         <argument pos:start="47:42" pos:end="47:55"><expr pos:start="47:42" pos:end="47:55"><literal type="string" pos:start="47:42" pos:end="47:55">"ibm,set-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:15">(<expr pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:10">rc</name> <operator pos:start="49:12" pos:end="49:12">&lt;</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>)</condition> <block pos:start="49:17" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:74"><expr pos:start="51:9" pos:end="51:73"><call pos:start="51:9" pos:end="51:73"><name pos:start="51:9" pos:end="51:18">error_setg</name><argument_list pos:start="51:19" pos:end="51:73">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">errp</name></expr></argument>, <argument pos:start="51:26" pos:end="51:72"><expr pos:start="51:26" pos:end="51:72"><literal type="string" pos:start="51:26" pos:end="51:72">"kvmppc_define_rtas_kernel_token: ibm,set-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="61:57"><expr pos:start="59:5" pos:end="61:56"><name pos:start="59:5" pos:end="59:6">rc</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <call pos:start="59:10" pos:end="61:56"><name pos:start="59:10" pos:end="59:40">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="59:41" pos:end="61:56">(<argument pos:start="59:42" pos:end="59:63"><expr pos:start="59:42" pos:end="59:63"><name pos:start="59:42" pos:end="59:63"><name pos:start="59:42" pos:end="59:47">icpkvm</name><operator pos:start="59:48" pos:end="59:49">-&gt;</operator><name pos:start="59:50" pos:end="59:63">get_xive_token</name></name></expr></argument>,

                                         <argument pos:start="61:42" pos:end="61:55"><expr pos:start="61:42" pos:end="61:55"><literal type="string" pos:start="61:42" pos:end="61:55">"ibm,get-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:15">(<expr pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:10">rc</name> <operator pos:start="63:12" pos:end="63:12">&lt;</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>)</condition> <block pos:start="63:17" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:74"><expr pos:start="65:9" pos:end="65:73"><call pos:start="65:9" pos:end="65:73"><name pos:start="65:9" pos:end="65:18">error_setg</name><argument_list pos:start="65:19" pos:end="65:73">(<argument pos:start="65:20" pos:end="65:23"><expr pos:start="65:20" pos:end="65:23"><name pos:start="65:20" pos:end="65:23">errp</name></expr></argument>, <argument pos:start="65:26" pos:end="65:72"><expr pos:start="65:26" pos:end="65:72"><literal type="string" pos:start="65:26" pos:end="65:72">"kvmppc_define_rtas_kernel_token: ibm,get-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:18">goto <name pos:start="67:14" pos:end="67:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:77"><expr pos:start="73:5" pos:end="73:76"><name pos:start="73:5" pos:end="73:6">rc</name> <operator pos:start="73:8" pos:end="73:8">=</operator> <call pos:start="73:10" pos:end="73:76"><name pos:start="73:10" pos:end="73:40">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="73:41" pos:end="73:76">(<argument pos:start="73:42" pos:end="73:61"><expr pos:start="73:42" pos:end="73:61"><name pos:start="73:42" pos:end="73:61"><name pos:start="73:42" pos:end="73:47">icpkvm</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:61">int_on_token</name></name></expr></argument>, <argument pos:start="73:64" pos:end="73:75"><expr pos:start="73:64" pos:end="73:75"><literal type="string" pos:start="73:64" pos:end="73:75">"ibm,int-on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:15">(<expr pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:10">rc</name> <operator pos:start="75:12" pos:end="75:12">&lt;</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>)</condition> <block pos:start="75:17" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:72"><expr pos:start="77:9" pos:end="77:71"><call pos:start="77:9" pos:end="77:71"><name pos:start="77:9" pos:end="77:18">error_setg</name><argument_list pos:start="77:19" pos:end="77:71">(<argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><name pos:start="77:20" pos:end="77:23">errp</name></expr></argument>, <argument pos:start="77:26" pos:end="77:70"><expr pos:start="77:26" pos:end="77:70"><literal type="string" pos:start="77:26" pos:end="77:70">"kvmppc_define_rtas_kernel_token: ibm,int-on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:79"><expr pos:start="85:5" pos:end="85:78"><name pos:start="85:5" pos:end="85:6">rc</name> <operator pos:start="85:8" pos:end="85:8">=</operator> <call pos:start="85:10" pos:end="85:78"><name pos:start="85:10" pos:end="85:40">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="85:41" pos:end="85:78">(<argument pos:start="85:42" pos:end="85:62"><expr pos:start="85:42" pos:end="85:62"><name pos:start="85:42" pos:end="85:62"><name pos:start="85:42" pos:end="85:47">icpkvm</name><operator pos:start="85:48" pos:end="85:49">-&gt;</operator><name pos:start="85:50" pos:end="85:62">int_off_token</name></name></expr></argument>, <argument pos:start="85:65" pos:end="85:77"><expr pos:start="85:65" pos:end="85:77"><literal type="string" pos:start="85:65" pos:end="85:77">"ibm,int-off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:15">(<expr pos:start="87:9" pos:end="87:14"><name pos:start="87:9" pos:end="87:10">rc</name> <operator pos:start="87:12" pos:end="87:12">&lt;</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>)</condition> <block pos:start="87:17" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:18">

        <expr_stmt pos:start="89:9" pos:end="89:73"><expr pos:start="89:9" pos:end="89:72"><call pos:start="89:9" pos:end="89:72"><name pos:start="89:9" pos:end="89:18">error_setg</name><argument_list pos:start="89:19" pos:end="89:72">(<argument pos:start="89:20" pos:end="89:23"><expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">errp</name></expr></argument>, <argument pos:start="89:26" pos:end="89:71"><expr pos:start="89:26" pos:end="89:71"><literal type="string" pos:start="89:26" pos:end="89:71">"kvmppc_define_rtas_kernel_token: ibm,int-off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:31">/* Create the kernel ICP */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:73"><expr pos:start="99:5" pos:end="99:72"><name pos:start="99:5" pos:end="99:6">rc</name> <operator pos:start="99:8" pos:end="99:8">=</operator> <call pos:start="99:10" pos:end="99:72"><name pos:start="99:10" pos:end="99:21">kvm_vm_ioctl</name><argument_list pos:start="99:22" pos:end="99:72">(<argument pos:start="99:23" pos:end="99:31"><expr pos:start="99:23" pos:end="99:31"><name pos:start="99:23" pos:end="99:31">kvm_state</name></expr></argument>, <argument pos:start="99:34" pos:end="99:50"><expr pos:start="99:34" pos:end="99:50"><name pos:start="99:34" pos:end="99:50">KVM_CREATE_DEVICE</name></expr></argument>, <argument pos:start="99:53" pos:end="99:71"><expr pos:start="99:53" pos:end="99:71"><operator pos:start="99:53" pos:end="99:53">&amp;</operator><name pos:start="99:54" pos:end="99:71">xics_create_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:15">(<expr pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:10">rc</name> <operator pos:start="101:12" pos:end="101:12">&lt;</operator> <literal type="number" pos:start="101:14" pos:end="101:14">0</literal></expr>)</condition> <block pos:start="101:17" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:18">

        <expr_stmt pos:start="103:9" pos:end="103:75"><expr pos:start="103:9" pos:end="103:74"><call pos:start="103:9" pos:end="103:74"><name pos:start="103:9" pos:end="103:24">error_setg_errno</name><argument_list pos:start="103:25" pos:end="103:74">(<argument pos:start="103:26" pos:end="103:29"><expr pos:start="103:26" pos:end="103:29"><name pos:start="103:26" pos:end="103:29">errp</name></expr></argument>, <argument pos:start="103:32" pos:end="103:34"><expr pos:start="103:32" pos:end="103:34"><operator pos:start="103:32" pos:end="103:32">-</operator><name pos:start="103:33" pos:end="103:34">rc</name></expr></argument>, <argument pos:start="103:37" pos:end="103:73"><expr pos:start="103:37" pos:end="103:73"><literal type="string" pos:start="103:37" pos:end="103:73">"Error on KVM_CREATE_DEVICE for XICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:18">goto <name pos:start="105:14" pos:end="105:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:51"><expr pos:start="111:5" pos:end="111:50"><name pos:start="111:5" pos:end="111:26"><name pos:start="111:5" pos:end="111:10">icpkvm</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:26">kernel_xics_fd</name></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <name pos:start="111:30" pos:end="111:50"><name pos:start="111:30" pos:end="111:47">xics_create_device</name><operator pos:start="111:48" pos:end="111:48">.</operator><name pos:start="111:49" pos:end="111:50">fd</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:73"><expr pos:start="115:5" pos:end="115:72"><call pos:start="115:5" pos:end="115:72"><name pos:start="115:5" pos:end="115:28">object_property_set_bool</name><argument_list pos:start="115:29" pos:end="115:72">(<argument pos:start="115:30" pos:end="115:45"><expr pos:start="115:30" pos:end="115:45"><call pos:start="115:30" pos:end="115:45"><name pos:start="115:30" pos:end="115:35">OBJECT</name><argument_list pos:start="115:36" pos:end="115:45">(<argument pos:start="115:37" pos:end="115:44"><expr pos:start="115:37" pos:end="115:44"><name pos:start="115:37" pos:end="115:44"><name pos:start="115:37" pos:end="115:39">icp</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:44">ics</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="115:48" pos:end="115:51"><expr pos:start="115:48" pos:end="115:51"><name pos:start="115:48" pos:end="115:51">true</name></expr></argument>, <argument pos:start="115:54" pos:end="115:63"><expr pos:start="115:54" pos:end="115:63"><literal type="string" pos:start="115:54" pos:end="115:63">"realized"</literal></expr></argument>, <argument pos:start="115:66" pos:end="115:71"><expr pos:start="115:66" pos:end="115:71"><operator pos:start="115:66" pos:end="115:66">&amp;</operator><name pos:start="115:67" pos:end="115:71">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:14">(<expr pos:start="117:9" pos:end="117:13"><name pos:start="117:9" pos:end="117:13">error</name></expr>)</condition> <block pos:start="117:16" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:18">

        <expr_stmt pos:start="119:9" pos:end="119:37"><expr pos:start="119:9" pos:end="119:36"><call pos:start="119:9" pos:end="119:36"><name pos:start="119:9" pos:end="119:23">error_propagate</name><argument_list pos:start="119:24" pos:end="119:36">(<argument pos:start="119:25" pos:end="119:28"><expr pos:start="119:25" pos:end="119:28"><name pos:start="119:25" pos:end="119:28">errp</name></expr></argument>, <argument pos:start="119:31" pos:end="119:35"><expr pos:start="119:31" pos:end="119:35"><name pos:start="119:31" pos:end="119:35">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:18">goto <name pos:start="121:14" pos:end="121:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:28"><expr pos:start="127:5" pos:end="127:27"><call pos:start="127:5" pos:end="127:27"><name pos:start="127:5" pos:end="127:10">assert</name><argument_list pos:start="127:11" pos:end="127:27">(<argument pos:start="127:12" pos:end="127:26"><expr pos:start="127:12" pos:end="127:26"><name pos:start="127:12" pos:end="127:26"><name pos:start="127:12" pos:end="127:14">icp</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:26">nr_servers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="129:5" pos:end="141:5">for <control pos:start="129:9" pos:end="129:41">(<init pos:start="129:10" pos:end="129:15"><expr pos:start="129:10" pos:end="129:14"><name pos:start="129:10" pos:end="129:10">i</name> <operator pos:start="129:12" pos:end="129:12">=</operator> <literal type="number" pos:start="129:14" pos:end="129:14">0</literal></expr>;</init> <condition pos:start="129:17" pos:end="129:36"><expr pos:start="129:17" pos:end="129:35"><name pos:start="129:17" pos:end="129:17">i</name> <operator pos:start="129:19" pos:end="129:19">&lt;</operator> <name pos:start="129:21" pos:end="129:35"><name pos:start="129:21" pos:end="129:23">icp</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:35">nr_servers</name></name></expr>;</condition> <incr pos:start="129:38" pos:end="129:40"><expr pos:start="129:38" pos:end="129:40"><name pos:start="129:38" pos:end="129:38">i</name><operator pos:start="129:39" pos:end="129:40">++</operator></expr></incr>)</control> <block pos:start="129:43" pos:end="141:5">{<block_content pos:start="131:9" pos:end="139:9">

        <expr_stmt pos:start="131:9" pos:end="131:80"><expr pos:start="131:9" pos:end="131:79"><call pos:start="131:9" pos:end="131:79"><name pos:start="131:9" pos:end="131:32">object_property_set_bool</name><argument_list pos:start="131:33" pos:end="131:79">(<argument pos:start="131:34" pos:end="131:52"><expr pos:start="131:34" pos:end="131:52"><call pos:start="131:34" pos:end="131:52"><name pos:start="131:34" pos:end="131:39">OBJECT</name><argument_list pos:start="131:40" pos:end="131:52">(<argument pos:start="131:41" pos:end="131:51"><expr pos:start="131:41" pos:end="131:51"><operator pos:start="131:41" pos:end="131:41">&amp;</operator><name pos:start="131:42" pos:end="131:51"><name pos:start="131:42" pos:end="131:44">icp</name><operator pos:start="131:45" pos:end="131:46">-&gt;</operator><name pos:start="131:47" pos:end="131:48">ss</name><index pos:start="131:49" pos:end="131:51">[<expr pos:start="131:50" pos:end="131:50"><name pos:start="131:50" pos:end="131:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="131:55" pos:end="131:58"><expr pos:start="131:55" pos:end="131:58"><name pos:start="131:55" pos:end="131:58">true</name></expr></argument>, <argument pos:start="131:61" pos:end="131:70"><expr pos:start="131:61" pos:end="131:70"><literal type="string" pos:start="131:61" pos:end="131:70">"realized"</literal></expr></argument>, <argument pos:start="131:73" pos:end="131:78"><expr pos:start="131:73" pos:end="131:78"><operator pos:start="131:73" pos:end="131:73">&amp;</operator><name pos:start="131:74" pos:end="131:78">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="139:9"><if pos:start="133:9" pos:end="139:9">if <condition pos:start="133:12" pos:end="133:18">(<expr pos:start="133:13" pos:end="133:17"><name pos:start="133:13" pos:end="133:17">error</name></expr>)</condition> <block pos:start="133:20" pos:end="139:9">{<block_content pos:start="135:13" pos:end="137:22">

            <expr_stmt pos:start="135:13" pos:end="135:41"><expr pos:start="135:13" pos:end="135:40"><call pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:27">error_propagate</name><argument_list pos:start="135:28" pos:end="135:40">(<argument pos:start="135:29" pos:end="135:32"><expr pos:start="135:29" pos:end="135:32"><name pos:start="135:29" pos:end="135:32">errp</name></expr></argument>, <argument pos:start="135:35" pos:end="135:39"><expr pos:start="135:35" pos:end="135:39"><name pos:start="135:35" pos:end="135:39">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="137:13" pos:end="137:22">goto <name pos:start="137:18" pos:end="137:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="145:5" pos:end="145:30"><expr pos:start="145:5" pos:end="145:29"><name pos:start="145:5" pos:end="145:22">kvm_kernel_irqchip</name> <operator pos:start="145:24" pos:end="145:24">=</operator> <name pos:start="145:26" pos:end="145:29">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:30"><expr pos:start="147:5" pos:end="147:29"><name pos:start="147:5" pos:end="147:22">kvm_irqfds_allowed</name> <operator pos:start="147:24" pos:end="147:24">=</operator> <name pos:start="147:26" pos:end="147:29">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:37"><expr pos:start="149:5" pos:end="149:36"><name pos:start="149:5" pos:end="149:29">kvm_msi_via_irqfd_allowed</name> <operator pos:start="149:31" pos:end="149:31">=</operator> <name pos:start="149:33" pos:end="149:36">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:34"><expr pos:start="151:5" pos:end="151:33"><name pos:start="151:5" pos:end="151:26">kvm_gsi_direct_mapping</name> <operator pos:start="151:28" pos:end="151:28">=</operator> <name pos:start="151:30" pos:end="151:33">true</name></expr>;</expr_stmt>



    <return pos:start="155:5" pos:end="155:11">return;</return>



<label pos:start="159:1" pos:end="159:5"><name pos:start="159:1" pos:end="159:4">fail</name>:</label>

    <expr_stmt pos:start="161:5" pos:end="161:55"><expr pos:start="161:5" pos:end="161:54"><call pos:start="161:5" pos:end="161:54"><name pos:start="161:5" pos:end="161:35">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="161:36" pos:end="161:54">(<argument pos:start="161:37" pos:end="161:37"><expr pos:start="161:37" pos:end="161:37"><literal type="number" pos:start="161:37" pos:end="161:37">0</literal></expr></argument>, <argument pos:start="161:40" pos:end="161:53"><expr pos:start="161:40" pos:end="161:53"><literal type="string" pos:start="161:40" pos:end="161:53">"ibm,set-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:55"><expr pos:start="163:5" pos:end="163:54"><call pos:start="163:5" pos:end="163:54"><name pos:start="163:5" pos:end="163:35">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="163:36" pos:end="163:54">(<argument pos:start="163:37" pos:end="163:37"><expr pos:start="163:37" pos:end="163:37"><literal type="number" pos:start="163:37" pos:end="163:37">0</literal></expr></argument>, <argument pos:start="163:40" pos:end="163:53"><expr pos:start="163:40" pos:end="163:53"><literal type="string" pos:start="163:40" pos:end="163:53">"ibm,get-xive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:53"><expr pos:start="165:5" pos:end="165:52"><call pos:start="165:5" pos:end="165:52"><name pos:start="165:5" pos:end="165:35">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="165:36" pos:end="165:52">(<argument pos:start="165:37" pos:end="165:37"><expr pos:start="165:37" pos:end="165:37"><literal type="number" pos:start="165:37" pos:end="165:37">0</literal></expr></argument>, <argument pos:start="165:40" pos:end="165:51"><expr pos:start="165:40" pos:end="165:51"><literal type="string" pos:start="165:40" pos:end="165:51">"ibm,int-on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:54"><expr pos:start="167:5" pos:end="167:53"><call pos:start="167:5" pos:end="167:53"><name pos:start="167:5" pos:end="167:35">kvmppc_define_rtas_kernel_token</name><argument_list pos:start="167:36" pos:end="167:53">(<argument pos:start="167:37" pos:end="167:37"><expr pos:start="167:37" pos:end="167:37"><literal type="number" pos:start="167:37" pos:end="167:37">0</literal></expr></argument>, <argument pos:start="167:40" pos:end="167:52"><expr pos:start="167:40" pos:end="167:52"><literal type="string" pos:start="167:40" pos:end="167:52">"ibm,int-off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
