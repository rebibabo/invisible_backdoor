<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19080.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:48">bdrv_co_do_copy_on_readv</name><parameter_list pos:start="1:49" pos:end="3:63">(<parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:26"><decl pos:start="3:9" pos:end="3:26"><type pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:15">int64_t</name></type> <name pos:start="3:17" pos:end="3:26">sector_num</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:42">nb_sectors</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:62"><decl pos:start="3:45" pos:end="3:62"><type pos:start="3:45" pos:end="3:62"><name pos:start="3:45" pos:end="3:56">QEMUIOVector</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">qiov</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:1">{<block_content pos:start="17:5" pos:end="127:15">

    <comment type="block" pos:start="7:5" pos:end="15:7">/* Perform I/O through a temporary buffer so that users who scribble over

     * their read buffer while the operation is in progress do not end up

     * modifying the image file.  This is critical for zero-copy guest I/O

     * where anything might happen inside guest memory.

     */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:23">bounce_buffer</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">BlockDriver</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">drv</name> <init pos:start="21:22" pos:end="21:30">= <expr pos:start="21:24" pos:end="21:30"><name pos:start="21:24" pos:end="21:30"><name pos:start="21:24" pos:end="21:25">bs</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:16">iovec</name></name></type> <name pos:start="23:18" pos:end="23:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:29"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">QEMUIOVector</name></type> <name pos:start="25:18" pos:end="25:28">bounce_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">int64_t</name></type> <name pos:start="27:13" pos:end="27:30">cluster_sector_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:26">cluster_nb_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:10">size_t</name></type> <name pos:start="31:12" pos:end="31:21">skip_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:12"><decl pos:start="33:5" pos:end="33:11"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="41:7">/* Cover entire cluster so no additional backing file I/O is required when

     * allocating cluster in the image file.

     */</comment>

    <expr_stmt pos:start="43:5" pos:end="45:69"><expr pos:start="43:5" pos:end="45:68"><call pos:start="43:5" pos:end="45:68"><name pos:start="43:5" pos:end="43:26">bdrv_round_to_clusters</name><argument_list pos:start="43:27" pos:end="45:68">(<argument pos:start="43:28" pos:end="43:29"><expr pos:start="43:28" pos:end="43:29"><name pos:start="43:28" pos:end="43:29">bs</name></expr></argument>, <argument pos:start="43:32" pos:end="43:41"><expr pos:start="43:32" pos:end="43:41"><name pos:start="43:32" pos:end="43:41">sector_num</name></expr></argument>, <argument pos:start="43:44" pos:end="43:53"><expr pos:start="43:44" pos:end="43:53"><name pos:start="43:44" pos:end="43:53">nb_sectors</name></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:46"><expr pos:start="45:28" pos:end="45:46"><operator pos:start="45:28" pos:end="45:28">&amp;</operator><name pos:start="45:29" pos:end="45:46">cluster_sector_num</name></expr></argument>, <argument pos:start="45:49" pos:end="45:67"><expr pos:start="45:49" pos:end="45:67"><operator pos:start="45:49" pos:end="45:49">&amp;</operator><name pos:start="45:50" pos:end="45:67">cluster_nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:75"><expr pos:start="49:5" pos:end="51:74"><call pos:start="49:5" pos:end="51:74"><name pos:start="49:5" pos:end="49:34">trace_bdrv_co_do_copy_on_readv</name><argument_list pos:start="49:35" pos:end="51:74">(<argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><name pos:start="49:36" pos:end="49:37">bs</name></expr></argument>, <argument pos:start="49:40" pos:end="49:49"><expr pos:start="49:40" pos:end="49:49"><name pos:start="49:40" pos:end="49:49">sector_num</name></expr></argument>, <argument pos:start="49:52" pos:end="49:61"><expr pos:start="49:52" pos:end="49:61"><name pos:start="49:52" pos:end="49:61">nb_sectors</name></expr></argument>,

                                   <argument pos:start="51:36" pos:end="51:53"><expr pos:start="51:36" pos:end="51:53"><name pos:start="51:36" pos:end="51:53">cluster_sector_num</name></expr></argument>, <argument pos:start="51:56" pos:end="51:73"><expr pos:start="51:56" pos:end="51:73"><name pos:start="51:56" pos:end="51:73">cluster_nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:56"><expr pos:start="55:5" pos:end="55:55"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:7">iov</name><operator pos:start="55:8" pos:end="55:8">.</operator><name pos:start="55:9" pos:end="55:15">iov_len</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:36">cluster_nb_sectors</name> <operator pos:start="55:38" pos:end="55:38">*</operator> <name pos:start="55:40" pos:end="55:55">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:68"><expr pos:start="57:5" pos:end="57:67"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:7">iov</name><operator pos:start="57:8" pos:end="57:8">.</operator><name pos:start="57:9" pos:end="57:16">iov_base</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:32">bounce_buffer</name> <operator pos:start="57:34" pos:end="57:34">=</operator> <call pos:start="57:36" pos:end="57:67"><name pos:start="57:36" pos:end="57:50">qemu_blockalign</name><argument_list pos:start="57:51" pos:end="57:67">(<argument pos:start="57:52" pos:end="57:53"><expr pos:start="57:52" pos:end="57:53"><name pos:start="57:52" pos:end="57:53">bs</name></expr></argument>, <argument pos:start="57:56" pos:end="57:66"><expr pos:start="57:56" pos:end="57:66"><name pos:start="57:56" pos:end="57:66"><name pos:start="57:56" pos:end="57:58">iov</name><operator pos:start="57:59" pos:end="57:59">.</operator><name pos:start="57:60" pos:end="57:66">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:52"><expr pos:start="59:5" pos:end="59:51"><call pos:start="59:5" pos:end="59:51"><name pos:start="59:5" pos:end="59:28">qemu_iovec_init_external</name><argument_list pos:start="59:29" pos:end="59:51">(<argument pos:start="59:30" pos:end="59:41"><expr pos:start="59:30" pos:end="59:41"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:41">bounce_qiov</name></expr></argument>, <argument pos:start="59:44" pos:end="59:47"><expr pos:start="59:44" pos:end="59:47"><operator pos:start="59:44" pos:end="59:44">&amp;</operator><name pos:start="59:45" pos:end="59:47">iov</name></expr></argument>, <argument pos:start="59:50" pos:end="59:50"><expr pos:start="59:50" pos:end="59:50"><literal type="number" pos:start="59:50" pos:end="59:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="65:43"><expr pos:start="63:5" pos:end="65:42"><name pos:start="63:5" pos:end="63:7">ret</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="65:42"><name pos:start="63:11" pos:end="63:28"><name pos:start="63:11" pos:end="63:13">drv</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:28">bdrv_co_readv</name></name><argument_list pos:start="63:29" pos:end="65:42">(<argument pos:start="63:30" pos:end="63:31"><expr pos:start="63:30" pos:end="63:31"><name pos:start="63:30" pos:end="63:31">bs</name></expr></argument>, <argument pos:start="63:34" pos:end="63:51"><expr pos:start="63:34" pos:end="63:51"><name pos:start="63:34" pos:end="63:51">cluster_sector_num</name></expr></argument>, <argument pos:start="63:54" pos:end="63:71"><expr pos:start="63:54" pos:end="63:71"><name pos:start="63:54" pos:end="63:71">cluster_nb_sectors</name></expr></argument>,

                             <argument pos:start="65:30" pos:end="65:41"><expr pos:start="65:30" pos:end="65:41"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:41">bounce_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">&lt;</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>)</condition> <block pos:start="67:18" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:17">

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="95:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="77:51">(<expr pos:start="75:9" pos:end="77:50"><name pos:start="75:9" pos:end="75:33"><name pos:start="75:9" pos:end="75:11">drv</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:33">bdrv_co_write_zeroes</name></name> <operator pos:start="75:35" pos:end="75:36">&amp;&amp;</operator>

        <call pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:22">buffer_is_zero</name><argument_list pos:start="77:23" pos:end="77:50">(<argument pos:start="77:24" pos:end="77:36"><expr pos:start="77:24" pos:end="77:36"><name pos:start="77:24" pos:end="77:36">bounce_buffer</name></expr></argument>, <argument pos:start="77:39" pos:end="77:49"><expr pos:start="77:39" pos:end="77:49"><name pos:start="77:39" pos:end="77:49"><name pos:start="77:39" pos:end="77:41">iov</name><operator pos:start="77:42" pos:end="77:42">.</operator><name pos:start="77:43" pos:end="77:49">iov_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:53" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:61">

        <expr_stmt pos:start="79:9" pos:end="81:61"><expr pos:start="79:9" pos:end="81:60"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="81:60"><name pos:start="79:15" pos:end="79:37">bdrv_co_do_write_zeroes</name><argument_list pos:start="79:38" pos:end="81:60">(<argument pos:start="79:39" pos:end="79:40"><expr pos:start="79:39" pos:end="79:40"><name pos:start="79:39" pos:end="79:40">bs</name></expr></argument>, <argument pos:start="79:43" pos:end="79:60"><expr pos:start="79:43" pos:end="79:60"><name pos:start="79:43" pos:end="79:60">cluster_sector_num</name></expr></argument>,

                                      <argument pos:start="81:39" pos:end="81:56"><expr pos:start="81:39" pos:end="81:56"><name pos:start="81:39" pos:end="81:56">cluster_nb_sectors</name></expr></argument>, <argument pos:start="81:59" pos:end="81:59"><expr pos:start="81:59" pos:end="81:59"><literal type="number" pos:start="81:59" pos:end="81:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="95:5">else <block pos:start="83:12" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:48">

        <comment type="block" pos:start="85:9" pos:end="89:11">/* This does not change the data on the disk, it is not necessary

         * to flush even in cache=writethrough mode.

         */</comment>

        <expr_stmt pos:start="91:9" pos:end="93:48"><expr pos:start="91:9" pos:end="93:47"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="93:47"><name pos:start="91:15" pos:end="91:33"><name pos:start="91:15" pos:end="91:17">drv</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:33">bdrv_co_writev</name></name><argument_list pos:start="91:34" pos:end="93:47">(<argument pos:start="91:35" pos:end="91:36"><expr pos:start="91:35" pos:end="91:36"><name pos:start="91:35" pos:end="91:36">bs</name></expr></argument>, <argument pos:start="91:39" pos:end="91:56"><expr pos:start="91:39" pos:end="91:56"><name pos:start="91:39" pos:end="91:56">cluster_sector_num</name></expr></argument>, <argument pos:start="91:59" pos:end="91:76"><expr pos:start="91:59" pos:end="91:76"><name pos:start="91:59" pos:end="91:76">cluster_nb_sectors</name></expr></argument>,

                                  <argument pos:start="93:35" pos:end="93:46"><expr pos:start="93:35" pos:end="93:46"><operator pos:start="93:35" pos:end="93:35">&amp;</operator><name pos:start="93:36" pos:end="93:46">bounce_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="99:5" pos:end="111:5"><if pos:start="99:5" pos:end="111:5">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">&lt;</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>)</condition> <block pos:start="99:18" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:17">

        <comment type="block" pos:start="101:9" pos:end="107:11">/* It might be okay to ignore write errors for guest requests.  If this

         * is a deliberate copy-on-read then we don't want to ignore the error.

         * Simply report it in all cases.

         */</comment>

        <goto pos:start="109:9" pos:end="109:17">goto <name pos:start="109:14" pos:end="109:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:70"><expr pos:start="115:5" pos:end="115:69"><name pos:start="115:5" pos:end="115:14">skip_bytes</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <operator pos:start="115:18" pos:end="115:18">(</operator><name pos:start="115:19" pos:end="115:28">sector_num</name> <operator pos:start="115:30" pos:end="115:30">-</operator> <name pos:start="115:32" pos:end="115:49">cluster_sector_num</name><operator pos:start="115:50" pos:end="115:50">)</operator> <operator pos:start="115:52" pos:end="115:52">*</operator> <name pos:start="115:54" pos:end="115:69">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="119:55"><expr pos:start="117:5" pos:end="119:54"><call pos:start="117:5" pos:end="119:54"><name pos:start="117:5" pos:end="117:23">qemu_iovec_from_buf</name><argument_list pos:start="117:24" pos:end="119:54">(<argument pos:start="117:25" pos:end="117:28"><expr pos:start="117:25" pos:end="117:28"><name pos:start="117:25" pos:end="117:28">qiov</name></expr></argument>, <argument pos:start="117:31" pos:end="117:31"><expr pos:start="117:31" pos:end="117:31"><literal type="number" pos:start="117:31" pos:end="117:31">0</literal></expr></argument>, <argument pos:start="117:34" pos:end="117:59"><expr pos:start="117:34" pos:end="117:59"><name pos:start="117:34" pos:end="117:46">bounce_buffer</name> <operator pos:start="117:48" pos:end="117:48">+</operator> <name pos:start="117:50" pos:end="117:59">skip_bytes</name></expr></argument>,

                        <argument pos:start="119:25" pos:end="119:53"><expr pos:start="119:25" pos:end="119:53"><name pos:start="119:25" pos:end="119:34">nb_sectors</name> <operator pos:start="119:36" pos:end="119:36">*</operator> <name pos:start="119:38" pos:end="119:53">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="123:1" pos:end="123:4"><name pos:start="123:1" pos:end="123:3">err</name>:</label>

    <expr_stmt pos:start="125:5" pos:end="125:30"><expr pos:start="125:5" pos:end="125:29"><call pos:start="125:5" pos:end="125:29"><name pos:start="125:5" pos:end="125:14">qemu_vfree</name><argument_list pos:start="125:15" pos:end="125:29">(<argument pos:start="125:16" pos:end="125:28"><expr pos:start="125:16" pos:end="125:28"><name pos:start="125:16" pos:end="125:28">bounce_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="127:5" pos:end="127:15">return <expr pos:start="127:12" pos:end="127:14"><name pos:start="127:12" pos:end="127:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
