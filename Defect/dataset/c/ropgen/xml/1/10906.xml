<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10906.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">spapr_add_lmbs</name><parameter_list pos:start="1:27" pos:end="3:55">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">DeviceState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">dev</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:58"><name pos:start="1:46" pos:end="1:53">uint64_t</name></type> <name pos:start="1:55" pos:end="1:58">addr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:73"><decl pos:start="1:61" pos:end="1:73"><type pos:start="1:61" pos:end="1:73"><name pos:start="1:61" pos:end="1:68">uint64_t</name></type> <name pos:start="1:70" pos:end="1:73">size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:40"><decl pos:start="3:28" pos:end="3:40"><type pos:start="3:28" pos:end="3:40"><name pos:start="3:28" pos:end="3:35">uint32_t</name></type> <name pos:start="3:37" pos:end="3:40">node</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:54"><decl pos:start="3:43" pos:end="3:54"><type pos:start="3:43" pos:end="3:54"><name pos:start="3:43" pos:end="3:47">Error</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier><modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:54">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:5" pos:end="55:5">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">sPAPRDRConnector</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">drc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:25">sPAPRDRConnectorClass</name> <modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:31">drck</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">nr_lmbs</name> <init pos:start="11:22" pos:end="11:51">= <expr pos:start="11:24" pos:end="11:51"><name pos:start="11:24" pos:end="11:27">size</name><operator pos:start="11:28" pos:end="11:28">/</operator><name pos:start="11:29" pos:end="11:51">SPAPR_MEMORY_BLOCK_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:21">fdt_offset</name></decl>, <decl pos:start="13:24" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:24" pos:end="13:31">fdt_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">fdt</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="43:5">for <control pos:start="19:9" pos:end="19:33">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:28"><expr pos:start="19:17" pos:end="19:27"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <name pos:start="19:21" pos:end="19:27">nr_lmbs</name></expr>;</condition> <incr pos:start="19:30" pos:end="19:32"><expr pos:start="19:30" pos:end="19:32"><name pos:start="19:30" pos:end="19:30">i</name><operator pos:start="19:31" pos:end="19:32">++</operator></expr></incr>)</control> <block pos:start="19:35" pos:end="43:5">{<block_content pos:start="21:9" pos:end="41:40">

        <expr_stmt pos:start="21:9" pos:end="23:46"><expr pos:start="21:9" pos:end="23:45"><name pos:start="21:9" pos:end="21:11">drc</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="23:45"><name pos:start="21:15" pos:end="21:38">spapr_dr_connector_by_id</name><argument_list pos:start="21:39" pos:end="23:45">(<argument pos:start="21:40" pos:end="21:66"><expr pos:start="21:40" pos:end="21:66"><name pos:start="21:40" pos:end="21:66">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                <argument pos:start="23:17" pos:end="23:44"><expr pos:start="23:17" pos:end="23:44"><name pos:start="23:17" pos:end="23:20">addr</name><operator pos:start="23:21" pos:end="23:21">/</operator><name pos:start="23:22" pos:end="23:44">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:22"><expr pos:start="25:9" pos:end="25:21"><call pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:16">g_assert</name><argument_list pos:start="25:17" pos:end="25:21">(<argument pos:start="25:18" pos:end="25:20"><expr pos:start="25:18" pos:end="25:20"><name pos:start="25:18" pos:end="25:20">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:11">fdt</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:43"><name pos:start="29:15" pos:end="29:32">create_device_tree</name><argument_list pos:start="29:33" pos:end="29:43">(<argument pos:start="29:34" pos:end="29:42"><expr pos:start="29:34" pos:end="29:42"><operator pos:start="29:34" pos:end="29:34">&amp;</operator><name pos:start="29:35" pos:end="29:42">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="33:73"><expr pos:start="31:9" pos:end="33:72"><name pos:start="31:9" pos:end="31:18">fdt_offset</name> <operator pos:start="31:20" pos:end="31:20">=</operator> <call pos:start="31:22" pos:end="33:72"><name pos:start="31:22" pos:end="31:47">spapr_populate_memory_node</name><argument_list pos:start="31:48" pos:end="33:72">(<argument pos:start="31:49" pos:end="31:51"><expr pos:start="31:49" pos:end="31:51"><name pos:start="31:49" pos:end="31:51">fdt</name></expr></argument>, <argument pos:start="31:54" pos:end="31:57"><expr pos:start="31:54" pos:end="31:57"><name pos:start="31:54" pos:end="31:57">node</name></expr></argument>, <argument pos:start="31:60" pos:end="31:63"><expr pos:start="31:60" pos:end="31:63"><name pos:start="31:60" pos:end="31:63">addr</name></expr></argument>,

                                                <argument pos:start="33:49" pos:end="33:71"><expr pos:start="33:49" pos:end="33:71"><name pos:start="33:49" pos:end="33:71">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:49"><expr pos:start="37:9" pos:end="37:48"><name pos:start="37:9" pos:end="37:12">drck</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:48"><name pos:start="37:16" pos:end="37:43">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="37:44" pos:end="37:48">(<argument pos:start="37:45" pos:end="37:47"><expr pos:start="37:45" pos:end="37:47"><name pos:start="37:45" pos:end="37:47">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:72"><expr pos:start="39:9" pos:end="39:71"><call pos:start="39:9" pos:end="39:71"><name pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:12">drck</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:20">attach</name></name><argument_list pos:start="39:21" pos:end="39:71">(<argument pos:start="39:22" pos:end="39:24"><expr pos:start="39:22" pos:end="39:24"><name pos:start="39:22" pos:end="39:24">drc</name></expr></argument>, <argument pos:start="39:27" pos:end="39:29"><expr pos:start="39:27" pos:end="39:29"><name pos:start="39:27" pos:end="39:29">dev</name></expr></argument>, <argument pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><name pos:start="39:32" pos:end="39:34">fdt</name></expr></argument>, <argument pos:start="39:37" pos:end="39:46"><expr pos:start="39:37" pos:end="39:46"><name pos:start="39:37" pos:end="39:46">fdt_offset</name></expr></argument>, <argument pos:start="39:49" pos:end="39:64"><expr pos:start="39:49" pos:end="39:64"><operator pos:start="39:49" pos:end="39:49">!</operator><name pos:start="39:50" pos:end="39:64"><name pos:start="39:50" pos:end="39:52">dev</name><operator pos:start="39:53" pos:end="39:54">-&gt;</operator><name pos:start="39:55" pos:end="39:64">hotplugged</name></name></expr></argument>, <argument pos:start="39:67" pos:end="39:70"><expr pos:start="39:67" pos:end="39:70"><name pos:start="39:67" pos:end="39:70">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:12">addr</name> <operator pos:start="41:14" pos:end="41:15">+=</operator> <name pos:start="41:17" pos:end="41:39">SPAPR_MEMORY_BLOCK_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="45:5" pos:end="49:7">/* send hotplug notification to the

     * guest only in case of hotplugged memory

     */</comment>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:24">(<expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:11">dev</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:23">hotplugged</name></name></expr>)</condition> <block pos:start="51:26" pos:end="55:5">{<block_content pos:start="53:8" pos:end="53:76">

       <expr_stmt pos:start="53:8" pos:end="53:76"><expr pos:start="53:8" pos:end="53:75"><call pos:start="53:8" pos:end="53:75"><name pos:start="53:8" pos:end="53:37">spapr_hotplug_req_add_by_count</name><argument_list pos:start="53:38" pos:end="53:75">(<argument pos:start="53:39" pos:end="53:65"><expr pos:start="53:39" pos:end="53:65"><name pos:start="53:39" pos:end="53:65">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>, <argument pos:start="53:68" pos:end="53:74"><expr pos:start="53:68" pos:end="53:74"><name pos:start="53:68" pos:end="53:74">nr_lmbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
