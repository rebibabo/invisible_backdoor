<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12910.c" pos:tabs="8"><function pos:start="1:1" pos:end="96:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">vhost_set_memory</name><parameter_list pos:start="1:29" pos:end="5:38">(<parameter pos:start="1:30" pos:end="1:53"><decl pos:start="1:30" pos:end="1:53"><type pos:start="1:30" pos:end="1:53"><name pos:start="1:30" pos:end="1:43">MemoryListener</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:53">listener</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:57"><decl pos:start="3:30" pos:end="3:57"><type pos:start="3:30" pos:end="3:57"><name pos:start="3:30" pos:end="3:48">MemoryRegionSection</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:57">section</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:37"><decl pos:start="5:30" pos:end="5:37"><type pos:start="5:30" pos:end="5:37"><name pos:start="5:30" pos:end="5:33">bool</name></type> <name pos:start="5:35" pos:end="5:37">add</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="96:1">{<block_content pos:start="9:5" pos:end="93:31">

    <decl_stmt pos:start="9:5" pos:end="11:58"><decl pos:start="9:5" pos:end="11:57"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:20">vhost_dev</name></name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">dev</name> <init pos:start="9:27" pos:end="11:57">= <expr pos:start="9:29" pos:end="11:57"><call pos:start="9:29" pos:end="11:57"><name pos:start="9:29" pos:end="9:40">container_of</name><argument_list pos:start="9:41" pos:end="11:57">(<argument pos:start="9:42" pos:end="9:49"><expr pos:start="9:42" pos:end="9:49"><name pos:start="9:42" pos:end="9:49">listener</name></expr></argument>, <argument pos:start="9:52" pos:end="9:67"><expr pos:start="9:52" pos:end="9:67">struct <name pos:start="9:59" pos:end="9:67">vhost_dev</name></expr></argument>,

                                         <argument pos:start="11:42" pos:end="11:56"><expr pos:start="11:42" pos:end="11:56"><name pos:start="11:42" pos:end="11:56">memory_listener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:61"><decl pos:start="13:5" pos:end="13:60"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:21">start_addr</name> <init pos:start="13:23" pos:end="13:60">= <expr pos:start="13:25" pos:end="13:60"><name pos:start="13:25" pos:end="13:60"><name pos:start="13:25" pos:end="13:31">section</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:60">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:19">size</name> <init pos:start="15:21" pos:end="15:49">= <expr pos:start="15:23" pos:end="15:49"><call pos:start="15:23" pos:end="15:49"><name pos:start="15:23" pos:end="15:34">int128_get64</name><argument_list pos:start="15:35" pos:end="15:49">(<argument pos:start="15:36" pos:end="15:48"><expr pos:start="15:36" pos:end="15:48"><name pos:start="15:36" pos:end="15:48"><name pos:start="15:36" pos:end="15:42">section</name><operator pos:start="15:43" pos:end="15:44">-&gt;</operator><name pos:start="15:45" pos:end="15:48">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="19:87"><decl pos:start="17:5" pos:end="19:86"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:18">log_dirty</name> <init pos:start="17:20" pos:end="19:86">=

        <expr pos:start="19:9" pos:end="19:86"><call pos:start="19:9" pos:end="19:53"><name pos:start="19:9" pos:end="19:40">memory_region_get_dirty_log_mask</name><argument_list pos:start="19:41" pos:end="19:53">(<argument pos:start="19:42" pos:end="19:52"><expr pos:start="19:42" pos:end="19:52"><name pos:start="19:42" pos:end="19:52"><name pos:start="19:42" pos:end="19:48">section</name><operator pos:start="19:49" pos:end="19:50">-&gt;</operator><name pos:start="19:51" pos:end="19:52">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:55" pos:end="19:55">&amp;</operator> <operator pos:start="19:57" pos:end="19:57">~</operator><operator pos:start="19:58" pos:end="19:58">(</operator><literal type="number" pos:start="19:59" pos:end="19:59">1</literal> <operator pos:start="19:61" pos:end="19:62">&lt;&lt;</operator> <name pos:start="19:64" pos:end="19:85">DIRTY_MEMORY_MIGRATION</name><operator pos:start="19:86" pos:end="19:86">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="23:63"><decl pos:start="21:5" pos:end="23:62"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">s</name> <init pos:start="21:11" pos:end="23:62">= <expr pos:start="21:13" pos:end="23:62"><call pos:start="21:13" pos:end="21:50"><name pos:start="21:13" pos:end="21:20">offsetof</name><argument_list pos:start="21:21" pos:end="21:50">(<argument pos:start="21:22" pos:end="21:40"><expr pos:start="21:22" pos:end="21:40">struct <name pos:start="21:29" pos:end="21:40">vhost_memory</name></expr></argument>, <argument pos:start="21:43" pos:end="21:49"><expr pos:start="21:43" pos:end="21:49"><name pos:start="21:43" pos:end="21:49">regions</name></expr></argument>)</argument_list></call> <operator pos:start="21:52" pos:end="21:52">+</operator>

        <operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:27"><name pos:start="23:10" pos:end="23:12">dev</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:17">mem</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:27">nregions</name></name> <operator pos:start="23:29" pos:end="23:29">+</operator> <literal type="number" pos:start="23:31" pos:end="23:31">1</literal><operator pos:start="23:32" pos:end="23:32">)</operator> <operator pos:start="23:34" pos:end="23:34">*</operator> <sizeof pos:start="23:36" pos:end="23:62">sizeof <name pos:start="23:43" pos:end="23:62"><name pos:start="23:43" pos:end="23:45">dev</name><operator pos:start="23:46" pos:end="23:47">-&gt;</operator><name pos:start="23:48" pos:end="23:50">mem</name><operator pos:start="23:51" pos:end="23:52">-&gt;</operator><name pos:start="23:53" pos:end="23:59">regions</name><index pos:start="23:60" pos:end="23:62">[<expr pos:start="23:61" pos:end="23:61"><literal type="number" pos:start="23:61" pos:end="23:61">0</literal></expr>]</index></name></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">void</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:13">ram</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:7">dev</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:12">mem</name></name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:37"><name pos:start="29:16" pos:end="29:24">g_realloc</name><argument_list pos:start="29:25" pos:end="29:37">(<argument pos:start="29:26" pos:end="29:33"><expr pos:start="29:26" pos:end="29:33"><name pos:start="29:26" pos:end="29:33"><name pos:start="29:26" pos:end="29:28">dev</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:33">mem</name></name></expr></argument>, <argument pos:start="29:36" pos:end="29:36"><expr pos:start="29:36" pos:end="29:36"><name pos:start="29:36" pos:end="29:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:18">(<expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:17">log_dirty</name></expr>)</condition> <block pos:start="33:20" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:20">

        <expr_stmt pos:start="35:9" pos:end="35:20"><expr pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:11">add</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:19">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:17"><expr pos:start="41:5" pos:end="41:16"><call pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:16">(<argument pos:start="41:12" pos:end="41:15"><expr pos:start="41:12" pos:end="41:15"><name pos:start="41:12" pos:end="41:15">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:84">/* Optimize no-change case. At least cirrus_vga does this a lot at this time. */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:81"><expr pos:start="47:5" pos:end="47:80"><name pos:start="47:5" pos:end="47:7">ram</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:48"><name pos:start="47:11" pos:end="47:35">memory_region_get_ram_ptr</name><argument_list pos:start="47:36" pos:end="47:48">(<argument pos:start="47:37" pos:end="47:47"><expr pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:43">section</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:47">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:50" pos:end="47:50">+</operator> <name pos:start="47:52" pos:end="47:80"><name pos:start="47:52" pos:end="47:58">section</name><operator pos:start="47:59" pos:end="47:60">-&gt;</operator><name pos:start="47:61" pos:end="47:80">offset_within_region</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="69:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">add</name></expr>)</condition> <block pos:start="49:14" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:9">

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:73">(<expr pos:start="51:13" pos:end="51:72"><operator pos:start="51:13" pos:end="51:13">!</operator><call pos:start="51:14" pos:end="51:72"><name pos:start="51:14" pos:end="51:33">vhost_dev_cmp_memory</name><argument_list pos:start="51:34" pos:end="51:72">(<argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">dev</name></expr></argument>, <argument pos:start="51:40" pos:end="51:49"><expr pos:start="51:40" pos:end="51:49"><name pos:start="51:40" pos:end="51:49">start_addr</name></expr></argument>, <argument pos:start="51:52" pos:end="51:55"><expr pos:start="51:52" pos:end="51:55"><name pos:start="51:52" pos:end="51:55">size</name></expr></argument>, <argument pos:start="51:58" pos:end="51:71"><expr pos:start="51:58" pos:end="51:71"><operator pos:start="51:58" pos:end="51:58">(</operator><name pos:start="51:59" pos:end="51:67">uintptr_t</name><operator pos:start="51:68" pos:end="51:68">)</operator><name pos:start="51:69" pos:end="51:71">ram</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:75" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:19">

            <comment type="block" pos:start="53:13" pos:end="53:65">/* Region exists with same address. Nothing to do. */</comment>

            <return pos:start="55:13" pos:end="55:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="69:5">else <block pos:start="59:12" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:9">

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:55">(<expr pos:start="61:13" pos:end="61:54"><operator pos:start="61:13" pos:end="61:13">!</operator><call pos:start="61:14" pos:end="61:54"><name pos:start="61:14" pos:end="61:31">vhost_dev_find_reg</name><argument_list pos:start="61:32" pos:end="61:54">(<argument pos:start="61:33" pos:end="61:35"><expr pos:start="61:33" pos:end="61:35"><name pos:start="61:33" pos:end="61:35">dev</name></expr></argument>, <argument pos:start="61:38" pos:end="61:47"><expr pos:start="61:38" pos:end="61:47"><name pos:start="61:38" pos:end="61:47">start_addr</name></expr></argument>, <argument pos:start="61:50" pos:end="61:53"><expr pos:start="61:50" pos:end="61:53"><name pos:start="61:50" pos:end="61:53">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:57" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:19">

            <comment type="block" pos:start="63:13" pos:end="63:70">/* Removing region that we don't access. Nothing to do. */</comment>

            <return pos:start="65:13" pos:end="65:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:53"><expr pos:start="73:5" pos:end="73:52"><call pos:start="73:5" pos:end="73:52"><name pos:start="73:5" pos:end="73:29">vhost_dev_unassign_memory</name><argument_list pos:start="73:30" pos:end="73:52">(<argument pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:33">dev</name></expr></argument>, <argument pos:start="73:36" pos:end="73:45"><expr pos:start="73:36" pos:end="73:45"><name pos:start="73:36" pos:end="73:45">start_addr</name></expr></argument>, <argument pos:start="73:48" pos:end="73:51"><expr pos:start="73:48" pos:end="73:51"><name pos:start="73:48" pos:end="73:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="87:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:12">(<expr pos:start="75:9" pos:end="75:11"><name pos:start="75:9" pos:end="75:11">add</name></expr>)</condition> <block pos:start="75:14" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:71">

        <comment type="block" pos:start="77:9" pos:end="77:64">/* Add given mapping, merging adjacent regions if any */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:71"><expr pos:start="79:9" pos:end="79:70"><call pos:start="79:9" pos:end="79:70"><name pos:start="79:9" pos:end="79:31">vhost_dev_assign_memory</name><argument_list pos:start="79:32" pos:end="79:70">(<argument pos:start="79:33" pos:end="79:35"><expr pos:start="79:33" pos:end="79:35"><name pos:start="79:33" pos:end="79:35">dev</name></expr></argument>, <argument pos:start="79:38" pos:end="79:47"><expr pos:start="79:38" pos:end="79:47"><name pos:start="79:38" pos:end="79:47">start_addr</name></expr></argument>, <argument pos:start="79:50" pos:end="79:53"><expr pos:start="79:50" pos:end="79:53"><name pos:start="79:50" pos:end="79:53">size</name></expr></argument>, <argument pos:start="79:56" pos:end="79:69"><expr pos:start="79:56" pos:end="79:69"><operator pos:start="79:56" pos:end="79:56">(</operator><name pos:start="79:57" pos:end="79:65">uintptr_t</name><operator pos:start="79:66" pos:end="79:66">)</operator><name pos:start="79:67" pos:end="79:69">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="87:5">else <block pos:start="81:12" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:57">

        <comment type="block" pos:start="83:9" pos:end="83:57">/* Remove old mapping for this memory, if any. */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:57"><expr pos:start="85:9" pos:end="85:56"><call pos:start="85:9" pos:end="85:56"><name pos:start="85:9" pos:end="85:33">vhost_dev_unassign_memory</name><argument_list pos:start="85:34" pos:end="85:56">(<argument pos:start="85:35" pos:end="85:37"><expr pos:start="85:35" pos:end="85:37"><name pos:start="85:35" pos:end="85:37">dev</name></expr></argument>, <argument pos:start="85:40" pos:end="85:49"><expr pos:start="85:40" pos:end="85:49"><name pos:start="85:40" pos:end="85:49">start_addr</name></expr></argument>, <argument pos:start="85:52" pos:end="85:55"><expr pos:start="85:52" pos:end="85:55"><name pos:start="85:52" pos:end="85:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:79"><expr pos:start="89:5" pos:end="89:78"><name pos:start="89:5" pos:end="89:31"><name pos:start="89:5" pos:end="89:7">dev</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:31">mem_changed_start_addr</name></name> <operator pos:start="89:33" pos:end="89:33">=</operator> <call pos:start="89:35" pos:end="89:78"><name pos:start="89:35" pos:end="89:37">MIN</name><argument_list pos:start="89:38" pos:end="89:78">(<argument pos:start="89:39" pos:end="89:65"><expr pos:start="89:39" pos:end="89:65"><name pos:start="89:39" pos:end="89:65"><name pos:start="89:39" pos:end="89:41">dev</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:65">mem_changed_start_addr</name></name></expr></argument>, <argument pos:start="89:68" pos:end="89:77"><expr pos:start="89:68" pos:end="89:77"><name pos:start="89:68" pos:end="89:77">start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:86"><expr pos:start="91:5" pos:end="91:85"><name pos:start="91:5" pos:end="91:29"><name pos:start="91:5" pos:end="91:7">dev</name><operator pos:start="91:8" pos:end="91:9">-&gt;</operator><name pos:start="91:10" pos:end="91:29">mem_changed_end_addr</name></name> <operator pos:start="91:31" pos:end="91:31">=</operator> <call pos:start="91:33" pos:end="91:85"><name pos:start="91:33" pos:end="91:35">MAX</name><argument_list pos:start="91:36" pos:end="91:85">(<argument pos:start="91:37" pos:end="91:61"><expr pos:start="91:37" pos:end="91:61"><name pos:start="91:37" pos:end="91:61"><name pos:start="91:37" pos:end="91:39">dev</name><operator pos:start="91:40" pos:end="91:41">-&gt;</operator><name pos:start="91:42" pos:end="91:61">mem_changed_end_addr</name></name></expr></argument>, <argument pos:start="91:64" pos:end="91:84"><expr pos:start="91:64" pos:end="91:84"><name pos:start="91:64" pos:end="91:73">start_addr</name> <operator pos:start="91:75" pos:end="91:75">+</operator> <name pos:start="91:77" pos:end="91:80">size</name> <operator pos:start="91:82" pos:end="91:82">-</operator> <literal type="number" pos:start="91:84" pos:end="91:84">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:31"><expr pos:start="93:5" pos:end="93:30"><name pos:start="93:5" pos:end="93:23"><name pos:start="93:5" pos:end="93:7">dev</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:23">memory_changed</name></name> <operator pos:start="93:25" pos:end="93:25">=</operator> <name pos:start="93:27" pos:end="93:30">true</name></expr>;</expr_stmt>


</block_content>}</block></function></unit>
