<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13260.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">bochs_open</name><parameter_list pos:start="1:22" pos:end="1:54">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:53"><decl pos:start="1:45" pos:end="1:53"><type pos:start="1:45" pos:end="1:53"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:53">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:14">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BDRVBochsState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:34">= <expr pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:26">bs</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:23">bochs_header</name></name></type> <name pos:start="9:25" pos:end="9:29">bochs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:26">bochs_header_v1</name></name></type> <name pos:start="11:28" pos:end="11:36">header_v1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:6">bs</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:17">read_only</name></name> <operator pos:start="15:19" pos:end="15:19">=</operator> <literal type="number" pos:start="15:21" pos:end="15:21">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="15:24" pos:end="15:46">// no write support yet</comment>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:72">(<expr pos:start="19:9" pos:end="19:71"><call pos:start="19:9" pos:end="19:54"><name pos:start="19:9" pos:end="19:18">bdrv_pread</name><argument_list pos:start="19:19" pos:end="19:54">(<argument pos:start="19:20" pos:end="19:27"><expr pos:start="19:20" pos:end="19:27"><name pos:start="19:20" pos:end="19:27"><name pos:start="19:20" pos:end="19:21">bs</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:27">file</name></name></expr></argument>, <argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><literal type="number" pos:start="19:30" pos:end="19:30">0</literal></expr></argument>, <argument pos:start="19:33" pos:end="19:38"><expr pos:start="19:33" pos:end="19:38"><operator pos:start="19:33" pos:end="19:33">&amp;</operator><name pos:start="19:34" pos:end="19:38">bochs</name></expr></argument>, <argument pos:start="19:41" pos:end="19:53"><expr pos:start="19:41" pos:end="19:53"><sizeof pos:start="19:41" pos:end="19:53">sizeof<argument_list pos:start="19:47" pos:end="19:53">(<argument pos:start="19:48" pos:end="19:52"><expr pos:start="19:48" pos:end="19:52"><name pos:start="19:48" pos:end="19:52">bochs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="19:56" pos:end="19:57">!=</operator> <sizeof pos:start="19:59" pos:end="19:71">sizeof<argument_list pos:start="19:65" pos:end="19:71">(<argument pos:start="19:66" pos:end="19:70"><expr pos:start="19:66" pos:end="19:70"><name pos:start="19:66" pos:end="19:70">bochs</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="19:74" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <goto pos:start="21:9" pos:end="21:18">goto <name pos:start="21:14" pos:end="21:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="39:5">if <condition pos:start="27:8" pos:end="35:51">(<expr pos:start="27:9" pos:end="35:50"><call pos:start="27:9" pos:end="27:41"><name pos:start="27:9" pos:end="27:14">strcmp</name><argument_list pos:start="27:15" pos:end="27:41">(<argument pos:start="27:16" pos:end="27:26"><expr pos:start="27:16" pos:end="27:26"><name pos:start="27:16" pos:end="27:26"><name pos:start="27:16" pos:end="27:20">bochs</name><operator pos:start="27:21" pos:end="27:21">.</operator><name pos:start="27:22" pos:end="27:26">magic</name></name></expr></argument>, <argument pos:start="27:29" pos:end="27:40"><expr pos:start="27:29" pos:end="27:40"><name pos:start="27:29" pos:end="27:40">HEADER_MAGIC</name></expr></argument>)</argument_list></call> <operator pos:start="27:43" pos:end="27:44">||</operator>

        <call pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:14">strcmp</name><argument_list pos:start="29:15" pos:end="29:40">(<argument pos:start="29:16" pos:end="29:25"><expr pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:20">bochs</name><operator pos:start="29:21" pos:end="29:21">.</operator><name pos:start="29:22" pos:end="29:25">type</name></name></expr></argument>, <argument pos:start="29:28" pos:end="29:39"><expr pos:start="29:28" pos:end="29:39"><name pos:start="29:28" pos:end="29:39">REDOLOG_TYPE</name></expr></argument>)</argument_list></call> <operator pos:start="29:42" pos:end="29:43">||</operator>

        <call pos:start="31:9" pos:end="31:43"><name pos:start="31:9" pos:end="31:14">strcmp</name><argument_list pos:start="31:15" pos:end="31:43">(<argument pos:start="31:16" pos:end="31:28"><expr pos:start="31:16" pos:end="31:28"><name pos:start="31:16" pos:end="31:28"><name pos:start="31:16" pos:end="31:20">bochs</name><operator pos:start="31:21" pos:end="31:21">.</operator><name pos:start="31:22" pos:end="31:28">subtype</name></name></expr></argument>, <argument pos:start="31:31" pos:end="31:42"><expr pos:start="31:31" pos:end="31:42"><name pos:start="31:31" pos:end="31:42">GROWING_TYPE</name></expr></argument>)</argument_list></call> <operator pos:start="31:45" pos:end="31:46">||</operator>

	<operator pos:start="33:9" pos:end="33:9">(</operator><operator pos:start="33:10" pos:end="33:10">(</operator><call pos:start="33:11" pos:end="33:36"><name pos:start="33:11" pos:end="33:21">le32_to_cpu</name><argument_list pos:start="33:22" pos:end="33:36">(<argument pos:start="33:23" pos:end="33:35"><expr pos:start="33:23" pos:end="33:35"><name pos:start="33:23" pos:end="33:35"><name pos:start="33:23" pos:end="33:27">bochs</name><operator pos:start="33:28" pos:end="33:28">.</operator><name pos:start="33:29" pos:end="33:35">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="33:38" pos:end="33:39">!=</operator> <name pos:start="33:41" pos:end="33:54">HEADER_VERSION</name><operator pos:start="33:55" pos:end="33:55">)</operator> <operator pos:start="33:57" pos:end="33:58">&amp;&amp;</operator>

	<operator pos:start="35:9" pos:end="35:9">(</operator><call pos:start="35:10" pos:end="35:35"><name pos:start="35:10" pos:end="35:20">le32_to_cpu</name><argument_list pos:start="35:21" pos:end="35:35">(<argument pos:start="35:22" pos:end="35:34"><expr pos:start="35:22" pos:end="35:34"><name pos:start="35:22" pos:end="35:34"><name pos:start="35:22" pos:end="35:26">bochs</name><operator pos:start="35:27" pos:end="35:27">.</operator><name pos:start="35:28" pos:end="35:34">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="35:37" pos:end="35:38">!=</operator> <name pos:start="35:40" pos:end="35:48">HEADER_V1</name><operator pos:start="35:49" pos:end="35:49">)</operator><operator pos:start="35:50" pos:end="35:50">)</operator></expr>)</condition> <block pos:start="35:53" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:28">

        <return pos:start="37:9" pos:end="37:28">return <expr pos:start="37:16" pos:end="37:27"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:27">EMEDIUMTYPE</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:48">(<expr pos:start="43:9" pos:end="43:47"><call pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:19">le32_to_cpu</name><argument_list pos:start="43:20" pos:end="43:34">(<argument pos:start="43:21" pos:end="43:33"><expr pos:start="43:21" pos:end="43:33"><name pos:start="43:21" pos:end="43:33"><name pos:start="43:21" pos:end="43:25">bochs</name><operator pos:start="43:26" pos:end="43:26">.</operator><name pos:start="43:27" pos:end="43:33">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:36" pos:end="43:37">==</operator> <name pos:start="43:39" pos:end="43:47">HEADER_V1</name></expr>)</condition> <block pos:start="43:50" pos:end="49:5">{<block_content pos:start="45:7" pos:end="47:74">

      <expr_stmt pos:start="45:7" pos:end="45:48"><expr pos:start="45:7" pos:end="45:47"><call pos:start="45:7" pos:end="45:47"><name pos:start="45:7" pos:end="45:12">memcpy</name><argument_list pos:start="45:13" pos:end="45:47">(<argument pos:start="45:14" pos:end="45:23"><expr pos:start="45:14" pos:end="45:23"><operator pos:start="45:14" pos:end="45:14">&amp;</operator><name pos:start="45:15" pos:end="45:23">header_v1</name></expr></argument>, <argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:31">bochs</name></expr></argument>, <argument pos:start="45:34" pos:end="45:46"><expr pos:start="45:34" pos:end="45:46"><sizeof pos:start="45:34" pos:end="45:46">sizeof<argument_list pos:start="45:40" pos:end="45:46">(<argument pos:start="45:41" pos:end="45:45"><expr pos:start="45:41" pos:end="45:45"><name pos:start="45:41" pos:end="45:45">bochs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="47:7" pos:end="47:74"><expr pos:start="47:7" pos:end="47:73"><name pos:start="47:7" pos:end="47:23"><name pos:start="47:7" pos:end="47:8">bs</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:23">total_sectors</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <call pos:start="47:27" pos:end="47:67"><name pos:start="47:27" pos:end="47:37">le64_to_cpu</name><argument_list pos:start="47:38" pos:end="47:67">(<argument pos:start="47:39" pos:end="47:66"><expr pos:start="47:39" pos:end="47:66"><name pos:start="47:39" pos:end="47:66"><name pos:start="47:39" pos:end="47:47">header_v1</name><operator pos:start="47:48" pos:end="47:48">.</operator><name pos:start="47:49" pos:end="47:53">extra</name><operator pos:start="47:54" pos:end="47:54">.</operator><name pos:start="47:55" pos:end="47:61">redolog</name><operator pos:start="47:62" pos:end="47:62">.</operator><name pos:start="47:63" pos:end="47:66">disk</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:69" pos:end="47:69">/</operator> <literal type="number" pos:start="47:71" pos:end="47:73">512</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="53:5">else <block pos:start="49:12" pos:end="53:5">{<block_content pos:start="51:7" pos:end="51:70">

      <expr_stmt pos:start="51:7" pos:end="51:70"><expr pos:start="51:7" pos:end="51:69"><name pos:start="51:7" pos:end="51:23"><name pos:start="51:7" pos:end="51:8">bs</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:23">total_sectors</name></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <call pos:start="51:27" pos:end="51:63"><name pos:start="51:27" pos:end="51:37">le64_to_cpu</name><argument_list pos:start="51:38" pos:end="51:63">(<argument pos:start="51:39" pos:end="51:62"><expr pos:start="51:39" pos:end="51:62"><name pos:start="51:39" pos:end="51:62"><name pos:start="51:39" pos:end="51:43">bochs</name><operator pos:start="51:44" pos:end="51:44">.</operator><name pos:start="51:45" pos:end="51:49">extra</name><operator pos:start="51:50" pos:end="51:50">.</operator><name pos:start="51:51" pos:end="51:57">redolog</name><operator pos:start="51:58" pos:end="51:58">.</operator><name pos:start="51:59" pos:end="51:62">disk</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:65" pos:end="51:65">/</operator> <literal type="number" pos:start="51:67" pos:end="51:69">512</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:63"><expr pos:start="57:5" pos:end="57:62"><name pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:19">catalog_size</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:62"><name pos:start="57:23" pos:end="57:33">le32_to_cpu</name><argument_list pos:start="57:34" pos:end="57:62">(<argument pos:start="57:35" pos:end="57:61"><expr pos:start="57:35" pos:end="57:61"><name pos:start="57:35" pos:end="57:61"><name pos:start="57:35" pos:end="57:39">bochs</name><operator pos:start="57:40" pos:end="57:40">.</operator><name pos:start="57:41" pos:end="57:45">extra</name><operator pos:start="57:46" pos:end="57:46">.</operator><name pos:start="57:47" pos:end="57:53">redolog</name><operator pos:start="57:54" pos:end="57:54">.</operator><name pos:start="57:55" pos:end="57:61">catalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:54"><expr pos:start="59:5" pos:end="59:53"><name pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:21">catalog_bitmap</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <call pos:start="59:25" pos:end="59:53"><name pos:start="59:25" pos:end="59:32">g_malloc</name><argument_list pos:start="59:33" pos:end="59:53">(<argument pos:start="59:34" pos:end="59:52"><expr pos:start="59:34" pos:end="59:52"><name pos:start="59:34" pos:end="59:48"><name pos:start="59:34" pos:end="59:34">s</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:48">catalog_size</name></name> <operator pos:start="59:50" pos:end="59:50">*</operator> <literal type="number" pos:start="59:52" pos:end="59:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:18"><if pos:start="61:5" pos:end="65:18">if <condition pos:start="61:8" pos:end="63:63">(<expr pos:start="61:9" pos:end="63:62"><call pos:start="61:9" pos:end="63:39"><name pos:start="61:9" pos:end="61:18">bdrv_pread</name><argument_list pos:start="61:19" pos:end="63:39">(<argument pos:start="61:20" pos:end="61:27"><expr pos:start="61:20" pos:end="61:27"><name pos:start="61:20" pos:end="61:27"><name pos:start="61:20" pos:end="61:21">bs</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:27">file</name></name></expr></argument>, <argument pos:start="61:30" pos:end="61:54"><expr pos:start="61:30" pos:end="61:54"><call pos:start="61:30" pos:end="61:54"><name pos:start="61:30" pos:end="61:40">le32_to_cpu</name><argument_list pos:start="61:41" pos:end="61:54">(<argument pos:start="61:42" pos:end="61:53"><expr pos:start="61:42" pos:end="61:53"><name pos:start="61:42" pos:end="61:53"><name pos:start="61:42" pos:end="61:46">bochs</name><operator pos:start="61:47" pos:end="61:47">.</operator><name pos:start="61:48" pos:end="61:53">header</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:57" pos:end="61:73"><expr pos:start="61:57" pos:end="61:73"><name pos:start="61:57" pos:end="61:73"><name pos:start="61:57" pos:end="61:57">s</name><operator pos:start="61:58" pos:end="61:59">-&gt;</operator><name pos:start="61:60" pos:end="61:73">catalog_bitmap</name></name></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:38"><expr pos:start="63:20" pos:end="63:38"><name pos:start="63:20" pos:end="63:34"><name pos:start="63:20" pos:end="63:20">s</name><operator pos:start="63:21" pos:end="63:22">-&gt;</operator><name pos:start="63:23" pos:end="63:34">catalog_size</name></name> <operator pos:start="63:36" pos:end="63:36">*</operator> <literal type="number" pos:start="63:38" pos:end="63:38">4</literal></expr></argument>)</argument_list></call> <operator pos:start="63:41" pos:end="63:42">!=</operator> <name pos:start="63:44" pos:end="63:58"><name pos:start="63:44" pos:end="63:44">s</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:58">catalog_size</name></name> <operator pos:start="63:60" pos:end="63:60">*</operator> <literal type="number" pos:start="63:62" pos:end="63:62">4</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:18"><block_content pos:start="65:9" pos:end="65:18">

	<goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <for pos:start="67:5" pos:end="69:44">for <control pos:start="67:9" pos:end="67:41">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:36"><expr pos:start="67:17" pos:end="67:35"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:35"><name pos:start="67:21" pos:end="67:21">s</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:35">catalog_size</name></name></expr>;</condition> <incr pos:start="67:38" pos:end="67:40"><expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:38">i</name><operator pos:start="67:39" pos:end="67:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:9" pos:end="69:44"><block_content pos:start="69:9" pos:end="69:44">

	<expr_stmt pos:start="69:9" pos:end="69:44"><expr pos:start="69:9" pos:end="69:43"><call pos:start="69:9" pos:end="69:43"><name pos:start="69:9" pos:end="69:20">le32_to_cpus</name><argument_list pos:start="69:21" pos:end="69:43">(<argument pos:start="69:22" pos:end="69:42"><expr pos:start="69:22" pos:end="69:42"><operator pos:start="69:22" pos:end="69:22">&amp;</operator><name pos:start="69:23" pos:end="69:42"><name pos:start="69:23" pos:end="69:23">s</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:39">catalog_bitmap</name><index pos:start="69:40" pos:end="69:42">[<expr pos:start="69:41" pos:end="69:41"><name pos:start="69:41" pos:end="69:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="73:5" pos:end="73:71"><expr pos:start="73:5" pos:end="73:70"><name pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:18">data_offset</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <call pos:start="73:22" pos:end="73:46"><name pos:start="73:22" pos:end="73:32">le32_to_cpu</name><argument_list pos:start="73:33" pos:end="73:46">(<argument pos:start="73:34" pos:end="73:45"><expr pos:start="73:34" pos:end="73:45"><name pos:start="73:34" pos:end="73:45"><name pos:start="73:34" pos:end="73:38">bochs</name><operator pos:start="73:39" pos:end="73:39">.</operator><name pos:start="73:40" pos:end="73:45">header</name></name></expr></argument>)</argument_list></call> <operator pos:start="73:48" pos:end="73:48">+</operator> <operator pos:start="73:50" pos:end="73:50">(</operator><name pos:start="73:51" pos:end="73:65"><name pos:start="73:51" pos:end="73:51">s</name><operator pos:start="73:52" pos:end="73:53">-&gt;</operator><name pos:start="73:54" pos:end="73:65">catalog_size</name></name> <operator pos:start="73:67" pos:end="73:67">*</operator> <literal type="number" pos:start="73:69" pos:end="73:69">4</literal><operator pos:start="73:70" pos:end="73:70">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:79"><expr pos:start="77:5" pos:end="77:78"><name pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:20">bitmap_blocks</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <literal type="number" pos:start="77:24" pos:end="77:26">1</literal> <operator pos:start="77:26" pos:end="77:26">+</operator> <operator pos:start="77:28" pos:end="77:28">(</operator><call pos:start="77:29" pos:end="77:67"><name pos:start="77:29" pos:end="77:39">le32_to_cpu</name><argument_list pos:start="77:40" pos:end="77:67">(<argument pos:start="77:41" pos:end="77:66"><expr pos:start="77:41" pos:end="77:66"><name pos:start="77:41" pos:end="77:66"><name pos:start="77:41" pos:end="77:45">bochs</name><operator pos:start="77:46" pos:end="77:46">.</operator><name pos:start="77:47" pos:end="77:51">extra</name><operator pos:start="77:52" pos:end="77:52">.</operator><name pos:start="77:53" pos:end="77:59">redolog</name><operator pos:start="77:60" pos:end="77:60">.</operator><name pos:start="77:61" pos:end="77:66">bitmap</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:69" pos:end="77:69">-</operator> <literal type="number" pos:start="77:71" pos:end="77:71">1</literal><operator pos:start="77:72" pos:end="77:72">)</operator> <operator pos:start="77:74" pos:end="77:74">/</operator> <literal type="number" pos:start="77:76" pos:end="77:78">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:79"><expr pos:start="79:5" pos:end="79:78"><name pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:20">extent_blocks</name></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <literal type="number" pos:start="79:24" pos:end="79:26">1</literal> <operator pos:start="79:26" pos:end="79:26">+</operator> <operator pos:start="79:28" pos:end="79:28">(</operator><call pos:start="79:29" pos:end="79:67"><name pos:start="79:29" pos:end="79:39">le32_to_cpu</name><argument_list pos:start="79:40" pos:end="79:67">(<argument pos:start="79:41" pos:end="79:66"><expr pos:start="79:41" pos:end="79:66"><name pos:start="79:41" pos:end="79:66"><name pos:start="79:41" pos:end="79:45">bochs</name><operator pos:start="79:46" pos:end="79:46">.</operator><name pos:start="79:47" pos:end="79:51">extra</name><operator pos:start="79:52" pos:end="79:52">.</operator><name pos:start="79:53" pos:end="79:59">redolog</name><operator pos:start="79:60" pos:end="79:60">.</operator><name pos:start="79:61" pos:end="79:66">extent</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:69" pos:end="79:69">-</operator> <literal type="number" pos:start="79:71" pos:end="79:71">1</literal><operator pos:start="79:72" pos:end="79:72">)</operator> <operator pos:start="79:74" pos:end="79:74">/</operator> <literal type="number" pos:start="79:76" pos:end="79:78">512</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:61"><expr pos:start="83:5" pos:end="83:60"><name pos:start="83:5" pos:end="83:18"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:18">extent_size</name></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <call pos:start="83:22" pos:end="83:60"><name pos:start="83:22" pos:end="83:32">le32_to_cpu</name><argument_list pos:start="83:33" pos:end="83:60">(<argument pos:start="83:34" pos:end="83:59"><expr pos:start="83:34" pos:end="83:59"><name pos:start="83:34" pos:end="83:59"><name pos:start="83:34" pos:end="83:38">bochs</name><operator pos:start="83:39" pos:end="83:39">.</operator><name pos:start="83:40" pos:end="83:44">extra</name><operator pos:start="83:45" pos:end="83:45">.</operator><name pos:start="83:46" pos:end="83:52">redolog</name><operator pos:start="83:53" pos:end="83:53">.</operator><name pos:start="83:54" pos:end="83:59">extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:33"><expr pos:start="87:5" pos:end="87:32"><call pos:start="87:5" pos:end="87:32"><name pos:start="87:5" pos:end="87:22">qemu_co_mutex_init</name><argument_list pos:start="87:23" pos:end="87:32">(<argument pos:start="87:24" pos:end="87:31"><expr pos:start="87:24" pos:end="87:31"><operator pos:start="87:24" pos:end="87:24">&amp;</operator><name pos:start="87:25" pos:end="87:31"><name pos:start="87:25" pos:end="87:25">s</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

 <label pos:start="91:2" pos:end="91:6"><name pos:start="91:2" pos:end="91:5">fail</name>:</label>

    <return pos:start="93:5" pos:end="93:14">return <expr pos:start="93:12" pos:end="93:13"><operator pos:start="93:12" pos:end="93:12">-</operator><literal type="number" pos:start="93:13" pos:end="93:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
