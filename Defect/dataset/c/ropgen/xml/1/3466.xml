<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3466.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">kvm_irqchip_create</name><parameter_list pos:start="1:30" pos:end="1:42">(<parameter pos:start="1:31" pos:end="1:41"><decl pos:start="1:31" pos:end="1:41"><type pos:start="1:31" pos:end="1:40"><name pos:start="1:31" pos:end="1:38">KVMState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:13">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">QemuOptsList</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">list</name> <init pos:start="5:24" pos:end="5:50">= <expr pos:start="5:26" pos:end="5:50"><call pos:start="5:26" pos:end="5:50"><name pos:start="5:26" pos:end="5:39">qemu_find_opts</name><argument_list pos:start="5:40" pos:end="5:50">(<argument pos:start="5:41" pos:end="5:49"><expr pos:start="5:41" pos:end="5:49"><literal type="string" pos:start="5:41" pos:end="5:49">"machine"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="21:5"><if pos:start="11:5" pos:end="21:5">if <condition pos:start="11:8" pos:end="17:49">(<expr pos:start="11:9" pos:end="17:48"><call pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:20">QTAILQ_EMPTY</name><argument_list pos:start="11:21" pos:end="11:33">(<argument pos:start="11:22" pos:end="11:32"><expr pos:start="11:22" pos:end="11:32"><operator pos:start="11:22" pos:end="11:22">&amp;</operator><name pos:start="11:23" pos:end="11:32"><name pos:start="11:23" pos:end="11:26">list</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:32">head</name></name></expr></argument>)</argument_list></call> <operator pos:start="11:35" pos:end="11:36">||</operator>

        <operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="15:50"><name pos:start="13:10" pos:end="13:26">qemu_opt_get_bool</name><argument_list pos:start="13:27" pos:end="15:50">(<argument pos:start="13:28" pos:end="13:52"><expr pos:start="13:28" pos:end="13:52"><call pos:start="13:28" pos:end="13:52"><name pos:start="13:28" pos:end="13:39">QTAILQ_FIRST</name><argument_list pos:start="13:40" pos:end="13:52">(<argument pos:start="13:41" pos:end="13:51"><expr pos:start="13:41" pos:end="13:51"><operator pos:start="13:41" pos:end="13:41">&amp;</operator><name pos:start="13:42" pos:end="13:51"><name pos:start="13:42" pos:end="13:45">list</name><operator pos:start="13:46" pos:end="13:47">-&gt;</operator><name pos:start="13:48" pos:end="13:51">head</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="15:28" pos:end="15:43"><expr pos:start="15:28" pos:end="15:43"><literal type="string" pos:start="15:28" pos:end="15:43">"kernel_irqchip"</literal></expr></argument>, <argument pos:start="15:46" pos:end="15:49"><expr pos:start="15:46" pos:end="15:49"><name pos:start="15:46" pos:end="15:49">true</name></expr></argument>)</argument_list></call> <operator pos:start="15:52" pos:end="15:53">||</operator>

        <operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:48"><name pos:start="17:10" pos:end="17:28">kvm_check_extension</name><argument_list pos:start="17:29" pos:end="17:48">(<argument pos:start="17:30" pos:end="17:30"><expr pos:start="17:30" pos:end="17:30"><name pos:start="17:30" pos:end="17:30">s</name></expr></argument>, <argument pos:start="17:33" pos:end="17:47"><expr pos:start="17:33" pos:end="17:47"><name pos:start="17:33" pos:end="17:47">KVM_CAP_IRQCHIP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:51" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:17">

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:45"><name pos:start="25:11" pos:end="25:22">kvm_vm_ioctl</name><argument_list pos:start="25:23" pos:end="25:45">(<argument pos:start="25:24" pos:end="25:24"><expr pos:start="25:24" pos:end="25:24"><name pos:start="25:24" pos:end="25:24">s</name></expr></argument>, <argument pos:start="25:27" pos:end="25:44"><expr pos:start="25:27" pos:end="25:44"><name pos:start="25:27" pos:end="25:44">KVM_CREATE_IRQCHIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:19">

        <expr_stmt pos:start="29:9" pos:end="29:58"><expr pos:start="29:9" pos:end="29:57"><call pos:start="29:9" pos:end="29:57"><name pos:start="29:9" pos:end="29:15">fprintf</name><argument_list pos:start="29:16" pos:end="29:57">(<argument pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:22">stderr</name></expr></argument>, <argument pos:start="29:25" pos:end="29:56"><expr pos:start="29:25" pos:end="29:56"><literal type="string" pos:start="29:25" pos:end="29:56">"Create kernel irqchip failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:19">return <expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:22">kvm_kernel_irqchip</name> <operator pos:start="37:24" pos:end="37:24">=</operator> <name pos:start="37:26" pos:end="37:29">true</name></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="43:7">/* If we have an in-kernel IRQ chip then we must have asynchronous

     * interrupt delivery (though the reverse is not necessarily true)

     */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:40"><expr pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:32">kvm_async_interrupts_allowed</name> <operator pos:start="45:34" pos:end="45:34">=</operator> <name pos:start="45:36" pos:end="45:39">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:30">kvm_halt_in_kernel_allowed</name> <operator pos:start="47:32" pos:end="47:32">=</operator> <name pos:start="47:34" pos:end="47:37">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><call pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:24">kvm_init_irq_routing</name><argument_list pos:start="51:25" pos:end="51:27">(<argument pos:start="51:26" pos:end="51:26"><expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
