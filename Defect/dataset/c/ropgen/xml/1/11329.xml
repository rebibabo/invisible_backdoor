<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11329.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">xiph_parse_sdp_line</name><parameter_list pos:start="1:31" pos:end="3:72">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:46">AVFormatContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:63">st_index</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:53"><decl pos:start="3:34" pos:end="3:53"><type pos:start="3:34" pos:end="3:53"><name pos:start="3:34" pos:end="3:47">PayloadContext</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">data</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:71"><decl pos:start="3:56" pos:end="3:71"><type pos:start="3:56" pos:end="3:71"><specifier pos:start="3:56" pos:end="3:60">const</specifier> <name pos:start="3:62" pos:end="3:65">char</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:71">line</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:13">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:15">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:17"><name pos:start="11:10" pos:end="11:13">attr</name><index pos:start="11:14" pos:end="11:17">[<expr pos:start="11:15" pos:end="11:16"><literal type="number" pos:start="11:15" pos:end="11:16">25</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:69"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">value_size</name> <init pos:start="13:20" pos:end="13:33">= <expr pos:start="13:22" pos:end="13:33"><call pos:start="13:22" pos:end="13:33"><name pos:start="13:22" pos:end="13:27">strlen</name><argument_list pos:start="13:28" pos:end="13:33">(<argument pos:start="13:29" pos:end="13:32"><expr pos:start="13:29" pos:end="13:32"><name pos:start="13:29" pos:end="13:32">line</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl pos:start="13:36" pos:end="13:59"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:36" pos:end="13:44">attr_size</name> <init pos:start="13:46" pos:end="13:59">= <expr pos:start="13:48" pos:end="13:59"><sizeof pos:start="13:48" pos:end="13:59">sizeof<argument_list pos:start="13:54" pos:end="13:59">(<argument pos:start="13:55" pos:end="13:58"><expr pos:start="13:55" pos:end="13:58"><name pos:start="13:55" pos:end="13:58">attr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>, <decl pos:start="13:62" pos:end="13:68"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:62" pos:end="13:64">res</name> <init pos:start="13:66" pos:end="13:68">= <expr pos:start="13:68" pos:end="13:68"><literal type="number" pos:start="13:68" pos:end="13:68">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:56"><decl pos:start="15:5" pos:end="15:55"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:18">AVCodecContext</name><modifier pos:start="15:19" pos:end="15:19">*</modifier></type> <name pos:start="15:21" pos:end="15:25">codec</name> <init pos:start="15:27" pos:end="15:55">= <expr pos:start="15:29" pos:end="15:55"><name pos:start="15:29" pos:end="15:48"><name pos:start="15:29" pos:end="15:29">s</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:38">streams</name><index pos:start="15:39" pos:end="15:48">[<expr pos:start="15:40" pos:end="15:47"><name pos:start="15:40" pos:end="15:47">st_index</name></expr>]</index></name><operator pos:start="15:49" pos:end="15:50">-&gt;</operator><name pos:start="15:51" pos:end="15:55">codec</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><call pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:40">(<argument pos:start="19:12" pos:end="19:39"><expr pos:start="19:12" pos:end="19:39"><name pos:start="19:12" pos:end="19:20"><name pos:start="19:12" pos:end="19:16">codec</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:20">id</name></name> <operator pos:start="19:22" pos:end="19:23">==</operator> <name pos:start="19:25" pos:end="19:39">CODEC_ID_THEORA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><call pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:16">(<argument pos:start="21:12" pos:end="21:15"><expr pos:start="21:12" pos:end="21:15"><name pos:start="21:12" pos:end="21:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:41">(<expr pos:start="25:9" pos:end="25:40"><operator pos:start="25:9" pos:end="25:9">!</operator><operator pos:start="25:10" pos:end="25:10">(</operator><name pos:start="25:11" pos:end="25:15">value</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:39"><name pos:start="25:19" pos:end="25:27">av_malloc</name><argument_list pos:start="25:28" pos:end="25:39">(<argument pos:start="25:29" pos:end="25:38"><expr pos:start="25:29" pos:end="25:38"><name pos:start="25:29" pos:end="25:38">value_size</name></expr></argument>)</argument_list></call><operator pos:start="25:40" pos:end="25:40">)</operator></expr>)</condition> <block pos:start="25:43" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:31">

        <expr_stmt pos:start="27:9" pos:end="27:55"><expr pos:start="27:9" pos:end="27:54"><call pos:start="27:9" pos:end="27:54"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:54">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">codec</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:53"><expr pos:start="27:37" pos:end="27:53"><literal type="string" pos:start="27:37" pos:end="27:53">"Out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:31">return <expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="61:5"><if pos:start="35:5" pos:end="61:5">if <condition pos:start="35:8" pos:end="35:39">(<expr pos:start="35:9" pos:end="35:38"><call pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:19">av_strstart</name><argument_list pos:start="35:20" pos:end="35:38">(<argument pos:start="35:21" pos:end="35:24"><expr pos:start="35:21" pos:end="35:24"><name pos:start="35:21" pos:end="35:24">line</name></expr></argument>, <argument pos:start="35:27" pos:end="35:33"><expr pos:start="35:27" pos:end="35:33"><literal type="string" pos:start="35:27" pos:end="35:33">"fmtp:"</literal></expr></argument>, <argument pos:start="35:36" pos:end="35:37"><expr pos:start="35:36" pos:end="35:37"><operator pos:start="35:36" pos:end="35:36">&amp;</operator><name pos:start="35:37" pos:end="35:37">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:41" pos:end="61:5">{<block_content pos:start="39:9" pos:end="59:9">

        <comment type="line" pos:start="37:9" pos:end="37:37">// remove protocol identifier</comment>

        <while pos:start="39:9" pos:end="39:36">while <condition pos:start="39:15" pos:end="39:31">(<expr pos:start="39:16" pos:end="39:30"><operator pos:start="39:16" pos:end="39:16">*</operator><name pos:start="39:17" pos:end="39:17">p</name> <operator pos:start="39:19" pos:end="39:20">&amp;&amp;</operator> <operator pos:start="39:22" pos:end="39:22">*</operator><name pos:start="39:23" pos:end="39:23">p</name> <operator pos:start="39:25" pos:end="39:26">==</operator> <literal type="char" pos:start="39:28" pos:end="39:30">' '</literal></expr>)</condition><block type="pseudo" pos:start="39:33" pos:end="39:36"><block_content pos:start="39:33" pos:end="39:36"> <expr_stmt pos:start="39:33" pos:end="39:36"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:33">p</name><operator pos:start="39:34" pos:end="39:35">++</operator></expr>;</expr_stmt></block_content></block></while> <comment type="line" pos:start="39:38" pos:end="39:52">// strip spaces</comment>

        <while pos:start="41:9" pos:end="41:36">while <condition pos:start="41:15" pos:end="41:31">(<expr pos:start="41:16" pos:end="41:30"><operator pos:start="41:16" pos:end="41:16">*</operator><name pos:start="41:17" pos:end="41:17">p</name> <operator pos:start="41:19" pos:end="41:20">&amp;&amp;</operator> <operator pos:start="41:22" pos:end="41:22">*</operator><name pos:start="41:23" pos:end="41:23">p</name> <operator pos:start="41:25" pos:end="41:26">!=</operator> <literal type="char" pos:start="41:28" pos:end="41:30">' '</literal></expr>)</condition><block type="pseudo" pos:start="41:33" pos:end="41:36"><block_content pos:start="41:33" pos:end="41:36"> <expr_stmt pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:33">p</name><operator pos:start="41:34" pos:end="41:35">++</operator></expr>;</expr_stmt></block_content></block></while> <comment type="line" pos:start="41:38" pos:end="41:63">// eat protocol identifier</comment>

        <while pos:start="43:9" pos:end="43:36">while <condition pos:start="43:15" pos:end="43:31">(<expr pos:start="43:16" pos:end="43:30"><operator pos:start="43:16" pos:end="43:16">*</operator><name pos:start="43:17" pos:end="43:17">p</name> <operator pos:start="43:19" pos:end="43:20">&amp;&amp;</operator> <operator pos:start="43:22" pos:end="43:22">*</operator><name pos:start="43:23" pos:end="43:23">p</name> <operator pos:start="43:25" pos:end="43:26">==</operator> <literal type="char" pos:start="43:28" pos:end="43:30">' '</literal></expr>)</condition><block type="pseudo" pos:start="43:33" pos:end="43:36"><block_content pos:start="43:33" pos:end="43:36"> <expr_stmt pos:start="43:33" pos:end="43:36"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:33">p</name><operator pos:start="43:34" pos:end="43:35">++</operator></expr>;</expr_stmt></block_content></block></while> <comment type="line" pos:start="43:38" pos:end="43:61">// strip trailing spaces</comment>



        <while pos:start="47:9" pos:end="59:9">while <condition pos:start="47:15" pos:end="51:62">(<expr pos:start="47:16" pos:end="51:61"><call pos:start="47:16" pos:end="51:61"><name pos:start="47:16" pos:end="47:42">ff_rtsp_next_attr_and_value</name><argument_list pos:start="47:43" pos:end="51:61">(<argument pos:start="47:44" pos:end="47:45"><expr pos:start="47:44" pos:end="47:45"><operator pos:start="47:44" pos:end="47:44">&amp;</operator><name pos:start="47:45" pos:end="47:45">p</name></expr></argument>,

                                           <argument pos:start="49:44" pos:end="49:47"><expr pos:start="49:44" pos:end="49:47"><name pos:start="49:44" pos:end="49:47">attr</name></expr></argument>, <argument pos:start="49:50" pos:end="49:58"><expr pos:start="49:50" pos:end="49:58"><name pos:start="49:50" pos:end="49:58">attr_size</name></expr></argument>,

                                           <argument pos:start="51:44" pos:end="51:48"><expr pos:start="51:44" pos:end="51:48"><name pos:start="51:44" pos:end="51:48">value</name></expr></argument>, <argument pos:start="51:51" pos:end="51:60"><expr pos:start="51:51" pos:end="51:60"><name pos:start="51:51" pos:end="51:60">value_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:64" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:27">

            <expr_stmt pos:start="53:13" pos:end="53:65"><expr pos:start="53:13" pos:end="53:64"><name pos:start="53:13" pos:end="53:15">res</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:64"><name pos:start="53:19" pos:end="53:38">xiph_parse_fmtp_pair</name><argument_list pos:start="53:39" pos:end="53:64">(<argument pos:start="53:40" pos:end="53:44"><expr pos:start="53:40" pos:end="53:44"><name pos:start="53:40" pos:end="53:44">codec</name></expr></argument>, <argument pos:start="53:47" pos:end="53:50"><expr pos:start="53:47" pos:end="53:50"><name pos:start="53:47" pos:end="53:50">data</name></expr></argument>, <argument pos:start="53:53" pos:end="53:56"><expr pos:start="53:53" pos:end="53:56"><name pos:start="53:53" pos:end="53:56">attr</name></expr></argument>, <argument pos:start="53:59" pos:end="53:63"><expr pos:start="53:59" pos:end="53:63"><name pos:start="53:59" pos:end="53:63">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="57:27"><if pos:start="55:13" pos:end="57:27">if <condition pos:start="55:16" pos:end="55:55">(<expr pos:start="55:17" pos:end="55:54"><name pos:start="55:17" pos:end="55:19">res</name> <operator pos:start="55:21" pos:end="55:21">&lt;</operator> <literal type="number" pos:start="55:23" pos:end="55:23">0</literal> <operator pos:start="55:25" pos:end="55:26">&amp;&amp;</operator> <name pos:start="55:28" pos:end="55:30">res</name> <operator pos:start="55:32" pos:end="55:33">!=</operator> <name pos:start="55:35" pos:end="55:54">AVERROR_PATCHWELCOME</name></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:27"><block_content pos:start="57:17" pos:end="57:27">

                <return pos:start="57:17" pos:end="57:27">return <expr pos:start="57:24" pos:end="57:26"><name pos:start="57:24" pos:end="57:26">res</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:19"><expr pos:start="65:5" pos:end="65:18"><call pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:11">av_free</name><argument_list pos:start="65:12" pos:end="65:18">(<argument pos:start="65:13" pos:end="65:17"><expr pos:start="65:13" pos:end="65:17"><name pos:start="65:13" pos:end="65:17">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
