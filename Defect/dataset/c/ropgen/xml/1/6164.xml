<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6164.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:60"><name pos:start="1:1" pos:end="1:15">vu_message_read</name><argument_list pos:start="1:16" pos:end="1:60">(<argument pos:start="1:17" pos:end="1:26">VuDev *dev</argument>, <argument pos:start="1:29" pos:end="1:39">int conn_fd</argument>, <argument pos:start="1:42" pos:end="1:59">VhostUserMsg *vmsg</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:17">

    <decl_stmt pos:start="5:5" pos:end="5:76"><decl pos:start="5:5" pos:end="5:75"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:69"><name pos:start="5:10" pos:end="5:16">control</name><index pos:start="5:17" pos:end="5:69">[<expr pos:start="5:18" pos:end="5:68"><call pos:start="5:18" pos:end="5:68"><name pos:start="5:18" pos:end="5:27">CMSG_SPACE</name><argument_list pos:start="5:28" pos:end="5:68">(<argument pos:start="5:29" pos:end="5:67"><expr pos:start="5:29" pos:end="5:67"><name pos:start="5:29" pos:end="5:53">VHOST_MEMORY_MAX_NREGIONS</name> <operator pos:start="5:55" pos:end="5:55">*</operator> <sizeof pos:start="5:57" pos:end="5:67">sizeof<argument_list pos:start="5:63" pos:end="5:67">(<argument pos:start="5:64" pos:end="5:66"><expr pos:start="5:64" pos:end="5:66"><name pos:start="5:64" pos:end="5:66">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name> <init pos:start="5:71" pos:end="5:75">= <expr pos:start="5:73" pos:end="5:75"><block pos:start="5:73" pos:end="5:75">{ }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="13:6"><decl pos:start="7:5" pos:end="13:5"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:16">iovec</name></name></type> <name pos:start="7:18" pos:end="7:20">iov</name> <init pos:start="7:22" pos:end="13:5">= <expr pos:start="7:24" pos:end="13:5"><block pos:start="7:24" pos:end="13:5">{

        <expr pos:start="9:9" pos:end="9:32"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:17">iov_base</name> <operator pos:start="9:19" pos:end="9:19">=</operator> <operator pos:start="9:21" pos:end="9:21">(</operator><name pos:start="9:22" pos:end="9:25">char</name> <operator pos:start="9:27" pos:end="9:27">*</operator><operator pos:start="9:28" pos:end="9:28">)</operator><name pos:start="9:29" pos:end="9:32">vmsg</name></expr>,

        <expr pos:start="11:9" pos:end="11:38"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:16">iov_len</name> <operator pos:start="11:18" pos:end="11:18">=</operator> <name pos:start="11:20" pos:end="11:38">VHOST_USER_HDR_SIZE</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="25:6"><decl pos:start="15:5" pos:end="25:5"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:17">msghdr</name></name></type> <name pos:start="15:19" pos:end="15:21">msg</name> <init pos:start="15:23" pos:end="25:5">= <expr pos:start="15:25" pos:end="25:5"><block pos:start="15:25" pos:end="25:5">{

        <expr pos:start="17:9" pos:end="17:23"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:16">msg_iov</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <operator pos:start="17:20" pos:end="17:20">&amp;</operator><name pos:start="17:21" pos:end="17:23">iov</name></expr>,

        <expr pos:start="19:9" pos:end="19:23"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:19">msg_iovlen</name> <operator pos:start="19:21" pos:end="19:21">=</operator> <literal type="number" pos:start="19:23" pos:end="19:23">1</literal></expr>,

        <expr pos:start="21:9" pos:end="21:30"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:20">msg_control</name> <operator pos:start="21:22" pos:end="21:22">=</operator> <name pos:start="21:24" pos:end="21:30">control</name></expr>,

        <expr pos:start="23:9" pos:end="23:41"><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:23">msg_controllen</name> <operator pos:start="23:25" pos:end="23:25">=</operator> <sizeof pos:start="23:27" pos:end="23:41">sizeof<argument_list pos:start="23:33" pos:end="23:41">(<argument pos:start="23:34" pos:end="23:40"><expr pos:start="23:34" pos:end="23:40"><name pos:start="23:34" pos:end="23:40">control</name></expr></argument>)</argument_list></sizeof></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:10">size_t</name></type> <name pos:start="27:12" pos:end="27:18">fd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:10">struct</name> <name pos:start="29:12" pos:end="29:18">cmsghdr</name></name> <modifier pos:start="29:20" pos:end="29:20">*</modifier></type><name pos:start="29:21" pos:end="29:24">cmsg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:11"><decl pos:start="31:5" pos:end="31:10"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:10">rc</name></decl>;</decl_stmt>



    <do pos:start="35:5" pos:end="39:60">do <block pos:start="35:8" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:39">

        <expr_stmt pos:start="37:9" pos:end="37:39"><expr pos:start="37:9" pos:end="37:38"><name pos:start="37:9" pos:end="37:10">rc</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:38"><name pos:start="37:14" pos:end="37:20">recvmsg</name><argument_list pos:start="37:21" pos:end="37:38">(<argument pos:start="37:22" pos:end="37:28"><expr pos:start="37:22" pos:end="37:28"><name pos:start="37:22" pos:end="37:28">conn_fd</name></expr></argument>, <argument pos:start="37:31" pos:end="37:34"><expr pos:start="37:31" pos:end="37:34"><operator pos:start="37:31" pos:end="37:31">&amp;</operator><name pos:start="37:32" pos:end="37:34">msg</name></expr></argument>, <argument pos:start="37:37" pos:end="37:37"><expr pos:start="37:37" pos:end="37:37"><literal type="number" pos:start="37:37" pos:end="37:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="39:13" pos:end="39:59">(<expr pos:start="39:14" pos:end="39:58"><name pos:start="39:14" pos:end="39:15">rc</name> <operator pos:start="39:17" pos:end="39:17">&lt;</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal> <operator pos:start="39:21" pos:end="39:22">&amp;&amp;</operator> <operator pos:start="39:24" pos:end="39:24">(</operator><name pos:start="39:25" pos:end="39:29">errno</name> <operator pos:start="39:31" pos:end="39:32">==</operator> <name pos:start="39:34" pos:end="39:38">EINTR</name> <operator pos:start="39:40" pos:end="39:41">||</operator> <name pos:start="39:43" pos:end="39:47">errno</name> <operator pos:start="39:49" pos:end="39:50">==</operator> <name pos:start="39:52" pos:end="39:57">EAGAIN</name><operator pos:start="39:58" pos:end="39:58">)</operator></expr>)</condition>;</do>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:10">rc</name> <operator pos:start="43:12" pos:end="43:13">&lt;=</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:21">

        <expr_stmt pos:start="45:9" pos:end="45:66"><expr pos:start="45:9" pos:end="45:65"><call pos:start="45:9" pos:end="45:65"><name pos:start="45:9" pos:end="45:16">vu_panic</name><argument_list pos:start="45:17" pos:end="45:65">(<argument pos:start="45:18" pos:end="45:20"><expr pos:start="45:18" pos:end="45:20"><name pos:start="45:18" pos:end="45:20">dev</name></expr></argument>, <argument pos:start="45:23" pos:end="45:47"><expr pos:start="45:23" pos:end="45:47"><literal type="string" pos:start="45:23" pos:end="45:47">"Error while recvmsg: %s"</literal></expr></argument>, <argument pos:start="45:50" pos:end="45:64"><expr pos:start="45:50" pos:end="45:64"><call pos:start="45:50" pos:end="45:64"><name pos:start="45:50" pos:end="45:57">strerror</name><argument_list pos:start="45:58" pos:end="45:64">(<argument pos:start="45:59" pos:end="45:63"><expr pos:start="45:59" pos:end="45:63"><name pos:start="45:59" pos:end="45:63">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:21">return <expr pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:21"><expr pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:8">vmsg</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:16">fd_num</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <literal type="number" pos:start="53:20" pos:end="53:20">0</literal></expr>;</expr_stmt>

    <for pos:start="55:5" pos:end="75:5">for <control pos:start="55:9" pos:end="59:40">(<init pos:start="55:10" pos:end="55:36"><expr pos:start="55:10" pos:end="55:35"><name pos:start="55:10" pos:end="55:13">cmsg</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <call pos:start="55:17" pos:end="55:35"><name pos:start="55:17" pos:end="55:29">CMSG_FIRSTHDR</name><argument_list pos:start="55:30" pos:end="55:35">(<argument pos:start="55:31" pos:end="55:34"><expr pos:start="55:31" pos:end="55:34"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:34">msg</name></expr></argument>)</argument_list></call></expr>;</init>

         <condition pos:start="57:10" pos:end="57:22"><expr pos:start="57:10" pos:end="57:21"><name pos:start="57:10" pos:end="57:13">cmsg</name> <operator pos:start="57:15" pos:end="57:16">!=</operator> <name pos:start="57:18" pos:end="57:21">NULL</name></expr>;</condition>

         <incr pos:start="59:10" pos:end="59:39"><expr pos:start="59:10" pos:end="59:39"><name pos:start="59:10" pos:end="59:13">cmsg</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:39"><name pos:start="59:17" pos:end="59:27">CMSG_NXTHDR</name><argument_list pos:start="59:28" pos:end="59:39">(<argument pos:start="59:29" pos:end="59:32"><expr pos:start="59:29" pos:end="59:32"><operator pos:start="59:29" pos:end="59:29">&amp;</operator><name pos:start="59:30" pos:end="59:32">msg</name></expr></argument>, <argument pos:start="59:35" pos:end="59:38"><expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">cmsg</name></expr></argument>)</argument_list></call></expr></incr>)</control>

    <block pos:start="61:5" pos:end="75:5">{<block_content pos:start="63:9" pos:end="73:9">

        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:76">(<expr pos:start="63:13" pos:end="63:75"><name pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:16">cmsg</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:28">cmsg_level</name></name> <operator pos:start="63:30" pos:end="63:31">==</operator> <name pos:start="63:33" pos:end="63:42">SOL_SOCKET</name> <operator pos:start="63:44" pos:end="63:45">&amp;&amp;</operator> <name pos:start="63:47" pos:end="63:61"><name pos:start="63:47" pos:end="63:50">cmsg</name><operator pos:start="63:51" pos:end="63:52">-&gt;</operator><name pos:start="63:53" pos:end="63:61">cmsg_type</name></name> <operator pos:start="63:63" pos:end="63:64">==</operator> <name pos:start="63:66" pos:end="63:75">SCM_RIGHTS</name></expr>)</condition> <block pos:start="63:78" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:18">

            <expr_stmt pos:start="65:13" pos:end="65:51"><expr pos:start="65:13" pos:end="65:50"><name pos:start="65:13" pos:end="65:19">fd_size</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:36"><name pos:start="65:23" pos:end="65:26">cmsg</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:36">cmsg_len</name></name> <operator pos:start="65:38" pos:end="65:38">-</operator> <call pos:start="65:40" pos:end="65:50"><name pos:start="65:40" pos:end="65:47">CMSG_LEN</name><argument_list pos:start="65:48" pos:end="65:50">(<argument pos:start="65:49" pos:end="65:49"><expr pos:start="65:49" pos:end="65:49"><literal type="number" pos:start="65:49" pos:end="65:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:49"><expr pos:start="67:13" pos:end="67:48"><name pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:16">vmsg</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:24">fd_num</name></name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:34">fd_size</name> <operator pos:start="67:36" pos:end="67:36">/</operator> <sizeof pos:start="67:38" pos:end="67:48">sizeof<argument_list pos:start="67:44" pos:end="67:48">(<argument pos:start="67:45" pos:end="67:47"><expr pos:start="67:45" pos:end="67:47"><name pos:start="67:45" pos:end="67:47">int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:56"><expr pos:start="69:13" pos:end="69:55"><call pos:start="69:13" pos:end="69:55"><name pos:start="69:13" pos:end="69:18">memcpy</name><argument_list pos:start="69:19" pos:end="69:55">(<argument pos:start="69:20" pos:end="69:28"><expr pos:start="69:20" pos:end="69:28"><name pos:start="69:20" pos:end="69:28"><name pos:start="69:20" pos:end="69:23">vmsg</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:28">fds</name></name></expr></argument>, <argument pos:start="69:31" pos:end="69:45"><expr pos:start="69:31" pos:end="69:45"><call pos:start="69:31" pos:end="69:45"><name pos:start="69:31" pos:end="69:39">CMSG_DATA</name><argument_list pos:start="69:40" pos:end="69:45">(<argument pos:start="69:41" pos:end="69:44"><expr pos:start="69:41" pos:end="69:44"><name pos:start="69:41" pos:end="69:44">cmsg</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:48" pos:end="69:54"><expr pos:start="69:48" pos:end="69:54"><name pos:start="69:48" pos:end="69:54">fd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="79:5" pos:end="91:5"><if pos:start="79:5" pos:end="91:5">if <condition pos:start="79:8" pos:end="79:43">(<expr pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:12">vmsg</name><operator pos:start="79:13" pos:end="79:14">-&gt;</operator><name pos:start="79:15" pos:end="79:18">size</name></name> <operator pos:start="79:20" pos:end="79:20">&gt;</operator> <sizeof pos:start="79:22" pos:end="79:42">sizeof<argument_list pos:start="79:28" pos:end="79:42">(<argument pos:start="79:29" pos:end="79:41"><expr pos:start="79:29" pos:end="79:41"><name pos:start="79:29" pos:end="79:41"><name pos:start="79:29" pos:end="79:32">vmsg</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:41">payload</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="79:45" pos:end="91:5">{<block_content pos:start="81:9" pos:end="89:18">

        <expr_stmt pos:start="81:9" pos:end="87:67"><expr pos:start="81:9" pos:end="87:66"><call pos:start="81:9" pos:end="87:66"><name pos:start="81:9" pos:end="81:16">vu_panic</name><argument_list pos:start="81:17" pos:end="87:66">(<argument pos:start="81:18" pos:end="81:20"><expr pos:start="81:18" pos:end="81:20"><name pos:start="81:18" pos:end="81:20">dev</name></expr></argument>,

                 <argument pos:start="83:18" pos:end="85:54"><expr pos:start="83:18" pos:end="85:54"><literal type="string" pos:start="83:18" pos:end="83:77">"Error: too big message request: %d, size: vmsg-&gt;size: %u, "</literal>

                 <literal type="string" pos:start="85:18" pos:end="85:54">"while sizeof(vmsg-&gt;payload) = %zu\n"</literal></expr></argument>,

                 <argument pos:start="87:18" pos:end="87:30"><expr pos:start="87:18" pos:end="87:30"><name pos:start="87:18" pos:end="87:30"><name pos:start="87:18" pos:end="87:21">vmsg</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:30">request</name></name></expr></argument>, <argument pos:start="87:33" pos:end="87:42"><expr pos:start="87:33" pos:end="87:42"><name pos:start="87:33" pos:end="87:42"><name pos:start="87:33" pos:end="87:36">vmsg</name><operator pos:start="87:37" pos:end="87:38">-&gt;</operator><name pos:start="87:39" pos:end="87:42">size</name></name></expr></argument>, <argument pos:start="87:45" pos:end="87:65"><expr pos:start="87:45" pos:end="87:65"><sizeof pos:start="87:45" pos:end="87:65">sizeof<argument_list pos:start="87:51" pos:end="87:65">(<argument pos:start="87:52" pos:end="87:64"><expr pos:start="87:52" pos:end="87:64"><name pos:start="87:52" pos:end="87:64"><name pos:start="87:52" pos:end="87:55">vmsg</name><operator pos:start="87:56" pos:end="87:57">-&gt;</operator><name pos:start="87:58" pos:end="87:64">payload</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:18">goto <name pos:start="89:14" pos:end="89:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="117:5"><if pos:start="95:5" pos:end="117:5">if <condition pos:start="95:8" pos:end="95:19">(<expr pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:12">vmsg</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:18">size</name></name></expr>)</condition> <block pos:start="95:21" pos:end="117:5">{<block_content pos:start="97:9" pos:end="115:33">

        <do pos:start="97:9" pos:end="101:64">do <block pos:start="97:12" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:59">

            <expr_stmt pos:start="99:13" pos:end="99:59"><expr pos:start="99:13" pos:end="99:58"><name pos:start="99:13" pos:end="99:14">rc</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <call pos:start="99:18" pos:end="99:58"><name pos:start="99:18" pos:end="99:21">read</name><argument_list pos:start="99:22" pos:end="99:58">(<argument pos:start="99:23" pos:end="99:29"><expr pos:start="99:23" pos:end="99:29"><name pos:start="99:23" pos:end="99:29">conn_fd</name></expr></argument>, <argument pos:start="99:32" pos:end="99:45"><expr pos:start="99:32" pos:end="99:45"><operator pos:start="99:32" pos:end="99:32">&amp;</operator><name pos:start="99:33" pos:end="99:45"><name pos:start="99:33" pos:end="99:36">vmsg</name><operator pos:start="99:37" pos:end="99:38">-&gt;</operator><name pos:start="99:39" pos:end="99:45">payload</name></name></expr></argument>, <argument pos:start="99:48" pos:end="99:57"><expr pos:start="99:48" pos:end="99:57"><name pos:start="99:48" pos:end="99:57"><name pos:start="99:48" pos:end="99:51">vmsg</name><operator pos:start="99:52" pos:end="99:53">-&gt;</operator><name pos:start="99:54" pos:end="99:57">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="101:17" pos:end="101:63">(<expr pos:start="101:18" pos:end="101:62"><name pos:start="101:18" pos:end="101:19">rc</name> <operator pos:start="101:21" pos:end="101:21">&lt;</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal> <operator pos:start="101:25" pos:end="101:26">&amp;&amp;</operator> <operator pos:start="101:28" pos:end="101:28">(</operator><name pos:start="101:29" pos:end="101:33">errno</name> <operator pos:start="101:35" pos:end="101:36">==</operator> <name pos:start="101:38" pos:end="101:42">EINTR</name> <operator pos:start="101:44" pos:end="101:45">||</operator> <name pos:start="101:47" pos:end="101:51">errno</name> <operator pos:start="101:53" pos:end="101:54">==</operator> <name pos:start="101:56" pos:end="101:61">EAGAIN</name><operator pos:start="101:62" pos:end="101:62">)</operator></expr>)</condition>;</do>



        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:20">(<expr pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:14">rc</name> <operator pos:start="105:16" pos:end="105:17">&lt;=</operator> <literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr>)</condition> <block pos:start="105:22" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:22">

            <expr_stmt pos:start="107:13" pos:end="107:70"><expr pos:start="107:13" pos:end="107:69"><call pos:start="107:13" pos:end="107:69"><name pos:start="107:13" pos:end="107:20">vu_panic</name><argument_list pos:start="107:21" pos:end="107:69">(<argument pos:start="107:22" pos:end="107:24"><expr pos:start="107:22" pos:end="107:24"><name pos:start="107:22" pos:end="107:24">dev</name></expr></argument>, <argument pos:start="107:27" pos:end="107:51"><expr pos:start="107:27" pos:end="107:51"><literal type="string" pos:start="107:27" pos:end="107:51">"Error while reading: %s"</literal></expr></argument>, <argument pos:start="107:54" pos:end="107:68"><expr pos:start="107:54" pos:end="107:68"><call pos:start="107:54" pos:end="107:68"><name pos:start="107:54" pos:end="107:61">strerror</name><argument_list pos:start="107:62" pos:end="107:68">(<argument pos:start="107:63" pos:end="107:67"><expr pos:start="107:63" pos:end="107:67"><name pos:start="107:63" pos:end="107:67">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="109:13" pos:end="109:22">goto <name pos:start="109:18" pos:end="109:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:33"><expr pos:start="115:9" pos:end="115:32"><call pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:14">assert</name><argument_list pos:start="115:15" pos:end="115:32">(<argument pos:start="115:16" pos:end="115:31"><expr pos:start="115:16" pos:end="115:31"><name pos:start="115:16" pos:end="115:17">rc</name> <operator pos:start="115:19" pos:end="115:20">==</operator> <name pos:start="115:22" pos:end="115:31"><name pos:start="115:22" pos:end="115:25">vmsg</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:31">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="121:5" pos:end="121:16">return <expr pos:start="121:12" pos:end="121:15"><name pos:start="121:12" pos:end="121:15">true</name></expr>;</return>



<label pos:start="125:1" pos:end="125:5"><name pos:start="125:1" pos:end="125:4">fail</name>:</label>

    <expr_stmt pos:start="127:5" pos:end="127:25"><expr pos:start="127:5" pos:end="127:24"><call pos:start="127:5" pos:end="127:24"><name pos:start="127:5" pos:end="127:18">vmsg_close_fds</name><argument_list pos:start="127:19" pos:end="127:24">(<argument pos:start="127:20" pos:end="127:23"><expr pos:start="127:20" pos:end="127:23"><name pos:start="127:20" pos:end="127:23">vmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="131:5" pos:end="131:17">return <expr pos:start="131:12" pos:end="131:16"><name pos:start="131:12" pos:end="131:16">false</name></expr>;</return>

</block_content>}</block>
</unit>
