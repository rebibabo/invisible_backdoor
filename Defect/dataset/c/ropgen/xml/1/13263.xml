<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13263.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">init_parse_context</name><parameter_list pos:start="1:31" pos:end="3:75">(<parameter pos:start="1:32" pos:end="1:55"><decl pos:start="1:32" pos:end="1:55"><type pos:start="1:32" pos:end="1:55"><name pos:start="1:32" pos:end="1:49">OptionParseContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">octx</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:59"><decl pos:start="3:32" pos:end="3:59"><type pos:start="3:32" pos:end="3:59"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:51">OptionGroupDef</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:59">groups</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:74"><decl pos:start="3:62" pos:end="3:74"><type pos:start="3:62" pos:end="3:74"><name pos:start="3:62" pos:end="3:64">int</name></type> <name pos:start="3:66" pos:end="3:74">nb_groups</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="41:1">{<block_content pos:start="7:5" pos:end="39:16">

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:59"><type pos:start="7:5" pos:end="7:31"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:31">OptionGroupDef</name></type> <name pos:start="7:33" pos:end="7:44">global_group</name> <init pos:start="7:46" pos:end="7:59">= <expr pos:start="7:48" pos:end="7:59"><block pos:start="7:48" pos:end="7:59">{ <expr pos:start="7:50" pos:end="7:57"><literal type="string" pos:start="7:50" pos:end="7:57">"global"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:35"><expr pos:start="13:5" pos:end="13:34"><call pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:10">memset</name><argument_list pos:start="13:11" pos:end="13:34">(<argument pos:start="13:12" pos:end="13:15"><expr pos:start="13:12" pos:end="13:15"><name pos:start="13:12" pos:end="13:15">octx</name></expr></argument>, <argument pos:start="13:18" pos:end="13:18"><expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></argument>, <argument pos:start="13:21" pos:end="13:33"><expr pos:start="13:21" pos:end="13:33"><sizeof pos:start="13:21" pos:end="13:33">sizeof<argument_list pos:start="13:27" pos:end="13:33">(<argument pos:start="13:28" pos:end="13:32"><expr pos:start="13:28" pos:end="13:32"><operator pos:start="13:28" pos:end="13:28">*</operator><name pos:start="13:29" pos:end="13:32">octx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:8">octx</name><operator pos:start="17:9" pos:end="17:10">-&gt;</operator><name pos:start="17:11" pos:end="17:19">nb_groups</name></name> <operator pos:start="17:21" pos:end="17:21">=</operator> <name pos:start="17:23" pos:end="17:31">nb_groups</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:74"><expr pos:start="19:5" pos:end="19:73"><name pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:8">octx</name><operator pos:start="19:9" pos:end="19:10">-&gt;</operator><name pos:start="19:11" pos:end="19:16">groups</name></name>    <operator pos:start="19:21" pos:end="19:21">=</operator> <call pos:start="19:23" pos:end="19:73"><name pos:start="19:23" pos:end="19:32">av_mallocz</name><argument_list pos:start="19:33" pos:end="19:73">(<argument pos:start="19:34" pos:end="19:72"><expr pos:start="19:34" pos:end="19:72"><sizeof pos:start="19:34" pos:end="19:54">sizeof<argument_list pos:start="19:40" pos:end="19:54">(<argument pos:start="19:41" pos:end="19:53"><expr pos:start="19:41" pos:end="19:53"><operator pos:start="19:41" pos:end="19:41">*</operator><name pos:start="19:42" pos:end="19:53"><name pos:start="19:42" pos:end="19:45">octx</name><operator pos:start="19:46" pos:end="19:47">-&gt;</operator><name pos:start="19:48" pos:end="19:53">groups</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="19:56" pos:end="19:56">*</operator> <name pos:start="19:58" pos:end="19:72"><name pos:start="19:58" pos:end="19:61">octx</name><operator pos:start="19:62" pos:end="19:63">-&gt;</operator><name pos:start="19:64" pos:end="19:72">nb_groups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:16"><if pos:start="21:5" pos:end="23:16">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:21"><name pos:start="21:10" pos:end="21:13">octx</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">groups</name></name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:16"><block_content pos:start="23:9" pos:end="23:16">

        <expr_stmt pos:start="23:9" pos:end="23:16"><expr pos:start="23:9" pos:end="23:15"><call pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:12">exit</name><argument_list pos:start="23:13" pos:end="23:15">(<argument pos:start="23:14" pos:end="23:14"><expr pos:start="23:14" pos:end="23:14"><literal type="number" pos:start="23:14" pos:end="23:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="27:5" pos:end="29:47">for <control pos:start="27:9" pos:end="27:41">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:36"><expr pos:start="27:17" pos:end="27:35"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:35"><name pos:start="27:21" pos:end="27:24">octx</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:35">nb_groups</name></name></expr>;</condition> <incr pos:start="27:38" pos:end="27:40"><expr pos:start="27:38" pos:end="27:40"><name pos:start="27:38" pos:end="27:38">i</name><operator pos:start="27:39" pos:end="27:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="29:9" pos:end="29:47"><block_content pos:start="29:9" pos:end="29:47">

        <expr_stmt pos:start="29:9" pos:end="29:47"><expr pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:12">octx</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:20">groups</name><index pos:start="29:21" pos:end="29:23">[<expr pos:start="29:22" pos:end="29:22"><name pos:start="29:22" pos:end="29:22">i</name></expr>]</index></name><operator pos:start="29:24" pos:end="29:24">.</operator><name pos:start="29:25" pos:end="29:33">group_def</name> <operator pos:start="29:35" pos:end="29:35">=</operator> <operator pos:start="29:37" pos:end="29:37">&amp;</operator><name pos:start="29:38" pos:end="29:46"><name pos:start="29:38" pos:end="29:43">groups</name><index pos:start="29:44" pos:end="29:46">[<expr pos:start="29:45" pos:end="29:45"><name pos:start="29:45" pos:end="29:45">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:8">octx</name><operator pos:start="33:9" pos:end="33:10">-&gt;</operator><name pos:start="33:11" pos:end="33:21">global_opts</name><operator pos:start="33:22" pos:end="33:22">.</operator><name pos:start="33:23" pos:end="33:31">group_def</name></name> <operator pos:start="33:33" pos:end="33:33">=</operator> <operator pos:start="33:35" pos:end="33:35">&amp;</operator><name pos:start="33:36" pos:end="33:47">global_group</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:37"><expr pos:start="35:5" pos:end="35:36"><name pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:8">octx</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:21">global_opts</name><operator pos:start="35:22" pos:end="35:22">.</operator><name pos:start="35:23" pos:end="35:25">arg</name></name>       <operator pos:start="35:33" pos:end="35:33">=</operator> <literal type="string" pos:start="35:35" pos:end="35:36">""</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><call pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">init_opts</name><argument_list pos:start="39:14" pos:end="39:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
