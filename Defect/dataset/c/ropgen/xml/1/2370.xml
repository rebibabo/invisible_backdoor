<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2370.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">rtc_periodic_timer</name><parameter_list pos:start="1:31" pos:end="1:44">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:37"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RTCState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="12:0"><expr pos:start="9:5" pos:end="9:46"><call pos:start="9:5" pos:end="9:46"><name pos:start="9:5" pos:end="9:20">rtc_timer_update</name><argument_list pos:start="9:21" pos:end="9:46">(<argument pos:start="9:22" pos:end="9:22"><expr pos:start="9:22" pos:end="9:22"><name pos:start="9:22" pos:end="9:22">s</name></expr></argument>, <argument pos:start="9:25" pos:end="9:45"><expr pos:start="9:25" pos:end="9:45"><name pos:start="9:25" pos:end="9:45"><name pos:start="9:25" pos:end="9:25">s</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:45">next_periodic_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="11:1" pos:end="11:18">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:18">TARGET_I386</name></cpp:ifdef>

    <if_stmt pos:start="13:5" pos:end="22:0"><if pos:start="13:5" pos:end="22:0">if <condition pos:start="13:8" pos:end="13:56">(<expr pos:start="13:9" pos:end="13:55"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:32"><name pos:start="13:10" pos:end="13:10">s</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:21">cmos_data</name><index pos:start="13:22" pos:end="13:32">[<expr pos:start="13:23" pos:end="13:31"><name pos:start="13:23" pos:end="13:31">RTC_REG_C</name></expr>]</index></name> <operator pos:start="13:34" pos:end="13:34">&amp;</operator> <literal type="number" pos:start="13:36" pos:end="13:39">0xc0</literal><operator pos:start="13:40" pos:end="13:40">)</operator> <operator pos:start="13:42" pos:end="13:43">&amp;&amp;</operator> <name pos:start="13:45" pos:end="13:55">rtc_td_hack</name></expr>)</condition> <block pos:start="13:58" pos:end="22:0">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:27"><expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:24">irq_coalesced</name></name><operator pos:start="15:25" pos:end="15:26">++</operator></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:44">(<expr pos:start="23:9" pos:end="23:43"><name pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:20">cmos_data</name><index pos:start="23:21" pos:end="23:31">[<expr pos:start="23:22" pos:end="23:30"><name pos:start="23:22" pos:end="23:30">RTC_REG_B</name></expr>]</index></name> <operator pos:start="23:33" pos:end="23:33">&amp;</operator> <name pos:start="23:35" pos:end="23:43">REG_B_PIE</name></expr>)</condition> <block pos:start="23:46" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:30">

        <expr_stmt pos:start="25:9" pos:end="25:40"><expr pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:20">cmos_data</name><index pos:start="25:21" pos:end="25:31">[<expr pos:start="25:22" pos:end="25:30"><name pos:start="25:22" pos:end="25:30">RTC_REG_C</name></expr>]</index></name> <operator pos:start="25:33" pos:end="25:34">|=</operator> <literal type="number" pos:start="25:36" pos:end="25:39">0xc0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><call pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:21">rtc_irq_raise</name><argument_list pos:start="27:22" pos:end="27:29">(<argument pos:start="27:23" pos:end="27:28"><expr pos:start="27:23" pos:end="27:28"><name pos:start="27:23" pos:end="27:28"><name pos:start="27:23" pos:end="27:23">s</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:28">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:45">(<expr pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:20">cmos_data</name><index pos:start="31:21" pos:end="31:31">[<expr pos:start="31:22" pos:end="31:30"><name pos:start="31:22" pos:end="31:30">RTC_REG_B</name></expr>]</index></name> <operator pos:start="31:33" pos:end="31:33">&amp;</operator> <name pos:start="31:35" pos:end="31:44">REG_B_SQWE</name></expr>)</condition> <block pos:start="31:47" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:35">

        <comment type="block" pos:start="33:9" pos:end="35:39">/* Not square wave at all but we don't want 2048Hz interrupts!

           Must be seen as a pulse.  */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><call pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:22">qemu_irq_raise</name><argument_list pos:start="37:23" pos:end="37:34">(<argument pos:start="37:24" pos:end="37:33"><expr pos:start="37:24" pos:end="37:33"><name pos:start="37:24" pos:end="37:33"><name pos:start="37:24" pos:end="37:24">s</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:33">sqw_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
