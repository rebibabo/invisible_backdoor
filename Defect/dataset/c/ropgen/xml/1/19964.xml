<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19964.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">dct_unquantize_mpeg1_c</name><parameter_list pos:start="1:35" pos:end="3:69">(<parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:49">MpegEncContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>, 

                                   <parameter pos:start="3:36" pos:end="3:49"><decl pos:start="3:36" pos:end="3:49"><type pos:start="3:36" pos:end="3:49"><name pos:start="3:36" pos:end="3:42">DCTELEM</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:49">block</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:56"><decl pos:start="3:52" pos:end="3:56"><type pos:start="3:52" pos:end="3:56"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:56">n</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:68"><decl pos:start="3:59" pos:end="3:68"><type pos:start="3:59" pos:end="3:68"><name pos:start="3:59" pos:end="3:61">int</name></type> <name pos:start="3:63" pos:end="3:68">qscale</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:5">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:16">level</name></decl>, <decl pos:start="7:19" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:25">nCoeffs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:18"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:16">UINT16</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:30">quant_matrix</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:43"><if pos:start="13:5" pos:end="13:38">if<condition pos:start="13:7" pos:end="13:25">(<expr pos:start="13:8" pos:end="13:24"><name pos:start="13:8" pos:end="13:24"><name pos:start="13:8" pos:end="13:8">s</name><operator pos:start="13:9" pos:end="13:10">-&gt;</operator><name pos:start="13:11" pos:end="13:24">alternate_scan</name></name></expr>)</condition><block type="pseudo" pos:start="13:27" pos:end="13:38"><block_content pos:start="13:27" pos:end="13:38"> <expr_stmt pos:start="13:27" pos:end="13:38"><expr pos:start="13:27" pos:end="13:37"><name pos:start="13:27" pos:end="13:33">nCoeffs</name><operator pos:start="13:34" pos:end="13:34">=</operator> <literal type="number" pos:start="13:36" pos:end="13:37">64</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="15:5" pos:end="15:43">else<block type="pseudo" pos:start="15:10" pos:end="15:43"><block_content pos:start="15:10" pos:end="15:43"> <expr_stmt pos:start="15:10" pos:end="15:43"><expr pos:start="15:10" pos:end="15:42"><name pos:start="15:10" pos:end="15:16">nCoeffs</name><operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:40"><name pos:start="15:19" pos:end="15:19">s</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:37">block_last_index</name><index pos:start="15:38" pos:end="15:40">[<expr pos:start="15:39" pos:end="15:39"><name pos:start="15:39" pos:end="15:39">n</name></expr>]</index></name><operator pos:start="15:41" pos:end="15:41">+</operator><literal type="number" pos:start="15:42" pos:end="15:42">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    

    <if_stmt pos:start="19:5" pos:end="123:5"><if pos:start="19:5" pos:end="73:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:19">mb_intra</name></name></expr>)</condition> <block pos:start="19:22" pos:end="73:5">{<block_content pos:start="21:9" pos:end="71:9">

        <if_stmt pos:start="21:9" pos:end="27:48"><if pos:start="21:9" pos:end="23:48">if <condition pos:start="21:12" pos:end="21:18">(<expr pos:start="21:13" pos:end="21:17"><name pos:start="21:13" pos:end="21:13">n</name> <operator pos:start="21:15" pos:end="21:15">&lt;</operator> <literal type="number" pos:start="21:17" pos:end="21:17">4</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:48"><block_content pos:start="23:13" pos:end="23:48"> 

            <expr_stmt pos:start="23:13" pos:end="23:48"><expr pos:start="23:13" pos:end="23:47"><name pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:17">block</name><index pos:start="23:18" pos:end="23:20">[<expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr>]</index></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:31"><name pos:start="23:24" pos:end="23:28">block</name><index pos:start="23:29" pos:end="23:31">[<expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>]</index></name> <operator pos:start="23:33" pos:end="23:33">*</operator> <name pos:start="23:35" pos:end="23:47"><name pos:start="23:35" pos:end="23:35">s</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:47">y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="25:9" pos:end="27:48">else<block type="pseudo" pos:start="27:13" pos:end="27:48"><block_content pos:start="27:13" pos:end="27:48">

            <expr_stmt pos:start="27:13" pos:end="27:48"><expr pos:start="27:13" pos:end="27:47"><name pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:17">block</name><index pos:start="27:18" pos:end="27:20">[<expr pos:start="27:19" pos:end="27:19"><literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>]</index></name> <operator pos:start="27:22" pos:end="27:22">=</operator> <name pos:start="27:24" pos:end="27:31"><name pos:start="27:24" pos:end="27:28">block</name><index pos:start="27:29" pos:end="27:31">[<expr pos:start="27:30" pos:end="27:30"><literal type="number" pos:start="27:30" pos:end="27:30">0</literal></expr>]</index></name> <operator pos:start="27:33" pos:end="27:33">*</operator> <name pos:start="27:35" pos:end="27:47"><name pos:start="27:35" pos:end="27:35">s</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:47">c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="29:29">/* XXX: only mpeg1 */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:20">quant_matrix</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:38"><name pos:start="31:24" pos:end="31:24">s</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:38">intra_matrix</name></name></expr>;</expr_stmt>

        <for pos:start="33:9" pos:end="71:9">for<control pos:start="33:12" pos:end="33:30">(<init pos:start="33:13" pos:end="33:16"><expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:13">i</name><operator pos:start="33:14" pos:end="33:14">=</operator><literal type="number" pos:start="33:15" pos:end="33:15">1</literal></expr>;</init><condition pos:start="33:17" pos:end="33:26"><expr pos:start="33:17" pos:end="33:25"><name pos:start="33:17" pos:end="33:17">i</name><operator pos:start="33:18" pos:end="33:18">&lt;</operator><name pos:start="33:19" pos:end="33:25">nCoeffs</name></expr>;</condition><incr pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:27">i</name><operator pos:start="33:28" pos:end="33:29">++</operator></expr></incr>)</control> <block pos:start="33:32" pos:end="71:9">{<block_content pos:start="35:13" pos:end="69:13">

            <decl_stmt pos:start="35:13" pos:end="35:36"><decl pos:start="35:13" pos:end="35:35"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:17">j</name><init pos:start="35:18" pos:end="35:35">= <expr pos:start="35:20" pos:end="35:35"><name pos:start="35:20" pos:end="35:35"><name pos:start="35:20" pos:end="35:32">zigzag_direct</name><index pos:start="35:33" pos:end="35:35">[<expr pos:start="35:34" pos:end="35:34"><name pos:start="35:34" pos:end="35:34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:29"><expr pos:start="37:13" pos:end="37:28"><name pos:start="37:13" pos:end="37:17">level</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:28"><name pos:start="37:21" pos:end="37:25">block</name><index pos:start="37:26" pos:end="37:28">[<expr pos:start="37:27" pos:end="37:27"><name pos:start="37:27" pos:end="37:27">j</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="69:13"><if pos:start="39:13" pos:end="69:13">if <condition pos:start="39:16" pos:end="39:22">(<expr pos:start="39:17" pos:end="39:21"><name pos:start="39:17" pos:end="39:21">level</name></expr>)</condition> <block pos:start="39:24" pos:end="69:13">{<block_content pos:start="41:17" pos:end="67:33">

                <if_stmt pos:start="41:17" pos:end="60:0"><if pos:start="41:17" pos:end="51:17">if <condition pos:start="41:20" pos:end="41:30">(<expr pos:start="41:21" pos:end="41:29"><name pos:start="41:21" pos:end="41:25">level</name> <operator pos:start="41:27" pos:end="41:27">&lt;</operator> <literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr>)</condition> <block pos:start="41:32" pos:end="51:17">{<block_content pos:start="43:21" pos:end="49:35">

                    <expr_stmt pos:start="43:21" pos:end="43:35"><expr pos:start="43:21" pos:end="43:34"><name pos:start="43:21" pos:end="43:25">level</name> <operator pos:start="43:27" pos:end="43:27">=</operator> <operator pos:start="43:29" pos:end="43:29">-</operator><name pos:start="43:30" pos:end="43:34">level</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="45:21" pos:end="45:73"><expr pos:start="45:21" pos:end="45:72"><name pos:start="45:21" pos:end="45:25">level</name> <operator pos:start="45:27" pos:end="45:27">=</operator> <operator pos:start="45:29" pos:end="45:29">(</operator><name pos:start="45:30" pos:end="45:32">int</name><operator pos:start="45:33" pos:end="45:33">)</operator><operator pos:start="45:34" pos:end="45:34">(</operator><name pos:start="45:35" pos:end="45:39">level</name> <operator pos:start="45:41" pos:end="45:41">*</operator> <name pos:start="45:43" pos:end="45:48">qscale</name> <operator pos:start="45:50" pos:end="45:50">*</operator> <name pos:start="45:52" pos:end="45:66"><name pos:start="45:52" pos:end="45:63">quant_matrix</name><index pos:start="45:64" pos:end="45:66">[<expr pos:start="45:65" pos:end="45:65"><name pos:start="45:65" pos:end="45:65">j</name></expr>]</index></name><operator pos:start="45:67" pos:end="45:67">)</operator> <operator pos:start="45:69" pos:end="45:70">&gt;&gt;</operator> <literal type="number" pos:start="45:72" pos:end="45:72">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:44"><expr pos:start="47:21" pos:end="47:43"><name pos:start="47:21" pos:end="47:25">level</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <operator pos:start="47:29" pos:end="47:29">(</operator><name pos:start="47:30" pos:end="47:34">level</name> <operator pos:start="47:36" pos:end="47:36">-</operator> <literal type="number" pos:start="47:38" pos:end="47:38">1</literal><operator pos:start="47:39" pos:end="47:39">)</operator> <operator pos:start="47:41" pos:end="47:41">|</operator> <literal type="number" pos:start="47:43" pos:end="47:43">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:35"><expr pos:start="49:21" pos:end="49:34"><name pos:start="49:21" pos:end="49:25">level</name> <operator pos:start="49:27" pos:end="49:27">=</operator> <operator pos:start="49:29" pos:end="49:29">-</operator><name pos:start="49:30" pos:end="49:34">level</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="51:19" pos:end="60:0">else <block pos:start="51:24" pos:end="60:0">{<block_content pos:start="53:21" pos:end="55:44">

                    <expr_stmt pos:start="53:21" pos:end="53:73"><expr pos:start="53:21" pos:end="53:72"><name pos:start="53:21" pos:end="53:25">level</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <operator pos:start="53:29" pos:end="53:29">(</operator><name pos:start="53:30" pos:end="53:32">int</name><operator pos:start="53:33" pos:end="53:33">)</operator><operator pos:start="53:34" pos:end="53:34">(</operator><name pos:start="53:35" pos:end="53:39">level</name> <operator pos:start="53:41" pos:end="53:41">*</operator> <name pos:start="53:43" pos:end="53:48">qscale</name> <operator pos:start="53:50" pos:end="53:50">*</operator> <name pos:start="53:52" pos:end="53:66"><name pos:start="53:52" pos:end="53:63">quant_matrix</name><index pos:start="53:64" pos:end="53:66">[<expr pos:start="53:65" pos:end="53:65"><name pos:start="53:65" pos:end="53:65">j</name></expr>]</index></name><operator pos:start="53:67" pos:end="53:67">)</operator> <operator pos:start="53:69" pos:end="53:70">&gt;&gt;</operator> <literal type="number" pos:start="53:72" pos:end="53:72">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="55:21" pos:end="55:44"><expr pos:start="55:21" pos:end="55:43"><name pos:start="55:21" pos:end="55:25">level</name> <operator pos:start="55:27" pos:end="55:27">=</operator> <operator pos:start="55:29" pos:end="55:29">(</operator><name pos:start="55:30" pos:end="55:34">level</name> <operator pos:start="55:36" pos:end="55:36">-</operator> <literal type="number" pos:start="55:38" pos:end="55:38">1</literal><operator pos:start="55:39" pos:end="55:39">)</operator> <operator pos:start="55:41" pos:end="55:41">|</operator> <literal type="number" pos:start="55:43" pos:end="55:43">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="59:1" pos:end="59:15">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:15">PARANOID</name></cpp:ifdef>

                <if_stmt pos:start="61:17" pos:end="66:0"><if pos:start="61:17" pos:end="66:0">if <condition pos:start="61:20" pos:end="61:50">(<expr pos:start="61:21" pos:end="61:49"><name pos:start="61:21" pos:end="61:44"><name pos:start="61:21" pos:end="61:25">level</name> <argument_list type="generic" pos:start="61:27" pos:end="61:44">&lt; <argument pos:start="61:29" pos:end="61:42"><expr pos:start="61:29" pos:end="61:42"><operator pos:start="61:29" pos:end="61:29">-</operator><literal type="number" pos:start="61:30" pos:end="61:33">2048</literal> <operator pos:start="61:35" pos:end="61:36">||</operator> <name pos:start="61:38" pos:end="61:42">level</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="61:46" pos:end="61:49">2047</literal></expr>)</condition><block type="pseudo" pos:start="63:21" pos:end="66:0"><block_content pos:start="63:21" pos:end="66:0">

                    <expr_stmt pos:start="63:21" pos:end="66:0"><expr pos:start="63:21" pos:end="63:70"><call pos:start="63:21" pos:end="63:70"><name pos:start="63:21" pos:end="63:27">fprintf</name><argument_list pos:start="63:28" pos:end="63:70">(<argument pos:start="63:29" pos:end="63:34"><expr pos:start="63:29" pos:end="63:34"><name pos:start="63:29" pos:end="63:34">stderr</name></expr></argument>, <argument pos:start="63:37" pos:end="63:59"><expr pos:start="63:37" pos:end="63:59"><literal type="string" pos:start="63:37" pos:end="63:59">"unquant error %d %d\n"</literal></expr></argument>, <argument pos:start="63:62" pos:end="63:62"><expr pos:start="63:62" pos:end="63:62"><name pos:start="63:62" pos:end="63:62">i</name></expr></argument>, <argument pos:start="63:65" pos:end="63:69"><expr pos:start="63:65" pos:end="63:69"><name pos:start="63:65" pos:end="63:69">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="67:17" pos:end="67:33"><expr pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:24"><name pos:start="67:17" pos:end="67:21">block</name><index pos:start="67:22" pos:end="67:24">[<expr pos:start="67:23" pos:end="67:23"><name pos:start="67:23" pos:end="67:23">j</name></expr>]</index></name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:32">level</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="123:5">else <block pos:start="73:12" pos:end="123:5">{<block_content pos:start="75:9" pos:end="121:9">

        <expr_stmt pos:start="75:9" pos:end="75:14"><expr pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:9">i</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <literal type="number" pos:start="75:13" pos:end="75:13">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:43"><expr pos:start="77:9" pos:end="77:42"><name pos:start="77:9" pos:end="77:20">quant_matrix</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:42"><name pos:start="77:24" pos:end="77:24">s</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:42">non_intra_matrix</name></name></expr>;</expr_stmt>

        <for pos:start="79:9" pos:end="121:9">for<control pos:start="79:12" pos:end="79:27">(<init pos:start="79:13" pos:end="79:13">;</init><condition pos:start="79:14" pos:end="79:23"><expr pos:start="79:14" pos:end="79:22"><name pos:start="79:14" pos:end="79:14">i</name><operator pos:start="79:15" pos:end="79:15">&lt;</operator><name pos:start="79:16" pos:end="79:22">nCoeffs</name></expr>;</condition><incr pos:start="79:24" pos:end="79:26"><expr pos:start="79:24" pos:end="79:26"><name pos:start="79:24" pos:end="79:24">i</name><operator pos:start="79:25" pos:end="79:26">++</operator></expr></incr>)</control> <block pos:start="79:29" pos:end="121:9">{<block_content pos:start="81:13" pos:end="119:13">

            <decl_stmt pos:start="81:13" pos:end="81:36"><decl pos:start="81:13" pos:end="81:35"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:17">j</name><init pos:start="81:18" pos:end="81:35">= <expr pos:start="81:20" pos:end="81:35"><name pos:start="81:20" pos:end="81:35"><name pos:start="81:20" pos:end="81:32">zigzag_direct</name><index pos:start="81:33" pos:end="81:35">[<expr pos:start="81:34" pos:end="81:34"><name pos:start="81:34" pos:end="81:34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:29"><expr pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:17">level</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:28"><name pos:start="83:21" pos:end="83:25">block</name><index pos:start="83:26" pos:end="83:28">[<expr pos:start="83:27" pos:end="83:27"><name pos:start="83:27" pos:end="83:27">j</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="119:13"><if pos:start="85:13" pos:end="119:13">if <condition pos:start="85:16" pos:end="85:22">(<expr pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:21">level</name></expr>)</condition> <block pos:start="85:24" pos:end="119:13">{<block_content pos:start="87:17" pos:end="117:33">

                <if_stmt pos:start="87:17" pos:end="110:0"><if pos:start="87:17" pos:end="99:17">if <condition pos:start="87:20" pos:end="87:30">(<expr pos:start="87:21" pos:end="87:29"><name pos:start="87:21" pos:end="87:25">level</name> <operator pos:start="87:27" pos:end="87:27">&lt;</operator> <literal type="number" pos:start="87:29" pos:end="87:29">0</literal></expr>)</condition> <block pos:start="87:32" pos:end="99:17">{<block_content pos:start="89:21" pos:end="97:35">

                    <expr_stmt pos:start="89:21" pos:end="89:35"><expr pos:start="89:21" pos:end="89:34"><name pos:start="89:21" pos:end="89:25">level</name> <operator pos:start="89:27" pos:end="89:27">=</operator> <operator pos:start="89:29" pos:end="89:29">-</operator><name pos:start="89:30" pos:end="89:34">level</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="93:61"><expr pos:start="91:21" pos:end="93:60"><name pos:start="91:21" pos:end="91:25">level</name> <operator pos:start="91:27" pos:end="91:27">=</operator> <operator pos:start="91:29" pos:end="91:29">(</operator><operator pos:start="91:30" pos:end="91:30">(</operator><operator pos:start="91:31" pos:end="91:31">(</operator><name pos:start="91:32" pos:end="91:36">level</name> <operator pos:start="91:38" pos:end="91:39">&lt;&lt;</operator> <literal type="number" pos:start="91:41" pos:end="91:41">1</literal><operator pos:start="91:42" pos:end="91:42">)</operator> <operator pos:start="91:44" pos:end="91:44">+</operator> <literal type="number" pos:start="91:46" pos:end="91:46">1</literal><operator pos:start="91:47" pos:end="91:47">)</operator> <operator pos:start="91:49" pos:end="91:49">*</operator> <name pos:start="91:51" pos:end="91:56">qscale</name> <operator pos:start="91:58" pos:end="91:58">*</operator>

                             <operator pos:start="93:30" pos:end="93:30">(</operator><operator pos:start="93:31" pos:end="93:31">(</operator><name pos:start="93:32" pos:end="93:34">int</name><operator pos:start="93:35" pos:end="93:35">)</operator> <operator pos:start="93:37" pos:end="93:37">(</operator><name pos:start="93:38" pos:end="93:52"><name pos:start="93:38" pos:end="93:49">quant_matrix</name><index pos:start="93:50" pos:end="93:52">[<expr pos:start="93:51" pos:end="93:51"><name pos:start="93:51" pos:end="93:51">j</name></expr>]</index></name><operator pos:start="93:53" pos:end="93:53">)</operator><operator pos:start="93:54" pos:end="93:54">)</operator><operator pos:start="93:55" pos:end="93:55">)</operator> <operator pos:start="93:57" pos:end="93:58">&gt;&gt;</operator> <literal type="number" pos:start="93:60" pos:end="93:60">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:44"><expr pos:start="95:21" pos:end="95:43"><name pos:start="95:21" pos:end="95:25">level</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <operator pos:start="95:29" pos:end="95:29">(</operator><name pos:start="95:30" pos:end="95:34">level</name> <operator pos:start="95:36" pos:end="95:36">-</operator> <literal type="number" pos:start="95:38" pos:end="95:38">1</literal><operator pos:start="95:39" pos:end="95:39">)</operator> <operator pos:start="95:41" pos:end="95:41">|</operator> <literal type="number" pos:start="95:43" pos:end="95:43">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:35"><expr pos:start="97:21" pos:end="97:34"><name pos:start="97:21" pos:end="97:25">level</name> <operator pos:start="97:27" pos:end="97:27">=</operator> <operator pos:start="97:29" pos:end="97:29">-</operator><name pos:start="97:30" pos:end="97:34">level</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="99:19" pos:end="110:0">else <block pos:start="99:24" pos:end="110:0">{<block_content pos:start="101:21" pos:end="105:44">

                    <expr_stmt pos:start="101:21" pos:end="103:61"><expr pos:start="101:21" pos:end="103:60"><name pos:start="101:21" pos:end="101:25">level</name> <operator pos:start="101:27" pos:end="101:27">=</operator> <operator pos:start="101:29" pos:end="101:29">(</operator><operator pos:start="101:30" pos:end="101:30">(</operator><operator pos:start="101:31" pos:end="101:31">(</operator><name pos:start="101:32" pos:end="101:36">level</name> <operator pos:start="101:38" pos:end="101:39">&lt;&lt;</operator> <literal type="number" pos:start="101:41" pos:end="101:41">1</literal><operator pos:start="101:42" pos:end="101:42">)</operator> <operator pos:start="101:44" pos:end="101:44">+</operator> <literal type="number" pos:start="101:46" pos:end="101:46">1</literal><operator pos:start="101:47" pos:end="101:47">)</operator> <operator pos:start="101:49" pos:end="101:49">*</operator> <name pos:start="101:51" pos:end="101:56">qscale</name> <operator pos:start="101:58" pos:end="101:58">*</operator>

                             <operator pos:start="103:30" pos:end="103:30">(</operator><operator pos:start="103:31" pos:end="103:31">(</operator><name pos:start="103:32" pos:end="103:34">int</name><operator pos:start="103:35" pos:end="103:35">)</operator> <operator pos:start="103:37" pos:end="103:37">(</operator><name pos:start="103:38" pos:end="103:52"><name pos:start="103:38" pos:end="103:49">quant_matrix</name><index pos:start="103:50" pos:end="103:52">[<expr pos:start="103:51" pos:end="103:51"><name pos:start="103:51" pos:end="103:51">j</name></expr>]</index></name><operator pos:start="103:53" pos:end="103:53">)</operator><operator pos:start="103:54" pos:end="103:54">)</operator><operator pos:start="103:55" pos:end="103:55">)</operator> <operator pos:start="103:57" pos:end="103:58">&gt;&gt;</operator> <literal type="number" pos:start="103:60" pos:end="103:60">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:44"><expr pos:start="105:21" pos:end="105:43"><name pos:start="105:21" pos:end="105:25">level</name> <operator pos:start="105:27" pos:end="105:27">=</operator> <operator pos:start="105:29" pos:end="105:29">(</operator><name pos:start="105:30" pos:end="105:34">level</name> <operator pos:start="105:36" pos:end="105:36">-</operator> <literal type="number" pos:start="105:38" pos:end="105:38">1</literal><operator pos:start="105:39" pos:end="105:39">)</operator> <operator pos:start="105:41" pos:end="105:41">|</operator> <literal type="number" pos:start="105:43" pos:end="105:43">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="109:1" pos:end="109:15">#<cpp:directive pos:start="109:2" pos:end="109:6">ifdef</cpp:directive> <name pos:start="109:8" pos:end="109:15">PARANOID</name></cpp:ifdef>

                <if_stmt pos:start="111:17" pos:end="116:0"><if pos:start="111:17" pos:end="116:0">if <condition pos:start="111:20" pos:end="111:50">(<expr pos:start="111:21" pos:end="111:49"><name pos:start="111:21" pos:end="111:44"><name pos:start="111:21" pos:end="111:25">level</name> <argument_list type="generic" pos:start="111:27" pos:end="111:44">&lt; <argument pos:start="111:29" pos:end="111:42"><expr pos:start="111:29" pos:end="111:42"><operator pos:start="111:29" pos:end="111:29">-</operator><literal type="number" pos:start="111:30" pos:end="111:33">2048</literal> <operator pos:start="111:35" pos:end="111:36">||</operator> <name pos:start="111:38" pos:end="111:42">level</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="111:46" pos:end="111:49">2047</literal></expr>)</condition><block type="pseudo" pos:start="113:21" pos:end="116:0"><block_content pos:start="113:21" pos:end="116:0">

                    <expr_stmt pos:start="113:21" pos:end="116:0"><expr pos:start="113:21" pos:end="113:70"><call pos:start="113:21" pos:end="113:70"><name pos:start="113:21" pos:end="113:27">fprintf</name><argument_list pos:start="113:28" pos:end="113:70">(<argument pos:start="113:29" pos:end="113:34"><expr pos:start="113:29" pos:end="113:34"><name pos:start="113:29" pos:end="113:34">stderr</name></expr></argument>, <argument pos:start="113:37" pos:end="113:59"><expr pos:start="113:37" pos:end="113:59"><literal type="string" pos:start="113:37" pos:end="113:59">"unquant error %d %d\n"</literal></expr></argument>, <argument pos:start="113:62" pos:end="113:62"><expr pos:start="113:62" pos:end="113:62"><name pos:start="113:62" pos:end="113:62">i</name></expr></argument>, <argument pos:start="113:65" pos:end="113:69"><expr pos:start="113:65" pos:end="113:69"><name pos:start="113:65" pos:end="113:69">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="117:17" pos:end="117:33"><expr pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:24"><name pos:start="117:17" pos:end="117:21">block</name><index pos:start="117:22" pos:end="117:24">[<expr pos:start="117:23" pos:end="117:23"><name pos:start="117:23" pos:end="117:23">j</name></expr>]</index></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <name pos:start="117:28" pos:end="117:32">level</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
