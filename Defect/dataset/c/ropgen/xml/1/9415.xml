<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9415.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">rtas_ibm_change_msi</name><parameter_list pos:start="1:32" pos:end="7:50">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:42">PowerPCCPU</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">cpu</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:72"><decl pos:start="1:50" pos:end="1:72"><type pos:start="1:50" pos:end="1:72"><name pos:start="1:50" pos:end="1:65">sPAPREnvironment</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">spapr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:40">uint32_t</name></type> <name pos:start="3:42" pos:end="3:46">token</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:56">uint32_t</name></type> <name pos:start="3:58" pos:end="3:62">nargs</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:49"><decl pos:start="5:33" pos:end="5:49"><type pos:start="5:33" pos:end="5:49"><name pos:start="5:33" pos:end="5:44">target_ulong</name></type> <name pos:start="5:46" pos:end="5:49">args</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:64"><decl pos:start="5:52" pos:end="5:64"><type pos:start="5:52" pos:end="5:64"><name pos:start="5:52" pos:end="5:59">uint32_t</name></type> <name pos:start="5:61" pos:end="5:64">nret</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:49"><decl pos:start="7:33" pos:end="7:49"><type pos:start="7:33" pos:end="7:49"><name pos:start="7:33" pos:end="7:44">target_ulong</name></type> <name pos:start="7:46" pos:end="7:49">rets</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="227:1">{<block_content pos:start="11:5" pos:end="225:55">

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">config_addr</name> <init pos:start="11:26" pos:end="11:43">= <expr pos:start="11:28" pos:end="11:43"><call pos:start="11:28" pos:end="11:43"><name pos:start="11:28" pos:end="11:34">rtas_ld</name><argument_list pos:start="11:35" pos:end="11:43">(<argument pos:start="11:36" pos:end="11:39"><expr pos:start="11:36" pos:end="11:39"><name pos:start="11:36" pos:end="11:39">args</name></expr></argument>, <argument pos:start="11:42" pos:end="11:42"><expr pos:start="11:42" pos:end="11:42"><literal type="number" pos:start="11:42" pos:end="11:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:74"><decl pos:start="13:5" pos:end="13:73"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:17">buid</name> <init pos:start="13:19" pos:end="13:73">= <expr pos:start="13:21" pos:end="13:73"><operator pos:start="13:21" pos:end="13:21">(</operator><operator pos:start="13:22" pos:end="13:22">(</operator><name pos:start="13:23" pos:end="13:30">uint64_t</name><operator pos:start="13:31" pos:end="13:31">)</operator><call pos:start="13:32" pos:end="13:47"><name pos:start="13:32" pos:end="13:38">rtas_ld</name><argument_list pos:start="13:39" pos:end="13:47">(<argument pos:start="13:40" pos:end="13:43"><expr pos:start="13:40" pos:end="13:43"><name pos:start="13:40" pos:end="13:43">args</name></expr></argument>, <argument pos:start="13:46" pos:end="13:46"><expr pos:start="13:46" pos:end="13:46"><literal type="number" pos:start="13:46" pos:end="13:46">1</literal></expr></argument>)</argument_list></call> <operator pos:start="13:49" pos:end="13:50">&lt;&lt;</operator> <literal type="number" pos:start="13:52" pos:end="13:53">32</literal><operator pos:start="13:54" pos:end="13:54">)</operator> <operator pos:start="13:56" pos:end="13:56">|</operator> <call pos:start="13:58" pos:end="13:73"><name pos:start="13:58" pos:end="13:64">rtas_ld</name><argument_list pos:start="13:65" pos:end="13:73">(<argument pos:start="13:66" pos:end="13:69"><expr pos:start="13:66" pos:end="13:69"><name pos:start="13:66" pos:end="13:69">args</name></expr></argument>, <argument pos:start="13:72" pos:end="13:72"><expr pos:start="13:72" pos:end="13:72"><literal type="number" pos:start="13:72" pos:end="13:72">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:21">func</name> <init pos:start="15:23" pos:end="15:40">= <expr pos:start="15:25" pos:end="15:40"><call pos:start="15:25" pos:end="15:40"><name pos:start="15:25" pos:end="15:31">rtas_ld</name><argument_list pos:start="15:32" pos:end="15:40">(<argument pos:start="15:33" pos:end="15:36"><expr pos:start="15:33" pos:end="15:36"><name pos:start="15:33" pos:end="15:36">args</name></expr></argument>, <argument pos:start="15:39" pos:end="15:39"><expr pos:start="15:39" pos:end="15:39"><literal type="number" pos:start="15:39" pos:end="15:39">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:24">req_num</name> <init pos:start="17:26" pos:end="17:43">= <expr pos:start="17:28" pos:end="17:43"><call pos:start="17:28" pos:end="17:43"><name pos:start="17:28" pos:end="17:34">rtas_ld</name><argument_list pos:start="17:35" pos:end="17:43">(<argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:39">args</name></expr></argument>, <argument pos:start="17:42" pos:end="17:42"><expr pos:start="17:42" pos:end="17:42"><literal type="number" pos:start="17:42" pos:end="17:42">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:46" pos:end="17:66">/* 0 == remove all */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:24">seq_num</name> <init pos:start="19:26" pos:end="19:43">= <expr pos:start="19:28" pos:end="19:43"><call pos:start="19:28" pos:end="19:43"><name pos:start="19:28" pos:end="19:34">rtas_ld</name><argument_list pos:start="19:35" pos:end="19:43">(<argument pos:start="19:36" pos:end="19:39"><expr pos:start="19:36" pos:end="19:39"><name pos:start="19:36" pos:end="19:39">args</name></expr></argument>, <argument pos:start="19:42" pos:end="19:42"><expr pos:start="19:42" pos:end="19:42"><literal type="number" pos:start="19:42" pos:end="19:42">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:30">ret_intr_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">ndev</name></decl>, <decl pos:start="23:15" pos:end="23:17"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:15" pos:end="23:17">irq</name></decl>, <decl pos:start="23:20" pos:end="23:31"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:20" pos:end="23:27">max_irqs</name> <init pos:start="23:29" pos:end="23:31">= <expr pos:start="23:31" pos:end="23:31"><literal type="number" pos:start="23:31" pos:end="23:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:17">sPAPRPHBState</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:22">phb</name> <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">PCIDevice</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:19">pdev</name> <init pos:start="27:21" pos:end="27:26">= <expr pos:start="27:23" pos:end="27:26"><name pos:start="27:23" pos:end="27:26">NULL</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="31:5" pos:end="55:5">switch <condition pos:start="31:12" pos:end="31:17">(<expr pos:start="31:13" pos:end="31:16"><name pos:start="31:13" pos:end="31:16">func</name></expr>)</condition> <block pos:start="31:19" pos:end="55:5">{<block_content pos:start="33:5" pos:end="53:15">

    <case pos:start="33:5" pos:end="33:28">case <expr pos:start="33:10" pos:end="33:27"><name pos:start="33:10" pos:end="33:27">RTAS_CHANGE_MSI_FN</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:24">case <expr pos:start="35:10" pos:end="35:23"><name pos:start="35:10" pos:end="35:23">RTAS_CHANGE_FN</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:38"><expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:21">ret_intr_type</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:37">RTAS_TYPE_MSI</name></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:29">case <expr pos:start="41:10" pos:end="41:28"><name pos:start="41:10" pos:end="41:28">RTAS_CHANGE_MSIX_FN</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:21">ret_intr_type</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <name pos:start="43:25" pos:end="43:38">RTAS_TYPE_MSIX</name></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <default pos:start="47:5" pos:end="47:12">default:</default>

        <expr_stmt pos:start="49:9" pos:end="49:73"><expr pos:start="49:9" pos:end="49:72"><call pos:start="49:9" pos:end="49:72"><name pos:start="49:9" pos:end="49:20">error_report</name><argument_list pos:start="49:21" pos:end="49:72">(<argument pos:start="49:22" pos:end="49:65"><expr pos:start="49:22" pos:end="49:65"><literal type="string" pos:start="49:22" pos:end="49:65">"rtas_ibm_change_msi(%u) is not implemented"</literal></expr></argument>, <argument pos:start="49:68" pos:end="49:71"><expr pos:start="49:68" pos:end="49:71"><name pos:start="49:68" pos:end="49:71">func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:47"><expr pos:start="51:9" pos:end="51:46"><call pos:start="51:9" pos:end="51:46"><name pos:start="51:9" pos:end="51:15">rtas_st</name><argument_list pos:start="51:16" pos:end="51:46">(<argument pos:start="51:17" pos:end="51:20"><expr pos:start="51:17" pos:end="51:20"><name pos:start="51:17" pos:end="51:20">rets</name></expr></argument>, <argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr></argument>, <argument pos:start="51:26" pos:end="51:45"><expr pos:start="51:26" pos:end="51:45"><name pos:start="51:26" pos:end="51:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="59:5" pos:end="59:28">/* Fins sPAPRPHBState */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:32"><expr pos:start="61:5" pos:end="61:31"><name pos:start="61:5" pos:end="61:7">phb</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:31"><name pos:start="61:11" pos:end="61:18">find_phb</name><argument_list pos:start="61:19" pos:end="61:31">(<argument pos:start="61:20" pos:end="61:24"><expr pos:start="61:20" pos:end="61:24"><name pos:start="61:20" pos:end="61:24">spapr</name></expr></argument>, <argument pos:start="61:27" pos:end="61:30"><expr pos:start="61:27" pos:end="61:30"><name pos:start="61:27" pos:end="61:30">buid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:12">(<expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">phb</name></expr>)</condition> <block pos:start="63:14" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:50">

        <expr_stmt pos:start="65:9" pos:end="65:50"><expr pos:start="65:9" pos:end="65:49"><name pos:start="65:9" pos:end="65:12">pdev</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:49"><name pos:start="65:16" pos:end="65:23">find_dev</name><argument_list pos:start="65:24" pos:end="65:49">(<argument pos:start="65:25" pos:end="65:29"><expr pos:start="65:25" pos:end="65:29"><name pos:start="65:25" pos:end="65:29">spapr</name></expr></argument>, <argument pos:start="65:32" pos:end="65:35"><expr pos:start="65:32" pos:end="65:35"><name pos:start="65:32" pos:end="65:35">buid</name></expr></argument>, <argument pos:start="65:38" pos:end="65:48"><expr pos:start="65:38" pos:end="65:48"><name pos:start="65:38" pos:end="65:48">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:22">(<expr pos:start="69:9" pos:end="69:21"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:12">phb</name> <operator pos:start="69:14" pos:end="69:15">||</operator> <operator pos:start="69:17" pos:end="69:17">!</operator><name pos:start="69:18" pos:end="69:21">pdev</name></expr>)</condition> <block pos:start="69:24" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:15">

        <expr_stmt pos:start="71:9" pos:end="71:47"><expr pos:start="71:9" pos:end="71:46"><call pos:start="71:9" pos:end="71:46"><name pos:start="71:9" pos:end="71:15">rtas_st</name><argument_list pos:start="71:16" pos:end="71:46">(<argument pos:start="71:17" pos:end="71:20"><expr pos:start="71:17" pos:end="71:20"><name pos:start="71:17" pos:end="71:20">rets</name></expr></argument>, <argument pos:start="71:23" pos:end="71:23"><expr pos:start="71:23" pos:end="71:23"><literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr></argument>, <argument pos:start="71:26" pos:end="71:45"><expr pos:start="71:26" pos:end="71:45"><name pos:start="71:26" pos:end="71:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:24">/* Releasing MSIs */</comment>

    <if_stmt pos:start="81:5" pos:end="103:5"><if pos:start="81:5" pos:end="103:5">if <condition pos:start="81:8" pos:end="81:17">(<expr pos:start="81:9" pos:end="81:16"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:16">req_num</name></expr>)</condition> <block pos:start="81:19" pos:end="103:5">{<block_content pos:start="83:9" pos:end="101:15">

        <expr_stmt pos:start="83:9" pos:end="83:58"><expr pos:start="83:9" pos:end="83:57"><name pos:start="83:9" pos:end="83:12">ndev</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <call pos:start="83:16" pos:end="83:57"><name pos:start="83:16" pos:end="83:32">spapr_msicfg_find</name><argument_list pos:start="83:33" pos:end="83:57">(<argument pos:start="83:34" pos:end="83:36"><expr pos:start="83:34" pos:end="83:36"><name pos:start="83:34" pos:end="83:36">phb</name></expr></argument>, <argument pos:start="83:39" pos:end="83:49"><expr pos:start="83:39" pos:end="83:49"><name pos:start="83:39" pos:end="83:49">config_addr</name></expr></argument>, <argument pos:start="83:52" pos:end="83:56"><expr pos:start="83:52" pos:end="83:56"><name pos:start="83:52" pos:end="83:56">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:21">(<expr pos:start="85:13" pos:end="85:20"><name pos:start="85:13" pos:end="85:16">ndev</name> <operator pos:start="85:18" pos:end="85:18">&lt;</operator> <literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>)</condition> <block pos:start="85:23" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:19">

            <expr_stmt pos:start="87:13" pos:end="87:77"><expr pos:start="87:13" pos:end="87:76"><call pos:start="87:13" pos:end="87:76"><name pos:start="87:13" pos:end="87:31">trace_spapr_pci_msi</name><argument_list pos:start="87:32" pos:end="87:76">(<argument pos:start="87:33" pos:end="87:58"><expr pos:start="87:33" pos:end="87:58"><literal type="string" pos:start="87:33" pos:end="87:58">"MSI has not been enabled"</literal></expr></argument>, <argument pos:start="87:61" pos:end="87:62"><expr pos:start="87:61" pos:end="87:62"><operator pos:start="87:61" pos:end="87:61">-</operator><literal type="number" pos:start="87:62" pos:end="87:62">1</literal></expr></argument>, <argument pos:start="87:65" pos:end="87:75"><expr pos:start="87:65" pos:end="87:75"><name pos:start="87:65" pos:end="87:75">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:48"><expr pos:start="89:13" pos:end="89:47"><call pos:start="89:13" pos:end="89:47"><name pos:start="89:13" pos:end="89:19">rtas_st</name><argument_list pos:start="89:20" pos:end="89:47">(<argument pos:start="89:21" pos:end="89:24"><expr pos:start="89:21" pos:end="89:24"><name pos:start="89:21" pos:end="89:24">rets</name></expr></argument>, <argument pos:start="89:27" pos:end="89:27"><expr pos:start="89:27" pos:end="89:27"><literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr></argument>, <argument pos:start="89:30" pos:end="89:46"><expr pos:start="89:30" pos:end="89:46"><name pos:start="89:30" pos:end="89:46">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:64"><expr pos:start="95:9" pos:end="95:63"><call pos:start="95:9" pos:end="95:63"><name pos:start="95:9" pos:end="95:27">trace_spapr_pci_msi</name><argument_list pos:start="95:28" pos:end="95:63">(<argument pos:start="95:29" pos:end="95:43"><expr pos:start="95:29" pos:end="95:43"><literal type="string" pos:start="95:29" pos:end="95:43">"Released MSIs"</literal></expr></argument>, <argument pos:start="95:46" pos:end="95:49"><expr pos:start="95:46" pos:end="95:49"><name pos:start="95:46" pos:end="95:49">ndev</name></expr></argument>, <argument pos:start="95:52" pos:end="95:62"><expr pos:start="95:52" pos:end="95:62"><name pos:start="95:52" pos:end="95:62">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:43"><expr pos:start="97:9" pos:end="97:42"><call pos:start="97:9" pos:end="97:42"><name pos:start="97:9" pos:end="97:15">rtas_st</name><argument_list pos:start="97:16" pos:end="97:42">(<argument pos:start="97:17" pos:end="97:20"><expr pos:start="97:17" pos:end="97:20"><name pos:start="97:17" pos:end="97:20">rets</name></expr></argument>, <argument pos:start="97:23" pos:end="97:23"><expr pos:start="97:23" pos:end="97:23"><literal type="number" pos:start="97:23" pos:end="97:23">0</literal></expr></argument>, <argument pos:start="97:26" pos:end="97:41"><expr pos:start="97:26" pos:end="97:41"><name pos:start="97:26" pos:end="97:41">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:28"><expr pos:start="99:9" pos:end="99:27"><call pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:15">rtas_st</name><argument_list pos:start="99:16" pos:end="99:27">(<argument pos:start="99:17" pos:end="99:20"><expr pos:start="99:17" pos:end="99:20"><name pos:start="99:17" pos:end="99:20">rets</name></expr></argument>, <argument pos:start="99:23" pos:end="99:23"><expr pos:start="99:23" pos:end="99:23"><literal type="number" pos:start="99:23" pos:end="99:23">1</literal></expr></argument>, <argument pos:start="99:26" pos:end="99:26"><expr pos:start="99:26" pos:end="99:26"><literal type="number" pos:start="99:26" pos:end="99:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:22">/* Enabling MSI */</comment>



    <comment type="block" pos:start="111:5" pos:end="111:74">/* Find a device number in the map to add or reuse the existing one */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:53"><expr pos:start="113:5" pos:end="113:52"><name pos:start="113:5" pos:end="113:8">ndev</name> <operator pos:start="113:10" pos:end="113:10">=</operator> <call pos:start="113:12" pos:end="113:52"><name pos:start="113:12" pos:end="113:28">spapr_msicfg_find</name><argument_list pos:start="113:29" pos:end="113:52">(<argument pos:start="113:30" pos:end="113:32"><expr pos:start="113:30" pos:end="113:32"><name pos:start="113:30" pos:end="113:32">phb</name></expr></argument>, <argument pos:start="113:35" pos:end="113:45"><expr pos:start="113:35" pos:end="113:45"><name pos:start="113:35" pos:end="113:45">config_addr</name></expr></argument>, <argument pos:start="113:48" pos:end="113:51"><expr pos:start="113:48" pos:end="113:51"><name pos:start="113:48" pos:end="113:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:48">(<expr pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:12">ndev</name> <operator pos:start="115:14" pos:end="115:15">&gt;=</operator> <name pos:start="115:17" pos:end="115:35">SPAPR_MSIX_MAX_DEVS</name> <operator pos:start="115:37" pos:end="115:38">||</operator> <name pos:start="115:40" pos:end="115:43">ndev</name> <operator pos:start="115:45" pos:end="115:45">&lt;</operator> <literal type="number" pos:start="115:47" pos:end="115:47">0</literal></expr>)</condition> <block pos:start="115:50" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:15">

        <expr_stmt pos:start="117:9" pos:end="117:59"><expr pos:start="117:9" pos:end="117:58"><call pos:start="117:9" pos:end="117:58"><name pos:start="117:9" pos:end="117:20">error_report</name><argument_list pos:start="117:21" pos:end="117:58">(<argument pos:start="117:22" pos:end="117:57"><expr pos:start="117:22" pos:end="117:57"><literal type="string" pos:start="117:22" pos:end="117:57">"No free entry for a new MSI device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:44"><expr pos:start="119:9" pos:end="119:43"><call pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:15">rtas_st</name><argument_list pos:start="119:16" pos:end="119:43">(<argument pos:start="119:17" pos:end="119:20"><expr pos:start="119:17" pos:end="119:20"><name pos:start="119:17" pos:end="119:20">rets</name></expr></argument>, <argument pos:start="119:23" pos:end="119:23"><expr pos:start="119:23" pos:end="119:23"><literal type="number" pos:start="119:23" pos:end="119:23">0</literal></expr></argument>, <argument pos:start="119:26" pos:end="119:42"><expr pos:start="119:26" pos:end="119:42"><name pos:start="119:26" pos:end="119:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:62"><expr pos:start="125:5" pos:end="125:61"><call pos:start="125:5" pos:end="125:61"><name pos:start="125:5" pos:end="125:23">trace_spapr_pci_msi</name><argument_list pos:start="125:24" pos:end="125:61">(<argument pos:start="125:25" pos:end="125:41"><expr pos:start="125:25" pos:end="125:41"><literal type="string" pos:start="125:25" pos:end="125:41">"Configuring MSI"</literal></expr></argument>, <argument pos:start="125:44" pos:end="125:47"><expr pos:start="125:44" pos:end="125:47"><name pos:start="125:44" pos:end="125:47">ndev</name></expr></argument>, <argument pos:start="125:50" pos:end="125:60"><expr pos:start="125:50" pos:end="125:60"><name pos:start="125:50" pos:end="125:60">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:64">/* Check if the device supports as many IRQs as requested */</comment>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:39">(<expr pos:start="131:9" pos:end="131:38"><name pos:start="131:9" pos:end="131:21">ret_intr_type</name> <operator pos:start="131:23" pos:end="131:24">==</operator> <name pos:start="131:26" pos:end="131:38">RTAS_TYPE_MSI</name></expr>)</condition> <block pos:start="131:41" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:50">

        <expr_stmt pos:start="133:9" pos:end="133:50"><expr pos:start="133:9" pos:end="133:49"><name pos:start="133:9" pos:end="133:16">max_irqs</name> <operator pos:start="133:18" pos:end="133:18">=</operator> <call pos:start="133:20" pos:end="133:49"><name pos:start="133:20" pos:end="133:43">msi_nr_vectors_allocated</name><argument_list pos:start="133:44" pos:end="133:49">(<argument pos:start="133:45" pos:end="133:48"><expr pos:start="133:45" pos:end="133:48"><name pos:start="133:45" pos:end="133:48">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="135:7" pos:end="139:5">else if <condition pos:start="135:15" pos:end="135:47">(<expr pos:start="135:16" pos:end="135:46"><name pos:start="135:16" pos:end="135:28">ret_intr_type</name> <operator pos:start="135:30" pos:end="135:31">==</operator> <name pos:start="135:33" pos:end="135:46">RTAS_TYPE_MSIX</name></expr>)</condition> <block pos:start="135:49" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:41">

        <expr_stmt pos:start="137:9" pos:end="137:41"><expr pos:start="137:9" pos:end="137:40"><name pos:start="137:9" pos:end="137:16">max_irqs</name> <operator pos:start="137:18" pos:end="137:18">=</operator> <name pos:start="137:20" pos:end="137:40"><name pos:start="137:20" pos:end="137:23">pdev</name><operator pos:start="137:24" pos:end="137:25">-&gt;</operator><name pos:start="137:26" pos:end="137:40">msix_entries_nr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="141:5" pos:end="151:5"><if pos:start="141:5" pos:end="151:5">if <condition pos:start="141:8" pos:end="141:18">(<expr pos:start="141:9" pos:end="141:17"><operator pos:start="141:9" pos:end="141:9">!</operator><name pos:start="141:10" pos:end="141:17">max_irqs</name></expr>)</condition> <block pos:start="141:20" pos:end="151:5">{<block_content pos:start="143:9" pos:end="149:15">

        <expr_stmt pos:start="143:9" pos:end="145:42"><expr pos:start="143:9" pos:end="145:41"><call pos:start="143:9" pos:end="145:41"><name pos:start="143:9" pos:end="143:20">error_report</name><argument_list pos:start="143:21" pos:end="145:41">(<argument pos:start="143:22" pos:end="143:79"><expr pos:start="143:22" pos:end="143:79"><literal type="string" pos:start="143:22" pos:end="143:79">"Requested interrupt type %d is not enabled for device#%d"</literal></expr></argument>,

                     <argument pos:start="145:22" pos:end="145:34"><expr pos:start="145:22" pos:end="145:34"><name pos:start="145:22" pos:end="145:34">ret_intr_type</name></expr></argument>, <argument pos:start="145:37" pos:end="145:40"><expr pos:start="145:37" pos:end="145:40"><name pos:start="145:37" pos:end="145:40">ndev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:29"><expr pos:start="147:9" pos:end="147:28"><call pos:start="147:9" pos:end="147:28"><name pos:start="147:9" pos:end="147:15">rtas_st</name><argument_list pos:start="147:16" pos:end="147:28">(<argument pos:start="147:17" pos:end="147:20"><expr pos:start="147:17" pos:end="147:20"><name pos:start="147:17" pos:end="147:20">rets</name></expr></argument>, <argument pos:start="147:23" pos:end="147:23"><expr pos:start="147:23" pos:end="147:23"><literal type="number" pos:start="147:23" pos:end="147:23">0</literal></expr></argument>, <argument pos:start="147:26" pos:end="147:27"><expr pos:start="147:26" pos:end="147:27"><operator pos:start="147:26" pos:end="147:26">-</operator><literal type="number" pos:start="147:27" pos:end="147:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="147:31" pos:end="147:50">/* Hardware error */</comment>

        <return pos:start="149:9" pos:end="149:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="153:5" pos:end="153:60">/* Correct the number if the guest asked for too many */</comment>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:27">(<expr pos:start="155:9" pos:end="155:26"><name pos:start="155:9" pos:end="155:15">req_num</name> <operator pos:start="155:17" pos:end="155:17">&gt;</operator> <name pos:start="155:19" pos:end="155:26">max_irqs</name></expr>)</condition> <block pos:start="155:29" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:27">

        <expr_stmt pos:start="157:9" pos:end="157:27"><expr pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:15">req_num</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <name pos:start="157:19" pos:end="157:26">max_irqs</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:72">/* Check if there is an old config and MSI number has not changed */</comment>

    <if_stmt pos:start="165:5" pos:end="175:5"><if pos:start="165:5" pos:end="175:5">if <condition pos:start="165:8" pos:end="165:76">(<expr pos:start="165:9" pos:end="165:75"><name pos:start="165:9" pos:end="165:28"><name pos:start="165:9" pos:end="165:11">phb</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:22">msi_table</name><index pos:start="165:23" pos:end="165:28">[<expr pos:start="165:24" pos:end="165:27"><name pos:start="165:24" pos:end="165:27">ndev</name></expr>]</index></name><operator pos:start="165:29" pos:end="165:29">.</operator><name pos:start="165:30" pos:end="165:33">nvec</name> <operator pos:start="165:35" pos:end="165:36">&amp;&amp;</operator> <operator pos:start="165:38" pos:end="165:38">(</operator><name pos:start="165:39" pos:end="165:45">req_num</name> <operator pos:start="165:47" pos:end="165:48">!=</operator> <name pos:start="165:50" pos:end="165:69"><name pos:start="165:50" pos:end="165:52">phb</name><operator pos:start="165:53" pos:end="165:54">-&gt;</operator><name pos:start="165:55" pos:end="165:63">msi_table</name><index pos:start="165:64" pos:end="165:69">[<expr pos:start="165:65" pos:end="165:68"><name pos:start="165:65" pos:end="165:68">ndev</name></expr>]</index></name><operator pos:start="165:70" pos:end="165:70">.</operator><name pos:start="165:71" pos:end="165:74">nvec</name><operator pos:start="165:75" pos:end="165:75">)</operator></expr>)</condition> <block pos:start="165:78" pos:end="175:5">{<block_content pos:start="169:9" pos:end="173:15">

        <comment type="block" pos:start="167:9" pos:end="167:34">/* Unexpected behaviour */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:68"><expr pos:start="169:9" pos:end="169:67"><call pos:start="169:9" pos:end="169:67"><name pos:start="169:9" pos:end="169:20">error_report</name><argument_list pos:start="169:21" pos:end="169:67">(<argument pos:start="169:22" pos:end="169:60"><expr pos:start="169:22" pos:end="169:60"><literal type="string" pos:start="169:22" pos:end="169:60">"Cannot reuse MSI config for device#%d"</literal></expr></argument>, <argument pos:start="169:63" pos:end="169:66"><expr pos:start="169:63" pos:end="169:66"><name pos:start="169:63" pos:end="169:66">ndev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:44"><expr pos:start="171:9" pos:end="171:43"><call pos:start="171:9" pos:end="171:43"><name pos:start="171:9" pos:end="171:15">rtas_st</name><argument_list pos:start="171:16" pos:end="171:43">(<argument pos:start="171:17" pos:end="171:20"><expr pos:start="171:17" pos:end="171:20"><name pos:start="171:17" pos:end="171:20">rets</name></expr></argument>, <argument pos:start="171:23" pos:end="171:23"><expr pos:start="171:23" pos:end="171:23"><literal type="number" pos:start="171:23" pos:end="171:23">0</literal></expr></argument>, <argument pos:start="171:26" pos:end="171:42"><expr pos:start="171:26" pos:end="171:42"><name pos:start="171:26" pos:end="171:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="173:9" pos:end="173:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:50">/* There is no cached config, allocate MSIs */</comment>

    <if_stmt pos:start="181:5" pos:end="203:5"><if pos:start="181:5" pos:end="203:5">if <condition pos:start="181:8" pos:end="181:35">(<expr pos:start="181:9" pos:end="181:34"><operator pos:start="181:9" pos:end="181:9">!</operator><name pos:start="181:10" pos:end="181:29"><name pos:start="181:10" pos:end="181:12">phb</name><operator pos:start="181:13" pos:end="181:14">-&gt;</operator><name pos:start="181:15" pos:end="181:23">msi_table</name><index pos:start="181:24" pos:end="181:29">[<expr pos:start="181:25" pos:end="181:28"><name pos:start="181:25" pos:end="181:28">ndev</name></expr>]</index></name><operator pos:start="181:30" pos:end="181:30">.</operator><name pos:start="181:31" pos:end="181:34">nvec</name></expr>)</condition> <block pos:start="181:37" pos:end="203:5">{<block_content pos:start="183:9" pos:end="201:55">

        <expr_stmt pos:start="183:9" pos:end="185:63"><expr pos:start="183:9" pos:end="185:62"><name pos:start="183:9" pos:end="183:11">irq</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="185:62"><name pos:start="183:15" pos:end="183:30">xics_alloc_block</name><argument_list pos:start="183:31" pos:end="185:62">(<argument pos:start="183:32" pos:end="183:41"><expr pos:start="183:32" pos:end="183:41"><name pos:start="183:32" pos:end="183:41"><name pos:start="183:32" pos:end="183:36">spapr</name><operator pos:start="183:37" pos:end="183:38">-&gt;</operator><name pos:start="183:39" pos:end="183:41">icp</name></name></expr></argument>, <argument pos:start="183:44" pos:end="183:44"><expr pos:start="183:44" pos:end="183:44"><literal type="number" pos:start="183:44" pos:end="183:44">0</literal></expr></argument>, <argument pos:start="183:47" pos:end="183:53"><expr pos:start="183:47" pos:end="183:53"><name pos:start="183:47" pos:end="183:53">req_num</name></expr></argument>, <argument pos:start="183:56" pos:end="183:60"><expr pos:start="183:56" pos:end="183:60"><name pos:start="183:56" pos:end="183:60">false</name></expr></argument>,

                               <argument pos:start="185:32" pos:end="185:61"><expr pos:start="185:32" pos:end="185:61"><name pos:start="185:32" pos:end="185:44">ret_intr_type</name> <operator pos:start="185:46" pos:end="185:47">==</operator> <name pos:start="185:49" pos:end="185:61">RTAS_TYPE_MSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="195:9"><if pos:start="187:9" pos:end="195:9">if <condition pos:start="187:12" pos:end="187:20">(<expr pos:start="187:13" pos:end="187:19"><name pos:start="187:13" pos:end="187:15">irq</name> <operator pos:start="187:17" pos:end="187:17">&lt;</operator> <literal type="number" pos:start="187:19" pos:end="187:19">0</literal></expr>)</condition> <block pos:start="187:22" pos:end="195:9">{<block_content pos:start="189:13" pos:end="193:19">

            <expr_stmt pos:start="189:13" pos:end="189:69"><expr pos:start="189:13" pos:end="189:68"><call pos:start="189:13" pos:end="189:68"><name pos:start="189:13" pos:end="189:24">error_report</name><argument_list pos:start="189:25" pos:end="189:68">(<argument pos:start="189:26" pos:end="189:61"><expr pos:start="189:26" pos:end="189:61"><literal type="string" pos:start="189:26" pos:end="189:61">"Cannot allocate MSIs for device#%d"</literal></expr></argument>, <argument pos:start="189:64" pos:end="189:67"><expr pos:start="189:64" pos:end="189:67"><name pos:start="189:64" pos:end="189:67">ndev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:48"><expr pos:start="191:13" pos:end="191:47"><call pos:start="191:13" pos:end="191:47"><name pos:start="191:13" pos:end="191:19">rtas_st</name><argument_list pos:start="191:20" pos:end="191:47">(<argument pos:start="191:21" pos:end="191:24"><expr pos:start="191:21" pos:end="191:24"><name pos:start="191:21" pos:end="191:24">rets</name></expr></argument>, <argument pos:start="191:27" pos:end="191:27"><expr pos:start="191:27" pos:end="191:27"><literal type="number" pos:start="191:27" pos:end="191:27">0</literal></expr></argument>, <argument pos:start="191:30" pos:end="191:46"><expr pos:start="191:30" pos:end="191:46"><name pos:start="191:30" pos:end="191:46">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="193:13" pos:end="193:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:39"><expr pos:start="197:9" pos:end="197:38"><name pos:start="197:9" pos:end="197:28"><name pos:start="197:9" pos:end="197:11">phb</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:22">msi_table</name><index pos:start="197:23" pos:end="197:28">[<expr pos:start="197:24" pos:end="197:27"><name pos:start="197:24" pos:end="197:27">ndev</name></expr>]</index></name><operator pos:start="197:29" pos:end="197:29">.</operator><name pos:start="197:30" pos:end="197:32">irq</name> <operator pos:start="197:34" pos:end="197:34">=</operator> <name pos:start="197:36" pos:end="197:38">irq</name></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:44"><expr pos:start="199:9" pos:end="199:43"><name pos:start="199:9" pos:end="199:28"><name pos:start="199:9" pos:end="199:11">phb</name><operator pos:start="199:12" pos:end="199:13">-&gt;</operator><name pos:start="199:14" pos:end="199:22">msi_table</name><index pos:start="199:23" pos:end="199:28">[<expr pos:start="199:24" pos:end="199:27"><name pos:start="199:24" pos:end="199:27">ndev</name></expr>]</index></name><operator pos:start="199:29" pos:end="199:29">.</operator><name pos:start="199:30" pos:end="199:33">nvec</name> <operator pos:start="199:35" pos:end="199:35">=</operator> <name pos:start="199:37" pos:end="199:43">req_num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:55"><expr pos:start="201:9" pos:end="201:54"><name pos:start="201:9" pos:end="201:28"><name pos:start="201:9" pos:end="201:11">phb</name><operator pos:start="201:12" pos:end="201:13">-&gt;</operator><name pos:start="201:14" pos:end="201:22">msi_table</name><index pos:start="201:23" pos:end="201:28">[<expr pos:start="201:24" pos:end="201:27"><name pos:start="201:24" pos:end="201:27">ndev</name></expr>]</index></name><operator pos:start="201:29" pos:end="201:29">.</operator><name pos:start="201:30" pos:end="201:40">config_addr</name> <operator pos:start="201:42" pos:end="201:42">=</operator> <name pos:start="201:44" pos:end="201:54">config_addr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:73">/* Setup MSI/MSIX vectors in the device (via cfgspace or MSIX BAR) */</comment>

    <expr_stmt pos:start="209:5" pos:end="211:56"><expr pos:start="209:5" pos:end="211:55"><call pos:start="209:5" pos:end="211:55"><name pos:start="209:5" pos:end="209:20">spapr_msi_setmsg</name><argument_list pos:start="209:21" pos:end="211:55">(<argument pos:start="209:22" pos:end="209:25"><expr pos:start="209:22" pos:end="209:25"><name pos:start="209:22" pos:end="209:25">pdev</name></expr></argument>, <argument pos:start="209:28" pos:end="209:46"><expr pos:start="209:28" pos:end="209:46"><name pos:start="209:28" pos:end="209:46"><name pos:start="209:28" pos:end="209:32">spapr</name><operator pos:start="209:33" pos:end="209:34">-&gt;</operator><name pos:start="209:35" pos:end="209:46">msi_win_addr</name></name></expr></argument>, <argument pos:start="209:49" pos:end="209:79"><expr pos:start="209:49" pos:end="209:79"><name pos:start="209:49" pos:end="209:61">ret_intr_type</name> <operator pos:start="209:63" pos:end="209:64">==</operator> <name pos:start="209:66" pos:end="209:79">RTAS_TYPE_MSIX</name></expr></argument>,

                     <argument pos:start="211:22" pos:end="211:45"><expr pos:start="211:22" pos:end="211:45"><name pos:start="211:22" pos:end="211:41"><name pos:start="211:22" pos:end="211:24">phb</name><operator pos:start="211:25" pos:end="211:26">-&gt;</operator><name pos:start="211:27" pos:end="211:35">msi_table</name><index pos:start="211:36" pos:end="211:41">[<expr pos:start="211:37" pos:end="211:40"><name pos:start="211:37" pos:end="211:40">ndev</name></expr>]</index></name><operator pos:start="211:42" pos:end="211:42">.</operator><name pos:start="211:43" pos:end="211:45">irq</name></expr></argument>, <argument pos:start="211:48" pos:end="211:54"><expr pos:start="211:48" pos:end="211:54"><name pos:start="211:48" pos:end="211:54">req_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:39"><expr pos:start="215:5" pos:end="215:38"><call pos:start="215:5" pos:end="215:38"><name pos:start="215:5" pos:end="215:11">rtas_st</name><argument_list pos:start="215:12" pos:end="215:38">(<argument pos:start="215:13" pos:end="215:16"><expr pos:start="215:13" pos:end="215:16"><name pos:start="215:13" pos:end="215:16">rets</name></expr></argument>, <argument pos:start="215:19" pos:end="215:19"><expr pos:start="215:19" pos:end="215:19"><literal type="number" pos:start="215:19" pos:end="215:19">0</literal></expr></argument>, <argument pos:start="215:22" pos:end="215:37"><expr pos:start="215:22" pos:end="215:37"><name pos:start="215:22" pos:end="215:37">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:30"><expr pos:start="217:5" pos:end="217:29"><call pos:start="217:5" pos:end="217:29"><name pos:start="217:5" pos:end="217:11">rtas_st</name><argument_list pos:start="217:12" pos:end="217:29">(<argument pos:start="217:13" pos:end="217:16"><expr pos:start="217:13" pos:end="217:16"><name pos:start="217:13" pos:end="217:16">rets</name></expr></argument>, <argument pos:start="217:19" pos:end="217:19"><expr pos:start="217:19" pos:end="217:19"><literal type="number" pos:start="217:19" pos:end="217:19">1</literal></expr></argument>, <argument pos:start="217:22" pos:end="217:28"><expr pos:start="217:22" pos:end="217:28"><name pos:start="217:22" pos:end="217:28">req_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:32"><expr pos:start="219:5" pos:end="219:31"><call pos:start="219:5" pos:end="219:31"><name pos:start="219:5" pos:end="219:11">rtas_st</name><argument_list pos:start="219:12" pos:end="219:31">(<argument pos:start="219:13" pos:end="219:16"><expr pos:start="219:13" pos:end="219:16"><name pos:start="219:13" pos:end="219:16">rets</name></expr></argument>, <argument pos:start="219:19" pos:end="219:19"><expr pos:start="219:19" pos:end="219:19"><literal type="number" pos:start="219:19" pos:end="219:19">2</literal></expr></argument>, <argument pos:start="219:22" pos:end="219:30"><expr pos:start="219:22" pos:end="219:30"><operator pos:start="219:22" pos:end="219:23">++</operator><name pos:start="219:24" pos:end="219:30">seq_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:36"><expr pos:start="221:5" pos:end="221:35"><call pos:start="221:5" pos:end="221:35"><name pos:start="221:5" pos:end="221:11">rtas_st</name><argument_list pos:start="221:12" pos:end="221:35">(<argument pos:start="221:13" pos:end="221:16"><expr pos:start="221:13" pos:end="221:16"><name pos:start="221:13" pos:end="221:16">rets</name></expr></argument>, <argument pos:start="221:19" pos:end="221:19"><expr pos:start="221:19" pos:end="221:19"><literal type="number" pos:start="221:19" pos:end="221:19">3</literal></expr></argument>, <argument pos:start="221:22" pos:end="221:34"><expr pos:start="221:22" pos:end="221:34"><name pos:start="221:22" pos:end="221:34">ret_intr_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:55"><expr pos:start="225:5" pos:end="225:54"><call pos:start="225:5" pos:end="225:54"><name pos:start="225:5" pos:end="225:39">trace_spapr_pci_rtas_ibm_change_msi</name><argument_list pos:start="225:40" pos:end="225:54">(<argument pos:start="225:41" pos:end="225:44"><expr pos:start="225:41" pos:end="225:44"><name pos:start="225:41" pos:end="225:44">func</name></expr></argument>, <argument pos:start="225:47" pos:end="225:53"><expr pos:start="225:47" pos:end="225:53"><name pos:start="225:47" pos:end="225:53">req_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
