<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1779.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">decode_cce</name><parameter_list pos:start="1:22" pos:end="1:77">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:32">AACContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">ac</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:55"><decl pos:start="1:39" pos:end="1:55"><type pos:start="1:39" pos:end="1:55"><name pos:start="1:39" pos:end="1:51">GetBitContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">gb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:76"><decl pos:start="1:58" pos:end="1:76"><type pos:start="1:58" pos:end="1:76"><name pos:start="1:58" pos:end="1:71">ChannelElement</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">che</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">num_gain</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">c</name></decl>, <decl pos:start="7:12" pos:end="7:12"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">g</name></decl>, <decl pos:start="7:15" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:17">sfb</name></decl>, <decl pos:start="7:20" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:22">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">sign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">INTFLOAT</name></type> <name pos:start="11:14" pos:end="11:18">scale</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:24">SingleChannelElement</name> <modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:29">sce</name> <init pos:start="13:31" pos:end="13:43">= <expr pos:start="13:33" pos:end="13:43"><operator pos:start="13:33" pos:end="13:33">&amp;</operator><name pos:start="13:34" pos:end="13:43"><name pos:start="13:34" pos:end="13:36">che</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:40">ch</name><index pos:start="13:41" pos:end="13:43">[<expr pos:start="13:42" pos:end="13:42"><literal type="number" pos:start="13:42" pos:end="13:42">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:19">ChannelCoupling</name>     <modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:29">coup</name> <init pos:start="15:31" pos:end="15:42">= <expr pos:start="15:33" pos:end="15:42"><operator pos:start="15:33" pos:end="15:33">&amp;</operator><name pos:start="15:34" pos:end="15:42"><name pos:start="15:34" pos:end="15:36">che</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:42">coup</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:45"><expr pos:start="19:5" pos:end="19:44"><name pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:8">coup</name><operator pos:start="19:9" pos:end="19:10">-&gt;</operator><name pos:start="19:11" pos:end="19:24">coupling_point</name></name> <operator pos:start="19:26" pos:end="19:26">=</operator> <literal type="number" pos:start="19:28" pos:end="19:28">2</literal> <operator pos:start="19:30" pos:end="19:30">*</operator> <call pos:start="19:32" pos:end="19:44"><name pos:start="19:32" pos:end="19:40">get_bits1</name><argument_list pos:start="19:41" pos:end="19:44">(<argument pos:start="19:42" pos:end="19:43"><expr pos:start="19:42" pos:end="19:43"><name pos:start="19:42" pos:end="19:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:40"><expr pos:start="21:5" pos:end="21:39"><name pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:8">coup</name><operator pos:start="21:9" pos:end="21:10">-&gt;</operator><name pos:start="21:11" pos:end="21:21">num_coupled</name></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <call pos:start="21:25" pos:end="21:39"><name pos:start="21:25" pos:end="21:32">get_bits</name><argument_list pos:start="21:33" pos:end="21:39">(<argument pos:start="21:34" pos:end="21:35"><expr pos:start="21:34" pos:end="21:35"><name pos:start="21:34" pos:end="21:35">gb</name></expr></argument>, <argument pos:start="21:38" pos:end="21:38"><expr pos:start="21:38" pos:end="21:38"><literal type="number" pos:start="21:38" pos:end="21:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="43:5">for <control pos:start="23:9" pos:end="23:44">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">c</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:39"><expr pos:start="23:17" pos:end="23:38"><name pos:start="23:17" pos:end="23:17">c</name> <operator pos:start="23:19" pos:end="23:20">&lt;=</operator> <name pos:start="23:22" pos:end="23:38"><name pos:start="23:22" pos:end="23:25">coup</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:38">num_coupled</name></name></expr>;</condition> <incr pos:start="23:41" pos:end="23:43"><expr pos:start="23:41" pos:end="23:43"><name pos:start="23:41" pos:end="23:41">c</name><operator pos:start="23:42" pos:end="23:43">++</operator></expr></incr>)</control> <block pos:start="23:46" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:35">

        <expr_stmt pos:start="25:9" pos:end="25:19"><expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:16">num_gain</name><operator pos:start="25:17" pos:end="25:18">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:60"><expr pos:start="27:9" pos:end="27:59"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:12">coup</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:18">type</name><index pos:start="27:19" pos:end="27:21">[<expr pos:start="27:20" pos:end="27:20"><name pos:start="27:20" pos:end="27:20">c</name></expr>]</index></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <ternary pos:start="27:25" pos:end="27:59"><condition pos:start="27:25" pos:end="27:39"><expr pos:start="27:25" pos:end="27:37"><call pos:start="27:25" pos:end="27:37"><name pos:start="27:25" pos:end="27:33">get_bits1</name><argument_list pos:start="27:34" pos:end="27:37">(<argument pos:start="27:35" pos:end="27:36"><expr pos:start="27:35" pos:end="27:36"><name pos:start="27:35" pos:end="27:36">gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="27:41" pos:end="27:48"> <expr pos:start="27:41" pos:end="27:48"><name pos:start="27:41" pos:end="27:48">TYPE_CPE</name></expr> </then><else pos:start="27:50" pos:end="27:59">: <expr pos:start="27:52" pos:end="27:59"><name pos:start="27:52" pos:end="27:59">TYPE_SCE</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:12">coup</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:23">id_select</name><index pos:start="29:24" pos:end="29:26">[<expr pos:start="29:25" pos:end="29:25"><name pos:start="29:25" pos:end="29:25">c</name></expr>]</index></name> <operator pos:start="29:28" pos:end="29:28">=</operator> <call pos:start="29:30" pos:end="29:44"><name pos:start="29:30" pos:end="29:37">get_bits</name><argument_list pos:start="29:38" pos:end="29:44">(<argument pos:start="29:39" pos:end="29:40"><expr pos:start="29:39" pos:end="29:40"><name pos:start="29:39" pos:end="29:40">gb</name></expr></argument>, <argument pos:start="29:43" pos:end="29:43"><expr pos:start="29:43" pos:end="29:43"><literal type="number" pos:start="29:43" pos:end="29:43">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="41:35"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:38">(<expr pos:start="31:13" pos:end="31:37"><name pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:16">coup</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:22">type</name><index pos:start="31:23" pos:end="31:25">[<expr pos:start="31:24" pos:end="31:24"><name pos:start="31:24" pos:end="31:24">c</name></expr>]</index></name> <operator pos:start="31:27" pos:end="31:28">==</operator> <name pos:start="31:30" pos:end="31:37">TYPE_CPE</name></expr>)</condition> <block pos:start="31:40" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:27">

            <expr_stmt pos:start="33:13" pos:end="33:49"><expr pos:start="33:13" pos:end="33:48"><name pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:16">coup</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:27">ch_select</name><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><name pos:start="33:29" pos:end="33:29">c</name></expr>]</index></name> <operator pos:start="33:32" pos:end="33:32">=</operator> <call pos:start="33:34" pos:end="33:48"><name pos:start="33:34" pos:end="33:41">get_bits</name><argument_list pos:start="33:42" pos:end="33:48">(<argument pos:start="33:43" pos:end="33:44"><expr pos:start="33:43" pos:end="33:44"><name pos:start="33:43" pos:end="33:44">gb</name></expr></argument>, <argument pos:start="33:47" pos:end="33:47"><expr pos:start="33:47" pos:end="33:47"><literal type="number" pos:start="33:47" pos:end="33:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="37:27"><if pos:start="35:13" pos:end="37:27">if <condition pos:start="35:16" pos:end="35:40">(<expr pos:start="35:17" pos:end="35:39"><name pos:start="35:17" pos:end="35:34"><name pos:start="35:17" pos:end="35:20">coup</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:31">ch_select</name><index pos:start="35:32" pos:end="35:34">[<expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">c</name></expr>]</index></name> <operator pos:start="35:36" pos:end="35:37">==</operator> <literal type="number" pos:start="35:39" pos:end="35:39">3</literal></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:27"><block_content pos:start="37:17" pos:end="37:27">

                <expr_stmt pos:start="37:17" pos:end="37:27"><expr pos:start="37:17" pos:end="37:26"><name pos:start="37:17" pos:end="37:24">num_gain</name><operator pos:start="37:25" pos:end="37:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="39:11" pos:end="41:35">else<block type="pseudo" pos:start="41:13" pos:end="41:35"><block_content pos:start="41:13" pos:end="41:35">

            <expr_stmt pos:start="41:13" pos:end="41:35"><expr pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:16">coup</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:27">ch_select</name><index pos:start="41:28" pos:end="41:30">[<expr pos:start="41:29" pos:end="41:29"><name pos:start="41:29" pos:end="41:29">c</name></expr>]</index></name> <operator pos:start="41:32" pos:end="41:32">=</operator> <literal type="number" pos:start="41:34" pos:end="41:34">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="45:5" pos:end="45:73"><expr pos:start="45:5" pos:end="45:72"><name pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:8">coup</name><operator pos:start="45:9" pos:end="45:10">-&gt;</operator><name pos:start="45:11" pos:end="45:24">coupling_point</name></name> <operator pos:start="45:26" pos:end="45:27">+=</operator> <call pos:start="45:29" pos:end="45:41"><name pos:start="45:29" pos:end="45:37">get_bits1</name><argument_list pos:start="45:38" pos:end="45:41">(<argument pos:start="45:39" pos:end="45:40"><expr pos:start="45:39" pos:end="45:40"><name pos:start="45:39" pos:end="45:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="45:43" pos:end="45:44">||</operator> <operator pos:start="45:46" pos:end="45:46">(</operator><name pos:start="45:47" pos:end="45:66"><name pos:start="45:47" pos:end="45:50">coup</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:66">coupling_point</name></name> <operator pos:start="45:68" pos:end="45:69">&gt;&gt;</operator> <literal type="number" pos:start="45:71" pos:end="45:71">1</literal><operator pos:start="45:72" pos:end="45:72">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:8">sign</name>  <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:20">get_bits</name><argument_list pos:start="49:21" pos:end="49:27">(<argument pos:start="49:22" pos:end="49:23"><expr pos:start="49:22" pos:end="49:23"><name pos:start="49:22" pos:end="49:23">gb</name></expr></argument>, <argument pos:start="49:26" pos:end="49:26"><expr pos:start="49:26" pos:end="49:26"><literal type="number" pos:start="49:26" pos:end="49:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:51"><expr pos:start="51:5" pos:end="51:50"><name pos:start="51:5" pos:end="51:9">scale</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <call pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:22">AAC_RENAME</name><argument_list pos:start="51:23" pos:end="51:33">(<argument pos:start="51:24" pos:end="51:32"><expr pos:start="51:24" pos:end="51:32"><name pos:start="51:24" pos:end="51:32">cce_scale</name></expr></argument>)</argument_list></call><index pos:start="51:34" pos:end="51:50">[<expr pos:start="51:35" pos:end="51:49"><call pos:start="51:35" pos:end="51:49"><name pos:start="51:35" pos:end="51:42">get_bits</name><argument_list pos:start="51:43" pos:end="51:49">(<argument pos:start="51:44" pos:end="51:45"><expr pos:start="51:44" pos:end="51:45"><name pos:start="51:44" pos:end="51:45">gb</name></expr></argument>, <argument pos:start="51:48" pos:end="51:48"><expr pos:start="51:48" pos:end="51:48"><literal type="number" pos:start="51:48" pos:end="51:48">2</literal></expr></argument>)</argument_list></call></expr>]</index></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="57:19"><if pos:start="55:5" pos:end="57:19">if <condition pos:start="55:8" pos:end="55:46">(<expr pos:start="55:9" pos:end="55:45"><operator pos:start="55:9" pos:end="55:9">(</operator><name pos:start="55:10" pos:end="55:12">ret</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <call pos:start="55:16" pos:end="55:44"><name pos:start="55:16" pos:end="55:25">decode_ics</name><argument_list pos:start="55:26" pos:end="55:44">(<argument pos:start="55:27" pos:end="55:28"><expr pos:start="55:27" pos:end="55:28"><name pos:start="55:27" pos:end="55:28">ac</name></expr></argument>, <argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">sce</name></expr></argument>, <argument pos:start="55:36" pos:end="55:37"><expr pos:start="55:36" pos:end="55:37"><name pos:start="55:36" pos:end="55:37">gb</name></expr></argument>, <argument pos:start="55:40" pos:end="55:40"><expr pos:start="55:40" pos:end="55:40"><literal type="number" pos:start="55:40" pos:end="55:40">0</literal></expr></argument>, <argument pos:start="55:43" pos:end="55:43"><expr pos:start="55:43" pos:end="55:43"><literal type="number" pos:start="55:43" pos:end="55:43">0</literal></expr></argument>)</argument_list></call><operator pos:start="55:45" pos:end="55:45">)</operator></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:19"><block_content pos:start="57:9" pos:end="57:19">

        <return pos:start="57:9" pos:end="57:19">return <expr pos:start="57:16" pos:end="57:18"><name pos:start="57:16" pos:end="57:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="61:5" pos:end="127:5">for <control pos:start="61:9" pos:end="61:34">(<init pos:start="61:10" pos:end="61:15"><expr pos:start="61:10" pos:end="61:14"><name pos:start="61:10" pos:end="61:10">c</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</init> <condition pos:start="61:17" pos:end="61:29"><expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:17">c</name> <operator pos:start="61:19" pos:end="61:19">&lt;</operator> <name pos:start="61:21" pos:end="61:28">num_gain</name></expr>;</condition> <incr pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:31">c</name><operator pos:start="61:32" pos:end="61:33">++</operator></expr></incr>)</control> <block pos:start="61:36" pos:end="127:5">{<block_content pos:start="63:9" pos:end="125:9">

        <decl_stmt pos:start="63:9" pos:end="63:21"><decl pos:start="63:9" pos:end="63:20"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:15">idx</name>  <init pos:start="63:18" pos:end="63:20">= <expr pos:start="63:20" pos:end="63:20"><literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="65:21"><decl pos:start="65:9" pos:end="65:20"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:15">cge</name>  <init pos:start="65:18" pos:end="65:20">= <expr pos:start="65:20" pos:end="65:20"><literal type="number" pos:start="65:20" pos:end="65:20">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:21"><decl pos:start="67:9" pos:end="67:20"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:16">gain</name> <init pos:start="67:18" pos:end="67:20">= <expr pos:start="67:20" pos:end="67:20"><literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:41"><decl pos:start="69:9" pos:end="69:40"><type pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:16">INTFLOAT</name></type> <name pos:start="69:18" pos:end="69:27">gain_cache</name> <init pos:start="69:29" pos:end="69:40">= <expr pos:start="69:31" pos:end="69:40"><call pos:start="69:31" pos:end="69:40"><name pos:start="69:31" pos:end="69:36">FIXR10</name><argument_list pos:start="69:37" pos:end="69:40">(<argument pos:start="69:38" pos:end="69:39"><expr pos:start="69:38" pos:end="69:39"><literal type="number" pos:start="69:38" pos:end="69:39">1.</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="71:14">(<expr pos:start="71:13" pos:end="71:13"><name pos:start="71:13" pos:end="71:13">c</name></expr>)</condition> <block pos:start="71:16" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:47">

            <expr_stmt pos:start="73:13" pos:end="73:74"><expr pos:start="73:13" pos:end="73:73"><name pos:start="73:13" pos:end="73:15">cge</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <ternary pos:start="73:19" pos:end="73:73"><condition pos:start="73:19" pos:end="73:55"><expr pos:start="73:19" pos:end="73:53"><name pos:start="73:19" pos:end="73:38"><name pos:start="73:19" pos:end="73:22">coup</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:38">coupling_point</name></name> <operator pos:start="73:40" pos:end="73:41">==</operator> <name pos:start="73:43" pos:end="73:53">AFTER_IMDCT</name></expr> ?</condition><then pos:start="73:57" pos:end="73:57"> <expr pos:start="73:57" pos:end="73:57"><literal type="number" pos:start="73:57" pos:end="73:57">1</literal></expr> </then><else pos:start="73:59" pos:end="73:73">: <expr pos:start="73:61" pos:end="73:73"><call pos:start="73:61" pos:end="73:73"><name pos:start="73:61" pos:end="73:69">get_bits1</name><argument_list pos:start="73:70" pos:end="73:73">(<argument pos:start="73:71" pos:end="73:72"><expr pos:start="73:71" pos:end="73:72"><name pos:start="73:71" pos:end="73:72">gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:76"><expr pos:start="75:13" pos:end="75:75"><name pos:start="75:13" pos:end="75:16">gain</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <ternary pos:start="75:20" pos:end="75:75"><condition pos:start="75:20" pos:end="75:24"><expr pos:start="75:20" pos:end="75:22"><name pos:start="75:20" pos:end="75:22">cge</name></expr> ?</condition><then pos:start="75:26" pos:end="75:72"> <expr pos:start="75:26" pos:end="75:72"><call pos:start="75:26" pos:end="75:67"><name pos:start="75:26" pos:end="75:33">get_vlc2</name><argument_list pos:start="75:34" pos:end="75:67">(<argument pos:start="75:35" pos:end="75:36"><expr pos:start="75:35" pos:end="75:36"><name pos:start="75:35" pos:end="75:36">gb</name></expr></argument>, <argument pos:start="75:39" pos:end="75:60"><expr pos:start="75:39" pos:end="75:60"><name pos:start="75:39" pos:end="75:60"><name pos:start="75:39" pos:end="75:54">vlc_scalefactors</name><operator pos:start="75:55" pos:end="75:55">.</operator><name pos:start="75:56" pos:end="75:60">table</name></name></expr></argument>, <argument pos:start="75:63" pos:end="75:63"><expr pos:start="75:63" pos:end="75:63"><literal type="number" pos:start="75:63" pos:end="75:63">7</literal></expr></argument>, <argument pos:start="75:66" pos:end="75:66"><expr pos:start="75:66" pos:end="75:66"><literal type="number" pos:start="75:66" pos:end="75:66">3</literal></expr></argument>)</argument_list></call> <operator pos:start="75:69" pos:end="75:69">-</operator> <literal type="number" pos:start="75:71" pos:end="75:72">60</literal></expr></then><else pos:start="75:73" pos:end="75:75">: <expr pos:start="75:75" pos:end="75:75"><literal type="number" pos:start="75:75" pos:end="75:75">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:47"><expr pos:start="77:13" pos:end="77:46"><name pos:start="77:13" pos:end="77:22">gain_cache</name> <operator pos:start="77:24" pos:end="77:24">=</operator> <call pos:start="77:26" pos:end="77:46"><name pos:start="77:26" pos:end="77:33">GET_GAIN</name><argument_list pos:start="77:34" pos:end="77:46">(<argument pos:start="77:35" pos:end="77:39"><expr pos:start="77:35" pos:end="77:39"><name pos:start="77:35" pos:end="77:39">scale</name></expr></argument>, <argument pos:start="77:42" pos:end="77:45"><expr pos:start="77:42" pos:end="77:45"><name pos:start="77:42" pos:end="77:45">gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="125:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:48">(<expr pos:start="81:13" pos:end="81:47"><name pos:start="81:13" pos:end="81:32"><name pos:start="81:13" pos:end="81:16">coup</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:32">coupling_point</name></name> <operator pos:start="81:34" pos:end="81:35">==</operator> <name pos:start="81:37" pos:end="81:47">AFTER_IMDCT</name></expr>)</condition> <block pos:start="81:50" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:42">

            <expr_stmt pos:start="83:13" pos:end="83:42"><expr pos:start="83:13" pos:end="83:41"><name pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:16">coup</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:22">gain</name><index pos:start="83:23" pos:end="83:25">[<expr pos:start="83:24" pos:end="83:24"><name pos:start="83:24" pos:end="83:24">c</name></expr>]</index><index pos:start="83:26" pos:end="83:28">[<expr pos:start="83:27" pos:end="83:27"><literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>]</index></name> <operator pos:start="83:30" pos:end="83:30">=</operator> <name pos:start="83:32" pos:end="83:41">gain_cache</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="125:9">else <block pos:start="85:16" pos:end="125:9">{<block_content pos:start="87:13" pos:end="123:13">

            <for pos:start="87:13" pos:end="123:13">for <control pos:start="87:17" pos:end="87:60">(<init pos:start="87:18" pos:end="87:23"><expr pos:start="87:18" pos:end="87:22"><name pos:start="87:18" pos:end="87:18">g</name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>;</init> <condition pos:start="87:25" pos:end="87:55"><expr pos:start="87:25" pos:end="87:54"><name pos:start="87:25" pos:end="87:25">g</name> <operator pos:start="87:27" pos:end="87:27">&lt;</operator> <name pos:start="87:29" pos:end="87:54"><name pos:start="87:29" pos:end="87:31">sce</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:36">ics</name><operator pos:start="87:37" pos:end="87:37">.</operator><name pos:start="87:38" pos:end="87:54">num_window_groups</name></name></expr>;</condition> <incr pos:start="87:57" pos:end="87:59"><expr pos:start="87:57" pos:end="87:59"><name pos:start="87:57" pos:end="87:57">g</name><operator pos:start="87:58" pos:end="87:59">++</operator></expr></incr>)</control> <block pos:start="87:62" pos:end="123:13">{<block_content pos:start="89:17" pos:end="121:17">

                <for pos:start="89:17" pos:end="121:17">for <control pos:start="89:21" pos:end="89:67">(<init pos:start="89:22" pos:end="89:29"><expr pos:start="89:22" pos:end="89:28"><name pos:start="89:22" pos:end="89:24">sfb</name> <operator pos:start="89:26" pos:end="89:26">=</operator> <literal type="number" pos:start="89:28" pos:end="89:28">0</literal></expr>;</init> <condition pos:start="89:31" pos:end="89:53"><expr pos:start="89:31" pos:end="89:52"><name pos:start="89:31" pos:end="89:33">sfb</name> <operator pos:start="89:35" pos:end="89:35">&lt;</operator> <name pos:start="89:37" pos:end="89:52"><name pos:start="89:37" pos:end="89:39">sce</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:44">ics</name><operator pos:start="89:45" pos:end="89:45">.</operator><name pos:start="89:46" pos:end="89:52">max_sfb</name></name></expr>;</condition> <incr pos:start="89:55" pos:end="89:66"><expr pos:start="89:55" pos:end="89:59"><name pos:start="89:55" pos:end="89:57">sfb</name><operator pos:start="89:58" pos:end="89:59">++</operator></expr><operator pos:start="89:60" pos:end="89:60">,</operator> <expr pos:start="89:62" pos:end="89:66"><name pos:start="89:62" pos:end="89:64">idx</name><operator pos:start="89:65" pos:end="89:66">++</operator></expr></incr>)</control> <block pos:start="89:69" pos:end="121:17">{<block_content pos:start="91:21" pos:end="119:21">

                    <if_stmt pos:start="91:21" pos:end="119:21"><if pos:start="91:21" pos:end="119:21">if <condition pos:start="91:24" pos:end="91:55">(<expr pos:start="91:25" pos:end="91:54"><name pos:start="91:25" pos:end="91:43"><name pos:start="91:25" pos:end="91:27">sce</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:38">band_type</name><index pos:start="91:39" pos:end="91:43">[<expr pos:start="91:40" pos:end="91:42"><name pos:start="91:40" pos:end="91:42">idx</name></expr>]</index></name> <operator pos:start="91:45" pos:end="91:46">!=</operator> <name pos:start="91:48" pos:end="91:54">ZERO_BT</name></expr>)</condition> <block pos:start="91:57" pos:end="119:21">{<block_content pos:start="93:25" pos:end="117:56">

                        <if_stmt pos:start="93:25" pos:end="115:25"><if pos:start="93:25" pos:end="115:25">if <condition pos:start="93:28" pos:end="93:33">(<expr pos:start="93:29" pos:end="93:32"><operator pos:start="93:29" pos:end="93:29">!</operator><name pos:start="93:30" pos:end="93:32">cge</name></expr>)</condition> <block pos:start="93:35" pos:end="115:25">{<block_content pos:start="95:29" pos:end="113:29">

                            <decl_stmt pos:start="95:29" pos:end="95:84"><decl pos:start="95:29" pos:end="95:83"><type pos:start="95:29" pos:end="95:31"><name pos:start="95:29" pos:end="95:31">int</name></type> <name pos:start="95:33" pos:end="95:33">t</name> <init pos:start="95:35" pos:end="95:83">= <expr pos:start="95:37" pos:end="95:83"><call pos:start="95:37" pos:end="95:78"><name pos:start="95:37" pos:end="95:44">get_vlc2</name><argument_list pos:start="95:45" pos:end="95:78">(<argument pos:start="95:46" pos:end="95:47"><expr pos:start="95:46" pos:end="95:47"><name pos:start="95:46" pos:end="95:47">gb</name></expr></argument>, <argument pos:start="95:50" pos:end="95:71"><expr pos:start="95:50" pos:end="95:71"><name pos:start="95:50" pos:end="95:71"><name pos:start="95:50" pos:end="95:65">vlc_scalefactors</name><operator pos:start="95:66" pos:end="95:66">.</operator><name pos:start="95:67" pos:end="95:71">table</name></name></expr></argument>, <argument pos:start="95:74" pos:end="95:74"><expr pos:start="95:74" pos:end="95:74"><literal type="number" pos:start="95:74" pos:end="95:74">7</literal></expr></argument>, <argument pos:start="95:77" pos:end="95:77"><expr pos:start="95:77" pos:end="95:77"><literal type="number" pos:start="95:77" pos:end="95:77">3</literal></expr></argument>)</argument_list></call> <operator pos:start="95:80" pos:end="95:80">-</operator> <literal type="number" pos:start="95:82" pos:end="95:83">60</literal></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="97:29" pos:end="113:29"><if pos:start="97:29" pos:end="113:29">if <condition pos:start="97:32" pos:end="97:34">(<expr pos:start="97:33" pos:end="97:33"><name pos:start="97:33" pos:end="97:33">t</name></expr>)</condition> <block pos:start="97:36" pos:end="113:29">{<block_content pos:start="99:33" pos:end="111:68">

                                <decl_stmt pos:start="99:33" pos:end="99:42"><decl pos:start="99:33" pos:end="99:41"><type pos:start="99:33" pos:end="99:35"><name pos:start="99:33" pos:end="99:35">int</name></type> <name pos:start="99:37" pos:end="99:37">s</name> <init pos:start="99:39" pos:end="99:41">= <expr pos:start="99:41" pos:end="99:41"><literal type="number" pos:start="99:41" pos:end="99:41">1</literal></expr></init></decl>;</decl_stmt>

                                <expr_stmt pos:start="101:33" pos:end="101:46"><expr pos:start="101:33" pos:end="101:45"><name pos:start="101:33" pos:end="101:33">t</name> <operator pos:start="101:35" pos:end="101:35">=</operator> <name pos:start="101:37" pos:end="101:40">gain</name> <operator pos:start="101:42" pos:end="101:43">+=</operator> <name pos:start="101:45" pos:end="101:45">t</name></expr>;</expr_stmt>

                                <if_stmt pos:start="103:33" pos:end="109:33"><if pos:start="103:33" pos:end="109:33">if <condition pos:start="103:36" pos:end="103:41">(<expr pos:start="103:37" pos:end="103:40"><name pos:start="103:37" pos:end="103:40">sign</name></expr>)</condition> <block pos:start="103:43" pos:end="109:33">{<block_content pos:start="105:37" pos:end="107:44">

                                    <expr_stmt pos:start="105:37" pos:end="105:56"><expr pos:start="105:37" pos:end="105:55"><name pos:start="105:37" pos:end="105:37">s</name>  <operator pos:start="105:40" pos:end="105:41">-=</operator> <literal type="number" pos:start="105:43" pos:end="105:43">2</literal> <operator pos:start="105:45" pos:end="105:45">*</operator> <operator pos:start="105:47" pos:end="105:47">(</operator><name pos:start="105:48" pos:end="105:48">t</name> <operator pos:start="105:50" pos:end="105:50">&amp;</operator> <literal type="number" pos:start="105:52" pos:end="105:54">0x1</literal><operator pos:start="105:55" pos:end="105:55">)</operator></expr>;</expr_stmt>

                                    <expr_stmt pos:start="107:37" pos:end="107:44"><expr pos:start="107:37" pos:end="107:43"><name pos:start="107:37" pos:end="107:37">t</name> <operator pos:start="107:39" pos:end="107:41">&gt;&gt;=</operator> <literal type="number" pos:start="107:43" pos:end="107:43">1</literal></expr>;</expr_stmt>

                                </block_content>}</block></if></if_stmt>

                                <expr_stmt pos:start="111:33" pos:end="111:68"><expr pos:start="111:33" pos:end="111:67"><name pos:start="111:33" pos:end="111:42">gain_cache</name> <operator pos:start="111:44" pos:end="111:44">=</operator> <call pos:start="111:46" pos:end="111:63"><name pos:start="111:46" pos:end="111:53">GET_GAIN</name><argument_list pos:start="111:54" pos:end="111:63">(<argument pos:start="111:55" pos:end="111:59"><expr pos:start="111:55" pos:end="111:59"><name pos:start="111:55" pos:end="111:59">scale</name></expr></argument>, <argument pos:start="111:62" pos:end="111:62"><expr pos:start="111:62" pos:end="111:62"><name pos:start="111:62" pos:end="111:62">t</name></expr></argument>)</argument_list></call> <operator pos:start="111:65" pos:end="111:65">*</operator> <name pos:start="111:67" pos:end="111:67">s</name></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="117:25" pos:end="117:56"><expr pos:start="117:25" pos:end="117:55"><name pos:start="117:25" pos:end="117:42"><name pos:start="117:25" pos:end="117:28">coup</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:34">gain</name><index pos:start="117:35" pos:end="117:37">[<expr pos:start="117:36" pos:end="117:36"><name pos:start="117:36" pos:end="117:36">c</name></expr>]</index><index pos:start="117:38" pos:end="117:42">[<expr pos:start="117:39" pos:end="117:41"><name pos:start="117:39" pos:end="117:41">idx</name></expr>]</index></name> <operator pos:start="117:44" pos:end="117:44">=</operator> <name pos:start="117:46" pos:end="117:55">gain_cache</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
