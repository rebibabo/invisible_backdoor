<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22841.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_drive_mirror</name><parameter_list pos:start="1:22" pos:end="9:66">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:60"><decl pos:start="1:43" pos:end="1:60"><type pos:start="1:43" pos:end="1:60"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">target</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:37"><decl pos:start="3:23" pos:end="3:37"><type pos:start="3:23" pos:end="3:37"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:37">has_format</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">char</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">format</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:46"><decl pos:start="5:23" pos:end="5:46"><type pos:start="5:23" pos:end="5:46"><name pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:26">enum</name> <name pos:start="5:28" pos:end="5:41">MirrorSyncMode</name></name></type> <name pos:start="5:43" pos:end="5:46">sync</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:35"><decl pos:start="7:23" pos:end="7:35"><type pos:start="7:23" pos:end="7:35"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:35">has_mode</name></decl></parameter>, <parameter pos:start="7:38" pos:end="7:59"><decl pos:start="7:38" pos:end="7:59"><type pos:start="7:38" pos:end="7:59"><name pos:start="7:38" pos:end="7:54"><name pos:start="7:38" pos:end="7:41">enum</name> <name pos:start="7:43" pos:end="7:54">NewImageMode</name></name></type> <name pos:start="7:56" pos:end="7:59">mode</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:36"><decl pos:start="9:23" pos:end="9:36"><type pos:start="9:23" pos:end="9:36"><name pos:start="9:23" pos:end="9:26">bool</name></type> <name pos:start="9:28" pos:end="9:36">has_speed</name></decl></parameter>, <parameter pos:start="9:39" pos:end="9:51"><decl pos:start="9:39" pos:end="9:51"><type pos:start="9:39" pos:end="9:51"><name pos:start="9:39" pos:end="9:45">int64_t</name></type> <name pos:start="9:47" pos:end="9:51">speed</name></decl></parameter>, <parameter pos:start="9:54" pos:end="9:65"><decl pos:start="9:54" pos:end="9:65"><type pos:start="9:54" pos:end="9:65"><name pos:start="9:54" pos:end="9:58">Error</name> <modifier pos:start="9:60" pos:end="9:60">*</modifier><modifier pos:start="9:61" pos:end="9:61">*</modifier></type><name pos:start="9:62" pos:end="9:65">errp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="245:1">{<block_content pos:start="13:5" pos:end="243:45">

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19">BlockDriverInfo</name></type> <name pos:start="13:21" pos:end="13:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">BlockDriverState</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:28">source</name></decl>, <decl pos:start="17:31" pos:end="17:40"><type ref="prev" pos:start="17:5" pos:end="17:22"><modifier pos:start="17:31" pos:end="17:31">*</modifier></type><name pos:start="17:32" pos:end="17:40">target_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">BlockDriver</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:26">proto_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">BlockDriver</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">drv</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">local_err</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint64_t</name></type> <name pos:start="27:14" pos:end="27:17">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:18">has_speed</name></expr>)</condition> <block pos:start="33:21" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <expr_stmt pos:start="35:9" pos:end="35:18"><expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:13">speed</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <literal type="number" pos:start="35:17" pos:end="35:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:17">has_mode</name></expr>)</condition> <block pos:start="39:20" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:45">

        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:12">mode</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:44">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:6">bs</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <call pos:start="47:10" pos:end="47:26"><name pos:start="47:10" pos:end="47:18">bdrv_find</name><argument_list pos:start="47:19" pos:end="47:26">(<argument pos:start="47:20" pos:end="47:25"><expr pos:start="47:20" pos:end="47:25"><name pos:start="47:20" pos:end="47:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:11">bs</name></expr>)</condition> <block pos:start="49:14" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:15">

        <expr_stmt pos:start="51:9" pos:end="51:55"><expr pos:start="51:9" pos:end="51:54"><call pos:start="51:9" pos:end="51:54"><name pos:start="51:9" pos:end="51:17">error_set</name><argument_list pos:start="51:18" pos:end="51:54">(<argument pos:start="51:19" pos:end="51:22"><expr pos:start="51:19" pos:end="51:22"><name pos:start="51:19" pos:end="51:22">errp</name></expr></argument>, <argument pos:start="51:25" pos:end="51:45"><expr pos:start="51:25" pos:end="51:45"><name pos:start="51:25" pos:end="51:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="51:48" pos:end="51:53"><expr pos:start="51:48" pos:end="51:53"><name pos:start="51:48" pos:end="51:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:30">(<expr pos:start="59:9" pos:end="59:29"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:29"><name pos:start="59:10" pos:end="59:25">bdrv_is_inserted</name><argument_list pos:start="59:26" pos:end="59:29">(<argument pos:start="59:27" pos:end="59:28"><expr pos:start="59:27" pos:end="59:28"><name pos:start="59:27" pos:end="59:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:32" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:15">

        <expr_stmt pos:start="61:9" pos:end="61:59"><expr pos:start="61:9" pos:end="61:58"><call pos:start="61:9" pos:end="61:58"><name pos:start="61:9" pos:end="61:17">error_set</name><argument_list pos:start="61:18" pos:end="61:58">(<argument pos:start="61:19" pos:end="61:22"><expr pos:start="61:19" pos:end="61:22"><name pos:start="61:19" pos:end="61:22">errp</name></expr></argument>, <argument pos:start="61:25" pos:end="61:49"><expr pos:start="61:25" pos:end="61:49"><name pos:start="61:25" pos:end="61:49">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="61:52" pos:end="61:57"><expr pos:start="61:52" pos:end="61:57"><name pos:start="61:52" pos:end="61:57">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:20">(<expr pos:start="69:9" pos:end="69:19"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:19">has_format</name></expr>)</condition> <block pos:start="69:22" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:79">

        <expr_stmt pos:start="71:9" pos:end="71:79"><expr pos:start="71:9" pos:end="71:78"><name pos:start="71:9" pos:end="71:14">format</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <ternary pos:start="71:18" pos:end="71:78"><condition pos:start="71:18" pos:end="71:50"><expr pos:start="71:18" pos:end="71:48"><name pos:start="71:18" pos:end="71:21">mode</name> <operator pos:start="71:23" pos:end="71:24">==</operator> <name pos:start="71:26" pos:end="71:48">NEW_IMAGE_MODE_EXISTING</name></expr> ?</condition><then pos:start="71:52" pos:end="71:55"> <expr pos:start="71:52" pos:end="71:55"><name pos:start="71:52" pos:end="71:55">NULL</name></expr> </then><else pos:start="71:57" pos:end="71:78">: <expr pos:start="71:59" pos:end="71:78"><name pos:start="71:59" pos:end="71:78"><name pos:start="71:59" pos:end="71:60">bs</name><operator pos:start="71:61" pos:end="71:62">-&gt;</operator><name pos:start="71:63" pos:end="71:65">drv</name><operator pos:start="71:66" pos:end="71:67">-&gt;</operator><name pos:start="71:68" pos:end="71:78">format_name</name></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="87:5"><if pos:start="75:5" pos:end="87:5">if <condition pos:start="75:8" pos:end="75:15">(<expr pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:14">format</name></expr>)</condition> <block pos:start="75:17" pos:end="87:5">{<block_content pos:start="77:9" pos:end="85:9">

        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:11">drv</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:38"><name pos:start="77:15" pos:end="77:30">bdrv_find_format</name><argument_list pos:start="77:31" pos:end="77:38">(<argument pos:start="77:32" pos:end="77:37"><expr pos:start="77:32" pos:end="77:37"><name pos:start="77:32" pos:end="77:37">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:17">(<expr pos:start="79:13" pos:end="79:16"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:16">drv</name></expr>)</condition> <block pos:start="79:19" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:19">

            <expr_stmt pos:start="81:13" pos:end="81:63"><expr pos:start="81:13" pos:end="81:62"><call pos:start="81:13" pos:end="81:62"><name pos:start="81:13" pos:end="81:21">error_set</name><argument_list pos:start="81:22" pos:end="81:62">(<argument pos:start="81:23" pos:end="81:26"><expr pos:start="81:23" pos:end="81:26"><name pos:start="81:23" pos:end="81:26">errp</name></expr></argument>, <argument pos:start="81:29" pos:end="81:53"><expr pos:start="81:29" pos:end="81:53"><name pos:start="81:29" pos:end="81:53">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="81:56" pos:end="81:61"><expr pos:start="81:56" pos:end="81:61"><name pos:start="81:56" pos:end="81:61">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:24">(<expr pos:start="91:9" pos:end="91:23"><call pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:19">bdrv_in_use</name><argument_list pos:start="91:20" pos:end="91:23">(<argument pos:start="91:21" pos:end="91:22"><expr pos:start="91:21" pos:end="91:22"><name pos:start="91:21" pos:end="91:22">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:26" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:15">

        <expr_stmt pos:start="93:9" pos:end="93:52"><expr pos:start="93:9" pos:end="93:51"><call pos:start="93:9" pos:end="93:51"><name pos:start="93:9" pos:end="93:17">error_set</name><argument_list pos:start="93:18" pos:end="93:51">(<argument pos:start="93:19" pos:end="93:22"><expr pos:start="93:19" pos:end="93:22"><name pos:start="93:19" pos:end="93:22">errp</name></expr></argument>, <argument pos:start="93:25" pos:end="93:42"><expr pos:start="93:25" pos:end="93:42"><name pos:start="93:25" pos:end="93:42">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="93:45" pos:end="93:50"><expr pos:start="93:45" pos:end="93:50"><name pos:start="93:45" pos:end="93:50">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:41"><expr pos:start="101:5" pos:end="101:40"><name pos:start="101:5" pos:end="101:9">flags</name> <operator pos:start="101:11" pos:end="101:11">=</operator> <name pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:14">bs</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:26">open_flags</name></name> <operator pos:start="101:28" pos:end="101:28">|</operator> <name pos:start="101:30" pos:end="101:40">BDRV_O_RDWR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:28"><expr pos:start="103:5" pos:end="103:27"><name pos:start="103:5" pos:end="103:10">source</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <name pos:start="103:14" pos:end="103:27"><name pos:start="103:14" pos:end="103:15">bs</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:27">backing_hd</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:48">(<expr pos:start="105:9" pos:end="105:47"><operator pos:start="105:9" pos:end="105:9">!</operator><name pos:start="105:10" pos:end="105:15">source</name> <operator pos:start="105:17" pos:end="105:18">&amp;&amp;</operator> <name pos:start="105:20" pos:end="105:23">sync</name> <operator pos:start="105:25" pos:end="105:26">==</operator> <name pos:start="105:28" pos:end="105:47">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="105:50" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:37">

        <expr_stmt pos:start="107:9" pos:end="107:37"><expr pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:12">sync</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <name pos:start="107:16" pos:end="107:36">MIRROR_SYNC_MODE_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:43"><expr pos:start="113:5" pos:end="113:42"><name pos:start="113:5" pos:end="113:13">proto_drv</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <call pos:start="113:17" pos:end="113:42"><name pos:start="113:17" pos:end="113:34">bdrv_find_protocol</name><argument_list pos:start="113:35" pos:end="113:42">(<argument pos:start="113:36" pos:end="113:41"><expr pos:start="113:36" pos:end="113:41"><name pos:start="113:36" pos:end="113:41">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:19">(<expr pos:start="115:9" pos:end="115:18"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:18">proto_drv</name></expr>)</condition> <block pos:start="115:21" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:15">

        <expr_stmt pos:start="117:9" pos:end="117:59"><expr pos:start="117:9" pos:end="117:58"><call pos:start="117:9" pos:end="117:58"><name pos:start="117:9" pos:end="117:17">error_set</name><argument_list pos:start="117:18" pos:end="117:58">(<argument pos:start="117:19" pos:end="117:22"><expr pos:start="117:19" pos:end="117:22"><name pos:start="117:19" pos:end="117:22">errp</name></expr></argument>, <argument pos:start="117:25" pos:end="117:49"><expr pos:start="117:25" pos:end="117:49"><name pos:start="117:25" pos:end="117:49">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="117:52" pos:end="117:57"><expr pos:start="117:52" pos:end="117:57"><name pos:start="117:52" pos:end="117:57">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="169:5"><if pos:start="125:5" pos:end="139:5">if <condition pos:start="125:8" pos:end="125:73">(<expr pos:start="125:9" pos:end="125:72"><name pos:start="125:9" pos:end="125:12">sync</name> <operator pos:start="125:14" pos:end="125:15">==</operator> <name pos:start="125:17" pos:end="125:37">MIRROR_SYNC_MODE_FULL</name> <operator pos:start="125:39" pos:end="125:40">&amp;&amp;</operator> <name pos:start="125:42" pos:end="125:45">mode</name> <operator pos:start="125:47" pos:end="125:48">!=</operator> <name pos:start="125:50" pos:end="125:72">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition> <block pos:start="125:75" pos:end="139:5">{<block_content pos:start="129:9" pos:end="137:61">

        <comment type="block" pos:start="127:9" pos:end="127:47">/* create new image w/o backing file */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><call pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:14">assert</name><argument_list pos:start="129:15" pos:end="129:29">(<argument pos:start="129:16" pos:end="129:28"><expr pos:start="129:16" pos:end="129:28"><name pos:start="129:16" pos:end="129:21">format</name> <operator pos:start="129:23" pos:end="129:24">&amp;&amp;</operator> <name pos:start="129:26" pos:end="129:28">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:37"><expr pos:start="131:9" pos:end="131:36"><call pos:start="131:9" pos:end="131:36"><name pos:start="131:9" pos:end="131:25">bdrv_get_geometry</name><argument_list pos:start="131:26" pos:end="131:36">(<argument pos:start="131:27" pos:end="131:28"><expr pos:start="131:27" pos:end="131:28"><name pos:start="131:27" pos:end="131:28">bs</name></expr></argument>, <argument pos:start="131:31" pos:end="131:35"><expr pos:start="131:31" pos:end="131:35"><operator pos:start="131:31" pos:end="131:31">&amp;</operator><name pos:start="131:32" pos:end="131:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:20"><expr pos:start="133:9" pos:end="133:19"><name pos:start="133:9" pos:end="133:12">size</name> <operator pos:start="133:14" pos:end="133:15">*=</operator> <literal type="number" pos:start="133:17" pos:end="133:19">512</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="137:61"><expr pos:start="135:9" pos:end="137:60"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="137:60"><name pos:start="135:15" pos:end="135:29">bdrv_img_create</name><argument_list pos:start="135:30" pos:end="137:60">(<argument pos:start="135:31" pos:end="135:36"><expr pos:start="135:31" pos:end="135:36"><name pos:start="135:31" pos:end="135:36">target</name></expr></argument>, <argument pos:start="135:39" pos:end="135:44"><expr pos:start="135:39" pos:end="135:44"><name pos:start="135:39" pos:end="135:44">format</name></expr></argument>,

                              <argument pos:start="137:31" pos:end="137:34"><expr pos:start="137:31" pos:end="137:34"><name pos:start="137:31" pos:end="137:34">NULL</name></expr></argument>, <argument pos:start="137:37" pos:end="137:40"><expr pos:start="137:37" pos:end="137:40"><name pos:start="137:37" pos:end="137:40">NULL</name></expr></argument>, <argument pos:start="137:43" pos:end="137:46"><expr pos:start="137:43" pos:end="137:46"><name pos:start="137:43" pos:end="137:46">NULL</name></expr></argument>, <argument pos:start="137:49" pos:end="137:52"><expr pos:start="137:49" pos:end="137:52"><name pos:start="137:49" pos:end="137:52">size</name></expr></argument>, <argument pos:start="137:55" pos:end="137:59"><expr pos:start="137:55" pos:end="137:59"><name pos:start="137:55" pos:end="137:59">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="169:5">else <block pos:start="139:12" pos:end="169:5">{<block_content pos:start="141:9" pos:end="167:9">

        <switch pos:start="141:9" pos:end="167:9">switch <condition pos:start="141:16" pos:end="141:21">(<expr pos:start="141:17" pos:end="141:20"><name pos:start="141:17" pos:end="141:20">mode</name></expr>)</condition> <block pos:start="141:23" pos:end="167:9">{<block_content pos:start="143:9" pos:end="165:20">

        <case pos:start="143:9" pos:end="143:37">case <expr pos:start="143:14" pos:end="143:36"><name pos:start="143:14" pos:end="143:36">NEW_IMAGE_MODE_EXISTING</name></expr>:</case>

            <expr_stmt pos:start="145:13" pos:end="145:20"><expr pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:15">ret</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <literal type="number" pos:start="145:19" pos:end="145:19">0</literal></expr>;</expr_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <case pos:start="149:9" pos:end="149:43">case <expr pos:start="149:14" pos:end="149:42"><name pos:start="149:14" pos:end="149:42">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>:</case>

            <comment type="block" pos:start="151:13" pos:end="151:52">/* create new image with backing file */</comment>

            <expr_stmt pos:start="153:13" pos:end="159:51"><expr pos:start="153:13" pos:end="159:50"><name pos:start="153:13" pos:end="153:15">ret</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <call pos:start="153:19" pos:end="159:50"><name pos:start="153:19" pos:end="153:33">bdrv_img_create</name><argument_list pos:start="153:34" pos:end="159:50">(<argument pos:start="153:35" pos:end="153:40"><expr pos:start="153:35" pos:end="153:40"><name pos:start="153:35" pos:end="153:40">target</name></expr></argument>, <argument pos:start="153:43" pos:end="153:48"><expr pos:start="153:43" pos:end="153:48"><name pos:start="153:43" pos:end="153:48">format</name></expr></argument>,

                                  <argument pos:start="155:35" pos:end="155:50"><expr pos:start="155:35" pos:end="155:50"><name pos:start="155:35" pos:end="155:50"><name pos:start="155:35" pos:end="155:40">source</name><operator pos:start="155:41" pos:end="155:42">-&gt;</operator><name pos:start="155:43" pos:end="155:50">filename</name></name></expr></argument>,

                                  <argument pos:start="157:35" pos:end="157:58"><expr pos:start="157:35" pos:end="157:58"><name pos:start="157:35" pos:end="157:58"><name pos:start="157:35" pos:end="157:40">source</name><operator pos:start="157:41" pos:end="157:42">-&gt;</operator><name pos:start="157:43" pos:end="157:45">drv</name><operator pos:start="157:46" pos:end="157:47">-&gt;</operator><name pos:start="157:48" pos:end="157:58">format_name</name></name></expr></argument>,

                                  <argument pos:start="159:35" pos:end="159:38"><expr pos:start="159:35" pos:end="159:38"><name pos:start="159:35" pos:end="159:38">NULL</name></expr></argument>, <argument pos:start="159:41" pos:end="159:42"><expr pos:start="159:41" pos:end="159:42"><operator pos:start="159:41" pos:end="159:41">-</operator><literal type="number" pos:start="159:42" pos:end="159:42">1</literal></expr></argument>, <argument pos:start="159:45" pos:end="159:49"><expr pos:start="159:45" pos:end="159:49"><name pos:start="159:45" pos:end="159:49">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="161:13" pos:end="161:18">break;</break>

        <default pos:start="163:9" pos:end="163:16">default:</default>

            <expr_stmt pos:start="165:13" pos:end="165:20"><expr pos:start="165:13" pos:end="165:19"><call pos:start="165:13" pos:end="165:19"><name pos:start="165:13" pos:end="165:17">abort</name><argument_list pos:start="165:18" pos:end="165:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="173:5" pos:end="179:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="173:12">(<expr pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">ret</name></expr>)</condition> <block pos:start="173:14" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:15">

        <expr_stmt pos:start="175:9" pos:end="175:55"><expr pos:start="175:9" pos:end="175:54"><call pos:start="175:9" pos:end="175:54"><name pos:start="175:9" pos:end="175:17">error_set</name><argument_list pos:start="175:18" pos:end="175:54">(<argument pos:start="175:19" pos:end="175:22"><expr pos:start="175:19" pos:end="175:22"><name pos:start="175:19" pos:end="175:22">errp</name></expr></argument>, <argument pos:start="175:25" pos:end="175:45"><expr pos:start="175:25" pos:end="175:45"><name pos:start="175:25" pos:end="175:45">QERR_OPEN_FILE_FAILED</name></expr></argument>, <argument pos:start="175:48" pos:end="175:53"><expr pos:start="175:48" pos:end="175:53"><name pos:start="175:48" pos:end="175:53">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:29"><expr pos:start="183:5" pos:end="183:28"><name pos:start="183:5" pos:end="183:13">target_bs</name> <operator pos:start="183:15" pos:end="183:15">=</operator> <call pos:start="183:17" pos:end="183:28"><name pos:start="183:17" pos:end="183:24">bdrv_new</name><argument_list pos:start="183:25" pos:end="183:28">(<argument pos:start="183:26" pos:end="183:27"><expr pos:start="183:26" pos:end="183:27"><literal type="string" pos:start="183:26" pos:end="183:27">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:71"><expr pos:start="185:5" pos:end="185:70"><name pos:start="185:5" pos:end="185:7">ret</name> <operator pos:start="185:9" pos:end="185:9">=</operator> <call pos:start="185:11" pos:end="185:70"><name pos:start="185:11" pos:end="185:19">bdrv_open</name><argument_list pos:start="185:20" pos:end="185:70">(<argument pos:start="185:21" pos:end="185:29"><expr pos:start="185:21" pos:end="185:29"><name pos:start="185:21" pos:end="185:29">target_bs</name></expr></argument>, <argument pos:start="185:32" pos:end="185:37"><expr pos:start="185:32" pos:end="185:37"><name pos:start="185:32" pos:end="185:37">target</name></expr></argument>, <argument pos:start="185:40" pos:end="185:64"><expr pos:start="185:40" pos:end="185:64"><name pos:start="185:40" pos:end="185:44">flags</name> <operator pos:start="185:46" pos:end="185:46">|</operator> <name pos:start="185:48" pos:end="185:64">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="185:67" pos:end="185:69"><expr pos:start="185:67" pos:end="185:69"><name pos:start="185:67" pos:end="185:69">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="189:5" pos:end="197:5"><if pos:start="189:5" pos:end="197:5">if <condition pos:start="189:8" pos:end="189:16">(<expr pos:start="189:9" pos:end="189:15"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">&lt;</operator> <literal type="number" pos:start="189:15" pos:end="189:15">0</literal></expr>)</condition> <block pos:start="189:18" pos:end="197:5">{<block_content pos:start="191:9" pos:end="195:15">

        <expr_stmt pos:start="191:9" pos:end="191:31"><expr pos:start="191:9" pos:end="191:30"><call pos:start="191:9" pos:end="191:30"><name pos:start="191:9" pos:end="191:19">bdrv_delete</name><argument_list pos:start="191:20" pos:end="191:30">(<argument pos:start="191:21" pos:end="191:29"><expr pos:start="191:21" pos:end="191:29"><name pos:start="191:21" pos:end="191:29">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:55"><expr pos:start="193:9" pos:end="193:54"><call pos:start="193:9" pos:end="193:54"><name pos:start="193:9" pos:end="193:17">error_set</name><argument_list pos:start="193:18" pos:end="193:54">(<argument pos:start="193:19" pos:end="193:22"><expr pos:start="193:19" pos:end="193:22"><name pos:start="193:19" pos:end="193:22">errp</name></expr></argument>, <argument pos:start="193:25" pos:end="193:45"><expr pos:start="193:25" pos:end="193:45"><name pos:start="193:25" pos:end="193:45">QERR_OPEN_FILE_FAILED</name></expr></argument>, <argument pos:start="193:48" pos:end="193:53"><expr pos:start="193:48" pos:end="193:53"><name pos:start="193:48" pos:end="193:53">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="195:9" pos:end="195:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="201:5" pos:end="201:69">/* We need a backing file if we will copy parts of a cluster.  */</comment>

    <if_stmt pos:start="203:5" pos:end="219:5"><if pos:start="203:5" pos:end="219:5">if <condition pos:start="203:8" pos:end="205:63">(<expr pos:start="203:9" pos:end="205:62"><call pos:start="203:9" pos:end="203:38"><name pos:start="203:9" pos:end="203:21">bdrv_get_info</name><argument_list pos:start="203:22" pos:end="203:38">(<argument pos:start="203:23" pos:end="203:31"><expr pos:start="203:23" pos:end="203:31"><name pos:start="203:23" pos:end="203:31">target_bs</name></expr></argument>, <argument pos:start="203:34" pos:end="203:37"><expr pos:start="203:34" pos:end="203:37"><operator pos:start="203:34" pos:end="203:34">&amp;</operator><name pos:start="203:35" pos:end="203:37">bdi</name></expr></argument>)</argument_list></call> <operator pos:start="203:40" pos:end="203:41">&gt;=</operator> <literal type="number" pos:start="203:43" pos:end="203:43">0</literal> <operator pos:start="203:45" pos:end="203:46">&amp;&amp;</operator> <name pos:start="203:48" pos:end="203:63"><name pos:start="203:48" pos:end="203:50">bdi</name><operator pos:start="203:51" pos:end="203:51">.</operator><name pos:start="203:52" pos:end="203:63">cluster_size</name></name> <operator pos:start="203:65" pos:end="203:66">!=</operator> <literal type="number" pos:start="203:68" pos:end="203:68">0</literal> <operator pos:start="203:70" pos:end="203:71">&amp;&amp;</operator>

        <name pos:start="205:9" pos:end="205:24"><name pos:start="205:9" pos:end="205:11">bdi</name><operator pos:start="205:12" pos:end="205:12">.</operator><name pos:start="205:13" pos:end="205:24">cluster_size</name></name> <operator pos:start="205:26" pos:end="205:27">&gt;=</operator> <name pos:start="205:29" pos:end="205:56">BDRV_SECTORS_PER_DIRTY_CHUNK</name> <operator pos:start="205:58" pos:end="205:58">*</operator> <literal type="number" pos:start="205:60" pos:end="205:62">512</literal></expr>)</condition> <block pos:start="205:65" pos:end="219:5">{<block_content pos:start="207:9" pos:end="217:9">

        <expr_stmt pos:start="207:9" pos:end="207:48"><expr pos:start="207:9" pos:end="207:47"><name pos:start="207:9" pos:end="207:11">ret</name> <operator pos:start="207:13" pos:end="207:13">=</operator> <call pos:start="207:15" pos:end="207:47"><name pos:start="207:15" pos:end="207:36">bdrv_open_backing_file</name><argument_list pos:start="207:37" pos:end="207:47">(<argument pos:start="207:38" pos:end="207:46"><expr pos:start="207:38" pos:end="207:46"><name pos:start="207:38" pos:end="207:46">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="217:9"><if pos:start="209:9" pos:end="217:9">if <condition pos:start="209:12" pos:end="209:20">(<expr pos:start="209:13" pos:end="209:19"><name pos:start="209:13" pos:end="209:15">ret</name> <operator pos:start="209:17" pos:end="209:17">&lt;</operator> <literal type="number" pos:start="209:19" pos:end="209:19">0</literal></expr>)</condition> <block pos:start="209:22" pos:end="217:9">{<block_content pos:start="211:13" pos:end="215:19">

            <expr_stmt pos:start="211:13" pos:end="211:35"><expr pos:start="211:13" pos:end="211:34"><call pos:start="211:13" pos:end="211:34"><name pos:start="211:13" pos:end="211:23">bdrv_delete</name><argument_list pos:start="211:24" pos:end="211:34">(<argument pos:start="211:25" pos:end="211:33"><expr pos:start="211:25" pos:end="211:33"><name pos:start="211:25" pos:end="211:33">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:59"><expr pos:start="213:13" pos:end="213:58"><call pos:start="213:13" pos:end="213:58"><name pos:start="213:13" pos:end="213:21">error_set</name><argument_list pos:start="213:22" pos:end="213:58">(<argument pos:start="213:23" pos:end="213:26"><expr pos:start="213:23" pos:end="213:26"><name pos:start="213:23" pos:end="213:26">errp</name></expr></argument>, <argument pos:start="213:29" pos:end="213:49"><expr pos:start="213:29" pos:end="213:49"><name pos:start="213:29" pos:end="213:49">QERR_OPEN_FILE_FAILED</name></expr></argument>, <argument pos:start="213:52" pos:end="213:57"><expr pos:start="213:52" pos:end="213:57"><name pos:start="213:52" pos:end="213:57">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="215:13" pos:end="215:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:75"><expr pos:start="223:5" pos:end="223:74"><call pos:start="223:5" pos:end="223:74"><name pos:start="223:5" pos:end="223:16">mirror_start</name><argument_list pos:start="223:17" pos:end="223:74">(<argument pos:start="223:18" pos:end="223:19"><expr pos:start="223:18" pos:end="223:19"><name pos:start="223:18" pos:end="223:19">bs</name></expr></argument>, <argument pos:start="223:22" pos:end="223:30"><expr pos:start="223:22" pos:end="223:30"><name pos:start="223:22" pos:end="223:30">target_bs</name></expr></argument>, <argument pos:start="223:33" pos:end="223:37"><expr pos:start="223:33" pos:end="223:37"><name pos:start="223:33" pos:end="223:37">speed</name></expr></argument>, <argument pos:start="223:40" pos:end="223:43"><expr pos:start="223:40" pos:end="223:43"><name pos:start="223:40" pos:end="223:43">sync</name></expr></argument>, <argument pos:start="223:46" pos:end="223:57"><expr pos:start="223:46" pos:end="223:57"><name pos:start="223:46" pos:end="223:57">block_job_cb</name></expr></argument>, <argument pos:start="223:60" pos:end="223:61"><expr pos:start="223:60" pos:end="223:61"><name pos:start="223:60" pos:end="223:61">bs</name></expr></argument>, <argument pos:start="223:64" pos:end="223:73"><expr pos:start="223:64" pos:end="223:73"><operator pos:start="223:64" pos:end="223:64">&amp;</operator><name pos:start="223:65" pos:end="223:73">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="233:5"><if pos:start="225:5" pos:end="233:5">if <condition pos:start="225:8" pos:end="225:26">(<expr pos:start="225:9" pos:end="225:25"><name pos:start="225:9" pos:end="225:17">local_err</name> <operator pos:start="225:19" pos:end="225:20">!=</operator> <name pos:start="225:22" pos:end="225:25">NULL</name></expr>)</condition> <block pos:start="225:28" pos:end="233:5">{<block_content pos:start="227:9" pos:end="231:15">

        <expr_stmt pos:start="227:9" pos:end="227:31"><expr pos:start="227:9" pos:end="227:30"><call pos:start="227:9" pos:end="227:30"><name pos:start="227:9" pos:end="227:19">bdrv_delete</name><argument_list pos:start="227:20" pos:end="227:30">(<argument pos:start="227:21" pos:end="227:29"><expr pos:start="227:21" pos:end="227:29"><name pos:start="227:21" pos:end="227:29">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:41"><expr pos:start="229:9" pos:end="229:40"><call pos:start="229:9" pos:end="229:40"><name pos:start="229:9" pos:end="229:23">error_propagate</name><argument_list pos:start="229:24" pos:end="229:40">(<argument pos:start="229:25" pos:end="229:28"><expr pos:start="229:25" pos:end="229:28"><name pos:start="229:25" pos:end="229:28">errp</name></expr></argument>, <argument pos:start="229:31" pos:end="229:39"><expr pos:start="229:31" pos:end="229:39"><name pos:start="229:31" pos:end="229:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="231:9" pos:end="231:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="237:5" pos:end="241:7">/* Grab a reference so hotplug does not delete the BlockDriverState from

     * underneath us.

     */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:45"><expr pos:start="243:5" pos:end="243:44"><call pos:start="243:5" pos:end="243:44"><name pos:start="243:5" pos:end="243:17">drive_get_ref</name><argument_list pos:start="243:18" pos:end="243:44">(<argument pos:start="243:19" pos:end="243:43"><expr pos:start="243:19" pos:end="243:43"><call pos:start="243:19" pos:end="243:43"><name pos:start="243:19" pos:end="243:39">drive_get_by_blockdev</name><argument_list pos:start="243:40" pos:end="243:43">(<argument pos:start="243:41" pos:end="243:42"><expr pos:start="243:41" pos:end="243:42"><name pos:start="243:41" pos:end="243:42">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
