<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25336.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">monitor_call_handler</name><parameter_list pos:start="1:33" pos:end="3:53">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:40">Monitor</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">mon</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:67"><decl pos:start="1:48" pos:end="1:67"><type pos:start="1:48" pos:end="1:67"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:62">mon_cmd_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">cmd</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:52"><decl pos:start="3:34" pos:end="3:52"><type pos:start="3:34" pos:end="3:52"><specifier pos:start="3:34" pos:end="3:38">const</specifier> <name pos:start="3:40" pos:end="3:44">QDict</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:52">params</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:25">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">QObject</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:17">data</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><name pos:start="7:21" pos:end="7:24">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:46"><expr pos:start="11:5" pos:end="11:45"><call pos:start="11:5" pos:end="11:45"><name pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:7">cmd</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:17">mhandler</name><operator pos:start="11:18" pos:end="11:18">.</operator><name pos:start="11:19" pos:end="11:25">cmd_new</name></name><argument_list pos:start="11:26" pos:end="11:45">(<argument pos:start="11:27" pos:end="11:29"><expr pos:start="11:27" pos:end="11:29"><name pos:start="11:27" pos:end="11:29">mon</name></expr></argument>, <argument pos:start="11:32" pos:end="11:37"><expr pos:start="11:32" pos:end="11:37"><name pos:start="11:32" pos:end="11:37">params</name></expr></argument>, <argument pos:start="11:40" pos:end="11:44"><expr pos:start="11:40" pos:end="11:44"><operator pos:start="11:40" pos:end="11:40">&amp;</operator><name pos:start="11:41" pos:end="11:44">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="45:5"><if pos:start="15:5" pos:end="31:5">if <condition pos:start="15:8" pos:end="15:30">(<expr pos:start="15:9" pos:end="15:29"><call pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:23">is_async_return</name><argument_list pos:start="15:24" pos:end="15:29">(<argument pos:start="15:25" pos:end="15:28"><expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">data</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:32" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:9">

        <comment type="block" pos:start="17:9" pos:end="23:11">/*

         * Asynchronous commands have no initial return data but they can

         * generate errors.  Data is returned via the async completion handler.

         */</comment>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:61">(<expr pos:start="25:13" pos:end="25:60"><call pos:start="25:13" pos:end="25:34"><name pos:start="25:13" pos:end="25:29">monitor_ctrl_mode</name><argument_list pos:start="25:30" pos:end="25:34">(<argument pos:start="25:31" pos:end="25:33"><expr pos:start="25:31" pos:end="25:33"><name pos:start="25:31" pos:end="25:33">mon</name></expr></argument>)</argument_list></call> <operator pos:start="25:36" pos:end="25:37">&amp;&amp;</operator> <call pos:start="25:39" pos:end="25:60"><name pos:start="25:39" pos:end="25:55">monitor_has_error</name><argument_list pos:start="25:56" pos:end="25:60">(<argument pos:start="25:57" pos:end="25:59"><expr pos:start="25:57" pos:end="25:59"><name pos:start="25:57" pos:end="25:59">mon</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:63" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:48">

            <expr_stmt pos:start="27:13" pos:end="27:48"><expr pos:start="27:13" pos:end="27:47"><call pos:start="27:13" pos:end="27:47"><name pos:start="27:13" pos:end="27:36">monitor_protocol_emitter</name><argument_list pos:start="27:37" pos:end="27:47">(<argument pos:start="27:38" pos:end="27:40"><expr pos:start="27:38" pos:end="27:40"><name pos:start="27:38" pos:end="27:40">mon</name></expr></argument>, <argument pos:start="27:43" pos:end="27:46"><expr pos:start="27:43" pos:end="27:46"><name pos:start="27:43" pos:end="27:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="31:7" pos:end="37:5">else if <condition pos:start="31:15" pos:end="31:38">(<expr pos:start="31:16" pos:end="31:37"><call pos:start="31:16" pos:end="31:37"><name pos:start="31:16" pos:end="31:32">monitor_ctrl_mode</name><argument_list pos:start="31:33" pos:end="31:37">(<argument pos:start="31:34" pos:end="31:36"><expr pos:start="31:34" pos:end="31:36"><name pos:start="31:34" pos:end="31:36">mon</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:40" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:44">

        <comment type="block" pos:start="33:9" pos:end="33:30">/* Monitor Protocol */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><call pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:32">monitor_protocol_emitter</name><argument_list pos:start="35:33" pos:end="35:43">(<argument pos:start="35:34" pos:end="35:36"><expr pos:start="35:34" pos:end="35:36"><name pos:start="35:34" pos:end="35:36">mon</name></expr></argument>, <argument pos:start="35:39" pos:end="35:42"><expr pos:start="35:39" pos:end="35:42"><name pos:start="35:39" pos:end="35:42">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="45:5">else <block pos:start="37:12" pos:end="45:5">{<block_content pos:start="41:10" pos:end="43:39">

        <comment type="block" pos:start="39:9" pos:end="39:27">/* User Protocol */</comment>

         <if_stmt pos:start="41:10" pos:end="43:39"><if pos:start="41:10" pos:end="43:39">if <condition pos:start="41:13" pos:end="41:18">(<expr pos:start="41:14" pos:end="41:17"><name pos:start="41:14" pos:end="41:17">data</name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:39"><block_content pos:start="43:13" pos:end="43:39">

            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><call pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:15">cmd</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:27">user_print</name></name><argument_list pos:start="43:28" pos:end="43:38">(<argument pos:start="43:29" pos:end="43:31"><expr pos:start="43:29" pos:end="43:31"><name pos:start="43:29" pos:end="43:31">mon</name></expr></argument>, <argument pos:start="43:34" pos:end="43:37"><expr pos:start="43:34" pos:end="43:37"><name pos:start="43:34" pos:end="43:37">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><call pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:18">qobject_decref</name><argument_list pos:start="49:19" pos:end="49:24">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
