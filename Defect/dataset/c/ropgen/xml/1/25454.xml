<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25454.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">piix4_device_hotplug</name><parameter_list pos:start="1:32" pos:end="3:54">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:43">DeviceState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">qdev</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:60">PCIDevice</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">dev</name></decl></parameter>,

				<parameter pos:start="3:33" pos:end="3:53"><decl pos:start="3:33" pos:end="3:53"><type pos:start="3:33" pos:end="3:53"><name pos:start="3:33" pos:end="3:47">PCIHotplugState</name></type> <name pos:start="3:49" pos:end="3:53">state</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:13">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">slot</name> <init pos:start="7:14" pos:end="7:35">= <expr pos:start="7:16" pos:end="7:35"><call pos:start="7:16" pos:end="7:35"><name pos:start="7:16" pos:end="7:23">PCI_SLOT</name><argument_list pos:start="7:24" pos:end="7:35">(<argument pos:start="7:25" pos:end="7:34"><expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:27">dev</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:34">devfn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:50"><decl pos:start="9:5" pos:end="11:49"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">PIIX4PMState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="11:49">= <expr pos:start="9:23" pos:end="11:49"><call pos:start="9:23" pos:end="11:49"><name pos:start="9:23" pos:end="9:31">DO_UPCAST</name><argument_list pos:start="9:32" pos:end="11:49">(<argument pos:start="9:33" pos:end="9:44"><expr pos:start="9:33" pos:end="9:44"><name pos:start="9:33" pos:end="9:44">PIIX4PMState</name></expr></argument>, <argument pos:start="9:47" pos:end="9:49"><expr pos:start="9:47" pos:end="9:49"><name pos:start="9:47" pos:end="9:49">dev</name></expr></argument>,

                                <argument pos:start="11:33" pos:end="11:48"><expr pos:start="11:33" pos:end="11:48"><call pos:start="11:33" pos:end="11:48"><name pos:start="11:33" pos:end="11:42">PCI_DEVICE</name><argument_list pos:start="11:43" pos:end="11:48">(<argument pos:start="11:44" pos:end="11:47"><expr pos:start="11:44" pos:end="11:47"><name pos:start="11:44" pos:end="11:47">qdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="19:50">/* Don't send event when device is enabled during qemu machine creation:

     * it is present on boot, no hotplug event is necessary. We do send an

     * event when the device is disabled later. */</comment>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:38">(<expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:13">state</name> <operator pos:start="21:15" pos:end="21:16">==</operator> <name pos:start="21:18" pos:end="21:37">PCI_COLDPLUG_ENABLED</name></expr>)</condition> <block pos:start="21:40" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:18">pci0_status</name><operator pos:start="29:19" pos:end="29:19">.</operator><name pos:start="29:20" pos:end="29:21">up</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:28"><expr pos:start="31:5" pos:end="31:27"><name pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:18">pci0_status</name><operator pos:start="31:19" pos:end="31:19">.</operator><name pos:start="31:20" pos:end="31:23">down</name></name> <operator pos:start="31:25" pos:end="31:25">=</operator> <literal type="number" pos:start="31:27" pos:end="31:27">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:37">(<expr pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:13">state</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <name pos:start="33:18" pos:end="33:36">PCI_HOTPLUG_ENABLED</name></expr>)</condition> <block pos:start="33:39" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:31">

        <expr_stmt pos:start="35:9" pos:end="35:31"><expr pos:start="35:9" pos:end="35:30"><call pos:start="35:9" pos:end="35:30"><name pos:start="35:9" pos:end="35:21">enable_device</name><argument_list pos:start="35:22" pos:end="35:30">(<argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><name pos:start="35:23" pos:end="35:23">s</name></expr></argument>, <argument pos:start="35:26" pos:end="35:29"><expr pos:start="35:26" pos:end="35:29"><name pos:start="35:26" pos:end="35:29">slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="41:5">else <block pos:start="37:12" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:32">

        <expr_stmt pos:start="39:9" pos:end="39:32"><expr pos:start="39:9" pos:end="39:31"><call pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:22">disable_device</name><argument_list pos:start="39:23" pos:end="39:31">(<argument pos:start="39:24" pos:end="39:24"><expr pos:start="39:24" pos:end="39:24"><name pos:start="39:24" pos:end="39:24">s</name></expr></argument>, <argument pos:start="39:27" pos:end="39:30"><expr pos:start="39:27" pos:end="39:30"><name pos:start="39:27" pos:end="39:30">slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:21"><expr pos:start="45:5" pos:end="45:20"><call pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:17">pm_update_sci</name><argument_list pos:start="45:18" pos:end="45:20">(<argument pos:start="45:19" pos:end="45:19"><expr pos:start="45:19" pos:end="45:19"><name pos:start="45:19" pos:end="45:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="49:5" pos:end="49:13">return <expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
