<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12587.c" pos:tabs="8"><function pos:start="1:1" pos:end="305:41"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:32">get_phys_addr_pmsav7</name><parameter_list pos:start="1:33" pos:end="7:53">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:44">CPUARMState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:67"><decl pos:start="1:52" pos:end="1:67"><type pos:start="1:52" pos:end="1:67"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:67">address</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:58"><decl pos:start="3:34" pos:end="3:58"><type pos:start="3:34" pos:end="3:58"><name pos:start="3:34" pos:end="3:46">MMUAccessType</name></type> <name pos:start="3:48" pos:end="3:58">access_type</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:77"><decl pos:start="3:61" pos:end="3:77"><type pos:start="3:61" pos:end="3:77"><name pos:start="3:61" pos:end="3:69">ARMMMUIdx</name></type> <name pos:start="3:71" pos:end="3:77">mmu_idx</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:49"><decl pos:start="5:34" pos:end="5:49"><type pos:start="5:34" pos:end="5:49"><name pos:start="5:34" pos:end="5:39">hwaddr</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:49">phys_ptr</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:60"><decl pos:start="5:52" pos:end="5:60"><type pos:start="5:52" pos:end="5:60"><name pos:start="5:52" pos:end="5:54">int</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:60">prot</name></decl></parameter>,

                                 <parameter pos:start="7:34" pos:end="7:52"><decl pos:start="7:34" pos:end="7:52"><type pos:start="7:34" pos:end="7:52"><name pos:start="7:34" pos:end="7:48">ARMMMUFaultInfo</name> <modifier pos:start="7:50" pos:end="7:50">*</modifier></type><name pos:start="7:51" pos:end="7:52">fi</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="305:41">{<block_content pos:start="11:5" pos:end="305:41">

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">ARMCPU</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:15">cpu</name> <init pos:start="11:17" pos:end="11:38">= <expr pos:start="11:19" pos:end="11:38"><call pos:start="11:19" pos:end="11:38"><name pos:start="11:19" pos:end="11:33">arm_env_get_cpu</name><argument_list pos:start="11:34" pos:end="11:38">(<argument pos:start="11:35" pos:end="11:37"><expr pos:start="11:35" pos:end="11:37"><name pos:start="11:35" pos:end="11:37">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:16">is_user</name> <init pos:start="15:18" pos:end="15:47">= <expr pos:start="15:20" pos:end="15:47"><call pos:start="15:20" pos:end="15:47"><name pos:start="15:20" pos:end="15:33">regime_is_user</name><argument_list pos:start="15:34" pos:end="15:47">(<argument pos:start="15:35" pos:end="15:37"><expr pos:start="15:35" pos:end="15:37"><name pos:start="15:35" pos:end="15:37">env</name></expr></argument>, <argument pos:start="15:40" pos:end="15:46"><expr pos:start="15:40" pos:end="15:46"><name pos:start="15:40" pos:end="15:46">mmu_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:13">phys_ptr</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:23">address</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:14"><expr pos:start="21:5" pos:end="21:13"><operator pos:start="21:5" pos:end="21:5">*</operator><name pos:start="21:6" pos:end="21:9">prot</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <literal type="number" pos:start="21:13" pos:end="21:13">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="305:41"><if pos:start="25:5" pos:end="45:5">if <condition pos:start="25:8" pos:end="27:38">(<expr pos:start="25:9" pos:end="27:37"><call pos:start="25:9" pos:end="25:49"><name pos:start="25:9" pos:end="25:35">regime_translation_disabled</name><argument_list pos:start="25:36" pos:end="25:49">(<argument pos:start="25:37" pos:end="25:39"><expr pos:start="25:37" pos:end="25:39"><name pos:start="25:37" pos:end="25:39">env</name></expr></argument>, <argument pos:start="25:42" pos:end="25:48"><expr pos:start="25:42" pos:end="25:48"><name pos:start="25:42" pos:end="25:48">mmu_idx</name></expr></argument>)</argument_list></call> <operator pos:start="25:51" pos:end="25:52">||</operator>

        <call pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:23">m_is_ppb_region</name><argument_list pos:start="27:24" pos:end="27:37">(<argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><name pos:start="27:25" pos:end="27:27">env</name></expr></argument>, <argument pos:start="27:30" pos:end="27:36"><expr pos:start="27:30" pos:end="27:36"><name pos:start="27:30" pos:end="27:36">address</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:40" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:66">

        <comment type="block" pos:start="29:9" pos:end="41:11">/* MPU disabled or M profile PPB access: use default memory map.

         * The other case which uses the default memory map in the

         * v7M ARM ARM pseudocode is exception vector reads from the vector

         * table. In QEMU those accesses are done in arm_v7m_load_vector(),

         * which always does a direct read using address_space_ldl(), rather

         * than going via this function, so we don't need to check that here.

         */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:66"><expr pos:start="43:9" pos:end="43:65"><call pos:start="43:9" pos:end="43:65"><name pos:start="43:9" pos:end="43:36">get_phys_addr_pmsav7_default</name><argument_list pos:start="43:37" pos:end="43:65">(<argument pos:start="43:38" pos:end="43:40"><expr pos:start="43:38" pos:end="43:40"><name pos:start="43:38" pos:end="43:40">env</name></expr></argument>, <argument pos:start="43:43" pos:end="43:49"><expr pos:start="43:43" pos:end="43:49"><name pos:start="43:43" pos:end="43:49">mmu_idx</name></expr></argument>, <argument pos:start="43:52" pos:end="43:58"><expr pos:start="43:52" pos:end="43:58"><name pos:start="43:52" pos:end="43:58">address</name></expr></argument>, <argument pos:start="43:61" pos:end="43:64"><expr pos:start="43:61" pos:end="43:64"><name pos:start="43:61" pos:end="43:64">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="305:41">else <block pos:start="45:12" pos:end="305:41">{<block_content pos:start="47:9" pos:end="305:41"> <comment type="block" pos:start="45:14" pos:end="45:30">/* MPU enabled */</comment>

        <for pos:start="47:9" pos:end="305:41">for <control pos:start="47:13" pos:end="47:59">(<init pos:start="47:14" pos:end="47:46"><expr pos:start="47:14" pos:end="47:45"><name pos:start="47:14" pos:end="47:14">n</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:21">int</name><operator pos:start="47:22" pos:end="47:22">)</operator><name pos:start="47:23" pos:end="47:41"><name pos:start="47:23" pos:end="47:25">cpu</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:41">pmsav7_dregion</name></name> <operator pos:start="47:43" pos:end="47:43">-</operator> <literal type="number" pos:start="47:45" pos:end="47:45">1</literal></expr>;</init> <condition pos:start="47:48" pos:end="47:54"><expr pos:start="47:48" pos:end="47:53"><name pos:start="47:48" pos:end="47:48">n</name> <operator pos:start="47:50" pos:end="47:51">&gt;=</operator> <literal type="number" pos:start="47:53" pos:end="47:53">0</literal></expr>;</condition> <incr pos:start="47:56" pos:end="47:58"><expr pos:start="47:56" pos:end="47:58"><name pos:start="47:56" pos:end="47:56">n</name><operator pos:start="47:57" pos:end="47:58">--</operator></expr></incr>)</control> <block pos:start="47:61" pos:end="305:41">{<block_content pos:start="51:13" pos:end="305:41">

            <comment type="block" pos:start="49:13" pos:end="49:31">/* region search */</comment>

            <decl_stmt pos:start="51:13" pos:end="51:49"><decl pos:start="51:13" pos:end="51:48"><type pos:start="51:13" pos:end="51:20"><name pos:start="51:13" pos:end="51:20">uint32_t</name></type> <name pos:start="51:22" pos:end="51:25">base</name> <init pos:start="51:27" pos:end="51:48">= <expr pos:start="51:29" pos:end="51:48"><name pos:start="51:29" pos:end="51:48"><name pos:start="51:29" pos:end="51:31">env</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:39">pmsav7</name><operator pos:start="51:40" pos:end="51:40">.</operator><name pos:start="51:41" pos:end="51:45">drbar</name><index pos:start="51:46" pos:end="51:48">[<expr pos:start="51:47" pos:end="51:47"><name pos:start="51:47" pos:end="51:47">n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="53:13" pos:end="53:66"><decl pos:start="53:13" pos:end="53:65"><type pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:20">uint32_t</name></type> <name pos:start="53:22" pos:end="53:26">rsize</name> <init pos:start="53:28" pos:end="53:65">= <expr pos:start="53:30" pos:end="53:65"><call pos:start="53:30" pos:end="53:65"><name pos:start="53:30" pos:end="53:38">extract32</name><argument_list pos:start="53:39" pos:end="53:65">(<argument pos:start="53:40" pos:end="53:58"><expr pos:start="53:40" pos:end="53:58"><name pos:start="53:40" pos:end="53:58"><name pos:start="53:40" pos:end="53:42">env</name><operator pos:start="53:43" pos:end="53:44">-&gt;</operator><name pos:start="53:45" pos:end="53:50">pmsav7</name><operator pos:start="53:51" pos:end="53:51">.</operator><name pos:start="53:52" pos:end="53:55">drsr</name><index pos:start="53:56" pos:end="53:58">[<expr pos:start="53:57" pos:end="53:57"><name pos:start="53:57" pos:end="53:57">n</name></expr>]</index></name></expr></argument>, <argument pos:start="53:61" pos:end="53:61"><expr pos:start="53:61" pos:end="53:61"><literal type="number" pos:start="53:61" pos:end="53:61">1</literal></expr></argument>, <argument pos:start="53:64" pos:end="53:64"><expr pos:start="53:64" pos:end="53:64"><literal type="number" pos:start="53:64" pos:end="53:64">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="55:13" pos:end="55:27"><decl pos:start="55:13" pos:end="55:26"><type pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:20">uint32_t</name></type> <name pos:start="55:22" pos:end="55:26">rmask</name></decl>;</decl_stmt>

            <decl_stmt pos:start="57:13" pos:end="57:31"><decl pos:start="57:13" pos:end="57:30"><type pos:start="57:13" pos:end="57:16"><name pos:start="57:13" pos:end="57:16">bool</name></type> <name pos:start="57:18" pos:end="57:22">srdis</name> <init pos:start="57:24" pos:end="57:30">= <expr pos:start="57:26" pos:end="57:30"><name pos:start="57:26" pos:end="57:30">false</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="61:13" pos:end="305:41"><if pos:start="61:13" pos:end="305:41">if <condition pos:start="61:16" pos:end="61:45">(<expr pos:start="61:17" pos:end="61:44"><operator pos:start="61:17" pos:end="61:17">!</operator><operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:37"><name pos:start="61:19" pos:end="61:21">env</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:29">pmsav7</name><operator pos:start="61:30" pos:end="61:30">.</operator><name pos:start="61:31" pos:end="61:34">drsr</name><index pos:start="61:35" pos:end="61:37">[<expr pos:start="61:36" pos:end="61:36"><name pos:start="61:36" pos:end="61:36">n</name></expr>]</index></name> <operator pos:start="61:39" pos:end="61:39">&amp;</operator> <literal type="number" pos:start="61:41" pos:end="61:43">0x1</literal><operator pos:start="61:44" pos:end="61:44">)</operator></expr>)</condition> <block pos:start="61:47" pos:end="305:41">{<block_content pos:start="63:17" pos:end="305:41">

                <continue pos:start="63:17" pos:end="63:25">continue;</continue>




            <if_stmt pos:start="68:13" pos:end="305:41"><if pos:start="68:13" pos:end="305:41">if <condition pos:start="68:16" pos:end="68:23">(<expr pos:start="68:17" pos:end="68:22"><operator pos:start="68:17" pos:end="68:17">!</operator><name pos:start="68:18" pos:end="68:22">rsize</name></expr>)</condition> <block pos:start="68:25" pos:end="305:41">{<block_content pos:start="70:17" pos:end="305:41">

                <expr_stmt pos:start="70:17" pos:end="72:72"><expr pos:start="70:17" pos:end="72:71"><call pos:start="70:17" pos:end="72:71"><name pos:start="70:17" pos:end="70:29">qemu_log_mask</name><argument_list pos:start="70:30" pos:end="72:71">(<argument pos:start="70:31" pos:end="70:45"><expr pos:start="70:31" pos:end="70:45"><name pos:start="70:31" pos:end="70:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="72:31" pos:end="72:67"><expr pos:start="72:31" pos:end="72:67"><literal type="string" pos:start="72:31" pos:end="72:67">"DRSR[%d]: Rsize field cannot be 0\n"</literal></expr></argument>, <argument pos:start="72:70" pos:end="72:70"><expr pos:start="72:70" pos:end="72:70"><name pos:start="72:70" pos:end="72:70">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="74:17" pos:end="74:25">continue;</continue>


            <expr_stmt pos:start="77:13" pos:end="77:20"><expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:17">rsize</name><operator pos:start="77:18" pos:end="77:19">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:40"><expr pos:start="79:13" pos:end="79:39"><name pos:start="79:13" pos:end="79:17">rmask</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <operator pos:start="79:21" pos:end="79:21">(</operator><literal type="number" pos:start="79:22" pos:end="79:25">1ull</literal> <operator pos:start="79:27" pos:end="79:28">&lt;&lt;</operator> <name pos:start="79:30" pos:end="79:34">rsize</name><operator pos:start="79:35" pos:end="79:35">)</operator> <operator pos:start="79:37" pos:end="79:37">-</operator> <literal type="number" pos:start="79:39" pos:end="79:39">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="83:13" pos:end="305:41"><if pos:start="83:13" pos:end="305:41">if <condition pos:start="83:16" pos:end="83:29">(<expr pos:start="83:17" pos:end="83:28"><name pos:start="83:17" pos:end="83:20">base</name> <operator pos:start="83:22" pos:end="83:22">&amp;</operator> <name pos:start="83:24" pos:end="83:28">rmask</name></expr>)</condition> <block pos:start="83:31" pos:end="305:41">{<block_content pos:start="85:17" pos:end="305:41">

                <expr_stmt pos:start="85:17" pos:end="91:46"><expr pos:start="85:17" pos:end="91:45"><call pos:start="85:17" pos:end="91:45"><name pos:start="85:17" pos:end="85:29">qemu_log_mask</name><argument_list pos:start="85:30" pos:end="91:45">(<argument pos:start="85:31" pos:end="85:45"><expr pos:start="85:31" pos:end="85:45"><name pos:start="85:31" pos:end="85:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="87:31" pos:end="89:75"><expr pos:start="87:31" pos:end="89:75"><literal type="string" pos:start="87:31" pos:end="87:46">"DRBAR[%d]: 0x%"</literal> <name pos:start="87:48" pos:end="87:53">PRIx32</name> <literal type="string" pos:start="87:55" pos:end="87:68">" misaligned "</literal>

                              <literal type="string" pos:start="89:31" pos:end="89:63">"to DRSR region size, mask = 0x%"</literal> <name pos:start="89:65" pos:end="89:70">PRIx32</name> <literal type="string" pos:start="89:72" pos:end="89:75">"\n"</literal></expr></argument>,

                              <argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><name pos:start="91:31" pos:end="91:31">n</name></expr></argument>, <argument pos:start="91:34" pos:end="91:37"><expr pos:start="91:34" pos:end="91:37"><name pos:start="91:34" pos:end="91:37">base</name></expr></argument>, <argument pos:start="91:40" pos:end="91:44"><expr pos:start="91:40" pos:end="91:44"><name pos:start="91:40" pos:end="91:44">rmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="93:17" pos:end="93:25">continue;</continue>




            <if_stmt pos:start="98:13" pos:end="305:41"><if pos:start="98:13" pos:end="305:41">if <condition pos:start="98:16" pos:end="98:57">(<expr pos:start="98:17" pos:end="98:56"><name pos:start="98:17" pos:end="98:43"><name pos:start="98:17" pos:end="98:23">address</name> <argument_list type="generic" pos:start="98:25" pos:end="98:43">&lt; <argument pos:start="98:27" pos:end="98:41"><expr pos:start="98:27" pos:end="98:41"><name pos:start="98:27" pos:end="98:30">base</name> <operator pos:start="98:32" pos:end="98:33">||</operator> <name pos:start="98:35" pos:end="98:41">address</name></expr></argument> &gt;</argument_list></name> <name pos:start="98:45" pos:end="98:48">base</name> <operator pos:start="98:50" pos:end="98:50">+</operator> <name pos:start="98:52" pos:end="98:56">rmask</name></expr>)</condition> <block pos:start="98:59" pos:end="305:41">{<block_content pos:start="100:17" pos:end="305:41">

                <continue pos:start="100:17" pos:end="100:25">continue;</continue>




            <comment type="block" pos:start="105:13" pos:end="105:32">/* Region matched */</comment>



            <if_stmt pos:start="109:13" pos:end="305:41"><if pos:start="109:13" pos:end="305:41">if <condition pos:start="109:16" pos:end="109:27">(<expr pos:start="109:17" pos:end="109:26"><name pos:start="109:17" pos:end="109:21">rsize</name> <operator pos:start="109:23" pos:end="109:24">&gt;=</operator> <literal type="number" pos:start="109:26" pos:end="109:26">8</literal></expr>)</condition> <block pos:start="109:29" pos:end="305:41">{<block_content pos:start="111:17" pos:end="305:41"> <comment type="block" pos:start="109:31" pos:end="109:73">/* no subregions for regions &lt; 256 bytes */</comment>

                <decl_stmt pos:start="111:17" pos:end="111:27"><decl pos:start="111:17" pos:end="111:21"><type pos:start="111:17" pos:end="111:19"><name pos:start="111:17" pos:end="111:19">int</name></type> <name pos:start="111:21" pos:end="111:21">i</name></decl>, <decl pos:start="111:24" pos:end="111:26"><type ref="prev" pos:start="111:17" pos:end="111:19"/><name pos:start="111:24" pos:end="111:26">snd</name></decl>;</decl_stmt>

                <decl_stmt pos:start="113:17" pos:end="113:36"><decl pos:start="113:17" pos:end="113:35"><type pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:24">uint32_t</name></type> <name pos:start="113:26" pos:end="113:35">srdis_mask</name></decl>;</decl_stmt>



                <expr_stmt pos:start="117:17" pos:end="117:27"><expr pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:21">rsize</name> <operator pos:start="117:23" pos:end="117:24">-=</operator> <literal type="number" pos:start="117:26" pos:end="117:26">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="117:29" pos:end="117:62">/* sub region size (power of 2) */</comment>

                <expr_stmt pos:start="119:17" pos:end="119:56"><expr pos:start="119:17" pos:end="119:55"><name pos:start="119:17" pos:end="119:19">snd</name> <operator pos:start="119:21" pos:end="119:21">=</operator> <operator pos:start="119:23" pos:end="119:23">(</operator><operator pos:start="119:24" pos:end="119:24">(</operator><name pos:start="119:25" pos:end="119:31">address</name> <operator pos:start="119:33" pos:end="119:33">-</operator> <name pos:start="119:35" pos:end="119:38">base</name><operator pos:start="119:39" pos:end="119:39">)</operator> <operator pos:start="119:41" pos:end="119:42">&gt;&gt;</operator> <name pos:start="119:44" pos:end="119:48">rsize</name><operator pos:start="119:49" pos:end="119:49">)</operator> <operator pos:start="119:51" pos:end="119:51">&amp;</operator> <literal type="number" pos:start="119:53" pos:end="119:55">0x7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:67"><expr pos:start="121:17" pos:end="121:66"><name pos:start="121:17" pos:end="121:21">srdis</name> <operator pos:start="121:23" pos:end="121:23">=</operator> <call pos:start="121:25" pos:end="121:66"><name pos:start="121:25" pos:end="121:33">extract32</name><argument_list pos:start="121:34" pos:end="121:66">(<argument pos:start="121:35" pos:end="121:53"><expr pos:start="121:35" pos:end="121:53"><name pos:start="121:35" pos:end="121:53"><name pos:start="121:35" pos:end="121:37">env</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:45">pmsav7</name><operator pos:start="121:46" pos:end="121:46">.</operator><name pos:start="121:47" pos:end="121:50">drsr</name><index pos:start="121:51" pos:end="121:53">[<expr pos:start="121:52" pos:end="121:52"><name pos:start="121:52" pos:end="121:52">n</name></expr>]</index></name></expr></argument>, <argument pos:start="121:56" pos:end="121:62"><expr pos:start="121:56" pos:end="121:62"><name pos:start="121:56" pos:end="121:58">snd</name> <operator pos:start="121:60" pos:end="121:60">+</operator> <literal type="number" pos:start="121:62" pos:end="121:62">8</literal></expr></argument>, <argument pos:start="121:65" pos:end="121:65"><expr pos:start="121:65" pos:end="121:65"><literal type="number" pos:start="121:65" pos:end="121:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="125:17" pos:end="125:47"><expr pos:start="125:17" pos:end="125:46"><name pos:start="125:17" pos:end="125:26">srdis_mask</name> <operator pos:start="125:28" pos:end="125:28">=</operator> <ternary pos:start="125:30" pos:end="125:46"><condition pos:start="125:30" pos:end="125:36"><expr pos:start="125:30" pos:end="125:34"><name pos:start="125:30" pos:end="125:34">srdis</name></expr> ?</condition><then pos:start="125:38" pos:end="125:40"> <expr pos:start="125:38" pos:end="125:40"><literal type="number" pos:start="125:38" pos:end="125:40">0x3</literal></expr> </then><else pos:start="125:42" pos:end="125:46">: <expr pos:start="125:44" pos:end="125:46"><literal type="number" pos:start="125:44" pos:end="125:46">0x0</literal></expr></else></ternary></expr>;</expr_stmt>

                <for pos:start="127:17" pos:end="305:41">for <control pos:start="127:21" pos:end="127:71">(<init pos:start="127:22" pos:end="127:27"><expr pos:start="127:22" pos:end="127:26"><name pos:start="127:22" pos:end="127:22">i</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <literal type="number" pos:start="127:26" pos:end="127:26">2</literal></expr>;</init> <condition pos:start="127:29" pos:end="127:63"><expr pos:start="127:29" pos:end="127:62"><name pos:start="127:29" pos:end="127:29">i</name> <operator pos:start="127:31" pos:end="127:32">&lt;=</operator> <literal type="number" pos:start="127:34" pos:end="127:34">8</literal> <operator pos:start="127:36" pos:end="127:37">&amp;&amp;</operator> <name pos:start="127:39" pos:end="127:43">rsize</name> <operator pos:start="127:45" pos:end="127:45">&lt;</operator> <name pos:start="127:47" pos:end="127:62">TARGET_PAGE_BITS</name></expr>;</condition> <incr pos:start="127:65" pos:end="127:70"><expr pos:start="127:65" pos:end="127:70"><name pos:start="127:65" pos:end="127:65">i</name> <operator pos:start="127:67" pos:end="127:68">*=</operator> <literal type="number" pos:start="127:70" pos:end="127:70">2</literal></expr></incr>)</control> <block pos:start="127:73" pos:end="305:41">{<block_content pos:start="141:21" pos:end="305:41">

                    <comment type="block" pos:start="129:21" pos:end="139:23">/* This will check in groups of 2, 4 and then 8, whether

                     * the subregion bits are consistent. rsize is incremented

                     * back up to give the region size, considering consistent

                     * adjacent subregions as one region. Stop testing if rsize

                     * is already big enough for an entire QEMU page.

                     */</comment>

                    <decl_stmt pos:start="141:21" pos:end="141:53"><decl pos:start="141:21" pos:end="141:52"><type pos:start="141:21" pos:end="141:23"><name pos:start="141:21" pos:end="141:23">int</name></type> <name pos:start="141:25" pos:end="141:35">snd_rounded</name> <init pos:start="141:37" pos:end="141:52">= <expr pos:start="141:39" pos:end="141:52"><name pos:start="141:39" pos:end="141:41">snd</name> <operator pos:start="141:43" pos:end="141:43">&amp;</operator> <operator pos:start="141:45" pos:end="141:45">~</operator><operator pos:start="141:46" pos:end="141:46">(</operator><name pos:start="141:47" pos:end="141:47">i</name> <operator pos:start="141:49" pos:end="141:49">-</operator> <literal type="number" pos:start="141:51" pos:end="141:51">1</literal><operator pos:start="141:52" pos:end="141:52">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="143:21" pos:end="145:73"><decl pos:start="143:21" pos:end="145:72"><type pos:start="143:21" pos:end="143:28"><name pos:start="143:21" pos:end="143:28">uint32_t</name></type> <name pos:start="143:30" pos:end="143:40">srdis_multi</name> <init pos:start="143:42" pos:end="145:72">= <expr pos:start="143:44" pos:end="145:72"><call pos:start="143:44" pos:end="145:72"><name pos:start="143:44" pos:end="143:52">extract32</name><argument_list pos:start="143:53" pos:end="145:72">(<argument pos:start="143:54" pos:end="143:72"><expr pos:start="143:54" pos:end="143:72"><name pos:start="143:54" pos:end="143:72"><name pos:start="143:54" pos:end="143:56">env</name><operator pos:start="143:57" pos:end="143:58">-&gt;</operator><name pos:start="143:59" pos:end="143:64">pmsav7</name><operator pos:start="143:65" pos:end="143:65">.</operator><name pos:start="143:66" pos:end="143:69">drsr</name><index pos:start="143:70" pos:end="143:72">[<expr pos:start="143:71" pos:end="143:71"><name pos:start="143:71" pos:end="143:71">n</name></expr>]</index></name></expr></argument>,

                                                     <argument pos:start="145:54" pos:end="145:68"><expr pos:start="145:54" pos:end="145:68"><name pos:start="145:54" pos:end="145:64">snd_rounded</name> <operator pos:start="145:66" pos:end="145:66">+</operator> <literal type="number" pos:start="145:68" pos:end="145:68">8</literal></expr></argument>, <argument pos:start="145:71" pos:end="145:71"><expr pos:start="145:71" pos:end="145:71"><name pos:start="145:71" pos:end="145:71">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="147:21" pos:end="305:41"><if pos:start="147:21" pos:end="305:41">if <condition pos:start="147:24" pos:end="147:49">(<expr pos:start="147:25" pos:end="147:48"><name pos:start="147:25" pos:end="147:34">srdis_mask</name> <operator pos:start="147:36" pos:end="147:36">^</operator> <name pos:start="147:38" pos:end="147:48">srdis_multi</name></expr>)</condition> <block pos:start="147:51" pos:end="305:41">{<block_content pos:start="151:21" pos:end="305:41">



                    <expr_stmt pos:start="151:21" pos:end="151:64"><expr pos:start="151:21" pos:end="151:63"><name pos:start="151:21" pos:end="151:30">srdis_mask</name> <operator pos:start="151:32" pos:end="151:32">=</operator> <operator pos:start="151:34" pos:end="151:34">(</operator><name pos:start="151:35" pos:end="151:44">srdis_mask</name> <operator pos:start="151:46" pos:end="151:47">&lt;&lt;</operator> <name pos:start="151:49" pos:end="151:49">i</name><operator pos:start="151:50" pos:end="151:50">)</operator> <operator pos:start="151:52" pos:end="151:52">|</operator> <name pos:start="151:54" pos:end="151:63">srdis_mask</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="153:21" pos:end="153:28"><expr pos:start="153:21" pos:end="153:27"><name pos:start="153:21" pos:end="153:25">rsize</name><operator pos:start="153:26" pos:end="153:27">++</operator></expr>;</expr_stmt>



            <if_stmt pos:start="157:13" pos:end="305:41"><if pos:start="157:13" pos:end="305:41">if <condition pos:start="157:16" pos:end="157:41">(<expr pos:start="157:17" pos:end="157:40"><name pos:start="157:17" pos:end="157:21">rsize</name> <operator pos:start="157:23" pos:end="157:23">&lt;</operator> <name pos:start="157:25" pos:end="157:40">TARGET_PAGE_BITS</name></expr>)</condition> <block pos:start="157:43" pos:end="305:41">{<block_content pos:start="159:17" pos:end="305:41">

                <expr_stmt pos:start="159:17" pos:end="165:58"><expr pos:start="159:17" pos:end="165:57"><call pos:start="159:17" pos:end="165:57"><name pos:start="159:17" pos:end="159:29">qemu_log_mask</name><argument_list pos:start="159:30" pos:end="165:57">(<argument pos:start="159:31" pos:end="159:39"><expr pos:start="159:31" pos:end="159:39"><name pos:start="159:31" pos:end="159:39">LOG_UNIMP</name></expr></argument>,

                              <argument pos:start="161:31" pos:end="163:78"><expr pos:start="161:31" pos:end="163:78"><literal type="string" pos:start="161:31" pos:end="161:73">"DRSR[%d]: No support for MPU (sub)region "</literal>

                              <literal type="string" pos:start="163:31" pos:end="163:46">"alignment of %"</literal> <name pos:start="163:48" pos:end="163:53">PRIu32</name> <literal type="string" pos:start="163:55" pos:end="163:78">" bits. Minimum is %d\n"</literal></expr></argument>,

                              <argument pos:start="165:31" pos:end="165:31"><expr pos:start="165:31" pos:end="165:31"><name pos:start="165:31" pos:end="165:31">n</name></expr></argument>, <argument pos:start="165:34" pos:end="165:38"><expr pos:start="165:34" pos:end="165:38"><name pos:start="165:34" pos:end="165:38">rsize</name></expr></argument>, <argument pos:start="165:41" pos:end="165:56"><expr pos:start="165:41" pos:end="165:56"><name pos:start="165:41" pos:end="165:56">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="167:17" pos:end="167:25">continue;</continue>


            <if_stmt pos:start="170:13" pos:end="305:41"><if pos:start="170:13" pos:end="305:41">if <condition pos:start="170:16" pos:end="170:22">(<expr pos:start="170:17" pos:end="170:21"><name pos:start="170:17" pos:end="170:21">srdis</name></expr>)</condition> <block pos:start="170:24" pos:end="305:41">{<block_content pos:start="172:17" pos:end="305:41">

                <continue pos:start="172:17" pos:end="172:25">continue;</continue>






        <if_stmt pos:start="179:9" pos:end="305:41"><if pos:start="179:9" pos:end="305:41">if <condition pos:start="179:12" pos:end="179:20">(<expr pos:start="179:13" pos:end="179:19"><name pos:start="179:13" pos:end="179:13">n</name> <operator pos:start="179:15" pos:end="179:16">==</operator> <operator pos:start="179:18" pos:end="179:18">-</operator><literal type="number" pos:start="179:19" pos:end="179:19">1</literal></expr>)</condition> <block pos:start="179:22" pos:end="305:41">{<block_content pos:start="181:13" pos:end="305:41"> <comment type="block" pos:start="179:24" pos:end="179:36">/* no hits */</comment>

            <if_stmt pos:start="181:13" pos:end="305:41"><if pos:start="181:13" pos:end="192:9">if <condition pos:start="181:16" pos:end="181:69">(<expr pos:start="181:17" pos:end="181:68"><operator pos:start="181:17" pos:end="181:17">!</operator><call pos:start="181:18" pos:end="181:68"><name pos:start="181:18" pos:end="181:45">pmsav7_use_background_region</name><argument_list pos:start="181:46" pos:end="181:68">(<argument pos:start="181:47" pos:end="181:49"><expr pos:start="181:47" pos:end="181:49"><name pos:start="181:47" pos:end="181:49">cpu</name></expr></argument>, <argument pos:start="181:52" pos:end="181:58"><expr pos:start="181:52" pos:end="181:58"><name pos:start="181:52" pos:end="181:58">mmu_idx</name></expr></argument>, <argument pos:start="181:61" pos:end="181:67"><expr pos:start="181:61" pos:end="181:67"><name pos:start="181:61" pos:end="181:67">is_user</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:71" pos:end="192:9">{<block_content pos:start="185:17" pos:end="190:70">

                <comment type="block" pos:start="183:17" pos:end="183:38">/* background fault */</comment>

                <expr_stmt pos:start="185:17" pos:end="185:47"><expr pos:start="185:17" pos:end="185:46"><name pos:start="185:17" pos:end="185:24"><name pos:start="185:17" pos:end="185:18">fi</name><operator pos:start="185:19" pos:end="185:20">-&gt;</operator><name pos:start="185:21" pos:end="185:24">type</name></name> <operator pos:start="185:26" pos:end="185:26">=</operator> <name pos:start="185:28" pos:end="185:46">ARMFault_Background</name></expr>;</expr_stmt>

                <return pos:start="187:17" pos:end="187:28">return <expr pos:start="187:24" pos:end="187:27"><name pos:start="187:24" pos:end="187:27">true</name></expr>;</return>


            <expr_stmt pos:start="190:13" pos:end="190:70"><expr pos:start="190:13" pos:end="190:69"><call pos:start="190:13" pos:end="190:69"><name pos:start="190:13" pos:end="190:40">get_phys_addr_pmsav7_default</name><argument_list pos:start="190:41" pos:end="190:69">(<argument pos:start="190:42" pos:end="190:44"><expr pos:start="190:42" pos:end="190:44"><name pos:start="190:42" pos:end="190:44">env</name></expr></argument>, <argument pos:start="190:47" pos:end="190:53"><expr pos:start="190:47" pos:end="190:53"><name pos:start="190:47" pos:end="190:53">mmu_idx</name></expr></argument>, <argument pos:start="190:56" pos:end="190:62"><expr pos:start="190:56" pos:end="190:62"><name pos:start="190:56" pos:end="190:62">address</name></expr></argument>, <argument pos:start="190:65" pos:end="190:68"><expr pos:start="190:65" pos:end="190:68"><name pos:start="190:65" pos:end="190:68">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="192:11" pos:end="305:41">else <block pos:start="192:16" pos:end="305:41">{<block_content pos:start="194:13" pos:end="305:41"> <comment type="block" pos:start="192:18" pos:end="192:33">/* a MPU hit! */</comment>

            <decl_stmt pos:start="194:13" pos:end="194:64"><decl pos:start="194:13" pos:end="194:63"><type pos:start="194:13" pos:end="194:20"><name pos:start="194:13" pos:end="194:20">uint32_t</name></type> <name pos:start="194:22" pos:end="194:23">ap</name> <init pos:start="194:25" pos:end="194:63">= <expr pos:start="194:27" pos:end="194:63"><call pos:start="194:27" pos:end="194:63"><name pos:start="194:27" pos:end="194:35">extract32</name><argument_list pos:start="194:36" pos:end="194:63">(<argument pos:start="194:37" pos:end="194:56"><expr pos:start="194:37" pos:end="194:56"><name pos:start="194:37" pos:end="194:56"><name pos:start="194:37" pos:end="194:39">env</name><operator pos:start="194:40" pos:end="194:41">-&gt;</operator><name pos:start="194:42" pos:end="194:47">pmsav7</name><operator pos:start="194:48" pos:end="194:48">.</operator><name pos:start="194:49" pos:end="194:53">dracr</name><index pos:start="194:54" pos:end="194:56">[<expr pos:start="194:55" pos:end="194:55"><name pos:start="194:55" pos:end="194:55">n</name></expr>]</index></name></expr></argument>, <argument pos:start="194:59" pos:end="194:59"><expr pos:start="194:59" pos:end="194:59"><literal type="number" pos:start="194:59" pos:end="194:59">8</literal></expr></argument>, <argument pos:start="194:62" pos:end="194:62"><expr pos:start="194:62" pos:end="194:62"><literal type="number" pos:start="194:62" pos:end="194:62">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="196:13" pos:end="196:65"><decl pos:start="196:13" pos:end="196:64"><type pos:start="196:13" pos:end="196:20"><name pos:start="196:13" pos:end="196:20">uint32_t</name></type> <name pos:start="196:22" pos:end="196:23">xn</name> <init pos:start="196:25" pos:end="196:64">= <expr pos:start="196:27" pos:end="196:64"><call pos:start="196:27" pos:end="196:64"><name pos:start="196:27" pos:end="196:35">extract32</name><argument_list pos:start="196:36" pos:end="196:64">(<argument pos:start="196:37" pos:end="196:56"><expr pos:start="196:37" pos:end="196:56"><name pos:start="196:37" pos:end="196:56"><name pos:start="196:37" pos:end="196:39">env</name><operator pos:start="196:40" pos:end="196:41">-&gt;</operator><name pos:start="196:42" pos:end="196:47">pmsav7</name><operator pos:start="196:48" pos:end="196:48">.</operator><name pos:start="196:49" pos:end="196:53">dracr</name><index pos:start="196:54" pos:end="196:56">[<expr pos:start="196:55" pos:end="196:55"><name pos:start="196:55" pos:end="196:55">n</name></expr>]</index></name></expr></argument>, <argument pos:start="196:59" pos:end="196:60"><expr pos:start="196:59" pos:end="196:60"><literal type="number" pos:start="196:59" pos:end="196:60">12</literal></expr></argument>, <argument pos:start="196:63" pos:end="196:63"><expr pos:start="196:63" pos:end="196:63"><literal type="number" pos:start="196:63" pos:end="196:63">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="200:13" pos:end="305:41"><if pos:start="200:13" pos:end="305:41">if <condition pos:start="200:16" pos:end="200:49">(<expr pos:start="200:17" pos:end="200:48"><call pos:start="200:17" pos:end="200:48"><name pos:start="200:17" pos:end="200:34">m_is_system_region</name><argument_list pos:start="200:35" pos:end="200:48">(<argument pos:start="200:36" pos:end="200:38"><expr pos:start="200:36" pos:end="200:38"><name pos:start="200:36" pos:end="200:38">env</name></expr></argument>, <argument pos:start="200:41" pos:end="200:47"><expr pos:start="200:41" pos:end="200:47"><name pos:start="200:41" pos:end="200:47">address</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="200:51" pos:end="305:41">{<block_content pos:start="204:17" pos:end="305:41">

                <comment type="block" pos:start="202:17" pos:end="202:58">/* System space is always execute never */</comment>

                <expr_stmt pos:start="204:17" pos:end="204:23"><expr pos:start="204:17" pos:end="204:22"><name pos:start="204:17" pos:end="204:18">xn</name> <operator pos:start="204:20" pos:end="204:20">=</operator> <literal type="number" pos:start="204:22" pos:end="204:22">1</literal></expr>;</expr_stmt>




            <if_stmt pos:start="209:13" pos:end="305:41"><if pos:start="209:13" pos:end="305:41">if <condition pos:start="209:16" pos:end="209:24">(<expr pos:start="209:17" pos:end="209:23"><name pos:start="209:17" pos:end="209:23">is_user</name></expr>)</condition> <block pos:start="209:26" pos:end="305:41">{<block_content pos:start="211:17" pos:end="305:41"> <comment type="block" pos:start="209:28" pos:end="209:58">/* User mode AP bit decoding */</comment>

                <switch pos:start="211:17" pos:end="248:13">switch <condition pos:start="211:24" pos:end="211:27">(<expr pos:start="211:25" pos:end="211:26"><name pos:start="211:25" pos:end="211:26">ap</name></expr>)</condition> <block pos:start="211:29" pos:end="248:13">{<block_content pos:start="213:17" pos:end="245:54">

                <case pos:start="213:17" pos:end="213:23">case <expr pos:start="213:22" pos:end="213:22"><literal type="number" pos:start="213:22" pos:end="213:22">0</literal></expr>:</case>

                <case pos:start="215:17" pos:end="215:23">case <expr pos:start="215:22" pos:end="215:22"><literal type="number" pos:start="215:22" pos:end="215:22">1</literal></expr>:</case>

                <case pos:start="217:17" pos:end="217:23">case <expr pos:start="217:22" pos:end="217:22"><literal type="number" pos:start="217:22" pos:end="217:22">5</literal></expr>:</case>

                    <break pos:start="219:21" pos:end="219:26">break;</break> <comment type="block" pos:start="219:28" pos:end="219:42">/* no access */</comment>

                <case pos:start="221:17" pos:end="221:23">case <expr pos:start="221:22" pos:end="221:22"><literal type="number" pos:start="221:22" pos:end="221:22">3</literal></expr>:</case>

                    <expr_stmt pos:start="223:21" pos:end="223:40"><expr pos:start="223:21" pos:end="223:39"><operator pos:start="223:21" pos:end="223:21">*</operator><name pos:start="223:22" pos:end="223:25">prot</name> <operator pos:start="223:27" pos:end="223:28">|=</operator> <name pos:start="223:30" pos:end="223:39">PAGE_WRITE</name></expr>;</expr_stmt>


                <case pos:start="226:17" pos:end="226:23">case <expr pos:start="226:22" pos:end="226:22"><literal type="number" pos:start="226:22" pos:end="226:22">2</literal></expr>:</case>

                <case pos:start="228:17" pos:end="228:23">case <expr pos:start="228:22" pos:end="228:22"><literal type="number" pos:start="228:22" pos:end="228:22">6</literal></expr>:</case>










                <default pos:start="239:17" pos:end="239:24">default:</default>

                    <expr_stmt pos:start="241:21" pos:end="245:54"><expr pos:start="241:21" pos:end="245:53"><call pos:start="241:21" pos:end="245:53"><name pos:start="241:21" pos:end="241:33">qemu_log_mask</name><argument_list pos:start="241:34" pos:end="245:53">(<argument pos:start="241:35" pos:end="241:49"><expr pos:start="241:35" pos:end="241:49"><name pos:start="241:35" pos:end="241:49">LOG_GUEST_ERROR</name></expr></argument>,

                                  <argument pos:start="243:35" pos:end="245:45"><expr pos:start="243:35" pos:end="245:45"><literal type="string" pos:start="243:35" pos:end="243:73">"DRACR[%d]: Bad value for AP bits: 0x%"</literal>

                                  <name pos:start="245:35" pos:end="245:40">PRIx32</name> <literal type="string" pos:start="245:42" pos:end="245:45">"\n"</literal></expr></argument>, <argument pos:start="245:48" pos:end="245:48"><expr pos:start="245:48" pos:end="245:48"><name pos:start="245:48" pos:end="245:48">n</name></expr></argument>, <argument pos:start="245:51" pos:end="245:52"><expr pos:start="245:51" pos:end="245:52"><name pos:start="245:51" pos:end="245:52">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            </block_content>}</block></switch> <if_stmt pos:start="248:15" pos:end="305:41"><else pos:start="248:15" pos:end="305:41">else <block pos:start="248:20" pos:end="305:41">{<block_content pos:start="250:17" pos:end="305:41"> <comment type="block" pos:start="248:22" pos:end="248:54">/* Priv. mode AP bits decoding */</comment>

                <switch pos:start="250:17" pos:end="305:41">switch <condition pos:start="250:24" pos:end="250:27">(<expr pos:start="250:25" pos:end="250:26"><name pos:start="250:25" pos:end="250:26">ap</name></expr>)</condition> <block pos:start="250:29" pos:end="305:41">{<block_content pos:start="252:17" pos:end="305:41">

                <case pos:start="252:17" pos:end="252:23">case <expr pos:start="252:22" pos:end="252:22"><literal type="number" pos:start="252:22" pos:end="252:22">0</literal></expr>:</case>

                    <break pos:start="254:21" pos:end="254:26">break;</break> <comment type="block" pos:start="254:28" pos:end="254:42">/* no access */</comment>

                <case pos:start="256:17" pos:end="256:23">case <expr pos:start="256:22" pos:end="256:22"><literal type="number" pos:start="256:22" pos:end="256:22">1</literal></expr>:</case>

                <case pos:start="258:17" pos:end="258:23">case <expr pos:start="258:22" pos:end="258:22"><literal type="number" pos:start="258:22" pos:end="258:22">2</literal></expr>:</case>

                <case pos:start="260:17" pos:end="260:23">case <expr pos:start="260:22" pos:end="260:22"><literal type="number" pos:start="260:22" pos:end="260:22">3</literal></expr>:</case>

                    <expr_stmt pos:start="262:21" pos:end="262:40"><expr pos:start="262:21" pos:end="262:39"><operator pos:start="262:21" pos:end="262:21">*</operator><name pos:start="262:22" pos:end="262:25">prot</name> <operator pos:start="262:27" pos:end="262:28">|=</operator> <name pos:start="262:30" pos:end="262:39">PAGE_WRITE</name></expr>;</expr_stmt>


                <case pos:start="265:17" pos:end="265:23">case <expr pos:start="265:22" pos:end="265:22"><literal type="number" pos:start="265:22" pos:end="265:22">5</literal></expr>:</case>

                <case pos:start="267:17" pos:end="267:23">case <expr pos:start="267:22" pos:end="267:22"><literal type="number" pos:start="267:22" pos:end="267:22">6</literal></expr>:</case>










                <default pos:start="278:17" pos:end="278:24">default:</default>

                    <expr_stmt pos:start="280:21" pos:end="284:54"><expr pos:start="280:21" pos:end="284:53"><call pos:start="280:21" pos:end="284:53"><name pos:start="280:21" pos:end="280:33">qemu_log_mask</name><argument_list pos:start="280:34" pos:end="284:53">(<argument pos:start="280:35" pos:end="280:49"><expr pos:start="280:35" pos:end="280:49"><name pos:start="280:35" pos:end="280:49">LOG_GUEST_ERROR</name></expr></argument>,

                                  <argument pos:start="282:35" pos:end="284:45"><expr pos:start="282:35" pos:end="284:45"><literal type="string" pos:start="282:35" pos:end="282:73">"DRACR[%d]: Bad value for AP bits: 0x%"</literal>

                                  <name pos:start="284:35" pos:end="284:40">PRIx32</name> <literal type="string" pos:start="284:42" pos:end="284:45">"\n"</literal></expr></argument>, <argument pos:start="284:48" pos:end="284:48"><expr pos:start="284:48" pos:end="284:48"><name pos:start="284:48" pos:end="284:48">n</name></expr></argument>, <argument pos:start="284:51" pos:end="284:52"><expr pos:start="284:51" pos:end="284:52"><name pos:start="284:51" pos:end="284:52">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





            <comment type="block" pos:start="290:13" pos:end="290:31">/* execute never */</comment>

            <if_stmt pos:start="292:13" pos:end="305:41"><if pos:start="292:13" pos:end="305:41">if <condition pos:start="292:16" pos:end="292:19">(<expr pos:start="292:17" pos:end="292:18"><name pos:start="292:17" pos:end="292:18">xn</name></expr>)</condition> <block pos:start="292:21" pos:end="305:41">{<block_content pos:start="294:17" pos:end="305:41">

                <expr_stmt pos:start="294:17" pos:end="294:36"><expr pos:start="294:17" pos:end="294:35"><operator pos:start="294:17" pos:end="294:17">*</operator><name pos:start="294:18" pos:end="294:21">prot</name> <operator pos:start="294:23" pos:end="294:24">&amp;=</operator> <operator pos:start="294:26" pos:end="294:26">~</operator><name pos:start="294:27" pos:end="294:35">PAGE_EXEC</name></expr>;</expr_stmt>






    <expr_stmt pos:start="301:5" pos:end="301:35"><expr pos:start="301:5" pos:end="301:34"><name pos:start="301:5" pos:end="301:12"><name pos:start="301:5" pos:end="301:6">fi</name><operator pos:start="301:7" pos:end="301:8">-&gt;</operator><name pos:start="301:9" pos:end="301:12">type</name></name> <operator pos:start="301:14" pos:end="301:14">=</operator> <name pos:start="301:16" pos:end="301:34">ARMFault_Permission</name></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:18"><expr pos:start="303:5" pos:end="303:17"><name pos:start="303:5" pos:end="303:13"><name pos:start="303:5" pos:end="303:6">fi</name><operator pos:start="303:7" pos:end="303:8">-&gt;</operator><name pos:start="303:9" pos:end="303:13">level</name></name> <operator pos:start="303:15" pos:end="303:15">=</operator> <literal type="number" pos:start="303:17" pos:end="303:17">1</literal></expr>;</expr_stmt>

    <return pos:start="305:5" pos:end="305:41">return <expr pos:start="305:12" pos:end="305:40"><operator pos:start="305:12" pos:end="305:12">!</operator><operator pos:start="305:13" pos:end="305:13">(</operator><operator pos:start="305:14" pos:end="305:14">*</operator><name pos:start="305:15" pos:end="305:18">prot</name> <operator pos:start="305:20" pos:end="305:20">&amp;</operator> <operator pos:start="305:22" pos:end="305:22">(</operator><literal type="number" pos:start="305:23" pos:end="305:23">1</literal> <operator pos:start="305:25" pos:end="305:26">&lt;&lt;</operator> <name pos:start="305:28" pos:end="305:38">access_type</name><operator pos:start="305:39" pos:end="305:39">)</operator><operator pos:start="305:40" pos:end="305:40">)</operator></expr>;</return></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></function>
</unit>
