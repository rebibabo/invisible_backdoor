<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4582.c" pos:tabs="8"><function pos:start="1:1" pos:end="196:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">read_header</name><parameter_list pos:start="1:23" pos:end="1:41">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">ShortenContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="196:13">{<block_content pos:start="5:5" pos:end="196:13">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">maxnlpc</name> <init pos:start="7:17" pos:end="7:19">= <expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="9:5" pos:end="9:27">/* shorten signature */</comment>

    <if_stmt pos:start="11:5" pos:end="196:13"><if pos:start="11:5" pos:end="196:13">if <condition pos:start="11:8" pos:end="11:53">(<expr pos:start="11:9" pos:end="11:52"><call pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:21">get_bits_long</name><argument_list pos:start="11:22" pos:end="11:33">(<argument pos:start="11:23" pos:end="11:28"><expr pos:start="11:23" pos:end="11:28"><operator pos:start="11:23" pos:end="11:23">&amp;</operator><name pos:start="11:24" pos:end="11:28"><name pos:start="11:24" pos:end="11:24">s</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:28">gb</name></name></expr></argument>, <argument pos:start="11:31" pos:end="11:32"><expr pos:start="11:31" pos:end="11:32"><literal type="number" pos:start="11:31" pos:end="11:32">32</literal></expr></argument>)</argument_list></call> <operator pos:start="11:35" pos:end="11:36">!=</operator> <call pos:start="11:38" pos:end="11:52"><name pos:start="11:38" pos:end="11:44">AV_RB32</name><argument_list pos:start="11:45" pos:end="11:52">(<argument pos:start="11:46" pos:end="11:51"><expr pos:start="11:46" pos:end="11:51"><literal type="string" pos:start="11:46" pos:end="11:51">"ajkg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:55" pos:end="196:13">{<block_content pos:start="13:9" pos:end="196:13">

        <expr_stmt pos:start="13:9" pos:end="13:73"><expr pos:start="13:9" pos:end="13:72"><call pos:start="13:9" pos:end="13:72"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:72">(<argument pos:start="13:16" pos:end="13:23"><expr pos:start="13:16" pos:end="13:23"><name pos:start="13:16" pos:end="13:23"><name pos:start="13:16" pos:end="13:16">s</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:23">avctx</name></name></expr></argument>, <argument pos:start="13:26" pos:end="13:37"><expr pos:start="13:26" pos:end="13:37"><name pos:start="13:26" pos:end="13:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:40" pos:end="13:71"><expr pos:start="13:40" pos:end="13:71"><literal type="string" pos:start="13:40" pos:end="13:71">"missing shorten magic 'ajkg'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:17">lpcqoffset</name></name>     <operator pos:start="19:23" pos:end="19:23">=</operator> <literal type="number" pos:start="19:25" pos:end="19:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:16">blocksize</name></name>      <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:42">DEFAULT_BLOCK_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:27"><expr pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:12">nmean</name></name>          <operator pos:start="23:23" pos:end="23:23">=</operator> <operator pos:start="23:25" pos:end="23:25">-</operator><literal type="number" pos:start="23:26" pos:end="23:26">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:44"><expr pos:start="25:5" pos:end="25:43"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:14">version</name></name>        <operator pos:start="25:23" pos:end="25:23">=</operator> <call pos:start="25:25" pos:end="25:43"><name pos:start="25:25" pos:end="25:32">get_bits</name><argument_list pos:start="25:33" pos:end="25:43">(<argument pos:start="25:34" pos:end="25:39"><expr pos:start="25:34" pos:end="25:39"><operator pos:start="25:34" pos:end="25:34">&amp;</operator><name pos:start="25:35" pos:end="25:39"><name pos:start="25:35" pos:end="25:35">s</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:39">gb</name></name></expr></argument>, <argument pos:start="25:42" pos:end="25:42"><expr pos:start="25:42" pos:end="25:42"><literal type="number" pos:start="25:42" pos:end="25:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:21">internal_ftype</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <call pos:start="27:25" pos:end="27:45"><name pos:start="27:25" pos:end="27:32">get_uint</name><argument_list pos:start="27:33" pos:end="27:45">(<argument pos:start="27:34" pos:end="27:34"><expr pos:start="27:34" pos:end="27:34"><name pos:start="27:34" pos:end="27:34">s</name></expr></argument>, <argument pos:start="27:37" pos:end="27:44"><expr pos:start="27:37" pos:end="27:44"><name pos:start="27:37" pos:end="27:44">TYPESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:15">channels</name></name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:39"><name pos:start="31:19" pos:end="31:26">get_uint</name><argument_list pos:start="31:27" pos:end="31:39">(<argument pos:start="31:28" pos:end="31:28"><expr pos:start="31:28" pos:end="31:28"><name pos:start="31:28" pos:end="31:28">s</name></expr></argument>, <argument pos:start="31:31" pos:end="31:38"><expr pos:start="31:31" pos:end="31:38"><name pos:start="31:31" pos:end="31:38">CHANSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="196:13"><if pos:start="33:5" pos:end="196:13">if <condition pos:start="33:8" pos:end="33:21">(<expr pos:start="33:9" pos:end="33:20"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:20"><name pos:start="33:10" pos:end="33:10">s</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:20">channels</name></name></expr>)</condition> <block pos:start="33:23" pos:end="196:13">{<block_content pos:start="35:9" pos:end="196:13">

        <expr_stmt pos:start="35:9" pos:end="35:65"><expr pos:start="35:9" pos:end="35:64"><call pos:start="35:9" pos:end="35:64"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:64">(<argument pos:start="35:16" pos:end="35:23"><expr pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:16">s</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:23">avctx</name></name></expr></argument>, <argument pos:start="35:26" pos:end="35:37"><expr pos:start="35:26" pos:end="35:37"><name pos:start="35:26" pos:end="35:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:40" pos:end="35:63"><expr pos:start="35:40" pos:end="35:63"><literal type="string" pos:start="35:40" pos:end="35:63">"No channels reported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="196:13"><if pos:start="39:5" pos:end="196:13">if <condition pos:start="39:8" pos:end="39:35">(<expr pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:19">channels</name></name> <operator pos:start="39:21" pos:end="39:21">&gt;</operator> <name pos:start="39:23" pos:end="39:34">MAX_CHANNELS</name></expr>)</condition> <block pos:start="39:37" pos:end="196:13">{<block_content pos:start="41:9" pos:end="196:13">

        <expr_stmt pos:start="41:9" pos:end="41:79"><expr pos:start="41:9" pos:end="41:78"><call pos:start="41:9" pos:end="41:78"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:78">(<argument pos:start="41:16" pos:end="41:23"><expr pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:16">s</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">avctx</name></name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:40" pos:end="41:64"><expr pos:start="41:40" pos:end="41:64"><literal type="string" pos:start="41:40" pos:end="41:64">"too many channels: %d\n"</literal></expr></argument>, <argument pos:start="41:67" pos:end="41:77"><expr pos:start="41:67" pos:end="41:77"><name pos:start="41:67" pos:end="41:77"><name pos:start="41:67" pos:end="41:67">s</name><operator pos:start="41:68" pos:end="41:69">-&gt;</operator><name pos:start="41:70" pos:end="41:77">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:24"><expr pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:19">channels</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:22"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:12">avctx</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:22">channels</name></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:36"><name pos:start="47:26" pos:end="47:26">s</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:36">channels</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:38">/* get blocksize if version &gt; 0 */</comment>

    <if_stmt pos:start="53:5" pos:end="196:13"><if pos:start="53:5" pos:end="196:13">if <condition pos:start="53:8" pos:end="53:23">(<expr pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:18">version</name></name> <operator pos:start="53:20" pos:end="53:20">&gt;</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>)</condition> <block pos:start="53:25" pos:end="196:13">{<block_content pos:start="55:9" pos:end="196:13">

        <decl_stmt pos:start="55:9" pos:end="55:23"><decl pos:start="55:9" pos:end="55:22"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:22">skip_bytes</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:27"><decl pos:start="57:9" pos:end="57:26"><type pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:16">unsigned</name></type> <name pos:start="57:18" pos:end="57:26">blocksize</name></decl>;</decl_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:61"><expr pos:start="61:9" pos:end="61:60"><name pos:start="61:9" pos:end="61:17">blocksize</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <call pos:start="61:21" pos:end="61:60"><name pos:start="61:21" pos:end="61:28">get_uint</name><argument_list pos:start="61:29" pos:end="61:60">(<argument pos:start="61:30" pos:end="61:30"><expr pos:start="61:30" pos:end="61:30"><name pos:start="61:30" pos:end="61:30">s</name></expr></argument>, <argument pos:start="61:33" pos:end="61:59"><expr pos:start="61:33" pos:end="61:59"><call pos:start="61:33" pos:end="61:59"><name pos:start="61:33" pos:end="61:39">av_log2</name><argument_list pos:start="61:40" pos:end="61:59">(<argument pos:start="61:41" pos:end="61:58"><expr pos:start="61:41" pos:end="61:58"><name pos:start="61:41" pos:end="61:58">DEFAULT_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="196:13"><if pos:start="63:9" pos:end="196:13">if <condition pos:start="63:12" pos:end="63:52">(<expr pos:start="63:13" pos:end="63:51"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:22">blocksize</name> <operator pos:start="63:24" pos:end="63:25">||</operator> <name pos:start="63:27" pos:end="63:35">blocksize</name> <operator pos:start="63:37" pos:end="63:37">&gt;</operator> <name pos:start="63:39" pos:end="63:51">MAX_BLOCKSIZE</name></expr>)</condition> <block pos:start="63:54" pos:end="196:13">{<block_content pos:start="65:13" pos:end="196:13">

            <expr_stmt pos:start="65:13" pos:end="69:30"><expr pos:start="65:13" pos:end="69:29"><call pos:start="65:13" pos:end="69:29"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="69:29">(<argument pos:start="65:20" pos:end="65:27"><expr pos:start="65:20" pos:end="65:27"><name pos:start="65:20" pos:end="65:27"><name pos:start="65:20" pos:end="65:20">s</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:27">avctx</name></name></expr></argument>, <argument pos:start="65:30" pos:end="65:41"><expr pos:start="65:30" pos:end="65:41"><name pos:start="65:30" pos:end="65:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:60"><expr pos:start="67:20" pos:end="67:60"><literal type="string" pos:start="67:20" pos:end="67:60">"invalid or unsupported block size: %d\n"</literal></expr></argument>,

                   <argument pos:start="69:20" pos:end="69:28"><expr pos:start="69:20" pos:end="69:28"><name pos:start="69:20" pos:end="69:28">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:35">return <expr pos:start="71:20" pos:end="71:34"><call pos:start="71:20" pos:end="71:34"><name pos:start="71:20" pos:end="71:26">AVERROR</name><argument_list pos:start="71:27" pos:end="71:34">(<argument pos:start="71:28" pos:end="71:33"><expr pos:start="71:28" pos:end="71:33"><name pos:start="71:28" pos:end="71:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>


        <expr_stmt pos:start="74:9" pos:end="74:33"><expr pos:start="74:9" pos:end="74:32"><name pos:start="74:9" pos:end="74:20"><name pos:start="74:9" pos:end="74:9">s</name><operator pos:start="74:10" pos:end="74:11">-&gt;</operator><name pos:start="74:12" pos:end="74:20">blocksize</name></name> <operator pos:start="74:22" pos:end="74:22">=</operator> <name pos:start="74:24" pos:end="74:32">blocksize</name></expr>;</expr_stmt>



        <expr_stmt pos:start="78:9" pos:end="78:41"><expr pos:start="78:9" pos:end="78:40"><name pos:start="78:9" pos:end="78:15">maxnlpc</name>  <operator pos:start="78:18" pos:end="78:18">=</operator> <call pos:start="78:20" pos:end="78:40"><name pos:start="78:20" pos:end="78:27">get_uint</name><argument_list pos:start="78:28" pos:end="78:40">(<argument pos:start="78:29" pos:end="78:29"><expr pos:start="78:29" pos:end="78:29"><name pos:start="78:29" pos:end="78:29">s</name></expr></argument>, <argument pos:start="78:32" pos:end="78:39"><expr pos:start="78:32" pos:end="78:39"><name pos:start="78:32" pos:end="78:39">LPCQSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <expr_stmt pos:start="84:9" pos:end="84:34"><expr pos:start="84:9" pos:end="84:33"><name pos:start="84:9" pos:end="84:16"><name pos:start="84:9" pos:end="84:9">s</name><operator pos:start="84:10" pos:end="84:11">-&gt;</operator><name pos:start="84:12" pos:end="84:16">nmean</name></name> <operator pos:start="84:18" pos:end="84:18">=</operator> <call pos:start="84:20" pos:end="84:33"><name pos:start="84:20" pos:end="84:27">get_uint</name><argument_list pos:start="84:28" pos:end="84:33">(<argument pos:start="84:29" pos:end="84:29"><expr pos:start="84:29" pos:end="84:29"><name pos:start="84:29" pos:end="84:29">s</name></expr></argument>, <argument pos:start="84:32" pos:end="84:32"><expr pos:start="84:32" pos:end="84:32"><literal type="number" pos:start="84:32" pos:end="84:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="88:9" pos:end="88:44"><expr pos:start="88:9" pos:end="88:43"><name pos:start="88:9" pos:end="88:18">skip_bytes</name> <operator pos:start="88:20" pos:end="88:20">=</operator> <call pos:start="88:22" pos:end="88:43"><name pos:start="88:22" pos:end="88:29">get_uint</name><argument_list pos:start="88:30" pos:end="88:43">(<argument pos:start="88:31" pos:end="88:31"><expr pos:start="88:31" pos:end="88:31"><name pos:start="88:31" pos:end="88:31">s</name></expr></argument>, <argument pos:start="88:34" pos:end="88:42"><expr pos:start="88:34" pos:end="88:42"><name pos:start="88:34" pos:end="88:42">NSKIPSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="90:9" pos:end="196:13"><if pos:start="90:9" pos:end="196:13">if <condition pos:start="90:12" pos:end="90:59">(<expr pos:start="90:13" pos:end="90:58"><operator pos:start="90:13" pos:end="90:13">(</operator><name pos:start="90:14" pos:end="90:21">unsigned</name><operator pos:start="90:22" pos:end="90:22">)</operator><name pos:start="90:23" pos:end="90:32">skip_bytes</name> <operator pos:start="90:34" pos:end="90:34">&gt;</operator> <call pos:start="90:36" pos:end="90:56"><name pos:start="90:36" pos:end="90:48">get_bits_left</name><argument_list pos:start="90:49" pos:end="90:56">(<argument pos:start="90:50" pos:end="90:55"><expr pos:start="90:50" pos:end="90:55"><operator pos:start="90:50" pos:end="90:50">&amp;</operator><name pos:start="90:51" pos:end="90:55"><name pos:start="90:51" pos:end="90:51">s</name><operator pos:start="90:52" pos:end="90:53">-&gt;</operator><name pos:start="90:54" pos:end="90:55">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="90:57" pos:end="90:57">/</operator><literal type="number" pos:start="90:58" pos:end="90:58">8</literal></expr>)</condition> <block pos:start="90:61" pos:end="196:13">{<block_content pos:start="92:13" pos:end="196:13">

            <expr_stmt pos:start="92:13" pos:end="92:83"><expr pos:start="92:13" pos:end="92:82"><call pos:start="92:13" pos:end="92:82"><name pos:start="92:13" pos:end="92:18">av_log</name><argument_list pos:start="92:19" pos:end="92:82">(<argument pos:start="92:20" pos:end="92:27"><expr pos:start="92:20" pos:end="92:27"><name pos:start="92:20" pos:end="92:27"><name pos:start="92:20" pos:end="92:20">s</name><operator pos:start="92:21" pos:end="92:22">-&gt;</operator><name pos:start="92:23" pos:end="92:27">avctx</name></name></expr></argument>, <argument pos:start="92:30" pos:end="92:41"><expr pos:start="92:30" pos:end="92:41"><name pos:start="92:30" pos:end="92:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="92:44" pos:end="92:69"><expr pos:start="92:44" pos:end="92:69"><literal type="string" pos:start="92:44" pos:end="92:69">"invalid skip_bytes: %d\n"</literal></expr></argument>, <argument pos:start="92:72" pos:end="92:81"><expr pos:start="92:72" pos:end="92:81"><name pos:start="92:72" pos:end="92:81">skip_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <for pos:start="98:9" pos:end="100:33">for <control pos:start="98:13" pos:end="98:40">(<init pos:start="98:14" pos:end="98:19"><expr pos:start="98:14" pos:end="98:18"><name pos:start="98:14" pos:end="98:14">i</name> <operator pos:start="98:16" pos:end="98:16">=</operator> <literal type="number" pos:start="98:18" pos:end="98:18">0</literal></expr>;</init> <condition pos:start="98:21" pos:end="98:35"><expr pos:start="98:21" pos:end="98:34"><name pos:start="98:21" pos:end="98:21">i</name> <operator pos:start="98:23" pos:end="98:23">&lt;</operator> <name pos:start="98:25" pos:end="98:34">skip_bytes</name></expr>;</condition> <incr pos:start="98:37" pos:end="98:39"><expr pos:start="98:37" pos:end="98:39"><name pos:start="98:37" pos:end="98:37">i</name><operator pos:start="98:38" pos:end="98:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="100:13" pos:end="100:33"><block_content pos:start="100:13" pos:end="100:33">

            <expr_stmt pos:start="100:13" pos:end="100:33"><expr pos:start="100:13" pos:end="100:32"><call pos:start="100:13" pos:end="100:32"><name pos:start="100:13" pos:end="100:21">skip_bits</name><argument_list pos:start="100:22" pos:end="100:32">(<argument pos:start="100:23" pos:end="100:28"><expr pos:start="100:23" pos:end="100:28"><operator pos:start="100:23" pos:end="100:23">&amp;</operator><name pos:start="100:24" pos:end="100:28"><name pos:start="100:24" pos:end="100:24">s</name><operator pos:start="100:25" pos:end="100:26">-&gt;</operator><name pos:start="100:27" pos:end="100:28">gb</name></name></expr></argument>, <argument pos:start="100:31" pos:end="100:31"><expr pos:start="100:31" pos:end="100:31"><literal type="number" pos:start="100:31" pos:end="100:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>


    <expr_stmt pos:start="103:5" pos:end="103:37"><expr pos:start="103:5" pos:end="103:36"><name pos:start="103:5" pos:end="103:12"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:12">nwrap</name></name> <operator pos:start="103:14" pos:end="103:14">=</operator> <call pos:start="103:16" pos:end="103:36"><name pos:start="103:16" pos:end="103:20">FFMAX</name><argument_list pos:start="103:21" pos:end="103:36">(<argument pos:start="103:22" pos:end="103:26"><expr pos:start="103:22" pos:end="103:26"><name pos:start="103:22" pos:end="103:26">NWRAP</name></expr></argument>, <argument pos:start="103:29" pos:end="103:35"><expr pos:start="103:29" pos:end="103:35"><name pos:start="103:29" pos:end="103:35">maxnlpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="109:19"><if pos:start="107:5" pos:end="109:19">if <condition pos:start="107:8" pos:end="107:40">(<expr pos:start="107:9" pos:end="107:39"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:12">ret</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:34"><name pos:start="107:16" pos:end="107:31">allocate_buffers</name><argument_list pos:start="107:32" pos:end="107:34">(<argument pos:start="107:33" pos:end="107:33"><expr pos:start="107:33" pos:end="107:33"><name pos:start="107:33" pos:end="107:33">s</name></expr></argument>)</argument_list></call><operator pos:start="107:35" pos:end="107:35">)</operator> <operator pos:start="107:37" pos:end="107:37">&lt;</operator> <literal type="number" pos:start="107:39" pos:end="107:39">0</literal></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:19"><block_content pos:start="109:9" pos:end="109:19">

        <return pos:start="109:9" pos:end="109:19">return <expr pos:start="109:16" pos:end="109:18"><name pos:start="109:16" pos:end="109:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="115:19"><if pos:start="113:5" pos:end="115:19">if <condition pos:start="113:8" pos:end="113:35">(<expr pos:start="113:9" pos:end="113:34"><operator pos:start="113:9" pos:end="113:9">(</operator><name pos:start="113:10" pos:end="113:12">ret</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:29"><name pos:start="113:16" pos:end="113:26">init_offset</name><argument_list pos:start="113:27" pos:end="113:29">(<argument pos:start="113:28" pos:end="113:28"><expr pos:start="113:28" pos:end="113:28"><name pos:start="113:28" pos:end="113:28">s</name></expr></argument>)</argument_list></call><operator pos:start="113:30" pos:end="113:30">)</operator> <operator pos:start="113:32" pos:end="113:32">&lt;</operator> <literal type="number" pos:start="113:34" pos:end="113:34">0</literal></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:19"><block_content pos:start="115:9" pos:end="115:19">

        <return pos:start="115:9" pos:end="115:19">return <expr pos:start="115:16" pos:end="115:18"><name pos:start="115:16" pos:end="115:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="121:37"><if pos:start="119:5" pos:end="121:37">if <condition pos:start="119:8" pos:end="119:23">(<expr pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:18"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:18">version</name></name> <operator pos:start="119:20" pos:end="119:20">&gt;</operator> <literal type="number" pos:start="119:22" pos:end="119:22">1</literal></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:37"><block_content pos:start="121:9" pos:end="121:37">

        <expr_stmt pos:start="121:9" pos:end="121:37"><expr pos:start="121:9" pos:end="121:36"><name pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:21">lpcqoffset</name></name> <operator pos:start="121:23" pos:end="121:23">=</operator> <name pos:start="121:25" pos:end="121:36">V2LPCQOFFSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="127:17"><if pos:start="125:5" pos:end="127:17">if <condition pos:start="125:8" pos:end="125:37">(<expr pos:start="125:9" pos:end="125:36"><name pos:start="125:9" pos:end="125:32"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:16">avctx</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:32">extradata_size</name></name> <operator pos:start="125:34" pos:end="125:34">&gt;</operator> <literal type="number" pos:start="125:36" pos:end="125:36">0</literal></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:17"><block_content pos:start="127:9" pos:end="127:17">

        <goto pos:start="127:9" pos:end="127:17">goto <name pos:start="127:14" pos:end="127:16">end</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="131:5" pos:end="196:13"><if pos:start="131:5" pos:end="196:13">if <condition pos:start="131:8" pos:end="131:61">(<expr pos:start="131:9" pos:end="131:60"><call pos:start="131:9" pos:end="131:45"><name pos:start="131:9" pos:end="131:29">get_ur_golomb_shorten</name><argument_list pos:start="131:30" pos:end="131:45">(<argument pos:start="131:31" pos:end="131:36"><expr pos:start="131:31" pos:end="131:36"><operator pos:start="131:31" pos:end="131:31">&amp;</operator><name pos:start="131:32" pos:end="131:36"><name pos:start="131:32" pos:end="131:32">s</name><operator pos:start="131:33" pos:end="131:34">-&gt;</operator><name pos:start="131:35" pos:end="131:36">gb</name></name></expr></argument>, <argument pos:start="131:39" pos:end="131:44"><expr pos:start="131:39" pos:end="131:44"><name pos:start="131:39" pos:end="131:44">FNSIZE</name></expr></argument>)</argument_list></call> <operator pos:start="131:47" pos:end="131:48">!=</operator> <name pos:start="131:50" pos:end="131:60">FN_VERBATIM</name></expr>)</condition> <block pos:start="131:63" pos:end="196:13">{<block_content pos:start="133:9" pos:end="196:13">

        <expr_stmt pos:start="133:9" pos:end="135:68"><expr pos:start="133:9" pos:end="135:67"><call pos:start="133:9" pos:end="135:67"><name pos:start="133:9" pos:end="133:14">av_log</name><argument_list pos:start="133:15" pos:end="135:67">(<argument pos:start="133:16" pos:end="133:23"><expr pos:start="133:16" pos:end="133:23"><name pos:start="133:16" pos:end="133:23"><name pos:start="133:16" pos:end="133:16">s</name><operator pos:start="133:17" pos:end="133:18">-&gt;</operator><name pos:start="133:19" pos:end="133:23">avctx</name></name></expr></argument>, <argument pos:start="133:26" pos:end="133:37"><expr pos:start="133:26" pos:end="133:37"><name pos:start="133:26" pos:end="133:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="135:16" pos:end="135:66"><expr pos:start="135:16" pos:end="135:66"><literal type="string" pos:start="135:16" pos:end="135:66">"missing verbatim section at beginning of stream\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="141:5" pos:end="141:73"><expr pos:start="141:5" pos:end="141:72"><name pos:start="141:5" pos:end="141:18"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:18">header_size</name></name> <operator pos:start="141:20" pos:end="141:20">=</operator> <call pos:start="141:22" pos:end="141:72"><name pos:start="141:22" pos:end="141:42">get_ur_golomb_shorten</name><argument_list pos:start="141:43" pos:end="141:72">(<argument pos:start="141:44" pos:end="141:49"><expr pos:start="141:44" pos:end="141:49"><operator pos:start="141:44" pos:end="141:44">&amp;</operator><name pos:start="141:45" pos:end="141:49"><name pos:start="141:45" pos:end="141:45">s</name><operator pos:start="141:46" pos:end="141:47">-&gt;</operator><name pos:start="141:48" pos:end="141:49">gb</name></name></expr></argument>, <argument pos:start="141:52" pos:end="141:71"><expr pos:start="141:52" pos:end="141:71"><name pos:start="141:52" pos:end="141:71">VERBATIM_CKSIZE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="196:13"><if pos:start="143:5" pos:end="196:13">if <condition pos:start="143:8" pos:end="145:47">(<expr pos:start="143:9" pos:end="145:46"><name pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:22">header_size</name></name> <operator pos:start="143:24" pos:end="143:25">&gt;=</operator> <name pos:start="143:27" pos:end="143:41">OUT_BUFFER_SIZE</name> <operator pos:start="143:43" pos:end="143:44">||</operator>

        <name pos:start="145:9" pos:end="145:22"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:22">header_size</name></name> <operator pos:start="145:24" pos:end="145:24">&lt;</operator> <name pos:start="145:26" pos:end="145:46">CANONICAL_HEADER_SIZE</name></expr>)</condition> <block pos:start="145:49" pos:end="196:13">{<block_content pos:start="147:9" pos:end="196:13">

        <expr_stmt pos:start="147:9" pos:end="149:31"><expr pos:start="147:9" pos:end="149:30"><call pos:start="147:9" pos:end="149:30"><name pos:start="147:9" pos:end="147:14">av_log</name><argument_list pos:start="147:15" pos:end="149:30">(<argument pos:start="147:16" pos:end="147:23"><expr pos:start="147:16" pos:end="147:23"><name pos:start="147:16" pos:end="147:23"><name pos:start="147:16" pos:end="147:16">s</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:23">avctx</name></name></expr></argument>, <argument pos:start="147:26" pos:end="147:37"><expr pos:start="147:26" pos:end="147:37"><name pos:start="147:26" pos:end="147:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:40" pos:end="147:67"><expr pos:start="147:40" pos:end="147:67"><literal type="string" pos:start="147:40" pos:end="147:67">"header is wrong size: %d\n"</literal></expr></argument>,

               <argument pos:start="149:16" pos:end="149:29"><expr pos:start="149:16" pos:end="149:29"><name pos:start="149:16" pos:end="149:29"><name pos:start="149:16" pos:end="149:16">s</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:29">header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <for pos:start="155:5" pos:end="157:79">for <control pos:start="155:9" pos:end="155:40">(<init pos:start="155:10" pos:end="155:15"><expr pos:start="155:10" pos:end="155:14"><name pos:start="155:10" pos:end="155:10">i</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <literal type="number" pos:start="155:14" pos:end="155:14">0</literal></expr>;</init> <condition pos:start="155:17" pos:end="155:35"><expr pos:start="155:17" pos:end="155:34"><name pos:start="155:17" pos:end="155:17">i</name> <operator pos:start="155:19" pos:end="155:19">&lt;</operator> <name pos:start="155:21" pos:end="155:34"><name pos:start="155:21" pos:end="155:21">s</name><operator pos:start="155:22" pos:end="155:23">-&gt;</operator><name pos:start="155:24" pos:end="155:34">header_size</name></name></expr>;</condition> <incr pos:start="155:37" pos:end="155:39"><expr pos:start="155:37" pos:end="155:39"><name pos:start="155:37" pos:end="155:37">i</name><operator pos:start="155:38" pos:end="155:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="157:9" pos:end="157:79"><block_content pos:start="157:9" pos:end="157:79">

        <expr_stmt pos:start="157:9" pos:end="157:79"><expr pos:start="157:9" pos:end="157:78"><name pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:17">header</name><index pos:start="157:18" pos:end="157:20">[<expr pos:start="157:19" pos:end="157:19"><name pos:start="157:19" pos:end="157:19">i</name></expr>]</index></name> <operator pos:start="157:22" pos:end="157:22">=</operator> <operator pos:start="157:24" pos:end="157:24">(</operator><name pos:start="157:25" pos:end="157:28">char</name><operator pos:start="157:29" pos:end="157:29">)</operator><call pos:start="157:30" pos:end="157:78"><name pos:start="157:30" pos:end="157:50">get_ur_golomb_shorten</name><argument_list pos:start="157:51" pos:end="157:78">(<argument pos:start="157:52" pos:end="157:57"><expr pos:start="157:52" pos:end="157:57"><operator pos:start="157:52" pos:end="157:52">&amp;</operator><name pos:start="157:53" pos:end="157:57"><name pos:start="157:53" pos:end="157:53">s</name><operator pos:start="157:54" pos:end="157:55">-&gt;</operator><name pos:start="157:56" pos:end="157:57">gb</name></name></expr></argument>, <argument pos:start="157:60" pos:end="157:77"><expr pos:start="157:60" pos:end="157:77"><name pos:start="157:60" pos:end="157:77">VERBATIM_BYTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="161:5" pos:end="196:13"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:53">(<expr pos:start="161:9" pos:end="161:52"><call pos:start="161:9" pos:end="161:26"><name pos:start="161:9" pos:end="161:15">AV_RL32</name><argument_list pos:start="161:16" pos:end="161:26">(<argument pos:start="161:17" pos:end="161:25"><expr pos:start="161:17" pos:end="161:25"><name pos:start="161:17" pos:end="161:25"><name pos:start="161:17" pos:end="161:17">s</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:25">header</name></name></expr></argument>)</argument_list></call> <operator pos:start="161:28" pos:end="161:29">==</operator> <call pos:start="161:31" pos:end="161:52"><name pos:start="161:31" pos:end="161:35">MKTAG</name><argument_list pos:start="161:36" pos:end="161:52">(<argument pos:start="161:37" pos:end="161:39"><expr pos:start="161:37" pos:end="161:39"><literal type="char" pos:start="161:37" pos:end="161:39">'R'</literal></expr></argument>,<argument pos:start="161:41" pos:end="161:43"><expr pos:start="161:41" pos:end="161:43"><literal type="char" pos:start="161:41" pos:end="161:43">'I'</literal></expr></argument>,<argument pos:start="161:45" pos:end="161:47"><expr pos:start="161:45" pos:end="161:47"><literal type="char" pos:start="161:45" pos:end="161:47">'F'</literal></expr></argument>,<argument pos:start="161:49" pos:end="161:51"><expr pos:start="161:49" pos:end="161:51"><literal type="char" pos:start="161:49" pos:end="161:51">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:55" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:23">

        <if_stmt pos:start="163:9" pos:end="165:23"><if pos:start="163:9" pos:end="165:23">if <condition pos:start="163:12" pos:end="163:80">(<expr pos:start="163:13" pos:end="163:79"><operator pos:start="163:13" pos:end="163:13">(</operator><name pos:start="163:14" pos:end="163:16">ret</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:74"><name pos:start="163:20" pos:end="163:37">decode_wave_header</name><argument_list pos:start="163:38" pos:end="163:74">(<argument pos:start="163:39" pos:end="163:46"><expr pos:start="163:39" pos:end="163:46"><name pos:start="163:39" pos:end="163:46"><name pos:start="163:39" pos:end="163:39">s</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:46">avctx</name></name></expr></argument>, <argument pos:start="163:49" pos:end="163:57"><expr pos:start="163:49" pos:end="163:57"><name pos:start="163:49" pos:end="163:57"><name pos:start="163:49" pos:end="163:49">s</name><operator pos:start="163:50" pos:end="163:51">-&gt;</operator><name pos:start="163:52" pos:end="163:57">header</name></name></expr></argument>, <argument pos:start="163:60" pos:end="163:73"><expr pos:start="163:60" pos:end="163:73"><name pos:start="163:60" pos:end="163:73"><name pos:start="163:60" pos:end="163:60">s</name><operator pos:start="163:61" pos:end="163:62">-&gt;</operator><name pos:start="163:63" pos:end="163:73">header_size</name></name></expr></argument>)</argument_list></call><operator pos:start="163:75" pos:end="163:75">)</operator> <operator pos:start="163:77" pos:end="163:77">&lt;</operator> <literal type="number" pos:start="163:79" pos:end="163:79">0</literal></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:23"><block_content pos:start="165:13" pos:end="165:23">

            <return pos:start="165:13" pos:end="165:23">return <expr pos:start="165:20" pos:end="165:22"><name pos:start="165:20" pos:end="165:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="167:7" pos:end="173:5">else if <condition pos:start="167:15" pos:end="167:60">(<expr pos:start="167:16" pos:end="167:59"><call pos:start="167:16" pos:end="167:33"><name pos:start="167:16" pos:end="167:22">AV_RL32</name><argument_list pos:start="167:23" pos:end="167:33">(<argument pos:start="167:24" pos:end="167:32"><expr pos:start="167:24" pos:end="167:32"><name pos:start="167:24" pos:end="167:32"><name pos:start="167:24" pos:end="167:24">s</name><operator pos:start="167:25" pos:end="167:26">-&gt;</operator><name pos:start="167:27" pos:end="167:32">header</name></name></expr></argument>)</argument_list></call> <operator pos:start="167:35" pos:end="167:36">==</operator> <call pos:start="167:38" pos:end="167:59"><name pos:start="167:38" pos:end="167:42">MKTAG</name><argument_list pos:start="167:43" pos:end="167:59">(<argument pos:start="167:44" pos:end="167:46"><expr pos:start="167:44" pos:end="167:46"><literal type="char" pos:start="167:44" pos:end="167:46">'F'</literal></expr></argument>,<argument pos:start="167:48" pos:end="167:50"><expr pos:start="167:48" pos:end="167:50"><literal type="char" pos:start="167:48" pos:end="167:50">'O'</literal></expr></argument>,<argument pos:start="167:52" pos:end="167:54"><expr pos:start="167:52" pos:end="167:54"><literal type="char" pos:start="167:52" pos:end="167:54">'R'</literal></expr></argument>,<argument pos:start="167:56" pos:end="167:58"><expr pos:start="167:56" pos:end="167:58"><literal type="char" pos:start="167:56" pos:end="167:58">'M'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:62" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:23">

        <if_stmt pos:start="169:9" pos:end="171:23"><if pos:start="169:9" pos:end="171:23">if <condition pos:start="169:12" pos:end="169:80">(<expr pos:start="169:13" pos:end="169:79"><operator pos:start="169:13" pos:end="169:13">(</operator><name pos:start="169:14" pos:end="169:16">ret</name> <operator pos:start="169:18" pos:end="169:18">=</operator> <call pos:start="169:20" pos:end="169:74"><name pos:start="169:20" pos:end="169:37">decode_aiff_header</name><argument_list pos:start="169:38" pos:end="169:74">(<argument pos:start="169:39" pos:end="169:46"><expr pos:start="169:39" pos:end="169:46"><name pos:start="169:39" pos:end="169:46"><name pos:start="169:39" pos:end="169:39">s</name><operator pos:start="169:40" pos:end="169:41">-&gt;</operator><name pos:start="169:42" pos:end="169:46">avctx</name></name></expr></argument>, <argument pos:start="169:49" pos:end="169:57"><expr pos:start="169:49" pos:end="169:57"><name pos:start="169:49" pos:end="169:57"><name pos:start="169:49" pos:end="169:49">s</name><operator pos:start="169:50" pos:end="169:51">-&gt;</operator><name pos:start="169:52" pos:end="169:57">header</name></name></expr></argument>, <argument pos:start="169:60" pos:end="169:73"><expr pos:start="169:60" pos:end="169:73"><name pos:start="169:60" pos:end="169:73"><name pos:start="169:60" pos:end="169:60">s</name><operator pos:start="169:61" pos:end="169:62">-&gt;</operator><name pos:start="169:63" pos:end="169:73">header_size</name></name></expr></argument>)</argument_list></call><operator pos:start="169:75" pos:end="169:75">)</operator> <operator pos:start="169:77" pos:end="169:77">&lt;</operator> <literal type="number" pos:start="169:79" pos:end="169:79">0</literal></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:23"><block_content pos:start="171:13" pos:end="171:23">

            <return pos:start="171:13" pos:end="171:23">return <expr pos:start="171:20" pos:end="171:22"><name pos:start="171:20" pos:end="171:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="173:7" pos:end="196:13">else <block pos:start="173:12" pos:end="196:13">{<block_content pos:start="175:9" pos:end="196:13">

        <expr_stmt pos:start="175:9" pos:end="177:66"><expr pos:start="175:9" pos:end="177:65"><call pos:start="175:9" pos:end="177:65"><name pos:start="175:9" pos:end="175:37">avpriv_report_missing_feature</name><argument_list pos:start="175:38" pos:end="177:65">(<argument pos:start="175:39" pos:end="175:46"><expr pos:start="175:39" pos:end="175:46"><name pos:start="175:39" pos:end="175:46"><name pos:start="175:39" pos:end="175:39">s</name><operator pos:start="175:40" pos:end="175:41">-&gt;</operator><name pos:start="175:42" pos:end="175:46">avctx</name></name></expr></argument>, <argument pos:start="175:49" pos:end="177:44"><expr pos:start="175:49" pos:end="177:44"><literal type="string" pos:start="175:49" pos:end="175:75">"unsupported bit packing %"</literal>

                                      <name pos:start="177:39" pos:end="177:44">PRIX32</name></expr></argument>, <argument pos:start="177:47" pos:end="177:64"><expr pos:start="177:47" pos:end="177:64"><call pos:start="177:47" pos:end="177:64"><name pos:start="177:47" pos:end="177:53">AV_RL32</name><argument_list pos:start="177:54" pos:end="177:64">(<argument pos:start="177:55" pos:end="177:63"><expr pos:start="177:55" pos:end="177:63"><name pos:start="177:55" pos:end="177:63"><name pos:start="177:55" pos:end="177:55">s</name><operator pos:start="177:56" pos:end="177:57">-&gt;</operator><name pos:start="177:58" pos:end="177:63">header</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:36">return <expr pos:start="179:16" pos:end="179:35"><name pos:start="179:16" pos:end="179:35">AVERROR_PATCHWELCOME</name></expr>;</return>




<label pos:start="184:1" pos:end="184:4"><name pos:start="184:1" pos:end="184:3">end</name>:</label>

    <expr_stmt pos:start="186:5" pos:end="186:20"><expr pos:start="186:5" pos:end="186:19"><name pos:start="186:5" pos:end="186:15"><name pos:start="186:5" pos:end="186:5">s</name><operator pos:start="186:6" pos:end="186:7">-&gt;</operator><name pos:start="186:8" pos:end="186:15">cur_chan</name></name> <operator pos:start="186:17" pos:end="186:17">=</operator> <literal type="number" pos:start="186:19" pos:end="186:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="188:5" pos:end="188:20"><expr pos:start="188:5" pos:end="188:19"><name pos:start="188:5" pos:end="188:15"><name pos:start="188:5" pos:end="188:5">s</name><operator pos:start="188:6" pos:end="188:7">-&gt;</operator><name pos:start="188:8" pos:end="188:15">bitshift</name></name> <operator pos:start="188:17" pos:end="188:17">=</operator> <literal type="number" pos:start="188:19" pos:end="188:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="192:5" pos:end="192:22"><expr pos:start="192:5" pos:end="192:21"><name pos:start="192:5" pos:end="192:17"><name pos:start="192:5" pos:end="192:5">s</name><operator pos:start="192:6" pos:end="192:7">-&gt;</operator><name pos:start="192:8" pos:end="192:17">got_header</name></name> <operator pos:start="192:19" pos:end="192:19">=</operator> <literal type="number" pos:start="192:21" pos:end="192:21">1</literal></expr>;</expr_stmt>



    <return pos:start="196:5" pos:end="196:13">return <expr pos:start="196:12" pos:end="196:12"><literal type="number" pos:start="196:12" pos:end="196:12">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
