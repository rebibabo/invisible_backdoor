<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/364.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:14"><name pos:start="1:1" pos:end="1:8">if_start</name><argument_list pos:start="1:9" pos:end="1:14">(<argument pos:start="1:10" pos:end="1:13">void</argument>)</argument_list></macro>
<block pos:start="2:1" pos:end="45:1">{<block_content pos:start="3:9" pos:end="44:22">
	<decl_stmt pos:start="3:9" pos:end="3:32"><decl pos:start="3:9" pos:end="3:24"><type pos:start="3:9" pos:end="3:21"><name pos:start="3:9" pos:end="3:19"><name pos:start="3:9" pos:end="3:14">struct</name> <name pos:start="3:16" pos:end="3:19">mbuf</name></name> <modifier pos:start="3:21" pos:end="3:21">*</modifier></type><name pos:start="3:22" pos:end="3:24">ifm</name></decl>, <decl pos:start="3:27" pos:end="3:31"><type ref="prev" pos:start="3:9" pos:end="3:21"><modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:31">ifqt</name></decl>;</decl_stmt>
	<expr_stmt pos:start="4:9" pos:end="4:31"><expr pos:start="4:9" pos:end="4:30"><call pos:start="4:9" pos:end="4:30"><name pos:start="4:9" pos:end="4:18">DEBUG_CALL</name><argument_list pos:start="4:19" pos:end="4:30">(<argument pos:start="4:20" pos:end="4:29"><expr pos:start="4:20" pos:end="4:29"><literal type="string" pos:start="4:20" pos:end="4:29">"if_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="5:9" pos:end="6:18"><if pos:start="5:9" pos:end="6:18">if <condition pos:start="5:12" pos:end="5:27">(<expr pos:start="5:13" pos:end="5:26"><name pos:start="5:13" pos:end="5:21">if_queued</name> <operator pos:start="5:23" pos:end="5:24">==</operator> <literal type="number" pos:start="5:26" pos:end="5:26">0</literal></expr>)</condition><block type="pseudo" pos:start="6:12" pos:end="6:18"><block_content pos:start="6:12" pos:end="6:18">
	   <return pos:start="6:12" pos:end="6:18">return;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="6:20" pos:end="6:38">/* Nothing to do */</comment>
 <label pos:start="7:2" pos:end="7:7"><name pos:start="7:2" pos:end="7:6">again</name>:</label>
        <comment type="block" pos:start="8:9" pos:end="8:43">/* check if we can really output */</comment>
        <if_stmt pos:start="9:9" pos:end="10:19"><if pos:start="9:9" pos:end="10:19">if <condition pos:start="9:12" pos:end="9:32">(<expr pos:start="9:13" pos:end="9:31"><operator pos:start="9:13" pos:end="9:13">!</operator><call pos:start="9:14" pos:end="9:31"><name pos:start="9:14" pos:end="9:29">slirp_can_output</name><argument_list pos:start="9:30" pos:end="9:31">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="10:13" pos:end="10:19"><block_content pos:start="10:13" pos:end="10:19">
            <return pos:start="10:13" pos:end="10:19">return;</return></block_content></block></if></if_stmt>
	<comment type="block" pos:start="11:9" pos:end="14:11">/*
	 * See which queue to get next packet from
	 * If there's something in the fastq, select it immediately
	 */</comment>
	<if_stmt pos:start="15:9" pos:end="25:9"><if pos:start="15:9" pos:end="17:9">if <condition pos:start="15:12" pos:end="15:43">(<expr pos:start="15:13" pos:end="15:42"><name pos:start="15:13" pos:end="15:29"><name pos:start="15:13" pos:end="15:20">if_fastq</name><operator pos:start="15:21" pos:end="15:21">.</operator><name pos:start="15:22" pos:end="15:29">ifq_next</name></name> <operator pos:start="15:31" pos:end="15:32">!=</operator> <operator pos:start="15:34" pos:end="15:34">&amp;</operator><name pos:start="15:35" pos:end="15:42">if_fastq</name></expr>)</condition> <block pos:start="15:45" pos:end="17:9">{<block_content pos:start="16:17" pos:end="16:40">
		<expr_stmt pos:start="16:17" pos:end="16:40"><expr pos:start="16:17" pos:end="16:39"><name pos:start="16:17" pos:end="16:19">ifm</name> <operator pos:start="16:21" pos:end="16:21">=</operator> <name pos:start="16:23" pos:end="16:39"><name pos:start="16:23" pos:end="16:30">if_fastq</name><operator pos:start="16:31" pos:end="16:31">.</operator><name pos:start="16:32" pos:end="16:39">ifq_next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if> <else pos:start="17:11" pos:end="25:9">else <block pos:start="17:16" pos:end="25:9">{<block_content pos:start="19:17" pos:end="24:39">
		<comment type="block" pos:start="18:17" pos:end="18:62">/* Nothing on fastq, see if next_m is valid */</comment>
		<if_stmt pos:start="19:17" pos:end="22:44"><if pos:start="19:17" pos:end="20:32">if <condition pos:start="19:20" pos:end="19:41">(<expr pos:start="19:21" pos:end="19:40"><name pos:start="19:21" pos:end="19:26">next_m</name> <operator pos:start="19:28" pos:end="19:29">!=</operator> <operator pos:start="19:31" pos:end="19:31">&amp;</operator><name pos:start="19:32" pos:end="19:40">if_batchq</name></expr>)</condition><block type="pseudo" pos:start="20:20" pos:end="20:32"><block_content pos:start="20:20" pos:end="20:32">
		   <expr_stmt pos:start="20:20" pos:end="20:32"><expr pos:start="20:20" pos:end="20:31"><name pos:start="20:20" pos:end="20:22">ifm</name> <operator pos:start="20:24" pos:end="20:24">=</operator> <name pos:start="20:26" pos:end="20:31">next_m</name></expr>;</expr_stmt></block_content></block></if>
		<else pos:start="21:17" pos:end="22:44">else<block type="pseudo" pos:start="22:20" pos:end="22:44"><block_content pos:start="22:20" pos:end="22:44">
		   <expr_stmt pos:start="22:20" pos:end="22:44"><expr pos:start="22:20" pos:end="22:43"><name pos:start="22:20" pos:end="22:22">ifm</name> <operator pos:start="22:24" pos:end="22:24">=</operator> <name pos:start="22:26" pos:end="22:43"><name pos:start="22:26" pos:end="22:34">if_batchq</name><operator pos:start="22:35" pos:end="22:35">.</operator><name pos:start="22:36" pos:end="22:43">ifq_next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<comment type="block" pos:start="23:17" pos:end="23:64">/* Set which packet to send on next iteration */</comment>
		<expr_stmt pos:start="24:17" pos:end="24:39"><expr pos:start="24:17" pos:end="24:38"><name pos:start="24:17" pos:end="24:22">next_m</name> <operator pos:start="24:24" pos:end="24:24">=</operator> <name pos:start="24:26" pos:end="24:38"><name pos:start="24:26" pos:end="24:28">ifm</name><operator pos:start="24:29" pos:end="24:30">-&gt;</operator><name pos:start="24:31" pos:end="24:38">ifq_next</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<comment type="block" pos:start="26:9" pos:end="26:38">/* Remove it from the queue */</comment>
	<expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:12">ifqt</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:28"><name pos:start="27:16" pos:end="27:18">ifm</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:28">ifq_prev</name></name></expr>;</expr_stmt>
	<expr_stmt pos:start="28:9" pos:end="28:20"><expr pos:start="28:9" pos:end="28:19"><call pos:start="28:9" pos:end="28:19"><name pos:start="28:9" pos:end="28:14">remque</name><argument_list pos:start="28:15" pos:end="28:19">(<argument pos:start="28:16" pos:end="28:18"><expr pos:start="28:16" pos:end="28:18"><name pos:start="28:16" pos:end="28:18">ifm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt pos:start="29:9" pos:end="29:20"><expr pos:start="29:9" pos:end="29:19"><operator pos:start="29:9" pos:end="29:10">--</operator><name pos:start="29:11" pos:end="29:19">if_queued</name></expr>;</expr_stmt>
	<comment type="block" pos:start="30:9" pos:end="30:71">/* If there are more packets for this session, re-queue them */</comment>
	<if_stmt pos:start="31:9" pos:end="34:9"><if pos:start="31:9" pos:end="34:9">if <condition pos:start="31:12" pos:end="31:56">(<expr pos:start="31:13" pos:end="31:55"><name pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:15">ifm</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:25">ifs_next</name></name> <operator pos:start="31:27" pos:end="31:28">!=</operator> <comment type="block" pos:start="31:30" pos:end="31:51">/* ifm-&gt;ifs_prev != */</comment> <name pos:start="31:53" pos:end="31:55">ifm</name></expr>)</condition> <block pos:start="31:58" pos:end="34:9">{<block_content pos:start="32:17" pos:end="33:32">
		<expr_stmt pos:start="32:17" pos:end="32:44"><expr pos:start="32:17" pos:end="32:43"><call pos:start="32:17" pos:end="32:43"><name pos:start="32:17" pos:end="32:22">insque</name><argument_list pos:start="32:23" pos:end="32:43">(<argument pos:start="32:24" pos:end="32:36"><expr pos:start="32:24" pos:end="32:36"><name pos:start="32:24" pos:end="32:36"><name pos:start="32:24" pos:end="32:26">ifm</name><operator pos:start="32:27" pos:end="32:28">-&gt;</operator><name pos:start="32:29" pos:end="32:36">ifs_next</name></name></expr></argument>, <argument pos:start="32:39" pos:end="32:42"><expr pos:start="32:39" pos:end="32:42"><name pos:start="32:39" pos:end="32:42">ifqt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt pos:start="33:17" pos:end="33:32"><expr pos:start="33:17" pos:end="33:31"><call pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:26">ifs_remque</name><argument_list pos:start="33:27" pos:end="33:31">(<argument pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><name pos:start="33:28" pos:end="33:30">ifm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block" pos:start="35:9" pos:end="35:30">/* Update so_queued */</comment>
	<if_stmt pos:start="36:9" pos:end="40:9"><if pos:start="36:9" pos:end="40:9">if <condition pos:start="36:12" pos:end="36:24">(<expr pos:start="36:13" pos:end="36:23"><name pos:start="36:13" pos:end="36:23"><name pos:start="36:13" pos:end="36:15">ifm</name><operator pos:start="36:16" pos:end="36:17">-&gt;</operator><name pos:start="36:18" pos:end="36:23">ifq_so</name></name></expr>)</condition> <block pos:start="36:26" pos:end="40:9">{<block_content pos:start="37:17" pos:end="39:47">
		<if_stmt pos:start="37:17" pos:end="39:47"><if pos:start="37:17" pos:end="39:47">if <condition pos:start="37:20" pos:end="37:50">(<expr pos:start="37:21" pos:end="37:49"><operator pos:start="37:21" pos:end="37:22">--</operator><name pos:start="37:23" pos:end="37:44"><name pos:start="37:23" pos:end="37:25">ifm</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:33">ifq_so</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:44">so_queued</name></name> <operator pos:start="37:46" pos:end="37:47">==</operator> <literal type="number" pos:start="37:49" pos:end="37:49">0</literal></expr>)</condition><block type="pseudo" pos:start="39:20" pos:end="39:47"><block_content pos:start="39:20" pos:end="39:47">
		   <comment type="block" pos:start="38:20" pos:end="38:65">/* If there's no more queued, reset nqueued */</comment>
		   <expr_stmt pos:start="39:20" pos:end="39:47"><expr pos:start="39:20" pos:end="39:46"><name pos:start="39:20" pos:end="39:42"><name pos:start="39:20" pos:end="39:22">ifm</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:30">ifq_so</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:42">so_nqueued</name></name> <operator pos:start="39:44" pos:end="39:44">=</operator> <literal type="number" pos:start="39:46" pos:end="39:46">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block" pos:start="41:9" pos:end="41:48">/* Encapsulate the packet for sending */</comment>
        <expr_stmt pos:start="42:9" pos:end="42:42"><expr pos:start="42:9" pos:end="42:41"><call pos:start="42:9" pos:end="42:41"><name pos:start="42:9" pos:end="42:16">if_encap</name><argument_list pos:start="42:17" pos:end="42:41">(<argument pos:start="42:18" pos:end="42:28"><expr pos:start="42:18" pos:end="42:28"><name pos:start="42:18" pos:end="42:28"><name pos:start="42:18" pos:end="42:20">ifm</name><operator pos:start="42:21" pos:end="42:22">-&gt;</operator><name pos:start="42:23" pos:end="42:28">m_data</name></name></expr></argument>, <argument pos:start="42:31" pos:end="42:40"><expr pos:start="42:31" pos:end="42:40"><name pos:start="42:31" pos:end="42:40"><name pos:start="42:31" pos:end="42:33">ifm</name><operator pos:start="42:34" pos:end="42:35">-&gt;</operator><name pos:start="42:36" pos:end="42:40">m_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt pos:start="43:9" pos:end="44:22"><if pos:start="43:9" pos:end="44:22">if <condition pos:start="43:12" pos:end="43:22">(<expr pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:21">if_queued</name></expr>)</condition><block type="pseudo" pos:start="44:12" pos:end="44:22"><block_content pos:start="44:12" pos:end="44:22">
	   <goto pos:start="44:12" pos:end="44:22">goto <name pos:start="44:17" pos:end="44:21">again</name>;</goto></block_content></block></if></if_stmt>
</block_content>}</block></unit>
