<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17345.c" pos:tabs="8"><function pos:start="1:1" pos:end="156:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">gboolean</name></type> <name pos:start="1:17" pos:end="1:31">ga_channel_open</name><parameter_list pos:start="1:32" pos:end="1:88">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:41">GAChannel</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">c</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><specifier pos:start="1:47" pos:end="1:51">const</specifier> <name pos:start="1:53" pos:end="1:57">gchar</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">path</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:87"><decl pos:start="1:66" pos:end="1:87"><type pos:start="1:66" pos:end="1:87"><name pos:start="1:66" pos:end="1:80">GAChannelMethod</name></type> <name pos:start="1:82" pos:end="1:87">method</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="156:1">{<block_content pos:start="5:5" pos:end="154:16">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:23"><expr pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:5">c</name><operator pos:start="7:6" pos:end="7:7">-&gt;</operator><name pos:start="7:8" pos:end="7:13">method</name></name> <operator pos:start="7:15" pos:end="7:15">=</operator> <name pos:start="7:17" pos:end="7:22">method</name></expr>;</expr_stmt>



    <switch pos:start="11:5" pos:end="150:5">switch <condition pos:start="11:12" pos:end="11:22">(<expr pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:13">c</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:21">method</name></name></expr>)</condition> <block pos:start="11:24" pos:end="150:5">{<block_content pos:start="13:5" pos:end="148:21">

    <case pos:start="13:5" pos:end="13:34">case <expr pos:start="13:10" pos:end="13:33"><name pos:start="13:10" pos:end="13:33">GA_CHANNEL_VIRTIO_SERIAL</name></expr>:</case> <block pos:start="13:36" pos:end="62:5">{<block_content pos:start="15:9" pos:end="60:14">

        <decl_stmt pos:start="15:9" pos:end="23:29"><decl pos:start="15:9" pos:end="23:28"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:14">fd</name> <init pos:start="15:16" pos:end="23:28">= <expr pos:start="15:18" pos:end="23:28"><call pos:start="15:18" pos:end="23:28"><name pos:start="15:18" pos:end="15:26">qemu_open</name><argument_list pos:start="15:27" pos:end="23:28">(<argument pos:start="15:28" pos:end="15:31"><expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">path</name></expr></argument>, <argument pos:start="15:34" pos:end="22:0"><expr pos:start="15:34" pos:end="22:0"><name pos:start="15:34" pos:end="15:39">O_RDWR</name> <operator pos:start="15:41" pos:end="15:41">|</operator> <name pos:start="15:43" pos:end="18:0">O_NONBLOCK</name>

<cpp:ifndef pos:start="17:1" pos:end="17:22">#<cpp:directive pos:start="17:2" pos:end="17:7">ifndef</cpp:directive> <name pos:start="17:9" pos:end="17:22">CONFIG_SOLARIS</name></cpp:ifndef>

                           <operator pos:start="19:28" pos:end="19:28">|</operator> <name pos:start="19:30" pos:end="22:0">O_ASYNC</name></expr></argument>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

                           )</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="25:9" pos:end="34:0"><if pos:start="25:9" pos:end="34:0">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:14">fd</name> <operator pos:start="25:16" pos:end="25:17">==</operator> <operator pos:start="25:19" pos:end="25:19">-</operator><literal type="number" pos:start="25:20" pos:end="25:20">1</literal></expr>)</condition> <block pos:start="25:23" pos:end="34:0">{<block_content pos:start="27:13" pos:end="29:31">

            <expr_stmt pos:start="27:13" pos:end="27:69"><expr pos:start="27:13" pos:end="27:68"><call pos:start="27:13" pos:end="27:68"><name pos:start="27:13" pos:end="27:22">g_critical</name><argument_list pos:start="27:23" pos:end="27:68">(<argument pos:start="27:24" pos:end="27:50"><expr pos:start="27:24" pos:end="27:50"><literal type="string" pos:start="27:24" pos:end="27:50">"error opening channel: %s"</literal></expr></argument>, <argument pos:start="27:53" pos:end="27:67"><expr pos:start="27:53" pos:end="27:67"><call pos:start="27:53" pos:end="27:67"><name pos:start="27:53" pos:end="27:60">strerror</name><argument_list pos:start="27:61" pos:end="27:67">(<argument pos:start="27:62" pos:end="27:66"><expr pos:start="27:62" pos:end="27:66"><name pos:start="27:62" pos:end="27:66">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:31"><expr pos:start="29:13" pos:end="29:30"><call pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:16">exit</name><argument_list pos:start="29:17" pos:end="29:30">(<argument pos:start="29:18" pos:end="29:29"><expr pos:start="29:18" pos:end="29:29"><name pos:start="29:18" pos:end="29:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="33:1" pos:end="33:21">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:21">CONFIG_SOLARIS</name></cpp:ifdef>

        <expr_stmt pos:start="35:9" pos:end="35:64"><expr pos:start="35:9" pos:end="35:63"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:63"><name pos:start="35:15" pos:end="35:19">ioctl</name><argument_list pos:start="35:20" pos:end="35:63">(<argument pos:start="35:21" pos:end="35:22"><expr pos:start="35:21" pos:end="35:22"><name pos:start="35:21" pos:end="35:22">fd</name></expr></argument>, <argument pos:start="35:25" pos:end="35:32"><expr pos:start="35:25" pos:end="35:32"><name pos:start="35:25" pos:end="35:32">I_SETSIG</name></expr></argument>, <argument pos:start="35:35" pos:end="35:62"><expr pos:start="35:35" pos:end="35:62"><name pos:start="35:35" pos:end="35:42">S_OUTPUT</name> <operator pos:start="35:44" pos:end="35:44">|</operator> <name pos:start="35:46" pos:end="35:52">S_INPUT</name> <operator pos:start="35:54" pos:end="35:54">|</operator> <name pos:start="35:56" pos:end="35:62">S_HIPRI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="48:0"><if pos:start="37:9" pos:end="48:0">if <condition pos:start="37:12" pos:end="37:22">(<expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:15">ret</name> <operator pos:start="37:17" pos:end="37:18">==</operator> <operator pos:start="37:20" pos:end="37:20">-</operator><literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr>)</condition> <block pos:start="37:24" pos:end="48:0">{<block_content pos:start="39:13" pos:end="43:31">

            <expr_stmt pos:start="39:13" pos:end="41:40"><expr pos:start="39:13" pos:end="41:39"><call pos:start="39:13" pos:end="41:39"><name pos:start="39:13" pos:end="39:22">g_critical</name><argument_list pos:start="39:23" pos:end="41:39">(<argument pos:start="39:24" pos:end="39:65"><expr pos:start="39:24" pos:end="39:65"><literal type="string" pos:start="39:24" pos:end="39:65">"error setting event mask for channel: %s"</literal></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:38"><expr pos:start="41:24" pos:end="41:38"><call pos:start="41:24" pos:end="41:38"><name pos:start="41:24" pos:end="41:31">strerror</name><argument_list pos:start="41:32" pos:end="41:38">(<argument pos:start="41:33" pos:end="41:37"><expr pos:start="41:33" pos:end="41:37"><name pos:start="41:33" pos:end="41:37">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><call pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:16">exit</name><argument_list pos:start="43:17" pos:end="43:30">(<argument pos:start="43:18" pos:end="43:29"><expr pos:start="43:18" pos:end="43:29"><name pos:start="43:18" pos:end="43:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="49:9" pos:end="49:43"><expr pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:42"><name pos:start="49:15" pos:end="49:35">ga_channel_client_add</name><argument_list pos:start="49:36" pos:end="49:42">(<argument pos:start="49:37" pos:end="49:37"><expr pos:start="49:37" pos:end="49:37"><name pos:start="49:37" pos:end="49:37">c</name></expr></argument>, <argument pos:start="49:40" pos:end="49:41"><expr pos:start="49:40" pos:end="49:41"><name pos:start="49:40" pos:end="49:41">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="58:9"><if pos:start="51:9" pos:end="58:9">if <condition pos:start="51:12" pos:end="51:16">(<expr pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">ret</name></expr>)</condition> <block pos:start="51:18" pos:end="58:9">{<block_content pos:start="53:13" pos:end="56:25">

            <expr_stmt pos:start="53:13" pos:end="53:60"><expr pos:start="53:13" pos:end="53:59"><call pos:start="53:13" pos:end="53:59"><name pos:start="53:13" pos:end="53:22">g_critical</name><argument_list pos:start="53:23" pos:end="53:59">(<argument pos:start="53:24" pos:end="53:58"><expr pos:start="53:24" pos:end="53:58"><literal type="string" pos:start="53:24" pos:end="53:58">"error adding channel to main loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <return pos:start="56:13" pos:end="56:25">return <expr pos:start="56:20" pos:end="56:24"><name pos:start="56:20" pos:end="56:24">false</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="60:9" pos:end="60:14">break;</break>

    </block_content>}</block>

    <case pos:start="64:5" pos:end="64:31">case <expr pos:start="64:10" pos:end="64:30"><name pos:start="64:10" pos:end="64:30">GA_CHANNEL_ISA_SERIAL</name></expr>:</case> <block pos:start="64:33" pos:end="120:5">{<block_content pos:start="66:9" pos:end="118:14">

        <decl_stmt pos:start="66:9" pos:end="66:27"><decl pos:start="66:9" pos:end="66:26"><type pos:start="66:9" pos:end="66:22"><name pos:start="66:9" pos:end="66:22"><name pos:start="66:9" pos:end="66:14">struct</name> <name pos:start="66:16" pos:end="66:22">termios</name></name></type> <name pos:start="66:24" pos:end="66:26">tio</name></decl>;</decl_stmt>

        <decl_stmt pos:start="68:9" pos:end="68:65"><decl pos:start="68:9" pos:end="68:64"><type pos:start="68:9" pos:end="68:11"><name pos:start="68:9" pos:end="68:11">int</name></type> <name pos:start="68:13" pos:end="68:14">fd</name> <init pos:start="68:16" pos:end="68:64">= <expr pos:start="68:18" pos:end="68:64"><call pos:start="68:18" pos:end="68:64"><name pos:start="68:18" pos:end="68:26">qemu_open</name><argument_list pos:start="68:27" pos:end="68:64">(<argument pos:start="68:28" pos:end="68:31"><expr pos:start="68:28" pos:end="68:31"><name pos:start="68:28" pos:end="68:31">path</name></expr></argument>, <argument pos:start="68:34" pos:end="68:63"><expr pos:start="68:34" pos:end="68:63"><name pos:start="68:34" pos:end="68:39">O_RDWR</name> <operator pos:start="68:41" pos:end="68:41">|</operator> <name pos:start="68:43" pos:end="68:50">O_NOCTTY</name> <operator pos:start="68:52" pos:end="68:52">|</operator> <name pos:start="68:54" pos:end="68:63">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="70:9" pos:end="76:9"><if pos:start="70:9" pos:end="76:9">if <condition pos:start="70:12" pos:end="70:21">(<expr pos:start="70:13" pos:end="70:20"><name pos:start="70:13" pos:end="70:14">fd</name> <operator pos:start="70:16" pos:end="70:17">==</operator> <operator pos:start="70:19" pos:end="70:19">-</operator><literal type="number" pos:start="70:20" pos:end="70:20">1</literal></expr>)</condition> <block pos:start="70:23" pos:end="76:9">{<block_content pos:start="72:13" pos:end="74:31">

            <expr_stmt pos:start="72:13" pos:end="72:69"><expr pos:start="72:13" pos:end="72:68"><call pos:start="72:13" pos:end="72:68"><name pos:start="72:13" pos:end="72:22">g_critical</name><argument_list pos:start="72:23" pos:end="72:68">(<argument pos:start="72:24" pos:end="72:50"><expr pos:start="72:24" pos:end="72:50"><literal type="string" pos:start="72:24" pos:end="72:50">"error opening channel: %s"</literal></expr></argument>, <argument pos:start="72:53" pos:end="72:67"><expr pos:start="72:53" pos:end="72:67"><call pos:start="72:53" pos:end="72:67"><name pos:start="72:53" pos:end="72:60">strerror</name><argument_list pos:start="72:61" pos:end="72:67">(<argument pos:start="72:62" pos:end="72:66"><expr pos:start="72:62" pos:end="72:66"><name pos:start="72:62" pos:end="72:66">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="74:13" pos:end="74:31"><expr pos:start="74:13" pos:end="74:30"><call pos:start="74:13" pos:end="74:30"><name pos:start="74:13" pos:end="74:16">exit</name><argument_list pos:start="74:17" pos:end="74:30">(<argument pos:start="74:18" pos:end="74:29"><expr pos:start="74:18" pos:end="74:29"><name pos:start="74:18" pos:end="74:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="78:9" pos:end="78:28"><expr pos:start="78:9" pos:end="78:27"><call pos:start="78:9" pos:end="78:27"><name pos:start="78:9" pos:end="78:17">tcgetattr</name><argument_list pos:start="78:18" pos:end="78:27">(<argument pos:start="78:19" pos:end="78:20"><expr pos:start="78:19" pos:end="78:20"><name pos:start="78:19" pos:end="78:20">fd</name></expr></argument>, <argument pos:start="78:23" pos:end="78:26"><expr pos:start="78:23" pos:end="78:26"><operator pos:start="78:23" pos:end="78:23">&amp;</operator><name pos:start="78:24" pos:end="78:26">tio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="80:9" pos:end="80:71">/* set up serial port for non-canonical, dumb byte streaming */</comment>

        <expr_stmt pos:start="82:9" pos:end="86:34"><expr pos:start="82:9" pos:end="86:33"><name pos:start="82:9" pos:end="82:19"><name pos:start="82:9" pos:end="82:11">tio</name><operator pos:start="82:12" pos:end="82:12">.</operator><name pos:start="82:13" pos:end="82:19">c_iflag</name></name> <operator pos:start="82:21" pos:end="82:22">&amp;=</operator> <operator pos:start="82:24" pos:end="82:24">~</operator><operator pos:start="82:25" pos:end="82:25">(</operator><name pos:start="82:26" pos:end="82:31">IGNBRK</name> <operator pos:start="82:33" pos:end="82:33">|</operator> <name pos:start="82:35" pos:end="82:40">BRKINT</name> <operator pos:start="82:42" pos:end="82:42">|</operator> <name pos:start="82:44" pos:end="82:49">IGNPAR</name> <operator pos:start="82:51" pos:end="82:51">|</operator> <name pos:start="82:53" pos:end="82:58">PARMRK</name> <operator pos:start="82:60" pos:end="82:60">|</operator> <name pos:start="82:62" pos:end="82:66">INPCK</name> <operator pos:start="82:68" pos:end="82:68">|</operator> <name pos:start="82:70" pos:end="82:75">ISTRIP</name> <operator pos:start="82:77" pos:end="82:77">|</operator>

                         <name pos:start="84:26" pos:end="84:30">INLCR</name> <operator pos:start="84:32" pos:end="84:32">|</operator> <name pos:start="84:34" pos:end="84:38">IGNCR</name> <operator pos:start="84:40" pos:end="84:40">|</operator> <name pos:start="84:42" pos:end="84:46">ICRNL</name> <operator pos:start="84:48" pos:end="84:48">|</operator> <name pos:start="84:50" pos:end="84:53">IXON</name> <operator pos:start="84:55" pos:end="84:55">|</operator> <name pos:start="84:57" pos:end="84:61">IXOFF</name> <operator pos:start="84:63" pos:end="84:63">|</operator> <name pos:start="84:65" pos:end="84:69">IXANY</name> <operator pos:start="84:71" pos:end="84:71">|</operator>

                         <name pos:start="86:26" pos:end="86:32">IMAXBEL</name><operator pos:start="86:33" pos:end="86:33">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="88:9" pos:end="88:24"><expr pos:start="88:9" pos:end="88:23"><name pos:start="88:9" pos:end="88:19"><name pos:start="88:9" pos:end="88:11">tio</name><operator pos:start="88:12" pos:end="88:12">.</operator><name pos:start="88:13" pos:end="88:19">c_oflag</name></name> <operator pos:start="88:21" pos:end="88:21">=</operator> <literal type="number" pos:start="88:23" pos:end="88:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="90:9" pos:end="90:24"><expr pos:start="90:9" pos:end="90:23"><name pos:start="90:9" pos:end="90:19"><name pos:start="90:9" pos:end="90:11">tio</name><operator pos:start="90:12" pos:end="90:12">.</operator><name pos:start="90:13" pos:end="90:19">c_lflag</name></name> <operator pos:start="90:21" pos:end="90:21">=</operator> <literal type="number" pos:start="90:23" pos:end="90:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="92:9" pos:end="92:51"><expr pos:start="92:9" pos:end="92:50"><name pos:start="92:9" pos:end="92:19"><name pos:start="92:9" pos:end="92:11">tio</name><operator pos:start="92:12" pos:end="92:12">.</operator><name pos:start="92:13" pos:end="92:19">c_cflag</name></name> <operator pos:start="92:21" pos:end="92:22">|=</operator> <name pos:start="92:24" pos:end="92:50">GA_CHANNEL_BAUDRATE_DEFAULT</name></expr>;</expr_stmt>

        <comment type="block" pos:start="94:9" pos:end="98:11">/* 1 available byte min or reads will block (we'll set non-blocking

         * elsewhere, else we have to deal with read()=0 instead)

         */</comment>

        <expr_stmt pos:start="100:9" pos:end="100:27"><expr pos:start="100:9" pos:end="100:26"><name pos:start="100:9" pos:end="100:22"><name pos:start="100:9" pos:end="100:11">tio</name><operator pos:start="100:12" pos:end="100:12">.</operator><name pos:start="100:13" pos:end="100:16">c_cc</name><index pos:start="100:17" pos:end="100:22">[<expr pos:start="100:18" pos:end="100:21"><name pos:start="100:18" pos:end="100:21">VMIN</name></expr>]</index></name> <operator pos:start="100:24" pos:end="100:24">=</operator> <literal type="number" pos:start="100:26" pos:end="100:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="102:9" pos:end="102:28"><expr pos:start="102:9" pos:end="102:27"><name pos:start="102:9" pos:end="102:23"><name pos:start="102:9" pos:end="102:11">tio</name><operator pos:start="102:12" pos:end="102:12">.</operator><name pos:start="102:13" pos:end="102:16">c_cc</name><index pos:start="102:17" pos:end="102:23">[<expr pos:start="102:18" pos:end="102:22"><name pos:start="102:18" pos:end="102:22">VTIME</name></expr>]</index></name> <operator pos:start="102:25" pos:end="102:25">=</operator> <literal type="number" pos:start="102:27" pos:end="102:27">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="104:9" pos:end="104:80">/* flush everything waiting for read/xmit, it's garbage at this point */</comment>

        <expr_stmt pos:start="106:9" pos:end="106:30"><expr pos:start="106:9" pos:end="106:29"><call pos:start="106:9" pos:end="106:29"><name pos:start="106:9" pos:end="106:15">tcflush</name><argument_list pos:start="106:16" pos:end="106:29">(<argument pos:start="106:17" pos:end="106:18"><expr pos:start="106:17" pos:end="106:18"><name pos:start="106:17" pos:end="106:18">fd</name></expr></argument>, <argument pos:start="106:21" pos:end="106:28"><expr pos:start="106:21" pos:end="106:28"><name pos:start="106:21" pos:end="106:28">TCIFLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="108:9" pos:end="108:37"><expr pos:start="108:9" pos:end="108:36"><call pos:start="108:9" pos:end="108:36"><name pos:start="108:9" pos:end="108:17">tcsetattr</name><argument_list pos:start="108:18" pos:end="108:36">(<argument pos:start="108:19" pos:end="108:20"><expr pos:start="108:19" pos:end="108:20"><name pos:start="108:19" pos:end="108:20">fd</name></expr></argument>, <argument pos:start="108:23" pos:end="108:29"><expr pos:start="108:23" pos:end="108:29"><name pos:start="108:23" pos:end="108:29">TCSANOW</name></expr></argument>, <argument pos:start="108:32" pos:end="108:35"><expr pos:start="108:32" pos:end="108:35"><operator pos:start="108:32" pos:end="108:32">&amp;</operator><name pos:start="108:33" pos:end="108:35">tio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="110:9" pos:end="110:43"><expr pos:start="110:9" pos:end="110:42"><name pos:start="110:9" pos:end="110:11">ret</name> <operator pos:start="110:13" pos:end="110:13">=</operator> <call pos:start="110:15" pos:end="110:42"><name pos:start="110:15" pos:end="110:35">ga_channel_client_add</name><argument_list pos:start="110:36" pos:end="110:42">(<argument pos:start="110:37" pos:end="110:37"><expr pos:start="110:37" pos:end="110:37"><name pos:start="110:37" pos:end="110:37">c</name></expr></argument>, <argument pos:start="110:40" pos:end="110:41"><expr pos:start="110:40" pos:end="110:41"><name pos:start="110:40" pos:end="110:41">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="112:9" pos:end="116:9"><if pos:start="112:9" pos:end="116:9">if <condition pos:start="112:12" pos:end="112:16">(<expr pos:start="112:13" pos:end="112:15"><name pos:start="112:13" pos:end="112:15">ret</name></expr>)</condition> <block pos:start="112:18" pos:end="116:9">{<block_content pos:start="114:13" pos:end="114:57">

            <expr_stmt pos:start="114:13" pos:end="114:57"><expr pos:start="114:13" pos:end="114:56"><call pos:start="114:13" pos:end="114:56"><name pos:start="114:13" pos:end="114:19">g_error</name><argument_list pos:start="114:20" pos:end="114:56">(<argument pos:start="114:21" pos:end="114:55"><expr pos:start="114:21" pos:end="114:55"><literal type="string" pos:start="114:21" pos:end="114:55">"error adding channel to main loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="118:9" pos:end="118:14">break;</break>

    </block_content>}</block>

    <case pos:start="122:5" pos:end="122:32">case <expr pos:start="122:10" pos:end="122:31"><name pos:start="122:10" pos:end="122:31">GA_CHANNEL_UNIX_LISTEN</name></expr>:</case> <block pos:start="122:34" pos:end="142:5">{<block_content pos:start="124:9" pos:end="140:14">

        <decl_stmt pos:start="124:9" pos:end="124:32"><decl pos:start="124:9" pos:end="124:31"><type pos:start="124:9" pos:end="124:15"><name pos:start="124:9" pos:end="124:13">Error</name> <modifier pos:start="124:15" pos:end="124:15">*</modifier></type><name pos:start="124:16" pos:end="124:24">local_err</name> <init pos:start="124:26" pos:end="124:31">= <expr pos:start="124:28" pos:end="124:31"><name pos:start="124:28" pos:end="124:31">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="126:9" pos:end="126:67"><decl pos:start="126:9" pos:end="126:66"><type pos:start="126:9" pos:end="126:11"><name pos:start="126:9" pos:end="126:11">int</name></type> <name pos:start="126:13" pos:end="126:14">fd</name> <init pos:start="126:16" pos:end="126:66">= <expr pos:start="126:18" pos:end="126:66"><call pos:start="126:18" pos:end="126:66"><name pos:start="126:18" pos:end="126:28">unix_listen</name><argument_list pos:start="126:29" pos:end="126:66">(<argument pos:start="126:30" pos:end="126:33"><expr pos:start="126:30" pos:end="126:33"><name pos:start="126:30" pos:end="126:33">path</name></expr></argument>, <argument pos:start="126:36" pos:end="126:39"><expr pos:start="126:36" pos:end="126:39"><name pos:start="126:36" pos:end="126:39">NULL</name></expr></argument>, <argument pos:start="126:42" pos:end="126:53"><expr pos:start="126:42" pos:end="126:53"><call pos:start="126:42" pos:end="126:53"><name pos:start="126:42" pos:end="126:47">strlen</name><argument_list pos:start="126:48" pos:end="126:53">(<argument pos:start="126:49" pos:end="126:52"><expr pos:start="126:49" pos:end="126:52"><name pos:start="126:49" pos:end="126:52">path</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="126:56" pos:end="126:65"><expr pos:start="126:56" pos:end="126:65"><operator pos:start="126:56" pos:end="126:56">&amp;</operator><name pos:start="126:57" pos:end="126:65">local_err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="128:9" pos:end="136:9"><if pos:start="128:9" pos:end="136:9">if <condition pos:start="128:12" pos:end="128:30">(<expr pos:start="128:13" pos:end="128:29"><name pos:start="128:13" pos:end="128:21">local_err</name> <operator pos:start="128:23" pos:end="128:24">!=</operator> <name pos:start="128:26" pos:end="128:29">NULL</name></expr>)</condition> <block pos:start="128:32" pos:end="136:9">{<block_content pos:start="130:13" pos:end="134:25">

            <expr_stmt pos:start="130:13" pos:end="130:58"><expr pos:start="130:13" pos:end="130:57"><call pos:start="130:13" pos:end="130:57"><name pos:start="130:13" pos:end="130:22">g_critical</name><argument_list pos:start="130:23" pos:end="130:57">(<argument pos:start="130:24" pos:end="130:27"><expr pos:start="130:24" pos:end="130:27"><literal type="string" pos:start="130:24" pos:end="130:27">"%s"</literal></expr></argument>, <argument pos:start="130:30" pos:end="130:56"><expr pos:start="130:30" pos:end="130:56"><call pos:start="130:30" pos:end="130:56"><name pos:start="130:30" pos:end="130:45">error_get_pretty</name><argument_list pos:start="130:46" pos:end="130:56">(<argument pos:start="130:47" pos:end="130:55"><expr pos:start="130:47" pos:end="130:55"><name pos:start="130:47" pos:end="130:55">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="132:13" pos:end="132:34"><expr pos:start="132:13" pos:end="132:33"><call pos:start="132:13" pos:end="132:33"><name pos:start="132:13" pos:end="132:22">error_free</name><argument_list pos:start="132:23" pos:end="132:33">(<argument pos:start="132:24" pos:end="132:32"><expr pos:start="132:24" pos:end="132:32"><name pos:start="132:24" pos:end="132:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="134:13" pos:end="134:25">return <expr pos:start="134:20" pos:end="134:24"><name pos:start="134:20" pos:end="134:24">false</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="138:9" pos:end="138:43"><expr pos:start="138:9" pos:end="138:42"><call pos:start="138:9" pos:end="138:42"><name pos:start="138:9" pos:end="138:29">ga_channel_listen_add</name><argument_list pos:start="138:30" pos:end="138:42">(<argument pos:start="138:31" pos:end="138:31"><expr pos:start="138:31" pos:end="138:31"><name pos:start="138:31" pos:end="138:31">c</name></expr></argument>, <argument pos:start="138:34" pos:end="138:35"><expr pos:start="138:34" pos:end="138:35"><name pos:start="138:34" pos:end="138:35">fd</name></expr></argument>, <argument pos:start="138:38" pos:end="138:41"><expr pos:start="138:38" pos:end="138:41"><name pos:start="138:38" pos:end="138:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="140:9" pos:end="140:14">break;</break>

    </block_content>}</block>

    <default pos:start="144:5" pos:end="144:12">default:</default>

        <expr_stmt pos:start="146:9" pos:end="146:66"><expr pos:start="146:9" pos:end="146:65"><call pos:start="146:9" pos:end="146:65"><name pos:start="146:9" pos:end="146:18">g_critical</name><argument_list pos:start="146:19" pos:end="146:65">(<argument pos:start="146:20" pos:end="146:64"><expr pos:start="146:20" pos:end="146:64"><literal type="string" pos:start="146:20" pos:end="146:64">"error binding/listening to specified socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="148:9" pos:end="148:21">return <expr pos:start="148:16" pos:end="148:20"><name pos:start="148:16" pos:end="148:20">false</name></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="154:5" pos:end="154:16">return <expr pos:start="154:12" pos:end="154:15"><name pos:start="154:12" pos:end="154:15">true</name></expr>;</return>

</block_content>}</block></function></unit>
