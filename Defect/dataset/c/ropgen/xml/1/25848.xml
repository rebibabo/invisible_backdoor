<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25848.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:5">const</specifier> <name pos:start="1:7" pos:end="1:14">AVOption</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:29">av_set_string</name><parameter_list pos:start="1:30" pos:end="1:75">(<parameter pos:start="1:31" pos:end="1:39"><decl pos:start="1:31" pos:end="1:39"><type pos:start="1:31" pos:end="1:39"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">obj</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">name</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><specifier pos:start="1:60" pos:end="1:64">const</specifier> <name pos:start="1:66" pos:end="1:69">char</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">val</name></decl></parameter>)</parameter_list><block pos:start="1:76" pos:end="109:1">{<block_content pos:start="3:5" pos:end="107:13">

    <decl_stmt pos:start="3:5" pos:end="3:58"><decl pos:start="3:5" pos:end="3:57"><type pos:start="3:5" pos:end="3:20"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:18">AVOption</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:21">o</name><init pos:start="3:22" pos:end="3:57">= <expr pos:start="3:24" pos:end="3:57"><call pos:start="3:24" pos:end="3:57"><name pos:start="3:24" pos:end="3:34">av_find_opt</name><argument_list pos:start="3:35" pos:end="3:57">(<argument pos:start="3:36" pos:end="3:38"><expr pos:start="3:36" pos:end="3:38"><name pos:start="3:36" pos:end="3:38">obj</name></expr></argument>, <argument pos:start="3:41" pos:end="3:44"><expr pos:start="3:41" pos:end="3:44"><name pos:start="3:41" pos:end="3:44">name</name></expr></argument>, <argument pos:start="3:47" pos:end="3:50"><expr pos:start="3:47" pos:end="3:50"><name pos:start="3:47" pos:end="3:50">NULL</name></expr></argument>, <argument pos:start="3:53" pos:end="3:53"><expr pos:start="3:53" pos:end="3:53"><literal type="number" pos:start="3:53" pos:end="3:53">0</literal></expr></argument>, <argument pos:start="3:56" pos:end="3:56"><expr pos:start="3:56" pos:end="3:56"><literal type="number" pos:start="3:56" pos:end="3:56">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="5:5" pos:end="9:5"><if pos:start="5:5" pos:end="9:5">if<condition pos:start="5:7" pos:end="5:68">(<expr pos:start="5:8" pos:end="5:67"><name pos:start="5:8" pos:end="5:8">o</name> <operator pos:start="5:10" pos:end="5:11">&amp;&amp;</operator> <name pos:start="5:13" pos:end="5:21"><name pos:start="5:13" pos:end="5:13">o</name><operator pos:start="5:14" pos:end="5:15">-&gt;</operator><name pos:start="5:16" pos:end="5:21">offset</name></name><operator pos:start="5:22" pos:end="5:23">==</operator><literal type="number" pos:start="5:24" pos:end="5:24">0</literal> <operator pos:start="5:26" pos:end="5:27">&amp;&amp;</operator> <name pos:start="5:29" pos:end="5:35"><name pos:start="5:29" pos:end="5:29">o</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:35">type</name></name> <operator pos:start="5:37" pos:end="5:38">==</operator> <name pos:start="5:40" pos:end="5:56">FF_OPT_TYPE_CONST</name> <operator pos:start="5:58" pos:end="5:59">&amp;&amp;</operator> <name pos:start="5:61" pos:end="5:67"><name pos:start="5:61" pos:end="5:61">o</name><operator pos:start="5:62" pos:end="5:63">-&gt;</operator><name pos:start="5:64" pos:end="5:67">unit</name></name></expr>)</condition><block pos:start="5:69" pos:end="9:5">{<block_content pos:start="7:9" pos:end="7:57">

        <return pos:start="7:9" pos:end="7:57">return <expr pos:start="7:16" pos:end="7:56"><call pos:start="7:16" pos:end="7:56"><name pos:start="7:16" pos:end="7:26">set_all_opt</name><argument_list pos:start="7:27" pos:end="7:56">(<argument pos:start="7:28" pos:end="7:30"><expr pos:start="7:28" pos:end="7:30"><name pos:start="7:28" pos:end="7:30">obj</name></expr></argument>, <argument pos:start="7:33" pos:end="7:39"><expr pos:start="7:33" pos:end="7:39"><name pos:start="7:33" pos:end="7:39"><name pos:start="7:33" pos:end="7:33">o</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:39">unit</name></name></expr></argument>, <argument pos:start="7:42" pos:end="7:55"><expr pos:start="7:42" pos:end="7:55"><name pos:start="7:42" pos:end="7:55"><name pos:start="7:42" pos:end="7:42">o</name><operator pos:start="7:43" pos:end="7:44">-&gt;</operator><name pos:start="7:45" pos:end="7:55">default_val</name></name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="11:5" pos:end="13:20"><if pos:start="11:5" pos:end="13:20">if<condition pos:start="11:7" pos:end="11:34">(<expr pos:start="11:8" pos:end="11:33"><operator pos:start="11:8" pos:end="11:8">!</operator><name pos:start="11:9" pos:end="11:9">o</name> <operator pos:start="11:11" pos:end="11:12">||</operator> <operator pos:start="11:14" pos:end="11:14">!</operator><name pos:start="11:15" pos:end="11:17">val</name> <operator pos:start="11:19" pos:end="11:20">||</operator> <name pos:start="11:22" pos:end="11:30"><name pos:start="11:22" pos:end="11:22">o</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:30">offset</name></name><operator pos:start="11:31" pos:end="11:32">&lt;=</operator><literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:20"><block_content pos:start="13:9" pos:end="13:20">

        <return pos:start="13:9" pos:end="13:20">return <expr pos:start="13:16" pos:end="13:19"><name pos:start="13:16" pos:end="13:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="101:5"><if pos:start="15:5" pos:end="101:5">if<condition pos:start="15:7" pos:end="15:37">(<expr pos:start="15:8" pos:end="15:36"><name pos:start="15:8" pos:end="15:14"><name pos:start="15:8" pos:end="15:8">o</name><operator pos:start="15:9" pos:end="15:10">-&gt;</operator><name pos:start="15:11" pos:end="15:14">type</name></name> <operator pos:start="15:16" pos:end="15:17">!=</operator> <name pos:start="15:19" pos:end="15:36">FF_OPT_TYPE_STRING</name></expr>)</condition><block pos:start="15:38" pos:end="101:5">{<block_content pos:start="17:9" pos:end="99:20">

        <for pos:start="17:9" pos:end="97:9">for<control pos:start="17:12" pos:end="17:15">(<init pos:start="17:13" pos:end="17:13">;</init><condition pos:start="17:14" pos:end="17:14">;</condition><incr/>)</control><block pos:start="17:16" pos:end="97:9">{<block_content pos:start="19:13" pos:end="95:25">

            <decl_stmt pos:start="19:13" pos:end="19:18"><decl pos:start="19:13" pos:end="19:17"><type pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">int</name></type> <name pos:start="19:17" pos:end="19:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="21:13" pos:end="21:26"><decl pos:start="21:13" pos:end="21:25"><type pos:start="21:13" pos:end="21:16"><name pos:start="21:13" pos:end="21:16">char</name></type> <name pos:start="21:18" pos:end="21:25"><name pos:start="21:18" pos:end="21:20">buf</name><index pos:start="21:21" pos:end="21:25">[<expr pos:start="21:22" pos:end="21:24"><literal type="number" pos:start="21:22" pos:end="21:24">256</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="23:13" pos:end="23:22"><decl pos:start="23:13" pos:end="23:21"><type pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:19">cmd</name><init pos:start="23:20" pos:end="23:21">=<expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="25:13" pos:end="25:21"><decl pos:start="25:13" pos:end="25:20"><type pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:18">double</name></type> <name pos:start="25:20" pos:end="25:20">d</name></decl>;</decl_stmt>

            <decl_stmt pos:start="27:13" pos:end="27:31"><decl pos:start="27:13" pos:end="27:30"><type pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:16">char</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:23">error</name> <init pos:start="27:25" pos:end="27:30">= <expr pos:start="27:27" pos:end="27:30"><name pos:start="27:27" pos:end="27:30">NULL</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="31:13" pos:end="33:30"><if pos:start="31:13" pos:end="33:30">if<condition pos:start="31:15" pos:end="31:42">(<expr pos:start="31:16" pos:end="31:41"><operator pos:start="31:16" pos:end="31:16">*</operator><name pos:start="31:17" pos:end="31:19">val</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <literal type="char" pos:start="31:24" pos:end="31:26">'+'</literal> <operator pos:start="31:28" pos:end="31:29">||</operator> <operator pos:start="31:31" pos:end="31:31">*</operator><name pos:start="31:32" pos:end="31:34">val</name> <operator pos:start="31:36" pos:end="31:37">==</operator> <literal type="char" pos:start="31:39" pos:end="31:41">'-'</literal></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:30"><block_content pos:start="33:17" pos:end="33:30">

                <expr_stmt pos:start="33:17" pos:end="33:30"><expr pos:start="33:17" pos:end="33:29"><name pos:start="33:17" pos:end="33:19">cmd</name><operator pos:start="33:20" pos:end="33:20">=</operator> <operator pos:start="33:22" pos:end="33:22">*</operator><operator pos:start="33:23" pos:end="33:23">(</operator><name pos:start="33:24" pos:end="33:26">val</name><operator pos:start="33:27" pos:end="33:28">++</operator><operator pos:start="33:29" pos:end="33:29">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <for pos:start="37:13" pos:end="39:31">for<control pos:start="37:16" pos:end="37:82">(<init pos:start="37:17" pos:end="37:20"><expr pos:start="37:17" pos:end="37:19"><name pos:start="37:17" pos:end="37:17">i</name><operator pos:start="37:18" pos:end="37:18">=</operator><literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>;</init> <condition pos:start="37:22" pos:end="37:77"><expr pos:start="37:22" pos:end="37:76"><name pos:start="37:22" pos:end="37:22">i</name><operator pos:start="37:23" pos:end="37:23">&lt;</operator><sizeof pos:start="37:24" pos:end="37:34">sizeof<argument_list pos:start="37:30" pos:end="37:34">(<argument pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><name pos:start="37:31" pos:end="37:33">buf</name></expr></argument>)</argument_list></sizeof><operator pos:start="37:35" pos:end="37:35">-</operator><literal type="number" pos:start="37:36" pos:end="37:36">1</literal> <operator pos:start="37:38" pos:end="37:39">&amp;&amp;</operator> <name pos:start="37:41" pos:end="37:46"><name pos:start="37:41" pos:end="37:43">val</name><index pos:start="37:44" pos:end="37:46">[<expr pos:start="37:45" pos:end="37:45"><name pos:start="37:45" pos:end="37:45">i</name></expr>]</index></name> <operator pos:start="37:48" pos:end="37:49">&amp;&amp;</operator> <name pos:start="37:51" pos:end="37:56"><name pos:start="37:51" pos:end="37:53">val</name><index pos:start="37:54" pos:end="37:56">[<expr pos:start="37:55" pos:end="37:55"><name pos:start="37:55" pos:end="37:55">i</name></expr>]</index></name><operator pos:start="37:57" pos:end="37:58">!=</operator><literal type="char" pos:start="37:59" pos:end="37:61">'+'</literal> <operator pos:start="37:63" pos:end="37:64">&amp;&amp;</operator> <name pos:start="37:66" pos:end="37:71"><name pos:start="37:66" pos:end="37:68">val</name><index pos:start="37:69" pos:end="37:71">[<expr pos:start="37:70" pos:end="37:70"><name pos:start="37:70" pos:end="37:70">i</name></expr>]</index></name><operator pos:start="37:72" pos:end="37:73">!=</operator><literal type="char" pos:start="37:74" pos:end="37:76">'-'</literal></expr>;</condition> <incr pos:start="37:79" pos:end="37:81"><expr pos:start="37:79" pos:end="37:81"><name pos:start="37:79" pos:end="37:79">i</name><operator pos:start="37:80" pos:end="37:81">++</operator></expr></incr>)</control><block type="pseudo" pos:start="39:17" pos:end="39:31"><block_content pos:start="39:17" pos:end="39:31">

                <expr_stmt pos:start="39:17" pos:end="39:31"><expr pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:19">buf</name><index pos:start="39:20" pos:end="39:22">[<expr pos:start="39:21" pos:end="39:21"><name pos:start="39:21" pos:end="39:21">i</name></expr>]</index></name><operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:30"><name pos:start="39:25" pos:end="39:27">val</name><index pos:start="39:28" pos:end="39:30">[<expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="41:13" pos:end="41:21"><expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:15">buf</name><index pos:start="41:16" pos:end="41:18">[<expr pos:start="41:17" pos:end="41:17"><name pos:start="41:17" pos:end="41:17">i</name></expr>]</index></name><operator pos:start="41:19" pos:end="41:19">=</operator><literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:20"><expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">val</name><operator pos:start="43:16" pos:end="43:17">+=</operator> <name pos:start="43:19" pos:end="43:19">i</name></expr>;</expr_stmt>



            <expr_stmt pos:start="47:13" pos:end="47:95"><expr pos:start="47:13" pos:end="47:94"><name pos:start="47:13" pos:end="47:13">d</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:94"><name pos:start="47:17" pos:end="47:24">ff_eval2</name><argument_list pos:start="47:25" pos:end="47:94">(<argument pos:start="47:26" pos:end="47:28"><expr pos:start="47:26" pos:end="47:28"><name pos:start="47:26" pos:end="47:28">buf</name></expr></argument>, <argument pos:start="47:31" pos:end="47:42"><expr pos:start="47:31" pos:end="47:42"><name pos:start="47:31" pos:end="47:42">const_values</name></expr></argument>, <argument pos:start="47:45" pos:end="47:55"><expr pos:start="47:45" pos:end="47:55"><name pos:start="47:45" pos:end="47:55">const_names</name></expr></argument>, <argument pos:start="47:58" pos:end="47:61"><expr pos:start="47:58" pos:end="47:61"><name pos:start="47:58" pos:end="47:61">NULL</name></expr></argument>, <argument pos:start="47:64" pos:end="47:67"><expr pos:start="47:64" pos:end="47:67"><name pos:start="47:64" pos:end="47:67">NULL</name></expr></argument>, <argument pos:start="47:70" pos:end="47:73"><expr pos:start="47:70" pos:end="47:73"><name pos:start="47:70" pos:end="47:73">NULL</name></expr></argument>, <argument pos:start="47:76" pos:end="47:79"><expr pos:start="47:76" pos:end="47:79"><name pos:start="47:76" pos:end="47:79">NULL</name></expr></argument>, <argument pos:start="47:82" pos:end="47:85"><expr pos:start="47:82" pos:end="47:85"><name pos:start="47:82" pos:end="47:85">NULL</name></expr></argument>, <argument pos:start="47:88" pos:end="47:93"><expr pos:start="47:88" pos:end="47:93"><operator pos:start="47:88" pos:end="47:88">&amp;</operator><name pos:start="47:89" pos:end="47:93">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="77:13"><if pos:start="49:13" pos:end="77:13">if<condition pos:start="49:15" pos:end="49:24">(<expr pos:start="49:16" pos:end="49:23"><call pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:20">isnan</name><argument_list pos:start="49:21" pos:end="49:23">(<argument pos:start="49:22" pos:end="49:22"><expr pos:start="49:22" pos:end="49:22"><name pos:start="49:22" pos:end="49:22">d</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:26" pos:end="77:13">{<block_content pos:start="51:17" pos:end="75:17">

                <decl_stmt pos:start="51:17" pos:end="51:78"><decl pos:start="51:17" pos:end="51:77"><type pos:start="51:17" pos:end="51:32"><specifier pos:start="51:17" pos:end="51:21">const</specifier> <name pos:start="51:23" pos:end="51:30">AVOption</name> <modifier pos:start="51:32" pos:end="51:32">*</modifier></type><name pos:start="51:33" pos:end="51:39">o_named</name><init pos:start="51:40" pos:end="51:77">= <expr pos:start="51:42" pos:end="51:77"><call pos:start="51:42" pos:end="51:77"><name pos:start="51:42" pos:end="51:52">av_find_opt</name><argument_list pos:start="51:53" pos:end="51:77">(<argument pos:start="51:54" pos:end="51:56"><expr pos:start="51:54" pos:end="51:56"><name pos:start="51:54" pos:end="51:56">obj</name></expr></argument>, <argument pos:start="51:59" pos:end="51:61"><expr pos:start="51:59" pos:end="51:61"><name pos:start="51:59" pos:end="51:61">buf</name></expr></argument>, <argument pos:start="51:64" pos:end="51:70"><expr pos:start="51:64" pos:end="51:70"><name pos:start="51:64" pos:end="51:70"><name pos:start="51:64" pos:end="51:64">o</name><operator pos:start="51:65" pos:end="51:66">-&gt;</operator><name pos:start="51:67" pos:end="51:70">unit</name></name></expr></argument>, <argument pos:start="51:73" pos:end="51:73"><expr pos:start="51:73" pos:end="51:73"><literal type="number" pos:start="51:73" pos:end="51:73">0</literal></expr></argument>, <argument pos:start="51:76" pos:end="51:76"><expr pos:start="51:76" pos:end="51:76"><literal type="number" pos:start="51:76" pos:end="51:76">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="53:17" pos:end="75:17"><if pos:start="53:17" pos:end="55:44">if<condition pos:start="53:19" pos:end="53:65">(<expr pos:start="53:20" pos:end="53:64"><name pos:start="53:20" pos:end="53:26">o_named</name> <operator pos:start="53:28" pos:end="53:29">&amp;&amp;</operator> <name pos:start="53:31" pos:end="53:43"><name pos:start="53:31" pos:end="53:37">o_named</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:43">type</name></name> <operator pos:start="53:45" pos:end="53:46">==</operator> <name pos:start="53:48" pos:end="53:64">FF_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo" pos:start="55:21" pos:end="55:44"><block_content pos:start="55:21" pos:end="55:44">

                    <expr_stmt pos:start="55:21" pos:end="55:44"><expr pos:start="55:21" pos:end="55:43"><name pos:start="55:21" pos:end="55:21">d</name><operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:43"><name pos:start="55:24" pos:end="55:30">o_named</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:43">default_val</name></name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="57:17" pos:end="57:67">else if<condition pos:start="57:24" pos:end="57:48">(<expr pos:start="57:25" pos:end="57:47"><operator pos:start="57:25" pos:end="57:25">!</operator><call pos:start="57:26" pos:end="57:47"><name pos:start="57:26" pos:end="57:31">strcmp</name><argument_list pos:start="57:32" pos:end="57:47">(<argument pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><name pos:start="57:33" pos:end="57:35">buf</name></expr></argument>, <argument pos:start="57:38" pos:end="57:46"><expr pos:start="57:38" pos:end="57:46"><literal type="string" pos:start="57:38" pos:end="57:46">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:50" pos:end="57:67"><block_content pos:start="57:50" pos:end="57:67"> <expr_stmt pos:start="57:50" pos:end="57:67"><expr pos:start="57:50" pos:end="57:66"><name pos:start="57:50" pos:end="57:50">d</name><operator pos:start="57:51" pos:end="57:51">=</operator> <name pos:start="57:53" pos:end="57:66"><name pos:start="57:53" pos:end="57:53">o</name><operator pos:start="57:54" pos:end="57:55">-&gt;</operator><name pos:start="57:56" pos:end="57:66">default_val</name></name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="59:17" pos:end="59:59">else if<condition pos:start="59:24" pos:end="59:48">(<expr pos:start="59:25" pos:end="59:47"><operator pos:start="59:25" pos:end="59:25">!</operator><call pos:start="59:26" pos:end="59:47"><name pos:start="59:26" pos:end="59:31">strcmp</name><argument_list pos:start="59:32" pos:end="59:47">(<argument pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:35">buf</name></expr></argument>, <argument pos:start="59:38" pos:end="59:42"><expr pos:start="59:38" pos:end="59:42"><literal type="string" pos:start="59:38" pos:end="59:42">"max"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:50" pos:end="59:59"><block_content pos:start="59:50" pos:end="59:59"> <expr_stmt pos:start="59:50" pos:end="59:59"><expr pos:start="59:50" pos:end="59:58"><name pos:start="59:50" pos:end="59:50">d</name><operator pos:start="59:51" pos:end="59:51">=</operator> <name pos:start="59:53" pos:end="59:58"><name pos:start="59:53" pos:end="59:53">o</name><operator pos:start="59:54" pos:end="59:55">-&gt;</operator><name pos:start="59:56" pos:end="59:58">max</name></name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="61:17" pos:end="61:59">else if<condition pos:start="61:24" pos:end="61:48">(<expr pos:start="61:25" pos:end="61:47"><operator pos:start="61:25" pos:end="61:25">!</operator><call pos:start="61:26" pos:end="61:47"><name pos:start="61:26" pos:end="61:31">strcmp</name><argument_list pos:start="61:32" pos:end="61:47">(<argument pos:start="61:33" pos:end="61:35"><expr pos:start="61:33" pos:end="61:35"><name pos:start="61:33" pos:end="61:35">buf</name></expr></argument>, <argument pos:start="61:38" pos:end="61:42"><expr pos:start="61:38" pos:end="61:42"><literal type="string" pos:start="61:38" pos:end="61:42">"min"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:50" pos:end="61:59"><block_content pos:start="61:50" pos:end="61:59"> <expr_stmt pos:start="61:50" pos:end="61:59"><expr pos:start="61:50" pos:end="61:58"><name pos:start="61:50" pos:end="61:50">d</name><operator pos:start="61:51" pos:end="61:51">=</operator> <name pos:start="61:53" pos:end="61:58"><name pos:start="61:53" pos:end="61:53">o</name><operator pos:start="61:54" pos:end="61:55">-&gt;</operator><name pos:start="61:56" pos:end="61:58">min</name></name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="63:17" pos:end="63:54">else if<condition pos:start="63:24" pos:end="63:48">(<expr pos:start="63:25" pos:end="63:47"><operator pos:start="63:25" pos:end="63:25">!</operator><call pos:start="63:26" pos:end="63:47"><name pos:start="63:26" pos:end="63:31">strcmp</name><argument_list pos:start="63:32" pos:end="63:47">(<argument pos:start="63:33" pos:end="63:35"><expr pos:start="63:33" pos:end="63:35"><name pos:start="63:33" pos:end="63:35">buf</name></expr></argument>, <argument pos:start="63:38" pos:end="63:43"><expr pos:start="63:38" pos:end="63:43"><literal type="string" pos:start="63:38" pos:end="63:43">"none"</literal></expr></argument>   )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="63:50" pos:end="63:54"><block_content pos:start="63:50" pos:end="63:54"> <expr_stmt pos:start="63:50" pos:end="63:54"><expr pos:start="63:50" pos:end="63:53"><name pos:start="63:50" pos:end="63:50">d</name><operator pos:start="63:51" pos:end="63:51">=</operator> <literal type="number" pos:start="63:53" pos:end="63:53">0</literal></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="65:17" pos:end="65:55">else if<condition pos:start="65:24" pos:end="65:48">(<expr pos:start="65:25" pos:end="65:47"><operator pos:start="65:25" pos:end="65:25">!</operator><call pos:start="65:26" pos:end="65:47"><name pos:start="65:26" pos:end="65:31">strcmp</name><argument_list pos:start="65:32" pos:end="65:47">(<argument pos:start="65:33" pos:end="65:35"><expr pos:start="65:33" pos:end="65:35"><name pos:start="65:33" pos:end="65:35">buf</name></expr></argument>, <argument pos:start="65:38" pos:end="65:42"><expr pos:start="65:38" pos:end="65:42"><literal type="string" pos:start="65:38" pos:end="65:42">"all"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo" pos:start="65:50" pos:end="65:55"><block_content pos:start="65:50" pos:end="65:55"> <expr_stmt pos:start="65:50" pos:end="65:55"><expr pos:start="65:50" pos:end="65:54"><name pos:start="65:50" pos:end="65:50">d</name><operator pos:start="65:51" pos:end="65:51">=</operator> <operator pos:start="65:53" pos:end="65:53">~</operator><literal type="number" pos:start="65:54" pos:end="65:54">0</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="67:17" pos:end="75:17">else <block pos:start="67:22" pos:end="75:17">{<block_content pos:start="69:21" pos:end="73:32">

                    <if_stmt pos:start="69:21" pos:end="71:108"><if pos:start="69:21" pos:end="71:108">if <condition pos:start="69:24" pos:end="69:31">(<expr pos:start="69:25" pos:end="69:30"><operator pos:start="69:25" pos:end="69:25">!</operator><name pos:start="69:26" pos:end="69:30">error</name></expr>)</condition><block type="pseudo" pos:start="71:25" pos:end="71:108"><block_content pos:start="71:25" pos:end="71:108">

                        <expr_stmt pos:start="71:25" pos:end="71:108"><expr pos:start="71:25" pos:end="71:107"><call pos:start="71:25" pos:end="71:107"><name pos:start="71:25" pos:end="71:30">av_log</name><argument_list pos:start="71:31" pos:end="71:107">(<argument pos:start="71:32" pos:end="71:35"><expr pos:start="71:32" pos:end="71:35"><name pos:start="71:32" pos:end="71:35">NULL</name></expr></argument>, <argument pos:start="71:38" pos:end="71:49"><expr pos:start="71:38" pos:end="71:49"><name pos:start="71:38" pos:end="71:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:52" pos:end="71:94"><expr pos:start="71:52" pos:end="71:94"><literal type="string" pos:start="71:52" pos:end="71:94">"Unable to parse option value \"%s\": %s\n"</literal></expr></argument>, <argument pos:start="71:97" pos:end="71:99"><expr pos:start="71:97" pos:end="71:99"><name pos:start="71:97" pos:end="71:99">val</name></expr></argument>, <argument pos:start="71:102" pos:end="71:106"><expr pos:start="71:102" pos:end="71:106"><name pos:start="71:102" pos:end="71:106">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return pos:start="73:21" pos:end="73:32">return <expr pos:start="73:28" pos:end="73:31"><name pos:start="73:28" pos:end="73:31">NULL</name></expr>;</return>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="79:13" pos:end="87:22"><if pos:start="79:13" pos:end="85:13">if<condition pos:start="79:15" pos:end="79:44">(<expr pos:start="79:16" pos:end="79:43"><name pos:start="79:16" pos:end="79:22"><name pos:start="79:16" pos:end="79:16">o</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:22">type</name></name> <operator pos:start="79:24" pos:end="79:25">==</operator> <name pos:start="79:27" pos:end="79:43">FF_OPT_TYPE_FLAGS</name></expr>)</condition><block pos:start="79:45" pos:end="85:13">{<block_content pos:start="81:17" pos:end="83:78">

                <if_stmt pos:start="81:17" pos:end="83:78"><if pos:start="81:17" pos:end="81:78">if     <condition pos:start="81:24" pos:end="81:33">(<expr pos:start="81:25" pos:end="81:32"><name pos:start="81:25" pos:end="81:27">cmd</name><operator pos:start="81:28" pos:end="81:29">==</operator><literal type="char" pos:start="81:30" pos:end="81:32">'+'</literal></expr>)</condition><block type="pseudo" pos:start="81:35" pos:end="81:78"><block_content pos:start="81:35" pos:end="81:78"> <expr_stmt pos:start="81:35" pos:end="81:78"><expr pos:start="81:35" pos:end="81:77"><name pos:start="81:35" pos:end="81:35">d</name><operator pos:start="81:36" pos:end="81:36">=</operator> <call pos:start="81:38" pos:end="81:64"><name pos:start="81:38" pos:end="81:47">av_get_int</name><argument_list pos:start="81:48" pos:end="81:64">(<argument pos:start="81:49" pos:end="81:51"><expr pos:start="81:49" pos:end="81:51"><name pos:start="81:49" pos:end="81:51">obj</name></expr></argument>, <argument pos:start="81:54" pos:end="81:57"><expr pos:start="81:54" pos:end="81:57"><name pos:start="81:54" pos:end="81:57">name</name></expr></argument>, <argument pos:start="81:60" pos:end="81:63"><expr pos:start="81:60" pos:end="81:63"><name pos:start="81:60" pos:end="81:63">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="81:66" pos:end="81:66">|</operator> <operator pos:start="81:68" pos:end="81:68">(</operator><name pos:start="81:69" pos:end="81:75">int64_t</name><operator pos:start="81:76" pos:end="81:76">)</operator><name pos:start="81:77" pos:end="81:77">d</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="83:17" pos:end="83:78">else if<condition pos:start="83:24" pos:end="83:33">(<expr pos:start="83:25" pos:end="83:32"><name pos:start="83:25" pos:end="83:27">cmd</name><operator pos:start="83:28" pos:end="83:29">==</operator><literal type="char" pos:start="83:30" pos:end="83:32">'-'</literal></expr>)</condition><block type="pseudo" pos:start="83:35" pos:end="83:78"><block_content pos:start="83:35" pos:end="83:78"> <expr_stmt pos:start="83:35" pos:end="83:78"><expr pos:start="83:35" pos:end="83:77"><name pos:start="83:35" pos:end="83:35">d</name><operator pos:start="83:36" pos:end="83:36">=</operator> <call pos:start="83:38" pos:end="83:64"><name pos:start="83:38" pos:end="83:47">av_get_int</name><argument_list pos:start="83:48" pos:end="83:64">(<argument pos:start="83:49" pos:end="83:51"><expr pos:start="83:49" pos:end="83:51"><name pos:start="83:49" pos:end="83:51">obj</name></expr></argument>, <argument pos:start="83:54" pos:end="83:57"><expr pos:start="83:54" pos:end="83:57"><name pos:start="83:54" pos:end="83:57">name</name></expr></argument>, <argument pos:start="83:60" pos:end="83:63"><expr pos:start="83:60" pos:end="83:63"><name pos:start="83:60" pos:end="83:63">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="83:66" pos:end="83:66">&amp;</operator><operator pos:start="83:67" pos:end="83:67">~</operator><operator pos:start="83:68" pos:end="83:68">(</operator><name pos:start="83:69" pos:end="83:75">int64_t</name><operator pos:start="83:76" pos:end="83:76">)</operator><name pos:start="83:77" pos:end="83:77">d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if><if type="elseif" pos:start="85:14" pos:end="87:22">else if<condition pos:start="85:21" pos:end="85:30">(<expr pos:start="85:22" pos:end="85:29"><name pos:start="85:22" pos:end="85:24">cmd</name><operator pos:start="85:25" pos:end="85:26">==</operator><literal type="char" pos:start="85:27" pos:end="85:29">'-'</literal></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:22"><block_content pos:start="87:17" pos:end="87:22">

                <expr_stmt pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:21"><name pos:start="87:17" pos:end="87:17">d</name><operator pos:start="87:18" pos:end="87:18">=</operator> <operator pos:start="87:20" pos:end="87:20">-</operator><name pos:start="87:21" pos:end="87:21">d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="91:13" pos:end="91:46"><expr pos:start="91:13" pos:end="91:45"><call pos:start="91:13" pos:end="91:45"><name pos:start="91:13" pos:end="91:25">av_set_number</name><argument_list pos:start="91:26" pos:end="91:45">(<argument pos:start="91:27" pos:end="91:29"><expr pos:start="91:27" pos:end="91:29"><name pos:start="91:27" pos:end="91:29">obj</name></expr></argument>, <argument pos:start="91:32" pos:end="91:35"><expr pos:start="91:32" pos:end="91:35"><name pos:start="91:32" pos:end="91:35">name</name></expr></argument>, <argument pos:start="91:38" pos:end="91:38"><expr pos:start="91:38" pos:end="91:38"><name pos:start="91:38" pos:end="91:38">d</name></expr></argument>, <argument pos:start="91:41" pos:end="91:41"><expr pos:start="91:41" pos:end="91:41"><literal type="number" pos:start="91:41" pos:end="91:41">1</literal></expr></argument>, <argument pos:start="91:44" pos:end="91:44"><expr pos:start="91:44" pos:end="91:44"><literal type="number" pos:start="91:44" pos:end="91:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="95:25"><if pos:start="93:13" pos:end="95:25">if<condition pos:start="93:15" pos:end="93:21">(<expr pos:start="93:16" pos:end="93:20"><operator pos:start="93:16" pos:end="93:16">!</operator><operator pos:start="93:17" pos:end="93:17">*</operator><name pos:start="93:18" pos:end="93:20">val</name></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:25"><block_content pos:start="95:17" pos:end="95:25">

                <return pos:start="95:17" pos:end="95:25">return <expr pos:start="95:24" pos:end="95:24"><name pos:start="95:24" pos:end="95:24">o</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <return pos:start="99:9" pos:end="99:20">return <expr pos:start="99:16" pos:end="99:19"><name pos:start="99:16" pos:end="99:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:58"><expr pos:start="105:5" pos:end="105:57"><call pos:start="105:5" pos:end="105:57"><name pos:start="105:5" pos:end="105:10">memcpy</name><argument_list pos:start="105:11" pos:end="105:57">(<argument pos:start="105:12" pos:end="105:38"><expr pos:start="105:12" pos:end="105:38"><operator pos:start="105:12" pos:end="105:12">(</operator><operator pos:start="105:13" pos:end="105:13">(</operator><name pos:start="105:14" pos:end="105:20">uint8_t</name><operator pos:start="105:21" pos:end="105:21">*</operator><operator pos:start="105:22" pos:end="105:22">)</operator><name pos:start="105:23" pos:end="105:25">obj</name><operator pos:start="105:26" pos:end="105:26">)</operator> <operator pos:start="105:28" pos:end="105:28">+</operator> <name pos:start="105:30" pos:end="105:38"><name pos:start="105:30" pos:end="105:30">o</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:38">offset</name></name></expr></argument>, <argument pos:start="105:41" pos:end="105:43"><expr pos:start="105:41" pos:end="105:43"><name pos:start="105:41" pos:end="105:43">val</name></expr></argument>, <argument pos:start="105:46" pos:end="105:56"><expr pos:start="105:46" pos:end="105:56"><sizeof pos:start="105:46" pos:end="105:56">sizeof<argument_list pos:start="105:52" pos:end="105:56">(<argument pos:start="105:53" pos:end="105:55"><expr pos:start="105:53" pos:end="105:55"><name pos:start="105:53" pos:end="105:55">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><name pos:start="107:12" pos:end="107:12">o</name></expr>;</return>

</block_content>}</block></function>
</unit>
