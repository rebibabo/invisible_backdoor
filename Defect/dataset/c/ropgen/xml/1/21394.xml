<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21394.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">vmdk_write_compressed</name><parameter_list pos:start="1:33" pos:end="7:48">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:49">BlockDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">bs</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:40">int64_t</name></type> <name pos:start="3:42" pos:end="3:51">sector_num</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:51"><decl pos:start="5:34" pos:end="5:51"><type pos:start="5:34" pos:end="5:51"><specifier pos:start="5:34" pos:end="5:38">const</specifier> <name pos:start="5:40" pos:end="5:46">uint8_t</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:51">buf</name></decl></parameter>,

                                 <parameter pos:start="7:34" pos:end="7:47"><decl pos:start="7:34" pos:end="7:47"><type pos:start="7:34" pos:end="7:47"><name pos:start="7:34" pos:end="7:36">int</name></type> <name pos:start="7:38" pos:end="7:47">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="53:1">{<block_content pos:start="11:5" pos:end="51:5">

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVVmdkState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="51:5"><if pos:start="15:5" pos:end="47:5">if <condition pos:start="15:8" pos:end="15:56">(<expr pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:22">num_extents</name></name> <operator pos:start="15:24" pos:end="15:25">==</operator> <literal type="number" pos:start="15:27" pos:end="15:27">1</literal> <operator pos:start="15:29" pos:end="15:30">&amp;&amp;</operator> <name pos:start="15:32" pos:end="15:44"><name pos:start="15:32" pos:end="15:32">s</name><operator pos:start="15:33" pos:end="15:34">-&gt;</operator><name pos:start="15:35" pos:end="15:41">extents</name><index pos:start="15:42" pos:end="15:44">[<expr pos:start="15:43" pos:end="15:43"><literal type="number" pos:start="15:43" pos:end="15:43">0</literal></expr>]</index></name><operator pos:start="15:45" pos:end="15:45">.</operator><name pos:start="15:46" pos:end="15:55">compressed</name></expr>)</condition> <block pos:start="15:58" pos:end="47:5">{<block_content pos:start="17:9" pos:end="45:24">

        <decl_stmt pos:start="17:9" pos:end="17:22"><decl pos:start="17:9" pos:end="17:21"><type pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:17">Coroutine</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:21">co</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:59"><decl pos:start="19:9" pos:end="19:58"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:18">AioContext</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:31">aio_context</name> <init pos:start="19:33" pos:end="19:58">= <expr pos:start="19:35" pos:end="19:58"><call pos:start="19:35" pos:end="19:58"><name pos:start="19:35" pos:end="19:54">bdrv_get_aio_context</name><argument_list pos:start="19:55" pos:end="19:58">(<argument pos:start="19:56" pos:end="19:57"><expr pos:start="19:56" pos:end="19:57"><name pos:start="19:56" pos:end="19:57">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="33:10"><decl pos:start="21:9" pos:end="33:9"><type pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:29">VmdkWriteCompressedCo</name></type> <name pos:start="21:31" pos:end="21:34">data</name> <init pos:start="21:36" pos:end="33:9">= <expr pos:start="21:38" pos:end="33:9"><block pos:start="21:38" pos:end="33:9">{

            <expr pos:start="23:13" pos:end="23:28"><operator pos:start="23:13" pos:end="23:13">.</operator><name pos:start="23:14" pos:end="23:15">bs</name>         <operator pos:start="23:25" pos:end="23:25">=</operator> <name pos:start="23:27" pos:end="23:28">bs</name></expr>,

            <expr pos:start="25:13" pos:end="25:36"><operator pos:start="25:13" pos:end="25:13">.</operator><name pos:start="25:14" pos:end="25:23">sector_num</name> <operator pos:start="25:25" pos:end="25:25">=</operator> <name pos:start="25:27" pos:end="25:36">sector_num</name></expr>,

            <expr pos:start="27:13" pos:end="27:29"><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:16">buf</name>        <operator pos:start="27:25" pos:end="27:25">=</operator> <name pos:start="27:27" pos:end="27:29">buf</name></expr>,

            <expr pos:start="29:13" pos:end="29:36"><operator pos:start="29:13" pos:end="29:13">.</operator><name pos:start="29:14" pos:end="29:23">nb_sectors</name> <operator pos:start="29:25" pos:end="29:25">=</operator> <name pos:start="29:27" pos:end="29:36">nb_sectors</name></expr>,

            <expr pos:start="31:13" pos:end="31:38"><operator pos:start="31:13" pos:end="31:13">.</operator><name pos:start="31:14" pos:end="31:16">ret</name>        <operator pos:start="31:25" pos:end="31:25">=</operator> <operator pos:start="31:27" pos:end="31:27">-</operator><name pos:start="31:28" pos:end="31:38">EINPROGRESS</name></expr>,

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:61"><expr pos:start="35:9" pos:end="35:60"><name pos:start="35:9" pos:end="35:10">co</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:60"><name pos:start="35:14" pos:end="35:34">qemu_coroutine_create</name><argument_list pos:start="35:35" pos:end="35:60">(<argument pos:start="35:36" pos:end="35:59"><expr pos:start="35:36" pos:end="35:59"><name pos:start="35:36" pos:end="35:59">vmdk_co_write_compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><call pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:28">qemu_coroutine_enter</name><argument_list pos:start="37:29" pos:end="37:39">(<argument pos:start="37:30" pos:end="37:31"><expr pos:start="37:30" pos:end="37:31"><name pos:start="37:30" pos:end="37:31">co</name></expr></argument>, <argument pos:start="37:34" pos:end="37:38"><expr pos:start="37:34" pos:end="37:38"><operator pos:start="37:34" pos:end="37:34">&amp;</operator><name pos:start="37:35" pos:end="37:38">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="39:9" pos:end="43:9">while <condition pos:start="39:15" pos:end="39:40">(<expr pos:start="39:16" pos:end="39:39"><name pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:19">data</name><operator pos:start="39:20" pos:end="39:20">.</operator><name pos:start="39:21" pos:end="39:23">ret</name></name> <operator pos:start="39:25" pos:end="39:26">==</operator> <operator pos:start="39:28" pos:end="39:28">-</operator><name pos:start="39:29" pos:end="39:39">EINPROGRESS</name></expr>)</condition> <block pos:start="39:42" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:40">

            <expr_stmt pos:start="41:13" pos:end="41:40"><expr pos:start="41:13" pos:end="41:39"><call pos:start="41:13" pos:end="41:39"><name pos:start="41:13" pos:end="41:20">aio_poll</name><argument_list pos:start="41:21" pos:end="41:39">(<argument pos:start="41:22" pos:end="41:32"><expr pos:start="41:22" pos:end="41:32"><name pos:start="41:22" pos:end="41:32">aio_context</name></expr></argument>, <argument pos:start="41:35" pos:end="41:38"><expr pos:start="41:35" pos:end="41:38"><name pos:start="41:35" pos:end="41:38">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <return pos:start="45:9" pos:end="45:24">return <expr pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:19">data</name><operator pos:start="45:20" pos:end="45:20">.</operator><name pos:start="45:21" pos:end="45:23">ret</name></name></expr>;</return>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:24">

        <return pos:start="49:9" pos:end="49:24">return <expr pos:start="49:16" pos:end="49:23"><operator pos:start="49:16" pos:end="49:16">-</operator><name pos:start="49:17" pos:end="49:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
