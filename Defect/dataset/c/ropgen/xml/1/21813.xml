<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21813.c" pos:tabs="8"><function pos:start="1:1" pos:end="287:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">elf_core_dump</name><parameter_list pos:start="1:25" pos:end="1:60">(<parameter pos:start="1:26" pos:end="1:34"><decl pos:start="1:26" pos:end="1:34"><type pos:start="1:26" pos:end="1:34"><name pos:start="1:26" pos:end="1:28">int</name></type> <name pos:start="1:30" pos:end="1:34">signr</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:59"><decl pos:start="1:37" pos:end="1:59"><type pos:start="1:37" pos:end="1:59"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:54">CPUArchState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="287:1">{<block_content pos:start="5:5" pos:end="285:15">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:20"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:18">CPUState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">cpu</name> <init pos:start="5:25" pos:end="5:58">= <expr pos:start="5:27" pos:end="5:58"><call pos:start="5:27" pos:end="5:58"><name pos:start="5:27" pos:end="5:37">ENV_GET_CPU</name><argument_list pos:start="5:38" pos:end="5:58">(<argument pos:start="5:39" pos:end="5:57"><expr pos:start="5:39" pos:end="5:57"><operator pos:start="5:39" pos:end="5:39">(</operator><name pos:start="5:40" pos:end="5:51">CPUArchState</name> <operator pos:start="5:53" pos:end="5:53">*</operator><operator pos:start="5:54" pos:end="5:54">)</operator><name pos:start="5:55" pos:end="5:57">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:21"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:19">TaskState</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">ts</name> <init pos:start="7:25" pos:end="7:56">= <expr pos:start="7:27" pos:end="7:56"><operator pos:start="7:27" pos:end="7:27">(</operator><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:42">TaskState</name> <operator pos:start="7:44" pos:end="7:44">*</operator><operator pos:start="7:45" pos:end="7:45">)</operator><name pos:start="7:46" pos:end="7:56"><name pos:start="7:46" pos:end="7:48">cpu</name><operator pos:start="7:49" pos:end="7:50">-&gt;</operator><name pos:start="7:51" pos:end="7:56">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:25">vm_area_struct</name></name> <modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:30">vma</name> <init pos:start="9:32" pos:end="9:37">= <expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:27"><name pos:start="11:10" pos:end="11:17">corefile</name><index pos:start="11:18" pos:end="11:27">[<expr pos:start="11:19" pos:end="11:26"><name pos:start="11:19" pos:end="11:26">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:24">elf_note_info</name></name></type> <name pos:start="13:26" pos:end="13:29">info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:17">elfhdr</name></name></type> <name pos:start="15:19" pos:end="15:21">elf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:19">elf_phdr</name></name></type> <name pos:start="17:21" pos:end="17:24">phdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:17">rlimit</name></name></type> <name pos:start="19:19" pos:end="19:26">dumpsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:20">mm_struct</name></name> <modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:24">mm</name> <init pos:start="21:26" pos:end="21:31">= <expr pos:start="21:28" pos:end="21:31"><name pos:start="21:28" pos:end="21:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:38"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:9">off_t</name></type> <name pos:start="23:11" pos:end="23:16">offset</name> <init pos:start="23:18" pos:end="23:20">= <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr></init></decl>, <decl pos:start="23:23" pos:end="23:37"><type ref="prev" pos:start="23:5" pos:end="23:9"/><name pos:start="23:23" pos:end="23:33">data_offset</name> <init pos:start="23:35" pos:end="23:37">= <expr pos:start="23:37" pos:end="23:37"><literal type="number" pos:start="23:37" pos:end="23:37">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:12">segs</name> <init pos:start="25:14" pos:end="25:16">= <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:16"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:10">fd</name> <init pos:start="27:12" pos:end="27:15">= <expr pos:start="27:14" pos:end="27:15"><operator pos:start="27:14" pos:end="27:14">-</operator><literal type="number" pos:start="27:15" pos:end="27:15">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><call pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:18">init_note_info</name><argument_list pos:start="31:19" pos:end="31:25">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><operator pos:start="31:20" pos:end="31:20">&amp;</operator><name pos:start="31:21" pos:end="31:24">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:14"><expr pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:9">errno</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <literal type="number" pos:start="35:13" pos:end="35:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><call pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:13">getrlimit</name><argument_list pos:start="37:14" pos:end="37:37">(<argument pos:start="37:15" pos:end="37:25"><expr pos:start="37:15" pos:end="37:25"><name pos:start="37:15" pos:end="37:25">RLIMIT_CORE</name></expr></argument>, <argument pos:start="37:28" pos:end="37:36"><expr pos:start="37:28" pos:end="37:36"><operator pos:start="37:28" pos:end="37:28">&amp;</operator><name pos:start="37:29" pos:end="37:36">dumpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:17"><if pos:start="39:5" pos:end="41:17">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:16">dumpsize</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:25">rlim_cur</name></name> <operator pos:start="39:27" pos:end="39:28">==</operator> <literal type="number" pos:start="39:30" pos:end="39:30">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:17"><block_content pos:start="41:9" pos:end="41:17">

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="47:24"><if pos:start="45:5" pos:end="47:24">if <condition pos:start="45:8" pos:end="45:64">(<expr pos:start="45:9" pos:end="45:63"><call pos:start="45:9" pos:end="45:59"><name pos:start="45:9" pos:end="45:26">core_dump_filename</name><argument_list pos:start="45:27" pos:end="45:59">(<argument pos:start="45:28" pos:end="45:29"><expr pos:start="45:28" pos:end="45:29"><name pos:start="45:28" pos:end="45:29">ts</name></expr></argument>, <argument pos:start="45:32" pos:end="45:39"><expr pos:start="45:32" pos:end="45:39"><name pos:start="45:32" pos:end="45:39">corefile</name></expr></argument>, <argument pos:start="45:42" pos:end="45:58"><expr pos:start="45:42" pos:end="45:58"><sizeof pos:start="45:42" pos:end="45:58">sizeof <argument_list pos:start="45:49" pos:end="45:58">(<argument pos:start="45:50" pos:end="45:57"><expr pos:start="45:50" pos:end="45:57"><name pos:start="45:50" pos:end="45:57">corefile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="45:61" pos:end="45:61">&lt;</operator> <literal type="number" pos:start="45:63" pos:end="45:63">0</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:24"><block_content pos:start="47:9" pos:end="47:24">

        <return pos:start="47:9" pos:end="47:24">return <expr pos:start="47:16" pos:end="47:23"><operator pos:start="47:16" pos:end="47:16">(</operator><operator pos:start="47:17" pos:end="47:17">-</operator><name pos:start="47:18" pos:end="47:22">errno</name><operator pos:start="47:23" pos:end="47:23">)</operator></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="55:24"><if pos:start="51:5" pos:end="55:24">if <condition pos:start="51:8" pos:end="53:57">(<expr pos:start="51:9" pos:end="53:56"><operator pos:start="51:9" pos:end="51:9">(</operator><name pos:start="51:10" pos:end="51:11">fd</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="53:51"><name pos:start="51:15" pos:end="51:18">open</name><argument_list pos:start="51:19" pos:end="53:51">(<argument pos:start="51:20" pos:end="51:27"><expr pos:start="51:20" pos:end="51:27"><name pos:start="51:20" pos:end="51:27">corefile</name></expr></argument>, <argument pos:start="51:30" pos:end="51:47"><expr pos:start="51:30" pos:end="51:47"><name pos:start="51:30" pos:end="51:37">O_WRONLY</name> <operator pos:start="51:39" pos:end="51:39">|</operator> <name pos:start="51:41" pos:end="51:47">O_CREAT</name></expr></argument>,

                   <argument pos:start="53:20" pos:end="53:50"><expr pos:start="53:20" pos:end="53:50"><name pos:start="53:20" pos:end="53:26">S_IRUSR</name><operator pos:start="53:27" pos:end="53:27">|</operator><name pos:start="53:28" pos:end="53:34">S_IWUSR</name><operator pos:start="53:35" pos:end="53:35">|</operator><name pos:start="53:36" pos:end="53:42">S_IRGRP</name><operator pos:start="53:43" pos:end="53:43">|</operator><name pos:start="53:44" pos:end="53:50">S_IROTH</name></expr></argument>)</argument_list></call><operator pos:start="53:52" pos:end="53:52">)</operator> <operator pos:start="53:54" pos:end="53:54">&lt;</operator> <literal type="number" pos:start="53:56" pos:end="53:56">0</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:24"><block_content pos:start="55:9" pos:end="55:24">

        <return pos:start="55:9" pos:end="55:24">return <expr pos:start="55:16" pos:end="55:23"><operator pos:start="55:16" pos:end="55:16">(</operator><operator pos:start="55:17" pos:end="55:17">-</operator><name pos:start="55:18" pos:end="55:22">errno</name><operator pos:start="55:23" pos:end="55:23">)</operator></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="67:7">/*

     * Walk through target process memory mappings and

     * set up structure containing this information.  After

     * this point vma_xxx functions can be used.

     */</comment>

    <if_stmt pos:start="69:5" pos:end="71:17"><if pos:start="69:5" pos:end="71:17">if <condition pos:start="69:8" pos:end="69:34">(<expr pos:start="69:9" pos:end="69:33"><operator pos:start="69:9" pos:end="69:9">(</operator><name pos:start="69:10" pos:end="69:11">mm</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:24"><name pos:start="69:15" pos:end="69:22">vma_init</name><argument_list pos:start="69:23" pos:end="69:24">()</argument_list></call><operator pos:start="69:25" pos:end="69:25">)</operator> <operator pos:start="69:27" pos:end="69:28">==</operator> <name pos:start="69:30" pos:end="69:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:17"><block_content pos:start="71:9" pos:end="71:17">

        <goto pos:start="71:9" pos:end="71:17">goto <name pos:start="71:14" pos:end="71:16">out</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:40"><expr pos:start="75:5" pos:end="75:39"><call pos:start="75:5" pos:end="75:39"><name pos:start="75:5" pos:end="75:23">walk_memory_regions</name><argument_list pos:start="75:24" pos:end="75:39">(<argument pos:start="75:25" pos:end="75:26"><expr pos:start="75:25" pos:end="75:26"><name pos:start="75:25" pos:end="75:26">mm</name></expr></argument>, <argument pos:start="75:29" pos:end="75:38"><expr pos:start="75:29" pos:end="75:38"><name pos:start="75:29" pos:end="75:38">vma_walker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:37"><expr pos:start="77:5" pos:end="77:36"><name pos:start="77:5" pos:end="77:8">segs</name> <operator pos:start="77:10" pos:end="77:10">=</operator> <call pos:start="77:12" pos:end="77:36"><name pos:start="77:12" pos:end="77:32">vma_get_mapping_count</name><argument_list pos:start="77:33" pos:end="77:36">(<argument pos:start="77:34" pos:end="77:35"><expr pos:start="77:34" pos:end="77:35"><name pos:start="77:34" pos:end="77:35">mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="87:7">/*

     * Construct valid coredump ELF header.  We also

     * add one more segment for notes.

     */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:52"><expr pos:start="89:5" pos:end="89:51"><call pos:start="89:5" pos:end="89:51"><name pos:start="89:5" pos:end="89:19">fill_elf_header</name><argument_list pos:start="89:20" pos:end="89:51">(<argument pos:start="89:21" pos:end="89:24"><expr pos:start="89:21" pos:end="89:24"><operator pos:start="89:21" pos:end="89:21">&amp;</operator><name pos:start="89:22" pos:end="89:24">elf</name></expr></argument>, <argument pos:start="89:27" pos:end="89:34"><expr pos:start="89:27" pos:end="89:34"><name pos:start="89:27" pos:end="89:30">segs</name> <operator pos:start="89:32" pos:end="89:32">+</operator> <literal type="number" pos:start="89:34" pos:end="89:34">1</literal></expr></argument>, <argument pos:start="89:37" pos:end="89:47"><expr pos:start="89:37" pos:end="89:47"><name pos:start="89:37" pos:end="89:47">ELF_MACHINE</name></expr></argument>, <argument pos:start="89:50" pos:end="89:50"><expr pos:start="89:50" pos:end="89:50"><literal type="number" pos:start="89:50" pos:end="89:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="93:17"><if pos:start="91:5" pos:end="93:17">if <condition pos:start="91:8" pos:end="91:48">(<expr pos:start="91:9" pos:end="91:47"><call pos:start="91:9" pos:end="91:42"><name pos:start="91:9" pos:end="91:18">dump_write</name><argument_list pos:start="91:19" pos:end="91:42">(<argument pos:start="91:20" pos:end="91:21"><expr pos:start="91:20" pos:end="91:21"><name pos:start="91:20" pos:end="91:21">fd</name></expr></argument>, <argument pos:start="91:24" pos:end="91:27"><expr pos:start="91:24" pos:end="91:27"><operator pos:start="91:24" pos:end="91:24">&amp;</operator><name pos:start="91:25" pos:end="91:27">elf</name></expr></argument>, <argument pos:start="91:30" pos:end="91:41"><expr pos:start="91:30" pos:end="91:41"><sizeof pos:start="91:30" pos:end="91:41">sizeof <argument_list pos:start="91:37" pos:end="91:41">(<argument pos:start="91:38" pos:end="91:40"><expr pos:start="91:38" pos:end="91:40"><name pos:start="91:38" pos:end="91:40">elf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="91:44" pos:end="91:45">!=</operator> <literal type="number" pos:start="91:47" pos:end="91:47">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:17"><block_content pos:start="93:9" pos:end="93:17">

        <goto pos:start="93:9" pos:end="93:17">goto <name pos:start="93:14" pos:end="93:16">out</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:48">/* fill in the in-memory version of notes */</comment>

    <if_stmt pos:start="99:5" pos:end="101:17"><if pos:start="99:5" pos:end="101:17">if <condition pos:start="99:8" pos:end="99:46">(<expr pos:start="99:9" pos:end="99:45"><call pos:start="99:9" pos:end="99:41"><name pos:start="99:9" pos:end="99:22">fill_note_info</name><argument_list pos:start="99:23" pos:end="99:41">(<argument pos:start="99:24" pos:end="99:28"><expr pos:start="99:24" pos:end="99:28"><operator pos:start="99:24" pos:end="99:24">&amp;</operator><name pos:start="99:25" pos:end="99:28">info</name></expr></argument>, <argument pos:start="99:31" pos:end="99:35"><expr pos:start="99:31" pos:end="99:35"><name pos:start="99:31" pos:end="99:35">signr</name></expr></argument>, <argument pos:start="99:38" pos:end="99:40"><expr pos:start="99:38" pos:end="99:40"><name pos:start="99:38" pos:end="99:40">env</name></expr></argument>)</argument_list></call> <operator pos:start="99:43" pos:end="99:43">&lt;</operator> <literal type="number" pos:start="99:45" pos:end="99:45">0</literal></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:17"><block_content pos:start="101:9" pos:end="101:17">

        <goto pos:start="101:9" pos:end="101:17">goto <name pos:start="101:14" pos:end="101:16">out</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:27"><expr pos:start="105:5" pos:end="105:26"><name pos:start="105:5" pos:end="105:10">offset</name> <operator pos:start="105:12" pos:end="105:13">+=</operator> <sizeof pos:start="105:15" pos:end="105:26">sizeof <argument_list pos:start="105:22" pos:end="105:26">(<argument pos:start="105:23" pos:end="105:25"><expr pos:start="105:23" pos:end="105:25"><name pos:start="105:23" pos:end="105:25">elf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>                             <comment type="block" pos:start="105:57" pos:end="105:72">/* elf header */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:52"><expr pos:start="107:5" pos:end="107:51"><name pos:start="107:5" pos:end="107:10">offset</name> <operator pos:start="107:12" pos:end="107:13">+=</operator> <operator pos:start="107:15" pos:end="107:15">(</operator><name pos:start="107:16" pos:end="107:19">segs</name> <operator pos:start="107:21" pos:end="107:21">+</operator> <literal type="number" pos:start="107:23" pos:end="107:23">1</literal><operator pos:start="107:24" pos:end="107:24">)</operator> <operator pos:start="107:26" pos:end="107:26">*</operator> <sizeof pos:start="107:28" pos:end="107:51">sizeof <argument_list pos:start="107:35" pos:end="107:51">(<argument pos:start="107:36" pos:end="107:50"><expr pos:start="107:36" pos:end="107:50">struct <name pos:start="107:43" pos:end="107:50">elf_phdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>    <comment type="block" pos:start="107:57" pos:end="107:77">/* program headers */</comment>



    <comment type="block" pos:start="111:5" pos:end="111:40">/* write out notes program header */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:55"><expr pos:start="113:5" pos:end="113:54"><call pos:start="113:5" pos:end="113:54"><name pos:start="113:5" pos:end="113:22">fill_elf_note_phdr</name><argument_list pos:start="113:23" pos:end="113:54">(<argument pos:start="113:24" pos:end="113:28"><expr pos:start="113:24" pos:end="113:28"><operator pos:start="113:24" pos:end="113:24">&amp;</operator><name pos:start="113:25" pos:end="113:28">phdr</name></expr></argument>, <argument pos:start="113:31" pos:end="113:45"><expr pos:start="113:31" pos:end="113:45"><name pos:start="113:31" pos:end="113:45"><name pos:start="113:31" pos:end="113:34">info</name><operator pos:start="113:35" pos:end="113:35">.</operator><name pos:start="113:36" pos:end="113:45">notes_size</name></name></expr></argument>, <argument pos:start="113:48" pos:end="113:53"><expr pos:start="113:48" pos:end="113:53"><name pos:start="113:48" pos:end="113:53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:30"><expr pos:start="117:5" pos:end="117:29"><name pos:start="117:5" pos:end="117:10">offset</name> <operator pos:start="117:12" pos:end="117:13">+=</operator> <name pos:start="117:15" pos:end="117:29"><name pos:start="117:15" pos:end="117:18">info</name><operator pos:start="117:19" pos:end="117:19">.</operator><name pos:start="117:20" pos:end="117:29">notes_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="121:17"><if pos:start="119:5" pos:end="121:17">if <condition pos:start="119:8" pos:end="119:50">(<expr pos:start="119:9" pos:end="119:49"><call pos:start="119:9" pos:end="119:44"><name pos:start="119:9" pos:end="119:18">dump_write</name><argument_list pos:start="119:19" pos:end="119:44">(<argument pos:start="119:20" pos:end="119:21"><expr pos:start="119:20" pos:end="119:21"><name pos:start="119:20" pos:end="119:21">fd</name></expr></argument>, <argument pos:start="119:24" pos:end="119:28"><expr pos:start="119:24" pos:end="119:28"><operator pos:start="119:24" pos:end="119:24">&amp;</operator><name pos:start="119:25" pos:end="119:28">phdr</name></expr></argument>, <argument pos:start="119:31" pos:end="119:43"><expr pos:start="119:31" pos:end="119:43"><sizeof pos:start="119:31" pos:end="119:43">sizeof <argument_list pos:start="119:38" pos:end="119:43">(<argument pos:start="119:39" pos:end="119:42"><expr pos:start="119:39" pos:end="119:42"><name pos:start="119:39" pos:end="119:42">phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="119:46" pos:end="119:47">!=</operator> <literal type="number" pos:start="119:49" pos:end="119:49">0</literal></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:17"><block_content pos:start="121:9" pos:end="121:17">

        <goto pos:start="121:9" pos:end="121:17">goto <name pos:start="121:14" pos:end="121:16">out</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="131:7">/*

     * ELF specification wants data to start at page boundary so

     * we align it here.

     */</comment>

    <expr_stmt pos:start="133:5" pos:end="133:62"><expr pos:start="133:5" pos:end="133:61"><name pos:start="133:5" pos:end="133:15">data_offset</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:24">offset</name> <operator pos:start="133:26" pos:end="133:26">=</operator> <call pos:start="133:28" pos:end="133:61"><name pos:start="133:28" pos:end="133:34">roundup</name><argument_list pos:start="133:35" pos:end="133:61">(<argument pos:start="133:36" pos:end="133:41"><expr pos:start="133:36" pos:end="133:41"><name pos:start="133:36" pos:end="133:41">offset</name></expr></argument>, <argument pos:start="133:44" pos:end="133:60"><expr pos:start="133:44" pos:end="133:60"><name pos:start="133:44" pos:end="133:60">ELF_EXEC_PAGESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="137:5" pos:end="143:7">/*

     * Write program headers for memory regions mapped in

     * the target process.

     */</comment>

    <for pos:start="145:5" pos:end="183:5">for <control pos:start="145:9" pos:end="145:63">(<init pos:start="145:10" pos:end="145:29"><expr pos:start="145:10" pos:end="145:28"><name pos:start="145:10" pos:end="145:12">vma</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <call pos:start="145:16" pos:end="145:28"><name pos:start="145:16" pos:end="145:24">vma_first</name><argument_list pos:start="145:25" pos:end="145:28">(<argument pos:start="145:26" pos:end="145:27"><expr pos:start="145:26" pos:end="145:27"><name pos:start="145:26" pos:end="145:27">mm</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="145:31" pos:end="145:42"><expr pos:start="145:31" pos:end="145:41"><name pos:start="145:31" pos:end="145:33">vma</name> <operator pos:start="145:35" pos:end="145:36">!=</operator> <name pos:start="145:38" pos:end="145:41">NULL</name></expr>;</condition> <incr pos:start="145:44" pos:end="145:62"><expr pos:start="145:44" pos:end="145:62"><name pos:start="145:44" pos:end="145:46">vma</name> <operator pos:start="145:48" pos:end="145:48">=</operator> <call pos:start="145:50" pos:end="145:62"><name pos:start="145:50" pos:end="145:57">vma_next</name><argument_list pos:start="145:58" pos:end="145:62">(<argument pos:start="145:59" pos:end="145:61"><expr pos:start="145:59" pos:end="145:61"><name pos:start="145:59" pos:end="145:61">vma</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="145:65" pos:end="183:5">{<block_content pos:start="147:9" pos:end="181:45">

        <expr_stmt pos:start="147:9" pos:end="147:47"><expr pos:start="147:9" pos:end="147:46"><operator pos:start="147:9" pos:end="147:9">(</operator><name pos:start="147:10" pos:end="147:13">void</name><operator pos:start="147:14" pos:end="147:14">)</operator> <call pos:start="147:16" pos:end="147:46"><name pos:start="147:16" pos:end="147:21">memset</name><argument_list pos:start="147:22" pos:end="147:46">(<argument pos:start="147:23" pos:end="147:27"><expr pos:start="147:23" pos:end="147:27"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:27">phdr</name></expr></argument>, <argument pos:start="147:30" pos:end="147:30"><expr pos:start="147:30" pos:end="147:30"><literal type="number" pos:start="147:30" pos:end="147:30">0</literal></expr></argument>, <argument pos:start="147:33" pos:end="147:45"><expr pos:start="147:33" pos:end="147:45"><sizeof pos:start="147:33" pos:end="147:45">sizeof <argument_list pos:start="147:40" pos:end="147:45">(<argument pos:start="147:41" pos:end="147:44"><expr pos:start="147:41" pos:end="147:44"><name pos:start="147:41" pos:end="147:44">phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:30"><expr pos:start="151:9" pos:end="151:29"><name pos:start="151:9" pos:end="151:19"><name pos:start="151:9" pos:end="151:12">phdr</name><operator pos:start="151:13" pos:end="151:13">.</operator><name pos:start="151:14" pos:end="151:19">p_type</name></name> <operator pos:start="151:21" pos:end="151:21">=</operator> <name pos:start="151:23" pos:end="151:29">PT_LOAD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:31"><expr pos:start="153:9" pos:end="153:30"><name pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:12">phdr</name><operator pos:start="153:13" pos:end="153:13">.</operator><name pos:start="153:14" pos:end="153:21">p_offset</name></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <name pos:start="153:25" pos:end="153:30">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:38"><expr pos:start="155:9" pos:end="155:37"><name pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:12">phdr</name><operator pos:start="155:13" pos:end="155:13">.</operator><name pos:start="155:14" pos:end="155:20">p_vaddr</name></name> <operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:37"><name pos:start="155:24" pos:end="155:26">vma</name><operator pos:start="155:27" pos:end="155:28">-&gt;</operator><name pos:start="155:29" pos:end="155:37">vma_start</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:25"><expr pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:12">phdr</name><operator pos:start="157:13" pos:end="157:13">.</operator><name pos:start="157:14" pos:end="157:20">p_paddr</name></name> <operator pos:start="157:22" pos:end="157:22">=</operator> <literal type="number" pos:start="157:24" pos:end="157:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:43"><expr pos:start="159:9" pos:end="159:42"><name pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:12">phdr</name><operator pos:start="159:13" pos:end="159:13">.</operator><name pos:start="159:14" pos:end="159:21">p_filesz</name></name> <operator pos:start="159:23" pos:end="159:23">=</operator> <call pos:start="159:25" pos:end="159:42"><name pos:start="159:25" pos:end="159:37">vma_dump_size</name><argument_list pos:start="159:38" pos:end="159:42">(<argument pos:start="159:39" pos:end="159:41"><expr pos:start="159:39" pos:end="159:41"><name pos:start="159:39" pos:end="159:41">vma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:32"><expr pos:start="161:9" pos:end="161:31"><name pos:start="161:9" pos:end="161:14">offset</name> <operator pos:start="161:16" pos:end="161:17">+=</operator> <name pos:start="161:19" pos:end="161:31"><name pos:start="161:19" pos:end="161:22">phdr</name><operator pos:start="161:23" pos:end="161:23">.</operator><name pos:start="161:24" pos:end="161:31">p_filesz</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:53"><expr pos:start="163:9" pos:end="163:52"><name pos:start="163:9" pos:end="163:20"><name pos:start="163:9" pos:end="163:12">phdr</name><operator pos:start="163:13" pos:end="163:13">.</operator><name pos:start="163:14" pos:end="163:20">p_memsz</name></name> <operator pos:start="163:22" pos:end="163:22">=</operator> <name pos:start="163:24" pos:end="163:35"><name pos:start="163:24" pos:end="163:26">vma</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:35">vma_end</name></name> <operator pos:start="163:37" pos:end="163:37">-</operator> <name pos:start="163:39" pos:end="163:52"><name pos:start="163:39" pos:end="163:41">vma</name><operator pos:start="163:42" pos:end="163:43">-&gt;</operator><name pos:start="163:44" pos:end="163:52">vma_start</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:61"><expr pos:start="165:9" pos:end="165:60"><name pos:start="165:9" pos:end="165:20"><name pos:start="165:9" pos:end="165:12">phdr</name><operator pos:start="165:13" pos:end="165:13">.</operator><name pos:start="165:14" pos:end="165:20">p_flags</name></name> <operator pos:start="165:22" pos:end="165:22">=</operator> <ternary pos:start="165:24" pos:end="165:60"><condition pos:start="165:24" pos:end="165:51"><expr pos:start="165:24" pos:end="165:49"><name pos:start="165:24" pos:end="165:37"><name pos:start="165:24" pos:end="165:26">vma</name><operator pos:start="165:27" pos:end="165:28">-&gt;</operator><name pos:start="165:29" pos:end="165:37">vma_flags</name></name> <operator pos:start="165:39" pos:end="165:39">&amp;</operator> <name pos:start="165:41" pos:end="165:49">PROT_READ</name></expr> ?</condition><then pos:start="165:53" pos:end="165:56"> <expr pos:start="165:53" pos:end="165:56"><name pos:start="165:53" pos:end="165:56">PF_R</name></expr> </then><else pos:start="165:58" pos:end="165:60">: <expr pos:start="165:60" pos:end="165:60"><literal type="number" pos:start="165:60" pos:end="165:60">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="169:33"><if pos:start="167:9" pos:end="169:33">if <condition pos:start="167:12" pos:end="167:40">(<expr pos:start="167:13" pos:end="167:39"><name pos:start="167:13" pos:end="167:26"><name pos:start="167:13" pos:end="167:15">vma</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:26">vma_flags</name></name> <operator pos:start="167:28" pos:end="167:28">&amp;</operator> <name pos:start="167:30" pos:end="167:39">PROT_WRITE</name></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:33"><block_content pos:start="169:13" pos:end="169:33">

            <expr_stmt pos:start="169:13" pos:end="169:33"><expr pos:start="169:13" pos:end="169:32"><name pos:start="169:13" pos:end="169:24"><name pos:start="169:13" pos:end="169:16">phdr</name><operator pos:start="169:17" pos:end="169:17">.</operator><name pos:start="169:18" pos:end="169:24">p_flags</name></name> <operator pos:start="169:26" pos:end="169:27">|=</operator> <name pos:start="169:29" pos:end="169:32">PF_W</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="171:9" pos:end="173:33"><if pos:start="171:9" pos:end="173:33">if <condition pos:start="171:12" pos:end="171:39">(<expr pos:start="171:13" pos:end="171:38"><name pos:start="171:13" pos:end="171:26"><name pos:start="171:13" pos:end="171:15">vma</name><operator pos:start="171:16" pos:end="171:17">-&gt;</operator><name pos:start="171:18" pos:end="171:26">vma_flags</name></name> <operator pos:start="171:28" pos:end="171:28">&amp;</operator> <name pos:start="171:30" pos:end="171:38">PROT_EXEC</name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:33"><block_content pos:start="173:13" pos:end="173:33">

            <expr_stmt pos:start="173:13" pos:end="173:33"><expr pos:start="173:13" pos:end="173:32"><name pos:start="173:13" pos:end="173:24"><name pos:start="173:13" pos:end="173:16">phdr</name><operator pos:start="173:17" pos:end="173:17">.</operator><name pos:start="173:18" pos:end="173:24">p_flags</name></name> <operator pos:start="173:26" pos:end="173:27">|=</operator> <name pos:start="173:29" pos:end="173:32">PF_X</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:41"><expr pos:start="175:9" pos:end="175:40"><name pos:start="175:9" pos:end="175:20"><name pos:start="175:9" pos:end="175:12">phdr</name><operator pos:start="175:13" pos:end="175:13">.</operator><name pos:start="175:14" pos:end="175:20">p_align</name></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <name pos:start="175:24" pos:end="175:40">ELF_EXEC_PAGESIZE</name></expr>;</expr_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:29"><expr pos:start="179:9" pos:end="179:28"><call pos:start="179:9" pos:end="179:28"><name pos:start="179:9" pos:end="179:18">bswap_phdr</name><argument_list pos:start="179:19" pos:end="179:28">(<argument pos:start="179:20" pos:end="179:24"><expr pos:start="179:20" pos:end="179:24"><operator pos:start="179:20" pos:end="179:20">&amp;</operator><name pos:start="179:21" pos:end="179:24">phdr</name></expr></argument>, <argument pos:start="179:27" pos:end="179:27"><expr pos:start="179:27" pos:end="179:27"><literal type="number" pos:start="179:27" pos:end="179:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:45"><expr pos:start="181:9" pos:end="181:44"><call pos:start="181:9" pos:end="181:44"><name pos:start="181:9" pos:end="181:18">dump_write</name><argument_list pos:start="181:19" pos:end="181:44">(<argument pos:start="181:20" pos:end="181:21"><expr pos:start="181:20" pos:end="181:21"><name pos:start="181:20" pos:end="181:21">fd</name></expr></argument>, <argument pos:start="181:24" pos:end="181:28"><expr pos:start="181:24" pos:end="181:28"><operator pos:start="181:24" pos:end="181:24">&amp;</operator><name pos:start="181:25" pos:end="181:28">phdr</name></expr></argument>, <argument pos:start="181:31" pos:end="181:43"><expr pos:start="181:31" pos:end="181:43"><sizeof pos:start="181:31" pos:end="181:43">sizeof <argument_list pos:start="181:38" pos:end="181:43">(<argument pos:start="181:39" pos:end="181:42"><expr pos:start="181:39" pos:end="181:42"><name pos:start="181:39" pos:end="181:42">phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="187:5" pos:end="193:7">/*

     * Next we write notes just after program headers.  No

     * alignment needed here.

     */</comment>

    <if_stmt pos:start="195:5" pos:end="197:17"><if pos:start="195:5" pos:end="197:17">if <condition pos:start="195:8" pos:end="195:39">(<expr pos:start="195:9" pos:end="195:38"><call pos:start="195:9" pos:end="195:34"><name pos:start="195:9" pos:end="195:23">write_note_info</name><argument_list pos:start="195:24" pos:end="195:34">(<argument pos:start="195:25" pos:end="195:29"><expr pos:start="195:25" pos:end="195:29"><operator pos:start="195:25" pos:end="195:25">&amp;</operator><name pos:start="195:26" pos:end="195:29">info</name></expr></argument>, <argument pos:start="195:32" pos:end="195:33"><expr pos:start="195:32" pos:end="195:33"><name pos:start="195:32" pos:end="195:33">fd</name></expr></argument>)</argument_list></call> <operator pos:start="195:36" pos:end="195:36">&lt;</operator> <literal type="number" pos:start="195:38" pos:end="195:38">0</literal></expr>)</condition><block type="pseudo" pos:start="197:9" pos:end="197:17"><block_content pos:start="197:9" pos:end="197:17">

        <goto pos:start="197:9" pos:end="197:17">goto <name pos:start="197:14" pos:end="197:16">out</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="201:5" pos:end="201:37">/* align data to page boundary */</comment>

    <if_stmt pos:start="203:5" pos:end="205:17"><if pos:start="203:5" pos:end="205:17">if <condition pos:start="203:8" pos:end="203:56">(<expr pos:start="203:9" pos:end="203:55"><call pos:start="203:9" pos:end="203:40"><name pos:start="203:9" pos:end="203:13">lseek</name><argument_list pos:start="203:14" pos:end="203:40">(<argument pos:start="203:15" pos:end="203:16"><expr pos:start="203:15" pos:end="203:16"><name pos:start="203:15" pos:end="203:16">fd</name></expr></argument>, <argument pos:start="203:19" pos:end="203:29"><expr pos:start="203:19" pos:end="203:29"><name pos:start="203:19" pos:end="203:29">data_offset</name></expr></argument>, <argument pos:start="203:32" pos:end="203:39"><expr pos:start="203:32" pos:end="203:39"><name pos:start="203:32" pos:end="203:39">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="203:42" pos:end="203:43">!=</operator> <name pos:start="203:45" pos:end="203:55">data_offset</name></expr>)</condition><block type="pseudo" pos:start="205:9" pos:end="205:17"><block_content pos:start="205:9" pos:end="205:17">

        <goto pos:start="205:9" pos:end="205:17">goto <name pos:start="205:14" pos:end="205:16">out</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="209:5" pos:end="213:7">/*

     * Finally we can dump process memory into corefile as well.

     */</comment>

    <for pos:start="215:5" pos:end="265:5">for <control pos:start="215:9" pos:end="215:63">(<init pos:start="215:10" pos:end="215:29"><expr pos:start="215:10" pos:end="215:28"><name pos:start="215:10" pos:end="215:12">vma</name> <operator pos:start="215:14" pos:end="215:14">=</operator> <call pos:start="215:16" pos:end="215:28"><name pos:start="215:16" pos:end="215:24">vma_first</name><argument_list pos:start="215:25" pos:end="215:28">(<argument pos:start="215:26" pos:end="215:27"><expr pos:start="215:26" pos:end="215:27"><name pos:start="215:26" pos:end="215:27">mm</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="215:31" pos:end="215:42"><expr pos:start="215:31" pos:end="215:41"><name pos:start="215:31" pos:end="215:33">vma</name> <operator pos:start="215:35" pos:end="215:36">!=</operator> <name pos:start="215:38" pos:end="215:41">NULL</name></expr>;</condition> <incr pos:start="215:44" pos:end="215:62"><expr pos:start="215:44" pos:end="215:62"><name pos:start="215:44" pos:end="215:46">vma</name> <operator pos:start="215:48" pos:end="215:48">=</operator> <call pos:start="215:50" pos:end="215:62"><name pos:start="215:50" pos:end="215:57">vma_next</name><argument_list pos:start="215:58" pos:end="215:62">(<argument pos:start="215:59" pos:end="215:61"><expr pos:start="215:59" pos:end="215:61"><name pos:start="215:59" pos:end="215:61">vma</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="215:65" pos:end="265:5">{<block_content pos:start="217:9" pos:end="263:9">

        <decl_stmt pos:start="217:9" pos:end="217:23"><decl pos:start="217:9" pos:end="217:22"><type pos:start="217:9" pos:end="217:17"><name pos:start="217:9" pos:end="217:17">abi_ulong</name></type> <name pos:start="217:19" pos:end="217:22">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="219:9" pos:end="219:22"><decl pos:start="219:9" pos:end="219:21"><type pos:start="219:9" pos:end="219:17"><name pos:start="219:9" pos:end="219:17">abi_ulong</name></type> <name pos:start="219:19" pos:end="219:21">end</name></decl>;</decl_stmt>



        <expr_stmt pos:start="223:9" pos:end="223:50"><expr pos:start="223:9" pos:end="223:49"><name pos:start="223:9" pos:end="223:11">end</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <name pos:start="223:15" pos:end="223:28"><name pos:start="223:15" pos:end="223:17">vma</name><operator pos:start="223:18" pos:end="223:19">-&gt;</operator><name pos:start="223:20" pos:end="223:28">vma_start</name></name> <operator pos:start="223:30" pos:end="223:30">+</operator> <call pos:start="223:32" pos:end="223:49"><name pos:start="223:32" pos:end="223:44">vma_dump_size</name><argument_list pos:start="223:45" pos:end="223:49">(<argument pos:start="223:46" pos:end="223:48"><expr pos:start="223:46" pos:end="223:48"><name pos:start="223:46" pos:end="223:48">vma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="227:9" pos:end="263:9">for <control pos:start="227:13" pos:end="229:38">(<init pos:start="227:14" pos:end="227:35"><expr pos:start="227:14" pos:end="227:34"><name pos:start="227:14" pos:end="227:17">addr</name> <operator pos:start="227:19" pos:end="227:19">=</operator> <name pos:start="227:21" pos:end="227:34"><name pos:start="227:21" pos:end="227:23">vma</name><operator pos:start="227:24" pos:end="227:25">-&gt;</operator><name pos:start="227:26" pos:end="227:34">vma_start</name></name></expr>;</init> <condition pos:start="227:37" pos:end="227:47"><expr pos:start="227:37" pos:end="227:46"><name pos:start="227:37" pos:end="227:40">addr</name> <operator pos:start="227:42" pos:end="227:42">&lt;</operator> <name pos:start="227:44" pos:end="227:46">end</name></expr>;</condition>

             <incr pos:start="229:14" pos:end="229:37"><expr pos:start="229:14" pos:end="229:37"><name pos:start="229:14" pos:end="229:17">addr</name> <operator pos:start="229:19" pos:end="229:20">+=</operator> <name pos:start="229:22" pos:end="229:37">TARGET_PAGE_SIZE</name></expr></incr>)</control> <block pos:start="229:40" pos:end="263:9">{<block_content pos:start="231:13" pos:end="261:25">

            <decl_stmt pos:start="231:13" pos:end="231:40"><decl pos:start="231:13" pos:end="231:39"><type pos:start="231:13" pos:end="231:16"><name pos:start="231:13" pos:end="231:16">char</name></type> <name pos:start="231:18" pos:end="231:39"><name pos:start="231:18" pos:end="231:21">page</name><index pos:start="231:22" pos:end="231:39">[<expr pos:start="231:23" pos:end="231:38"><name pos:start="231:23" pos:end="231:38">TARGET_PAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="233:13" pos:end="233:22"><decl pos:start="233:13" pos:end="233:21"><type pos:start="233:13" pos:end="233:15"><name pos:start="233:13" pos:end="233:15">int</name></type> <name pos:start="233:17" pos:end="233:21">error</name></decl>;</decl_stmt>



            <comment type="block" pos:start="237:13" pos:end="243:15">/*

             *  Read in page from target process memory and

             *  write it to coredump file.

             */</comment>

            <expr_stmt pos:start="245:13" pos:end="245:62"><expr pos:start="245:13" pos:end="245:61"><name pos:start="245:13" pos:end="245:17">error</name> <operator pos:start="245:19" pos:end="245:19">=</operator> <call pos:start="245:21" pos:end="245:61"><name pos:start="245:21" pos:end="245:34">copy_from_user</name><argument_list pos:start="245:35" pos:end="245:61">(<argument pos:start="245:36" pos:end="245:39"><expr pos:start="245:36" pos:end="245:39"><name pos:start="245:36" pos:end="245:39">page</name></expr></argument>, <argument pos:start="245:42" pos:end="245:45"><expr pos:start="245:42" pos:end="245:45"><name pos:start="245:42" pos:end="245:45">addr</name></expr></argument>, <argument pos:start="245:48" pos:end="245:60"><expr pos:start="245:48" pos:end="245:60"><sizeof pos:start="245:48" pos:end="245:60">sizeof <argument_list pos:start="245:55" pos:end="245:60">(<argument pos:start="245:56" pos:end="245:59"><expr pos:start="245:56" pos:end="245:59"><name pos:start="245:56" pos:end="245:59">page</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="247:13" pos:end="257:13"><if pos:start="247:13" pos:end="257:13">if <condition pos:start="247:16" pos:end="247:27">(<expr pos:start="247:17" pos:end="247:26"><name pos:start="247:17" pos:end="247:21">error</name> <operator pos:start="247:23" pos:end="247:24">!=</operator> <literal type="number" pos:start="247:26" pos:end="247:26">0</literal></expr>)</condition> <block pos:start="247:29" pos:end="257:13">{<block_content pos:start="249:17" pos:end="255:25">

                <expr_stmt pos:start="249:17" pos:end="251:37"><expr pos:start="249:17" pos:end="251:36"><operator pos:start="249:17" pos:end="249:17">(</operator><name pos:start="249:18" pos:end="249:21">void</name><operator pos:start="249:22" pos:end="249:22">)</operator> <call pos:start="249:24" pos:end="251:36"><name pos:start="249:24" pos:end="249:30">fprintf</name><argument_list pos:start="249:31" pos:end="251:36">(<argument pos:start="249:32" pos:end="249:37"><expr pos:start="249:32" pos:end="249:37"><name pos:start="249:32" pos:end="249:37">stderr</name></expr></argument>, <argument pos:start="249:40" pos:end="249:79"><expr pos:start="249:40" pos:end="249:79"><literal type="string" pos:start="249:40" pos:end="249:56">"unable to dump "</literal> <name pos:start="249:58" pos:end="249:74">TARGET_ABI_FMT_lx</name> <literal type="string" pos:start="249:76" pos:end="249:79">"\n"</literal></expr></argument>,

                               <argument pos:start="251:32" pos:end="251:35"><expr pos:start="251:32" pos:end="251:35"><name pos:start="251:32" pos:end="251:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:31"><expr pos:start="253:17" pos:end="253:30"><name pos:start="253:17" pos:end="253:21">errno</name> <operator pos:start="253:23" pos:end="253:23">=</operator> <operator pos:start="253:25" pos:end="253:25">-</operator><name pos:start="253:26" pos:end="253:30">error</name></expr>;</expr_stmt>

                <goto pos:start="255:17" pos:end="255:25">goto <name pos:start="255:22" pos:end="255:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="259:13" pos:end="261:25"><if pos:start="259:13" pos:end="261:25">if <condition pos:start="259:16" pos:end="259:59">(<expr pos:start="259:17" pos:end="259:58"><call pos:start="259:17" pos:end="259:54"><name pos:start="259:17" pos:end="259:26">dump_write</name><argument_list pos:start="259:27" pos:end="259:54">(<argument pos:start="259:28" pos:end="259:29"><expr pos:start="259:28" pos:end="259:29"><name pos:start="259:28" pos:end="259:29">fd</name></expr></argument>, <argument pos:start="259:32" pos:end="259:35"><expr pos:start="259:32" pos:end="259:35"><name pos:start="259:32" pos:end="259:35">page</name></expr></argument>, <argument pos:start="259:38" pos:end="259:53"><expr pos:start="259:38" pos:end="259:53"><name pos:start="259:38" pos:end="259:53">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="259:56" pos:end="259:56">&lt;</operator> <literal type="number" pos:start="259:58" pos:end="259:58">0</literal></expr>)</condition><block type="pseudo" pos:start="261:17" pos:end="261:25"><block_content pos:start="261:17" pos:end="261:25">

                <goto pos:start="261:17" pos:end="261:25">goto <name pos:start="261:22" pos:end="261:24">out</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



 <label pos:start="269:2" pos:end="269:5"><name pos:start="269:2" pos:end="269:4">out</name>:</label>

    <expr_stmt pos:start="271:5" pos:end="271:26"><expr pos:start="271:5" pos:end="271:25"><call pos:start="271:5" pos:end="271:25"><name pos:start="271:5" pos:end="271:18">free_note_info</name><argument_list pos:start="271:19" pos:end="271:25">(<argument pos:start="271:20" pos:end="271:24"><expr pos:start="271:20" pos:end="271:24"><operator pos:start="271:20" pos:end="271:20">&amp;</operator><name pos:start="271:21" pos:end="271:24">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="273:5" pos:end="275:23"><if pos:start="273:5" pos:end="275:23">if <condition pos:start="273:8" pos:end="273:19">(<expr pos:start="273:9" pos:end="273:18"><name pos:start="273:9" pos:end="273:10">mm</name> <operator pos:start="273:12" pos:end="273:13">!=</operator> <name pos:start="273:15" pos:end="273:18">NULL</name></expr>)</condition><block type="pseudo" pos:start="275:9" pos:end="275:23"><block_content pos:start="275:9" pos:end="275:23">

        <expr_stmt pos:start="275:9" pos:end="275:23"><expr pos:start="275:9" pos:end="275:22"><call pos:start="275:9" pos:end="275:22"><name pos:start="275:9" pos:end="275:18">vma_delete</name><argument_list pos:start="275:19" pos:end="275:22">(<argument pos:start="275:20" pos:end="275:21"><expr pos:start="275:20" pos:end="275:21"><name pos:start="275:20" pos:end="275:21">mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:21"><expr pos:start="277:5" pos:end="277:20"><operator pos:start="277:5" pos:end="277:5">(</operator><name pos:start="277:6" pos:end="277:9">void</name><operator pos:start="277:10" pos:end="277:10">)</operator> <call pos:start="277:12" pos:end="277:20"><name pos:start="277:12" pos:end="277:16">close</name><argument_list pos:start="277:17" pos:end="277:20">(<argument pos:start="277:18" pos:end="277:19"><expr pos:start="277:18" pos:end="277:19"><name pos:start="277:18" pos:end="277:19">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="281:5" pos:end="283:24"><if pos:start="281:5" pos:end="283:24">if <condition pos:start="281:8" pos:end="281:19">(<expr pos:start="281:9" pos:end="281:18"><name pos:start="281:9" pos:end="281:13">errno</name> <operator pos:start="281:15" pos:end="281:16">!=</operator> <literal type="number" pos:start="281:18" pos:end="281:18">0</literal></expr>)</condition><block type="pseudo" pos:start="283:9" pos:end="283:24"><block_content pos:start="283:9" pos:end="283:24">

        <return pos:start="283:9" pos:end="283:24">return <expr pos:start="283:16" pos:end="283:23"><operator pos:start="283:16" pos:end="283:16">(</operator><operator pos:start="283:17" pos:end="283:17">-</operator><name pos:start="283:18" pos:end="283:22">errno</name><operator pos:start="283:23" pos:end="283:23">)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="285:5" pos:end="285:15">return <expr pos:start="285:12" pos:end="285:14"><operator pos:start="285:12" pos:end="285:12">(</operator><literal type="number" pos:start="285:13" pos:end="285:13">0</literal><operator pos:start="285:14" pos:end="285:14">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
