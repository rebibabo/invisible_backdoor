<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3541.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">device_open</name><parameter_list pos:start="1:23" pos:end="1:44">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:40"><name pos:start="1:24" pos:end="1:38">AVFormatContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:24">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:26">v4l2_capability</name></name></type> <name pos:start="5:28" pos:end="5:30">cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:18">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18">CONFIG_LIBV4L2</name></expr></cpp:if>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">fd_libv4l</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">res</name></decl>, <decl pos:start="15:14" pos:end="15:16"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:16">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">flags</name> <init pos:start="17:15" pos:end="17:22">= <expr pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:22">O_RDWR</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:41">(<expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:11">ctx</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:18">flags</name></name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <name pos:start="21:22" pos:end="21:40">AVFMT_FLAG_NONBLOCK</name></expr>)</condition> <block pos:start="21:43" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:28">

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:13">flags</name> <operator pos:start="23:15" pos:end="23:16">|=</operator> <name pos:start="23:18" pos:end="23:27">O_NONBLOCK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:6">fd</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:43"><name pos:start="29:10" pos:end="29:18">v4l2_open</name><argument_list pos:start="29:19" pos:end="29:43">(<argument pos:start="29:20" pos:end="29:32"><expr pos:start="29:20" pos:end="29:32"><name pos:start="29:20" pos:end="29:32"><name pos:start="29:20" pos:end="29:22">ctx</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:32">filename</name></name></expr></argument>, <argument pos:start="29:35" pos:end="29:39"><expr pos:start="29:35" pos:end="29:39"><name pos:start="29:35" pos:end="29:39">flags</name></expr></argument>, <argument pos:start="29:42" pos:end="29:42"><expr pos:start="29:42" pos:end="29:42"><literal type="number" pos:start="29:42" pos:end="29:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="48:0"><if pos:start="31:5" pos:end="48:0">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:10">fd</name> <operator pos:start="31:12" pos:end="31:12">&lt;</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>)</condition> <block pos:start="31:17" pos:end="48:0">{<block_content pos:start="33:9" pos:end="43:28">

        <expr_stmt pos:start="33:9" pos:end="33:20"><expr pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:11">err</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:19">errno</name></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="39:45"><expr pos:start="37:9" pos:end="39:44"><call pos:start="37:9" pos:end="39:44"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="39:44">(<argument pos:start="37:16" pos:end="37:18"><expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ctx</name></expr></argument>, <argument pos:start="37:21" pos:end="37:32"><expr pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:35" pos:end="37:70"><expr pos:start="37:35" pos:end="37:70"><literal type="string" pos:start="37:35" pos:end="37:70">"Cannot open video device %s : %s\n"</literal></expr></argument>,

               <argument pos:start="39:16" pos:end="39:28"><expr pos:start="39:16" pos:end="39:28"><name pos:start="39:16" pos:end="39:28"><name pos:start="39:16" pos:end="39:18">ctx</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:28">filename</name></name></expr></argument>, <argument pos:start="39:31" pos:end="39:43"><expr pos:start="39:31" pos:end="39:43"><call pos:start="39:31" pos:end="39:43"><name pos:start="39:31" pos:end="39:38">strerror</name><argument_list pos:start="39:39" pos:end="39:43">(<argument pos:start="39:40" pos:end="39:42"><expr pos:start="39:40" pos:end="39:42"><name pos:start="39:40" pos:end="39:42">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="43:9" pos:end="43:28">return <expr pos:start="43:16" pos:end="43:27"><call pos:start="43:16" pos:end="43:27"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:27">(<argument pos:start="43:24" pos:end="43:26"><expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:26">err</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="47:1" pos:end="47:18">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:18">CONFIG_LIBV4L2</name></expr></cpp:if>

    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:13">fd_libv4l</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:28">v4l2_fd_open</name><argument_list pos:start="49:29" pos:end="49:35">(<argument pos:start="49:30" pos:end="49:31"><expr pos:start="49:30" pos:end="49:31"><name pos:start="49:30" pos:end="49:31">fd</name></expr></argument>, <argument pos:start="49:34" pos:end="49:34"><expr pos:start="49:34" pos:end="49:34"><literal type="number" pos:start="49:34" pos:end="49:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="61:5">if <condition pos:start="51:8" pos:end="51:15">(<expr pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:10">fd</name> <operator pos:start="51:12" pos:end="51:12">&lt;</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>)</condition> <block pos:start="51:17" pos:end="61:5">{<block_content pos:start="53:9" pos:end="59:19">

        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:11">err</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:28"><name pos:start="53:15" pos:end="53:21">AVERROR</name><argument_list pos:start="53:22" pos:end="53:28">(<argument pos:start="53:23" pos:end="53:27"><expr pos:start="53:23" pos:end="53:27"><name pos:start="53:23" pos:end="53:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="57:47"><expr pos:start="55:9" pos:end="57:46"><call pos:start="55:9" pos:end="57:46"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="57:46">(<argument pos:start="55:16" pos:end="55:18"><expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">ctx</name></expr></argument>, <argument pos:start="55:21" pos:end="55:32"><expr pos:start="55:21" pos:end="55:32"><name pos:start="55:21" pos:end="55:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:35" pos:end="55:90"><expr pos:start="55:35" pos:end="55:90"><literal type="string" pos:start="55:35" pos:end="55:90">"Cannot open video device with libv4l neither %s : %s\n"</literal></expr></argument>,

               <argument pos:start="57:16" pos:end="57:28"><expr pos:start="57:16" pos:end="57:28"><name pos:start="57:16" pos:end="57:28"><name pos:start="57:16" pos:end="57:18">ctx</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:28">filename</name></name></expr></argument>, <argument pos:start="57:31" pos:end="57:45"><expr pos:start="57:31" pos:end="57:45"><call pos:start="57:31" pos:end="57:45"><name pos:start="57:31" pos:end="57:38">strerror</name><argument_list pos:start="57:39" pos:end="57:45">(<argument pos:start="57:40" pos:end="57:44"><expr pos:start="57:40" pos:end="57:44"><name pos:start="57:40" pos:end="57:44">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:19">return <expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">err</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="66:0"><expr pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:6">fd</name> <operator pos:start="63:8" pos:end="63:8">=</operator> <name pos:start="63:10" pos:end="63:18">fd_libv4l</name></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="69:5" pos:end="69:48"><expr pos:start="69:5" pos:end="69:47"><name pos:start="69:5" pos:end="69:7">res</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:47"><name pos:start="69:11" pos:end="69:20">v4l2_ioctl</name><argument_list pos:start="69:21" pos:end="69:47">(<argument pos:start="69:22" pos:end="69:23"><expr pos:start="69:22" pos:end="69:23"><name pos:start="69:22" pos:end="69:23">fd</name></expr></argument>, <argument pos:start="69:26" pos:end="69:40"><expr pos:start="69:26" pos:end="69:40"><name pos:start="69:26" pos:end="69:40">VIDIOC_QUERYCAP</name></expr></argument>, <argument pos:start="69:43" pos:end="69:46"><expr pos:start="69:43" pos:end="69:46"><operator pos:start="69:43" pos:end="69:43">&amp;</operator><name pos:start="69:44" pos:end="69:46">cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="83:5"><if pos:start="71:5" pos:end="83:5">if <condition pos:start="71:8" pos:end="71:16">(<expr pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:11">res</name> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <literal type="number" pos:start="71:15" pos:end="71:15">0</literal></expr>)</condition> <block pos:start="71:18" pos:end="83:5">{<block_content pos:start="73:9" pos:end="81:18">

        <expr_stmt pos:start="73:9" pos:end="73:20"><expr pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:11">err</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:19">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="77:30"><expr pos:start="75:9" pos:end="77:29"><call pos:start="75:9" pos:end="77:29"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="77:29">(<argument pos:start="75:16" pos:end="75:18"><expr pos:start="75:16" pos:end="75:18"><name pos:start="75:16" pos:end="75:18">ctx</name></expr></argument>, <argument pos:start="75:21" pos:end="75:32"><expr pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:35" pos:end="75:64"><expr pos:start="75:35" pos:end="75:64"><literal type="string" pos:start="75:35" pos:end="75:64">"ioctl(VIDIOC_QUERYCAP): %s\n"</literal></expr></argument>,

               <argument pos:start="77:16" pos:end="77:28"><expr pos:start="77:16" pos:end="77:28"><call pos:start="77:16" pos:end="77:28"><name pos:start="77:16" pos:end="77:23">strerror</name><argument_list pos:start="77:24" pos:end="77:28">(<argument pos:start="77:25" pos:end="77:27"><expr pos:start="77:25" pos:end="77:27"><name pos:start="77:25" pos:end="77:27">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="89:33"><expr pos:start="87:5" pos:end="89:32"><call pos:start="87:5" pos:end="89:32"><name pos:start="87:5" pos:end="87:10">av_log</name><argument_list pos:start="87:11" pos:end="89:32">(<argument pos:start="87:12" pos:end="87:14"><expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">ctx</name></expr></argument>, <argument pos:start="87:17" pos:end="87:30"><expr pos:start="87:17" pos:end="87:30"><name pos:start="87:17" pos:end="87:30">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="87:33" pos:end="87:56"><expr pos:start="87:33" pos:end="87:56"><literal type="string" pos:start="87:33" pos:end="87:56">"[%d]Capabilities: %x\n"</literal></expr></argument>,

           <argument pos:start="89:12" pos:end="89:13"><expr pos:start="89:12" pos:end="89:13"><name pos:start="89:12" pos:end="89:13">fd</name></expr></argument>, <argument pos:start="89:16" pos:end="89:31"><expr pos:start="89:16" pos:end="89:31"><name pos:start="89:16" pos:end="89:31"><name pos:start="89:16" pos:end="89:18">cap</name><operator pos:start="89:19" pos:end="89:19">.</operator><name pos:start="89:20" pos:end="89:31">capabilities</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="103:5"><if pos:start="93:5" pos:end="103:5">if <condition pos:start="93:8" pos:end="93:53">(<expr pos:start="93:9" pos:end="93:52"><operator pos:start="93:9" pos:end="93:9">!</operator><operator pos:start="93:10" pos:end="93:10">(</operator><name pos:start="93:11" pos:end="93:26"><name pos:start="93:11" pos:end="93:13">cap</name><operator pos:start="93:14" pos:end="93:14">.</operator><name pos:start="93:15" pos:end="93:26">capabilities</name></name> <operator pos:start="93:28" pos:end="93:28">&amp;</operator> <name pos:start="93:30" pos:end="93:51">V4L2_CAP_VIDEO_CAPTURE</name><operator pos:start="93:52" pos:end="93:52">)</operator></expr>)</condition> <block pos:start="93:55" pos:end="103:5">{<block_content pos:start="95:9" pos:end="101:18">

        <expr_stmt pos:start="95:9" pos:end="95:67"><expr pos:start="95:9" pos:end="95:66"><call pos:start="95:9" pos:end="95:66"><name pos:start="95:9" pos:end="95:14">av_log</name><argument_list pos:start="95:15" pos:end="95:66">(<argument pos:start="95:16" pos:end="95:18"><expr pos:start="95:16" pos:end="95:18"><name pos:start="95:16" pos:end="95:18">ctx</name></expr></argument>, <argument pos:start="95:21" pos:end="95:32"><expr pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:35" pos:end="95:65"><expr pos:start="95:35" pos:end="95:65"><literal type="string" pos:start="95:35" pos:end="95:65">"Not a video capture device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:21"><expr pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:11">err</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:20">ENODEV</name></expr>;</expr_stmt>



        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="119:5"><if pos:start="107:5" pos:end="119:5">if <condition pos:start="107:8" pos:end="107:49">(<expr pos:start="107:9" pos:end="107:48"><operator pos:start="107:9" pos:end="107:9">!</operator><operator pos:start="107:10" pos:end="107:10">(</operator><name pos:start="107:11" pos:end="107:26"><name pos:start="107:11" pos:end="107:13">cap</name><operator pos:start="107:14" pos:end="107:14">.</operator><name pos:start="107:15" pos:end="107:26">capabilities</name></name> <operator pos:start="107:28" pos:end="107:28">&amp;</operator> <name pos:start="107:30" pos:end="107:47">V4L2_CAP_STREAMING</name><operator pos:start="107:48" pos:end="107:48">)</operator></expr>)</condition> <block pos:start="107:51" pos:end="119:5">{<block_content pos:start="109:9" pos:end="117:18">

        <expr_stmt pos:start="109:9" pos:end="111:74"><expr pos:start="109:9" pos:end="111:73"><call pos:start="109:9" pos:end="111:73"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="111:73">(<argument pos:start="109:16" pos:end="109:18"><expr pos:start="109:16" pos:end="109:18"><name pos:start="109:16" pos:end="109:18">ctx</name></expr></argument>, <argument pos:start="109:21" pos:end="109:32"><expr pos:start="109:21" pos:end="109:32"><name pos:start="109:21" pos:end="109:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="111:16" pos:end="111:72"><expr pos:start="111:16" pos:end="111:72"><literal type="string" pos:start="111:16" pos:end="111:72">"The device does not support the streaming I/O method.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:21"><expr pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:11">err</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <name pos:start="113:15" pos:end="113:20">ENOSYS</name></expr>;</expr_stmt>



        <goto pos:start="117:9" pos:end="117:18">goto <name pos:start="117:14" pos:end="117:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="123:5" pos:end="123:14">return <expr pos:start="123:12" pos:end="123:13"><name pos:start="123:12" pos:end="123:13">fd</name></expr>;</return>



<label pos:start="127:1" pos:end="127:5"><name pos:start="127:1" pos:end="127:4">fail</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:19"><expr pos:start="129:5" pos:end="129:18"><call pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:14">v4l2_close</name><argument_list pos:start="129:15" pos:end="129:18">(<argument pos:start="129:16" pos:end="129:17"><expr pos:start="129:16" pos:end="129:17"><name pos:start="129:16" pos:end="129:17">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="131:5" pos:end="131:24">return <expr pos:start="131:12" pos:end="131:23"><call pos:start="131:12" pos:end="131:23"><name pos:start="131:12" pos:end="131:18">AVERROR</name><argument_list pos:start="131:19" pos:end="131:23">(<argument pos:start="131:20" pos:end="131:22"><expr pos:start="131:20" pos:end="131:22"><name pos:start="131:20" pos:end="131:22">err</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
