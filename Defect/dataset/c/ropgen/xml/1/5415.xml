<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5415.c" pos:tabs="8"><function pos:start="1:1" pos:end="30:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">test_smram_lock</name><parameter_list pos:start="1:28" pos:end="1:33">(<parameter pos:start="1:29" pos:end="1:32"><decl pos:start="1:29" pos:end="1:32"><type pos:start="1:29" pos:end="1:32"><name pos:start="1:29" pos:end="1:32">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="30:1">{<block_content pos:start="3:5" pos:end="29:75">
    <decl_stmt pos:start="3:5" pos:end="3:20"><decl pos:start="3:5" pos:end="3:19"><type pos:start="3:5" pos:end="3:13"><name pos:start="3:5" pos:end="3:11">QPCIBus</name> <modifier pos:start="3:13" pos:end="3:13">*</modifier></type><name pos:start="3:14" pos:end="3:19">pcibus</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:23"><decl pos:start="4:5" pos:end="4:22"><type pos:start="4:5" pos:end="4:16"><name pos:start="4:5" pos:end="4:14">QPCIDevice</name> <modifier pos:start="4:16" pos:end="4:16">*</modifier></type><name pos:start="4:17" pos:end="4:22">pcidev</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">QDict</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:19">response</name></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:32"><expr pos:start="6:5" pos:end="6:31"><name pos:start="6:5" pos:end="6:10">pcibus</name> <operator pos:start="6:12" pos:end="6:12">=</operator> <call pos:start="6:14" pos:end="6:31"><name pos:start="6:14" pos:end="6:25">qpci_init_pc</name><argument_list pos:start="6:26" pos:end="6:31">(<argument pos:start="6:27" pos:end="6:30"><expr pos:start="6:27" pos:end="6:30"><name pos:start="6:27" pos:end="6:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:29"><expr pos:start="7:5" pos:end="7:28"><call pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:12">g_assert</name><argument_list pos:start="7:13" pos:end="7:28">(<argument pos:start="7:14" pos:end="7:27"><expr pos:start="7:14" pos:end="7:27"><name pos:start="7:14" pos:end="7:19">pcibus</name> <operator pos:start="7:21" pos:end="7:22">!=</operator> <name pos:start="7:24" pos:end="7:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:41"><expr pos:start="8:5" pos:end="8:40"><name pos:start="8:5" pos:end="8:10">pcidev</name> <operator pos:start="8:12" pos:end="8:12">=</operator> <call pos:start="8:14" pos:end="8:40"><name pos:start="8:14" pos:end="8:29">qpci_device_find</name><argument_list pos:start="8:30" pos:end="8:40">(<argument pos:start="8:31" pos:end="8:36"><expr pos:start="8:31" pos:end="8:36"><name pos:start="8:31" pos:end="8:36">pcibus</name></expr></argument>, <argument pos:start="8:39" pos:end="8:39"><expr pos:start="8:39" pos:end="8:39"><literal type="number" pos:start="8:39" pos:end="8:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:29"><expr pos:start="9:5" pos:end="9:28"><call pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:12">g_assert</name><argument_list pos:start="9:13" pos:end="9:28">(<argument pos:start="9:14" pos:end="9:27"><expr pos:start="9:14" pos:end="9:27"><name pos:start="9:14" pos:end="9:19">pcidev</name> <operator pos:start="9:21" pos:end="9:22">!=</operator> <name pos:start="9:24" pos:end="9:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="10:5" pos:end="10:32">/* check open is settable */</comment>
    <expr_stmt pos:start="11:5" pos:end="11:63"><expr pos:start="11:5" pos:end="11:62"><call pos:start="11:5" pos:end="11:62"><name pos:start="11:5" pos:end="11:17">smram_set_bit</name><argument_list pos:start="11:18" pos:end="11:62">(<argument pos:start="11:19" pos:end="11:24"><expr pos:start="11:19" pos:end="11:24"><name pos:start="11:19" pos:end="11:24">pcidev</name></expr></argument>, <argument pos:start="11:27" pos:end="11:54"><expr pos:start="11:27" pos:end="11:54"><name pos:start="11:27" pos:end="11:54">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>, <argument pos:start="11:57" pos:end="11:61"><expr pos:start="11:57" pos:end="11:61"><name pos:start="11:57" pos:end="11:61">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:76"><expr pos:start="12:5" pos:end="12:75"><call pos:start="12:5" pos:end="12:75"><name pos:start="12:5" pos:end="12:12">g_assert</name><argument_list pos:start="12:13" pos:end="12:75">(<argument pos:start="12:14" pos:end="12:74"><expr pos:start="12:14" pos:end="12:74"><call pos:start="12:14" pos:end="12:65"><name pos:start="12:14" pos:end="12:27">smram_test_bit</name><argument_list pos:start="12:28" pos:end="12:65">(<argument pos:start="12:29" pos:end="12:34"><expr pos:start="12:29" pos:end="12:34"><name pos:start="12:29" pos:end="12:34">pcidev</name></expr></argument>, <argument pos:start="12:37" pos:end="12:64"><expr pos:start="12:37" pos:end="12:64"><name pos:start="12:37" pos:end="12:64">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>)</argument_list></call> <operator pos:start="12:67" pos:end="12:68">==</operator> <name pos:start="12:70" pos:end="12:74">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><call pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:17">smram_set_bit</name><argument_list pos:start="13:18" pos:end="13:61">(<argument pos:start="13:19" pos:end="13:24"><expr pos:start="13:19" pos:end="13:24"><name pos:start="13:19" pos:end="13:24">pcidev</name></expr></argument>, <argument pos:start="13:27" pos:end="13:54"><expr pos:start="13:27" pos:end="13:54"><name pos:start="13:27" pos:end="13:54">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>, <argument pos:start="13:57" pos:end="13:60"><expr pos:start="13:57" pos:end="13:60"><name pos:start="13:57" pos:end="13:60">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:75"><expr pos:start="14:5" pos:end="14:74"><call pos:start="14:5" pos:end="14:74"><name pos:start="14:5" pos:end="14:12">g_assert</name><argument_list pos:start="14:13" pos:end="14:74">(<argument pos:start="14:14" pos:end="14:73"><expr pos:start="14:14" pos:end="14:73"><call pos:start="14:14" pos:end="14:65"><name pos:start="14:14" pos:end="14:27">smram_test_bit</name><argument_list pos:start="14:28" pos:end="14:65">(<argument pos:start="14:29" pos:end="14:34"><expr pos:start="14:29" pos:end="14:34"><name pos:start="14:29" pos:end="14:34">pcidev</name></expr></argument>, <argument pos:start="14:37" pos:end="14:64"><expr pos:start="14:37" pos:end="14:64"><name pos:start="14:37" pos:end="14:64">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>)</argument_list></call> <operator pos:start="14:67" pos:end="14:68">==</operator> <name pos:start="14:70" pos:end="14:73">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="15:5" pos:end="15:52">/* lock, check open is cleared &amp; not settable */</comment>
    <expr_stmt pos:start="16:5" pos:end="16:61"><expr pos:start="16:5" pos:end="16:60"><call pos:start="16:5" pos:end="16:60"><name pos:start="16:5" pos:end="16:17">smram_set_bit</name><argument_list pos:start="16:18" pos:end="16:60">(<argument pos:start="16:19" pos:end="16:24"><expr pos:start="16:19" pos:end="16:24"><name pos:start="16:19" pos:end="16:24">pcidev</name></expr></argument>, <argument pos:start="16:27" pos:end="16:53"><expr pos:start="16:27" pos:end="16:53"><name pos:start="16:27" pos:end="16:53">MCH_HOST_BRIDGE_SMRAM_D_LCK</name></expr></argument>, <argument pos:start="16:56" pos:end="16:59"><expr pos:start="16:56" pos:end="16:59"><name pos:start="16:56" pos:end="16:59">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:76"><expr pos:start="17:5" pos:end="17:75"><call pos:start="17:5" pos:end="17:75"><name pos:start="17:5" pos:end="17:12">g_assert</name><argument_list pos:start="17:13" pos:end="17:75">(<argument pos:start="17:14" pos:end="17:74"><expr pos:start="17:14" pos:end="17:74"><call pos:start="17:14" pos:end="17:65"><name pos:start="17:14" pos:end="17:27">smram_test_bit</name><argument_list pos:start="17:28" pos:end="17:65">(<argument pos:start="17:29" pos:end="17:34"><expr pos:start="17:29" pos:end="17:34"><name pos:start="17:29" pos:end="17:34">pcidev</name></expr></argument>, <argument pos:start="17:37" pos:end="17:64"><expr pos:start="17:37" pos:end="17:64"><name pos:start="17:37" pos:end="17:64">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>)</argument_list></call> <operator pos:start="17:67" pos:end="17:68">==</operator> <name pos:start="17:70" pos:end="17:74">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:62"><expr pos:start="18:5" pos:end="18:61"><call pos:start="18:5" pos:end="18:61"><name pos:start="18:5" pos:end="18:17">smram_set_bit</name><argument_list pos:start="18:18" pos:end="18:61">(<argument pos:start="18:19" pos:end="18:24"><expr pos:start="18:19" pos:end="18:24"><name pos:start="18:19" pos:end="18:24">pcidev</name></expr></argument>, <argument pos:start="18:27" pos:end="18:54"><expr pos:start="18:27" pos:end="18:54"><name pos:start="18:27" pos:end="18:54">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>, <argument pos:start="18:57" pos:end="18:60"><expr pos:start="18:57" pos:end="18:60"><name pos:start="18:57" pos:end="18:60">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:76"><expr pos:start="19:5" pos:end="19:75"><call pos:start="19:5" pos:end="19:75"><name pos:start="19:5" pos:end="19:12">g_assert</name><argument_list pos:start="19:13" pos:end="19:75">(<argument pos:start="19:14" pos:end="19:74"><expr pos:start="19:14" pos:end="19:74"><call pos:start="19:14" pos:end="19:65"><name pos:start="19:14" pos:end="19:27">smram_test_bit</name><argument_list pos:start="19:28" pos:end="19:65">(<argument pos:start="19:29" pos:end="19:34"><expr pos:start="19:29" pos:end="19:34"><name pos:start="19:29" pos:end="19:34">pcidev</name></expr></argument>, <argument pos:start="19:37" pos:end="19:64"><expr pos:start="19:37" pos:end="19:64"><name pos:start="19:37" pos:end="19:64">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>)</argument_list></call> <operator pos:start="19:67" pos:end="19:68">==</operator> <name pos:start="19:70" pos:end="19:74">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="20:5" pos:end="20:15">/* reset */</comment>
    <expr_stmt pos:start="21:5" pos:end="21:68"><expr pos:start="21:5" pos:end="21:67"><name pos:start="21:5" pos:end="21:12">response</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:67"><name pos:start="21:16" pos:end="21:18">qmp</name><argument_list pos:start="21:19" pos:end="21:67">(<argument pos:start="21:20" pos:end="21:66"><expr pos:start="21:20" pos:end="21:66"><literal type="string" pos:start="21:20" pos:end="21:66">"{'execute': 'system_reset', 'arguments': {} }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:23"><expr pos:start="22:5" pos:end="22:22"><call pos:start="22:5" pos:end="22:22"><name pos:start="22:5" pos:end="22:12">g_assert</name><argument_list pos:start="22:13" pos:end="22:22">(<argument pos:start="22:14" pos:end="22:21"><expr pos:start="22:14" pos:end="22:21"><name pos:start="22:14" pos:end="22:21">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><call pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:12">g_assert</name><argument_list pos:start="23:13" pos:end="23:46">(<argument pos:start="23:14" pos:end="23:45"><expr pos:start="23:14" pos:end="23:45"><operator pos:start="23:14" pos:end="23:14">!</operator><call pos:start="23:15" pos:end="23:45"><name pos:start="23:15" pos:end="23:26">qdict_haskey</name><argument_list pos:start="23:27" pos:end="23:45">(<argument pos:start="23:28" pos:end="23:35"><expr pos:start="23:28" pos:end="23:35"><name pos:start="23:28" pos:end="23:35">response</name></expr></argument>, <argument pos:start="23:38" pos:end="23:44"><expr pos:start="23:38" pos:end="23:44"><literal type="string" pos:start="23:38" pos:end="23:44">"error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:22"><expr pos:start="24:5" pos:end="24:21"><call pos:start="24:5" pos:end="24:21"><name pos:start="24:5" pos:end="24:11">QDECREF</name><argument_list pos:start="24:12" pos:end="24:21">(<argument pos:start="24:13" pos:end="24:20"><expr pos:start="24:13" pos:end="24:20"><name pos:start="24:13" pos:end="24:20">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="25:5" pos:end="25:38">/* check open is settable again */</comment>
    <expr_stmt pos:start="26:5" pos:end="26:63"><expr pos:start="26:5" pos:end="26:62"><call pos:start="26:5" pos:end="26:62"><name pos:start="26:5" pos:end="26:17">smram_set_bit</name><argument_list pos:start="26:18" pos:end="26:62">(<argument pos:start="26:19" pos:end="26:24"><expr pos:start="26:19" pos:end="26:24"><name pos:start="26:19" pos:end="26:24">pcidev</name></expr></argument>, <argument pos:start="26:27" pos:end="26:54"><expr pos:start="26:27" pos:end="26:54"><name pos:start="26:27" pos:end="26:54">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>, <argument pos:start="26:57" pos:end="26:61"><expr pos:start="26:57" pos:end="26:61"><name pos:start="26:57" pos:end="26:61">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:76"><expr pos:start="27:5" pos:end="27:75"><call pos:start="27:5" pos:end="27:75"><name pos:start="27:5" pos:end="27:12">g_assert</name><argument_list pos:start="27:13" pos:end="27:75">(<argument pos:start="27:14" pos:end="27:74"><expr pos:start="27:14" pos:end="27:74"><call pos:start="27:14" pos:end="27:65"><name pos:start="27:14" pos:end="27:27">smram_test_bit</name><argument_list pos:start="27:28" pos:end="27:65">(<argument pos:start="27:29" pos:end="27:34"><expr pos:start="27:29" pos:end="27:34"><name pos:start="27:29" pos:end="27:34">pcidev</name></expr></argument>, <argument pos:start="27:37" pos:end="27:64"><expr pos:start="27:37" pos:end="27:64"><name pos:start="27:37" pos:end="27:64">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>)</argument_list></call> <operator pos:start="27:67" pos:end="27:68">==</operator> <name pos:start="27:70" pos:end="27:74">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:62"><expr pos:start="28:5" pos:end="28:61"><call pos:start="28:5" pos:end="28:61"><name pos:start="28:5" pos:end="28:17">smram_set_bit</name><argument_list pos:start="28:18" pos:end="28:61">(<argument pos:start="28:19" pos:end="28:24"><expr pos:start="28:19" pos:end="28:24"><name pos:start="28:19" pos:end="28:24">pcidev</name></expr></argument>, <argument pos:start="28:27" pos:end="28:54"><expr pos:start="28:27" pos:end="28:54"><name pos:start="28:27" pos:end="28:54">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>, <argument pos:start="28:57" pos:end="28:60"><expr pos:start="28:57" pos:end="28:60"><name pos:start="28:57" pos:end="28:60">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:75"><expr pos:start="29:5" pos:end="29:74"><call pos:start="29:5" pos:end="29:74"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:74">(<argument pos:start="29:14" pos:end="29:73"><expr pos:start="29:14" pos:end="29:73"><call pos:start="29:14" pos:end="29:65"><name pos:start="29:14" pos:end="29:27">smram_test_bit</name><argument_list pos:start="29:28" pos:end="29:65">(<argument pos:start="29:29" pos:end="29:34"><expr pos:start="29:29" pos:end="29:34"><name pos:start="29:29" pos:end="29:34">pcidev</name></expr></argument>, <argument pos:start="29:37" pos:end="29:64"><expr pos:start="29:37" pos:end="29:64"><name pos:start="29:37" pos:end="29:64">MCH_HOST_BRIDGE_SMRAM_D_OPEN</name></expr></argument>)</argument_list></call> <operator pos:start="29:67" pos:end="29:68">==</operator> <name pos:start="29:70" pos:end="29:73">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
