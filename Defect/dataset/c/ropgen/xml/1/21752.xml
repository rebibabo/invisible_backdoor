<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21752.c" pos:tabs="8"><function pos:start="1:1" pos:end="54:22"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ape_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:62">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:38"><decl pos:start="2:29" pos:end="2:38"><type pos:start="2:29" pos:end="2:38"><name pos:start="2:29" pos:end="2:32">void</name> <modifier pos:start="2:34" pos:end="2:34">*</modifier></type><name pos:start="2:35" pos:end="2:38">data</name></decl></parameter>, <parameter pos:start="2:41" pos:end="2:54"><decl pos:start="2:41" pos:end="2:54"><type pos:start="2:41" pos:end="2:54"><name pos:start="2:41" pos:end="2:43">int</name> <modifier pos:start="2:45" pos:end="2:45">*</modifier></type><name pos:start="2:46" pos:end="2:54">data_size</name></decl></parameter>,
                            <parameter pos:start="3:29" pos:end="3:47"><decl pos:start="3:29" pos:end="3:47"><type pos:start="3:29" pos:end="3:47"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:41">uint8_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type> <name pos:start="3:45" pos:end="3:47">buf</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:61"><decl pos:start="3:50" pos:end="3:61"><type pos:start="3:50" pos:end="3:61"><name pos:start="3:50" pos:end="3:52">int</name></type> <name pos:start="3:54" pos:end="3:61">buf_size</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="54:22">{<block_content pos:start="5:5" pos:end="54:22">
    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">APEContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:25">avctx</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:36">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:28"><decl pos:start="6:5" pos:end="6:27"><type pos:start="6:5" pos:end="6:13"><name pos:start="6:5" pos:end="6:11">int16_t</name> <modifier pos:start="6:13" pos:end="6:13">*</modifier></type><name pos:start="6:14" pos:end="6:20">samples</name> <init pos:start="6:22" pos:end="6:27">= <expr pos:start="6:24" pos:end="6:27"><name pos:start="6:24" pos:end="6:27">data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">nblocks</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:13"><decl pos:start="8:5" pos:end="8:9"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:9">i</name></decl>, <decl pos:start="8:12" pos:end="8:12"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:12" pos:end="8:12">n</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:22">blockstodecode</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:19"><decl pos:start="10:5" pos:end="10:18"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:18">bytes_used</name></decl>;</decl_stmt>
    <if_stmt pos:start="11:5" pos:end="54:22"><if pos:start="11:5" pos:end="54:22">if <condition pos:start="11:8" pos:end="11:37">(<expr pos:start="11:9" pos:end="11:36"><name pos:start="11:9" pos:end="11:16">buf_size</name> <operator pos:start="11:18" pos:end="11:19">==</operator> <literal type="number" pos:start="11:21" pos:end="11:21">0</literal> <operator pos:start="11:23" pos:end="11:24">&amp;&amp;</operator> <operator pos:start="11:26" pos:end="11:26">!</operator><name pos:start="11:27" pos:end="11:36"><name pos:start="11:27" pos:end="11:27">s</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:36">samples</name></name></expr>)</condition> <block pos:start="11:39" pos:end="54:22">{<block_content pos:start="12:9" pos:end="54:22">
        <expr_stmt pos:start="12:9" pos:end="12:23"><expr pos:start="12:9" pos:end="12:22"><operator pos:start="12:9" pos:end="12:9">*</operator><name pos:start="12:10" pos:end="12:18">data_size</name> <operator pos:start="12:20" pos:end="12:20">=</operator> <literal type="number" pos:start="12:22" pos:end="12:22">0</literal></expr>;</expr_stmt>
        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return>
    <comment type="block" pos:start="14:5" pos:end="14:41">/* should not happen but who knows */</comment>
    <if_stmt pos:start="15:5" pos:end="54:22"><if pos:start="15:5" pos:end="54:22">if <condition pos:start="15:8" pos:end="15:59">(<expr pos:start="15:9" pos:end="15:58"><name pos:start="15:9" pos:end="15:23">BLOCKS_PER_LOOP</name> <operator pos:start="15:25" pos:end="15:25">*</operator> <literal type="number" pos:start="15:27" pos:end="15:27">2</literal> <operator pos:start="15:29" pos:end="15:29">*</operator> <name pos:start="15:31" pos:end="15:45"><name pos:start="15:31" pos:end="15:35">avctx</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:45">channels</name></name> <operator pos:start="15:47" pos:end="15:47">&gt;</operator> <operator pos:start="15:49" pos:end="15:49">*</operator><name pos:start="15:50" pos:end="15:58">data_size</name></expr>)</condition> <block pos:start="15:61" pos:end="54:22">{<block_content pos:start="16:9" pos:end="54:22">
        <expr_stmt pos:start="16:9" pos:end="16:164"><expr pos:start="16:9" pos:end="16:163"><call pos:start="16:9" pos:end="16:163"><name pos:start="16:9" pos:end="16:14">av_log</name> <argument_list pos:start="16:16" pos:end="16:163">(<argument pos:start="16:17" pos:end="16:21"><expr pos:start="16:17" pos:end="16:21"><name pos:start="16:17" pos:end="16:21">avctx</name></expr></argument>, <argument pos:start="16:24" pos:end="16:35"><expr pos:start="16:24" pos:end="16:35"><name pos:start="16:24" pos:end="16:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="16:38" pos:end="16:116"><expr pos:start="16:38" pos:end="16:116"><literal type="string" pos:start="16:38" pos:end="16:116">"Packet size is too big to be handled in lavc! (max is %d where you have %d)\n"</literal></expr></argument>, <argument pos:start="16:119" pos:end="16:128"><expr pos:start="16:119" pos:end="16:128"><operator pos:start="16:119" pos:end="16:119">*</operator><name pos:start="16:120" pos:end="16:128">data_size</name></expr></argument>, <argument pos:start="16:131" pos:end="16:162"><expr pos:start="16:131" pos:end="16:162"><name pos:start="16:131" pos:end="16:140"><name pos:start="16:131" pos:end="16:131">s</name><operator pos:start="16:132" pos:end="16:133">-&gt;</operator><name pos:start="16:134" pos:end="16:140">samples</name></name> <operator pos:start="16:142" pos:end="16:142">*</operator> <literal type="number" pos:start="16:144" pos:end="16:144">2</literal> <operator pos:start="16:146" pos:end="16:146">*</operator> <name pos:start="16:148" pos:end="16:162"><name pos:start="16:148" pos:end="16:152">avctx</name><operator pos:start="16:153" pos:end="16:154">-&gt;</operator><name pos:start="16:155" pos:end="16:162">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="54:22"><if pos:start="17:5" pos:end="54:22">if<condition pos:start="17:7" pos:end="17:19">(<expr pos:start="17:8" pos:end="17:18"><operator pos:start="17:8" pos:end="17:8">!</operator><name pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:18">samples</name></name></expr>)</condition><block pos:start="17:20" pos:end="54:22">{<block_content pos:start="18:9" pos:end="54:22">
        <expr_stmt pos:start="18:9" pos:end="18:59"><expr pos:start="18:9" pos:end="18:58"><name pos:start="18:9" pos:end="18:15"><name pos:start="18:9" pos:end="18:9">s</name><operator pos:start="18:10" pos:end="18:11">-&gt;</operator><name pos:start="18:12" pos:end="18:15">data</name></name> <operator pos:start="18:17" pos:end="18:17">=</operator> <call pos:start="18:19" pos:end="18:58"><name pos:start="18:19" pos:end="18:28">av_realloc</name><argument_list pos:start="18:29" pos:end="18:58">(<argument pos:start="18:30" pos:end="18:36"><expr pos:start="18:30" pos:end="18:36"><name pos:start="18:30" pos:end="18:36"><name pos:start="18:30" pos:end="18:30">s</name><operator pos:start="18:31" pos:end="18:32">-&gt;</operator><name pos:start="18:33" pos:end="18:36">data</name></name></expr></argument>, <argument pos:start="18:39" pos:end="18:57"><expr pos:start="18:39" pos:end="18:57"><operator pos:start="18:39" pos:end="18:39">(</operator><name pos:start="18:40" pos:end="18:47">buf_size</name> <operator pos:start="18:49" pos:end="18:49">+</operator> <literal type="number" pos:start="18:51" pos:end="18:51">3</literal><operator pos:start="18:52" pos:end="18:52">)</operator> <operator pos:start="18:54" pos:end="18:54">&amp;</operator> <operator pos:start="18:56" pos:end="18:56">~</operator><literal type="number" pos:start="18:57" pos:end="18:57">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="19:9" pos:end="19:82"><expr pos:start="19:9" pos:end="19:81"><call pos:start="19:9" pos:end="19:81"><name pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">dsp</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:24">bswap_buf</name></name><argument_list pos:start="19:25" pos:end="19:81">(<argument pos:start="19:26" pos:end="19:43"><expr pos:start="19:26" pos:end="19:43"><operator pos:start="19:26" pos:end="19:26">(</operator><name pos:start="19:27" pos:end="19:34">uint32_t</name><operator pos:start="19:35" pos:end="19:35">*</operator><operator pos:start="19:36" pos:end="19:36">)</operator><name pos:start="19:37" pos:end="19:43"><name pos:start="19:37" pos:end="19:37">s</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:43">data</name></name></expr></argument>, <argument pos:start="19:46" pos:end="19:65"><expr pos:start="19:46" pos:end="19:65"><operator pos:start="19:46" pos:end="19:46">(</operator><specifier pos:start="19:47" pos:end="19:51">const</specifier> <name pos:start="19:53" pos:end="19:60">uint32_t</name><operator pos:start="19:61" pos:end="19:61">*</operator><operator pos:start="19:62" pos:end="19:62">)</operator><name pos:start="19:63" pos:end="19:65">buf</name></expr></argument>, <argument pos:start="19:68" pos:end="19:80"><expr pos:start="19:68" pos:end="19:80"><name pos:start="19:68" pos:end="19:75">buf_size</name> <operator pos:start="19:77" pos:end="19:78">&gt;&gt;</operator> <literal type="number" pos:start="19:80" pos:end="19:80">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="20:39"><expr pos:start="20:9" pos:end="20:38"><name pos:start="20:9" pos:end="20:14"><name pos:start="20:9" pos:end="20:9">s</name><operator pos:start="20:10" pos:end="20:11">-&gt;</operator><name pos:start="20:12" pos:end="20:14">ptr</name></name> <operator pos:start="20:16" pos:end="20:16">=</operator> <name pos:start="20:18" pos:end="20:28"><name pos:start="20:18" pos:end="20:18">s</name><operator pos:start="20:19" pos:end="20:20">-&gt;</operator><name pos:start="20:21" pos:end="20:28">last_ptr</name></name> <operator pos:start="20:30" pos:end="20:30">=</operator> <name pos:start="20:32" pos:end="20:38"><name pos:start="20:32" pos:end="20:32">s</name><operator pos:start="20:33" pos:end="20:34">-&gt;</operator><name pos:start="20:35" pos:end="20:38">data</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="21:41"><expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:19">data_end</name></name> <operator pos:start="21:21" pos:end="21:21">=</operator> <name pos:start="21:23" pos:end="21:29"><name pos:start="21:23" pos:end="21:23">s</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:29">data</name></name> <operator pos:start="21:31" pos:end="21:31">+</operator> <name pos:start="21:33" pos:end="21:40">buf_size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:60"><expr pos:start="22:9" pos:end="22:59"><name pos:start="22:9" pos:end="22:15">nblocks</name> <operator pos:start="22:17" pos:end="22:17">=</operator> <name pos:start="22:19" pos:end="22:28"><name pos:start="22:19" pos:end="22:19">s</name><operator pos:start="22:20" pos:end="22:21">-&gt;</operator><name pos:start="22:22" pos:end="22:28">samples</name></name> <operator pos:start="22:30" pos:end="22:30">=</operator> <call pos:start="22:32" pos:end="22:59"><name pos:start="22:32" pos:end="22:50">bytestream_get_be32</name><argument_list pos:start="22:51" pos:end="22:59">(<argument pos:start="22:52" pos:end="22:58"><expr pos:start="22:52" pos:end="22:58"><operator pos:start="22:52" pos:end="22:52">&amp;</operator><name pos:start="22:53" pos:end="22:58"><name pos:start="22:53" pos:end="22:53">s</name><operator pos:start="22:54" pos:end="22:55">-&gt;</operator><name pos:start="22:56" pos:end="22:58">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:42"><expr pos:start="23:9" pos:end="23:41"><name pos:start="23:9" pos:end="23:9">n</name> <operator pos:start="23:11" pos:end="23:11">=</operator>  <call pos:start="23:14" pos:end="23:41"><name pos:start="23:14" pos:end="23:32">bytestream_get_be32</name><argument_list pos:start="23:33" pos:end="23:41">(<argument pos:start="23:34" pos:end="23:40"><expr pos:start="23:34" pos:end="23:40"><operator pos:start="23:34" pos:end="23:34">&amp;</operator><name pos:start="23:35" pos:end="23:40"><name pos:start="23:35" pos:end="23:35">s</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:40">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="24:9" pos:end="54:22"><if pos:start="24:9" pos:end="54:22">if<condition pos:start="24:11" pos:end="24:26">(<expr pos:start="24:12" pos:end="24:25"><name pos:start="24:12" pos:end="24:23"><name pos:start="24:12" pos:end="24:12">n</name> <argument_list type="generic" pos:start="24:14" pos:end="24:23">&lt; <argument pos:start="24:16" pos:end="24:21"><expr pos:start="24:16" pos:end="24:21"><literal type="number" pos:start="24:16" pos:end="24:16">0</literal> <operator pos:start="24:18" pos:end="24:19">||</operator> <name pos:start="24:21" pos:end="24:21">n</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="24:25" pos:end="24:25">3</literal></expr>)</condition><block pos:start="24:27" pos:end="54:22">{<block_content pos:start="25:13" pos:end="54:22">
            <expr_stmt pos:start="25:13" pos:end="25:69"><expr pos:start="25:13" pos:end="25:68"><call pos:start="25:13" pos:end="25:68"><name pos:start="25:13" pos:end="25:18">av_log</name><argument_list pos:start="25:19" pos:end="25:68">(<argument pos:start="25:20" pos:end="25:24"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">avctx</name></expr></argument>, <argument pos:start="25:27" pos:end="25:38"><expr pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:41" pos:end="25:67"><expr pos:start="25:41" pos:end="25:67"><literal type="string" pos:start="25:41" pos:end="25:67">"Incorrect offset passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="26:13" pos:end="26:27"><expr pos:start="26:13" pos:end="26:26"><name pos:start="26:13" pos:end="26:19"><name pos:start="26:13" pos:end="26:13">s</name><operator pos:start="26:14" pos:end="26:15">-&gt;</operator><name pos:start="26:16" pos:end="26:19">data</name></name> <operator pos:start="26:21" pos:end="26:21">=</operator> <name pos:start="26:23" pos:end="26:26">NULL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:20"><expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:14">ptr</name></name> <operator pos:start="27:16" pos:end="27:17">+=</operator> <name pos:start="27:19" pos:end="27:19">n</name></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:40"><expr pos:start="28:9" pos:end="28:39"><name pos:start="28:9" pos:end="28:29"><name pos:start="28:9" pos:end="28:9">s</name><operator pos:start="28:10" pos:end="28:11">-&gt;</operator><name pos:start="28:12" pos:end="28:29">currentframeblocks</name></name> <operator pos:start="28:31" pos:end="28:31">=</operator> <name pos:start="28:33" pos:end="28:39">nblocks</name></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:17"><expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:11">buf</name> <operator pos:start="29:13" pos:end="29:14">+=</operator> <literal type="number" pos:start="29:16" pos:end="29:16">4</literal></expr>;</expr_stmt>
        <if_stmt pos:start="30:9" pos:end="54:22"><if pos:start="30:9" pos:end="54:22">if <condition pos:start="30:12" pos:end="30:28">(<expr pos:start="30:13" pos:end="30:27"><name pos:start="30:13" pos:end="30:22"><name pos:start="30:13" pos:end="30:13">s</name><operator pos:start="30:14" pos:end="30:15">-&gt;</operator><name pos:start="30:16" pos:end="30:22">samples</name></name> <operator pos:start="30:24" pos:end="30:25">&lt;=</operator> <literal type="number" pos:start="30:27" pos:end="30:27">0</literal></expr>)</condition> <block pos:start="30:30" pos:end="54:22">{<block_content pos:start="31:13" pos:end="54:22">
            <expr_stmt pos:start="31:13" pos:end="31:27"><expr pos:start="31:13" pos:end="31:26"><operator pos:start="31:13" pos:end="31:13">*</operator><name pos:start="31:14" pos:end="31:22">data_size</name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr>;</expr_stmt>
            <return pos:start="32:13" pos:end="32:28">return <expr pos:start="32:20" pos:end="32:27"><name pos:start="32:20" pos:end="32:27">buf_size</name></expr>;</return>
        <expr_stmt pos:start="33:9" pos:end="33:53"><expr pos:start="33:9" pos:end="33:52"><call pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:14">memset</name><argument_list pos:start="33:15" pos:end="33:52">(<argument pos:start="33:16" pos:end="33:26"><expr pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:26">decoded0</name></name></expr></argument>,  <argument pos:start="33:30" pos:end="33:30"><expr pos:start="33:30" pos:end="33:30"><literal type="number" pos:start="33:30" pos:end="33:30">0</literal></expr></argument>, <argument pos:start="33:33" pos:end="33:51"><expr pos:start="33:33" pos:end="33:51"><sizeof pos:start="33:33" pos:end="33:51">sizeof<argument_list pos:start="33:39" pos:end="33:51">(<argument pos:start="33:40" pos:end="33:50"><expr pos:start="33:40" pos:end="33:50"><name pos:start="33:40" pos:end="33:50"><name pos:start="33:40" pos:end="33:40">s</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:50">decoded0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:53"><expr pos:start="34:9" pos:end="34:52"><call pos:start="34:9" pos:end="34:52"><name pos:start="34:9" pos:end="34:14">memset</name><argument_list pos:start="34:15" pos:end="34:52">(<argument pos:start="34:16" pos:end="34:26"><expr pos:start="34:16" pos:end="34:26"><name pos:start="34:16" pos:end="34:26"><name pos:start="34:16" pos:end="34:16">s</name><operator pos:start="34:17" pos:end="34:18">-&gt;</operator><name pos:start="34:19" pos:end="34:26">decoded1</name></name></expr></argument>,  <argument pos:start="34:30" pos:end="34:30"><expr pos:start="34:30" pos:end="34:30"><literal type="number" pos:start="34:30" pos:end="34:30">0</literal></expr></argument>, <argument pos:start="34:33" pos:end="34:51"><expr pos:start="34:33" pos:end="34:51"><sizeof pos:start="34:33" pos:end="34:51">sizeof<argument_list pos:start="34:39" pos:end="34:51">(<argument pos:start="34:40" pos:end="34:50"><expr pos:start="34:40" pos:end="34:50"><name pos:start="34:40" pos:end="34:50"><name pos:start="34:40" pos:end="34:40">s</name><operator pos:start="34:41" pos:end="34:42">-&gt;</operator><name pos:start="34:43" pos:end="34:50">decoded1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="35:9" pos:end="35:42">/* Initialize the frame decoder */</comment>
        <expr_stmt pos:start="36:9" pos:end="36:30"><expr pos:start="36:9" pos:end="36:29"><call pos:start="36:9" pos:end="36:29"><name pos:start="36:9" pos:end="36:26">init_frame_decoder</name><argument_list pos:start="36:27" pos:end="36:29">(<argument pos:start="36:28" pos:end="36:28"><expr pos:start="36:28" pos:end="36:28"><name pos:start="36:28" pos:end="36:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="37:5" pos:end="54:22"><if pos:start="37:5" pos:end="54:22">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:10">s</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:16">data</name></name></expr>)</condition> <block pos:start="37:19" pos:end="54:22">{<block_content pos:start="38:9" pos:end="54:22">
        <expr_stmt pos:start="38:9" pos:end="38:23"><expr pos:start="38:9" pos:end="38:22"><operator pos:start="38:9" pos:end="38:9">*</operator><name pos:start="38:10" pos:end="38:18">data_size</name> <operator pos:start="38:20" pos:end="38:20">=</operator> <literal type="number" pos:start="38:22" pos:end="38:22">0</literal></expr>;</expr_stmt>
        <return pos:start="39:9" pos:end="39:24">return <expr pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:23">buf_size</name></expr>;</return>
    <expr_stmt pos:start="40:5" pos:end="40:25"><expr pos:start="40:5" pos:end="40:24"><name pos:start="40:5" pos:end="40:11">nblocks</name> <operator pos:start="40:13" pos:end="40:13">=</operator> <name pos:start="40:15" pos:end="40:24"><name pos:start="40:15" pos:end="40:15">s</name><operator pos:start="40:16" pos:end="40:17">-&gt;</operator><name pos:start="40:18" pos:end="40:24">samples</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:53"><expr pos:start="41:5" pos:end="41:52"><name pos:start="41:5" pos:end="41:18">blockstodecode</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:52"><name pos:start="41:22" pos:end="41:26">FFMIN</name><argument_list pos:start="41:27" pos:end="41:52">(<argument pos:start="41:28" pos:end="41:42"><expr pos:start="41:28" pos:end="41:42"><name pos:start="41:28" pos:end="41:42">BLOCKS_PER_LOOP</name></expr></argument>, <argument pos:start="41:45" pos:end="41:51"><expr pos:start="41:45" pos:end="41:51"><name pos:start="41:45" pos:end="41:51">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="42:5" pos:end="45:45"><if pos:start="42:5" pos:end="43:43">if <condition pos:start="42:8" pos:end="42:76">(<expr pos:start="42:9" pos:end="42:75"><operator pos:start="42:9" pos:end="42:9">(</operator><name pos:start="42:10" pos:end="42:20"><name pos:start="42:10" pos:end="42:10">s</name><operator pos:start="42:11" pos:end="42:12">-&gt;</operator><name pos:start="42:13" pos:end="42:20">channels</name></name> <operator pos:start="42:22" pos:end="42:23">==</operator> <literal type="number" pos:start="42:25" pos:end="42:25">1</literal><operator pos:start="42:26" pos:end="42:26">)</operator> <operator pos:start="42:28" pos:end="42:29">||</operator> <operator pos:start="42:31" pos:end="42:31">(</operator><name pos:start="42:32" pos:end="42:44"><name pos:start="42:32" pos:end="42:32">s</name><operator pos:start="42:33" pos:end="42:34">-&gt;</operator><name pos:start="42:35" pos:end="42:44">frameflags</name></name> <operator pos:start="42:46" pos:end="42:46">&amp;</operator> <name pos:start="42:48" pos:end="42:74">APE_FRAMECODE_PSEUDO_STEREO</name><operator pos:start="42:75" pos:end="42:75">)</operator></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:43"><block_content pos:start="43:9" pos:end="43:43">
        <expr_stmt pos:start="43:9" pos:end="43:43"><expr pos:start="43:9" pos:end="43:42"><call pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:23">ape_unpack_mono</name><argument_list pos:start="43:24" pos:end="43:42">(<argument pos:start="43:25" pos:end="43:25"><expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">s</name></expr></argument>, <argument pos:start="43:28" pos:end="43:41"><expr pos:start="43:28" pos:end="43:41"><name pos:start="43:28" pos:end="43:41">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else pos:start="44:5" pos:end="45:45">else<block type="pseudo" pos:start="45:9" pos:end="45:45"><block_content pos:start="45:9" pos:end="45:45">
        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><call pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:25">ape_unpack_stereo</name><argument_list pos:start="45:26" pos:end="45:44">(<argument pos:start="45:27" pos:end="45:27"><expr pos:start="45:27" pos:end="45:27"><name pos:start="45:27" pos:end="45:27">s</name></expr></argument>, <argument pos:start="45:30" pos:end="45:43"><expr pos:start="45:30" pos:end="45:43"><name pos:start="45:30" pos:end="45:43">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <for pos:start="46:5" pos:end="54:22">for <control pos:start="46:9" pos:end="46:40">(<init pos:start="46:10" pos:end="46:15"><expr pos:start="46:10" pos:end="46:14"><name pos:start="46:10" pos:end="46:10">i</name> <operator pos:start="46:12" pos:end="46:12">=</operator> <literal type="number" pos:start="46:14" pos:end="46:14">0</literal></expr>;</init> <condition pos:start="46:17" pos:end="46:35"><expr pos:start="46:17" pos:end="46:34"><name pos:start="46:17" pos:end="46:17">i</name> <operator pos:start="46:19" pos:end="46:19">&lt;</operator> <name pos:start="46:21" pos:end="46:34">blockstodecode</name></expr>;</condition> <incr pos:start="46:37" pos:end="46:39"><expr pos:start="46:37" pos:end="46:39"><name pos:start="46:37" pos:end="46:37">i</name><operator pos:start="46:38" pos:end="46:39">++</operator></expr></incr>)</control> <block pos:start="46:42" pos:end="54:22">{<block_content pos:start="47:9" pos:end="54:22">
        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><operator pos:start="47:9" pos:end="47:9">*</operator><name pos:start="47:10" pos:end="47:16">samples</name><operator pos:start="47:17" pos:end="47:18">++</operator> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:35"><name pos:start="47:22" pos:end="47:22">s</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:32">decoded0</name><index pos:start="47:33" pos:end="47:35">[<expr pos:start="47:34" pos:end="47:34"><name pos:start="47:34" pos:end="47:34">i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="48:9" pos:end="49:40"><if pos:start="48:9" pos:end="49:40">if<condition pos:start="48:11" pos:end="48:28">(<expr pos:start="48:12" pos:end="48:27"><name pos:start="48:12" pos:end="48:22"><name pos:start="48:12" pos:end="48:12">s</name><operator pos:start="48:13" pos:end="48:14">-&gt;</operator><name pos:start="48:15" pos:end="48:22">channels</name></name> <operator pos:start="48:24" pos:end="48:25">==</operator> <literal type="number" pos:start="48:27" pos:end="48:27">2</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:40"><block_content pos:start="49:13" pos:end="49:40">
            <expr_stmt pos:start="49:13" pos:end="49:40"><expr pos:start="49:13" pos:end="49:39"><operator pos:start="49:13" pos:end="49:13">*</operator><name pos:start="49:14" pos:end="49:20">samples</name><operator pos:start="49:21" pos:end="49:22">++</operator> <operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:39"><name pos:start="49:26" pos:end="49:26">s</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:36">decoded1</name><index pos:start="49:37" pos:end="49:39">[<expr pos:start="49:38" pos:end="49:38"><name pos:start="49:38" pos:end="49:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:33"><expr pos:start="50:5" pos:end="50:32"><name pos:start="50:5" pos:end="50:14"><name pos:start="50:5" pos:end="50:5">s</name><operator pos:start="50:6" pos:end="50:7">-&gt;</operator><name pos:start="50:8" pos:end="50:14">samples</name></name> <operator pos:start="50:16" pos:end="50:17">-=</operator> <name pos:start="50:19" pos:end="50:32">blockstodecode</name></expr>;</expr_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:50"><expr pos:start="51:5" pos:end="51:49"><operator pos:start="51:5" pos:end="51:5">*</operator><name pos:start="51:6" pos:end="51:14">data_size</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:31">blockstodecode</name> <operator pos:start="51:33" pos:end="51:33">*</operator> <literal type="number" pos:start="51:35" pos:end="51:35">2</literal> <operator pos:start="51:37" pos:end="51:37">*</operator> <name pos:start="51:39" pos:end="51:49"><name pos:start="51:39" pos:end="51:39">s</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:49">channels</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="52:5" pos:end="52:62"><expr pos:start="52:5" pos:end="52:61"><name pos:start="52:5" pos:end="52:14">bytes_used</name> <operator pos:start="52:16" pos:end="52:16">=</operator> <ternary pos:start="52:18" pos:end="52:61"><condition pos:start="52:18" pos:end="52:29"><expr pos:start="52:18" pos:end="52:27"><name pos:start="52:18" pos:end="52:27"><name pos:start="52:18" pos:end="52:18">s</name><operator pos:start="52:19" pos:end="52:20">-&gt;</operator><name pos:start="52:21" pos:end="52:27">samples</name></name></expr> ?</condition><then pos:start="52:31" pos:end="52:50"> <expr pos:start="52:31" pos:end="52:50"><name pos:start="52:31" pos:end="52:36"><name pos:start="52:31" pos:end="52:31">s</name><operator pos:start="52:32" pos:end="52:33">-&gt;</operator><name pos:start="52:34" pos:end="52:36">ptr</name></name> <operator pos:start="52:38" pos:end="52:38">-</operator> <name pos:start="52:40" pos:end="52:50"><name pos:start="52:40" pos:end="52:40">s</name><operator pos:start="52:41" pos:end="52:42">-&gt;</operator><name pos:start="52:43" pos:end="52:50">last_ptr</name></name></expr> </then><else pos:start="52:52" pos:end="52:61">: <expr pos:start="52:54" pos:end="52:61"><name pos:start="52:54" pos:end="52:61">buf_size</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:25"><expr pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:15">last_ptr</name></name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:24"><name pos:start="53:19" pos:end="53:19">s</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:24">ptr</name></name></expr>;</expr_stmt>
    <return pos:start="54:5" pos:end="54:22">return <expr pos:start="54:12" pos:end="54:21"><name pos:start="54:12" pos:end="54:21">bytes_used</name></expr>;</return></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
