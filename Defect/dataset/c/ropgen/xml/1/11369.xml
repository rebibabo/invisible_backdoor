<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11369.c" pos:tabs="8"><function pos:start="1:1" pos:end="206:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">PCIDevice</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:40">do_pci_register_device</name><parameter_list pos:start="1:41" pos:end="5:54">(<parameter pos:start="1:42" pos:end="1:59"><decl pos:start="1:42" pos:end="1:59"><type pos:start="1:42" pos:end="1:59"><name pos:start="1:42" pos:end="1:50">PCIDevice</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:59">pci_dev</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:72"><decl pos:start="1:62" pos:end="1:72"><type pos:start="1:62" pos:end="1:72"><name pos:start="1:62" pos:end="1:67">PCIBus</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">bus</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:57"><decl pos:start="3:42" pos:end="3:57"><type pos:start="3:42" pos:end="3:57"><specifier pos:start="3:42" pos:end="3:46">const</specifier> <name pos:start="3:48" pos:end="3:51">char</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:57">name</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:68"><decl pos:start="3:60" pos:end="3:68"><type pos:start="3:60" pos:end="3:68"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:68">devfn</name></decl></parameter>,

                                         <parameter pos:start="5:42" pos:end="5:53"><decl pos:start="5:42" pos:end="5:53"><type pos:start="5:42" pos:end="5:53"><name pos:start="5:42" pos:end="5:46">Error</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier><modifier pos:start="5:49" pos:end="5:49">*</modifier></type><name pos:start="5:50" pos:end="5:53">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="206:1">{<block_content pos:start="9:5" pos:end="204:19">

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:54"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCIDeviceClass</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:22">pc</name> <init pos:start="9:24" pos:end="9:54">= <expr pos:start="9:26" pos:end="9:54"><call pos:start="9:26" pos:end="9:54"><name pos:start="9:26" pos:end="9:45">PCI_DEVICE_GET_CLASS</name><argument_list pos:start="9:46" pos:end="9:54">(<argument pos:start="9:47" pos:end="9:53"><expr pos:start="9:47" pos:end="9:53"><name pos:start="9:47" pos:end="9:53">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:52"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">PCIConfigReadFunc</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:34">config_read</name> <init pos:start="11:36" pos:end="11:52">= <expr pos:start="11:38" pos:end="11:52"><name pos:start="11:38" pos:end="11:52"><name pos:start="11:38" pos:end="11:39">pc</name><operator pos:start="11:40" pos:end="11:41">-&gt;</operator><name pos:start="11:42" pos:end="11:52">config_read</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">PCIConfigWriteFunc</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:36">config_write</name> <init pos:start="13:38" pos:end="13:55">= <expr pos:start="13:40" pos:end="13:55"><name pos:start="13:40" pos:end="13:55"><name pos:start="13:40" pos:end="13:41">pc</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:55">config_write</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">AddressSpace</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">dma_as</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:38"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">DeviceState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">dev</name> <init pos:start="19:22" pos:end="19:38">= <expr pos:start="19:24" pos:end="19:38"><call pos:start="19:24" pos:end="19:38"><name pos:start="19:24" pos:end="19:29">DEVICE</name><argument_list pos:start="19:30" pos:end="19:38">(<argument pos:start="19:31" pos:end="19:37"><expr pos:start="19:31" pos:end="19:37"><name pos:start="19:31" pos:end="19:37">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:11">pci_dev</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:16">bus</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:22">bus</name></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="25:66">/* Only pci bridges can be attached to extra PCI root buses */</comment>

    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:66">(<expr pos:start="27:9" pos:end="27:65"><call pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:23">pci_bus_is_root</name><argument_list pos:start="27:24" pos:end="27:28">(<argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><name pos:start="27:25" pos:end="27:27">bus</name></expr></argument>)</argument_list></call> <operator pos:start="27:30" pos:end="27:31">&amp;&amp;</operator> <name pos:start="27:33" pos:end="27:47"><name pos:start="27:33" pos:end="27:35">bus</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:47">parent_dev</name></name> <operator pos:start="27:49" pos:end="27:50">&amp;&amp;</operator> <operator pos:start="27:52" pos:end="27:52">!</operator><name pos:start="27:53" pos:end="27:65"><name pos:start="27:53" pos:end="27:54">pc</name><operator pos:start="27:55" pos:end="27:56">-&gt;</operator><name pos:start="27:57" pos:end="27:65">is_bridge</name></name></expr>)</condition> <block pos:start="27:68" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:20">

        <expr_stmt pos:start="29:9" pos:end="33:43"><expr pos:start="29:9" pos:end="33:42"><call pos:start="29:9" pos:end="33:42"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="33:42">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>,

                   <argument pos:start="31:20" pos:end="31:70"><expr pos:start="31:20" pos:end="31:70"><literal type="string" pos:start="31:20" pos:end="31:70">"PCI: Only PCI/PCIe bridges can be plugged into %s"</literal></expr></argument>,

                    <argument pos:start="33:21" pos:end="33:41"><expr pos:start="33:21" pos:end="33:41"><name pos:start="33:21" pos:end="33:41"><name pos:start="33:21" pos:end="33:23">bus</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:35">parent_dev</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:41">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:20">return <expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="91:5"><if pos:start="41:5" pos:end="61:5">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:13">devfn</name> <operator pos:start="41:15" pos:end="41:15">&lt;</operator> <literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>)</condition> <block pos:start="41:20" pos:end="61:5">{<block_content pos:start="43:9" pos:end="59:12">

        <for pos:start="43:9" pos:end="51:9">for<control pos:start="43:12" pos:end="45:34">(<init pos:start="43:13" pos:end="43:36"><expr pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:17">devfn</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:34"><name pos:start="43:21" pos:end="43:23">bus</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:34">devfn_min</name></name></expr> ;</init> <condition pos:start="43:38" pos:end="43:70"><expr pos:start="43:38" pos:end="43:69"><name pos:start="43:38" pos:end="43:42">devfn</name> <operator pos:start="43:44" pos:end="43:44">&lt;</operator> <call pos:start="43:46" pos:end="43:69"><name pos:start="43:46" pos:end="43:55">ARRAY_SIZE</name><argument_list pos:start="43:56" pos:end="43:69">(<argument pos:start="43:57" pos:end="43:68"><expr pos:start="43:57" pos:end="43:68"><name pos:start="43:57" pos:end="43:68"><name pos:start="43:57" pos:end="43:59">bus</name><operator pos:start="43:60" pos:end="43:61">-&gt;</operator><name pos:start="43:62" pos:end="43:68">devices</name></name></expr></argument>)</argument_list></call></expr>;</condition>

            <incr pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:17">devfn</name> <operator pos:start="45:19" pos:end="45:20">+=</operator> <name pos:start="45:22" pos:end="45:33">PCI_FUNC_MAX</name></expr></incr>)</control> <block pos:start="45:36" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:27">

            <if_stmt pos:start="47:13" pos:end="49:27"><if pos:start="47:13" pos:end="49:27">if <condition pos:start="47:16" pos:end="47:37">(<expr pos:start="47:17" pos:end="47:36"><operator pos:start="47:17" pos:end="47:17">!</operator><name pos:start="47:18" pos:end="47:36"><name pos:start="47:18" pos:end="47:20">bus</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:29">devices</name><index pos:start="47:30" pos:end="47:36">[<expr pos:start="47:31" pos:end="47:35"><name pos:start="47:31" pos:end="47:35">devfn</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:27"><block_content pos:start="49:17" pos:end="49:27">

                <goto pos:start="49:17" pos:end="49:27">goto <name pos:start="49:22" pos:end="49:26">found</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="53:9" pos:end="55:25"><expr pos:start="53:9" pos:end="55:24"><call pos:start="53:9" pos:end="55:24"><name pos:start="53:9" pos:end="53:18">error_setg</name><argument_list pos:start="53:19" pos:end="55:24">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">errp</name></expr></argument>, <argument pos:start="53:26" pos:end="53:77"><expr pos:start="53:26" pos:end="53:77"><literal type="string" pos:start="53:26" pos:end="53:77">"PCI: no slot/function available for %s, all in use"</literal></expr></argument>,

                   <argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:20">return <expr pos:start="57:16" pos:end="57:19"><name pos:start="57:16" pos:end="57:19">NULL</name></expr>;</return>

    <label pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:9">found</name>:</label> <empty_stmt pos:start="59:12" pos:end="59:12">;</empty_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="73:5">else if <condition pos:start="61:15" pos:end="61:35">(<expr pos:start="61:16" pos:end="61:34"><name pos:start="61:16" pos:end="61:34"><name pos:start="61:16" pos:end="61:18">bus</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:27">devices</name><index pos:start="61:28" pos:end="61:34">[<expr pos:start="61:29" pos:end="61:33"><name pos:start="61:29" pos:end="61:33">devfn</name></expr>]</index></name></expr>)</condition> <block pos:start="61:37" pos:end="73:5">{<block_content pos:start="63:9" pos:end="71:20">

        <expr_stmt pos:start="63:9" pos:end="69:46"><expr pos:start="63:9" pos:end="69:45"><call pos:start="63:9" pos:end="69:45"><name pos:start="63:9" pos:end="63:18">error_setg</name><argument_list pos:start="63:19" pos:end="69:45">(<argument pos:start="63:20" pos:end="63:23"><expr pos:start="63:20" pos:end="63:23"><name pos:start="63:20" pos:end="63:23">errp</name></expr></argument>, <argument pos:start="63:26" pos:end="65:34"><expr pos:start="63:26" pos:end="65:34"><literal type="string" pos:start="63:26" pos:end="63:73">"PCI: slot %d function %d not available for %s,"</literal>

                   <literal type="string" pos:start="65:20" pos:end="65:34">" in use by %s"</literal></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:34"><expr pos:start="67:20" pos:end="67:34"><call pos:start="67:20" pos:end="67:34"><name pos:start="67:20" pos:end="67:27">PCI_SLOT</name><argument_list pos:start="67:28" pos:end="67:34">(<argument pos:start="67:29" pos:end="67:33"><expr pos:start="67:29" pos:end="67:33"><name pos:start="67:29" pos:end="67:33">devfn</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:37" pos:end="67:51"><expr pos:start="67:37" pos:end="67:51"><call pos:start="67:37" pos:end="67:51"><name pos:start="67:37" pos:end="67:44">PCI_FUNC</name><argument_list pos:start="67:45" pos:end="67:51">(<argument pos:start="67:46" pos:end="67:50"><expr pos:start="67:46" pos:end="67:50"><name pos:start="67:46" pos:end="67:50">devfn</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:54" pos:end="67:57"><expr pos:start="67:54" pos:end="67:57"><name pos:start="67:54" pos:end="67:57">name</name></expr></argument>,

                   <argument pos:start="69:20" pos:end="69:44"><expr pos:start="69:20" pos:end="69:44"><name pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:22">bus</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:31">devices</name><index pos:start="69:32" pos:end="69:38">[<expr pos:start="69:33" pos:end="69:37"><name pos:start="69:33" pos:end="69:37">devfn</name></expr>]</index></name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:44">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:20">return <expr pos:start="71:16" pos:end="71:19"><name pos:start="71:16" pos:end="71:19">NULL</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="91:5">else if <condition pos:start="73:15" pos:end="75:43">(<expr pos:start="73:16" pos:end="75:42"><name pos:start="73:16" pos:end="73:30"><name pos:start="73:16" pos:end="73:18">dev</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:30">hotplugged</name></name> <operator pos:start="73:32" pos:end="73:33">&amp;&amp;</operator>

               <call pos:start="75:16" pos:end="75:42"><name pos:start="75:16" pos:end="75:33">pci_get_function_0</name><argument_list pos:start="75:34" pos:end="75:42">(<argument pos:start="75:35" pos:end="75:41"><expr pos:start="75:35" pos:end="75:41"><name pos:start="75:35" pos:end="75:41">pci_dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:45" pos:end="91:5">{<block_content pos:start="77:9" pos:end="89:19">

        <expr_stmt pos:start="77:9" pos:end="85:25"><expr pos:start="77:9" pos:end="85:24"><call pos:start="77:9" pos:end="85:24"><name pos:start="77:9" pos:end="77:18">error_setg</name><argument_list pos:start="77:19" pos:end="85:24">(<argument pos:start="77:20" pos:end="77:23"><expr pos:start="77:20" pos:end="77:23"><name pos:start="77:20" pos:end="77:23">errp</name></expr></argument>, <argument pos:start="77:26" pos:end="79:61"><expr pos:start="77:26" pos:end="79:61"><literal type="string" pos:start="77:26" pos:end="77:74">"PCI: slot %d function 0 already ocuppied by %s,"</literal>

                   <literal type="string" pos:start="79:20" pos:end="79:61">" new func %s cannot be exposed to guest."</literal></expr></argument>,

                   <argument pos:start="81:20" pos:end="81:34"><expr pos:start="81:20" pos:end="81:34"><call pos:start="81:20" pos:end="81:34"><name pos:start="81:20" pos:end="81:27">PCI_SLOT</name><argument_list pos:start="81:28" pos:end="81:34">(<argument pos:start="81:29" pos:end="81:33"><expr pos:start="81:29" pos:end="81:33"><name pos:start="81:29" pos:end="81:33">devfn</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:68"><expr pos:start="83:20" pos:end="83:68"><name pos:start="83:20" pos:end="83:62"><name pos:start="83:20" pos:end="83:22">bus</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:31">devices</name><index pos:start="83:32" pos:end="83:62">[<expr pos:start="83:33" pos:end="83:61"><call pos:start="83:33" pos:end="83:61"><name pos:start="83:33" pos:end="83:41">PCI_DEVFN</name><argument_list pos:start="83:42" pos:end="83:61">(<argument pos:start="83:43" pos:end="83:57"><expr pos:start="83:43" pos:end="83:57"><call pos:start="83:43" pos:end="83:57"><name pos:start="83:43" pos:end="83:50">PCI_SLOT</name><argument_list pos:start="83:51" pos:end="83:57">(<argument pos:start="83:52" pos:end="83:56"><expr pos:start="83:52" pos:end="83:56"><name pos:start="83:52" pos:end="83:56">devfn</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="83:60" pos:end="83:60"><expr pos:start="83:60" pos:end="83:60"><literal type="number" pos:start="83:60" pos:end="83:60">0</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="83:63" pos:end="83:64">-&gt;</operator><name pos:start="83:65" pos:end="83:68">name</name></expr></argument>,

                   <argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



       <return pos:start="89:8" pos:end="89:19">return <expr pos:start="89:15" pos:end="89:18"><name pos:start="89:15" pos:end="89:18">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:11">pci_dev</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:18">devfn</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:26">devfn</name></expr>;</expr_stmt>


    <expr_stmt pos:start="98:5" pos:end="98:53"><expr pos:start="98:5" pos:end="98:52"><name pos:start="98:5" pos:end="98:10">dma_as</name> <operator pos:start="98:12" pos:end="98:12">=</operator> <call pos:start="98:14" pos:end="98:52"><name pos:start="98:14" pos:end="98:43">pci_device_iommu_address_space</name><argument_list pos:start="98:44" pos:end="98:52">(<argument pos:start="98:45" pos:end="98:51"><expr pos:start="98:45" pos:end="98:51"><name pos:start="98:45" pos:end="98:51">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="102:5" pos:end="106:80"><expr pos:start="102:5" pos:end="106:79"><call pos:start="102:5" pos:end="106:79"><name pos:start="102:5" pos:end="102:28">memory_region_init_alias</name><argument_list pos:start="102:29" pos:end="106:79">(<argument pos:start="102:30" pos:end="102:63"><expr pos:start="102:30" pos:end="102:63"><operator pos:start="102:30" pos:end="102:30">&amp;</operator><name pos:start="102:31" pos:end="102:63"><name pos:start="102:31" pos:end="102:37">pci_dev</name><operator pos:start="102:38" pos:end="102:39">-&gt;</operator><name pos:start="102:40" pos:end="102:63">bus_master_enable_region</name></name></expr></argument>,

                             <argument pos:start="104:30" pos:end="104:44"><expr pos:start="104:30" pos:end="104:44"><call pos:start="104:30" pos:end="104:44"><name pos:start="104:30" pos:end="104:35">OBJECT</name><argument_list pos:start="104:36" pos:end="104:44">(<argument pos:start="104:37" pos:end="104:43"><expr pos:start="104:37" pos:end="104:43"><name pos:start="104:37" pos:end="104:43">pci_dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="104:47" pos:end="104:58"><expr pos:start="104:47" pos:end="104:58"><literal type="string" pos:start="104:47" pos:end="104:58">"bus master"</literal></expr></argument>,

                             <argument pos:start="106:30" pos:end="106:41"><expr pos:start="106:30" pos:end="106:41"><name pos:start="106:30" pos:end="106:41"><name pos:start="106:30" pos:end="106:35">dma_as</name><operator pos:start="106:36" pos:end="106:37">-&gt;</operator><name pos:start="106:38" pos:end="106:41">root</name></name></expr></argument>, <argument pos:start="106:44" pos:end="106:44"><expr pos:start="106:44" pos:end="106:44"><literal type="number" pos:start="106:44" pos:end="106:44">0</literal></expr></argument>, <argument pos:start="106:47" pos:end="106:78"><expr pos:start="106:47" pos:end="106:78"><call pos:start="106:47" pos:end="106:78"><name pos:start="106:47" pos:end="106:64">memory_region_size</name><argument_list pos:start="106:65" pos:end="106:78">(<argument pos:start="106:66" pos:end="106:77"><expr pos:start="106:66" pos:end="106:77"><name pos:start="106:66" pos:end="106:77"><name pos:start="106:66" pos:end="106:71">dma_as</name><operator pos:start="106:72" pos:end="106:73">-&gt;</operator><name pos:start="106:74" pos:end="106:77">root</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="108:5" pos:end="108:73"><expr pos:start="108:5" pos:end="108:72"><call pos:start="108:5" pos:end="108:72"><name pos:start="108:5" pos:end="108:29">memory_region_set_enabled</name><argument_list pos:start="108:30" pos:end="108:72">(<argument pos:start="108:31" pos:end="108:64"><expr pos:start="108:31" pos:end="108:64"><operator pos:start="108:31" pos:end="108:31">&amp;</operator><name pos:start="108:32" pos:end="108:64"><name pos:start="108:32" pos:end="108:38">pci_dev</name><operator pos:start="108:39" pos:end="108:40">-&gt;</operator><name pos:start="108:41" pos:end="108:64">bus_master_enable_region</name></name></expr></argument>, <argument pos:start="108:67" pos:end="108:71"><expr pos:start="108:67" pos:end="108:71"><name pos:start="108:67" pos:end="108:71">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="110:5" pos:end="112:29"><expr pos:start="110:5" pos:end="112:28"><call pos:start="110:5" pos:end="112:28"><name pos:start="110:5" pos:end="110:22">address_space_init</name><argument_list pos:start="110:23" pos:end="112:28">(<argument pos:start="110:24" pos:end="110:46"><expr pos:start="110:24" pos:end="110:46"><operator pos:start="110:24" pos:end="110:24">&amp;</operator><name pos:start="110:25" pos:end="110:46"><name pos:start="110:25" pos:end="110:31">pci_dev</name><operator pos:start="110:32" pos:end="110:33">-&gt;</operator><name pos:start="110:34" pos:end="110:46">bus_master_as</name></name></expr></argument>, <argument pos:start="110:49" pos:end="110:82"><expr pos:start="110:49" pos:end="110:82"><operator pos:start="110:49" pos:end="110:49">&amp;</operator><name pos:start="110:50" pos:end="110:82"><name pos:start="110:50" pos:end="110:56">pci_dev</name><operator pos:start="110:57" pos:end="110:58">-&gt;</operator><name pos:start="110:59" pos:end="110:82">bus_master_enable_region</name></name></expr></argument>,

                       <argument pos:start="112:24" pos:end="112:27"><expr pos:start="112:24" pos:end="112:27"><name pos:start="112:24" pos:end="112:27">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="116:5" pos:end="116:56"><expr pos:start="116:5" pos:end="116:55"><call pos:start="116:5" pos:end="116:55"><name pos:start="116:5" pos:end="116:11">pstrcpy</name><argument_list pos:start="116:12" pos:end="116:55">(<argument pos:start="116:13" pos:end="116:25"><expr pos:start="116:13" pos:end="116:25"><name pos:start="116:13" pos:end="116:25"><name pos:start="116:13" pos:end="116:19">pci_dev</name><operator pos:start="116:20" pos:end="116:21">-&gt;</operator><name pos:start="116:22" pos:end="116:25">name</name></name></expr></argument>, <argument pos:start="116:28" pos:end="116:48"><expr pos:start="116:28" pos:end="116:48"><sizeof pos:start="116:28" pos:end="116:48">sizeof<argument_list pos:start="116:34" pos:end="116:48">(<argument pos:start="116:35" pos:end="116:47"><expr pos:start="116:35" pos:end="116:47"><name pos:start="116:35" pos:end="116:47"><name pos:start="116:35" pos:end="116:41">pci_dev</name><operator pos:start="116:42" pos:end="116:43">-&gt;</operator><name pos:start="116:44" pos:end="116:47">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="116:51" pos:end="116:54"><expr pos:start="116:51" pos:end="116:54"><name pos:start="116:51" pos:end="116:54">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="118:5" pos:end="118:27"><expr pos:start="118:5" pos:end="118:26"><name pos:start="118:5" pos:end="118:22"><name pos:start="118:5" pos:end="118:11">pci_dev</name><operator pos:start="118:12" pos:end="118:13">-&gt;</operator><name pos:start="118:14" pos:end="118:22">irq_state</name></name> <operator pos:start="118:24" pos:end="118:24">=</operator> <literal type="number" pos:start="118:26" pos:end="118:26">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="120:5" pos:end="120:30"><expr pos:start="120:5" pos:end="120:29"><call pos:start="120:5" pos:end="120:29"><name pos:start="120:5" pos:end="120:20">pci_config_alloc</name><argument_list pos:start="120:21" pos:end="120:29">(<argument pos:start="120:22" pos:end="120:28"><expr pos:start="120:22" pos:end="120:28"><name pos:start="120:22" pos:end="120:28">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="124:5" pos:end="124:61"><expr pos:start="124:5" pos:end="124:60"><call pos:start="124:5" pos:end="124:60"><name pos:start="124:5" pos:end="124:28">pci_config_set_vendor_id</name><argument_list pos:start="124:29" pos:end="124:60">(<argument pos:start="124:30" pos:end="124:44"><expr pos:start="124:30" pos:end="124:44"><name pos:start="124:30" pos:end="124:44"><name pos:start="124:30" pos:end="124:36">pci_dev</name><operator pos:start="124:37" pos:end="124:38">-&gt;</operator><name pos:start="124:39" pos:end="124:44">config</name></name></expr></argument>, <argument pos:start="124:47" pos:end="124:59"><expr pos:start="124:47" pos:end="124:59"><name pos:start="124:47" pos:end="124:59"><name pos:start="124:47" pos:end="124:48">pc</name><operator pos:start="124:49" pos:end="124:50">-&gt;</operator><name pos:start="124:51" pos:end="124:59">vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="126:5" pos:end="126:61"><expr pos:start="126:5" pos:end="126:60"><call pos:start="126:5" pos:end="126:60"><name pos:start="126:5" pos:end="126:28">pci_config_set_device_id</name><argument_list pos:start="126:29" pos:end="126:60">(<argument pos:start="126:30" pos:end="126:44"><expr pos:start="126:30" pos:end="126:44"><name pos:start="126:30" pos:end="126:44"><name pos:start="126:30" pos:end="126:36">pci_dev</name><operator pos:start="126:37" pos:end="126:38">-&gt;</operator><name pos:start="126:39" pos:end="126:44">config</name></name></expr></argument>, <argument pos:start="126:47" pos:end="126:59"><expr pos:start="126:47" pos:end="126:59"><name pos:start="126:47" pos:end="126:59"><name pos:start="126:47" pos:end="126:48">pc</name><operator pos:start="126:49" pos:end="126:50">-&gt;</operator><name pos:start="126:51" pos:end="126:59">device_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="128:5" pos:end="128:59"><expr pos:start="128:5" pos:end="128:58"><call pos:start="128:5" pos:end="128:58"><name pos:start="128:5" pos:end="128:27">pci_config_set_revision</name><argument_list pos:start="128:28" pos:end="128:58">(<argument pos:start="128:29" pos:end="128:43"><expr pos:start="128:29" pos:end="128:43"><name pos:start="128:29" pos:end="128:43"><name pos:start="128:29" pos:end="128:35">pci_dev</name><operator pos:start="128:36" pos:end="128:37">-&gt;</operator><name pos:start="128:38" pos:end="128:43">config</name></name></expr></argument>, <argument pos:start="128:46" pos:end="128:57"><expr pos:start="128:46" pos:end="128:57"><name pos:start="128:46" pos:end="128:57"><name pos:start="128:46" pos:end="128:47">pc</name><operator pos:start="128:48" pos:end="128:49">-&gt;</operator><name pos:start="128:50" pos:end="128:57">revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="130:5" pos:end="130:56"><expr pos:start="130:5" pos:end="130:55"><call pos:start="130:5" pos:end="130:55"><name pos:start="130:5" pos:end="130:24">pci_config_set_class</name><argument_list pos:start="130:25" pos:end="130:55">(<argument pos:start="130:26" pos:end="130:40"><expr pos:start="130:26" pos:end="130:40"><name pos:start="130:26" pos:end="130:40"><name pos:start="130:26" pos:end="130:32">pci_dev</name><operator pos:start="130:33" pos:end="130:34">-&gt;</operator><name pos:start="130:35" pos:end="130:40">config</name></name></expr></argument>, <argument pos:start="130:43" pos:end="130:54"><expr pos:start="130:43" pos:end="130:54"><name pos:start="130:43" pos:end="130:54"><name pos:start="130:43" pos:end="130:44">pc</name><operator pos:start="130:45" pos:end="130:46">-&gt;</operator><name pos:start="130:47" pos:end="130:54">class_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="134:5" pos:end="160:5"><if pos:start="134:5" pos:end="152:5">if <condition pos:start="134:8" pos:end="134:23">(<expr pos:start="134:9" pos:end="134:22"><operator pos:start="134:9" pos:end="134:9">!</operator><name pos:start="134:10" pos:end="134:22"><name pos:start="134:10" pos:end="134:11">pc</name><operator pos:start="134:12" pos:end="134:13">-&gt;</operator><name pos:start="134:14" pos:end="134:22">is_bridge</name></name></expr>)</condition> <block pos:start="134:25" pos:end="152:5">{<block_content pos:start="136:9" pos:end="150:9">

        <if_stmt pos:start="136:9" pos:end="150:9"><if pos:start="136:9" pos:end="146:9">if <condition pos:start="136:12" pos:end="136:56">(<expr pos:start="136:13" pos:end="136:55"><name pos:start="136:13" pos:end="136:35"><name pos:start="136:13" pos:end="136:14">pc</name><operator pos:start="136:15" pos:end="136:16">-&gt;</operator><name pos:start="136:17" pos:end="136:35">subsystem_vendor_id</name></name> <operator pos:start="136:37" pos:end="136:38">||</operator> <name pos:start="136:40" pos:end="136:55"><name pos:start="136:40" pos:end="136:41">pc</name><operator pos:start="136:42" pos:end="136:43">-&gt;</operator><name pos:start="136:44" pos:end="136:55">subsystem_id</name></name></expr>)</condition> <block pos:start="136:58" pos:end="146:9">{<block_content pos:start="138:13" pos:end="144:43">

            <expr_stmt pos:start="138:13" pos:end="140:50"><expr pos:start="138:13" pos:end="140:49"><call pos:start="138:13" pos:end="140:49"><name pos:start="138:13" pos:end="138:24">pci_set_word</name><argument_list pos:start="138:25" pos:end="140:49">(<argument pos:start="138:26" pos:end="138:66"><expr pos:start="138:26" pos:end="138:66"><name pos:start="138:26" pos:end="138:40"><name pos:start="138:26" pos:end="138:32">pci_dev</name><operator pos:start="138:33" pos:end="138:34">-&gt;</operator><name pos:start="138:35" pos:end="138:40">config</name></name> <operator pos:start="138:42" pos:end="138:42">+</operator> <name pos:start="138:44" pos:end="138:66">PCI_SUBSYSTEM_VENDOR_ID</name></expr></argument>,

                         <argument pos:start="140:26" pos:end="140:48"><expr pos:start="140:26" pos:end="140:48"><name pos:start="140:26" pos:end="140:48"><name pos:start="140:26" pos:end="140:27">pc</name><operator pos:start="140:28" pos:end="140:29">-&gt;</operator><name pos:start="140:30" pos:end="140:48">subsystem_vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="142:13" pos:end="144:43"><expr pos:start="142:13" pos:end="144:42"><call pos:start="142:13" pos:end="144:42"><name pos:start="142:13" pos:end="142:24">pci_set_word</name><argument_list pos:start="142:25" pos:end="144:42">(<argument pos:start="142:26" pos:end="142:59"><expr pos:start="142:26" pos:end="142:59"><name pos:start="142:26" pos:end="142:40"><name pos:start="142:26" pos:end="142:32">pci_dev</name><operator pos:start="142:33" pos:end="142:34">-&gt;</operator><name pos:start="142:35" pos:end="142:40">config</name></name> <operator pos:start="142:42" pos:end="142:42">+</operator> <name pos:start="142:44" pos:end="142:59">PCI_SUBSYSTEM_ID</name></expr></argument>,

                         <argument pos:start="144:26" pos:end="144:41"><expr pos:start="144:26" pos:end="144:41"><name pos:start="144:26" pos:end="144:41"><name pos:start="144:26" pos:end="144:27">pc</name><operator pos:start="144:28" pos:end="144:29">-&gt;</operator><name pos:start="144:30" pos:end="144:41">subsystem_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="146:11" pos:end="150:9">else <block pos:start="146:16" pos:end="150:9">{<block_content pos:start="148:13" pos:end="148:50">

            <expr_stmt pos:start="148:13" pos:end="148:50"><expr pos:start="148:13" pos:end="148:49"><call pos:start="148:13" pos:end="148:49"><name pos:start="148:13" pos:end="148:40">pci_set_default_subsystem_id</name><argument_list pos:start="148:41" pos:end="148:49">(<argument pos:start="148:42" pos:end="148:48"><expr pos:start="148:42" pos:end="148:48"><name pos:start="148:42" pos:end="148:48">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="152:7" pos:end="160:5">else <block pos:start="152:12" pos:end="160:5">{<block_content pos:start="156:9" pos:end="158:34">

        <comment type="block" pos:start="154:9" pos:end="154:73">/* subsystem_vendor_id/subsystem_id are only for header type 0 */</comment>

        <expr_stmt pos:start="156:9" pos:end="156:41"><expr pos:start="156:9" pos:end="156:40"><call pos:start="156:9" pos:end="156:40"><name pos:start="156:9" pos:end="156:14">assert</name><argument_list pos:start="156:15" pos:end="156:40">(<argument pos:start="156:16" pos:end="156:39"><expr pos:start="156:16" pos:end="156:39"><operator pos:start="156:16" pos:end="156:16">!</operator><name pos:start="156:17" pos:end="156:39"><name pos:start="156:17" pos:end="156:18">pc</name><operator pos:start="156:19" pos:end="156:20">-&gt;</operator><name pos:start="156:21" pos:end="156:39">subsystem_vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="158:9" pos:end="158:34"><expr pos:start="158:9" pos:end="158:33"><call pos:start="158:9" pos:end="158:33"><name pos:start="158:9" pos:end="158:14">assert</name><argument_list pos:start="158:15" pos:end="158:33">(<argument pos:start="158:16" pos:end="158:32"><expr pos:start="158:16" pos:end="158:32"><operator pos:start="158:16" pos:end="158:16">!</operator><name pos:start="158:17" pos:end="158:32"><name pos:start="158:17" pos:end="158:18">pc</name><operator pos:start="158:19" pos:end="158:20">-&gt;</operator><name pos:start="158:21" pos:end="158:32">subsystem_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="162:5" pos:end="162:28"><expr pos:start="162:5" pos:end="162:27"><call pos:start="162:5" pos:end="162:27"><name pos:start="162:5" pos:end="162:18">pci_init_cmask</name><argument_list pos:start="162:19" pos:end="162:27">(<argument pos:start="162:20" pos:end="162:26"><expr pos:start="162:20" pos:end="162:26"><name pos:start="162:20" pos:end="162:26">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="164:5" pos:end="164:28"><expr pos:start="164:5" pos:end="164:27"><call pos:start="164:5" pos:end="164:27"><name pos:start="164:5" pos:end="164:18">pci_init_wmask</name><argument_list pos:start="164:19" pos:end="164:27">(<argument pos:start="164:20" pos:end="164:26"><expr pos:start="164:20" pos:end="164:26"><name pos:start="164:20" pos:end="164:26">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="166:5" pos:end="166:30"><expr pos:start="166:5" pos:end="166:29"><call pos:start="166:5" pos:end="166:29"><name pos:start="166:5" pos:end="166:20">pci_init_w1cmask</name><argument_list pos:start="166:21" pos:end="166:29">(<argument pos:start="166:22" pos:end="166:28"><expr pos:start="166:22" pos:end="166:28"><name pos:start="166:22" pos:end="166:28">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="168:5" pos:end="172:5"><if pos:start="168:5" pos:end="172:5">if <condition pos:start="168:8" pos:end="168:22">(<expr pos:start="168:9" pos:end="168:21"><name pos:start="168:9" pos:end="168:21"><name pos:start="168:9" pos:end="168:10">pc</name><operator pos:start="168:11" pos:end="168:12">-&gt;</operator><name pos:start="168:13" pos:end="168:21">is_bridge</name></name></expr>)</condition> <block pos:start="168:24" pos:end="172:5">{<block_content pos:start="170:9" pos:end="170:38">

        <expr_stmt pos:start="170:9" pos:end="170:38"><expr pos:start="170:9" pos:end="170:37"><call pos:start="170:9" pos:end="170:37"><name pos:start="170:9" pos:end="170:28">pci_init_mask_bridge</name><argument_list pos:start="170:29" pos:end="170:37">(<argument pos:start="170:30" pos:end="170:36"><expr pos:start="170:30" pos:end="170:36"><name pos:start="170:30" pos:end="170:36">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="174:5" pos:end="174:53"><expr pos:start="174:5" pos:end="174:52"><call pos:start="174:5" pos:end="174:52"><name pos:start="174:5" pos:end="174:26">pci_init_multifunction</name><argument_list pos:start="174:27" pos:end="174:52">(<argument pos:start="174:28" pos:end="174:30"><expr pos:start="174:28" pos:end="174:30"><name pos:start="174:28" pos:end="174:30">bus</name></expr></argument>, <argument pos:start="174:33" pos:end="174:39"><expr pos:start="174:33" pos:end="174:39"><name pos:start="174:33" pos:end="174:39">pci_dev</name></expr></argument>, <argument pos:start="174:42" pos:end="174:51"><expr pos:start="174:42" pos:end="174:51"><operator pos:start="174:42" pos:end="174:42">&amp;</operator><name pos:start="174:43" pos:end="174:51">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="176:5" pos:end="184:5"><if pos:start="176:5" pos:end="184:5">if <condition pos:start="176:8" pos:end="176:18">(<expr pos:start="176:9" pos:end="176:17"><name pos:start="176:9" pos:end="176:17">local_err</name></expr>)</condition> <block pos:start="176:20" pos:end="184:5">{<block_content pos:start="178:9" pos:end="182:20">

        <expr_stmt pos:start="178:9" pos:end="178:41"><expr pos:start="178:9" pos:end="178:40"><call pos:start="178:9" pos:end="178:40"><name pos:start="178:9" pos:end="178:23">error_propagate</name><argument_list pos:start="178:24" pos:end="178:40">(<argument pos:start="178:25" pos:end="178:28"><expr pos:start="178:25" pos:end="178:28"><name pos:start="178:25" pos:end="178:28">errp</name></expr></argument>, <argument pos:start="178:31" pos:end="178:39"><expr pos:start="178:31" pos:end="178:39"><name pos:start="178:31" pos:end="178:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="180:9" pos:end="180:42"><expr pos:start="180:9" pos:end="180:41"><call pos:start="180:9" pos:end="180:41"><name pos:start="180:9" pos:end="180:32">do_pci_unregister_device</name><argument_list pos:start="180:33" pos:end="180:41">(<argument pos:start="180:34" pos:end="180:40"><expr pos:start="180:34" pos:end="180:40"><name pos:start="180:34" pos:end="180:40">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="182:9" pos:end="182:20">return <expr pos:start="182:16" pos:end="182:19"><name pos:start="182:16" pos:end="182:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="188:5" pos:end="190:46"><if pos:start="188:5" pos:end="190:46">if <condition pos:start="188:8" pos:end="188:21">(<expr pos:start="188:9" pos:end="188:20"><operator pos:start="188:9" pos:end="188:9">!</operator><name pos:start="188:10" pos:end="188:20">config_read</name></expr>)</condition><block type="pseudo" pos:start="190:9" pos:end="190:46"><block_content pos:start="190:9" pos:end="190:46">

        <expr_stmt pos:start="190:9" pos:end="190:46"><expr pos:start="190:9" pos:end="190:45"><name pos:start="190:9" pos:end="190:19">config_read</name> <operator pos:start="190:21" pos:end="190:21">=</operator> <name pos:start="190:23" pos:end="190:45">pci_default_read_config</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="192:5" pos:end="194:48"><if pos:start="192:5" pos:end="194:48">if <condition pos:start="192:8" pos:end="192:22">(<expr pos:start="192:9" pos:end="192:21"><operator pos:start="192:9" pos:end="192:9">!</operator><name pos:start="192:10" pos:end="192:21">config_write</name></expr>)</condition><block type="pseudo" pos:start="194:9" pos:end="194:48"><block_content pos:start="194:9" pos:end="194:48">

        <expr_stmt pos:start="194:9" pos:end="194:48"><expr pos:start="194:9" pos:end="194:47"><name pos:start="194:9" pos:end="194:20">config_write</name> <operator pos:start="194:22" pos:end="194:22">=</operator> <name pos:start="194:24" pos:end="194:47">pci_default_write_config</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="196:5" pos:end="196:39"><expr pos:start="196:5" pos:end="196:38"><name pos:start="196:5" pos:end="196:24"><name pos:start="196:5" pos:end="196:11">pci_dev</name><operator pos:start="196:12" pos:end="196:13">-&gt;</operator><name pos:start="196:14" pos:end="196:24">config_read</name></name> <operator pos:start="196:26" pos:end="196:26">=</operator> <name pos:start="196:28" pos:end="196:38">config_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="198:5" pos:end="198:41"><expr pos:start="198:5" pos:end="198:40"><name pos:start="198:5" pos:end="198:25"><name pos:start="198:5" pos:end="198:11">pci_dev</name><operator pos:start="198:12" pos:end="198:13">-&gt;</operator><name pos:start="198:14" pos:end="198:25">config_write</name></name> <operator pos:start="198:27" pos:end="198:27">=</operator> <name pos:start="198:29" pos:end="198:40">config_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="200:5" pos:end="200:34"><expr pos:start="200:5" pos:end="200:33"><name pos:start="200:5" pos:end="200:23"><name pos:start="200:5" pos:end="200:7">bus</name><operator pos:start="200:8" pos:end="200:9">-&gt;</operator><name pos:start="200:10" pos:end="200:16">devices</name><index pos:start="200:17" pos:end="200:23">[<expr pos:start="200:18" pos:end="200:22"><name pos:start="200:18" pos:end="200:22">devfn</name></expr>]</index></name> <operator pos:start="200:25" pos:end="200:25">=</operator> <name pos:start="200:27" pos:end="200:33">pci_dev</name></expr>;</expr_stmt>

    <expr_stmt pos:start="202:5" pos:end="202:28"><expr pos:start="202:5" pos:end="202:27"><name pos:start="202:5" pos:end="202:23"><name pos:start="202:5" pos:end="202:11">pci_dev</name><operator pos:start="202:12" pos:end="202:13">-&gt;</operator><name pos:start="202:14" pos:end="202:23">version_id</name></name> <operator pos:start="202:25" pos:end="202:25">=</operator> <literal type="number" pos:start="202:27" pos:end="202:27">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="202:30" pos:end="202:69">/* Current pci device vmstate version */</comment>

    <return pos:start="204:5" pos:end="204:19">return <expr pos:start="204:12" pos:end="204:18"><name pos:start="204:12" pos:end="204:18">pci_dev</name></expr>;</return>

</block_content>}</block></function></unit>
