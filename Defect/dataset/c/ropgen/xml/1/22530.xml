<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22530.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:33">av_thread_message_queue_alloc</name><parameter_list pos:start="1:34" pos:end="5:50">(<parameter pos:start="1:35" pos:end="1:59"><decl pos:start="1:35" pos:end="1:59"><type pos:start="1:35" pos:end="1:59"><name pos:start="1:35" pos:end="1:54">AVThreadMessageQueue</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier><modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">mq</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:48"><decl pos:start="3:35" pos:end="3:48"><type pos:start="3:35" pos:end="3:48"><name pos:start="3:35" pos:end="3:42">unsigned</name></type> <name pos:start="3:44" pos:end="3:48">nelem</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:49"><decl pos:start="5:35" pos:end="5:49"><type pos:start="5:35" pos:end="5:49"><name pos:start="5:35" pos:end="5:42">unsigned</name></type> <name pos:start="5:44" pos:end="5:49">elsize</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="69:1">{<block_content pos:start="11:5" pos:end="68:0">

<cpp:if pos:start="9:1" pos:end="9:16">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">HAVE_THREADS</name></expr></cpp:if>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:24">AVThreadMessageQueue</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:29">rmq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:31"><if pos:start="17:5" pos:end="19:31">if <condition pos:start="17:8" pos:end="17:33">(<expr pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:13">nelem</name> <operator pos:start="17:15" pos:end="17:15">&gt;</operator> <name pos:start="17:17" pos:end="17:23">INT_MAX</name> <operator pos:start="17:25" pos:end="17:25">/</operator> <name pos:start="17:27" pos:end="17:32">elsize</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:31"><block_content pos:start="19:9" pos:end="19:31">

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:42">(<expr pos:start="21:9" pos:end="21:41"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:13">rmq</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <call pos:start="21:17" pos:end="21:40"><name pos:start="21:17" pos:end="21:26">av_mallocz</name><argument_list pos:start="21:27" pos:end="21:40">(<argument pos:start="21:28" pos:end="21:39"><expr pos:start="21:28" pos:end="21:39"><sizeof pos:start="21:28" pos:end="21:39">sizeof<argument_list pos:start="21:34" pos:end="21:39">(<argument pos:start="21:35" pos:end="21:38"><expr pos:start="21:35" pos:end="21:38"><operator pos:start="21:35" pos:end="21:35">*</operator><name pos:start="21:36" pos:end="21:38">rmq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="21:41" pos:end="21:41">)</operator></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:53">(<expr pos:start="25:9" pos:end="25:52"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:12">ret</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:51"><name pos:start="25:16" pos:end="25:33">pthread_mutex_init</name><argument_list pos:start="25:34" pos:end="25:51">(<argument pos:start="25:35" pos:end="25:44"><expr pos:start="25:35" pos:end="25:44"><operator pos:start="25:35" pos:end="25:35">&amp;</operator><name pos:start="25:36" pos:end="25:44"><name pos:start="25:36" pos:end="25:38">rmq</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:44">lock</name></name></expr></argument>, <argument pos:start="25:47" pos:end="25:50"><expr pos:start="25:47" pos:end="25:50"><name pos:start="25:47" pos:end="25:50">NULL</name></expr></argument>)</argument_list></call><operator pos:start="25:52" pos:end="25:52">)</operator></expr>)</condition> <block pos:start="25:55" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:28">

        <expr_stmt pos:start="27:9" pos:end="27:21"><expr pos:start="27:9" pos:end="27:20"><call pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:15">av_free</name><argument_list pos:start="27:16" pos:end="27:20">(<argument pos:start="27:17" pos:end="27:19"><expr pos:start="27:17" pos:end="27:19"><name pos:start="27:17" pos:end="27:19">rmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:28">return <expr pos:start="29:16" pos:end="29:27"><call pos:start="29:16" pos:end="29:27"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:27">(<argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:26">ret</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:52">(<expr pos:start="33:9" pos:end="33:51"><operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:12">ret</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:50"><name pos:start="33:16" pos:end="33:32">pthread_cond_init</name><argument_list pos:start="33:33" pos:end="33:50">(<argument pos:start="33:34" pos:end="33:43"><expr pos:start="33:34" pos:end="33:43"><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:43"><name pos:start="33:35" pos:end="33:37">rmq</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:43">cond</name></name></expr></argument>, <argument pos:start="33:46" pos:end="33:49"><expr pos:start="33:46" pos:end="33:49"><name pos:start="33:46" pos:end="33:49">NULL</name></expr></argument>)</argument_list></call><operator pos:start="33:51" pos:end="33:51">)</operator></expr>)</condition> <block pos:start="33:54" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:28">

        <expr_stmt pos:start="35:9" pos:end="35:42"><expr pos:start="35:9" pos:end="35:41"><call pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:29">pthread_mutex_destroy</name><argument_list pos:start="35:30" pos:end="35:41">(<argument pos:start="35:31" pos:end="35:40"><expr pos:start="35:31" pos:end="35:40"><operator pos:start="35:31" pos:end="35:31">&amp;</operator><name pos:start="35:32" pos:end="35:40"><name pos:start="35:32" pos:end="35:34">rmq</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:40">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:21"><expr pos:start="37:9" pos:end="37:20"><call pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:15">av_free</name><argument_list pos:start="37:16" pos:end="37:20">(<argument pos:start="37:17" pos:end="37:19"><expr pos:start="37:17" pos:end="37:19"><name pos:start="37:17" pos:end="37:19">rmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:28">return <expr pos:start="39:16" pos:end="39:27"><call pos:start="39:16" pos:end="39:27"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:27">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">ret</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:53">(<expr pos:start="43:9" pos:end="43:52"><operator pos:start="43:9" pos:end="43:9">!</operator><operator pos:start="43:10" pos:end="43:10">(</operator><name pos:start="43:11" pos:end="43:19"><name pos:start="43:11" pos:end="43:13">rmq</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:19">fifo</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:51"><name pos:start="43:23" pos:end="43:35">av_fifo_alloc</name><argument_list pos:start="43:36" pos:end="43:51">(<argument pos:start="43:37" pos:end="43:50"><expr pos:start="43:37" pos:end="43:50"><name pos:start="43:37" pos:end="43:42">elsize</name> <operator pos:start="43:44" pos:end="43:44">*</operator> <name pos:start="43:46" pos:end="43:50">nelem</name></expr></argument>)</argument_list></call><operator pos:start="43:52" pos:end="43:52">)</operator></expr>)</condition> <block pos:start="43:55" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:28">

        <expr_stmt pos:start="45:9" pos:end="45:41"><expr pos:start="45:9" pos:end="45:40"><call pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:28">pthread_cond_destroy</name><argument_list pos:start="45:29" pos:end="45:40">(<argument pos:start="45:30" pos:end="45:39"><expr pos:start="45:30" pos:end="45:39"><operator pos:start="45:30" pos:end="45:30">&amp;</operator><name pos:start="45:31" pos:end="45:39"><name pos:start="45:31" pos:end="45:33">rmq</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:39">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><call pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:29">pthread_mutex_destroy</name><argument_list pos:start="47:30" pos:end="47:41">(<argument pos:start="47:31" pos:end="47:40"><expr pos:start="47:31" pos:end="47:40"><operator pos:start="47:31" pos:end="47:31">&amp;</operator><name pos:start="47:32" pos:end="47:40"><name pos:start="47:32" pos:end="47:34">rmq</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:40">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:21"><expr pos:start="49:9" pos:end="49:20"><call pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:15">av_free</name><argument_list pos:start="49:16" pos:end="49:20">(<argument pos:start="49:17" pos:end="49:19"><expr pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">rmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:28">return <expr pos:start="51:16" pos:end="51:27"><call pos:start="51:16" pos:end="51:27"><name pos:start="51:16" pos:end="51:22">AVERROR</name><argument_list pos:start="51:23" pos:end="51:27">(<argument pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:26">ret</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:25"><expr pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:7">rmq</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:15">elsize</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:24">elsize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:14"><expr pos:start="57:5" pos:end="57:13"><operator pos:start="57:5" pos:end="57:5">*</operator><name pos:start="57:6" pos:end="57:7">mq</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:13">rmq</name></expr>;</expr_stmt>

    <return pos:start="59:5" pos:end="62:0">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

<cpp:else pos:start="61:1" pos:end="61:5">#<cpp:directive pos:start="61:2" pos:end="61:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="63:5" pos:end="63:15"><expr pos:start="63:5" pos:end="63:14"><operator pos:start="63:5" pos:end="63:5">*</operator><name pos:start="63:6" pos:end="63:7">mq</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:14">NULL</name></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="68:0">return <expr pos:start="65:12" pos:end="65:26"><call pos:start="65:12" pos:end="65:26"><name pos:start="65:12" pos:end="65:18">AVERROR</name><argument_list pos:start="65:19" pos:end="65:26">(<argument pos:start="65:20" pos:end="65:25"><expr pos:start="65:20" pos:end="65:25"><name pos:start="65:20" pos:end="65:25">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="67:8" pos:end="67:25">/* HAVE_THREADS */</comment>

</block_content>}</block></function>
</unit>
