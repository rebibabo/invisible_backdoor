<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16098.c" pos:tabs="8"><function pos:start="1:1" pos:end="160:43"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">versatile_init</name><parameter_list pos:start="1:27" pos:end="1:63">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:39">MachineState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:48">machine</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:62">board_id</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="160:43">{<block_content pos:start="3:5" pos:end="160:43">
    <decl_stmt pos:start="3:5" pos:end="3:24"><decl pos:start="3:5" pos:end="3:23"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:15">ObjectClass</name> <modifier pos:start="3:17" pos:end="3:17">*</modifier></type><name pos:start="3:18" pos:end="3:23">cpu_oc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:19"><decl pos:start="4:5" pos:end="4:18"><type pos:start="4:5" pos:end="4:12"><name pos:start="4:5" pos:end="4:10">Object</name> <modifier pos:start="4:12" pos:end="4:12">*</modifier></type><name pos:start="4:13" pos:end="4:18">cpuobj</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:47"><decl pos:start="6:5" pos:end="6:46"><type pos:start="6:5" pos:end="6:18"><name pos:start="6:5" pos:end="6:16">MemoryRegion</name> <modifier pos:start="6:18" pos:end="6:18">*</modifier></type><name pos:start="6:19" pos:end="6:24">sysmem</name> <init pos:start="6:26" pos:end="6:46">= <expr pos:start="6:28" pos:end="6:46"><call pos:start="6:28" pos:end="6:46"><name pos:start="6:28" pos:end="6:44">get_system_memory</name><argument_list pos:start="6:45" pos:end="6:46">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">ram</name> <init pos:start="7:23" pos:end="7:46">= <expr pos:start="7:25" pos:end="7:46"><call pos:start="7:25" pos:end="7:46"><name pos:start="7:25" pos:end="7:29">g_new</name><argument_list pos:start="7:30" pos:end="7:46">(<argument pos:start="7:31" pos:end="7:42"><expr pos:start="7:31" pos:end="7:42"><name pos:start="7:31" pos:end="7:42">MemoryRegion</name></expr></argument>, <argument pos:start="7:45" pos:end="7:45"><expr pos:start="7:45" pos:end="7:45"><literal type="number" pos:start="7:45" pos:end="7:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:21"><decl pos:start="8:5" pos:end="8:20"><type pos:start="8:5" pos:end="8:12"><name pos:start="8:5" pos:end="8:12">qemu_irq</name></type> <name pos:start="8:14" pos:end="8:20"><name pos:start="8:14" pos:end="8:16">pic</name><index pos:start="8:17" pos:end="8:20">[<expr pos:start="8:18" pos:end="8:19"><literal type="number" pos:start="8:18" pos:end="8:19">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">qemu_irq</name></type> <name pos:start="9:14" pos:end="9:20"><name pos:start="9:14" pos:end="9:16">sic</name><index pos:start="9:17" pos:end="9:20">[<expr pos:start="9:18" pos:end="9:19"><literal type="number" pos:start="9:18" pos:end="9:19">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:30"><decl pos:start="10:5" pos:end="10:20"><type pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:15">DeviceState</name> <modifier pos:start="10:17" pos:end="10:17">*</modifier></type><name pos:start="10:18" pos:end="10:20">dev</name></decl>, <decl pos:start="10:23" pos:end="10:29"><type ref="prev" pos:start="10:5" pos:end="10:17"><modifier pos:start="10:23" pos:end="10:23">*</modifier></type><name pos:start="10:24" pos:end="10:29">sysctl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">SysBusDevice</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:24">busdev</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:23"><decl pos:start="12:5" pos:end="12:22"><type pos:start="12:5" pos:end="12:17"><name pos:start="12:5" pos:end="12:15">DeviceState</name> <modifier pos:start="12:17" pos:end="12:17">*</modifier></type><name pos:start="12:18" pos:end="12:22">pl041</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">PCIBus</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:19">pci_bus</name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:16"><decl pos:start="14:5" pos:end="14:15"><type pos:start="14:5" pos:end="14:13"><name pos:start="14:5" pos:end="14:11">NICInfo</name> <modifier pos:start="14:13" pos:end="14:13">*</modifier></type><name pos:start="14:14" pos:end="14:15">nd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">I2CBus</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:15">i2c</name></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:10"><decl pos:start="16:5" pos:end="16:9"><type pos:start="16:5" pos:end="16:7"><name pos:start="16:5" pos:end="16:7">int</name></type> <name pos:start="16:9" pos:end="16:9">n</name></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">done_smc</name> <init pos:start="17:18" pos:end="17:20">= <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="18:5" pos:end="18:21"><decl pos:start="18:5" pos:end="18:20"><type pos:start="18:5" pos:end="18:15"><name pos:start="18:5" pos:end="18:13">DriveInfo</name> <modifier pos:start="18:15" pos:end="18:15">*</modifier></type><name pos:start="18:16" pos:end="18:20">dinfo</name></decl>;</decl_stmt>
    <if_stmt pos:start="19:5" pos:end="160:43"><if pos:start="19:5" pos:end="160:43">if <condition pos:start="19:8" pos:end="19:28">(<expr pos:start="19:9" pos:end="19:27"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:27"><name pos:start="19:10" pos:end="19:16">machine</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:27">cpu_model</name></name></expr>)</condition> <block pos:start="19:30" pos:end="160:43">{<block_content pos:start="20:9" pos:end="160:43">
        <expr_stmt pos:start="20:9" pos:end="20:38"><expr pos:start="20:9" pos:end="20:37"><name pos:start="20:9" pos:end="20:26"><name pos:start="20:9" pos:end="20:15">machine</name><operator pos:start="20:16" pos:end="20:17">-&gt;</operator><name pos:start="20:18" pos:end="20:26">cpu_model</name></name> <operator pos:start="20:28" pos:end="20:28">=</operator> <literal type="string" pos:start="20:30" pos:end="20:37">"arm926"</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:65"><expr pos:start="21:5" pos:end="21:64"><name pos:start="21:5" pos:end="21:10">cpu_oc</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:64"><name pos:start="21:14" pos:end="21:30">cpu_class_by_name</name><argument_list pos:start="21:31" pos:end="21:64">(<argument pos:start="21:32" pos:end="21:43"><expr pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:43">TYPE_ARM_CPU</name></expr></argument>, <argument pos:start="21:46" pos:end="21:63"><expr pos:start="21:46" pos:end="21:63"><name pos:start="21:46" pos:end="21:63"><name pos:start="21:46" pos:end="21:52">machine</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:63">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="160:43"><if pos:start="22:5" pos:end="160:43">if <condition pos:start="22:8" pos:end="22:16">(<expr pos:start="22:9" pos:end="22:15"><operator pos:start="22:9" pos:end="22:9">!</operator><name pos:start="22:10" pos:end="22:15">cpu_oc</name></expr>)</condition> <block pos:start="22:18" pos:end="160:43">{<block_content pos:start="23:9" pos:end="160:43">
        <expr_stmt pos:start="23:9" pos:end="23:59"><expr pos:start="23:9" pos:end="23:58"><call pos:start="23:9" pos:end="23:58"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="23:58">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="23:57"><expr pos:start="23:25" pos:end="23:57"><literal type="string" pos:start="23:25" pos:end="23:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:55"><expr pos:start="24:5" pos:end="24:54"><name pos:start="24:5" pos:end="24:10">cpuobj</name> <operator pos:start="24:12" pos:end="24:12">=</operator> <call pos:start="24:14" pos:end="24:54"><name pos:start="24:14" pos:end="24:23">object_new</name><argument_list pos:start="24:24" pos:end="24:54">(<argument pos:start="24:25" pos:end="24:53"><expr pos:start="24:25" pos:end="24:53"><call pos:start="24:25" pos:end="24:53"><name pos:start="24:25" pos:end="24:45">object_class_get_name</name><argument_list pos:start="24:46" pos:end="24:53">(<argument pos:start="24:47" pos:end="24:52"><expr pos:start="24:47" pos:end="24:52"><name pos:start="24:47" pos:end="24:52">cpu_oc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="25:5" pos:end="34:63">/* By default ARM1176 CPUs have EL3 enabled.  This board does not
     * currently support EL3 so the CPU EL3 property is disabled before
     * realization.
    if (object_property_find(cpuobj, "has_el3", NULL)) {
        object_property_set_bool(cpuobj, false, "has_el3", &amp;error_fatal);
    object_property_set_bool(cpuobj, true, "realized", &amp;error_fatal);
    cpu = ARM_CPU(cpuobj);
    memory_region_allocate_system_memory(ram, NULL, "versatile.ram",
                                         machine-&gt;ram_size);
    /* ??? RAM should repeat to fill physical memory space.  */</comment>
    <comment type="block" pos:start="35:5" pos:end="35:33">/* SDRAM at address zero.  */</comment>
    <expr_stmt pos:start="36:5" pos:end="36:48"><expr pos:start="36:5" pos:end="36:47"><call pos:start="36:5" pos:end="36:47"><name pos:start="36:5" pos:end="36:31">memory_region_add_subregion</name><argument_list pos:start="36:32" pos:end="36:47">(<argument pos:start="36:33" pos:end="36:38"><expr pos:start="36:33" pos:end="36:38"><name pos:start="36:33" pos:end="36:38">sysmem</name></expr></argument>, <argument pos:start="36:41" pos:end="36:41"><expr pos:start="36:41" pos:end="36:41"><literal type="number" pos:start="36:41" pos:end="36:41">0</literal></expr></argument>, <argument pos:start="36:44" pos:end="36:46"><expr pos:start="36:44" pos:end="36:46"><name pos:start="36:44" pos:end="36:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:50"><expr pos:start="37:5" pos:end="37:49"><name pos:start="37:5" pos:end="37:10">sysctl</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:49"><name pos:start="37:14" pos:end="37:24">qdev_create</name><argument_list pos:start="37:25" pos:end="37:49">(<argument pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:29">NULL</name></expr></argument>, <argument pos:start="37:32" pos:end="37:48"><expr pos:start="37:32" pos:end="37:48"><literal type="string" pos:start="37:32" pos:end="37:48">"realview_sysctl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:55"><expr pos:start="38:5" pos:end="38:54"><call pos:start="38:5" pos:end="38:54"><name pos:start="38:5" pos:end="38:24">qdev_prop_set_uint32</name><argument_list pos:start="38:25" pos:end="38:54">(<argument pos:start="38:26" pos:end="38:31"><expr pos:start="38:26" pos:end="38:31"><name pos:start="38:26" pos:end="38:31">sysctl</name></expr></argument>, <argument pos:start="38:34" pos:end="38:41"><expr pos:start="38:34" pos:end="38:41"><literal type="string" pos:start="38:34" pos:end="38:41">"sys_id"</literal></expr></argument>, <argument pos:start="38:44" pos:end="38:53"><expr pos:start="38:44" pos:end="38:53"><literal type="number" pos:start="38:44" pos:end="38:53">0x41007004</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:56"><expr pos:start="39:5" pos:end="39:55"><call pos:start="39:5" pos:end="39:55"><name pos:start="39:5" pos:end="39:24">qdev_prop_set_uint32</name><argument_list pos:start="39:25" pos:end="39:55">(<argument pos:start="39:26" pos:end="39:31"><expr pos:start="39:26" pos:end="39:31"><name pos:start="39:26" pos:end="39:31">sysctl</name></expr></argument>, <argument pos:start="39:34" pos:end="39:42"><expr pos:start="39:34" pos:end="39:42"><literal type="string" pos:start="39:34" pos:end="39:42">"proc_id"</literal></expr></argument>, <argument pos:start="39:45" pos:end="39:54"><expr pos:start="39:45" pos:end="39:54"><literal type="number" pos:start="39:45" pos:end="39:54">0x02000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:29"><expr pos:start="40:5" pos:end="40:28"><call pos:start="40:5" pos:end="40:28"><name pos:start="40:5" pos:end="40:20">qdev_init_nofail</name><argument_list pos:start="40:21" pos:end="40:28">(<argument pos:start="40:22" pos:end="40:27"><expr pos:start="40:22" pos:end="40:27"><name pos:start="40:22" pos:end="40:27">sysctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:59"><expr pos:start="41:5" pos:end="41:58"><call pos:start="41:5" pos:end="41:58"><name pos:start="41:5" pos:end="41:19">sysbus_mmio_map</name><argument_list pos:start="41:20" pos:end="41:58">(<argument pos:start="41:21" pos:end="41:42"><expr pos:start="41:21" pos:end="41:42"><call pos:start="41:21" pos:end="41:42"><name pos:start="41:21" pos:end="41:34">SYS_BUS_DEVICE</name><argument_list pos:start="41:35" pos:end="41:42">(<argument pos:start="41:36" pos:end="41:41"><expr pos:start="41:36" pos:end="41:41"><name pos:start="41:36" pos:end="41:41">sysctl</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:45" pos:end="41:45"><expr pos:start="41:45" pos:end="41:45"><literal type="number" pos:start="41:45" pos:end="41:45">0</literal></expr></argument>, <argument pos:start="41:48" pos:end="41:57"><expr pos:start="41:48" pos:end="41:57"><literal type="number" pos:start="41:48" pos:end="41:57">0x10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="42:5" pos:end="45:38"><expr pos:start="42:5" pos:end="45:37"><name pos:start="42:5" pos:end="42:7">dev</name> <operator pos:start="42:9" pos:end="42:9">=</operator> <call pos:start="42:11" pos:end="45:37"><name pos:start="42:11" pos:end="42:31">sysbus_create_varargs</name><argument_list pos:start="42:32" pos:end="45:37">(<argument pos:start="42:33" pos:end="42:39"><expr pos:start="42:33" pos:end="42:39"><literal type="string" pos:start="42:33" pos:end="42:39">"pl190"</literal></expr></argument>, <argument pos:start="42:42" pos:end="42:51"><expr pos:start="42:42" pos:end="42:51"><literal type="number" pos:start="42:42" pos:end="42:51">0x10140000</literal></expr></argument>,
                                <argument pos:start="43:33" pos:end="43:74"><expr pos:start="43:33" pos:end="43:74"><call pos:start="43:33" pos:end="43:74"><name pos:start="43:33" pos:end="43:48">qdev_get_gpio_in</name><argument_list pos:start="43:49" pos:end="43:74">(<argument pos:start="43:50" pos:end="43:60"><expr pos:start="43:50" pos:end="43:60"><call pos:start="43:50" pos:end="43:60"><name pos:start="43:50" pos:end="43:55">DEVICE</name><argument_list pos:start="43:56" pos:end="43:60">(<argument pos:start="43:57" pos:end="43:59"><expr pos:start="43:57" pos:end="43:59"><name pos:start="43:57" pos:end="43:59">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:63" pos:end="43:73"><expr pos:start="43:63" pos:end="43:73"><name pos:start="43:63" pos:end="43:73">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument pos:start="44:33" pos:end="44:74"><expr pos:start="44:33" pos:end="44:74"><call pos:start="44:33" pos:end="44:74"><name pos:start="44:33" pos:end="44:48">qdev_get_gpio_in</name><argument_list pos:start="44:49" pos:end="44:74">(<argument pos:start="44:50" pos:end="44:60"><expr pos:start="44:50" pos:end="44:60"><call pos:start="44:50" pos:end="44:60"><name pos:start="44:50" pos:end="44:55">DEVICE</name><argument_list pos:start="44:56" pos:end="44:60">(<argument pos:start="44:57" pos:end="44:59"><expr pos:start="44:57" pos:end="44:59"><name pos:start="44:57" pos:end="44:59">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="44:63" pos:end="44:73"><expr pos:start="44:63" pos:end="44:73"><name pos:start="44:63" pos:end="44:73">ARM_CPU_FIQ</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument pos:start="45:33" pos:end="45:36"><expr pos:start="45:33" pos:end="45:36"><name pos:start="45:33" pos:end="45:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="46:5" pos:end="160:43">for <control pos:start="46:9" pos:end="46:28">(<init pos:start="46:10" pos:end="46:15"><expr pos:start="46:10" pos:end="46:14"><name pos:start="46:10" pos:end="46:10">n</name> <operator pos:start="46:12" pos:end="46:12">=</operator> <literal type="number" pos:start="46:14" pos:end="46:14">0</literal></expr>;</init> <condition pos:start="46:17" pos:end="46:23"><expr pos:start="46:17" pos:end="46:22"><name pos:start="46:17" pos:end="46:17">n</name> <operator pos:start="46:19" pos:end="46:19">&lt;</operator> <literal type="number" pos:start="46:21" pos:end="46:22">32</literal></expr>;</condition> <incr pos:start="46:25" pos:end="46:27"><expr pos:start="46:25" pos:end="46:27"><name pos:start="46:25" pos:end="46:25">n</name><operator pos:start="46:26" pos:end="46:27">++</operator></expr></incr>)</control> <block pos:start="46:30" pos:end="160:43">{<block_content pos:start="47:9" pos:end="160:43">
        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:11">pic</name><index pos:start="47:12" pos:end="47:14">[<expr pos:start="47:13" pos:end="47:13"><name pos:start="47:13" pos:end="47:13">n</name></expr>]</index></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:41"><name pos:start="47:18" pos:end="47:33">qdev_get_gpio_in</name><argument_list pos:start="47:34" pos:end="47:41">(<argument pos:start="47:35" pos:end="47:37"><expr pos:start="47:35" pos:end="47:37"><name pos:start="47:35" pos:end="47:37">dev</name></expr></argument>, <argument pos:start="47:40" pos:end="47:40"><expr pos:start="47:40" pos:end="47:40"><name pos:start="47:40" pos:end="47:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:72"><expr pos:start="48:5" pos:end="48:71"><name pos:start="48:5" pos:end="48:7">dev</name> <operator pos:start="48:9" pos:end="48:9">=</operator> <call pos:start="48:11" pos:end="48:71"><name pos:start="48:11" pos:end="48:30">sysbus_create_simple</name><argument_list pos:start="48:31" pos:end="48:71">(<argument pos:start="48:32" pos:end="48:52"><expr pos:start="48:32" pos:end="48:52"><name pos:start="48:32" pos:end="48:52">TYPE_VERSATILE_PB_SIC</name></expr></argument>, <argument pos:start="48:55" pos:end="48:64"><expr pos:start="48:55" pos:end="48:64"><literal type="number" pos:start="48:55" pos:end="48:64">0x10003000</literal></expr></argument>, <argument pos:start="48:67" pos:end="48:70"><expr pos:start="48:67" pos:end="48:70"><name pos:start="48:67" pos:end="48:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="49:5" pos:end="160:43">for <control pos:start="49:9" pos:end="49:28">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">n</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:23"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:17">n</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <literal type="number" pos:start="49:21" pos:end="49:22">32</literal></expr>;</condition> <incr pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><name pos:start="49:25" pos:end="49:25">n</name><operator pos:start="49:26" pos:end="49:27">++</operator></expr></incr>)</control> <block pos:start="49:30" pos:end="160:43">{<block_content pos:start="50:9" pos:end="160:43">
        <expr_stmt pos:start="50:9" pos:end="50:59"><expr pos:start="50:9" pos:end="50:58"><call pos:start="50:9" pos:end="50:58"><name pos:start="50:9" pos:end="50:26">sysbus_connect_irq</name><argument_list pos:start="50:27" pos:end="50:58">(<argument pos:start="50:28" pos:end="50:46"><expr pos:start="50:28" pos:end="50:46"><call pos:start="50:28" pos:end="50:46"><name pos:start="50:28" pos:end="50:41">SYS_BUS_DEVICE</name><argument_list pos:start="50:42" pos:end="50:46">(<argument pos:start="50:43" pos:end="50:45"><expr pos:start="50:43" pos:end="50:45"><name pos:start="50:43" pos:end="50:45">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="50:49" pos:end="50:49"><expr pos:start="50:49" pos:end="50:49"><name pos:start="50:49" pos:end="50:49">n</name></expr></argument>, <argument pos:start="50:52" pos:end="50:57"><expr pos:start="50:52" pos:end="50:57"><name pos:start="50:52" pos:end="50:57"><name pos:start="50:52" pos:end="50:54">pic</name><index pos:start="50:55" pos:end="50:57">[<expr pos:start="50:56" pos:end="50:56"><name pos:start="50:56" pos:end="50:56">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:42"><expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:11">sic</name><index pos:start="51:12" pos:end="51:14">[<expr pos:start="51:13" pos:end="51:13"><name pos:start="51:13" pos:end="51:13">n</name></expr>]</index></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:41"><name pos:start="51:18" pos:end="51:33">qdev_get_gpio_in</name><argument_list pos:start="51:34" pos:end="51:41">(<argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">dev</name></expr></argument>, <argument pos:start="51:40" pos:end="51:40"><expr pos:start="51:40" pos:end="51:40"><name pos:start="51:40" pos:end="51:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="52:5" pos:end="52:63"><expr pos:start="52:5" pos:end="52:62"><call pos:start="52:5" pos:end="52:62"><name pos:start="52:5" pos:end="52:24">sysbus_create_simple</name><argument_list pos:start="52:25" pos:end="52:62">(<argument pos:start="52:26" pos:end="52:41"><expr pos:start="52:26" pos:end="52:41"><literal type="string" pos:start="52:26" pos:end="52:41">"pl050_keyboard"</literal></expr></argument>, <argument pos:start="52:44" pos:end="52:53"><expr pos:start="52:44" pos:end="52:53"><literal type="number" pos:start="52:44" pos:end="52:53">0x10006000</literal></expr></argument>, <argument pos:start="52:56" pos:end="52:61"><expr pos:start="52:56" pos:end="52:61"><name pos:start="52:56" pos:end="52:61"><name pos:start="52:56" pos:end="52:58">sic</name><index pos:start="52:59" pos:end="52:61">[<expr pos:start="52:60" pos:end="52:60"><literal type="number" pos:start="52:60" pos:end="52:60">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:60"><expr pos:start="53:5" pos:end="53:59"><call pos:start="53:5" pos:end="53:59"><name pos:start="53:5" pos:end="53:24">sysbus_create_simple</name><argument_list pos:start="53:25" pos:end="53:59">(<argument pos:start="53:26" pos:end="53:38"><expr pos:start="53:26" pos:end="53:38"><literal type="string" pos:start="53:26" pos:end="53:38">"pl050_mouse"</literal></expr></argument>, <argument pos:start="53:41" pos:end="53:50"><expr pos:start="53:41" pos:end="53:50"><literal type="number" pos:start="53:41" pos:end="53:50">0x10007000</literal></expr></argument>, <argument pos:start="53:53" pos:end="53:58"><expr pos:start="53:53" pos:end="53:58"><name pos:start="53:53" pos:end="53:58"><name pos:start="53:53" pos:end="53:55">sic</name><index pos:start="53:56" pos:end="53:58">[<expr pos:start="53:57" pos:end="53:57"><literal type="number" pos:start="53:57" pos:end="53:57">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:45"><expr pos:start="54:5" pos:end="54:44"><name pos:start="54:5" pos:end="54:7">dev</name> <operator pos:start="54:9" pos:end="54:9">=</operator> <call pos:start="54:11" pos:end="54:44"><name pos:start="54:11" pos:end="54:21">qdev_create</name><argument_list pos:start="54:22" pos:end="54:44">(<argument pos:start="54:23" pos:end="54:26"><expr pos:start="54:23" pos:end="54:26"><name pos:start="54:23" pos:end="54:26">NULL</name></expr></argument>, <argument pos:start="54:29" pos:end="54:43"><expr pos:start="54:29" pos:end="54:43"><literal type="string" pos:start="54:29" pos:end="54:43">"versatile_pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:10">busdev</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <call pos:start="55:14" pos:end="55:32"><name pos:start="55:14" pos:end="55:27">SYS_BUS_DEVICE</name><argument_list pos:start="55:28" pos:end="55:32">(<argument pos:start="55:29" pos:end="55:31"><expr pos:start="55:29" pos:end="55:31"><name pos:start="55:29" pos:end="55:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:26"><expr pos:start="56:5" pos:end="56:25"><call pos:start="56:5" pos:end="56:25"><name pos:start="56:5" pos:end="56:20">qdev_init_nofail</name><argument_list pos:start="56:21" pos:end="56:25">(<argument pos:start="56:22" pos:end="56:24"><expr pos:start="56:22" pos:end="56:24"><name pos:start="56:22" pos:end="56:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><call pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:19">sysbus_mmio_map</name><argument_list pos:start="57:20" pos:end="57:42">(<argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26">busdev</name></expr></argument>, <argument pos:start="57:29" pos:end="57:29"><expr pos:start="57:29" pos:end="57:29"><literal type="number" pos:start="57:29" pos:end="57:29">0</literal></expr></argument>, <argument pos:start="57:32" pos:end="57:41"><expr pos:start="57:32" pos:end="57:41"><literal type="number" pos:start="57:32" pos:end="57:41">0x10001000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="57:45" pos:end="57:69">/* PCI controller regs */</comment>
    <expr_stmt pos:start="58:5" pos:end="58:43"><expr pos:start="58:5" pos:end="58:42"><call pos:start="58:5" pos:end="58:42"><name pos:start="58:5" pos:end="58:19">sysbus_mmio_map</name><argument_list pos:start="58:20" pos:end="58:42">(<argument pos:start="58:21" pos:end="58:26"><expr pos:start="58:21" pos:end="58:26"><name pos:start="58:21" pos:end="58:26">busdev</name></expr></argument>, <argument pos:start="58:29" pos:end="58:29"><expr pos:start="58:29" pos:end="58:29"><literal type="number" pos:start="58:29" pos:end="58:29">1</literal></expr></argument>, <argument pos:start="58:32" pos:end="58:41"><expr pos:start="58:32" pos:end="58:41"><literal type="number" pos:start="58:32" pos:end="58:41">0x41000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="58:45" pos:end="58:65">/* PCI self-config */</comment>
    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:19">sysbus_mmio_map</name><argument_list pos:start="59:20" pos:end="59:42">(<argument pos:start="59:21" pos:end="59:26"><expr pos:start="59:21" pos:end="59:26"><name pos:start="59:21" pos:end="59:26">busdev</name></expr></argument>, <argument pos:start="59:29" pos:end="59:29"><expr pos:start="59:29" pos:end="59:29"><literal type="number" pos:start="59:29" pos:end="59:29">2</literal></expr></argument>, <argument pos:start="59:32" pos:end="59:41"><expr pos:start="59:32" pos:end="59:41"><literal type="number" pos:start="59:32" pos:end="59:41">0x42000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="59:45" pos:end="59:60">/* PCI config */</comment>
    <expr_stmt pos:start="60:5" pos:end="60:43"><expr pos:start="60:5" pos:end="60:42"><call pos:start="60:5" pos:end="60:42"><name pos:start="60:5" pos:end="60:19">sysbus_mmio_map</name><argument_list pos:start="60:20" pos:end="60:42">(<argument pos:start="60:21" pos:end="60:26"><expr pos:start="60:21" pos:end="60:26"><name pos:start="60:21" pos:end="60:26">busdev</name></expr></argument>, <argument pos:start="60:29" pos:end="60:29"><expr pos:start="60:29" pos:end="60:29"><literal type="number" pos:start="60:29" pos:end="60:29">3</literal></expr></argument>, <argument pos:start="60:32" pos:end="60:41"><expr pos:start="60:32" pos:end="60:41"><literal type="number" pos:start="60:32" pos:end="60:41">0x43000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="60:45" pos:end="60:57">/* PCI I/O */</comment>
    <expr_stmt pos:start="61:5" pos:end="61:43"><expr pos:start="61:5" pos:end="61:42"><call pos:start="61:5" pos:end="61:42"><name pos:start="61:5" pos:end="61:19">sysbus_mmio_map</name><argument_list pos:start="61:20" pos:end="61:42">(<argument pos:start="61:21" pos:end="61:26"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:26">busdev</name></expr></argument>, <argument pos:start="61:29" pos:end="61:29"><expr pos:start="61:29" pos:end="61:29"><literal type="number" pos:start="61:29" pos:end="61:29">4</literal></expr></argument>, <argument pos:start="61:32" pos:end="61:41"><expr pos:start="61:32" pos:end="61:41"><literal type="number" pos:start="61:32" pos:end="61:41">0x44000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="61:45" pos:end="61:69">/* PCI memory window 1 */</comment>
    <expr_stmt pos:start="62:5" pos:end="62:43"><expr pos:start="62:5" pos:end="62:42"><call pos:start="62:5" pos:end="62:42"><name pos:start="62:5" pos:end="62:19">sysbus_mmio_map</name><argument_list pos:start="62:20" pos:end="62:42">(<argument pos:start="62:21" pos:end="62:26"><expr pos:start="62:21" pos:end="62:26"><name pos:start="62:21" pos:end="62:26">busdev</name></expr></argument>, <argument pos:start="62:29" pos:end="62:29"><expr pos:start="62:29" pos:end="62:29"><literal type="number" pos:start="62:29" pos:end="62:29">5</literal></expr></argument>, <argument pos:start="62:32" pos:end="62:41"><expr pos:start="62:32" pos:end="62:41"><literal type="number" pos:start="62:32" pos:end="62:41">0x50000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="62:45" pos:end="62:69">/* PCI memory window 2 */</comment>
    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><call pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:19">sysbus_mmio_map</name><argument_list pos:start="63:20" pos:end="63:42">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">busdev</name></expr></argument>, <argument pos:start="63:29" pos:end="63:29"><expr pos:start="63:29" pos:end="63:29"><literal type="number" pos:start="63:29" pos:end="63:29">6</literal></expr></argument>, <argument pos:start="63:32" pos:end="63:41"><expr pos:start="63:32" pos:end="63:41"><literal type="number" pos:start="63:32" pos:end="63:41">0x60000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="63:45" pos:end="63:69">/* PCI memory window 3 */</comment>
    <expr_stmt pos:start="64:5" pos:end="64:43"><expr pos:start="64:5" pos:end="64:42"><call pos:start="64:5" pos:end="64:42"><name pos:start="64:5" pos:end="64:22">sysbus_connect_irq</name><argument_list pos:start="64:23" pos:end="64:42">(<argument pos:start="64:24" pos:end="64:29"><expr pos:start="64:24" pos:end="64:29"><name pos:start="64:24" pos:end="64:29">busdev</name></expr></argument>, <argument pos:start="64:32" pos:end="64:32"><expr pos:start="64:32" pos:end="64:32"><literal type="number" pos:start="64:32" pos:end="64:32">0</literal></expr></argument>, <argument pos:start="64:35" pos:end="64:41"><expr pos:start="64:35" pos:end="64:41"><name pos:start="64:35" pos:end="64:41"><name pos:start="64:35" pos:end="64:37">sic</name><index pos:start="64:38" pos:end="64:41">[<expr pos:start="64:39" pos:end="64:40"><literal type="number" pos:start="64:39" pos:end="64:40">27</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:43"><expr pos:start="65:5" pos:end="65:42"><call pos:start="65:5" pos:end="65:42"><name pos:start="65:5" pos:end="65:22">sysbus_connect_irq</name><argument_list pos:start="65:23" pos:end="65:42">(<argument pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:29">busdev</name></expr></argument>, <argument pos:start="65:32" pos:end="65:32"><expr pos:start="65:32" pos:end="65:32"><literal type="number" pos:start="65:32" pos:end="65:32">1</literal></expr></argument>, <argument pos:start="65:35" pos:end="65:41"><expr pos:start="65:35" pos:end="65:41"><name pos:start="65:35" pos:end="65:41"><name pos:start="65:35" pos:end="65:37">sic</name><index pos:start="65:38" pos:end="65:41">[<expr pos:start="65:39" pos:end="65:40"><literal type="number" pos:start="65:39" pos:end="65:40">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="66:5" pos:end="66:43"><expr pos:start="66:5" pos:end="66:42"><call pos:start="66:5" pos:end="66:42"><name pos:start="66:5" pos:end="66:22">sysbus_connect_irq</name><argument_list pos:start="66:23" pos:end="66:42">(<argument pos:start="66:24" pos:end="66:29"><expr pos:start="66:24" pos:end="66:29"><name pos:start="66:24" pos:end="66:29">busdev</name></expr></argument>, <argument pos:start="66:32" pos:end="66:32"><expr pos:start="66:32" pos:end="66:32"><literal type="number" pos:start="66:32" pos:end="66:32">2</literal></expr></argument>, <argument pos:start="66:35" pos:end="66:41"><expr pos:start="66:35" pos:end="66:41"><name pos:start="66:35" pos:end="66:41"><name pos:start="66:35" pos:end="66:37">sic</name><index pos:start="66:38" pos:end="66:41">[<expr pos:start="66:39" pos:end="66:40"><literal type="number" pos:start="66:39" pos:end="66:40">29</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><call pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:22">sysbus_connect_irq</name><argument_list pos:start="67:23" pos:end="67:42">(<argument pos:start="67:24" pos:end="67:29"><expr pos:start="67:24" pos:end="67:29"><name pos:start="67:24" pos:end="67:29">busdev</name></expr></argument>, <argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><literal type="number" pos:start="67:32" pos:end="67:32">3</literal></expr></argument>, <argument pos:start="67:35" pos:end="67:41"><expr pos:start="67:35" pos:end="67:41"><name pos:start="67:35" pos:end="67:41"><name pos:start="67:35" pos:end="67:37">sic</name><index pos:start="67:38" pos:end="67:41">[<expr pos:start="67:39" pos:end="67:40"><literal type="number" pos:start="67:39" pos:end="67:40">30</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="68:5" pos:end="68:55"><expr pos:start="68:5" pos:end="68:54"><name pos:start="68:5" pos:end="68:11">pci_bus</name> <operator pos:start="68:13" pos:end="68:13">=</operator> <operator pos:start="68:15" pos:end="68:15">(</operator><name pos:start="68:16" pos:end="68:21">PCIBus</name> <operator pos:start="68:23" pos:end="68:23">*</operator><operator pos:start="68:24" pos:end="68:24">)</operator><call pos:start="68:25" pos:end="68:54"><name pos:start="68:25" pos:end="68:42">qdev_get_child_bus</name><argument_list pos:start="68:43" pos:end="68:54">(<argument pos:start="68:44" pos:end="68:46"><expr pos:start="68:44" pos:end="68:46"><name pos:start="68:44" pos:end="68:46">dev</name></expr></argument>, <argument pos:start="68:49" pos:end="68:53"><expr pos:start="68:49" pos:end="68:53"><literal type="string" pos:start="68:49" pos:end="68:53">"pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="69:5" pos:end="160:43">for<control pos:start="69:8" pos:end="69:32">(<init pos:start="69:9" pos:end="69:14"><expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:9">n</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <literal type="number" pos:start="69:13" pos:end="69:13">0</literal></expr>;</init> <condition pos:start="69:16" pos:end="69:27"><expr pos:start="69:16" pos:end="69:26"><name pos:start="69:16" pos:end="69:16">n</name> <operator pos:start="69:18" pos:end="69:18">&lt;</operator> <name pos:start="69:20" pos:end="69:26">nb_nics</name></expr>;</condition> <incr pos:start="69:29" pos:end="69:31"><expr pos:start="69:29" pos:end="69:31"><name pos:start="69:29" pos:end="69:29">n</name><operator pos:start="69:30" pos:end="69:31">++</operator></expr></incr>)</control> <block pos:start="69:34" pos:end="160:43">{<block_content pos:start="70:9" pos:end="160:43">
        <expr_stmt pos:start="70:9" pos:end="70:26"><expr pos:start="70:9" pos:end="70:25"><name pos:start="70:9" pos:end="70:10">nd</name> <operator pos:start="70:12" pos:end="70:12">=</operator> <operator pos:start="70:14" pos:end="70:14">&amp;</operator><name pos:start="70:15" pos:end="70:25"><name pos:start="70:15" pos:end="70:22">nd_table</name><index pos:start="70:23" pos:end="70:25">[<expr pos:start="70:24" pos:end="70:24"><name pos:start="70:24" pos:end="70:24">n</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="71:9" pos:end="160:43"><if pos:start="71:9" pos:end="74:9">if <condition pos:start="71:12" pos:end="71:77">(<expr pos:start="71:13" pos:end="71:76"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:21">done_smc</name> <operator pos:start="71:23" pos:end="71:24">&amp;&amp;</operator> <operator pos:start="71:26" pos:end="71:26">(</operator><operator pos:start="71:27" pos:end="71:27">!</operator><name pos:start="71:28" pos:end="71:36"><name pos:start="71:28" pos:end="71:29">nd</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:36">model</name></name> <operator pos:start="71:38" pos:end="71:39">||</operator> <call pos:start="71:41" pos:end="71:70"><name pos:start="71:41" pos:end="71:46">strcmp</name><argument_list pos:start="71:47" pos:end="71:70">(<argument pos:start="71:48" pos:end="71:56"><expr pos:start="71:48" pos:end="71:56"><name pos:start="71:48" pos:end="71:56"><name pos:start="71:48" pos:end="71:49">nd</name><operator pos:start="71:50" pos:end="71:51">-&gt;</operator><name pos:start="71:52" pos:end="71:56">model</name></name></expr></argument>, <argument pos:start="71:59" pos:end="71:69"><expr pos:start="71:59" pos:end="71:69"><literal type="string" pos:start="71:59" pos:end="71:69">"smc91c111"</literal></expr></argument>)</argument_list></call> <operator pos:start="71:72" pos:end="71:73">==</operator> <literal type="number" pos:start="71:75" pos:end="71:75">0</literal><operator pos:start="71:76" pos:end="71:76">)</operator></expr>)</condition> <block pos:start="71:79" pos:end="74:9">{<block_content pos:start="72:13" pos:end="73:25">
            <expr_stmt pos:start="72:13" pos:end="72:52"><expr pos:start="72:13" pos:end="72:51"><call pos:start="72:13" pos:end="72:51"><name pos:start="72:13" pos:end="72:26">smc91c111_init</name><argument_list pos:start="72:27" pos:end="72:51">(<argument pos:start="72:28" pos:end="72:29"><expr pos:start="72:28" pos:end="72:29"><name pos:start="72:28" pos:end="72:29">nd</name></expr></argument>, <argument pos:start="72:32" pos:end="72:41"><expr pos:start="72:32" pos:end="72:41"><literal type="number" pos:start="72:32" pos:end="72:41">0x10010000</literal></expr></argument>, <argument pos:start="72:44" pos:end="72:50"><expr pos:start="72:44" pos:end="72:50"><name pos:start="72:44" pos:end="72:50"><name pos:start="72:44" pos:end="72:46">sic</name><index pos:start="72:47" pos:end="72:50">[<expr pos:start="72:48" pos:end="72:49"><literal type="number" pos:start="72:48" pos:end="72:49">25</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:20">done_smc</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <literal type="number" pos:start="73:24" pos:end="73:24">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="74:11" pos:end="160:43">else <block pos:start="74:16" pos:end="160:43">{<block_content pos:start="75:13" pos:end="160:43">
            <expr_stmt pos:start="75:13" pos:end="75:62"><expr pos:start="75:13" pos:end="75:61"><call pos:start="75:13" pos:end="75:61"><name pos:start="75:13" pos:end="75:31">pci_nic_init_nofail</name><argument_list pos:start="75:32" pos:end="75:61">(<argument pos:start="75:33" pos:end="75:34"><expr pos:start="75:33" pos:end="75:34"><name pos:start="75:33" pos:end="75:34">nd</name></expr></argument>, <argument pos:start="75:37" pos:end="75:43"><expr pos:start="75:37" pos:end="75:43"><name pos:start="75:37" pos:end="75:43">pci_bus</name></expr></argument>, <argument pos:start="75:46" pos:end="75:54"><expr pos:start="75:46" pos:end="75:54"><literal type="string" pos:start="75:46" pos:end="75:54">"rtl8139"</literal></expr></argument>, <argument pos:start="75:57" pos:end="75:60"><expr pos:start="75:57" pos:end="75:60"><name pos:start="75:57" pos:end="75:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="76:5" pos:end="160:43"><if pos:start="76:5" pos:end="160:43">if <condition pos:start="76:8" pos:end="76:29">(<expr pos:start="76:9" pos:end="76:28"><call pos:start="76:9" pos:end="76:28"><name pos:start="76:9" pos:end="76:19">machine_usb</name><argument_list pos:start="76:20" pos:end="76:28">(<argument pos:start="76:21" pos:end="76:27"><expr pos:start="76:21" pos:end="76:27"><name pos:start="76:21" pos:end="76:27">machine</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="76:31" pos:end="160:43">{<block_content pos:start="77:9" pos:end="160:43">
        <expr_stmt pos:start="77:9" pos:end="77:51"><expr pos:start="77:9" pos:end="77:50"><call pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:25">pci_create_simple</name><argument_list pos:start="77:26" pos:end="77:50">(<argument pos:start="77:27" pos:end="77:33"><expr pos:start="77:27" pos:end="77:33"><name pos:start="77:27" pos:end="77:33">pci_bus</name></expr></argument>, <argument pos:start="77:36" pos:end="77:37"><expr pos:start="77:36" pos:end="77:37"><operator pos:start="77:36" pos:end="77:36">-</operator><literal type="number" pos:start="77:37" pos:end="77:37">1</literal></expr></argument>, <argument pos:start="77:40" pos:end="77:49"><expr pos:start="77:40" pos:end="77:49"><literal type="string" pos:start="77:40" pos:end="77:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="78:5" pos:end="78:35"><expr pos:start="78:5" pos:end="78:34"><name pos:start="78:5" pos:end="78:5">n</name> <operator pos:start="78:7" pos:end="78:7">=</operator> <call pos:start="78:9" pos:end="78:34"><name pos:start="78:9" pos:end="78:25">drive_get_max_bus</name><argument_list pos:start="78:26" pos:end="78:34">(<argument pos:start="78:27" pos:end="78:33"><expr pos:start="78:27" pos:end="78:33"><name pos:start="78:27" pos:end="78:33">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="79:5" pos:end="160:43">while <condition pos:start="79:11" pos:end="79:18">(<expr pos:start="79:12" pos:end="79:17"><name pos:start="79:12" pos:end="79:12">n</name> <operator pos:start="79:14" pos:end="79:15">&gt;=</operator> <literal type="number" pos:start="79:17" pos:end="79:17">0</literal></expr>)</condition> <block pos:start="79:20" pos:end="160:43">{<block_content pos:start="80:9" pos:end="160:43">
        <expr_stmt pos:start="80:9" pos:end="80:53"><expr pos:start="80:9" pos:end="80:52"><call pos:start="80:9" pos:end="80:52"><name pos:start="80:9" pos:end="80:25">pci_create_simple</name><argument_list pos:start="80:26" pos:end="80:52">(<argument pos:start="80:27" pos:end="80:33"><expr pos:start="80:27" pos:end="80:33"><name pos:start="80:27" pos:end="80:33">pci_bus</name></expr></argument>, <argument pos:start="80:36" pos:end="80:37"><expr pos:start="80:36" pos:end="80:37"><operator pos:start="80:36" pos:end="80:36">-</operator><literal type="number" pos:start="80:37" pos:end="80:37">1</literal></expr></argument>, <argument pos:start="80:40" pos:end="80:51"><expr pos:start="80:40" pos:end="80:51"><literal type="string" pos:start="80:40" pos:end="80:51">"lsi53c895a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="81:9" pos:end="81:12"><expr pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:9">n</name><operator pos:start="81:10" pos:end="81:11">--</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="82:5" pos:end="82:53"><expr pos:start="82:5" pos:end="82:52"><call pos:start="82:5" pos:end="82:52"><name pos:start="82:5" pos:end="82:16">pl011_create</name><argument_list pos:start="82:17" pos:end="82:52">(<argument pos:start="82:18" pos:end="82:27"><expr pos:start="82:18" pos:end="82:27"><literal type="number" pos:start="82:18" pos:end="82:27">0x101f1000</literal></expr></argument>, <argument pos:start="82:30" pos:end="82:36"><expr pos:start="82:30" pos:end="82:36"><name pos:start="82:30" pos:end="82:36"><name pos:start="82:30" pos:end="82:32">pic</name><index pos:start="82:33" pos:end="82:36">[<expr pos:start="82:34" pos:end="82:35"><literal type="number" pos:start="82:34" pos:end="82:35">12</literal></expr>]</index></name></expr></argument>, <argument pos:start="82:39" pos:end="82:51"><expr pos:start="82:39" pos:end="82:51"><name pos:start="82:39" pos:end="82:51"><name pos:start="82:39" pos:end="82:48">serial_hds</name><index pos:start="82:49" pos:end="82:51">[<expr pos:start="82:50" pos:end="82:50"><literal type="number" pos:start="82:50" pos:end="82:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="83:5" pos:end="83:53"><expr pos:start="83:5" pos:end="83:52"><call pos:start="83:5" pos:end="83:52"><name pos:start="83:5" pos:end="83:16">pl011_create</name><argument_list pos:start="83:17" pos:end="83:52">(<argument pos:start="83:18" pos:end="83:27"><expr pos:start="83:18" pos:end="83:27"><literal type="number" pos:start="83:18" pos:end="83:27">0x101f2000</literal></expr></argument>, <argument pos:start="83:30" pos:end="83:36"><expr pos:start="83:30" pos:end="83:36"><name pos:start="83:30" pos:end="83:36"><name pos:start="83:30" pos:end="83:32">pic</name><index pos:start="83:33" pos:end="83:36">[<expr pos:start="83:34" pos:end="83:35"><literal type="number" pos:start="83:34" pos:end="83:35">13</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:39" pos:end="83:51"><expr pos:start="83:39" pos:end="83:51"><name pos:start="83:39" pos:end="83:51"><name pos:start="83:39" pos:end="83:48">serial_hds</name><index pos:start="83:49" pos:end="83:51">[<expr pos:start="83:50" pos:end="83:50"><literal type="number" pos:start="83:50" pos:end="83:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="84:5" pos:end="84:53"><expr pos:start="84:5" pos:end="84:52"><call pos:start="84:5" pos:end="84:52"><name pos:start="84:5" pos:end="84:16">pl011_create</name><argument_list pos:start="84:17" pos:end="84:52">(<argument pos:start="84:18" pos:end="84:27"><expr pos:start="84:18" pos:end="84:27"><literal type="number" pos:start="84:18" pos:end="84:27">0x101f3000</literal></expr></argument>, <argument pos:start="84:30" pos:end="84:36"><expr pos:start="84:30" pos:end="84:36"><name pos:start="84:30" pos:end="84:36"><name pos:start="84:30" pos:end="84:32">pic</name><index pos:start="84:33" pos:end="84:36">[<expr pos:start="84:34" pos:end="84:35"><literal type="number" pos:start="84:34" pos:end="84:35">14</literal></expr>]</index></name></expr></argument>, <argument pos:start="84:39" pos:end="84:51"><expr pos:start="84:39" pos:end="84:51"><name pos:start="84:39" pos:end="84:51"><name pos:start="84:39" pos:end="84:48">serial_hds</name><index pos:start="84:49" pos:end="84:51">[<expr pos:start="84:50" pos:end="84:50"><literal type="number" pos:start="84:50" pos:end="84:50">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="85:5" pos:end="85:52"><expr pos:start="85:5" pos:end="85:51"><call pos:start="85:5" pos:end="85:51"><name pos:start="85:5" pos:end="85:16">pl011_create</name><argument_list pos:start="85:17" pos:end="85:51">(<argument pos:start="85:18" pos:end="85:27"><expr pos:start="85:18" pos:end="85:27"><literal type="number" pos:start="85:18" pos:end="85:27">0x10009000</literal></expr></argument>, <argument pos:start="85:30" pos:end="85:35"><expr pos:start="85:30" pos:end="85:35"><name pos:start="85:30" pos:end="85:35"><name pos:start="85:30" pos:end="85:32">sic</name><index pos:start="85:33" pos:end="85:35">[<expr pos:start="85:34" pos:end="85:34"><literal type="number" pos:start="85:34" pos:end="85:34">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:38" pos:end="85:50"><expr pos:start="85:38" pos:end="85:50"><name pos:start="85:38" pos:end="85:50"><name pos:start="85:38" pos:end="85:47">serial_hds</name><index pos:start="85:48" pos:end="85:50">[<expr pos:start="85:49" pos:end="85:49"><literal type="number" pos:start="85:49" pos:end="85:49">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="86:5" pos:end="86:55"><expr pos:start="86:5" pos:end="86:54"><call pos:start="86:5" pos:end="86:54"><name pos:start="86:5" pos:end="86:24">sysbus_create_simple</name><argument_list pos:start="86:25" pos:end="86:54">(<argument pos:start="86:26" pos:end="86:32"><expr pos:start="86:26" pos:end="86:32"><literal type="string" pos:start="86:26" pos:end="86:32">"pl080"</literal></expr></argument>, <argument pos:start="86:35" pos:end="86:44"><expr pos:start="86:35" pos:end="86:44"><literal type="number" pos:start="86:35" pos:end="86:44">0x10130000</literal></expr></argument>, <argument pos:start="86:47" pos:end="86:53"><expr pos:start="86:47" pos:end="86:53"><name pos:start="86:47" pos:end="86:53"><name pos:start="86:47" pos:end="86:49">pic</name><index pos:start="86:50" pos:end="86:53">[<expr pos:start="86:51" pos:end="86:52"><literal type="number" pos:start="86:51" pos:end="86:52">17</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="87:5" pos:end="87:54"><expr pos:start="87:5" pos:end="87:53"><call pos:start="87:5" pos:end="87:53"><name pos:start="87:5" pos:end="87:24">sysbus_create_simple</name><argument_list pos:start="87:25" pos:end="87:53">(<argument pos:start="87:26" pos:end="87:32"><expr pos:start="87:26" pos:end="87:32"><literal type="string" pos:start="87:26" pos:end="87:32">"sp804"</literal></expr></argument>, <argument pos:start="87:35" pos:end="87:44"><expr pos:start="87:35" pos:end="87:44"><literal type="number" pos:start="87:35" pos:end="87:44">0x101e2000</literal></expr></argument>, <argument pos:start="87:47" pos:end="87:52"><expr pos:start="87:47" pos:end="87:52"><name pos:start="87:47" pos:end="87:52"><name pos:start="87:47" pos:end="87:49">pic</name><index pos:start="87:50" pos:end="87:52">[<expr pos:start="87:51" pos:end="87:51"><literal type="number" pos:start="87:51" pos:end="87:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:54"><expr pos:start="88:5" pos:end="88:53"><call pos:start="88:5" pos:end="88:53"><name pos:start="88:5" pos:end="88:24">sysbus_create_simple</name><argument_list pos:start="88:25" pos:end="88:53">(<argument pos:start="88:26" pos:end="88:32"><expr pos:start="88:26" pos:end="88:32"><literal type="string" pos:start="88:26" pos:end="88:32">"sp804"</literal></expr></argument>, <argument pos:start="88:35" pos:end="88:44"><expr pos:start="88:35" pos:end="88:44"><literal type="number" pos:start="88:35" pos:end="88:44">0x101e3000</literal></expr></argument>, <argument pos:start="88:47" pos:end="88:52"><expr pos:start="88:47" pos:end="88:52"><name pos:start="88:47" pos:end="88:52"><name pos:start="88:47" pos:end="88:49">pic</name><index pos:start="88:50" pos:end="88:52">[<expr pos:start="88:51" pos:end="88:51"><literal type="number" pos:start="88:51" pos:end="88:51">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="89:5" pos:end="89:54"><expr pos:start="89:5" pos:end="89:53"><call pos:start="89:5" pos:end="89:53"><name pos:start="89:5" pos:end="89:24">sysbus_create_simple</name><argument_list pos:start="89:25" pos:end="89:53">(<argument pos:start="89:26" pos:end="89:32"><expr pos:start="89:26" pos:end="89:32"><literal type="string" pos:start="89:26" pos:end="89:32">"pl061"</literal></expr></argument>, <argument pos:start="89:35" pos:end="89:44"><expr pos:start="89:35" pos:end="89:44"><literal type="number" pos:start="89:35" pos:end="89:44">0x101e4000</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:52"><expr pos:start="89:47" pos:end="89:52"><name pos:start="89:47" pos:end="89:52"><name pos:start="89:47" pos:end="89:49">pic</name><index pos:start="89:50" pos:end="89:52">[<expr pos:start="89:51" pos:end="89:51"><literal type="number" pos:start="89:51" pos:end="89:51">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="90:5" pos:end="90:54"><expr pos:start="90:5" pos:end="90:53"><call pos:start="90:5" pos:end="90:53"><name pos:start="90:5" pos:end="90:24">sysbus_create_simple</name><argument_list pos:start="90:25" pos:end="90:53">(<argument pos:start="90:26" pos:end="90:32"><expr pos:start="90:26" pos:end="90:32"><literal type="string" pos:start="90:26" pos:end="90:32">"pl061"</literal></expr></argument>, <argument pos:start="90:35" pos:end="90:44"><expr pos:start="90:35" pos:end="90:44"><literal type="number" pos:start="90:35" pos:end="90:44">0x101e5000</literal></expr></argument>, <argument pos:start="90:47" pos:end="90:52"><expr pos:start="90:47" pos:end="90:52"><name pos:start="90:47" pos:end="90:52"><name pos:start="90:47" pos:end="90:49">pic</name><index pos:start="90:50" pos:end="90:52">[<expr pos:start="90:51" pos:end="90:51"><literal type="number" pos:start="90:51" pos:end="90:51">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:54"><expr pos:start="91:5" pos:end="91:53"><call pos:start="91:5" pos:end="91:53"><name pos:start="91:5" pos:end="91:24">sysbus_create_simple</name><argument_list pos:start="91:25" pos:end="91:53">(<argument pos:start="91:26" pos:end="91:32"><expr pos:start="91:26" pos:end="91:32"><literal type="string" pos:start="91:26" pos:end="91:32">"pl061"</literal></expr></argument>, <argument pos:start="91:35" pos:end="91:44"><expr pos:start="91:35" pos:end="91:44"><literal type="number" pos:start="91:35" pos:end="91:44">0x101e6000</literal></expr></argument>, <argument pos:start="91:47" pos:end="91:52"><expr pos:start="91:47" pos:end="91:52"><name pos:start="91:47" pos:end="91:52"><name pos:start="91:47" pos:end="91:49">pic</name><index pos:start="91:50" pos:end="91:52">[<expr pos:start="91:51" pos:end="91:51"><literal type="number" pos:start="91:51" pos:end="91:51">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:54"><expr pos:start="92:5" pos:end="92:53"><call pos:start="92:5" pos:end="92:53"><name pos:start="92:5" pos:end="92:24">sysbus_create_simple</name><argument_list pos:start="92:25" pos:end="92:53">(<argument pos:start="92:26" pos:end="92:32"><expr pos:start="92:26" pos:end="92:32"><literal type="string" pos:start="92:26" pos:end="92:32">"pl061"</literal></expr></argument>, <argument pos:start="92:35" pos:end="92:44"><expr pos:start="92:35" pos:end="92:44"><literal type="number" pos:start="92:35" pos:end="92:44">0x101e7000</literal></expr></argument>, <argument pos:start="92:47" pos:end="92:52"><expr pos:start="92:47" pos:end="92:52"><name pos:start="92:47" pos:end="92:52"><name pos:start="92:47" pos:end="92:49">pic</name><index pos:start="92:50" pos:end="92:52">[<expr pos:start="92:51" pos:end="92:51"><literal type="number" pos:start="92:51" pos:end="92:51">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="93:5" pos:end="94:64">/* The versatile/PB actually has a modified Color LCD controller
       that includes hardware cursor support from the PL111.  */</comment>
    <expr_stmt pos:start="95:5" pos:end="95:71"><expr pos:start="95:5" pos:end="95:70"><name pos:start="95:5" pos:end="95:7">dev</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:70"><name pos:start="95:11" pos:end="95:30">sysbus_create_simple</name><argument_list pos:start="95:31" pos:end="95:70">(<argument pos:start="95:32" pos:end="95:48"><expr pos:start="95:32" pos:end="95:48"><literal type="string" pos:start="95:32" pos:end="95:48">"pl110_versatile"</literal></expr></argument>, <argument pos:start="95:51" pos:end="95:60"><expr pos:start="95:51" pos:end="95:60"><literal type="number" pos:start="95:51" pos:end="95:60">0x10120000</literal></expr></argument>, <argument pos:start="95:63" pos:end="95:69"><expr pos:start="95:63" pos:end="95:69"><name pos:start="95:63" pos:end="95:69"><name pos:start="95:63" pos:end="95:65">pic</name><index pos:start="95:66" pos:end="95:69">[<expr pos:start="95:67" pos:end="95:68"><literal type="number" pos:start="95:67" pos:end="95:68">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="96:5" pos:end="96:68">/* Wire up the mux control signals from the SYS_CLCD register */</comment>
    <expr_stmt pos:start="97:5" pos:end="97:63"><expr pos:start="97:5" pos:end="97:62"><call pos:start="97:5" pos:end="97:62"><name pos:start="97:5" pos:end="97:25">qdev_connect_gpio_out</name><argument_list pos:start="97:26" pos:end="97:62">(<argument pos:start="97:27" pos:end="97:32"><expr pos:start="97:27" pos:end="97:32"><name pos:start="97:27" pos:end="97:32">sysctl</name></expr></argument>, <argument pos:start="97:35" pos:end="97:35"><expr pos:start="97:35" pos:end="97:35"><literal type="number" pos:start="97:35" pos:end="97:35">0</literal></expr></argument>, <argument pos:start="97:38" pos:end="97:61"><expr pos:start="97:38" pos:end="97:61"><call pos:start="97:38" pos:end="97:61"><name pos:start="97:38" pos:end="97:53">qdev_get_gpio_in</name><argument_list pos:start="97:54" pos:end="97:61">(<argument pos:start="97:55" pos:end="97:57"><expr pos:start="97:55" pos:end="97:57"><name pos:start="97:55" pos:end="97:57">dev</name></expr></argument>, <argument pos:start="97:60" pos:end="97:60"><expr pos:start="97:60" pos:end="97:60"><literal type="number" pos:start="97:60" pos:end="97:60">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="98:5" pos:end="98:70"><expr pos:start="98:5" pos:end="98:69"><call pos:start="98:5" pos:end="98:69"><name pos:start="98:5" pos:end="98:25">sysbus_create_varargs</name><argument_list pos:start="98:26" pos:end="98:69">(<argument pos:start="98:27" pos:end="98:33"><expr pos:start="98:27" pos:end="98:33"><literal type="string" pos:start="98:27" pos:end="98:33">"pl181"</literal></expr></argument>, <argument pos:start="98:36" pos:end="98:45"><expr pos:start="98:36" pos:end="98:45"><literal type="number" pos:start="98:36" pos:end="98:45">0x10005000</literal></expr></argument>, <argument pos:start="98:48" pos:end="98:54"><expr pos:start="98:48" pos:end="98:54"><name pos:start="98:48" pos:end="98:54"><name pos:start="98:48" pos:end="98:50">sic</name><index pos:start="98:51" pos:end="98:54">[<expr pos:start="98:52" pos:end="98:53"><literal type="number" pos:start="98:52" pos:end="98:53">22</literal></expr>]</index></name></expr></argument>, <argument pos:start="98:57" pos:end="98:62"><expr pos:start="98:57" pos:end="98:62"><name pos:start="98:57" pos:end="98:62"><name pos:start="98:57" pos:end="98:59">sic</name><index pos:start="98:60" pos:end="98:62">[<expr pos:start="98:61" pos:end="98:61"><literal type="number" pos:start="98:61" pos:end="98:61">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="98:65" pos:end="98:68"><expr pos:start="98:65" pos:end="98:68"><name pos:start="98:65" pos:end="98:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="99:5" pos:end="99:70"><expr pos:start="99:5" pos:end="99:69"><call pos:start="99:5" pos:end="99:69"><name pos:start="99:5" pos:end="99:25">sysbus_create_varargs</name><argument_list pos:start="99:26" pos:end="99:69">(<argument pos:start="99:27" pos:end="99:33"><expr pos:start="99:27" pos:end="99:33"><literal type="string" pos:start="99:27" pos:end="99:33">"pl181"</literal></expr></argument>, <argument pos:start="99:36" pos:end="99:45"><expr pos:start="99:36" pos:end="99:45"><literal type="number" pos:start="99:36" pos:end="99:45">0x1000b000</literal></expr></argument>, <argument pos:start="99:48" pos:end="99:54"><expr pos:start="99:48" pos:end="99:54"><name pos:start="99:48" pos:end="99:54"><name pos:start="99:48" pos:end="99:50">sic</name><index pos:start="99:51" pos:end="99:54">[<expr pos:start="99:52" pos:end="99:53"><literal type="number" pos:start="99:52" pos:end="99:53">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="99:57" pos:end="99:62"><expr pos:start="99:57" pos:end="99:62"><name pos:start="99:57" pos:end="99:62"><name pos:start="99:57" pos:end="99:59">sic</name><index pos:start="99:60" pos:end="99:62">[<expr pos:start="99:61" pos:end="99:61"><literal type="number" pos:start="99:61" pos:end="99:61">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="99:65" pos:end="99:68"><expr pos:start="99:65" pos:end="99:68"><name pos:start="99:65" pos:end="99:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="100:5" pos:end="100:36">/* Add PL031 Real Time Clock. */</comment>
    <expr_stmt pos:start="101:5" pos:end="101:55"><expr pos:start="101:5" pos:end="101:54"><call pos:start="101:5" pos:end="101:54"><name pos:start="101:5" pos:end="101:24">sysbus_create_simple</name><argument_list pos:start="101:25" pos:end="101:54">(<argument pos:start="101:26" pos:end="101:32"><expr pos:start="101:26" pos:end="101:32"><literal type="string" pos:start="101:26" pos:end="101:32">"pl031"</literal></expr></argument>, <argument pos:start="101:35" pos:end="101:44"><expr pos:start="101:35" pos:end="101:44"><literal type="number" pos:start="101:35" pos:end="101:44">0x101e8000</literal></expr></argument>, <argument pos:start="101:47" pos:end="101:53"><expr pos:start="101:47" pos:end="101:53"><name pos:start="101:47" pos:end="101:53"><name pos:start="101:47" pos:end="101:49">pic</name><index pos:start="101:50" pos:end="101:53">[<expr pos:start="101:51" pos:end="101:52"><literal type="number" pos:start="101:51" pos:end="101:52">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="102:5" pos:end="102:66"><expr pos:start="102:5" pos:end="102:65"><name pos:start="102:5" pos:end="102:7">dev</name> <operator pos:start="102:9" pos:end="102:9">=</operator> <call pos:start="102:11" pos:end="102:65"><name pos:start="102:11" pos:end="102:30">sysbus_create_simple</name><argument_list pos:start="102:31" pos:end="102:65">(<argument pos:start="102:32" pos:end="102:46"><expr pos:start="102:32" pos:end="102:46"><literal type="string" pos:start="102:32" pos:end="102:46">"versatile_i2c"</literal></expr></argument>, <argument pos:start="102:49" pos:end="102:58"><expr pos:start="102:49" pos:end="102:58"><literal type="number" pos:start="102:49" pos:end="102:58">0x10002000</literal></expr></argument>, <argument pos:start="102:61" pos:end="102:64"><expr pos:start="102:61" pos:end="102:64"><name pos:start="102:61" pos:end="102:64">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:51"><expr pos:start="103:5" pos:end="103:50"><name pos:start="103:5" pos:end="103:7">i2c</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <operator pos:start="103:11" pos:end="103:11">(</operator><name pos:start="103:12" pos:end="103:17">I2CBus</name> <operator pos:start="103:19" pos:end="103:19">*</operator><operator pos:start="103:20" pos:end="103:20">)</operator><call pos:start="103:21" pos:end="103:50"><name pos:start="103:21" pos:end="103:38">qdev_get_child_bus</name><argument_list pos:start="103:39" pos:end="103:50">(<argument pos:start="103:40" pos:end="103:42"><expr pos:start="103:40" pos:end="103:42"><name pos:start="103:40" pos:end="103:42">dev</name></expr></argument>, <argument pos:start="103:45" pos:end="103:49"><expr pos:start="103:45" pos:end="103:49"><literal type="string" pos:start="103:45" pos:end="103:49">"i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="104:5" pos:end="104:42"><expr pos:start="104:5" pos:end="104:41"><call pos:start="104:5" pos:end="104:41"><name pos:start="104:5" pos:end="104:20">i2c_create_slave</name><argument_list pos:start="104:21" pos:end="104:41">(<argument pos:start="104:22" pos:end="104:24"><expr pos:start="104:22" pos:end="104:24"><name pos:start="104:22" pos:end="104:24">i2c</name></expr></argument>, <argument pos:start="104:27" pos:end="104:34"><expr pos:start="104:27" pos:end="104:34"><literal type="string" pos:start="104:27" pos:end="104:34">"ds1338"</literal></expr></argument>, <argument pos:start="104:37" pos:end="104:40"><expr pos:start="104:37" pos:end="104:40"><literal type="number" pos:start="104:37" pos:end="104:40">0x68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="105:5" pos:end="105:54">/* Add PL041 AACI Interface to the LM4549 codec */</comment>
    <expr_stmt pos:start="106:5" pos:end="106:39"><expr pos:start="106:5" pos:end="106:38"><name pos:start="106:5" pos:end="106:9">pl041</name> <operator pos:start="106:11" pos:end="106:11">=</operator> <call pos:start="106:13" pos:end="106:38"><name pos:start="106:13" pos:end="106:23">qdev_create</name><argument_list pos:start="106:24" pos:end="106:38">(<argument pos:start="106:25" pos:end="106:28"><expr pos:start="106:25" pos:end="106:28"><name pos:start="106:25" pos:end="106:28">NULL</name></expr></argument>, <argument pos:start="106:31" pos:end="106:37"><expr pos:start="106:31" pos:end="106:37"><literal type="string" pos:start="106:31" pos:end="106:37">"pl041"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="107:5" pos:end="107:54"><expr pos:start="107:5" pos:end="107:53"><call pos:start="107:5" pos:end="107:53"><name pos:start="107:5" pos:end="107:24">qdev_prop_set_uint32</name><argument_list pos:start="107:25" pos:end="107:53">(<argument pos:start="107:26" pos:end="107:30"><expr pos:start="107:26" pos:end="107:30"><name pos:start="107:26" pos:end="107:30">pl041</name></expr></argument>, <argument pos:start="107:33" pos:end="107:47"><expr pos:start="107:33" pos:end="107:47"><literal type="string" pos:start="107:33" pos:end="107:47">"nc_fifo_depth"</literal></expr></argument>, <argument pos:start="107:50" pos:end="107:52"><expr pos:start="107:50" pos:end="107:52"><literal type="number" pos:start="107:50" pos:end="107:52">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="108:5" pos:end="108:28"><expr pos:start="108:5" pos:end="108:27"><call pos:start="108:5" pos:end="108:27"><name pos:start="108:5" pos:end="108:20">qdev_init_nofail</name><argument_list pos:start="108:21" pos:end="108:27">(<argument pos:start="108:22" pos:end="108:26"><expr pos:start="108:22" pos:end="108:26"><name pos:start="108:22" pos:end="108:26">pl041</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="109:5" pos:end="109:58"><expr pos:start="109:5" pos:end="109:57"><call pos:start="109:5" pos:end="109:57"><name pos:start="109:5" pos:end="109:19">sysbus_mmio_map</name><argument_list pos:start="109:20" pos:end="109:57">(<argument pos:start="109:21" pos:end="109:41"><expr pos:start="109:21" pos:end="109:41"><call pos:start="109:21" pos:end="109:41"><name pos:start="109:21" pos:end="109:34">SYS_BUS_DEVICE</name><argument_list pos:start="109:35" pos:end="109:41">(<argument pos:start="109:36" pos:end="109:40"><expr pos:start="109:36" pos:end="109:40"><name pos:start="109:36" pos:end="109:40">pl041</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:44" pos:end="109:44"><expr pos:start="109:44" pos:end="109:44"><literal type="number" pos:start="109:44" pos:end="109:44">0</literal></expr></argument>, <argument pos:start="109:47" pos:end="109:56"><expr pos:start="109:47" pos:end="109:56"><literal type="number" pos:start="109:47" pos:end="109:56">0x10004000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="110:5" pos:end="110:58"><expr pos:start="110:5" pos:end="110:57"><call pos:start="110:5" pos:end="110:57"><name pos:start="110:5" pos:end="110:22">sysbus_connect_irq</name><argument_list pos:start="110:23" pos:end="110:57">(<argument pos:start="110:24" pos:end="110:44"><expr pos:start="110:24" pos:end="110:44"><call pos:start="110:24" pos:end="110:44"><name pos:start="110:24" pos:end="110:37">SYS_BUS_DEVICE</name><argument_list pos:start="110:38" pos:end="110:44">(<argument pos:start="110:39" pos:end="110:43"><expr pos:start="110:39" pos:end="110:43"><name pos:start="110:39" pos:end="110:43">pl041</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="110:47" pos:end="110:47"><expr pos:start="110:47" pos:end="110:47"><literal type="number" pos:start="110:47" pos:end="110:47">0</literal></expr></argument>, <argument pos:start="110:50" pos:end="110:56"><expr pos:start="110:50" pos:end="110:56"><name pos:start="110:50" pos:end="110:56"><name pos:start="110:50" pos:end="110:52">sic</name><index pos:start="110:53" pos:end="110:56">[<expr pos:start="110:54" pos:end="110:55"><literal type="number" pos:start="110:54" pos:end="110:55">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="111:5" pos:end="111:39">/* Memory map for Versatile/PB:  */</comment>
    <comment type="block" pos:start="112:5" pos:end="112:39">/* 0x10000000 System registers.  */</comment>
    <comment type="block" pos:start="113:5" pos:end="113:54">/* 0x10001000 PCI controller config registers.  */</comment>
    <comment type="block" pos:start="114:5" pos:end="114:43">/* 0x10002000 Serial bus interface.  */</comment>
    <comment type="block" pos:start="115:5" pos:end="115:54">/*  0x10003000 Secondary interrupt controller.  */</comment>
    <comment type="block" pos:start="116:5" pos:end="116:35">/* 0x10004000 AACI (audio).  */</comment>
    <comment type="block" pos:start="117:5" pos:end="117:29">/*  0x10005000 MMCI0.  */</comment>
    <comment type="block" pos:start="118:5" pos:end="118:39">/*  0x10006000 KMI0 (keyboard).  */</comment>
    <comment type="block" pos:start="119:5" pos:end="119:36">/*  0x10007000 KMI1 (mouse).  */</comment>
    <comment type="block" pos:start="120:5" pos:end="120:46">/* 0x10008000 Character LCD Interface.  */</comment>
    <comment type="block" pos:start="121:5" pos:end="121:29">/*  0x10009000 UART3.  */</comment>
    <comment type="block" pos:start="122:5" pos:end="122:35">/* 0x1000a000 Smart card 1.  */</comment>
    <comment type="block" pos:start="123:5" pos:end="123:29">/*  0x1000b000 MMCI1.  */</comment>
    <comment type="block" pos:start="124:5" pos:end="124:32">/*  0x10010000 Ethernet.  */</comment>
    <comment type="block" pos:start="125:5" pos:end="125:26">/* 0x10020000 USB.  */</comment>
    <comment type="block" pos:start="126:5" pos:end="126:27">/* 0x10100000 SSMC.  */</comment>
    <comment type="block" pos:start="127:5" pos:end="127:27">/* 0x10110000 MPMC.  */</comment>
    <comment type="block" pos:start="128:5" pos:end="128:39">/*  0x10120000 CLCD Controller.  */</comment>
    <comment type="block" pos:start="129:5" pos:end="129:38">/*  0x10130000 DMA Controller.  */</comment>
    <comment type="block" pos:start="130:5" pos:end="130:53">/*  0x10140000 Vectored interrupt controller.  */</comment>
    <comment type="block" pos:start="131:5" pos:end="131:44">/* 0x101d0000 AHB Monitor Interface.  */</comment>
    <comment type="block" pos:start="132:5" pos:end="132:40">/* 0x101e0000 System Controller.  */</comment>
    <comment type="block" pos:start="133:5" pos:end="133:41">/* 0x101e1000 Watchdog Interface.  */</comment>
    <comment type="block" pos:start="134:5" pos:end="134:32">/* 0x101e2000 Timer 0/1.  */</comment>
    <comment type="block" pos:start="135:5" pos:end="135:32">/* 0x101e3000 Timer 2/3.  */</comment>
    <comment type="block" pos:start="136:5" pos:end="136:34">/* 0x101e4000 GPIO port 0.  */</comment>
    <comment type="block" pos:start="137:5" pos:end="137:34">/* 0x101e5000 GPIO port 1.  */</comment>
    <comment type="block" pos:start="138:5" pos:end="138:34">/* 0x101e6000 GPIO port 2.  */</comment>
    <comment type="block" pos:start="139:5" pos:end="139:34">/* 0x101e7000 GPIO port 3.  */</comment>
    <comment type="block" pos:start="140:5" pos:end="140:26">/* 0x101e8000 RTC.  */</comment>
    <comment type="block" pos:start="141:5" pos:end="141:35">/* 0x101f0000 Smart card 0.  */</comment>
    <comment type="block" pos:start="142:5" pos:end="142:29">/*  0x101f1000 UART0.  */</comment>
    <comment type="block" pos:start="143:5" pos:end="143:29">/*  0x101f2000 UART1.  */</comment>
    <comment type="block" pos:start="144:5" pos:end="144:29">/*  0x101f3000 UART2.  */</comment>
    <comment type="block" pos:start="145:5" pos:end="145:27">/* 0x101f4000 SSPI.  */</comment>
    <comment type="block" pos:start="146:5" pos:end="146:30">/* 0x34000000 NOR Flash */</comment>
    <expr_stmt pos:start="147:5" pos:end="147:39"><expr pos:start="147:5" pos:end="147:38"><name pos:start="147:5" pos:end="147:9">dinfo</name> <operator pos:start="147:11" pos:end="147:11">=</operator> <call pos:start="147:13" pos:end="147:38"><name pos:start="147:13" pos:end="147:21">drive_get</name><argument_list pos:start="147:22" pos:end="147:38">(<argument pos:start="147:23" pos:end="147:31"><expr pos:start="147:23" pos:end="147:31"><name pos:start="147:23" pos:end="147:31">IF_PFLASH</name></expr></argument>, <argument pos:start="147:34" pos:end="147:34"><expr pos:start="147:34" pos:end="147:34"><literal type="number" pos:start="147:34" pos:end="147:34">0</literal></expr></argument>, <argument pos:start="147:37" pos:end="147:37"><expr pos:start="147:37" pos:end="147:37"><literal type="number" pos:start="147:37" pos:end="147:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="148:5" pos:end="160:43"><if pos:start="148:5" pos:end="160:43">if <condition pos:start="148:8" pos:end="153:61">(<expr pos:start="148:9" pos:end="153:60"><operator pos:start="148:9" pos:end="148:9">!</operator><call pos:start="148:10" pos:end="153:60"><name pos:start="148:10" pos:end="148:30">pflash_cfi01_register</name><argument_list pos:start="148:31" pos:end="153:60">(<argument pos:start="148:32" pos:end="148:51"><expr pos:start="148:32" pos:end="148:51"><name pos:start="148:32" pos:end="148:51">VERSATILE_FLASH_ADDR</name></expr></argument>, <argument pos:start="148:54" pos:end="148:57"><expr pos:start="148:54" pos:end="148:57"><name pos:start="148:54" pos:end="148:57">NULL</name></expr></argument>, <argument pos:start="148:60" pos:end="148:76"><expr pos:start="148:60" pos:end="148:76"><literal type="string" pos:start="148:60" pos:end="148:76">"versatile.flash"</literal></expr></argument>,
                          <argument pos:start="149:27" pos:end="149:46"><expr pos:start="149:27" pos:end="149:46"><name pos:start="149:27" pos:end="149:46">VERSATILE_FLASH_SIZE</name></expr></argument>,
                          <argument pos:start="150:27" pos:end="150:67"><expr pos:start="150:27" pos:end="150:67"><ternary pos:start="150:27" pos:end="150:67"><condition pos:start="150:27" pos:end="150:33"><expr pos:start="150:27" pos:end="150:31"><name pos:start="150:27" pos:end="150:31">dinfo</name></expr> ?</condition><then pos:start="150:35" pos:end="150:60"> <expr pos:start="150:35" pos:end="150:60"><call pos:start="150:35" pos:end="150:60"><name pos:start="150:35" pos:end="150:53">blk_by_legacy_dinfo</name><argument_list pos:start="150:54" pos:end="150:60">(<argument pos:start="150:55" pos:end="150:59"><expr pos:start="150:55" pos:end="150:59"><name pos:start="150:55" pos:end="150:59">dinfo</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="150:62" pos:end="150:67">: <expr pos:start="150:64" pos:end="150:67"><name pos:start="150:64" pos:end="150:67">NULL</name></expr></else></ternary></expr></argument>,
                          <argument pos:start="151:27" pos:end="151:51"><expr pos:start="151:27" pos:end="151:51"><name pos:start="151:27" pos:end="151:51">VERSATILE_FLASH_SECT_SIZE</name></expr></argument>,
                          <argument pos:start="152:27" pos:end="152:74"><expr pos:start="152:27" pos:end="152:74"><name pos:start="152:27" pos:end="152:46">VERSATILE_FLASH_SIZE</name> <operator pos:start="152:48" pos:end="152:48">/</operator> <name pos:start="152:50" pos:end="152:74">VERSATILE_FLASH_SECT_SIZE</name></expr></argument>,
                          <argument pos:start="153:27" pos:end="153:27"><expr pos:start="153:27" pos:end="153:27"><literal type="number" pos:start="153:27" pos:end="153:27">4</literal></expr></argument>, <argument pos:start="153:30" pos:end="153:35"><expr pos:start="153:30" pos:end="153:35"><literal type="number" pos:start="153:30" pos:end="153:35">0x0089</literal></expr></argument>, <argument pos:start="153:38" pos:end="153:43"><expr pos:start="153:38" pos:end="153:43"><literal type="number" pos:start="153:38" pos:end="153:43">0x0018</literal></expr></argument>, <argument pos:start="153:46" pos:end="153:51"><expr pos:start="153:46" pos:end="153:51"><literal type="number" pos:start="153:46" pos:end="153:51">0x0000</literal></expr></argument>, <argument pos:start="153:54" pos:end="153:56"><expr pos:start="153:54" pos:end="153:56"><literal type="number" pos:start="153:54" pos:end="153:56">0x0</literal></expr></argument>, <argument pos:start="153:59" pos:end="153:59"><expr pos:start="153:59" pos:end="153:59"><literal type="number" pos:start="153:59" pos:end="153:59">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:63" pos:end="160:43">{<block_content pos:start="154:9" pos:end="160:43">
        <expr_stmt pos:start="154:9" pos:end="154:67"><expr pos:start="154:9" pos:end="154:66"><call pos:start="154:9" pos:end="154:66"><name pos:start="154:9" pos:end="154:15">fprintf</name><argument_list pos:start="154:16" pos:end="154:66">(<argument pos:start="154:17" pos:end="154:22"><expr pos:start="154:17" pos:end="154:22"><name pos:start="154:17" pos:end="154:22">stderr</name></expr></argument>, <argument pos:start="154:25" pos:end="154:65"><expr pos:start="154:25" pos:end="154:65"><literal type="string" pos:start="154:25" pos:end="154:65">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="155:5" pos:end="155:49"><expr pos:start="155:5" pos:end="155:48"><name pos:start="155:5" pos:end="155:28"><name pos:start="155:5" pos:end="155:19">versatile_binfo</name><operator pos:start="155:20" pos:end="155:20">.</operator><name pos:start="155:21" pos:end="155:28">ram_size</name></name> <operator pos:start="155:30" pos:end="155:30">=</operator> <name pos:start="155:32" pos:end="155:48"><name pos:start="155:32" pos:end="155:38">machine</name><operator pos:start="155:39" pos:end="155:40">-&gt;</operator><name pos:start="155:41" pos:end="155:48">ram_size</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="156:5" pos:end="156:63"><expr pos:start="156:5" pos:end="156:62"><name pos:start="156:5" pos:end="156:35"><name pos:start="156:5" pos:end="156:19">versatile_binfo</name><operator pos:start="156:20" pos:end="156:20">.</operator><name pos:start="156:21" pos:end="156:35">kernel_filename</name></name> <operator pos:start="156:37" pos:end="156:37">=</operator> <name pos:start="156:39" pos:end="156:62"><name pos:start="156:39" pos:end="156:45">machine</name><operator pos:start="156:46" pos:end="156:47">-&gt;</operator><name pos:start="156:48" pos:end="156:62">kernel_filename</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="157:5" pos:end="157:61"><expr pos:start="157:5" pos:end="157:60"><name pos:start="157:5" pos:end="157:34"><name pos:start="157:5" pos:end="157:19">versatile_binfo</name><operator pos:start="157:20" pos:end="157:20">.</operator><name pos:start="157:21" pos:end="157:34">kernel_cmdline</name></name> <operator pos:start="157:36" pos:end="157:36">=</operator> <name pos:start="157:38" pos:end="157:60"><name pos:start="157:38" pos:end="157:44">machine</name><operator pos:start="157:45" pos:end="157:46">-&gt;</operator><name pos:start="157:47" pos:end="157:60">kernel_cmdline</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="158:5" pos:end="158:63"><expr pos:start="158:5" pos:end="158:62"><name pos:start="158:5" pos:end="158:35"><name pos:start="158:5" pos:end="158:19">versatile_binfo</name><operator pos:start="158:20" pos:end="158:20">.</operator><name pos:start="158:21" pos:end="158:35">initrd_filename</name></name> <operator pos:start="158:37" pos:end="158:37">=</operator> <name pos:start="158:39" pos:end="158:62"><name pos:start="158:39" pos:end="158:45">machine</name><operator pos:start="158:46" pos:end="158:47">-&gt;</operator><name pos:start="158:48" pos:end="158:62">initrd_filename</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="159:5" pos:end="159:40"><expr pos:start="159:5" pos:end="159:39"><name pos:start="159:5" pos:end="159:28"><name pos:start="159:5" pos:end="159:19">versatile_binfo</name><operator pos:start="159:20" pos:end="159:20">.</operator><name pos:start="159:21" pos:end="159:28">board_id</name></name> <operator pos:start="159:30" pos:end="159:30">=</operator> <name pos:start="159:32" pos:end="159:39">board_id</name></expr>;</expr_stmt>
    <expr_stmt pos:start="160:5" pos:end="160:43"><expr pos:start="160:5" pos:end="160:42"><call pos:start="160:5" pos:end="160:42"><name pos:start="160:5" pos:end="160:19">arm_load_kernel</name><argument_list pos:start="160:20" pos:end="160:42">(<argument pos:start="160:21" pos:end="160:23"><expr pos:start="160:21" pos:end="160:23"><name pos:start="160:21" pos:end="160:23">cpu</name></expr></argument>, <argument pos:start="160:26" pos:end="160:41"><expr pos:start="160:26" pos:end="160:41"><operator pos:start="160:26" pos:end="160:26">&amp;</operator><name pos:start="160:27" pos:end="160:41">versatile_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
