<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18689.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:6">ARITH3</name><argument_list pos:start="1:7" pos:end="1:13">(<argument pos:start="1:8" pos:end="1:12">addlv</argument>)</argument_list></macro>

<macro pos:start="3:1" pos:end="3:13"><name pos:start="3:1" pos:end="3:6">ARITH3</name><argument_list pos:start="3:7" pos:end="3:13">(<argument pos:start="3:8" pos:end="3:12">sublv</argument>)</argument_list></macro>

<macro pos:start="5:1" pos:end="5:13"><name pos:start="5:1" pos:end="5:6">ARITH3</name><argument_list pos:start="5:7" pos:end="5:13">(<argument pos:start="5:8" pos:end="5:12">addqv</argument>)</argument_list></macro>

<macro pos:start="7:1" pos:end="7:13"><name pos:start="7:1" pos:end="7:6">ARITH3</name><argument_list pos:start="7:7" pos:end="7:13">(<argument pos:start="7:8" pos:end="7:12">subqv</argument>)</argument_list></macro>

<macro pos:start="9:1" pos:end="9:13"><name pos:start="9:1" pos:end="9:6">ARITH3</name><argument_list pos:start="9:7" pos:end="9:13">(<argument pos:start="9:8" pos:end="9:12">umulh</argument>)</argument_list></macro>

<macro pos:start="11:1" pos:end="11:13"><name pos:start="11:1" pos:end="11:6">ARITH3</name><argument_list pos:start="11:7" pos:end="11:13">(<argument pos:start="11:8" pos:end="11:12">mullv</argument>)</argument_list></macro>

<macro pos:start="13:1" pos:end="13:13"><name pos:start="13:1" pos:end="13:6">ARITH3</name><argument_list pos:start="13:7" pos:end="13:13">(<argument pos:start="13:8" pos:end="13:12">mulqv</argument>)</argument_list></macro>

<macro pos:start="15:1" pos:end="15:14"><name pos:start="15:1" pos:end="15:6">ARITH3</name><argument_list pos:start="15:7" pos:end="15:14">(<argument pos:start="15:8" pos:end="15:13">minub8</argument>)</argument_list></macro>

<macro pos:start="17:1" pos:end="17:14"><name pos:start="17:1" pos:end="17:6">ARITH3</name><argument_list pos:start="17:7" pos:end="17:14">(<argument pos:start="17:8" pos:end="17:13">minsb8</argument>)</argument_list></macro>

<macro pos:start="19:1" pos:end="19:14"><name pos:start="19:1" pos:end="19:6">ARITH3</name><argument_list pos:start="19:7" pos:end="19:14">(<argument pos:start="19:8" pos:end="19:13">minuw4</argument>)</argument_list></macro>

<macro pos:start="21:1" pos:end="21:14"><name pos:start="21:1" pos:end="21:6">ARITH3</name><argument_list pos:start="21:7" pos:end="21:14">(<argument pos:start="21:8" pos:end="21:13">minsw4</argument>)</argument_list></macro>

<macro pos:start="23:1" pos:end="23:14"><name pos:start="23:1" pos:end="23:6">ARITH3</name><argument_list pos:start="23:7" pos:end="23:14">(<argument pos:start="23:8" pos:end="23:13">maxub8</argument>)</argument_list></macro>

<macro pos:start="25:1" pos:end="25:14"><name pos:start="25:1" pos:end="25:6">ARITH3</name><argument_list pos:start="25:7" pos:end="25:14">(<argument pos:start="25:8" pos:end="25:13">maxsb8</argument>)</argument_list></macro>

<macro pos:start="27:1" pos:end="27:14"><name pos:start="27:1" pos:end="27:6">ARITH3</name><argument_list pos:start="27:7" pos:end="27:14">(<argument pos:start="27:8" pos:end="27:13">maxuw4</argument>)</argument_list></macro>

<macro pos:start="29:1" pos:end="29:14"><name pos:start="29:1" pos:end="29:6">ARITH3</name><argument_list pos:start="29:7" pos:end="29:14">(<argument pos:start="29:8" pos:end="29:13">maxsw4</argument>)</argument_list></macro>

<macro pos:start="31:1" pos:end="54:0"><name pos:start="31:1" pos:end="31:6">ARITH3</name><argument_list pos:start="31:7" pos:end="54:0">(<argument pos:start="31:8" pos:end="31:11">perr</argument>)</argument_list></macro>



<cpp:define pos:start="35:1" pos:end="53:1">#<cpp:directive pos:start="35:2" pos:end="35:7">define</cpp:directive> <cpp:macro pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:14">MVIOP2</name><parameter_list pos:start="35:15" pos:end="35:20">(<parameter pos:start="35:16" pos:end="35:19"><type pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">name</name></type></parameter>)</parameter_list></cpp:macro>                                    \

<cpp:value pos:start="37:1" pos:end="53:1">static inline void glue(gen_, name)(int rb, int rc)     \

{                                                       \

    if (unlikely(rc == 31))                             \

        return;                                         \

    if (unlikely(rb == 31))                             \

        tcg_gen_movi_i64(cpu_ir[rc], 0);                \

    else                                                \

        gen_helper_ ## name (cpu_ir[rc], cpu_ir[rb]);   \

}</cpp:value></cpp:define>

<macro pos:start="55:1" pos:end="55:12"><name pos:start="55:1" pos:end="55:6">MVIOP2</name><argument_list pos:start="55:7" pos:end="55:12">(<argument pos:start="55:8" pos:end="55:11">pklb</argument>)</argument_list></macro>

<macro pos:start="57:1" pos:end="57:12"><name pos:start="57:1" pos:end="57:6">MVIOP2</name><argument_list pos:start="57:7" pos:end="57:12">(<argument pos:start="57:8" pos:end="57:11">pkwb</argument>)</argument_list></macro>

<macro pos:start="59:1" pos:end="59:14"><name pos:start="59:1" pos:end="59:6">MVIOP2</name><argument_list pos:start="59:7" pos:end="59:14">(<argument pos:start="59:8" pos:end="59:13">unpkbl</argument>)</argument_list></macro>

<macro pos:start="61:1" pos:end="61:14"><name pos:start="61:1" pos:end="61:6">MVIOP2</name><argument_list pos:start="61:7" pos:end="61:14">(<argument pos:start="61:8" pos:end="61:13">unpkbw</argument>)</argument_list></macro>



<function pos:start="65:1" pos:end="121:1"><type pos:start="65:1" pos:end="65:11"><specifier pos:start="65:1" pos:end="65:6">static</specifier> <name pos:start="65:8" pos:end="65:11">void</name></type> <name pos:start="65:13" pos:end="65:19">gen_cmp</name><parameter_list pos:start="65:20" pos:end="67:43">(<parameter pos:start="65:21" pos:end="65:32"><decl pos:start="65:21" pos:end="65:32"><type pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:27">TCGCond</name></type> <name pos:start="65:29" pos:end="65:32">cond</name></decl></parameter>, <parameter pos:start="65:35" pos:end="65:40"><decl pos:start="65:35" pos:end="65:40"><type pos:start="65:35" pos:end="65:40"><name pos:start="65:35" pos:end="65:37">int</name></type> <name pos:start="65:39" pos:end="65:40">ra</name></decl></parameter>, <parameter pos:start="65:43" pos:end="65:48"><decl pos:start="65:43" pos:end="65:48"><type pos:start="65:43" pos:end="65:48"><name pos:start="65:43" pos:end="65:45">int</name></type> <name pos:start="65:47" pos:end="65:48">rb</name></decl></parameter>, <parameter pos:start="65:51" pos:end="65:56"><decl pos:start="65:51" pos:end="65:56"><type pos:start="65:51" pos:end="65:56"><name pos:start="65:51" pos:end="65:53">int</name></type> <name pos:start="65:55" pos:end="65:56">rc</name></decl></parameter>,

                    <parameter pos:start="67:21" pos:end="67:29"><decl pos:start="67:21" pos:end="67:29"><type pos:start="67:21" pos:end="67:29"><name pos:start="67:21" pos:end="67:23">int</name></type> <name pos:start="67:25" pos:end="67:29">islit</name></decl></parameter>, <parameter pos:start="67:32" pos:end="67:42"><decl pos:start="67:32" pos:end="67:42"><type pos:start="67:32" pos:end="67:42"><name pos:start="67:32" pos:end="67:38">uint8_t</name></type> <name pos:start="67:40" pos:end="67:42">lit</name></decl></parameter>)</parameter_list>

<block pos:start="69:1" pos:end="121:1">{<block_content pos:start="71:5" pos:end="119:5">

    <decl_stmt pos:start="71:5" pos:end="71:16"><decl pos:start="71:5" pos:end="71:11"><type pos:start="71:5" pos:end="71:8"><name pos:start="71:5" pos:end="71:8">TCGv</name></type> <name pos:start="71:10" pos:end="71:11">va</name></decl>, <decl pos:start="71:14" pos:end="71:15"><type ref="prev" pos:start="71:5" pos:end="71:8"/><name pos:start="71:14" pos:end="71:15">vb</name></decl>;</decl_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:27">(<expr pos:start="75:9" pos:end="75:26"><call pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:16">unlikely</name><argument_list pos:start="75:17" pos:end="75:26">(<argument pos:start="75:18" pos:end="75:25"><expr pos:start="75:18" pos:end="75:25"><name pos:start="75:18" pos:end="75:19">rc</name> <operator pos:start="75:21" pos:end="75:22">==</operator> <literal type="number" pos:start="75:24" pos:end="75:25">31</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:29" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:15">

        <return pos:start="77:9" pos:end="77:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:17">(<expr pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:10">ra</name> <operator pos:start="83:12" pos:end="83:13">==</operator> <literal type="number" pos:start="83:15" pos:end="83:16">31</literal></expr>)</condition> <block pos:start="83:19" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:30">

        <expr_stmt pos:start="85:9" pos:end="85:30"><expr pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:10">va</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="85:29"><name pos:start="85:14" pos:end="85:26">tcg_const_i64</name><argument_list pos:start="85:27" pos:end="85:29">(<argument pos:start="85:28" pos:end="85:28"><expr pos:start="85:28" pos:end="85:28"><literal type="number" pos:start="85:28" pos:end="85:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="91:5">else <block pos:start="87:12" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:24">

        <expr_stmt pos:start="89:9" pos:end="89:24"><expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:10">va</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:23"><name pos:start="89:14" pos:end="89:19">cpu_ir</name><index pos:start="89:20" pos:end="89:23">[<expr pos:start="89:21" pos:end="89:22"><name pos:start="89:21" pos:end="89:22">ra</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:14">(<expr pos:start="93:9" pos:end="93:13"><name pos:start="93:9" pos:end="93:13">islit</name></expr>)</condition> <block pos:start="93:16" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:32">

        <expr_stmt pos:start="95:9" pos:end="95:32"><expr pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:10">vb</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <call pos:start="95:14" pos:end="95:31"><name pos:start="95:14" pos:end="95:26">tcg_const_i64</name><argument_list pos:start="95:27" pos:end="95:31">(<argument pos:start="95:28" pos:end="95:30"><expr pos:start="95:28" pos:end="95:30"><name pos:start="95:28" pos:end="95:30">lit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="101:5">else <block pos:start="97:12" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:24">

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:10">vb</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:23"><name pos:start="99:14" pos:end="99:19">cpu_ir</name><index pos:start="99:20" pos:end="99:23">[<expr pos:start="99:21" pos:end="99:22"><name pos:start="99:21" pos:end="99:22">rb</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:50"><expr pos:start="105:5" pos:end="105:49"><call pos:start="105:5" pos:end="105:49"><name pos:start="105:5" pos:end="105:23">tcg_gen_setcond_i64</name><argument_list pos:start="105:24" pos:end="105:49">(<argument pos:start="105:25" pos:end="105:28"><expr pos:start="105:25" pos:end="105:28"><name pos:start="105:25" pos:end="105:28">cond</name></expr></argument>, <argument pos:start="105:31" pos:end="105:40"><expr pos:start="105:31" pos:end="105:40"><name pos:start="105:31" pos:end="105:40"><name pos:start="105:31" pos:end="105:36">cpu_ir</name><index pos:start="105:37" pos:end="105:40">[<expr pos:start="105:38" pos:end="105:39"><name pos:start="105:38" pos:end="105:39">rc</name></expr>]</index></name></expr></argument>, <argument pos:start="105:43" pos:end="105:44"><expr pos:start="105:43" pos:end="105:44"><name pos:start="105:43" pos:end="105:44">va</name></expr></argument>, <argument pos:start="105:47" pos:end="105:48"><expr pos:start="105:47" pos:end="105:48"><name pos:start="105:47" pos:end="105:48">vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:17">(<expr pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:10">ra</name> <operator pos:start="109:12" pos:end="109:13">==</operator> <literal type="number" pos:start="109:15" pos:end="109:16">31</literal></expr>)</condition> <block pos:start="109:19" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:26">

        <expr_stmt pos:start="111:9" pos:end="111:26"><expr pos:start="111:9" pos:end="111:25"><call pos:start="111:9" pos:end="111:25"><name pos:start="111:9" pos:end="111:21">tcg_temp_free</name><argument_list pos:start="111:22" pos:end="111:25">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:14">(<expr pos:start="115:9" pos:end="115:13"><name pos:start="115:9" pos:end="115:13">islit</name></expr>)</condition> <block pos:start="115:16" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:26">

        <expr_stmt pos:start="117:9" pos:end="117:26"><expr pos:start="117:9" pos:end="117:25"><call pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:21">tcg_temp_free</name><argument_list pos:start="117:22" pos:end="117:25">(<argument pos:start="117:23" pos:end="117:24"><expr pos:start="117:23" pos:end="117:24"><name pos:start="117:23" pos:end="117:24">vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
