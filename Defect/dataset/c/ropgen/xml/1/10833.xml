<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10833.c" pos:tabs="8"><function pos:start="1:1" pos:end="199:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parse_dsd_prop</name><parameter_list pos:start="1:26" pos:end="1:73">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><name pos:start="1:27" pos:end="1:41">AVFormatContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:54">AVStream</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">st</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:68">uint64_t</name></type> <name pos:start="1:70" pos:end="1:72">eof</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="199:1">{<block_content pos:start="5:5" pos:end="197:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">AVIOContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">pb</name> <init pos:start="5:21" pos:end="5:27">= <expr pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:17"><name pos:start="7:10" pos:end="7:13">abss</name><index pos:start="7:14" pos:end="7:17">[<expr pos:start="7:15" pos:end="7:16"><literal type="number" pos:start="7:15" pos:end="7:16">24</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">hour</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">min</name></decl>, <decl pos:start="9:20" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:22">sec</name></decl>, <decl pos:start="9:25" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:25">i</name></decl>, <decl pos:start="9:28" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:30">ret</name></decl>, <decl pos:start="9:33" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:33" pos:end="9:38">config</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:18">dsd_layout</name><index pos:start="11:19" pos:end="11:21">[<expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">ID3v2ExtraMeta</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:36">id3v2_extra_meta</name></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="193:5">while <condition pos:start="17:11" pos:end="17:37">(<expr pos:start="17:12" pos:end="17:36"><call pos:start="17:12" pos:end="17:24"><name pos:start="17:12" pos:end="17:20">avio_tell</name><argument_list pos:start="17:21" pos:end="17:24">(<argument pos:start="17:22" pos:end="17:23"><expr pos:start="17:22" pos:end="17:23"><name pos:start="17:22" pos:end="17:23">pb</name></expr></argument>)</argument_list></call> <operator pos:start="17:26" pos:end="17:26">+</operator> <literal type="number" pos:start="17:28" pos:end="17:29">12</literal> <operator pos:start="17:31" pos:end="17:32">&lt;=</operator> <name pos:start="17:34" pos:end="17:36">eof</name></expr>)</condition> <block pos:start="17:39" pos:end="193:5">{<block_content pos:start="19:9" pos:end="191:70">

        <decl_stmt pos:start="19:9" pos:end="19:42"><decl pos:start="19:9" pos:end="19:41"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint32_t</name></type> <name pos:start="19:18" pos:end="19:20">tag</name>      <init pos:start="19:27" pos:end="19:41">= <expr pos:start="19:29" pos:end="19:41"><call pos:start="19:29" pos:end="19:41"><name pos:start="19:29" pos:end="19:37">avio_rl32</name><argument_list pos:start="19:38" pos:end="19:41">(<argument pos:start="19:39" pos:end="19:40"><expr pos:start="19:39" pos:end="19:40"><name pos:start="19:39" pos:end="19:40">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:42"><decl pos:start="21:9" pos:end="21:41"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:21">size</name>     <init pos:start="21:27" pos:end="21:41">= <expr pos:start="21:29" pos:end="21:41"><call pos:start="21:29" pos:end="21:41"><name pos:start="21:29" pos:end="21:37">avio_rb64</name><argument_list pos:start="21:38" pos:end="21:41">(<argument pos:start="21:39" pos:end="21:40"><expr pos:start="21:39" pos:end="21:40"><name pos:start="21:39" pos:end="21:40">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:42"><decl pos:start="23:9" pos:end="23:41"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint64_t</name></type> <name pos:start="23:18" pos:end="23:25">orig_pos</name> <init pos:start="23:27" pos:end="23:41">= <expr pos:start="23:29" pos:end="23:41"><call pos:start="23:29" pos:end="23:41"><name pos:start="23:29" pos:end="23:37">avio_tell</name><argument_list pos:start="23:38" pos:end="23:41">(<argument pos:start="23:39" pos:end="23:40"><expr pos:start="23:39" pos:end="23:40"><name pos:start="23:39" pos:end="23:40">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <switch pos:start="27:9" pos:end="187:9">switch<condition pos:start="27:15" pos:end="27:19">(<expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">tag</name></expr>)</condition> <block pos:start="27:21" pos:end="187:9">{<block_content pos:start="29:9" pos:end="185:18">

        <case pos:start="29:9" pos:end="29:36">case <expr pos:start="29:14" pos:end="29:35"><call pos:start="29:14" pos:end="29:35"><name pos:start="29:14" pos:end="29:18">MKTAG</name><argument_list pos:start="29:19" pos:end="29:35">(<argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><literal type="char" pos:start="29:20" pos:end="29:22">'A'</literal></expr></argument>,<argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><literal type="char" pos:start="29:24" pos:end="29:26">'B'</literal></expr></argument>,<argument pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><literal type="char" pos:start="29:28" pos:end="29:30">'S'</literal></expr></argument>,<argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><literal type="char" pos:start="29:32" pos:end="29:34">'S'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="31:13" pos:end="33:43"><if pos:start="31:13" pos:end="33:43">if <condition pos:start="31:16" pos:end="31:25">(<expr pos:start="31:17" pos:end="31:24"><name pos:start="31:17" pos:end="31:20">size</name> <operator pos:start="31:22" pos:end="31:22">&lt;</operator> <literal type="number" pos:start="31:24" pos:end="31:24">8</literal></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:43"><block_content pos:start="33:17" pos:end="33:43">

                <return pos:start="33:17" pos:end="33:43">return <expr pos:start="33:24" pos:end="33:42"><name pos:start="33:24" pos:end="33:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:33"><expr pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:16">hour</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:32"><name pos:start="35:20" pos:end="35:28">avio_rb16</name><argument_list pos:start="35:29" pos:end="35:32">(<argument pos:start="35:30" pos:end="35:31"><expr pos:start="35:30" pos:end="35:31"><name pos:start="35:30" pos:end="35:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:31"><expr pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:15">min</name>  <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:30"><name pos:start="37:20" pos:end="37:26">avio_r8</name><argument_list pos:start="37:27" pos:end="37:30">(<argument pos:start="37:28" pos:end="37:29"><expr pos:start="37:28" pos:end="37:29"><name pos:start="37:28" pos:end="37:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:31"><expr pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:15">sec</name>  <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:30"><name pos:start="39:20" pos:end="39:26">avio_r8</name><argument_list pos:start="39:27" pos:end="39:30">(<argument pos:start="39:28" pos:end="39:29"><expr pos:start="39:28" pos:end="39:29"><name pos:start="39:28" pos:end="39:29">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:96"><expr pos:start="41:13" pos:end="41:95"><call pos:start="41:13" pos:end="41:95"><name pos:start="41:13" pos:end="41:20">snprintf</name><argument_list pos:start="41:21" pos:end="41:95">(<argument pos:start="41:22" pos:end="41:25"><expr pos:start="41:22" pos:end="41:25"><name pos:start="41:22" pos:end="41:25">abss</name></expr></argument>, <argument pos:start="41:28" pos:end="41:39"><expr pos:start="41:28" pos:end="41:39"><sizeof pos:start="41:28" pos:end="41:39">sizeof<argument_list pos:start="41:34" pos:end="41:39">(<argument pos:start="41:35" pos:end="41:38"><expr pos:start="41:35" pos:end="41:38"><name pos:start="41:35" pos:end="41:38">abss</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="41:42" pos:end="41:63"><expr pos:start="41:42" pos:end="41:63"><literal type="string" pos:start="41:42" pos:end="41:63">"%02dh:%02dm:%02ds:%d"</literal></expr></argument>, <argument pos:start="41:66" pos:end="41:69"><expr pos:start="41:66" pos:end="41:69"><name pos:start="41:66" pos:end="41:69">hour</name></expr></argument>, <argument pos:start="41:72" pos:end="41:74"><expr pos:start="41:72" pos:end="41:74"><name pos:start="41:72" pos:end="41:74">min</name></expr></argument>, <argument pos:start="41:77" pos:end="41:79"><expr pos:start="41:77" pos:end="41:79"><name pos:start="41:77" pos:end="41:79">sec</name></expr></argument>, <argument pos:start="41:82" pos:end="41:94"><expr pos:start="41:82" pos:end="41:94"><call pos:start="41:82" pos:end="41:94"><name pos:start="41:82" pos:end="41:90">avio_rb32</name><argument_list pos:start="41:91" pos:end="41:94">(<argument pos:start="41:92" pos:end="41:93"><expr pos:start="41:92" pos:end="41:93"><name pos:start="41:92" pos:end="41:93">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:71"><expr pos:start="43:13" pos:end="43:70"><call pos:start="43:13" pos:end="43:70"><name pos:start="43:13" pos:end="43:23">av_dict_set</name><argument_list pos:start="43:24" pos:end="43:70">(<argument pos:start="43:25" pos:end="43:37"><expr pos:start="43:25" pos:end="43:37"><operator pos:start="43:25" pos:end="43:25">&amp;</operator><name pos:start="43:26" pos:end="43:37"><name pos:start="43:26" pos:end="43:27">st</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:37">metadata</name></name></expr></argument>, <argument pos:start="43:40" pos:end="43:60"><expr pos:start="43:40" pos:end="43:60"><literal type="string" pos:start="43:40" pos:end="43:60">"absolute_start_time"</literal></expr></argument>, <argument pos:start="43:63" pos:end="43:66"><expr pos:start="43:63" pos:end="43:66"><name pos:start="43:63" pos:end="43:66">abss</name></expr></argument>, <argument pos:start="43:69" pos:end="43:69"><expr pos:start="43:69" pos:end="43:69"><literal type="number" pos:start="43:69" pos:end="43:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>



        <case pos:start="49:9" pos:end="49:36">case <expr pos:start="49:14" pos:end="49:35"><call pos:start="49:14" pos:end="49:35"><name pos:start="49:14" pos:end="49:18">MKTAG</name><argument_list pos:start="49:19" pos:end="49:35">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><literal type="char" pos:start="49:20" pos:end="49:22">'C'</literal></expr></argument>,<argument pos:start="49:24" pos:end="49:26"><expr pos:start="49:24" pos:end="49:26"><literal type="char" pos:start="49:24" pos:end="49:26">'H'</literal></expr></argument>,<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><literal type="char" pos:start="49:28" pos:end="49:30">'N'</literal></expr></argument>,<argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><literal type="char" pos:start="49:32" pos:end="49:34">'L'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="51:13" pos:end="53:43"><if pos:start="51:13" pos:end="53:43">if <condition pos:start="51:16" pos:end="51:25">(<expr pos:start="51:17" pos:end="51:24"><name pos:start="51:17" pos:end="51:20">size</name> <operator pos:start="51:22" pos:end="51:22">&lt;</operator> <literal type="number" pos:start="51:24" pos:end="51:24">2</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:43"><block_content pos:start="53:17" pos:end="53:43">

                <return pos:start="53:17" pos:end="53:43">return <expr pos:start="53:24" pos:end="53:42"><name pos:start="53:24" pos:end="53:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:57"><expr pos:start="55:13" pos:end="55:56"><name pos:start="55:13" pos:end="55:34"><name pos:start="55:13" pos:end="55:14">st</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:24">codecpar</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:34">channels</name></name>       <operator pos:start="55:42" pos:end="55:42">=</operator> <call pos:start="55:44" pos:end="55:56"><name pos:start="55:44" pos:end="55:52">avio_rb16</name><argument_list pos:start="55:53" pos:end="55:56">(<argument pos:start="55:54" pos:end="55:55"><expr pos:start="55:54" pos:end="55:55"><name pos:start="55:54" pos:end="55:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="59:43"><if pos:start="57:13" pos:end="59:43">if <condition pos:start="57:16" pos:end="57:54">(<expr pos:start="57:17" pos:end="57:53"><name pos:start="57:17" pos:end="57:20">size</name> <operator pos:start="57:22" pos:end="57:22">&lt;</operator> <literal type="number" pos:start="57:24" pos:end="57:26">2</literal> <operator pos:start="57:26" pos:end="57:26">+</operator> <name pos:start="57:28" pos:end="57:49"><name pos:start="57:28" pos:end="57:29">st</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:39">codecpar</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:49">channels</name></name> <operator pos:start="57:51" pos:end="57:51">*</operator> <literal type="number" pos:start="57:53" pos:end="57:53">4</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:43"><block_content pos:start="59:17" pos:end="59:43">

                <return pos:start="59:17" pos:end="59:43">return <expr pos:start="59:24" pos:end="59:42"><name pos:start="59:24" pos:end="59:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:45"><expr pos:start="61:13" pos:end="61:44"><name pos:start="61:13" pos:end="61:40"><name pos:start="61:13" pos:end="61:14">st</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:24">codecpar</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:40">channel_layout</name></name> <operator pos:start="61:42" pos:end="61:42">=</operator> <literal type="number" pos:start="61:44" pos:end="61:44">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if <condition pos:start="63:16" pos:end="63:68">(<expr pos:start="63:17" pos:end="63:67"><name pos:start="63:17" pos:end="63:38"><name pos:start="63:17" pos:end="63:18">st</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:28">codecpar</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:38">channels</name></name> <operator pos:start="63:40" pos:end="63:40">&gt;</operator> <call pos:start="63:42" pos:end="63:67"><name pos:start="63:42" pos:end="63:55">FF_ARRAY_ELEMS</name><argument_list pos:start="63:56" pos:end="63:67">(<argument pos:start="63:57" pos:end="63:66"><expr pos:start="63:57" pos:end="63:66"><name pos:start="63:57" pos:end="63:66">dsd_layout</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:70" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:22">

                <expr_stmt pos:start="65:17" pos:end="65:59"><expr pos:start="65:17" pos:end="65:58"><call pos:start="65:17" pos:end="65:58"><name pos:start="65:17" pos:end="65:37">avpriv_request_sample</name><argument_list pos:start="65:38" pos:end="65:58">(<argument pos:start="65:39" pos:end="65:39"><expr pos:start="65:39" pos:end="65:39"><name pos:start="65:39" pos:end="65:39">s</name></expr></argument>, <argument pos:start="65:42" pos:end="65:57"><expr pos:start="65:42" pos:end="65:57"><literal type="string" pos:start="65:42" pos:end="65:57">"channel layout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="67:17" pos:end="67:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <for pos:start="71:13" pos:end="73:46">for <control pos:start="71:17" pos:end="71:56">(<init pos:start="71:18" pos:end="71:23"><expr pos:start="71:18" pos:end="71:22"><name pos:start="71:18" pos:end="71:18">i</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <literal type="number" pos:start="71:22" pos:end="71:22">0</literal></expr>;</init> <condition pos:start="71:25" pos:end="71:51"><expr pos:start="71:25" pos:end="71:50"><name pos:start="71:25" pos:end="71:25">i</name> <operator pos:start="71:27" pos:end="71:27">&lt;</operator> <name pos:start="71:29" pos:end="71:50"><name pos:start="71:29" pos:end="71:30">st</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:40">codecpar</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:50">channels</name></name></expr>;</condition> <incr pos:start="71:53" pos:end="71:55"><expr pos:start="71:53" pos:end="71:55"><name pos:start="71:53" pos:end="71:53">i</name><operator pos:start="71:54" pos:end="71:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="73:17" pos:end="73:46"><block_content pos:start="73:17" pos:end="73:46">

                <expr_stmt pos:start="73:17" pos:end="73:46"><expr pos:start="73:17" pos:end="73:45"><name pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:26">dsd_layout</name><index pos:start="73:27" pos:end="73:29">[<expr pos:start="73:28" pos:end="73:28"><name pos:start="73:28" pos:end="73:28">i</name></expr>]</index></name> <operator pos:start="73:31" pos:end="73:31">=</operator> <call pos:start="73:33" pos:end="73:45"><name pos:start="73:33" pos:end="73:41">avio_rl32</name><argument_list pos:start="73:42" pos:end="73:45">(<argument pos:start="73:43" pos:end="73:44"><expr pos:start="73:43" pos:end="73:44"><name pos:start="73:43" pos:end="73:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <for pos:start="75:13" pos:end="89:13">for <control pos:start="75:17" pos:end="75:68">(<init pos:start="75:18" pos:end="75:23"><expr pos:start="75:18" pos:end="75:22"><name pos:start="75:18" pos:end="75:18">i</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <literal type="number" pos:start="75:22" pos:end="75:22">0</literal></expr>;</init> <condition pos:start="75:25" pos:end="75:63"><expr pos:start="75:25" pos:end="75:62"><name pos:start="75:25" pos:end="75:25">i</name> <operator pos:start="75:27" pos:end="75:27">&lt;</operator> <call pos:start="75:29" pos:end="75:62"><name pos:start="75:29" pos:end="75:42">FF_ARRAY_ELEMS</name><argument_list pos:start="75:43" pos:end="75:62">(<argument pos:start="75:44" pos:end="75:61"><expr pos:start="75:44" pos:end="75:61"><name pos:start="75:44" pos:end="75:61">dsd_channel_layout</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="75:65" pos:end="75:67"><expr pos:start="75:65" pos:end="75:67"><name pos:start="75:65" pos:end="75:65">i</name><operator pos:start="75:66" pos:end="75:67">++</operator></expr></incr>)</control> <block pos:start="75:70" pos:end="89:13">{<block_content pos:start="77:17" pos:end="87:17">

                <decl_stmt pos:start="77:17" pos:end="77:65"><decl pos:start="77:17" pos:end="77:64"><type pos:start="77:17" pos:end="77:37"><specifier pos:start="77:17" pos:end="77:21">const</specifier> <name pos:start="77:23" pos:end="77:35">DSDLayoutDesc</name> <modifier pos:start="77:37" pos:end="77:37">*</modifier></type> <name pos:start="77:39" pos:end="77:39">d</name> <init pos:start="77:41" pos:end="77:64">= <expr pos:start="77:43" pos:end="77:64"><operator pos:start="77:43" pos:end="77:43">&amp;</operator><name pos:start="77:44" pos:end="77:64"><name pos:start="77:44" pos:end="77:61">dsd_channel_layout</name><index pos:start="77:62" pos:end="77:64">[<expr pos:start="77:63" pos:end="77:63"><name pos:start="77:63" pos:end="77:63">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="79:17" pos:end="87:17"><if pos:start="79:17" pos:end="87:17">if <condition pos:start="79:20" pos:end="81:98">(<expr pos:start="79:21" pos:end="81:97"><call pos:start="79:21" pos:end="79:64"><name pos:start="79:21" pos:end="79:53">av_get_channel_layout_nb_channels</name><argument_list pos:start="79:54" pos:end="79:64">(<argument pos:start="79:55" pos:end="79:63"><expr pos:start="79:55" pos:end="79:63"><name pos:start="79:55" pos:end="79:63"><name pos:start="79:55" pos:end="79:55">d</name><operator pos:start="79:56" pos:end="79:57">-&gt;</operator><name pos:start="79:58" pos:end="79:63">layout</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:66" pos:end="79:67">==</operator> <name pos:start="79:69" pos:end="79:90"><name pos:start="79:69" pos:end="79:70">st</name><operator pos:start="79:71" pos:end="79:72">-&gt;</operator><name pos:start="79:73" pos:end="79:80">codecpar</name><operator pos:start="79:81" pos:end="79:82">-&gt;</operator><name pos:start="79:83" pos:end="79:90">channels</name></name> <operator pos:start="79:92" pos:end="79:93">&amp;&amp;</operator>

                    <operator pos:start="81:21" pos:end="81:21">!</operator><call pos:start="81:22" pos:end="81:97"><name pos:start="81:22" pos:end="81:27">memcmp</name><argument_list pos:start="81:28" pos:end="81:97">(<argument pos:start="81:29" pos:end="81:41"><expr pos:start="81:29" pos:end="81:41"><name pos:start="81:29" pos:end="81:41"><name pos:start="81:29" pos:end="81:29">d</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:41">dsd_layout</name></name></expr></argument>, <argument pos:start="81:44" pos:end="81:53"><expr pos:start="81:44" pos:end="81:53"><name pos:start="81:44" pos:end="81:53">dsd_layout</name></expr></argument>, <argument pos:start="81:56" pos:end="81:96"><expr pos:start="81:56" pos:end="81:96"><name pos:start="81:56" pos:end="81:77"><name pos:start="81:56" pos:end="81:57">st</name><operator pos:start="81:58" pos:end="81:59">-&gt;</operator><name pos:start="81:60" pos:end="81:67">codecpar</name><operator pos:start="81:68" pos:end="81:69">-&gt;</operator><name pos:start="81:70" pos:end="81:77">channels</name></name> <operator pos:start="81:79" pos:end="81:79">*</operator> <sizeof pos:start="81:81" pos:end="81:96">sizeof<argument_list pos:start="81:87" pos:end="81:96">(<argument pos:start="81:88" pos:end="81:95"><expr pos:start="81:88" pos:end="81:95"><name pos:start="81:88" pos:end="81:95">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:100" pos:end="87:17">{<block_content pos:start="83:21" pos:end="85:26">

                    <expr_stmt pos:start="83:21" pos:end="83:61"><expr pos:start="83:21" pos:end="83:60"><name pos:start="83:21" pos:end="83:48"><name pos:start="83:21" pos:end="83:22">st</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:32">codecpar</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:48">channel_layout</name></name> <operator pos:start="83:50" pos:end="83:50">=</operator> <name pos:start="83:52" pos:end="83:60"><name pos:start="83:52" pos:end="83:52">d</name><operator pos:start="83:53" pos:end="83:54">-&gt;</operator><name pos:start="83:55" pos:end="83:60">layout</name></name></expr>;</expr_stmt>

                    <break pos:start="85:21" pos:end="85:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <break pos:start="91:13" pos:end="91:18">break;</break>



        <case pos:start="95:9" pos:end="95:36">case <expr pos:start="95:14" pos:end="95:35"><call pos:start="95:14" pos:end="95:35"><name pos:start="95:14" pos:end="95:18">MKTAG</name><argument_list pos:start="95:19" pos:end="95:35">(<argument pos:start="95:20" pos:end="95:22"><expr pos:start="95:20" pos:end="95:22"><literal type="char" pos:start="95:20" pos:end="95:22">'C'</literal></expr></argument>,<argument pos:start="95:24" pos:end="95:26"><expr pos:start="95:24" pos:end="95:26"><literal type="char" pos:start="95:24" pos:end="95:26">'M'</literal></expr></argument>,<argument pos:start="95:28" pos:end="95:30"><expr pos:start="95:28" pos:end="95:30"><literal type="char" pos:start="95:28" pos:end="95:30">'P'</literal></expr></argument>,<argument pos:start="95:32" pos:end="95:34"><expr pos:start="95:32" pos:end="95:34"><literal type="char" pos:start="95:32" pos:end="95:34">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="97:13" pos:end="99:43"><if pos:start="97:13" pos:end="99:43">if <condition pos:start="97:16" pos:end="97:25">(<expr pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:20">size</name> <operator pos:start="97:22" pos:end="97:22">&lt;</operator> <literal type="number" pos:start="97:24" pos:end="97:24">4</literal></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:43"><block_content pos:start="99:17" pos:end="99:43">

                <return pos:start="99:17" pos:end="99:43">return <expr pos:start="99:24" pos:end="99:42"><name pos:start="99:24" pos:end="99:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:32"><expr pos:start="101:13" pos:end="101:31"><name pos:start="101:13" pos:end="101:15">tag</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:31"><name pos:start="101:19" pos:end="101:27">avio_rl32</name><argument_list pos:start="101:28" pos:end="101:31">(<argument pos:start="101:29" pos:end="101:30"><expr pos:start="101:29" pos:end="101:30"><name pos:start="101:29" pos:end="101:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:74"><expr pos:start="103:13" pos:end="103:73"><name pos:start="103:13" pos:end="103:34"><name pos:start="103:13" pos:end="103:14">st</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:24">codecpar</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:34">codec_id</name></name> <operator pos:start="103:36" pos:end="103:36">=</operator> <call pos:start="103:38" pos:end="103:73"><name pos:start="103:38" pos:end="103:52">ff_codec_get_id</name><argument_list pos:start="103:53" pos:end="103:73">(<argument pos:start="103:54" pos:end="103:67"><expr pos:start="103:54" pos:end="103:67"><name pos:start="103:54" pos:end="103:67">dsd_codec_tags</name></expr></argument>, <argument pos:start="103:70" pos:end="103:72"><expr pos:start="103:70" pos:end="103:72"><name pos:start="103:70" pos:end="103:72">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="113:13"><if pos:start="105:13" pos:end="113:13">if <condition pos:start="105:16" pos:end="105:40">(<expr pos:start="105:17" pos:end="105:39"><operator pos:start="105:17" pos:end="105:17">!</operator><name pos:start="105:18" pos:end="105:39"><name pos:start="105:18" pos:end="105:19">st</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:29">codecpar</name><operator pos:start="105:30" pos:end="105:31">-&gt;</operator><name pos:start="105:32" pos:end="105:39">codec_id</name></name></expr>)</condition> <block pos:start="105:42" pos:end="113:13">{<block_content pos:start="107:17" pos:end="111:44">

                <expr_stmt pos:start="107:17" pos:end="109:77"><expr pos:start="107:17" pos:end="109:76"><call pos:start="107:17" pos:end="109:76"><name pos:start="107:17" pos:end="107:22">av_log</name><argument_list pos:start="107:23" pos:end="109:76">(<argument pos:start="107:24" pos:end="107:24"><expr pos:start="107:24" pos:end="107:24"><name pos:start="107:24" pos:end="107:24">s</name></expr></argument>, <argument pos:start="107:27" pos:end="107:38"><expr pos:start="107:27" pos:end="107:38"><name pos:start="107:27" pos:end="107:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:41" pos:end="107:83"><expr pos:start="107:41" pos:end="107:83"><literal type="string" pos:start="107:41" pos:end="107:83">"'%c%c%c%c' compression is not supported\n"</literal></expr></argument>,

                    <argument pos:start="109:21" pos:end="109:28"><expr pos:start="109:21" pos:end="109:28"><name pos:start="109:21" pos:end="109:23">tag</name><operator pos:start="109:24" pos:end="109:24">&amp;</operator><literal type="number" pos:start="109:25" pos:end="109:28">0xFF</literal></expr></argument>, <argument pos:start="109:31" pos:end="109:43"><expr pos:start="109:31" pos:end="109:43"><operator pos:start="109:31" pos:end="109:31">(</operator><name pos:start="109:32" pos:end="109:34">tag</name><operator pos:start="109:35" pos:end="109:36">&gt;&gt;</operator><literal type="number" pos:start="109:37" pos:end="109:37">8</literal><operator pos:start="109:38" pos:end="109:38">)</operator><operator pos:start="109:39" pos:end="109:39">&amp;</operator><literal type="number" pos:start="109:40" pos:end="109:43">0xFF</literal></expr></argument>, <argument pos:start="109:46" pos:end="109:59"><expr pos:start="109:46" pos:end="109:59"><operator pos:start="109:46" pos:end="109:46">(</operator><name pos:start="109:47" pos:end="109:49">tag</name><operator pos:start="109:50" pos:end="109:51">&gt;&gt;</operator><literal type="number" pos:start="109:52" pos:end="109:53">16</literal><operator pos:start="109:54" pos:end="109:54">)</operator><operator pos:start="109:55" pos:end="109:55">&amp;</operator><literal type="number" pos:start="109:56" pos:end="109:59">0xFF</literal></expr></argument>, <argument pos:start="109:62" pos:end="109:75"><expr pos:start="109:62" pos:end="109:75"><operator pos:start="109:62" pos:end="109:62">(</operator><name pos:start="109:63" pos:end="109:65">tag</name><operator pos:start="109:66" pos:end="109:67">&gt;&gt;</operator><literal type="number" pos:start="109:68" pos:end="109:69">24</literal><operator pos:start="109:70" pos:end="109:70">)</operator><operator pos:start="109:71" pos:end="109:71">&amp;</operator><literal type="number" pos:start="109:72" pos:end="109:75">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="111:17" pos:end="111:44">return <expr pos:start="111:24" pos:end="111:43"><name pos:start="111:24" pos:end="111:43">AVERROR_PATCHWELCOME</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>



        <case pos:start="119:9" pos:end="119:36">case <expr pos:start="119:14" pos:end="119:35"><call pos:start="119:14" pos:end="119:35"><name pos:start="119:14" pos:end="119:18">MKTAG</name><argument_list pos:start="119:19" pos:end="119:35">(<argument pos:start="119:20" pos:end="119:22"><expr pos:start="119:20" pos:end="119:22"><literal type="char" pos:start="119:20" pos:end="119:22">'F'</literal></expr></argument>,<argument pos:start="119:24" pos:end="119:26"><expr pos:start="119:24" pos:end="119:26"><literal type="char" pos:start="119:24" pos:end="119:26">'S'</literal></expr></argument>,<argument pos:start="119:28" pos:end="119:30"><expr pos:start="119:28" pos:end="119:30"><literal type="char" pos:start="119:28" pos:end="119:30">' '</literal></expr></argument>,<argument pos:start="119:32" pos:end="119:34"><expr pos:start="119:32" pos:end="119:34"><literal type="char" pos:start="119:32" pos:end="119:34">' '</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="121:13" pos:end="123:43"><if pos:start="121:13" pos:end="123:43">if <condition pos:start="121:16" pos:end="121:25">(<expr pos:start="121:17" pos:end="121:24"><name pos:start="121:17" pos:end="121:20">size</name> <operator pos:start="121:22" pos:end="121:22">&lt;</operator> <literal type="number" pos:start="121:24" pos:end="121:24">4</literal></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:43"><block_content pos:start="123:17" pos:end="123:43">

                <return pos:start="123:17" pos:end="123:43">return <expr pos:start="123:24" pos:end="123:42"><name pos:start="123:24" pos:end="123:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:58"><expr pos:start="125:13" pos:end="125:57"><name pos:start="125:13" pos:end="125:37"><name pos:start="125:13" pos:end="125:14">st</name><operator pos:start="125:15" pos:end="125:16">-&gt;</operator><name pos:start="125:17" pos:end="125:24">codecpar</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:37">sample_rate</name></name> <operator pos:start="125:39" pos:end="125:39">=</operator> <call pos:start="125:41" pos:end="125:53"><name pos:start="125:41" pos:end="125:49">avio_rb32</name><argument_list pos:start="125:50" pos:end="125:53">(<argument pos:start="125:51" pos:end="125:52"><expr pos:start="125:51" pos:end="125:52"><name pos:start="125:51" pos:end="125:52">pb</name></expr></argument>)</argument_list></call> <operator pos:start="125:55" pos:end="125:55">/</operator> <literal type="number" pos:start="125:57" pos:end="125:57">8</literal></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>



        <case pos:start="131:9" pos:end="131:36">case <expr pos:start="131:14" pos:end="131:35"><call pos:start="131:14" pos:end="131:35"><name pos:start="131:14" pos:end="131:18">MKTAG</name><argument_list pos:start="131:19" pos:end="131:35">(<argument pos:start="131:20" pos:end="131:22"><expr pos:start="131:20" pos:end="131:22"><literal type="char" pos:start="131:20" pos:end="131:22">'I'</literal></expr></argument>,<argument pos:start="131:24" pos:end="131:26"><expr pos:start="131:24" pos:end="131:26"><literal type="char" pos:start="131:24" pos:end="131:26">'D'</literal></expr></argument>,<argument pos:start="131:28" pos:end="131:30"><expr pos:start="131:28" pos:end="131:30"><literal type="char" pos:start="131:28" pos:end="131:30">'3'</literal></expr></argument>,<argument pos:start="131:32" pos:end="131:34"><expr pos:start="131:32" pos:end="131:34"><literal type="char" pos:start="131:32" pos:end="131:34">' '</literal></expr></argument>)</argument_list></call></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:36"><expr pos:start="133:13" pos:end="133:35"><name pos:start="133:13" pos:end="133:28">id3v2_extra_meta</name> <operator pos:start="133:30" pos:end="133:30">=</operator> <name pos:start="133:32" pos:end="133:35">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:75"><expr pos:start="135:13" pos:end="135:74"><call pos:start="135:13" pos:end="135:74"><name pos:start="135:13" pos:end="135:25">ff_id3v2_read</name><argument_list pos:start="135:26" pos:end="135:74">(<argument pos:start="135:27" pos:end="135:27"><expr pos:start="135:27" pos:end="135:27"><name pos:start="135:27" pos:end="135:27">s</name></expr></argument>, <argument pos:start="135:30" pos:end="135:48"><expr pos:start="135:30" pos:end="135:48"><name pos:start="135:30" pos:end="135:48">ID3v2_DEFAULT_MAGIC</name></expr></argument>, <argument pos:start="135:51" pos:end="135:67"><expr pos:start="135:51" pos:end="135:67"><operator pos:start="135:51" pos:end="135:51">&amp;</operator><name pos:start="135:52" pos:end="135:67">id3v2_extra_meta</name></expr></argument>, <argument pos:start="135:70" pos:end="135:73"><expr pos:start="135:70" pos:end="135:73"><name pos:start="135:70" pos:end="135:73">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="149:13"><if pos:start="137:13" pos:end="149:13">if <condition pos:start="137:16" pos:end="137:33">(<expr pos:start="137:17" pos:end="137:32"><name pos:start="137:17" pos:end="137:32">id3v2_extra_meta</name></expr>)</condition> <block pos:start="137:35" pos:end="149:13">{<block_content pos:start="139:17" pos:end="147:60">

                <if_stmt pos:start="139:17" pos:end="145:17"><if pos:start="139:17" pos:end="145:17">if <condition pos:start="139:20" pos:end="139:74">(<expr pos:start="139:21" pos:end="139:73"><operator pos:start="139:21" pos:end="139:21">(</operator><name pos:start="139:22" pos:end="139:24">ret</name> <operator pos:start="139:26" pos:end="139:26">=</operator> <call pos:start="139:28" pos:end="139:68"><name pos:start="139:28" pos:end="139:46">ff_id3v2_parse_apic</name><argument_list pos:start="139:47" pos:end="139:68">(<argument pos:start="139:48" pos:end="139:48"><expr pos:start="139:48" pos:end="139:48"><name pos:start="139:48" pos:end="139:48">s</name></expr></argument>, <argument pos:start="139:51" pos:end="139:67"><expr pos:start="139:51" pos:end="139:67"><operator pos:start="139:51" pos:end="139:51">&amp;</operator><name pos:start="139:52" pos:end="139:67">id3v2_extra_meta</name></expr></argument>)</argument_list></call><operator pos:start="139:69" pos:end="139:69">)</operator> <operator pos:start="139:71" pos:end="139:71">&lt;</operator> <literal type="number" pos:start="139:73" pos:end="139:73">0</literal></expr>)</condition> <block pos:start="139:76" pos:end="145:17">{<block_content pos:start="141:21" pos:end="143:31">

                    <expr_stmt pos:start="141:21" pos:end="141:64"><expr pos:start="141:21" pos:end="141:63"><call pos:start="141:21" pos:end="141:63"><name pos:start="141:21" pos:end="141:44">ff_id3v2_free_extra_meta</name><argument_list pos:start="141:45" pos:end="141:63">(<argument pos:start="141:46" pos:end="141:62"><expr pos:start="141:46" pos:end="141:62"><operator pos:start="141:46" pos:end="141:46">&amp;</operator><name pos:start="141:47" pos:end="141:62">id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="143:21" pos:end="143:31">return <expr pos:start="143:28" pos:end="143:30"><name pos:start="143:28" pos:end="143:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:60"><expr pos:start="147:17" pos:end="147:59"><call pos:start="147:17" pos:end="147:59"><name pos:start="147:17" pos:end="147:40">ff_id3v2_free_extra_meta</name><argument_list pos:start="147:41" pos:end="147:59">(<argument pos:start="147:42" pos:end="147:58"><expr pos:start="147:42" pos:end="147:58"><operator pos:start="147:42" pos:end="147:42">&amp;</operator><name pos:start="147:43" pos:end="147:58">id3v2_extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:48">(<expr pos:start="153:17" pos:end="153:47"><name pos:start="153:17" pos:end="153:20">size</name> <operator pos:start="153:22" pos:end="153:22">&lt;</operator> <call pos:start="153:24" pos:end="153:36"><name pos:start="153:24" pos:end="153:32">avio_tell</name><argument_list pos:start="153:33" pos:end="153:36">(<argument pos:start="153:34" pos:end="153:35"><expr pos:start="153:34" pos:end="153:35"><name pos:start="153:34" pos:end="153:35">pb</name></expr></argument>)</argument_list></call> <operator pos:start="153:38" pos:end="153:38">-</operator> <name pos:start="153:40" pos:end="153:47">orig_pos</name></expr>)</condition> <block pos:start="153:50" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:43">

                <expr_stmt pos:start="155:17" pos:end="155:68"><expr pos:start="155:17" pos:end="155:67"><call pos:start="155:17" pos:end="155:67"><name pos:start="155:17" pos:end="155:22">av_log</name><argument_list pos:start="155:23" pos:end="155:67">(<argument pos:start="155:24" pos:end="155:24"><expr pos:start="155:24" pos:end="155:24"><name pos:start="155:24" pos:end="155:24">s</name></expr></argument>, <argument pos:start="155:27" pos:end="155:38"><expr pos:start="155:27" pos:end="155:38"><name pos:start="155:27" pos:end="155:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:41" pos:end="155:66"><expr pos:start="155:41" pos:end="155:66"><literal type="string" pos:start="155:41" pos:end="155:66">"id3 exceeds chunk size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="157:17" pos:end="157:43">return <expr pos:start="157:24" pos:end="157:42"><name pos:start="157:24" pos:end="157:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="161:13" pos:end="161:18">break;</break>



        <case pos:start="165:9" pos:end="165:36">case <expr pos:start="165:14" pos:end="165:35"><call pos:start="165:14" pos:end="165:35"><name pos:start="165:14" pos:end="165:18">MKTAG</name><argument_list pos:start="165:19" pos:end="165:35">(<argument pos:start="165:20" pos:end="165:22"><expr pos:start="165:20" pos:end="165:22"><literal type="char" pos:start="165:20" pos:end="165:22">'L'</literal></expr></argument>,<argument pos:start="165:24" pos:end="165:26"><expr pos:start="165:24" pos:end="165:26"><literal type="char" pos:start="165:24" pos:end="165:26">'S'</literal></expr></argument>,<argument pos:start="165:28" pos:end="165:30"><expr pos:start="165:28" pos:end="165:30"><literal type="char" pos:start="165:28" pos:end="165:30">'C'</literal></expr></argument>,<argument pos:start="165:32" pos:end="165:34"><expr pos:start="165:32" pos:end="165:34"><literal type="char" pos:start="165:32" pos:end="165:34">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="167:13" pos:end="169:43"><if pos:start="167:13" pos:end="169:43">if <condition pos:start="167:16" pos:end="167:25">(<expr pos:start="167:17" pos:end="167:24"><name pos:start="167:17" pos:end="167:20">size</name> <operator pos:start="167:22" pos:end="167:22">&lt;</operator> <literal type="number" pos:start="167:24" pos:end="167:24">2</literal></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:43"><block_content pos:start="169:17" pos:end="169:43">

                <return pos:start="169:17" pos:end="169:43">return <expr pos:start="169:24" pos:end="169:42"><name pos:start="169:24" pos:end="169:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:35"><expr pos:start="171:13" pos:end="171:34"><name pos:start="171:13" pos:end="171:18">config</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <call pos:start="171:22" pos:end="171:34"><name pos:start="171:22" pos:end="171:30">avio_rb16</name><argument_list pos:start="171:31" pos:end="171:34">(<argument pos:start="171:32" pos:end="171:33"><expr pos:start="171:32" pos:end="171:33"><name pos:start="171:32" pos:end="171:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="183:13"><if pos:start="173:13" pos:end="183:13">if <condition pos:start="173:16" pos:end="173:33">(<expr pos:start="173:17" pos:end="173:32"><name pos:start="173:17" pos:end="173:22">config</name> <operator pos:start="173:24" pos:end="173:25">!=</operator> <literal type="number" pos:start="173:27" pos:end="173:32">0xFFFF</literal></expr>)</condition> <block pos:start="173:35" pos:end="183:13">{<block_content pos:start="175:17" pos:end="181:85">

                <if_stmt pos:start="175:17" pos:end="177:82"><if pos:start="175:17" pos:end="177:82">if <condition pos:start="175:20" pos:end="175:68">(<expr pos:start="175:21" pos:end="175:67"><name pos:start="175:21" pos:end="175:26">config</name> <operator pos:start="175:28" pos:end="175:28">&lt;</operator> <call pos:start="175:30" pos:end="175:67"><name pos:start="175:30" pos:end="175:43">FF_ARRAY_ELEMS</name><argument_list pos:start="175:44" pos:end="175:67">(<argument pos:start="175:45" pos:end="175:66"><expr pos:start="175:45" pos:end="175:66"><name pos:start="175:45" pos:end="175:66">dsd_loudspeaker_config</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="177:21" pos:end="177:82"><block_content pos:start="177:21" pos:end="177:82">

                    <expr_stmt pos:start="177:21" pos:end="177:82"><expr pos:start="177:21" pos:end="177:81"><name pos:start="177:21" pos:end="177:48"><name pos:start="177:21" pos:end="177:22">st</name><operator pos:start="177:23" pos:end="177:24">-&gt;</operator><name pos:start="177:25" pos:end="177:32">codecpar</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:48">channel_layout</name></name> <operator pos:start="177:50" pos:end="177:50">=</operator> <name pos:start="177:52" pos:end="177:81"><name pos:start="177:52" pos:end="177:73">dsd_loudspeaker_config</name><index pos:start="177:74" pos:end="177:81">[<expr pos:start="177:75" pos:end="177:80"><name pos:start="177:75" pos:end="177:80">config</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="179:17" pos:end="181:85"><if pos:start="179:17" pos:end="181:85">if <condition pos:start="179:20" pos:end="179:50">(<expr pos:start="179:21" pos:end="179:49"><operator pos:start="179:21" pos:end="179:21">!</operator><name pos:start="179:22" pos:end="179:49"><name pos:start="179:22" pos:end="179:23">st</name><operator pos:start="179:24" pos:end="179:25">-&gt;</operator><name pos:start="179:26" pos:end="179:33">codecpar</name><operator pos:start="179:34" pos:end="179:35">-&gt;</operator><name pos:start="179:36" pos:end="179:49">channel_layout</name></name></expr>)</condition><block type="pseudo" pos:start="181:21" pos:end="181:85"><block_content pos:start="181:21" pos:end="181:85">

                    <expr_stmt pos:start="181:21" pos:end="181:85"><expr pos:start="181:21" pos:end="181:84"><call pos:start="181:21" pos:end="181:84"><name pos:start="181:21" pos:end="181:41">avpriv_request_sample</name><argument_list pos:start="181:42" pos:end="181:84">(<argument pos:start="181:43" pos:end="181:43"><expr pos:start="181:43" pos:end="181:43"><name pos:start="181:43" pos:end="181:43">s</name></expr></argument>, <argument pos:start="181:46" pos:end="181:75"><expr pos:start="181:46" pos:end="181:75"><literal type="string" pos:start="181:46" pos:end="181:75">"loudspeaker configuration %d"</literal></expr></argument>, <argument pos:start="181:78" pos:end="181:83"><expr pos:start="181:78" pos:end="181:83"><name pos:start="181:78" pos:end="181:83">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="191:9" pos:end="191:70"><expr pos:start="191:9" pos:end="191:69"><call pos:start="191:9" pos:end="191:69"><name pos:start="191:9" pos:end="191:17">avio_skip</name><argument_list pos:start="191:18" pos:end="191:69">(<argument pos:start="191:19" pos:end="191:20"><expr pos:start="191:19" pos:end="191:20"><name pos:start="191:19" pos:end="191:20">pb</name></expr></argument>, <argument pos:start="191:23" pos:end="191:68"><expr pos:start="191:23" pos:end="191:68"><name pos:start="191:23" pos:end="191:26">size</name> <operator pos:start="191:28" pos:end="191:28">-</operator> <operator pos:start="191:30" pos:end="191:30">(</operator><call pos:start="191:31" pos:end="191:43"><name pos:start="191:31" pos:end="191:39">avio_tell</name><argument_list pos:start="191:40" pos:end="191:43">(<argument pos:start="191:41" pos:end="191:42"><expr pos:start="191:41" pos:end="191:42"><name pos:start="191:41" pos:end="191:42">pb</name></expr></argument>)</argument_list></call> <operator pos:start="191:45" pos:end="191:45">-</operator> <name pos:start="191:47" pos:end="191:54">orig_pos</name><operator pos:start="191:55" pos:end="191:55">)</operator> <operator pos:start="191:57" pos:end="191:57">+</operator> <operator pos:start="191:59" pos:end="191:59">(</operator><name pos:start="191:60" pos:end="191:63">size</name> <operator pos:start="191:65" pos:end="191:65">&amp;</operator> <literal type="number" pos:start="191:67" pos:end="191:67">1</literal><operator pos:start="191:68" pos:end="191:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="197:5" pos:end="197:13">return <expr pos:start="197:12" pos:end="197:12"><literal type="number" pos:start="197:12" pos:end="197:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
