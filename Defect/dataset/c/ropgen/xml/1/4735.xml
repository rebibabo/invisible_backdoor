<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4735.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">ff_slice_thread_free</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:43">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">SliceThreadContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:25">c</name> <init pos:start="5:27" pos:end="5:55">= <expr pos:start="5:29" pos:end="5:55"><name pos:start="5:29" pos:end="5:55"><name pos:start="5:29" pos:end="5:33">avctx</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">internal</name><operator pos:start="5:44" pos:end="5:45">-&gt;</operator><name pos:start="5:46" pos:end="5:55">thread_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:45"><expr pos:start="11:5" pos:end="11:44"><call pos:start="11:5" pos:end="11:44"><name pos:start="11:5" pos:end="11:22">pthread_mutex_lock</name><argument_list pos:start="11:23" pos:end="11:44">(<argument pos:start="11:24" pos:end="11:43"><expr pos:start="11:24" pos:end="11:43"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:43"><name pos:start="11:25" pos:end="11:25">c</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:43">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:16"><expr pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:5">c</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:11">done</name></name> <operator pos:start="13:13" pos:end="13:13">=</operator> <literal type="number" pos:start="13:15" pos:end="13:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:49"><expr pos:start="15:5" pos:end="15:48"><call pos:start="15:5" pos:end="15:48"><name pos:start="15:5" pos:end="15:26">pthread_cond_broadcast</name><argument_list pos:start="15:27" pos:end="15:48">(<argument pos:start="15:28" pos:end="15:47"><expr pos:start="15:28" pos:end="15:47"><operator pos:start="15:28" pos:end="15:28">&amp;</operator><name pos:start="15:29" pos:end="15:47"><name pos:start="15:29" pos:end="15:29">c</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:47">current_job_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="19:53">for <control pos:start="17:9" pos:end="17:41">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:36"><expr pos:start="17:17" pos:end="17:35"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:35"><name pos:start="17:21" pos:end="17:21">c</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:35">thread_count</name></name></expr>;</condition> <incr pos:start="17:38" pos:end="17:40"><expr pos:start="17:38" pos:end="17:40"><name pos:start="17:38" pos:end="17:38">i</name><operator pos:start="17:39" pos:end="17:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="19:9" pos:end="19:53"><block_content pos:start="19:9" pos:end="19:53">

        <expr_stmt pos:start="19:9" pos:end="19:53"><expr pos:start="19:9" pos:end="19:52"><call pos:start="19:9" pos:end="19:52"><name pos:start="19:9" pos:end="19:30">pthread_cond_broadcast</name><argument_list pos:start="19:31" pos:end="19:52">(<argument pos:start="19:32" pos:end="19:51"><expr pos:start="19:32" pos:end="19:51"><operator pos:start="19:32" pos:end="19:32">&amp;</operator><name pos:start="19:33" pos:end="19:51"><name pos:start="19:33" pos:end="19:33">c</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:48">progress_cond</name><index pos:start="19:49" pos:end="19:51">[<expr pos:start="19:50" pos:end="19:50"><name pos:start="19:50" pos:end="19:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><call pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:24">pthread_mutex_unlock</name><argument_list pos:start="21:25" pos:end="21:46">(<argument pos:start="21:26" pos:end="21:45"><expr pos:start="21:26" pos:end="21:45"><operator pos:start="21:26" pos:end="21:26">&amp;</operator><name pos:start="21:27" pos:end="21:45"><name pos:start="21:27" pos:end="21:27">c</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:45">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="25:5" pos:end="27:43">for <control pos:start="25:9" pos:end="25:41">(<init pos:start="25:10" pos:end="25:13"><expr pos:start="25:10" pos:end="25:12"><name pos:start="25:10" pos:end="25:10">i</name><operator pos:start="25:11" pos:end="25:11">=</operator><literal type="number" pos:start="25:12" pos:end="25:12">0</literal></expr>;</init> <condition pos:start="25:15" pos:end="25:36"><expr pos:start="25:15" pos:end="25:35"><name pos:start="25:15" pos:end="25:15">i</name><operator pos:start="25:16" pos:end="25:16">&lt;</operator><name pos:start="25:17" pos:end="25:35"><name pos:start="25:17" pos:end="25:21">avctx</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:35">thread_count</name></name></expr>;</condition> <incr pos:start="25:38" pos:end="25:40"><expr pos:start="25:38" pos:end="25:40"><name pos:start="25:38" pos:end="25:38">i</name><operator pos:start="25:39" pos:end="25:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:10" pos:end="27:43"><block_content pos:start="27:10" pos:end="27:43">

         <expr_stmt pos:start="27:10" pos:end="27:43"><expr pos:start="27:10" pos:end="27:42"><call pos:start="27:10" pos:end="27:42"><name pos:start="27:10" pos:end="27:21">pthread_join</name><argument_list pos:start="27:22" pos:end="27:42">(<argument pos:start="27:23" pos:end="27:35"><expr pos:start="27:23" pos:end="27:35"><name pos:start="27:23" pos:end="27:35"><name pos:start="27:23" pos:end="27:23">c</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:32">workers</name><index pos:start="27:33" pos:end="27:35">[<expr pos:start="27:34" pos:end="27:34"><name pos:start="27:34" pos:end="27:34">i</name></expr>]</index></name></expr></argument>, <argument pos:start="27:38" pos:end="27:41"><expr pos:start="27:38" pos:end="27:41"><name pos:start="27:38" pos:end="27:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <for pos:start="31:5" pos:end="37:5">for <control pos:start="31:9" pos:end="31:41">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:36"><expr pos:start="31:17" pos:end="31:35"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:35"><name pos:start="31:21" pos:end="31:21">c</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:35">thread_count</name></name></expr>;</condition> <incr pos:start="31:38" pos:end="31:40"><expr pos:start="31:38" pos:end="31:40"><name pos:start="31:38" pos:end="31:38">i</name><operator pos:start="31:39" pos:end="31:40">++</operator></expr></incr>)</control> <block pos:start="31:43" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:51">

        <expr_stmt pos:start="33:9" pos:end="33:53"><expr pos:start="33:9" pos:end="33:52"><call pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:29">pthread_mutex_destroy</name><argument_list pos:start="33:30" pos:end="33:52">(<argument pos:start="33:31" pos:end="33:51"><expr pos:start="33:31" pos:end="33:51"><operator pos:start="33:31" pos:end="33:31">&amp;</operator><name pos:start="33:32" pos:end="33:51"><name pos:start="33:32" pos:end="33:32">c</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:48">progress_mutex</name><index pos:start="33:49" pos:end="33:51">[<expr pos:start="33:50" pos:end="33:50"><name pos:start="33:50" pos:end="33:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:51"><expr pos:start="35:9" pos:end="35:50"><call pos:start="35:9" pos:end="35:50"><name pos:start="35:9" pos:end="35:28">pthread_cond_destroy</name><argument_list pos:start="35:29" pos:end="35:50">(<argument pos:start="35:30" pos:end="35:49"><expr pos:start="35:30" pos:end="35:49"><operator pos:start="35:30" pos:end="35:30">&amp;</operator><name pos:start="35:31" pos:end="35:49"><name pos:start="35:31" pos:end="35:31">c</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:46">progress_cond</name><index pos:start="35:47" pos:end="35:49">[<expr pos:start="35:48" pos:end="35:48"><name pos:start="35:48" pos:end="35:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><call pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:25">pthread_mutex_destroy</name><argument_list pos:start="41:26" pos:end="41:47">(<argument pos:start="41:27" pos:end="41:46"><expr pos:start="41:27" pos:end="41:46"><operator pos:start="41:27" pos:end="41:27">&amp;</operator><name pos:start="41:28" pos:end="41:46"><name pos:start="41:28" pos:end="41:28">c</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:46">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><call pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:24">pthread_cond_destroy</name><argument_list pos:start="43:25" pos:end="43:46">(<argument pos:start="43:26" pos:end="43:45"><expr pos:start="43:26" pos:end="43:45"><operator pos:start="43:26" pos:end="43:26">&amp;</operator><name pos:start="43:27" pos:end="43:45"><name pos:start="43:27" pos:end="43:27">c</name><operator pos:start="43:28" pos:end="43:29">-&gt;</operator><name pos:start="43:30" pos:end="43:45">current_job_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><call pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:24">pthread_cond_destroy</name><argument_list pos:start="45:25" pos:end="45:43">(<argument pos:start="45:26" pos:end="45:42"><expr pos:start="45:26" pos:end="45:42"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:42"><name pos:start="45:27" pos:end="45:27">c</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:42">last_job_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><call pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:12">av_freep</name><argument_list pos:start="49:13" pos:end="49:25">(<argument pos:start="49:14" pos:end="49:24"><expr pos:start="49:14" pos:end="49:24"><operator pos:start="49:14" pos:end="49:14">&amp;</operator><name pos:start="49:15" pos:end="49:24"><name pos:start="49:15" pos:end="49:15">c</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:24">entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:33"><expr pos:start="51:5" pos:end="51:32"><call pos:start="51:5" pos:end="51:32"><name pos:start="51:5" pos:end="51:12">av_freep</name><argument_list pos:start="51:13" pos:end="51:32">(<argument pos:start="51:14" pos:end="51:31"><expr pos:start="51:14" pos:end="51:31"><operator pos:start="51:14" pos:end="51:14">&amp;</operator><name pos:start="51:15" pos:end="51:31"><name pos:start="51:15" pos:end="51:15">c</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:31">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><call pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:12">av_freep</name><argument_list pos:start="53:13" pos:end="53:31">(<argument pos:start="53:14" pos:end="53:30"><expr pos:start="53:14" pos:end="53:30"><operator pos:start="53:14" pos:end="53:14">&amp;</operator><name pos:start="53:15" pos:end="53:30"><name pos:start="53:15" pos:end="53:15">c</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:30">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><call pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:12">av_freep</name><argument_list pos:start="57:13" pos:end="57:25">(<argument pos:start="57:14" pos:end="57:24"><expr pos:start="57:14" pos:end="57:24"><operator pos:start="57:14" pos:end="57:14">&amp;</operator><name pos:start="57:15" pos:end="57:24"><name pos:start="57:15" pos:end="57:15">c</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:24">workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:12">av_freep</name><argument_list pos:start="59:13" pos:end="59:42">(<argument pos:start="59:14" pos:end="59:41"><expr pos:start="59:14" pos:end="59:41"><operator pos:start="59:14" pos:end="59:14">&amp;</operator><name pos:start="59:15" pos:end="59:41"><name pos:start="59:15" pos:end="59:19">avctx</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:29">internal</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:41">thread_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
