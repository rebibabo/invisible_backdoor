<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25655.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">ide_atapi_cmd_reply_end</name><parameter_list pos:start="1:29" pos:end="1:41">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:37">IDEState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:5">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:24">byte_count_limit</name></decl>, <decl pos:start="5:27" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:27" pos:end="5:30">size</name></decl>, <decl pos:start="5:33" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:33" pos:end="5:35">ret</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:22">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

    <expr_stmt pos:start="9:5" pos:end="18:0"><expr pos:start="9:5" pos:end="15:30"><call pos:start="9:5" pos:end="15:30"><name pos:start="9:5" pos:end="9:10">printf</name><argument_list pos:start="9:11" pos:end="15:30">(<argument pos:start="9:12" pos:end="9:57"><expr pos:start="9:12" pos:end="9:57"><literal type="string" pos:start="9:12" pos:end="9:57">"reply: tx_size=%d elem_tx_size=%d index=%d\n"</literal></expr></argument>,

           <argument pos:start="11:12" pos:end="11:34"><expr pos:start="11:12" pos:end="11:34"><name pos:start="11:12" pos:end="11:34"><name pos:start="11:12" pos:end="11:12">s</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:34">packet_transfer_size</name></name></expr></argument>,

           <argument pos:start="13:12" pos:end="13:38"><expr pos:start="13:12" pos:end="13:38"><name pos:start="13:12" pos:end="13:38"><name pos:start="13:12" pos:end="13:12">s</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:38">elementary_transfer_size</name></name></expr></argument>,

           <argument pos:start="15:12" pos:end="15:29"><expr pos:start="15:12" pos:end="15:29"><name pos:start="15:12" pos:end="15:29"><name pos:start="15:12" pos:end="15:12">s</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:29">io_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="19:5" pos:end="141:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="19:37">(<expr pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:31">packet_transfer_size</name></name> <operator pos:start="19:33" pos:end="19:34">&lt;=</operator> <literal type="number" pos:start="19:36" pos:end="19:36">0</literal></expr>)</condition> <block pos:start="19:39" pos:end="33:5">{<block_content pos:start="23:9" pos:end="32:0">

        <comment type="block" pos:start="21:9" pos:end="21:29">/* end of transfer */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><call pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:24">ide_atapi_cmd_ok</name><argument_list pos:start="23:25" pos:end="23:27">(<argument pos:start="23:26" pos:end="23:26"><expr pos:start="23:26" pos:end="23:26"><name pos:start="23:26" pos:end="23:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="28:0"><expr pos:start="25:9" pos:end="25:27"><call pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:19">ide_set_irq</name><argument_list pos:start="25:20" pos:end="25:27">(<argument pos:start="25:21" pos:end="25:26"><expr pos:start="25:21" pos:end="25:26"><name pos:start="25:21" pos:end="25:26"><name pos:start="25:21" pos:end="25:21">s</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="27:1" pos:end="27:22">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

        <expr_stmt pos:start="29:9" pos:end="32:0"><expr pos:start="29:9" pos:end="29:42"><call pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:14">printf</name><argument_list pos:start="29:15" pos:end="29:42">(<argument pos:start="29:16" pos:end="29:30"><expr pos:start="29:16" pos:end="29:30"><literal type="string" pos:start="29:16" pos:end="29:30">"status=0x%x\n"</literal></expr></argument>, <argument pos:start="29:33" pos:end="29:41"><expr pos:start="29:33" pos:end="29:41"><name pos:start="29:33" pos:end="29:41"><name pos:start="29:33" pos:end="29:33">s</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:41">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="141:5">else <block pos:start="33:12" pos:end="141:5">{<block_content pos:start="37:9" pos:end="139:9">

        <comment type="block" pos:start="35:9" pos:end="35:46">/* see if a new sector must be read */</comment>

        <if_stmt pos:start="37:9" pos:end="53:9"><if pos:start="37:9" pos:end="53:9">if <condition pos:start="37:12" pos:end="37:68">(<expr pos:start="37:13" pos:end="37:67"><name pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:18">lba</name></name> <operator pos:start="37:20" pos:end="37:21">!=</operator> <operator pos:start="37:23" pos:end="37:23">-</operator><literal type="number" pos:start="37:24" pos:end="37:24">1</literal> <operator pos:start="37:26" pos:end="37:27">&amp;&amp;</operator> <name pos:start="37:29" pos:end="37:46"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:46">io_buffer_index</name></name> <operator pos:start="37:48" pos:end="37:49">&gt;=</operator> <name pos:start="37:51" pos:end="37:67"><name pos:start="37:51" pos:end="37:51">s</name><operator pos:start="37:52" pos:end="37:53">-&gt;</operator><name pos:start="37:54" pos:end="37:67">cd_sector_size</name></name></expr>)</condition> <block pos:start="37:70" pos:end="53:9">{<block_content pos:start="39:13" pos:end="51:35">

            <expr_stmt pos:start="39:13" pos:end="39:77"><expr pos:start="39:13" pos:end="39:76"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:76"><name pos:start="39:19" pos:end="39:32">cd_read_sector</name><argument_list pos:start="39:33" pos:end="39:76">(<argument pos:start="39:34" pos:end="39:34"><expr pos:start="39:34" pos:end="39:34"><name pos:start="39:34" pos:end="39:34">s</name></expr></argument>, <argument pos:start="39:37" pos:end="39:42"><expr pos:start="39:37" pos:end="39:42"><name pos:start="39:37" pos:end="39:42"><name pos:start="39:37" pos:end="39:37">s</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:42">lba</name></name></expr></argument>, <argument pos:start="39:45" pos:end="39:56"><expr pos:start="39:45" pos:end="39:56"><name pos:start="39:45" pos:end="39:56"><name pos:start="39:45" pos:end="39:45">s</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:56">io_buffer</name></name></expr></argument>, <argument pos:start="39:59" pos:end="39:75"><expr pos:start="39:59" pos:end="39:75"><name pos:start="39:59" pos:end="39:75"><name pos:start="39:59" pos:end="39:59">s</name><operator pos:start="39:60" pos:end="39:61">-&gt;</operator><name pos:start="39:62" pos:end="39:75">cd_sector_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="47:13"><if pos:start="41:13" pos:end="47:13">if <condition pos:start="41:16" pos:end="41:24">(<expr pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:19">ret</name> <operator pos:start="41:21" pos:end="41:21">&lt;</operator> <literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr>)</condition> <block pos:start="41:26" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:23">

                <expr_stmt pos:start="43:17" pos:end="43:43"><expr pos:start="43:17" pos:end="43:42"><call pos:start="43:17" pos:end="43:42"><name pos:start="43:17" pos:end="43:34">ide_atapi_io_error</name><argument_list pos:start="43:35" pos:end="43:42">(<argument pos:start="43:36" pos:end="43:36"><expr pos:start="43:36" pos:end="43:36"><name pos:start="43:36" pos:end="43:36">s</name></expr></argument>, <argument pos:start="43:39" pos:end="43:41"><expr pos:start="43:39" pos:end="43:41"><name pos:start="43:39" pos:end="43:41">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="45:17" pos:end="45:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:21"><expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:18">lba</name></name><operator pos:start="49:19" pos:end="49:20">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:35"><expr pos:start="51:13" pos:end="51:34"><name pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:30">io_buffer_index</name></name> <operator pos:start="51:32" pos:end="51:32">=</operator> <literal type="number" pos:start="51:34" pos:end="51:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="139:9"><if pos:start="55:9" pos:end="77:9">if <condition pos:start="55:12" pos:end="55:44">(<expr pos:start="55:13" pos:end="55:43"><name pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:39">elementary_transfer_size</name></name> <operator pos:start="55:41" pos:end="55:41">&gt;</operator> <literal type="number" pos:start="55:43" pos:end="55:43">0</literal></expr>)</condition> <block pos:start="55:46" pos:end="77:9">{<block_content pos:start="61:13" pos:end="75:62">

            <comment type="block" pos:start="57:13" pos:end="59:26">/* there are some data left to transmit in this elementary

               transfer */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:58"><expr pos:start="61:13" pos:end="61:57"><name pos:start="61:13" pos:end="61:16">size</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:36"><name pos:start="61:20" pos:end="61:20">s</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:36">cd_sector_size</name></name> <operator pos:start="61:38" pos:end="61:38">-</operator> <name pos:start="61:40" pos:end="61:57"><name pos:start="61:40" pos:end="61:40">s</name><operator pos:start="61:41" pos:end="61:42">-&gt;</operator><name pos:start="61:43" pos:end="61:57">io_buffer_index</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="65:51"><if pos:start="63:13" pos:end="65:51">if <condition pos:start="63:16" pos:end="63:51">(<expr pos:start="63:17" pos:end="63:50"><name pos:start="63:17" pos:end="63:20">size</name> <operator pos:start="63:22" pos:end="63:22">&gt;</operator> <name pos:start="63:24" pos:end="63:50"><name pos:start="63:24" pos:end="63:24">s</name><operator pos:start="63:25" pos:end="63:26">-&gt;</operator><name pos:start="63:27" pos:end="63:50">elementary_transfer_size</name></name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:51"><block_content pos:start="65:17" pos:end="65:51">

                <expr_stmt pos:start="65:17" pos:end="65:51"><expr pos:start="65:17" pos:end="65:50"><name pos:start="65:17" pos:end="65:20">size</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:50"><name pos:start="65:24" pos:end="65:24">s</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:50">elementary_transfer_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:44"><expr pos:start="67:13" pos:end="67:43"><name pos:start="67:13" pos:end="67:35"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:35">packet_transfer_size</name></name> <operator pos:start="67:37" pos:end="67:38">-=</operator> <name pos:start="67:40" pos:end="67:43">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:48"><expr pos:start="69:13" pos:end="69:47"><name pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:39">elementary_transfer_size</name></name> <operator pos:start="69:41" pos:end="69:42">-=</operator> <name pos:start="69:44" pos:end="69:47">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:39"><expr pos:start="71:13" pos:end="71:38"><name pos:start="71:13" pos:end="71:30"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:30">io_buffer_index</name></name> <operator pos:start="71:32" pos:end="71:33">+=</operator> <name pos:start="71:35" pos:end="71:38">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="75:62"><expr pos:start="73:13" pos:end="75:61"><call pos:start="73:13" pos:end="75:61"><name pos:start="73:13" pos:end="73:30">ide_transfer_start</name><argument_list pos:start="73:31" pos:end="75:61">(<argument pos:start="73:32" pos:end="73:32"><expr pos:start="73:32" pos:end="73:32"><name pos:start="73:32" pos:end="73:32">s</name></expr></argument>, <argument pos:start="73:35" pos:end="73:74"><expr pos:start="73:35" pos:end="73:74"><name pos:start="73:35" pos:end="73:46"><name pos:start="73:35" pos:end="73:35">s</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:46">io_buffer</name></name> <operator pos:start="73:48" pos:end="73:48">+</operator> <name pos:start="73:50" pos:end="73:67"><name pos:start="73:50" pos:end="73:50">s</name><operator pos:start="73:51" pos:end="73:52">-&gt;</operator><name pos:start="73:53" pos:end="73:67">io_buffer_index</name></name> <operator pos:start="73:69" pos:end="73:69">-</operator> <name pos:start="73:71" pos:end="73:74">size</name></expr></argument>,

                               <argument pos:start="75:32" pos:end="75:35"><expr pos:start="75:32" pos:end="75:35"><name pos:start="75:32" pos:end="75:35">size</name></expr></argument>, <argument pos:start="75:38" pos:end="75:60"><expr pos:start="75:38" pos:end="75:60"><name pos:start="75:38" pos:end="75:60">ide_atapi_cmd_reply_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="139:9">else <block pos:start="77:16" pos:end="139:9">{<block_content pos:start="81:13" pos:end="138:0">

            <comment type="block" pos:start="79:13" pos:end="79:42">/* a new transfer is needed */</comment>

            <expr_stmt pos:start="81:13" pos:end="81:65"><expr pos:start="81:13" pos:end="81:64"><name pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:22">nsector</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <operator pos:start="81:26" pos:end="81:26">(</operator><name pos:start="81:27" pos:end="81:36"><name pos:start="81:27" pos:end="81:27">s</name><operator pos:start="81:28" pos:end="81:29">-&gt;</operator><name pos:start="81:30" pos:end="81:36">nsector</name></name> <operator pos:start="81:38" pos:end="81:38">&amp;</operator> <operator pos:start="81:40" pos:end="81:40">~</operator><literal type="number" pos:start="81:41" pos:end="81:41">7</literal><operator pos:start="81:42" pos:end="81:42">)</operator> <operator pos:start="81:44" pos:end="81:44">|</operator> <name pos:start="81:46" pos:end="81:64">ATAPI_INT_REASON_IO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="86:0"><expr pos:start="83:13" pos:end="83:56"><name pos:start="83:13" pos:end="83:28">byte_count_limit</name> <operator pos:start="83:30" pos:end="83:30">=</operator> <call pos:start="83:32" pos:end="83:56"><name pos:start="83:32" pos:end="83:53">atapi_byte_count_limit</name><argument_list pos:start="83:54" pos:end="83:56">(<argument pos:start="83:55" pos:end="83:55"><expr pos:start="83:55" pos:end="83:55"><name pos:start="83:55" pos:end="83:55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="85:1" pos:end="85:22">#<cpp:directive pos:start="85:2" pos:end="85:6">ifdef</cpp:directive> <name pos:start="85:8" pos:end="85:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

            <expr_stmt pos:start="87:13" pos:end="90:0"><expr pos:start="87:13" pos:end="87:61"><call pos:start="87:13" pos:end="87:61"><name pos:start="87:13" pos:end="87:18">printf</name><argument_list pos:start="87:19" pos:end="87:61">(<argument pos:start="87:20" pos:end="87:42"><expr pos:start="87:20" pos:end="87:42"><literal type="string" pos:start="87:20" pos:end="87:42">"byte_count_limit=%d\n"</literal></expr></argument>, <argument pos:start="87:45" pos:end="87:60"><expr pos:start="87:45" pos:end="87:60"><name pos:start="87:45" pos:end="87:60">byte_count_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="91:13" pos:end="91:43"><expr pos:start="91:13" pos:end="91:42"><name pos:start="91:13" pos:end="91:16">size</name> <operator pos:start="91:18" pos:end="91:18">=</operator> <name pos:start="91:20" pos:end="91:42"><name pos:start="91:20" pos:end="91:20">s</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:42">packet_transfer_size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="103:13"><if pos:start="93:13" pos:end="103:13">if <condition pos:start="93:16" pos:end="93:40">(<expr pos:start="93:17" pos:end="93:39"><name pos:start="93:17" pos:end="93:20">size</name> <operator pos:start="93:22" pos:end="93:22">&gt;</operator> <name pos:start="93:24" pos:end="93:39">byte_count_limit</name></expr>)</condition> <block pos:start="93:42" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:40">

                <comment type="block" pos:start="95:17" pos:end="95:64">/* byte count limit must be even if this case */</comment>

                <if_stmt pos:start="97:17" pos:end="99:39"><if pos:start="97:17" pos:end="99:39">if <condition pos:start="97:20" pos:end="97:41">(<expr pos:start="97:21" pos:end="97:40"><name pos:start="97:21" pos:end="97:36">byte_count_limit</name> <operator pos:start="97:38" pos:end="97:38">&amp;</operator> <literal type="number" pos:start="97:40" pos:end="97:40">1</literal></expr>)</condition><block type="pseudo" pos:start="99:21" pos:end="99:39"><block_content pos:start="99:21" pos:end="99:39">

                    <expr_stmt pos:start="99:21" pos:end="99:39"><expr pos:start="99:21" pos:end="99:38"><name pos:start="99:21" pos:end="99:36">byte_count_limit</name><operator pos:start="99:37" pos:end="99:38">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:40"><expr pos:start="101:17" pos:end="101:39"><name pos:start="101:17" pos:end="101:20">size</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <name pos:start="101:24" pos:end="101:39">byte_count_limit</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:27"><expr pos:start="105:13" pos:end="105:26"><name pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:19">lcyl</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <name pos:start="105:23" pos:end="105:26">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:32"><expr pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:19"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:19">hcyl</name></name> <operator pos:start="107:21" pos:end="107:21">=</operator> <name pos:start="107:23" pos:end="107:26">size</name> <operator pos:start="107:28" pos:end="107:29">&gt;&gt;</operator> <literal type="number" pos:start="107:31" pos:end="107:31">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:47"><expr pos:start="109:13" pos:end="109:46"><name pos:start="109:13" pos:end="109:39"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:39">elementary_transfer_size</name></name> <operator pos:start="109:41" pos:end="109:41">=</operator> <name pos:start="109:43" pos:end="109:46">size</name></expr>;</expr_stmt>

            <comment type="block" pos:start="111:13" pos:end="111:67">/* we cannot transmit more than one sector at a time */</comment>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:29">(<expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:22">lba</name></name> <operator pos:start="113:24" pos:end="113:25">!=</operator> <operator pos:start="113:27" pos:end="113:27">-</operator><literal type="number" pos:start="113:28" pos:end="113:28">1</literal></expr>)</condition> <block pos:start="113:31" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:68">

                <if_stmt pos:start="115:17" pos:end="117:68"><if pos:start="115:17" pos:end="117:68">if <condition pos:start="115:20" pos:end="115:68">(<expr pos:start="115:21" pos:end="115:67"><name pos:start="115:21" pos:end="115:24">size</name> <operator pos:start="115:26" pos:end="115:26">&gt;</operator> <operator pos:start="115:28" pos:end="115:28">(</operator><name pos:start="115:29" pos:end="115:45"><name pos:start="115:29" pos:end="115:29">s</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:45">cd_sector_size</name></name> <operator pos:start="115:47" pos:end="115:47">-</operator> <name pos:start="115:49" pos:end="115:66"><name pos:start="115:49" pos:end="115:49">s</name><operator pos:start="115:50" pos:end="115:51">-&gt;</operator><name pos:start="115:52" pos:end="115:66">io_buffer_index</name></name><operator pos:start="115:67" pos:end="115:67">)</operator></expr>)</condition><block type="pseudo" pos:start="117:21" pos:end="117:68"><block_content pos:start="117:21" pos:end="117:68">

                    <expr_stmt pos:start="117:21" pos:end="117:68"><expr pos:start="117:21" pos:end="117:67"><name pos:start="117:21" pos:end="117:24">size</name> <operator pos:start="117:26" pos:end="117:26">=</operator> <operator pos:start="117:28" pos:end="117:28">(</operator><name pos:start="117:29" pos:end="117:45"><name pos:start="117:29" pos:end="117:29">s</name><operator pos:start="117:30" pos:end="117:31">-&gt;</operator><name pos:start="117:32" pos:end="117:45">cd_sector_size</name></name> <operator pos:start="117:47" pos:end="117:47">-</operator> <name pos:start="117:49" pos:end="117:66"><name pos:start="117:49" pos:end="117:49">s</name><operator pos:start="117:50" pos:end="117:51">-&gt;</operator><name pos:start="117:52" pos:end="117:66">io_buffer_index</name></name><operator pos:start="117:67" pos:end="117:67">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:44"><expr pos:start="121:13" pos:end="121:43"><name pos:start="121:13" pos:end="121:35"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:35">packet_transfer_size</name></name> <operator pos:start="121:37" pos:end="121:38">-=</operator> <name pos:start="121:40" pos:end="121:43">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:48"><expr pos:start="123:13" pos:end="123:47"><name pos:start="123:13" pos:end="123:39"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:39">elementary_transfer_size</name></name> <operator pos:start="123:41" pos:end="123:42">-=</operator> <name pos:start="123:44" pos:end="123:47">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:39"><expr pos:start="125:13" pos:end="125:38"><name pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:30">io_buffer_index</name></name> <operator pos:start="125:32" pos:end="125:33">+=</operator> <name pos:start="125:35" pos:end="125:38">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="129:62"><expr pos:start="127:13" pos:end="129:61"><call pos:start="127:13" pos:end="129:61"><name pos:start="127:13" pos:end="127:30">ide_transfer_start</name><argument_list pos:start="127:31" pos:end="129:61">(<argument pos:start="127:32" pos:end="127:32"><expr pos:start="127:32" pos:end="127:32"><name pos:start="127:32" pos:end="127:32">s</name></expr></argument>, <argument pos:start="127:35" pos:end="127:74"><expr pos:start="127:35" pos:end="127:74"><name pos:start="127:35" pos:end="127:46"><name pos:start="127:35" pos:end="127:35">s</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:46">io_buffer</name></name> <operator pos:start="127:48" pos:end="127:48">+</operator> <name pos:start="127:50" pos:end="127:67"><name pos:start="127:50" pos:end="127:50">s</name><operator pos:start="127:51" pos:end="127:52">-&gt;</operator><name pos:start="127:53" pos:end="127:67">io_buffer_index</name></name> <operator pos:start="127:69" pos:end="127:69">-</operator> <name pos:start="127:71" pos:end="127:74">size</name></expr></argument>,

                               <argument pos:start="129:32" pos:end="129:35"><expr pos:start="129:32" pos:end="129:35"><name pos:start="129:32" pos:end="129:35">size</name></expr></argument>, <argument pos:start="129:38" pos:end="129:60"><expr pos:start="129:38" pos:end="129:60"><name pos:start="129:38" pos:end="129:60">ide_atapi_cmd_reply_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="134:0"><expr pos:start="131:13" pos:end="131:31"><call pos:start="131:13" pos:end="131:31"><name pos:start="131:13" pos:end="131:23">ide_set_irq</name><argument_list pos:start="131:24" pos:end="131:31">(<argument pos:start="131:25" pos:end="131:30"><expr pos:start="131:25" pos:end="131:30"><name pos:start="131:25" pos:end="131:30"><name pos:start="131:25" pos:end="131:25">s</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:30">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="133:1" pos:end="133:22">#<cpp:directive pos:start="133:2" pos:end="133:6">ifdef</cpp:directive> <name pos:start="133:8" pos:end="133:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

            <expr_stmt pos:start="135:13" pos:end="138:0"><expr pos:start="135:13" pos:end="135:46"><call pos:start="135:13" pos:end="135:46"><name pos:start="135:13" pos:end="135:18">printf</name><argument_list pos:start="135:19" pos:end="135:46">(<argument pos:start="135:20" pos:end="135:34"><expr pos:start="135:20" pos:end="135:34"><literal type="string" pos:start="135:20" pos:end="135:34">"status=0x%x\n"</literal></expr></argument>, <argument pos:start="135:37" pos:end="135:45"><expr pos:start="135:37" pos:end="135:45"><name pos:start="135:37" pos:end="135:45"><name pos:start="135:37" pos:end="135:37">s</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:45">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
