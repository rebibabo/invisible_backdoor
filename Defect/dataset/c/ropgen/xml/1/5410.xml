<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5410.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:37"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">spapr_memory_plug</name><parameter_list pos:start="1:30" pos:end="2:58">(<parameter pos:start="1:31" pos:end="1:57"><decl pos:start="1:31" pos:end="1:57"><type pos:start="1:31" pos:end="1:57"><name pos:start="1:31" pos:end="1:44">HotplugHandler</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:57">hotplug_dev</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:75"><decl pos:start="1:60" pos:end="1:75"><type pos:start="1:60" pos:end="1:75"><name pos:start="1:60" pos:end="1:70">DeviceState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:75">dev</name></decl></parameter>,
                              <parameter pos:start="2:31" pos:end="2:43"><decl pos:start="2:31" pos:end="2:43"><type pos:start="2:31" pos:end="2:43"><name pos:start="2:31" pos:end="2:38">uint32_t</name></type> <name pos:start="2:40" pos:end="2:43">node</name></decl></parameter>, <parameter pos:start="2:46" pos:end="2:57"><decl pos:start="2:46" pos:end="2:57"><type pos:start="2:46" pos:end="2:57"><name pos:start="2:46" pos:end="2:50">Error</name> <modifier pos:start="2:52" pos:end="2:52">*</modifier><modifier pos:start="2:53" pos:end="2:53">*</modifier></type><name pos:start="2:54" pos:end="2:57">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="25:37">{<block_content pos:start="4:5" pos:end="25:37">
    <decl_stmt pos:start="4:5" pos:end="4:28"><decl pos:start="4:5" pos:end="4:27"><type pos:start="4:5" pos:end="4:11"><name pos:start="4:5" pos:end="4:9">Error</name> <modifier pos:start="4:11" pos:end="4:11">*</modifier></type><name pos:start="4:12" pos:end="4:20">local_err</name> <init pos:start="4:22" pos:end="4:27">= <expr pos:start="4:24" pos:end="4:27"><name pos:start="4:24" pos:end="4:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">sPAPRMachineState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:25">ms</name> <init pos:start="5:27" pos:end="5:54">= <expr pos:start="5:29" pos:end="5:54"><call pos:start="5:29" pos:end="5:54"><name pos:start="5:29" pos:end="5:41">SPAPR_MACHINE</name><argument_list pos:start="5:42" pos:end="5:54">(<argument pos:start="5:43" pos:end="5:53"><expr pos:start="5:43" pos:end="5:53"><name pos:start="5:43" pos:end="5:53">hotplug_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:38"><decl pos:start="6:5" pos:end="6:37"><type pos:start="6:5" pos:end="6:18"><name pos:start="6:5" pos:end="6:16">PCDIMMDevice</name> <modifier pos:start="6:18" pos:end="6:18">*</modifier></type><name pos:start="6:19" pos:end="6:22">dimm</name> <init pos:start="6:24" pos:end="6:37">= <expr pos:start="6:26" pos:end="6:37"><call pos:start="6:26" pos:end="6:37"><name pos:start="6:26" pos:end="6:32">PC_DIMM</name><argument_list pos:start="6:33" pos:end="6:37">(<argument pos:start="6:34" pos:end="6:36"><expr pos:start="6:34" pos:end="6:36"><name pos:start="6:34" pos:end="6:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">PCDIMMDeviceClass</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:26">ddc</name> <init pos:start="7:28" pos:end="7:52">= <expr pos:start="7:30" pos:end="7:52"><call pos:start="7:30" pos:end="7:52"><name pos:start="7:30" pos:end="7:46">PC_DIMM_GET_CLASS</name><argument_list pos:start="7:47" pos:end="7:52">(<argument pos:start="7:48" pos:end="7:51"><expr pos:start="7:48" pos:end="7:51"><name pos:start="7:48" pos:end="7:51">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:52"><decl pos:start="8:5" pos:end="8:51"><type pos:start="8:5" pos:end="8:18"><name pos:start="8:5" pos:end="8:16">MemoryRegion</name> <modifier pos:start="8:18" pos:end="8:18">*</modifier></type><name pos:start="8:19" pos:end="8:20">mr</name> <init pos:start="8:22" pos:end="8:51">= <expr pos:start="8:24" pos:end="8:51"><call pos:start="8:24" pos:end="8:51"><name pos:start="8:24" pos:end="8:45"><name pos:start="8:24" pos:end="8:26">ddc</name><operator pos:start="8:27" pos:end="8:28">-&gt;</operator><name pos:start="8:29" pos:end="8:45">get_memory_region</name></name><argument_list pos:start="8:46" pos:end="8:51">(<argument pos:start="8:47" pos:end="8:50"><expr pos:start="8:47" pos:end="8:50"><name pos:start="8:47" pos:end="8:50">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:18">align</name> <init pos:start="9:20" pos:end="9:52">= <expr pos:start="9:22" pos:end="9:52"><call pos:start="9:22" pos:end="9:52"><name pos:start="9:22" pos:end="9:48">memory_region_get_alignment</name><argument_list pos:start="9:49" pos:end="9:52">(<argument pos:start="9:50" pos:end="9:51"><expr pos:start="9:50" pos:end="9:51"><name pos:start="9:50" pos:end="9:51">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:43"><decl pos:start="10:5" pos:end="10:42"><type pos:start="10:5" pos:end="10:12"><name pos:start="10:5" pos:end="10:12">uint64_t</name></type> <name pos:start="10:14" pos:end="10:17">size</name> <init pos:start="10:19" pos:end="10:42">= <expr pos:start="10:21" pos:end="10:42"><call pos:start="10:21" pos:end="10:42"><name pos:start="10:21" pos:end="10:38">memory_region_size</name><argument_list pos:start="10:39" pos:end="10:42">(<argument pos:start="10:40" pos:end="10:41"><expr pos:start="10:40" pos:end="10:41"><name pos:start="10:40" pos:end="10:41">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:18"><decl pos:start="12:5" pos:end="12:17"><type pos:start="12:5" pos:end="12:10"><name pos:start="12:5" pos:end="12:8">char</name> <modifier pos:start="12:10" pos:end="12:10">*</modifier></type><name pos:start="12:11" pos:end="12:17">mem_dev</name></decl>;</decl_stmt>
    <if_stmt pos:start="13:5" pos:end="25:37"><if pos:start="13:5" pos:end="25:37">if <condition pos:start="13:8" pos:end="13:39">(<expr pos:start="13:9" pos:end="13:38"><name pos:start="13:9" pos:end="13:12">size</name> <operator pos:start="13:14" pos:end="13:14">%</operator> <name pos:start="13:16" pos:end="13:38">SPAPR_MEMORY_BLOCK_SIZE</name></expr>)</condition> <block pos:start="13:41" pos:end="25:37">{<block_content pos:start="14:9" pos:end="25:37">
        <expr_stmt pos:start="14:9" pos:end="15:65"><expr pos:start="14:9" pos:end="15:64"><call pos:start="14:9" pos:end="15:64"><name pos:start="14:9" pos:end="14:18">error_setg</name><argument_list pos:start="14:19" pos:end="15:64">(<argument pos:start="14:20" pos:end="14:29"><expr pos:start="14:20" pos:end="14:29"><operator pos:start="14:20" pos:end="14:20">&amp;</operator><name pos:start="14:21" pos:end="14:29">local_err</name></expr></argument>, <argument pos:start="14:32" pos:end="15:31"><expr pos:start="14:32" pos:end="15:31"><literal type="string" pos:start="14:32" pos:end="14:78">"Hotplugged memory size must be a multiple of "</literal>
                      <literal type="string" pos:start="15:23" pos:end="15:31">"%lld MB"</literal></expr></argument>, <argument pos:start="15:34" pos:end="15:63"><expr pos:start="15:34" pos:end="15:63"><name pos:start="15:34" pos:end="15:56">SPAPR_MEMORY_BLOCK_SIZE</name><operator pos:start="15:57" pos:end="15:57">/</operator><name pos:start="15:58" pos:end="15:63">M_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:73"><expr pos:start="16:5" pos:end="16:72"><call pos:start="16:5" pos:end="16:72"><name pos:start="16:5" pos:end="16:23">pc_dimm_memory_plug</name><argument_list pos:start="16:24" pos:end="16:72">(<argument pos:start="16:25" pos:end="16:27"><expr pos:start="16:25" pos:end="16:27"><name pos:start="16:25" pos:end="16:27">dev</name></expr></argument>, <argument pos:start="16:30" pos:end="16:48"><expr pos:start="16:30" pos:end="16:48"><operator pos:start="16:30" pos:end="16:30">&amp;</operator><name pos:start="16:31" pos:end="16:48"><name pos:start="16:31" pos:end="16:32">ms</name><operator pos:start="16:33" pos:end="16:34">-&gt;</operator><name pos:start="16:35" pos:end="16:48">hotplug_memory</name></name></expr></argument>, <argument pos:start="16:51" pos:end="16:52"><expr pos:start="16:51" pos:end="16:52"><name pos:start="16:51" pos:end="16:52">mr</name></expr></argument>, <argument pos:start="16:55" pos:end="16:59"><expr pos:start="16:55" pos:end="16:59"><name pos:start="16:55" pos:end="16:59">align</name></expr></argument>, <argument pos:start="16:62" pos:end="16:71"><expr pos:start="16:62" pos:end="16:71"><operator pos:start="16:62" pos:end="16:62">&amp;</operator><name pos:start="16:63" pos:end="16:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="25:37"><if pos:start="17:5" pos:end="25:37">if <condition pos:start="17:8" pos:end="17:18">(<expr pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:17">local_err</name></expr>)</condition> <block pos:start="17:20" pos:end="25:37">{<block_content pos:start="18:5" pos:end="25:37">
    <expr_stmt pos:start="18:5" pos:end="18:80"><expr pos:start="18:5" pos:end="18:79"><name pos:start="18:5" pos:end="18:8">addr</name> <operator pos:start="18:10" pos:end="18:10">=</operator> <call pos:start="18:12" pos:end="18:79"><name pos:start="18:12" pos:end="18:34">object_property_get_int</name><argument_list pos:start="18:35" pos:end="18:79">(<argument pos:start="18:36" pos:end="18:47"><expr pos:start="18:36" pos:end="18:47"><call pos:start="18:36" pos:end="18:47"><name pos:start="18:36" pos:end="18:41">OBJECT</name><argument_list pos:start="18:42" pos:end="18:47">(<argument pos:start="18:43" pos:end="18:46"><expr pos:start="18:43" pos:end="18:46"><name pos:start="18:43" pos:end="18:46">dimm</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="18:50" pos:end="18:66"><expr pos:start="18:50" pos:end="18:66"><name pos:start="18:50" pos:end="18:66">PC_DIMM_ADDR_PROP</name></expr></argument>, <argument pos:start="18:69" pos:end="18:78"><expr pos:start="18:69" pos:end="18:78"><operator pos:start="18:69" pos:end="18:69">&amp;</operator><name pos:start="18:70" pos:end="18:78">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="19:5" pos:end="25:37"><if pos:start="19:5" pos:end="25:37">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:17">local_err</name></expr>)</condition> <block pos:start="19:20" pos:end="25:37">{<block_content pos:start="20:9" pos:end="25:37">
        <expr_stmt pos:start="20:9" pos:end="20:60"><expr pos:start="20:9" pos:end="20:59"><call pos:start="20:9" pos:end="20:59"><name pos:start="20:9" pos:end="20:29">pc_dimm_memory_unplug</name><argument_list pos:start="20:30" pos:end="20:59">(<argument pos:start="20:31" pos:end="20:33"><expr pos:start="20:31" pos:end="20:33"><name pos:start="20:31" pos:end="20:33">dev</name></expr></argument>, <argument pos:start="20:36" pos:end="20:54"><expr pos:start="20:36" pos:end="20:54"><operator pos:start="20:36" pos:end="20:36">&amp;</operator><name pos:start="20:37" pos:end="20:54"><name pos:start="20:37" pos:end="20:38">ms</name><operator pos:start="20:39" pos:end="20:40">-&gt;</operator><name pos:start="20:41" pos:end="20:54">hotplug_memory</name></name></expr></argument>, <argument pos:start="20:57" pos:end="20:58"><expr pos:start="20:57" pos:end="20:58"><name pos:start="20:57" pos:end="20:58">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="23:33"><expr pos:start="21:5" pos:end="23:32"><call pos:start="21:5" pos:end="23:32"><name pos:start="21:5" pos:end="21:18">spapr_add_lmbs</name><argument_list pos:start="21:19" pos:end="23:32">(<argument pos:start="21:20" pos:end="21:22"><expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">dev</name></expr></argument>, <argument pos:start="21:25" pos:end="21:28"><expr pos:start="21:25" pos:end="21:28"><name pos:start="21:25" pos:end="21:28">addr</name></expr></argument>, <argument pos:start="21:31" pos:end="21:34"><expr pos:start="21:31" pos:end="21:34"><name pos:start="21:31" pos:end="21:34">size</name></expr></argument>, <argument pos:start="21:37" pos:end="21:40"><expr pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:40">node</name></expr></argument>,
                   <argument pos:start="22:20" pos:end="22:59"><expr pos:start="22:20" pos:end="22:59"><call pos:start="22:20" pos:end="22:59"><name pos:start="22:20" pos:end="22:34">spapr_ovec_test</name><argument_list pos:start="22:35" pos:end="22:59">(<argument pos:start="22:36" pos:end="22:46"><expr pos:start="22:36" pos:end="22:46"><name pos:start="22:36" pos:end="22:46"><name pos:start="22:36" pos:end="22:37">ms</name><operator pos:start="22:38" pos:end="22:39">-&gt;</operator><name pos:start="22:40" pos:end="22:46">ov5_cas</name></name></expr></argument>, <argument pos:start="22:49" pos:end="22:58"><expr pos:start="22:49" pos:end="22:58"><name pos:start="22:49" pos:end="22:58">OV5_HP_EVT</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument pos:start="23:20" pos:end="23:31"><expr pos:start="23:20" pos:end="23:31"><operator pos:start="23:20" pos:end="23:20">&amp;</operator><name pos:start="23:21" pos:end="23:31">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label pos:start="24:1" pos:end="24:4"><name pos:start="24:1" pos:end="24:3">out</name>:</label>
    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><call pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:19">error_propagate</name><argument_list pos:start="25:20" pos:end="25:36">(<argument pos:start="25:21" pos:end="25:24"><expr pos:start="25:21" pos:end="25:24"><name pos:start="25:21" pos:end="25:24">errp</name></expr></argument>, <argument pos:start="25:27" pos:end="25:35"><expr pos:start="25:27" pos:end="25:35"><name pos:start="25:27" pos:end="25:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
