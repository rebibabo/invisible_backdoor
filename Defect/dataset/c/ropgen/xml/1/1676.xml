<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1676.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">qemu_coroutine_enter</name><parameter_list pos:start="1:26" pos:end="1:40">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:35">Coroutine</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">co</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">Coroutine</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">self</name> <init pos:start="5:21" pos:end="5:43">= <expr pos:start="5:23" pos:end="5:43"><call pos:start="5:23" pos:end="5:43"><name pos:start="5:23" pos:end="5:41">qemu_coroutine_self</name><argument_list pos:start="5:42" pos:end="5:43">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19">CoroutineAction</name></type> <name pos:start="7:21" pos:end="7:23">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:56"><expr pos:start="11:5" pos:end="11:55"><call pos:start="11:5" pos:end="11:55"><name pos:start="11:5" pos:end="11:30">trace_qemu_coroutine_enter</name><argument_list pos:start="11:31" pos:end="11:55">(<argument pos:start="11:32" pos:end="11:35"><expr pos:start="11:32" pos:end="11:35"><name pos:start="11:32" pos:end="11:35">self</name></expr></argument>, <argument pos:start="11:38" pos:end="11:39"><expr pos:start="11:38" pos:end="11:39"><name pos:start="11:38" pos:end="11:39">co</name></expr></argument>, <argument pos:start="11:42" pos:end="11:54"><expr pos:start="11:42" pos:end="11:54"><name pos:start="11:42" pos:end="11:54"><name pos:start="11:42" pos:end="11:43">co</name><operator pos:start="11:44" pos:end="11:45">-&gt;</operator><name pos:start="11:46" pos:end="11:54">entry_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:10">co</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:18">caller</name></name></expr>)</condition> <block pos:start="15:21" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:16">

        <expr_stmt pos:start="17:9" pos:end="17:63"><expr pos:start="17:9" pos:end="17:62"><call pos:start="17:9" pos:end="17:62"><name pos:start="17:9" pos:end="17:15">fprintf</name><argument_list pos:start="17:16" pos:end="17:62">(<argument pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:22">stderr</name></expr></argument>, <argument pos:start="17:25" pos:end="17:61"><expr pos:start="17:25" pos:end="17:61"><literal type="string" pos:start="17:25" pos:end="17:61">"Co-routine re-entered recursively\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:16"><expr pos:start="19:9" pos:end="19:15"><call pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:13">abort</name><argument_list pos:start="19:14" pos:end="19:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:6">co</name><operator pos:start="25:7" pos:end="25:8">-&gt;</operator><name pos:start="25:9" pos:end="25:14">caller</name></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:21">self</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:6">co</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:11">ctx</name></name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:44"><name pos:start="27:15" pos:end="27:42">qemu_get_current_aio_context</name><argument_list pos:start="27:43" pos:end="27:44">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="35:7">/* Store co-&gt;ctx before anything that stores co.  Matches

     * barrier in aio_co_wake.

     */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><call pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:11">smp_wmb</name><argument_list pos:start="37:12" pos:end="37:13">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:59"><expr pos:start="41:5" pos:end="41:58"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:58"><name pos:start="41:11" pos:end="41:31">qemu_coroutine_switch</name><argument_list pos:start="41:32" pos:end="41:58">(<argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><name pos:start="41:33" pos:end="41:36">self</name></expr></argument>, <argument pos:start="41:39" pos:end="41:40"><expr pos:start="41:39" pos:end="41:40"><name pos:start="41:39" pos:end="41:40">co</name></expr></argument>, <argument pos:start="41:43" pos:end="41:57"><expr pos:start="41:43" pos:end="41:57"><name pos:start="41:43" pos:end="41:57">COROUTINE_ENTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:34"><expr pos:start="45:5" pos:end="45:33"><call pos:start="45:5" pos:end="45:33"><name pos:start="45:5" pos:end="45:29">qemu_co_queue_run_restart</name><argument_list pos:start="45:30" pos:end="45:33">(<argument pos:start="45:31" pos:end="45:32"><expr pos:start="45:31" pos:end="45:32"><name pos:start="45:31" pos:end="45:32">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="49:5" pos:end="69:5">switch <condition pos:start="49:12" pos:end="49:16">(<expr pos:start="49:13" pos:end="49:15"><name pos:start="49:13" pos:end="49:15">ret</name></expr>)</condition> <block pos:start="49:18" pos:end="69:5">{<block_content pos:start="51:5" pos:end="67:16">

    <case pos:start="51:5" pos:end="51:25">case <expr pos:start="51:10" pos:end="51:24"><name pos:start="51:10" pos:end="51:24">COROUTINE_YIELD</name></expr>:</case>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    <case pos:start="55:5" pos:end="55:29">case <expr pos:start="55:10" pos:end="55:28"><name pos:start="55:10" pos:end="55:28">COROUTINE_TERMINATE</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><call pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:14">assert</name><argument_list pos:start="57:15" pos:end="57:31">(<argument pos:start="57:16" pos:end="57:30"><expr pos:start="57:16" pos:end="57:30"><operator pos:start="57:16" pos:end="57:16">!</operator><name pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:18">co</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:30">locks_held</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:43"><expr pos:start="59:9" pos:end="59:42"><call pos:start="59:9" pos:end="59:42"><name pos:start="59:9" pos:end="59:38">trace_qemu_coroutine_terminate</name><argument_list pos:start="59:39" pos:end="59:42">(<argument pos:start="59:40" pos:end="59:41"><expr pos:start="59:40" pos:end="59:41"><name pos:start="59:40" pos:end="59:41">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><call pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:24">coroutine_delete</name><argument_list pos:start="61:25" pos:end="61:28">(<argument pos:start="61:26" pos:end="61:27"><expr pos:start="61:26" pos:end="61:27"><name pos:start="61:26" pos:end="61:27">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    <default pos:start="65:5" pos:end="65:12">default:</default>

        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><call pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:13">abort</name><argument_list pos:start="67:14" pos:end="67:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
