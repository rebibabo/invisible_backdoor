<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26761.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">ff_h264_decode_sei</name><parameter_list pos:start="1:23" pos:end="1:38">(<parameter pos:start="1:24" pos:end="1:37"><decl pos:start="1:24" pos:end="1:37"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:34">H264Context</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">h</name></decl></parameter>)</parameter_list><block pos:start="1:39" pos:end="109:1">{<block_content pos:start="3:5" pos:end="107:13">

    <while pos:start="3:5" pos:end="103:5">while <condition pos:start="3:11" pos:end="3:38">(<expr pos:start="3:12" pos:end="3:37"><call pos:start="3:12" pos:end="3:32"><name pos:start="3:12" pos:end="3:24">get_bits_left</name><argument_list pos:start="3:25" pos:end="3:32">(<argument pos:start="3:26" pos:end="3:31"><expr pos:start="3:26" pos:end="3:31"><operator pos:start="3:26" pos:end="3:26">&amp;</operator><name pos:start="3:27" pos:end="3:31"><name pos:start="3:27" pos:end="3:27">h</name><operator pos:start="3:28" pos:end="3:29">-&gt;</operator><name pos:start="3:30" pos:end="3:31">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="3:34" pos:end="3:34">&gt;</operator> <literal type="number" pos:start="3:36" pos:end="3:37">16</literal></expr>)</condition> <block pos:start="3:40" pos:end="103:5">{<block_content pos:start="5:9" pos:end="101:31">

        <decl_stmt pos:start="5:9" pos:end="5:23"><decl pos:start="5:9" pos:end="5:16"><type pos:start="5:9" pos:end="5:11"><name pos:start="5:9" pos:end="5:11">int</name></type> <name pos:start="5:13" pos:end="5:16">size</name></decl>, <decl pos:start="5:19" pos:end="5:22"><type ref="prev" pos:start="5:9" pos:end="5:11"/><name pos:start="5:19" pos:end="5:22">type</name></decl>;</decl_stmt>



        <expr_stmt pos:start="9:9" pos:end="9:15"><expr pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:12">type</name><operator pos:start="9:13" pos:end="9:13">=</operator><literal type="number" pos:start="9:14" pos:end="9:14">0</literal></expr>;</expr_stmt>

        <do pos:start="11:9" pos:end="19:43">do<block pos:start="11:11" pos:end="19:9">{<block_content pos:start="13:13" pos:end="17:40">

            <if_stmt pos:start="13:13" pos:end="15:43"><if pos:start="13:13" pos:end="15:43">if <condition pos:start="13:16" pos:end="13:42">(<expr pos:start="13:17" pos:end="13:41"><call pos:start="13:17" pos:end="13:37"><name pos:start="13:17" pos:end="13:29">get_bits_left</name><argument_list pos:start="13:30" pos:end="13:37">(<argument pos:start="13:31" pos:end="13:36"><expr pos:start="13:31" pos:end="13:36"><operator pos:start="13:31" pos:end="13:31">&amp;</operator><name pos:start="13:32" pos:end="13:36"><name pos:start="13:32" pos:end="13:32">h</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:39" pos:end="13:39">&lt;</operator> <literal type="number" pos:start="13:41" pos:end="13:41">8</literal></expr>)</condition><block type="pseudo" pos:start="15:17" pos:end="15:43"><block_content pos:start="15:17" pos:end="15:43">

                <return pos:start="15:17" pos:end="15:43">return <expr pos:start="15:24" pos:end="15:42"><name pos:start="15:24" pos:end="15:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="17:13" pos:end="17:40"><expr pos:start="17:13" pos:end="17:39"><name pos:start="17:13" pos:end="17:16">type</name><operator pos:start="17:17" pos:end="17:18">+=</operator> <call pos:start="17:20" pos:end="17:39"><name pos:start="17:20" pos:end="17:28">show_bits</name><argument_list pos:start="17:29" pos:end="17:39">(<argument pos:start="17:30" pos:end="17:35"><expr pos:start="17:30" pos:end="17:35"><operator pos:start="17:30" pos:end="17:30">&amp;</operator><name pos:start="17:31" pos:end="17:35"><name pos:start="17:31" pos:end="17:31">h</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:35">gb</name></name></expr></argument>, <argument pos:start="17:38" pos:end="17:38"><expr pos:start="17:38" pos:end="17:38"><literal type="number" pos:start="17:38" pos:end="17:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>while<condition pos:start="19:15" pos:end="19:42">(<expr pos:start="19:16" pos:end="19:41"><call pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:23">get_bits</name><argument_list pos:start="19:24" pos:end="19:34">(<argument pos:start="19:25" pos:end="19:30"><expr pos:start="19:25" pos:end="19:30"><operator pos:start="19:25" pos:end="19:25">&amp;</operator><name pos:start="19:26" pos:end="19:30"><name pos:start="19:26" pos:end="19:26">h</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:30">gb</name></name></expr></argument>, <argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><literal type="number" pos:start="19:33" pos:end="19:33">8</literal></expr></argument>)</argument_list></call> <operator pos:start="19:36" pos:end="19:37">==</operator> <literal type="number" pos:start="19:39" pos:end="19:41">255</literal></expr>)</condition>;</do>



        <expr_stmt pos:start="23:9" pos:end="23:15"><expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:12">size</name><operator pos:start="23:13" pos:end="23:13">=</operator><literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</expr_stmt>

        <do pos:start="25:9" pos:end="33:43">do<block pos:start="25:11" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:40">

            <if_stmt pos:start="27:13" pos:end="29:43"><if pos:start="27:13" pos:end="29:43">if <condition pos:start="27:16" pos:end="27:42">(<expr pos:start="27:17" pos:end="27:41"><call pos:start="27:17" pos:end="27:37"><name pos:start="27:17" pos:end="27:29">get_bits_left</name><argument_list pos:start="27:30" pos:end="27:37">(<argument pos:start="27:31" pos:end="27:36"><expr pos:start="27:31" pos:end="27:36"><operator pos:start="27:31" pos:end="27:31">&amp;</operator><name pos:start="27:32" pos:end="27:36"><name pos:start="27:32" pos:end="27:32">h</name><operator pos:start="27:33" pos:end="27:34">-&gt;</operator><name pos:start="27:35" pos:end="27:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="27:39" pos:end="27:39">&lt;</operator> <literal type="number" pos:start="27:41" pos:end="27:41">8</literal></expr>)</condition><block type="pseudo" pos:start="29:17" pos:end="29:43"><block_content pos:start="29:17" pos:end="29:43">

                <return pos:start="29:17" pos:end="29:43">return <expr pos:start="29:24" pos:end="29:42"><name pos:start="29:24" pos:end="29:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:40"><expr pos:start="31:13" pos:end="31:39"><name pos:start="31:13" pos:end="31:16">size</name><operator pos:start="31:17" pos:end="31:18">+=</operator> <call pos:start="31:20" pos:end="31:39"><name pos:start="31:20" pos:end="31:28">show_bits</name><argument_list pos:start="31:29" pos:end="31:39">(<argument pos:start="31:30" pos:end="31:35"><expr pos:start="31:30" pos:end="31:35"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:35"><name pos:start="31:31" pos:end="31:31">h</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:35">gb</name></name></expr></argument>, <argument pos:start="31:38" pos:end="31:38"><expr pos:start="31:38" pos:end="31:38"><literal type="number" pos:start="31:38" pos:end="31:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>while<condition pos:start="33:15" pos:end="33:42">(<expr pos:start="33:16" pos:end="33:41"><call pos:start="33:16" pos:end="33:34"><name pos:start="33:16" pos:end="33:23">get_bits</name><argument_list pos:start="33:24" pos:end="33:34">(<argument pos:start="33:25" pos:end="33:30"><expr pos:start="33:25" pos:end="33:30"><operator pos:start="33:25" pos:end="33:25">&amp;</operator><name pos:start="33:26" pos:end="33:30"><name pos:start="33:26" pos:end="33:26">h</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:30">gb</name></name></expr></argument>, <argument pos:start="33:33" pos:end="33:33"><expr pos:start="33:33" pos:end="33:33"><literal type="number" pos:start="33:33" pos:end="33:33">8</literal></expr></argument>)</argument_list></call> <operator pos:start="33:36" pos:end="33:37">==</operator> <literal type="number" pos:start="33:39" pos:end="33:41">255</literal></expr>)</condition>;</do>



        <if_stmt pos:start="37:9" pos:end="39:74"><if pos:start="37:9" pos:end="39:74">if<condition pos:start="37:11" pos:end="37:46">(<expr pos:start="37:12" pos:end="37:45"><name pos:start="37:12" pos:end="37:26"><name pos:start="37:12" pos:end="37:12">h</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:19">avctx</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:26">debug</name></name><operator pos:start="37:27" pos:end="37:27">&amp;</operator><name pos:start="37:28" pos:end="37:45">FF_DEBUG_STARTCODE</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:74"><block_content pos:start="39:13" pos:end="39:74">

            <expr_stmt pos:start="39:13" pos:end="39:74"><expr pos:start="39:13" pos:end="39:73"><call pos:start="39:13" pos:end="39:73"><name pos:start="39:13" pos:end="39:18">av_log</name><argument_list pos:start="39:19" pos:end="39:73">(<argument pos:start="39:20" pos:end="39:27"><expr pos:start="39:20" pos:end="39:27"><name pos:start="39:20" pos:end="39:27"><name pos:start="39:20" pos:end="39:20">h</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:27">avctx</name></name></expr></argument>, <argument pos:start="39:30" pos:end="39:41"><expr pos:start="39:30" pos:end="39:41"><name pos:start="39:30" pos:end="39:41">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="39:44" pos:end="39:60"><expr pos:start="39:44" pos:end="39:60"><literal type="string" pos:start="39:44" pos:end="39:60">"SEI %d len:%d\n"</literal></expr></argument>, <argument pos:start="39:63" pos:end="39:66"><expr pos:start="39:63" pos:end="39:66"><name pos:start="39:63" pos:end="39:66">type</name></expr></argument>, <argument pos:start="39:69" pos:end="39:72"><expr pos:start="39:69" pos:end="39:72"><name pos:start="39:69" pos:end="39:72">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <switch pos:start="43:9" pos:end="95:9">switch<condition pos:start="43:15" pos:end="43:20">(<expr pos:start="43:16" pos:end="43:19"><name pos:start="43:16" pos:end="43:19">type</name></expr>)</condition><block pos:start="43:21" pos:end="95:9">{<block_content pos:start="45:9" pos:end="93:38">

        <case pos:start="45:9" pos:end="45:33">case <expr pos:start="45:14" pos:end="45:32"><name pos:start="45:14" pos:end="45:32">SEI_TYPE_PIC_TIMING</name></expr>:</case> <comment type="line" pos:start="45:35" pos:end="45:55">// Picture timing SEI</comment>

            <if_stmt pos:start="47:13" pos:end="49:26"><if pos:start="47:13" pos:end="49:26">if<condition pos:start="47:15" pos:end="47:44">(<expr pos:start="47:16" pos:end="47:43"><call pos:start="47:16" pos:end="47:39"><name pos:start="47:16" pos:end="47:36">decode_picture_timing</name><argument_list pos:start="47:37" pos:end="47:39">(<argument pos:start="47:38" pos:end="47:38"><expr pos:start="47:38" pos:end="47:38"><name pos:start="47:38" pos:end="47:38">h</name></expr></argument>)</argument_list></call> <operator pos:start="47:41" pos:end="47:41">&lt;</operator> <literal type="number" pos:start="47:43" pos:end="47:43">0</literal></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:26"><block_content pos:start="49:17" pos:end="49:26">

                <return pos:start="49:17" pos:end="49:26">return <expr pos:start="49:24" pos:end="49:25"><operator pos:start="49:24" pos:end="49:24">-</operator><literal type="number" pos:start="49:25" pos:end="49:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="51:13" pos:end="51:18">break;</break>

        <case pos:start="53:9" pos:end="53:42">case <expr pos:start="53:14" pos:end="53:41"><name pos:start="53:14" pos:end="53:41">SEI_TYPE_USER_DATA_ITU_T_T35</name></expr>:</case>

            <if_stmt pos:start="55:13" pos:end="57:26"><if pos:start="55:13" pos:end="57:26">if<condition pos:start="55:15" pos:end="55:55">(<expr pos:start="55:16" pos:end="55:54"><call pos:start="55:16" pos:end="55:50"><name pos:start="55:16" pos:end="55:41">decode_user_data_itu_t_t35</name><argument_list pos:start="55:42" pos:end="55:50">(<argument pos:start="55:43" pos:end="55:43"><expr pos:start="55:43" pos:end="55:43"><name pos:start="55:43" pos:end="55:43">h</name></expr></argument>, <argument pos:start="55:46" pos:end="55:49"><expr pos:start="55:46" pos:end="55:49"><name pos:start="55:46" pos:end="55:49">size</name></expr></argument>)</argument_list></call> <operator pos:start="55:52" pos:end="55:52">&lt;</operator> <literal type="number" pos:start="55:54" pos:end="55:54">0</literal></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:26"><block_content pos:start="57:17" pos:end="57:26">

                <return pos:start="57:17" pos:end="57:26">return <expr pos:start="57:24" pos:end="57:25"><operator pos:start="57:24" pos:end="57:24">-</operator><literal type="number" pos:start="57:25" pos:end="57:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        <case pos:start="61:9" pos:end="61:45">case <expr pos:start="61:14" pos:end="61:44"><name pos:start="61:14" pos:end="61:44">SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>:</case>

            <if_stmt pos:start="63:13" pos:end="65:26"><if pos:start="63:13" pos:end="65:26">if<condition pos:start="63:15" pos:end="63:58">(<expr pos:start="63:16" pos:end="63:57"><call pos:start="63:16" pos:end="63:53"><name pos:start="63:16" pos:end="63:44">decode_unregistered_user_data</name><argument_list pos:start="63:45" pos:end="63:53">(<argument pos:start="63:46" pos:end="63:46"><expr pos:start="63:46" pos:end="63:46"><name pos:start="63:46" pos:end="63:46">h</name></expr></argument>, <argument pos:start="63:49" pos:end="63:52"><expr pos:start="63:49" pos:end="63:52"><name pos:start="63:49" pos:end="63:52">size</name></expr></argument>)</argument_list></call> <operator pos:start="63:55" pos:end="63:55">&lt;</operator> <literal type="number" pos:start="63:57" pos:end="63:57">0</literal></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:26"><block_content pos:start="65:17" pos:end="65:26">

                <return pos:start="65:17" pos:end="65:26">return <expr pos:start="65:24" pos:end="65:25"><operator pos:start="65:24" pos:end="65:24">-</operator><literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:37">case <expr pos:start="69:14" pos:end="69:36"><name pos:start="69:14" pos:end="69:36">SEI_TYPE_RECOVERY_POINT</name></expr>:</case>

            <if_stmt pos:start="71:13" pos:end="73:26"><if pos:start="71:13" pos:end="73:26">if<condition pos:start="71:15" pos:end="71:44">(<expr pos:start="71:16" pos:end="71:43"><call pos:start="71:16" pos:end="71:39"><name pos:start="71:16" pos:end="71:36">decode_recovery_point</name><argument_list pos:start="71:37" pos:end="71:39">(<argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><name pos:start="71:38" pos:end="71:38">h</name></expr></argument>)</argument_list></call> <operator pos:start="71:41" pos:end="71:41">&lt;</operator> <literal type="number" pos:start="71:43" pos:end="71:43">0</literal></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:26"><block_content pos:start="73:17" pos:end="73:26">

                <return pos:start="73:17" pos:end="73:26">return <expr pos:start="73:24" pos:end="73:25"><operator pos:start="73:24" pos:end="73:24">-</operator><literal type="number" pos:start="73:25" pos:end="73:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:34">case <expr pos:start="77:14" pos:end="77:33"><name pos:start="77:14" pos:end="77:33">SEI_BUFFERING_PERIOD</name></expr>:</case>

            <if_stmt pos:start="79:13" pos:end="81:26"><if pos:start="79:13" pos:end="81:26">if<condition pos:start="79:15" pos:end="79:46">(<expr pos:start="79:16" pos:end="79:45"><call pos:start="79:16" pos:end="79:41"><name pos:start="79:16" pos:end="79:38">decode_buffering_period</name><argument_list pos:start="79:39" pos:end="79:41">(<argument pos:start="79:40" pos:end="79:40"><expr pos:start="79:40" pos:end="79:40"><name pos:start="79:40" pos:end="79:40">h</name></expr></argument>)</argument_list></call> <operator pos:start="79:43" pos:end="79:43">&lt;</operator> <literal type="number" pos:start="79:45" pos:end="79:45">0</literal></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:26"><block_content pos:start="81:17" pos:end="81:26">

                <return pos:start="81:17" pos:end="81:26">return <expr pos:start="81:24" pos:end="81:25"><operator pos:start="81:24" pos:end="81:24">-</operator><literal type="number" pos:start="81:25" pos:end="81:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:36">case <expr pos:start="85:14" pos:end="85:35"><name pos:start="85:14" pos:end="85:35">SEI_TYPE_FRAME_PACKING</name></expr>:</case>

            <if_stmt pos:start="87:13" pos:end="89:26"><if pos:start="87:13" pos:end="89:26">if<condition pos:start="87:15" pos:end="87:49">(<expr pos:start="87:16" pos:end="87:48"><call pos:start="87:16" pos:end="87:44"><name pos:start="87:16" pos:end="87:35">decode_frame_packing</name><argument_list pos:start="87:36" pos:end="87:44">(<argument pos:start="87:37" pos:end="87:37"><expr pos:start="87:37" pos:end="87:37"><name pos:start="87:37" pos:end="87:37">h</name></expr></argument>, <argument pos:start="87:40" pos:end="87:43"><expr pos:start="87:40" pos:end="87:43"><name pos:start="87:40" pos:end="87:43">size</name></expr></argument>)</argument_list></call> <operator pos:start="87:46" pos:end="87:46">&lt;</operator> <literal type="number" pos:start="87:48" pos:end="87:48">0</literal></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:26"><block_content pos:start="89:17" pos:end="89:26">

                <return pos:start="89:17" pos:end="89:26">return <expr pos:start="89:24" pos:end="89:25"><operator pos:start="89:24" pos:end="89:24">-</operator><literal type="number" pos:start="89:25" pos:end="89:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <default pos:start="91:9" pos:end="91:16">default:</default>

            <expr_stmt pos:start="93:13" pos:end="93:38"><expr pos:start="93:13" pos:end="93:37"><call pos:start="93:13" pos:end="93:37"><name pos:start="93:13" pos:end="93:21">skip_bits</name><argument_list pos:start="93:22" pos:end="93:37">(<argument pos:start="93:23" pos:end="93:28"><expr pos:start="93:23" pos:end="93:28"><operator pos:start="93:23" pos:end="93:23">&amp;</operator><name pos:start="93:24" pos:end="93:28"><name pos:start="93:24" pos:end="93:24">h</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:28">gb</name></name></expr></argument>, <argument pos:start="93:31" pos:end="93:36"><expr pos:start="93:31" pos:end="93:36"><literal type="number" pos:start="93:31" pos:end="93:31">8</literal><operator pos:start="93:32" pos:end="93:32">*</operator><name pos:start="93:33" pos:end="93:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <comment type="line" pos:start="99:9" pos:end="99:31">//FIXME check bits here</comment>

        <expr_stmt pos:start="101:9" pos:end="101:31"><expr pos:start="101:9" pos:end="101:30"><call pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:22">align_get_bits</name><argument_list pos:start="101:23" pos:end="101:30">(<argument pos:start="101:24" pos:end="101:29"><expr pos:start="101:24" pos:end="101:29"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:29"><name pos:start="101:25" pos:end="101:25">h</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
