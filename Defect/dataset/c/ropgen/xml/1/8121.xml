<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8121.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:49">h_client_architecture_support</name><parameter_list pos:start="1:50" pos:end="7:69">(<parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:60">PowerPCCPU</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">cpu</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:74"><decl pos:start="3:51" pos:end="3:74"><type pos:start="3:51" pos:end="3:74"><name pos:start="3:51" pos:end="3:67">sPAPRMachineState</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:74">spapr</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:69"><decl pos:start="5:51" pos:end="5:69"><type pos:start="5:51" pos:end="5:69"><name pos:start="5:51" pos:end="5:62">target_ulong</name></type> <name pos:start="5:64" pos:end="5:69">opcode</name></decl></parameter>,

                                                  <parameter pos:start="7:51" pos:end="7:68"><decl pos:start="7:51" pos:end="7:68"><type pos:start="7:51" pos:end="7:68"><name pos:start="7:51" pos:end="7:62">target_ulong</name> <modifier pos:start="7:64" pos:end="7:64">*</modifier></type><name pos:start="7:65" pos:end="7:68">args</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="249:1">{<block_content pos:start="11:5" pos:end="247:21">

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:21">list</name> <init pos:start="11:23" pos:end="11:51">= <expr pos:start="11:25" pos:end="11:51"><call pos:start="11:25" pos:end="11:51"><name pos:start="11:25" pos:end="11:42">ppc64_phys_to_real</name><argument_list pos:start="11:43" pos:end="11:51">(<argument pos:start="11:44" pos:end="11:50"><expr pos:start="11:44" pos:end="11:50"><name pos:start="11:44" pos:end="11:50"><name pos:start="11:44" pos:end="11:47">args</name><index pos:start="11:48" pos:end="11:50">[<expr pos:start="11:49" pos:end="11:49"><literal type="number" pos:start="11:49" pos:end="11:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:25">ov_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:23">explicit_match</name> <init pos:start="15:25" pos:end="15:31">= <expr pos:start="15:27" pos:end="15:31"><name pos:start="15:27" pos:end="15:31">false</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="15:34" pos:end="15:65">/* Matched the CPU's real PVR */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:23">max_compat</name> <init pos:start="17:25" pos:end="17:41">= <expr pos:start="17:27" pos:end="17:41"><name pos:start="17:27" pos:end="17:41"><name pos:start="17:27" pos:end="17:29">cpu</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:41">max_compat</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:24">best_compat</name> <init pos:start="19:26" pos:end="19:28">= <expr pos:start="19:28" pos:end="19:28"><literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:61"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:21">sPAPROptionVector</name> <modifier pos:start="23:23" pos:end="23:23">*</modifier></type><name pos:start="23:24" pos:end="23:32">ov5_guest</name></decl>, <decl pos:start="23:35" pos:end="23:46"><type ref="prev" pos:start="23:5" pos:end="23:23"><modifier pos:start="23:35" pos:end="23:35">*</modifier></type><name pos:start="23:36" pos:end="23:46">ov5_cas_old</name></decl>, <decl pos:start="23:49" pos:end="23:60"><type ref="prev" pos:start="23:5" pos:end="23:23"><modifier pos:start="23:49" pos:end="23:49">*</modifier></type><name pos:start="23:50" pos:end="23:60">ov5_updates</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:20">guest_radix</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="37:7">/*

     * We scan the supplied table of PVRs looking for two things

     *   1. Is our real CPU PVR in the list?

     *   2. What's the "best" listed logical PVR

     */</comment>

    <for pos:start="39:5" pos:end="75:5">for <control pos:start="39:9" pos:end="39:29">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:24"><expr pos:start="39:17" pos:end="39:23"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <literal type="number" pos:start="39:21" pos:end="39:23">512</literal></expr>;</condition> <incr pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><operator pos:start="39:26" pos:end="39:27">++</operator><name pos:start="39:28" pos:end="39:28">i</name></expr></incr>)</control> <block pos:start="39:31" pos:end="75:5">{<block_content pos:start="41:9" pos:end="73:9">

        <decl_stmt pos:start="41:9" pos:end="41:31"><decl pos:start="41:9" pos:end="41:20"><type pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">uint32_t</name></type> <name pos:start="41:18" pos:end="41:20">pvr</name></decl>, <decl pos:start="41:23" pos:end="41:30"><type ref="prev" pos:start="41:9" pos:end="41:16"/><name pos:start="41:23" pos:end="41:30">pvr_mask</name></decl>;</decl_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:60"><expr pos:start="45:9" pos:end="45:59"><name pos:start="45:9" pos:end="45:16">pvr_mask</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <call pos:start="45:20" pos:end="45:59"><name pos:start="45:20" pos:end="45:30">ldl_be_phys</name><argument_list pos:start="45:31" pos:end="45:59">(<argument pos:start="45:32" pos:end="45:52"><expr pos:start="45:32" pos:end="45:52"><operator pos:start="45:32" pos:end="45:32">&amp;</operator><name pos:start="45:33" pos:end="45:52">address_space_memory</name></expr></argument>, <argument pos:start="45:55" pos:end="45:58"><expr pos:start="45:55" pos:end="45:58"><name pos:start="45:55" pos:end="45:58">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:59"><expr pos:start="47:9" pos:end="47:58"><name pos:start="47:9" pos:end="47:11">pvr</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:58"><name pos:start="47:15" pos:end="47:25">ldl_be_phys</name><argument_list pos:start="47:26" pos:end="47:58">(<argument pos:start="47:27" pos:end="47:47"><expr pos:start="47:27" pos:end="47:47"><operator pos:start="47:27" pos:end="47:27">&amp;</operator><name pos:start="47:28" pos:end="47:47">address_space_memory</name></expr></argument>, <argument pos:start="47:50" pos:end="47:57"><expr pos:start="47:50" pos:end="47:57"><name pos:start="47:50" pos:end="47:53">list</name> <operator pos:start="47:55" pos:end="47:55">+</operator> <literal type="number" pos:start="47:57" pos:end="47:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:18"><expr pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:12">list</name> <operator pos:start="49:14" pos:end="49:15">+=</operator> <literal type="number" pos:start="49:17" pos:end="49:17">8</literal></expr>;</expr_stmt>



        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:28">(<expr pos:start="53:13" pos:end="53:27"><operator pos:start="53:13" pos:end="53:13">~</operator><name pos:start="53:14" pos:end="53:21">pvr_mask</name> <operator pos:start="53:23" pos:end="53:23">&amp;</operator> <name pos:start="53:25" pos:end="53:27">pvr</name></expr>)</condition> <block pos:start="53:30" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break> <comment type="block" pos:start="55:20" pos:end="55:42">/* Terminator record */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="61:9" pos:end="73:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:67">(<expr pos:start="61:13" pos:end="61:66"><operator pos:start="61:13" pos:end="61:13">(</operator><name pos:start="61:14" pos:end="61:34"><name pos:start="61:14" pos:end="61:16">cpu</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:21">env</name><operator pos:start="61:22" pos:end="61:22">.</operator><name pos:start="61:23" pos:end="61:25">spr</name><index pos:start="61:26" pos:end="61:34">[<expr pos:start="61:27" pos:end="61:33"><name pos:start="61:27" pos:end="61:33">SPR_PVR</name></expr>]</index></name> <operator pos:start="61:36" pos:end="61:36">&amp;</operator> <name pos:start="61:38" pos:end="61:45">pvr_mask</name><operator pos:start="61:46" pos:end="61:46">)</operator> <operator pos:start="61:48" pos:end="61:49">==</operator> <operator pos:start="61:51" pos:end="61:51">(</operator><name pos:start="61:52" pos:end="61:54">pvr</name> <operator pos:start="61:56" pos:end="61:56">&amp;</operator> <name pos:start="61:58" pos:end="61:65">pvr_mask</name><operator pos:start="61:66" pos:end="61:66">)</operator></expr>)</condition> <block pos:start="61:69" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:34">

            <expr_stmt pos:start="63:13" pos:end="63:34"><expr pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:26">explicit_match</name> <operator pos:start="63:28" pos:end="63:28">=</operator> <name pos:start="63:30" pos:end="63:33">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="73:9">else <block pos:start="65:16" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:13">

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:68">(<expr pos:start="67:17" pos:end="67:67"><call pos:start="67:17" pos:end="67:67"><name pos:start="67:17" pos:end="67:32">ppc_check_compat</name><argument_list pos:start="67:33" pos:end="67:67">(<argument pos:start="67:34" pos:end="67:36"><expr pos:start="67:34" pos:end="67:36"><name pos:start="67:34" pos:end="67:36">cpu</name></expr></argument>, <argument pos:start="67:39" pos:end="67:41"><expr pos:start="67:39" pos:end="67:41"><name pos:start="67:39" pos:end="67:41">pvr</name></expr></argument>, <argument pos:start="67:44" pos:end="67:54"><expr pos:start="67:44" pos:end="67:54"><name pos:start="67:44" pos:end="67:54">best_compat</name></expr></argument>, <argument pos:start="67:57" pos:end="67:66"><expr pos:start="67:57" pos:end="67:66"><name pos:start="67:57" pos:end="67:66">max_compat</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:70" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:34">

                <expr_stmt pos:start="69:17" pos:end="69:34"><expr pos:start="69:17" pos:end="69:33"><name pos:start="69:17" pos:end="69:27">best_compat</name> <operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:33">pvr</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="79:5" pos:end="89:5"><if pos:start="79:5" pos:end="89:5">if <condition pos:start="79:8" pos:end="79:62">(<expr pos:start="79:9" pos:end="79:61"><operator pos:start="79:9" pos:end="79:9">(</operator><name pos:start="79:10" pos:end="79:20">best_compat</name> <operator pos:start="79:22" pos:end="79:23">==</operator> <literal type="number" pos:start="79:25" pos:end="79:25">0</literal><operator pos:start="79:26" pos:end="79:26">)</operator> <operator pos:start="79:28" pos:end="79:29">&amp;&amp;</operator> <operator pos:start="79:31" pos:end="79:31">(</operator><operator pos:start="79:32" pos:end="79:32">!</operator><name pos:start="79:33" pos:end="79:46">explicit_match</name> <operator pos:start="79:48" pos:end="79:49">||</operator> <name pos:start="79:51" pos:end="79:60">max_compat</name><operator pos:start="79:61" pos:end="79:61">)</operator></expr>)</condition> <block pos:start="79:64" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:26">

        <comment type="block" pos:start="81:9" pos:end="85:67">/* We couldn't find a suitable compatibility mode, and either

         * the guest doesn't support "raw" mode for this CPU, or raw

         * mode is disabled because a maximum compat mode is set */</comment>

        <return pos:start="87:9" pos:end="87:26">return <expr pos:start="87:16" pos:end="87:25"><name pos:start="87:16" pos:end="87:25">H_HARDWARE</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:26">/* Parsing finished */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:70"><expr pos:start="95:5" pos:end="95:69"><call pos:start="95:5" pos:end="95:69"><name pos:start="95:5" pos:end="95:23">trace_spapr_cas_pvr</name><argument_list pos:start="95:24" pos:end="95:69">(<argument pos:start="95:25" pos:end="95:39"><expr pos:start="95:25" pos:end="95:39"><name pos:start="95:25" pos:end="95:39"><name pos:start="95:25" pos:end="95:27">cpu</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:39">compat_pvr</name></name></expr></argument>, <argument pos:start="95:42" pos:end="95:55"><expr pos:start="95:42" pos:end="95:55"><name pos:start="95:42" pos:end="95:55">explicit_match</name></expr></argument>, <argument pos:start="95:58" pos:end="95:68"><expr pos:start="95:58" pos:end="95:68"><name pos:start="95:58" pos:end="95:68">best_compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:21">/* Update CPUs */</comment>

    <if_stmt pos:start="101:5" pos:end="117:5"><if pos:start="101:5" pos:end="117:5">if <condition pos:start="101:8" pos:end="101:39">(<expr pos:start="101:9" pos:end="101:38"><name pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:11">cpu</name><operator pos:start="101:12" pos:end="101:13">-&gt;</operator><name pos:start="101:14" pos:end="101:23">compat_pvr</name></name> <operator pos:start="101:25" pos:end="101:26">!=</operator> <name pos:start="101:28" pos:end="101:38">best_compat</name></expr>)</condition> <block pos:start="101:41" pos:end="117:5">{<block_content pos:start="103:9" pos:end="115:9">

        <decl_stmt pos:start="103:9" pos:end="103:32"><decl pos:start="103:9" pos:end="103:31"><type pos:start="103:9" pos:end="103:15"><name pos:start="103:9" pos:end="103:13">Error</name> <modifier pos:start="103:15" pos:end="103:15">*</modifier></type><name pos:start="103:16" pos:end="103:24">local_err</name> <init pos:start="103:26" pos:end="103:31">= <expr pos:start="103:28" pos:end="103:31"><name pos:start="103:28" pos:end="103:31">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:52"><expr pos:start="107:9" pos:end="107:51"><call pos:start="107:9" pos:end="107:51"><name pos:start="107:9" pos:end="107:26">ppc_set_compat_all</name><argument_list pos:start="107:27" pos:end="107:51">(<argument pos:start="107:28" pos:end="107:38"><expr pos:start="107:28" pos:end="107:38"><name pos:start="107:28" pos:end="107:38">best_compat</name></expr></argument>, <argument pos:start="107:41" pos:end="107:50"><expr pos:start="107:41" pos:end="107:50"><operator pos:start="107:41" pos:end="107:41">&amp;</operator><name pos:start="107:42" pos:end="107:50">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:22">(<expr pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:21">local_err</name></expr>)</condition> <block pos:start="109:24" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:30">

            <expr_stmt pos:start="111:13" pos:end="111:40"><expr pos:start="111:13" pos:end="111:39"><call pos:start="111:13" pos:end="111:39"><name pos:start="111:13" pos:end="111:28">error_report_err</name><argument_list pos:start="111:29" pos:end="111:39">(<argument pos:start="111:30" pos:end="111:38"><expr pos:start="111:30" pos:end="111:38"><name pos:start="111:30" pos:end="111:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="113:13" pos:end="113:30">return <expr pos:start="113:20" pos:end="113:29"><name pos:start="113:20" pos:end="113:29">H_HARDWARE</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:78">/* For the future use: here @ov_table points to the first option vector */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:20"><expr pos:start="123:5" pos:end="123:19"><name pos:start="123:5" pos:end="123:12">ov_table</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <name pos:start="123:16" pos:end="123:19">list</name></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:53"><expr pos:start="127:5" pos:end="127:52"><name pos:start="127:5" pos:end="127:13">ov5_guest</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <call pos:start="127:17" pos:end="127:52"><name pos:start="127:17" pos:end="127:39">spapr_ovec_parse_vector</name><argument_list pos:start="127:40" pos:end="127:52">(<argument pos:start="127:41" pos:end="127:48"><expr pos:start="127:41" pos:end="127:48"><name pos:start="127:41" pos:end="127:48">ov_table</name></expr></argument>, <argument pos:start="127:51" pos:end="127:51"><expr pos:start="127:51" pos:end="127:51"><literal type="number" pos:start="127:51" pos:end="127:51">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:49">(<expr pos:start="129:9" pos:end="129:48"><call pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:23">spapr_ovec_test</name><argument_list pos:start="129:24" pos:end="129:48">(<argument pos:start="129:25" pos:end="129:33"><expr pos:start="129:25" pos:end="129:33"><name pos:start="129:25" pos:end="129:33">ov5_guest</name></expr></argument>, <argument pos:start="129:36" pos:end="129:47"><expr pos:start="129:36" pos:end="129:47"><name pos:start="129:36" pos:end="129:47">OV5_MMU_BOTH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:51" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:27">

        <expr_stmt pos:start="131:9" pos:end="131:78"><expr pos:start="131:9" pos:end="131:77"><call pos:start="131:9" pos:end="131:77"><name pos:start="131:9" pos:end="131:20">error_report</name><argument_list pos:start="131:21" pos:end="131:77">(<argument pos:start="131:22" pos:end="131:76"><expr pos:start="131:22" pos:end="131:76"><literal type="string" pos:start="131:22" pos:end="131:76">"guest requested hash and radix MMU, which is invalid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:27"><expr pos:start="133:9" pos:end="133:26"><call pos:start="133:9" pos:end="133:26"><name pos:start="133:9" pos:end="133:12">exit</name><argument_list pos:start="133:13" pos:end="133:26">(<argument pos:start="133:14" pos:end="133:25"><expr pos:start="133:14" pos:end="133:25"><name pos:start="133:14" pos:end="133:25">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="137:5" pos:end="137:66">/* The radix/hash bit in byte 24 requires special handling: */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:64"><expr pos:start="139:5" pos:end="139:63"><name pos:start="139:5" pos:end="139:15">guest_radix</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="139:63"><name pos:start="139:19" pos:end="139:33">spapr_ovec_test</name><argument_list pos:start="139:34" pos:end="139:63">(<argument pos:start="139:35" pos:end="139:43"><expr pos:start="139:35" pos:end="139:43"><name pos:start="139:35" pos:end="139:43">ov5_guest</name></expr></argument>, <argument pos:start="139:46" pos:end="139:62"><expr pos:start="139:46" pos:end="139:62"><name pos:start="139:46" pos:end="139:62">OV5_MMU_RADIX_300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:51"><expr pos:start="141:5" pos:end="141:50"><call pos:start="141:5" pos:end="141:50"><name pos:start="141:5" pos:end="141:20">spapr_ovec_clear</name><argument_list pos:start="141:21" pos:end="141:50">(<argument pos:start="141:22" pos:end="141:30"><expr pos:start="141:22" pos:end="141:30"><name pos:start="141:22" pos:end="141:30">ov5_guest</name></expr></argument>, <argument pos:start="141:33" pos:end="141:49"><expr pos:start="141:33" pos:end="141:49"><name pos:start="141:33" pos:end="141:49">OV5_MMU_RADIX_300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="145:5" pos:end="157:7">/* NOTE: there are actually a number of ov5 bits where input from the

     * guest is always zero, and the platform/QEMU enables them independently

     * of guest input. To model these properly we'd want some sort of mask,

     * but since they only currently apply to memory migration as defined

     * by LoPAPR 1.1, 14.5.4.8, which QEMU doesn't implement, we don't need

     * to worry about this for now.

     */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:51"><expr pos:start="159:5" pos:end="159:50"><name pos:start="159:5" pos:end="159:15">ov5_cas_old</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:50"><name pos:start="159:19" pos:end="159:34">spapr_ovec_clone</name><argument_list pos:start="159:35" pos:end="159:50">(<argument pos:start="159:36" pos:end="159:49"><expr pos:start="159:36" pos:end="159:49"><name pos:start="159:36" pos:end="159:49"><name pos:start="159:36" pos:end="159:40">spapr</name><operator pos:start="159:41" pos:end="159:42">-&gt;</operator><name pos:start="159:43" pos:end="159:49">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="161:5" pos:end="161:51">/* full range of negotiated ov5 capabilities */</comment>

    <expr_stmt pos:start="163:5" pos:end="163:64"><expr pos:start="163:5" pos:end="163:63"><call pos:start="163:5" pos:end="163:63"><name pos:start="163:5" pos:end="163:24">spapr_ovec_intersect</name><argument_list pos:start="163:25" pos:end="163:63">(<argument pos:start="163:26" pos:end="163:39"><expr pos:start="163:26" pos:end="163:39"><name pos:start="163:26" pos:end="163:39"><name pos:start="163:26" pos:end="163:30">spapr</name><operator pos:start="163:31" pos:end="163:32">-&gt;</operator><name pos:start="163:33" pos:end="163:39">ov5_cas</name></name></expr></argument>, <argument pos:start="163:42" pos:end="163:51"><expr pos:start="163:42" pos:end="163:51"><name pos:start="163:42" pos:end="163:51"><name pos:start="163:42" pos:end="163:46">spapr</name><operator pos:start="163:47" pos:end="163:48">-&gt;</operator><name pos:start="163:49" pos:end="163:51">ov5</name></name></expr></argument>, <argument pos:start="163:54" pos:end="163:62"><expr pos:start="163:54" pos:end="163:62"><name pos:start="163:54" pos:end="163:62">ov5_guest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:34"><expr pos:start="165:5" pos:end="165:33"><call pos:start="165:5" pos:end="165:33"><name pos:start="165:5" pos:end="165:22">spapr_ovec_cleanup</name><argument_list pos:start="165:23" pos:end="165:33">(<argument pos:start="165:24" pos:end="165:32"><expr pos:start="165:24" pos:end="165:32"><name pos:start="165:24" pos:end="165:32">ov5_guest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="167:5" pos:end="171:7">/* capabilities that have been added since CAS-generated guest reset.

     * if capabilities have since been removed, generate another reset

     */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:35"><expr pos:start="173:5" pos:end="173:34"><name pos:start="173:5" pos:end="173:15">ov5_updates</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:34"><name pos:start="173:19" pos:end="173:32">spapr_ovec_new</name><argument_list pos:start="173:33" pos:end="173:34">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="177:69"><expr pos:start="175:5" pos:end="177:68"><name pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:9">spapr</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:21">cas_reboot</name></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <call pos:start="175:25" pos:end="177:68"><name pos:start="175:25" pos:end="175:39">spapr_ovec_diff</name><argument_list pos:start="175:40" pos:end="177:68">(<argument pos:start="175:41" pos:end="175:51"><expr pos:start="175:41" pos:end="175:51"><name pos:start="175:41" pos:end="175:51">ov5_updates</name></expr></argument>,

                                        <argument pos:start="177:41" pos:end="177:51"><expr pos:start="177:41" pos:end="177:51"><name pos:start="177:41" pos:end="177:51">ov5_cas_old</name></expr></argument>, <argument pos:start="177:54" pos:end="177:67"><expr pos:start="177:54" pos:end="177:67"><name pos:start="177:54" pos:end="177:67"><name pos:start="177:54" pos:end="177:58">spapr</name><operator pos:start="177:59" pos:end="177:60">-&gt;</operator><name pos:start="177:61" pos:end="177:67">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="179:5" pos:end="181:75">/* Now that processing is finished, set the radix/hash bit for the

     * guest if it requested a valid mode; otherwise terminate the boot. */</comment>

    <if_stmt pos:start="183:5" pos:end="207:5"><if pos:start="183:5" pos:end="195:5">if <condition pos:start="183:8" pos:end="183:20">(<expr pos:start="183:9" pos:end="183:19"><name pos:start="183:9" pos:end="183:19">guest_radix</name></expr>)</condition> <block pos:start="183:22" pos:end="195:5">{<block_content pos:start="185:9" pos:end="193:58">

        <if_stmt pos:start="185:9" pos:end="191:9"><if pos:start="185:9" pos:end="191:9">if <condition pos:start="185:12" pos:end="185:57">(<expr pos:start="185:13" pos:end="185:56"><call pos:start="185:13" pos:end="185:25"><name pos:start="185:13" pos:end="185:23">kvm_enabled</name><argument_list pos:start="185:24" pos:end="185:25">()</argument_list></call> <operator pos:start="185:27" pos:end="185:28">&amp;&amp;</operator> <operator pos:start="185:30" pos:end="185:30">!</operator><call pos:start="185:31" pos:end="185:56"><name pos:start="185:31" pos:end="185:54">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="185:55" pos:end="185:56">()</argument_list></call></expr>)</condition> <block pos:start="185:59" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:31">

            <expr_stmt pos:start="187:13" pos:end="187:74"><expr pos:start="187:13" pos:end="187:73"><call pos:start="187:13" pos:end="187:73"><name pos:start="187:13" pos:end="187:24">error_report</name><argument_list pos:start="187:25" pos:end="187:73">(<argument pos:start="187:26" pos:end="187:72"><expr pos:start="187:26" pos:end="187:72"><literal type="string" pos:start="187:26" pos:end="187:72">"Guest requested unavailable MMU mode (radix)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:31"><expr pos:start="189:13" pos:end="189:30"><call pos:start="189:13" pos:end="189:30"><name pos:start="189:13" pos:end="189:16">exit</name><argument_list pos:start="189:17" pos:end="189:30">(<argument pos:start="189:18" pos:end="189:29"><expr pos:start="189:18" pos:end="189:29"><name pos:start="189:18" pos:end="189:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:58"><expr pos:start="193:9" pos:end="193:57"><call pos:start="193:9" pos:end="193:57"><name pos:start="193:9" pos:end="193:22">spapr_ovec_set</name><argument_list pos:start="193:23" pos:end="193:57">(<argument pos:start="193:24" pos:end="193:37"><expr pos:start="193:24" pos:end="193:37"><name pos:start="193:24" pos:end="193:37"><name pos:start="193:24" pos:end="193:28">spapr</name><operator pos:start="193:29" pos:end="193:30">-&gt;</operator><name pos:start="193:31" pos:end="193:37">ov5_cas</name></name></expr></argument>, <argument pos:start="193:40" pos:end="193:56"><expr pos:start="193:40" pos:end="193:56"><name pos:start="193:40" pos:end="193:56">OV5_MMU_RADIX_300</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="195:7" pos:end="207:5">else <block pos:start="195:12" pos:end="207:5">{<block_content pos:start="197:9" pos:end="205:9">

        <if_stmt pos:start="197:9" pos:end="205:9"><if pos:start="197:9" pos:end="205:9">if <condition pos:start="197:12" pos:end="199:45">(<expr pos:start="197:13" pos:end="199:44"><call pos:start="197:13" pos:end="197:25"><name pos:start="197:13" pos:end="197:23">kvm_enabled</name><argument_list pos:start="197:24" pos:end="197:25">()</argument_list></call> <operator pos:start="197:27" pos:end="197:28">&amp;&amp;</operator> <call pos:start="197:30" pos:end="197:55"><name pos:start="197:30" pos:end="197:53">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="197:54" pos:end="197:55">()</argument_list></call>

            <operator pos:start="199:13" pos:end="199:14">&amp;&amp;</operator> <operator pos:start="199:16" pos:end="199:16">!</operator><call pos:start="199:17" pos:end="199:44"><name pos:start="199:17" pos:end="199:42">kvmppc_has_cap_mmu_hash_v3</name><argument_list pos:start="199:43" pos:end="199:44">()</argument_list></call></expr>)</condition> <block pos:start="199:47" pos:end="205:9">{<block_content pos:start="201:13" pos:end="203:31">

            <expr_stmt pos:start="201:13" pos:end="201:73"><expr pos:start="201:13" pos:end="201:72"><call pos:start="201:13" pos:end="201:72"><name pos:start="201:13" pos:end="201:24">error_report</name><argument_list pos:start="201:25" pos:end="201:72">(<argument pos:start="201:26" pos:end="201:71"><expr pos:start="201:26" pos:end="201:71"><literal type="string" pos:start="201:26" pos:end="201:71">"Guest requested unavailable MMU mode (hash)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:31"><expr pos:start="203:13" pos:end="203:30"><call pos:start="203:13" pos:end="203:30"><name pos:start="203:13" pos:end="203:16">exit</name><argument_list pos:start="203:17" pos:end="203:30">(<argument pos:start="203:18" pos:end="203:29"><expr pos:start="203:18" pos:end="203:29"><name pos:start="203:18" pos:end="203:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="211:5" pos:end="219:5"><if pos:start="211:5" pos:end="219:5">if <condition pos:start="211:8" pos:end="211:27">(<expr pos:start="211:9" pos:end="211:26"><operator pos:start="211:9" pos:end="211:9">!</operator><name pos:start="211:10" pos:end="211:26"><name pos:start="211:10" pos:end="211:14">spapr</name><operator pos:start="211:15" pos:end="211:16">-&gt;</operator><name pos:start="211:17" pos:end="211:26">cas_reboot</name></name></expr>)</condition> <block pos:start="211:29" pos:end="219:5">{<block_content pos:start="213:9" pos:end="217:61">

        <expr_stmt pos:start="213:9" pos:end="217:61"><expr pos:start="213:9" pos:end="217:60"><name pos:start="213:9" pos:end="213:25"><name pos:start="213:9" pos:end="213:13">spapr</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:25">cas_reboot</name></name> <operator pos:start="213:27" pos:end="213:27">=</operator>

            <operator pos:start="215:13" pos:end="215:13">(</operator><call pos:start="215:14" pos:end="217:54"><name pos:start="215:14" pos:end="215:41">spapr_h_cas_compose_response</name><argument_list pos:start="215:42" pos:end="217:54">(<argument pos:start="215:43" pos:end="215:47"><expr pos:start="215:43" pos:end="215:47"><name pos:start="215:43" pos:end="215:47">spapr</name></expr></argument>, <argument pos:start="215:50" pos:end="215:56"><expr pos:start="215:50" pos:end="215:56"><name pos:start="215:50" pos:end="215:56"><name pos:start="215:50" pos:end="215:53">args</name><index pos:start="215:54" pos:end="215:56">[<expr pos:start="215:55" pos:end="215:55"><literal type="number" pos:start="215:55" pos:end="215:55">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="215:59" pos:end="215:65"><expr pos:start="215:59" pos:end="215:65"><name pos:start="215:59" pos:end="215:65"><name pos:start="215:59" pos:end="215:62">args</name><index pos:start="215:63" pos:end="215:65">[<expr pos:start="215:64" pos:end="215:64"><literal type="number" pos:start="215:64" pos:end="215:64">2</literal></expr>]</index></name></expr></argument>,

                                          <argument pos:start="217:43" pos:end="217:53"><expr pos:start="217:43" pos:end="217:53"><name pos:start="217:43" pos:end="217:53">ov5_updates</name></expr></argument>)</argument_list></call> <operator pos:start="217:56" pos:end="217:57">!=</operator> <literal type="number" pos:start="217:59" pos:end="217:59">0</literal><operator pos:start="217:60" pos:end="217:60">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:36"><expr pos:start="221:5" pos:end="221:35"><call pos:start="221:5" pos:end="221:35"><name pos:start="221:5" pos:end="221:22">spapr_ovec_cleanup</name><argument_list pos:start="221:23" pos:end="221:35">(<argument pos:start="221:24" pos:end="221:34"><expr pos:start="221:24" pos:end="221:34"><name pos:start="221:24" pos:end="221:34">ov5_updates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="225:5" pos:end="243:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:26">(<expr pos:start="225:9" pos:end="225:25"><name pos:start="225:9" pos:end="225:25"><name pos:start="225:9" pos:end="225:13">spapr</name><operator pos:start="225:14" pos:end="225:15">-&gt;</operator><name pos:start="225:16" pos:end="225:25">cas_reboot</name></name></expr>)</condition> <block pos:start="225:28" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:36">

        <expr_stmt pos:start="227:9" pos:end="227:36"><expr pos:start="227:9" pos:end="227:35"><call pos:start="227:9" pos:end="227:35"><name pos:start="227:9" pos:end="227:33">qemu_system_reset_request</name><argument_list pos:start="227:34" pos:end="227:35">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="229:7" pos:end="243:5">else <block pos:start="229:12" pos:end="243:5">{<block_content pos:start="235:9" pos:end="241:9">

        <comment type="block" pos:start="231:9" pos:end="233:79">/* If ppc_spapr_reset() did not set up a HPT but one is necessary

         * (because the guest isn't going to use radix) then set it up here. */</comment>

        <if_stmt pos:start="235:9" pos:end="241:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:60">(<expr pos:start="235:13" pos:end="235:59"><operator pos:start="235:13" pos:end="235:13">(</operator><name pos:start="235:14" pos:end="235:30"><name pos:start="235:14" pos:end="235:18">spapr</name><operator pos:start="235:19" pos:end="235:20">-&gt;</operator><name pos:start="235:21" pos:end="235:30">patb_entry</name></name> <operator pos:start="235:32" pos:end="235:32">&amp;</operator> <name pos:start="235:34" pos:end="235:42">PATBE1_GR</name><operator pos:start="235:43" pos:end="235:43">)</operator> <operator pos:start="235:45" pos:end="235:46">&amp;&amp;</operator> <operator pos:start="235:48" pos:end="235:48">!</operator><name pos:start="235:49" pos:end="235:59">guest_radix</name></expr>)</condition> <block pos:start="235:62" pos:end="241:9">{<block_content pos:start="239:13" pos:end="239:44">

            <comment type="block" pos:start="237:13" pos:end="237:42">/* legacy hash or new hash: */</comment>

            <expr_stmt pos:start="239:13" pos:end="239:44"><expr pos:start="239:13" pos:end="239:43"><call pos:start="239:13" pos:end="239:43"><name pos:start="239:13" pos:end="239:36">spapr_setup_hpt_and_vrma</name><argument_list pos:start="239:37" pos:end="239:43">(<argument pos:start="239:38" pos:end="239:42"><expr pos:start="239:38" pos:end="239:42"><name pos:start="239:38" pos:end="239:42">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="247:5" pos:end="247:21">return <expr pos:start="247:12" pos:end="247:20"><name pos:start="247:12" pos:end="247:20">H_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
