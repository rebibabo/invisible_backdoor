<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1094.c" pos:tabs="8"><function pos:start="1:1" pos:end="269:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">BlockMeasureInfo</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:38">qcow2_measure</name><parameter_list pos:start="1:39" pos:end="3:52">(<parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:47">QemuOpts</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">opts</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:78"><decl pos:start="1:56" pos:end="1:78"><type pos:start="1:56" pos:end="1:78"><name pos:start="1:56" pos:end="1:71">BlockDriverState</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:78">in_bs</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:44">Error</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier><modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="269:1">{<block_content pos:start="7:5" pos:end="267:16">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockMeasureInfo</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:26">info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">required</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="11:28" pos:end="11:71">/* bytes that contribute to required size */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:25">virtual_size</name></decl>;</decl_stmt> <comment type="block" pos:start="13:28" pos:end="13:59">/* disk size as seen by guest */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:26">refcount_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:22">l2_tables</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:23">cluster_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:16">optstr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">PreallocMode</name></type> <name pos:start="25:18" pos:end="25:25">prealloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:25">has_backing_file</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:38">/* Parse image creation options */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:68"><expr pos:start="33:5" pos:end="33:67"><name pos:start="33:5" pos:end="33:16">cluster_size</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:67"><name pos:start="33:20" pos:end="33:49">qcow2_opt_get_cluster_size_del</name><argument_list pos:start="33:50" pos:end="33:67">(<argument pos:start="33:51" pos:end="33:54"><expr pos:start="33:51" pos:end="33:54"><name pos:start="33:51" pos:end="33:54">opts</name></expr></argument>, <argument pos:start="33:57" pos:end="33:66"><expr pos:start="33:57" pos:end="33:66"><operator pos:start="33:57" pos:end="33:57">&amp;</operator><name pos:start="33:58" pos:end="33:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">local_err</name></expr>)</condition> <block pos:start="35:20" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:17">

        <goto pos:start="37:9" pos:end="37:17">goto <name pos:start="37:14" pos:end="37:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:58"><expr pos:start="43:5" pos:end="43:57"><name pos:start="43:5" pos:end="43:11">version</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:57"><name pos:start="43:15" pos:end="43:39">qcow2_opt_get_version_del</name><argument_list pos:start="43:40" pos:end="43:57">(<argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">opts</name></expr></argument>, <argument pos:start="43:47" pos:end="43:56"><expr pos:start="43:47" pos:end="43:56"><operator pos:start="43:47" pos:end="43:47">&amp;</operator><name pos:start="43:48" pos:end="43:56">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:17">local_err</name></expr>)</condition> <block pos:start="45:20" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:17">

        <goto pos:start="47:9" pos:end="47:17">goto <name pos:start="47:14" pos:end="47:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:79"><expr pos:start="53:5" pos:end="53:78"><name pos:start="53:5" pos:end="53:17">refcount_bits</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:78"><name pos:start="53:21" pos:end="53:51">qcow2_opt_get_refcount_bits_del</name><argument_list pos:start="53:52" pos:end="53:78">(<argument pos:start="53:53" pos:end="53:56"><expr pos:start="53:53" pos:end="53:56"><name pos:start="53:53" pos:end="53:56">opts</name></expr></argument>, <argument pos:start="53:59" pos:end="53:65"><expr pos:start="53:59" pos:end="53:65"><name pos:start="53:59" pos:end="53:65">version</name></expr></argument>, <argument pos:start="53:68" pos:end="53:77"><expr pos:start="53:68" pos:end="53:77"><operator pos:start="53:68" pos:end="53:68">&amp;</operator><name pos:start="53:69" pos:end="53:77">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:18">(<expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:17">local_err</name></expr>)</condition> <block pos:start="55:20" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:17">

        <goto pos:start="57:9" pos:end="57:17">goto <name pos:start="57:14" pos:end="57:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:56"><expr pos:start="63:5" pos:end="63:55"><name pos:start="63:5" pos:end="63:10">optstr</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:55"><name pos:start="63:14" pos:end="63:29">qemu_opt_get_del</name><argument_list pos:start="63:30" pos:end="63:55">(<argument pos:start="63:31" pos:end="63:34"><expr pos:start="63:31" pos:end="63:34"><name pos:start="63:31" pos:end="63:34">opts</name></expr></argument>, <argument pos:start="63:37" pos:end="63:54"><expr pos:start="63:37" pos:end="63:54"><name pos:start="63:37" pos:end="63:54">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="69:43"><expr pos:start="65:5" pos:end="69:42"><name pos:start="65:5" pos:end="65:12">prealloc</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="69:42"><name pos:start="65:16" pos:end="65:30">qapi_enum_parse</name><argument_list pos:start="65:31" pos:end="69:42">(<argument pos:start="65:32" pos:end="65:50"><expr pos:start="65:32" pos:end="65:50"><name pos:start="65:32" pos:end="65:50">PreallocMode_lookup</name></expr></argument>, <argument pos:start="65:53" pos:end="65:58"><expr pos:start="65:53" pos:end="65:58"><name pos:start="65:53" pos:end="65:58">optstr</name></expr></argument>,

                               <argument pos:start="67:32" pos:end="67:49"><expr pos:start="67:32" pos:end="67:49"><name pos:start="67:32" pos:end="67:49">PREALLOC_MODE__MAX</name></expr></argument>, <argument pos:start="67:52" pos:end="67:68"><expr pos:start="67:52" pos:end="67:68"><name pos:start="67:52" pos:end="67:68">PREALLOC_MODE_OFF</name></expr></argument>,

                               <argument pos:start="69:32" pos:end="69:41"><expr pos:start="69:32" pos:end="69:41"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:19"><expr pos:start="71:5" pos:end="71:18"><call pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:10">g_free</name><argument_list pos:start="71:11" pos:end="71:18">(<argument pos:start="71:12" pos:end="71:17"><expr pos:start="71:12" pos:end="71:17"><name pos:start="71:12" pos:end="71:17">optstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:18">(<expr pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:17">local_err</name></expr>)</condition> <block pos:start="73:20" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:17">

        <goto pos:start="75:9" pos:end="75:17">goto <name pos:start="75:14" pos:end="75:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:60"><expr pos:start="81:5" pos:end="81:59"><name pos:start="81:5" pos:end="81:10">optstr</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <call pos:start="81:14" pos:end="81:59"><name pos:start="81:14" pos:end="81:29">qemu_opt_get_del</name><argument_list pos:start="81:30" pos:end="81:59">(<argument pos:start="81:31" pos:end="81:34"><expr pos:start="81:31" pos:end="81:34"><name pos:start="81:31" pos:end="81:34">opts</name></expr></argument>, <argument pos:start="81:37" pos:end="81:58"><expr pos:start="81:37" pos:end="81:58"><name pos:start="81:37" pos:end="81:58">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:32"><expr pos:start="83:5" pos:end="83:31"><name pos:start="83:5" pos:end="83:20">has_backing_file</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <operator pos:start="83:24" pos:end="83:24">!</operator><operator pos:start="83:25" pos:end="83:25">!</operator><name pos:start="83:26" pos:end="83:31">optstr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:19"><expr pos:start="85:5" pos:end="85:18"><call pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:10">g_free</name><argument_list pos:start="85:11" pos:end="85:18">(<argument pos:start="85:12" pos:end="85:17"><expr pos:start="85:12" pos:end="85:17"><name pos:start="85:12" pos:end="85:17">optstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="91:46"><expr pos:start="89:5" pos:end="91:45"><name pos:start="89:5" pos:end="89:16">virtual_size</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="91:45"><name pos:start="89:20" pos:end="89:31">align_offset</name><argument_list pos:start="89:32" pos:end="91:45">(<argument pos:start="89:33" pos:end="89:78"><expr pos:start="89:33" pos:end="89:78"><call pos:start="89:33" pos:end="89:78"><name pos:start="89:33" pos:end="89:53">qemu_opt_get_size_del</name><argument_list pos:start="89:54" pos:end="89:78">(<argument pos:start="89:55" pos:end="89:58"><expr pos:start="89:55" pos:end="89:58"><name pos:start="89:55" pos:end="89:58">opts</name></expr></argument>, <argument pos:start="89:61" pos:end="89:74"><expr pos:start="89:61" pos:end="89:74"><name pos:start="89:61" pos:end="89:74">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="89:77" pos:end="89:77"><expr pos:start="89:77" pos:end="89:77"><literal type="number" pos:start="89:77" pos:end="89:77">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="91:33" pos:end="91:44"><expr pos:start="91:33" pos:end="91:44"><name pos:start="91:33" pos:end="91:44">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:47">/* Check that virtual disk size is valid */</comment>

    <expr_stmt pos:start="97:5" pos:end="99:62"><expr pos:start="97:5" pos:end="99:61"><name pos:start="97:5" pos:end="97:13">l2_tables</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <call pos:start="97:17" pos:end="99:61"><name pos:start="97:17" pos:end="97:28">DIV_ROUND_UP</name><argument_list pos:start="97:29" pos:end="99:61">(<argument pos:start="97:30" pos:end="97:56"><expr pos:start="97:30" pos:end="97:56"><name pos:start="97:30" pos:end="97:41">virtual_size</name> <operator pos:start="97:43" pos:end="97:43">/</operator> <name pos:start="97:45" pos:end="97:56">cluster_size</name></expr></argument>,

                             <argument pos:start="99:30" pos:end="99:60"><expr pos:start="99:30" pos:end="99:60"><name pos:start="99:30" pos:end="99:41">cluster_size</name> <operator pos:start="99:43" pos:end="99:43">/</operator> <sizeof pos:start="99:45" pos:end="99:60">sizeof<argument_list pos:start="99:51" pos:end="99:60">(<argument pos:start="99:52" pos:end="99:59"><expr pos:start="99:52" pos:end="99:59"><name pos:start="99:52" pos:end="99:59">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:56">(<expr pos:start="101:9" pos:end="101:55"><name pos:start="101:9" pos:end="101:17">l2_tables</name> <operator pos:start="101:19" pos:end="101:19">*</operator> <sizeof pos:start="101:21" pos:end="101:36">sizeof<argument_list pos:start="101:27" pos:end="101:36">(<argument pos:start="101:28" pos:end="101:35"><expr pos:start="101:28" pos:end="101:35"><name pos:start="101:28" pos:end="101:35">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="101:38" pos:end="101:38">&gt;</operator> <name pos:start="101:40" pos:end="101:55">QCOW_MAX_L1_SIZE</name></expr>)</condition> <block pos:start="101:58" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:17">

        <expr_stmt pos:start="103:9" pos:end="105:68"><expr pos:start="103:9" pos:end="105:67"><call pos:start="103:9" pos:end="105:67"><name pos:start="103:9" pos:end="103:18">error_setg</name><argument_list pos:start="103:19" pos:end="105:67">(<argument pos:start="103:20" pos:end="103:29"><expr pos:start="103:20" pos:end="103:29"><operator pos:start="103:20" pos:end="103:20">&amp;</operator><name pos:start="103:21" pos:end="103:29">local_err</name></expr></argument>, <argument pos:start="103:32" pos:end="105:66"><expr pos:start="103:32" pos:end="105:66"><literal type="string" pos:start="103:32" pos:end="103:61">"The image size is too large "</literal>

                               <literal type="string" pos:start="105:32" pos:end="105:66">"(try using a larger cluster size)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:17">goto <name pos:start="107:14" pos:end="107:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:33">/* Account for input image */</comment>

    <if_stmt pos:start="115:5" pos:end="221:5"><if pos:start="115:5" pos:end="221:5">if <condition pos:start="115:8" pos:end="115:14">(<expr pos:start="115:9" pos:end="115:13"><name pos:start="115:9" pos:end="115:13">in_bs</name></expr>)</condition> <block pos:start="115:16" pos:end="221:5">{<block_content pos:start="117:9" pos:end="219:9">

        <decl_stmt pos:start="117:9" pos:end="117:46"><decl pos:start="117:9" pos:end="117:45"><type pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:15">int64_t</name></type> <name pos:start="117:17" pos:end="117:21">ssize</name> <init pos:start="117:23" pos:end="117:45">= <expr pos:start="117:25" pos:end="117:45"><call pos:start="117:25" pos:end="117:45"><name pos:start="117:25" pos:end="117:38">bdrv_getlength</name><argument_list pos:start="117:39" pos:end="117:45">(<argument pos:start="117:40" pos:end="117:44"><expr pos:start="117:40" pos:end="117:44"><name pos:start="117:40" pos:end="117:44">in_bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="127:9">if <condition pos:start="119:12" pos:end="119:22">(<expr pos:start="119:13" pos:end="119:21"><name pos:start="119:13" pos:end="119:17">ssize</name> <operator pos:start="119:19" pos:end="119:19">&lt;</operator> <literal type="number" pos:start="119:21" pos:end="119:21">0</literal></expr>)</condition> <block pos:start="119:24" pos:end="127:9">{<block_content pos:start="121:13" pos:end="125:21">

            <expr_stmt pos:start="121:13" pos:end="123:65"><expr pos:start="121:13" pos:end="123:64"><call pos:start="121:13" pos:end="123:64"><name pos:start="121:13" pos:end="121:28">error_setg_errno</name><argument_list pos:start="121:29" pos:end="123:64">(<argument pos:start="121:30" pos:end="121:39"><expr pos:start="121:30" pos:end="121:39"><operator pos:start="121:30" pos:end="121:30">&amp;</operator><name pos:start="121:31" pos:end="121:39">local_err</name></expr></argument>, <argument pos:start="121:42" pos:end="121:47"><expr pos:start="121:42" pos:end="121:47"><operator pos:start="121:42" pos:end="121:42">-</operator><name pos:start="121:43" pos:end="121:47">ssize</name></expr></argument>,

                             <argument pos:start="123:30" pos:end="123:63"><expr pos:start="123:30" pos:end="123:63"><literal type="string" pos:start="123:30" pos:end="123:63">"Unable to get image virtual_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:21">goto <name pos:start="125:18" pos:end="125:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="131:9" pos:end="131:57"><expr pos:start="131:9" pos:end="131:56"><name pos:start="131:9" pos:end="131:20">virtual_size</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <call pos:start="131:24" pos:end="131:56"><name pos:start="131:24" pos:end="131:35">align_offset</name><argument_list pos:start="131:36" pos:end="131:56">(<argument pos:start="131:37" pos:end="131:41"><expr pos:start="131:37" pos:end="131:41"><name pos:start="131:37" pos:end="131:41">ssize</name></expr></argument>, <argument pos:start="131:44" pos:end="131:55"><expr pos:start="131:44" pos:end="131:55"><name pos:start="131:44" pos:end="131:55">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="219:9"><if pos:start="135:9" pos:end="149:9">if <condition pos:start="135:12" pos:end="135:29">(<expr pos:start="135:13" pos:end="135:28"><name pos:start="135:13" pos:end="135:28">has_backing_file</name></expr>)</condition> <block pos:start="135:31" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:36">

            <comment type="block" pos:start="137:13" pos:end="145:15">/* We don't how much of the backing chain is shared by the input

             * image and the new image file.  In the worst case the new image's

             * backing file has nothing in common with the input image.  Be

             * conservative and assume all clusters need to be written.

             */</comment>

            <expr_stmt pos:start="147:13" pos:end="147:36"><expr pos:start="147:13" pos:end="147:35"><name pos:start="147:13" pos:end="147:20">required</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <name pos:start="147:24" pos:end="147:35">virtual_size</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="149:11" pos:end="219:9">else <block pos:start="149:16" pos:end="219:9">{<block_content pos:start="151:13" pos:end="217:13">

            <decl_stmt pos:start="151:13" pos:end="151:66"><decl pos:start="151:13" pos:end="151:65"><type pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">int</name></type> <name pos:start="151:17" pos:end="151:31">cluster_sectors</name> <init pos:start="151:33" pos:end="151:65">= <expr pos:start="151:35" pos:end="151:65"><name pos:start="151:35" pos:end="151:46">cluster_size</name> <operator pos:start="151:48" pos:end="151:48">/</operator> <name pos:start="151:50" pos:end="151:65">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="153:13" pos:end="153:31"><decl pos:start="153:13" pos:end="153:30"><type pos:start="153:13" pos:end="153:19"><name pos:start="153:13" pos:end="153:19">int64_t</name></type> <name pos:start="153:21" pos:end="153:30">sector_num</name></decl>;</decl_stmt>

            <decl_stmt pos:start="155:13" pos:end="155:25"><decl pos:start="155:13" pos:end="155:24"><type pos:start="155:13" pos:end="155:15"><name pos:start="155:13" pos:end="155:15">int</name></type> <name pos:start="155:17" pos:end="155:20">pnum</name> <init pos:start="155:22" pos:end="155:24">= <expr pos:start="155:24" pos:end="155:24"><literal type="number" pos:start="155:24" pos:end="155:24">0</literal></expr></init></decl>;</decl_stmt>



            <for pos:start="159:13" pos:end="217:13">for <control pos:start="159:17" pos:end="163:36">(<init pos:start="159:18" pos:end="159:32"><expr pos:start="159:18" pos:end="159:31"><name pos:start="159:18" pos:end="159:27">sector_num</name> <operator pos:start="159:29" pos:end="159:29">=</operator> <literal type="number" pos:start="159:31" pos:end="159:31">0</literal></expr>;</init>

                 <condition pos:start="161:18" pos:end="161:55"><expr pos:start="161:18" pos:end="161:54"><name pos:start="161:18" pos:end="161:27">sector_num</name> <operator pos:start="161:29" pos:end="161:29">&lt;</operator> <name pos:start="161:31" pos:end="161:35">ssize</name> <operator pos:start="161:37" pos:end="161:37">/</operator> <name pos:start="161:39" pos:end="161:54">BDRV_SECTOR_SIZE</name></expr>;</condition>

                 <incr pos:start="163:18" pos:end="163:35"><expr pos:start="163:18" pos:end="163:35"><name pos:start="163:18" pos:end="163:27">sector_num</name> <operator pos:start="163:29" pos:end="163:30">+=</operator> <name pos:start="163:32" pos:end="163:35">pnum</name></expr></incr>)</control> <block pos:start="163:38" pos:end="217:13">{<block_content pos:start="165:17" pos:end="215:17">

                <decl_stmt pos:start="165:17" pos:end="167:46"><decl pos:start="165:17" pos:end="167:45"><type pos:start="165:17" pos:end="165:19"><name pos:start="165:17" pos:end="165:19">int</name></type> <name pos:start="165:21" pos:end="165:30">nb_sectors</name> <init pos:start="165:32" pos:end="167:45">= <expr pos:start="165:34" pos:end="167:45"><call pos:start="165:34" pos:end="167:45"><name pos:start="165:34" pos:end="165:36">MAX</name><argument_list pos:start="165:37" pos:end="167:45">(<argument pos:start="165:38" pos:end="165:74"><expr pos:start="165:38" pos:end="165:74"><name pos:start="165:38" pos:end="165:42">ssize</name> <operator pos:start="165:44" pos:end="165:44">/</operator> <name pos:start="165:46" pos:end="165:61">BDRV_SECTOR_SIZE</name> <operator pos:start="165:63" pos:end="165:63">-</operator> <name pos:start="165:65" pos:end="165:74">sector_num</name></expr></argument>,

                                     <argument pos:start="167:38" pos:end="167:44"><expr pos:start="167:38" pos:end="167:44"><name pos:start="167:38" pos:end="167:44">INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="169:17" pos:end="169:39"><decl pos:start="169:17" pos:end="169:38"><type pos:start="169:17" pos:end="169:34"><name pos:start="169:17" pos:end="169:32">BlockDriverState</name> <modifier pos:start="169:34" pos:end="169:34">*</modifier></type><name pos:start="169:35" pos:end="169:38">file</name></decl>;</decl_stmt>

                <decl_stmt pos:start="171:17" pos:end="171:28"><decl pos:start="171:17" pos:end="171:27"><type pos:start="171:17" pos:end="171:23"><name pos:start="171:17" pos:end="171:23">int64_t</name></type> <name pos:start="171:25" pos:end="171:27">ret</name></decl>;</decl_stmt>



                <expr_stmt pos:start="175:17" pos:end="179:64"><expr pos:start="175:17" pos:end="179:63"><name pos:start="175:17" pos:end="175:19">ret</name> <operator pos:start="175:21" pos:end="175:21">=</operator> <call pos:start="175:23" pos:end="179:63"><name pos:start="175:23" pos:end="175:49">bdrv_get_block_status_above</name><argument_list pos:start="175:50" pos:end="179:63">(<argument pos:start="175:51" pos:end="175:55"><expr pos:start="175:51" pos:end="175:55"><name pos:start="175:51" pos:end="175:55">in_bs</name></expr></argument>, <argument pos:start="175:58" pos:end="175:61"><expr pos:start="175:58" pos:end="175:61"><name pos:start="175:58" pos:end="175:61">NULL</name></expr></argument>,

                                                  <argument pos:start="177:51" pos:end="177:60"><expr pos:start="177:51" pos:end="177:60"><name pos:start="177:51" pos:end="177:60">sector_num</name></expr></argument>, <argument pos:start="177:63" pos:end="177:72"><expr pos:start="177:63" pos:end="177:72"><name pos:start="177:63" pos:end="177:72">nb_sectors</name></expr></argument>,

                                                  <argument pos:start="179:51" pos:end="179:55"><expr pos:start="179:51" pos:end="179:55"><operator pos:start="179:51" pos:end="179:51">&amp;</operator><name pos:start="179:52" pos:end="179:55">pnum</name></expr></argument>, <argument pos:start="179:58" pos:end="179:62"><expr pos:start="179:58" pos:end="179:62"><operator pos:start="179:58" pos:end="179:58">&amp;</operator><name pos:start="179:59" pos:end="179:62">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="181:17" pos:end="189:17"><if pos:start="181:17" pos:end="189:17">if <condition pos:start="181:20" pos:end="181:28">(<expr pos:start="181:21" pos:end="181:27"><name pos:start="181:21" pos:end="181:23">ret</name> <operator pos:start="181:25" pos:end="181:25">&lt;</operator> <literal type="number" pos:start="181:27" pos:end="181:27">0</literal></expr>)</condition> <block pos:start="181:30" pos:end="189:17">{<block_content pos:start="183:21" pos:end="187:29">

                    <expr_stmt pos:start="183:21" pos:end="185:67"><expr pos:start="183:21" pos:end="185:66"><call pos:start="183:21" pos:end="185:66"><name pos:start="183:21" pos:end="183:36">error_setg_errno</name><argument_list pos:start="183:37" pos:end="185:66">(<argument pos:start="183:38" pos:end="183:47"><expr pos:start="183:38" pos:end="183:47"><operator pos:start="183:38" pos:end="183:38">&amp;</operator><name pos:start="183:39" pos:end="183:47">local_err</name></expr></argument>, <argument pos:start="183:50" pos:end="183:53"><expr pos:start="183:50" pos:end="183:53"><operator pos:start="183:50" pos:end="183:50">-</operator><name pos:start="183:51" pos:end="183:53">ret</name></expr></argument>,

                                     <argument pos:start="185:38" pos:end="185:65"><expr pos:start="185:38" pos:end="185:65"><literal type="string" pos:start="185:38" pos:end="185:65">"Unable to get block status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="187:21" pos:end="187:29">goto <name pos:start="187:26" pos:end="187:28">err</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="193:17" pos:end="215:17"><if pos:start="193:17" pos:end="197:17">if <condition pos:start="193:20" pos:end="193:42">(<expr pos:start="193:21" pos:end="193:41"><name pos:start="193:21" pos:end="193:23">ret</name> <operator pos:start="193:25" pos:end="193:25">&amp;</operator> <name pos:start="193:27" pos:end="193:41">BDRV_BLOCK_ZERO</name></expr>)</condition> <block pos:start="193:44" pos:end="197:17">{<block_content>

                    <comment type="block" pos:start="195:21" pos:end="195:71">/* Skip zero regions (safe with no backing file) */</comment>

                </block_content>}</block></if> <if type="elseif" pos:start="197:19" pos:end="215:17">else if <condition pos:start="197:27" pos:end="199:68">(<expr pos:start="197:28" pos:end="199:67"><operator pos:start="197:28" pos:end="197:28">(</operator><name pos:start="197:29" pos:end="197:31">ret</name> <operator pos:start="197:33" pos:end="197:33">&amp;</operator> <operator pos:start="197:35" pos:end="197:35">(</operator><name pos:start="197:36" pos:end="197:50">BDRV_BLOCK_DATA</name> <operator pos:start="197:52" pos:end="197:52">|</operator> <name pos:start="197:54" pos:end="197:73">BDRV_BLOCK_ALLOCATED</name><operator pos:start="197:74" pos:end="197:74">)</operator><operator pos:start="197:75" pos:end="197:75">)</operator> <operator pos:start="197:77" pos:end="197:78">==</operator>

                           <operator pos:start="199:28" pos:end="199:28">(</operator><name pos:start="199:29" pos:end="199:43">BDRV_BLOCK_DATA</name> <operator pos:start="199:45" pos:end="199:45">|</operator> <name pos:start="199:47" pos:end="199:66">BDRV_BLOCK_ALLOCATED</name><operator pos:start="199:67" pos:end="199:67">)</operator></expr>)</condition> <block pos:start="199:70" pos:end="215:17">{<block_content pos:start="203:21" pos:end="213:49">

                    <comment type="block" pos:start="201:21" pos:end="201:74">/* Extend pnum to end of cluster for next iteration */</comment>

                    <expr_stmt pos:start="203:21" pos:end="205:38"><expr pos:start="203:21" pos:end="205:37"><name pos:start="203:21" pos:end="203:24">pnum</name> <operator pos:start="203:26" pos:end="203:26">=</operator> <call pos:start="203:28" pos:end="203:71"><name pos:start="203:28" pos:end="203:35">ROUND_UP</name><argument_list pos:start="203:36" pos:end="203:71">(<argument pos:start="203:37" pos:end="203:53"><expr pos:start="203:37" pos:end="203:53"><name pos:start="203:37" pos:end="203:46">sector_num</name> <operator pos:start="203:48" pos:end="203:48">+</operator> <name pos:start="203:50" pos:end="203:53">pnum</name></expr></argument>, <argument pos:start="203:56" pos:end="203:70"><expr pos:start="203:56" pos:end="203:70"><name pos:start="203:56" pos:end="203:70">cluster_sectors</name></expr></argument>)</argument_list></call> <operator pos:start="203:73" pos:end="203:73">-</operator>

                           <name pos:start="205:28" pos:end="205:37">sector_num</name></expr>;</expr_stmt>



                    <comment type="block" pos:start="209:21" pos:end="209:51">/* Count clusters we've seen */</comment>

                    <expr_stmt pos:start="211:21" pos:end="213:49"><expr pos:start="211:21" pos:end="213:48"><name pos:start="211:21" pos:end="211:28">required</name> <operator pos:start="211:30" pos:end="211:31">+=</operator> <operator pos:start="211:33" pos:end="211:33">(</operator><name pos:start="211:34" pos:end="211:43">sector_num</name> <operator pos:start="211:45" pos:end="211:45">%</operator> <name pos:start="211:47" pos:end="211:61">cluster_sectors</name> <operator pos:start="211:63" pos:end="211:63">+</operator> <name pos:start="211:65" pos:end="211:68">pnum</name><operator pos:start="211:69" pos:end="211:69">)</operator> <operator pos:start="211:71" pos:end="211:71">*</operator>

                                <name pos:start="213:33" pos:end="213:48">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="225:5" pos:end="229:7">/* Take into account preallocation.  Nothing special is needed for

     * PREALLOC_MODE_METADATA since metadata is always counted.

     */</comment>

    <if_stmt pos:start="231:5" pos:end="235:5"><if pos:start="231:5" pos:end="235:5">if <condition pos:start="231:8" pos:end="231:75">(<expr pos:start="231:9" pos:end="231:74"><name pos:start="231:9" pos:end="231:16">prealloc</name> <operator pos:start="231:18" pos:end="231:19">==</operator> <name pos:start="231:21" pos:end="231:38">PREALLOC_MODE_FULL</name> <operator pos:start="231:40" pos:end="231:41">||</operator> <name pos:start="231:43" pos:end="231:50">prealloc</name> <operator pos:start="231:52" pos:end="231:53">==</operator> <name pos:start="231:55" pos:end="231:74">PREALLOC_MODE_FALLOC</name></expr>)</condition> <block pos:start="231:77" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:32">

        <expr_stmt pos:start="233:9" pos:end="233:32"><expr pos:start="233:9" pos:end="233:31"><name pos:start="233:9" pos:end="233:16">required</name> <operator pos:start="233:18" pos:end="233:18">=</operator> <name pos:start="233:20" pos:end="233:31">virtual_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:38"><expr pos:start="239:5" pos:end="239:37"><name pos:start="239:5" pos:end="239:8">info</name> <operator pos:start="239:10" pos:end="239:10">=</operator> <call pos:start="239:12" pos:end="239:37"><name pos:start="239:12" pos:end="239:16">g_new</name><argument_list pos:start="239:17" pos:end="239:37">(<argument pos:start="239:18" pos:end="239:33"><expr pos:start="239:18" pos:end="239:33"><name pos:start="239:18" pos:end="239:33">BlockMeasureInfo</name></expr></argument>, <argument pos:start="239:36" pos:end="239:36"><expr pos:start="239:36" pos:end="239:36"><literal type="number" pos:start="239:36" pos:end="239:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="245:55"><expr pos:start="241:5" pos:end="245:54"><name pos:start="241:5" pos:end="241:25"><name pos:start="241:5" pos:end="241:8">info</name><operator pos:start="241:9" pos:end="241:10">-&gt;</operator><name pos:start="241:11" pos:end="241:25">fully_allocated</name></name> <operator pos:start="241:27" pos:end="241:27">=</operator>

        <call pos:start="243:9" pos:end="245:54"><name pos:start="243:9" pos:end="243:32">qcow2_calc_prealloc_size</name><argument_list pos:start="243:33" pos:end="245:54">(<argument pos:start="243:34" pos:end="243:45"><expr pos:start="243:34" pos:end="243:45"><name pos:start="243:34" pos:end="243:45">virtual_size</name></expr></argument>, <argument pos:start="243:48" pos:end="243:59"><expr pos:start="243:48" pos:end="243:59"><name pos:start="243:48" pos:end="243:59">cluster_size</name></expr></argument>,

                                 <argument pos:start="245:34" pos:end="245:53"><expr pos:start="245:34" pos:end="245:53"><call pos:start="245:34" pos:end="245:53"><name pos:start="245:34" pos:end="245:38">ctz32</name><argument_list pos:start="245:39" pos:end="245:53">(<argument pos:start="245:40" pos:end="245:52"><expr pos:start="245:40" pos:end="245:52"><name pos:start="245:40" pos:end="245:52">refcount_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="249:5" pos:end="255:7">/* Remove data clusters that are not required.  This overestimates the

     * required size because metadata needed for the fully allocated file is

     * still counted.

     */</comment>

    <expr_stmt pos:start="257:5" pos:end="257:69"><expr pos:start="257:5" pos:end="257:68"><name pos:start="257:5" pos:end="257:18"><name pos:start="257:5" pos:end="257:8">info</name><operator pos:start="257:9" pos:end="257:10">-&gt;</operator><name pos:start="257:11" pos:end="257:18">required</name></name> <operator pos:start="257:20" pos:end="257:20">=</operator> <name pos:start="257:22" pos:end="257:42"><name pos:start="257:22" pos:end="257:25">info</name><operator pos:start="257:26" pos:end="257:27">-&gt;</operator><name pos:start="257:28" pos:end="257:42">fully_allocated</name></name> <operator pos:start="257:44" pos:end="257:44">-</operator> <name pos:start="257:46" pos:end="257:57">virtual_size</name> <operator pos:start="257:59" pos:end="257:59">+</operator> <name pos:start="257:61" pos:end="257:68">required</name></expr>;</expr_stmt>

    <return pos:start="259:5" pos:end="259:16">return <expr pos:start="259:12" pos:end="259:15"><name pos:start="259:12" pos:end="259:15">info</name></expr>;</return>



<label pos:start="263:1" pos:end="263:4"><name pos:start="263:1" pos:end="263:3">err</name>:</label>

    <expr_stmt pos:start="265:5" pos:end="265:37"><expr pos:start="265:5" pos:end="265:36"><call pos:start="265:5" pos:end="265:36"><name pos:start="265:5" pos:end="265:19">error_propagate</name><argument_list pos:start="265:20" pos:end="265:36">(<argument pos:start="265:21" pos:end="265:24"><expr pos:start="265:21" pos:end="265:24"><name pos:start="265:21" pos:end="265:24">errp</name></expr></argument>, <argument pos:start="265:27" pos:end="265:35"><expr pos:start="265:27" pos:end="265:35"><name pos:start="265:27" pos:end="265:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="267:5" pos:end="267:16">return <expr pos:start="267:12" pos:end="267:15"><name pos:start="267:12" pos:end="267:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
