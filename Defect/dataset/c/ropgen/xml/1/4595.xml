<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4595.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:46">vfio_rtl8168_window_quirk_read</name><parameter_list pos:start="1:47" pos:end="3:74">(<parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:59">opaque</name></decl></parameter>,

                                               <parameter pos:start="3:48" pos:end="3:58"><decl pos:start="3:48" pos:end="3:58"><type pos:start="3:48" pos:end="3:58"><name pos:start="3:48" pos:end="3:53">hwaddr</name></type> <name pos:start="3:55" pos:end="3:58">addr</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:73"><decl pos:start="3:61" pos:end="3:73"><type pos:start="3:61" pos:end="3:73"><name pos:start="3:61" pos:end="3:68">unsigned</name></type> <name pos:start="3:70" pos:end="3:73">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="87:1">{<block_content pos:start="7:5" pos:end="85:47">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">VFIOQuirk</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">quirk</name> <init pos:start="7:22" pos:end="7:29">= <expr pos:start="7:24" pos:end="7:29"><name pos:start="7:24" pos:end="7:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">VFIOPCIDevice</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:23">vdev</name> <init pos:start="9:25" pos:end="9:37">= <expr pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:31">quirk</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:37">vdev</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="73:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">addr</name></expr>)</condition> <block pos:start="13:19" pos:end="73:5">{<block_content pos:start="15:5" pos:end="71:9">

    <case pos:start="15:5" pos:end="15:11">case <expr pos:start="15:10" pos:end="15:10"><literal type="number" pos:start="15:10" pos:end="15:10">4</literal></expr>:</case> <comment type="block" pos:start="15:13" pos:end="15:25">/* address */</comment>

        <if_stmt pos:start="17:9" pos:end="29:9"><if pos:start="17:9" pos:end="29:9">if <condition pos:start="17:12" pos:end="17:30">(<expr pos:start="17:13" pos:end="17:29"><name pos:start="17:13" pos:end="17:29"><name pos:start="17:13" pos:end="17:17">quirk</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:23">data</name><operator pos:start="17:24" pos:end="17:24">.</operator><name pos:start="17:25" pos:end="17:29">flags</name></name></expr>)</condition> <block pos:start="17:32" pos:end="29:9">{<block_content pos:start="19:13" pos:end="27:59">

            <expr_stmt pos:start="19:13" pos:end="23:41"><expr pos:start="19:13" pos:end="23:40"><call pos:start="19:13" pos:end="23:40"><name pos:start="19:13" pos:end="19:53">trace_vfio_rtl8168_window_quirk_read_fake</name><argument_list pos:start="19:54" pos:end="23:40">(

                    <argument pos:start="21:21" pos:end="21:51"><expr pos:start="21:21" pos:end="21:51"><call pos:start="21:21" pos:end="21:51"><name pos:start="21:21" pos:end="21:38">memory_region_name</name><argument_list pos:start="21:39" pos:end="21:51">(<argument pos:start="21:40" pos:end="21:50"><expr pos:start="21:40" pos:end="21:50"><operator pos:start="21:40" pos:end="21:40">&amp;</operator><name pos:start="21:41" pos:end="21:50"><name pos:start="21:41" pos:end="21:45">quirk</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:50">mem</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="23:21" pos:end="23:39"><expr pos:start="23:21" pos:end="23:39"><name pos:start="23:21" pos:end="23:39"><name pos:start="23:21" pos:end="23:24">vdev</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:34">vbasedev</name><operator pos:start="23:35" pos:end="23:35">.</operator><name pos:start="23:36" pos:end="23:39">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="27:13" pos:end="27:59">return <expr pos:start="27:20" pos:end="27:58"><name pos:start="27:20" pos:end="27:44"><name pos:start="27:20" pos:end="27:24">quirk</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:30">data</name><operator pos:start="27:31" pos:end="27:31">.</operator><name pos:start="27:32" pos:end="27:44">address_match</name></name> <operator pos:start="27:46" pos:end="27:46">^</operator> <literal type="number" pos:start="27:48" pos:end="27:58">0x80000000U</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:11">case <expr pos:start="33:10" pos:end="33:10"><literal type="number" pos:start="33:10" pos:end="33:10">0</literal></expr>:</case> <comment type="block" pos:start="33:13" pos:end="33:22">/* data */</comment>

        <if_stmt pos:start="35:9" pos:end="71:9"><if pos:start="35:9" pos:end="71:9">if <condition pos:start="35:12" pos:end="35:30">(<expr pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:17">quirk</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:23">data</name><operator pos:start="35:24" pos:end="35:24">.</operator><name pos:start="35:25" pos:end="35:29">flags</name></name></expr>)</condition> <block pos:start="35:32" pos:end="71:9">{<block_content pos:start="37:13" pos:end="69:23">

            <decl_stmt pos:start="37:13" pos:end="37:25"><decl pos:start="37:13" pos:end="37:24"><type pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:20">uint64_t</name></type> <name pos:start="37:22" pos:end="37:24">val</name></decl>;</decl_stmt>



            <expr_stmt pos:start="41:13" pos:end="45:41"><expr pos:start="41:13" pos:end="45:40"><call pos:start="41:13" pos:end="45:40"><name pos:start="41:13" pos:end="41:54">trace_vfio_rtl8168_window_quirk_read_table</name><argument_list pos:start="41:55" pos:end="45:40">(

                    <argument pos:start="43:21" pos:end="43:51"><expr pos:start="43:21" pos:end="43:51"><call pos:start="43:21" pos:end="43:51"><name pos:start="43:21" pos:end="43:38">memory_region_name</name><argument_list pos:start="43:39" pos:end="43:51">(<argument pos:start="43:40" pos:end="43:50"><expr pos:start="43:40" pos:end="43:50"><operator pos:start="43:40" pos:end="43:40">&amp;</operator><name pos:start="43:41" pos:end="43:50"><name pos:start="43:41" pos:end="43:45">quirk</name><operator pos:start="43:46" pos:end="43:47">-&gt;</operator><name pos:start="43:48" pos:end="43:50">mem</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="45:21" pos:end="45:39"><expr pos:start="45:21" pos:end="45:39"><name pos:start="45:21" pos:end="45:39"><name pos:start="45:21" pos:end="45:24">vdev</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:34">vbasedev</name><operator pos:start="45:35" pos:end="45:35">.</operator><name pos:start="45:36" pos:end="45:39">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:62">(<expr pos:start="49:17" pos:end="49:61"><operator pos:start="49:17" pos:end="49:17">!</operator><operator pos:start="49:18" pos:end="49:18">(</operator><name pos:start="49:19" pos:end="49:40"><name pos:start="49:19" pos:end="49:22">vdev</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:28">pdev</name><operator pos:start="49:29" pos:end="49:29">.</operator><name pos:start="49:30" pos:end="49:40">cap_present</name></name> <operator pos:start="49:42" pos:end="49:42">&amp;</operator> <name pos:start="49:44" pos:end="49:60">QEMU_PCI_CAP_MSIX</name><operator pos:start="49:61" pos:end="49:61">)</operator></expr>)</condition> <block pos:start="49:64" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:25">

                <return pos:start="51:17" pos:end="51:25">return <expr pos:start="51:24" pos:end="51:24"><literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="57:13" pos:end="67:64"><expr pos:start="57:13" pos:end="67:63"><call pos:start="57:13" pos:end="67:63"><name pos:start="57:13" pos:end="57:39">memory_region_dispatch_read</name><argument_list pos:start="57:40" pos:end="67:63">(<argument pos:start="57:41" pos:end="57:67"><expr pos:start="57:41" pos:end="57:67"><operator pos:start="57:41" pos:end="57:41">&amp;</operator><name pos:start="57:42" pos:end="57:67"><name pos:start="57:42" pos:end="57:45">vdev</name><operator pos:start="57:46" pos:end="57:47">-&gt;</operator><name pos:start="57:48" pos:end="57:51">pdev</name><operator pos:start="57:52" pos:end="57:52">.</operator><name pos:start="57:53" pos:end="57:67">msix_table_mmio</name></name></expr></argument>,

                                        <argument pos:start="59:41" pos:end="61:57"><expr pos:start="59:41" pos:end="61:57"><operator pos:start="59:41" pos:end="59:41">(</operator><name pos:start="59:42" pos:end="59:47">hwaddr</name><operator pos:start="59:48" pos:end="59:48">)</operator><operator pos:start="59:49" pos:end="59:49">(</operator><name pos:start="59:50" pos:end="59:74"><name pos:start="59:50" pos:end="59:54">quirk</name><operator pos:start="59:55" pos:end="59:56">-&gt;</operator><name pos:start="59:57" pos:end="59:60">data</name><operator pos:start="59:61" pos:end="59:61">.</operator><name pos:start="59:62" pos:end="59:74">address_match</name></name>

                                                 <operator pos:start="61:50" pos:end="61:50">&amp;</operator> <literal type="number" pos:start="61:52" pos:end="61:56">0xfff</literal><operator pos:start="61:57" pos:end="61:57">)</operator></expr></argument>,

                                        <argument pos:start="63:41" pos:end="63:44"><expr pos:start="63:41" pos:end="63:44"><operator pos:start="63:41" pos:end="63:41">&amp;</operator><name pos:start="63:42" pos:end="63:44">val</name></expr></argument>,

                                        <argument pos:start="65:41" pos:end="65:44"><expr pos:start="65:41" pos:end="65:44"><name pos:start="65:41" pos:end="65:44">size</name></expr></argument>,

                                        <argument pos:start="67:41" pos:end="67:62"><expr pos:start="67:41" pos:end="67:62"><name pos:start="67:41" pos:end="67:62">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:23">return <expr pos:start="69:20" pos:end="69:22"><name pos:start="69:20" pos:end="69:22">val</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="77:5" pos:end="79:69"><expr pos:start="77:5" pos:end="79:68"><call pos:start="77:5" pos:end="79:68"><name pos:start="77:5" pos:end="77:47">trace_vfio_rtl8168_window_quirk_read_direct</name><argument_list pos:start="77:48" pos:end="79:68">(<argument pos:start="77:49" pos:end="77:79"><expr pos:start="77:49" pos:end="77:79"><call pos:start="77:49" pos:end="77:79"><name pos:start="77:49" pos:end="77:66">memory_region_name</name><argument_list pos:start="77:67" pos:end="77:79">(<argument pos:start="77:68" pos:end="77:78"><expr pos:start="77:68" pos:end="77:78"><operator pos:start="77:68" pos:end="77:68">&amp;</operator><name pos:start="77:69" pos:end="77:78"><name pos:start="77:69" pos:end="77:73">quirk</name><operator pos:start="77:74" pos:end="77:75">-&gt;</operator><name pos:start="77:76" pos:end="77:78">mem</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                <argument pos:start="79:49" pos:end="79:67"><expr pos:start="79:49" pos:end="79:67"><name pos:start="79:49" pos:end="79:67"><name pos:start="79:49" pos:end="79:52">vdev</name><operator pos:start="79:53" pos:end="79:54">-&gt;</operator><name pos:start="79:55" pos:end="79:62">vbasedev</name><operator pos:start="79:63" pos:end="79:63">.</operator><name pos:start="79:64" pos:end="79:67">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="83:5" pos:end="85:47">return <expr pos:start="83:12" pos:end="85:46"><call pos:start="83:12" pos:end="85:46"><name pos:start="83:12" pos:end="83:27">vfio_region_read</name><argument_list pos:start="83:28" pos:end="85:46">(<argument pos:start="83:29" pos:end="83:63"><expr pos:start="83:29" pos:end="83:63"><operator pos:start="83:29" pos:end="83:29">&amp;</operator><name pos:start="83:30" pos:end="83:56"><name pos:start="83:30" pos:end="83:33">vdev</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:39">bars</name><index pos:start="83:40" pos:end="83:56">[<expr pos:start="83:41" pos:end="83:55"><name pos:start="83:41" pos:end="83:55"><name pos:start="83:41" pos:end="83:45">quirk</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:51">data</name><operator pos:start="83:52" pos:end="83:52">.</operator><name pos:start="83:53" pos:end="83:55">bar</name></name></expr>]</index></name><operator pos:start="83:57" pos:end="83:57">.</operator><name pos:start="83:58" pos:end="83:63">region</name></expr></argument>,

                            <argument pos:start="85:29" pos:end="85:39"><expr pos:start="85:29" pos:end="85:39"><name pos:start="85:29" pos:end="85:32">addr</name> <operator pos:start="85:34" pos:end="85:34">+</operator> <literal type="number" pos:start="85:36" pos:end="85:39">0x70</literal></expr></argument>, <argument pos:start="85:42" pos:end="85:45"><expr pos:start="85:42" pos:end="85:45"><name pos:start="85:42" pos:end="85:45">size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
