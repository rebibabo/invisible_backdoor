<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19560.c" pos:tabs="8"><function pos:start="1:1" pos:end="20:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">uc32_cpu_class_init</name><parameter_list pos:start="1:32" pos:end="1:60">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:43">ObjectClass</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">oc</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:53">void</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">data</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="20:1">{<block_content pos:start="3:5" pos:end="19:33">
    <decl_stmt pos:start="3:5" pos:end="3:39"><decl pos:start="3:5" pos:end="3:38"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:15">DeviceClass</name> <modifier pos:start="3:17" pos:end="3:17">*</modifier></type><name pos:start="3:18" pos:end="3:19">dc</name> <init pos:start="3:21" pos:end="3:38">= <expr pos:start="3:23" pos:end="3:38"><call pos:start="3:23" pos:end="3:38"><name pos:start="3:23" pos:end="3:34">DEVICE_CLASS</name><argument_list pos:start="3:35" pos:end="3:38">(<argument pos:start="3:36" pos:end="3:37"><expr pos:start="3:36" pos:end="3:37"><name pos:start="3:36" pos:end="3:37">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:33"><decl pos:start="4:5" pos:end="4:32"><type pos:start="4:5" pos:end="4:14"><name pos:start="4:5" pos:end="4:12">CPUClass</name> <modifier pos:start="4:14" pos:end="4:14">*</modifier></type><name pos:start="4:15" pos:end="4:16">cc</name> <init pos:start="4:18" pos:end="4:32">= <expr pos:start="4:20" pos:end="4:32"><call pos:start="4:20" pos:end="4:32"><name pos:start="4:20" pos:end="4:28">CPU_CLASS</name><argument_list pos:start="4:29" pos:end="4:32">(<argument pos:start="4:30" pos:end="4:31"><expr pos:start="4:30" pos:end="4:31"><name pos:start="4:30" pos:end="4:31">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">UniCore32CPUClass</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:26">ucc</name> <init pos:start="5:28" pos:end="5:52">= <expr pos:start="5:30" pos:end="5:52"><call pos:start="5:30" pos:end="5:52"><name pos:start="5:30" pos:end="5:48">UNICORE32_CPU_CLASS</name><argument_list pos:start="5:49" pos:end="5:52">(<argument pos:start="5:50" pos:end="5:51"><expr pos:start="5:50" pos:end="5:51"><name pos:start="5:50" pos:end="5:51">oc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="6:5" pos:end="6:38"><expr pos:start="6:5" pos:end="6:37"><name pos:start="6:5" pos:end="6:23"><name pos:start="6:5" pos:end="6:7">ucc</name><operator pos:start="6:8" pos:end="6:9">-&gt;</operator><name pos:start="6:10" pos:end="6:23">parent_realize</name></name> <operator pos:start="6:25" pos:end="6:25">=</operator> <name pos:start="6:27" pos:end="6:37"><name pos:start="6:27" pos:end="6:28">dc</name><operator pos:start="6:29" pos:end="6:30">-&gt;</operator><name pos:start="6:31" pos:end="6:37">realize</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:37"><expr pos:start="7:5" pos:end="7:36"><name pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:6">dc</name><operator pos:start="7:7" pos:end="7:8">-&gt;</operator><name pos:start="7:9" pos:end="7:15">realize</name></name> <operator pos:start="7:17" pos:end="7:17">=</operator> <name pos:start="7:19" pos:end="7:36">uc32_cpu_realizefn</name></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:47"><expr pos:start="8:5" pos:end="8:46"><name pos:start="8:5" pos:end="8:21"><name pos:start="8:5" pos:end="8:6">cc</name><operator pos:start="8:7" pos:end="8:8">-&gt;</operator><name pos:start="8:9" pos:end="8:21">class_by_name</name></name> <operator pos:start="8:23" pos:end="8:23">=</operator> <name pos:start="8:25" pos:end="8:46">uc32_cpu_class_by_name</name></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:37"><expr pos:start="9:5" pos:end="9:36"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:6">cc</name><operator pos:start="9:7" pos:end="9:8">-&gt;</operator><name pos:start="9:9" pos:end="9:16">has_work</name></name> <operator pos:start="9:18" pos:end="9:18">=</operator> <name pos:start="9:20" pos:end="9:36">uc32_cpu_has_work</name></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:45"><expr pos:start="10:5" pos:end="10:44"><name pos:start="10:5" pos:end="10:20"><name pos:start="10:5" pos:end="10:6">cc</name><operator pos:start="10:7" pos:end="10:8">-&gt;</operator><name pos:start="10:9" pos:end="10:20">do_interrupt</name></name> <operator pos:start="10:22" pos:end="10:22">=</operator> <name pos:start="10:24" pos:end="10:44">uc32_cpu_do_interrupt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:53"><expr pos:start="11:5" pos:end="11:52"><name pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:6">cc</name><operator pos:start="11:7" pos:end="11:8">-&gt;</operator><name pos:start="11:9" pos:end="11:26">cpu_exec_interrupt</name></name> <operator pos:start="11:28" pos:end="11:28">=</operator> <name pos:start="11:30" pos:end="11:52">uc32_cpu_exec_interrupt</name></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:41"><expr pos:start="12:5" pos:end="12:40"><name pos:start="12:5" pos:end="12:18"><name pos:start="12:5" pos:end="12:6">cc</name><operator pos:start="12:7" pos:end="12:8">-&gt;</operator><name pos:start="12:9" pos:end="12:18">dump_state</name></name> <operator pos:start="12:20" pos:end="12:20">=</operator> <name pos:start="12:22" pos:end="12:40">uc32_cpu_dump_state</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="15:0"><expr pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:6">cc</name><operator pos:start="13:7" pos:end="13:8">-&gt;</operator><name pos:start="13:9" pos:end="13:14">set_pc</name></name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:32">uc32_cpu_set_pc</name></expr>;</expr_stmt>
<cpp:ifdef pos:start="14:1" pos:end="14:23">#<cpp:directive pos:start="14:2" pos:end="14:6">ifdef</cpp:directive> <name pos:start="14:8" pos:end="14:23">CONFIG_USER_ONLY</name></cpp:ifdef>
    <expr_stmt pos:start="15:5" pos:end="17:0"><expr pos:start="15:5" pos:end="15:52"><name pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:6">cc</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:24">handle_mmu_fault</name></name> <operator pos:start="15:26" pos:end="15:26">=</operator> <name pos:start="15:28" pos:end="15:52">uc32_cpu_handle_mmu_fault</name></expr>;</expr_stmt>
<cpp:else pos:start="16:1" pos:end="16:5">#<cpp:directive pos:start="16:2" pos:end="16:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="17:5" pos:end="19:0"><expr pos:start="17:5" pos:end="17:58"><name pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:6">cc</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:27">get_phys_page_debug</name></name> <operator pos:start="17:29" pos:end="17:29">=</operator> <name pos:start="17:31" pos:end="17:58">uc32_cpu_get_phys_page_debug</name></expr>;</expr_stmt>
<cpp:endif pos:start="18:1" pos:end="18:6">#<cpp:directive pos:start="18:2" pos:end="18:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="19:5" pos:end="19:33"><expr pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:6">dc</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:12">vmsd</name></name> <operator pos:start="19:14" pos:end="19:14">=</operator> <operator pos:start="19:16" pos:end="19:16">&amp;</operator><name pos:start="19:17" pos:end="19:32">vmstate_uc32_cpu</name></expr>;</expr_stmt>
</block_content>}</block></function></unit>
