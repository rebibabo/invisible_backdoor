<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18377.c" pos:tabs="8"><function pos:start="1:1" pos:end="266:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">qmp_transaction</name><parameter_list pos:start="1:21" pos:end="1:64">(<parameter pos:start="1:22" pos:end="1:49"><decl pos:start="1:22" pos:end="1:49"><type pos:start="1:22" pos:end="1:49"><name pos:start="1:22" pos:end="1:39">BlockdevActionList</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:49">dev_list</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:56">Error</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier><modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="266:1">{<block_content pos:start="5:5" pos:end="264:11">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">BlockdevActionList</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:33">dev_entry</name> <init pos:start="7:35" pos:end="7:44">= <expr pos:start="7:37" pos:end="7:44"><name pos:start="7:37" pos:end="7:44">dev_list</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24">BlkTransactionStates</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:32">states</name></decl>, <decl pos:start="9:35" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:26"><modifier pos:start="9:35" pos:end="9:35">*</modifier></type><name pos:start="9:36" pos:end="9:39">next</name></decl>;</decl_stmt>



    <macro pos:start="13:5" pos:end="13:57"><name pos:start="13:5" pos:end="13:17">QSIMPLEQ_HEAD</name><argument_list pos:start="13:18" pos:end="13:57">(<argument pos:start="13:19" pos:end="13:34">snap_bdrv_states</argument>, <argument pos:start="13:37" pos:end="13:56">BlkTransactionStates</argument>)</argument_list></macro> <expr_stmt pos:start="13:59" pos:end="13:75"><expr pos:start="13:59" pos:end="13:74"><name pos:start="13:59" pos:end="13:74">snap_bdrv_states</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><call pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:17">QSIMPLEQ_INIT</name><argument_list pos:start="15:18" pos:end="15:36">(<argument pos:start="15:19" pos:end="15:35"><expr pos:start="15:19" pos:end="15:35"><operator pos:start="15:19" pos:end="15:19">&amp;</operator><name pos:start="15:20" pos:end="15:35">snap_bdrv_states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:44">/* drain all i/o before any snapshots */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><call pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">bdrv_drain_all</name><argument_list pos:start="21:19" pos:end="21:20">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:75">/* We don't do anything in this loop that commits us to the snapshot */</comment>

    <while pos:start="27:5" pos:end="205:5">while <condition pos:start="27:11" pos:end="27:29">(<expr pos:start="27:12" pos:end="27:28"><name pos:start="27:12" pos:end="27:15">NULL</name> <operator pos:start="27:17" pos:end="27:18">!=</operator> <name pos:start="27:20" pos:end="27:28">dev_entry</name></expr>)</condition> <block pos:start="27:31" pos:end="205:5">{<block_content pos:start="29:9" pos:end="203:9">

        <decl_stmt pos:start="29:9" pos:end="29:40"><decl pos:start="29:9" pos:end="29:39"><type pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:22">BlockdevAction</name> <modifier pos:start="29:24" pos:end="29:24">*</modifier></type><name pos:start="29:25" pos:end="29:32">dev_info</name> <init pos:start="29:34" pos:end="29:39">= <expr pos:start="29:36" pos:end="29:39"><name pos:start="29:36" pos:end="29:39">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:31"><decl pos:start="31:9" pos:end="31:30"><type pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:19">BlockDriver</name> <modifier pos:start="31:21" pos:end="31:21">*</modifier></type><name pos:start="31:22" pos:end="31:30">proto_drv</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:25"><decl pos:start="33:9" pos:end="33:24"><type pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:19">BlockDriver</name> <modifier pos:start="33:21" pos:end="33:21">*</modifier></type><name pos:start="33:22" pos:end="33:24">drv</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:18"><decl pos:start="35:9" pos:end="35:17"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:17">flags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:31"><decl pos:start="37:9" pos:end="37:30"><type pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:12">enum</name> <name pos:start="37:14" pos:end="37:25">NewImageMode</name></name></type> <name pos:start="37:27" pos:end="37:30">mode</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:35"><decl pos:start="39:9" pos:end="39:34"><type pos:start="39:9" pos:end="39:20"><specifier pos:start="39:9" pos:end="39:13">const</specifier> <name pos:start="39:15" pos:end="39:18">char</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:34">new_image_file</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:27"><decl pos:start="41:9" pos:end="41:26"><type pos:start="41:9" pos:end="41:20"><specifier pos:start="41:9" pos:end="41:13">const</specifier> <name pos:start="41:15" pos:end="41:18">char</name> <modifier pos:start="41:20" pos:end="41:20">*</modifier></type><name pos:start="41:21" pos:end="41:26">device</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:37"><decl pos:start="43:9" pos:end="43:36"><type pos:start="43:9" pos:end="43:20"><specifier pos:start="43:9" pos:end="43:13">const</specifier> <name pos:start="43:15" pos:end="43:18">char</name> <modifier pos:start="43:20" pos:end="43:20">*</modifier></type><name pos:start="43:21" pos:end="43:26">format</name> <init pos:start="43:28" pos:end="43:36">= <expr pos:start="43:30" pos:end="43:36"><literal type="string" pos:start="43:30" pos:end="43:36">"qcow2"</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:16">dev_info</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:35"><name pos:start="47:20" pos:end="47:28">dev_entry</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:35">value</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:17">dev_entry</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:35"><name pos:start="49:21" pos:end="49:29">dev_entry</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:35">next</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:57"><expr pos:start="53:9" pos:end="53:56"><name pos:start="53:9" pos:end="53:14">states</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:56"><name pos:start="53:18" pos:end="53:26">g_malloc0</name><argument_list pos:start="53:27" pos:end="53:56">(<argument pos:start="53:28" pos:end="53:55"><expr pos:start="53:28" pos:end="53:55"><sizeof pos:start="53:28" pos:end="53:55">sizeof<argument_list pos:start="53:34" pos:end="53:55">(<argument pos:start="53:35" pos:end="53:54"><expr pos:start="53:35" pos:end="53:54"><name pos:start="53:35" pos:end="53:54">BlkTransactionStates</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:63"><expr pos:start="55:9" pos:end="55:62"><call pos:start="55:9" pos:end="55:62"><name pos:start="55:9" pos:end="55:28">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="55:29" pos:end="55:62">(<argument pos:start="55:30" pos:end="55:46"><expr pos:start="55:30" pos:end="55:46"><operator pos:start="55:30" pos:end="55:30">&amp;</operator><name pos:start="55:31" pos:end="55:46">snap_bdrv_states</name></expr></argument>, <argument pos:start="55:49" pos:end="55:54"><expr pos:start="55:49" pos:end="55:54"><name pos:start="55:49" pos:end="55:54">states</name></expr></argument>, <argument pos:start="55:57" pos:end="55:61"><expr pos:start="55:57" pos:end="55:61"><name pos:start="55:57" pos:end="55:61">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="59:9" pos:end="87:9">switch <condition pos:start="59:16" pos:end="59:31">(<expr pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:24">dev_info</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:30">kind</name></name></expr>)</condition> <block pos:start="59:33" pos:end="87:9">{<block_content pos:start="61:9" pos:end="85:20">

        <case pos:start="61:9" pos:end="61:57">case <expr pos:start="61:14" pos:end="61:56"><name pos:start="61:14" pos:end="61:56">BLOCKDEV_ACTION_KIND_BLOCKDEV_SNAPSHOT_SYNC</name></expr>:</case>

            <expr_stmt pos:start="63:13" pos:end="63:62"><expr pos:start="63:13" pos:end="63:61"><name pos:start="63:13" pos:end="63:18">device</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:61"><name pos:start="63:22" pos:end="63:29">dev_info</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:53">blockdev_snapshot_sync</name><operator pos:start="63:54" pos:end="63:55">-&gt;</operator><name pos:start="63:56" pos:end="63:61">device</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="69:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:60">(<expr pos:start="65:17" pos:end="65:59"><operator pos:start="65:17" pos:end="65:17">!</operator><name pos:start="65:18" pos:end="65:59"><name pos:start="65:18" pos:end="65:25">dev_info</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:49">blockdev_snapshot_sync</name><operator pos:start="65:50" pos:end="65:51">-&gt;</operator><name pos:start="65:52" pos:end="65:59">has_mode</name></name></expr>)</condition> <block pos:start="65:62" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:87">

                <expr_stmt pos:start="67:17" pos:end="67:87"><expr pos:start="67:17" pos:end="67:86"><name pos:start="67:17" pos:end="67:54"><name pos:start="67:17" pos:end="67:24">dev_info</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:48">blockdev_snapshot_sync</name><operator pos:start="67:49" pos:end="67:50">-&gt;</operator><name pos:start="67:51" pos:end="67:54">mode</name></name> <operator pos:start="67:56" pos:end="67:56">=</operator> <name pos:start="67:58" pos:end="67:86">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:77"><expr pos:start="71:13" pos:end="71:76"><name pos:start="71:13" pos:end="71:26">new_image_file</name> <operator pos:start="71:28" pos:end="71:28">=</operator> <name pos:start="71:30" pos:end="71:76"><name pos:start="71:30" pos:end="71:37">dev_info</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:61">blockdev_snapshot_sync</name><operator pos:start="71:62" pos:end="71:63">-&gt;</operator><name pos:start="71:64" pos:end="71:76">snapshot_file</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:61">(<expr pos:start="73:17" pos:end="73:60"><name pos:start="73:17" pos:end="73:60"><name pos:start="73:17" pos:end="73:24">dev_info</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:48">blockdev_snapshot_sync</name><operator pos:start="73:49" pos:end="73:50">-&gt;</operator><name pos:start="73:51" pos:end="73:60">has_format</name></name></expr>)</condition> <block pos:start="73:63" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:66">

                <expr_stmt pos:start="75:17" pos:end="75:66"><expr pos:start="75:17" pos:end="75:65"><name pos:start="75:17" pos:end="75:22">format</name> <operator pos:start="75:24" pos:end="75:24">=</operator> <name pos:start="75:26" pos:end="75:65"><name pos:start="75:26" pos:end="75:33">dev_info</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:57">blockdev_snapshot_sync</name><operator pos:start="75:58" pos:end="75:59">-&gt;</operator><name pos:start="75:60" pos:end="75:65">format</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:58"><expr pos:start="79:13" pos:end="79:57"><name pos:start="79:13" pos:end="79:16">mode</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:57"><name pos:start="79:20" pos:end="79:27">dev_info</name><operator pos:start="79:28" pos:end="79:29">-&gt;</operator><name pos:start="79:30" pos:end="79:51">blockdev_snapshot_sync</name><operator pos:start="79:52" pos:end="79:53">-&gt;</operator><name pos:start="79:54" pos:end="79:57">mode</name></name></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <default pos:start="83:9" pos:end="83:16">default:</default>

            <expr_stmt pos:start="85:13" pos:end="85:20"><expr pos:start="85:13" pos:end="85:19"><call pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:17">abort</name><argument_list pos:start="85:18" pos:end="85:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <expr_stmt pos:start="91:9" pos:end="91:39"><expr pos:start="91:9" pos:end="91:38"><name pos:start="91:9" pos:end="91:11">drv</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:38"><name pos:start="91:15" pos:end="91:30">bdrv_find_format</name><argument_list pos:start="91:31" pos:end="91:38">(<argument pos:start="91:32" pos:end="91:37"><expr pos:start="91:32" pos:end="91:37"><name pos:start="91:32" pos:end="91:37">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="99:9"><if pos:start="93:9" pos:end="99:9">if <condition pos:start="93:12" pos:end="93:17">(<expr pos:start="93:13" pos:end="93:16"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:16">drv</name></expr>)</condition> <block pos:start="93:19" pos:end="99:9">{<block_content pos:start="95:13" pos:end="97:33">

            <expr_stmt pos:start="95:13" pos:end="95:63"><expr pos:start="95:13" pos:end="95:62"><call pos:start="95:13" pos:end="95:62"><name pos:start="95:13" pos:end="95:21">error_set</name><argument_list pos:start="95:22" pos:end="95:62">(<argument pos:start="95:23" pos:end="95:26"><expr pos:start="95:23" pos:end="95:26"><name pos:start="95:23" pos:end="95:26">errp</name></expr></argument>, <argument pos:start="95:29" pos:end="95:53"><expr pos:start="95:29" pos:end="95:53"><name pos:start="95:29" pos:end="95:53">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="95:56" pos:end="95:61"><expr pos:start="95:56" pos:end="95:61"><name pos:start="95:56" pos:end="95:61">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="97:13" pos:end="97:33">goto <name pos:start="97:18" pos:end="97:32">delete_and_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:43"><expr pos:start="103:9" pos:end="103:42"><name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:14">states</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:22">old_bs</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:42"><name pos:start="103:26" pos:end="103:34">bdrv_find</name><argument_list pos:start="103:35" pos:end="103:42">(<argument pos:start="103:36" pos:end="103:41"><expr pos:start="103:36" pos:end="103:41"><name pos:start="103:36" pos:end="103:41">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:28">(<expr pos:start="105:13" pos:end="105:27"><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:27"><name pos:start="105:14" pos:end="105:19">states</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:27">old_bs</name></name></expr>)</condition> <block pos:start="105:30" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:33">

            <expr_stmt pos:start="107:13" pos:end="107:59"><expr pos:start="107:13" pos:end="107:58"><call pos:start="107:13" pos:end="107:58"><name pos:start="107:13" pos:end="107:21">error_set</name><argument_list pos:start="107:22" pos:end="107:58">(<argument pos:start="107:23" pos:end="107:26"><expr pos:start="107:23" pos:end="107:26"><name pos:start="107:23" pos:end="107:26">errp</name></expr></argument>, <argument pos:start="107:29" pos:end="107:49"><expr pos:start="107:29" pos:end="107:49"><name pos:start="107:29" pos:end="107:49">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="107:52" pos:end="107:57"><expr pos:start="107:52" pos:end="107:57"><name pos:start="107:52" pos:end="107:57">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="109:13" pos:end="109:33">goto <name pos:start="109:18" pos:end="109:32">delete_and_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:46">(<expr pos:start="115:13" pos:end="115:45"><operator pos:start="115:13" pos:end="115:13">!</operator><call pos:start="115:14" pos:end="115:45"><name pos:start="115:14" pos:end="115:29">bdrv_is_inserted</name><argument_list pos:start="115:30" pos:end="115:45">(<argument pos:start="115:31" pos:end="115:44"><expr pos:start="115:31" pos:end="115:44"><name pos:start="115:31" pos:end="115:44"><name pos:start="115:31" pos:end="115:36">states</name><operator pos:start="115:37" pos:end="115:38">-&gt;</operator><name pos:start="115:39" pos:end="115:44">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:48" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:33">

            <expr_stmt pos:start="117:13" pos:end="117:63"><expr pos:start="117:13" pos:end="117:62"><call pos:start="117:13" pos:end="117:62"><name pos:start="117:13" pos:end="117:21">error_set</name><argument_list pos:start="117:22" pos:end="117:62">(<argument pos:start="117:23" pos:end="117:26"><expr pos:start="117:23" pos:end="117:26"><name pos:start="117:23" pos:end="117:26">errp</name></expr></argument>, <argument pos:start="117:29" pos:end="117:53"><expr pos:start="117:29" pos:end="117:53"><name pos:start="117:29" pos:end="117:53">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="117:56" pos:end="117:61"><expr pos:start="117:56" pos:end="117:61"><name pos:start="117:56" pos:end="117:61">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="119:13" pos:end="119:33">goto <name pos:start="119:18" pos:end="119:32">delete_and_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="125:9" pos:end="131:9"><if pos:start="125:9" pos:end="131:9">if <condition pos:start="125:12" pos:end="125:40">(<expr pos:start="125:13" pos:end="125:39"><call pos:start="125:13" pos:end="125:39"><name pos:start="125:13" pos:end="125:23">bdrv_in_use</name><argument_list pos:start="125:24" pos:end="125:39">(<argument pos:start="125:25" pos:end="125:38"><expr pos:start="125:25" pos:end="125:38"><name pos:start="125:25" pos:end="125:38"><name pos:start="125:25" pos:end="125:30">states</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:38">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:42" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:33">

            <expr_stmt pos:start="127:13" pos:end="127:56"><expr pos:start="127:13" pos:end="127:55"><call pos:start="127:13" pos:end="127:55"><name pos:start="127:13" pos:end="127:21">error_set</name><argument_list pos:start="127:22" pos:end="127:55">(<argument pos:start="127:23" pos:end="127:26"><expr pos:start="127:23" pos:end="127:26"><name pos:start="127:23" pos:end="127:26">errp</name></expr></argument>, <argument pos:start="127:29" pos:end="127:46"><expr pos:start="127:29" pos:end="127:46"><name pos:start="127:29" pos:end="127:46">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="127:49" pos:end="127:54"><expr pos:start="127:49" pos:end="127:54"><name pos:start="127:49" pos:end="127:54">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:33">goto <name pos:start="129:18" pos:end="129:32">delete_and_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="135:9" pos:end="145:9"><if pos:start="135:9" pos:end="145:9">if <condition pos:start="135:12" pos:end="135:47">(<expr pos:start="135:13" pos:end="135:46"><operator pos:start="135:13" pos:end="135:13">!</operator><call pos:start="135:14" pos:end="135:46"><name pos:start="135:14" pos:end="135:30">bdrv_is_read_only</name><argument_list pos:start="135:31" pos:end="135:46">(<argument pos:start="135:32" pos:end="135:45"><expr pos:start="135:32" pos:end="135:45"><name pos:start="135:32" pos:end="135:45"><name pos:start="135:32" pos:end="135:37">states</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:45">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:49" pos:end="145:9">{<block_content pos:start="137:13" pos:end="143:13">

            <if_stmt pos:start="137:13" pos:end="143:13"><if pos:start="137:13" pos:end="143:13">if <condition pos:start="137:16" pos:end="137:43">(<expr pos:start="137:17" pos:end="137:42"><call pos:start="137:17" pos:end="137:42"><name pos:start="137:17" pos:end="137:26">bdrv_flush</name><argument_list pos:start="137:27" pos:end="137:42">(<argument pos:start="137:28" pos:end="137:41"><expr pos:start="137:28" pos:end="137:41"><name pos:start="137:28" pos:end="137:41"><name pos:start="137:28" pos:end="137:33">states</name><operator pos:start="137:34" pos:end="137:35">-&gt;</operator><name pos:start="137:36" pos:end="137:41">old_bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:45" pos:end="143:13">{<block_content pos:start="139:17" pos:end="141:37">

                <expr_stmt pos:start="139:17" pos:end="139:47"><expr pos:start="139:17" pos:end="139:46"><call pos:start="139:17" pos:end="139:46"><name pos:start="139:17" pos:end="139:25">error_set</name><argument_list pos:start="139:26" pos:end="139:46">(<argument pos:start="139:27" pos:end="139:30"><expr pos:start="139:27" pos:end="139:30"><name pos:start="139:27" pos:end="139:30">errp</name></expr></argument>, <argument pos:start="139:33" pos:end="139:45"><expr pos:start="139:33" pos:end="139:45"><name pos:start="139:33" pos:end="139:45">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="141:17" pos:end="141:37">goto <name pos:start="141:22" pos:end="141:36">delete_and_fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:43"><expr pos:start="149:9" pos:end="149:42"><name pos:start="149:9" pos:end="149:13">flags</name> <operator pos:start="149:15" pos:end="149:15">=</operator> <name pos:start="149:17" pos:end="149:42"><name pos:start="149:17" pos:end="149:22">states</name><operator pos:start="149:23" pos:end="149:24">-&gt;</operator><name pos:start="149:25" pos:end="149:30">old_bs</name><operator pos:start="149:31" pos:end="149:32">-&gt;</operator><name pos:start="149:33" pos:end="149:42">open_flags</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:55"><expr pos:start="153:9" pos:end="153:54"><name pos:start="153:9" pos:end="153:17">proto_drv</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <call pos:start="153:21" pos:end="153:54"><name pos:start="153:21" pos:end="153:38">bdrv_find_protocol</name><argument_list pos:start="153:39" pos:end="153:54">(<argument pos:start="153:40" pos:end="153:53"><expr pos:start="153:40" pos:end="153:53"><name pos:start="153:40" pos:end="153:53">new_image_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:23">(<expr pos:start="155:13" pos:end="155:22"><operator pos:start="155:13" pos:end="155:13">!</operator><name pos:start="155:14" pos:end="155:22">proto_drv</name></expr>)</condition> <block pos:start="155:25" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:33">

            <expr_stmt pos:start="157:13" pos:end="157:63"><expr pos:start="157:13" pos:end="157:62"><call pos:start="157:13" pos:end="157:62"><name pos:start="157:13" pos:end="157:21">error_set</name><argument_list pos:start="157:22" pos:end="157:62">(<argument pos:start="157:23" pos:end="157:26"><expr pos:start="157:23" pos:end="157:26"><name pos:start="157:23" pos:end="157:26">errp</name></expr></argument>, <argument pos:start="157:29" pos:end="157:53"><expr pos:start="157:29" pos:end="157:53"><name pos:start="157:29" pos:end="157:53">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="157:56" pos:end="157:61"><expr pos:start="157:56" pos:end="157:61"><name pos:start="157:56" pos:end="157:61">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="159:13" pos:end="159:33">goto <name pos:start="159:18" pos:end="159:32">delete_and_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="165:9" pos:end="165:45">/* create new image w/backing file */</comment>

        <if_stmt pos:start="167:9" pos:end="185:9"><if pos:start="167:9" pos:end="185:9">if <condition pos:start="167:12" pos:end="167:44">(<expr pos:start="167:13" pos:end="167:43"><name pos:start="167:13" pos:end="167:16">mode</name> <operator pos:start="167:18" pos:end="167:19">!=</operator> <name pos:start="167:21" pos:end="167:43">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition> <block pos:start="167:46" pos:end="185:9">{<block_content pos:start="169:13" pos:end="183:13">

            <expr_stmt pos:start="169:13" pos:end="175:51"><expr pos:start="169:13" pos:end="175:50"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="175:50"><name pos:start="169:19" pos:end="169:33">bdrv_img_create</name><argument_list pos:start="169:34" pos:end="175:50">(<argument pos:start="169:35" pos:end="169:48"><expr pos:start="169:35" pos:end="169:48"><name pos:start="169:35" pos:end="169:48">new_image_file</name></expr></argument>, <argument pos:start="169:51" pos:end="169:56"><expr pos:start="169:51" pos:end="169:56"><name pos:start="169:51" pos:end="169:56">format</name></expr></argument>,

                                  <argument pos:start="171:35" pos:end="171:58"><expr pos:start="171:35" pos:end="171:58"><name pos:start="171:35" pos:end="171:58"><name pos:start="171:35" pos:end="171:40">states</name><operator pos:start="171:41" pos:end="171:42">-&gt;</operator><name pos:start="171:43" pos:end="171:48">old_bs</name><operator pos:start="171:49" pos:end="171:50">-&gt;</operator><name pos:start="171:51" pos:end="171:58">filename</name></name></expr></argument>,

                                  <argument pos:start="173:35" pos:end="173:66"><expr pos:start="173:35" pos:end="173:66"><name pos:start="173:35" pos:end="173:66"><name pos:start="173:35" pos:end="173:40">states</name><operator pos:start="173:41" pos:end="173:42">-&gt;</operator><name pos:start="173:43" pos:end="173:48">old_bs</name><operator pos:start="173:49" pos:end="173:50">-&gt;</operator><name pos:start="173:51" pos:end="173:53">drv</name><operator pos:start="173:54" pos:end="173:55">-&gt;</operator><name pos:start="173:56" pos:end="173:66">format_name</name></name></expr></argument>,

                                  <argument pos:start="175:35" pos:end="175:38"><expr pos:start="175:35" pos:end="175:38"><name pos:start="175:35" pos:end="175:38">NULL</name></expr></argument>, <argument pos:start="175:41" pos:end="175:42"><expr pos:start="175:41" pos:end="175:42"><operator pos:start="175:41" pos:end="175:41">-</operator><literal type="number" pos:start="175:42" pos:end="175:42">1</literal></expr></argument>, <argument pos:start="175:45" pos:end="175:49"><expr pos:start="175:45" pos:end="175:49"><name pos:start="175:45" pos:end="175:49">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="183:13"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:20">(<expr pos:start="177:17" pos:end="177:19"><name pos:start="177:17" pos:end="177:19">ret</name></expr>)</condition> <block pos:start="177:22" pos:end="183:13">{<block_content pos:start="179:17" pos:end="181:37">

                <expr_stmt pos:start="179:17" pos:end="179:71"><expr pos:start="179:17" pos:end="179:70"><call pos:start="179:17" pos:end="179:70"><name pos:start="179:17" pos:end="179:25">error_set</name><argument_list pos:start="179:26" pos:end="179:70">(<argument pos:start="179:27" pos:end="179:30"><expr pos:start="179:27" pos:end="179:30"><name pos:start="179:27" pos:end="179:30">errp</name></expr></argument>, <argument pos:start="179:33" pos:end="179:53"><expr pos:start="179:33" pos:end="179:53"><name pos:start="179:33" pos:end="179:53">QERR_OPEN_FILE_FAILED</name></expr></argument>, <argument pos:start="179:56" pos:end="179:69"><expr pos:start="179:56" pos:end="179:69"><name pos:start="179:56" pos:end="179:69">new_image_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="181:17" pos:end="181:37">goto <name pos:start="181:22" pos:end="181:36">delete_and_fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="189:9" pos:end="189:71">/* We will manually add the backing_hd field to the bs later */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:38"><expr pos:start="191:9" pos:end="191:37"><name pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:14">states</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:22">new_bs</name></name> <operator pos:start="191:24" pos:end="191:24">=</operator> <call pos:start="191:26" pos:end="191:37"><name pos:start="191:26" pos:end="191:33">bdrv_new</name><argument_list pos:start="191:34" pos:end="191:37">(<argument pos:start="191:35" pos:end="191:36"><expr pos:start="191:35" pos:end="191:36"><literal type="string" pos:start="191:35" pos:end="191:36">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="195:56"><expr pos:start="193:9" pos:end="195:55"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <call pos:start="193:15" pos:end="195:55"><name pos:start="193:15" pos:end="193:23">bdrv_open</name><argument_list pos:start="193:24" pos:end="195:55">(<argument pos:start="193:25" pos:end="193:38"><expr pos:start="193:25" pos:end="193:38"><name pos:start="193:25" pos:end="193:38"><name pos:start="193:25" pos:end="193:30">states</name><operator pos:start="193:31" pos:end="193:32">-&gt;</operator><name pos:start="193:33" pos:end="193:38">new_bs</name></name></expr></argument>, <argument pos:start="193:41" pos:end="193:54"><expr pos:start="193:41" pos:end="193:54"><name pos:start="193:41" pos:end="193:54">new_image_file</name></expr></argument>,

                        <argument pos:start="195:25" pos:end="195:49"><expr pos:start="195:25" pos:end="195:49"><name pos:start="195:25" pos:end="195:29">flags</name> <operator pos:start="195:31" pos:end="195:31">|</operator> <name pos:start="195:33" pos:end="195:49">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="195:52" pos:end="195:54"><expr pos:start="195:52" pos:end="195:54"><name pos:start="195:52" pos:end="195:54">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="203:9"><if pos:start="197:9" pos:end="203:9">if <condition pos:start="197:12" pos:end="197:21">(<expr pos:start="197:13" pos:end="197:20"><name pos:start="197:13" pos:end="197:15">ret</name> <operator pos:start="197:17" pos:end="197:18">!=</operator> <literal type="number" pos:start="197:20" pos:end="197:20">0</literal></expr>)</condition> <block pos:start="197:23" pos:end="203:9">{<block_content pos:start="199:13" pos:end="201:33">

            <expr_stmt pos:start="199:13" pos:end="199:67"><expr pos:start="199:13" pos:end="199:66"><call pos:start="199:13" pos:end="199:66"><name pos:start="199:13" pos:end="199:21">error_set</name><argument_list pos:start="199:22" pos:end="199:66">(<argument pos:start="199:23" pos:end="199:26"><expr pos:start="199:23" pos:end="199:26"><name pos:start="199:23" pos:end="199:26">errp</name></expr></argument>, <argument pos:start="199:29" pos:end="199:49"><expr pos:start="199:29" pos:end="199:49"><name pos:start="199:29" pos:end="199:49">QERR_OPEN_FILE_FAILED</name></expr></argument>, <argument pos:start="199:52" pos:end="199:65"><expr pos:start="199:52" pos:end="199:65"><name pos:start="199:52" pos:end="199:65">new_image_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="201:13" pos:end="201:33">goto <name pos:start="201:18" pos:end="201:32">delete_and_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>





    <comment type="block" pos:start="211:5" pos:end="213:59">/* Now we are going to do the actual pivot.  Everything up to this point

     * is reversible, but we are committed at this point */</comment>

    <macro pos:start="215:5" pos:end="215:54"><name pos:start="215:5" pos:end="215:20">QSIMPLEQ_FOREACH</name><argument_list pos:start="215:21" pos:end="215:54">(<argument pos:start="215:22" pos:end="215:27">states</argument>, <argument pos:start="215:30" pos:end="215:46">&amp;snap_bdrv_states</argument>, <argument pos:start="215:49" pos:end="215:53">entry</argument>)</argument_list></macro> <block pos:start="215:56" pos:end="226:5">{<block_content pos:start="219:9" pos:end="219:52">

        <comment type="block" pos:start="217:9" pos:end="217:79">/* This removes our old bs from the bdrv_states, and adds the new bs */</comment>

        <expr_stmt pos:start="219:9" pos:end="219:52"><expr pos:start="219:9" pos:end="219:51"><call pos:start="219:9" pos:end="219:51"><name pos:start="219:9" pos:end="219:19">bdrv_append</name><argument_list pos:start="219:20" pos:end="219:51">(<argument pos:start="219:21" pos:end="219:34"><expr pos:start="219:21" pos:end="219:34"><name pos:start="219:21" pos:end="219:34"><name pos:start="219:21" pos:end="219:26">states</name><operator pos:start="219:27" pos:end="219:28">-&gt;</operator><name pos:start="219:29" pos:end="219:34">new_bs</name></name></expr></argument>, <argument pos:start="219:37" pos:end="219:50"><expr pos:start="219:37" pos:end="219:50"><name pos:start="219:37" pos:end="219:50"><name pos:start="219:37" pos:end="219:42">states</name><operator pos:start="219:43" pos:end="219:44">-&gt;</operator><name pos:start="219:45" pos:end="219:50">old_bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






    </block_content>}</block>



    <comment type="block" pos:start="230:5" pos:end="230:17">/* success */</comment>

    <goto pos:start="232:5" pos:end="232:14">goto <name pos:start="232:10" pos:end="232:13">exit</name>;</goto>



<label pos:start="236:1" pos:end="236:16"><name pos:start="236:1" pos:end="236:15">delete_and_fail</name>:</label>

    <comment type="block" pos:start="238:5" pos:end="244:6">/*

    * failure, and it is all-or-none; abandon each new bs, and keep using

    * the original bs for all images

    */</comment>

    <macro pos:start="246:5" pos:end="246:54"><name pos:start="246:5" pos:end="246:20">QSIMPLEQ_FOREACH</name><argument_list pos:start="246:21" pos:end="246:54">(<argument pos:start="246:22" pos:end="246:27">states</argument>, <argument pos:start="246:30" pos:end="246:46">&amp;snap_bdrv_states</argument>, <argument pos:start="246:49" pos:end="246:53">entry</argument>)</argument_list></macro> <block pos:start="246:56" pos:end="254:5">{<block_content pos:start="248:9" pos:end="252:9">

        <if_stmt pos:start="248:9" pos:end="252:9"><if pos:start="248:9" pos:end="252:9">if <condition pos:start="248:12" pos:end="248:27">(<expr pos:start="248:13" pos:end="248:26"><name pos:start="248:13" pos:end="248:26"><name pos:start="248:13" pos:end="248:18">states</name><operator pos:start="248:19" pos:end="248:20">-&gt;</operator><name pos:start="248:21" pos:end="248:26">new_bs</name></name></expr>)</condition> <block pos:start="248:29" pos:end="252:9">{<block_content pos:start="250:14" pos:end="250:41">

             <expr_stmt pos:start="250:14" pos:end="250:41"><expr pos:start="250:14" pos:end="250:40"><call pos:start="250:14" pos:end="250:40"><name pos:start="250:14" pos:end="250:24">bdrv_delete</name><argument_list pos:start="250:25" pos:end="250:40">(<argument pos:start="250:26" pos:end="250:39"><expr pos:start="250:26" pos:end="250:39"><name pos:start="250:26" pos:end="250:39"><name pos:start="250:26" pos:end="250:31">states</name><operator pos:start="250:32" pos:end="250:33">-&gt;</operator><name pos:start="250:34" pos:end="250:39">new_bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

<label pos:start="256:1" pos:end="256:5"><name pos:start="256:1" pos:end="256:4">exit</name>:</label>

    <macro pos:start="258:5" pos:end="258:65"><name pos:start="258:5" pos:end="258:25">QSIMPLEQ_FOREACH_SAFE</name><argument_list pos:start="258:26" pos:end="258:65">(<argument pos:start="258:27" pos:end="258:32">states</argument>, <argument pos:start="258:35" pos:end="258:51">&amp;snap_bdrv_states</argument>, <argument pos:start="258:54" pos:end="258:58">entry</argument>, <argument pos:start="258:61" pos:end="258:64">next</argument>)</argument_list></macro> <block pos:start="258:67" pos:end="262:5">{<block_content pos:start="260:9" pos:end="260:23">

        <expr_stmt pos:start="260:9" pos:end="260:23"><expr pos:start="260:9" pos:end="260:22"><call pos:start="260:9" pos:end="260:22"><name pos:start="260:9" pos:end="260:14">g_free</name><argument_list pos:start="260:15" pos:end="260:22">(<argument pos:start="260:16" pos:end="260:21"><expr pos:start="260:16" pos:end="260:21"><name pos:start="260:16" pos:end="260:21">states</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <return pos:start="264:5" pos:end="264:11">return;</return>

</block_content>}</block></function></unit>
