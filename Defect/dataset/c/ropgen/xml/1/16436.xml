<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16436.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:29">tb_target_set_jmp_target</name><parameter_list pos:start="1:30" pos:end="3:45">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:39">uintptr_t</name></type> <name pos:start="1:41" pos:end="1:46">tc_ptr</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:57">uintptr_t</name></type> <name pos:start="1:59" pos:end="1:66">jmp_addr</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:39">uintptr_t</name></type> <name pos:start="3:41" pos:end="3:44">addr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:5">

    <if_stmt pos:start="7:5" pos:end="71:5"><if pos:start="7:5" pos:end="61:5">if <condition pos:start="7:8" pos:end="7:34">(<expr pos:start="7:9" pos:end="7:33"><name pos:start="7:9" pos:end="7:27">TCG_TARGET_REG_BITS</name> <operator pos:start="7:29" pos:end="7:30">==</operator> <literal type="number" pos:start="7:32" pos:end="7:33">64</literal></expr>)</condition> <block pos:start="7:36" pos:end="61:5">{<block_content pos:start="9:9" pos:end="59:51">

        <decl_stmt pos:start="9:9" pos:end="9:29"><decl pos:start="9:9" pos:end="9:24"><type pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:21">tcg_insn_unit</name></type> <name pos:start="9:23" pos:end="9:24">i1</name></decl>, <decl pos:start="9:27" pos:end="9:28"><type ref="prev" pos:start="9:9" pos:end="9:21"/><name pos:start="9:27" pos:end="9:28">i2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:41"><decl pos:start="11:9" pos:end="11:40"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">intptr_t</name></type> <name pos:start="11:18" pos:end="11:24">tb_diff</name> <init pos:start="11:26" pos:end="11:40">= <expr pos:start="11:28" pos:end="11:40"><name pos:start="11:28" pos:end="11:31">addr</name> <operator pos:start="11:33" pos:end="11:33">-</operator> <name pos:start="11:35" pos:end="11:40">tc_ptr</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:49"><decl pos:start="13:9" pos:end="13:48"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">intptr_t</name></type> <name pos:start="13:18" pos:end="13:24">br_diff</name> <init pos:start="13:26" pos:end="13:48">= <expr pos:start="13:28" pos:end="13:48"><name pos:start="13:28" pos:end="13:31">addr</name> <operator pos:start="13:33" pos:end="13:33">-</operator> <operator pos:start="13:35" pos:end="13:35">(</operator><name pos:start="13:36" pos:end="13:43">jmp_addr</name> <operator pos:start="13:45" pos:end="13:45">+</operator> <literal type="number" pos:start="13:47" pos:end="13:47">4</literal><operator pos:start="13:48" pos:end="13:48">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:22"><decl pos:start="15:9" pos:end="15:21"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint64_t</name></type> <name pos:start="15:18" pos:end="15:21">pair</name></decl>;</decl_stmt>



        <comment type="block" pos:start="19:9" pos:end="23:54">/* This does not exercise the range of the branch, but we do

           still need to be able to load the new value of TCG_REG_TB.

           But this does still happen quite often.  */</comment>

        <if_stmt pos:start="25:9" pos:end="46:0"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:40">(<expr pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:19">tb_diff</name> <operator pos:start="25:21" pos:end="25:22">==</operator> <operator pos:start="25:24" pos:end="25:24">(</operator><name pos:start="25:25" pos:end="25:31">int16_t</name><operator pos:start="25:32" pos:end="25:32">)</operator><name pos:start="25:33" pos:end="25:39">tb_diff</name></expr>)</condition> <block pos:start="25:42" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:43">

            <expr_stmt pos:start="27:13" pos:end="27:61"><expr pos:start="27:13" pos:end="27:60"><name pos:start="27:13" pos:end="27:14">i1</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:21">ADDI</name> <operator pos:start="27:23" pos:end="27:23">|</operator> <call pos:start="27:25" pos:end="27:60"><name pos:start="27:25" pos:end="27:27">TAI</name><argument_list pos:start="27:28" pos:end="27:60">(<argument pos:start="27:29" pos:end="27:38"><expr pos:start="27:29" pos:end="27:38"><name pos:start="27:29" pos:end="27:38">TCG_REG_TB</name></expr></argument>, <argument pos:start="27:41" pos:end="27:50"><expr pos:start="27:41" pos:end="27:50"><name pos:start="27:41" pos:end="27:50">TCG_REG_TB</name></expr></argument>, <argument pos:start="27:53" pos:end="27:59"><expr pos:start="27:53" pos:end="27:59"><name pos:start="27:53" pos:end="27:59">tb_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:43"><expr pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:14">i2</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:18">B</name> <operator pos:start="29:20" pos:end="29:20">|</operator> <operator pos:start="29:22" pos:end="29:22">(</operator><name pos:start="29:23" pos:end="29:29">br_diff</name> <operator pos:start="29:31" pos:end="29:31">&amp;</operator> <literal type="number" pos:start="29:33" pos:end="29:41">0x3fffffc</literal><operator pos:start="29:42" pos:end="29:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="46:0">else <block pos:start="31:16" pos:end="46:0">{<block_content pos:start="33:13" pos:end="41:56">

            <decl_stmt pos:start="33:13" pos:end="33:43"><decl pos:start="33:13" pos:end="33:42"><type pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:20">intptr_t</name></type> <name pos:start="33:22" pos:end="33:23">lo</name> <init pos:start="33:25" pos:end="33:42">= <expr pos:start="33:27" pos:end="33:42"><operator pos:start="33:27" pos:end="33:27">(</operator><name pos:start="33:28" pos:end="33:34">int16_t</name><operator pos:start="33:35" pos:end="33:35">)</operator><name pos:start="33:36" pos:end="33:42">tb_diff</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="35:13" pos:end="35:50"><decl pos:start="35:13" pos:end="35:49"><type pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:20">intptr_t</name></type> <name pos:start="35:22" pos:end="35:23">hi</name> <init pos:start="35:25" pos:end="35:49">= <expr pos:start="35:27" pos:end="35:49"><operator pos:start="35:27" pos:end="35:27">(</operator><name pos:start="35:28" pos:end="35:34">int32_t</name><operator pos:start="35:35" pos:end="35:35">)</operator><operator pos:start="35:36" pos:end="35:36">(</operator><name pos:start="35:37" pos:end="35:43">tb_diff</name> <operator pos:start="35:45" pos:end="35:45">-</operator> <name pos:start="35:47" pos:end="35:48">lo</name><operator pos:start="35:49" pos:end="35:49">)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:39"><expr pos:start="37:13" pos:end="37:38"><call pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:18">assert</name><argument_list pos:start="37:19" pos:end="37:38">(<argument pos:start="37:20" pos:end="37:37"><expr pos:start="37:20" pos:end="37:37"><name pos:start="37:20" pos:end="37:26">tb_diff</name> <operator pos:start="37:28" pos:end="37:29">==</operator> <name pos:start="37:31" pos:end="37:32">hi</name> <operator pos:start="37:34" pos:end="37:34">+</operator> <name pos:start="37:36" pos:end="37:37">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:63"><expr pos:start="39:13" pos:end="39:62"><name pos:start="39:13" pos:end="39:14">i1</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:22">ADDIS</name> <operator pos:start="39:24" pos:end="39:24">|</operator> <call pos:start="39:26" pos:end="39:62"><name pos:start="39:26" pos:end="39:28">TAI</name><argument_list pos:start="39:29" pos:end="39:62">(<argument pos:start="39:30" pos:end="39:39"><expr pos:start="39:30" pos:end="39:39"><name pos:start="39:30" pos:end="39:39">TCG_REG_TB</name></expr></argument>, <argument pos:start="39:42" pos:end="39:51"><expr pos:start="39:42" pos:end="39:51"><name pos:start="39:42" pos:end="39:51">TCG_REG_TB</name></expr></argument>, <argument pos:start="39:54" pos:end="39:61"><expr pos:start="39:54" pos:end="39:61"><name pos:start="39:54" pos:end="39:55">hi</name> <operator pos:start="39:57" pos:end="39:58">&gt;&gt;</operator> <literal type="number" pos:start="39:60" pos:end="39:61">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:56"><expr pos:start="41:13" pos:end="41:55"><name pos:start="41:13" pos:end="41:14">i2</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:21">ADDI</name> <operator pos:start="41:23" pos:end="41:23">|</operator> <call pos:start="41:25" pos:end="41:55"><name pos:start="41:25" pos:end="41:27">TAI</name><argument_list pos:start="41:28" pos:end="41:55">(<argument pos:start="41:29" pos:end="41:38"><expr pos:start="41:29" pos:end="41:38"><name pos:start="41:29" pos:end="41:38">TCG_REG_TB</name></expr></argument>, <argument pos:start="41:41" pos:end="41:50"><expr pos:start="41:41" pos:end="41:50"><name pos:start="41:41" pos:end="41:50">TCG_REG_TB</name></expr></argument>, <argument pos:start="41:53" pos:end="41:54"><expr pos:start="41:53" pos:end="41:54"><name pos:start="41:53" pos:end="41:54">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="45:1" pos:end="45:27">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

        <expr_stmt pos:start="47:9" pos:end="50:0"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:12">pair</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <operator pos:start="47:16" pos:end="47:16">(</operator><name pos:start="47:17" pos:end="47:24">uint64_t</name><operator pos:start="47:25" pos:end="47:25">)</operator><name pos:start="47:26" pos:end="47:27">i1</name> <operator pos:start="47:29" pos:end="47:30">&lt;&lt;</operator> <literal type="number" pos:start="47:32" pos:end="47:33">32</literal> <operator pos:start="47:35" pos:end="47:35">|</operator> <name pos:start="47:37" pos:end="47:38">i2</name></expr>;</expr_stmt>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="51:9" pos:end="54:0"><expr pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:12">pair</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:24">uint64_t</name><operator pos:start="51:25" pos:end="51:25">)</operator><name pos:start="51:26" pos:end="51:27">i2</name> <operator pos:start="51:29" pos:end="51:30">&lt;&lt;</operator> <literal type="number" pos:start="51:32" pos:end="51:33">32</literal> <operator pos:start="51:35" pos:end="51:35">|</operator> <name pos:start="51:37" pos:end="51:38">i1</name></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><call pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:18">atomic_set</name><argument_list pos:start="57:19" pos:end="57:46">(<argument pos:start="57:20" pos:end="57:39"><expr pos:start="57:20" pos:end="57:39"><operator pos:start="57:20" pos:end="57:20">(</operator><name pos:start="57:21" pos:end="57:28">uint64_t</name> <operator pos:start="57:30" pos:end="57:30">*</operator><operator pos:start="57:31" pos:end="57:31">)</operator><name pos:start="57:32" pos:end="57:39">jmp_addr</name></expr></argument>, <argument pos:start="57:42" pos:end="57:45"><expr pos:start="57:42" pos:end="57:45"><name pos:start="57:42" pos:end="57:45">pair</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:51"><expr pos:start="59:9" pos:end="59:50"><call pos:start="59:9" pos:end="59:50"><name pos:start="59:9" pos:end="59:26">flush_icache_range</name><argument_list pos:start="59:27" pos:end="59:50">(<argument pos:start="59:28" pos:end="59:35"><expr pos:start="59:28" pos:end="59:35"><name pos:start="59:28" pos:end="59:35">jmp_addr</name></expr></argument>, <argument pos:start="59:38" pos:end="59:49"><expr pos:start="59:38" pos:end="59:49"><name pos:start="59:38" pos:end="59:45">jmp_addr</name> <operator pos:start="59:47" pos:end="59:47">+</operator> <literal type="number" pos:start="59:49" pos:end="59:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="71:5">else <block pos:start="61:12" pos:end="71:5">{<block_content pos:start="63:9" pos:end="69:51">

        <decl_stmt pos:start="63:9" pos:end="63:40"><decl pos:start="63:9" pos:end="63:39"><type pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:16">intptr_t</name></type> <name pos:start="63:18" pos:end="63:21">diff</name> <init pos:start="63:23" pos:end="63:39">= <expr pos:start="63:25" pos:end="63:39"><name pos:start="63:25" pos:end="63:28">addr</name> <operator pos:start="63:30" pos:end="63:30">-</operator> <name pos:start="63:32" pos:end="63:39">jmp_addr</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:43"><expr pos:start="65:9" pos:end="65:42"><call pos:start="65:9" pos:end="65:42"><name pos:start="65:9" pos:end="65:24">tcg_debug_assert</name><argument_list pos:start="65:25" pos:end="65:42">(<argument pos:start="65:26" pos:end="65:41"><expr pos:start="65:26" pos:end="65:41"><call pos:start="65:26" pos:end="65:41"><name pos:start="65:26" pos:end="65:35">in_range_b</name><argument_list pos:start="65:36" pos:end="65:41">(<argument pos:start="65:37" pos:end="65:40"><expr pos:start="65:37" pos:end="65:40"><name pos:start="65:37" pos:end="65:40">diff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:65"><expr pos:start="67:9" pos:end="67:64"><call pos:start="67:9" pos:end="67:64"><name pos:start="67:9" pos:end="67:18">atomic_set</name><argument_list pos:start="67:19" pos:end="67:64">(<argument pos:start="67:20" pos:end="67:39"><expr pos:start="67:20" pos:end="67:39"><operator pos:start="67:20" pos:end="67:20">(</operator><name pos:start="67:21" pos:end="67:28">uint32_t</name> <operator pos:start="67:30" pos:end="67:30">*</operator><operator pos:start="67:31" pos:end="67:31">)</operator><name pos:start="67:32" pos:end="67:39">jmp_addr</name></expr></argument>, <argument pos:start="67:42" pos:end="67:63"><expr pos:start="67:42" pos:end="67:63"><name pos:start="67:42" pos:end="67:42">B</name> <operator pos:start="67:44" pos:end="67:44">|</operator> <operator pos:start="67:46" pos:end="67:46">(</operator><name pos:start="67:47" pos:end="67:50">diff</name> <operator pos:start="67:52" pos:end="67:52">&amp;</operator> <literal type="number" pos:start="67:54" pos:end="67:62">0x3fffffc</literal><operator pos:start="67:63" pos:end="67:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><call pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:26">flush_icache_range</name><argument_list pos:start="69:27" pos:end="69:50">(<argument pos:start="69:28" pos:end="69:35"><expr pos:start="69:28" pos:end="69:35"><name pos:start="69:28" pos:end="69:35">jmp_addr</name></expr></argument>, <argument pos:start="69:38" pos:end="69:49"><expr pos:start="69:38" pos:end="69:49"><name pos:start="69:38" pos:end="69:45">jmp_addr</name> <operator pos:start="69:47" pos:end="69:47">+</operator> <literal type="number" pos:start="69:49" pos:end="69:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
