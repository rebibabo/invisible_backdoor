<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23968.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:34"><name pos:start="1:1" pos:end="1:11">aio_write_f</name><argument_list pos:start="1:12" pos:end="1:34">(<argument pos:start="1:13" pos:end="1:20">int argc</argument>, <argument pos:start="1:23" pos:end="1:33">char **argv</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:9" pos:end="97:17">

	<decl_stmt pos:start="5:9" pos:end="5:22"><decl pos:start="5:9" pos:end="5:18"><type pos:start="5:9" pos:end="5:11"><name pos:start="5:9" pos:end="5:11">int</name></type> <name pos:start="5:13" pos:end="5:18">nr_iov</name></decl>, <decl pos:start="5:21" pos:end="5:21"><type ref="prev" pos:start="5:9" pos:end="5:11"/><name pos:start="5:21" pos:end="5:21">c</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:27"><decl pos:start="7:9" pos:end="7:26"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:19">pattern</name> <init pos:start="7:21" pos:end="7:26">= <expr pos:start="7:23" pos:end="7:26"><literal type="number" pos:start="7:23" pos:end="7:26">0xcd</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:64"><decl pos:start="9:9" pos:end="9:63"><type pos:start="9:9" pos:end="9:24"><name pos:start="9:9" pos:end="9:22"><name pos:start="9:9" pos:end="9:14">struct</name> <name pos:start="9:16" pos:end="9:22">aio_ctx</name></name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:27">ctx</name> <init pos:start="9:29" pos:end="9:63">= <expr pos:start="9:31" pos:end="9:63"><call pos:start="9:31" pos:end="9:63"><name pos:start="9:31" pos:end="9:36">calloc</name><argument_list pos:start="9:37" pos:end="9:63">(<argument pos:start="9:38" pos:end="9:38"><expr pos:start="9:38" pos:end="9:38"><literal type="number" pos:start="9:38" pos:end="9:38">1</literal></expr></argument>, <argument pos:start="9:41" pos:end="9:62"><expr pos:start="9:41" pos:end="9:62"><sizeof pos:start="9:41" pos:end="9:62">sizeof<argument_list pos:start="9:47" pos:end="9:62">(<argument pos:start="9:48" pos:end="9:61"><expr pos:start="9:48" pos:end="9:61">struct <name pos:start="9:55" pos:end="9:61">aio_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:30"><decl pos:start="11:9" pos:end="11:29"><type pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:24">BlockDriverAIOCB</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:29">acb</name></decl>;</decl_stmt>



	<while pos:start="15:9" pos:end="43:9">while <condition pos:start="15:15" pos:end="15:55">(<expr pos:start="15:16" pos:end="15:54"><operator pos:start="15:16" pos:end="15:16">(</operator><name pos:start="15:17" pos:end="15:17">c</name> <operator pos:start="15:19" pos:end="15:19">=</operator> <call pos:start="15:21" pos:end="15:46"><name pos:start="15:21" pos:end="15:26">getopt</name><argument_list pos:start="15:27" pos:end="15:46">(<argument pos:start="15:28" pos:end="15:31"><expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">argc</name></expr></argument>, <argument pos:start="15:34" pos:end="15:37"><expr pos:start="15:34" pos:end="15:37"><name pos:start="15:34" pos:end="15:37">argv</name></expr></argument>, <argument pos:start="15:40" pos:end="15:45"><expr pos:start="15:40" pos:end="15:45"><literal type="string" pos:start="15:40" pos:end="15:45">"CqP:"</literal></expr></argument>)</argument_list></call><operator pos:start="15:47" pos:end="15:47">)</operator> <operator pos:start="15:49" pos:end="15:50">!=</operator> <name pos:start="15:52" pos:end="15:54">EOF</name></expr>)</condition> <block pos:start="15:57" pos:end="43:9">{<block_content pos:start="17:17" pos:end="41:17">

		<switch pos:start="17:17" pos:end="41:17">switch <condition pos:start="17:24" pos:end="17:26">(<expr pos:start="17:25" pos:end="17:25"><name pos:start="17:25" pos:end="17:25">c</name></expr>)</condition> <block pos:start="17:28" pos:end="41:17">{<block_content pos:start="19:17" pos:end="39:61">

		<case pos:start="19:17" pos:end="19:25">case <expr pos:start="19:22" pos:end="19:24"><literal type="char" pos:start="19:22" pos:end="19:24">'C'</literal></expr>:</case>

			<expr_stmt pos:start="21:25" pos:end="21:39"><expr pos:start="21:25" pos:end="21:38"><name pos:start="21:25" pos:end="21:34"><name pos:start="21:25" pos:end="21:27">ctx</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:34">Cflag</name></name> <operator pos:start="21:36" pos:end="21:36">=</operator> <literal type="number" pos:start="21:38" pos:end="21:38">1</literal></expr>;</expr_stmt>

			<break pos:start="23:25" pos:end="23:30">break;</break>

		<case pos:start="25:17" pos:end="25:25">case <expr pos:start="25:22" pos:end="25:24"><literal type="char" pos:start="25:22" pos:end="25:24">'q'</literal></expr>:</case>

			<expr_stmt pos:start="27:25" pos:end="27:39"><expr pos:start="27:25" pos:end="27:38"><name pos:start="27:25" pos:end="27:34"><name pos:start="27:25" pos:end="27:27">ctx</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:34">qflag</name></name> <operator pos:start="27:36" pos:end="27:36">=</operator> <literal type="number" pos:start="27:38" pos:end="27:38">1</literal></expr>;</expr_stmt>

			<break pos:start="29:25" pos:end="29:30">break;</break>

		<case pos:start="31:17" pos:end="31:25">case <expr pos:start="31:22" pos:end="31:24"><literal type="char" pos:start="31:22" pos:end="31:24">'P'</literal></expr>:</case>

			<expr_stmt pos:start="33:25" pos:end="33:47"><expr pos:start="33:25" pos:end="33:46"><name pos:start="33:25" pos:end="33:31">pattern</name> <operator pos:start="33:33" pos:end="33:33">=</operator> <call pos:start="33:35" pos:end="33:46"><name pos:start="33:35" pos:end="33:38">atoi</name><argument_list pos:start="33:39" pos:end="33:46">(<argument pos:start="33:40" pos:end="33:45"><expr pos:start="33:40" pos:end="33:45"><name pos:start="33:40" pos:end="33:45">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="35:25" pos:end="35:30">break;</break>

		<default pos:start="37:17" pos:end="37:24">default:</default>

			<return pos:start="39:25" pos:end="39:61">return <expr pos:start="39:32" pos:end="39:60"><call pos:start="39:32" pos:end="39:60"><name pos:start="39:32" pos:end="39:44">command_usage</name><argument_list pos:start="39:45" pos:end="39:60">(<argument pos:start="39:46" pos:end="39:59"><expr pos:start="39:46" pos:end="39:59"><operator pos:start="39:46" pos:end="39:46">&amp;</operator><name pos:start="39:47" pos:end="39:59">aio_write_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></switch>

	</block_content>}</block></while>



	<if_stmt pos:start="47:9" pos:end="49:53"><if pos:start="47:9" pos:end="49:53">if <condition pos:start="47:12" pos:end="47:30">(<expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:18">optind</name> <operator pos:start="47:20" pos:end="47:20">&gt;</operator> <name pos:start="47:22" pos:end="47:25">argc</name> <operator pos:start="47:27" pos:end="47:27">-</operator> <literal type="number" pos:start="47:29" pos:end="47:29">2</literal></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:53"><block_content pos:start="49:17" pos:end="49:53">

		<return pos:start="49:17" pos:end="49:53">return <expr pos:start="49:24" pos:end="49:52"><call pos:start="49:24" pos:end="49:52"><name pos:start="49:24" pos:end="49:36">command_usage</name><argument_list pos:start="49:37" pos:end="49:52">(<argument pos:start="49:38" pos:end="49:51"><expr pos:start="49:38" pos:end="49:51"><operator pos:start="49:38" pos:end="49:38">&amp;</operator><name pos:start="49:39" pos:end="49:51">aio_write_cmd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



	<expr_stmt pos:start="53:9" pos:end="53:43"><expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:11">ctx</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:19">offset</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:42"><name pos:start="53:23" pos:end="53:28">cvtnum</name><argument_list pos:start="53:29" pos:end="53:42">(<argument pos:start="53:30" pos:end="53:41"><expr pos:start="53:30" pos:end="53:41"><name pos:start="53:30" pos:end="53:41"><name pos:start="53:30" pos:end="53:33">argv</name><index pos:start="53:34" pos:end="53:41">[<expr pos:start="53:35" pos:end="53:40"><name pos:start="53:35" pos:end="53:40">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:28">(<expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:15">ctx</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:23">offset</name></name> <operator pos:start="55:25" pos:end="55:25">&lt;</operator> <literal type="number" pos:start="55:27" pos:end="55:27">0</literal></expr>)</condition> <block pos:start="55:30" pos:end="61:9">{<block_content pos:start="57:17" pos:end="59:25">

		<expr_stmt pos:start="57:17" pos:end="57:76"><expr pos:start="57:17" pos:end="57:75"><call pos:start="57:17" pos:end="57:75"><name pos:start="57:17" pos:end="57:22">printf</name><argument_list pos:start="57:23" pos:end="57:75">(<argument pos:start="57:24" pos:end="57:60"><expr pos:start="57:24" pos:end="57:60"><literal type="string" pos:start="57:24" pos:end="57:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="57:63" pos:end="57:74"><expr pos:start="57:63" pos:end="57:74"><name pos:start="57:63" pos:end="57:74"><name pos:start="57:63" pos:end="57:66">argv</name><index pos:start="57:67" pos:end="57:74">[<expr pos:start="57:68" pos:end="57:73"><name pos:start="57:68" pos:end="57:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="59:17" pos:end="59:25">return <expr pos:start="59:24" pos:end="59:24"><literal type="number" pos:start="59:24" pos:end="59:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="63:9" pos:end="63:17"><expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:14">optind</name><operator pos:start="63:15" pos:end="63:16">++</operator></expr>;</expr_stmt>



	<if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:32">(<expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:15">ctx</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:23">offset</name></name> <operator pos:start="67:25" pos:end="67:25">&amp;</operator> <literal type="number" pos:start="67:27" pos:end="67:31">0x1ff</literal></expr>)</condition> <block pos:start="67:34" pos:end="75:9">{<block_content pos:start="69:17" pos:end="73:25">

		<expr_stmt pos:start="69:17" pos:end="71:48"><expr pos:start="69:17" pos:end="71:47"><call pos:start="69:17" pos:end="71:47"><name pos:start="69:17" pos:end="69:22">printf</name><argument_list pos:start="69:23" pos:end="71:47">(<argument pos:start="69:24" pos:end="69:60"><expr pos:start="69:24" pos:end="69:60"><literal type="string" pos:start="69:24" pos:end="69:60">"offset %lld is not sector aligned\n"</literal></expr></argument>,

			<argument pos:start="71:25" pos:end="71:46"><expr pos:start="71:25" pos:end="71:46"><operator pos:start="71:25" pos:end="71:25">(</operator><name pos:start="71:26" pos:end="71:29">long</name> <name pos:start="71:31" pos:end="71:34">long</name><operator pos:start="71:35" pos:end="71:35">)</operator><name pos:start="71:36" pos:end="71:46"><name pos:start="71:36" pos:end="71:38">ctx</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:46">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="73:17" pos:end="73:25">return <expr pos:start="73:24" pos:end="73:24"><literal type="number" pos:start="73:24" pos:end="73:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:14">nr_iov</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:21">argc</name> <operator pos:start="79:23" pos:end="79:23">-</operator> <name pos:start="79:25" pos:end="79:30">optind</name></expr>;</expr_stmt>

	<expr_stmt pos:start="81:9" pos:end="81:76"><expr pos:start="81:9" pos:end="81:75"><name pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:11">ctx</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:16">buf</name></name> <operator pos:start="81:18" pos:end="81:18">=</operator> <call pos:start="81:20" pos:end="81:75"><name pos:start="81:20" pos:end="81:31">create_iovec</name><argument_list pos:start="81:32" pos:end="81:75">(<argument pos:start="81:33" pos:end="81:42"><expr pos:start="81:33" pos:end="81:42"><operator pos:start="81:33" pos:end="81:33">&amp;</operator><name pos:start="81:34" pos:end="81:42"><name pos:start="81:34" pos:end="81:36">ctx</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:42">qiov</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:57"><expr pos:start="81:45" pos:end="81:57"><operator pos:start="81:45" pos:end="81:45">&amp;</operator><name pos:start="81:46" pos:end="81:57"><name pos:start="81:46" pos:end="81:49">argv</name><index pos:start="81:50" pos:end="81:57">[<expr pos:start="81:51" pos:end="81:56"><name pos:start="81:51" pos:end="81:56">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="81:60" pos:end="81:65"><expr pos:start="81:60" pos:end="81:65"><name pos:start="81:60" pos:end="81:65">nr_iov</name></expr></argument>, <argument pos:start="81:68" pos:end="81:74"><expr pos:start="81:68" pos:end="81:74"><name pos:start="81:68" pos:end="81:74">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><call pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:20">gettimeofday</name><argument_list pos:start="85:21" pos:end="85:36">(<argument pos:start="85:22" pos:end="85:29"><expr pos:start="85:22" pos:end="85:29"><operator pos:start="85:22" pos:end="85:22">&amp;</operator><name pos:start="85:23" pos:end="85:29"><name pos:start="85:23" pos:end="85:25">ctx</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:29">t1</name></name></expr></argument>, <argument pos:start="85:32" pos:end="85:35"><expr pos:start="85:32" pos:end="85:35"><name pos:start="85:32" pos:end="85:35">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="87:9" pos:end="89:72"><expr pos:start="87:9" pos:end="89:71"><name pos:start="87:9" pos:end="87:11">acb</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="89:71"><name pos:start="87:15" pos:end="87:29">bdrv_aio_writev</name><argument_list pos:start="87:30" pos:end="89:71">(<argument pos:start="87:31" pos:end="87:32"><expr pos:start="87:31" pos:end="87:32"><name pos:start="87:31" pos:end="87:32">bs</name></expr></argument>, <argument pos:start="87:35" pos:end="87:50"><expr pos:start="87:35" pos:end="87:50"><name pos:start="87:35" pos:end="87:45"><name pos:start="87:35" pos:end="87:37">ctx</name><operator pos:start="87:38" pos:end="87:39">-&gt;</operator><name pos:start="87:40" pos:end="87:45">offset</name></name> <operator pos:start="87:47" pos:end="87:48">&gt;&gt;</operator> <literal type="number" pos:start="87:50" pos:end="87:50">9</literal></expr></argument>, <argument pos:start="87:53" pos:end="87:62"><expr pos:start="87:53" pos:end="87:62"><operator pos:start="87:53" pos:end="87:53">&amp;</operator><name pos:start="87:54" pos:end="87:62"><name pos:start="87:54" pos:end="87:56">ctx</name><operator pos:start="87:57" pos:end="87:58">-&gt;</operator><name pos:start="87:59" pos:end="87:62">qiov</name></name></expr></argument>,

			      <argument pos:start="89:31" pos:end="89:49"><expr pos:start="89:31" pos:end="89:49"><name pos:start="89:31" pos:end="89:44"><name pos:start="89:31" pos:end="89:33">ctx</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:39">qiov</name><operator pos:start="89:40" pos:end="89:40">.</operator><name pos:start="89:41" pos:end="89:44">size</name></name> <operator pos:start="89:46" pos:end="89:47">&gt;&gt;</operator> <literal type="number" pos:start="89:49" pos:end="89:49">9</literal></expr></argument>, <argument pos:start="89:52" pos:end="89:65"><expr pos:start="89:52" pos:end="89:65"><name pos:start="89:52" pos:end="89:65">aio_write_done</name></expr></argument>, <argument pos:start="89:68" pos:end="89:70"><expr pos:start="89:68" pos:end="89:70"><name pos:start="89:68" pos:end="89:70">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="91:9" pos:end="93:28"><if pos:start="91:9" pos:end="93:28">if <condition pos:start="91:12" pos:end="91:17">(<expr pos:start="91:13" pos:end="91:16"><operator pos:start="91:13" pos:end="91:13">!</operator><name pos:start="91:14" pos:end="91:16">acb</name></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:28"><block_content pos:start="93:17" pos:end="93:28">

		<return pos:start="93:17" pos:end="93:28">return <expr pos:start="93:24" pos:end="93:27"><operator pos:start="93:24" pos:end="93:24">-</operator><name pos:start="93:25" pos:end="93:27">EIO</name></expr>;</return></block_content></block></if></if_stmt>



	<return pos:start="97:9" pos:end="97:17">return <expr pos:start="97:16" pos:end="97:16"><literal type="number" pos:start="97:16" pos:end="97:16">0</literal></expr>;</return>

</block_content>}</block>
</unit>
