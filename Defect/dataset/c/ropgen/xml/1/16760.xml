<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16760.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">ff_lzf_uncompress</name><parameter_list pos:start="1:22" pos:end="1:71">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:36">GetByteContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">gb</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:49">uint8_t</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier><modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">buf</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:64">int64_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:13">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name>     <init pos:start="5:17" pos:end="5:19">= <expr pos:start="5:19" pos:end="5:19"><literal type="number" pos:start="5:19" pos:end="5:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">p</name>  <init pos:start="7:17" pos:end="7:22">= <expr pos:start="7:19" pos:end="7:22"><operator pos:start="7:19" pos:end="7:19">*</operator><name pos:start="7:20" pos:end="7:22">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">len</name> <init pos:start="9:17" pos:end="9:19">= <expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="93:5">while <condition pos:start="13:11" pos:end="13:46">(<expr pos:start="13:12" pos:end="13:45"><call pos:start="13:12" pos:end="13:41"><name pos:start="13:12" pos:end="13:37">bytestream2_get_bytes_left</name><argument_list pos:start="13:38" pos:end="13:41">(<argument pos:start="13:39" pos:end="13:40"><expr pos:start="13:39" pos:end="13:40"><name pos:start="13:39" pos:end="13:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="13:43" pos:end="13:43">&gt;</operator> <literal type="number" pos:start="13:45" pos:end="13:45">2</literal></expr>)</condition> <block pos:start="13:48" pos:end="93:5">{<block_content pos:start="15:9" pos:end="91:9">

        <decl_stmt pos:start="15:9" pos:end="15:45"><decl pos:start="15:9" pos:end="15:44"><type pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:15">uint8_t</name></type> <name pos:start="15:17" pos:end="15:17">s</name> <init pos:start="15:19" pos:end="15:44">= <expr pos:start="15:21" pos:end="15:44"><call pos:start="15:21" pos:end="15:44"><name pos:start="15:21" pos:end="15:40">bytestream2_get_byte</name><argument_list pos:start="15:41" pos:end="15:44">(<argument pos:start="15:42" pos:end="15:43"><expr pos:start="15:42" pos:end="15:43"><name pos:start="15:42" pos:end="15:43">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="91:9"><if pos:start="19:9" pos:end="44:9">if <condition pos:start="19:12" pos:end="19:32">(<expr pos:start="19:13" pos:end="19:31"><name pos:start="19:13" pos:end="19:13">s</name> <operator pos:start="19:15" pos:end="19:15">&lt;</operator> <name pos:start="19:17" pos:end="19:31">LZF_LITERAL_MAX</name></expr>)</condition> <block pos:start="19:34" pos:end="44:9">{<block_content pos:start="21:13" pos:end="42:21">

            <expr_stmt pos:start="21:13" pos:end="21:16"><expr pos:start="21:13" pos:end="21:15"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="34:13"><if pos:start="23:13" pos:end="34:13">if <condition pos:start="23:16" pos:end="23:32">(<expr pos:start="23:17" pos:end="23:31"><name pos:start="23:17" pos:end="23:17">s</name> <operator pos:start="23:19" pos:end="23:19">&gt;</operator> <operator pos:start="23:21" pos:end="23:21">*</operator><name pos:start="23:22" pos:end="23:25">size</name> <operator pos:start="23:27" pos:end="23:27">-</operator> <name pos:start="23:29" pos:end="23:31">len</name></expr>)</condition> <block pos:start="23:34" pos:end="34:13">{<block_content pos:start="25:17" pos:end="31:31">

                <expr_stmt pos:start="25:17" pos:end="25:34"><expr pos:start="25:17" pos:end="25:33"><operator pos:start="25:17" pos:end="25:17">*</operator><name pos:start="25:18" pos:end="25:21">size</name> <operator pos:start="25:23" pos:end="25:24">+=</operator> <operator pos:start="25:26" pos:end="25:26">*</operator><name pos:start="25:27" pos:end="25:30">size</name> <operator pos:start="25:32" pos:end="25:32">/</operator><literal type="number" pos:start="25:33" pos:end="25:33">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="27:17" pos:end="27:46"><expr pos:start="27:17" pos:end="27:45"><name pos:start="27:17" pos:end="27:19">ret</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:45"><name pos:start="27:23" pos:end="27:33">av_reallocp</name><argument_list pos:start="27:34" pos:end="27:45">(<argument pos:start="27:35" pos:end="27:37"><expr pos:start="27:35" pos:end="27:37"><name pos:start="27:35" pos:end="27:37">buf</name></expr></argument>, <argument pos:start="27:40" pos:end="27:44"><expr pos:start="27:40" pos:end="27:44"><operator pos:start="27:40" pos:end="27:40">*</operator><name pos:start="27:41" pos:end="27:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="29:17" pos:end="31:31"><if pos:start="29:17" pos:end="31:31">if <condition pos:start="29:20" pos:end="29:28">(<expr pos:start="29:21" pos:end="29:27"><name pos:start="29:21" pos:end="29:23">ret</name> <operator pos:start="29:25" pos:end="29:25">&lt;</operator> <literal type="number" pos:start="29:27" pos:end="29:27">0</literal></expr>)</condition><block type="pseudo" pos:start="31:21" pos:end="31:31"><block_content pos:start="31:21" pos:end="31:31">

                    <return pos:start="31:21" pos:end="31:31">return <expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">ret</name></expr>;</return></block_content></block></if></if_stmt>


            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="38:13" pos:end="38:45"><expr pos:start="38:13" pos:end="38:44"><call pos:start="38:13" pos:end="38:44"><name pos:start="38:13" pos:end="38:34">bytestream2_get_buffer</name><argument_list pos:start="38:35" pos:end="38:44">(<argument pos:start="38:36" pos:end="38:37"><expr pos:start="38:36" pos:end="38:37"><name pos:start="38:36" pos:end="38:37">gb</name></expr></argument>, <argument pos:start="38:40" pos:end="38:40"><expr pos:start="38:40" pos:end="38:40"><name pos:start="38:40" pos:end="38:40">p</name></expr></argument>, <argument pos:start="38:43" pos:end="38:43"><expr pos:start="38:43" pos:end="38:43"><name pos:start="38:43" pos:end="38:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="40:13" pos:end="40:21"><expr pos:start="40:13" pos:end="40:20"><name pos:start="40:13" pos:end="40:13">p</name>   <operator pos:start="40:17" pos:end="40:18">+=</operator> <name pos:start="40:20" pos:end="40:20">s</name></expr>;</expr_stmt>

            <expr_stmt pos:start="42:13" pos:end="42:21"><expr pos:start="42:13" pos:end="42:20"><name pos:start="42:13" pos:end="42:15">len</name> <operator pos:start="42:17" pos:end="42:18">+=</operator> <name pos:start="42:20" pos:end="42:20">s</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="44:11" pos:end="91:9">else <block pos:start="44:16" pos:end="91:9">{<block_content pos:start="46:13" pos:end="89:21">

            <decl_stmt pos:start="46:13" pos:end="46:35"><decl pos:start="46:13" pos:end="46:34"><type pos:start="46:13" pos:end="46:15"><name pos:start="46:13" pos:end="46:15">int</name></type> <name pos:start="46:17" pos:end="46:17">l</name>   <init pos:start="46:21" pos:end="46:34">= <expr pos:start="46:23" pos:end="46:34"><literal type="number" pos:start="46:23" pos:end="46:25">2</literal> <operator pos:start="46:25" pos:end="46:25">+</operator> <operator pos:start="46:27" pos:end="46:27">(</operator><name pos:start="46:28" pos:end="46:28">s</name> <operator pos:start="46:30" pos:end="46:31">&gt;&gt;</operator> <literal type="number" pos:start="46:33" pos:end="46:33">5</literal><operator pos:start="46:34" pos:end="46:34">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="48:13" pos:end="48:44"><decl pos:start="48:13" pos:end="48:43"><type pos:start="48:13" pos:end="48:15"><name pos:start="48:13" pos:end="48:15">int</name></type> <name pos:start="48:17" pos:end="48:19">off</name> <init pos:start="48:21" pos:end="48:43">= <expr pos:start="48:23" pos:end="48:43"><operator pos:start="48:23" pos:end="48:23">(</operator><operator pos:start="48:24" pos:end="48:24">(</operator><name pos:start="48:25" pos:end="48:25">s</name> <operator pos:start="48:27" pos:end="48:27">&amp;</operator> <literal type="number" pos:start="48:29" pos:end="48:32">0x1f</literal><operator pos:start="48:33" pos:end="48:33">)</operator> <operator pos:start="48:35" pos:end="48:36">&lt;&lt;</operator> <literal type="number" pos:start="48:38" pos:end="48:38">8</literal><operator pos:start="48:39" pos:end="48:39">)</operator> <operator pos:start="48:41" pos:end="48:41">+</operator> <literal type="number" pos:start="48:43" pos:end="48:43">1</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="52:13" pos:end="54:46"><if pos:start="52:13" pos:end="54:46">if <condition pos:start="52:16" pos:end="52:38">(<expr pos:start="52:17" pos:end="52:37"><name pos:start="52:17" pos:end="52:17">l</name> <operator pos:start="52:19" pos:end="52:20">==</operator> <name pos:start="52:22" pos:end="52:37">LZF_LONG_BACKREF</name></expr>)</condition><block type="pseudo" pos:start="54:17" pos:end="54:46"><block_content pos:start="54:17" pos:end="54:46">

                <expr_stmt pos:start="54:17" pos:end="54:46"><expr pos:start="54:17" pos:end="54:45"><name pos:start="54:17" pos:end="54:17">l</name> <operator pos:start="54:19" pos:end="54:20">+=</operator> <call pos:start="54:22" pos:end="54:45"><name pos:start="54:22" pos:end="54:41">bytestream2_get_byte</name><argument_list pos:start="54:42" pos:end="54:45">(<argument pos:start="54:43" pos:end="54:44"><expr pos:start="54:43" pos:end="54:44"><name pos:start="54:43" pos:end="54:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="58:13" pos:end="58:44"><expr pos:start="58:13" pos:end="58:43"><name pos:start="58:13" pos:end="58:15">off</name> <operator pos:start="58:17" pos:end="58:18">+=</operator> <call pos:start="58:20" pos:end="58:43"><name pos:start="58:20" pos:end="58:39">bytestream2_get_byte</name><argument_list pos:start="58:40" pos:end="58:43">(<argument pos:start="58:41" pos:end="58:42"><expr pos:start="58:41" pos:end="58:42"><name pos:start="58:41" pos:end="58:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="62:13" pos:end="64:43"><if pos:start="62:13" pos:end="64:43">if <condition pos:start="62:16" pos:end="62:26">(<expr pos:start="62:17" pos:end="62:25"><name pos:start="62:17" pos:end="62:19">off</name> <operator pos:start="62:21" pos:end="62:21">&gt;</operator> <name pos:start="62:23" pos:end="62:25">len</name></expr>)</condition><block type="pseudo" pos:start="64:17" pos:end="64:43"><block_content pos:start="64:17" pos:end="64:43">

                <return pos:start="64:17" pos:end="64:43">return <expr pos:start="64:24" pos:end="64:42"><name pos:start="64:24" pos:end="64:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="68:13" pos:end="79:13"><if pos:start="68:13" pos:end="79:13">if <condition pos:start="68:16" pos:end="68:32">(<expr pos:start="68:17" pos:end="68:31"><name pos:start="68:17" pos:end="68:17">l</name> <operator pos:start="68:19" pos:end="68:19">&gt;</operator> <operator pos:start="68:21" pos:end="68:21">*</operator><name pos:start="68:22" pos:end="68:25">size</name> <operator pos:start="68:27" pos:end="68:27">-</operator> <name pos:start="68:29" pos:end="68:31">len</name></expr>)</condition> <block pos:start="68:34" pos:end="79:13">{<block_content pos:start="70:17" pos:end="76:31">

                <expr_stmt pos:start="70:17" pos:end="70:35"><expr pos:start="70:17" pos:end="70:34"><operator pos:start="70:17" pos:end="70:17">*</operator><name pos:start="70:18" pos:end="70:21">size</name> <operator pos:start="70:23" pos:end="70:24">+=</operator> <operator pos:start="70:26" pos:end="70:26">*</operator><name pos:start="70:27" pos:end="70:30">size</name> <operator pos:start="70:32" pos:end="70:32">/</operator> <literal type="number" pos:start="70:34" pos:end="70:34">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="72:17" pos:end="72:46"><expr pos:start="72:17" pos:end="72:45"><name pos:start="72:17" pos:end="72:19">ret</name> <operator pos:start="72:21" pos:end="72:21">=</operator> <call pos:start="72:23" pos:end="72:45"><name pos:start="72:23" pos:end="72:33">av_reallocp</name><argument_list pos:start="72:34" pos:end="72:45">(<argument pos:start="72:35" pos:end="72:37"><expr pos:start="72:35" pos:end="72:37"><name pos:start="72:35" pos:end="72:37">buf</name></expr></argument>, <argument pos:start="72:40" pos:end="72:44"><expr pos:start="72:40" pos:end="72:44"><operator pos:start="72:40" pos:end="72:40">*</operator><name pos:start="72:41" pos:end="72:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="74:17" pos:end="76:31"><if pos:start="74:17" pos:end="76:31">if <condition pos:start="74:20" pos:end="74:28">(<expr pos:start="74:21" pos:end="74:27"><name pos:start="74:21" pos:end="74:23">ret</name> <operator pos:start="74:25" pos:end="74:25">&lt;</operator> <literal type="number" pos:start="74:27" pos:end="74:27">0</literal></expr>)</condition><block type="pseudo" pos:start="76:21" pos:end="76:31"><block_content pos:start="76:21" pos:end="76:31">

                    <return pos:start="76:21" pos:end="76:31">return <expr pos:start="76:28" pos:end="76:30"><name pos:start="76:28" pos:end="76:30">ret</name></expr>;</return></block_content></block></if></if_stmt>


            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:41"><expr pos:start="83:13" pos:end="83:40"><call pos:start="83:13" pos:end="83:40"><name pos:start="83:13" pos:end="83:29">av_memcpy_backptr</name><argument_list pos:start="83:30" pos:end="83:40">(<argument pos:start="83:31" pos:end="83:31"><expr pos:start="83:31" pos:end="83:31"><name pos:start="83:31" pos:end="83:31">p</name></expr></argument>, <argument pos:start="83:34" pos:end="83:36"><expr pos:start="83:34" pos:end="83:36"><name pos:start="83:34" pos:end="83:36">off</name></expr></argument>, <argument pos:start="83:39" pos:end="83:39"><expr pos:start="83:39" pos:end="83:39"><name pos:start="83:39" pos:end="83:39">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:21"><expr pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:13">p</name>   <operator pos:start="87:17" pos:end="87:18">+=</operator> <name pos:start="87:20" pos:end="87:20">l</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:21"><expr pos:start="89:13" pos:end="89:20"><name pos:start="89:13" pos:end="89:15">len</name> <operator pos:start="89:17" pos:end="89:18">+=</operator> <name pos:start="89:20" pos:end="89:20">l</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="97:5" pos:end="97:16"><expr pos:start="97:5" pos:end="97:15"><operator pos:start="97:5" pos:end="97:5">*</operator><name pos:start="97:6" pos:end="97:9">size</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <name pos:start="97:13" pos:end="97:15">len</name></expr>;</expr_stmt>



    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
