<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23917.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">sd_open</name><parameter_list pos:start="1:19" pos:end="1:73">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:35">BlockDriverState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">bs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:61"><decl pos:start="1:42" pos:end="1:61"><type pos:start="1:42" pos:end="1:61"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:61">filename</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:15">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">vid</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">BDRVSheepdogState</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:24">s</name> <init pos:start="9:26" pos:end="9:37">= <expr pos:start="9:28" pos:end="9:37"><name pos:start="9:28" pos:end="9:37"><name pos:start="9:28" pos:end="9:29">bs</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:37">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:28"><name pos:start="11:10" pos:end="11:12">vdi</name><index pos:start="11:13" pos:end="11:28">[<expr pos:start="11:14" pos:end="11:27"><name pos:start="11:14" pos:end="11:27">SD_MAX_VDI_LEN</name></expr>]</index></name></decl>, <decl pos:start="11:31" pos:end="11:53"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:31" pos:end="11:53"><name pos:start="11:31" pos:end="11:33">tag</name><index pos:start="11:34" pos:end="11:53">[<expr pos:start="11:35" pos:end="11:52"><name pos:start="11:35" pos:end="11:52">SD_MAX_VDI_TAG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">snapid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">buf</name> <init pos:start="15:15" pos:end="15:20">= <expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:62"><expr pos:start="19:5" pos:end="19:61"><call pos:start="19:5" pos:end="19:61"><name pos:start="19:5" pos:end="19:12">strstart</name><argument_list pos:start="19:13" pos:end="19:61">(<argument pos:start="19:14" pos:end="19:21"><expr pos:start="19:14" pos:end="19:21"><name pos:start="19:14" pos:end="19:21">filename</name></expr></argument>, <argument pos:start="19:24" pos:end="19:34"><expr pos:start="19:24" pos:end="19:34"><literal type="string" pos:start="19:24" pos:end="19:34">"sheepdog:"</literal></expr></argument>, <argument pos:start="19:37" pos:end="19:60"><expr pos:start="19:37" pos:end="19:60"><operator pos:start="19:37" pos:end="19:37">(</operator><specifier pos:start="19:38" pos:end="19:42">const</specifier> <name pos:start="19:44" pos:end="19:47">char</name> <operator pos:start="19:49" pos:end="19:49">*</operator><operator pos:start="19:50" pos:end="19:50">*</operator><operator pos:start="19:51" pos:end="19:51">)</operator><operator pos:start="19:52" pos:end="19:52">&amp;</operator><name pos:start="19:53" pos:end="19:60">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><call pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:14">QLIST_INIT</name><argument_list pos:start="23:15" pos:end="23:37">(<argument pos:start="23:16" pos:end="23:36"><expr pos:start="23:16" pos:end="23:36"><operator pos:start="23:16" pos:end="23:16">&amp;</operator><name pos:start="23:17" pos:end="23:36"><name pos:start="23:17" pos:end="23:17">s</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:36">inflight_aio_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><call pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:14">QLIST_INIT</name><argument_list pos:start="25:15" pos:end="25:36">(<argument pos:start="25:16" pos:end="25:35"><expr pos:start="25:16" pos:end="25:35"><operator pos:start="25:16" pos:end="25:16">&amp;</operator><name pos:start="25:17" pos:end="25:35"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:35">pending_aio_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:15"><expr pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:9"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:9">fd</name></name> <operator pos:start="27:11" pos:end="27:11">=</operator> <operator pos:start="27:13" pos:end="27:13">-</operator><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:32"><expr pos:start="31:5" pos:end="31:31"><call pos:start="31:5" pos:end="31:31"><name pos:start="31:5" pos:end="31:10">memset</name><argument_list pos:start="31:11" pos:end="31:31">(<argument pos:start="31:12" pos:end="31:14"><expr pos:start="31:12" pos:end="31:14"><name pos:start="31:12" pos:end="31:14">vdi</name></expr></argument>, <argument pos:start="31:17" pos:end="31:17"><expr pos:start="31:17" pos:end="31:17"><literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr></argument>, <argument pos:start="31:20" pos:end="31:30"><expr pos:start="31:20" pos:end="31:30"><sizeof pos:start="31:20" pos:end="31:30">sizeof<argument_list pos:start="31:26" pos:end="31:30">(<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">vdi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><call pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:10">memset</name><argument_list pos:start="33:11" pos:end="33:31">(<argument pos:start="33:12" pos:end="33:14"><expr pos:start="33:12" pos:end="33:14"><name pos:start="33:12" pos:end="33:14">tag</name></expr></argument>, <argument pos:start="33:17" pos:end="33:17"><expr pos:start="33:17" pos:end="33:17"><literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr></argument>, <argument pos:start="33:20" pos:end="33:30"><expr pos:start="33:20" pos:end="33:30"><sizeof pos:start="33:20" pos:end="33:30">sizeof<argument_list pos:start="33:26" pos:end="33:30">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:58">(<expr pos:start="35:9" pos:end="35:57"><call pos:start="35:9" pos:end="35:53"><name pos:start="35:9" pos:end="35:21">parse_vdiname</name><argument_list pos:start="35:22" pos:end="35:53">(<argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><name pos:start="35:23" pos:end="35:23">s</name></expr></argument>, <argument pos:start="35:26" pos:end="35:33"><expr pos:start="35:26" pos:end="35:33"><name pos:start="35:26" pos:end="35:33">filename</name></expr></argument>, <argument pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><name pos:start="35:36" pos:end="35:38">vdi</name></expr></argument>, <argument pos:start="35:41" pos:end="35:47"><expr pos:start="35:41" pos:end="35:47"><operator pos:start="35:41" pos:end="35:41">&amp;</operator><name pos:start="35:42" pos:end="35:47">snapid</name></expr></argument>, <argument pos:start="35:50" pos:end="35:52"><expr pos:start="35:50" pos:end="35:52"><name pos:start="35:50" pos:end="35:52">tag</name></expr></argument>)</argument_list></call> <operator pos:start="35:55" pos:end="35:55">&lt;</operator> <literal type="number" pos:start="35:57" pos:end="35:57">0</literal></expr>)</condition> <block pos:start="35:60" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:17">

        <expr_stmt pos:start="37:9" pos:end="37:22"><expr pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">-</operator><name pos:start="37:16" pos:end="37:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:17">goto <name pos:start="39:14" pos:end="39:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:28"><expr pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:9"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:9">fd</name></name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:24">get_sheep_fd</name><argument_list pos:start="43:25" pos:end="43:27">(<argument pos:start="43:26" pos:end="43:26"><expr pos:start="43:26" pos:end="43:26"><name pos:start="43:26" pos:end="43:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:13">fd</name></name> <operator pos:start="45:15" pos:end="45:15">&lt;</operator> <literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>)</condition> <block pos:start="45:20" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:17">

        <expr_stmt pos:start="47:9" pos:end="47:20"><expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:19"><name pos:start="47:15" pos:end="47:15">s</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:19">fd</name></name></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:17">goto <name pos:start="49:14" pos:end="49:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:54"><expr pos:start="55:5" pos:end="55:53"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:53"><name pos:start="55:11" pos:end="55:23">find_vdi_name</name><argument_list pos:start="55:24" pos:end="55:53">(<argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">s</name></expr></argument>, <argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">vdi</name></expr></argument>, <argument pos:start="55:33" pos:end="55:38"><expr pos:start="55:33" pos:end="55:38"><name pos:start="55:33" pos:end="55:38">snapid</name></expr></argument>, <argument pos:start="55:41" pos:end="55:43"><expr pos:start="55:41" pos:end="55:43"><name pos:start="55:41" pos:end="55:43">tag</name></expr></argument>, <argument pos:start="55:46" pos:end="55:49"><expr pos:start="55:46" pos:end="55:49"><operator pos:start="55:46" pos:end="55:46">&amp;</operator><name pos:start="55:47" pos:end="55:49">vid</name></expr></argument>, <argument pos:start="55:52" pos:end="55:52"><expr pos:start="55:52" pos:end="55:52"><literal type="number" pos:start="55:52" pos:end="55:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:12">(<expr pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">ret</name></expr>)</condition> <block pos:start="57:14" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:17">

        <goto pos:start="59:9" pos:end="59:17">goto <name pos:start="59:14" pos:end="59:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:20">cache_enabled</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:52"><expr pos:start="67:5" pos:end="67:51"><name pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:15">flush_fd</name></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:51"><name pos:start="67:19" pos:end="67:33">connect_to_sdog</name><argument_list pos:start="67:34" pos:end="67:51">(<argument pos:start="67:35" pos:end="67:41"><expr pos:start="67:35" pos:end="67:41"><name pos:start="67:35" pos:end="67:41"><name pos:start="67:35" pos:end="67:35">s</name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:41">addr</name></name></expr></argument>, <argument pos:start="67:44" pos:end="67:50"><expr pos:start="67:44" pos:end="67:50"><name pos:start="67:44" pos:end="67:50"><name pos:start="67:44" pos:end="67:44">s</name><operator pos:start="67:45" pos:end="67:46">-&gt;</operator><name pos:start="67:47" pos:end="67:50">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="69:24">(<expr pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:19">flush_fd</name></name> <operator pos:start="69:21" pos:end="69:21">&lt;</operator> <literal type="number" pos:start="69:23" pos:end="69:23">0</literal></expr>)</condition> <block pos:start="69:26" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:17">

        <expr_stmt pos:start="71:9" pos:end="71:42"><expr pos:start="71:9" pos:end="71:41"><call pos:start="71:9" pos:end="71:41"><name pos:start="71:9" pos:end="71:20">error_report</name><argument_list pos:start="71:21" pos:end="71:41">(<argument pos:start="71:22" pos:end="71:40"><expr pos:start="71:22" pos:end="71:40"><literal type="string" pos:start="71:22" pos:end="71:40">"failed to connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:25"><name pos:start="73:15" pos:end="73:15">s</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:25">flush_fd</name></name></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:17">goto <name pos:start="75:14" pos:end="75:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:33">(<expr pos:start="81:9" pos:end="81:32"><name pos:start="81:9" pos:end="81:14">snapid</name> <operator pos:start="81:16" pos:end="81:17">||</operator> <name pos:start="81:19" pos:end="81:24"><name pos:start="81:19" pos:end="81:21">tag</name><index pos:start="81:22" pos:end="81:24">[<expr pos:start="81:23" pos:end="81:23"><literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>]</index></name> <operator pos:start="81:26" pos:end="81:27">!=</operator> <literal type="char" pos:start="81:29" pos:end="81:32">'\0'</literal></expr>)</condition> <block pos:start="81:35" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:27">

        <expr_stmt pos:start="83:9" pos:end="83:63"><expr pos:start="83:9" pos:end="83:62"><call pos:start="83:9" pos:end="83:62"><name pos:start="83:9" pos:end="83:15">dprintf</name><argument_list pos:start="83:16" pos:end="83:62">(<argument pos:start="83:17" pos:end="83:56"><expr pos:start="83:17" pos:end="83:56"><literal type="string" pos:start="83:17" pos:end="83:19">"%"</literal> <name pos:start="83:21" pos:end="83:26">PRIx32</name> <literal type="string" pos:start="83:28" pos:end="83:56">" snapshot inode was open.\n"</literal></expr></argument>, <argument pos:start="83:59" pos:end="83:61"><expr pos:start="83:59" pos:end="83:61"><name pos:start="83:59" pos:end="83:61">vid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:22">is_snapshot</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:43"><expr pos:start="91:5" pos:end="91:42"><name pos:start="91:5" pos:end="91:6">fd</name> <operator pos:start="91:8" pos:end="91:8">=</operator> <call pos:start="91:10" pos:end="91:42"><name pos:start="91:10" pos:end="91:24">connect_to_sdog</name><argument_list pos:start="91:25" pos:end="91:42">(<argument pos:start="91:26" pos:end="91:32"><expr pos:start="91:26" pos:end="91:32"><name pos:start="91:26" pos:end="91:32"><name pos:start="91:26" pos:end="91:26">s</name><operator pos:start="91:27" pos:end="91:28">-&gt;</operator><name pos:start="91:29" pos:end="91:32">addr</name></name></expr></argument>, <argument pos:start="91:35" pos:end="91:41"><expr pos:start="91:35" pos:end="91:41"><name pos:start="91:35" pos:end="91:41"><name pos:start="91:35" pos:end="91:35">s</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:41">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="93:15">(<expr pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:10">fd</name> <operator pos:start="93:12" pos:end="93:12">&lt;</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>)</condition> <block pos:start="93:17" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:17">

        <expr_stmt pos:start="95:9" pos:end="95:42"><expr pos:start="95:9" pos:end="95:41"><call pos:start="95:9" pos:end="95:41"><name pos:start="95:9" pos:end="95:20">error_report</name><argument_list pos:start="95:21" pos:end="95:41">(<argument pos:start="95:22" pos:end="95:40"><expr pos:start="95:22" pos:end="95:40"><literal type="string" pos:start="95:22" pos:end="95:40">"failed to connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:17"><expr pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:16">fd</name></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:17">goto <name pos:start="99:14" pos:end="99:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:34"><expr pos:start="105:5" pos:end="105:33"><name pos:start="105:5" pos:end="105:7">buf</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:33"><name pos:start="105:11" pos:end="105:18">g_malloc</name><argument_list pos:start="105:19" pos:end="105:33">(<argument pos:start="105:20" pos:end="105:32"><expr pos:start="105:20" pos:end="105:32"><name pos:start="105:20" pos:end="105:32">SD_INODE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="109:40"><expr pos:start="107:5" pos:end="109:39"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="109:39"><name pos:start="107:11" pos:end="107:21">read_object</name><argument_list pos:start="107:22" pos:end="109:39">(<argument pos:start="107:23" pos:end="107:24"><expr pos:start="107:23" pos:end="107:24"><name pos:start="107:23" pos:end="107:24">fd</name></expr></argument>, <argument pos:start="107:27" pos:end="107:29"><expr pos:start="107:27" pos:end="107:29"><name pos:start="107:27" pos:end="107:29">buf</name></expr></argument>, <argument pos:start="107:32" pos:end="107:50"><expr pos:start="107:32" pos:end="107:50"><call pos:start="107:32" pos:end="107:50"><name pos:start="107:32" pos:end="107:45">vid_to_vdi_oid</name><argument_list pos:start="107:46" pos:end="107:50">(<argument pos:start="107:47" pos:end="107:49"><expr pos:start="107:47" pos:end="107:49"><name pos:start="107:47" pos:end="107:49">vid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="107:53" pos:end="107:53"><expr pos:start="107:53" pos:end="107:53"><literal type="number" pos:start="107:53" pos:end="107:53">0</literal></expr></argument>, <argument pos:start="107:56" pos:end="107:68"><expr pos:start="107:56" pos:end="107:68"><name pos:start="107:56" pos:end="107:68">SD_INODE_SIZE</name></expr></argument>, <argument pos:start="107:71" pos:end="107:71"><expr pos:start="107:71" pos:end="107:71"><literal type="number" pos:start="107:71" pos:end="107:71">0</literal></expr></argument>,

                      <argument pos:start="109:23" pos:end="109:38"><expr pos:start="109:23" pos:end="109:38"><name pos:start="109:23" pos:end="109:38"><name pos:start="109:23" pos:end="109:23">s</name><operator pos:start="109:24" pos:end="109:25">-&gt;</operator><name pos:start="109:26" pos:end="109:38">cache_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:20"><expr pos:start="113:5" pos:end="113:19"><call pos:start="113:5" pos:end="113:19"><name pos:start="113:5" pos:end="113:15">closesocket</name><argument_list pos:start="113:16" pos:end="113:19">(<argument pos:start="113:17" pos:end="113:18"><expr pos:start="113:17" pos:end="113:18"><name pos:start="113:17" pos:end="113:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:12">(<expr pos:start="117:9" pos:end="117:11"><name pos:start="117:9" pos:end="117:11">ret</name></expr>)</condition> <block pos:start="117:14" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:17">

        <goto pos:start="119:9" pos:end="119:17">goto <name pos:start="119:14" pos:end="119:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:45"><expr pos:start="125:5" pos:end="125:44"><call pos:start="125:5" pos:end="125:44"><name pos:start="125:5" pos:end="125:10">memcpy</name><argument_list pos:start="125:11" pos:end="125:44">(<argument pos:start="125:12" pos:end="125:20"><expr pos:start="125:12" pos:end="125:20"><operator pos:start="125:12" pos:end="125:12">&amp;</operator><name pos:start="125:13" pos:end="125:20"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:20">inode</name></name></expr></argument>, <argument pos:start="125:23" pos:end="125:25"><expr pos:start="125:23" pos:end="125:25"><name pos:start="125:23" pos:end="125:25">buf</name></expr></argument>, <argument pos:start="125:28" pos:end="125:43"><expr pos:start="125:28" pos:end="125:43"><sizeof pos:start="125:28" pos:end="125:43">sizeof<argument_list pos:start="125:34" pos:end="125:43">(<argument pos:start="125:35" pos:end="125:42"><expr pos:start="125:35" pos:end="125:42"><name pos:start="125:35" pos:end="125:42"><name pos:start="125:35" pos:end="125:35">s</name><operator pos:start="125:36" pos:end="125:37">-&gt;</operator><name pos:start="125:38" pos:end="125:42">inode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:39"><expr pos:start="127:5" pos:end="127:38"><name pos:start="127:5" pos:end="127:25"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:25">min_dirty_data_idx</name></name> <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:38">UINT32_MAX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:30"><expr pos:start="129:5" pos:end="129:29"><name pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:25">max_dirty_data_idx</name></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:56"><expr pos:start="133:5" pos:end="133:55"><name pos:start="133:5" pos:end="133:21"><name pos:start="133:5" pos:end="133:6">bs</name><operator pos:start="133:7" pos:end="133:8">-&gt;</operator><name pos:start="133:9" pos:end="133:21">total_sectors</name></name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:41"><name pos:start="133:25" pos:end="133:25">s</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:32">inode</name><operator pos:start="133:33" pos:end="133:33">.</operator><name pos:start="133:34" pos:end="133:41">vdi_size</name></name> <operator pos:start="133:43" pos:end="133:43">/</operator> <name pos:start="133:45" pos:end="133:55">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:43"><expr pos:start="135:5" pos:end="135:42"><call pos:start="135:5" pos:end="135:42"><name pos:start="135:5" pos:end="135:11">strncpy</name><argument_list pos:start="135:12" pos:end="135:42">(<argument pos:start="135:13" pos:end="135:19"><expr pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:19">name</name></name></expr></argument>, <argument pos:start="135:22" pos:end="135:24"><expr pos:start="135:22" pos:end="135:24"><name pos:start="135:22" pos:end="135:24">vdi</name></expr></argument>, <argument pos:start="135:27" pos:end="135:41"><expr pos:start="135:27" pos:end="135:41"><sizeof pos:start="135:27" pos:end="135:41">sizeof<argument_list pos:start="135:33" pos:end="135:41">(<argument pos:start="135:34" pos:end="135:40"><expr pos:start="135:34" pos:end="135:40"><name pos:start="135:34" pos:end="135:40"><name pos:start="135:34" pos:end="135:34">s</name><operator pos:start="135:35" pos:end="135:36">-&gt;</operator><name pos:start="135:37" pos:end="135:40">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:33"><expr pos:start="137:5" pos:end="137:32"><call pos:start="137:5" pos:end="137:32"><name pos:start="137:5" pos:end="137:22">qemu_co_mutex_init</name><argument_list pos:start="137:23" pos:end="137:32">(<argument pos:start="137:24" pos:end="137:31"><expr pos:start="137:24" pos:end="137:31"><operator pos:start="137:24" pos:end="137:24">&amp;</operator><name pos:start="137:25" pos:end="137:31"><name pos:start="137:25" pos:end="137:25">s</name><operator pos:start="137:26" pos:end="137:27">-&gt;</operator><name pos:start="137:28" pos:end="137:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:16"><expr pos:start="139:5" pos:end="139:15"><call pos:start="139:5" pos:end="139:15"><name pos:start="139:5" pos:end="139:10">g_free</name><argument_list pos:start="139:11" pos:end="139:15">(<argument pos:start="139:12" pos:end="139:14"><expr pos:start="139:12" pos:end="139:14"><name pos:start="139:12" pos:end="139:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="141:5" pos:end="141:13">return <expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>;</return>

<label pos:start="143:1" pos:end="143:4"><name pos:start="143:1" pos:end="143:3">out</name>:</label>

    <expr_stmt pos:start="145:5" pos:end="145:59"><expr pos:start="145:5" pos:end="145:58"><call pos:start="145:5" pos:end="145:58"><name pos:start="145:5" pos:end="145:27">qemu_aio_set_fd_handler</name><argument_list pos:start="145:28" pos:end="145:58">(<argument pos:start="145:29" pos:end="145:33"><expr pos:start="145:29" pos:end="145:33"><name pos:start="145:29" pos:end="145:33"><name pos:start="145:29" pos:end="145:29">s</name><operator pos:start="145:30" pos:end="145:31">-&gt;</operator><name pos:start="145:32" pos:end="145:33">fd</name></name></expr></argument>, <argument pos:start="145:36" pos:end="145:39"><expr pos:start="145:36" pos:end="145:39"><name pos:start="145:36" pos:end="145:39">NULL</name></expr></argument>, <argument pos:start="145:42" pos:end="145:45"><expr pos:start="145:42" pos:end="145:45"><name pos:start="145:42" pos:end="145:45">NULL</name></expr></argument>, <argument pos:start="145:48" pos:end="145:51"><expr pos:start="145:48" pos:end="145:51"><name pos:start="145:48" pos:end="145:51">NULL</name></expr></argument>, <argument pos:start="145:54" pos:end="145:57"><expr pos:start="145:54" pos:end="145:57"><name pos:start="145:54" pos:end="145:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:19">(<expr pos:start="147:9" pos:end="147:18"><name pos:start="147:9" pos:end="147:13"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:13">fd</name></name> <operator pos:start="147:15" pos:end="147:16">&gt;=</operator> <literal type="number" pos:start="147:18" pos:end="147:18">0</literal></expr>)</condition> <block pos:start="147:21" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:27">

        <expr_stmt pos:start="149:9" pos:end="149:27"><expr pos:start="149:9" pos:end="149:26"><call pos:start="149:9" pos:end="149:26"><name pos:start="149:9" pos:end="149:19">closesocket</name><argument_list pos:start="149:20" pos:end="149:26">(<argument pos:start="149:21" pos:end="149:25"><expr pos:start="149:21" pos:end="149:25"><name pos:start="149:21" pos:end="149:25"><name pos:start="149:21" pos:end="149:21">s</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:25">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:16"><expr pos:start="153:5" pos:end="153:15"><call pos:start="153:5" pos:end="153:15"><name pos:start="153:5" pos:end="153:10">g_free</name><argument_list pos:start="153:11" pos:end="153:15">(<argument pos:start="153:12" pos:end="153:14"><expr pos:start="153:12" pos:end="153:14"><name pos:start="153:12" pos:end="153:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="155:5" pos:end="155:15">return <expr pos:start="155:12" pos:end="155:14"><name pos:start="155:12" pos:end="155:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
