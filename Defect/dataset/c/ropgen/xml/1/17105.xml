<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17105.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:24">window_check</name>)<parameter_list pos:start="1:26" pos:end="1:71">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:40">CPUXtensaState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:55">uint32_t</name></type> <name pos:start="1:57" pos:end="1:58">pc</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:70"><decl pos:start="1:61" pos:end="1:70"><type pos:start="1:61" pos:end="1:70"><name pos:start="1:61" pos:end="1:68">uint32_t</name></type> <name pos:start="1:70" pos:end="1:70">w</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:5">

    <decl_stmt pos:start="5:5" pos:end="5:73"><decl pos:start="5:5" pos:end="5:72"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:23">windowbase</name> <init pos:start="5:25" pos:end="5:72">= <expr pos:start="5:27" pos:end="5:72"><call pos:start="5:27" pos:end="5:72"><name pos:start="5:27" pos:end="5:42">windowbase_bound</name><argument_list pos:start="5:43" pos:end="5:72">(<argument pos:start="5:44" pos:end="5:66"><expr pos:start="5:44" pos:end="5:66"><name pos:start="5:44" pos:end="5:66"><name pos:start="5:44" pos:end="5:46">env</name><operator pos:start="5:47" pos:end="5:48">-&gt;</operator><name pos:start="5:49" pos:end="5:53">sregs</name><index pos:start="5:54" pos:end="5:66">[<expr pos:start="5:55" pos:end="5:65"><name pos:start="5:55" pos:end="5:65">WINDOW_BASE</name></expr>]</index></name></expr></argument>, <argument pos:start="5:69" pos:end="5:71"><expr pos:start="5:69" pos:end="5:71"><name pos:start="5:69" pos:end="5:71">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:24">windowstart</name> <init pos:start="7:26" pos:end="7:51">= <expr pos:start="7:28" pos:end="7:51"><name pos:start="7:28" pos:end="7:51"><name pos:start="7:28" pos:end="7:30">env</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:37">sregs</name><index pos:start="7:38" pos:end="7:51">[<expr pos:start="7:39" pos:end="7:50"><name pos:start="7:39" pos:end="7:50">WINDOW_START</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:14">m</name></decl>, <decl pos:start="9:17" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:17" pos:end="9:17">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:55">(<expr pos:start="13:9" pos:end="13:54"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:23"><name pos:start="13:10" pos:end="13:12">env</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:19">sregs</name><index pos:start="13:20" pos:end="13:23">[<expr pos:start="13:21" pos:end="13:22"><name pos:start="13:21" pos:end="13:22">PS</name></expr>]</index></name> <operator pos:start="13:25" pos:end="13:25">&amp;</operator> <operator pos:start="13:27" pos:end="13:27">(</operator><name pos:start="13:28" pos:end="13:33">PS_WOE</name> <operator pos:start="13:35" pos:end="13:35">|</operator> <name pos:start="13:37" pos:end="13:43">PS_EXCM</name><operator pos:start="13:44" pos:end="13:44">)</operator><operator pos:start="13:45" pos:end="13:45">)</operator> <operator pos:start="13:47" pos:end="13:47">^</operator> <name pos:start="13:49" pos:end="13:54">PS_WOE</name></expr>)</condition> <block pos:start="13:57" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="21:5" pos:end="35:5">for <control pos:start="21:9" pos:end="21:22">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">n</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:17">;</condition> <incr pos:start="21:19" pos:end="21:21"><expr pos:start="21:19" pos:end="21:21"><operator pos:start="21:19" pos:end="21:20">++</operator><name pos:start="21:21" pos:end="21:21">n</name></expr></incr>)</control> <block pos:start="21:24" pos:end="35:5">{<block_content pos:start="23:9" pos:end="33:9">

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:18">(<expr pos:start="23:13" pos:end="23:17"><name pos:start="23:13" pos:end="23:13">n</name> <operator pos:start="23:15" pos:end="23:15">&gt;</operator> <name pos:start="23:17" pos:end="23:17">w</name></expr>)</condition> <block pos:start="23:20" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:19">

            <return pos:start="25:13" pos:end="25:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:63">(<expr pos:start="29:13" pos:end="29:62"><name pos:start="29:13" pos:end="29:23">windowstart</name> <operator pos:start="29:25" pos:end="29:25">&amp;</operator> <call pos:start="29:27" pos:end="29:62"><name pos:start="29:27" pos:end="29:41">windowstart_bit</name><argument_list pos:start="29:42" pos:end="29:62">(<argument pos:start="29:43" pos:end="29:56"><expr pos:start="29:43" pos:end="29:56"><name pos:start="29:43" pos:end="29:52">windowbase</name> <operator pos:start="29:54" pos:end="29:54">+</operator> <name pos:start="29:56" pos:end="29:56">n</name></expr></argument>, <argument pos:start="29:59" pos:end="29:61"><expr pos:start="29:59" pos:end="29:61"><name pos:start="29:59" pos:end="29:61">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:65" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:18">

            <break pos:start="31:13" pos:end="31:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:5">m</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <call pos:start="39:9" pos:end="39:45"><name pos:start="39:9" pos:end="39:24">windowbase_bound</name><argument_list pos:start="39:25" pos:end="39:45">(<argument pos:start="39:26" pos:end="39:39"><expr pos:start="39:26" pos:end="39:39"><name pos:start="39:26" pos:end="39:35">windowbase</name> <operator pos:start="39:37" pos:end="39:37">+</operator> <name pos:start="39:39" pos:end="39:39">n</name></expr></argument>, <argument pos:start="39:42" pos:end="39:44"><expr pos:start="39:42" pos:end="39:44"><name pos:start="39:42" pos:end="39:44">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><call pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:17">rotate_window</name><argument_list pos:start="41:18" pos:end="41:25">(<argument pos:start="41:19" pos:end="41:21"><expr pos:start="41:19" pos:end="41:21"><name pos:start="41:19" pos:end="41:21">env</name></expr></argument>, <argument pos:start="41:24" pos:end="41:24"><expr pos:start="41:24" pos:end="41:24"><name pos:start="41:24" pos:end="41:24">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="45:47"><expr pos:start="43:5" pos:end="45:46"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:14">sregs</name><index pos:start="43:15" pos:end="43:18">[<expr pos:start="43:16" pos:end="43:17"><name pos:start="43:16" pos:end="43:17">PS</name></expr>]</index></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <operator pos:start="43:22" pos:end="43:22">(</operator><name pos:start="43:23" pos:end="43:36"><name pos:start="43:23" pos:end="43:25">env</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:32">sregs</name><index pos:start="43:33" pos:end="43:36">[<expr pos:start="43:34" pos:end="43:35"><name pos:start="43:34" pos:end="43:35">PS</name></expr>]</index></name> <operator pos:start="43:38" pos:end="43:38">&amp;</operator> <operator pos:start="43:40" pos:end="43:40">~</operator><name pos:start="43:41" pos:end="43:46">PS_OWB</name><operator pos:start="43:47" pos:end="43:47">)</operator> <operator pos:start="43:49" pos:end="43:49">|</operator>

        <operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:19">windowbase</name> <operator pos:start="45:21" pos:end="45:22">&lt;&lt;</operator> <name pos:start="45:24" pos:end="45:35">PS_OWB_SHIFT</name><operator pos:start="45:36" pos:end="45:36">)</operator> <operator pos:start="45:38" pos:end="45:38">|</operator> <name pos:start="45:40" pos:end="45:46">PS_EXCM</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:36"><expr pos:start="47:5" pos:end="47:35"><name pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:7">env</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:14">sregs</name><index pos:start="47:15" pos:end="47:20">[<expr pos:start="47:16" pos:end="47:19"><name pos:start="47:16" pos:end="47:19">EPC1</name></expr>]</index></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:30"><name pos:start="47:24" pos:end="47:26">env</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:30">pc</name></name> <operator pos:start="47:32" pos:end="47:32">=</operator> <name pos:start="47:34" pos:end="47:35">pc</name></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="63:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:50">(<expr pos:start="51:9" pos:end="51:49"><name pos:start="51:9" pos:end="51:19">windowstart</name> <operator pos:start="51:21" pos:end="51:21">&amp;</operator> <call pos:start="51:23" pos:end="51:49"><name pos:start="51:23" pos:end="51:37">windowstart_bit</name><argument_list pos:start="51:38" pos:end="51:49">(<argument pos:start="51:39" pos:end="51:43"><expr pos:start="51:39" pos:end="51:43"><name pos:start="51:39" pos:end="51:39">m</name> <operator pos:start="51:41" pos:end="51:41">+</operator> <literal type="number" pos:start="51:43" pos:end="51:43">1</literal></expr></argument>, <argument pos:start="51:46" pos:end="51:48"><expr pos:start="51:46" pos:end="51:48"><name pos:start="51:46" pos:end="51:48">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:52" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:53">

        <function_decl pos:start="53:9" pos:end="53:53"><type pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:14">HELPER</name></type>(<name pos:start="53:16" pos:end="53:24">exception</name>)<parameter_list pos:start="53:26" pos:end="53:52">(<parameter pos:start="53:27" pos:end="53:29"><decl pos:start="53:27" pos:end="53:29"><type pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">env</name></type></decl></parameter>, <parameter pos:start="53:32" pos:end="53:51"><decl pos:start="53:32" pos:end="53:51"><type pos:start="53:32" pos:end="53:51"><name pos:start="53:32" pos:end="53:51">EXC_WINDOW_OVERFLOW4</name></type></decl></parameter>)</parameter_list>;</function_decl>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="59:5">else if <condition pos:start="55:15" pos:end="55:57">(<expr pos:start="55:16" pos:end="55:56"><name pos:start="55:16" pos:end="55:26">windowstart</name> <operator pos:start="55:28" pos:end="55:28">&amp;</operator> <call pos:start="55:30" pos:end="55:56"><name pos:start="55:30" pos:end="55:44">windowstart_bit</name><argument_list pos:start="55:45" pos:end="55:56">(<argument pos:start="55:46" pos:end="55:50"><expr pos:start="55:46" pos:end="55:50"><name pos:start="55:46" pos:end="55:46">m</name> <operator pos:start="55:48" pos:end="55:48">+</operator> <literal type="number" pos:start="55:50" pos:end="55:50">2</literal></expr></argument>, <argument pos:start="55:53" pos:end="55:55"><expr pos:start="55:53" pos:end="55:55"><name pos:start="55:53" pos:end="55:55">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:59" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:53">

        <function_decl pos:start="57:9" pos:end="57:53"><type pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:14">HELPER</name></type>(<name pos:start="57:16" pos:end="57:24">exception</name>)<parameter_list pos:start="57:26" pos:end="57:52">(<parameter pos:start="57:27" pos:end="57:29"><decl pos:start="57:27" pos:end="57:29"><type pos:start="57:27" pos:end="57:29"><name pos:start="57:27" pos:end="57:29">env</name></type></decl></parameter>, <parameter pos:start="57:32" pos:end="57:51"><decl pos:start="57:32" pos:end="57:51"><type pos:start="57:32" pos:end="57:51"><name pos:start="57:32" pos:end="57:51">EXC_WINDOW_OVERFLOW8</name></type></decl></parameter>)</parameter_list>;</function_decl>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="63:5">else <block pos:start="59:12" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:54">

        <function_decl pos:start="61:9" pos:end="61:54"><type pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:14">HELPER</name></type>(<name pos:start="61:16" pos:end="61:24">exception</name>)<parameter_list pos:start="61:26" pos:end="61:53">(<parameter pos:start="61:27" pos:end="61:29"><decl pos:start="61:27" pos:end="61:29"><type pos:start="61:27" pos:end="61:29"><name pos:start="61:27" pos:end="61:29">env</name></type></decl></parameter>, <parameter pos:start="61:32" pos:end="61:52"><decl pos:start="61:32" pos:end="61:52"><type pos:start="61:32" pos:end="61:52"><name pos:start="61:32" pos:end="61:52">EXC_WINDOW_OVERFLOW12</name></type></decl></parameter>)</parameter_list>;</function_decl>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
