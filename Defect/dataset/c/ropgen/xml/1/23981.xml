<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23981.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">v9fs_xattr_write</name><parameter_list pos:start="1:28" pos:end="5:54">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:37">V9fsState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:49">V9fsPDU</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">pdu</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:74"><decl pos:start="1:57" pos:end="1:74"><type pos:start="1:57" pos:end="1:74"><name pos:start="1:57" pos:end="1:68">V9fsFidState</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">fidp</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:40"><decl pos:start="3:29" pos:end="3:40"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:36">uint64_t</name></type> <name pos:start="3:38" pos:end="3:40">off</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:50">uint32_t</name></type> <name pos:start="3:52" pos:end="3:56">count</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:44"><decl pos:start="5:29" pos:end="5:44"><type pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:34">struct</name> <name pos:start="5:36" pos:end="5:40">iovec</name></name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:44">sg</name></decl></parameter>, <parameter pos:start="5:47" pos:end="5:53"><decl pos:start="5:47" pos:end="5:53"><type pos:start="5:47" pos:end="5:53"><name pos:start="5:47" pos:end="5:49">int</name></type> <name pos:start="5:51" pos:end="5:53">cnt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="91:1">{<block_content pos:start="9:5" pos:end="89:15">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:18">to_copy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">ssize_t</name></type> <name pos:start="11:13" pos:end="11:15">err</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">write_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:21">xattr_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:17">offset</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">7</literal></expr></init></decl>;</decl_stmt>





    <expr_stmt pos:start="23:5" pos:end="23:35"><expr pos:start="23:5" pos:end="23:34"><name pos:start="23:5" pos:end="23:13">xattr_len</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:34"><name pos:start="23:17" pos:end="23:20">fidp</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:24">fs</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:30">xattr</name><operator pos:start="23:31" pos:end="23:31">.</operator><name pos:start="23:32" pos:end="23:34">len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:15">write_count</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:27">xattr_len</name> <operator pos:start="25:29" pos:end="25:29">-</operator> <name pos:start="25:31" pos:end="25:33">off</name></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="45:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:19">write_count</name> <operator pos:start="27:21" pos:end="27:21">&gt;</operator> <name pos:start="27:23" pos:end="27:27">count</name></expr>)</condition> <block pos:start="27:30" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:28">

        <expr_stmt pos:start="29:9" pos:end="29:28"><expr pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:19">write_count</name> <operator pos:start="29:21" pos:end="29:21">=</operator> <name pos:start="29:23" pos:end="29:27">count</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="31:7" pos:end="45:5">else if <condition pos:start="31:15" pos:end="31:31">(<expr pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:26">write_count</name> <operator pos:start="31:28" pos:end="31:28">&lt;</operator> <literal type="number" pos:start="31:30" pos:end="31:30">0</literal></expr>)</condition> <block pos:start="31:33" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:17">

        <comment type="block" pos:start="33:9" pos:end="39:11">/*

         * write beyond XATTR value len specified in

         * xattrcreate

         */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:11">err</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">-</operator><name pos:start="41:16" pos:end="41:21">ENOSPC</name></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:17">goto <name pos:start="43:14" pos:end="43:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:53"><expr pos:start="47:5" pos:end="47:52"><name pos:start="47:5" pos:end="47:7">err</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:52"><name pos:start="47:11" pos:end="47:21">pdu_marshal</name><argument_list pos:start="47:22" pos:end="47:52">(<argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">pdu</name></expr></argument>, <argument pos:start="47:28" pos:end="47:33"><expr pos:start="47:28" pos:end="47:33"><name pos:start="47:28" pos:end="47:33">offset</name></expr></argument>, <argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><literal type="string" pos:start="47:36" pos:end="47:38">"d"</literal></expr></argument>, <argument pos:start="47:41" pos:end="47:51"><expr pos:start="47:41" pos:end="47:51"><name pos:start="47:41" pos:end="47:51">write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:16">(<expr pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">err</name> <operator pos:start="49:13" pos:end="49:13">&lt;</operator> <literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr>)</condition> <block pos:start="49:18" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:19">

        <return pos:start="51:9" pos:end="51:19">return <expr pos:start="51:16" pos:end="51:18"><name pos:start="51:16" pos:end="51:18">err</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:18"><expr pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:7">err</name> <operator pos:start="55:9" pos:end="55:10">+=</operator> <name pos:start="55:12" pos:end="55:17">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:29"><name pos:start="57:5" pos:end="57:8">fidp</name><operator pos:start="57:9" pos:end="57:10">-&gt;</operator><name pos:start="57:11" pos:end="57:12">fs</name><operator pos:start="57:13" pos:end="57:13">.</operator><name pos:start="57:14" pos:end="57:18">xattr</name><operator pos:start="57:19" pos:end="57:19">.</operator><name pos:start="57:20" pos:end="57:29">copied_len</name></name> <operator pos:start="57:31" pos:end="57:32">+=</operator> <name pos:start="57:34" pos:end="57:44">write_count</name></expr>;</expr_stmt>

    <comment type="block" pos:start="59:5" pos:end="63:7">/*

     * Now copy the content from sg list

     */</comment>

    <for pos:start="65:5" pos:end="85:5">for <control pos:start="65:9" pos:end="65:29">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:24"><expr pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <name pos:start="65:21" pos:end="65:23">cnt</name></expr>;</condition> <incr pos:start="65:26" pos:end="65:28"><expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:26">i</name><operator pos:start="65:27" pos:end="65:28">++</operator></expr></incr>)</control> <block pos:start="65:31" pos:end="85:5">{<block_content pos:start="67:9" pos:end="83:31">

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:40">(<expr pos:start="67:13" pos:end="67:39"><name pos:start="67:13" pos:end="67:23">write_count</name> <operator pos:start="67:25" pos:end="67:25">&gt;</operator> <name pos:start="67:27" pos:end="67:31"><name pos:start="67:27" pos:end="67:28">sg</name><index pos:start="67:29" pos:end="67:31">[<expr pos:start="67:30" pos:end="67:30"><name pos:start="67:30" pos:end="67:30">i</name></expr>]</index></name><operator pos:start="67:32" pos:end="67:32">.</operator><name pos:start="67:33" pos:end="67:39">iov_len</name></expr>)</condition> <block pos:start="67:42" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:36">

            <expr_stmt pos:start="69:13" pos:end="69:36"><expr pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:19">to_copy</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:27"><name pos:start="69:23" pos:end="69:24">sg</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">i</name></expr>]</index></name><operator pos:start="69:28" pos:end="69:28">.</operator><name pos:start="69:29" pos:end="69:35">iov_len</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="75:9">else <block pos:start="71:16" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:34">

            <expr_stmt pos:start="73:13" pos:end="73:34"><expr pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:19">to_copy</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:33">write_count</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:76"><expr pos:start="77:9" pos:end="77:75"><call pos:start="77:9" pos:end="77:75"><name pos:start="77:9" pos:end="77:14">memcpy</name><argument_list pos:start="77:15" pos:end="77:75">(<argument pos:start="77:16" pos:end="77:49"><expr pos:start="77:16" pos:end="77:49"><operator pos:start="77:16" pos:end="77:16">(</operator><name pos:start="77:17" pos:end="77:20">char</name> <operator pos:start="77:22" pos:end="77:22">*</operator><operator pos:start="77:23" pos:end="77:23">)</operator><name pos:start="77:24" pos:end="77:43"><name pos:start="77:24" pos:end="77:27">fidp</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:31">fs</name><operator pos:start="77:32" pos:end="77:32">.</operator><name pos:start="77:33" pos:end="77:37">xattr</name><operator pos:start="77:38" pos:end="77:38">.</operator><name pos:start="77:39" pos:end="77:43">value</name></name> <operator pos:start="77:45" pos:end="77:45">+</operator> <name pos:start="77:47" pos:end="77:49">off</name></expr></argument>, <argument pos:start="77:52" pos:end="77:65"><expr pos:start="77:52" pos:end="77:65"><name pos:start="77:52" pos:end="77:56"><name pos:start="77:52" pos:end="77:53">sg</name><index pos:start="77:54" pos:end="77:56">[<expr pos:start="77:55" pos:end="77:55"><name pos:start="77:55" pos:end="77:55">i</name></expr>]</index></name><operator pos:start="77:57" pos:end="77:57">.</operator><name pos:start="77:58" pos:end="77:65">iov_base</name></expr></argument>, <argument pos:start="77:68" pos:end="77:74"><expr pos:start="77:68" pos:end="77:74"><name pos:start="77:68" pos:end="77:74">to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="79:9" pos:end="79:59">/* updating vs-&gt;off since we are not using below */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:23"><expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:11">off</name> <operator pos:start="81:13" pos:end="81:14">+=</operator> <name pos:start="81:16" pos:end="81:22">to_copy</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:31"><expr pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:19">write_count</name> <operator pos:start="83:21" pos:end="83:22">-=</operator> <name pos:start="83:24" pos:end="83:30">to_copy</name></expr>;</expr_stmt>

    </block_content>}</block></for>

<label pos:start="87:1" pos:end="87:4"><name pos:start="87:1" pos:end="87:3">out</name>:</label>

    <return pos:start="89:5" pos:end="89:15">return <expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
