<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8684.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">mmu_translate</name><parameter_list pos:start="1:18" pos:end="3:60">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:36"><name pos:start="1:19" pos:end="1:31">CPUS390XState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><name pos:start="1:39" pos:end="1:50">target_ulong</name></type> <name pos:start="1:52" pos:end="1:56">vaddr</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:64"><decl pos:start="1:59" pos:end="1:64"><type pos:start="1:59" pos:end="1:64"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:64">rw</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:78"><decl pos:start="1:67" pos:end="1:78"><type pos:start="1:67" pos:end="1:78"><name pos:start="1:67" pos:end="1:74">uint64_t</name></type> <name pos:start="1:76" pos:end="1:78">asc</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:37"><decl pos:start="3:19" pos:end="3:37"><type pos:start="3:19" pos:end="3:37"><name pos:start="3:19" pos:end="3:30">target_ulong</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:37">raddr</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:49"><decl pos:start="3:40" pos:end="3:49"><type pos:start="3:40" pos:end="3:49"><name pos:start="3:40" pos:end="3:42">int</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:49">flags</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:59"><decl pos:start="3:52" pos:end="3:59"><type pos:start="3:52" pos:end="3:59"><name pos:start="3:52" pos:end="3:55">bool</name></type> <name pos:start="3:57" pos:end="3:59">exc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:1">{<block_content pos:start="7:5" pos:end="127:13">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">r</name> <init pos:start="7:11" pos:end="7:14">= <expr pos:start="7:13" pos:end="7:14"><operator pos:start="7:13" pos:end="7:13">-</operator><literal type="number" pos:start="7:14" pos:end="7:14">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:15">sk</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:48"><expr pos:start="13:5" pos:end="13:47"><operator pos:start="13:5" pos:end="13:5">*</operator><name pos:start="13:6" pos:end="13:10">flags</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <name pos:start="13:14" pos:end="13:22">PAGE_READ</name> <operator pos:start="13:24" pos:end="13:24">|</operator> <name pos:start="13:26" pos:end="13:35">PAGE_WRITE</name> <operator pos:start="13:37" pos:end="13:37">|</operator> <name pos:start="13:39" pos:end="13:47">PAGE_EXEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:9">vaddr</name> <operator pos:start="15:11" pos:end="15:12">&amp;=</operator> <name pos:start="15:14" pos:end="15:29">TARGET_PAGE_MASK</name></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:40">(<expr pos:start="19:9" pos:end="19:39"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:23"><name pos:start="19:11" pos:end="19:13">env</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:18">psw</name><operator pos:start="19:19" pos:end="19:19">.</operator><name pos:start="19:20" pos:end="19:23">mask</name></name> <operator pos:start="19:25" pos:end="19:25">&amp;</operator> <name pos:start="19:27" pos:end="19:38">PSW_MASK_DAT</name><operator pos:start="19:39" pos:end="19:39">)</operator></expr>)</condition> <block pos:start="19:42" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:17">

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:14">raddr</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:22">vaddr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:14"><expr pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:9">r</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <literal type="number" pos:start="23:13" pos:end="23:13">0</literal></expr>;</expr_stmt>

        <goto pos:start="25:9" pos:end="25:17">goto <name pos:start="25:14" pos:end="25:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="31:5" pos:end="93:5">switch <condition pos:start="31:12" pos:end="31:16">(<expr pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">asc</name></expr>)</condition> <block pos:start="31:18" pos:end="93:5">{<block_content pos:start="33:5" pos:end="91:14">

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><name pos:start="33:10" pos:end="33:24">PSW_ASC_PRIMARY</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:51"><expr pos:start="35:9" pos:end="35:50"><call pos:start="35:9" pos:end="35:50"><name pos:start="35:9" pos:end="35:19">PTE_DPRINTF</name><argument_list pos:start="35:20" pos:end="35:50">(<argument pos:start="35:21" pos:end="35:39"><expr pos:start="35:21" pos:end="35:39"><literal type="string" pos:start="35:21" pos:end="35:39">"%s: asc=primary\n"</literal></expr></argument>, <argument pos:start="35:42" pos:end="35:49"><expr pos:start="35:42" pos:end="35:49"><name pos:start="35:42" pos:end="35:49">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="39:40"><expr pos:start="37:9" pos:end="39:39"><name pos:start="37:9" pos:end="37:9">r</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="39:39"><name pos:start="37:13" pos:end="37:30">mmu_translate_asce</name><argument_list pos:start="37:31" pos:end="39:39">(<argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><name pos:start="37:32" pos:end="37:34">env</name></expr></argument>, <argument pos:start="37:37" pos:end="37:41"><expr pos:start="37:37" pos:end="37:41"><name pos:start="37:37" pos:end="37:41">vaddr</name></expr></argument>, <argument pos:start="37:44" pos:end="37:46"><expr pos:start="37:44" pos:end="37:46"><name pos:start="37:44" pos:end="37:46">asc</name></expr></argument>, <argument pos:start="37:49" pos:end="37:61"><expr pos:start="37:49" pos:end="37:61"><name pos:start="37:49" pos:end="37:61"><name pos:start="37:49" pos:end="37:51">env</name><operator pos:start="37:52" pos:end="37:53">-&gt;</operator><name pos:start="37:54" pos:end="37:58">cregs</name><index pos:start="37:59" pos:end="37:61">[<expr pos:start="37:60" pos:end="37:60"><literal type="number" pos:start="37:60" pos:end="37:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="37:64" pos:end="37:68"><expr pos:start="37:64" pos:end="37:68"><name pos:start="37:64" pos:end="37:68">raddr</name></expr></argument>, <argument pos:start="37:71" pos:end="37:75"><expr pos:start="37:71" pos:end="37:75"><name pos:start="37:71" pos:end="37:75">flags</name></expr></argument>,

                               <argument pos:start="39:32" pos:end="39:33"><expr pos:start="39:32" pos:end="39:33"><name pos:start="39:32" pos:end="39:33">rw</name></expr></argument>, <argument pos:start="39:36" pos:end="39:38"><expr pos:start="39:36" pos:end="39:38"><name pos:start="39:36" pos:end="39:38">exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:22">case <expr pos:start="43:10" pos:end="43:21"><name pos:start="43:10" pos:end="43:21">PSW_ASC_HOME</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><call pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:19">PTE_DPRINTF</name><argument_list pos:start="45:20" pos:end="45:47">(<argument pos:start="45:21" pos:end="45:36"><expr pos:start="45:21" pos:end="45:36"><literal type="string" pos:start="45:21" pos:end="45:36">"%s: asc=home\n"</literal></expr></argument>, <argument pos:start="45:39" pos:end="45:46"><expr pos:start="45:39" pos:end="45:46"><name pos:start="45:39" pos:end="45:46">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="49:40"><expr pos:start="47:9" pos:end="49:39"><name pos:start="47:9" pos:end="47:9">r</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="49:39"><name pos:start="47:13" pos:end="47:30">mmu_translate_asce</name><argument_list pos:start="47:31" pos:end="49:39">(<argument pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:34">env</name></expr></argument>, <argument pos:start="47:37" pos:end="47:41"><expr pos:start="47:37" pos:end="47:41"><name pos:start="47:37" pos:end="47:41">vaddr</name></expr></argument>, <argument pos:start="47:44" pos:end="47:46"><expr pos:start="47:44" pos:end="47:46"><name pos:start="47:44" pos:end="47:46">asc</name></expr></argument>, <argument pos:start="47:49" pos:end="47:62"><expr pos:start="47:49" pos:end="47:62"><name pos:start="47:49" pos:end="47:62"><name pos:start="47:49" pos:end="47:51">env</name><operator pos:start="47:52" pos:end="47:53">-&gt;</operator><name pos:start="47:54" pos:end="47:58">cregs</name><index pos:start="47:59" pos:end="47:62">[<expr pos:start="47:60" pos:end="47:61"><literal type="number" pos:start="47:60" pos:end="47:61">13</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:65" pos:end="47:69"><expr pos:start="47:65" pos:end="47:69"><name pos:start="47:65" pos:end="47:69">raddr</name></expr></argument>, <argument pos:start="47:72" pos:end="47:76"><expr pos:start="47:72" pos:end="47:76"><name pos:start="47:72" pos:end="47:76">flags</name></expr></argument>,

                               <argument pos:start="49:32" pos:end="49:33"><expr pos:start="49:32" pos:end="49:33"><name pos:start="49:32" pos:end="49:33">rw</name></expr></argument>, <argument pos:start="49:36" pos:end="49:38"><expr pos:start="49:36" pos:end="49:38"><name pos:start="49:36" pos:end="49:38">exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:27">case <expr pos:start="53:10" pos:end="53:26"><name pos:start="53:10" pos:end="53:26">PSW_ASC_SECONDARY</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:53"><expr pos:start="55:9" pos:end="55:52"><call pos:start="55:9" pos:end="55:52"><name pos:start="55:9" pos:end="55:19">PTE_DPRINTF</name><argument_list pos:start="55:20" pos:end="55:52">(<argument pos:start="55:21" pos:end="55:41"><expr pos:start="55:21" pos:end="55:41"><literal type="string" pos:start="55:21" pos:end="55:41">"%s: asc=secondary\n"</literal></expr></argument>, <argument pos:start="55:44" pos:end="55:51"><expr pos:start="55:44" pos:end="55:51"><name pos:start="55:44" pos:end="55:51">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="57:9" pos:end="63:11">/*

         * Instruction: Primary

         * Data: Secondary

         */</comment>

        <if_stmt pos:start="65:9" pos:end="81:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:33">(<expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:14">rw</name> <operator pos:start="65:16" pos:end="65:17">==</operator> <name pos:start="65:19" pos:end="65:32">MMU_INST_FETCH</name></expr>)</condition> <block pos:start="65:35" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:48">

            <expr_stmt pos:start="67:13" pos:end="69:58"><expr pos:start="67:13" pos:end="69:57"><name pos:start="67:13" pos:end="67:13">r</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <call pos:start="67:17" pos:end="69:57"><name pos:start="67:17" pos:end="67:34">mmu_translate_asce</name><argument_list pos:start="67:35" pos:end="69:57">(<argument pos:start="67:36" pos:end="67:38"><expr pos:start="67:36" pos:end="67:38"><name pos:start="67:36" pos:end="67:38">env</name></expr></argument>, <argument pos:start="67:41" pos:end="67:45"><expr pos:start="67:41" pos:end="67:45"><name pos:start="67:41" pos:end="67:45">vaddr</name></expr></argument>, <argument pos:start="67:48" pos:end="67:62"><expr pos:start="67:48" pos:end="67:62"><name pos:start="67:48" pos:end="67:62">PSW_ASC_PRIMARY</name></expr></argument>, <argument pos:start="67:65" pos:end="67:77"><expr pos:start="67:65" pos:end="67:77"><name pos:start="67:65" pos:end="67:77"><name pos:start="67:65" pos:end="67:67">env</name><operator pos:start="67:68" pos:end="67:69">-&gt;</operator><name pos:start="67:70" pos:end="67:74">cregs</name><index pos:start="67:75" pos:end="67:77">[<expr pos:start="67:76" pos:end="67:76"><literal type="number" pos:start="67:76" pos:end="67:76">1</literal></expr>]</index></name></expr></argument>,

                                   <argument pos:start="69:36" pos:end="69:40"><expr pos:start="69:36" pos:end="69:40"><name pos:start="69:36" pos:end="69:40">raddr</name></expr></argument>, <argument pos:start="69:43" pos:end="69:47"><expr pos:start="69:43" pos:end="69:47"><name pos:start="69:43" pos:end="69:47">flags</name></expr></argument>, <argument pos:start="69:50" pos:end="69:51"><expr pos:start="69:50" pos:end="69:51"><name pos:start="69:50" pos:end="69:51">rw</name></expr></argument>, <argument pos:start="69:54" pos:end="69:56"><expr pos:start="69:54" pos:end="69:56"><name pos:start="69:54" pos:end="69:56">exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:48"><expr pos:start="71:13" pos:end="71:47"><operator pos:start="71:13" pos:end="71:13">*</operator><name pos:start="71:14" pos:end="71:18">flags</name> <operator pos:start="71:20" pos:end="71:21">&amp;=</operator> <operator pos:start="71:23" pos:end="71:23">~</operator><operator pos:start="71:24" pos:end="71:24">(</operator><name pos:start="71:25" pos:end="71:33">PAGE_READ</name> <operator pos:start="71:35" pos:end="71:35">|</operator> <name pos:start="71:37" pos:end="71:46">PAGE_WRITE</name><operator pos:start="71:47" pos:end="71:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="81:9">else <block pos:start="73:16" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:35">

            <expr_stmt pos:start="75:13" pos:end="77:58"><expr pos:start="75:13" pos:end="77:57"><name pos:start="75:13" pos:end="75:13">r</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <call pos:start="75:17" pos:end="77:57"><name pos:start="75:17" pos:end="75:34">mmu_translate_asce</name><argument_list pos:start="75:35" pos:end="77:57">(<argument pos:start="75:36" pos:end="75:38"><expr pos:start="75:36" pos:end="75:38"><name pos:start="75:36" pos:end="75:38">env</name></expr></argument>, <argument pos:start="75:41" pos:end="75:45"><expr pos:start="75:41" pos:end="75:45"><name pos:start="75:41" pos:end="75:45">vaddr</name></expr></argument>, <argument pos:start="75:48" pos:end="75:64"><expr pos:start="75:48" pos:end="75:64"><name pos:start="75:48" pos:end="75:64">PSW_ASC_SECONDARY</name></expr></argument>, <argument pos:start="75:67" pos:end="75:79"><expr pos:start="75:67" pos:end="75:79"><name pos:start="75:67" pos:end="75:79"><name pos:start="75:67" pos:end="75:69">env</name><operator pos:start="75:70" pos:end="75:71">-&gt;</operator><name pos:start="75:72" pos:end="75:76">cregs</name><index pos:start="75:77" pos:end="75:79">[<expr pos:start="75:78" pos:end="75:78"><literal type="number" pos:start="75:78" pos:end="75:78">7</literal></expr>]</index></name></expr></argument>,

                                   <argument pos:start="77:36" pos:end="77:40"><expr pos:start="77:36" pos:end="77:40"><name pos:start="77:36" pos:end="77:40">raddr</name></expr></argument>, <argument pos:start="77:43" pos:end="77:47"><expr pos:start="77:43" pos:end="77:47"><name pos:start="77:43" pos:end="77:47">flags</name></expr></argument>, <argument pos:start="77:50" pos:end="77:51"><expr pos:start="77:50" pos:end="77:51"><name pos:start="77:50" pos:end="77:51">rw</name></expr></argument>, <argument pos:start="77:54" pos:end="77:56"><expr pos:start="77:54" pos:end="77:56"><name pos:start="77:54" pos:end="77:56">exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:35"><expr pos:start="79:13" pos:end="79:34"><operator pos:start="79:13" pos:end="79:13">*</operator><name pos:start="79:14" pos:end="79:18">flags</name> <operator pos:start="79:20" pos:end="79:21">&amp;=</operator> <operator pos:start="79:23" pos:end="79:23">~</operator><operator pos:start="79:24" pos:end="79:24">(</operator><name pos:start="79:25" pos:end="79:33">PAGE_EXEC</name><operator pos:start="79:34" pos:end="79:34">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:24">case <expr pos:start="85:10" pos:end="85:23"><name pos:start="85:10" pos:end="85:23">PSW_ASC_ACCREG</name></expr>:</case>

    <default pos:start="87:5" pos:end="87:12">default:</default>

        <expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><call pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:16">hw_error</name><argument_list pos:start="89:17" pos:end="89:56">(<argument pos:start="89:18" pos:end="89:55"><expr pos:start="89:18" pos:end="89:55"><literal type="string" pos:start="89:18" pos:end="89:55">"guest switched to unknown asc mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    </block_content>}</block></switch>



 <label pos:start="97:2" pos:end="97:5"><name pos:start="97:2" pos:end="97:4">out</name>:</label>

    <comment type="block" pos:start="99:5" pos:end="99:50">/* Convert real address -&gt; absolute address */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:39"><expr pos:start="101:5" pos:end="101:38"><operator pos:start="101:5" pos:end="101:5">*</operator><name pos:start="101:6" pos:end="101:10">raddr</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <call pos:start="101:14" pos:end="101:38"><name pos:start="101:14" pos:end="101:25">mmu_real2abs</name><argument_list pos:start="101:26" pos:end="101:38">(<argument pos:start="101:27" pos:end="101:29"><expr pos:start="101:27" pos:end="101:29"><name pos:start="101:27" pos:end="101:29">env</name></expr></argument>, <argument pos:start="101:32" pos:end="101:37"><expr pos:start="101:32" pos:end="101:37"><operator pos:start="101:32" pos:end="101:32">*</operator><name pos:start="101:33" pos:end="101:37">raddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="123:5"><if pos:start="105:5" pos:end="123:5">if <condition pos:start="105:8" pos:end="105:27">(<expr pos:start="105:9" pos:end="105:26"><operator pos:start="105:9" pos:end="105:9">*</operator><name pos:start="105:10" pos:end="105:14">raddr</name> <operator pos:start="105:16" pos:end="105:17">&lt;=</operator> <name pos:start="105:19" pos:end="105:26">ram_size</name></expr>)</condition> <block pos:start="105:29" pos:end="123:5">{<block_content pos:start="107:9" pos:end="121:9">

        <expr_stmt pos:start="107:9" pos:end="107:59"><expr pos:start="107:9" pos:end="107:58"><name pos:start="107:9" pos:end="107:10">sk</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <operator pos:start="107:14" pos:end="107:14">&amp;</operator><name pos:start="107:15" pos:end="107:58"><name pos:start="107:15" pos:end="107:17">env</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:31">storage_keys</name><index pos:start="107:32" pos:end="107:58">[<expr pos:start="107:33" pos:end="107:57"><operator pos:start="107:33" pos:end="107:33">*</operator><name pos:start="107:34" pos:end="107:38">raddr</name> <operator pos:start="107:40" pos:end="107:40">/</operator> <name pos:start="107:42" pos:end="107:57">TARGET_PAGE_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:31">(<expr pos:start="109:13" pos:end="109:30"><operator pos:start="109:13" pos:end="109:13">*</operator><name pos:start="109:14" pos:end="109:18">flags</name> <operator pos:start="109:20" pos:end="109:20">&amp;</operator> <name pos:start="109:22" pos:end="109:30">PAGE_READ</name></expr>)</condition> <block pos:start="109:33" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:24">

            <expr_stmt pos:start="111:13" pos:end="111:24"><expr pos:start="111:13" pos:end="111:23"><operator pos:start="111:13" pos:end="111:13">*</operator><name pos:start="111:14" pos:end="111:15">sk</name> <operator pos:start="111:17" pos:end="111:18">|=</operator> <name pos:start="111:20" pos:end="111:23">SK_R</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:32">(<expr pos:start="117:13" pos:end="117:31"><operator pos:start="117:13" pos:end="117:13">*</operator><name pos:start="117:14" pos:end="117:18">flags</name> <operator pos:start="117:20" pos:end="117:20">&amp;</operator> <name pos:start="117:22" pos:end="117:31">PAGE_WRITE</name></expr>)</condition> <block pos:start="117:34" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:24">

            <expr_stmt pos:start="119:13" pos:end="119:24"><expr pos:start="119:13" pos:end="119:23"><operator pos:start="119:13" pos:end="119:13">*</operator><name pos:start="119:14" pos:end="119:15">sk</name> <operator pos:start="119:17" pos:end="119:18">|=</operator> <name pos:start="119:20" pos:end="119:23">SK_C</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="127:5" pos:end="127:13">return <expr pos:start="127:12" pos:end="127:12"><name pos:start="127:12" pos:end="127:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
