<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/433.c" pos:tabs="8"><function pos:start="1:1" pos:end="114:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="2:40">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:73">data_size</name></decl></parameter>,
                        <parameter pos:start="2:25" pos:end="2:39"><decl pos:start="2:25" pos:end="2:39"><type pos:start="2:25" pos:end="2:39"><name pos:start="2:25" pos:end="2:32">AVPacket</name> <modifier pos:start="2:34" pos:end="2:34">*</modifier></type><name pos:start="2:35" pos:end="2:39">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="2:42" pos:end="114:1">{<block_content pos:start="3:5" pos:end="113:20">
    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:19"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:17">uint8_t</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:22">buf</name> <init pos:start="3:24" pos:end="3:36">= <expr pos:start="3:26" pos:end="3:36"><name pos:start="3:26" pos:end="3:36"><name pos:start="3:26" pos:end="3:30">avpkt</name><operator pos:start="3:31" pos:end="3:32">-&gt;</operator><name pos:start="3:33" pos:end="3:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:31"><decl pos:start="4:5" pos:end="4:30"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:16">buf_size</name> <init pos:start="4:18" pos:end="4:30">= <expr pos:start="4:20" pos:end="4:30"><name pos:start="4:20" pos:end="4:30"><name pos:start="4:20" pos:end="4:24">avpkt</name><operator pos:start="4:25" pos:end="4:26">-&gt;</operator><name pos:start="4:27" pos:end="4:30">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AVSubtitle</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">sub</name> <init pos:start="5:21" pos:end="5:26">= <expr pos:start="5:23" pos:end="5:26"><name pos:start="5:23" pos:end="5:26">data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:44"><decl pos:start="6:5" pos:end="6:43"><type pos:start="6:5" pos:end="6:19"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:17">uint8_t</name> <modifier pos:start="6:19" pos:end="6:19">*</modifier></type><name pos:start="6:20" pos:end="6:26">buf_end</name> <init pos:start="6:28" pos:end="6:43">= <expr pos:start="6:30" pos:end="6:43"><name pos:start="6:30" pos:end="6:32">buf</name> <operator pos:start="6:34" pos:end="6:34">+</operator> <name pos:start="6:36" pos:end="6:43">buf_size</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:19">bitmap</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:27"><decl pos:start="8:5" pos:end="8:9"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:9">w</name></decl>, <decl pos:start="8:12" pos:end="8:12"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:12" pos:end="8:12">h</name></decl>, <decl pos:start="8:15" pos:end="8:15"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:15" pos:end="8:15">x</name></decl>, <decl pos:start="8:18" pos:end="8:18"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:18" pos:end="8:18">y</name></decl>, <decl pos:start="8:21" pos:end="8:21"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:21" pos:end="8:21">i</name></decl>, <decl pos:start="8:24" pos:end="8:26"><type ref="prev" pos:start="8:5" pos:end="8:7"/><name pos:start="8:24" pos:end="8:26">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:23">packet_time</name> <init pos:start="9:25" pos:end="9:27">= <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:21"><decl pos:start="10:5" pos:end="10:20"><type pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:17">GetBitContext</name></type> <name pos:start="10:19" pos:end="10:20">gb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:63"><decl pos:start="11:5" pos:end="11:62"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">has_alpha</name> <init pos:start="11:19" pos:end="11:62">= <expr pos:start="11:21" pos:end="11:62"><name pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:25">avctx</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:36">codec_tag</name></name> <operator pos:start="11:38" pos:end="11:39">==</operator> <call pos:start="11:41" pos:end="11:62"><name pos:start="11:41" pos:end="11:45">MKTAG</name><argument_list pos:start="11:46" pos:end="11:62">(<argument pos:start="11:47" pos:end="11:49"><expr pos:start="11:47" pos:end="11:49"><literal type="char" pos:start="11:47" pos:end="11:49">'D'</literal></expr></argument>,<argument pos:start="11:51" pos:end="11:53"><expr pos:start="11:51" pos:end="11:53"><literal type="char" pos:start="11:51" pos:end="11:53">'X'</literal></expr></argument>,<argument pos:start="11:55" pos:end="11:57"><expr pos:start="11:55" pos:end="11:57"><literal type="char" pos:start="11:55" pos:end="11:57">'S'</literal></expr></argument>,<argument pos:start="11:59" pos:end="11:61"><expr pos:start="11:59" pos:end="11:61"><literal type="char" pos:start="11:59" pos:end="11:61">'A'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:start="12:5" pos:end="12:38">// check that at least header fits</comment>
    <if_stmt pos:start="13:5" pos:end="16:5"><if pos:start="13:5" pos:end="16:5">if <condition pos:start="13:8" pos:end="13:52">(<expr pos:start="13:9" pos:end="13:51"><name pos:start="13:9" pos:end="13:16">buf_size</name> <operator pos:start="13:18" pos:end="13:18">&lt;</operator> <literal type="number" pos:start="13:20" pos:end="13:23">27</literal> <operator pos:start="13:23" pos:end="13:23">+</operator> <literal type="number" pos:start="13:25" pos:end="13:25">7</literal> <operator pos:start="13:27" pos:end="13:27">*</operator> <literal type="number" pos:start="13:29" pos:end="13:31">2</literal> <operator pos:start="13:31" pos:end="13:31">+</operator> <literal type="number" pos:start="13:33" pos:end="13:33">4</literal> <operator pos:start="13:35" pos:end="13:35">*</operator> <operator pos:start="13:37" pos:end="13:37">(</operator><literal type="number" pos:start="13:38" pos:end="13:40">3</literal> <operator pos:start="13:40" pos:end="13:40">+</operator> <name pos:start="13:42" pos:end="13:50">has_alpha</name><operator pos:start="13:51" pos:end="13:51">)</operator></expr>)</condition> <block pos:start="13:54" pos:end="16:5">{<block_content pos:start="14:9" pos:end="15:18">
        <expr_stmt pos:start="14:9" pos:end="14:81"><expr pos:start="14:9" pos:end="14:80"><call pos:start="14:9" pos:end="14:80"><name pos:start="14:9" pos:end="14:14">av_log</name><argument_list pos:start="14:15" pos:end="14:80">(<argument pos:start="14:16" pos:end="14:20"><expr pos:start="14:16" pos:end="14:20"><name pos:start="14:16" pos:end="14:20">avctx</name></expr></argument>, <argument pos:start="14:23" pos:end="14:34"><expr pos:start="14:23" pos:end="14:34"><name pos:start="14:23" pos:end="14:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="14:37" pos:end="14:69"><expr pos:start="14:37" pos:end="14:69"><literal type="string" pos:start="14:37" pos:end="14:69">"coded frame size %d too small\n"</literal></expr></argument>, <argument pos:start="14:72" pos:end="14:79"><expr pos:start="14:72" pos:end="14:79"><name pos:start="14:72" pos:end="14:79">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="line" pos:start="17:5" pos:end="17:30">// read start and end time</comment>
    <if_stmt pos:start="18:5" pos:end="21:5"><if pos:start="18:5" pos:end="21:5">if <condition pos:start="18:8" pos:end="18:58">(<expr pos:start="18:9" pos:end="18:57"><name pos:start="18:9" pos:end="18:14"><name pos:start="18:9" pos:end="18:11">buf</name><index pos:start="18:12" pos:end="18:14">[<expr pos:start="18:13" pos:end="18:13"><literal type="number" pos:start="18:13" pos:end="18:13">0</literal></expr>]</index></name> <operator pos:start="18:16" pos:end="18:17">!=</operator> <literal type="char" pos:start="18:19" pos:end="18:21">'['</literal> <operator pos:start="18:23" pos:end="18:24">||</operator> <name pos:start="18:26" pos:end="18:32"><name pos:start="18:26" pos:end="18:28">buf</name><index pos:start="18:29" pos:end="18:32">[<expr pos:start="18:30" pos:end="18:31"><literal type="number" pos:start="18:30" pos:end="18:31">13</literal></expr>]</index></name> <operator pos:start="18:34" pos:end="18:35">!=</operator> <literal type="char" pos:start="18:37" pos:end="18:39">'-'</literal> <operator pos:start="18:41" pos:end="18:42">||</operator> <name pos:start="18:44" pos:end="18:50"><name pos:start="18:44" pos:end="18:46">buf</name><index pos:start="18:47" pos:end="18:50">[<expr pos:start="18:48" pos:end="18:49"><literal type="number" pos:start="18:48" pos:end="18:49">26</literal></expr>]</index></name> <operator pos:start="18:52" pos:end="18:53">!=</operator> <literal type="char" pos:start="18:55" pos:end="18:57">']'</literal></expr>)</condition> <block pos:start="18:60" pos:end="21:5">{<block_content pos:start="19:9" pos:end="20:18">
        <expr_stmt pos:start="19:9" pos:end="19:59"><expr pos:start="19:9" pos:end="19:58"><call pos:start="19:9" pos:end="19:58"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:58">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">avctx</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:37" pos:end="19:57"><expr pos:start="19:37" pos:end="19:57"><literal type="string" pos:start="19:37" pos:end="19:57">"invalid time code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="20:9" pos:end="20:18">return <expr pos:start="20:16" pos:end="20:17"><operator pos:start="20:16" pos:end="20:16">-</operator><literal type="number" pos:start="20:17" pos:end="20:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="22:5" pos:end="23:86"><if pos:start="22:5" pos:end="23:86">if <condition pos:start="22:8" pos:end="22:37">(<expr pos:start="22:9" pos:end="22:36"><name pos:start="22:9" pos:end="22:18"><name pos:start="22:9" pos:end="22:13">avpkt</name><operator pos:start="22:14" pos:end="22:15">-&gt;</operator><name pos:start="22:16" pos:end="22:18">pts</name></name> <operator pos:start="22:20" pos:end="22:21">!=</operator> <name pos:start="22:23" pos:end="22:36">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:86"><block_content pos:start="23:9" pos:end="23:86">
        <expr_stmt pos:start="23:9" pos:end="23:86"><expr pos:start="23:9" pos:end="23:85"><name pos:start="23:9" pos:end="23:19">packet_time</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <macro pos:start="23:23" pos:end="23:85"><name pos:start="23:23" pos:end="23:34">av_rescale_q</name><argument_list pos:start="23:35" pos:end="23:85">(<argument pos:start="23:36" pos:end="23:45">avpkt-&gt;pts</argument>, <argument pos:start="23:48" pos:end="23:61">AV_TIME_BASE_Q</argument>, <argument pos:start="23:64" pos:end="23:77">(AVRational){<literal type="number" pos:start="23:77" pos:end="23:77">1</literal></argument>, <argument pos:start="23:80" pos:end="23:84"><literal type="number" pos:start="23:80" pos:end="23:83">1000</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:68"><expr pos:start="24:5" pos:end="24:67"><name pos:start="24:5" pos:end="24:27"><name pos:start="24:5" pos:end="24:7">sub</name><operator pos:start="24:8" pos:end="24:9">-&gt;</operator><name pos:start="24:10" pos:end="24:27">start_display_time</name></name> <operator pos:start="24:29" pos:end="24:29">=</operator> <call pos:start="24:31" pos:end="24:67"><name pos:start="24:31" pos:end="24:44">parse_timecode</name><argument_list pos:start="24:45" pos:end="24:67">(<argument pos:start="24:46" pos:end="24:53"><expr pos:start="24:46" pos:end="24:53"><name pos:start="24:46" pos:end="24:48">buf</name> <operator pos:start="24:50" pos:end="24:50">+</operator>  <literal type="number" pos:start="24:53" pos:end="24:53">1</literal></expr></argument>, <argument pos:start="24:56" pos:end="24:66"><expr pos:start="24:56" pos:end="24:66"><name pos:start="24:56" pos:end="24:66">packet_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:68"><expr pos:start="25:5" pos:end="25:67"><name pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:7">sub</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:25">end_display_time</name></name>   <operator pos:start="25:29" pos:end="25:29">=</operator> <call pos:start="25:31" pos:end="25:67"><name pos:start="25:31" pos:end="25:44">parse_timecode</name><argument_list pos:start="25:45" pos:end="25:67">(<argument pos:start="25:46" pos:end="25:53"><expr pos:start="25:46" pos:end="25:53"><name pos:start="25:46" pos:end="25:48">buf</name> <operator pos:start="25:50" pos:end="25:50">+</operator> <literal type="number" pos:start="25:52" pos:end="25:53">14</literal></expr></argument>, <argument pos:start="25:56" pos:end="25:66"><expr pos:start="25:56" pos:end="25:66"><name pos:start="25:56" pos:end="25:66">packet_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:14"><expr pos:start="26:5" pos:end="26:13"><name pos:start="26:5" pos:end="26:7">buf</name> <operator pos:start="26:9" pos:end="26:10">+=</operator> <literal type="number" pos:start="26:12" pos:end="26:13">27</literal></expr>;</expr_stmt>
    <comment type="line" pos:start="27:5" pos:end="27:18">// read header</comment>
    <expr_stmt pos:start="28:5" pos:end="28:34"><expr pos:start="28:5" pos:end="28:33"><name pos:start="28:5" pos:end="28:5">w</name> <operator pos:start="28:7" pos:end="28:7">=</operator> <call pos:start="28:9" pos:end="28:33"><name pos:start="28:9" pos:end="28:27">bytestream_get_le16</name><argument_list pos:start="28:28" pos:end="28:33">(<argument pos:start="28:29" pos:end="28:32"><expr pos:start="28:29" pos:end="28:32"><operator pos:start="28:29" pos:end="28:29">&amp;</operator><name pos:start="28:30" pos:end="28:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:5">h</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <call pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:27">bytestream_get_le16</name><argument_list pos:start="29:28" pos:end="29:33">(<argument pos:start="29:29" pos:end="29:32"><expr pos:start="29:29" pos:end="29:32"><operator pos:start="29:29" pos:end="29:29">&amp;</operator><name pos:start="29:30" pos:end="29:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="31:18"><if pos:start="30:5" pos:end="31:18">if <condition pos:start="30:8" pos:end="30:48">(<expr pos:start="30:9" pos:end="30:47"><call pos:start="30:9" pos:end="30:43"><name pos:start="30:9" pos:end="30:27">av_image_check_size</name><argument_list pos:start="30:28" pos:end="30:43">(<argument pos:start="30:29" pos:end="30:29"><expr pos:start="30:29" pos:end="30:29"><name pos:start="30:29" pos:end="30:29">w</name></expr></argument>, <argument pos:start="30:32" pos:end="30:32"><expr pos:start="30:32" pos:end="30:32"><name pos:start="30:32" pos:end="30:32">h</name></expr></argument>, <argument pos:start="30:35" pos:end="30:35"><expr pos:start="30:35" pos:end="30:35"><literal type="number" pos:start="30:35" pos:end="30:35">0</literal></expr></argument>, <argument pos:start="30:38" pos:end="30:42"><expr pos:start="30:38" pos:end="30:42"><name pos:start="30:38" pos:end="30:42">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="30:45" pos:end="30:45">&lt;</operator> <literal type="number" pos:start="30:47" pos:end="30:47">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:18"><block_content pos:start="31:9" pos:end="31:18">
        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:34"><expr pos:start="32:5" pos:end="32:33"><name pos:start="32:5" pos:end="32:5">x</name> <operator pos:start="32:7" pos:end="32:7">=</operator> <call pos:start="32:9" pos:end="32:33"><name pos:start="32:9" pos:end="32:27">bytestream_get_le16</name><argument_list pos:start="32:28" pos:end="32:33">(<argument pos:start="32:29" pos:end="32:32"><expr pos:start="32:29" pos:end="32:32"><operator pos:start="32:29" pos:end="32:29">&amp;</operator><name pos:start="32:30" pos:end="32:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:5">y</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <call pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:27">bytestream_get_le16</name><argument_list pos:start="33:28" pos:end="33:33">(<argument pos:start="33:29" pos:end="33:32"><expr pos:start="33:29" pos:end="33:32"><operator pos:start="33:29" pos:end="33:29">&amp;</operator><name pos:start="33:30" pos:end="33:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="34:5" pos:end="34:62">// skip bottom right position, it gives no new information</comment>
    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><call pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:23">bytestream_get_le16</name><argument_list pos:start="35:24" pos:end="35:29">(<argument pos:start="35:25" pos:end="35:28"><expr pos:start="35:25" pos:end="35:28"><operator pos:start="35:25" pos:end="35:25">&amp;</operator><name pos:start="35:26" pos:end="35:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:30"><expr pos:start="36:5" pos:end="36:29"><call pos:start="36:5" pos:end="36:29"><name pos:start="36:5" pos:end="36:23">bytestream_get_le16</name><argument_list pos:start="36:24" pos:end="36:29">(<argument pos:start="36:25" pos:end="36:28"><expr pos:start="36:25" pos:end="36:28"><operator pos:start="36:25" pos:end="36:25">&amp;</operator><name pos:start="36:26" pos:end="36:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="37:5" pos:end="37:67">// The following value is supposed to indicate the start offset</comment>
    <comment type="line" pos:start="38:5" pos:end="38:66">// (relative to the palette) of the data for the second field,</comment>
    <comment type="line" pos:start="39:5" pos:end="39:69">// however there are files in which it has a bogus value and thus</comment>
    <comment type="line" pos:start="40:5" pos:end="40:24">// we just ignore it</comment>
    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><call pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:23">bytestream_get_le16</name><argument_list pos:start="41:24" pos:end="41:29">(<argument pos:start="41:25" pos:end="41:28"><expr pos:start="41:25" pos:end="41:28"><operator pos:start="41:25" pos:end="41:25">&amp;</operator><name pos:start="41:26" pos:end="41:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line" pos:start="42:5" pos:end="42:34">// allocate sub and set values</comment>
    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:7">sub</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:14">rects</name></name> <operator pos:start="43:16" pos:end="43:16">=</operator>  <call pos:start="43:19" pos:end="43:49"><name pos:start="43:19" pos:end="43:28">av_mallocz</name><argument_list pos:start="43:29" pos:end="43:49">(<argument pos:start="43:30" pos:end="43:48"><expr pos:start="43:30" pos:end="43:48"><sizeof pos:start="43:30" pos:end="43:48">sizeof<argument_list pos:start="43:36" pos:end="43:48">(<argument pos:start="43:37" pos:end="43:47"><expr pos:start="43:37" pos:end="43:47"><operator pos:start="43:37" pos:end="43:37">*</operator><name pos:start="43:38" pos:end="43:47"><name pos:start="43:38" pos:end="43:40">sub</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:47">rects</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="44:5" pos:end="45:31"><if pos:start="44:5" pos:end="45:31">if <condition pos:start="44:8" pos:end="44:20">(<expr pos:start="44:9" pos:end="44:19"><operator pos:start="44:9" pos:end="44:9">!</operator><name pos:start="44:10" pos:end="44:19"><name pos:start="44:10" pos:end="44:12">sub</name><operator pos:start="44:13" pos:end="44:14">-&gt;</operator><name pos:start="44:15" pos:end="44:19">rects</name></name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:31"><block_content pos:start="45:9" pos:end="45:31">
        <return pos:start="45:9" pos:end="45:31">return <expr pos:start="45:16" pos:end="45:30"><call pos:start="45:16" pos:end="45:30"><name pos:start="45:16" pos:end="45:22">AVERROR</name><argument_list pos:start="45:23" pos:end="45:30">(<argument pos:start="45:24" pos:end="45:29"><expr pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:55"><expr pos:start="46:5" pos:end="46:54"><name pos:start="46:5" pos:end="46:17"><name pos:start="46:5" pos:end="46:7">sub</name><operator pos:start="46:8" pos:end="46:9">-&gt;</operator><name pos:start="46:10" pos:end="46:14">rects</name><index pos:start="46:15" pos:end="46:17">[<expr pos:start="46:16" pos:end="46:16"><literal type="number" pos:start="46:16" pos:end="46:16">0</literal></expr>]</index></name> <operator pos:start="46:19" pos:end="46:19">=</operator> <call pos:start="46:21" pos:end="46:54"><name pos:start="46:21" pos:end="46:30">av_mallocz</name><argument_list pos:start="46:31" pos:end="46:54">(<argument pos:start="46:32" pos:end="46:53"><expr pos:start="46:32" pos:end="46:53"><sizeof pos:start="46:32" pos:end="46:53">sizeof<argument_list pos:start="46:38" pos:end="46:53">(<argument pos:start="46:39" pos:end="46:52"><expr pos:start="46:39" pos:end="46:52"><operator pos:start="46:39" pos:end="46:39">*</operator><name pos:start="46:40" pos:end="46:52"><name pos:start="46:40" pos:end="46:42">sub</name><operator pos:start="46:43" pos:end="46:44">-&gt;</operator><name pos:start="46:45" pos:end="46:49">rects</name><index pos:start="46:50" pos:end="46:52">[<expr pos:start="46:51" pos:end="46:51"><literal type="number" pos:start="46:51" pos:end="46:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="47:5" pos:end="50:5"><if pos:start="47:5" pos:end="50:5">if <condition pos:start="47:8" pos:end="47:23">(<expr pos:start="47:9" pos:end="47:22"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:22"><name pos:start="47:10" pos:end="47:12">sub</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:19">rects</name><index pos:start="47:20" pos:end="47:22">[<expr pos:start="47:21" pos:end="47:21"><literal type="number" pos:start="47:21" pos:end="47:21">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="47:25" pos:end="50:5">{<block_content pos:start="48:9" pos:end="49:31">
        <expr_stmt pos:start="48:9" pos:end="48:30"><expr pos:start="48:9" pos:end="48:29"><call pos:start="48:9" pos:end="48:29"><name pos:start="48:9" pos:end="48:16">av_freep</name><argument_list pos:start="48:17" pos:end="48:29">(<argument pos:start="48:18" pos:end="48:28"><expr pos:start="48:18" pos:end="48:28"><operator pos:start="48:18" pos:end="48:18">&amp;</operator><name pos:start="48:19" pos:end="48:28"><name pos:start="48:19" pos:end="48:21">sub</name><operator pos:start="48:22" pos:end="48:23">-&gt;</operator><name pos:start="48:24" pos:end="48:28">rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="49:9" pos:end="49:31">return <expr pos:start="49:16" pos:end="49:30"><call pos:start="49:16" pos:end="49:30"><name pos:start="49:16" pos:end="49:22">AVERROR</name><argument_list pos:start="49:23" pos:end="49:30">(<argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><name pos:start="49:24" pos:end="49:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:25"><expr pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:7">sub</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:14">rects</name><index pos:start="51:15" pos:end="51:17">[<expr pos:start="51:16" pos:end="51:16"><literal type="number" pos:start="51:16" pos:end="51:16">0</literal></expr>]</index></name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:20">x</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:24">x</name></expr>;</expr_stmt> <expr_stmt pos:start="51:27" pos:end="51:47"><expr pos:start="51:27" pos:end="51:46"><name pos:start="51:27" pos:end="51:39"><name pos:start="51:27" pos:end="51:29">sub</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:36">rects</name><index pos:start="51:37" pos:end="51:39">[<expr pos:start="51:38" pos:end="51:38"><literal type="number" pos:start="51:38" pos:end="51:38">0</literal></expr>]</index></name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:42">y</name> <operator pos:start="51:44" pos:end="51:44">=</operator> <name pos:start="51:46" pos:end="51:46">y</name></expr>;</expr_stmt>
    <expr_stmt pos:start="52:5" pos:end="52:25"><expr pos:start="52:5" pos:end="52:24"><name pos:start="52:5" pos:end="52:17"><name pos:start="52:5" pos:end="52:7">sub</name><operator pos:start="52:8" pos:end="52:9">-&gt;</operator><name pos:start="52:10" pos:end="52:14">rects</name><index pos:start="52:15" pos:end="52:17">[<expr pos:start="52:16" pos:end="52:16"><literal type="number" pos:start="52:16" pos:end="52:16">0</literal></expr>]</index></name><operator pos:start="52:18" pos:end="52:19">-&gt;</operator><name pos:start="52:20" pos:end="52:20">w</name> <operator pos:start="52:22" pos:end="52:22">=</operator> <name pos:start="52:24" pos:end="52:24">w</name></expr>;</expr_stmt> <expr_stmt pos:start="52:27" pos:end="52:47"><expr pos:start="52:27" pos:end="52:46"><name pos:start="52:27" pos:end="52:39"><name pos:start="52:27" pos:end="52:29">sub</name><operator pos:start="52:30" pos:end="52:31">-&gt;</operator><name pos:start="52:32" pos:end="52:36">rects</name><index pos:start="52:37" pos:end="52:39">[<expr pos:start="52:38" pos:end="52:38"><literal type="number" pos:start="52:38" pos:end="52:38">0</literal></expr>]</index></name><operator pos:start="52:40" pos:end="52:41">-&gt;</operator><name pos:start="52:42" pos:end="52:42">h</name> <operator pos:start="52:44" pos:end="52:44">=</operator> <name pos:start="52:46" pos:end="52:46">h</name></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:42"><expr pos:start="53:5" pos:end="53:41"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:7">sub</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:14">rects</name><index pos:start="53:15" pos:end="53:17">[<expr pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>]</index></name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:23">type</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:41">SUBTITLE_BITMAP</name></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:35"><expr pos:start="54:5" pos:end="54:34"><name pos:start="54:5" pos:end="54:17"><name pos:start="54:5" pos:end="54:7">sub</name><operator pos:start="54:8" pos:end="54:9">-&gt;</operator><name pos:start="54:10" pos:end="54:14">rects</name><index pos:start="54:15" pos:end="54:17">[<expr pos:start="54:16" pos:end="54:16"><literal type="number" pos:start="54:16" pos:end="54:16">0</literal></expr>]</index></name><operator pos:start="54:18" pos:end="54:19">-&gt;</operator><name pos:start="54:20" pos:end="54:30"><name pos:start="54:20" pos:end="54:27">linesize</name><index pos:start="54:28" pos:end="54:30">[<expr pos:start="54:29" pos:end="54:29"><literal type="number" pos:start="54:29" pos:end="54:29">0</literal></expr>]</index></name> <operator pos:start="54:32" pos:end="54:32">=</operator> <name pos:start="54:34" pos:end="54:34">w</name></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:46"><expr pos:start="55:5" pos:end="55:45"><name pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:7">sub</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:14">rects</name><index pos:start="55:15" pos:end="55:17">[<expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>]</index></name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:26"><name pos:start="55:20" pos:end="55:23">data</name><index pos:start="55:24" pos:end="55:26">[<expr pos:start="55:25" pos:end="55:25"><literal type="number" pos:start="55:25" pos:end="55:25">0</literal></expr>]</index></name> <operator pos:start="55:28" pos:end="55:28">=</operator> <call pos:start="55:30" pos:end="55:45"><name pos:start="55:30" pos:end="55:38">av_malloc</name><argument_list pos:start="55:39" pos:end="55:45">(<argument pos:start="55:40" pos:end="55:44"><expr pos:start="55:40" pos:end="55:44"><name pos:start="55:40" pos:end="55:40">w</name> <operator pos:start="55:42" pos:end="55:42">*</operator> <name pos:start="55:44" pos:end="55:44">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:33"><expr pos:start="56:5" pos:end="56:32"><name pos:start="56:5" pos:end="56:17"><name pos:start="56:5" pos:end="56:7">sub</name><operator pos:start="56:8" pos:end="56:9">-&gt;</operator><name pos:start="56:10" pos:end="56:14">rects</name><index pos:start="56:15" pos:end="56:17">[<expr pos:start="56:16" pos:end="56:16"><literal type="number" pos:start="56:16" pos:end="56:16">0</literal></expr>]</index></name><operator pos:start="56:18" pos:end="56:19">-&gt;</operator><name pos:start="56:20" pos:end="56:28">nb_colors</name> <operator pos:start="56:30" pos:end="56:30">=</operator> <literal type="number" pos:start="56:32" pos:end="56:32">4</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:56"><expr pos:start="57:5" pos:end="57:55"><name pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:7">sub</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:14">rects</name><index pos:start="57:15" pos:end="57:17">[<expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>]</index></name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:26"><name pos:start="57:20" pos:end="57:23">data</name><index pos:start="57:24" pos:end="57:26">[<expr pos:start="57:25" pos:end="57:25"><literal type="number" pos:start="57:25" pos:end="57:25">1</literal></expr>]</index></name> <operator pos:start="57:28" pos:end="57:28">=</operator> <call pos:start="57:30" pos:end="57:55"><name pos:start="57:30" pos:end="57:39">av_mallocz</name><argument_list pos:start="57:40" pos:end="57:55">(<argument pos:start="57:41" pos:end="57:54"><expr pos:start="57:41" pos:end="57:54"><name pos:start="57:41" pos:end="57:54">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="58:5" pos:end="64:5"><if pos:start="58:5" pos:end="64:5">if <condition pos:start="58:8" pos:end="58:59">(<expr pos:start="58:9" pos:end="58:58"><operator pos:start="58:9" pos:end="58:9">!</operator><name pos:start="58:10" pos:end="58:22"><name pos:start="58:10" pos:end="58:12">sub</name><operator pos:start="58:13" pos:end="58:14">-&gt;</operator><name pos:start="58:15" pos:end="58:19">rects</name><index pos:start="58:20" pos:end="58:22">[<expr pos:start="58:21" pos:end="58:21"><literal type="number" pos:start="58:21" pos:end="58:21">0</literal></expr>]</index></name><operator pos:start="58:23" pos:end="58:24">-&gt;</operator><name pos:start="58:25" pos:end="58:31"><name pos:start="58:25" pos:end="58:28">data</name><index pos:start="58:29" pos:end="58:31">[<expr pos:start="58:30" pos:end="58:30"><literal type="number" pos:start="58:30" pos:end="58:30">0</literal></expr>]</index></name> <operator pos:start="58:33" pos:end="58:34">||</operator> <operator pos:start="58:36" pos:end="58:36">!</operator><name pos:start="58:37" pos:end="58:49"><name pos:start="58:37" pos:end="58:39">sub</name><operator pos:start="58:40" pos:end="58:41">-&gt;</operator><name pos:start="58:42" pos:end="58:46">rects</name><index pos:start="58:47" pos:end="58:49">[<expr pos:start="58:48" pos:end="58:48"><literal type="number" pos:start="58:48" pos:end="58:48">0</literal></expr>]</index></name><operator pos:start="58:50" pos:end="58:51">-&gt;</operator><name pos:start="58:52" pos:end="58:58"><name pos:start="58:52" pos:end="58:55">data</name><index pos:start="58:56" pos:end="58:58">[<expr pos:start="58:57" pos:end="58:57"><literal type="number" pos:start="58:57" pos:end="58:57">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="58:61" pos:end="64:5">{<block_content pos:start="59:9" pos:end="63:31">
        <expr_stmt pos:start="59:9" pos:end="59:42"><expr pos:start="59:9" pos:end="59:41"><call pos:start="59:9" pos:end="59:41"><name pos:start="59:9" pos:end="59:16">av_freep</name><argument_list pos:start="59:17" pos:end="59:41">(<argument pos:start="59:18" pos:end="59:40"><expr pos:start="59:18" pos:end="59:40"><operator pos:start="59:18" pos:end="59:18">&amp;</operator><name pos:start="59:19" pos:end="59:31"><name pos:start="59:19" pos:end="59:21">sub</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:28">rects</name><index pos:start="59:29" pos:end="59:31">[<expr pos:start="59:30" pos:end="59:30"><literal type="number" pos:start="59:30" pos:end="59:30">0</literal></expr>]</index></name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:40"><name pos:start="59:34" pos:end="59:37">data</name><index pos:start="59:38" pos:end="59:40">[<expr pos:start="59:39" pos:end="59:39"><literal type="number" pos:start="59:39" pos:end="59:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:42"><expr pos:start="60:9" pos:end="60:41"><call pos:start="60:9" pos:end="60:41"><name pos:start="60:9" pos:end="60:16">av_freep</name><argument_list pos:start="60:17" pos:end="60:41">(<argument pos:start="60:18" pos:end="60:40"><expr pos:start="60:18" pos:end="60:40"><operator pos:start="60:18" pos:end="60:18">&amp;</operator><name pos:start="60:19" pos:end="60:31"><name pos:start="60:19" pos:end="60:21">sub</name><operator pos:start="60:22" pos:end="60:23">-&gt;</operator><name pos:start="60:24" pos:end="60:28">rects</name><index pos:start="60:29" pos:end="60:31">[<expr pos:start="60:30" pos:end="60:30"><literal type="number" pos:start="60:30" pos:end="60:30">0</literal></expr>]</index></name><operator pos:start="60:32" pos:end="60:33">-&gt;</operator><name pos:start="60:34" pos:end="60:40"><name pos:start="60:34" pos:end="60:37">data</name><index pos:start="60:38" pos:end="60:40">[<expr pos:start="60:39" pos:end="60:39"><literal type="number" pos:start="60:39" pos:end="60:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><call pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:16">av_freep</name><argument_list pos:start="61:17" pos:end="61:32">(<argument pos:start="61:18" pos:end="61:31"><expr pos:start="61:18" pos:end="61:31"><operator pos:start="61:18" pos:end="61:18">&amp;</operator><name pos:start="61:19" pos:end="61:31"><name pos:start="61:19" pos:end="61:21">sub</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:28">rects</name><index pos:start="61:29" pos:end="61:31">[<expr pos:start="61:30" pos:end="61:30"><literal type="number" pos:start="61:30" pos:end="61:30">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="62:9" pos:end="62:30"><expr pos:start="62:9" pos:end="62:29"><call pos:start="62:9" pos:end="62:29"><name pos:start="62:9" pos:end="62:16">av_freep</name><argument_list pos:start="62:17" pos:end="62:29">(<argument pos:start="62:18" pos:end="62:28"><expr pos:start="62:18" pos:end="62:28"><operator pos:start="62:18" pos:end="62:18">&amp;</operator><name pos:start="62:19" pos:end="62:28"><name pos:start="62:19" pos:end="62:21">sub</name><operator pos:start="62:22" pos:end="62:23">-&gt;</operator><name pos:start="62:24" pos:end="62:28">rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="63:9" pos:end="63:31">return <expr pos:start="63:16" pos:end="63:30"><call pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:30">(<argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:23"><expr pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:7">sub</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:18">num_rects</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">1</literal></expr>;</expr_stmt>
    <comment type="line" pos:start="66:5" pos:end="66:19">// read palette</comment>
    <for pos:start="67:5" pos:end="68:75">for <control pos:start="67:9" pos:end="67:50">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:45"><expr pos:start="67:17" pos:end="67:44"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:33"><name pos:start="67:21" pos:end="67:23">sub</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:30">rects</name><index pos:start="67:31" pos:end="67:33">[<expr pos:start="67:32" pos:end="67:32"><literal type="number" pos:start="67:32" pos:end="67:32">0</literal></expr>]</index></name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:44">nb_colors</name></expr>;</condition> <incr pos:start="67:47" pos:end="67:49"><expr pos:start="67:47" pos:end="67:49"><name pos:start="67:47" pos:end="67:47">i</name><operator pos:start="67:48" pos:end="67:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="68:9" pos:end="68:75"><block_content pos:start="68:9" pos:end="68:75">
        <expr_stmt pos:start="68:9" pos:end="68:75"><expr pos:start="68:9" pos:end="68:74"><operator pos:start="68:9" pos:end="68:9">(</operator><operator pos:start="68:10" pos:end="68:10">(</operator><name pos:start="68:11" pos:end="68:18">uint32_t</name><operator pos:start="68:19" pos:end="68:19">*</operator><operator pos:start="68:20" pos:end="68:20">)</operator><name pos:start="68:21" pos:end="68:33"><name pos:start="68:21" pos:end="68:23">sub</name><operator pos:start="68:24" pos:end="68:25">-&gt;</operator><name pos:start="68:26" pos:end="68:30">rects</name><index pos:start="68:31" pos:end="68:33">[<expr pos:start="68:32" pos:end="68:32"><literal type="number" pos:start="68:32" pos:end="68:32">0</literal></expr>]</index></name><operator pos:start="68:34" pos:end="68:35">-&gt;</operator><name pos:start="68:36" pos:end="68:42"><name pos:start="68:36" pos:end="68:39">data</name><index pos:start="68:40" pos:end="68:42">[<expr pos:start="68:41" pos:end="68:41"><literal type="number" pos:start="68:41" pos:end="68:41">1</literal></expr>]</index></name><operator pos:start="68:43" pos:end="68:43">)</operator><index pos:start="68:44" pos:end="68:46">[<expr pos:start="68:45" pos:end="68:45"><name pos:start="68:45" pos:end="68:45">i</name></expr>]</index> <operator pos:start="68:48" pos:end="68:48">=</operator> <call pos:start="68:50" pos:end="68:74"><name pos:start="68:50" pos:end="68:68">bytestream_get_be24</name><argument_list pos:start="68:69" pos:end="68:74">(<argument pos:start="68:70" pos:end="68:73"><expr pos:start="68:70" pos:end="68:73"><operator pos:start="68:70" pos:end="68:70">&amp;</operator><name pos:start="68:71" pos:end="68:73">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <if_stmt pos:start="69:5" pos:end="78:0"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:19">(<expr pos:start="69:9" pos:end="69:18"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:18">has_alpha</name></expr>)</condition> <block pos:start="69:21" pos:end="73:5">{<block_content pos:start="71:9" pos:end="72:66">
        <comment type="line" pos:start="70:9" pos:end="70:67">// make all except background (first entry) non-transparent</comment>
        <for pos:start="71:9" pos:end="72:66">for <control pos:start="71:13" pos:end="71:54">(<init pos:start="71:14" pos:end="71:19"><expr pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:14">i</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <literal type="number" pos:start="71:18" pos:end="71:18">1</literal></expr>;</init> <condition pos:start="71:21" pos:end="71:49"><expr pos:start="71:21" pos:end="71:48"><name pos:start="71:21" pos:end="71:21">i</name> <operator pos:start="71:23" pos:end="71:23">&lt;</operator> <name pos:start="71:25" pos:end="71:37"><name pos:start="71:25" pos:end="71:27">sub</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:34">rects</name><index pos:start="71:35" pos:end="71:37">[<expr pos:start="71:36" pos:end="71:36"><literal type="number" pos:start="71:36" pos:end="71:36">0</literal></expr>]</index></name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:48">nb_colors</name></expr>;</condition> <incr pos:start="71:51" pos:end="71:53"><expr pos:start="71:51" pos:end="71:53"><name pos:start="71:51" pos:end="71:51">i</name><operator pos:start="71:52" pos:end="71:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="72:13" pos:end="72:66"><block_content pos:start="72:13" pos:end="72:66">
            <expr_stmt pos:start="72:13" pos:end="72:66"><expr pos:start="72:13" pos:end="72:65"><operator pos:start="72:13" pos:end="72:13">(</operator><operator pos:start="72:14" pos:end="72:14">(</operator><name pos:start="72:15" pos:end="72:22">uint32_t</name> <operator pos:start="72:24" pos:end="72:24">*</operator><operator pos:start="72:25" pos:end="72:25">)</operator><name pos:start="72:26" pos:end="72:38"><name pos:start="72:26" pos:end="72:28">sub</name><operator pos:start="72:29" pos:end="72:30">-&gt;</operator><name pos:start="72:31" pos:end="72:35">rects</name><index pos:start="72:36" pos:end="72:38">[<expr pos:start="72:37" pos:end="72:37"><literal type="number" pos:start="72:37" pos:end="72:37">0</literal></expr>]</index></name><operator pos:start="72:39" pos:end="72:40">-&gt;</operator><name pos:start="72:41" pos:end="72:47"><name pos:start="72:41" pos:end="72:44">data</name><index pos:start="72:45" pos:end="72:47">[<expr pos:start="72:46" pos:end="72:46"><literal type="number" pos:start="72:46" pos:end="72:46">1</literal></expr>]</index></name><operator pos:start="72:48" pos:end="72:48">)</operator><index pos:start="72:49" pos:end="72:51">[<expr pos:start="72:50" pos:end="72:50"><name pos:start="72:50" pos:end="72:50">i</name></expr>]</index> <operator pos:start="72:53" pos:end="72:54">|=</operator> <literal type="number" pos:start="72:56" pos:end="72:65">0xff000000</literal></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if> <else pos:start="73:7" pos:end="78:0">else <block pos:start="73:12" pos:end="78:0">{<block_content pos:start="74:9" pos:end="75:68">
        <for pos:start="74:9" pos:end="75:68">for <control pos:start="74:13" pos:end="74:54">(<init pos:start="74:14" pos:end="74:19"><expr pos:start="74:14" pos:end="74:18"><name pos:start="74:14" pos:end="74:14">i</name> <operator pos:start="74:16" pos:end="74:16">=</operator> <literal type="number" pos:start="74:18" pos:end="74:18">0</literal></expr>;</init> <condition pos:start="74:21" pos:end="74:49"><expr pos:start="74:21" pos:end="74:48"><name pos:start="74:21" pos:end="74:21">i</name> <operator pos:start="74:23" pos:end="74:23">&lt;</operator> <name pos:start="74:25" pos:end="74:37"><name pos:start="74:25" pos:end="74:27">sub</name><operator pos:start="74:28" pos:end="74:29">-&gt;</operator><name pos:start="74:30" pos:end="74:34">rects</name><index pos:start="74:35" pos:end="74:37">[<expr pos:start="74:36" pos:end="74:36"><literal type="number" pos:start="74:36" pos:end="74:36">0</literal></expr>]</index></name><operator pos:start="74:38" pos:end="74:39">-&gt;</operator><name pos:start="74:40" pos:end="74:48">nb_colors</name></expr>;</condition> <incr pos:start="74:51" pos:end="74:53"><expr pos:start="74:51" pos:end="74:53"><name pos:start="74:51" pos:end="74:51">i</name><operator pos:start="74:52" pos:end="74:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="75:13" pos:end="75:68"><block_content pos:start="75:13" pos:end="75:68">
            <expr_stmt pos:start="75:13" pos:end="75:68"><expr pos:start="75:13" pos:end="75:67"><operator pos:start="75:13" pos:end="75:13">(</operator><operator pos:start="75:14" pos:end="75:14">(</operator><name pos:start="75:15" pos:end="75:22">uint32_t</name> <operator pos:start="75:24" pos:end="75:24">*</operator><operator pos:start="75:25" pos:end="75:25">)</operator><name pos:start="75:26" pos:end="75:38"><name pos:start="75:26" pos:end="75:28">sub</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:35">rects</name><index pos:start="75:36" pos:end="75:38">[<expr pos:start="75:37" pos:end="75:37"><literal type="number" pos:start="75:37" pos:end="75:37">0</literal></expr>]</index></name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:47"><name pos:start="75:41" pos:end="75:44">data</name><index pos:start="75:45" pos:end="75:47">[<expr pos:start="75:46" pos:end="75:46"><literal type="number" pos:start="75:46" pos:end="75:46">1</literal></expr>]</index></name><operator pos:start="75:48" pos:end="75:48">)</operator><index pos:start="75:49" pos:end="75:51">[<expr pos:start="75:50" pos:end="75:50"><name pos:start="75:50" pos:end="75:50">i</name></expr>]</index> <operator pos:start="75:53" pos:end="75:54">|=</operator> <operator pos:start="75:56" pos:end="75:56">*</operator><name pos:start="75:57" pos:end="75:59">buf</name><operator pos:start="75:60" pos:end="75:61">++</operator> <operator pos:start="75:63" pos:end="75:64">&lt;&lt;</operator> <literal type="number" pos:start="75:66" pos:end="75:67">24</literal></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></else></if_stmt>
<cpp:if pos:start="77:1" pos:end="77:20">#<cpp:directive pos:start="77:2" pos:end="77:3">if</cpp:directive> <expr pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:20">FF_API_AVPICTURE</name></expr></cpp:if>
<macro pos:start="78:1" pos:end="78:31"><name pos:start="78:1" pos:end="78:31">FF_DISABLE_DEPRECATION_WARNINGS</name></macro>
<block pos:start="79:1" pos:end="87:1">{<block_content pos:start="80:5" pos:end="86:5">
    <decl_stmt pos:start="80:5" pos:end="80:25"><decl pos:start="80:5" pos:end="80:24"><type pos:start="80:5" pos:end="80:20"><name pos:start="80:5" pos:end="80:18">AVSubtitleRect</name> <modifier pos:start="80:20" pos:end="80:20">*</modifier></type><name pos:start="80:21" pos:end="80:24">rect</name></decl>;</decl_stmt>
    <decl_stmt pos:start="81:5" pos:end="81:10"><decl pos:start="81:5" pos:end="81:9"><type pos:start="81:5" pos:end="81:7"><name pos:start="81:5" pos:end="81:7">int</name></type> <name pos:start="81:9" pos:end="81:9">j</name></decl>;</decl_stmt>
    <expr_stmt pos:start="82:5" pos:end="82:25"><expr pos:start="82:5" pos:end="82:24"><name pos:start="82:5" pos:end="82:8">rect</name> <operator pos:start="82:10" pos:end="82:10">=</operator> <name pos:start="82:12" pos:end="82:24"><name pos:start="82:12" pos:end="82:14">sub</name><operator pos:start="82:15" pos:end="82:16">-&gt;</operator><name pos:start="82:17" pos:end="82:21">rects</name><index pos:start="82:22" pos:end="82:24">[<expr pos:start="82:23" pos:end="82:23"><literal type="number" pos:start="82:23" pos:end="82:23">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <for pos:start="83:5" pos:end="86:5">for <control pos:start="83:9" pos:end="83:27">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">j</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:22"><expr pos:start="83:17" pos:end="83:21"><name pos:start="83:17" pos:end="83:17">j</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <literal type="number" pos:start="83:21" pos:end="83:21">4</literal></expr>;</condition> <incr pos:start="83:24" pos:end="83:26"><expr pos:start="83:24" pos:end="83:26"><name pos:start="83:24" pos:end="83:24">j</name><operator pos:start="83:25" pos:end="83:26">++</operator></expr></incr>)</control> <block pos:start="83:29" pos:end="86:5">{<block_content pos:start="84:9" pos:end="85:51">
        <expr_stmt pos:start="84:9" pos:end="84:43"><expr pos:start="84:9" pos:end="84:42"><name pos:start="84:9" pos:end="84:26"><name pos:start="84:9" pos:end="84:12">rect</name><operator pos:start="84:13" pos:end="84:14">-&gt;</operator><name pos:start="84:15" pos:end="84:18">pict</name><operator pos:start="84:19" pos:end="84:19">.</operator><name pos:start="84:20" pos:end="84:23">data</name><index pos:start="84:24" pos:end="84:26">[<expr pos:start="84:25" pos:end="84:25"><name pos:start="84:25" pos:end="84:25">j</name></expr>]</index></name> <operator pos:start="84:28" pos:end="84:28">=</operator> <name pos:start="84:30" pos:end="84:42"><name pos:start="84:30" pos:end="84:33">rect</name><operator pos:start="84:34" pos:end="84:35">-&gt;</operator><name pos:start="84:36" pos:end="84:39">data</name><index pos:start="84:40" pos:end="84:42">[<expr pos:start="84:41" pos:end="84:41"><name pos:start="84:41" pos:end="84:41">j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="85:9" pos:end="85:51"><expr pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:12">rect</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:18">pict</name><operator pos:start="85:19" pos:end="85:19">.</operator><name pos:start="85:20" pos:end="85:27">linesize</name><index pos:start="85:28" pos:end="85:30">[<expr pos:start="85:29" pos:end="85:29"><name pos:start="85:29" pos:end="85:29">j</name></expr>]</index></name> <operator pos:start="85:32" pos:end="85:32">=</operator> <name pos:start="85:34" pos:end="85:50"><name pos:start="85:34" pos:end="85:37">rect</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:47">linesize</name><index pos:start="85:48" pos:end="85:50">[<expr pos:start="85:49" pos:end="85:49"><name pos:start="85:49" pos:end="85:49">j</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>
<macro pos:start="88:1" pos:end="90:0"><name pos:start="88:1" pos:end="90:0">FF_ENABLE_DEPRECATION_WARNINGS</name></macro>
<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>
    <comment type="line" pos:start="90:5" pos:end="90:34">// process RLE-compressed data</comment>
    <if_stmt pos:start="91:5" pos:end="92:19"><if pos:start="91:5" pos:end="92:19">if <condition pos:start="91:8" pos:end="91:60">(<expr pos:start="91:9" pos:end="91:59"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:12">ret</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:54"><name pos:start="91:16" pos:end="91:29">init_get_bits8</name><argument_list pos:start="91:30" pos:end="91:54">(<argument pos:start="91:31" pos:end="91:33"><expr pos:start="91:31" pos:end="91:33"><operator pos:start="91:31" pos:end="91:31">&amp;</operator><name pos:start="91:32" pos:end="91:33">gb</name></expr></argument>, <argument pos:start="91:36" pos:end="91:38"><expr pos:start="91:36" pos:end="91:38"><name pos:start="91:36" pos:end="91:38">buf</name></expr></argument>, <argument pos:start="91:41" pos:end="91:53"><expr pos:start="91:41" pos:end="91:53"><name pos:start="91:41" pos:end="91:47">buf_end</name> <operator pos:start="91:49" pos:end="91:49">-</operator> <name pos:start="91:51" pos:end="91:53">buf</name></expr></argument>)</argument_list></call><operator pos:start="91:55" pos:end="91:55">)</operator> <operator pos:start="91:57" pos:end="91:57">&lt;</operator> <literal type="number" pos:start="91:59" pos:end="91:59">0</literal></expr>)</condition><block type="pseudo" pos:start="92:9" pos:end="92:19"><block_content pos:start="92:9" pos:end="92:19">
        <return pos:start="92:9" pos:end="92:19">return <expr pos:start="92:16" pos:end="92:18"><name pos:start="92:16" pos:end="92:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:36"><expr pos:start="93:5" pos:end="93:35"><name pos:start="93:5" pos:end="93:10">bitmap</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <name pos:start="93:14" pos:end="93:26"><name pos:start="93:14" pos:end="93:16">sub</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:23">rects</name><index pos:start="93:24" pos:end="93:26">[<expr pos:start="93:25" pos:end="93:25"><literal type="number" pos:start="93:25" pos:end="93:25">0</literal></expr>]</index></name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:35"><name pos:start="93:29" pos:end="93:32">data</name><index pos:start="93:33" pos:end="93:35">[<expr pos:start="93:34" pos:end="93:34"><literal type="number" pos:start="93:34" pos:end="93:34">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <for pos:start="94:5" pos:end="111:5">for <control pos:start="94:9" pos:end="94:27">(<init pos:start="94:10" pos:end="94:15"><expr pos:start="94:10" pos:end="94:14"><name pos:start="94:10" pos:end="94:10">y</name> <operator pos:start="94:12" pos:end="94:12">=</operator> <literal type="number" pos:start="94:14" pos:end="94:14">0</literal></expr>;</init> <condition pos:start="94:17" pos:end="94:22"><expr pos:start="94:17" pos:end="94:21"><name pos:start="94:17" pos:end="94:17">y</name> <operator pos:start="94:19" pos:end="94:19">&lt;</operator> <name pos:start="94:21" pos:end="94:21">h</name></expr>;</condition> <incr pos:start="94:24" pos:end="94:26"><expr pos:start="94:24" pos:end="94:26"><name pos:start="94:24" pos:end="94:24">y</name><operator pos:start="94:25" pos:end="94:26">++</operator></expr></incr>)</control> <block pos:start="94:29" pos:end="111:5">{<block_content pos:start="96:9" pos:end="110:28">
        <comment type="line" pos:start="95:9" pos:end="95:35">// interlaced: do odd lines</comment>
        <if_stmt pos:start="96:9" pos:end="96:66"><if pos:start="96:9" pos:end="96:66">if <condition pos:start="96:12" pos:end="96:29">(<expr pos:start="96:13" pos:end="96:28"><name pos:start="96:13" pos:end="96:13">y</name> <operator pos:start="96:15" pos:end="96:16">==</operator> <operator pos:start="96:18" pos:end="96:18">(</operator><name pos:start="96:19" pos:end="96:19">h</name> <operator pos:start="96:21" pos:end="96:21">+</operator> <literal type="number" pos:start="96:23" pos:end="96:23">1</literal><operator pos:start="96:24" pos:end="96:24">)</operator> <operator pos:start="96:26" pos:end="96:26">/</operator> <literal type="number" pos:start="96:28" pos:end="96:28">2</literal></expr>)</condition><block type="pseudo" pos:start="96:31" pos:end="96:66"><block_content pos:start="96:31" pos:end="96:66"> <expr_stmt pos:start="96:31" pos:end="96:66"><expr pos:start="96:31" pos:end="96:65"><name pos:start="96:31" pos:end="96:36">bitmap</name> <operator pos:start="96:38" pos:end="96:38">=</operator> <name pos:start="96:40" pos:end="96:52"><name pos:start="96:40" pos:end="96:42">sub</name><operator pos:start="96:43" pos:end="96:44">-&gt;</operator><name pos:start="96:45" pos:end="96:49">rects</name><index pos:start="96:50" pos:end="96:52">[<expr pos:start="96:51" pos:end="96:51"><literal type="number" pos:start="96:51" pos:end="96:51">0</literal></expr>]</index></name><operator pos:start="96:53" pos:end="96:54">-&gt;</operator><name pos:start="96:55" pos:end="96:61"><name pos:start="96:55" pos:end="96:58">data</name><index pos:start="96:59" pos:end="96:61">[<expr pos:start="96:60" pos:end="96:60"><literal type="number" pos:start="96:60" pos:end="96:60">0</literal></expr>]</index></name> <operator pos:start="96:63" pos:end="96:63">+</operator> <name pos:start="96:65" pos:end="96:65">w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <for pos:start="97:9" pos:end="107:9">for <control pos:start="97:13" pos:end="97:28">(<init pos:start="97:14" pos:end="97:19"><expr pos:start="97:14" pos:end="97:18"><name pos:start="97:14" pos:end="97:14">x</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>;</init> <condition pos:start="97:21" pos:end="97:26"><expr pos:start="97:21" pos:end="97:25"><name pos:start="97:21" pos:end="97:21">x</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <name pos:start="97:25" pos:end="97:25">w</name></expr>;</condition> <incr/>)</control> <block pos:start="97:30" pos:end="107:9">{<block_content pos:start="98:13" pos:end="106:21">
            <decl_stmt pos:start="98:13" pos:end="98:54"><decl pos:start="98:13" pos:end="98:53"><type pos:start="98:13" pos:end="98:15"><name pos:start="98:13" pos:end="98:15">int</name></type> <name pos:start="98:17" pos:end="98:20">log2</name> <init pos:start="98:22" pos:end="98:53">= <expr pos:start="98:24" pos:end="98:53"><name pos:start="98:24" pos:end="98:53"><name pos:start="98:24" pos:end="98:34">ff_log2_tab</name><index pos:start="98:35" pos:end="98:53">[<expr pos:start="98:36" pos:end="98:52"><call pos:start="98:36" pos:end="98:52"><name pos:start="98:36" pos:end="98:44">show_bits</name><argument_list pos:start="98:45" pos:end="98:52">(<argument pos:start="98:46" pos:end="98:48"><expr pos:start="98:46" pos:end="98:48"><operator pos:start="98:46" pos:end="98:46">&amp;</operator><name pos:start="98:47" pos:end="98:48">gb</name></expr></argument>, <argument pos:start="98:51" pos:end="98:51"><expr pos:start="98:51" pos:end="98:51"><literal type="number" pos:start="98:51" pos:end="98:51">8</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="99:13" pos:end="99:58"><decl pos:start="99:13" pos:end="99:57"><type pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">int</name></type> <name pos:start="99:17" pos:end="99:19">run</name> <init pos:start="99:21" pos:end="99:57">= <expr pos:start="99:23" pos:end="99:57"><call pos:start="99:23" pos:end="99:57"><name pos:start="99:23" pos:end="99:30">get_bits</name><argument_list pos:start="99:31" pos:end="99:57">(<argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><operator pos:start="99:32" pos:end="99:32">&amp;</operator><name pos:start="99:33" pos:end="99:34">gb</name></expr></argument>, <argument pos:start="99:37" pos:end="99:56"><expr pos:start="99:37" pos:end="99:56"><literal type="number" pos:start="99:37" pos:end="99:40">14</literal> <operator pos:start="99:40" pos:end="99:40">-</operator> <literal type="number" pos:start="99:42" pos:end="99:42">4</literal> <operator pos:start="99:44" pos:end="99:44">*</operator> <operator pos:start="99:46" pos:end="99:46">(</operator><name pos:start="99:47" pos:end="99:50">log2</name> <operator pos:start="99:52" pos:end="99:53">&gt;&gt;</operator> <literal type="number" pos:start="99:55" pos:end="99:55">1</literal><operator pos:start="99:56" pos:end="99:56">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="100:13" pos:end="100:41"><decl pos:start="100:13" pos:end="100:40"><type pos:start="100:13" pos:end="100:15"><name pos:start="100:13" pos:end="100:15">int</name></type> <name pos:start="100:17" pos:end="100:21">color</name> <init pos:start="100:23" pos:end="100:40">= <expr pos:start="100:25" pos:end="100:40"><call pos:start="100:25" pos:end="100:40"><name pos:start="100:25" pos:end="100:32">get_bits</name><argument_list pos:start="100:33" pos:end="100:40">(<argument pos:start="100:34" pos:end="100:36"><expr pos:start="100:34" pos:end="100:36"><operator pos:start="100:34" pos:end="100:34">&amp;</operator><name pos:start="100:35" pos:end="100:36">gb</name></expr></argument>, <argument pos:start="100:39" pos:end="100:39"><expr pos:start="100:39" pos:end="100:39"><literal type="number" pos:start="100:39" pos:end="100:39">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="101:13" pos:end="101:36"><expr pos:start="101:13" pos:end="101:35"><name pos:start="101:13" pos:end="101:15">run</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:35"><name pos:start="101:19" pos:end="101:23">FFMIN</name><argument_list pos:start="101:24" pos:end="101:35">(<argument pos:start="101:25" pos:end="101:27"><expr pos:start="101:25" pos:end="101:27"><name pos:start="101:25" pos:end="101:27">run</name></expr></argument>, <argument pos:start="101:30" pos:end="101:34"><expr pos:start="101:30" pos:end="101:34"><name pos:start="101:30" pos:end="101:30">w</name> <operator pos:start="101:32" pos:end="101:32">-</operator> <name pos:start="101:34" pos:end="101:34">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:start="102:13" pos:end="102:49">// run length 0 means till end of row</comment>
            <if_stmt pos:start="103:13" pos:end="103:34"><if pos:start="103:13" pos:end="103:34">if <condition pos:start="103:16" pos:end="103:21">(<expr pos:start="103:17" pos:end="103:20"><operator pos:start="103:17" pos:end="103:17">!</operator><name pos:start="103:18" pos:end="103:20">run</name></expr>)</condition><block type="pseudo" pos:start="103:23" pos:end="103:34"><block_content pos:start="103:23" pos:end="103:34"> <expr_stmt pos:start="103:23" pos:end="103:34"><expr pos:start="103:23" pos:end="103:33"><name pos:start="103:23" pos:end="103:25">run</name> <operator pos:start="103:27" pos:end="103:27">=</operator> <name pos:start="103:29" pos:end="103:29">w</name> <operator pos:start="103:31" pos:end="103:31">-</operator> <name pos:start="103:33" pos:end="103:33">x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="104:13" pos:end="104:39"><expr pos:start="104:13" pos:end="104:38"><call pos:start="104:13" pos:end="104:38"><name pos:start="104:13" pos:end="104:18">memset</name><argument_list pos:start="104:19" pos:end="104:38">(<argument pos:start="104:20" pos:end="104:25"><expr pos:start="104:20" pos:end="104:25"><name pos:start="104:20" pos:end="104:25">bitmap</name></expr></argument>, <argument pos:start="104:28" pos:end="104:32"><expr pos:start="104:28" pos:end="104:32"><name pos:start="104:28" pos:end="104:32">color</name></expr></argument>, <argument pos:start="104:35" pos:end="104:37"><expr pos:start="104:35" pos:end="104:37"><name pos:start="104:35" pos:end="104:37">run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="105:13" pos:end="105:26"><expr pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:18">bitmap</name> <operator pos:start="105:20" pos:end="105:21">+=</operator> <name pos:start="105:23" pos:end="105:25">run</name></expr>;</expr_stmt>
            <expr_stmt pos:start="106:13" pos:end="106:21"><expr pos:start="106:13" pos:end="106:20"><name pos:start="106:13" pos:end="106:13">x</name> <operator pos:start="106:15" pos:end="106:16">+=</operator> <name pos:start="106:18" pos:end="106:20">run</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line" pos:start="108:9" pos:end="108:45">// interlaced, skip every second line</comment>
        <expr_stmt pos:start="109:9" pos:end="109:20"><expr pos:start="109:9" pos:end="109:19"><name pos:start="109:9" pos:end="109:14">bitmap</name> <operator pos:start="109:16" pos:end="109:17">+=</operator> <name pos:start="109:19" pos:end="109:19">w</name></expr>;</expr_stmt>
        <expr_stmt pos:start="110:9" pos:end="110:28"><expr pos:start="110:9" pos:end="110:27"><call pos:start="110:9" pos:end="110:27"><name pos:start="110:9" pos:end="110:22">align_get_bits</name><argument_list pos:start="110:23" pos:end="110:27">(<argument pos:start="110:24" pos:end="110:26"><expr pos:start="110:24" pos:end="110:26"><operator pos:start="110:24" pos:end="110:24">&amp;</operator><name pos:start="110:25" pos:end="110:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="112:5" pos:end="112:19"><expr pos:start="112:5" pos:end="112:18"><operator pos:start="112:5" pos:end="112:5">*</operator><name pos:start="112:6" pos:end="112:14">data_size</name> <operator pos:start="112:16" pos:end="112:16">=</operator> <literal type="number" pos:start="112:18" pos:end="112:18">1</literal></expr>;</expr_stmt>
    <return pos:start="113:5" pos:end="113:20">return <expr pos:start="113:12" pos:end="113:19"><name pos:start="113:12" pos:end="113:19">buf_size</name></expr>;</return>
</block_content>}</block></function></unit>
