<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9828.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">qemu_cond_broadcast</name><parameter_list pos:start="1:25" pos:end="1:40">(<parameter pos:start="1:26" pos:end="1:39"><decl pos:start="1:26" pos:end="1:39"><type pos:start="1:26" pos:end="1:35"><name pos:start="1:26" pos:end="1:33">QemuCond</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:39">cond</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:56">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">BOOLEAN</name></type> <name pos:start="5:13" pos:end="5:18">result</name></decl>;</decl_stmt>

    <comment type="block" pos:start="7:5" pos:end="13:7">/*

     * As in pthread_cond_signal, access to cond-&gt;waiters and

     * cond-&gt;target is locked via the external mutex.

     */</comment>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:27">(<expr pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:12">cond</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:21">waiters</name></name> <operator pos:start="15:23" pos:end="15:24">==</operator> <literal type="number" pos:start="15:26" pos:end="15:26">0</literal></expr>)</condition> <block pos:start="15:29" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:8">cond</name><operator pos:start="23:9" pos:end="23:10">-&gt;</operator><name pos:start="23:11" pos:end="23:16">target</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:63"><expr pos:start="25:5" pos:end="25:62"><name pos:start="25:5" pos:end="25:10">result</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:62"><name pos:start="25:14" pos:end="25:29">ReleaseSemaphore</name><argument_list pos:start="25:30" pos:end="25:62">(<argument pos:start="25:31" pos:end="25:40"><expr pos:start="25:31" pos:end="25:40"><name pos:start="25:31" pos:end="25:40"><name pos:start="25:31" pos:end="25:34">cond</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:40">sema</name></name></expr></argument>, <argument pos:start="25:43" pos:end="25:55"><expr pos:start="25:43" pos:end="25:55"><name pos:start="25:43" pos:end="25:55"><name pos:start="25:43" pos:end="25:46">cond</name><operator pos:start="25:47" pos:end="25:48">-&gt;</operator><name pos:start="25:49" pos:end="25:55">waiters</name></name></expr></argument>, <argument pos:start="25:58" pos:end="25:61"><expr pos:start="25:58" pos:end="25:61"><name pos:start="25:58" pos:end="25:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:15">result</name></expr>)</condition> <block pos:start="27:18" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:45">

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><call pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:18">error_exit</name><argument_list pos:start="29:19" pos:end="29:44">(<argument pos:start="29:20" pos:end="29:33"><expr pos:start="29:20" pos:end="29:33"><call pos:start="29:20" pos:end="29:33"><name pos:start="29:20" pos:end="29:31">GetLastError</name><argument_list pos:start="29:32" pos:end="29:33">()</argument_list></call></expr></argument>, <argument pos:start="29:36" pos:end="29:43"><expr pos:start="29:36" pos:end="29:43"><name pos:start="29:36" pos:end="29:43">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="49:7">/*

     * At this point all waiters continue. Each one takes its

     * slice of the semaphore. Now it's our turn to wait: Since

     * the external mutex is held, no thread can leave cond_wait,

     * yet. For this reason, we can be sure that no thread gets

     * a chance to eat *more* than one slice. OTOH, it means

     * that the last waiter must send us a wake-up.

     */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:56"><expr pos:start="51:5" pos:end="51:55"><call pos:start="51:5" pos:end="51:55"><name pos:start="51:5" pos:end="51:23">WaitForSingleObject</name><argument_list pos:start="51:24" pos:end="51:55">(<argument pos:start="51:25" pos:end="51:44"><expr pos:start="51:25" pos:end="51:44"><name pos:start="51:25" pos:end="51:44"><name pos:start="51:25" pos:end="51:28">cond</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:44">continue_event</name></name></expr></argument>, <argument pos:start="51:47" pos:end="51:54"><expr pos:start="51:47" pos:end="51:54"><name pos:start="51:47" pos:end="51:54">INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
