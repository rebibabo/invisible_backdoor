<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23807.c" pos:tabs="8"><function pos:start="1:1" pos:end="142:29"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:10">ram_addr_t</name></type> <name pos:start="1:12" pos:end="1:34">qemu_ram_alloc_from_ptr</name><parameter_list pos:start="1:35" pos:end="3:63">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:46">DeviceState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">dev</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:69"><decl pos:start="1:54" pos:end="1:69"><type pos:start="1:54" pos:end="1:69"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:63">char</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:69">name</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:45">ram_addr_t</name></type> <name pos:start="3:47" pos:end="3:50">size</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:62"><decl pos:start="3:53" pos:end="3:62"><type pos:start="3:53" pos:end="3:62"><name pos:start="3:53" pos:end="3:56">void</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">host</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="142:29">{<block_content pos:start="7:5" pos:end="142:29">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">RAMBlock</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:23">new_block</name></decl>, <decl pos:start="7:26" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:14"><modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:31">block</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:35"><expr pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:8">size</name> <operator pos:start="11:10" pos:end="11:10">=</operator> <call pos:start="11:12" pos:end="11:34"><name pos:start="11:12" pos:end="11:28">TARGET_PAGE_ALIGN</name><argument_list pos:start="11:29" pos:end="11:34">(<argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:49"><expr pos:start="13:5" pos:end="13:48"><name pos:start="13:5" pos:end="13:13">new_block</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <call pos:start="13:17" pos:end="13:48"><name pos:start="13:17" pos:end="13:28">qemu_mallocz</name><argument_list pos:start="13:29" pos:end="13:48">(<argument pos:start="13:30" pos:end="13:47"><expr pos:start="13:30" pos:end="13:47"><sizeof pos:start="13:30" pos:end="13:47">sizeof<argument_list pos:start="13:36" pos:end="13:47">(<argument pos:start="13:37" pos:end="13:46"><expr pos:start="13:37" pos:end="13:46"><operator pos:start="13:37" pos:end="13:37">*</operator><name pos:start="13:38" pos:end="13:46">new_block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="142:29"><if pos:start="17:5" pos:end="142:29">if <condition pos:start="17:8" pos:end="17:70">(<expr pos:start="17:9" pos:end="17:69"><name pos:start="17:9" pos:end="17:11">dev</name> <operator pos:start="17:13" pos:end="17:14">&amp;&amp;</operator> <name pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:18">dev</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:30">parent_bus</name></name> <operator pos:start="17:32" pos:end="17:33">&amp;&amp;</operator> <name pos:start="17:35" pos:end="17:69"><name pos:start="17:35" pos:end="17:37">dev</name><operator pos:start="17:38" pos:end="17:39">-&gt;</operator><name pos:start="17:40" pos:end="17:49">parent_bus</name><operator pos:start="17:50" pos:end="17:51">-&gt;</operator><name pos:start="17:52" pos:end="17:55">info</name><operator pos:start="17:56" pos:end="17:57">-&gt;</operator><name pos:start="17:58" pos:end="17:69">get_dev_path</name></name></expr>)</condition> <block pos:start="17:72" pos:end="142:29">{<block_content pos:start="19:9" pos:end="142:29">

        <decl_stmt pos:start="19:9" pos:end="19:60"><decl pos:start="19:9" pos:end="19:59"><type pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:12">char</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:16">id</name> <init pos:start="19:18" pos:end="19:59">= <expr pos:start="19:20" pos:end="19:59"><call pos:start="19:20" pos:end="19:59"><name pos:start="19:20" pos:end="19:54"><name pos:start="19:20" pos:end="19:22">dev</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:34">parent_bus</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:40">info</name><operator pos:start="19:41" pos:end="19:42">-&gt;</operator><name pos:start="19:43" pos:end="19:54">get_dev_path</name></name><argument_list pos:start="19:55" pos:end="19:59">(<argument pos:start="19:56" pos:end="19:58"><expr pos:start="19:56" pos:end="19:58"><name pos:start="19:56" pos:end="19:58">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="21:9" pos:end="142:29"><if pos:start="21:9" pos:end="142:29">if <condition pos:start="21:12" pos:end="21:15">(<expr pos:start="21:13" pos:end="21:14"><name pos:start="21:13" pos:end="21:14">id</name></expr>)</condition> <block pos:start="21:17" pos:end="142:29">{<block_content pos:start="23:13" pos:end="142:29">

            <expr_stmt pos:start="23:13" pos:end="23:76"><expr pos:start="23:13" pos:end="23:75"><call pos:start="23:13" pos:end="23:75"><name pos:start="23:13" pos:end="23:20">snprintf</name><argument_list pos:start="23:21" pos:end="23:75">(<argument pos:start="23:22" pos:end="23:37"><expr pos:start="23:22" pos:end="23:37"><name pos:start="23:22" pos:end="23:37"><name pos:start="23:22" pos:end="23:30">new_block</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:37">idstr</name></name></expr></argument>, <argument pos:start="23:40" pos:end="23:63"><expr pos:start="23:40" pos:end="23:63"><sizeof pos:start="23:40" pos:end="23:63">sizeof<argument_list pos:start="23:46" pos:end="23:63">(<argument pos:start="23:47" pos:end="23:62"><expr pos:start="23:47" pos:end="23:62"><name pos:start="23:47" pos:end="23:62"><name pos:start="23:47" pos:end="23:55">new_block</name><operator pos:start="23:56" pos:end="23:57">-&gt;</operator><name pos:start="23:58" pos:end="23:62">idstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:66" pos:end="23:70"><expr pos:start="23:66" pos:end="23:70"><literal type="string" pos:start="23:66" pos:end="23:70">"%s/"</literal></expr></argument>, <argument pos:start="23:73" pos:end="23:74"><expr pos:start="23:73" pos:end="23:74"><name pos:start="23:73" pos:end="23:74">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:26"><expr pos:start="25:13" pos:end="25:25"><call pos:start="25:13" pos:end="25:25"><name pos:start="25:13" pos:end="25:21">qemu_free</name><argument_list pos:start="25:22" pos:end="25:25">(<argument pos:start="25:23" pos:end="25:24"><expr pos:start="25:23" pos:end="25:24"><name pos:start="25:23" pos:end="25:24">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:62"><expr pos:start="29:5" pos:end="29:61"><call pos:start="29:5" pos:end="29:61"><name pos:start="29:5" pos:end="29:11">pstrcat</name><argument_list pos:start="29:12" pos:end="29:61">(<argument pos:start="29:13" pos:end="29:28"><expr pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:21">new_block</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:28">idstr</name></name></expr></argument>, <argument pos:start="29:31" pos:end="29:54"><expr pos:start="29:31" pos:end="29:54"><sizeof pos:start="29:31" pos:end="29:54">sizeof<argument_list pos:start="29:37" pos:end="29:54">(<argument pos:start="29:38" pos:end="29:53"><expr pos:start="29:38" pos:end="29:53"><name pos:start="29:38" pos:end="29:53"><name pos:start="29:38" pos:end="29:46">new_block</name><operator pos:start="29:47" pos:end="29:48">-&gt;</operator><name pos:start="29:49" pos:end="29:53">idstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:57" pos:end="29:60"><expr pos:start="29:57" pos:end="29:60"><name pos:start="29:57" pos:end="29:60">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="33:5" pos:end="33:48"><name pos:start="33:5" pos:end="33:17">QLIST_FOREACH</name><argument_list pos:start="33:18" pos:end="33:48">(<argument pos:start="33:19" pos:end="33:23">block</argument>, <argument pos:start="33:26" pos:end="33:41">&amp;ram_list.blocks</argument>, <argument pos:start="33:44" pos:end="33:47">next</argument>)</argument_list></macro> <block pos:start="33:50" pos:end="142:29">{<block_content pos:start="35:9" pos:end="142:29">

        <if_stmt pos:start="35:9" pos:end="142:29"><if pos:start="35:9" pos:end="142:29">if <condition pos:start="35:12" pos:end="35:52">(<expr pos:start="35:13" pos:end="35:51"><operator pos:start="35:13" pos:end="35:13">!</operator><call pos:start="35:14" pos:end="35:51"><name pos:start="35:14" pos:end="35:19">strcmp</name><argument_list pos:start="35:20" pos:end="35:51">(<argument pos:start="35:21" pos:end="35:32"><expr pos:start="35:21" pos:end="35:32"><name pos:start="35:21" pos:end="35:32"><name pos:start="35:21" pos:end="35:25">block</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:32">idstr</name></name></expr></argument>, <argument pos:start="35:35" pos:end="35:50"><expr pos:start="35:35" pos:end="35:50"><name pos:start="35:35" pos:end="35:50"><name pos:start="35:35" pos:end="35:43">new_block</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:50">idstr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:54" pos:end="142:29">{<block_content pos:start="37:13" pos:end="142:29">

            <expr_stmt pos:start="37:13" pos:end="39:38"><expr pos:start="37:13" pos:end="39:37"><call pos:start="37:13" pos:end="39:37"><name pos:start="37:13" pos:end="37:19">fprintf</name><argument_list pos:start="37:20" pos:end="39:37">(<argument pos:start="37:21" pos:end="37:26"><expr pos:start="37:21" pos:end="37:26"><name pos:start="37:21" pos:end="37:26">stderr</name></expr></argument>, <argument pos:start="37:29" pos:end="37:74"><expr pos:start="37:29" pos:end="37:74"><literal type="string" pos:start="37:29" pos:end="37:74">"RAMBlock \"%s\" already registered, abort!\n"</literal></expr></argument>,

                    <argument pos:start="39:21" pos:end="39:36"><expr pos:start="39:21" pos:end="39:36"><name pos:start="39:21" pos:end="39:36"><name pos:start="39:21" pos:end="39:29">new_block</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:36">idstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






    <expr_stmt pos:start="46:5" pos:end="46:46"><expr pos:start="46:5" pos:end="46:45"><name pos:start="46:5" pos:end="46:21"><name pos:start="46:5" pos:end="46:13">new_block</name><operator pos:start="46:14" pos:end="46:15">-&gt;</operator><name pos:start="46:16" pos:end="46:21">offset</name></name> <operator pos:start="46:23" pos:end="46:23">=</operator> <call pos:start="46:25" pos:end="46:45"><name pos:start="46:25" pos:end="46:39">find_ram_offset</name><argument_list pos:start="46:40" pos:end="46:45">(<argument pos:start="46:41" pos:end="46:44"><expr pos:start="46:41" pos:end="46:44"><name pos:start="46:41" pos:end="46:44">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="48:5" pos:end="142:29"><if pos:start="48:5" pos:end="54:5">if <condition pos:start="48:8" pos:end="48:13">(<expr pos:start="48:9" pos:end="48:12"><name pos:start="48:9" pos:end="48:12">host</name></expr>)</condition> <block pos:start="48:15" pos:end="54:5">{<block_content pos:start="50:9" pos:end="52:46">

        <expr_stmt pos:start="50:9" pos:end="50:31"><expr pos:start="50:9" pos:end="50:30"><name pos:start="50:9" pos:end="50:23"><name pos:start="50:9" pos:end="50:17">new_block</name><operator pos:start="50:18" pos:end="50:19">-&gt;</operator><name pos:start="50:20" pos:end="50:23">host</name></name> <operator pos:start="50:25" pos:end="50:25">=</operator> <name pos:start="50:27" pos:end="50:30">host</name></expr>;</expr_stmt>

        <expr_stmt pos:start="52:9" pos:end="52:46"><expr pos:start="52:9" pos:end="52:45"><name pos:start="52:9" pos:end="52:24"><name pos:start="52:9" pos:end="52:17">new_block</name><operator pos:start="52:18" pos:end="52:19">-&gt;</operator><name pos:start="52:20" pos:end="52:24">flags</name></name> <operator pos:start="52:26" pos:end="52:27">|=</operator> <name pos:start="52:29" pos:end="52:45">RAM_PREALLOC_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="54:7" pos:end="142:29">else <block pos:start="54:12" pos:end="142:29">{<block_content pos:start="56:9" pos:end="142:29">

        <if_stmt pos:start="56:9" pos:end="142:29"><if pos:start="56:9" pos:end="142:29">if <condition pos:start="56:12" pos:end="56:21">(<expr pos:start="56:13" pos:end="56:20"><name pos:start="56:13" pos:end="56:20">mem_path</name></expr>)</condition> <block pos:start="56:23" pos:end="142:29">{<block_content pos:start="60:13" pos:end="142:29">

<cpp:if pos:start="58:1" pos:end="58:49">#<cpp:directive pos:start="58:2" pos:end="58:3">if</cpp:directive> <expr pos:start="58:5" pos:end="58:49"><call pos:start="58:5" pos:end="58:23"><name pos:start="58:5" pos:end="58:11">defined</name> <argument_list pos:start="58:13" pos:end="58:23">(<argument pos:start="58:14" pos:end="58:22"><expr pos:start="58:14" pos:end="58:22"><name pos:start="58:14" pos:end="58:22">__linux__</name></expr></argument>)</argument_list></call> <operator pos:start="58:25" pos:end="58:26">&amp;&amp;</operator> <operator pos:start="58:28" pos:end="58:28">!</operator><call pos:start="58:29" pos:end="58:49"><name pos:start="58:29" pos:end="58:35">defined</name><argument_list pos:start="58:36" pos:end="58:49">(<argument pos:start="58:37" pos:end="58:48"><expr pos:start="58:37" pos:end="58:48"><name pos:start="58:37" pos:end="58:48">TARGET_S390X</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="60:13" pos:end="60:72"><expr pos:start="60:13" pos:end="60:71"><name pos:start="60:13" pos:end="60:27"><name pos:start="60:13" pos:end="60:21">new_block</name><operator pos:start="60:22" pos:end="60:23">-&gt;</operator><name pos:start="60:24" pos:end="60:27">host</name></name> <operator pos:start="60:29" pos:end="60:29">=</operator> <call pos:start="60:31" pos:end="60:71"><name pos:start="60:31" pos:end="60:44">file_ram_alloc</name><argument_list pos:start="60:45" pos:end="60:71">(<argument pos:start="60:46" pos:end="60:54"><expr pos:start="60:46" pos:end="60:54"><name pos:start="60:46" pos:end="60:54">new_block</name></expr></argument>, <argument pos:start="60:57" pos:end="60:60"><expr pos:start="60:57" pos:end="60:60"><name pos:start="60:57" pos:end="60:60">size</name></expr></argument>, <argument pos:start="60:63" pos:end="60:70"><expr pos:start="60:63" pos:end="60:70"><name pos:start="60:63" pos:end="60:70">mem_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="62:13" pos:end="142:29"><if pos:start="62:13" pos:end="77:9">if <condition pos:start="62:16" pos:end="62:33">(<expr pos:start="62:17" pos:end="62:32"><operator pos:start="62:17" pos:end="62:17">!</operator><name pos:start="62:18" pos:end="62:32"><name pos:start="62:18" pos:end="62:26">new_block</name><operator pos:start="62:27" pos:end="62:28">-&gt;</operator><name pos:start="62:29" pos:end="62:32">host</name></name></expr>)</condition> <block pos:start="62:35" pos:end="77:9">{<block_content pos:start="64:17" pos:end="76:0">

                <expr_stmt pos:start="64:17" pos:end="64:53"><expr pos:start="64:17" pos:end="64:52"><name pos:start="64:17" pos:end="64:31"><name pos:start="64:17" pos:end="64:25">new_block</name><operator pos:start="64:26" pos:end="64:27">-&gt;</operator><name pos:start="64:28" pos:end="64:31">host</name></name> <operator pos:start="64:33" pos:end="64:33">=</operator> <call pos:start="64:35" pos:end="64:52"><name pos:start="64:35" pos:end="64:46">qemu_vmalloc</name><argument_list pos:start="64:47" pos:end="64:52">(<argument pos:start="64:48" pos:end="64:51"><expr pos:start="64:48" pos:end="64:51"><name pos:start="64:48" pos:end="64:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="66:17" pos:end="70:0"><expr pos:start="66:17" pos:end="66:72"><call pos:start="66:17" pos:end="66:72"><name pos:start="66:17" pos:end="66:28">qemu_madvise</name><argument_list pos:start="66:29" pos:end="66:72">(<argument pos:start="66:30" pos:end="66:44"><expr pos:start="66:30" pos:end="66:44"><name pos:start="66:30" pos:end="66:44"><name pos:start="66:30" pos:end="66:38">new_block</name><operator pos:start="66:39" pos:end="66:40">-&gt;</operator><name pos:start="66:41" pos:end="66:44">host</name></name></expr></argument>, <argument pos:start="66:47" pos:end="66:50"><expr pos:start="66:47" pos:end="66:50"><name pos:start="66:47" pos:end="66:50">size</name></expr></argument>, <argument pos:start="66:53" pos:end="66:71"><expr pos:start="66:53" pos:end="66:71"><name pos:start="66:53" pos:end="66:71">QEMU_MADV_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:else pos:start="69:1" pos:end="69:5">#<cpp:directive pos:start="69:2" pos:end="69:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="71:13" pos:end="71:62"><expr pos:start="71:13" pos:end="71:61"><call pos:start="71:13" pos:end="71:61"><name pos:start="71:13" pos:end="71:19">fprintf</name><argument_list pos:start="71:20" pos:end="71:61">(<argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26">stderr</name></expr></argument>, <argument pos:start="71:29" pos:end="71:60"><expr pos:start="71:29" pos:end="71:60"><literal type="string" pos:start="71:29" pos:end="71:60">"-mem-path option unsupported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="76:0"><expr pos:start="73:13" pos:end="73:19"><call pos:start="73:13" pos:end="73:19"><name pos:start="73:13" pos:end="73:16">exit</name><argument_list pos:start="73:17" pos:end="73:19">(<argument pos:start="73:18" pos:end="73:18"><expr pos:start="73:18" pos:end="73:18"><literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="142:29">else <block pos:start="77:16" pos:end="142:29">{<block_content pos:start="91:13" pos:end="142:29">

<cpp:if pos:start="79:1" pos:end="79:48">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:48"><call pos:start="79:5" pos:end="79:25"><name pos:start="79:5" pos:end="79:11">defined</name><argument_list pos:start="79:12" pos:end="79:25">(<argument pos:start="79:13" pos:end="79:24"><expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:24">TARGET_S390X</name></expr></argument>)</argument_list></call> <operator pos:start="79:27" pos:end="79:28">&amp;&amp;</operator> <call pos:start="79:30" pos:end="79:48"><name pos:start="79:30" pos:end="79:36">defined</name><argument_list pos:start="79:37" pos:end="79:48">(<argument pos:start="79:38" pos:end="79:47"><expr pos:start="79:38" pos:end="79:47"><name pos:start="79:38" pos:end="79:47">CONFIG_KVM</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <comment type="block" pos:start="81:13" pos:end="89:64">/* S390 KVM requires the topmost vma of the RAM to be smaller than

               an system defined value, which is at least 256GB. Larger systems

               have larger values. We put the guest between the end of data

               segment (system break) and this value. We use 32GB as a base to

               have enough room for the system break to grow. */</comment>

            <expr_stmt pos:start="91:13" pos:end="102:0"><expr pos:start="91:13" pos:end="95:81"><name pos:start="91:13" pos:end="91:27"><name pos:start="91:13" pos:end="91:21">new_block</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:27">host</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <call pos:start="91:31" pos:end="95:81"><name pos:start="91:31" pos:end="91:34">mmap</name><argument_list pos:start="91:35" pos:end="95:81">(<argument pos:start="91:36" pos:end="91:53"><expr pos:start="91:36" pos:end="91:53"><operator pos:start="91:36" pos:end="91:36">(</operator><name pos:start="91:37" pos:end="91:40">void</name><operator pos:start="91:41" pos:end="91:41">*</operator><operator pos:start="91:42" pos:end="91:42">)</operator><literal type="number" pos:start="91:43" pos:end="91:53">0x800000000</literal></expr></argument>, <argument pos:start="91:56" pos:end="91:59"><expr pos:start="91:56" pos:end="91:59"><name pos:start="91:56" pos:end="91:59">size</name></expr></argument>,

                                   <argument pos:start="93:36" pos:end="93:65"><expr pos:start="93:36" pos:end="93:65"><name pos:start="93:36" pos:end="93:44">PROT_EXEC</name><operator pos:start="93:45" pos:end="93:45">|</operator><name pos:start="93:46" pos:end="93:54">PROT_READ</name><operator pos:start="93:55" pos:end="93:55">|</operator><name pos:start="93:56" pos:end="93:65">PROT_WRITE</name></expr></argument>,

                                   <argument pos:start="95:36" pos:end="95:73"><expr pos:start="95:36" pos:end="95:73"><name pos:start="95:36" pos:end="95:45">MAP_SHARED</name> <operator pos:start="95:47" pos:end="95:47">|</operator> <name pos:start="95:49" pos:end="95:61">MAP_ANONYMOUS</name> <operator pos:start="95:63" pos:end="95:63">|</operator> <name pos:start="95:65" pos:end="95:73">MAP_FIXED</name></expr></argument>, <argument pos:start="95:76" pos:end="95:77"><expr pos:start="95:76" pos:end="95:77"><operator pos:start="95:76" pos:end="95:76">-</operator><literal type="number" pos:start="95:77" pos:end="95:77">1</literal></expr></argument>, <argument pos:start="95:80" pos:end="95:80"><expr pos:start="95:80" pos:end="95:80"><literal type="number" pos:start="95:80" pos:end="95:80">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





<cpp:else pos:start="101:1" pos:end="101:5">#<cpp:directive pos:start="101:2" pos:end="101:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="103:13" pos:end="142:29"><if pos:start="103:13" pos:end="107:13">if <condition pos:start="103:16" pos:end="103:39">(<expr pos:start="103:17" pos:end="103:38"><call pos:start="103:17" pos:end="103:38"><name pos:start="103:17" pos:end="103:36">xen_mapcache_enabled</name><argument_list pos:start="103:37" pos:end="103:38">()</argument_list></call></expr>)</condition> <block pos:start="103:41" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:55">

                <expr_stmt pos:start="105:17" pos:end="105:55"><expr pos:start="105:17" pos:end="105:54"><call pos:start="105:17" pos:end="105:54"><name pos:start="105:17" pos:end="105:29">xen_ram_alloc</name><argument_list pos:start="105:30" pos:end="105:54">(<argument pos:start="105:31" pos:end="105:47"><expr pos:start="105:31" pos:end="105:47"><name pos:start="105:31" pos:end="105:47"><name pos:start="105:31" pos:end="105:39">new_block</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:47">offset</name></name></expr></argument>, <argument pos:start="105:50" pos:end="105:53"><expr pos:start="105:50" pos:end="105:53"><name pos:start="105:50" pos:end="105:53">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="107:15" pos:end="142:29">else <block pos:start="107:20" pos:end="142:29">{<block_content pos:start="109:17" pos:end="142:29">

                <expr_stmt pos:start="109:17" pos:end="113:0"><expr pos:start="109:17" pos:end="109:52"><name pos:start="109:17" pos:end="109:31"><name pos:start="109:17" pos:end="109:25">new_block</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:31">host</name></name> <operator pos:start="109:33" pos:end="109:33">=</operator> <call pos:start="109:35" pos:end="109:52"><name pos:start="109:35" pos:end="109:46">qemu_vmalloc</name><argument_list pos:start="109:47" pos:end="109:52">(<argument pos:start="109:48" pos:end="109:51"><expr pos:start="109:48" pos:end="109:51"><name pos:start="109:48" pos:end="109:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:endif pos:start="112:1" pos:end="112:6">#<cpp:directive pos:start="112:2" pos:end="112:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="114:13" pos:end="114:69"><expr pos:start="114:13" pos:end="114:68"><call pos:start="114:13" pos:end="114:68"><name pos:start="114:13" pos:end="114:24">qemu_madvise</name><argument_list pos:start="114:25" pos:end="114:68">(<argument pos:start="114:26" pos:end="114:40"><expr pos:start="114:26" pos:end="114:40"><name pos:start="114:26" pos:end="114:40"><name pos:start="114:26" pos:end="114:34">new_block</name><operator pos:start="114:35" pos:end="114:36">-&gt;</operator><name pos:start="114:37" pos:end="114:40">host</name></name></expr></argument>, <argument pos:start="114:43" pos:end="114:46"><expr pos:start="114:43" pos:end="114:46"><name pos:start="114:43" pos:end="114:46">size</name></expr></argument>, <argument pos:start="114:49" pos:end="114:67"><expr pos:start="114:49" pos:end="114:67"><name pos:start="114:49" pos:end="114:67">QEMU_MADV_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="118:5" pos:end="118:29"><expr pos:start="118:5" pos:end="118:28"><name pos:start="118:5" pos:end="118:21"><name pos:start="118:5" pos:end="118:13">new_block</name><operator pos:start="118:14" pos:end="118:15">-&gt;</operator><name pos:start="118:16" pos:end="118:21">length</name></name> <operator pos:start="118:23" pos:end="118:23">=</operator> <name pos:start="118:25" pos:end="118:28">size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="122:5" pos:end="122:57"><expr pos:start="122:5" pos:end="122:56"><call pos:start="122:5" pos:end="122:56"><name pos:start="122:5" pos:end="122:21">QLIST_INSERT_HEAD</name><argument_list pos:start="122:22" pos:end="122:56">(<argument pos:start="122:23" pos:end="122:38"><expr pos:start="122:23" pos:end="122:38"><operator pos:start="122:23" pos:end="122:23">&amp;</operator><name pos:start="122:24" pos:end="122:38"><name pos:start="122:24" pos:end="122:31">ram_list</name><operator pos:start="122:32" pos:end="122:32">.</operator><name pos:start="122:33" pos:end="122:38">blocks</name></name></expr></argument>, <argument pos:start="122:41" pos:end="122:49"><expr pos:start="122:41" pos:end="122:49"><name pos:start="122:41" pos:end="122:49">new_block</name></expr></argument>, <argument pos:start="122:52" pos:end="122:55"><expr pos:start="122:52" pos:end="122:55"><name pos:start="122:52" pos:end="122:55">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="126:5" pos:end="128:78"><expr pos:start="126:5" pos:end="128:77"><name pos:start="126:5" pos:end="126:23"><name pos:start="126:5" pos:end="126:12">ram_list</name><operator pos:start="126:13" pos:end="126:13">.</operator><name pos:start="126:14" pos:end="126:23">phys_dirty</name></name> <operator pos:start="126:25" pos:end="126:25">=</operator> <call pos:start="126:27" pos:end="128:77"><name pos:start="126:27" pos:end="126:38">qemu_realloc</name><argument_list pos:start="126:39" pos:end="128:77">(<argument pos:start="126:40" pos:end="126:58"><expr pos:start="126:40" pos:end="126:58"><name pos:start="126:40" pos:end="126:58"><name pos:start="126:40" pos:end="126:47">ram_list</name><operator pos:start="126:48" pos:end="126:48">.</operator><name pos:start="126:49" pos:end="126:58">phys_dirty</name></name></expr></argument>,

                                       <argument pos:start="128:40" pos:end="128:76"><expr pos:start="128:40" pos:end="128:76"><call pos:start="128:40" pos:end="128:56"><name pos:start="128:40" pos:end="128:54">last_ram_offset</name><argument_list pos:start="128:55" pos:end="128:56">()</argument_list></call> <operator pos:start="128:58" pos:end="128:59">&gt;&gt;</operator> <name pos:start="128:61" pos:end="128:76">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="130:5" pos:end="132:43"><expr pos:start="130:5" pos:end="132:42"><call pos:start="130:5" pos:end="132:42"><name pos:start="130:5" pos:end="130:10">memset</name><argument_list pos:start="130:11" pos:end="132:42">(<argument pos:start="130:12" pos:end="130:72"><expr pos:start="130:12" pos:end="130:72"><name pos:start="130:12" pos:end="130:30"><name pos:start="130:12" pos:end="130:19">ram_list</name><operator pos:start="130:20" pos:end="130:20">.</operator><name pos:start="130:21" pos:end="130:30">phys_dirty</name></name> <operator pos:start="130:32" pos:end="130:32">+</operator> <operator pos:start="130:34" pos:end="130:34">(</operator><name pos:start="130:35" pos:end="130:51"><name pos:start="130:35" pos:end="130:43">new_block</name><operator pos:start="130:44" pos:end="130:45">-&gt;</operator><name pos:start="130:46" pos:end="130:51">offset</name></name> <operator pos:start="130:53" pos:end="130:54">&gt;&gt;</operator> <name pos:start="130:56" pos:end="130:71">TARGET_PAGE_BITS</name><operator pos:start="130:72" pos:end="130:72">)</operator></expr></argument>,

           <argument pos:start="132:12" pos:end="132:15"><expr pos:start="132:12" pos:end="132:15"><literal type="number" pos:start="132:12" pos:end="132:15">0xff</literal></expr></argument>, <argument pos:start="132:18" pos:end="132:41"><expr pos:start="132:18" pos:end="132:41"><name pos:start="132:18" pos:end="132:21">size</name> <operator pos:start="132:23" pos:end="132:24">&gt;&gt;</operator> <name pos:start="132:26" pos:end="132:41">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="136:5" pos:end="138:54"><if pos:start="136:5" pos:end="138:54">if <condition pos:start="136:8" pos:end="136:22">(<expr pos:start="136:9" pos:end="136:21"><call pos:start="136:9" pos:end="136:21"><name pos:start="136:9" pos:end="136:19">kvm_enabled</name><argument_list pos:start="136:20" pos:end="136:21">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="138:9" pos:end="138:54"><block_content pos:start="138:9" pos:end="138:54">

        <expr_stmt pos:start="138:9" pos:end="138:54"><expr pos:start="138:9" pos:end="138:53"><call pos:start="138:9" pos:end="138:53"><name pos:start="138:9" pos:end="138:30">kvm_setup_guest_memory</name><argument_list pos:start="138:31" pos:end="138:53">(<argument pos:start="138:32" pos:end="138:46"><expr pos:start="138:32" pos:end="138:46"><name pos:start="138:32" pos:end="138:46"><name pos:start="138:32" pos:end="138:40">new_block</name><operator pos:start="138:41" pos:end="138:42">-&gt;</operator><name pos:start="138:43" pos:end="138:46">host</name></name></expr></argument>, <argument pos:start="138:49" pos:end="138:52"><expr pos:start="138:49" pos:end="138:52"><name pos:start="138:49" pos:end="138:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="142:5" pos:end="142:29">return <expr pos:start="142:12" pos:end="142:28"><name pos:start="142:12" pos:end="142:28"><name pos:start="142:12" pos:end="142:20">new_block</name><operator pos:start="142:21" pos:end="142:22">-&gt;</operator><name pos:start="142:23" pos:end="142:28">offset</name></name></expr>;</return></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
