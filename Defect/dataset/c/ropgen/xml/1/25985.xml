<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25985.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:18">MemTxResult</name></type> <name pos:start="1:20" pos:end="1:47">address_space_write_continue</name><parameter_list pos:start="1:48" pos:end="9:75">(<parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:60">AddressSpace</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">as</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:77"><decl pos:start="1:67" pos:end="1:77"><type pos:start="1:67" pos:end="1:77"><name pos:start="1:67" pos:end="1:72">hwaddr</name></type> <name pos:start="1:74" pos:end="1:77">addr</name></decl></parameter>,

                                                <parameter pos:start="3:49" pos:end="3:64"><decl pos:start="3:49" pos:end="3:64"><type pos:start="3:49" pos:end="3:64"><name pos:start="3:49" pos:end="3:58">MemTxAttrs</name></type> <name pos:start="3:60" pos:end="3:64">attrs</name></decl></parameter>,

                                                <parameter pos:start="5:49" pos:end="5:66"><decl pos:start="5:49" pos:end="5:66"><type pos:start="5:49" pos:end="5:66"><specifier pos:start="5:49" pos:end="5:53">const</specifier> <name pos:start="5:55" pos:end="5:61">uint8_t</name> <modifier pos:start="5:63" pos:end="5:63">*</modifier></type><name pos:start="5:64" pos:end="5:66">buf</name></decl></parameter>,

                                                <parameter pos:start="7:49" pos:end="7:55"><decl pos:start="7:49" pos:end="7:55"><type pos:start="7:49" pos:end="7:55"><name pos:start="7:49" pos:end="7:51">int</name></type> <name pos:start="7:53" pos:end="7:55">len</name></decl></parameter>, <parameter pos:start="7:58" pos:end="7:69"><decl pos:start="7:58" pos:end="7:69"><type pos:start="7:58" pos:end="7:69"><name pos:start="7:58" pos:end="7:63">hwaddr</name></type> <name pos:start="7:65" pos:end="7:69">addr1</name></decl></parameter>,

                                                <parameter pos:start="9:49" pos:end="9:56"><decl pos:start="9:49" pos:end="9:56"><type pos:start="9:49" pos:end="9:56"><name pos:start="9:49" pos:end="9:54">hwaddr</name></type> <name pos:start="9:56" pos:end="9:56">l</name></decl></parameter>, <parameter pos:start="9:59" pos:end="9:74"><decl pos:start="9:59" pos:end="9:74"><type pos:start="9:59" pos:end="9:74"><name pos:start="9:59" pos:end="9:70">MemoryRegion</name> <modifier pos:start="9:72" pos:end="9:72">*</modifier></type><name pos:start="9:73" pos:end="9:74">mr</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="141:1">{<block_content pos:start="13:5" pos:end="139:18">

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:15">MemTxResult</name></type> <name pos:start="17:17" pos:end="17:22">result</name> <init pos:start="17:24" pos:end="17:33">= <expr pos:start="17:26" pos:end="17:33"><name pos:start="17:26" pos:end="17:33">MEMTX_OK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:21">release_lock</name> <init pos:start="19:23" pos:end="19:29">= <expr pos:start="19:25" pos:end="19:29"><name pos:start="19:25" pos:end="19:29">false</name></expr></init></decl>;</decl_stmt>



    <for pos:start="23:5" pos:end="135:5">for <control pos:start="23:9" pos:end="23:12">(<init pos:start="23:10" pos:end="23:10">;</init><condition pos:start="23:11" pos:end="23:11">;</condition><incr/>)</control> <block pos:start="23:14" pos:end="135:5">{<block_content pos:start="25:9" pos:end="133:65">

        <if_stmt pos:start="25:9" pos:end="101:9"><if pos:start="25:9" pos:end="91:9">if <condition pos:start="25:12" pos:end="25:47">(<expr pos:start="25:13" pos:end="25:46"><operator pos:start="25:13" pos:end="25:13">!</operator><call pos:start="25:14" pos:end="25:46"><name pos:start="25:14" pos:end="25:36">memory_access_is_direct</name><argument_list pos:start="25:37" pos:end="25:46">(<argument pos:start="25:38" pos:end="25:39"><expr pos:start="25:38" pos:end="25:39"><name pos:start="25:38" pos:end="25:39">mr</name></expr></argument>, <argument pos:start="25:42" pos:end="25:45"><expr pos:start="25:42" pos:end="25:45"><name pos:start="25:42" pos:end="25:45">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:49" pos:end="91:9">{<block_content pos:start="27:13" pos:end="89:13">

            <expr_stmt pos:start="27:13" pos:end="27:52"><expr pos:start="27:13" pos:end="27:51"><name pos:start="27:13" pos:end="27:24">release_lock</name> <operator pos:start="27:26" pos:end="27:27">|=</operator> <call pos:start="27:29" pos:end="27:51"><name pos:start="27:29" pos:end="27:47">prepare_mmio_access</name><argument_list pos:start="27:48" pos:end="27:51">(<argument pos:start="27:49" pos:end="27:50"><expr pos:start="27:49" pos:end="27:50"><name pos:start="27:49" pos:end="27:50">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:49"><expr pos:start="29:13" pos:end="29:48"><name pos:start="29:13" pos:end="29:13">l</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:48"><name pos:start="29:17" pos:end="29:34">memory_access_size</name><argument_list pos:start="29:35" pos:end="29:48">(<argument pos:start="29:36" pos:end="29:37"><expr pos:start="29:36" pos:end="29:37"><name pos:start="29:36" pos:end="29:37">mr</name></expr></argument>, <argument pos:start="29:40" pos:end="29:40"><expr pos:start="29:40" pos:end="29:40"><name pos:start="29:40" pos:end="29:40">l</name></expr></argument>, <argument pos:start="29:43" pos:end="29:47"><expr pos:start="29:43" pos:end="29:47"><name pos:start="29:43" pos:end="29:47">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="31:13" pos:end="33:32">/* XXX: could force current_cpu to NULL to avoid

               potential bugs */</comment>

            <switch pos:start="35:13" pos:end="89:13">switch <condition pos:start="35:20" pos:end="35:22">(<expr pos:start="35:21" pos:end="35:21"><name pos:start="35:21" pos:end="35:21">l</name></expr>)</condition> <block pos:start="35:24" pos:end="89:13">{<block_content pos:start="37:13" pos:end="87:24">

            <case pos:start="37:13" pos:end="37:19">case <expr pos:start="37:18" pos:end="37:18"><literal type="number" pos:start="37:18" pos:end="37:18">8</literal></expr>:</case>

                <comment type="block" pos:start="39:17" pos:end="39:41">/* 64 bit write access */</comment>

                <expr_stmt pos:start="41:17" pos:end="41:33"><expr pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:19">val</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:32"><name pos:start="41:23" pos:end="41:27">ldq_p</name><argument_list pos:start="41:28" pos:end="41:32">(<argument pos:start="41:29" pos:end="41:31"><expr pos:start="41:29" pos:end="41:31"><name pos:start="41:29" pos:end="41:31">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="45:62"><expr pos:start="43:17" pos:end="45:61"><name pos:start="43:17" pos:end="43:22">result</name> <operator pos:start="43:24" pos:end="43:25">|=</operator> <call pos:start="43:27" pos:end="45:61"><name pos:start="43:27" pos:end="43:54">memory_region_dispatch_write</name><argument_list pos:start="43:55" pos:end="45:61">(<argument pos:start="43:56" pos:end="43:57"><expr pos:start="43:56" pos:end="43:57"><name pos:start="43:56" pos:end="43:57">mr</name></expr></argument>, <argument pos:start="43:60" pos:end="43:64"><expr pos:start="43:60" pos:end="43:64"><name pos:start="43:60" pos:end="43:64">addr1</name></expr></argument>, <argument pos:start="43:67" pos:end="43:69"><expr pos:start="43:67" pos:end="43:69"><name pos:start="43:67" pos:end="43:69">val</name></expr></argument>, <argument pos:start="43:72" pos:end="43:72"><expr pos:start="43:72" pos:end="43:72"><literal type="number" pos:start="43:72" pos:end="43:72">8</literal></expr></argument>,

                                                       <argument pos:start="45:56" pos:end="45:60"><expr pos:start="45:56" pos:end="45:60"><name pos:start="45:56" pos:end="45:60">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="47:17" pos:end="47:22">break;</break>

            <case pos:start="49:13" pos:end="49:19">case <expr pos:start="49:18" pos:end="49:18"><literal type="number" pos:start="49:18" pos:end="49:18">4</literal></expr>:</case>

                <comment type="block" pos:start="51:17" pos:end="51:41">/* 32 bit write access */</comment>

                <expr_stmt pos:start="53:17" pos:end="53:33"><expr pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:19">val</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:32"><name pos:start="53:23" pos:end="53:27">ldl_p</name><argument_list pos:start="53:28" pos:end="53:32">(<argument pos:start="53:29" pos:end="53:31"><expr pos:start="53:29" pos:end="53:31"><name pos:start="53:29" pos:end="53:31">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="57:62"><expr pos:start="55:17" pos:end="57:61"><name pos:start="55:17" pos:end="55:22">result</name> <operator pos:start="55:24" pos:end="55:25">|=</operator> <call pos:start="55:27" pos:end="57:61"><name pos:start="55:27" pos:end="55:54">memory_region_dispatch_write</name><argument_list pos:start="55:55" pos:end="57:61">(<argument pos:start="55:56" pos:end="55:57"><expr pos:start="55:56" pos:end="55:57"><name pos:start="55:56" pos:end="55:57">mr</name></expr></argument>, <argument pos:start="55:60" pos:end="55:64"><expr pos:start="55:60" pos:end="55:64"><name pos:start="55:60" pos:end="55:64">addr1</name></expr></argument>, <argument pos:start="55:67" pos:end="55:69"><expr pos:start="55:67" pos:end="55:69"><name pos:start="55:67" pos:end="55:69">val</name></expr></argument>, <argument pos:start="55:72" pos:end="55:72"><expr pos:start="55:72" pos:end="55:72"><literal type="number" pos:start="55:72" pos:end="55:72">4</literal></expr></argument>,

                                                       <argument pos:start="57:56" pos:end="57:60"><expr pos:start="57:56" pos:end="57:60"><name pos:start="57:56" pos:end="57:60">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            <case pos:start="61:13" pos:end="61:19">case <expr pos:start="61:18" pos:end="61:18"><literal type="number" pos:start="61:18" pos:end="61:18">2</literal></expr>:</case>

                <comment type="block" pos:start="63:17" pos:end="63:41">/* 16 bit write access */</comment>

                <expr_stmt pos:start="65:17" pos:end="65:34"><expr pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:19">val</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:33"><name pos:start="65:23" pos:end="65:28">lduw_p</name><argument_list pos:start="65:29" pos:end="65:33">(<argument pos:start="65:30" pos:end="65:32"><expr pos:start="65:30" pos:end="65:32"><name pos:start="65:30" pos:end="65:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="69:62"><expr pos:start="67:17" pos:end="69:61"><name pos:start="67:17" pos:end="67:22">result</name> <operator pos:start="67:24" pos:end="67:25">|=</operator> <call pos:start="67:27" pos:end="69:61"><name pos:start="67:27" pos:end="67:54">memory_region_dispatch_write</name><argument_list pos:start="67:55" pos:end="69:61">(<argument pos:start="67:56" pos:end="67:57"><expr pos:start="67:56" pos:end="67:57"><name pos:start="67:56" pos:end="67:57">mr</name></expr></argument>, <argument pos:start="67:60" pos:end="67:64"><expr pos:start="67:60" pos:end="67:64"><name pos:start="67:60" pos:end="67:64">addr1</name></expr></argument>, <argument pos:start="67:67" pos:end="67:69"><expr pos:start="67:67" pos:end="67:69"><name pos:start="67:67" pos:end="67:69">val</name></expr></argument>, <argument pos:start="67:72" pos:end="67:72"><expr pos:start="67:72" pos:end="67:72"><literal type="number" pos:start="67:72" pos:end="67:72">2</literal></expr></argument>,

                                                       <argument pos:start="69:56" pos:end="69:60"><expr pos:start="69:56" pos:end="69:60"><name pos:start="69:56" pos:end="69:60">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="71:17" pos:end="71:22">break;</break>

            <case pos:start="73:13" pos:end="73:19">case <expr pos:start="73:18" pos:end="73:18"><literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr>:</case>

                <comment type="block" pos:start="75:17" pos:end="75:40">/* 8 bit write access */</comment>

                <expr_stmt pos:start="77:17" pos:end="77:34"><expr pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:19">val</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:33"><name pos:start="77:23" pos:end="77:28">ldub_p</name><argument_list pos:start="77:29" pos:end="77:33">(<argument pos:start="77:30" pos:end="77:32"><expr pos:start="77:30" pos:end="77:32"><name pos:start="77:30" pos:end="77:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="81:62"><expr pos:start="79:17" pos:end="81:61"><name pos:start="79:17" pos:end="79:22">result</name> <operator pos:start="79:24" pos:end="79:25">|=</operator> <call pos:start="79:27" pos:end="81:61"><name pos:start="79:27" pos:end="79:54">memory_region_dispatch_write</name><argument_list pos:start="79:55" pos:end="81:61">(<argument pos:start="79:56" pos:end="79:57"><expr pos:start="79:56" pos:end="79:57"><name pos:start="79:56" pos:end="79:57">mr</name></expr></argument>, <argument pos:start="79:60" pos:end="79:64"><expr pos:start="79:60" pos:end="79:64"><name pos:start="79:60" pos:end="79:64">addr1</name></expr></argument>, <argument pos:start="79:67" pos:end="79:69"><expr pos:start="79:67" pos:end="79:69"><name pos:start="79:67" pos:end="79:69">val</name></expr></argument>, <argument pos:start="79:72" pos:end="79:72"><expr pos:start="79:72" pos:end="79:72"><literal type="number" pos:start="79:72" pos:end="79:72">1</literal></expr></argument>,

                                                       <argument pos:start="81:56" pos:end="81:60"><expr pos:start="81:56" pos:end="81:60"><name pos:start="81:56" pos:end="81:60">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="83:17" pos:end="83:22">break;</break>

            <default pos:start="85:13" pos:end="85:20">default:</default>

                <expr_stmt pos:start="87:17" pos:end="87:24"><expr pos:start="87:17" pos:end="87:23"><call pos:start="87:17" pos:end="87:23"><name pos:start="87:17" pos:end="87:21">abort</name><argument_list pos:start="87:22" pos:end="87:23">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="101:9">else <block pos:start="91:16" pos:end="101:9">{<block_content pos:start="95:13" pos:end="99:51">

            <comment type="block" pos:start="93:13" pos:end="93:26">/* RAM case */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:57"><expr pos:start="95:13" pos:end="95:56"><name pos:start="95:13" pos:end="95:15">ptr</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <call pos:start="95:19" pos:end="95:56"><name pos:start="95:19" pos:end="95:34">qemu_map_ram_ptr</name><argument_list pos:start="95:35" pos:end="95:56">(<argument pos:start="95:36" pos:end="95:48"><expr pos:start="95:36" pos:end="95:48"><name pos:start="95:36" pos:end="95:48"><name pos:start="95:36" pos:end="95:37">mr</name><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:48">ram_block</name></name></expr></argument>, <argument pos:start="95:51" pos:end="95:55"><expr pos:start="95:51" pos:end="95:55"><name pos:start="95:51" pos:end="95:55">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:32"><expr pos:start="97:13" pos:end="97:31"><call pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:18">memcpy</name><argument_list pos:start="97:19" pos:end="97:31">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">ptr</name></expr></argument>, <argument pos:start="97:25" pos:end="97:27"><expr pos:start="97:25" pos:end="97:27"><name pos:start="97:25" pos:end="97:27">buf</name></expr></argument>, <argument pos:start="97:30" pos:end="97:30"><expr pos:start="97:30" pos:end="97:30"><name pos:start="97:30" pos:end="97:30">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:51"><expr pos:start="99:13" pos:end="99:50"><call pos:start="99:13" pos:end="99:50"><name pos:start="99:13" pos:end="99:36">invalidate_and_set_dirty</name><argument_list pos:start="99:37" pos:end="99:50">(<argument pos:start="99:38" pos:end="99:39"><expr pos:start="99:38" pos:end="99:39"><name pos:start="99:38" pos:end="99:39">mr</name></expr></argument>, <argument pos:start="99:42" pos:end="99:46"><expr pos:start="99:42" pos:end="99:46"><name pos:start="99:42" pos:end="99:46">addr1</name></expr></argument>, <argument pos:start="99:49" pos:end="99:49"><expr pos:start="99:49" pos:end="99:49"><name pos:start="99:49" pos:end="99:49">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:25">(<expr pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:24">release_lock</name></expr>)</condition> <block pos:start="105:27" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:33">

            <expr_stmt pos:start="107:13" pos:end="107:41"><expr pos:start="107:13" pos:end="107:40"><call pos:start="107:13" pos:end="107:40"><name pos:start="107:13" pos:end="107:38">qemu_mutex_unlock_iothread</name><argument_list pos:start="107:39" pos:end="107:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:33"><expr pos:start="109:13" pos:end="109:32"><name pos:start="109:13" pos:end="109:24">release_lock</name> <operator pos:start="109:26" pos:end="109:26">=</operator> <name pos:start="109:28" pos:end="109:32">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:17"><expr pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:11">len</name> <operator pos:start="115:13" pos:end="115:14">-=</operator> <name pos:start="115:16" pos:end="115:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:17"><expr pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:11">buf</name> <operator pos:start="117:13" pos:end="117:14">+=</operator> <name pos:start="117:16" pos:end="117:16">l</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:18"><expr pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:12">addr</name> <operator pos:start="119:14" pos:end="119:15">+=</operator> <name pos:start="119:17" pos:end="119:17">l</name></expr>;</expr_stmt>



        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:17">(<expr pos:start="123:13" pos:end="123:16"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:16">len</name></expr>)</condition> <block pos:start="123:19" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:18">

            <break pos:start="125:13" pos:end="125:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="131:9" pos:end="131:16"><expr pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:9">l</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <name pos:start="131:13" pos:end="131:15">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:65"><expr pos:start="133:9" pos:end="133:64"><name pos:start="133:9" pos:end="133:10">mr</name> <operator pos:start="133:12" pos:end="133:12">=</operator> <call pos:start="133:14" pos:end="133:64"><name pos:start="133:14" pos:end="133:36">address_space_translate</name><argument_list pos:start="133:37" pos:end="133:64">(<argument pos:start="133:38" pos:end="133:39"><expr pos:start="133:38" pos:end="133:39"><name pos:start="133:38" pos:end="133:39">as</name></expr></argument>, <argument pos:start="133:42" pos:end="133:45"><expr pos:start="133:42" pos:end="133:45"><name pos:start="133:42" pos:end="133:45">addr</name></expr></argument>, <argument pos:start="133:48" pos:end="133:53"><expr pos:start="133:48" pos:end="133:53"><operator pos:start="133:48" pos:end="133:48">&amp;</operator><name pos:start="133:49" pos:end="133:53">addr1</name></expr></argument>, <argument pos:start="133:56" pos:end="133:57"><expr pos:start="133:56" pos:end="133:57"><operator pos:start="133:56" pos:end="133:56">&amp;</operator><name pos:start="133:57" pos:end="133:57">l</name></expr></argument>, <argument pos:start="133:60" pos:end="133:63"><expr pos:start="133:60" pos:end="133:63"><name pos:start="133:60" pos:end="133:63">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="139:5" pos:end="139:18">return <expr pos:start="139:12" pos:end="139:17"><name pos:start="139:12" pos:end="139:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
