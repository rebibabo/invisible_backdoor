<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20592.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">spapr_ovec_populate_dt</name><parameter_list pos:start="1:27" pos:end="3:67">(<parameter pos:start="1:28" pos:end="1:36"><decl pos:start="1:28" pos:end="1:36"><type pos:start="1:28" pos:end="1:36"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">fdt</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:52"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:52">fdt_offset</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:48"><decl pos:start="3:28" pos:end="3:48"><type pos:start="3:28" pos:end="3:48"><name pos:start="3:28" pos:end="3:44">sPAPROptionVector</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:48">ov</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:66"><decl pos:start="3:51" pos:end="3:66"><type pos:start="3:51" pos:end="3:66"><specifier pos:start="3:51" pos:end="3:55">const</specifier> <name pos:start="3:57" pos:end="3:60">char</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:66">name</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="65:1">{<block_content pos:start="7:5" pos:end="63:60">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:32"><name pos:start="7:13" pos:end="7:15">vec</name><index pos:start="7:16" pos:end="7:32">[<expr pos:start="7:17" pos:end="7:31"><name pos:start="7:17" pos:end="7:27">OV_MAXBYTES</name> <operator pos:start="7:29" pos:end="7:29">+</operator> <literal type="number" pos:start="7:31" pos:end="7:31">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:20">vec_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:25">lastbit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><call pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">g_assert</name><argument_list pos:start="17:13" pos:end="17:16">(<argument pos:start="17:14" pos:end="17:15"><expr pos:start="17:14" pos:end="17:15"><name pos:start="17:14" pos:end="17:15">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:11">lastbit</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:51"><name pos:start="21:15" pos:end="21:27">find_last_bit</name><argument_list pos:start="21:28" pos:end="21:51">(<argument pos:start="21:29" pos:end="21:38"><expr pos:start="21:29" pos:end="21:38"><name pos:start="21:29" pos:end="21:38"><name pos:start="21:29" pos:end="21:30">ov</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:38">bitmap</name></name></expr></argument>, <argument pos:start="21:41" pos:end="21:50"><expr pos:start="21:41" pos:end="21:50"><name pos:start="21:41" pos:end="21:50">OV_MAXBITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="29:7">/* if no bits are set, include at least 1 byte of the vector so we can

     * still encoded this in the device tree while abiding by the same

     * encoding/sizing expected in ibm,client-architecture-support

     */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:72"><expr pos:start="31:5" pos:end="31:71"><name pos:start="31:5" pos:end="31:11">vec_len</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <ternary pos:start="31:15" pos:end="31:71"><condition pos:start="31:15" pos:end="31:39"><expr pos:start="31:15" pos:end="31:37"><operator pos:start="31:15" pos:end="31:15">(</operator><name pos:start="31:16" pos:end="31:22">lastbit</name> <operator pos:start="31:24" pos:end="31:25">==</operator> <name pos:start="31:27" pos:end="31:36">OV_MAXBITS</name><operator pos:start="31:37" pos:end="31:37">)</operator></expr> ?</condition><then pos:start="31:41" pos:end="31:41"> <expr pos:start="31:41" pos:end="31:41"><literal type="number" pos:start="31:41" pos:end="31:41">1</literal></expr> </then><else pos:start="31:43" pos:end="31:71">: <expr pos:start="31:45" pos:end="31:71"><name pos:start="31:45" pos:end="31:51">lastbit</name> <operator pos:start="31:53" pos:end="31:53">/</operator> <name pos:start="31:55" pos:end="31:67">BITS_PER_BYTE</name> <operator pos:start="31:69" pos:end="31:69">+</operator> <literal type="number" pos:start="31:71" pos:end="31:71">1</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><call pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:19">g_assert_cmpint</name><argument_list pos:start="33:20" pos:end="33:45">(<argument pos:start="33:21" pos:end="33:27"><expr pos:start="33:21" pos:end="33:27"><name pos:start="33:21" pos:end="33:27">vec_len</name></expr></argument>, <argument pos:start="33:30" pos:end="33:31"><expr pos:start="33:30" pos:end="33:31"><operator pos:start="33:30" pos:end="33:31">&lt;=</operator></expr></argument>, <argument pos:start="33:34" pos:end="33:44"><expr pos:start="33:34" pos:end="33:44"><name pos:start="33:34" pos:end="33:44">OV_MAXBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="41:7">/* guest expects vector len encoded as vec_len - 1, since the length byte

     * is assumed and not included, and the first byte of the vector

     * is assumed as well

     */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:7">vec</name><index pos:start="43:8" pos:end="43:10">[<expr pos:start="43:9" pos:end="43:9"><literal type="number" pos:start="43:9" pos:end="43:9">0</literal></expr>]</index></name> <operator pos:start="43:12" pos:end="43:12">=</operator> <name pos:start="43:14" pos:end="43:20">vec_len</name> <operator pos:start="43:22" pos:end="43:22">-</operator> <literal type="number" pos:start="43:24" pos:end="43:24">1</literal></expr>;</expr_stmt>



    <for pos:start="47:5" pos:end="59:5">for <control pos:start="47:9" pos:end="47:37">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">i</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:32"><expr pos:start="47:17" pos:end="47:31"><name pos:start="47:17" pos:end="47:17">i</name> <operator pos:start="47:19" pos:end="47:19">&lt;</operator> <name pos:start="47:21" pos:end="47:27">vec_len</name> <operator pos:start="47:29" pos:end="47:29">+</operator> <literal type="number" pos:start="47:31" pos:end="47:31">1</literal></expr>;</condition> <incr pos:start="47:34" pos:end="47:36"><expr pos:start="47:34" pos:end="47:36"><name pos:start="47:34" pos:end="47:34">i</name><operator pos:start="47:35" pos:end="47:36">++</operator></expr></incr>)</control> <block pos:start="47:39" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:9">

        <expr_stmt pos:start="49:9" pos:end="49:77"><expr pos:start="49:9" pos:end="49:76"><name pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:11">vec</name><index pos:start="49:12" pos:end="49:14">[<expr pos:start="49:13" pos:end="49:13"><name pos:start="49:13" pos:end="49:13">i</name></expr>]</index></name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:76"><name pos:start="49:18" pos:end="49:39">guest_byte_from_bitmap</name><argument_list pos:start="49:40" pos:end="49:76">(<argument pos:start="49:41" pos:end="49:50"><expr pos:start="49:41" pos:end="49:50"><name pos:start="49:41" pos:end="49:50"><name pos:start="49:41" pos:end="49:42">ov</name><operator pos:start="49:43" pos:end="49:44">-&gt;</operator><name pos:start="49:45" pos:end="49:50">bitmap</name></name></expr></argument>, <argument pos:start="49:53" pos:end="49:75"><expr pos:start="49:53" pos:end="49:75"><operator pos:start="49:53" pos:end="49:53">(</operator><name pos:start="49:54" pos:end="49:54">i</name> <operator pos:start="49:56" pos:end="49:56">-</operator> <literal type="number" pos:start="49:58" pos:end="49:58">1</literal><operator pos:start="49:59" pos:end="49:59">)</operator> <operator pos:start="49:61" pos:end="49:61">*</operator> <name pos:start="49:63" pos:end="49:75">BITS_PER_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:19">(<expr pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:15">vec</name><index pos:start="51:16" pos:end="51:18">[<expr pos:start="51:17" pos:end="51:17"><name pos:start="51:17" pos:end="51:17">i</name></expr>]</index></name></expr>)</condition> <block pos:start="51:21" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:41">

            <expr_stmt pos:start="53:13" pos:end="55:41"><expr pos:start="53:13" pos:end="55:40"><call pos:start="53:13" pos:end="55:40"><name pos:start="53:13" pos:end="53:20">DPRINTFN</name><argument_list pos:start="53:21" pos:end="55:40">(<argument pos:start="53:22" pos:end="53:67"><expr pos:start="53:22" pos:end="53:67"><literal type="string" pos:start="53:22" pos:end="53:67">"encoding guest vector byte %3d / %3d: 0x%.2x"</literal></expr></argument>,

                     <argument pos:start="55:22" pos:end="55:22"><expr pos:start="55:22" pos:end="55:22"><name pos:start="55:22" pos:end="55:22">i</name></expr></argument>, <argument pos:start="55:25" pos:end="55:31"><expr pos:start="55:25" pos:end="55:31"><name pos:start="55:25" pos:end="55:31">vec_len</name></expr></argument>, <argument pos:start="55:34" pos:end="55:39"><expr pos:start="55:34" pos:end="55:39"><name pos:start="55:34" pos:end="55:39"><name pos:start="55:34" pos:end="55:36">vec</name><index pos:start="55:37" pos:end="55:39">[<expr pos:start="55:38" pos:end="55:38"><name pos:start="55:38" pos:end="55:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="63:5" pos:end="63:60">return <expr pos:start="63:12" pos:end="63:59"><call pos:start="63:12" pos:end="63:59"><name pos:start="63:12" pos:end="63:22">fdt_setprop</name><argument_list pos:start="63:23" pos:end="63:59">(<argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:26">fdt</name></expr></argument>, <argument pos:start="63:29" pos:end="63:38"><expr pos:start="63:29" pos:end="63:38"><name pos:start="63:29" pos:end="63:38">fdt_offset</name></expr></argument>, <argument pos:start="63:41" pos:end="63:44"><expr pos:start="63:41" pos:end="63:44"><name pos:start="63:41" pos:end="63:44">name</name></expr></argument>, <argument pos:start="63:47" pos:end="63:49"><expr pos:start="63:47" pos:end="63:49"><name pos:start="63:47" pos:end="63:49">vec</name></expr></argument>, <argument pos:start="63:52" pos:end="63:58"><expr pos:start="63:52" pos:end="63:58"><name pos:start="63:52" pos:end="63:58">vec_len</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
