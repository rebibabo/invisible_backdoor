<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4850.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">tlb_fill</name><parameter_list pos:start="1:14" pos:end="3:45">(<parameter pos:start="1:15" pos:end="1:26"><decl pos:start="1:15" pos:end="1:26"><type pos:start="1:15" pos:end="1:26"><name pos:start="1:15" pos:end="1:22">CPUState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:26">cs</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:40">target_ulong</name></type> <name pos:start="1:42" pos:end="1:45">addr</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:72"><decl pos:start="1:48" pos:end="1:72"><type pos:start="1:48" pos:end="1:72"><name pos:start="1:48" pos:end="1:60">MMUAccessType</name></type> <name pos:start="1:62" pos:end="1:72">access_type</name></decl></parameter>,

              <parameter pos:start="3:15" pos:end="3:25"><decl pos:start="3:15" pos:end="3:25"><type pos:start="3:15" pos:end="3:25"><name pos:start="3:15" pos:end="3:17">int</name></type> <name pos:start="3:19" pos:end="3:25">mmu_idx</name></decl></parameter>, <parameter pos:start="3:28" pos:end="3:44"><decl pos:start="3:28" pos:end="3:44"><type pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:36">uintptr_t</name></type> <name pos:start="3:38" pos:end="3:44">retaddr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="101:1">{<block_content pos:start="7:5" pos:end="99:5">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:12">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">fsr</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">ARMMMUFaultInfo</name></type> <name pos:start="11:21" pos:end="11:22">fi</name> <init pos:start="11:24" pos:end="11:27">= <expr pos:start="11:26" pos:end="11:27"><block pos:start="11:26" pos:end="11:27">{}</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:66"><expr pos:start="15:5" pos:end="15:65"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:65"><name pos:start="15:11" pos:end="15:22">arm_tlb_fill</name><argument_list pos:start="15:23" pos:end="15:65">(<argument pos:start="15:24" pos:end="15:25"><expr pos:start="15:24" pos:end="15:25"><name pos:start="15:24" pos:end="15:25">cs</name></expr></argument>, <argument pos:start="15:28" pos:end="15:31"><expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">addr</name></expr></argument>, <argument pos:start="15:34" pos:end="15:44"><expr pos:start="15:34" pos:end="15:44"><name pos:start="15:34" pos:end="15:44">access_type</name></expr></argument>, <argument pos:start="15:47" pos:end="15:53"><expr pos:start="15:47" pos:end="15:53"><name pos:start="15:47" pos:end="15:53">mmu_idx</name></expr></argument>, <argument pos:start="15:56" pos:end="15:59"><expr pos:start="15:56" pos:end="15:59"><operator pos:start="15:56" pos:end="15:56">&amp;</operator><name pos:start="15:57" pos:end="15:59">fsr</name></expr></argument>, <argument pos:start="15:62" pos:end="15:64"><expr pos:start="15:62" pos:end="15:64"><operator pos:start="15:62" pos:end="15:62">&amp;</operator><name pos:start="15:63" pos:end="15:64">fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="99:5"><if pos:start="17:5" pos:end="99:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><call pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:16">unlikely</name><argument_list pos:start="17:17" pos:end="17:21">(<argument pos:start="17:18" pos:end="17:20"><expr pos:start="17:18" pos:end="17:20"><name pos:start="17:18" pos:end="17:20">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:24" pos:end="99:5">{<block_content pos:start="19:9" pos:end="97:50">

        <decl_stmt pos:start="19:9" pos:end="19:34"><decl pos:start="19:9" pos:end="19:33"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:14">ARMCPU</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">cpu</name> <init pos:start="19:21" pos:end="19:33">= <expr pos:start="19:23" pos:end="19:33"><call pos:start="19:23" pos:end="19:33"><name pos:start="19:23" pos:end="19:29">ARM_CPU</name><argument_list pos:start="19:30" pos:end="19:33">(<argument pos:start="19:31" pos:end="19:32"><expr pos:start="19:31" pos:end="19:32"><name pos:start="19:31" pos:end="19:32">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:37"><decl pos:start="21:9" pos:end="21:36"><type pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:19">CPUARMState</name> <modifier pos:start="21:21" pos:end="21:21">*</modifier></type><name pos:start="21:22" pos:end="21:24">env</name> <init pos:start="21:26" pos:end="21:36">= <expr pos:start="21:28" pos:end="21:36"><operator pos:start="21:28" pos:end="21:28">&amp;</operator><name pos:start="21:29" pos:end="21:36"><name pos:start="21:29" pos:end="21:31">cpu</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:36">env</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:26"><decl pos:start="23:9" pos:end="23:20"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint32_t</name></type> <name pos:start="23:18" pos:end="23:20">syn</name></decl>, <decl pos:start="23:23" pos:end="23:25"><type ref="prev" pos:start="23:9" pos:end="23:16"/><name pos:start="23:23" pos:end="23:25">exc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:31"><decl pos:start="25:9" pos:end="25:30"><type pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:16">unsigned</name> <name pos:start="25:18" pos:end="25:20">int</name></type> <name pos:start="25:22" pos:end="25:30">target_el</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:21"><decl pos:start="27:9" pos:end="27:20"><type pos:start="27:9" pos:end="27:12"><name pos:start="27:9" pos:end="27:12">bool</name></type> <name pos:start="27:14" pos:end="27:20">same_el</name></decl>;</decl_stmt>



        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:20">(<expr pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:19">retaddr</name></expr>)</condition> <block pos:start="31:22" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:43">

            <comment type="block" pos:start="33:13" pos:end="33:46">/* now we have a real cpu fault */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:43"><expr pos:start="35:13" pos:end="35:42"><call pos:start="35:13" pos:end="35:42"><name pos:start="35:13" pos:end="35:29">cpu_restore_state</name><argument_list pos:start="35:30" pos:end="35:42">(<argument pos:start="35:31" pos:end="35:32"><expr pos:start="35:31" pos:end="35:32"><name pos:start="35:31" pos:end="35:32">cs</name></expr></argument>, <argument pos:start="35:35" pos:end="35:41"><expr pos:start="35:35" pos:end="35:41"><name pos:start="35:35" pos:end="35:41">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:17">target_el</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:44"><name pos:start="41:21" pos:end="41:39">exception_target_el</name><argument_list pos:start="41:40" pos:end="41:44">(<argument pos:start="41:41" pos:end="41:43"><expr pos:start="41:41" pos:end="41:43"><name pos:start="41:41" pos:end="41:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:22">(<expr pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:14">fi</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:21">stage2</name></name></expr>)</condition> <block pos:start="43:24" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:68">

            <expr_stmt pos:start="45:13" pos:end="45:26"><expr pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:21">target_el</name> <operator pos:start="45:23" pos:end="45:23">=</operator> <literal type="number" pos:start="45:25" pos:end="45:25">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:68"><expr pos:start="47:13" pos:end="47:67"><name pos:start="47:13" pos:end="47:31"><name pos:start="47:13" pos:end="47:15">env</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:21">cp15</name><operator pos:start="47:22" pos:end="47:22">.</operator><name pos:start="47:23" pos:end="47:31">hpfar_el2</name></name> <operator pos:start="47:33" pos:end="47:33">=</operator> <call pos:start="47:35" pos:end="47:62"><name pos:start="47:35" pos:end="47:43">extract64</name><argument_list pos:start="47:44" pos:end="47:62">(<argument pos:start="47:45" pos:end="47:53"><expr pos:start="47:45" pos:end="47:53"><name pos:start="47:45" pos:end="47:53"><name pos:start="47:45" pos:end="47:46">fi</name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:53">s2addr</name></name></expr></argument>, <argument pos:start="47:56" pos:end="47:57"><expr pos:start="47:56" pos:end="47:57"><literal type="number" pos:start="47:56" pos:end="47:57">12</literal></expr></argument>, <argument pos:start="47:60" pos:end="47:61"><expr pos:start="47:60" pos:end="47:61"><literal type="number" pos:start="47:60" pos:end="47:61">47</literal></expr></argument>)</argument_list></call> <operator pos:start="47:64" pos:end="47:65">&lt;&lt;</operator> <literal type="number" pos:start="47:67" pos:end="47:67">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:15">same_el</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:37"><name pos:start="51:19" pos:end="51:32">arm_current_el</name><argument_list pos:start="51:33" pos:end="51:37">(<argument pos:start="51:34" pos:end="51:36"><expr pos:start="51:34" pos:end="51:36"><name pos:start="51:34" pos:end="51:36">env</name></expr></argument>)</argument_list></call> <operator pos:start="51:39" pos:end="51:40">==</operator> <name pos:start="51:42" pos:end="51:50">target_el</name></expr>;</expr_stmt>

        <comment type="block" pos:start="53:9" pos:end="53:56">/* AArch64 syndrome does not have an LPAE bit */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:11">syn</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:17">fsr</name> <operator pos:start="55:19" pos:end="55:19">&amp;</operator> <operator pos:start="55:21" pos:end="55:21">~</operator><operator pos:start="55:22" pos:end="55:22">(</operator><literal type="number" pos:start="55:23" pos:end="55:23">1</literal> <operator pos:start="55:25" pos:end="55:26">&lt;&lt;</operator> <literal type="number" pos:start="55:28" pos:end="55:28">9</literal><operator pos:start="55:29" pos:end="55:29">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="59:9" pos:end="63:11">/* For insn and data aborts we assume there is no instruction syndrome

         * information; this is always true for exceptions reported to EL1.

         */</comment>

        <if_stmt pos:start="65:9" pos:end="89:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:42">(<expr pos:start="65:13" pos:end="65:41"><name pos:start="65:13" pos:end="65:23">access_type</name> <operator pos:start="65:25" pos:end="65:26">==</operator> <name pos:start="65:28" pos:end="65:41">MMU_INST_FETCH</name></expr>)</condition> <block pos:start="65:44" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:38">

            <expr_stmt pos:start="67:13" pos:end="67:60"><expr pos:start="67:13" pos:end="67:59"><name pos:start="67:13" pos:end="67:15">syn</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:59"><name pos:start="67:19" pos:end="67:32">syn_insn_abort</name><argument_list pos:start="67:33" pos:end="67:59">(<argument pos:start="67:34" pos:end="67:40"><expr pos:start="67:34" pos:end="67:40"><name pos:start="67:34" pos:end="67:40">same_el</name></expr></argument>, <argument pos:start="67:43" pos:end="67:43"><expr pos:start="67:43" pos:end="67:43"><literal type="number" pos:start="67:43" pos:end="67:43">0</literal></expr></argument>, <argument pos:start="67:46" pos:end="67:53"><expr pos:start="67:46" pos:end="67:53"><name pos:start="67:46" pos:end="67:53"><name pos:start="67:46" pos:end="67:47">fi</name><operator pos:start="67:48" pos:end="67:48">.</operator><name pos:start="67:49" pos:end="67:53">s1ptw</name></name></expr></argument>, <argument pos:start="67:56" pos:end="67:58"><expr pos:start="67:56" pos:end="67:58"><name pos:start="67:56" pos:end="67:58">syn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:15">exc</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:37">EXCP_PREFETCH_ABORT</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="89:9">else <block pos:start="71:16" pos:end="89:9">{<block_content pos:start="73:13" pos:end="87:34">

            <expr_stmt pos:start="73:13" pos:end="77:75"><expr pos:start="73:13" pos:end="77:74"><name pos:start="73:13" pos:end="73:15">syn</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="77:74"><name pos:start="73:19" pos:end="73:38">merge_syn_data_abort</name><argument_list pos:start="73:39" pos:end="77:74">(<argument pos:start="73:40" pos:end="73:62"><expr pos:start="73:40" pos:end="73:62"><name pos:start="73:40" pos:end="73:62"><name pos:start="73:40" pos:end="73:42">env</name><operator pos:start="73:43" pos:end="73:44">-&gt;</operator><name pos:start="73:45" pos:end="73:53">exception</name><operator pos:start="73:54" pos:end="73:54">.</operator><name pos:start="73:55" pos:end="73:62">syndrome</name></name></expr></argument>, <argument pos:start="73:65" pos:end="73:73"><expr pos:start="73:65" pos:end="73:73"><name pos:start="73:65" pos:end="73:73">target_el</name></expr></argument>,

                                       <argument pos:start="75:40" pos:end="75:46"><expr pos:start="75:40" pos:end="75:46"><name pos:start="75:40" pos:end="75:46">same_el</name></expr></argument>, <argument pos:start="75:49" pos:end="75:56"><expr pos:start="75:49" pos:end="75:56"><name pos:start="75:49" pos:end="75:56"><name pos:start="75:49" pos:end="75:50">fi</name><operator pos:start="75:51" pos:end="75:51">.</operator><name pos:start="75:52" pos:end="75:56">s1ptw</name></name></expr></argument>,

                                       <argument pos:start="77:40" pos:end="77:68"><expr pos:start="77:40" pos:end="77:68"><name pos:start="77:40" pos:end="77:50">access_type</name> <operator pos:start="77:52" pos:end="77:53">==</operator> <name pos:start="77:55" pos:end="77:68">MMU_DATA_STORE</name></expr></argument>, <argument pos:start="77:71" pos:end="77:73"><expr pos:start="77:71" pos:end="77:73"><name pos:start="77:71" pos:end="77:73">syn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="85:13"><if pos:start="79:13" pos:end="85:13">if <condition pos:start="79:16" pos:end="81:52">(<expr pos:start="79:17" pos:end="81:51"><name pos:start="79:17" pos:end="79:27">access_type</name> <operator pos:start="79:29" pos:end="79:30">==</operator> <name pos:start="79:32" pos:end="79:45">MMU_DATA_STORE</name>

                <operator pos:start="81:17" pos:end="81:18">&amp;&amp;</operator> <call pos:start="81:20" pos:end="81:51"><name pos:start="81:20" pos:end="81:30">arm_feature</name><argument_list pos:start="81:31" pos:end="81:51">(<argument pos:start="81:32" pos:end="81:34"><expr pos:start="81:32" pos:end="81:34"><name pos:start="81:32" pos:end="81:34">env</name></expr></argument>, <argument pos:start="81:37" pos:end="81:50"><expr pos:start="81:37" pos:end="81:50"><name pos:start="81:37" pos:end="81:50">ARM_FEATURE_V6</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:54" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:33">

                <expr_stmt pos:start="83:17" pos:end="83:33"><expr pos:start="83:17" pos:end="83:32"><name pos:start="83:17" pos:end="83:19">fsr</name> <operator pos:start="83:21" pos:end="83:22">|=</operator> <operator pos:start="83:24" pos:end="83:24">(</operator><literal type="number" pos:start="83:25" pos:end="83:25">1</literal> <operator pos:start="83:27" pos:end="83:28">&lt;&lt;</operator> <literal type="number" pos:start="83:30" pos:end="83:31">11</literal><operator pos:start="83:32" pos:end="83:32">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:34"><expr pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:15">exc</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:33">EXCP_DATA_ABORT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:39"><expr pos:start="93:9" pos:end="93:38"><name pos:start="93:9" pos:end="93:31"><name pos:start="93:9" pos:end="93:11">env</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:22">exception</name><operator pos:start="93:23" pos:end="93:23">.</operator><name pos:start="93:24" pos:end="93:31">vaddress</name></name> <operator pos:start="93:33" pos:end="93:33">=</operator> <name pos:start="93:35" pos:end="93:38">addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:11">env</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:22">exception</name><operator pos:start="95:23" pos:end="95:23">.</operator><name pos:start="95:24" pos:end="95:26">fsr</name></name> <operator pos:start="95:28" pos:end="95:28">=</operator> <name pos:start="95:30" pos:end="95:32">fsr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:50"><expr pos:start="97:9" pos:end="97:49"><call pos:start="97:9" pos:end="97:49"><name pos:start="97:9" pos:end="97:23">raise_exception</name><argument_list pos:start="97:24" pos:end="97:49">(<argument pos:start="97:25" pos:end="97:27"><expr pos:start="97:25" pos:end="97:27"><name pos:start="97:25" pos:end="97:27">env</name></expr></argument>, <argument pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:32">exc</name></expr></argument>, <argument pos:start="97:35" pos:end="97:37"><expr pos:start="97:35" pos:end="97:37"><name pos:start="97:35" pos:end="97:37">syn</name></expr></argument>, <argument pos:start="97:40" pos:end="97:48"><expr pos:start="97:40" pos:end="97:48"><name pos:start="97:40" pos:end="97:48">target_el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
