<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17384.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:33"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:26">attribute_align_arg</name> <name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:52">frame_worker_thread</name><parameter_list pos:start="1:53" pos:end="1:63">(<parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:59"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:16">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">PerThreadContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">p</name> <init pos:start="5:25" pos:end="5:29">= <expr pos:start="5:27" pos:end="5:29"><name pos:start="5:27" pos:end="5:29">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">FrameThreadContext</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">fctx</name> <init pos:start="7:30" pos:end="7:40">= <expr pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:32">p</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:40">parent</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">avctx</name> <init pos:start="9:27" pos:end="9:36">= <expr pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:29">p</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:36">avctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVCodec</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:18">codec</name> <init pos:start="11:20" pos:end="11:33">= <expr pos:start="11:22" pos:end="11:33"><name pos:start="11:22" pos:end="11:33"><name pos:start="11:22" pos:end="11:26">avctx</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:33">codec</name></name></expr></init></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="83:5">while <condition pos:start="15:11" pos:end="15:13">(<expr pos:start="15:12" pos:end="15:12"><literal type="number" pos:start="15:12" pos:end="15:12">1</literal></expr>)</condition> <block pos:start="15:15" pos:end="83:5">{<block_content pos:start="17:9" pos:end="81:40">

        <decl_stmt pos:start="17:9" pos:end="17:14"><decl pos:start="17:9" pos:end="17:13"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:13">i</name></decl>;</decl_stmt>

        <if_stmt pos:start="19:9" pos:end="29:9"><if pos:start="19:9" pos:end="29:9">if <condition pos:start="19:12" pos:end="19:56">(<expr pos:start="19:13" pos:end="19:55"><name pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:13">p</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:20">state</name></name> <operator pos:start="19:22" pos:end="19:23">==</operator> <name pos:start="19:25" pos:end="19:41">STATE_INPUT_READY</name> <operator pos:start="19:43" pos:end="19:44">&amp;&amp;</operator> <operator pos:start="19:46" pos:end="19:46">!</operator><name pos:start="19:47" pos:end="19:55"><name pos:start="19:47" pos:end="19:50">fctx</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:55">die</name></name></expr>)</condition> <block pos:start="19:58" pos:end="29:9">{<block_content pos:start="21:13" pos:end="27:44">

            <expr_stmt pos:start="21:13" pos:end="21:42"><expr pos:start="21:13" pos:end="21:41"><call pos:start="21:13" pos:end="21:41"><name pos:start="21:13" pos:end="21:30">pthread_mutex_lock</name><argument_list pos:start="21:31" pos:end="21:41">(<argument pos:start="21:32" pos:end="21:40"><expr pos:start="21:32" pos:end="21:40"><operator pos:start="21:32" pos:end="21:32">&amp;</operator><name pos:start="21:33" pos:end="21:40"><name pos:start="21:33" pos:end="21:33">p</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:40">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="23:13" pos:end="25:61">while <condition pos:start="23:19" pos:end="23:63">(<expr pos:start="23:20" pos:end="23:62"><name pos:start="23:20" pos:end="23:27"><name pos:start="23:20" pos:end="23:20">p</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:27">state</name></name> <operator pos:start="23:29" pos:end="23:30">==</operator> <name pos:start="23:32" pos:end="23:48">STATE_INPUT_READY</name> <operator pos:start="23:50" pos:end="23:51">&amp;&amp;</operator> <operator pos:start="23:53" pos:end="23:53">!</operator><name pos:start="23:54" pos:end="23:62"><name pos:start="23:54" pos:end="23:57">fctx</name><operator pos:start="23:58" pos:end="23:59">-&gt;</operator><name pos:start="23:60" pos:end="23:62">die</name></name></expr>)</condition><block type="pseudo" pos:start="25:17" pos:end="25:61"><block_content pos:start="25:17" pos:end="25:61">

                <expr_stmt pos:start="25:17" pos:end="25:61"><expr pos:start="25:17" pos:end="25:60"><call pos:start="25:17" pos:end="25:60"><name pos:start="25:17" pos:end="25:33">pthread_cond_wait</name><argument_list pos:start="25:34" pos:end="25:60">(<argument pos:start="25:35" pos:end="25:48"><expr pos:start="25:35" pos:end="25:48"><operator pos:start="25:35" pos:end="25:35">&amp;</operator><name pos:start="25:36" pos:end="25:48"><name pos:start="25:36" pos:end="25:36">p</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:48">input_cond</name></name></expr></argument>, <argument pos:start="25:51" pos:end="25:59"><expr pos:start="25:51" pos:end="25:59"><operator pos:start="25:51" pos:end="25:51">&amp;</operator><name pos:start="25:52" pos:end="25:59"><name pos:start="25:52" pos:end="25:52">p</name><operator pos:start="25:53" pos:end="25:54">-&gt;</operator><name pos:start="25:55" pos:end="25:59">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt pos:start="27:13" pos:end="27:44"><expr pos:start="27:13" pos:end="27:43"><call pos:start="27:13" pos:end="27:43"><name pos:start="27:13" pos:end="27:32">pthread_mutex_unlock</name><argument_list pos:start="27:33" pos:end="27:43">(<argument pos:start="27:34" pos:end="27:42"><expr pos:start="27:34" pos:end="27:42"><operator pos:start="27:34" pos:end="27:34">&amp;</operator><name pos:start="27:35" pos:end="27:42"><name pos:start="27:35" pos:end="27:35">p</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:42">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="33:9" pos:end="33:29"><if pos:start="33:9" pos:end="33:29">if <condition pos:start="33:12" pos:end="33:22">(<expr pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:16">fctx</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:21">die</name></name></expr>)</condition><block type="pseudo" pos:start="33:24" pos:end="33:29"><block_content pos:start="33:24" pos:end="33:29"> <break pos:start="33:24" pos:end="33:29">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="39:42"><if pos:start="37:9" pos:end="39:42">if <condition pos:start="37:12" pos:end="37:127">(<expr pos:start="37:13" pos:end="37:126"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:41"><name pos:start="37:14" pos:end="37:18">codec</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:41">update_thread_context</name></name> <operator pos:start="37:43" pos:end="37:44">&amp;&amp;</operator> <operator pos:start="37:46" pos:end="37:46">(</operator><name pos:start="37:47" pos:end="37:74"><name pos:start="37:47" pos:end="37:51">avctx</name><operator pos:start="37:52" pos:end="37:53">-&gt;</operator><name pos:start="37:54" pos:end="37:74">thread_safe_callbacks</name></name> <operator pos:start="37:76" pos:end="37:77">||</operator> <name pos:start="37:79" pos:end="37:95"><name pos:start="37:79" pos:end="37:83">avctx</name><operator pos:start="37:84" pos:end="37:85">-&gt;</operator><name pos:start="37:86" pos:end="37:95">get_buffer</name></name> <operator pos:start="37:97" pos:end="37:98">==</operator> <name pos:start="37:100" pos:end="37:125">avcodec_default_get_buffer</name><operator pos:start="37:126" pos:end="37:126">)</operator></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:42"><block_content pos:start="39:13" pos:end="39:42">

            <expr_stmt pos:start="39:13" pos:end="39:42"><expr pos:start="39:13" pos:end="39:41"><call pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:34">ff_thread_finish_setup</name><argument_list pos:start="39:35" pos:end="39:41">(<argument pos:start="39:36" pos:end="39:40"><expr pos:start="39:36" pos:end="39:40"><name pos:start="39:36" pos:end="39:40">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:38"><expr pos:start="43:9" pos:end="43:37"><call pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:26">pthread_mutex_lock</name><argument_list pos:start="43:27" pos:end="43:37">(<argument pos:start="43:28" pos:end="43:36"><expr pos:start="43:28" pos:end="43:36"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:36"><name pos:start="43:29" pos:end="43:29">p</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:36">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:46"><expr pos:start="45:9" pos:end="45:45"><call pos:start="45:9" pos:end="45:45"><name pos:start="45:9" pos:end="45:34">avcodec_get_frame_defaults</name><argument_list pos:start="45:35" pos:end="45:45">(<argument pos:start="45:36" pos:end="45:44"><expr pos:start="45:36" pos:end="45:44"><operator pos:start="45:36" pos:end="45:36">&amp;</operator><name pos:start="45:37" pos:end="45:44"><name pos:start="45:37" pos:end="45:37">p</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:44">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:9">p</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:20">got_frame</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:78"><expr pos:start="49:9" pos:end="49:77"><name pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:9">p</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:17">result</name></name> <operator pos:start="49:19" pos:end="49:19">=</operator> <call pos:start="49:21" pos:end="49:77"><name pos:start="49:21" pos:end="49:33"><name pos:start="49:21" pos:end="49:25">codec</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:33">decode</name></name><argument_list pos:start="49:34" pos:end="49:77">(<argument pos:start="49:35" pos:end="49:39"><expr pos:start="49:35" pos:end="49:39"><name pos:start="49:35" pos:end="49:39">avctx</name></expr></argument>, <argument pos:start="49:42" pos:end="49:50"><expr pos:start="49:42" pos:end="49:50"><operator pos:start="49:42" pos:end="49:42">&amp;</operator><name pos:start="49:43" pos:end="49:50"><name pos:start="49:43" pos:end="49:43">p</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:50">frame</name></name></expr></argument>, <argument pos:start="49:53" pos:end="49:65"><expr pos:start="49:53" pos:end="49:65"><operator pos:start="49:53" pos:end="49:53">&amp;</operator><name pos:start="49:54" pos:end="49:65"><name pos:start="49:54" pos:end="49:54">p</name><operator pos:start="49:55" pos:end="49:56">-&gt;</operator><name pos:start="49:57" pos:end="49:65">got_frame</name></name></expr></argument>, <argument pos:start="49:68" pos:end="49:76"><expr pos:start="49:68" pos:end="49:76"><operator pos:start="49:68" pos:end="49:68">&amp;</operator><name pos:start="49:69" pos:end="49:76"><name pos:start="49:69" pos:end="49:69">p</name><operator pos:start="49:70" pos:end="49:71">-&gt;</operator><name pos:start="49:72" pos:end="49:76">avpkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="53:9" pos:end="53:72"><if pos:start="53:9" pos:end="53:72">if <condition pos:start="53:12" pos:end="53:41">(<expr pos:start="53:13" pos:end="53:40"><name pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:13">p</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">state</name></name> <operator pos:start="53:22" pos:end="53:23">==</operator> <name pos:start="53:25" pos:end="53:40">STATE_SETTING_UP</name></expr>)</condition><block type="pseudo" pos:start="53:43" pos:end="53:72"><block_content pos:start="53:43" pos:end="53:72"> <expr_stmt pos:start="53:43" pos:end="53:72"><expr pos:start="53:43" pos:end="53:71"><call pos:start="53:43" pos:end="53:71"><name pos:start="53:43" pos:end="53:64">ff_thread_finish_setup</name><argument_list pos:start="53:65" pos:end="53:71">(<argument pos:start="53:66" pos:end="53:70"><expr pos:start="53:66" pos:end="53:70"><name pos:start="53:66" pos:end="53:70">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><call pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:26">pthread_mutex_lock</name><argument_list pos:start="57:27" pos:end="57:46">(<argument pos:start="57:28" pos:end="57:45"><expr pos:start="57:28" pos:end="57:45"><operator pos:start="57:28" pos:end="57:28">&amp;</operator><name pos:start="57:29" pos:end="57:45"><name pos:start="57:29" pos:end="57:29">p</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:45">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="59:9" pos:end="67:13">for <control pos:start="59:13" pos:end="59:41">(<init pos:start="59:14" pos:end="59:19"><expr pos:start="59:14" pos:end="59:18"><name pos:start="59:14" pos:end="59:14">i</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>;</init> <condition pos:start="59:21" pos:end="59:36"><expr pos:start="59:21" pos:end="59:35"><name pos:start="59:21" pos:end="59:21">i</name> <operator pos:start="59:23" pos:end="59:23">&lt;</operator> <name pos:start="59:25" pos:end="59:35">MAX_BUFFERS</name></expr>;</condition> <incr pos:start="59:38" pos:end="59:40"><expr pos:start="59:38" pos:end="59:40"><name pos:start="59:38" pos:end="59:38">i</name><operator pos:start="59:39" pos:end="59:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="61:13" pos:end="67:13"><block_content pos:start="61:13" pos:end="67:13">

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:36">(<expr pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:35"><name pos:start="61:17" pos:end="61:17">p</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:32">progress_used</name><index pos:start="61:33" pos:end="61:35">[<expr pos:start="61:34" pos:end="61:34"><name pos:start="61:34" pos:end="61:34">i</name></expr>]</index></name></expr>)</condition> <block pos:start="61:38" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:44">

                <expr_stmt pos:start="63:17" pos:end="63:44"><expr pos:start="63:17" pos:end="63:43"><name pos:start="63:17" pos:end="63:33"><name pos:start="63:17" pos:end="63:17">p</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:27">progress</name><index pos:start="63:28" pos:end="63:30">[<expr pos:start="63:29" pos:end="63:29"><name pos:start="63:29" pos:end="63:29">i</name></expr>]</index><index pos:start="63:31" pos:end="63:33">[<expr pos:start="63:32" pos:end="63:32"><literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>]</index></name> <operator pos:start="63:35" pos:end="63:35">=</operator> <name pos:start="63:37" pos:end="63:43">INT_MAX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:44"><expr pos:start="65:17" pos:end="65:43"><name pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:17">p</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:27">progress</name><index pos:start="65:28" pos:end="65:30">[<expr pos:start="65:29" pos:end="65:29"><name pos:start="65:29" pos:end="65:29">i</name></expr>]</index><index pos:start="65:31" pos:end="65:33">[<expr pos:start="65:32" pos:end="65:32"><literal type="number" pos:start="65:32" pos:end="65:32">1</literal></expr>]</index></name> <operator pos:start="65:35" pos:end="65:35">=</operator> <name pos:start="65:37" pos:end="65:43">INT_MAX</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:9">p</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:16">state</name></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:36">STATE_INPUT_READY</name></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:50"><expr pos:start="73:9" pos:end="73:49"><call pos:start="73:9" pos:end="73:49"><name pos:start="73:9" pos:end="73:30">pthread_cond_broadcast</name><argument_list pos:start="73:31" pos:end="73:49">(<argument pos:start="73:32" pos:end="73:48"><expr pos:start="73:32" pos:end="73:48"><operator pos:start="73:32" pos:end="73:32">&amp;</operator><name pos:start="73:33" pos:end="73:48"><name pos:start="73:33" pos:end="73:33">p</name><operator pos:start="73:34" pos:end="73:35">-&gt;</operator><name pos:start="73:36" pos:end="73:48">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:45"><expr pos:start="75:9" pos:end="75:44"><call pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:27">pthread_cond_signal</name><argument_list pos:start="75:28" pos:end="75:44">(<argument pos:start="75:29" pos:end="75:43"><expr pos:start="75:29" pos:end="75:43"><operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:43"><name pos:start="75:30" pos:end="75:30">p</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:43">output_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:49"><expr pos:start="77:9" pos:end="77:48"><call pos:start="77:9" pos:end="77:48"><name pos:start="77:9" pos:end="77:28">pthread_mutex_unlock</name><argument_list pos:start="77:29" pos:end="77:48">(<argument pos:start="77:30" pos:end="77:47"><expr pos:start="77:30" pos:end="77:47"><operator pos:start="77:30" pos:end="77:30">&amp;</operator><name pos:start="77:31" pos:end="77:47"><name pos:start="77:31" pos:end="77:31">p</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:47">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:40"><expr pos:start="81:9" pos:end="81:39"><call pos:start="81:9" pos:end="81:39"><name pos:start="81:9" pos:end="81:28">pthread_mutex_unlock</name><argument_list pos:start="81:29" pos:end="81:39">(<argument pos:start="81:30" pos:end="81:38"><expr pos:start="81:30" pos:end="81:38"><operator pos:start="81:30" pos:end="81:30">&amp;</operator><name pos:start="81:31" pos:end="81:38"><name pos:start="81:31" pos:end="81:31">p</name><operator pos:start="81:32" pos:end="81:33">-&gt;</operator><name pos:start="81:34" pos:end="81:38">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="87:5" pos:end="87:16">return <expr pos:start="87:12" pos:end="87:15"><name pos:start="87:12" pos:end="87:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
