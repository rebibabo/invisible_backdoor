<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19427.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">check_refcounts_l2</name><parameter_list pos:start="1:30" pos:end="5:14">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:67">BdrvCheckResult</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">res</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:28"><decl pos:start="3:5" pos:end="3:28"><type pos:start="3:5" pos:end="3:28"><name pos:start="3:5" pos:end="3:12">uint16_t</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:28">refcount_table</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:57"><decl pos:start="3:31" pos:end="3:57"><type pos:start="3:31" pos:end="3:57"><name pos:start="3:31" pos:end="3:37">int64_t</name></type> <name pos:start="3:39" pos:end="3:57">refcount_table_size</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:76"><decl pos:start="3:60" pos:end="3:76"><type pos:start="3:60" pos:end="3:76"><name pos:start="3:60" pos:end="3:66">int64_t</name></type> <name pos:start="3:68" pos:end="3:76">l2_offset</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="197:1">{<block_content pos:start="9:5" pos:end="195:16">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">l2_table</name></decl>, <decl pos:start="11:25" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:14"/><name pos:start="11:25" pos:end="11:32">l2_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:35">next_contiguous_offset</name> <init pos:start="13:37" pos:end="13:39">= <expr pos:start="13:39" pos:end="13:39"><literal type="number" pos:start="13:39" pos:end="13:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:18">l2_size</name></decl>, <decl pos:start="15:21" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:31">nb_csectors</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:33">/* Read L2 table from disk */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:11">l2_size</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:24"><name pos:start="21:15" pos:end="21:15">s</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:24">l2_size</name></name> <operator pos:start="21:26" pos:end="21:26">*</operator> <sizeof pos:start="21:28" pos:end="21:43">sizeof<argument_list pos:start="21:34" pos:end="21:43">(<argument pos:start="21:35" pos:end="21:42"><expr pos:start="21:35" pos:end="21:42"><name pos:start="21:35" pos:end="21:42">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:12">l2_table</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:32"><name pos:start="23:16" pos:end="23:23">g_malloc</name><argument_list pos:start="23:24" pos:end="23:32">(<argument pos:start="23:25" pos:end="23:31"><expr pos:start="23:25" pos:end="23:31"><name pos:start="23:25" pos:end="23:31">l2_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="29:18"><if pos:start="27:5" pos:end="29:18">if <condition pos:start="27:8" pos:end="27:70">(<expr pos:start="27:9" pos:end="27:69"><call pos:start="27:9" pos:end="27:58"><name pos:start="27:9" pos:end="27:18">bdrv_pread</name><argument_list pos:start="27:19" pos:end="27:58">(<argument pos:start="27:20" pos:end="27:27"><expr pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:21">bs</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:27">file</name></name></expr></argument>, <argument pos:start="27:30" pos:end="27:38"><expr pos:start="27:30" pos:end="27:38"><name pos:start="27:30" pos:end="27:38">l2_offset</name></expr></argument>, <argument pos:start="27:41" pos:end="27:48"><expr pos:start="27:41" pos:end="27:48"><name pos:start="27:41" pos:end="27:48">l2_table</name></expr></argument>, <argument pos:start="27:51" pos:end="27:57"><expr pos:start="27:51" pos:end="27:57"><name pos:start="27:51" pos:end="27:57">l2_size</name></expr></argument>)</argument_list></call> <operator pos:start="27:60" pos:end="27:61">!=</operator> <name pos:start="27:63" pos:end="27:69">l2_size</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:18"><block_content pos:start="29:9" pos:end="29:18">

        <goto pos:start="29:9" pos:end="29:18">goto <name pos:start="29:14" pos:end="29:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:30">/* Do the actual checks */</comment>

    <for pos:start="35:5" pos:end="179:5">for<control pos:start="35:8" pos:end="35:35">(<init pos:start="35:9" pos:end="35:14"><expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:9">i</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <literal type="number" pos:start="35:13" pos:end="35:13">0</literal></expr>;</init> <condition pos:start="35:16" pos:end="35:30"><expr pos:start="35:16" pos:end="35:29"><name pos:start="35:16" pos:end="35:16">i</name> <operator pos:start="35:18" pos:end="35:18">&lt;</operator> <name pos:start="35:20" pos:end="35:29"><name pos:start="35:20" pos:end="35:20">s</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:29">l2_size</name></name></expr>;</condition> <incr pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:32">i</name><operator pos:start="35:33" pos:end="35:34">++</operator></expr></incr>)</control> <block pos:start="35:37" pos:end="179:5">{<block_content pos:start="37:9" pos:end="177:9">

        <expr_stmt pos:start="37:9" pos:end="37:44"><expr pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:16">l2_entry</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:43"><name pos:start="37:20" pos:end="37:30">be64_to_cpu</name><argument_list pos:start="37:31" pos:end="37:43">(<argument pos:start="37:32" pos:end="37:42"><expr pos:start="37:32" pos:end="37:42"><name pos:start="37:32" pos:end="37:42"><name pos:start="37:32" pos:end="37:39">l2_table</name><index pos:start="37:40" pos:end="37:42">[<expr pos:start="37:41" pos:end="37:41"><name pos:start="37:41" pos:end="37:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="41:9" pos:end="177:9">switch <condition pos:start="41:16" pos:end="41:49">(<expr pos:start="41:17" pos:end="41:48"><call pos:start="41:17" pos:end="41:48"><name pos:start="41:17" pos:end="41:38">qcow2_get_cluster_type</name><argument_list pos:start="41:39" pos:end="41:48">(<argument pos:start="41:40" pos:end="41:47"><expr pos:start="41:40" pos:end="41:47"><name pos:start="41:40" pos:end="41:47">l2_entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:51" pos:end="177:9">{<block_content pos:start="43:9" pos:end="175:20">

        <case pos:start="43:9" pos:end="43:38">case <expr pos:start="43:14" pos:end="43:37"><name pos:start="43:14" pos:end="43:37">QCOW2_CLUSTER_COMPRESSED</name></expr>:</case>

            <comment type="block" pos:start="45:13" pos:end="45:66">/* Compressed clusters don't have QCOW_OFLAG_COPIED */</comment>

            <if_stmt pos:start="47:13" pos:end="59:13"><if pos:start="47:13" pos:end="59:13">if <condition pos:start="47:16" pos:end="47:45">(<expr pos:start="47:17" pos:end="47:44"><name pos:start="47:17" pos:end="47:24">l2_entry</name> <operator pos:start="47:26" pos:end="47:26">&amp;</operator> <name pos:start="47:28" pos:end="47:44">QCOW_OFLAG_COPIED</name></expr>)</condition> <block pos:start="47:47" pos:end="59:13">{<block_content pos:start="49:17" pos:end="57:35">

                <expr_stmt pos:start="49:17" pos:end="53:63"><expr pos:start="49:17" pos:end="53:62"><call pos:start="49:17" pos:end="53:62"><name pos:start="49:17" pos:end="49:23">fprintf</name><argument_list pos:start="49:24" pos:end="53:62">(<argument pos:start="49:25" pos:end="49:30"><expr pos:start="49:25" pos:end="49:30"><name pos:start="49:25" pos:end="49:30">stderr</name></expr></argument>, <argument pos:start="49:33" pos:end="53:32"><expr pos:start="49:33" pos:end="53:32"><literal type="string" pos:start="49:33" pos:end="49:50">"ERROR: cluster %"</literal> <name pos:start="49:52" pos:end="49:57">PRId64</name> <literal type="string" pos:start="49:59" pos:end="49:62">": "</literal>

                    <literal type="string" pos:start="51:21" pos:end="51:67">"copied flag must never be set for compressed "</literal>

                    <literal type="string" pos:start="53:21" pos:end="53:32">"clusters\n"</literal></expr></argument>, <argument pos:start="53:35" pos:end="53:61"><expr pos:start="53:35" pos:end="53:61"><name pos:start="53:35" pos:end="53:42">l2_entry</name> <operator pos:start="53:44" pos:end="53:45">&gt;&gt;</operator> <name pos:start="53:47" pos:end="53:61"><name pos:start="53:47" pos:end="53:47">s</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:61">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:47"><expr pos:start="55:17" pos:end="55:46"><name pos:start="55:17" pos:end="55:24">l2_entry</name> <operator pos:start="55:26" pos:end="55:27">&amp;=</operator> <operator pos:start="55:29" pos:end="55:29">~</operator><name pos:start="55:30" pos:end="55:46">QCOW_OFLAG_COPIED</name></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:35"><expr pos:start="57:17" pos:end="57:34"><name pos:start="57:17" pos:end="57:32"><name pos:start="57:17" pos:end="57:19">res</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:32">corruptions</name></name><operator pos:start="57:33" pos:end="57:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="63:13" pos:end="63:38">/* Mark cluster as used */</comment>

            <expr_stmt pos:start="65:13" pos:end="67:46"><expr pos:start="65:13" pos:end="67:45"><name pos:start="65:13" pos:end="65:23">nb_csectors</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <operator pos:start="65:27" pos:end="65:27">(</operator><operator pos:start="65:28" pos:end="65:28">(</operator><name pos:start="65:29" pos:end="65:36">l2_entry</name> <operator pos:start="65:38" pos:end="65:39">&gt;&gt;</operator> <name pos:start="65:41" pos:end="65:54"><name pos:start="65:41" pos:end="65:41">s</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:54">csize_shift</name></name><operator pos:start="65:55" pos:end="65:55">)</operator> <operator pos:start="65:57" pos:end="65:57">&amp;</operator>

                           <name pos:start="67:28" pos:end="67:40"><name pos:start="67:28" pos:end="67:28">s</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:40">csize_mask</name></name><operator pos:start="67:41" pos:end="67:41">)</operator> <operator pos:start="67:43" pos:end="67:43">+</operator> <literal type="number" pos:start="67:45" pos:end="67:45">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:47"><expr pos:start="69:13" pos:end="69:46"><name pos:start="69:13" pos:end="69:20">l2_entry</name> <operator pos:start="69:22" pos:end="69:23">&amp;=</operator> <name pos:start="69:25" pos:end="69:46"><name pos:start="69:25" pos:end="69:25">s</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:46">cluster_offset_mask</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="73:52"><expr pos:start="71:13" pos:end="73:51"><call pos:start="71:13" pos:end="73:51"><name pos:start="71:13" pos:end="71:25">inc_refcounts</name><argument_list pos:start="71:26" pos:end="73:51">(<argument pos:start="71:27" pos:end="71:28"><expr pos:start="71:27" pos:end="71:28"><name pos:start="71:27" pos:end="71:28">bs</name></expr></argument>, <argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:33">res</name></expr></argument>, <argument pos:start="71:36" pos:end="71:49"><expr pos:start="71:36" pos:end="71:49"><name pos:start="71:36" pos:end="71:49">refcount_table</name></expr></argument>, <argument pos:start="71:52" pos:end="71:70"><expr pos:start="71:52" pos:end="71:70"><name pos:start="71:52" pos:end="71:70">refcount_table_size</name></expr></argument>,

                <argument pos:start="73:17" pos:end="73:31"><expr pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:24">l2_entry</name> <operator pos:start="73:26" pos:end="73:26">&amp;</operator> <operator pos:start="73:28" pos:end="73:28">~</operator><literal type="number" pos:start="73:29" pos:end="73:31">511</literal></expr></argument>, <argument pos:start="73:34" pos:end="73:50"><expr pos:start="73:34" pos:end="73:50"><name pos:start="73:34" pos:end="73:44">nb_csectors</name> <operator pos:start="73:46" pos:end="73:46">*</operator> <literal type="number" pos:start="73:48" pos:end="73:50">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="77:13" pos:end="97:13"><if pos:start="77:13" pos:end="97:13">if <condition pos:start="77:16" pos:end="77:40">(<expr pos:start="77:17" pos:end="77:39"><name pos:start="77:17" pos:end="77:21">flags</name> <operator pos:start="77:23" pos:end="77:23">&amp;</operator> <name pos:start="77:25" pos:end="77:39">CHECK_FRAG_INFO</name></expr>)</condition> <block pos:start="77:42" pos:end="97:13">{<block_content pos:start="79:17" pos:end="95:47">

                <expr_stmt pos:start="79:17" pos:end="79:46"><expr pos:start="79:17" pos:end="79:45"><name pos:start="79:17" pos:end="79:43"><name pos:start="79:17" pos:end="79:19">res</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:24">bfi</name><operator pos:start="79:25" pos:end="79:25">.</operator><name pos:start="79:26" pos:end="79:43">allocated_clusters</name></name><operator pos:start="79:44" pos:end="79:45">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:47"><expr pos:start="81:17" pos:end="81:46"><name pos:start="81:17" pos:end="81:44"><name pos:start="81:17" pos:end="81:19">res</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:24">bfi</name><operator pos:start="81:25" pos:end="81:25">.</operator><name pos:start="81:26" pos:end="81:44">compressed_clusters</name></name><operator pos:start="81:45" pos:end="81:46">++</operator></expr>;</expr_stmt>



                <comment type="block" pos:start="85:17" pos:end="93:19">/* Compressed clusters are fragmented by nature.  Since they

                 * take up sub-sector space but we only have sector granularity

                 * I/O we need to re-read the same sectors even for adjacent

                 * compressed clusters.

                 */</comment>

                <expr_stmt pos:start="95:17" pos:end="95:47"><expr pos:start="95:17" pos:end="95:46"><name pos:start="95:17" pos:end="95:44"><name pos:start="95:17" pos:end="95:19">res</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:24">bfi</name><operator pos:start="95:25" pos:end="95:25">.</operator><name pos:start="95:26" pos:end="95:44">fragmented_clusters</name></name><operator pos:start="95:45" pos:end="95:46">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>



        <case pos:start="103:9" pos:end="103:32">case <expr pos:start="103:14" pos:end="103:31"><name pos:start="103:14" pos:end="103:31">QCOW2_CLUSTER_ZERO</name></expr>:</case>

            <if_stmt pos:start="105:13" pos:end="109:13"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:50">(<expr pos:start="105:17" pos:end="105:49"><operator pos:start="105:17" pos:end="105:17">(</operator><name pos:start="105:18" pos:end="105:25">l2_entry</name> <operator pos:start="105:27" pos:end="105:27">&amp;</operator> <name pos:start="105:29" pos:end="105:43">L2E_OFFSET_MASK</name><operator pos:start="105:44" pos:end="105:44">)</operator> <operator pos:start="105:46" pos:end="105:47">==</operator> <literal type="number" pos:start="105:49" pos:end="105:49">0</literal></expr>)</condition> <block pos:start="105:52" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:22">

                <break pos:start="107:17" pos:end="107:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="111:13" pos:end="111:30">/* fall through */</comment>



        <case pos:start="115:9" pos:end="115:34">case <expr pos:start="115:14" pos:end="115:33"><name pos:start="115:14" pos:end="115:33">QCOW2_CLUSTER_NORMAL</name></expr>:</case>

        <block pos:start="117:9" pos:end="163:9">{<block_content pos:start="119:13" pos:end="161:18">

            <decl_stmt pos:start="119:13" pos:end="119:57"><decl pos:start="119:13" pos:end="119:56"><type pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:20">uint64_t</name></type> <name pos:start="119:22" pos:end="119:27">offset</name> <init pos:start="119:29" pos:end="119:56">= <expr pos:start="119:31" pos:end="119:56"><name pos:start="119:31" pos:end="119:38">l2_entry</name> <operator pos:start="119:40" pos:end="119:40">&amp;</operator> <name pos:start="119:42" pos:end="119:56">L2E_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="123:13" pos:end="137:13"><if pos:start="123:13" pos:end="137:13">if <condition pos:start="123:16" pos:end="123:40">(<expr pos:start="123:17" pos:end="123:39"><name pos:start="123:17" pos:end="123:21">flags</name> <operator pos:start="123:23" pos:end="123:23">&amp;</operator> <name pos:start="123:25" pos:end="123:39">CHECK_FRAG_INFO</name></expr>)</condition> <block pos:start="123:42" pos:end="137:13">{<block_content pos:start="125:17" pos:end="135:66">

                <expr_stmt pos:start="125:17" pos:end="125:46"><expr pos:start="125:17" pos:end="125:45"><name pos:start="125:17" pos:end="125:43"><name pos:start="125:17" pos:end="125:19">res</name><operator pos:start="125:20" pos:end="125:21">-&gt;</operator><name pos:start="125:22" pos:end="125:24">bfi</name><operator pos:start="125:25" pos:end="125:25">.</operator><name pos:start="125:26" pos:end="125:43">allocated_clusters</name></name><operator pos:start="125:44" pos:end="125:45">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="127:17" pos:end="133:17"><if pos:start="127:17" pos:end="133:17">if <condition pos:start="127:20" pos:end="129:53">(<expr pos:start="127:21" pos:end="129:52"><name pos:start="127:21" pos:end="127:42">next_contiguous_offset</name> <operator pos:start="127:44" pos:end="127:45">&amp;&amp;</operator>

                    <name pos:start="129:21" pos:end="129:26">offset</name> <operator pos:start="129:28" pos:end="129:29">!=</operator> <name pos:start="129:31" pos:end="129:52">next_contiguous_offset</name></expr>)</condition> <block pos:start="129:55" pos:end="133:17">{<block_content pos:start="131:21" pos:end="131:51">

                    <expr_stmt pos:start="131:21" pos:end="131:51"><expr pos:start="131:21" pos:end="131:50"><name pos:start="131:21" pos:end="131:48"><name pos:start="131:21" pos:end="131:23">res</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:28">bfi</name><operator pos:start="131:29" pos:end="131:29">.</operator><name pos:start="131:30" pos:end="131:48">fragmented_clusters</name></name><operator pos:start="131:49" pos:end="131:50">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:66"><expr pos:start="135:17" pos:end="135:65"><name pos:start="135:17" pos:end="135:38">next_contiguous_offset</name> <operator pos:start="135:40" pos:end="135:40">=</operator> <name pos:start="135:42" pos:end="135:47">offset</name> <operator pos:start="135:49" pos:end="135:49">+</operator> <name pos:start="135:51" pos:end="135:65"><name pos:start="135:51" pos:end="135:51">s</name><operator pos:start="135:52" pos:end="135:53">-&gt;</operator><name pos:start="135:54" pos:end="135:65">cluster_size</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="141:13" pos:end="141:38">/* Mark cluster as used */</comment>

            <expr_stmt pos:start="143:13" pos:end="145:41"><expr pos:start="143:13" pos:end="145:40"><call pos:start="143:13" pos:end="145:40"><name pos:start="143:13" pos:end="143:25">inc_refcounts</name><argument_list pos:start="143:26" pos:end="145:40">(<argument pos:start="143:27" pos:end="143:28"><expr pos:start="143:27" pos:end="143:28"><name pos:start="143:27" pos:end="143:28">bs</name></expr></argument>, <argument pos:start="143:31" pos:end="143:33"><expr pos:start="143:31" pos:end="143:33"><name pos:start="143:31" pos:end="143:33">res</name></expr></argument>, <argument pos:start="143:36" pos:end="143:49"><expr pos:start="143:36" pos:end="143:49"><name pos:start="143:36" pos:end="143:49">refcount_table</name></expr></argument>,<argument pos:start="143:51" pos:end="143:69"><expr pos:start="143:51" pos:end="143:69"><name pos:start="143:51" pos:end="143:69">refcount_table_size</name></expr></argument>,

                <argument pos:start="145:17" pos:end="145:22"><expr pos:start="145:17" pos:end="145:22"><name pos:start="145:17" pos:end="145:22">offset</name></expr></argument>, <argument pos:start="145:25" pos:end="145:39"><expr pos:start="145:25" pos:end="145:39"><name pos:start="145:25" pos:end="145:39"><name pos:start="145:25" pos:end="145:25">s</name><operator pos:start="145:26" pos:end="145:27">-&gt;</operator><name pos:start="145:28" pos:end="145:39">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="149:13" pos:end="149:53">/* Correct offsets are cluster aligned */</comment>

            <if_stmt pos:start="151:13" pos:end="159:13"><if pos:start="151:13" pos:end="159:13">if <condition pos:start="151:16" pos:end="151:47">(<expr pos:start="151:17" pos:end="151:46"><call pos:start="151:17" pos:end="151:46"><name pos:start="151:17" pos:end="151:35">offset_into_cluster</name><argument_list pos:start="151:36" pos:end="151:46">(<argument pos:start="151:37" pos:end="151:37"><expr pos:start="151:37" pos:end="151:37"><name pos:start="151:37" pos:end="151:37">s</name></expr></argument>, <argument pos:start="151:40" pos:end="151:45"><expr pos:start="151:40" pos:end="151:45"><name pos:start="151:40" pos:end="151:45">offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:49" pos:end="159:13">{<block_content pos:start="153:17" pos:end="157:35">

                <expr_stmt pos:start="153:17" pos:end="155:71"><expr pos:start="153:17" pos:end="155:70"><call pos:start="153:17" pos:end="155:70"><name pos:start="153:17" pos:end="153:23">fprintf</name><argument_list pos:start="153:24" pos:end="155:70">(<argument pos:start="153:25" pos:end="153:30"><expr pos:start="153:25" pos:end="153:30"><name pos:start="153:25" pos:end="153:30">stderr</name></expr></argument>, <argument pos:start="153:33" pos:end="155:61"><expr pos:start="153:33" pos:end="155:61"><literal type="string" pos:start="153:33" pos:end="153:48">"ERROR offset=%"</literal> <name pos:start="153:50" pos:end="153:55">PRIx64</name> <literal type="string" pos:start="153:57" pos:end="153:75">": Cluster is not "</literal>

                    <literal type="string" pos:start="155:21" pos:end="155:61">"properly aligned; L2 entry corrupted.\n"</literal></expr></argument>, <argument pos:start="155:64" pos:end="155:69"><expr pos:start="155:64" pos:end="155:69"><name pos:start="155:64" pos:end="155:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:35"><expr pos:start="157:17" pos:end="157:34"><name pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:19">res</name><operator pos:start="157:20" pos:end="157:21">-&gt;</operator><name pos:start="157:22" pos:end="157:32">corruptions</name></name><operator pos:start="157:33" pos:end="157:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="161:13" pos:end="161:18">break;</break>

        </block_content>}</block>



        <case pos:start="167:9" pos:end="167:39">case <expr pos:start="167:14" pos:end="167:38"><name pos:start="167:14" pos:end="167:38">QCOW2_CLUSTER_UNALLOCATED</name></expr>:</case>

            <break pos:start="169:13" pos:end="169:18">break;</break>



        <default pos:start="173:9" pos:end="173:16">default:</default>

            <expr_stmt pos:start="175:13" pos:end="175:20"><expr pos:start="175:13" pos:end="175:19"><call pos:start="175:13" pos:end="175:19"><name pos:start="175:13" pos:end="175:17">abort</name><argument_list pos:start="175:18" pos:end="175:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="183:5" pos:end="183:21"><expr pos:start="183:5" pos:end="183:20"><call pos:start="183:5" pos:end="183:20"><name pos:start="183:5" pos:end="183:10">g_free</name><argument_list pos:start="183:11" pos:end="183:20">(<argument pos:start="183:12" pos:end="183:19"><expr pos:start="183:12" pos:end="183:19"><name pos:start="183:12" pos:end="183:19">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="185:5" pos:end="185:13">return <expr pos:start="185:12" pos:end="185:12"><literal type="number" pos:start="185:12" pos:end="185:12">0</literal></expr>;</return>



<label pos:start="189:1" pos:end="189:5"><name pos:start="189:1" pos:end="189:4">fail</name>:</label>

    <expr_stmt pos:start="191:5" pos:end="191:64"><expr pos:start="191:5" pos:end="191:63"><call pos:start="191:5" pos:end="191:63"><name pos:start="191:5" pos:end="191:11">fprintf</name><argument_list pos:start="191:12" pos:end="191:63">(<argument pos:start="191:13" pos:end="191:18"><expr pos:start="191:13" pos:end="191:18"><name pos:start="191:13" pos:end="191:18">stderr</name></expr></argument>, <argument pos:start="191:21" pos:end="191:62"><expr pos:start="191:21" pos:end="191:62"><literal type="string" pos:start="191:21" pos:end="191:62">"ERROR: I/O error in check_refcounts_l2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:21"><expr pos:start="193:5" pos:end="193:20"><call pos:start="193:5" pos:end="193:20"><name pos:start="193:5" pos:end="193:10">g_free</name><argument_list pos:start="193:11" pos:end="193:20">(<argument pos:start="193:12" pos:end="193:19"><expr pos:start="193:12" pos:end="193:19"><name pos:start="193:12" pos:end="193:19">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="195:5" pos:end="195:16">return <expr pos:start="195:12" pos:end="195:15"><operator pos:start="195:12" pos:end="195:12">-</operator><name pos:start="195:13" pos:end="195:15">EIO</name></expr>;</return>

</block_content>}</block></function>
</unit>
