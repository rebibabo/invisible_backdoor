<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23296.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">gdb_get_spe_reg</name><parameter_list pos:start="1:27" pos:end="1:66">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:49">uint8_t</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">mem_buf</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:65"><decl pos:start="1:61" pos:end="1:65"><type pos:start="1:61" pos:end="1:65"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:65">n</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:13">

    <if_stmt pos:start="5:5" pos:end="19:5"><if pos:start="5:5" pos:end="19:5">if <condition pos:start="5:8" pos:end="5:15">(<expr pos:start="5:9" pos:end="5:14"><name pos:start="5:9" pos:end="5:9">n</name> <operator pos:start="5:11" pos:end="5:11">&lt;</operator> <literal type="number" pos:start="5:13" pos:end="5:14">32</literal></expr>)</condition> <block pos:start="5:17" pos:end="19:5">{<block_content pos:start="9:9" pos:end="17:17">

<cpp:if pos:start="7:1" pos:end="7:25">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:25"><call pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:11">defined</name><argument_list pos:start="7:12" pos:end="7:25">(<argument pos:start="7:13" pos:end="7:24"><expr pos:start="7:13" pos:end="7:24"><name pos:start="7:13" pos:end="7:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="9:9" pos:end="12:0"><expr pos:start="9:9" pos:end="9:41"><call pos:start="9:9" pos:end="9:41"><name pos:start="9:9" pos:end="9:13">stl_p</name><argument_list pos:start="9:14" pos:end="9:41">(<argument pos:start="9:15" pos:end="9:21"><expr pos:start="9:15" pos:end="9:21"><name pos:start="9:15" pos:end="9:21">mem_buf</name></expr></argument>, <argument pos:start="9:24" pos:end="9:40"><expr pos:start="9:24" pos:end="9:40"><name pos:start="9:24" pos:end="9:34"><name pos:start="9:24" pos:end="9:26">env</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:31">gpr</name><index pos:start="9:32" pos:end="9:34">[<expr pos:start="9:33" pos:end="9:33"><name pos:start="9:33" pos:end="9:33">n</name></expr>]</index></name> <operator pos:start="9:36" pos:end="9:37">&gt;&gt;</operator> <literal type="number" pos:start="9:39" pos:end="9:40">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="13:9" pos:end="16:0"><expr pos:start="13:9" pos:end="13:36"><call pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:13">stl_p</name><argument_list pos:start="13:14" pos:end="13:36">(<argument pos:start="13:15" pos:end="13:21"><expr pos:start="13:15" pos:end="13:21"><name pos:start="13:15" pos:end="13:21">mem_buf</name></expr></argument>, <argument pos:start="13:24" pos:end="13:35"><expr pos:start="13:24" pos:end="13:35"><name pos:start="13:24" pos:end="13:35"><name pos:start="13:24" pos:end="13:26">env</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:32">gprh</name><index pos:start="13:33" pos:end="13:35">[<expr pos:start="13:34" pos:end="13:34"><name pos:start="13:34" pos:end="13:34">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">4</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:9">n</name> <operator pos:start="21:11" pos:end="21:12">==</operator> <literal type="number" pos:start="21:14" pos:end="21:15">33</literal></expr>)</condition> <block pos:start="21:18" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:17">

        <expr_stmt pos:start="23:9" pos:end="23:37"><expr pos:start="23:9" pos:end="23:36"><call pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:13">stq_p</name><argument_list pos:start="23:14" pos:end="23:36">(<argument pos:start="23:15" pos:end="23:21"><expr pos:start="23:15" pos:end="23:21"><name pos:start="23:15" pos:end="23:21">mem_buf</name></expr></argument>, <argument pos:start="23:24" pos:end="23:35"><expr pos:start="23:24" pos:end="23:35"><name pos:start="23:24" pos:end="23:35"><name pos:start="23:24" pos:end="23:26">env</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:35">spe_acc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">8</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:9">n</name> <operator pos:start="29:11" pos:end="29:12">==</operator> <literal type="number" pos:start="29:14" pos:end="29:15">34</literal></expr>)</condition> <block pos:start="29:18" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <comment type="block" pos:start="31:9" pos:end="31:37">/* SPEFSCR not implemented */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:30"><expr pos:start="33:9" pos:end="33:29"><call pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:14">memset</name><argument_list pos:start="33:15" pos:end="33:29">(<argument pos:start="33:16" pos:end="33:22"><expr pos:start="33:16" pos:end="33:22"><name pos:start="33:16" pos:end="33:22">mem_buf</name></expr></argument>, <argument pos:start="33:25" pos:end="33:25"><expr pos:start="33:25" pos:end="33:25"><literal type="number" pos:start="33:25" pos:end="33:25">0</literal></expr></argument>, <argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><literal type="number" pos:start="33:28" pos:end="33:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">4</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
