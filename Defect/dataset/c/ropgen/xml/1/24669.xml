<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24669.c" pos:tabs="8"><function pos:start="1:1" pos:end="221:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">unpack_vlcs</name><parameter_list pos:start="1:23" pos:end="7:36">(<parameter pos:start="1:24" pos:end="1:42"><decl pos:start="1:24" pos:end="1:42"><type pos:start="1:24" pos:end="1:42"><name pos:start="1:24" pos:end="1:39">Vp3DecodeContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:57">GetBitContext</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:61">gb</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:34"><decl pos:start="3:25" pos:end="3:34"><type pos:start="3:25" pos:end="3:34"><name pos:start="3:25" pos:end="3:27">VLC</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:34">table</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:51"><decl pos:start="3:37" pos:end="3:51"><type pos:start="3:37" pos:end="3:51"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:51">coeff_index</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:33"><decl pos:start="5:25" pos:end="5:33"><type pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:33">plane</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:35"><decl pos:start="7:25" pos:end="7:35"><type pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">int</name></type> <name pos:start="7:29" pos:end="7:35">eob_run</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="221:1">{<block_content pos:start="11:5" pos:end="219:19">

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name> <init pos:start="11:14" pos:end="11:16">= <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">token</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">zero_run</name> <init pos:start="15:18" pos:end="15:20">= <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">DCTELEM</name></type> <name pos:start="17:13" pos:end="17:17">coeff</name> <init pos:start="17:19" pos:end="17:21">= <expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">bits_to_get</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:20">blocks_ended</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">coeff_i</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:60"><decl pos:start="25:5" pos:end="25:59"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">num_coeffs</name> <init pos:start="25:20" pos:end="25:59">= <expr pos:start="25:22" pos:end="25:59"><name pos:start="25:22" pos:end="25:59"><name pos:start="25:22" pos:end="25:22">s</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:39">num_coded_frags</name><index pos:start="25:40" pos:end="25:46">[<expr pos:start="25:41" pos:end="25:45"><name pos:start="25:41" pos:end="25:45">plane</name></expr>]</index><index pos:start="25:47" pos:end="25:59">[<expr pos:start="25:48" pos:end="25:58"><name pos:start="25:48" pos:end="25:58">coeff_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:60"><decl pos:start="27:5" pos:end="27:59"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">int16_t</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:23">dct_tokens</name> <init pos:start="27:25" pos:end="27:59">= <expr pos:start="27:27" pos:end="27:59"><name pos:start="27:27" pos:end="27:59"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:39">dct_tokens</name><index pos:start="27:40" pos:end="27:46">[<expr pos:start="27:41" pos:end="27:45"><name pos:start="27:41" pos:end="27:45">plane</name></expr>]</index><index pos:start="27:47" pos:end="27:59">[<expr pos:start="27:48" pos:end="27:58"><name pos:start="27:48" pos:end="27:58">coeff_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:76">/* local references to structure members to avoid repeated deferences */</comment>

    <decl_stmt pos:start="33:5" pos:end="33:61"><decl pos:start="33:5" pos:end="33:60"><type pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:7">int</name> <modifier pos:start="33:9" pos:end="33:9">*</modifier></type><name pos:start="33:10" pos:end="33:28">coded_fragment_list</name> <init pos:start="33:30" pos:end="33:60">= <expr pos:start="33:32" pos:end="33:60"><name pos:start="33:32" pos:end="33:60"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:53">coded_fragment_list</name><index pos:start="33:54" pos:end="33:60">[<expr pos:start="33:55" pos:end="33:59"><name pos:start="33:55" pos:end="33:59">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:50"><decl pos:start="35:5" pos:end="35:49"><type pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:15">Vp3Fragment</name> <modifier pos:start="35:17" pos:end="35:17">*</modifier></type><name pos:start="35:18" pos:end="35:30">all_fragments</name> <init pos:start="35:32" pos:end="35:49">= <expr pos:start="35:34" pos:end="35:49"><name pos:start="35:34" pos:end="35:49"><name pos:start="35:34" pos:end="35:34">s</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:49">all_fragments</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><call pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:12">VLC_TYPE</name> <argument_list pos:start="37:14" pos:end="37:25">(<argument pos:start="37:15" pos:end="37:24"><expr pos:start="37:15" pos:end="37:24"><operator pos:start="37:15" pos:end="37:15">*</operator><name pos:start="37:16" pos:end="37:24">vlc_table</name></expr></argument>)</argument_list></call><index pos:start="37:26" pos:end="37:28">[<expr pos:start="37:27" pos:end="37:27"><literal type="number" pos:start="37:27" pos:end="37:27">2</literal></expr>]</index> <operator pos:start="37:30" pos:end="37:30">=</operator> <name pos:start="37:32" pos:end="37:43"><name pos:start="37:32" pos:end="37:36">table</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:43">table</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="43:99"><if pos:start="41:5" pos:end="43:99">if <condition pos:start="41:8" pos:end="41:23">(<expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:18">num_coeffs</name> <operator pos:start="41:20" pos:end="41:20">&lt;</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:99"><block_content pos:start="43:9" pos:end="43:99">

        <expr_stmt pos:start="43:9" pos:end="43:99"><expr pos:start="43:9" pos:end="43:98"><call pos:start="43:9" pos:end="43:98"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:98">(<argument pos:start="43:16" pos:end="43:23"><expr pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:23"><name pos:start="43:16" pos:end="43:16">s</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:23">avctx</name></name></expr></argument>, <argument pos:start="43:26" pos:end="43:37"><expr pos:start="43:26" pos:end="43:37"><name pos:start="43:26" pos:end="43:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:40" pos:end="43:84"><expr pos:start="43:40" pos:end="43:84"><literal type="string" pos:start="43:40" pos:end="43:84">"Invalid number of coefficents at level %d\n"</literal></expr></argument>, <argument pos:start="43:87" pos:end="43:97"><expr pos:start="43:87" pos:end="43:97"><name pos:start="43:87" pos:end="43:97">coeff_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="59:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:29">(<expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:15">eob_run</name> <operator pos:start="47:17" pos:end="47:17">&gt;</operator> <name pos:start="47:19" pos:end="47:28">num_coeffs</name></expr>)</condition> <block pos:start="47:31" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:30">

        <expr_stmt pos:start="49:9" pos:end="49:44"><expr pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:15">coeff_i</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:30">blocks_ended</name> <operator pos:start="49:32" pos:end="49:32">=</operator> <name pos:start="49:34" pos:end="49:43">num_coeffs</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:15">eob_run</name> <operator pos:start="51:17" pos:end="51:18">-=</operator> <name pos:start="51:20" pos:end="51:29">num_coeffs</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="59:5">else <block pos:start="53:12" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:20">

        <expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:15">coeff_i</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:30">blocks_ended</name> <operator pos:start="55:32" pos:end="55:32">=</operator> <name pos:start="55:34" pos:end="55:40">eob_run</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:20"><expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:15">eob_run</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="line" pos:start="63:5" pos:end="63:69">// insert fake EOB token to cover the split between planes or zzi</comment>

    <if_stmt pos:start="65:5" pos:end="67:44"><if pos:start="65:5" pos:end="67:44">if <condition pos:start="65:8" pos:end="65:21">(<expr pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:20">blocks_ended</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:44"><block_content pos:start="67:9" pos:end="67:44">

        <expr_stmt pos:start="67:9" pos:end="67:44"><expr pos:start="67:9" pos:end="67:43"><name pos:start="67:9" pos:end="67:23"><name pos:start="67:9" pos:end="67:18">dct_tokens</name><index pos:start="67:19" pos:end="67:23">[<expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:20">j</name><operator pos:start="67:21" pos:end="67:22">++</operator></expr>]</index></name> <operator pos:start="67:25" pos:end="67:25">=</operator> <name pos:start="67:27" pos:end="67:38">blocks_ended</name> <operator pos:start="67:40" pos:end="67:41">&lt;&lt;</operator> <literal type="number" pos:start="67:43" pos:end="67:43">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <while pos:start="71:5" pos:end="185:5">while <condition pos:start="71:11" pos:end="71:57">(<expr pos:start="71:12" pos:end="71:56"><name pos:start="71:12" pos:end="71:54"><name pos:start="71:12" pos:end="71:18">coeff_i</name> <argument_list type="generic" pos:start="71:20" pos:end="71:54">&lt; <argument pos:start="71:22" pos:end="71:52"><expr pos:start="71:22" pos:end="71:52"><name pos:start="71:22" pos:end="71:31">num_coeffs</name> <operator pos:start="71:33" pos:end="71:34">&amp;&amp;</operator> <name pos:start="71:36" pos:end="71:48">get_bits_left</name><operator pos:start="71:49" pos:end="71:49">(</operator><name pos:start="71:50" pos:end="71:51">gb</name><operator pos:start="71:52" pos:end="71:52">)</operator></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="71:56" pos:end="71:56">0</literal></expr>)</condition> <block pos:start="71:59" pos:end="185:5">{<block_content pos:start="75:13" pos:end="183:13">

            <comment type="block" pos:start="73:13" pos:end="73:43">/* decode a VLC into a token */</comment>

            <expr_stmt pos:start="75:13" pos:end="75:51"><expr pos:start="75:13" pos:end="75:50"><name pos:start="75:13" pos:end="75:17">token</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:50"><name pos:start="75:21" pos:end="75:28">get_vlc2</name><argument_list pos:start="75:29" pos:end="75:50">(<argument pos:start="75:30" pos:end="75:31"><expr pos:start="75:30" pos:end="75:31"><name pos:start="75:30" pos:end="75:31">gb</name></expr></argument>, <argument pos:start="75:34" pos:end="75:42"><expr pos:start="75:34" pos:end="75:42"><name pos:start="75:34" pos:end="75:42">vlc_table</name></expr></argument>, <argument pos:start="75:45" pos:end="75:46"><expr pos:start="75:45" pos:end="75:46"><literal type="number" pos:start="75:45" pos:end="75:46">11</literal></expr></argument>, <argument pos:start="75:49" pos:end="75:49"><expr pos:start="75:49" pos:end="75:49"><literal type="number" pos:start="75:49" pos:end="75:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="77:13" pos:end="77:80">/* use the token to get a zero run, a coefficient, and an eob run */</comment>

            <if_stmt pos:start="79:13" pos:end="183:13"><if pos:start="79:13" pos:end="115:13">if <condition pos:start="79:16" pos:end="79:27">(<expr pos:start="79:17" pos:end="79:26"><name pos:start="79:17" pos:end="79:21">token</name> <operator pos:start="79:23" pos:end="79:24">&lt;=</operator> <literal type="number" pos:start="79:26" pos:end="79:26">6</literal></expr>)</condition> <block pos:start="79:29" pos:end="115:13">{<block_content pos:start="81:17" pos:end="113:17">

                <expr_stmt pos:start="81:17" pos:end="81:46"><expr pos:start="81:17" pos:end="81:45"><name pos:start="81:17" pos:end="81:23">eob_run</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:45"><name pos:start="81:27" pos:end="81:38">eob_run_base</name><index pos:start="81:39" pos:end="81:45">[<expr pos:start="81:40" pos:end="81:44"><name pos:start="81:40" pos:end="81:44">token</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="85:69"><if pos:start="83:17" pos:end="85:69">if <condition pos:start="83:20" pos:end="83:44">(<expr pos:start="83:21" pos:end="83:43"><name pos:start="83:21" pos:end="83:43"><name pos:start="83:21" pos:end="83:36">eob_run_get_bits</name><index pos:start="83:37" pos:end="83:43">[<expr pos:start="83:38" pos:end="83:42"><name pos:start="83:38" pos:end="83:42">token</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:69"><block_content pos:start="85:21" pos:end="85:69">

                    <expr_stmt pos:start="85:21" pos:end="85:69"><expr pos:start="85:21" pos:end="85:68"><name pos:start="85:21" pos:end="85:27">eob_run</name> <operator pos:start="85:29" pos:end="85:30">+=</operator> <call pos:start="85:32" pos:end="85:68"><name pos:start="85:32" pos:end="85:39">get_bits</name><argument_list pos:start="85:40" pos:end="85:68">(<argument pos:start="85:41" pos:end="85:42"><expr pos:start="85:41" pos:end="85:42"><name pos:start="85:41" pos:end="85:42">gb</name></expr></argument>, <argument pos:start="85:45" pos:end="85:67"><expr pos:start="85:45" pos:end="85:67"><name pos:start="85:45" pos:end="85:67"><name pos:start="85:45" pos:end="85:60">eob_run_get_bits</name><index pos:start="85:61" pos:end="85:67">[<expr pos:start="85:62" pos:end="85:66"><name pos:start="85:62" pos:end="85:66">token</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <comment type="line" pos:start="89:17" pos:end="89:72">// record only the number of blocks ended in this plane,</comment>

                <comment type="line" pos:start="91:17" pos:end="91:64">// any spill will be recorded in the next plane.</comment>

                <if_stmt pos:start="93:17" pos:end="113:17"><if pos:start="93:17" pos:end="103:17">if <condition pos:start="93:20" pos:end="93:51">(<expr pos:start="93:21" pos:end="93:50"><name pos:start="93:21" pos:end="93:27">eob_run</name> <operator pos:start="93:29" pos:end="93:29">&gt;</operator> <name pos:start="93:31" pos:end="93:40">num_coeffs</name> <operator pos:start="93:42" pos:end="93:42">-</operator> <name pos:start="93:44" pos:end="93:50">coeff_i</name></expr>)</condition> <block pos:start="93:53" pos:end="103:17">{<block_content pos:start="95:21" pos:end="101:49">

                    <expr_stmt pos:start="95:21" pos:end="95:70"><expr pos:start="95:21" pos:end="95:69"><name pos:start="95:21" pos:end="95:35"><name pos:start="95:21" pos:end="95:30">dct_tokens</name><index pos:start="95:31" pos:end="95:35">[<expr pos:start="95:32" pos:end="95:34"><name pos:start="95:32" pos:end="95:32">j</name><operator pos:start="95:33" pos:end="95:34">++</operator></expr>]</index></name> <operator pos:start="95:37" pos:end="95:37">=</operator> <call pos:start="95:39" pos:end="95:69"><name pos:start="95:39" pos:end="95:47">TOKEN_EOB</name><argument_list pos:start="95:48" pos:end="95:69">(<argument pos:start="95:49" pos:end="95:68"><expr pos:start="95:49" pos:end="95:68"><name pos:start="95:49" pos:end="95:58">num_coeffs</name> <operator pos:start="95:60" pos:end="95:60">-</operator> <name pos:start="95:62" pos:end="95:68">coeff_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:59"><expr pos:start="97:21" pos:end="97:58"><name pos:start="97:21" pos:end="97:32">blocks_ended</name>   <operator pos:start="97:36" pos:end="97:37">+=</operator> <name pos:start="97:39" pos:end="97:48">num_coeffs</name> <operator pos:start="97:50" pos:end="97:50">-</operator> <name pos:start="97:52" pos:end="97:58">coeff_i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:59"><expr pos:start="99:21" pos:end="99:58"><name pos:start="99:21" pos:end="99:27">eob_run</name>        <operator pos:start="99:36" pos:end="99:37">-=</operator> <name pos:start="99:39" pos:end="99:48">num_coeffs</name> <operator pos:start="99:50" pos:end="99:50">-</operator> <name pos:start="99:52" pos:end="99:58">coeff_i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:49"><expr pos:start="101:21" pos:end="101:48"><name pos:start="101:21" pos:end="101:27">coeff_i</name>         <operator pos:start="101:37" pos:end="101:37">=</operator> <name pos:start="101:39" pos:end="101:48">num_coeffs</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="103:19" pos:end="113:17">else <block pos:start="103:24" pos:end="113:17">{<block_content pos:start="105:21" pos:end="111:32">

                    <expr_stmt pos:start="105:21" pos:end="105:57"><expr pos:start="105:21" pos:end="105:56"><name pos:start="105:21" pos:end="105:35"><name pos:start="105:21" pos:end="105:30">dct_tokens</name><index pos:start="105:31" pos:end="105:35">[<expr pos:start="105:32" pos:end="105:34"><name pos:start="105:32" pos:end="105:32">j</name><operator pos:start="105:33" pos:end="105:34">++</operator></expr>]</index></name> <operator pos:start="105:37" pos:end="105:37">=</operator> <call pos:start="105:39" pos:end="105:56"><name pos:start="105:39" pos:end="105:47">TOKEN_EOB</name><argument_list pos:start="105:48" pos:end="105:56">(<argument pos:start="105:49" pos:end="105:55"><expr pos:start="105:49" pos:end="105:55"><name pos:start="105:49" pos:end="105:55">eob_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:46"><expr pos:start="107:21" pos:end="107:45"><name pos:start="107:21" pos:end="107:32">blocks_ended</name>   <operator pos:start="107:36" pos:end="107:37">+=</operator> <name pos:start="107:39" pos:end="107:45">eob_run</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:46"><expr pos:start="109:21" pos:end="109:45"><name pos:start="109:21" pos:end="109:27">coeff_i</name>        <operator pos:start="109:36" pos:end="109:37">+=</operator> <name pos:start="109:39" pos:end="109:45">eob_run</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="111:21" pos:end="111:32"><expr pos:start="111:21" pos:end="111:31"><name pos:start="111:21" pos:end="111:27">eob_run</name> <operator pos:start="111:29" pos:end="111:29">=</operator> <literal type="number" pos:start="111:31" pos:end="111:31">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="115:15" pos:end="183:13">else <block pos:start="115:20" pos:end="183:13">{<block_content pos:start="117:17" pos:end="181:26">

                <expr_stmt pos:start="117:17" pos:end="117:52"><expr pos:start="117:17" pos:end="117:51"><name pos:start="117:17" pos:end="117:27">bits_to_get</name> <operator pos:start="117:29" pos:end="117:29">=</operator> <name pos:start="117:31" pos:end="117:51"><name pos:start="117:31" pos:end="117:44">coeff_get_bits</name><index pos:start="117:45" pos:end="117:51">[<expr pos:start="117:46" pos:end="117:50"><name pos:start="117:46" pos:end="117:50">token</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="119:17" pos:end="121:60"><if pos:start="119:17" pos:end="121:60">if <condition pos:start="119:20" pos:end="119:32">(<expr pos:start="119:21" pos:end="119:31"><name pos:start="119:21" pos:end="119:31">bits_to_get</name></expr>)</condition><block type="pseudo" pos:start="121:21" pos:end="121:60"><block_content pos:start="121:21" pos:end="121:60">

                    <expr_stmt pos:start="121:21" pos:end="121:60"><expr pos:start="121:21" pos:end="121:59"><name pos:start="121:21" pos:end="121:31">bits_to_get</name> <operator pos:start="121:33" pos:end="121:33">=</operator> <call pos:start="121:35" pos:end="121:59"><name pos:start="121:35" pos:end="121:42">get_bits</name><argument_list pos:start="121:43" pos:end="121:59">(<argument pos:start="121:44" pos:end="121:45"><expr pos:start="121:44" pos:end="121:45"><name pos:start="121:44" pos:end="121:45">gb</name></expr></argument>, <argument pos:start="121:48" pos:end="121:58"><expr pos:start="121:48" pos:end="121:58"><name pos:start="121:48" pos:end="121:58">bits_to_get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:57"><expr pos:start="123:17" pos:end="123:56"><name pos:start="123:17" pos:end="123:21">coeff</name> <operator pos:start="123:23" pos:end="123:23">=</operator> <name pos:start="123:25" pos:end="123:56"><name pos:start="123:25" pos:end="123:36">coeff_tables</name><index pos:start="123:37" pos:end="123:43">[<expr pos:start="123:38" pos:end="123:42"><name pos:start="123:38" pos:end="123:42">token</name></expr>]</index><index pos:start="123:44" pos:end="123:56">[<expr pos:start="123:45" pos:end="123:55"><name pos:start="123:45" pos:end="123:55">bits_to_get</name></expr>]</index></name></expr>;</expr_stmt>



                <expr_stmt pos:start="127:17" pos:end="127:48"><expr pos:start="127:17" pos:end="127:47"><name pos:start="127:17" pos:end="127:24">zero_run</name> <operator pos:start="127:26" pos:end="127:26">=</operator> <name pos:start="127:28" pos:end="127:47"><name pos:start="127:28" pos:end="127:40">zero_run_base</name><index pos:start="127:41" pos:end="127:47">[<expr pos:start="127:42" pos:end="127:46"><name pos:start="127:42" pos:end="127:46">token</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="129:17" pos:end="131:71"><if pos:start="129:17" pos:end="131:71">if <condition pos:start="129:20" pos:end="129:45">(<expr pos:start="129:21" pos:end="129:44"><name pos:start="129:21" pos:end="129:44"><name pos:start="129:21" pos:end="129:37">zero_run_get_bits</name><index pos:start="129:38" pos:end="129:44">[<expr pos:start="129:39" pos:end="129:43"><name pos:start="129:39" pos:end="129:43">token</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="131:21" pos:end="131:71"><block_content pos:start="131:21" pos:end="131:71">

                    <expr_stmt pos:start="131:21" pos:end="131:71"><expr pos:start="131:21" pos:end="131:70"><name pos:start="131:21" pos:end="131:28">zero_run</name> <operator pos:start="131:30" pos:end="131:31">+=</operator> <call pos:start="131:33" pos:end="131:70"><name pos:start="131:33" pos:end="131:40">get_bits</name><argument_list pos:start="131:41" pos:end="131:70">(<argument pos:start="131:42" pos:end="131:43"><expr pos:start="131:42" pos:end="131:43"><name pos:start="131:42" pos:end="131:43">gb</name></expr></argument>, <argument pos:start="131:46" pos:end="131:69"><expr pos:start="131:46" pos:end="131:69"><name pos:start="131:46" pos:end="131:69"><name pos:start="131:46" pos:end="131:62">zero_run_get_bits</name><index pos:start="131:63" pos:end="131:69">[<expr pos:start="131:64" pos:end="131:68"><name pos:start="131:64" pos:end="131:68">token</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="135:17" pos:end="157:17"><if pos:start="135:17" pos:end="139:17">if <condition pos:start="135:20" pos:end="135:29">(<expr pos:start="135:21" pos:end="135:28"><name pos:start="135:21" pos:end="135:28">zero_run</name></expr>)</condition> <block pos:start="135:31" pos:end="139:17">{<block_content pos:start="137:21" pos:end="137:70">

                    <expr_stmt pos:start="137:21" pos:end="137:70"><expr pos:start="137:21" pos:end="137:69"><name pos:start="137:21" pos:end="137:35"><name pos:start="137:21" pos:end="137:30">dct_tokens</name><index pos:start="137:31" pos:end="137:35">[<expr pos:start="137:32" pos:end="137:34"><name pos:start="137:32" pos:end="137:32">j</name><operator pos:start="137:33" pos:end="137:34">++</operator></expr>]</index></name> <operator pos:start="137:37" pos:end="137:37">=</operator> <call pos:start="137:39" pos:end="137:69"><name pos:start="137:39" pos:end="137:52">TOKEN_ZERO_RUN</name><argument_list pos:start="137:53" pos:end="137:69">(<argument pos:start="137:54" pos:end="137:58"><expr pos:start="137:54" pos:end="137:58"><name pos:start="137:54" pos:end="137:58">coeff</name></expr></argument>, <argument pos:start="137:61" pos:end="137:68"><expr pos:start="137:61" pos:end="137:68"><name pos:start="137:61" pos:end="137:68">zero_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="139:19" pos:end="157:17">else <block pos:start="139:24" pos:end="157:17">{<block_content pos:start="149:21" pos:end="155:57">

                    <comment type="line" pos:start="141:21" pos:end="141:76">// Save DC into the fragment structure. DC prediction is</comment>

                    <comment type="line" pos:start="143:21" pos:end="143:78">// done in raster order, so the actual DC can't be in with</comment>

                    <comment type="line" pos:start="145:21" pos:end="145:76">// other tokens. We still need the token in dct_tokens[]</comment>

                    <comment type="line" pos:start="147:21" pos:end="147:74">// however, or else the structure collapses on itself.</comment>

                    <if_stmt pos:start="149:21" pos:end="151:79"><if pos:start="149:21" pos:end="151:79">if <condition pos:start="149:24" pos:end="149:37">(<expr pos:start="149:25" pos:end="149:36"><operator pos:start="149:25" pos:end="149:25">!</operator><name pos:start="149:26" pos:end="149:36">coeff_index</name></expr>)</condition><block type="pseudo" pos:start="151:25" pos:end="151:79"><block_content pos:start="151:25" pos:end="151:79">

                        <expr_stmt pos:start="151:25" pos:end="151:79"><expr pos:start="151:25" pos:end="151:78"><name pos:start="151:25" pos:end="151:67"><name pos:start="151:25" pos:end="151:37">all_fragments</name><index pos:start="151:38" pos:end="151:67">[<expr pos:start="151:39" pos:end="151:66"><name pos:start="151:39" pos:end="151:66"><name pos:start="151:39" pos:end="151:57">coded_fragment_list</name><index pos:start="151:58" pos:end="151:66">[<expr pos:start="151:59" pos:end="151:65"><name pos:start="151:59" pos:end="151:65">coeff_i</name></expr>]</index></name></expr>]</index></name><operator pos:start="151:68" pos:end="151:68">.</operator><name pos:start="151:69" pos:end="151:70">dc</name> <operator pos:start="151:72" pos:end="151:72">=</operator> <name pos:start="151:74" pos:end="151:78">coeff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="155:21" pos:end="155:57"><expr pos:start="155:21" pos:end="155:56"><name pos:start="155:21" pos:end="155:35"><name pos:start="155:21" pos:end="155:30">dct_tokens</name><index pos:start="155:31" pos:end="155:35">[<expr pos:start="155:32" pos:end="155:34"><name pos:start="155:32" pos:end="155:32">j</name><operator pos:start="155:33" pos:end="155:34">++</operator></expr>]</index></name> <operator pos:start="155:37" pos:end="155:37">=</operator> <call pos:start="155:39" pos:end="155:56"><name pos:start="155:39" pos:end="155:49">TOKEN_COEFF</name><argument_list pos:start="155:50" pos:end="155:56">(<argument pos:start="155:51" pos:end="155:55"><expr pos:start="155:51" pos:end="155:55"><name pos:start="155:51" pos:end="155:55">coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="161:17" pos:end="169:17"><if pos:start="161:17" pos:end="169:17">if <condition pos:start="161:20" pos:end="161:48">(<expr pos:start="161:21" pos:end="161:47"><name pos:start="161:21" pos:end="161:31">coeff_index</name> <operator pos:start="161:33" pos:end="161:33">+</operator> <name pos:start="161:35" pos:end="161:42">zero_run</name> <operator pos:start="161:44" pos:end="161:44">&gt;</operator> <literal type="number" pos:start="161:46" pos:end="161:47">64</literal></expr>)</condition> <block pos:start="161:50" pos:end="169:17">{<block_content pos:start="163:21" pos:end="167:48">

                    <expr_stmt pos:start="163:21" pos:end="165:74"><expr pos:start="163:21" pos:end="165:73"><call pos:start="163:21" pos:end="165:73"><name pos:start="163:21" pos:end="163:26">av_log</name><argument_list pos:start="163:27" pos:end="165:73">(<argument pos:start="163:28" pos:end="163:35"><expr pos:start="163:28" pos:end="163:35"><name pos:start="163:28" pos:end="163:35"><name pos:start="163:28" pos:end="163:28">s</name><operator pos:start="163:29" pos:end="163:30">-&gt;</operator><name pos:start="163:31" pos:end="163:35">avctx</name></name></expr></argument>, <argument pos:start="163:38" pos:end="163:49"><expr pos:start="163:38" pos:end="163:49"><name pos:start="163:38" pos:end="163:49">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="163:52" pos:end="165:46"><expr pos:start="163:52" pos:end="165:46"><literal type="string" pos:start="163:52" pos:end="163:80">"Invalid zero run of %d with"</literal>

                           <literal type="string" pos:start="165:28" pos:end="165:46">" %d coeffs left\n"</literal></expr></argument>, <argument pos:start="165:49" pos:end="165:56"><expr pos:start="165:49" pos:end="165:56"><name pos:start="165:49" pos:end="165:56">zero_run</name></expr></argument>, <argument pos:start="165:59" pos:end="165:72"><expr pos:start="165:59" pos:end="165:72"><literal type="number" pos:start="165:59" pos:end="165:61">64</literal><operator pos:start="165:61" pos:end="165:61">-</operator><name pos:start="165:62" pos:end="165:72">coeff_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="167:21" pos:end="167:48"><expr pos:start="167:21" pos:end="167:47"><name pos:start="167:21" pos:end="167:28">zero_run</name> <operator pos:start="167:30" pos:end="167:30">=</operator> <literal type="number" pos:start="167:32" pos:end="167:35">64</literal> <operator pos:start="167:35" pos:end="167:35">-</operator> <name pos:start="167:37" pos:end="167:47">coeff_index</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="line" pos:start="173:17" pos:end="173:56">// zero runs code multiple coefficients,</comment>

                <comment type="line" pos:start="175:17" pos:end="175:72">// so don't try to decode coeffs for those higher levels</comment>

                <for pos:start="177:17" pos:end="179:51">for <control pos:start="177:21" pos:end="177:71">(<init pos:start="177:22" pos:end="177:39"><expr pos:start="177:22" pos:end="177:38"><name pos:start="177:22" pos:end="177:22">i</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <name pos:start="177:26" pos:end="177:36">coeff_index</name><operator pos:start="177:37" pos:end="177:37">+</operator><literal type="number" pos:start="177:38" pos:end="177:38">1</literal></expr>;</init> <condition pos:start="177:41" pos:end="177:66"><expr pos:start="177:41" pos:end="177:65"><name pos:start="177:41" pos:end="177:41">i</name> <operator pos:start="177:43" pos:end="177:44">&lt;=</operator> <name pos:start="177:46" pos:end="177:56">coeff_index</name><operator pos:start="177:57" pos:end="177:57">+</operator><name pos:start="177:58" pos:end="177:65">zero_run</name></expr>;</condition> <incr pos:start="177:68" pos:end="177:70"><expr pos:start="177:68" pos:end="177:70"><name pos:start="177:68" pos:end="177:68">i</name><operator pos:start="177:69" pos:end="177:70">++</operator></expr></incr>)</control><block type="pseudo" pos:start="179:21" pos:end="179:51"><block_content pos:start="179:21" pos:end="179:51">

                    <expr_stmt pos:start="179:21" pos:end="179:51"><expr pos:start="179:21" pos:end="179:50"><name pos:start="179:21" pos:end="179:48"><name pos:start="179:21" pos:end="179:21">s</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:38">num_coded_frags</name><index pos:start="179:39" pos:end="179:45">[<expr pos:start="179:40" pos:end="179:44"><name pos:start="179:40" pos:end="179:44">plane</name></expr>]</index><index pos:start="179:46" pos:end="179:48">[<expr pos:start="179:47" pos:end="179:47"><name pos:start="179:47" pos:end="179:47">i</name></expr>]</index></name><operator pos:start="179:49" pos:end="179:50">--</operator></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="181:17" pos:end="181:26"><expr pos:start="181:17" pos:end="181:25"><name pos:start="181:17" pos:end="181:23">coeff_i</name><operator pos:start="181:24" pos:end="181:25">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="189:5" pos:end="191:74"><if pos:start="189:5" pos:end="191:74">if <condition pos:start="189:8" pos:end="189:62">(<expr pos:start="189:9" pos:end="189:61"><name pos:start="189:9" pos:end="189:20">blocks_ended</name> <operator pos:start="189:22" pos:end="189:22">&gt;</operator> <name pos:start="189:24" pos:end="189:61"><name pos:start="189:24" pos:end="189:24">s</name><operator pos:start="189:25" pos:end="189:26">-&gt;</operator><name pos:start="189:27" pos:end="189:41">num_coded_frags</name><index pos:start="189:42" pos:end="189:48">[<expr pos:start="189:43" pos:end="189:47"><name pos:start="189:43" pos:end="189:47">plane</name></expr>]</index><index pos:start="189:49" pos:end="189:61">[<expr pos:start="189:50" pos:end="189:60"><name pos:start="189:50" pos:end="189:60">coeff_index</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:74"><block_content pos:start="191:9" pos:end="191:74">

        <expr_stmt pos:start="191:9" pos:end="191:74"><expr pos:start="191:9" pos:end="191:73"><call pos:start="191:9" pos:end="191:73"><name pos:start="191:9" pos:end="191:14">av_log</name><argument_list pos:start="191:15" pos:end="191:73">(<argument pos:start="191:16" pos:end="191:23"><expr pos:start="191:16" pos:end="191:23"><name pos:start="191:16" pos:end="191:23"><name pos:start="191:16" pos:end="191:16">s</name><operator pos:start="191:17" pos:end="191:18">-&gt;</operator><name pos:start="191:19" pos:end="191:23">avctx</name></name></expr></argument>, <argument pos:start="191:26" pos:end="191:37"><expr pos:start="191:26" pos:end="191:37"><name pos:start="191:26" pos:end="191:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:40" pos:end="191:72"><expr pos:start="191:40" pos:end="191:72"><literal type="string" pos:start="191:40" pos:end="191:72">"More blocks ended than coded!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="195:5" pos:end="195:76">// decrement the number of blocks that have higher coeffecients for each</comment>

    <comment type="line" pos:start="197:5" pos:end="197:28">// EOB run at this level</comment>

    <if_stmt pos:start="199:5" pos:end="203:57"><if pos:start="199:5" pos:end="203:57">if <condition pos:start="199:8" pos:end="199:21">(<expr pos:start="199:9" pos:end="199:20"><name pos:start="199:9" pos:end="199:20">blocks_ended</name></expr>)</condition><block type="pseudo" pos:start="201:9" pos:end="203:57"><block_content pos:start="201:9" pos:end="203:57">

        <for pos:start="201:9" pos:end="203:57">for <control pos:start="201:13" pos:end="201:44">(<init pos:start="201:14" pos:end="201:31"><expr pos:start="201:14" pos:end="201:30"><name pos:start="201:14" pos:end="201:14">i</name> <operator pos:start="201:16" pos:end="201:16">=</operator> <name pos:start="201:18" pos:end="201:28">coeff_index</name><operator pos:start="201:29" pos:end="201:29">+</operator><literal type="number" pos:start="201:30" pos:end="201:30">1</literal></expr>;</init> <condition pos:start="201:33" pos:end="201:39"><expr pos:start="201:33" pos:end="201:38"><name pos:start="201:33" pos:end="201:33">i</name> <operator pos:start="201:35" pos:end="201:35">&lt;</operator> <literal type="number" pos:start="201:37" pos:end="201:38">64</literal></expr>;</condition> <incr pos:start="201:41" pos:end="201:43"><expr pos:start="201:41" pos:end="201:43"><name pos:start="201:41" pos:end="201:41">i</name><operator pos:start="201:42" pos:end="201:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="203:13" pos:end="203:57"><block_content pos:start="203:13" pos:end="203:57">

            <expr_stmt pos:start="203:13" pos:end="203:57"><expr pos:start="203:13" pos:end="203:56"><name pos:start="203:13" pos:end="203:40"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:30">num_coded_frags</name><index pos:start="203:31" pos:end="203:37">[<expr pos:start="203:32" pos:end="203:36"><name pos:start="203:32" pos:end="203:36">plane</name></expr>]</index><index pos:start="203:38" pos:end="203:40">[<expr pos:start="203:39" pos:end="203:39"><name pos:start="203:39" pos:end="203:39">i</name></expr>]</index></name> <operator pos:start="203:42" pos:end="203:43">-=</operator> <name pos:start="203:45" pos:end="203:56">blocks_ended</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



    <comment type="line" pos:start="207:5" pos:end="207:28">// setup the next buffer</comment>

    <if_stmt pos:start="209:5" pos:end="215:57"><if pos:start="209:5" pos:end="211:61">if <condition pos:start="209:8" pos:end="209:18">(<expr pos:start="209:9" pos:end="209:17"><name pos:start="209:9" pos:end="209:13">plane</name> <operator pos:start="209:15" pos:end="209:15">&lt;</operator> <literal type="number" pos:start="209:17" pos:end="209:17">2</literal></expr>)</condition><block type="pseudo" pos:start="211:9" pos:end="211:61"><block_content pos:start="211:9" pos:end="211:61">

        <expr_stmt pos:start="211:9" pos:end="211:61"><expr pos:start="211:9" pos:end="211:60"><name pos:start="211:9" pos:end="211:43"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:21">dct_tokens</name><index pos:start="211:22" pos:end="211:30">[<expr pos:start="211:23" pos:end="211:29"><name pos:start="211:23" pos:end="211:27">plane</name><operator pos:start="211:28" pos:end="211:28">+</operator><literal type="number" pos:start="211:29" pos:end="211:29">1</literal></expr>]</index><index pos:start="211:31" pos:end="211:43">[<expr pos:start="211:32" pos:end="211:42"><name pos:start="211:32" pos:end="211:42">coeff_index</name></expr>]</index></name> <operator pos:start="211:45" pos:end="211:45">=</operator> <name pos:start="211:47" pos:end="211:56">dct_tokens</name> <operator pos:start="211:58" pos:end="211:58">+</operator> <name pos:start="211:60" pos:end="211:60">j</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="213:5" pos:end="215:57">else if <condition pos:start="213:13" pos:end="213:30">(<expr pos:start="213:14" pos:end="213:29"><name pos:start="213:14" pos:end="213:24">coeff_index</name> <operator pos:start="213:26" pos:end="213:26">&lt;</operator> <literal type="number" pos:start="213:28" pos:end="213:29">63</literal></expr>)</condition><block type="pseudo" pos:start="215:9" pos:end="215:57"><block_content pos:start="215:9" pos:end="215:57">

        <expr_stmt pos:start="215:9" pos:end="215:57"><expr pos:start="215:9" pos:end="215:56"><name pos:start="215:9" pos:end="215:39"><name pos:start="215:9" pos:end="215:9">s</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:21">dct_tokens</name><index pos:start="215:22" pos:end="215:24">[<expr pos:start="215:23" pos:end="215:23"><literal type="number" pos:start="215:23" pos:end="215:23">0</literal></expr>]</index><index pos:start="215:25" pos:end="215:39">[<expr pos:start="215:26" pos:end="215:38"><name pos:start="215:26" pos:end="215:36">coeff_index</name><operator pos:start="215:37" pos:end="215:37">+</operator><literal type="number" pos:start="215:38" pos:end="215:38">1</literal></expr>]</index></name> <operator pos:start="215:41" pos:end="215:41">=</operator> <name pos:start="215:43" pos:end="215:52">dct_tokens</name> <operator pos:start="215:54" pos:end="215:54">+</operator> <name pos:start="215:56" pos:end="215:56">j</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="219:5" pos:end="219:19">return <expr pos:start="219:12" pos:end="219:18"><name pos:start="219:12" pos:end="219:18">eob_run</name></expr>;</return>

</block_content>}</block></function>
</unit>
