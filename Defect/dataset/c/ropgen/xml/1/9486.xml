<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9486.c" pos:tabs="8"><expr_stmt pos:start="1:1" pos:end="57:21"><expr pos:start="1:1" pos:end="57:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <macro pos:start="1:8" pos:end="1:27"><name pos:start="1:8" pos:end="1:17">test_speed</name><argument_list pos:start="1:18" pos:end="1:27">(<argument pos:start="1:19" pos:end="1:26">int step</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="55:9">{

    <expr pos:start="5:5" pos:end="5:41"><specifier pos:start="5:5" pos:end="5:9">const</specifier> struct <name pos:start="5:18" pos:end="5:25">pix_func</name><operator pos:start="5:26" pos:end="5:26">*</operator> <name pos:start="5:28" pos:end="5:30">pix</name> <operator pos:start="5:32" pos:end="5:32">=</operator> <name pos:start="5:34" pos:end="5:41">pix_func</name></expr>;

    <expr pos:start="7:5" pos:end="7:28"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:13">int</name> <name pos:start="7:15" pos:end="7:22">linesize</name> <operator pos:start="7:24" pos:end="7:24">=</operator> <literal type="number" pos:start="7:26" pos:end="7:28">720</literal></expr>;

    <expr pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:8">char</name> <name pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:14">empty</name><index pos:start="9:15" pos:end="9:21">[<expr pos:start="9:16" pos:end="9:20"><literal type="number" pos:start="9:16" pos:end="9:20">32768</literal></expr>]</index></name></expr>;

    <expr pos:start="11:5" pos:end="11:48"><name pos:start="11:5" pos:end="11:8">char</name><operator pos:start="11:9" pos:end="11:9">*</operator> <name pos:start="11:11" pos:end="11:12">bu</name> <operator pos:start="11:14" pos:end="11:14">=</operator><operator pos:start="11:15" pos:end="11:15">(</operator><name pos:start="11:16" pos:end="11:19">char</name><operator pos:start="11:20" pos:end="11:20">*</operator><operator pos:start="11:21" pos:end="11:21">)</operator><operator pos:start="11:22" pos:end="11:22">(</operator><operator pos:start="11:23" pos:end="11:23">(</operator><operator pos:start="11:24" pos:end="11:24">(</operator><name pos:start="11:25" pos:end="11:28">long</name><operator pos:start="11:29" pos:end="11:29">)</operator><name pos:start="11:30" pos:end="11:34">empty</name> <operator pos:start="11:36" pos:end="11:36">+</operator> <literal type="number" pos:start="11:38" pos:end="11:39">32</literal><operator pos:start="11:40" pos:end="11:40">)</operator> <operator pos:start="11:42" pos:end="11:42">&amp;</operator> <operator pos:start="11:44" pos:end="11:44">~</operator><literal type="number" pos:start="11:45" pos:end="11:47">0xf</literal><operator pos:start="11:48" pos:end="11:48">)</operator></expr>;



    <expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:7">int</name> <name pos:start="15:9" pos:end="15:11">sum</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>;



    <while pos:start="19:5" pos:end="53:24">while <condition pos:start="19:11" pos:end="19:21">(<expr pos:start="19:12" pos:end="19:20"><name pos:start="19:12" pos:end="19:20"><name pos:start="19:12" pos:end="19:14">pix</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:20">name</name></name></expr>)</condition>

    <block pos:start="21:5" pos:end="53:24">{<block_content pos:start="23:9" pos:end="53:24">

	<decl_stmt pos:start="23:9" pos:end="23:14"><decl pos:start="23:9" pos:end="23:13"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:24"><decl pos:start="25:9" pos:end="25:19"><type pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:16">uint64_t</name></type> <name pos:start="25:18" pos:end="25:19">te</name></decl>, <decl pos:start="25:22" pos:end="25:23"><type ref="prev" pos:start="25:9" pos:end="25:16"/><name pos:start="25:22" pos:end="25:23">ts</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:40"><decl pos:start="27:9" pos:end="27:39"><type pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:22">op_pixels_func</name></type> <name pos:start="27:24" pos:end="27:27">func</name> <init pos:start="27:29" pos:end="27:39">= <expr pos:start="27:31" pos:end="27:39"><name pos:start="27:31" pos:end="27:39"><name pos:start="27:31" pos:end="27:33">pix</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:39">func</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="29:9" pos:end="29:22"><decl pos:start="29:9" pos:end="29:21"><type pos:start="29:9" pos:end="29:13"><name pos:start="29:9" pos:end="29:12">char</name><modifier pos:start="29:13" pos:end="29:13">*</modifier></type> <name pos:start="29:15" pos:end="29:16">im</name> <init pos:start="29:18" pos:end="29:21">= <expr pos:start="29:20" pos:end="29:21"><name pos:start="29:20" pos:end="29:21">bu</name></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="33:9" pos:end="35:21"><if pos:start="33:9" pos:end="35:21">if <condition pos:start="33:12" pos:end="33:40">(<expr pos:start="33:13" pos:end="33:39"><operator pos:start="33:13" pos:end="33:13">!</operator><operator pos:start="33:14" pos:end="33:14">(</operator><name pos:start="33:15" pos:end="33:27"><name pos:start="33:15" pos:end="33:17">pix</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:27">mm_flags</name></name> <operator pos:start="33:29" pos:end="33:29">&amp;</operator> <name pos:start="33:31" pos:end="33:38">mm_flags</name><operator pos:start="33:39" pos:end="33:39">)</operator></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:21"><block_content pos:start="35:13" pos:end="35:21">

            <continue pos:start="35:13" pos:end="35:21">continue;</continue></block_content></block></if></if_stmt>



	<expr_stmt pos:start="39:9" pos:end="39:38"><expr pos:start="39:9" pos:end="39:37"><call pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:14">printf</name><argument_list pos:start="39:15" pos:end="39:37">(<argument pos:start="39:16" pos:end="39:25"><expr pos:start="39:16" pos:end="39:25"><literal type="string" pos:start="39:16" pos:end="39:25">"%30s... "</literal></expr></argument>, <argument pos:start="39:28" pos:end="39:36"><expr pos:start="39:28" pos:end="39:36"><name pos:start="39:28" pos:end="39:36"><name pos:start="39:28" pos:end="39:30">pix</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:36">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><call pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:14">fflush</name><argument_list pos:start="41:15" pos:end="41:22">(<argument pos:start="41:16" pos:end="41:21"><expr pos:start="41:16" pos:end="41:21"><name pos:start="41:16" pos:end="41:21">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="43:9" pos:end="43:21"><expr pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:10">ts</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:20"><name pos:start="43:14" pos:end="43:18">rdtsc</name><argument_list pos:start="43:19" pos:end="43:20">()</argument_list></call></expr>;</expr_stmt>

	<for pos:start="45:9" pos:end="53:24">for<control pos:start="45:12" pos:end="45:31">(<init pos:start="45:13" pos:end="45:16"><expr pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:13">i</name><operator pos:start="45:14" pos:end="45:14">=</operator><literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr>;</init> <condition pos:start="45:18" pos:end="45:26"><expr pos:start="45:18" pos:end="45:25"><name pos:start="45:18" pos:end="45:18">i</name><operator pos:start="45:19" pos:end="45:19">&lt;</operator><literal type="number" pos:start="45:20" pos:end="45:25">100000</literal></expr>;</condition> <incr pos:start="45:28" pos:end="45:30"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:28">i</name><operator pos:start="45:29" pos:end="45:30">++</operator></expr></incr>)</control><block pos:start="45:32" pos:end="53:24">{<block_content pos:start="47:13" pos:end="53:24">

	    <expr_stmt pos:start="47:13" pos:end="47:46"><expr pos:start="47:13" pos:end="47:45"><call pos:start="47:13" pos:end="47:45"><name pos:start="47:13" pos:end="47:16">func</name><argument_list pos:start="47:17" pos:end="47:45">(<argument pos:start="47:18" pos:end="47:19"><expr pos:start="47:18" pos:end="47:19"><name pos:start="47:18" pos:end="47:19">im</name></expr></argument>, <argument pos:start="47:22" pos:end="47:30"><expr pos:start="47:22" pos:end="47:30"><name pos:start="47:22" pos:end="47:23">im</name> <operator pos:start="47:25" pos:end="47:25">+</operator> <literal type="number" pos:start="47:27" pos:end="47:30">1000</literal></expr></argument>, <argument pos:start="47:33" pos:end="47:40"><expr pos:start="47:33" pos:end="47:40"><name pos:start="47:33" pos:end="47:40">linesize</name></expr></argument>, <argument pos:start="47:43" pos:end="47:44"><expr pos:start="47:43" pos:end="47:44"><literal type="number" pos:start="47:43" pos:end="47:44">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="49:13" pos:end="49:23"><expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:14">im</name> <operator pos:start="49:16" pos:end="49:17">+=</operator> <name pos:start="49:19" pos:end="49:22">step</name></expr>;</expr_stmt>

	    <if_stmt pos:start="51:13" pos:end="53:24"><if pos:start="51:13" pos:end="53:24">if <condition pos:start="51:16" pos:end="51:32">(<expr pos:start="51:17" pos:end="51:31"><name pos:start="51:17" pos:end="51:18">im</name> <operator pos:start="51:20" pos:end="51:20">&gt;</operator> <name pos:start="51:22" pos:end="51:23">bu</name> <operator pos:start="51:25" pos:end="51:25">+</operator> <literal type="number" pos:start="51:27" pos:end="51:31">20000</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:24"><block_content pos:start="53:17" pos:end="53:24">

		<expr_stmt pos:start="53:17" pos:end="53:24"><expr pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:18">im</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:23">bu</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt/></block_content></block></for></block_content></block></while>}</block>

	<name pos:start="57:9" pos:end="57:10">te</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:20"><name pos:start="57:14" pos:end="57:18">rdtsc</name><argument_list pos:start="57:19" pos:end="57:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:15"><expr pos:start="59:9" pos:end="59:14"><call pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:12">emms</name><argument_list pos:start="59:13" pos:end="59:14">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="61:9" pos:end="61:41"><expr pos:start="61:9" pos:end="61:40"><call pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:14">printf</name><argument_list pos:start="61:15" pos:end="61:40">(<argument pos:start="61:16" pos:end="61:23"><expr pos:start="61:16" pos:end="61:23"><literal type="string" pos:start="61:16" pos:end="61:23">"% 9d\n"</literal></expr></argument>, <argument pos:start="61:26" pos:end="61:39"><expr pos:start="61:26" pos:end="61:39"><operator pos:start="61:26" pos:end="61:26">(</operator><name pos:start="61:27" pos:end="61:29">int</name><operator pos:start="61:30" pos:end="61:30">)</operator><operator pos:start="61:31" pos:end="61:31">(</operator><name pos:start="61:32" pos:end="61:33">te</name> <operator pos:start="61:35" pos:end="61:35">-</operator> <name pos:start="61:37" pos:end="61:38">ts</name><operator pos:start="61:39" pos:end="61:39">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:11">sum</name> <operator pos:start="63:13" pos:end="63:14">+=</operator> <operator pos:start="63:16" pos:end="63:16">(</operator><name pos:start="63:17" pos:end="63:18">te</name> <operator pos:start="63:20" pos:end="63:20">-</operator> <name pos:start="63:22" pos:end="63:23">ts</name><operator pos:start="63:24" pos:end="63:24">)</operator> <operator pos:start="63:26" pos:end="63:26">/</operator> <literal type="number" pos:start="63:28" pos:end="63:33">100000</literal></expr>;</expr_stmt>

	<if_stmt pos:start="65:9" pos:end="67:21"><if pos:start="65:9" pos:end="67:21">if <condition pos:start="65:12" pos:end="65:32">(<expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:15">pix</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:25">mm_flags</name></name> <operator pos:start="65:27" pos:end="65:27">&amp;</operator> <name pos:start="65:29" pos:end="65:31">PAD</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:21"><block_content pos:start="67:13" pos:end="67:21">

            <expr_stmt pos:start="67:13" pos:end="67:21"><expr pos:start="67:13" pos:end="67:20"><call pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:16">puts</name><argument_list pos:start="67:17" pos:end="67:20">(<argument pos:start="67:18" pos:end="67:19"><expr pos:start="67:18" pos:end="67:19"><literal type="string" pos:start="67:18" pos:end="67:19">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:14"><expr pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:11">pix</name><operator pos:start="69:12" pos:end="69:13">++</operator></expr>;</expr_stmt>

    }



    printf<expr_stmt pos:start="75:11" pos:end="75:35"><expr pos:start="75:11" pos:end="75:34"><operator pos:start="75:11" pos:end="75:11">(</operator><literal type="string" pos:start="75:12" pos:end="75:28">"Total sum: %d\n"</literal><operator pos:start="75:29" pos:end="75:29">,</operator> <name pos:start="75:31" pos:end="75:33">sum</name><operator pos:start="75:34" pos:end="75:34">)</operator></expr>;</expr_stmt>

}
</unit>
