<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24388.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">pcie_pci_bridge_realize</name><parameter_list pos:start="1:36" pos:end="1:63">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:45">PCIDevice</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">d</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:55">Error</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:25">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIBridge</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">br</name> <init pos:start="5:19" pos:end="5:33">= <expr pos:start="5:21" pos:end="5:33"><call pos:start="5:21" pos:end="5:33"><name pos:start="5:21" pos:end="5:30">PCI_BRIDGE</name><argument_list pos:start="5:31" pos:end="5:33">(<argument pos:start="5:32" pos:end="5:32"><expr pos:start="5:32" pos:end="5:32"><name pos:start="5:32" pos:end="5:32">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">PCIEPCIBridge</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:26">pcie_br</name> <init pos:start="7:28" pos:end="7:51">= <expr pos:start="7:30" pos:end="7:51"><call pos:start="7:30" pos:end="7:51"><name pos:start="7:30" pos:end="7:48">PCIE_PCI_BRIDGE_DEV</name><argument_list pos:start="7:49" pos:end="7:51">(<argument pos:start="7:50" pos:end="7:50"><expr pos:start="7:50" pos:end="7:50"><name pos:start="7:50" pos:end="7:50">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>, <decl pos:start="9:13" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:15">pos</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><call pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:21">pci_bridge_initfn</name><argument_list pos:start="13:22" pos:end="13:38">(<argument pos:start="13:23" pos:end="13:23"><expr pos:start="13:23" pos:end="13:23"><name pos:start="13:23" pos:end="13:23">d</name></expr></argument>, <argument pos:start="13:26" pos:end="13:37"><expr pos:start="13:26" pos:end="13:37"><name pos:start="13:26" pos:end="13:37">TYPE_PCI_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:5">d</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:13">config</name><index pos:start="17:14" pos:end="17:32">[<expr pos:start="17:15" pos:end="17:31"><name pos:start="17:15" pos:end="17:31">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="17:34" pos:end="17:34">=</operator> <literal type="number" pos:start="17:36" pos:end="17:38">0x1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="21:41"><expr pos:start="19:5" pos:end="21:40"><call pos:start="19:5" pos:end="21:40"><name pos:start="19:5" pos:end="19:22">memory_region_init</name><argument_list pos:start="19:23" pos:end="21:40">(<argument pos:start="19:24" pos:end="19:41"><expr pos:start="19:24" pos:end="19:41"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:41"><name pos:start="19:25" pos:end="19:31">pcie_br</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:41">shpc_bar</name></name></expr></argument>, <argument pos:start="19:44" pos:end="19:52"><expr pos:start="19:44" pos:end="19:52"><call pos:start="19:44" pos:end="19:52"><name pos:start="19:44" pos:end="19:49">OBJECT</name><argument_list pos:start="19:50" pos:end="19:52">(<argument pos:start="19:51" pos:end="19:51"><expr pos:start="19:51" pos:end="19:51"><name pos:start="19:51" pos:end="19:51">d</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:55" pos:end="19:64"><expr pos:start="19:55" pos:end="19:64"><literal type="string" pos:start="19:55" pos:end="19:64">"shpc-bar"</literal></expr></argument>,

                       <argument pos:start="21:24" pos:end="21:39"><expr pos:start="21:24" pos:end="21:39"><call pos:start="21:24" pos:end="21:39"><name pos:start="21:24" pos:end="21:36">shpc_bar_size</name><argument_list pos:start="21:37" pos:end="21:39">(<argument pos:start="21:38" pos:end="21:38"><expr pos:start="21:38" pos:end="21:38"><name pos:start="21:38" pos:end="21:38">d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:65"><expr pos:start="23:5" pos:end="23:64"><name pos:start="23:5" pos:end="23:6">rc</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:64"><name pos:start="23:10" pos:end="23:18">shpc_init</name><argument_list pos:start="23:19" pos:end="23:64">(<argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">d</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><operator pos:start="23:23" pos:end="23:23">&amp;</operator><name pos:start="23:24" pos:end="23:34"><name pos:start="23:24" pos:end="23:25">br</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:34">sec_bus</name></name></expr></argument>, <argument pos:start="23:37" pos:end="23:54"><expr pos:start="23:37" pos:end="23:54"><operator pos:start="23:37" pos:end="23:37">&amp;</operator><name pos:start="23:38" pos:end="23:54"><name pos:start="23:38" pos:end="23:44">pcie_br</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:54">shpc_bar</name></name></expr></argument>, <argument pos:start="23:57" pos:end="23:57"><expr pos:start="23:57" pos:end="23:57"><literal type="number" pos:start="23:57" pos:end="23:57">0</literal></expr></argument>, <argument pos:start="23:60" pos:end="23:63"><expr pos:start="23:60" pos:end="23:63"><name pos:start="23:60" pos:end="23:63">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:11">(<expr pos:start="25:9" pos:end="25:10"><name pos:start="25:9" pos:end="25:10">rc</name></expr>)</condition> <block pos:start="25:13" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:19">

        <goto pos:start="27:9" pos:end="27:19">goto <name pos:start="27:14" pos:end="27:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:63"><expr pos:start="33:5" pos:end="33:62"><name pos:start="33:5" pos:end="33:6">rc</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:62"><name pos:start="33:10" pos:end="33:22">pcie_cap_init</name><argument_list pos:start="33:23" pos:end="33:62">(<argument pos:start="33:24" pos:end="33:24"><expr pos:start="33:24" pos:end="33:24"><name pos:start="33:24" pos:end="33:24">d</name></expr></argument>, <argument pos:start="33:27" pos:end="33:27"><expr pos:start="33:27" pos:end="33:27"><literal type="number" pos:start="33:27" pos:end="33:27">0</literal></expr></argument>, <argument pos:start="33:30" pos:end="33:52"><expr pos:start="33:30" pos:end="33:52"><name pos:start="33:30" pos:end="33:52">PCI_EXP_TYPE_PCI_BRIDGE</name></expr></argument>, <argument pos:start="33:55" pos:end="33:55"><expr pos:start="33:55" pos:end="33:55"><literal type="number" pos:start="33:55" pos:end="33:55">0</literal></expr></argument>, <argument pos:start="33:58" pos:end="33:61"><expr pos:start="33:58" pos:end="33:61"><name pos:start="33:58" pos:end="33:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">rc</name> <operator pos:start="35:12" pos:end="35:12">&lt;</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>)</condition> <block pos:start="35:17" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:23">

        <goto pos:start="37:9" pos:end="37:23">goto <name pos:start="37:14" pos:end="37:22">cap_error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:71"><expr pos:start="43:5" pos:end="43:70"><name pos:start="43:5" pos:end="43:7">pos</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:70"><name pos:start="43:11" pos:end="43:28">pci_add_capability</name><argument_list pos:start="43:29" pos:end="43:70">(<argument pos:start="43:30" pos:end="43:30"><expr pos:start="43:30" pos:end="43:30"><name pos:start="43:30" pos:end="43:30">d</name></expr></argument>, <argument pos:start="43:33" pos:end="43:45"><expr pos:start="43:33" pos:end="43:45"><name pos:start="43:33" pos:end="43:45">PCI_CAP_ID_PM</name></expr></argument>, <argument pos:start="43:48" pos:end="43:48"><expr pos:start="43:48" pos:end="43:48"><literal type="number" pos:start="43:48" pos:end="43:48">0</literal></expr></argument>, <argument pos:start="43:51" pos:end="43:63"><expr pos:start="43:51" pos:end="43:63"><name pos:start="43:51" pos:end="43:63">PCI_PM_SIZEOF</name></expr></argument>, <argument pos:start="43:66" pos:end="43:69"><expr pos:start="43:66" pos:end="43:69"><name pos:start="43:66" pos:end="43:69">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:16">(<expr pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:11">pos</name> <operator pos:start="45:13" pos:end="45:13">&lt;</operator> <literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr>)</condition> <block pos:start="45:18" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:22">

        <goto pos:start="47:9" pos:end="47:22">goto <name pos:start="47:14" pos:end="47:21">pm_error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:5">d</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:10">exp</name><operator pos:start="51:11" pos:end="51:11">.</operator><name pos:start="51:12" pos:end="51:17">pm_cap</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:23">pos</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:52"><expr pos:start="53:5" pos:end="53:51"><call pos:start="53:5" pos:end="53:51"><name pos:start="53:5" pos:end="53:16">pci_set_word</name><argument_list pos:start="53:17" pos:end="53:51">(<argument pos:start="53:18" pos:end="53:45"><expr pos:start="53:18" pos:end="53:45"><name pos:start="53:18" pos:end="53:26"><name pos:start="53:18" pos:end="53:18">d</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:26">config</name></name> <operator pos:start="53:28" pos:end="53:28">+</operator> <name pos:start="53:30" pos:end="53:32">pos</name> <operator pos:start="53:34" pos:end="53:34">+</operator> <name pos:start="53:36" pos:end="53:45">PCI_PM_PMC</name></expr></argument>, <argument pos:start="53:48" pos:end="53:50"><expr pos:start="53:48" pos:end="53:50"><literal type="number" pos:start="53:48" pos:end="53:50">0x3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><call pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:24">pcie_cap_arifwd_init</name><argument_list pos:start="57:25" pos:end="57:27">(<argument pos:start="57:26" pos:end="57:26"><expr pos:start="57:26" pos:end="57:26"><name pos:start="57:26" pos:end="57:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:28"><expr pos:start="59:5" pos:end="59:27"><call pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:24">pcie_cap_deverr_init</name><argument_list pos:start="59:25" pos:end="59:27">(<argument pos:start="59:26" pos:end="59:26"><expr pos:start="59:26" pos:end="59:26"><name pos:start="59:26" pos:end="59:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:68"><expr pos:start="63:5" pos:end="63:67"><name pos:start="63:5" pos:end="63:6">rc</name> <operator pos:start="63:8" pos:end="63:8">=</operator> <call pos:start="63:10" pos:end="63:67"><name pos:start="63:10" pos:end="63:22">pcie_aer_init</name><argument_list pos:start="63:23" pos:end="63:67">(<argument pos:start="63:24" pos:end="63:24"><expr pos:start="63:24" pos:end="63:24"><name pos:start="63:24" pos:end="63:24">d</name></expr></argument>, <argument pos:start="63:27" pos:end="63:37"><expr pos:start="63:27" pos:end="63:37"><name pos:start="63:27" pos:end="63:37">PCI_ERR_VER</name></expr></argument>, <argument pos:start="63:40" pos:end="63:44"><expr pos:start="63:40" pos:end="63:44"><literal type="number" pos:start="63:40" pos:end="63:44">0x100</literal></expr></argument>, <argument pos:start="63:47" pos:end="63:60"><expr pos:start="63:47" pos:end="63:60"><name pos:start="63:47" pos:end="63:60">PCI_ERR_SIZEOF</name></expr></argument>, <argument pos:start="63:63" pos:end="63:66"><expr pos:start="63:63" pos:end="63:66"><name pos:start="63:63" pos:end="63:66">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:15">(<expr pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:10">rc</name> <operator pos:start="65:12" pos:end="65:12">&lt;</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>)</condition> <block pos:start="65:17" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:23">

        <goto pos:start="67:9" pos:end="67:23">goto <name pos:start="67:14" pos:end="67:22">aer_error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="83:5"><if pos:start="73:5" pos:end="83:5">if <condition pos:start="73:8" pos:end="73:40">(<expr pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:15">pcie_br</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:20">msi</name></name> <operator pos:start="73:22" pos:end="73:23">!=</operator> <name pos:start="73:25" pos:end="73:39">ON_OFF_AUTO_OFF</name></expr>)</condition> <block pos:start="73:42" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:9">

        <expr_stmt pos:start="75:9" pos:end="75:49"><expr pos:start="75:9" pos:end="75:48"><name pos:start="75:9" pos:end="75:10">rc</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <call pos:start="75:14" pos:end="75:48"><name pos:start="75:14" pos:end="75:21">msi_init</name><argument_list pos:start="75:22" pos:end="75:48">(<argument pos:start="75:23" pos:end="75:23"><expr pos:start="75:23" pos:end="75:23"><name pos:start="75:23" pos:end="75:23">d</name></expr></argument>, <argument pos:start="75:26" pos:end="75:26"><expr pos:start="75:26" pos:end="75:26"><literal type="number" pos:start="75:26" pos:end="75:26">0</literal></expr></argument>, <argument pos:start="75:29" pos:end="75:29"><expr pos:start="75:29" pos:end="75:29"><literal type="number" pos:start="75:29" pos:end="75:29">1</literal></expr></argument>, <argument pos:start="75:32" pos:end="75:35"><expr pos:start="75:32" pos:end="75:35"><name pos:start="75:32" pos:end="75:35">true</name></expr></argument>, <argument pos:start="75:38" pos:end="75:41"><expr pos:start="75:38" pos:end="75:41"><name pos:start="75:38" pos:end="75:41">true</name></expr></argument>, <argument pos:start="75:44" pos:end="75:47"><expr pos:start="75:44" pos:end="75:47"><name pos:start="75:44" pos:end="75:47">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:19">(<expr pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:14">rc</name> <operator pos:start="77:16" pos:end="77:16">&lt;</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>)</condition> <block pos:start="77:21" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:27">

            <goto pos:start="79:13" pos:end="79:27">goto <name pos:start="79:18" pos:end="79:26">msi_error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="87:71"><expr pos:start="85:5" pos:end="87:70"><call pos:start="85:5" pos:end="87:70"><name pos:start="85:5" pos:end="85:20">pci_register_bar</name><argument_list pos:start="85:21" pos:end="87:70">(<argument pos:start="85:22" pos:end="85:22"><expr pos:start="85:22" pos:end="85:22"><name pos:start="85:22" pos:end="85:22">d</name></expr></argument>, <argument pos:start="85:25" pos:end="85:25"><expr pos:start="85:25" pos:end="85:25"><literal type="number" pos:start="85:25" pos:end="85:25">0</literal></expr></argument>, <argument pos:start="85:28" pos:end="87:49"><expr pos:start="85:28" pos:end="87:49"><name pos:start="85:28" pos:end="85:56">PCI_BASE_ADDRESS_SPACE_MEMORY</name> <operator pos:start="85:58" pos:end="85:58">|</operator>

                     <name pos:start="87:22" pos:end="87:49">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr></argument>, <argument pos:start="87:52" pos:end="87:69"><expr pos:start="87:52" pos:end="87:69"><operator pos:start="87:52" pos:end="87:52">&amp;</operator><name pos:start="87:53" pos:end="87:69"><name pos:start="87:53" pos:end="87:59">pcie_br</name><operator pos:start="87:60" pos:end="87:61">-&gt;</operator><name pos:start="87:62" pos:end="87:69">shpc_bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:11">return;</return>



<label pos:start="93:1" pos:end="93:10"><name pos:start="93:1" pos:end="93:9">msi_error</name>:</label>

    <expr_stmt pos:start="95:5" pos:end="95:21"><expr pos:start="95:5" pos:end="95:20"><call pos:start="95:5" pos:end="95:20"><name pos:start="95:5" pos:end="95:17">pcie_aer_exit</name><argument_list pos:start="95:18" pos:end="95:20">(<argument pos:start="95:19" pos:end="95:19"><expr pos:start="95:19" pos:end="95:19"><name pos:start="95:19" pos:end="95:19">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="97:1" pos:end="97:10"><name pos:start="97:1" pos:end="97:9">aer_error</name>:</label>

<label pos:start="99:1" pos:end="99:9"><name pos:start="99:1" pos:end="99:8">pm_error</name>:</label>

    <expr_stmt pos:start="101:5" pos:end="101:21"><expr pos:start="101:5" pos:end="101:20"><call pos:start="101:5" pos:end="101:20"><name pos:start="101:5" pos:end="101:17">pcie_cap_exit</name><argument_list pos:start="101:18" pos:end="101:20">(<argument pos:start="101:19" pos:end="101:19"><expr pos:start="101:19" pos:end="101:19"><name pos:start="101:19" pos:end="101:19">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="103:1" pos:end="103:10"><name pos:start="103:1" pos:end="103:9">cap_error</name>:</label>

    <expr_stmt pos:start="105:5" pos:end="105:17"><expr pos:start="105:5" pos:end="105:16"><call pos:start="105:5" pos:end="105:16"><name pos:start="105:5" pos:end="105:13">shpc_free</name><argument_list pos:start="105:14" pos:end="105:16">(<argument pos:start="105:15" pos:end="105:15"><expr pos:start="105:15" pos:end="105:15"><name pos:start="105:15" pos:end="105:15">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="107:1" pos:end="107:6"><name pos:start="107:1" pos:end="107:5">error</name>:</label>

    <expr_stmt pos:start="109:5" pos:end="109:25"><expr pos:start="109:5" pos:end="109:24"><call pos:start="109:5" pos:end="109:24"><name pos:start="109:5" pos:end="109:21">pci_bridge_exitfn</name><argument_list pos:start="109:22" pos:end="109:24">(<argument pos:start="109:23" pos:end="109:23"><expr pos:start="109:23" pos:end="109:23"><name pos:start="109:23" pos:end="109:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
