<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9151.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">omap_clk_init</name><parameter_list pos:start="1:19" pos:end="1:48">(<parameter pos:start="1:20" pos:end="1:47"><decl pos:start="1:20" pos:end="1:47"><type pos:start="1:20" pos:end="1:47"><name pos:start="1:20" pos:end="1:42"><name pos:start="1:20" pos:end="1:25">struct</name> <name pos:start="1:27" pos:end="1:42">omap_mpu_state_s</name></name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">mpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:14">clk</name></name> <modifier pos:start="5:16" pos:end="5:16">*</modifier><modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">i</name></decl>, <decl pos:start="5:21" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">j</name></decl>, <decl pos:start="5:25" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:26">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">flag</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="35:15"><if pos:start="13:5" pos:end="15:32">if <condition pos:start="13:8" pos:end="13:28">(<expr pos:start="13:9" pos:end="13:27"><call pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:22">cpu_is_omap310</name><argument_list pos:start="13:23" pos:end="13:27">(<argument pos:start="13:24" pos:end="13:26"><expr pos:start="13:24" pos:end="13:26"><name pos:start="13:24" pos:end="13:26">mpu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:32"><block_content pos:start="15:9" pos:end="15:32">

        <expr_stmt pos:start="15:9" pos:end="15:32"><expr pos:start="15:9" pos:end="15:31"><name pos:start="15:9" pos:end="15:12">flag</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <name pos:start="15:16" pos:end="15:31">CLOCK_IN_OMAP310</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="17:5" pos:end="19:33">else if <condition pos:start="17:13" pos:end="17:34">(<expr pos:start="17:14" pos:end="17:33"><call pos:start="17:14" pos:end="17:33"><name pos:start="17:14" pos:end="17:28">cpu_is_omap1510</name><argument_list pos:start="17:29" pos:end="17:33">(<argument pos:start="17:30" pos:end="17:32"><expr pos:start="17:30" pos:end="17:32"><name pos:start="17:30" pos:end="17:32">mpu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:33"><block_content pos:start="19:9" pos:end="19:33">

        <expr_stmt pos:start="19:9" pos:end="19:33"><expr pos:start="19:9" pos:end="19:32"><name pos:start="19:9" pos:end="19:12">flag</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:32">CLOCK_IN_OMAP1510</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="21:5" pos:end="23:33">else if <condition pos:start="21:13" pos:end="21:58">(<expr pos:start="21:14" pos:end="21:57"><call pos:start="21:14" pos:end="21:33"><name pos:start="21:14" pos:end="21:28">cpu_is_omap2410</name><argument_list pos:start="21:29" pos:end="21:33">(<argument pos:start="21:30" pos:end="21:32"><expr pos:start="21:30" pos:end="21:32"><name pos:start="21:30" pos:end="21:32">mpu</name></expr></argument>)</argument_list></call> <operator pos:start="21:35" pos:end="21:36">||</operator> <call pos:start="21:38" pos:end="21:57"><name pos:start="21:38" pos:end="21:52">cpu_is_omap2420</name><argument_list pos:start="21:53" pos:end="21:57">(<argument pos:start="21:54" pos:end="21:56"><expr pos:start="21:54" pos:end="21:56"><name pos:start="21:54" pos:end="21:56">mpu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:33"><block_content pos:start="23:9" pos:end="23:33">

        <expr_stmt pos:start="23:9" pos:end="23:33"><expr pos:start="23:9" pos:end="23:32"><name pos:start="23:9" pos:end="23:12">flag</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:32">CLOCK_IN_OMAP242X</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="25:5" pos:end="27:33">else if <condition pos:start="25:13" pos:end="25:34">(<expr pos:start="25:14" pos:end="25:33"><call pos:start="25:14" pos:end="25:33"><name pos:start="25:14" pos:end="25:28">cpu_is_omap2430</name><argument_list pos:start="25:29" pos:end="25:33">(<argument pos:start="25:30" pos:end="25:32"><expr pos:start="25:30" pos:end="25:32"><name pos:start="25:30" pos:end="25:32">mpu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:33"><block_content pos:start="27:9" pos:end="27:33">

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:12">flag</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:32">CLOCK_IN_OMAP243X</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="29:5" pos:end="31:33">else if <condition pos:start="29:13" pos:end="29:34">(<expr pos:start="29:14" pos:end="29:33"><call pos:start="29:14" pos:end="29:33"><name pos:start="29:14" pos:end="29:28">cpu_is_omap3430</name><argument_list pos:start="29:29" pos:end="29:33">(<argument pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:32">mpu</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:33"><block_content pos:start="31:9" pos:end="31:33">

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:12">flag</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:32">CLOCK_IN_OMAP243X</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="33:5" pos:end="35:15">else<block type="pseudo" pos:start="35:9" pos:end="35:15"><block_content pos:start="35:9" pos:end="35:15">

        <return pos:start="35:9" pos:end="35:15">return;</return></block_content></block></else></if_stmt>



    <for pos:start="39:5" pos:end="43:21">for <control pos:start="39:9" pos:end="39:46">(<init pos:start="39:10" pos:end="39:36"><expr pos:start="39:10" pos:end="39:24"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:24">onchip_clks</name></expr><operator pos:start="39:25" pos:end="39:25">,</operator> <expr pos:start="39:27" pos:end="39:35"><name pos:start="39:27" pos:end="39:31">count</name> <operator pos:start="39:33" pos:end="39:33">=</operator> <literal type="number" pos:start="39:35" pos:end="39:35">0</literal></expr>;</init> <condition pos:start="39:38" pos:end="39:40"><expr pos:start="39:38" pos:end="39:39"><operator pos:start="39:38" pos:end="39:38">*</operator><name pos:start="39:39" pos:end="39:39">i</name></expr>;</condition> <incr pos:start="39:42" pos:end="39:45"><expr pos:start="39:42" pos:end="39:45"><name pos:start="39:42" pos:end="39:42">i</name> <operator pos:start="39:44" pos:end="39:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:9" pos:end="43:21"><block_content pos:start="41:9" pos:end="43:21">

        <if_stmt pos:start="41:9" pos:end="43:21"><if pos:start="41:9" pos:end="43:21">if <condition pos:start="41:12" pos:end="41:31">(<expr pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:23"><operator pos:start="41:13" pos:end="41:13">(</operator><operator pos:start="41:14" pos:end="41:14">*</operator><name pos:start="41:15" pos:end="41:15">i</name><operator pos:start="41:16" pos:end="41:16">)</operator><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">flags</name></name> <operator pos:start="41:25" pos:end="41:25">&amp;</operator> <name pos:start="41:27" pos:end="41:30">flag</name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:21"><block_content pos:start="43:13" pos:end="43:21">

            <expr_stmt pos:start="43:13" pos:end="43:21"><expr pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:17">count</name> <operator pos:start="43:19" pos:end="43:20">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt pos:start="45:5" pos:end="45:75"><expr pos:start="45:5" pos:end="45:74"><name pos:start="45:5" pos:end="45:13"><name pos:start="45:5" pos:end="45:7">mpu</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:13">clks</name></name> <operator pos:start="45:15" pos:end="45:15">=</operator> <operator pos:start="45:17" pos:end="45:17">(</operator>struct <name pos:start="45:25" pos:end="45:27">clk</name> <operator pos:start="45:29" pos:end="45:29">*</operator><operator pos:start="45:30" pos:end="45:30">)</operator> <call pos:start="45:32" pos:end="45:74"><name pos:start="45:32" pos:end="45:40">g_malloc0</name><argument_list pos:start="45:41" pos:end="45:74">(<argument pos:start="45:42" pos:end="45:73"><expr pos:start="45:42" pos:end="45:73"><sizeof pos:start="45:42" pos:end="45:59">sizeof<argument_list pos:start="45:48" pos:end="45:59">(<argument pos:start="45:49" pos:end="45:58"><expr pos:start="45:49" pos:end="45:58">struct <name pos:start="45:56" pos:end="45:58">clk</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:61" pos:end="45:61">*</operator> <operator pos:start="45:63" pos:end="45:63">(</operator><name pos:start="45:64" pos:end="45:68">count</name> <operator pos:start="45:70" pos:end="45:70">+</operator> <literal type="number" pos:start="45:72" pos:end="45:72">1</literal><operator pos:start="45:73" pos:end="45:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="79:9">for <control pos:start="47:9" pos:end="47:50">(<init pos:start="47:10" pos:end="47:40"><expr pos:start="47:10" pos:end="47:24"><name pos:start="47:10" pos:end="47:10">i</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:24">onchip_clks</name></expr><operator pos:start="47:25" pos:end="47:25">,</operator> <expr pos:start="47:27" pos:end="47:39"><name pos:start="47:27" pos:end="47:27">j</name> <operator pos:start="47:29" pos:end="47:29">=</operator> <name pos:start="47:31" pos:end="47:39"><name pos:start="47:31" pos:end="47:33">mpu</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:39">clks</name></name></expr>;</init> <condition pos:start="47:42" pos:end="47:44"><expr pos:start="47:42" pos:end="47:43"><operator pos:start="47:42" pos:end="47:42">*</operator><name pos:start="47:43" pos:end="47:43">i</name></expr>;</condition> <incr pos:start="47:46" pos:end="47:49"><expr pos:start="47:46" pos:end="47:49"><name pos:start="47:46" pos:end="47:46">i</name> <operator pos:start="47:48" pos:end="47:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="49:9" pos:end="79:9"><block_content pos:start="49:9" pos:end="79:9">

        <if_stmt pos:start="49:9" pos:end="79:9"><if pos:start="49:9" pos:end="79:9">if <condition pos:start="49:12" pos:end="49:31">(<expr pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:23"><operator pos:start="49:13" pos:end="49:13">(</operator><operator pos:start="49:14" pos:end="49:14">*</operator><name pos:start="49:15" pos:end="49:15">i</name><operator pos:start="49:16" pos:end="49:16">)</operator><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:23">flags</name></name> <operator pos:start="49:25" pos:end="49:25">&amp;</operator> <name pos:start="49:27" pos:end="49:30">flag</name></expr>)</condition> <block pos:start="49:33" pos:end="79:9">{<block_content pos:start="51:13" pos:end="77:17">

            <expr_stmt pos:start="51:13" pos:end="51:46"><expr pos:start="51:13" pos:end="51:45"><call pos:start="51:13" pos:end="51:45"><name pos:start="51:13" pos:end="51:18">memcpy</name><argument_list pos:start="51:19" pos:end="51:45">(<argument pos:start="51:20" pos:end="51:20"><expr pos:start="51:20" pos:end="51:20"><name pos:start="51:20" pos:end="51:20">j</name></expr></argument>, <argument pos:start="51:23" pos:end="51:24"><expr pos:start="51:23" pos:end="51:24"><operator pos:start="51:23" pos:end="51:23">*</operator><name pos:start="51:24" pos:end="51:24">i</name></expr></argument>, <argument pos:start="51:27" pos:end="51:44"><expr pos:start="51:27" pos:end="51:44"><sizeof pos:start="51:27" pos:end="51:44">sizeof<argument_list pos:start="51:33" pos:end="51:44">(<argument pos:start="51:34" pos:end="51:43"><expr pos:start="51:34" pos:end="51:43">struct <name pos:start="51:41" pos:end="51:43">clk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="53:13" pos:end="71:17">for <control pos:start="53:17" pos:end="53:44">(<init pos:start="53:18" pos:end="53:31"><expr pos:start="53:18" pos:end="53:30"><name pos:start="53:18" pos:end="53:18">k</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:30"><name pos:start="53:22" pos:end="53:24">mpu</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:30">clks</name></name></expr>;</init> <condition pos:start="53:33" pos:end="53:38"><expr pos:start="53:33" pos:end="53:37"><name pos:start="53:33" pos:end="53:33">k</name> <operator pos:start="53:35" pos:end="53:35">&lt;</operator> <name pos:start="53:37" pos:end="53:37">j</name></expr>;</condition> <incr pos:start="53:40" pos:end="53:43"><expr pos:start="53:40" pos:end="53:43"><name pos:start="53:40" pos:end="53:40">k</name> <operator pos:start="53:42" pos:end="53:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="55:17" pos:end="71:17"><block_content pos:start="55:17" pos:end="71:17">

                <if_stmt pos:start="55:17" pos:end="71:17"><if pos:start="55:17" pos:end="63:17">if <condition pos:start="55:20" pos:end="55:67">(<expr pos:start="55:21" pos:end="55:66"><name pos:start="55:21" pos:end="55:29"><name pos:start="55:21" pos:end="55:21">j</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:29">parent</name></name> <operator pos:start="55:31" pos:end="55:32">&amp;&amp;</operator> <operator pos:start="55:34" pos:end="55:34">!</operator><call pos:start="55:35" pos:end="55:66"><name pos:start="55:35" pos:end="55:40">strcmp</name><argument_list pos:start="55:41" pos:end="55:66">(<argument pos:start="55:42" pos:end="55:56"><expr pos:start="55:42" pos:end="55:56"><name pos:start="55:42" pos:end="55:56"><name pos:start="55:42" pos:end="55:42">j</name><operator pos:start="55:43" pos:end="55:44">-&gt;</operator><name pos:start="55:45" pos:end="55:50">parent</name><operator pos:start="55:51" pos:end="55:52">-&gt;</operator><name pos:start="55:53" pos:end="55:56">name</name></name></expr></argument>, <argument pos:start="55:59" pos:end="55:65"><expr pos:start="55:59" pos:end="55:65"><name pos:start="55:59" pos:end="55:65"><name pos:start="55:59" pos:end="55:59">k</name><operator pos:start="55:60" pos:end="55:61">-&gt;</operator><name pos:start="55:62" pos:end="55:65">name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:69" pos:end="63:17">{<block_content pos:start="57:21" pos:end="61:34">

                    <expr_stmt pos:start="57:21" pos:end="57:34"><expr pos:start="57:21" pos:end="57:33"><name pos:start="57:21" pos:end="57:29"><name pos:start="57:21" pos:end="57:21">j</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:29">parent</name></name> <operator pos:start="57:31" pos:end="57:31">=</operator> <name pos:start="57:33" pos:end="57:33">k</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="59:43"><expr pos:start="59:21" pos:end="59:42"><name pos:start="59:21" pos:end="59:30"><name pos:start="59:21" pos:end="59:21">j</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:30">sibling</name></name> <operator pos:start="59:32" pos:end="59:32">=</operator> <name pos:start="59:34" pos:end="59:42"><name pos:start="59:34" pos:end="59:34">k</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:42">child1</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="61:21" pos:end="61:34"><expr pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:29"><name pos:start="61:21" pos:end="61:21">k</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:29">child1</name></name> <operator pos:start="61:31" pos:end="61:31">=</operator> <name pos:start="61:33" pos:end="61:33">j</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="63:19" pos:end="71:17">else if <condition pos:start="63:27" pos:end="63:74">(<expr pos:start="63:28" pos:end="63:73"><name pos:start="63:28" pos:end="63:36"><name pos:start="63:28" pos:end="63:28">k</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:36">parent</name></name> <operator pos:start="63:38" pos:end="63:39">&amp;&amp;</operator> <operator pos:start="63:41" pos:end="63:41">!</operator><call pos:start="63:42" pos:end="63:73"><name pos:start="63:42" pos:end="63:47">strcmp</name><argument_list pos:start="63:48" pos:end="63:73">(<argument pos:start="63:49" pos:end="63:63"><expr pos:start="63:49" pos:end="63:63"><name pos:start="63:49" pos:end="63:63"><name pos:start="63:49" pos:end="63:49">k</name><operator pos:start="63:50" pos:end="63:51">-&gt;</operator><name pos:start="63:52" pos:end="63:57">parent</name><operator pos:start="63:58" pos:end="63:59">-&gt;</operator><name pos:start="63:60" pos:end="63:63">name</name></name></expr></argument>, <argument pos:start="63:66" pos:end="63:72"><expr pos:start="63:66" pos:end="63:72"><name pos:start="63:66" pos:end="63:72"><name pos:start="63:66" pos:end="63:66">j</name><operator pos:start="63:67" pos:end="63:68">-&gt;</operator><name pos:start="63:69" pos:end="63:72">name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:76" pos:end="71:17">{<block_content pos:start="65:21" pos:end="69:34">

                    <expr_stmt pos:start="65:21" pos:end="65:34"><expr pos:start="65:21" pos:end="65:33"><name pos:start="65:21" pos:end="65:29"><name pos:start="65:21" pos:end="65:21">k</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:29">parent</name></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <name pos:start="65:33" pos:end="65:33">j</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:43"><expr pos:start="67:21" pos:end="67:42"><name pos:start="67:21" pos:end="67:30"><name pos:start="67:21" pos:end="67:21">k</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:30">sibling</name></name> <operator pos:start="67:32" pos:end="67:32">=</operator> <name pos:start="67:34" pos:end="67:42"><name pos:start="67:34" pos:end="67:34">j</name><operator pos:start="67:35" pos:end="67:36">-&gt;</operator><name pos:start="67:37" pos:end="67:42">child1</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="69:21" pos:end="69:34"><expr pos:start="69:21" pos:end="69:33"><name pos:start="69:21" pos:end="69:29"><name pos:start="69:21" pos:end="69:21">j</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:29">child1</name></name> <operator pos:start="69:31" pos:end="69:31">=</operator> <name pos:start="69:33" pos:end="69:33">k</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt></block_content></block></for>

            <expr_stmt pos:start="73:13" pos:end="73:41"><expr pos:start="73:13" pos:end="73:40"><name pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:13">j</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:22">divisor</name></name> <operator pos:start="73:24" pos:end="73:24">=</operator> <ternary pos:start="73:26" pos:end="73:40"><condition pos:start="73:26" pos:end="73:37"><expr pos:start="73:26" pos:end="73:35"><name pos:start="73:26" pos:end="73:35"><name pos:start="73:26" pos:end="73:26">j</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:35">divisor</name></name></expr> ?</condition><then/><else pos:start="73:38" pos:end="73:40">: <expr pos:start="73:40" pos:end="73:40"><literal type="number" pos:start="73:40" pos:end="73:40">1</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:47"><expr pos:start="75:13" pos:end="75:46"><name pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:13">j</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:25">multiplier</name></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <ternary pos:start="75:29" pos:end="75:46"><condition pos:start="75:29" pos:end="75:43"><expr pos:start="75:29" pos:end="75:41"><name pos:start="75:29" pos:end="75:41"><name pos:start="75:29" pos:end="75:29">j</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:41">multiplier</name></name></expr> ?</condition><then/><else pos:start="75:44" pos:end="75:46">: <expr pos:start="75:46" pos:end="75:46"><literal type="number" pos:start="75:46" pos:end="75:46">1</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:17"><expr pos:start="77:13" pos:end="77:16"><name pos:start="77:13" pos:end="77:13">j</name> <operator pos:start="77:15" pos:end="77:16">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></for>

    <for pos:start="81:5" pos:end="87:5">for <control pos:start="81:9" pos:end="81:39">(<init pos:start="81:10" pos:end="81:23"><expr pos:start="81:10" pos:end="81:22"><name pos:start="81:10" pos:end="81:10">j</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:22"><name pos:start="81:14" pos:end="81:16">mpu</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:22">clks</name></name></expr>;</init> <condition pos:start="81:25" pos:end="81:33"><expr pos:start="81:25" pos:end="81:32"><name pos:start="81:25" pos:end="81:29">count</name> <operator pos:start="81:31" pos:end="81:32">--</operator></expr>;</condition> <incr pos:start="81:35" pos:end="81:38"><expr pos:start="81:35" pos:end="81:38"><name pos:start="81:35" pos:end="81:35">j</name> <operator pos:start="81:37" pos:end="81:38">++</operator></expr></incr>)</control> <block pos:start="81:41" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:32">

        <expr_stmt pos:start="83:9" pos:end="83:27"><expr pos:start="83:9" pos:end="83:26"><call pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:23">omap_clk_update</name><argument_list pos:start="83:24" pos:end="83:26">(<argument pos:start="83:25" pos:end="83:25"><expr pos:start="83:25" pos:end="83:25"><name pos:start="83:25" pos:end="83:25">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:32"><expr pos:start="85:9" pos:end="85:31"><call pos:start="85:9" pos:end="85:31"><name pos:start="85:9" pos:end="85:28">omap_clk_rate_update</name><argument_list pos:start="85:29" pos:end="85:31">(<argument pos:start="85:30" pos:end="85:30"><expr pos:start="85:30" pos:end="85:30"><name pos:start="85:30" pos:end="85:30">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
