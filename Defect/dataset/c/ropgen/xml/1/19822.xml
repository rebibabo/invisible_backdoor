<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19822.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">spitz_common_init</name><parameter_list pos:start="1:30" pos:end="3:67">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:42">MachineState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">machine</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:54"><decl pos:start="3:31" pos:end="3:54"><type pos:start="3:31" pos:end="3:54"><name pos:start="3:31" pos:end="3:48"><name pos:start="3:31" pos:end="3:34">enum</name> <name pos:start="3:36" pos:end="3:48">spitz_model_e</name></name></type> <name pos:start="3:50" pos:end="3:54">model</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:66"><decl pos:start="3:57" pos:end="3:66"><type pos:start="3:57" pos:end="3:66"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:66">arm_id</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="109:1">{<block_content pos:start="7:5" pos:end="107:42">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">PXA2xxState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">mpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">DeviceState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:21">scp0</name></decl>, <decl pos:start="9:24" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:17"><modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:28">scp1</name> <init pos:start="9:30" pos:end="9:35">= <expr pos:start="9:32" pos:end="9:35"><name pos:start="9:32" pos:end="9:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:58"><decl pos:start="11:5" pos:end="11:57"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:35">address_space_mem</name> <init pos:start="11:37" pos:end="11:57">= <expr pos:start="11:39" pos:end="11:57"><call pos:start="11:39" pos:end="11:57"><name pos:start="11:39" pos:end="11:55">get_system_memory</name><argument_list pos:start="11:56" pos:end="11:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">rom</name> <init pos:start="13:23" pos:end="13:46">= <expr pos:start="13:25" pos:end="13:46"><call pos:start="13:25" pos:end="13:46"><name pos:start="13:25" pos:end="13:29">g_new</name><argument_list pos:start="13:30" pos:end="13:46">(<argument pos:start="13:31" pos:end="13:42"><expr pos:start="13:31" pos:end="13:42"><name pos:start="13:31" pos:end="13:42">MemoryRegion</name></expr></argument>, <argument pos:start="13:45" pos:end="13:45"><expr pos:start="13:45" pos:end="13:45"><literal type="number" pos:start="13:45" pos:end="13:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:25">cpu_model</name> <init pos:start="15:27" pos:end="15:46">= <expr pos:start="15:29" pos:end="15:46"><name pos:start="15:29" pos:end="15:46"><name pos:start="15:29" pos:end="15:35">machine</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:67"><if pos:start="19:5" pos:end="21:67">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:67"><block_content pos:start="21:9" pos:end="21:67">

        <expr_stmt pos:start="21:9" pos:end="21:67"><expr pos:start="21:9" pos:end="21:66"><name pos:start="21:9" pos:end="21:17">cpu_model</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <ternary pos:start="21:21" pos:end="21:66"><condition pos:start="21:21" pos:end="21:40"><expr pos:start="21:21" pos:end="21:38"><operator pos:start="21:21" pos:end="21:21">(</operator><name pos:start="21:22" pos:end="21:26">model</name> <operator pos:start="21:28" pos:end="21:29">==</operator> <name pos:start="21:31" pos:end="21:37">terrier</name><operator pos:start="21:38" pos:end="21:38">)</operator></expr> ?</condition><then pos:start="21:42" pos:end="21:52"> <expr pos:start="21:42" pos:end="21:52"><literal type="string" pos:start="21:42" pos:end="21:52">"pxa270-c5"</literal></expr> </then><else pos:start="21:54" pos:end="21:66">: <expr pos:start="21:56" pos:end="21:66"><literal type="string" pos:start="21:56" pos:end="21:66">"pxa270-c0"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:28">/* Setup CPU &amp; memory */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:74"><expr pos:start="27:5" pos:end="27:73"><name pos:start="27:5" pos:end="27:7">mpu</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:73"><name pos:start="27:11" pos:end="27:21">pxa270_init</name><argument_list pos:start="27:22" pos:end="27:73">(<argument pos:start="27:23" pos:end="27:39"><expr pos:start="27:23" pos:end="27:39"><name pos:start="27:23" pos:end="27:39">address_space_mem</name></expr></argument>, <argument pos:start="27:42" pos:end="27:61"><expr pos:start="27:42" pos:end="27:61"><name pos:start="27:42" pos:end="27:61"><name pos:start="27:42" pos:end="27:52">spitz_binfo</name><operator pos:start="27:53" pos:end="27:53">.</operator><name pos:start="27:54" pos:end="27:61">ram_size</name></name></expr></argument>, <argument pos:start="27:64" pos:end="27:72"><expr pos:start="27:64" pos:end="27:72"><name pos:start="27:64" pos:end="27:72">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:72"><expr pos:start="31:5" pos:end="31:71"><call pos:start="31:5" pos:end="31:71"><name pos:start="31:5" pos:end="31:21">sl_flash_register</name><argument_list pos:start="31:22" pos:end="31:71">(<argument pos:start="31:23" pos:end="31:25"><expr pos:start="31:23" pos:end="31:25"><name pos:start="31:23" pos:end="31:25">mpu</name></expr></argument>, <argument pos:start="31:28" pos:end="31:70"><expr pos:start="31:28" pos:end="31:70"><ternary pos:start="31:28" pos:end="31:70"><condition pos:start="31:28" pos:end="31:45"><expr pos:start="31:28" pos:end="31:43"><operator pos:start="31:28" pos:end="31:28">(</operator><name pos:start="31:29" pos:end="31:33">model</name> <operator pos:start="31:35" pos:end="31:36">==</operator> <name pos:start="31:38" pos:end="31:42">spitz</name><operator pos:start="31:43" pos:end="31:43">)</operator></expr> ?</condition><then pos:start="31:47" pos:end="31:56"> <expr pos:start="31:47" pos:end="31:56"><name pos:start="31:47" pos:end="31:56">FLASH_128M</name></expr> </then><else pos:start="31:58" pos:end="31:70">: <expr pos:start="31:60" pos:end="31:70"><name pos:start="31:60" pos:end="31:70">FLASH_1024M</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:76"><expr pos:start="35:5" pos:end="35:75"><call pos:start="35:5" pos:end="35:75"><name pos:start="35:5" pos:end="35:26">memory_region_init_ram</name><argument_list pos:start="35:27" pos:end="35:75">(<argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">rom</name></expr></argument>, <argument pos:start="35:33" pos:end="35:36"><expr pos:start="35:33" pos:end="35:36"><name pos:start="35:33" pos:end="35:36">NULL</name></expr></argument>, <argument pos:start="35:39" pos:end="35:49"><expr pos:start="35:39" pos:end="35:49"><literal type="string" pos:start="35:39" pos:end="35:49">"spitz.rom"</literal></expr></argument>, <argument pos:start="35:52" pos:end="35:60"><expr pos:start="35:52" pos:end="35:60"><name pos:start="35:52" pos:end="35:60">SPITZ_ROM</name></expr></argument>, <argument pos:start="35:63" pos:end="35:74"><expr pos:start="35:63" pos:end="35:74"><operator pos:start="35:63" pos:end="35:63">&amp;</operator><name pos:start="35:64" pos:end="35:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><call pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:31">vmstate_register_ram_global</name><argument_list pos:start="37:32" pos:end="37:36">(<argument pos:start="37:33" pos:end="37:35"><expr pos:start="37:33" pos:end="37:35"><name pos:start="37:33" pos:end="37:35">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:42"><expr pos:start="39:5" pos:end="39:41"><call pos:start="39:5" pos:end="39:41"><name pos:start="39:5" pos:end="39:30">memory_region_set_readonly</name><argument_list pos:start="39:31" pos:end="39:41">(<argument pos:start="39:32" pos:end="39:34"><expr pos:start="39:32" pos:end="39:34"><name pos:start="39:32" pos:end="39:34">rom</name></expr></argument>, <argument pos:start="39:37" pos:end="39:40"><expr pos:start="39:37" pos:end="39:40"><name pos:start="39:37" pos:end="39:40">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:59"><expr pos:start="41:5" pos:end="41:58"><call pos:start="41:5" pos:end="41:58"><name pos:start="41:5" pos:end="41:31">memory_region_add_subregion</name><argument_list pos:start="41:32" pos:end="41:58">(<argument pos:start="41:33" pos:end="41:49"><expr pos:start="41:33" pos:end="41:49"><name pos:start="41:33" pos:end="41:49">address_space_mem</name></expr></argument>, <argument pos:start="41:52" pos:end="41:52"><expr pos:start="41:52" pos:end="41:52"><literal type="number" pos:start="41:52" pos:end="41:52">0</literal></expr></argument>, <argument pos:start="41:55" pos:end="41:57"><expr pos:start="41:55" pos:end="41:57"><name pos:start="41:55" pos:end="41:57">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:27">/* Setup peripherals */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><call pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:27">spitz_keyboard_register</name><argument_list pos:start="47:28" pos:end="47:32">(<argument pos:start="47:29" pos:end="47:31"><expr pos:start="47:29" pos:end="47:31"><name pos:start="47:29" pos:end="47:31">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:26"><expr pos:start="51:5" pos:end="51:25"><call pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:20">spitz_ssp_attach</name><argument_list pos:start="51:21" pos:end="51:25">(<argument pos:start="51:22" pos:end="51:24"><expr pos:start="51:22" pos:end="51:24"><name pos:start="51:22" pos:end="51:24">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:59"><expr pos:start="55:5" pos:end="55:58"><name pos:start="55:5" pos:end="55:8">scp0</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <call pos:start="55:12" pos:end="55:58"><name pos:start="55:12" pos:end="55:31">sysbus_create_simple</name><argument_list pos:start="55:32" pos:end="55:58">(<argument pos:start="55:33" pos:end="55:39"><expr pos:start="55:33" pos:end="55:39"><literal type="string" pos:start="55:33" pos:end="55:39">"scoop"</literal></expr></argument>, <argument pos:start="55:42" pos:end="55:51"><expr pos:start="55:42" pos:end="55:51"><literal type="number" pos:start="55:42" pos:end="55:51">0x10800000</literal></expr></argument>, <argument pos:start="55:54" pos:end="55:57"><expr pos:start="55:54" pos:end="55:57"><name pos:start="55:54" pos:end="55:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:23">(<expr pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:13">model</name> <operator pos:start="57:15" pos:end="57:16">!=</operator> <name pos:start="57:18" pos:end="57:22">akita</name></expr>)</condition> <block pos:start="57:25" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:63">

        <expr_stmt pos:start="59:9" pos:end="59:63"><expr pos:start="59:9" pos:end="59:62"><name pos:start="59:9" pos:end="59:12">scp1</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="59:62"><name pos:start="59:16" pos:end="59:35">sysbus_create_simple</name><argument_list pos:start="59:36" pos:end="59:62">(<argument pos:start="59:37" pos:end="59:43"><expr pos:start="59:37" pos:end="59:43"><literal type="string" pos:start="59:37" pos:end="59:43">"scoop"</literal></expr></argument>, <argument pos:start="59:46" pos:end="59:55"><expr pos:start="59:46" pos:end="59:55"><literal type="number" pos:start="59:46" pos:end="59:55">0x08800040</literal></expr></argument>, <argument pos:start="59:58" pos:end="59:61"><expr pos:start="59:58" pos:end="59:61"><name pos:start="59:58" pos:end="59:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:44"><expr pos:start="65:5" pos:end="65:43"><call pos:start="65:5" pos:end="65:43"><name pos:start="65:5" pos:end="65:26">spitz_scoop_gpio_setup</name><argument_list pos:start="65:27" pos:end="65:43">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">mpu</name></expr></argument>, <argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">scp0</name></expr></argument>, <argument pos:start="65:39" pos:end="65:42"><expr pos:start="65:39" pos:end="65:42"><name pos:start="65:39" pos:end="65:42">scp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:52"><expr pos:start="69:5" pos:end="69:51"><call pos:start="69:5" pos:end="69:51"><name pos:start="69:5" pos:end="69:20">spitz_gpio_setup</name><argument_list pos:start="69:21" pos:end="69:51">(<argument pos:start="69:22" pos:end="69:24"><expr pos:start="69:22" pos:end="69:24"><name pos:start="69:22" pos:end="69:24">mpu</name></expr></argument>, <argument pos:start="69:27" pos:end="69:50"><expr pos:start="69:27" pos:end="69:50"><ternary pos:start="69:27" pos:end="69:50"><condition pos:start="69:27" pos:end="69:44"><expr pos:start="69:27" pos:end="69:42"><operator pos:start="69:27" pos:end="69:27">(</operator><name pos:start="69:28" pos:end="69:32">model</name> <operator pos:start="69:34" pos:end="69:35">==</operator> <name pos:start="69:37" pos:end="69:41">akita</name><operator pos:start="69:42" pos:end="69:42">)</operator></expr> ?</condition><then pos:start="69:46" pos:end="69:46"> <expr pos:start="69:46" pos:end="69:46"><literal type="number" pos:start="69:46" pos:end="69:46">1</literal></expr> </then><else pos:start="69:48" pos:end="69:50">: <expr pos:start="69:50" pos:end="69:50"><literal type="number" pos:start="69:50" pos:end="69:50">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:25"><expr pos:start="73:5" pos:end="73:24"><call pos:start="73:5" pos:end="73:24"><name pos:start="73:5" pos:end="73:19">spitz_i2c_setup</name><argument_list pos:start="73:20" pos:end="73:24">(<argument pos:start="73:21" pos:end="73:23"><expr pos:start="73:21" pos:end="73:23"><name pos:start="73:21" pos:end="73:23">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="79:35"><if pos:start="77:5" pos:end="79:35">if <condition pos:start="77:8" pos:end="77:23">(<expr pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:13">model</name> <operator pos:start="77:15" pos:end="77:16">==</operator> <name pos:start="77:18" pos:end="77:22">akita</name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:35"><block_content pos:start="79:9" pos:end="79:35">

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><call pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:29">spitz_akita_i2c_setup</name><argument_list pos:start="79:30" pos:end="79:34">(<argument pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><name pos:start="79:31" pos:end="79:33">mpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="93:40"><if pos:start="83:5" pos:end="87:40">if <condition pos:start="83:8" pos:end="83:25">(<expr pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:13">model</name> <operator pos:start="83:15" pos:end="83:16">==</operator> <name pos:start="83:18" pos:end="83:24">terrier</name></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:40"><block_content pos:start="87:9" pos:end="87:40">

        <comment type="block" pos:start="85:9" pos:end="85:71">/* A 6.0 GB microdrive is permanently sitting in CF slot 1.  */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:40"><expr pos:start="87:9" pos:end="87:39"><call pos:start="87:9" pos:end="87:39"><name pos:start="87:9" pos:end="87:31">spitz_microdrive_attach</name><argument_list pos:start="87:32" pos:end="87:39">(<argument pos:start="87:33" pos:end="87:35"><expr pos:start="87:33" pos:end="87:35"><name pos:start="87:33" pos:end="87:35">mpu</name></expr></argument>, <argument pos:start="87:38" pos:end="87:38"><expr pos:start="87:38" pos:end="87:38"><literal type="number" pos:start="87:38" pos:end="87:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="89:5" pos:end="93:40">else if <condition pos:start="89:13" pos:end="89:28">(<expr pos:start="89:14" pos:end="89:27"><name pos:start="89:14" pos:end="89:18">model</name> <operator pos:start="89:20" pos:end="89:21">!=</operator> <name pos:start="89:23" pos:end="89:27">akita</name></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:40"><block_content pos:start="93:9" pos:end="93:40">

        <comment type="block" pos:start="91:9" pos:end="91:71">/* A 4.0 GB microdrive is permanently sitting in CF slot 0.  */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:40"><expr pos:start="93:9" pos:end="93:39"><call pos:start="93:9" pos:end="93:39"><name pos:start="93:9" pos:end="93:31">spitz_microdrive_attach</name><argument_list pos:start="93:32" pos:end="93:39">(<argument pos:start="93:33" pos:end="93:35"><expr pos:start="93:33" pos:end="93:35"><name pos:start="93:33" pos:end="93:35">mpu</name></expr></argument>, <argument pos:start="93:38" pos:end="93:38"><expr pos:start="93:38" pos:end="93:38"><literal type="number" pos:start="93:38" pos:end="93:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:59"><expr pos:start="97:5" pos:end="97:58"><name pos:start="97:5" pos:end="97:31"><name pos:start="97:5" pos:end="97:15">spitz_binfo</name><operator pos:start="97:16" pos:end="97:16">.</operator><name pos:start="97:17" pos:end="97:31">kernel_filename</name></name> <operator pos:start="97:33" pos:end="97:33">=</operator> <name pos:start="97:35" pos:end="97:58"><name pos:start="97:35" pos:end="97:41">machine</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:58">kernel_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:57"><expr pos:start="99:5" pos:end="99:56"><name pos:start="99:5" pos:end="99:30"><name pos:start="99:5" pos:end="99:15">spitz_binfo</name><operator pos:start="99:16" pos:end="99:16">.</operator><name pos:start="99:17" pos:end="99:30">kernel_cmdline</name></name> <operator pos:start="99:32" pos:end="99:32">=</operator> <name pos:start="99:34" pos:end="99:56"><name pos:start="99:34" pos:end="99:40">machine</name><operator pos:start="99:41" pos:end="99:42">-&gt;</operator><name pos:start="99:43" pos:end="99:56">kernel_cmdline</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:59"><expr pos:start="101:5" pos:end="101:58"><name pos:start="101:5" pos:end="101:31"><name pos:start="101:5" pos:end="101:15">spitz_binfo</name><operator pos:start="101:16" pos:end="101:16">.</operator><name pos:start="101:17" pos:end="101:31">initrd_filename</name></name> <operator pos:start="101:33" pos:end="101:33">=</operator> <name pos:start="101:35" pos:end="101:58"><name pos:start="101:35" pos:end="101:41">machine</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:58">initrd_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:34"><expr pos:start="103:5" pos:end="103:33"><name pos:start="103:5" pos:end="103:24"><name pos:start="103:5" pos:end="103:15">spitz_binfo</name><operator pos:start="103:16" pos:end="103:16">.</operator><name pos:start="103:17" pos:end="103:24">board_id</name></name> <operator pos:start="103:26" pos:end="103:26">=</operator> <name pos:start="103:28" pos:end="103:33">arm_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:44"><expr pos:start="105:5" pos:end="105:43"><call pos:start="105:5" pos:end="105:43"><name pos:start="105:5" pos:end="105:19">arm_load_kernel</name><argument_list pos:start="105:20" pos:end="105:43">(<argument pos:start="105:21" pos:end="105:28"><expr pos:start="105:21" pos:end="105:28"><name pos:start="105:21" pos:end="105:28"><name pos:start="105:21" pos:end="105:23">mpu</name><operator pos:start="105:24" pos:end="105:25">-&gt;</operator><name pos:start="105:26" pos:end="105:28">cpu</name></name></expr></argument>, <argument pos:start="105:31" pos:end="105:42"><expr pos:start="105:31" pos:end="105:42"><operator pos:start="105:31" pos:end="105:31">&amp;</operator><name pos:start="105:32" pos:end="105:42">spitz_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:42"><expr pos:start="107:5" pos:end="107:41"><call pos:start="107:5" pos:end="107:41"><name pos:start="107:5" pos:end="107:22">sl_bootparam_write</name><argument_list pos:start="107:23" pos:end="107:41">(<argument pos:start="107:24" pos:end="107:40"><expr pos:start="107:24" pos:end="107:40"><name pos:start="107:24" pos:end="107:40">SL_PXA_PARAM_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
