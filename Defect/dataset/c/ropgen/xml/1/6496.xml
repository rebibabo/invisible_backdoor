<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6496.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">xen_pt_cmd_reg_write</name><parameter_list pos:start="1:32" pos:end="5:52">(<parameter pos:start="1:33" pos:end="1:57"><decl pos:start="1:33" pos:end="1:57"><type pos:start="1:33" pos:end="1:57"><name pos:start="1:33" pos:end="1:54">XenPCIPassthroughState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:78"><decl pos:start="1:60" pos:end="1:78"><type pos:start="1:60" pos:end="1:78"><name pos:start="1:60" pos:end="1:67">XenPTReg</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">cfg_entry</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">uint16_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">val</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:65"><decl pos:start="3:48" pos:end="3:65"><type pos:start="3:48" pos:end="3:65"><name pos:start="3:48" pos:end="3:55">uint16_t</name></type> <name pos:start="3:57" pos:end="3:65">dev_value</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:51"><decl pos:start="5:33" pos:end="5:51"><type pos:start="5:33" pos:end="5:51"><name pos:start="5:33" pos:end="5:40">uint16_t</name></type> <name pos:start="5:42" pos:end="5:51">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="63:1">{<block_content pos:start="9:5" pos:end="61:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:26">writable_mask</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:29">throughable_mask</name> <init pos:start="13:31" pos:end="13:33">= <expr pos:start="13:33" pos:end="13:33"><literal type="number" pos:start="13:33" pos:end="13:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:21">emu_mask</name> <init pos:start="15:23" pos:end="15:37">= <expr pos:start="15:25" pos:end="15:37"><name pos:start="15:25" pos:end="15:37"><name pos:start="15:25" pos:end="15:27">reg</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:37">emu_mask</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:21">(<expr pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:20">is_virtfn</name></name></expr>)</condition> <block pos:start="19:23" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:39">

        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:16">emu_mask</name> <operator pos:start="21:18" pos:end="21:19">|=</operator> <name pos:start="21:21" pos:end="21:38">PCI_COMMAND_MEMORY</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:47"><expr pos:start="29:5" pos:end="29:46"><name pos:start="29:5" pos:end="29:17">writable_mask</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <operator pos:start="29:21" pos:end="29:21">~</operator><name pos:start="29:22" pos:end="29:33"><name pos:start="29:22" pos:end="29:24">reg</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:33">ro_mask</name></name> <operator pos:start="29:35" pos:end="29:35">&amp;</operator> <name pos:start="29:37" pos:end="29:46">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:79"><expr pos:start="31:5" pos:end="31:78"><name pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:13">cfg_entry</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:19">data</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:78"><name pos:start="31:23" pos:end="31:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="31:41" pos:end="31:78">(<argument pos:start="31:42" pos:end="31:45"><expr pos:start="31:42" pos:end="31:45"><operator pos:start="31:42" pos:end="31:42">*</operator><name pos:start="31:43" pos:end="31:45">val</name></expr></argument>, <argument pos:start="31:48" pos:end="31:62"><expr pos:start="31:48" pos:end="31:62"><name pos:start="31:48" pos:end="31:62"><name pos:start="31:48" pos:end="31:56">cfg_entry</name><operator pos:start="31:57" pos:end="31:58">-&gt;</operator><name pos:start="31:59" pos:end="31:62">data</name></name></expr></argument>, <argument pos:start="31:65" pos:end="31:77"><expr pos:start="31:65" pos:end="31:77"><name pos:start="31:65" pos:end="31:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:20">throughable_mask</name> <operator pos:start="37:22" pos:end="37:22">=</operator> <operator pos:start="37:24" pos:end="37:24">~</operator><name pos:start="37:25" pos:end="37:32">emu_mask</name> <operator pos:start="37:34" pos:end="37:34">&amp;</operator> <name pos:start="37:36" pos:end="37:45">valid_mask</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:40">(<expr pos:start="41:9" pos:end="41:39"><operator pos:start="41:9" pos:end="41:9">*</operator><name pos:start="41:10" pos:end="41:12">val</name> <operator pos:start="41:14" pos:end="41:14">&amp;</operator> <name pos:start="41:16" pos:end="41:39">PCI_COMMAND_INTX_DISABLE</name></expr>)</condition> <block pos:start="41:42" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:53">

        <expr_stmt pos:start="43:9" pos:end="43:53"><expr pos:start="43:9" pos:end="43:52"><name pos:start="43:9" pos:end="43:24">throughable_mask</name> <operator pos:start="43:26" pos:end="43:27">|=</operator> <name pos:start="43:29" pos:end="43:52">PCI_COMMAND_INTX_DISABLE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="53:5">else <block pos:start="45:12" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:9">

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:27">(<expr pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:26">machine_irq</name></name></expr>)</condition> <block pos:start="47:29" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:57">

            <expr_stmt pos:start="49:13" pos:end="49:57"><expr pos:start="49:13" pos:end="49:56"><name pos:start="49:13" pos:end="49:28">throughable_mask</name> <operator pos:start="49:30" pos:end="49:31">|=</operator> <name pos:start="49:33" pos:end="49:56">PCI_COMMAND_INTX_DISABLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:65"><expr pos:start="57:5" pos:end="57:64"><operator pos:start="57:5" pos:end="57:5">*</operator><name pos:start="57:6" pos:end="57:8">val</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <call pos:start="57:12" pos:end="57:64"><name pos:start="57:12" pos:end="57:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="57:30" pos:end="57:64">(<argument pos:start="57:31" pos:end="57:34"><expr pos:start="57:31" pos:end="57:34"><operator pos:start="57:31" pos:end="57:31">*</operator><name pos:start="57:32" pos:end="57:34">val</name></expr></argument>, <argument pos:start="57:37" pos:end="57:45"><expr pos:start="57:37" pos:end="57:45"><name pos:start="57:37" pos:end="57:45">dev_value</name></expr></argument>, <argument pos:start="57:48" pos:end="57:63"><expr pos:start="57:48" pos:end="57:63"><name pos:start="57:48" pos:end="57:63">throughable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="61:5" pos:end="61:13">return <expr pos:start="61:12" pos:end="61:12"><literal type="number" pos:start="61:12" pos:end="61:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
