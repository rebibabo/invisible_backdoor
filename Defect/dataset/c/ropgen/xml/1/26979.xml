<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26979.c" pos:tabs="8"><function pos:start="1:1" pos:end="487:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="1:89">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:73">data_size</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:88"><decl pos:start="1:76" pos:end="1:88"><type pos:start="1:76" pos:end="1:88"><name pos:start="1:76" pos:end="1:83">AVPacket</name> <modifier pos:start="1:85" pos:end="1:85">*</modifier></type><name pos:start="1:86" pos:end="1:88">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="487:1">{<block_content pos:start="5:5" pos:end="485:21">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:15">BinkContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier> <specifier pos:start="5:19" pos:end="5:23">const</specifier></type> <name pos:start="5:25" pos:end="5:25">c</name> <init pos:start="5:27" pos:end="5:44">= <expr pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:33">avctx</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>, <decl pos:start="11:15" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:19">plane</name></decl>, <decl pos:start="11:22" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:30">plane_idx</name></decl>, <decl pos:start="11:33" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:33" pos:end="11:34">bx</name></decl>, <decl pos:start="11:37" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:37" pos:end="11:38">by</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">dst</name></decl>, <decl pos:start="13:19" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:23">prev</name></decl>, <decl pos:start="13:26" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:29">ref</name></decl>, <decl pos:start="13:32" pos:end="13:41"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:41">ref_start</name></decl>, <decl pos:start="13:44" pos:end="13:51"><type ref="prev" pos:start="13:5" pos:end="13:13"><modifier pos:start="13:44" pos:end="13:44">*</modifier></type><name pos:start="13:45" pos:end="13:51">ref_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">v</name></decl>, <decl pos:start="15:12" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:17"><name pos:start="15:12" pos:end="15:14">col</name><index pos:start="15:15" pos:end="15:17">[<expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:23">scan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">xoff</name></decl>, <decl pos:start="19:15" pos:end="19:18"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:15" pos:end="19:18">yoff</name></decl>;</decl_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><call pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:22">DECLARE_ALIGNED_16</name><argument_list pos:start="21:23" pos:end="21:42">(<argument pos:start="21:24" pos:end="21:30"><expr pos:start="21:24" pos:end="21:30"><name pos:start="21:24" pos:end="21:30">DCTELEM</name></expr></argument>, <argument pos:start="21:33" pos:end="21:41"><expr pos:start="21:33" pos:end="21:41"><name pos:start="21:33" pos:end="21:41"><name pos:start="21:33" pos:end="21:37">block</name><index pos:start="21:38" pos:end="21:41">[<expr pos:start="21:39" pos:end="21:40"><literal type="number" pos:start="21:39" pos:end="21:40">64</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><call pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:22">DECLARE_ALIGNED_16</name><argument_list pos:start="23:23" pos:end="23:43">(<argument pos:start="23:24" pos:end="23:30"><expr pos:start="23:24" pos:end="23:30"><name pos:start="23:24" pos:end="23:30">uint8_t</name></expr></argument>, <argument pos:start="23:33" pos:end="23:42"><expr pos:start="23:33" pos:end="23:42"><name pos:start="23:33" pos:end="23:42"><name pos:start="23:33" pos:end="23:38">ublock</name><index pos:start="23:39" pos:end="23:42">[<expr pos:start="23:40" pos:end="23:41"><literal type="number" pos:start="23:40" pos:end="23:41">64</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:16">coordmap</name><index pos:start="25:17" pos:end="25:20">[<expr pos:start="25:18" pos:end="25:19"><literal type="number" pos:start="25:18" pos:end="25:19">64</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:46"><if pos:start="29:5" pos:end="31:46">if<condition pos:start="29:7" pos:end="29:22">(<expr pos:start="29:8" pos:end="29:21"><name pos:start="29:8" pos:end="29:21"><name pos:start="29:8" pos:end="29:8">c</name><operator pos:start="29:9" pos:end="29:10">-&gt;</operator><name pos:start="29:11" pos:end="29:13">pic</name><operator pos:start="29:14" pos:end="29:14">.</operator><name pos:start="29:15" pos:end="29:18">data</name><index pos:start="29:19" pos:end="29:21">[<expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:46"><block_content pos:start="31:9" pos:end="31:46">

        <expr_stmt pos:start="31:9" pos:end="31:46"><expr pos:start="31:9" pos:end="31:45"><call pos:start="31:9" pos:end="31:45"><name pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:13">avctx</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:29">release_buffer</name></name><argument_list pos:start="31:30" pos:end="31:45">(<argument pos:start="31:31" pos:end="31:35"><expr pos:start="31:31" pos:end="31:35"><name pos:start="31:31" pos:end="31:35">avctx</name></expr></argument>, <argument pos:start="31:38" pos:end="31:44"><expr pos:start="31:38" pos:end="31:44"><operator pos:start="31:38" pos:end="31:38">&amp;</operator><name pos:start="31:39" pos:end="31:44"><name pos:start="31:39" pos:end="31:39">c</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:44">pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if<condition pos:start="35:7" pos:end="35:45">(<expr pos:start="35:8" pos:end="35:44"><call pos:start="35:8" pos:end="35:40"><name pos:start="35:8" pos:end="35:24"><name pos:start="35:8" pos:end="35:12">avctx</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:24">get_buffer</name></name><argument_list pos:start="35:25" pos:end="35:40">(<argument pos:start="35:26" pos:end="35:30"><expr pos:start="35:26" pos:end="35:30"><name pos:start="35:26" pos:end="35:30">avctx</name></expr></argument>, <argument pos:start="35:33" pos:end="35:39"><expr pos:start="35:33" pos:end="35:39"><operator pos:start="35:33" pos:end="35:33">&amp;</operator><name pos:start="35:34" pos:end="35:39"><name pos:start="35:34" pos:end="35:34">c</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:39">pic</name></name></expr></argument>)</argument_list></call> <operator pos:start="35:42" pos:end="35:42">&lt;</operator> <literal type="number" pos:start="35:44" pos:end="35:44">0</literal></expr>)</condition><block pos:start="35:46" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:60">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:59"><expr pos:start="37:37" pos:end="37:59"><literal type="string" pos:start="37:37" pos:end="37:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:47"><expr pos:start="45:5" pos:end="45:46"><call pos:start="45:5" pos:end="45:46"><name pos:start="45:5" pos:end="45:17">init_get_bits</name><argument_list pos:start="45:18" pos:end="45:46">(<argument pos:start="45:19" pos:end="45:21"><expr pos:start="45:19" pos:end="45:21"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:21">gb</name></expr></argument>, <argument pos:start="45:24" pos:end="45:32"><expr pos:start="45:24" pos:end="45:32"><name pos:start="45:24" pos:end="45:32"><name pos:start="45:24" pos:end="45:26">pkt</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:32">data</name></name></expr></argument>, <argument pos:start="45:35" pos:end="45:45"><expr pos:start="45:35" pos:end="45:45"><name pos:start="45:35" pos:end="45:43"><name pos:start="45:35" pos:end="45:37">pkt</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:43">size</name></name><operator pos:start="45:44" pos:end="45:44">*</operator><literal type="number" pos:start="45:45" pos:end="45:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:32"><if pos:start="47:5" pos:end="49:32">if <condition pos:start="47:8" pos:end="47:26">(<expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:9">c</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:18">version</name></name> <operator pos:start="47:20" pos:end="47:21">&gt;=</operator> <literal type="char" pos:start="47:23" pos:end="47:25">'i'</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:32"><block_content pos:start="49:9" pos:end="49:32">

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><call pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:22">skip_bits_long</name><argument_list pos:start="49:23" pos:end="49:31">(<argument pos:start="49:24" pos:end="49:26"><expr pos:start="49:24" pos:end="49:26"><operator pos:start="49:24" pos:end="49:24">&amp;</operator><name pos:start="49:25" pos:end="49:26">gb</name></expr></argument>, <argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><literal type="number" pos:start="49:29" pos:end="49:30">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="53:5" pos:end="467:5">for <control pos:start="53:9" pos:end="53:39">(<init pos:start="53:10" pos:end="53:19"><expr pos:start="53:10" pos:end="53:18"><name pos:start="53:10" pos:end="53:14">plane</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>;</init> <condition pos:start="53:21" pos:end="53:30"><expr pos:start="53:21" pos:end="53:29"><name pos:start="53:21" pos:end="53:25">plane</name> <operator pos:start="53:27" pos:end="53:27">&lt;</operator> <literal type="number" pos:start="53:29" pos:end="53:29">3</literal></expr>;</condition> <incr pos:start="53:32" pos:end="53:38"><expr pos:start="53:32" pos:end="53:38"><name pos:start="53:32" pos:end="53:36">plane</name><operator pos:start="53:37" pos:end="53:38">++</operator></expr></incr>)</control> <block pos:start="53:41" pos:end="467:5">{<block_content pos:start="55:9" pos:end="465:67">

        <decl_stmt pos:start="55:9" pos:end="55:50"><decl pos:start="55:9" pos:end="55:49"><type pos:start="55:9" pos:end="55:17"><specifier pos:start="55:9" pos:end="55:13">const</specifier> <name pos:start="55:15" pos:end="55:17">int</name></type> <name pos:start="55:19" pos:end="55:24">stride</name> <init pos:start="55:26" pos:end="55:49">= <expr pos:start="55:28" pos:end="55:49"><name pos:start="55:28" pos:end="55:49"><name pos:start="55:28" pos:end="55:28">c</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:33">pic</name><operator pos:start="55:34" pos:end="55:34">.</operator><name pos:start="55:35" pos:end="55:42">linesize</name><index pos:start="55:43" pos:end="55:49">[<expr pos:start="55:44" pos:end="55:48"><name pos:start="55:44" pos:end="55:48">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:78"><decl pos:start="57:9" pos:end="57:77"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:14">bw</name> <init pos:start="57:16" pos:end="57:77">= <expr pos:start="57:18" pos:end="57:77"><ternary pos:start="57:18" pos:end="57:77"><condition pos:start="57:18" pos:end="57:24"><expr pos:start="57:18" pos:end="57:22"><name pos:start="57:18" pos:end="57:22">plane</name></expr> ?</condition><then pos:start="57:26" pos:end="57:50"> <expr pos:start="57:26" pos:end="57:50"><operator pos:start="57:26" pos:end="57:26">(</operator><name pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:31">avctx</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:38">width</name></name>  <operator pos:start="57:41" pos:end="57:41">+</operator> <literal type="number" pos:start="57:43" pos:end="57:44">15</literal><operator pos:start="57:45" pos:end="57:45">)</operator> <operator pos:start="57:47" pos:end="57:48">&gt;&gt;</operator> <literal type="number" pos:start="57:50" pos:end="57:50">4</literal></expr> </then><else pos:start="57:52" pos:end="57:77">: <expr pos:start="57:54" pos:end="57:77"><operator pos:start="57:54" pos:end="57:54">(</operator><name pos:start="57:55" pos:end="57:66"><name pos:start="57:55" pos:end="57:59">avctx</name><operator pos:start="57:60" pos:end="57:61">-&gt;</operator><name pos:start="57:62" pos:end="57:66">width</name></name>  <operator pos:start="57:69" pos:end="57:69">+</operator> <literal type="number" pos:start="57:71" pos:end="57:71">7</literal><operator pos:start="57:72" pos:end="57:72">)</operator> <operator pos:start="57:74" pos:end="57:75">&gt;&gt;</operator> <literal type="number" pos:start="57:77" pos:end="57:77">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:78"><decl pos:start="59:9" pos:end="59:77"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:14">bh</name> <init pos:start="59:16" pos:end="59:77">= <expr pos:start="59:18" pos:end="59:77"><ternary pos:start="59:18" pos:end="59:77"><condition pos:start="59:18" pos:end="59:24"><expr pos:start="59:18" pos:end="59:22"><name pos:start="59:18" pos:end="59:22">plane</name></expr> ?</condition><then pos:start="59:26" pos:end="59:50"> <expr pos:start="59:26" pos:end="59:50"><operator pos:start="59:26" pos:end="59:26">(</operator><name pos:start="59:27" pos:end="59:39"><name pos:start="59:27" pos:end="59:31">avctx</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:39">height</name></name> <operator pos:start="59:41" pos:end="59:41">+</operator> <literal type="number" pos:start="59:43" pos:end="59:44">15</literal><operator pos:start="59:45" pos:end="59:45">)</operator> <operator pos:start="59:47" pos:end="59:48">&gt;&gt;</operator> <literal type="number" pos:start="59:50" pos:end="59:50">4</literal></expr> </then><else pos:start="59:52" pos:end="59:77">: <expr pos:start="59:54" pos:end="59:77"><operator pos:start="59:54" pos:end="59:54">(</operator><name pos:start="59:55" pos:end="59:67"><name pos:start="59:55" pos:end="59:59">avctx</name><operator pos:start="59:60" pos:end="59:61">-&gt;</operator><name pos:start="59:62" pos:end="59:67">height</name></name> <operator pos:start="59:69" pos:end="59:69">+</operator> <literal type="number" pos:start="59:71" pos:end="59:71">7</literal><operator pos:start="59:72" pos:end="59:72">)</operator> <operator pos:start="59:74" pos:end="59:75">&gt;&gt;</operator> <literal type="number" pos:start="59:77" pos:end="59:77">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:44"><decl pos:start="61:9" pos:end="61:43"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:17">width</name> <init pos:start="61:19" pos:end="61:43">= <expr pos:start="61:21" pos:end="61:43"><name pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:25">avctx</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:32">width</name></name> <operator pos:start="61:34" pos:end="61:35">&gt;&gt;</operator> <operator pos:start="61:37" pos:end="61:37">!</operator><operator pos:start="61:38" pos:end="61:38">!</operator><name pos:start="61:39" pos:end="61:43">plane</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><call pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:20">init_lengths</name><argument_list pos:start="65:21" pos:end="65:44">(<argument pos:start="65:22" pos:end="65:22"><expr pos:start="65:22" pos:end="65:22"><name pos:start="65:22" pos:end="65:22">c</name></expr></argument>, <argument pos:start="65:25" pos:end="65:39"><expr pos:start="65:25" pos:end="65:39"><call pos:start="65:25" pos:end="65:39"><name pos:start="65:25" pos:end="65:29">FFMAX</name><argument_list pos:start="65:30" pos:end="65:39">(<argument pos:start="65:31" pos:end="65:35"><expr pos:start="65:31" pos:end="65:35"><name pos:start="65:31" pos:end="65:35">width</name></expr></argument>, <argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:42" pos:end="65:43"><expr pos:start="65:42" pos:end="65:43"><name pos:start="65:42" pos:end="65:43">bw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="67:9" pos:end="69:35">for <control pos:start="67:13" pos:end="67:41">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:36"><expr pos:start="67:21" pos:end="67:35"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <name pos:start="67:25" pos:end="67:35">BINK_NB_SRC</name></expr>;</condition> <incr pos:start="67:38" pos:end="67:40"><expr pos:start="67:38" pos:end="67:40"><name pos:start="67:38" pos:end="67:38">i</name><operator pos:start="67:39" pos:end="67:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:13" pos:end="69:35"><block_content pos:start="69:13" pos:end="69:35">

            <expr_stmt pos:start="69:13" pos:end="69:35"><expr pos:start="69:13" pos:end="69:34"><call pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:23">read_bundle</name><argument_list pos:start="69:24" pos:end="69:34">(<argument pos:start="69:25" pos:end="69:27"><expr pos:start="69:25" pos:end="69:27"><operator pos:start="69:25" pos:end="69:25">&amp;</operator><name pos:start="69:26" pos:end="69:27">gb</name></expr></argument>, <argument pos:start="69:30" pos:end="69:30"><expr pos:start="69:30" pos:end="69:30"><name pos:start="69:30" pos:end="69:30">c</name></expr></argument>, <argument pos:start="69:33" pos:end="69:33"><expr pos:start="69:33" pos:end="69:33"><name pos:start="69:33" pos:end="69:33">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="73:9" pos:end="73:70"><expr pos:start="73:9" pos:end="73:69"><name pos:start="73:9" pos:end="73:17">plane_idx</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <ternary pos:start="73:21" pos:end="73:69"><condition pos:start="73:21" pos:end="73:49"><expr pos:start="73:21" pos:end="73:47"><operator pos:start="73:21" pos:end="73:21">(</operator><operator pos:start="73:22" pos:end="73:22">!</operator><name pos:start="73:23" pos:end="73:27">plane</name> <operator pos:start="73:29" pos:end="73:30">||</operator> <operator pos:start="73:32" pos:end="73:32">!</operator><name pos:start="73:33" pos:end="73:46"><name pos:start="73:33" pos:end="73:33">c</name><operator pos:start="73:34" pos:end="73:35">-&gt;</operator><name pos:start="73:36" pos:end="73:46">swap_planes</name></name><operator pos:start="73:47" pos:end="73:47">)</operator></expr> ?</condition><then pos:start="73:51" pos:end="73:55"> <expr pos:start="73:51" pos:end="73:55"><name pos:start="73:51" pos:end="73:55">plane</name></expr> </then><else pos:start="73:57" pos:end="73:69">: <expr pos:start="73:59" pos:end="73:69"><operator pos:start="73:59" pos:end="73:59">(</operator><name pos:start="73:60" pos:end="73:64">plane</name> <operator pos:start="73:66" pos:end="73:66">^</operator> <literal type="number" pos:start="73:68" pos:end="73:68">3</literal><operator pos:start="73:69" pos:end="73:69">)</operator></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:44"><expr pos:start="75:9" pos:end="75:43"><name pos:start="75:9" pos:end="75:17">ref_start</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:43"><name pos:start="75:21" pos:end="75:21">c</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:27">last</name><operator pos:start="75:28" pos:end="75:28">.</operator><name pos:start="75:29" pos:end="75:32">data</name><index pos:start="75:33" pos:end="75:43">[<expr pos:start="75:34" pos:end="75:42"><name pos:start="75:34" pos:end="75:42">plane_idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="79:76"><expr pos:start="77:9" pos:end="79:75"><name pos:start="77:9" pos:end="77:15">ref_end</name>   <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:43"><name pos:start="77:21" pos:end="77:21">c</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:27">last</name><operator pos:start="77:28" pos:end="77:28">.</operator><name pos:start="77:29" pos:end="77:32">data</name><index pos:start="77:33" pos:end="77:43">[<expr pos:start="77:34" pos:end="77:42"><name pos:start="77:34" pos:end="77:42">plane_idx</name></expr>]</index></name>

                    <operator pos:start="79:21" pos:end="79:21">+</operator> <operator pos:start="79:23" pos:end="79:23">(</operator><name pos:start="79:24" pos:end="79:25">bw</name> <operator pos:start="79:27" pos:end="79:27">-</operator> <literal type="number" pos:start="79:29" pos:end="79:31">1</literal> <operator pos:start="79:31" pos:end="79:31">+</operator> <name pos:start="79:33" pos:end="79:59"><name pos:start="79:33" pos:end="79:33">c</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:39">last</name><operator pos:start="79:40" pos:end="79:40">.</operator><name pos:start="79:41" pos:end="79:48">linesize</name><index pos:start="79:49" pos:end="79:59">[<expr pos:start="79:50" pos:end="79:58"><name pos:start="79:50" pos:end="79:58">plane_idx</name></expr>]</index></name> <operator pos:start="79:61" pos:end="79:61">*</operator> <operator pos:start="79:63" pos:end="79:63">(</operator><name pos:start="79:64" pos:end="79:65">bh</name> <operator pos:start="79:67" pos:end="79:67">-</operator> <literal type="number" pos:start="79:69" pos:end="79:69">1</literal><operator pos:start="79:70" pos:end="79:70">)</operator><operator pos:start="79:71" pos:end="79:71">)</operator> <operator pos:start="79:73" pos:end="79:73">*</operator> <literal type="number" pos:start="79:75" pos:end="79:75">8</literal></expr>;</expr_stmt>



        <for pos:start="83:9" pos:end="85:54">for <control pos:start="83:13" pos:end="83:32">(<init pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">i</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr>;</init> <condition pos:start="83:21" pos:end="83:27"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:21">i</name> <operator pos:start="83:23" pos:end="83:23">&lt;</operator> <literal type="number" pos:start="83:25" pos:end="83:26">64</literal></expr>;</condition> <incr pos:start="83:29" pos:end="83:31"><expr pos:start="83:29" pos:end="83:31"><name pos:start="83:29" pos:end="83:29">i</name><operator pos:start="83:30" pos:end="83:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:13" pos:end="85:54"><block_content pos:start="85:13" pos:end="85:54">

            <expr_stmt pos:start="85:13" pos:end="85:54"><expr pos:start="85:13" pos:end="85:53"><name pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:20">coordmap</name><index pos:start="85:21" pos:end="85:23">[<expr pos:start="85:22" pos:end="85:22"><name pos:start="85:22" pos:end="85:22">i</name></expr>]</index></name> <operator pos:start="85:25" pos:end="85:25">=</operator> <operator pos:start="85:27" pos:end="85:27">(</operator><name pos:start="85:28" pos:end="85:28">i</name> <operator pos:start="85:30" pos:end="85:30">&amp;</operator> <literal type="number" pos:start="85:32" pos:end="85:32">7</literal><operator pos:start="85:33" pos:end="85:33">)</operator> <operator pos:start="85:35" pos:end="85:35">+</operator> <operator pos:start="85:37" pos:end="85:37">(</operator><name pos:start="85:38" pos:end="85:38">i</name> <operator pos:start="85:40" pos:end="85:41">&gt;&gt;</operator> <literal type="number" pos:start="85:43" pos:end="85:43">3</literal><operator pos:start="85:44" pos:end="85:44">)</operator> <operator pos:start="85:46" pos:end="85:46">*</operator> <name pos:start="85:48" pos:end="85:53">stride</name></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="89:9" pos:end="461:9">for <control pos:start="89:13" pos:end="89:35">(<init pos:start="89:14" pos:end="89:20"><expr pos:start="89:14" pos:end="89:19"><name pos:start="89:14" pos:end="89:15">by</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr>;</init> <condition pos:start="89:22" pos:end="89:29"><expr pos:start="89:22" pos:end="89:28"><name pos:start="89:22" pos:end="89:23">by</name> <operator pos:start="89:25" pos:end="89:25">&lt;</operator> <name pos:start="89:27" pos:end="89:28">bh</name></expr>;</condition> <incr pos:start="89:31" pos:end="89:34"><expr pos:start="89:31" pos:end="89:34"><name pos:start="89:31" pos:end="89:32">by</name><operator pos:start="89:33" pos:end="89:34">++</operator></expr></incr>)</control> <block pos:start="89:37" pos:end="461:9">{<block_content pos:start="91:13" pos:end="459:13">

            <if_stmt pos:start="91:13" pos:end="93:26"><if pos:start="91:13" pos:end="93:26">if <condition pos:start="91:16" pos:end="91:83">(<expr pos:start="91:17" pos:end="91:82"><call pos:start="91:17" pos:end="91:78"><name pos:start="91:17" pos:end="91:32">read_block_types</name><argument_list pos:start="91:33" pos:end="91:78">(<argument pos:start="91:34" pos:end="91:38"><expr pos:start="91:34" pos:end="91:38"><name pos:start="91:34" pos:end="91:38">avctx</name></expr></argument>, <argument pos:start="91:41" pos:end="91:43"><expr pos:start="91:41" pos:end="91:43"><operator pos:start="91:41" pos:end="91:41">&amp;</operator><name pos:start="91:42" pos:end="91:43">gb</name></expr></argument>, <argument pos:start="91:46" pos:end="91:77"><expr pos:start="91:46" pos:end="91:77"><operator pos:start="91:46" pos:end="91:46">&amp;</operator><name pos:start="91:47" pos:end="91:77"><name pos:start="91:47" pos:end="91:47">c</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:55">bundle</name><index pos:start="91:56" pos:end="91:77">[<expr pos:start="91:57" pos:end="91:76"><name pos:start="91:57" pos:end="91:76">BINK_SRC_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="91:80" pos:end="91:80">&lt;</operator> <literal type="number" pos:start="91:82" pos:end="91:82">0</literal></expr>)</condition><block type="pseudo" pos:start="93:17" pos:end="93:26"><block_content pos:start="93:17" pos:end="93:26">

                <return pos:start="93:17" pos:end="93:26">return <expr pos:start="93:24" pos:end="93:25"><operator pos:start="93:24" pos:end="93:24">-</operator><literal type="number" pos:start="93:25" pos:end="93:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="95:13" pos:end="97:26"><if pos:start="95:13" pos:end="97:26">if <condition pos:start="95:16" pos:end="95:87">(<expr pos:start="95:17" pos:end="95:86"><call pos:start="95:17" pos:end="95:82"><name pos:start="95:17" pos:end="95:32">read_block_types</name><argument_list pos:start="95:33" pos:end="95:82">(<argument pos:start="95:34" pos:end="95:38"><expr pos:start="95:34" pos:end="95:38"><name pos:start="95:34" pos:end="95:38">avctx</name></expr></argument>, <argument pos:start="95:41" pos:end="95:43"><expr pos:start="95:41" pos:end="95:43"><operator pos:start="95:41" pos:end="95:41">&amp;</operator><name pos:start="95:42" pos:end="95:43">gb</name></expr></argument>, <argument pos:start="95:46" pos:end="95:81"><expr pos:start="95:46" pos:end="95:81"><operator pos:start="95:46" pos:end="95:46">&amp;</operator><name pos:start="95:47" pos:end="95:81"><name pos:start="95:47" pos:end="95:47">c</name><operator pos:start="95:48" pos:end="95:49">-&gt;</operator><name pos:start="95:50" pos:end="95:55">bundle</name><index pos:start="95:56" pos:end="95:81">[<expr pos:start="95:57" pos:end="95:80"><name pos:start="95:57" pos:end="95:80">BINK_SRC_SUB_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="95:84" pos:end="95:84">&lt;</operator> <literal type="number" pos:start="95:86" pos:end="95:86">0</literal></expr>)</condition><block type="pseudo" pos:start="97:17" pos:end="97:26"><block_content pos:start="97:17" pos:end="97:26">

                <return pos:start="97:17" pos:end="97:26">return <expr pos:start="97:24" pos:end="97:25"><operator pos:start="97:24" pos:end="97:24">-</operator><literal type="number" pos:start="97:25" pos:end="97:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="99:13" pos:end="101:26"><if pos:start="99:13" pos:end="101:26">if <condition pos:start="99:16" pos:end="99:69">(<expr pos:start="99:17" pos:end="99:68"><call pos:start="99:17" pos:end="99:64"><name pos:start="99:17" pos:end="99:27">read_colors</name><argument_list pos:start="99:28" pos:end="99:64">(<argument pos:start="99:29" pos:end="99:31"><expr pos:start="99:29" pos:end="99:31"><operator pos:start="99:29" pos:end="99:29">&amp;</operator><name pos:start="99:30" pos:end="99:31">gb</name></expr></argument>, <argument pos:start="99:34" pos:end="99:60"><expr pos:start="99:34" pos:end="99:60"><operator pos:start="99:34" pos:end="99:34">&amp;</operator><name pos:start="99:35" pos:end="99:60"><name pos:start="99:35" pos:end="99:35">c</name><operator pos:start="99:36" pos:end="99:37">-&gt;</operator><name pos:start="99:38" pos:end="99:43">bundle</name><index pos:start="99:44" pos:end="99:60">[<expr pos:start="99:45" pos:end="99:59"><name pos:start="99:45" pos:end="99:59">BINK_SRC_COLORS</name></expr>]</index></name></expr></argument>, <argument pos:start="99:63" pos:end="99:63"><expr pos:start="99:63" pos:end="99:63"><name pos:start="99:63" pos:end="99:63">c</name></expr></argument>)</argument_list></call> <operator pos:start="99:66" pos:end="99:66">&lt;</operator> <literal type="number" pos:start="99:68" pos:end="99:68">0</literal></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:26"><block_content pos:start="101:17" pos:end="101:26">

                <return pos:start="101:17" pos:end="101:26">return <expr pos:start="101:24" pos:end="101:25"><operator pos:start="101:24" pos:end="101:24">-</operator><literal type="number" pos:start="101:25" pos:end="101:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="103:13" pos:end="105:26"><if pos:start="103:13" pos:end="105:26">if <condition pos:start="103:16" pos:end="103:76">(<expr pos:start="103:17" pos:end="103:75"><call pos:start="103:17" pos:end="103:71"><name pos:start="103:17" pos:end="103:29">read_patterns</name><argument_list pos:start="103:30" pos:end="103:71">(<argument pos:start="103:31" pos:end="103:35"><expr pos:start="103:31" pos:end="103:35"><name pos:start="103:31" pos:end="103:35">avctx</name></expr></argument>, <argument pos:start="103:38" pos:end="103:40"><expr pos:start="103:38" pos:end="103:40"><operator pos:start="103:38" pos:end="103:38">&amp;</operator><name pos:start="103:39" pos:end="103:40">gb</name></expr></argument>, <argument pos:start="103:43" pos:end="103:70"><expr pos:start="103:43" pos:end="103:70"><operator pos:start="103:43" pos:end="103:43">&amp;</operator><name pos:start="103:44" pos:end="103:70"><name pos:start="103:44" pos:end="103:44">c</name><operator pos:start="103:45" pos:end="103:46">-&gt;</operator><name pos:start="103:47" pos:end="103:52">bundle</name><index pos:start="103:53" pos:end="103:70">[<expr pos:start="103:54" pos:end="103:69"><name pos:start="103:54" pos:end="103:69">BINK_SRC_PATTERN</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="103:73" pos:end="103:73">&lt;</operator> <literal type="number" pos:start="103:75" pos:end="103:75">0</literal></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:26"><block_content pos:start="105:17" pos:end="105:26">

                <return pos:start="105:17" pos:end="105:26">return <expr pos:start="105:24" pos:end="105:25"><operator pos:start="105:24" pos:end="105:24">-</operator><literal type="number" pos:start="105:25" pos:end="105:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="107:13" pos:end="109:26"><if pos:start="107:13" pos:end="109:26">if <condition pos:start="107:16" pos:end="107:79">(<expr pos:start="107:17" pos:end="107:78"><call pos:start="107:17" pos:end="107:74"><name pos:start="107:17" pos:end="107:34">read_motion_values</name><argument_list pos:start="107:35" pos:end="107:74">(<argument pos:start="107:36" pos:end="107:40"><expr pos:start="107:36" pos:end="107:40"><name pos:start="107:36" pos:end="107:40">avctx</name></expr></argument>, <argument pos:start="107:43" pos:end="107:45"><expr pos:start="107:43" pos:end="107:45"><operator pos:start="107:43" pos:end="107:43">&amp;</operator><name pos:start="107:44" pos:end="107:45">gb</name></expr></argument>, <argument pos:start="107:48" pos:end="107:73"><expr pos:start="107:48" pos:end="107:73"><operator pos:start="107:48" pos:end="107:48">&amp;</operator><name pos:start="107:49" pos:end="107:73"><name pos:start="107:49" pos:end="107:49">c</name><operator pos:start="107:50" pos:end="107:51">-&gt;</operator><name pos:start="107:52" pos:end="107:57">bundle</name><index pos:start="107:58" pos:end="107:73">[<expr pos:start="107:59" pos:end="107:72"><name pos:start="107:59" pos:end="107:72">BINK_SRC_X_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="107:76" pos:end="107:76">&lt;</operator> <literal type="number" pos:start="107:78" pos:end="107:78">0</literal></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:26"><block_content pos:start="109:17" pos:end="109:26">

                <return pos:start="109:17" pos:end="109:26">return <expr pos:start="109:24" pos:end="109:25"><operator pos:start="109:24" pos:end="109:24">-</operator><literal type="number" pos:start="109:25" pos:end="109:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="111:13" pos:end="113:26"><if pos:start="111:13" pos:end="113:26">if <condition pos:start="111:16" pos:end="111:79">(<expr pos:start="111:17" pos:end="111:78"><call pos:start="111:17" pos:end="111:74"><name pos:start="111:17" pos:end="111:34">read_motion_values</name><argument_list pos:start="111:35" pos:end="111:74">(<argument pos:start="111:36" pos:end="111:40"><expr pos:start="111:36" pos:end="111:40"><name pos:start="111:36" pos:end="111:40">avctx</name></expr></argument>, <argument pos:start="111:43" pos:end="111:45"><expr pos:start="111:43" pos:end="111:45"><operator pos:start="111:43" pos:end="111:43">&amp;</operator><name pos:start="111:44" pos:end="111:45">gb</name></expr></argument>, <argument pos:start="111:48" pos:end="111:73"><expr pos:start="111:48" pos:end="111:73"><operator pos:start="111:48" pos:end="111:48">&amp;</operator><name pos:start="111:49" pos:end="111:73"><name pos:start="111:49" pos:end="111:49">c</name><operator pos:start="111:50" pos:end="111:51">-&gt;</operator><name pos:start="111:52" pos:end="111:57">bundle</name><index pos:start="111:58" pos:end="111:73">[<expr pos:start="111:59" pos:end="111:72"><name pos:start="111:59" pos:end="111:72">BINK_SRC_Y_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="111:76" pos:end="111:76">&lt;</operator> <literal type="number" pos:start="111:78" pos:end="111:78">0</literal></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:26"><block_content pos:start="113:17" pos:end="113:26">

                <return pos:start="113:17" pos:end="113:26">return <expr pos:start="113:24" pos:end="113:25"><operator pos:start="113:24" pos:end="113:24">-</operator><literal type="number" pos:start="113:25" pos:end="113:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="115:13" pos:end="117:26"><if pos:start="115:13" pos:end="117:26">if <condition pos:start="115:16" pos:end="115:90">(<expr pos:start="115:17" pos:end="115:89"><call pos:start="115:17" pos:end="115:85"><name pos:start="115:17" pos:end="115:24">read_dcs</name><argument_list pos:start="115:25" pos:end="115:85">(<argument pos:start="115:26" pos:end="115:30"><expr pos:start="115:26" pos:end="115:30"><name pos:start="115:26" pos:end="115:30">avctx</name></expr></argument>, <argument pos:start="115:33" pos:end="115:35"><expr pos:start="115:33" pos:end="115:35"><operator pos:start="115:33" pos:end="115:33">&amp;</operator><name pos:start="115:34" pos:end="115:35">gb</name></expr></argument>, <argument pos:start="115:38" pos:end="115:66"><expr pos:start="115:38" pos:end="115:66"><operator pos:start="115:38" pos:end="115:38">&amp;</operator><name pos:start="115:39" pos:end="115:66"><name pos:start="115:39" pos:end="115:39">c</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:47">bundle</name><index pos:start="115:48" pos:end="115:66">[<expr pos:start="115:49" pos:end="115:65"><name pos:start="115:49" pos:end="115:65">BINK_SRC_INTRA_DC</name></expr>]</index></name></expr></argument>, <argument pos:start="115:69" pos:end="115:81"><expr pos:start="115:69" pos:end="115:81"><name pos:start="115:69" pos:end="115:81">DC_START_BITS</name></expr></argument>, <argument pos:start="115:84" pos:end="115:84"><expr pos:start="115:84" pos:end="115:84"><literal type="number" pos:start="115:84" pos:end="115:84">0</literal></expr></argument>)</argument_list></call> <operator pos:start="115:87" pos:end="115:87">&lt;</operator> <literal type="number" pos:start="115:89" pos:end="115:89">0</literal></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:26"><block_content pos:start="117:17" pos:end="117:26">

                <return pos:start="117:17" pos:end="117:26">return <expr pos:start="117:24" pos:end="117:25"><operator pos:start="117:24" pos:end="117:24">-</operator><literal type="number" pos:start="117:25" pos:end="117:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="119:13" pos:end="121:26"><if pos:start="119:13" pos:end="121:26">if <condition pos:start="119:16" pos:end="119:90">(<expr pos:start="119:17" pos:end="119:89"><call pos:start="119:17" pos:end="119:85"><name pos:start="119:17" pos:end="119:24">read_dcs</name><argument_list pos:start="119:25" pos:end="119:85">(<argument pos:start="119:26" pos:end="119:30"><expr pos:start="119:26" pos:end="119:30"><name pos:start="119:26" pos:end="119:30">avctx</name></expr></argument>, <argument pos:start="119:33" pos:end="119:35"><expr pos:start="119:33" pos:end="119:35"><operator pos:start="119:33" pos:end="119:33">&amp;</operator><name pos:start="119:34" pos:end="119:35">gb</name></expr></argument>, <argument pos:start="119:38" pos:end="119:66"><expr pos:start="119:38" pos:end="119:66"><operator pos:start="119:38" pos:end="119:38">&amp;</operator><name pos:start="119:39" pos:end="119:66"><name pos:start="119:39" pos:end="119:39">c</name><operator pos:start="119:40" pos:end="119:41">-&gt;</operator><name pos:start="119:42" pos:end="119:47">bundle</name><index pos:start="119:48" pos:end="119:66">[<expr pos:start="119:49" pos:end="119:65"><name pos:start="119:49" pos:end="119:65">BINK_SRC_INTER_DC</name></expr>]</index></name></expr></argument>, <argument pos:start="119:69" pos:end="119:81"><expr pos:start="119:69" pos:end="119:81"><name pos:start="119:69" pos:end="119:81">DC_START_BITS</name></expr></argument>, <argument pos:start="119:84" pos:end="119:84"><expr pos:start="119:84" pos:end="119:84"><literal type="number" pos:start="119:84" pos:end="119:84">1</literal></expr></argument>)</argument_list></call> <operator pos:start="119:87" pos:end="119:87">&lt;</operator> <literal type="number" pos:start="119:89" pos:end="119:89">0</literal></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:26"><block_content pos:start="121:17" pos:end="121:26">

                <return pos:start="121:17" pos:end="121:26">return <expr pos:start="121:24" pos:end="121:25"><operator pos:start="121:24" pos:end="121:24">-</operator><literal type="number" pos:start="121:25" pos:end="121:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="123:13" pos:end="125:26"><if pos:start="123:13" pos:end="125:26">if <condition pos:start="123:16" pos:end="123:68">(<expr pos:start="123:17" pos:end="123:67"><call pos:start="123:17" pos:end="123:63"><name pos:start="123:17" pos:end="123:25">read_runs</name><argument_list pos:start="123:26" pos:end="123:63">(<argument pos:start="123:27" pos:end="123:31"><expr pos:start="123:27" pos:end="123:31"><name pos:start="123:27" pos:end="123:31">avctx</name></expr></argument>, <argument pos:start="123:34" pos:end="123:36"><expr pos:start="123:34" pos:end="123:36"><operator pos:start="123:34" pos:end="123:34">&amp;</operator><name pos:start="123:35" pos:end="123:36">gb</name></expr></argument>, <argument pos:start="123:39" pos:end="123:62"><expr pos:start="123:39" pos:end="123:62"><operator pos:start="123:39" pos:end="123:39">&amp;</operator><name pos:start="123:40" pos:end="123:62"><name pos:start="123:40" pos:end="123:40">c</name><operator pos:start="123:41" pos:end="123:42">-&gt;</operator><name pos:start="123:43" pos:end="123:48">bundle</name><index pos:start="123:49" pos:end="123:62">[<expr pos:start="123:50" pos:end="123:61"><name pos:start="123:50" pos:end="123:61">BINK_SRC_RUN</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="123:65" pos:end="123:65">&lt;</operator> <literal type="number" pos:start="123:67" pos:end="123:67">0</literal></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="125:26"><block_content pos:start="125:17" pos:end="125:26">

                <return pos:start="125:17" pos:end="125:26">return <expr pos:start="125:24" pos:end="125:25"><operator pos:start="125:24" pos:end="125:24">-</operator><literal type="number" pos:start="125:25" pos:end="125:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="129:13" pos:end="131:22"><if pos:start="129:13" pos:end="131:22">if <condition pos:start="129:16" pos:end="129:25">(<expr pos:start="129:17" pos:end="129:24"><name pos:start="129:17" pos:end="129:18">by</name> <operator pos:start="129:20" pos:end="129:21">==</operator> <name pos:start="129:23" pos:end="129:24">bh</name></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:22"><block_content pos:start="131:17" pos:end="131:22">

                <break pos:start="131:17" pos:end="131:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:57"><expr pos:start="133:13" pos:end="133:56"><name pos:start="133:13" pos:end="133:15">dst</name>  <operator pos:start="133:18" pos:end="133:18">=</operator> <name pos:start="133:20" pos:end="133:41"><name pos:start="133:20" pos:end="133:20">c</name><operator pos:start="133:21" pos:end="133:22">-&gt;</operator><name pos:start="133:23" pos:end="133:25">pic</name><operator pos:start="133:26" pos:end="133:26">.</operator><name pos:start="133:27" pos:end="133:30">data</name><index pos:start="133:31" pos:end="133:41">[<expr pos:start="133:32" pos:end="133:40"><name pos:start="133:32" pos:end="133:40">plane_idx</name></expr>]</index></name>  <operator pos:start="133:44" pos:end="133:44">+</operator> <literal type="number" pos:start="133:46" pos:end="133:46">8</literal><operator pos:start="133:47" pos:end="133:47">*</operator><name pos:start="133:48" pos:end="133:49">by</name><operator pos:start="133:50" pos:end="133:50">*</operator><name pos:start="133:51" pos:end="133:56">stride</name></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:57"><expr pos:start="135:13" pos:end="135:56"><name pos:start="135:13" pos:end="135:16">prev</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:42"><name pos:start="135:20" pos:end="135:20">c</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:26">last</name><operator pos:start="135:27" pos:end="135:27">.</operator><name pos:start="135:28" pos:end="135:31">data</name><index pos:start="135:32" pos:end="135:42">[<expr pos:start="135:33" pos:end="135:41"><name pos:start="135:33" pos:end="135:41">plane_idx</name></expr>]</index></name> <operator pos:start="135:44" pos:end="135:44">+</operator> <literal type="number" pos:start="135:46" pos:end="135:46">8</literal><operator pos:start="135:47" pos:end="135:47">*</operator><name pos:start="135:48" pos:end="135:49">by</name><operator pos:start="135:50" pos:end="135:50">*</operator><name pos:start="135:51" pos:end="135:56">stride</name></expr>;</expr_stmt>

            <for pos:start="137:13" pos:end="459:13">for <control pos:start="137:17" pos:end="137:60">(<init pos:start="137:18" pos:end="137:24"><expr pos:start="137:18" pos:end="137:23"><name pos:start="137:18" pos:end="137:19">bx</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr>;</init> <condition pos:start="137:26" pos:end="137:33"><expr pos:start="137:26" pos:end="137:32"><name pos:start="137:26" pos:end="137:27">bx</name> <operator pos:start="137:29" pos:end="137:29">&lt;</operator> <name pos:start="137:31" pos:end="137:32">bw</name></expr>;</condition> <incr pos:start="137:35" pos:end="137:59"><expr pos:start="137:35" pos:end="137:38"><name pos:start="137:35" pos:end="137:36">bx</name><operator pos:start="137:37" pos:end="137:38">++</operator></expr><operator pos:start="137:39" pos:end="137:39">,</operator> <expr pos:start="137:41" pos:end="137:48"><name pos:start="137:41" pos:end="137:43">dst</name> <operator pos:start="137:45" pos:end="137:46">+=</operator> <literal type="number" pos:start="137:48" pos:end="137:48">8</literal></expr><operator pos:start="137:49" pos:end="137:49">,</operator> <expr pos:start="137:51" pos:end="137:59"><name pos:start="137:51" pos:end="137:54">prev</name> <operator pos:start="137:56" pos:end="137:57">+=</operator> <literal type="number" pos:start="137:59" pos:end="137:59">8</literal></expr></incr>)</control> <block pos:start="137:62" pos:end="459:13">{<block_content pos:start="139:17" pos:end="457:17">

                <expr_stmt pos:start="139:17" pos:end="139:57"><expr pos:start="139:17" pos:end="139:56"><name pos:start="139:17" pos:end="139:19">blk</name> <operator pos:start="139:21" pos:end="139:21">=</operator> <call pos:start="139:23" pos:end="139:56"><name pos:start="139:23" pos:end="139:31">get_value</name><argument_list pos:start="139:32" pos:end="139:56">(<argument pos:start="139:33" pos:end="139:33"><expr pos:start="139:33" pos:end="139:33"><name pos:start="139:33" pos:end="139:33">c</name></expr></argument>, <argument pos:start="139:36" pos:end="139:55"><expr pos:start="139:36" pos:end="139:55"><name pos:start="139:36" pos:end="139:55">BINK_SRC_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:start="141:17" pos:end="141:99">// 16x16 block type on odd line means part of the already decoded block, so skip it</comment>

                <if_stmt pos:start="143:17" pos:end="153:17"><if pos:start="143:17" pos:end="153:17">if <condition pos:start="143:20" pos:end="143:52">(<expr pos:start="143:21" pos:end="143:51"><operator pos:start="143:21" pos:end="143:21">(</operator><name pos:start="143:22" pos:end="143:23">by</name> <operator pos:start="143:25" pos:end="143:25">&amp;</operator> <literal type="number" pos:start="143:27" pos:end="143:27">1</literal><operator pos:start="143:28" pos:end="143:28">)</operator> <operator pos:start="143:30" pos:end="143:31">&amp;&amp;</operator> <name pos:start="143:33" pos:end="143:35">blk</name> <operator pos:start="143:37" pos:end="143:38">==</operator> <name pos:start="143:40" pos:end="143:51">SCALED_BLOCK</name></expr>)</condition> <block pos:start="143:54" pos:end="153:17">{<block_content pos:start="145:21" pos:end="151:29">

                    <expr_stmt pos:start="145:21" pos:end="145:25"><expr pos:start="145:21" pos:end="145:24"><name pos:start="145:21" pos:end="145:22">bx</name><operator pos:start="145:23" pos:end="145:24">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:30"><expr pos:start="147:21" pos:end="147:29"><name pos:start="147:21" pos:end="147:23">dst</name>  <operator pos:start="147:26" pos:end="147:27">+=</operator> <literal type="number" pos:start="147:29" pos:end="147:29">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:30"><expr pos:start="149:21" pos:end="149:29"><name pos:start="149:21" pos:end="149:24">prev</name> <operator pos:start="149:26" pos:end="149:27">+=</operator> <literal type="number" pos:start="149:29" pos:end="149:29">8</literal></expr>;</expr_stmt>

                    <continue pos:start="151:21" pos:end="151:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <switch pos:start="155:17" pos:end="457:17">switch <condition pos:start="155:24" pos:end="155:28">(<expr pos:start="155:25" pos:end="155:27"><name pos:start="155:25" pos:end="155:27">blk</name></expr>)</condition> <block pos:start="155:30" pos:end="457:17">{<block_content pos:start="157:17" pos:end="455:30">

                <case pos:start="157:17" pos:end="157:32">case <expr pos:start="157:22" pos:end="157:31"><name pos:start="157:22" pos:end="157:31">SKIP_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="159:21" pos:end="159:70"><expr pos:start="159:21" pos:end="159:69"><name pos:start="159:21" pos:end="159:47"><name pos:start="159:21" pos:end="159:21">c</name><operator pos:start="159:22" pos:end="159:23">-&gt;</operator><name pos:start="159:24" pos:end="159:26">dsp</name><operator pos:start="159:27" pos:end="159:27">.</operator><name pos:start="159:28" pos:end="159:41">put_pixels_tab</name><index pos:start="159:42" pos:end="159:44">[<expr pos:start="159:43" pos:end="159:43"><literal type="number" pos:start="159:43" pos:end="159:43">1</literal></expr>]</index><index pos:start="159:45" pos:end="159:47">[<expr pos:start="159:46" pos:end="159:46"><literal type="number" pos:start="159:46" pos:end="159:46">0</literal></expr>]</index></name><operator pos:start="159:48" pos:end="159:48">(</operator><name pos:start="159:49" pos:end="159:51">dst</name><operator pos:start="159:52" pos:end="159:52">,</operator> <name pos:start="159:54" pos:end="159:57">prev</name><operator pos:start="159:58" pos:end="159:58">,</operator> <name pos:start="159:60" pos:end="159:65">stride</name><operator pos:start="159:66" pos:end="159:66">,</operator> <literal type="number" pos:start="159:68" pos:end="159:68">8</literal><operator pos:start="159:69" pos:end="159:69">)</operator></expr>;</expr_stmt>

                    <break pos:start="161:21" pos:end="161:26">break;</break>

                <case pos:start="163:17" pos:end="163:34">case <expr pos:start="163:22" pos:end="163:33"><name pos:start="163:22" pos:end="163:33">SCALED_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="165:21" pos:end="165:65"><expr pos:start="165:21" pos:end="165:64"><name pos:start="165:21" pos:end="165:23">blk</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <call pos:start="165:27" pos:end="165:64"><name pos:start="165:27" pos:end="165:35">get_value</name><argument_list pos:start="165:36" pos:end="165:64">(<argument pos:start="165:37" pos:end="165:37"><expr pos:start="165:37" pos:end="165:37"><name pos:start="165:37" pos:end="165:37">c</name></expr></argument>, <argument pos:start="165:40" pos:end="165:63"><expr pos:start="165:40" pos:end="165:63"><name pos:start="165:40" pos:end="165:63">BINK_SRC_SUB_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="167:21" pos:end="271:21">switch <condition pos:start="167:28" pos:end="167:32">(<expr pos:start="167:29" pos:end="167:31"><name pos:start="167:29" pos:end="167:31">blk</name></expr>)</condition> <block pos:start="167:34" pos:end="271:21">{<block_content pos:start="169:21" pos:end="269:34">

                    <case pos:start="169:21" pos:end="169:35">case <expr pos:start="169:26" pos:end="169:34"><name pos:start="169:26" pos:end="169:34">RUN_BLOCK</name></expr>:</case>

                        <expr_stmt pos:start="171:25" pos:end="171:63"><expr pos:start="171:25" pos:end="171:62"><name pos:start="171:25" pos:end="171:28">scan</name> <operator pos:start="171:30" pos:end="171:30">=</operator> <name pos:start="171:32" pos:end="171:62"><name pos:start="171:32" pos:end="171:44">bink_patterns</name><index pos:start="171:45" pos:end="171:62">[<expr pos:start="171:46" pos:end="171:61"><call pos:start="171:46" pos:end="171:61"><name pos:start="171:46" pos:end="171:53">get_bits</name><argument_list pos:start="171:54" pos:end="171:61">(<argument pos:start="171:55" pos:end="171:57"><expr pos:start="171:55" pos:end="171:57"><operator pos:start="171:55" pos:end="171:55">&amp;</operator><name pos:start="171:56" pos:end="171:57">gb</name></expr></argument>, <argument pos:start="171:60" pos:end="171:60"><expr pos:start="171:60" pos:end="171:60"><literal type="number" pos:start="171:60" pos:end="171:60">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="173:25" pos:end="173:30"><expr pos:start="173:25" pos:end="173:29"><name pos:start="173:25" pos:end="173:25">i</name> <operator pos:start="173:27" pos:end="173:27">=</operator> <literal type="number" pos:start="173:29" pos:end="173:29">0</literal></expr>;</expr_stmt>

                        <do pos:start="175:25" pos:end="207:41">do <block pos:start="175:28" pos:end="207:25">{<block_content pos:start="177:29" pos:end="205:29">

                            <decl_stmt pos:start="177:29" pos:end="177:69"><decl pos:start="177:29" pos:end="177:68"><type pos:start="177:29" pos:end="177:31"><name pos:start="177:29" pos:end="177:31">int</name></type> <name pos:start="177:33" pos:end="177:35">run</name> <init pos:start="177:37" pos:end="177:68">= <expr pos:start="177:39" pos:end="177:68"><call pos:start="177:39" pos:end="177:64"><name pos:start="177:39" pos:end="177:47">get_value</name><argument_list pos:start="177:48" pos:end="177:64">(<argument pos:start="177:49" pos:end="177:49"><expr pos:start="177:49" pos:end="177:49"><name pos:start="177:49" pos:end="177:49">c</name></expr></argument>, <argument pos:start="177:52" pos:end="177:63"><expr pos:start="177:52" pos:end="177:63"><name pos:start="177:52" pos:end="177:63">BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator pos:start="177:66" pos:end="177:66">+</operator> <literal type="number" pos:start="177:68" pos:end="177:68">1</literal></expr></init></decl>;</decl_stmt>



                            <expr_stmt pos:start="181:29" pos:end="181:37"><expr pos:start="181:29" pos:end="181:36"><name pos:start="181:29" pos:end="181:29">i</name> <operator pos:start="181:31" pos:end="181:32">+=</operator> <name pos:start="181:34" pos:end="181:36">run</name></expr>;</expr_stmt>

                            <if_stmt pos:start="183:29" pos:end="189:29"><if pos:start="183:29" pos:end="189:29">if <condition pos:start="183:32" pos:end="183:39">(<expr pos:start="183:33" pos:end="183:38"><name pos:start="183:33" pos:end="183:33">i</name> <operator pos:start="183:35" pos:end="183:35">&gt;</operator> <literal type="number" pos:start="183:37" pos:end="183:38">64</literal></expr>)</condition> <block pos:start="183:41" pos:end="189:29">{<block_content pos:start="185:33" pos:end="187:42">

                                <expr_stmt pos:start="185:33" pos:end="185:88"><expr pos:start="185:33" pos:end="185:87"><call pos:start="185:33" pos:end="185:87"><name pos:start="185:33" pos:end="185:38">av_log</name><argument_list pos:start="185:39" pos:end="185:87">(<argument pos:start="185:40" pos:end="185:44"><expr pos:start="185:40" pos:end="185:44"><name pos:start="185:40" pos:end="185:44">avctx</name></expr></argument>, <argument pos:start="185:47" pos:end="185:58"><expr pos:start="185:47" pos:end="185:58"><name pos:start="185:47" pos:end="185:58">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:61" pos:end="185:86"><expr pos:start="185:61" pos:end="185:86"><literal type="string" pos:start="185:61" pos:end="185:86">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="187:33" pos:end="187:42">return <expr pos:start="187:40" pos:end="187:41"><operator pos:start="187:40" pos:end="187:40">-</operator><literal type="number" pos:start="187:41" pos:end="187:41">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                            <if_stmt pos:start="191:29" pos:end="205:29"><if pos:start="191:29" pos:end="199:29">if <condition pos:start="191:32" pos:end="191:47">(<expr pos:start="191:33" pos:end="191:46"><call pos:start="191:33" pos:end="191:46"><name pos:start="191:33" pos:end="191:41">get_bits1</name><argument_list pos:start="191:42" pos:end="191:46">(<argument pos:start="191:43" pos:end="191:45"><expr pos:start="191:43" pos:end="191:45"><operator pos:start="191:43" pos:end="191:43">&amp;</operator><name pos:start="191:44" pos:end="191:45">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:49" pos:end="199:29">{<block_content pos:start="193:33" pos:end="197:56">

                                <expr_stmt pos:start="193:33" pos:end="193:66"><expr pos:start="193:33" pos:end="193:65"><name pos:start="193:33" pos:end="193:33">v</name> <operator pos:start="193:35" pos:end="193:35">=</operator> <call pos:start="193:37" pos:end="193:65"><name pos:start="193:37" pos:end="193:45">get_value</name><argument_list pos:start="193:46" pos:end="193:65">(<argument pos:start="193:47" pos:end="193:47"><expr pos:start="193:47" pos:end="193:47"><name pos:start="193:47" pos:end="193:47">c</name></expr></argument>, <argument pos:start="193:50" pos:end="193:64"><expr pos:start="193:50" pos:end="193:64"><name pos:start="193:50" pos:end="193:64">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <for pos:start="195:33" pos:end="197:56">for <control pos:start="195:37" pos:end="195:57">(<init pos:start="195:38" pos:end="195:43"><expr pos:start="195:38" pos:end="195:42"><name pos:start="195:38" pos:end="195:38">j</name> <operator pos:start="195:40" pos:end="195:40">=</operator> <literal type="number" pos:start="195:42" pos:end="195:42">0</literal></expr>;</init> <condition pos:start="195:45" pos:end="195:52"><expr pos:start="195:45" pos:end="195:51"><name pos:start="195:45" pos:end="195:45">j</name> <operator pos:start="195:47" pos:end="195:47">&lt;</operator> <name pos:start="195:49" pos:end="195:51">run</name></expr>;</condition> <incr pos:start="195:54" pos:end="195:56"><expr pos:start="195:54" pos:end="195:56"><name pos:start="195:54" pos:end="195:54">j</name><operator pos:start="195:55" pos:end="195:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="197:37" pos:end="197:56"><block_content pos:start="197:37" pos:end="197:56">

                                    <expr_stmt pos:start="197:37" pos:end="197:56"><expr pos:start="197:37" pos:end="197:55"><name pos:start="197:37" pos:end="197:51"><name pos:start="197:37" pos:end="197:42">ublock</name><index pos:start="197:43" pos:end="197:51">[<expr pos:start="197:44" pos:end="197:50"><operator pos:start="197:44" pos:end="197:44">*</operator><name pos:start="197:45" pos:end="197:48">scan</name><operator pos:start="197:49" pos:end="197:50">++</operator></expr>]</index></name> <operator pos:start="197:53" pos:end="197:53">=</operator> <name pos:start="197:55" pos:end="197:55">v</name></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></if> <else pos:start="199:31" pos:end="205:29">else <block pos:start="199:36" pos:end="205:29">{<block_content pos:start="201:33" pos:end="203:84">

                                <for pos:start="201:33" pos:end="203:84">for <control pos:start="201:37" pos:end="201:57">(<init pos:start="201:38" pos:end="201:43"><expr pos:start="201:38" pos:end="201:42"><name pos:start="201:38" pos:end="201:38">j</name> <operator pos:start="201:40" pos:end="201:40">=</operator> <literal type="number" pos:start="201:42" pos:end="201:42">0</literal></expr>;</init> <condition pos:start="201:45" pos:end="201:52"><expr pos:start="201:45" pos:end="201:51"><name pos:start="201:45" pos:end="201:45">j</name> <operator pos:start="201:47" pos:end="201:47">&lt;</operator> <name pos:start="201:49" pos:end="201:51">run</name></expr>;</condition> <incr pos:start="201:54" pos:end="201:56"><expr pos:start="201:54" pos:end="201:56"><name pos:start="201:54" pos:end="201:54">j</name><operator pos:start="201:55" pos:end="201:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="203:37" pos:end="203:84"><block_content pos:start="203:37" pos:end="203:84">

                                    <expr_stmt pos:start="203:37" pos:end="203:84"><expr pos:start="203:37" pos:end="203:83"><name pos:start="203:37" pos:end="203:51"><name pos:start="203:37" pos:end="203:42">ublock</name><index pos:start="203:43" pos:end="203:51">[<expr pos:start="203:44" pos:end="203:50"><operator pos:start="203:44" pos:end="203:44">*</operator><name pos:start="203:45" pos:end="203:48">scan</name><operator pos:start="203:49" pos:end="203:50">++</operator></expr>]</index></name> <operator pos:start="203:53" pos:end="203:53">=</operator> <call pos:start="203:55" pos:end="203:83"><name pos:start="203:55" pos:end="203:63">get_value</name><argument_list pos:start="203:64" pos:end="203:83">(<argument pos:start="203:65" pos:end="203:65"><expr pos:start="203:65" pos:end="203:65"><name pos:start="203:65" pos:end="203:65">c</name></expr></argument>, <argument pos:start="203:68" pos:end="203:82"><expr pos:start="203:68" pos:end="203:82"><name pos:start="203:68" pos:end="203:82">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block> while <condition pos:start="207:33" pos:end="207:40">(<expr pos:start="207:34" pos:end="207:39"><name pos:start="207:34" pos:end="207:34">i</name> <operator pos:start="207:36" pos:end="207:36">&lt;</operator> <literal type="number" pos:start="207:38" pos:end="207:39">63</literal></expr>)</condition>;</do>

                        <if_stmt pos:start="209:25" pos:end="211:76"><if pos:start="209:25" pos:end="211:76">if <condition pos:start="209:28" pos:end="209:36">(<expr pos:start="209:29" pos:end="209:35"><name pos:start="209:29" pos:end="209:29">i</name> <operator pos:start="209:31" pos:end="209:32">==</operator> <literal type="number" pos:start="209:34" pos:end="209:35">63</literal></expr>)</condition><block type="pseudo" pos:start="211:29" pos:end="211:76"><block_content pos:start="211:29" pos:end="211:76">

                            <expr_stmt pos:start="211:29" pos:end="211:76"><expr pos:start="211:29" pos:end="211:75"><name pos:start="211:29" pos:end="211:43"><name pos:start="211:29" pos:end="211:34">ublock</name><index pos:start="211:35" pos:end="211:43">[<expr pos:start="211:36" pos:end="211:42"><operator pos:start="211:36" pos:end="211:36">*</operator><name pos:start="211:37" pos:end="211:40">scan</name><operator pos:start="211:41" pos:end="211:42">++</operator></expr>]</index></name> <operator pos:start="211:45" pos:end="211:45">=</operator> <call pos:start="211:47" pos:end="211:75"><name pos:start="211:47" pos:end="211:55">get_value</name><argument_list pos:start="211:56" pos:end="211:75">(<argument pos:start="211:57" pos:end="211:57"><expr pos:start="211:57" pos:end="211:57"><name pos:start="211:57" pos:end="211:57">c</name></expr></argument>, <argument pos:start="211:60" pos:end="211:74"><expr pos:start="211:60" pos:end="211:74"><name pos:start="211:60" pos:end="211:74">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <break pos:start="213:25" pos:end="213:30">break;</break>

                    <case pos:start="215:21" pos:end="215:37">case <expr pos:start="215:26" pos:end="215:36"><name pos:start="215:26" pos:end="215:36">INTRA_BLOCK</name></expr>:</case>

                        <expr_stmt pos:start="217:25" pos:end="217:50"><expr pos:start="217:25" pos:end="217:49"><call pos:start="217:25" pos:end="217:49"><name pos:start="217:25" pos:end="217:42"><name pos:start="217:25" pos:end="217:25">c</name><operator pos:start="217:26" pos:end="217:27">-&gt;</operator><name pos:start="217:28" pos:end="217:30">dsp</name><operator pos:start="217:31" pos:end="217:31">.</operator><name pos:start="217:32" pos:end="217:42">clear_block</name></name><argument_list pos:start="217:43" pos:end="217:49">(<argument pos:start="217:44" pos:end="217:48"><expr pos:start="217:44" pos:end="217:48"><name pos:start="217:44" pos:end="217:48">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="219:25" pos:end="219:67"><expr pos:start="219:25" pos:end="219:66"><name pos:start="219:25" pos:end="219:32"><name pos:start="219:25" pos:end="219:29">block</name><index pos:start="219:30" pos:end="219:32">[<expr pos:start="219:31" pos:end="219:31"><literal type="number" pos:start="219:31" pos:end="219:31">0</literal></expr>]</index></name> <operator pos:start="219:34" pos:end="219:34">=</operator> <call pos:start="219:36" pos:end="219:66"><name pos:start="219:36" pos:end="219:44">get_value</name><argument_list pos:start="219:45" pos:end="219:66">(<argument pos:start="219:46" pos:end="219:46"><expr pos:start="219:46" pos:end="219:46"><name pos:start="219:46" pos:end="219:46">c</name></expr></argument>, <argument pos:start="219:49" pos:end="219:65"><expr pos:start="219:49" pos:end="219:65"><name pos:start="219:49" pos:end="219:65">BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="221:25" pos:end="221:80"><expr pos:start="221:25" pos:end="221:79"><call pos:start="221:25" pos:end="221:79"><name pos:start="221:25" pos:end="221:39">read_dct_coeffs</name><argument_list pos:start="221:40" pos:end="221:79">(<argument pos:start="221:41" pos:end="221:43"><expr pos:start="221:41" pos:end="221:43"><operator pos:start="221:41" pos:end="221:41">&amp;</operator><name pos:start="221:42" pos:end="221:43">gb</name></expr></argument>, <argument pos:start="221:46" pos:end="221:50"><expr pos:start="221:46" pos:end="221:50"><name pos:start="221:46" pos:end="221:50">block</name></expr></argument>, <argument pos:start="221:53" pos:end="221:75"><expr pos:start="221:53" pos:end="221:75"><name pos:start="221:53" pos:end="221:75"><name pos:start="221:53" pos:end="221:53">c</name><operator pos:start="221:54" pos:end="221:55">-&gt;</operator><name pos:start="221:56" pos:end="221:64">scantable</name><operator pos:start="221:65" pos:end="221:65">.</operator><name pos:start="221:66" pos:end="221:75">permutated</name></name></expr></argument>, <argument pos:start="221:78" pos:end="221:78"><expr pos:start="221:78" pos:end="221:78"><literal type="number" pos:start="221:78" pos:end="221:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="223:25" pos:end="223:43"><expr pos:start="223:25" pos:end="223:42"><call pos:start="223:25" pos:end="223:42"><name pos:start="223:25" pos:end="223:35"><name pos:start="223:25" pos:end="223:25">c</name><operator pos:start="223:26" pos:end="223:27">-&gt;</operator><name pos:start="223:28" pos:end="223:30">dsp</name><operator pos:start="223:31" pos:end="223:31">.</operator><name pos:start="223:32" pos:end="223:35">idct</name></name><argument_list pos:start="223:36" pos:end="223:42">(<argument pos:start="223:37" pos:end="223:41"><expr pos:start="223:37" pos:end="223:41"><name pos:start="223:37" pos:end="223:41">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="225:25" pos:end="225:71"><expr pos:start="225:25" pos:end="225:70"><call pos:start="225:25" pos:end="225:70"><name pos:start="225:25" pos:end="225:52"><name pos:start="225:25" pos:end="225:25">c</name><operator pos:start="225:26" pos:end="225:27">-&gt;</operator><name pos:start="225:28" pos:end="225:30">dsp</name><operator pos:start="225:31" pos:end="225:31">.</operator><name pos:start="225:32" pos:end="225:52">put_pixels_nonclamped</name></name><argument_list pos:start="225:53" pos:end="225:70">(<argument pos:start="225:54" pos:end="225:58"><expr pos:start="225:54" pos:end="225:58"><name pos:start="225:54" pos:end="225:58">block</name></expr></argument>, <argument pos:start="225:61" pos:end="225:66"><expr pos:start="225:61" pos:end="225:66"><name pos:start="225:61" pos:end="225:66">ublock</name></expr></argument>, <argument pos:start="225:69" pos:end="225:69"><expr pos:start="225:69" pos:end="225:69"><literal type="number" pos:start="225:69" pos:end="225:69">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="227:25" pos:end="227:30">break;</break>

                    <case pos:start="229:21" pos:end="229:36">case <expr pos:start="229:26" pos:end="229:35"><name pos:start="229:26" pos:end="229:35">FILL_BLOCK</name></expr>:</case>

                        <expr_stmt pos:start="231:25" pos:end="231:58"><expr pos:start="231:25" pos:end="231:57"><name pos:start="231:25" pos:end="231:25">v</name> <operator pos:start="231:27" pos:end="231:27">=</operator> <call pos:start="231:29" pos:end="231:57"><name pos:start="231:29" pos:end="231:37">get_value</name><argument_list pos:start="231:38" pos:end="231:57">(<argument pos:start="231:39" pos:end="231:39"><expr pos:start="231:39" pos:end="231:39"><name pos:start="231:39" pos:end="231:39">c</name></expr></argument>, <argument pos:start="231:42" pos:end="231:56"><expr pos:start="231:42" pos:end="231:56"><name pos:start="231:42" pos:end="231:56">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="233:25" pos:end="233:69"><expr pos:start="233:25" pos:end="233:68"><name pos:start="233:25" pos:end="233:48"><name pos:start="233:25" pos:end="233:25">c</name><operator pos:start="233:26" pos:end="233:27">-&gt;</operator><name pos:start="233:28" pos:end="233:30">dsp</name><operator pos:start="233:31" pos:end="233:31">.</operator><name pos:start="233:32" pos:end="233:45">fill_block_tab</name><index pos:start="233:46" pos:end="233:48">[<expr pos:start="233:47" pos:end="233:47"><literal type="number" pos:start="233:47" pos:end="233:47">0</literal></expr>]</index></name><operator pos:start="233:49" pos:end="233:49">(</operator><name pos:start="233:50" pos:end="233:52">dst</name><operator pos:start="233:53" pos:end="233:53">,</operator> <name pos:start="233:55" pos:end="233:55">v</name><operator pos:start="233:56" pos:end="233:56">,</operator> <name pos:start="233:58" pos:end="233:63">stride</name><operator pos:start="233:64" pos:end="233:64">,</operator> <literal type="number" pos:start="233:66" pos:end="233:67">16</literal><operator pos:start="233:68" pos:end="233:68">)</operator></expr>;</expr_stmt>

                        <break pos:start="235:25" pos:end="235:30">break;</break>

                    <case pos:start="237:21" pos:end="237:39">case <expr pos:start="237:26" pos:end="237:38"><name pos:start="237:26" pos:end="237:38">PATTERN_BLOCK</name></expr>:</case>

                        <for pos:start="239:25" pos:end="241:67">for <control pos:start="239:29" pos:end="239:47">(<init pos:start="239:30" pos:end="239:35"><expr pos:start="239:30" pos:end="239:34"><name pos:start="239:30" pos:end="239:30">i</name> <operator pos:start="239:32" pos:end="239:32">=</operator> <literal type="number" pos:start="239:34" pos:end="239:34">0</literal></expr>;</init> <condition pos:start="239:37" pos:end="239:42"><expr pos:start="239:37" pos:end="239:41"><name pos:start="239:37" pos:end="239:37">i</name> <operator pos:start="239:39" pos:end="239:39">&lt;</operator> <literal type="number" pos:start="239:41" pos:end="239:41">2</literal></expr>;</condition> <incr pos:start="239:44" pos:end="239:46"><expr pos:start="239:44" pos:end="239:46"><name pos:start="239:44" pos:end="239:44">i</name><operator pos:start="239:45" pos:end="239:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="241:29" pos:end="241:67"><block_content pos:start="241:29" pos:end="241:67">

                            <expr_stmt pos:start="241:29" pos:end="241:67"><expr pos:start="241:29" pos:end="241:66"><name pos:start="241:29" pos:end="241:34"><name pos:start="241:29" pos:end="241:31">col</name><index pos:start="241:32" pos:end="241:34">[<expr pos:start="241:33" pos:end="241:33"><name pos:start="241:33" pos:end="241:33">i</name></expr>]</index></name> <operator pos:start="241:36" pos:end="241:36">=</operator> <call pos:start="241:38" pos:end="241:66"><name pos:start="241:38" pos:end="241:46">get_value</name><argument_list pos:start="241:47" pos:end="241:66">(<argument pos:start="241:48" pos:end="241:48"><expr pos:start="241:48" pos:end="241:48"><name pos:start="241:48" pos:end="241:48">c</name></expr></argument>, <argument pos:start="241:51" pos:end="241:65"><expr pos:start="241:51" pos:end="241:65"><name pos:start="241:51" pos:end="241:65">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        <for pos:start="243:25" pos:end="251:25">for <control pos:start="243:29" pos:end="243:47">(<init pos:start="243:30" pos:end="243:35"><expr pos:start="243:30" pos:end="243:34"><name pos:start="243:30" pos:end="243:30">j</name> <operator pos:start="243:32" pos:end="243:32">=</operator> <literal type="number" pos:start="243:34" pos:end="243:34">0</literal></expr>;</init> <condition pos:start="243:37" pos:end="243:42"><expr pos:start="243:37" pos:end="243:41"><name pos:start="243:37" pos:end="243:37">j</name> <operator pos:start="243:39" pos:end="243:39">&lt;</operator> <literal type="number" pos:start="243:41" pos:end="243:41">8</literal></expr>;</condition> <incr pos:start="243:44" pos:end="243:46"><expr pos:start="243:44" pos:end="243:46"><name pos:start="243:44" pos:end="243:44">j</name><operator pos:start="243:45" pos:end="243:46">++</operator></expr></incr>)</control> <block pos:start="243:49" pos:end="251:25">{<block_content pos:start="245:29" pos:end="249:61">

                            <expr_stmt pos:start="245:29" pos:end="245:63"><expr pos:start="245:29" pos:end="245:62"><name pos:start="245:29" pos:end="245:29">v</name> <operator pos:start="245:31" pos:end="245:31">=</operator> <call pos:start="245:33" pos:end="245:62"><name pos:start="245:33" pos:end="245:41">get_value</name><argument_list pos:start="245:42" pos:end="245:62">(<argument pos:start="245:43" pos:end="245:43"><expr pos:start="245:43" pos:end="245:43"><name pos:start="245:43" pos:end="245:43">c</name></expr></argument>, <argument pos:start="245:46" pos:end="245:61"><expr pos:start="245:46" pos:end="245:61"><name pos:start="245:46" pos:end="245:61">BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="247:29" pos:end="249:61">for <control pos:start="247:33" pos:end="247:60">(<init pos:start="247:34" pos:end="247:39"><expr pos:start="247:34" pos:end="247:38"><name pos:start="247:34" pos:end="247:34">i</name> <operator pos:start="247:36" pos:end="247:36">=</operator> <literal type="number" pos:start="247:38" pos:end="247:38">0</literal></expr>;</init> <condition pos:start="247:41" pos:end="247:46"><expr pos:start="247:41" pos:end="247:45"><name pos:start="247:41" pos:end="247:41">i</name> <operator pos:start="247:43" pos:end="247:43">&lt;</operator> <literal type="number" pos:start="247:45" pos:end="247:45">8</literal></expr>;</condition> <incr pos:start="247:48" pos:end="247:59"><expr pos:start="247:48" pos:end="247:50"><name pos:start="247:48" pos:end="247:48">i</name><operator pos:start="247:49" pos:end="247:50">++</operator></expr><operator pos:start="247:51" pos:end="247:51">,</operator> <expr pos:start="247:53" pos:end="247:59"><name pos:start="247:53" pos:end="247:53">v</name> <operator pos:start="247:55" pos:end="247:57">&gt;&gt;=</operator> <literal type="number" pos:start="247:59" pos:end="247:59">1</literal></expr></incr>)</control><block type="pseudo" pos:start="249:33" pos:end="249:61"><block_content pos:start="249:33" pos:end="249:61">

                                <expr_stmt pos:start="249:33" pos:end="249:61"><expr pos:start="249:33" pos:end="249:60"><name pos:start="249:33" pos:end="249:47"><name pos:start="249:33" pos:end="249:38">ublock</name><index pos:start="249:39" pos:end="249:47">[<expr pos:start="249:40" pos:end="249:46"><name pos:start="249:40" pos:end="249:40">i</name> <operator pos:start="249:42" pos:end="249:42">+</operator> <name pos:start="249:44" pos:end="249:44">j</name><operator pos:start="249:45" pos:end="249:45">*</operator><literal type="number" pos:start="249:46" pos:end="249:46">8</literal></expr>]</index></name> <operator pos:start="249:49" pos:end="249:49">=</operator> <name pos:start="249:51" pos:end="249:60"><name pos:start="249:51" pos:end="249:53">col</name><index pos:start="249:54" pos:end="249:60">[<expr pos:start="249:55" pos:end="249:59"><name pos:start="249:55" pos:end="249:55">v</name> <operator pos:start="249:57" pos:end="249:57">&amp;</operator> <literal type="number" pos:start="249:59" pos:end="249:59">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></for>

                        <break pos:start="253:25" pos:end="253:30">break;</break>

                    <case pos:start="255:21" pos:end="255:35">case <expr pos:start="255:26" pos:end="255:34"><name pos:start="255:26" pos:end="255:34">RAW_BLOCK</name></expr>:</case>

                        <for pos:start="257:25" pos:end="261:80">for <control pos:start="257:29" pos:end="257:47">(<init pos:start="257:30" pos:end="257:35"><expr pos:start="257:30" pos:end="257:34"><name pos:start="257:30" pos:end="257:30">j</name> <operator pos:start="257:32" pos:end="257:32">=</operator> <literal type="number" pos:start="257:34" pos:end="257:34">0</literal></expr>;</init> <condition pos:start="257:37" pos:end="257:42"><expr pos:start="257:37" pos:end="257:41"><name pos:start="257:37" pos:end="257:37">j</name> <operator pos:start="257:39" pos:end="257:39">&lt;</operator> <literal type="number" pos:start="257:41" pos:end="257:41">8</literal></expr>;</condition> <incr pos:start="257:44" pos:end="257:46"><expr pos:start="257:44" pos:end="257:46"><name pos:start="257:44" pos:end="257:44">j</name><operator pos:start="257:45" pos:end="257:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="259:29" pos:end="261:80"><block_content pos:start="259:29" pos:end="261:80">

                            <for pos:start="259:29" pos:end="261:80">for <control pos:start="259:33" pos:end="259:51">(<init pos:start="259:34" pos:end="259:39"><expr pos:start="259:34" pos:end="259:38"><name pos:start="259:34" pos:end="259:34">i</name> <operator pos:start="259:36" pos:end="259:36">=</operator> <literal type="number" pos:start="259:38" pos:end="259:38">0</literal></expr>;</init> <condition pos:start="259:41" pos:end="259:46"><expr pos:start="259:41" pos:end="259:45"><name pos:start="259:41" pos:end="259:41">i</name> <operator pos:start="259:43" pos:end="259:43">&lt;</operator> <literal type="number" pos:start="259:45" pos:end="259:45">8</literal></expr>;</condition> <incr pos:start="259:48" pos:end="259:50"><expr pos:start="259:48" pos:end="259:50"><name pos:start="259:48" pos:end="259:48">i</name><operator pos:start="259:49" pos:end="259:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="261:33" pos:end="261:80"><block_content pos:start="261:33" pos:end="261:80">

                                <expr_stmt pos:start="261:33" pos:end="261:80"><expr pos:start="261:33" pos:end="261:79"><name pos:start="261:33" pos:end="261:47"><name pos:start="261:33" pos:end="261:38">ublock</name><index pos:start="261:39" pos:end="261:47">[<expr pos:start="261:40" pos:end="261:46"><name pos:start="261:40" pos:end="261:40">i</name> <operator pos:start="261:42" pos:end="261:42">+</operator> <name pos:start="261:44" pos:end="261:44">j</name><operator pos:start="261:45" pos:end="261:45">*</operator><literal type="number" pos:start="261:46" pos:end="261:46">8</literal></expr>]</index></name> <operator pos:start="261:49" pos:end="261:49">=</operator> <call pos:start="261:51" pos:end="261:79"><name pos:start="261:51" pos:end="261:59">get_value</name><argument_list pos:start="261:60" pos:end="261:79">(<argument pos:start="261:61" pos:end="261:61"><expr pos:start="261:61" pos:end="261:61"><name pos:start="261:61" pos:end="261:61">c</name></expr></argument>, <argument pos:start="261:64" pos:end="261:78"><expr pos:start="261:64" pos:end="261:78"><name pos:start="261:64" pos:end="261:78">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

                        <break pos:start="263:25" pos:end="263:30">break;</break>

                    <default pos:start="265:21" pos:end="265:28">default:</default>

                        <expr_stmt pos:start="267:25" pos:end="267:92"><expr pos:start="267:25" pos:end="267:91"><call pos:start="267:25" pos:end="267:91"><name pos:start="267:25" pos:end="267:30">av_log</name><argument_list pos:start="267:31" pos:end="267:91">(<argument pos:start="267:32" pos:end="267:36"><expr pos:start="267:32" pos:end="267:36"><name pos:start="267:32" pos:end="267:36">avctx</name></expr></argument>, <argument pos:start="267:39" pos:end="267:50"><expr pos:start="267:39" pos:end="267:50"><name pos:start="267:39" pos:end="267:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="267:53" pos:end="267:85"><expr pos:start="267:53" pos:end="267:85"><literal type="string" pos:start="267:53" pos:end="267:85">"Incorrect 16x16 block type %d\n"</literal></expr></argument>, <argument pos:start="267:88" pos:end="267:90"><expr pos:start="267:88" pos:end="267:90"><name pos:start="267:88" pos:end="267:90">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="269:25" pos:end="269:34">return <expr pos:start="269:32" pos:end="269:33"><operator pos:start="269:32" pos:end="269:32">-</operator><literal type="number" pos:start="269:33" pos:end="269:33">1</literal></expr>;</return>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="273:21" pos:end="275:64"><if pos:start="273:21" pos:end="275:64">if <condition pos:start="273:24" pos:end="273:42">(<expr pos:start="273:25" pos:end="273:41"><name pos:start="273:25" pos:end="273:27">blk</name> <operator pos:start="273:29" pos:end="273:30">!=</operator> <name pos:start="273:32" pos:end="273:41">FILL_BLOCK</name></expr>)</condition><block type="pseudo" pos:start="275:25" pos:end="275:64"><block_content pos:start="275:25" pos:end="275:64">

                        <expr_stmt pos:start="275:25" pos:end="275:64"><expr pos:start="275:25" pos:end="275:63"><call pos:start="275:25" pos:end="275:63"><name pos:start="275:25" pos:end="275:42"><name pos:start="275:25" pos:end="275:25">c</name><operator pos:start="275:26" pos:end="275:27">-&gt;</operator><name pos:start="275:28" pos:end="275:30">dsp</name><operator pos:start="275:31" pos:end="275:31">.</operator><name pos:start="275:32" pos:end="275:42">scale_block</name></name><argument_list pos:start="275:43" pos:end="275:63">(<argument pos:start="275:44" pos:end="275:49"><expr pos:start="275:44" pos:end="275:49"><name pos:start="275:44" pos:end="275:49">ublock</name></expr></argument>, <argument pos:start="275:52" pos:end="275:54"><expr pos:start="275:52" pos:end="275:54"><name pos:start="275:52" pos:end="275:54">dst</name></expr></argument>, <argument pos:start="275:57" pos:end="275:62"><expr pos:start="275:57" pos:end="275:62"><name pos:start="275:57" pos:end="275:62">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="277:21" pos:end="277:25"><expr pos:start="277:21" pos:end="277:24"><name pos:start="277:21" pos:end="277:22">bx</name><operator pos:start="277:23" pos:end="277:24">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="279:21" pos:end="279:30"><expr pos:start="279:21" pos:end="279:29"><name pos:start="279:21" pos:end="279:23">dst</name>  <operator pos:start="279:26" pos:end="279:27">+=</operator> <literal type="number" pos:start="279:29" pos:end="279:29">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="281:21" pos:end="281:30"><expr pos:start="281:21" pos:end="281:29"><name pos:start="281:21" pos:end="281:24">prev</name> <operator pos:start="281:26" pos:end="281:27">+=</operator> <literal type="number" pos:start="281:29" pos:end="281:29">8</literal></expr>;</expr_stmt>

                    <break pos:start="283:21" pos:end="283:26">break;</break>

                <case pos:start="285:17" pos:end="285:34">case <expr pos:start="285:22" pos:end="285:33"><name pos:start="285:22" pos:end="285:33">MOTION_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="287:21" pos:end="287:56"><expr pos:start="287:21" pos:end="287:55"><name pos:start="287:21" pos:end="287:24">xoff</name> <operator pos:start="287:26" pos:end="287:26">=</operator> <call pos:start="287:28" pos:end="287:55"><name pos:start="287:28" pos:end="287:36">get_value</name><argument_list pos:start="287:37" pos:end="287:55">(<argument pos:start="287:38" pos:end="287:38"><expr pos:start="287:38" pos:end="287:38"><name pos:start="287:38" pos:end="287:38">c</name></expr></argument>, <argument pos:start="287:41" pos:end="287:54"><expr pos:start="287:41" pos:end="287:54"><name pos:start="287:41" pos:end="287:54">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:56"><expr pos:start="289:21" pos:end="289:55"><name pos:start="289:21" pos:end="289:24">yoff</name> <operator pos:start="289:26" pos:end="289:26">=</operator> <call pos:start="289:28" pos:end="289:55"><name pos:start="289:28" pos:end="289:36">get_value</name><argument_list pos:start="289:37" pos:end="289:55">(<argument pos:start="289:38" pos:end="289:38"><expr pos:start="289:38" pos:end="289:38"><name pos:start="289:38" pos:end="289:38">c</name></expr></argument>, <argument pos:start="289:41" pos:end="289:54"><expr pos:start="289:41" pos:end="289:54"><name pos:start="289:41" pos:end="289:54">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:54"><expr pos:start="291:21" pos:end="291:53"><name pos:start="291:21" pos:end="291:23">ref</name> <operator pos:start="291:25" pos:end="291:25">=</operator> <name pos:start="291:27" pos:end="291:30">prev</name> <operator pos:start="291:32" pos:end="291:32">+</operator> <name pos:start="291:34" pos:end="291:37">xoff</name> <operator pos:start="291:39" pos:end="291:39">+</operator> <name pos:start="291:41" pos:end="291:44">yoff</name> <operator pos:start="291:46" pos:end="291:46">*</operator> <name pos:start="291:48" pos:end="291:53">stride</name></expr>;</expr_stmt>

                    <if_stmt pos:start="293:21" pos:end="301:21"><if pos:start="293:21" pos:end="301:21">if <condition pos:start="293:24" pos:end="293:57">(<expr pos:start="293:25" pos:end="293:56"><name pos:start="293:25" pos:end="293:48"><name pos:start="293:25" pos:end="293:27">ref</name> <argument_list type="generic" pos:start="293:29" pos:end="293:48">&lt; <argument pos:start="293:31" pos:end="293:46"><expr pos:start="293:31" pos:end="293:46"><name pos:start="293:31" pos:end="293:39">ref_start</name> <operator pos:start="293:41" pos:end="293:42">||</operator> <name pos:start="293:44" pos:end="293:46">ref</name></expr></argument> &gt;</argument_list></name> <name pos:start="293:50" pos:end="293:56">ref_end</name></expr>)</condition> <block pos:start="293:59" pos:end="301:21">{<block_content pos:start="295:25" pos:end="299:34">

                        <expr_stmt pos:start="295:25" pos:end="297:57"><expr pos:start="295:25" pos:end="297:56"><call pos:start="295:25" pos:end="297:56"><name pos:start="295:25" pos:end="295:30">av_log</name><argument_list pos:start="295:31" pos:end="297:56">(<argument pos:start="295:32" pos:end="295:36"><expr pos:start="295:32" pos:end="295:36"><name pos:start="295:32" pos:end="295:36">avctx</name></expr></argument>, <argument pos:start="295:39" pos:end="295:50"><expr pos:start="295:39" pos:end="295:50"><name pos:start="295:39" pos:end="295:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="295:53" pos:end="295:82"><expr pos:start="295:53" pos:end="295:82"><literal type="string" pos:start="295:53" pos:end="295:82">"Copy out of bounds @%d, %d\n"</literal></expr></argument>,

                               <argument pos:start="297:32" pos:end="297:42"><expr pos:start="297:32" pos:end="297:42"><name pos:start="297:32" pos:end="297:33">bx</name><operator pos:start="297:34" pos:end="297:34">*</operator><literal type="number" pos:start="297:35" pos:end="297:37">8</literal> <operator pos:start="297:37" pos:end="297:37">+</operator> <name pos:start="297:39" pos:end="297:42">xoff</name></expr></argument>, <argument pos:start="297:45" pos:end="297:55"><expr pos:start="297:45" pos:end="297:55"><name pos:start="297:45" pos:end="297:46">by</name><operator pos:start="297:47" pos:end="297:47">*</operator><literal type="number" pos:start="297:48" pos:end="297:50">8</literal> <operator pos:start="297:50" pos:end="297:50">+</operator> <name pos:start="297:52" pos:end="297:55">yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="299:25" pos:end="299:34">return <expr pos:start="299:32" pos:end="299:33"><operator pos:start="299:32" pos:end="299:32">-</operator><literal type="number" pos:start="299:33" pos:end="299:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="303:21" pos:end="303:69"><expr pos:start="303:21" pos:end="303:68"><name pos:start="303:21" pos:end="303:47"><name pos:start="303:21" pos:end="303:21">c</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:26">dsp</name><operator pos:start="303:27" pos:end="303:27">.</operator><name pos:start="303:28" pos:end="303:41">put_pixels_tab</name><index pos:start="303:42" pos:end="303:44">[<expr pos:start="303:43" pos:end="303:43"><literal type="number" pos:start="303:43" pos:end="303:43">1</literal></expr>]</index><index pos:start="303:45" pos:end="303:47">[<expr pos:start="303:46" pos:end="303:46"><literal type="number" pos:start="303:46" pos:end="303:46">0</literal></expr>]</index></name><operator pos:start="303:48" pos:end="303:48">(</operator><name pos:start="303:49" pos:end="303:51">dst</name><operator pos:start="303:52" pos:end="303:52">,</operator> <name pos:start="303:54" pos:end="303:56">ref</name><operator pos:start="303:57" pos:end="303:57">,</operator> <name pos:start="303:59" pos:end="303:64">stride</name><operator pos:start="303:65" pos:end="303:65">,</operator> <literal type="number" pos:start="303:67" pos:end="303:67">8</literal><operator pos:start="303:68" pos:end="303:68">)</operator></expr>;</expr_stmt>

                    <break pos:start="305:21" pos:end="305:26">break;</break>

                <case pos:start="307:17" pos:end="307:31">case <expr pos:start="307:22" pos:end="307:30"><name pos:start="307:22" pos:end="307:30">RUN_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="309:21" pos:end="309:59"><expr pos:start="309:21" pos:end="309:58"><name pos:start="309:21" pos:end="309:24">scan</name> <operator pos:start="309:26" pos:end="309:26">=</operator> <name pos:start="309:28" pos:end="309:58"><name pos:start="309:28" pos:end="309:40">bink_patterns</name><index pos:start="309:41" pos:end="309:58">[<expr pos:start="309:42" pos:end="309:57"><call pos:start="309:42" pos:end="309:57"><name pos:start="309:42" pos:end="309:49">get_bits</name><argument_list pos:start="309:50" pos:end="309:57">(<argument pos:start="309:51" pos:end="309:53"><expr pos:start="309:51" pos:end="309:53"><operator pos:start="309:51" pos:end="309:51">&amp;</operator><name pos:start="309:52" pos:end="309:53">gb</name></expr></argument>, <argument pos:start="309:56" pos:end="309:56"><expr pos:start="309:56" pos:end="309:56"><literal type="number" pos:start="309:56" pos:end="309:56">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="311:21" pos:end="311:26"><expr pos:start="311:21" pos:end="311:25"><name pos:start="311:21" pos:end="311:21">i</name> <operator pos:start="311:23" pos:end="311:23">=</operator> <literal type="number" pos:start="311:25" pos:end="311:25">0</literal></expr>;</expr_stmt>

                    <do pos:start="313:21" pos:end="345:37">do <block pos:start="313:24" pos:end="345:21">{<block_content pos:start="315:25" pos:end="343:25">

                        <decl_stmt pos:start="315:25" pos:end="315:65"><decl pos:start="315:25" pos:end="315:64"><type pos:start="315:25" pos:end="315:27"><name pos:start="315:25" pos:end="315:27">int</name></type> <name pos:start="315:29" pos:end="315:31">run</name> <init pos:start="315:33" pos:end="315:64">= <expr pos:start="315:35" pos:end="315:64"><call pos:start="315:35" pos:end="315:60"><name pos:start="315:35" pos:end="315:43">get_value</name><argument_list pos:start="315:44" pos:end="315:60">(<argument pos:start="315:45" pos:end="315:45"><expr pos:start="315:45" pos:end="315:45"><name pos:start="315:45" pos:end="315:45">c</name></expr></argument>, <argument pos:start="315:48" pos:end="315:59"><expr pos:start="315:48" pos:end="315:59"><name pos:start="315:48" pos:end="315:59">BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator pos:start="315:62" pos:end="315:62">+</operator> <literal type="number" pos:start="315:64" pos:end="315:64">1</literal></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="319:25" pos:end="319:33"><expr pos:start="319:25" pos:end="319:32"><name pos:start="319:25" pos:end="319:25">i</name> <operator pos:start="319:27" pos:end="319:28">+=</operator> <name pos:start="319:30" pos:end="319:32">run</name></expr>;</expr_stmt>

                        <if_stmt pos:start="321:25" pos:end="327:25"><if pos:start="321:25" pos:end="327:25">if <condition pos:start="321:28" pos:end="321:35">(<expr pos:start="321:29" pos:end="321:34"><name pos:start="321:29" pos:end="321:29">i</name> <operator pos:start="321:31" pos:end="321:31">&gt;</operator> <literal type="number" pos:start="321:33" pos:end="321:34">64</literal></expr>)</condition> <block pos:start="321:37" pos:end="327:25">{<block_content pos:start="323:29" pos:end="325:38">

                            <expr_stmt pos:start="323:29" pos:end="323:84"><expr pos:start="323:29" pos:end="323:83"><call pos:start="323:29" pos:end="323:83"><name pos:start="323:29" pos:end="323:34">av_log</name><argument_list pos:start="323:35" pos:end="323:83">(<argument pos:start="323:36" pos:end="323:40"><expr pos:start="323:36" pos:end="323:40"><name pos:start="323:36" pos:end="323:40">avctx</name></expr></argument>, <argument pos:start="323:43" pos:end="323:54"><expr pos:start="323:43" pos:end="323:54"><name pos:start="323:43" pos:end="323:54">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="323:57" pos:end="323:82"><expr pos:start="323:57" pos:end="323:82"><literal type="string" pos:start="323:57" pos:end="323:82">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="325:29" pos:end="325:38">return <expr pos:start="325:36" pos:end="325:37"><operator pos:start="325:36" pos:end="325:36">-</operator><literal type="number" pos:start="325:37" pos:end="325:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="329:25" pos:end="343:25"><if pos:start="329:25" pos:end="337:25">if <condition pos:start="329:28" pos:end="329:43">(<expr pos:start="329:29" pos:end="329:42"><call pos:start="329:29" pos:end="329:42"><name pos:start="329:29" pos:end="329:37">get_bits1</name><argument_list pos:start="329:38" pos:end="329:42">(<argument pos:start="329:39" pos:end="329:41"><expr pos:start="329:39" pos:end="329:41"><operator pos:start="329:39" pos:end="329:39">&amp;</operator><name pos:start="329:40" pos:end="329:41">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="329:45" pos:end="337:25">{<block_content pos:start="331:29" pos:end="335:59">

                            <expr_stmt pos:start="331:29" pos:end="331:62"><expr pos:start="331:29" pos:end="331:61"><name pos:start="331:29" pos:end="331:29">v</name> <operator pos:start="331:31" pos:end="331:31">=</operator> <call pos:start="331:33" pos:end="331:61"><name pos:start="331:33" pos:end="331:41">get_value</name><argument_list pos:start="331:42" pos:end="331:61">(<argument pos:start="331:43" pos:end="331:43"><expr pos:start="331:43" pos:end="331:43"><name pos:start="331:43" pos:end="331:43">c</name></expr></argument>, <argument pos:start="331:46" pos:end="331:60"><expr pos:start="331:46" pos:end="331:60"><name pos:start="331:46" pos:end="331:60">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="333:29" pos:end="335:59">for <control pos:start="333:33" pos:end="333:53">(<init pos:start="333:34" pos:end="333:39"><expr pos:start="333:34" pos:end="333:38"><name pos:start="333:34" pos:end="333:34">j</name> <operator pos:start="333:36" pos:end="333:36">=</operator> <literal type="number" pos:start="333:38" pos:end="333:38">0</literal></expr>;</init> <condition pos:start="333:41" pos:end="333:48"><expr pos:start="333:41" pos:end="333:47"><name pos:start="333:41" pos:end="333:41">j</name> <operator pos:start="333:43" pos:end="333:43">&lt;</operator> <name pos:start="333:45" pos:end="333:47">run</name></expr>;</condition> <incr pos:start="333:50" pos:end="333:52"><expr pos:start="333:50" pos:end="333:52"><name pos:start="333:50" pos:end="333:50">j</name><operator pos:start="333:51" pos:end="333:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="335:33" pos:end="335:59"><block_content pos:start="335:33" pos:end="335:59">

                                <expr_stmt pos:start="335:33" pos:end="335:59"><expr pos:start="335:33" pos:end="335:58"><name pos:start="335:33" pos:end="335:54"><name pos:start="335:33" pos:end="335:35">dst</name><index pos:start="335:36" pos:end="335:54">[<expr pos:start="335:37" pos:end="335:53"><name pos:start="335:37" pos:end="335:53"><name pos:start="335:37" pos:end="335:44">coordmap</name><index pos:start="335:45" pos:end="335:53">[<expr pos:start="335:46" pos:end="335:52"><operator pos:start="335:46" pos:end="335:46">*</operator><name pos:start="335:47" pos:end="335:50">scan</name><operator pos:start="335:51" pos:end="335:52">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="335:56" pos:end="335:56">=</operator> <name pos:start="335:58" pos:end="335:58">v</name></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="337:27" pos:end="343:25">else <block pos:start="337:32" pos:end="343:25">{<block_content pos:start="339:29" pos:end="341:87">

                            <for pos:start="339:29" pos:end="341:87">for <control pos:start="339:33" pos:end="339:53">(<init pos:start="339:34" pos:end="339:39"><expr pos:start="339:34" pos:end="339:38"><name pos:start="339:34" pos:end="339:34">j</name> <operator pos:start="339:36" pos:end="339:36">=</operator> <literal type="number" pos:start="339:38" pos:end="339:38">0</literal></expr>;</init> <condition pos:start="339:41" pos:end="339:48"><expr pos:start="339:41" pos:end="339:47"><name pos:start="339:41" pos:end="339:41">j</name> <operator pos:start="339:43" pos:end="339:43">&lt;</operator> <name pos:start="339:45" pos:end="339:47">run</name></expr>;</condition> <incr pos:start="339:50" pos:end="339:52"><expr pos:start="339:50" pos:end="339:52"><name pos:start="339:50" pos:end="339:50">j</name><operator pos:start="339:51" pos:end="339:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="341:33" pos:end="341:87"><block_content pos:start="341:33" pos:end="341:87">

                                <expr_stmt pos:start="341:33" pos:end="341:87"><expr pos:start="341:33" pos:end="341:86"><name pos:start="341:33" pos:end="341:54"><name pos:start="341:33" pos:end="341:35">dst</name><index pos:start="341:36" pos:end="341:54">[<expr pos:start="341:37" pos:end="341:53"><name pos:start="341:37" pos:end="341:53"><name pos:start="341:37" pos:end="341:44">coordmap</name><index pos:start="341:45" pos:end="341:53">[<expr pos:start="341:46" pos:end="341:52"><operator pos:start="341:46" pos:end="341:46">*</operator><name pos:start="341:47" pos:end="341:50">scan</name><operator pos:start="341:51" pos:end="341:52">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="341:56" pos:end="341:56">=</operator> <call pos:start="341:58" pos:end="341:86"><name pos:start="341:58" pos:end="341:66">get_value</name><argument_list pos:start="341:67" pos:end="341:86">(<argument pos:start="341:68" pos:end="341:68"><expr pos:start="341:68" pos:end="341:68"><name pos:start="341:68" pos:end="341:68">c</name></expr></argument>, <argument pos:start="341:71" pos:end="341:85"><expr pos:start="341:71" pos:end="341:85"><name pos:start="341:71" pos:end="341:85">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block> while <condition pos:start="345:29" pos:end="345:36">(<expr pos:start="345:30" pos:end="345:35"><name pos:start="345:30" pos:end="345:30">i</name> <operator pos:start="345:32" pos:end="345:32">&lt;</operator> <literal type="number" pos:start="345:34" pos:end="345:35">63</literal></expr>)</condition>;</do>

                    <if_stmt pos:start="347:21" pos:end="349:79"><if pos:start="347:21" pos:end="349:79">if <condition pos:start="347:24" pos:end="347:32">(<expr pos:start="347:25" pos:end="347:31"><name pos:start="347:25" pos:end="347:25">i</name> <operator pos:start="347:27" pos:end="347:28">==</operator> <literal type="number" pos:start="347:30" pos:end="347:31">63</literal></expr>)</condition><block type="pseudo" pos:start="349:25" pos:end="349:79"><block_content pos:start="349:25" pos:end="349:79">

                        <expr_stmt pos:start="349:25" pos:end="349:79"><expr pos:start="349:25" pos:end="349:78"><name pos:start="349:25" pos:end="349:46"><name pos:start="349:25" pos:end="349:27">dst</name><index pos:start="349:28" pos:end="349:46">[<expr pos:start="349:29" pos:end="349:45"><name pos:start="349:29" pos:end="349:45"><name pos:start="349:29" pos:end="349:36">coordmap</name><index pos:start="349:37" pos:end="349:45">[<expr pos:start="349:38" pos:end="349:44"><operator pos:start="349:38" pos:end="349:38">*</operator><name pos:start="349:39" pos:end="349:42">scan</name><operator pos:start="349:43" pos:end="349:44">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="349:48" pos:end="349:48">=</operator> <call pos:start="349:50" pos:end="349:78"><name pos:start="349:50" pos:end="349:58">get_value</name><argument_list pos:start="349:59" pos:end="349:78">(<argument pos:start="349:60" pos:end="349:60"><expr pos:start="349:60" pos:end="349:60"><name pos:start="349:60" pos:end="349:60">c</name></expr></argument>, <argument pos:start="349:63" pos:end="349:77"><expr pos:start="349:63" pos:end="349:77"><name pos:start="349:63" pos:end="349:77">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="351:21" pos:end="351:26">break;</break>

                <case pos:start="353:17" pos:end="353:35">case <expr pos:start="353:22" pos:end="353:34"><name pos:start="353:22" pos:end="353:34">RESIDUE_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="355:21" pos:end="355:56"><expr pos:start="355:21" pos:end="355:55"><name pos:start="355:21" pos:end="355:24">xoff</name> <operator pos:start="355:26" pos:end="355:26">=</operator> <call pos:start="355:28" pos:end="355:55"><name pos:start="355:28" pos:end="355:36">get_value</name><argument_list pos:start="355:37" pos:end="355:55">(<argument pos:start="355:38" pos:end="355:38"><expr pos:start="355:38" pos:end="355:38"><name pos:start="355:38" pos:end="355:38">c</name></expr></argument>, <argument pos:start="355:41" pos:end="355:54"><expr pos:start="355:41" pos:end="355:54"><name pos:start="355:41" pos:end="355:54">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="357:21" pos:end="357:56"><expr pos:start="357:21" pos:end="357:55"><name pos:start="357:21" pos:end="357:24">yoff</name> <operator pos:start="357:26" pos:end="357:26">=</operator> <call pos:start="357:28" pos:end="357:55"><name pos:start="357:28" pos:end="357:36">get_value</name><argument_list pos:start="357:37" pos:end="357:55">(<argument pos:start="357:38" pos:end="357:38"><expr pos:start="357:38" pos:end="357:38"><name pos:start="357:38" pos:end="357:38">c</name></expr></argument>, <argument pos:start="357:41" pos:end="357:54"><expr pos:start="357:41" pos:end="357:54"><name pos:start="357:41" pos:end="357:54">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="359:21" pos:end="359:54"><expr pos:start="359:21" pos:end="359:53"><name pos:start="359:21" pos:end="359:23">ref</name> <operator pos:start="359:25" pos:end="359:25">=</operator> <name pos:start="359:27" pos:end="359:30">prev</name> <operator pos:start="359:32" pos:end="359:32">+</operator> <name pos:start="359:34" pos:end="359:37">xoff</name> <operator pos:start="359:39" pos:end="359:39">+</operator> <name pos:start="359:41" pos:end="359:44">yoff</name> <operator pos:start="359:46" pos:end="359:46">*</operator> <name pos:start="359:48" pos:end="359:53">stride</name></expr>;</expr_stmt>

                    <if_stmt pos:start="361:21" pos:end="369:21"><if pos:start="361:21" pos:end="369:21">if <condition pos:start="361:24" pos:end="361:57">(<expr pos:start="361:25" pos:end="361:56"><name pos:start="361:25" pos:end="361:48"><name pos:start="361:25" pos:end="361:27">ref</name> <argument_list type="generic" pos:start="361:29" pos:end="361:48">&lt; <argument pos:start="361:31" pos:end="361:46"><expr pos:start="361:31" pos:end="361:46"><name pos:start="361:31" pos:end="361:39">ref_start</name> <operator pos:start="361:41" pos:end="361:42">||</operator> <name pos:start="361:44" pos:end="361:46">ref</name></expr></argument> &gt;</argument_list></name> <name pos:start="361:50" pos:end="361:56">ref_end</name></expr>)</condition> <block pos:start="361:59" pos:end="369:21">{<block_content pos:start="363:25" pos:end="367:34">

                        <expr_stmt pos:start="363:25" pos:end="365:57"><expr pos:start="363:25" pos:end="365:56"><call pos:start="363:25" pos:end="365:56"><name pos:start="363:25" pos:end="363:30">av_log</name><argument_list pos:start="363:31" pos:end="365:56">(<argument pos:start="363:32" pos:end="363:36"><expr pos:start="363:32" pos:end="363:36"><name pos:start="363:32" pos:end="363:36">avctx</name></expr></argument>, <argument pos:start="363:39" pos:end="363:50"><expr pos:start="363:39" pos:end="363:50"><name pos:start="363:39" pos:end="363:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="363:53" pos:end="363:82"><expr pos:start="363:53" pos:end="363:82"><literal type="string" pos:start="363:53" pos:end="363:82">"Copy out of bounds @%d, %d\n"</literal></expr></argument>,

                               <argument pos:start="365:32" pos:end="365:42"><expr pos:start="365:32" pos:end="365:42"><name pos:start="365:32" pos:end="365:33">bx</name><operator pos:start="365:34" pos:end="365:34">*</operator><literal type="number" pos:start="365:35" pos:end="365:37">8</literal> <operator pos:start="365:37" pos:end="365:37">+</operator> <name pos:start="365:39" pos:end="365:42">xoff</name></expr></argument>, <argument pos:start="365:45" pos:end="365:55"><expr pos:start="365:45" pos:end="365:55"><name pos:start="365:45" pos:end="365:46">by</name><operator pos:start="365:47" pos:end="365:47">*</operator><literal type="number" pos:start="365:48" pos:end="365:50">8</literal> <operator pos:start="365:50" pos:end="365:50">+</operator> <name pos:start="365:52" pos:end="365:55">yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="367:25" pos:end="367:34">return <expr pos:start="367:32" pos:end="367:33"><operator pos:start="367:32" pos:end="367:32">-</operator><literal type="number" pos:start="367:33" pos:end="367:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="371:21" pos:end="371:69"><expr pos:start="371:21" pos:end="371:68"><name pos:start="371:21" pos:end="371:47"><name pos:start="371:21" pos:end="371:21">c</name><operator pos:start="371:22" pos:end="371:23">-&gt;</operator><name pos:start="371:24" pos:end="371:26">dsp</name><operator pos:start="371:27" pos:end="371:27">.</operator><name pos:start="371:28" pos:end="371:41">put_pixels_tab</name><index pos:start="371:42" pos:end="371:44">[<expr pos:start="371:43" pos:end="371:43"><literal type="number" pos:start="371:43" pos:end="371:43">1</literal></expr>]</index><index pos:start="371:45" pos:end="371:47">[<expr pos:start="371:46" pos:end="371:46"><literal type="number" pos:start="371:46" pos:end="371:46">0</literal></expr>]</index></name><operator pos:start="371:48" pos:end="371:48">(</operator><name pos:start="371:49" pos:end="371:51">dst</name><operator pos:start="371:52" pos:end="371:52">,</operator> <name pos:start="371:54" pos:end="371:56">ref</name><operator pos:start="371:57" pos:end="371:57">,</operator> <name pos:start="371:59" pos:end="371:64">stride</name><operator pos:start="371:65" pos:end="371:65">,</operator> <literal type="number" pos:start="371:67" pos:end="371:67">8</literal><operator pos:start="371:68" pos:end="371:68">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="373:21" pos:end="373:46"><expr pos:start="373:21" pos:end="373:45"><call pos:start="373:21" pos:end="373:45"><name pos:start="373:21" pos:end="373:38"><name pos:start="373:21" pos:end="373:21">c</name><operator pos:start="373:22" pos:end="373:23">-&gt;</operator><name pos:start="373:24" pos:end="373:26">dsp</name><operator pos:start="373:27" pos:end="373:27">.</operator><name pos:start="373:28" pos:end="373:38">clear_block</name></name><argument_list pos:start="373:39" pos:end="373:45">(<argument pos:start="373:40" pos:end="373:44"><expr pos:start="373:40" pos:end="373:44"><name pos:start="373:40" pos:end="373:44">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="375:21" pos:end="375:41"><expr pos:start="375:21" pos:end="375:40"><name pos:start="375:21" pos:end="375:21">v</name> <operator pos:start="375:23" pos:end="375:23">=</operator> <call pos:start="375:25" pos:end="375:40"><name pos:start="375:25" pos:end="375:32">get_bits</name><argument_list pos:start="375:33" pos:end="375:40">(<argument pos:start="375:34" pos:end="375:36"><expr pos:start="375:34" pos:end="375:36"><operator pos:start="375:34" pos:end="375:34">&amp;</operator><name pos:start="375:35" pos:end="375:36">gb</name></expr></argument>, <argument pos:start="375:39" pos:end="375:39"><expr pos:start="375:39" pos:end="375:39"><literal type="number" pos:start="375:39" pos:end="375:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="377:21" pos:end="377:48"><expr pos:start="377:21" pos:end="377:47"><call pos:start="377:21" pos:end="377:47"><name pos:start="377:21" pos:end="377:32">read_residue</name><argument_list pos:start="377:33" pos:end="377:47">(<argument pos:start="377:34" pos:end="377:36"><expr pos:start="377:34" pos:end="377:36"><operator pos:start="377:34" pos:end="377:34">&amp;</operator><name pos:start="377:35" pos:end="377:36">gb</name></expr></argument>, <argument pos:start="377:39" pos:end="377:43"><expr pos:start="377:39" pos:end="377:43"><name pos:start="377:39" pos:end="377:43">block</name></expr></argument>, <argument pos:start="377:46" pos:end="377:46"><expr pos:start="377:46" pos:end="377:46"><name pos:start="377:46" pos:end="377:46">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="379:21" pos:end="379:59"><expr pos:start="379:21" pos:end="379:58"><call pos:start="379:21" pos:end="379:58"><name pos:start="379:21" pos:end="379:38"><name pos:start="379:21" pos:end="379:21">c</name><operator pos:start="379:22" pos:end="379:23">-&gt;</operator><name pos:start="379:24" pos:end="379:26">dsp</name><operator pos:start="379:27" pos:end="379:27">.</operator><name pos:start="379:28" pos:end="379:38">add_pixels8</name></name><argument_list pos:start="379:39" pos:end="379:58">(<argument pos:start="379:40" pos:end="379:42"><expr pos:start="379:40" pos:end="379:42"><name pos:start="379:40" pos:end="379:42">dst</name></expr></argument>, <argument pos:start="379:45" pos:end="379:49"><expr pos:start="379:45" pos:end="379:49"><name pos:start="379:45" pos:end="379:49">block</name></expr></argument>, <argument pos:start="379:52" pos:end="379:57"><expr pos:start="379:52" pos:end="379:57"><name pos:start="379:52" pos:end="379:57">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="381:21" pos:end="381:26">break;</break>

                <case pos:start="383:17" pos:end="383:33">case <expr pos:start="383:22" pos:end="383:32"><name pos:start="383:22" pos:end="383:32">INTRA_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="385:21" pos:end="385:46"><expr pos:start="385:21" pos:end="385:45"><call pos:start="385:21" pos:end="385:45"><name pos:start="385:21" pos:end="385:38"><name pos:start="385:21" pos:end="385:21">c</name><operator pos:start="385:22" pos:end="385:23">-&gt;</operator><name pos:start="385:24" pos:end="385:26">dsp</name><operator pos:start="385:27" pos:end="385:27">.</operator><name pos:start="385:28" pos:end="385:38">clear_block</name></name><argument_list pos:start="385:39" pos:end="385:45">(<argument pos:start="385:40" pos:end="385:44"><expr pos:start="385:40" pos:end="385:44"><name pos:start="385:40" pos:end="385:44">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="387:21" pos:end="387:63"><expr pos:start="387:21" pos:end="387:62"><name pos:start="387:21" pos:end="387:28"><name pos:start="387:21" pos:end="387:25">block</name><index pos:start="387:26" pos:end="387:28">[<expr pos:start="387:27" pos:end="387:27"><literal type="number" pos:start="387:27" pos:end="387:27">0</literal></expr>]</index></name> <operator pos:start="387:30" pos:end="387:30">=</operator> <call pos:start="387:32" pos:end="387:62"><name pos:start="387:32" pos:end="387:40">get_value</name><argument_list pos:start="387:41" pos:end="387:62">(<argument pos:start="387:42" pos:end="387:42"><expr pos:start="387:42" pos:end="387:42"><name pos:start="387:42" pos:end="387:42">c</name></expr></argument>, <argument pos:start="387:45" pos:end="387:61"><expr pos:start="387:45" pos:end="387:61"><name pos:start="387:45" pos:end="387:61">BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="389:21" pos:end="389:76"><expr pos:start="389:21" pos:end="389:75"><call pos:start="389:21" pos:end="389:75"><name pos:start="389:21" pos:end="389:35">read_dct_coeffs</name><argument_list pos:start="389:36" pos:end="389:75">(<argument pos:start="389:37" pos:end="389:39"><expr pos:start="389:37" pos:end="389:39"><operator pos:start="389:37" pos:end="389:37">&amp;</operator><name pos:start="389:38" pos:end="389:39">gb</name></expr></argument>, <argument pos:start="389:42" pos:end="389:46"><expr pos:start="389:42" pos:end="389:46"><name pos:start="389:42" pos:end="389:46">block</name></expr></argument>, <argument pos:start="389:49" pos:end="389:71"><expr pos:start="389:49" pos:end="389:71"><name pos:start="389:49" pos:end="389:71"><name pos:start="389:49" pos:end="389:49">c</name><operator pos:start="389:50" pos:end="389:51">-&gt;</operator><name pos:start="389:52" pos:end="389:60">scantable</name><operator pos:start="389:61" pos:end="389:61">.</operator><name pos:start="389:62" pos:end="389:71">permutated</name></name></expr></argument>, <argument pos:start="389:74" pos:end="389:74"><expr pos:start="389:74" pos:end="389:74"><literal type="number" pos:start="389:74" pos:end="389:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="391:21" pos:end="391:56"><expr pos:start="391:21" pos:end="391:55"><call pos:start="391:21" pos:end="391:55"><name pos:start="391:21" pos:end="391:35"><name pos:start="391:21" pos:end="391:21">c</name><operator pos:start="391:22" pos:end="391:23">-&gt;</operator><name pos:start="391:24" pos:end="391:26">dsp</name><operator pos:start="391:27" pos:end="391:27">.</operator><name pos:start="391:28" pos:end="391:35">idct_put</name></name><argument_list pos:start="391:36" pos:end="391:55">(<argument pos:start="391:37" pos:end="391:39"><expr pos:start="391:37" pos:end="391:39"><name pos:start="391:37" pos:end="391:39">dst</name></expr></argument>, <argument pos:start="391:42" pos:end="391:47"><expr pos:start="391:42" pos:end="391:47"><name pos:start="391:42" pos:end="391:47">stride</name></expr></argument>, <argument pos:start="391:50" pos:end="391:54"><expr pos:start="391:50" pos:end="391:54"><name pos:start="391:50" pos:end="391:54">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="393:21" pos:end="393:26">break;</break>

                <case pos:start="395:17" pos:end="395:32">case <expr pos:start="395:22" pos:end="395:31"><name pos:start="395:22" pos:end="395:31">FILL_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="397:21" pos:end="397:54"><expr pos:start="397:21" pos:end="397:53"><name pos:start="397:21" pos:end="397:21">v</name> <operator pos:start="397:23" pos:end="397:23">=</operator> <call pos:start="397:25" pos:end="397:53"><name pos:start="397:25" pos:end="397:33">get_value</name><argument_list pos:start="397:34" pos:end="397:53">(<argument pos:start="397:35" pos:end="397:35"><expr pos:start="397:35" pos:end="397:35"><name pos:start="397:35" pos:end="397:35">c</name></expr></argument>, <argument pos:start="397:38" pos:end="397:52"><expr pos:start="397:38" pos:end="397:52"><name pos:start="397:38" pos:end="397:52">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="399:21" pos:end="399:64"><expr pos:start="399:21" pos:end="399:63"><name pos:start="399:21" pos:end="399:44"><name pos:start="399:21" pos:end="399:21">c</name><operator pos:start="399:22" pos:end="399:23">-&gt;</operator><name pos:start="399:24" pos:end="399:26">dsp</name><operator pos:start="399:27" pos:end="399:27">.</operator><name pos:start="399:28" pos:end="399:41">fill_block_tab</name><index pos:start="399:42" pos:end="399:44">[<expr pos:start="399:43" pos:end="399:43"><literal type="number" pos:start="399:43" pos:end="399:43">1</literal></expr>]</index></name><operator pos:start="399:45" pos:end="399:45">(</operator><name pos:start="399:46" pos:end="399:48">dst</name><operator pos:start="399:49" pos:end="399:49">,</operator> <name pos:start="399:51" pos:end="399:51">v</name><operator pos:start="399:52" pos:end="399:52">,</operator> <name pos:start="399:54" pos:end="399:59">stride</name><operator pos:start="399:60" pos:end="399:60">,</operator> <literal type="number" pos:start="399:62" pos:end="399:62">8</literal><operator pos:start="399:63" pos:end="399:63">)</operator></expr>;</expr_stmt>

                    <break pos:start="401:21" pos:end="401:26">break;</break>

                <case pos:start="403:17" pos:end="403:33">case <expr pos:start="403:22" pos:end="403:32"><name pos:start="403:22" pos:end="403:32">INTER_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="405:21" pos:end="405:56"><expr pos:start="405:21" pos:end="405:55"><name pos:start="405:21" pos:end="405:24">xoff</name> <operator pos:start="405:26" pos:end="405:26">=</operator> <call pos:start="405:28" pos:end="405:55"><name pos:start="405:28" pos:end="405:36">get_value</name><argument_list pos:start="405:37" pos:end="405:55">(<argument pos:start="405:38" pos:end="405:38"><expr pos:start="405:38" pos:end="405:38"><name pos:start="405:38" pos:end="405:38">c</name></expr></argument>, <argument pos:start="405:41" pos:end="405:54"><expr pos:start="405:41" pos:end="405:54"><name pos:start="405:41" pos:end="405:54">BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="407:21" pos:end="407:56"><expr pos:start="407:21" pos:end="407:55"><name pos:start="407:21" pos:end="407:24">yoff</name> <operator pos:start="407:26" pos:end="407:26">=</operator> <call pos:start="407:28" pos:end="407:55"><name pos:start="407:28" pos:end="407:36">get_value</name><argument_list pos:start="407:37" pos:end="407:55">(<argument pos:start="407:38" pos:end="407:38"><expr pos:start="407:38" pos:end="407:38"><name pos:start="407:38" pos:end="407:38">c</name></expr></argument>, <argument pos:start="407:41" pos:end="407:54"><expr pos:start="407:41" pos:end="407:54"><name pos:start="407:41" pos:end="407:54">BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="409:21" pos:end="409:54"><expr pos:start="409:21" pos:end="409:53"><name pos:start="409:21" pos:end="409:23">ref</name> <operator pos:start="409:25" pos:end="409:25">=</operator> <name pos:start="409:27" pos:end="409:30">prev</name> <operator pos:start="409:32" pos:end="409:32">+</operator> <name pos:start="409:34" pos:end="409:37">xoff</name> <operator pos:start="409:39" pos:end="409:39">+</operator> <name pos:start="409:41" pos:end="409:44">yoff</name> <operator pos:start="409:46" pos:end="409:46">*</operator> <name pos:start="409:48" pos:end="409:53">stride</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="411:21" pos:end="411:69"><expr pos:start="411:21" pos:end="411:68"><name pos:start="411:21" pos:end="411:47"><name pos:start="411:21" pos:end="411:21">c</name><operator pos:start="411:22" pos:end="411:23">-&gt;</operator><name pos:start="411:24" pos:end="411:26">dsp</name><operator pos:start="411:27" pos:end="411:27">.</operator><name pos:start="411:28" pos:end="411:41">put_pixels_tab</name><index pos:start="411:42" pos:end="411:44">[<expr pos:start="411:43" pos:end="411:43"><literal type="number" pos:start="411:43" pos:end="411:43">1</literal></expr>]</index><index pos:start="411:45" pos:end="411:47">[<expr pos:start="411:46" pos:end="411:46"><literal type="number" pos:start="411:46" pos:end="411:46">0</literal></expr>]</index></name><operator pos:start="411:48" pos:end="411:48">(</operator><name pos:start="411:49" pos:end="411:51">dst</name><operator pos:start="411:52" pos:end="411:52">,</operator> <name pos:start="411:54" pos:end="411:56">ref</name><operator pos:start="411:57" pos:end="411:57">,</operator> <name pos:start="411:59" pos:end="411:64">stride</name><operator pos:start="411:65" pos:end="411:65">,</operator> <literal type="number" pos:start="411:67" pos:end="411:67">8</literal><operator pos:start="411:68" pos:end="411:68">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="413:21" pos:end="413:46"><expr pos:start="413:21" pos:end="413:45"><call pos:start="413:21" pos:end="413:45"><name pos:start="413:21" pos:end="413:38"><name pos:start="413:21" pos:end="413:21">c</name><operator pos:start="413:22" pos:end="413:23">-&gt;</operator><name pos:start="413:24" pos:end="413:26">dsp</name><operator pos:start="413:27" pos:end="413:27">.</operator><name pos:start="413:28" pos:end="413:38">clear_block</name></name><argument_list pos:start="413:39" pos:end="413:45">(<argument pos:start="413:40" pos:end="413:44"><expr pos:start="413:40" pos:end="413:44"><name pos:start="413:40" pos:end="413:44">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="415:21" pos:end="415:63"><expr pos:start="415:21" pos:end="415:62"><name pos:start="415:21" pos:end="415:28"><name pos:start="415:21" pos:end="415:25">block</name><index pos:start="415:26" pos:end="415:28">[<expr pos:start="415:27" pos:end="415:27"><literal type="number" pos:start="415:27" pos:end="415:27">0</literal></expr>]</index></name> <operator pos:start="415:30" pos:end="415:30">=</operator> <call pos:start="415:32" pos:end="415:62"><name pos:start="415:32" pos:end="415:40">get_value</name><argument_list pos:start="415:41" pos:end="415:62">(<argument pos:start="415:42" pos:end="415:42"><expr pos:start="415:42" pos:end="415:42"><name pos:start="415:42" pos:end="415:42">c</name></expr></argument>, <argument pos:start="415:45" pos:end="415:61"><expr pos:start="415:45" pos:end="415:61"><name pos:start="415:45" pos:end="415:61">BINK_SRC_INTER_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="417:21" pos:end="417:76"><expr pos:start="417:21" pos:end="417:75"><call pos:start="417:21" pos:end="417:75"><name pos:start="417:21" pos:end="417:35">read_dct_coeffs</name><argument_list pos:start="417:36" pos:end="417:75">(<argument pos:start="417:37" pos:end="417:39"><expr pos:start="417:37" pos:end="417:39"><operator pos:start="417:37" pos:end="417:37">&amp;</operator><name pos:start="417:38" pos:end="417:39">gb</name></expr></argument>, <argument pos:start="417:42" pos:end="417:46"><expr pos:start="417:42" pos:end="417:46"><name pos:start="417:42" pos:end="417:46">block</name></expr></argument>, <argument pos:start="417:49" pos:end="417:71"><expr pos:start="417:49" pos:end="417:71"><name pos:start="417:49" pos:end="417:71"><name pos:start="417:49" pos:end="417:49">c</name><operator pos:start="417:50" pos:end="417:51">-&gt;</operator><name pos:start="417:52" pos:end="417:60">scantable</name><operator pos:start="417:61" pos:end="417:61">.</operator><name pos:start="417:62" pos:end="417:71">permutated</name></name></expr></argument>, <argument pos:start="417:74" pos:end="417:74"><expr pos:start="417:74" pos:end="417:74"><literal type="number" pos:start="417:74" pos:end="417:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="419:21" pos:end="419:56"><expr pos:start="419:21" pos:end="419:55"><call pos:start="419:21" pos:end="419:55"><name pos:start="419:21" pos:end="419:35"><name pos:start="419:21" pos:end="419:21">c</name><operator pos:start="419:22" pos:end="419:23">-&gt;</operator><name pos:start="419:24" pos:end="419:26">dsp</name><operator pos:start="419:27" pos:end="419:27">.</operator><name pos:start="419:28" pos:end="419:35">idct_add</name></name><argument_list pos:start="419:36" pos:end="419:55">(<argument pos:start="419:37" pos:end="419:39"><expr pos:start="419:37" pos:end="419:39"><name pos:start="419:37" pos:end="419:39">dst</name></expr></argument>, <argument pos:start="419:42" pos:end="419:47"><expr pos:start="419:42" pos:end="419:47"><name pos:start="419:42" pos:end="419:47">stride</name></expr></argument>, <argument pos:start="419:50" pos:end="419:54"><expr pos:start="419:50" pos:end="419:54"><name pos:start="419:50" pos:end="419:54">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="421:21" pos:end="421:26">break;</break>

                <case pos:start="423:17" pos:end="423:35">case <expr pos:start="423:22" pos:end="423:34"><name pos:start="423:22" pos:end="423:34">PATTERN_BLOCK</name></expr>:</case>

                    <for pos:start="425:21" pos:end="427:63">for <control pos:start="425:25" pos:end="425:43">(<init pos:start="425:26" pos:end="425:31"><expr pos:start="425:26" pos:end="425:30"><name pos:start="425:26" pos:end="425:26">i</name> <operator pos:start="425:28" pos:end="425:28">=</operator> <literal type="number" pos:start="425:30" pos:end="425:30">0</literal></expr>;</init> <condition pos:start="425:33" pos:end="425:38"><expr pos:start="425:33" pos:end="425:37"><name pos:start="425:33" pos:end="425:33">i</name> <operator pos:start="425:35" pos:end="425:35">&lt;</operator> <literal type="number" pos:start="425:37" pos:end="425:37">2</literal></expr>;</condition> <incr pos:start="425:40" pos:end="425:42"><expr pos:start="425:40" pos:end="425:42"><name pos:start="425:40" pos:end="425:40">i</name><operator pos:start="425:41" pos:end="425:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="427:25" pos:end="427:63"><block_content pos:start="427:25" pos:end="427:63">

                        <expr_stmt pos:start="427:25" pos:end="427:63"><expr pos:start="427:25" pos:end="427:62"><name pos:start="427:25" pos:end="427:30"><name pos:start="427:25" pos:end="427:27">col</name><index pos:start="427:28" pos:end="427:30">[<expr pos:start="427:29" pos:end="427:29"><name pos:start="427:29" pos:end="427:29">i</name></expr>]</index></name> <operator pos:start="427:32" pos:end="427:32">=</operator> <call pos:start="427:34" pos:end="427:62"><name pos:start="427:34" pos:end="427:42">get_value</name><argument_list pos:start="427:43" pos:end="427:62">(<argument pos:start="427:44" pos:end="427:44"><expr pos:start="427:44" pos:end="427:44"><name pos:start="427:44" pos:end="427:44">c</name></expr></argument>, <argument pos:start="427:47" pos:end="427:61"><expr pos:start="427:47" pos:end="427:61"><name pos:start="427:47" pos:end="427:61">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <for pos:start="429:21" pos:end="437:21">for <control pos:start="429:25" pos:end="429:43">(<init pos:start="429:26" pos:end="429:31"><expr pos:start="429:26" pos:end="429:30"><name pos:start="429:26" pos:end="429:26">i</name> <operator pos:start="429:28" pos:end="429:28">=</operator> <literal type="number" pos:start="429:30" pos:end="429:30">0</literal></expr>;</init> <condition pos:start="429:33" pos:end="429:38"><expr pos:start="429:33" pos:end="429:37"><name pos:start="429:33" pos:end="429:33">i</name> <operator pos:start="429:35" pos:end="429:35">&lt;</operator> <literal type="number" pos:start="429:37" pos:end="429:37">8</literal></expr>;</condition> <incr pos:start="429:40" pos:end="429:42"><expr pos:start="429:40" pos:end="429:42"><name pos:start="429:40" pos:end="429:40">i</name><operator pos:start="429:41" pos:end="429:42">++</operator></expr></incr>)</control> <block pos:start="429:45" pos:end="437:21">{<block_content pos:start="431:25" pos:end="435:59">

                        <expr_stmt pos:start="431:25" pos:end="431:59"><expr pos:start="431:25" pos:end="431:58"><name pos:start="431:25" pos:end="431:25">v</name> <operator pos:start="431:27" pos:end="431:27">=</operator> <call pos:start="431:29" pos:end="431:58"><name pos:start="431:29" pos:end="431:37">get_value</name><argument_list pos:start="431:38" pos:end="431:58">(<argument pos:start="431:39" pos:end="431:39"><expr pos:start="431:39" pos:end="431:39"><name pos:start="431:39" pos:end="431:39">c</name></expr></argument>, <argument pos:start="431:42" pos:end="431:57"><expr pos:start="431:42" pos:end="431:57"><name pos:start="431:42" pos:end="431:57">BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="433:25" pos:end="435:59">for <control pos:start="433:29" pos:end="433:56">(<init pos:start="433:30" pos:end="433:35"><expr pos:start="433:30" pos:end="433:34"><name pos:start="433:30" pos:end="433:30">j</name> <operator pos:start="433:32" pos:end="433:32">=</operator> <literal type="number" pos:start="433:34" pos:end="433:34">0</literal></expr>;</init> <condition pos:start="433:37" pos:end="433:42"><expr pos:start="433:37" pos:end="433:41"><name pos:start="433:37" pos:end="433:37">j</name> <operator pos:start="433:39" pos:end="433:39">&lt;</operator> <literal type="number" pos:start="433:41" pos:end="433:41">8</literal></expr>;</condition> <incr pos:start="433:44" pos:end="433:55"><expr pos:start="433:44" pos:end="433:46"><name pos:start="433:44" pos:end="433:44">j</name><operator pos:start="433:45" pos:end="433:46">++</operator></expr><operator pos:start="433:47" pos:end="433:47">,</operator> <expr pos:start="433:49" pos:end="433:55"><name pos:start="433:49" pos:end="433:49">v</name> <operator pos:start="433:51" pos:end="433:53">&gt;&gt;=</operator> <literal type="number" pos:start="433:55" pos:end="433:55">1</literal></expr></incr>)</control><block type="pseudo" pos:start="435:29" pos:end="435:59"><block_content pos:start="435:29" pos:end="435:59">

                            <expr_stmt pos:start="435:29" pos:end="435:59"><expr pos:start="435:29" pos:end="435:58"><name pos:start="435:29" pos:end="435:45"><name pos:start="435:29" pos:end="435:31">dst</name><index pos:start="435:32" pos:end="435:45">[<expr pos:start="435:33" pos:end="435:44"><name pos:start="435:33" pos:end="435:33">i</name><operator pos:start="435:34" pos:end="435:34">*</operator><name pos:start="435:35" pos:end="435:40">stride</name> <operator pos:start="435:42" pos:end="435:42">+</operator> <name pos:start="435:44" pos:end="435:44">j</name></expr>]</index></name> <operator pos:start="435:47" pos:end="435:47">=</operator> <name pos:start="435:49" pos:end="435:58"><name pos:start="435:49" pos:end="435:51">col</name><index pos:start="435:52" pos:end="435:58">[<expr pos:start="435:53" pos:end="435:57"><name pos:start="435:53" pos:end="435:53">v</name> <operator pos:start="435:55" pos:end="435:55">&amp;</operator> <literal type="number" pos:start="435:57" pos:end="435:57">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></for>

                    <break pos:start="439:21" pos:end="439:26">break;</break>

                <case pos:start="441:17" pos:end="441:31">case <expr pos:start="441:22" pos:end="441:30"><name pos:start="441:22" pos:end="441:30">RAW_BLOCK</name></expr>:</case>

                    <for pos:start="443:21" pos:end="445:92">for <control pos:start="443:25" pos:end="443:43">(<init pos:start="443:26" pos:end="443:31"><expr pos:start="443:26" pos:end="443:30"><name pos:start="443:26" pos:end="443:26">i</name> <operator pos:start="443:28" pos:end="443:28">=</operator> <literal type="number" pos:start="443:30" pos:end="443:30">0</literal></expr>;</init> <condition pos:start="443:33" pos:end="443:38"><expr pos:start="443:33" pos:end="443:37"><name pos:start="443:33" pos:end="443:33">i</name> <operator pos:start="443:35" pos:end="443:35">&lt;</operator> <literal type="number" pos:start="443:37" pos:end="443:37">8</literal></expr>;</condition> <incr pos:start="443:40" pos:end="443:42"><expr pos:start="443:40" pos:end="443:42"><name pos:start="443:40" pos:end="443:40">i</name><operator pos:start="443:41" pos:end="443:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="445:25" pos:end="445:92"><block_content pos:start="445:25" pos:end="445:92">

                        <expr_stmt pos:start="445:25" pos:end="445:92"><expr pos:start="445:25" pos:end="445:91"><call pos:start="445:25" pos:end="445:91"><name pos:start="445:25" pos:end="445:30">memcpy</name><argument_list pos:start="445:31" pos:end="445:91">(<argument pos:start="445:32" pos:end="445:45"><expr pos:start="445:32" pos:end="445:45"><name pos:start="445:32" pos:end="445:34">dst</name> <operator pos:start="445:36" pos:end="445:36">+</operator> <name pos:start="445:38" pos:end="445:38">i</name><operator pos:start="445:39" pos:end="445:39">*</operator><name pos:start="445:40" pos:end="445:45">stride</name></expr></argument>, <argument pos:start="445:48" pos:end="445:87"><expr pos:start="445:48" pos:end="445:87"><name pos:start="445:48" pos:end="445:73"><name pos:start="445:48" pos:end="445:48">c</name><operator pos:start="445:49" pos:end="445:50">-&gt;</operator><name pos:start="445:51" pos:end="445:56">bundle</name><index pos:start="445:57" pos:end="445:73">[<expr pos:start="445:58" pos:end="445:72"><name pos:start="445:58" pos:end="445:72">BINK_SRC_COLORS</name></expr>]</index></name><operator pos:start="445:74" pos:end="445:74">.</operator><name pos:start="445:75" pos:end="445:81">cur_ptr</name> <operator pos:start="445:83" pos:end="445:83">+</operator> <name pos:start="445:85" pos:end="445:85">i</name><operator pos:start="445:86" pos:end="445:86">*</operator><literal type="number" pos:start="445:87" pos:end="445:87">8</literal></expr></argument>, <argument pos:start="445:90" pos:end="445:90"><expr pos:start="445:90" pos:end="445:90"><literal type="number" pos:start="445:90" pos:end="445:90">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <expr_stmt pos:start="447:21" pos:end="447:61"><expr pos:start="447:21" pos:end="447:60"><name pos:start="447:21" pos:end="447:46"><name pos:start="447:21" pos:end="447:21">c</name><operator pos:start="447:22" pos:end="447:23">-&gt;</operator><name pos:start="447:24" pos:end="447:29">bundle</name><index pos:start="447:30" pos:end="447:46">[<expr pos:start="447:31" pos:end="447:45"><name pos:start="447:31" pos:end="447:45">BINK_SRC_COLORS</name></expr>]</index></name><operator pos:start="447:47" pos:end="447:47">.</operator><name pos:start="447:48" pos:end="447:54">cur_ptr</name> <operator pos:start="447:56" pos:end="447:57">+=</operator> <literal type="number" pos:start="447:59" pos:end="447:60">64</literal></expr>;</expr_stmt>

                    <break pos:start="449:21" pos:end="449:26">break;</break>

                <default pos:start="451:17" pos:end="451:24">default:</default>

                    <expr_stmt pos:start="453:21" pos:end="453:80"><expr pos:start="453:21" pos:end="453:79"><call pos:start="453:21" pos:end="453:79"><name pos:start="453:21" pos:end="453:26">av_log</name><argument_list pos:start="453:27" pos:end="453:79">(<argument pos:start="453:28" pos:end="453:32"><expr pos:start="453:28" pos:end="453:32"><name pos:start="453:28" pos:end="453:32">avctx</name></expr></argument>, <argument pos:start="453:35" pos:end="453:46"><expr pos:start="453:35" pos:end="453:46"><name pos:start="453:35" pos:end="453:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="453:49" pos:end="453:73"><expr pos:start="453:49" pos:end="453:73"><literal type="string" pos:start="453:49" pos:end="453:73">"Unknown block type %d\n"</literal></expr></argument>, <argument pos:start="453:76" pos:end="453:78"><expr pos:start="453:76" pos:end="453:78"><name pos:start="453:76" pos:end="453:78">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="455:21" pos:end="455:30">return <expr pos:start="455:28" pos:end="455:29"><operator pos:start="455:28" pos:end="455:28">-</operator><literal type="number" pos:start="455:29" pos:end="455:29">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <if_stmt pos:start="463:9" pos:end="465:67"><if pos:start="463:9" pos:end="465:67">if <condition pos:start="463:12" pos:end="463:39">(<expr pos:start="463:13" pos:end="463:38"><call pos:start="463:13" pos:end="463:31"><name pos:start="463:13" pos:end="463:26">get_bits_count</name><argument_list pos:start="463:27" pos:end="463:31">(<argument pos:start="463:28" pos:end="463:30"><expr pos:start="463:28" pos:end="463:30"><operator pos:start="463:28" pos:end="463:28">&amp;</operator><name pos:start="463:29" pos:end="463:30">gb</name></expr></argument>)</argument_list></call> <operator pos:start="463:33" pos:end="463:33">&amp;</operator> <literal type="number" pos:start="463:35" pos:end="463:38">0x1F</literal></expr>)</condition><block type="pseudo" pos:start="465:13" pos:end="465:67"><block_content pos:start="465:13" pos:end="465:67"> <comment type="line" pos:start="463:41" pos:end="463:83">//next plane data starts at 32-bit boundary</comment>

            <expr_stmt pos:start="465:13" pos:end="465:67"><expr pos:start="465:13" pos:end="465:66"><call pos:start="465:13" pos:end="465:66"><name pos:start="465:13" pos:end="465:26">skip_bits_long</name><argument_list pos:start="465:27" pos:end="465:66">(<argument pos:start="465:28" pos:end="465:30"><expr pos:start="465:28" pos:end="465:30"><operator pos:start="465:28" pos:end="465:28">&amp;</operator><name pos:start="465:29" pos:end="465:30">gb</name></expr></argument>, <argument pos:start="465:33" pos:end="465:65"><expr pos:start="465:33" pos:end="465:65"><literal type="number" pos:start="465:33" pos:end="465:36">32</literal> <operator pos:start="465:36" pos:end="465:36">-</operator> <operator pos:start="465:38" pos:end="465:38">(</operator><call pos:start="465:39" pos:end="465:57"><name pos:start="465:39" pos:end="465:52">get_bits_count</name><argument_list pos:start="465:53" pos:end="465:57">(<argument pos:start="465:54" pos:end="465:56"><expr pos:start="465:54" pos:end="465:56"><operator pos:start="465:54" pos:end="465:54">&amp;</operator><name pos:start="465:55" pos:end="465:56">gb</name></expr></argument>)</argument_list></call> <operator pos:start="465:59" pos:end="465:59">&amp;</operator> <literal type="number" pos:start="465:61" pos:end="465:64">0x1F</literal><operator pos:start="465:65" pos:end="465:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="469:5" pos:end="469:13"><expr pos:start="469:5" pos:end="469:12"><call pos:start="469:5" pos:end="469:12"><name pos:start="469:5" pos:end="469:10">emms_c</name><argument_list pos:start="469:11" pos:end="469:12">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="473:5" pos:end="473:33"><expr pos:start="473:5" pos:end="473:32"><operator pos:start="473:5" pos:end="473:5">*</operator><name pos:start="473:6" pos:end="473:14">data_size</name> <operator pos:start="473:16" pos:end="473:16">=</operator> <sizeof pos:start="473:18" pos:end="473:32">sizeof<argument_list pos:start="473:24" pos:end="473:32">(<argument pos:start="473:25" pos:end="473:31"><expr pos:start="473:25" pos:end="473:31"><name pos:start="473:25" pos:end="473:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="475:5" pos:end="475:29"><expr pos:start="475:5" pos:end="475:28"><operator pos:start="475:5" pos:end="475:5">*</operator><operator pos:start="475:6" pos:end="475:6">(</operator><name pos:start="475:7" pos:end="475:13">AVFrame</name><operator pos:start="475:14" pos:end="475:14">*</operator><operator pos:start="475:15" pos:end="475:15">)</operator><name pos:start="475:16" pos:end="475:19">data</name> <operator pos:start="475:21" pos:end="475:21">=</operator> <name pos:start="475:23" pos:end="475:28"><name pos:start="475:23" pos:end="475:23">c</name><operator pos:start="475:24" pos:end="475:25">-&gt;</operator><name pos:start="475:26" pos:end="475:28">pic</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="479:5" pos:end="479:37"><expr pos:start="479:5" pos:end="479:36"><call pos:start="479:5" pos:end="479:36"><name pos:start="479:5" pos:end="479:10">FFSWAP</name><argument_list pos:start="479:11" pos:end="479:36">(<argument pos:start="479:12" pos:end="479:18"><expr pos:start="479:12" pos:end="479:18"><name pos:start="479:12" pos:end="479:18">AVFrame</name></expr></argument>, <argument pos:start="479:21" pos:end="479:26"><expr pos:start="479:21" pos:end="479:26"><name pos:start="479:21" pos:end="479:26"><name pos:start="479:21" pos:end="479:21">c</name><operator pos:start="479:22" pos:end="479:23">-&gt;</operator><name pos:start="479:24" pos:end="479:26">pic</name></name></expr></argument>, <argument pos:start="479:29" pos:end="479:35"><expr pos:start="479:29" pos:end="479:35"><name pos:start="479:29" pos:end="479:35"><name pos:start="479:29" pos:end="479:29">c</name><operator pos:start="479:30" pos:end="479:31">-&gt;</operator><name pos:start="479:32" pos:end="479:35">last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="483:5" pos:end="483:63">/* always report that the buffer was completely consumed */</comment>

    <return pos:start="485:5" pos:end="485:21">return <expr pos:start="485:12" pos:end="485:20"><name pos:start="485:12" pos:end="485:20"><name pos:start="485:12" pos:end="485:14">pkt</name><operator pos:start="485:15" pos:end="485:16">-&gt;</operator><name pos:start="485:17" pos:end="485:20">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
