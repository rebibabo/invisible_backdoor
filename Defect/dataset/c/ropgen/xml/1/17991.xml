<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17991.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">qemu_config_parse</name><parameter_list pos:start="1:22" pos:end="1:72">(<parameter pos:start="1:23" pos:end="1:30"><decl pos:start="1:23" pos:end="1:30"><type pos:start="1:23" pos:end="1:30"><name pos:start="1:23" pos:end="1:26">FILE</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:30">fp</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:44">QemuOptsList</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier><modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">lists</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:71"><decl pos:start="1:55" pos:end="1:71"><type pos:start="1:55" pos:end="1:71"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:71">fname</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:15">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:19"><name pos:start="5:10" pos:end="5:13">line</name><index pos:start="5:14" pos:end="5:19">[<expr pos:start="5:15" pos:end="5:18"><literal type="number" pos:start="5:15" pos:end="5:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="5:22" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:22" pos:end="5:30"><name pos:start="5:22" pos:end="5:26">group</name><index pos:start="5:27" pos:end="5:30">[<expr pos:start="5:28" pos:end="5:29"><literal type="number" pos:start="5:28" pos:end="5:29">64</literal></expr>]</index></name></decl>, <decl pos:start="5:33" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:33" pos:end="5:38"><name pos:start="5:33" pos:end="5:34">id</name><index pos:start="5:35" pos:end="5:38">[<expr pos:start="5:36" pos:end="5:37"><literal type="number" pos:start="5:36" pos:end="5:37">64</literal></expr>]</index></name></decl>, <decl pos:start="5:41" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:41" pos:end="5:47"><name pos:start="5:41" pos:end="5:43">arg</name><index pos:start="5:44" pos:end="5:47">[<expr pos:start="5:45" pos:end="5:46"><literal type="number" pos:start="5:45" pos:end="5:46">64</literal></expr>]</index></name></decl>, <decl pos:start="5:50" pos:end="5:60"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:50" pos:end="5:60"><name pos:start="5:50" pos:end="5:54">value</name><index pos:start="5:55" pos:end="5:60">[<expr pos:start="5:56" pos:end="5:59"><literal type="number" pos:start="5:56" pos:end="5:59">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">Location</name></type> <name pos:start="7:14" pos:end="7:16">loc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">QemuOptsList</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">list</name> <init pos:start="9:24" pos:end="9:29">= <expr pos:start="9:26" pos:end="9:29"><name pos:start="9:26" pos:end="9:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QemuOpts</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:18">opts</name> <init pos:start="11:20" pos:end="11:25">= <expr pos:start="11:22" pos:end="11:25"><name pos:start="11:22" pos:end="11:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">res</name> <init pos:start="13:13" pos:end="13:16">= <expr pos:start="13:15" pos:end="13:16"><operator pos:start="13:15" pos:end="13:15">-</operator><literal type="number" pos:start="13:16" pos:end="13:16">1</literal></expr></init></decl>, <decl pos:start="13:19" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:21">lno</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:24"><expr pos:start="17:5" pos:end="17:23"><call pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:17">loc_push_none</name><argument_list pos:start="17:18" pos:end="17:23">(<argument pos:start="17:19" pos:end="17:22"><expr pos:start="17:19" pos:end="17:22"><operator pos:start="17:19" pos:end="17:19">&amp;</operator><name pos:start="17:20" pos:end="17:22">loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="97:5">while <condition pos:start="19:11" pos:end="19:49">(<expr pos:start="19:12" pos:end="19:48"><call pos:start="19:12" pos:end="19:40"><name pos:start="19:12" pos:end="19:16">fgets</name><argument_list pos:start="19:17" pos:end="19:40">(<argument pos:start="19:18" pos:end="19:21"><expr pos:start="19:18" pos:end="19:21"><name pos:start="19:18" pos:end="19:21">line</name></expr></argument>, <argument pos:start="19:24" pos:end="19:35"><expr pos:start="19:24" pos:end="19:35"><sizeof pos:start="19:24" pos:end="19:35">sizeof<argument_list pos:start="19:30" pos:end="19:35">(<argument pos:start="19:31" pos:end="19:34"><expr pos:start="19:31" pos:end="19:34"><name pos:start="19:31" pos:end="19:34">line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:38" pos:end="19:39"><expr pos:start="19:38" pos:end="19:39"><name pos:start="19:38" pos:end="19:39">fp</name></expr></argument>)</argument_list></call> <operator pos:start="19:42" pos:end="19:43">!=</operator> <name pos:start="19:45" pos:end="19:48">NULL</name></expr>)</condition> <block pos:start="19:51" pos:end="97:5">{<block_content pos:start="21:9" pos:end="95:17">

        <expr_stmt pos:start="21:9" pos:end="21:35"><expr pos:start="21:9" pos:end="21:34"><call pos:start="21:9" pos:end="21:34"><name pos:start="21:9" pos:end="21:20">loc_set_file</name><argument_list pos:start="21:21" pos:end="21:34">(<argument pos:start="21:22" pos:end="21:26"><expr pos:start="21:22" pos:end="21:26"><name pos:start="21:22" pos:end="21:26">fname</name></expr></argument>, <argument pos:start="21:29" pos:end="21:33"><expr pos:start="21:29" pos:end="21:33"><operator pos:start="21:29" pos:end="21:30">++</operator><name pos:start="21:31" pos:end="21:33">lno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:28">(<expr pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:16">line</name><index pos:start="23:17" pos:end="23:19">[<expr pos:start="23:18" pos:end="23:18"><literal type="number" pos:start="23:18" pos:end="23:18">0</literal></expr>]</index></name> <operator pos:start="23:21" pos:end="23:22">==</operator> <literal type="char" pos:start="23:24" pos:end="23:27">'\n'</literal></expr>)</condition> <block pos:start="23:30" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:21">

            <comment type="block" pos:start="25:13" pos:end="25:34">/* skip empty lines */</comment>

            <continue pos:start="27:13" pos:end="27:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:27">(<expr pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:16">line</name><index pos:start="31:17" pos:end="31:19">[<expr pos:start="31:18" pos:end="31:18"><literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>]</index></name> <operator pos:start="31:21" pos:end="31:22">==</operator> <literal type="char" pos:start="31:24" pos:end="31:26">'#'</literal></expr>)</condition> <block pos:start="31:29" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:21">

            <comment type="block" pos:start="33:13" pos:end="33:25">/* comment */</comment>

            <continue pos:start="35:13" pos:end="35:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="53:9"><if pos:start="39:9" pos:end="53:9">if <condition pos:start="39:12" pos:end="39:64">(<expr pos:start="39:13" pos:end="39:63"><call pos:start="39:13" pos:end="39:58"><name pos:start="39:13" pos:end="39:18">sscanf</name><argument_list pos:start="39:19" pos:end="39:58">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">line</name></expr></argument>, <argument pos:start="39:26" pos:end="39:46"><expr pos:start="39:26" pos:end="39:46"><literal type="string" pos:start="39:26" pos:end="39:46">"[%63s \"%63[^\"]\"]"</literal></expr></argument>, <argument pos:start="39:49" pos:end="39:53"><expr pos:start="39:49" pos:end="39:53"><name pos:start="39:49" pos:end="39:53">group</name></expr></argument>, <argument pos:start="39:56" pos:end="39:57"><expr pos:start="39:56" pos:end="39:57"><name pos:start="39:56" pos:end="39:57">id</name></expr></argument>)</argument_list></call> <operator pos:start="39:60" pos:end="39:61">==</operator> <literal type="number" pos:start="39:63" pos:end="39:63">2</literal></expr>)</condition> <block pos:start="39:66" pos:end="53:9">{<block_content pos:start="43:13" pos:end="51:21">

            <comment type="block" pos:start="41:13" pos:end="41:31">/* group with id */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:43"><expr pos:start="43:13" pos:end="43:42"><name pos:start="43:13" pos:end="43:16">list</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:42"><name pos:start="43:20" pos:end="43:28">find_list</name><argument_list pos:start="43:29" pos:end="43:42">(<argument pos:start="43:30" pos:end="43:34"><expr pos:start="43:30" pos:end="43:34"><name pos:start="43:30" pos:end="43:34">lists</name></expr></argument>, <argument pos:start="43:37" pos:end="43:41"><expr pos:start="43:37" pos:end="43:41"><name pos:start="43:37" pos:end="43:41">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="47:25"><if pos:start="45:13" pos:end="47:25">if <condition pos:start="45:16" pos:end="45:29">(<expr pos:start="45:17" pos:end="45:28"><name pos:start="45:17" pos:end="45:20">list</name> <operator pos:start="45:22" pos:end="45:23">==</operator> <name pos:start="45:25" pos:end="45:28">NULL</name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:25"><block_content pos:start="47:17" pos:end="47:25">

                <goto pos:start="47:17" pos:end="47:25">goto <name pos:start="47:22" pos:end="47:24">out</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:49"><expr pos:start="49:13" pos:end="49:48"><name pos:start="49:13" pos:end="49:16">opts</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="49:48"><name pos:start="49:20" pos:end="49:35">qemu_opts_create</name><argument_list pos:start="49:36" pos:end="49:48">(<argument pos:start="49:37" pos:end="49:40"><expr pos:start="49:37" pos:end="49:40"><name pos:start="49:37" pos:end="49:40">list</name></expr></argument>, <argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><name pos:start="49:43" pos:end="49:44">id</name></expr></argument>, <argument pos:start="49:47" pos:end="49:47"><expr pos:start="49:47" pos:end="49:47"><literal type="number" pos:start="49:47" pos:end="49:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="69:9"><if pos:start="55:9" pos:end="69:9">if <condition pos:start="55:12" pos:end="55:50">(<expr pos:start="55:13" pos:end="55:49"><call pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:18">sscanf</name><argument_list pos:start="55:19" pos:end="55:44">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">line</name></expr></argument>, <argument pos:start="55:26" pos:end="55:36"><expr pos:start="55:26" pos:end="55:36"><literal type="string" pos:start="55:26" pos:end="55:36">"[%63[^]]]"</literal></expr></argument>, <argument pos:start="55:39" pos:end="55:43"><expr pos:start="55:39" pos:end="55:43"><name pos:start="55:39" pos:end="55:43">group</name></expr></argument>)</argument_list></call> <operator pos:start="55:46" pos:end="55:47">==</operator> <literal type="number" pos:start="55:49" pos:end="55:49">1</literal></expr>)</condition> <block pos:start="55:52" pos:end="69:9">{<block_content pos:start="59:13" pos:end="67:21">

            <comment type="block" pos:start="57:13" pos:end="57:34">/* group without id */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:43"><expr pos:start="59:13" pos:end="59:42"><name pos:start="59:13" pos:end="59:16">list</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <call pos:start="59:20" pos:end="59:42"><name pos:start="59:20" pos:end="59:28">find_list</name><argument_list pos:start="59:29" pos:end="59:42">(<argument pos:start="59:30" pos:end="59:34"><expr pos:start="59:30" pos:end="59:34"><name pos:start="59:30" pos:end="59:34">lists</name></expr></argument>, <argument pos:start="59:37" pos:end="59:41"><expr pos:start="59:37" pos:end="59:41"><name pos:start="59:37" pos:end="59:41">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="63:25"><if pos:start="61:13" pos:end="63:25">if <condition pos:start="61:16" pos:end="61:29">(<expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:20">list</name> <operator pos:start="61:22" pos:end="61:23">==</operator> <name pos:start="61:25" pos:end="61:28">NULL</name></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:25"><block_content pos:start="63:17" pos:end="63:25">

                <goto pos:start="63:17" pos:end="63:25">goto <name pos:start="63:22" pos:end="63:24">out</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:51"><expr pos:start="65:13" pos:end="65:50"><name pos:start="65:13" pos:end="65:16">opts</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:50"><name pos:start="65:20" pos:end="65:35">qemu_opts_create</name><argument_list pos:start="65:36" pos:end="65:50">(<argument pos:start="65:37" pos:end="65:40"><expr pos:start="65:37" pos:end="65:40"><name pos:start="65:37" pos:end="65:40">list</name></expr></argument>, <argument pos:start="65:43" pos:end="65:46"><expr pos:start="65:43" pos:end="65:46"><name pos:start="65:43" pos:end="65:46">NULL</name></expr></argument>, <argument pos:start="65:49" pos:end="65:49"><expr pos:start="65:49" pos:end="65:49"><literal type="number" pos:start="65:49" pos:end="65:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="67:13" pos:end="67:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="91:9"><if pos:start="71:9" pos:end="91:9">if <condition pos:start="71:12" pos:end="71:68">(<expr pos:start="71:13" pos:end="71:67"><call pos:start="71:13" pos:end="71:62"><name pos:start="71:13" pos:end="71:18">sscanf</name><argument_list pos:start="71:19" pos:end="71:62">(<argument pos:start="71:20" pos:end="71:23"><expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">line</name></expr></argument>, <argument pos:start="71:26" pos:end="71:49"><expr pos:start="71:26" pos:end="71:49"><literal type="string" pos:start="71:26" pos:end="71:49">" %63s = \"%1023[^\"]\""</literal></expr></argument>, <argument pos:start="71:52" pos:end="71:54"><expr pos:start="71:52" pos:end="71:54"><name pos:start="71:52" pos:end="71:54">arg</name></expr></argument>, <argument pos:start="71:57" pos:end="71:61"><expr pos:start="71:57" pos:end="71:61"><name pos:start="71:57" pos:end="71:61">value</name></expr></argument>)</argument_list></call> <operator pos:start="71:64" pos:end="71:65">==</operator> <literal type="number" pos:start="71:67" pos:end="71:67">2</literal></expr>)</condition> <block pos:start="71:70" pos:end="91:9">{<block_content pos:start="75:13" pos:end="89:21">

            <comment type="block" pos:start="73:13" pos:end="73:29">/* arg = value */</comment>

            <if_stmt pos:start="75:13" pos:end="81:13"><if pos:start="75:13" pos:end="81:13">if <condition pos:start="75:16" pos:end="75:29">(<expr pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:20">opts</name> <operator pos:start="75:22" pos:end="75:23">==</operator> <name pos:start="75:25" pos:end="75:28">NULL</name></expr>)</condition> <block pos:start="75:31" pos:end="81:13">{<block_content pos:start="77:17" pos:end="79:25">

                <expr_stmt pos:start="77:17" pos:end="77:49"><expr pos:start="77:17" pos:end="77:48"><call pos:start="77:17" pos:end="77:48"><name pos:start="77:17" pos:end="77:28">error_report</name><argument_list pos:start="77:29" pos:end="77:48">(<argument pos:start="77:30" pos:end="77:47"><expr pos:start="77:30" pos:end="77:47"><literal type="string" pos:start="77:30" pos:end="77:47">"no group defined"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="79:17" pos:end="79:25">goto <name pos:start="79:22" pos:end="79:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="83:13" pos:end="87:13"><if pos:start="83:13" pos:end="87:13">if <condition pos:start="83:16" pos:end="83:52">(<expr pos:start="83:17" pos:end="83:51"><call pos:start="83:17" pos:end="83:46"><name pos:start="83:17" pos:end="83:28">qemu_opt_set</name><argument_list pos:start="83:29" pos:end="83:46">(<argument pos:start="83:30" pos:end="83:33"><expr pos:start="83:30" pos:end="83:33"><name pos:start="83:30" pos:end="83:33">opts</name></expr></argument>, <argument pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><name pos:start="83:36" pos:end="83:38">arg</name></expr></argument>, <argument pos:start="83:41" pos:end="83:45"><expr pos:start="83:41" pos:end="83:45"><name pos:start="83:41" pos:end="83:45">value</name></expr></argument>)</argument_list></call> <operator pos:start="83:48" pos:end="83:49">!=</operator> <literal type="number" pos:start="83:51" pos:end="83:51">0</literal></expr>)</condition> <block pos:start="83:54" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:25">

                <goto pos:start="85:17" pos:end="85:25">goto <name pos:start="85:22" pos:end="85:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <continue pos:start="89:13" pos:end="89:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><call pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:20">error_report</name><argument_list pos:start="93:21" pos:end="93:35">(<argument pos:start="93:22" pos:end="93:34"><expr pos:start="93:22" pos:end="93:34"><literal type="string" pos:start="93:22" pos:end="93:34">"parse error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:17">goto <name pos:start="95:14" pos:end="95:16">out</name>;</goto>

    </block_content>}</block></while>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:19">(<expr pos:start="99:9" pos:end="99:18"><call pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:14">ferror</name><argument_list pos:start="99:15" pos:end="99:18">(<argument pos:start="99:16" pos:end="99:17"><expr pos:start="99:16" pos:end="99:17"><name pos:start="99:16" pos:end="99:17">fp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:21" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:17">

        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><call pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:20">error_report</name><argument_list pos:start="101:21" pos:end="101:42">(<argument pos:start="101:22" pos:end="101:41"><expr pos:start="101:22" pos:end="101:41"><literal type="string" pos:start="101:22" pos:end="101:41">"error reading file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:12"><expr pos:start="107:5" pos:end="107:11"><name pos:start="107:5" pos:end="107:7">res</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <literal type="number" pos:start="107:11" pos:end="107:11">0</literal></expr>;</expr_stmt>

<label pos:start="109:1" pos:end="109:4"><name pos:start="109:1" pos:end="109:3">out</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:18"><expr pos:start="111:5" pos:end="111:17"><call pos:start="111:5" pos:end="111:17"><name pos:start="111:5" pos:end="111:11">loc_pop</name><argument_list pos:start="111:12" pos:end="111:17">(<argument pos:start="111:13" pos:end="111:16"><expr pos:start="111:13" pos:end="111:16"><operator pos:start="111:13" pos:end="111:13">&amp;</operator><name pos:start="111:14" pos:end="111:16">loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="113:5" pos:end="113:15">return <expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
