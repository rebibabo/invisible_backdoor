<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/394.c" pos:tabs="8"><function pos:start="1:1" pos:end="615:17"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">wma_decode_block</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:43">WMACodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="615:17">{<block_content pos:start="5:5" pos:end="615:17">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">n</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">v</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">a</name></decl>, <decl pos:start="5:18" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:19">ch</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">bsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">coef_nb_bits</name></decl>, <decl pos:start="7:23" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:32">total_gain</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:30"><name pos:start="9:9" pos:end="9:16">nb_coefs</name><index pos:start="9:17" pos:end="9:30">[<expr pos:start="9:18" pos:end="9:29"><name pos:start="9:18" pos:end="9:29">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:9">float</name></type> <name pos:start="11:11" pos:end="11:19">mdct_norm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">FFTContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:20">mdct</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="17:1" pos:end="17:12">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:12">TRACE</name></cpp:ifdef>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:83"><call pos:start="19:5" pos:end="19:83"><name pos:start="19:5" pos:end="19:11">tprintf</name><argument_list pos:start="19:12" pos:end="19:83">(<argument pos:start="19:13" pos:end="19:20"><expr pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:20">avctx</name></name></expr></argument>, <argument pos:start="19:23" pos:end="19:48"><expr pos:start="19:23" pos:end="19:48"><literal type="string" pos:start="19:23" pos:end="19:48">"***decode_block: %d:%d\n"</literal></expr></argument>, <argument pos:start="19:51" pos:end="19:68"><expr pos:start="19:51" pos:end="19:68"><name pos:start="19:51" pos:end="19:64"><name pos:start="19:51" pos:end="19:51">s</name><operator pos:start="19:52" pos:end="19:53">-&gt;</operator><name pos:start="19:54" pos:end="19:64">frame_count</name></name> <operator pos:start="19:66" pos:end="19:66">-</operator> <literal type="number" pos:start="19:68" pos:end="19:68">1</literal></expr></argument>, <argument pos:start="19:71" pos:end="19:82"><expr pos:start="19:71" pos:end="19:82"><name pos:start="19:71" pos:end="19:82"><name pos:start="19:71" pos:end="19:71">s</name><operator pos:start="19:72" pos:end="19:73">-&gt;</operator><name pos:start="19:74" pos:end="19:82">block_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="25:5" pos:end="25:38">/* compute current block length */</comment>

    <if_stmt pos:start="27:5" pos:end="615:17"><if pos:start="27:5" pos:end="615:17">if <condition pos:start="27:8" pos:end="27:34">(<expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:33">use_variable_block_len</name></name></expr>)</condition> <block pos:start="27:36" pos:end="615:17">{<block_content pos:start="29:9" pos:end="615:17">

        <expr_stmt pos:start="29:9" pos:end="29:47"><expr pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:9">n</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:19">av_log2</name><argument_list pos:start="29:20" pos:end="29:42">(<argument pos:start="29:21" pos:end="29:41"><expr pos:start="29:21" pos:end="29:41"><name pos:start="29:21" pos:end="29:37"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:37">nb_block_sizes</name></name> <operator pos:start="29:39" pos:end="29:39">-</operator> <literal type="number" pos:start="29:41" pos:end="29:41">1</literal></expr></argument>)</argument_list></call> <operator pos:start="29:44" pos:end="29:44">+</operator> <literal type="number" pos:start="29:46" pos:end="29:46">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="615:17"><if pos:start="33:9" pos:end="615:17">if <condition pos:start="33:12" pos:end="33:35">(<expr pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:34">reset_block_lengths</name></name></expr>)</condition> <block pos:start="33:37" pos:end="615:17">{<block_content pos:start="35:13" pos:end="615:17">

            <expr_stmt pos:start="35:13" pos:end="35:39"><expr pos:start="35:13" pos:end="35:38"><name pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:34">reset_block_lengths</name></name> <operator pos:start="35:36" pos:end="35:36">=</operator> <literal type="number" pos:start="35:38" pos:end="35:38">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:36"><expr pos:start="37:13" pos:end="37:35"><name pos:start="37:13" pos:end="37:13">v</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:35"><name pos:start="37:17" pos:end="37:24">get_bits</name><argument_list pos:start="37:25" pos:end="37:35">(<argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:31"><name pos:start="37:27" pos:end="37:27">s</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:31">gb</name></name></expr></argument>, <argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><name pos:start="37:34" pos:end="37:34">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="615:17"><if pos:start="39:13" pos:end="615:17">if <condition pos:start="39:16" pos:end="39:39">(<expr pos:start="39:17" pos:end="39:38"><name pos:start="39:17" pos:end="39:17">v</name> <operator pos:start="39:19" pos:end="39:20">&gt;=</operator> <name pos:start="39:22" pos:end="39:38"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:38">nb_block_sizes</name></name></expr>)</condition><block pos:start="39:40" pos:end="615:17">{<block_content pos:start="41:17" pos:end="615:17">

                <expr_stmt pos:start="41:17" pos:end="41:111"><expr pos:start="41:17" pos:end="41:110"><call pos:start="41:17" pos:end="41:110"><name pos:start="41:17" pos:end="41:22">av_log</name><argument_list pos:start="41:23" pos:end="41:110">(<argument pos:start="41:24" pos:end="41:31"><expr pos:start="41:24" pos:end="41:31"><name pos:start="41:24" pos:end="41:31"><name pos:start="41:24" pos:end="41:24">s</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:31">avctx</name></name></expr></argument>, <argument pos:start="41:34" pos:end="41:45"><expr pos:start="41:34" pos:end="41:45"><name pos:start="41:34" pos:end="41:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:48" pos:end="41:86"><expr pos:start="41:48" pos:end="41:86"><literal type="string" pos:start="41:48" pos:end="41:86">"prev_block_len_bits %d out of range\n"</literal></expr></argument>, <argument pos:start="41:89" pos:end="41:109"><expr pos:start="41:89" pos:end="41:109"><name pos:start="41:89" pos:end="41:105"><name pos:start="41:89" pos:end="41:89">s</name><operator pos:start="41:90" pos:end="41:91">-&gt;</operator><name pos:start="41:92" pos:end="41:105">frame_len_bits</name></name> <operator pos:start="41:107" pos:end="41:107">-</operator> <name pos:start="41:109" pos:end="41:109">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="43:17" pos:end="43:26">return <expr pos:start="43:24" pos:end="43:25"><operator pos:start="43:24" pos:end="43:24">-</operator><literal type="number" pos:start="43:25" pos:end="43:25">1</literal></expr>;</return>


            <expr_stmt pos:start="46:13" pos:end="46:59"><expr pos:start="46:13" pos:end="46:58"><name pos:start="46:13" pos:end="46:34"><name pos:start="46:13" pos:end="46:13">s</name><operator pos:start="46:14" pos:end="46:15">-&gt;</operator><name pos:start="46:16" pos:end="46:34">prev_block_len_bits</name></name> <operator pos:start="46:36" pos:end="46:36">=</operator> <name pos:start="46:38" pos:end="46:54"><name pos:start="46:38" pos:end="46:38">s</name><operator pos:start="46:39" pos:end="46:40">-&gt;</operator><name pos:start="46:41" pos:end="46:54">frame_len_bits</name></name> <operator pos:start="46:56" pos:end="46:56">-</operator> <name pos:start="46:58" pos:end="46:58">v</name></expr>;</expr_stmt>

            <expr_stmt pos:start="48:13" pos:end="48:36"><expr pos:start="48:13" pos:end="48:35"><name pos:start="48:13" pos:end="48:13">v</name> <operator pos:start="48:15" pos:end="48:15">=</operator> <call pos:start="48:17" pos:end="48:35"><name pos:start="48:17" pos:end="48:24">get_bits</name><argument_list pos:start="48:25" pos:end="48:35">(<argument pos:start="48:26" pos:end="48:31"><expr pos:start="48:26" pos:end="48:31"><operator pos:start="48:26" pos:end="48:26">&amp;</operator><name pos:start="48:27" pos:end="48:31"><name pos:start="48:27" pos:end="48:27">s</name><operator pos:start="48:28" pos:end="48:29">-&gt;</operator><name pos:start="48:30" pos:end="48:31">gb</name></name></expr></argument>, <argument pos:start="48:34" pos:end="48:34"><expr pos:start="48:34" pos:end="48:34"><name pos:start="48:34" pos:end="48:34">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="50:13" pos:end="615:17"><if pos:start="50:13" pos:end="59:9">if <condition pos:start="50:16" pos:end="50:39">(<expr pos:start="50:17" pos:end="50:38"><name pos:start="50:17" pos:end="50:17">v</name> <operator pos:start="50:19" pos:end="50:20">&gt;=</operator> <name pos:start="50:22" pos:end="50:38"><name pos:start="50:22" pos:end="50:22">s</name><operator pos:start="50:23" pos:end="50:24">-&gt;</operator><name pos:start="50:25" pos:end="50:38">nb_block_sizes</name></name></expr>)</condition><block pos:start="50:40" pos:end="59:9">{<block_content pos:start="52:17" pos:end="57:54">

                <expr_stmt pos:start="52:17" pos:end="52:106"><expr pos:start="52:17" pos:end="52:105"><call pos:start="52:17" pos:end="52:105"><name pos:start="52:17" pos:end="52:22">av_log</name><argument_list pos:start="52:23" pos:end="52:105">(<argument pos:start="52:24" pos:end="52:31"><expr pos:start="52:24" pos:end="52:31"><name pos:start="52:24" pos:end="52:31"><name pos:start="52:24" pos:end="52:24">s</name><operator pos:start="52:25" pos:end="52:26">-&gt;</operator><name pos:start="52:27" pos:end="52:31">avctx</name></name></expr></argument>, <argument pos:start="52:34" pos:end="52:45"><expr pos:start="52:34" pos:end="52:45"><name pos:start="52:34" pos:end="52:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="52:48" pos:end="52:81"><expr pos:start="52:48" pos:end="52:81"><literal type="string" pos:start="52:48" pos:end="52:81">"block_len_bits %d out of range\n"</literal></expr></argument>, <argument pos:start="52:84" pos:end="52:104"><expr pos:start="52:84" pos:end="52:104"><name pos:start="52:84" pos:end="52:100"><name pos:start="52:84" pos:end="52:84">s</name><operator pos:start="52:85" pos:end="52:86">-&gt;</operator><name pos:start="52:87" pos:end="52:100">frame_len_bits</name></name> <operator pos:start="52:102" pos:end="52:102">-</operator> <name pos:start="52:104" pos:end="52:104">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="54:17" pos:end="54:26">return <expr pos:start="54:24" pos:end="54:25"><operator pos:start="54:24" pos:end="54:24">-</operator><literal type="number" pos:start="54:25" pos:end="54:25">1</literal></expr>;</return>


            <expr_stmt pos:start="57:13" pos:end="57:54"><expr pos:start="57:13" pos:end="57:53"><name pos:start="57:13" pos:end="57:29"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:29">block_len_bits</name></name> <operator pos:start="57:31" pos:end="57:31">=</operator> <name pos:start="57:33" pos:end="57:49"><name pos:start="57:33" pos:end="57:33">s</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:49">frame_len_bits</name></name> <operator pos:start="57:51" pos:end="57:51">-</operator> <name pos:start="57:53" pos:end="57:53">v</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="615:17">else <block pos:start="59:16" pos:end="615:17">{<block_content pos:start="63:13" pos:end="615:17">

            <comment type="block" pos:start="61:13" pos:end="61:38">/* update block lengths */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:55"><expr pos:start="63:13" pos:end="63:54"><name pos:start="63:13" pos:end="63:34"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:34">prev_block_len_bits</name></name> <operator pos:start="63:36" pos:end="63:36">=</operator> <name pos:start="63:38" pos:end="63:54"><name pos:start="63:38" pos:end="63:38">s</name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:54">block_len_bits</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:55"><expr pos:start="65:13" pos:end="65:54"><name pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:29">block_len_bits</name></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <name pos:start="65:33" pos:end="65:54"><name pos:start="65:33" pos:end="65:33">s</name><operator pos:start="65:34" pos:end="65:35">-&gt;</operator><name pos:start="65:36" pos:end="65:54">next_block_len_bits</name></name></expr>;</expr_stmt>


        <expr_stmt pos:start="68:9" pos:end="68:32"><expr pos:start="68:9" pos:end="68:31"><name pos:start="68:9" pos:end="68:9">v</name> <operator pos:start="68:11" pos:end="68:11">=</operator> <call pos:start="68:13" pos:end="68:31"><name pos:start="68:13" pos:end="68:20">get_bits</name><argument_list pos:start="68:21" pos:end="68:31">(<argument pos:start="68:22" pos:end="68:27"><expr pos:start="68:22" pos:end="68:27"><operator pos:start="68:22" pos:end="68:22">&amp;</operator><name pos:start="68:23" pos:end="68:27"><name pos:start="68:23" pos:end="68:23">s</name><operator pos:start="68:24" pos:end="68:25">-&gt;</operator><name pos:start="68:26" pos:end="68:27">gb</name></name></expr></argument>, <argument pos:start="68:30" pos:end="68:30"><expr pos:start="68:30" pos:end="68:30"><name pos:start="68:30" pos:end="68:30">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="70:9" pos:end="615:17"><if pos:start="70:9" pos:end="79:5">if <condition pos:start="70:12" pos:end="70:35">(<expr pos:start="70:13" pos:end="70:34"><name pos:start="70:13" pos:end="70:13">v</name> <operator pos:start="70:15" pos:end="70:16">&gt;=</operator> <name pos:start="70:18" pos:end="70:34"><name pos:start="70:18" pos:end="70:18">s</name><operator pos:start="70:19" pos:end="70:20">-&gt;</operator><name pos:start="70:21" pos:end="70:34">nb_block_sizes</name></name></expr>)</condition><block pos:start="70:36" pos:end="79:5">{<block_content pos:start="72:13" pos:end="77:55">

            <expr_stmt pos:start="72:13" pos:end="72:107"><expr pos:start="72:13" pos:end="72:106"><call pos:start="72:13" pos:end="72:106"><name pos:start="72:13" pos:end="72:18">av_log</name><argument_list pos:start="72:19" pos:end="72:106">(<argument pos:start="72:20" pos:end="72:27"><expr pos:start="72:20" pos:end="72:27"><name pos:start="72:20" pos:end="72:27"><name pos:start="72:20" pos:end="72:20">s</name><operator pos:start="72:21" pos:end="72:22">-&gt;</operator><name pos:start="72:23" pos:end="72:27">avctx</name></name></expr></argument>, <argument pos:start="72:30" pos:end="72:41"><expr pos:start="72:30" pos:end="72:41"><name pos:start="72:30" pos:end="72:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="72:44" pos:end="72:82"><expr pos:start="72:44" pos:end="72:82"><literal type="string" pos:start="72:44" pos:end="72:82">"next_block_len_bits %d out of range\n"</literal></expr></argument>, <argument pos:start="72:85" pos:end="72:105"><expr pos:start="72:85" pos:end="72:105"><name pos:start="72:85" pos:end="72:101"><name pos:start="72:85" pos:end="72:85">s</name><operator pos:start="72:86" pos:end="72:87">-&gt;</operator><name pos:start="72:88" pos:end="72:101">frame_len_bits</name></name> <operator pos:start="72:103" pos:end="72:103">-</operator> <name pos:start="72:105" pos:end="72:105">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="74:13" pos:end="74:22">return <expr pos:start="74:20" pos:end="74:21"><operator pos:start="74:20" pos:end="74:20">-</operator><literal type="number" pos:start="74:21" pos:end="74:21">1</literal></expr>;</return>


        <expr_stmt pos:start="77:9" pos:end="77:55"><expr pos:start="77:9" pos:end="77:54"><name pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:30">next_block_len_bits</name></name> <operator pos:start="77:32" pos:end="77:32">=</operator> <name pos:start="77:34" pos:end="77:50"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:50">frame_len_bits</name></name> <operator pos:start="77:52" pos:end="77:52">-</operator> <name pos:start="77:54" pos:end="77:54">v</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="79:7" pos:end="615:17">else <block pos:start="79:12" pos:end="615:17">{<block_content pos:start="83:9" pos:end="615:17">

        <comment type="block" pos:start="81:9" pos:end="81:29">/* fixed block len */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:51"><expr pos:start="83:9" pos:end="83:50"><name pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:30">next_block_len_bits</name></name> <operator pos:start="83:32" pos:end="83:32">=</operator> <name pos:start="83:34" pos:end="83:50"><name pos:start="83:34" pos:end="83:34">s</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:50">frame_len_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:51"><expr pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:30">prev_block_len_bits</name></name> <operator pos:start="85:32" pos:end="85:32">=</operator> <name pos:start="85:34" pos:end="85:50"><name pos:start="85:34" pos:end="85:34">s</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:50">frame_len_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:46"><expr pos:start="87:9" pos:end="87:45"><name pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:25">block_len_bits</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <name pos:start="87:29" pos:end="87:45"><name pos:start="87:29" pos:end="87:29">s</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:45">frame_len_bits</name></name></expr>;</expr_stmt>




    <if_stmt pos:start="92:5" pos:end="615:17"><if pos:start="92:5" pos:end="615:17">if <condition pos:start="92:8" pos:end="92:67">(<expr pos:start="92:9" pos:end="92:66"><name pos:start="92:9" pos:end="92:25"><name pos:start="92:9" pos:end="92:9">s</name><operator pos:start="92:10" pos:end="92:11">-&gt;</operator><name pos:start="92:12" pos:end="92:25">frame_len_bits</name></name> <operator pos:start="92:27" pos:end="92:27">-</operator> <name pos:start="92:29" pos:end="92:45"><name pos:start="92:29" pos:end="92:29">s</name><operator pos:start="92:30" pos:end="92:31">-&gt;</operator><name pos:start="92:32" pos:end="92:45">block_len_bits</name></name> <operator pos:start="92:47" pos:end="92:48">&gt;=</operator> <name pos:start="92:50" pos:end="92:66"><name pos:start="92:50" pos:end="92:50">s</name><operator pos:start="92:51" pos:end="92:52">-&gt;</operator><name pos:start="92:53" pos:end="92:66">nb_block_sizes</name></name></expr>)</condition><block pos:start="92:68" pos:end="615:17">{<block_content pos:start="94:9" pos:end="615:17">

        <expr_stmt pos:start="94:9" pos:end="94:92"><expr pos:start="94:9" pos:end="94:91"><call pos:start="94:9" pos:end="94:91"><name pos:start="94:9" pos:end="94:14">av_log</name><argument_list pos:start="94:15" pos:end="94:91">(<argument pos:start="94:16" pos:end="94:23"><expr pos:start="94:16" pos:end="94:23"><name pos:start="94:16" pos:end="94:23"><name pos:start="94:16" pos:end="94:16">s</name><operator pos:start="94:17" pos:end="94:18">-&gt;</operator><name pos:start="94:19" pos:end="94:23">avctx</name></name></expr></argument>, <argument pos:start="94:26" pos:end="94:37"><expr pos:start="94:26" pos:end="94:37"><name pos:start="94:26" pos:end="94:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="94:40" pos:end="94:90"><expr pos:start="94:40" pos:end="94:90"><literal type="string" pos:start="94:40" pos:end="94:90">"block_len_bits not initialized to a valid value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="96:9" pos:end="96:18">return <expr pos:start="96:16" pos:end="96:17"><operator pos:start="96:16" pos:end="96:16">-</operator><literal type="number" pos:start="96:17" pos:end="96:17">1</literal></expr>;</return>




    <comment type="block" pos:start="101:5" pos:end="101:73">/* now check if the block length is coherent with the frame length */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:42"><expr pos:start="103:5" pos:end="103:41"><name pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:16">block_len</name></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <literal type="number" pos:start="103:20" pos:end="103:20">1</literal> <operator pos:start="103:22" pos:end="103:23">&lt;&lt;</operator> <name pos:start="103:25" pos:end="103:41"><name pos:start="103:25" pos:end="103:25">s</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:41">block_len_bits</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="615:17"><if pos:start="105:5" pos:end="615:17">if <condition pos:start="105:8" pos:end="105:53">(<expr pos:start="105:9" pos:end="105:52"><operator pos:start="105:9" pos:end="105:9">(</operator><name pos:start="105:10" pos:end="105:21"><name pos:start="105:10" pos:end="105:10">s</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:21">block_pos</name></name> <operator pos:start="105:23" pos:end="105:23">+</operator> <name pos:start="105:25" pos:end="105:36"><name pos:start="105:25" pos:end="105:25">s</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:36">block_len</name></name><operator pos:start="105:37" pos:end="105:37">)</operator> <operator pos:start="105:39" pos:end="105:39">&gt;</operator> <name pos:start="105:41" pos:end="105:52"><name pos:start="105:41" pos:end="105:41">s</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:52">frame_len</name></name></expr>)</condition><block pos:start="105:54" pos:end="615:17">{<block_content pos:start="107:9" pos:end="615:17">

        <expr_stmt pos:start="107:9" pos:end="107:63"><expr pos:start="107:9" pos:end="107:62"><call pos:start="107:9" pos:end="107:62"><name pos:start="107:9" pos:end="107:14">av_log</name><argument_list pos:start="107:15" pos:end="107:62">(<argument pos:start="107:16" pos:end="107:23"><expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:16">s</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:23">avctx</name></name></expr></argument>, <argument pos:start="107:26" pos:end="107:37"><expr pos:start="107:26" pos:end="107:37"><name pos:start="107:26" pos:end="107:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:40" pos:end="107:61"><expr pos:start="107:40" pos:end="107:61"><literal type="string" pos:start="107:40" pos:end="107:61">"frame_len overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:18">return <expr pos:start="109:16" pos:end="109:17"><operator pos:start="109:16" pos:end="109:16">-</operator><literal type="number" pos:start="109:17" pos:end="109:17">1</literal></expr>;</return>




    <if_stmt pos:start="114:5" pos:end="615:17"><if pos:start="114:5" pos:end="615:17">if <condition pos:start="114:8" pos:end="114:32">(<expr pos:start="114:9" pos:end="114:31"><name pos:start="114:9" pos:end="114:26"><name pos:start="114:9" pos:end="114:9">s</name><operator pos:start="114:10" pos:end="114:11">-&gt;</operator><name pos:start="114:12" pos:end="114:16">avctx</name><operator pos:start="114:17" pos:end="114:18">-&gt;</operator><name pos:start="114:19" pos:end="114:26">channels</name></name> <operator pos:start="114:28" pos:end="114:29">==</operator> <literal type="number" pos:start="114:31" pos:end="114:31">2</literal></expr>)</condition> <block pos:start="114:34" pos:end="615:17">{<block_content pos:start="116:9" pos:end="615:17">

        <expr_stmt pos:start="116:9" pos:end="116:41"><expr pos:start="116:9" pos:end="116:40"><name pos:start="116:9" pos:end="116:20"><name pos:start="116:9" pos:end="116:9">s</name><operator pos:start="116:10" pos:end="116:11">-&gt;</operator><name pos:start="116:12" pos:end="116:20">ms_stereo</name></name> <operator pos:start="116:22" pos:end="116:22">=</operator> <call pos:start="116:24" pos:end="116:40"><name pos:start="116:24" pos:end="116:32">get_bits1</name><argument_list pos:start="116:33" pos:end="116:40">(<argument pos:start="116:34" pos:end="116:39"><expr pos:start="116:34" pos:end="116:39"><operator pos:start="116:34" pos:end="116:34">&amp;</operator><name pos:start="116:35" pos:end="116:39"><name pos:start="116:35" pos:end="116:35">s</name><operator pos:start="116:36" pos:end="116:37">-&gt;</operator><name pos:start="116:38" pos:end="116:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="119:5" pos:end="119:10"><expr pos:start="119:5" pos:end="119:9"><name pos:start="119:5" pos:end="119:5">v</name> <operator pos:start="119:7" pos:end="119:7">=</operator> <literal type="number" pos:start="119:9" pos:end="119:9">0</literal></expr>;</expr_stmt>

    <for pos:start="121:5" pos:end="615:17">for<control pos:start="121:8" pos:end="121:46">(<init pos:start="121:9" pos:end="121:15"><expr pos:start="121:9" pos:end="121:14"><name pos:start="121:9" pos:end="121:10">ch</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <literal type="number" pos:start="121:14" pos:end="121:14">0</literal></expr>;</init> <condition pos:start="121:17" pos:end="121:40"><expr pos:start="121:17" pos:end="121:39"><name pos:start="121:17" pos:end="121:18">ch</name> <operator pos:start="121:20" pos:end="121:20">&lt;</operator> <name pos:start="121:22" pos:end="121:39"><name pos:start="121:22" pos:end="121:22">s</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:29">avctx</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:39">channels</name></name></expr>;</condition> <incr pos:start="121:42" pos:end="121:45"><expr pos:start="121:42" pos:end="121:45"><name pos:start="121:42" pos:end="121:43">ch</name><operator pos:start="121:44" pos:end="121:45">++</operator></expr></incr>)</control> <block pos:start="121:48" pos:end="615:17">{<block_content pos:start="123:9" pos:end="615:17">

        <expr_stmt pos:start="123:9" pos:end="123:30"><expr pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:9">a</name> <operator pos:start="123:11" pos:end="123:11">=</operator> <call pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:21">get_bits1</name><argument_list pos:start="123:22" pos:end="123:29">(<argument pos:start="123:23" pos:end="123:28"><expr pos:start="123:23" pos:end="123:28"><operator pos:start="123:23" pos:end="123:23">&amp;</operator><name pos:start="123:24" pos:end="123:28"><name pos:start="123:24" pos:end="123:24">s</name><operator pos:start="123:25" pos:end="123:26">-&gt;</operator><name pos:start="123:27" pos:end="123:28">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:33"><expr pos:start="125:9" pos:end="125:32"><name pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:24">channel_coded</name><index pos:start="125:25" pos:end="125:28">[<expr pos:start="125:26" pos:end="125:27"><name pos:start="125:26" pos:end="125:27">ch</name></expr>]</index></name> <operator pos:start="125:30" pos:end="125:30">=</operator> <name pos:start="125:32" pos:end="125:32">a</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:15"><expr pos:start="127:9" pos:end="127:14"><name pos:start="127:9" pos:end="127:9">v</name> <operator pos:start="127:11" pos:end="127:12">|=</operator> <name pos:start="127:14" pos:end="127:14">a</name></expr>;</expr_stmt>




    <expr_stmt pos:start="132:5" pos:end="132:50"><expr pos:start="132:5" pos:end="132:49"><name pos:start="132:5" pos:end="132:9">bsize</name> <operator pos:start="132:11" pos:end="132:11">=</operator> <name pos:start="132:13" pos:end="132:29"><name pos:start="132:13" pos:end="132:13">s</name><operator pos:start="132:14" pos:end="132:15">-&gt;</operator><name pos:start="132:16" pos:end="132:29">frame_len_bits</name></name> <operator pos:start="132:31" pos:end="132:31">-</operator> <name pos:start="132:33" pos:end="132:49"><name pos:start="132:33" pos:end="132:33">s</name><operator pos:start="132:34" pos:end="132:35">-&gt;</operator><name pos:start="132:36" pos:end="132:49">block_len_bits</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="136:5" pos:end="136:52">/* if no channel coded, no need to go further */</comment>

    <comment type="block" pos:start="138:5" pos:end="138:45">/* XXX: fix potential framing problems */</comment>

    <if_stmt pos:start="140:5" pos:end="142:18"><if pos:start="140:5" pos:end="142:18">if <condition pos:start="140:8" pos:end="140:11">(<expr pos:start="140:9" pos:end="140:10"><operator pos:start="140:9" pos:end="140:9">!</operator><name pos:start="140:10" pos:end="140:10">v</name></expr>)</condition><block type="pseudo" pos:start="142:9" pos:end="142:18"><block_content pos:start="142:9" pos:end="142:18">

        <goto pos:start="142:9" pos:end="142:18">goto <name pos:start="142:14" pos:end="142:17">next</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="146:5" pos:end="148:28">/* read total gain and extract corresponding number of bits for

       coef escape coding */</comment>

    <expr_stmt pos:start="150:5" pos:end="150:19"><expr pos:start="150:5" pos:end="150:18"><name pos:start="150:5" pos:end="150:14">total_gain</name> <operator pos:start="150:16" pos:end="150:16">=</operator> <literal type="number" pos:start="150:18" pos:end="150:18">1</literal></expr>;</expr_stmt>

    <for pos:start="152:5" pos:end="615:17">for<control pos:start="152:8" pos:end="152:11">(<init pos:start="152:9" pos:end="152:9">;</init><condition pos:start="152:10" pos:end="152:10">;</condition><incr/>)</control> <block pos:start="152:13" pos:end="615:17">{<block_content pos:start="158:9" pos:end="615:17">





        <expr_stmt pos:start="158:9" pos:end="158:32"><expr pos:start="158:9" pos:end="158:31"><name pos:start="158:9" pos:end="158:9">a</name> <operator pos:start="158:11" pos:end="158:11">=</operator> <call pos:start="158:13" pos:end="158:31"><name pos:start="158:13" pos:end="158:20">get_bits</name><argument_list pos:start="158:21" pos:end="158:31">(<argument pos:start="158:22" pos:end="158:27"><expr pos:start="158:22" pos:end="158:27"><operator pos:start="158:22" pos:end="158:22">&amp;</operator><name pos:start="158:23" pos:end="158:27"><name pos:start="158:23" pos:end="158:23">s</name><operator pos:start="158:24" pos:end="158:25">-&gt;</operator><name pos:start="158:26" pos:end="158:27">gb</name></name></expr></argument>, <argument pos:start="158:30" pos:end="158:30"><expr pos:start="158:30" pos:end="158:30"><literal type="number" pos:start="158:30" pos:end="158:30">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="160:9" pos:end="160:24"><expr pos:start="160:9" pos:end="160:23"><name pos:start="160:9" pos:end="160:18">total_gain</name> <operator pos:start="160:20" pos:end="160:21">+=</operator> <name pos:start="160:23" pos:end="160:23">a</name></expr>;</expr_stmt>

        <if_stmt pos:start="162:9" pos:end="164:18"><if pos:start="162:9" pos:end="164:18">if <condition pos:start="162:12" pos:end="162:21">(<expr pos:start="162:13" pos:end="162:20"><name pos:start="162:13" pos:end="162:13">a</name> <operator pos:start="162:15" pos:end="162:16">!=</operator> <literal type="number" pos:start="162:18" pos:end="162:20">127</literal></expr>)</condition><block type="pseudo" pos:start="164:13" pos:end="164:18"><block_content pos:start="164:13" pos:end="164:18">

            <break pos:start="164:13" pos:end="164:18">break;</break></block_content></block></if></if_stmt>




    <expr_stmt pos:start="169:5" pos:end="169:56"><expr pos:start="169:5" pos:end="169:55"><name pos:start="169:5" pos:end="169:16">coef_nb_bits</name><operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="169:55"><name pos:start="169:19" pos:end="169:43">ff_wma_total_gain_to_bits</name><argument_list pos:start="169:44" pos:end="169:55">(<argument pos:start="169:45" pos:end="169:54"><expr pos:start="169:45" pos:end="169:54"><name pos:start="169:45" pos:end="169:54">total_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:40">/* compute number of coefficients */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:45"><expr pos:start="175:5" pos:end="175:44"><name pos:start="175:5" pos:end="175:5">n</name> <operator pos:start="175:7" pos:end="175:7">=</operator> <name pos:start="175:9" pos:end="175:27"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:20">coefs_end</name><index pos:start="175:21" pos:end="175:27">[<expr pos:start="175:22" pos:end="175:26"><name pos:start="175:22" pos:end="175:26">bsize</name></expr>]</index></name> <operator pos:start="175:29" pos:end="175:29">-</operator> <name pos:start="175:31" pos:end="175:44"><name pos:start="175:31" pos:end="175:31">s</name><operator pos:start="175:32" pos:end="175:33">-&gt;</operator><name pos:start="175:34" pos:end="175:44">coefs_start</name></name></expr>;</expr_stmt>

    <for pos:start="177:5" pos:end="179:25">for<control pos:start="177:8" pos:end="177:46">(<init pos:start="177:9" pos:end="177:15"><expr pos:start="177:9" pos:end="177:14"><name pos:start="177:9" pos:end="177:10">ch</name> <operator pos:start="177:12" pos:end="177:12">=</operator> <literal type="number" pos:start="177:14" pos:end="177:14">0</literal></expr>;</init> <condition pos:start="177:17" pos:end="177:40"><expr pos:start="177:17" pos:end="177:39"><name pos:start="177:17" pos:end="177:18">ch</name> <operator pos:start="177:20" pos:end="177:20">&lt;</operator> <name pos:start="177:22" pos:end="177:39"><name pos:start="177:22" pos:end="177:22">s</name><operator pos:start="177:23" pos:end="177:24">-&gt;</operator><name pos:start="177:25" pos:end="177:29">avctx</name><operator pos:start="177:30" pos:end="177:31">-&gt;</operator><name pos:start="177:32" pos:end="177:39">channels</name></name></expr>;</condition> <incr pos:start="177:42" pos:end="177:45"><expr pos:start="177:42" pos:end="177:45"><name pos:start="177:42" pos:end="177:43">ch</name><operator pos:start="177:44" pos:end="177:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="179:9" pos:end="179:25"><block_content pos:start="179:9" pos:end="179:25">

        <expr_stmt pos:start="179:9" pos:end="179:25"><expr pos:start="179:9" pos:end="179:24"><name pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:16">nb_coefs</name><index pos:start="179:17" pos:end="179:20">[<expr pos:start="179:18" pos:end="179:19"><name pos:start="179:18" pos:end="179:19">ch</name></expr>]</index></name> <operator pos:start="179:22" pos:end="179:22">=</operator> <name pos:start="179:24" pos:end="179:24">n</name></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="183:5" pos:end="183:24">/* complex coding */</comment>

    <if_stmt pos:start="185:5" pos:end="615:17"><if pos:start="185:5" pos:end="615:17">if <condition pos:start="185:8" pos:end="185:28">(<expr pos:start="185:9" pos:end="185:27"><name pos:start="185:9" pos:end="185:27"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:27">use_noise_coding</name></name></expr>)</condition> <block pos:start="185:30" pos:end="615:17">{<block_content pos:start="189:9" pos:end="615:17">



        <for pos:start="189:9" pos:end="615:17">for<control pos:start="189:12" pos:end="189:50">(<init pos:start="189:13" pos:end="189:19"><expr pos:start="189:13" pos:end="189:18"><name pos:start="189:13" pos:end="189:14">ch</name> <operator pos:start="189:16" pos:end="189:16">=</operator> <literal type="number" pos:start="189:18" pos:end="189:18">0</literal></expr>;</init> <condition pos:start="189:21" pos:end="189:44"><expr pos:start="189:21" pos:end="189:43"><name pos:start="189:21" pos:end="189:22">ch</name> <operator pos:start="189:24" pos:end="189:24">&lt;</operator> <name pos:start="189:26" pos:end="189:43"><name pos:start="189:26" pos:end="189:26">s</name><operator pos:start="189:27" pos:end="189:28">-&gt;</operator><name pos:start="189:29" pos:end="189:33">avctx</name><operator pos:start="189:34" pos:end="189:35">-&gt;</operator><name pos:start="189:36" pos:end="189:43">channels</name></name></expr>;</condition> <incr pos:start="189:46" pos:end="189:49"><expr pos:start="189:46" pos:end="189:49"><name pos:start="189:46" pos:end="189:47">ch</name><operator pos:start="189:48" pos:end="189:49">++</operator></expr></incr>)</control> <block pos:start="189:52" pos:end="615:17">{<block_content pos:start="191:13" pos:end="615:17">

            <if_stmt pos:start="191:13" pos:end="615:17"><if pos:start="191:13" pos:end="615:17">if <condition pos:start="191:16" pos:end="191:37">(<expr pos:start="191:17" pos:end="191:36"><name pos:start="191:17" pos:end="191:36"><name pos:start="191:17" pos:end="191:17">s</name><operator pos:start="191:18" pos:end="191:19">-&gt;</operator><name pos:start="191:20" pos:end="191:32">channel_coded</name><index pos:start="191:33" pos:end="191:36">[<expr pos:start="191:34" pos:end="191:35"><name pos:start="191:34" pos:end="191:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="191:39" pos:end="615:17">{<block_content pos:start="193:17" pos:end="615:17">

                <decl_stmt pos:start="193:17" pos:end="193:28"><decl pos:start="193:17" pos:end="193:21"><type pos:start="193:17" pos:end="193:19"><name pos:start="193:17" pos:end="193:19">int</name></type> <name pos:start="193:21" pos:end="193:21">i</name></decl>, <decl pos:start="193:24" pos:end="193:24"><type ref="prev" pos:start="193:17" pos:end="193:19"/><name pos:start="193:24" pos:end="193:24">n</name></decl>, <decl pos:start="193:27" pos:end="193:27"><type ref="prev" pos:start="193:17" pos:end="193:19"/><name pos:start="193:27" pos:end="193:27">a</name></decl>;</decl_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:50"><expr pos:start="195:17" pos:end="195:49"><name pos:start="195:17" pos:end="195:17">n</name> <operator pos:start="195:19" pos:end="195:19">=</operator> <name pos:start="195:21" pos:end="195:49"><name pos:start="195:21" pos:end="195:21">s</name><operator pos:start="195:22" pos:end="195:23">-&gt;</operator><name pos:start="195:24" pos:end="195:42">exponent_high_sizes</name><index pos:start="195:43" pos:end="195:49">[<expr pos:start="195:44" pos:end="195:48"><name pos:start="195:44" pos:end="195:48">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="197:17" pos:end="615:17">for<control pos:start="197:20" pos:end="197:32">(<init pos:start="197:21" pos:end="197:24"><expr pos:start="197:21" pos:end="197:23"><name pos:start="197:21" pos:end="197:21">i</name><operator pos:start="197:22" pos:end="197:22">=</operator><literal type="number" pos:start="197:23" pos:end="197:23">0</literal></expr>;</init><condition pos:start="197:25" pos:end="197:28"><expr pos:start="197:25" pos:end="197:27"><name pos:start="197:25" pos:end="197:25">i</name><operator pos:start="197:26" pos:end="197:26">&lt;</operator><name pos:start="197:27" pos:end="197:27">n</name></expr>;</condition><incr pos:start="197:29" pos:end="197:31"><expr pos:start="197:29" pos:end="197:31"><name pos:start="197:29" pos:end="197:29">i</name><operator pos:start="197:30" pos:end="197:31">++</operator></expr></incr>)</control> <block pos:start="197:34" pos:end="615:17">{<block_content pos:start="199:21" pos:end="615:17">

                    <expr_stmt pos:start="199:21" pos:end="199:42"><expr pos:start="199:21" pos:end="199:41"><name pos:start="199:21" pos:end="199:21">a</name> <operator pos:start="199:23" pos:end="199:23">=</operator> <call pos:start="199:25" pos:end="199:41"><name pos:start="199:25" pos:end="199:33">get_bits1</name><argument_list pos:start="199:34" pos:end="199:41">(<argument pos:start="199:35" pos:end="199:40"><expr pos:start="199:35" pos:end="199:40"><operator pos:start="199:35" pos:end="199:35">&amp;</operator><name pos:start="199:36" pos:end="199:40"><name pos:start="199:36" pos:end="199:36">s</name><operator pos:start="199:37" pos:end="199:38">-&gt;</operator><name pos:start="199:39" pos:end="199:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="201:21" pos:end="201:50"><expr pos:start="201:21" pos:end="201:49"><name pos:start="201:21" pos:end="201:45"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:38">high_band_coded</name><index pos:start="201:39" pos:end="201:42">[<expr pos:start="201:40" pos:end="201:41"><name pos:start="201:40" pos:end="201:41">ch</name></expr>]</index><index pos:start="201:43" pos:end="201:45">[<expr pos:start="201:44" pos:end="201:44"><name pos:start="201:44" pos:end="201:44">i</name></expr>]</index></name> <operator pos:start="201:47" pos:end="201:47">=</operator> <name pos:start="201:49" pos:end="201:49">a</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="203:21" pos:end="203:79">/* if noise coding, the coefficients are not transmitted */</comment>

                    <if_stmt pos:start="205:21" pos:end="207:73"><if pos:start="205:21" pos:end="207:73">if <condition pos:start="205:24" pos:end="205:26">(<expr pos:start="205:25" pos:end="205:25"><name pos:start="205:25" pos:end="205:25">a</name></expr>)</condition><block type="pseudo" pos:start="207:25" pos:end="207:73"><block_content pos:start="207:25" pos:end="207:73">

                        <expr_stmt pos:start="207:25" pos:end="207:73"><expr pos:start="207:25" pos:end="207:72"><name pos:start="207:25" pos:end="207:36"><name pos:start="207:25" pos:end="207:32">nb_coefs</name><index pos:start="207:33" pos:end="207:36">[<expr pos:start="207:34" pos:end="207:35"><name pos:start="207:34" pos:end="207:35">ch</name></expr>]</index></name> <operator pos:start="207:38" pos:end="207:39">-=</operator> <name pos:start="207:41" pos:end="207:72"><name pos:start="207:41" pos:end="207:41">s</name><operator pos:start="207:42" pos:end="207:43">-&gt;</operator><name pos:start="207:44" pos:end="207:62">exponent_high_bands</name><index pos:start="207:63" pos:end="207:69">[<expr pos:start="207:64" pos:end="207:68"><name pos:start="207:64" pos:end="207:68">bsize</name></expr>]</index><index pos:start="207:70" pos:end="207:72">[<expr pos:start="207:71" pos:end="207:71"><name pos:start="207:71" pos:end="207:71">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>




        <for pos:start="212:9" pos:end="615:17">for<control pos:start="212:12" pos:end="212:50">(<init pos:start="212:13" pos:end="212:19"><expr pos:start="212:13" pos:end="212:18"><name pos:start="212:13" pos:end="212:14">ch</name> <operator pos:start="212:16" pos:end="212:16">=</operator> <literal type="number" pos:start="212:18" pos:end="212:18">0</literal></expr>;</init> <condition pos:start="212:21" pos:end="212:44"><expr pos:start="212:21" pos:end="212:43"><name pos:start="212:21" pos:end="212:22">ch</name> <operator pos:start="212:24" pos:end="212:24">&lt;</operator> <name pos:start="212:26" pos:end="212:43"><name pos:start="212:26" pos:end="212:26">s</name><operator pos:start="212:27" pos:end="212:28">-&gt;</operator><name pos:start="212:29" pos:end="212:33">avctx</name><operator pos:start="212:34" pos:end="212:35">-&gt;</operator><name pos:start="212:36" pos:end="212:43">channels</name></name></expr>;</condition> <incr pos:start="212:46" pos:end="212:49"><expr pos:start="212:46" pos:end="212:49"><name pos:start="212:46" pos:end="212:47">ch</name><operator pos:start="212:48" pos:end="212:49">++</operator></expr></incr>)</control> <block pos:start="212:52" pos:end="615:17">{<block_content pos:start="214:13" pos:end="615:17">

            <if_stmt pos:start="214:13" pos:end="615:17"><if pos:start="214:13" pos:end="615:17">if <condition pos:start="214:16" pos:end="214:37">(<expr pos:start="214:17" pos:end="214:36"><name pos:start="214:17" pos:end="214:36"><name pos:start="214:17" pos:end="214:17">s</name><operator pos:start="214:18" pos:end="214:19">-&gt;</operator><name pos:start="214:20" pos:end="214:32">channel_coded</name><index pos:start="214:33" pos:end="214:36">[<expr pos:start="214:34" pos:end="214:35"><name pos:start="214:34" pos:end="214:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="214:39" pos:end="615:17">{<block_content pos:start="216:17" pos:end="615:17">

                <decl_stmt pos:start="216:17" pos:end="216:36"><decl pos:start="216:17" pos:end="216:21"><type pos:start="216:17" pos:end="216:19"><name pos:start="216:17" pos:end="216:19">int</name></type> <name pos:start="216:21" pos:end="216:21">i</name></decl>, <decl pos:start="216:24" pos:end="216:24"><type ref="prev" pos:start="216:17" pos:end="216:19"/><name pos:start="216:24" pos:end="216:24">n</name></decl>, <decl pos:start="216:27" pos:end="216:29"><type ref="prev" pos:start="216:17" pos:end="216:19"/><name pos:start="216:27" pos:end="216:29">val</name></decl>, <decl pos:start="216:32" pos:end="216:35"><type ref="prev" pos:start="216:17" pos:end="216:19"/><name pos:start="216:32" pos:end="216:35">code</name></decl>;</decl_stmt>



                <expr_stmt pos:start="220:17" pos:end="220:50"><expr pos:start="220:17" pos:end="220:49"><name pos:start="220:17" pos:end="220:17">n</name> <operator pos:start="220:19" pos:end="220:19">=</operator> <name pos:start="220:21" pos:end="220:49"><name pos:start="220:21" pos:end="220:21">s</name><operator pos:start="220:22" pos:end="220:23">-&gt;</operator><name pos:start="220:24" pos:end="220:42">exponent_high_sizes</name><index pos:start="220:43" pos:end="220:49">[<expr pos:start="220:44" pos:end="220:48"><name pos:start="220:44" pos:end="220:48">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="222:17" pos:end="222:38"><expr pos:start="222:17" pos:end="222:37"><name pos:start="222:17" pos:end="222:19">val</name> <operator pos:start="222:21" pos:end="222:21">=</operator> <operator pos:start="222:23" pos:end="222:23">(</operator><name pos:start="222:24" pos:end="222:26">int</name><operator pos:start="222:27" pos:end="222:27">)</operator><literal type="number" pos:start="222:28" pos:end="222:37">0x80000000</literal></expr>;</expr_stmt>

                <for pos:start="224:17" pos:end="615:17">for<control pos:start="224:20" pos:end="224:32">(<init pos:start="224:21" pos:end="224:24"><expr pos:start="224:21" pos:end="224:23"><name pos:start="224:21" pos:end="224:21">i</name><operator pos:start="224:22" pos:end="224:22">=</operator><literal type="number" pos:start="224:23" pos:end="224:23">0</literal></expr>;</init><condition pos:start="224:25" pos:end="224:28"><expr pos:start="224:25" pos:end="224:27"><name pos:start="224:25" pos:end="224:25">i</name><operator pos:start="224:26" pos:end="224:26">&lt;</operator><name pos:start="224:27" pos:end="224:27">n</name></expr>;</condition><incr pos:start="224:29" pos:end="224:31"><expr pos:start="224:29" pos:end="224:31"><name pos:start="224:29" pos:end="224:29">i</name><operator pos:start="224:30" pos:end="224:31">++</operator></expr></incr>)</control> <block pos:start="224:34" pos:end="615:17">{<block_content pos:start="226:21" pos:end="615:17">

                    <if_stmt pos:start="226:21" pos:end="615:17"><if pos:start="226:21" pos:end="615:17">if <condition pos:start="226:24" pos:end="226:50">(<expr pos:start="226:25" pos:end="226:49"><name pos:start="226:25" pos:end="226:49"><name pos:start="226:25" pos:end="226:25">s</name><operator pos:start="226:26" pos:end="226:27">-&gt;</operator><name pos:start="226:28" pos:end="226:42">high_band_coded</name><index pos:start="226:43" pos:end="226:46">[<expr pos:start="226:44" pos:end="226:45"><name pos:start="226:44" pos:end="226:45">ch</name></expr>]</index><index pos:start="226:47" pos:end="226:49">[<expr pos:start="226:48" pos:end="226:48"><name pos:start="226:48" pos:end="226:48">i</name></expr>]</index></name></expr>)</condition> <block pos:start="226:52" pos:end="615:17">{<block_content pos:start="228:25" pos:end="615:17">

                        <if_stmt pos:start="228:25" pos:end="615:17"><if pos:start="228:25" pos:end="232:25">if <condition pos:start="228:28" pos:end="228:51">(<expr pos:start="228:29" pos:end="228:50"><name pos:start="228:29" pos:end="228:31">val</name> <operator pos:start="228:33" pos:end="228:34">==</operator> <operator pos:start="228:36" pos:end="228:36">(</operator><name pos:start="228:37" pos:end="228:39">int</name><operator pos:start="228:40" pos:end="228:40">)</operator><literal type="number" pos:start="228:41" pos:end="228:50">0x80000000</literal></expr>)</condition> <block pos:start="228:53" pos:end="232:25">{<block_content pos:start="230:29" pos:end="230:59">

                            <expr_stmt pos:start="230:29" pos:end="230:59"><expr pos:start="230:29" pos:end="230:58"><name pos:start="230:29" pos:end="230:31">val</name> <operator pos:start="230:33" pos:end="230:33">=</operator> <call pos:start="230:35" pos:end="230:53"><name pos:start="230:35" pos:end="230:42">get_bits</name><argument_list pos:start="230:43" pos:end="230:53">(<argument pos:start="230:44" pos:end="230:49"><expr pos:start="230:44" pos:end="230:49"><operator pos:start="230:44" pos:end="230:44">&amp;</operator><name pos:start="230:45" pos:end="230:49"><name pos:start="230:45" pos:end="230:45">s</name><operator pos:start="230:46" pos:end="230:47">-&gt;</operator><name pos:start="230:48" pos:end="230:49">gb</name></name></expr></argument>, <argument pos:start="230:52" pos:end="230:52"><expr pos:start="230:52" pos:end="230:52"><literal type="number" pos:start="230:52" pos:end="230:52">7</literal></expr></argument>)</argument_list></call> <operator pos:start="230:55" pos:end="230:55">-</operator> <literal type="number" pos:start="230:57" pos:end="230:58">19</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="232:27" pos:end="615:17">else <block pos:start="232:32" pos:end="615:17">{<block_content pos:start="234:29" pos:end="615:17">

                            <expr_stmt pos:start="234:29" pos:end="234:96"><expr pos:start="234:29" pos:end="234:95"><name pos:start="234:29" pos:end="234:32">code</name> <operator pos:start="234:34" pos:end="234:34">=</operator> <call pos:start="234:36" pos:end="234:95"><name pos:start="234:36" pos:end="234:43">get_vlc2</name><argument_list pos:start="234:44" pos:end="234:95">(<argument pos:start="234:45" pos:end="234:50"><expr pos:start="234:45" pos:end="234:50"><operator pos:start="234:45" pos:end="234:45">&amp;</operator><name pos:start="234:46" pos:end="234:50"><name pos:start="234:46" pos:end="234:46">s</name><operator pos:start="234:47" pos:end="234:48">-&gt;</operator><name pos:start="234:49" pos:end="234:50">gb</name></name></expr></argument>, <argument pos:start="234:53" pos:end="234:70"><expr pos:start="234:53" pos:end="234:70"><name pos:start="234:53" pos:end="234:70"><name pos:start="234:53" pos:end="234:53">s</name><operator pos:start="234:54" pos:end="234:55">-&gt;</operator><name pos:start="234:56" pos:end="234:64">hgain_vlc</name><operator pos:start="234:65" pos:end="234:65">.</operator><name pos:start="234:66" pos:end="234:70">table</name></name></expr></argument>, <argument pos:start="234:73" pos:end="234:84"><expr pos:start="234:73" pos:end="234:84"><name pos:start="234:73" pos:end="234:84">HGAINVLCBITS</name></expr></argument>, <argument pos:start="234:87" pos:end="234:94"><expr pos:start="234:87" pos:end="234:94"><name pos:start="234:87" pos:end="234:94">HGAINMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="236:29" pos:end="615:17"><if pos:start="236:29" pos:end="615:17">if <condition pos:start="236:32" pos:end="236:41">(<expr pos:start="236:33" pos:end="236:40"><name pos:start="236:33" pos:end="236:36">code</name> <operator pos:start="236:38" pos:end="236:38">&lt;</operator> <literal type="number" pos:start="236:40" pos:end="236:40">0</literal></expr>)</condition><block pos:start="236:42" pos:end="615:17">{<block_content pos:start="238:33" pos:end="615:17">

                                <expr_stmt pos:start="238:33" pos:end="238:86"><expr pos:start="238:33" pos:end="238:85"><call pos:start="238:33" pos:end="238:85"><name pos:start="238:33" pos:end="238:38">av_log</name><argument_list pos:start="238:39" pos:end="238:85">(<argument pos:start="238:40" pos:end="238:47"><expr pos:start="238:40" pos:end="238:47"><name pos:start="238:40" pos:end="238:47"><name pos:start="238:40" pos:end="238:40">s</name><operator pos:start="238:41" pos:end="238:42">-&gt;</operator><name pos:start="238:43" pos:end="238:47">avctx</name></name></expr></argument>, <argument pos:start="238:50" pos:end="238:61"><expr pos:start="238:50" pos:end="238:61"><name pos:start="238:50" pos:end="238:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="238:64" pos:end="238:84"><expr pos:start="238:64" pos:end="238:84"><literal type="string" pos:start="238:64" pos:end="238:84">"hgain vlc invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="240:33" pos:end="240:42">return <expr pos:start="240:40" pos:end="240:41"><operator pos:start="240:40" pos:end="240:40">-</operator><literal type="number" pos:start="240:41" pos:end="240:41">1</literal></expr>;</return>


                            <expr_stmt pos:start="243:29" pos:end="243:45"><expr pos:start="243:29" pos:end="243:44"><name pos:start="243:29" pos:end="243:31">val</name> <operator pos:start="243:33" pos:end="243:34">+=</operator> <name pos:start="243:36" pos:end="243:39">code</name> <operator pos:start="243:41" pos:end="243:41">-</operator> <literal type="number" pos:start="243:43" pos:end="243:44">18</literal></expr>;</expr_stmt>


                        <expr_stmt pos:start="246:25" pos:end="246:57"><expr pos:start="246:25" pos:end="246:56"><name pos:start="246:25" pos:end="246:50"><name pos:start="246:25" pos:end="246:25">s</name><operator pos:start="246:26" pos:end="246:27">-&gt;</operator><name pos:start="246:28" pos:end="246:43">high_band_values</name><index pos:start="246:44" pos:end="246:47">[<expr pos:start="246:45" pos:end="246:46"><name pos:start="246:45" pos:end="246:46">ch</name></expr>]</index><index pos:start="246:48" pos:end="246:50">[<expr pos:start="246:49" pos:end="246:49"><name pos:start="246:49" pos:end="246:49">i</name></expr>]</index></name> <operator pos:start="246:52" pos:end="246:52">=</operator> <name pos:start="246:54" pos:end="246:56">val</name></expr>;</expr_stmt>








    <comment type="block" pos:start="255:5" pos:end="255:50">/* exponents can be reused in short blocks. */</comment>

    <if_stmt pos:start="257:5" pos:end="615:17"><if pos:start="257:5" pos:end="615:17">if <condition pos:start="257:8" pos:end="259:26">(<expr pos:start="257:9" pos:end="259:25"><operator pos:start="257:9" pos:end="257:9">(</operator><name pos:start="257:10" pos:end="257:26"><name pos:start="257:10" pos:end="257:10">s</name><operator pos:start="257:11" pos:end="257:12">-&gt;</operator><name pos:start="257:13" pos:end="257:26">block_len_bits</name></name> <operator pos:start="257:28" pos:end="257:29">==</operator> <name pos:start="257:31" pos:end="257:47"><name pos:start="257:31" pos:end="257:31">s</name><operator pos:start="257:32" pos:end="257:33">-&gt;</operator><name pos:start="257:34" pos:end="257:47">frame_len_bits</name></name><operator pos:start="257:48" pos:end="257:48">)</operator> <operator pos:start="257:50" pos:end="257:51">||</operator>

        <call pos:start="259:9" pos:end="259:25"><name pos:start="259:9" pos:end="259:17">get_bits1</name><argument_list pos:start="259:18" pos:end="259:25">(<argument pos:start="259:19" pos:end="259:24"><expr pos:start="259:19" pos:end="259:24"><operator pos:start="259:19" pos:end="259:19">&amp;</operator><name pos:start="259:20" pos:end="259:24"><name pos:start="259:20" pos:end="259:20">s</name><operator pos:start="259:21" pos:end="259:22">-&gt;</operator><name pos:start="259:23" pos:end="259:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="259:28" pos:end="615:17">{<block_content pos:start="261:9" pos:end="615:17">

        <for pos:start="261:9" pos:end="615:17">for<control pos:start="261:12" pos:end="261:50">(<init pos:start="261:13" pos:end="261:19"><expr pos:start="261:13" pos:end="261:18"><name pos:start="261:13" pos:end="261:14">ch</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <literal type="number" pos:start="261:18" pos:end="261:18">0</literal></expr>;</init> <condition pos:start="261:21" pos:end="261:44"><expr pos:start="261:21" pos:end="261:43"><name pos:start="261:21" pos:end="261:22">ch</name> <operator pos:start="261:24" pos:end="261:24">&lt;</operator> <name pos:start="261:26" pos:end="261:43"><name pos:start="261:26" pos:end="261:26">s</name><operator pos:start="261:27" pos:end="261:28">-&gt;</operator><name pos:start="261:29" pos:end="261:33">avctx</name><operator pos:start="261:34" pos:end="261:35">-&gt;</operator><name pos:start="261:36" pos:end="261:43">channels</name></name></expr>;</condition> <incr pos:start="261:46" pos:end="261:49"><expr pos:start="261:46" pos:end="261:49"><name pos:start="261:46" pos:end="261:47">ch</name><operator pos:start="261:48" pos:end="261:49">++</operator></expr></incr>)</control> <block pos:start="261:52" pos:end="615:17">{<block_content pos:start="263:13" pos:end="615:17">

            <if_stmt pos:start="263:13" pos:end="615:17"><if pos:start="263:13" pos:end="615:17">if <condition pos:start="263:16" pos:end="263:37">(<expr pos:start="263:17" pos:end="263:36"><name pos:start="263:17" pos:end="263:36"><name pos:start="263:17" pos:end="263:17">s</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:32">channel_coded</name><index pos:start="263:33" pos:end="263:36">[<expr pos:start="263:34" pos:end="263:35"><name pos:start="263:34" pos:end="263:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="263:39" pos:end="615:17">{<block_content pos:start="265:17" pos:end="615:17">

                <if_stmt pos:start="265:17" pos:end="615:17"><if pos:start="265:17" pos:end="271:17">if <condition pos:start="265:20" pos:end="265:35">(<expr pos:start="265:21" pos:end="265:34"><name pos:start="265:21" pos:end="265:34"><name pos:start="265:21" pos:end="265:21">s</name><operator pos:start="265:22" pos:end="265:23">-&gt;</operator><name pos:start="265:24" pos:end="265:34">use_exp_vlc</name></name></expr>)</condition> <block pos:start="265:37" pos:end="271:17">{<block_content pos:start="267:21" pos:end="269:34">

                    <if_stmt pos:start="267:21" pos:end="269:34"><if pos:start="267:21" pos:end="269:34">if <condition pos:start="267:24" pos:end="267:50">(<expr pos:start="267:25" pos:end="267:49"><call pos:start="267:25" pos:end="267:45"><name pos:start="267:25" pos:end="267:38">decode_exp_vlc</name><argument_list pos:start="267:39" pos:end="267:45">(<argument pos:start="267:40" pos:end="267:40"><expr pos:start="267:40" pos:end="267:40"><name pos:start="267:40" pos:end="267:40">s</name></expr></argument>, <argument pos:start="267:43" pos:end="267:44"><expr pos:start="267:43" pos:end="267:44"><name pos:start="267:43" pos:end="267:44">ch</name></expr></argument>)</argument_list></call> <operator pos:start="267:47" pos:end="267:47">&lt;</operator> <literal type="number" pos:start="267:49" pos:end="267:49">0</literal></expr>)</condition><block type="pseudo" pos:start="269:25" pos:end="269:34"><block_content pos:start="269:25" pos:end="269:34">

                        <return pos:start="269:25" pos:end="269:34">return <expr pos:start="269:32" pos:end="269:33"><operator pos:start="269:32" pos:end="269:32">-</operator><literal type="number" pos:start="269:33" pos:end="269:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="271:19" pos:end="615:17">else <block pos:start="271:24" pos:end="615:17">{<block_content pos:start="273:21" pos:end="615:17">

                    <expr_stmt pos:start="273:21" pos:end="273:42"><expr pos:start="273:21" pos:end="273:41"><call pos:start="273:21" pos:end="273:41"><name pos:start="273:21" pos:end="273:34">decode_exp_lsp</name><argument_list pos:start="273:35" pos:end="273:41">(<argument pos:start="273:36" pos:end="273:36"><expr pos:start="273:36" pos:end="273:36"><name pos:start="273:36" pos:end="273:36">s</name></expr></argument>, <argument pos:start="273:39" pos:end="273:40"><expr pos:start="273:39" pos:end="273:40"><name pos:start="273:39" pos:end="273:40">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <expr_stmt pos:start="276:17" pos:end="276:47"><expr pos:start="276:17" pos:end="276:46"><name pos:start="276:17" pos:end="276:38"><name pos:start="276:17" pos:end="276:17">s</name><operator pos:start="276:18" pos:end="276:19">-&gt;</operator><name pos:start="276:20" pos:end="276:34">exponents_bsize</name><index pos:start="276:35" pos:end="276:38">[<expr pos:start="276:36" pos:end="276:37"><name pos:start="276:36" pos:end="276:37">ch</name></expr>]</index></name> <operator pos:start="276:40" pos:end="276:40">=</operator> <name pos:start="276:42" pos:end="276:46">bsize</name></expr>;</expr_stmt>






    <comment type="block" pos:start="283:5" pos:end="283:57">/* parse spectral coefficients : just RLE encoding */</comment>

    <for pos:start="285:5" pos:end="615:17">for <control pos:start="285:9" pos:end="285:47">(<init pos:start="285:10" pos:end="285:16"><expr pos:start="285:10" pos:end="285:15"><name pos:start="285:10" pos:end="285:11">ch</name> <operator pos:start="285:13" pos:end="285:13">=</operator> <literal type="number" pos:start="285:15" pos:end="285:15">0</literal></expr>;</init> <condition pos:start="285:18" pos:end="285:41"><expr pos:start="285:18" pos:end="285:40"><name pos:start="285:18" pos:end="285:19">ch</name> <operator pos:start="285:21" pos:end="285:21">&lt;</operator> <name pos:start="285:23" pos:end="285:40"><name pos:start="285:23" pos:end="285:23">s</name><operator pos:start="285:24" pos:end="285:25">-&gt;</operator><name pos:start="285:26" pos:end="285:30">avctx</name><operator pos:start="285:31" pos:end="285:32">-&gt;</operator><name pos:start="285:33" pos:end="285:40">channels</name></name></expr>;</condition> <incr pos:start="285:43" pos:end="285:46"><expr pos:start="285:43" pos:end="285:46"><name pos:start="285:43" pos:end="285:44">ch</name><operator pos:start="285:45" pos:end="285:46">++</operator></expr></incr>)</control> <block pos:start="285:49" pos:end="615:17">{<block_content pos:start="287:9" pos:end="615:17">

        <if_stmt pos:start="287:9" pos:end="615:17"><if pos:start="287:9" pos:end="615:17">if <condition pos:start="287:12" pos:end="287:33">(<expr pos:start="287:13" pos:end="287:32"><name pos:start="287:13" pos:end="287:32"><name pos:start="287:13" pos:end="287:13">s</name><operator pos:start="287:14" pos:end="287:15">-&gt;</operator><name pos:start="287:16" pos:end="287:28">channel_coded</name><index pos:start="287:29" pos:end="287:32">[<expr pos:start="287:30" pos:end="287:31"><name pos:start="287:30" pos:end="287:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="287:35" pos:end="615:17">{<block_content pos:start="289:13" pos:end="615:17">

            <decl_stmt pos:start="289:13" pos:end="289:23"><decl pos:start="289:13" pos:end="289:22"><type pos:start="289:13" pos:end="289:15"><name pos:start="289:13" pos:end="289:15">int</name></type> <name pos:start="289:17" pos:end="289:22">tindex</name></decl>;</decl_stmt>

            <decl_stmt pos:start="291:13" pos:end="291:45"><decl pos:start="291:13" pos:end="291:44"><type pos:start="291:13" pos:end="291:20"><name pos:start="291:13" pos:end="291:19">WMACoef</name><modifier pos:start="291:20" pos:end="291:20">*</modifier></type> <name pos:start="291:22" pos:end="291:24">ptr</name> <init pos:start="291:26" pos:end="291:44">= <expr pos:start="291:28" pos:end="291:44"><operator pos:start="291:28" pos:end="291:28">&amp;</operator><name pos:start="291:29" pos:end="291:44"><name pos:start="291:29" pos:end="291:29">s</name><operator pos:start="291:30" pos:end="291:31">-&gt;</operator><name pos:start="291:32" pos:end="291:37">coefs1</name><index pos:start="291:38" pos:end="291:41">[<expr pos:start="291:39" pos:end="291:40"><name pos:start="291:39" pos:end="291:40">ch</name></expr>]</index><index pos:start="291:42" pos:end="291:44">[<expr pos:start="291:43" pos:end="291:43"><literal type="number" pos:start="291:43" pos:end="291:43">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="295:13" pos:end="297:56">/* special VLC tables are used for ms stereo because

               there is potentially less energy there */</comment>

            <expr_stmt pos:start="299:13" pos:end="299:47"><expr pos:start="299:13" pos:end="299:46"><name pos:start="299:13" pos:end="299:18">tindex</name> <operator pos:start="299:20" pos:end="299:20">=</operator> <operator pos:start="299:22" pos:end="299:22">(</operator><name pos:start="299:23" pos:end="299:24">ch</name> <operator pos:start="299:26" pos:end="299:27">==</operator> <literal type="number" pos:start="299:29" pos:end="299:29">1</literal> <operator pos:start="299:31" pos:end="299:32">&amp;&amp;</operator> <name pos:start="299:34" pos:end="299:45"><name pos:start="299:34" pos:end="299:34">s</name><operator pos:start="299:35" pos:end="299:36">-&gt;</operator><name pos:start="299:37" pos:end="299:45">ms_stereo</name></name><operator pos:start="299:46" pos:end="299:46">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:59"><expr pos:start="301:13" pos:end="301:58"><call pos:start="301:13" pos:end="301:58"><name pos:start="301:13" pos:end="301:18">memset</name><argument_list pos:start="301:19" pos:end="301:58">(<argument pos:start="301:20" pos:end="301:22"><expr pos:start="301:20" pos:end="301:22"><name pos:start="301:20" pos:end="301:22">ptr</name></expr></argument>, <argument pos:start="301:25" pos:end="301:25"><expr pos:start="301:25" pos:end="301:25"><literal type="number" pos:start="301:25" pos:end="301:25">0</literal></expr></argument>, <argument pos:start="301:28" pos:end="301:57"><expr pos:start="301:28" pos:end="301:57"><name pos:start="301:28" pos:end="301:39"><name pos:start="301:28" pos:end="301:28">s</name><operator pos:start="301:29" pos:end="301:30">-&gt;</operator><name pos:start="301:31" pos:end="301:39">block_len</name></name> <operator pos:start="301:41" pos:end="301:41">*</operator> <sizeof pos:start="301:43" pos:end="301:57">sizeof<argument_list pos:start="301:49" pos:end="301:57">(<argument pos:start="301:50" pos:end="301:56"><expr pos:start="301:50" pos:end="301:56"><name pos:start="301:50" pos:end="301:56">WMACoef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="309:65"><expr pos:start="303:13" pos:end="309:64"><call pos:start="303:13" pos:end="309:64"><name pos:start="303:13" pos:end="303:35">ff_wma_run_level_decode</name><argument_list pos:start="303:36" pos:end="309:64">(<argument pos:start="303:37" pos:end="303:44"><expr pos:start="303:37" pos:end="303:44"><name pos:start="303:37" pos:end="303:44"><name pos:start="303:37" pos:end="303:37">s</name><operator pos:start="303:38" pos:end="303:39">-&gt;</operator><name pos:start="303:40" pos:end="303:44">avctx</name></name></expr></argument>, <argument pos:start="303:47" pos:end="303:52"><expr pos:start="303:47" pos:end="303:52"><operator pos:start="303:47" pos:end="303:47">&amp;</operator><name pos:start="303:48" pos:end="303:52"><name pos:start="303:48" pos:end="303:48">s</name><operator pos:start="303:49" pos:end="303:50">-&gt;</operator><name pos:start="303:51" pos:end="303:52">gb</name></name></expr></argument>, <argument pos:start="303:55" pos:end="303:74"><expr pos:start="303:55" pos:end="303:74"><operator pos:start="303:55" pos:end="303:55">&amp;</operator><name pos:start="303:56" pos:end="303:74"><name pos:start="303:56" pos:end="303:56">s</name><operator pos:start="303:57" pos:end="303:58">-&gt;</operator><name pos:start="303:59" pos:end="303:66">coef_vlc</name><index pos:start="303:67" pos:end="303:74">[<expr pos:start="303:68" pos:end="303:73"><name pos:start="303:68" pos:end="303:73">tindex</name></expr>]</index></name></expr></argument>,

                  <argument pos:start="305:19" pos:end="305:40"><expr pos:start="305:19" pos:end="305:40"><name pos:start="305:19" pos:end="305:40"><name pos:start="305:19" pos:end="305:19">s</name><operator pos:start="305:20" pos:end="305:21">-&gt;</operator><name pos:start="305:22" pos:end="305:32">level_table</name><index pos:start="305:33" pos:end="305:40">[<expr pos:start="305:34" pos:end="305:39"><name pos:start="305:34" pos:end="305:39">tindex</name></expr>]</index></name></expr></argument>, <argument pos:start="305:43" pos:end="305:62"><expr pos:start="305:43" pos:end="305:62"><name pos:start="305:43" pos:end="305:62"><name pos:start="305:43" pos:end="305:43">s</name><operator pos:start="305:44" pos:end="305:45">-&gt;</operator><name pos:start="305:46" pos:end="305:54">run_table</name><index pos:start="305:55" pos:end="305:62">[<expr pos:start="305:56" pos:end="305:61"><name pos:start="305:56" pos:end="305:61">tindex</name></expr>]</index></name></expr></argument>,

                  <argument pos:start="307:19" pos:end="307:19"><expr pos:start="307:19" pos:end="307:19"><literal type="number" pos:start="307:19" pos:end="307:19">0</literal></expr></argument>, <argument pos:start="307:22" pos:end="307:24"><expr pos:start="307:22" pos:end="307:24"><name pos:start="307:22" pos:end="307:24">ptr</name></expr></argument>, <argument pos:start="307:27" pos:end="307:27"><expr pos:start="307:27" pos:end="307:27"><literal type="number" pos:start="307:27" pos:end="307:27">0</literal></expr></argument>, <argument pos:start="307:30" pos:end="307:41"><expr pos:start="307:30" pos:end="307:41"><name pos:start="307:30" pos:end="307:41"><name pos:start="307:30" pos:end="307:37">nb_coefs</name><index pos:start="307:38" pos:end="307:41">[<expr pos:start="307:39" pos:end="307:40"><name pos:start="307:39" pos:end="307:40">ch</name></expr>]</index></name></expr></argument>,

                  <argument pos:start="309:19" pos:end="309:30"><expr pos:start="309:19" pos:end="309:30"><name pos:start="309:19" pos:end="309:30"><name pos:start="309:19" pos:end="309:19">s</name><operator pos:start="309:20" pos:end="309:21">-&gt;</operator><name pos:start="309:22" pos:end="309:30">block_len</name></name></expr></argument>, <argument pos:start="309:33" pos:end="309:49"><expr pos:start="309:33" pos:end="309:49"><name pos:start="309:33" pos:end="309:49"><name pos:start="309:33" pos:end="309:33">s</name><operator pos:start="309:34" pos:end="309:35">-&gt;</operator><name pos:start="309:36" pos:end="309:49">frame_len_bits</name></name></expr></argument>, <argument pos:start="309:52" pos:end="309:63"><expr pos:start="309:52" pos:end="309:63"><name pos:start="309:52" pos:end="309:63">coef_nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <if_stmt pos:start="312:9" pos:end="615:17"><if pos:start="312:9" pos:end="615:17">if <condition pos:start="312:12" pos:end="312:55">(<expr pos:start="312:13" pos:end="312:54"><name pos:start="312:13" pos:end="312:22"><name pos:start="312:13" pos:end="312:13">s</name><operator pos:start="312:14" pos:end="312:15">-&gt;</operator><name pos:start="312:16" pos:end="312:22">version</name></name> <operator pos:start="312:24" pos:end="312:25">==</operator> <literal type="number" pos:start="312:27" pos:end="312:27">1</literal> <operator pos:start="312:29" pos:end="312:30">&amp;&amp;</operator> <name pos:start="312:32" pos:end="312:49"><name pos:start="312:32" pos:end="312:32">s</name><operator pos:start="312:33" pos:end="312:34">-&gt;</operator><name pos:start="312:35" pos:end="312:39">avctx</name><operator pos:start="312:40" pos:end="312:41">-&gt;</operator><name pos:start="312:42" pos:end="312:49">channels</name></name> <operator pos:start="312:51" pos:end="312:52">&gt;=</operator> <literal type="number" pos:start="312:54" pos:end="312:54">2</literal></expr>)</condition> <block pos:start="312:57" pos:end="615:17">{<block_content pos:start="314:13" pos:end="615:17">

            <expr_stmt pos:start="314:13" pos:end="314:35"><expr pos:start="314:13" pos:end="314:34"><call pos:start="314:13" pos:end="314:34"><name pos:start="314:13" pos:end="314:26">align_get_bits</name><argument_list pos:start="314:27" pos:end="314:34">(<argument pos:start="314:28" pos:end="314:33"><expr pos:start="314:28" pos:end="314:33"><operator pos:start="314:28" pos:end="314:28">&amp;</operator><name pos:start="314:29" pos:end="314:33"><name pos:start="314:29" pos:end="314:29">s</name><operator pos:start="314:30" pos:end="314:31">-&gt;</operator><name pos:start="314:32" pos:end="314:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" pos:start="320:5" pos:end="320:19">/* normalize */</comment>

    <block pos:start="322:5" pos:end="615:17">{<block_content pos:start="324:9" pos:end="615:17">

        <decl_stmt pos:start="324:9" pos:end="324:34"><decl pos:start="324:9" pos:end="324:33"><type pos:start="324:9" pos:end="324:11"><name pos:start="324:9" pos:end="324:11">int</name></type> <name pos:start="324:13" pos:end="324:14">n4</name> <init pos:start="324:16" pos:end="324:33">= <expr pos:start="324:18" pos:end="324:33"><name pos:start="324:18" pos:end="324:29"><name pos:start="324:18" pos:end="324:18">s</name><operator pos:start="324:19" pos:end="324:20">-&gt;</operator><name pos:start="324:21" pos:end="324:29">block_len</name></name> <operator pos:start="324:31" pos:end="324:31">/</operator> <literal type="number" pos:start="324:33" pos:end="324:33">2</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="326:9" pos:end="326:36"><expr pos:start="326:9" pos:end="326:35"><name pos:start="326:9" pos:end="326:17">mdct_norm</name> <operator pos:start="326:19" pos:end="326:19">=</operator> <literal type="number" pos:start="326:21" pos:end="326:23">1.0</literal> <operator pos:start="326:25" pos:end="326:25">/</operator> <operator pos:start="326:27" pos:end="326:27">(</operator><name pos:start="326:28" pos:end="326:32">float</name><operator pos:start="326:33" pos:end="326:33">)</operator><name pos:start="326:34" pos:end="326:35">n4</name></expr>;</expr_stmt>

        <if_stmt pos:start="328:9" pos:end="615:17"><if pos:start="328:9" pos:end="615:17">if <condition pos:start="328:12" pos:end="328:28">(<expr pos:start="328:13" pos:end="328:27"><name pos:start="328:13" pos:end="328:22"><name pos:start="328:13" pos:end="328:13">s</name><operator pos:start="328:14" pos:end="328:15">-&gt;</operator><name pos:start="328:16" pos:end="328:22">version</name></name> <operator pos:start="328:24" pos:end="328:25">==</operator> <literal type="number" pos:start="328:27" pos:end="328:27">1</literal></expr>)</condition> <block pos:start="328:30" pos:end="615:17">{<block_content pos:start="330:13" pos:end="615:17">

            <expr_stmt pos:start="330:13" pos:end="330:34"><expr pos:start="330:13" pos:end="330:33"><name pos:start="330:13" pos:end="330:21">mdct_norm</name> <operator pos:start="330:23" pos:end="330:24">*=</operator> <call pos:start="330:26" pos:end="330:33"><name pos:start="330:26" pos:end="330:29">sqrt</name><argument_list pos:start="330:30" pos:end="330:33">(<argument pos:start="330:31" pos:end="330:32"><expr pos:start="330:31" pos:end="330:32"><name pos:start="330:31" pos:end="330:32">n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" pos:start="336:5" pos:end="336:47">/* finally compute the MDCT coefficients */</comment>

    <for pos:start="338:5" pos:end="615:17">for <control pos:start="338:9" pos:end="338:47">(<init pos:start="338:10" pos:end="338:16"><expr pos:start="338:10" pos:end="338:15"><name pos:start="338:10" pos:end="338:11">ch</name> <operator pos:start="338:13" pos:end="338:13">=</operator> <literal type="number" pos:start="338:15" pos:end="338:15">0</literal></expr>;</init> <condition pos:start="338:18" pos:end="338:41"><expr pos:start="338:18" pos:end="338:40"><name pos:start="338:18" pos:end="338:19">ch</name> <operator pos:start="338:21" pos:end="338:21">&lt;</operator> <name pos:start="338:23" pos:end="338:40"><name pos:start="338:23" pos:end="338:23">s</name><operator pos:start="338:24" pos:end="338:25">-&gt;</operator><name pos:start="338:26" pos:end="338:30">avctx</name><operator pos:start="338:31" pos:end="338:32">-&gt;</operator><name pos:start="338:33" pos:end="338:40">channels</name></name></expr>;</condition> <incr pos:start="338:43" pos:end="338:46"><expr pos:start="338:43" pos:end="338:46"><name pos:start="338:43" pos:end="338:44">ch</name><operator pos:start="338:45" pos:end="338:46">++</operator></expr></incr>)</control> <block pos:start="338:49" pos:end="615:17">{<block_content pos:start="340:9" pos:end="615:17">

        <if_stmt pos:start="340:9" pos:end="615:17"><if pos:start="340:9" pos:end="615:17">if <condition pos:start="340:12" pos:end="340:33">(<expr pos:start="340:13" pos:end="340:32"><name pos:start="340:13" pos:end="340:32"><name pos:start="340:13" pos:end="340:13">s</name><operator pos:start="340:14" pos:end="340:15">-&gt;</operator><name pos:start="340:16" pos:end="340:28">channel_coded</name><index pos:start="340:29" pos:end="340:32">[<expr pos:start="340:30" pos:end="340:31"><name pos:start="340:30" pos:end="340:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="340:35" pos:end="615:17">{<block_content pos:start="342:13" pos:end="615:17">

            <decl_stmt pos:start="342:13" pos:end="342:28"><decl pos:start="342:13" pos:end="342:27"><type pos:start="342:13" pos:end="342:21"><name pos:start="342:13" pos:end="342:19">WMACoef</name> <modifier pos:start="342:21" pos:end="342:21">*</modifier></type><name pos:start="342:22" pos:end="342:27">coefs1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="344:13" pos:end="344:57"><decl pos:start="344:13" pos:end="344:24"><type pos:start="344:13" pos:end="344:19"><name pos:start="344:13" pos:end="344:17">float</name> <modifier pos:start="344:19" pos:end="344:19">*</modifier></type><name pos:start="344:20" pos:end="344:24">coefs</name></decl>, <decl pos:start="344:27" pos:end="344:36"><type ref="prev" pos:start="344:13" pos:end="344:19"><modifier pos:start="344:27" pos:end="344:27">*</modifier></type><name pos:start="344:28" pos:end="344:36">exponents</name></decl>, <decl pos:start="344:39" pos:end="344:42"><type ref="prev" pos:start="344:13" pos:end="344:19"/><name pos:start="344:39" pos:end="344:42">mult</name></decl>, <decl pos:start="344:45" pos:end="344:49"><type ref="prev" pos:start="344:13" pos:end="344:19"/><name pos:start="344:45" pos:end="344:49">mult1</name></decl>, <decl pos:start="344:52" pos:end="344:56"><type ref="prev" pos:start="344:13" pos:end="344:19"/><name pos:start="344:52" pos:end="344:56">noise</name></decl>;</decl_stmt>

            <decl_stmt pos:start="346:13" pos:end="346:51"><decl pos:start="346:13" pos:end="346:17"><type pos:start="346:13" pos:end="346:15"><name pos:start="346:13" pos:end="346:15">int</name></type> <name pos:start="346:17" pos:end="346:17">i</name></decl>, <decl pos:start="346:20" pos:end="346:20"><type ref="prev" pos:start="346:13" pos:end="346:15"/><name pos:start="346:20" pos:end="346:20">j</name></decl>, <decl pos:start="346:23" pos:end="346:23"><type ref="prev" pos:start="346:13" pos:end="346:15"/><name pos:start="346:23" pos:end="346:23">n</name></decl>, <decl pos:start="346:26" pos:end="346:27"><type ref="prev" pos:start="346:13" pos:end="346:15"/><name pos:start="346:26" pos:end="346:27">n1</name></decl>, <decl pos:start="346:30" pos:end="346:43"><type ref="prev" pos:start="346:13" pos:end="346:15"/><name pos:start="346:30" pos:end="346:43">last_high_band</name></decl>, <decl pos:start="346:46" pos:end="346:50"><type ref="prev" pos:start="346:13" pos:end="346:15"/><name pos:start="346:46" pos:end="346:50">esize</name></decl>;</decl_stmt>

            <decl_stmt pos:start="348:13" pos:end="348:48"><decl pos:start="348:13" pos:end="348:47"><type pos:start="348:13" pos:end="348:17"><name pos:start="348:13" pos:end="348:17">float</name></type> <name pos:start="348:19" pos:end="348:47"><name pos:start="348:19" pos:end="348:27">exp_power</name><index pos:start="348:28" pos:end="348:47">[<expr pos:start="348:29" pos:end="348:46"><name pos:start="348:29" pos:end="348:46">HIGH_BAND_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



            <expr_stmt pos:start="352:13" pos:end="352:35"><expr pos:start="352:13" pos:end="352:34"><name pos:start="352:13" pos:end="352:18">coefs1</name> <operator pos:start="352:20" pos:end="352:20">=</operator> <name pos:start="352:22" pos:end="352:34"><name pos:start="352:22" pos:end="352:22">s</name><operator pos:start="352:23" pos:end="352:24">-&gt;</operator><name pos:start="352:25" pos:end="352:30">coefs1</name><index pos:start="352:31" pos:end="352:34">[<expr pos:start="352:32" pos:end="352:33"><name pos:start="352:32" pos:end="352:33">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="354:13" pos:end="354:41"><expr pos:start="354:13" pos:end="354:40"><name pos:start="354:13" pos:end="354:21">exponents</name> <operator pos:start="354:23" pos:end="354:23">=</operator> <name pos:start="354:25" pos:end="354:40"><name pos:start="354:25" pos:end="354:25">s</name><operator pos:start="354:26" pos:end="354:27">-&gt;</operator><name pos:start="354:28" pos:end="354:36">exponents</name><index pos:start="354:37" pos:end="354:40">[<expr pos:start="354:38" pos:end="354:39"><name pos:start="354:38" pos:end="354:39">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="356:13" pos:end="356:43"><expr pos:start="356:13" pos:end="356:42"><name pos:start="356:13" pos:end="356:17">esize</name> <operator pos:start="356:19" pos:end="356:19">=</operator> <name pos:start="356:21" pos:end="356:42"><name pos:start="356:21" pos:end="356:21">s</name><operator pos:start="356:22" pos:end="356:23">-&gt;</operator><name pos:start="356:24" pos:end="356:38">exponents_bsize</name><index pos:start="356:39" pos:end="356:42">[<expr pos:start="356:40" pos:end="356:41"><name pos:start="356:40" pos:end="356:41">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="358:13" pos:end="358:68"><expr pos:start="358:13" pos:end="358:67"><name pos:start="358:13" pos:end="358:16">mult</name> <operator pos:start="358:18" pos:end="358:18">=</operator> <call pos:start="358:20" pos:end="358:45"><name pos:start="358:20" pos:end="358:22">pow</name><argument_list pos:start="358:23" pos:end="358:45">(<argument pos:start="358:24" pos:end="358:25"><expr pos:start="358:24" pos:end="358:25"><literal type="number" pos:start="358:24" pos:end="358:25">10</literal></expr></argument>, <argument pos:start="358:28" pos:end="358:44"><expr pos:start="358:28" pos:end="358:44"><name pos:start="358:28" pos:end="358:37">total_gain</name> <operator pos:start="358:39" pos:end="358:39">*</operator> <literal type="number" pos:start="358:41" pos:end="358:44">0.05</literal></expr></argument>)</argument_list></call> <operator pos:start="358:47" pos:end="358:47">/</operator> <name pos:start="358:49" pos:end="358:67"><name pos:start="358:49" pos:end="358:49">s</name><operator pos:start="358:50" pos:end="358:51">-&gt;</operator><name pos:start="358:52" pos:end="358:63">max_exponent</name><index pos:start="358:64" pos:end="358:67">[<expr pos:start="358:65" pos:end="358:66"><name pos:start="358:65" pos:end="358:66">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="360:13" pos:end="360:30"><expr pos:start="360:13" pos:end="360:29"><name pos:start="360:13" pos:end="360:16">mult</name> <operator pos:start="360:18" pos:end="360:19">*=</operator> <name pos:start="360:21" pos:end="360:29">mdct_norm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="362:13" pos:end="362:33"><expr pos:start="362:13" pos:end="362:32"><name pos:start="362:13" pos:end="362:17">coefs</name> <operator pos:start="362:19" pos:end="362:19">=</operator> <name pos:start="362:21" pos:end="362:32"><name pos:start="362:21" pos:end="362:21">s</name><operator pos:start="362:22" pos:end="362:23">-&gt;</operator><name pos:start="362:24" pos:end="362:28">coefs</name><index pos:start="362:29" pos:end="362:32">[<expr pos:start="362:30" pos:end="362:31"><name pos:start="362:30" pos:end="362:31">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="364:13" pos:end="615:17"><if pos:start="364:13" pos:end="615:17">if <condition pos:start="364:16" pos:end="364:36">(<expr pos:start="364:17" pos:end="364:35"><name pos:start="364:17" pos:end="364:35"><name pos:start="364:17" pos:end="364:17">s</name><operator pos:start="364:18" pos:end="364:19">-&gt;</operator><name pos:start="364:20" pos:end="364:35">use_noise_coding</name></name></expr>)</condition> <block pos:start="364:38" pos:end="615:17">{<block_content pos:start="366:17" pos:end="615:17">

                <expr_stmt pos:start="366:17" pos:end="366:29"><expr pos:start="366:17" pos:end="366:28"><name pos:start="366:17" pos:end="366:21">mult1</name> <operator pos:start="366:23" pos:end="366:23">=</operator> <name pos:start="366:25" pos:end="366:28">mult</name></expr>;</expr_stmt>

                <comment type="block" pos:start="368:17" pos:end="368:44">/* very low freqs : noise */</comment>

                <for pos:start="370:17" pos:end="615:17">for<control pos:start="370:20" pos:end="370:50">(<init pos:start="370:21" pos:end="370:26"><expr pos:start="370:21" pos:end="370:25"><name pos:start="370:21" pos:end="370:21">i</name> <operator pos:start="370:23" pos:end="370:23">=</operator> <literal type="number" pos:start="370:25" pos:end="370:25">0</literal></expr>;</init><condition pos:start="370:27" pos:end="370:45"><expr pos:start="370:27" pos:end="370:44"><name pos:start="370:27" pos:end="370:27">i</name> <operator pos:start="370:29" pos:end="370:29">&lt;</operator> <name pos:start="370:31" pos:end="370:44"><name pos:start="370:31" pos:end="370:31">s</name><operator pos:start="370:32" pos:end="370:33">-&gt;</operator><name pos:start="370:34" pos:end="370:44">coefs_start</name></name></expr>;</condition> <incr pos:start="370:47" pos:end="370:49"><expr pos:start="370:47" pos:end="370:49"><name pos:start="370:47" pos:end="370:47">i</name><operator pos:start="370:48" pos:end="370:49">++</operator></expr></incr>)</control> <block pos:start="370:52" pos:end="615:17">{<block_content pos:start="372:21" pos:end="615:17">

                    <expr_stmt pos:start="372:21" pos:end="374:57"><expr pos:start="372:21" pos:end="374:56"><operator pos:start="372:21" pos:end="372:21">*</operator><name pos:start="372:22" pos:end="372:26">coefs</name><operator pos:start="372:27" pos:end="372:28">++</operator> <operator pos:start="372:30" pos:end="372:30">=</operator> <name pos:start="372:32" pos:end="372:61"><name pos:start="372:32" pos:end="372:32">s</name><operator pos:start="372:33" pos:end="372:34">-&gt;</operator><name pos:start="372:35" pos:end="372:45">noise_table</name><index pos:start="372:46" pos:end="372:61">[<expr pos:start="372:47" pos:end="372:60"><name pos:start="372:47" pos:end="372:60"><name pos:start="372:47" pos:end="372:47">s</name><operator pos:start="372:48" pos:end="372:49">-&gt;</operator><name pos:start="372:50" pos:end="372:60">noise_index</name></name></expr>]</index></name> <operator pos:start="372:63" pos:end="372:63">*</operator>

                      <name pos:start="374:23" pos:end="374:48"><name pos:start="374:23" pos:end="374:31">exponents</name><index pos:start="374:32" pos:end="374:48">[<expr pos:start="374:33" pos:end="374:47"><name pos:start="374:33" pos:end="374:33">i</name><operator pos:start="374:34" pos:end="374:35">&lt;&lt;</operator><name pos:start="374:36" pos:end="374:40">bsize</name><operator pos:start="374:41" pos:end="374:42">&gt;&gt;</operator><name pos:start="374:43" pos:end="374:47">esize</name></expr>]</index></name> <operator pos:start="374:50" pos:end="374:50">*</operator> <name pos:start="374:52" pos:end="374:56">mult1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="376:21" pos:end="376:81"><expr pos:start="376:21" pos:end="376:80"><name pos:start="376:21" pos:end="376:34"><name pos:start="376:21" pos:end="376:21">s</name><operator pos:start="376:22" pos:end="376:23">-&gt;</operator><name pos:start="376:24" pos:end="376:34">noise_index</name></name> <operator pos:start="376:36" pos:end="376:36">=</operator> <operator pos:start="376:38" pos:end="376:38">(</operator><name pos:start="376:39" pos:end="376:52"><name pos:start="376:39" pos:end="376:39">s</name><operator pos:start="376:40" pos:end="376:41">-&gt;</operator><name pos:start="376:42" pos:end="376:52">noise_index</name></name> <operator pos:start="376:54" pos:end="376:54">+</operator> <literal type="number" pos:start="376:56" pos:end="376:56">1</literal><operator pos:start="376:57" pos:end="376:57">)</operator> <operator pos:start="376:59" pos:end="376:59">&amp;</operator> <operator pos:start="376:61" pos:end="376:61">(</operator><name pos:start="376:62" pos:end="376:75">NOISE_TAB_SIZE</name> <operator pos:start="376:77" pos:end="376:77">-</operator> <literal type="number" pos:start="376:79" pos:end="376:79">1</literal><operator pos:start="376:80" pos:end="376:80">)</operator></expr>;</expr_stmt>




                <expr_stmt pos:start="381:17" pos:end="381:51"><expr pos:start="381:17" pos:end="381:50"><name pos:start="381:17" pos:end="381:18">n1</name> <operator pos:start="381:20" pos:end="381:20">=</operator> <name pos:start="381:22" pos:end="381:50"><name pos:start="381:22" pos:end="381:22">s</name><operator pos:start="381:23" pos:end="381:24">-&gt;</operator><name pos:start="381:25" pos:end="381:43">exponent_high_sizes</name><index pos:start="381:44" pos:end="381:50">[<expr pos:start="381:45" pos:end="381:49"><name pos:start="381:45" pos:end="381:49">bsize</name></expr>]</index></name></expr>;</expr_stmt>



                <comment type="block" pos:start="385:17" pos:end="385:49">/* compute power of high bands */</comment>

                <expr_stmt pos:start="387:17" pos:end="389:62"><expr pos:start="387:17" pos:end="389:61"><name pos:start="387:17" pos:end="387:25">exponents</name> <operator pos:start="387:27" pos:end="387:27">=</operator> <name pos:start="387:29" pos:end="387:44"><name pos:start="387:29" pos:end="387:29">s</name><operator pos:start="387:30" pos:end="387:31">-&gt;</operator><name pos:start="387:32" pos:end="387:40">exponents</name><index pos:start="387:41" pos:end="387:44">[<expr pos:start="387:42" pos:end="387:43"><name pos:start="387:42" pos:end="387:43">ch</name></expr>]</index></name> <operator pos:start="387:46" pos:end="387:46">+</operator>

                    <operator pos:start="389:21" pos:end="389:21">(</operator><name pos:start="389:22" pos:end="389:46"><name pos:start="389:22" pos:end="389:22">s</name><operator pos:start="389:23" pos:end="389:24">-&gt;</operator><name pos:start="389:25" pos:end="389:39">high_band_start</name><index pos:start="389:40" pos:end="389:46">[<expr pos:start="389:41" pos:end="389:45"><name pos:start="389:41" pos:end="389:45">bsize</name></expr>]</index></name><operator pos:start="389:47" pos:end="389:48">&lt;&lt;</operator><name pos:start="389:49" pos:end="389:53">bsize</name><operator pos:start="389:54" pos:end="389:55">&gt;&gt;</operator><name pos:start="389:56" pos:end="389:60">esize</name><operator pos:start="389:61" pos:end="389:61">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="391:17" pos:end="391:35"><expr pos:start="391:17" pos:end="391:34"><name pos:start="391:17" pos:end="391:30">last_high_band</name> <operator pos:start="391:32" pos:end="391:32">=</operator> <literal type="number" pos:start="391:34" pos:end="391:34">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="391:37" pos:end="391:55">/* avoid warning */</comment>

                <for pos:start="393:17" pos:end="615:17">for<control pos:start="393:20" pos:end="393:33">(<init pos:start="393:21" pos:end="393:24"><expr pos:start="393:21" pos:end="393:23"><name pos:start="393:21" pos:end="393:21">j</name><operator pos:start="393:22" pos:end="393:22">=</operator><literal type="number" pos:start="393:23" pos:end="393:23">0</literal></expr>;</init><condition pos:start="393:25" pos:end="393:29"><expr pos:start="393:25" pos:end="393:28"><name pos:start="393:25" pos:end="393:25">j</name><operator pos:start="393:26" pos:end="393:26">&lt;</operator><name pos:start="393:27" pos:end="393:28">n1</name></expr>;</condition><incr pos:start="393:30" pos:end="393:32"><expr pos:start="393:30" pos:end="393:32"><name pos:start="393:30" pos:end="393:30">j</name><operator pos:start="393:31" pos:end="393:32">++</operator></expr></incr>)</control> <block pos:start="393:35" pos:end="615:17">{<block_content pos:start="395:21" pos:end="615:17">

                    <expr_stmt pos:start="395:21" pos:end="397:68"><expr pos:start="395:21" pos:end="397:67"><name pos:start="395:21" pos:end="395:21">n</name> <operator pos:start="395:23" pos:end="395:23">=</operator> <name pos:start="395:25" pos:end="397:67"><name pos:start="395:25" pos:end="395:25">s</name><operator pos:start="395:26" pos:end="395:27">-&gt;</operator><name pos:start="395:28" pos:end="395:46">exponent_high_bands</name><index pos:start="395:47" pos:end="397:64">[<expr pos:start="395:48" pos:end="397:63"><name pos:start="395:48" pos:end="395:64"><name pos:start="395:48" pos:end="395:48">s</name><operator pos:start="395:49" pos:end="395:50">-&gt;</operator><name pos:start="395:51" pos:end="395:64">frame_len_bits</name></name> <operator pos:start="395:66" pos:end="395:66">-</operator>

                                              <name pos:start="397:47" pos:end="397:63"><name pos:start="397:47" pos:end="397:47">s</name><operator pos:start="397:48" pos:end="397:49">-&gt;</operator><name pos:start="397:50" pos:end="397:63">block_len_bits</name></name></expr>]</index><index pos:start="397:65" pos:end="397:67">[<expr pos:start="397:66" pos:end="397:66"><name pos:start="397:66" pos:end="397:66">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="399:21" pos:end="615:17"><if pos:start="399:21" pos:end="615:17">if <condition pos:start="399:24" pos:end="399:50">(<expr pos:start="399:25" pos:end="399:49"><name pos:start="399:25" pos:end="399:49"><name pos:start="399:25" pos:end="399:25">s</name><operator pos:start="399:26" pos:end="399:27">-&gt;</operator><name pos:start="399:28" pos:end="399:42">high_band_coded</name><index pos:start="399:43" pos:end="399:46">[<expr pos:start="399:44" pos:end="399:45"><name pos:start="399:44" pos:end="399:45">ch</name></expr>]</index><index pos:start="399:47" pos:end="399:49">[<expr pos:start="399:48" pos:end="399:48"><name pos:start="399:48" pos:end="399:48">j</name></expr>]</index></name></expr>)</condition> <block pos:start="399:52" pos:end="615:17">{<block_content pos:start="401:25" pos:end="615:17">

                        <decl_stmt pos:start="401:25" pos:end="401:36"><decl pos:start="401:25" pos:end="401:32"><type pos:start="401:25" pos:end="401:29"><name pos:start="401:25" pos:end="401:29">float</name></type> <name pos:start="401:31" pos:end="401:32">e2</name></decl>, <decl pos:start="401:35" pos:end="401:35"><type ref="prev" pos:start="401:25" pos:end="401:29"/><name pos:start="401:35" pos:end="401:35">v</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="403:25" pos:end="403:31"><expr pos:start="403:25" pos:end="403:30"><name pos:start="403:25" pos:end="403:26">e2</name> <operator pos:start="403:28" pos:end="403:28">=</operator> <literal type="number" pos:start="403:30" pos:end="403:30">0</literal></expr>;</expr_stmt>

                        <for pos:start="405:25" pos:end="615:17">for<control pos:start="405:28" pos:end="405:45">(<init pos:start="405:29" pos:end="405:34"><expr pos:start="405:29" pos:end="405:33"><name pos:start="405:29" pos:end="405:29">i</name> <operator pos:start="405:31" pos:end="405:31">=</operator> <literal type="number" pos:start="405:33" pos:end="405:33">0</literal></expr>;</init><condition pos:start="405:35" pos:end="405:40"><expr pos:start="405:35" pos:end="405:39"><name pos:start="405:35" pos:end="405:35">i</name> <operator pos:start="405:37" pos:end="405:37">&lt;</operator> <name pos:start="405:39" pos:end="405:39">n</name></expr>;</condition> <incr pos:start="405:42" pos:end="405:44"><expr pos:start="405:42" pos:end="405:44"><name pos:start="405:42" pos:end="405:42">i</name><operator pos:start="405:43" pos:end="405:44">++</operator></expr></incr>)</control> <block pos:start="405:47" pos:end="615:17">{<block_content pos:start="407:29" pos:end="615:17">

                            <expr_stmt pos:start="407:29" pos:end="407:59"><expr pos:start="407:29" pos:end="407:58"><name pos:start="407:29" pos:end="407:29">v</name> <operator pos:start="407:31" pos:end="407:31">=</operator> <name pos:start="407:33" pos:end="407:58"><name pos:start="407:33" pos:end="407:41">exponents</name><index pos:start="407:42" pos:end="407:58">[<expr pos:start="407:43" pos:end="407:57"><name pos:start="407:43" pos:end="407:43">i</name><operator pos:start="407:44" pos:end="407:45">&lt;&lt;</operator><name pos:start="407:46" pos:end="407:50">bsize</name><operator pos:start="407:51" pos:end="407:52">&gt;&gt;</operator><name pos:start="407:53" pos:end="407:57">esize</name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="409:29" pos:end="409:40"><expr pos:start="409:29" pos:end="409:39"><name pos:start="409:29" pos:end="409:30">e2</name> <operator pos:start="409:32" pos:end="409:33">+=</operator> <name pos:start="409:35" pos:end="409:35">v</name> <operator pos:start="409:37" pos:end="409:37">*</operator> <name pos:start="409:39" pos:end="409:39">v</name></expr>;</expr_stmt>


                        <expr_stmt pos:start="412:25" pos:end="412:46"><expr pos:start="412:25" pos:end="412:45"><name pos:start="412:25" pos:end="412:36"><name pos:start="412:25" pos:end="412:33">exp_power</name><index pos:start="412:34" pos:end="412:36">[<expr pos:start="412:35" pos:end="412:35"><name pos:start="412:35" pos:end="412:35">j</name></expr>]</index></name> <operator pos:start="412:38" pos:end="412:38">=</operator> <name pos:start="412:40" pos:end="412:41">e2</name> <operator pos:start="412:43" pos:end="412:43">/</operator> <name pos:start="412:45" pos:end="412:45">n</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="414:25" pos:end="414:43"><expr pos:start="414:25" pos:end="414:42"><name pos:start="414:25" pos:end="414:38">last_high_band</name> <operator pos:start="414:40" pos:end="414:40">=</operator> <name pos:start="414:42" pos:end="414:42">j</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="416:25" pos:end="416:85"><expr pos:start="416:25" pos:end="416:84"><call pos:start="416:25" pos:end="416:84"><name pos:start="416:25" pos:end="416:31">tprintf</name><argument_list pos:start="416:32" pos:end="416:84">(<argument pos:start="416:33" pos:end="416:40"><expr pos:start="416:33" pos:end="416:40"><name pos:start="416:33" pos:end="416:40"><name pos:start="416:33" pos:end="416:33">s</name><operator pos:start="416:34" pos:end="416:35">-&gt;</operator><name pos:start="416:36" pos:end="416:40">avctx</name></name></expr></argument>, <argument pos:start="416:43" pos:end="416:63"><expr pos:start="416:43" pos:end="416:63"><literal type="string" pos:start="416:43" pos:end="416:63">"%d: power=%f (%d)\n"</literal></expr></argument>, <argument pos:start="416:66" pos:end="416:66"><expr pos:start="416:66" pos:end="416:66"><name pos:start="416:66" pos:end="416:66">j</name></expr></argument>, <argument pos:start="416:69" pos:end="416:80"><expr pos:start="416:69" pos:end="416:80"><name pos:start="416:69" pos:end="416:80"><name pos:start="416:69" pos:end="416:77">exp_power</name><index pos:start="416:78" pos:end="416:80">[<expr pos:start="416:79" pos:end="416:79"><name pos:start="416:79" pos:end="416:79">j</name></expr>]</index></name></expr></argument>, <argument pos:start="416:83" pos:end="416:83"><expr pos:start="416:83" pos:end="416:83"><name pos:start="416:83" pos:end="416:83">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                    <expr_stmt pos:start="419:21" pos:end="419:49"><expr pos:start="419:21" pos:end="419:48"><name pos:start="419:21" pos:end="419:29">exponents</name> <operator pos:start="419:31" pos:end="419:32">+=</operator> <name pos:start="419:34" pos:end="419:34">n</name><operator pos:start="419:35" pos:end="419:36">&lt;&lt;</operator><name pos:start="419:37" pos:end="419:41">bsize</name><operator pos:start="419:42" pos:end="419:43">&gt;&gt;</operator><name pos:start="419:44" pos:end="419:48">esize</name></expr>;</expr_stmt>




                <comment type="block" pos:start="424:17" pos:end="424:47">/* main freqs and high freqs */</comment>

                <expr_stmt pos:start="426:17" pos:end="426:78"><expr pos:start="426:17" pos:end="426:77"><name pos:start="426:17" pos:end="426:25">exponents</name> <operator pos:start="426:27" pos:end="426:27">=</operator> <name pos:start="426:29" pos:end="426:44"><name pos:start="426:29" pos:end="426:29">s</name><operator pos:start="426:30" pos:end="426:31">-&gt;</operator><name pos:start="426:32" pos:end="426:40">exponents</name><index pos:start="426:41" pos:end="426:44">[<expr pos:start="426:42" pos:end="426:43"><name pos:start="426:42" pos:end="426:43">ch</name></expr>]</index></name> <operator pos:start="426:46" pos:end="426:46">+</operator> <operator pos:start="426:48" pos:end="426:48">(</operator><name pos:start="426:49" pos:end="426:62"><name pos:start="426:49" pos:end="426:49">s</name><operator pos:start="426:50" pos:end="426:51">-&gt;</operator><name pos:start="426:52" pos:end="426:62">coefs_start</name></name><operator pos:start="426:63" pos:end="426:64">&lt;&lt;</operator><name pos:start="426:65" pos:end="426:69">bsize</name><operator pos:start="426:70" pos:end="426:71">&gt;&gt;</operator><name pos:start="426:72" pos:end="426:76">esize</name><operator pos:start="426:77" pos:end="426:77">)</operator></expr>;</expr_stmt>

                <for pos:start="428:17" pos:end="615:17">for<control pos:start="428:20" pos:end="428:34">(<init pos:start="428:21" pos:end="428:25"><expr pos:start="428:21" pos:end="428:24"><name pos:start="428:21" pos:end="428:21">j</name><operator pos:start="428:22" pos:end="428:22">=</operator><operator pos:start="428:23" pos:end="428:23">-</operator><literal type="number" pos:start="428:24" pos:end="428:24">1</literal></expr>;</init><condition pos:start="428:26" pos:end="428:30"><expr pos:start="428:26" pos:end="428:29"><name pos:start="428:26" pos:end="428:26">j</name><operator pos:start="428:27" pos:end="428:27">&lt;</operator><name pos:start="428:28" pos:end="428:29">n1</name></expr>;</condition><incr pos:start="428:31" pos:end="428:33"><expr pos:start="428:31" pos:end="428:33"><name pos:start="428:31" pos:end="428:31">j</name><operator pos:start="428:32" pos:end="428:33">++</operator></expr></incr>)</control> <block pos:start="428:36" pos:end="615:17">{<block_content pos:start="430:21" pos:end="615:17">

                    <if_stmt pos:start="430:21" pos:end="615:17"><if pos:start="430:21" pos:end="436:21">if <condition pos:start="430:24" pos:end="430:30">(<expr pos:start="430:25" pos:end="430:29"><name pos:start="430:25" pos:end="430:25">j</name> <operator pos:start="430:27" pos:end="430:27">&lt;</operator> <literal type="number" pos:start="430:29" pos:end="430:29">0</literal></expr>)</condition> <block pos:start="430:32" pos:end="436:21">{<block_content pos:start="432:25" pos:end="434:43">

                        <expr_stmt pos:start="432:25" pos:end="434:43"><expr pos:start="432:25" pos:end="434:42"><name pos:start="432:25" pos:end="432:25">n</name> <operator pos:start="432:27" pos:end="432:27">=</operator> <name pos:start="432:29" pos:end="432:53"><name pos:start="432:29" pos:end="432:29">s</name><operator pos:start="432:30" pos:end="432:31">-&gt;</operator><name pos:start="432:32" pos:end="432:46">high_band_start</name><index pos:start="432:47" pos:end="432:53">[<expr pos:start="432:48" pos:end="432:52"><name pos:start="432:48" pos:end="432:52">bsize</name></expr>]</index></name> <operator pos:start="432:55" pos:end="432:55">-</operator>

                            <name pos:start="434:29" pos:end="434:42"><name pos:start="434:29" pos:end="434:29">s</name><operator pos:start="434:30" pos:end="434:31">-&gt;</operator><name pos:start="434:32" pos:end="434:42">coefs_start</name></name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="436:23" pos:end="615:17">else <block pos:start="436:28" pos:end="615:17">{<block_content pos:start="438:25" pos:end="615:17">

                        <expr_stmt pos:start="438:25" pos:end="440:72"><expr pos:start="438:25" pos:end="440:71"><name pos:start="438:25" pos:end="438:25">n</name> <operator pos:start="438:27" pos:end="438:27">=</operator> <name pos:start="438:29" pos:end="440:71"><name pos:start="438:29" pos:end="438:29">s</name><operator pos:start="438:30" pos:end="438:31">-&gt;</operator><name pos:start="438:32" pos:end="438:50">exponent_high_bands</name><index pos:start="438:51" pos:end="440:68">[<expr pos:start="438:52" pos:end="440:67"><name pos:start="438:52" pos:end="438:68"><name pos:start="438:52" pos:end="438:52">s</name><operator pos:start="438:53" pos:end="438:54">-&gt;</operator><name pos:start="438:55" pos:end="438:68">frame_len_bits</name></name> <operator pos:start="438:70" pos:end="438:70">-</operator>

                                                  <name pos:start="440:51" pos:end="440:67"><name pos:start="440:51" pos:end="440:51">s</name><operator pos:start="440:52" pos:end="440:53">-&gt;</operator><name pos:start="440:54" pos:end="440:67">block_len_bits</name></name></expr>]</index><index pos:start="440:69" pos:end="440:71">[<expr pos:start="440:70" pos:end="440:70"><name pos:start="440:70" pos:end="440:70">j</name></expr>]</index></name></expr>;</expr_stmt>


                    <if_stmt pos:start="443:21" pos:end="615:17"><if pos:start="443:21" pos:end="615:17">if <condition pos:start="443:24" pos:end="443:60">(<expr pos:start="443:25" pos:end="443:59"><name pos:start="443:25" pos:end="443:25">j</name> <operator pos:start="443:27" pos:end="443:28">&gt;=</operator> <literal type="number" pos:start="443:30" pos:end="443:30">0</literal> <operator pos:start="443:32" pos:end="443:33">&amp;&amp;</operator> <name pos:start="443:35" pos:end="443:59"><name pos:start="443:35" pos:end="443:35">s</name><operator pos:start="443:36" pos:end="443:37">-&gt;</operator><name pos:start="443:38" pos:end="443:52">high_band_coded</name><index pos:start="443:53" pos:end="443:56">[<expr pos:start="443:54" pos:end="443:55"><name pos:start="443:54" pos:end="443:55">ch</name></expr>]</index><index pos:start="443:57" pos:end="443:59">[<expr pos:start="443:58" pos:end="443:58"><name pos:start="443:58" pos:end="443:58">j</name></expr>]</index></name></expr>)</condition> <block pos:start="443:62" pos:end="615:17">{<block_content pos:start="447:25" pos:end="615:17">

                        <comment type="block" pos:start="445:25" pos:end="445:60">/* use noise with specified power */</comment>

                        <expr_stmt pos:start="447:25" pos:end="447:79"><expr pos:start="447:25" pos:end="447:78"><name pos:start="447:25" pos:end="447:29">mult1</name> <operator pos:start="447:31" pos:end="447:31">=</operator> <call pos:start="447:33" pos:end="447:78"><name pos:start="447:33" pos:end="447:36">sqrt</name><argument_list pos:start="447:37" pos:end="447:78">(<argument pos:start="447:38" pos:end="447:77"><expr pos:start="447:38" pos:end="447:77"><name pos:start="447:38" pos:end="447:49"><name pos:start="447:38" pos:end="447:46">exp_power</name><index pos:start="447:47" pos:end="447:49">[<expr pos:start="447:48" pos:end="447:48"><name pos:start="447:48" pos:end="447:48">j</name></expr>]</index></name> <operator pos:start="447:51" pos:end="447:51">/</operator> <name pos:start="447:53" pos:end="447:77"><name pos:start="447:53" pos:end="447:61">exp_power</name><index pos:start="447:62" pos:end="447:77">[<expr pos:start="447:63" pos:end="447:76"><name pos:start="447:63" pos:end="447:76">last_high_band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="449:25" pos:end="449:46">/* XXX: use a table */</comment>

                        <expr_stmt pos:start="451:25" pos:end="451:83"><expr pos:start="451:25" pos:end="451:82"><name pos:start="451:25" pos:end="451:29">mult1</name> <operator pos:start="451:31" pos:end="451:31">=</operator> <name pos:start="451:33" pos:end="451:37">mult1</name> <operator pos:start="451:39" pos:end="451:39">*</operator> <call pos:start="451:41" pos:end="451:82"><name pos:start="451:41" pos:end="451:43">pow</name><argument_list pos:start="451:44" pos:end="451:82">(<argument pos:start="451:45" pos:end="451:46"><expr pos:start="451:45" pos:end="451:46"><literal type="number" pos:start="451:45" pos:end="451:46">10</literal></expr></argument>, <argument pos:start="451:49" pos:end="451:81"><expr pos:start="451:49" pos:end="451:81"><name pos:start="451:49" pos:end="451:74"><name pos:start="451:49" pos:end="451:49">s</name><operator pos:start="451:50" pos:end="451:51">-&gt;</operator><name pos:start="451:52" pos:end="451:67">high_band_values</name><index pos:start="451:68" pos:end="451:71">[<expr pos:start="451:69" pos:end="451:70"><name pos:start="451:69" pos:end="451:70">ch</name></expr>]</index><index pos:start="451:72" pos:end="451:74">[<expr pos:start="451:73" pos:end="451:73"><name pos:start="451:73" pos:end="451:73">j</name></expr>]</index></name> <operator pos:start="451:76" pos:end="451:76">*</operator> <literal type="number" pos:start="451:78" pos:end="451:81">0.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="453:25" pos:end="453:78"><expr pos:start="453:25" pos:end="453:77"><name pos:start="453:25" pos:end="453:29">mult1</name> <operator pos:start="453:31" pos:end="453:31">=</operator> <name pos:start="453:33" pos:end="453:37">mult1</name> <operator pos:start="453:39" pos:end="453:39">/</operator> <operator pos:start="453:41" pos:end="453:41">(</operator><name pos:start="453:42" pos:end="453:60"><name pos:start="453:42" pos:end="453:42">s</name><operator pos:start="453:43" pos:end="453:44">-&gt;</operator><name pos:start="453:45" pos:end="453:56">max_exponent</name><index pos:start="453:57" pos:end="453:60">[<expr pos:start="453:58" pos:end="453:59"><name pos:start="453:58" pos:end="453:59">ch</name></expr>]</index></name> <operator pos:start="453:62" pos:end="453:62">*</operator> <name pos:start="453:64" pos:end="453:76"><name pos:start="453:64" pos:end="453:64">s</name><operator pos:start="453:65" pos:end="453:66">-&gt;</operator><name pos:start="453:67" pos:end="453:76">noise_mult</name></name><operator pos:start="453:77" pos:end="453:77">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="455:25" pos:end="455:43"><expr pos:start="455:25" pos:end="455:42"><name pos:start="455:25" pos:end="455:29">mult1</name> <operator pos:start="455:31" pos:end="455:32">*=</operator> <name pos:start="455:34" pos:end="455:42">mdct_norm</name></expr>;</expr_stmt>

                        <for pos:start="457:25" pos:end="470:21">for<control pos:start="457:28" pos:end="457:45">(<init pos:start="457:29" pos:end="457:34"><expr pos:start="457:29" pos:end="457:33"><name pos:start="457:29" pos:end="457:29">i</name> <operator pos:start="457:31" pos:end="457:31">=</operator> <literal type="number" pos:start="457:33" pos:end="457:33">0</literal></expr>;</init><condition pos:start="457:35" pos:end="457:40"><expr pos:start="457:35" pos:end="457:39"><name pos:start="457:35" pos:end="457:35">i</name> <operator pos:start="457:37" pos:end="457:37">&lt;</operator> <name pos:start="457:39" pos:end="457:39">n</name></expr>;</condition> <incr pos:start="457:42" pos:end="457:44"><expr pos:start="457:42" pos:end="457:44"><name pos:start="457:42" pos:end="457:42">i</name><operator pos:start="457:43" pos:end="457:44">++</operator></expr></incr>)</control> <block pos:start="457:47" pos:end="470:21">{<block_content pos:start="459:29" pos:end="468:53">

                            <expr_stmt pos:start="459:29" pos:end="459:67"><expr pos:start="459:29" pos:end="459:66"><name pos:start="459:29" pos:end="459:33">noise</name> <operator pos:start="459:35" pos:end="459:35">=</operator> <name pos:start="459:37" pos:end="459:66"><name pos:start="459:37" pos:end="459:37">s</name><operator pos:start="459:38" pos:end="459:39">-&gt;</operator><name pos:start="459:40" pos:end="459:50">noise_table</name><index pos:start="459:51" pos:end="459:66">[<expr pos:start="459:52" pos:end="459:65"><name pos:start="459:52" pos:end="459:65"><name pos:start="459:52" pos:end="459:52">s</name><operator pos:start="459:53" pos:end="459:54">-&gt;</operator><name pos:start="459:55" pos:end="459:65">noise_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="461:29" pos:end="461:89"><expr pos:start="461:29" pos:end="461:88"><name pos:start="461:29" pos:end="461:42"><name pos:start="461:29" pos:end="461:29">s</name><operator pos:start="461:30" pos:end="461:31">-&gt;</operator><name pos:start="461:32" pos:end="461:42">noise_index</name></name> <operator pos:start="461:44" pos:end="461:44">=</operator> <operator pos:start="461:46" pos:end="461:46">(</operator><name pos:start="461:47" pos:end="461:60"><name pos:start="461:47" pos:end="461:47">s</name><operator pos:start="461:48" pos:end="461:49">-&gt;</operator><name pos:start="461:50" pos:end="461:60">noise_index</name></name> <operator pos:start="461:62" pos:end="461:62">+</operator> <literal type="number" pos:start="461:64" pos:end="461:64">1</literal><operator pos:start="461:65" pos:end="461:65">)</operator> <operator pos:start="461:67" pos:end="461:67">&amp;</operator> <operator pos:start="461:69" pos:end="461:69">(</operator><name pos:start="461:70" pos:end="461:83">NOISE_TAB_SIZE</name> <operator pos:start="461:85" pos:end="461:85">-</operator> <literal type="number" pos:start="461:87" pos:end="461:87">1</literal><operator pos:start="461:88" pos:end="461:88">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="463:29" pos:end="465:67"><expr pos:start="463:29" pos:end="465:66"><operator pos:start="463:29" pos:end="463:29">*</operator><name pos:start="463:30" pos:end="463:34">coefs</name><operator pos:start="463:35" pos:end="463:36">++</operator> <operator pos:start="463:38" pos:end="463:38">=</operator>  <name pos:start="463:41" pos:end="463:45">noise</name> <operator pos:start="463:47" pos:end="463:47">*</operator>

                                <name pos:start="465:33" pos:end="465:58"><name pos:start="465:33" pos:end="465:41">exponents</name><index pos:start="465:42" pos:end="465:58">[<expr pos:start="465:43" pos:end="465:57"><name pos:start="465:43" pos:end="465:43">i</name><operator pos:start="465:44" pos:end="465:45">&lt;&lt;</operator><name pos:start="465:46" pos:end="465:50">bsize</name><operator pos:start="465:51" pos:end="465:52">&gt;&gt;</operator><name pos:start="465:53" pos:end="465:57">esize</name></expr>]</index></name> <operator pos:start="465:60" pos:end="465:60">*</operator> <name pos:start="465:62" pos:end="465:66">mult1</name></expr>;</expr_stmt>


                        <expr_stmt pos:start="468:25" pos:end="468:53"><expr pos:start="468:25" pos:end="468:52"><name pos:start="468:25" pos:end="468:33">exponents</name> <operator pos:start="468:35" pos:end="468:36">+=</operator> <name pos:start="468:38" pos:end="468:38">n</name><operator pos:start="468:39" pos:end="468:40">&lt;&lt;</operator><name pos:start="468:41" pos:end="468:45">bsize</name><operator pos:start="468:46" pos:end="468:47">&gt;&gt;</operator><name pos:start="468:48" pos:end="468:52">esize</name></expr>;</expr_stmt>

                    </block_content>}</block></for> <if_stmt pos:start="470:23" pos:end="615:17"><else pos:start="470:23" pos:end="615:17">else <block pos:start="470:28" pos:end="615:17">{<block_content pos:start="474:25" pos:end="615:17">

                        <comment type="block" pos:start="472:25" pos:end="472:56">/* coded values + small noise */</comment>

                        <for pos:start="474:25" pos:end="615:17">for<control pos:start="474:28" pos:end="474:45">(<init pos:start="474:29" pos:end="474:34"><expr pos:start="474:29" pos:end="474:33"><name pos:start="474:29" pos:end="474:29">i</name> <operator pos:start="474:31" pos:end="474:31">=</operator> <literal type="number" pos:start="474:33" pos:end="474:33">0</literal></expr>;</init><condition pos:start="474:35" pos:end="474:40"><expr pos:start="474:35" pos:end="474:39"><name pos:start="474:35" pos:end="474:35">i</name> <operator pos:start="474:37" pos:end="474:37">&lt;</operator> <name pos:start="474:39" pos:end="474:39">n</name></expr>;</condition> <incr pos:start="474:42" pos:end="474:44"><expr pos:start="474:42" pos:end="474:44"><name pos:start="474:42" pos:end="474:42">i</name><operator pos:start="474:43" pos:end="474:44">++</operator></expr></incr>)</control> <block pos:start="474:47" pos:end="615:17">{<block_content pos:start="476:29" pos:end="615:17">

                            <expr_stmt pos:start="476:29" pos:end="476:67"><expr pos:start="476:29" pos:end="476:66"><name pos:start="476:29" pos:end="476:33">noise</name> <operator pos:start="476:35" pos:end="476:35">=</operator> <name pos:start="476:37" pos:end="476:66"><name pos:start="476:37" pos:end="476:37">s</name><operator pos:start="476:38" pos:end="476:39">-&gt;</operator><name pos:start="476:40" pos:end="476:50">noise_table</name><index pos:start="476:51" pos:end="476:66">[<expr pos:start="476:52" pos:end="476:65"><name pos:start="476:52" pos:end="476:65"><name pos:start="476:52" pos:end="476:52">s</name><operator pos:start="476:53" pos:end="476:54">-&gt;</operator><name pos:start="476:55" pos:end="476:65">noise_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="478:29" pos:end="478:89"><expr pos:start="478:29" pos:end="478:88"><name pos:start="478:29" pos:end="478:42"><name pos:start="478:29" pos:end="478:29">s</name><operator pos:start="478:30" pos:end="478:31">-&gt;</operator><name pos:start="478:32" pos:end="478:42">noise_index</name></name> <operator pos:start="478:44" pos:end="478:44">=</operator> <operator pos:start="478:46" pos:end="478:46">(</operator><name pos:start="478:47" pos:end="478:60"><name pos:start="478:47" pos:end="478:47">s</name><operator pos:start="478:48" pos:end="478:49">-&gt;</operator><name pos:start="478:50" pos:end="478:60">noise_index</name></name> <operator pos:start="478:62" pos:end="478:62">+</operator> <literal type="number" pos:start="478:64" pos:end="478:64">1</literal><operator pos:start="478:65" pos:end="478:65">)</operator> <operator pos:start="478:67" pos:end="478:67">&amp;</operator> <operator pos:start="478:69" pos:end="478:69">(</operator><name pos:start="478:70" pos:end="478:83">NOISE_TAB_SIZE</name> <operator pos:start="478:85" pos:end="478:85">-</operator> <literal type="number" pos:start="478:87" pos:end="478:87">1</literal><operator pos:start="478:88" pos:end="478:88">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="480:29" pos:end="482:66"><expr pos:start="480:29" pos:end="482:65"><operator pos:start="480:29" pos:end="480:29">*</operator><name pos:start="480:30" pos:end="480:34">coefs</name><operator pos:start="480:35" pos:end="480:36">++</operator> <operator pos:start="480:38" pos:end="480:38">=</operator> <operator pos:start="480:40" pos:end="480:40">(</operator><operator pos:start="480:41" pos:end="480:41">(</operator><operator pos:start="480:42" pos:end="480:42">*</operator><name pos:start="480:43" pos:end="480:48">coefs1</name><operator pos:start="480:49" pos:end="480:50">++</operator><operator pos:start="480:51" pos:end="480:51">)</operator> <operator pos:start="480:53" pos:end="480:53">+</operator> <name pos:start="480:55" pos:end="480:59">noise</name><operator pos:start="480:60" pos:end="480:60">)</operator> <operator pos:start="480:62" pos:end="480:62">*</operator>

                                <name pos:start="482:33" pos:end="482:58"><name pos:start="482:33" pos:end="482:41">exponents</name><index pos:start="482:42" pos:end="482:58">[<expr pos:start="482:43" pos:end="482:57"><name pos:start="482:43" pos:end="482:43">i</name><operator pos:start="482:44" pos:end="482:45">&lt;&lt;</operator><name pos:start="482:46" pos:end="482:50">bsize</name><operator pos:start="482:51" pos:end="482:52">&gt;&gt;</operator><name pos:start="482:53" pos:end="482:57">esize</name></expr>]</index></name> <operator pos:start="482:60" pos:end="482:60">*</operator> <name pos:start="482:62" pos:end="482:65">mult</name></expr>;</expr_stmt>


                        <expr_stmt pos:start="485:25" pos:end="485:53"><expr pos:start="485:25" pos:end="485:52"><name pos:start="485:25" pos:end="485:33">exponents</name> <operator pos:start="485:35" pos:end="485:36">+=</operator> <name pos:start="485:38" pos:end="485:38">n</name><operator pos:start="485:39" pos:end="485:40">&lt;&lt;</operator><name pos:start="485:41" pos:end="485:45">bsize</name><operator pos:start="485:46" pos:end="485:47">&gt;&gt;</operator><name pos:start="485:48" pos:end="485:52">esize</name></expr>;</expr_stmt>





                <comment type="block" pos:start="491:17" pos:end="491:45">/* very high freqs : noise */</comment>

                <expr_stmt pos:start="493:17" pos:end="493:55"><expr pos:start="493:17" pos:end="493:54"><name pos:start="493:17" pos:end="493:17">n</name> <operator pos:start="493:19" pos:end="493:19">=</operator> <name pos:start="493:21" pos:end="493:32"><name pos:start="493:21" pos:end="493:21">s</name><operator pos:start="493:22" pos:end="493:23">-&gt;</operator><name pos:start="493:24" pos:end="493:32">block_len</name></name> <operator pos:start="493:34" pos:end="493:34">-</operator> <name pos:start="493:36" pos:end="493:54"><name pos:start="493:36" pos:end="493:36">s</name><operator pos:start="493:37" pos:end="493:38">-&gt;</operator><name pos:start="493:39" pos:end="493:47">coefs_end</name><index pos:start="493:48" pos:end="493:54">[<expr pos:start="493:49" pos:end="493:53"><name pos:start="493:49" pos:end="493:53">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="495:17" pos:end="495:63"><expr pos:start="495:17" pos:end="495:62"><name pos:start="495:17" pos:end="495:21">mult1</name> <operator pos:start="495:23" pos:end="495:23">=</operator> <name pos:start="495:25" pos:end="495:28">mult</name> <operator pos:start="495:30" pos:end="495:30">*</operator> <name pos:start="495:32" pos:end="495:62"><name pos:start="495:32" pos:end="495:40">exponents</name><index pos:start="495:41" pos:end="495:62">[<expr pos:start="495:42" pos:end="495:61"><operator pos:start="495:42" pos:end="495:42">(</operator><operator pos:start="495:43" pos:end="495:43">(</operator><operator pos:start="495:44" pos:end="495:44">-</operator><literal type="number" pos:start="495:45" pos:end="495:45">1</literal><operator pos:start="495:46" pos:end="495:47">&lt;&lt;</operator><name pos:start="495:48" pos:end="495:52">bsize</name><operator pos:start="495:53" pos:end="495:53">)</operator><operator pos:start="495:54" pos:end="495:54">)</operator><operator pos:start="495:55" pos:end="495:56">&gt;&gt;</operator><name pos:start="495:57" pos:end="495:61">esize</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="497:17" pos:end="504:13">for<control pos:start="497:20" pos:end="497:38">(<init pos:start="497:21" pos:end="497:26"><expr pos:start="497:21" pos:end="497:25"><name pos:start="497:21" pos:end="497:21">i</name> <operator pos:start="497:23" pos:end="497:23">=</operator> <literal type="number" pos:start="497:25" pos:end="497:25">0</literal></expr>;</init> <condition pos:start="497:28" pos:end="497:33"><expr pos:start="497:28" pos:end="497:32"><name pos:start="497:28" pos:end="497:28">i</name> <operator pos:start="497:30" pos:end="497:30">&lt;</operator> <name pos:start="497:32" pos:end="497:32">n</name></expr>;</condition> <incr pos:start="497:35" pos:end="497:37"><expr pos:start="497:35" pos:end="497:37"><name pos:start="497:35" pos:end="497:35">i</name><operator pos:start="497:36" pos:end="497:37">++</operator></expr></incr>)</control> <block pos:start="497:40" pos:end="504:13">{<block_content pos:start="499:21" pos:end="501:81">

                    <expr_stmt pos:start="499:21" pos:end="499:70"><expr pos:start="499:21" pos:end="499:69"><operator pos:start="499:21" pos:end="499:21">*</operator><name pos:start="499:22" pos:end="499:26">coefs</name><operator pos:start="499:27" pos:end="499:28">++</operator> <operator pos:start="499:30" pos:end="499:30">=</operator> <name pos:start="499:32" pos:end="499:61"><name pos:start="499:32" pos:end="499:32">s</name><operator pos:start="499:33" pos:end="499:34">-&gt;</operator><name pos:start="499:35" pos:end="499:45">noise_table</name><index pos:start="499:46" pos:end="499:61">[<expr pos:start="499:47" pos:end="499:60"><name pos:start="499:47" pos:end="499:60"><name pos:start="499:47" pos:end="499:47">s</name><operator pos:start="499:48" pos:end="499:49">-&gt;</operator><name pos:start="499:50" pos:end="499:60">noise_index</name></name></expr>]</index></name> <operator pos:start="499:63" pos:end="499:63">*</operator> <name pos:start="499:65" pos:end="499:69">mult1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="501:21" pos:end="501:81"><expr pos:start="501:21" pos:end="501:80"><name pos:start="501:21" pos:end="501:34"><name pos:start="501:21" pos:end="501:21">s</name><operator pos:start="501:22" pos:end="501:23">-&gt;</operator><name pos:start="501:24" pos:end="501:34">noise_index</name></name> <operator pos:start="501:36" pos:end="501:36">=</operator> <operator pos:start="501:38" pos:end="501:38">(</operator><name pos:start="501:39" pos:end="501:52"><name pos:start="501:39" pos:end="501:39">s</name><operator pos:start="501:40" pos:end="501:41">-&gt;</operator><name pos:start="501:42" pos:end="501:52">noise_index</name></name> <operator pos:start="501:54" pos:end="501:54">+</operator> <literal type="number" pos:start="501:56" pos:end="501:56">1</literal><operator pos:start="501:57" pos:end="501:57">)</operator> <operator pos:start="501:59" pos:end="501:59">&amp;</operator> <operator pos:start="501:61" pos:end="501:61">(</operator><name pos:start="501:62" pos:end="501:75">NOISE_TAB_SIZE</name> <operator pos:start="501:77" pos:end="501:77">-</operator> <literal type="number" pos:start="501:79" pos:end="501:79">1</literal><operator pos:start="501:80" pos:end="501:80">)</operator></expr>;</expr_stmt>


            </block_content>}</block></for> <if_stmt pos:start="504:15" pos:end="615:17"><else pos:start="504:15" pos:end="615:17">else <block pos:start="504:20" pos:end="615:17">{<block_content pos:start="508:17" pos:end="615:17">

                <comment type="block" pos:start="506:17" pos:end="506:40">/* XXX: optimize more */</comment>

                <for pos:start="508:17" pos:end="510:35">for<control pos:start="508:20" pos:end="508:50">(<init pos:start="508:21" pos:end="508:26"><expr pos:start="508:21" pos:end="508:25"><name pos:start="508:21" pos:end="508:21">i</name> <operator pos:start="508:23" pos:end="508:23">=</operator> <literal type="number" pos:start="508:25" pos:end="508:25">0</literal></expr>;</init><condition pos:start="508:27" pos:end="508:45"><expr pos:start="508:27" pos:end="508:44"><name pos:start="508:27" pos:end="508:27">i</name> <operator pos:start="508:29" pos:end="508:29">&lt;</operator> <name pos:start="508:31" pos:end="508:44"><name pos:start="508:31" pos:end="508:31">s</name><operator pos:start="508:32" pos:end="508:33">-&gt;</operator><name pos:start="508:34" pos:end="508:44">coefs_start</name></name></expr>;</condition> <incr pos:start="508:47" pos:end="508:49"><expr pos:start="508:47" pos:end="508:49"><name pos:start="508:47" pos:end="508:47">i</name><operator pos:start="508:48" pos:end="508:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="510:21" pos:end="510:35"><block_content pos:start="510:21" pos:end="510:35">

                    <expr_stmt pos:start="510:21" pos:end="510:35"><expr pos:start="510:21" pos:end="510:34"><operator pos:start="510:21" pos:end="510:21">*</operator><name pos:start="510:22" pos:end="510:26">coefs</name><operator pos:start="510:27" pos:end="510:28">++</operator> <operator pos:start="510:30" pos:end="510:30">=</operator> <literal type="number" pos:start="510:32" pos:end="510:34">0.0</literal></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="512:17" pos:end="512:33"><expr pos:start="512:17" pos:end="512:32"><name pos:start="512:17" pos:end="512:17">n</name> <operator pos:start="512:19" pos:end="512:19">=</operator> <name pos:start="512:21" pos:end="512:32"><name pos:start="512:21" pos:end="512:28">nb_coefs</name><index pos:start="512:29" pos:end="512:32">[<expr pos:start="512:30" pos:end="512:31"><name pos:start="512:30" pos:end="512:31">ch</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="514:17" pos:end="615:17">for<control pos:start="514:20" pos:end="514:37">(<init pos:start="514:21" pos:end="514:26"><expr pos:start="514:21" pos:end="514:25"><name pos:start="514:21" pos:end="514:21">i</name> <operator pos:start="514:23" pos:end="514:23">=</operator> <literal type="number" pos:start="514:25" pos:end="514:25">0</literal></expr>;</init><condition pos:start="514:27" pos:end="514:32"><expr pos:start="514:27" pos:end="514:31"><name pos:start="514:27" pos:end="514:27">i</name> <operator pos:start="514:29" pos:end="514:29">&lt;</operator> <name pos:start="514:31" pos:end="514:31">n</name></expr>;</condition> <incr pos:start="514:34" pos:end="514:36"><expr pos:start="514:34" pos:end="514:36"><name pos:start="514:34" pos:end="514:34">i</name><operator pos:start="514:35" pos:end="514:36">++</operator></expr></incr>)</control> <block pos:start="514:39" pos:end="615:17">{<block_content pos:start="516:21" pos:end="615:17">

                    <expr_stmt pos:start="516:21" pos:end="516:77"><expr pos:start="516:21" pos:end="516:76"><operator pos:start="516:21" pos:end="516:21">*</operator><name pos:start="516:22" pos:end="516:26">coefs</name><operator pos:start="516:27" pos:end="516:28">++</operator> <operator pos:start="516:30" pos:end="516:30">=</operator> <name pos:start="516:32" pos:end="516:40"><name pos:start="516:32" pos:end="516:37">coefs1</name><index pos:start="516:38" pos:end="516:40">[<expr pos:start="516:39" pos:end="516:39"><name pos:start="516:39" pos:end="516:39">i</name></expr>]</index></name> <operator pos:start="516:42" pos:end="516:42">*</operator> <name pos:start="516:44" pos:end="516:69"><name pos:start="516:44" pos:end="516:52">exponents</name><index pos:start="516:53" pos:end="516:69">[<expr pos:start="516:54" pos:end="516:68"><name pos:start="516:54" pos:end="516:54">i</name><operator pos:start="516:55" pos:end="516:56">&lt;&lt;</operator><name pos:start="516:57" pos:end="516:61">bsize</name><operator pos:start="516:62" pos:end="516:63">&gt;&gt;</operator><name pos:start="516:64" pos:end="516:68">esize</name></expr>]</index></name> <operator pos:start="516:71" pos:end="516:71">*</operator> <name pos:start="516:73" pos:end="516:76">mult</name></expr>;</expr_stmt>


                <expr_stmt pos:start="519:17" pos:end="519:55"><expr pos:start="519:17" pos:end="519:54"><name pos:start="519:17" pos:end="519:17">n</name> <operator pos:start="519:19" pos:end="519:19">=</operator> <name pos:start="519:21" pos:end="519:32"><name pos:start="519:21" pos:end="519:21">s</name><operator pos:start="519:22" pos:end="519:23">-&gt;</operator><name pos:start="519:24" pos:end="519:32">block_len</name></name> <operator pos:start="519:34" pos:end="519:34">-</operator> <name pos:start="519:36" pos:end="519:54"><name pos:start="519:36" pos:end="519:36">s</name><operator pos:start="519:37" pos:end="519:38">-&gt;</operator><name pos:start="519:39" pos:end="519:47">coefs_end</name><index pos:start="519:48" pos:end="519:54">[<expr pos:start="519:49" pos:end="519:53"><name pos:start="519:49" pos:end="519:53">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="521:17" pos:end="531:0">for<control pos:start="521:20" pos:end="521:37">(<init pos:start="521:21" pos:end="521:26"><expr pos:start="521:21" pos:end="521:25"><name pos:start="521:21" pos:end="521:21">i</name> <operator pos:start="521:23" pos:end="521:23">=</operator> <literal type="number" pos:start="521:25" pos:end="521:25">0</literal></expr>;</init><condition pos:start="521:27" pos:end="521:32"><expr pos:start="521:27" pos:end="521:31"><name pos:start="521:27" pos:end="521:27">i</name> <operator pos:start="521:29" pos:end="521:29">&lt;</operator> <name pos:start="521:31" pos:end="521:31">n</name></expr>;</condition> <incr pos:start="521:34" pos:end="521:36"><expr pos:start="521:34" pos:end="521:36"><name pos:start="521:34" pos:end="521:34">i</name><operator pos:start="521:35" pos:end="521:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="523:21" pos:end="531:0"><block_content pos:start="523:21" pos:end="531:0">

                    <expr_stmt pos:start="523:21" pos:end="531:0"><expr pos:start="523:21" pos:end="523:34"><operator pos:start="523:21" pos:end="523:21">*</operator><name pos:start="523:22" pos:end="523:26">coefs</name><operator pos:start="523:27" pos:end="523:28">++</operator> <operator pos:start="523:30" pos:end="523:30">=</operator> <literal type="number" pos:start="523:32" pos:end="523:34">0.0</literal></expr>;</expr_stmt></block_content></block></for>






<cpp:ifdef pos:start="530:1" pos:end="530:12">#<cpp:directive pos:start="530:2" pos:end="530:6">ifdef</cpp:directive> <name pos:start="530:8" pos:end="530:12">TRACE</name></cpp:ifdef>

    <for pos:start="532:5" pos:end="615:17">for <control pos:start="532:9" pos:end="532:47">(<init pos:start="532:10" pos:end="532:16"><expr pos:start="532:10" pos:end="532:15"><name pos:start="532:10" pos:end="532:11">ch</name> <operator pos:start="532:13" pos:end="532:13">=</operator> <literal type="number" pos:start="532:15" pos:end="532:15">0</literal></expr>;</init> <condition pos:start="532:18" pos:end="532:41"><expr pos:start="532:18" pos:end="532:40"><name pos:start="532:18" pos:end="532:19">ch</name> <operator pos:start="532:21" pos:end="532:21">&lt;</operator> <name pos:start="532:23" pos:end="532:40"><name pos:start="532:23" pos:end="532:23">s</name><operator pos:start="532:24" pos:end="532:25">-&gt;</operator><name pos:start="532:26" pos:end="532:30">avctx</name><operator pos:start="532:31" pos:end="532:32">-&gt;</operator><name pos:start="532:33" pos:end="532:40">channels</name></name></expr>;</condition> <incr pos:start="532:43" pos:end="532:46"><expr pos:start="532:43" pos:end="532:46"><name pos:start="532:43" pos:end="532:44">ch</name><operator pos:start="532:45" pos:end="532:46">++</operator></expr></incr>)</control> <block pos:start="532:49" pos:end="615:17">{<block_content pos:start="534:9" pos:end="615:17">

        <if_stmt pos:start="534:9" pos:end="615:17"><if pos:start="534:9" pos:end="615:17">if <condition pos:start="534:12" pos:end="534:33">(<expr pos:start="534:13" pos:end="534:32"><name pos:start="534:13" pos:end="534:32"><name pos:start="534:13" pos:end="534:13">s</name><operator pos:start="534:14" pos:end="534:15">-&gt;</operator><name pos:start="534:16" pos:end="534:28">channel_coded</name><index pos:start="534:29" pos:end="534:32">[<expr pos:start="534:30" pos:end="534:31"><name pos:start="534:30" pos:end="534:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="534:35" pos:end="615:17">{<block_content pos:start="536:13" pos:end="615:17">

            <expr_stmt pos:start="536:13" pos:end="536:75"><expr pos:start="536:13" pos:end="536:74"><call pos:start="536:13" pos:end="536:74"><name pos:start="536:13" pos:end="536:23">dump_floats</name><argument_list pos:start="536:24" pos:end="536:74">(<argument pos:start="536:25" pos:end="536:25"><expr pos:start="536:25" pos:end="536:25"><name pos:start="536:25" pos:end="536:25">s</name></expr></argument>, <argument pos:start="536:28" pos:end="536:38"><expr pos:start="536:28" pos:end="536:38"><literal type="string" pos:start="536:28" pos:end="536:38">"exponents"</literal></expr></argument>, <argument pos:start="536:41" pos:end="536:41"><expr pos:start="536:41" pos:end="536:41"><literal type="number" pos:start="536:41" pos:end="536:41">3</literal></expr></argument>, <argument pos:start="536:44" pos:end="536:59"><expr pos:start="536:44" pos:end="536:59"><name pos:start="536:44" pos:end="536:59"><name pos:start="536:44" pos:end="536:44">s</name><operator pos:start="536:45" pos:end="536:46">-&gt;</operator><name pos:start="536:47" pos:end="536:55">exponents</name><index pos:start="536:56" pos:end="536:59">[<expr pos:start="536:57" pos:end="536:58"><name pos:start="536:57" pos:end="536:58">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="536:62" pos:end="536:73"><expr pos:start="536:62" pos:end="536:73"><name pos:start="536:62" pos:end="536:73"><name pos:start="536:62" pos:end="536:62">s</name><operator pos:start="536:63" pos:end="536:64">-&gt;</operator><name pos:start="536:65" pos:end="536:73">block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="538:13" pos:end="543:0"><expr pos:start="538:13" pos:end="538:66"><call pos:start="538:13" pos:end="538:66"><name pos:start="538:13" pos:end="538:23">dump_floats</name><argument_list pos:start="538:24" pos:end="538:66">(<argument pos:start="538:25" pos:end="538:25"><expr pos:start="538:25" pos:end="538:25"><name pos:start="538:25" pos:end="538:25">s</name></expr></argument>, <argument pos:start="538:28" pos:end="538:34"><expr pos:start="538:28" pos:end="538:34"><literal type="string" pos:start="538:28" pos:end="538:34">"coefs"</literal></expr></argument>, <argument pos:start="538:37" pos:end="538:37"><expr pos:start="538:37" pos:end="538:37"><literal type="number" pos:start="538:37" pos:end="538:37">1</literal></expr></argument>, <argument pos:start="538:40" pos:end="538:51"><expr pos:start="538:40" pos:end="538:51"><name pos:start="538:40" pos:end="538:51"><name pos:start="538:40" pos:end="538:40">s</name><operator pos:start="538:41" pos:end="538:42">-&gt;</operator><name pos:start="538:43" pos:end="538:47">coefs</name><index pos:start="538:48" pos:end="538:51">[<expr pos:start="538:49" pos:end="538:50"><name pos:start="538:49" pos:end="538:50">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="538:54" pos:end="538:65"><expr pos:start="538:54" pos:end="538:65"><name pos:start="538:54" pos:end="538:65"><name pos:start="538:54" pos:end="538:54">s</name><operator pos:start="538:55" pos:end="538:56">-&gt;</operator><name pos:start="538:57" pos:end="538:65">block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:endif pos:start="542:1" pos:end="542:6">#<cpp:directive pos:start="542:2" pos:end="542:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="546:5" pos:end="615:17"><if pos:start="546:5" pos:end="615:17">if <condition pos:start="546:8" pos:end="546:44">(<expr pos:start="546:9" pos:end="546:43"><name pos:start="546:9" pos:end="546:20"><name pos:start="546:9" pos:end="546:9">s</name><operator pos:start="546:10" pos:end="546:11">-&gt;</operator><name pos:start="546:12" pos:end="546:20">ms_stereo</name></name> <operator pos:start="546:22" pos:end="546:23">&amp;&amp;</operator> <name pos:start="546:25" pos:end="546:43"><name pos:start="546:25" pos:end="546:25">s</name><operator pos:start="546:26" pos:end="546:27">-&gt;</operator><name pos:start="546:28" pos:end="546:40">channel_coded</name><index pos:start="546:41" pos:end="546:43">[<expr pos:start="546:42" pos:end="546:42"><literal type="number" pos:start="546:42" pos:end="546:42">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="546:46" pos:end="615:17">{<block_content pos:start="554:9" pos:end="615:17">

        <comment type="block" pos:start="548:9" pos:end="548:62">/* nominal case for ms stereo: we do it before mdct */</comment>

        <comment type="block" pos:start="550:9" pos:end="552:26">/* no need to optimize this case because it should almost

           never happen */</comment>

        <if_stmt pos:start="554:9" pos:end="615:17"><if pos:start="554:9" pos:end="615:17">if <condition pos:start="554:12" pos:end="554:33">(<expr pos:start="554:13" pos:end="554:32"><operator pos:start="554:13" pos:end="554:13">!</operator><name pos:start="554:14" pos:end="554:32"><name pos:start="554:14" pos:end="554:14">s</name><operator pos:start="554:15" pos:end="554:16">-&gt;</operator><name pos:start="554:17" pos:end="554:29">channel_coded</name><index pos:start="554:30" pos:end="554:32">[<expr pos:start="554:31" pos:end="554:31"><literal type="number" pos:start="554:31" pos:end="554:31">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="554:35" pos:end="615:17">{<block_content pos:start="556:13" pos:end="615:17">

            <expr_stmt pos:start="556:13" pos:end="556:64"><expr pos:start="556:13" pos:end="556:63"><call pos:start="556:13" pos:end="556:63"><name pos:start="556:13" pos:end="556:19">tprintf</name><argument_list pos:start="556:20" pos:end="556:63">(<argument pos:start="556:21" pos:end="556:28"><expr pos:start="556:21" pos:end="556:28"><name pos:start="556:21" pos:end="556:28"><name pos:start="556:21" pos:end="556:21">s</name><operator pos:start="556:22" pos:end="556:23">-&gt;</operator><name pos:start="556:24" pos:end="556:28">avctx</name></name></expr></argument>, <argument pos:start="556:31" pos:end="556:62"><expr pos:start="556:31" pos:end="556:62"><literal type="string" pos:start="556:31" pos:end="556:62">"rare ms-stereo case happened\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="558:13" pos:end="558:65"><expr pos:start="558:13" pos:end="558:64"><call pos:start="558:13" pos:end="558:64"><name pos:start="558:13" pos:end="558:18">memset</name><argument_list pos:start="558:19" pos:end="558:64">(<argument pos:start="558:20" pos:end="558:30"><expr pos:start="558:20" pos:end="558:30"><name pos:start="558:20" pos:end="558:30"><name pos:start="558:20" pos:end="558:20">s</name><operator pos:start="558:21" pos:end="558:22">-&gt;</operator><name pos:start="558:23" pos:end="558:27">coefs</name><index pos:start="558:28" pos:end="558:30">[<expr pos:start="558:29" pos:end="558:29"><literal type="number" pos:start="558:29" pos:end="558:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="558:33" pos:end="558:33"><expr pos:start="558:33" pos:end="558:33"><literal type="number" pos:start="558:33" pos:end="558:33">0</literal></expr></argument>, <argument pos:start="558:36" pos:end="558:63"><expr pos:start="558:36" pos:end="558:63"><sizeof pos:start="558:36" pos:end="558:48">sizeof<argument_list pos:start="558:42" pos:end="558:48">(<argument pos:start="558:43" pos:end="558:47"><expr pos:start="558:43" pos:end="558:47"><name pos:start="558:43" pos:end="558:47">float</name></expr></argument>)</argument_list></sizeof> <operator pos:start="558:50" pos:end="558:50">*</operator> <name pos:start="558:52" pos:end="558:63"><name pos:start="558:52" pos:end="558:52">s</name><operator pos:start="558:53" pos:end="558:54">-&gt;</operator><name pos:start="558:55" pos:end="558:63">block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="560:13" pos:end="560:36"><expr pos:start="560:13" pos:end="560:35"><name pos:start="560:13" pos:end="560:31"><name pos:start="560:13" pos:end="560:13">s</name><operator pos:start="560:14" pos:end="560:15">-&gt;</operator><name pos:start="560:16" pos:end="560:28">channel_coded</name><index pos:start="560:29" pos:end="560:31">[<expr pos:start="560:30" pos:end="560:30"><literal type="number" pos:start="560:30" pos:end="560:30">0</literal></expr>]</index></name> <operator pos:start="560:33" pos:end="560:33">=</operator> <literal type="number" pos:start="560:35" pos:end="560:35">1</literal></expr>;</expr_stmt>




        <expr_stmt pos:start="565:9" pos:end="565:74"><expr pos:start="565:9" pos:end="565:73"><call pos:start="565:9" pos:end="565:73"><name pos:start="565:9" pos:end="565:33"><name pos:start="565:9" pos:end="565:9">s</name><operator pos:start="565:10" pos:end="565:11">-&gt;</operator><name pos:start="565:12" pos:end="565:15">fdsp</name><operator pos:start="565:16" pos:end="565:16">.</operator><name pos:start="565:17" pos:end="565:33">butterflies_float</name></name><argument_list pos:start="565:34" pos:end="565:73">(<argument pos:start="565:35" pos:end="565:45"><expr pos:start="565:35" pos:end="565:45"><name pos:start="565:35" pos:end="565:45"><name pos:start="565:35" pos:end="565:35">s</name><operator pos:start="565:36" pos:end="565:37">-&gt;</operator><name pos:start="565:38" pos:end="565:42">coefs</name><index pos:start="565:43" pos:end="565:45">[<expr pos:start="565:44" pos:end="565:44"><literal type="number" pos:start="565:44" pos:end="565:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="565:48" pos:end="565:58"><expr pos:start="565:48" pos:end="565:58"><name pos:start="565:48" pos:end="565:58"><name pos:start="565:48" pos:end="565:48">s</name><operator pos:start="565:49" pos:end="565:50">-&gt;</operator><name pos:start="565:51" pos:end="565:55">coefs</name><index pos:start="565:56" pos:end="565:58">[<expr pos:start="565:57" pos:end="565:57"><literal type="number" pos:start="565:57" pos:end="565:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="565:61" pos:end="565:72"><expr pos:start="565:61" pos:end="565:72"><name pos:start="565:61" pos:end="565:72"><name pos:start="565:61" pos:end="565:61">s</name><operator pos:start="565:62" pos:end="565:63">-&gt;</operator><name pos:start="565:64" pos:end="565:72">block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




<label pos:start="570:1" pos:end="570:5"><name pos:start="570:1" pos:end="570:4">next</name>:</label>

    <expr_stmt pos:start="572:5" pos:end="572:31"><expr pos:start="572:5" pos:end="572:30"><name pos:start="572:5" pos:end="572:8">mdct</name> <operator pos:start="572:10" pos:end="572:10">=</operator> <operator pos:start="572:12" pos:end="572:12">&amp;</operator><name pos:start="572:13" pos:end="572:30"><name pos:start="572:13" pos:end="572:13">s</name><operator pos:start="572:14" pos:end="572:15">-&gt;</operator><name pos:start="572:16" pos:end="572:23">mdct_ctx</name><index pos:start="572:24" pos:end="572:30">[<expr pos:start="572:25" pos:end="572:29"><name pos:start="572:25" pos:end="572:29">bsize</name></expr>]</index></name></expr>;</expr_stmt>



    <for pos:start="576:5" pos:end="615:17">for <control pos:start="576:9" pos:end="576:47">(<init pos:start="576:10" pos:end="576:16"><expr pos:start="576:10" pos:end="576:15"><name pos:start="576:10" pos:end="576:11">ch</name> <operator pos:start="576:13" pos:end="576:13">=</operator> <literal type="number" pos:start="576:15" pos:end="576:15">0</literal></expr>;</init> <condition pos:start="576:18" pos:end="576:41"><expr pos:start="576:18" pos:end="576:40"><name pos:start="576:18" pos:end="576:19">ch</name> <operator pos:start="576:21" pos:end="576:21">&lt;</operator> <name pos:start="576:23" pos:end="576:40"><name pos:start="576:23" pos:end="576:23">s</name><operator pos:start="576:24" pos:end="576:25">-&gt;</operator><name pos:start="576:26" pos:end="576:30">avctx</name><operator pos:start="576:31" pos:end="576:32">-&gt;</operator><name pos:start="576:33" pos:end="576:40">channels</name></name></expr>;</condition> <incr pos:start="576:43" pos:end="576:46"><expr pos:start="576:43" pos:end="576:46"><name pos:start="576:43" pos:end="576:44">ch</name><operator pos:start="576:45" pos:end="576:46">++</operator></expr></incr>)</control> <block pos:start="576:49" pos:end="615:17">{<block_content pos:start="578:9" pos:end="615:17">

        <decl_stmt pos:start="578:9" pos:end="578:22"><decl pos:start="578:9" pos:end="578:14"><type pos:start="578:9" pos:end="578:11"><name pos:start="578:9" pos:end="578:11">int</name></type> <name pos:start="578:13" pos:end="578:14">n4</name></decl>, <decl pos:start="578:17" pos:end="578:21"><type ref="prev" pos:start="578:9" pos:end="578:11"/><name pos:start="578:17" pos:end="578:21">index</name></decl>;</decl_stmt>



        <expr_stmt pos:start="582:9" pos:end="582:30"><expr pos:start="582:9" pos:end="582:29"><name pos:start="582:9" pos:end="582:10">n4</name> <operator pos:start="582:12" pos:end="582:12">=</operator> <name pos:start="582:14" pos:end="582:25"><name pos:start="582:14" pos:end="582:14">s</name><operator pos:start="582:15" pos:end="582:16">-&gt;</operator><name pos:start="582:17" pos:end="582:25">block_len</name></name> <operator pos:start="582:27" pos:end="582:27">/</operator> <literal type="number" pos:start="582:29" pos:end="582:29">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="584:9" pos:end="590:52"><if pos:start="584:9" pos:end="588:9">if<condition pos:start="584:11" pos:end="584:32">(<expr pos:start="584:12" pos:end="584:31"><name pos:start="584:12" pos:end="584:31"><name pos:start="584:12" pos:end="584:12">s</name><operator pos:start="584:13" pos:end="584:14">-&gt;</operator><name pos:start="584:15" pos:end="584:27">channel_coded</name><index pos:start="584:28" pos:end="584:31">[<expr pos:start="584:29" pos:end="584:30"><name pos:start="584:29" pos:end="584:30">ch</name></expr>]</index></name></expr>)</condition><block pos:start="584:33" pos:end="588:9">{<block_content pos:start="586:13" pos:end="586:60">

            <expr_stmt pos:start="586:13" pos:end="586:60"><expr pos:start="586:13" pos:end="586:59"><call pos:start="586:13" pos:end="586:59"><name pos:start="586:13" pos:end="586:28"><name pos:start="586:13" pos:end="586:16">mdct</name><operator pos:start="586:17" pos:end="586:18">-&gt;</operator><name pos:start="586:19" pos:end="586:28">imdct_calc</name></name><argument_list pos:start="586:29" pos:end="586:59">(<argument pos:start="586:30" pos:end="586:33"><expr pos:start="586:30" pos:end="586:33"><name pos:start="586:30" pos:end="586:33">mdct</name></expr></argument>, <argument pos:start="586:36" pos:end="586:44"><expr pos:start="586:36" pos:end="586:44"><name pos:start="586:36" pos:end="586:44"><name pos:start="586:36" pos:end="586:36">s</name><operator pos:start="586:37" pos:end="586:38">-&gt;</operator><name pos:start="586:39" pos:end="586:44">output</name></name></expr></argument>, <argument pos:start="586:47" pos:end="586:58"><expr pos:start="586:47" pos:end="586:58"><name pos:start="586:47" pos:end="586:58"><name pos:start="586:47" pos:end="586:47">s</name><operator pos:start="586:48" pos:end="586:49">-&gt;</operator><name pos:start="586:50" pos:end="586:54">coefs</name><index pos:start="586:55" pos:end="586:58">[<expr pos:start="586:56" pos:end="586:57"><name pos:start="586:56" pos:end="586:57">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="588:10" pos:end="590:52">else if<condition pos:start="588:17" pos:end="588:42">(<expr pos:start="588:18" pos:end="588:41"><operator pos:start="588:18" pos:end="588:18">!</operator><operator pos:start="588:19" pos:end="588:19">(</operator><name pos:start="588:20" pos:end="588:31"><name pos:start="588:20" pos:end="588:20">s</name><operator pos:start="588:21" pos:end="588:22">-&gt;</operator><name pos:start="588:23" pos:end="588:31">ms_stereo</name></name> <operator pos:start="588:33" pos:end="588:34">&amp;&amp;</operator> <name pos:start="588:36" pos:end="588:37">ch</name><operator pos:start="588:38" pos:end="588:39">==</operator><literal type="number" pos:start="588:40" pos:end="588:40">1</literal><operator pos:start="588:41" pos:end="588:41">)</operator></expr>)</condition><block type="pseudo" pos:start="590:13" pos:end="590:52"><block_content pos:start="590:13" pos:end="590:52">

            <expr_stmt pos:start="590:13" pos:end="590:52"><expr pos:start="590:13" pos:end="590:51"><call pos:start="590:13" pos:end="590:51"><name pos:start="590:13" pos:end="590:18">memset</name><argument_list pos:start="590:19" pos:end="590:51">(<argument pos:start="590:20" pos:end="590:28"><expr pos:start="590:20" pos:end="590:28"><name pos:start="590:20" pos:end="590:28"><name pos:start="590:20" pos:end="590:20">s</name><operator pos:start="590:21" pos:end="590:22">-&gt;</operator><name pos:start="590:23" pos:end="590:28">output</name></name></expr></argument>, <argument pos:start="590:31" pos:end="590:31"><expr pos:start="590:31" pos:end="590:31"><literal type="number" pos:start="590:31" pos:end="590:31">0</literal></expr></argument>, <argument pos:start="590:34" pos:end="590:50"><expr pos:start="590:34" pos:end="590:50"><sizeof pos:start="590:34" pos:end="590:50">sizeof<argument_list pos:start="590:40" pos:end="590:50">(<argument pos:start="590:41" pos:end="590:49"><expr pos:start="590:41" pos:end="590:49"><name pos:start="590:41" pos:end="590:49"><name pos:start="590:41" pos:end="590:41">s</name><operator pos:start="590:42" pos:end="590:43">-&gt;</operator><name pos:start="590:44" pos:end="590:49">output</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="594:9" pos:end="594:57">/* multiply by the window and add in the frame */</comment>

        <expr_stmt pos:start="596:9" pos:end="596:55"><expr pos:start="596:9" pos:end="596:54"><name pos:start="596:9" pos:end="596:13">index</name> <operator pos:start="596:15" pos:end="596:15">=</operator> <operator pos:start="596:17" pos:end="596:17">(</operator><name pos:start="596:18" pos:end="596:29"><name pos:start="596:18" pos:end="596:18">s</name><operator pos:start="596:19" pos:end="596:20">-&gt;</operator><name pos:start="596:21" pos:end="596:29">frame_len</name></name> <operator pos:start="596:31" pos:end="596:31">/</operator> <literal type="number" pos:start="596:33" pos:end="596:33">2</literal><operator pos:start="596:34" pos:end="596:34">)</operator> <operator pos:start="596:36" pos:end="596:36">+</operator> <name pos:start="596:38" pos:end="596:49"><name pos:start="596:38" pos:end="596:38">s</name><operator pos:start="596:39" pos:end="596:40">-&gt;</operator><name pos:start="596:41" pos:end="596:49">block_pos</name></name> <operator pos:start="596:51" pos:end="596:51">-</operator> <name pos:start="596:53" pos:end="596:54">n4</name></expr>;</expr_stmt>

        <expr_stmt pos:start="598:9" pos:end="598:48"><expr pos:start="598:9" pos:end="598:47"><call pos:start="598:9" pos:end="598:47"><name pos:start="598:9" pos:end="598:18">wma_window</name><argument_list pos:start="598:19" pos:end="598:47">(<argument pos:start="598:20" pos:end="598:20"><expr pos:start="598:20" pos:end="598:20"><name pos:start="598:20" pos:end="598:20">s</name></expr></argument>, <argument pos:start="598:23" pos:end="598:46"><expr pos:start="598:23" pos:end="598:46"><operator pos:start="598:23" pos:end="598:23">&amp;</operator><name pos:start="598:24" pos:end="598:46"><name pos:start="598:24" pos:end="598:24">s</name><operator pos:start="598:25" pos:end="598:26">-&gt;</operator><name pos:start="598:27" pos:end="598:35">frame_out</name><index pos:start="598:36" pos:end="598:39">[<expr pos:start="598:37" pos:end="598:38"><name pos:start="598:37" pos:end="598:38">ch</name></expr>]</index><index pos:start="598:40" pos:end="598:46">[<expr pos:start="598:41" pos:end="598:45"><name pos:start="598:41" pos:end="598:45">index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="603:5" pos:end="603:29">/* update block number */</comment>

    <expr_stmt pos:start="605:5" pos:end="605:19"><expr pos:start="605:5" pos:end="605:18"><name pos:start="605:5" pos:end="605:16"><name pos:start="605:5" pos:end="605:5">s</name><operator pos:start="605:6" pos:end="605:7">-&gt;</operator><name pos:start="605:8" pos:end="605:16">block_num</name></name><operator pos:start="605:17" pos:end="605:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="607:5" pos:end="607:33"><expr pos:start="607:5" pos:end="607:32"><name pos:start="607:5" pos:end="607:16"><name pos:start="607:5" pos:end="607:5">s</name><operator pos:start="607:6" pos:end="607:7">-&gt;</operator><name pos:start="607:8" pos:end="607:16">block_pos</name></name> <operator pos:start="607:18" pos:end="607:19">+=</operator> <name pos:start="607:21" pos:end="607:32"><name pos:start="607:21" pos:end="607:21">s</name><operator pos:start="607:22" pos:end="607:23">-&gt;</operator><name pos:start="607:24" pos:end="607:32">block_len</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="609:5" pos:end="615:17"><if pos:start="609:5" pos:end="611:17">if <condition pos:start="609:8" pos:end="609:37">(<expr pos:start="609:9" pos:end="609:36"><name pos:start="609:9" pos:end="609:20"><name pos:start="609:9" pos:end="609:9">s</name><operator pos:start="609:10" pos:end="609:11">-&gt;</operator><name pos:start="609:12" pos:end="609:20">block_pos</name></name> <operator pos:start="609:22" pos:end="609:23">&gt;=</operator> <name pos:start="609:25" pos:end="609:36"><name pos:start="609:25" pos:end="609:25">s</name><operator pos:start="609:26" pos:end="609:27">-&gt;</operator><name pos:start="609:28" pos:end="609:36">frame_len</name></name></expr>)</condition><block type="pseudo" pos:start="611:9" pos:end="611:17"><block_content pos:start="611:9" pos:end="611:17">

        <return pos:start="611:9" pos:end="611:17">return <expr pos:start="611:16" pos:end="611:16"><literal type="number" pos:start="611:16" pos:end="611:16">1</literal></expr>;</return></block_content></block></if>

    <else pos:start="613:5" pos:end="615:17">else<block type="pseudo" pos:start="615:9" pos:end="615:17"><block_content pos:start="615:9" pos:end="615:17">

        <return pos:start="615:9" pos:end="615:17">return <expr pos:start="615:16" pos:end="615:16"><literal type="number" pos:start="615:16" pos:end="615:16">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></else></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
