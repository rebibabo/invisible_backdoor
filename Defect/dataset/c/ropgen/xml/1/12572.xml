<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12572.c" pos:tabs="8"><function pos:start="1:1" pos:end="495:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ppc_spapr_init</name><parameter_list pos:start="1:27" pos:end="1:53">(<parameter pos:start="1:28" pos:end="1:52"><decl pos:start="1:28" pos:end="1:52"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:46">QEMUMachineInitArgs</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="495:1">{<block_content pos:start="5:5" pos:end="493:36">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:53">= <expr pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:37">args</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:55">= <expr pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:38">args</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:47">= <expr pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:34">args</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:47">boot_device</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">PowerPCCPU</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:19">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">CPUPPCState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">PCIHostState</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">phb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:47"><decl pos:start="25:5" pos:end="25:46"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:24">sysmem</name> <init pos:start="25:26" pos:end="25:46">= <expr pos:start="25:28" pos:end="25:46"><call pos:start="25:28" pos:end="25:46"><name pos:start="25:28" pos:end="25:44">get_system_memory</name><argument_list pos:start="25:45" pos:end="25:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:47"><decl pos:start="27:5" pos:end="27:46"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:21">ram</name> <init pos:start="27:23" pos:end="27:46">= <expr pos:start="27:25" pos:end="27:46"><call pos:start="27:25" pos:end="27:46"><name pos:start="27:25" pos:end="27:29">g_new</name><argument_list pos:start="27:30" pos:end="27:46">(<argument pos:start="27:31" pos:end="27:42"><expr pos:start="27:31" pos:end="27:42"><name pos:start="27:31" pos:end="27:42">MemoryRegion</name></expr></argument>, <argument pos:start="27:45" pos:end="27:45"><expr pos:start="27:45" pos:end="27:45"><literal type="number" pos:start="27:45" pos:end="27:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:10">hwaddr</name></type> <name pos:start="29:12" pos:end="29:25">rma_alloc_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:29"><decl pos:start="31:5" pos:end="31:28"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">uint32_t</name></type> <name pos:start="31:14" pos:end="31:24">initrd_base</name> <init pos:start="31:26" pos:end="31:28">= <expr pos:start="31:28" pos:end="31:28"><literal type="number" pos:start="31:28" pos:end="31:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:42"><decl pos:start="33:5" pos:end="33:24"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">long</name></type> <name pos:start="33:10" pos:end="33:20">kernel_size</name> <init pos:start="33:22" pos:end="33:24">= <expr pos:start="33:24" pos:end="33:24"><literal type="number" pos:start="33:24" pos:end="33:24">0</literal></expr></init></decl>, <decl pos:start="33:27" pos:end="33:41"><type ref="prev" pos:start="33:5" pos:end="33:8"/><name pos:start="33:27" pos:end="33:37">initrd_size</name> <init pos:start="33:39" pos:end="33:41">= <expr pos:start="33:41" pos:end="33:41"><literal type="number" pos:start="33:41" pos:end="33:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:41"><decl pos:start="35:5" pos:end="35:19"><type pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:8">long</name></type> <name pos:start="35:10" pos:end="35:19">load_limit</name></decl>, <decl pos:start="35:22" pos:end="35:31"><type ref="prev" pos:start="35:5" pos:end="35:8"/><name pos:start="35:22" pos:end="35:31">rtas_limit</name></decl>, <decl pos:start="35:34" pos:end="35:40"><type ref="prev" pos:start="35:5" pos:end="35:8"/><name pos:start="35:34" pos:end="35:40">fw_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:19"><decl pos:start="37:5" pos:end="37:18"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:8">char</name> <modifier pos:start="37:10" pos:end="37:10">*</modifier></type><name pos:start="37:11" pos:end="37:18">filename</name></decl>;</decl_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:17">msi_supported</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:24">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:38"><expr pos:start="45:5" pos:end="45:37"><name pos:start="45:5" pos:end="45:9">spapr</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:37"><name pos:start="45:13" pos:end="45:21">g_malloc0</name><argument_list pos:start="45:22" pos:end="45:37">(<argument pos:start="45:23" pos:end="45:36"><expr pos:start="45:23" pos:end="45:36"><sizeof pos:start="45:23" pos:end="45:36">sizeof<argument_list pos:start="45:29" pos:end="45:36">(<argument pos:start="45:30" pos:end="45:35"><expr pos:start="45:30" pos:end="45:35"><operator pos:start="45:30" pos:end="45:30">*</operator><name pos:start="45:31" pos:end="45:35">spapr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><call pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:14">QLIST_INIT</name><argument_list pos:start="47:15" pos:end="47:28">(<argument pos:start="47:16" pos:end="47:27"><expr pos:start="47:16" pos:end="47:27"><operator pos:start="47:16" pos:end="47:16">&amp;</operator><name pos:start="47:17" pos:end="47:27"><name pos:start="47:17" pos:end="47:21">spapr</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:27">phbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:21">cpu_ppc_hypercall</name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:47">emulate_spapr_hypercall</name></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:35">/* Allocate RMA if necessary */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:63"><expr pos:start="57:5" pos:end="57:62"><name pos:start="57:5" pos:end="57:18">rma_alloc_size</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <call pos:start="57:22" pos:end="57:62"><name pos:start="57:22" pos:end="57:37">kvmppc_alloc_rma</name><argument_list pos:start="57:38" pos:end="57:62">(<argument pos:start="57:39" pos:end="57:53"><expr pos:start="57:39" pos:end="57:53"><literal type="string" pos:start="57:39" pos:end="57:53">"ppc_spapr.rma"</literal></expr></argument>, <argument pos:start="57:56" pos:end="57:61"><expr pos:start="57:56" pos:end="57:61"><name pos:start="57:56" pos:end="57:61">sysmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:29">(<expr pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:22">rma_alloc_size</name> <operator pos:start="61:24" pos:end="61:25">==</operator> <operator pos:start="61:27" pos:end="61:27">-</operator><literal type="number" pos:start="61:28" pos:end="61:28">1</literal></expr>)</condition> <block pos:start="61:31" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:16">

        <expr_stmt pos:start="63:9" pos:end="63:49"><expr pos:start="63:9" pos:end="63:48"><call pos:start="63:9" pos:end="63:48"><name pos:start="63:9" pos:end="63:16">hw_error</name><argument_list pos:start="63:17" pos:end="63:48">(<argument pos:start="63:18" pos:end="63:47"><expr pos:start="63:18" pos:end="63:47"><literal type="string" pos:start="63:18" pos:end="63:47">"qemu: Unable to create RMA\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:16"><expr pos:start="65:9" pos:end="65:15"><call pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:12">exit</name><argument_list pos:start="65:13" pos:end="65:15">(<argument pos:start="65:14" pos:end="65:14"><expr pos:start="65:14" pos:end="65:14"><literal type="number" pos:start="65:14" pos:end="65:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="107:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:54">(<expr pos:start="71:9" pos:end="71:53"><name pos:start="71:9" pos:end="71:22">rma_alloc_size</name> <operator pos:start="71:24" pos:end="71:25">&amp;&amp;</operator> <operator pos:start="71:27" pos:end="71:27">(</operator><name pos:start="71:28" pos:end="71:41">rma_alloc_size</name> <operator pos:start="71:43" pos:end="71:43">&lt;</operator> <name pos:start="71:45" pos:end="71:52">ram_size</name><operator pos:start="71:53" pos:end="71:53">)</operator></expr>)</condition> <block pos:start="71:56" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:41">

        <expr_stmt pos:start="73:9" pos:end="73:41"><expr pos:start="73:9" pos:end="73:40"><name pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:13">spapr</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:23">rma_size</name></name> <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:40">rma_alloc_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="107:5">else <block pos:start="75:12" pos:end="107:5">{<block_content pos:start="77:9" pos:end="105:9">

        <expr_stmt pos:start="77:9" pos:end="77:35"><expr pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:13">spapr</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:23">rma_size</name></name> <operator pos:start="77:25" pos:end="77:25">=</operator> <name pos:start="77:27" pos:end="77:34">ram_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="81:9" pos:end="97:11">/* With KVM, we don't actually know whether KVM supports an

         * unbounded RMA (PR KVM) or is limited by the hash table size

         * (HV KVM using VRMA), so we always assume the latter

         *

         * In that case, we also limit the initial allocations for RTAS

         * etc... to 256M since we have no way to know what the VRMA size

         * is going to be as it depends on the size of the hash table

         * isn't determined yet.

         */</comment>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:26">(<expr pos:start="99:13" pos:end="99:25"><call pos:start="99:13" pos:end="99:25"><name pos:start="99:13" pos:end="99:23">kvm_enabled</name><argument_list pos:start="99:24" pos:end="99:25">()</argument_list></call></expr>)</condition> <block pos:start="99:28" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:63">

            <expr_stmt pos:start="101:13" pos:end="101:35"><expr pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:17">spapr</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:30">vrma_adjust</name></name> <operator pos:start="101:32" pos:end="101:32">=</operator> <literal type="number" pos:start="101:34" pos:end="101:34">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:63"><expr pos:start="103:13" pos:end="103:62"><name pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:17">spapr</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:27">rma_size</name></name> <operator pos:start="103:29" pos:end="103:29">=</operator> <call pos:start="103:31" pos:end="103:62"><name pos:start="103:31" pos:end="103:33">MIN</name><argument_list pos:start="103:34" pos:end="103:62">(<argument pos:start="103:35" pos:end="103:49"><expr pos:start="103:35" pos:end="103:49"><name pos:start="103:35" pos:end="103:49"><name pos:start="103:35" pos:end="103:39">spapr</name><operator pos:start="103:40" pos:end="103:41">-&gt;</operator><name pos:start="103:42" pos:end="103:49">rma_size</name></name></expr></argument>, <argument pos:start="103:52" pos:end="103:61"><expr pos:start="103:52" pos:end="103:61"><literal type="number" pos:start="103:52" pos:end="103:61">0x10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="115:59">/* We place the device tree and RTAS just below either the top of the RMA,

     * or just below 2GB, whichever is lowere, so that it can be

     * processed with 32-bit real mode code if necessary */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:50"><expr pos:start="117:5" pos:end="117:49"><name pos:start="117:5" pos:end="117:14">rtas_limit</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <call pos:start="117:18" pos:end="117:49"><name pos:start="117:18" pos:end="117:20">MIN</name><argument_list pos:start="117:21" pos:end="117:49">(<argument pos:start="117:22" pos:end="117:36"><expr pos:start="117:22" pos:end="117:36"><name pos:start="117:22" pos:end="117:36"><name pos:start="117:22" pos:end="117:26">spapr</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:36">rma_size</name></name></expr></argument>, <argument pos:start="117:39" pos:end="117:48"><expr pos:start="117:39" pos:end="117:48"><literal type="number" pos:start="117:39" pos:end="117:48">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:50"><expr pos:start="119:5" pos:end="119:49"><name pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:9">spapr</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:20">rtas_addr</name></name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:33">rtas_limit</name> <operator pos:start="119:35" pos:end="119:35">-</operator> <name pos:start="119:37" pos:end="119:49">RTAS_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:54"><expr pos:start="121:5" pos:end="121:53"><name pos:start="121:5" pos:end="121:19"><name pos:start="121:5" pos:end="121:9">spapr</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:19">fdt_addr</name></name> <operator pos:start="121:21" pos:end="121:21">=</operator> <name pos:start="121:23" pos:end="121:38"><name pos:start="121:23" pos:end="121:27">spapr</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:38">rtas_addr</name></name> <operator pos:start="121:40" pos:end="121:40">-</operator> <name pos:start="121:42" pos:end="121:53">FDT_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:47"><expr pos:start="123:5" pos:end="123:46"><name pos:start="123:5" pos:end="123:14">load_limit</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <name pos:start="123:18" pos:end="123:32"><name pos:start="123:18" pos:end="123:22">spapr</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:32">fdt_addr</name></name> <operator pos:start="123:34" pos:end="123:34">-</operator> <name pos:start="123:36" pos:end="123:46">FW_OVERHEAD</name></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="131:59">/* We aim for a hash table of size 1/128 the size of RAM.  The

     * normal rule of thumb is 1/64 the size of RAM, but that's much

     * more than needed for the Linux guests we support. */</comment>

    <expr_stmt pos:start="133:5" pos:end="133:27"><expr pos:start="133:5" pos:end="133:26"><name pos:start="133:5" pos:end="133:21"><name pos:start="133:5" pos:end="133:9">spapr</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:21">htab_shift</name></name> <operator pos:start="133:23" pos:end="133:23">=</operator> <literal type="number" pos:start="133:25" pos:end="133:26">18</literal></expr>;</expr_stmt> <comment type="block" pos:start="133:29" pos:end="133:58">/* Minimum architected size */</comment>

    <while pos:start="135:5" pos:end="145:5">while <condition pos:start="135:11" pos:end="135:35">(<expr pos:start="135:12" pos:end="135:34"><name pos:start="135:12" pos:end="135:28"><name pos:start="135:12" pos:end="135:16">spapr</name><operator pos:start="135:17" pos:end="135:18">-&gt;</operator><name pos:start="135:19" pos:end="135:28">htab_shift</name></name> <operator pos:start="135:30" pos:end="135:31">&lt;=</operator> <literal type="number" pos:start="135:33" pos:end="135:34">46</literal></expr>)</condition> <block pos:start="135:37" pos:end="145:5">{<block_content pos:start="137:9" pos:end="143:28">

        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:58">(<expr pos:start="137:13" pos:end="137:57"><operator pos:start="137:13" pos:end="137:13">(</operator><literal type="number" pos:start="137:14" pos:end="137:17">1ULL</literal> <operator pos:start="137:19" pos:end="137:20">&lt;&lt;</operator> <operator pos:start="137:22" pos:end="137:22">(</operator><name pos:start="137:23" pos:end="137:39"><name pos:start="137:23" pos:end="137:27">spapr</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:39">htab_shift</name></name> <operator pos:start="137:41" pos:end="137:41">+</operator> <literal type="number" pos:start="137:43" pos:end="137:43">7</literal><operator pos:start="137:44" pos:end="137:44">)</operator><operator pos:start="137:45" pos:end="137:45">)</operator> <operator pos:start="137:47" pos:end="137:48">&gt;=</operator> <name pos:start="137:50" pos:end="137:57">ram_size</name></expr>)</condition> <block pos:start="137:60" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:18">

            <break pos:start="139:13" pos:end="139:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:28"><expr pos:start="143:9" pos:end="143:27"><name pos:start="143:9" pos:end="143:25"><name pos:start="143:9" pos:end="143:13">spapr</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:25">htab_shift</name></name><operator pos:start="143:26" pos:end="143:27">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="149:5" pos:end="149:19">/* init CPUs */</comment>

    <if_stmt pos:start="151:5" pos:end="155:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:26">(<expr pos:start="151:9" pos:end="151:25"><name pos:start="151:9" pos:end="151:17">cpu_model</name> <operator pos:start="151:19" pos:end="151:20">==</operator> <name pos:start="151:22" pos:end="151:25">NULL</name></expr>)</condition> <block pos:start="151:28" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:54">

        <expr_stmt pos:start="153:9" pos:end="153:54"><expr pos:start="153:9" pos:end="153:53"><name pos:start="153:9" pos:end="153:17">cpu_model</name> <operator pos:start="153:19" pos:end="153:19">=</operator> <ternary pos:start="153:21" pos:end="153:53"><condition pos:start="153:21" pos:end="153:35"><expr pos:start="153:21" pos:end="153:33"><call pos:start="153:21" pos:end="153:33"><name pos:start="153:21" pos:end="153:31">kvm_enabled</name><argument_list pos:start="153:32" pos:end="153:33">()</argument_list></call></expr> ?</condition><then pos:start="153:37" pos:end="153:42"> <expr pos:start="153:37" pos:end="153:42"><literal type="string" pos:start="153:37" pos:end="153:42">"host"</literal></expr> </then><else pos:start="153:44" pos:end="153:53">: <expr pos:start="153:46" pos:end="153:53"><literal type="string" pos:start="153:46" pos:end="153:53">"POWER7"</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="157:5" pos:end="197:5">for <control pos:start="157:9" pos:end="157:34">(<init pos:start="157:10" pos:end="157:15"><expr pos:start="157:10" pos:end="157:14"><name pos:start="157:10" pos:end="157:10">i</name> <operator pos:start="157:12" pos:end="157:12">=</operator> <literal type="number" pos:start="157:14" pos:end="157:14">0</literal></expr>;</init> <condition pos:start="157:17" pos:end="157:29"><expr pos:start="157:17" pos:end="157:28"><name pos:start="157:17" pos:end="157:17">i</name> <operator pos:start="157:19" pos:end="157:19">&lt;</operator> <name pos:start="157:21" pos:end="157:28">smp_cpus</name></expr>;</condition> <incr pos:start="157:31" pos:end="157:33"><expr pos:start="157:31" pos:end="157:33"><name pos:start="157:31" pos:end="157:31">i</name><operator pos:start="157:32" pos:end="157:33">++</operator></expr></incr>)</control> <block pos:start="157:36" pos:end="197:5">{<block_content pos:start="159:9" pos:end="195:50">

        <expr_stmt pos:start="159:9" pos:end="159:38"><expr pos:start="159:9" pos:end="159:37"><name pos:start="159:9" pos:end="159:11">cpu</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <call pos:start="159:15" pos:end="159:37"><name pos:start="159:15" pos:end="159:26">cpu_ppc_init</name><argument_list pos:start="159:27" pos:end="159:37">(<argument pos:start="159:28" pos:end="159:36"><expr pos:start="159:28" pos:end="159:36"><name pos:start="159:28" pos:end="159:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="167:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:24">(<expr pos:start="161:13" pos:end="161:23"><name pos:start="161:13" pos:end="161:15">cpu</name> <operator pos:start="161:17" pos:end="161:18">==</operator> <name pos:start="161:20" pos:end="161:23">NULL</name></expr>)</condition> <block pos:start="161:26" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:20">

            <expr_stmt pos:start="163:13" pos:end="163:71"><expr pos:start="163:13" pos:end="163:70"><call pos:start="163:13" pos:end="163:70"><name pos:start="163:13" pos:end="163:19">fprintf</name><argument_list pos:start="163:20" pos:end="163:70">(<argument pos:start="163:21" pos:end="163:26"><expr pos:start="163:21" pos:end="163:26"><name pos:start="163:21" pos:end="163:26">stderr</name></expr></argument>, <argument pos:start="163:29" pos:end="163:69"><expr pos:start="163:29" pos:end="163:69"><literal type="string" pos:start="163:29" pos:end="163:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:20"><expr pos:start="165:13" pos:end="165:19"><call pos:start="165:13" pos:end="165:19"><name pos:start="165:13" pos:end="165:16">exit</name><argument_list pos:start="165:17" pos:end="165:19">(<argument pos:start="165:18" pos:end="165:18"><expr pos:start="165:18" pos:end="165:18"><literal type="number" pos:start="165:18" pos:end="165:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:24"><expr pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:11">env</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <operator pos:start="169:15" pos:end="169:15">&amp;</operator><name pos:start="169:16" pos:end="169:23"><name pos:start="169:16" pos:end="169:18">cpu</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="173:9" pos:end="173:48">/* Set time-base frequency to 512 MHz */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:44"><expr pos:start="175:9" pos:end="175:43"><call pos:start="175:9" pos:end="175:43"><name pos:start="175:9" pos:end="175:23">cpu_ppc_tb_init</name><argument_list pos:start="175:24" pos:end="175:43">(<argument pos:start="175:25" pos:end="175:27"><expr pos:start="175:25" pos:end="175:27"><name pos:start="175:25" pos:end="175:27">env</name></expr></argument>, <argument pos:start="175:30" pos:end="175:42"><expr pos:start="175:30" pos:end="175:42"><name pos:start="175:30" pos:end="175:42">TIMEBASE_FREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="179:9" pos:end="179:62">/* PAPR always has exception vectors in RAM not ROM */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:36"><expr pos:start="181:9" pos:end="181:35"><name pos:start="181:9" pos:end="181:31"><name pos:start="181:9" pos:end="181:11">env</name><operator pos:start="181:12" pos:end="181:13">-&gt;</operator><name pos:start="181:14" pos:end="181:31">hreset_excp_prefix</name></name> <operator pos:start="181:33" pos:end="181:33">=</operator> <literal type="number" pos:start="181:35" pos:end="181:35">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="185:9" pos:end="185:46">/* Tell KVM that we're in PAPR mode */</comment>

        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:26">(<expr pos:start="187:13" pos:end="187:25"><call pos:start="187:13" pos:end="187:25"><name pos:start="187:13" pos:end="187:23">kvm_enabled</name><argument_list pos:start="187:24" pos:end="187:25">()</argument_list></call></expr>)</condition> <block pos:start="187:28" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:33">

            <expr_stmt pos:start="189:13" pos:end="189:33"><expr pos:start="189:13" pos:end="189:32"><call pos:start="189:13" pos:end="189:32"><name pos:start="189:13" pos:end="189:27">kvmppc_set_papr</name><argument_list pos:start="189:28" pos:end="189:32">(<argument pos:start="189:29" pos:end="189:31"><expr pos:start="189:29" pos:end="189:31"><name pos:start="189:29" pos:end="189:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="195:9" pos:end="195:50"><expr pos:start="195:9" pos:end="195:49"><call pos:start="195:9" pos:end="195:49"><name pos:start="195:9" pos:end="195:27">qemu_register_reset</name><argument_list pos:start="195:28" pos:end="195:49">(<argument pos:start="195:29" pos:end="195:43"><expr pos:start="195:29" pos:end="195:43"><name pos:start="195:29" pos:end="195:43">spapr_cpu_reset</name></expr></argument>, <argument pos:start="195:46" pos:end="195:48"><expr pos:start="195:46" pos:end="195:48"><name pos:start="195:46" pos:end="195:48">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="201:5" pos:end="201:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:32"><expr pos:start="203:5" pos:end="203:31"><name pos:start="203:5" pos:end="203:20"><name pos:start="203:5" pos:end="203:9">spapr</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:20">ram_limit</name></name> <operator pos:start="203:22" pos:end="203:22">=</operator> <name pos:start="203:24" pos:end="203:31">ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="205:5" pos:end="219:5"><if pos:start="205:5" pos:end="219:5">if <condition pos:start="205:8" pos:end="205:42">(<expr pos:start="205:9" pos:end="205:41"><name pos:start="205:9" pos:end="205:24"><name pos:start="205:9" pos:end="205:13">spapr</name><operator pos:start="205:14" pos:end="205:15">-&gt;</operator><name pos:start="205:16" pos:end="205:24">ram_limit</name></name> <operator pos:start="205:26" pos:end="205:26">&gt;</operator> <name pos:start="205:28" pos:end="205:41">rma_alloc_size</name></expr>)</condition> <block pos:start="205:44" pos:end="219:5">{<block_content pos:start="207:9" pos:end="217:62">

        <decl_stmt pos:start="207:9" pos:end="207:48"><decl pos:start="207:9" pos:end="207:47"><type pos:start="207:9" pos:end="207:18"><name pos:start="207:9" pos:end="207:18">ram_addr_t</name></type> <name pos:start="207:20" pos:end="207:30">nonrma_base</name> <init pos:start="207:32" pos:end="207:47">= <expr pos:start="207:34" pos:end="207:47"><name pos:start="207:34" pos:end="207:47">rma_alloc_size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="209:9" pos:end="209:67"><decl pos:start="209:9" pos:end="209:66"><type pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:18">ram_addr_t</name></type> <name pos:start="209:20" pos:end="209:30">nonrma_size</name> <init pos:start="209:32" pos:end="209:66">= <expr pos:start="209:34" pos:end="209:66"><name pos:start="209:34" pos:end="209:49"><name pos:start="209:34" pos:end="209:38">spapr</name><operator pos:start="209:39" pos:end="209:40">-&gt;</operator><name pos:start="209:41" pos:end="209:49">ram_limit</name></name> <operator pos:start="209:51" pos:end="209:51">-</operator> <name pos:start="209:53" pos:end="209:66">rma_alloc_size</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="213:9" pos:end="213:66"><expr pos:start="213:9" pos:end="213:65"><call pos:start="213:9" pos:end="213:65"><name pos:start="213:9" pos:end="213:30">memory_region_init_ram</name><argument_list pos:start="213:31" pos:end="213:65">(<argument pos:start="213:32" pos:end="213:34"><expr pos:start="213:32" pos:end="213:34"><name pos:start="213:32" pos:end="213:34">ram</name></expr></argument>, <argument pos:start="213:37" pos:end="213:51"><expr pos:start="213:37" pos:end="213:51"><literal type="string" pos:start="213:37" pos:end="213:51">"ppc_spapr.ram"</literal></expr></argument>, <argument pos:start="213:54" pos:end="213:64"><expr pos:start="213:54" pos:end="213:64"><name pos:start="213:54" pos:end="213:64">nonrma_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:41"><expr pos:start="215:9" pos:end="215:40"><call pos:start="215:9" pos:end="215:40"><name pos:start="215:9" pos:end="215:35">vmstate_register_ram_global</name><argument_list pos:start="215:36" pos:end="215:40">(<argument pos:start="215:37" pos:end="215:39"><expr pos:start="215:37" pos:end="215:39"><name pos:start="215:37" pos:end="215:39">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:62"><expr pos:start="217:9" pos:end="217:61"><call pos:start="217:9" pos:end="217:61"><name pos:start="217:9" pos:end="217:35">memory_region_add_subregion</name><argument_list pos:start="217:36" pos:end="217:61">(<argument pos:start="217:37" pos:end="217:42"><expr pos:start="217:37" pos:end="217:42"><name pos:start="217:37" pos:end="217:42">sysmem</name></expr></argument>, <argument pos:start="217:45" pos:end="217:55"><expr pos:start="217:45" pos:end="217:55"><name pos:start="217:45" pos:end="217:55">nonrma_base</name></expr></argument>, <argument pos:start="217:58" pos:end="217:60"><expr pos:start="217:58" pos:end="217:60"><name pos:start="217:58" pos:end="217:60">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:69"><expr pos:start="223:5" pos:end="223:68"><name pos:start="223:5" pos:end="223:12">filename</name> <operator pos:start="223:14" pos:end="223:14">=</operator> <call pos:start="223:16" pos:end="223:68"><name pos:start="223:16" pos:end="223:29">qemu_find_file</name><argument_list pos:start="223:30" pos:end="223:68">(<argument pos:start="223:31" pos:end="223:49"><expr pos:start="223:31" pos:end="223:49"><name pos:start="223:31" pos:end="223:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="223:52" pos:end="223:67"><expr pos:start="223:52" pos:end="223:67"><literal type="string" pos:start="223:52" pos:end="223:67">"spapr-rtas.bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="227:74"><expr pos:start="225:5" pos:end="227:73"><name pos:start="225:5" pos:end="225:20"><name pos:start="225:5" pos:end="225:9">spapr</name><operator pos:start="225:10" pos:end="225:11">-&gt;</operator><name pos:start="225:12" pos:end="225:20">rtas_size</name></name> <operator pos:start="225:22" pos:end="225:22">=</operator> <call pos:start="225:24" pos:end="227:73"><name pos:start="225:24" pos:end="225:42">load_image_targphys</name><argument_list pos:start="225:43" pos:end="227:73">(<argument pos:start="225:44" pos:end="225:51"><expr pos:start="225:44" pos:end="225:51"><name pos:start="225:44" pos:end="225:51">filename</name></expr></argument>, <argument pos:start="225:54" pos:end="225:69"><expr pos:start="225:54" pos:end="225:69"><name pos:start="225:54" pos:end="225:69"><name pos:start="225:54" pos:end="225:58">spapr</name><operator pos:start="225:59" pos:end="225:60">-&gt;</operator><name pos:start="225:61" pos:end="225:69">rtas_addr</name></name></expr></argument>,

                                           <argument pos:start="227:44" pos:end="227:72"><expr pos:start="227:44" pos:end="227:72"><name pos:start="227:44" pos:end="227:53">rtas_limit</name> <operator pos:start="227:55" pos:end="227:55">-</operator> <name pos:start="227:57" pos:end="227:72"><name pos:start="227:57" pos:end="227:61">spapr</name><operator pos:start="227:62" pos:end="227:63">-&gt;</operator><name pos:start="227:64" pos:end="227:72">rtas_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="235:5"><if pos:start="229:5" pos:end="235:5">if <condition pos:start="229:8" pos:end="229:29">(<expr pos:start="229:9" pos:end="229:28"><name pos:start="229:9" pos:end="229:24"><name pos:start="229:9" pos:end="229:13">spapr</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:24">rtas_size</name></name> <operator pos:start="229:26" pos:end="229:26">&lt;</operator> <literal type="number" pos:start="229:28" pos:end="229:28">0</literal></expr>)</condition> <block pos:start="229:31" pos:end="235:5">{<block_content pos:start="231:9" pos:end="233:16">

        <expr_stmt pos:start="231:9" pos:end="231:68"><expr pos:start="231:9" pos:end="231:67"><call pos:start="231:9" pos:end="231:67"><name pos:start="231:9" pos:end="231:16">hw_error</name><argument_list pos:start="231:17" pos:end="231:67">(<argument pos:start="231:18" pos:end="231:56"><expr pos:start="231:18" pos:end="231:56"><literal type="string" pos:start="231:18" pos:end="231:56">"qemu: could not load LPAR rtas '%s'\n"</literal></expr></argument>, <argument pos:start="231:59" pos:end="231:66"><expr pos:start="231:59" pos:end="231:66"><name pos:start="231:59" pos:end="231:66">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:16"><expr pos:start="233:9" pos:end="233:15"><call pos:start="233:9" pos:end="233:15"><name pos:start="233:9" pos:end="233:12">exit</name><argument_list pos:start="233:13" pos:end="233:15">(<argument pos:start="233:14" pos:end="233:14"><expr pos:start="233:14" pos:end="233:14"><literal type="number" pos:start="233:14" pos:end="233:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="237:5" pos:end="245:5"><if pos:start="237:5" pos:end="245:5">if <condition pos:start="237:8" pos:end="237:41">(<expr pos:start="237:9" pos:end="237:40"><name pos:start="237:9" pos:end="237:24"><name pos:start="237:9" pos:end="237:13">spapr</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:24">rtas_size</name></name> <operator pos:start="237:26" pos:end="237:26">&gt;</operator> <name pos:start="237:28" pos:end="237:40">RTAS_MAX_SIZE</name></expr>)</condition> <block pos:start="237:43" pos:end="245:5">{<block_content pos:start="239:9" pos:end="243:16">

        <expr_stmt pos:start="239:9" pos:end="241:50"><expr pos:start="239:9" pos:end="241:49"><call pos:start="239:9" pos:end="241:49"><name pos:start="239:9" pos:end="239:16">hw_error</name><argument_list pos:start="239:17" pos:end="241:49">(<argument pos:start="239:18" pos:end="239:61"><expr pos:start="239:18" pos:end="239:61"><literal type="string" pos:start="239:18" pos:end="239:61">"RTAS too big ! 0x%lx bytes (max is 0x%x)\n"</literal></expr></argument>,

                 <argument pos:start="241:18" pos:end="241:33"><expr pos:start="241:18" pos:end="241:33"><name pos:start="241:18" pos:end="241:33"><name pos:start="241:18" pos:end="241:22">spapr</name><operator pos:start="241:23" pos:end="241:24">-&gt;</operator><name pos:start="241:25" pos:end="241:33">rtas_size</name></name></expr></argument>, <argument pos:start="241:36" pos:end="241:48"><expr pos:start="241:36" pos:end="241:48"><name pos:start="241:36" pos:end="241:48">RTAS_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:16"><expr pos:start="243:9" pos:end="243:15"><call pos:start="243:9" pos:end="243:15"><name pos:start="243:9" pos:end="243:12">exit</name><argument_list pos:start="243:13" pos:end="243:15">(<argument pos:start="243:14" pos:end="243:14"><expr pos:start="243:14" pos:end="243:14"><literal type="number" pos:start="243:14" pos:end="243:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:21"><expr pos:start="247:5" pos:end="247:20"><call pos:start="247:5" pos:end="247:20"><name pos:start="247:5" pos:end="247:10">g_free</name><argument_list pos:start="247:11" pos:end="247:20">(<argument pos:start="247:12" pos:end="247:19"><expr pos:start="247:12" pos:end="247:19"><name pos:start="247:12" pos:end="247:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" pos:start="253:5" pos:end="253:37">/* Set up Interrupt Controller */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:45"><expr pos:start="255:5" pos:end="255:44"><name pos:start="255:5" pos:end="255:14"><name pos:start="255:5" pos:end="255:9">spapr</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:14">icp</name></name> <operator pos:start="255:16" pos:end="255:16">=</operator> <call pos:start="255:18" pos:end="255:44"><name pos:start="255:18" pos:end="255:33">xics_system_init</name><argument_list pos:start="255:34" pos:end="255:44">(<argument pos:start="255:35" pos:end="255:43"><expr pos:start="255:35" pos:end="255:43"><name pos:start="255:35" pos:end="255:43">XICS_IRQS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:36"><expr pos:start="257:5" pos:end="257:35"><name pos:start="257:5" pos:end="257:19"><name pos:start="257:5" pos:end="257:9">spapr</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:19">next_irq</name></name> <operator pos:start="257:21" pos:end="257:21">=</operator> <name pos:start="257:23" pos:end="257:35">XICS_IRQ_BASE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:43">/* Set up EPOW events infrastructure */</comment>

    <expr_stmt pos:start="263:5" pos:end="263:29"><expr pos:start="263:5" pos:end="263:28"><call pos:start="263:5" pos:end="263:28"><name pos:start="263:5" pos:end="263:21">spapr_events_init</name><argument_list pos:start="263:22" pos:end="263:28">(<argument pos:start="263:23" pos:end="263:27"><expr pos:start="263:23" pos:end="263:27"><name pos:start="263:23" pos:end="263:27">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="267:5" pos:end="267:22">/* Set up IOMMU */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:23"><expr pos:start="269:5" pos:end="269:22"><call pos:start="269:5" pos:end="269:22"><name pos:start="269:5" pos:end="269:20">spapr_iommu_init</name><argument_list pos:start="269:21" pos:end="269:22">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="273:5" pos:end="273:24">/* Set up VIO bus */</comment>

    <expr_stmt pos:start="275:5" pos:end="275:42"><expr pos:start="275:5" pos:end="275:41"><name pos:start="275:5" pos:end="275:18"><name pos:start="275:5" pos:end="275:9">spapr</name><operator pos:start="275:10" pos:end="275:11">-&gt;</operator><name pos:start="275:12" pos:end="275:18">vio_bus</name></name> <operator pos:start="275:20" pos:end="275:20">=</operator> <call pos:start="275:22" pos:end="275:41"><name pos:start="275:22" pos:end="275:39">spapr_vio_bus_init</name><argument_list pos:start="275:40" pos:end="275:41">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="279:5" pos:end="287:5">for <control pos:start="279:9" pos:end="279:42">(<init pos:start="279:10" pos:end="279:15"><expr pos:start="279:10" pos:end="279:14"><name pos:start="279:10" pos:end="279:10">i</name> <operator pos:start="279:12" pos:end="279:12">=</operator> <literal type="number" pos:start="279:14" pos:end="279:14">0</literal></expr>;</init> <condition pos:start="279:17" pos:end="279:37"><expr pos:start="279:17" pos:end="279:36"><name pos:start="279:17" pos:end="279:17">i</name> <operator pos:start="279:19" pos:end="279:19">&lt;</operator> <name pos:start="279:21" pos:end="279:36">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="279:39" pos:end="279:41"><expr pos:start="279:39" pos:end="279:41"><name pos:start="279:39" pos:end="279:39">i</name><operator pos:start="279:40" pos:end="279:41">++</operator></expr></incr>)</control> <block pos:start="279:44" pos:end="287:5">{<block_content pos:start="281:9" pos:end="285:9">

        <if_stmt pos:start="281:9" pos:end="285:9"><if pos:start="281:9" pos:end="285:9">if <condition pos:start="281:12" pos:end="281:26">(<expr pos:start="281:13" pos:end="281:25"><name pos:start="281:13" pos:end="281:25"><name pos:start="281:13" pos:end="281:22">serial_hds</name><index pos:start="281:23" pos:end="281:25">[<expr pos:start="281:24" pos:end="281:24"><name pos:start="281:24" pos:end="281:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="281:28" pos:end="285:9">{<block_content pos:start="283:13" pos:end="283:60">

            <expr_stmt pos:start="283:13" pos:end="283:60"><expr pos:start="283:13" pos:end="283:59"><call pos:start="283:13" pos:end="283:59"><name pos:start="283:13" pos:end="283:28">spapr_vty_create</name><argument_list pos:start="283:29" pos:end="283:59">(<argument pos:start="283:30" pos:end="283:43"><expr pos:start="283:30" pos:end="283:43"><name pos:start="283:30" pos:end="283:43"><name pos:start="283:30" pos:end="283:34">spapr</name><operator pos:start="283:35" pos:end="283:36">-&gt;</operator><name pos:start="283:37" pos:end="283:43">vio_bus</name></name></expr></argument>, <argument pos:start="283:46" pos:end="283:58"><expr pos:start="283:46" pos:end="283:58"><name pos:start="283:46" pos:end="283:58"><name pos:start="283:46" pos:end="283:55">serial_hds</name><index pos:start="283:56" pos:end="283:58">[<expr pos:start="283:57" pos:end="283:57"><name pos:start="283:57" pos:end="283:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="291:5" pos:end="291:57">/* We always have at least the nvram device on VIO */</comment>

    <expr_stmt pos:start="293:5" pos:end="293:30"><expr pos:start="293:5" pos:end="293:29"><call pos:start="293:5" pos:end="293:29"><name pos:start="293:5" pos:end="293:22">spapr_create_nvram</name><argument_list pos:start="293:23" pos:end="293:29">(<argument pos:start="293:24" pos:end="293:28"><expr pos:start="293:24" pos:end="293:28"><name pos:start="293:24" pos:end="293:28">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="297:5" pos:end="297:20">/* Set up PCI */</comment>

    <expr_stmt pos:start="299:5" pos:end="299:26"><expr pos:start="299:5" pos:end="299:25"><call pos:start="299:5" pos:end="299:25"><name pos:start="299:5" pos:end="299:23">spapr_pci_rtas_init</name><argument_list pos:start="299:24" pos:end="299:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="303:5" pos:end="311:45"><expr pos:start="303:5" pos:end="311:44"><call pos:start="303:5" pos:end="311:44"><name pos:start="303:5" pos:end="303:20">spapr_create_phb</name><argument_list pos:start="303:21" pos:end="311:44">(<argument pos:start="303:22" pos:end="303:26"><expr pos:start="303:22" pos:end="303:26"><name pos:start="303:22" pos:end="303:26">spapr</name></expr></argument>, <argument pos:start="303:29" pos:end="303:33"><expr pos:start="303:29" pos:end="303:33"><literal type="string" pos:start="303:29" pos:end="303:33">"pci"</literal></expr></argument>, <argument pos:start="303:36" pos:end="303:49"><expr pos:start="303:36" pos:end="303:49"><name pos:start="303:36" pos:end="303:49">SPAPR_PCI_BUID</name></expr></argument>,

                     <argument pos:start="305:22" pos:end="305:43"><expr pos:start="305:22" pos:end="305:43"><name pos:start="305:22" pos:end="305:43">SPAPR_PCI_MEM_WIN_ADDR</name></expr></argument>,

                     <argument pos:start="307:22" pos:end="307:43"><expr pos:start="307:22" pos:end="307:43"><name pos:start="307:22" pos:end="307:43">SPAPR_PCI_MEM_WIN_SIZE</name></expr></argument>,

                     <argument pos:start="309:22" pos:end="309:42"><expr pos:start="309:22" pos:end="309:42"><name pos:start="309:22" pos:end="309:42">SPAPR_PCI_IO_WIN_ADDR</name></expr></argument>,

                     <argument pos:start="311:22" pos:end="311:43"><expr pos:start="311:22" pos:end="311:43"><name pos:start="311:22" pos:end="311:43">SPAPR_PCI_MSI_WIN_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:53"><expr pos:start="313:5" pos:end="313:52"><name pos:start="313:5" pos:end="313:7">phb</name> <operator pos:start="313:9" pos:end="313:9">=</operator> <call pos:start="313:11" pos:end="313:52"><name pos:start="313:11" pos:end="313:25">PCI_HOST_BRIDGE</name><argument_list pos:start="313:26" pos:end="313:52">(<argument pos:start="313:27" pos:end="313:51"><expr pos:start="313:27" pos:end="313:51"><call pos:start="313:27" pos:end="313:51"><name pos:start="313:27" pos:end="313:37">QLIST_FIRST</name><argument_list pos:start="313:38" pos:end="313:51">(<argument pos:start="313:39" pos:end="313:50"><expr pos:start="313:39" pos:end="313:50"><operator pos:start="313:39" pos:end="313:39">&amp;</operator><name pos:start="313:40" pos:end="313:50"><name pos:start="313:40" pos:end="313:44">spapr</name><operator pos:start="313:45" pos:end="313:46">-&gt;</operator><name pos:start="313:47" pos:end="313:50">phbs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="317:5" pos:end="341:5">for <control pos:start="317:9" pos:end="317:33">(<init pos:start="317:10" pos:end="317:15"><expr pos:start="317:10" pos:end="317:14"><name pos:start="317:10" pos:end="317:10">i</name> <operator pos:start="317:12" pos:end="317:12">=</operator> <literal type="number" pos:start="317:14" pos:end="317:14">0</literal></expr>;</init> <condition pos:start="317:17" pos:end="317:28"><expr pos:start="317:17" pos:end="317:27"><name pos:start="317:17" pos:end="317:17">i</name> <operator pos:start="317:19" pos:end="317:19">&lt;</operator> <name pos:start="317:21" pos:end="317:27">nb_nics</name></expr>;</condition> <incr pos:start="317:30" pos:end="317:32"><expr pos:start="317:30" pos:end="317:32"><name pos:start="317:30" pos:end="317:30">i</name><operator pos:start="317:31" pos:end="317:32">++</operator></expr></incr>)</control> <block pos:start="317:35" pos:end="341:5">{<block_content pos:start="319:9" pos:end="339:9">

        <decl_stmt pos:start="319:9" pos:end="319:35"><decl pos:start="319:9" pos:end="319:34"><type pos:start="319:9" pos:end="319:17"><name pos:start="319:9" pos:end="319:15">NICInfo</name> <modifier pos:start="319:17" pos:end="319:17">*</modifier></type><name pos:start="319:18" pos:end="319:19">nd</name> <init pos:start="319:21" pos:end="319:34">= <expr pos:start="319:23" pos:end="319:34"><operator pos:start="319:23" pos:end="319:23">&amp;</operator><name pos:start="319:24" pos:end="319:34"><name pos:start="319:24" pos:end="319:31">nd_table</name><index pos:start="319:32" pos:end="319:34">[<expr pos:start="319:33" pos:end="319:33"><name pos:start="319:33" pos:end="319:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="323:9" pos:end="327:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:23">(<expr pos:start="323:13" pos:end="323:22"><operator pos:start="323:13" pos:end="323:13">!</operator><name pos:start="323:14" pos:end="323:22"><name pos:start="323:14" pos:end="323:15">nd</name><operator pos:start="323:16" pos:end="323:17">-&gt;</operator><name pos:start="323:18" pos:end="323:22">model</name></name></expr>)</condition> <block pos:start="323:25" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:44">

            <expr_stmt pos:start="325:13" pos:end="325:44"><expr pos:start="325:13" pos:end="325:43"><name pos:start="325:13" pos:end="325:21"><name pos:start="325:13" pos:end="325:14">nd</name><operator pos:start="325:15" pos:end="325:16">-&gt;</operator><name pos:start="325:17" pos:end="325:21">model</name></name> <operator pos:start="325:23" pos:end="325:23">=</operator> <call pos:start="325:25" pos:end="325:43"><name pos:start="325:25" pos:end="325:32">g_strdup</name><argument_list pos:start="325:33" pos:end="325:43">(<argument pos:start="325:34" pos:end="325:42"><expr pos:start="325:34" pos:end="325:42"><literal type="string" pos:start="325:34" pos:end="325:42">"ibmveth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="331:9" pos:end="339:9"><if pos:start="331:9" pos:end="335:9">if <condition pos:start="331:12" pos:end="331:46">(<expr pos:start="331:13" pos:end="331:45"><call pos:start="331:13" pos:end="331:40"><name pos:start="331:13" pos:end="331:18">strcmp</name><argument_list pos:start="331:19" pos:end="331:40">(<argument pos:start="331:20" pos:end="331:28"><expr pos:start="331:20" pos:end="331:28"><name pos:start="331:20" pos:end="331:28"><name pos:start="331:20" pos:end="331:21">nd</name><operator pos:start="331:22" pos:end="331:23">-&gt;</operator><name pos:start="331:24" pos:end="331:28">model</name></name></expr></argument>, <argument pos:start="331:31" pos:end="331:39"><expr pos:start="331:31" pos:end="331:39"><literal type="string" pos:start="331:31" pos:end="331:39">"ibmveth"</literal></expr></argument>)</argument_list></call> <operator pos:start="331:42" pos:end="331:43">==</operator> <literal type="number" pos:start="331:45" pos:end="331:45">0</literal></expr>)</condition> <block pos:start="331:48" pos:end="335:9">{<block_content pos:start="333:13" pos:end="333:50">

            <expr_stmt pos:start="333:13" pos:end="333:50"><expr pos:start="333:13" pos:end="333:49"><call pos:start="333:13" pos:end="333:49"><name pos:start="333:13" pos:end="333:29">spapr_vlan_create</name><argument_list pos:start="333:30" pos:end="333:49">(<argument pos:start="333:31" pos:end="333:44"><expr pos:start="333:31" pos:end="333:44"><name pos:start="333:31" pos:end="333:44"><name pos:start="333:31" pos:end="333:35">spapr</name><operator pos:start="333:36" pos:end="333:37">-&gt;</operator><name pos:start="333:38" pos:end="333:44">vio_bus</name></name></expr></argument>, <argument pos:start="333:47" pos:end="333:48"><expr pos:start="333:47" pos:end="333:48"><name pos:start="333:47" pos:end="333:48">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="335:11" pos:end="339:9">else <block pos:start="335:16" pos:end="339:9">{<block_content pos:start="337:13" pos:end="337:63">

            <expr_stmt pos:start="337:13" pos:end="337:63"><expr pos:start="337:13" pos:end="337:62"><call pos:start="337:13" pos:end="337:62"><name pos:start="337:13" pos:end="337:31">pci_nic_init_nofail</name><argument_list pos:start="337:32" pos:end="337:62">(<argument pos:start="337:33" pos:end="337:44"><expr pos:start="337:33" pos:end="337:44"><operator pos:start="337:33" pos:end="337:33">&amp;</operator><name pos:start="337:34" pos:end="337:44"><name pos:start="337:34" pos:end="337:41">nd_table</name><index pos:start="337:42" pos:end="337:44">[<expr pos:start="337:43" pos:end="337:43"><name pos:start="337:43" pos:end="337:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="337:47" pos:end="337:55"><expr pos:start="337:47" pos:end="337:55"><name pos:start="337:47" pos:end="337:55"><name pos:start="337:47" pos:end="337:48">nd</name><operator pos:start="337:49" pos:end="337:50">-&gt;</operator><name pos:start="337:51" pos:end="337:55">model</name></name></expr></argument>, <argument pos:start="337:58" pos:end="337:61"><expr pos:start="337:58" pos:end="337:61"><name pos:start="337:58" pos:end="337:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <for pos:start="345:5" pos:end="349:5">for <control pos:start="345:9" pos:end="345:53">(<init pos:start="345:10" pos:end="345:15"><expr pos:start="345:10" pos:end="345:14"><name pos:start="345:10" pos:end="345:10">i</name> <operator pos:start="345:12" pos:end="345:12">=</operator> <literal type="number" pos:start="345:14" pos:end="345:14">0</literal></expr>;</init> <condition pos:start="345:17" pos:end="345:48"><expr pos:start="345:17" pos:end="345:47"><name pos:start="345:17" pos:end="345:17">i</name> <operator pos:start="345:19" pos:end="345:20">&lt;=</operator> <call pos:start="345:22" pos:end="345:47"><name pos:start="345:22" pos:end="345:38">drive_get_max_bus</name><argument_list pos:start="345:39" pos:end="345:47">(<argument pos:start="345:40" pos:end="345:46"><expr pos:start="345:40" pos:end="345:46"><name pos:start="345:40" pos:end="345:46">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="345:50" pos:end="345:52"><expr pos:start="345:50" pos:end="345:52"><name pos:start="345:50" pos:end="345:50">i</name><operator pos:start="345:51" pos:end="345:52">++</operator></expr></incr>)</control> <block pos:start="345:55" pos:end="349:5">{<block_content pos:start="347:9" pos:end="347:43">

        <expr_stmt pos:start="347:9" pos:end="347:43"><expr pos:start="347:9" pos:end="347:42"><call pos:start="347:9" pos:end="347:42"><name pos:start="347:9" pos:end="347:26">spapr_vscsi_create</name><argument_list pos:start="347:27" pos:end="347:42">(<argument pos:start="347:28" pos:end="347:41"><expr pos:start="347:28" pos:end="347:41"><name pos:start="347:28" pos:end="347:41"><name pos:start="347:28" pos:end="347:32">spapr</name><operator pos:start="347:33" pos:end="347:34">-&gt;</operator><name pos:start="347:35" pos:end="347:41">vio_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="353:5" pos:end="353:18">/* Graphics */</comment>

    <if_stmt pos:start="355:5" pos:end="359:5"><if pos:start="355:5" pos:end="359:5">if <condition pos:start="355:8" pos:end="355:33">(<expr pos:start="355:9" pos:end="355:32"><call pos:start="355:9" pos:end="355:32"><name pos:start="355:9" pos:end="355:22">spapr_vga_init</name><argument_list pos:start="355:23" pos:end="355:32">(<argument pos:start="355:24" pos:end="355:31"><expr pos:start="355:24" pos:end="355:31"><name pos:start="355:24" pos:end="355:31"><name pos:start="355:24" pos:end="355:26">phb</name><operator pos:start="355:27" pos:end="355:28">-&gt;</operator><name pos:start="355:29" pos:end="355:31">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="355:35" pos:end="359:5">{<block_content pos:start="357:9" pos:end="357:35">

        <expr_stmt pos:start="357:9" pos:end="357:35"><expr pos:start="357:9" pos:end="357:34"><name pos:start="357:9" pos:end="357:27"><name pos:start="357:9" pos:end="357:13">spapr</name><operator pos:start="357:14" pos:end="357:15">-&gt;</operator><name pos:start="357:16" pos:end="357:27">has_graphics</name></name> <operator pos:start="357:29" pos:end="357:29">=</operator> <name pos:start="357:31" pos:end="357:34">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="363:5" pos:end="375:5"><if pos:start="363:5" pos:end="375:5">if <condition pos:start="363:8" pos:end="363:41">(<expr pos:start="363:9" pos:end="363:40"><call pos:start="363:9" pos:end="363:40"><name pos:start="363:9" pos:end="363:19">usb_enabled</name><argument_list pos:start="363:20" pos:end="363:40">(<argument pos:start="363:21" pos:end="363:39"><expr pos:start="363:21" pos:end="363:39"><name pos:start="363:21" pos:end="363:39"><name pos:start="363:21" pos:end="363:25">spapr</name><operator pos:start="363:26" pos:end="363:27">-&gt;</operator><name pos:start="363:28" pos:end="363:39">has_graphics</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="363:43" pos:end="375:5">{<block_content pos:start="365:9" pos:end="373:9">

        <expr_stmt pos:start="365:9" pos:end="365:52"><expr pos:start="365:9" pos:end="365:51"><call pos:start="365:9" pos:end="365:51"><name pos:start="365:9" pos:end="365:25">pci_create_simple</name><argument_list pos:start="365:26" pos:end="365:51">(<argument pos:start="365:27" pos:end="365:34"><expr pos:start="365:27" pos:end="365:34"><name pos:start="365:27" pos:end="365:34"><name pos:start="365:27" pos:end="365:29">phb</name><operator pos:start="365:30" pos:end="365:31">-&gt;</operator><name pos:start="365:32" pos:end="365:34">bus</name></name></expr></argument>, <argument pos:start="365:37" pos:end="365:38"><expr pos:start="365:37" pos:end="365:38"><operator pos:start="365:37" pos:end="365:37">-</operator><literal type="number" pos:start="365:38" pos:end="365:38">1</literal></expr></argument>, <argument pos:start="365:41" pos:end="365:50"><expr pos:start="365:41" pos:end="365:50"><literal type="string" pos:start="365:41" pos:end="365:50">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="367:9" pos:end="373:9"><if pos:start="367:9" pos:end="373:9">if <condition pos:start="367:12" pos:end="367:32">(<expr pos:start="367:13" pos:end="367:31"><name pos:start="367:13" pos:end="367:31"><name pos:start="367:13" pos:end="367:17">spapr</name><operator pos:start="367:18" pos:end="367:19">-&gt;</operator><name pos:start="367:20" pos:end="367:31">has_graphics</name></name></expr>)</condition> <block pos:start="367:34" pos:end="373:9">{<block_content pos:start="369:13" pos:end="371:38">

            <expr_stmt pos:start="369:13" pos:end="369:41"><expr pos:start="369:13" pos:end="369:40"><call pos:start="369:13" pos:end="369:40"><name pos:start="369:13" pos:end="369:28">usbdevice_create</name><argument_list pos:start="369:29" pos:end="369:40">(<argument pos:start="369:30" pos:end="369:39"><expr pos:start="369:30" pos:end="369:39"><literal type="string" pos:start="369:30" pos:end="369:39">"keyboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:38"><expr pos:start="371:13" pos:end="371:37"><call pos:start="371:13" pos:end="371:37"><name pos:start="371:13" pos:end="371:28">usbdevice_create</name><argument_list pos:start="371:29" pos:end="371:37">(<argument pos:start="371:30" pos:end="371:36"><expr pos:start="371:30" pos:end="371:36"><literal type="string" pos:start="371:30" pos:end="371:36">"mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="379:5" pos:end="387:5"><if pos:start="379:5" pos:end="387:5">if <condition pos:start="379:8" pos:end="379:47">(<expr pos:start="379:9" pos:end="379:46"><name pos:start="379:9" pos:end="379:23"><name pos:start="379:9" pos:end="379:13">spapr</name><operator pos:start="379:14" pos:end="379:15">-&gt;</operator><name pos:start="379:16" pos:end="379:23">rma_size</name></name> <operator pos:start="379:25" pos:end="379:25">&lt;</operator> <operator pos:start="379:27" pos:end="379:27">(</operator><name pos:start="379:28" pos:end="379:39">MIN_RMA_SLOF</name> <operator pos:start="379:41" pos:end="379:42">&lt;&lt;</operator> <literal type="number" pos:start="379:44" pos:end="379:45">20</literal><operator pos:start="379:46" pos:end="379:46">)</operator></expr>)</condition> <block pos:start="379:49" pos:end="387:5">{<block_content pos:start="381:9" pos:end="385:16">

        <expr_stmt pos:start="381:9" pos:end="383:74"><expr pos:start="381:9" pos:end="383:73"><call pos:start="381:9" pos:end="383:73"><name pos:start="381:9" pos:end="381:15">fprintf</name><argument_list pos:start="381:16" pos:end="383:73">(<argument pos:start="381:17" pos:end="381:22"><expr pos:start="381:17" pos:end="381:22"><name pos:start="381:17" pos:end="381:22">stderr</name></expr></argument>, <argument pos:start="381:25" pos:end="383:58"><expr pos:start="381:25" pos:end="383:58"><literal type="string" pos:start="381:25" pos:end="381:66">"qemu: pSeries SLOF firmware requires &gt;= "</literal>

                <literal type="string" pos:start="383:17" pos:end="383:58">"%ldM guest RMA (Real Mode Area memory)\n"</literal></expr></argument>, <argument pos:start="383:61" pos:end="383:72"><expr pos:start="383:61" pos:end="383:72"><name pos:start="383:61" pos:end="383:72">MIN_RMA_SLOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:16"><expr pos:start="385:9" pos:end="385:15"><call pos:start="385:9" pos:end="385:15"><name pos:start="385:9" pos:end="385:12">exit</name><argument_list pos:start="385:13" pos:end="385:15">(<argument pos:start="385:14" pos:end="385:14"><expr pos:start="385:14" pos:end="385:14"><literal type="number" pos:start="385:14" pos:end="385:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="391:5" pos:end="457:5"><if pos:start="391:5" pos:end="457:5">if <condition pos:start="391:8" pos:end="391:24">(<expr pos:start="391:9" pos:end="391:23"><name pos:start="391:9" pos:end="391:23">kernel_filename</name></expr>)</condition> <block pos:start="391:26" pos:end="457:5">{<block_content pos:start="393:9" pos:end="455:9">

        <decl_stmt pos:start="393:9" pos:end="393:29"><decl pos:start="393:9" pos:end="393:28"><type pos:start="393:9" pos:end="393:16"><name pos:start="393:9" pos:end="393:16">uint64_t</name></type> <name pos:start="393:18" pos:end="393:24">lowaddr</name> <init pos:start="393:26" pos:end="393:28">= <expr pos:start="393:28" pos:end="393:28"><literal type="number" pos:start="393:28" pos:end="393:28">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="397:9" pos:end="399:72"><expr pos:start="397:9" pos:end="399:71"><name pos:start="397:9" pos:end="397:19">kernel_size</name> <operator pos:start="397:21" pos:end="397:21">=</operator> <call pos:start="397:23" pos:end="399:71"><name pos:start="397:23" pos:end="397:30">load_elf</name><argument_list pos:start="397:31" pos:end="399:71">(<argument pos:start="397:32" pos:end="397:46"><expr pos:start="397:32" pos:end="397:46"><name pos:start="397:32" pos:end="397:46">kernel_filename</name></expr></argument>, <argument pos:start="397:49" pos:end="397:72"><expr pos:start="397:49" pos:end="397:72"><name pos:start="397:49" pos:end="397:72">translate_kernel_address</name></expr></argument>, <argument pos:start="397:75" pos:end="397:78"><expr pos:start="397:75" pos:end="397:78"><name pos:start="397:75" pos:end="397:78">NULL</name></expr></argument>,

                               <argument pos:start="399:32" pos:end="399:35"><expr pos:start="399:32" pos:end="399:35"><name pos:start="399:32" pos:end="399:35">NULL</name></expr></argument>, <argument pos:start="399:38" pos:end="399:45"><expr pos:start="399:38" pos:end="399:45"><operator pos:start="399:38" pos:end="399:38">&amp;</operator><name pos:start="399:39" pos:end="399:45">lowaddr</name></expr></argument>, <argument pos:start="399:48" pos:end="399:51"><expr pos:start="399:48" pos:end="399:51"><name pos:start="399:48" pos:end="399:51">NULL</name></expr></argument>, <argument pos:start="399:54" pos:end="399:54"><expr pos:start="399:54" pos:end="399:54"><literal type="number" pos:start="399:54" pos:end="399:54">1</literal></expr></argument>, <argument pos:start="399:57" pos:end="399:67"><expr pos:start="399:57" pos:end="399:67"><name pos:start="399:57" pos:end="399:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="399:70" pos:end="399:70"><expr pos:start="399:70" pos:end="399:70"><literal type="number" pos:start="399:70" pos:end="399:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="401:9" pos:end="409:9"><if pos:start="401:9" pos:end="409:9">if <condition pos:start="401:12" pos:end="401:28">(<expr pos:start="401:13" pos:end="401:27"><name pos:start="401:13" pos:end="401:23">kernel_size</name> <operator pos:start="401:25" pos:end="401:25">&lt;</operator> <literal type="number" pos:start="401:27" pos:end="401:27">0</literal></expr>)</condition> <block pos:start="401:30" pos:end="409:9">{<block_content pos:start="403:13" pos:end="407:77">

            <expr_stmt pos:start="403:13" pos:end="407:77"><expr pos:start="403:13" pos:end="407:76"><name pos:start="403:13" pos:end="403:23">kernel_size</name> <operator pos:start="403:25" pos:end="403:25">=</operator> <call pos:start="403:27" pos:end="407:76"><name pos:start="403:27" pos:end="403:45">load_image_targphys</name><argument_list pos:start="403:46" pos:end="407:76">(<argument pos:start="403:47" pos:end="403:61"><expr pos:start="403:47" pos:end="403:61"><name pos:start="403:47" pos:end="403:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="405:47" pos:end="405:62"><expr pos:start="405:47" pos:end="405:62"><name pos:start="405:47" pos:end="405:62">KERNEL_LOAD_ADDR</name></expr></argument>,

                                              <argument pos:start="407:47" pos:end="407:75"><expr pos:start="407:47" pos:end="407:75"><name pos:start="407:47" pos:end="407:56">load_limit</name> <operator pos:start="407:58" pos:end="407:58">-</operator> <name pos:start="407:60" pos:end="407:75">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="411:9" pos:end="419:9"><if pos:start="411:9" pos:end="419:9">if <condition pos:start="411:12" pos:end="411:28">(<expr pos:start="411:13" pos:end="411:27"><name pos:start="411:13" pos:end="411:23">kernel_size</name> <operator pos:start="411:25" pos:end="411:25">&lt;</operator> <literal type="number" pos:start="411:27" pos:end="411:27">0</literal></expr>)</condition> <block pos:start="411:30" pos:end="419:9">{<block_content pos:start="413:13" pos:end="417:20">

            <expr_stmt pos:start="413:13" pos:end="415:37"><expr pos:start="413:13" pos:end="415:36"><call pos:start="413:13" pos:end="415:36"><name pos:start="413:13" pos:end="413:19">fprintf</name><argument_list pos:start="413:20" pos:end="415:36">(<argument pos:start="413:21" pos:end="413:26"><expr pos:start="413:21" pos:end="413:26"><name pos:start="413:21" pos:end="413:26">stderr</name></expr></argument>, <argument pos:start="413:29" pos:end="413:64"><expr pos:start="413:29" pos:end="413:64"><literal type="string" pos:start="413:29" pos:end="413:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="415:21" pos:end="415:35"><expr pos:start="415:21" pos:end="415:35"><name pos:start="415:21" pos:end="415:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="417:13" pos:end="417:20"><expr pos:start="417:13" pos:end="417:19"><call pos:start="417:13" pos:end="417:19"><name pos:start="417:13" pos:end="417:16">exit</name><argument_list pos:start="417:17" pos:end="417:19">(<argument pos:start="417:18" pos:end="417:18"><expr pos:start="417:18" pos:end="417:18"><literal type="number" pos:start="417:18" pos:end="417:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="423:9" pos:end="423:25">/* load initrd */</comment>

        <if_stmt pos:start="425:9" pos:end="455:9"><if pos:start="425:9" pos:end="449:9">if <condition pos:start="425:12" pos:end="425:28">(<expr pos:start="425:13" pos:end="425:27"><name pos:start="425:13" pos:end="425:27">initrd_filename</name></expr>)</condition> <block pos:start="425:30" pos:end="449:9">{<block_content pos:start="433:13" pos:end="447:13">

            <comment type="block" pos:start="427:13" pos:end="431:15">/* Try to locate the initrd in the gap between the kernel

             * and the firmware. Add a bit of space just in case

             */</comment>

            <expr_stmt pos:start="433:13" pos:end="433:79"><expr pos:start="433:13" pos:end="433:78"><name pos:start="433:13" pos:end="433:23">initrd_base</name> <operator pos:start="433:25" pos:end="433:25">=</operator> <operator pos:start="433:27" pos:end="433:27">(</operator><name pos:start="433:28" pos:end="433:43">KERNEL_LOAD_ADDR</name> <operator pos:start="433:45" pos:end="433:45">+</operator> <name pos:start="433:47" pos:end="433:57">kernel_size</name> <operator pos:start="433:59" pos:end="433:59">+</operator> <literal type="number" pos:start="433:61" pos:end="433:67">0x1ffff</literal><operator pos:start="433:68" pos:end="433:68">)</operator> <operator pos:start="433:70" pos:end="433:70">&amp;</operator> <operator pos:start="433:72" pos:end="433:72">~</operator><literal type="number" pos:start="433:73" pos:end="433:78">0xffff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="437:72"><expr pos:start="435:13" pos:end="437:71"><name pos:start="435:13" pos:end="435:23">initrd_size</name> <operator pos:start="435:25" pos:end="435:25">=</operator> <call pos:start="435:27" pos:end="437:71"><name pos:start="435:27" pos:end="435:45">load_image_targphys</name><argument_list pos:start="435:46" pos:end="437:71">(<argument pos:start="435:47" pos:end="435:61"><expr pos:start="435:47" pos:end="435:61"><name pos:start="435:47" pos:end="435:61">initrd_filename</name></expr></argument>, <argument pos:start="435:64" pos:end="435:74"><expr pos:start="435:64" pos:end="435:74"><name pos:start="435:64" pos:end="435:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="437:47" pos:end="437:70"><expr pos:start="437:47" pos:end="437:70"><name pos:start="437:47" pos:end="437:56">load_limit</name> <operator pos:start="437:58" pos:end="437:58">-</operator> <name pos:start="437:60" pos:end="437:70">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="439:13" pos:end="447:13"><if pos:start="439:13" pos:end="447:13">if <condition pos:start="439:16" pos:end="439:32">(<expr pos:start="439:17" pos:end="439:31"><name pos:start="439:17" pos:end="439:27">initrd_size</name> <operator pos:start="439:29" pos:end="439:29">&lt;</operator> <literal type="number" pos:start="439:31" pos:end="439:31">0</literal></expr>)</condition> <block pos:start="439:34" pos:end="447:13">{<block_content pos:start="441:17" pos:end="445:24">

                <expr_stmt pos:start="441:17" pos:end="443:41"><expr pos:start="441:17" pos:end="443:40"><call pos:start="441:17" pos:end="443:40"><name pos:start="441:17" pos:end="441:23">fprintf</name><argument_list pos:start="441:24" pos:end="443:40">(<argument pos:start="441:25" pos:end="441:30"><expr pos:start="441:25" pos:end="441:30"><name pos:start="441:25" pos:end="441:30">stderr</name></expr></argument>, <argument pos:start="441:33" pos:end="441:78"><expr pos:start="441:33" pos:end="441:78"><literal type="string" pos:start="441:33" pos:end="441:78">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="443:25" pos:end="443:39"><expr pos:start="443:25" pos:end="443:39"><name pos:start="443:25" pos:end="443:39">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="445:17" pos:end="445:24"><expr pos:start="445:17" pos:end="445:23"><call pos:start="445:17" pos:end="445:23"><name pos:start="445:17" pos:end="445:20">exit</name><argument_list pos:start="445:21" pos:end="445:23">(<argument pos:start="445:22" pos:end="445:22"><expr pos:start="445:22" pos:end="445:22"><literal type="number" pos:start="445:22" pos:end="445:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="449:11" pos:end="455:9">else <block pos:start="449:16" pos:end="455:9">{<block_content pos:start="451:13" pos:end="453:28">

            <expr_stmt pos:start="451:13" pos:end="451:28"><expr pos:start="451:13" pos:end="451:27"><name pos:start="451:13" pos:end="451:23">initrd_base</name> <operator pos:start="451:25" pos:end="451:25">=</operator> <literal type="number" pos:start="451:27" pos:end="451:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:28"><expr pos:start="453:13" pos:end="453:27"><name pos:start="453:13" pos:end="453:23">initrd_size</name> <operator pos:start="453:25" pos:end="453:25">=</operator> <literal type="number" pos:start="453:27" pos:end="453:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="461:5" pos:end="461:65"><expr pos:start="461:5" pos:end="461:64"><name pos:start="461:5" pos:end="461:12">filename</name> <operator pos:start="461:14" pos:end="461:14">=</operator> <call pos:start="461:16" pos:end="461:64"><name pos:start="461:16" pos:end="461:29">qemu_find_file</name><argument_list pos:start="461:30" pos:end="461:64">(<argument pos:start="461:31" pos:end="461:49"><expr pos:start="461:31" pos:end="461:49"><name pos:start="461:31" pos:end="461:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="461:52" pos:end="461:63"><expr pos:start="461:52" pos:end="461:63"><name pos:start="461:52" pos:end="461:63">FW_FILE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:60"><expr pos:start="463:5" pos:end="463:59"><name pos:start="463:5" pos:end="463:11">fw_size</name> <operator pos:start="463:13" pos:end="463:13">=</operator> <call pos:start="463:15" pos:end="463:59"><name pos:start="463:15" pos:end="463:33">load_image_targphys</name><argument_list pos:start="463:34" pos:end="463:59">(<argument pos:start="463:35" pos:end="463:42"><expr pos:start="463:35" pos:end="463:42"><name pos:start="463:35" pos:end="463:42">filename</name></expr></argument>, <argument pos:start="463:45" pos:end="463:45"><expr pos:start="463:45" pos:end="463:45"><literal type="number" pos:start="463:45" pos:end="463:45">0</literal></expr></argument>, <argument pos:start="463:48" pos:end="463:58"><expr pos:start="463:48" pos:end="463:58"><name pos:start="463:48" pos:end="463:58">FW_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="465:5" pos:end="471:5"><if pos:start="465:5" pos:end="471:5">if <condition pos:start="465:8" pos:end="465:20">(<expr pos:start="465:9" pos:end="465:19"><name pos:start="465:9" pos:end="465:15">fw_size</name> <operator pos:start="465:17" pos:end="465:17">&lt;</operator> <literal type="number" pos:start="465:19" pos:end="465:19">0</literal></expr>)</condition> <block pos:start="465:22" pos:end="471:5">{<block_content pos:start="467:9" pos:end="469:16">

        <expr_stmt pos:start="467:9" pos:end="467:68"><expr pos:start="467:9" pos:end="467:67"><call pos:start="467:9" pos:end="467:67"><name pos:start="467:9" pos:end="467:16">hw_error</name><argument_list pos:start="467:17" pos:end="467:67">(<argument pos:start="467:18" pos:end="467:56"><expr pos:start="467:18" pos:end="467:56"><literal type="string" pos:start="467:18" pos:end="467:56">"qemu: could not load LPAR rtas '%s'\n"</literal></expr></argument>, <argument pos:start="467:59" pos:end="467:66"><expr pos:start="467:59" pos:end="467:66"><name pos:start="467:59" pos:end="467:66">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="469:16"><expr pos:start="469:9" pos:end="469:15"><call pos:start="469:9" pos:end="469:15"><name pos:start="469:9" pos:end="469:12">exit</name><argument_list pos:start="469:13" pos:end="469:15">(<argument pos:start="469:14" pos:end="469:14"><expr pos:start="469:14" pos:end="469:14"><literal type="number" pos:start="469:14" pos:end="469:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:21"><expr pos:start="473:5" pos:end="473:20"><call pos:start="473:5" pos:end="473:20"><name pos:start="473:5" pos:end="473:10">g_free</name><argument_list pos:start="473:11" pos:end="473:20">(<argument pos:start="473:12" pos:end="473:19"><expr pos:start="473:12" pos:end="473:19"><name pos:start="473:12" pos:end="473:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="477:5" pos:end="477:31"><expr pos:start="477:5" pos:end="477:30"><name pos:start="477:5" pos:end="477:22"><name pos:start="477:5" pos:end="477:9">spapr</name><operator pos:start="477:10" pos:end="477:11">-&gt;</operator><name pos:start="477:12" pos:end="477:22">entry_point</name></name> <operator pos:start="477:24" pos:end="477:24">=</operator> <literal type="number" pos:start="477:26" pos:end="477:30">0x100</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="481:5" pos:end="481:33">/* Prepare the device tree */</comment>

    <expr_stmt pos:start="483:5" pos:end="491:61"><expr pos:start="483:5" pos:end="491:60"><name pos:start="483:5" pos:end="483:19"><name pos:start="483:5" pos:end="483:9">spapr</name><operator pos:start="483:10" pos:end="483:11">-&gt;</operator><name pos:start="483:12" pos:end="483:19">fdt_skel</name></name> <operator pos:start="483:21" pos:end="483:21">=</operator> <call pos:start="483:23" pos:end="491:60"><name pos:start="483:23" pos:end="483:43">spapr_create_fdt_skel</name><argument_list pos:start="483:44" pos:end="491:60">(<argument pos:start="483:45" pos:end="483:53"><expr pos:start="483:45" pos:end="483:53"><name pos:start="483:45" pos:end="483:53">cpu_model</name></expr></argument>,

                                            <argument pos:start="485:45" pos:end="485:55"><expr pos:start="485:45" pos:end="485:55"><name pos:start="485:45" pos:end="485:55">initrd_base</name></expr></argument>, <argument pos:start="485:58" pos:end="485:68"><expr pos:start="485:58" pos:end="485:68"><name pos:start="485:58" pos:end="485:68">initrd_size</name></expr></argument>,

                                            <argument pos:start="487:45" pos:end="487:55"><expr pos:start="487:45" pos:end="487:55"><name pos:start="487:45" pos:end="487:55">kernel_size</name></expr></argument>,

                                            <argument pos:start="489:45" pos:end="489:55"><expr pos:start="489:45" pos:end="489:55"><name pos:start="489:45" pos:end="489:55">boot_device</name></expr></argument>, <argument pos:start="489:58" pos:end="489:71"><expr pos:start="489:58" pos:end="489:71"><name pos:start="489:58" pos:end="489:71">kernel_cmdline</name></expr></argument>,

                                            <argument pos:start="491:45" pos:end="491:59"><expr pos:start="491:45" pos:end="491:59"><name pos:start="491:45" pos:end="491:59"><name pos:start="491:45" pos:end="491:49">spapr</name><operator pos:start="491:50" pos:end="491:51">-&gt;</operator><name pos:start="491:52" pos:end="491:59">epow_irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="493:36"><expr pos:start="493:5" pos:end="493:35"><call pos:start="493:5" pos:end="493:35"><name pos:start="493:5" pos:end="493:10">assert</name><argument_list pos:start="493:11" pos:end="493:35">(<argument pos:start="493:12" pos:end="493:34"><expr pos:start="493:12" pos:end="493:34"><name pos:start="493:12" pos:end="493:26"><name pos:start="493:12" pos:end="493:16">spapr</name><operator pos:start="493:17" pos:end="493:18">-&gt;</operator><name pos:start="493:19" pos:end="493:26">fdt_skel</name></name> <operator pos:start="493:28" pos:end="493:29">!=</operator> <name pos:start="493:31" pos:end="493:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
