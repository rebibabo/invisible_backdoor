<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9923.c" pos:tabs="8"><function pos:start="1:1" pos:end="843:9"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">tcg_optimize</name><parameter_list pos:start="1:18" pos:end="1:32">(<parameter pos:start="1:19" pos:end="1:31"><decl pos:start="1:19" pos:end="1:31"><type pos:start="1:19" pos:end="1:30"><name pos:start="1:19" pos:end="1:28">TCGContext</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:31">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="843:9">{<block_content pos:start="5:5" pos:end="841:18">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">oi</name></decl>, <decl pos:start="5:13" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:19">oi_next</name></decl>, <decl pos:start="5:22" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:29">nb_temps</name></decl>, <decl pos:start="5:32" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:32" pos:end="5:41">nb_globals</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">TCGOp</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:18">prev_mb</name> <init pos:start="7:20" pos:end="7:25">= <expr pos:start="7:22" pos:end="7:25"><name pos:start="7:22" pos:end="7:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:24">tcg_temp_info</name></name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:31">infos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">TCGTempSet</name></type> <name pos:start="11:16" pos:end="11:25">temps_used</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="21:60">/* Array VALS has an element for each temp.

       If this temp holds a constant then its value is kept in VALS' element.

       If this temp is a copy of other ones then the other copies are

       available through the doubly linked circular list. */</comment>



    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:12">nb_temps</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:26"><name pos:start="25:16" pos:end="25:16">s</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:26">nb_temps</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:14">nb_globals</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:30"><name pos:start="27:18" pos:end="27:18">s</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:30">nb_globals</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><call pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:15">bitmap_zero</name><argument_list pos:start="29:16" pos:end="29:39">(<argument pos:start="29:17" pos:end="29:28"><expr pos:start="29:17" pos:end="29:28"><name pos:start="29:17" pos:end="29:28"><name pos:start="29:17" pos:end="29:26">temps_used</name><operator pos:start="29:27" pos:end="29:27">.</operator><name pos:start="29:28" pos:end="29:28">l</name></name></expr></argument>, <argument pos:start="29:31" pos:end="29:38"><expr pos:start="29:31" pos:end="29:38"><name pos:start="29:31" pos:end="29:38">nb_temps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:64"><expr pos:start="31:5" pos:end="31:63"><name pos:start="31:5" pos:end="31:9">infos</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:63"><name pos:start="31:13" pos:end="31:22">tcg_malloc</name><argument_list pos:start="31:23" pos:end="31:63">(<argument pos:start="31:24" pos:end="31:62"><expr pos:start="31:24" pos:end="31:62"><sizeof pos:start="31:24" pos:end="31:51">sizeof<argument_list pos:start="31:30" pos:end="31:51">(<argument pos:start="31:31" pos:end="31:50"><expr pos:start="31:31" pos:end="31:50">struct <name pos:start="31:38" pos:end="31:50">tcg_temp_info</name></expr></argument>)</argument_list></sizeof> <operator pos:start="31:53" pos:end="31:53">*</operator> <name pos:start="31:55" pos:end="31:62">nb_temps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="35:5" pos:end="421:9">for <control pos:start="35:9" pos:end="35:59">(<init pos:start="35:10" pos:end="35:36"><expr pos:start="35:10" pos:end="35:35"><name pos:start="35:10" pos:end="35:11">oi</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:30"><name pos:start="35:15" pos:end="35:15">s</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:27">gen_op_buf</name><index pos:start="35:28" pos:end="35:30">[<expr pos:start="35:29" pos:end="35:29"><literal type="number" pos:start="35:29" pos:end="35:29">0</literal></expr>]</index></name><operator pos:start="35:31" pos:end="35:31">.</operator><name pos:start="35:32" pos:end="35:35">next</name></expr>;</init> <condition pos:start="35:38" pos:end="35:45"><expr pos:start="35:38" pos:end="35:44"><name pos:start="35:38" pos:end="35:39">oi</name> <operator pos:start="35:41" pos:end="35:42">!=</operator> <literal type="number" pos:start="35:44" pos:end="35:44">0</literal></expr>;</condition> <incr pos:start="35:47" pos:end="35:58"><expr pos:start="35:47" pos:end="35:58"><name pos:start="35:47" pos:end="35:48">oi</name> <operator pos:start="35:50" pos:end="35:50">=</operator> <name pos:start="35:52" pos:end="35:58">oi_next</name></expr></incr>)</control> <block pos:start="35:61" pos:end="421:9">{<block_content pos:start="37:9" pos:end="419:18">

        <decl_stmt pos:start="37:9" pos:end="37:50"><decl pos:start="37:9" pos:end="37:29"><type pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:24">tcg_target_ulong</name></type> <name pos:start="37:26" pos:end="37:29">mask</name></decl>, <decl pos:start="37:32" pos:end="37:39"><type ref="prev" pos:start="37:9" pos:end="37:24"/><name pos:start="37:32" pos:end="37:39">partmask</name></decl>, <decl pos:start="37:42" pos:end="37:49"><type ref="prev" pos:start="37:9" pos:end="37:24"/><name pos:start="37:42" pos:end="37:49">affected</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:34"><decl pos:start="39:9" pos:end="39:20"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:20">nb_oargs</name></decl>, <decl pos:start="39:23" pos:end="39:30"><type ref="prev" pos:start="39:9" pos:end="39:11"/><name pos:start="39:23" pos:end="39:30">nb_iargs</name></decl>, <decl pos:start="39:33" pos:end="39:33"><type ref="prev" pos:start="39:9" pos:end="39:11"/><name pos:start="39:33" pos:end="39:33">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:19"><decl pos:start="41:9" pos:end="41:18"><type pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:14">TCGArg</name></type> <name pos:start="41:16" pos:end="41:18">tmp</name></decl>;</decl_stmt>



        <decl_stmt pos:start="45:9" pos:end="45:46"><decl pos:start="45:9" pos:end="45:45"><type pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:13">TCGOp</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier> <specifier pos:start="45:17" pos:end="45:21">const</specifier></type> <name pos:start="45:23" pos:end="45:24">op</name> <init pos:start="45:26" pos:end="45:45">= <expr pos:start="45:28" pos:end="45:45"><operator pos:start="45:28" pos:end="45:28">&amp;</operator><name pos:start="45:29" pos:end="45:45"><name pos:start="45:29" pos:end="45:29">s</name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:41">gen_op_buf</name><index pos:start="45:42" pos:end="45:45">[<expr pos:start="45:43" pos:end="45:44"><name pos:start="45:43" pos:end="45:44">oi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:32"><decl pos:start="47:9" pos:end="47:31"><type pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:17">TCGOpcode</name></type> <name pos:start="47:19" pos:end="47:21">opc</name> <init pos:start="47:23" pos:end="47:31">= <expr pos:start="47:25" pos:end="47:31"><name pos:start="47:25" pos:end="47:31"><name pos:start="47:25" pos:end="47:26">op</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:31">opc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:48"><decl pos:start="49:9" pos:end="49:47"><type pos:start="49:9" pos:end="49:24"><specifier pos:start="49:9" pos:end="49:13">const</specifier> <name pos:start="49:15" pos:end="49:22">TCGOpDef</name> <modifier pos:start="49:24" pos:end="49:24">*</modifier></type><name pos:start="49:25" pos:end="49:27">def</name> <init pos:start="49:29" pos:end="49:47">= <expr pos:start="49:31" pos:end="49:47"><operator pos:start="49:31" pos:end="49:31">&amp;</operator><name pos:start="49:32" pos:end="49:47"><name pos:start="49:32" pos:end="49:42">tcg_op_defs</name><index pos:start="49:43" pos:end="49:47">[<expr pos:start="49:44" pos:end="49:46"><name pos:start="49:44" pos:end="49:46">opc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:15">oi_next</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:26"><name pos:start="53:19" pos:end="53:20">op</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:26">next</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="57:9" pos:end="59:30">/* Count the arguments, and initialize the temps that are

           going to be used */</comment>

        <if_stmt pos:start="61:9" pos:end="91:9"><if pos:start="61:9" pos:end="79:9">if <condition pos:start="61:12" pos:end="61:33">(<expr pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:15">opc</name> <operator pos:start="61:17" pos:end="61:18">==</operator> <name pos:start="61:20" pos:end="61:32">INDEX_op_call</name></expr>)</condition> <block pos:start="61:35" pos:end="79:9">{<block_content pos:start="63:13" pos:end="77:13">

            <expr_stmt pos:start="63:13" pos:end="63:33"><expr pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:20">nb_oargs</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <name pos:start="63:24" pos:end="63:32"><name pos:start="63:24" pos:end="63:25">op</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:32">callo</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:20">nb_iargs</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:32"><name pos:start="65:24" pos:end="65:25">op</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:32">calli</name></name></expr>;</expr_stmt>

            <for pos:start="67:13" pos:end="77:13">for <control pos:start="67:17" pos:end="67:53">(<init pos:start="67:18" pos:end="67:23"><expr pos:start="67:18" pos:end="67:22"><name pos:start="67:18" pos:end="67:18">i</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>;</init> <condition pos:start="67:25" pos:end="67:48"><expr pos:start="67:25" pos:end="67:47"><name pos:start="67:25" pos:end="67:25">i</name> <operator pos:start="67:27" pos:end="67:27">&lt;</operator> <name pos:start="67:29" pos:end="67:36">nb_oargs</name> <operator pos:start="67:38" pos:end="67:38">+</operator> <name pos:start="67:40" pos:end="67:47">nb_iargs</name></expr>;</condition> <incr pos:start="67:50" pos:end="67:52"><expr pos:start="67:50" pos:end="67:52"><name pos:start="67:50" pos:end="67:50">i</name><operator pos:start="67:51" pos:end="67:52">++</operator></expr></incr>)</control> <block pos:start="67:55" pos:end="77:13">{<block_content pos:start="69:17" pos:end="75:17">

                <decl_stmt pos:start="69:17" pos:end="69:52"><decl pos:start="69:17" pos:end="69:51"><type pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:23">TCGTemp</name> <modifier pos:start="69:25" pos:end="69:25">*</modifier></type><name pos:start="69:26" pos:end="69:27">ts</name> <init pos:start="69:29" pos:end="69:51">= <expr pos:start="69:31" pos:end="69:51"><call pos:start="69:31" pos:end="69:51"><name pos:start="69:31" pos:end="69:38">arg_temp</name><argument_list pos:start="69:39" pos:end="69:51">(<argument pos:start="69:40" pos:end="69:50"><expr pos:start="69:40" pos:end="69:50"><name pos:start="69:40" pos:end="69:50"><name pos:start="69:40" pos:end="69:41">op</name><operator pos:start="69:42" pos:end="69:43">-&gt;</operator><name pos:start="69:44" pos:end="69:47">args</name><index pos:start="69:48" pos:end="69:50">[<expr pos:start="69:49" pos:end="69:49"><name pos:start="69:49" pos:end="69:49">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="71:17" pos:end="75:17"><if pos:start="71:17" pos:end="75:17">if <condition pos:start="71:20" pos:end="71:23">(<expr pos:start="71:21" pos:end="71:22"><name pos:start="71:21" pos:end="71:22">ts</name></expr>)</condition> <block pos:start="71:25" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:57">

                    <expr_stmt pos:start="73:21" pos:end="73:57"><expr pos:start="73:21" pos:end="73:56"><call pos:start="73:21" pos:end="73:56"><name pos:start="73:21" pos:end="73:32">init_ts_info</name><argument_list pos:start="73:33" pos:end="73:56">(<argument pos:start="73:34" pos:end="73:38"><expr pos:start="73:34" pos:end="73:38"><name pos:start="73:34" pos:end="73:38">infos</name></expr></argument>, <argument pos:start="73:41" pos:end="73:51"><expr pos:start="73:41" pos:end="73:51"><operator pos:start="73:41" pos:end="73:41">&amp;</operator><name pos:start="73:42" pos:end="73:51">temps_used</name></expr></argument>, <argument pos:start="73:54" pos:end="73:55"><expr pos:start="73:54" pos:end="73:55"><name pos:start="73:54" pos:end="73:55">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="91:9">else <block pos:start="79:16" pos:end="91:9">{<block_content pos:start="81:13" pos:end="89:13">

            <expr_stmt pos:start="81:13" pos:end="81:37"><expr pos:start="81:13" pos:end="81:36"><name pos:start="81:13" pos:end="81:20">nb_oargs</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:36"><name pos:start="81:24" pos:end="81:26">def</name><operator pos:start="81:27" pos:end="81:28">-&gt;</operator><name pos:start="81:29" pos:end="81:36">nb_oargs</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:37"><expr pos:start="83:13" pos:end="83:36"><name pos:start="83:13" pos:end="83:20">nb_iargs</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:36"><name pos:start="83:24" pos:end="83:26">def</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:36">nb_iargs</name></name></expr>;</expr_stmt>

            <for pos:start="85:13" pos:end="89:13">for <control pos:start="85:17" pos:end="85:53">(<init pos:start="85:18" pos:end="85:23"><expr pos:start="85:18" pos:end="85:22"><name pos:start="85:18" pos:end="85:18">i</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:22">0</literal></expr>;</init> <condition pos:start="85:25" pos:end="85:48"><expr pos:start="85:25" pos:end="85:47"><name pos:start="85:25" pos:end="85:25">i</name> <operator pos:start="85:27" pos:end="85:27">&lt;</operator> <name pos:start="85:29" pos:end="85:36">nb_oargs</name> <operator pos:start="85:38" pos:end="85:38">+</operator> <name pos:start="85:40" pos:end="85:47">nb_iargs</name></expr>;</condition> <incr pos:start="85:50" pos:end="85:52"><expr pos:start="85:50" pos:end="85:52"><name pos:start="85:50" pos:end="85:50">i</name><operator pos:start="85:51" pos:end="85:52">++</operator></expr></incr>)</control> <block pos:start="85:55" pos:end="89:13">{<block_content pos:start="87:17" pos:end="87:63">

                <expr_stmt pos:start="87:17" pos:end="87:63"><expr pos:start="87:17" pos:end="87:62"><call pos:start="87:17" pos:end="87:62"><name pos:start="87:17" pos:end="87:29">init_arg_info</name><argument_list pos:start="87:30" pos:end="87:62">(<argument pos:start="87:31" pos:end="87:35"><expr pos:start="87:31" pos:end="87:35"><name pos:start="87:31" pos:end="87:35">infos</name></expr></argument>, <argument pos:start="87:38" pos:end="87:48"><expr pos:start="87:38" pos:end="87:48"><operator pos:start="87:38" pos:end="87:38">&amp;</operator><name pos:start="87:39" pos:end="87:48">temps_used</name></expr></argument>, <argument pos:start="87:51" pos:end="87:61"><expr pos:start="87:51" pos:end="87:61"><name pos:start="87:51" pos:end="87:61"><name pos:start="87:51" pos:end="87:52">op</name><operator pos:start="87:53" pos:end="87:54">-&gt;</operator><name pos:start="87:55" pos:end="87:58">args</name><index pos:start="87:59" pos:end="87:61">[<expr pos:start="87:60" pos:end="87:60"><name pos:start="87:60" pos:end="87:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="95:9" pos:end="95:33">/* Do copy propagation */</comment>

        <for pos:start="97:9" pos:end="107:9">for <control pos:start="97:13" pos:end="97:56">(<init pos:start="97:14" pos:end="97:26"><expr pos:start="97:14" pos:end="97:25"><name pos:start="97:14" pos:end="97:14">i</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <name pos:start="97:18" pos:end="97:25">nb_oargs</name></expr>;</init> <condition pos:start="97:28" pos:end="97:51"><expr pos:start="97:28" pos:end="97:50"><name pos:start="97:28" pos:end="97:28">i</name> <operator pos:start="97:30" pos:end="97:30">&lt;</operator> <name pos:start="97:32" pos:end="97:39">nb_oargs</name> <operator pos:start="97:41" pos:end="97:41">+</operator> <name pos:start="97:43" pos:end="97:50">nb_iargs</name></expr>;</condition> <incr pos:start="97:53" pos:end="97:55"><expr pos:start="97:53" pos:end="97:55"><name pos:start="97:53" pos:end="97:53">i</name><operator pos:start="97:54" pos:end="97:55">++</operator></expr></incr>)</control> <block pos:start="97:58" pos:end="107:9">{<block_content pos:start="99:13" pos:end="105:13">

            <decl_stmt pos:start="99:13" pos:end="99:48"><decl pos:start="99:13" pos:end="99:47"><type pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:19">TCGTemp</name> <modifier pos:start="99:21" pos:end="99:21">*</modifier></type><name pos:start="99:22" pos:end="99:23">ts</name> <init pos:start="99:25" pos:end="99:47">= <expr pos:start="99:27" pos:end="99:47"><call pos:start="99:27" pos:end="99:47"><name pos:start="99:27" pos:end="99:34">arg_temp</name><argument_list pos:start="99:35" pos:end="99:47">(<argument pos:start="99:36" pos:end="99:46"><expr pos:start="99:36" pos:end="99:46"><name pos:start="99:36" pos:end="99:46"><name pos:start="99:36" pos:end="99:37">op</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:43">args</name><index pos:start="99:44" pos:end="99:46">[<expr pos:start="99:45" pos:end="99:45"><name pos:start="99:45" pos:end="99:45">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="101:13" pos:end="105:13"><if pos:start="101:13" pos:end="105:13">if <condition pos:start="101:16" pos:end="101:37">(<expr pos:start="101:17" pos:end="101:36"><name pos:start="101:17" pos:end="101:18">ts</name> <operator pos:start="101:20" pos:end="101:21">&amp;&amp;</operator> <call pos:start="101:23" pos:end="101:36"><name pos:start="101:23" pos:end="101:32">ts_is_copy</name><argument_list pos:start="101:33" pos:end="101:36">(<argument pos:start="101:34" pos:end="101:35"><expr pos:start="101:34" pos:end="101:35"><name pos:start="101:34" pos:end="101:35">ts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:39" pos:end="105:13">{<block_content pos:start="103:17" pos:end="103:64">

                <expr_stmt pos:start="103:17" pos:end="103:64"><expr pos:start="103:17" pos:end="103:63"><name pos:start="103:17" pos:end="103:27"><name pos:start="103:17" pos:end="103:18">op</name><operator pos:start="103:19" pos:end="103:20">-&gt;</operator><name pos:start="103:21" pos:end="103:24">args</name><index pos:start="103:25" pos:end="103:27">[<expr pos:start="103:26" pos:end="103:26"><name pos:start="103:26" pos:end="103:26">i</name></expr>]</index></name> <operator pos:start="103:29" pos:end="103:29">=</operator> <call pos:start="103:31" pos:end="103:63"><name pos:start="103:31" pos:end="103:38">temp_arg</name><argument_list pos:start="103:39" pos:end="103:63">(<argument pos:start="103:40" pos:end="103:62"><expr pos:start="103:40" pos:end="103:62"><call pos:start="103:40" pos:end="103:62"><name pos:start="103:40" pos:end="103:55">find_better_copy</name><argument_list pos:start="103:56" pos:end="103:62">(<argument pos:start="103:57" pos:end="103:57"><expr pos:start="103:57" pos:end="103:57"><name pos:start="103:57" pos:end="103:57">s</name></expr></argument>, <argument pos:start="103:60" pos:end="103:61"><expr pos:start="103:60" pos:end="103:61"><name pos:start="103:60" pos:end="103:61">ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="111:9" pos:end="111:70">/* For commutative operations make constant second argument */</comment>

        <switch pos:start="113:9" pos:end="221:9">switch <condition pos:start="113:16" pos:end="113:20">(<expr pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:19">opc</name></expr>)</condition> <block pos:start="113:22" pos:end="221:9">{<block_content pos:start="115:9" pos:end="219:18">

        <expr_stmt pos:start="115:9" pos:end="135:70"><expr pos:start="115:9" pos:end="135:69"><call pos:start="115:9" pos:end="115:26"><name pos:start="115:9" pos:end="115:21">CASE_OP_32_64</name><argument_list pos:start="115:22" pos:end="115:26">(<argument pos:start="115:23" pos:end="115:25"><expr pos:start="115:23" pos:end="115:25"><name pos:start="115:23" pos:end="115:25">add</name></expr></argument>)</argument_list></call><operator pos:start="115:27" pos:end="115:27">:</operator>

        <call pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:21">CASE_OP_32_64</name><argument_list pos:start="117:22" pos:end="117:26">(<argument pos:start="117:23" pos:end="117:25"><expr pos:start="117:23" pos:end="117:25"><name pos:start="117:23" pos:end="117:25">mul</name></expr></argument>)</argument_list></call><operator pos:start="117:27" pos:end="117:27">:</operator>

        <call pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:21">CASE_OP_32_64</name><argument_list pos:start="119:22" pos:end="119:26">(<argument pos:start="119:23" pos:end="119:25"><expr pos:start="119:23" pos:end="119:25"><name pos:start="119:23" pos:end="119:25">and</name></expr></argument>)</argument_list></call><operator pos:start="119:27" pos:end="119:27">:</operator>

        <call pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:21">CASE_OP_32_64</name><argument_list pos:start="121:22" pos:end="121:25">(<argument pos:start="121:23" pos:end="121:24"><expr pos:start="121:23" pos:end="121:24"><name pos:start="121:23" pos:end="121:24">or</name></expr></argument>)</argument_list></call><operator pos:start="121:26" pos:end="121:26">:</operator>

        <call pos:start="123:9" pos:end="123:26"><name pos:start="123:9" pos:end="123:21">CASE_OP_32_64</name><argument_list pos:start="123:22" pos:end="123:26">(<argument pos:start="123:23" pos:end="123:25"><expr pos:start="123:23" pos:end="123:25"><name pos:start="123:23" pos:end="123:25">xor</name></expr></argument>)</argument_list></call><operator pos:start="123:27" pos:end="123:27">:</operator>

        <call pos:start="125:9" pos:end="125:26"><name pos:start="125:9" pos:end="125:21">CASE_OP_32_64</name><argument_list pos:start="125:22" pos:end="125:26">(<argument pos:start="125:23" pos:end="125:25"><expr pos:start="125:23" pos:end="125:25"><name pos:start="125:23" pos:end="125:25">eqv</name></expr></argument>)</argument_list></call><operator pos:start="125:27" pos:end="125:27">:</operator>

        <call pos:start="127:9" pos:end="127:27"><name pos:start="127:9" pos:end="127:21">CASE_OP_32_64</name><argument_list pos:start="127:22" pos:end="127:27">(<argument pos:start="127:23" pos:end="127:26"><expr pos:start="127:23" pos:end="127:26"><name pos:start="127:23" pos:end="127:26">nand</name></expr></argument>)</argument_list></call><operator pos:start="127:28" pos:end="127:28">:</operator>

        <call pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:21">CASE_OP_32_64</name><argument_list pos:start="129:22" pos:end="129:26">(<argument pos:start="129:23" pos:end="129:25"><expr pos:start="129:23" pos:end="129:25"><name pos:start="129:23" pos:end="129:25">nor</name></expr></argument>)</argument_list></call><operator pos:start="129:27" pos:end="129:27">:</operator>

        <call pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:21">CASE_OP_32_64</name><argument_list pos:start="131:22" pos:end="131:28">(<argument pos:start="131:23" pos:end="131:27"><expr pos:start="131:23" pos:end="131:27"><name pos:start="131:23" pos:end="131:27">muluh</name></expr></argument>)</argument_list></call><operator pos:start="131:29" pos:end="131:29">:</operator>

        <call pos:start="133:9" pos:end="133:28"><name pos:start="133:9" pos:end="133:21">CASE_OP_32_64</name><argument_list pos:start="133:22" pos:end="133:28">(<argument pos:start="133:23" pos:end="133:27"><expr pos:start="133:23" pos:end="133:27"><name pos:start="133:23" pos:end="133:27">mulsh</name></expr></argument>)</argument_list></call><operator pos:start="133:29" pos:end="133:29">:</operator>

            <call pos:start="135:13" pos:end="135:69"><name pos:start="135:13" pos:end="135:28">swap_commutative</name><argument_list pos:start="135:29" pos:end="135:69">(<argument pos:start="135:30" pos:end="135:40"><expr pos:start="135:30" pos:end="135:40"><name pos:start="135:30" pos:end="135:40"><name pos:start="135:30" pos:end="135:31">op</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:37">args</name><index pos:start="135:38" pos:end="135:40">[<expr pos:start="135:39" pos:end="135:39"><literal type="number" pos:start="135:39" pos:end="135:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="135:43" pos:end="135:54"><expr pos:start="135:43" pos:end="135:54"><operator pos:start="135:43" pos:end="135:43">&amp;</operator><name pos:start="135:44" pos:end="135:54"><name pos:start="135:44" pos:end="135:45">op</name><operator pos:start="135:46" pos:end="135:47">-&gt;</operator><name pos:start="135:48" pos:end="135:51">args</name><index pos:start="135:52" pos:end="135:54">[<expr pos:start="135:53" pos:end="135:53"><literal type="number" pos:start="135:53" pos:end="135:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="135:57" pos:end="135:68"><expr pos:start="135:57" pos:end="135:68"><operator pos:start="135:57" pos:end="135:57">&amp;</operator><name pos:start="135:58" pos:end="135:68"><name pos:start="135:58" pos:end="135:59">op</name><operator pos:start="135:60" pos:end="135:61">-&gt;</operator><name pos:start="135:62" pos:end="135:65">args</name><index pos:start="135:66" pos:end="135:68">[<expr pos:start="135:67" pos:end="135:67"><literal type="number" pos:start="135:67" pos:end="135:67">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        <expr_stmt pos:start="139:9" pos:end="139:30"><expr pos:start="139:9" pos:end="139:30"><call pos:start="139:9" pos:end="139:29"><name pos:start="139:9" pos:end="139:21">CASE_OP_32_64</name><argument_list pos:start="139:22" pos:end="139:29">(<argument pos:start="139:23" pos:end="139:28"><expr pos:start="139:23" pos:end="139:28"><name pos:start="139:23" pos:end="139:28">brcond</name></expr></argument>)</argument_list></call><operator pos:start="139:30" pos:end="139:30">:</operator></expr></expr_stmt>

            <if_stmt pos:start="141:13" pos:end="145:13"><if pos:start="141:13" pos:end="145:13">if <condition pos:start="141:16" pos:end="141:65">(<expr pos:start="141:17" pos:end="141:64"><call pos:start="141:17" pos:end="141:64"><name pos:start="141:17" pos:end="141:32">swap_commutative</name><argument_list pos:start="141:33" pos:end="141:64">(<argument pos:start="141:34" pos:end="141:35"><expr pos:start="141:34" pos:end="141:35"><operator pos:start="141:34" pos:end="141:34">-</operator><literal type="number" pos:start="141:35" pos:end="141:35">1</literal></expr></argument>, <argument pos:start="141:38" pos:end="141:49"><expr pos:start="141:38" pos:end="141:49"><operator pos:start="141:38" pos:end="141:38">&amp;</operator><name pos:start="141:39" pos:end="141:49"><name pos:start="141:39" pos:end="141:40">op</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:46">args</name><index pos:start="141:47" pos:end="141:49">[<expr pos:start="141:48" pos:end="141:48"><literal type="number" pos:start="141:48" pos:end="141:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="141:52" pos:end="141:63"><expr pos:start="141:52" pos:end="141:63"><operator pos:start="141:52" pos:end="141:52">&amp;</operator><name pos:start="141:53" pos:end="141:63"><name pos:start="141:53" pos:end="141:54">op</name><operator pos:start="141:55" pos:end="141:56">-&gt;</operator><name pos:start="141:57" pos:end="141:60">args</name><index pos:start="141:61" pos:end="141:63">[<expr pos:start="141:62" pos:end="141:62"><literal type="number" pos:start="141:62" pos:end="141:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:67" pos:end="145:13">{<block_content pos:start="143:17" pos:end="143:57">

                <expr_stmt pos:start="143:17" pos:end="143:57"><expr pos:start="143:17" pos:end="143:56"><name pos:start="143:17" pos:end="143:27"><name pos:start="143:17" pos:end="143:18">op</name><operator pos:start="143:19" pos:end="143:20">-&gt;</operator><name pos:start="143:21" pos:end="143:24">args</name><index pos:start="143:25" pos:end="143:27">[<expr pos:start="143:26" pos:end="143:26"><literal type="number" pos:start="143:26" pos:end="143:26">2</literal></expr>]</index></name> <operator pos:start="143:29" pos:end="143:29">=</operator> <call pos:start="143:31" pos:end="143:56"><name pos:start="143:31" pos:end="143:43">tcg_swap_cond</name><argument_list pos:start="143:44" pos:end="143:56">(<argument pos:start="143:45" pos:end="143:55"><expr pos:start="143:45" pos:end="143:55"><name pos:start="143:45" pos:end="143:55"><name pos:start="143:45" pos:end="143:46">op</name><operator pos:start="143:47" pos:end="143:48">-&gt;</operator><name pos:start="143:49" pos:end="143:52">args</name><index pos:start="143:53" pos:end="143:55">[<expr pos:start="143:54" pos:end="143:54"><literal type="number" pos:start="143:54" pos:end="143:54">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <expr_stmt pos:start="149:9" pos:end="149:31"><expr pos:start="149:9" pos:end="149:31"><call pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:21">CASE_OP_32_64</name><argument_list pos:start="149:22" pos:end="149:30">(<argument pos:start="149:23" pos:end="149:29"><expr pos:start="149:23" pos:end="149:29"><name pos:start="149:23" pos:end="149:29">setcond</name></expr></argument>)</argument_list></call><operator pos:start="149:31" pos:end="149:31">:</operator></expr></expr_stmt>

            <if_stmt pos:start="151:13" pos:end="155:13"><if pos:start="151:13" pos:end="155:13">if <condition pos:start="151:16" pos:end="151:74">(<expr pos:start="151:17" pos:end="151:73"><call pos:start="151:17" pos:end="151:73"><name pos:start="151:17" pos:end="151:32">swap_commutative</name><argument_list pos:start="151:33" pos:end="151:73">(<argument pos:start="151:34" pos:end="151:44"><expr pos:start="151:34" pos:end="151:44"><name pos:start="151:34" pos:end="151:44"><name pos:start="151:34" pos:end="151:35">op</name><operator pos:start="151:36" pos:end="151:37">-&gt;</operator><name pos:start="151:38" pos:end="151:41">args</name><index pos:start="151:42" pos:end="151:44">[<expr pos:start="151:43" pos:end="151:43"><literal type="number" pos:start="151:43" pos:end="151:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="151:47" pos:end="151:58"><expr pos:start="151:47" pos:end="151:58"><operator pos:start="151:47" pos:end="151:47">&amp;</operator><name pos:start="151:48" pos:end="151:58"><name pos:start="151:48" pos:end="151:49">op</name><operator pos:start="151:50" pos:end="151:51">-&gt;</operator><name pos:start="151:52" pos:end="151:55">args</name><index pos:start="151:56" pos:end="151:58">[<expr pos:start="151:57" pos:end="151:57"><literal type="number" pos:start="151:57" pos:end="151:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="151:61" pos:end="151:72"><expr pos:start="151:61" pos:end="151:72"><operator pos:start="151:61" pos:end="151:61">&amp;</operator><name pos:start="151:62" pos:end="151:72"><name pos:start="151:62" pos:end="151:63">op</name><operator pos:start="151:64" pos:end="151:65">-&gt;</operator><name pos:start="151:66" pos:end="151:69">args</name><index pos:start="151:70" pos:end="151:72">[<expr pos:start="151:71" pos:end="151:71"><literal type="number" pos:start="151:71" pos:end="151:71">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:76" pos:end="155:13">{<block_content pos:start="153:17" pos:end="153:57">

                <expr_stmt pos:start="153:17" pos:end="153:57"><expr pos:start="153:17" pos:end="153:56"><name pos:start="153:17" pos:end="153:27"><name pos:start="153:17" pos:end="153:18">op</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:24">args</name><index pos:start="153:25" pos:end="153:27">[<expr pos:start="153:26" pos:end="153:26"><literal type="number" pos:start="153:26" pos:end="153:26">3</literal></expr>]</index></name> <operator pos:start="153:29" pos:end="153:29">=</operator> <call pos:start="153:31" pos:end="153:56"><name pos:start="153:31" pos:end="153:43">tcg_swap_cond</name><argument_list pos:start="153:44" pos:end="153:56">(<argument pos:start="153:45" pos:end="153:55"><expr pos:start="153:45" pos:end="153:55"><name pos:start="153:45" pos:end="153:55"><name pos:start="153:45" pos:end="153:46">op</name><operator pos:start="153:47" pos:end="153:48">-&gt;</operator><name pos:start="153:49" pos:end="153:52">args</name><index pos:start="153:53" pos:end="153:55">[<expr pos:start="153:54" pos:end="153:54"><literal type="number" pos:start="153:54" pos:end="153:54">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="157:13" pos:end="157:18">break;</break>

        <expr_stmt pos:start="159:9" pos:end="159:31"><expr pos:start="159:9" pos:end="159:31"><call pos:start="159:9" pos:end="159:30"><name pos:start="159:9" pos:end="159:21">CASE_OP_32_64</name><argument_list pos:start="159:22" pos:end="159:30">(<argument pos:start="159:23" pos:end="159:29"><expr pos:start="159:23" pos:end="159:29"><name pos:start="159:23" pos:end="159:29">movcond</name></expr></argument>)</argument_list></call><operator pos:start="159:31" pos:end="159:31">:</operator></expr></expr_stmt>

            <if_stmt pos:start="161:13" pos:end="165:13"><if pos:start="161:13" pos:end="165:13">if <condition pos:start="161:16" pos:end="161:65">(<expr pos:start="161:17" pos:end="161:64"><call pos:start="161:17" pos:end="161:64"><name pos:start="161:17" pos:end="161:32">swap_commutative</name><argument_list pos:start="161:33" pos:end="161:64">(<argument pos:start="161:34" pos:end="161:35"><expr pos:start="161:34" pos:end="161:35"><operator pos:start="161:34" pos:end="161:34">-</operator><literal type="number" pos:start="161:35" pos:end="161:35">1</literal></expr></argument>, <argument pos:start="161:38" pos:end="161:49"><expr pos:start="161:38" pos:end="161:49"><operator pos:start="161:38" pos:end="161:38">&amp;</operator><name pos:start="161:39" pos:end="161:49"><name pos:start="161:39" pos:end="161:40">op</name><operator pos:start="161:41" pos:end="161:42">-&gt;</operator><name pos:start="161:43" pos:end="161:46">args</name><index pos:start="161:47" pos:end="161:49">[<expr pos:start="161:48" pos:end="161:48"><literal type="number" pos:start="161:48" pos:end="161:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="161:52" pos:end="161:63"><expr pos:start="161:52" pos:end="161:63"><operator pos:start="161:52" pos:end="161:52">&amp;</operator><name pos:start="161:53" pos:end="161:63"><name pos:start="161:53" pos:end="161:54">op</name><operator pos:start="161:55" pos:end="161:56">-&gt;</operator><name pos:start="161:57" pos:end="161:60">args</name><index pos:start="161:61" pos:end="161:63">[<expr pos:start="161:62" pos:end="161:62"><literal type="number" pos:start="161:62" pos:end="161:62">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="161:67" pos:end="165:13">{<block_content pos:start="163:17" pos:end="163:57">

                <expr_stmt pos:start="163:17" pos:end="163:57"><expr pos:start="163:17" pos:end="163:56"><name pos:start="163:17" pos:end="163:27"><name pos:start="163:17" pos:end="163:18">op</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:24">args</name><index pos:start="163:25" pos:end="163:27">[<expr pos:start="163:26" pos:end="163:26"><literal type="number" pos:start="163:26" pos:end="163:26">5</literal></expr>]</index></name> <operator pos:start="163:29" pos:end="163:29">=</operator> <call pos:start="163:31" pos:end="163:56"><name pos:start="163:31" pos:end="163:43">tcg_swap_cond</name><argument_list pos:start="163:44" pos:end="163:56">(<argument pos:start="163:45" pos:end="163:55"><expr pos:start="163:45" pos:end="163:55"><name pos:start="163:45" pos:end="163:55"><name pos:start="163:45" pos:end="163:46">op</name><operator pos:start="163:47" pos:end="163:48">-&gt;</operator><name pos:start="163:49" pos:end="163:52">args</name><index pos:start="163:53" pos:end="163:55">[<expr pos:start="163:54" pos:end="163:54"><literal type="number" pos:start="163:54" pos:end="163:54">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="167:13" pos:end="171:46">/* For movcond, we canonicalize the "false" input reg to match

               the destination reg so that the tcg backend can implement

               a "move if true" operation.  */</comment>

            <if_stmt pos:start="173:13" pos:end="177:13"><if pos:start="173:13" pos:end="177:13">if <condition pos:start="173:16" pos:end="173:74">(<expr pos:start="173:17" pos:end="173:73"><call pos:start="173:17" pos:end="173:73"><name pos:start="173:17" pos:end="173:32">swap_commutative</name><argument_list pos:start="173:33" pos:end="173:73">(<argument pos:start="173:34" pos:end="173:44"><expr pos:start="173:34" pos:end="173:44"><name pos:start="173:34" pos:end="173:44"><name pos:start="173:34" pos:end="173:35">op</name><operator pos:start="173:36" pos:end="173:37">-&gt;</operator><name pos:start="173:38" pos:end="173:41">args</name><index pos:start="173:42" pos:end="173:44">[<expr pos:start="173:43" pos:end="173:43"><literal type="number" pos:start="173:43" pos:end="173:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="173:47" pos:end="173:58"><expr pos:start="173:47" pos:end="173:58"><operator pos:start="173:47" pos:end="173:47">&amp;</operator><name pos:start="173:48" pos:end="173:58"><name pos:start="173:48" pos:end="173:49">op</name><operator pos:start="173:50" pos:end="173:51">-&gt;</operator><name pos:start="173:52" pos:end="173:55">args</name><index pos:start="173:56" pos:end="173:58">[<expr pos:start="173:57" pos:end="173:57"><literal type="number" pos:start="173:57" pos:end="173:57">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="173:61" pos:end="173:72"><expr pos:start="173:61" pos:end="173:72"><operator pos:start="173:61" pos:end="173:61">&amp;</operator><name pos:start="173:62" pos:end="173:72"><name pos:start="173:62" pos:end="173:63">op</name><operator pos:start="173:64" pos:end="173:65">-&gt;</operator><name pos:start="173:66" pos:end="173:69">args</name><index pos:start="173:70" pos:end="173:72">[<expr pos:start="173:71" pos:end="173:71"><literal type="number" pos:start="173:71" pos:end="173:71">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="173:76" pos:end="177:13">{<block_content pos:start="175:17" pos:end="175:59">

                <expr_stmt pos:start="175:17" pos:end="175:59"><expr pos:start="175:17" pos:end="175:58"><name pos:start="175:17" pos:end="175:27"><name pos:start="175:17" pos:end="175:18">op</name><operator pos:start="175:19" pos:end="175:20">-&gt;</operator><name pos:start="175:21" pos:end="175:24">args</name><index pos:start="175:25" pos:end="175:27">[<expr pos:start="175:26" pos:end="175:26"><literal type="number" pos:start="175:26" pos:end="175:26">5</literal></expr>]</index></name> <operator pos:start="175:29" pos:end="175:29">=</operator> <call pos:start="175:31" pos:end="175:58"><name pos:start="175:31" pos:end="175:45">tcg_invert_cond</name><argument_list pos:start="175:46" pos:end="175:58">(<argument pos:start="175:47" pos:end="175:57"><expr pos:start="175:47" pos:end="175:57"><name pos:start="175:47" pos:end="175:57"><name pos:start="175:47" pos:end="175:48">op</name><operator pos:start="175:49" pos:end="175:50">-&gt;</operator><name pos:start="175:51" pos:end="175:54">args</name><index pos:start="175:55" pos:end="175:57">[<expr pos:start="175:56" pos:end="175:56"><literal type="number" pos:start="175:56" pos:end="175:56">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="179:13" pos:end="179:18">break;</break>

        <expr_stmt pos:start="181:9" pos:end="183:70"><expr pos:start="181:9" pos:end="183:69"><call pos:start="181:9" pos:end="181:27"><name pos:start="181:9" pos:end="181:21">CASE_OP_32_64</name><argument_list pos:start="181:22" pos:end="181:27">(<argument pos:start="181:23" pos:end="181:26"><expr pos:start="181:23" pos:end="181:26"><name pos:start="181:23" pos:end="181:26">add2</name></expr></argument>)</argument_list></call><operator pos:start="181:28" pos:end="181:28">:</operator>

            <call pos:start="183:13" pos:end="183:69"><name pos:start="183:13" pos:end="183:28">swap_commutative</name><argument_list pos:start="183:29" pos:end="183:69">(<argument pos:start="183:30" pos:end="183:40"><expr pos:start="183:30" pos:end="183:40"><name pos:start="183:30" pos:end="183:40"><name pos:start="183:30" pos:end="183:31">op</name><operator pos:start="183:32" pos:end="183:33">-&gt;</operator><name pos:start="183:34" pos:end="183:37">args</name><index pos:start="183:38" pos:end="183:40">[<expr pos:start="183:39" pos:end="183:39"><literal type="number" pos:start="183:39" pos:end="183:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:43" pos:end="183:54"><expr pos:start="183:43" pos:end="183:54"><operator pos:start="183:43" pos:end="183:43">&amp;</operator><name pos:start="183:44" pos:end="183:54"><name pos:start="183:44" pos:end="183:45">op</name><operator pos:start="183:46" pos:end="183:47">-&gt;</operator><name pos:start="183:48" pos:end="183:51">args</name><index pos:start="183:52" pos:end="183:54">[<expr pos:start="183:53" pos:end="183:53"><literal type="number" pos:start="183:53" pos:end="183:53">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:57" pos:end="183:68"><expr pos:start="183:57" pos:end="183:68"><operator pos:start="183:57" pos:end="183:57">&amp;</operator><name pos:start="183:58" pos:end="183:68"><name pos:start="183:58" pos:end="183:59">op</name><operator pos:start="183:60" pos:end="183:61">-&gt;</operator><name pos:start="183:62" pos:end="183:65">args</name><index pos:start="183:66" pos:end="183:68">[<expr pos:start="183:67" pos:end="183:67"><literal type="number" pos:start="183:67" pos:end="183:67">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:70"><expr pos:start="185:13" pos:end="185:69"><call pos:start="185:13" pos:end="185:69"><name pos:start="185:13" pos:end="185:28">swap_commutative</name><argument_list pos:start="185:29" pos:end="185:69">(<argument pos:start="185:30" pos:end="185:40"><expr pos:start="185:30" pos:end="185:40"><name pos:start="185:30" pos:end="185:40"><name pos:start="185:30" pos:end="185:31">op</name><operator pos:start="185:32" pos:end="185:33">-&gt;</operator><name pos:start="185:34" pos:end="185:37">args</name><index pos:start="185:38" pos:end="185:40">[<expr pos:start="185:39" pos:end="185:39"><literal type="number" pos:start="185:39" pos:end="185:39">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="185:43" pos:end="185:54"><expr pos:start="185:43" pos:end="185:54"><operator pos:start="185:43" pos:end="185:43">&amp;</operator><name pos:start="185:44" pos:end="185:54"><name pos:start="185:44" pos:end="185:45">op</name><operator pos:start="185:46" pos:end="185:47">-&gt;</operator><name pos:start="185:48" pos:end="185:51">args</name><index pos:start="185:52" pos:end="185:54">[<expr pos:start="185:53" pos:end="185:53"><literal type="number" pos:start="185:53" pos:end="185:53">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="185:57" pos:end="185:68"><expr pos:start="185:57" pos:end="185:68"><operator pos:start="185:57" pos:end="185:57">&amp;</operator><name pos:start="185:58" pos:end="185:68"><name pos:start="185:58" pos:end="185:59">op</name><operator pos:start="185:60" pos:end="185:61">-&gt;</operator><name pos:start="185:62" pos:end="185:65">args</name><index pos:start="185:66" pos:end="185:68">[<expr pos:start="185:67" pos:end="185:67"><literal type="number" pos:start="185:67" pos:end="185:67">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        <expr_stmt pos:start="189:9" pos:end="193:70"><expr pos:start="189:9" pos:end="193:69"><call pos:start="189:9" pos:end="189:28"><name pos:start="189:9" pos:end="189:21">CASE_OP_32_64</name><argument_list pos:start="189:22" pos:end="189:28">(<argument pos:start="189:23" pos:end="189:27"><expr pos:start="189:23" pos:end="189:27"><name pos:start="189:23" pos:end="189:27">mulu2</name></expr></argument>)</argument_list></call><operator pos:start="189:29" pos:end="189:29">:</operator>

        <call pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:21">CASE_OP_32_64</name><argument_list pos:start="191:22" pos:end="191:28">(<argument pos:start="191:23" pos:end="191:27"><expr pos:start="191:23" pos:end="191:27"><name pos:start="191:23" pos:end="191:27">muls2</name></expr></argument>)</argument_list></call><operator pos:start="191:29" pos:end="191:29">:</operator>

            <call pos:start="193:13" pos:end="193:69"><name pos:start="193:13" pos:end="193:28">swap_commutative</name><argument_list pos:start="193:29" pos:end="193:69">(<argument pos:start="193:30" pos:end="193:40"><expr pos:start="193:30" pos:end="193:40"><name pos:start="193:30" pos:end="193:40"><name pos:start="193:30" pos:end="193:31">op</name><operator pos:start="193:32" pos:end="193:33">-&gt;</operator><name pos:start="193:34" pos:end="193:37">args</name><index pos:start="193:38" pos:end="193:40">[<expr pos:start="193:39" pos:end="193:39"><literal type="number" pos:start="193:39" pos:end="193:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:43" pos:end="193:54"><expr pos:start="193:43" pos:end="193:54"><operator pos:start="193:43" pos:end="193:43">&amp;</operator><name pos:start="193:44" pos:end="193:54"><name pos:start="193:44" pos:end="193:45">op</name><operator pos:start="193:46" pos:end="193:47">-&gt;</operator><name pos:start="193:48" pos:end="193:51">args</name><index pos:start="193:52" pos:end="193:54">[<expr pos:start="193:53" pos:end="193:53"><literal type="number" pos:start="193:53" pos:end="193:53">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:57" pos:end="193:68"><expr pos:start="193:57" pos:end="193:68"><operator pos:start="193:57" pos:end="193:57">&amp;</operator><name pos:start="193:58" pos:end="193:68"><name pos:start="193:58" pos:end="193:59">op</name><operator pos:start="193:60" pos:end="193:61">-&gt;</operator><name pos:start="193:62" pos:end="193:65">args</name><index pos:start="193:66" pos:end="193:68">[<expr pos:start="193:67" pos:end="193:67"><literal type="number" pos:start="193:67" pos:end="193:67">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        <case pos:start="197:9" pos:end="197:34">case <expr pos:start="197:14" pos:end="197:33"><name pos:start="197:14" pos:end="197:33">INDEX_op_brcond2_i32</name></expr>:</case>

            <if_stmt pos:start="199:13" pos:end="203:13"><if pos:start="199:13" pos:end="203:13">if <condition pos:start="199:16" pos:end="199:62">(<expr pos:start="199:17" pos:end="199:61"><call pos:start="199:17" pos:end="199:61"><name pos:start="199:17" pos:end="199:33">swap_commutative2</name><argument_list pos:start="199:34" pos:end="199:61">(<argument pos:start="199:35" pos:end="199:46"><expr pos:start="199:35" pos:end="199:46"><operator pos:start="199:35" pos:end="199:35">&amp;</operator><name pos:start="199:36" pos:end="199:46"><name pos:start="199:36" pos:end="199:37">op</name><operator pos:start="199:38" pos:end="199:39">-&gt;</operator><name pos:start="199:40" pos:end="199:43">args</name><index pos:start="199:44" pos:end="199:46">[<expr pos:start="199:45" pos:end="199:45"><literal type="number" pos:start="199:45" pos:end="199:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="199:49" pos:end="199:60"><expr pos:start="199:49" pos:end="199:60"><operator pos:start="199:49" pos:end="199:49">&amp;</operator><name pos:start="199:50" pos:end="199:60"><name pos:start="199:50" pos:end="199:51">op</name><operator pos:start="199:52" pos:end="199:53">-&gt;</operator><name pos:start="199:54" pos:end="199:57">args</name><index pos:start="199:58" pos:end="199:60">[<expr pos:start="199:59" pos:end="199:59"><literal type="number" pos:start="199:59" pos:end="199:59">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:64" pos:end="203:13">{<block_content pos:start="201:17" pos:end="201:57">

                <expr_stmt pos:start="201:17" pos:end="201:57"><expr pos:start="201:17" pos:end="201:56"><name pos:start="201:17" pos:end="201:27"><name pos:start="201:17" pos:end="201:18">op</name><operator pos:start="201:19" pos:end="201:20">-&gt;</operator><name pos:start="201:21" pos:end="201:24">args</name><index pos:start="201:25" pos:end="201:27">[<expr pos:start="201:26" pos:end="201:26"><literal type="number" pos:start="201:26" pos:end="201:26">4</literal></expr>]</index></name> <operator pos:start="201:29" pos:end="201:29">=</operator> <call pos:start="201:31" pos:end="201:56"><name pos:start="201:31" pos:end="201:43">tcg_swap_cond</name><argument_list pos:start="201:44" pos:end="201:56">(<argument pos:start="201:45" pos:end="201:55"><expr pos:start="201:45" pos:end="201:55"><name pos:start="201:45" pos:end="201:55"><name pos:start="201:45" pos:end="201:46">op</name><operator pos:start="201:47" pos:end="201:48">-&gt;</operator><name pos:start="201:49" pos:end="201:52">args</name><index pos:start="201:53" pos:end="201:55">[<expr pos:start="201:54" pos:end="201:54"><literal type="number" pos:start="201:54" pos:end="201:54">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        <case pos:start="207:9" pos:end="207:35">case <expr pos:start="207:14" pos:end="207:34"><name pos:start="207:14" pos:end="207:34">INDEX_op_setcond2_i32</name></expr>:</case>

            <if_stmt pos:start="209:13" pos:end="213:13"><if pos:start="209:13" pos:end="213:13">if <condition pos:start="209:16" pos:end="209:62">(<expr pos:start="209:17" pos:end="209:61"><call pos:start="209:17" pos:end="209:61"><name pos:start="209:17" pos:end="209:33">swap_commutative2</name><argument_list pos:start="209:34" pos:end="209:61">(<argument pos:start="209:35" pos:end="209:46"><expr pos:start="209:35" pos:end="209:46"><operator pos:start="209:35" pos:end="209:35">&amp;</operator><name pos:start="209:36" pos:end="209:46"><name pos:start="209:36" pos:end="209:37">op</name><operator pos:start="209:38" pos:end="209:39">-&gt;</operator><name pos:start="209:40" pos:end="209:43">args</name><index pos:start="209:44" pos:end="209:46">[<expr pos:start="209:45" pos:end="209:45"><literal type="number" pos:start="209:45" pos:end="209:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="209:49" pos:end="209:60"><expr pos:start="209:49" pos:end="209:60"><operator pos:start="209:49" pos:end="209:49">&amp;</operator><name pos:start="209:50" pos:end="209:60"><name pos:start="209:50" pos:end="209:51">op</name><operator pos:start="209:52" pos:end="209:53">-&gt;</operator><name pos:start="209:54" pos:end="209:57">args</name><index pos:start="209:58" pos:end="209:60">[<expr pos:start="209:59" pos:end="209:59"><literal type="number" pos:start="209:59" pos:end="209:59">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="209:64" pos:end="213:13">{<block_content pos:start="211:17" pos:end="211:57">

                <expr_stmt pos:start="211:17" pos:end="211:57"><expr pos:start="211:17" pos:end="211:56"><name pos:start="211:17" pos:end="211:27"><name pos:start="211:17" pos:end="211:18">op</name><operator pos:start="211:19" pos:end="211:20">-&gt;</operator><name pos:start="211:21" pos:end="211:24">args</name><index pos:start="211:25" pos:end="211:27">[<expr pos:start="211:26" pos:end="211:26"><literal type="number" pos:start="211:26" pos:end="211:26">5</literal></expr>]</index></name> <operator pos:start="211:29" pos:end="211:29">=</operator> <call pos:start="211:31" pos:end="211:56"><name pos:start="211:31" pos:end="211:43">tcg_swap_cond</name><argument_list pos:start="211:44" pos:end="211:56">(<argument pos:start="211:45" pos:end="211:55"><expr pos:start="211:45" pos:end="211:55"><name pos:start="211:45" pos:end="211:55"><name pos:start="211:45" pos:end="211:46">op</name><operator pos:start="211:47" pos:end="211:48">-&gt;</operator><name pos:start="211:49" pos:end="211:52">args</name><index pos:start="211:53" pos:end="211:55">[<expr pos:start="211:54" pos:end="211:54"><literal type="number" pos:start="211:54" pos:end="211:54">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        <default pos:start="217:9" pos:end="217:16">default:</default>

            <break pos:start="219:13" pos:end="219:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="225:9" pos:end="227:50">/* Simplify expressions for "shift/rot r, 0, a =&gt; movi r, 0",

           and "sub r, 0, a =&gt; neg r, a" case.  */</comment>

        <switch pos:start="229:9" pos:end="305:13">switch <condition pos:start="229:16" pos:end="229:20">(<expr pos:start="229:17" pos:end="229:19"><name pos:start="229:17" pos:end="229:19">opc</name></expr>)</condition> <block pos:start="229:22" pos:end="305:13">{<block_content pos:start="231:9" pos:end="303:17">

        <expr_stmt pos:start="231:9" pos:end="239:28"><expr pos:start="231:9" pos:end="239:28"><call pos:start="231:9" pos:end="231:26"><name pos:start="231:9" pos:end="231:21">CASE_OP_32_64</name><argument_list pos:start="231:22" pos:end="231:26">(<argument pos:start="231:23" pos:end="231:25"><expr pos:start="231:23" pos:end="231:25"><name pos:start="231:23" pos:end="231:25">shl</name></expr></argument>)</argument_list></call><operator pos:start="231:27" pos:end="231:27">:</operator>

        <call pos:start="233:9" pos:end="233:26"><name pos:start="233:9" pos:end="233:21">CASE_OP_32_64</name><argument_list pos:start="233:22" pos:end="233:26">(<argument pos:start="233:23" pos:end="233:25"><expr pos:start="233:23" pos:end="233:25"><name pos:start="233:23" pos:end="233:25">shr</name></expr></argument>)</argument_list></call><operator pos:start="233:27" pos:end="233:27">:</operator>

        <call pos:start="235:9" pos:end="235:26"><name pos:start="235:9" pos:end="235:21">CASE_OP_32_64</name><argument_list pos:start="235:22" pos:end="235:26">(<argument pos:start="235:23" pos:end="235:25"><expr pos:start="235:23" pos:end="235:25"><name pos:start="235:23" pos:end="235:25">sar</name></expr></argument>)</argument_list></call><operator pos:start="235:27" pos:end="235:27">:</operator>

        <call pos:start="237:9" pos:end="237:27"><name pos:start="237:9" pos:end="237:21">CASE_OP_32_64</name><argument_list pos:start="237:22" pos:end="237:27">(<argument pos:start="237:23" pos:end="237:26"><expr pos:start="237:23" pos:end="237:26"><name pos:start="237:23" pos:end="237:26">rotl</name></expr></argument>)</argument_list></call><operator pos:start="237:28" pos:end="237:28">:</operator>

        <call pos:start="239:9" pos:end="239:27"><name pos:start="239:9" pos:end="239:21">CASE_OP_32_64</name><argument_list pos:start="239:22" pos:end="239:27">(<argument pos:start="239:23" pos:end="239:26"><expr pos:start="239:23" pos:end="239:26"><name pos:start="239:23" pos:end="239:26">rotr</name></expr></argument>)</argument_list></call><operator pos:start="239:28" pos:end="239:28">:</operator></expr></expr_stmt>

            <if_stmt pos:start="241:13" pos:end="249:13"><if pos:start="241:13" pos:end="249:13">if <condition pos:start="241:16" pos:end="243:51">(<expr pos:start="241:17" pos:end="243:50"><call pos:start="241:17" pos:end="241:41"><name pos:start="241:17" pos:end="241:28">arg_is_const</name><argument_list pos:start="241:29" pos:end="241:41">(<argument pos:start="241:30" pos:end="241:40"><expr pos:start="241:30" pos:end="241:40"><name pos:start="241:30" pos:end="241:40"><name pos:start="241:30" pos:end="241:31">op</name><operator pos:start="241:32" pos:end="241:33">-&gt;</operator><name pos:start="241:34" pos:end="241:37">args</name><index pos:start="241:38" pos:end="241:40">[<expr pos:start="241:39" pos:end="241:39"><literal type="number" pos:start="241:39" pos:end="241:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="243:17" pos:end="243:18">&amp;&amp;</operator> <call pos:start="243:20" pos:end="243:40"><name pos:start="243:20" pos:end="243:27">arg_info</name><argument_list pos:start="243:28" pos:end="243:40">(<argument pos:start="243:29" pos:end="243:39"><expr pos:start="243:29" pos:end="243:39"><name pos:start="243:29" pos:end="243:39"><name pos:start="243:29" pos:end="243:30">op</name><operator pos:start="243:31" pos:end="243:32">-&gt;</operator><name pos:start="243:33" pos:end="243:36">args</name><index pos:start="243:37" pos:end="243:39">[<expr pos:start="243:38" pos:end="243:38"><literal type="number" pos:start="243:38" pos:end="243:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="243:41" pos:end="243:42">-&gt;</operator><name pos:start="243:43" pos:end="243:45">val</name> <operator pos:start="243:47" pos:end="243:48">==</operator> <literal type="number" pos:start="243:50" pos:end="243:50">0</literal></expr>)</condition> <block pos:start="243:53" pos:end="249:13">{<block_content pos:start="245:17" pos:end="247:25">

                <expr_stmt pos:start="245:17" pos:end="245:56"><expr pos:start="245:17" pos:end="245:55"><call pos:start="245:17" pos:end="245:55"><name pos:start="245:17" pos:end="245:32">tcg_opt_gen_movi</name><argument_list pos:start="245:33" pos:end="245:55">(<argument pos:start="245:34" pos:end="245:34"><expr pos:start="245:34" pos:end="245:34"><name pos:start="245:34" pos:end="245:34">s</name></expr></argument>, <argument pos:start="245:37" pos:end="245:38"><expr pos:start="245:37" pos:end="245:38"><name pos:start="245:37" pos:end="245:38">op</name></expr></argument>, <argument pos:start="245:41" pos:end="245:51"><expr pos:start="245:41" pos:end="245:51"><name pos:start="245:41" pos:end="245:51"><name pos:start="245:41" pos:end="245:42">op</name><operator pos:start="245:43" pos:end="245:44">-&gt;</operator><name pos:start="245:45" pos:end="245:48">args</name><index pos:start="245:49" pos:end="245:51">[<expr pos:start="245:50" pos:end="245:50"><literal type="number" pos:start="245:50" pos:end="245:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="245:54" pos:end="245:54"><expr pos:start="245:54" pos:end="245:54"><literal type="number" pos:start="245:54" pos:end="245:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="247:17" pos:end="247:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        <expr_stmt pos:start="253:9" pos:end="269:17"><expr pos:start="253:9" pos:end="269:17"><call pos:start="253:9" pos:end="253:26"><name pos:start="253:9" pos:end="253:21">CASE_OP_32_64</name><argument_list pos:start="253:22" pos:end="253:26">(<argument pos:start="253:23" pos:end="253:25"><expr pos:start="253:23" pos:end="253:25"><name pos:start="253:23" pos:end="253:25">sub</name></expr></argument>)</argument_list></call><operator pos:start="253:27" pos:end="253:27">:</operator>

            <block pos:start="255:13" pos:end="269:17">{

                <expr pos:start="257:17" pos:end="257:32"><name pos:start="257:17" pos:end="257:25">TCGOpcode</name> <name pos:start="257:27" pos:end="257:32">neg_op</name></expr>;

                <expr pos:start="259:17" pos:end="259:29"><name pos:start="259:17" pos:end="259:20">bool</name> <name pos:start="259:22" pos:end="259:29">have_neg</name></expr>;



                <if_stmt pos:start="263:17" pos:end="267:26"><if pos:start="263:17" pos:end="267:26">if <condition pos:start="263:20" pos:end="263:46">(<expr pos:start="263:21" pos:end="263:45"><call pos:start="263:21" pos:end="263:45"><name pos:start="263:21" pos:end="263:32">arg_is_const</name><argument_list pos:start="263:33" pos:end="263:45">(<argument pos:start="263:34" pos:end="263:44"><expr pos:start="263:34" pos:end="263:44"><name pos:start="263:34" pos:end="263:44"><name pos:start="263:34" pos:end="263:35">op</name><operator pos:start="263:36" pos:end="263:37">-&gt;</operator><name pos:start="263:38" pos:end="263:41">args</name><index pos:start="263:42" pos:end="263:44">[<expr pos:start="263:43" pos:end="263:43"><literal type="number" pos:start="263:43" pos:end="263:43">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="263:48" pos:end="267:26">{<block_content pos:start="267:21" pos:end="267:26">

                    <comment type="block" pos:start="265:21" pos:end="265:65">/* Proceed with possible constant folding. */</comment>

                    <break pos:start="267:21" pos:end="267:26">break;</break>

                <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

                <if_stmt pos:start="271:17" pos:end="283:17"><if pos:start="271:17" pos:end="277:17">if <condition pos:start="271:20" pos:end="271:44">(<expr pos:start="271:21" pos:end="271:43"><name pos:start="271:21" pos:end="271:23">opc</name> <operator pos:start="271:25" pos:end="271:26">==</operator> <name pos:start="271:28" pos:end="271:43">INDEX_op_sub_i32</name></expr>)</condition> <block pos:start="271:46" pos:end="277:17">{<block_content pos:start="273:21" pos:end="275:54">

                    <expr_stmt pos:start="273:21" pos:end="273:46"><expr pos:start="273:21" pos:end="273:45"><name pos:start="273:21" pos:end="273:26">neg_op</name> <operator pos:start="273:28" pos:end="273:28">=</operator> <name pos:start="273:30" pos:end="273:45">INDEX_op_neg_i32</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="275:21" pos:end="275:54"><expr pos:start="275:21" pos:end="275:53"><name pos:start="275:21" pos:end="275:28">have_neg</name> <operator pos:start="275:30" pos:end="275:30">=</operator> <name pos:start="275:32" pos:end="275:53">TCG_TARGET_HAS_neg_i32</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="277:19" pos:end="283:17">else <block pos:start="277:24" pos:end="283:17">{<block_content pos:start="279:21" pos:end="281:54">

                    <expr_stmt pos:start="279:21" pos:end="279:46"><expr pos:start="279:21" pos:end="279:45"><name pos:start="279:21" pos:end="279:26">neg_op</name> <operator pos:start="279:28" pos:end="279:28">=</operator> <name pos:start="279:30" pos:end="279:45">INDEX_op_neg_i64</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="281:21" pos:end="281:54"><expr pos:start="281:21" pos:end="281:53"><name pos:start="281:21" pos:end="281:28">have_neg</name> <operator pos:start="281:30" pos:end="281:30">=</operator> <name pos:start="281:32" pos:end="281:53">TCG_TARGET_HAS_neg_i64</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="285:17" pos:end="289:17"><if pos:start="285:17" pos:end="289:17">if <condition pos:start="285:20" pos:end="285:30">(<expr pos:start="285:21" pos:end="285:29"><operator pos:start="285:21" pos:end="285:21">!</operator><name pos:start="285:22" pos:end="285:29">have_neg</name></expr>)</condition> <block pos:start="285:32" pos:end="289:17">{<block_content pos:start="287:21" pos:end="287:26">

                    <break pos:start="287:21" pos:end="287:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="291:17" pos:end="303:17"><if pos:start="291:17" pos:end="303:17">if <condition pos:start="291:20" pos:end="293:55">(<expr pos:start="291:21" pos:end="293:54"><call pos:start="291:21" pos:end="291:45"><name pos:start="291:21" pos:end="291:32">arg_is_const</name><argument_list pos:start="291:33" pos:end="291:45">(<argument pos:start="291:34" pos:end="291:44"><expr pos:start="291:34" pos:end="291:44"><name pos:start="291:34" pos:end="291:44"><name pos:start="291:34" pos:end="291:35">op</name><operator pos:start="291:36" pos:end="291:37">-&gt;</operator><name pos:start="291:38" pos:end="291:41">args</name><index pos:start="291:42" pos:end="291:44">[<expr pos:start="291:43" pos:end="291:43"><literal type="number" pos:start="291:43" pos:end="291:43">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                    <operator pos:start="293:21" pos:end="293:22">&amp;&amp;</operator> <call pos:start="293:24" pos:end="293:44"><name pos:start="293:24" pos:end="293:31">arg_info</name><argument_list pos:start="293:32" pos:end="293:44">(<argument pos:start="293:33" pos:end="293:43"><expr pos:start="293:33" pos:end="293:43"><name pos:start="293:33" pos:end="293:43"><name pos:start="293:33" pos:end="293:34">op</name><operator pos:start="293:35" pos:end="293:36">-&gt;</operator><name pos:start="293:37" pos:end="293:40">args</name><index pos:start="293:41" pos:end="293:43">[<expr pos:start="293:42" pos:end="293:42"><literal type="number" pos:start="293:42" pos:end="293:42">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="293:45" pos:end="293:46">-&gt;</operator><name pos:start="293:47" pos:end="293:49">val</name> <operator pos:start="293:51" pos:end="293:52">==</operator> <literal type="number" pos:start="293:54" pos:end="293:54">0</literal></expr>)</condition> <block pos:start="293:57" pos:end="303:17">{<block_content pos:start="295:21" pos:end="301:29">

                    <expr_stmt pos:start="295:21" pos:end="295:37"><expr pos:start="295:21" pos:end="295:36"><name pos:start="295:21" pos:end="295:27"><name pos:start="295:21" pos:end="295:22">op</name><operator pos:start="295:23" pos:end="295:24">-&gt;</operator><name pos:start="295:25" pos:end="295:27">opc</name></name> <operator pos:start="295:29" pos:end="295:29">=</operator> <name pos:start="295:31" pos:end="295:36">neg_op</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="297:21" pos:end="297:44"><expr pos:start="297:21" pos:end="297:43"><call pos:start="297:21" pos:end="297:43"><name pos:start="297:21" pos:end="297:30">reset_temp</name><argument_list pos:start="297:31" pos:end="297:43">(<argument pos:start="297:32" pos:end="297:42"><expr pos:start="297:32" pos:end="297:42"><name pos:start="297:32" pos:end="297:42"><name pos:start="297:32" pos:end="297:33">op</name><operator pos:start="297:34" pos:end="297:35">-&gt;</operator><name pos:start="297:36" pos:end="297:39">args</name><index pos:start="297:40" pos:end="297:42">[<expr pos:start="297:41" pos:end="297:41"><literal type="number" pos:start="297:41" pos:end="297:41">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="299:21" pos:end="299:46"><expr pos:start="299:21" pos:end="299:45"><name pos:start="299:21" pos:end="299:31"><name pos:start="299:21" pos:end="299:22">op</name><operator pos:start="299:23" pos:end="299:24">-&gt;</operator><name pos:start="299:25" pos:end="299:28">args</name><index pos:start="299:29" pos:end="299:31">[<expr pos:start="299:30" pos:end="299:30"><literal type="number" pos:start="299:30" pos:end="299:30">1</literal></expr>]</index></name> <operator pos:start="299:33" pos:end="299:33">=</operator> <name pos:start="299:35" pos:end="299:45"><name pos:start="299:35" pos:end="299:36">op</name><operator pos:start="299:37" pos:end="299:38">-&gt;</operator><name pos:start="299:39" pos:end="299:42">args</name><index pos:start="299:43" pos:end="299:45">[<expr pos:start="299:44" pos:end="299:44"><literal type="number" pos:start="299:44" pos:end="299:44">2</literal></expr>]</index></name></expr>;</expr_stmt>

                    <continue pos:start="301:21" pos:end="301:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></switch>

            <break pos:start="307:13" pos:end="307:18">break;</break>

        <expr_stmt pos:start="309:9" pos:end="311:28"><expr pos:start="309:9" pos:end="311:28"><call pos:start="309:9" pos:end="309:26"><name pos:start="309:9" pos:end="309:21">CASE_OP_32_64</name><argument_list pos:start="309:22" pos:end="309:26">(<argument pos:start="309:23" pos:end="309:25"><expr pos:start="309:23" pos:end="309:25"><name pos:start="309:23" pos:end="309:25">xor</name></expr></argument>)</argument_list></call><operator pos:start="309:27" pos:end="309:27">:</operator>

        <call pos:start="311:9" pos:end="311:27"><name pos:start="311:9" pos:end="311:21">CASE_OP_32_64</name><argument_list pos:start="311:22" pos:end="311:27">(<argument pos:start="311:23" pos:end="311:26"><expr pos:start="311:23" pos:end="311:26"><name pos:start="311:23" pos:end="311:26">nand</name></expr></argument>)</argument_list></call><operator pos:start="311:28" pos:end="311:28">:</operator></expr></expr_stmt>

            <if_stmt pos:start="313:13" pos:end="323:13"><if pos:start="313:13" pos:end="323:13">if <condition pos:start="313:16" pos:end="317:52">(<expr pos:start="313:17" pos:end="317:51"><operator pos:start="313:17" pos:end="313:17">!</operator><call pos:start="313:18" pos:end="313:42"><name pos:start="313:18" pos:end="313:29">arg_is_const</name><argument_list pos:start="313:30" pos:end="313:42">(<argument pos:start="313:31" pos:end="313:41"><expr pos:start="313:31" pos:end="313:41"><name pos:start="313:31" pos:end="313:41"><name pos:start="313:31" pos:end="313:32">op</name><operator pos:start="313:33" pos:end="313:34">-&gt;</operator><name pos:start="313:35" pos:end="313:38">args</name><index pos:start="313:39" pos:end="313:41">[<expr pos:start="313:40" pos:end="313:40"><literal type="number" pos:start="313:40" pos:end="313:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="315:17" pos:end="315:18">&amp;&amp;</operator> <call pos:start="315:20" pos:end="315:44"><name pos:start="315:20" pos:end="315:31">arg_is_const</name><argument_list pos:start="315:32" pos:end="315:44">(<argument pos:start="315:33" pos:end="315:43"><expr pos:start="315:33" pos:end="315:43"><name pos:start="315:33" pos:end="315:43"><name pos:start="315:33" pos:end="315:34">op</name><operator pos:start="315:35" pos:end="315:36">-&gt;</operator><name pos:start="315:37" pos:end="315:40">args</name><index pos:start="315:41" pos:end="315:43">[<expr pos:start="315:42" pos:end="315:42"><literal type="number" pos:start="315:42" pos:end="315:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="317:17" pos:end="317:18">&amp;&amp;</operator> <call pos:start="317:20" pos:end="317:40"><name pos:start="317:20" pos:end="317:27">arg_info</name><argument_list pos:start="317:28" pos:end="317:40">(<argument pos:start="317:29" pos:end="317:39"><expr pos:start="317:29" pos:end="317:39"><name pos:start="317:29" pos:end="317:39"><name pos:start="317:29" pos:end="317:30">op</name><operator pos:start="317:31" pos:end="317:32">-&gt;</operator><name pos:start="317:33" pos:end="317:36">args</name><index pos:start="317:37" pos:end="317:39">[<expr pos:start="317:38" pos:end="317:38"><literal type="number" pos:start="317:38" pos:end="317:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="317:41" pos:end="317:42">-&gt;</operator><name pos:start="317:43" pos:end="317:45">val</name> <operator pos:start="317:47" pos:end="317:48">==</operator> <operator pos:start="317:50" pos:end="317:50">-</operator><literal type="number" pos:start="317:51" pos:end="317:51">1</literal></expr>)</condition> <block pos:start="317:54" pos:end="323:13">{<block_content pos:start="319:17" pos:end="321:29">

                <expr_stmt pos:start="319:17" pos:end="319:22"><expr pos:start="319:17" pos:end="319:21"><name pos:start="319:17" pos:end="319:17">i</name> <operator pos:start="319:19" pos:end="319:19">=</operator> <literal type="number" pos:start="319:21" pos:end="319:21">1</literal></expr>;</expr_stmt>

                <goto pos:start="321:17" pos:end="321:29">goto <name pos:start="321:22" pos:end="321:28">try_not</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="325:13" pos:end="325:18">break;</break>

        <expr_stmt pos:start="327:9" pos:end="327:27"><expr pos:start="327:9" pos:end="327:27"><call pos:start="327:9" pos:end="327:26"><name pos:start="327:9" pos:end="327:21">CASE_OP_32_64</name><argument_list pos:start="327:22" pos:end="327:26">(<argument pos:start="327:23" pos:end="327:25"><expr pos:start="327:23" pos:end="327:25"><name pos:start="327:23" pos:end="327:25">nor</name></expr></argument>)</argument_list></call><operator pos:start="327:27" pos:end="327:27">:</operator></expr></expr_stmt>

            <if_stmt pos:start="329:13" pos:end="339:13"><if pos:start="329:13" pos:end="339:13">if <condition pos:start="329:16" pos:end="333:51">(<expr pos:start="329:17" pos:end="333:50"><operator pos:start="329:17" pos:end="329:17">!</operator><call pos:start="329:18" pos:end="329:42"><name pos:start="329:18" pos:end="329:29">arg_is_const</name><argument_list pos:start="329:30" pos:end="329:42">(<argument pos:start="329:31" pos:end="329:41"><expr pos:start="329:31" pos:end="329:41"><name pos:start="329:31" pos:end="329:41"><name pos:start="329:31" pos:end="329:32">op</name><operator pos:start="329:33" pos:end="329:34">-&gt;</operator><name pos:start="329:35" pos:end="329:38">args</name><index pos:start="329:39" pos:end="329:41">[<expr pos:start="329:40" pos:end="329:40"><literal type="number" pos:start="329:40" pos:end="329:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="331:17" pos:end="331:18">&amp;&amp;</operator> <call pos:start="331:20" pos:end="331:44"><name pos:start="331:20" pos:end="331:31">arg_is_const</name><argument_list pos:start="331:32" pos:end="331:44">(<argument pos:start="331:33" pos:end="331:43"><expr pos:start="331:33" pos:end="331:43"><name pos:start="331:33" pos:end="331:43"><name pos:start="331:33" pos:end="331:34">op</name><operator pos:start="331:35" pos:end="331:36">-&gt;</operator><name pos:start="331:37" pos:end="331:40">args</name><index pos:start="331:41" pos:end="331:43">[<expr pos:start="331:42" pos:end="331:42"><literal type="number" pos:start="331:42" pos:end="331:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="333:17" pos:end="333:18">&amp;&amp;</operator> <call pos:start="333:20" pos:end="333:40"><name pos:start="333:20" pos:end="333:27">arg_info</name><argument_list pos:start="333:28" pos:end="333:40">(<argument pos:start="333:29" pos:end="333:39"><expr pos:start="333:29" pos:end="333:39"><name pos:start="333:29" pos:end="333:39"><name pos:start="333:29" pos:end="333:30">op</name><operator pos:start="333:31" pos:end="333:32">-&gt;</operator><name pos:start="333:33" pos:end="333:36">args</name><index pos:start="333:37" pos:end="333:39">[<expr pos:start="333:38" pos:end="333:38"><literal type="number" pos:start="333:38" pos:end="333:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="333:41" pos:end="333:42">-&gt;</operator><name pos:start="333:43" pos:end="333:45">val</name> <operator pos:start="333:47" pos:end="333:48">==</operator> <literal type="number" pos:start="333:50" pos:end="333:50">0</literal></expr>)</condition> <block pos:start="333:53" pos:end="339:13">{<block_content pos:start="335:17" pos:end="337:29">

                <expr_stmt pos:start="335:17" pos:end="335:22"><expr pos:start="335:17" pos:end="335:21"><name pos:start="335:17" pos:end="335:17">i</name> <operator pos:start="335:19" pos:end="335:19">=</operator> <literal type="number" pos:start="335:21" pos:end="335:21">1</literal></expr>;</expr_stmt>

                <goto pos:start="337:17" pos:end="337:29">goto <name pos:start="337:22" pos:end="337:28">try_not</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="341:13" pos:end="341:18">break;</break>

        <expr_stmt pos:start="343:9" pos:end="343:28"><expr pos:start="343:9" pos:end="343:28"><call pos:start="343:9" pos:end="343:27"><name pos:start="343:9" pos:end="343:21">CASE_OP_32_64</name><argument_list pos:start="343:22" pos:end="343:27">(<argument pos:start="343:23" pos:end="343:26"><expr pos:start="343:23" pos:end="343:26"><name pos:start="343:23" pos:end="343:26">andc</name></expr></argument>)</argument_list></call><operator pos:start="343:28" pos:end="343:28">:</operator></expr></expr_stmt>

            <if_stmt pos:start="345:13" pos:end="355:13"><if pos:start="345:13" pos:end="355:13">if <condition pos:start="345:16" pos:end="349:52">(<expr pos:start="345:17" pos:end="349:51"><operator pos:start="345:17" pos:end="345:17">!</operator><call pos:start="345:18" pos:end="345:42"><name pos:start="345:18" pos:end="345:29">arg_is_const</name><argument_list pos:start="345:30" pos:end="345:42">(<argument pos:start="345:31" pos:end="345:41"><expr pos:start="345:31" pos:end="345:41"><name pos:start="345:31" pos:end="345:41"><name pos:start="345:31" pos:end="345:32">op</name><operator pos:start="345:33" pos:end="345:34">-&gt;</operator><name pos:start="345:35" pos:end="345:38">args</name><index pos:start="345:39" pos:end="345:41">[<expr pos:start="345:40" pos:end="345:40"><literal type="number" pos:start="345:40" pos:end="345:40">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="347:17" pos:end="347:18">&amp;&amp;</operator> <call pos:start="347:20" pos:end="347:44"><name pos:start="347:20" pos:end="347:31">arg_is_const</name><argument_list pos:start="347:32" pos:end="347:44">(<argument pos:start="347:33" pos:end="347:43"><expr pos:start="347:33" pos:end="347:43"><name pos:start="347:33" pos:end="347:43"><name pos:start="347:33" pos:end="347:34">op</name><operator pos:start="347:35" pos:end="347:36">-&gt;</operator><name pos:start="347:37" pos:end="347:40">args</name><index pos:start="347:41" pos:end="347:43">[<expr pos:start="347:42" pos:end="347:42"><literal type="number" pos:start="347:42" pos:end="347:42">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="349:17" pos:end="349:18">&amp;&amp;</operator> <call pos:start="349:20" pos:end="349:40"><name pos:start="349:20" pos:end="349:27">arg_info</name><argument_list pos:start="349:28" pos:end="349:40">(<argument pos:start="349:29" pos:end="349:39"><expr pos:start="349:29" pos:end="349:39"><name pos:start="349:29" pos:end="349:39"><name pos:start="349:29" pos:end="349:30">op</name><operator pos:start="349:31" pos:end="349:32">-&gt;</operator><name pos:start="349:33" pos:end="349:36">args</name><index pos:start="349:37" pos:end="349:39">[<expr pos:start="349:38" pos:end="349:38"><literal type="number" pos:start="349:38" pos:end="349:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="349:41" pos:end="349:42">-&gt;</operator><name pos:start="349:43" pos:end="349:45">val</name> <operator pos:start="349:47" pos:end="349:48">==</operator> <operator pos:start="349:50" pos:end="349:50">-</operator><literal type="number" pos:start="349:51" pos:end="349:51">1</literal></expr>)</condition> <block pos:start="349:54" pos:end="355:13">{<block_content pos:start="351:17" pos:end="353:29">

                <expr_stmt pos:start="351:17" pos:end="351:22"><expr pos:start="351:17" pos:end="351:21"><name pos:start="351:17" pos:end="351:17">i</name> <operator pos:start="351:19" pos:end="351:19">=</operator> <literal type="number" pos:start="351:21" pos:end="351:21">2</literal></expr>;</expr_stmt>

                <goto pos:start="353:17" pos:end="353:29">goto <name pos:start="353:22" pos:end="353:28">try_not</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="357:13" pos:end="357:18">break;</break>

        <expr_stmt pos:start="359:9" pos:end="361:27"><expr pos:start="359:9" pos:end="361:27"><call pos:start="359:9" pos:end="359:26"><name pos:start="359:9" pos:end="359:21">CASE_OP_32_64</name><argument_list pos:start="359:22" pos:end="359:26">(<argument pos:start="359:23" pos:end="359:25"><expr pos:start="359:23" pos:end="359:25"><name pos:start="359:23" pos:end="359:25">orc</name></expr></argument>)</argument_list></call><operator pos:start="359:27" pos:end="359:27">:</operator>

        <call pos:start="361:9" pos:end="361:26"><name pos:start="361:9" pos:end="361:21">CASE_OP_32_64</name><argument_list pos:start="361:22" pos:end="361:26">(<argument pos:start="361:23" pos:end="361:25"><expr pos:start="361:23" pos:end="361:25"><name pos:start="361:23" pos:end="361:25">eqv</name></expr></argument>)</argument_list></call><operator pos:start="361:27" pos:end="361:27">:</operator></expr></expr_stmt>

            <if_stmt pos:start="363:13" pos:end="373:13"><if pos:start="363:13" pos:end="373:13">if <condition pos:start="363:16" pos:end="367:51">(<expr pos:start="363:17" pos:end="367:50"><operator pos:start="363:17" pos:end="363:17">!</operator><call pos:start="363:18" pos:end="363:42"><name pos:start="363:18" pos:end="363:29">arg_is_const</name><argument_list pos:start="363:30" pos:end="363:42">(<argument pos:start="363:31" pos:end="363:41"><expr pos:start="363:31" pos:end="363:41"><name pos:start="363:31" pos:end="363:41"><name pos:start="363:31" pos:end="363:32">op</name><operator pos:start="363:33" pos:end="363:34">-&gt;</operator><name pos:start="363:35" pos:end="363:38">args</name><index pos:start="363:39" pos:end="363:41">[<expr pos:start="363:40" pos:end="363:40"><literal type="number" pos:start="363:40" pos:end="363:40">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="365:17" pos:end="365:18">&amp;&amp;</operator> <call pos:start="365:20" pos:end="365:44"><name pos:start="365:20" pos:end="365:31">arg_is_const</name><argument_list pos:start="365:32" pos:end="365:44">(<argument pos:start="365:33" pos:end="365:43"><expr pos:start="365:33" pos:end="365:43"><name pos:start="365:33" pos:end="365:43"><name pos:start="365:33" pos:end="365:34">op</name><operator pos:start="365:35" pos:end="365:36">-&gt;</operator><name pos:start="365:37" pos:end="365:40">args</name><index pos:start="365:41" pos:end="365:43">[<expr pos:start="365:42" pos:end="365:42"><literal type="number" pos:start="365:42" pos:end="365:42">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="367:17" pos:end="367:18">&amp;&amp;</operator> <call pos:start="367:20" pos:end="367:40"><name pos:start="367:20" pos:end="367:27">arg_info</name><argument_list pos:start="367:28" pos:end="367:40">(<argument pos:start="367:29" pos:end="367:39"><expr pos:start="367:29" pos:end="367:39"><name pos:start="367:29" pos:end="367:39"><name pos:start="367:29" pos:end="367:30">op</name><operator pos:start="367:31" pos:end="367:32">-&gt;</operator><name pos:start="367:33" pos:end="367:36">args</name><index pos:start="367:37" pos:end="367:39">[<expr pos:start="367:38" pos:end="367:38"><literal type="number" pos:start="367:38" pos:end="367:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="367:41" pos:end="367:42">-&gt;</operator><name pos:start="367:43" pos:end="367:45">val</name> <operator pos:start="367:47" pos:end="367:48">==</operator> <literal type="number" pos:start="367:50" pos:end="367:50">0</literal></expr>)</condition> <block pos:start="367:53" pos:end="373:13">{<block_content pos:start="369:17" pos:end="371:29">

                <expr_stmt pos:start="369:17" pos:end="369:22"><expr pos:start="369:17" pos:end="369:21"><name pos:start="369:17" pos:end="369:17">i</name> <operator pos:start="369:19" pos:end="369:19">=</operator> <literal type="number" pos:start="369:21" pos:end="369:21">2</literal></expr>;</expr_stmt>

                <goto pos:start="371:17" pos:end="371:29">goto <name pos:start="371:22" pos:end="371:28">try_not</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="375:13" pos:end="375:18">break;</break>

        <label pos:start="377:9" pos:end="377:16"><name pos:start="377:9" pos:end="377:15">try_not</name>:</label>

            <block pos:start="379:13" pos:end="415:13">{<block_content pos:start="381:17" pos:end="413:25">

                <decl_stmt pos:start="381:17" pos:end="381:33"><decl pos:start="381:17" pos:end="381:32"><type pos:start="381:17" pos:end="381:25"><name pos:start="381:17" pos:end="381:25">TCGOpcode</name></type> <name pos:start="381:27" pos:end="381:32">not_op</name></decl>;</decl_stmt>

                <decl_stmt pos:start="383:17" pos:end="383:30"><decl pos:start="383:17" pos:end="383:29"><type pos:start="383:17" pos:end="383:20"><name pos:start="383:17" pos:end="383:20">bool</name></type> <name pos:start="383:22" pos:end="383:29">have_not</name></decl>;</decl_stmt>



                <if_stmt pos:start="387:17" pos:end="399:17"><if pos:start="387:17" pos:end="393:17">if <condition pos:start="387:20" pos:end="387:47">(<expr pos:start="387:21" pos:end="387:46"><name pos:start="387:21" pos:end="387:30"><name pos:start="387:21" pos:end="387:23">def</name><operator pos:start="387:24" pos:end="387:25">-&gt;</operator><name pos:start="387:26" pos:end="387:30">flags</name></name> <operator pos:start="387:32" pos:end="387:32">&amp;</operator> <name pos:start="387:34" pos:end="387:46">TCG_OPF_64BIT</name></expr>)</condition> <block pos:start="387:49" pos:end="393:17">{<block_content pos:start="389:21" pos:end="391:54">

                    <expr_stmt pos:start="389:21" pos:end="389:46"><expr pos:start="389:21" pos:end="389:45"><name pos:start="389:21" pos:end="389:26">not_op</name> <operator pos:start="389:28" pos:end="389:28">=</operator> <name pos:start="389:30" pos:end="389:45">INDEX_op_not_i64</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="391:21" pos:end="391:54"><expr pos:start="391:21" pos:end="391:53"><name pos:start="391:21" pos:end="391:28">have_not</name> <operator pos:start="391:30" pos:end="391:30">=</operator> <name pos:start="391:32" pos:end="391:53">TCG_TARGET_HAS_not_i64</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="393:19" pos:end="399:17">else <block pos:start="393:24" pos:end="399:17">{<block_content pos:start="395:21" pos:end="397:54">

                    <expr_stmt pos:start="395:21" pos:end="395:46"><expr pos:start="395:21" pos:end="395:45"><name pos:start="395:21" pos:end="395:26">not_op</name> <operator pos:start="395:28" pos:end="395:28">=</operator> <name pos:start="395:30" pos:end="395:45">INDEX_op_not_i32</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="397:21" pos:end="397:54"><expr pos:start="397:21" pos:end="397:53"><name pos:start="397:21" pos:end="397:28">have_not</name> <operator pos:start="397:30" pos:end="397:30">=</operator> <name pos:start="397:32" pos:end="397:53">TCG_TARGET_HAS_not_i32</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="401:17" pos:end="405:17"><if pos:start="401:17" pos:end="405:17">if <condition pos:start="401:20" pos:end="401:30">(<expr pos:start="401:21" pos:end="401:29"><operator pos:start="401:21" pos:end="401:21">!</operator><name pos:start="401:22" pos:end="401:29">have_not</name></expr>)</condition> <block pos:start="401:32" pos:end="405:17">{<block_content pos:start="403:21" pos:end="403:26">

                    <break pos:start="403:21" pos:end="403:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="407:17" pos:end="407:33"><expr pos:start="407:17" pos:end="407:32"><name pos:start="407:17" pos:end="407:23"><name pos:start="407:17" pos:end="407:18">op</name><operator pos:start="407:19" pos:end="407:20">-&gt;</operator><name pos:start="407:21" pos:end="407:23">opc</name></name> <operator pos:start="407:25" pos:end="407:25">=</operator> <name pos:start="407:27" pos:end="407:32">not_op</name></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:40"><expr pos:start="409:17" pos:end="409:39"><call pos:start="409:17" pos:end="409:39"><name pos:start="409:17" pos:end="409:26">reset_temp</name><argument_list pos:start="409:27" pos:end="409:39">(<argument pos:start="409:28" pos:end="409:38"><expr pos:start="409:28" pos:end="409:38"><name pos:start="409:28" pos:end="409:38"><name pos:start="409:28" pos:end="409:29">op</name><operator pos:start="409:30" pos:end="409:31">-&gt;</operator><name pos:start="409:32" pos:end="409:35">args</name><index pos:start="409:36" pos:end="409:38">[<expr pos:start="409:37" pos:end="409:37"><literal type="number" pos:start="409:37" pos:end="409:37">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="411:17" pos:end="411:42"><expr pos:start="411:17" pos:end="411:41"><name pos:start="411:17" pos:end="411:27"><name pos:start="411:17" pos:end="411:18">op</name><operator pos:start="411:19" pos:end="411:20">-&gt;</operator><name pos:start="411:21" pos:end="411:24">args</name><index pos:start="411:25" pos:end="411:27">[<expr pos:start="411:26" pos:end="411:26"><literal type="number" pos:start="411:26" pos:end="411:26">1</literal></expr>]</index></name> <operator pos:start="411:29" pos:end="411:29">=</operator> <name pos:start="411:31" pos:end="411:41"><name pos:start="411:31" pos:end="411:32">op</name><operator pos:start="411:33" pos:end="411:34">-&gt;</operator><name pos:start="411:35" pos:end="411:38">args</name><index pos:start="411:39" pos:end="411:41">[<expr pos:start="411:40" pos:end="411:40"><name pos:start="411:40" pos:end="411:40">i</name></expr>]</index></name></expr>;</expr_stmt>

                <continue pos:start="413:17" pos:end="413:25">continue;</continue>

            </block_content>}</block>

        <default pos:start="417:9" pos:end="417:16">default:</default>

            <break pos:start="419:13" pos:end="419:18">break;</break>

        </block_content>}</block></for>



        <comment type="block" pos:start="425:9" pos:end="425:72">/* Simplify expression for "op r, a, const =&gt; mov r, a" cases */</comment>

        <switch pos:start="427:9" pos:end="487:9">switch <condition pos:start="427:16" pos:end="427:20">(<expr pos:start="427:17" pos:end="427:19"><name pos:start="427:17" pos:end="427:19">opc</name></expr>)</condition> <block pos:start="427:22" pos:end="487:9">{<block_content pos:start="429:9" pos:end="485:18">

        <expr_stmt pos:start="429:9" pos:end="447:28"><expr pos:start="429:9" pos:end="447:28"><call pos:start="429:9" pos:end="429:26"><name pos:start="429:9" pos:end="429:21">CASE_OP_32_64</name><argument_list pos:start="429:22" pos:end="429:26">(<argument pos:start="429:23" pos:end="429:25"><expr pos:start="429:23" pos:end="429:25"><name pos:start="429:23" pos:end="429:25">add</name></expr></argument>)</argument_list></call><operator pos:start="429:27" pos:end="429:27">:</operator>

        <call pos:start="431:9" pos:end="431:26"><name pos:start="431:9" pos:end="431:21">CASE_OP_32_64</name><argument_list pos:start="431:22" pos:end="431:26">(<argument pos:start="431:23" pos:end="431:25"><expr pos:start="431:23" pos:end="431:25"><name pos:start="431:23" pos:end="431:25">sub</name></expr></argument>)</argument_list></call><operator pos:start="431:27" pos:end="431:27">:</operator>

        <call pos:start="433:9" pos:end="433:26"><name pos:start="433:9" pos:end="433:21">CASE_OP_32_64</name><argument_list pos:start="433:22" pos:end="433:26">(<argument pos:start="433:23" pos:end="433:25"><expr pos:start="433:23" pos:end="433:25"><name pos:start="433:23" pos:end="433:25">shl</name></expr></argument>)</argument_list></call><operator pos:start="433:27" pos:end="433:27">:</operator>

        <call pos:start="435:9" pos:end="435:26"><name pos:start="435:9" pos:end="435:21">CASE_OP_32_64</name><argument_list pos:start="435:22" pos:end="435:26">(<argument pos:start="435:23" pos:end="435:25"><expr pos:start="435:23" pos:end="435:25"><name pos:start="435:23" pos:end="435:25">shr</name></expr></argument>)</argument_list></call><operator pos:start="435:27" pos:end="435:27">:</operator>

        <call pos:start="437:9" pos:end="437:26"><name pos:start="437:9" pos:end="437:21">CASE_OP_32_64</name><argument_list pos:start="437:22" pos:end="437:26">(<argument pos:start="437:23" pos:end="437:25"><expr pos:start="437:23" pos:end="437:25"><name pos:start="437:23" pos:end="437:25">sar</name></expr></argument>)</argument_list></call><operator pos:start="437:27" pos:end="437:27">:</operator>

        <call pos:start="439:9" pos:end="439:27"><name pos:start="439:9" pos:end="439:21">CASE_OP_32_64</name><argument_list pos:start="439:22" pos:end="439:27">(<argument pos:start="439:23" pos:end="439:26"><expr pos:start="439:23" pos:end="439:26"><name pos:start="439:23" pos:end="439:26">rotl</name></expr></argument>)</argument_list></call><operator pos:start="439:28" pos:end="439:28">:</operator>

        <call pos:start="441:9" pos:end="441:27"><name pos:start="441:9" pos:end="441:21">CASE_OP_32_64</name><argument_list pos:start="441:22" pos:end="441:27">(<argument pos:start="441:23" pos:end="441:26"><expr pos:start="441:23" pos:end="441:26"><name pos:start="441:23" pos:end="441:26">rotr</name></expr></argument>)</argument_list></call><operator pos:start="441:28" pos:end="441:28">:</operator>

        <call pos:start="443:9" pos:end="443:25"><name pos:start="443:9" pos:end="443:21">CASE_OP_32_64</name><argument_list pos:start="443:22" pos:end="443:25">(<argument pos:start="443:23" pos:end="443:24"><expr pos:start="443:23" pos:end="443:24"><name pos:start="443:23" pos:end="443:24">or</name></expr></argument>)</argument_list></call><operator pos:start="443:26" pos:end="443:26">:</operator>

        <call pos:start="445:9" pos:end="445:26"><name pos:start="445:9" pos:end="445:21">CASE_OP_32_64</name><argument_list pos:start="445:22" pos:end="445:26">(<argument pos:start="445:23" pos:end="445:25"><expr pos:start="445:23" pos:end="445:25"><name pos:start="445:23" pos:end="445:25">xor</name></expr></argument>)</argument_list></call><operator pos:start="445:27" pos:end="445:27">:</operator>

        <call pos:start="447:9" pos:end="447:27"><name pos:start="447:9" pos:end="447:21">CASE_OP_32_64</name><argument_list pos:start="447:22" pos:end="447:27">(<argument pos:start="447:23" pos:end="447:26"><expr pos:start="447:23" pos:end="447:26"><name pos:start="447:23" pos:end="447:26">andc</name></expr></argument>)</argument_list></call><operator pos:start="447:28" pos:end="447:28">:</operator></expr></expr_stmt>

            <if_stmt pos:start="449:13" pos:end="459:13"><if pos:start="449:13" pos:end="459:13">if <condition pos:start="449:16" pos:end="453:51">(<expr pos:start="449:17" pos:end="453:50"><operator pos:start="449:17" pos:end="449:17">!</operator><call pos:start="449:18" pos:end="449:42"><name pos:start="449:18" pos:end="449:29">arg_is_const</name><argument_list pos:start="449:30" pos:end="449:42">(<argument pos:start="449:31" pos:end="449:41"><expr pos:start="449:31" pos:end="449:41"><name pos:start="449:31" pos:end="449:41"><name pos:start="449:31" pos:end="449:32">op</name><operator pos:start="449:33" pos:end="449:34">-&gt;</operator><name pos:start="449:35" pos:end="449:38">args</name><index pos:start="449:39" pos:end="449:41">[<expr pos:start="449:40" pos:end="449:40"><literal type="number" pos:start="449:40" pos:end="449:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="451:17" pos:end="451:18">&amp;&amp;</operator> <call pos:start="451:20" pos:end="451:44"><name pos:start="451:20" pos:end="451:31">arg_is_const</name><argument_list pos:start="451:32" pos:end="451:44">(<argument pos:start="451:33" pos:end="451:43"><expr pos:start="451:33" pos:end="451:43"><name pos:start="451:33" pos:end="451:43"><name pos:start="451:33" pos:end="451:34">op</name><operator pos:start="451:35" pos:end="451:36">-&gt;</operator><name pos:start="451:37" pos:end="451:40">args</name><index pos:start="451:41" pos:end="451:43">[<expr pos:start="451:42" pos:end="451:42"><literal type="number" pos:start="451:42" pos:end="451:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="453:17" pos:end="453:18">&amp;&amp;</operator> <call pos:start="453:20" pos:end="453:40"><name pos:start="453:20" pos:end="453:27">arg_info</name><argument_list pos:start="453:28" pos:end="453:40">(<argument pos:start="453:29" pos:end="453:39"><expr pos:start="453:29" pos:end="453:39"><name pos:start="453:29" pos:end="453:39"><name pos:start="453:29" pos:end="453:30">op</name><operator pos:start="453:31" pos:end="453:32">-&gt;</operator><name pos:start="453:33" pos:end="453:36">args</name><index pos:start="453:37" pos:end="453:39">[<expr pos:start="453:38" pos:end="453:38"><literal type="number" pos:start="453:38" pos:end="453:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="453:41" pos:end="453:42">-&gt;</operator><name pos:start="453:43" pos:end="453:45">val</name> <operator pos:start="453:47" pos:end="453:48">==</operator> <literal type="number" pos:start="453:50" pos:end="453:50">0</literal></expr>)</condition> <block pos:start="453:53" pos:end="459:13">{<block_content pos:start="455:17" pos:end="457:25">

                <expr_stmt pos:start="455:17" pos:end="455:65"><expr pos:start="455:17" pos:end="455:64"><call pos:start="455:17" pos:end="455:64"><name pos:start="455:17" pos:end="455:31">tcg_opt_gen_mov</name><argument_list pos:start="455:32" pos:end="455:64">(<argument pos:start="455:33" pos:end="455:33"><expr pos:start="455:33" pos:end="455:33"><name pos:start="455:33" pos:end="455:33">s</name></expr></argument>, <argument pos:start="455:36" pos:end="455:37"><expr pos:start="455:36" pos:end="455:37"><name pos:start="455:36" pos:end="455:37">op</name></expr></argument>, <argument pos:start="455:40" pos:end="455:50"><expr pos:start="455:40" pos:end="455:50"><name pos:start="455:40" pos:end="455:50"><name pos:start="455:40" pos:end="455:41">op</name><operator pos:start="455:42" pos:end="455:43">-&gt;</operator><name pos:start="455:44" pos:end="455:47">args</name><index pos:start="455:48" pos:end="455:50">[<expr pos:start="455:49" pos:end="455:49"><literal type="number" pos:start="455:49" pos:end="455:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="455:53" pos:end="455:63"><expr pos:start="455:53" pos:end="455:63"><name pos:start="455:53" pos:end="455:63"><name pos:start="455:53" pos:end="455:54">op</name><operator pos:start="455:55" pos:end="455:56">-&gt;</operator><name pos:start="455:57" pos:end="455:60">args</name><index pos:start="455:61" pos:end="455:63">[<expr pos:start="455:62" pos:end="455:62"><literal type="number" pos:start="455:62" pos:end="455:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="457:17" pos:end="457:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="461:13" pos:end="461:18">break;</break>

        <expr_stmt pos:start="463:9" pos:end="467:27"><expr pos:start="463:9" pos:end="467:27"><call pos:start="463:9" pos:end="463:26"><name pos:start="463:9" pos:end="463:21">CASE_OP_32_64</name><argument_list pos:start="463:22" pos:end="463:26">(<argument pos:start="463:23" pos:end="463:25"><expr pos:start="463:23" pos:end="463:25"><name pos:start="463:23" pos:end="463:25">and</name></expr></argument>)</argument_list></call><operator pos:start="463:27" pos:end="463:27">:</operator>

        <call pos:start="465:9" pos:end="465:26"><name pos:start="465:9" pos:end="465:21">CASE_OP_32_64</name><argument_list pos:start="465:22" pos:end="465:26">(<argument pos:start="465:23" pos:end="465:25"><expr pos:start="465:23" pos:end="465:25"><name pos:start="465:23" pos:end="465:25">orc</name></expr></argument>)</argument_list></call><operator pos:start="465:27" pos:end="465:27">:</operator>

        <call pos:start="467:9" pos:end="467:26"><name pos:start="467:9" pos:end="467:21">CASE_OP_32_64</name><argument_list pos:start="467:22" pos:end="467:26">(<argument pos:start="467:23" pos:end="467:25"><expr pos:start="467:23" pos:end="467:25"><name pos:start="467:23" pos:end="467:25">eqv</name></expr></argument>)</argument_list></call><operator pos:start="467:27" pos:end="467:27">:</operator></expr></expr_stmt>

            <if_stmt pos:start="469:13" pos:end="479:13"><if pos:start="469:13" pos:end="479:13">if <condition pos:start="469:16" pos:end="473:52">(<expr pos:start="469:17" pos:end="473:51"><operator pos:start="469:17" pos:end="469:17">!</operator><call pos:start="469:18" pos:end="469:42"><name pos:start="469:18" pos:end="469:29">arg_is_const</name><argument_list pos:start="469:30" pos:end="469:42">(<argument pos:start="469:31" pos:end="469:41"><expr pos:start="469:31" pos:end="469:41"><name pos:start="469:31" pos:end="469:41"><name pos:start="469:31" pos:end="469:32">op</name><operator pos:start="469:33" pos:end="469:34">-&gt;</operator><name pos:start="469:35" pos:end="469:38">args</name><index pos:start="469:39" pos:end="469:41">[<expr pos:start="469:40" pos:end="469:40"><literal type="number" pos:start="469:40" pos:end="469:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="471:17" pos:end="471:18">&amp;&amp;</operator> <call pos:start="471:20" pos:end="471:44"><name pos:start="471:20" pos:end="471:31">arg_is_const</name><argument_list pos:start="471:32" pos:end="471:44">(<argument pos:start="471:33" pos:end="471:43"><expr pos:start="471:33" pos:end="471:43"><name pos:start="471:33" pos:end="471:43"><name pos:start="471:33" pos:end="471:34">op</name><operator pos:start="471:35" pos:end="471:36">-&gt;</operator><name pos:start="471:37" pos:end="471:40">args</name><index pos:start="471:41" pos:end="471:43">[<expr pos:start="471:42" pos:end="471:42"><literal type="number" pos:start="471:42" pos:end="471:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="473:17" pos:end="473:18">&amp;&amp;</operator> <call pos:start="473:20" pos:end="473:40"><name pos:start="473:20" pos:end="473:27">arg_info</name><argument_list pos:start="473:28" pos:end="473:40">(<argument pos:start="473:29" pos:end="473:39"><expr pos:start="473:29" pos:end="473:39"><name pos:start="473:29" pos:end="473:39"><name pos:start="473:29" pos:end="473:30">op</name><operator pos:start="473:31" pos:end="473:32">-&gt;</operator><name pos:start="473:33" pos:end="473:36">args</name><index pos:start="473:37" pos:end="473:39">[<expr pos:start="473:38" pos:end="473:38"><literal type="number" pos:start="473:38" pos:end="473:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="473:41" pos:end="473:42">-&gt;</operator><name pos:start="473:43" pos:end="473:45">val</name> <operator pos:start="473:47" pos:end="473:48">==</operator> <operator pos:start="473:50" pos:end="473:50">-</operator><literal type="number" pos:start="473:51" pos:end="473:51">1</literal></expr>)</condition> <block pos:start="473:54" pos:end="479:13">{<block_content pos:start="475:17" pos:end="477:25">

                <expr_stmt pos:start="475:17" pos:end="475:65"><expr pos:start="475:17" pos:end="475:64"><call pos:start="475:17" pos:end="475:64"><name pos:start="475:17" pos:end="475:31">tcg_opt_gen_mov</name><argument_list pos:start="475:32" pos:end="475:64">(<argument pos:start="475:33" pos:end="475:33"><expr pos:start="475:33" pos:end="475:33"><name pos:start="475:33" pos:end="475:33">s</name></expr></argument>, <argument pos:start="475:36" pos:end="475:37"><expr pos:start="475:36" pos:end="475:37"><name pos:start="475:36" pos:end="475:37">op</name></expr></argument>, <argument pos:start="475:40" pos:end="475:50"><expr pos:start="475:40" pos:end="475:50"><name pos:start="475:40" pos:end="475:50"><name pos:start="475:40" pos:end="475:41">op</name><operator pos:start="475:42" pos:end="475:43">-&gt;</operator><name pos:start="475:44" pos:end="475:47">args</name><index pos:start="475:48" pos:end="475:50">[<expr pos:start="475:49" pos:end="475:49"><literal type="number" pos:start="475:49" pos:end="475:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="475:53" pos:end="475:63"><expr pos:start="475:53" pos:end="475:63"><name pos:start="475:53" pos:end="475:63"><name pos:start="475:53" pos:end="475:54">op</name><operator pos:start="475:55" pos:end="475:56">-&gt;</operator><name pos:start="475:57" pos:end="475:60">args</name><index pos:start="475:61" pos:end="475:63">[<expr pos:start="475:62" pos:end="475:62"><literal type="number" pos:start="475:62" pos:end="475:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="477:17" pos:end="477:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="481:13" pos:end="481:18">break;</break>

        <default pos:start="483:9" pos:end="483:16">default:</default>

            <break pos:start="485:13" pos:end="485:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="491:9" pos:end="493:43">/* Simplify using known-zero bits. Currently only ops with a single

           output argument is supported. */</comment>

        <expr_stmt pos:start="495:9" pos:end="495:18"><expr pos:start="495:9" pos:end="495:17"><name pos:start="495:9" pos:end="495:12">mask</name> <operator pos:start="495:14" pos:end="495:14">=</operator> <operator pos:start="495:16" pos:end="495:16">-</operator><literal type="number" pos:start="495:17" pos:end="495:17">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="497:9" pos:end="497:22"><expr pos:start="497:9" pos:end="497:21"><name pos:start="497:9" pos:end="497:16">affected</name> <operator pos:start="497:18" pos:end="497:18">=</operator> <operator pos:start="497:20" pos:end="497:20">-</operator><literal type="number" pos:start="497:21" pos:end="497:21">1</literal></expr>;</expr_stmt>

        <switch pos:start="499:9" pos:end="833:13">switch <condition pos:start="499:16" pos:end="499:20">(<expr pos:start="499:17" pos:end="499:19"><name pos:start="499:17" pos:end="499:19">opc</name></expr>)</condition> <block pos:start="499:22" pos:end="833:13">{<block_content pos:start="501:9" pos:end="831:17">

        <expr_stmt pos:start="501:9" pos:end="501:29"><expr pos:start="501:9" pos:end="501:29"><call pos:start="501:9" pos:end="501:28"><name pos:start="501:9" pos:end="501:21">CASE_OP_32_64</name><argument_list pos:start="501:22" pos:end="501:28">(<argument pos:start="501:23" pos:end="501:27"><expr pos:start="501:23" pos:end="501:27"><name pos:start="501:23" pos:end="501:27">ext8s</name></expr></argument>)</argument_list></call><operator pos:start="501:29" pos:end="501:29">:</operator></expr></expr_stmt>

            <if_stmt pos:start="503:13" pos:end="507:13"><if pos:start="503:13" pos:end="507:13">if <condition pos:start="503:16" pos:end="503:58">(<expr pos:start="503:17" pos:end="503:57"><operator pos:start="503:17" pos:end="503:17">(</operator><call pos:start="503:18" pos:end="503:38"><name pos:start="503:18" pos:end="503:25">arg_info</name><argument_list pos:start="503:26" pos:end="503:38">(<argument pos:start="503:27" pos:end="503:37"><expr pos:start="503:27" pos:end="503:37"><name pos:start="503:27" pos:end="503:37"><name pos:start="503:27" pos:end="503:28">op</name><operator pos:start="503:29" pos:end="503:30">-&gt;</operator><name pos:start="503:31" pos:end="503:34">args</name><index pos:start="503:35" pos:end="503:37">[<expr pos:start="503:36" pos:end="503:36"><literal type="number" pos:start="503:36" pos:end="503:36">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="503:39" pos:end="503:40">-&gt;</operator><name pos:start="503:41" pos:end="503:44">mask</name> <operator pos:start="503:46" pos:end="503:46">&amp;</operator> <literal type="number" pos:start="503:48" pos:end="503:51">0x80</literal><operator pos:start="503:52" pos:end="503:52">)</operator> <operator pos:start="503:54" pos:end="503:55">!=</operator> <literal type="number" pos:start="503:57" pos:end="503:57">0</literal></expr>)</condition> <block pos:start="503:60" pos:end="507:13">{<block_content pos:start="505:17" pos:end="505:22">

                <break pos:start="505:17" pos:end="505:22">break;</break>

            </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="509:9" pos:end="511:24"><expr pos:start="509:9" pos:end="511:23"><call pos:start="509:9" pos:end="509:28"><name pos:start="509:9" pos:end="509:21">CASE_OP_32_64</name><argument_list pos:start="509:22" pos:end="509:28">(<argument pos:start="509:23" pos:end="509:27"><expr pos:start="509:23" pos:end="509:27"><name pos:start="509:23" pos:end="509:27">ext8u</name></expr></argument>)</argument_list></call><operator pos:start="509:29" pos:end="509:29">:</operator>

            <name pos:start="511:13" pos:end="511:16">mask</name> <operator pos:start="511:18" pos:end="511:18">=</operator> <literal type="number" pos:start="511:20" pos:end="511:23">0xff</literal></expr>;</expr_stmt>

            <goto pos:start="513:13" pos:end="513:27">goto <name pos:start="513:18" pos:end="513:26">and_const</name>;</goto>

        <expr_stmt pos:start="515:9" pos:end="515:30"><expr pos:start="515:9" pos:end="515:30"><call pos:start="515:9" pos:end="515:29"><name pos:start="515:9" pos:end="515:21">CASE_OP_32_64</name><argument_list pos:start="515:22" pos:end="515:29">(<argument pos:start="515:23" pos:end="515:28"><expr pos:start="515:23" pos:end="515:28"><name pos:start="515:23" pos:end="515:28">ext16s</name></expr></argument>)</argument_list></call><operator pos:start="515:30" pos:end="515:30">:</operator></expr></expr_stmt>

            <if_stmt pos:start="517:13" pos:end="521:13"><if pos:start="517:13" pos:end="521:13">if <condition pos:start="517:16" pos:end="517:60">(<expr pos:start="517:17" pos:end="517:59"><operator pos:start="517:17" pos:end="517:17">(</operator><call pos:start="517:18" pos:end="517:38"><name pos:start="517:18" pos:end="517:25">arg_info</name><argument_list pos:start="517:26" pos:end="517:38">(<argument pos:start="517:27" pos:end="517:37"><expr pos:start="517:27" pos:end="517:37"><name pos:start="517:27" pos:end="517:37"><name pos:start="517:27" pos:end="517:28">op</name><operator pos:start="517:29" pos:end="517:30">-&gt;</operator><name pos:start="517:31" pos:end="517:34">args</name><index pos:start="517:35" pos:end="517:37">[<expr pos:start="517:36" pos:end="517:36"><literal type="number" pos:start="517:36" pos:end="517:36">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="517:39" pos:end="517:40">-&gt;</operator><name pos:start="517:41" pos:end="517:44">mask</name> <operator pos:start="517:46" pos:end="517:46">&amp;</operator> <literal type="number" pos:start="517:48" pos:end="517:53">0x8000</literal><operator pos:start="517:54" pos:end="517:54">)</operator> <operator pos:start="517:56" pos:end="517:57">!=</operator> <literal type="number" pos:start="517:59" pos:end="517:59">0</literal></expr>)</condition> <block pos:start="517:62" pos:end="521:13">{<block_content pos:start="519:17" pos:end="519:22">

                <break pos:start="519:17" pos:end="519:22">break;</break>

            </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="523:9" pos:end="525:26"><expr pos:start="523:9" pos:end="525:25"><call pos:start="523:9" pos:end="523:29"><name pos:start="523:9" pos:end="523:21">CASE_OP_32_64</name><argument_list pos:start="523:22" pos:end="523:29">(<argument pos:start="523:23" pos:end="523:28"><expr pos:start="523:23" pos:end="523:28"><name pos:start="523:23" pos:end="523:28">ext16u</name></expr></argument>)</argument_list></call><operator pos:start="523:30" pos:end="523:30">:</operator>

            <name pos:start="525:13" pos:end="525:16">mask</name> <operator pos:start="525:18" pos:end="525:18">=</operator> <literal type="number" pos:start="525:20" pos:end="525:25">0xffff</literal></expr>;</expr_stmt>

            <goto pos:start="527:13" pos:end="527:27">goto <name pos:start="527:18" pos:end="527:26">and_const</name>;</goto>

        <case pos:start="529:9" pos:end="529:33">case <expr pos:start="529:14" pos:end="529:32"><name pos:start="529:14" pos:end="529:32">INDEX_op_ext32s_i64</name></expr>:</case>

            <if_stmt pos:start="531:13" pos:end="535:13"><if pos:start="531:13" pos:end="535:13">if <condition pos:start="531:16" pos:end="531:64">(<expr pos:start="531:17" pos:end="531:63"><operator pos:start="531:17" pos:end="531:17">(</operator><call pos:start="531:18" pos:end="531:38"><name pos:start="531:18" pos:end="531:25">arg_info</name><argument_list pos:start="531:26" pos:end="531:38">(<argument pos:start="531:27" pos:end="531:37"><expr pos:start="531:27" pos:end="531:37"><name pos:start="531:27" pos:end="531:37"><name pos:start="531:27" pos:end="531:28">op</name><operator pos:start="531:29" pos:end="531:30">-&gt;</operator><name pos:start="531:31" pos:end="531:34">args</name><index pos:start="531:35" pos:end="531:37">[<expr pos:start="531:36" pos:end="531:36"><literal type="number" pos:start="531:36" pos:end="531:36">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="531:39" pos:end="531:40">-&gt;</operator><name pos:start="531:41" pos:end="531:44">mask</name> <operator pos:start="531:46" pos:end="531:46">&amp;</operator> <literal type="number" pos:start="531:48" pos:end="531:57">0x80000000</literal><operator pos:start="531:58" pos:end="531:58">)</operator> <operator pos:start="531:60" pos:end="531:61">!=</operator> <literal type="number" pos:start="531:63" pos:end="531:63">0</literal></expr>)</condition> <block pos:start="531:66" pos:end="535:13">{<block_content pos:start="533:17" pos:end="533:22">

                <break pos:start="533:17" pos:end="533:22">break;</break>

            </block_content>}</block></if></if_stmt>

        <case pos:start="537:9" pos:end="537:33">case <expr pos:start="537:14" pos:end="537:32"><name pos:start="537:14" pos:end="537:32">INDEX_op_ext32u_i64</name></expr>:</case>

            <expr_stmt pos:start="539:13" pos:end="539:31"><expr pos:start="539:13" pos:end="539:30"><name pos:start="539:13" pos:end="539:16">mask</name> <operator pos:start="539:18" pos:end="539:18">=</operator> <literal type="number" pos:start="539:20" pos:end="539:30">0xffffffffU</literal></expr>;</expr_stmt>

            <goto pos:start="541:13" pos:end="541:27">goto <name pos:start="541:18" pos:end="541:26">and_const</name>;</goto>



        <expr_stmt pos:start="545:9" pos:end="547:47"><expr pos:start="545:9" pos:end="547:46"><call pos:start="545:9" pos:end="545:26"><name pos:start="545:9" pos:end="545:21">CASE_OP_32_64</name><argument_list pos:start="545:22" pos:end="545:26">(<argument pos:start="545:23" pos:end="545:25"><expr pos:start="545:23" pos:end="545:25"><name pos:start="545:23" pos:end="545:25">and</name></expr></argument>)</argument_list></call><operator pos:start="545:27" pos:end="545:27">:</operator>

            <name pos:start="547:13" pos:end="547:16">mask</name> <operator pos:start="547:18" pos:end="547:18">=</operator> <call pos:start="547:20" pos:end="547:40"><name pos:start="547:20" pos:end="547:27">arg_info</name><argument_list pos:start="547:28" pos:end="547:40">(<argument pos:start="547:29" pos:end="547:39"><expr pos:start="547:29" pos:end="547:39"><name pos:start="547:29" pos:end="547:39"><name pos:start="547:29" pos:end="547:30">op</name><operator pos:start="547:31" pos:end="547:32">-&gt;</operator><name pos:start="547:33" pos:end="547:36">args</name><index pos:start="547:37" pos:end="547:39">[<expr pos:start="547:38" pos:end="547:38"><literal type="number" pos:start="547:38" pos:end="547:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="547:41" pos:end="547:42">-&gt;</operator><name pos:start="547:43" pos:end="547:46">mask</name></expr>;</expr_stmt>

            <if_stmt pos:start="549:13" pos:end="555:13"><if pos:start="549:13" pos:end="555:13">if <condition pos:start="549:16" pos:end="549:42">(<expr pos:start="549:17" pos:end="549:41"><call pos:start="549:17" pos:end="549:41"><name pos:start="549:17" pos:end="549:28">arg_is_const</name><argument_list pos:start="549:29" pos:end="549:41">(<argument pos:start="549:30" pos:end="549:40"><expr pos:start="549:30" pos:end="549:40"><name pos:start="549:30" pos:end="549:40"><name pos:start="549:30" pos:end="549:31">op</name><operator pos:start="549:32" pos:end="549:33">-&gt;</operator><name pos:start="549:34" pos:end="549:37">args</name><index pos:start="549:38" pos:end="549:40">[<expr pos:start="549:39" pos:end="549:39"><literal type="number" pos:start="549:39" pos:end="549:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="549:44" pos:end="555:13">{<block_content pos:start="551:9" pos:end="553:63">

        <label pos:start="551:9" pos:end="551:18"><name pos:start="551:9" pos:end="551:17">and_const</name>:</label>

                <expr_stmt pos:start="553:17" pos:end="553:63"><expr pos:start="553:17" pos:end="553:62"><name pos:start="553:17" pos:end="553:24">affected</name> <operator pos:start="553:26" pos:end="553:26">=</operator> <call pos:start="553:28" pos:end="553:48"><name pos:start="553:28" pos:end="553:35">arg_info</name><argument_list pos:start="553:36" pos:end="553:48">(<argument pos:start="553:37" pos:end="553:47"><expr pos:start="553:37" pos:end="553:47"><name pos:start="553:37" pos:end="553:47"><name pos:start="553:37" pos:end="553:38">op</name><operator pos:start="553:39" pos:end="553:40">-&gt;</operator><name pos:start="553:41" pos:end="553:44">args</name><index pos:start="553:45" pos:end="553:47">[<expr pos:start="553:46" pos:end="553:46"><literal type="number" pos:start="553:46" pos:end="553:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="553:49" pos:end="553:50">-&gt;</operator><name pos:start="553:51" pos:end="553:54">mask</name> <operator pos:start="553:56" pos:end="553:56">&amp;</operator> <operator pos:start="553:58" pos:end="553:58">~</operator><name pos:start="553:59" pos:end="553:62">mask</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="557:13" pos:end="557:54"><expr pos:start="557:13" pos:end="557:53"><name pos:start="557:13" pos:end="557:16">mask</name> <operator pos:start="557:18" pos:end="557:18">=</operator> <call pos:start="557:20" pos:end="557:40"><name pos:start="557:20" pos:end="557:27">arg_info</name><argument_list pos:start="557:28" pos:end="557:40">(<argument pos:start="557:29" pos:end="557:39"><expr pos:start="557:29" pos:end="557:39"><name pos:start="557:29" pos:end="557:39"><name pos:start="557:29" pos:end="557:30">op</name><operator pos:start="557:31" pos:end="557:32">-&gt;</operator><name pos:start="557:33" pos:end="557:36">args</name><index pos:start="557:37" pos:end="557:39">[<expr pos:start="557:38" pos:end="557:38"><literal type="number" pos:start="557:38" pos:end="557:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="557:41" pos:end="557:42">-&gt;</operator><name pos:start="557:43" pos:end="557:46">mask</name> <operator pos:start="557:48" pos:end="557:48">&amp;</operator> <name pos:start="557:50" pos:end="557:53">mask</name></expr>;</expr_stmt>

            <break pos:start="559:13" pos:end="559:18">break;</break>



        <case pos:start="563:9" pos:end="563:34">case <expr pos:start="563:14" pos:end="563:33"><name pos:start="563:14" pos:end="563:33">INDEX_op_ext_i32_i64</name></expr>:</case>

            <if_stmt pos:start="565:13" pos:end="569:13"><if pos:start="565:13" pos:end="569:13">if <condition pos:start="565:16" pos:end="565:64">(<expr pos:start="565:17" pos:end="565:63"><operator pos:start="565:17" pos:end="565:17">(</operator><call pos:start="565:18" pos:end="565:38"><name pos:start="565:18" pos:end="565:25">arg_info</name><argument_list pos:start="565:26" pos:end="565:38">(<argument pos:start="565:27" pos:end="565:37"><expr pos:start="565:27" pos:end="565:37"><name pos:start="565:27" pos:end="565:37"><name pos:start="565:27" pos:end="565:28">op</name><operator pos:start="565:29" pos:end="565:30">-&gt;</operator><name pos:start="565:31" pos:end="565:34">args</name><index pos:start="565:35" pos:end="565:37">[<expr pos:start="565:36" pos:end="565:36"><literal type="number" pos:start="565:36" pos:end="565:36">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="565:39" pos:end="565:40">-&gt;</operator><name pos:start="565:41" pos:end="565:44">mask</name> <operator pos:start="565:46" pos:end="565:46">&amp;</operator> <literal type="number" pos:start="565:48" pos:end="565:57">0x80000000</literal><operator pos:start="565:58" pos:end="565:58">)</operator> <operator pos:start="565:60" pos:end="565:61">!=</operator> <literal type="number" pos:start="565:63" pos:end="565:63">0</literal></expr>)</condition> <block pos:start="565:66" pos:end="569:13">{<block_content pos:start="567:17" pos:end="567:22">

                <break pos:start="567:17" pos:end="567:22">break;</break>

            </block_content>}</block></if></if_stmt>

        <case pos:start="571:9" pos:end="571:35">case <expr pos:start="571:14" pos:end="571:34"><name pos:start="571:14" pos:end="571:34">INDEX_op_extu_i32_i64</name></expr>:</case>

            <comment type="block" pos:start="573:13" pos:end="573:74">/* We do not compute affected as it is a size changing op.  */</comment>

            <expr_stmt pos:start="575:13" pos:end="575:57"><expr pos:start="575:13" pos:end="575:56"><name pos:start="575:13" pos:end="575:16">mask</name> <operator pos:start="575:18" pos:end="575:18">=</operator> <operator pos:start="575:20" pos:end="575:20">(</operator><name pos:start="575:21" pos:end="575:28">uint32_t</name><operator pos:start="575:29" pos:end="575:29">)</operator><call pos:start="575:30" pos:end="575:50"><name pos:start="575:30" pos:end="575:37">arg_info</name><argument_list pos:start="575:38" pos:end="575:50">(<argument pos:start="575:39" pos:end="575:49"><expr pos:start="575:39" pos:end="575:49"><name pos:start="575:39" pos:end="575:49"><name pos:start="575:39" pos:end="575:40">op</name><operator pos:start="575:41" pos:end="575:42">-&gt;</operator><name pos:start="575:43" pos:end="575:46">args</name><index pos:start="575:47" pos:end="575:49">[<expr pos:start="575:48" pos:end="575:48"><literal type="number" pos:start="575:48" pos:end="575:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="575:51" pos:end="575:52">-&gt;</operator><name pos:start="575:53" pos:end="575:56">mask</name></expr>;</expr_stmt>

            <break pos:start="577:13" pos:end="577:18">break;</break>



        <expr_stmt pos:start="581:9" pos:end="581:28"><expr pos:start="581:9" pos:end="581:28"><call pos:start="581:9" pos:end="581:27"><name pos:start="581:9" pos:end="581:21">CASE_OP_32_64</name><argument_list pos:start="581:22" pos:end="581:27">(<argument pos:start="581:23" pos:end="581:26"><expr pos:start="581:23" pos:end="581:26"><name pos:start="581:23" pos:end="581:26">andc</name></expr></argument>)</argument_list></call><operator pos:start="581:28" pos:end="581:28">:</operator></expr></expr_stmt>

            <comment type="block" pos:start="583:13" pos:end="585:76">/* Known-zeros does not imply known-ones.  Therefore unless

               op-&gt;args[2] is constant, we can't infer anything from it.  */</comment>

            <if_stmt pos:start="587:13" pos:end="593:13"><if pos:start="587:13" pos:end="593:13">if <condition pos:start="587:16" pos:end="587:42">(<expr pos:start="587:17" pos:end="587:41"><call pos:start="587:17" pos:end="587:41"><name pos:start="587:17" pos:end="587:28">arg_is_const</name><argument_list pos:start="587:29" pos:end="587:41">(<argument pos:start="587:30" pos:end="587:40"><expr pos:start="587:30" pos:end="587:40"><name pos:start="587:30" pos:end="587:40"><name pos:start="587:30" pos:end="587:31">op</name><operator pos:start="587:32" pos:end="587:33">-&gt;</operator><name pos:start="587:34" pos:end="587:37">args</name><index pos:start="587:38" pos:end="587:40">[<expr pos:start="587:39" pos:end="587:39"><literal type="number" pos:start="587:39" pos:end="587:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="587:44" pos:end="593:13">{<block_content pos:start="589:17" pos:end="591:31">

                <expr_stmt pos:start="589:17" pos:end="589:52"><expr pos:start="589:17" pos:end="589:51"><name pos:start="589:17" pos:end="589:20">mask</name> <operator pos:start="589:22" pos:end="589:22">=</operator> <operator pos:start="589:24" pos:end="589:24">~</operator><call pos:start="589:25" pos:end="589:45"><name pos:start="589:25" pos:end="589:32">arg_info</name><argument_list pos:start="589:33" pos:end="589:45">(<argument pos:start="589:34" pos:end="589:44"><expr pos:start="589:34" pos:end="589:44"><name pos:start="589:34" pos:end="589:44"><name pos:start="589:34" pos:end="589:35">op</name><operator pos:start="589:36" pos:end="589:37">-&gt;</operator><name pos:start="589:38" pos:end="589:41">args</name><index pos:start="589:42" pos:end="589:44">[<expr pos:start="589:43" pos:end="589:43"><literal type="number" pos:start="589:43" pos:end="589:43">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="589:46" pos:end="589:47">-&gt;</operator><name pos:start="589:48" pos:end="589:51">mask</name></expr>;</expr_stmt>

                <goto pos:start="591:17" pos:end="591:31">goto <name pos:start="591:22" pos:end="591:30">and_const</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="595:13" pos:end="595:75">/* But we certainly know nothing outside args[1] may be set. */</comment>

            <expr_stmt pos:start="597:13" pos:end="597:47"><expr pos:start="597:13" pos:end="597:46"><name pos:start="597:13" pos:end="597:16">mask</name> <operator pos:start="597:18" pos:end="597:18">=</operator> <call pos:start="597:20" pos:end="597:40"><name pos:start="597:20" pos:end="597:27">arg_info</name><argument_list pos:start="597:28" pos:end="597:40">(<argument pos:start="597:29" pos:end="597:39"><expr pos:start="597:29" pos:end="597:39"><name pos:start="597:29" pos:end="597:39"><name pos:start="597:29" pos:end="597:30">op</name><operator pos:start="597:31" pos:end="597:32">-&gt;</operator><name pos:start="597:33" pos:end="597:36">args</name><index pos:start="597:37" pos:end="597:39">[<expr pos:start="597:38" pos:end="597:38"><literal type="number" pos:start="597:38" pos:end="597:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="597:41" pos:end="597:42">-&gt;</operator><name pos:start="597:43" pos:end="597:46">mask</name></expr>;</expr_stmt>

            <break pos:start="599:13" pos:end="599:18">break;</break>



        <case pos:start="603:9" pos:end="603:30">case <expr pos:start="603:14" pos:end="603:29"><name pos:start="603:14" pos:end="603:29">INDEX_op_sar_i32</name></expr>:</case>

            <if_stmt pos:start="605:13" pos:end="611:13"><if pos:start="605:13" pos:end="611:13">if <condition pos:start="605:16" pos:end="605:42">(<expr pos:start="605:17" pos:end="605:41"><call pos:start="605:17" pos:end="605:41"><name pos:start="605:17" pos:end="605:28">arg_is_const</name><argument_list pos:start="605:29" pos:end="605:41">(<argument pos:start="605:30" pos:end="605:40"><expr pos:start="605:30" pos:end="605:40"><name pos:start="605:30" pos:end="605:40"><name pos:start="605:30" pos:end="605:31">op</name><operator pos:start="605:32" pos:end="605:33">-&gt;</operator><name pos:start="605:34" pos:end="605:37">args</name><index pos:start="605:38" pos:end="605:40">[<expr pos:start="605:39" pos:end="605:39"><literal type="number" pos:start="605:39" pos:end="605:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="605:44" pos:end="611:13">{<block_content pos:start="607:17" pos:end="609:67">

                <expr_stmt pos:start="607:17" pos:end="607:54"><expr pos:start="607:17" pos:end="607:53"><name pos:start="607:17" pos:end="607:19">tmp</name> <operator pos:start="607:21" pos:end="607:21">=</operator> <call pos:start="607:23" pos:end="607:43"><name pos:start="607:23" pos:end="607:30">arg_info</name><argument_list pos:start="607:31" pos:end="607:43">(<argument pos:start="607:32" pos:end="607:42"><expr pos:start="607:32" pos:end="607:42"><name pos:start="607:32" pos:end="607:42"><name pos:start="607:32" pos:end="607:33">op</name><operator pos:start="607:34" pos:end="607:35">-&gt;</operator><name pos:start="607:36" pos:end="607:39">args</name><index pos:start="607:40" pos:end="607:42">[<expr pos:start="607:41" pos:end="607:41"><literal type="number" pos:start="607:41" pos:end="607:41">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="607:44" pos:end="607:45">-&gt;</operator><name pos:start="607:46" pos:end="607:48">val</name> <operator pos:start="607:50" pos:end="607:50">&amp;</operator> <literal type="number" pos:start="607:52" pos:end="607:53">31</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="609:17" pos:end="609:67"><expr pos:start="609:17" pos:end="609:66"><name pos:start="609:17" pos:end="609:20">mask</name> <operator pos:start="609:22" pos:end="609:22">=</operator> <operator pos:start="609:24" pos:end="609:24">(</operator><name pos:start="609:25" pos:end="609:31">int32_t</name><operator pos:start="609:32" pos:end="609:32">)</operator><call pos:start="609:33" pos:end="609:53"><name pos:start="609:33" pos:end="609:40">arg_info</name><argument_list pos:start="609:41" pos:end="609:53">(<argument pos:start="609:42" pos:end="609:52"><expr pos:start="609:42" pos:end="609:52"><name pos:start="609:42" pos:end="609:52"><name pos:start="609:42" pos:end="609:43">op</name><operator pos:start="609:44" pos:end="609:45">-&gt;</operator><name pos:start="609:46" pos:end="609:49">args</name><index pos:start="609:50" pos:end="609:52">[<expr pos:start="609:51" pos:end="609:51"><literal type="number" pos:start="609:51" pos:end="609:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="609:54" pos:end="609:55">-&gt;</operator><name pos:start="609:56" pos:end="609:59">mask</name> <operator pos:start="609:61" pos:end="609:62">&gt;&gt;</operator> <name pos:start="609:64" pos:end="609:66">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="613:13" pos:end="613:18">break;</break>

        <case pos:start="615:9" pos:end="615:30">case <expr pos:start="615:14" pos:end="615:29"><name pos:start="615:14" pos:end="615:29">INDEX_op_sar_i64</name></expr>:</case>

            <if_stmt pos:start="617:13" pos:end="623:13"><if pos:start="617:13" pos:end="623:13">if <condition pos:start="617:16" pos:end="617:42">(<expr pos:start="617:17" pos:end="617:41"><call pos:start="617:17" pos:end="617:41"><name pos:start="617:17" pos:end="617:28">arg_is_const</name><argument_list pos:start="617:29" pos:end="617:41">(<argument pos:start="617:30" pos:end="617:40"><expr pos:start="617:30" pos:end="617:40"><name pos:start="617:30" pos:end="617:40"><name pos:start="617:30" pos:end="617:31">op</name><operator pos:start="617:32" pos:end="617:33">-&gt;</operator><name pos:start="617:34" pos:end="617:37">args</name><index pos:start="617:38" pos:end="617:40">[<expr pos:start="617:39" pos:end="617:39"><literal type="number" pos:start="617:39" pos:end="617:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="617:44" pos:end="623:13">{<block_content pos:start="619:17" pos:end="621:67">

                <expr_stmt pos:start="619:17" pos:end="619:54"><expr pos:start="619:17" pos:end="619:53"><name pos:start="619:17" pos:end="619:19">tmp</name> <operator pos:start="619:21" pos:end="619:21">=</operator> <call pos:start="619:23" pos:end="619:43"><name pos:start="619:23" pos:end="619:30">arg_info</name><argument_list pos:start="619:31" pos:end="619:43">(<argument pos:start="619:32" pos:end="619:42"><expr pos:start="619:32" pos:end="619:42"><name pos:start="619:32" pos:end="619:42"><name pos:start="619:32" pos:end="619:33">op</name><operator pos:start="619:34" pos:end="619:35">-&gt;</operator><name pos:start="619:36" pos:end="619:39">args</name><index pos:start="619:40" pos:end="619:42">[<expr pos:start="619:41" pos:end="619:41"><literal type="number" pos:start="619:41" pos:end="619:41">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="619:44" pos:end="619:45">-&gt;</operator><name pos:start="619:46" pos:end="619:48">val</name> <operator pos:start="619:50" pos:end="619:50">&amp;</operator> <literal type="number" pos:start="619:52" pos:end="619:53">63</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="621:17" pos:end="621:67"><expr pos:start="621:17" pos:end="621:66"><name pos:start="621:17" pos:end="621:20">mask</name> <operator pos:start="621:22" pos:end="621:22">=</operator> <operator pos:start="621:24" pos:end="621:24">(</operator><name pos:start="621:25" pos:end="621:31">int64_t</name><operator pos:start="621:32" pos:end="621:32">)</operator><call pos:start="621:33" pos:end="621:53"><name pos:start="621:33" pos:end="621:40">arg_info</name><argument_list pos:start="621:41" pos:end="621:53">(<argument pos:start="621:42" pos:end="621:52"><expr pos:start="621:42" pos:end="621:52"><name pos:start="621:42" pos:end="621:52"><name pos:start="621:42" pos:end="621:43">op</name><operator pos:start="621:44" pos:end="621:45">-&gt;</operator><name pos:start="621:46" pos:end="621:49">args</name><index pos:start="621:50" pos:end="621:52">[<expr pos:start="621:51" pos:end="621:51"><literal type="number" pos:start="621:51" pos:end="621:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="621:54" pos:end="621:55">-&gt;</operator><name pos:start="621:56" pos:end="621:59">mask</name> <operator pos:start="621:61" pos:end="621:62">&gt;&gt;</operator> <name pos:start="621:64" pos:end="621:66">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="625:13" pos:end="625:18">break;</break>



        <case pos:start="629:9" pos:end="629:30">case <expr pos:start="629:14" pos:end="629:29"><name pos:start="629:14" pos:end="629:29">INDEX_op_shr_i32</name></expr>:</case>

            <if_stmt pos:start="631:13" pos:end="637:13"><if pos:start="631:13" pos:end="637:13">if <condition pos:start="631:16" pos:end="631:42">(<expr pos:start="631:17" pos:end="631:41"><call pos:start="631:17" pos:end="631:41"><name pos:start="631:17" pos:end="631:28">arg_is_const</name><argument_list pos:start="631:29" pos:end="631:41">(<argument pos:start="631:30" pos:end="631:40"><expr pos:start="631:30" pos:end="631:40"><name pos:start="631:30" pos:end="631:40"><name pos:start="631:30" pos:end="631:31">op</name><operator pos:start="631:32" pos:end="631:33">-&gt;</operator><name pos:start="631:34" pos:end="631:37">args</name><index pos:start="631:38" pos:end="631:40">[<expr pos:start="631:39" pos:end="631:39"><literal type="number" pos:start="631:39" pos:end="631:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="631:44" pos:end="637:13">{<block_content pos:start="633:17" pos:end="635:68">

                <expr_stmt pos:start="633:17" pos:end="633:54"><expr pos:start="633:17" pos:end="633:53"><name pos:start="633:17" pos:end="633:19">tmp</name> <operator pos:start="633:21" pos:end="633:21">=</operator> <call pos:start="633:23" pos:end="633:43"><name pos:start="633:23" pos:end="633:30">arg_info</name><argument_list pos:start="633:31" pos:end="633:43">(<argument pos:start="633:32" pos:end="633:42"><expr pos:start="633:32" pos:end="633:42"><name pos:start="633:32" pos:end="633:42"><name pos:start="633:32" pos:end="633:33">op</name><operator pos:start="633:34" pos:end="633:35">-&gt;</operator><name pos:start="633:36" pos:end="633:39">args</name><index pos:start="633:40" pos:end="633:42">[<expr pos:start="633:41" pos:end="633:41"><literal type="number" pos:start="633:41" pos:end="633:41">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="633:44" pos:end="633:45">-&gt;</operator><name pos:start="633:46" pos:end="633:48">val</name> <operator pos:start="633:50" pos:end="633:50">&amp;</operator> <literal type="number" pos:start="633:52" pos:end="633:53">31</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="635:17" pos:end="635:68"><expr pos:start="635:17" pos:end="635:67"><name pos:start="635:17" pos:end="635:20">mask</name> <operator pos:start="635:22" pos:end="635:22">=</operator> <operator pos:start="635:24" pos:end="635:24">(</operator><name pos:start="635:25" pos:end="635:32">uint32_t</name><operator pos:start="635:33" pos:end="635:33">)</operator><call pos:start="635:34" pos:end="635:54"><name pos:start="635:34" pos:end="635:41">arg_info</name><argument_list pos:start="635:42" pos:end="635:54">(<argument pos:start="635:43" pos:end="635:53"><expr pos:start="635:43" pos:end="635:53"><name pos:start="635:43" pos:end="635:53"><name pos:start="635:43" pos:end="635:44">op</name><operator pos:start="635:45" pos:end="635:46">-&gt;</operator><name pos:start="635:47" pos:end="635:50">args</name><index pos:start="635:51" pos:end="635:53">[<expr pos:start="635:52" pos:end="635:52"><literal type="number" pos:start="635:52" pos:end="635:52">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="635:55" pos:end="635:56">-&gt;</operator><name pos:start="635:57" pos:end="635:60">mask</name> <operator pos:start="635:62" pos:end="635:63">&gt;&gt;</operator> <name pos:start="635:65" pos:end="635:67">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="639:13" pos:end="639:18">break;</break>

        <case pos:start="641:9" pos:end="641:30">case <expr pos:start="641:14" pos:end="641:29"><name pos:start="641:14" pos:end="641:29">INDEX_op_shr_i64</name></expr>:</case>

            <if_stmt pos:start="643:13" pos:end="649:13"><if pos:start="643:13" pos:end="649:13">if <condition pos:start="643:16" pos:end="643:42">(<expr pos:start="643:17" pos:end="643:41"><call pos:start="643:17" pos:end="643:41"><name pos:start="643:17" pos:end="643:28">arg_is_const</name><argument_list pos:start="643:29" pos:end="643:41">(<argument pos:start="643:30" pos:end="643:40"><expr pos:start="643:30" pos:end="643:40"><name pos:start="643:30" pos:end="643:40"><name pos:start="643:30" pos:end="643:31">op</name><operator pos:start="643:32" pos:end="643:33">-&gt;</operator><name pos:start="643:34" pos:end="643:37">args</name><index pos:start="643:38" pos:end="643:40">[<expr pos:start="643:39" pos:end="643:39"><literal type="number" pos:start="643:39" pos:end="643:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="643:44" pos:end="649:13">{<block_content pos:start="645:17" pos:end="647:68">

                <expr_stmt pos:start="645:17" pos:end="645:54"><expr pos:start="645:17" pos:end="645:53"><name pos:start="645:17" pos:end="645:19">tmp</name> <operator pos:start="645:21" pos:end="645:21">=</operator> <call pos:start="645:23" pos:end="645:43"><name pos:start="645:23" pos:end="645:30">arg_info</name><argument_list pos:start="645:31" pos:end="645:43">(<argument pos:start="645:32" pos:end="645:42"><expr pos:start="645:32" pos:end="645:42"><name pos:start="645:32" pos:end="645:42"><name pos:start="645:32" pos:end="645:33">op</name><operator pos:start="645:34" pos:end="645:35">-&gt;</operator><name pos:start="645:36" pos:end="645:39">args</name><index pos:start="645:40" pos:end="645:42">[<expr pos:start="645:41" pos:end="645:41"><literal type="number" pos:start="645:41" pos:end="645:41">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="645:44" pos:end="645:45">-&gt;</operator><name pos:start="645:46" pos:end="645:48">val</name> <operator pos:start="645:50" pos:end="645:50">&amp;</operator> <literal type="number" pos:start="645:52" pos:end="645:53">63</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="647:17" pos:end="647:68"><expr pos:start="647:17" pos:end="647:67"><name pos:start="647:17" pos:end="647:20">mask</name> <operator pos:start="647:22" pos:end="647:22">=</operator> <operator pos:start="647:24" pos:end="647:24">(</operator><name pos:start="647:25" pos:end="647:32">uint64_t</name><operator pos:start="647:33" pos:end="647:33">)</operator><call pos:start="647:34" pos:end="647:54"><name pos:start="647:34" pos:end="647:41">arg_info</name><argument_list pos:start="647:42" pos:end="647:54">(<argument pos:start="647:43" pos:end="647:53"><expr pos:start="647:43" pos:end="647:53"><name pos:start="647:43" pos:end="647:53"><name pos:start="647:43" pos:end="647:44">op</name><operator pos:start="647:45" pos:end="647:46">-&gt;</operator><name pos:start="647:47" pos:end="647:50">args</name><index pos:start="647:51" pos:end="647:53">[<expr pos:start="647:52" pos:end="647:52"><literal type="number" pos:start="647:52" pos:end="647:52">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="647:55" pos:end="647:56">-&gt;</operator><name pos:start="647:57" pos:end="647:60">mask</name> <operator pos:start="647:62" pos:end="647:63">&gt;&gt;</operator> <name pos:start="647:65" pos:end="647:67">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="651:13" pos:end="651:18">break;</break>



        <case pos:start="655:9" pos:end="655:36">case <expr pos:start="655:14" pos:end="655:35"><name pos:start="655:14" pos:end="655:35">INDEX_op_extrl_i64_i32</name></expr>:</case>

            <expr_stmt pos:start="657:13" pos:end="657:57"><expr pos:start="657:13" pos:end="657:56"><name pos:start="657:13" pos:end="657:16">mask</name> <operator pos:start="657:18" pos:end="657:18">=</operator> <operator pos:start="657:20" pos:end="657:20">(</operator><name pos:start="657:21" pos:end="657:28">uint32_t</name><operator pos:start="657:29" pos:end="657:29">)</operator><call pos:start="657:30" pos:end="657:50"><name pos:start="657:30" pos:end="657:37">arg_info</name><argument_list pos:start="657:38" pos:end="657:50">(<argument pos:start="657:39" pos:end="657:49"><expr pos:start="657:39" pos:end="657:49"><name pos:start="657:39" pos:end="657:49"><name pos:start="657:39" pos:end="657:40">op</name><operator pos:start="657:41" pos:end="657:42">-&gt;</operator><name pos:start="657:43" pos:end="657:46">args</name><index pos:start="657:47" pos:end="657:49">[<expr pos:start="657:48" pos:end="657:48"><literal type="number" pos:start="657:48" pos:end="657:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="657:51" pos:end="657:52">-&gt;</operator><name pos:start="657:53" pos:end="657:56">mask</name></expr>;</expr_stmt>

            <break pos:start="659:13" pos:end="659:18">break;</break>

        <case pos:start="661:9" pos:end="661:36">case <expr pos:start="661:14" pos:end="661:35"><name pos:start="661:14" pos:end="661:35">INDEX_op_extrh_i64_i32</name></expr>:</case>

            <expr_stmt pos:start="663:13" pos:end="663:63"><expr pos:start="663:13" pos:end="663:62"><name pos:start="663:13" pos:end="663:16">mask</name> <operator pos:start="663:18" pos:end="663:18">=</operator> <operator pos:start="663:20" pos:end="663:20">(</operator><name pos:start="663:21" pos:end="663:28">uint64_t</name><operator pos:start="663:29" pos:end="663:29">)</operator><call pos:start="663:30" pos:end="663:50"><name pos:start="663:30" pos:end="663:37">arg_info</name><argument_list pos:start="663:38" pos:end="663:50">(<argument pos:start="663:39" pos:end="663:49"><expr pos:start="663:39" pos:end="663:49"><name pos:start="663:39" pos:end="663:49"><name pos:start="663:39" pos:end="663:40">op</name><operator pos:start="663:41" pos:end="663:42">-&gt;</operator><name pos:start="663:43" pos:end="663:46">args</name><index pos:start="663:47" pos:end="663:49">[<expr pos:start="663:48" pos:end="663:48"><literal type="number" pos:start="663:48" pos:end="663:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="663:51" pos:end="663:52">-&gt;</operator><name pos:start="663:53" pos:end="663:56">mask</name> <operator pos:start="663:58" pos:end="663:59">&gt;&gt;</operator> <literal type="number" pos:start="663:61" pos:end="663:62">32</literal></expr>;</expr_stmt>

            <break pos:start="665:13" pos:end="665:18">break;</break>



        <expr_stmt pos:start="669:9" pos:end="669:27"><expr pos:start="669:9" pos:end="669:27"><call pos:start="669:9" pos:end="669:26"><name pos:start="669:9" pos:end="669:21">CASE_OP_32_64</name><argument_list pos:start="669:22" pos:end="669:26">(<argument pos:start="669:23" pos:end="669:25"><expr pos:start="669:23" pos:end="669:25"><name pos:start="669:23" pos:end="669:25">shl</name></expr></argument>)</argument_list></call><operator pos:start="669:27" pos:end="669:27">:</operator></expr></expr_stmt>

            <if_stmt pos:start="671:13" pos:end="677:13"><if pos:start="671:13" pos:end="677:13">if <condition pos:start="671:16" pos:end="671:42">(<expr pos:start="671:17" pos:end="671:41"><call pos:start="671:17" pos:end="671:41"><name pos:start="671:17" pos:end="671:28">arg_is_const</name><argument_list pos:start="671:29" pos:end="671:41">(<argument pos:start="671:30" pos:end="671:40"><expr pos:start="671:30" pos:end="671:40"><name pos:start="671:30" pos:end="671:40"><name pos:start="671:30" pos:end="671:31">op</name><operator pos:start="671:32" pos:end="671:33">-&gt;</operator><name pos:start="671:34" pos:end="671:37">args</name><index pos:start="671:38" pos:end="671:40">[<expr pos:start="671:39" pos:end="671:39"><literal type="number" pos:start="671:39" pos:end="671:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="671:44" pos:end="677:13">{<block_content pos:start="673:17" pos:end="675:58">

                <expr_stmt pos:start="673:17" pos:end="673:77"><expr pos:start="673:17" pos:end="673:76"><name pos:start="673:17" pos:end="673:19">tmp</name> <operator pos:start="673:21" pos:end="673:21">=</operator> <call pos:start="673:23" pos:end="673:43"><name pos:start="673:23" pos:end="673:30">arg_info</name><argument_list pos:start="673:31" pos:end="673:43">(<argument pos:start="673:32" pos:end="673:42"><expr pos:start="673:32" pos:end="673:42"><name pos:start="673:32" pos:end="673:42"><name pos:start="673:32" pos:end="673:33">op</name><operator pos:start="673:34" pos:end="673:35">-&gt;</operator><name pos:start="673:36" pos:end="673:39">args</name><index pos:start="673:40" pos:end="673:42">[<expr pos:start="673:41" pos:end="673:41"><literal type="number" pos:start="673:41" pos:end="673:41">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="673:44" pos:end="673:45">-&gt;</operator><name pos:start="673:46" pos:end="673:48">val</name> <operator pos:start="673:50" pos:end="673:50">&amp;</operator> <operator pos:start="673:52" pos:end="673:52">(</operator><name pos:start="673:53" pos:end="673:71">TCG_TARGET_REG_BITS</name> <operator pos:start="673:73" pos:end="673:73">-</operator> <literal type="number" pos:start="673:75" pos:end="673:75">1</literal><operator pos:start="673:76" pos:end="673:76">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="675:17" pos:end="675:58"><expr pos:start="675:17" pos:end="675:57"><name pos:start="675:17" pos:end="675:20">mask</name> <operator pos:start="675:22" pos:end="675:22">=</operator> <call pos:start="675:24" pos:end="675:44"><name pos:start="675:24" pos:end="675:31">arg_info</name><argument_list pos:start="675:32" pos:end="675:44">(<argument pos:start="675:33" pos:end="675:43"><expr pos:start="675:33" pos:end="675:43"><name pos:start="675:33" pos:end="675:43"><name pos:start="675:33" pos:end="675:34">op</name><operator pos:start="675:35" pos:end="675:36">-&gt;</operator><name pos:start="675:37" pos:end="675:40">args</name><index pos:start="675:41" pos:end="675:43">[<expr pos:start="675:42" pos:end="675:42"><literal type="number" pos:start="675:42" pos:end="675:42">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="675:45" pos:end="675:46">-&gt;</operator><name pos:start="675:47" pos:end="675:50">mask</name> <operator pos:start="675:52" pos:end="675:53">&lt;&lt;</operator> <name pos:start="675:55" pos:end="675:57">tmp</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="679:13" pos:end="679:18">break;</break>



        <expr_stmt pos:start="683:9" pos:end="689:53"><expr pos:start="683:9" pos:end="689:52"><call pos:start="683:9" pos:end="683:26"><name pos:start="683:9" pos:end="683:21">CASE_OP_32_64</name><argument_list pos:start="683:22" pos:end="683:26">(<argument pos:start="683:23" pos:end="683:25"><expr pos:start="683:23" pos:end="683:25"><name pos:start="683:23" pos:end="683:25">neg</name></expr></argument>)</argument_list></call><operator pos:start="683:27" pos:end="683:27">:</operator>

            <comment type="block" pos:start="685:13" pos:end="685:66">/* Set to 1 all bits to the left of the rightmost.  */</comment>

            <name pos:start="687:13" pos:end="687:16">mask</name> <operator pos:start="687:18" pos:end="687:18">=</operator> <operator pos:start="687:20" pos:end="687:20">-</operator><operator pos:start="687:21" pos:end="687:21">(</operator><call pos:start="687:22" pos:end="687:42"><name pos:start="687:22" pos:end="687:29">arg_info</name><argument_list pos:start="687:30" pos:end="687:42">(<argument pos:start="687:31" pos:end="687:41"><expr pos:start="687:31" pos:end="687:41"><name pos:start="687:31" pos:end="687:41"><name pos:start="687:31" pos:end="687:32">op</name><operator pos:start="687:33" pos:end="687:34">-&gt;</operator><name pos:start="687:35" pos:end="687:38">args</name><index pos:start="687:39" pos:end="687:41">[<expr pos:start="687:40" pos:end="687:40"><literal type="number" pos:start="687:40" pos:end="687:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="687:43" pos:end="687:44">-&gt;</operator><name pos:start="687:45" pos:end="687:48">mask</name>

                     <operator pos:start="689:22" pos:end="689:22">&amp;</operator> <operator pos:start="689:24" pos:end="689:24">-</operator><call pos:start="689:25" pos:end="689:45"><name pos:start="689:25" pos:end="689:32">arg_info</name><argument_list pos:start="689:33" pos:end="689:45">(<argument pos:start="689:34" pos:end="689:44"><expr pos:start="689:34" pos:end="689:44"><name pos:start="689:34" pos:end="689:44"><name pos:start="689:34" pos:end="689:35">op</name><operator pos:start="689:36" pos:end="689:37">-&gt;</operator><name pos:start="689:38" pos:end="689:41">args</name><index pos:start="689:42" pos:end="689:44">[<expr pos:start="689:43" pos:end="689:43"><literal type="number" pos:start="689:43" pos:end="689:43">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="689:46" pos:end="689:47">-&gt;</operator><name pos:start="689:48" pos:end="689:51">mask</name><operator pos:start="689:52" pos:end="689:52">)</operator></expr>;</expr_stmt>

            <break pos:start="691:13" pos:end="691:18">break;</break>



        <expr_stmt pos:start="695:9" pos:end="701:58"><expr pos:start="695:9" pos:end="701:57"><call pos:start="695:9" pos:end="695:30"><name pos:start="695:9" pos:end="695:21">CASE_OP_32_64</name><argument_list pos:start="695:22" pos:end="695:30">(<argument pos:start="695:23" pos:end="695:29"><expr pos:start="695:23" pos:end="695:29"><name pos:start="695:23" pos:end="695:29">deposit</name></expr></argument>)</argument_list></call><operator pos:start="695:31" pos:end="695:31">:</operator>

            <name pos:start="697:13" pos:end="697:16">mask</name> <operator pos:start="697:18" pos:end="697:18">=</operator> <call pos:start="697:20" pos:end="701:57"><name pos:start="697:20" pos:end="697:28">deposit64</name><argument_list pos:start="697:29" pos:end="701:57">(<argument pos:start="697:30" pos:end="697:56"><expr pos:start="697:30" pos:end="697:56"><call pos:start="697:30" pos:end="697:50"><name pos:start="697:30" pos:end="697:37">arg_info</name><argument_list pos:start="697:38" pos:end="697:50">(<argument pos:start="697:39" pos:end="697:49"><expr pos:start="697:39" pos:end="697:49"><name pos:start="697:39" pos:end="697:49"><name pos:start="697:39" pos:end="697:40">op</name><operator pos:start="697:41" pos:end="697:42">-&gt;</operator><name pos:start="697:43" pos:end="697:46">args</name><index pos:start="697:47" pos:end="697:49">[<expr pos:start="697:48" pos:end="697:48"><literal type="number" pos:start="697:48" pos:end="697:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="697:51" pos:end="697:52">-&gt;</operator><name pos:start="697:53" pos:end="697:56">mask</name></expr></argument>,

                             <argument pos:start="699:30" pos:end="699:40"><expr pos:start="699:30" pos:end="699:40"><name pos:start="699:30" pos:end="699:40"><name pos:start="699:30" pos:end="699:31">op</name><operator pos:start="699:32" pos:end="699:33">-&gt;</operator><name pos:start="699:34" pos:end="699:37">args</name><index pos:start="699:38" pos:end="699:40">[<expr pos:start="699:39" pos:end="699:39"><literal type="number" pos:start="699:39" pos:end="699:39">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="699:43" pos:end="699:53"><expr pos:start="699:43" pos:end="699:53"><name pos:start="699:43" pos:end="699:53"><name pos:start="699:43" pos:end="699:44">op</name><operator pos:start="699:45" pos:end="699:46">-&gt;</operator><name pos:start="699:47" pos:end="699:50">args</name><index pos:start="699:51" pos:end="699:53">[<expr pos:start="699:52" pos:end="699:52"><literal type="number" pos:start="699:52" pos:end="699:52">4</literal></expr>]</index></name></expr></argument>,

                             <argument pos:start="701:30" pos:end="701:56"><expr pos:start="701:30" pos:end="701:56"><call pos:start="701:30" pos:end="701:50"><name pos:start="701:30" pos:end="701:37">arg_info</name><argument_list pos:start="701:38" pos:end="701:50">(<argument pos:start="701:39" pos:end="701:49"><expr pos:start="701:39" pos:end="701:49"><name pos:start="701:39" pos:end="701:49"><name pos:start="701:39" pos:end="701:40">op</name><operator pos:start="701:41" pos:end="701:42">-&gt;</operator><name pos:start="701:43" pos:end="701:46">args</name><index pos:start="701:47" pos:end="701:49">[<expr pos:start="701:48" pos:end="701:48"><literal type="number" pos:start="701:48" pos:end="701:48">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="701:51" pos:end="701:52">-&gt;</operator><name pos:start="701:53" pos:end="701:56">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="703:13" pos:end="703:18">break;</break>



        <expr_stmt pos:start="707:9" pos:end="711:55"><expr pos:start="707:9" pos:end="711:54"><call pos:start="707:9" pos:end="707:30"><name pos:start="707:9" pos:end="707:21">CASE_OP_32_64</name><argument_list pos:start="707:22" pos:end="707:30">(<argument pos:start="707:23" pos:end="707:29"><expr pos:start="707:23" pos:end="707:29"><name pos:start="707:23" pos:end="707:29">extract</name></expr></argument>)</argument_list></call><operator pos:start="707:31" pos:end="707:31">:</operator>

            <name pos:start="709:13" pos:end="709:16">mask</name> <operator pos:start="709:18" pos:end="709:18">=</operator> <call pos:start="709:20" pos:end="711:54"><name pos:start="709:20" pos:end="709:28">extract64</name><argument_list pos:start="709:29" pos:end="711:54">(<argument pos:start="709:30" pos:end="709:56"><expr pos:start="709:30" pos:end="709:56"><call pos:start="709:30" pos:end="709:50"><name pos:start="709:30" pos:end="709:37">arg_info</name><argument_list pos:start="709:38" pos:end="709:50">(<argument pos:start="709:39" pos:end="709:49"><expr pos:start="709:39" pos:end="709:49"><name pos:start="709:39" pos:end="709:49"><name pos:start="709:39" pos:end="709:40">op</name><operator pos:start="709:41" pos:end="709:42">-&gt;</operator><name pos:start="709:43" pos:end="709:46">args</name><index pos:start="709:47" pos:end="709:49">[<expr pos:start="709:48" pos:end="709:48"><literal type="number" pos:start="709:48" pos:end="709:48">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="709:51" pos:end="709:52">-&gt;</operator><name pos:start="709:53" pos:end="709:56">mask</name></expr></argument>,

                             <argument pos:start="711:30" pos:end="711:40"><expr pos:start="711:30" pos:end="711:40"><name pos:start="711:30" pos:end="711:40"><name pos:start="711:30" pos:end="711:31">op</name><operator pos:start="711:32" pos:end="711:33">-&gt;</operator><name pos:start="711:34" pos:end="711:37">args</name><index pos:start="711:38" pos:end="711:40">[<expr pos:start="711:39" pos:end="711:39"><literal type="number" pos:start="711:39" pos:end="711:39">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="711:43" pos:end="711:53"><expr pos:start="711:43" pos:end="711:53"><name pos:start="711:43" pos:end="711:53"><name pos:start="711:43" pos:end="711:44">op</name><operator pos:start="711:45" pos:end="711:46">-&gt;</operator><name pos:start="711:47" pos:end="711:50">args</name><index pos:start="711:51" pos:end="711:53">[<expr pos:start="711:52" pos:end="711:52"><literal type="number" pos:start="711:52" pos:end="711:52">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="713:13" pos:end="717:13"><if pos:start="713:13" pos:end="717:13">if <condition pos:start="713:16" pos:end="713:33">(<expr pos:start="713:17" pos:end="713:32"><name pos:start="713:17" pos:end="713:27"><name pos:start="713:17" pos:end="713:18">op</name><operator pos:start="713:19" pos:end="713:20">-&gt;</operator><name pos:start="713:21" pos:end="713:24">args</name><index pos:start="713:25" pos:end="713:27">[<expr pos:start="713:26" pos:end="713:26"><literal type="number" pos:start="713:26" pos:end="713:26">2</literal></expr>]</index></name> <operator pos:start="713:29" pos:end="713:30">==</operator> <literal type="number" pos:start="713:32" pos:end="713:32">0</literal></expr>)</condition> <block pos:start="713:35" pos:end="717:13">{<block_content pos:start="715:17" pos:end="715:63">

                <expr_stmt pos:start="715:17" pos:end="715:63"><expr pos:start="715:17" pos:end="715:62"><name pos:start="715:17" pos:end="715:24">affected</name> <operator pos:start="715:26" pos:end="715:26">=</operator> <call pos:start="715:28" pos:end="715:48"><name pos:start="715:28" pos:end="715:35">arg_info</name><argument_list pos:start="715:36" pos:end="715:48">(<argument pos:start="715:37" pos:end="715:47"><expr pos:start="715:37" pos:end="715:47"><name pos:start="715:37" pos:end="715:47"><name pos:start="715:37" pos:end="715:38">op</name><operator pos:start="715:39" pos:end="715:40">-&gt;</operator><name pos:start="715:41" pos:end="715:44">args</name><index pos:start="715:45" pos:end="715:47">[<expr pos:start="715:46" pos:end="715:46"><literal type="number" pos:start="715:46" pos:end="715:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="715:49" pos:end="715:50">-&gt;</operator><name pos:start="715:51" pos:end="715:54">mask</name> <operator pos:start="715:56" pos:end="715:56">&amp;</operator> <operator pos:start="715:58" pos:end="715:58">~</operator><name pos:start="715:59" pos:end="715:62">mask</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="719:13" pos:end="719:18">break;</break>

        <expr_stmt pos:start="721:9" pos:end="725:56"><expr pos:start="721:9" pos:end="725:55"><call pos:start="721:9" pos:end="721:31"><name pos:start="721:9" pos:end="721:21">CASE_OP_32_64</name><argument_list pos:start="721:22" pos:end="721:31">(<argument pos:start="721:23" pos:end="721:30"><expr pos:start="721:23" pos:end="721:30"><name pos:start="721:23" pos:end="721:30">sextract</name></expr></argument>)</argument_list></call><operator pos:start="721:32" pos:end="721:32">:</operator>

            <name pos:start="723:13" pos:end="723:16">mask</name> <operator pos:start="723:18" pos:end="723:18">=</operator> <call pos:start="723:20" pos:end="725:55"><name pos:start="723:20" pos:end="723:29">sextract64</name><argument_list pos:start="723:30" pos:end="725:55">(<argument pos:start="723:31" pos:end="723:57"><expr pos:start="723:31" pos:end="723:57"><call pos:start="723:31" pos:end="723:51"><name pos:start="723:31" pos:end="723:38">arg_info</name><argument_list pos:start="723:39" pos:end="723:51">(<argument pos:start="723:40" pos:end="723:50"><expr pos:start="723:40" pos:end="723:50"><name pos:start="723:40" pos:end="723:50"><name pos:start="723:40" pos:end="723:41">op</name><operator pos:start="723:42" pos:end="723:43">-&gt;</operator><name pos:start="723:44" pos:end="723:47">args</name><index pos:start="723:48" pos:end="723:50">[<expr pos:start="723:49" pos:end="723:49"><literal type="number" pos:start="723:49" pos:end="723:49">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="723:52" pos:end="723:53">-&gt;</operator><name pos:start="723:54" pos:end="723:57">mask</name></expr></argument>,

                              <argument pos:start="725:31" pos:end="725:41"><expr pos:start="725:31" pos:end="725:41"><name pos:start="725:31" pos:end="725:41"><name pos:start="725:31" pos:end="725:32">op</name><operator pos:start="725:33" pos:end="725:34">-&gt;</operator><name pos:start="725:35" pos:end="725:38">args</name><index pos:start="725:39" pos:end="725:41">[<expr pos:start="725:40" pos:end="725:40"><literal type="number" pos:start="725:40" pos:end="725:40">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="725:44" pos:end="725:54"><expr pos:start="725:44" pos:end="725:54"><name pos:start="725:44" pos:end="725:54"><name pos:start="725:44" pos:end="725:45">op</name><operator pos:start="725:46" pos:end="725:47">-&gt;</operator><name pos:start="725:48" pos:end="725:51">args</name><index pos:start="725:52" pos:end="725:54">[<expr pos:start="725:53" pos:end="725:53"><literal type="number" pos:start="725:53" pos:end="725:53">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="727:13" pos:end="731:13"><if pos:start="727:13" pos:end="731:13">if <condition pos:start="727:16" pos:end="727:63">(<expr pos:start="727:17" pos:end="727:62"><name pos:start="727:17" pos:end="727:27"><name pos:start="727:17" pos:end="727:18">op</name><operator pos:start="727:19" pos:end="727:20">-&gt;</operator><name pos:start="727:21" pos:end="727:24">args</name><index pos:start="727:25" pos:end="727:27">[<expr pos:start="727:26" pos:end="727:26"><literal type="number" pos:start="727:26" pos:end="727:26">2</literal></expr>]</index></name> <operator pos:start="727:29" pos:end="727:30">==</operator> <literal type="number" pos:start="727:32" pos:end="727:32">0</literal> <operator pos:start="727:34" pos:end="727:35">&amp;&amp;</operator> <operator pos:start="727:37" pos:end="727:37">(</operator><name pos:start="727:38" pos:end="727:52">tcg_target_long</name><operator pos:start="727:53" pos:end="727:53">)</operator><name pos:start="727:54" pos:end="727:57">mask</name> <operator pos:start="727:59" pos:end="727:60">&gt;=</operator> <literal type="number" pos:start="727:62" pos:end="727:62">0</literal></expr>)</condition> <block pos:start="727:65" pos:end="731:13">{<block_content pos:start="729:17" pos:end="729:63">

                <expr_stmt pos:start="729:17" pos:end="729:63"><expr pos:start="729:17" pos:end="729:62"><name pos:start="729:17" pos:end="729:24">affected</name> <operator pos:start="729:26" pos:end="729:26">=</operator> <call pos:start="729:28" pos:end="729:48"><name pos:start="729:28" pos:end="729:35">arg_info</name><argument_list pos:start="729:36" pos:end="729:48">(<argument pos:start="729:37" pos:end="729:47"><expr pos:start="729:37" pos:end="729:47"><name pos:start="729:37" pos:end="729:47"><name pos:start="729:37" pos:end="729:38">op</name><operator pos:start="729:39" pos:end="729:40">-&gt;</operator><name pos:start="729:41" pos:end="729:44">args</name><index pos:start="729:45" pos:end="729:47">[<expr pos:start="729:46" pos:end="729:46"><literal type="number" pos:start="729:46" pos:end="729:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="729:49" pos:end="729:50">-&gt;</operator><name pos:start="729:51" pos:end="729:54">mask</name> <operator pos:start="729:56" pos:end="729:56">&amp;</operator> <operator pos:start="729:58" pos:end="729:58">~</operator><name pos:start="729:59" pos:end="729:62">mask</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="733:13" pos:end="733:18">break;</break>



        <expr_stmt pos:start="737:9" pos:end="741:77"><expr pos:start="737:9" pos:end="741:76"><call pos:start="737:9" pos:end="737:25"><name pos:start="737:9" pos:end="737:21">CASE_OP_32_64</name><argument_list pos:start="737:22" pos:end="737:25">(<argument pos:start="737:23" pos:end="737:24"><expr pos:start="737:23" pos:end="737:24"><name pos:start="737:23" pos:end="737:24">or</name></expr></argument>)</argument_list></call><operator pos:start="737:26" pos:end="737:26">:</operator>

        <call pos:start="739:9" pos:end="739:26"><name pos:start="739:9" pos:end="739:21">CASE_OP_32_64</name><argument_list pos:start="739:22" pos:end="739:26">(<argument pos:start="739:23" pos:end="739:25"><expr pos:start="739:23" pos:end="739:25"><name pos:start="739:23" pos:end="739:25">xor</name></expr></argument>)</argument_list></call><operator pos:start="739:27" pos:end="739:27">:</operator>

            <name pos:start="741:13" pos:end="741:16">mask</name> <operator pos:start="741:18" pos:end="741:18">=</operator> <call pos:start="741:20" pos:end="741:40"><name pos:start="741:20" pos:end="741:27">arg_info</name><argument_list pos:start="741:28" pos:end="741:40">(<argument pos:start="741:29" pos:end="741:39"><expr pos:start="741:29" pos:end="741:39"><name pos:start="741:29" pos:end="741:39"><name pos:start="741:29" pos:end="741:30">op</name><operator pos:start="741:31" pos:end="741:32">-&gt;</operator><name pos:start="741:33" pos:end="741:36">args</name><index pos:start="741:37" pos:end="741:39">[<expr pos:start="741:38" pos:end="741:38"><literal type="number" pos:start="741:38" pos:end="741:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="741:41" pos:end="741:42">-&gt;</operator><name pos:start="741:43" pos:end="741:46">mask</name> <operator pos:start="741:48" pos:end="741:48">|</operator> <call pos:start="741:50" pos:end="741:70"><name pos:start="741:50" pos:end="741:57">arg_info</name><argument_list pos:start="741:58" pos:end="741:70">(<argument pos:start="741:59" pos:end="741:69"><expr pos:start="741:59" pos:end="741:69"><name pos:start="741:59" pos:end="741:69"><name pos:start="741:59" pos:end="741:60">op</name><operator pos:start="741:61" pos:end="741:62">-&gt;</operator><name pos:start="741:63" pos:end="741:66">args</name><index pos:start="741:67" pos:end="741:69">[<expr pos:start="741:68" pos:end="741:68"><literal type="number" pos:start="741:68" pos:end="741:68">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="741:71" pos:end="741:72">-&gt;</operator><name pos:start="741:73" pos:end="741:76">mask</name></expr>;</expr_stmt>

            <break pos:start="743:13" pos:end="743:18">break;</break>



        <case pos:start="747:9" pos:end="747:30">case <expr pos:start="747:14" pos:end="747:29"><name pos:start="747:14" pos:end="747:29">INDEX_op_clz_i32</name></expr>:</case>

        <case pos:start="749:9" pos:end="749:30">case <expr pos:start="749:14" pos:end="749:29"><name pos:start="749:14" pos:end="749:29">INDEX_op_ctz_i32</name></expr>:</case>

            <expr_stmt pos:start="751:13" pos:end="751:52"><expr pos:start="751:13" pos:end="751:51"><name pos:start="751:13" pos:end="751:16">mask</name> <operator pos:start="751:18" pos:end="751:18">=</operator> <call pos:start="751:20" pos:end="751:40"><name pos:start="751:20" pos:end="751:27">arg_info</name><argument_list pos:start="751:28" pos:end="751:40">(<argument pos:start="751:29" pos:end="751:39"><expr pos:start="751:29" pos:end="751:39"><name pos:start="751:29" pos:end="751:39"><name pos:start="751:29" pos:end="751:30">op</name><operator pos:start="751:31" pos:end="751:32">-&gt;</operator><name pos:start="751:33" pos:end="751:36">args</name><index pos:start="751:37" pos:end="751:39">[<expr pos:start="751:38" pos:end="751:38"><literal type="number" pos:start="751:38" pos:end="751:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="751:41" pos:end="751:42">-&gt;</operator><name pos:start="751:43" pos:end="751:46">mask</name> <operator pos:start="751:48" pos:end="751:48">|</operator> <literal type="number" pos:start="751:50" pos:end="751:51">31</literal></expr>;</expr_stmt>

            <break pos:start="753:13" pos:end="753:18">break;</break>



        <case pos:start="757:9" pos:end="757:30">case <expr pos:start="757:14" pos:end="757:29"><name pos:start="757:14" pos:end="757:29">INDEX_op_clz_i64</name></expr>:</case>

        <case pos:start="759:9" pos:end="759:30">case <expr pos:start="759:14" pos:end="759:29"><name pos:start="759:14" pos:end="759:29">INDEX_op_ctz_i64</name></expr>:</case>

            <expr_stmt pos:start="761:13" pos:end="761:52"><expr pos:start="761:13" pos:end="761:51"><name pos:start="761:13" pos:end="761:16">mask</name> <operator pos:start="761:18" pos:end="761:18">=</operator> <call pos:start="761:20" pos:end="761:40"><name pos:start="761:20" pos:end="761:27">arg_info</name><argument_list pos:start="761:28" pos:end="761:40">(<argument pos:start="761:29" pos:end="761:39"><expr pos:start="761:29" pos:end="761:39"><name pos:start="761:29" pos:end="761:39"><name pos:start="761:29" pos:end="761:30">op</name><operator pos:start="761:31" pos:end="761:32">-&gt;</operator><name pos:start="761:33" pos:end="761:36">args</name><index pos:start="761:37" pos:end="761:39">[<expr pos:start="761:38" pos:end="761:38"><literal type="number" pos:start="761:38" pos:end="761:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="761:41" pos:end="761:42">-&gt;</operator><name pos:start="761:43" pos:end="761:46">mask</name> <operator pos:start="761:48" pos:end="761:48">|</operator> <literal type="number" pos:start="761:50" pos:end="761:51">63</literal></expr>;</expr_stmt>

            <break pos:start="763:13" pos:end="763:18">break;</break>



        <case pos:start="767:9" pos:end="767:32">case <expr pos:start="767:14" pos:end="767:31"><name pos:start="767:14" pos:end="767:31">INDEX_op_ctpop_i32</name></expr>:</case>

            <expr_stmt pos:start="769:13" pos:end="769:27"><expr pos:start="769:13" pos:end="769:26"><name pos:start="769:13" pos:end="769:16">mask</name> <operator pos:start="769:18" pos:end="769:18">=</operator> <literal type="number" pos:start="769:20" pos:end="769:21">32</literal> <operator pos:start="769:23" pos:end="769:23">|</operator> <literal type="number" pos:start="769:25" pos:end="769:26">31</literal></expr>;</expr_stmt>

            <break pos:start="771:13" pos:end="771:18">break;</break>

        <case pos:start="773:9" pos:end="773:32">case <expr pos:start="773:14" pos:end="773:31"><name pos:start="773:14" pos:end="773:31">INDEX_op_ctpop_i64</name></expr>:</case>

            <expr_stmt pos:start="775:13" pos:end="775:27"><expr pos:start="775:13" pos:end="775:26"><name pos:start="775:13" pos:end="775:16">mask</name> <operator pos:start="775:18" pos:end="775:18">=</operator> <literal type="number" pos:start="775:20" pos:end="775:21">64</literal> <operator pos:start="775:23" pos:end="775:23">|</operator> <literal type="number" pos:start="775:25" pos:end="775:26">63</literal></expr>;</expr_stmt>

            <break pos:start="777:13" pos:end="777:18">break;</break>



        <expr_stmt pos:start="781:9" pos:end="781:31"><expr pos:start="781:9" pos:end="781:31"><call pos:start="781:9" pos:end="781:30"><name pos:start="781:9" pos:end="781:21">CASE_OP_32_64</name><argument_list pos:start="781:22" pos:end="781:30">(<argument pos:start="781:23" pos:end="781:29"><expr pos:start="781:23" pos:end="781:29"><name pos:start="781:23" pos:end="781:29">setcond</name></expr></argument>)</argument_list></call><operator pos:start="781:31" pos:end="781:31">:</operator></expr></expr_stmt>

        <case pos:start="783:9" pos:end="783:35">case <expr pos:start="783:14" pos:end="783:34"><name pos:start="783:14" pos:end="783:34">INDEX_op_setcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="785:13" pos:end="785:21"><expr pos:start="785:13" pos:end="785:20"><name pos:start="785:13" pos:end="785:16">mask</name> <operator pos:start="785:18" pos:end="785:18">=</operator> <literal type="number" pos:start="785:20" pos:end="785:20">1</literal></expr>;</expr_stmt>

            <break pos:start="787:13" pos:end="787:18">break;</break>



        <expr_stmt pos:start="791:9" pos:end="793:77"><expr pos:start="791:9" pos:end="793:76"><call pos:start="791:9" pos:end="791:30"><name pos:start="791:9" pos:end="791:21">CASE_OP_32_64</name><argument_list pos:start="791:22" pos:end="791:30">(<argument pos:start="791:23" pos:end="791:29"><expr pos:start="791:23" pos:end="791:29"><name pos:start="791:23" pos:end="791:29">movcond</name></expr></argument>)</argument_list></call><operator pos:start="791:31" pos:end="791:31">:</operator>

            <name pos:start="793:13" pos:end="793:16">mask</name> <operator pos:start="793:18" pos:end="793:18">=</operator> <call pos:start="793:20" pos:end="793:40"><name pos:start="793:20" pos:end="793:27">arg_info</name><argument_list pos:start="793:28" pos:end="793:40">(<argument pos:start="793:29" pos:end="793:39"><expr pos:start="793:29" pos:end="793:39"><name pos:start="793:29" pos:end="793:39"><name pos:start="793:29" pos:end="793:30">op</name><operator pos:start="793:31" pos:end="793:32">-&gt;</operator><name pos:start="793:33" pos:end="793:36">args</name><index pos:start="793:37" pos:end="793:39">[<expr pos:start="793:38" pos:end="793:38"><literal type="number" pos:start="793:38" pos:end="793:38">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="793:41" pos:end="793:42">-&gt;</operator><name pos:start="793:43" pos:end="793:46">mask</name> <operator pos:start="793:48" pos:end="793:48">|</operator> <call pos:start="793:50" pos:end="793:70"><name pos:start="793:50" pos:end="793:57">arg_info</name><argument_list pos:start="793:58" pos:end="793:70">(<argument pos:start="793:59" pos:end="793:69"><expr pos:start="793:59" pos:end="793:69"><name pos:start="793:59" pos:end="793:69"><name pos:start="793:59" pos:end="793:60">op</name><operator pos:start="793:61" pos:end="793:62">-&gt;</operator><name pos:start="793:63" pos:end="793:66">args</name><index pos:start="793:67" pos:end="793:69">[<expr pos:start="793:68" pos:end="793:68"><literal type="number" pos:start="793:68" pos:end="793:68">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="793:71" pos:end="793:72">-&gt;</operator><name pos:start="793:73" pos:end="793:76">mask</name></expr>;</expr_stmt>

            <break pos:start="795:13" pos:end="795:18">break;</break>



        <expr_stmt pos:start="799:9" pos:end="801:24"><expr pos:start="799:9" pos:end="801:23"><call pos:start="799:9" pos:end="799:27"><name pos:start="799:9" pos:end="799:21">CASE_OP_32_64</name><argument_list pos:start="799:22" pos:end="799:27">(<argument pos:start="799:23" pos:end="799:26"><expr pos:start="799:23" pos:end="799:26"><name pos:start="799:23" pos:end="799:26">ld8u</name></expr></argument>)</argument_list></call><operator pos:start="799:28" pos:end="799:28">:</operator>

            <name pos:start="801:13" pos:end="801:16">mask</name> <operator pos:start="801:18" pos:end="801:18">=</operator> <literal type="number" pos:start="801:20" pos:end="801:23">0xff</literal></expr>;</expr_stmt>

            <break pos:start="803:13" pos:end="803:18">break;</break>

        <expr_stmt pos:start="805:9" pos:end="807:26"><expr pos:start="805:9" pos:end="807:25"><call pos:start="805:9" pos:end="805:28"><name pos:start="805:9" pos:end="805:21">CASE_OP_32_64</name><argument_list pos:start="805:22" pos:end="805:28">(<argument pos:start="805:23" pos:end="805:27"><expr pos:start="805:23" pos:end="805:27"><name pos:start="805:23" pos:end="805:27">ld16u</name></expr></argument>)</argument_list></call><operator pos:start="805:29" pos:end="805:29">:</operator>

            <name pos:start="807:13" pos:end="807:16">mask</name> <operator pos:start="807:18" pos:end="807:18">=</operator> <literal type="number" pos:start="807:20" pos:end="807:25">0xffff</literal></expr>;</expr_stmt>

            <break pos:start="809:13" pos:end="809:18">break;</break>

        <case pos:start="811:9" pos:end="811:32">case <expr pos:start="811:14" pos:end="811:31"><name pos:start="811:14" pos:end="811:31">INDEX_op_ld32u_i64</name></expr>:</case>

            <expr_stmt pos:start="813:13" pos:end="813:31"><expr pos:start="813:13" pos:end="813:30"><name pos:start="813:13" pos:end="813:16">mask</name> <operator pos:start="813:18" pos:end="813:18">=</operator> <literal type="number" pos:start="813:20" pos:end="813:30">0xffffffffu</literal></expr>;</expr_stmt>

            <break pos:start="815:13" pos:end="815:18">break;</break>



        <expr_stmt pos:start="819:9" pos:end="831:17"><expr pos:start="819:9" pos:end="831:17"><call pos:start="819:9" pos:end="819:30"><name pos:start="819:9" pos:end="819:21">CASE_OP_32_64</name><argument_list pos:start="819:22" pos:end="819:30">(<argument pos:start="819:23" pos:end="819:29"><expr pos:start="819:23" pos:end="819:29"><name pos:start="819:23" pos:end="819:29">qemu_ld</name></expr></argument>)</argument_list></call><operator pos:start="819:31" pos:end="819:31">:</operator>

            <block pos:start="821:13" pos:end="831:17">{

                <expr pos:start="823:17" pos:end="823:62"><name pos:start="823:17" pos:end="823:27">TCGMemOpIdx</name> <name pos:start="823:29" pos:end="823:30">oi</name> <operator pos:start="823:32" pos:end="823:32">=</operator> <name pos:start="823:34" pos:end="823:62"><name pos:start="823:34" pos:end="823:35">op</name><operator pos:start="823:36" pos:end="823:37">-&gt;</operator><name pos:start="823:38" pos:end="823:41">args</name><index pos:start="823:42" pos:end="823:62">[<expr pos:start="823:43" pos:end="823:61"><name pos:start="823:43" pos:end="823:50">nb_oargs</name> <operator pos:start="823:52" pos:end="823:52">+</operator> <name pos:start="823:54" pos:end="823:61">nb_iargs</name></expr>]</index></name></expr>;

                <expr pos:start="825:17" pos:end="825:44"><name pos:start="825:17" pos:end="825:24">TCGMemOp</name> <name pos:start="825:26" pos:end="825:28">mop</name> <operator pos:start="825:30" pos:end="825:30">=</operator> <call pos:start="825:32" pos:end="825:44"><name pos:start="825:32" pos:end="825:40">get_memop</name><argument_list pos:start="825:41" pos:end="825:44">(<argument pos:start="825:42" pos:end="825:43"><expr pos:start="825:42" pos:end="825:43"><name pos:start="825:42" pos:end="825:43">oi</name></expr></argument>)</argument_list></call></expr>;

                <if_stmt pos:start="827:17" pos:end="829:70"><if pos:start="827:17" pos:end="829:70">if <condition pos:start="827:20" pos:end="827:37">(<expr pos:start="827:21" pos:end="827:36"><operator pos:start="827:21" pos:end="827:21">!</operator><operator pos:start="827:22" pos:end="827:22">(</operator><name pos:start="827:23" pos:end="827:25">mop</name> <operator pos:start="827:27" pos:end="827:27">&amp;</operator> <name pos:start="827:29" pos:end="827:35">MO_SIGN</name><operator pos:start="827:36" pos:end="827:36">)</operator></expr>)</condition> <block pos:start="827:39" pos:end="829:70">{<block_content pos:start="829:21" pos:end="829:70">

                    <expr_stmt pos:start="829:21" pos:end="829:70"><expr pos:start="829:21" pos:end="829:69"><name pos:start="829:21" pos:end="829:24">mask</name> <operator pos:start="829:26" pos:end="829:26">=</operator> <operator pos:start="829:28" pos:end="829:28">(</operator><literal type="number" pos:start="829:29" pos:end="829:32">2ULL</literal> <operator pos:start="829:34" pos:end="829:35">&lt;&lt;</operator> <operator pos:start="829:37" pos:end="829:37">(</operator><operator pos:start="829:38" pos:end="829:38">(</operator><literal type="number" pos:start="829:39" pos:end="829:39">8</literal> <operator pos:start="829:41" pos:end="829:42">&lt;&lt;</operator> <operator pos:start="829:44" pos:end="829:44">(</operator><name pos:start="829:45" pos:end="829:47">mop</name> <operator pos:start="829:49" pos:end="829:49">&amp;</operator> <name pos:start="829:51" pos:end="829:57">MO_SIZE</name><operator pos:start="829:58" pos:end="829:58">)</operator><operator pos:start="829:59" pos:end="829:59">)</operator> <operator pos:start="829:61" pos:end="829:61">-</operator> <literal type="number" pos:start="829:63" pos:end="829:63">1</literal><operator pos:start="829:64" pos:end="829:64">)</operator><operator pos:start="829:65" pos:end="829:65">)</operator> <operator pos:start="829:67" pos:end="829:67">-</operator> <literal type="number" pos:start="829:69" pos:end="829:69">1</literal></expr>;</expr_stmt>

                <expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

            </block_content>}</block></switch>

            <break pos:start="835:13" pos:end="835:18">break;</break>



        <default pos:start="839:9" pos:end="839:16">default:</default>

            <break pos:start="841:13" pos:end="841:18">break;</break>

        </block_content>}</block></function>



        <comment type="block" pos:start="847:9" pos:end="851:65">/* 32-bit ops generate 32-bit results.  For the result is zero test

           below, we can ignore high bits, but for further optimizations we

           need to record that the high bits contain garbage.  */</comment>

        <expr_stmt pos:start="853:9" pos:end="853:24"><expr pos:start="853:9" pos:end="853:23"><name pos:start="853:9" pos:end="853:16">partmask</name> <operator pos:start="853:18" pos:end="853:18">=</operator> <name pos:start="853:20" pos:end="853:23">mask</name></expr>;</expr_stmt>

        <if_stmt pos:start="855:9" pos:end="863:9"><if pos:start="855:9" pos:end="863:9">if <condition pos:start="855:12" pos:end="855:42">(<expr pos:start="855:13" pos:end="855:41"><operator pos:start="855:13" pos:end="855:13">!</operator><operator pos:start="855:14" pos:end="855:14">(</operator><name pos:start="855:15" pos:end="855:24"><name pos:start="855:15" pos:end="855:17">def</name><operator pos:start="855:18" pos:end="855:19">-&gt;</operator><name pos:start="855:20" pos:end="855:24">flags</name></name> <operator pos:start="855:26" pos:end="855:26">&amp;</operator> <name pos:start="855:28" pos:end="855:40">TCG_OPF_64BIT</name><operator pos:start="855:41" pos:end="855:41">)</operator></expr>)</condition> <block pos:start="855:44" pos:end="863:9">{<block_content pos:start="857:13" pos:end="861:36">

            <expr_stmt pos:start="857:13" pos:end="857:51"><expr pos:start="857:13" pos:end="857:50"><name pos:start="857:13" pos:end="857:16">mask</name> <operator pos:start="857:18" pos:end="857:19">|=</operator> <operator pos:start="857:21" pos:end="857:21">~</operator><operator pos:start="857:22" pos:end="857:22">(</operator><name pos:start="857:23" pos:end="857:38">tcg_target_ulong</name><operator pos:start="857:39" pos:end="857:39">)</operator><literal type="number" pos:start="857:40" pos:end="857:50">0xffffffffu</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="859:13" pos:end="859:36"><expr pos:start="859:13" pos:end="859:35"><name pos:start="859:13" pos:end="859:20">partmask</name> <operator pos:start="859:22" pos:end="859:23">&amp;=</operator> <literal type="number" pos:start="859:25" pos:end="859:35">0xffffffffu</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="861:13" pos:end="861:36"><expr pos:start="861:13" pos:end="861:35"><name pos:start="861:13" pos:end="861:20">affected</name> <operator pos:start="861:22" pos:end="861:23">&amp;=</operator> <literal type="number" pos:start="861:25" pos:end="861:35">0xffffffffu</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="867:9" pos:end="875:9"><if pos:start="867:9" pos:end="875:9">if <condition pos:start="867:12" pos:end="867:26">(<expr pos:start="867:13" pos:end="867:25"><name pos:start="867:13" pos:end="867:20">partmask</name> <operator pos:start="867:22" pos:end="867:23">==</operator> <literal type="number" pos:start="867:25" pos:end="867:25">0</literal></expr>)</condition> <block pos:start="867:28" pos:end="875:9">{<block_content pos:start="869:13" pos:end="873:21">

            <expr_stmt pos:start="869:13" pos:end="869:44"><expr pos:start="869:13" pos:end="869:43"><call pos:start="869:13" pos:end="869:43"><name pos:start="869:13" pos:end="869:28">tcg_debug_assert</name><argument_list pos:start="869:29" pos:end="869:43">(<argument pos:start="869:30" pos:end="869:42"><expr pos:start="869:30" pos:end="869:42"><name pos:start="869:30" pos:end="869:37">nb_oargs</name> <operator pos:start="869:39" pos:end="869:40">==</operator> <literal type="number" pos:start="869:42" pos:end="869:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="871:13" pos:end="871:52"><expr pos:start="871:13" pos:end="871:51"><call pos:start="871:13" pos:end="871:51"><name pos:start="871:13" pos:end="871:28">tcg_opt_gen_movi</name><argument_list pos:start="871:29" pos:end="871:51">(<argument pos:start="871:30" pos:end="871:30"><expr pos:start="871:30" pos:end="871:30"><name pos:start="871:30" pos:end="871:30">s</name></expr></argument>, <argument pos:start="871:33" pos:end="871:34"><expr pos:start="871:33" pos:end="871:34"><name pos:start="871:33" pos:end="871:34">op</name></expr></argument>, <argument pos:start="871:37" pos:end="871:47"><expr pos:start="871:37" pos:end="871:47"><name pos:start="871:37" pos:end="871:47"><name pos:start="871:37" pos:end="871:38">op</name><operator pos:start="871:39" pos:end="871:40">-&gt;</operator><name pos:start="871:41" pos:end="871:44">args</name><index pos:start="871:45" pos:end="871:47">[<expr pos:start="871:46" pos:end="871:46"><literal type="number" pos:start="871:46" pos:end="871:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="871:50" pos:end="871:50"><expr pos:start="871:50" pos:end="871:50"><literal type="number" pos:start="871:50" pos:end="871:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="873:13" pos:end="873:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="877:9" pos:end="885:9"><if pos:start="877:9" pos:end="885:9">if <condition pos:start="877:12" pos:end="877:26">(<expr pos:start="877:13" pos:end="877:25"><name pos:start="877:13" pos:end="877:20">affected</name> <operator pos:start="877:22" pos:end="877:23">==</operator> <literal type="number" pos:start="877:25" pos:end="877:25">0</literal></expr>)</condition> <block pos:start="877:28" pos:end="885:9">{<block_content pos:start="879:13" pos:end="883:21">

            <expr_stmt pos:start="879:13" pos:end="879:44"><expr pos:start="879:13" pos:end="879:43"><call pos:start="879:13" pos:end="879:43"><name pos:start="879:13" pos:end="879:28">tcg_debug_assert</name><argument_list pos:start="879:29" pos:end="879:43">(<argument pos:start="879:30" pos:end="879:42"><expr pos:start="879:30" pos:end="879:42"><name pos:start="879:30" pos:end="879:37">nb_oargs</name> <operator pos:start="879:39" pos:end="879:40">==</operator> <literal type="number" pos:start="879:42" pos:end="879:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="881:13" pos:end="881:61"><expr pos:start="881:13" pos:end="881:60"><call pos:start="881:13" pos:end="881:60"><name pos:start="881:13" pos:end="881:27">tcg_opt_gen_mov</name><argument_list pos:start="881:28" pos:end="881:60">(<argument pos:start="881:29" pos:end="881:29"><expr pos:start="881:29" pos:end="881:29"><name pos:start="881:29" pos:end="881:29">s</name></expr></argument>, <argument pos:start="881:32" pos:end="881:33"><expr pos:start="881:32" pos:end="881:33"><name pos:start="881:32" pos:end="881:33">op</name></expr></argument>, <argument pos:start="881:36" pos:end="881:46"><expr pos:start="881:36" pos:end="881:46"><name pos:start="881:36" pos:end="881:46"><name pos:start="881:36" pos:end="881:37">op</name><operator pos:start="881:38" pos:end="881:39">-&gt;</operator><name pos:start="881:40" pos:end="881:43">args</name><index pos:start="881:44" pos:end="881:46">[<expr pos:start="881:45" pos:end="881:45"><literal type="number" pos:start="881:45" pos:end="881:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="881:49" pos:end="881:59"><expr pos:start="881:49" pos:end="881:59"><name pos:start="881:49" pos:end="881:59"><name pos:start="881:49" pos:end="881:50">op</name><operator pos:start="881:51" pos:end="881:52">-&gt;</operator><name pos:start="881:53" pos:end="881:56">args</name><index pos:start="881:57" pos:end="881:59">[<expr pos:start="881:58" pos:end="881:58"><literal type="number" pos:start="881:58" pos:end="881:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="883:13" pos:end="883:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="889:9" pos:end="889:69">/* Simplify expression for "op r, a, 0 =&gt; movi r, 0" cases */</comment>

        <switch pos:start="891:9" pos:end="917:9">switch <condition pos:start="891:16" pos:end="891:20">(<expr pos:start="891:17" pos:end="891:19"><name pos:start="891:17" pos:end="891:19">opc</name></expr>)</condition> <block pos:start="891:22" pos:end="917:9">{<block_content pos:start="893:9" pos:end="915:18">

        <expr_stmt pos:start="893:9" pos:end="899:29"><expr pos:start="893:9" pos:end="899:29"><call pos:start="893:9" pos:end="893:26"><name pos:start="893:9" pos:end="893:21">CASE_OP_32_64</name><argument_list pos:start="893:22" pos:end="893:26">(<argument pos:start="893:23" pos:end="893:25"><expr pos:start="893:23" pos:end="893:25"><name pos:start="893:23" pos:end="893:25">and</name></expr></argument>)</argument_list></call><operator pos:start="893:27" pos:end="893:27">:</operator>

        <call pos:start="895:9" pos:end="895:26"><name pos:start="895:9" pos:end="895:21">CASE_OP_32_64</name><argument_list pos:start="895:22" pos:end="895:26">(<argument pos:start="895:23" pos:end="895:25"><expr pos:start="895:23" pos:end="895:25"><name pos:start="895:23" pos:end="895:25">mul</name></expr></argument>)</argument_list></call><operator pos:start="895:27" pos:end="895:27">:</operator>

        <call pos:start="897:9" pos:end="897:28"><name pos:start="897:9" pos:end="897:21">CASE_OP_32_64</name><argument_list pos:start="897:22" pos:end="897:28">(<argument pos:start="897:23" pos:end="897:27"><expr pos:start="897:23" pos:end="897:27"><name pos:start="897:23" pos:end="897:27">muluh</name></expr></argument>)</argument_list></call><operator pos:start="897:29" pos:end="897:29">:</operator>

        <call pos:start="899:9" pos:end="899:28"><name pos:start="899:9" pos:end="899:21">CASE_OP_32_64</name><argument_list pos:start="899:22" pos:end="899:28">(<argument pos:start="899:23" pos:end="899:27"><expr pos:start="899:23" pos:end="899:27"><name pos:start="899:23" pos:end="899:27">mulsh</name></expr></argument>)</argument_list></call><operator pos:start="899:29" pos:end="899:29">:</operator></expr></expr_stmt>

            <if_stmt pos:start="901:13" pos:end="909:13"><if pos:start="901:13" pos:end="909:13">if <condition pos:start="901:16" pos:end="903:51">(<expr pos:start="901:17" pos:end="903:50"><call pos:start="901:17" pos:end="901:41"><name pos:start="901:17" pos:end="901:28">arg_is_const</name><argument_list pos:start="901:29" pos:end="901:41">(<argument pos:start="901:30" pos:end="901:40"><expr pos:start="901:30" pos:end="901:40"><name pos:start="901:30" pos:end="901:40"><name pos:start="901:30" pos:end="901:31">op</name><operator pos:start="901:32" pos:end="901:33">-&gt;</operator><name pos:start="901:34" pos:end="901:37">args</name><index pos:start="901:38" pos:end="901:40">[<expr pos:start="901:39" pos:end="901:39"><literal type="number" pos:start="901:39" pos:end="901:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="903:17" pos:end="903:18">&amp;&amp;</operator> <call pos:start="903:20" pos:end="903:40"><name pos:start="903:20" pos:end="903:27">arg_info</name><argument_list pos:start="903:28" pos:end="903:40">(<argument pos:start="903:29" pos:end="903:39"><expr pos:start="903:29" pos:end="903:39"><name pos:start="903:29" pos:end="903:39"><name pos:start="903:29" pos:end="903:30">op</name><operator pos:start="903:31" pos:end="903:32">-&gt;</operator><name pos:start="903:33" pos:end="903:36">args</name><index pos:start="903:37" pos:end="903:39">[<expr pos:start="903:38" pos:end="903:38"><literal type="number" pos:start="903:38" pos:end="903:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="903:41" pos:end="903:42">-&gt;</operator><name pos:start="903:43" pos:end="903:45">val</name> <operator pos:start="903:47" pos:end="903:48">==</operator> <literal type="number" pos:start="903:50" pos:end="903:50">0</literal></expr>)</condition> <block pos:start="903:53" pos:end="909:13">{<block_content pos:start="905:17" pos:end="907:25">

                <expr_stmt pos:start="905:17" pos:end="905:56"><expr pos:start="905:17" pos:end="905:55"><call pos:start="905:17" pos:end="905:55"><name pos:start="905:17" pos:end="905:32">tcg_opt_gen_movi</name><argument_list pos:start="905:33" pos:end="905:55">(<argument pos:start="905:34" pos:end="905:34"><expr pos:start="905:34" pos:end="905:34"><name pos:start="905:34" pos:end="905:34">s</name></expr></argument>, <argument pos:start="905:37" pos:end="905:38"><expr pos:start="905:37" pos:end="905:38"><name pos:start="905:37" pos:end="905:38">op</name></expr></argument>, <argument pos:start="905:41" pos:end="905:51"><expr pos:start="905:41" pos:end="905:51"><name pos:start="905:41" pos:end="905:51"><name pos:start="905:41" pos:end="905:42">op</name><operator pos:start="905:43" pos:end="905:44">-&gt;</operator><name pos:start="905:45" pos:end="905:48">args</name><index pos:start="905:49" pos:end="905:51">[<expr pos:start="905:50" pos:end="905:50"><literal type="number" pos:start="905:50" pos:end="905:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="905:54" pos:end="905:54"><expr pos:start="905:54" pos:end="905:54"><literal type="number" pos:start="905:54" pos:end="905:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="907:17" pos:end="907:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="911:13" pos:end="911:18">break;</break>

        <default pos:start="913:9" pos:end="913:16">default:</default>

            <break pos:start="915:13" pos:end="915:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="921:9" pos:end="921:68">/* Simplify expression for "op r, a, a =&gt; mov r, a" cases */</comment>

        <switch pos:start="923:9" pos:end="943:9">switch <condition pos:start="923:16" pos:end="923:20">(<expr pos:start="923:17" pos:end="923:19"><name pos:start="923:17" pos:end="923:19">opc</name></expr>)</condition> <block pos:start="923:22" pos:end="943:9">{<block_content pos:start="925:9" pos:end="941:18">

        <expr_stmt pos:start="925:9" pos:end="927:27"><expr pos:start="925:9" pos:end="927:27"><call pos:start="925:9" pos:end="925:25"><name pos:start="925:9" pos:end="925:21">CASE_OP_32_64</name><argument_list pos:start="925:22" pos:end="925:25">(<argument pos:start="925:23" pos:end="925:24"><expr pos:start="925:23" pos:end="925:24"><name pos:start="925:23" pos:end="925:24">or</name></expr></argument>)</argument_list></call><operator pos:start="925:26" pos:end="925:26">:</operator>

        <call pos:start="927:9" pos:end="927:26"><name pos:start="927:9" pos:end="927:21">CASE_OP_32_64</name><argument_list pos:start="927:22" pos:end="927:26">(<argument pos:start="927:23" pos:end="927:25"><expr pos:start="927:23" pos:end="927:25"><name pos:start="927:23" pos:end="927:25">and</name></expr></argument>)</argument_list></call><operator pos:start="927:27" pos:end="927:27">:</operator></expr></expr_stmt>

            <if_stmt pos:start="929:13" pos:end="935:13"><if pos:start="929:13" pos:end="935:13">if <condition pos:start="929:16" pos:end="929:58">(<expr pos:start="929:17" pos:end="929:57"><call pos:start="929:17" pos:end="929:57"><name pos:start="929:17" pos:end="929:31">args_are_copies</name><argument_list pos:start="929:32" pos:end="929:57">(<argument pos:start="929:33" pos:end="929:43"><expr pos:start="929:33" pos:end="929:43"><name pos:start="929:33" pos:end="929:43"><name pos:start="929:33" pos:end="929:34">op</name><operator pos:start="929:35" pos:end="929:36">-&gt;</operator><name pos:start="929:37" pos:end="929:40">args</name><index pos:start="929:41" pos:end="929:43">[<expr pos:start="929:42" pos:end="929:42"><literal type="number" pos:start="929:42" pos:end="929:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="929:46" pos:end="929:56"><expr pos:start="929:46" pos:end="929:56"><name pos:start="929:46" pos:end="929:56"><name pos:start="929:46" pos:end="929:47">op</name><operator pos:start="929:48" pos:end="929:49">-&gt;</operator><name pos:start="929:50" pos:end="929:53">args</name><index pos:start="929:54" pos:end="929:56">[<expr pos:start="929:55" pos:end="929:55"><literal type="number" pos:start="929:55" pos:end="929:55">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="929:60" pos:end="935:13">{<block_content pos:start="931:17" pos:end="933:25">

                <expr_stmt pos:start="931:17" pos:end="931:65"><expr pos:start="931:17" pos:end="931:64"><call pos:start="931:17" pos:end="931:64"><name pos:start="931:17" pos:end="931:31">tcg_opt_gen_mov</name><argument_list pos:start="931:32" pos:end="931:64">(<argument pos:start="931:33" pos:end="931:33"><expr pos:start="931:33" pos:end="931:33"><name pos:start="931:33" pos:end="931:33">s</name></expr></argument>, <argument pos:start="931:36" pos:end="931:37"><expr pos:start="931:36" pos:end="931:37"><name pos:start="931:36" pos:end="931:37">op</name></expr></argument>, <argument pos:start="931:40" pos:end="931:50"><expr pos:start="931:40" pos:end="931:50"><name pos:start="931:40" pos:end="931:50"><name pos:start="931:40" pos:end="931:41">op</name><operator pos:start="931:42" pos:end="931:43">-&gt;</operator><name pos:start="931:44" pos:end="931:47">args</name><index pos:start="931:48" pos:end="931:50">[<expr pos:start="931:49" pos:end="931:49"><literal type="number" pos:start="931:49" pos:end="931:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="931:53" pos:end="931:63"><expr pos:start="931:53" pos:end="931:63"><name pos:start="931:53" pos:end="931:63"><name pos:start="931:53" pos:end="931:54">op</name><operator pos:start="931:55" pos:end="931:56">-&gt;</operator><name pos:start="931:57" pos:end="931:60">args</name><index pos:start="931:61" pos:end="931:63">[<expr pos:start="931:62" pos:end="931:62"><literal type="number" pos:start="931:62" pos:end="931:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="933:17" pos:end="933:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="937:13" pos:end="937:18">break;</break>

        <default pos:start="939:9" pos:end="939:16">default:</default>

            <break pos:start="941:13" pos:end="941:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="947:9" pos:end="947:69">/* Simplify expression for "op r, a, a =&gt; movi r, 0" cases */</comment>

        <switch pos:start="949:9" pos:end="971:9">switch <condition pos:start="949:16" pos:end="949:20">(<expr pos:start="949:17" pos:end="949:19"><name pos:start="949:17" pos:end="949:19">opc</name></expr>)</condition> <block pos:start="949:22" pos:end="971:9">{<block_content pos:start="951:9" pos:end="969:18">

        <expr_stmt pos:start="951:9" pos:end="955:27"><expr pos:start="951:9" pos:end="955:27"><call pos:start="951:9" pos:end="951:27"><name pos:start="951:9" pos:end="951:21">CASE_OP_32_64</name><argument_list pos:start="951:22" pos:end="951:27">(<argument pos:start="951:23" pos:end="951:26"><expr pos:start="951:23" pos:end="951:26"><name pos:start="951:23" pos:end="951:26">andc</name></expr></argument>)</argument_list></call><operator pos:start="951:28" pos:end="951:28">:</operator>

        <call pos:start="953:9" pos:end="953:26"><name pos:start="953:9" pos:end="953:21">CASE_OP_32_64</name><argument_list pos:start="953:22" pos:end="953:26">(<argument pos:start="953:23" pos:end="953:25"><expr pos:start="953:23" pos:end="953:25"><name pos:start="953:23" pos:end="953:25">sub</name></expr></argument>)</argument_list></call><operator pos:start="953:27" pos:end="953:27">:</operator>

        <call pos:start="955:9" pos:end="955:26"><name pos:start="955:9" pos:end="955:21">CASE_OP_32_64</name><argument_list pos:start="955:22" pos:end="955:26">(<argument pos:start="955:23" pos:end="955:25"><expr pos:start="955:23" pos:end="955:25"><name pos:start="955:23" pos:end="955:25">xor</name></expr></argument>)</argument_list></call><operator pos:start="955:27" pos:end="955:27">:</operator></expr></expr_stmt>

            <if_stmt pos:start="957:13" pos:end="963:13"><if pos:start="957:13" pos:end="963:13">if <condition pos:start="957:16" pos:end="957:58">(<expr pos:start="957:17" pos:end="957:57"><call pos:start="957:17" pos:end="957:57"><name pos:start="957:17" pos:end="957:31">args_are_copies</name><argument_list pos:start="957:32" pos:end="957:57">(<argument pos:start="957:33" pos:end="957:43"><expr pos:start="957:33" pos:end="957:43"><name pos:start="957:33" pos:end="957:43"><name pos:start="957:33" pos:end="957:34">op</name><operator pos:start="957:35" pos:end="957:36">-&gt;</operator><name pos:start="957:37" pos:end="957:40">args</name><index pos:start="957:41" pos:end="957:43">[<expr pos:start="957:42" pos:end="957:42"><literal type="number" pos:start="957:42" pos:end="957:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="957:46" pos:end="957:56"><expr pos:start="957:46" pos:end="957:56"><name pos:start="957:46" pos:end="957:56"><name pos:start="957:46" pos:end="957:47">op</name><operator pos:start="957:48" pos:end="957:49">-&gt;</operator><name pos:start="957:50" pos:end="957:53">args</name><index pos:start="957:54" pos:end="957:56">[<expr pos:start="957:55" pos:end="957:55"><literal type="number" pos:start="957:55" pos:end="957:55">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="957:60" pos:end="963:13">{<block_content pos:start="959:17" pos:end="961:25">

                <expr_stmt pos:start="959:17" pos:end="959:56"><expr pos:start="959:17" pos:end="959:55"><call pos:start="959:17" pos:end="959:55"><name pos:start="959:17" pos:end="959:32">tcg_opt_gen_movi</name><argument_list pos:start="959:33" pos:end="959:55">(<argument pos:start="959:34" pos:end="959:34"><expr pos:start="959:34" pos:end="959:34"><name pos:start="959:34" pos:end="959:34">s</name></expr></argument>, <argument pos:start="959:37" pos:end="959:38"><expr pos:start="959:37" pos:end="959:38"><name pos:start="959:37" pos:end="959:38">op</name></expr></argument>, <argument pos:start="959:41" pos:end="959:51"><expr pos:start="959:41" pos:end="959:51"><name pos:start="959:41" pos:end="959:51"><name pos:start="959:41" pos:end="959:42">op</name><operator pos:start="959:43" pos:end="959:44">-&gt;</operator><name pos:start="959:45" pos:end="959:48">args</name><index pos:start="959:49" pos:end="959:51">[<expr pos:start="959:50" pos:end="959:50"><literal type="number" pos:start="959:50" pos:end="959:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="959:54" pos:end="959:54"><expr pos:start="959:54" pos:end="959:54"><literal type="number" pos:start="959:54" pos:end="959:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="961:17" pos:end="961:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="965:13" pos:end="965:18">break;</break>

        <default pos:start="967:9" pos:end="967:16">default:</default>

            <break pos:start="969:13" pos:end="969:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="975:9" pos:end="979:71">/* Propagate constants through copy operations and do constant

           folding.  Constants will be substituted to arguments by register

           allocator where needed and possible.  Also detect copies. */</comment>

        <switch pos:start="981:9" pos:end="1737:9">switch <condition pos:start="981:16" pos:end="981:20">(<expr pos:start="981:17" pos:end="981:19"><name pos:start="981:17" pos:end="981:19">opc</name></expr>)</condition> <block pos:start="981:22" pos:end="1737:9">{<block_content pos:start="983:9" pos:end="1735:18">

        <expr_stmt pos:start="983:9" pos:end="985:61"><expr pos:start="983:9" pos:end="985:60"><call pos:start="983:9" pos:end="983:26"><name pos:start="983:9" pos:end="983:21">CASE_OP_32_64</name><argument_list pos:start="983:22" pos:end="983:26">(<argument pos:start="983:23" pos:end="983:25"><expr pos:start="983:23" pos:end="983:25"><name pos:start="983:23" pos:end="983:25">mov</name></expr></argument>)</argument_list></call><operator pos:start="983:27" pos:end="983:27">:</operator>

            <call pos:start="985:13" pos:end="985:60"><name pos:start="985:13" pos:end="985:27">tcg_opt_gen_mov</name><argument_list pos:start="985:28" pos:end="985:60">(<argument pos:start="985:29" pos:end="985:29"><expr pos:start="985:29" pos:end="985:29"><name pos:start="985:29" pos:end="985:29">s</name></expr></argument>, <argument pos:start="985:32" pos:end="985:33"><expr pos:start="985:32" pos:end="985:33"><name pos:start="985:32" pos:end="985:33">op</name></expr></argument>, <argument pos:start="985:36" pos:end="985:46"><expr pos:start="985:36" pos:end="985:46"><name pos:start="985:36" pos:end="985:46"><name pos:start="985:36" pos:end="985:37">op</name><operator pos:start="985:38" pos:end="985:39">-&gt;</operator><name pos:start="985:40" pos:end="985:43">args</name><index pos:start="985:44" pos:end="985:46">[<expr pos:start="985:45" pos:end="985:45"><literal type="number" pos:start="985:45" pos:end="985:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="985:49" pos:end="985:59"><expr pos:start="985:49" pos:end="985:59"><name pos:start="985:49" pos:end="985:59"><name pos:start="985:49" pos:end="985:50">op</name><operator pos:start="985:51" pos:end="985:52">-&gt;</operator><name pos:start="985:53" pos:end="985:56">args</name><index pos:start="985:57" pos:end="985:59">[<expr pos:start="985:58" pos:end="985:58"><literal type="number" pos:start="985:58" pos:end="985:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="987:13" pos:end="987:18">break;</break>

        <expr_stmt pos:start="989:9" pos:end="991:62"><expr pos:start="989:9" pos:end="991:61"><call pos:start="989:9" pos:end="989:27"><name pos:start="989:9" pos:end="989:21">CASE_OP_32_64</name><argument_list pos:start="989:22" pos:end="989:27">(<argument pos:start="989:23" pos:end="989:26"><expr pos:start="989:23" pos:end="989:26"><name pos:start="989:23" pos:end="989:26">movi</name></expr></argument>)</argument_list></call><operator pos:start="989:28" pos:end="989:28">:</operator>

            <call pos:start="991:13" pos:end="991:61"><name pos:start="991:13" pos:end="991:28">tcg_opt_gen_movi</name><argument_list pos:start="991:29" pos:end="991:61">(<argument pos:start="991:30" pos:end="991:30"><expr pos:start="991:30" pos:end="991:30"><name pos:start="991:30" pos:end="991:30">s</name></expr></argument>, <argument pos:start="991:33" pos:end="991:34"><expr pos:start="991:33" pos:end="991:34"><name pos:start="991:33" pos:end="991:34">op</name></expr></argument>, <argument pos:start="991:37" pos:end="991:47"><expr pos:start="991:37" pos:end="991:47"><name pos:start="991:37" pos:end="991:47"><name pos:start="991:37" pos:end="991:38">op</name><operator pos:start="991:39" pos:end="991:40">-&gt;</operator><name pos:start="991:41" pos:end="991:44">args</name><index pos:start="991:45" pos:end="991:47">[<expr pos:start="991:46" pos:end="991:46"><literal type="number" pos:start="991:46" pos:end="991:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="991:50" pos:end="991:60"><expr pos:start="991:50" pos:end="991:60"><name pos:start="991:50" pos:end="991:60"><name pos:start="991:50" pos:end="991:51">op</name><operator pos:start="991:52" pos:end="991:53">-&gt;</operator><name pos:start="991:54" pos:end="991:57">args</name><index pos:start="991:58" pos:end="991:60">[<expr pos:start="991:59" pos:end="991:59"><literal type="number" pos:start="991:59" pos:end="991:59">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="993:13" pos:end="993:18">break;</break>



        <expr_stmt pos:start="997:9" pos:end="1009:29"><expr pos:start="997:9" pos:end="1009:29"><call pos:start="997:9" pos:end="997:26"><name pos:start="997:9" pos:end="997:21">CASE_OP_32_64</name><argument_list pos:start="997:22" pos:end="997:26">(<argument pos:start="997:23" pos:end="997:25"><expr pos:start="997:23" pos:end="997:25"><name pos:start="997:23" pos:end="997:25">not</name></expr></argument>)</argument_list></call><operator pos:start="997:27" pos:end="997:27">:</operator>

        <call pos:start="999:9" pos:end="999:26"><name pos:start="999:9" pos:end="999:21">CASE_OP_32_64</name><argument_list pos:start="999:22" pos:end="999:26">(<argument pos:start="999:23" pos:end="999:25"><expr pos:start="999:23" pos:end="999:25"><name pos:start="999:23" pos:end="999:25">neg</name></expr></argument>)</argument_list></call><operator pos:start="999:27" pos:end="999:27">:</operator>

        <call pos:start="1001:9" pos:end="1001:28"><name pos:start="1001:9" pos:end="1001:21">CASE_OP_32_64</name><argument_list pos:start="1001:22" pos:end="1001:28">(<argument pos:start="1001:23" pos:end="1001:27"><expr pos:start="1001:23" pos:end="1001:27"><name pos:start="1001:23" pos:end="1001:27">ext8s</name></expr></argument>)</argument_list></call><operator pos:start="1001:29" pos:end="1001:29">:</operator>

        <call pos:start="1003:9" pos:end="1003:28"><name pos:start="1003:9" pos:end="1003:21">CASE_OP_32_64</name><argument_list pos:start="1003:22" pos:end="1003:28">(<argument pos:start="1003:23" pos:end="1003:27"><expr pos:start="1003:23" pos:end="1003:27"><name pos:start="1003:23" pos:end="1003:27">ext8u</name></expr></argument>)</argument_list></call><operator pos:start="1003:29" pos:end="1003:29">:</operator>

        <call pos:start="1005:9" pos:end="1005:29"><name pos:start="1005:9" pos:end="1005:21">CASE_OP_32_64</name><argument_list pos:start="1005:22" pos:end="1005:29">(<argument pos:start="1005:23" pos:end="1005:28"><expr pos:start="1005:23" pos:end="1005:28"><name pos:start="1005:23" pos:end="1005:28">ext16s</name></expr></argument>)</argument_list></call><operator pos:start="1005:30" pos:end="1005:30">:</operator>

        <call pos:start="1007:9" pos:end="1007:29"><name pos:start="1007:9" pos:end="1007:21">CASE_OP_32_64</name><argument_list pos:start="1007:22" pos:end="1007:29">(<argument pos:start="1007:23" pos:end="1007:28"><expr pos:start="1007:23" pos:end="1007:28"><name pos:start="1007:23" pos:end="1007:28">ext16u</name></expr></argument>)</argument_list></call><operator pos:start="1007:30" pos:end="1007:30">:</operator>

        <call pos:start="1009:9" pos:end="1009:28"><name pos:start="1009:9" pos:end="1009:21">CASE_OP_32_64</name><argument_list pos:start="1009:22" pos:end="1009:28">(<argument pos:start="1009:23" pos:end="1009:27"><expr pos:start="1009:23" pos:end="1009:27"><name pos:start="1009:23" pos:end="1009:27">ctpop</name></expr></argument>)</argument_list></call><operator pos:start="1009:29" pos:end="1009:29">:</operator></expr></expr_stmt>

        <case pos:start="1011:9" pos:end="1011:33">case <expr pos:start="1011:14" pos:end="1011:32"><name pos:start="1011:14" pos:end="1011:32">INDEX_op_ext32s_i64</name></expr>:</case>

        <case pos:start="1013:9" pos:end="1013:33">case <expr pos:start="1013:14" pos:end="1013:32"><name pos:start="1013:14" pos:end="1013:32">INDEX_op_ext32u_i64</name></expr>:</case>

        <case pos:start="1015:9" pos:end="1015:34">case <expr pos:start="1015:14" pos:end="1015:33"><name pos:start="1015:14" pos:end="1015:33">INDEX_op_ext_i32_i64</name></expr>:</case>

        <case pos:start="1017:9" pos:end="1017:35">case <expr pos:start="1017:14" pos:end="1017:34"><name pos:start="1017:14" pos:end="1017:34">INDEX_op_extu_i32_i64</name></expr>:</case>

        <case pos:start="1019:9" pos:end="1019:36">case <expr pos:start="1019:14" pos:end="1019:35"><name pos:start="1019:14" pos:end="1019:35">INDEX_op_extrl_i64_i32</name></expr>:</case>

        <case pos:start="1021:9" pos:end="1021:36">case <expr pos:start="1021:14" pos:end="1021:35"><name pos:start="1021:14" pos:end="1021:35">INDEX_op_extrh_i64_i32</name></expr>:</case>

            <if_stmt pos:start="1023:13" pos:end="1031:13"><if pos:start="1023:13" pos:end="1031:13">if <condition pos:start="1023:16" pos:end="1023:42">(<expr pos:start="1023:17" pos:end="1023:41"><call pos:start="1023:17" pos:end="1023:41"><name pos:start="1023:17" pos:end="1023:28">arg_is_const</name><argument_list pos:start="1023:29" pos:end="1023:41">(<argument pos:start="1023:30" pos:end="1023:40"><expr pos:start="1023:30" pos:end="1023:40"><name pos:start="1023:30" pos:end="1023:40"><name pos:start="1023:30" pos:end="1023:31">op</name><operator pos:start="1023:32" pos:end="1023:33">-&gt;</operator><name pos:start="1023:34" pos:end="1023:37">args</name><index pos:start="1023:38" pos:end="1023:40">[<expr pos:start="1023:39" pos:end="1023:39"><literal type="number" pos:start="1023:39" pos:end="1023:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1023:44" pos:end="1031:13">{<block_content pos:start="1025:17" pos:end="1029:22">

                <expr_stmt pos:start="1025:17" pos:end="1025:78"><expr pos:start="1025:17" pos:end="1025:77"><name pos:start="1025:17" pos:end="1025:19">tmp</name> <operator pos:start="1025:21" pos:end="1025:21">=</operator> <call pos:start="1025:23" pos:end="1025:77"><name pos:start="1025:23" pos:end="1025:41">do_constant_folding</name><argument_list pos:start="1025:42" pos:end="1025:77">(<argument pos:start="1025:43" pos:end="1025:45"><expr pos:start="1025:43" pos:end="1025:45"><name pos:start="1025:43" pos:end="1025:45">opc</name></expr></argument>, <argument pos:start="1025:48" pos:end="1025:73"><expr pos:start="1025:48" pos:end="1025:73"><call pos:start="1025:48" pos:end="1025:68"><name pos:start="1025:48" pos:end="1025:55">arg_info</name><argument_list pos:start="1025:56" pos:end="1025:68">(<argument pos:start="1025:57" pos:end="1025:67"><expr pos:start="1025:57" pos:end="1025:67"><name pos:start="1025:57" pos:end="1025:67"><name pos:start="1025:57" pos:end="1025:58">op</name><operator pos:start="1025:59" pos:end="1025:60">-&gt;</operator><name pos:start="1025:61" pos:end="1025:64">args</name><index pos:start="1025:65" pos:end="1025:67">[<expr pos:start="1025:66" pos:end="1025:66"><literal type="number" pos:start="1025:66" pos:end="1025:66">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1025:69" pos:end="1025:70">-&gt;</operator><name pos:start="1025:71" pos:end="1025:73">val</name></expr></argument>, <argument pos:start="1025:76" pos:end="1025:76"><expr pos:start="1025:76" pos:end="1025:76"><literal type="number" pos:start="1025:76" pos:end="1025:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1027:17" pos:end="1027:58"><expr pos:start="1027:17" pos:end="1027:57"><call pos:start="1027:17" pos:end="1027:57"><name pos:start="1027:17" pos:end="1027:32">tcg_opt_gen_movi</name><argument_list pos:start="1027:33" pos:end="1027:57">(<argument pos:start="1027:34" pos:end="1027:34"><expr pos:start="1027:34" pos:end="1027:34"><name pos:start="1027:34" pos:end="1027:34">s</name></expr></argument>, <argument pos:start="1027:37" pos:end="1027:38"><expr pos:start="1027:37" pos:end="1027:38"><name pos:start="1027:37" pos:end="1027:38">op</name></expr></argument>, <argument pos:start="1027:41" pos:end="1027:51"><expr pos:start="1027:41" pos:end="1027:51"><name pos:start="1027:41" pos:end="1027:51"><name pos:start="1027:41" pos:end="1027:42">op</name><operator pos:start="1027:43" pos:end="1027:44">-&gt;</operator><name pos:start="1027:45" pos:end="1027:48">args</name><index pos:start="1027:49" pos:end="1027:51">[<expr pos:start="1027:50" pos:end="1027:50"><literal type="number" pos:start="1027:50" pos:end="1027:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1027:54" pos:end="1027:56"><expr pos:start="1027:54" pos:end="1027:56"><name pos:start="1027:54" pos:end="1027:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1029:17" pos:end="1029:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1033:13" pos:end="1033:28">goto <name pos:start="1033:18" pos:end="1033:27">do_default</name>;</goto>



        <expr_stmt pos:start="1037:9" pos:end="1079:28"><expr pos:start="1037:9" pos:end="1079:28"><call pos:start="1037:9" pos:end="1037:26"><name pos:start="1037:9" pos:end="1037:21">CASE_OP_32_64</name><argument_list pos:start="1037:22" pos:end="1037:26">(<argument pos:start="1037:23" pos:end="1037:25"><expr pos:start="1037:23" pos:end="1037:25"><name pos:start="1037:23" pos:end="1037:25">add</name></expr></argument>)</argument_list></call><operator pos:start="1037:27" pos:end="1037:27">:</operator>

        <call pos:start="1039:9" pos:end="1039:26"><name pos:start="1039:9" pos:end="1039:21">CASE_OP_32_64</name><argument_list pos:start="1039:22" pos:end="1039:26">(<argument pos:start="1039:23" pos:end="1039:25"><expr pos:start="1039:23" pos:end="1039:25"><name pos:start="1039:23" pos:end="1039:25">sub</name></expr></argument>)</argument_list></call><operator pos:start="1039:27" pos:end="1039:27">:</operator>

        <call pos:start="1041:9" pos:end="1041:26"><name pos:start="1041:9" pos:end="1041:21">CASE_OP_32_64</name><argument_list pos:start="1041:22" pos:end="1041:26">(<argument pos:start="1041:23" pos:end="1041:25"><expr pos:start="1041:23" pos:end="1041:25"><name pos:start="1041:23" pos:end="1041:25">mul</name></expr></argument>)</argument_list></call><operator pos:start="1041:27" pos:end="1041:27">:</operator>

        <call pos:start="1043:9" pos:end="1043:25"><name pos:start="1043:9" pos:end="1043:21">CASE_OP_32_64</name><argument_list pos:start="1043:22" pos:end="1043:25">(<argument pos:start="1043:23" pos:end="1043:24"><expr pos:start="1043:23" pos:end="1043:24"><name pos:start="1043:23" pos:end="1043:24">or</name></expr></argument>)</argument_list></call><operator pos:start="1043:26" pos:end="1043:26">:</operator>

        <call pos:start="1045:9" pos:end="1045:26"><name pos:start="1045:9" pos:end="1045:21">CASE_OP_32_64</name><argument_list pos:start="1045:22" pos:end="1045:26">(<argument pos:start="1045:23" pos:end="1045:25"><expr pos:start="1045:23" pos:end="1045:25"><name pos:start="1045:23" pos:end="1045:25">and</name></expr></argument>)</argument_list></call><operator pos:start="1045:27" pos:end="1045:27">:</operator>

        <call pos:start="1047:9" pos:end="1047:26"><name pos:start="1047:9" pos:end="1047:21">CASE_OP_32_64</name><argument_list pos:start="1047:22" pos:end="1047:26">(<argument pos:start="1047:23" pos:end="1047:25"><expr pos:start="1047:23" pos:end="1047:25"><name pos:start="1047:23" pos:end="1047:25">xor</name></expr></argument>)</argument_list></call><operator pos:start="1047:27" pos:end="1047:27">:</operator>

        <call pos:start="1049:9" pos:end="1049:26"><name pos:start="1049:9" pos:end="1049:21">CASE_OP_32_64</name><argument_list pos:start="1049:22" pos:end="1049:26">(<argument pos:start="1049:23" pos:end="1049:25"><expr pos:start="1049:23" pos:end="1049:25"><name pos:start="1049:23" pos:end="1049:25">shl</name></expr></argument>)</argument_list></call><operator pos:start="1049:27" pos:end="1049:27">:</operator>

        <call pos:start="1051:9" pos:end="1051:26"><name pos:start="1051:9" pos:end="1051:21">CASE_OP_32_64</name><argument_list pos:start="1051:22" pos:end="1051:26">(<argument pos:start="1051:23" pos:end="1051:25"><expr pos:start="1051:23" pos:end="1051:25"><name pos:start="1051:23" pos:end="1051:25">shr</name></expr></argument>)</argument_list></call><operator pos:start="1051:27" pos:end="1051:27">:</operator>

        <call pos:start="1053:9" pos:end="1053:26"><name pos:start="1053:9" pos:end="1053:21">CASE_OP_32_64</name><argument_list pos:start="1053:22" pos:end="1053:26">(<argument pos:start="1053:23" pos:end="1053:25"><expr pos:start="1053:23" pos:end="1053:25"><name pos:start="1053:23" pos:end="1053:25">sar</name></expr></argument>)</argument_list></call><operator pos:start="1053:27" pos:end="1053:27">:</operator>

        <call pos:start="1055:9" pos:end="1055:27"><name pos:start="1055:9" pos:end="1055:21">CASE_OP_32_64</name><argument_list pos:start="1055:22" pos:end="1055:27">(<argument pos:start="1055:23" pos:end="1055:26"><expr pos:start="1055:23" pos:end="1055:26"><name pos:start="1055:23" pos:end="1055:26">rotl</name></expr></argument>)</argument_list></call><operator pos:start="1055:28" pos:end="1055:28">:</operator>

        <call pos:start="1057:9" pos:end="1057:27"><name pos:start="1057:9" pos:end="1057:21">CASE_OP_32_64</name><argument_list pos:start="1057:22" pos:end="1057:27">(<argument pos:start="1057:23" pos:end="1057:26"><expr pos:start="1057:23" pos:end="1057:26"><name pos:start="1057:23" pos:end="1057:26">rotr</name></expr></argument>)</argument_list></call><operator pos:start="1057:28" pos:end="1057:28">:</operator>

        <call pos:start="1059:9" pos:end="1059:27"><name pos:start="1059:9" pos:end="1059:21">CASE_OP_32_64</name><argument_list pos:start="1059:22" pos:end="1059:27">(<argument pos:start="1059:23" pos:end="1059:26"><expr pos:start="1059:23" pos:end="1059:26"><name pos:start="1059:23" pos:end="1059:26">andc</name></expr></argument>)</argument_list></call><operator pos:start="1059:28" pos:end="1059:28">:</operator>

        <call pos:start="1061:9" pos:end="1061:26"><name pos:start="1061:9" pos:end="1061:21">CASE_OP_32_64</name><argument_list pos:start="1061:22" pos:end="1061:26">(<argument pos:start="1061:23" pos:end="1061:25"><expr pos:start="1061:23" pos:end="1061:25"><name pos:start="1061:23" pos:end="1061:25">orc</name></expr></argument>)</argument_list></call><operator pos:start="1061:27" pos:end="1061:27">:</operator>

        <call pos:start="1063:9" pos:end="1063:26"><name pos:start="1063:9" pos:end="1063:21">CASE_OP_32_64</name><argument_list pos:start="1063:22" pos:end="1063:26">(<argument pos:start="1063:23" pos:end="1063:25"><expr pos:start="1063:23" pos:end="1063:25"><name pos:start="1063:23" pos:end="1063:25">eqv</name></expr></argument>)</argument_list></call><operator pos:start="1063:27" pos:end="1063:27">:</operator>

        <call pos:start="1065:9" pos:end="1065:27"><name pos:start="1065:9" pos:end="1065:21">CASE_OP_32_64</name><argument_list pos:start="1065:22" pos:end="1065:27">(<argument pos:start="1065:23" pos:end="1065:26"><expr pos:start="1065:23" pos:end="1065:26"><name pos:start="1065:23" pos:end="1065:26">nand</name></expr></argument>)</argument_list></call><operator pos:start="1065:28" pos:end="1065:28">:</operator>

        <call pos:start="1067:9" pos:end="1067:26"><name pos:start="1067:9" pos:end="1067:21">CASE_OP_32_64</name><argument_list pos:start="1067:22" pos:end="1067:26">(<argument pos:start="1067:23" pos:end="1067:25"><expr pos:start="1067:23" pos:end="1067:25"><name pos:start="1067:23" pos:end="1067:25">nor</name></expr></argument>)</argument_list></call><operator pos:start="1067:27" pos:end="1067:27">:</operator>

        <call pos:start="1069:9" pos:end="1069:28"><name pos:start="1069:9" pos:end="1069:21">CASE_OP_32_64</name><argument_list pos:start="1069:22" pos:end="1069:28">(<argument pos:start="1069:23" pos:end="1069:27"><expr pos:start="1069:23" pos:end="1069:27"><name pos:start="1069:23" pos:end="1069:27">muluh</name></expr></argument>)</argument_list></call><operator pos:start="1069:29" pos:end="1069:29">:</operator>

        <call pos:start="1071:9" pos:end="1071:28"><name pos:start="1071:9" pos:end="1071:21">CASE_OP_32_64</name><argument_list pos:start="1071:22" pos:end="1071:28">(<argument pos:start="1071:23" pos:end="1071:27"><expr pos:start="1071:23" pos:end="1071:27"><name pos:start="1071:23" pos:end="1071:27">mulsh</name></expr></argument>)</argument_list></call><operator pos:start="1071:29" pos:end="1071:29">:</operator>

        <call pos:start="1073:9" pos:end="1073:26"><name pos:start="1073:9" pos:end="1073:21">CASE_OP_32_64</name><argument_list pos:start="1073:22" pos:end="1073:26">(<argument pos:start="1073:23" pos:end="1073:25"><expr pos:start="1073:23" pos:end="1073:25"><name pos:start="1073:23" pos:end="1073:25">div</name></expr></argument>)</argument_list></call><operator pos:start="1073:27" pos:end="1073:27">:</operator>

        <call pos:start="1075:9" pos:end="1075:27"><name pos:start="1075:9" pos:end="1075:21">CASE_OP_32_64</name><argument_list pos:start="1075:22" pos:end="1075:27">(<argument pos:start="1075:23" pos:end="1075:26"><expr pos:start="1075:23" pos:end="1075:26"><name pos:start="1075:23" pos:end="1075:26">divu</name></expr></argument>)</argument_list></call><operator pos:start="1075:28" pos:end="1075:28">:</operator>

        <call pos:start="1077:9" pos:end="1077:26"><name pos:start="1077:9" pos:end="1077:21">CASE_OP_32_64</name><argument_list pos:start="1077:22" pos:end="1077:26">(<argument pos:start="1077:23" pos:end="1077:25"><expr pos:start="1077:23" pos:end="1077:25"><name pos:start="1077:23" pos:end="1077:25">rem</name></expr></argument>)</argument_list></call><operator pos:start="1077:27" pos:end="1077:27">:</operator>

        <call pos:start="1079:9" pos:end="1079:27"><name pos:start="1079:9" pos:end="1079:21">CASE_OP_32_64</name><argument_list pos:start="1079:22" pos:end="1079:27">(<argument pos:start="1079:23" pos:end="1079:26"><expr pos:start="1079:23" pos:end="1079:26"><name pos:start="1079:23" pos:end="1079:26">remu</name></expr></argument>)</argument_list></call><operator pos:start="1079:28" pos:end="1079:28">:</operator></expr></expr_stmt>

            <if_stmt pos:start="1081:13" pos:end="1091:13"><if pos:start="1081:13" pos:end="1091:13">if <condition pos:start="1081:16" pos:end="1081:71">(<expr pos:start="1081:17" pos:end="1081:70"><call pos:start="1081:17" pos:end="1081:41"><name pos:start="1081:17" pos:end="1081:28">arg_is_const</name><argument_list pos:start="1081:29" pos:end="1081:41">(<argument pos:start="1081:30" pos:end="1081:40"><expr pos:start="1081:30" pos:end="1081:40"><name pos:start="1081:30" pos:end="1081:40"><name pos:start="1081:30" pos:end="1081:31">op</name><operator pos:start="1081:32" pos:end="1081:33">-&gt;</operator><name pos:start="1081:34" pos:end="1081:37">args</name><index pos:start="1081:38" pos:end="1081:40">[<expr pos:start="1081:39" pos:end="1081:39"><literal type="number" pos:start="1081:39" pos:end="1081:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1081:43" pos:end="1081:44">&amp;&amp;</operator> <call pos:start="1081:46" pos:end="1081:70"><name pos:start="1081:46" pos:end="1081:57">arg_is_const</name><argument_list pos:start="1081:58" pos:end="1081:70">(<argument pos:start="1081:59" pos:end="1081:69"><expr pos:start="1081:59" pos:end="1081:69"><name pos:start="1081:59" pos:end="1081:69"><name pos:start="1081:59" pos:end="1081:60">op</name><operator pos:start="1081:61" pos:end="1081:62">-&gt;</operator><name pos:start="1081:63" pos:end="1081:66">args</name><index pos:start="1081:67" pos:end="1081:69">[<expr pos:start="1081:68" pos:end="1081:68"><literal type="number" pos:start="1081:68" pos:end="1081:68">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1081:73" pos:end="1091:13">{<block_content pos:start="1083:17" pos:end="1089:22">

                <expr_stmt pos:start="1083:17" pos:end="1085:70"><expr pos:start="1083:17" pos:end="1085:69"><name pos:start="1083:17" pos:end="1083:19">tmp</name> <operator pos:start="1083:21" pos:end="1083:21">=</operator> <call pos:start="1083:23" pos:end="1085:69"><name pos:start="1083:23" pos:end="1083:41">do_constant_folding</name><argument_list pos:start="1083:42" pos:end="1085:69">(<argument pos:start="1083:43" pos:end="1083:45"><expr pos:start="1083:43" pos:end="1083:45"><name pos:start="1083:43" pos:end="1083:45">opc</name></expr></argument>, <argument pos:start="1083:48" pos:end="1083:73"><expr pos:start="1083:48" pos:end="1083:73"><call pos:start="1083:48" pos:end="1083:68"><name pos:start="1083:48" pos:end="1083:55">arg_info</name><argument_list pos:start="1083:56" pos:end="1083:68">(<argument pos:start="1083:57" pos:end="1083:67"><expr pos:start="1083:57" pos:end="1083:67"><name pos:start="1083:57" pos:end="1083:67"><name pos:start="1083:57" pos:end="1083:58">op</name><operator pos:start="1083:59" pos:end="1083:60">-&gt;</operator><name pos:start="1083:61" pos:end="1083:64">args</name><index pos:start="1083:65" pos:end="1083:67">[<expr pos:start="1083:66" pos:end="1083:66"><literal type="number" pos:start="1083:66" pos:end="1083:66">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1083:69" pos:end="1083:70">-&gt;</operator><name pos:start="1083:71" pos:end="1083:73">val</name></expr></argument>,

                                          <argument pos:start="1085:43" pos:end="1085:68"><expr pos:start="1085:43" pos:end="1085:68"><call pos:start="1085:43" pos:end="1085:63"><name pos:start="1085:43" pos:end="1085:50">arg_info</name><argument_list pos:start="1085:51" pos:end="1085:63">(<argument pos:start="1085:52" pos:end="1085:62"><expr pos:start="1085:52" pos:end="1085:62"><name pos:start="1085:52" pos:end="1085:62"><name pos:start="1085:52" pos:end="1085:53">op</name><operator pos:start="1085:54" pos:end="1085:55">-&gt;</operator><name pos:start="1085:56" pos:end="1085:59">args</name><index pos:start="1085:60" pos:end="1085:62">[<expr pos:start="1085:61" pos:end="1085:61"><literal type="number" pos:start="1085:61" pos:end="1085:61">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1085:64" pos:end="1085:65">-&gt;</operator><name pos:start="1085:66" pos:end="1085:68">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1087:17" pos:end="1087:58"><expr pos:start="1087:17" pos:end="1087:57"><call pos:start="1087:17" pos:end="1087:57"><name pos:start="1087:17" pos:end="1087:32">tcg_opt_gen_movi</name><argument_list pos:start="1087:33" pos:end="1087:57">(<argument pos:start="1087:34" pos:end="1087:34"><expr pos:start="1087:34" pos:end="1087:34"><name pos:start="1087:34" pos:end="1087:34">s</name></expr></argument>, <argument pos:start="1087:37" pos:end="1087:38"><expr pos:start="1087:37" pos:end="1087:38"><name pos:start="1087:37" pos:end="1087:38">op</name></expr></argument>, <argument pos:start="1087:41" pos:end="1087:51"><expr pos:start="1087:41" pos:end="1087:51"><name pos:start="1087:41" pos:end="1087:51"><name pos:start="1087:41" pos:end="1087:42">op</name><operator pos:start="1087:43" pos:end="1087:44">-&gt;</operator><name pos:start="1087:45" pos:end="1087:48">args</name><index pos:start="1087:49" pos:end="1087:51">[<expr pos:start="1087:50" pos:end="1087:50"><literal type="number" pos:start="1087:50" pos:end="1087:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1087:54" pos:end="1087:56"><expr pos:start="1087:54" pos:end="1087:56"><name pos:start="1087:54" pos:end="1087:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1089:17" pos:end="1089:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1093:13" pos:end="1093:28">goto <name pos:start="1093:18" pos:end="1093:27">do_default</name>;</goto>



        <expr_stmt pos:start="1097:9" pos:end="1099:27"><expr pos:start="1097:9" pos:end="1099:27"><call pos:start="1097:9" pos:end="1097:26"><name pos:start="1097:9" pos:end="1097:21">CASE_OP_32_64</name><argument_list pos:start="1097:22" pos:end="1097:26">(<argument pos:start="1097:23" pos:end="1097:25"><expr pos:start="1097:23" pos:end="1097:25"><name pos:start="1097:23" pos:end="1097:25">clz</name></expr></argument>)</argument_list></call><operator pos:start="1097:27" pos:end="1097:27">:</operator>

        <call pos:start="1099:9" pos:end="1099:26"><name pos:start="1099:9" pos:end="1099:21">CASE_OP_32_64</name><argument_list pos:start="1099:22" pos:end="1099:26">(<argument pos:start="1099:23" pos:end="1099:25"><expr pos:start="1099:23" pos:end="1099:25"><name pos:start="1099:23" pos:end="1099:25">ctz</name></expr></argument>)</argument_list></call><operator pos:start="1099:27" pos:end="1099:27">:</operator></expr></expr_stmt>

            <if_stmt pos:start="1101:13" pos:end="1119:13"><if pos:start="1101:13" pos:end="1119:13">if <condition pos:start="1101:16" pos:end="1101:42">(<expr pos:start="1101:17" pos:end="1101:41"><call pos:start="1101:17" pos:end="1101:41"><name pos:start="1101:17" pos:end="1101:28">arg_is_const</name><argument_list pos:start="1101:29" pos:end="1101:41">(<argument pos:start="1101:30" pos:end="1101:40"><expr pos:start="1101:30" pos:end="1101:40"><name pos:start="1101:30" pos:end="1101:40"><name pos:start="1101:30" pos:end="1101:31">op</name><operator pos:start="1101:32" pos:end="1101:33">-&gt;</operator><name pos:start="1101:34" pos:end="1101:37">args</name><index pos:start="1101:38" pos:end="1101:40">[<expr pos:start="1101:39" pos:end="1101:39"><literal type="number" pos:start="1101:39" pos:end="1101:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1101:44" pos:end="1119:13">{<block_content pos:start="1103:17" pos:end="1117:22">

                <decl_stmt pos:start="1103:17" pos:end="1103:54"><decl pos:start="1103:17" pos:end="1103:53"><type pos:start="1103:17" pos:end="1103:22"><name pos:start="1103:17" pos:end="1103:22">TCGArg</name></type> <name pos:start="1103:24" pos:end="1103:24">v</name> <init pos:start="1103:26" pos:end="1103:53">= <expr pos:start="1103:28" pos:end="1103:53"><call pos:start="1103:28" pos:end="1103:48"><name pos:start="1103:28" pos:end="1103:35">arg_info</name><argument_list pos:start="1103:36" pos:end="1103:48">(<argument pos:start="1103:37" pos:end="1103:47"><expr pos:start="1103:37" pos:end="1103:47"><name pos:start="1103:37" pos:end="1103:47"><name pos:start="1103:37" pos:end="1103:38">op</name><operator pos:start="1103:39" pos:end="1103:40">-&gt;</operator><name pos:start="1103:41" pos:end="1103:44">args</name><index pos:start="1103:45" pos:end="1103:47">[<expr pos:start="1103:46" pos:end="1103:46"><literal type="number" pos:start="1103:46" pos:end="1103:46">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1103:49" pos:end="1103:50">-&gt;</operator><name pos:start="1103:51" pos:end="1103:53">val</name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="1105:17" pos:end="1115:17"><if pos:start="1105:17" pos:end="1111:17">if <condition pos:start="1105:20" pos:end="1105:27">(<expr pos:start="1105:21" pos:end="1105:26"><name pos:start="1105:21" pos:end="1105:21">v</name> <operator pos:start="1105:23" pos:end="1105:24">!=</operator> <literal type="number" pos:start="1105:26" pos:end="1105:26">0</literal></expr>)</condition> <block pos:start="1105:29" pos:end="1111:17">{<block_content pos:start="1107:21" pos:end="1109:62">

                    <expr_stmt pos:start="1107:21" pos:end="1107:57"><expr pos:start="1107:21" pos:end="1107:56"><name pos:start="1107:21" pos:end="1107:23">tmp</name> <operator pos:start="1107:25" pos:end="1107:25">=</operator> <call pos:start="1107:27" pos:end="1107:56"><name pos:start="1107:27" pos:end="1107:45">do_constant_folding</name><argument_list pos:start="1107:46" pos:end="1107:56">(<argument pos:start="1107:47" pos:end="1107:49"><expr pos:start="1107:47" pos:end="1107:49"><name pos:start="1107:47" pos:end="1107:49">opc</name></expr></argument>, <argument pos:start="1107:52" pos:end="1107:52"><expr pos:start="1107:52" pos:end="1107:52"><name pos:start="1107:52" pos:end="1107:52">v</name></expr></argument>, <argument pos:start="1107:55" pos:end="1107:55"><expr pos:start="1107:55" pos:end="1107:55"><literal type="number" pos:start="1107:55" pos:end="1107:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1109:21" pos:end="1109:62"><expr pos:start="1109:21" pos:end="1109:61"><call pos:start="1109:21" pos:end="1109:61"><name pos:start="1109:21" pos:end="1109:36">tcg_opt_gen_movi</name><argument_list pos:start="1109:37" pos:end="1109:61">(<argument pos:start="1109:38" pos:end="1109:38"><expr pos:start="1109:38" pos:end="1109:38"><name pos:start="1109:38" pos:end="1109:38">s</name></expr></argument>, <argument pos:start="1109:41" pos:end="1109:42"><expr pos:start="1109:41" pos:end="1109:42"><name pos:start="1109:41" pos:end="1109:42">op</name></expr></argument>, <argument pos:start="1109:45" pos:end="1109:55"><expr pos:start="1109:45" pos:end="1109:55"><name pos:start="1109:45" pos:end="1109:55"><name pos:start="1109:45" pos:end="1109:46">op</name><operator pos:start="1109:47" pos:end="1109:48">-&gt;</operator><name pos:start="1109:49" pos:end="1109:52">args</name><index pos:start="1109:53" pos:end="1109:55">[<expr pos:start="1109:54" pos:end="1109:54"><literal type="number" pos:start="1109:54" pos:end="1109:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1109:58" pos:end="1109:60"><expr pos:start="1109:58" pos:end="1109:60"><name pos:start="1109:58" pos:end="1109:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1111:19" pos:end="1115:17">else <block pos:start="1111:24" pos:end="1115:17">{<block_content pos:start="1113:21" pos:end="1113:69">

                    <expr_stmt pos:start="1113:21" pos:end="1113:69"><expr pos:start="1113:21" pos:end="1113:68"><call pos:start="1113:21" pos:end="1113:68"><name pos:start="1113:21" pos:end="1113:35">tcg_opt_gen_mov</name><argument_list pos:start="1113:36" pos:end="1113:68">(<argument pos:start="1113:37" pos:end="1113:37"><expr pos:start="1113:37" pos:end="1113:37"><name pos:start="1113:37" pos:end="1113:37">s</name></expr></argument>, <argument pos:start="1113:40" pos:end="1113:41"><expr pos:start="1113:40" pos:end="1113:41"><name pos:start="1113:40" pos:end="1113:41">op</name></expr></argument>, <argument pos:start="1113:44" pos:end="1113:54"><expr pos:start="1113:44" pos:end="1113:54"><name pos:start="1113:44" pos:end="1113:54"><name pos:start="1113:44" pos:end="1113:45">op</name><operator pos:start="1113:46" pos:end="1113:47">-&gt;</operator><name pos:start="1113:48" pos:end="1113:51">args</name><index pos:start="1113:52" pos:end="1113:54">[<expr pos:start="1113:53" pos:end="1113:53"><literal type="number" pos:start="1113:53" pos:end="1113:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1113:57" pos:end="1113:67"><expr pos:start="1113:57" pos:end="1113:67"><name pos:start="1113:57" pos:end="1113:67"><name pos:start="1113:57" pos:end="1113:58">op</name><operator pos:start="1113:59" pos:end="1113:60">-&gt;</operator><name pos:start="1113:61" pos:end="1113:64">args</name><index pos:start="1113:65" pos:end="1113:67">[<expr pos:start="1113:66" pos:end="1113:66"><literal type="number" pos:start="1113:66" pos:end="1113:66">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1117:17" pos:end="1117:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1121:13" pos:end="1121:28">goto <name pos:start="1121:18" pos:end="1121:27">do_default</name>;</goto>



        <expr_stmt pos:start="1125:9" pos:end="1125:31"><expr pos:start="1125:9" pos:end="1125:31"><call pos:start="1125:9" pos:end="1125:30"><name pos:start="1125:9" pos:end="1125:21">CASE_OP_32_64</name><argument_list pos:start="1125:22" pos:end="1125:30">(<argument pos:start="1125:23" pos:end="1125:29"><expr pos:start="1125:23" pos:end="1125:29"><name pos:start="1125:23" pos:end="1125:29">deposit</name></expr></argument>)</argument_list></call><operator pos:start="1125:31" pos:end="1125:31">:</operator></expr></expr_stmt>

            <if_stmt pos:start="1127:13" pos:end="1139:13"><if pos:start="1127:13" pos:end="1139:13">if <condition pos:start="1127:16" pos:end="1127:71">(<expr pos:start="1127:17" pos:end="1127:70"><call pos:start="1127:17" pos:end="1127:41"><name pos:start="1127:17" pos:end="1127:28">arg_is_const</name><argument_list pos:start="1127:29" pos:end="1127:41">(<argument pos:start="1127:30" pos:end="1127:40"><expr pos:start="1127:30" pos:end="1127:40"><name pos:start="1127:30" pos:end="1127:40"><name pos:start="1127:30" pos:end="1127:31">op</name><operator pos:start="1127:32" pos:end="1127:33">-&gt;</operator><name pos:start="1127:34" pos:end="1127:37">args</name><index pos:start="1127:38" pos:end="1127:40">[<expr pos:start="1127:39" pos:end="1127:39"><literal type="number" pos:start="1127:39" pos:end="1127:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1127:43" pos:end="1127:44">&amp;&amp;</operator> <call pos:start="1127:46" pos:end="1127:70"><name pos:start="1127:46" pos:end="1127:57">arg_is_const</name><argument_list pos:start="1127:58" pos:end="1127:70">(<argument pos:start="1127:59" pos:end="1127:69"><expr pos:start="1127:59" pos:end="1127:69"><name pos:start="1127:59" pos:end="1127:69"><name pos:start="1127:59" pos:end="1127:60">op</name><operator pos:start="1127:61" pos:end="1127:62">-&gt;</operator><name pos:start="1127:63" pos:end="1127:66">args</name><index pos:start="1127:67" pos:end="1127:69">[<expr pos:start="1127:68" pos:end="1127:68"><literal type="number" pos:start="1127:68" pos:end="1127:68">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1127:73" pos:end="1139:13">{<block_content pos:start="1129:17" pos:end="1137:22">

                <expr_stmt pos:start="1129:17" pos:end="1133:60"><expr pos:start="1129:17" pos:end="1133:59"><name pos:start="1129:17" pos:end="1129:19">tmp</name> <operator pos:start="1129:21" pos:end="1129:21">=</operator> <call pos:start="1129:23" pos:end="1133:59"><name pos:start="1129:23" pos:end="1129:31">deposit64</name><argument_list pos:start="1129:32" pos:end="1133:59">(<argument pos:start="1129:33" pos:end="1129:58"><expr pos:start="1129:33" pos:end="1129:58"><call pos:start="1129:33" pos:end="1129:53"><name pos:start="1129:33" pos:end="1129:40">arg_info</name><argument_list pos:start="1129:41" pos:end="1129:53">(<argument pos:start="1129:42" pos:end="1129:52"><expr pos:start="1129:42" pos:end="1129:52"><name pos:start="1129:42" pos:end="1129:52"><name pos:start="1129:42" pos:end="1129:43">op</name><operator pos:start="1129:44" pos:end="1129:45">-&gt;</operator><name pos:start="1129:46" pos:end="1129:49">args</name><index pos:start="1129:50" pos:end="1129:52">[<expr pos:start="1129:51" pos:end="1129:51"><literal type="number" pos:start="1129:51" pos:end="1129:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1129:54" pos:end="1129:55">-&gt;</operator><name pos:start="1129:56" pos:end="1129:58">val</name></expr></argument>,

                                <argument pos:start="1131:33" pos:end="1131:43"><expr pos:start="1131:33" pos:end="1131:43"><name pos:start="1131:33" pos:end="1131:43"><name pos:start="1131:33" pos:end="1131:34">op</name><operator pos:start="1131:35" pos:end="1131:36">-&gt;</operator><name pos:start="1131:37" pos:end="1131:40">args</name><index pos:start="1131:41" pos:end="1131:43">[<expr pos:start="1131:42" pos:end="1131:42"><literal type="number" pos:start="1131:42" pos:end="1131:42">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="1131:46" pos:end="1131:56"><expr pos:start="1131:46" pos:end="1131:56"><name pos:start="1131:46" pos:end="1131:56"><name pos:start="1131:46" pos:end="1131:47">op</name><operator pos:start="1131:48" pos:end="1131:49">-&gt;</operator><name pos:start="1131:50" pos:end="1131:53">args</name><index pos:start="1131:54" pos:end="1131:56">[<expr pos:start="1131:55" pos:end="1131:55"><literal type="number" pos:start="1131:55" pos:end="1131:55">4</literal></expr>]</index></name></expr></argument>,

                                <argument pos:start="1133:33" pos:end="1133:58"><expr pos:start="1133:33" pos:end="1133:58"><call pos:start="1133:33" pos:end="1133:53"><name pos:start="1133:33" pos:end="1133:40">arg_info</name><argument_list pos:start="1133:41" pos:end="1133:53">(<argument pos:start="1133:42" pos:end="1133:52"><expr pos:start="1133:42" pos:end="1133:52"><name pos:start="1133:42" pos:end="1133:52"><name pos:start="1133:42" pos:end="1133:43">op</name><operator pos:start="1133:44" pos:end="1133:45">-&gt;</operator><name pos:start="1133:46" pos:end="1133:49">args</name><index pos:start="1133:50" pos:end="1133:52">[<expr pos:start="1133:51" pos:end="1133:51"><literal type="number" pos:start="1133:51" pos:end="1133:51">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1133:54" pos:end="1133:55">-&gt;</operator><name pos:start="1133:56" pos:end="1133:58">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1135:17" pos:end="1135:58"><expr pos:start="1135:17" pos:end="1135:57"><call pos:start="1135:17" pos:end="1135:57"><name pos:start="1135:17" pos:end="1135:32">tcg_opt_gen_movi</name><argument_list pos:start="1135:33" pos:end="1135:57">(<argument pos:start="1135:34" pos:end="1135:34"><expr pos:start="1135:34" pos:end="1135:34"><name pos:start="1135:34" pos:end="1135:34">s</name></expr></argument>, <argument pos:start="1135:37" pos:end="1135:38"><expr pos:start="1135:37" pos:end="1135:38"><name pos:start="1135:37" pos:end="1135:38">op</name></expr></argument>, <argument pos:start="1135:41" pos:end="1135:51"><expr pos:start="1135:41" pos:end="1135:51"><name pos:start="1135:41" pos:end="1135:51"><name pos:start="1135:41" pos:end="1135:42">op</name><operator pos:start="1135:43" pos:end="1135:44">-&gt;</operator><name pos:start="1135:45" pos:end="1135:48">args</name><index pos:start="1135:49" pos:end="1135:51">[<expr pos:start="1135:50" pos:end="1135:50"><literal type="number" pos:start="1135:50" pos:end="1135:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1135:54" pos:end="1135:56"><expr pos:start="1135:54" pos:end="1135:56"><name pos:start="1135:54" pos:end="1135:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1137:17" pos:end="1137:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1141:13" pos:end="1141:28">goto <name pos:start="1141:18" pos:end="1141:27">do_default</name>;</goto>



        <expr_stmt pos:start="1145:9" pos:end="1145:31"><expr pos:start="1145:9" pos:end="1145:31"><call pos:start="1145:9" pos:end="1145:30"><name pos:start="1145:9" pos:end="1145:21">CASE_OP_32_64</name><argument_list pos:start="1145:22" pos:end="1145:30">(<argument pos:start="1145:23" pos:end="1145:29"><expr pos:start="1145:23" pos:end="1145:29"><name pos:start="1145:23" pos:end="1145:29">extract</name></expr></argument>)</argument_list></call><operator pos:start="1145:31" pos:end="1145:31">:</operator></expr></expr_stmt>

            <if_stmt pos:start="1147:13" pos:end="1157:13"><if pos:start="1147:13" pos:end="1157:13">if <condition pos:start="1147:16" pos:end="1147:42">(<expr pos:start="1147:17" pos:end="1147:41"><call pos:start="1147:17" pos:end="1147:41"><name pos:start="1147:17" pos:end="1147:28">arg_is_const</name><argument_list pos:start="1147:29" pos:end="1147:41">(<argument pos:start="1147:30" pos:end="1147:40"><expr pos:start="1147:30" pos:end="1147:40"><name pos:start="1147:30" pos:end="1147:40"><name pos:start="1147:30" pos:end="1147:31">op</name><operator pos:start="1147:32" pos:end="1147:33">-&gt;</operator><name pos:start="1147:34" pos:end="1147:37">args</name><index pos:start="1147:38" pos:end="1147:40">[<expr pos:start="1147:39" pos:end="1147:39"><literal type="number" pos:start="1147:39" pos:end="1147:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1147:44" pos:end="1157:13">{<block_content pos:start="1149:17" pos:end="1155:22">

                <expr_stmt pos:start="1149:17" pos:end="1151:58"><expr pos:start="1149:17" pos:end="1151:57"><name pos:start="1149:17" pos:end="1149:19">tmp</name> <operator pos:start="1149:21" pos:end="1149:21">=</operator> <call pos:start="1149:23" pos:end="1151:57"><name pos:start="1149:23" pos:end="1149:31">extract64</name><argument_list pos:start="1149:32" pos:end="1151:57">(<argument pos:start="1149:33" pos:end="1149:58"><expr pos:start="1149:33" pos:end="1149:58"><call pos:start="1149:33" pos:end="1149:53"><name pos:start="1149:33" pos:end="1149:40">arg_info</name><argument_list pos:start="1149:41" pos:end="1149:53">(<argument pos:start="1149:42" pos:end="1149:52"><expr pos:start="1149:42" pos:end="1149:52"><name pos:start="1149:42" pos:end="1149:52"><name pos:start="1149:42" pos:end="1149:43">op</name><operator pos:start="1149:44" pos:end="1149:45">-&gt;</operator><name pos:start="1149:46" pos:end="1149:49">args</name><index pos:start="1149:50" pos:end="1149:52">[<expr pos:start="1149:51" pos:end="1149:51"><literal type="number" pos:start="1149:51" pos:end="1149:51">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1149:54" pos:end="1149:55">-&gt;</operator><name pos:start="1149:56" pos:end="1149:58">val</name></expr></argument>,

                                <argument pos:start="1151:33" pos:end="1151:43"><expr pos:start="1151:33" pos:end="1151:43"><name pos:start="1151:33" pos:end="1151:43"><name pos:start="1151:33" pos:end="1151:34">op</name><operator pos:start="1151:35" pos:end="1151:36">-&gt;</operator><name pos:start="1151:37" pos:end="1151:40">args</name><index pos:start="1151:41" pos:end="1151:43">[<expr pos:start="1151:42" pos:end="1151:42"><literal type="number" pos:start="1151:42" pos:end="1151:42">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1151:46" pos:end="1151:56"><expr pos:start="1151:46" pos:end="1151:56"><name pos:start="1151:46" pos:end="1151:56"><name pos:start="1151:46" pos:end="1151:47">op</name><operator pos:start="1151:48" pos:end="1151:49">-&gt;</operator><name pos:start="1151:50" pos:end="1151:53">args</name><index pos:start="1151:54" pos:end="1151:56">[<expr pos:start="1151:55" pos:end="1151:55"><literal type="number" pos:start="1151:55" pos:end="1151:55">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1153:17" pos:end="1153:58"><expr pos:start="1153:17" pos:end="1153:57"><call pos:start="1153:17" pos:end="1153:57"><name pos:start="1153:17" pos:end="1153:32">tcg_opt_gen_movi</name><argument_list pos:start="1153:33" pos:end="1153:57">(<argument pos:start="1153:34" pos:end="1153:34"><expr pos:start="1153:34" pos:end="1153:34"><name pos:start="1153:34" pos:end="1153:34">s</name></expr></argument>, <argument pos:start="1153:37" pos:end="1153:38"><expr pos:start="1153:37" pos:end="1153:38"><name pos:start="1153:37" pos:end="1153:38">op</name></expr></argument>, <argument pos:start="1153:41" pos:end="1153:51"><expr pos:start="1153:41" pos:end="1153:51"><name pos:start="1153:41" pos:end="1153:51"><name pos:start="1153:41" pos:end="1153:42">op</name><operator pos:start="1153:43" pos:end="1153:44">-&gt;</operator><name pos:start="1153:45" pos:end="1153:48">args</name><index pos:start="1153:49" pos:end="1153:51">[<expr pos:start="1153:50" pos:end="1153:50"><literal type="number" pos:start="1153:50" pos:end="1153:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1153:54" pos:end="1153:56"><expr pos:start="1153:54" pos:end="1153:56"><name pos:start="1153:54" pos:end="1153:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1155:17" pos:end="1155:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1159:13" pos:end="1159:28">goto <name pos:start="1159:18" pos:end="1159:27">do_default</name>;</goto>



        <expr_stmt pos:start="1163:9" pos:end="1163:32"><expr pos:start="1163:9" pos:end="1163:32"><call pos:start="1163:9" pos:end="1163:31"><name pos:start="1163:9" pos:end="1163:21">CASE_OP_32_64</name><argument_list pos:start="1163:22" pos:end="1163:31">(<argument pos:start="1163:23" pos:end="1163:30"><expr pos:start="1163:23" pos:end="1163:30"><name pos:start="1163:23" pos:end="1163:30">sextract</name></expr></argument>)</argument_list></call><operator pos:start="1163:32" pos:end="1163:32">:</operator></expr></expr_stmt>

            <if_stmt pos:start="1165:13" pos:end="1175:13"><if pos:start="1165:13" pos:end="1175:13">if <condition pos:start="1165:16" pos:end="1165:42">(<expr pos:start="1165:17" pos:end="1165:41"><call pos:start="1165:17" pos:end="1165:41"><name pos:start="1165:17" pos:end="1165:28">arg_is_const</name><argument_list pos:start="1165:29" pos:end="1165:41">(<argument pos:start="1165:30" pos:end="1165:40"><expr pos:start="1165:30" pos:end="1165:40"><name pos:start="1165:30" pos:end="1165:40"><name pos:start="1165:30" pos:end="1165:31">op</name><operator pos:start="1165:32" pos:end="1165:33">-&gt;</operator><name pos:start="1165:34" pos:end="1165:37">args</name><index pos:start="1165:38" pos:end="1165:40">[<expr pos:start="1165:39" pos:end="1165:39"><literal type="number" pos:start="1165:39" pos:end="1165:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1165:44" pos:end="1175:13">{<block_content pos:start="1167:17" pos:end="1173:22">

                <expr_stmt pos:start="1167:17" pos:end="1169:59"><expr pos:start="1167:17" pos:end="1169:58"><name pos:start="1167:17" pos:end="1167:19">tmp</name> <operator pos:start="1167:21" pos:end="1167:21">=</operator> <call pos:start="1167:23" pos:end="1169:58"><name pos:start="1167:23" pos:end="1167:32">sextract64</name><argument_list pos:start="1167:33" pos:end="1169:58">(<argument pos:start="1167:34" pos:end="1167:59"><expr pos:start="1167:34" pos:end="1167:59"><call pos:start="1167:34" pos:end="1167:54"><name pos:start="1167:34" pos:end="1167:41">arg_info</name><argument_list pos:start="1167:42" pos:end="1167:54">(<argument pos:start="1167:43" pos:end="1167:53"><expr pos:start="1167:43" pos:end="1167:53"><name pos:start="1167:43" pos:end="1167:53"><name pos:start="1167:43" pos:end="1167:44">op</name><operator pos:start="1167:45" pos:end="1167:46">-&gt;</operator><name pos:start="1167:47" pos:end="1167:50">args</name><index pos:start="1167:51" pos:end="1167:53">[<expr pos:start="1167:52" pos:end="1167:52"><literal type="number" pos:start="1167:52" pos:end="1167:52">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1167:55" pos:end="1167:56">-&gt;</operator><name pos:start="1167:57" pos:end="1167:59">val</name></expr></argument>,

                                 <argument pos:start="1169:34" pos:end="1169:44"><expr pos:start="1169:34" pos:end="1169:44"><name pos:start="1169:34" pos:end="1169:44"><name pos:start="1169:34" pos:end="1169:35">op</name><operator pos:start="1169:36" pos:end="1169:37">-&gt;</operator><name pos:start="1169:38" pos:end="1169:41">args</name><index pos:start="1169:42" pos:end="1169:44">[<expr pos:start="1169:43" pos:end="1169:43"><literal type="number" pos:start="1169:43" pos:end="1169:43">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1169:47" pos:end="1169:57"><expr pos:start="1169:47" pos:end="1169:57"><name pos:start="1169:47" pos:end="1169:57"><name pos:start="1169:47" pos:end="1169:48">op</name><operator pos:start="1169:49" pos:end="1169:50">-&gt;</operator><name pos:start="1169:51" pos:end="1169:54">args</name><index pos:start="1169:55" pos:end="1169:57">[<expr pos:start="1169:56" pos:end="1169:56"><literal type="number" pos:start="1169:56" pos:end="1169:56">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1171:17" pos:end="1171:58"><expr pos:start="1171:17" pos:end="1171:57"><call pos:start="1171:17" pos:end="1171:57"><name pos:start="1171:17" pos:end="1171:32">tcg_opt_gen_movi</name><argument_list pos:start="1171:33" pos:end="1171:57">(<argument pos:start="1171:34" pos:end="1171:34"><expr pos:start="1171:34" pos:end="1171:34"><name pos:start="1171:34" pos:end="1171:34">s</name></expr></argument>, <argument pos:start="1171:37" pos:end="1171:38"><expr pos:start="1171:37" pos:end="1171:38"><name pos:start="1171:37" pos:end="1171:38">op</name></expr></argument>, <argument pos:start="1171:41" pos:end="1171:51"><expr pos:start="1171:41" pos:end="1171:51"><name pos:start="1171:41" pos:end="1171:51"><name pos:start="1171:41" pos:end="1171:42">op</name><operator pos:start="1171:43" pos:end="1171:44">-&gt;</operator><name pos:start="1171:45" pos:end="1171:48">args</name><index pos:start="1171:49" pos:end="1171:51">[<expr pos:start="1171:50" pos:end="1171:50"><literal type="number" pos:start="1171:50" pos:end="1171:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1171:54" pos:end="1171:56"><expr pos:start="1171:54" pos:end="1171:56"><name pos:start="1171:54" pos:end="1171:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1173:17" pos:end="1173:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1177:13" pos:end="1177:28">goto <name pos:start="1177:18" pos:end="1177:27">do_default</name>;</goto>



        <expr_stmt pos:start="1181:9" pos:end="1185:69"><expr pos:start="1181:9" pos:end="1185:68"><call pos:start="1181:9" pos:end="1181:30"><name pos:start="1181:9" pos:end="1181:21">CASE_OP_32_64</name><argument_list pos:start="1181:22" pos:end="1181:30">(<argument pos:start="1181:23" pos:end="1181:29"><expr pos:start="1181:23" pos:end="1181:29"><name pos:start="1181:23" pos:end="1181:29">setcond</name></expr></argument>)</argument_list></call><operator pos:start="1181:31" pos:end="1181:31">:</operator>

            <name pos:start="1183:13" pos:end="1183:15">tmp</name> <operator pos:start="1183:17" pos:end="1183:17">=</operator> <call pos:start="1183:19" pos:end="1185:68"><name pos:start="1183:19" pos:end="1183:42">do_constant_folding_cond</name><argument_list pos:start="1183:43" pos:end="1185:68">(<argument pos:start="1183:44" pos:end="1183:46"><expr pos:start="1183:44" pos:end="1183:46"><name pos:start="1183:44" pos:end="1183:46">opc</name></expr></argument>, <argument pos:start="1183:49" pos:end="1183:59"><expr pos:start="1183:49" pos:end="1183:59"><name pos:start="1183:49" pos:end="1183:59"><name pos:start="1183:49" pos:end="1183:50">op</name><operator pos:start="1183:51" pos:end="1183:52">-&gt;</operator><name pos:start="1183:53" pos:end="1183:56">args</name><index pos:start="1183:57" pos:end="1183:59">[<expr pos:start="1183:58" pos:end="1183:58"><literal type="number" pos:start="1183:58" pos:end="1183:58">1</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="1185:44" pos:end="1185:54"><expr pos:start="1185:44" pos:end="1185:54"><name pos:start="1185:44" pos:end="1185:54"><name pos:start="1185:44" pos:end="1185:45">op</name><operator pos:start="1185:46" pos:end="1185:47">-&gt;</operator><name pos:start="1185:48" pos:end="1185:51">args</name><index pos:start="1185:52" pos:end="1185:54">[<expr pos:start="1185:53" pos:end="1185:53"><literal type="number" pos:start="1185:53" pos:end="1185:53">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1185:57" pos:end="1185:67"><expr pos:start="1185:57" pos:end="1185:67"><name pos:start="1185:57" pos:end="1185:67"><name pos:start="1185:57" pos:end="1185:58">op</name><operator pos:start="1185:59" pos:end="1185:60">-&gt;</operator><name pos:start="1185:61" pos:end="1185:64">args</name><index pos:start="1185:65" pos:end="1185:67">[<expr pos:start="1185:66" pos:end="1185:66"><literal type="number" pos:start="1185:66" pos:end="1185:66">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1187:13" pos:end="1193:13"><if pos:start="1187:13" pos:end="1193:13">if <condition pos:start="1187:16" pos:end="1187:25">(<expr pos:start="1187:17" pos:end="1187:24"><name pos:start="1187:17" pos:end="1187:19">tmp</name> <operator pos:start="1187:21" pos:end="1187:22">!=</operator> <literal type="number" pos:start="1187:24" pos:end="1187:24">2</literal></expr>)</condition> <block pos:start="1187:27" pos:end="1193:13">{<block_content pos:start="1189:17" pos:end="1191:22">

                <expr_stmt pos:start="1189:17" pos:end="1189:58"><expr pos:start="1189:17" pos:end="1189:57"><call pos:start="1189:17" pos:end="1189:57"><name pos:start="1189:17" pos:end="1189:32">tcg_opt_gen_movi</name><argument_list pos:start="1189:33" pos:end="1189:57">(<argument pos:start="1189:34" pos:end="1189:34"><expr pos:start="1189:34" pos:end="1189:34"><name pos:start="1189:34" pos:end="1189:34">s</name></expr></argument>, <argument pos:start="1189:37" pos:end="1189:38"><expr pos:start="1189:37" pos:end="1189:38"><name pos:start="1189:37" pos:end="1189:38">op</name></expr></argument>, <argument pos:start="1189:41" pos:end="1189:51"><expr pos:start="1189:41" pos:end="1189:51"><name pos:start="1189:41" pos:end="1189:51"><name pos:start="1189:41" pos:end="1189:42">op</name><operator pos:start="1189:43" pos:end="1189:44">-&gt;</operator><name pos:start="1189:45" pos:end="1189:48">args</name><index pos:start="1189:49" pos:end="1189:51">[<expr pos:start="1189:50" pos:end="1189:50"><literal type="number" pos:start="1189:50" pos:end="1189:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1189:54" pos:end="1189:56"><expr pos:start="1189:54" pos:end="1189:56"><name pos:start="1189:54" pos:end="1189:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1191:17" pos:end="1191:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1195:13" pos:end="1195:28">goto <name pos:start="1195:18" pos:end="1195:27">do_default</name>;</goto>



        <expr_stmt pos:start="1199:9" pos:end="1203:69"><expr pos:start="1199:9" pos:end="1203:68"><call pos:start="1199:9" pos:end="1199:29"><name pos:start="1199:9" pos:end="1199:21">CASE_OP_32_64</name><argument_list pos:start="1199:22" pos:end="1199:29">(<argument pos:start="1199:23" pos:end="1199:28"><expr pos:start="1199:23" pos:end="1199:28"><name pos:start="1199:23" pos:end="1199:28">brcond</name></expr></argument>)</argument_list></call><operator pos:start="1199:30" pos:end="1199:30">:</operator>

            <name pos:start="1201:13" pos:end="1201:15">tmp</name> <operator pos:start="1201:17" pos:end="1201:17">=</operator> <call pos:start="1201:19" pos:end="1203:68"><name pos:start="1201:19" pos:end="1201:42">do_constant_folding_cond</name><argument_list pos:start="1201:43" pos:end="1203:68">(<argument pos:start="1201:44" pos:end="1201:46"><expr pos:start="1201:44" pos:end="1201:46"><name pos:start="1201:44" pos:end="1201:46">opc</name></expr></argument>, <argument pos:start="1201:49" pos:end="1201:59"><expr pos:start="1201:49" pos:end="1201:59"><name pos:start="1201:49" pos:end="1201:59"><name pos:start="1201:49" pos:end="1201:50">op</name><operator pos:start="1201:51" pos:end="1201:52">-&gt;</operator><name pos:start="1201:53" pos:end="1201:56">args</name><index pos:start="1201:57" pos:end="1201:59">[<expr pos:start="1201:58" pos:end="1201:58"><literal type="number" pos:start="1201:58" pos:end="1201:58">0</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="1203:44" pos:end="1203:54"><expr pos:start="1203:44" pos:end="1203:54"><name pos:start="1203:44" pos:end="1203:54"><name pos:start="1203:44" pos:end="1203:45">op</name><operator pos:start="1203:46" pos:end="1203:47">-&gt;</operator><name pos:start="1203:48" pos:end="1203:51">args</name><index pos:start="1203:52" pos:end="1203:54">[<expr pos:start="1203:53" pos:end="1203:53"><literal type="number" pos:start="1203:53" pos:end="1203:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1203:57" pos:end="1203:67"><expr pos:start="1203:57" pos:end="1203:67"><name pos:start="1203:57" pos:end="1203:67"><name pos:start="1203:57" pos:end="1203:58">op</name><operator pos:start="1203:59" pos:end="1203:60">-&gt;</operator><name pos:start="1203:61" pos:end="1203:64">args</name><index pos:start="1203:65" pos:end="1203:67">[<expr pos:start="1203:66" pos:end="1203:66"><literal type="number" pos:start="1203:66" pos:end="1203:66">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1205:13" pos:end="1223:13"><if pos:start="1205:13" pos:end="1223:13">if <condition pos:start="1205:16" pos:end="1205:25">(<expr pos:start="1205:17" pos:end="1205:24"><name pos:start="1205:17" pos:end="1205:19">tmp</name> <operator pos:start="1205:21" pos:end="1205:22">!=</operator> <literal type="number" pos:start="1205:24" pos:end="1205:24">2</literal></expr>)</condition> <block pos:start="1205:27" pos:end="1223:13">{<block_content pos:start="1207:17" pos:end="1221:22">

                <if_stmt pos:start="1207:17" pos:end="1219:17"><if pos:start="1207:17" pos:end="1215:17">if <condition pos:start="1207:20" pos:end="1207:24">(<expr pos:start="1207:21" pos:end="1207:23"><name pos:start="1207:21" pos:end="1207:23">tmp</name></expr>)</condition> <block pos:start="1207:26" pos:end="1215:17">{<block_content pos:start="1209:21" pos:end="1213:46">

                    <expr_stmt pos:start="1209:21" pos:end="1209:56"><expr pos:start="1209:21" pos:end="1209:55"><call pos:start="1209:21" pos:end="1209:55"><name pos:start="1209:21" pos:end="1209:31">bitmap_zero</name><argument_list pos:start="1209:32" pos:end="1209:55">(<argument pos:start="1209:33" pos:end="1209:44"><expr pos:start="1209:33" pos:end="1209:44"><name pos:start="1209:33" pos:end="1209:44"><name pos:start="1209:33" pos:end="1209:42">temps_used</name><operator pos:start="1209:43" pos:end="1209:43">.</operator><name pos:start="1209:44" pos:end="1209:44">l</name></name></expr></argument>, <argument pos:start="1209:47" pos:end="1209:54"><expr pos:start="1209:47" pos:end="1209:54"><name pos:start="1209:47" pos:end="1209:54">nb_temps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1211:21" pos:end="1211:42"><expr pos:start="1211:21" pos:end="1211:41"><name pos:start="1211:21" pos:end="1211:27"><name pos:start="1211:21" pos:end="1211:22">op</name><operator pos:start="1211:23" pos:end="1211:24">-&gt;</operator><name pos:start="1211:25" pos:end="1211:27">opc</name></name> <operator pos:start="1211:29" pos:end="1211:29">=</operator> <name pos:start="1211:31" pos:end="1211:41">INDEX_op_br</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1213:21" pos:end="1213:46"><expr pos:start="1213:21" pos:end="1213:45"><name pos:start="1213:21" pos:end="1213:31"><name pos:start="1213:21" pos:end="1213:22">op</name><operator pos:start="1213:23" pos:end="1213:24">-&gt;</operator><name pos:start="1213:25" pos:end="1213:28">args</name><index pos:start="1213:29" pos:end="1213:31">[<expr pos:start="1213:30" pos:end="1213:30"><literal type="number" pos:start="1213:30" pos:end="1213:30">0</literal></expr>]</index></name> <operator pos:start="1213:33" pos:end="1213:33">=</operator> <name pos:start="1213:35" pos:end="1213:45"><name pos:start="1213:35" pos:end="1213:36">op</name><operator pos:start="1213:37" pos:end="1213:38">-&gt;</operator><name pos:start="1213:39" pos:end="1213:42">args</name><index pos:start="1213:43" pos:end="1213:45">[<expr pos:start="1213:44" pos:end="1213:44"><literal type="number" pos:start="1213:44" pos:end="1213:44">3</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1215:19" pos:end="1219:17">else <block pos:start="1215:24" pos:end="1219:17">{<block_content pos:start="1217:21" pos:end="1217:41">

                    <expr_stmt pos:start="1217:21" pos:end="1217:41"><expr pos:start="1217:21" pos:end="1217:40"><call pos:start="1217:21" pos:end="1217:40"><name pos:start="1217:21" pos:end="1217:33">tcg_op_remove</name><argument_list pos:start="1217:34" pos:end="1217:40">(<argument pos:start="1217:35" pos:end="1217:35"><expr pos:start="1217:35" pos:end="1217:35"><name pos:start="1217:35" pos:end="1217:35">s</name></expr></argument>, <argument pos:start="1217:38" pos:end="1217:39"><expr pos:start="1217:38" pos:end="1217:39"><name pos:start="1217:38" pos:end="1217:39">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="1221:17" pos:end="1221:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1225:13" pos:end="1225:28">goto <name pos:start="1225:18" pos:end="1225:27">do_default</name>;</goto>



        <expr_stmt pos:start="1229:9" pos:end="1233:69"><expr pos:start="1229:9" pos:end="1233:68"><call pos:start="1229:9" pos:end="1229:30"><name pos:start="1229:9" pos:end="1229:21">CASE_OP_32_64</name><argument_list pos:start="1229:22" pos:end="1229:30">(<argument pos:start="1229:23" pos:end="1229:29"><expr pos:start="1229:23" pos:end="1229:29"><name pos:start="1229:23" pos:end="1229:29">movcond</name></expr></argument>)</argument_list></call><operator pos:start="1229:31" pos:end="1229:31">:</operator>

            <name pos:start="1231:13" pos:end="1231:15">tmp</name> <operator pos:start="1231:17" pos:end="1231:17">=</operator> <call pos:start="1231:19" pos:end="1233:68"><name pos:start="1231:19" pos:end="1231:42">do_constant_folding_cond</name><argument_list pos:start="1231:43" pos:end="1233:68">(<argument pos:start="1231:44" pos:end="1231:46"><expr pos:start="1231:44" pos:end="1231:46"><name pos:start="1231:44" pos:end="1231:46">opc</name></expr></argument>, <argument pos:start="1231:49" pos:end="1231:59"><expr pos:start="1231:49" pos:end="1231:59"><name pos:start="1231:49" pos:end="1231:59"><name pos:start="1231:49" pos:end="1231:50">op</name><operator pos:start="1231:51" pos:end="1231:52">-&gt;</operator><name pos:start="1231:53" pos:end="1231:56">args</name><index pos:start="1231:57" pos:end="1231:59">[<expr pos:start="1231:58" pos:end="1231:58"><literal type="number" pos:start="1231:58" pos:end="1231:58">1</literal></expr>]</index></name></expr></argument>,

                                           <argument pos:start="1233:44" pos:end="1233:54"><expr pos:start="1233:44" pos:end="1233:54"><name pos:start="1233:44" pos:end="1233:54"><name pos:start="1233:44" pos:end="1233:45">op</name><operator pos:start="1233:46" pos:end="1233:47">-&gt;</operator><name pos:start="1233:48" pos:end="1233:51">args</name><index pos:start="1233:52" pos:end="1233:54">[<expr pos:start="1233:53" pos:end="1233:53"><literal type="number" pos:start="1233:53" pos:end="1233:53">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1233:57" pos:end="1233:67"><expr pos:start="1233:57" pos:end="1233:67"><name pos:start="1233:57" pos:end="1233:67"><name pos:start="1233:57" pos:end="1233:58">op</name><operator pos:start="1233:59" pos:end="1233:60">-&gt;</operator><name pos:start="1233:61" pos:end="1233:64">args</name><index pos:start="1233:65" pos:end="1233:67">[<expr pos:start="1233:66" pos:end="1233:66"><literal type="number" pos:start="1233:66" pos:end="1233:66">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1235:13" pos:end="1241:13"><if pos:start="1235:13" pos:end="1241:13">if <condition pos:start="1235:16" pos:end="1235:25">(<expr pos:start="1235:17" pos:end="1235:24"><name pos:start="1235:17" pos:end="1235:19">tmp</name> <operator pos:start="1235:21" pos:end="1235:22">!=</operator> <literal type="number" pos:start="1235:24" pos:end="1235:24">2</literal></expr>)</condition> <block pos:start="1235:27" pos:end="1241:13">{<block_content pos:start="1237:17" pos:end="1239:22">

                <expr_stmt pos:start="1237:17" pos:end="1237:69"><expr pos:start="1237:17" pos:end="1237:68"><call pos:start="1237:17" pos:end="1237:68"><name pos:start="1237:17" pos:end="1237:31">tcg_opt_gen_mov</name><argument_list pos:start="1237:32" pos:end="1237:68">(<argument pos:start="1237:33" pos:end="1237:33"><expr pos:start="1237:33" pos:end="1237:33"><name pos:start="1237:33" pos:end="1237:33">s</name></expr></argument>, <argument pos:start="1237:36" pos:end="1237:37"><expr pos:start="1237:36" pos:end="1237:37"><name pos:start="1237:36" pos:end="1237:37">op</name></expr></argument>, <argument pos:start="1237:40" pos:end="1237:50"><expr pos:start="1237:40" pos:end="1237:50"><name pos:start="1237:40" pos:end="1237:50"><name pos:start="1237:40" pos:end="1237:41">op</name><operator pos:start="1237:42" pos:end="1237:43">-&gt;</operator><name pos:start="1237:44" pos:end="1237:47">args</name><index pos:start="1237:48" pos:end="1237:50">[<expr pos:start="1237:49" pos:end="1237:49"><literal type="number" pos:start="1237:49" pos:end="1237:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1237:53" pos:end="1237:67"><expr pos:start="1237:53" pos:end="1237:67"><name pos:start="1237:53" pos:end="1237:67"><name pos:start="1237:53" pos:end="1237:54">op</name><operator pos:start="1237:55" pos:end="1237:56">-&gt;</operator><name pos:start="1237:57" pos:end="1237:60">args</name><index pos:start="1237:61" pos:end="1237:67">[<expr pos:start="1237:62" pos:end="1237:66"><literal type="number" pos:start="1237:62" pos:end="1237:63">4</literal><operator pos:start="1237:63" pos:end="1237:63">-</operator><name pos:start="1237:64" pos:end="1237:66">tmp</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1239:17" pos:end="1239:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1243:13" pos:end="1271:13"><if pos:start="1243:13" pos:end="1271:13">if <condition pos:start="1243:16" pos:end="1243:71">(<expr pos:start="1243:17" pos:end="1243:70"><call pos:start="1243:17" pos:end="1243:41"><name pos:start="1243:17" pos:end="1243:28">arg_is_const</name><argument_list pos:start="1243:29" pos:end="1243:41">(<argument pos:start="1243:30" pos:end="1243:40"><expr pos:start="1243:30" pos:end="1243:40"><name pos:start="1243:30" pos:end="1243:40"><name pos:start="1243:30" pos:end="1243:31">op</name><operator pos:start="1243:32" pos:end="1243:33">-&gt;</operator><name pos:start="1243:34" pos:end="1243:37">args</name><index pos:start="1243:38" pos:end="1243:40">[<expr pos:start="1243:39" pos:end="1243:39"><literal type="number" pos:start="1243:39" pos:end="1243:39">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1243:43" pos:end="1243:44">&amp;&amp;</operator> <call pos:start="1243:46" pos:end="1243:70"><name pos:start="1243:46" pos:end="1243:57">arg_is_const</name><argument_list pos:start="1243:58" pos:end="1243:70">(<argument pos:start="1243:59" pos:end="1243:69"><expr pos:start="1243:59" pos:end="1243:69"><name pos:start="1243:59" pos:end="1243:69"><name pos:start="1243:59" pos:end="1243:60">op</name><operator pos:start="1243:61" pos:end="1243:62">-&gt;</operator><name pos:start="1243:63" pos:end="1243:66">args</name><index pos:start="1243:67" pos:end="1243:69">[<expr pos:start="1243:68" pos:end="1243:68"><literal type="number" pos:start="1243:68" pos:end="1243:68">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1243:73" pos:end="1271:13">{<block_content pos:start="1245:17" pos:end="1269:29">

                <decl_stmt pos:start="1245:17" pos:end="1245:65"><decl pos:start="1245:17" pos:end="1245:64"><type pos:start="1245:17" pos:end="1245:32"><name pos:start="1245:17" pos:end="1245:32">tcg_target_ulong</name></type> <name pos:start="1245:34" pos:end="1245:35">tv</name> <init pos:start="1245:37" pos:end="1245:64">= <expr pos:start="1245:39" pos:end="1245:64"><call pos:start="1245:39" pos:end="1245:59"><name pos:start="1245:39" pos:end="1245:46">arg_info</name><argument_list pos:start="1245:47" pos:end="1245:59">(<argument pos:start="1245:48" pos:end="1245:58"><expr pos:start="1245:48" pos:end="1245:58"><name pos:start="1245:48" pos:end="1245:58"><name pos:start="1245:48" pos:end="1245:49">op</name><operator pos:start="1245:50" pos:end="1245:51">-&gt;</operator><name pos:start="1245:52" pos:end="1245:55">args</name><index pos:start="1245:56" pos:end="1245:58">[<expr pos:start="1245:57" pos:end="1245:57"><literal type="number" pos:start="1245:57" pos:end="1245:57">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1245:60" pos:end="1245:61">-&gt;</operator><name pos:start="1245:62" pos:end="1245:64">val</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1247:17" pos:end="1247:65"><decl pos:start="1247:17" pos:end="1247:64"><type pos:start="1247:17" pos:end="1247:32"><name pos:start="1247:17" pos:end="1247:32">tcg_target_ulong</name></type> <name pos:start="1247:34" pos:end="1247:35">fv</name> <init pos:start="1247:37" pos:end="1247:64">= <expr pos:start="1247:39" pos:end="1247:64"><call pos:start="1247:39" pos:end="1247:59"><name pos:start="1247:39" pos:end="1247:46">arg_info</name><argument_list pos:start="1247:47" pos:end="1247:59">(<argument pos:start="1247:48" pos:end="1247:58"><expr pos:start="1247:48" pos:end="1247:58"><name pos:start="1247:48" pos:end="1247:58"><name pos:start="1247:48" pos:end="1247:49">op</name><operator pos:start="1247:50" pos:end="1247:51">-&gt;</operator><name pos:start="1247:52" pos:end="1247:55">args</name><index pos:start="1247:56" pos:end="1247:58">[<expr pos:start="1247:57" pos:end="1247:57"><literal type="number" pos:start="1247:57" pos:end="1247:57">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1247:60" pos:end="1247:61">-&gt;</operator><name pos:start="1247:62" pos:end="1247:64">val</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1249:17" pos:end="1249:43"><decl pos:start="1249:17" pos:end="1249:42"><type pos:start="1249:17" pos:end="1249:23"><name pos:start="1249:17" pos:end="1249:23">TCGCond</name></type> <name pos:start="1249:25" pos:end="1249:28">cond</name> <init pos:start="1249:30" pos:end="1249:42">= <expr pos:start="1249:32" pos:end="1249:42"><name pos:start="1249:32" pos:end="1249:42"><name pos:start="1249:32" pos:end="1249:33">op</name><operator pos:start="1249:34" pos:end="1249:35">-&gt;</operator><name pos:start="1249:36" pos:end="1249:39">args</name><index pos:start="1249:40" pos:end="1249:42">[<expr pos:start="1249:41" pos:end="1249:41"><literal type="number" pos:start="1249:41" pos:end="1249:41">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="1251:17" pos:end="1259:17"><if pos:start="1251:17" pos:end="1255:17">if <condition pos:start="1251:20" pos:end="1251:39">(<expr pos:start="1251:21" pos:end="1251:38"><name pos:start="1251:21" pos:end="1251:22">fv</name> <operator pos:start="1251:24" pos:end="1251:25">==</operator> <literal type="number" pos:start="1251:27" pos:end="1251:27">1</literal> <operator pos:start="1251:29" pos:end="1251:30">&amp;&amp;</operator> <name pos:start="1251:32" pos:end="1251:33">tv</name> <operator pos:start="1251:35" pos:end="1251:36">==</operator> <literal type="number" pos:start="1251:38" pos:end="1251:38">0</literal></expr>)</condition> <block pos:start="1251:41" pos:end="1255:17">{<block_content pos:start="1253:21" pos:end="1253:49">

                    <expr_stmt pos:start="1253:21" pos:end="1253:49"><expr pos:start="1253:21" pos:end="1253:48"><name pos:start="1253:21" pos:end="1253:24">cond</name> <operator pos:start="1253:26" pos:end="1253:26">=</operator> <call pos:start="1253:28" pos:end="1253:48"><name pos:start="1253:28" pos:end="1253:42">tcg_invert_cond</name><argument_list pos:start="1253:43" pos:end="1253:48">(<argument pos:start="1253:44" pos:end="1253:47"><expr pos:start="1253:44" pos:end="1253:47"><name pos:start="1253:44" pos:end="1253:47">cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1255:19" pos:end="1259:17">else if <condition pos:start="1255:27" pos:end="1255:49">(<expr pos:start="1255:28" pos:end="1255:48"><operator pos:start="1255:28" pos:end="1255:28">!</operator><operator pos:start="1255:29" pos:end="1255:29">(</operator><name pos:start="1255:30" pos:end="1255:31">tv</name> <operator pos:start="1255:33" pos:end="1255:34">==</operator> <literal type="number" pos:start="1255:36" pos:end="1255:36">1</literal> <operator pos:start="1255:38" pos:end="1255:39">&amp;&amp;</operator> <name pos:start="1255:41" pos:end="1255:42">fv</name> <operator pos:start="1255:44" pos:end="1255:45">==</operator> <literal type="number" pos:start="1255:47" pos:end="1255:47">0</literal><operator pos:start="1255:48" pos:end="1255:48">)</operator></expr>)</condition> <block pos:start="1255:51" pos:end="1259:17">{<block_content pos:start="1257:21" pos:end="1257:36">

                    <goto pos:start="1257:21" pos:end="1257:36">goto <name pos:start="1257:26" pos:end="1257:35">do_default</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1261:17" pos:end="1261:35"><expr pos:start="1261:17" pos:end="1261:34"><name pos:start="1261:17" pos:end="1261:27"><name pos:start="1261:17" pos:end="1261:18">op</name><operator pos:start="1261:19" pos:end="1261:20">-&gt;</operator><name pos:start="1261:21" pos:end="1261:24">args</name><index pos:start="1261:25" pos:end="1261:27">[<expr pos:start="1261:26" pos:end="1261:26"><literal type="number" pos:start="1261:26" pos:end="1261:26">3</literal></expr>]</index></name> <operator pos:start="1261:29" pos:end="1261:29">=</operator> <name pos:start="1261:31" pos:end="1261:34">cond</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1263:17" pos:end="1267:57"><expr pos:start="1263:17" pos:end="1267:56"><name pos:start="1263:17" pos:end="1263:23"><name pos:start="1263:17" pos:end="1263:18">op</name><operator pos:start="1263:19" pos:end="1263:20">-&gt;</operator><name pos:start="1263:21" pos:end="1263:23">opc</name></name> <operator pos:start="1263:25" pos:end="1263:25">=</operator> <name pos:start="1263:27" pos:end="1263:29">opc</name> <operator pos:start="1263:31" pos:end="1263:31">=</operator> <operator pos:start="1263:33" pos:end="1263:33">(</operator><ternary pos:start="1263:34" pos:end="1267:55"><condition pos:start="1263:34" pos:end="1265:34"><expr pos:start="1263:34" pos:end="1263:60"><name pos:start="1263:34" pos:end="1263:36">opc</name> <operator pos:start="1263:38" pos:end="1263:39">==</operator> <name pos:start="1263:41" pos:end="1263:60">INDEX_op_movcond_i32</name></expr>

                                 ?</condition><then pos:start="1265:36" pos:end="1265:55"> <expr pos:start="1265:36" pos:end="1265:55"><name pos:start="1265:36" pos:end="1265:55">INDEX_op_setcond_i32</name></expr>

                                 </then><else pos:start="1267:34" pos:end="1267:55">: <expr pos:start="1267:36" pos:end="1267:55"><name pos:start="1267:36" pos:end="1267:55">INDEX_op_setcond_i64</name></expr></else></ternary><operator pos:start="1267:56" pos:end="1267:56">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1269:17" pos:end="1269:29"><expr pos:start="1269:17" pos:end="1269:28"><name pos:start="1269:17" pos:end="1269:24">nb_iargs</name> <operator pos:start="1269:26" pos:end="1269:26">=</operator> <literal type="number" pos:start="1269:28" pos:end="1269:28">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1273:13" pos:end="1273:28">goto <name pos:start="1273:18" pos:end="1273:27">do_default</name>;</goto>



        <case pos:start="1277:9" pos:end="1277:31">case <expr pos:start="1277:14" pos:end="1277:30"><name pos:start="1277:14" pos:end="1277:30">INDEX_op_add2_i32</name></expr>:</case>

        <case pos:start="1279:9" pos:end="1279:31">case <expr pos:start="1279:14" pos:end="1279:30"><name pos:start="1279:14" pos:end="1279:30">INDEX_op_sub2_i32</name></expr>:</case>

            <if_stmt pos:start="1281:13" pos:end="1331:13"><if pos:start="1281:13" pos:end="1331:13">if <condition pos:start="1281:16" pos:end="1283:74">(<expr pos:start="1281:17" pos:end="1283:73"><call pos:start="1281:17" pos:end="1281:41"><name pos:start="1281:17" pos:end="1281:28">arg_is_const</name><argument_list pos:start="1281:29" pos:end="1281:41">(<argument pos:start="1281:30" pos:end="1281:40"><expr pos:start="1281:30" pos:end="1281:40"><name pos:start="1281:30" pos:end="1281:40"><name pos:start="1281:30" pos:end="1281:31">op</name><operator pos:start="1281:32" pos:end="1281:33">-&gt;</operator><name pos:start="1281:34" pos:end="1281:37">args</name><index pos:start="1281:38" pos:end="1281:40">[<expr pos:start="1281:39" pos:end="1281:39"><literal type="number" pos:start="1281:39" pos:end="1281:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1281:43" pos:end="1281:44">&amp;&amp;</operator> <call pos:start="1281:46" pos:end="1281:70"><name pos:start="1281:46" pos:end="1281:57">arg_is_const</name><argument_list pos:start="1281:58" pos:end="1281:70">(<argument pos:start="1281:59" pos:end="1281:69"><expr pos:start="1281:59" pos:end="1281:69"><name pos:start="1281:59" pos:end="1281:69"><name pos:start="1281:59" pos:end="1281:60">op</name><operator pos:start="1281:61" pos:end="1281:62">-&gt;</operator><name pos:start="1281:63" pos:end="1281:66">args</name><index pos:start="1281:67" pos:end="1281:69">[<expr pos:start="1281:68" pos:end="1281:68"><literal type="number" pos:start="1281:68" pos:end="1281:68">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                <operator pos:start="1283:17" pos:end="1283:18">&amp;&amp;</operator> <call pos:start="1283:20" pos:end="1283:44"><name pos:start="1283:20" pos:end="1283:31">arg_is_const</name><argument_list pos:start="1283:32" pos:end="1283:44">(<argument pos:start="1283:33" pos:end="1283:43"><expr pos:start="1283:33" pos:end="1283:43"><name pos:start="1283:33" pos:end="1283:43"><name pos:start="1283:33" pos:end="1283:34">op</name><operator pos:start="1283:35" pos:end="1283:36">-&gt;</operator><name pos:start="1283:37" pos:end="1283:40">args</name><index pos:start="1283:41" pos:end="1283:43">[<expr pos:start="1283:42" pos:end="1283:42"><literal type="number" pos:start="1283:42" pos:end="1283:42">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1283:46" pos:end="1283:47">&amp;&amp;</operator> <call pos:start="1283:49" pos:end="1283:73"><name pos:start="1283:49" pos:end="1283:60">arg_is_const</name><argument_list pos:start="1283:61" pos:end="1283:73">(<argument pos:start="1283:62" pos:end="1283:72"><expr pos:start="1283:62" pos:end="1283:72"><name pos:start="1283:62" pos:end="1283:72"><name pos:start="1283:62" pos:end="1283:63">op</name><operator pos:start="1283:64" pos:end="1283:65">-&gt;</operator><name pos:start="1283:66" pos:end="1283:69">args</name><index pos:start="1283:70" pos:end="1283:72">[<expr pos:start="1283:71" pos:end="1283:71"><literal type="number" pos:start="1283:71" pos:end="1283:71">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1283:76" pos:end="1331:13">{<block_content pos:start="1285:17" pos:end="1329:22">

                <decl_stmt pos:start="1285:17" pos:end="1285:57"><decl pos:start="1285:17" pos:end="1285:56"><type pos:start="1285:17" pos:end="1285:24"><name pos:start="1285:17" pos:end="1285:24">uint32_t</name></type> <name pos:start="1285:26" pos:end="1285:27">al</name> <init pos:start="1285:29" pos:end="1285:56">= <expr pos:start="1285:31" pos:end="1285:56"><call pos:start="1285:31" pos:end="1285:51"><name pos:start="1285:31" pos:end="1285:38">arg_info</name><argument_list pos:start="1285:39" pos:end="1285:51">(<argument pos:start="1285:40" pos:end="1285:50"><expr pos:start="1285:40" pos:end="1285:50"><name pos:start="1285:40" pos:end="1285:50"><name pos:start="1285:40" pos:end="1285:41">op</name><operator pos:start="1285:42" pos:end="1285:43">-&gt;</operator><name pos:start="1285:44" pos:end="1285:47">args</name><index pos:start="1285:48" pos:end="1285:50">[<expr pos:start="1285:49" pos:end="1285:49"><literal type="number" pos:start="1285:49" pos:end="1285:49">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1285:52" pos:end="1285:53">-&gt;</operator><name pos:start="1285:54" pos:end="1285:56">val</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1287:17" pos:end="1287:57"><decl pos:start="1287:17" pos:end="1287:56"><type pos:start="1287:17" pos:end="1287:24"><name pos:start="1287:17" pos:end="1287:24">uint32_t</name></type> <name pos:start="1287:26" pos:end="1287:27">ah</name> <init pos:start="1287:29" pos:end="1287:56">= <expr pos:start="1287:31" pos:end="1287:56"><call pos:start="1287:31" pos:end="1287:51"><name pos:start="1287:31" pos:end="1287:38">arg_info</name><argument_list pos:start="1287:39" pos:end="1287:51">(<argument pos:start="1287:40" pos:end="1287:50"><expr pos:start="1287:40" pos:end="1287:50"><name pos:start="1287:40" pos:end="1287:50"><name pos:start="1287:40" pos:end="1287:41">op</name><operator pos:start="1287:42" pos:end="1287:43">-&gt;</operator><name pos:start="1287:44" pos:end="1287:47">args</name><index pos:start="1287:48" pos:end="1287:50">[<expr pos:start="1287:49" pos:end="1287:49"><literal type="number" pos:start="1287:49" pos:end="1287:49">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1287:52" pos:end="1287:53">-&gt;</operator><name pos:start="1287:54" pos:end="1287:56">val</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1289:17" pos:end="1289:57"><decl pos:start="1289:17" pos:end="1289:56"><type pos:start="1289:17" pos:end="1289:24"><name pos:start="1289:17" pos:end="1289:24">uint32_t</name></type> <name pos:start="1289:26" pos:end="1289:27">bl</name> <init pos:start="1289:29" pos:end="1289:56">= <expr pos:start="1289:31" pos:end="1289:56"><call pos:start="1289:31" pos:end="1289:51"><name pos:start="1289:31" pos:end="1289:38">arg_info</name><argument_list pos:start="1289:39" pos:end="1289:51">(<argument pos:start="1289:40" pos:end="1289:50"><expr pos:start="1289:40" pos:end="1289:50"><name pos:start="1289:40" pos:end="1289:50"><name pos:start="1289:40" pos:end="1289:41">op</name><operator pos:start="1289:42" pos:end="1289:43">-&gt;</operator><name pos:start="1289:44" pos:end="1289:47">args</name><index pos:start="1289:48" pos:end="1289:50">[<expr pos:start="1289:49" pos:end="1289:49"><literal type="number" pos:start="1289:49" pos:end="1289:49">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1289:52" pos:end="1289:53">-&gt;</operator><name pos:start="1289:54" pos:end="1289:56">val</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1291:17" pos:end="1291:57"><decl pos:start="1291:17" pos:end="1291:56"><type pos:start="1291:17" pos:end="1291:24"><name pos:start="1291:17" pos:end="1291:24">uint32_t</name></type> <name pos:start="1291:26" pos:end="1291:27">bh</name> <init pos:start="1291:29" pos:end="1291:56">= <expr pos:start="1291:31" pos:end="1291:56"><call pos:start="1291:31" pos:end="1291:51"><name pos:start="1291:31" pos:end="1291:38">arg_info</name><argument_list pos:start="1291:39" pos:end="1291:51">(<argument pos:start="1291:40" pos:end="1291:50"><expr pos:start="1291:40" pos:end="1291:50"><name pos:start="1291:40" pos:end="1291:50"><name pos:start="1291:40" pos:end="1291:41">op</name><operator pos:start="1291:42" pos:end="1291:43">-&gt;</operator><name pos:start="1291:44" pos:end="1291:47">args</name><index pos:start="1291:48" pos:end="1291:50">[<expr pos:start="1291:49" pos:end="1291:49"><literal type="number" pos:start="1291:49" pos:end="1291:49">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1291:52" pos:end="1291:53">-&gt;</operator><name pos:start="1291:54" pos:end="1291:56">val</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1293:17" pos:end="1293:55"><decl pos:start="1293:17" pos:end="1293:54"><type pos:start="1293:17" pos:end="1293:24"><name pos:start="1293:17" pos:end="1293:24">uint64_t</name></type> <name pos:start="1293:26" pos:end="1293:26">a</name> <init pos:start="1293:28" pos:end="1293:54">= <expr pos:start="1293:30" pos:end="1293:54"><operator pos:start="1293:30" pos:end="1293:30">(</operator><operator pos:start="1293:31" pos:end="1293:31">(</operator><name pos:start="1293:32" pos:end="1293:39">uint64_t</name><operator pos:start="1293:40" pos:end="1293:40">)</operator><name pos:start="1293:41" pos:end="1293:42">ah</name> <operator pos:start="1293:44" pos:end="1293:45">&lt;&lt;</operator> <literal type="number" pos:start="1293:47" pos:end="1293:48">32</literal><operator pos:start="1293:49" pos:end="1293:49">)</operator> <operator pos:start="1293:51" pos:end="1293:51">|</operator> <name pos:start="1293:53" pos:end="1293:54">al</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1295:17" pos:end="1295:55"><decl pos:start="1295:17" pos:end="1295:54"><type pos:start="1295:17" pos:end="1295:24"><name pos:start="1295:17" pos:end="1295:24">uint64_t</name></type> <name pos:start="1295:26" pos:end="1295:26">b</name> <init pos:start="1295:28" pos:end="1295:54">= <expr pos:start="1295:30" pos:end="1295:54"><operator pos:start="1295:30" pos:end="1295:30">(</operator><operator pos:start="1295:31" pos:end="1295:31">(</operator><name pos:start="1295:32" pos:end="1295:39">uint64_t</name><operator pos:start="1295:40" pos:end="1295:40">)</operator><name pos:start="1295:41" pos:end="1295:42">bh</name> <operator pos:start="1295:44" pos:end="1295:45">&lt;&lt;</operator> <literal type="number" pos:start="1295:47" pos:end="1295:48">32</literal><operator pos:start="1295:49" pos:end="1295:49">)</operator> <operator pos:start="1295:51" pos:end="1295:51">|</operator> <name pos:start="1295:53" pos:end="1295:54">bl</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1297:17" pos:end="1297:30"><decl pos:start="1297:17" pos:end="1297:25"><type pos:start="1297:17" pos:end="1297:22"><name pos:start="1297:17" pos:end="1297:22">TCGArg</name></type> <name pos:start="1297:24" pos:end="1297:25">rl</name></decl>, <decl pos:start="1297:28" pos:end="1297:29"><type ref="prev" pos:start="1297:17" pos:end="1297:22"/><name pos:start="1297:28" pos:end="1297:29">rh</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1299:17" pos:end="1299:79"><decl pos:start="1299:17" pos:end="1299:78"><type pos:start="1299:17" pos:end="1299:23"><name pos:start="1299:17" pos:end="1299:21">TCGOp</name> <modifier pos:start="1299:23" pos:end="1299:23">*</modifier></type><name pos:start="1299:24" pos:end="1299:26">op2</name> <init pos:start="1299:28" pos:end="1299:78">= <expr pos:start="1299:30" pos:end="1299:78"><call pos:start="1299:30" pos:end="1299:78"><name pos:start="1299:30" pos:end="1299:49">tcg_op_insert_before</name><argument_list pos:start="1299:50" pos:end="1299:78">(<argument pos:start="1299:51" pos:end="1299:51"><expr pos:start="1299:51" pos:end="1299:51"><name pos:start="1299:51" pos:end="1299:51">s</name></expr></argument>, <argument pos:start="1299:54" pos:end="1299:55"><expr pos:start="1299:54" pos:end="1299:55"><name pos:start="1299:54" pos:end="1299:55">op</name></expr></argument>, <argument pos:start="1299:58" pos:end="1299:74"><expr pos:start="1299:58" pos:end="1299:74"><name pos:start="1299:58" pos:end="1299:74">INDEX_op_movi_i32</name></expr></argument>, <argument pos:start="1299:77" pos:end="1299:77"><expr pos:start="1299:77" pos:end="1299:77"><literal type="number" pos:start="1299:77" pos:end="1299:77">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="1303:17" pos:end="1311:17"><if pos:start="1303:17" pos:end="1307:17">if <condition pos:start="1303:20" pos:end="1303:45">(<expr pos:start="1303:21" pos:end="1303:44"><name pos:start="1303:21" pos:end="1303:23">opc</name> <operator pos:start="1303:25" pos:end="1303:26">==</operator> <name pos:start="1303:28" pos:end="1303:44">INDEX_op_add2_i32</name></expr>)</condition> <block pos:start="1303:47" pos:end="1307:17">{<block_content pos:start="1305:21" pos:end="1305:27">

                    <expr_stmt pos:start="1305:21" pos:end="1305:27"><expr pos:start="1305:21" pos:end="1305:26"><name pos:start="1305:21" pos:end="1305:21">a</name> <operator pos:start="1305:23" pos:end="1305:24">+=</operator> <name pos:start="1305:26" pos:end="1305:26">b</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1307:19" pos:end="1311:17">else <block pos:start="1307:24" pos:end="1311:17">{<block_content pos:start="1309:21" pos:end="1309:27">

                    <expr_stmt pos:start="1309:21" pos:end="1309:27"><expr pos:start="1309:21" pos:end="1309:26"><name pos:start="1309:21" pos:end="1309:21">a</name> <operator pos:start="1309:23" pos:end="1309:24">-=</operator> <name pos:start="1309:26" pos:end="1309:26">b</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="1315:17" pos:end="1315:33"><expr pos:start="1315:17" pos:end="1315:32"><name pos:start="1315:17" pos:end="1315:18">rl</name> <operator pos:start="1315:20" pos:end="1315:20">=</operator> <name pos:start="1315:22" pos:end="1315:32"><name pos:start="1315:22" pos:end="1315:23">op</name><operator pos:start="1315:24" pos:end="1315:25">-&gt;</operator><name pos:start="1315:26" pos:end="1315:29">args</name><index pos:start="1315:30" pos:end="1315:32">[<expr pos:start="1315:31" pos:end="1315:31"><literal type="number" pos:start="1315:31" pos:end="1315:31">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1317:17" pos:end="1317:33"><expr pos:start="1317:17" pos:end="1317:32"><name pos:start="1317:17" pos:end="1317:18">rh</name> <operator pos:start="1317:20" pos:end="1317:20">=</operator> <name pos:start="1317:22" pos:end="1317:32"><name pos:start="1317:22" pos:end="1317:23">op</name><operator pos:start="1317:24" pos:end="1317:25">-&gt;</operator><name pos:start="1317:26" pos:end="1317:29">args</name><index pos:start="1317:30" pos:end="1317:32">[<expr pos:start="1317:31" pos:end="1317:31"><literal type="number" pos:start="1317:31" pos:end="1317:31">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1319:17" pos:end="1319:56"><expr pos:start="1319:17" pos:end="1319:55"><call pos:start="1319:17" pos:end="1319:55"><name pos:start="1319:17" pos:end="1319:32">tcg_opt_gen_movi</name><argument_list pos:start="1319:33" pos:end="1319:55">(<argument pos:start="1319:34" pos:end="1319:34"><expr pos:start="1319:34" pos:end="1319:34"><name pos:start="1319:34" pos:end="1319:34">s</name></expr></argument>, <argument pos:start="1319:37" pos:end="1319:38"><expr pos:start="1319:37" pos:end="1319:38"><name pos:start="1319:37" pos:end="1319:38">op</name></expr></argument>, <argument pos:start="1319:41" pos:end="1319:42"><expr pos:start="1319:41" pos:end="1319:42"><name pos:start="1319:41" pos:end="1319:42">rl</name></expr></argument>, <argument pos:start="1319:45" pos:end="1319:54"><expr pos:start="1319:45" pos:end="1319:54"><operator pos:start="1319:45" pos:end="1319:45">(</operator><name pos:start="1319:46" pos:end="1319:52">int32_t</name><operator pos:start="1319:53" pos:end="1319:53">)</operator><name pos:start="1319:54" pos:end="1319:54">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1321:17" pos:end="1321:65"><expr pos:start="1321:17" pos:end="1321:64"><call pos:start="1321:17" pos:end="1321:64"><name pos:start="1321:17" pos:end="1321:32">tcg_opt_gen_movi</name><argument_list pos:start="1321:33" pos:end="1321:64">(<argument pos:start="1321:34" pos:end="1321:34"><expr pos:start="1321:34" pos:end="1321:34"><name pos:start="1321:34" pos:end="1321:34">s</name></expr></argument>, <argument pos:start="1321:37" pos:end="1321:39"><expr pos:start="1321:37" pos:end="1321:39"><name pos:start="1321:37" pos:end="1321:39">op2</name></expr></argument>, <argument pos:start="1321:42" pos:end="1321:43"><expr pos:start="1321:42" pos:end="1321:43"><name pos:start="1321:42" pos:end="1321:43">rh</name></expr></argument>, <argument pos:start="1321:46" pos:end="1321:63"><expr pos:start="1321:46" pos:end="1321:63"><operator pos:start="1321:46" pos:end="1321:46">(</operator><name pos:start="1321:47" pos:end="1321:53">int32_t</name><operator pos:start="1321:54" pos:end="1321:54">)</operator><operator pos:start="1321:55" pos:end="1321:55">(</operator><name pos:start="1321:56" pos:end="1321:56">a</name> <operator pos:start="1321:58" pos:end="1321:59">&gt;&gt;</operator> <literal type="number" pos:start="1321:61" pos:end="1321:62">32</literal><operator pos:start="1321:63" pos:end="1321:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="1325:17" pos:end="1325:76">/* We've done all we need to do with the movi.  Skip it.  */</comment>

                <expr_stmt pos:start="1327:17" pos:end="1327:36"><expr pos:start="1327:17" pos:end="1327:35"><name pos:start="1327:17" pos:end="1327:23">oi_next</name> <operator pos:start="1327:25" pos:end="1327:25">=</operator> <name pos:start="1327:27" pos:end="1327:35"><name pos:start="1327:27" pos:end="1327:29">op2</name><operator pos:start="1327:30" pos:end="1327:31">-&gt;</operator><name pos:start="1327:32" pos:end="1327:35">next</name></name></expr>;</expr_stmt>

                <break pos:start="1329:17" pos:end="1329:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1333:13" pos:end="1333:28">goto <name pos:start="1333:18" pos:end="1333:27">do_default</name>;</goto>



        <case pos:start="1337:9" pos:end="1337:32">case <expr pos:start="1337:14" pos:end="1337:31"><name pos:start="1337:14" pos:end="1337:31">INDEX_op_mulu2_i32</name></expr>:</case>

            <if_stmt pos:start="1339:13" pos:end="1369:13"><if pos:start="1339:13" pos:end="1369:13">if <condition pos:start="1339:16" pos:end="1339:71">(<expr pos:start="1339:17" pos:end="1339:70"><call pos:start="1339:17" pos:end="1339:41"><name pos:start="1339:17" pos:end="1339:28">arg_is_const</name><argument_list pos:start="1339:29" pos:end="1339:41">(<argument pos:start="1339:30" pos:end="1339:40"><expr pos:start="1339:30" pos:end="1339:40"><name pos:start="1339:30" pos:end="1339:40"><name pos:start="1339:30" pos:end="1339:31">op</name><operator pos:start="1339:32" pos:end="1339:33">-&gt;</operator><name pos:start="1339:34" pos:end="1339:37">args</name><index pos:start="1339:38" pos:end="1339:40">[<expr pos:start="1339:39" pos:end="1339:39"><literal type="number" pos:start="1339:39" pos:end="1339:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="1339:43" pos:end="1339:44">&amp;&amp;</operator> <call pos:start="1339:46" pos:end="1339:70"><name pos:start="1339:46" pos:end="1339:57">arg_is_const</name><argument_list pos:start="1339:58" pos:end="1339:70">(<argument pos:start="1339:59" pos:end="1339:69"><expr pos:start="1339:59" pos:end="1339:69"><name pos:start="1339:59" pos:end="1339:69"><name pos:start="1339:59" pos:end="1339:60">op</name><operator pos:start="1339:61" pos:end="1339:62">-&gt;</operator><name pos:start="1339:63" pos:end="1339:66">args</name><index pos:start="1339:67" pos:end="1339:69">[<expr pos:start="1339:68" pos:end="1339:68"><literal type="number" pos:start="1339:68" pos:end="1339:68">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1339:73" pos:end="1369:13">{<block_content pos:start="1341:17" pos:end="1367:22">

                <decl_stmt pos:start="1341:17" pos:end="1341:56"><decl pos:start="1341:17" pos:end="1341:55"><type pos:start="1341:17" pos:end="1341:24"><name pos:start="1341:17" pos:end="1341:24">uint32_t</name></type> <name pos:start="1341:26" pos:end="1341:26">a</name> <init pos:start="1341:28" pos:end="1341:55">= <expr pos:start="1341:30" pos:end="1341:55"><call pos:start="1341:30" pos:end="1341:50"><name pos:start="1341:30" pos:end="1341:37">arg_info</name><argument_list pos:start="1341:38" pos:end="1341:50">(<argument pos:start="1341:39" pos:end="1341:49"><expr pos:start="1341:39" pos:end="1341:49"><name pos:start="1341:39" pos:end="1341:49"><name pos:start="1341:39" pos:end="1341:40">op</name><operator pos:start="1341:41" pos:end="1341:42">-&gt;</operator><name pos:start="1341:43" pos:end="1341:46">args</name><index pos:start="1341:47" pos:end="1341:49">[<expr pos:start="1341:48" pos:end="1341:48"><literal type="number" pos:start="1341:48" pos:end="1341:48">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1341:51" pos:end="1341:52">-&gt;</operator><name pos:start="1341:53" pos:end="1341:55">val</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1343:17" pos:end="1343:56"><decl pos:start="1343:17" pos:end="1343:55"><type pos:start="1343:17" pos:end="1343:24"><name pos:start="1343:17" pos:end="1343:24">uint32_t</name></type> <name pos:start="1343:26" pos:end="1343:26">b</name> <init pos:start="1343:28" pos:end="1343:55">= <expr pos:start="1343:30" pos:end="1343:55"><call pos:start="1343:30" pos:end="1343:50"><name pos:start="1343:30" pos:end="1343:37">arg_info</name><argument_list pos:start="1343:38" pos:end="1343:50">(<argument pos:start="1343:39" pos:end="1343:49"><expr pos:start="1343:39" pos:end="1343:49"><name pos:start="1343:39" pos:end="1343:49"><name pos:start="1343:39" pos:end="1343:40">op</name><operator pos:start="1343:41" pos:end="1343:42">-&gt;</operator><name pos:start="1343:43" pos:end="1343:46">args</name><index pos:start="1343:47" pos:end="1343:49">[<expr pos:start="1343:48" pos:end="1343:48"><literal type="number" pos:start="1343:48" pos:end="1343:48">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1343:51" pos:end="1343:52">-&gt;</operator><name pos:start="1343:53" pos:end="1343:55">val</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1345:17" pos:end="1345:45"><decl pos:start="1345:17" pos:end="1345:44"><type pos:start="1345:17" pos:end="1345:24"><name pos:start="1345:17" pos:end="1345:24">uint64_t</name></type> <name pos:start="1345:26" pos:end="1345:26">r</name> <init pos:start="1345:28" pos:end="1345:44">= <expr pos:start="1345:30" pos:end="1345:44"><operator pos:start="1345:30" pos:end="1345:30">(</operator><name pos:start="1345:31" pos:end="1345:38">uint64_t</name><operator pos:start="1345:39" pos:end="1345:39">)</operator><name pos:start="1345:40" pos:end="1345:40">a</name> <operator pos:start="1345:42" pos:end="1345:42">*</operator> <name pos:start="1345:44" pos:end="1345:44">b</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1347:17" pos:end="1347:30"><decl pos:start="1347:17" pos:end="1347:25"><type pos:start="1347:17" pos:end="1347:22"><name pos:start="1347:17" pos:end="1347:22">TCGArg</name></type> <name pos:start="1347:24" pos:end="1347:25">rl</name></decl>, <decl pos:start="1347:28" pos:end="1347:29"><type ref="prev" pos:start="1347:17" pos:end="1347:22"/><name pos:start="1347:28" pos:end="1347:29">rh</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1349:17" pos:end="1349:79"><decl pos:start="1349:17" pos:end="1349:78"><type pos:start="1349:17" pos:end="1349:23"><name pos:start="1349:17" pos:end="1349:21">TCGOp</name> <modifier pos:start="1349:23" pos:end="1349:23">*</modifier></type><name pos:start="1349:24" pos:end="1349:26">op2</name> <init pos:start="1349:28" pos:end="1349:78">= <expr pos:start="1349:30" pos:end="1349:78"><call pos:start="1349:30" pos:end="1349:78"><name pos:start="1349:30" pos:end="1349:49">tcg_op_insert_before</name><argument_list pos:start="1349:50" pos:end="1349:78">(<argument pos:start="1349:51" pos:end="1349:51"><expr pos:start="1349:51" pos:end="1349:51"><name pos:start="1349:51" pos:end="1349:51">s</name></expr></argument>, <argument pos:start="1349:54" pos:end="1349:55"><expr pos:start="1349:54" pos:end="1349:55"><name pos:start="1349:54" pos:end="1349:55">op</name></expr></argument>, <argument pos:start="1349:58" pos:end="1349:74"><expr pos:start="1349:58" pos:end="1349:74"><name pos:start="1349:58" pos:end="1349:74">INDEX_op_movi_i32</name></expr></argument>, <argument pos:start="1349:77" pos:end="1349:77"><expr pos:start="1349:77" pos:end="1349:77"><literal type="number" pos:start="1349:77" pos:end="1349:77">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="1353:17" pos:end="1353:33"><expr pos:start="1353:17" pos:end="1353:32"><name pos:start="1353:17" pos:end="1353:18">rl</name> <operator pos:start="1353:20" pos:end="1353:20">=</operator> <name pos:start="1353:22" pos:end="1353:32"><name pos:start="1353:22" pos:end="1353:23">op</name><operator pos:start="1353:24" pos:end="1353:25">-&gt;</operator><name pos:start="1353:26" pos:end="1353:29">args</name><index pos:start="1353:30" pos:end="1353:32">[<expr pos:start="1353:31" pos:end="1353:31"><literal type="number" pos:start="1353:31" pos:end="1353:31">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1355:17" pos:end="1355:33"><expr pos:start="1355:17" pos:end="1355:32"><name pos:start="1355:17" pos:end="1355:18">rh</name> <operator pos:start="1355:20" pos:end="1355:20">=</operator> <name pos:start="1355:22" pos:end="1355:32"><name pos:start="1355:22" pos:end="1355:23">op</name><operator pos:start="1355:24" pos:end="1355:25">-&gt;</operator><name pos:start="1355:26" pos:end="1355:29">args</name><index pos:start="1355:30" pos:end="1355:32">[<expr pos:start="1355:31" pos:end="1355:31"><literal type="number" pos:start="1355:31" pos:end="1355:31">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1357:17" pos:end="1357:56"><expr pos:start="1357:17" pos:end="1357:55"><call pos:start="1357:17" pos:end="1357:55"><name pos:start="1357:17" pos:end="1357:32">tcg_opt_gen_movi</name><argument_list pos:start="1357:33" pos:end="1357:55">(<argument pos:start="1357:34" pos:end="1357:34"><expr pos:start="1357:34" pos:end="1357:34"><name pos:start="1357:34" pos:end="1357:34">s</name></expr></argument>, <argument pos:start="1357:37" pos:end="1357:38"><expr pos:start="1357:37" pos:end="1357:38"><name pos:start="1357:37" pos:end="1357:38">op</name></expr></argument>, <argument pos:start="1357:41" pos:end="1357:42"><expr pos:start="1357:41" pos:end="1357:42"><name pos:start="1357:41" pos:end="1357:42">rl</name></expr></argument>, <argument pos:start="1357:45" pos:end="1357:54"><expr pos:start="1357:45" pos:end="1357:54"><operator pos:start="1357:45" pos:end="1357:45">(</operator><name pos:start="1357:46" pos:end="1357:52">int32_t</name><operator pos:start="1357:53" pos:end="1357:53">)</operator><name pos:start="1357:54" pos:end="1357:54">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1359:17" pos:end="1359:65"><expr pos:start="1359:17" pos:end="1359:64"><call pos:start="1359:17" pos:end="1359:64"><name pos:start="1359:17" pos:end="1359:32">tcg_opt_gen_movi</name><argument_list pos:start="1359:33" pos:end="1359:64">(<argument pos:start="1359:34" pos:end="1359:34"><expr pos:start="1359:34" pos:end="1359:34"><name pos:start="1359:34" pos:end="1359:34">s</name></expr></argument>, <argument pos:start="1359:37" pos:end="1359:39"><expr pos:start="1359:37" pos:end="1359:39"><name pos:start="1359:37" pos:end="1359:39">op2</name></expr></argument>, <argument pos:start="1359:42" pos:end="1359:43"><expr pos:start="1359:42" pos:end="1359:43"><name pos:start="1359:42" pos:end="1359:43">rh</name></expr></argument>, <argument pos:start="1359:46" pos:end="1359:63"><expr pos:start="1359:46" pos:end="1359:63"><operator pos:start="1359:46" pos:end="1359:46">(</operator><name pos:start="1359:47" pos:end="1359:53">int32_t</name><operator pos:start="1359:54" pos:end="1359:54">)</operator><operator pos:start="1359:55" pos:end="1359:55">(</operator><name pos:start="1359:56" pos:end="1359:56">r</name> <operator pos:start="1359:58" pos:end="1359:59">&gt;&gt;</operator> <literal type="number" pos:start="1359:61" pos:end="1359:62">32</literal><operator pos:start="1359:63" pos:end="1359:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="1363:17" pos:end="1363:76">/* We've done all we need to do with the movi.  Skip it.  */</comment>

                <expr_stmt pos:start="1365:17" pos:end="1365:36"><expr pos:start="1365:17" pos:end="1365:35"><name pos:start="1365:17" pos:end="1365:23">oi_next</name> <operator pos:start="1365:25" pos:end="1365:25">=</operator> <name pos:start="1365:27" pos:end="1365:35"><name pos:start="1365:27" pos:end="1365:29">op2</name><operator pos:start="1365:30" pos:end="1365:31">-&gt;</operator><name pos:start="1365:32" pos:end="1365:35">next</name></name></expr>;</expr_stmt>

                <break pos:start="1367:17" pos:end="1367:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1371:13" pos:end="1371:28">goto <name pos:start="1371:18" pos:end="1371:27">do_default</name>;</goto>



        <case pos:start="1375:9" pos:end="1375:34">case <expr pos:start="1375:14" pos:end="1375:33"><name pos:start="1375:14" pos:end="1375:33">INDEX_op_brcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="1377:13" pos:end="1379:57"><expr pos:start="1377:13" pos:end="1379:56"><name pos:start="1377:13" pos:end="1377:15">tmp</name> <operator pos:start="1377:17" pos:end="1377:17">=</operator> <call pos:start="1377:19" pos:end="1379:56"><name pos:start="1377:19" pos:end="1377:43">do_constant_folding_cond2</name><argument_list pos:start="1377:44" pos:end="1379:56">(<argument pos:start="1377:45" pos:end="1377:56"><expr pos:start="1377:45" pos:end="1377:56"><operator pos:start="1377:45" pos:end="1377:45">&amp;</operator><name pos:start="1377:46" pos:end="1377:56"><name pos:start="1377:46" pos:end="1377:47">op</name><operator pos:start="1377:48" pos:end="1377:49">-&gt;</operator><name pos:start="1377:50" pos:end="1377:53">args</name><index pos:start="1377:54" pos:end="1377:56">[<expr pos:start="1377:55" pos:end="1377:55"><literal type="number" pos:start="1377:55" pos:end="1377:55">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1377:59" pos:end="1377:70"><expr pos:start="1377:59" pos:end="1377:70"><operator pos:start="1377:59" pos:end="1377:59">&amp;</operator><name pos:start="1377:60" pos:end="1377:70"><name pos:start="1377:60" pos:end="1377:61">op</name><operator pos:start="1377:62" pos:end="1377:63">-&gt;</operator><name pos:start="1377:64" pos:end="1377:67">args</name><index pos:start="1377:68" pos:end="1377:70">[<expr pos:start="1377:69" pos:end="1377:69"><literal type="number" pos:start="1377:69" pos:end="1377:69">2</literal></expr>]</index></name></expr></argument>,

                                            <argument pos:start="1379:45" pos:end="1379:55"><expr pos:start="1379:45" pos:end="1379:55"><name pos:start="1379:45" pos:end="1379:55"><name pos:start="1379:45" pos:end="1379:46">op</name><operator pos:start="1379:47" pos:end="1379:48">-&gt;</operator><name pos:start="1379:49" pos:end="1379:52">args</name><index pos:start="1379:53" pos:end="1379:55">[<expr pos:start="1379:54" pos:end="1379:54"><literal type="number" pos:start="1379:54" pos:end="1379:54">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1381:13" pos:end="1525:13"><if pos:start="1381:13" pos:end="1401:13">if <condition pos:start="1381:16" pos:end="1381:25">(<expr pos:start="1381:17" pos:end="1381:24"><name pos:start="1381:17" pos:end="1381:19">tmp</name> <operator pos:start="1381:21" pos:end="1381:22">!=</operator> <literal type="number" pos:start="1381:24" pos:end="1381:24">2</literal></expr>)</condition> <block pos:start="1381:27" pos:end="1401:13">{<block_content pos:start="1383:17" pos:end="1399:17">

                <if_stmt pos:start="1383:17" pos:end="1399:17"><if pos:start="1383:17" pos:end="1393:17">if <condition pos:start="1383:20" pos:end="1383:24">(<expr pos:start="1383:21" pos:end="1383:23"><name pos:start="1383:21" pos:end="1383:23">tmp</name></expr>)</condition> <block pos:start="1383:26" pos:end="1393:17">{<block_content pos:start="1385:13" pos:end="1391:46">

            <label pos:start="1385:13" pos:end="1385:27"><name pos:start="1385:13" pos:end="1385:26">do_brcond_true</name>:</label>

                    <expr_stmt pos:start="1387:21" pos:end="1387:56"><expr pos:start="1387:21" pos:end="1387:55"><call pos:start="1387:21" pos:end="1387:55"><name pos:start="1387:21" pos:end="1387:31">bitmap_zero</name><argument_list pos:start="1387:32" pos:end="1387:55">(<argument pos:start="1387:33" pos:end="1387:44"><expr pos:start="1387:33" pos:end="1387:44"><name pos:start="1387:33" pos:end="1387:44"><name pos:start="1387:33" pos:end="1387:42">temps_used</name><operator pos:start="1387:43" pos:end="1387:43">.</operator><name pos:start="1387:44" pos:end="1387:44">l</name></name></expr></argument>, <argument pos:start="1387:47" pos:end="1387:54"><expr pos:start="1387:47" pos:end="1387:54"><name pos:start="1387:47" pos:end="1387:54">nb_temps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1389:21" pos:end="1389:42"><expr pos:start="1389:21" pos:end="1389:41"><name pos:start="1389:21" pos:end="1389:27"><name pos:start="1389:21" pos:end="1389:22">op</name><operator pos:start="1389:23" pos:end="1389:24">-&gt;</operator><name pos:start="1389:25" pos:end="1389:27">opc</name></name> <operator pos:start="1389:29" pos:end="1389:29">=</operator> <name pos:start="1389:31" pos:end="1389:41">INDEX_op_br</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1391:21" pos:end="1391:46"><expr pos:start="1391:21" pos:end="1391:45"><name pos:start="1391:21" pos:end="1391:31"><name pos:start="1391:21" pos:end="1391:22">op</name><operator pos:start="1391:23" pos:end="1391:24">-&gt;</operator><name pos:start="1391:25" pos:end="1391:28">args</name><index pos:start="1391:29" pos:end="1391:31">[<expr pos:start="1391:30" pos:end="1391:30"><literal type="number" pos:start="1391:30" pos:end="1391:30">0</literal></expr>]</index></name> <operator pos:start="1391:33" pos:end="1391:33">=</operator> <name pos:start="1391:35" pos:end="1391:45"><name pos:start="1391:35" pos:end="1391:36">op</name><operator pos:start="1391:37" pos:end="1391:38">-&gt;</operator><name pos:start="1391:39" pos:end="1391:42">args</name><index pos:start="1391:43" pos:end="1391:45">[<expr pos:start="1391:44" pos:end="1391:44"><literal type="number" pos:start="1391:44" pos:end="1391:44">5</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1393:19" pos:end="1399:17">else <block pos:start="1393:24" pos:end="1399:17">{<block_content pos:start="1395:13" pos:end="1397:41">

            <label pos:start="1395:13" pos:end="1395:28"><name pos:start="1395:13" pos:end="1395:27">do_brcond_false</name>:</label>

                    <expr_stmt pos:start="1397:21" pos:end="1397:41"><expr pos:start="1397:21" pos:end="1397:40"><call pos:start="1397:21" pos:end="1397:40"><name pos:start="1397:21" pos:end="1397:33">tcg_op_remove</name><argument_list pos:start="1397:34" pos:end="1397:40">(<argument pos:start="1397:35" pos:end="1397:35"><expr pos:start="1397:35" pos:end="1397:35"><name pos:start="1397:35" pos:end="1397:35">s</name></expr></argument>, <argument pos:start="1397:38" pos:end="1397:39"><expr pos:start="1397:38" pos:end="1397:39"><name pos:start="1397:38" pos:end="1397:39">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1401:15" pos:end="1431:13">else if <condition pos:start="1401:23" pos:end="1411:58">(<expr pos:start="1401:24" pos:end="1411:57"><operator pos:start="1401:24" pos:end="1401:24">(</operator><name pos:start="1401:25" pos:end="1401:35"><name pos:start="1401:25" pos:end="1401:26">op</name><operator pos:start="1401:27" pos:end="1401:28">-&gt;</operator><name pos:start="1401:29" pos:end="1401:32">args</name><index pos:start="1401:33" pos:end="1401:35">[<expr pos:start="1401:34" pos:end="1401:34"><literal type="number" pos:start="1401:34" pos:end="1401:34">4</literal></expr>]</index></name> <operator pos:start="1401:37" pos:end="1401:38">==</operator> <name pos:start="1401:40" pos:end="1401:50">TCG_COND_LT</name>

                        <operator pos:start="1403:25" pos:end="1403:26">||</operator> <name pos:start="1403:28" pos:end="1403:38"><name pos:start="1403:28" pos:end="1403:29">op</name><operator pos:start="1403:30" pos:end="1403:31">-&gt;</operator><name pos:start="1403:32" pos:end="1403:35">args</name><index pos:start="1403:36" pos:end="1403:38">[<expr pos:start="1403:37" pos:end="1403:37"><literal type="number" pos:start="1403:37" pos:end="1403:37">4</literal></expr>]</index></name> <operator pos:start="1403:40" pos:end="1403:41">==</operator> <name pos:start="1403:43" pos:end="1403:53">TCG_COND_GE</name><operator pos:start="1403:54" pos:end="1403:54">)</operator>

                       <operator pos:start="1405:24" pos:end="1405:25">&amp;&amp;</operator> <call pos:start="1405:27" pos:end="1405:51"><name pos:start="1405:27" pos:end="1405:38">arg_is_const</name><argument_list pos:start="1405:39" pos:end="1405:51">(<argument pos:start="1405:40" pos:end="1405:50"><expr pos:start="1405:40" pos:end="1405:50"><name pos:start="1405:40" pos:end="1405:50"><name pos:start="1405:40" pos:end="1405:41">op</name><operator pos:start="1405:42" pos:end="1405:43">-&gt;</operator><name pos:start="1405:44" pos:end="1405:47">args</name><index pos:start="1405:48" pos:end="1405:50">[<expr pos:start="1405:49" pos:end="1405:49"><literal type="number" pos:start="1405:49" pos:end="1405:49">2</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                       <operator pos:start="1407:24" pos:end="1407:25">&amp;&amp;</operator> <call pos:start="1407:27" pos:end="1407:47"><name pos:start="1407:27" pos:end="1407:34">arg_info</name><argument_list pos:start="1407:35" pos:end="1407:47">(<argument pos:start="1407:36" pos:end="1407:46"><expr pos:start="1407:36" pos:end="1407:46"><name pos:start="1407:36" pos:end="1407:46"><name pos:start="1407:36" pos:end="1407:37">op</name><operator pos:start="1407:38" pos:end="1407:39">-&gt;</operator><name pos:start="1407:40" pos:end="1407:43">args</name><index pos:start="1407:44" pos:end="1407:46">[<expr pos:start="1407:45" pos:end="1407:45"><literal type="number" pos:start="1407:45" pos:end="1407:45">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1407:48" pos:end="1407:49">-&gt;</operator><name pos:start="1407:50" pos:end="1407:52">val</name> <operator pos:start="1407:54" pos:end="1407:55">==</operator> <literal type="number" pos:start="1407:57" pos:end="1407:57">0</literal>

                       <operator pos:start="1409:24" pos:end="1409:25">&amp;&amp;</operator> <call pos:start="1409:27" pos:end="1409:51"><name pos:start="1409:27" pos:end="1409:38">arg_is_const</name><argument_list pos:start="1409:39" pos:end="1409:51">(<argument pos:start="1409:40" pos:end="1409:50"><expr pos:start="1409:40" pos:end="1409:50"><name pos:start="1409:40" pos:end="1409:50"><name pos:start="1409:40" pos:end="1409:41">op</name><operator pos:start="1409:42" pos:end="1409:43">-&gt;</operator><name pos:start="1409:44" pos:end="1409:47">args</name><index pos:start="1409:48" pos:end="1409:50">[<expr pos:start="1409:49" pos:end="1409:49"><literal type="number" pos:start="1409:49" pos:end="1409:49">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                       <operator pos:start="1411:24" pos:end="1411:25">&amp;&amp;</operator> <call pos:start="1411:27" pos:end="1411:47"><name pos:start="1411:27" pos:end="1411:34">arg_info</name><argument_list pos:start="1411:35" pos:end="1411:47">(<argument pos:start="1411:36" pos:end="1411:46"><expr pos:start="1411:36" pos:end="1411:46"><name pos:start="1411:36" pos:end="1411:46"><name pos:start="1411:36" pos:end="1411:37">op</name><operator pos:start="1411:38" pos:end="1411:39">-&gt;</operator><name pos:start="1411:40" pos:end="1411:43">args</name><index pos:start="1411:44" pos:end="1411:46">[<expr pos:start="1411:45" pos:end="1411:45"><literal type="number" pos:start="1411:45" pos:end="1411:45">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1411:48" pos:end="1411:49">-&gt;</operator><name pos:start="1411:50" pos:end="1411:52">val</name> <operator pos:start="1411:54" pos:end="1411:55">==</operator> <literal type="number" pos:start="1411:57" pos:end="1411:57">0</literal></expr>)</condition> <block pos:start="1411:60" pos:end="1431:13">{<block_content pos:start="1417:13" pos:end="1429:42">

                <comment type="block" pos:start="1413:17" pos:end="1415:53">/* Simplify LT/GE comparisons vs zero to a single compare

                   vs the high word of the input.  */</comment>

            <label pos:start="1417:13" pos:end="1417:27"><name pos:start="1417:13" pos:end="1417:26">do_brcond_high</name>:</label>

                <expr_stmt pos:start="1419:17" pos:end="1419:52"><expr pos:start="1419:17" pos:end="1419:51"><call pos:start="1419:17" pos:end="1419:51"><name pos:start="1419:17" pos:end="1419:27">bitmap_zero</name><argument_list pos:start="1419:28" pos:end="1419:51">(<argument pos:start="1419:29" pos:end="1419:40"><expr pos:start="1419:29" pos:end="1419:40"><name pos:start="1419:29" pos:end="1419:40"><name pos:start="1419:29" pos:end="1419:38">temps_used</name><operator pos:start="1419:39" pos:end="1419:39">.</operator><name pos:start="1419:40" pos:end="1419:40">l</name></name></expr></argument>, <argument pos:start="1419:43" pos:end="1419:50"><expr pos:start="1419:43" pos:end="1419:50"><name pos:start="1419:43" pos:end="1419:50">nb_temps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1421:17" pos:end="1421:46"><expr pos:start="1421:17" pos:end="1421:45"><name pos:start="1421:17" pos:end="1421:23"><name pos:start="1421:17" pos:end="1421:18">op</name><operator pos:start="1421:19" pos:end="1421:20">-&gt;</operator><name pos:start="1421:21" pos:end="1421:23">opc</name></name> <operator pos:start="1421:25" pos:end="1421:25">=</operator> <name pos:start="1421:27" pos:end="1421:45">INDEX_op_brcond_i32</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1423:17" pos:end="1423:42"><expr pos:start="1423:17" pos:end="1423:41"><name pos:start="1423:17" pos:end="1423:27"><name pos:start="1423:17" pos:end="1423:18">op</name><operator pos:start="1423:19" pos:end="1423:20">-&gt;</operator><name pos:start="1423:21" pos:end="1423:24">args</name><index pos:start="1423:25" pos:end="1423:27">[<expr pos:start="1423:26" pos:end="1423:26"><literal type="number" pos:start="1423:26" pos:end="1423:26">0</literal></expr>]</index></name> <operator pos:start="1423:29" pos:end="1423:29">=</operator> <name pos:start="1423:31" pos:end="1423:41"><name pos:start="1423:31" pos:end="1423:32">op</name><operator pos:start="1423:33" pos:end="1423:34">-&gt;</operator><name pos:start="1423:35" pos:end="1423:38">args</name><index pos:start="1423:39" pos:end="1423:41">[<expr pos:start="1423:40" pos:end="1423:40"><literal type="number" pos:start="1423:40" pos:end="1423:40">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1425:17" pos:end="1425:42"><expr pos:start="1425:17" pos:end="1425:41"><name pos:start="1425:17" pos:end="1425:27"><name pos:start="1425:17" pos:end="1425:18">op</name><operator pos:start="1425:19" pos:end="1425:20">-&gt;</operator><name pos:start="1425:21" pos:end="1425:24">args</name><index pos:start="1425:25" pos:end="1425:27">[<expr pos:start="1425:26" pos:end="1425:26"><literal type="number" pos:start="1425:26" pos:end="1425:26">1</literal></expr>]</index></name> <operator pos:start="1425:29" pos:end="1425:29">=</operator> <name pos:start="1425:31" pos:end="1425:41"><name pos:start="1425:31" pos:end="1425:32">op</name><operator pos:start="1425:33" pos:end="1425:34">-&gt;</operator><name pos:start="1425:35" pos:end="1425:38">args</name><index pos:start="1425:39" pos:end="1425:41">[<expr pos:start="1425:40" pos:end="1425:40"><literal type="number" pos:start="1425:40" pos:end="1425:40">3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1427:17" pos:end="1427:42"><expr pos:start="1427:17" pos:end="1427:41"><name pos:start="1427:17" pos:end="1427:27"><name pos:start="1427:17" pos:end="1427:18">op</name><operator pos:start="1427:19" pos:end="1427:20">-&gt;</operator><name pos:start="1427:21" pos:end="1427:24">args</name><index pos:start="1427:25" pos:end="1427:27">[<expr pos:start="1427:26" pos:end="1427:26"><literal type="number" pos:start="1427:26" pos:end="1427:26">2</literal></expr>]</index></name> <operator pos:start="1427:29" pos:end="1427:29">=</operator> <name pos:start="1427:31" pos:end="1427:41"><name pos:start="1427:31" pos:end="1427:32">op</name><operator pos:start="1427:33" pos:end="1427:34">-&gt;</operator><name pos:start="1427:35" pos:end="1427:38">args</name><index pos:start="1427:39" pos:end="1427:41">[<expr pos:start="1427:40" pos:end="1427:40"><literal type="number" pos:start="1427:40" pos:end="1427:40">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1429:17" pos:end="1429:42"><expr pos:start="1429:17" pos:end="1429:41"><name pos:start="1429:17" pos:end="1429:27"><name pos:start="1429:17" pos:end="1429:18">op</name><operator pos:start="1429:19" pos:end="1429:20">-&gt;</operator><name pos:start="1429:21" pos:end="1429:24">args</name><index pos:start="1429:25" pos:end="1429:27">[<expr pos:start="1429:26" pos:end="1429:26"><literal type="number" pos:start="1429:26" pos:end="1429:26">3</literal></expr>]</index></name> <operator pos:start="1429:29" pos:end="1429:29">=</operator> <name pos:start="1429:31" pos:end="1429:41"><name pos:start="1429:31" pos:end="1429:32">op</name><operator pos:start="1429:33" pos:end="1429:34">-&gt;</operator><name pos:start="1429:35" pos:end="1429:38">args</name><index pos:start="1429:39" pos:end="1429:41">[<expr pos:start="1429:40" pos:end="1429:40"><literal type="number" pos:start="1429:40" pos:end="1429:40">5</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1431:15" pos:end="1481:13">else if <condition pos:start="1431:23" pos:end="1431:50">(<expr pos:start="1431:24" pos:end="1431:49"><name pos:start="1431:24" pos:end="1431:34"><name pos:start="1431:24" pos:end="1431:25">op</name><operator pos:start="1431:26" pos:end="1431:27">-&gt;</operator><name pos:start="1431:28" pos:end="1431:31">args</name><index pos:start="1431:32" pos:end="1431:34">[<expr pos:start="1431:33" pos:end="1431:33"><literal type="number" pos:start="1431:33" pos:end="1431:33">4</literal></expr>]</index></name> <operator pos:start="1431:36" pos:end="1431:37">==</operator> <name pos:start="1431:39" pos:end="1431:49">TCG_COND_EQ</name></expr>)</condition> <block pos:start="1431:52" pos:end="1481:13">{<block_content pos:start="1437:17" pos:end="1479:42">

                <comment type="block" pos:start="1433:17" pos:end="1435:41">/* Simplify EQ comparisons where one of the pairs

                   can be simplified.  */</comment>

                <expr_stmt pos:start="1437:17" pos:end="1441:60"><expr pos:start="1437:17" pos:end="1441:59"><name pos:start="1437:17" pos:end="1437:19">tmp</name> <operator pos:start="1437:21" pos:end="1437:21">=</operator> <call pos:start="1437:23" pos:end="1441:59"><name pos:start="1437:23" pos:end="1437:46">do_constant_folding_cond</name><argument_list pos:start="1437:47" pos:end="1441:59">(<argument pos:start="1437:48" pos:end="1437:66"><expr pos:start="1437:48" pos:end="1437:66"><name pos:start="1437:48" pos:end="1437:66">INDEX_op_brcond_i32</name></expr></argument>,

                                               <argument pos:start="1439:48" pos:end="1439:58"><expr pos:start="1439:48" pos:end="1439:58"><name pos:start="1439:48" pos:end="1439:58"><name pos:start="1439:48" pos:end="1439:49">op</name><operator pos:start="1439:50" pos:end="1439:51">-&gt;</operator><name pos:start="1439:52" pos:end="1439:55">args</name><index pos:start="1439:56" pos:end="1439:58">[<expr pos:start="1439:57" pos:end="1439:57"><literal type="number" pos:start="1439:57" pos:end="1439:57">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1439:61" pos:end="1439:71"><expr pos:start="1439:61" pos:end="1439:71"><name pos:start="1439:61" pos:end="1439:71"><name pos:start="1439:61" pos:end="1439:62">op</name><operator pos:start="1439:63" pos:end="1439:64">-&gt;</operator><name pos:start="1439:65" pos:end="1439:68">args</name><index pos:start="1439:69" pos:end="1439:71">[<expr pos:start="1439:70" pos:end="1439:70"><literal type="number" pos:start="1439:70" pos:end="1439:70">2</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="1441:48" pos:end="1441:58"><expr pos:start="1441:48" pos:end="1441:58"><name pos:start="1441:48" pos:end="1441:58">TCG_COND_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1443:17" pos:end="1451:17"><if pos:start="1443:17" pos:end="1447:17">if <condition pos:start="1443:20" pos:end="1443:29">(<expr pos:start="1443:21" pos:end="1443:28"><name pos:start="1443:21" pos:end="1443:23">tmp</name> <operator pos:start="1443:25" pos:end="1443:26">==</operator> <literal type="number" pos:start="1443:28" pos:end="1443:28">0</literal></expr>)</condition> <block pos:start="1443:31" pos:end="1447:17">{<block_content pos:start="1445:21" pos:end="1445:41">

                    <goto pos:start="1445:21" pos:end="1445:41">goto <name pos:start="1445:26" pos:end="1445:40">do_brcond_false</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="1447:19" pos:end="1451:17">else if <condition pos:start="1447:27" pos:end="1447:36">(<expr pos:start="1447:28" pos:end="1447:35"><name pos:start="1447:28" pos:end="1447:30">tmp</name> <operator pos:start="1447:32" pos:end="1447:33">==</operator> <literal type="number" pos:start="1447:35" pos:end="1447:35">1</literal></expr>)</condition> <block pos:start="1447:38" pos:end="1451:17">{<block_content pos:start="1449:21" pos:end="1449:40">

                    <goto pos:start="1449:21" pos:end="1449:40">goto <name pos:start="1449:26" pos:end="1449:39">do_brcond_high</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1453:17" pos:end="1457:60"><expr pos:start="1453:17" pos:end="1457:59"><name pos:start="1453:17" pos:end="1453:19">tmp</name> <operator pos:start="1453:21" pos:end="1453:21">=</operator> <call pos:start="1453:23" pos:end="1457:59"><name pos:start="1453:23" pos:end="1453:46">do_constant_folding_cond</name><argument_list pos:start="1453:47" pos:end="1457:59">(<argument pos:start="1453:48" pos:end="1453:66"><expr pos:start="1453:48" pos:end="1453:66"><name pos:start="1453:48" pos:end="1453:66">INDEX_op_brcond_i32</name></expr></argument>,

                                               <argument pos:start="1455:48" pos:end="1455:58"><expr pos:start="1455:48" pos:end="1455:58"><name pos:start="1455:48" pos:end="1455:58"><name pos:start="1455:48" pos:end="1455:49">op</name><operator pos:start="1455:50" pos:end="1455:51">-&gt;</operator><name pos:start="1455:52" pos:end="1455:55">args</name><index pos:start="1455:56" pos:end="1455:58">[<expr pos:start="1455:57" pos:end="1455:57"><literal type="number" pos:start="1455:57" pos:end="1455:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1455:61" pos:end="1455:71"><expr pos:start="1455:61" pos:end="1455:71"><name pos:start="1455:61" pos:end="1455:71"><name pos:start="1455:61" pos:end="1455:62">op</name><operator pos:start="1455:63" pos:end="1455:64">-&gt;</operator><name pos:start="1455:65" pos:end="1455:68">args</name><index pos:start="1455:69" pos:end="1455:71">[<expr pos:start="1455:70" pos:end="1455:70"><literal type="number" pos:start="1455:70" pos:end="1455:70">3</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="1457:48" pos:end="1457:58"><expr pos:start="1457:48" pos:end="1457:58"><name pos:start="1457:48" pos:end="1457:58">TCG_COND_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1459:17" pos:end="1467:17"><if pos:start="1459:17" pos:end="1463:17">if <condition pos:start="1459:20" pos:end="1459:29">(<expr pos:start="1459:21" pos:end="1459:28"><name pos:start="1459:21" pos:end="1459:23">tmp</name> <operator pos:start="1459:25" pos:end="1459:26">==</operator> <literal type="number" pos:start="1459:28" pos:end="1459:28">0</literal></expr>)</condition> <block pos:start="1459:31" pos:end="1463:17">{<block_content pos:start="1461:21" pos:end="1461:41">

                    <goto pos:start="1461:21" pos:end="1461:41">goto <name pos:start="1461:26" pos:end="1461:40">do_brcond_false</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="1463:19" pos:end="1467:17">else if <condition pos:start="1463:27" pos:end="1463:36">(<expr pos:start="1463:28" pos:end="1463:35"><name pos:start="1463:28" pos:end="1463:30">tmp</name> <operator pos:start="1463:32" pos:end="1463:33">!=</operator> <literal type="number" pos:start="1463:35" pos:end="1463:35">1</literal></expr>)</condition> <block pos:start="1463:38" pos:end="1467:17">{<block_content pos:start="1465:21" pos:end="1465:36">

                    <goto pos:start="1465:21" pos:end="1465:36">goto <name pos:start="1465:26" pos:end="1465:35">do_default</name>;</goto>

                </block_content>}</block></if></if_stmt>

            <label pos:start="1469:13" pos:end="1469:26"><name pos:start="1469:13" pos:end="1469:25">do_brcond_low</name>:</label>

                <expr_stmt pos:start="1471:17" pos:end="1471:52"><expr pos:start="1471:17" pos:end="1471:51"><call pos:start="1471:17" pos:end="1471:51"><name pos:start="1471:17" pos:end="1471:27">bitmap_zero</name><argument_list pos:start="1471:28" pos:end="1471:51">(<argument pos:start="1471:29" pos:end="1471:40"><expr pos:start="1471:29" pos:end="1471:40"><name pos:start="1471:29" pos:end="1471:40"><name pos:start="1471:29" pos:end="1471:38">temps_used</name><operator pos:start="1471:39" pos:end="1471:39">.</operator><name pos:start="1471:40" pos:end="1471:40">l</name></name></expr></argument>, <argument pos:start="1471:43" pos:end="1471:50"><expr pos:start="1471:43" pos:end="1471:50"><name pos:start="1471:43" pos:end="1471:50">nb_temps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1473:17" pos:end="1473:46"><expr pos:start="1473:17" pos:end="1473:45"><name pos:start="1473:17" pos:end="1473:23"><name pos:start="1473:17" pos:end="1473:18">op</name><operator pos:start="1473:19" pos:end="1473:20">-&gt;</operator><name pos:start="1473:21" pos:end="1473:23">opc</name></name> <operator pos:start="1473:25" pos:end="1473:25">=</operator> <name pos:start="1473:27" pos:end="1473:45">INDEX_op_brcond_i32</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1475:17" pos:end="1475:42"><expr pos:start="1475:17" pos:end="1475:41"><name pos:start="1475:17" pos:end="1475:27"><name pos:start="1475:17" pos:end="1475:18">op</name><operator pos:start="1475:19" pos:end="1475:20">-&gt;</operator><name pos:start="1475:21" pos:end="1475:24">args</name><index pos:start="1475:25" pos:end="1475:27">[<expr pos:start="1475:26" pos:end="1475:26"><literal type="number" pos:start="1475:26" pos:end="1475:26">1</literal></expr>]</index></name> <operator pos:start="1475:29" pos:end="1475:29">=</operator> <name pos:start="1475:31" pos:end="1475:41"><name pos:start="1475:31" pos:end="1475:32">op</name><operator pos:start="1475:33" pos:end="1475:34">-&gt;</operator><name pos:start="1475:35" pos:end="1475:38">args</name><index pos:start="1475:39" pos:end="1475:41">[<expr pos:start="1475:40" pos:end="1475:40"><literal type="number" pos:start="1475:40" pos:end="1475:40">2</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1477:17" pos:end="1477:42"><expr pos:start="1477:17" pos:end="1477:41"><name pos:start="1477:17" pos:end="1477:27"><name pos:start="1477:17" pos:end="1477:18">op</name><operator pos:start="1477:19" pos:end="1477:20">-&gt;</operator><name pos:start="1477:21" pos:end="1477:24">args</name><index pos:start="1477:25" pos:end="1477:27">[<expr pos:start="1477:26" pos:end="1477:26"><literal type="number" pos:start="1477:26" pos:end="1477:26">2</literal></expr>]</index></name> <operator pos:start="1477:29" pos:end="1477:29">=</operator> <name pos:start="1477:31" pos:end="1477:41"><name pos:start="1477:31" pos:end="1477:32">op</name><operator pos:start="1477:33" pos:end="1477:34">-&gt;</operator><name pos:start="1477:35" pos:end="1477:38">args</name><index pos:start="1477:39" pos:end="1477:41">[<expr pos:start="1477:40" pos:end="1477:40"><literal type="number" pos:start="1477:40" pos:end="1477:40">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1479:17" pos:end="1479:42"><expr pos:start="1479:17" pos:end="1479:41"><name pos:start="1479:17" pos:end="1479:27"><name pos:start="1479:17" pos:end="1479:18">op</name><operator pos:start="1479:19" pos:end="1479:20">-&gt;</operator><name pos:start="1479:21" pos:end="1479:24">args</name><index pos:start="1479:25" pos:end="1479:27">[<expr pos:start="1479:26" pos:end="1479:26"><literal type="number" pos:start="1479:26" pos:end="1479:26">3</literal></expr>]</index></name> <operator pos:start="1479:29" pos:end="1479:29">=</operator> <name pos:start="1479:31" pos:end="1479:41"><name pos:start="1479:31" pos:end="1479:32">op</name><operator pos:start="1479:33" pos:end="1479:34">-&gt;</operator><name pos:start="1479:35" pos:end="1479:38">args</name><index pos:start="1479:39" pos:end="1479:41">[<expr pos:start="1479:40" pos:end="1479:40"><literal type="number" pos:start="1479:40" pos:end="1479:40">5</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1481:15" pos:end="1521:13">else if <condition pos:start="1481:23" pos:end="1481:50">(<expr pos:start="1481:24" pos:end="1481:49"><name pos:start="1481:24" pos:end="1481:34"><name pos:start="1481:24" pos:end="1481:25">op</name><operator pos:start="1481:26" pos:end="1481:27">-&gt;</operator><name pos:start="1481:28" pos:end="1481:31">args</name><index pos:start="1481:32" pos:end="1481:34">[<expr pos:start="1481:33" pos:end="1481:33"><literal type="number" pos:start="1481:33" pos:end="1481:33">4</literal></expr>]</index></name> <operator pos:start="1481:36" pos:end="1481:37">==</operator> <name pos:start="1481:39" pos:end="1481:49">TCG_COND_NE</name></expr>)</condition> <block pos:start="1481:52" pos:end="1521:13">{<block_content pos:start="1487:17" pos:end="1519:32">

                <comment type="block" pos:start="1483:17" pos:end="1485:41">/* Simplify NE comparisons where one of the pairs

                   can be simplified.  */</comment>

                <expr_stmt pos:start="1487:17" pos:end="1491:60"><expr pos:start="1487:17" pos:end="1491:59"><name pos:start="1487:17" pos:end="1487:19">tmp</name> <operator pos:start="1487:21" pos:end="1487:21">=</operator> <call pos:start="1487:23" pos:end="1491:59"><name pos:start="1487:23" pos:end="1487:46">do_constant_folding_cond</name><argument_list pos:start="1487:47" pos:end="1491:59">(<argument pos:start="1487:48" pos:end="1487:66"><expr pos:start="1487:48" pos:end="1487:66"><name pos:start="1487:48" pos:end="1487:66">INDEX_op_brcond_i32</name></expr></argument>,

                                               <argument pos:start="1489:48" pos:end="1489:58"><expr pos:start="1489:48" pos:end="1489:58"><name pos:start="1489:48" pos:end="1489:58"><name pos:start="1489:48" pos:end="1489:49">op</name><operator pos:start="1489:50" pos:end="1489:51">-&gt;</operator><name pos:start="1489:52" pos:end="1489:55">args</name><index pos:start="1489:56" pos:end="1489:58">[<expr pos:start="1489:57" pos:end="1489:57"><literal type="number" pos:start="1489:57" pos:end="1489:57">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1489:61" pos:end="1489:71"><expr pos:start="1489:61" pos:end="1489:71"><name pos:start="1489:61" pos:end="1489:71"><name pos:start="1489:61" pos:end="1489:62">op</name><operator pos:start="1489:63" pos:end="1489:64">-&gt;</operator><name pos:start="1489:65" pos:end="1489:68">args</name><index pos:start="1489:69" pos:end="1489:71">[<expr pos:start="1489:70" pos:end="1489:70"><literal type="number" pos:start="1489:70" pos:end="1489:70">2</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="1491:48" pos:end="1491:58"><expr pos:start="1491:48" pos:end="1491:58"><name pos:start="1491:48" pos:end="1491:58">TCG_COND_NE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1493:17" pos:end="1501:17"><if pos:start="1493:17" pos:end="1497:17">if <condition pos:start="1493:20" pos:end="1493:29">(<expr pos:start="1493:21" pos:end="1493:28"><name pos:start="1493:21" pos:end="1493:23">tmp</name> <operator pos:start="1493:25" pos:end="1493:26">==</operator> <literal type="number" pos:start="1493:28" pos:end="1493:28">0</literal></expr>)</condition> <block pos:start="1493:31" pos:end="1497:17">{<block_content pos:start="1495:21" pos:end="1495:40">

                    <goto pos:start="1495:21" pos:end="1495:40">goto <name pos:start="1495:26" pos:end="1495:39">do_brcond_high</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="1497:19" pos:end="1501:17">else if <condition pos:start="1497:27" pos:end="1497:36">(<expr pos:start="1497:28" pos:end="1497:35"><name pos:start="1497:28" pos:end="1497:30">tmp</name> <operator pos:start="1497:32" pos:end="1497:33">==</operator> <literal type="number" pos:start="1497:35" pos:end="1497:35">1</literal></expr>)</condition> <block pos:start="1497:38" pos:end="1501:17">{<block_content pos:start="1499:21" pos:end="1499:40">

                    <goto pos:start="1499:21" pos:end="1499:40">goto <name pos:start="1499:26" pos:end="1499:39">do_brcond_true</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1503:17" pos:end="1507:60"><expr pos:start="1503:17" pos:end="1507:59"><name pos:start="1503:17" pos:end="1503:19">tmp</name> <operator pos:start="1503:21" pos:end="1503:21">=</operator> <call pos:start="1503:23" pos:end="1507:59"><name pos:start="1503:23" pos:end="1503:46">do_constant_folding_cond</name><argument_list pos:start="1503:47" pos:end="1507:59">(<argument pos:start="1503:48" pos:end="1503:66"><expr pos:start="1503:48" pos:end="1503:66"><name pos:start="1503:48" pos:end="1503:66">INDEX_op_brcond_i32</name></expr></argument>,

                                               <argument pos:start="1505:48" pos:end="1505:58"><expr pos:start="1505:48" pos:end="1505:58"><name pos:start="1505:48" pos:end="1505:58"><name pos:start="1505:48" pos:end="1505:49">op</name><operator pos:start="1505:50" pos:end="1505:51">-&gt;</operator><name pos:start="1505:52" pos:end="1505:55">args</name><index pos:start="1505:56" pos:end="1505:58">[<expr pos:start="1505:57" pos:end="1505:57"><literal type="number" pos:start="1505:57" pos:end="1505:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1505:61" pos:end="1505:71"><expr pos:start="1505:61" pos:end="1505:71"><name pos:start="1505:61" pos:end="1505:71"><name pos:start="1505:61" pos:end="1505:62">op</name><operator pos:start="1505:63" pos:end="1505:64">-&gt;</operator><name pos:start="1505:65" pos:end="1505:68">args</name><index pos:start="1505:69" pos:end="1505:71">[<expr pos:start="1505:70" pos:end="1505:70"><literal type="number" pos:start="1505:70" pos:end="1505:70">3</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="1507:48" pos:end="1507:58"><expr pos:start="1507:48" pos:end="1507:58"><name pos:start="1507:48" pos:end="1507:58">TCG_COND_NE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1509:17" pos:end="1517:17"><if pos:start="1509:17" pos:end="1513:17">if <condition pos:start="1509:20" pos:end="1509:29">(<expr pos:start="1509:21" pos:end="1509:28"><name pos:start="1509:21" pos:end="1509:23">tmp</name> <operator pos:start="1509:25" pos:end="1509:26">==</operator> <literal type="number" pos:start="1509:28" pos:end="1509:28">0</literal></expr>)</condition> <block pos:start="1509:31" pos:end="1513:17">{<block_content pos:start="1511:21" pos:end="1511:39">

                    <goto pos:start="1511:21" pos:end="1511:39">goto <name pos:start="1511:26" pos:end="1511:38">do_brcond_low</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="1513:19" pos:end="1517:17">else if <condition pos:start="1513:27" pos:end="1513:36">(<expr pos:start="1513:28" pos:end="1513:35"><name pos:start="1513:28" pos:end="1513:30">tmp</name> <operator pos:start="1513:32" pos:end="1513:33">==</operator> <literal type="number" pos:start="1513:35" pos:end="1513:35">1</literal></expr>)</condition> <block pos:start="1513:38" pos:end="1517:17">{<block_content pos:start="1515:21" pos:end="1515:40">

                    <goto pos:start="1515:21" pos:end="1515:40">goto <name pos:start="1515:26" pos:end="1515:39">do_brcond_true</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <goto pos:start="1519:17" pos:end="1519:32">goto <name pos:start="1519:22" pos:end="1519:31">do_default</name>;</goto>

            </block_content>}</block></if> <else pos:start="1521:15" pos:end="1525:13">else <block pos:start="1521:20" pos:end="1525:13">{<block_content pos:start="1523:17" pos:end="1523:32">

                <goto pos:start="1523:17" pos:end="1523:32">goto <name pos:start="1523:22" pos:end="1523:31">do_default</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1527:13" pos:end="1527:18">break;</break>



        <case pos:start="1531:9" pos:end="1531:35">case <expr pos:start="1531:14" pos:end="1531:34"><name pos:start="1531:14" pos:end="1531:34">INDEX_op_setcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="1533:13" pos:end="1535:57"><expr pos:start="1533:13" pos:end="1535:56"><name pos:start="1533:13" pos:end="1533:15">tmp</name> <operator pos:start="1533:17" pos:end="1533:17">=</operator> <call pos:start="1533:19" pos:end="1535:56"><name pos:start="1533:19" pos:end="1533:43">do_constant_folding_cond2</name><argument_list pos:start="1533:44" pos:end="1535:56">(<argument pos:start="1533:45" pos:end="1533:56"><expr pos:start="1533:45" pos:end="1533:56"><operator pos:start="1533:45" pos:end="1533:45">&amp;</operator><name pos:start="1533:46" pos:end="1533:56"><name pos:start="1533:46" pos:end="1533:47">op</name><operator pos:start="1533:48" pos:end="1533:49">-&gt;</operator><name pos:start="1533:50" pos:end="1533:53">args</name><index pos:start="1533:54" pos:end="1533:56">[<expr pos:start="1533:55" pos:end="1533:55"><literal type="number" pos:start="1533:55" pos:end="1533:55">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1533:59" pos:end="1533:70"><expr pos:start="1533:59" pos:end="1533:70"><operator pos:start="1533:59" pos:end="1533:59">&amp;</operator><name pos:start="1533:60" pos:end="1533:70"><name pos:start="1533:60" pos:end="1533:61">op</name><operator pos:start="1533:62" pos:end="1533:63">-&gt;</operator><name pos:start="1533:64" pos:end="1533:67">args</name><index pos:start="1533:68" pos:end="1533:70">[<expr pos:start="1533:69" pos:end="1533:69"><literal type="number" pos:start="1533:69" pos:end="1533:69">3</literal></expr>]</index></name></expr></argument>,

                                            <argument pos:start="1535:45" pos:end="1535:55"><expr pos:start="1535:45" pos:end="1535:55"><name pos:start="1535:45" pos:end="1535:55"><name pos:start="1535:45" pos:end="1535:46">op</name><operator pos:start="1535:47" pos:end="1535:48">-&gt;</operator><name pos:start="1535:49" pos:end="1535:52">args</name><index pos:start="1535:53" pos:end="1535:55">[<expr pos:start="1535:54" pos:end="1535:54"><literal type="number" pos:start="1535:54" pos:end="1535:54">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1537:13" pos:end="1667:13"><if pos:start="1537:13" pos:end="1543:13">if <condition pos:start="1537:16" pos:end="1537:25">(<expr pos:start="1537:17" pos:end="1537:24"><name pos:start="1537:17" pos:end="1537:19">tmp</name> <operator pos:start="1537:21" pos:end="1537:22">!=</operator> <literal type="number" pos:start="1537:24" pos:end="1537:24">2</literal></expr>)</condition> <block pos:start="1537:27" pos:end="1543:13">{<block_content pos:start="1539:13" pos:end="1541:58">

            <label pos:start="1539:13" pos:end="1539:29"><name pos:start="1539:13" pos:end="1539:28">do_setcond_const</name>:</label>

                <expr_stmt pos:start="1541:17" pos:end="1541:58"><expr pos:start="1541:17" pos:end="1541:57"><call pos:start="1541:17" pos:end="1541:57"><name pos:start="1541:17" pos:end="1541:32">tcg_opt_gen_movi</name><argument_list pos:start="1541:33" pos:end="1541:57">(<argument pos:start="1541:34" pos:end="1541:34"><expr pos:start="1541:34" pos:end="1541:34"><name pos:start="1541:34" pos:end="1541:34">s</name></expr></argument>, <argument pos:start="1541:37" pos:end="1541:38"><expr pos:start="1541:37" pos:end="1541:38"><name pos:start="1541:37" pos:end="1541:38">op</name></expr></argument>, <argument pos:start="1541:41" pos:end="1541:51"><expr pos:start="1541:41" pos:end="1541:51"><name pos:start="1541:41" pos:end="1541:51"><name pos:start="1541:41" pos:end="1541:42">op</name><operator pos:start="1541:43" pos:end="1541:44">-&gt;</operator><name pos:start="1541:45" pos:end="1541:48">args</name><index pos:start="1541:49" pos:end="1541:51">[<expr pos:start="1541:50" pos:end="1541:50"><literal type="number" pos:start="1541:50" pos:end="1541:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1541:54" pos:end="1541:56"><expr pos:start="1541:54" pos:end="1541:56"><name pos:start="1541:54" pos:end="1541:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1543:15" pos:end="1573:13">else if <condition pos:start="1543:23" pos:end="1553:58">(<expr pos:start="1543:24" pos:end="1553:57"><operator pos:start="1543:24" pos:end="1543:24">(</operator><name pos:start="1543:25" pos:end="1543:35"><name pos:start="1543:25" pos:end="1543:26">op</name><operator pos:start="1543:27" pos:end="1543:28">-&gt;</operator><name pos:start="1543:29" pos:end="1543:32">args</name><index pos:start="1543:33" pos:end="1543:35">[<expr pos:start="1543:34" pos:end="1543:34"><literal type="number" pos:start="1543:34" pos:end="1543:34">5</literal></expr>]</index></name> <operator pos:start="1543:37" pos:end="1543:38">==</operator> <name pos:start="1543:40" pos:end="1543:50">TCG_COND_LT</name>

                        <operator pos:start="1545:25" pos:end="1545:26">||</operator> <name pos:start="1545:28" pos:end="1545:38"><name pos:start="1545:28" pos:end="1545:29">op</name><operator pos:start="1545:30" pos:end="1545:31">-&gt;</operator><name pos:start="1545:32" pos:end="1545:35">args</name><index pos:start="1545:36" pos:end="1545:38">[<expr pos:start="1545:37" pos:end="1545:37"><literal type="number" pos:start="1545:37" pos:end="1545:37">5</literal></expr>]</index></name> <operator pos:start="1545:40" pos:end="1545:41">==</operator> <name pos:start="1545:43" pos:end="1545:53">TCG_COND_GE</name><operator pos:start="1545:54" pos:end="1545:54">)</operator>

                       <operator pos:start="1547:24" pos:end="1547:25">&amp;&amp;</operator> <call pos:start="1547:27" pos:end="1547:51"><name pos:start="1547:27" pos:end="1547:38">arg_is_const</name><argument_list pos:start="1547:39" pos:end="1547:51">(<argument pos:start="1547:40" pos:end="1547:50"><expr pos:start="1547:40" pos:end="1547:50"><name pos:start="1547:40" pos:end="1547:50"><name pos:start="1547:40" pos:end="1547:41">op</name><operator pos:start="1547:42" pos:end="1547:43">-&gt;</operator><name pos:start="1547:44" pos:end="1547:47">args</name><index pos:start="1547:48" pos:end="1547:50">[<expr pos:start="1547:49" pos:end="1547:49"><literal type="number" pos:start="1547:49" pos:end="1547:49">3</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                       <operator pos:start="1549:24" pos:end="1549:25">&amp;&amp;</operator> <call pos:start="1549:27" pos:end="1549:47"><name pos:start="1549:27" pos:end="1549:34">arg_info</name><argument_list pos:start="1549:35" pos:end="1549:47">(<argument pos:start="1549:36" pos:end="1549:46"><expr pos:start="1549:36" pos:end="1549:46"><name pos:start="1549:36" pos:end="1549:46"><name pos:start="1549:36" pos:end="1549:37">op</name><operator pos:start="1549:38" pos:end="1549:39">-&gt;</operator><name pos:start="1549:40" pos:end="1549:43">args</name><index pos:start="1549:44" pos:end="1549:46">[<expr pos:start="1549:45" pos:end="1549:45"><literal type="number" pos:start="1549:45" pos:end="1549:45">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1549:48" pos:end="1549:49">-&gt;</operator><name pos:start="1549:50" pos:end="1549:52">val</name> <operator pos:start="1549:54" pos:end="1549:55">==</operator> <literal type="number" pos:start="1549:57" pos:end="1549:57">0</literal>

                       <operator pos:start="1551:24" pos:end="1551:25">&amp;&amp;</operator> <call pos:start="1551:27" pos:end="1551:51"><name pos:start="1551:27" pos:end="1551:38">arg_is_const</name><argument_list pos:start="1551:39" pos:end="1551:51">(<argument pos:start="1551:40" pos:end="1551:50"><expr pos:start="1551:40" pos:end="1551:50"><name pos:start="1551:40" pos:end="1551:50"><name pos:start="1551:40" pos:end="1551:41">op</name><operator pos:start="1551:42" pos:end="1551:43">-&gt;</operator><name pos:start="1551:44" pos:end="1551:47">args</name><index pos:start="1551:48" pos:end="1551:50">[<expr pos:start="1551:49" pos:end="1551:49"><literal type="number" pos:start="1551:49" pos:end="1551:49">4</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                       <operator pos:start="1553:24" pos:end="1553:25">&amp;&amp;</operator> <call pos:start="1553:27" pos:end="1553:47"><name pos:start="1553:27" pos:end="1553:34">arg_info</name><argument_list pos:start="1553:35" pos:end="1553:47">(<argument pos:start="1553:36" pos:end="1553:46"><expr pos:start="1553:36" pos:end="1553:46"><name pos:start="1553:36" pos:end="1553:46"><name pos:start="1553:36" pos:end="1553:37">op</name><operator pos:start="1553:38" pos:end="1553:39">-&gt;</operator><name pos:start="1553:40" pos:end="1553:43">args</name><index pos:start="1553:44" pos:end="1553:46">[<expr pos:start="1553:45" pos:end="1553:45"><literal type="number" pos:start="1553:45" pos:end="1553:45">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1553:48" pos:end="1553:49">-&gt;</operator><name pos:start="1553:50" pos:end="1553:52">val</name> <operator pos:start="1553:54" pos:end="1553:55">==</operator> <literal type="number" pos:start="1553:57" pos:end="1553:57">0</literal></expr>)</condition> <block pos:start="1553:60" pos:end="1573:13">{<block_content pos:start="1559:13" pos:end="1571:42">

                <comment type="block" pos:start="1555:17" pos:end="1557:53">/* Simplify LT/GE comparisons vs zero to a single compare

                   vs the high word of the input.  */</comment>

            <label pos:start="1559:13" pos:end="1559:28"><name pos:start="1559:13" pos:end="1559:27">do_setcond_high</name>:</label>

                <expr_stmt pos:start="1561:17" pos:end="1561:40"><expr pos:start="1561:17" pos:end="1561:39"><call pos:start="1561:17" pos:end="1561:39"><name pos:start="1561:17" pos:end="1561:26">reset_temp</name><argument_list pos:start="1561:27" pos:end="1561:39">(<argument pos:start="1561:28" pos:end="1561:38"><expr pos:start="1561:28" pos:end="1561:38"><name pos:start="1561:28" pos:end="1561:38"><name pos:start="1561:28" pos:end="1561:29">op</name><operator pos:start="1561:30" pos:end="1561:31">-&gt;</operator><name pos:start="1561:32" pos:end="1561:35">args</name><index pos:start="1561:36" pos:end="1561:38">[<expr pos:start="1561:37" pos:end="1561:37"><literal type="number" pos:start="1561:37" pos:end="1561:37">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1563:17" pos:end="1563:48"><expr pos:start="1563:17" pos:end="1563:47"><call pos:start="1563:17" pos:end="1563:37"><name pos:start="1563:17" pos:end="1563:24">arg_info</name><argument_list pos:start="1563:25" pos:end="1563:37">(<argument pos:start="1563:26" pos:end="1563:36"><expr pos:start="1563:26" pos:end="1563:36"><name pos:start="1563:26" pos:end="1563:36"><name pos:start="1563:26" pos:end="1563:27">op</name><operator pos:start="1563:28" pos:end="1563:29">-&gt;</operator><name pos:start="1563:30" pos:end="1563:33">args</name><index pos:start="1563:34" pos:end="1563:36">[<expr pos:start="1563:35" pos:end="1563:35"><literal type="number" pos:start="1563:35" pos:end="1563:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1563:38" pos:end="1563:39">-&gt;</operator><name pos:start="1563:40" pos:end="1563:43">mask</name> <operator pos:start="1563:45" pos:end="1563:45">=</operator> <literal type="number" pos:start="1563:47" pos:end="1563:47">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1565:17" pos:end="1565:47"><expr pos:start="1565:17" pos:end="1565:46"><name pos:start="1565:17" pos:end="1565:23"><name pos:start="1565:17" pos:end="1565:18">op</name><operator pos:start="1565:19" pos:end="1565:20">-&gt;</operator><name pos:start="1565:21" pos:end="1565:23">opc</name></name> <operator pos:start="1565:25" pos:end="1565:25">=</operator> <name pos:start="1565:27" pos:end="1565:46">INDEX_op_setcond_i32</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1567:17" pos:end="1567:42"><expr pos:start="1567:17" pos:end="1567:41"><name pos:start="1567:17" pos:end="1567:27"><name pos:start="1567:17" pos:end="1567:18">op</name><operator pos:start="1567:19" pos:end="1567:20">-&gt;</operator><name pos:start="1567:21" pos:end="1567:24">args</name><index pos:start="1567:25" pos:end="1567:27">[<expr pos:start="1567:26" pos:end="1567:26"><literal type="number" pos:start="1567:26" pos:end="1567:26">1</literal></expr>]</index></name> <operator pos:start="1567:29" pos:end="1567:29">=</operator> <name pos:start="1567:31" pos:end="1567:41"><name pos:start="1567:31" pos:end="1567:32">op</name><operator pos:start="1567:33" pos:end="1567:34">-&gt;</operator><name pos:start="1567:35" pos:end="1567:38">args</name><index pos:start="1567:39" pos:end="1567:41">[<expr pos:start="1567:40" pos:end="1567:40"><literal type="number" pos:start="1567:40" pos:end="1567:40">2</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1569:17" pos:end="1569:42"><expr pos:start="1569:17" pos:end="1569:41"><name pos:start="1569:17" pos:end="1569:27"><name pos:start="1569:17" pos:end="1569:18">op</name><operator pos:start="1569:19" pos:end="1569:20">-&gt;</operator><name pos:start="1569:21" pos:end="1569:24">args</name><index pos:start="1569:25" pos:end="1569:27">[<expr pos:start="1569:26" pos:end="1569:26"><literal type="number" pos:start="1569:26" pos:end="1569:26">2</literal></expr>]</index></name> <operator pos:start="1569:29" pos:end="1569:29">=</operator> <name pos:start="1569:31" pos:end="1569:41"><name pos:start="1569:31" pos:end="1569:32">op</name><operator pos:start="1569:33" pos:end="1569:34">-&gt;</operator><name pos:start="1569:35" pos:end="1569:38">args</name><index pos:start="1569:39" pos:end="1569:41">[<expr pos:start="1569:40" pos:end="1569:40"><literal type="number" pos:start="1569:40" pos:end="1569:40">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1571:17" pos:end="1571:42"><expr pos:start="1571:17" pos:end="1571:41"><name pos:start="1571:17" pos:end="1571:27"><name pos:start="1571:17" pos:end="1571:18">op</name><operator pos:start="1571:19" pos:end="1571:20">-&gt;</operator><name pos:start="1571:21" pos:end="1571:24">args</name><index pos:start="1571:25" pos:end="1571:27">[<expr pos:start="1571:26" pos:end="1571:26"><literal type="number" pos:start="1571:26" pos:end="1571:26">3</literal></expr>]</index></name> <operator pos:start="1571:29" pos:end="1571:29">=</operator> <name pos:start="1571:31" pos:end="1571:41"><name pos:start="1571:31" pos:end="1571:32">op</name><operator pos:start="1571:33" pos:end="1571:34">-&gt;</operator><name pos:start="1571:35" pos:end="1571:38">args</name><index pos:start="1571:39" pos:end="1571:41">[<expr pos:start="1571:40" pos:end="1571:40"><literal type="number" pos:start="1571:40" pos:end="1571:40">5</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1573:15" pos:end="1623:13">else if <condition pos:start="1573:23" pos:end="1573:50">(<expr pos:start="1573:24" pos:end="1573:49"><name pos:start="1573:24" pos:end="1573:34"><name pos:start="1573:24" pos:end="1573:25">op</name><operator pos:start="1573:26" pos:end="1573:27">-&gt;</operator><name pos:start="1573:28" pos:end="1573:31">args</name><index pos:start="1573:32" pos:end="1573:34">[<expr pos:start="1573:33" pos:end="1573:33"><literal type="number" pos:start="1573:33" pos:end="1573:33">5</literal></expr>]</index></name> <operator pos:start="1573:36" pos:end="1573:37">==</operator> <name pos:start="1573:39" pos:end="1573:49">TCG_COND_EQ</name></expr>)</condition> <block pos:start="1573:52" pos:end="1623:13">{<block_content pos:start="1579:17" pos:end="1621:42">

                <comment type="block" pos:start="1575:17" pos:end="1577:41">/* Simplify EQ comparisons where one of the pairs

                   can be simplified.  */</comment>

                <expr_stmt pos:start="1579:17" pos:end="1583:60"><expr pos:start="1579:17" pos:end="1583:59"><name pos:start="1579:17" pos:end="1579:19">tmp</name> <operator pos:start="1579:21" pos:end="1579:21">=</operator> <call pos:start="1579:23" pos:end="1583:59"><name pos:start="1579:23" pos:end="1579:46">do_constant_folding_cond</name><argument_list pos:start="1579:47" pos:end="1583:59">(<argument pos:start="1579:48" pos:end="1579:67"><expr pos:start="1579:48" pos:end="1579:67"><name pos:start="1579:48" pos:end="1579:67">INDEX_op_setcond_i32</name></expr></argument>,

                                               <argument pos:start="1581:48" pos:end="1581:58"><expr pos:start="1581:48" pos:end="1581:58"><name pos:start="1581:48" pos:end="1581:58"><name pos:start="1581:48" pos:end="1581:49">op</name><operator pos:start="1581:50" pos:end="1581:51">-&gt;</operator><name pos:start="1581:52" pos:end="1581:55">args</name><index pos:start="1581:56" pos:end="1581:58">[<expr pos:start="1581:57" pos:end="1581:57"><literal type="number" pos:start="1581:57" pos:end="1581:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1581:61" pos:end="1581:71"><expr pos:start="1581:61" pos:end="1581:71"><name pos:start="1581:61" pos:end="1581:71"><name pos:start="1581:61" pos:end="1581:62">op</name><operator pos:start="1581:63" pos:end="1581:64">-&gt;</operator><name pos:start="1581:65" pos:end="1581:68">args</name><index pos:start="1581:69" pos:end="1581:71">[<expr pos:start="1581:70" pos:end="1581:70"><literal type="number" pos:start="1581:70" pos:end="1581:70">3</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="1583:48" pos:end="1583:58"><expr pos:start="1583:48" pos:end="1583:58"><name pos:start="1583:48" pos:end="1583:58">TCG_COND_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1585:17" pos:end="1593:17"><if pos:start="1585:17" pos:end="1589:17">if <condition pos:start="1585:20" pos:end="1585:29">(<expr pos:start="1585:21" pos:end="1585:28"><name pos:start="1585:21" pos:end="1585:23">tmp</name> <operator pos:start="1585:25" pos:end="1585:26">==</operator> <literal type="number" pos:start="1585:28" pos:end="1585:28">0</literal></expr>)</condition> <block pos:start="1585:31" pos:end="1589:17">{<block_content pos:start="1587:21" pos:end="1587:42">

                    <goto pos:start="1587:21" pos:end="1587:42">goto <name pos:start="1587:26" pos:end="1587:41">do_setcond_const</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="1589:19" pos:end="1593:17">else if <condition pos:start="1589:27" pos:end="1589:36">(<expr pos:start="1589:28" pos:end="1589:35"><name pos:start="1589:28" pos:end="1589:30">tmp</name> <operator pos:start="1589:32" pos:end="1589:33">==</operator> <literal type="number" pos:start="1589:35" pos:end="1589:35">1</literal></expr>)</condition> <block pos:start="1589:38" pos:end="1593:17">{<block_content pos:start="1591:21" pos:end="1591:41">

                    <goto pos:start="1591:21" pos:end="1591:41">goto <name pos:start="1591:26" pos:end="1591:40">do_setcond_high</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1595:17" pos:end="1599:60"><expr pos:start="1595:17" pos:end="1599:59"><name pos:start="1595:17" pos:end="1595:19">tmp</name> <operator pos:start="1595:21" pos:end="1595:21">=</operator> <call pos:start="1595:23" pos:end="1599:59"><name pos:start="1595:23" pos:end="1595:46">do_constant_folding_cond</name><argument_list pos:start="1595:47" pos:end="1599:59">(<argument pos:start="1595:48" pos:end="1595:67"><expr pos:start="1595:48" pos:end="1595:67"><name pos:start="1595:48" pos:end="1595:67">INDEX_op_setcond_i32</name></expr></argument>,

                                               <argument pos:start="1597:48" pos:end="1597:58"><expr pos:start="1597:48" pos:end="1597:58"><name pos:start="1597:48" pos:end="1597:58"><name pos:start="1597:48" pos:end="1597:49">op</name><operator pos:start="1597:50" pos:end="1597:51">-&gt;</operator><name pos:start="1597:52" pos:end="1597:55">args</name><index pos:start="1597:56" pos:end="1597:58">[<expr pos:start="1597:57" pos:end="1597:57"><literal type="number" pos:start="1597:57" pos:end="1597:57">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1597:61" pos:end="1597:71"><expr pos:start="1597:61" pos:end="1597:71"><name pos:start="1597:61" pos:end="1597:71"><name pos:start="1597:61" pos:end="1597:62">op</name><operator pos:start="1597:63" pos:end="1597:64">-&gt;</operator><name pos:start="1597:65" pos:end="1597:68">args</name><index pos:start="1597:69" pos:end="1597:71">[<expr pos:start="1597:70" pos:end="1597:70"><literal type="number" pos:start="1597:70" pos:end="1597:70">4</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="1599:48" pos:end="1599:58"><expr pos:start="1599:48" pos:end="1599:58"><name pos:start="1599:48" pos:end="1599:58">TCG_COND_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1601:17" pos:end="1609:17"><if pos:start="1601:17" pos:end="1605:17">if <condition pos:start="1601:20" pos:end="1601:29">(<expr pos:start="1601:21" pos:end="1601:28"><name pos:start="1601:21" pos:end="1601:23">tmp</name> <operator pos:start="1601:25" pos:end="1601:26">==</operator> <literal type="number" pos:start="1601:28" pos:end="1601:28">0</literal></expr>)</condition> <block pos:start="1601:31" pos:end="1605:17">{<block_content pos:start="1603:21" pos:end="1603:41">

                    <goto pos:start="1603:21" pos:end="1603:41">goto <name pos:start="1603:26" pos:end="1603:40">do_setcond_high</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="1605:19" pos:end="1609:17">else if <condition pos:start="1605:27" pos:end="1605:36">(<expr pos:start="1605:28" pos:end="1605:35"><name pos:start="1605:28" pos:end="1605:30">tmp</name> <operator pos:start="1605:32" pos:end="1605:33">!=</operator> <literal type="number" pos:start="1605:35" pos:end="1605:35">1</literal></expr>)</condition> <block pos:start="1605:38" pos:end="1609:17">{<block_content pos:start="1607:21" pos:end="1607:36">

                    <goto pos:start="1607:21" pos:end="1607:36">goto <name pos:start="1607:26" pos:end="1607:35">do_default</name>;</goto>

                </block_content>}</block></if></if_stmt>

            <label pos:start="1611:13" pos:end="1611:27"><name pos:start="1611:13" pos:end="1611:26">do_setcond_low</name>:</label>

                <expr_stmt pos:start="1613:17" pos:end="1613:40"><expr pos:start="1613:17" pos:end="1613:39"><call pos:start="1613:17" pos:end="1613:39"><name pos:start="1613:17" pos:end="1613:26">reset_temp</name><argument_list pos:start="1613:27" pos:end="1613:39">(<argument pos:start="1613:28" pos:end="1613:38"><expr pos:start="1613:28" pos:end="1613:38"><name pos:start="1613:28" pos:end="1613:38"><name pos:start="1613:28" pos:end="1613:29">op</name><operator pos:start="1613:30" pos:end="1613:31">-&gt;</operator><name pos:start="1613:32" pos:end="1613:35">args</name><index pos:start="1613:36" pos:end="1613:38">[<expr pos:start="1613:37" pos:end="1613:37"><literal type="number" pos:start="1613:37" pos:end="1613:37">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1615:17" pos:end="1615:48"><expr pos:start="1615:17" pos:end="1615:47"><call pos:start="1615:17" pos:end="1615:37"><name pos:start="1615:17" pos:end="1615:24">arg_info</name><argument_list pos:start="1615:25" pos:end="1615:37">(<argument pos:start="1615:26" pos:end="1615:36"><expr pos:start="1615:26" pos:end="1615:36"><name pos:start="1615:26" pos:end="1615:36"><name pos:start="1615:26" pos:end="1615:27">op</name><operator pos:start="1615:28" pos:end="1615:29">-&gt;</operator><name pos:start="1615:30" pos:end="1615:33">args</name><index pos:start="1615:34" pos:end="1615:36">[<expr pos:start="1615:35" pos:end="1615:35"><literal type="number" pos:start="1615:35" pos:end="1615:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1615:38" pos:end="1615:39">-&gt;</operator><name pos:start="1615:40" pos:end="1615:43">mask</name> <operator pos:start="1615:45" pos:end="1615:45">=</operator> <literal type="number" pos:start="1615:47" pos:end="1615:47">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1617:17" pos:end="1617:47"><expr pos:start="1617:17" pos:end="1617:46"><name pos:start="1617:17" pos:end="1617:23"><name pos:start="1617:17" pos:end="1617:18">op</name><operator pos:start="1617:19" pos:end="1617:20">-&gt;</operator><name pos:start="1617:21" pos:end="1617:23">opc</name></name> <operator pos:start="1617:25" pos:end="1617:25">=</operator> <name pos:start="1617:27" pos:end="1617:46">INDEX_op_setcond_i32</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1619:17" pos:end="1619:42"><expr pos:start="1619:17" pos:end="1619:41"><name pos:start="1619:17" pos:end="1619:27"><name pos:start="1619:17" pos:end="1619:18">op</name><operator pos:start="1619:19" pos:end="1619:20">-&gt;</operator><name pos:start="1619:21" pos:end="1619:24">args</name><index pos:start="1619:25" pos:end="1619:27">[<expr pos:start="1619:26" pos:end="1619:26"><literal type="number" pos:start="1619:26" pos:end="1619:26">2</literal></expr>]</index></name> <operator pos:start="1619:29" pos:end="1619:29">=</operator> <name pos:start="1619:31" pos:end="1619:41"><name pos:start="1619:31" pos:end="1619:32">op</name><operator pos:start="1619:33" pos:end="1619:34">-&gt;</operator><name pos:start="1619:35" pos:end="1619:38">args</name><index pos:start="1619:39" pos:end="1619:41">[<expr pos:start="1619:40" pos:end="1619:40"><literal type="number" pos:start="1619:40" pos:end="1619:40">3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1621:17" pos:end="1621:42"><expr pos:start="1621:17" pos:end="1621:41"><name pos:start="1621:17" pos:end="1621:27"><name pos:start="1621:17" pos:end="1621:18">op</name><operator pos:start="1621:19" pos:end="1621:20">-&gt;</operator><name pos:start="1621:21" pos:end="1621:24">args</name><index pos:start="1621:25" pos:end="1621:27">[<expr pos:start="1621:26" pos:end="1621:26"><literal type="number" pos:start="1621:26" pos:end="1621:26">3</literal></expr>]</index></name> <operator pos:start="1621:29" pos:end="1621:29">=</operator> <name pos:start="1621:31" pos:end="1621:41"><name pos:start="1621:31" pos:end="1621:32">op</name><operator pos:start="1621:33" pos:end="1621:34">-&gt;</operator><name pos:start="1621:35" pos:end="1621:38">args</name><index pos:start="1621:39" pos:end="1621:41">[<expr pos:start="1621:40" pos:end="1621:40"><literal type="number" pos:start="1621:40" pos:end="1621:40">5</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1623:15" pos:end="1663:13">else if <condition pos:start="1623:23" pos:end="1623:50">(<expr pos:start="1623:24" pos:end="1623:49"><name pos:start="1623:24" pos:end="1623:34"><name pos:start="1623:24" pos:end="1623:25">op</name><operator pos:start="1623:26" pos:end="1623:27">-&gt;</operator><name pos:start="1623:28" pos:end="1623:31">args</name><index pos:start="1623:32" pos:end="1623:34">[<expr pos:start="1623:33" pos:end="1623:33"><literal type="number" pos:start="1623:33" pos:end="1623:33">5</literal></expr>]</index></name> <operator pos:start="1623:36" pos:end="1623:37">==</operator> <name pos:start="1623:39" pos:end="1623:49">TCG_COND_NE</name></expr>)</condition> <block pos:start="1623:52" pos:end="1663:13">{<block_content pos:start="1629:17" pos:end="1661:32">

                <comment type="block" pos:start="1625:17" pos:end="1627:41">/* Simplify NE comparisons where one of the pairs

                   can be simplified.  */</comment>

                <expr_stmt pos:start="1629:17" pos:end="1633:60"><expr pos:start="1629:17" pos:end="1633:59"><name pos:start="1629:17" pos:end="1629:19">tmp</name> <operator pos:start="1629:21" pos:end="1629:21">=</operator> <call pos:start="1629:23" pos:end="1633:59"><name pos:start="1629:23" pos:end="1629:46">do_constant_folding_cond</name><argument_list pos:start="1629:47" pos:end="1633:59">(<argument pos:start="1629:48" pos:end="1629:67"><expr pos:start="1629:48" pos:end="1629:67"><name pos:start="1629:48" pos:end="1629:67">INDEX_op_setcond_i32</name></expr></argument>,

                                               <argument pos:start="1631:48" pos:end="1631:58"><expr pos:start="1631:48" pos:end="1631:58"><name pos:start="1631:48" pos:end="1631:58"><name pos:start="1631:48" pos:end="1631:49">op</name><operator pos:start="1631:50" pos:end="1631:51">-&gt;</operator><name pos:start="1631:52" pos:end="1631:55">args</name><index pos:start="1631:56" pos:end="1631:58">[<expr pos:start="1631:57" pos:end="1631:57"><literal type="number" pos:start="1631:57" pos:end="1631:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="1631:61" pos:end="1631:71"><expr pos:start="1631:61" pos:end="1631:71"><name pos:start="1631:61" pos:end="1631:71"><name pos:start="1631:61" pos:end="1631:62">op</name><operator pos:start="1631:63" pos:end="1631:64">-&gt;</operator><name pos:start="1631:65" pos:end="1631:68">args</name><index pos:start="1631:69" pos:end="1631:71">[<expr pos:start="1631:70" pos:end="1631:70"><literal type="number" pos:start="1631:70" pos:end="1631:70">3</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="1633:48" pos:end="1633:58"><expr pos:start="1633:48" pos:end="1633:58"><name pos:start="1633:48" pos:end="1633:58">TCG_COND_NE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1635:17" pos:end="1643:17"><if pos:start="1635:17" pos:end="1639:17">if <condition pos:start="1635:20" pos:end="1635:29">(<expr pos:start="1635:21" pos:end="1635:28"><name pos:start="1635:21" pos:end="1635:23">tmp</name> <operator pos:start="1635:25" pos:end="1635:26">==</operator> <literal type="number" pos:start="1635:28" pos:end="1635:28">0</literal></expr>)</condition> <block pos:start="1635:31" pos:end="1639:17">{<block_content pos:start="1637:21" pos:end="1637:41">

                    <goto pos:start="1637:21" pos:end="1637:41">goto <name pos:start="1637:26" pos:end="1637:40">do_setcond_high</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="1639:19" pos:end="1643:17">else if <condition pos:start="1639:27" pos:end="1639:36">(<expr pos:start="1639:28" pos:end="1639:35"><name pos:start="1639:28" pos:end="1639:30">tmp</name> <operator pos:start="1639:32" pos:end="1639:33">==</operator> <literal type="number" pos:start="1639:35" pos:end="1639:35">1</literal></expr>)</condition> <block pos:start="1639:38" pos:end="1643:17">{<block_content pos:start="1641:21" pos:end="1641:42">

                    <goto pos:start="1641:21" pos:end="1641:42">goto <name pos:start="1641:26" pos:end="1641:41">do_setcond_const</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1645:17" pos:end="1649:60"><expr pos:start="1645:17" pos:end="1649:59"><name pos:start="1645:17" pos:end="1645:19">tmp</name> <operator pos:start="1645:21" pos:end="1645:21">=</operator> <call pos:start="1645:23" pos:end="1649:59"><name pos:start="1645:23" pos:end="1645:46">do_constant_folding_cond</name><argument_list pos:start="1645:47" pos:end="1649:59">(<argument pos:start="1645:48" pos:end="1645:67"><expr pos:start="1645:48" pos:end="1645:67"><name pos:start="1645:48" pos:end="1645:67">INDEX_op_setcond_i32</name></expr></argument>,

                                               <argument pos:start="1647:48" pos:end="1647:58"><expr pos:start="1647:48" pos:end="1647:58"><name pos:start="1647:48" pos:end="1647:58"><name pos:start="1647:48" pos:end="1647:49">op</name><operator pos:start="1647:50" pos:end="1647:51">-&gt;</operator><name pos:start="1647:52" pos:end="1647:55">args</name><index pos:start="1647:56" pos:end="1647:58">[<expr pos:start="1647:57" pos:end="1647:57"><literal type="number" pos:start="1647:57" pos:end="1647:57">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="1647:61" pos:end="1647:71"><expr pos:start="1647:61" pos:end="1647:71"><name pos:start="1647:61" pos:end="1647:71"><name pos:start="1647:61" pos:end="1647:62">op</name><operator pos:start="1647:63" pos:end="1647:64">-&gt;</operator><name pos:start="1647:65" pos:end="1647:68">args</name><index pos:start="1647:69" pos:end="1647:71">[<expr pos:start="1647:70" pos:end="1647:70"><literal type="number" pos:start="1647:70" pos:end="1647:70">4</literal></expr>]</index></name></expr></argument>,

                                               <argument pos:start="1649:48" pos:end="1649:58"><expr pos:start="1649:48" pos:end="1649:58"><name pos:start="1649:48" pos:end="1649:58">TCG_COND_NE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1651:17" pos:end="1659:17"><if pos:start="1651:17" pos:end="1655:17">if <condition pos:start="1651:20" pos:end="1651:29">(<expr pos:start="1651:21" pos:end="1651:28"><name pos:start="1651:21" pos:end="1651:23">tmp</name> <operator pos:start="1651:25" pos:end="1651:26">==</operator> <literal type="number" pos:start="1651:28" pos:end="1651:28">0</literal></expr>)</condition> <block pos:start="1651:31" pos:end="1655:17">{<block_content pos:start="1653:21" pos:end="1653:40">

                    <goto pos:start="1653:21" pos:end="1653:40">goto <name pos:start="1653:26" pos:end="1653:39">do_setcond_low</name>;</goto>

                </block_content>}</block></if> <if type="elseif" pos:start="1655:19" pos:end="1659:17">else if <condition pos:start="1655:27" pos:end="1655:36">(<expr pos:start="1655:28" pos:end="1655:35"><name pos:start="1655:28" pos:end="1655:30">tmp</name> <operator pos:start="1655:32" pos:end="1655:33">==</operator> <literal type="number" pos:start="1655:35" pos:end="1655:35">1</literal></expr>)</condition> <block pos:start="1655:38" pos:end="1659:17">{<block_content pos:start="1657:21" pos:end="1657:42">

                    <goto pos:start="1657:21" pos:end="1657:42">goto <name pos:start="1657:26" pos:end="1657:41">do_setcond_const</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <goto pos:start="1661:17" pos:end="1661:32">goto <name pos:start="1661:22" pos:end="1661:31">do_default</name>;</goto>

            </block_content>}</block></if> <else pos:start="1663:15" pos:end="1667:13">else <block pos:start="1663:20" pos:end="1667:13">{<block_content pos:start="1665:17" pos:end="1665:32">

                <goto pos:start="1665:17" pos:end="1665:32">goto <name pos:start="1665:22" pos:end="1665:31">do_default</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1669:13" pos:end="1669:18">break;</break>



        <case pos:start="1673:9" pos:end="1673:27">case <expr pos:start="1673:14" pos:end="1673:26"><name pos:start="1673:14" pos:end="1673:26">INDEX_op_call</name></expr>:</case>

            <if_stmt pos:start="1675:13" pos:end="1689:13"><if pos:start="1675:13" pos:end="1689:13">if <condition pos:start="1675:16" pos:end="1677:76">(<expr pos:start="1675:17" pos:end="1677:75"><operator pos:start="1675:17" pos:end="1675:17">!</operator><operator pos:start="1675:18" pos:end="1675:18">(</operator><name pos:start="1675:19" pos:end="1675:51"><name pos:start="1675:19" pos:end="1675:20">op</name><operator pos:start="1675:21" pos:end="1675:22">-&gt;</operator><name pos:start="1675:23" pos:end="1675:26">args</name><index pos:start="1675:27" pos:end="1675:51">[<expr pos:start="1675:28" pos:end="1675:50"><name pos:start="1675:28" pos:end="1675:35">nb_oargs</name> <operator pos:start="1675:37" pos:end="1675:37">+</operator> <name pos:start="1675:39" pos:end="1675:46">nb_iargs</name> <operator pos:start="1675:48" pos:end="1675:48">+</operator> <literal type="number" pos:start="1675:50" pos:end="1675:50">1</literal></expr>]</index></name>

                  <operator pos:start="1677:19" pos:end="1677:19">&amp;</operator> <operator pos:start="1677:21" pos:end="1677:21">(</operator><name pos:start="1677:22" pos:end="1677:45">TCG_CALL_NO_READ_GLOBALS</name> <operator pos:start="1677:47" pos:end="1677:47">|</operator> <name pos:start="1677:49" pos:end="1677:73">TCG_CALL_NO_WRITE_GLOBALS</name><operator pos:start="1677:74" pos:end="1677:74">)</operator><operator pos:start="1677:75" pos:end="1677:75">)</operator></expr>)</condition> <block pos:start="1677:78" pos:end="1689:13">{<block_content pos:start="1679:17" pos:end="1687:17">

                <for pos:start="1679:17" pos:end="1687:17">for <control pos:start="1679:21" pos:end="1679:48">(<init pos:start="1679:22" pos:end="1679:27"><expr pos:start="1679:22" pos:end="1679:26"><name pos:start="1679:22" pos:end="1679:22">i</name> <operator pos:start="1679:24" pos:end="1679:24">=</operator> <literal type="number" pos:start="1679:26" pos:end="1679:26">0</literal></expr>;</init> <condition pos:start="1679:29" pos:end="1679:43"><expr pos:start="1679:29" pos:end="1679:42"><name pos:start="1679:29" pos:end="1679:29">i</name> <operator pos:start="1679:31" pos:end="1679:31">&lt;</operator> <name pos:start="1679:33" pos:end="1679:42">nb_globals</name></expr>;</condition> <incr pos:start="1679:45" pos:end="1679:47"><expr pos:start="1679:45" pos:end="1679:47"><name pos:start="1679:45" pos:end="1679:45">i</name><operator pos:start="1679:46" pos:end="1679:47">++</operator></expr></incr>)</control> <block pos:start="1679:50" pos:end="1687:17">{<block_content pos:start="1681:21" pos:end="1685:21">

                    <if_stmt pos:start="1681:21" pos:end="1685:21"><if pos:start="1681:21" pos:end="1685:21">if <condition pos:start="1681:24" pos:end="1681:50">(<expr pos:start="1681:25" pos:end="1681:49"><call pos:start="1681:25" pos:end="1681:49"><name pos:start="1681:25" pos:end="1681:32">test_bit</name><argument_list pos:start="1681:33" pos:end="1681:49">(<argument pos:start="1681:34" pos:end="1681:34"><expr pos:start="1681:34" pos:end="1681:34"><name pos:start="1681:34" pos:end="1681:34">i</name></expr></argument>, <argument pos:start="1681:37" pos:end="1681:48"><expr pos:start="1681:37" pos:end="1681:48"><name pos:start="1681:37" pos:end="1681:48"><name pos:start="1681:37" pos:end="1681:46">temps_used</name><operator pos:start="1681:47" pos:end="1681:47">.</operator><name pos:start="1681:48" pos:end="1681:48">l</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1681:52" pos:end="1685:21">{<block_content pos:start="1683:25" pos:end="1683:47">

                        <expr_stmt pos:start="1683:25" pos:end="1683:47"><expr pos:start="1683:25" pos:end="1683:46"><call pos:start="1683:25" pos:end="1683:46"><name pos:start="1683:25" pos:end="1683:32">reset_ts</name><argument_list pos:start="1683:33" pos:end="1683:46">(<argument pos:start="1683:34" pos:end="1683:45"><expr pos:start="1683:34" pos:end="1683:45"><operator pos:start="1683:34" pos:end="1683:34">&amp;</operator><name pos:start="1683:35" pos:end="1683:45"><name pos:start="1683:35" pos:end="1683:35">s</name><operator pos:start="1683:36" pos:end="1683:37">-&gt;</operator><name pos:start="1683:38" pos:end="1683:42">temps</name><index pos:start="1683:43" pos:end="1683:45">[<expr pos:start="1683:44" pos:end="1683:44"><name pos:start="1683:44" pos:end="1683:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="1691:13" pos:end="1691:33">goto <name pos:start="1691:18" pos:end="1691:32">do_reset_output</name>;</goto>



        <default pos:start="1695:9" pos:end="1695:16">default:</default>

        <label pos:start="1697:9" pos:end="1697:19"><name pos:start="1697:9" pos:end="1697:18">do_default</name>:</label>

            <comment type="block" pos:start="1699:13" pos:end="1707:67">/* Default case: we know nothing about operation (or were unable

               to compute the operation result) so no propagation is done.

               We trash everything if the operation is the end of a basic

               block, otherwise we only trash the output args.  "mask" is

               the non-zero bits mask for the first output arg.  */</comment>

            <if_stmt pos:start="1709:13" pos:end="1733:13"><if pos:start="1709:13" pos:end="1713:13">if <condition pos:start="1709:16" pos:end="1709:44">(<expr pos:start="1709:17" pos:end="1709:43"><name pos:start="1709:17" pos:end="1709:26"><name pos:start="1709:17" pos:end="1709:19">def</name><operator pos:start="1709:20" pos:end="1709:21">-&gt;</operator><name pos:start="1709:22" pos:end="1709:26">flags</name></name> <operator pos:start="1709:28" pos:end="1709:28">&amp;</operator> <name pos:start="1709:30" pos:end="1709:43">TCG_OPF_BB_END</name></expr>)</condition> <block pos:start="1709:46" pos:end="1713:13">{<block_content pos:start="1711:17" pos:end="1711:52">

                <expr_stmt pos:start="1711:17" pos:end="1711:52"><expr pos:start="1711:17" pos:end="1711:51"><call pos:start="1711:17" pos:end="1711:51"><name pos:start="1711:17" pos:end="1711:27">bitmap_zero</name><argument_list pos:start="1711:28" pos:end="1711:51">(<argument pos:start="1711:29" pos:end="1711:40"><expr pos:start="1711:29" pos:end="1711:40"><name pos:start="1711:29" pos:end="1711:40"><name pos:start="1711:29" pos:end="1711:38">temps_used</name><operator pos:start="1711:39" pos:end="1711:39">.</operator><name pos:start="1711:40" pos:end="1711:40">l</name></name></expr></argument>, <argument pos:start="1711:43" pos:end="1711:50"><expr pos:start="1711:43" pos:end="1711:50"><name pos:start="1711:43" pos:end="1711:50">nb_temps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1713:15" pos:end="1733:13">else <block pos:start="1713:20" pos:end="1733:13">{<block_content pos:start="1715:9" pos:end="1731:17">

        <label pos:start="1715:9" pos:end="1715:24"><name pos:start="1715:9" pos:end="1715:23">do_reset_output</name>:</label>

                <for pos:start="1717:17" pos:end="1731:17">for <control pos:start="1717:21" pos:end="1717:46">(<init pos:start="1717:22" pos:end="1717:27"><expr pos:start="1717:22" pos:end="1717:26"><name pos:start="1717:22" pos:end="1717:22">i</name> <operator pos:start="1717:24" pos:end="1717:24">=</operator> <literal type="number" pos:start="1717:26" pos:end="1717:26">0</literal></expr>;</init> <condition pos:start="1717:29" pos:end="1717:41"><expr pos:start="1717:29" pos:end="1717:40"><name pos:start="1717:29" pos:end="1717:29">i</name> <operator pos:start="1717:31" pos:end="1717:31">&lt;</operator> <name pos:start="1717:33" pos:end="1717:40">nb_oargs</name></expr>;</condition> <incr pos:start="1717:43" pos:end="1717:45"><expr pos:start="1717:43" pos:end="1717:45"><name pos:start="1717:43" pos:end="1717:43">i</name><operator pos:start="1717:44" pos:end="1717:45">++</operator></expr></incr>)</control> <block pos:start="1717:48" pos:end="1731:17">{<block_content pos:start="1719:21" pos:end="1729:21">

                    <expr_stmt pos:start="1719:21" pos:end="1719:44"><expr pos:start="1719:21" pos:end="1719:43"><call pos:start="1719:21" pos:end="1719:43"><name pos:start="1719:21" pos:end="1719:30">reset_temp</name><argument_list pos:start="1719:31" pos:end="1719:43">(<argument pos:start="1719:32" pos:end="1719:42"><expr pos:start="1719:32" pos:end="1719:42"><name pos:start="1719:32" pos:end="1719:42"><name pos:start="1719:32" pos:end="1719:33">op</name><operator pos:start="1719:34" pos:end="1719:35">-&gt;</operator><name pos:start="1719:36" pos:end="1719:39">args</name><index pos:start="1719:40" pos:end="1719:42">[<expr pos:start="1719:41" pos:end="1719:41"><name pos:start="1719:41" pos:end="1719:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="1721:21" pos:end="1723:76">/* Save the corresponding known-zero bits mask for the

                       first output argument (only one supported so far). */</comment>

                    <if_stmt pos:start="1725:21" pos:end="1729:21"><if pos:start="1725:21" pos:end="1729:21">if <condition pos:start="1725:24" pos:end="1725:31">(<expr pos:start="1725:25" pos:end="1725:30"><name pos:start="1725:25" pos:end="1725:25">i</name> <operator pos:start="1725:27" pos:end="1725:28">==</operator> <literal type="number" pos:start="1725:30" pos:end="1725:30">0</literal></expr>)</condition> <block pos:start="1725:33" pos:end="1729:21">{<block_content pos:start="1727:25" pos:end="1727:59">

                        <expr_stmt pos:start="1727:25" pos:end="1727:59"><expr pos:start="1727:25" pos:end="1727:58"><call pos:start="1727:25" pos:end="1727:45"><name pos:start="1727:25" pos:end="1727:32">arg_info</name><argument_list pos:start="1727:33" pos:end="1727:45">(<argument pos:start="1727:34" pos:end="1727:44"><expr pos:start="1727:34" pos:end="1727:44"><name pos:start="1727:34" pos:end="1727:44"><name pos:start="1727:34" pos:end="1727:35">op</name><operator pos:start="1727:36" pos:end="1727:37">-&gt;</operator><name pos:start="1727:38" pos:end="1727:41">args</name><index pos:start="1727:42" pos:end="1727:44">[<expr pos:start="1727:43" pos:end="1727:43"><name pos:start="1727:43" pos:end="1727:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="1727:46" pos:end="1727:47">-&gt;</operator><name pos:start="1727:48" pos:end="1727:51">mask</name> <operator pos:start="1727:53" pos:end="1727:53">=</operator> <name pos:start="1727:55" pos:end="1727:58">mask</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1735:13" pos:end="1735:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="1741:9" pos:end="1741:68">/* Eliminate duplicate and redundant fence instructions.  */</comment>

        <if_stmt pos:start="1743:9" pos:end="1813:9"><if pos:start="1743:9" pos:end="1809:9">if <condition pos:start="1743:12" pos:end="1743:20">(<expr pos:start="1743:13" pos:end="1743:19"><name pos:start="1743:13" pos:end="1743:19">prev_mb</name></expr>)</condition> <block pos:start="1743:22" pos:end="1809:9">{<block_content pos:start="1745:13" pos:end="1807:13">

            <switch pos:start="1745:13" pos:end="1807:13">switch <condition pos:start="1745:20" pos:end="1745:24">(<expr pos:start="1745:21" pos:end="1745:23"><name pos:start="1745:21" pos:end="1745:23">opc</name></expr>)</condition> <block pos:start="1745:26" pos:end="1807:13">{<block_content pos:start="1747:13" pos:end="1805:22">

            <case pos:start="1747:13" pos:end="1747:29">case <expr pos:start="1747:18" pos:end="1747:28"><name pos:start="1747:18" pos:end="1747:28">INDEX_op_mb</name></expr>:</case>

                <comment type="block" pos:start="1749:17" pos:end="1769:19">/* Merge two barriers of the same type into one,

                 * or a weaker barrier into a stronger one,

                 * or two weaker barriers into a stronger one.

                 *   mb X; mb Y =&gt; mb X|Y

                 *   mb; strl =&gt; mb; st

                 *   ldaq; mb =&gt; ld; mb

                 *   ldaq; strl =&gt; ld; mb; st

                 * Other combinations are also merged into a strong

                 * barrier.  This is stricter than specified but for

                 * the purposes of TCG is better than not optimizing.

                 */</comment>

                <expr_stmt pos:start="1771:17" pos:end="1771:48"><expr pos:start="1771:17" pos:end="1771:47"><name pos:start="1771:17" pos:end="1771:32"><name pos:start="1771:17" pos:end="1771:23">prev_mb</name><operator pos:start="1771:24" pos:end="1771:25">-&gt;</operator><name pos:start="1771:26" pos:end="1771:29">args</name><index pos:start="1771:30" pos:end="1771:32">[<expr pos:start="1771:31" pos:end="1771:31"><literal type="number" pos:start="1771:31" pos:end="1771:31">0</literal></expr>]</index></name> <operator pos:start="1771:34" pos:end="1771:35">|=</operator> <name pos:start="1771:37" pos:end="1771:47"><name pos:start="1771:37" pos:end="1771:38">op</name><operator pos:start="1771:39" pos:end="1771:40">-&gt;</operator><name pos:start="1771:41" pos:end="1771:44">args</name><index pos:start="1771:45" pos:end="1771:47">[<expr pos:start="1771:46" pos:end="1771:46"><literal type="number" pos:start="1771:46" pos:end="1771:46">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1773:17" pos:end="1773:37"><expr pos:start="1773:17" pos:end="1773:36"><call pos:start="1773:17" pos:end="1773:36"><name pos:start="1773:17" pos:end="1773:29">tcg_op_remove</name><argument_list pos:start="1773:30" pos:end="1773:36">(<argument pos:start="1773:31" pos:end="1773:31"><expr pos:start="1773:31" pos:end="1773:31"><name pos:start="1773:31" pos:end="1773:31">s</name></expr></argument>, <argument pos:start="1773:34" pos:end="1773:35"><expr pos:start="1773:34" pos:end="1773:35"><name pos:start="1773:34" pos:end="1773:35">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1775:17" pos:end="1775:22">break;</break>



            <default pos:start="1779:13" pos:end="1779:20">default:</default>

                <comment type="block" pos:start="1781:17" pos:end="1781:72">/* Opcodes that end the block stop the optimization.  */</comment>

                <if_stmt pos:start="1783:17" pos:end="1787:17"><if pos:start="1783:17" pos:end="1787:17">if <condition pos:start="1783:20" pos:end="1783:55">(<expr pos:start="1783:21" pos:end="1783:54"><operator pos:start="1783:21" pos:end="1783:21">(</operator><name pos:start="1783:22" pos:end="1783:31"><name pos:start="1783:22" pos:end="1783:24">def</name><operator pos:start="1783:25" pos:end="1783:26">-&gt;</operator><name pos:start="1783:27" pos:end="1783:31">flags</name></name> <operator pos:start="1783:33" pos:end="1783:33">&amp;</operator> <name pos:start="1783:35" pos:end="1783:48">TCG_OPF_BB_END</name><operator pos:start="1783:49" pos:end="1783:49">)</operator> <operator pos:start="1783:51" pos:end="1783:52">==</operator> <literal type="number" pos:start="1783:54" pos:end="1783:54">0</literal></expr>)</condition> <block pos:start="1783:57" pos:end="1787:17">{<block_content pos:start="1785:21" pos:end="1785:26">

                    <break pos:start="1785:21" pos:end="1785:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="1789:17" pos:end="1789:30">/* fallthru */</comment>

            <case pos:start="1791:13" pos:end="1791:38">case <expr pos:start="1791:18" pos:end="1791:37"><name pos:start="1791:18" pos:end="1791:37">INDEX_op_qemu_ld_i32</name></expr>:</case>

            <case pos:start="1793:13" pos:end="1793:38">case <expr pos:start="1793:18" pos:end="1793:37"><name pos:start="1793:18" pos:end="1793:37">INDEX_op_qemu_ld_i64</name></expr>:</case>

            <case pos:start="1795:13" pos:end="1795:38">case <expr pos:start="1795:18" pos:end="1795:37"><name pos:start="1795:18" pos:end="1795:37">INDEX_op_qemu_st_i32</name></expr>:</case>

            <case pos:start="1797:13" pos:end="1797:38">case <expr pos:start="1797:18" pos:end="1797:37"><name pos:start="1797:18" pos:end="1797:37">INDEX_op_qemu_st_i64</name></expr>:</case>

            <case pos:start="1799:13" pos:end="1799:31">case <expr pos:start="1799:18" pos:end="1799:30"><name pos:start="1799:18" pos:end="1799:30">INDEX_op_call</name></expr>:</case>

                <comment type="block" pos:start="1801:17" pos:end="1801:77">/* Opcodes that touch guest memory stop the optimization.  */</comment>

                <expr_stmt pos:start="1803:17" pos:end="1803:31"><expr pos:start="1803:17" pos:end="1803:30"><name pos:start="1803:17" pos:end="1803:23">prev_mb</name> <operator pos:start="1803:25" pos:end="1803:25">=</operator> <name pos:start="1803:27" pos:end="1803:30">NULL</name></expr>;</expr_stmt>

                <break pos:start="1805:17" pos:end="1805:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <if type="elseif" pos:start="1809:11" pos:end="1813:9">else if <condition pos:start="1809:19" pos:end="1809:38">(<expr pos:start="1809:20" pos:end="1809:37"><name pos:start="1809:20" pos:end="1809:22">opc</name> <operator pos:start="1809:24" pos:end="1809:25">==</operator> <name pos:start="1809:27" pos:end="1809:37">INDEX_op_mb</name></expr>)</condition> <block pos:start="1809:40" pos:end="1813:9">{<block_content pos:start="1811:13" pos:end="1811:25">

            <expr_stmt pos:start="1811:13" pos:end="1811:25"><expr pos:start="1811:13" pos:end="1811:24"><name pos:start="1811:13" pos:end="1811:19">prev_mb</name> <operator pos:start="1811:21" pos:end="1811:21">=</operator> <name pos:start="1811:23" pos:end="1811:24">op</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    }

}
</unit>
