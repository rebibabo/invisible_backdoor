<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21246.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">nbd_coroutine_end</name><parameter_list pos:start="1:30" pos:end="3:50">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:49"><decl pos:start="3:31" pos:end="3:49"><type pos:start="3:31" pos:end="3:49"><name pos:start="3:31" pos:end="3:40">NBDRequest</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:49">request</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="29:1">{<block_content pos:start="7:5" pos:end="27:5">

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">NBDClientSession</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">s</name> <init pos:start="7:25" pos:end="7:52">= <expr pos:start="7:27" pos:end="7:52"><call pos:start="7:27" pos:end="7:52"><name pos:start="7:27" pos:end="7:48">nbd_get_client_session</name><argument_list pos:start="7:49" pos:end="7:52">(<argument pos:start="7:50" pos:end="7:51"><expr pos:start="7:50" pos:end="7:51"><name pos:start="7:50" pos:end="7:51">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:47"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name> <init pos:start="9:11" pos:end="9:47">= <expr pos:start="9:13" pos:end="9:47"><call pos:start="9:13" pos:end="9:47"><name pos:start="9:13" pos:end="9:27">HANDLE_TO_INDEX</name><argument_list pos:start="9:28" pos:end="9:47">(<argument pos:start="9:29" pos:end="9:29"><expr pos:start="9:29" pos:end="9:29"><name pos:start="9:29" pos:end="9:29">s</name></expr></argument>, <argument pos:start="9:32" pos:end="9:46"><expr pos:start="9:32" pos:end="9:46"><name pos:start="9:32" pos:end="9:46"><name pos:start="9:32" pos:end="9:38">request</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:46">handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:21">recv_coroutine</name><index pos:start="13:22" pos:end="13:24">[<expr pos:start="13:23" pos:end="13:23"><name pos:start="13:23" pos:end="13:23">i</name></expr>]</index></name> <operator pos:start="13:26" pos:end="13:26">=</operator> <name pos:start="13:28" pos:end="13:31">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:19"><expr pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:16">in_flight</name></name><operator pos:start="15:17" pos:end="15:18">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:38"><expr pos:start="17:5" pos:end="17:37"><call pos:start="17:5" pos:end="17:37"><name pos:start="17:5" pos:end="17:22">qemu_co_queue_next</name><argument_list pos:start="17:23" pos:end="17:37">(<argument pos:start="17:24" pos:end="17:36"><expr pos:start="17:24" pos:end="17:36"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:36"><name pos:start="17:25" pos:end="17:25">s</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:36">free_sema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:56">/* Kick the read_reply_co to get the next reply.  */</comment>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:25">(<expr pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:24">read_reply_co</name></name></expr>)</condition> <block pos:start="23:27" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:38">

        <expr_stmt pos:start="25:9" pos:end="25:38"><expr pos:start="25:9" pos:end="25:37"><call pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:19">aio_co_wake</name><argument_list pos:start="25:20" pos:end="25:37">(<argument pos:start="25:21" pos:end="25:36"><expr pos:start="25:21" pos:end="25:36"><name pos:start="25:21" pos:end="25:36"><name pos:start="25:21" pos:end="25:21">s</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:36">read_reply_co</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
