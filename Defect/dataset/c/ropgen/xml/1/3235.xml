<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3235.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">cloop_open</name><parameter_list pos:start="1:22" pos:end="1:54">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:53"><decl pos:start="1:45" pos:end="1:53"><type pos:start="1:45" pos:end="1:53"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:53">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:14">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BDRVCloopState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:34">= <expr pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:26">bs</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:25">offsets_size</name></decl>, <decl pos:start="7:28" pos:end="7:56"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:28" pos:end="7:52">max_compressed_block_size</name> <init pos:start="7:54" pos:end="7:56">= <expr pos:start="7:56" pos:end="7:56"><literal type="number" pos:start="7:56" pos:end="7:56">1</literal></expr></init></decl>, <decl pos:start="7:59" pos:end="7:59"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:59" pos:end="7:59">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:22"><expr pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:6">bs</name><operator pos:start="11:7" pos:end="11:8">-&gt;</operator><name pos:start="11:9" pos:end="11:17">read_only</name></name> <operator pos:start="11:19" pos:end="11:19">=</operator> <literal type="number" pos:start="11:21" pos:end="11:21">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:21">/* read header */</comment>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:57">(<expr pos:start="17:9" pos:end="17:56"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:18">bdrv_pread</name><argument_list pos:start="17:19" pos:end="17:52">(<argument pos:start="17:20" pos:end="17:27"><expr pos:start="17:20" pos:end="17:27"><name pos:start="17:20" pos:end="17:27"><name pos:start="17:20" pos:end="17:21">bs</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:27">file</name></name></expr></argument>, <argument pos:start="17:30" pos:end="17:32"><expr pos:start="17:30" pos:end="17:32"><literal type="number" pos:start="17:30" pos:end="17:32">128</literal></expr></argument>, <argument pos:start="17:35" pos:end="17:48"><expr pos:start="17:35" pos:end="17:48"><operator pos:start="17:35" pos:end="17:35">&amp;</operator><name pos:start="17:36" pos:end="17:48"><name pos:start="17:36" pos:end="17:36">s</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:48">block_size</name></name></expr></argument>, <argument pos:start="17:51" pos:end="17:51"><expr pos:start="17:51" pos:end="17:51"><literal type="number" pos:start="17:51" pos:end="17:51">4</literal></expr></argument>)</argument_list></call> <operator pos:start="17:54" pos:end="17:54">&lt;</operator> <literal type="number" pos:start="17:56" pos:end="17:56">4</literal></expr>)</condition> <block pos:start="17:59" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:25">

        <goto pos:start="19:9" pos:end="19:25">goto <name pos:start="19:14" pos:end="19:24">cloop_close</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:17">block_size</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:46"><name pos:start="23:21" pos:end="23:31">be32_to_cpu</name><argument_list pos:start="23:32" pos:end="23:46">(<argument pos:start="23:33" pos:end="23:45"><expr pos:start="23:33" pos:end="23:45"><name pos:start="23:33" pos:end="23:45"><name pos:start="23:33" pos:end="23:33">s</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:45">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:59">(<expr pos:start="27:9" pos:end="27:58"><call pos:start="27:9" pos:end="27:54"><name pos:start="27:9" pos:end="27:18">bdrv_pread</name><argument_list pos:start="27:19" pos:end="27:54">(<argument pos:start="27:20" pos:end="27:27"><expr pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:27"><name pos:start="27:20" pos:end="27:21">bs</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:27">file</name></name></expr></argument>, <argument pos:start="27:30" pos:end="27:36"><expr pos:start="27:30" pos:end="27:36"><literal type="number" pos:start="27:30" pos:end="27:34">128</literal> <operator pos:start="27:34" pos:end="27:34">+</operator> <literal type="number" pos:start="27:36" pos:end="27:36">4</literal></expr></argument>, <argument pos:start="27:39" pos:end="27:50"><expr pos:start="27:39" pos:end="27:50"><operator pos:start="27:39" pos:end="27:39">&amp;</operator><name pos:start="27:40" pos:end="27:50"><name pos:start="27:40" pos:end="27:40">s</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:50">n_blocks</name></name></expr></argument>, <argument pos:start="27:53" pos:end="27:53"><expr pos:start="27:53" pos:end="27:53"><literal type="number" pos:start="27:53" pos:end="27:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="27:56" pos:end="27:56">&lt;</operator> <literal type="number" pos:start="27:58" pos:end="27:58">4</literal></expr>)</condition> <block pos:start="27:61" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:25">

        <goto pos:start="29:9" pos:end="29:25">goto <name pos:start="29:14" pos:end="29:24">cloop_close</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:15">n_blocks</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:42"><name pos:start="33:19" pos:end="33:29">be32_to_cpu</name><argument_list pos:start="33:30" pos:end="33:42">(<argument pos:start="33:31" pos:end="33:41"><expr pos:start="33:31" pos:end="33:41"><name pos:start="33:31" pos:end="33:41"><name pos:start="33:31" pos:end="33:31">s</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:41">n_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:22">/* read offsets */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:50"><expr pos:start="39:5" pos:end="39:49"><name pos:start="39:5" pos:end="39:16">offsets_size</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:30"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:30">n_blocks</name></name> <operator pos:start="39:32" pos:end="39:32">*</operator> <sizeof pos:start="39:34" pos:end="39:49">sizeof<argument_list pos:start="39:40" pos:end="39:49">(<argument pos:start="39:41" pos:end="39:48"><expr pos:start="39:41" pos:end="39:48"><name pos:start="39:41" pos:end="39:48">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:14">offsets</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:39"><name pos:start="41:18" pos:end="41:25">g_malloc</name><argument_list pos:start="41:26" pos:end="41:39">(<argument pos:start="41:27" pos:end="41:38"><expr pos:start="41:27" pos:end="41:38"><name pos:start="41:27" pos:end="41:38">offsets_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="45:25">(<expr pos:start="43:9" pos:end="45:24"><call pos:start="43:9" pos:end="43:67"><name pos:start="43:9" pos:end="43:18">bdrv_pread</name><argument_list pos:start="43:19" pos:end="43:67">(<argument pos:start="43:20" pos:end="43:27"><expr pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:21">bs</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:27">file</name></name></expr></argument>, <argument pos:start="43:30" pos:end="43:40"><expr pos:start="43:30" pos:end="43:40"><literal type="number" pos:start="43:30" pos:end="43:34">128</literal> <operator pos:start="43:34" pos:end="43:34">+</operator> <literal type="number" pos:start="43:36" pos:end="43:38">4</literal> <operator pos:start="43:38" pos:end="43:38">+</operator> <literal type="number" pos:start="43:40" pos:end="43:40">4</literal></expr></argument>, <argument pos:start="43:43" pos:end="43:52"><expr pos:start="43:43" pos:end="43:52"><name pos:start="43:43" pos:end="43:52"><name pos:start="43:43" pos:end="43:43">s</name><operator pos:start="43:44" pos:end="43:45">-&gt;</operator><name pos:start="43:46" pos:end="43:52">offsets</name></name></expr></argument>, <argument pos:start="43:55" pos:end="43:66"><expr pos:start="43:55" pos:end="43:66"><name pos:start="43:55" pos:end="43:66">offsets_size</name></expr></argument>)</argument_list></call> <operator pos:start="43:69" pos:end="43:69">&lt;</operator>

            <name pos:start="45:13" pos:end="45:24">offsets_size</name></expr>)</condition> <block pos:start="45:27" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:25">

        <goto pos:start="47:9" pos:end="47:25">goto <name pos:start="47:14" pos:end="47:24">cloop_close</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <for pos:start="51:5" pos:end="67:5">for<control pos:start="51:8" pos:end="51:30">(<init pos:start="51:9" pos:end="51:12"><expr pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:9">i</name><operator pos:start="51:10" pos:end="51:10">=</operator><literal type="number" pos:start="51:11" pos:end="51:11">0</literal></expr>;</init><condition pos:start="51:13" pos:end="51:26"><expr pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:13">i</name><operator pos:start="51:14" pos:end="51:14">&lt;</operator><name pos:start="51:15" pos:end="51:25"><name pos:start="51:15" pos:end="51:15">s</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:25">n_blocks</name></name></expr>;</condition><incr pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><name pos:start="51:27" pos:end="51:27">i</name><operator pos:start="51:28" pos:end="51:29">++</operator></expr></incr>)</control> <block pos:start="51:32" pos:end="67:5">{<block_content pos:start="53:9" pos:end="65:9">

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:18">offsets</name><index pos:start="53:19" pos:end="53:21">[<expr pos:start="53:20" pos:end="53:20"><name pos:start="53:20" pos:end="53:20">i</name></expr>]</index></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:50"><name pos:start="53:25" pos:end="53:35">be64_to_cpu</name><argument_list pos:start="53:36" pos:end="53:50">(<argument pos:start="53:37" pos:end="53:49"><expr pos:start="53:37" pos:end="53:49"><name pos:start="53:37" pos:end="53:49"><name pos:start="53:37" pos:end="53:37">s</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:46">offsets</name><index pos:start="53:47" pos:end="53:49">[<expr pos:start="53:48" pos:end="53:48"><name pos:start="53:48" pos:end="53:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="65:9"><if pos:start="55:9" pos:end="65:9">if <condition pos:start="55:12" pos:end="55:18">(<expr pos:start="55:13" pos:end="55:17"><name pos:start="55:13" pos:end="55:13">i</name> <operator pos:start="55:15" pos:end="55:15">&gt;</operator> <literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr>)</condition> <block pos:start="55:20" pos:end="65:9">{<block_content pos:start="57:13" pos:end="63:13">

            <decl_stmt pos:start="57:13" pos:end="57:62"><decl pos:start="57:13" pos:end="57:61"><type pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:20">uint32_t</name></type> <name pos:start="57:22" pos:end="57:25">size</name> <init pos:start="57:27" pos:end="57:61">= <expr pos:start="57:29" pos:end="57:61"><name pos:start="57:29" pos:end="57:41"><name pos:start="57:29" pos:end="57:29">s</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:38">offsets</name><index pos:start="57:39" pos:end="57:41">[<expr pos:start="57:40" pos:end="57:40"><name pos:start="57:40" pos:end="57:40">i</name></expr>]</index></name> <operator pos:start="57:43" pos:end="57:43">-</operator> <name pos:start="57:45" pos:end="57:61"><name pos:start="57:45" pos:end="57:45">s</name><operator pos:start="57:46" pos:end="57:47">-&gt;</operator><name pos:start="57:48" pos:end="57:54">offsets</name><index pos:start="57:55" pos:end="57:61">[<expr pos:start="57:56" pos:end="57:60"><name pos:start="57:56" pos:end="57:56">i</name> <operator pos:start="57:58" pos:end="57:58">-</operator> <literal type="number" pos:start="57:60" pos:end="57:60">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="59:13" pos:end="63:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:49">(<expr pos:start="59:17" pos:end="59:48"><name pos:start="59:17" pos:end="59:20">size</name> <operator pos:start="59:22" pos:end="59:22">&gt;</operator> <name pos:start="59:24" pos:end="59:48">max_compressed_block_size</name></expr>)</condition> <block pos:start="59:51" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:49">

                <expr_stmt pos:start="61:17" pos:end="61:49"><expr pos:start="61:17" pos:end="61:48"><name pos:start="61:17" pos:end="61:41">max_compressed_block_size</name> <operator pos:start="61:43" pos:end="61:43">=</operator> <name pos:start="61:45" pos:end="61:48">size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="71:5" pos:end="71:32">/* initialize zlib engine */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:66"><expr pos:start="73:5" pos:end="73:65"><name pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:23">compressed_block</name></name> <operator pos:start="73:25" pos:end="73:25">=</operator> <call pos:start="73:27" pos:end="73:65"><name pos:start="73:27" pos:end="73:34">g_malloc</name><argument_list pos:start="73:35" pos:end="73:65">(<argument pos:start="73:36" pos:end="73:64"><expr pos:start="73:36" pos:end="73:64"><name pos:start="73:36" pos:end="73:60">max_compressed_block_size</name> <operator pos:start="73:62" pos:end="73:62">+</operator> <literal type="number" pos:start="73:64" pos:end="73:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:52"><expr pos:start="75:5" pos:end="75:51"><name pos:start="75:5" pos:end="75:25"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:25">uncompressed_block</name></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <call pos:start="75:29" pos:end="75:51"><name pos:start="75:29" pos:end="75:36">g_malloc</name><argument_list pos:start="75:37" pos:end="75:51">(<argument pos:start="75:38" pos:end="75:50"><expr pos:start="75:38" pos:end="75:50"><name pos:start="75:38" pos:end="75:50"><name pos:start="75:38" pos:end="75:38">s</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:50">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:41">(<expr pos:start="77:9" pos:end="77:40"><call pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:19">inflateInit</name><argument_list pos:start="77:20" pos:end="77:32">(<argument pos:start="77:21" pos:end="77:31"><expr pos:start="77:21" pos:end="77:31"><operator pos:start="77:21" pos:end="77:21">&amp;</operator><name pos:start="77:22" pos:end="77:31"><name pos:start="77:22" pos:end="77:22">s</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:31">zstream</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:34" pos:end="77:35">!=</operator> <name pos:start="77:37" pos:end="77:40">Z_OK</name></expr>)</condition> <block pos:start="77:43" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:25">

        <goto pos:start="79:9" pos:end="79:25">goto <name pos:start="79:14" pos:end="79:24">cloop_close</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:35"><expr pos:start="83:5" pos:end="83:34"><name pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:20">current_block</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:34"><name pos:start="83:24" pos:end="83:24">s</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:34">n_blocks</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:45"><expr pos:start="87:5" pos:end="87:44"><name pos:start="87:5" pos:end="87:24"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:24">sectors_per_block</name></name> <operator pos:start="87:26" pos:end="87:26">=</operator> <name pos:start="87:28" pos:end="87:40"><name pos:start="87:28" pos:end="87:28">s</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:40">block_size</name></name><operator pos:start="87:41" pos:end="87:41">/</operator><literal type="number" pos:start="87:42" pos:end="87:44">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:59"><expr pos:start="89:5" pos:end="89:58"><name pos:start="89:5" pos:end="89:21"><name pos:start="89:5" pos:end="89:6">bs</name><operator pos:start="89:7" pos:end="89:8">-&gt;</operator><name pos:start="89:9" pos:end="89:21">total_sectors</name></name> <operator pos:start="89:23" pos:end="89:23">=</operator> <name pos:start="89:25" pos:end="89:35"><name pos:start="89:25" pos:end="89:25">s</name><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:35">n_blocks</name></name> <operator pos:start="89:37" pos:end="89:37">*</operator> <name pos:start="89:39" pos:end="89:58"><name pos:start="89:39" pos:end="89:39">s</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:58">sectors_per_block</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:33"><expr pos:start="91:5" pos:end="91:32"><call pos:start="91:5" pos:end="91:32"><name pos:start="91:5" pos:end="91:22">qemu_co_mutex_init</name><argument_list pos:start="91:23" pos:end="91:32">(<argument pos:start="91:24" pos:end="91:31"><expr pos:start="91:24" pos:end="91:31"><operator pos:start="91:24" pos:end="91:24">&amp;</operator><name pos:start="91:25" pos:end="91:31"><name pos:start="91:25" pos:end="91:25">s</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>



<label pos:start="97:1" pos:end="97:12"><name pos:start="97:1" pos:end="97:11">cloop_close</name>:</label>

    <return pos:start="99:5" pos:end="99:14">return <expr pos:start="99:12" pos:end="99:13"><operator pos:start="99:12" pos:end="99:12">-</operator><literal type="number" pos:start="99:13" pos:end="99:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
