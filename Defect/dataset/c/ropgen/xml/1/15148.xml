<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15148.c" pos:tabs="8"><function pos:start="1:1" pos:end="491:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">mjpeg_decode_app</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:46">MJpegDecodeContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="491:1">{<block_content pos:start="5:5" pos:end="489:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">len</name></decl>, <decl pos:start="5:14" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:15">id</name></decl>, <decl pos:start="5:18" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:18">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:31"><expr pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:7">len</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:30"><name pos:start="9:11" pos:end="9:18">get_bits</name><argument_list pos:start="9:19" pos:end="9:30">(<argument pos:start="9:20" pos:end="9:25"><expr pos:start="9:20" pos:end="9:25"><operator pos:start="9:20" pos:end="9:20">&amp;</operator><name pos:start="9:21" pos:end="9:25"><name pos:start="9:21" pos:end="9:21">s</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:25">gb</name></name></expr></argument>, <argument pos:start="9:28" pos:end="9:29"><expr pos:start="9:28" pos:end="9:29"><literal type="number" pos:start="9:28" pos:end="9:29">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="13:35"><if pos:start="11:5" pos:end="13:35">if <condition pos:start="11:8" pos:end="11:16">(<expr pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:11">len</name> <operator pos:start="11:13" pos:end="11:13">&lt;</operator> <literal type="number" pos:start="11:15" pos:end="11:15">6</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:35"><block_content pos:start="13:9" pos:end="13:35">

        <return pos:start="13:9" pos:end="13:35">return <expr pos:start="13:16" pos:end="13:34"><name pos:start="13:16" pos:end="13:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="17:35"><if pos:start="15:5" pos:end="17:35">if <condition pos:start="15:8" pos:end="15:40">(<expr pos:start="15:9" pos:end="15:39"><literal type="number" pos:start="15:9" pos:end="15:9">8</literal> <operator pos:start="15:11" pos:end="15:11">*</operator> <name pos:start="15:13" pos:end="15:15">len</name> <operator pos:start="15:17" pos:end="15:17">&gt;</operator> <call pos:start="15:19" pos:end="15:39"><name pos:start="15:19" pos:end="15:31">get_bits_left</name><argument_list pos:start="15:32" pos:end="15:39">(<argument pos:start="15:33" pos:end="15:38"><expr pos:start="15:33" pos:end="15:38"><operator pos:start="15:33" pos:end="15:33">&amp;</operator><name pos:start="15:34" pos:end="15:38"><name pos:start="15:34" pos:end="15:34">s</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:38">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:35"><block_content pos:start="17:9" pos:end="17:35">

        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:37"><expr pos:start="21:5" pos:end="21:36"><name pos:start="21:5" pos:end="21:6">id</name>   <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:36"><name pos:start="21:12" pos:end="21:24">get_bits_long</name><argument_list pos:start="21:25" pos:end="21:36">(<argument pos:start="21:26" pos:end="21:31"><expr pos:start="21:26" pos:end="21:31"><operator pos:start="21:26" pos:end="21:26">&amp;</operator><name pos:start="21:27" pos:end="21:31"><name pos:start="21:27" pos:end="21:27">s</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:31">gb</name></name></expr></argument>, <argument pos:start="21:34" pos:end="21:35"><expr pos:start="21:34" pos:end="21:35"><literal type="number" pos:start="21:34" pos:end="21:35">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:13"><expr pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:7">len</name> <operator pos:start="23:9" pos:end="23:10">-=</operator> <literal type="number" pos:start="23:12" pos:end="23:12">6</literal></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:45">(<expr pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:16">avctx</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:23">debug</name></name> <operator pos:start="27:25" pos:end="27:25">&amp;</operator> <name pos:start="27:27" pos:end="27:44">FF_DEBUG_STARTCODE</name></expr>)</condition> <block pos:start="27:47" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:84">

        <decl_stmt pos:start="29:9" pos:end="29:24"><decl pos:start="29:9" pos:end="29:23"><type pos:start="29:9" pos:end="29:12"><name pos:start="29:9" pos:end="29:12">char</name></type> <name pos:start="29:14" pos:end="29:23"><name pos:start="29:14" pos:end="29:19">id_str</name><index pos:start="29:20" pos:end="29:23">[<expr pos:start="29:21" pos:end="29:22"><literal type="number" pos:start="29:21" pos:end="29:22">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:72"><expr pos:start="31:9" pos:end="31:71"><call pos:start="31:9" pos:end="31:71"><name pos:start="31:9" pos:end="31:31">av_get_codec_tag_string</name><argument_list pos:start="31:32" pos:end="31:71">(<argument pos:start="31:33" pos:end="31:38"><expr pos:start="31:33" pos:end="31:38"><name pos:start="31:33" pos:end="31:38">id_str</name></expr></argument>, <argument pos:start="31:41" pos:end="31:54"><expr pos:start="31:41" pos:end="31:54"><sizeof pos:start="31:41" pos:end="31:54">sizeof<argument_list pos:start="31:47" pos:end="31:54">(<argument pos:start="31:48" pos:end="31:53"><expr pos:start="31:48" pos:end="31:53"><name pos:start="31:48" pos:end="31:53">id_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:57" pos:end="31:70"><expr pos:start="31:57" pos:end="31:70"><call pos:start="31:57" pos:end="31:70"><name pos:start="31:57" pos:end="31:66">av_bswap32</name><argument_list pos:start="31:67" pos:end="31:70">(<argument pos:start="31:68" pos:end="31:69"><expr pos:start="31:68" pos:end="31:69"><name pos:start="31:68" pos:end="31:69">id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:84"><expr pos:start="33:9" pos:end="33:83"><call pos:start="33:9" pos:end="33:83"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:83">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:16">s</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:23">avctx</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:37"><expr pos:start="33:26" pos:end="33:37"><name pos:start="33:26" pos:end="33:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="33:40" pos:end="33:65"><expr pos:start="33:40" pos:end="33:65"><literal type="string" pos:start="33:40" pos:end="33:65">"APPx (%s / %8X) len=%d\n"</literal></expr></argument>, <argument pos:start="33:68" pos:end="33:73"><expr pos:start="33:68" pos:end="33:73"><name pos:start="33:68" pos:end="33:73">id_str</name></expr></argument>, <argument pos:start="33:76" pos:end="33:77"><expr pos:start="33:76" pos:end="33:77"><name pos:start="33:76" pos:end="33:77">id</name></expr></argument>, <argument pos:start="33:80" pos:end="33:82"><expr pos:start="33:80" pos:end="33:82"><name pos:start="33:80" pos:end="33:82">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:59">/* Buggy AVID, it puts EOI only at every 10th frame. */</comment>

    <comment type="block" pos:start="41:5" pos:end="43:69">/* Also, this fourcc is used by non-avid files too, it holds some

       information, but it's always present in AVID-created files. */</comment>

    <if_stmt pos:start="45:5" pos:end="80:5"><if pos:start="45:5" pos:end="80:5">if <condition pos:start="45:8" pos:end="45:30">(<expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:10">id</name> <operator pos:start="45:12" pos:end="45:13">==</operator> <call pos:start="45:15" pos:end="45:29"><name pos:start="45:15" pos:end="45:21">AV_RB32</name><argument_list pos:start="45:22" pos:end="45:29">(<argument pos:start="45:23" pos:end="45:28"><expr pos:start="45:23" pos:end="45:28"><literal type="string" pos:start="45:23" pos:end="45:28">"AVI1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:32" pos:end="80:5">{<block_content pos:start="61:13" pos:end="78:0">

        <comment type="block" pos:start="47:9" pos:end="59:10">/* structure:

            4bytes      AVI1

            1bytes      polarity

            1bytes      always zero

            4bytes      field_size

            4bytes      field_size_less_padding

        */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:30"><expr pos:start="61:13" pos:end="61:29"><name pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:25">buggy_avid</name></name> <operator pos:start="61:27" pos:end="61:27">=</operator> <literal type="number" pos:start="61:29" pos:end="61:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:9">i</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:20">get_bits</name><argument_list pos:start="63:21" pos:end="63:31">(<argument pos:start="63:22" pos:end="63:27"><expr pos:start="63:22" pos:end="63:27"><operator pos:start="63:22" pos:end="63:22">&amp;</operator><name pos:start="63:23" pos:end="63:27"><name pos:start="63:23" pos:end="63:23">s</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:27">gb</name></name></expr></argument>, <argument pos:start="63:30" pos:end="63:30"><expr pos:start="63:30" pos:end="63:30"><literal type="number" pos:start="63:30" pos:end="63:30">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="63:34" pos:end="63:39"><expr pos:start="63:34" pos:end="63:38"><name pos:start="63:34" pos:end="63:36">len</name><operator pos:start="63:37" pos:end="63:38">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="78:0"><expr pos:start="65:9" pos:end="65:58"><call pos:start="65:9" pos:end="65:58"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:58">(<argument pos:start="65:16" pos:end="65:23"><expr pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:16">s</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:23">avctx</name></name></expr></argument>, <argument pos:start="65:26" pos:end="65:37"><expr pos:start="65:26" pos:end="65:37"><name pos:start="65:26" pos:end="65:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="65:40" pos:end="65:54"><expr pos:start="65:40" pos:end="65:54"><literal type="string" pos:start="65:40" pos:end="65:54">"polarity %d\n"</literal></expr></argument>, <argument pos:start="65:57" pos:end="65:57"><expr pos:start="65:57" pos:end="65:57"><name pos:start="65:57" pos:end="65:57">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="67:1" pos:end="67:5">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:5"><literal type="number" pos:start="67:5" pos:end="67:5">0</literal></expr></cpp:if>

        skip_bits(&amp;s-&gt;gb, 8);

        skip_bits(&amp;s-&gt;gb, 32);

        skip_bits(&amp;s-&gt;gb, 32);

        len -= 10;

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>


    </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="84:1" pos:end="84:15">//    len -= 2;</comment>



    <if_stmt pos:start="88:5" pos:end="157:5"><if pos:start="88:5" pos:end="157:5">if <condition pos:start="88:8" pos:end="88:30">(<expr pos:start="88:9" pos:end="88:29"><name pos:start="88:9" pos:end="88:10">id</name> <operator pos:start="88:12" pos:end="88:13">==</operator> <call pos:start="88:15" pos:end="88:29"><name pos:start="88:15" pos:end="88:21">AV_RB32</name><argument_list pos:start="88:22" pos:end="88:29">(<argument pos:start="88:23" pos:end="88:28"><expr pos:start="88:23" pos:end="88:28"><literal type="string" pos:start="88:23" pos:end="88:28">"JFIF"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="88:32" pos:end="157:5">{<block_content pos:start="90:9" pos:end="154:9">

        <decl_stmt pos:start="90:9" pos:end="90:29"><decl pos:start="90:9" pos:end="90:15"><type pos:start="90:9" pos:end="90:11"><name pos:start="90:9" pos:end="90:11">int</name></type> <name pos:start="90:13" pos:end="90:15">t_w</name></decl>, <decl pos:start="90:18" pos:end="90:20"><type ref="prev" pos:start="90:9" pos:end="90:11"/><name pos:start="90:18" pos:end="90:20">t_h</name></decl>, <decl pos:start="90:23" pos:end="90:24"><type ref="prev" pos:start="90:9" pos:end="90:11"/><name pos:start="90:23" pos:end="90:24">v1</name></decl>, <decl pos:start="90:27" pos:end="90:28"><type ref="prev" pos:start="90:9" pos:end="90:11"/><name pos:start="90:27" pos:end="90:28">v2</name></decl>;</decl_stmt>



        <expr_stmt pos:start="94:9" pos:end="94:29"><expr pos:start="94:9" pos:end="94:28"><call pos:start="94:9" pos:end="94:28"><name pos:start="94:9" pos:end="94:17">skip_bits</name><argument_list pos:start="94:18" pos:end="94:28">(<argument pos:start="94:19" pos:end="94:24"><expr pos:start="94:19" pos:end="94:24"><operator pos:start="94:19" pos:end="94:19">&amp;</operator><name pos:start="94:20" pos:end="94:24"><name pos:start="94:20" pos:end="94:20">s</name><operator pos:start="94:21" pos:end="94:22">-&gt;</operator><name pos:start="94:23" pos:end="94:24">gb</name></name></expr></argument>, <argument pos:start="94:27" pos:end="94:27"><expr pos:start="94:27" pos:end="94:27"><literal type="number" pos:start="94:27" pos:end="94:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="94:31" pos:end="94:58">/* the trailing zero-byte */</comment>

        <expr_stmt pos:start="96:9" pos:end="96:33"><expr pos:start="96:9" pos:end="96:32"><name pos:start="96:9" pos:end="96:10">v1</name> <operator pos:start="96:12" pos:end="96:12">=</operator> <call pos:start="96:14" pos:end="96:32"><name pos:start="96:14" pos:end="96:21">get_bits</name><argument_list pos:start="96:22" pos:end="96:32">(<argument pos:start="96:23" pos:end="96:28"><expr pos:start="96:23" pos:end="96:28"><operator pos:start="96:23" pos:end="96:23">&amp;</operator><name pos:start="96:24" pos:end="96:28"><name pos:start="96:24" pos:end="96:24">s</name><operator pos:start="96:25" pos:end="96:26">-&gt;</operator><name pos:start="96:27" pos:end="96:28">gb</name></name></expr></argument>, <argument pos:start="96:31" pos:end="96:31"><expr pos:start="96:31" pos:end="96:31"><literal type="number" pos:start="96:31" pos:end="96:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="98:9" pos:end="98:33"><expr pos:start="98:9" pos:end="98:32"><name pos:start="98:9" pos:end="98:10">v2</name> <operator pos:start="98:12" pos:end="98:12">=</operator> <call pos:start="98:14" pos:end="98:32"><name pos:start="98:14" pos:end="98:21">get_bits</name><argument_list pos:start="98:22" pos:end="98:32">(<argument pos:start="98:23" pos:end="98:28"><expr pos:start="98:23" pos:end="98:28"><operator pos:start="98:23" pos:end="98:23">&amp;</operator><name pos:start="98:24" pos:end="98:28"><name pos:start="98:24" pos:end="98:24">s</name><operator pos:start="98:25" pos:end="98:26">-&gt;</operator><name pos:start="98:27" pos:end="98:28">gb</name></name></expr></argument>, <argument pos:start="98:31" pos:end="98:31"><expr pos:start="98:31" pos:end="98:31"><literal type="number" pos:start="98:31" pos:end="98:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="100:9" pos:end="100:29"><expr pos:start="100:9" pos:end="100:28"><call pos:start="100:9" pos:end="100:28"><name pos:start="100:9" pos:end="100:17">skip_bits</name><argument_list pos:start="100:18" pos:end="100:28">(<argument pos:start="100:19" pos:end="100:24"><expr pos:start="100:19" pos:end="100:24"><operator pos:start="100:19" pos:end="100:19">&amp;</operator><name pos:start="100:20" pos:end="100:24"><name pos:start="100:20" pos:end="100:20">s</name><operator pos:start="100:21" pos:end="100:22">-&gt;</operator><name pos:start="100:23" pos:end="100:24">gb</name></name></expr></argument>, <argument pos:start="100:27" pos:end="100:27"><expr pos:start="100:27" pos:end="100:27"><literal type="number" pos:start="100:27" pos:end="100:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="104:9" pos:end="104:65"><expr pos:start="104:9" pos:end="104:64"><name pos:start="104:9" pos:end="104:41"><name pos:start="104:9" pos:end="104:9">s</name><operator pos:start="104:10" pos:end="104:11">-&gt;</operator><name pos:start="104:12" pos:end="104:16">avctx</name><operator pos:start="104:17" pos:end="104:18">-&gt;</operator><name pos:start="104:19" pos:end="104:37">sample_aspect_ratio</name><operator pos:start="104:38" pos:end="104:38">.</operator><name pos:start="104:39" pos:end="104:41">num</name></name> <operator pos:start="104:43" pos:end="104:43">=</operator> <call pos:start="104:45" pos:end="104:64"><name pos:start="104:45" pos:end="104:52">get_bits</name><argument_list pos:start="104:53" pos:end="104:64">(<argument pos:start="104:54" pos:end="104:59"><expr pos:start="104:54" pos:end="104:59"><operator pos:start="104:54" pos:end="104:54">&amp;</operator><name pos:start="104:55" pos:end="104:59"><name pos:start="104:55" pos:end="104:55">s</name><operator pos:start="104:56" pos:end="104:57">-&gt;</operator><name pos:start="104:58" pos:end="104:59">gb</name></name></expr></argument>, <argument pos:start="104:62" pos:end="104:63"><expr pos:start="104:62" pos:end="104:63"><literal type="number" pos:start="104:62" pos:end="104:63">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="106:9" pos:end="106:65"><expr pos:start="106:9" pos:end="106:64"><name pos:start="106:9" pos:end="106:41"><name pos:start="106:9" pos:end="106:9">s</name><operator pos:start="106:10" pos:end="106:11">-&gt;</operator><name pos:start="106:12" pos:end="106:16">avctx</name><operator pos:start="106:17" pos:end="106:18">-&gt;</operator><name pos:start="106:19" pos:end="106:37">sample_aspect_ratio</name><operator pos:start="106:38" pos:end="106:38">.</operator><name pos:start="106:39" pos:end="106:41">den</name></name> <operator pos:start="106:43" pos:end="106:43">=</operator> <call pos:start="106:45" pos:end="106:64"><name pos:start="106:45" pos:end="106:52">get_bits</name><argument_list pos:start="106:53" pos:end="106:64">(<argument pos:start="106:54" pos:end="106:59"><expr pos:start="106:54" pos:end="106:59"><operator pos:start="106:54" pos:end="106:54">&amp;</operator><name pos:start="106:55" pos:end="106:59"><name pos:start="106:55" pos:end="106:55">s</name><operator pos:start="106:56" pos:end="106:57">-&gt;</operator><name pos:start="106:58" pos:end="106:59">gb</name></name></expr></argument>, <argument pos:start="106:62" pos:end="106:63"><expr pos:start="106:62" pos:end="106:63"><literal type="number" pos:start="106:62" pos:end="106:63">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="108:9" pos:end="116:9"><if pos:start="108:9" pos:end="116:9">if <condition pos:start="108:12" pos:end="110:54">(   <expr pos:start="108:16" pos:end="110:53"><name pos:start="108:16" pos:end="108:48"><name pos:start="108:16" pos:end="108:16">s</name><operator pos:start="108:17" pos:end="108:18">-&gt;</operator><name pos:start="108:19" pos:end="108:23">avctx</name><operator pos:start="108:24" pos:end="108:25">-&gt;</operator><name pos:start="108:26" pos:end="108:44">sample_aspect_ratio</name><operator pos:start="108:45" pos:end="108:45">.</operator><name pos:start="108:46" pos:end="108:48">num</name></name> <operator pos:start="108:50" pos:end="108:51">&lt;=</operator> <literal type="number" pos:start="108:53" pos:end="108:53">0</literal>

            <operator pos:start="110:13" pos:end="110:14">||</operator> <name pos:start="110:16" pos:end="110:48"><name pos:start="110:16" pos:end="110:16">s</name><operator pos:start="110:17" pos:end="110:18">-&gt;</operator><name pos:start="110:19" pos:end="110:23">avctx</name><operator pos:start="110:24" pos:end="110:25">-&gt;</operator><name pos:start="110:26" pos:end="110:44">sample_aspect_ratio</name><operator pos:start="110:45" pos:end="110:45">.</operator><name pos:start="110:46" pos:end="110:48">den</name></name> <operator pos:start="110:50" pos:end="110:51">&lt;=</operator> <literal type="number" pos:start="110:53" pos:end="110:53">0</literal></expr>)</condition> <block pos:start="110:56" pos:end="116:9">{<block_content pos:start="112:13" pos:end="114:50">

            <expr_stmt pos:start="112:13" pos:end="112:50"><expr pos:start="112:13" pos:end="112:49"><name pos:start="112:13" pos:end="112:45"><name pos:start="112:13" pos:end="112:13">s</name><operator pos:start="112:14" pos:end="112:15">-&gt;</operator><name pos:start="112:16" pos:end="112:20">avctx</name><operator pos:start="112:21" pos:end="112:22">-&gt;</operator><name pos:start="112:23" pos:end="112:41">sample_aspect_ratio</name><operator pos:start="112:42" pos:end="112:42">.</operator><name pos:start="112:43" pos:end="112:45">num</name></name> <operator pos:start="112:47" pos:end="112:47">=</operator> <literal type="number" pos:start="112:49" pos:end="112:49">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="114:13" pos:end="114:50"><expr pos:start="114:13" pos:end="114:49"><name pos:start="114:13" pos:end="114:45"><name pos:start="114:13" pos:end="114:13">s</name><operator pos:start="114:14" pos:end="114:15">-&gt;</operator><name pos:start="114:16" pos:end="114:20">avctx</name><operator pos:start="114:21" pos:end="114:22">-&gt;</operator><name pos:start="114:23" pos:end="114:41">sample_aspect_ratio</name><operator pos:start="114:42" pos:end="114:42">.</operator><name pos:start="114:43" pos:end="114:45">den</name></name> <operator pos:start="114:47" pos:end="114:47">=</operator> <literal type="number" pos:start="114:49" pos:end="114:49">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="120:9" pos:end="130:54"><if pos:start="120:9" pos:end="130:54">if <condition pos:start="120:12" pos:end="120:49">(<expr pos:start="120:13" pos:end="120:48"><name pos:start="120:13" pos:end="120:27"><name pos:start="120:13" pos:end="120:13">s</name><operator pos:start="120:14" pos:end="120:15">-&gt;</operator><name pos:start="120:16" pos:end="120:20">avctx</name><operator pos:start="120:21" pos:end="120:22">-&gt;</operator><name pos:start="120:23" pos:end="120:27">debug</name></name> <operator pos:start="120:29" pos:end="120:29">&amp;</operator> <name pos:start="120:31" pos:end="120:48">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="122:13" pos:end="130:54"><block_content pos:start="122:13" pos:end="130:54">

            <expr_stmt pos:start="122:13" pos:end="130:54"><expr pos:start="122:13" pos:end="130:53"><call pos:start="122:13" pos:end="130:53"><name pos:start="122:13" pos:end="122:18">av_log</name><argument_list pos:start="122:19" pos:end="130:53">(<argument pos:start="122:20" pos:end="122:27"><expr pos:start="122:20" pos:end="122:27"><name pos:start="122:20" pos:end="122:27"><name pos:start="122:20" pos:end="122:20">s</name><operator pos:start="122:21" pos:end="122:22">-&gt;</operator><name pos:start="122:23" pos:end="122:27">avctx</name></name></expr></argument>, <argument pos:start="122:30" pos:end="122:40"><expr pos:start="122:30" pos:end="122:40"><name pos:start="122:30" pos:end="122:40">AV_LOG_INFO</name></expr></argument>,

                   <argument pos:start="124:20" pos:end="124:74"><expr pos:start="124:20" pos:end="124:74"><literal type="string" pos:start="124:20" pos:end="124:74">"mjpeg: JFIF header found (version: %x.%x) SAR=%d/%d\n"</literal></expr></argument>,

                   <argument pos:start="126:20" pos:end="126:21"><expr pos:start="126:20" pos:end="126:21"><name pos:start="126:20" pos:end="126:21">v1</name></expr></argument>, <argument pos:start="126:24" pos:end="126:25"><expr pos:start="126:24" pos:end="126:25"><name pos:start="126:24" pos:end="126:25">v2</name></expr></argument>,

                   <argument pos:start="128:20" pos:end="128:52"><expr pos:start="128:20" pos:end="128:52"><name pos:start="128:20" pos:end="128:52"><name pos:start="128:20" pos:end="128:20">s</name><operator pos:start="128:21" pos:end="128:22">-&gt;</operator><name pos:start="128:23" pos:end="128:27">avctx</name><operator pos:start="128:28" pos:end="128:29">-&gt;</operator><name pos:start="128:30" pos:end="128:48">sample_aspect_ratio</name><operator pos:start="128:49" pos:end="128:49">.</operator><name pos:start="128:50" pos:end="128:52">num</name></name></expr></argument>,

                   <argument pos:start="130:20" pos:end="130:52"><expr pos:start="130:20" pos:end="130:52"><name pos:start="130:20" pos:end="130:52"><name pos:start="130:20" pos:end="130:20">s</name><operator pos:start="130:21" pos:end="130:22">-&gt;</operator><name pos:start="130:23" pos:end="130:27">avctx</name><operator pos:start="130:28" pos:end="130:29">-&gt;</operator><name pos:start="130:30" pos:end="130:48">sample_aspect_ratio</name><operator pos:start="130:49" pos:end="130:49">.</operator><name pos:start="130:50" pos:end="130:52">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="134:9" pos:end="134:17"><expr pos:start="134:9" pos:end="134:16"><name pos:start="134:9" pos:end="134:11">len</name> <operator pos:start="134:13" pos:end="134:14">-=</operator> <literal type="number" pos:start="134:16" pos:end="134:16">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="136:9" pos:end="154:9"><if pos:start="136:9" pos:end="154:9">if <condition pos:start="136:12" pos:end="136:21">(<expr pos:start="136:13" pos:end="136:20"><name pos:start="136:13" pos:end="136:15">len</name> <operator pos:start="136:17" pos:end="136:18">&gt;=</operator> <literal type="number" pos:start="136:20" pos:end="136:20">2</literal></expr>)</condition> <block pos:start="136:23" pos:end="154:9">{<block_content pos:start="138:13" pos:end="152:21">

            <expr_stmt pos:start="138:13" pos:end="138:38"><expr pos:start="138:13" pos:end="138:37"><name pos:start="138:13" pos:end="138:15">t_w</name> <operator pos:start="138:17" pos:end="138:17">=</operator> <call pos:start="138:19" pos:end="138:37"><name pos:start="138:19" pos:end="138:26">get_bits</name><argument_list pos:start="138:27" pos:end="138:37">(<argument pos:start="138:28" pos:end="138:33"><expr pos:start="138:28" pos:end="138:33"><operator pos:start="138:28" pos:end="138:28">&amp;</operator><name pos:start="138:29" pos:end="138:33"><name pos:start="138:29" pos:end="138:29">s</name><operator pos:start="138:30" pos:end="138:31">-&gt;</operator><name pos:start="138:32" pos:end="138:33">gb</name></name></expr></argument>, <argument pos:start="138:36" pos:end="138:36"><expr pos:start="138:36" pos:end="138:36"><literal type="number" pos:start="138:36" pos:end="138:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="140:13" pos:end="140:38"><expr pos:start="140:13" pos:end="140:37"><name pos:start="140:13" pos:end="140:15">t_h</name> <operator pos:start="140:17" pos:end="140:17">=</operator> <call pos:start="140:19" pos:end="140:37"><name pos:start="140:19" pos:end="140:26">get_bits</name><argument_list pos:start="140:27" pos:end="140:37">(<argument pos:start="140:28" pos:end="140:33"><expr pos:start="140:28" pos:end="140:33"><operator pos:start="140:28" pos:end="140:28">&amp;</operator><name pos:start="140:29" pos:end="140:33"><name pos:start="140:29" pos:end="140:29">s</name><operator pos:start="140:30" pos:end="140:31">-&gt;</operator><name pos:start="140:32" pos:end="140:33">gb</name></name></expr></argument>, <argument pos:start="140:36" pos:end="140:36"><expr pos:start="140:36" pos:end="140:36"><literal type="number" pos:start="140:36" pos:end="140:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="142:13" pos:end="150:13"><if pos:start="142:13" pos:end="150:13">if <condition pos:start="142:16" pos:end="142:27">(<expr pos:start="142:17" pos:end="142:26"><name pos:start="142:17" pos:end="142:19">t_w</name> <operator pos:start="142:21" pos:end="142:22">&amp;&amp;</operator> <name pos:start="142:24" pos:end="142:26">t_h</name></expr>)</condition> <block pos:start="142:29" pos:end="150:13">{<block_content pos:start="146:17" pos:end="148:41">

                <comment type="block" pos:start="144:17" pos:end="144:36">/* skip thumbnail */</comment>

                <if_stmt pos:start="146:17" pos:end="148:41"><if pos:start="146:17" pos:end="148:41">if <condition pos:start="146:20" pos:end="146:50">(<expr pos:start="146:21" pos:end="146:49"><name pos:start="146:21" pos:end="146:23">len</name> <operator pos:start="146:25" pos:end="146:25">-</operator><literal type="number" pos:start="146:26" pos:end="146:29">10</literal> <operator pos:start="146:29" pos:end="146:29">-</operator> <operator pos:start="146:31" pos:end="146:31">(</operator><name pos:start="146:32" pos:end="146:34">t_w</name> <operator pos:start="146:36" pos:end="146:36">*</operator> <name pos:start="146:38" pos:end="146:40">t_h</name> <operator pos:start="146:42" pos:end="146:42">*</operator> <literal type="number" pos:start="146:44" pos:end="146:44">3</literal><operator pos:start="146:45" pos:end="146:45">)</operator> <operator pos:start="146:47" pos:end="146:47">&gt;</operator> <literal type="number" pos:start="146:49" pos:end="146:49">0</literal></expr>)</condition><block type="pseudo" pos:start="148:21" pos:end="148:41"><block_content pos:start="148:21" pos:end="148:41">

                    <expr_stmt pos:start="148:21" pos:end="148:41"><expr pos:start="148:21" pos:end="148:40"><name pos:start="148:21" pos:end="148:23">len</name> <operator pos:start="148:25" pos:end="148:26">-=</operator> <name pos:start="148:28" pos:end="148:30">t_w</name> <operator pos:start="148:32" pos:end="148:32">*</operator> <name pos:start="148:34" pos:end="148:36">t_h</name> <operator pos:start="148:38" pos:end="148:38">*</operator> <literal type="number" pos:start="148:40" pos:end="148:40">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="152:13" pos:end="152:21"><expr pos:start="152:13" pos:end="152:20"><name pos:start="152:13" pos:end="152:15">len</name> <operator pos:start="152:17" pos:end="152:18">-=</operator> <literal type="number" pos:start="152:20" pos:end="152:20">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>


    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="186:5"><if pos:start="161:5" pos:end="186:5">if <condition pos:start="161:8" pos:end="167:57">(   <expr pos:start="161:12" pos:end="167:56"><name pos:start="161:12" pos:end="161:13">id</name> <operator pos:start="161:15" pos:end="161:16">==</operator> <call pos:start="161:18" pos:end="161:32"><name pos:start="161:18" pos:end="161:24">AV_RB32</name><argument_list pos:start="161:25" pos:end="161:32">(<argument pos:start="161:26" pos:end="161:31"><expr pos:start="161:26" pos:end="161:31"><literal type="string" pos:start="161:26" pos:end="161:31">"Adob"</literal></expr></argument>)</argument_list></call>

        <operator pos:start="163:9" pos:end="163:10">&amp;&amp;</operator> <name pos:start="163:12" pos:end="163:14">len</name> <operator pos:start="163:16" pos:end="163:17">&gt;=</operator> <literal type="number" pos:start="163:19" pos:end="163:19">7</literal>

        <operator pos:start="165:9" pos:end="165:10">&amp;&amp;</operator> <call pos:start="165:12" pos:end="165:31"><name pos:start="165:12" pos:end="165:20">show_bits</name><argument_list pos:start="165:21" pos:end="165:31">(<argument pos:start="165:22" pos:end="165:27"><expr pos:start="165:22" pos:end="165:27"><operator pos:start="165:22" pos:end="165:22">&amp;</operator><name pos:start="165:23" pos:end="165:27"><name pos:start="165:23" pos:end="165:23">s</name><operator pos:start="165:24" pos:end="165:25">-&gt;</operator><name pos:start="165:26" pos:end="165:27">gb</name></name></expr></argument>, <argument pos:start="165:30" pos:end="165:30"><expr pos:start="165:30" pos:end="165:30"><literal type="number" pos:start="165:30" pos:end="165:30">8</literal></expr></argument>)</argument_list></call> <operator pos:start="165:33" pos:end="165:34">==</operator> <literal type="char" pos:start="165:36" pos:end="165:38">'e'</literal>

        <operator pos:start="167:9" pos:end="167:10">&amp;&amp;</operator> <call pos:start="167:12" pos:end="167:37"><name pos:start="167:12" pos:end="167:25">show_bits_long</name><argument_list pos:start="167:26" pos:end="167:37">(<argument pos:start="167:27" pos:end="167:32"><expr pos:start="167:27" pos:end="167:32"><operator pos:start="167:27" pos:end="167:27">&amp;</operator><name pos:start="167:28" pos:end="167:32"><name pos:start="167:28" pos:end="167:28">s</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:32">gb</name></name></expr></argument>, <argument pos:start="167:35" pos:end="167:36"><expr pos:start="167:35" pos:end="167:36"><literal type="number" pos:start="167:35" pos:end="167:36">32</literal></expr></argument>)</argument_list></call> <operator pos:start="167:39" pos:end="167:40">!=</operator> <call pos:start="167:42" pos:end="167:56"><name pos:start="167:42" pos:end="167:48">AV_RB32</name><argument_list pos:start="167:49" pos:end="167:56">(<argument pos:start="167:50" pos:end="167:55"><expr pos:start="167:50" pos:end="167:55"><literal type="string" pos:start="167:50" pos:end="167:55">"e_CM"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:59" pos:end="186:5">{<block_content pos:start="169:9" pos:end="183:17">

        <expr_stmt pos:start="169:9" pos:end="169:30"><expr pos:start="169:9" pos:end="169:29"><call pos:start="169:9" pos:end="169:29"><name pos:start="169:9" pos:end="169:17">skip_bits</name><argument_list pos:start="169:18" pos:end="169:29">(<argument pos:start="169:19" pos:end="169:24"><expr pos:start="169:19" pos:end="169:24"><operator pos:start="169:19" pos:end="169:19">&amp;</operator><name pos:start="169:20" pos:end="169:24"><name pos:start="169:20" pos:end="169:20">s</name><operator pos:start="169:21" pos:end="169:22">-&gt;</operator><name pos:start="169:23" pos:end="169:24">gb</name></name></expr></argument>,  <argument pos:start="169:28" pos:end="169:28"><expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="169:32" pos:end="169:40">/* 'e' */</comment>

        <expr_stmt pos:start="171:9" pos:end="171:30"><expr pos:start="171:9" pos:end="171:29"><call pos:start="171:9" pos:end="171:29"><name pos:start="171:9" pos:end="171:17">skip_bits</name><argument_list pos:start="171:18" pos:end="171:29">(<argument pos:start="171:19" pos:end="171:24"><expr pos:start="171:19" pos:end="171:24"><operator pos:start="171:19" pos:end="171:19">&amp;</operator><name pos:start="171:20" pos:end="171:24"><name pos:start="171:20" pos:end="171:20">s</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:24">gb</name></name></expr></argument>, <argument pos:start="171:27" pos:end="171:28"><expr pos:start="171:27" pos:end="171:28"><literal type="number" pos:start="171:27" pos:end="171:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="171:32" pos:end="171:44">/* version */</comment>

        <expr_stmt pos:start="173:9" pos:end="173:30"><expr pos:start="173:9" pos:end="173:29"><call pos:start="173:9" pos:end="173:29"><name pos:start="173:9" pos:end="173:17">skip_bits</name><argument_list pos:start="173:18" pos:end="173:29">(<argument pos:start="173:19" pos:end="173:24"><expr pos:start="173:19" pos:end="173:24"><operator pos:start="173:19" pos:end="173:19">&amp;</operator><name pos:start="173:20" pos:end="173:24"><name pos:start="173:20" pos:end="173:20">s</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:24">gb</name></name></expr></argument>, <argument pos:start="173:27" pos:end="173:28"><expr pos:start="173:27" pos:end="173:28"><literal type="number" pos:start="173:27" pos:end="173:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="173:32" pos:end="173:43">/* flags0 */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:30"><expr pos:start="175:9" pos:end="175:29"><call pos:start="175:9" pos:end="175:29"><name pos:start="175:9" pos:end="175:17">skip_bits</name><argument_list pos:start="175:18" pos:end="175:29">(<argument pos:start="175:19" pos:end="175:24"><expr pos:start="175:19" pos:end="175:24"><operator pos:start="175:19" pos:end="175:19">&amp;</operator><name pos:start="175:20" pos:end="175:24"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:24">gb</name></name></expr></argument>, <argument pos:start="175:27" pos:end="175:28"><expr pos:start="175:27" pos:end="175:28"><literal type="number" pos:start="175:27" pos:end="175:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="175:32" pos:end="175:43">/* flags1 */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:50"><expr pos:start="177:9" pos:end="177:49"><name pos:start="177:9" pos:end="177:26"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:26">adobe_transform</name></name> <operator pos:start="177:28" pos:end="177:28">=</operator> <call pos:start="177:30" pos:end="177:49"><name pos:start="177:30" pos:end="177:37">get_bits</name><argument_list pos:start="177:38" pos:end="177:49">(<argument pos:start="177:39" pos:end="177:44"><expr pos:start="177:39" pos:end="177:44"><operator pos:start="177:39" pos:end="177:39">&amp;</operator><name pos:start="177:40" pos:end="177:44"><name pos:start="177:40" pos:end="177:40">s</name><operator pos:start="177:41" pos:end="177:42">-&gt;</operator><name pos:start="177:43" pos:end="177:44">gb</name></name></expr></argument>,  <argument pos:start="177:48" pos:end="177:48"><expr pos:start="177:48" pos:end="177:48"><literal type="number" pos:start="177:48" pos:end="177:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="181:107"><if pos:start="179:9" pos:end="181:107">if <condition pos:start="179:12" pos:end="179:49">(<expr pos:start="179:13" pos:end="179:48"><name pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:20">avctx</name><operator pos:start="179:21" pos:end="179:22">-&gt;</operator><name pos:start="179:23" pos:end="179:27">debug</name></name> <operator pos:start="179:29" pos:end="179:29">&amp;</operator> <name pos:start="179:31" pos:end="179:48">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:107"><block_content pos:start="181:13" pos:end="181:107">

            <expr_stmt pos:start="181:13" pos:end="181:107"><expr pos:start="181:13" pos:end="181:106"><call pos:start="181:13" pos:end="181:106"><name pos:start="181:13" pos:end="181:18">av_log</name><argument_list pos:start="181:19" pos:end="181:106">(<argument pos:start="181:20" pos:end="181:27"><expr pos:start="181:20" pos:end="181:27"><name pos:start="181:20" pos:end="181:27"><name pos:start="181:20" pos:end="181:20">s</name><operator pos:start="181:21" pos:end="181:22">-&gt;</operator><name pos:start="181:23" pos:end="181:27">avctx</name></name></expr></argument>, <argument pos:start="181:30" pos:end="181:40"><expr pos:start="181:30" pos:end="181:40"><name pos:start="181:30" pos:end="181:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="181:43" pos:end="181:85"><expr pos:start="181:43" pos:end="181:85"><literal type="string" pos:start="181:43" pos:end="181:85">"mjpeg: Adobe header found, transform=%d\n"</literal></expr></argument>, <argument pos:start="181:88" pos:end="181:105"><expr pos:start="181:88" pos:end="181:105"><name pos:start="181:88" pos:end="181:105"><name pos:start="181:88" pos:end="181:88">s</name><operator pos:start="181:89" pos:end="181:90">-&gt;</operator><name pos:start="181:91" pos:end="181:105">adobe_transform</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:17"><expr pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:11">len</name> <operator pos:start="183:13" pos:end="183:14">-=</operator> <literal type="number" pos:start="183:16" pos:end="183:16">7</literal></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="190:5" pos:end="256:5"><if pos:start="190:5" pos:end="256:5">if <condition pos:start="190:8" pos:end="190:30">(<expr pos:start="190:9" pos:end="190:29"><name pos:start="190:9" pos:end="190:10">id</name> <operator pos:start="190:12" pos:end="190:13">==</operator> <call pos:start="190:15" pos:end="190:29"><name pos:start="190:15" pos:end="190:21">AV_RB32</name><argument_list pos:start="190:22" pos:end="190:29">(<argument pos:start="190:23" pos:end="190:28"><expr pos:start="190:23" pos:end="190:28"><literal type="string" pos:start="190:23" pos:end="190:28">"LJIF"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="190:32" pos:end="256:5">{<block_content pos:start="192:9" pos:end="251:37">

        <decl_stmt pos:start="192:9" pos:end="192:25"><decl pos:start="192:9" pos:end="192:24"><type pos:start="192:9" pos:end="192:11"><name pos:start="192:9" pos:end="192:11">int</name></type> <name pos:start="192:13" pos:end="192:15">rgb</name> <init pos:start="192:17" pos:end="192:24">= <expr pos:start="192:19" pos:end="192:24"><name pos:start="192:19" pos:end="192:24"><name pos:start="192:19" pos:end="192:19">s</name><operator pos:start="192:20" pos:end="192:21">-&gt;</operator><name pos:start="192:22" pos:end="192:24">rgb</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="194:9" pos:end="194:41"><decl pos:start="194:9" pos:end="194:40"><type pos:start="194:9" pos:end="194:11"><name pos:start="194:9" pos:end="194:11">int</name></type> <name pos:start="194:13" pos:end="194:23">pegasus_rct</name> <init pos:start="194:25" pos:end="194:40">= <expr pos:start="194:27" pos:end="194:40"><name pos:start="194:27" pos:end="194:40"><name pos:start="194:27" pos:end="194:27">s</name><operator pos:start="194:28" pos:end="194:29">-&gt;</operator><name pos:start="194:30" pos:end="194:40">pegasus_rct</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="196:9" pos:end="200:59"><if pos:start="196:9" pos:end="200:59">if <condition pos:start="196:12" pos:end="196:49">(<expr pos:start="196:13" pos:end="196:48"><name pos:start="196:13" pos:end="196:27"><name pos:start="196:13" pos:end="196:13">s</name><operator pos:start="196:14" pos:end="196:15">-&gt;</operator><name pos:start="196:16" pos:end="196:20">avctx</name><operator pos:start="196:21" pos:end="196:22">-&gt;</operator><name pos:start="196:23" pos:end="196:27">debug</name></name> <operator pos:start="196:29" pos:end="196:29">&amp;</operator> <name pos:start="196:31" pos:end="196:48">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="198:13" pos:end="200:59"><block_content pos:start="198:13" pos:end="200:59">

            <expr_stmt pos:start="198:13" pos:end="200:59"><expr pos:start="198:13" pos:end="200:58"><call pos:start="198:13" pos:end="200:58"><name pos:start="198:13" pos:end="198:18">av_log</name><argument_list pos:start="198:19" pos:end="200:58">(<argument pos:start="198:20" pos:end="198:27"><expr pos:start="198:20" pos:end="198:27"><name pos:start="198:20" pos:end="198:27"><name pos:start="198:20" pos:end="198:20">s</name><operator pos:start="198:21" pos:end="198:22">-&gt;</operator><name pos:start="198:23" pos:end="198:27">avctx</name></name></expr></argument>, <argument pos:start="198:30" pos:end="198:40"><expr pos:start="198:30" pos:end="198:40"><name pos:start="198:30" pos:end="198:40">AV_LOG_INFO</name></expr></argument>,

                   <argument pos:start="200:20" pos:end="200:57"><expr pos:start="200:20" pos:end="200:57"><literal type="string" pos:start="200:20" pos:end="200:57">"Pegasus lossless jpeg header found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="202:9" pos:end="202:30"><expr pos:start="202:9" pos:end="202:29"><call pos:start="202:9" pos:end="202:29"><name pos:start="202:9" pos:end="202:17">skip_bits</name><argument_list pos:start="202:18" pos:end="202:29">(<argument pos:start="202:19" pos:end="202:24"><expr pos:start="202:19" pos:end="202:24"><operator pos:start="202:19" pos:end="202:19">&amp;</operator><name pos:start="202:20" pos:end="202:24"><name pos:start="202:20" pos:end="202:20">s</name><operator pos:start="202:21" pos:end="202:22">-&gt;</operator><name pos:start="202:23" pos:end="202:24">gb</name></name></expr></argument>, <argument pos:start="202:27" pos:end="202:28"><expr pos:start="202:27" pos:end="202:28"><literal type="number" pos:start="202:27" pos:end="202:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="202:32" pos:end="202:46">/* version ? */</comment>

        <expr_stmt pos:start="204:9" pos:end="204:30"><expr pos:start="204:9" pos:end="204:29"><call pos:start="204:9" pos:end="204:29"><name pos:start="204:9" pos:end="204:17">skip_bits</name><argument_list pos:start="204:18" pos:end="204:29">(<argument pos:start="204:19" pos:end="204:24"><expr pos:start="204:19" pos:end="204:24"><operator pos:start="204:19" pos:end="204:19">&amp;</operator><name pos:start="204:20" pos:end="204:24"><name pos:start="204:20" pos:end="204:20">s</name><operator pos:start="204:21" pos:end="204:22">-&gt;</operator><name pos:start="204:23" pos:end="204:24">gb</name></name></expr></argument>, <argument pos:start="204:27" pos:end="204:28"><expr pos:start="204:27" pos:end="204:28"><literal type="number" pos:start="204:27" pos:end="204:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="204:32" pos:end="204:54">/* unknown always 0? */</comment>

        <expr_stmt pos:start="206:9" pos:end="206:30"><expr pos:start="206:9" pos:end="206:29"><call pos:start="206:9" pos:end="206:29"><name pos:start="206:9" pos:end="206:17">skip_bits</name><argument_list pos:start="206:18" pos:end="206:29">(<argument pos:start="206:19" pos:end="206:24"><expr pos:start="206:19" pos:end="206:24"><operator pos:start="206:19" pos:end="206:19">&amp;</operator><name pos:start="206:20" pos:end="206:24"><name pos:start="206:20" pos:end="206:20">s</name><operator pos:start="206:21" pos:end="206:22">-&gt;</operator><name pos:start="206:23" pos:end="206:24">gb</name></name></expr></argument>, <argument pos:start="206:27" pos:end="206:28"><expr pos:start="206:27" pos:end="206:28"><literal type="number" pos:start="206:27" pos:end="206:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="206:32" pos:end="206:54">/* unknown always 0? */</comment>

        <expr_stmt pos:start="208:9" pos:end="208:30"><expr pos:start="208:9" pos:end="208:29"><call pos:start="208:9" pos:end="208:29"><name pos:start="208:9" pos:end="208:17">skip_bits</name><argument_list pos:start="208:18" pos:end="208:29">(<argument pos:start="208:19" pos:end="208:24"><expr pos:start="208:19" pos:end="208:24"><operator pos:start="208:19" pos:end="208:19">&amp;</operator><name pos:start="208:20" pos:end="208:24"><name pos:start="208:20" pos:end="208:20">s</name><operator pos:start="208:21" pos:end="208:22">-&gt;</operator><name pos:start="208:23" pos:end="208:24">gb</name></name></expr></argument>, <argument pos:start="208:27" pos:end="208:28"><expr pos:start="208:27" pos:end="208:28"><literal type="number" pos:start="208:27" pos:end="208:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="208:32" pos:end="208:54">/* unknown always 0? */</comment>

        <switch pos:start="210:9" pos:end="232:9">switch <condition pos:start="210:16" pos:end="210:38">(<expr pos:start="210:17" pos:end="210:37"><name pos:start="210:17" pos:end="210:17">i</name><operator pos:start="210:18" pos:end="210:18">=</operator><call pos:start="210:19" pos:end="210:37"><name pos:start="210:19" pos:end="210:26">get_bits</name><argument_list pos:start="210:27" pos:end="210:37">(<argument pos:start="210:28" pos:end="210:33"><expr pos:start="210:28" pos:end="210:33"><operator pos:start="210:28" pos:end="210:28">&amp;</operator><name pos:start="210:29" pos:end="210:33"><name pos:start="210:29" pos:end="210:29">s</name><operator pos:start="210:30" pos:end="210:31">-&gt;</operator><name pos:start="210:32" pos:end="210:33">gb</name></name></expr></argument>, <argument pos:start="210:36" pos:end="210:36"><expr pos:start="210:36" pos:end="210:36"><literal type="number" pos:start="210:36" pos:end="210:36">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="210:40" pos:end="232:9">{<block_content pos:start="212:9" pos:end="230:73">

        <case pos:start="212:9" pos:end="212:15">case <expr pos:start="212:14" pos:end="212:14"><literal type="number" pos:start="212:14" pos:end="212:14">1</literal></expr>:</case>

            <expr_stmt pos:start="214:13" pos:end="214:28"><expr pos:start="214:13" pos:end="214:27"><name pos:start="214:13" pos:end="214:15">rgb</name>         <operator pos:start="214:25" pos:end="214:25">=</operator> <literal type="number" pos:start="214:27" pos:end="214:27">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="216:13" pos:end="216:28"><expr pos:start="216:13" pos:end="216:27"><name pos:start="216:13" pos:end="216:23">pegasus_rct</name> <operator pos:start="216:25" pos:end="216:25">=</operator> <literal type="number" pos:start="216:27" pos:end="216:27">0</literal></expr>;</expr_stmt>

            <break pos:start="218:13" pos:end="218:18">break;</break>

        <case pos:start="220:9" pos:end="220:15">case <expr pos:start="220:14" pos:end="220:14"><literal type="number" pos:start="220:14" pos:end="220:14">2</literal></expr>:</case>

            <expr_stmt pos:start="222:13" pos:end="222:28"><expr pos:start="222:13" pos:end="222:27"><name pos:start="222:13" pos:end="222:15">rgb</name>         <operator pos:start="222:25" pos:end="222:25">=</operator> <literal type="number" pos:start="222:27" pos:end="222:27">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="224:13" pos:end="224:28"><expr pos:start="224:13" pos:end="224:27"><name pos:start="224:13" pos:end="224:23">pegasus_rct</name> <operator pos:start="224:25" pos:end="224:25">=</operator> <literal type="number" pos:start="224:27" pos:end="224:27">1</literal></expr>;</expr_stmt>

            <break pos:start="226:13" pos:end="226:18">break;</break>

        <default pos:start="228:9" pos:end="228:16">default:</default>

            <expr_stmt pos:start="230:13" pos:end="230:73"><expr pos:start="230:13" pos:end="230:72"><call pos:start="230:13" pos:end="230:72"><name pos:start="230:13" pos:end="230:18">av_log</name><argument_list pos:start="230:19" pos:end="230:72">(<argument pos:start="230:20" pos:end="230:27"><expr pos:start="230:20" pos:end="230:27"><name pos:start="230:20" pos:end="230:27"><name pos:start="230:20" pos:end="230:20">s</name><operator pos:start="230:21" pos:end="230:22">-&gt;</operator><name pos:start="230:23" pos:end="230:27">avctx</name></name></expr></argument>, <argument pos:start="230:30" pos:end="230:41"><expr pos:start="230:30" pos:end="230:41"><name pos:start="230:30" pos:end="230:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="230:44" pos:end="230:68"><expr pos:start="230:44" pos:end="230:68"><literal type="string" pos:start="230:44" pos:end="230:68">"unknown colorspace %d\n"</literal></expr></argument>, <argument pos:start="230:71" pos:end="230:71"><expr pos:start="230:71" pos:end="230:71"><name pos:start="230:71" pos:end="230:71">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>



        <expr_stmt pos:start="236:9" pos:end="236:17"><expr pos:start="236:9" pos:end="236:16"><name pos:start="236:9" pos:end="236:11">len</name> <operator pos:start="236:13" pos:end="236:14">-=</operator> <literal type="number" pos:start="236:16" pos:end="236:16">9</literal></expr>;</expr_stmt>

        <if_stmt pos:start="238:9" pos:end="245:13"><if pos:start="238:9" pos:end="245:13">if <condition pos:start="238:12" pos:end="238:27">(<expr pos:start="238:13" pos:end="238:26"><name pos:start="238:13" pos:end="238:26"><name pos:start="238:13" pos:end="238:13">s</name><operator pos:start="238:14" pos:end="238:15">-&gt;</operator><name pos:start="238:16" pos:end="238:26">got_picture</name></name></expr>)</condition><block type="pseudo" pos:start="240:13" pos:end="245:13"><block_content pos:start="240:13" pos:end="245:13">

            <if_stmt pos:start="240:13" pos:end="245:13"><if pos:start="240:13" pos:end="245:13">if <condition pos:start="240:16" pos:end="240:63">(<expr pos:start="240:17" pos:end="240:62"><name pos:start="240:17" pos:end="240:19">rgb</name> <operator pos:start="240:21" pos:end="240:22">!=</operator> <name pos:start="240:24" pos:end="240:29"><name pos:start="240:24" pos:end="240:24">s</name><operator pos:start="240:25" pos:end="240:26">-&gt;</operator><name pos:start="240:27" pos:end="240:29">rgb</name></name> <operator pos:start="240:31" pos:end="240:32">||</operator> <name pos:start="240:34" pos:end="240:44">pegasus_rct</name> <operator pos:start="240:46" pos:end="240:47">!=</operator> <name pos:start="240:49" pos:end="240:62"><name pos:start="240:49" pos:end="240:49">s</name><operator pos:start="240:50" pos:end="240:51">-&gt;</operator><name pos:start="240:52" pos:end="240:62">pegasus_rct</name></name></expr>)</condition> <block pos:start="240:65" pos:end="245:13">{<block_content pos:start="242:17" pos:end="242:75">

                <expr_stmt pos:start="242:17" pos:end="242:75"><expr pos:start="242:17" pos:end="242:74"><call pos:start="242:17" pos:end="242:74"><name pos:start="242:17" pos:end="242:22">av_log</name><argument_list pos:start="242:23" pos:end="242:74">(<argument pos:start="242:24" pos:end="242:31"><expr pos:start="242:24" pos:end="242:31"><name pos:start="242:24" pos:end="242:31"><name pos:start="242:24" pos:end="242:24">s</name><operator pos:start="242:25" pos:end="242:26">-&gt;</operator><name pos:start="242:27" pos:end="242:31">avctx</name></name></expr></argument>, <argument pos:start="242:34" pos:end="242:47"><expr pos:start="242:34" pos:end="242:47"><name pos:start="242:34" pos:end="242:47">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="242:50" pos:end="242:73"><expr pos:start="242:50" pos:end="242:73"><literal type="string" pos:start="242:50" pos:end="242:73">"Mismatching LJIF tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="249:9" pos:end="249:21"><expr pos:start="249:9" pos:end="249:20"><name pos:start="249:9" pos:end="249:14"><name pos:start="249:9" pos:end="249:9">s</name><operator pos:start="249:10" pos:end="249:11">-&gt;</operator><name pos:start="249:12" pos:end="249:14">rgb</name></name> <operator pos:start="249:16" pos:end="249:16">=</operator> <name pos:start="249:18" pos:end="249:20">rgb</name></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:37"><expr pos:start="251:9" pos:end="251:36"><name pos:start="251:9" pos:end="251:22"><name pos:start="251:9" pos:end="251:9">s</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:22">pegasus_rct</name></name> <operator pos:start="251:24" pos:end="251:24">=</operator> <name pos:start="251:26" pos:end="251:36">pegasus_rct</name></expr>;</expr_stmt>




    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="258:5" pos:end="269:5"><if pos:start="258:5" pos:end="269:5">if <condition pos:start="258:8" pos:end="258:41">(<expr pos:start="258:9" pos:end="258:40"><name pos:start="258:9" pos:end="258:10">id</name> <operator pos:start="258:12" pos:end="258:13">==</operator> <call pos:start="258:15" pos:end="258:29"><name pos:start="258:15" pos:end="258:21">AV_RL32</name><argument_list pos:start="258:22" pos:end="258:29">(<argument pos:start="258:23" pos:end="258:28"><expr pos:start="258:23" pos:end="258:28"><literal type="string" pos:start="258:23" pos:end="258:28">"colr"</literal></expr></argument>)</argument_list></call> <operator pos:start="258:31" pos:end="258:32">&amp;&amp;</operator> <name pos:start="258:34" pos:end="258:36">len</name> <operator pos:start="258:38" pos:end="258:38">&gt;</operator> <literal type="number" pos:start="258:40" pos:end="258:40">0</literal></expr>)</condition> <block pos:start="258:43" pos:end="269:5">{<block_content pos:start="260:9" pos:end="266:15">

        <expr_stmt pos:start="260:9" pos:end="260:38"><expr pos:start="260:9" pos:end="260:37"><name pos:start="260:9" pos:end="260:15"><name pos:start="260:9" pos:end="260:9">s</name><operator pos:start="260:10" pos:end="260:11">-&gt;</operator><name pos:start="260:12" pos:end="260:15">colr</name></name> <operator pos:start="260:17" pos:end="260:17">=</operator> <call pos:start="260:19" pos:end="260:37"><name pos:start="260:19" pos:end="260:26">get_bits</name><argument_list pos:start="260:27" pos:end="260:37">(<argument pos:start="260:28" pos:end="260:33"><expr pos:start="260:28" pos:end="260:33"><operator pos:start="260:28" pos:end="260:28">&amp;</operator><name pos:start="260:29" pos:end="260:33"><name pos:start="260:29" pos:end="260:29">s</name><operator pos:start="260:30" pos:end="260:31">-&gt;</operator><name pos:start="260:32" pos:end="260:33">gb</name></name></expr></argument>, <argument pos:start="260:36" pos:end="260:36"><expr pos:start="260:36" pos:end="260:36"><literal type="number" pos:start="260:36" pos:end="260:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="262:9" pos:end="264:64"><if pos:start="262:9" pos:end="264:64">if <condition pos:start="262:12" pos:end="262:49">(<expr pos:start="262:13" pos:end="262:48"><name pos:start="262:13" pos:end="262:27"><name pos:start="262:13" pos:end="262:13">s</name><operator pos:start="262:14" pos:end="262:15">-&gt;</operator><name pos:start="262:16" pos:end="262:20">avctx</name><operator pos:start="262:21" pos:end="262:22">-&gt;</operator><name pos:start="262:23" pos:end="262:27">debug</name></name> <operator pos:start="262:29" pos:end="262:29">&amp;</operator> <name pos:start="262:31" pos:end="262:48">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="264:13" pos:end="264:64"><block_content pos:start="264:13" pos:end="264:64">

            <expr_stmt pos:start="264:13" pos:end="264:64"><expr pos:start="264:13" pos:end="264:63"><call pos:start="264:13" pos:end="264:63"><name pos:start="264:13" pos:end="264:18">av_log</name><argument_list pos:start="264:19" pos:end="264:63">(<argument pos:start="264:20" pos:end="264:27"><expr pos:start="264:20" pos:end="264:27"><name pos:start="264:20" pos:end="264:27"><name pos:start="264:20" pos:end="264:20">s</name><operator pos:start="264:21" pos:end="264:22">-&gt;</operator><name pos:start="264:23" pos:end="264:27">avctx</name></name></expr></argument>, <argument pos:start="264:30" pos:end="264:40"><expr pos:start="264:30" pos:end="264:40"><name pos:start="264:30" pos:end="264:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="264:43" pos:end="264:53"><expr pos:start="264:43" pos:end="264:53"><literal type="string" pos:start="264:43" pos:end="264:53">"COLR %d\n"</literal></expr></argument>, <argument pos:start="264:56" pos:end="264:62"><expr pos:start="264:56" pos:end="264:62"><name pos:start="264:56" pos:end="264:62"><name pos:start="264:56" pos:end="264:56">s</name><operator pos:start="264:57" pos:end="264:58">-&gt;</operator><name pos:start="264:59" pos:end="264:62">colr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="266:9" pos:end="266:15"><expr pos:start="266:9" pos:end="266:14"><name pos:start="266:9" pos:end="266:11">len</name> <operator pos:start="266:13" pos:end="266:14">--</operator></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="271:5" pos:end="282:5"><if pos:start="271:5" pos:end="282:5">if <condition pos:start="271:8" pos:end="271:41">(<expr pos:start="271:9" pos:end="271:40"><name pos:start="271:9" pos:end="271:10">id</name> <operator pos:start="271:12" pos:end="271:13">==</operator> <call pos:start="271:15" pos:end="271:29"><name pos:start="271:15" pos:end="271:21">AV_RL32</name><argument_list pos:start="271:22" pos:end="271:29">(<argument pos:start="271:23" pos:end="271:28"><expr pos:start="271:23" pos:end="271:28"><literal type="string" pos:start="271:23" pos:end="271:28">"xfrm"</literal></expr></argument>)</argument_list></call> <operator pos:start="271:31" pos:end="271:32">&amp;&amp;</operator> <name pos:start="271:34" pos:end="271:36">len</name> <operator pos:start="271:38" pos:end="271:38">&gt;</operator> <literal type="number" pos:start="271:40" pos:end="271:40">0</literal></expr>)</condition> <block pos:start="271:43" pos:end="282:5">{<block_content pos:start="273:9" pos:end="279:15">

        <expr_stmt pos:start="273:9" pos:end="273:38"><expr pos:start="273:9" pos:end="273:37"><name pos:start="273:9" pos:end="273:15"><name pos:start="273:9" pos:end="273:9">s</name><operator pos:start="273:10" pos:end="273:11">-&gt;</operator><name pos:start="273:12" pos:end="273:15">xfrm</name></name> <operator pos:start="273:17" pos:end="273:17">=</operator> <call pos:start="273:19" pos:end="273:37"><name pos:start="273:19" pos:end="273:26">get_bits</name><argument_list pos:start="273:27" pos:end="273:37">(<argument pos:start="273:28" pos:end="273:33"><expr pos:start="273:28" pos:end="273:33"><operator pos:start="273:28" pos:end="273:28">&amp;</operator><name pos:start="273:29" pos:end="273:33"><name pos:start="273:29" pos:end="273:29">s</name><operator pos:start="273:30" pos:end="273:31">-&gt;</operator><name pos:start="273:32" pos:end="273:33">gb</name></name></expr></argument>, <argument pos:start="273:36" pos:end="273:36"><expr pos:start="273:36" pos:end="273:36"><literal type="number" pos:start="273:36" pos:end="273:36">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="275:9" pos:end="277:64"><if pos:start="275:9" pos:end="277:64">if <condition pos:start="275:12" pos:end="275:49">(<expr pos:start="275:13" pos:end="275:48"><name pos:start="275:13" pos:end="275:27"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:20">avctx</name><operator pos:start="275:21" pos:end="275:22">-&gt;</operator><name pos:start="275:23" pos:end="275:27">debug</name></name> <operator pos:start="275:29" pos:end="275:29">&amp;</operator> <name pos:start="275:31" pos:end="275:48">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="277:13" pos:end="277:64"><block_content pos:start="277:13" pos:end="277:64">

            <expr_stmt pos:start="277:13" pos:end="277:64"><expr pos:start="277:13" pos:end="277:63"><call pos:start="277:13" pos:end="277:63"><name pos:start="277:13" pos:end="277:18">av_log</name><argument_list pos:start="277:19" pos:end="277:63">(<argument pos:start="277:20" pos:end="277:27"><expr pos:start="277:20" pos:end="277:27"><name pos:start="277:20" pos:end="277:27"><name pos:start="277:20" pos:end="277:20">s</name><operator pos:start="277:21" pos:end="277:22">-&gt;</operator><name pos:start="277:23" pos:end="277:27">avctx</name></name></expr></argument>, <argument pos:start="277:30" pos:end="277:40"><expr pos:start="277:30" pos:end="277:40"><name pos:start="277:30" pos:end="277:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="277:43" pos:end="277:53"><expr pos:start="277:43" pos:end="277:53"><literal type="string" pos:start="277:43" pos:end="277:53">"XFRM %d\n"</literal></expr></argument>, <argument pos:start="277:56" pos:end="277:62"><expr pos:start="277:56" pos:end="277:62"><name pos:start="277:56" pos:end="277:62"><name pos:start="277:56" pos:end="277:56">s</name><operator pos:start="277:57" pos:end="277:58">-&gt;</operator><name pos:start="277:59" pos:end="277:62">xfrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:15"><expr pos:start="279:9" pos:end="279:14"><name pos:start="279:9" pos:end="279:11">len</name> <operator pos:start="279:13" pos:end="279:14">--</operator></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="286:5" pos:end="286:31">/* JPS extension by VRex */</comment>

    <if_stmt pos:start="288:5" pos:end="358:5"><if pos:start="288:5" pos:end="358:5">if <condition pos:start="288:8" pos:end="288:68">(<expr pos:start="288:9" pos:end="288:67"><name pos:start="288:9" pos:end="288:21"><name pos:start="288:9" pos:end="288:9">s</name><operator pos:start="288:10" pos:end="288:11">-&gt;</operator><name pos:start="288:12" pos:end="288:21">start_code</name></name> <operator pos:start="288:23" pos:end="288:24">==</operator> <name pos:start="288:26" pos:end="288:29">APP3</name> <operator pos:start="288:31" pos:end="288:32">&amp;&amp;</operator> <name pos:start="288:34" pos:end="288:35">id</name> <operator pos:start="288:37" pos:end="288:38">==</operator> <call pos:start="288:40" pos:end="288:54"><name pos:start="288:40" pos:end="288:46">AV_RB32</name><argument_list pos:start="288:47" pos:end="288:54">(<argument pos:start="288:48" pos:end="288:53"><expr pos:start="288:48" pos:end="288:53"><literal type="string" pos:start="288:48" pos:end="288:53">"_JPS"</literal></expr></argument>)</argument_list></call> <operator pos:start="288:56" pos:end="288:57">&amp;&amp;</operator> <name pos:start="288:59" pos:end="288:61">len</name> <operator pos:start="288:63" pos:end="288:64">&gt;=</operator> <literal type="number" pos:start="288:66" pos:end="288:67">10</literal></expr>)</condition> <block pos:start="288:70" pos:end="358:5">{<block_content pos:start="290:9" pos:end="355:9">

        <decl_stmt pos:start="290:9" pos:end="290:32"><decl pos:start="290:9" pos:end="290:17"><type pos:start="290:9" pos:end="290:11"><name pos:start="290:9" pos:end="290:11">int</name></type> <name pos:start="290:13" pos:end="290:17">flags</name></decl>, <decl pos:start="290:20" pos:end="290:25"><type ref="prev" pos:start="290:9" pos:end="290:11"/><name pos:start="290:20" pos:end="290:25">layout</name></decl>, <decl pos:start="290:28" pos:end="290:31"><type ref="prev" pos:start="290:9" pos:end="290:11"/><name pos:start="290:28" pos:end="290:31">type</name></decl>;</decl_stmt>

        <if_stmt pos:start="292:9" pos:end="294:56"><if pos:start="292:9" pos:end="294:56">if <condition pos:start="292:12" pos:end="292:49">(<expr pos:start="292:13" pos:end="292:48"><name pos:start="292:13" pos:end="292:27"><name pos:start="292:13" pos:end="292:13">s</name><operator pos:start="292:14" pos:end="292:15">-&gt;</operator><name pos:start="292:16" pos:end="292:20">avctx</name><operator pos:start="292:21" pos:end="292:22">-&gt;</operator><name pos:start="292:23" pos:end="292:27">debug</name></name> <operator pos:start="292:29" pos:end="292:29">&amp;</operator> <name pos:start="292:31" pos:end="292:48">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="294:13" pos:end="294:56"><block_content pos:start="294:13" pos:end="294:56">

            <expr_stmt pos:start="294:13" pos:end="294:56"><expr pos:start="294:13" pos:end="294:55"><call pos:start="294:13" pos:end="294:55"><name pos:start="294:13" pos:end="294:18">av_log</name><argument_list pos:start="294:19" pos:end="294:55">(<argument pos:start="294:20" pos:end="294:27"><expr pos:start="294:20" pos:end="294:27"><name pos:start="294:20" pos:end="294:27"><name pos:start="294:20" pos:end="294:20">s</name><operator pos:start="294:21" pos:end="294:22">-&gt;</operator><name pos:start="294:23" pos:end="294:27">avctx</name></name></expr></argument>, <argument pos:start="294:30" pos:end="294:40"><expr pos:start="294:30" pos:end="294:40"><name pos:start="294:30" pos:end="294:40">AV_LOG_INFO</name></expr></argument>, <argument pos:start="294:43" pos:end="294:54"><expr pos:start="294:43" pos:end="294:54"><literal type="string" pos:start="294:43" pos:end="294:54">"_JPSJPS_\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="298:9" pos:end="298:30"><expr pos:start="298:9" pos:end="298:29"><call pos:start="298:9" pos:end="298:29"><name pos:start="298:9" pos:end="298:17">skip_bits</name><argument_list pos:start="298:18" pos:end="298:29">(<argument pos:start="298:19" pos:end="298:24"><expr pos:start="298:19" pos:end="298:24"><operator pos:start="298:19" pos:end="298:19">&amp;</operator><name pos:start="298:20" pos:end="298:24"><name pos:start="298:20" pos:end="298:20">s</name><operator pos:start="298:21" pos:end="298:22">-&gt;</operator><name pos:start="298:23" pos:end="298:24">gb</name></name></expr></argument>, <argument pos:start="298:27" pos:end="298:28"><expr pos:start="298:27" pos:end="298:28"><literal type="number" pos:start="298:27" pos:end="298:28">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="298:32" pos:end="298:40"><expr pos:start="298:32" pos:end="298:39"><name pos:start="298:32" pos:end="298:34">len</name> <operator pos:start="298:36" pos:end="298:37">-=</operator> <literal type="number" pos:start="298:39" pos:end="298:39">4</literal></expr>;</expr_stmt>  <comment type="block" pos:start="298:43" pos:end="298:52">/* JPS_ */</comment>

        <expr_stmt pos:start="300:9" pos:end="300:30"><expr pos:start="300:9" pos:end="300:29"><call pos:start="300:9" pos:end="300:29"><name pos:start="300:9" pos:end="300:17">skip_bits</name><argument_list pos:start="300:18" pos:end="300:29">(<argument pos:start="300:19" pos:end="300:24"><expr pos:start="300:19" pos:end="300:24"><operator pos:start="300:19" pos:end="300:19">&amp;</operator><name pos:start="300:20" pos:end="300:24"><name pos:start="300:20" pos:end="300:20">s</name><operator pos:start="300:21" pos:end="300:22">-&gt;</operator><name pos:start="300:23" pos:end="300:24">gb</name></name></expr></argument>, <argument pos:start="300:27" pos:end="300:28"><expr pos:start="300:27" pos:end="300:28"><literal type="number" pos:start="300:27" pos:end="300:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="300:32" pos:end="300:40"><expr pos:start="300:32" pos:end="300:39"><name pos:start="300:32" pos:end="300:34">len</name> <operator pos:start="300:36" pos:end="300:37">-=</operator> <literal type="number" pos:start="300:39" pos:end="300:39">2</literal></expr>;</expr_stmt>  <comment type="block" pos:start="300:43" pos:end="300:60">/* block length */</comment>

        <expr_stmt pos:start="302:9" pos:end="302:29"><expr pos:start="302:9" pos:end="302:28"><call pos:start="302:9" pos:end="302:28"><name pos:start="302:9" pos:end="302:17">skip_bits</name><argument_list pos:start="302:18" pos:end="302:28">(<argument pos:start="302:19" pos:end="302:24"><expr pos:start="302:19" pos:end="302:24"><operator pos:start="302:19" pos:end="302:19">&amp;</operator><name pos:start="302:20" pos:end="302:24"><name pos:start="302:20" pos:end="302:20">s</name><operator pos:start="302:21" pos:end="302:22">-&gt;</operator><name pos:start="302:23" pos:end="302:24">gb</name></name></expr></argument>, <argument pos:start="302:27" pos:end="302:27"><expr pos:start="302:27" pos:end="302:27"><literal type="number" pos:start="302:27" pos:end="302:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block" pos:start="302:43" pos:end="302:56">/* reserved */</comment>

        <expr_stmt pos:start="304:9" pos:end="304:37"><expr pos:start="304:9" pos:end="304:36"><name pos:start="304:9" pos:end="304:13">flags</name>  <operator pos:start="304:16" pos:end="304:16">=</operator> <call pos:start="304:18" pos:end="304:36"><name pos:start="304:18" pos:end="304:25">get_bits</name><argument_list pos:start="304:26" pos:end="304:36">(<argument pos:start="304:27" pos:end="304:32"><expr pos:start="304:27" pos:end="304:32"><operator pos:start="304:27" pos:end="304:27">&amp;</operator><name pos:start="304:28" pos:end="304:32"><name pos:start="304:28" pos:end="304:28">s</name><operator pos:start="304:29" pos:end="304:30">-&gt;</operator><name pos:start="304:31" pos:end="304:32">gb</name></name></expr></argument>, <argument pos:start="304:35" pos:end="304:35"><expr pos:start="304:35" pos:end="304:35"><literal type="number" pos:start="304:35" pos:end="304:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="306:9" pos:end="306:37"><expr pos:start="306:9" pos:end="306:36"><name pos:start="306:9" pos:end="306:14">layout</name> <operator pos:start="306:16" pos:end="306:16">=</operator> <call pos:start="306:18" pos:end="306:36"><name pos:start="306:18" pos:end="306:25">get_bits</name><argument_list pos:start="306:26" pos:end="306:36">(<argument pos:start="306:27" pos:end="306:32"><expr pos:start="306:27" pos:end="306:32"><operator pos:start="306:27" pos:end="306:27">&amp;</operator><name pos:start="306:28" pos:end="306:32"><name pos:start="306:28" pos:end="306:28">s</name><operator pos:start="306:29" pos:end="306:30">-&gt;</operator><name pos:start="306:31" pos:end="306:32">gb</name></name></expr></argument>, <argument pos:start="306:35" pos:end="306:35"><expr pos:start="306:35" pos:end="306:35"><literal type="number" pos:start="306:35" pos:end="306:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="308:9" pos:end="308:37"><expr pos:start="308:9" pos:end="308:36"><name pos:start="308:9" pos:end="308:12">type</name>   <operator pos:start="308:16" pos:end="308:16">=</operator> <call pos:start="308:18" pos:end="308:36"><name pos:start="308:18" pos:end="308:25">get_bits</name><argument_list pos:start="308:26" pos:end="308:36">(<argument pos:start="308:27" pos:end="308:32"><expr pos:start="308:27" pos:end="308:32"><operator pos:start="308:27" pos:end="308:27">&amp;</operator><name pos:start="308:28" pos:end="308:32"><name pos:start="308:28" pos:end="308:28">s</name><operator pos:start="308:29" pos:end="308:30">-&gt;</operator><name pos:start="308:31" pos:end="308:32">gb</name></name></expr></argument>, <argument pos:start="308:35" pos:end="308:35"><expr pos:start="308:35" pos:end="308:35"><literal type="number" pos:start="308:35" pos:end="308:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="310:9" pos:end="310:17"><expr pos:start="310:9" pos:end="310:16"><name pos:start="310:9" pos:end="310:11">len</name> <operator pos:start="310:13" pos:end="310:14">-=</operator> <literal type="number" pos:start="310:16" pos:end="310:16">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="314:9" pos:end="314:42"><expr pos:start="314:9" pos:end="314:41"><name pos:start="314:9" pos:end="314:19"><name pos:start="314:9" pos:end="314:9">s</name><operator pos:start="314:10" pos:end="314:11">-&gt;</operator><name pos:start="314:12" pos:end="314:19">stereo3d</name></name> <operator pos:start="314:21" pos:end="314:21">=</operator> <call pos:start="314:23" pos:end="314:41"><name pos:start="314:23" pos:end="314:39">av_stereo3d_alloc</name><argument_list pos:start="314:40" pos:end="314:41">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="316:9" pos:end="319:9"><if pos:start="316:9" pos:end="319:9">if <condition pos:start="316:12" pos:end="316:25">(<expr pos:start="316:13" pos:end="316:24"><operator pos:start="316:13" pos:end="316:13">!</operator><name pos:start="316:14" pos:end="316:24"><name pos:start="316:14" pos:end="316:14">s</name><operator pos:start="316:15" pos:end="316:16">-&gt;</operator><name pos:start="316:17" pos:end="316:24">stereo3d</name></name></expr>)</condition> <block pos:start="316:27" pos:end="319:9">{<block_content>


        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="321:9" pos:end="355:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:22">(<expr pos:start="321:13" pos:end="321:21"><name pos:start="321:13" pos:end="321:16">type</name> <operator pos:start="321:18" pos:end="321:19">==</operator> <literal type="number" pos:start="321:21" pos:end="321:21">0</literal></expr>)</condition> <block pos:start="321:24" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:47">

            <expr_stmt pos:start="323:13" pos:end="323:47"><expr pos:start="323:13" pos:end="323:46"><name pos:start="323:13" pos:end="323:29"><name pos:start="323:13" pos:end="323:13">s</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:23">stereo3d</name><operator pos:start="323:24" pos:end="323:25">-&gt;</operator><name pos:start="323:26" pos:end="323:29">type</name></name> <operator pos:start="323:31" pos:end="323:31">=</operator> <name pos:start="323:33" pos:end="323:46">AV_STEREO3D_2D</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="325:11" pos:end="355:9">else if <condition pos:start="325:19" pos:end="325:29">(<expr pos:start="325:20" pos:end="325:28"><name pos:start="325:20" pos:end="325:23">type</name> <operator pos:start="325:25" pos:end="325:26">==</operator> <literal type="number" pos:start="325:28" pos:end="325:28">1</literal></expr>)</condition> <block pos:start="325:31" pos:end="355:9">{<block_content pos:start="327:13" pos:end="353:13">

            <switch pos:start="327:13" pos:end="347:13">switch <condition pos:start="327:20" pos:end="327:27">(<expr pos:start="327:21" pos:end="327:26"><name pos:start="327:21" pos:end="327:26">layout</name></expr>)</condition> <block pos:start="327:29" pos:end="347:13">{<block_content pos:start="329:13" pos:end="345:22">

            <case pos:start="329:13" pos:end="329:22">case <expr pos:start="329:18" pos:end="329:21"><literal type="number" pos:start="329:18" pos:end="329:21">0x01</literal></expr>:</case>

                <expr_stmt pos:start="331:17" pos:end="331:54"><expr pos:start="331:17" pos:end="331:53"><name pos:start="331:17" pos:end="331:33"><name pos:start="331:17" pos:end="331:17">s</name><operator pos:start="331:18" pos:end="331:19">-&gt;</operator><name pos:start="331:20" pos:end="331:27">stereo3d</name><operator pos:start="331:28" pos:end="331:29">-&gt;</operator><name pos:start="331:30" pos:end="331:33">type</name></name> <operator pos:start="331:35" pos:end="331:35">=</operator> <name pos:start="331:37" pos:end="331:53">AV_STEREO3D_LINES</name></expr>;</expr_stmt>

                <break pos:start="333:17" pos:end="333:22">break;</break>

            <case pos:start="335:13" pos:end="335:22">case <expr pos:start="335:18" pos:end="335:21"><literal type="number" pos:start="335:18" pos:end="335:21">0x02</literal></expr>:</case>

                <expr_stmt pos:start="337:17" pos:end="337:59"><expr pos:start="337:17" pos:end="337:58"><name pos:start="337:17" pos:end="337:33"><name pos:start="337:17" pos:end="337:17">s</name><operator pos:start="337:18" pos:end="337:19">-&gt;</operator><name pos:start="337:20" pos:end="337:27">stereo3d</name><operator pos:start="337:28" pos:end="337:29">-&gt;</operator><name pos:start="337:30" pos:end="337:33">type</name></name> <operator pos:start="337:35" pos:end="337:35">=</operator> <name pos:start="337:37" pos:end="337:58">AV_STEREO3D_SIDEBYSIDE</name></expr>;</expr_stmt>

                <break pos:start="339:17" pos:end="339:22">break;</break>

            <case pos:start="341:13" pos:end="341:22">case <expr pos:start="341:18" pos:end="341:21"><literal type="number" pos:start="341:18" pos:end="341:21">0x03</literal></expr>:</case>

                <expr_stmt pos:start="343:17" pos:end="343:58"><expr pos:start="343:17" pos:end="343:57"><name pos:start="343:17" pos:end="343:33"><name pos:start="343:17" pos:end="343:17">s</name><operator pos:start="343:18" pos:end="343:19">-&gt;</operator><name pos:start="343:20" pos:end="343:27">stereo3d</name><operator pos:start="343:28" pos:end="343:29">-&gt;</operator><name pos:start="343:30" pos:end="343:33">type</name></name> <operator pos:start="343:35" pos:end="343:35">=</operator> <name pos:start="343:37" pos:end="343:57">AV_STEREO3D_TOPBOTTOM</name></expr>;</expr_stmt>

                <break pos:start="345:17" pos:end="345:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="349:13" pos:end="353:13"><if pos:start="349:13" pos:end="353:13">if <condition pos:start="349:16" pos:end="349:32">(<expr pos:start="349:17" pos:end="349:31"><operator pos:start="349:17" pos:end="349:17">!</operator><operator pos:start="349:18" pos:end="349:18">(</operator><name pos:start="349:19" pos:end="349:23">flags</name> <operator pos:start="349:25" pos:end="349:25">&amp;</operator> <literal type="number" pos:start="349:27" pos:end="349:30">0x04</literal><operator pos:start="349:31" pos:end="349:31">)</operator></expr>)</condition> <block pos:start="349:34" pos:end="353:13">{<block_content pos:start="351:17" pos:end="351:61">

                <expr_stmt pos:start="351:17" pos:end="351:61"><expr pos:start="351:17" pos:end="351:60"><name pos:start="351:17" pos:end="351:34"><name pos:start="351:17" pos:end="351:17">s</name><operator pos:start="351:18" pos:end="351:19">-&gt;</operator><name pos:start="351:20" pos:end="351:27">stereo3d</name><operator pos:start="351:28" pos:end="351:29">-&gt;</operator><name pos:start="351:30" pos:end="351:34">flags</name></name> <operator pos:start="351:36" pos:end="351:36">=</operator> <name pos:start="351:38" pos:end="351:60">AV_STEREO3D_FLAG_INVERT</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>


    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="362:5" pos:end="362:23">/* EXIF metadata */</comment>

    <if_stmt pos:start="364:5" pos:end="427:5"><if pos:start="364:5" pos:end="427:5">if <condition pos:start="364:8" pos:end="364:67">(<expr pos:start="364:9" pos:end="364:66"><name pos:start="364:9" pos:end="364:21"><name pos:start="364:9" pos:end="364:9">s</name><operator pos:start="364:10" pos:end="364:11">-&gt;</operator><name pos:start="364:12" pos:end="364:21">start_code</name></name> <operator pos:start="364:23" pos:end="364:24">==</operator> <name pos:start="364:26" pos:end="364:29">APP1</name> <operator pos:start="364:31" pos:end="364:32">&amp;&amp;</operator> <name pos:start="364:34" pos:end="364:35">id</name> <operator pos:start="364:37" pos:end="364:38">==</operator> <call pos:start="364:40" pos:end="364:54"><name pos:start="364:40" pos:end="364:46">AV_RB32</name><argument_list pos:start="364:47" pos:end="364:54">(<argument pos:start="364:48" pos:end="364:53"><expr pos:start="364:48" pos:end="364:53"><literal type="string" pos:start="364:48" pos:end="364:53">"Exif"</literal></expr></argument>)</argument_list></call> <operator pos:start="364:56" pos:end="364:57">&amp;&amp;</operator> <name pos:start="364:59" pos:end="364:61">len</name> <operator pos:start="364:63" pos:end="364:64">&gt;=</operator> <literal type="number" pos:start="364:66" pos:end="364:66">2</literal></expr>)</condition> <block pos:start="364:69" pos:end="427:5">{<block_content pos:start="366:9" pos:end="422:26">

        <decl_stmt pos:start="366:9" pos:end="366:30"><decl pos:start="366:9" pos:end="366:29"><type pos:start="366:9" pos:end="366:22"><name pos:start="366:9" pos:end="366:22">GetByteContext</name></type> <name pos:start="366:24" pos:end="366:29">gbytes</name></decl>;</decl_stmt>

        <decl_stmt pos:start="368:9" pos:end="368:44"><decl pos:start="368:9" pos:end="368:15"><type pos:start="368:9" pos:end="368:11"><name pos:start="368:9" pos:end="368:11">int</name></type> <name pos:start="368:13" pos:end="368:15">ret</name></decl>, <decl pos:start="368:18" pos:end="368:19"><type ref="prev" pos:start="368:9" pos:end="368:11"/><name pos:start="368:18" pos:end="368:19">le</name></decl>, <decl pos:start="368:22" pos:end="368:31"><type ref="prev" pos:start="368:9" pos:end="368:11"/><name pos:start="368:22" pos:end="368:31">ifd_offset</name></decl>, <decl pos:start="368:34" pos:end="368:43"><type ref="prev" pos:start="368:9" pos:end="368:11"/><name pos:start="368:34" pos:end="368:43">bytes_read</name></decl>;</decl_stmt>

        <decl_stmt pos:start="370:9" pos:end="370:31"><decl pos:start="370:9" pos:end="370:30"><type pos:start="370:9" pos:end="370:23"><specifier pos:start="370:9" pos:end="370:13">const</specifier> <name pos:start="370:15" pos:end="370:21">uint8_t</name> <modifier pos:start="370:23" pos:end="370:23">*</modifier></type><name pos:start="370:24" pos:end="370:30">aligned</name></decl>;</decl_stmt>



        <expr_stmt pos:start="374:9" pos:end="374:30"><expr pos:start="374:9" pos:end="374:29"><call pos:start="374:9" pos:end="374:29"><name pos:start="374:9" pos:end="374:17">skip_bits</name><argument_list pos:start="374:18" pos:end="374:29">(<argument pos:start="374:19" pos:end="374:24"><expr pos:start="374:19" pos:end="374:24"><operator pos:start="374:19" pos:end="374:19">&amp;</operator><name pos:start="374:20" pos:end="374:24"><name pos:start="374:20" pos:end="374:20">s</name><operator pos:start="374:21" pos:end="374:22">-&gt;</operator><name pos:start="374:23" pos:end="374:24">gb</name></name></expr></argument>, <argument pos:start="374:27" pos:end="374:28"><expr pos:start="374:27" pos:end="374:28"><literal type="number" pos:start="374:27" pos:end="374:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="374:32" pos:end="374:46">// skip padding</comment>

        <expr_stmt pos:start="376:9" pos:end="376:17"><expr pos:start="376:9" pos:end="376:16"><name pos:start="376:9" pos:end="376:11">len</name> <operator pos:start="376:13" pos:end="376:14">-=</operator> <literal type="number" pos:start="376:16" pos:end="376:16">2</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="380:9" pos:end="380:33">// init byte wise reading</comment>

        <expr_stmt pos:start="382:9" pos:end="382:41"><expr pos:start="382:9" pos:end="382:40"><name pos:start="382:9" pos:end="382:15">aligned</name> <operator pos:start="382:17" pos:end="382:17">=</operator> <call pos:start="382:19" pos:end="382:40"><name pos:start="382:19" pos:end="382:32">align_get_bits</name><argument_list pos:start="382:33" pos:end="382:40">(<argument pos:start="382:34" pos:end="382:39"><expr pos:start="382:34" pos:end="382:39"><operator pos:start="382:34" pos:end="382:34">&amp;</operator><name pos:start="382:35" pos:end="382:39"><name pos:start="382:35" pos:end="382:35">s</name><operator pos:start="382:36" pos:end="382:37">-&gt;</operator><name pos:start="382:38" pos:end="382:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="384:9" pos:end="384:48"><expr pos:start="384:9" pos:end="384:47"><call pos:start="384:9" pos:end="384:47"><name pos:start="384:9" pos:end="384:24">bytestream2_init</name><argument_list pos:start="384:25" pos:end="384:47">(<argument pos:start="384:26" pos:end="384:32"><expr pos:start="384:26" pos:end="384:32"><operator pos:start="384:26" pos:end="384:26">&amp;</operator><name pos:start="384:27" pos:end="384:32">gbytes</name></expr></argument>, <argument pos:start="384:35" pos:end="384:41"><expr pos:start="384:35" pos:end="384:41"><name pos:start="384:35" pos:end="384:41">aligned</name></expr></argument>, <argument pos:start="384:44" pos:end="384:46"><expr pos:start="384:44" pos:end="384:46"><name pos:start="384:44" pos:end="384:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="388:9" pos:end="388:27">// read TIFF header</comment>

        <expr_stmt pos:start="390:9" pos:end="390:59"><expr pos:start="390:9" pos:end="390:58"><name pos:start="390:9" pos:end="390:11">ret</name> <operator pos:start="390:13" pos:end="390:13">=</operator> <call pos:start="390:15" pos:end="390:58"><name pos:start="390:15" pos:end="390:31">ff_tdecode_header</name><argument_list pos:start="390:32" pos:end="390:58">(<argument pos:start="390:33" pos:end="390:39"><expr pos:start="390:33" pos:end="390:39"><operator pos:start="390:33" pos:end="390:33">&amp;</operator><name pos:start="390:34" pos:end="390:39">gbytes</name></expr></argument>, <argument pos:start="390:42" pos:end="390:44"><expr pos:start="390:42" pos:end="390:44"><operator pos:start="390:42" pos:end="390:42">&amp;</operator><name pos:start="390:43" pos:end="390:44">le</name></expr></argument>, <argument pos:start="390:47" pos:end="390:57"><expr pos:start="390:47" pos:end="390:57"><operator pos:start="390:47" pos:end="390:47">&amp;</operator><name pos:start="390:48" pos:end="390:57">ifd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="392:9" pos:end="414:9"><if pos:start="392:9" pos:end="396:9">if <condition pos:start="392:12" pos:end="392:16">(<expr pos:start="392:13" pos:end="392:15"><name pos:start="392:13" pos:end="392:15">ret</name></expr>)</condition> <block pos:start="392:18" pos:end="396:9">{<block_content pos:start="394:13" pos:end="394:88">

            <expr_stmt pos:start="394:13" pos:end="394:88"><expr pos:start="394:13" pos:end="394:87"><call pos:start="394:13" pos:end="394:87"><name pos:start="394:13" pos:end="394:18">av_log</name><argument_list pos:start="394:19" pos:end="394:87">(<argument pos:start="394:20" pos:end="394:27"><expr pos:start="394:20" pos:end="394:27"><name pos:start="394:20" pos:end="394:27"><name pos:start="394:20" pos:end="394:20">s</name><operator pos:start="394:21" pos:end="394:22">-&gt;</operator><name pos:start="394:23" pos:end="394:27">avctx</name></name></expr></argument>, <argument pos:start="394:30" pos:end="394:41"><expr pos:start="394:30" pos:end="394:41"><name pos:start="394:30" pos:end="394:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="394:44" pos:end="394:86"><expr pos:start="394:44" pos:end="394:86"><literal type="string" pos:start="394:44" pos:end="394:86">"mjpeg: invalid TIFF header in EXIF data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="396:11" pos:end="414:9">else <block pos:start="396:16" pos:end="414:9">{<block_content pos:start="398:13" pos:end="412:13">

            <expr_stmt pos:start="398:13" pos:end="398:60"><expr pos:start="398:13" pos:end="398:59"><call pos:start="398:13" pos:end="398:59"><name pos:start="398:13" pos:end="398:28">bytestream2_seek</name><argument_list pos:start="398:29" pos:end="398:59">(<argument pos:start="398:30" pos:end="398:36"><expr pos:start="398:30" pos:end="398:36"><operator pos:start="398:30" pos:end="398:30">&amp;</operator><name pos:start="398:31" pos:end="398:36">gbytes</name></expr></argument>, <argument pos:start="398:39" pos:end="398:48"><expr pos:start="398:39" pos:end="398:48"><name pos:start="398:39" pos:end="398:48">ifd_offset</name></expr></argument>, <argument pos:start="398:51" pos:end="398:58"><expr pos:start="398:51" pos:end="398:58"><name pos:start="398:51" pos:end="398:58">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="line" pos:start="402:13" pos:end="402:50">// read 0th IFD and store the metadata</comment>

            <comment type="line" pos:start="404:13" pos:end="404:77">// (return values &gt; 0 indicate the presence of subimage metadata)</comment>

            <expr_stmt pos:start="406:13" pos:end="406:86"><expr pos:start="406:13" pos:end="406:85"><name pos:start="406:13" pos:end="406:15">ret</name> <operator pos:start="406:17" pos:end="406:17">=</operator> <call pos:start="406:19" pos:end="406:85"><name pos:start="406:19" pos:end="406:40">avpriv_exif_decode_ifd</name><argument_list pos:start="406:41" pos:end="406:85">(<argument pos:start="406:42" pos:end="406:49"><expr pos:start="406:42" pos:end="406:49"><name pos:start="406:42" pos:end="406:49"><name pos:start="406:42" pos:end="406:42">s</name><operator pos:start="406:43" pos:end="406:44">-&gt;</operator><name pos:start="406:45" pos:end="406:49">avctx</name></name></expr></argument>, <argument pos:start="406:52" pos:end="406:58"><expr pos:start="406:52" pos:end="406:58"><operator pos:start="406:52" pos:end="406:52">&amp;</operator><name pos:start="406:53" pos:end="406:58">gbytes</name></expr></argument>, <argument pos:start="406:61" pos:end="406:62"><expr pos:start="406:61" pos:end="406:62"><name pos:start="406:61" pos:end="406:62">le</name></expr></argument>, <argument pos:start="406:65" pos:end="406:65"><expr pos:start="406:65" pos:end="406:65"><literal type="number" pos:start="406:65" pos:end="406:65">0</literal></expr></argument>, <argument pos:start="406:68" pos:end="406:84"><expr pos:start="406:68" pos:end="406:84"><operator pos:start="406:68" pos:end="406:68">&amp;</operator><name pos:start="406:69" pos:end="406:84"><name pos:start="406:69" pos:end="406:69">s</name><operator pos:start="406:70" pos:end="406:71">-&gt;</operator><name pos:start="406:72" pos:end="406:84">exif_metadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="408:13" pos:end="412:13"><if pos:start="408:13" pos:end="412:13">if <condition pos:start="408:16" pos:end="408:24">(<expr pos:start="408:17" pos:end="408:23"><name pos:start="408:17" pos:end="408:19">ret</name> <operator pos:start="408:21" pos:end="408:21">&lt;</operator> <literal type="number" pos:start="408:23" pos:end="408:23">0</literal></expr>)</condition> <block pos:start="408:26" pos:end="412:13">{<block_content pos:start="410:17" pos:end="410:84">

                <expr_stmt pos:start="410:17" pos:end="410:84"><expr pos:start="410:17" pos:end="410:83"><call pos:start="410:17" pos:end="410:83"><name pos:start="410:17" pos:end="410:22">av_log</name><argument_list pos:start="410:23" pos:end="410:83">(<argument pos:start="410:24" pos:end="410:31"><expr pos:start="410:24" pos:end="410:31"><name pos:start="410:24" pos:end="410:31"><name pos:start="410:24" pos:end="410:24">s</name><operator pos:start="410:25" pos:end="410:26">-&gt;</operator><name pos:start="410:27" pos:end="410:31">avctx</name></name></expr></argument>, <argument pos:start="410:34" pos:end="410:45"><expr pos:start="410:34" pos:end="410:45"><name pos:start="410:34" pos:end="410:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="410:48" pos:end="410:82"><expr pos:start="410:48" pos:end="410:82"><literal type="string" pos:start="410:48" pos:end="410:82">"mjpeg: error decoding EXIF data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="418:9" pos:end="418:47"><expr pos:start="418:9" pos:end="418:46"><name pos:start="418:9" pos:end="418:18">bytes_read</name> <operator pos:start="418:20" pos:end="418:20">=</operator> <call pos:start="418:22" pos:end="418:46"><name pos:start="418:22" pos:end="418:37">bytestream2_tell</name><argument_list pos:start="418:38" pos:end="418:46">(<argument pos:start="418:39" pos:end="418:45"><expr pos:start="418:39" pos:end="418:45"><operator pos:start="418:39" pos:end="418:39">&amp;</operator><name pos:start="418:40" pos:end="418:45">gbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="420:9" pos:end="420:43"><expr pos:start="420:9" pos:end="420:42"><call pos:start="420:9" pos:end="420:42"><name pos:start="420:9" pos:end="420:17">skip_bits</name><argument_list pos:start="420:18" pos:end="420:42">(<argument pos:start="420:19" pos:end="420:24"><expr pos:start="420:19" pos:end="420:24"><operator pos:start="420:19" pos:end="420:19">&amp;</operator><name pos:start="420:20" pos:end="420:24"><name pos:start="420:20" pos:end="420:20">s</name><operator pos:start="420:21" pos:end="420:22">-&gt;</operator><name pos:start="420:23" pos:end="420:24">gb</name></name></expr></argument>, <argument pos:start="420:27" pos:end="420:41"><expr pos:start="420:27" pos:end="420:41"><name pos:start="420:27" pos:end="420:36">bytes_read</name> <operator pos:start="420:38" pos:end="420:39">&lt;&lt;</operator> <literal type="number" pos:start="420:41" pos:end="420:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="422:9" pos:end="422:26"><expr pos:start="422:9" pos:end="422:25"><name pos:start="422:9" pos:end="422:11">len</name> <operator pos:start="422:13" pos:end="422:14">-=</operator> <name pos:start="422:16" pos:end="422:25">bytes_read</name></expr>;</expr_stmt>




    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="431:5" pos:end="431:23">/* Apple MJPEG-A */</comment>

    <if_stmt pos:start="433:5" pos:end="469:5"><if pos:start="433:5" pos:end="469:5">if <condition pos:start="433:8" pos:end="433:54">(<expr pos:start="433:9" pos:end="433:53"><operator pos:start="433:9" pos:end="433:9">(</operator><name pos:start="433:10" pos:end="433:22"><name pos:start="433:10" pos:end="433:10">s</name><operator pos:start="433:11" pos:end="433:12">-&gt;</operator><name pos:start="433:13" pos:end="433:22">start_code</name></name> <operator pos:start="433:24" pos:end="433:25">==</operator> <name pos:start="433:27" pos:end="433:30">APP1</name><operator pos:start="433:31" pos:end="433:31">)</operator> <operator pos:start="433:33" pos:end="433:34">&amp;&amp;</operator> <operator pos:start="433:36" pos:end="433:36">(</operator><name pos:start="433:37" pos:end="433:39">len</name> <operator pos:start="433:41" pos:end="433:41">&gt;</operator> <operator pos:start="433:43" pos:end="433:43">(</operator><literal type="number" pos:start="433:44" pos:end="433:49">0x28</literal> <operator pos:start="433:49" pos:end="433:49">-</operator> <literal type="number" pos:start="433:51" pos:end="433:51">8</literal><operator pos:start="433:52" pos:end="433:52">)</operator><operator pos:start="433:53" pos:end="433:53">)</operator></expr>)</condition> <block pos:start="433:56" pos:end="469:5">{<block_content pos:start="435:9" pos:end="467:9">

        <expr_stmt pos:start="435:9" pos:end="435:41"><expr pos:start="435:9" pos:end="435:40"><name pos:start="435:9" pos:end="435:10">id</name>   <operator pos:start="435:14" pos:end="435:14">=</operator> <call pos:start="435:16" pos:end="435:40"><name pos:start="435:16" pos:end="435:28">get_bits_long</name><argument_list pos:start="435:29" pos:end="435:40">(<argument pos:start="435:30" pos:end="435:35"><expr pos:start="435:30" pos:end="435:35"><operator pos:start="435:30" pos:end="435:30">&amp;</operator><name pos:start="435:31" pos:end="435:35"><name pos:start="435:31" pos:end="435:31">s</name><operator pos:start="435:32" pos:end="435:33">-&gt;</operator><name pos:start="435:34" pos:end="435:35">gb</name></name></expr></argument>, <argument pos:start="435:38" pos:end="435:39"><expr pos:start="435:38" pos:end="435:39"><literal type="number" pos:start="435:38" pos:end="435:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="437:9" pos:end="437:17"><expr pos:start="437:9" pos:end="437:16"><name pos:start="437:9" pos:end="437:11">len</name> <operator pos:start="437:13" pos:end="437:14">-=</operator> <literal type="number" pos:start="437:16" pos:end="437:16">4</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="439:9" pos:end="439:27">/* Apple MJPEG-A */</comment>

        <if_stmt pos:start="441:9" pos:end="467:9"><if pos:start="441:9" pos:end="467:9">if <condition pos:start="441:12" pos:end="441:34">(<expr pos:start="441:13" pos:end="441:33"><name pos:start="441:13" pos:end="441:14">id</name> <operator pos:start="441:16" pos:end="441:17">==</operator> <call pos:start="441:19" pos:end="441:33"><name pos:start="441:19" pos:end="441:25">AV_RB32</name><argument_list pos:start="441:26" pos:end="441:33">(<argument pos:start="441:27" pos:end="441:32"><expr pos:start="441:27" pos:end="441:32"><literal type="string" pos:start="441:27" pos:end="441:32">"mjpg"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="441:36" pos:end="467:9">{<block_content pos:start="463:13" pos:end="465:85">

<cpp:if pos:start="443:1" pos:end="443:5">#<cpp:directive pos:start="443:2" pos:end="443:3">if</cpp:directive> <expr pos:start="443:5" pos:end="443:5"><literal type="number" pos:start="443:5" pos:end="443:5">0</literal></expr></cpp:if>

            skip_bits(&amp;s-&gt;gb, 32); <comment type="block" pos:start="445:36" pos:end="445:51">/* field size */</comment>

            skip_bits(&amp;s-&gt;gb, 32); <comment type="block" pos:start="447:36" pos:end="447:55">/* pad field size */</comment>

            skip_bits(&amp;s-&gt;gb, 32); <comment type="block" pos:start="449:36" pos:end="449:49">/* next off */</comment>

            skip_bits(&amp;s-&gt;gb, 32); <comment type="block" pos:start="451:36" pos:end="451:50">/* quant off */</comment>

            skip_bits(&amp;s-&gt;gb, 32); <comment type="block" pos:start="453:36" pos:end="453:49">/* huff off */</comment>

            skip_bits(&amp;s-&gt;gb, 32); <comment type="block" pos:start="455:36" pos:end="455:50">/* image off */</comment>

            skip_bits(&amp;s-&gt;gb, 32); <comment type="block" pos:start="457:36" pos:end="457:49">/* scan off */</comment>

            skip_bits(&amp;s-&gt;gb, 32); <comment type="block" pos:start="459:36" pos:end="459:49">/* data off */</comment>

<cpp:endif pos:start="461:1" pos:end="461:6">#<cpp:directive pos:start="461:2" pos:end="461:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="463:13" pos:end="465:85"><if pos:start="463:13" pos:end="465:85">if <condition pos:start="463:16" pos:end="463:53">(<expr pos:start="463:17" pos:end="463:52"><name pos:start="463:17" pos:end="463:31"><name pos:start="463:17" pos:end="463:17">s</name><operator pos:start="463:18" pos:end="463:19">-&gt;</operator><name pos:start="463:20" pos:end="463:24">avctx</name><operator pos:start="463:25" pos:end="463:26">-&gt;</operator><name pos:start="463:27" pos:end="463:31">debug</name></name> <operator pos:start="463:33" pos:end="463:33">&amp;</operator> <name pos:start="463:35" pos:end="463:52">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="465:17" pos:end="465:85"><block_content pos:start="465:17" pos:end="465:85">

                <expr_stmt pos:start="465:17" pos:end="465:85"><expr pos:start="465:17" pos:end="465:84"><call pos:start="465:17" pos:end="465:84"><name pos:start="465:17" pos:end="465:22">av_log</name><argument_list pos:start="465:23" pos:end="465:84">(<argument pos:start="465:24" pos:end="465:31"><expr pos:start="465:24" pos:end="465:31"><name pos:start="465:24" pos:end="465:31"><name pos:start="465:24" pos:end="465:24">s</name><operator pos:start="465:25" pos:end="465:26">-&gt;</operator><name pos:start="465:27" pos:end="465:31">avctx</name></name></expr></argument>, <argument pos:start="465:34" pos:end="465:44"><expr pos:start="465:34" pos:end="465:44"><name pos:start="465:34" pos:end="465:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="465:47" pos:end="465:83"><expr pos:start="465:47" pos:end="465:83"><literal type="string" pos:start="465:47" pos:end="465:83">"mjpeg: Apple MJPEG-A header found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="473:1" pos:end="473:4"><name pos:start="473:1" pos:end="473:3">out</name>:</label>

    <comment type="block" pos:start="475:5" pos:end="475:49">/* slow but needed for extreme adobe jpegs */</comment>

    <if_stmt pos:start="477:5" pos:end="481:70"><if pos:start="477:5" pos:end="481:70">if <condition pos:start="477:8" pos:end="477:16">(<expr pos:start="477:9" pos:end="477:15"><name pos:start="477:9" pos:end="477:11">len</name> <operator pos:start="477:13" pos:end="477:13">&lt;</operator> <literal type="number" pos:start="477:15" pos:end="477:15">0</literal></expr>)</condition><block type="pseudo" pos:start="479:9" pos:end="481:70"><block_content pos:start="479:9" pos:end="481:70">

        <expr_stmt pos:start="479:9" pos:end="481:70"><expr pos:start="479:9" pos:end="481:69"><call pos:start="479:9" pos:end="481:69"><name pos:start="479:9" pos:end="479:14">av_log</name><argument_list pos:start="479:15" pos:end="481:69">(<argument pos:start="479:16" pos:end="479:23"><expr pos:start="479:16" pos:end="479:23"><name pos:start="479:16" pos:end="479:23"><name pos:start="479:16" pos:end="479:16">s</name><operator pos:start="479:17" pos:end="479:18">-&gt;</operator><name pos:start="479:19" pos:end="479:23">avctx</name></name></expr></argument>, <argument pos:start="479:26" pos:end="479:37"><expr pos:start="479:26" pos:end="479:37"><name pos:start="479:26" pos:end="479:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="481:16" pos:end="481:68"><expr pos:start="481:16" pos:end="481:68"><literal type="string" pos:start="481:16" pos:end="481:68">"mjpeg: error, decode_app parser read over the end\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <while pos:start="483:5" pos:end="485:29">while <condition pos:start="483:11" pos:end="483:21">(<expr pos:start="483:12" pos:end="483:20"><operator pos:start="483:12" pos:end="483:13">--</operator><name pos:start="483:14" pos:end="483:16">len</name> <operator pos:start="483:18" pos:end="483:18">&gt;</operator> <literal type="number" pos:start="483:20" pos:end="483:20">0</literal></expr>)</condition><block type="pseudo" pos:start="485:9" pos:end="485:29"><block_content pos:start="485:9" pos:end="485:29">

        <expr_stmt pos:start="485:9" pos:end="485:29"><expr pos:start="485:9" pos:end="485:28"><call pos:start="485:9" pos:end="485:28"><name pos:start="485:9" pos:end="485:17">skip_bits</name><argument_list pos:start="485:18" pos:end="485:28">(<argument pos:start="485:19" pos:end="485:24"><expr pos:start="485:19" pos:end="485:24"><operator pos:start="485:19" pos:end="485:19">&amp;</operator><name pos:start="485:20" pos:end="485:24"><name pos:start="485:20" pos:end="485:20">s</name><operator pos:start="485:21" pos:end="485:22">-&gt;</operator><name pos:start="485:23" pos:end="485:24">gb</name></name></expr></argument>, <argument pos:start="485:27" pos:end="485:27"><expr pos:start="485:27" pos:end="485:27"><literal type="number" pos:start="485:27" pos:end="485:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <return pos:start="489:5" pos:end="489:13">return <expr pos:start="489:12" pos:end="489:12"><literal type="number" pos:start="489:12" pos:end="489:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
