<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20882.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">xen_pt_msgctrl_reg_write</name><parameter_list pos:start="1:36" pos:end="5:76">(<parameter pos:start="1:37" pos:end="1:61"><decl pos:start="1:37" pos:end="1:61"><type pos:start="1:37" pos:end="1:61"><name pos:start="1:37" pos:end="1:58">XenPCIPassthroughState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:55"><decl pos:start="3:37" pos:end="3:55"><type pos:start="3:37" pos:end="3:55"><name pos:start="3:37" pos:end="3:44">XenPTReg</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">cfg_entry</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:70"><decl pos:start="3:58" pos:end="3:70"><type pos:start="3:58" pos:end="3:70"><name pos:start="3:58" pos:end="3:65">uint16_t</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:70">val</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:54"><decl pos:start="5:37" pos:end="5:54"><type pos:start="5:37" pos:end="5:54"><name pos:start="5:37" pos:end="5:44">uint16_t</name></type> <name pos:start="5:46" pos:end="5:54">dev_value</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:75"><decl pos:start="5:57" pos:end="5:75"><type pos:start="5:57" pos:end="5:75"><name pos:start="5:57" pos:end="5:64">uint16_t</name></type> <name pos:start="5:66" pos:end="5:75">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="119:1">{<block_content pos:start="9:5" pos:end="117:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">XenPTMSI</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">msi</name> <init pos:start="11:19" pos:end="11:26">= <expr pos:start="11:21" pos:end="11:26"><name pos:start="11:21" pos:end="11:26"><name pos:start="11:21" pos:end="11:21">s</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:26">msi</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:26">writable_mask</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:29">throughable_mask</name> <init pos:start="15:31" pos:end="15:33">= <expr pos:start="15:33" pos:end="15:33"><literal type="number" pos:start="15:33" pos:end="15:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint16_t</name></type> <name pos:start="17:14" pos:end="17:20">raw_val</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:47">/* Currently no support for multi-vector */</comment>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:35">(<expr pos:start="23:9" pos:end="23:34"><operator pos:start="23:9" pos:end="23:9">*</operator><name pos:start="23:10" pos:end="23:12">val</name> <operator pos:start="23:14" pos:end="23:14">&amp;</operator> <name pos:start="23:16" pos:end="23:34">PCI_MSI_FLAGS_QSIZE</name></expr>)</condition> <block pos:start="23:37" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:80">

        <expr_stmt pos:start="25:9" pos:end="25:80"><expr pos:start="25:9" pos:end="25:79"><call pos:start="25:9" pos:end="25:79"><name pos:start="25:9" pos:end="25:19">XEN_PT_WARN</name><argument_list pos:start="25:20" pos:end="25:79">(<argument pos:start="25:21" pos:end="25:27"><expr pos:start="25:21" pos:end="25:27"><operator pos:start="25:21" pos:end="25:21">&amp;</operator><name pos:start="25:22" pos:end="25:27"><name pos:start="25:22" pos:end="25:22">s</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:27">dev</name></name></expr></argument>, <argument pos:start="25:30" pos:end="25:72"><expr pos:start="25:30" pos:end="25:72"><literal type="string" pos:start="25:30" pos:end="25:72">"Tries to set more than 1 vector ctrl %x\n"</literal></expr></argument>, <argument pos:start="25:75" pos:end="25:78"><expr pos:start="25:75" pos:end="25:78"><operator pos:start="25:75" pos:end="25:75">*</operator><name pos:start="25:76" pos:end="25:78">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:63"><expr pos:start="33:5" pos:end="33:62"><name pos:start="33:5" pos:end="33:17">writable_mask</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:33"><name pos:start="33:21" pos:end="33:23">reg</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:33">emu_mask</name></name> <operator pos:start="33:35" pos:end="33:35">&amp;</operator> <operator pos:start="33:37" pos:end="33:37">~</operator><name pos:start="33:38" pos:end="33:49"><name pos:start="33:38" pos:end="33:40">reg</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:49">ro_mask</name></name> <operator pos:start="33:51" pos:end="33:51">&amp;</operator> <name pos:start="33:53" pos:end="33:62">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:79"><expr pos:start="35:5" pos:end="35:78"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:13">cfg_entry</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">data</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:78"><name pos:start="35:23" pos:end="35:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="35:41" pos:end="35:78">(<argument pos:start="35:42" pos:end="35:45"><expr pos:start="35:42" pos:end="35:45"><operator pos:start="35:42" pos:end="35:42">*</operator><name pos:start="35:43" pos:end="35:45">val</name></expr></argument>, <argument pos:start="35:48" pos:end="35:62"><expr pos:start="35:48" pos:end="35:62"><name pos:start="35:48" pos:end="35:62"><name pos:start="35:48" pos:end="35:56">cfg_entry</name><operator pos:start="35:57" pos:end="35:58">-&gt;</operator><name pos:start="35:59" pos:end="35:62">data</name></name></expr></argument>, <argument pos:start="35:65" pos:end="35:77"><expr pos:start="35:65" pos:end="35:77"><name pos:start="35:65" pos:end="35:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:58"><expr pos:start="37:5" pos:end="37:57"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:7">msi</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:14">flags</name></name> <operator pos:start="37:16" pos:end="37:17">|=</operator> <name pos:start="37:19" pos:end="37:33"><name pos:start="37:19" pos:end="37:27">cfg_entry</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:33">data</name></name> <operator pos:start="37:35" pos:end="37:35">&amp;</operator> <operator pos:start="37:37" pos:end="37:37">~</operator><name pos:start="37:38" pos:end="37:57">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:19"><expr pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:11">raw_val</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <operator pos:start="43:15" pos:end="43:15">*</operator><name pos:start="43:16" pos:end="43:18">val</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:51"><expr pos:start="45:5" pos:end="45:50"><name pos:start="45:5" pos:end="45:20">throughable_mask</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <operator pos:start="45:24" pos:end="45:24">~</operator><name pos:start="45:25" pos:end="45:37"><name pos:start="45:25" pos:end="45:27">reg</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:37">emu_mask</name></name> <operator pos:start="45:39" pos:end="45:39">&amp;</operator> <name pos:start="45:41" pos:end="45:50">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:65"><expr pos:start="47:5" pos:end="47:64"><operator pos:start="47:5" pos:end="47:5">*</operator><name pos:start="47:6" pos:end="47:8">val</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <call pos:start="47:12" pos:end="47:64"><name pos:start="47:12" pos:end="47:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="47:30" pos:end="47:64">(<argument pos:start="47:31" pos:end="47:34"><expr pos:start="47:31" pos:end="47:34"><operator pos:start="47:31" pos:end="47:31">*</operator><name pos:start="47:32" pos:end="47:34">val</name></expr></argument>, <argument pos:start="47:37" pos:end="47:45"><expr pos:start="47:37" pos:end="47:45"><name pos:start="47:37" pos:end="47:45">dev_value</name></expr></argument>, <argument pos:start="47:48" pos:end="47:63"><expr pos:start="47:48" pos:end="47:63"><name pos:start="47:48" pos:end="47:63">throughable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:20">/* update MSI */</comment>

    <if_stmt pos:start="53:5" pos:end="105:5"><if pos:start="53:5" pos:end="101:5">if <condition pos:start="53:8" pos:end="53:39">(<expr pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:15">raw_val</name> <operator pos:start="53:17" pos:end="53:17">&amp;</operator> <name pos:start="53:19" pos:end="53:38">PCI_MSI_FLAGS_ENABLE</name></expr>)</condition> <block pos:start="53:41" pos:end="101:5">{<block_content pos:start="57:9" pos:end="99:43">

        <comment type="block" pos:start="55:9" pos:end="55:47">/* setup MSI pirq for the first time */</comment>

        <if_stmt pos:start="57:9" pos:end="97:9"><if pos:start="57:9" pos:end="97:9">if <condition pos:start="57:12" pos:end="57:30">(<expr pos:start="57:13" pos:end="57:29"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:29"><name pos:start="57:14" pos:end="57:16">msi</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:29">initialized</name></name></expr>)</condition> <block pos:start="57:32" pos:end="97:9">{<block_content pos:start="61:13" pos:end="95:31">

            <comment type="block" pos:start="59:13" pos:end="59:35">/* Init physical one */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:47"><expr pos:start="61:13" pos:end="61:46"><call pos:start="61:13" pos:end="61:46"><name pos:start="61:13" pos:end="61:22">XEN_PT_LOG</name><argument_list pos:start="61:23" pos:end="61:46">(<argument pos:start="61:24" pos:end="61:30"><expr pos:start="61:24" pos:end="61:30"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:30"><name pos:start="61:25" pos:end="61:25">s</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:30">dev</name></name></expr></argument>, <argument pos:start="61:33" pos:end="61:45"><expr pos:start="61:33" pos:end="61:45"><literal type="string" pos:start="61:33" pos:end="61:45">"setup MSI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="81:13"><if pos:start="63:13" pos:end="81:13">if <condition pos:start="63:16" pos:end="63:36">(<expr pos:start="63:17" pos:end="63:35"><call pos:start="63:17" pos:end="63:35"><name pos:start="63:17" pos:end="63:32">xen_pt_msi_setup</name><argument_list pos:start="63:33" pos:end="63:35">(<argument pos:start="63:34" pos:end="63:34"><expr pos:start="63:34" pos:end="63:34"><name pos:start="63:34" pos:end="63:34">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:38" pos:end="81:13">{<block_content pos:start="75:17" pos:end="79:25">

                <comment type="block" pos:start="65:17" pos:end="73:19">/* We do not broadcast the error to the framework code, so

                 * that MSI errors are contained in MSI emulation code and

                 * QEMU can go on running.

                 * Guest MSI would be actually not working.

                 */</comment>

                <expr_stmt pos:start="75:17" pos:end="75:46"><expr pos:start="75:17" pos:end="75:45"><operator pos:start="75:17" pos:end="75:17">*</operator><name pos:start="75:18" pos:end="75:20">val</name> <operator pos:start="75:22" pos:end="75:23">&amp;=</operator> <operator pos:start="75:25" pos:end="75:25">~</operator><name pos:start="75:26" pos:end="75:45">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:59"><expr pos:start="77:17" pos:end="77:58"><call pos:start="77:17" pos:end="77:58"><name pos:start="77:17" pos:end="77:27">XEN_PT_WARN</name><argument_list pos:start="77:28" pos:end="77:58">(<argument pos:start="77:29" pos:end="77:35"><expr pos:start="77:29" pos:end="77:35"><operator pos:start="77:29" pos:end="77:29">&amp;</operator><name pos:start="77:30" pos:end="77:35"><name pos:start="77:30" pos:end="77:30">s</name><operator pos:start="77:31" pos:end="77:32">-&gt;</operator><name pos:start="77:33" pos:end="77:35">dev</name></name></expr></argument>, <argument pos:start="77:38" pos:end="77:57"><expr pos:start="77:38" pos:end="77:57"><literal type="string" pos:start="77:38" pos:end="77:57">"Can not map MSI.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="79:17" pos:end="79:25">return <expr pos:start="79:24" pos:end="79:24"><literal type="number" pos:start="79:24" pos:end="79:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="83:13" pos:end="91:13"><if pos:start="83:13" pos:end="91:13">if <condition pos:start="83:16" pos:end="83:37">(<expr pos:start="83:17" pos:end="83:36"><call pos:start="83:17" pos:end="83:36"><name pos:start="83:17" pos:end="83:33">xen_pt_msi_update</name><argument_list pos:start="83:34" pos:end="83:36">(<argument pos:start="83:35" pos:end="83:35"><expr pos:start="83:35" pos:end="83:35"><name pos:start="83:35" pos:end="83:35">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:39" pos:end="91:13">{<block_content pos:start="85:17" pos:end="89:25">

                <expr_stmt pos:start="85:17" pos:end="85:46"><expr pos:start="85:17" pos:end="85:45"><operator pos:start="85:17" pos:end="85:17">*</operator><name pos:start="85:18" pos:end="85:20">val</name> <operator pos:start="85:22" pos:end="85:23">&amp;=</operator> <operator pos:start="85:25" pos:end="85:25">~</operator><name pos:start="85:26" pos:end="85:45">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:59"><expr pos:start="87:17" pos:end="87:58"><call pos:start="87:17" pos:end="87:58"><name pos:start="87:17" pos:end="87:27">XEN_PT_WARN</name><argument_list pos:start="87:28" pos:end="87:58">(<argument pos:start="87:29" pos:end="87:35"><expr pos:start="87:29" pos:end="87:35"><operator pos:start="87:29" pos:end="87:29">&amp;</operator><name pos:start="87:30" pos:end="87:35"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:35">dev</name></name></expr></argument>, <argument pos:start="87:38" pos:end="87:57"><expr pos:start="87:38" pos:end="87:57"><literal type="string" pos:start="87:38" pos:end="87:57">"Can not bind MSI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="89:17" pos:end="89:25">return <expr pos:start="89:24" pos:end="89:24"><literal type="number" pos:start="89:24" pos:end="89:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:36"><expr pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:28"><name pos:start="93:13" pos:end="93:15">msi</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:28">initialized</name></name> <operator pos:start="93:30" pos:end="93:30">=</operator> <name pos:start="93:32" pos:end="93:35">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:31"><expr pos:start="95:13" pos:end="95:30"><name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:15">msi</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:23">mapped</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:30">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:43"><expr pos:start="99:9" pos:end="99:42"><name pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:11">msi</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:18">flags</name></name> <operator pos:start="99:20" pos:end="99:21">|=</operator> <name pos:start="99:23" pos:end="99:42">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="105:5">else <block pos:start="101:12" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:44">

        <expr_stmt pos:start="103:9" pos:end="103:44"><expr pos:start="103:9" pos:end="103:43"><name pos:start="103:9" pos:end="103:18"><name pos:start="103:9" pos:end="103:11">msi</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:18">flags</name></name> <operator pos:start="103:20" pos:end="103:21">&amp;=</operator> <operator pos:start="103:23" pos:end="103:23">~</operator><name pos:start="103:24" pos:end="103:43">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:37">/* pass through MSI_ENABLE bit */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:34"><expr pos:start="111:5" pos:end="111:33"><operator pos:start="111:5" pos:end="111:5">*</operator><name pos:start="111:6" pos:end="111:8">val</name> <operator pos:start="111:10" pos:end="111:11">&amp;=</operator> <operator pos:start="111:13" pos:end="111:13">~</operator><name pos:start="111:14" pos:end="111:33">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:43"><expr pos:start="113:5" pos:end="113:42"><operator pos:start="113:5" pos:end="113:5">*</operator><name pos:start="113:6" pos:end="113:8">val</name> <operator pos:start="113:10" pos:end="113:11">|=</operator> <name pos:start="113:13" pos:end="113:19">raw_val</name> <operator pos:start="113:21" pos:end="113:21">&amp;</operator> <name pos:start="113:23" pos:end="113:42">PCI_MSI_FLAGS_ENABLE</name></expr>;</expr_stmt>



    <return pos:start="117:5" pos:end="117:13">return <expr pos:start="117:12" pos:end="117:12"><literal type="number" pos:start="117:12" pos:end="117:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
