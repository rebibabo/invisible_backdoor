<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/123.c" pos:tabs="8"><function pos:start="1:1" pos:end="228:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">read_data</name><parameter_list pos:start="1:21" pos:end="1:62">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:25">void</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:33">opaque</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:42">uint8_t</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">buf</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:61">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="228:1">{<block_content pos:start="5:5" pos:end="226:17">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">playlist</name></name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">v</name> <init pos:start="5:24" pos:end="5:31">= <expr pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:31">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">HLSContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">c</name> <init pos:start="7:19" pos:end="7:40">= <expr pos:start="7:21" pos:end="7:40"><name pos:start="7:21" pos:end="7:40"><name pos:start="7:21" pos:end="7:21">v</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:29">parent</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">just_opened</name> <init pos:start="11:21" pos:end="11:23">= <expr pos:start="11:23" pos:end="11:23"><literal type="number" pos:start="11:23" pos:end="11:23">0</literal></expr></init></decl>;</decl_stmt>




<label pos:start="16:1" pos:end="16:8"><name pos:start="16:1" pos:end="16:7">restart</name>:</label>

    <if_stmt pos:start="18:5" pos:end="20:27"><if pos:start="18:5" pos:end="20:27">if <condition pos:start="18:8" pos:end="18:19">(<expr pos:start="18:9" pos:end="18:18"><operator pos:start="18:9" pos:end="18:9">!</operator><name pos:start="18:10" pos:end="18:18"><name pos:start="18:10" pos:end="18:10">v</name><operator pos:start="18:11" pos:end="18:12">-&gt;</operator><name pos:start="18:13" pos:end="18:18">needed</name></name></expr>)</condition><block type="pseudo" pos:start="20:9" pos:end="20:27"><block_content pos:start="20:9" pos:end="20:27">

        <return pos:start="20:9" pos:end="20:27">return <expr pos:start="20:16" pos:end="20:26"><name pos:start="20:16" pos:end="20:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="24:5" pos:end="176:5"><if pos:start="24:5" pos:end="176:5">if <condition pos:start="24:8" pos:end="24:18">(<expr pos:start="24:9" pos:end="24:17"><operator pos:start="24:9" pos:end="24:9">!</operator><name pos:start="24:10" pos:end="24:17"><name pos:start="24:10" pos:end="24:10">v</name><operator pos:start="24:11" pos:end="24:12">-&gt;</operator><name pos:start="24:13" pos:end="24:17">input</name></name></expr>)</condition> <block pos:start="24:20" pos:end="176:5">{<block_content pos:start="26:9" pos:end="174:24">

        <decl_stmt pos:start="26:9" pos:end="26:32"><decl pos:start="26:9" pos:end="26:31"><type pos:start="26:9" pos:end="26:15"><name pos:start="26:9" pos:end="26:15">int64_t</name></type> <name pos:start="26:17" pos:end="26:31">reload_interval</name></decl>;</decl_stmt>

        <decl_stmt pos:start="28:9" pos:end="28:28"><decl pos:start="28:9" pos:end="28:27"><type pos:start="28:9" pos:end="28:24"><name pos:start="28:9" pos:end="28:22"><name pos:start="28:9" pos:end="28:14">struct</name> <name pos:start="28:16" pos:end="28:22">segment</name></name> <modifier pos:start="28:24" pos:end="28:24">*</modifier></type><name pos:start="28:25" pos:end="28:27">seg</name></decl>;</decl_stmt>



        <comment type="block" pos:start="32:9" pos:end="34:22">/* Check that the playlist is still needed before opening a new

         * segment. */</comment>

        <if_stmt pos:start="36:9" pos:end="52:9"><if pos:start="36:9" pos:end="52:9">if <condition pos:start="36:12" pos:end="36:41">(<expr pos:start="36:13" pos:end="36:40"><name pos:start="36:13" pos:end="36:18"><name pos:start="36:13" pos:end="36:13">v</name><operator pos:start="36:14" pos:end="36:15">-&gt;</operator><name pos:start="36:16" pos:end="36:18">ctx</name></name> <operator pos:start="36:20" pos:end="36:21">&amp;&amp;</operator> <name pos:start="36:23" pos:end="36:40"><name pos:start="36:23" pos:end="36:23">v</name><operator pos:start="36:24" pos:end="36:25">-&gt;</operator><name pos:start="36:26" pos:end="36:28">ctx</name><operator pos:start="36:29" pos:end="36:30">-&gt;</operator><name pos:start="36:31" pos:end="36:40">nb_streams</name></name></expr>)</condition> <block pos:start="36:43" pos:end="52:9">{<block_content pos:start="38:13" pos:end="50:13">

            <expr_stmt pos:start="38:13" pos:end="38:26"><expr pos:start="38:13" pos:end="38:25"><name pos:start="38:13" pos:end="38:21"><name pos:start="38:13" pos:end="38:13">v</name><operator pos:start="38:14" pos:end="38:15">-&gt;</operator><name pos:start="38:16" pos:end="38:21">needed</name></name> <operator pos:start="38:23" pos:end="38:23">=</operator> <literal type="number" pos:start="38:25" pos:end="38:25">0</literal></expr>;</expr_stmt>

            <for pos:start="40:13" pos:end="50:13">for <control pos:start="40:17" pos:end="40:51">(<init pos:start="40:18" pos:end="40:23"><expr pos:start="40:18" pos:end="40:22"><name pos:start="40:18" pos:end="40:18">i</name> <operator pos:start="40:20" pos:end="40:20">=</operator> <literal type="number" pos:start="40:22" pos:end="40:22">0</literal></expr>;</init> <condition pos:start="40:25" pos:end="40:46"><expr pos:start="40:25" pos:end="40:45"><name pos:start="40:25" pos:end="40:25">i</name> <operator pos:start="40:27" pos:end="40:27">&lt;</operator> <name pos:start="40:29" pos:end="40:45"><name pos:start="40:29" pos:end="40:29">v</name><operator pos:start="40:30" pos:end="40:31">-&gt;</operator><name pos:start="40:32" pos:end="40:45">n_main_streams</name></name></expr>;</condition> <incr pos:start="40:48" pos:end="40:50"><expr pos:start="40:48" pos:end="40:50"><name pos:start="40:48" pos:end="40:48">i</name><operator pos:start="40:49" pos:end="40:50">++</operator></expr></incr>)</control> <block pos:start="40:53" pos:end="50:13">{<block_content pos:start="42:17" pos:end="48:17">

                <if_stmt pos:start="42:17" pos:end="48:17"><if pos:start="42:17" pos:end="48:17">if <condition pos:start="42:20" pos:end="42:64">(<expr pos:start="42:21" pos:end="42:63"><name pos:start="42:21" pos:end="42:38"><name pos:start="42:21" pos:end="42:21">v</name><operator pos:start="42:22" pos:end="42:23">-&gt;</operator><name pos:start="42:24" pos:end="42:35">main_streams</name><index pos:start="42:36" pos:end="42:38">[<expr pos:start="42:37" pos:end="42:37"><name pos:start="42:37" pos:end="42:37">i</name></expr>]</index></name><operator pos:start="42:39" pos:end="42:40">-&gt;</operator><name pos:start="42:41" pos:end="42:47">discard</name> <operator pos:start="42:49" pos:end="42:49">&lt;</operator> <name pos:start="42:51" pos:end="42:63">AVDISCARD_ALL</name></expr>)</condition> <block pos:start="42:66" pos:end="48:17">{<block_content pos:start="44:21" pos:end="46:26">

                    <expr_stmt pos:start="44:21" pos:end="44:34"><expr pos:start="44:21" pos:end="44:33"><name pos:start="44:21" pos:end="44:29"><name pos:start="44:21" pos:end="44:21">v</name><operator pos:start="44:22" pos:end="44:23">-&gt;</operator><name pos:start="44:24" pos:end="44:29">needed</name></name> <operator pos:start="44:31" pos:end="44:31">=</operator> <literal type="number" pos:start="44:33" pos:end="44:33">1</literal></expr>;</expr_stmt>

                    <break pos:start="46:21" pos:end="46:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="54:9" pos:end="62:9"><if pos:start="54:9" pos:end="62:9">if <condition pos:start="54:12" pos:end="54:23">(<expr pos:start="54:13" pos:end="54:22"><operator pos:start="54:13" pos:end="54:13">!</operator><name pos:start="54:14" pos:end="54:22"><name pos:start="54:14" pos:end="54:14">v</name><operator pos:start="54:15" pos:end="54:16">-&gt;</operator><name pos:start="54:17" pos:end="54:22">needed</name></name></expr>)</condition> <block pos:start="54:25" pos:end="62:9">{<block_content pos:start="56:13" pos:end="60:31">

            <expr_stmt pos:start="56:13" pos:end="58:26"><expr pos:start="56:13" pos:end="58:25"><call pos:start="56:13" pos:end="58:25"><name pos:start="56:13" pos:end="56:18">av_log</name><argument_list pos:start="56:19" pos:end="58:25">(<argument pos:start="56:20" pos:end="56:28"><expr pos:start="56:20" pos:end="56:28"><name pos:start="56:20" pos:end="56:28"><name pos:start="56:20" pos:end="56:20">v</name><operator pos:start="56:21" pos:end="56:22">-&gt;</operator><name pos:start="56:23" pos:end="56:28">parent</name></name></expr></argument>, <argument pos:start="56:31" pos:end="56:41"><expr pos:start="56:31" pos:end="56:41"><name pos:start="56:31" pos:end="56:41">AV_LOG_INFO</name></expr></argument>, <argument pos:start="56:44" pos:end="56:78"><expr pos:start="56:44" pos:end="56:78"><literal type="string" pos:start="56:44" pos:end="56:78">"No longer receiving playlist %d\n"</literal></expr></argument>,

                <argument pos:start="58:17" pos:end="58:24"><expr pos:start="58:17" pos:end="58:24"><name pos:start="58:17" pos:end="58:24"><name pos:start="58:17" pos:end="58:17">v</name><operator pos:start="58:18" pos:end="58:19">-&gt;</operator><name pos:start="58:20" pos:end="58:24">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="60:13" pos:end="60:31">return <expr pos:start="60:20" pos:end="60:30"><name pos:start="60:20" pos:end="60:30">AVERROR_EOF</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="66:9" pos:end="68:65">/* If this is a live stream and the reload interval has elapsed since

         * the last playlist reload, reload the playlists now. */</comment>

        <expr_stmt pos:start="70:9" pos:end="70:53"><expr pos:start="70:9" pos:end="70:52"><name pos:start="70:9" pos:end="70:23">reload_interval</name> <operator pos:start="70:25" pos:end="70:25">=</operator> <call pos:start="70:27" pos:end="70:52"><name pos:start="70:27" pos:end="70:49">default_reload_interval</name><argument_list pos:start="70:50" pos:end="70:52">(<argument pos:start="70:51" pos:end="70:51"><expr pos:start="70:51" pos:end="70:51"><name pos:start="70:51" pos:end="70:51">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="74:1" pos:end="74:7"><name pos:start="74:1" pos:end="74:6">reload</name>:</label>

        <expr_stmt pos:start="76:9" pos:end="76:23"><expr pos:start="76:9" pos:end="76:22"><name pos:start="76:9" pos:end="76:20">reload_count</name><operator pos:start="76:21" pos:end="76:22">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="78:9" pos:end="80:31"><if pos:start="78:9" pos:end="80:31">if <condition pos:start="78:12" pos:end="78:41">(<expr pos:start="78:13" pos:end="78:40"><name pos:start="78:13" pos:end="78:24">reload_count</name> <operator pos:start="78:26" pos:end="78:26">&gt;</operator> <name pos:start="78:28" pos:end="78:40"><name pos:start="78:28" pos:end="78:28">c</name><operator pos:start="78:29" pos:end="78:30">-&gt;</operator><name pos:start="78:31" pos:end="78:40">max_reload</name></name></expr>)</condition><block type="pseudo" pos:start="80:13" pos:end="80:31"><block_content pos:start="80:13" pos:end="80:31">

            <return pos:start="80:13" pos:end="80:31">return <expr pos:start="80:20" pos:end="80:30"><name pos:start="80:20" pos:end="80:30">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="82:9" pos:end="104:9"><if pos:start="82:9" pos:end="104:9">if <condition pos:start="82:12" pos:end="84:73">(<expr pos:start="82:13" pos:end="84:72"><operator pos:start="82:13" pos:end="82:13">!</operator><name pos:start="82:14" pos:end="82:24"><name pos:start="82:14" pos:end="82:14">v</name><operator pos:start="82:15" pos:end="82:16">-&gt;</operator><name pos:start="82:17" pos:end="82:24">finished</name></name> <operator pos:start="82:26" pos:end="82:27">&amp;&amp;</operator>

            <call pos:start="84:13" pos:end="84:33"><name pos:start="84:13" pos:end="84:31">av_gettime_relative</name><argument_list pos:start="84:32" pos:end="84:33">()</argument_list></call> <operator pos:start="84:35" pos:end="84:35">-</operator> <name pos:start="84:37" pos:end="84:53"><name pos:start="84:37" pos:end="84:37">v</name><operator pos:start="84:38" pos:end="84:39">-&gt;</operator><name pos:start="84:40" pos:end="84:53">last_load_time</name></name> <operator pos:start="84:55" pos:end="84:56">&gt;=</operator> <name pos:start="84:58" pos:end="84:72">reload_interval</name></expr>)</condition> <block pos:start="84:75" pos:end="104:9">{<block_content pos:start="86:13" pos:end="102:53">

            <if_stmt pos:start="86:13" pos:end="94:13"><if pos:start="86:13" pos:end="94:13">if <condition pos:start="86:16" pos:end="86:63">(<expr pos:start="86:17" pos:end="86:62"><operator pos:start="86:17" pos:end="86:17">(</operator><name pos:start="86:18" pos:end="86:20">ret</name> <operator pos:start="86:22" pos:end="86:22">=</operator> <call pos:start="86:24" pos:end="86:57"><name pos:start="86:24" pos:end="86:37">parse_playlist</name><argument_list pos:start="86:38" pos:end="86:57">(<argument pos:start="86:39" pos:end="86:39"><expr pos:start="86:39" pos:end="86:39"><name pos:start="86:39" pos:end="86:39">c</name></expr></argument>, <argument pos:start="86:42" pos:end="86:47"><expr pos:start="86:42" pos:end="86:47"><name pos:start="86:42" pos:end="86:47"><name pos:start="86:42" pos:end="86:42">v</name><operator pos:start="86:43" pos:end="86:44">-&gt;</operator><name pos:start="86:45" pos:end="86:47">url</name></name></expr></argument>, <argument pos:start="86:50" pos:end="86:50"><expr pos:start="86:50" pos:end="86:50"><name pos:start="86:50" pos:end="86:50">v</name></expr></argument>, <argument pos:start="86:53" pos:end="86:56"><expr pos:start="86:53" pos:end="86:56"><name pos:start="86:53" pos:end="86:56">NULL</name></expr></argument>)</argument_list></call><operator pos:start="86:58" pos:end="86:58">)</operator> <operator pos:start="86:60" pos:end="86:60">&lt;</operator> <literal type="number" pos:start="86:62" pos:end="86:62">0</literal></expr>)</condition> <block pos:start="86:65" pos:end="94:13">{<block_content pos:start="88:17" pos:end="92:27">

                <expr_stmt pos:start="88:17" pos:end="90:33"><expr pos:start="88:17" pos:end="90:32"><call pos:start="88:17" pos:end="90:32"><name pos:start="88:17" pos:end="88:22">av_log</name><argument_list pos:start="88:23" pos:end="90:32">(<argument pos:start="88:24" pos:end="88:32"><expr pos:start="88:24" pos:end="88:32"><name pos:start="88:24" pos:end="88:32"><name pos:start="88:24" pos:end="88:24">v</name><operator pos:start="88:25" pos:end="88:26">-&gt;</operator><name pos:start="88:27" pos:end="88:32">parent</name></name></expr></argument>, <argument pos:start="88:35" pos:end="88:48"><expr pos:start="88:35" pos:end="88:48"><name pos:start="88:35" pos:end="88:48">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="88:51" pos:end="88:82"><expr pos:start="88:51" pos:end="88:82"><literal type="string" pos:start="88:51" pos:end="88:82">"Failed to reload playlist %d\n"</literal></expr></argument>,

                       <argument pos:start="90:24" pos:end="90:31"><expr pos:start="90:24" pos:end="90:31"><name pos:start="90:24" pos:end="90:31"><name pos:start="90:24" pos:end="90:24">v</name><operator pos:start="90:25" pos:end="90:26">-&gt;</operator><name pos:start="90:27" pos:end="90:31">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="92:17" pos:end="92:27">return <expr pos:start="92:24" pos:end="92:26"><name pos:start="92:24" pos:end="92:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="96:13" pos:end="100:55">/* If we need to reload the playlist again below (if

             * there's still no more segments), switch to a reload

             * interval of half the target duration. */</comment>

            <expr_stmt pos:start="102:13" pos:end="102:53"><expr pos:start="102:13" pos:end="102:52"><name pos:start="102:13" pos:end="102:27">reload_interval</name> <operator pos:start="102:29" pos:end="102:29">=</operator> <name pos:start="102:31" pos:end="102:48"><name pos:start="102:31" pos:end="102:31">v</name><operator pos:start="102:32" pos:end="102:33">-&gt;</operator><name pos:start="102:34" pos:end="102:48">target_duration</name></name> <operator pos:start="102:50" pos:end="102:50">/</operator> <literal type="number" pos:start="102:52" pos:end="102:52">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="106:9" pos:end="116:9"><if pos:start="106:9" pos:end="116:9">if <condition pos:start="106:12" pos:end="106:44">(<expr pos:start="106:13" pos:end="106:43"><name pos:start="106:13" pos:end="106:25"><name pos:start="106:13" pos:end="106:13">v</name><operator pos:start="106:14" pos:end="106:15">-&gt;</operator><name pos:start="106:16" pos:end="106:25">cur_seq_no</name></name> <operator pos:start="106:27" pos:end="106:27">&lt;</operator> <name pos:start="106:29" pos:end="106:43"><name pos:start="106:29" pos:end="106:29">v</name><operator pos:start="106:30" pos:end="106:31">-&gt;</operator><name pos:start="106:32" pos:end="106:43">start_seq_no</name></name></expr>)</condition> <block pos:start="106:46" pos:end="116:9">{<block_content pos:start="108:13" pos:end="114:44">

            <expr_stmt pos:start="108:13" pos:end="112:52"><expr pos:start="108:13" pos:end="112:51"><call pos:start="108:13" pos:end="112:51"><name pos:start="108:13" pos:end="108:18">av_log</name><argument_list pos:start="108:19" pos:end="112:51">(<argument pos:start="108:20" pos:end="108:23"><expr pos:start="108:20" pos:end="108:23"><name pos:start="108:20" pos:end="108:23">NULL</name></expr></argument>, <argument pos:start="108:26" pos:end="108:39"><expr pos:start="108:26" pos:end="108:39"><name pos:start="108:26" pos:end="108:39">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="110:20" pos:end="110:73"><expr pos:start="110:20" pos:end="110:73"><literal type="string" pos:start="110:20" pos:end="110:73">"skipping %d segments ahead, expired from playlists\n"</literal></expr></argument>,

                   <argument pos:start="112:20" pos:end="112:50"><expr pos:start="112:20" pos:end="112:50"><name pos:start="112:20" pos:end="112:34"><name pos:start="112:20" pos:end="112:20">v</name><operator pos:start="112:21" pos:end="112:22">-&gt;</operator><name pos:start="112:23" pos:end="112:34">start_seq_no</name></name> <operator pos:start="112:36" pos:end="112:36">-</operator> <name pos:start="112:38" pos:end="112:50"><name pos:start="112:38" pos:end="112:38">v</name><operator pos:start="112:39" pos:end="112:40">-&gt;</operator><name pos:start="112:41" pos:end="112:50">cur_seq_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="114:13" pos:end="114:44"><expr pos:start="114:13" pos:end="114:43"><name pos:start="114:13" pos:end="114:25"><name pos:start="114:13" pos:end="114:13">v</name><operator pos:start="114:14" pos:end="114:15">-&gt;</operator><name pos:start="114:16" pos:end="114:25">cur_seq_no</name></name> <operator pos:start="114:27" pos:end="114:27">=</operator> <name pos:start="114:29" pos:end="114:43"><name pos:start="114:29" pos:end="114:29">v</name><operator pos:start="114:30" pos:end="114:31">-&gt;</operator><name pos:start="114:32" pos:end="114:43">start_seq_no</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="118:9" pos:end="138:9"><if pos:start="118:9" pos:end="138:9">if <condition pos:start="118:12" pos:end="118:61">(<expr pos:start="118:13" pos:end="118:60"><name pos:start="118:13" pos:end="118:25"><name pos:start="118:13" pos:end="118:13">v</name><operator pos:start="118:14" pos:end="118:15">-&gt;</operator><name pos:start="118:16" pos:end="118:25">cur_seq_no</name></name> <operator pos:start="118:27" pos:end="118:28">&gt;=</operator> <name pos:start="118:30" pos:end="118:44"><name pos:start="118:30" pos:end="118:30">v</name><operator pos:start="118:31" pos:end="118:32">-&gt;</operator><name pos:start="118:33" pos:end="118:44">start_seq_no</name></name> <operator pos:start="118:46" pos:end="118:46">+</operator> <name pos:start="118:48" pos:end="118:60"><name pos:start="118:48" pos:end="118:48">v</name><operator pos:start="118:49" pos:end="118:50">-&gt;</operator><name pos:start="118:51" pos:end="118:60">n_segments</name></name></expr>)</condition> <block pos:start="118:63" pos:end="138:9">{<block_content pos:start="120:13" pos:end="136:24">

            <if_stmt pos:start="120:13" pos:end="122:35"><if pos:start="120:13" pos:end="122:35">if <condition pos:start="120:16" pos:end="120:28">(<expr pos:start="120:17" pos:end="120:27"><name pos:start="120:17" pos:end="120:27"><name pos:start="120:17" pos:end="120:17">v</name><operator pos:start="120:18" pos:end="120:19">-&gt;</operator><name pos:start="120:20" pos:end="120:27">finished</name></name></expr>)</condition><block type="pseudo" pos:start="122:17" pos:end="122:35"><block_content pos:start="122:17" pos:end="122:35">

                <return pos:start="122:17" pos:end="122:35">return <expr pos:start="122:24" pos:end="122:34"><name pos:start="122:24" pos:end="122:34">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

            <while pos:start="124:13" pos:end="132:13">while <condition pos:start="124:19" pos:end="124:79">(<expr pos:start="124:20" pos:end="124:78"><call pos:start="124:20" pos:end="124:40"><name pos:start="124:20" pos:end="124:38">av_gettime_relative</name><argument_list pos:start="124:39" pos:end="124:40">()</argument_list></call> <operator pos:start="124:42" pos:end="124:42">-</operator> <name pos:start="124:44" pos:end="124:60"><name pos:start="124:44" pos:end="124:44">v</name><operator pos:start="124:45" pos:end="124:46">-&gt;</operator><name pos:start="124:47" pos:end="124:60">last_load_time</name></name> <operator pos:start="124:62" pos:end="124:62">&lt;</operator> <name pos:start="124:64" pos:end="124:78">reload_interval</name></expr>)</condition> <block pos:start="124:81" pos:end="132:13">{<block_content pos:start="126:17" pos:end="130:36">

                <if_stmt pos:start="126:17" pos:end="128:40"><if pos:start="126:17" pos:end="128:40">if <condition pos:start="126:20" pos:end="126:62">(<expr pos:start="126:21" pos:end="126:61"><call pos:start="126:21" pos:end="126:61"><name pos:start="126:21" pos:end="126:38">ff_check_interrupt</name><argument_list pos:start="126:39" pos:end="126:61">(<argument pos:start="126:40" pos:end="126:60"><expr pos:start="126:40" pos:end="126:60"><name pos:start="126:40" pos:end="126:60"><name pos:start="126:40" pos:end="126:40">c</name><operator pos:start="126:41" pos:end="126:42">-&gt;</operator><name pos:start="126:43" pos:end="126:60">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="128:21" pos:end="128:40"><block_content pos:start="128:21" pos:end="128:40">

                    <return pos:start="128:21" pos:end="128:40">return <expr pos:start="128:28" pos:end="128:39"><name pos:start="128:28" pos:end="128:39">AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="130:17" pos:end="130:36"><expr pos:start="130:17" pos:end="130:35"><call pos:start="130:17" pos:end="130:35"><name pos:start="130:17" pos:end="130:25">av_usleep</name><argument_list pos:start="130:26" pos:end="130:35">(<argument pos:start="130:27" pos:end="130:34"><expr pos:start="130:27" pos:end="130:34"><literal type="number" pos:start="130:27" pos:end="130:29">100</literal><operator pos:start="130:30" pos:end="130:30">*</operator><literal type="number" pos:start="130:31" pos:end="130:34">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <comment type="block" pos:start="134:13" pos:end="134:63">/* Enough time has elapsed since the last reload */</comment>

            <goto pos:start="136:13" pos:end="136:24">goto <name pos:start="136:18" pos:end="136:23">reload</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="142:9" pos:end="142:33"><expr pos:start="142:9" pos:end="142:32"><name pos:start="142:9" pos:end="142:11">seg</name> <operator pos:start="142:13" pos:end="142:13">=</operator> <call pos:start="142:15" pos:end="142:32"><name pos:start="142:15" pos:end="142:29">current_segment</name><argument_list pos:start="142:30" pos:end="142:32">(<argument pos:start="142:31" pos:end="142:31"><expr pos:start="142:31" pos:end="142:31"><name pos:start="142:31" pos:end="142:31">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="146:9" pos:end="146:62">/* load/update Media Initialization Section, if any */</comment>

        <expr_stmt pos:start="148:9" pos:end="148:42"><expr pos:start="148:9" pos:end="148:41"><name pos:start="148:9" pos:end="148:11">ret</name> <operator pos:start="148:13" pos:end="148:13">=</operator> <call pos:start="148:15" pos:end="148:41"><name pos:start="148:15" pos:end="148:33">update_init_section</name><argument_list pos:start="148:34" pos:end="148:41">(<argument pos:start="148:35" pos:end="148:35"><expr pos:start="148:35" pos:end="148:35"><name pos:start="148:35" pos:end="148:35">v</name></expr></argument>, <argument pos:start="148:38" pos:end="148:40"><expr pos:start="148:38" pos:end="148:40"><name pos:start="148:38" pos:end="148:40">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="150:9" pos:end="152:23"><if pos:start="150:9" pos:end="152:23">if <condition pos:start="150:12" pos:end="150:16">(<expr pos:start="150:13" pos:end="150:15"><name pos:start="150:13" pos:end="150:15">ret</name></expr>)</condition><block type="pseudo" pos:start="152:13" pos:end="152:23"><block_content pos:start="152:13" pos:end="152:23">

            <return pos:start="152:13" pos:end="152:23">return <expr pos:start="152:20" pos:end="152:22"><name pos:start="152:20" pos:end="152:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="156:9" pos:end="156:36"><expr pos:start="156:9" pos:end="156:35"><name pos:start="156:9" pos:end="156:11">ret</name> <operator pos:start="156:13" pos:end="156:13">=</operator> <call pos:start="156:15" pos:end="156:35"><name pos:start="156:15" pos:end="156:24">open_input</name><argument_list pos:start="156:25" pos:end="156:35">(<argument pos:start="156:26" pos:end="156:26"><expr pos:start="156:26" pos:end="156:26"><name pos:start="156:26" pos:end="156:26">c</name></expr></argument>, <argument pos:start="156:29" pos:end="156:29"><expr pos:start="156:29" pos:end="156:29"><name pos:start="156:29" pos:end="156:29">v</name></expr></argument>, <argument pos:start="156:32" pos:end="156:34"><expr pos:start="156:32" pos:end="156:34"><name pos:start="156:32" pos:end="156:34">seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="158:9" pos:end="172:9"><if pos:start="158:9" pos:end="172:9">if <condition pos:start="158:12" pos:end="158:20">(<expr pos:start="158:13" pos:end="158:19"><name pos:start="158:13" pos:end="158:15">ret</name> <operator pos:start="158:17" pos:end="158:17">&lt;</operator> <literal type="number" pos:start="158:19" pos:end="158:19">0</literal></expr>)</condition> <block pos:start="158:22" pos:end="172:9">{<block_content pos:start="160:13" pos:end="170:24">

            <if_stmt pos:start="160:13" pos:end="162:36"><if pos:start="160:13" pos:end="162:36">if <condition pos:start="160:16" pos:end="160:58">(<expr pos:start="160:17" pos:end="160:57"><call pos:start="160:17" pos:end="160:57"><name pos:start="160:17" pos:end="160:34">ff_check_interrupt</name><argument_list pos:start="160:35" pos:end="160:57">(<argument pos:start="160:36" pos:end="160:56"><expr pos:start="160:36" pos:end="160:56"><name pos:start="160:36" pos:end="160:56"><name pos:start="160:36" pos:end="160:36">c</name><operator pos:start="160:37" pos:end="160:38">-&gt;</operator><name pos:start="160:39" pos:end="160:56">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="162:17" pos:end="162:36"><block_content pos:start="162:17" pos:end="162:36">

                <return pos:start="162:17" pos:end="162:36">return <expr pos:start="162:24" pos:end="162:35"><name pos:start="162:24" pos:end="162:35">AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="164:13" pos:end="166:29"><expr pos:start="164:13" pos:end="166:28"><call pos:start="164:13" pos:end="166:28"><name pos:start="164:13" pos:end="164:18">av_log</name><argument_list pos:start="164:19" pos:end="166:28">(<argument pos:start="164:20" pos:end="164:28"><expr pos:start="164:20" pos:end="164:28"><name pos:start="164:20" pos:end="164:28"><name pos:start="164:20" pos:end="164:20">v</name><operator pos:start="164:21" pos:end="164:22">-&gt;</operator><name pos:start="164:23" pos:end="164:28">parent</name></name></expr></argument>, <argument pos:start="164:31" pos:end="164:44"><expr pos:start="164:31" pos:end="164:44"><name pos:start="164:31" pos:end="164:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="164:47" pos:end="164:87"><expr pos:start="164:47" pos:end="164:87"><literal type="string" pos:start="164:47" pos:end="164:87">"Failed to open segment of playlist %d\n"</literal></expr></argument>,

                   <argument pos:start="166:20" pos:end="166:27"><expr pos:start="166:20" pos:end="166:27"><name pos:start="166:20" pos:end="166:27"><name pos:start="166:20" pos:end="166:20">v</name><operator pos:start="166:21" pos:end="166:22">-&gt;</operator><name pos:start="166:23" pos:end="166:27">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="168:13" pos:end="168:31"><expr pos:start="168:13" pos:end="168:30"><name pos:start="168:13" pos:end="168:25"><name pos:start="168:13" pos:end="168:13">v</name><operator pos:start="168:14" pos:end="168:15">-&gt;</operator><name pos:start="168:16" pos:end="168:25">cur_seq_no</name></name> <operator pos:start="168:27" pos:end="168:28">+=</operator> <literal type="number" pos:start="168:30" pos:end="168:30">1</literal></expr>;</expr_stmt>

            <goto pos:start="170:13" pos:end="170:24">goto <name pos:start="170:18" pos:end="170:23">reload</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="174:9" pos:end="174:24"><expr pos:start="174:9" pos:end="174:23"><name pos:start="174:9" pos:end="174:19">just_opened</name> <operator pos:start="174:21" pos:end="174:21">=</operator> <literal type="number" pos:start="174:23" pos:end="174:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="180:5" pos:end="192:5"><if pos:start="180:5" pos:end="192:5">if <condition pos:start="180:8" pos:end="180:59">(<expr pos:start="180:9" pos:end="180:58"><name pos:start="180:9" pos:end="180:35"><name pos:start="180:9" pos:end="180:9">v</name><operator pos:start="180:10" pos:end="180:11">-&gt;</operator><name pos:start="180:12" pos:end="180:35">init_sec_buf_read_offset</name></name> <operator pos:start="180:37" pos:end="180:37">&lt;</operator> <name pos:start="180:39" pos:end="180:58"><name pos:start="180:39" pos:end="180:39">v</name><operator pos:start="180:40" pos:end="180:41">-&gt;</operator><name pos:start="180:42" pos:end="180:58">init_sec_data_len</name></name></expr>)</condition> <block pos:start="180:61" pos:end="192:5">{<block_content pos:start="184:9" pos:end="190:25">

        <comment type="block" pos:start="182:9" pos:end="182:69">/* Push init section out first before first actual segment */</comment>

        <decl_stmt pos:start="184:9" pos:end="184:92"><decl pos:start="184:9" pos:end="184:91"><type pos:start="184:9" pos:end="184:11"><name pos:start="184:9" pos:end="184:11">int</name></type> <name pos:start="184:13" pos:end="184:21">copy_size</name> <init pos:start="184:23" pos:end="184:91">= <expr pos:start="184:25" pos:end="184:91"><call pos:start="184:25" pos:end="184:91"><name pos:start="184:25" pos:end="184:29">FFMIN</name><argument_list pos:start="184:30" pos:end="184:91">(<argument pos:start="184:31" pos:end="184:80"><expr pos:start="184:31" pos:end="184:80"><name pos:start="184:31" pos:end="184:50"><name pos:start="184:31" pos:end="184:31">v</name><operator pos:start="184:32" pos:end="184:33">-&gt;</operator><name pos:start="184:34" pos:end="184:50">init_sec_data_len</name></name> <operator pos:start="184:52" pos:end="184:52">-</operator> <name pos:start="184:54" pos:end="184:80"><name pos:start="184:54" pos:end="184:54">v</name><operator pos:start="184:55" pos:end="184:56">-&gt;</operator><name pos:start="184:57" pos:end="184:80">init_sec_buf_read_offset</name></name></expr></argument>, <argument pos:start="184:83" pos:end="184:90"><expr pos:start="184:83" pos:end="184:90"><name pos:start="184:83" pos:end="184:90">buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="186:9" pos:end="186:48"><expr pos:start="186:9" pos:end="186:47"><call pos:start="186:9" pos:end="186:47"><name pos:start="186:9" pos:end="186:14">memcpy</name><argument_list pos:start="186:15" pos:end="186:47">(<argument pos:start="186:16" pos:end="186:18"><expr pos:start="186:16" pos:end="186:18"><name pos:start="186:16" pos:end="186:18">buf</name></expr></argument>, <argument pos:start="186:21" pos:end="186:35"><expr pos:start="186:21" pos:end="186:35"><name pos:start="186:21" pos:end="186:35"><name pos:start="186:21" pos:end="186:21">v</name><operator pos:start="186:22" pos:end="186:23">-&gt;</operator><name pos:start="186:24" pos:end="186:35">init_sec_buf</name></name></expr></argument>, <argument pos:start="186:38" pos:end="186:46"><expr pos:start="186:38" pos:end="186:46"><name pos:start="186:38" pos:end="186:46">copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="188:9" pos:end="188:49"><expr pos:start="188:9" pos:end="188:48"><name pos:start="188:9" pos:end="188:35"><name pos:start="188:9" pos:end="188:9">v</name><operator pos:start="188:10" pos:end="188:11">-&gt;</operator><name pos:start="188:12" pos:end="188:35">init_sec_buf_read_offset</name></name> <operator pos:start="188:37" pos:end="188:38">+=</operator> <name pos:start="188:40" pos:end="188:48">copy_size</name></expr>;</expr_stmt>

        <return pos:start="190:9" pos:end="190:25">return <expr pos:start="190:16" pos:end="190:24"><name pos:start="190:16" pos:end="190:24">copy_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="196:5" pos:end="196:75"><expr pos:start="196:5" pos:end="196:74"><name pos:start="196:5" pos:end="196:7">ret</name> <operator pos:start="196:9" pos:end="196:9">=</operator> <call pos:start="196:11" pos:end="196:74"><name pos:start="196:11" pos:end="196:23">read_from_url</name><argument_list pos:start="196:24" pos:end="196:74">(<argument pos:start="196:25" pos:end="196:25"><expr pos:start="196:25" pos:end="196:25"><name pos:start="196:25" pos:end="196:25">v</name></expr></argument>, <argument pos:start="196:28" pos:end="196:45"><expr pos:start="196:28" pos:end="196:45"><call pos:start="196:28" pos:end="196:45"><name pos:start="196:28" pos:end="196:42">current_segment</name><argument_list pos:start="196:43" pos:end="196:45">(<argument pos:start="196:44" pos:end="196:44"><expr pos:start="196:44" pos:end="196:44"><name pos:start="196:44" pos:end="196:44">v</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="196:48" pos:end="196:50"><expr pos:start="196:48" pos:end="196:50"><name pos:start="196:48" pos:end="196:50">buf</name></expr></argument>, <argument pos:start="196:53" pos:end="196:60"><expr pos:start="196:53" pos:end="196:60"><name pos:start="196:53" pos:end="196:60">buf_size</name></expr></argument>, <argument pos:start="196:63" pos:end="196:73"><expr pos:start="196:63" pos:end="196:73"><name pos:start="196:63" pos:end="196:73">READ_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="198:5" pos:end="214:5"><if pos:start="198:5" pos:end="214:5">if <condition pos:start="198:8" pos:end="198:16">(<expr pos:start="198:9" pos:end="198:15"><name pos:start="198:9" pos:end="198:11">ret</name> <operator pos:start="198:13" pos:end="198:13">&gt;</operator> <literal type="number" pos:start="198:15" pos:end="198:15">0</literal></expr>)</condition> <block pos:start="198:18" pos:end="214:5">{<block_content pos:start="200:9" pos:end="212:19">

        <if_stmt pos:start="200:9" pos:end="208:9"><if pos:start="200:9" pos:end="208:9">if <condition pos:start="200:12" pos:end="200:54">(<expr pos:start="200:13" pos:end="200:53"><name pos:start="200:13" pos:end="200:23">just_opened</name> <operator pos:start="200:25" pos:end="200:26">&amp;&amp;</operator> <name pos:start="200:28" pos:end="200:48"><name pos:start="200:28" pos:end="200:28">v</name><operator pos:start="200:29" pos:end="200:30">-&gt;</operator><name pos:start="200:31" pos:end="200:48">is_id3_timestamped</name></name> <operator pos:start="200:50" pos:end="200:51">!=</operator> <literal type="number" pos:start="200:53" pos:end="200:53">0</literal></expr>)</condition> <block pos:start="200:56" pos:end="208:9">{<block_content pos:start="206:13" pos:end="206:50">

            <comment type="block" pos:start="202:13" pos:end="204:83">/* Intercept ID3 tags here, elementary audio streams are required

             * to convey timestamps using them in the beginning of each segment. */</comment>

            <expr_stmt pos:start="206:13" pos:end="206:50"><expr pos:start="206:13" pos:end="206:49"><call pos:start="206:13" pos:end="206:49"><name pos:start="206:13" pos:end="206:25">intercept_id3</name><argument_list pos:start="206:26" pos:end="206:49">(<argument pos:start="206:27" pos:end="206:27"><expr pos:start="206:27" pos:end="206:27"><name pos:start="206:27" pos:end="206:27">v</name></expr></argument>, <argument pos:start="206:30" pos:end="206:32"><expr pos:start="206:30" pos:end="206:32"><name pos:start="206:30" pos:end="206:32">buf</name></expr></argument>, <argument pos:start="206:35" pos:end="206:42"><expr pos:start="206:35" pos:end="206:42"><name pos:start="206:35" pos:end="206:42">buf_size</name></expr></argument>, <argument pos:start="206:45" pos:end="206:48"><expr pos:start="206:45" pos:end="206:48"><operator pos:start="206:45" pos:end="206:45">&amp;</operator><name pos:start="206:46" pos:end="206:48">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="212:9" pos:end="212:19">return <expr pos:start="212:16" pos:end="212:18"><name pos:start="212:16" pos:end="212:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="216:5" pos:end="216:45"><expr pos:start="216:5" pos:end="216:44"><call pos:start="216:5" pos:end="216:44"><name pos:start="216:5" pos:end="216:22">ff_format_io_close</name><argument_list pos:start="216:23" pos:end="216:44">(<argument pos:start="216:24" pos:end="216:32"><expr pos:start="216:24" pos:end="216:32"><name pos:start="216:24" pos:end="216:32"><name pos:start="216:24" pos:end="216:24">v</name><operator pos:start="216:25" pos:end="216:26">-&gt;</operator><name pos:start="216:27" pos:end="216:32">parent</name></name></expr></argument>, <argument pos:start="216:35" pos:end="216:43"><expr pos:start="216:35" pos:end="216:43"><operator pos:start="216:35" pos:end="216:35">&amp;</operator><name pos:start="216:36" pos:end="216:43"><name pos:start="216:36" pos:end="216:36">v</name><operator pos:start="216:37" pos:end="216:38">-&gt;</operator><name pos:start="216:39" pos:end="216:43">input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="218:5" pos:end="218:20"><expr pos:start="218:5" pos:end="218:19"><name pos:start="218:5" pos:end="218:17"><name pos:start="218:5" pos:end="218:5">v</name><operator pos:start="218:6" pos:end="218:7">-&gt;</operator><name pos:start="218:8" pos:end="218:17">cur_seq_no</name></name><operator pos:start="218:18" pos:end="218:19">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="222:5" pos:end="222:34"><expr pos:start="222:5" pos:end="222:33"><name pos:start="222:5" pos:end="222:17"><name pos:start="222:5" pos:end="222:5">c</name><operator pos:start="222:6" pos:end="222:7">-&gt;</operator><name pos:start="222:8" pos:end="222:17">cur_seq_no</name></name> <operator pos:start="222:19" pos:end="222:19">=</operator> <name pos:start="222:21" pos:end="222:33"><name pos:start="222:21" pos:end="222:21">v</name><operator pos:start="222:22" pos:end="222:23">-&gt;</operator><name pos:start="222:24" pos:end="222:33">cur_seq_no</name></name></expr>;</expr_stmt>



    <goto pos:start="226:5" pos:end="226:17">goto <name pos:start="226:10" pos:end="226:16">restart</name>;</goto>

</block_content>}</block></function></unit>
