<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12783.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">parse_waveformatex</name><parameter_list pos:start="1:31" pos:end="1:71">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:42">AVIOContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">pb</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:70"><decl pos:start="1:49" pos:end="1:70"><type pos:start="1:49" pos:end="1:70"><name pos:start="1:49" pos:end="1:65">AVCodecParameters</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">par</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:5">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:15">ff_asf_guid</name></type> <name pos:start="5:17" pos:end="5:25">subformat</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:47"><expr pos:start="7:5" pos:end="7:46"><name pos:start="7:5" pos:end="7:30"><name pos:start="7:5" pos:end="7:7">par</name><operator pos:start="7:8" pos:end="7:9">-&gt;</operator><name pos:start="7:10" pos:end="7:30">bits_per_coded_sample</name></name> <operator pos:start="7:32" pos:end="7:32">=</operator> <call pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:42">avio_rl16</name><argument_list pos:start="7:43" pos:end="7:46">(<argument pos:start="7:44" pos:end="7:45"><expr pos:start="7:44" pos:end="7:45"><name pos:start="7:44" pos:end="7:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:47"><expr pos:start="9:5" pos:end="9:46"><name pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:7">par</name><operator pos:start="9:8" pos:end="9:9">-&gt;</operator><name pos:start="9:10" pos:end="9:23">channel_layout</name></name>        <operator pos:start="9:32" pos:end="9:32">=</operator> <call pos:start="9:34" pos:end="9:46"><name pos:start="9:34" pos:end="9:42">avio_rl32</name><argument_list pos:start="9:43" pos:end="9:46">(<argument pos:start="9:44" pos:end="9:45"><expr pos:start="9:44" pos:end="9:45"><name pos:start="9:44" pos:end="9:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="9:49" pos:end="9:67">/* dwChannelMask */</comment>



    <expr_stmt pos:start="13:5" pos:end="13:32"><expr pos:start="13:5" pos:end="13:31"><call pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:15">ff_get_guid</name><argument_list pos:start="13:16" pos:end="13:31">(<argument pos:start="13:17" pos:end="13:18"><expr pos:start="13:17" pos:end="13:18"><name pos:start="13:17" pos:end="13:18">pb</name></expr></argument>, <argument pos:start="13:21" pos:end="13:30"><expr pos:start="13:21" pos:end="13:30"><operator pos:start="13:21" pos:end="13:21">&amp;</operator><name pos:start="13:22" pos:end="13:30">subformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="37:5"><if pos:start="15:5" pos:end="25:5">if <condition pos:start="15:8" pos:end="17:68">(<expr pos:start="15:9" pos:end="17:67"><operator pos:start="15:9" pos:end="15:9">!</operator><macro pos:start="15:10" pos:end="17:67"><name pos:start="15:10" pos:end="15:15">memcmp</name><argument_list pos:start="15:16" pos:end="17:67">(<argument pos:start="15:17" pos:end="15:29">subformat + <literal type="number" pos:start="15:29" pos:end="15:29">4</literal></argument>,

                <argument pos:start="17:17" pos:end="17:62">(const uint8_t[]){ FF_MEDIASUBTYPE_BASE_GUID }</argument>, <argument pos:start="17:65" pos:end="17:66"><literal type="number" pos:start="17:65" pos:end="17:66">12</literal></argument>)</argument_list></macro></expr>)</condition> <block pos:start="17:70" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:73">

        <expr_stmt pos:start="19:9" pos:end="19:44"><expr pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:11">par</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:22">codec_tag</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <call pos:start="19:26" pos:end="19:43"><name pos:start="19:26" pos:end="19:32">AV_RL32</name><argument_list pos:start="19:33" pos:end="19:43">(<argument pos:start="19:34" pos:end="19:42"><expr pos:start="19:34" pos:end="19:42"><name pos:start="19:34" pos:end="19:42">subformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="23:73"><expr pos:start="21:9" pos:end="23:72"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:11">par</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:21">codec_id</name></name>  <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="23:72"><name pos:start="21:26" pos:end="21:44">ff_wav_codec_get_id</name><argument_list pos:start="21:45" pos:end="23:72">(<argument pos:start="21:46" pos:end="21:59"><expr pos:start="21:46" pos:end="21:59"><name pos:start="21:46" pos:end="21:59"><name pos:start="21:46" pos:end="21:48">par</name><operator pos:start="21:49" pos:end="21:50">-&gt;</operator><name pos:start="21:51" pos:end="21:59">codec_tag</name></name></expr></argument>,

                                             <argument pos:start="23:46" pos:end="23:71"><expr pos:start="23:46" pos:end="23:71"><name pos:start="23:46" pos:end="23:71"><name pos:start="23:46" pos:end="23:48">par</name><operator pos:start="23:49" pos:end="23:50">-&gt;</operator><name pos:start="23:51" pos:end="23:71">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="37:5">else <block pos:start="25:12" pos:end="37:5">{<block_content pos:start="27:9" pos:end="35:43">

        <expr_stmt pos:start="27:9" pos:end="27:76"><expr pos:start="27:9" pos:end="27:75"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:11">par</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:21">codec_id</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <call pos:start="27:25" pos:end="27:75"><name pos:start="27:25" pos:end="27:44">ff_codec_guid_get_id</name><argument_list pos:start="27:45" pos:end="27:75">(<argument pos:start="27:46" pos:end="27:63"><expr pos:start="27:46" pos:end="27:63"><name pos:start="27:46" pos:end="27:63">ff_codec_wav_guids</name></expr></argument>, <argument pos:start="27:66" pos:end="27:74"><expr pos:start="27:66" pos:end="27:74"><name pos:start="27:66" pos:end="27:74">subformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="35:43"><if pos:start="29:9" pos:end="35:43">if <condition pos:start="29:12" pos:end="29:27">(<expr pos:start="29:13" pos:end="29:26"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:26"><name pos:start="29:14" pos:end="29:16">par</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:26">codec_id</name></name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="35:43"><block_content pos:start="31:13" pos:end="35:43">

            <expr_stmt pos:start="31:13" pos:end="35:43"><expr pos:start="31:13" pos:end="35:42"><call pos:start="31:13" pos:end="35:42"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="35:42">(<argument pos:start="31:20" pos:end="31:21"><expr pos:start="31:20" pos:end="31:21"><name pos:start="31:20" pos:end="31:21">pb</name></expr></argument>, <argument pos:start="31:24" pos:end="31:37"><expr pos:start="31:24" pos:end="31:37"><name pos:start="31:24" pos:end="31:37">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="33:20" pos:end="33:54"><expr pos:start="33:20" pos:end="33:54"><literal type="string" pos:start="33:20" pos:end="33:39">"unknown subformat:"</literal><name pos:start="33:40" pos:end="33:50">FF_PRI_GUID</name><literal type="string" pos:start="33:51" pos:end="33:54">"\n"</literal></expr></argument>,

                   <argument pos:start="35:20" pos:end="35:41"><expr pos:start="35:20" pos:end="35:41"><call pos:start="35:20" pos:end="35:41"><name pos:start="35:20" pos:end="35:30">FF_ARG_GUID</name><argument_list pos:start="35:31" pos:end="35:41">(<argument pos:start="35:32" pos:end="35:40"><expr pos:start="35:32" pos:end="35:40"><name pos:start="35:32" pos:end="35:40">subformat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
