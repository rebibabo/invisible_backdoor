<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16444.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">uhci_handle_td</name><parameter_list pos:start="1:26" pos:end="3:59">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:35">UHCIState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:48">uint32_t</name></type> <name pos:start="1:50" pos:end="1:53">addr</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:62">UHCI_TD</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:66">td</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:44"><decl pos:start="3:27" pos:end="3:44"><type pos:start="3:27" pos:end="3:44"><name pos:start="3:27" pos:end="3:34">uint32_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:44">int_mask</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:50">bool</name></type> <name pos:start="3:52" pos:end="3:58">queuing</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="163:1">{<block_content pos:start="7:5" pos:end="161:15">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">UHCIAsync</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">async</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>, <decl pos:start="9:18" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:24">max_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:15">pid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">USBDevice</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">USBEndpoint</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:19">ep</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:21">/* Is active ? */</comment>

    <if_stmt pos:start="21:5" pos:end="23:33"><if pos:start="21:5" pos:end="23:33">if <condition pos:start="21:8" pos:end="21:37">(<expr pos:start="21:9" pos:end="21:36"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:18"><name pos:start="21:11" pos:end="21:12">td</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:18">ctrl</name></name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <name pos:start="21:22" pos:end="21:35">TD_CTRL_ACTIVE</name><operator pos:start="21:36" pos:end="21:36">)</operator></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:33"><block_content pos:start="23:9" pos:end="23:33">

        <return pos:start="23:9" pos:end="23:33">return <expr pos:start="23:16" pos:end="23:32"><name pos:start="23:16" pos:end="23:32">TD_RESULT_NEXT_QH</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:44"><expr pos:start="27:5" pos:end="27:43"><name pos:start="27:5" pos:end="27:9">async</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:43"><name pos:start="27:13" pos:end="27:30">uhci_async_find_td</name><argument_list pos:start="27:31" pos:end="27:43">(<argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">s</name></expr></argument>, <argument pos:start="27:35" pos:end="27:38"><expr pos:start="27:35" pos:end="27:38"><name pos:start="27:35" pos:end="27:38">addr</name></expr></argument>, <argument pos:start="27:41" pos:end="27:42"><expr pos:start="27:41" pos:end="27:42"><name pos:start="27:41" pos:end="27:42">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="59:5"><if pos:start="29:5" pos:end="59:5">if <condition pos:start="29:8" pos:end="29:14">(<expr pos:start="29:9" pos:end="29:13"><name pos:start="29:9" pos:end="29:13">async</name></expr>)</condition> <block pos:start="29:16" pos:end="59:5">{<block_content pos:start="33:9" pos:end="57:18">

        <comment type="block" pos:start="31:9" pos:end="31:31">/* Already submitted */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:13">async</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:20">queue</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:27">valid</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <literal type="number" pos:start="33:31" pos:end="33:32">32</literal></expr>;</expr_stmt>



        <if_stmt pos:start="37:9" pos:end="39:40"><if pos:start="37:9" pos:end="39:40">if <condition pos:start="37:12" pos:end="37:25">(<expr pos:start="37:13" pos:end="37:24"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:24"><name pos:start="37:14" pos:end="37:18">async</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:24">done</name></name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:40"><block_content pos:start="39:13" pos:end="39:40">

            <return pos:start="39:13" pos:end="39:40">return <expr pos:start="39:20" pos:end="39:39"><name pos:start="39:20" pos:end="39:39">TD_RESULT_ASYNC_CONT</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="51:9"><if pos:start="41:9" pos:end="51:9">if <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:19">queuing</name></expr>)</condition> <block pos:start="41:22" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:40">

            <comment type="block" pos:start="43:13" pos:end="47:32">/* we are busy filling the queue, we are not prepared

               to consume completed packages then, just leave them

               in async state */</comment>

            <return pos:start="49:13" pos:end="49:40">return <expr pos:start="49:20" pos:end="49:39"><name pos:start="49:20" pos:end="49:39">TD_RESULT_ASYNC_CONT</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><call pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:25">uhci_async_unlink</name><argument_list pos:start="55:26" pos:end="55:32">(<argument pos:start="55:27" pos:end="55:31"><expr pos:start="55:27" pos:end="55:31"><name pos:start="55:27" pos:end="55:31">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:18">goto <name pos:start="57:14" pos:end="57:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:29">/* Allocate new packet */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:58"><expr pos:start="65:5" pos:end="65:57"><name pos:start="65:5" pos:end="65:9">async</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:57"><name pos:start="65:13" pos:end="65:28">uhci_async_alloc</name><argument_list pos:start="65:29" pos:end="65:57">(<argument pos:start="65:30" pos:end="65:50"><expr pos:start="65:30" pos:end="65:50"><call pos:start="65:30" pos:end="65:50"><name pos:start="65:30" pos:end="65:43">uhci_queue_get</name><argument_list pos:start="65:44" pos:end="65:50">(<argument pos:start="65:45" pos:end="65:45"><expr pos:start="65:45" pos:end="65:45"><name pos:start="65:45" pos:end="65:45">s</name></expr></argument>, <argument pos:start="65:48" pos:end="65:49"><expr pos:start="65:48" pos:end="65:49"><name pos:start="65:48" pos:end="65:49">td</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:53" pos:end="65:56"><expr pos:start="65:53" pos:end="65:56"><name pos:start="65:53" pos:end="65:56">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="73:7">/* valid needs to be large enough to handle 10 frame delay

     * for initial isochronous requests

     */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:23"><name pos:start="75:5" pos:end="75:9">async</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:16">queue</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:23">valid</name></name> <operator pos:start="75:25" pos:end="75:25">=</operator> <literal type="number" pos:start="75:27" pos:end="75:28">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:42"><expr pos:start="77:5" pos:end="77:41"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:9">async</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:15">isoc</name></name>  <operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:27"><name pos:start="77:20" pos:end="77:21">td</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:27">ctrl</name></name> <operator pos:start="77:29" pos:end="77:29">&amp;</operator> <name pos:start="77:31" pos:end="77:41">TD_CTRL_IOS</name></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:46"><expr pos:start="81:5" pos:end="81:45"><name pos:start="81:5" pos:end="81:11">max_len</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <operator pos:start="81:15" pos:end="81:15">(</operator><operator pos:start="81:16" pos:end="81:16">(</operator><name pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:18">td</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:25">token</name></name> <operator pos:start="81:27" pos:end="81:28">&gt;&gt;</operator> <literal type="number" pos:start="81:30" pos:end="81:31">21</literal><operator pos:start="81:32" pos:end="81:32">)</operator> <operator pos:start="81:34" pos:end="81:34">+</operator> <literal type="number" pos:start="81:36" pos:end="81:36">1</literal><operator pos:start="81:37" pos:end="81:37">)</operator> <operator pos:start="81:39" pos:end="81:39">&amp;</operator> <literal type="number" pos:start="81:41" pos:end="81:45">0x7ff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:7">pid</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <name pos:start="83:11" pos:end="83:19"><name pos:start="83:11" pos:end="83:12">td</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:19">token</name></name> <operator pos:start="83:21" pos:end="83:21">&amp;</operator> <literal type="number" pos:start="83:23" pos:end="83:26">0xff</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:55"><expr pos:start="87:5" pos:end="87:54"><name pos:start="87:5" pos:end="87:7">dev</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:54"><name pos:start="87:11" pos:end="87:26">uhci_find_device</name><argument_list pos:start="87:27" pos:end="87:54">(<argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><name pos:start="87:28" pos:end="87:28">s</name></expr></argument>, <argument pos:start="87:31" pos:end="87:53"><expr pos:start="87:31" pos:end="87:53"><operator pos:start="87:31" pos:end="87:31">(</operator><name pos:start="87:32" pos:end="87:40"><name pos:start="87:32" pos:end="87:33">td</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:40">token</name></name> <operator pos:start="87:42" pos:end="87:43">&gt;&gt;</operator> <literal type="number" pos:start="87:45" pos:end="87:45">8</literal><operator pos:start="87:46" pos:end="87:46">)</operator> <operator pos:start="87:48" pos:end="87:48">&amp;</operator> <literal type="number" pos:start="87:50" pos:end="87:53">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:55"><expr pos:start="89:5" pos:end="89:54"><name pos:start="89:5" pos:end="89:6">ep</name> <operator pos:start="89:8" pos:end="89:8">=</operator> <call pos:start="89:10" pos:end="89:54"><name pos:start="89:10" pos:end="89:19">usb_ep_get</name><argument_list pos:start="89:20" pos:end="89:54">(<argument pos:start="89:21" pos:end="89:23"><expr pos:start="89:21" pos:end="89:23"><name pos:start="89:21" pos:end="89:23">dev</name></expr></argument>, <argument pos:start="89:26" pos:end="89:28"><expr pos:start="89:26" pos:end="89:28"><name pos:start="89:26" pos:end="89:28">pid</name></expr></argument>, <argument pos:start="89:31" pos:end="89:53"><expr pos:start="89:31" pos:end="89:53"><operator pos:start="89:31" pos:end="89:31">(</operator><name pos:start="89:32" pos:end="89:40"><name pos:start="89:32" pos:end="89:33">td</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:40">token</name></name> <operator pos:start="89:42" pos:end="89:43">&gt;&gt;</operator> <literal type="number" pos:start="89:45" pos:end="89:46">15</literal><operator pos:start="89:47" pos:end="89:47">)</operator> <operator pos:start="89:49" pos:end="89:49">&amp;</operator> <literal type="number" pos:start="89:51" pos:end="89:53">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:46"><expr pos:start="91:5" pos:end="91:45"><call pos:start="91:5" pos:end="91:45"><name pos:start="91:5" pos:end="91:20">usb_packet_setup</name><argument_list pos:start="91:21" pos:end="91:45">(<argument pos:start="91:22" pos:end="91:35"><expr pos:start="91:22" pos:end="91:35"><operator pos:start="91:22" pos:end="91:22">&amp;</operator><name pos:start="91:23" pos:end="91:35"><name pos:start="91:23" pos:end="91:27">async</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:35">packet</name></name></expr></argument>, <argument pos:start="91:38" pos:end="91:40"><expr pos:start="91:38" pos:end="91:40"><name pos:start="91:38" pos:end="91:40">pid</name></expr></argument>, <argument pos:start="91:43" pos:end="91:44"><expr pos:start="91:43" pos:end="91:44"><name pos:start="91:43" pos:end="91:44">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:54"><expr pos:start="93:5" pos:end="93:53"><call pos:start="93:5" pos:end="93:53"><name pos:start="93:5" pos:end="93:19">qemu_sglist_add</name><argument_list pos:start="93:20" pos:end="93:53">(<argument pos:start="93:21" pos:end="93:31"><expr pos:start="93:21" pos:end="93:31"><operator pos:start="93:21" pos:end="93:21">&amp;</operator><name pos:start="93:22" pos:end="93:31"><name pos:start="93:22" pos:end="93:26">async</name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:31">sgl</name></name></expr></argument>, <argument pos:start="93:34" pos:end="93:43"><expr pos:start="93:34" pos:end="93:43"><name pos:start="93:34" pos:end="93:43"><name pos:start="93:34" pos:end="93:35">td</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:43">buffer</name></name></expr></argument>, <argument pos:start="93:46" pos:end="93:52"><expr pos:start="93:46" pos:end="93:52"><name pos:start="93:46" pos:end="93:52">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:48"><expr pos:start="95:5" pos:end="95:47"><call pos:start="95:5" pos:end="95:47"><name pos:start="95:5" pos:end="95:18">usb_packet_map</name><argument_list pos:start="95:19" pos:end="95:47">(<argument pos:start="95:20" pos:end="95:33"><expr pos:start="95:20" pos:end="95:33"><operator pos:start="95:20" pos:end="95:20">&amp;</operator><name pos:start="95:21" pos:end="95:33"><name pos:start="95:21" pos:end="95:25">async</name><operator pos:start="95:26" pos:end="95:27">-&gt;</operator><name pos:start="95:28" pos:end="95:33">packet</name></name></expr></argument>, <argument pos:start="95:36" pos:end="95:46"><expr pos:start="95:36" pos:end="95:46"><operator pos:start="95:36" pos:end="95:36">&amp;</operator><name pos:start="95:37" pos:end="95:46"><name pos:start="95:37" pos:end="95:41">async</name><operator pos:start="95:42" pos:end="95:43">-&gt;</operator><name pos:start="95:44" pos:end="95:46">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="99:5" pos:end="135:5">switch<condition pos:start="99:11" pos:end="99:15">(<expr pos:start="99:12" pos:end="99:14"><name pos:start="99:12" pos:end="99:14">pid</name></expr>)</condition> <block pos:start="99:17" pos:end="135:5">{<block_content pos:start="101:5" pos:end="133:36">

    <case pos:start="101:5" pos:end="101:23">case <expr pos:start="101:10" pos:end="101:22"><name pos:start="101:10" pos:end="101:22">USB_TOKEN_OUT</name></expr>:</case>

    <case pos:start="103:5" pos:end="103:25">case <expr pos:start="103:10" pos:end="103:24"><name pos:start="103:10" pos:end="103:24">USB_TOKEN_SETUP</name></expr>:</case>

        <expr_stmt pos:start="105:9" pos:end="105:53"><expr pos:start="105:9" pos:end="105:52"><name pos:start="105:9" pos:end="105:11">len</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="105:52"><name pos:start="105:15" pos:end="105:31">usb_handle_packet</name><argument_list pos:start="105:32" pos:end="105:52">(<argument pos:start="105:33" pos:end="105:35"><expr pos:start="105:33" pos:end="105:35"><name pos:start="105:33" pos:end="105:35">dev</name></expr></argument>, <argument pos:start="105:38" pos:end="105:51"><expr pos:start="105:38" pos:end="105:51"><operator pos:start="105:38" pos:end="105:38">&amp;</operator><name pos:start="105:39" pos:end="105:51"><name pos:start="105:39" pos:end="105:43">async</name><operator pos:start="105:44" pos:end="105:45">-&gt;</operator><name pos:start="105:46" pos:end="105:51">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="109:26"><if pos:start="107:9" pos:end="109:26">if <condition pos:start="107:12" pos:end="107:21">(<expr pos:start="107:13" pos:end="107:20"><name pos:start="107:13" pos:end="107:15">len</name> <operator pos:start="107:17" pos:end="107:18">&gt;=</operator> <literal type="number" pos:start="107:20" pos:end="107:20">0</literal></expr>)</condition><block type="pseudo" pos:start="109:13" pos:end="109:26"><block_content pos:start="109:13" pos:end="109:26">

            <expr_stmt pos:start="109:13" pos:end="109:26"><expr pos:start="109:13" pos:end="109:25"><name pos:start="109:13" pos:end="109:15">len</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:25">max_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>



    <case pos:start="115:5" pos:end="115:22">case <expr pos:start="115:10" pos:end="115:21"><name pos:start="115:10" pos:end="115:21">USB_TOKEN_IN</name></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:53"><expr pos:start="117:9" pos:end="117:52"><name pos:start="117:9" pos:end="117:11">len</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:52"><name pos:start="117:15" pos:end="117:31">usb_handle_packet</name><argument_list pos:start="117:32" pos:end="117:52">(<argument pos:start="117:33" pos:end="117:35"><expr pos:start="117:33" pos:end="117:35"><name pos:start="117:33" pos:end="117:35">dev</name></expr></argument>, <argument pos:start="117:38" pos:end="117:51"><expr pos:start="117:38" pos:end="117:51"><operator pos:start="117:38" pos:end="117:38">&amp;</operator><name pos:start="117:39" pos:end="117:51"><name pos:start="117:39" pos:end="117:43">async</name><operator pos:start="117:44" pos:end="117:45">-&gt;</operator><name pos:start="117:46" pos:end="117:51">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>



    <default pos:start="123:5" pos:end="123:12">default:</default>

        <comment type="block" pos:start="125:9" pos:end="125:45">/* invalid pid : frame interrupted */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:31"><expr pos:start="127:9" pos:end="127:30"><call pos:start="127:9" pos:end="127:30"><name pos:start="127:9" pos:end="127:23">uhci_async_free</name><argument_list pos:start="127:24" pos:end="127:30">(<argument pos:start="127:25" pos:end="127:29"><expr pos:start="127:25" pos:end="127:29"><name pos:start="127:25" pos:end="127:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:37"><expr pos:start="129:9" pos:end="129:36"><name pos:start="129:9" pos:end="129:17"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:17">status</name></name> <operator pos:start="129:19" pos:end="129:20">|=</operator> <name pos:start="129:22" pos:end="129:36">UHCI_STS_HCPERR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:27"><expr pos:start="131:9" pos:end="131:26"><call pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:23">uhci_update_irq</name><argument_list pos:start="131:24" pos:end="131:26">(<argument pos:start="131:25" pos:end="131:25"><expr pos:start="131:25" pos:end="131:25"><name pos:start="131:25" pos:end="131:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:36">return <expr pos:start="133:16" pos:end="133:35"><name pos:start="133:16" pos:end="133:35">TD_RESULT_STOP_FRAME</name></expr>;</return>

    </block_content>}</block></switch>

 

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:29">(<expr pos:start="139:9" pos:end="139:28"><name pos:start="139:9" pos:end="139:11">len</name> <operator pos:start="139:13" pos:end="139:14">==</operator> <name pos:start="139:16" pos:end="139:28">USB_RET_ASYNC</name></expr>)</condition> <block pos:start="139:31" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:37">

        <expr_stmt pos:start="141:9" pos:end="141:31"><expr pos:start="141:9" pos:end="141:30"><call pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:23">uhci_async_link</name><argument_list pos:start="141:24" pos:end="141:30">(<argument pos:start="141:25" pos:end="141:29"><expr pos:start="141:25" pos:end="141:29"><name pos:start="141:25" pos:end="141:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:37">return <expr pos:start="143:16" pos:end="143:36"><name pos:start="143:16" pos:end="143:36">TD_RESULT_ASYNC_START</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:31"><expr pos:start="149:5" pos:end="149:30"><name pos:start="149:5" pos:end="149:24"><name pos:start="149:5" pos:end="149:9">async</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:17">packet</name><operator pos:start="149:18" pos:end="149:18">.</operator><name pos:start="149:19" pos:end="149:24">result</name></name> <operator pos:start="149:26" pos:end="149:26">=</operator> <name pos:start="149:28" pos:end="149:30">len</name></expr>;</expr_stmt>



<label pos:start="153:1" pos:end="153:5"><name pos:start="153:1" pos:end="153:4">done</name>:</label>

    <expr_stmt pos:start="155:5" pos:end="155:51"><expr pos:start="155:5" pos:end="155:50"><name pos:start="155:5" pos:end="155:7">len</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <call pos:start="155:11" pos:end="155:50"><name pos:start="155:11" pos:end="155:26">uhci_complete_td</name><argument_list pos:start="155:27" pos:end="155:50">(<argument pos:start="155:28" pos:end="155:28"><expr pos:start="155:28" pos:end="155:28"><name pos:start="155:28" pos:end="155:28">s</name></expr></argument>, <argument pos:start="155:31" pos:end="155:32"><expr pos:start="155:31" pos:end="155:32"><name pos:start="155:31" pos:end="155:32">td</name></expr></argument>, <argument pos:start="155:35" pos:end="155:39"><expr pos:start="155:35" pos:end="155:39"><name pos:start="155:35" pos:end="155:39">async</name></expr></argument>, <argument pos:start="155:42" pos:end="155:49"><expr pos:start="155:42" pos:end="155:49"><name pos:start="155:42" pos:end="155:49">int_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:37"><expr pos:start="157:5" pos:end="157:36"><call pos:start="157:5" pos:end="157:36"><name pos:start="157:5" pos:end="157:20">usb_packet_unmap</name><argument_list pos:start="157:21" pos:end="157:36">(<argument pos:start="157:22" pos:end="157:35"><expr pos:start="157:22" pos:end="157:35"><operator pos:start="157:22" pos:end="157:22">&amp;</operator><name pos:start="157:23" pos:end="157:35"><name pos:start="157:23" pos:end="157:27">async</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:35">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:27"><expr pos:start="159:5" pos:end="159:26"><call pos:start="159:5" pos:end="159:26"><name pos:start="159:5" pos:end="159:19">uhci_async_free</name><argument_list pos:start="159:20" pos:end="159:26">(<argument pos:start="159:21" pos:end="159:25"><expr pos:start="159:21" pos:end="159:25"><name pos:start="159:21" pos:end="159:25">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="161:5" pos:end="161:15">return <expr pos:start="161:12" pos:end="161:14"><name pos:start="161:12" pos:end="161:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
