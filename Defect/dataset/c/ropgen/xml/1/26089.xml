<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26089.c" pos:tabs="8"><function pos:start="1:1" pos:end="259:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">paf_video_decode</name><parameter_list pos:start="1:28" pos:end="3:58">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">got_frame</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:57">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="259:1">{<block_content pos:start="7:5" pos:end="257:21">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">PAFVideoDecContext</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">c</name> <init pos:start="7:27" pos:end="7:44">= <expr pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:16">code</name></decl>, <decl pos:start="9:19" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:11"><modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">dst</name></decl>, <decl pos:start="9:25" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:11"><modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:28">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:16">frame</name></decl>, <decl pos:start="11:19" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:21">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:35"><if pos:start="15:5" pos:end="17:35">if <condition pos:start="15:8" pos:end="15:22">(<expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:11">pkt</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:17">size</name></name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <literal type="number" pos:start="15:21" pos:end="15:21">2</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:35"><block_content pos:start="17:9" pos:end="17:35">

        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><call pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:20">bytestream2_init</name><argument_list pos:start="21:21" pos:end="21:50">(<argument pos:start="21:22" pos:end="21:27"><expr pos:start="21:22" pos:end="21:27"><operator pos:start="21:22" pos:end="21:22">&amp;</operator><name pos:start="21:23" pos:end="21:27"><name pos:start="21:23" pos:end="21:23">c</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:27">gb</name></name></expr></argument>, <argument pos:start="21:30" pos:end="21:38"><expr pos:start="21:30" pos:end="21:38"><name pos:start="21:30" pos:end="21:38"><name pos:start="21:30" pos:end="21:32">pkt</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:38">data</name></name></expr></argument>, <argument pos:start="21:41" pos:end="21:49"><expr pos:start="21:41" pos:end="21:49"><name pos:start="21:41" pos:end="21:49"><name pos:start="21:41" pos:end="21:43">pkt</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:8">code</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <call pos:start="25:12" pos:end="25:39"><name pos:start="25:12" pos:end="25:31">bytestream2_get_byte</name><argument_list pos:start="25:32" pos:end="25:39">(<argument pos:start="25:33" pos:end="25:38"><expr pos:start="25:33" pos:end="25:38"><operator pos:start="25:33" pos:end="25:33">&amp;</operator><name pos:start="25:34" pos:end="25:38"><name pos:start="25:34" pos:end="25:34">c</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:38">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:25">(<expr pos:start="27:9" pos:end="27:24"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:13">code</name> <operator pos:start="27:15" pos:end="27:15">&amp;</operator> <literal type="number" pos:start="27:17" pos:end="27:19">0xF</literal><operator pos:start="27:20" pos:end="27:20">)</operator> <operator pos:start="27:22" pos:end="27:22">&gt;</operator> <literal type="number" pos:start="27:24" pos:end="27:24">4</literal></expr>)</condition> <block pos:start="27:27" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:35">

        <expr_stmt pos:start="29:9" pos:end="29:61"><expr pos:start="29:9" pos:end="29:60"><call pos:start="29:9" pos:end="29:60"><name pos:start="29:9" pos:end="29:29">avpriv_request_sample</name><argument_list pos:start="29:30" pos:end="29:60">(<argument pos:start="29:31" pos:end="29:35"><expr pos:start="29:31" pos:end="29:35"><name pos:start="29:31" pos:end="29:35">avctx</name></expr></argument>, <argument pos:start="29:38" pos:end="29:59"><expr pos:start="29:38" pos:end="29:59"><literal type="string" pos:start="29:38" pos:end="29:59">"unknown/invalid code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:35">return <expr pos:start="31:16" pos:end="31:34"><name pos:start="31:16" pos:end="31:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="39:19"><if pos:start="37:5" pos:end="39:19">if <condition pos:start="37:8" pos:end="37:51">(<expr pos:start="37:9" pos:end="37:50"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:12">ret</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:45"><name pos:start="37:16" pos:end="37:30">ff_reget_buffer</name><argument_list pos:start="37:31" pos:end="37:45">(<argument pos:start="37:32" pos:end="37:36"><expr pos:start="37:32" pos:end="37:36"><name pos:start="37:32" pos:end="37:36">avctx</name></expr></argument>, <argument pos:start="37:39" pos:end="37:44"><expr pos:start="37:39" pos:end="37:44"><name pos:start="37:39" pos:end="37:44"><name pos:start="37:39" pos:end="37:39">c</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:44">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="37:46" pos:end="37:46">)</operator> <operator pos:start="37:48" pos:end="37:48">&lt;</operator> <literal type="number" pos:start="37:50" pos:end="37:50">0</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:19"><block_content pos:start="39:9" pos:end="39:19">

        <return pos:start="39:9" pos:end="39:19">return <expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="65:5"><if pos:start="43:5" pos:end="59:5">if <condition pos:start="43:8" pos:end="43:20">(<expr pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:12">code</name> <operator pos:start="43:14" pos:end="43:14">&amp;</operator> <literal type="number" pos:start="43:16" pos:end="43:19">0x20</literal></expr>)</condition> <block pos:start="43:22" pos:end="59:5">{<block_content pos:start="45:9" pos:end="57:46">  <comment type="line" pos:start="43:25" pos:end="43:44">// frame is keyframe</comment>

        <for pos:start="45:9" pos:end="47:50">for <control pos:start="45:13" pos:end="45:31">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">i</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init> <condition pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:21">i</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <literal type="number" pos:start="45:25" pos:end="45:25">4</literal></expr>;</condition> <incr pos:start="45:28" pos:end="45:30"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:28">i</name><operator pos:start="45:29" pos:end="45:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:13" pos:end="47:50"><block_content pos:start="47:13" pos:end="47:50">

            <expr_stmt pos:start="47:13" pos:end="47:50"><expr pos:start="47:13" pos:end="47:49"><call pos:start="47:13" pos:end="47:49"><name pos:start="47:13" pos:end="47:18">memset</name><argument_list pos:start="47:19" pos:end="47:49">(<argument pos:start="47:20" pos:end="47:30"><expr pos:start="47:20" pos:end="47:30"><name pos:start="47:20" pos:end="47:30"><name pos:start="47:20" pos:end="47:20">c</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:27">frame</name><index pos:start="47:28" pos:end="47:30">[<expr pos:start="47:29" pos:end="47:29"><name pos:start="47:29" pos:end="47:29">i</name></expr>]</index></name></expr></argument>, <argument pos:start="47:33" pos:end="47:33"><expr pos:start="47:33" pos:end="47:33"><literal type="number" pos:start="47:33" pos:end="47:33">0</literal></expr></argument>, <argument pos:start="47:36" pos:end="47:48"><expr pos:start="47:36" pos:end="47:48"><name pos:start="47:36" pos:end="47:48"><name pos:start="47:36" pos:end="47:36">c</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:48">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><call pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:14">memset</name><argument_list pos:start="51:15" pos:end="51:50">(<argument pos:start="51:16" pos:end="51:30"><expr pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:16">c</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:21">pic</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:27">data</name><index pos:start="51:28" pos:end="51:30">[<expr pos:start="51:29" pos:end="51:29"><literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:33" pos:end="51:33"><expr pos:start="51:33" pos:end="51:33"><literal type="number" pos:start="51:33" pos:end="51:33">0</literal></expr></argument>, <argument pos:start="51:36" pos:end="51:49"><expr pos:start="51:36" pos:end="51:49"><name pos:start="51:36" pos:end="51:49">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:9">c</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:24">current_frame</name></name>  <operator pos:start="53:27" pos:end="53:27">=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:9">c</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:14">pic</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:25">key_frame</name></name> <operator pos:start="55:27" pos:end="55:27">=</operator> <literal type="number" pos:start="55:29" pos:end="55:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:46"><expr pos:start="57:9" pos:end="57:45"><name pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:9">c</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:14">pic</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:25">pict_type</name></name> <operator pos:start="57:27" pos:end="57:27">=</operator> <name pos:start="57:29" pos:end="57:45">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="65:5">else <block pos:start="59:12" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:46">

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:9">c</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:14">pic</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:25">key_frame</name></name> <operator pos:start="61:27" pos:end="61:27">=</operator> <literal type="number" pos:start="61:29" pos:end="61:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:46"><expr pos:start="63:9" pos:end="63:45"><name pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:9">c</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:14">pic</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:25">pict_type</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <name pos:start="63:29" pos:end="63:45">AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="69:5" pos:end="119:5"><if pos:start="69:5" pos:end="119:5">if <condition pos:start="69:8" pos:end="69:20">(<expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:12">code</name> <operator pos:start="69:14" pos:end="69:14">&amp;</operator> <literal type="number" pos:start="69:16" pos:end="69:19">0x40</literal></expr>)</condition> <block pos:start="69:22" pos:end="119:5">{<block_content pos:start="71:9" pos:end="117:40">  <comment type="line" pos:start="69:25" pos:end="69:41">// palette update</comment>

        <decl_stmt pos:start="71:9" pos:end="71:52"><decl pos:start="71:9" pos:end="71:51"><type pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:16">uint32_t</name> <modifier pos:start="71:18" pos:end="71:18">*</modifier></type><name pos:start="71:19" pos:end="71:21">out</name> <init pos:start="71:23" pos:end="71:51">= <expr pos:start="71:25" pos:end="71:51"><operator pos:start="71:25" pos:end="71:25">(</operator><name pos:start="71:26" pos:end="71:33">uint32_t</name> <operator pos:start="71:35" pos:end="71:35">*</operator><operator pos:start="71:36" pos:end="71:36">)</operator><name pos:start="71:37" pos:end="71:51"><name pos:start="71:37" pos:end="71:37">c</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:42">pic</name><operator pos:start="71:43" pos:end="71:44">-&gt;</operator><name pos:start="71:45" pos:end="71:48">data</name><index pos:start="71:49" pos:end="71:51">[<expr pos:start="71:50" pos:end="71:50"><literal type="number" pos:start="71:50" pos:end="71:50">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:25"><decl pos:start="73:9" pos:end="73:17"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:17">index</name></decl>, <decl pos:start="73:20" pos:end="73:24"><type ref="prev" pos:start="73:9" pos:end="73:11"/><name pos:start="73:20" pos:end="73:24">count</name></decl>;</decl_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:45"><expr pos:start="77:9" pos:end="77:44"><name pos:start="77:9" pos:end="77:13">index</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <call pos:start="77:17" pos:end="77:44"><name pos:start="77:17" pos:end="77:36">bytestream2_get_byte</name><argument_list pos:start="77:37" pos:end="77:44">(<argument pos:start="77:38" pos:end="77:43"><expr pos:start="77:38" pos:end="77:43"><operator pos:start="77:38" pos:end="77:38">&amp;</operator><name pos:start="77:39" pos:end="77:43"><name pos:start="77:39" pos:end="77:39">c</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:49"><expr pos:start="79:9" pos:end="79:48"><name pos:start="79:9" pos:end="79:13">count</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:44"><name pos:start="79:17" pos:end="79:36">bytestream2_get_byte</name><argument_list pos:start="79:37" pos:end="79:44">(<argument pos:start="79:38" pos:end="79:43"><expr pos:start="79:38" pos:end="79:43"><operator pos:start="79:38" pos:end="79:38">&amp;</operator><name pos:start="79:39" pos:end="79:43"><name pos:start="79:39" pos:end="79:39">c</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:46" pos:end="79:46">+</operator> <literal type="number" pos:start="79:48" pos:end="79:48">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="83:9" pos:end="85:39"><if pos:start="83:9" pos:end="85:39">if <condition pos:start="83:12" pos:end="83:32">(<expr pos:start="83:13" pos:end="83:31"><name pos:start="83:13" pos:end="83:17">index</name> <operator pos:start="83:19" pos:end="83:19">+</operator> <name pos:start="83:21" pos:end="83:25">count</name> <operator pos:start="83:27" pos:end="83:27">&gt;</operator> <literal type="number" pos:start="83:29" pos:end="83:31">256</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:39"><block_content pos:start="85:13" pos:end="85:39">

            <return pos:start="85:13" pos:end="85:39">return <expr pos:start="85:20" pos:end="85:38"><name pos:start="85:20" pos:end="85:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="89:39"><if pos:start="87:9" pos:end="89:39">if <condition pos:start="87:12" pos:end="87:59">(<expr pos:start="87:13" pos:end="87:58"><call pos:start="87:13" pos:end="87:46"><name pos:start="87:13" pos:end="87:38">bytestream2_get_bytes_left</name><argument_list pos:start="87:39" pos:end="87:46">(<argument pos:start="87:40" pos:end="87:45"><expr pos:start="87:40" pos:end="87:45"><operator pos:start="87:40" pos:end="87:40">&amp;</operator><name pos:start="87:41" pos:end="87:45"><name pos:start="87:41" pos:end="87:41">c</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:45">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="87:48" pos:end="87:48">&lt;</operator> <literal type="number" pos:start="87:50" pos:end="87:50">3</literal> <operator pos:start="87:52" pos:end="87:52">*</operator> <name pos:start="87:54" pos:end="87:58">count</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:39"><block_content pos:start="89:13" pos:end="89:39">

            <return pos:start="89:13" pos:end="89:39">return <expr pos:start="89:20" pos:end="89:38"><name pos:start="89:20" pos:end="89:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:21"><expr pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:11">out</name> <operator pos:start="93:13" pos:end="93:14">+=</operator> <name pos:start="93:16" pos:end="93:20">index</name></expr>;</expr_stmt>

        <for pos:start="95:9" pos:end="115:9">for <control pos:start="95:13" pos:end="95:35">(<init pos:start="95:14" pos:end="95:19"><expr pos:start="95:14" pos:end="95:18"><name pos:start="95:14" pos:end="95:14">i</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <literal type="number" pos:start="95:18" pos:end="95:18">0</literal></expr>;</init> <condition pos:start="95:21" pos:end="95:30"><expr pos:start="95:21" pos:end="95:29"><name pos:start="95:21" pos:end="95:21">i</name> <operator pos:start="95:23" pos:end="95:23">&lt;</operator> <name pos:start="95:25" pos:end="95:29">count</name></expr>;</condition> <incr pos:start="95:32" pos:end="95:34"><expr pos:start="95:32" pos:end="95:34"><name pos:start="95:32" pos:end="95:32">i</name><operator pos:start="95:33" pos:end="95:34">++</operator></expr></incr>)</control> <block pos:start="95:37" pos:end="115:9">{<block_content pos:start="97:13" pos:end="113:62">

            <decl_stmt pos:start="97:13" pos:end="97:29"><decl pos:start="97:13" pos:end="97:22"><type pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:20">unsigned</name></type> <name pos:start="97:22" pos:end="97:22">r</name></decl>, <decl pos:start="97:25" pos:end="97:25"><type ref="prev" pos:start="97:13" pos:end="97:20"/><name pos:start="97:25" pos:end="97:25">g</name></decl>, <decl pos:start="97:28" pos:end="97:28"><type ref="prev" pos:start="97:13" pos:end="97:20"/><name pos:start="97:28" pos:end="97:28">b</name></decl>;</decl_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:46"><expr pos:start="101:13" pos:end="101:45"><name pos:start="101:13" pos:end="101:13">r</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <call pos:start="101:17" pos:end="101:45"><name pos:start="101:17" pos:end="101:37">bytestream2_get_byteu</name><argument_list pos:start="101:38" pos:end="101:45">(<argument pos:start="101:39" pos:end="101:44"><expr pos:start="101:39" pos:end="101:44"><operator pos:start="101:39" pos:end="101:39">&amp;</operator><name pos:start="101:40" pos:end="101:44"><name pos:start="101:40" pos:end="101:40">c</name><operator pos:start="101:41" pos:end="101:42">-&gt;</operator><name pos:start="101:43" pos:end="101:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:32"><expr pos:start="103:13" pos:end="103:31"><name pos:start="103:13" pos:end="103:13">r</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <name pos:start="103:17" pos:end="103:17">r</name> <operator pos:start="103:19" pos:end="103:20">&lt;&lt;</operator> <literal type="number" pos:start="103:22" pos:end="103:22">2</literal> <operator pos:start="103:24" pos:end="103:24">|</operator> <name pos:start="103:26" pos:end="103:26">r</name> <operator pos:start="103:28" pos:end="103:29">&gt;&gt;</operator> <literal type="number" pos:start="103:31" pos:end="103:31">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:46"><expr pos:start="105:13" pos:end="105:45"><name pos:start="105:13" pos:end="105:13">g</name> <operator pos:start="105:15" pos:end="105:15">=</operator> <call pos:start="105:17" pos:end="105:45"><name pos:start="105:17" pos:end="105:37">bytestream2_get_byteu</name><argument_list pos:start="105:38" pos:end="105:45">(<argument pos:start="105:39" pos:end="105:44"><expr pos:start="105:39" pos:end="105:44"><operator pos:start="105:39" pos:end="105:39">&amp;</operator><name pos:start="105:40" pos:end="105:44"><name pos:start="105:40" pos:end="105:40">c</name><operator pos:start="105:41" pos:end="105:42">-&gt;</operator><name pos:start="105:43" pos:end="105:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:32"><expr pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:13">g</name> <operator pos:start="107:15" pos:end="107:15">=</operator> <name pos:start="107:17" pos:end="107:17">g</name> <operator pos:start="107:19" pos:end="107:20">&lt;&lt;</operator> <literal type="number" pos:start="107:22" pos:end="107:22">2</literal> <operator pos:start="107:24" pos:end="107:24">|</operator> <name pos:start="107:26" pos:end="107:26">g</name> <operator pos:start="107:28" pos:end="107:29">&gt;&gt;</operator> <literal type="number" pos:start="107:31" pos:end="107:31">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:46"><expr pos:start="109:13" pos:end="109:45"><name pos:start="109:13" pos:end="109:13">b</name> <operator pos:start="109:15" pos:end="109:15">=</operator> <call pos:start="109:17" pos:end="109:45"><name pos:start="109:17" pos:end="109:37">bytestream2_get_byteu</name><argument_list pos:start="109:38" pos:end="109:45">(<argument pos:start="109:39" pos:end="109:44"><expr pos:start="109:39" pos:end="109:44"><operator pos:start="109:39" pos:end="109:39">&amp;</operator><name pos:start="109:40" pos:end="109:44"><name pos:start="109:40" pos:end="109:40">c</name><operator pos:start="109:41" pos:end="109:42">-&gt;</operator><name pos:start="109:43" pos:end="109:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:32"><expr pos:start="111:13" pos:end="111:31"><name pos:start="111:13" pos:end="111:13">b</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <name pos:start="111:17" pos:end="111:17">b</name> <operator pos:start="111:19" pos:end="111:20">&lt;&lt;</operator> <literal type="number" pos:start="111:22" pos:end="111:22">2</literal> <operator pos:start="111:24" pos:end="111:24">|</operator> <name pos:start="111:26" pos:end="111:26">b</name> <operator pos:start="111:28" pos:end="111:29">&gt;&gt;</operator> <literal type="number" pos:start="111:31" pos:end="111:31">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:62"><expr pos:start="113:13" pos:end="113:61"><operator pos:start="113:13" pos:end="113:13">*</operator><name pos:start="113:14" pos:end="113:16">out</name><operator pos:start="113:17" pos:end="113:18">++</operator> <operator pos:start="113:20" pos:end="113:20">=</operator> <operator pos:start="113:22" pos:end="113:22">(</operator><literal type="number" pos:start="113:23" pos:end="113:27">0xFFU</literal> <operator pos:start="113:29" pos:end="113:30">&lt;&lt;</operator> <literal type="number" pos:start="113:32" pos:end="113:33">24</literal><operator pos:start="113:34" pos:end="113:34">)</operator> <operator pos:start="113:36" pos:end="113:36">|</operator> <operator pos:start="113:38" pos:end="113:38">(</operator><name pos:start="113:39" pos:end="113:39">r</name> <operator pos:start="113:41" pos:end="113:42">&lt;&lt;</operator> <literal type="number" pos:start="113:44" pos:end="113:45">16</literal><operator pos:start="113:46" pos:end="113:46">)</operator> <operator pos:start="113:48" pos:end="113:48">|</operator> <operator pos:start="113:50" pos:end="113:50">(</operator><name pos:start="113:51" pos:end="113:51">g</name> <operator pos:start="113:53" pos:end="113:54">&lt;&lt;</operator> <literal type="number" pos:start="113:56" pos:end="113:56">8</literal><operator pos:start="113:57" pos:end="113:57">)</operator> <operator pos:start="113:59" pos:end="113:59">|</operator> <name pos:start="113:61" pos:end="113:61">b</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="117:9" pos:end="117:40"><expr pos:start="117:9" pos:end="117:39"><name pos:start="117:9" pos:end="117:35"><name pos:start="117:9" pos:end="117:9">c</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:14">pic</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:35">palette_has_changed</name></name> <operator pos:start="117:37" pos:end="117:37">=</operator> <literal type="number" pos:start="117:39" pos:end="117:39">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="123:5" pos:end="233:5">switch <condition pos:start="123:12" pos:end="123:24">(<expr pos:start="123:13" pos:end="123:23"><name pos:start="123:13" pos:end="123:16">code</name> <operator pos:start="123:18" pos:end="123:18">&amp;</operator> <literal type="number" pos:start="123:20" pos:end="123:23">0x0F</literal></expr>)</condition> <block pos:start="123:26" pos:end="233:5">{<block_content pos:start="125:5" pos:end="231:22">

    <case pos:start="125:5" pos:end="125:11">case <expr pos:start="125:10" pos:end="125:10"><literal type="number" pos:start="125:10" pos:end="125:10">0</literal></expr>:</case>

        <comment type="block" pos:start="127:9" pos:end="129:75">/* Block-based motion compensation using 4x4 blocks with either

         * horizontal or vertical vectors; might incorporate VQ as well. */</comment>

        <if_stmt pos:start="131:9" pos:end="133:23"><if pos:start="131:9" pos:end="133:23">if <condition pos:start="131:12" pos:end="131:53">(<expr pos:start="131:13" pos:end="131:52"><operator pos:start="131:13" pos:end="131:13">(</operator><name pos:start="131:14" pos:end="131:16">ret</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <call pos:start="131:20" pos:end="131:47"><name pos:start="131:20" pos:end="131:27">decode_0</name><argument_list pos:start="131:28" pos:end="131:47">(<argument pos:start="131:29" pos:end="131:29"><expr pos:start="131:29" pos:end="131:29"><name pos:start="131:29" pos:end="131:29">c</name></expr></argument>, <argument pos:start="131:32" pos:end="131:40"><expr pos:start="131:32" pos:end="131:40"><name pos:start="131:32" pos:end="131:40"><name pos:start="131:32" pos:end="131:34">pkt</name><operator pos:start="131:35" pos:end="131:36">-&gt;</operator><name pos:start="131:37" pos:end="131:40">data</name></name></expr></argument>, <argument pos:start="131:43" pos:end="131:46"><expr pos:start="131:43" pos:end="131:46"><name pos:start="131:43" pos:end="131:46">code</name></expr></argument>)</argument_list></call><operator pos:start="131:48" pos:end="131:48">)</operator> <operator pos:start="131:50" pos:end="131:50">&lt;</operator> <literal type="number" pos:start="131:52" pos:end="131:52">0</literal></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:23"><block_content pos:start="133:13" pos:end="133:23">

            <return pos:start="133:13" pos:end="133:23">return <expr pos:start="133:20" pos:end="133:22"><name pos:start="133:20" pos:end="133:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:11">case <expr pos:start="137:10" pos:end="137:10"><literal type="number" pos:start="137:10" pos:end="137:10">1</literal></expr>:</case>

        <comment type="block" pos:start="139:9" pos:end="141:80">/* Uncompressed data. This mode specifies that (width * height) bytes

         * should be copied directly from the encoded buffer into the output. */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:41"><expr pos:start="143:9" pos:end="143:40"><name pos:start="143:9" pos:end="143:11">dst</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <name pos:start="143:15" pos:end="143:40"><name pos:start="143:15" pos:end="143:15">c</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:22">frame</name><index pos:start="143:23" pos:end="143:40">[<expr pos:start="143:24" pos:end="143:39"><name pos:start="143:24" pos:end="143:39"><name pos:start="143:24" pos:end="143:24">c</name><operator pos:start="143:25" pos:end="143:26">-&gt;</operator><name pos:start="143:27" pos:end="143:39">current_frame</name></name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="line" pos:start="145:9" pos:end="145:37">// possibly chunk length data</comment>

        <expr_stmt pos:start="147:9" pos:end="147:36"><expr pos:start="147:9" pos:end="147:35"><call pos:start="147:9" pos:end="147:35"><name pos:start="147:9" pos:end="147:24">bytestream2_skip</name><argument_list pos:start="147:25" pos:end="147:35">(<argument pos:start="147:26" pos:end="147:31"><expr pos:start="147:26" pos:end="147:31"><operator pos:start="147:26" pos:end="147:26">&amp;</operator><name pos:start="147:27" pos:end="147:31"><name pos:start="147:27" pos:end="147:27">c</name><operator pos:start="147:28" pos:end="147:29">-&gt;</operator><name pos:start="147:30" pos:end="147:31">gb</name></name></expr></argument>, <argument pos:start="147:34" pos:end="147:34"><expr pos:start="147:34" pos:end="147:34"><literal type="number" pos:start="147:34" pos:end="147:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="151:39"><if pos:start="149:9" pos:end="151:39">if <condition pos:start="149:12" pos:end="149:63">(<expr pos:start="149:13" pos:end="149:62"><call pos:start="149:13" pos:end="149:46"><name pos:start="149:13" pos:end="149:38">bytestream2_get_bytes_left</name><argument_list pos:start="149:39" pos:end="149:46">(<argument pos:start="149:40" pos:end="149:45"><expr pos:start="149:40" pos:end="149:45"><operator pos:start="149:40" pos:end="149:40">&amp;</operator><name pos:start="149:41" pos:end="149:45"><name pos:start="149:41" pos:end="149:41">c</name><operator pos:start="149:42" pos:end="149:43">-&gt;</operator><name pos:start="149:44" pos:end="149:45">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="149:48" pos:end="149:48">&lt;</operator> <name pos:start="149:50" pos:end="149:62"><name pos:start="149:50" pos:end="149:50">c</name><operator pos:start="149:51" pos:end="149:52">-&gt;</operator><name pos:start="149:53" pos:end="149:62">video_size</name></name></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:39"><block_content pos:start="151:13" pos:end="151:39">

            <return pos:start="151:13" pos:end="151:39">return <expr pos:start="151:20" pos:end="151:38"><name pos:start="151:20" pos:end="151:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:60"><expr pos:start="153:9" pos:end="153:59"><call pos:start="153:9" pos:end="153:59"><name pos:start="153:9" pos:end="153:31">bytestream2_get_bufferu</name><argument_list pos:start="153:32" pos:end="153:59">(<argument pos:start="153:33" pos:end="153:38"><expr pos:start="153:33" pos:end="153:38"><operator pos:start="153:33" pos:end="153:33">&amp;</operator><name pos:start="153:34" pos:end="153:38"><name pos:start="153:34" pos:end="153:34">c</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:38">gb</name></name></expr></argument>, <argument pos:start="153:41" pos:end="153:43"><expr pos:start="153:41" pos:end="153:43"><name pos:start="153:41" pos:end="153:43">dst</name></expr></argument>, <argument pos:start="153:46" pos:end="153:58"><expr pos:start="153:46" pos:end="153:58"><name pos:start="153:46" pos:end="153:58"><name pos:start="153:46" pos:end="153:46">c</name><operator pos:start="153:47" pos:end="153:48">-&gt;</operator><name pos:start="153:49" pos:end="153:58">video_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    <case pos:start="157:5" pos:end="157:11">case <expr pos:start="157:10" pos:end="157:10"><literal type="number" pos:start="157:10" pos:end="157:10">2</literal></expr>:</case>

        <comment type="block" pos:start="159:9" pos:end="163:52">/* Copy reference frame: Consume the next byte in the stream as the

         * reference frame (which should be 0, 1, 2, or 3, and should not be

         * the same as the current frame number). */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:45"><expr pos:start="165:9" pos:end="165:44"><name pos:start="165:9" pos:end="165:13">frame</name> <operator pos:start="165:15" pos:end="165:15">=</operator> <call pos:start="165:17" pos:end="165:44"><name pos:start="165:17" pos:end="165:36">bytestream2_get_byte</name><argument_list pos:start="165:37" pos:end="165:44">(<argument pos:start="165:38" pos:end="165:43"><expr pos:start="165:38" pos:end="165:43"><operator pos:start="165:38" pos:end="165:38">&amp;</operator><name pos:start="165:39" pos:end="165:43"><name pos:start="165:39" pos:end="165:39">c</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="169:39"><if pos:start="167:9" pos:end="169:39">if <condition pos:start="167:12" pos:end="167:22">(<expr pos:start="167:13" pos:end="167:21"><name pos:start="167:13" pos:end="167:17">frame</name> <operator pos:start="167:19" pos:end="167:19">&gt;</operator> <literal type="number" pos:start="167:21" pos:end="167:21">3</literal></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:39"><block_content pos:start="169:13" pos:end="169:39">

            <return pos:start="169:13" pos:end="169:39">return <expr pos:start="169:20" pos:end="169:38"><name pos:start="169:20" pos:end="169:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="171:9" pos:end="173:79"><if pos:start="171:9" pos:end="173:79">if <condition pos:start="171:12" pos:end="171:38">(<expr pos:start="171:13" pos:end="171:37"><name pos:start="171:13" pos:end="171:17">frame</name> <operator pos:start="171:19" pos:end="171:20">!=</operator> <name pos:start="171:22" pos:end="171:37"><name pos:start="171:22" pos:end="171:22">c</name><operator pos:start="171:23" pos:end="171:24">-&gt;</operator><name pos:start="171:25" pos:end="171:37">current_frame</name></name></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:79"><block_content pos:start="173:13" pos:end="173:79">

            <expr_stmt pos:start="173:13" pos:end="173:79"><expr pos:start="173:13" pos:end="173:78"><call pos:start="173:13" pos:end="173:78"><name pos:start="173:13" pos:end="173:18">memcpy</name><argument_list pos:start="173:19" pos:end="173:78">(<argument pos:start="173:20" pos:end="173:45"><expr pos:start="173:20" pos:end="173:45"><name pos:start="173:20" pos:end="173:45"><name pos:start="173:20" pos:end="173:20">c</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:27">frame</name><index pos:start="173:28" pos:end="173:45">[<expr pos:start="173:29" pos:end="173:44"><name pos:start="173:29" pos:end="173:44"><name pos:start="173:29" pos:end="173:29">c</name><operator pos:start="173:30" pos:end="173:31">-&gt;</operator><name pos:start="173:32" pos:end="173:44">current_frame</name></name></expr>]</index></name></expr></argument>, <argument pos:start="173:48" pos:end="173:62"><expr pos:start="173:48" pos:end="173:62"><name pos:start="173:48" pos:end="173:62"><name pos:start="173:48" pos:end="173:48">c</name><operator pos:start="173:49" pos:end="173:50">-&gt;</operator><name pos:start="173:51" pos:end="173:55">frame</name><index pos:start="173:56" pos:end="173:62">[<expr pos:start="173:57" pos:end="173:61"><name pos:start="173:57" pos:end="173:61">frame</name></expr>]</index></name></expr></argument>, <argument pos:start="173:65" pos:end="173:77"><expr pos:start="173:65" pos:end="173:77"><name pos:start="173:65" pos:end="173:77"><name pos:start="173:65" pos:end="173:65">c</name><operator pos:start="173:66" pos:end="173:67">-&gt;</operator><name pos:start="173:68" pos:end="173:77">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>

    <case pos:start="177:5" pos:end="177:11">case <expr pos:start="177:10" pos:end="177:10"><literal type="number" pos:start="177:10" pos:end="177:10">4</literal></expr>:</case>

        <comment type="block" pos:start="179:9" pos:end="179:33">/* Run length encoding.*/</comment>

        <expr_stmt pos:start="181:9" pos:end="181:41"><expr pos:start="181:9" pos:end="181:40"><name pos:start="181:9" pos:end="181:11">dst</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <name pos:start="181:15" pos:end="181:40"><name pos:start="181:15" pos:end="181:15">c</name><operator pos:start="181:16" pos:end="181:17">-&gt;</operator><name pos:start="181:18" pos:end="181:22">frame</name><index pos:start="181:23" pos:end="181:40">[<expr pos:start="181:24" pos:end="181:39"><name pos:start="181:24" pos:end="181:39"><name pos:start="181:24" pos:end="181:24">c</name><operator pos:start="181:25" pos:end="181:26">-&gt;</operator><name pos:start="181:27" pos:end="181:39">current_frame</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:34"><expr pos:start="183:9" pos:end="183:33"><name pos:start="183:9" pos:end="183:11">end</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <name pos:start="183:15" pos:end="183:17">dst</name> <operator pos:start="183:19" pos:end="183:19">+</operator> <name pos:start="183:21" pos:end="183:33"><name pos:start="183:21" pos:end="183:21">c</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:33">video_size</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:36"><expr pos:start="187:9" pos:end="187:35"><call pos:start="187:9" pos:end="187:35"><name pos:start="187:9" pos:end="187:24">bytestream2_skip</name><argument_list pos:start="187:25" pos:end="187:35">(<argument pos:start="187:26" pos:end="187:31"><expr pos:start="187:26" pos:end="187:31"><operator pos:start="187:26" pos:end="187:26">&amp;</operator><name pos:start="187:27" pos:end="187:31"><name pos:start="187:27" pos:end="187:27">c</name><operator pos:start="187:28" pos:end="187:29">-&gt;</operator><name pos:start="187:30" pos:end="187:31">gb</name></name></expr></argument>, <argument pos:start="187:34" pos:end="187:34"><expr pos:start="187:34" pos:end="187:34"><literal type="number" pos:start="187:34" pos:end="187:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="191:9" pos:end="225:9">while <condition pos:start="191:15" pos:end="191:25">(<expr pos:start="191:16" pos:end="191:24"><name pos:start="191:16" pos:end="191:18">dst</name> <operator pos:start="191:20" pos:end="191:20">&lt;</operator> <name pos:start="191:22" pos:end="191:24">end</name></expr>)</condition> <block pos:start="191:27" pos:end="225:9">{<block_content pos:start="193:13" pos:end="223:25">

            <decl_stmt pos:start="193:13" pos:end="193:24"><decl pos:start="193:13" pos:end="193:23"><type pos:start="193:13" pos:end="193:18"><name pos:start="193:13" pos:end="193:18">int8_t</name></type> <name pos:start="193:20" pos:end="193:23">code</name></decl>;</decl_stmt>

            <decl_stmt pos:start="195:13" pos:end="195:22"><decl pos:start="195:13" pos:end="195:21"><type pos:start="195:13" pos:end="195:15"><name pos:start="195:13" pos:end="195:15">int</name></type> <name pos:start="195:17" pos:end="195:21">count</name></decl>;</decl_stmt>



            <if_stmt pos:start="199:13" pos:end="201:43"><if pos:start="199:13" pos:end="201:43">if <condition pos:start="199:16" pos:end="199:55">(<expr pos:start="199:17" pos:end="199:54"><call pos:start="199:17" pos:end="199:50"><name pos:start="199:17" pos:end="199:42">bytestream2_get_bytes_left</name><argument_list pos:start="199:43" pos:end="199:50">(<argument pos:start="199:44" pos:end="199:49"><expr pos:start="199:44" pos:end="199:49"><operator pos:start="199:44" pos:end="199:44">&amp;</operator><name pos:start="199:45" pos:end="199:49"><name pos:start="199:45" pos:end="199:45">c</name><operator pos:start="199:46" pos:end="199:47">-&gt;</operator><name pos:start="199:48" pos:end="199:49">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="199:52" pos:end="199:52">&lt;</operator> <literal type="number" pos:start="199:54" pos:end="199:54">2</literal></expr>)</condition><block type="pseudo" pos:start="201:17" pos:end="201:43"><block_content pos:start="201:17" pos:end="201:43">

                <return pos:start="201:17" pos:end="201:43">return <expr pos:start="201:24" pos:end="201:42"><name pos:start="201:24" pos:end="201:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="205:13" pos:end="205:50"><expr pos:start="205:13" pos:end="205:49"><name pos:start="205:13" pos:end="205:16">code</name>  <operator pos:start="205:19" pos:end="205:19">=</operator> <call pos:start="205:21" pos:end="205:49"><name pos:start="205:21" pos:end="205:41">bytestream2_get_byteu</name><argument_list pos:start="205:42" pos:end="205:49">(<argument pos:start="205:43" pos:end="205:48"><expr pos:start="205:43" pos:end="205:48"><operator pos:start="205:43" pos:end="205:43">&amp;</operator><name pos:start="205:44" pos:end="205:48"><name pos:start="205:44" pos:end="205:44">c</name><operator pos:start="205:45" pos:end="205:46">-&gt;</operator><name pos:start="205:47" pos:end="205:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:36"><expr pos:start="207:13" pos:end="207:35"><name pos:start="207:13" pos:end="207:17">count</name> <operator pos:start="207:19" pos:end="207:19">=</operator> <call pos:start="207:21" pos:end="207:31"><name pos:start="207:21" pos:end="207:25">FFABS</name><argument_list pos:start="207:26" pos:end="207:31">(<argument pos:start="207:27" pos:end="207:30"><expr pos:start="207:27" pos:end="207:30"><name pos:start="207:27" pos:end="207:30">code</name></expr></argument>)</argument_list></call> <operator pos:start="207:33" pos:end="207:33">+</operator> <literal type="number" pos:start="207:35" pos:end="207:35">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="211:13" pos:end="213:43"><if pos:start="211:13" pos:end="213:43">if <condition pos:start="211:16" pos:end="211:34">(<expr pos:start="211:17" pos:end="211:33"><name pos:start="211:17" pos:end="211:19">dst</name> <operator pos:start="211:21" pos:end="211:21">+</operator> <name pos:start="211:23" pos:end="211:27">count</name> <operator pos:start="211:29" pos:end="211:29">&gt;</operator> <name pos:start="211:31" pos:end="211:33">end</name></expr>)</condition><block type="pseudo" pos:start="213:17" pos:end="213:43"><block_content pos:start="213:17" pos:end="213:43">

                <return pos:start="213:17" pos:end="213:43">return <expr pos:start="213:24" pos:end="213:42"><name pos:start="213:24" pos:end="213:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="215:13" pos:end="221:59"><if pos:start="215:13" pos:end="217:66">if <condition pos:start="215:16" pos:end="215:25">(<expr pos:start="215:17" pos:end="215:24"><name pos:start="215:17" pos:end="215:20">code</name> <operator pos:start="215:22" pos:end="215:22">&lt;</operator> <literal type="number" pos:start="215:24" pos:end="215:24">0</literal></expr>)</condition><block type="pseudo" pos:start="217:17" pos:end="217:66"><block_content pos:start="217:17" pos:end="217:66">

                <expr_stmt pos:start="217:17" pos:end="217:66"><expr pos:start="217:17" pos:end="217:65"><call pos:start="217:17" pos:end="217:65"><name pos:start="217:17" pos:end="217:22">memset</name><argument_list pos:start="217:23" pos:end="217:65">(<argument pos:start="217:24" pos:end="217:26"><expr pos:start="217:24" pos:end="217:26"><name pos:start="217:24" pos:end="217:26">dst</name></expr></argument>, <argument pos:start="217:29" pos:end="217:57"><expr pos:start="217:29" pos:end="217:57"><call pos:start="217:29" pos:end="217:57"><name pos:start="217:29" pos:end="217:49">bytestream2_get_byteu</name><argument_list pos:start="217:50" pos:end="217:57">(<argument pos:start="217:51" pos:end="217:56"><expr pos:start="217:51" pos:end="217:56"><operator pos:start="217:51" pos:end="217:51">&amp;</operator><name pos:start="217:52" pos:end="217:56"><name pos:start="217:52" pos:end="217:52">c</name><operator pos:start="217:53" pos:end="217:54">-&gt;</operator><name pos:start="217:55" pos:end="217:56">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="217:60" pos:end="217:64"><expr pos:start="217:60" pos:end="217:64"><name pos:start="217:60" pos:end="217:64">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="219:13" pos:end="221:59">else<block type="pseudo" pos:start="221:17" pos:end="221:59"><block_content pos:start="221:17" pos:end="221:59">

                <expr_stmt pos:start="221:17" pos:end="221:59"><expr pos:start="221:17" pos:end="221:58"><call pos:start="221:17" pos:end="221:58"><name pos:start="221:17" pos:end="221:38">bytestream2_get_buffer</name><argument_list pos:start="221:39" pos:end="221:58">(<argument pos:start="221:40" pos:end="221:45"><expr pos:start="221:40" pos:end="221:45"><operator pos:start="221:40" pos:end="221:40">&amp;</operator><name pos:start="221:41" pos:end="221:45"><name pos:start="221:41" pos:end="221:41">c</name><operator pos:start="221:42" pos:end="221:43">-&gt;</operator><name pos:start="221:44" pos:end="221:45">gb</name></name></expr></argument>, <argument pos:start="221:48" pos:end="221:50"><expr pos:start="221:48" pos:end="221:50"><name pos:start="221:48" pos:end="221:50">dst</name></expr></argument>, <argument pos:start="221:53" pos:end="221:57"><expr pos:start="221:53" pos:end="221:57"><name pos:start="221:53" pos:end="221:57">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:25"><expr pos:start="223:13" pos:end="223:24"><name pos:start="223:13" pos:end="223:15">dst</name> <operator pos:start="223:17" pos:end="223:18">+=</operator> <name pos:start="223:20" pos:end="223:24">count</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="227:9" pos:end="227:14">break;</break>

    <default pos:start="229:5" pos:end="229:12">default:</default>

        <expr_stmt pos:start="231:9" pos:end="231:22"><expr pos:start="231:9" pos:end="231:21"><call pos:start="231:9" pos:end="231:21"><name pos:start="231:9" pos:end="231:18">av_assert0</name><argument_list pos:start="231:19" pos:end="231:21">(<argument pos:start="231:20" pos:end="231:20"><expr pos:start="231:20" pos:end="231:20"><literal type="number" pos:start="231:20" pos:end="231:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="237:5" pos:end="241:45"><expr pos:start="237:5" pos:end="241:44"><call pos:start="237:5" pos:end="241:44"><name pos:start="237:5" pos:end="237:23">av_image_copy_plane</name><argument_list pos:start="237:24" pos:end="241:44">(<argument pos:start="237:25" pos:end="237:39"><expr pos:start="237:25" pos:end="237:39"><name pos:start="237:25" pos:end="237:39"><name pos:start="237:25" pos:end="237:25">c</name><operator pos:start="237:26" pos:end="237:27">-&gt;</operator><name pos:start="237:28" pos:end="237:30">pic</name><operator pos:start="237:31" pos:end="237:32">-&gt;</operator><name pos:start="237:33" pos:end="237:36">data</name><index pos:start="237:37" pos:end="237:39">[<expr pos:start="237:38" pos:end="237:38"><literal type="number" pos:start="237:38" pos:end="237:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="237:42" pos:end="237:60"><expr pos:start="237:42" pos:end="237:60"><name pos:start="237:42" pos:end="237:60"><name pos:start="237:42" pos:end="237:42">c</name><operator pos:start="237:43" pos:end="237:44">-&gt;</operator><name pos:start="237:45" pos:end="237:47">pic</name><operator pos:start="237:48" pos:end="237:49">-&gt;</operator><name pos:start="237:50" pos:end="237:57">linesize</name><index pos:start="237:58" pos:end="237:60">[<expr pos:start="237:59" pos:end="237:59"><literal type="number" pos:start="237:59" pos:end="237:59">0</literal></expr>]</index></name></expr></argument>,

                        <argument pos:start="239:25" pos:end="239:50"><expr pos:start="239:25" pos:end="239:50"><name pos:start="239:25" pos:end="239:50"><name pos:start="239:25" pos:end="239:25">c</name><operator pos:start="239:26" pos:end="239:27">-&gt;</operator><name pos:start="239:28" pos:end="239:32">frame</name><index pos:start="239:33" pos:end="239:50">[<expr pos:start="239:34" pos:end="239:49"><name pos:start="239:34" pos:end="239:49"><name pos:start="239:34" pos:end="239:34">c</name><operator pos:start="239:35" pos:end="239:36">-&gt;</operator><name pos:start="239:37" pos:end="239:49">current_frame</name></name></expr>]</index></name></expr></argument>, <argument pos:start="239:53" pos:end="239:60"><expr pos:start="239:53" pos:end="239:60"><name pos:start="239:53" pos:end="239:60"><name pos:start="239:53" pos:end="239:53">c</name><operator pos:start="239:54" pos:end="239:55">-&gt;</operator><name pos:start="239:56" pos:end="239:60">width</name></name></expr></argument>,

                        <argument pos:start="241:25" pos:end="241:32"><expr pos:start="241:25" pos:end="241:32"><name pos:start="241:25" pos:end="241:32"><name pos:start="241:25" pos:end="241:25">c</name><operator pos:start="241:26" pos:end="241:27">-&gt;</operator><name pos:start="241:28" pos:end="241:32">width</name></name></expr></argument>, <argument pos:start="241:35" pos:end="241:43"><expr pos:start="241:35" pos:end="241:43"><name pos:start="241:35" pos:end="241:43"><name pos:start="241:35" pos:end="241:35">c</name><operator pos:start="241:36" pos:end="241:37">-&gt;</operator><name pos:start="241:38" pos:end="241:43">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:50"><expr pos:start="245:5" pos:end="245:49"><name pos:start="245:5" pos:end="245:20"><name pos:start="245:5" pos:end="245:5">c</name><operator pos:start="245:6" pos:end="245:7">-&gt;</operator><name pos:start="245:8" pos:end="245:20">current_frame</name></name> <operator pos:start="245:22" pos:end="245:22">=</operator> <operator pos:start="245:24" pos:end="245:24">(</operator><name pos:start="245:25" pos:end="245:40"><name pos:start="245:25" pos:end="245:25">c</name><operator pos:start="245:26" pos:end="245:27">-&gt;</operator><name pos:start="245:28" pos:end="245:40">current_frame</name></name> <operator pos:start="245:42" pos:end="245:42">+</operator> <literal type="number" pos:start="245:44" pos:end="245:44">1</literal><operator pos:start="245:45" pos:end="245:45">)</operator> <operator pos:start="245:47" pos:end="245:47">&amp;</operator> <literal type="number" pos:start="245:49" pos:end="245:49">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="249:19"><if pos:start="247:5" pos:end="249:19">if <condition pos:start="247:8" pos:end="247:47">(<expr pos:start="247:9" pos:end="247:46"><operator pos:start="247:9" pos:end="247:9">(</operator><name pos:start="247:10" pos:end="247:12">ret</name> <operator pos:start="247:14" pos:end="247:14">=</operator> <call pos:start="247:16" pos:end="247:41"><name pos:start="247:16" pos:end="247:27">av_frame_ref</name><argument_list pos:start="247:28" pos:end="247:41">(<argument pos:start="247:29" pos:end="247:32"><expr pos:start="247:29" pos:end="247:32"><name pos:start="247:29" pos:end="247:32">data</name></expr></argument>, <argument pos:start="247:35" pos:end="247:40"><expr pos:start="247:35" pos:end="247:40"><name pos:start="247:35" pos:end="247:40"><name pos:start="247:35" pos:end="247:35">c</name><operator pos:start="247:36" pos:end="247:37">-&gt;</operator><name pos:start="247:38" pos:end="247:40">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="247:42" pos:end="247:42">)</operator> <operator pos:start="247:44" pos:end="247:44">&lt;</operator> <literal type="number" pos:start="247:46" pos:end="247:46">0</literal></expr>)</condition><block type="pseudo" pos:start="249:9" pos:end="249:19"><block_content pos:start="249:9" pos:end="249:19">

        <return pos:start="249:9" pos:end="249:19">return <expr pos:start="249:16" pos:end="249:18"><name pos:start="249:16" pos:end="249:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:19"><expr pos:start="253:5" pos:end="253:18"><operator pos:start="253:5" pos:end="253:5">*</operator><name pos:start="253:6" pos:end="253:14">got_frame</name> <operator pos:start="253:16" pos:end="253:16">=</operator> <literal type="number" pos:start="253:18" pos:end="253:18">1</literal></expr>;</expr_stmt>



    <return pos:start="257:5" pos:end="257:21">return <expr pos:start="257:12" pos:end="257:20"><name pos:start="257:12" pos:end="257:20"><name pos:start="257:12" pos:end="257:14">pkt</name><operator pos:start="257:15" pos:end="257:16">-&gt;</operator><name pos:start="257:17" pos:end="257:20">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
