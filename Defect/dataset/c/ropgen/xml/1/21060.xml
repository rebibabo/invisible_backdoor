<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21060.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">openfile</name><parameter_list pos:start="1:20" pos:end="3:32">(<parameter pos:start="1:21" pos:end="1:30"><decl pos:start="1:21" pos:end="1:30"><type pos:start="1:21" pos:end="1:30"><name pos:start="1:21" pos:end="1:24">char</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:30">name</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:41"><decl pos:start="1:33" pos:end="1:41"><type pos:start="1:33" pos:end="1:41"><name pos:start="1:33" pos:end="1:35">int</name></type> <name pos:start="1:37" pos:end="1:41">flags</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:47">bool</name></type> <name pos:start="1:49" pos:end="1:60">writethrough</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:78"><decl pos:start="1:63" pos:end="1:78"><type pos:start="1:63" pos:end="1:78"><name pos:start="1:63" pos:end="1:66">bool</name></type> <name pos:start="1:68" pos:end="1:78">force_share</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:31"><decl pos:start="3:21" pos:end="3:31"><type pos:start="3:21" pos:end="3:31"><name pos:start="3:21" pos:end="3:25">QDict</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:31">opts</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:13">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:19">(<expr pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:18">qemuio_blk</name></expr>)</condition> <block pos:start="13:21" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:17">

        <expr_stmt pos:start="15:9" pos:end="15:60"><expr pos:start="15:9" pos:end="15:59"><call pos:start="15:9" pos:end="15:59"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="15:59">(<argument pos:start="15:22" pos:end="15:58"><expr pos:start="15:22" pos:end="15:58"><literal type="string" pos:start="15:22" pos:end="15:58">"file open already, try 'help close'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:22"><expr pos:start="17:9" pos:end="17:21"><call pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:15">QDECREF</name><argument_list pos:start="17:16" pos:end="17:21">(<argument pos:start="17:17" pos:end="17:20"><expr pos:start="17:17" pos:end="17:20"><name pos:start="17:17" pos:end="17:20">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="47:5"><if pos:start="25:5" pos:end="47:5">if <condition pos:start="25:8" pos:end="25:20">(<expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:19">force_share</name></expr>)</condition> <block pos:start="25:22" pos:end="47:5">{<block_content pos:start="27:9" pos:end="45:57">

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:18">(<expr pos:start="27:13" pos:end="27:17"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:17">opts</name></expr>)</condition> <block pos:start="27:20" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:31">

            <expr_stmt pos:start="29:13" pos:end="29:31"><expr pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:16">opts</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:30"><name pos:start="29:20" pos:end="29:28">qdict_new</name><argument_list pos:start="29:29" pos:end="29:30">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="43:9"><if pos:start="33:9" pos:end="43:9">if <condition pos:start="33:12" pos:end="35:59">(<expr pos:start="33:13" pos:end="35:58"><call pos:start="33:13" pos:end="33:52"><name pos:start="33:13" pos:end="33:24">qdict_haskey</name><argument_list pos:start="33:25" pos:end="33:52">(<argument pos:start="33:26" pos:end="33:29"><expr pos:start="33:26" pos:end="33:29"><name pos:start="33:26" pos:end="33:29">opts</name></expr></argument>, <argument pos:start="33:32" pos:end="33:51"><expr pos:start="33:32" pos:end="33:51"><name pos:start="33:32" pos:end="33:51">BDRV_OPT_FORCE_SHARE</name></expr></argument>)</argument_list></call>

            <operator pos:start="35:13" pos:end="35:14">&amp;&amp;</operator> <operator pos:start="35:16" pos:end="35:16">!</operator><call pos:start="35:17" pos:end="35:58"><name pos:start="35:17" pos:end="35:30">qdict_get_bool</name><argument_list pos:start="35:31" pos:end="35:58">(<argument pos:start="35:32" pos:end="35:35"><expr pos:start="35:32" pos:end="35:35"><name pos:start="35:32" pos:end="35:35">opts</name></expr></argument>, <argument pos:start="35:38" pos:end="35:57"><expr pos:start="35:38" pos:end="35:57"><name pos:start="35:38" pos:end="35:57">BDRV_OPT_FORCE_SHARE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:61" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:21">

            <expr_stmt pos:start="37:13" pos:end="37:60"><expr pos:start="37:13" pos:end="37:59"><call pos:start="37:13" pos:end="37:59"><name pos:start="37:13" pos:end="37:24">error_report</name><argument_list pos:start="37:25" pos:end="37:59">(<argument pos:start="37:26" pos:end="37:58"><expr pos:start="37:26" pos:end="37:58"><literal type="string" pos:start="37:26" pos:end="37:58">"-U conflicts with image options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:26"><expr pos:start="39:13" pos:end="39:25"><call pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:19">QDECREF</name><argument_list pos:start="39:20" pos:end="39:25">(<argument pos:start="39:21" pos:end="39:24"><expr pos:start="39:21" pos:end="39:24"><name pos:start="39:21" pos:end="39:24">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:21">return <expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:57"><expr pos:start="45:9" pos:end="45:56"><call pos:start="45:9" pos:end="45:56"><name pos:start="45:9" pos:end="45:22">qdict_put_bool</name><argument_list pos:start="45:23" pos:end="45:56">(<argument pos:start="45:24" pos:end="45:27"><expr pos:start="45:24" pos:end="45:27"><name pos:start="45:24" pos:end="45:27">opts</name></expr></argument>, <argument pos:start="45:30" pos:end="45:49"><expr pos:start="45:30" pos:end="45:49"><name pos:start="45:30" pos:end="45:49">BDRV_OPT_FORCE_SHARE</name></expr></argument>, <argument pos:start="45:52" pos:end="45:55"><expr pos:start="45:52" pos:end="45:55"><name pos:start="45:52" pos:end="45:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:67"><expr pos:start="49:5" pos:end="49:66"><name pos:start="49:5" pos:end="49:14">qemuio_blk</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:66"><name pos:start="49:18" pos:end="49:29">blk_new_open</name><argument_list pos:start="49:30" pos:end="49:66">(<argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">name</name></expr></argument>, <argument pos:start="49:37" pos:end="49:40"><expr pos:start="49:37" pos:end="49:40"><name pos:start="49:37" pos:end="49:40">NULL</name></expr></argument>, <argument pos:start="49:43" pos:end="49:46"><expr pos:start="49:43" pos:end="49:46"><name pos:start="49:43" pos:end="49:46">opts</name></expr></argument>, <argument pos:start="49:49" pos:end="49:53"><expr pos:start="49:49" pos:end="49:53"><name pos:start="49:49" pos:end="49:53">flags</name></expr></argument>, <argument pos:start="49:56" pos:end="49:65"><expr pos:start="49:56" pos:end="49:65"><operator pos:start="49:56" pos:end="49:56">&amp;</operator><name pos:start="49:57" pos:end="49:65">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:20">(<expr pos:start="51:9" pos:end="51:19"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:19">qemuio_blk</name></expr>)</condition> <block pos:start="51:22" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:17">

        <expr_stmt pos:start="53:9" pos:end="55:62"><expr pos:start="53:9" pos:end="55:61"><call pos:start="53:9" pos:end="55:61"><name pos:start="53:9" pos:end="53:25">error_reportf_err</name><argument_list pos:start="53:26" pos:end="55:61">(<argument pos:start="53:27" pos:end="53:35"><expr pos:start="53:27" pos:end="53:35"><name pos:start="53:27" pos:end="53:35">local_err</name></expr></argument>, <argument pos:start="53:38" pos:end="53:55"><expr pos:start="53:38" pos:end="53:55"><literal type="string" pos:start="53:38" pos:end="53:55">"can't open%s%s: "</literal></expr></argument>,

                          <argument pos:start="55:27" pos:end="55:48"><expr pos:start="55:27" pos:end="55:48"><ternary pos:start="55:27" pos:end="55:48"><condition pos:start="55:27" pos:end="55:32"><expr pos:start="55:27" pos:end="55:30"><name pos:start="55:27" pos:end="55:30">name</name></expr> ?</condition><then pos:start="55:34" pos:end="55:43"> <expr pos:start="55:34" pos:end="55:43"><literal type="string" pos:start="55:34" pos:end="55:43">" device "</literal></expr> </then><else pos:start="55:45" pos:end="55:48">: <expr pos:start="55:47" pos:end="55:48"><literal type="string" pos:start="55:47" pos:end="55:48">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="55:51" pos:end="55:60"><expr pos:start="55:51" pos:end="55:60"><ternary pos:start="55:51" pos:end="55:60"><condition pos:start="55:51" pos:end="55:56"><expr pos:start="55:51" pos:end="55:54"><name pos:start="55:51" pos:end="55:54">name</name></expr> ?</condition><then/><else pos:start="55:57" pos:end="55:60">: <expr pos:start="55:59" pos:end="55:60"><literal type="string" pos:start="55:59" pos:end="55:60">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:17">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:6">bs</name> <operator pos:start="63:8" pos:end="63:8">=</operator> <call pos:start="63:10" pos:end="63:27"><name pos:start="63:10" pos:end="63:15">blk_bs</name><argument_list pos:start="63:16" pos:end="63:27">(<argument pos:start="63:17" pos:end="63:26"><expr pos:start="63:17" pos:end="63:26"><name pos:start="63:17" pos:end="63:26">qemuio_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="87:5"><if pos:start="65:5" pos:end="87:5">if <condition pos:start="65:8" pos:end="65:55">(<expr pos:start="65:9" pos:end="65:54"><call pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:25">bdrv_is_encrypted</name><argument_list pos:start="65:26" pos:end="65:29">(<argument pos:start="65:27" pos:end="65:28"><expr pos:start="65:27" pos:end="65:28"><name pos:start="65:27" pos:end="65:28">bs</name></expr></argument>)</argument_list></call> <operator pos:start="65:31" pos:end="65:32">&amp;&amp;</operator> <call pos:start="65:34" pos:end="65:54"><name pos:start="65:34" pos:end="65:50">bdrv_key_required</name><argument_list pos:start="65:51" pos:end="65:54">(<argument pos:start="65:52" pos:end="65:53"><expr pos:start="65:52" pos:end="65:53"><name pos:start="65:52" pos:end="65:53">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:57" pos:end="87:5">{<block_content pos:start="67:9" pos:end="85:9">

        <decl_stmt pos:start="67:9" pos:end="67:27"><decl pos:start="67:9" pos:end="67:26"><type pos:start="67:9" pos:end="67:12"><name pos:start="67:9" pos:end="67:12">char</name></type> <name pos:start="67:14" pos:end="67:26"><name pos:start="67:14" pos:end="67:21">password</name><index pos:start="67:22" pos:end="67:26">[<expr pos:start="67:23" pos:end="67:25"><literal type="number" pos:start="67:23" pos:end="67:25">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:56"><expr pos:start="69:9" pos:end="69:55"><call pos:start="69:9" pos:end="69:55"><name pos:start="69:9" pos:end="69:14">printf</name><argument_list pos:start="69:15" pos:end="69:55">(<argument pos:start="69:16" pos:end="69:48"><expr pos:start="69:16" pos:end="69:48"><literal type="string" pos:start="69:16" pos:end="69:48">"Disk image '%s' is encrypted.\n"</literal></expr></argument>, <argument pos:start="69:51" pos:end="69:54"><expr pos:start="69:51" pos:end="69:54"><name pos:start="69:51" pos:end="69:54">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:63">(<expr pos:start="71:13" pos:end="71:62"><call pos:start="71:13" pos:end="71:58"><name pos:start="71:13" pos:end="71:30">qemu_read_password</name><argument_list pos:start="71:31" pos:end="71:58">(<argument pos:start="71:32" pos:end="71:39"><expr pos:start="71:32" pos:end="71:39"><name pos:start="71:32" pos:end="71:39">password</name></expr></argument>, <argument pos:start="71:42" pos:end="71:57"><expr pos:start="71:42" pos:end="71:57"><sizeof pos:start="71:42" pos:end="71:57">sizeof<argument_list pos:start="71:48" pos:end="71:57">(<argument pos:start="71:49" pos:end="71:56"><expr pos:start="71:49" pos:end="71:56"><name pos:start="71:49" pos:end="71:56">password</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="71:60" pos:end="71:60">&lt;</operator> <literal type="number" pos:start="71:62" pos:end="71:62">0</literal></expr>)</condition> <block pos:start="71:65" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:23">

            <expr_stmt pos:start="73:13" pos:end="73:46"><expr pos:start="73:13" pos:end="73:45"><call pos:start="73:13" pos:end="73:45"><name pos:start="73:13" pos:end="73:24">error_report</name><argument_list pos:start="73:25" pos:end="73:45">(<argument pos:start="73:26" pos:end="73:44"><expr pos:start="73:26" pos:end="73:44"><literal type="string" pos:start="73:26" pos:end="73:44">"No password given"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="75:13" pos:end="75:23">goto <name pos:start="75:18" pos:end="75:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:43">(<expr pos:start="79:13" pos:end="79:42"><call pos:start="79:13" pos:end="79:38"><name pos:start="79:13" pos:end="79:24">bdrv_set_key</name><argument_list pos:start="79:25" pos:end="79:38">(<argument pos:start="79:26" pos:end="79:27"><expr pos:start="79:26" pos:end="79:27"><name pos:start="79:26" pos:end="79:27">bs</name></expr></argument>, <argument pos:start="79:30" pos:end="79:37"><expr pos:start="79:30" pos:end="79:37"><name pos:start="79:30" pos:end="79:37">password</name></expr></argument>)</argument_list></call> <operator pos:start="79:40" pos:end="79:40">&lt;</operator> <literal type="number" pos:start="79:42" pos:end="79:42">0</literal></expr>)</condition> <block pos:start="79:45" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:23">

            <expr_stmt pos:start="81:13" pos:end="81:45"><expr pos:start="81:13" pos:end="81:44"><call pos:start="81:13" pos:end="81:44"><name pos:start="81:13" pos:end="81:24">error_report</name><argument_list pos:start="81:25" pos:end="81:44">(<argument pos:start="81:26" pos:end="81:43"><expr pos:start="81:26" pos:end="81:43"><literal type="string" pos:start="81:26" pos:end="81:43">"invalid password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:23">goto <name pos:start="83:18" pos:end="83:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:58"><expr pos:start="91:5" pos:end="91:57"><call pos:start="91:5" pos:end="91:57"><name pos:start="91:5" pos:end="91:30">blk_set_enable_write_cache</name><argument_list pos:start="91:31" pos:end="91:57">(<argument pos:start="91:32" pos:end="91:41"><expr pos:start="91:32" pos:end="91:41"><name pos:start="91:32" pos:end="91:41">qemuio_blk</name></expr></argument>, <argument pos:start="91:44" pos:end="91:56"><expr pos:start="91:44" pos:end="91:56"><operator pos:start="91:44" pos:end="91:44">!</operator><name pos:start="91:45" pos:end="91:56">writethrough</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>



 <label pos:start="99:2" pos:end="99:7"><name pos:start="99:2" pos:end="99:6">error</name>:</label>

    <expr_stmt pos:start="101:5" pos:end="101:26"><expr pos:start="101:5" pos:end="101:25"><call pos:start="101:5" pos:end="101:25"><name pos:start="101:5" pos:end="101:13">blk_unref</name><argument_list pos:start="101:14" pos:end="101:25">(<argument pos:start="101:15" pos:end="101:24"><expr pos:start="101:15" pos:end="101:24"><name pos:start="101:15" pos:end="101:24">qemuio_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:22"><expr pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:14">qemuio_blk</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <name pos:start="103:18" pos:end="103:21">NULL</name></expr>;</expr_stmt>

    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
