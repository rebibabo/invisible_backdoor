<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24032.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:25">void</name></type> <name pos:start="1:27" pos:end="1:36">gen_op_neg</name> <parameter_list pos:start="1:38" pos:end="1:91">(<parameter pos:start="1:39" pos:end="1:55"><decl pos:start="1:39" pos:end="1:55"><type pos:start="1:39" pos:end="1:55"><name pos:start="1:39" pos:end="1:50">DisasContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">ctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:65"><decl pos:start="1:58" pos:end="1:65"><type pos:start="1:58" pos:end="1:65"><name pos:start="1:58" pos:end="1:61">TCGv</name></type> <name pos:start="1:63" pos:end="1:65">ret</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:76"><decl pos:start="1:68" pos:end="1:76"><type pos:start="1:68" pos:end="1:76"><name pos:start="1:68" pos:end="1:71">TCGv</name></type> <name pos:start="1:73" pos:end="1:76">arg1</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:90"><decl pos:start="1:79" pos:end="1:90"><type pos:start="1:79" pos:end="1:90"><name pos:start="1:79" pos:end="1:81">int</name></type> <name pos:start="1:83" pos:end="1:90">ov_check</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:30">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">l1</name></decl>, <decl pos:start="5:13" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:14">l2</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:25"><expr pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:6">l1</name> <operator pos:start="9:8" pos:end="9:8">=</operator> <call pos:start="9:10" pos:end="9:24"><name pos:start="9:10" pos:end="9:22">gen_new_label</name><argument_list pos:start="9:23" pos:end="9:24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="14:0"><expr pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:6">l2</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:24"><name pos:start="11:10" pos:end="11:22">gen_new_label</name><argument_list pos:start="11:23" pos:end="11:24">()</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="13:1" pos:end="13:25">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:25"><call pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:25">(<argument pos:start="13:13" pos:end="13:24"><expr pos:start="13:13" pos:end="13:24"><name pos:start="13:13" pos:end="13:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="15:5" pos:end="30:0"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:21">(<expr pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:11">ctx</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:20">sf_mode</name></name></expr>)</condition> <block pos:start="15:23" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:61">

        <expr_stmt pos:start="17:9" pos:end="17:61"><expr pos:start="17:9" pos:end="17:60"><call pos:start="17:9" pos:end="17:60"><name pos:start="17:9" pos:end="17:26">tcg_gen_brcondi_tl</name><argument_list pos:start="17:27" pos:end="17:60">(<argument pos:start="17:28" pos:end="17:38"><expr pos:start="17:28" pos:end="17:38"><name pos:start="17:28" pos:end="17:38">TCG_COND_EQ</name></expr></argument>, <argument pos:start="17:41" pos:end="17:44"><expr pos:start="17:41" pos:end="17:44"><name pos:start="17:41" pos:end="17:44">arg1</name></expr></argument>, <argument pos:start="17:47" pos:end="17:55"><expr pos:start="17:47" pos:end="17:55"><name pos:start="17:47" pos:end="17:55">INT64_MIN</name></expr></argument>, <argument pos:start="17:58" pos:end="17:59"><expr pos:start="17:58" pos:end="17:59"><name pos:start="17:58" pos:end="17:59">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="30:0">else <block pos:start="19:12" pos:end="30:0">{<block_content pos:start="21:9" pos:end="25:59">

        <decl_stmt pos:start="21:9" pos:end="21:44"><decl pos:start="21:9" pos:end="21:43"><type pos:start="21:9" pos:end="21:12"><name pos:start="21:9" pos:end="21:12">TCGv</name></type> <name pos:start="21:14" pos:end="21:15">t0</name> <init pos:start="21:17" pos:end="21:43">= <expr pos:start="21:19" pos:end="21:43"><call pos:start="21:19" pos:end="21:43"><name pos:start="21:19" pos:end="21:30">tcg_temp_new</name><argument_list pos:start="21:31" pos:end="21:43">(<argument pos:start="21:32" pos:end="21:42"><expr pos:start="21:32" pos:end="21:42"><name pos:start="21:32" pos:end="21:42">TCG_TYPE_TL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="23:9" pos:end="23:36"><expr pos:start="23:9" pos:end="23:35"><call pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:25">tcg_gen_ext32s_tl</name><argument_list pos:start="23:26" pos:end="23:35">(<argument pos:start="23:27" pos:end="23:28"><expr pos:start="23:27" pos:end="23:28"><name pos:start="23:27" pos:end="23:28">t0</name></expr></argument>, <argument pos:start="23:31" pos:end="23:34"><expr pos:start="23:31" pos:end="23:34"><name pos:start="23:31" pos:end="23:34">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:59"><expr pos:start="25:9" pos:end="25:58"><call pos:start="25:9" pos:end="25:58"><name pos:start="25:9" pos:end="25:26">tcg_gen_brcondi_tl</name><argument_list pos:start="25:27" pos:end="25:58">(<argument pos:start="25:28" pos:end="25:38"><expr pos:start="25:28" pos:end="25:38"><name pos:start="25:28" pos:end="25:38">TCG_COND_EQ</name></expr></argument>, <argument pos:start="25:41" pos:end="25:42"><expr pos:start="25:41" pos:end="25:42"><name pos:start="25:41" pos:end="25:42">t0</name></expr></argument>, <argument pos:start="25:45" pos:end="25:53"><expr pos:start="25:45" pos:end="25:53"><name pos:start="25:45" pos:end="25:53">INT32_MIN</name></expr></argument>, <argument pos:start="25:56" pos:end="25:57"><expr pos:start="25:56" pos:end="25:57"><name pos:start="25:56" pos:end="25:57">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:else pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="31:9" pos:end="34:0"><expr pos:start="31:9" pos:end="31:60"><call pos:start="31:9" pos:end="31:60"><name pos:start="31:9" pos:end="31:26">tcg_gen_brcondi_tl</name><argument_list pos:start="31:27" pos:end="31:60">(<argument pos:start="31:28" pos:end="31:38"><expr pos:start="31:28" pos:end="31:38"><name pos:start="31:28" pos:end="31:38">TCG_COND_EQ</name></expr></argument>, <argument pos:start="31:41" pos:end="31:44"><expr pos:start="31:41" pos:end="31:44"><name pos:start="31:41" pos:end="31:44">arg1</name></expr></argument>, <argument pos:start="31:47" pos:end="31:55"><expr pos:start="31:47" pos:end="31:55"><name pos:start="31:47" pos:end="31:55">INT32_MIN</name></expr></argument>, <argument pos:start="31:58" pos:end="31:59"><expr pos:start="31:58" pos:end="31:59"><name pos:start="31:58" pos:end="31:59">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><call pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:18">tcg_gen_neg_tl</name><argument_list pos:start="35:19" pos:end="35:29">(<argument pos:start="35:20" pos:end="35:22"><expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">ret</name></expr></argument>, <argument pos:start="35:25" pos:end="35:28"><expr pos:start="35:25" pos:end="35:28"><name pos:start="35:25" pos:end="35:28">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">ov_check</name></expr>)</condition> <block pos:start="37:19" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:58">

        <expr_stmt pos:start="39:9" pos:end="39:58"><expr pos:start="39:9" pos:end="39:57"><call pos:start="39:9" pos:end="39:57"><name pos:start="39:9" pos:end="39:23">tcg_gen_andi_tl</name><argument_list pos:start="39:24" pos:end="39:57">(<argument pos:start="39:25" pos:end="39:31"><expr pos:start="39:25" pos:end="39:31"><name pos:start="39:25" pos:end="39:31">cpu_xer</name></expr></argument>, <argument pos:start="39:34" pos:end="39:40"><expr pos:start="39:34" pos:end="39:40"><name pos:start="39:34" pos:end="39:40">cpu_xer</name></expr></argument>, <argument pos:start="39:43" pos:end="39:56"><expr pos:start="39:43" pos:end="39:56"><operator pos:start="39:43" pos:end="39:43">~</operator><operator pos:start="39:44" pos:end="39:44">(</operator><literal type="number" pos:start="39:45" pos:end="39:45">1</literal> <operator pos:start="39:47" pos:end="39:48">&lt;&lt;</operator> <name pos:start="39:50" pos:end="39:55">XER_OV</name><operator pos:start="39:56" pos:end="39:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:19"><expr pos:start="43:5" pos:end="43:18"><call pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:14">tcg_gen_br</name><argument_list pos:start="43:15" pos:end="43:18">(<argument pos:start="43:16" pos:end="43:17"><expr pos:start="43:16" pos:end="43:17"><name pos:start="43:16" pos:end="43:17">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:22"><expr pos:start="45:5" pos:end="45:21"><call pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:17">gen_set_label</name><argument_list pos:start="45:18" pos:end="45:21">(<argument pos:start="45:19" pos:end="45:20"><expr pos:start="45:19" pos:end="45:20"><name pos:start="45:19" pos:end="45:20">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><call pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:18">tcg_gen_mov_tl</name><argument_list pos:start="47:19" pos:end="47:29">(<argument pos:start="47:20" pos:end="47:22"><expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">ret</name></expr></argument>, <argument pos:start="47:25" pos:end="47:28"><expr pos:start="47:25" pos:end="47:28"><name pos:start="47:25" pos:end="47:28">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:17">(<expr pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">ov_check</name></expr>)</condition> <block pos:start="49:19" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:72">

        <expr_stmt pos:start="51:9" pos:end="51:72"><expr pos:start="51:9" pos:end="51:71"><call pos:start="51:9" pos:end="51:71"><name pos:start="51:9" pos:end="51:22">tcg_gen_ori_tl</name><argument_list pos:start="51:23" pos:end="51:71">(<argument pos:start="51:24" pos:end="51:30"><expr pos:start="51:24" pos:end="51:30"><name pos:start="51:24" pos:end="51:30">cpu_xer</name></expr></argument>, <argument pos:start="51:33" pos:end="51:39"><expr pos:start="51:33" pos:end="51:39"><name pos:start="51:33" pos:end="51:39">cpu_xer</name></expr></argument>, <argument pos:start="51:42" pos:end="51:70"><expr pos:start="51:42" pos:end="51:70"><operator pos:start="51:42" pos:end="51:42">(</operator><literal type="number" pos:start="51:43" pos:end="51:43">1</literal> <operator pos:start="51:45" pos:end="51:46">&lt;&lt;</operator> <name pos:start="51:48" pos:end="51:53">XER_OV</name><operator pos:start="51:54" pos:end="51:54">)</operator> <operator pos:start="51:56" pos:end="51:56">|</operator> <operator pos:start="51:58" pos:end="51:58">(</operator><literal type="number" pos:start="51:59" pos:end="51:59">1</literal> <operator pos:start="51:61" pos:end="51:62">&lt;&lt;</operator> <name pos:start="51:64" pos:end="51:69">XER_SO</name><operator pos:start="51:70" pos:end="51:70">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><call pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:17">gen_set_label</name><argument_list pos:start="55:18" pos:end="55:21">(<argument pos:start="55:19" pos:end="55:20"><expr pos:start="55:19" pos:end="55:20"><name pos:start="55:19" pos:end="55:20">l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="59:30"><if pos:start="57:5" pos:end="59:30">if <condition pos:start="57:8" pos:end="57:39">(<expr pos:start="57:9" pos:end="57:38"><call pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:16">unlikely</name><argument_list pos:start="57:17" pos:end="57:38">(<argument pos:start="57:18" pos:end="57:37"><expr pos:start="57:18" pos:end="57:37"><call pos:start="57:18" pos:end="57:32"><name pos:start="57:18" pos:end="57:19">Rc</name><argument_list pos:start="57:20" pos:end="57:32">(<argument pos:start="57:21" pos:end="57:31"><expr pos:start="57:21" pos:end="57:31"><name pos:start="57:21" pos:end="57:31"><name pos:start="57:21" pos:end="57:23">ctx</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:31">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="57:34" pos:end="57:35">!=</operator> <literal type="number" pos:start="57:37" pos:end="57:37">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:30"><block_content pos:start="59:9" pos:end="59:30">

        <expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><call pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:19">gen_set_Rc0</name><argument_list pos:start="59:20" pos:end="59:29">(<argument pos:start="59:21" pos:end="59:23"><expr pos:start="59:21" pos:end="59:23"><name pos:start="59:21" pos:end="59:23">ctx</name></expr></argument>, <argument pos:start="59:26" pos:end="59:28"><expr pos:start="59:26" pos:end="59:28"><name pos:start="59:26" pos:end="59:28">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
