<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22055.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:27">_find_pte</name> <parameter_list pos:start="1:29" pos:end="1:71">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:38">mmu_ctx_t</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:55"><decl pos:start="1:46" pos:end="1:55"><type pos:start="1:46" pos:end="1:55"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:55">is_64b</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:62"><decl pos:start="1:58" pos:end="1:62"><type pos:start="1:58" pos:end="1:62"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:62">h</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:70"><decl pos:start="1:65" pos:end="1:70"><type pos:start="1:65" pos:end="1:70"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:70">rw</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="155:1">{<block_content pos:start="5:5" pos:end="153:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">target_ulong</name></type> <name pos:start="5:18" pos:end="5:21">base</name></decl>, <decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:24" pos:end="5:27">pte0</name></decl>, <decl pos:start="5:30" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:30" pos:end="5:33">pte1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:15">good</name> <init pos:start="7:17" pos:end="7:20">= <expr pos:start="7:19" pos:end="7:20"><operator pos:start="7:19" pos:end="7:19">-</operator><literal type="number" pos:start="7:20" pos:end="7:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:13"><expr pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <operator pos:start="13:11" pos:end="13:11">-</operator><literal type="number" pos:start="13:12" pos:end="13:12">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="13:15" pos:end="13:34">/* No entry found */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:8">base</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <name pos:start="15:12" pos:end="15:26"><name pos:start="15:12" pos:end="15:14">ctx</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:23">pg_addr</name><index pos:start="15:24" pos:end="15:26">[<expr pos:start="15:25" pos:end="15:25"><name pos:start="15:25" pos:end="15:25">h</name></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="105:5">for <control pos:start="17:9" pos:end="17:27">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:21"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <literal type="number" pos:start="17:21" pos:end="17:21">8</literal></expr>;</condition> <incr pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:24">i</name><operator pos:start="17:25" pos:end="17:26">++</operator></expr></incr>)</control> <block pos:start="17:29" pos:end="105:5">{<block_content pos:start="21:9" pos:end="103:9">

<cpp:if pos:start="19:1" pos:end="19:25">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:25"><call pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:11">defined</name><argument_list pos:start="19:12" pos:end="19:25">(<argument pos:start="19:13" pos:end="19:24"><expr pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="21:9" pos:end="44:0"><if pos:start="21:9" pos:end="29:9">if <condition pos:start="21:12" pos:end="21:19">(<expr pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:18">is_64b</name></expr>)</condition> <block pos:start="21:21" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:52">

            <expr_stmt pos:start="23:13" pos:end="23:45"><expr pos:start="23:13" pos:end="23:44"><name pos:start="23:13" pos:end="23:16">pte0</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <call pos:start="23:20" pos:end="23:44"><name pos:start="23:20" pos:end="23:27">ldq_phys</name><argument_list pos:start="23:28" pos:end="23:44">(<argument pos:start="23:29" pos:end="23:43"><expr pos:start="23:29" pos:end="23:43"><name pos:start="23:29" pos:end="23:32">base</name> <operator pos:start="23:34" pos:end="23:34">+</operator> <operator pos:start="23:36" pos:end="23:36">(</operator><name pos:start="23:37" pos:end="23:37">i</name> <operator pos:start="23:39" pos:end="23:39">*</operator> <literal type="number" pos:start="23:41" pos:end="23:42">16</literal><operator pos:start="23:43" pos:end="23:43">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:50"><expr pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:16">pte1</name> <operator pos:start="25:18" pos:end="25:18">=</operator>  <call pos:start="25:21" pos:end="25:49"><name pos:start="25:21" pos:end="25:28">ldq_phys</name><argument_list pos:start="25:29" pos:end="25:49">(<argument pos:start="25:30" pos:end="25:48"><expr pos:start="25:30" pos:end="25:48"><name pos:start="25:30" pos:end="25:33">base</name> <operator pos:start="25:35" pos:end="25:35">+</operator> <operator pos:start="25:37" pos:end="25:37">(</operator><name pos:start="25:38" pos:end="25:38">i</name> <operator pos:start="25:40" pos:end="25:40">*</operator> <literal type="number" pos:start="25:42" pos:end="25:43">16</literal><operator pos:start="25:44" pos:end="25:44">)</operator> <operator pos:start="25:46" pos:end="25:46">+</operator> <literal type="number" pos:start="25:48" pos:end="25:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:52"><expr pos:start="27:13" pos:end="27:51"><name pos:start="27:13" pos:end="27:13">r</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:51"><name pos:start="27:17" pos:end="27:27">pte64_check</name><argument_list pos:start="27:28" pos:end="27:51">(<argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">ctx</name></expr></argument>, <argument pos:start="27:34" pos:end="27:37"><expr pos:start="27:34" pos:end="27:37"><name pos:start="27:34" pos:end="27:37">pte0</name></expr></argument>, <argument pos:start="27:40" pos:end="27:43"><expr pos:start="27:40" pos:end="27:43"><name pos:start="27:40" pos:end="27:43">pte1</name></expr></argument>, <argument pos:start="27:46" pos:end="27:46"><expr pos:start="27:46" pos:end="27:46"><name pos:start="27:46" pos:end="27:46">h</name></expr></argument>, <argument pos:start="27:49" pos:end="27:50"><expr pos:start="27:49" pos:end="27:50"><name pos:start="27:49" pos:end="27:50">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="44:0">else

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

        <block pos:start="33:9" pos:end="44:0">{<block_content pos:start="35:13" pos:end="39:52">

            <expr_stmt pos:start="35:13" pos:end="35:44"><expr pos:start="35:13" pos:end="35:43"><name pos:start="35:13" pos:end="35:16">pte0</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:43"><name pos:start="35:20" pos:end="35:27">ldl_phys</name><argument_list pos:start="35:28" pos:end="35:43">(<argument pos:start="35:29" pos:end="35:42"><expr pos:start="35:29" pos:end="35:42"><name pos:start="35:29" pos:end="35:32">base</name> <operator pos:start="35:34" pos:end="35:34">+</operator> <operator pos:start="35:36" pos:end="35:36">(</operator><name pos:start="35:37" pos:end="35:37">i</name> <operator pos:start="35:39" pos:end="35:39">*</operator> <literal type="number" pos:start="35:41" pos:end="35:41">8</literal><operator pos:start="35:42" pos:end="35:42">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:49"><expr pos:start="37:13" pos:end="37:48"><name pos:start="37:13" pos:end="37:16">pte1</name> <operator pos:start="37:18" pos:end="37:18">=</operator>  <call pos:start="37:21" pos:end="37:48"><name pos:start="37:21" pos:end="37:28">ldl_phys</name><argument_list pos:start="37:29" pos:end="37:48">(<argument pos:start="37:30" pos:end="37:47"><expr pos:start="37:30" pos:end="37:47"><name pos:start="37:30" pos:end="37:33">base</name> <operator pos:start="37:35" pos:end="37:35">+</operator> <operator pos:start="37:37" pos:end="37:37">(</operator><name pos:start="37:38" pos:end="37:38">i</name> <operator pos:start="37:40" pos:end="37:40">*</operator> <literal type="number" pos:start="37:42" pos:end="37:42">8</literal><operator pos:start="37:43" pos:end="37:43">)</operator> <operator pos:start="37:45" pos:end="37:45">+</operator> <literal type="number" pos:start="37:47" pos:end="37:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:52"><expr pos:start="39:13" pos:end="39:51"><name pos:start="39:13" pos:end="39:13">r</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:51"><name pos:start="39:17" pos:end="39:27">pte32_check</name><argument_list pos:start="39:28" pos:end="39:51">(<argument pos:start="39:29" pos:end="39:31"><expr pos:start="39:29" pos:end="39:31"><name pos:start="39:29" pos:end="39:31">ctx</name></expr></argument>, <argument pos:start="39:34" pos:end="39:37"><expr pos:start="39:34" pos:end="39:37"><name pos:start="39:34" pos:end="39:37">pte0</name></expr></argument>, <argument pos:start="39:40" pos:end="39:43"><expr pos:start="39:40" pos:end="39:43"><name pos:start="39:40" pos:end="39:43">pte1</name></expr></argument>, <argument pos:start="39:46" pos:end="39:46"><expr pos:start="39:46" pos:end="39:46"><name pos:start="39:46" pos:end="39:46">h</name></expr></argument>, <argument pos:start="39:49" pos:end="39:50"><expr pos:start="39:49" pos:end="39:50"><name pos:start="39:49" pos:end="39:50">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:if pos:start="43:1" pos:end="43:23">#<cpp:directive pos:start="43:2" pos:end="43:3">if</cpp:directive> <expr pos:start="43:5" pos:end="43:23"><call pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:11">defined</name> <argument_list pos:start="43:13" pos:end="43:23">(<argument pos:start="43:14" pos:end="43:22"><expr pos:start="43:14" pos:end="43:22"><name pos:start="43:14" pos:end="43:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="45:9" pos:end="58:0"><if pos:start="45:9" pos:end="58:0">if <condition pos:start="45:12" pos:end="45:26">(<expr pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:20">loglevel</name> <operator pos:start="45:22" pos:end="45:23">!=</operator> <literal type="number" pos:start="45:25" pos:end="45:25">0</literal></expr>)</condition> <block pos:start="45:28" pos:end="58:0">{<block_content pos:start="47:13" pos:end="53:77">

            <expr_stmt pos:start="47:13" pos:end="53:77"><expr pos:start="47:13" pos:end="53:76"><call pos:start="47:13" pos:end="53:76"><name pos:start="47:13" pos:end="47:19">fprintf</name><argument_list pos:start="47:20" pos:end="53:76">(<argument pos:start="47:21" pos:end="47:27"><expr pos:start="47:21" pos:end="47:27"><name pos:start="47:21" pos:end="47:27">logfile</name></expr></argument>, <argument pos:start="47:30" pos:end="49:57"><expr pos:start="47:30" pos:end="49:57"><literal type="string" pos:start="47:30" pos:end="47:47">"Load pte from 0x"</literal> <name pos:start="47:49" pos:end="47:53">ADDRX</name> <literal type="string" pos:start="47:55" pos:end="47:62">" =&gt; 0x"</literal> <name pos:start="47:64" pos:end="47:68">ADDRX</name>

                    <literal type="string" pos:start="49:21" pos:end="49:25">" 0x"</literal> <name pos:start="49:27" pos:end="49:31">ADDRX</name> <literal type="string" pos:start="49:33" pos:end="49:46">" %d %d %d 0x"</literal> <name pos:start="49:48" pos:end="49:52">ADDRX</name> <literal type="string" pos:start="49:54" pos:end="49:57">"\n"</literal></expr></argument>,

                    <argument pos:start="51:21" pos:end="51:34"><expr pos:start="51:21" pos:end="51:34"><name pos:start="51:21" pos:end="51:24">base</name> <operator pos:start="51:26" pos:end="51:26">+</operator> <operator pos:start="51:28" pos:end="51:28">(</operator><name pos:start="51:29" pos:end="51:29">i</name> <operator pos:start="51:31" pos:end="51:31">*</operator> <literal type="number" pos:start="51:33" pos:end="51:33">8</literal><operator pos:start="51:34" pos:end="51:34">)</operator></expr></argument>, <argument pos:start="51:37" pos:end="51:40"><expr pos:start="51:37" pos:end="51:40"><name pos:start="51:37" pos:end="51:40">pte0</name></expr></argument>, <argument pos:start="51:43" pos:end="51:46"><expr pos:start="51:43" pos:end="51:46"><name pos:start="51:43" pos:end="51:46">pte1</name></expr></argument>,

                    <argument pos:start="53:21" pos:end="53:37"><expr pos:start="53:21" pos:end="53:37"><operator pos:start="53:21" pos:end="53:21">(</operator><name pos:start="53:22" pos:end="53:24">int</name><operator pos:start="53:25" pos:end="53:25">)</operator><operator pos:start="53:26" pos:end="53:26">(</operator><name pos:start="53:27" pos:end="53:30">pte0</name> <operator pos:start="53:32" pos:end="53:33">&gt;&gt;</operator> <literal type="number" pos:start="53:35" pos:end="53:36">31</literal><operator pos:start="53:37" pos:end="53:37">)</operator></expr></argument>, <argument pos:start="53:40" pos:end="53:40"><expr pos:start="53:40" pos:end="53:40"><name pos:start="53:40" pos:end="53:40">h</name></expr></argument>, <argument pos:start="53:43" pos:end="53:64"><expr pos:start="53:43" pos:end="53:64"><operator pos:start="53:43" pos:end="53:43">(</operator><name pos:start="53:44" pos:end="53:46">int</name><operator pos:start="53:47" pos:end="53:47">)</operator><operator pos:start="53:48" pos:end="53:48">(</operator><operator pos:start="53:49" pos:end="53:49">(</operator><name pos:start="53:50" pos:end="53:53">pte0</name> <operator pos:start="53:55" pos:end="53:56">&gt;&gt;</operator> <literal type="number" pos:start="53:58" pos:end="53:58">6</literal><operator pos:start="53:59" pos:end="53:59">)</operator> <operator pos:start="53:61" pos:end="53:61">&amp;</operator> <literal type="number" pos:start="53:63" pos:end="53:63">1</literal><operator pos:start="53:64" pos:end="53:64">)</operator></expr></argument>, <argument pos:start="53:67" pos:end="53:75"><expr pos:start="53:67" pos:end="53:75"><name pos:start="53:67" pos:end="53:75"><name pos:start="53:67" pos:end="53:69">ctx</name><operator pos:start="53:70" pos:end="53:71">-&gt;</operator><name pos:start="53:72" pos:end="53:75">ptem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

        <switch pos:start="59:9" pos:end="103:9">switch <condition pos:start="59:16" pos:end="59:18">(<expr pos:start="59:17" pos:end="59:17"><name pos:start="59:17" pos:end="59:17">r</name></expr>)</condition> <block pos:start="59:20" pos:end="103:9">{<block_content pos:start="61:9" pos:end="101:22">

        <case pos:start="61:9" pos:end="61:16">case <expr pos:start="61:14" pos:end="61:15"><operator pos:start="61:14" pos:end="61:14">-</operator><literal type="number" pos:start="61:15" pos:end="61:15">3</literal></expr>:</case>

            <comment type="block" pos:start="63:13" pos:end="63:35">/* PTE inconsistency */</comment>

            <return pos:start="65:13" pos:end="65:22">return <expr pos:start="65:20" pos:end="65:21"><operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</return>

        <case pos:start="67:9" pos:end="67:16">case <expr pos:start="67:14" pos:end="67:15"><operator pos:start="67:14" pos:end="67:14">-</operator><literal type="number" pos:start="67:15" pos:end="67:15">2</literal></expr>:</case>

            <comment type="block" pos:start="69:13" pos:end="69:34">/* Access violation */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:21"><expr pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <operator pos:start="71:19" pos:end="71:19">-</operator><literal type="number" pos:start="71:20" pos:end="71:20">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:21"><expr pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:16">good</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <name pos:start="73:20" pos:end="73:20">i</name></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:16">case <expr pos:start="77:14" pos:end="77:15"><operator pos:start="77:14" pos:end="77:14">-</operator><literal type="number" pos:start="77:15" pos:end="77:15">1</literal></expr>:</case>

        <default pos:start="79:9" pos:end="79:16">default:</default>

            <comment type="block" pos:start="81:13" pos:end="81:30">/* No PTE match */</comment>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        <case pos:start="85:9" pos:end="85:15">case <expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>:</case>

            <comment type="block" pos:start="87:13" pos:end="87:32">/* access granted */</comment>

            <comment type="block" pos:start="89:13" pos:end="95:15">/* XXX: we should go on looping to check all PTEs consistency

             *      but if we can speed-up the whole thing as the

             *      result would be undefined if PTEs are not consistent.

             */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:20"><expr pos:start="97:13" pos:end="97:19"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <literal type="number" pos:start="97:19" pos:end="97:19">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:21"><expr pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:16">good</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:20">i</name></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:22">goto <name pos:start="101:18" pos:end="101:21">done</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <if_stmt pos:start="107:5" pos:end="149:5"><if pos:start="107:5" pos:end="149:5">if <condition pos:start="107:8" pos:end="107:19">(<expr pos:start="107:9" pos:end="107:18"><name pos:start="107:9" pos:end="107:12">good</name> <operator pos:start="107:14" pos:end="107:15">!=</operator> <operator pos:start="107:17" pos:end="107:17">-</operator><literal type="number" pos:start="107:18" pos:end="107:18">1</literal></expr>)</condition> <block pos:start="107:21" pos:end="149:5">{<block_content pos:start="109:5" pos:end="147:9">

    <label pos:start="109:5" pos:end="112:0"><name pos:start="109:5" pos:end="109:8">done</name>:</label>

<cpp:if pos:start="111:1" pos:end="111:23">#<cpp:directive pos:start="111:2" pos:end="111:3">if</cpp:directive> <expr pos:start="111:5" pos:end="111:23"><call pos:start="111:5" pos:end="111:23"><name pos:start="111:5" pos:end="111:11">defined</name> <argument_list pos:start="111:13" pos:end="111:23">(<argument pos:start="111:14" pos:end="111:22"><expr pos:start="111:14" pos:end="111:22"><name pos:start="111:14" pos:end="111:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="113:9" pos:end="124:0"><if pos:start="113:9" pos:end="124:0">if <condition pos:start="113:12" pos:end="113:26">(<expr pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:20">loglevel</name> <operator pos:start="113:22" pos:end="113:23">!=</operator> <literal type="number" pos:start="113:25" pos:end="113:25">0</literal></expr>)</condition> <block pos:start="113:28" pos:end="124:0">{<block_content pos:start="115:13" pos:end="119:48">

            <expr_stmt pos:start="115:13" pos:end="119:48"><expr pos:start="115:13" pos:end="119:47"><call pos:start="115:13" pos:end="119:47"><name pos:start="115:13" pos:end="115:19">fprintf</name><argument_list pos:start="115:20" pos:end="119:47">(<argument pos:start="115:21" pos:end="115:27"><expr pos:start="115:21" pos:end="115:27"><name pos:start="115:21" pos:end="115:27">logfile</name></expr></argument>, <argument pos:start="115:30" pos:end="117:30"><expr pos:start="115:30" pos:end="117:30"><literal type="string" pos:start="115:30" pos:end="115:51">"found PTE at addr 0x"</literal> <name pos:start="115:53" pos:end="115:58">PADDRX</name> <literal type="string" pos:start="115:60" pos:end="115:74">" prot=0x%01x "</literal>

                    <literal type="string" pos:start="117:21" pos:end="117:30">"ret=%d\n"</literal></expr></argument>,

                    <argument pos:start="119:21" pos:end="119:30"><expr pos:start="119:21" pos:end="119:30"><name pos:start="119:21" pos:end="119:30"><name pos:start="119:21" pos:end="119:23">ctx</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:30">raddr</name></name></expr></argument>, <argument pos:start="119:33" pos:end="119:41"><expr pos:start="119:33" pos:end="119:41"><name pos:start="119:33" pos:end="119:41"><name pos:start="119:33" pos:end="119:35">ctx</name><operator pos:start="119:36" pos:end="119:37">-&gt;</operator><name pos:start="119:38" pos:end="119:41">prot</name></name></expr></argument>, <argument pos:start="119:44" pos:end="119:46"><expr pos:start="119:44" pos:end="119:46"><name pos:start="119:44" pos:end="119:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="125:9" pos:end="125:31">/* Update page flags */</comment>

        <expr_stmt pos:start="127:9" pos:end="127:26"><expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:12">pte1</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <name pos:start="127:16" pos:end="127:25"><name pos:start="127:16" pos:end="127:18">ctx</name><operator pos:start="127:19" pos:end="127:20">-&gt;</operator><name pos:start="127:21" pos:end="127:25">raddr</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="147:9"><if pos:start="129:9" pos:end="147:9">if <condition pos:start="129:12" pos:end="129:55">(<expr pos:start="129:13" pos:end="129:54"><call pos:start="129:13" pos:end="129:49"><name pos:start="129:13" pos:end="129:28">pte_update_flags</name><argument_list pos:start="129:29" pos:end="129:49">(<argument pos:start="129:30" pos:end="129:32"><expr pos:start="129:30" pos:end="129:32"><name pos:start="129:30" pos:end="129:32">ctx</name></expr></argument>, <argument pos:start="129:35" pos:end="129:39"><expr pos:start="129:35" pos:end="129:39"><operator pos:start="129:35" pos:end="129:35">&amp;</operator><name pos:start="129:36" pos:end="129:39">pte1</name></expr></argument>, <argument pos:start="129:42" pos:end="129:44"><expr pos:start="129:42" pos:end="129:44"><name pos:start="129:42" pos:end="129:44">ret</name></expr></argument>, <argument pos:start="129:47" pos:end="129:48"><expr pos:start="129:47" pos:end="129:48"><name pos:start="129:47" pos:end="129:48">rw</name></expr></argument>)</argument_list></call> <operator pos:start="129:51" pos:end="129:52">==</operator> <literal type="number" pos:start="129:54" pos:end="129:54">1</literal></expr>)</condition> <block pos:start="129:57" pos:end="147:9">{<block_content pos:start="133:13" pos:end="145:13">

<cpp:if pos:start="131:1" pos:end="131:25">#<cpp:directive pos:start="131:2" pos:end="131:3">if</cpp:directive> <expr pos:start="131:5" pos:end="131:25"><call pos:start="131:5" pos:end="131:25"><name pos:start="131:5" pos:end="131:11">defined</name><argument_list pos:start="131:12" pos:end="131:25">(<argument pos:start="131:13" pos:end="131:24"><expr pos:start="131:13" pos:end="131:24"><name pos:start="131:13" pos:end="131:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="133:13" pos:end="145:13"><if pos:start="133:13" pos:end="137:13">if <condition pos:start="133:16" pos:end="133:23">(<expr pos:start="133:17" pos:end="133:22"><name pos:start="133:17" pos:end="133:22">is_64b</name></expr>)</condition> <block pos:start="133:25" pos:end="137:13">{<block_content pos:start="135:17" pos:end="135:64">

                <expr_stmt pos:start="135:17" pos:end="135:64"><expr pos:start="135:17" pos:end="135:63"><call pos:start="135:17" pos:end="135:63"><name pos:start="135:17" pos:end="135:33">stq_phys_notdirty</name><argument_list pos:start="135:34" pos:end="135:63">(<argument pos:start="135:35" pos:end="135:56"><expr pos:start="135:35" pos:end="135:56"><name pos:start="135:35" pos:end="135:38">base</name> <operator pos:start="135:40" pos:end="135:40">+</operator> <operator pos:start="135:42" pos:end="135:42">(</operator><name pos:start="135:43" pos:end="135:46">good</name> <operator pos:start="135:48" pos:end="135:48">*</operator> <literal type="number" pos:start="135:50" pos:end="135:51">16</literal><operator pos:start="135:52" pos:end="135:52">)</operator> <operator pos:start="135:54" pos:end="135:54">+</operator> <literal type="number" pos:start="135:56" pos:end="135:56">8</literal></expr></argument>, <argument pos:start="135:59" pos:end="135:62"><expr pos:start="135:59" pos:end="135:62"><name pos:start="135:59" pos:end="135:62">pte1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="137:15" pos:end="145:13">else

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif>

            <block pos:start="141:13" pos:end="145:13">{<block_content pos:start="143:17" pos:end="143:63">

                <expr_stmt pos:start="143:17" pos:end="143:63"><expr pos:start="143:17" pos:end="143:62"><call pos:start="143:17" pos:end="143:62"><name pos:start="143:17" pos:end="143:33">stl_phys_notdirty</name><argument_list pos:start="143:34" pos:end="143:62">(<argument pos:start="143:35" pos:end="143:55"><expr pos:start="143:35" pos:end="143:55"><name pos:start="143:35" pos:end="143:38">base</name> <operator pos:start="143:40" pos:end="143:40">+</operator> <operator pos:start="143:42" pos:end="143:42">(</operator><name pos:start="143:43" pos:end="143:46">good</name> <operator pos:start="143:48" pos:end="143:48">*</operator> <literal type="number" pos:start="143:50" pos:end="143:50">8</literal><operator pos:start="143:51" pos:end="143:51">)</operator> <operator pos:start="143:53" pos:end="143:53">+</operator> <literal type="number" pos:start="143:55" pos:end="143:55">4</literal></expr></argument>, <argument pos:start="143:58" pos:end="143:61"><expr pos:start="143:58" pos:end="143:61"><name pos:start="143:58" pos:end="143:61">pte1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="153:5" pos:end="153:15">return <expr pos:start="153:12" pos:end="153:14"><name pos:start="153:12" pos:end="153:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
