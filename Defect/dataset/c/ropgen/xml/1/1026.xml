<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1026.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:34">colo_process_incoming_thread</name><parameter_list pos:start="1:35" pos:end="1:48">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="251:1">{<block_content pos:start="5:5" pos:end="249:16">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26">MigrationIncomingState</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:31">mis</name> <init pos:start="5:33" pos:end="5:40">= <expr pos:start="5:35" pos:end="5:40"><name pos:start="5:35" pos:end="5:40">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">QEMUFile</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">fb</name> <init pos:start="7:18" pos:end="7:23">= <expr pos:start="7:20" pos:end="7:23"><name pos:start="7:20" pos:end="7:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">QIOChannelBuffer</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:26">bioc</name> <init pos:start="9:28" pos:end="9:33">= <expr pos:start="9:30" pos:end="9:33"><name pos:start="9:30" pos:end="9:33">NULL</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="9:36" pos:end="9:68">/* Cache incoming device state */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:23">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:45"><expr pos:start="19:5" pos:end="21:44"><call pos:start="19:5" pos:end="21:44"><name pos:start="19:5" pos:end="19:21">migrate_set_state</name><argument_list pos:start="19:22" pos:end="21:44">(<argument pos:start="19:23" pos:end="19:33"><expr pos:start="19:23" pos:end="19:33"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:33"><name pos:start="19:24" pos:end="19:26">mis</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:33">state</name></name></expr></argument>, <argument pos:start="19:36" pos:end="19:58"><expr pos:start="19:36" pos:end="19:58"><name pos:start="19:36" pos:end="19:58">MIGRATION_STATUS_ACTIVE</name></expr></argument>,

                      <argument pos:start="21:23" pos:end="21:43"><expr pos:start="21:23" pos:end="21:43"><name pos:start="21:23" pos:end="21:43">MIGRATION_STATUS_COLO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:23">failover_init_state</name><argument_list pos:start="25:24" pos:end="25:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:69"><expr pos:start="29:5" pos:end="29:68"><name pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:7">mis</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:20">to_src_file</name></name> <operator pos:start="29:22" pos:end="29:22">=</operator> <call pos:start="29:24" pos:end="29:68"><name pos:start="29:24" pos:end="29:48">qemu_file_get_return_path</name><argument_list pos:start="29:49" pos:end="29:68">(<argument pos:start="29:50" pos:end="29:67"><expr pos:start="29:50" pos:end="29:67"><name pos:start="29:50" pos:end="29:67"><name pos:start="29:50" pos:end="29:52">mis</name><operator pos:start="29:53" pos:end="29:54">-&gt;</operator><name pos:start="29:55" pos:end="29:67">from_src_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:26">(<expr pos:start="31:9" pos:end="31:25"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:25"><name pos:start="31:10" pos:end="31:12">mis</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:25">to_src_file</name></name></expr>)</condition> <block pos:start="31:28" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:79"><expr pos:start="33:9" pos:end="33:78"><call pos:start="33:9" pos:end="33:78"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="33:78">(<argument pos:start="33:22" pos:end="33:77"><expr pos:start="33:22" pos:end="33:77"><literal type="string" pos:start="33:22" pos:end="33:77">"COLO incoming thread: Open QEMUFile to_src_file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="35:9" pos:end="35:17">goto <name pos:start="35:14" pos:end="35:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="39:5" pos:end="49:7">/*

     * Note: the communication between Primary side and Secondary side

     * should be sequential, we set the fd to unblocked in migration incoming

     * coroutine, and here we are in the COLO incoming thread, so it is ok to

     * set the fd back to blocked.

     */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:53"><expr pos:start="51:5" pos:end="51:52"><call pos:start="51:5" pos:end="51:52"><name pos:start="51:5" pos:end="51:26">qemu_file_set_blocking</name><argument_list pos:start="51:27" pos:end="51:52">(<argument pos:start="51:28" pos:end="51:45"><expr pos:start="51:28" pos:end="51:45"><name pos:start="51:28" pos:end="51:45"><name pos:start="51:28" pos:end="51:30">mis</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:45">from_src_file</name></name></expr></argument>, <argument pos:start="51:48" pos:end="51:51"><expr pos:start="51:48" pos:end="51:51"><name pos:start="51:48" pos:end="51:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:57"><expr pos:start="55:5" pos:end="55:56"><name pos:start="55:5" pos:end="55:8">bioc</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <call pos:start="55:12" pos:end="55:56"><name pos:start="55:12" pos:end="55:33">qio_channel_buffer_new</name><argument_list pos:start="55:34" pos:end="55:56">(<argument pos:start="55:35" pos:end="55:55"><expr pos:start="55:35" pos:end="55:55"><name pos:start="55:35" pos:end="55:55">COLO_BUFFER_BASE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:53"><expr pos:start="57:5" pos:end="57:52"><name pos:start="57:5" pos:end="57:6">fb</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <call pos:start="57:10" pos:end="57:52"><name pos:start="57:10" pos:end="57:33">qemu_fopen_channel_input</name><argument_list pos:start="57:34" pos:end="57:52">(<argument pos:start="57:35" pos:end="57:51"><expr pos:start="57:35" pos:end="57:51"><call pos:start="57:35" pos:end="57:51"><name pos:start="57:35" pos:end="57:45">QIO_CHANNEL</name><argument_list pos:start="57:46" pos:end="57:51">(<argument pos:start="57:47" pos:end="57:50"><expr pos:start="57:47" pos:end="57:50"><name pos:start="57:47" pos:end="57:50">bioc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:31"><expr pos:start="59:5" pos:end="59:30"><call pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:16">object_unref</name><argument_list pos:start="59:17" pos:end="59:30">(<argument pos:start="59:18" pos:end="59:29"><expr pos:start="59:18" pos:end="59:29"><call pos:start="59:18" pos:end="59:29"><name pos:start="59:18" pos:end="59:23">OBJECT</name><argument_list pos:start="59:24" pos:end="59:29">(<argument pos:start="59:25" pos:end="59:28"><expr pos:start="59:25" pos:end="59:28"><name pos:start="59:25" pos:end="59:28">bioc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="65:34"><expr pos:start="63:5" pos:end="65:33"><call pos:start="63:5" pos:end="65:33"><name pos:start="63:5" pos:end="63:21">colo_send_message</name><argument_list pos:start="63:22" pos:end="65:33">(<argument pos:start="63:23" pos:end="63:38"><expr pos:start="63:23" pos:end="63:38"><name pos:start="63:23" pos:end="63:38"><name pos:start="63:23" pos:end="63:25">mis</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:38">to_src_file</name></name></expr></argument>, <argument pos:start="63:41" pos:end="63:69"><expr pos:start="63:41" pos:end="63:69"><name pos:start="63:41" pos:end="63:69">COLO_MESSAGE_CHECKPOINT_READY</name></expr></argument>,

                      <argument pos:start="65:23" pos:end="65:32"><expr pos:start="65:23" pos:end="65:32"><operator pos:start="65:23" pos:end="65:23">&amp;</operator><name pos:start="65:24" pos:end="65:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:18">(<expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:17">local_err</name></expr>)</condition> <block pos:start="67:20" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:17">

        <goto pos:start="69:9" pos:end="69:17">goto <name pos:start="69:14" pos:end="69:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <while pos:start="75:5" pos:end="215:5">while <condition pos:start="75:11" pos:end="75:47">(<expr pos:start="75:12" pos:end="75:46"><name pos:start="75:12" pos:end="75:21"><name pos:start="75:12" pos:end="75:14">mis</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:21">state</name></name> <operator pos:start="75:23" pos:end="75:24">==</operator> <name pos:start="75:26" pos:end="75:46">MIGRATION_STATUS_COLO</name></expr>)</condition> <block pos:start="75:49" pos:end="215:5">{<block_content pos:start="77:9" pos:end="213:9">

        <decl_stmt pos:start="77:9" pos:end="77:20"><decl pos:start="77:9" pos:end="77:19"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:19">request</name></decl>;</decl_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:75"><expr pos:start="81:9" pos:end="81:74"><call pos:start="81:9" pos:end="81:74"><name pos:start="81:9" pos:end="81:32">colo_wait_handle_message</name><argument_list pos:start="81:33" pos:end="81:74">(<argument pos:start="81:34" pos:end="81:51"><expr pos:start="81:34" pos:end="81:51"><name pos:start="81:34" pos:end="81:51"><name pos:start="81:34" pos:end="81:36">mis</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:51">from_src_file</name></name></expr></argument>, <argument pos:start="81:54" pos:end="81:61"><expr pos:start="81:54" pos:end="81:61"><operator pos:start="81:54" pos:end="81:54">&amp;</operator><name pos:start="81:55" pos:end="81:61">request</name></expr></argument>, <argument pos:start="81:64" pos:end="81:73"><expr pos:start="81:64" pos:end="81:73"><operator pos:start="81:64" pos:end="81:64">&amp;</operator><name pos:start="81:65" pos:end="81:73">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:22">(<expr pos:start="83:13" pos:end="83:21"><name pos:start="83:13" pos:end="83:21">local_err</name></expr>)</condition> <block pos:start="83:24" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:21">

            <goto pos:start="85:13" pos:end="85:21">goto <name pos:start="85:18" pos:end="85:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:24"><expr pos:start="89:9" pos:end="89:23"><call pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:14">assert</name><argument_list pos:start="89:15" pos:end="89:23">(<argument pos:start="89:16" pos:end="89:22"><expr pos:start="89:16" pos:end="89:22"><name pos:start="89:16" pos:end="89:22">request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:57">(<expr pos:start="91:13" pos:end="91:56"><call pos:start="91:13" pos:end="91:32"><name pos:start="91:13" pos:end="91:30">failover_get_state</name><argument_list pos:start="91:31" pos:end="91:32">()</argument_list></call> <operator pos:start="91:34" pos:end="91:35">!=</operator> <name pos:start="91:37" pos:end="91:56">FAILOVER_STATUS_NONE</name></expr>)</condition> <block pos:start="91:59" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:21">

            <expr_stmt pos:start="93:13" pos:end="93:45"><expr pos:start="93:13" pos:end="93:44"><call pos:start="93:13" pos:end="93:44"><name pos:start="93:13" pos:end="93:24">error_report</name><argument_list pos:start="93:25" pos:end="93:44">(<argument pos:start="93:26" pos:end="93:43"><expr pos:start="93:26" pos:end="93:43"><literal type="string" pos:start="93:26" pos:end="93:43">"failover request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="95:13" pos:end="95:21">goto <name pos:start="95:18" pos:end="95:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="101:9" pos:end="101:69">/* FIXME: This is unnecessary for periodic checkpoint mode */</comment>

        <expr_stmt pos:start="103:9" pos:end="105:33"><expr pos:start="103:9" pos:end="105:32"><call pos:start="103:9" pos:end="105:32"><name pos:start="103:9" pos:end="103:25">colo_send_message</name><argument_list pos:start="103:26" pos:end="105:32">(<argument pos:start="103:27" pos:end="103:42"><expr pos:start="103:27" pos:end="103:42"><name pos:start="103:27" pos:end="103:42"><name pos:start="103:27" pos:end="103:29">mis</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:42">to_src_file</name></name></expr></argument>, <argument pos:start="103:45" pos:end="103:73"><expr pos:start="103:45" pos:end="103:73"><name pos:start="103:45" pos:end="103:73">COLO_MESSAGE_CHECKPOINT_REPLY</name></expr></argument>,

                     <argument pos:start="105:22" pos:end="105:31"><expr pos:start="105:22" pos:end="105:31"><operator pos:start="105:22" pos:end="105:22">&amp;</operator><name pos:start="105:23" pos:end="105:31">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="111:9"><if pos:start="107:9" pos:end="111:9">if <condition pos:start="107:12" pos:end="107:22">(<expr pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:21">local_err</name></expr>)</condition> <block pos:start="107:24" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:21">

            <goto pos:start="109:13" pos:end="109:21">goto <name pos:start="109:18" pos:end="109:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="117:66"><expr pos:start="115:9" pos:end="117:65"><call pos:start="115:9" pos:end="117:65"><name pos:start="115:9" pos:end="115:34">colo_receive_check_message</name><argument_list pos:start="115:35" pos:end="117:65">(<argument pos:start="115:36" pos:end="115:53"><expr pos:start="115:36" pos:end="115:53"><name pos:start="115:36" pos:end="115:53"><name pos:start="115:36" pos:end="115:38">mis</name><operator pos:start="115:39" pos:end="115:40">-&gt;</operator><name pos:start="115:41" pos:end="115:53">from_src_file</name></name></expr></argument>,

                           <argument pos:start="117:28" pos:end="117:52"><expr pos:start="117:28" pos:end="117:52"><name pos:start="117:28" pos:end="117:52">COLO_MESSAGE_VMSTATE_SEND</name></expr></argument>, <argument pos:start="117:55" pos:end="117:64"><expr pos:start="117:55" pos:end="117:64"><operator pos:start="117:55" pos:end="117:55">&amp;</operator><name pos:start="117:56" pos:end="117:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:22">(<expr pos:start="119:13" pos:end="119:21"><name pos:start="119:13" pos:end="119:21">local_err</name></expr>)</condition> <block pos:start="119:24" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:21">

            <goto pos:start="121:13" pos:end="121:21">goto <name pos:start="121:18" pos:end="121:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="129:72"><expr pos:start="127:9" pos:end="129:71"><name pos:start="127:9" pos:end="127:13">value</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <call pos:start="127:17" pos:end="129:71"><name pos:start="127:17" pos:end="127:42">colo_receive_message_value</name><argument_list pos:start="127:43" pos:end="129:71">(<argument pos:start="127:44" pos:end="127:61"><expr pos:start="127:44" pos:end="127:61"><name pos:start="127:44" pos:end="127:61"><name pos:start="127:44" pos:end="127:46">mis</name><operator pos:start="127:47" pos:end="127:48">-&gt;</operator><name pos:start="127:49" pos:end="127:61">from_src_file</name></name></expr></argument>,

                                 <argument pos:start="129:34" pos:end="129:58"><expr pos:start="129:34" pos:end="129:58"><name pos:start="129:34" pos:end="129:58">COLO_MESSAGE_VMSTATE_SIZE</name></expr></argument>, <argument pos:start="129:61" pos:end="129:70"><expr pos:start="129:61" pos:end="129:70"><operator pos:start="129:61" pos:end="129:61">&amp;</operator><name pos:start="129:62" pos:end="129:70">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="135:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:22">(<expr pos:start="131:13" pos:end="131:21"><name pos:start="131:13" pos:end="131:21">local_err</name></expr>)</condition> <block pos:start="131:24" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:21">

            <goto pos:start="133:13" pos:end="133:21">goto <name pos:start="133:18" pos:end="133:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="139:9" pos:end="147:11">/*

         * Read VM device state data into channel buffer,

         * It's better to re-use the memory allocated.

         * Here we need to handle the channel buffer directly.

         */</comment>

        <if_stmt pos:start="149:9" pos:end="155:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:35">(<expr pos:start="149:13" pos:end="149:34"><name pos:start="149:13" pos:end="149:17">value</name> <operator pos:start="149:19" pos:end="149:19">&gt;</operator> <name pos:start="149:21" pos:end="149:34"><name pos:start="149:21" pos:end="149:24">bioc</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:34">capacity</name></name></expr>)</condition> <block pos:start="149:37" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:63">

            <expr_stmt pos:start="151:13" pos:end="151:35"><expr pos:start="151:13" pos:end="151:34"><name pos:start="151:13" pos:end="151:26"><name pos:start="151:13" pos:end="151:16">bioc</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:26">capacity</name></name> <operator pos:start="151:28" pos:end="151:28">=</operator> <name pos:start="151:30" pos:end="151:34">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:63"><expr pos:start="153:13" pos:end="153:62"><name pos:start="153:13" pos:end="153:22"><name pos:start="153:13" pos:end="153:16">bioc</name><operator pos:start="153:17" pos:end="153:18">-&gt;</operator><name pos:start="153:19" pos:end="153:22">data</name></name> <operator pos:start="153:24" pos:end="153:24">=</operator> <call pos:start="153:26" pos:end="153:62"><name pos:start="153:26" pos:end="153:34">g_realloc</name><argument_list pos:start="153:35" pos:end="153:62">(<argument pos:start="153:36" pos:end="153:45"><expr pos:start="153:36" pos:end="153:45"><name pos:start="153:36" pos:end="153:45"><name pos:start="153:36" pos:end="153:39">bioc</name><operator pos:start="153:40" pos:end="153:41">-&gt;</operator><name pos:start="153:42" pos:end="153:45">data</name></name></expr></argument>, <argument pos:start="153:48" pos:end="153:61"><expr pos:start="153:48" pos:end="153:61"><name pos:start="153:48" pos:end="153:61"><name pos:start="153:48" pos:end="153:51">bioc</name><operator pos:start="153:52" pos:end="153:53">-&gt;</operator><name pos:start="153:54" pos:end="153:61">capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:76"><expr pos:start="157:9" pos:end="157:75"><name pos:start="157:9" pos:end="157:18">total_size</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <call pos:start="157:22" pos:end="157:75"><name pos:start="157:22" pos:end="157:36">qemu_get_buffer</name><argument_list pos:start="157:37" pos:end="157:75">(<argument pos:start="157:38" pos:end="157:55"><expr pos:start="157:38" pos:end="157:55"><name pos:start="157:38" pos:end="157:55"><name pos:start="157:38" pos:end="157:40">mis</name><operator pos:start="157:41" pos:end="157:42">-&gt;</operator><name pos:start="157:43" pos:end="157:55">from_src_file</name></name></expr></argument>, <argument pos:start="157:58" pos:end="157:67"><expr pos:start="157:58" pos:end="157:67"><name pos:start="157:58" pos:end="157:67"><name pos:start="157:58" pos:end="157:61">bioc</name><operator pos:start="157:62" pos:end="157:63">-&gt;</operator><name pos:start="157:64" pos:end="157:67">data</name></name></expr></argument>, <argument pos:start="157:70" pos:end="157:74"><expr pos:start="157:70" pos:end="157:74"><name pos:start="157:70" pos:end="157:74">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="167:9"><if pos:start="159:9" pos:end="167:9">if <condition pos:start="159:12" pos:end="159:32">(<expr pos:start="159:13" pos:end="159:31"><name pos:start="159:13" pos:end="159:22">total_size</name> <operator pos:start="159:24" pos:end="159:25">!=</operator> <name pos:start="159:27" pos:end="159:31">value</name></expr>)</condition> <block pos:start="159:34" pos:end="167:9">{<block_content pos:start="161:13" pos:end="165:21">

            <expr_stmt pos:start="161:13" pos:end="163:56"><expr pos:start="161:13" pos:end="163:55"><call pos:start="161:13" pos:end="163:55"><name pos:start="161:13" pos:end="161:24">error_report</name><argument_list pos:start="161:25" pos:end="163:55">(<argument pos:start="161:26" pos:end="163:35"><expr pos:start="161:26" pos:end="163:35"><literal type="string" pos:start="161:26" pos:end="161:32">"Got %"</literal> <name pos:start="161:34" pos:end="161:39">PRIu64</name> <literal type="string" pos:start="161:41" pos:end="161:75">" VMState data, less than expected"</literal>

                        <literal type="string" pos:start="163:25" pos:end="163:28">" %"</literal> <name pos:start="163:30" pos:end="163:35">PRIu64</name></expr></argument>, <argument pos:start="163:38" pos:end="163:47"><expr pos:start="163:38" pos:end="163:47"><name pos:start="163:38" pos:end="163:47">total_size</name></expr></argument>, <argument pos:start="163:50" pos:end="163:54"><expr pos:start="163:50" pos:end="163:54"><name pos:start="163:50" pos:end="163:54">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="165:13" pos:end="165:21">goto <name pos:start="165:18" pos:end="165:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:33"><expr pos:start="169:9" pos:end="169:32"><name pos:start="169:9" pos:end="169:19"><name pos:start="169:9" pos:end="169:12">bioc</name><operator pos:start="169:13" pos:end="169:14">-&gt;</operator><name pos:start="169:15" pos:end="169:19">usage</name></name> <operator pos:start="169:21" pos:end="169:21">=</operator> <name pos:start="169:23" pos:end="169:32">total_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:59"><expr pos:start="171:9" pos:end="171:58"><call pos:start="171:9" pos:end="171:58"><name pos:start="171:9" pos:end="171:27">qio_channel_io_seek</name><argument_list pos:start="171:28" pos:end="171:58">(<argument pos:start="171:29" pos:end="171:45"><expr pos:start="171:29" pos:end="171:45"><call pos:start="171:29" pos:end="171:45"><name pos:start="171:29" pos:end="171:39">QIO_CHANNEL</name><argument_list pos:start="171:40" pos:end="171:45">(<argument pos:start="171:41" pos:end="171:44"><expr pos:start="171:41" pos:end="171:44"><name pos:start="171:41" pos:end="171:44">bioc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:48" pos:end="171:48"><expr pos:start="171:48" pos:end="171:48"><literal type="number" pos:start="171:48" pos:end="171:48">0</literal></expr></argument>, <argument pos:start="171:51" pos:end="171:51"><expr pos:start="171:51" pos:end="171:51"><literal type="number" pos:start="171:51" pos:end="171:51">0</literal></expr></argument>, <argument pos:start="171:54" pos:end="171:57"><expr pos:start="171:54" pos:end="171:57"><name pos:start="171:54" pos:end="171:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="177:33"><expr pos:start="175:9" pos:end="177:32"><call pos:start="175:9" pos:end="177:32"><name pos:start="175:9" pos:end="175:25">colo_send_message</name><argument_list pos:start="175:26" pos:end="177:32">(<argument pos:start="175:27" pos:end="175:42"><expr pos:start="175:27" pos:end="175:42"><name pos:start="175:27" pos:end="175:42"><name pos:start="175:27" pos:end="175:29">mis</name><operator pos:start="175:30" pos:end="175:31">-&gt;</operator><name pos:start="175:32" pos:end="175:42">to_src_file</name></name></expr></argument>, <argument pos:start="175:45" pos:end="175:73"><expr pos:start="175:45" pos:end="175:73"><name pos:start="175:45" pos:end="175:73">COLO_MESSAGE_VMSTATE_RECEIVED</name></expr></argument>,

                     <argument pos:start="177:22" pos:end="177:31"><expr pos:start="177:22" pos:end="177:31"><operator pos:start="177:22" pos:end="177:22">&amp;</operator><name pos:start="177:23" pos:end="177:31">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="179:9" pos:end="183:9"><if pos:start="179:9" pos:end="183:9">if <condition pos:start="179:12" pos:end="179:22">(<expr pos:start="179:13" pos:end="179:21"><name pos:start="179:13" pos:end="179:21">local_err</name></expr>)</condition> <block pos:start="179:24" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:21">

            <goto pos:start="181:13" pos:end="181:21">goto <name pos:start="181:18" pos:end="181:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:35"><expr pos:start="187:9" pos:end="187:34"><call pos:start="187:9" pos:end="187:34"><name pos:start="187:9" pos:end="187:32">qemu_mutex_lock_iothread</name><argument_list pos:start="187:33" pos:end="187:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:42"><expr pos:start="189:9" pos:end="189:41"><call pos:start="189:9" pos:end="189:41"><name pos:start="189:9" pos:end="189:25">qemu_system_reset</name><argument_list pos:start="189:26" pos:end="189:41">(<argument pos:start="189:27" pos:end="189:40"><expr pos:start="189:27" pos:end="189:40"><name pos:start="189:27" pos:end="189:40">VMRESET_SILENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="199:9"><if pos:start="191:9" pos:end="199:9">if <condition pos:start="191:12" pos:end="191:38">(<expr pos:start="191:13" pos:end="191:37"><call pos:start="191:13" pos:end="191:33"><name pos:start="191:13" pos:end="191:29">qemu_loadvm_state</name><argument_list pos:start="191:30" pos:end="191:33">(<argument pos:start="191:31" pos:end="191:32"><expr pos:start="191:31" pos:end="191:32"><name pos:start="191:31" pos:end="191:32">fb</name></expr></argument>)</argument_list></call> <operator pos:start="191:35" pos:end="191:35">&lt;</operator> <literal type="number" pos:start="191:37" pos:end="191:37">0</literal></expr>)</condition> <block pos:start="191:40" pos:end="199:9">{<block_content pos:start="193:13" pos:end="197:21">

            <expr_stmt pos:start="193:13" pos:end="193:48"><expr pos:start="193:13" pos:end="193:47"><call pos:start="193:13" pos:end="193:47"><name pos:start="193:13" pos:end="193:24">error_report</name><argument_list pos:start="193:25" pos:end="193:47">(<argument pos:start="193:26" pos:end="193:46"><expr pos:start="193:26" pos:end="193:46"><literal type="string" pos:start="193:26" pos:end="193:46">"COLO: loadvm failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:41"><expr pos:start="195:13" pos:end="195:40"><call pos:start="195:13" pos:end="195:40"><name pos:start="195:13" pos:end="195:38">qemu_mutex_unlock_iothread</name><argument_list pos:start="195:39" pos:end="195:40">()</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="197:13" pos:end="197:21">goto <name pos:start="197:18" pos:end="197:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:37"><expr pos:start="201:9" pos:end="201:36"><call pos:start="201:9" pos:end="201:36"><name pos:start="201:9" pos:end="201:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="201:35" pos:end="201:36">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="205:9" pos:end="207:33"><expr pos:start="205:9" pos:end="207:32"><call pos:start="205:9" pos:end="207:32"><name pos:start="205:9" pos:end="205:25">colo_send_message</name><argument_list pos:start="205:26" pos:end="207:32">(<argument pos:start="205:27" pos:end="205:42"><expr pos:start="205:27" pos:end="205:42"><name pos:start="205:27" pos:end="205:42"><name pos:start="205:27" pos:end="205:29">mis</name><operator pos:start="205:30" pos:end="205:31">-&gt;</operator><name pos:start="205:32" pos:end="205:42">to_src_file</name></name></expr></argument>, <argument pos:start="205:45" pos:end="205:71"><expr pos:start="205:45" pos:end="205:71"><name pos:start="205:45" pos:end="205:71">COLO_MESSAGE_VMSTATE_LOADED</name></expr></argument>,

                     <argument pos:start="207:22" pos:end="207:31"><expr pos:start="207:22" pos:end="207:31"><operator pos:start="207:22" pos:end="207:22">&amp;</operator><name pos:start="207:23" pos:end="207:31">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="213:9"><if pos:start="209:9" pos:end="213:9">if <condition pos:start="209:12" pos:end="209:22">(<expr pos:start="209:13" pos:end="209:21"><name pos:start="209:13" pos:end="209:21">local_err</name></expr>)</condition> <block pos:start="209:24" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:21">

            <goto pos:start="211:13" pos:end="211:21">goto <name pos:start="211:18" pos:end="211:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



<label pos:start="219:1" pos:end="219:4"><name pos:start="219:1" pos:end="219:3">out</name>:</label>

    <comment type="block" pos:start="221:5" pos:end="221:67">/* Throw the unreported error message after exited from loop */</comment>

    <if_stmt pos:start="223:5" pos:end="227:5"><if pos:start="223:5" pos:end="227:5">if <condition pos:start="223:8" pos:end="223:18">(<expr pos:start="223:9" pos:end="223:17"><name pos:start="223:9" pos:end="223:17">local_err</name></expr>)</condition> <block pos:start="223:20" pos:end="227:5">{<block_content pos:start="225:9" pos:end="225:36">

        <expr_stmt pos:start="225:9" pos:end="225:36"><expr pos:start="225:9" pos:end="225:35"><call pos:start="225:9" pos:end="225:35"><name pos:start="225:9" pos:end="225:24">error_report_err</name><argument_list pos:start="225:25" pos:end="225:35">(<argument pos:start="225:26" pos:end="225:34"><expr pos:start="225:26" pos:end="225:34"><name pos:start="225:26" pos:end="225:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="231:5" pos:end="235:5"><if pos:start="231:5" pos:end="235:5">if <condition pos:start="231:8" pos:end="231:11">(<expr pos:start="231:9" pos:end="231:10"><name pos:start="231:9" pos:end="231:10">fb</name></expr>)</condition> <block pos:start="231:13" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:24">

        <expr_stmt pos:start="233:9" pos:end="233:24"><expr pos:start="233:9" pos:end="233:23"><call pos:start="233:9" pos:end="233:23"><name pos:start="233:9" pos:end="233:19">qemu_fclose</name><argument_list pos:start="233:20" pos:end="233:23">(<argument pos:start="233:21" pos:end="233:22"><expr pos:start="233:21" pos:end="233:22"><name pos:start="233:21" pos:end="233:22">fb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="243:5"><if pos:start="239:5" pos:end="243:5">if <condition pos:start="239:8" pos:end="239:25">(<expr pos:start="239:9" pos:end="239:24"><name pos:start="239:9" pos:end="239:24"><name pos:start="239:9" pos:end="239:11">mis</name><operator pos:start="239:12" pos:end="239:13">-&gt;</operator><name pos:start="239:14" pos:end="239:24">to_src_file</name></name></expr>)</condition> <block pos:start="239:27" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:38">

        <expr_stmt pos:start="241:9" pos:end="241:38"><expr pos:start="241:9" pos:end="241:37"><call pos:start="241:9" pos:end="241:37"><name pos:start="241:9" pos:end="241:19">qemu_fclose</name><argument_list pos:start="241:20" pos:end="241:37">(<argument pos:start="241:21" pos:end="241:36"><expr pos:start="241:21" pos:end="241:36"><name pos:start="241:21" pos:end="241:36"><name pos:start="241:21" pos:end="241:23">mis</name><operator pos:start="241:24" pos:end="241:25">-&gt;</operator><name pos:start="241:26" pos:end="241:36">to_src_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:35"><expr pos:start="245:5" pos:end="245:34"><call pos:start="245:5" pos:end="245:34"><name pos:start="245:5" pos:end="245:32">migration_incoming_exit_colo</name><argument_list pos:start="245:33" pos:end="245:34">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="249:5" pos:end="249:16">return <expr pos:start="249:12" pos:end="249:15"><name pos:start="249:12" pos:end="249:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
