<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/376.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">http_receive_data</name><parameter_list pos:start="1:29" pos:end="1:44">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:40">HTTPContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">c</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:14">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">HTTPContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">c1</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="121:5"><if pos:start="11:5" pos:end="121:5">if <condition pos:start="11:8" pos:end="11:39">(<expr pos:start="11:9" pos:end="11:38"><name pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:9">c</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:21">buffer_ptr</name></name> <operator pos:start="11:23" pos:end="11:24">&gt;=</operator> <name pos:start="11:26" pos:end="11:38"><name pos:start="11:26" pos:end="11:26">c</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:38">buffer_end</name></name></expr>)</condition> <block pos:start="11:41" pos:end="121:5">{<block_content pos:start="13:9" pos:end="119:34">

        <decl_stmt pos:start="13:9" pos:end="13:35"><decl pos:start="13:9" pos:end="13:34"><type pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:16">FFStream</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:22">feed</name> <init pos:start="13:24" pos:end="13:34">= <expr pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:34"><name pos:start="13:26" pos:end="13:26">c</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:34">stream</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="15:9" pos:end="17:23">/* a packet has been received : write it in the store, except

           if header */</comment>

        <if_stmt pos:start="19:9" pos:end="117:9"><if pos:start="19:9" pos:end="71:9">if <condition pos:start="19:12" pos:end="19:44">(<expr pos:start="19:13" pos:end="19:43"><name pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:13">c</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:25">data_count</name></name> <operator pos:start="19:27" pos:end="19:27">&gt;</operator> <name pos:start="19:29" pos:end="19:43">FFM_PACKET_SIZE</name></expr>)</condition> <block pos:start="19:46" pos:end="71:9">{<block_content pos:start="27:13" pos:end="69:13">

            

            <comment type="line" pos:start="23:13" pos:end="23:108">//            printf("writing pos=0x%Lx size=0x%Lx\n", feed-&gt;feed_write_index, feed-&gt;feed_size);</comment>

            <comment type="block" pos:start="25:13" pos:end="25:45">/* XXX: use llseek or url_seek */</comment>

            <expr_stmt pos:start="27:13" pos:end="27:64"><expr pos:start="27:13" pos:end="27:63"><call pos:start="27:13" pos:end="27:63"><name pos:start="27:13" pos:end="27:17">lseek</name><argument_list pos:start="27:18" pos:end="27:63">(<argument pos:start="27:19" pos:end="27:28"><expr pos:start="27:19" pos:end="27:28"><name pos:start="27:19" pos:end="27:28"><name pos:start="27:19" pos:end="27:19">c</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:28">feed_fd</name></name></expr></argument>, <argument pos:start="27:31" pos:end="27:52"><expr pos:start="27:31" pos:end="27:52"><name pos:start="27:31" pos:end="27:52"><name pos:start="27:31" pos:end="27:34">feed</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:52">feed_write_index</name></name></expr></argument>, <argument pos:start="27:55" pos:end="27:62"><expr pos:start="27:55" pos:end="27:62"><name pos:start="27:55" pos:end="27:62">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:58"><expr pos:start="29:13" pos:end="29:57"><call pos:start="29:13" pos:end="29:57"><name pos:start="29:13" pos:end="29:17">write</name><argument_list pos:start="29:18" pos:end="29:57">(<argument pos:start="29:19" pos:end="29:28"><expr pos:start="29:19" pos:end="29:28"><name pos:start="29:19" pos:end="29:28"><name pos:start="29:19" pos:end="29:19">c</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:28">feed_fd</name></name></expr></argument>, <argument pos:start="29:31" pos:end="29:39"><expr pos:start="29:31" pos:end="29:39"><name pos:start="29:31" pos:end="29:39"><name pos:start="29:31" pos:end="29:31">c</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:39">buffer</name></name></expr></argument>, <argument pos:start="29:42" pos:end="29:56"><expr pos:start="29:42" pos:end="29:56"><name pos:start="29:42" pos:end="29:56">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="33:13" pos:end="33:54"><expr pos:start="33:13" pos:end="33:53"><name pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:16">feed</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:34">feed_write_index</name></name> <operator pos:start="33:36" pos:end="33:37">+=</operator> <name pos:start="33:39" pos:end="33:53">FFM_PACKET_SIZE</name></expr>;</expr_stmt>

            <comment type="block" pos:start="35:13" pos:end="35:34">/* update file size */</comment>

            <if_stmt pos:start="37:13" pos:end="39:57"><if pos:start="37:13" pos:end="39:57">if <condition pos:start="37:16" pos:end="37:62">(<expr pos:start="37:17" pos:end="37:61"><name pos:start="37:17" pos:end="37:38"><name pos:start="37:17" pos:end="37:20">feed</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:38">feed_write_index</name></name> <operator pos:start="37:40" pos:end="37:40">&gt;</operator> <name pos:start="37:42" pos:end="37:61"><name pos:start="37:42" pos:end="37:42">c</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:50">stream</name><operator pos:start="37:51" pos:end="37:52">-&gt;</operator><name pos:start="37:53" pos:end="37:61">feed_size</name></name></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:57"><block_content pos:start="39:17" pos:end="39:57">

                <expr_stmt pos:start="39:17" pos:end="39:57"><expr pos:start="39:17" pos:end="39:56"><name pos:start="39:17" pos:end="39:31"><name pos:start="39:17" pos:end="39:20">feed</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:31">feed_size</name></name> <operator pos:start="39:33" pos:end="39:33">=</operator> <name pos:start="39:35" pos:end="39:56"><name pos:start="39:35" pos:end="39:38">feed</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:56">feed_write_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="43:13" pos:end="43:61">/* handle wrap around if max file size reached */</comment>

            <if_stmt pos:start="45:13" pos:end="47:57"><if pos:start="45:13" pos:end="47:57">if <condition pos:start="45:16" pos:end="45:67">(<expr pos:start="45:17" pos:end="45:66"><name pos:start="45:17" pos:end="45:38"><name pos:start="45:17" pos:end="45:20">feed</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:38">feed_write_index</name></name> <operator pos:start="45:40" pos:end="45:41">&gt;=</operator> <name pos:start="45:43" pos:end="45:66"><name pos:start="45:43" pos:end="45:43">c</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:51">stream</name><operator pos:start="45:52" pos:end="45:53">-&gt;</operator><name pos:start="45:54" pos:end="45:66">feed_max_size</name></name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:57"><block_content pos:start="47:17" pos:end="47:57">

                <expr_stmt pos:start="47:17" pos:end="47:57"><expr pos:start="47:17" pos:end="47:56"><name pos:start="47:17" pos:end="47:38"><name pos:start="47:17" pos:end="47:20">feed</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:38">feed_write_index</name></name> <operator pos:start="47:40" pos:end="47:40">=</operator> <name pos:start="47:42" pos:end="47:56">FFM_PACKET_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="51:13" pos:end="51:29">/* write index */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:70"><expr pos:start="53:13" pos:end="53:69"><call pos:start="53:13" pos:end="53:69"><name pos:start="53:13" pos:end="53:33">ffm_write_write_index</name><argument_list pos:start="53:34" pos:end="53:69">(<argument pos:start="53:35" pos:end="53:44"><expr pos:start="53:35" pos:end="53:44"><name pos:start="53:35" pos:end="53:44"><name pos:start="53:35" pos:end="53:35">c</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:44">feed_fd</name></name></expr></argument>, <argument pos:start="53:47" pos:end="53:68"><expr pos:start="53:47" pos:end="53:68"><name pos:start="53:47" pos:end="53:68"><name pos:start="53:47" pos:end="53:50">feed</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:68">feed_write_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="57:13" pos:end="57:49">/* wake up any waiting connections */</comment>

            <for pos:start="59:13" pos:end="69:13">for<control pos:start="59:16" pos:end="59:63">(<init pos:start="59:17" pos:end="59:36"><expr pos:start="59:17" pos:end="59:35"><name pos:start="59:17" pos:end="59:18">c1</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <name pos:start="59:22" pos:end="59:35">first_http_ctx</name></expr>;</init> <condition pos:start="59:38" pos:end="59:48"><expr pos:start="59:38" pos:end="59:47"><name pos:start="59:38" pos:end="59:39">c1</name> <operator pos:start="59:41" pos:end="59:42">!=</operator> <name pos:start="59:44" pos:end="59:47">NULL</name></expr>;</condition> <incr pos:start="59:50" pos:end="59:62"><expr pos:start="59:50" pos:end="59:62"><name pos:start="59:50" pos:end="59:51">c1</name> <operator pos:start="59:53" pos:end="59:53">=</operator> <name pos:start="59:55" pos:end="59:62"><name pos:start="59:55" pos:end="59:56">c1</name><operator pos:start="59:57" pos:end="59:58">-&gt;</operator><name pos:start="59:59" pos:end="59:62">next</name></name></expr></incr>)</control> <block pos:start="59:65" pos:end="69:13">{<block_content pos:start="61:17" pos:end="67:17">

                <if_stmt pos:start="61:17" pos:end="67:17"><if pos:start="61:17" pos:end="67:17">if <condition pos:start="61:20" pos:end="63:56">(<expr pos:start="61:21" pos:end="63:55"><name pos:start="61:21" pos:end="61:29"><name pos:start="61:21" pos:end="61:22">c1</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:29">state</name></name> <operator pos:start="61:31" pos:end="61:32">==</operator> <name pos:start="61:34" pos:end="61:52">HTTPSTATE_WAIT_FEED</name> <operator pos:start="61:54" pos:end="61:55">&amp;&amp;</operator> 

                    <name pos:start="63:21" pos:end="63:36"><name pos:start="63:21" pos:end="63:22">c1</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:30">stream</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:36">feed</name></name> <operator pos:start="63:38" pos:end="63:39">==</operator> <name pos:start="63:41" pos:end="63:55"><name pos:start="63:41" pos:end="63:41">c</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:49">stream</name><operator pos:start="63:50" pos:end="63:51">-&gt;</operator><name pos:start="63:52" pos:end="63:55">feed</name></name></expr>)</condition> <block pos:start="63:58" pos:end="67:17">{<block_content pos:start="65:21" pos:end="65:52">

                    <expr_stmt pos:start="65:21" pos:end="65:52"><expr pos:start="65:21" pos:end="65:51"><name pos:start="65:21" pos:end="65:29"><name pos:start="65:21" pos:end="65:22">c1</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:29">state</name></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <name pos:start="65:33" pos:end="65:51">HTTPSTATE_SEND_DATA</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="117:9">else <block pos:start="71:16" pos:end="117:9">{<block_content pos:start="75:13" pos:end="115:13">

            <comment type="block" pos:start="73:13" pos:end="73:73">/* We have a header in our hands that contains useful data */</comment>

            <decl_stmt pos:start="75:13" pos:end="75:30"><decl pos:start="75:13" pos:end="75:29"><type pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:27">AVFormatContext</name></type> <name pos:start="75:29" pos:end="75:29">s</name></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:38"><decl pos:start="77:13" pos:end="77:37"><type pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:25">ByteIOContext</name> <modifier pos:start="77:27" pos:end="77:27">*</modifier></type><name pos:start="77:28" pos:end="77:29">pb</name> <init pos:start="77:31" pos:end="77:37">= <expr pos:start="77:33" pos:end="77:37"><operator pos:start="77:33" pos:end="77:33">&amp;</operator><name pos:start="77:34" pos:end="77:37"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:35">.</operator><name pos:start="77:36" pos:end="77:37">pb</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="79:13" pos:end="79:18"><decl pos:start="79:13" pos:end="79:17"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:17">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:37"><expr pos:start="83:13" pos:end="83:36"><call pos:start="83:13" pos:end="83:36"><name pos:start="83:13" pos:end="83:18">memset</name><argument_list pos:start="83:19" pos:end="83:36">(<argument pos:start="83:20" pos:end="83:21"><expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">&amp;</operator><name pos:start="83:21" pos:end="83:21">s</name></expr></argument>, <argument pos:start="83:24" pos:end="83:24"><expr pos:start="83:24" pos:end="83:24"><literal type="number" pos:start="83:24" pos:end="83:24">0</literal></expr></argument>, <argument pos:start="83:27" pos:end="83:35"><expr pos:start="83:27" pos:end="83:35"><sizeof pos:start="83:27" pos:end="83:35">sizeof<argument_list pos:start="83:33" pos:end="83:35">(<argument pos:start="83:34" pos:end="83:34"><expr pos:start="83:34" pos:end="83:34"><name pos:start="83:34" pos:end="83:34">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="87:13" pos:end="87:79"><expr pos:start="87:13" pos:end="87:78"><call pos:start="87:13" pos:end="87:78"><name pos:start="87:13" pos:end="87:24">url_open_buf</name><argument_list pos:start="87:25" pos:end="87:78">(<argument pos:start="87:26" pos:end="87:27"><expr pos:start="87:26" pos:end="87:27"><name pos:start="87:26" pos:end="87:27">pb</name></expr></argument>, <argument pos:start="87:30" pos:end="87:38"><expr pos:start="87:30" pos:end="87:38"><name pos:start="87:30" pos:end="87:38"><name pos:start="87:30" pos:end="87:30">c</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:38">buffer</name></name></expr></argument>, <argument pos:start="87:41" pos:end="87:65"><expr pos:start="87:41" pos:end="87:65"><name pos:start="87:41" pos:end="87:53"><name pos:start="87:41" pos:end="87:41">c</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:53">buffer_end</name></name> <operator pos:start="87:55" pos:end="87:55">-</operator> <name pos:start="87:57" pos:end="87:65"><name pos:start="87:57" pos:end="87:57">c</name><operator pos:start="87:58" pos:end="87:59">-&gt;</operator><name pos:start="87:60" pos:end="87:65">buffer</name></name></expr></argument>, <argument pos:start="87:68" pos:end="87:77"><expr pos:start="87:68" pos:end="87:77"><name pos:start="87:68" pos:end="87:77">URL_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:40"><expr pos:start="89:13" pos:end="89:39"><name pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:14">pb</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:23">buf_end</name></name> <operator pos:start="89:25" pos:end="89:25">=</operator> <name pos:start="89:27" pos:end="89:39"><name pos:start="89:27" pos:end="89:27">c</name><operator pos:start="89:28" pos:end="89:29">-&gt;</operator><name pos:start="89:30" pos:end="89:39">buffer_end</name></name></expr>;</expr_stmt>        <comment type="block" pos:start="89:49" pos:end="89:56">/* ?? */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:27"><name pos:start="91:13" pos:end="91:14">pb</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:27">is_streamed</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <literal type="number" pos:start="91:31" pos:end="91:31">1</literal></expr>;</expr_stmt>



            <if_stmt pos:start="95:13" pos:end="99:13"><if pos:start="95:13" pos:end="99:13">if <condition pos:start="95:16" pos:end="95:50">(<expr pos:start="95:17" pos:end="95:49"><call pos:start="95:17" pos:end="95:45"><name pos:start="95:17" pos:end="95:38"><name pos:start="95:17" pos:end="95:20">feed</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:25">fmt</name><operator pos:start="95:26" pos:end="95:27">-&gt;</operator><name pos:start="95:28" pos:end="95:38">read_header</name></name><argument_list pos:start="95:39" pos:end="95:45">(<argument pos:start="95:40" pos:end="95:41"><expr pos:start="95:40" pos:end="95:41"><operator pos:start="95:40" pos:end="95:40">&amp;</operator><name pos:start="95:41" pos:end="95:41">s</name></expr></argument>, <argument pos:start="95:44" pos:end="95:44"><expr pos:start="95:44" pos:end="95:44"><literal type="number" pos:start="95:44" pos:end="95:44">0</literal></expr></argument>)</argument_list></call> <operator pos:start="95:47" pos:end="95:47">&lt;</operator> <literal type="number" pos:start="95:49" pos:end="95:49">0</literal></expr>)</condition> <block pos:start="95:52" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:26">

                <goto pos:start="97:17" pos:end="97:26">goto <name pos:start="97:22" pos:end="97:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="103:13" pos:end="103:48">/* Now we have the actual streams */</comment>

            <if_stmt pos:start="105:13" pos:end="109:13"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:49">(<expr pos:start="105:17" pos:end="105:48"><name pos:start="105:17" pos:end="105:28"><name pos:start="105:17" pos:end="105:17">s</name><operator pos:start="105:18" pos:end="105:18">.</operator><name pos:start="105:19" pos:end="105:28">nb_streams</name></name> <operator pos:start="105:30" pos:end="105:31">!=</operator> <name pos:start="105:33" pos:end="105:48"><name pos:start="105:33" pos:end="105:36">feed</name><operator pos:start="105:37" pos:end="105:38">-&gt;</operator><name pos:start="105:39" pos:end="105:48">nb_streams</name></name></expr>)</condition> <block pos:start="105:51" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:26">

                <goto pos:start="107:17" pos:end="107:26">goto <name pos:start="107:22" pos:end="107:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <for pos:start="111:13" pos:end="115:13">for <control pos:start="111:17" pos:end="111:46">(<init pos:start="111:18" pos:end="111:23"><expr pos:start="111:18" pos:end="111:22"><name pos:start="111:18" pos:end="111:18">i</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <literal type="number" pos:start="111:22" pos:end="111:22">0</literal></expr>;</init> <condition pos:start="111:25" pos:end="111:41"><expr pos:start="111:25" pos:end="111:40"><name pos:start="111:25" pos:end="111:25">i</name> <operator pos:start="111:27" pos:end="111:27">&lt;</operator> <name pos:start="111:29" pos:end="111:40"><name pos:start="111:29" pos:end="111:29">s</name><operator pos:start="111:30" pos:end="111:30">.</operator><name pos:start="111:31" pos:end="111:40">nb_streams</name></name></expr>;</condition> <incr pos:start="111:43" pos:end="111:45"><expr pos:start="111:43" pos:end="111:45"><name pos:start="111:43" pos:end="111:43">i</name><operator pos:start="111:44" pos:end="111:45">++</operator></expr></incr>)</control> <block pos:start="111:48" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:95">

                <expr_stmt pos:start="113:17" pos:end="113:95"><expr pos:start="113:17" pos:end="113:94"><call pos:start="113:17" pos:end="113:94"><name pos:start="113:17" pos:end="113:22">memcpy</name><argument_list pos:start="113:23" pos:end="113:94">(<argument pos:start="113:24" pos:end="113:47"><expr pos:start="113:24" pos:end="113:47"><operator pos:start="113:24" pos:end="113:24">&amp;</operator><name pos:start="113:25" pos:end="113:40"><name pos:start="113:25" pos:end="113:28">feed</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:37">streams</name><index pos:start="113:38" pos:end="113:40">[<expr pos:start="113:39" pos:end="113:39"><name pos:start="113:39" pos:end="113:39">i</name></expr>]</index></name><operator pos:start="113:41" pos:end="113:42">-&gt;</operator><name pos:start="113:43" pos:end="113:47">codec</name></expr></argument>, <argument pos:start="113:50" pos:end="113:69"><expr pos:start="113:50" pos:end="113:69"><operator pos:start="113:50" pos:end="113:50">&amp;</operator><name pos:start="113:51" pos:end="113:62"><name pos:start="113:51" pos:end="113:51">s</name><operator pos:start="113:52" pos:end="113:52">.</operator><name pos:start="113:53" pos:end="113:59">streams</name><index pos:start="113:60" pos:end="113:62">[<expr pos:start="113:61" pos:end="113:61"><name pos:start="113:61" pos:end="113:61">i</name></expr>]</index></name><operator pos:start="113:63" pos:end="113:64">-&gt;</operator><name pos:start="113:65" pos:end="113:69">codec</name></expr></argument>, <argument pos:start="113:72" pos:end="113:93"><expr pos:start="113:72" pos:end="113:93"><sizeof pos:start="113:72" pos:end="113:93">sizeof<argument_list pos:start="113:78" pos:end="113:93">(<argument pos:start="113:79" pos:end="113:92"><expr pos:start="113:79" pos:end="113:92"><name pos:start="113:79" pos:end="113:92">AVCodecContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for> 

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:9">c</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:21">buffer_ptr</name></name> <operator pos:start="119:23" pos:end="119:23">=</operator> <name pos:start="119:25" pos:end="119:33"><name pos:start="119:25" pos:end="119:25">c</name><operator pos:start="119:26" pos:end="119:27">-&gt;</operator><name pos:start="119:28" pos:end="119:33">buffer</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:68"><expr pos:start="125:5" pos:end="125:67"><name pos:start="125:5" pos:end="125:7">len</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:67"><name pos:start="125:11" pos:end="125:14">read</name><argument_list pos:start="125:15" pos:end="125:67">(<argument pos:start="125:16" pos:end="125:20"><expr pos:start="125:16" pos:end="125:20"><name pos:start="125:16" pos:end="125:20"><name pos:start="125:16" pos:end="125:16">c</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:20">fd</name></name></expr></argument>, <argument pos:start="125:23" pos:end="125:35"><expr pos:start="125:23" pos:end="125:35"><name pos:start="125:23" pos:end="125:35"><name pos:start="125:23" pos:end="125:23">c</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:35">buffer_ptr</name></name></expr></argument>, <argument pos:start="125:38" pos:end="125:66"><expr pos:start="125:38" pos:end="125:66"><name pos:start="125:38" pos:end="125:50"><name pos:start="125:38" pos:end="125:38">c</name><operator pos:start="125:39" pos:end="125:40">-&gt;</operator><name pos:start="125:41" pos:end="125:50">buffer_end</name></name> <operator pos:start="125:52" pos:end="125:52">-</operator> <name pos:start="125:54" pos:end="125:66"><name pos:start="125:54" pos:end="125:54">c</name><operator pos:start="125:55" pos:end="125:56">-&gt;</operator><name pos:start="125:57" pos:end="125:66">buffer_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="149:5"><if pos:start="127:5" pos:end="137:5">if <condition pos:start="127:8" pos:end="127:16">(<expr pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:11">len</name> <operator pos:start="127:13" pos:end="127:13">&lt;</operator> <literal type="number" pos:start="127:15" pos:end="127:15">0</literal></expr>)</condition> <block pos:start="127:18" pos:end="137:5">{<block_content pos:start="129:9" pos:end="135:9">

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:46">(<expr pos:start="129:13" pos:end="129:45"><name pos:start="129:13" pos:end="129:17">errno</name> <operator pos:start="129:19" pos:end="129:20">!=</operator> <name pos:start="129:22" pos:end="129:27">EAGAIN</name> <operator pos:start="129:29" pos:end="129:30">&amp;&amp;</operator> <name pos:start="129:32" pos:end="129:36">errno</name> <operator pos:start="129:38" pos:end="129:39">!=</operator> <name pos:start="129:41" pos:end="129:45">EINTR</name></expr>)</condition> <block pos:start="129:48" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:22">

            <comment type="block" pos:start="131:13" pos:end="131:42">/* error : close connection */</comment>

            <goto pos:start="133:13" pos:end="133:22">goto <name pos:start="133:18" pos:end="133:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="137:7" pos:end="143:5">else if <condition pos:start="137:15" pos:end="137:24">(<expr pos:start="137:16" pos:end="137:23"><name pos:start="137:16" pos:end="137:18">len</name> <operator pos:start="137:20" pos:end="137:21">==</operator> <literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr>)</condition> <block pos:start="137:26" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:18">

        <comment type="block" pos:start="139:9" pos:end="139:42">/* end of connection : close it */</comment>

        <goto pos:start="141:9" pos:end="141:18">goto <name pos:start="141:14" pos:end="141:17">fail</name>;</goto>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="149:5">else <block pos:start="143:12" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:29">

        <expr_stmt pos:start="145:9" pos:end="145:29"><expr pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:21"><name pos:start="145:9" pos:end="145:9">c</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:21">buffer_ptr</name></name> <operator pos:start="145:23" pos:end="145:24">+=</operator> <name pos:start="145:26" pos:end="145:28">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:29"><expr pos:start="147:9" pos:end="147:28"><name pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:9">c</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:21">data_count</name></name> <operator pos:start="147:23" pos:end="147:24">+=</operator> <name pos:start="147:26" pos:end="147:28">len</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="151:5" pos:end="151:13">return <expr pos:start="151:12" pos:end="151:12"><literal type="number" pos:start="151:12" pos:end="151:12">0</literal></expr>;</return>

 <label pos:start="153:2" pos:end="153:6"><name pos:start="153:2" pos:end="153:5">fail</name>:</label>

    <expr_stmt pos:start="155:5" pos:end="155:31"><expr pos:start="155:5" pos:end="155:30"><name pos:start="155:5" pos:end="155:26"><name pos:start="155:5" pos:end="155:5">c</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:13">stream</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:26">feed_opened</name></name> <operator pos:start="155:28" pos:end="155:28">=</operator> <literal type="number" pos:start="155:30" pos:end="155:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:22"><expr pos:start="157:5" pos:end="157:21"><call pos:start="157:5" pos:end="157:21"><name pos:start="157:5" pos:end="157:9">close</name><argument_list pos:start="157:10" pos:end="157:21">(<argument pos:start="157:11" pos:end="157:20"><expr pos:start="157:11" pos:end="157:20"><name pos:start="157:11" pos:end="157:20"><name pos:start="157:11" pos:end="157:11">c</name><operator pos:start="157:12" pos:end="157:13">-&gt;</operator><name pos:start="157:14" pos:end="157:20">feed_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:14">return <expr pos:start="159:12" pos:end="159:13"><operator pos:start="159:12" pos:end="159:12">-</operator><literal type="number" pos:start="159:13" pos:end="159:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
