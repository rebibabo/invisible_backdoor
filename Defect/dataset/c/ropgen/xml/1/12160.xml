<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12160.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:25">try_fiemap</name><parameter_list pos:start="1:26" pos:end="3:65">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:53">off_t</name></type> <name pos:start="1:55" pos:end="1:59">start</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:72"><decl pos:start="1:62" pos:end="1:72"><type pos:start="1:62" pos:end="1:72"><name pos:start="1:62" pos:end="1:66">off_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">data</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:37"><decl pos:start="3:27" pos:end="3:37"><type pos:start="3:27" pos:end="3:37"><name pos:start="3:27" pos:end="3:31">off_t</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:37">hole</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:53"><decl pos:start="3:40" pos:end="3:53"><type pos:start="3:40" pos:end="3:53"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:53">nb_sectors</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:64"><decl pos:start="3:56" pos:end="3:64"><type pos:start="3:56" pos:end="3:64"><name pos:start="3:56" pos:end="3:58">int</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:64">pnum</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="89:1">{<block_content pos:start="9:5" pos:end="88:0">

<cpp:ifdef pos:start="7:1" pos:end="7:20">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:20">CONFIG_FIEMAP</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BDRVRawState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:32">= <expr pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:24">bs</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:67"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:15">ret</name> <init pos:start="11:17" pos:end="11:67">= <expr pos:start="11:19" pos:end="11:67"><name pos:start="11:19" pos:end="11:33">BDRV_BLOCK_DATA</name> <operator pos:start="11:35" pos:end="11:35">|</operator> <name pos:start="11:37" pos:end="11:59">BDRV_BLOCK_OFFSET_VALID</name> <operator pos:start="11:61" pos:end="11:61">|</operator> <name pos:start="11:63" pos:end="11:67">start</name></expr></init></decl>;</decl_stmt>

    <struct pos:start="13:5" pos:end="19:8">struct <block pos:start="13:12" pos:end="19:5">{

        <decl_stmt pos:start="15:9" pos:end="15:25"><decl pos:start="15:9" pos:end="15:24"><type pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:14">struct</name> <name pos:start="15:16" pos:end="15:21">fiemap</name></name></type> <name pos:start="15:23" pos:end="15:24">fm</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:32"><decl pos:start="17:9" pos:end="17:31"><type pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:14">struct</name> <name pos:start="17:16" pos:end="17:28">fiemap_extent</name></name></type> <name pos:start="17:30" pos:end="17:31">fe</name></decl>;</decl_stmt>

    }</block> <decl pos:start="19:7" pos:end="19:7"><name pos:start="19:7" pos:end="19:7">f</name></decl>;</struct>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:23">(<expr pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:22">skip_fiemap</name></name></expr>)</condition> <block pos:start="23:25" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:24">

        <return pos:start="25:9" pos:end="25:24">return <expr pos:start="25:16" pos:end="25:23"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:5">f</name><operator pos:start="31:6" pos:end="31:6">.</operator><name pos:start="31:7" pos:end="31:8">fm</name><operator pos:start="31:9" pos:end="31:9">.</operator><name pos:start="31:10" pos:end="31:17">fm_start</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:25">start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:60"><expr pos:start="33:5" pos:end="33:59"><name pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:5">f</name><operator pos:start="33:6" pos:end="33:6">.</operator><name pos:start="33:7" pos:end="33:8">fm</name><operator pos:start="33:9" pos:end="33:9">.</operator><name pos:start="33:10" pos:end="33:18">fm_length</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:29">int64_t</name><operator pos:start="33:30" pos:end="33:30">)</operator><name pos:start="33:31" pos:end="33:40">nb_sectors</name> <operator pos:start="33:42" pos:end="33:42">*</operator> <name pos:start="33:44" pos:end="33:59">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:22"><expr pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:5">f</name><operator pos:start="35:6" pos:end="35:6">.</operator><name pos:start="35:7" pos:end="35:8">fm</name><operator pos:start="35:9" pos:end="35:9">.</operator><name pos:start="35:10" pos:end="35:17">fm_flags</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:5">f</name><operator pos:start="37:6" pos:end="37:6">.</operator><name pos:start="37:7" pos:end="37:8">fm</name><operator pos:start="37:9" pos:end="37:9">.</operator><name pos:start="37:10" pos:end="37:24">fm_extent_count</name></name> <operator pos:start="37:26" pos:end="37:26">=</operator> <literal type="number" pos:start="37:28" pos:end="37:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:25"><expr pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:5">f</name><operator pos:start="39:6" pos:end="39:6">.</operator><name pos:start="39:7" pos:end="39:8">fm</name><operator pos:start="39:9" pos:end="39:9">.</operator><name pos:start="39:10" pos:end="39:20">fm_reserved</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <literal type="number" pos:start="39:24" pos:end="39:24">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:46">(<expr pos:start="41:9" pos:end="41:45"><call pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:13">ioctl</name><argument_list pos:start="41:14" pos:end="41:39">(<argument pos:start="41:15" pos:end="41:19"><expr pos:start="41:15" pos:end="41:19"><name pos:start="41:15" pos:end="41:19"><name pos:start="41:15" pos:end="41:15">s</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:19">fd</name></name></expr></argument>, <argument pos:start="41:22" pos:end="41:34"><expr pos:start="41:22" pos:end="41:34"><name pos:start="41:22" pos:end="41:34">FS_IOC_FIEMAP</name></expr></argument>, <argument pos:start="41:37" pos:end="41:38"><expr pos:start="41:37" pos:end="41:38"><operator pos:start="41:37" pos:end="41:37">&amp;</operator><name pos:start="41:38" pos:end="41:38">f</name></expr></argument>)</argument_list></call> <operator pos:start="41:41" pos:end="41:42">==</operator> <operator pos:start="41:44" pos:end="41:44">-</operator><literal type="number" pos:start="41:45" pos:end="41:45">1</literal></expr>)</condition> <block pos:start="41:48" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:22">

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:22">skip_fiemap</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:29">true</name></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:22">return <expr pos:start="45:16" pos:end="45:21"><operator pos:start="45:16" pos:end="45:16">-</operator><name pos:start="45:17" pos:end="45:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="77:5"><if pos:start="51:5" pos:end="65:5">if <condition pos:start="51:8" pos:end="51:36">(<expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:9">f</name><operator pos:start="51:10" pos:end="51:10">.</operator><name pos:start="51:11" pos:end="51:12">fm</name><operator pos:start="51:13" pos:end="51:13">.</operator><name pos:start="51:14" pos:end="51:30">fm_mapped_extents</name></name> <operator pos:start="51:32" pos:end="51:33">==</operator> <literal type="number" pos:start="51:35" pos:end="51:35">0</literal></expr>)</condition> <block pos:start="51:38" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:60">

        <comment type="block" pos:start="53:9" pos:end="57:11">/* No extents found, data is beyond f.fm.fm_start + f.fm.fm_length.

         * f.fm.fm_start + f.fm.fm_length must be clamped to the file size!

         */</comment>

        <decl_stmt pos:start="59:9" pos:end="59:49"><decl pos:start="59:9" pos:end="59:48"><type pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:13">off_t</name></type> <name pos:start="59:15" pos:end="59:20">length</name> <init pos:start="59:22" pos:end="59:48">= <expr pos:start="59:24" pos:end="59:48"><call pos:start="59:24" pos:end="59:48"><name pos:start="59:24" pos:end="59:28">lseek</name><argument_list pos:start="59:29" pos:end="59:48">(<argument pos:start="59:30" pos:end="59:34"><expr pos:start="59:30" pos:end="59:34"><name pos:start="59:30" pos:end="59:34"><name pos:start="59:30" pos:end="59:30">s</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:34">fd</name></name></expr></argument>, <argument pos:start="59:37" pos:end="59:37"><expr pos:start="59:37" pos:end="59:37"><literal type="number" pos:start="59:37" pos:end="59:37">0</literal></expr></argument>, <argument pos:start="59:40" pos:end="59:47"><expr pos:start="59:40" pos:end="59:47"><name pos:start="59:40" pos:end="59:47">SEEK_END</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><operator pos:start="61:9" pos:end="61:9">*</operator><name pos:start="61:10" pos:end="61:13">hole</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:29"><name pos:start="61:17" pos:end="61:17">f</name><operator pos:start="61:18" pos:end="61:18">.</operator><name pos:start="61:19" pos:end="61:20">fm</name><operator pos:start="61:21" pos:end="61:21">.</operator><name pos:start="61:22" pos:end="61:29">fm_start</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:60"><expr pos:start="63:9" pos:end="63:59"><operator pos:start="63:9" pos:end="63:9">*</operator><name pos:start="63:10" pos:end="63:13">data</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:59"><name pos:start="63:17" pos:end="63:19">MIN</name><argument_list pos:start="63:20" pos:end="63:59">(<argument pos:start="63:21" pos:end="63:50"><expr pos:start="63:21" pos:end="63:50"><name pos:start="63:21" pos:end="63:33"><name pos:start="63:21" pos:end="63:21">f</name><operator pos:start="63:22" pos:end="63:22">.</operator><name pos:start="63:23" pos:end="63:24">fm</name><operator pos:start="63:25" pos:end="63:25">.</operator><name pos:start="63:26" pos:end="63:33">fm_start</name></name> <operator pos:start="63:35" pos:end="63:35">+</operator> <name pos:start="63:37" pos:end="63:50"><name pos:start="63:37" pos:end="63:37">f</name><operator pos:start="63:38" pos:end="63:38">.</operator><name pos:start="63:39" pos:end="63:40">fm</name><operator pos:start="63:41" pos:end="63:41">.</operator><name pos:start="63:42" pos:end="63:50">fm_length</name></name></expr></argument>, <argument pos:start="63:53" pos:end="63:58"><expr pos:start="63:53" pos:end="63:58"><name pos:start="63:53" pos:end="63:58">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="77:5">else <block pos:start="65:12" pos:end="77:5">{<block_content pos:start="67:9" pos:end="75:9">

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><operator pos:start="67:9" pos:end="67:9">*</operator><name pos:start="67:10" pos:end="67:13">data</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <name pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:17">f</name><operator pos:start="67:18" pos:end="67:18">.</operator><name pos:start="67:19" pos:end="67:20">fe</name><operator pos:start="67:21" pos:end="67:21">.</operator><name pos:start="67:22" pos:end="67:31">fe_logical</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:49"><expr pos:start="69:9" pos:end="69:48"><operator pos:start="69:9" pos:end="69:9">*</operator><name pos:start="69:10" pos:end="69:13">hole</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:17">f</name><operator pos:start="69:18" pos:end="69:18">.</operator><name pos:start="69:19" pos:end="69:20">fe</name><operator pos:start="69:21" pos:end="69:21">.</operator><name pos:start="69:22" pos:end="69:31">fe_logical</name></name> <operator pos:start="69:33" pos:end="69:33">+</operator> <name pos:start="69:35" pos:end="69:48"><name pos:start="69:35" pos:end="69:35">f</name><operator pos:start="69:36" pos:end="69:36">.</operator><name pos:start="69:37" pos:end="69:38">fe</name><operator pos:start="69:39" pos:end="69:39">.</operator><name pos:start="69:40" pos:end="69:48">fe_length</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:52">(<expr pos:start="71:13" pos:end="71:51"><name pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:13">f</name><operator pos:start="71:14" pos:end="71:14">.</operator><name pos:start="71:15" pos:end="71:16">fe</name><operator pos:start="71:17" pos:end="71:17">.</operator><name pos:start="71:18" pos:end="71:25">fe_flags</name></name> <operator pos:start="71:27" pos:end="71:27">&amp;</operator> <name pos:start="71:29" pos:end="71:51">FIEMAP_EXTENT_UNWRITTEN</name></expr>)</condition> <block pos:start="71:54" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:35">

            <expr_stmt pos:start="73:13" pos:end="73:35"><expr pos:start="73:13" pos:end="73:34"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:18">|=</operator> <name pos:start="73:20" pos:end="73:34">BDRV_BLOCK_ZERO</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="81:5" pos:end="84:0">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

<cpp:else pos:start="83:1" pos:end="83:5">#<cpp:directive pos:start="83:2" pos:end="83:5">else</cpp:directive></cpp:else>

    <return pos:start="85:5" pos:end="88:0">return <expr pos:start="85:12" pos:end="85:19"><operator pos:start="85:12" pos:end="85:12">-</operator><name pos:start="85:13" pos:end="85:19">ENOTSUP</name></expr>;</return>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
