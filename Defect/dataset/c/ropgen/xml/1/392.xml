<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/392.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">pci_edu_realize</name><parameter_list pos:start="1:28" pos:end="1:58">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:37">PCIDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">pdev</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:50">Error</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier><modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:73">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">EduState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">edu</name> <init pos:start="5:19" pos:end="5:51">= <expr pos:start="5:21" pos:end="5:51"><call pos:start="5:21" pos:end="5:51"><name pos:start="5:21" pos:end="5:29">DO_UPCAST</name><argument_list pos:start="5:30" pos:end="5:51">(<argument pos:start="5:31" pos:end="5:38"><expr pos:start="5:31" pos:end="5:38"><name pos:start="5:31" pos:end="5:38">EduState</name></expr></argument>, <argument pos:start="5:41" pos:end="5:44"><expr pos:start="5:41" pos:end="5:44"><name pos:start="5:41" pos:end="5:44">pdev</name></expr></argument>, <argument pos:start="5:47" pos:end="5:50"><expr pos:start="5:47" pos:end="5:50"><name pos:start="5:47" pos:end="5:50">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">pci_conf</name> <init pos:start="7:23" pos:end="7:36">= <expr pos:start="7:25" pos:end="7:36"><name pos:start="7:25" pos:end="7:36"><name pos:start="7:25" pos:end="7:28">pdev</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:36">config</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:75"><expr pos:start="11:5" pos:end="11:74"><call pos:start="11:5" pos:end="11:74"><name pos:start="11:5" pos:end="11:17">timer_init_ms</name><argument_list pos:start="11:18" pos:end="11:74">(<argument pos:start="11:19" pos:end="11:33"><expr pos:start="11:19" pos:end="11:33"><operator pos:start="11:19" pos:end="11:19">&amp;</operator><name pos:start="11:20" pos:end="11:33"><name pos:start="11:20" pos:end="11:22">edu</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:33">dma_timer</name></name></expr></argument>, <argument pos:start="11:36" pos:end="11:53"><expr pos:start="11:36" pos:end="11:53"><name pos:start="11:36" pos:end="11:53">QEMU_CLOCK_VIRTUAL</name></expr></argument>, <argument pos:start="11:56" pos:end="11:68"><expr pos:start="11:56" pos:end="11:68"><name pos:start="11:56" pos:end="11:68">edu_dma_timer</name></expr></argument>, <argument pos:start="11:71" pos:end="11:73"><expr pos:start="11:71" pos:end="11:73"><name pos:start="11:71" pos:end="11:73">edu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><call pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:19">qemu_mutex_init</name><argument_list pos:start="15:20" pos:end="15:36">(<argument pos:start="15:21" pos:end="15:35"><expr pos:start="15:21" pos:end="15:35"><operator pos:start="15:21" pos:end="15:21">&amp;</operator><name pos:start="15:22" pos:end="15:35"><name pos:start="15:22" pos:end="15:24">edu</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:35">thr_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:35"><expr pos:start="17:5" pos:end="17:34"><call pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:18">qemu_cond_init</name><argument_list pos:start="17:19" pos:end="17:34">(<argument pos:start="17:20" pos:end="17:33"><expr pos:start="17:20" pos:end="17:33"><operator pos:start="17:20" pos:end="17:20">&amp;</operator><name pos:start="17:21" pos:end="17:33"><name pos:start="17:21" pos:end="17:23">edu</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:33">thr_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="21:50"><expr pos:start="19:5" pos:end="21:49"><call pos:start="19:5" pos:end="21:49"><name pos:start="19:5" pos:end="19:22">qemu_thread_create</name><argument_list pos:start="19:23" pos:end="21:49">(<argument pos:start="19:24" pos:end="19:35"><expr pos:start="19:24" pos:end="19:35"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:35"><name pos:start="19:25" pos:end="19:27">edu</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:35">thread</name></name></expr></argument>, <argument pos:start="19:38" pos:end="19:42"><expr pos:start="19:38" pos:end="19:42"><literal type="string" pos:start="19:38" pos:end="19:42">"edu"</literal></expr></argument>, <argument pos:start="19:45" pos:end="19:59"><expr pos:start="19:45" pos:end="19:59"><name pos:start="19:45" pos:end="19:59">edu_fact_thread</name></expr></argument>,

                       <argument pos:start="21:24" pos:end="21:26"><expr pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">edu</name></expr></argument>, <argument pos:start="21:29" pos:end="21:48"><expr pos:start="21:29" pos:end="21:48"><name pos:start="21:29" pos:end="21:48">QEMU_THREAD_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><call pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:32">pci_config_set_interrupt_pin</name><argument_list pos:start="25:33" pos:end="25:45">(<argument pos:start="25:34" pos:end="25:41"><expr pos:start="25:34" pos:end="25:41"><name pos:start="25:34" pos:end="25:41">pci_conf</name></expr></argument>, <argument pos:start="25:44" pos:end="25:44"><expr pos:start="25:44" pos:end="25:44"><literal type="number" pos:start="25:44" pos:end="25:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:48">(<expr pos:start="29:9" pos:end="29:47"><call pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:16">msi_init</name><argument_list pos:start="29:17" pos:end="29:47">(<argument pos:start="29:18" pos:end="29:21"><expr pos:start="29:18" pos:end="29:21"><name pos:start="29:18" pos:end="29:21">pdev</name></expr></argument>, <argument pos:start="29:24" pos:end="29:24"><expr pos:start="29:24" pos:end="29:24"><literal type="number" pos:start="29:24" pos:end="29:24">0</literal></expr></argument>, <argument pos:start="29:27" pos:end="29:27"><expr pos:start="29:27" pos:end="29:27"><literal type="number" pos:start="29:27" pos:end="29:27">1</literal></expr></argument>, <argument pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><name pos:start="29:30" pos:end="29:33">true</name></expr></argument>, <argument pos:start="29:36" pos:end="29:40"><expr pos:start="29:36" pos:end="29:40"><name pos:start="29:36" pos:end="29:40">false</name></expr></argument>, <argument pos:start="29:43" pos:end="29:46"><expr pos:start="29:43" pos:end="29:46"><name pos:start="29:43" pos:end="29:46">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:50" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="39:41"><expr pos:start="37:5" pos:end="39:40"><call pos:start="37:5" pos:end="39:40"><name pos:start="37:5" pos:end="37:25">memory_region_init_io</name><argument_list pos:start="37:26" pos:end="39:40">(<argument pos:start="37:27" pos:end="37:36"><expr pos:start="37:27" pos:end="37:36"><operator pos:start="37:27" pos:end="37:27">&amp;</operator><name pos:start="37:28" pos:end="37:36"><name pos:start="37:28" pos:end="37:30">edu</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:36">mmio</name></name></expr></argument>, <argument pos:start="37:39" pos:end="37:49"><expr pos:start="37:39" pos:end="37:49"><call pos:start="37:39" pos:end="37:49"><name pos:start="37:39" pos:end="37:44">OBJECT</name><argument_list pos:start="37:45" pos:end="37:49">(<argument pos:start="37:46" pos:end="37:48"><expr pos:start="37:46" pos:end="37:48"><name pos:start="37:46" pos:end="37:48">edu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:52" pos:end="37:64"><expr pos:start="37:52" pos:end="37:64"><operator pos:start="37:52" pos:end="37:52">&amp;</operator><name pos:start="37:53" pos:end="37:64">edu_mmio_ops</name></expr></argument>, <argument pos:start="37:67" pos:end="37:69"><expr pos:start="37:67" pos:end="37:69"><name pos:start="37:67" pos:end="37:69">edu</name></expr></argument>,

                    <argument pos:start="39:21" pos:end="39:30"><expr pos:start="39:21" pos:end="39:30"><literal type="string" pos:start="39:21" pos:end="39:30">"edu-mmio"</literal></expr></argument>, <argument pos:start="39:33" pos:end="39:39"><expr pos:start="39:33" pos:end="39:39"><literal type="number" pos:start="39:33" pos:end="39:33">1</literal> <operator pos:start="39:35" pos:end="39:36">&lt;&lt;</operator> <literal type="number" pos:start="39:38" pos:end="39:39">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:73"><expr pos:start="41:5" pos:end="41:72"><call pos:start="41:5" pos:end="41:72"><name pos:start="41:5" pos:end="41:20">pci_register_bar</name><argument_list pos:start="41:21" pos:end="41:72">(<argument pos:start="41:22" pos:end="41:25"><expr pos:start="41:22" pos:end="41:25"><name pos:start="41:22" pos:end="41:25">pdev</name></expr></argument>, <argument pos:start="41:28" pos:end="41:28"><expr pos:start="41:28" pos:end="41:28"><literal type="number" pos:start="41:28" pos:end="41:28">0</literal></expr></argument>, <argument pos:start="41:31" pos:end="41:59"><expr pos:start="41:31" pos:end="41:59"><name pos:start="41:31" pos:end="41:59">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="41:62" pos:end="41:71"><expr pos:start="41:62" pos:end="41:71"><operator pos:start="41:62" pos:end="41:62">&amp;</operator><name pos:start="41:63" pos:end="41:71"><name pos:start="41:63" pos:end="41:65">edu</name><operator pos:start="41:66" pos:end="41:67">-&gt;</operator><name pos:start="41:68" pos:end="41:71">mmio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
