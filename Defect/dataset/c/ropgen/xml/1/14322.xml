<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14322.c" pos:tabs="8"><function pos:start="1:1" pos:end="261:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">gen_intermediate_code</name><parameter_list pos:start="1:27" pos:end="1:78">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:43">CPUOpenRISCState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">env</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:77"><decl pos:start="1:51" pos:end="1:77"><type pos:start="1:51" pos:end="1:77"><name pos:start="1:51" pos:end="1:73"><name pos:start="1:51" pos:end="1:56">struct</name> <name pos:start="1:58" pos:end="1:73">TranslationBlock</name></name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:77">tb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="261:1">{<block_content pos:start="5:5" pos:end="259:5">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">OpenRISCCPU</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">cpu</name> <init pos:start="5:22" pos:end="5:48">= <expr pos:start="5:24" pos:end="5:48"><call pos:start="5:24" pos:end="5:48"><name pos:start="5:24" pos:end="5:43">openrisc_env_get_cpu</name><argument_list pos:start="5:44" pos:end="5:48">(<argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><name pos:start="5:45" pos:end="5:47">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:23">DisasContext</name></name></type> <name pos:start="9:25" pos:end="9:27">ctx</name></decl>, <decl pos:start="9:30" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:23"><modifier pos:start="9:30" pos:end="9:30">*</modifier></type><name pos:start="9:31" pos:end="9:32">dc</name> <init pos:start="9:34" pos:end="9:39">= <expr pos:start="9:36" pos:end="9:39"><operator pos:start="9:36" pos:end="9:36">&amp;</operator><name pos:start="9:37" pos:end="9:39">ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:28">next_page_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">max_insns</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:12">pc_start</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:21"><name pos:start="21:16" pos:end="21:17">tb</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:16"><expr pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:6">dc</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:10">tb</name></name> <operator pos:start="23:12" pos:end="23:12">=</operator> <name pos:start="23:14" pos:end="23:15">tb</name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:28"><expr pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:6">dc</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:14">is_jmp</name></name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:6">dc</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:11">ppc</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:22">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:6">dc</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:10">pc</name></name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:6">dc</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:13">flags</name></name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:32"><name pos:start="33:17" pos:end="33:19">cpu</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:24">env</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:32">cpucfgr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:50"><expr pos:start="35:5" pos:end="35:49"><name pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:6">dc</name><operator pos:start="35:7" pos:end="35:8">-&gt;</operator><name pos:start="35:9" pos:end="35:15">mem_idx</name></name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:49"><name pos:start="35:19" pos:end="35:31">cpu_mmu_index</name><argument_list pos:start="35:32" pos:end="35:49">(<argument pos:start="35:33" pos:end="35:41"><expr pos:start="35:33" pos:end="35:41"><operator pos:start="35:33" pos:end="35:33">&amp;</operator><name pos:start="35:34" pos:end="35:41"><name pos:start="35:34" pos:end="35:36">cpu</name><operator pos:start="35:37" pos:end="35:38">-&gt;</operator><name pos:start="35:39" pos:end="35:41">env</name></name></expr></argument>, <argument pos:start="35:44" pos:end="35:48"><expr pos:start="35:44" pos:end="35:48"><name pos:start="35:44" pos:end="35:48">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:20">synced_flags</name></name> <operator pos:start="37:22" pos:end="37:22">=</operator> <name pos:start="37:24" pos:end="37:35"><name pos:start="37:24" pos:end="37:25">dc</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:35">tb_flags</name></name> <operator pos:start="37:37" pos:end="37:37">=</operator> <name pos:start="37:39" pos:end="37:47"><name pos:start="37:39" pos:end="37:40">tb</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:47">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:51"><expr pos:start="39:5" pos:end="39:50"><name pos:start="39:5" pos:end="39:22"><name pos:start="39:5" pos:end="39:6">dc</name><operator pos:start="39:7" pos:end="39:8">-&gt;</operator><name pos:start="39:9" pos:end="39:22">delayed_branch</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <operator pos:start="39:26" pos:end="39:26">!</operator><operator pos:start="39:27" pos:end="39:27">!</operator><operator pos:start="39:28" pos:end="39:28">(</operator><name pos:start="39:29" pos:end="39:40"><name pos:start="39:29" pos:end="39:30">dc</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:40">tb_flags</name></name> <operator pos:start="39:42" pos:end="39:42">&amp;</operator> <name pos:start="39:44" pos:end="39:49">D_FLAG</name><operator pos:start="39:50" pos:end="39:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><name pos:start="41:5" pos:end="41:26"><name pos:start="41:5" pos:end="41:6">dc</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:26">singlestep_enabled</name></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:51"><name pos:start="41:30" pos:end="41:31">cs</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:51">singlestep_enabled</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:71"><expr pos:start="45:5" pos:end="45:70"><name pos:start="45:5" pos:end="45:19">next_page_start</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <operator pos:start="45:23" pos:end="45:23">(</operator><name pos:start="45:24" pos:end="45:31">pc_start</name> <operator pos:start="45:33" pos:end="45:33">&amp;</operator> <name pos:start="45:35" pos:end="45:50">TARGET_PAGE_MASK</name><operator pos:start="45:51" pos:end="45:51">)</operator> <operator pos:start="45:53" pos:end="45:53">+</operator> <name pos:start="45:55" pos:end="45:70">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:18"><expr pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:13">num_insns</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <literal type="number" pos:start="47:17" pos:end="47:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:13">max_insns</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:26"><name pos:start="49:17" pos:end="49:18">tb</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:26">cflags</name></name> <operator pos:start="49:28" pos:end="49:28">&amp;</operator> <name pos:start="49:30" pos:end="49:42">CF_COUNT_MASK</name></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:23">(<expr pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:17">max_insns</name> <operator pos:start="53:19" pos:end="53:20">==</operator> <literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr>)</condition> <block pos:start="53:25" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:34">

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:17">max_insns</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <name pos:start="55:21" pos:end="55:33">CF_COUNT_MASK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:34">(<expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:17">max_insns</name> <operator pos:start="59:19" pos:end="59:19">&gt;</operator> <name pos:start="59:21" pos:end="59:33">TCG_MAX_INSNS</name></expr>)</condition> <block pos:start="59:36" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:34">

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:17">max_insns</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:33">TCG_MAX_INSNS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="77:5"><if pos:start="67:5" pos:end="77:5">if <condition pos:start="67:8" pos:end="69:44">(<expr pos:start="67:9" pos:end="69:43"><call pos:start="67:9" pos:end="67:45"><name pos:start="67:9" pos:end="67:26">qemu_loglevel_mask</name><argument_list pos:start="67:27" pos:end="67:45">(<argument pos:start="67:28" pos:end="67:44"><expr pos:start="67:28" pos:end="67:44"><name pos:start="67:28" pos:end="67:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call>

        <operator pos:start="69:9" pos:end="69:10">&amp;&amp;</operator> <call pos:start="69:12" pos:end="69:43"><name pos:start="69:12" pos:end="69:33">qemu_log_in_addr_range</name><argument_list pos:start="69:34" pos:end="69:43">(<argument pos:start="69:35" pos:end="69:42"><expr pos:start="69:35" pos:end="69:42"><name pos:start="69:35" pos:end="69:42">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:46" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:54">

        <expr_stmt pos:start="71:9" pos:end="71:24"><expr pos:start="71:9" pos:end="71:23"><call pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:21">qemu_log_lock</name><argument_list pos:start="71:22" pos:end="71:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:39"><expr pos:start="73:9" pos:end="73:38"><call pos:start="73:9" pos:end="73:38"><name pos:start="73:9" pos:end="73:16">qemu_log</name><argument_list pos:start="73:17" pos:end="73:38">(<argument pos:start="73:18" pos:end="73:37"><expr pos:start="73:18" pos:end="73:37"><literal type="string" pos:start="73:18" pos:end="73:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:54"><expr pos:start="75:9" pos:end="75:53"><call pos:start="75:9" pos:end="75:53"><name pos:start="75:9" pos:end="75:16">qemu_log</name><argument_list pos:start="75:17" pos:end="75:53">(<argument pos:start="75:18" pos:end="75:27"><expr pos:start="75:18" pos:end="75:27"><literal type="string" pos:start="75:18" pos:end="75:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="75:30" pos:end="75:52"><expr pos:start="75:30" pos:end="75:52"><call pos:start="75:30" pos:end="75:52"><name pos:start="75:30" pos:end="75:42">lookup_symbol</name><argument_list pos:start="75:43" pos:end="75:52">(<argument pos:start="75:44" pos:end="75:51"><expr pos:start="75:44" pos:end="75:51"><name pos:start="75:44" pos:end="75:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:21"><expr pos:start="81:5" pos:end="81:20"><call pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:16">gen_tb_start</name><argument_list pos:start="81:17" pos:end="81:20">(<argument pos:start="81:18" pos:end="81:19"><expr pos:start="81:18" pos:end="81:19"><name pos:start="81:18" pos:end="81:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <do pos:start="85:5" pos:end="173:39">do <block pos:start="85:8" pos:end="163:5">{<block_content pos:start="87:9" pos:end="161:9">

        <expr_stmt pos:start="87:9" pos:end="87:35"><expr pos:start="87:9" pos:end="87:34"><call pos:start="87:9" pos:end="87:34"><name pos:start="87:9" pos:end="87:26">tcg_gen_insn_start</name><argument_list pos:start="87:27" pos:end="87:34">(<argument pos:start="87:28" pos:end="87:33"><expr pos:start="87:28" pos:end="87:33"><name pos:start="87:28" pos:end="87:33"><name pos:start="87:28" pos:end="87:29">dc</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:33">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:20"><expr pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:17">num_insns</name><operator pos:start="89:18" pos:end="89:19">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="113:9"><if pos:start="93:9" pos:end="113:9">if <condition pos:start="93:12" pos:end="93:62">(<expr pos:start="93:13" pos:end="93:61"><call pos:start="93:13" pos:end="93:61"><name pos:start="93:13" pos:end="93:20">unlikely</name><argument_list pos:start="93:21" pos:end="93:61">(<argument pos:start="93:22" pos:end="93:60"><expr pos:start="93:22" pos:end="93:60"><call pos:start="93:22" pos:end="93:60"><name pos:start="93:22" pos:end="93:40">cpu_breakpoint_test</name><argument_list pos:start="93:41" pos:end="93:60">(<argument pos:start="93:42" pos:end="93:43"><expr pos:start="93:42" pos:end="93:43"><name pos:start="93:42" pos:end="93:43">cs</name></expr></argument>, <argument pos:start="93:46" pos:end="93:51"><expr pos:start="93:46" pos:end="93:51"><name pos:start="93:46" pos:end="93:51"><name pos:start="93:46" pos:end="93:47">dc</name><operator pos:start="93:48" pos:end="93:49">-&gt;</operator><name pos:start="93:50" pos:end="93:51">pc</name></name></expr></argument>, <argument pos:start="93:54" pos:end="93:59"><expr pos:start="93:54" pos:end="93:59"><name pos:start="93:54" pos:end="93:59">BP_ANY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:64" pos:end="113:9">{<block_content pos:start="95:13" pos:end="111:18">

            <expr_stmt pos:start="95:13" pos:end="95:44"><expr pos:start="95:13" pos:end="95:43"><call pos:start="95:13" pos:end="95:43"><name pos:start="95:13" pos:end="95:27">tcg_gen_movi_tl</name><argument_list pos:start="95:28" pos:end="95:43">(<argument pos:start="95:29" pos:end="95:34"><expr pos:start="95:29" pos:end="95:34"><name pos:start="95:29" pos:end="95:34">cpu_pc</name></expr></argument>, <argument pos:start="95:37" pos:end="95:42"><expr pos:start="95:37" pos:end="95:42"><name pos:start="95:37" pos:end="95:42"><name pos:start="95:37" pos:end="95:38">dc</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:42">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:42"><expr pos:start="97:13" pos:end="97:41"><call pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:25">gen_exception</name><argument_list pos:start="97:26" pos:end="97:41">(<argument pos:start="97:27" pos:end="97:28"><expr pos:start="97:27" pos:end="97:28"><name pos:start="97:27" pos:end="97:28">dc</name></expr></argument>, <argument pos:start="97:31" pos:end="97:40"><expr pos:start="97:31" pos:end="97:40"><name pos:start="97:31" pos:end="97:40">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:38"><expr pos:start="99:13" pos:end="99:37"><name pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:14">dc</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:22">is_jmp</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <name pos:start="99:26" pos:end="99:37">DISAS_UPDATE</name></expr>;</expr_stmt>

            <comment type="block" pos:start="101:13" pos:end="107:73">/* The address covered by the breakpoint must be included in

               [tb-&gt;pc, tb-&gt;pc + tb-&gt;size) in order to for it to be

               properly cleared -- thus we increment the PC here so that

               the logic setting tb-&gt;size below does the right thing.  */</comment>

            <expr_stmt pos:start="109:13" pos:end="109:24"><expr pos:start="109:13" pos:end="109:23"><name pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:14">dc</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:18">pc</name></name> <operator pos:start="109:20" pos:end="109:21">+=</operator> <literal type="number" pos:start="109:23" pos:end="109:23">4</literal></expr>;</expr_stmt>

            <break pos:start="111:13" pos:end="111:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:64">(<expr pos:start="117:13" pos:end="117:63"><name pos:start="117:13" pos:end="117:21">num_insns</name> <operator pos:start="117:23" pos:end="117:24">==</operator> <name pos:start="117:26" pos:end="117:34">max_insns</name> <operator pos:start="117:36" pos:end="117:37">&amp;&amp;</operator> <operator pos:start="117:39" pos:end="117:39">(</operator><name pos:start="117:40" pos:end="117:49"><name pos:start="117:40" pos:end="117:41">tb</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:49">cflags</name></name> <operator pos:start="117:51" pos:end="117:51">&amp;</operator> <name pos:start="117:53" pos:end="117:62">CF_LAST_IO</name><operator pos:start="117:63" pos:end="117:63">)</operator></expr>)</condition> <block pos:start="117:66" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:27">

            <expr_stmt pos:start="119:13" pos:end="119:27"><expr pos:start="119:13" pos:end="119:26"><call pos:start="119:13" pos:end="119:26"><name pos:start="119:13" pos:end="119:24">gen_io_start</name><argument_list pos:start="119:25" pos:end="119:26">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:29"><expr pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:10">dc</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:15">ppc</name></name> <operator pos:start="123:17" pos:end="123:17">=</operator> <name pos:start="123:19" pos:end="123:24"><name pos:start="123:19" pos:end="123:20">dc</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:24">pc</name></name> <operator pos:start="123:26" pos:end="123:26">-</operator> <literal type="number" pos:start="123:28" pos:end="123:28">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:29"><expr pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:15"><name pos:start="125:9" pos:end="125:10">dc</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:15">npc</name></name> <operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:24"><name pos:start="125:19" pos:end="125:20">dc</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:24">pc</name></name> <operator pos:start="125:26" pos:end="125:26">+</operator> <literal type="number" pos:start="125:28" pos:end="125:28">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:42"><expr pos:start="127:9" pos:end="127:41"><call pos:start="127:9" pos:end="127:41"><name pos:start="127:9" pos:end="127:23">tcg_gen_movi_tl</name><argument_list pos:start="127:24" pos:end="127:41">(<argument pos:start="127:25" pos:end="127:31"><expr pos:start="127:25" pos:end="127:31"><name pos:start="127:25" pos:end="127:31">cpu_ppc</name></expr></argument>, <argument pos:start="127:34" pos:end="127:40"><expr pos:start="127:34" pos:end="127:40"><name pos:start="127:34" pos:end="127:40"><name pos:start="127:34" pos:end="127:35">dc</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:40">ppc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:42"><expr pos:start="129:9" pos:end="129:41"><call pos:start="129:9" pos:end="129:41"><name pos:start="129:9" pos:end="129:23">tcg_gen_movi_tl</name><argument_list pos:start="129:24" pos:end="129:41">(<argument pos:start="129:25" pos:end="129:31"><expr pos:start="129:25" pos:end="129:31"><name pos:start="129:25" pos:end="129:31">cpu_npc</name></expr></argument>, <argument pos:start="129:34" pos:end="129:40"><expr pos:start="129:34" pos:end="129:40"><name pos:start="129:34" pos:end="129:40"><name pos:start="129:34" pos:end="129:35">dc</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:40">npc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:37"><expr pos:start="131:9" pos:end="131:36"><call pos:start="131:9" pos:end="131:36"><name pos:start="131:9" pos:end="131:27">disas_openrisc_insn</name><argument_list pos:start="131:28" pos:end="131:36">(<argument pos:start="131:29" pos:end="131:30"><expr pos:start="131:29" pos:end="131:30"><name pos:start="131:29" pos:end="131:30">dc</name></expr></argument>, <argument pos:start="131:33" pos:end="131:35"><expr pos:start="131:33" pos:end="131:35"><name pos:start="131:33" pos:end="131:35">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:25"><expr pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:14"><name pos:start="133:9" pos:end="133:10">dc</name><operator pos:start="133:11" pos:end="133:12">-&gt;</operator><name pos:start="133:13" pos:end="133:14">pc</name></name> <operator pos:start="133:16" pos:end="133:16">=</operator> <name pos:start="133:18" pos:end="133:24"><name pos:start="133:18" pos:end="133:19">dc</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:24">npc</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="135:9" pos:end="135:24">/* delay slot */</comment>

        <if_stmt pos:start="137:9" pos:end="161:9"><if pos:start="137:9" pos:end="161:9">if <condition pos:start="137:12" pos:end="137:31">(<expr pos:start="137:13" pos:end="137:30"><name pos:start="137:13" pos:end="137:30"><name pos:start="137:13" pos:end="137:14">dc</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:30">delayed_branch</name></name></expr>)</condition> <block pos:start="137:33" pos:end="161:9">{<block_content pos:start="139:13" pos:end="159:13">

            <expr_stmt pos:start="139:13" pos:end="139:33"><expr pos:start="139:13" pos:end="139:32"><name pos:start="139:13" pos:end="139:30"><name pos:start="139:13" pos:end="139:14">dc</name><operator pos:start="139:15" pos:end="139:16">-&gt;</operator><name pos:start="139:17" pos:end="139:30">delayed_branch</name></name><operator pos:start="139:31" pos:end="139:32">--</operator></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="159:13"><if pos:start="141:13" pos:end="159:13">if <condition pos:start="141:16" pos:end="141:36">(<expr pos:start="141:17" pos:end="141:35"><operator pos:start="141:17" pos:end="141:17">!</operator><name pos:start="141:18" pos:end="141:35"><name pos:start="141:18" pos:end="141:19">dc</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:35">delayed_branch</name></name></expr>)</condition> <block pos:start="141:38" pos:end="159:13">{<block_content pos:start="143:17" pos:end="157:22">

                <expr_stmt pos:start="143:17" pos:end="143:40"><expr pos:start="143:17" pos:end="143:39"><name pos:start="143:17" pos:end="143:28"><name pos:start="143:17" pos:end="143:18">dc</name><operator pos:start="143:19" pos:end="143:20">-&gt;</operator><name pos:start="143:21" pos:end="143:28">tb_flags</name></name> <operator pos:start="143:30" pos:end="143:31">&amp;=</operator> <operator pos:start="143:33" pos:end="143:33">~</operator><name pos:start="143:34" pos:end="143:39">D_FLAG</name></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:35"><expr pos:start="145:17" pos:end="145:34"><call pos:start="145:17" pos:end="145:34"><name pos:start="145:17" pos:end="145:30">gen_sync_flags</name><argument_list pos:start="145:31" pos:end="145:34">(<argument pos:start="145:32" pos:end="145:33"><expr pos:start="145:32" pos:end="145:33"><name pos:start="145:32" pos:end="145:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:47"><expr pos:start="147:17" pos:end="147:46"><call pos:start="147:17" pos:end="147:46"><name pos:start="147:17" pos:end="147:30">tcg_gen_mov_tl</name><argument_list pos:start="147:31" pos:end="147:46">(<argument pos:start="147:32" pos:end="147:37"><expr pos:start="147:32" pos:end="147:37"><name pos:start="147:32" pos:end="147:37">cpu_pc</name></expr></argument>, <argument pos:start="147:40" pos:end="147:45"><expr pos:start="147:40" pos:end="147:45"><name pos:start="147:40" pos:end="147:45">jmp_pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:48"><expr pos:start="149:17" pos:end="149:47"><call pos:start="149:17" pos:end="149:47"><name pos:start="149:17" pos:end="149:30">tcg_gen_mov_tl</name><argument_list pos:start="149:31" pos:end="149:47">(<argument pos:start="149:32" pos:end="149:38"><expr pos:start="149:32" pos:end="149:38"><name pos:start="149:32" pos:end="149:38">cpu_npc</name></expr></argument>, <argument pos:start="149:41" pos:end="149:46"><expr pos:start="149:41" pos:end="149:46"><name pos:start="149:41" pos:end="149:46">jmp_pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:43"><expr pos:start="151:17" pos:end="151:42"><call pos:start="151:17" pos:end="151:42"><name pos:start="151:17" pos:end="151:31">tcg_gen_movi_tl</name><argument_list pos:start="151:32" pos:end="151:42">(<argument pos:start="151:33" pos:end="151:38"><expr pos:start="151:33" pos:end="151:38"><name pos:start="151:33" pos:end="151:38">jmp_pc</name></expr></argument>, <argument pos:start="151:41" pos:end="151:41"><expr pos:start="151:41" pos:end="151:41"><literal type="number" pos:start="151:41" pos:end="151:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:35"><expr pos:start="153:17" pos:end="153:34"><call pos:start="153:17" pos:end="153:34"><name pos:start="153:17" pos:end="153:31">tcg_gen_exit_tb</name><argument_list pos:start="153:32" pos:end="153:34">(<argument pos:start="153:33" pos:end="153:33"><expr pos:start="153:33" pos:end="153:33"><literal type="number" pos:start="153:33" pos:end="153:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:40"><expr pos:start="155:17" pos:end="155:39"><name pos:start="155:17" pos:end="155:26"><name pos:start="155:17" pos:end="155:18">dc</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:26">is_jmp</name></name> <operator pos:start="155:28" pos:end="155:28">=</operator> <name pos:start="155:30" pos:end="155:39">DISAS_JUMP</name></expr>;</expr_stmt>

                <break pos:start="157:17" pos:end="157:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="163:13" pos:end="173:38">(<expr pos:start="163:14" pos:end="173:37"><operator pos:start="163:14" pos:end="163:14">!</operator><name pos:start="163:15" pos:end="163:24"><name pos:start="163:15" pos:end="163:16">dc</name><operator pos:start="163:17" pos:end="163:18">-&gt;</operator><name pos:start="163:19" pos:end="163:24">is_jmp</name></name>

             <operator pos:start="165:14" pos:end="165:15">&amp;&amp;</operator> <operator pos:start="165:17" pos:end="165:17">!</operator><call pos:start="165:18" pos:end="165:34"><name pos:start="165:18" pos:end="165:32">tcg_op_buf_full</name><argument_list pos:start="165:33" pos:end="165:34">()</argument_list></call>

             <operator pos:start="167:14" pos:end="167:15">&amp;&amp;</operator> <operator pos:start="167:17" pos:end="167:17">!</operator><name pos:start="167:18" pos:end="167:39"><name pos:start="167:18" pos:end="167:19">cs</name><operator pos:start="167:20" pos:end="167:21">-&gt;</operator><name pos:start="167:22" pos:end="167:39">singlestep_enabled</name></name>

             <operator pos:start="169:14" pos:end="169:15">&amp;&amp;</operator> <operator pos:start="169:17" pos:end="169:17">!</operator><name pos:start="169:18" pos:end="169:27">singlestep</name>

             <operator pos:start="171:14" pos:end="171:15">&amp;&amp;</operator> <operator pos:start="171:17" pos:end="171:17">(</operator><name pos:start="171:18" pos:end="171:23"><name pos:start="171:18" pos:end="171:19">dc</name><operator pos:start="171:20" pos:end="171:21">-&gt;</operator><name pos:start="171:22" pos:end="171:23">pc</name></name> <operator pos:start="171:25" pos:end="171:25">&lt;</operator> <name pos:start="171:27" pos:end="171:41">next_page_start</name><operator pos:start="171:42" pos:end="171:42">)</operator>

             <operator pos:start="173:14" pos:end="173:15">&amp;&amp;</operator> <name pos:start="173:17" pos:end="173:25">num_insns</name> <operator pos:start="173:27" pos:end="173:27">&lt;</operator> <name pos:start="173:29" pos:end="173:37">max_insns</name></expr>)</condition>;</do>



    <if_stmt pos:start="177:5" pos:end="181:5"><if pos:start="177:5" pos:end="181:5">if <condition pos:start="177:8" pos:end="177:32">(<expr pos:start="177:9" pos:end="177:31"><name pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:10">tb</name><operator pos:start="177:11" pos:end="177:12">-&gt;</operator><name pos:start="177:13" pos:end="177:18">cflags</name></name> <operator pos:start="177:20" pos:end="177:20">&amp;</operator> <name pos:start="177:22" pos:end="177:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="177:34" pos:end="181:5">{<block_content pos:start="179:9" pos:end="179:21">

        <expr_stmt pos:start="179:9" pos:end="179:21"><expr pos:start="179:9" pos:end="179:20"><call pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:18">gen_io_end</name><argument_list pos:start="179:19" pos:end="179:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="183:5" pos:end="189:5"><if pos:start="183:5" pos:end="189:5">if <condition pos:start="183:8" pos:end="183:33">(<expr pos:start="183:9" pos:end="183:32"><name pos:start="183:9" pos:end="183:18"><name pos:start="183:9" pos:end="183:10">dc</name><operator pos:start="183:11" pos:end="183:12">-&gt;</operator><name pos:start="183:13" pos:end="183:18">is_jmp</name></name> <operator pos:start="183:20" pos:end="183:21">==</operator> <name pos:start="183:23" pos:end="183:32">DISAS_NEXT</name></expr>)</condition> <block pos:start="183:35" pos:end="189:5">{<block_content pos:start="185:9" pos:end="187:40">

        <expr_stmt pos:start="185:9" pos:end="185:34"><expr pos:start="185:9" pos:end="185:33"><name pos:start="185:9" pos:end="185:18"><name pos:start="185:9" pos:end="185:10">dc</name><operator pos:start="185:11" pos:end="185:12">-&gt;</operator><name pos:start="185:13" pos:end="185:18">is_jmp</name></name> <operator pos:start="185:20" pos:end="185:20">=</operator> <name pos:start="185:22" pos:end="185:33">DISAS_UPDATE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:40"><expr pos:start="187:9" pos:end="187:39"><call pos:start="187:9" pos:end="187:39"><name pos:start="187:9" pos:end="187:23">tcg_gen_movi_tl</name><argument_list pos:start="187:24" pos:end="187:39">(<argument pos:start="187:25" pos:end="187:30"><expr pos:start="187:25" pos:end="187:30"><name pos:start="187:25" pos:end="187:30">cpu_pc</name></expr></argument>, <argument pos:start="187:33" pos:end="187:38"><expr pos:start="187:33" pos:end="187:38"><name pos:start="187:33" pos:end="187:38"><name pos:start="187:33" pos:end="187:34">dc</name><operator pos:start="187:35" pos:end="187:36">-&gt;</operator><name pos:start="187:37" pos:end="187:38">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="191:5" pos:end="235:5"><if pos:start="191:5" pos:end="201:5">if <condition pos:start="191:8" pos:end="191:41">(<expr pos:start="191:9" pos:end="191:40"><call pos:start="191:9" pos:end="191:40"><name pos:start="191:9" pos:end="191:16">unlikely</name><argument_list pos:start="191:17" pos:end="191:40">(<argument pos:start="191:18" pos:end="191:39"><expr pos:start="191:18" pos:end="191:39"><name pos:start="191:18" pos:end="191:39"><name pos:start="191:18" pos:end="191:19">cs</name><operator pos:start="191:20" pos:end="191:21">-&gt;</operator><name pos:start="191:22" pos:end="191:39">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:43" pos:end="201:5">{<block_content pos:start="193:9" pos:end="199:38">

        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:37">(<expr pos:start="193:13" pos:end="193:36"><name pos:start="193:13" pos:end="193:22"><name pos:start="193:13" pos:end="193:14">dc</name><operator pos:start="193:15" pos:end="193:16">-&gt;</operator><name pos:start="193:17" pos:end="193:22">is_jmp</name></name> <operator pos:start="193:24" pos:end="193:25">==</operator> <name pos:start="193:27" pos:end="193:36">DISAS_NEXT</name></expr>)</condition> <block pos:start="193:39" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:44">

            <expr_stmt pos:start="195:13" pos:end="195:44"><expr pos:start="195:13" pos:end="195:43"><call pos:start="195:13" pos:end="195:43"><name pos:start="195:13" pos:end="195:27">tcg_gen_movi_tl</name><argument_list pos:start="195:28" pos:end="195:43">(<argument pos:start="195:29" pos:end="195:34"><expr pos:start="195:29" pos:end="195:34"><name pos:start="195:29" pos:end="195:34">cpu_pc</name></expr></argument>, <argument pos:start="195:37" pos:end="195:42"><expr pos:start="195:37" pos:end="195:42"><name pos:start="195:37" pos:end="195:42"><name pos:start="195:37" pos:end="195:38">dc</name><operator pos:start="195:39" pos:end="195:40">-&gt;</operator><name pos:start="195:41" pos:end="195:42">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:38"><expr pos:start="199:9" pos:end="199:37"><call pos:start="199:9" pos:end="199:37"><name pos:start="199:9" pos:end="199:21">gen_exception</name><argument_list pos:start="199:22" pos:end="199:37">(<argument pos:start="199:23" pos:end="199:24"><expr pos:start="199:23" pos:end="199:24"><name pos:start="199:23" pos:end="199:24">dc</name></expr></argument>, <argument pos:start="199:27" pos:end="199:36"><expr pos:start="199:27" pos:end="199:36"><name pos:start="199:27" pos:end="199:36">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="201:7" pos:end="235:5">else <block pos:start="201:12" pos:end="235:5">{<block_content pos:start="203:9" pos:end="233:9">

        <switch pos:start="203:9" pos:end="233:9">switch <condition pos:start="203:16" pos:end="203:27">(<expr pos:start="203:17" pos:end="203:26"><name pos:start="203:17" pos:end="203:26"><name pos:start="203:17" pos:end="203:18">dc</name><operator pos:start="203:19" pos:end="203:20">-&gt;</operator><name pos:start="203:21" pos:end="203:26">is_jmp</name></name></expr>)</condition> <block pos:start="203:29" pos:end="233:9">{<block_content pos:start="205:9" pos:end="231:18">

        <case pos:start="205:9" pos:end="205:24">case <expr pos:start="205:14" pos:end="205:23"><name pos:start="205:14" pos:end="205:23">DISAS_NEXT</name></expr>:</case>

            <expr_stmt pos:start="207:13" pos:end="207:39"><expr pos:start="207:13" pos:end="207:38"><call pos:start="207:13" pos:end="207:38"><name pos:start="207:13" pos:end="207:23">gen_goto_tb</name><argument_list pos:start="207:24" pos:end="207:38">(<argument pos:start="207:25" pos:end="207:26"><expr pos:start="207:25" pos:end="207:26"><name pos:start="207:25" pos:end="207:26">dc</name></expr></argument>, <argument pos:start="207:29" pos:end="207:29"><expr pos:start="207:29" pos:end="207:29"><literal type="number" pos:start="207:29" pos:end="207:29">0</literal></expr></argument>, <argument pos:start="207:32" pos:end="207:37"><expr pos:start="207:32" pos:end="207:37"><name pos:start="207:32" pos:end="207:37"><name pos:start="207:32" pos:end="207:33">dc</name><operator pos:start="207:34" pos:end="207:35">-&gt;</operator><name pos:start="207:36" pos:end="207:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        <default pos:start="211:9" pos:end="211:16">default:</default>

        <case pos:start="213:9" pos:end="213:24">case <expr pos:start="213:14" pos:end="213:23"><name pos:start="213:14" pos:end="213:23">DISAS_JUMP</name></expr>:</case>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        <case pos:start="217:9" pos:end="217:26">case <expr pos:start="217:14" pos:end="217:25"><name pos:start="217:14" pos:end="217:25">DISAS_UPDATE</name></expr>:</case>

            <comment type="block" pos:start="219:13" pos:end="221:37">/* indicate that the hash table must be used

               to find the next TB */</comment>

            <expr_stmt pos:start="223:13" pos:end="223:31"><expr pos:start="223:13" pos:end="223:30"><call pos:start="223:13" pos:end="223:30"><name pos:start="223:13" pos:end="223:27">tcg_gen_exit_tb</name><argument_list pos:start="223:28" pos:end="223:30">(<argument pos:start="223:29" pos:end="223:29"><expr pos:start="223:29" pos:end="223:29"><literal type="number" pos:start="223:29" pos:end="223:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="225:13" pos:end="225:18">break;</break>

        <case pos:start="227:9" pos:end="227:27">case <expr pos:start="227:14" pos:end="227:26"><name pos:start="227:14" pos:end="227:26">DISAS_TB_JUMP</name></expr>:</case>

            <comment type="block" pos:start="229:13" pos:end="229:42">/* nothing more to generate */</comment>

            <break pos:start="231:13" pos:end="231:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:30"><expr pos:start="239:5" pos:end="239:29"><call pos:start="239:5" pos:end="239:29"><name pos:start="239:5" pos:end="239:14">gen_tb_end</name><argument_list pos:start="239:15" pos:end="239:29">(<argument pos:start="239:16" pos:end="239:17"><expr pos:start="239:16" pos:end="239:17"><name pos:start="239:16" pos:end="239:17">tb</name></expr></argument>, <argument pos:start="239:20" pos:end="239:28"><expr pos:start="239:20" pos:end="239:28"><name pos:start="239:20" pos:end="239:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:33"><expr pos:start="243:5" pos:end="243:32"><name pos:start="243:5" pos:end="243:12"><name pos:start="243:5" pos:end="243:6">tb</name><operator pos:start="243:7" pos:end="243:8">-&gt;</operator><name pos:start="243:9" pos:end="243:12">size</name></name> <operator pos:start="243:14" pos:end="243:14">=</operator> <name pos:start="243:16" pos:end="243:21"><name pos:start="243:16" pos:end="243:17">dc</name><operator pos:start="243:18" pos:end="243:19">-&gt;</operator><name pos:start="243:20" pos:end="243:21">pc</name></name> <operator pos:start="243:23" pos:end="243:23">-</operator> <name pos:start="243:25" pos:end="243:32">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:27"><expr pos:start="245:5" pos:end="245:26"><name pos:start="245:5" pos:end="245:14"><name pos:start="245:5" pos:end="245:6">tb</name><operator pos:start="245:7" pos:end="245:8">-&gt;</operator><name pos:start="245:9" pos:end="245:14">icount</name></name> <operator pos:start="245:16" pos:end="245:16">=</operator> <name pos:start="245:18" pos:end="245:26">num_insns</name></expr>;</expr_stmt>



    <if_stmt pos:start="249:5" pos:end="259:5"><if pos:start="249:5" pos:end="259:5">if <condition pos:start="249:8" pos:end="251:44">(<expr pos:start="249:9" pos:end="251:43"><call pos:start="249:9" pos:end="249:45"><name pos:start="249:9" pos:end="249:26">qemu_loglevel_mask</name><argument_list pos:start="249:27" pos:end="249:45">(<argument pos:start="249:28" pos:end="249:44"><expr pos:start="249:28" pos:end="249:44"><name pos:start="249:28" pos:end="249:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call>

        <operator pos:start="251:9" pos:end="251:10">&amp;&amp;</operator> <call pos:start="251:12" pos:end="251:43"><name pos:start="251:12" pos:end="251:33">qemu_log_in_addr_range</name><argument_list pos:start="251:34" pos:end="251:43">(<argument pos:start="251:35" pos:end="251:42"><expr pos:start="251:35" pos:end="251:42"><name pos:start="251:35" pos:end="251:42">pc_start</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="251:46" pos:end="259:5">{<block_content pos:start="253:9" pos:end="257:26">

        <expr_stmt pos:start="253:9" pos:end="253:52"><expr pos:start="253:9" pos:end="253:51"><call pos:start="253:9" pos:end="253:51"><name pos:start="253:9" pos:end="253:24">log_target_disas</name><argument_list pos:start="253:25" pos:end="253:51">(<argument pos:start="253:26" pos:end="253:27"><expr pos:start="253:26" pos:end="253:27"><name pos:start="253:26" pos:end="253:27">cs</name></expr></argument>, <argument pos:start="253:30" pos:end="253:37"><expr pos:start="253:30" pos:end="253:37"><name pos:start="253:30" pos:end="253:37">pc_start</name></expr></argument>, <argument pos:start="253:40" pos:end="253:47"><expr pos:start="253:40" pos:end="253:47"><name pos:start="253:40" pos:end="253:47"><name pos:start="253:40" pos:end="253:41">tb</name><operator pos:start="253:42" pos:end="253:43">-&gt;</operator><name pos:start="253:44" pos:end="253:47">size</name></name></expr></argument>, <argument pos:start="253:50" pos:end="253:50"><expr pos:start="253:50" pos:end="253:50"><literal type="number" pos:start="253:50" pos:end="253:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:23"><expr pos:start="255:9" pos:end="255:22"><call pos:start="255:9" pos:end="255:22"><name pos:start="255:9" pos:end="255:16">qemu_log</name><argument_list pos:start="255:17" pos:end="255:22">(<argument pos:start="255:18" pos:end="255:21"><expr pos:start="255:18" pos:end="255:21"><literal type="string" pos:start="255:18" pos:end="255:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:26"><expr pos:start="257:9" pos:end="257:25"><call pos:start="257:9" pos:end="257:25"><name pos:start="257:9" pos:end="257:23">qemu_log_unlock</name><argument_list pos:start="257:24" pos:end="257:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
