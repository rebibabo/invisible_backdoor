<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4140.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:22"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:12">const</specifier> <name pos:start="1:14" pos:end="1:20">uint8_t</name> <modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:36">pcx_rle_decode</name><parameter_list pos:start="1:37" pos:end="9:52">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:55"><decl pos:start="3:38" pos:end="3:55"><type pos:start="3:38" pos:end="3:55"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:50">uint8_t</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:55">end</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:49"><decl pos:start="5:38" pos:end="5:49"><type pos:start="5:38" pos:end="5:49"><name pos:start="5:38" pos:end="5:44">uint8_t</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:49">dst</name></decl></parameter>,

                                     <parameter pos:start="7:38" pos:end="7:68"><decl pos:start="7:38" pos:end="7:68"><type pos:start="7:38" pos:end="7:68"><name pos:start="7:38" pos:end="7:45">unsigned</name> <name pos:start="7:47" pos:end="7:49">int</name></type> <name pos:start="7:51" pos:end="7:68">bytes_per_scanline</name></decl></parameter>,

                                     <parameter pos:start="9:38" pos:end="9:51"><decl pos:start="9:38" pos:end="9:51"><type pos:start="9:38" pos:end="9:51"><name pos:start="9:38" pos:end="9:40">int</name></type> <name pos:start="9:42" pos:end="9:51">compressed</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="53:1">{<block_content pos:start="13:5" pos:end="51:15">

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:18">i</name> <init pos:start="13:20" pos:end="13:22">= <expr pos:start="13:22" pos:end="13:22"><literal type="number" pos:start="13:22" pos:end="13:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">char</name></type> <name pos:start="15:19" pos:end="15:21">run</name></decl>, <decl pos:start="15:24" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:24" pos:end="15:28">value</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="47:5"><if pos:start="19:5" pos:end="41:5">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:18">compressed</name></expr>)</condition> <block pos:start="19:21" pos:end="41:5">{<block_content pos:start="21:9" pos:end="39:9">

        <while pos:start="21:9" pos:end="39:9">while <condition pos:start="21:15" pos:end="21:51">(<expr pos:start="21:16" pos:end="21:50"><name pos:start="21:16" pos:end="21:16">i</name> <operator pos:start="21:18" pos:end="21:18">&lt;</operator> <name pos:start="21:20" pos:end="21:37">bytes_per_scanline</name> <operator pos:start="21:39" pos:end="21:40">&amp;&amp;</operator> <name pos:start="21:42" pos:end="21:44">src</name> <operator pos:start="21:46" pos:end="21:46">&lt;</operator> <name pos:start="21:48" pos:end="21:50">end</name></expr>)</condition> <block pos:start="21:53" pos:end="39:9">{<block_content pos:start="23:13" pos:end="37:33">

            <expr_stmt pos:start="23:13" pos:end="23:22"><expr pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:15">run</name>   <operator pos:start="23:19" pos:end="23:19">=</operator> <literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:27"><expr pos:start="25:13" pos:end="25:26"><name pos:start="25:13" pos:end="25:17">value</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <operator pos:start="25:21" pos:end="25:21">*</operator><name pos:start="25:22" pos:end="25:24">src</name><operator pos:start="25:25" pos:end="25:26">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="33:13"><if pos:start="27:13" pos:end="33:13">if <condition pos:start="27:16" pos:end="27:43">(<expr pos:start="27:17" pos:end="27:42"><name pos:start="27:17" pos:end="27:21">value</name> <operator pos:start="27:23" pos:end="27:24">&gt;=</operator> <literal type="number" pos:start="27:26" pos:end="27:29">0xc0</literal> <operator pos:start="27:31" pos:end="27:32">&amp;&amp;</operator> <name pos:start="27:34" pos:end="27:36">src</name> <operator pos:start="27:38" pos:end="27:38">&lt;</operator> <name pos:start="27:40" pos:end="27:42">end</name></expr>)</condition> <block pos:start="27:45" pos:end="33:13">{<block_content pos:start="29:17" pos:end="31:31">

                <expr_stmt pos:start="29:17" pos:end="29:37"><expr pos:start="29:17" pos:end="29:36"><name pos:start="29:17" pos:end="29:19">run</name>   <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:29">value</name> <operator pos:start="29:31" pos:end="29:31">&amp;</operator> <literal type="number" pos:start="29:33" pos:end="29:36">0x3f</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:31"><expr pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:21">value</name> <operator pos:start="31:23" pos:end="31:23">=</operator> <operator pos:start="31:25" pos:end="31:25">*</operator><name pos:start="31:26" pos:end="31:28">src</name><operator pos:start="31:29" pos:end="31:30">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <while pos:start="35:13" pos:end="37:33">while <condition pos:start="35:19" pos:end="35:51">(<expr pos:start="35:20" pos:end="35:50"><name pos:start="35:20" pos:end="35:20">i</name> <operator pos:start="35:22" pos:end="35:22">&lt;</operator> <name pos:start="35:24" pos:end="35:41">bytes_per_scanline</name> <operator pos:start="35:43" pos:end="35:44">&amp;&amp;</operator> <name pos:start="35:46" pos:end="35:48">run</name><operator pos:start="35:49" pos:end="35:50">--</operator></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:33"><block_content pos:start="37:17" pos:end="37:33">

                <expr_stmt pos:start="37:17" pos:end="37:33"><expr pos:start="37:17" pos:end="37:32"><name pos:start="37:17" pos:end="37:24"><name pos:start="37:17" pos:end="37:19">dst</name><index pos:start="37:20" pos:end="37:24">[<expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:21">i</name><operator pos:start="37:22" pos:end="37:23">++</operator></expr>]</index></name> <operator pos:start="37:26" pos:end="37:26">=</operator> <name pos:start="37:28" pos:end="37:32">value</name></expr>;</expr_stmt></block_content></block></while>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="47:5">else <block pos:start="41:12" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:34">

        <expr_stmt pos:start="43:9" pos:end="43:45"><expr pos:start="43:9" pos:end="43:44"><call pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:14">memcpy</name><argument_list pos:start="43:15" pos:end="43:44">(<argument pos:start="43:16" pos:end="43:18"><expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">dst</name></expr></argument>, <argument pos:start="43:21" pos:end="43:23"><expr pos:start="43:21" pos:end="43:23"><name pos:start="43:21" pos:end="43:23">src</name></expr></argument>, <argument pos:start="43:26" pos:end="43:43"><expr pos:start="43:26" pos:end="43:43"><name pos:start="43:26" pos:end="43:43">bytes_per_scanline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:11">src</name> <operator pos:start="45:13" pos:end="45:14">+=</operator> <name pos:start="45:16" pos:end="45:33">bytes_per_scanline</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="51:5" pos:end="51:15">return <expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">src</name></expr>;</return>

</block_content>}</block></function>
</unit>
