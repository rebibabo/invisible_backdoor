<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27126.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:67"><name pos:start="1:1" pos:end="1:25">file_backend_memory_alloc</name><argument_list pos:start="1:26" pos:end="1:67">(<argument pos:start="1:27" pos:end="1:52">HostMemoryBackend *backend</argument>, <argument pos:start="1:55" pos:end="1:66">Error **errp</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="46:0">

    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:60"><type pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:25">HostMemoryBackendFile</name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:29">fb</name> <init pos:start="5:31" pos:end="5:60">= <expr pos:start="5:33" pos:end="5:60"><call pos:start="5:33" pos:end="5:60"><name pos:start="5:33" pos:end="5:51">MEMORY_BACKEND_FILE</name><argument_list pos:start="5:52" pos:end="5:60">(<argument pos:start="5:53" pos:end="5:59"><expr pos:start="5:53" pos:end="5:59"><name pos:start="5:53" pos:end="5:59">backend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:23">(<expr pos:start="9:9" pos:end="9:22"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:22"><name pos:start="9:10" pos:end="9:16">backend</name><operator pos:start="9:17" pos:end="9:18">-&gt;</operator><name pos:start="9:19" pos:end="9:22">size</name></name></expr>)</condition> <block pos:start="9:25" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:15">

        <expr_stmt pos:start="11:9" pos:end="11:61"><expr pos:start="11:9" pos:end="11:60"><call pos:start="11:9" pos:end="11:60"><name pos:start="11:9" pos:end="11:18">error_setg</name><argument_list pos:start="11:19" pos:end="11:60">(<argument pos:start="11:20" pos:end="11:23"><expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">errp</name></expr></argument>, <argument pos:start="11:26" pos:end="11:59"><expr pos:start="11:26" pos:end="11:59"><literal type="string" pos:start="11:26" pos:end="11:59">"can't create backend with size 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="26:0"><if pos:start="17:5" pos:end="26:0">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:21"><name pos:start="17:10" pos:end="17:11">fb</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:21">mem_path</name></name></expr>)</condition> <block pos:start="17:24" pos:end="26:0">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:54"><expr pos:start="19:9" pos:end="19:53"><call pos:start="19:9" pos:end="19:53"><name pos:start="19:9" pos:end="19:18">error_setg</name><argument_list pos:start="19:19" pos:end="19:53">(<argument pos:start="19:20" pos:end="19:23"><expr pos:start="19:20" pos:end="19:23"><name pos:start="19:20" pos:end="19:23">errp</name></expr></argument>, <argument pos:start="19:26" pos:end="19:52"><expr pos:start="19:26" pos:end="19:52"><literal type="string" pos:start="19:26" pos:end="19:52">"mem-path property not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

<cpp:ifndef pos:start="25:1" pos:end="25:20">#<cpp:directive pos:start="25:2" pos:end="25:7">ifndef</cpp:directive> <name pos:start="25:9" pos:end="25:20">CONFIG_LINUX</name></cpp:ifndef>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:60"><call pos:start="27:5" pos:end="27:60"><name pos:start="27:5" pos:end="27:14">error_setg</name><argument_list pos:start="27:15" pos:end="27:60">(<argument pos:start="27:16" pos:end="27:19"><expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">errp</name></expr></argument>, <argument pos:start="27:22" pos:end="27:59"><expr pos:start="27:22" pos:end="27:59"><literal type="string" pos:start="27:22" pos:end="27:59">"-mem-path not supported on this host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="31:5" pos:end="46:0"><if pos:start="31:5" pos:end="46:0">if <condition pos:start="31:8" pos:end="31:42">(<expr pos:start="31:9" pos:end="31:41"><operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:41"><name pos:start="31:10" pos:end="31:27">memory_region_size</name><argument_list pos:start="31:28" pos:end="31:41">(<argument pos:start="31:29" pos:end="31:40"><expr pos:start="31:29" pos:end="31:40"><operator pos:start="31:29" pos:end="31:29">&amp;</operator><name pos:start="31:30" pos:end="31:40"><name pos:start="31:30" pos:end="31:36">backend</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:40">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:44" pos:end="46:0">{<block_content pos:start="33:9" pos:end="41:53">

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:15">backend</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:31">force_prealloc</name></name> <operator pos:start="33:33" pos:end="33:33">=</operator> <name pos:start="33:35" pos:end="33:46">mem_prealloc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="41:53"><expr pos:start="35:9" pos:end="41:52"><call pos:start="35:9" pos:end="41:52"><name pos:start="35:9" pos:end="35:40">memory_region_init_ram_from_file</name><argument_list pos:start="35:41" pos:end="41:52">(<argument pos:start="35:42" pos:end="35:53"><expr pos:start="35:42" pos:end="35:53"><operator pos:start="35:42" pos:end="35:42">&amp;</operator><name pos:start="35:43" pos:end="35:53"><name pos:start="35:43" pos:end="35:49">backend</name><operator pos:start="35:50" pos:end="35:51">-&gt;</operator><name pos:start="35:52" pos:end="35:53">mr</name></name></expr></argument>, <argument pos:start="35:56" pos:end="35:70"><expr pos:start="35:56" pos:end="35:70"><call pos:start="35:56" pos:end="35:70"><name pos:start="35:56" pos:end="35:61">OBJECT</name><argument_list pos:start="35:62" pos:end="35:70">(<argument pos:start="35:63" pos:end="35:69"><expr pos:start="35:63" pos:end="35:69"><name pos:start="35:63" pos:end="35:69">backend</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="37:34" pos:end="37:75"><expr pos:start="37:34" pos:end="37:75"><call pos:start="37:34" pos:end="37:75"><name pos:start="37:34" pos:end="37:58">object_get_canonical_path</name><argument_list pos:start="37:59" pos:end="37:75">(<argument pos:start="37:60" pos:end="37:74"><expr pos:start="37:60" pos:end="37:74"><call pos:start="37:60" pos:end="37:74"><name pos:start="37:60" pos:end="37:65">OBJECT</name><argument_list pos:start="37:66" pos:end="37:74">(<argument pos:start="37:67" pos:end="37:73"><expr pos:start="37:67" pos:end="37:73"><name pos:start="37:67" pos:end="37:73">backend</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="39:34" pos:end="39:46"><expr pos:start="39:34" pos:end="39:46"><name pos:start="39:34" pos:end="39:46"><name pos:start="39:34" pos:end="39:40">backend</name><operator pos:start="39:41" pos:end="39:42">-&gt;</operator><name pos:start="39:43" pos:end="39:46">size</name></name></expr></argument>, <argument pos:start="39:49" pos:end="39:57"><expr pos:start="39:49" pos:end="39:57"><name pos:start="39:49" pos:end="39:57"><name pos:start="39:49" pos:end="39:50">fb</name><operator pos:start="39:51" pos:end="39:52">-&gt;</operator><name pos:start="39:53" pos:end="39:57">share</name></name></expr></argument>,

                                 <argument pos:start="41:34" pos:end="41:45"><expr pos:start="41:34" pos:end="41:45"><name pos:start="41:34" pos:end="41:45"><name pos:start="41:34" pos:end="41:35">fb</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:45">mem_path</name></name></expr></argument>, <argument pos:start="41:48" pos:end="41:51"><expr pos:start="41:48" pos:end="41:51"><name pos:start="41:48" pos:end="41:51">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

</block_content>}</block>
</unit>
