<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12078.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:44">test_bmdma_one_sector_short_prdt</name><parameter_list pos:start="1:45" pos:end="1:50">(<parameter pos:start="1:46" pos:end="1:49"><decl pos:start="1:46" pos:end="1:49"><type pos:start="1:46" pos:end="1:49"><name pos:start="1:46" pos:end="1:49">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:74">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">QPCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:20">bmdma_base</name></decl>, <decl pos:start="7:23" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:31">ide_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:18">status</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:55">/* Read 2 sectors but only give 1 sector in PRDT */</comment>

    <decl_stmt pos:start="15:5" pos:end="25:6"><decl pos:start="15:5" pos:end="25:5"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">PrdtEntry</name></type> <name pos:start="15:15" pos:end="15:20"><name pos:start="15:15" pos:end="15:18">prdt</name><index pos:start="15:19" pos:end="15:20">[]</index></name> <init pos:start="15:22" pos:end="25:5">= <expr pos:start="15:24" pos:end="25:5"><block pos:start="15:24" pos:end="25:5">{

        <expr pos:start="17:9" pos:end="23:9"><block pos:start="17:9" pos:end="23:9">{

            <expr pos:start="19:13" pos:end="19:21"><operator pos:start="19:13" pos:end="19:13">.</operator><name pos:start="19:14" pos:end="19:17">addr</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr>,

            <expr pos:start="21:13" pos:end="21:49"><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:17">size</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:49"><name pos:start="21:21" pos:end="21:31">cpu_to_le32</name><argument_list pos:start="21:32" pos:end="21:49">(<argument pos:start="21:33" pos:end="21:48"><expr pos:start="21:33" pos:end="21:48"><literal type="number" pos:start="21:33" pos:end="21:37">0x200</literal> <operator pos:start="21:39" pos:end="21:39">|</operator> <name pos:start="21:41" pos:end="21:48">PRDT_EOT</name></expr></argument>)</argument_list></call></expr>,

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:49"><expr pos:start="29:5" pos:end="29:48"><name pos:start="29:5" pos:end="29:7">dev</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:48"><name pos:start="29:11" pos:end="29:24">get_pci_device</name><argument_list pos:start="29:25" pos:end="29:48">(<argument pos:start="29:26" pos:end="29:36"><expr pos:start="29:26" pos:end="29:36"><operator pos:start="29:26" pos:end="29:26">&amp;</operator><name pos:start="29:27" pos:end="29:36">bmdma_base</name></expr></argument>, <argument pos:start="29:39" pos:end="29:47"><expr pos:start="29:39" pos:end="29:47"><operator pos:start="29:39" pos:end="29:39">&amp;</operator><name pos:start="29:40" pos:end="29:47">ide_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:24">/* Normal request */</comment>

    <expr_stmt pos:start="35:5" pos:end="37:60"><expr pos:start="35:5" pos:end="37:59"><name pos:start="35:5" pos:end="35:10">status</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="37:59"><name pos:start="35:14" pos:end="35:29">send_dma_request</name><argument_list pos:start="35:30" pos:end="37:59">(<argument pos:start="35:31" pos:end="35:42"><expr pos:start="35:31" pos:end="35:42"><name pos:start="35:31" pos:end="35:42">CMD_READ_DMA</name></expr></argument>, <argument pos:start="35:45" pos:end="35:45"><expr pos:start="35:45" pos:end="35:45"><literal type="number" pos:start="35:45" pos:end="35:45">0</literal></expr></argument>, <argument pos:start="35:48" pos:end="35:48"><expr pos:start="35:48" pos:end="35:48"><literal type="number" pos:start="35:48" pos:end="35:48">2</literal></expr></argument>,

                              <argument pos:start="37:31" pos:end="37:34"><expr pos:start="37:31" pos:end="37:34"><name pos:start="37:31" pos:end="37:34">prdt</name></expr></argument>, <argument pos:start="37:37" pos:end="37:52"><expr pos:start="37:37" pos:end="37:52"><call pos:start="37:37" pos:end="37:52"><name pos:start="37:37" pos:end="37:46">ARRAY_SIZE</name><argument_list pos:start="37:47" pos:end="37:52">(<argument pos:start="37:48" pos:end="37:51"><expr pos:start="37:48" pos:end="37:51"><name pos:start="37:48" pos:end="37:51">prdt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:55" pos:end="37:58"><expr pos:start="37:55" pos:end="37:58"><name pos:start="37:55" pos:end="37:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:35"><expr pos:start="39:5" pos:end="39:34"><call pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:19">g_assert_cmphex</name><argument_list pos:start="39:20" pos:end="39:34">(<argument pos:start="39:21" pos:end="39:26"><expr pos:start="39:21" pos:end="39:26"><name pos:start="39:21" pos:end="39:26">status</name></expr></argument>, <argument pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:30"><operator pos:start="39:29" pos:end="39:30">==</operator></expr></argument>, <argument pos:start="39:33" pos:end="39:33"><expr pos:start="39:33" pos:end="39:33"><literal type="number" pos:start="39:33" pos:end="39:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:74"><expr pos:start="41:5" pos:end="41:73"><call pos:start="41:5" pos:end="41:73"><name pos:start="41:5" pos:end="41:20">assert_bit_clear</name><argument_list pos:start="41:21" pos:end="41:73">(<argument pos:start="41:22" pos:end="41:62"><expr pos:start="41:22" pos:end="41:62"><call pos:start="41:22" pos:end="41:62"><name pos:start="41:22" pos:end="41:34">qpci_io_readb</name><argument_list pos:start="41:35" pos:end="41:62">(<argument pos:start="41:36" pos:end="41:38"><expr pos:start="41:36" pos:end="41:38"><name pos:start="41:36" pos:end="41:38">dev</name></expr></argument>, <argument pos:start="41:41" pos:end="41:61"><expr pos:start="41:41" pos:end="41:61"><name pos:start="41:41" pos:end="41:48">ide_base</name> <operator pos:start="41:50" pos:end="41:50">+</operator> <name pos:start="41:52" pos:end="41:61">reg_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:65" pos:end="41:72"><expr pos:start="41:65" pos:end="41:72"><name pos:start="41:65" pos:end="41:66">DF</name> <operator pos:start="41:68" pos:end="41:68">|</operator> <name pos:start="41:70" pos:end="41:72">ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:47">/* Abort the request before it completes */</comment>

    <expr_stmt pos:start="47:5" pos:end="49:60"><expr pos:start="47:5" pos:end="49:59"><name pos:start="47:5" pos:end="47:10">status</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="49:59"><name pos:start="47:14" pos:end="47:29">send_dma_request</name><argument_list pos:start="47:30" pos:end="49:59">(<argument pos:start="47:31" pos:end="47:55"><expr pos:start="47:31" pos:end="47:55"><name pos:start="47:31" pos:end="47:42">CMD_READ_DMA</name> <operator pos:start="47:44" pos:end="47:44">|</operator> <name pos:start="47:46" pos:end="47:55">CMDF_ABORT</name></expr></argument>, <argument pos:start="47:58" pos:end="47:58"><expr pos:start="47:58" pos:end="47:58"><literal type="number" pos:start="47:58" pos:end="47:58">0</literal></expr></argument>, <argument pos:start="47:61" pos:end="47:61"><expr pos:start="47:61" pos:end="47:61"><literal type="number" pos:start="47:61" pos:end="47:61">2</literal></expr></argument>,

                              <argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">prdt</name></expr></argument>, <argument pos:start="49:37" pos:end="49:52"><expr pos:start="49:37" pos:end="49:52"><call pos:start="49:37" pos:end="49:52"><name pos:start="49:37" pos:end="49:46">ARRAY_SIZE</name><argument_list pos:start="49:47" pos:end="49:52">(<argument pos:start="49:48" pos:end="49:51"><expr pos:start="49:48" pos:end="49:51"><name pos:start="49:48" pos:end="49:51">prdt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:55" pos:end="49:58"><expr pos:start="49:55" pos:end="49:58"><name pos:start="49:55" pos:end="49:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:35"><expr pos:start="51:5" pos:end="51:34"><call pos:start="51:5" pos:end="51:34"><name pos:start="51:5" pos:end="51:19">g_assert_cmphex</name><argument_list pos:start="51:20" pos:end="51:34">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26">status</name></expr></argument>, <argument pos:start="51:29" pos:end="51:30"><expr pos:start="51:29" pos:end="51:30"><operator pos:start="51:29" pos:end="51:30">==</operator></expr></argument>, <argument pos:start="51:33" pos:end="51:33"><expr pos:start="51:33" pos:end="51:33"><literal type="number" pos:start="51:33" pos:end="51:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:74"><expr pos:start="53:5" pos:end="53:73"><call pos:start="53:5" pos:end="53:73"><name pos:start="53:5" pos:end="53:20">assert_bit_clear</name><argument_list pos:start="53:21" pos:end="53:73">(<argument pos:start="53:22" pos:end="53:62"><expr pos:start="53:22" pos:end="53:62"><call pos:start="53:22" pos:end="53:62"><name pos:start="53:22" pos:end="53:34">qpci_io_readb</name><argument_list pos:start="53:35" pos:end="53:62">(<argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><name pos:start="53:36" pos:end="53:38">dev</name></expr></argument>, <argument pos:start="53:41" pos:end="53:61"><expr pos:start="53:41" pos:end="53:61"><name pos:start="53:41" pos:end="53:48">ide_base</name> <operator pos:start="53:50" pos:end="53:50">+</operator> <name pos:start="53:52" pos:end="53:61">reg_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:65" pos:end="53:72"><expr pos:start="53:65" pos:end="53:72"><name pos:start="53:65" pos:end="53:66">DF</name> <operator pos:start="53:68" pos:end="53:68">|</operator> <name pos:start="53:70" pos:end="53:72">ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
