<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4415.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">configure_icount</name><parameter_list pos:start="1:22" pos:end="1:41">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:34"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">option</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:75">

    <expr_stmt pos:start="5:5" pos:end="5:62"><expr pos:start="5:5" pos:end="5:61"><call pos:start="5:5" pos:end="5:61"><name pos:start="5:5" pos:end="5:20">vmstate_register</name><argument_list pos:start="5:21" pos:end="5:61">(<argument pos:start="5:22" pos:end="5:25"><expr pos:start="5:22" pos:end="5:25"><name pos:start="5:22" pos:end="5:25">NULL</name></expr></argument>, <argument pos:start="5:28" pos:end="5:28"><expr pos:start="5:28" pos:end="5:28"><literal type="number" pos:start="5:28" pos:end="5:28">0</literal></expr></argument>, <argument pos:start="5:31" pos:end="5:45"><expr pos:start="5:31" pos:end="5:45"><operator pos:start="5:31" pos:end="5:31">&amp;</operator><name pos:start="5:32" pos:end="5:45">vmstate_timers</name></expr></argument>, <argument pos:start="5:48" pos:end="5:60"><expr pos:start="5:48" pos:end="5:60"><operator pos:start="5:48" pos:end="5:48">&amp;</operator><name pos:start="5:49" pos:end="5:60">timers_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="7:5" pos:end="14:0"><if pos:start="7:5" pos:end="14:0">if <condition pos:start="7:8" pos:end="7:16">(<expr pos:start="7:9" pos:end="7:15"><operator pos:start="7:9" pos:end="7:9">!</operator><name pos:start="7:10" pos:end="7:15">option</name></expr>)</condition><block type="pseudo" pos:start="9:9" pos:end="14:0"><block_content pos:start="9:9" pos:end="14:0">

        <return pos:start="9:9" pos:end="14:0">return;</return></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="13:1" pos:end="13:22">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:22">CONFIG_IOTHREAD</name></cpp:ifdef>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:76"><name pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:12">vm_clock</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:24">warp_timer</name></name> <operator pos:start="15:26" pos:end="15:26">=</operator> <call pos:start="15:28" pos:end="15:76"><name pos:start="15:28" pos:end="15:44">qemu_new_timer_ns</name><argument_list pos:start="15:45" pos:end="15:76">(<argument pos:start="15:46" pos:end="15:53"><expr pos:start="15:46" pos:end="15:53"><name pos:start="15:46" pos:end="15:53">rt_clock</name></expr></argument>, <argument pos:start="15:56" pos:end="15:69"><expr pos:start="15:56" pos:end="15:69"><name pos:start="15:56" pos:end="15:69">icount_warp_rt</name></expr></argument>, <argument pos:start="15:72" pos:end="15:75"><expr pos:start="15:72" pos:end="15:75"><name pos:start="15:72" pos:end="15:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:36">(<expr pos:start="21:9" pos:end="21:35"><call pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:14">strcmp</name><argument_list pos:start="21:15" pos:end="21:30">(<argument pos:start="21:16" pos:end="21:21"><expr pos:start="21:16" pos:end="21:21"><name pos:start="21:16" pos:end="21:21">option</name></expr></argument>, <argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><literal type="string" pos:start="21:24" pos:end="21:29">"auto"</literal></expr></argument>)</argument_list></call> <operator pos:start="21:32" pos:end="21:33">!=</operator> <literal type="number" pos:start="21:35" pos:end="21:35">0</literal></expr>)</condition> <block pos:start="21:38" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:15">

        <expr_stmt pos:start="23:9" pos:end="23:52"><expr pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:25">icount_time_shift</name> <operator pos:start="23:27" pos:end="23:27">=</operator> <call pos:start="23:29" pos:end="23:51"><name pos:start="23:29" pos:end="23:34">strtol</name><argument_list pos:start="23:35" pos:end="23:51">(<argument pos:start="23:36" pos:end="23:41"><expr pos:start="23:36" pos:end="23:41"><name pos:start="23:36" pos:end="23:41">option</name></expr></argument>, <argument pos:start="23:44" pos:end="23:47"><expr pos:start="23:44" pos:end="23:47"><name pos:start="23:44" pos:end="23:47">NULL</name></expr></argument>, <argument pos:start="23:50" pos:end="23:50"><expr pos:start="23:50" pos:end="23:50"><literal type="number" pos:start="23:50" pos:end="23:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:23"><expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:18">use_icount</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">1</literal></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:14">use_icount</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <literal type="number" pos:start="33:18" pos:end="33:18">2</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="39:54">/* 125MIPS seems a reasonable initial guess at the guest speed.

       It will be corrected fairly quickly anyway.  */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:21">icount_time_shift</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="53:28">/* Have both realtime and virtual time triggers for speed adjustment.

       The realtime trigger catches emulated time passing too slowly,

       the virtual time trigger catches emulated time passing too fast.

       Realtime triggers occur even when idle, so use them less frequently

       than VM triggers.  */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:74"><expr pos:start="55:5" pos:end="55:73"><name pos:start="55:5" pos:end="55:19">icount_rt_timer</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:73"><name pos:start="55:23" pos:end="55:39">qemu_new_timer_ms</name><argument_list pos:start="55:40" pos:end="55:73">(<argument pos:start="55:41" pos:end="55:48"><expr pos:start="55:41" pos:end="55:48"><name pos:start="55:41" pos:end="55:48">rt_clock</name></expr></argument>, <argument pos:start="55:51" pos:end="55:66"><expr pos:start="55:51" pos:end="55:66"><name pos:start="55:51" pos:end="55:66">icount_adjust_rt</name></expr></argument>, <argument pos:start="55:69" pos:end="55:72"><expr pos:start="55:69" pos:end="55:72"><name pos:start="55:69" pos:end="55:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="59:55"><expr pos:start="57:5" pos:end="59:54"><call pos:start="57:5" pos:end="59:54"><name pos:start="57:5" pos:end="57:18">qemu_mod_timer</name><argument_list pos:start="57:19" pos:end="59:54">(<argument pos:start="57:20" pos:end="57:34"><expr pos:start="57:20" pos:end="57:34"><name pos:start="57:20" pos:end="57:34">icount_rt_timer</name></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:53"><expr pos:start="59:20" pos:end="59:53"><call pos:start="59:20" pos:end="59:46"><name pos:start="59:20" pos:end="59:36">qemu_get_clock_ms</name><argument_list pos:start="59:37" pos:end="59:46">(<argument pos:start="59:38" pos:end="59:45"><expr pos:start="59:38" pos:end="59:45"><name pos:start="59:38" pos:end="59:45">rt_clock</name></expr></argument>)</argument_list></call> <operator pos:start="59:48" pos:end="59:48">+</operator> <literal type="number" pos:start="59:50" pos:end="59:53">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:74"><expr pos:start="61:5" pos:end="61:73"><name pos:start="61:5" pos:end="61:19">icount_vm_timer</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:73"><name pos:start="61:23" pos:end="61:39">qemu_new_timer_ns</name><argument_list pos:start="61:40" pos:end="61:73">(<argument pos:start="61:41" pos:end="61:48"><expr pos:start="61:41" pos:end="61:48"><name pos:start="61:41" pos:end="61:48">vm_clock</name></expr></argument>, <argument pos:start="61:51" pos:end="61:66"><expr pos:start="61:51" pos:end="61:66"><name pos:start="61:51" pos:end="61:66">icount_adjust_vm</name></expr></argument>, <argument pos:start="61:69" pos:end="61:72"><expr pos:start="61:69" pos:end="61:72"><name pos:start="61:69" pos:end="61:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:75"><expr pos:start="63:5" pos:end="65:74"><call pos:start="63:5" pos:end="65:74"><name pos:start="63:5" pos:end="63:18">qemu_mod_timer</name><argument_list pos:start="63:19" pos:end="65:74">(<argument pos:start="63:20" pos:end="63:34"><expr pos:start="63:20" pos:end="63:34"><name pos:start="63:20" pos:end="63:34">icount_vm_timer</name></expr></argument>,

                   <argument pos:start="65:20" pos:end="65:73"><expr pos:start="65:20" pos:end="65:73"><call pos:start="65:20" pos:end="65:46"><name pos:start="65:20" pos:end="65:36">qemu_get_clock_ns</name><argument_list pos:start="65:37" pos:end="65:46">(<argument pos:start="65:38" pos:end="65:45"><expr pos:start="65:38" pos:end="65:45"><name pos:start="65:38" pos:end="65:45">vm_clock</name></expr></argument>)</argument_list></call> <operator pos:start="65:48" pos:end="65:48">+</operator> <call pos:start="65:50" pos:end="65:68"><name pos:start="65:50" pos:end="65:66">get_ticks_per_sec</name><argument_list pos:start="65:67" pos:end="65:68">()</argument_list></call> <operator pos:start="65:70" pos:end="65:70">/</operator> <literal type="number" pos:start="65:72" pos:end="65:73">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
