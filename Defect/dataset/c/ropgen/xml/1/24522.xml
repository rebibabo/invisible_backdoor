<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24522.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">rv10_decode_packet</name><parameter_list pos:start="1:30" pos:end="3:56">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, 

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:36">uint8_t</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:41">buf</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:55">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="219:1">{<block_content pos:start="7:5" pos:end="217:20">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MpegEncContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:19">mb_count</name></decl>, <decl pos:start="9:22" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:27">mb_pos</name></decl>, <decl pos:start="9:30" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:33">left</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="26:0"><expr pos:start="13:5" pos:end="13:42"><call pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:17">init_get_bits</name><argument_list pos:start="13:18" pos:end="13:42">(<argument pos:start="13:19" pos:end="13:24"><expr pos:start="13:19" pos:end="13:24"><operator pos:start="13:19" pos:end="13:19">&amp;</operator><name pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:20">s</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:24">gb</name></name></expr></argument>, <argument pos:start="13:27" pos:end="13:29"><expr pos:start="13:27" pos:end="13:29"><name pos:start="13:27" pos:end="13:29">buf</name></expr></argument>, <argument pos:start="13:32" pos:end="13:41"><expr pos:start="13:32" pos:end="13:41"><name pos:start="13:32" pos:end="13:39">buf_size</name><operator pos:start="13:40" pos:end="13:40">*</operator><literal type="number" pos:start="13:41" pos:end="13:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="15:1" pos:end="15:5">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:5"><literal type="number" pos:start="15:5" pos:end="15:5">0</literal></expr></cpp:if>

    for(i=0; i&lt;buf_size*8 &amp;&amp; i&lt;200; i++)

        printf("%d", get_bits1(&amp;s-&gt;gb));

    printf("\n");

    return 0;

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="27:5" pos:end="33:49"><if pos:start="27:5" pos:end="29:49">if<condition pos:start="27:7" pos:end="27:35">(<expr pos:start="27:8" pos:end="27:34"><name pos:start="27:8" pos:end="27:18"><name pos:start="27:8" pos:end="27:8">s</name><operator pos:start="27:9" pos:end="27:10">-&gt;</operator><name pos:start="27:11" pos:end="27:18">codec_id</name></name> <operator pos:start="27:20" pos:end="27:21">==</operator><name pos:start="27:22" pos:end="27:34">CODEC_ID_RV10</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:49"><block_content pos:start="29:9" pos:end="29:49">

        <expr_stmt pos:start="29:9" pos:end="29:49"><expr pos:start="29:9" pos:end="29:48"><name pos:start="29:9" pos:end="29:16">mb_count</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:48"><name pos:start="29:20" pos:end="29:45">rv10_decode_picture_header</name><argument_list pos:start="29:46" pos:end="29:48">(<argument pos:start="29:47" pos:end="29:47"><expr pos:start="29:47" pos:end="29:47"><name pos:start="29:47" pos:end="29:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="31:5" pos:end="33:49">else<block type="pseudo" pos:start="33:9" pos:end="33:49"><block_content pos:start="33:9" pos:end="33:49">

        <expr_stmt pos:start="33:9" pos:end="33:49"><expr pos:start="33:9" pos:end="33:48"><name pos:start="33:9" pos:end="33:16">mb_count</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:48"><name pos:start="33:20" pos:end="33:45">rv20_decode_picture_header</name><argument_list pos:start="33:46" pos:end="33:48">(<argument pos:start="33:47" pos:end="33:47"><expr pos:start="33:47" pos:end="33:47"><name pos:start="33:47" pos:end="33:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:21">(<expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:16">mb_count</name> <operator pos:start="35:18" pos:end="35:18">&lt;</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>)</condition> <block pos:start="35:23" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:57"><expr pos:start="37:9" pos:end="37:56"><call pos:start="37:9" pos:end="37:56"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:56">(<argument pos:start="37:16" pos:end="37:23"><expr pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:23">avctx</name></name></expr></argument>, <argument pos:start="37:26" pos:end="37:37"><expr pos:start="37:26" pos:end="37:37"><name pos:start="37:26" pos:end="37:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:40" pos:end="37:55"><expr pos:start="37:40" pos:end="37:55"><literal type="string" pos:start="37:40" pos:end="37:55">"HEADER ERROR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="47:32">(<expr pos:start="45:9" pos:end="47:31"><name pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:15">mb_x</name></name> <operator pos:start="45:17" pos:end="45:18">&gt;=</operator> <name pos:start="45:20" pos:end="45:30"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:30">mb_width</name></name> <operator pos:start="45:32" pos:end="45:33">||</operator>

        <name pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">mb_y</name></name> <operator pos:start="47:17" pos:end="47:18">&gt;=</operator> <name pos:start="47:20" pos:end="47:31"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:31">mb_height</name></name></expr>)</condition> <block pos:start="47:34" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:78"><expr pos:start="49:9" pos:end="49:77"><call pos:start="49:9" pos:end="49:77"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:77">(<argument pos:start="49:16" pos:end="49:23"><expr pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:16">s</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:23">avctx</name></name></expr></argument>, <argument pos:start="49:26" pos:end="49:37"><expr pos:start="49:26" pos:end="49:37"><name pos:start="49:26" pos:end="49:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:40" pos:end="49:58"><expr pos:start="49:40" pos:end="49:58"><literal type="string" pos:start="49:40" pos:end="49:58">"POS ERROR %d %d\n"</literal></expr></argument>, <argument pos:start="49:61" pos:end="49:67"><expr pos:start="49:61" pos:end="49:67"><name pos:start="49:61" pos:end="49:67"><name pos:start="49:61" pos:end="49:61">s</name><operator pos:start="49:62" pos:end="49:63">-&gt;</operator><name pos:start="49:64" pos:end="49:67">mb_x</name></name></expr></argument>, <argument pos:start="49:70" pos:end="49:76"><expr pos:start="49:70" pos:end="49:76"><name pos:start="49:70" pos:end="49:76"><name pos:start="49:70" pos:end="49:70">s</name><operator pos:start="49:71" pos:end="49:72">-&gt;</operator><name pos:start="49:73" pos:end="49:76">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:45"><expr pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:10">mb_pos</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:20"><name pos:start="55:14" pos:end="55:14">s</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:20">mb_y</name></name> <operator pos:start="55:22" pos:end="55:22">*</operator> <name pos:start="55:24" pos:end="55:34"><name pos:start="55:24" pos:end="55:24">s</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:34">mb_width</name></name> <operator pos:start="55:36" pos:end="55:36">+</operator> <name pos:start="55:38" pos:end="55:44"><name pos:start="55:38" pos:end="55:38">s</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:44">mb_x</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:47"><expr pos:start="57:5" pos:end="57:46"><name pos:start="57:5" pos:end="57:8">left</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <name pos:start="57:12" pos:end="57:22"><name pos:start="57:12" pos:end="57:12">s</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:22">mb_width</name></name> <operator pos:start="57:24" pos:end="57:24">*</operator> <name pos:start="57:26" pos:end="57:37"><name pos:start="57:26" pos:end="57:26">s</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:37">mb_height</name></name> <operator pos:start="57:39" pos:end="57:39">-</operator> <name pos:start="57:41" pos:end="57:46">mb_pos</name></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:24">(<expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:16">mb_count</name> <operator pos:start="59:18" pos:end="59:18">&gt;</operator> <name pos:start="59:20" pos:end="59:23">left</name></expr>)</condition> <block pos:start="59:26" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:18">

        <expr_stmt pos:start="61:9" pos:end="61:56"><expr pos:start="61:9" pos:end="61:55"><call pos:start="61:9" pos:end="61:55"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:55">(<argument pos:start="61:16" pos:end="61:23"><expr pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:16">s</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">avctx</name></name></expr></argument>, <argument pos:start="61:26" pos:end="61:37"><expr pos:start="61:26" pos:end="61:37"><name pos:start="61:26" pos:end="61:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:40" pos:end="61:54"><expr pos:start="61:40" pos:end="61:54"><literal type="string" pos:start="61:40" pos:end="61:54">"COUNT ERROR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<comment type="line" pos:start="67:1" pos:end="67:38">//if(s-&gt;pict_type == P_TYPE) return 0;</comment>



    <if_stmt pos:start="71:5" pos:end="82:0"><if pos:start="71:5" pos:end="82:0">if <condition pos:start="71:8" pos:end="71:37">(<expr pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:15">mb_x</name></name> <operator pos:start="71:17" pos:end="71:18">==</operator> <literal type="number" pos:start="71:20" pos:end="71:20">0</literal> <operator pos:start="71:22" pos:end="71:23">&amp;&amp;</operator> <name pos:start="71:25" pos:end="71:31"><name pos:start="71:25" pos:end="71:25">s</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:31">mb_y</name></name> <operator pos:start="71:33" pos:end="71:34">==</operator> <literal type="number" pos:start="71:36" pos:end="71:36">0</literal></expr>)</condition> <block pos:start="71:39" pos:end="82:0">{<block_content pos:start="73:9" pos:end="75:22">

        <if_stmt pos:start="73:9" pos:end="75:22"><if pos:start="73:9" pos:end="75:22">if<condition pos:start="73:11" pos:end="73:41">(<expr pos:start="73:12" pos:end="73:40"><call pos:start="73:12" pos:end="73:36"><name pos:start="73:12" pos:end="73:26">MPV_frame_start</name><argument_list pos:start="73:27" pos:end="73:36">(<argument pos:start="73:28" pos:end="73:28"><expr pos:start="73:28" pos:end="73:28"><name pos:start="73:28" pos:end="73:28">s</name></expr></argument>, <argument pos:start="73:31" pos:end="73:35"><expr pos:start="73:31" pos:end="73:35"><name pos:start="73:31" pos:end="73:35">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="73:38" pos:end="73:38">&lt;</operator> <literal type="number" pos:start="73:40" pos:end="73:40">0</literal></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:22"><block_content pos:start="75:13" pos:end="75:22">

            <return pos:start="75:13" pos:end="75:22">return <expr pos:start="75:20" pos:end="75:21"><operator pos:start="75:20" pos:end="75:20">-</operator><literal type="number" pos:start="75:21" pos:end="75:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="81:1" pos:end="81:12">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="83:5" pos:end="86:0"><expr pos:start="83:5" pos:end="83:36"><call pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:10">printf</name><argument_list pos:start="83:11" pos:end="83:36">(<argument pos:start="83:12" pos:end="83:24"><expr pos:start="83:12" pos:end="83:24"><literal type="string" pos:start="83:12" pos:end="83:24">"qscale=%d\n"</literal></expr></argument>, <argument pos:start="83:27" pos:end="83:35"><expr pos:start="83:27" pos:end="83:35"><name pos:start="83:27" pos:end="83:35"><name pos:start="83:27" pos:end="83:27">s</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:35">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="89:5" pos:end="89:37">/* default quantization values */</comment>

    <if_stmt pos:start="91:5" pos:end="103:5"><if pos:start="91:5" pos:end="95:5">if<condition pos:start="91:7" pos:end="91:35">(<expr pos:start="91:8" pos:end="91:34"><name pos:start="91:8" pos:end="91:18"><name pos:start="91:8" pos:end="91:8">s</name><operator pos:start="91:9" pos:end="91:10">-&gt;</operator><name pos:start="91:11" pos:end="91:18">codec_id</name></name><operator pos:start="91:19" pos:end="91:20">==</operator> <name pos:start="91:22" pos:end="91:34">CODEC_ID_RV10</name></expr>)</condition><block pos:start="91:36" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:45">

        <if_stmt pos:start="93:9" pos:end="93:45"><if pos:start="93:9" pos:end="93:45">if<condition pos:start="93:11" pos:end="93:22">(<expr pos:start="93:12" pos:end="93:21"><name pos:start="93:12" pos:end="93:18"><name pos:start="93:12" pos:end="93:12">s</name><operator pos:start="93:13" pos:end="93:14">-&gt;</operator><name pos:start="93:15" pos:end="93:18">mb_y</name></name><operator pos:start="93:19" pos:end="93:20">==</operator><literal type="number" pos:start="93:21" pos:end="93:21">0</literal></expr>)</condition><block type="pseudo" pos:start="93:24" pos:end="93:45"><block_content pos:start="93:24" pos:end="93:45"> <expr_stmt pos:start="93:24" pos:end="93:45"><expr pos:start="93:24" pos:end="93:44"><name pos:start="93:24" pos:end="93:42"><name pos:start="93:24" pos:end="93:24">s</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:42">first_slice_line</name></name><operator pos:start="93:43" pos:end="93:43">=</operator><literal type="number" pos:start="93:44" pos:end="93:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if><else pos:start="95:6" pos:end="103:5">else<block pos:start="95:10" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:32">

        <expr_stmt pos:start="97:9" pos:end="97:30"><expr pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:27">first_slice_line</name></name><operator pos:start="97:28" pos:end="97:28">=</operator><literal type="number" pos:start="97:29" pos:end="97:29">1</literal></expr>;</expr_stmt>    

        <expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:22">resync_mb_x</name></name><operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:31"><name pos:start="99:25" pos:end="99:25">s</name><operator pos:start="99:26" pos:end="99:27">-&gt;</operator><name pos:start="99:28" pos:end="99:31">mb_x</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:32"><expr pos:start="101:9" pos:end="101:31"><name pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:22">resync_mb_y</name></name><operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:31"><name pos:start="101:25" pos:end="101:25">s</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:31">mb_y</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="105:5" pos:end="117:5"><if pos:start="105:5" pos:end="111:5">if<condition pos:start="105:7" pos:end="105:19">(<expr pos:start="105:8" pos:end="105:18"><name pos:start="105:8" pos:end="105:18"><name pos:start="105:8" pos:end="105:8">s</name><operator pos:start="105:9" pos:end="105:10">-&gt;</operator><name pos:start="105:11" pos:end="105:18">h263_aic</name></name></expr>)</condition><block pos:start="105:20" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:51">

        <expr_stmt pos:start="107:9" pos:end="109:51"><expr pos:start="107:9" pos:end="109:50"><name pos:start="107:9" pos:end="107:27"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:27">y_dc_scale_table</name></name><operator pos:start="107:28" pos:end="107:28">=</operator> 

        <name pos:start="109:9" pos:end="109:27"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:27">c_dc_scale_table</name></name><operator pos:start="109:28" pos:end="109:28">=</operator> <name pos:start="109:30" pos:end="109:50">ff_aic_dc_scale_table</name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="111:6" pos:end="117:5">else<block pos:start="111:10" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:53">

        <expr_stmt pos:start="113:9" pos:end="115:53"><expr pos:start="113:9" pos:end="115:52"><name pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:27">y_dc_scale_table</name></name><operator pos:start="113:28" pos:end="113:28">=</operator>

        <name pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:27">c_dc_scale_table</name></name><operator pos:start="115:28" pos:end="115:28">=</operator> <name pos:start="115:30" pos:end="115:52">ff_mpeg1_dc_scale_table</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="121:5" pos:end="123:60"><if pos:start="121:5" pos:end="123:60">if<condition pos:start="121:7" pos:end="121:25">(<expr pos:start="121:8" pos:end="121:24"><name pos:start="121:8" pos:end="121:24"><name pos:start="121:8" pos:end="121:8">s</name><operator pos:start="121:9" pos:end="121:10">-&gt;</operator><name pos:start="121:11" pos:end="121:24">modified_quant</name></name></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="123:60"><block_content pos:start="123:9" pos:end="123:60">

        <expr_stmt pos:start="123:9" pos:end="123:60"><expr pos:start="123:9" pos:end="123:59"><name pos:start="123:9" pos:end="123:30"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:30">chroma_qscale_table</name></name><operator pos:start="123:31" pos:end="123:31">=</operator> <name pos:start="123:33" pos:end="123:59">ff_h263_chroma_qscale_table</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        

    <expr_stmt pos:start="127:5" pos:end="127:32"><expr pos:start="127:5" pos:end="127:31"><call pos:start="127:5" pos:end="127:31"><name pos:start="127:5" pos:end="127:17">ff_set_qscale</name><argument_list pos:start="127:18" pos:end="127:31">(<argument pos:start="127:19" pos:end="127:19"><expr pos:start="127:19" pos:end="127:19"><name pos:start="127:19" pos:end="127:19">s</name></expr></argument>, <argument pos:start="127:22" pos:end="127:30"><expr pos:start="127:22" pos:end="127:30"><name pos:start="127:22" pos:end="127:30"><name pos:start="127:22" pos:end="127:22">s</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:30">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:34"><expr pos:start="131:5" pos:end="131:33"><name pos:start="131:5" pos:end="131:29"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:26">rv10_first_dc_coded</name><index pos:start="131:27" pos:end="131:29">[<expr pos:start="131:28" pos:end="131:28"><literal type="number" pos:start="131:28" pos:end="131:28">0</literal></expr>]</index></name> <operator pos:start="131:31" pos:end="131:31">=</operator> <literal type="number" pos:start="131:33" pos:end="131:33">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:34"><expr pos:start="133:5" pos:end="133:33"><name pos:start="133:5" pos:end="133:29"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:26">rv10_first_dc_coded</name><index pos:start="133:27" pos:end="133:29">[<expr pos:start="133:28" pos:end="133:28"><literal type="number" pos:start="133:28" pos:end="133:28">1</literal></expr>]</index></name> <operator pos:start="133:31" pos:end="133:31">=</operator> <literal type="number" pos:start="133:33" pos:end="133:33">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:34"><expr pos:start="135:5" pos:end="135:33"><name pos:start="135:5" pos:end="135:29"><name pos:start="135:5" pos:end="135:5">s</name><operator pos:start="135:6" pos:end="135:7">-&gt;</operator><name pos:start="135:8" pos:end="135:26">rv10_first_dc_coded</name><index pos:start="135:27" pos:end="135:29">[<expr pos:start="135:28" pos:end="135:28"><literal type="number" pos:start="135:28" pos:end="135:28">2</literal></expr>]</index></name> <operator pos:start="135:31" pos:end="135:31">=</operator> <literal type="number" pos:start="135:33" pos:end="135:33">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="145:40"><expr pos:start="139:5" pos:end="145:39"><name pos:start="139:5" pos:end="139:20"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:17">block_wrap</name><index pos:start="139:18" pos:end="139:20">[<expr pos:start="139:19" pos:end="139:19"><literal type="number" pos:start="139:19" pos:end="139:19">0</literal></expr>]</index></name><operator pos:start="139:21" pos:end="139:21">=</operator>

    <name pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:17">block_wrap</name><index pos:start="141:18" pos:end="141:20">[<expr pos:start="141:19" pos:end="141:19"><literal type="number" pos:start="141:19" pos:end="141:19">1</literal></expr>]</index></name><operator pos:start="141:21" pos:end="141:21">=</operator>

    <name pos:start="143:5" pos:end="143:20"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:17">block_wrap</name><index pos:start="143:18" pos:end="143:20">[<expr pos:start="143:19" pos:end="143:19"><literal type="number" pos:start="143:19" pos:end="143:19">2</literal></expr>]</index></name><operator pos:start="143:21" pos:end="143:21">=</operator>

    <name pos:start="145:5" pos:end="145:20"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:17">block_wrap</name><index pos:start="145:18" pos:end="145:20">[<expr pos:start="145:19" pos:end="145:19"><literal type="number" pos:start="145:19" pos:end="145:19">3</literal></expr>]</index></name><operator pos:start="145:21" pos:end="145:21">=</operator> <name pos:start="145:23" pos:end="145:33"><name pos:start="145:23" pos:end="145:23">s</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:33">mb_width</name></name><operator pos:start="145:34" pos:end="145:34">*</operator><literal type="number" pos:start="145:35" pos:end="145:37">2</literal> <operator pos:start="145:37" pos:end="145:37">+</operator> <literal type="number" pos:start="145:39" pos:end="145:39">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="149:38"><expr pos:start="147:5" pos:end="149:37"><name pos:start="147:5" pos:end="147:20"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:17">block_wrap</name><index pos:start="147:18" pos:end="147:20">[<expr pos:start="147:19" pos:end="147:19"><literal type="number" pos:start="147:19" pos:end="147:19">4</literal></expr>]</index></name><operator pos:start="147:21" pos:end="147:21">=</operator>

    <name pos:start="149:5" pos:end="149:20"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:17">block_wrap</name><index pos:start="149:18" pos:end="149:20">[<expr pos:start="149:19" pos:end="149:19"><literal type="number" pos:start="149:19" pos:end="149:19">5</literal></expr>]</index></name><operator pos:start="149:21" pos:end="149:21">=</operator> <name pos:start="149:23" pos:end="149:33"><name pos:start="149:23" pos:end="149:23">s</name><operator pos:start="149:24" pos:end="149:25">-&gt;</operator><name pos:start="149:26" pos:end="149:33">mb_width</name></name> <operator pos:start="149:35" pos:end="149:35">+</operator> <literal type="number" pos:start="149:37" pos:end="149:37">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:27"><expr pos:start="151:5" pos:end="151:26"><call pos:start="151:5" pos:end="151:26"><name pos:start="151:5" pos:end="151:23">ff_init_block_index</name><argument_list pos:start="151:24" pos:end="151:26">(<argument pos:start="151:25" pos:end="151:25"><expr pos:start="151:25" pos:end="151:25"><name pos:start="151:25" pos:end="151:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="153:5" pos:end="153:32">/* decode each macroblock */</comment>

    <for pos:start="155:5" pos:end="213:5">for<control pos:start="155:8" pos:end="155:27">(<init pos:start="155:9" pos:end="155:12"><expr pos:start="155:9" pos:end="155:11"><name pos:start="155:9" pos:end="155:9">i</name><operator pos:start="155:10" pos:end="155:10">=</operator><literal type="number" pos:start="155:11" pos:end="155:11">0</literal></expr>;</init><condition pos:start="155:13" pos:end="155:23"><expr pos:start="155:13" pos:end="155:22"><name pos:start="155:13" pos:end="155:13">i</name><operator pos:start="155:14" pos:end="155:14">&lt;</operator><name pos:start="155:15" pos:end="155:22">mb_count</name></expr>;</condition><incr pos:start="155:24" pos:end="155:26"><expr pos:start="155:24" pos:end="155:26"><name pos:start="155:24" pos:end="155:24">i</name><operator pos:start="155:25" pos:end="155:26">++</operator></expr></incr>)</control> <block pos:start="155:29" pos:end="213:5">{<block_content pos:start="157:9" pos:end="211:35">

        <decl_stmt pos:start="157:9" pos:end="157:16"><decl pos:start="157:9" pos:end="157:15"><type pos:start="157:9" pos:end="157:11"><name pos:start="157:9" pos:end="157:11">int</name></type> <name pos:start="157:13" pos:end="157:15">ret</name></decl>;</decl_stmt>

        <expr_stmt pos:start="159:9" pos:end="162:0"><expr pos:start="159:9" pos:end="159:32"><call pos:start="159:9" pos:end="159:32"><name pos:start="159:9" pos:end="159:29">ff_update_block_index</name><argument_list pos:start="159:30" pos:end="159:32">(<argument pos:start="159:31" pos:end="159:31"><expr pos:start="159:31" pos:end="159:31"><name pos:start="159:31" pos:end="159:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="161:1" pos:end="161:12">#<cpp:directive pos:start="161:2" pos:end="161:6">ifdef</cpp:directive> <name pos:start="161:8" pos:end="161:12">DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="163:9" pos:end="166:0"><expr pos:start="163:9" pos:end="163:52"><call pos:start="163:9" pos:end="163:52"><name pos:start="163:9" pos:end="163:14">printf</name><argument_list pos:start="163:15" pos:end="163:52">(<argument pos:start="163:16" pos:end="163:33"><expr pos:start="163:16" pos:end="163:33"><literal type="string" pos:start="163:16" pos:end="163:33">"**mb x=%d y=%d\n"</literal></expr></argument>, <argument pos:start="163:36" pos:end="163:42"><expr pos:start="163:36" pos:end="163:42"><name pos:start="163:36" pos:end="163:42"><name pos:start="163:36" pos:end="163:36">s</name><operator pos:start="163:37" pos:end="163:38">-&gt;</operator><name pos:start="163:39" pos:end="163:42">mb_x</name></name></expr></argument>, <argument pos:start="163:45" pos:end="163:51"><expr pos:start="163:45" pos:end="163:51"><name pos:start="163:45" pos:end="163:51"><name pos:start="163:45" pos:end="163:45">s</name><operator pos:start="163:46" pos:end="163:47">-&gt;</operator><name pos:start="163:48" pos:end="163:51">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>

        

	<expr_stmt pos:start="169:9" pos:end="169:41"><expr pos:start="169:9" pos:end="169:40"><call pos:start="169:9" pos:end="169:40"><name pos:start="169:9" pos:end="169:27"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:14">dsp</name><operator pos:start="169:15" pos:end="169:15">.</operator><name pos:start="169:16" pos:end="169:27">clear_blocks</name></name><argument_list pos:start="169:28" pos:end="169:40">(<argument pos:start="169:29" pos:end="169:39"><expr pos:start="169:29" pos:end="169:39"><name pos:start="169:29" pos:end="169:39"><name pos:start="169:29" pos:end="169:29">s</name><operator pos:start="169:30" pos:end="169:31">-&gt;</operator><name pos:start="169:32" pos:end="169:36">block</name><index pos:start="169:37" pos:end="169:39">[<expr pos:start="169:38" pos:end="169:38"><literal type="number" pos:start="169:38" pos:end="169:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:35"><expr pos:start="171:9" pos:end="171:34"><name pos:start="171:9" pos:end="171:17"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:17">mv_dir</name></name> <operator pos:start="171:19" pos:end="171:19">=</operator> <name pos:start="171:21" pos:end="171:34">MV_DIR_FORWARD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:35"><expr pos:start="173:9" pos:end="173:34"><name pos:start="173:9" pos:end="173:18"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:18">mv_type</name></name> <operator pos:start="173:20" pos:end="173:20">=</operator> <name pos:start="173:22" pos:end="173:34">MV_TYPE_16X16</name></expr>;</expr_stmt> 

        <expr_stmt pos:start="175:9" pos:end="175:43"><expr pos:start="175:9" pos:end="175:42"><name pos:start="175:9" pos:end="175:11">ret</name><operator pos:start="175:12" pos:end="175:12">=</operator><call pos:start="175:13" pos:end="175:42"><name pos:start="175:13" pos:end="175:29">ff_h263_decode_mb</name><argument_list pos:start="175:30" pos:end="175:42">(<argument pos:start="175:31" pos:end="175:31"><expr pos:start="175:31" pos:end="175:31"><name pos:start="175:31" pos:end="175:31">s</name></expr></argument>, <argument pos:start="175:34" pos:end="175:41"><expr pos:start="175:34" pos:end="175:41"><name pos:start="175:34" pos:end="175:41"><name pos:start="175:34" pos:end="175:34">s</name><operator pos:start="175:35" pos:end="175:36">-&gt;</operator><name pos:start="175:37" pos:end="175:41">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="179:9" pos:end="185:9"><if pos:start="179:9" pos:end="185:9">if <condition pos:start="179:12" pos:end="179:31">(<expr pos:start="179:13" pos:end="179:30"><name pos:start="179:13" pos:end="179:15">ret</name> <operator pos:start="179:17" pos:end="179:18">==</operator> <name pos:start="179:20" pos:end="179:30">SLICE_ERROR</name></expr>)</condition> <block pos:start="179:33" pos:end="185:9">{<block_content pos:start="181:13" pos:end="183:22">

            <expr_stmt pos:start="181:13" pos:end="181:84"><expr pos:start="181:13" pos:end="181:83"><call pos:start="181:13" pos:end="181:83"><name pos:start="181:13" pos:end="181:18">av_log</name><argument_list pos:start="181:19" pos:end="181:83">(<argument pos:start="181:20" pos:end="181:27"><expr pos:start="181:20" pos:end="181:27"><name pos:start="181:20" pos:end="181:27"><name pos:start="181:20" pos:end="181:20">s</name><operator pos:start="181:21" pos:end="181:22">-&gt;</operator><name pos:start="181:23" pos:end="181:27">avctx</name></name></expr></argument>, <argument pos:start="181:30" pos:end="181:41"><expr pos:start="181:30" pos:end="181:41"><name pos:start="181:30" pos:end="181:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:44" pos:end="181:64"><expr pos:start="181:44" pos:end="181:64"><literal type="string" pos:start="181:44" pos:end="181:64">"ERROR at MB %d %d\n"</literal></expr></argument>, <argument pos:start="181:67" pos:end="181:73"><expr pos:start="181:67" pos:end="181:73"><name pos:start="181:67" pos:end="181:73"><name pos:start="181:67" pos:end="181:67">s</name><operator pos:start="181:68" pos:end="181:69">-&gt;</operator><name pos:start="181:70" pos:end="181:73">mb_x</name></name></expr></argument>, <argument pos:start="181:76" pos:end="181:82"><expr pos:start="181:76" pos:end="181:82"><name pos:start="181:76" pos:end="181:82"><name pos:start="181:76" pos:end="181:76">s</name><operator pos:start="181:77" pos:end="181:78">-&gt;</operator><name pos:start="181:79" pos:end="181:82">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="183:13" pos:end="183:22">return <expr pos:start="183:20" pos:end="183:21"><operator pos:start="183:20" pos:end="183:20">-</operator><literal type="number" pos:start="183:21" pos:end="183:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:37"><expr pos:start="187:9" pos:end="187:36"><call pos:start="187:9" pos:end="187:36"><name pos:start="187:9" pos:end="187:33">ff_h263_update_motion_val</name><argument_list pos:start="187:34" pos:end="187:36">(<argument pos:start="187:35" pos:end="187:35"><expr pos:start="187:35" pos:end="187:35"><name pos:start="187:35" pos:end="187:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:35"><expr pos:start="189:9" pos:end="189:34"><call pos:start="189:9" pos:end="189:34"><name pos:start="189:9" pos:end="189:21">MPV_decode_mb</name><argument_list pos:start="189:22" pos:end="189:34">(<argument pos:start="189:23" pos:end="189:23"><expr pos:start="189:23" pos:end="189:23"><name pos:start="189:23" pos:end="189:23">s</name></expr></argument>, <argument pos:start="189:26" pos:end="189:33"><expr pos:start="189:26" pos:end="189:33"><name pos:start="189:26" pos:end="189:33"><name pos:start="189:26" pos:end="189:26">s</name><operator pos:start="189:27" pos:end="189:28">-&gt;</operator><name pos:start="189:29" pos:end="189:33">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="193:35"><if pos:start="191:9" pos:end="193:35">if<condition pos:start="191:11" pos:end="191:26">(<expr pos:start="191:12" pos:end="191:25"><name pos:start="191:12" pos:end="191:25"><name pos:start="191:12" pos:end="191:12">s</name><operator pos:start="191:13" pos:end="191:14">-&gt;</operator><name pos:start="191:15" pos:end="191:25">loop_filter</name></name></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:35"><block_content pos:start="193:13" pos:end="193:35">

            <expr_stmt pos:start="193:13" pos:end="193:35"><expr pos:start="193:13" pos:end="193:34"><call pos:start="193:13" pos:end="193:34"><name pos:start="193:13" pos:end="193:31">ff_h263_loop_filter</name><argument_list pos:start="193:32" pos:end="193:34">(<argument pos:start="193:33" pos:end="193:33"><expr pos:start="193:33" pos:end="193:33"><name pos:start="193:33" pos:end="193:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="197:9" pos:end="205:9"><if pos:start="197:9" pos:end="205:9">if <condition pos:start="197:12" pos:end="197:37">(<expr pos:start="197:13" pos:end="197:36"><operator pos:start="197:13" pos:end="197:14">++</operator><name pos:start="197:15" pos:end="197:21"><name pos:start="197:15" pos:end="197:15">s</name><operator pos:start="197:16" pos:end="197:17">-&gt;</operator><name pos:start="197:18" pos:end="197:21">mb_x</name></name> <operator pos:start="197:23" pos:end="197:24">==</operator> <name pos:start="197:26" pos:end="197:36"><name pos:start="197:26" pos:end="197:26">s</name><operator pos:start="197:27" pos:end="197:28">-&gt;</operator><name pos:start="197:29" pos:end="197:36">mb_width</name></name></expr>)</condition> <block pos:start="197:39" pos:end="205:9">{<block_content pos:start="199:13" pos:end="203:35">

            <expr_stmt pos:start="199:13" pos:end="199:24"><expr pos:start="199:13" pos:end="199:23"><name pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:13">s</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:19">mb_x</name></name> <operator pos:start="199:21" pos:end="199:21">=</operator> <literal type="number" pos:start="199:23" pos:end="199:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:22"><expr pos:start="201:13" pos:end="201:21"><name pos:start="201:13" pos:end="201:19"><name pos:start="201:13" pos:end="201:13">s</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:19">mb_y</name></name><operator pos:start="201:20" pos:end="201:21">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:35"><expr pos:start="203:13" pos:end="203:34"><call pos:start="203:13" pos:end="203:34"><name pos:start="203:13" pos:end="203:31">ff_init_block_index</name><argument_list pos:start="203:32" pos:end="203:34">(<argument pos:start="203:33" pos:end="203:33"><expr pos:start="203:33" pos:end="203:33"><name pos:start="203:33" pos:end="203:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="207:9" pos:end="209:34"><if pos:start="207:9" pos:end="209:34">if<condition pos:start="207:11" pos:end="207:37">(<expr pos:start="207:12" pos:end="207:36"><name pos:start="207:12" pos:end="207:18"><name pos:start="207:12" pos:end="207:12">s</name><operator pos:start="207:13" pos:end="207:14">-&gt;</operator><name pos:start="207:15" pos:end="207:18">mb_x</name></name> <operator pos:start="207:20" pos:end="207:21">==</operator> <name pos:start="207:23" pos:end="207:36"><name pos:start="207:23" pos:end="207:23">s</name><operator pos:start="207:24" pos:end="207:25">-&gt;</operator><name pos:start="207:26" pos:end="207:36">resync_mb_x</name></name></expr>)</condition><block type="pseudo" pos:start="209:13" pos:end="209:34"><block_content pos:start="209:13" pos:end="209:34">

            <expr_stmt pos:start="209:13" pos:end="209:34"><expr pos:start="209:13" pos:end="209:33"><name pos:start="209:13" pos:end="209:31"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:31">first_slice_line</name></name><operator pos:start="209:32" pos:end="209:32">=</operator><literal type="number" pos:start="209:33" pos:end="209:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="211:9" pos:end="211:35"><if pos:start="211:9" pos:end="211:35">if<condition pos:start="211:11" pos:end="211:28">(<expr pos:start="211:12" pos:end="211:27"><name pos:start="211:12" pos:end="211:14">ret</name> <operator pos:start="211:16" pos:end="211:17">==</operator> <name pos:start="211:19" pos:end="211:27">SLICE_END</name></expr>)</condition><block type="pseudo" pos:start="211:30" pos:end="211:35"><block_content pos:start="211:30" pos:end="211:35"> <break pos:start="211:30" pos:end="211:35">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="217:5" pos:end="217:20">return <expr pos:start="217:12" pos:end="217:19"><name pos:start="217:12" pos:end="217:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
