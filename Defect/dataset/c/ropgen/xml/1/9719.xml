<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9719.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">boston_platreg_write</name><parameter_list pos:start="1:33" pos:end="3:61">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:53">hwaddr</name></type> <name pos:start="1:55" pos:end="1:58">addr</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:45"><decl pos:start="3:34" pos:end="3:45"><type pos:start="3:34" pos:end="3:45"><name pos:start="3:34" pos:end="3:41">uint64_t</name></type> <name pos:start="3:43" pos:end="3:45">val</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:60"><decl pos:start="3:48" pos:end="3:60"><type pos:start="3:48" pos:end="3:60"><name pos:start="3:48" pos:end="3:55">unsigned</name></type> <name pos:start="3:57" pos:end="3:60">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:5">

    <if_stmt pos:start="7:5" pos:end="13:5"><if pos:start="7:5" pos:end="13:5">if <condition pos:start="7:8" pos:end="7:18">(<expr pos:start="7:9" pos:end="7:17"><name pos:start="7:9" pos:end="7:12">size</name> <operator pos:start="7:14" pos:end="7:15">!=</operator> <literal type="number" pos:start="7:17" pos:end="7:17">4</literal></expr>)</condition> <block pos:start="7:20" pos:end="13:5">{<block_content pos:start="9:9" pos:end="11:15">

        <expr_stmt pos:start="9:9" pos:end="9:70"><expr pos:start="9:9" pos:end="9:69"><call pos:start="9:9" pos:end="9:69"><name pos:start="9:9" pos:end="9:21">qemu_log_mask</name><argument_list pos:start="9:22" pos:end="9:69">(<argument pos:start="9:23" pos:end="9:31"><expr pos:start="9:23" pos:end="9:31"><name pos:start="9:23" pos:end="9:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="9:34" pos:end="9:62"><expr pos:start="9:34" pos:end="9:62"><literal type="string" pos:start="9:34" pos:end="9:62">"%uB platform register write"</literal></expr></argument>, <argument pos:start="9:65" pos:end="9:68"><expr pos:start="9:65" pos:end="9:68"><name pos:start="9:65" pos:end="9:68">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="11:9" pos:end="11:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="17:5" pos:end="57:5">switch <condition pos:start="17:12" pos:end="17:26">(<expr pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:16">addr</name> <operator pos:start="17:18" pos:end="17:18">&amp;</operator> <literal type="number" pos:start="17:20" pos:end="17:25">0xffff</literal></expr>)</condition> <block pos:start="17:28" pos:end="57:5">{<block_content pos:start="19:5" pos:end="55:14">

    <case pos:start="19:5" pos:end="19:25">case <expr pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:24">PLAT_FPGA_BUILD</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:22">case <expr pos:start="21:10" pos:end="21:21"><name pos:start="21:10" pos:end="21:21">PLAT_CORE_CL</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:25">case <expr pos:start="23:10" pos:end="23:24"><name pos:start="23:10" pos:end="23:24">PLAT_WRAPPER_CL</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:26">case <expr pos:start="25:10" pos:end="25:25"><name pos:start="25:10" pos:end="25:25">PLAT_DDR3_STATUS</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:26">case <expr pos:start="27:10" pos:end="27:25"><name pos:start="27:10" pos:end="27:25">PLAT_PCIE_STATUS</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:23">case <expr pos:start="29:10" pos:end="29:22"><name pos:start="29:10" pos:end="29:22">PLAT_MMCM_DIV</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:24">case <expr pos:start="31:10" pos:end="31:23"><name pos:start="31:10" pos:end="31:23">PLAT_BUILD_CFG</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:22">case <expr pos:start="33:10" pos:end="33:21"><name pos:start="33:10" pos:end="33:21">PLAT_DDR_CFG</name></expr>:</case>

        <comment type="block" pos:start="35:9" pos:end="35:23">/* read only */</comment>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:26">case <expr pos:start="39:10" pos:end="39:25"><name pos:start="39:10" pos:end="39:25">PLAT_SOFTRST_CTL</name></expr>:</case>

        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:44">(<expr pos:start="41:13" pos:end="41:43"><name pos:start="41:13" pos:end="41:15">val</name> <operator pos:start="41:17" pos:end="41:17">&amp;</operator> <name pos:start="41:19" pos:end="41:43">PLAT_SOFTRST_CTL_SYSRESET</name></expr>)</condition> <block pos:start="41:46" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:40">

            <expr_stmt pos:start="43:13" pos:end="43:40"><expr pos:start="43:13" pos:end="43:39"><call pos:start="43:13" pos:end="43:39"><name pos:start="43:13" pos:end="43:37">qemu_system_reset_request</name><argument_list pos:start="43:38" pos:end="43:39">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <default pos:start="49:5" pos:end="49:12">default:</default>

        <expr_stmt pos:start="51:9" pos:end="53:59"><expr pos:start="51:9" pos:end="53:58"><call pos:start="51:9" pos:end="53:58"><name pos:start="51:9" pos:end="51:21">qemu_log_mask</name><argument_list pos:start="51:22" pos:end="53:58">(<argument pos:start="51:23" pos:end="51:31"><expr pos:start="51:23" pos:end="51:31"><name pos:start="51:23" pos:end="51:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="51:34" pos:end="53:37"><expr pos:start="51:34" pos:end="53:37"><literal type="string" pos:start="51:34" pos:end="51:62">"Write platform register 0x%"</literal> <name pos:start="51:64" pos:end="51:74">HWADDR_PRIx</name>

                      <literal type="string" pos:start="53:23" pos:end="53:30">" = 0x%"</literal> <name pos:start="53:32" pos:end="53:37">PRIx64</name></expr></argument>, <argument pos:start="53:40" pos:end="53:52"><expr pos:start="53:40" pos:end="53:52"><name pos:start="53:40" pos:end="53:43">addr</name> <operator pos:start="53:45" pos:end="53:45">&amp;</operator> <literal type="number" pos:start="53:47" pos:end="53:52">0xffff</literal></expr></argument>, <argument pos:start="53:55" pos:end="53:57"><expr pos:start="53:55" pos:end="53:57"><name pos:start="53:55" pos:end="53:57">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
