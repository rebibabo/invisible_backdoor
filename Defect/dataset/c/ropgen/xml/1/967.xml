<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/967.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">aio_set_fd_handler</name><parameter_list pos:start="1:24" pos:end="11:37">(<parameter pos:start="1:25" pos:end="1:39"><decl pos:start="1:25" pos:end="1:39"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:34">AioContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">ctx</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:30"><decl pos:start="3:25" pos:end="3:30"><type pos:start="3:25" pos:end="3:30"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:30">fd</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:40"><decl pos:start="5:25" pos:end="5:40"><type pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:28">bool</name></type> <name pos:start="5:30" pos:end="5:40">is_external</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:42"><decl pos:start="7:25" pos:end="7:42"><type pos:start="7:25" pos:end="7:42"><name pos:start="7:25" pos:end="7:33">IOHandler</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:42">io_read</name></decl></parameter>,

                        <parameter pos:start="9:25" pos:end="9:43"><decl pos:start="9:25" pos:end="9:43"><type pos:start="9:25" pos:end="9:43"><name pos:start="9:25" pos:end="9:33">IOHandler</name> <modifier pos:start="9:35" pos:end="9:35">*</modifier></type><name pos:start="9:36" pos:end="9:43">io_write</name></decl></parameter>,

                        <parameter pos:start="11:25" pos:end="11:36"><decl pos:start="11:25" pos:end="11:36"><type pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:28">void</name> <modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:36">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="105:1">{<block_content pos:start="15:5" pos:end="103:20">

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">AioHandler</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:20">node</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:15">is_new</name> <init pos:start="17:17" pos:end="17:23">= <expr pos:start="17:19" pos:end="17:23"><name pos:start="17:19" pos:end="17:23">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:37"><expr pos:start="21:5" pos:end="21:36"><name pos:start="21:5" pos:end="21:8">node</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:36"><name pos:start="21:12" pos:end="21:27">find_aio_handler</name><argument_list pos:start="21:28" pos:end="21:36">(<argument pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:31">ctx</name></expr></argument>, <argument pos:start="21:34" pos:end="21:35"><expr pos:start="21:34" pos:end="21:35"><name pos:start="21:34" pos:end="21:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:41">/* Are we deleting the fd handler? */</comment>

    <if_stmt pos:start="27:5" pos:end="97:5"><if pos:start="27:5" pos:end="61:5">if <condition pos:start="27:8" pos:end="27:30">(<expr pos:start="27:9" pos:end="27:29"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:16">io_read</name> <operator pos:start="27:18" pos:end="27:19">&amp;&amp;</operator> <operator pos:start="27:21" pos:end="27:21">!</operator><name pos:start="27:22" pos:end="27:29">io_write</name></expr>)</condition> <block pos:start="27:32" pos:end="61:5">{<block_content pos:start="29:9" pos:end="59:9">

        <if_stmt pos:start="29:9" pos:end="59:9"><if pos:start="29:9" pos:end="59:9">if <condition pos:start="29:12" pos:end="29:17">(<expr pos:start="29:13" pos:end="29:16"><name pos:start="29:13" pos:end="29:16">node</name></expr>)</condition> <block pos:start="29:19" pos:end="59:9">{<block_content pos:start="31:13" pos:end="57:13">

            <expr_stmt pos:start="31:13" pos:end="31:59"><expr pos:start="31:13" pos:end="31:58"><call pos:start="31:13" pos:end="31:58"><name pos:start="31:13" pos:end="31:32">g_source_remove_poll</name><argument_list pos:start="31:33" pos:end="31:58">(<argument pos:start="31:34" pos:end="31:45"><expr pos:start="31:34" pos:end="31:45"><operator pos:start="31:34" pos:end="31:34">&amp;</operator><name pos:start="31:35" pos:end="31:45"><name pos:start="31:35" pos:end="31:37">ctx</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:45">source</name></name></expr></argument>, <argument pos:start="31:48" pos:end="31:57"><expr pos:start="31:48" pos:end="31:57"><operator pos:start="31:48" pos:end="31:48">&amp;</operator><name pos:start="31:49" pos:end="31:57"><name pos:start="31:49" pos:end="31:52">node</name><operator pos:start="31:53" pos:end="31:54">-&gt;</operator><name pos:start="31:55" pos:end="31:57">pfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="35:13" pos:end="35:68">/* If the lock is held, just mark the node as deleted */</comment>

            <if_stmt pos:start="37:13" pos:end="57:13"><if pos:start="37:13" pos:end="43:13">if <condition pos:start="37:16" pos:end="37:38">(<expr pos:start="37:17" pos:end="37:37"><name pos:start="37:17" pos:end="37:37"><name pos:start="37:17" pos:end="37:19">ctx</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:37">walking_handlers</name></name></expr>)</condition> <block pos:start="37:40" pos:end="43:13">{<block_content pos:start="39:17" pos:end="41:38">

                <expr_stmt pos:start="39:17" pos:end="39:34"><expr pos:start="39:17" pos:end="39:33"><name pos:start="39:17" pos:end="39:29"><name pos:start="39:17" pos:end="39:20">node</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:29">deleted</name></name> <operator pos:start="39:31" pos:end="39:31">=</operator> <literal type="number" pos:start="39:33" pos:end="39:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:38"><expr pos:start="41:17" pos:end="41:37"><name pos:start="41:17" pos:end="41:33"><name pos:start="41:17" pos:end="41:20">node</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:25">pfd</name><operator pos:start="41:26" pos:end="41:26">.</operator><name pos:start="41:27" pos:end="41:33">revents</name></name> <operator pos:start="41:35" pos:end="41:35">=</operator> <literal type="number" pos:start="41:37" pos:end="41:37">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="43:15" pos:end="57:13">else <block pos:start="43:20" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:29">

                <comment type="block" pos:start="45:17" pos:end="51:19">/* Otherwise, delete it for real.  We can't just mark it as

                 * deleted because deleted nodes are only cleaned up after

                 * releasing the walking_handlers lock.

                 */</comment>

                <expr_stmt pos:start="53:17" pos:end="53:41"><expr pos:start="53:17" pos:end="53:40"><call pos:start="53:17" pos:end="53:40"><name pos:start="53:17" pos:end="53:28">QLIST_REMOVE</name><argument_list pos:start="53:29" pos:end="53:40">(<argument pos:start="53:30" pos:end="53:33"><expr pos:start="53:30" pos:end="53:33"><name pos:start="53:30" pos:end="53:33">node</name></expr></argument>, <argument pos:start="53:36" pos:end="53:39"><expr pos:start="53:36" pos:end="53:39"><name pos:start="53:36" pos:end="53:39">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:29"><expr pos:start="55:17" pos:end="55:28"><call pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:22">g_free</name><argument_list pos:start="55:23" pos:end="55:28">(<argument pos:start="55:24" pos:end="55:27"><expr pos:start="55:24" pos:end="55:27"><name pos:start="55:24" pos:end="55:27">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="97:5">else <block pos:start="61:12" pos:end="97:5">{<block_content pos:start="63:9" pos:end="95:65">

        <if_stmt pos:start="63:9" pos:end="79:9"><if pos:start="63:9" pos:end="79:9">if <condition pos:start="63:12" pos:end="63:25">(<expr pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:16">node</name> <operator pos:start="63:18" pos:end="63:19">==</operator> <name pos:start="63:21" pos:end="63:24">NULL</name></expr>)</condition> <block pos:start="63:27" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:26">

            <comment type="block" pos:start="65:13" pos:end="65:60">/* Alloc and insert if it's not already there */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:41"><expr pos:start="67:13" pos:end="67:40"><name pos:start="67:13" pos:end="67:16">node</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <call pos:start="67:20" pos:end="67:40"><name pos:start="67:20" pos:end="67:25">g_new0</name><argument_list pos:start="67:26" pos:end="67:40">(<argument pos:start="67:27" pos:end="67:36"><expr pos:start="67:27" pos:end="67:36"><name pos:start="67:27" pos:end="67:36">AioHandler</name></expr></argument>, <argument pos:start="67:39" pos:end="67:39"><expr pos:start="67:39" pos:end="67:39"><literal type="number" pos:start="67:39" pos:end="67:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:16">node</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:21">pfd</name><operator pos:start="69:22" pos:end="69:22">.</operator><name pos:start="69:23" pos:end="69:24">fd</name></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:29">fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:62"><expr pos:start="71:13" pos:end="71:61"><call pos:start="71:13" pos:end="71:61"><name pos:start="71:13" pos:end="71:29">QLIST_INSERT_HEAD</name><argument_list pos:start="71:30" pos:end="71:61">(<argument pos:start="71:31" pos:end="71:48"><expr pos:start="71:31" pos:end="71:48"><operator pos:start="71:31" pos:end="71:31">&amp;</operator><name pos:start="71:32" pos:end="71:48"><name pos:start="71:32" pos:end="71:34">ctx</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:48">aio_handlers</name></name></expr></argument>, <argument pos:start="71:51" pos:end="71:54"><expr pos:start="71:51" pos:end="71:54"><name pos:start="71:51" pos:end="71:54">node</name></expr></argument>, <argument pos:start="71:57" pos:end="71:60"><expr pos:start="71:57" pos:end="71:60"><name pos:start="71:57" pos:end="71:60">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="75:13" pos:end="75:56"><expr pos:start="75:13" pos:end="75:55"><call pos:start="75:13" pos:end="75:55"><name pos:start="75:13" pos:end="75:29">g_source_add_poll</name><argument_list pos:start="75:30" pos:end="75:55">(<argument pos:start="75:31" pos:end="75:42"><expr pos:start="75:31" pos:end="75:42"><operator pos:start="75:31" pos:end="75:31">&amp;</operator><name pos:start="75:32" pos:end="75:42"><name pos:start="75:32" pos:end="75:34">ctx</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:42">source</name></name></expr></argument>, <argument pos:start="75:45" pos:end="75:54"><expr pos:start="75:45" pos:end="75:54"><operator pos:start="75:45" pos:end="75:45">&amp;</operator><name pos:start="75:46" pos:end="75:54"><name pos:start="75:46" pos:end="75:49">node</name><operator pos:start="75:50" pos:end="75:51">-&gt;</operator><name pos:start="75:52" pos:end="75:54">pfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:26"><expr pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:18">is_new</name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:25">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="81:9" pos:end="81:52">/* Update handler with latest information */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:32"><expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:12">node</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:21">io_read</name></name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:31">io_read</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:34"><expr pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:12">node</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:22">io_write</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:33">io_write</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:12">node</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:20">opaque</name></name> <operator pos:start="87:22" pos:end="87:22">=</operator> <name pos:start="87:24" pos:end="87:29">opaque</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:40"><expr pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:12">node</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:25">is_external</name></name> <operator pos:start="89:27" pos:end="89:27">=</operator> <name pos:start="89:29" pos:end="89:39">is_external</name></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:73"><expr pos:start="93:9" pos:end="93:72"><name pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:12">node</name><operator pos:start="93:13" pos:end="93:14">-&gt;</operator><name pos:start="93:15" pos:end="93:17">pfd</name><operator pos:start="93:18" pos:end="93:18">.</operator><name pos:start="93:19" pos:end="93:24">events</name></name> <operator pos:start="93:26" pos:end="93:26">=</operator> <operator pos:start="93:28" pos:end="93:28">(</operator><ternary pos:start="93:29" pos:end="93:71"><condition pos:start="93:29" pos:end="93:37"><expr pos:start="93:29" pos:end="93:35"><name pos:start="93:29" pos:end="93:35">io_read</name></expr> ?</condition><then pos:start="93:39" pos:end="93:67"> <expr pos:start="93:39" pos:end="93:67"><name pos:start="93:39" pos:end="93:45">G_IO_IN</name> <operator pos:start="93:47" pos:end="93:47">|</operator> <name pos:start="93:49" pos:end="93:56">G_IO_HUP</name> <operator pos:start="93:58" pos:end="93:58">|</operator> <name pos:start="93:60" pos:end="93:67">G_IO_ERR</name></expr> </then><else pos:start="93:69" pos:end="93:71">: <expr pos:start="93:71" pos:end="93:71"><literal type="number" pos:start="93:71" pos:end="93:71">0</literal></expr></else></ternary><operator pos:start="93:72" pos:end="93:72">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:65"><expr pos:start="95:9" pos:end="95:64"><name pos:start="95:9" pos:end="95:24"><name pos:start="95:9" pos:end="95:12">node</name><operator pos:start="95:13" pos:end="95:14">-&gt;</operator><name pos:start="95:15" pos:end="95:17">pfd</name><operator pos:start="95:18" pos:end="95:18">.</operator><name pos:start="95:19" pos:end="95:24">events</name></name> <operator pos:start="95:26" pos:end="95:27">|=</operator> <operator pos:start="95:29" pos:end="95:29">(</operator><ternary pos:start="95:30" pos:end="95:63"><condition pos:start="95:30" pos:end="95:39"><expr pos:start="95:30" pos:end="95:37"><name pos:start="95:30" pos:end="95:37">io_write</name></expr> ?</condition><then pos:start="95:41" pos:end="95:59"> <expr pos:start="95:41" pos:end="95:59"><name pos:start="95:41" pos:end="95:48">G_IO_OUT</name> <operator pos:start="95:50" pos:end="95:50">|</operator> <name pos:start="95:52" pos:end="95:59">G_IO_ERR</name></expr> </then><else pos:start="95:61" pos:end="95:63">: <expr pos:start="95:63" pos:end="95:63"><literal type="number" pos:start="95:63" pos:end="95:63">0</literal></expr></else></ternary><operator pos:start="95:64" pos:end="95:64">)</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:40"><expr pos:start="101:5" pos:end="101:39"><call pos:start="101:5" pos:end="101:39"><name pos:start="101:5" pos:end="101:20">aio_epoll_update</name><argument_list pos:start="101:21" pos:end="101:39">(<argument pos:start="101:22" pos:end="101:24"><expr pos:start="101:22" pos:end="101:24"><name pos:start="101:22" pos:end="101:24">ctx</name></expr></argument>, <argument pos:start="101:27" pos:end="101:30"><expr pos:start="101:27" pos:end="101:30"><name pos:start="101:27" pos:end="101:30">node</name></expr></argument>, <argument pos:start="101:33" pos:end="101:38"><expr pos:start="101:33" pos:end="101:38"><name pos:start="101:33" pos:end="101:38">is_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:20"><expr pos:start="103:5" pos:end="103:19"><call pos:start="103:5" pos:end="103:19"><name pos:start="103:5" pos:end="103:14">aio_notify</name><argument_list pos:start="103:15" pos:end="103:19">(<argument pos:start="103:16" pos:end="103:18"><expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
