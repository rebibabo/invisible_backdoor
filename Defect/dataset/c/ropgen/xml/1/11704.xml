<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11704.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">xen_pt_initfn</name><parameter_list pos:start="1:25" pos:end="1:38">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:36"><name pos:start="1:26" pos:end="1:34">PCIDevice</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="5:5" pos:end="295:13">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26">XenPCIPassthroughState</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:29">s</name> <init pos:start="5:31" pos:end="5:48">= <expr pos:start="5:33" pos:end="5:48"><call pos:start="5:33" pos:end="5:48"><name pos:start="5:33" pos:end="5:45">XEN_PT_DEVICE</name><argument_list pos:start="5:46" pos:end="5:48">(<argument pos:start="5:47" pos:end="5:47"><expr pos:start="5:47" pos:end="5:47"><name pos:start="5:47" pos:end="5:47">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">rc</name> <init pos:start="7:12" pos:end="7:14">= <expr pos:start="7:14" pos:end="7:14"><literal type="number" pos:start="7:14" pos:end="7:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:23">machine_irq</name> <init pos:start="9:25" pos:end="9:27">= <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr></init></decl>, <decl pos:start="9:30" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:30" pos:end="9:36">scratch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:16">cmd</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">pirq</name> <init pos:start="13:14" pos:end="13:37">= <expr pos:start="13:16" pos:end="13:37"><name pos:start="13:16" pos:end="13:37">XEN_PT_UNASSIGNED_PIRQ</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:30">/* register real device */</comment>

    <expr_stmt pos:start="19:5" pos:end="25:29"><expr pos:start="19:5" pos:end="25:28"><call pos:start="19:5" pos:end="25:28"><name pos:start="19:5" pos:end="19:14">XEN_PT_LOG</name><argument_list pos:start="19:15" pos:end="25:28">(<argument pos:start="19:16" pos:end="19:16"><expr pos:start="19:16" pos:end="19:16"><name pos:start="19:16" pos:end="19:16">d</name></expr></argument>, <argument pos:start="19:19" pos:end="21:32"><expr pos:start="19:19" pos:end="21:32"><literal type="string" pos:start="19:19" pos:end="19:63">"Assigning real physical device %02x:%02x.%d"</literal>

               <literal type="string" pos:start="21:16" pos:end="21:32">" to devfn %#x\n"</literal></expr></argument>,

               <argument pos:start="23:16" pos:end="23:30"><expr pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:16">s</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:26">hostaddr</name><operator pos:start="23:27" pos:end="23:27">.</operator><name pos:start="23:28" pos:end="23:30">bus</name></name></expr></argument>, <argument pos:start="23:33" pos:end="23:48"><expr pos:start="23:33" pos:end="23:48"><name pos:start="23:33" pos:end="23:48"><name pos:start="23:33" pos:end="23:33">s</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:43">hostaddr</name><operator pos:start="23:44" pos:end="23:44">.</operator><name pos:start="23:45" pos:end="23:48">slot</name></name></expr></argument>, <argument pos:start="23:51" pos:end="23:70"><expr pos:start="23:51" pos:end="23:70"><name pos:start="23:51" pos:end="23:70"><name pos:start="23:51" pos:end="23:51">s</name><operator pos:start="23:52" pos:end="23:53">-&gt;</operator><name pos:start="23:54" pos:end="23:61">hostaddr</name><operator pos:start="23:62" pos:end="23:62">.</operator><name pos:start="23:63" pos:end="23:70">function</name></name></expr></argument>,

               <argument pos:start="25:16" pos:end="25:27"><expr pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:16">s</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:21">dev</name><operator pos:start="25:22" pos:end="25:22">.</operator><name pos:start="25:23" pos:end="25:27">devfn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="33:73"><expr pos:start="29:5" pos:end="33:72"><name pos:start="29:5" pos:end="29:6">rc</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="33:72"><name pos:start="29:10" pos:end="29:32">xen_host_pci_device_get</name><argument_list pos:start="29:33" pos:end="33:72">(<argument pos:start="29:34" pos:end="29:48"><expr pos:start="29:34" pos:end="29:48"><operator pos:start="29:34" pos:end="29:34">&amp;</operator><name pos:start="29:35" pos:end="29:48"><name pos:start="29:35" pos:end="29:35">s</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:48">real_device</name></name></expr></argument>,

                                 <argument pos:start="31:34" pos:end="31:51"><expr pos:start="31:34" pos:end="31:51"><name pos:start="31:34" pos:end="31:51"><name pos:start="31:34" pos:end="31:34">s</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:44">hostaddr</name><operator pos:start="31:45" pos:end="31:45">.</operator><name pos:start="31:46" pos:end="31:51">domain</name></name></expr></argument>, <argument pos:start="31:54" pos:end="31:68"><expr pos:start="31:54" pos:end="31:68"><name pos:start="31:54" pos:end="31:68"><name pos:start="31:54" pos:end="31:54">s</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:64">hostaddr</name><operator pos:start="31:65" pos:end="31:65">.</operator><name pos:start="31:66" pos:end="31:68">bus</name></name></expr></argument>,

                                 <argument pos:start="33:34" pos:end="33:49"><expr pos:start="33:34" pos:end="33:49"><name pos:start="33:34" pos:end="33:49"><name pos:start="33:34" pos:end="33:34">s</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:44">hostaddr</name><operator pos:start="33:45" pos:end="33:45">.</operator><name pos:start="33:46" pos:end="33:49">slot</name></name></expr></argument>, <argument pos:start="33:52" pos:end="33:71"><expr pos:start="33:52" pos:end="33:71"><name pos:start="33:52" pos:end="33:71"><name pos:start="33:52" pos:end="33:52">s</name><operator pos:start="33:53" pos:end="33:54">-&gt;</operator><name pos:start="33:55" pos:end="33:62">hostaddr</name><operator pos:start="33:63" pos:end="33:63">.</operator><name pos:start="33:64" pos:end="33:71">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:11">(<expr pos:start="35:9" pos:end="35:10"><name pos:start="35:9" pos:end="35:10">rc</name></expr>)</condition> <block pos:start="35:13" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:78"><expr pos:start="37:9" pos:end="37:77"><call pos:start="37:9" pos:end="37:77"><name pos:start="37:9" pos:end="37:18">XEN_PT_ERR</name><argument_list pos:start="37:19" pos:end="37:77">(<argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><name pos:start="37:20" pos:end="37:20">d</name></expr></argument>, <argument pos:start="37:23" pos:end="37:72"><expr pos:start="37:23" pos:end="37:72"><literal type="string" pos:start="37:23" pos:end="37:72">"Failed to \"open\" the real pci device. rc: %i\n"</literal></expr></argument>, <argument pos:start="37:75" pos:end="37:76"><expr pos:start="37:75" pos:end="37:76"><name pos:start="37:75" pos:end="37:76">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:16">is_virtfn</name></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <name pos:start="45:20" pos:end="45:43"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:33">real_device</name><operator pos:start="45:34" pos:end="45:34">.</operator><name pos:start="45:35" pos:end="45:43">is_virtfn</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:21">(<expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:20">is_virtfn</name></name></expr>)</condition> <block pos:start="47:23" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:60">

        <expr_stmt pos:start="49:9" pos:end="53:60"><expr pos:start="49:9" pos:end="53:59"><call pos:start="49:9" pos:end="53:59"><name pos:start="49:9" pos:end="49:18">XEN_PT_LOG</name><argument_list pos:start="49:19" pos:end="53:59">(<argument pos:start="49:20" pos:end="49:20"><expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">d</name></expr></argument>, <argument pos:start="49:23" pos:end="49:72"><expr pos:start="49:23" pos:end="49:72"><literal type="string" pos:start="49:23" pos:end="49:72">"%04x:%02x:%02x.%d is a SR-IOV Virtual Function\n"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:40"><expr pos:start="51:20" pos:end="51:40"><name pos:start="51:20" pos:end="51:40"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:33">real_device</name><operator pos:start="51:34" pos:end="51:34">.</operator><name pos:start="51:35" pos:end="51:40">domain</name></name></expr></argument>, <argument pos:start="51:43" pos:end="51:60"><expr pos:start="51:43" pos:end="51:60"><name pos:start="51:43" pos:end="51:60"><name pos:start="51:43" pos:end="51:43">s</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:56">real_device</name><operator pos:start="51:57" pos:end="51:57">.</operator><name pos:start="51:58" pos:end="51:60">bus</name></name></expr></argument>,

                   <argument pos:start="53:20" pos:end="53:37"><expr pos:start="53:20" pos:end="53:37"><name pos:start="53:20" pos:end="53:37"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:33">real_device</name><operator pos:start="53:34" pos:end="53:34">.</operator><name pos:start="53:35" pos:end="53:37">dev</name></name></expr></argument>, <argument pos:start="53:40" pos:end="53:58"><expr pos:start="53:40" pos:end="53:58"><name pos:start="53:40" pos:end="53:58"><name pos:start="53:40" pos:end="53:40">s</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:53">real_device</name><operator pos:start="53:54" pos:end="53:54">.</operator><name pos:start="53:55" pos:end="53:58">func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:71">/* Initialize virtualized PCI configuration (Extended 256 Bytes) */</comment>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="63:58">(<expr pos:start="61:9" pos:end="63:57"><call pos:start="61:9" pos:end="63:53"><name pos:start="61:9" pos:end="61:30">xen_host_pci_get_block</name><argument_list pos:start="61:31" pos:end="63:53">(<argument pos:start="61:32" pos:end="61:46"><expr pos:start="61:32" pos:end="61:46"><operator pos:start="61:32" pos:end="61:32">&amp;</operator><name pos:start="61:33" pos:end="61:46"><name pos:start="61:33" pos:end="61:33">s</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:46">real_device</name></name></expr></argument>, <argument pos:start="61:49" pos:end="61:49"><expr pos:start="61:49" pos:end="61:49"><literal type="number" pos:start="61:49" pos:end="61:49">0</literal></expr></argument>, <argument pos:start="61:52" pos:end="61:60"><expr pos:start="61:52" pos:end="61:60"><name pos:start="61:52" pos:end="61:60"><name pos:start="61:52" pos:end="61:52">d</name><operator pos:start="61:53" pos:end="61:54">-&gt;</operator><name pos:start="61:55" pos:end="61:60">config</name></name></expr></argument>,

                               <argument pos:start="63:32" pos:end="63:52"><expr pos:start="63:32" pos:end="63:52"><name pos:start="63:32" pos:end="63:52">PCI_CONFIG_SPACE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="63:55" pos:end="63:55">&lt;</operator> <literal type="number" pos:start="63:57" pos:end="63:57">0</literal></expr>)</condition> <block pos:start="63:60" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><call pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:31">xen_host_pci_device_put</name><argument_list pos:start="65:32" pos:end="65:48">(<argument pos:start="65:33" pos:end="65:47"><expr pos:start="65:33" pos:end="65:47"><operator pos:start="65:33" pos:end="65:33">&amp;</operator><name pos:start="65:34" pos:end="65:47"><name pos:start="65:34" pos:end="65:34">s</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:47">real_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:48"><expr pos:start="73:5" pos:end="73:47"><name pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:22">memory_listener</name></name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:47">xen_pt_memory_listener</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:40"><expr pos:start="75:5" pos:end="75:39"><name pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:18">io_listener</name></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:39">xen_pt_io_listener</name></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:44">/* Setup VGA bios for passthrough GFX */</comment>

    <if_stmt pos:start="81:5" pos:end="115:5"><if pos:start="81:5" pos:end="115:5">if <condition pos:start="81:8" pos:end="83:64">(<expr pos:start="81:9" pos:end="83:63"><operator pos:start="81:9" pos:end="81:9">(</operator><name pos:start="81:10" pos:end="81:30"><name pos:start="81:10" pos:end="81:10">s</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:23">real_device</name><operator pos:start="81:24" pos:end="81:24">.</operator><name pos:start="81:25" pos:end="81:30">domain</name></name> <operator pos:start="81:32" pos:end="81:33">==</operator> <literal type="number" pos:start="81:35" pos:end="81:35">0</literal><operator pos:start="81:36" pos:end="81:36">)</operator> <operator pos:start="81:38" pos:end="81:39">&amp;&amp;</operator> <operator pos:start="81:41" pos:end="81:41">(</operator><name pos:start="81:42" pos:end="81:59"><name pos:start="81:42" pos:end="81:42">s</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:55">real_device</name><operator pos:start="81:56" pos:end="81:56">.</operator><name pos:start="81:57" pos:end="81:59">bus</name></name> <operator pos:start="81:61" pos:end="81:62">==</operator> <literal type="number" pos:start="81:64" pos:end="81:64">0</literal><operator pos:start="81:65" pos:end="81:65">)</operator> <operator pos:start="81:67" pos:end="81:68">&amp;&amp;</operator>

        <operator pos:start="83:9" pos:end="83:9">(</operator><name pos:start="83:10" pos:end="83:27"><name pos:start="83:10" pos:end="83:10">s</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:23">real_device</name><operator pos:start="83:24" pos:end="83:24">.</operator><name pos:start="83:25" pos:end="83:27">dev</name></name> <operator pos:start="83:29" pos:end="83:30">==</operator> <literal type="number" pos:start="83:32" pos:end="83:32">2</literal><operator pos:start="83:33" pos:end="83:33">)</operator> <operator pos:start="83:35" pos:end="83:36">&amp;&amp;</operator> <operator pos:start="83:38" pos:end="83:38">(</operator><name pos:start="83:39" pos:end="83:57"><name pos:start="83:39" pos:end="83:39">s</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:52">real_device</name><operator pos:start="83:53" pos:end="83:53">.</operator><name pos:start="83:54" pos:end="83:57">func</name></name> <operator pos:start="83:59" pos:end="83:60">==</operator> <literal type="number" pos:start="83:62" pos:end="83:62">0</literal><operator pos:start="83:63" pos:end="83:63">)</operator></expr>)</condition> <block pos:start="83:66" pos:end="115:5">{<block_content pos:start="85:9" pos:end="113:66">

        <if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:53">(<expr pos:start="85:13" pos:end="85:52"><operator pos:start="85:13" pos:end="85:13">!</operator><call pos:start="85:14" pos:end="85:52"><name pos:start="85:14" pos:end="85:35">is_igd_vga_passthrough</name><argument_list pos:start="85:36" pos:end="85:52">(<argument pos:start="85:37" pos:end="85:51"><expr pos:start="85:37" pos:end="85:51"><operator pos:start="85:37" pos:end="85:37">&amp;</operator><name pos:start="85:38" pos:end="85:51"><name pos:start="85:38" pos:end="85:38">s</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:51">real_device</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:55" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:22">

            <expr_stmt pos:start="87:13" pos:end="89:53"><expr pos:start="87:13" pos:end="89:52"><call pos:start="87:13" pos:end="89:52"><name pos:start="87:13" pos:end="87:22">XEN_PT_ERR</name><argument_list pos:start="87:23" pos:end="89:52">(<argument pos:start="87:24" pos:end="87:24"><expr pos:start="87:24" pos:end="87:24"><name pos:start="87:24" pos:end="87:24">d</name></expr></argument>, <argument pos:start="87:27" pos:end="89:51"><expr pos:start="87:27" pos:end="89:51"><literal type="string" pos:start="87:27" pos:end="87:72">"Need to enable igd-passthru if you're trying"</literal>

                       <literal type="string" pos:start="89:24" pos:end="89:51">" to passthrough IGD GFX.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:53"><expr pos:start="91:13" pos:end="91:52"><call pos:start="91:13" pos:end="91:52"><name pos:start="91:13" pos:end="91:35">xen_host_pci_device_put</name><argument_list pos:start="91:36" pos:end="91:52">(<argument pos:start="91:37" pos:end="91:51"><expr pos:start="91:37" pos:end="91:51"><operator pos:start="91:37" pos:end="91:37">&amp;</operator><name pos:start="91:38" pos:end="91:51"><name pos:start="91:38" pos:end="91:38">s</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:51">real_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="99:53">(<expr pos:start="99:13" pos:end="99:52"><call pos:start="99:13" pos:end="99:48"><name pos:start="99:13" pos:end="99:28">xen_pt_setup_vga</name><argument_list pos:start="99:29" pos:end="99:48">(<argument pos:start="99:30" pos:end="99:30"><expr pos:start="99:30" pos:end="99:30"><name pos:start="99:30" pos:end="99:30">s</name></expr></argument>, <argument pos:start="99:33" pos:end="99:47"><expr pos:start="99:33" pos:end="99:47"><operator pos:start="99:33" pos:end="99:33">&amp;</operator><name pos:start="99:34" pos:end="99:47"><name pos:start="99:34" pos:end="99:34">s</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:47">real_device</name></name></expr></argument>)</argument_list></call> <operator pos:start="99:50" pos:end="99:50">&lt;</operator> <literal type="number" pos:start="99:52" pos:end="99:52">0</literal></expr>)</condition> <block pos:start="99:55" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:22">

            <expr_stmt pos:start="101:13" pos:end="101:73"><expr pos:start="101:13" pos:end="101:72"><call pos:start="101:13" pos:end="101:72"><name pos:start="101:13" pos:end="101:22">XEN_PT_ERR</name><argument_list pos:start="101:23" pos:end="101:72">(<argument pos:start="101:24" pos:end="101:24"><expr pos:start="101:24" pos:end="101:24"><name pos:start="101:24" pos:end="101:24">d</name></expr></argument>, <argument pos:start="101:27" pos:end="101:71"><expr pos:start="101:27" pos:end="101:71"><literal type="string" pos:start="101:27" pos:end="101:71">"Setup VGA BIOS of passthrough GFX failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:53"><expr pos:start="103:13" pos:end="103:52"><call pos:start="103:13" pos:end="103:52"><name pos:start="103:13" pos:end="103:35">xen_host_pci_device_put</name><argument_list pos:start="103:36" pos:end="103:52">(<argument pos:start="103:37" pos:end="103:51"><expr pos:start="103:37" pos:end="103:51"><operator pos:start="103:37" pos:end="103:37">&amp;</operator><name pos:start="103:38" pos:end="103:51"><name pos:start="103:38" pos:end="103:38">s</name><operator pos:start="103:39" pos:end="103:40">-&gt;</operator><name pos:start="103:41" pos:end="103:51">real_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="105:13" pos:end="105:22">return <expr pos:start="105:20" pos:end="105:21"><operator pos:start="105:20" pos:end="105:20">-</operator><literal type="number" pos:start="105:21" pos:end="105:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="111:9" pos:end="111:54">/* Register ISA bridge for passthrough GFX. */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:66"><expr pos:start="113:9" pos:end="113:65"><call pos:start="113:9" pos:end="113:65"><name pos:start="113:9" pos:end="113:45">xen_igd_passthrough_isa_bridge_create</name><argument_list pos:start="113:46" pos:end="113:65">(<argument pos:start="113:47" pos:end="113:47"><expr pos:start="113:47" pos:end="113:47"><name pos:start="113:47" pos:end="113:47">s</name></expr></argument>, <argument pos:start="113:50" pos:end="113:64"><expr pos:start="113:50" pos:end="113:64"><operator pos:start="113:50" pos:end="113:50">&amp;</operator><name pos:start="113:51" pos:end="113:64"><name pos:start="113:51" pos:end="113:51">s</name><operator pos:start="113:52" pos:end="113:53">-&gt;</operator><name pos:start="113:54" pos:end="113:64">real_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:44">/* Handle real device's MMIO/PIO BARs */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:37"><expr pos:start="121:5" pos:end="121:36"><call pos:start="121:5" pos:end="121:36"><name pos:start="121:5" pos:end="121:27">xen_pt_register_regions</name><argument_list pos:start="121:28" pos:end="121:36">(<argument pos:start="121:29" pos:end="121:29"><expr pos:start="121:29" pos:end="121:29"><name pos:start="121:29" pos:end="121:29">s</name></expr></argument>, <argument pos:start="121:32" pos:end="121:35"><expr pos:start="121:32" pos:end="121:35"><operator pos:start="121:32" pos:end="121:32">&amp;</operator><name pos:start="121:33" pos:end="121:35">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:58">/* reinitialize each config register to be emulated */</comment>

    <if_stmt pos:start="127:5" pos:end="135:5"><if pos:start="127:5" pos:end="135:5">if <condition pos:start="127:8" pos:end="127:30">(<expr pos:start="127:9" pos:end="127:29"><call pos:start="127:9" pos:end="127:29"><name pos:start="127:9" pos:end="127:26">xen_pt_config_init</name><argument_list pos:start="127:27" pos:end="127:29">(<argument pos:start="127:28" pos:end="127:28"><expr pos:start="127:28" pos:end="127:28"><name pos:start="127:28" pos:end="127:28">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:32" pos:end="135:5">{<block_content pos:start="129:9" pos:end="133:18">

        <expr_stmt pos:start="129:9" pos:end="129:67"><expr pos:start="129:9" pos:end="129:66"><call pos:start="129:9" pos:end="129:66"><name pos:start="129:9" pos:end="129:18">XEN_PT_ERR</name><argument_list pos:start="129:19" pos:end="129:66">(<argument pos:start="129:20" pos:end="129:20"><expr pos:start="129:20" pos:end="129:20"><name pos:start="129:20" pos:end="129:20">d</name></expr></argument>, <argument pos:start="129:23" pos:end="129:65"><expr pos:start="129:23" pos:end="129:65"><literal type="string" pos:start="129:23" pos:end="129:65">"PCI Config space initialisation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:49"><expr pos:start="131:9" pos:end="131:48"><call pos:start="131:9" pos:end="131:48"><name pos:start="131:9" pos:end="131:31">xen_host_pci_device_put</name><argument_list pos:start="131:32" pos:end="131:48">(<argument pos:start="131:33" pos:end="131:47"><expr pos:start="131:33" pos:end="131:47"><operator pos:start="131:33" pos:end="131:33">&amp;</operator><name pos:start="131:34" pos:end="131:47"><name pos:start="131:34" pos:end="131:34">s</name><operator pos:start="131:35" pos:end="131:36">-&gt;</operator><name pos:start="131:37" pos:end="131:47">real_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:18">return <expr pos:start="133:16" pos:end="133:17"><operator pos:start="133:16" pos:end="133:16">-</operator><literal type="number" pos:start="133:17" pos:end="133:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:24">/* Bind interrupt */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:77"><expr pos:start="141:5" pos:end="141:76"><name pos:start="141:5" pos:end="141:6">rc</name> <operator pos:start="141:8" pos:end="141:8">=</operator> <call pos:start="141:10" pos:end="141:76"><name pos:start="141:10" pos:end="141:30">xen_host_pci_get_byte</name><argument_list pos:start="141:31" pos:end="141:76">(<argument pos:start="141:32" pos:end="141:46"><expr pos:start="141:32" pos:end="141:46"><operator pos:start="141:32" pos:end="141:32">&amp;</operator><name pos:start="141:33" pos:end="141:46"><name pos:start="141:33" pos:end="141:33">s</name><operator pos:start="141:34" pos:end="141:35">-&gt;</operator><name pos:start="141:36" pos:end="141:46">real_device</name></name></expr></argument>, <argument pos:start="141:49" pos:end="141:65"><expr pos:start="141:49" pos:end="141:65"><name pos:start="141:49" pos:end="141:65">PCI_INTERRUPT_PIN</name></expr></argument>, <argument pos:start="141:68" pos:end="141:75"><expr pos:start="141:68" pos:end="141:75"><operator pos:start="141:68" pos:end="141:68">&amp;</operator><name pos:start="141:69" pos:end="141:75">scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="149:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:11">(<expr pos:start="143:9" pos:end="143:10"><name pos:start="143:9" pos:end="143:10">rc</name></expr>)</condition> <block pos:start="143:13" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:20">

        <expr_stmt pos:start="145:9" pos:end="145:73"><expr pos:start="145:9" pos:end="145:72"><call pos:start="145:9" pos:end="145:72"><name pos:start="145:9" pos:end="145:18">XEN_PT_ERR</name><argument_list pos:start="145:19" pos:end="145:72">(<argument pos:start="145:20" pos:end="145:20"><expr pos:start="145:20" pos:end="145:20"><name pos:start="145:20" pos:end="145:20">d</name></expr></argument>, <argument pos:start="145:23" pos:end="145:67"><expr pos:start="145:23" pos:end="145:67"><literal type="string" pos:start="145:23" pos:end="145:67">"Failed to read PCI_INTERRUPT_PIN! (rc:%d)\n"</literal></expr></argument>, <argument pos:start="145:70" pos:end="145:71"><expr pos:start="145:70" pos:end="145:71"><name pos:start="145:70" pos:end="145:71">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:20"><expr pos:start="147:9" pos:end="147:19"><name pos:start="147:9" pos:end="147:15">scratch</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="151:5" pos:end="157:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:17">(<expr pos:start="151:9" pos:end="151:16"><operator pos:start="151:9" pos:end="151:9">!</operator><name pos:start="151:10" pos:end="151:16">scratch</name></expr>)</condition> <block pos:start="151:19" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:17">

        <expr_stmt pos:start="153:9" pos:end="153:44"><expr pos:start="153:9" pos:end="153:43"><call pos:start="153:9" pos:end="153:43"><name pos:start="153:9" pos:end="153:18">XEN_PT_LOG</name><argument_list pos:start="153:19" pos:end="153:43">(<argument pos:start="153:20" pos:end="153:20"><expr pos:start="153:20" pos:end="153:20"><name pos:start="153:20" pos:end="153:20">d</name></expr></argument>, <argument pos:start="153:23" pos:end="153:42"><expr pos:start="153:23" pos:end="153:42"><literal type="string" pos:start="153:23" pos:end="153:42">"no pin interrupt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="155:9" pos:end="155:17">goto <name pos:start="155:14" pos:end="155:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:37"><expr pos:start="161:5" pos:end="161:36"><name pos:start="161:5" pos:end="161:15">machine_irq</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <name pos:start="161:19" pos:end="161:36"><name pos:start="161:19" pos:end="161:19">s</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:32">real_device</name><operator pos:start="161:33" pos:end="161:33">.</operator><name pos:start="161:34" pos:end="161:36">irq</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:68"><expr pos:start="163:5" pos:end="163:67"><name pos:start="163:5" pos:end="163:6">rc</name> <operator pos:start="163:8" pos:end="163:8">=</operator> <call pos:start="163:10" pos:end="163:67"><name pos:start="163:10" pos:end="163:28">xc_physdev_map_pirq</name><argument_list pos:start="163:29" pos:end="163:67">(<argument pos:start="163:30" pos:end="163:35"><expr pos:start="163:30" pos:end="163:35"><name pos:start="163:30" pos:end="163:35">xen_xc</name></expr></argument>, <argument pos:start="163:38" pos:end="163:46"><expr pos:start="163:38" pos:end="163:46"><name pos:start="163:38" pos:end="163:46">xen_domid</name></expr></argument>, <argument pos:start="163:49" pos:end="163:59"><expr pos:start="163:49" pos:end="163:59"><name pos:start="163:49" pos:end="163:59">machine_irq</name></expr></argument>, <argument pos:start="163:62" pos:end="163:66"><expr pos:start="163:62" pos:end="163:66"><operator pos:start="163:62" pos:end="163:62">&amp;</operator><name pos:start="163:63" pos:end="163:66">pirq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="167:5" pos:end="191:5"><if pos:start="167:5" pos:end="183:5">if <condition pos:start="167:8" pos:end="167:15">(<expr pos:start="167:9" pos:end="167:14"><name pos:start="167:9" pos:end="167:10">rc</name> <operator pos:start="167:12" pos:end="167:12">&lt;</operator> <literal type="number" pos:start="167:14" pos:end="167:14">0</literal></expr>)</condition> <block pos:start="167:17" pos:end="183:5">{<block_content pos:start="169:9" pos:end="181:27">

        <expr_stmt pos:start="169:9" pos:end="171:45"><expr pos:start="169:9" pos:end="171:44"><call pos:start="169:9" pos:end="171:44"><name pos:start="169:9" pos:end="169:18">XEN_PT_ERR</name><argument_list pos:start="169:19" pos:end="171:44">(<argument pos:start="169:20" pos:end="169:20"><expr pos:start="169:20" pos:end="169:20"><name pos:start="169:20" pos:end="169:20">d</name></expr></argument>, <argument pos:start="169:23" pos:end="169:77"><expr pos:start="169:23" pos:end="169:77"><literal type="string" pos:start="169:23" pos:end="169:77">"Mapping machine irq %u to pirq %i failed, (err: %d)\n"</literal></expr></argument>,

                   <argument pos:start="171:20" pos:end="171:30"><expr pos:start="171:20" pos:end="171:30"><name pos:start="171:20" pos:end="171:30">machine_irq</name></expr></argument>, <argument pos:start="171:33" pos:end="171:36"><expr pos:start="171:33" pos:end="171:36"><name pos:start="171:33" pos:end="171:36">pirq</name></expr></argument>, <argument pos:start="171:39" pos:end="171:43"><expr pos:start="171:39" pos:end="171:43"><name pos:start="171:39" pos:end="171:43">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="175:9" pos:end="175:66">/* Disable PCI intx assertion (turn on bit10 of devctl) */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:40"><expr pos:start="177:9" pos:end="177:39"><name pos:start="177:9" pos:end="177:11">cmd</name> <operator pos:start="177:13" pos:end="177:14">|=</operator> <name pos:start="177:16" pos:end="177:39">PCI_COMMAND_INTX_DISABLE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:24"><expr pos:start="179:9" pos:end="179:23"><name pos:start="179:9" pos:end="179:19">machine_irq</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <literal type="number" pos:start="179:23" pos:end="179:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:27"><expr pos:start="181:9" pos:end="181:26"><name pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:22">machine_irq</name></name> <operator pos:start="181:24" pos:end="181:24">=</operator> <literal type="number" pos:start="181:26" pos:end="181:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="191:5">else <block pos:start="183:12" pos:end="191:5">{<block_content pos:start="185:9" pos:end="189:49">

        <expr_stmt pos:start="185:9" pos:end="185:27"><expr pos:start="185:9" pos:end="185:26"><name pos:start="185:9" pos:end="185:19">machine_irq</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:26">pirq</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:30"><expr pos:start="187:9" pos:end="187:29"><name pos:start="187:9" pos:end="187:22"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:22">machine_irq</name></name> <operator pos:start="187:24" pos:end="187:24">=</operator> <name pos:start="187:26" pos:end="187:29">pirq</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:49"><expr pos:start="189:9" pos:end="189:48"><name pos:start="189:9" pos:end="189:46"><name pos:start="189:9" pos:end="189:33">xen_pt_mapped_machine_irq</name><index pos:start="189:34" pos:end="189:46">[<expr pos:start="189:35" pos:end="189:45"><name pos:start="189:35" pos:end="189:45">machine_irq</name></expr>]</index></name><operator pos:start="189:47" pos:end="189:48">++</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="195:5" pos:end="195:36">/* bind machine_irq to device */</comment>

    <if_stmt pos:start="197:5" pos:end="243:5"><if pos:start="197:5" pos:end="243:5">if <condition pos:start="197:8" pos:end="197:25">(<expr pos:start="197:9" pos:end="197:24"><name pos:start="197:9" pos:end="197:19">machine_irq</name> <operator pos:start="197:21" pos:end="197:22">!=</operator> <literal type="number" pos:start="197:24" pos:end="197:24">0</literal></expr>)</condition> <block pos:start="197:27" pos:end="243:5">{<block_content pos:start="199:9" pos:end="241:9">

        <decl_stmt pos:start="199:9" pos:end="199:44"><decl pos:start="199:9" pos:end="199:43"><type pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:15">uint8_t</name></type> <name pos:start="199:17" pos:end="199:22">e_intx</name> <init pos:start="199:24" pos:end="199:43">= <expr pos:start="199:26" pos:end="199:43"><call pos:start="199:26" pos:end="199:43"><name pos:start="199:26" pos:end="199:40">xen_pt_pci_intx</name><argument_list pos:start="199:41" pos:end="199:43">(<argument pos:start="199:42" pos:end="199:42"><expr pos:start="199:42" pos:end="199:42"><name pos:start="199:42" pos:end="199:42">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="203:9" pos:end="209:47"><expr pos:start="203:9" pos:end="209:46"><name pos:start="203:9" pos:end="203:10">rc</name> <operator pos:start="203:12" pos:end="203:12">=</operator> <call pos:start="203:14" pos:end="209:46"><name pos:start="203:14" pos:end="203:38">xc_domain_bind_pt_pci_irq</name><argument_list pos:start="203:39" pos:end="209:46">(<argument pos:start="203:40" pos:end="203:45"><expr pos:start="203:40" pos:end="203:45"><name pos:start="203:40" pos:end="203:45">xen_xc</name></expr></argument>, <argument pos:start="203:48" pos:end="203:56"><expr pos:start="203:48" pos:end="203:56"><name pos:start="203:48" pos:end="203:56">xen_domid</name></expr></argument>, <argument pos:start="203:59" pos:end="203:69"><expr pos:start="203:59" pos:end="203:69"><name pos:start="203:59" pos:end="203:69">machine_irq</name></expr></argument>,

                                       <argument pos:start="205:40" pos:end="205:58"><expr pos:start="205:40" pos:end="205:58"><call pos:start="205:40" pos:end="205:58"><name pos:start="205:40" pos:end="205:50">pci_bus_num</name><argument_list pos:start="205:51" pos:end="205:58">(<argument pos:start="205:52" pos:end="205:57"><expr pos:start="205:52" pos:end="205:57"><name pos:start="205:52" pos:end="205:57"><name pos:start="205:52" pos:end="205:52">d</name><operator pos:start="205:53" pos:end="205:54">-&gt;</operator><name pos:start="205:55" pos:end="205:57">bus</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="207:40" pos:end="207:57"><expr pos:start="207:40" pos:end="207:57"><call pos:start="207:40" pos:end="207:57"><name pos:start="207:40" pos:end="207:47">PCI_SLOT</name><argument_list pos:start="207:48" pos:end="207:57">(<argument pos:start="207:49" pos:end="207:56"><expr pos:start="207:49" pos:end="207:56"><name pos:start="207:49" pos:end="207:56"><name pos:start="207:49" pos:end="207:49">d</name><operator pos:start="207:50" pos:end="207:51">-&gt;</operator><name pos:start="207:52" pos:end="207:56">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="209:40" pos:end="209:45"><expr pos:start="209:40" pos:end="209:45"><name pos:start="209:40" pos:end="209:45">e_intx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="241:9"><if pos:start="211:9" pos:end="241:9">if <condition pos:start="211:12" pos:end="211:19">(<expr pos:start="211:13" pos:end="211:18"><name pos:start="211:13" pos:end="211:14">rc</name> <operator pos:start="211:16" pos:end="211:16">&lt;</operator> <literal type="number" pos:start="211:18" pos:end="211:18">0</literal></expr>)</condition> <block pos:start="211:21" pos:end="241:9">{<block_content pos:start="213:13" pos:end="239:31">

            <expr_stmt pos:start="213:13" pos:end="215:38"><expr pos:start="213:13" pos:end="215:37"><call pos:start="213:13" pos:end="215:37"><name pos:start="213:13" pos:end="213:22">XEN_PT_ERR</name><argument_list pos:start="213:23" pos:end="215:37">(<argument pos:start="213:24" pos:end="213:24"><expr pos:start="213:24" pos:end="213:24"><name pos:start="213:24" pos:end="213:24">d</name></expr></argument>, <argument pos:start="213:27" pos:end="213:71"><expr pos:start="213:27" pos:end="213:71"><literal type="string" pos:start="213:27" pos:end="213:71">"Binding of interrupt %i failed! (err: %d)\n"</literal></expr></argument>,

                       <argument pos:start="215:24" pos:end="215:29"><expr pos:start="215:24" pos:end="215:29"><name pos:start="215:24" pos:end="215:29">e_intx</name></expr></argument>, <argument pos:start="215:32" pos:end="215:36"><expr pos:start="215:32" pos:end="215:36"><name pos:start="215:32" pos:end="215:36">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="219:13" pos:end="219:70">/* Disable PCI intx assertion (turn on bit10 of devctl) */</comment>

            <expr_stmt pos:start="221:13" pos:end="221:44"><expr pos:start="221:13" pos:end="221:43"><name pos:start="221:13" pos:end="221:15">cmd</name> <operator pos:start="221:17" pos:end="221:18">|=</operator> <name pos:start="221:20" pos:end="221:43">PCI_COMMAND_INTX_DISABLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:53"><expr pos:start="223:13" pos:end="223:52"><name pos:start="223:13" pos:end="223:50"><name pos:start="223:13" pos:end="223:37">xen_pt_mapped_machine_irq</name><index pos:start="223:38" pos:end="223:50">[<expr pos:start="223:39" pos:end="223:49"><name pos:start="223:39" pos:end="223:49">machine_irq</name></expr>]</index></name><operator pos:start="223:51" pos:end="223:52">--</operator></expr>;</expr_stmt>



            <if_stmt pos:start="227:13" pos:end="237:13"><if pos:start="227:13" pos:end="237:13">if <condition pos:start="227:16" pos:end="227:60">(<expr pos:start="227:17" pos:end="227:59"><name pos:start="227:17" pos:end="227:54"><name pos:start="227:17" pos:end="227:41">xen_pt_mapped_machine_irq</name><index pos:start="227:42" pos:end="227:54">[<expr pos:start="227:43" pos:end="227:53"><name pos:start="227:43" pos:end="227:53">machine_irq</name></expr>]</index></name> <operator pos:start="227:56" pos:end="227:57">==</operator> <literal type="number" pos:start="227:59" pos:end="227:59">0</literal></expr>)</condition> <block pos:start="227:62" pos:end="237:13">{<block_content pos:start="229:17" pos:end="235:17">

                <if_stmt pos:start="229:17" pos:end="235:17"><if pos:start="229:17" pos:end="235:17">if <condition pos:start="229:20" pos:end="229:74">(<expr pos:start="229:21" pos:end="229:73"><call pos:start="229:21" pos:end="229:73"><name pos:start="229:21" pos:end="229:41">xc_physdev_unmap_pirq</name><argument_list pos:start="229:42" pos:end="229:73">(<argument pos:start="229:43" pos:end="229:48"><expr pos:start="229:43" pos:end="229:48"><name pos:start="229:43" pos:end="229:48">xen_xc</name></expr></argument>, <argument pos:start="229:51" pos:end="229:59"><expr pos:start="229:51" pos:end="229:59"><name pos:start="229:51" pos:end="229:59">xen_domid</name></expr></argument>, <argument pos:start="229:62" pos:end="229:72"><expr pos:start="229:62" pos:end="229:72"><name pos:start="229:62" pos:end="229:72">machine_irq</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:76" pos:end="235:17">{<block_content pos:start="231:21" pos:end="233:67">

                    <expr_stmt pos:start="231:21" pos:end="233:67"><expr pos:start="231:21" pos:end="233:66"><call pos:start="231:21" pos:end="233:66"><name pos:start="231:21" pos:end="231:30">XEN_PT_ERR</name><argument_list pos:start="231:31" pos:end="233:66">(<argument pos:start="231:32" pos:end="231:32"><expr pos:start="231:32" pos:end="231:32"><name pos:start="231:32" pos:end="231:32">d</name></expr></argument>, <argument pos:start="231:35" pos:end="233:45"><expr pos:start="231:35" pos:end="233:45"><literal type="string" pos:start="231:35" pos:end="231:77">"Unmapping of machine interrupt %i failed!"</literal>

                               <literal type="string" pos:start="233:32" pos:end="233:45">" (err: %d)\n"</literal></expr></argument>, <argument pos:start="233:48" pos:end="233:58"><expr pos:start="233:48" pos:end="233:58"><name pos:start="233:48" pos:end="233:58">machine_irq</name></expr></argument>, <argument pos:start="233:61" pos:end="233:65"><expr pos:start="233:61" pos:end="233:65"><name pos:start="233:61" pos:end="233:65">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:31"><expr pos:start="239:13" pos:end="239:30"><name pos:start="239:13" pos:end="239:26"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:26">machine_irq</name></name> <operator pos:start="239:28" pos:end="239:28">=</operator> <literal type="number" pos:start="239:30" pos:end="239:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="247:1" pos:end="247:4"><name pos:start="247:1" pos:end="247:3">out</name>:</label>

    <if_stmt pos:start="249:5" pos:end="277:5"><if pos:start="249:5" pos:end="277:5">if <condition pos:start="249:8" pos:end="249:12">(<expr pos:start="249:9" pos:end="249:11"><name pos:start="249:9" pos:end="249:11">cmd</name></expr>)</condition> <block pos:start="249:14" pos:end="277:5">{<block_content pos:start="251:9" pos:end="275:9">

        <decl_stmt pos:start="251:9" pos:end="251:21"><decl pos:start="251:9" pos:end="251:20"><type pos:start="251:9" pos:end="251:16"><name pos:start="251:9" pos:end="251:16">uint16_t</name></type> <name pos:start="251:18" pos:end="251:20">val</name></decl>;</decl_stmt>



        <expr_stmt pos:start="255:9" pos:end="255:71"><expr pos:start="255:9" pos:end="255:70"><name pos:start="255:9" pos:end="255:10">rc</name> <operator pos:start="255:12" pos:end="255:12">=</operator> <call pos:start="255:14" pos:end="255:70"><name pos:start="255:14" pos:end="255:34">xen_host_pci_get_word</name><argument_list pos:start="255:35" pos:end="255:70">(<argument pos:start="255:36" pos:end="255:50"><expr pos:start="255:36" pos:end="255:50"><operator pos:start="255:36" pos:end="255:36">&amp;</operator><name pos:start="255:37" pos:end="255:50"><name pos:start="255:37" pos:end="255:37">s</name><operator pos:start="255:38" pos:end="255:39">-&gt;</operator><name pos:start="255:40" pos:end="255:50">real_device</name></name></expr></argument>, <argument pos:start="255:53" pos:end="255:63"><expr pos:start="255:53" pos:end="255:63"><name pos:start="255:53" pos:end="255:63">PCI_COMMAND</name></expr></argument>, <argument pos:start="255:66" pos:end="255:69"><expr pos:start="255:66" pos:end="255:69"><operator pos:start="255:66" pos:end="255:66">&amp;</operator><name pos:start="255:67" pos:end="255:69">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="275:9"><if pos:start="257:9" pos:end="261:9">if <condition pos:start="257:12" pos:end="257:15">(<expr pos:start="257:13" pos:end="257:14"><name pos:start="257:13" pos:end="257:14">rc</name></expr>)</condition> <block pos:start="257:17" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:72">

            <expr_stmt pos:start="259:13" pos:end="259:72"><expr pos:start="259:13" pos:end="259:71"><call pos:start="259:13" pos:end="259:71"><name pos:start="259:13" pos:end="259:22">XEN_PT_ERR</name><argument_list pos:start="259:23" pos:end="259:71">(<argument pos:start="259:24" pos:end="259:24"><expr pos:start="259:24" pos:end="259:24"><name pos:start="259:24" pos:end="259:24">d</name></expr></argument>, <argument pos:start="259:27" pos:end="259:66"><expr pos:start="259:27" pos:end="259:66"><literal type="string" pos:start="259:27" pos:end="259:66">"Failed to read PCI_COMMAND! (rc: %d)\n"</literal></expr></argument>, <argument pos:start="259:69" pos:end="259:70"><expr pos:start="259:69" pos:end="259:70"><name pos:start="259:69" pos:end="259:70">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="261:11" pos:end="275:9">else <block pos:start="261:16" pos:end="275:9">{<block_content pos:start="263:13" pos:end="273:13">

            <expr_stmt pos:start="263:13" pos:end="263:23"><expr pos:start="263:13" pos:end="263:22"><name pos:start="263:13" pos:end="263:15">val</name> <operator pos:start="263:17" pos:end="263:18">|=</operator> <name pos:start="263:20" pos:end="263:22">cmd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:74"><expr pos:start="265:13" pos:end="265:73"><name pos:start="265:13" pos:end="265:14">rc</name> <operator pos:start="265:16" pos:end="265:16">=</operator> <call pos:start="265:18" pos:end="265:73"><name pos:start="265:18" pos:end="265:38">xen_host_pci_set_word</name><argument_list pos:start="265:39" pos:end="265:73">(<argument pos:start="265:40" pos:end="265:54"><expr pos:start="265:40" pos:end="265:54"><operator pos:start="265:40" pos:end="265:40">&amp;</operator><name pos:start="265:41" pos:end="265:54"><name pos:start="265:41" pos:end="265:41">s</name><operator pos:start="265:42" pos:end="265:43">-&gt;</operator><name pos:start="265:44" pos:end="265:54">real_device</name></name></expr></argument>, <argument pos:start="265:57" pos:end="265:67"><expr pos:start="265:57" pos:end="265:67"><name pos:start="265:57" pos:end="265:67">PCI_COMMAND</name></expr></argument>, <argument pos:start="265:70" pos:end="265:72"><expr pos:start="265:70" pos:end="265:72"><name pos:start="265:70" pos:end="265:72">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="267:13" pos:end="273:13"><if pos:start="267:13" pos:end="273:13">if <condition pos:start="267:16" pos:end="267:19">(<expr pos:start="267:17" pos:end="267:18"><name pos:start="267:17" pos:end="267:18">rc</name></expr>)</condition> <block pos:start="267:21" pos:end="273:13">{<block_content pos:start="269:17" pos:end="271:36">

                <expr_stmt pos:start="269:17" pos:end="271:36"><expr pos:start="269:17" pos:end="271:35"><call pos:start="269:17" pos:end="271:35"><name pos:start="269:17" pos:end="269:26">XEN_PT_ERR</name><argument_list pos:start="269:27" pos:end="271:35">(<argument pos:start="269:28" pos:end="269:28"><expr pos:start="269:28" pos:end="269:28"><name pos:start="269:28" pos:end="269:28">d</name></expr></argument>, <argument pos:start="269:31" pos:end="269:79"><expr pos:start="269:31" pos:end="269:79"><literal type="string" pos:start="269:31" pos:end="269:79">"Failed to write PCI_COMMAND val=0x%x!(rc: %d)\n"</literal></expr></argument>,

                           <argument pos:start="271:28" pos:end="271:30"><expr pos:start="271:28" pos:end="271:30"><name pos:start="271:28" pos:end="271:30">val</name></expr></argument>, <argument pos:start="271:33" pos:end="271:34"><expr pos:start="271:33" pos:end="271:34"><name pos:start="271:33" pos:end="271:34">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="281:5" pos:end="281:73"><expr pos:start="281:5" pos:end="281:72"><call pos:start="281:5" pos:end="281:72"><name pos:start="281:5" pos:end="281:28">memory_listener_register</name><argument_list pos:start="281:29" pos:end="281:72">(<argument pos:start="281:30" pos:end="281:48"><expr pos:start="281:30" pos:end="281:48"><operator pos:start="281:30" pos:end="281:30">&amp;</operator><name pos:start="281:31" pos:end="281:48"><name pos:start="281:31" pos:end="281:31">s</name><operator pos:start="281:32" pos:end="281:33">-&gt;</operator><name pos:start="281:34" pos:end="281:48">memory_listener</name></name></expr></argument>, <argument pos:start="281:51" pos:end="281:71"><expr pos:start="281:51" pos:end="281:71"><operator pos:start="281:51" pos:end="281:51">&amp;</operator><name pos:start="281:52" pos:end="281:71"><name pos:start="281:52" pos:end="281:52">s</name><operator pos:start="281:53" pos:end="281:54">-&gt;</operator><name pos:start="281:55" pos:end="281:57">dev</name><operator pos:start="281:58" pos:end="281:58">.</operator><name pos:start="281:59" pos:end="281:71">bus_master_as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="283:65"><expr pos:start="283:5" pos:end="283:64"><call pos:start="283:5" pos:end="283:64"><name pos:start="283:5" pos:end="283:28">memory_listener_register</name><argument_list pos:start="283:29" pos:end="283:64">(<argument pos:start="283:30" pos:end="283:44"><expr pos:start="283:30" pos:end="283:44"><operator pos:start="283:30" pos:end="283:30">&amp;</operator><name pos:start="283:31" pos:end="283:44"><name pos:start="283:31" pos:end="283:31">s</name><operator pos:start="283:32" pos:end="283:33">-&gt;</operator><name pos:start="283:34" pos:end="283:44">io_listener</name></name></expr></argument>, <argument pos:start="283:47" pos:end="283:63"><expr pos:start="283:47" pos:end="283:63"><operator pos:start="283:47" pos:end="283:47">&amp;</operator><name pos:start="283:48" pos:end="283:63">address_space_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:27"><expr pos:start="285:5" pos:end="285:26"><name pos:start="285:5" pos:end="285:19"><name pos:start="285:5" pos:end="285:5">s</name><operator pos:start="285:6" pos:end="285:7">-&gt;</operator><name pos:start="285:8" pos:end="285:19">listener_set</name></name> <operator pos:start="285:21" pos:end="285:21">=</operator> <name pos:start="285:23" pos:end="285:26">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="291:72"><expr pos:start="287:5" pos:end="291:71"><call pos:start="287:5" pos:end="291:71"><name pos:start="287:5" pos:end="287:14">XEN_PT_LOG</name><argument_list pos:start="287:15" pos:end="291:71">(<argument pos:start="287:16" pos:end="287:16"><expr pos:start="287:16" pos:end="287:16"><name pos:start="287:16" pos:end="287:16">d</name></expr></argument>,

               <argument pos:start="289:16" pos:end="289:77"><expr pos:start="289:16" pos:end="289:77"><literal type="string" pos:start="289:16" pos:end="289:77">"Real physical device %02x:%02x.%d registered successfully!\n"</literal></expr></argument>,

               <argument pos:start="291:16" pos:end="291:30"><expr pos:start="291:16" pos:end="291:30"><name pos:start="291:16" pos:end="291:30"><name pos:start="291:16" pos:end="291:16">s</name><operator pos:start="291:17" pos:end="291:18">-&gt;</operator><name pos:start="291:19" pos:end="291:26">hostaddr</name><operator pos:start="291:27" pos:end="291:27">.</operator><name pos:start="291:28" pos:end="291:30">bus</name></name></expr></argument>, <argument pos:start="291:33" pos:end="291:48"><expr pos:start="291:33" pos:end="291:48"><name pos:start="291:33" pos:end="291:48"><name pos:start="291:33" pos:end="291:33">s</name><operator pos:start="291:34" pos:end="291:35">-&gt;</operator><name pos:start="291:36" pos:end="291:43">hostaddr</name><operator pos:start="291:44" pos:end="291:44">.</operator><name pos:start="291:45" pos:end="291:48">slot</name></name></expr></argument>, <argument pos:start="291:51" pos:end="291:70"><expr pos:start="291:51" pos:end="291:70"><name pos:start="291:51" pos:end="291:70"><name pos:start="291:51" pos:end="291:51">s</name><operator pos:start="291:52" pos:end="291:53">-&gt;</operator><name pos:start="291:54" pos:end="291:61">hostaddr</name><operator pos:start="291:62" pos:end="291:62">.</operator><name pos:start="291:63" pos:end="291:70">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="295:5" pos:end="295:13">return <expr pos:start="295:12" pos:end="295:12"><literal type="number" pos:start="295:12" pos:end="295:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
