<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6218.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">ff_hevc_decode_extradata</name><parameter_list pos:start="1:29" pos:end="5:63">(<parameter pos:start="1:30" pos:end="1:48"><decl pos:start="1:30" pos:end="1:48"><type pos:start="1:30" pos:end="1:48"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:42">uint8_t</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">data</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:58"><decl pos:start="1:51" pos:end="1:58"><type pos:start="1:51" pos:end="1:58"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:58">size</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:77"><decl pos:start="1:61" pos:end="1:77"><type pos:start="1:61" pos:end="1:77"><name pos:start="1:61" pos:end="1:73">HEVCParamSets</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:77">ps</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:42">is_nalff</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:64"><decl pos:start="3:45" pos:end="3:64"><type pos:start="3:45" pos:end="3:64"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:64">nal_length_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:48"><decl pos:start="5:30" pos:end="5:48"><type pos:start="5:30" pos:end="5:48"><name pos:start="5:30" pos:end="5:32">int</name></type> <name pos:start="5:34" pos:end="5:48">err_recognition</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:62"><decl pos:start="5:51" pos:end="5:62"><type pos:start="5:51" pos:end="5:62"><name pos:start="5:51" pos:end="5:54">void</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:62">logctx</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="125:1">{<block_content pos:start="9:5" pos:end="123:15">

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18">GetByteContext</name></type> <name pos:start="11:20" pos:end="11:21">gb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><call pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:20">bytestream2_init</name><argument_list pos:start="15:21" pos:end="15:37">(<argument pos:start="15:22" pos:end="15:24"><expr pos:start="15:22" pos:end="15:24"><operator pos:start="15:22" pos:end="15:22">&amp;</operator><name pos:start="15:23" pos:end="15:24">gb</name></expr></argument>, <argument pos:start="15:27" pos:end="15:30"><expr pos:start="15:27" pos:end="15:30"><name pos:start="15:27" pos:end="15:30">data</name></expr></argument>, <argument pos:start="15:33" pos:end="15:36"><expr pos:start="15:33" pos:end="15:36"><name pos:start="15:33" pos:end="15:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="119:5"><if pos:start="19:5" pos:end="109:5">if <condition pos:start="19:8" pos:end="19:56">(<expr pos:start="19:9" pos:end="19:55"><name pos:start="19:9" pos:end="19:12">size</name> <operator pos:start="19:14" pos:end="19:14">&gt;</operator> <literal type="number" pos:start="19:16" pos:end="19:16">3</literal> <operator pos:start="19:18" pos:end="19:19">&amp;&amp;</operator> <operator pos:start="19:21" pos:end="19:21">(</operator><name pos:start="19:22" pos:end="19:28"><name pos:start="19:22" pos:end="19:25">data</name><index pos:start="19:26" pos:end="19:28">[<expr pos:start="19:27" pos:end="19:27"><literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr>]</index></name> <operator pos:start="19:30" pos:end="19:31">||</operator> <name pos:start="19:33" pos:end="19:39"><name pos:start="19:33" pos:end="19:36">data</name><index pos:start="19:37" pos:end="19:39">[<expr pos:start="19:38" pos:end="19:38"><literal type="number" pos:start="19:38" pos:end="19:38">1</literal></expr>]</index></name> <operator pos:start="19:41" pos:end="19:42">||</operator> <name pos:start="19:44" pos:end="19:50"><name pos:start="19:44" pos:end="19:47">data</name><index pos:start="19:48" pos:end="19:50">[<expr pos:start="19:49" pos:end="19:49"><literal type="number" pos:start="19:49" pos:end="19:49">2</literal></expr>]</index></name> <operator pos:start="19:52" pos:end="19:52">&gt;</operator> <literal type="number" pos:start="19:54" pos:end="19:54">1</literal><operator pos:start="19:55" pos:end="19:55">)</operator></expr>)</condition> <block pos:start="19:58" pos:end="109:5">{<block_content pos:start="29:9" pos:end="107:40">

        <comment type="block" pos:start="21:9" pos:end="27:78">/* It seems the extradata is encoded as hvcC format.

         * Temporarily, we support configurationVersion==0 until 14496-15 3rd

         * is finalized. When finalized, configurationVersion will be 1 and we

         * can recognize hvcC by checking if avctx-&gt;extradata[0]==1 or not. */</comment>

        <decl_stmt pos:start="29:9" pos:end="29:43"><decl pos:start="29:9" pos:end="29:13"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:13">i</name></decl>, <decl pos:start="29:16" pos:end="29:16"><type ref="prev" pos:start="29:9" pos:end="29:11"/><name pos:start="29:16" pos:end="29:16">j</name></decl>, <decl pos:start="29:19" pos:end="29:28"><type ref="prev" pos:start="29:9" pos:end="29:11"/><name pos:start="29:19" pos:end="29:28">num_arrays</name></decl>, <decl pos:start="29:31" pos:end="29:42"><type ref="prev" pos:start="29:9" pos:end="29:11"/><name pos:start="29:31" pos:end="29:42">nal_len_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:22"><expr pos:start="33:9" pos:end="33:21"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:17">is_nalff</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><call pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:24">bytestream2_skip</name><argument_list pos:start="37:25" pos:end="37:33">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:28">gb</name></expr></argument>, <argument pos:start="37:31" pos:end="37:32"><expr pos:start="37:31" pos:end="37:32"><literal type="number" pos:start="37:31" pos:end="37:32">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:20">nal_len_size</name> <operator pos:start="39:22" pos:end="39:22">=</operator> <operator pos:start="39:24" pos:end="39:24">(</operator><call pos:start="39:25" pos:end="39:49"><name pos:start="39:25" pos:end="39:44">bytestream2_get_byte</name><argument_list pos:start="39:45" pos:end="39:49">(<argument pos:start="39:46" pos:end="39:48"><expr pos:start="39:46" pos:end="39:48"><operator pos:start="39:46" pos:end="39:46">&amp;</operator><name pos:start="39:47" pos:end="39:48">gb</name></expr></argument>)</argument_list></call> <operator pos:start="39:51" pos:end="39:51">&amp;</operator> <literal type="number" pos:start="39:53" pos:end="39:53">3</literal><operator pos:start="39:54" pos:end="39:54">)</operator> <operator pos:start="39:56" pos:end="39:56">+</operator> <literal type="number" pos:start="39:58" pos:end="39:58">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:49"><expr pos:start="41:9" pos:end="41:48"><name pos:start="41:9" pos:end="41:18">num_arrays</name>   <operator pos:start="41:22" pos:end="41:22">=</operator> <call pos:start="41:24" pos:end="41:48"><name pos:start="41:24" pos:end="41:43">bytestream2_get_byte</name><argument_list pos:start="41:44" pos:end="41:48">(<argument pos:start="41:45" pos:end="41:47"><expr pos:start="41:45" pos:end="41:47"><operator pos:start="41:45" pos:end="41:45">&amp;</operator><name pos:start="41:46" pos:end="41:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="45:9" pos:end="47:66">/* nal units in the hvcC always have length coded with 2 bytes,

         * so put a fake nal_length_size = 2 while parsing them */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:29"><expr pos:start="49:9" pos:end="49:28"><operator pos:start="49:9" pos:end="49:9">*</operator><name pos:start="49:10" pos:end="49:24">nal_length_size</name> <operator pos:start="49:26" pos:end="49:26">=</operator> <literal type="number" pos:start="49:28" pos:end="49:28">2</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:41">/* Decode nal units from hvcC. */</comment>

        <for pos:start="55:9" pos:end="99:9">for <control pos:start="55:13" pos:end="55:40">(<init pos:start="55:14" pos:end="55:19"><expr pos:start="55:14" pos:end="55:18"><name pos:start="55:14" pos:end="55:14">i</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:18">0</literal></expr>;</init> <condition pos:start="55:21" pos:end="55:35"><expr pos:start="55:21" pos:end="55:34"><name pos:start="55:21" pos:end="55:21">i</name> <operator pos:start="55:23" pos:end="55:23">&lt;</operator> <name pos:start="55:25" pos:end="55:34">num_arrays</name></expr>;</condition> <incr pos:start="55:37" pos:end="55:39"><expr pos:start="55:37" pos:end="55:39"><name pos:start="55:37" pos:end="55:37">i</name><operator pos:start="55:38" pos:end="55:39">++</operator></expr></incr>)</control> <block pos:start="55:42" pos:end="99:9">{<block_content pos:start="57:13" pos:end="97:13">

            <decl_stmt pos:start="57:13" pos:end="57:56"><decl pos:start="57:13" pos:end="57:55"><type pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">int</name></type> <name pos:start="57:17" pos:end="57:20">type</name> <init pos:start="57:22" pos:end="57:55">= <expr pos:start="57:24" pos:end="57:55"><call pos:start="57:24" pos:end="57:48"><name pos:start="57:24" pos:end="57:43">bytestream2_get_byte</name><argument_list pos:start="57:44" pos:end="57:48">(<argument pos:start="57:45" pos:end="57:47"><expr pos:start="57:45" pos:end="57:47"><operator pos:start="57:45" pos:end="57:45">&amp;</operator><name pos:start="57:46" pos:end="57:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="57:50" pos:end="57:50">&amp;</operator> <literal type="number" pos:start="57:52" pos:end="57:55">0x3f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:49"><decl pos:start="59:13" pos:end="59:48"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:19">cnt</name>  <init pos:start="59:22" pos:end="59:48">= <expr pos:start="59:24" pos:end="59:48"><call pos:start="59:24" pos:end="59:48"><name pos:start="59:24" pos:end="59:43">bytestream2_get_be16</name><argument_list pos:start="59:44" pos:end="59:48">(<argument pos:start="59:45" pos:end="59:47"><expr pos:start="59:45" pos:end="59:47"><operator pos:start="59:45" pos:end="59:45">&amp;</operator><name pos:start="59:46" pos:end="59:47">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <for pos:start="63:13" pos:end="97:13">for <control pos:start="63:17" pos:end="63:37">(<init pos:start="63:18" pos:end="63:23"><expr pos:start="63:18" pos:end="63:22"><name pos:start="63:18" pos:end="63:18">j</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>;</init> <condition pos:start="63:25" pos:end="63:32"><expr pos:start="63:25" pos:end="63:31"><name pos:start="63:25" pos:end="63:25">j</name> <operator pos:start="63:27" pos:end="63:27">&lt;</operator> <name pos:start="63:29" pos:end="63:31">cnt</name></expr>;</condition> <incr pos:start="63:34" pos:end="63:36"><expr pos:start="63:34" pos:end="63:36"><name pos:start="63:34" pos:end="63:34">j</name><operator pos:start="63:35" pos:end="63:36">++</operator></expr></incr>)</control> <block pos:start="63:39" pos:end="97:13">{<block_content pos:start="67:17" pos:end="95:47">

                <comment type="line" pos:start="65:17" pos:end="65:44">// +2 for the nal size field</comment>

                <decl_stmt pos:start="67:17" pos:end="67:61"><decl pos:start="67:17" pos:end="67:60"><type pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:19">int</name></type> <name pos:start="67:21" pos:end="67:27">nalsize</name> <init pos:start="67:29" pos:end="67:60">= <expr pos:start="67:31" pos:end="67:60"><call pos:start="67:31" pos:end="67:56"><name pos:start="67:31" pos:end="67:51">bytestream2_peek_be16</name><argument_list pos:start="67:52" pos:end="67:56">(<argument pos:start="67:53" pos:end="67:55"><expr pos:start="67:53" pos:end="67:55"><operator pos:start="67:53" pos:end="67:53">&amp;</operator><name pos:start="67:54" pos:end="67:55">gb</name></expr></argument>)</argument_list></call> <operator pos:start="67:58" pos:end="67:58">+</operator> <literal type="number" pos:start="67:60" pos:end="67:60">2</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="69:17" pos:end="77:17"><if pos:start="69:17" pos:end="77:17">if <condition pos:start="69:20" pos:end="69:62">(<expr pos:start="69:21" pos:end="69:61"><call pos:start="69:21" pos:end="69:51"><name pos:start="69:21" pos:end="69:46">bytestream2_get_bytes_left</name><argument_list pos:start="69:47" pos:end="69:51">(<argument pos:start="69:48" pos:end="69:50"><expr pos:start="69:48" pos:end="69:50"><operator pos:start="69:48" pos:end="69:48">&amp;</operator><name pos:start="69:49" pos:end="69:50">gb</name></expr></argument>)</argument_list></call> <operator pos:start="69:53" pos:end="69:53">&lt;</operator> <name pos:start="69:55" pos:end="69:61">nalsize</name></expr>)</condition> <block pos:start="69:64" pos:end="77:17">{<block_content pos:start="71:21" pos:end="75:47">

                    <expr_stmt pos:start="71:21" pos:end="73:68"><expr pos:start="71:21" pos:end="73:67"><call pos:start="71:21" pos:end="73:67"><name pos:start="71:21" pos:end="71:26">av_log</name><argument_list pos:start="71:27" pos:end="73:67">(<argument pos:start="71:28" pos:end="71:33"><expr pos:start="71:28" pos:end="71:33"><name pos:start="71:28" pos:end="71:33">logctx</name></expr></argument>, <argument pos:start="71:36" pos:end="71:47"><expr pos:start="71:36" pos:end="71:47"><name pos:start="71:36" pos:end="71:47">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="73:28" pos:end="73:66"><expr pos:start="73:28" pos:end="73:66"><literal type="string" pos:start="73:28" pos:end="73:66">"Invalid NAL unit size in extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="75:21" pos:end="75:47">return <expr pos:start="75:28" pos:end="75:46"><name pos:start="75:28" pos:end="75:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="81:17" pos:end="81:105"><expr pos:start="81:17" pos:end="81:104"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:104"><name pos:start="81:23" pos:end="81:43">hevc_decode_nal_units</name><argument_list pos:start="81:44" pos:end="81:104">(<argument pos:start="81:45" pos:end="81:53"><expr pos:start="81:45" pos:end="81:53"><name pos:start="81:45" pos:end="81:53"><name pos:start="81:45" pos:end="81:46">gb</name><operator pos:start="81:47" pos:end="81:47">.</operator><name pos:start="81:48" pos:end="81:53">buffer</name></name></expr></argument>, <argument pos:start="81:56" pos:end="81:62"><expr pos:start="81:56" pos:end="81:62"><name pos:start="81:56" pos:end="81:62">nalsize</name></expr></argument>, <argument pos:start="81:65" pos:end="81:66"><expr pos:start="81:65" pos:end="81:66"><name pos:start="81:65" pos:end="81:66">ps</name></expr></argument>, <argument pos:start="81:69" pos:end="81:77"><expr pos:start="81:69" pos:end="81:77"><operator pos:start="81:69" pos:end="81:69">*</operator><name pos:start="81:70" pos:end="81:77">is_nalff</name></expr></argument>, <argument pos:start="81:80" pos:end="81:95"><expr pos:start="81:80" pos:end="81:95"><operator pos:start="81:80" pos:end="81:80">*</operator><name pos:start="81:81" pos:end="81:95">nal_length_size</name></expr></argument>, <argument pos:start="81:98" pos:end="81:103"><expr pos:start="81:98" pos:end="81:103"><name pos:start="81:98" pos:end="81:103">logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="93:17"><if pos:start="83:17" pos:end="93:17">if <condition pos:start="83:20" pos:end="83:28">(<expr pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:23">ret</name> <operator pos:start="83:25" pos:end="83:25">&lt;</operator> <literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>)</condition> <block pos:start="83:30" pos:end="93:17">{<block_content pos:start="85:21" pos:end="91:31">

                    <expr_stmt pos:start="85:21" pos:end="89:36"><expr pos:start="85:21" pos:end="89:35"><call pos:start="85:21" pos:end="89:35"><name pos:start="85:21" pos:end="85:26">av_log</name><argument_list pos:start="85:27" pos:end="89:35">(<argument pos:start="85:28" pos:end="85:33"><expr pos:start="85:28" pos:end="85:33"><name pos:start="85:28" pos:end="85:33">logctx</name></expr></argument>, <argument pos:start="85:36" pos:end="85:47"><expr pos:start="85:36" pos:end="85:47"><name pos:start="85:36" pos:end="85:47">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:71"><expr pos:start="87:28" pos:end="87:71"><literal type="string" pos:start="87:28" pos:end="87:71">"Decoding nal unit %d %d from hvcC failed\n"</literal></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:31"><expr pos:start="89:28" pos:end="89:31"><name pos:start="89:28" pos:end="89:31">type</name></expr></argument>, <argument pos:start="89:34" pos:end="89:34"><expr pos:start="89:34" pos:end="89:34"><name pos:start="89:34" pos:end="89:34">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="91:21" pos:end="91:31">return <expr pos:start="91:28" pos:end="91:30"><name pos:start="91:28" pos:end="91:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:47"><expr pos:start="95:17" pos:end="95:46"><call pos:start="95:17" pos:end="95:46"><name pos:start="95:17" pos:end="95:32">bytestream2_skip</name><argument_list pos:start="95:33" pos:end="95:46">(<argument pos:start="95:34" pos:end="95:36"><expr pos:start="95:34" pos:end="95:36"><operator pos:start="95:34" pos:end="95:34">&amp;</operator><name pos:start="95:35" pos:end="95:36">gb</name></expr></argument>, <argument pos:start="95:39" pos:end="95:45"><expr pos:start="95:39" pos:end="95:45"><name pos:start="95:39" pos:end="95:45">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <comment type="block" pos:start="103:9" pos:end="105:28">/* Now store right nal length size, that will be used to parse

         * all other nals */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:40"><expr pos:start="107:9" pos:end="107:39"><operator pos:start="107:9" pos:end="107:9">*</operator><name pos:start="107:10" pos:end="107:24">nal_length_size</name> <operator pos:start="107:26" pos:end="107:26">=</operator> <name pos:start="107:28" pos:end="107:39">nal_len_size</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="119:5">else <block pos:start="109:12" pos:end="119:5">{<block_content pos:start="111:9" pos:end="117:23">

        <expr_stmt pos:start="111:9" pos:end="111:22"><expr pos:start="111:9" pos:end="111:21"><operator pos:start="111:9" pos:end="111:9">*</operator><name pos:start="111:10" pos:end="111:17">is_nalff</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <literal type="number" pos:start="111:21" pos:end="111:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:89"><expr pos:start="113:9" pos:end="113:88"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:88"><name pos:start="113:15" pos:end="113:35">hevc_decode_nal_units</name><argument_list pos:start="113:36" pos:end="113:88">(<argument pos:start="113:37" pos:end="113:40"><expr pos:start="113:37" pos:end="113:40"><name pos:start="113:37" pos:end="113:40">data</name></expr></argument>, <argument pos:start="113:43" pos:end="113:46"><expr pos:start="113:43" pos:end="113:46"><name pos:start="113:43" pos:end="113:46">size</name></expr></argument>, <argument pos:start="113:49" pos:end="113:50"><expr pos:start="113:49" pos:end="113:50"><name pos:start="113:49" pos:end="113:50">ps</name></expr></argument>, <argument pos:start="113:53" pos:end="113:61"><expr pos:start="113:53" pos:end="113:61"><operator pos:start="113:53" pos:end="113:53">*</operator><name pos:start="113:54" pos:end="113:61">is_nalff</name></expr></argument>, <argument pos:start="113:64" pos:end="113:79"><expr pos:start="113:64" pos:end="113:79"><operator pos:start="113:64" pos:end="113:64">*</operator><name pos:start="113:65" pos:end="113:79">nal_length_size</name></expr></argument>, <argument pos:start="113:82" pos:end="113:87"><expr pos:start="113:82" pos:end="113:87"><name pos:start="113:82" pos:end="113:87">logctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="117:23"><if pos:start="115:9" pos:end="117:23">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:23"><block_content pos:start="117:13" pos:end="117:23">

            <return pos:start="117:13" pos:end="117:23">return <expr pos:start="117:20" pos:end="117:22"><name pos:start="117:20" pos:end="117:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
