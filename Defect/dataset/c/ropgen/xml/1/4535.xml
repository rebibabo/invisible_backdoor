<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4535.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">mips_jazz_init</name><parameter_list pos:start="1:27" pos:end="9:56">(<parameter pos:start="1:28" pos:end="1:54"><decl pos:start="1:28" pos:end="1:54"><type pos:start="1:28" pos:end="1:54"><name pos:start="1:28" pos:end="1:39">MemoryRegion</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:54">address_space</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:57"><decl pos:start="3:28" pos:end="3:57"><type pos:start="3:28" pos:end="3:57"><name pos:start="3:28" pos:end="3:39">MemoryRegion</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:57">address_space_io</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:46"><decl pos:start="5:28" pos:end="5:46"><type pos:start="5:28" pos:end="5:46"><name pos:start="5:28" pos:end="5:37">ram_addr_t</name></type> <name pos:start="5:39" pos:end="5:46">ram_size</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:48"><decl pos:start="7:28" pos:end="7:48"><type pos:start="7:28" pos:end="7:48"><specifier pos:start="7:28" pos:end="7:32">const</specifier> <name pos:start="7:34" pos:end="7:37">char</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier></type><name pos:start="7:40" pos:end="7:48">cpu_model</name></decl></parameter>,

                           <parameter pos:start="9:28" pos:end="9:55"><decl pos:start="9:28" pos:end="9:55"><type pos:start="9:28" pos:end="9:55"><name pos:start="9:28" pos:end="9:44"><name pos:start="9:28" pos:end="9:31">enum</name> <name pos:start="9:33" pos:end="9:44">jazz_model_e</name></name></type> <name pos:start="9:46" pos:end="9:55">jazz_model</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="389:1">{<block_content pos:start="13:5" pos:end="387:55">

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">bios_size</name></decl>, <decl pos:start="15:20" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:20" pos:end="15:20">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">MIPSCPU</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">CPUMIPSState</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:20">rc4030</name></decl>, <decl pos:start="21:23" pos:end="21:28"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:23" pos:end="21:23">*</modifier></type><name pos:start="21:24" pos:end="21:28">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:14">rc4030_dma</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:20">dmas</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:9"><name pos:start="25:5" pos:end="25:8">void</name><modifier pos:start="25:9" pos:end="25:9">*</modifier></type> <name pos:start="25:11" pos:end="25:23">rc4030_opaque</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:47"><decl pos:start="27:5" pos:end="27:46"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:21">rtc</name> <init pos:start="27:23" pos:end="27:46">= <expr pos:start="27:25" pos:end="27:46"><call pos:start="27:25" pos:end="27:46"><name pos:start="27:25" pos:end="27:29">g_new</name><argument_list pos:start="27:30" pos:end="27:46">(<argument pos:start="27:31" pos:end="27:42"><expr pos:start="27:31" pos:end="27:42"><name pos:start="27:31" pos:end="27:42">MemoryRegion</name></expr></argument>, <argument pos:start="27:45" pos:end="27:45"><expr pos:start="27:45" pos:end="27:45"><literal type="number" pos:start="27:45" pos:end="27:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:49"><decl pos:start="29:5" pos:end="29:48"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:23">i8042</name> <init pos:start="29:25" pos:end="29:48">= <expr pos:start="29:27" pos:end="29:48"><call pos:start="29:27" pos:end="29:48"><name pos:start="29:27" pos:end="29:31">g_new</name><argument_list pos:start="29:32" pos:end="29:48">(<argument pos:start="29:33" pos:end="29:44"><expr pos:start="29:33" pos:end="29:44"><name pos:start="29:33" pos:end="29:44">MemoryRegion</name></expr></argument>, <argument pos:start="29:47" pos:end="29:47"><expr pos:start="29:47" pos:end="29:47"><literal type="number" pos:start="29:47" pos:end="29:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:53"><decl pos:start="31:5" pos:end="31:52"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:27">dma_dummy</name> <init pos:start="31:29" pos:end="31:52">= <expr pos:start="31:31" pos:end="31:52"><call pos:start="31:31" pos:end="31:52"><name pos:start="31:31" pos:end="31:35">g_new</name><argument_list pos:start="31:36" pos:end="31:52">(<argument pos:start="31:37" pos:end="31:48"><expr pos:start="31:37" pos:end="31:48"><name pos:start="31:37" pos:end="31:48">MemoryRegion</name></expr></argument>, <argument pos:start="31:51" pos:end="31:51"><expr pos:start="31:51" pos:end="31:51"><literal type="number" pos:start="31:51" pos:end="31:51">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:16"><decl pos:start="33:5" pos:end="33:15"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">NICInfo</name> <modifier pos:start="33:13" pos:end="33:13">*</modifier></type><name pos:start="33:14" pos:end="33:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:21"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:15">DeviceState</name> <modifier pos:start="35:17" pos:end="35:17">*</modifier></type><name pos:start="35:18" pos:end="35:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:25"><decl pos:start="37:5" pos:end="37:24"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">SysBusDevice</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:24">sysbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:10">ISABus</name> <modifier pos:start="39:12" pos:end="39:12">*</modifier></type><name pos:start="39:13" pos:end="39:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:19"><decl pos:start="41:5" pos:end="41:18"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">ISADevice</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:18">pit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:27"><decl pos:start="43:5" pos:end="43:26"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">DriveInfo</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:26"><name pos:start="43:16" pos:end="43:18">fds</name><index pos:start="43:19" pos:end="43:26">[<expr pos:start="43:20" pos:end="43:25"><name pos:start="43:20" pos:end="43:25">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:35"><decl pos:start="45:5" pos:end="45:22"><type pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:12">qemu_irq</name></type> <name pos:start="45:14" pos:end="45:22">esp_reset</name></decl>, <decl pos:start="45:25" pos:end="45:34"><type ref="prev" pos:start="45:5" pos:end="45:12"/><name pos:start="45:25" pos:end="45:34">dma_enable</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:27"><decl pos:start="47:5" pos:end="47:26"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:12">qemu_irq</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:47"><decl pos:start="49:5" pos:end="49:46"><type pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:16">MemoryRegion</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:21">ram</name> <init pos:start="49:23" pos:end="49:46">= <expr pos:start="49:25" pos:end="49:46"><call pos:start="49:25" pos:end="49:46"><name pos:start="49:25" pos:end="49:29">g_new</name><argument_list pos:start="49:30" pos:end="49:46">(<argument pos:start="49:31" pos:end="49:42"><expr pos:start="49:31" pos:end="49:42"><name pos:start="49:31" pos:end="49:42">MemoryRegion</name></expr></argument>, <argument pos:start="49:45" pos:end="49:45"><expr pos:start="49:45" pos:end="49:45"><literal type="number" pos:start="49:45" pos:end="49:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:48"><decl pos:start="51:5" pos:end="51:47"><type pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:16">MemoryRegion</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:22">bios</name> <init pos:start="51:24" pos:end="51:47">= <expr pos:start="51:26" pos:end="51:47"><call pos:start="51:26" pos:end="51:47"><name pos:start="51:26" pos:end="51:30">g_new</name><argument_list pos:start="51:31" pos:end="51:47">(<argument pos:start="51:32" pos:end="51:43"><expr pos:start="51:32" pos:end="51:43"><name pos:start="51:32" pos:end="51:43">MemoryRegion</name></expr></argument>, <argument pos:start="51:46" pos:end="51:46"><expr pos:start="51:46" pos:end="51:46"><literal type="number" pos:start="51:46" pos:end="51:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:49"><decl pos:start="53:5" pos:end="53:48"><type pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:16">MemoryRegion</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:23">bios2</name> <init pos:start="53:25" pos:end="53:48">= <expr pos:start="53:27" pos:end="53:48"><call pos:start="53:27" pos:end="53:48"><name pos:start="53:27" pos:end="53:31">g_new</name><argument_list pos:start="53:32" pos:end="53:48">(<argument pos:start="53:33" pos:end="53:44"><expr pos:start="53:33" pos:end="53:44"><name pos:start="53:33" pos:end="53:44">MemoryRegion</name></expr></argument>, <argument pos:start="53:47" pos:end="53:47"><expr pos:start="53:47" pos:end="53:47"><literal type="number" pos:start="53:47" pos:end="53:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:19">/* init CPUs */</comment>

    <if_stmt pos:start="59:5" pos:end="73:5"><if pos:start="59:5" pos:end="73:5">if <condition pos:start="59:8" pos:end="59:26">(<expr pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:17">cpu_model</name> <operator pos:start="59:19" pos:end="59:20">==</operator> <name pos:start="59:22" pos:end="59:25">NULL</name></expr>)</condition> <block pos:start="59:28" pos:end="73:5">{<block_content pos:start="63:9" pos:end="72:0">

<cpp:ifdef pos:start="61:1" pos:end="61:20">#<cpp:directive pos:start="61:2" pos:end="61:6">ifdef</cpp:directive> <name pos:start="61:8" pos:end="61:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="63:9" pos:end="66:0"><expr pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:17">cpu_model</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="string" pos:start="63:21" pos:end="63:27">"R4000"</literal></expr>;</expr_stmt>

<cpp:else pos:start="65:1" pos:end="65:5">#<cpp:directive pos:start="65:2" pos:end="65:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="67:9" pos:end="67:79">/* FIXME: All wrong, this maybe should be R3000 for the older JAZZs. */</comment>

        <expr_stmt pos:start="69:9" pos:end="72:0"><expr pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:17">cpu_model</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <literal type="string" pos:start="69:21" pos:end="69:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:35"><expr pos:start="75:5" pos:end="75:34"><name pos:start="75:5" pos:end="75:7">cpu</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:34"><name pos:start="75:11" pos:end="75:23">cpu_mips_init</name><argument_list pos:start="75:24" pos:end="75:34">(<argument pos:start="75:25" pos:end="75:33"><expr pos:start="75:25" pos:end="75:33"><name pos:start="75:25" pos:end="75:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:20">(<expr pos:start="77:9" pos:end="77:19"><name pos:start="77:9" pos:end="77:11">cpu</name> <operator pos:start="77:13" pos:end="77:14">==</operator> <name pos:start="77:16" pos:end="77:19">NULL</name></expr>)</condition> <block pos:start="77:22" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:16">

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><call pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:15">fprintf</name><argument_list pos:start="79:16" pos:end="79:58">(<argument pos:start="79:17" pos:end="79:22"><expr pos:start="79:17" pos:end="79:22"><name pos:start="79:17" pos:end="79:22">stderr</name></expr></argument>, <argument pos:start="79:25" pos:end="79:57"><expr pos:start="79:25" pos:end="79:57"><literal type="string" pos:start="79:25" pos:end="79:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:16"><expr pos:start="81:9" pos:end="81:15"><call pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:12">exit</name><argument_list pos:start="81:13" pos:end="81:15">(<argument pos:start="81:14" pos:end="81:14"><expr pos:start="81:14" pos:end="81:14"><literal type="number" pos:start="81:14" pos:end="81:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:20"><expr pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:7">env</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <operator pos:start="85:11" pos:end="85:11">&amp;</operator><name pos:start="85:12" pos:end="85:19"><name pos:start="85:12" pos:end="85:14">cpu</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:45"><expr pos:start="87:5" pos:end="87:44"><call pos:start="87:5" pos:end="87:44"><name pos:start="87:5" pos:end="87:23">qemu_register_reset</name><argument_list pos:start="87:24" pos:end="87:44">(<argument pos:start="87:25" pos:end="87:38"><expr pos:start="87:25" pos:end="87:38"><name pos:start="87:25" pos:end="87:38">main_cpu_reset</name></expr></argument>, <argument pos:start="87:41" pos:end="87:43"><expr pos:start="87:41" pos:end="87:43"><name pos:start="87:41" pos:end="87:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:59"><expr pos:start="93:5" pos:end="93:58"><call pos:start="93:5" pos:end="93:58"><name pos:start="93:5" pos:end="93:26">memory_region_init_ram</name><argument_list pos:start="93:27" pos:end="93:58">(<argument pos:start="93:28" pos:end="93:30"><expr pos:start="93:28" pos:end="93:30"><name pos:start="93:28" pos:end="93:30">ram</name></expr></argument>, <argument pos:start="93:33" pos:end="93:47"><expr pos:start="93:33" pos:end="93:47"><literal type="string" pos:start="93:33" pos:end="93:47">"mips_jazz.ram"</literal></expr></argument>, <argument pos:start="93:50" pos:end="93:57"><expr pos:start="93:50" pos:end="93:57"><name pos:start="93:50" pos:end="93:57">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:37"><expr pos:start="95:5" pos:end="95:36"><call pos:start="95:5" pos:end="95:36"><name pos:start="95:5" pos:end="95:31">vmstate_register_ram_global</name><argument_list pos:start="95:32" pos:end="95:36">(<argument pos:start="95:33" pos:end="95:35"><expr pos:start="95:33" pos:end="95:35"><name pos:start="95:33" pos:end="95:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:55"><expr pos:start="97:5" pos:end="97:54"><call pos:start="97:5" pos:end="97:54"><name pos:start="97:5" pos:end="97:31">memory_region_add_subregion</name><argument_list pos:start="97:32" pos:end="97:54">(<argument pos:start="97:33" pos:end="97:45"><expr pos:start="97:33" pos:end="97:45"><name pos:start="97:33" pos:end="97:45">address_space</name></expr></argument>, <argument pos:start="97:48" pos:end="97:48"><expr pos:start="97:48" pos:end="97:48"><literal type="number" pos:start="97:48" pos:end="97:48">0</literal></expr></argument>, <argument pos:start="97:51" pos:end="97:53"><expr pos:start="97:51" pos:end="97:53"><name pos:start="97:51" pos:end="97:53">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:69"><expr pos:start="101:5" pos:end="101:68"><call pos:start="101:5" pos:end="101:68"><name pos:start="101:5" pos:end="101:26">memory_region_init_ram</name><argument_list pos:start="101:27" pos:end="101:68">(<argument pos:start="101:28" pos:end="101:31"><expr pos:start="101:28" pos:end="101:31"><name pos:start="101:28" pos:end="101:31">bios</name></expr></argument>, <argument pos:start="101:34" pos:end="101:49"><expr pos:start="101:34" pos:end="101:49"><literal type="string" pos:start="101:34" pos:end="101:49">"mips_jazz.bios"</literal></expr></argument>, <argument pos:start="101:52" pos:end="101:67"><expr pos:start="101:52" pos:end="101:67"><name pos:start="101:52" pos:end="101:67">MAGNUM_BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:38"><expr pos:start="103:5" pos:end="103:37"><call pos:start="103:5" pos:end="103:37"><name pos:start="103:5" pos:end="103:31">vmstate_register_ram_global</name><argument_list pos:start="103:32" pos:end="103:37">(<argument pos:start="103:33" pos:end="103:36"><expr pos:start="103:33" pos:end="103:36"><name pos:start="103:33" pos:end="103:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:43"><expr pos:start="105:5" pos:end="105:42"><call pos:start="105:5" pos:end="105:42"><name pos:start="105:5" pos:end="105:30">memory_region_set_readonly</name><argument_list pos:start="105:31" pos:end="105:42">(<argument pos:start="105:32" pos:end="105:35"><expr pos:start="105:32" pos:end="105:35"><name pos:start="105:32" pos:end="105:35">bios</name></expr></argument>, <argument pos:start="105:38" pos:end="105:41"><expr pos:start="105:38" pos:end="105:41"><name pos:start="105:38" pos:end="105:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="109:50"><expr pos:start="107:5" pos:end="109:49"><call pos:start="107:5" pos:end="109:49"><name pos:start="107:5" pos:end="107:28">memory_region_init_alias</name><argument_list pos:start="107:29" pos:end="109:49">(<argument pos:start="107:30" pos:end="107:34"><expr pos:start="107:30" pos:end="107:34"><name pos:start="107:30" pos:end="107:34">bios2</name></expr></argument>, <argument pos:start="107:37" pos:end="107:52"><expr pos:start="107:37" pos:end="107:52"><literal type="string" pos:start="107:37" pos:end="107:52">"mips_jazz.bios"</literal></expr></argument>, <argument pos:start="107:55" pos:end="107:58"><expr pos:start="107:55" pos:end="107:58"><name pos:start="107:55" pos:end="107:58">bios</name></expr></argument>,

                             <argument pos:start="109:30" pos:end="109:30"><expr pos:start="109:30" pos:end="109:30"><literal type="number" pos:start="109:30" pos:end="109:30">0</literal></expr></argument>, <argument pos:start="109:33" pos:end="109:48"><expr pos:start="109:33" pos:end="109:48"><name pos:start="109:33" pos:end="109:48">MAGNUM_BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:67"><expr pos:start="111:5" pos:end="111:66"><call pos:start="111:5" pos:end="111:66"><name pos:start="111:5" pos:end="111:31">memory_region_add_subregion</name><argument_list pos:start="111:32" pos:end="111:66">(<argument pos:start="111:33" pos:end="111:45"><expr pos:start="111:33" pos:end="111:45"><name pos:start="111:33" pos:end="111:45">address_space</name></expr></argument>, <argument pos:start="111:48" pos:end="111:59"><expr pos:start="111:48" pos:end="111:59"><literal type="number" pos:start="111:48" pos:end="111:59">0x1fc00000LL</literal></expr></argument>, <argument pos:start="111:62" pos:end="111:65"><expr pos:start="111:62" pos:end="111:65"><name pos:start="111:62" pos:end="111:65">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:68"><expr pos:start="113:5" pos:end="113:67"><call pos:start="113:5" pos:end="113:67"><name pos:start="113:5" pos:end="113:31">memory_region_add_subregion</name><argument_list pos:start="113:32" pos:end="113:67">(<argument pos:start="113:33" pos:end="113:45"><expr pos:start="113:33" pos:end="113:45"><name pos:start="113:33" pos:end="113:45">address_space</name></expr></argument>, <argument pos:start="113:48" pos:end="113:59"><expr pos:start="113:48" pos:end="113:59"><literal type="number" pos:start="113:48" pos:end="113:59">0xfff00000LL</literal></expr></argument>, <argument pos:start="113:62" pos:end="113:66"><expr pos:start="113:62" pos:end="113:66"><name pos:start="113:62" pos:end="113:66">bios2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:30">/* load the BIOS image. */</comment>

    <if_stmt pos:start="119:5" pos:end="121:34"><if pos:start="119:5" pos:end="121:34">if <condition pos:start="119:8" pos:end="119:26">(<expr pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:17">bios_name</name> <operator pos:start="119:19" pos:end="119:20">==</operator> <name pos:start="119:22" pos:end="119:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:34"><block_content pos:start="121:9" pos:end="121:34">

        <expr_stmt pos:start="121:9" pos:end="121:34"><expr pos:start="121:9" pos:end="121:33"><name pos:start="121:9" pos:end="121:17">bios_name</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <name pos:start="121:21" pos:end="121:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:62"><expr pos:start="123:5" pos:end="123:61"><name pos:start="123:5" pos:end="123:12">filename</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <call pos:start="123:16" pos:end="123:61"><name pos:start="123:16" pos:end="123:29">qemu_find_file</name><argument_list pos:start="123:30" pos:end="123:61">(<argument pos:start="123:31" pos:end="123:49"><expr pos:start="123:31" pos:end="123:49"><name pos:start="123:31" pos:end="123:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="123:52" pos:end="123:60"><expr pos:start="123:52" pos:end="123:60"><name pos:start="123:52" pos:end="123:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="137:5"><if pos:start="125:5" pos:end="133:5">if <condition pos:start="125:8" pos:end="125:17">(<expr pos:start="125:9" pos:end="125:16"><name pos:start="125:9" pos:end="125:16">filename</name></expr>)</condition> <block pos:start="125:19" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:25">

        <expr_stmt pos:start="127:9" pos:end="129:58"><expr pos:start="127:9" pos:end="129:57"><name pos:start="127:9" pos:end="127:17">bios_size</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <call pos:start="127:21" pos:end="129:57"><name pos:start="127:21" pos:end="127:39">load_image_targphys</name><argument_list pos:start="127:40" pos:end="129:57">(<argument pos:start="127:41" pos:end="127:48"><expr pos:start="127:41" pos:end="127:48"><name pos:start="127:41" pos:end="127:48">filename</name></expr></argument>, <argument pos:start="127:51" pos:end="127:62"><expr pos:start="127:51" pos:end="127:62"><literal type="number" pos:start="127:51" pos:end="127:62">0xfff00000LL</literal></expr></argument>,

                                        <argument pos:start="129:41" pos:end="129:56"><expr pos:start="129:41" pos:end="129:56"><name pos:start="129:41" pos:end="129:56">MAGNUM_BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:25"><expr pos:start="131:9" pos:end="131:24"><call pos:start="131:9" pos:end="131:24"><name pos:start="131:9" pos:end="131:14">g_free</name><argument_list pos:start="131:15" pos:end="131:24">(<argument pos:start="131:16" pos:end="131:23"><expr pos:start="131:16" pos:end="131:23"><name pos:start="131:16" pos:end="131:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="137:5">else <block pos:start="133:12" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:23">

        <expr_stmt pos:start="135:9" pos:end="135:23"><expr pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:17">bios_size</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <operator pos:start="135:21" pos:end="135:21">-</operator><literal type="number" pos:start="135:22" pos:end="135:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="139:5" pos:end="147:5"><if pos:start="139:5" pos:end="147:5">if <condition pos:start="139:8" pos:end="139:54">(<expr pos:start="139:9" pos:end="139:53"><name pos:start="139:9" pos:end="139:36"><name pos:start="139:9" pos:end="139:17">bios_size</name> <argument_list type="generic" pos:start="139:19" pos:end="139:36">&lt; <argument pos:start="139:21" pos:end="139:34"><expr pos:start="139:21" pos:end="139:34"><literal type="number" pos:start="139:21" pos:end="139:21">0</literal> <operator pos:start="139:23" pos:end="139:24">||</operator> <name pos:start="139:26" pos:end="139:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="139:38" pos:end="139:53">MAGNUM_BIOS_SIZE</name></expr>)</condition> <block pos:start="139:56" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:16">

        <expr_stmt pos:start="141:9" pos:end="143:27"><expr pos:start="141:9" pos:end="143:26"><call pos:start="141:9" pos:end="143:26"><name pos:start="141:9" pos:end="141:15">fprintf</name><argument_list pos:start="141:16" pos:end="143:26">(<argument pos:start="141:17" pos:end="141:22"><expr pos:start="141:17" pos:end="141:22"><name pos:start="141:17" pos:end="141:22">stderr</name></expr></argument>, <argument pos:start="141:25" pos:end="141:63"><expr pos:start="141:25" pos:end="141:63"><literal type="string" pos:start="141:25" pos:end="141:63">"qemu: Could not load MIPS bios '%s'\n"</literal></expr></argument>,

                <argument pos:start="143:17" pos:end="143:25"><expr pos:start="143:17" pos:end="143:25"><name pos:start="143:17" pos:end="143:25">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:16"><expr pos:start="145:9" pos:end="145:15"><call pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:12">exit</name><argument_list pos:start="145:13" pos:end="145:15">(<argument pos:start="145:14" pos:end="145:14"><expr pos:start="145:14" pos:end="145:14"><literal type="number" pos:start="145:14" pos:end="145:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:35">/* Init CPU internal devices */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:31"><expr pos:start="153:5" pos:end="153:30"><call pos:start="153:5" pos:end="153:30"><name pos:start="153:5" pos:end="153:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="153:26" pos:end="153:30">(<argument pos:start="153:27" pos:end="153:29"><expr pos:start="153:27" pos:end="153:29"><name pos:start="153:27" pos:end="153:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:29"><expr pos:start="155:5" pos:end="155:28"><call pos:start="155:5" pos:end="155:28"><name pos:start="155:5" pos:end="155:23">cpu_mips_clock_init</name><argument_list pos:start="155:24" pos:end="155:28">(<argument pos:start="155:25" pos:end="155:27"><expr pos:start="155:25" pos:end="155:27"><name pos:start="155:25" pos:end="155:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:17">/* Chipset */</comment>

    <expr_stmt pos:start="161:5" pos:end="163:47"><expr pos:start="161:5" pos:end="163:46"><name pos:start="161:5" pos:end="161:17">rc4030_opaque</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <call pos:start="161:21" pos:end="163:46"><name pos:start="161:21" pos:end="161:31">rc4030_init</name><argument_list pos:start="161:32" pos:end="163:46">(<argument pos:start="161:33" pos:end="161:43"><expr pos:start="161:33" pos:end="161:43"><name pos:start="161:33" pos:end="161:43"><name pos:start="161:33" pos:end="161:35">env</name><operator pos:start="161:36" pos:end="161:37">-&gt;</operator><name pos:start="161:38" pos:end="161:40">irq</name><index pos:start="161:41" pos:end="161:43">[<expr pos:start="161:42" pos:end="161:42"><literal type="number" pos:start="161:42" pos:end="161:42">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="161:46" pos:end="161:56"><expr pos:start="161:46" pos:end="161:56"><name pos:start="161:46" pos:end="161:56"><name pos:start="161:46" pos:end="161:48">env</name><operator pos:start="161:49" pos:end="161:50">-&gt;</operator><name pos:start="161:51" pos:end="161:53">irq</name><index pos:start="161:54" pos:end="161:56">[<expr pos:start="161:55" pos:end="161:55"><literal type="number" pos:start="161:55" pos:end="161:55">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="161:59" pos:end="161:65"><expr pos:start="161:59" pos:end="161:65"><operator pos:start="161:59" pos:end="161:59">&amp;</operator><name pos:start="161:60" pos:end="161:65">rc4030</name></expr></argument>, <argument pos:start="161:68" pos:end="161:72"><expr pos:start="161:68" pos:end="161:72"><operator pos:start="161:68" pos:end="161:68">&amp;</operator><name pos:start="161:69" pos:end="161:72">dmas</name></expr></argument>,

                                <argument pos:start="163:33" pos:end="163:45"><expr pos:start="163:33" pos:end="163:45"><name pos:start="163:33" pos:end="163:45">address_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:80"><expr pos:start="165:5" pos:end="165:79"><call pos:start="165:5" pos:end="165:79"><name pos:start="165:5" pos:end="165:25">memory_region_init_io</name><argument_list pos:start="165:26" pos:end="165:79">(<argument pos:start="165:27" pos:end="165:35"><expr pos:start="165:27" pos:end="165:35"><name pos:start="165:27" pos:end="165:35">dma_dummy</name></expr></argument>, <argument pos:start="165:38" pos:end="165:51"><expr pos:start="165:38" pos:end="165:51"><operator pos:start="165:38" pos:end="165:38">&amp;</operator><name pos:start="165:39" pos:end="165:51">dma_dummy_ops</name></expr></argument>, <argument pos:start="165:54" pos:end="165:57"><expr pos:start="165:54" pos:end="165:57"><name pos:start="165:54" pos:end="165:57">NULL</name></expr></argument>, <argument pos:start="165:60" pos:end="165:70"><expr pos:start="165:60" pos:end="165:70"><literal type="string" pos:start="165:60" pos:end="165:70">"dummy_dma"</literal></expr></argument>, <argument pos:start="165:73" pos:end="165:78"><expr pos:start="165:73" pos:end="165:78"><literal type="number" pos:start="165:73" pos:end="165:78">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:70"><expr pos:start="167:5" pos:end="167:69"><call pos:start="167:5" pos:end="167:69"><name pos:start="167:5" pos:end="167:31">memory_region_add_subregion</name><argument_list pos:start="167:32" pos:end="167:69">(<argument pos:start="167:33" pos:end="167:45"><expr pos:start="167:33" pos:end="167:45"><name pos:start="167:33" pos:end="167:45">address_space</name></expr></argument>, <argument pos:start="167:48" pos:end="167:57"><expr pos:start="167:48" pos:end="167:57"><literal type="number" pos:start="167:48" pos:end="167:57">0x8000d000</literal></expr></argument>, <argument pos:start="167:60" pos:end="167:68"><expr pos:start="167:60" pos:end="167:68"><name pos:start="167:60" pos:end="167:68">dma_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:21">/* ISA devices */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:50"><expr pos:start="173:5" pos:end="173:49"><name pos:start="173:5" pos:end="173:11">isa_bus</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="173:49"><name pos:start="173:15" pos:end="173:25">isa_bus_new</name><argument_list pos:start="173:26" pos:end="173:49">(<argument pos:start="173:27" pos:end="173:30"><expr pos:start="173:27" pos:end="173:30"><name pos:start="173:27" pos:end="173:30">NULL</name></expr></argument>, <argument pos:start="173:33" pos:end="173:48"><expr pos:start="173:33" pos:end="173:48"><name pos:start="173:33" pos:end="173:48">address_space_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:45"><expr pos:start="175:5" pos:end="175:44"><name pos:start="175:5" pos:end="175:9">i8259</name> <operator pos:start="175:11" pos:end="175:11">=</operator> <call pos:start="175:13" pos:end="175:44"><name pos:start="175:13" pos:end="175:22">i8259_init</name><argument_list pos:start="175:23" pos:end="175:44">(<argument pos:start="175:24" pos:end="175:30"><expr pos:start="175:24" pos:end="175:30"><name pos:start="175:24" pos:end="175:30">isa_bus</name></expr></argument>, <argument pos:start="175:33" pos:end="175:43"><expr pos:start="175:33" pos:end="175:43"><name pos:start="175:33" pos:end="175:43"><name pos:start="175:33" pos:end="175:35">env</name><operator pos:start="175:36" pos:end="175:37">-&gt;</operator><name pos:start="175:38" pos:end="175:40">irq</name><index pos:start="175:41" pos:end="175:43">[<expr pos:start="175:42" pos:end="175:42"><literal type="number" pos:start="175:42" pos:end="175:42">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:33"><expr pos:start="177:5" pos:end="177:32"><call pos:start="177:5" pos:end="177:32"><name pos:start="177:5" pos:end="177:16">isa_bus_irqs</name><argument_list pos:start="177:17" pos:end="177:32">(<argument pos:start="177:18" pos:end="177:24"><expr pos:start="177:18" pos:end="177:24"><name pos:start="177:18" pos:end="177:24">isa_bus</name></expr></argument>, <argument pos:start="177:27" pos:end="177:31"><expr pos:start="177:27" pos:end="177:31"><name pos:start="177:27" pos:end="177:31">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:65"><expr pos:start="179:5" pos:end="179:64"><name pos:start="179:5" pos:end="179:16">cpu_exit_irq</name> <operator pos:start="179:18" pos:end="179:18">=</operator> <call pos:start="179:20" pos:end="179:64"><name pos:start="179:20" pos:end="179:37">qemu_allocate_irqs</name><argument_list pos:start="179:38" pos:end="179:64">(<argument pos:start="179:39" pos:end="179:54"><expr pos:start="179:39" pos:end="179:54"><name pos:start="179:39" pos:end="179:54">cpu_request_exit</name></expr></argument>, <argument pos:start="179:57" pos:end="179:60"><expr pos:start="179:57" pos:end="179:60"><name pos:start="179:57" pos:end="179:60">NULL</name></expr></argument>, <argument pos:start="179:63" pos:end="179:63"><expr pos:start="179:63" pos:end="179:63"><literal type="number" pos:start="179:63" pos:end="179:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:30"><expr pos:start="181:5" pos:end="181:29"><call pos:start="181:5" pos:end="181:29"><name pos:start="181:5" pos:end="181:12">DMA_init</name><argument_list pos:start="181:13" pos:end="181:29">(<argument pos:start="181:14" pos:end="181:14"><expr pos:start="181:14" pos:end="181:14"><literal type="number" pos:start="181:14" pos:end="181:14">0</literal></expr></argument>, <argument pos:start="181:17" pos:end="181:28"><expr pos:start="181:17" pos:end="181:28"><name pos:start="181:17" pos:end="181:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:43"><expr pos:start="183:5" pos:end="183:42"><name pos:start="183:5" pos:end="183:7">pit</name> <operator pos:start="183:9" pos:end="183:9">=</operator> <call pos:start="183:11" pos:end="183:42"><name pos:start="183:11" pos:end="183:18">pit_init</name><argument_list pos:start="183:19" pos:end="183:42">(<argument pos:start="183:20" pos:end="183:26"><expr pos:start="183:20" pos:end="183:26"><name pos:start="183:20" pos:end="183:26">isa_bus</name></expr></argument>, <argument pos:start="183:29" pos:end="183:32"><expr pos:start="183:29" pos:end="183:32"><literal type="number" pos:start="183:29" pos:end="183:32">0x40</literal></expr></argument>, <argument pos:start="183:35" pos:end="183:35"><expr pos:start="183:35" pos:end="183:35"><literal type="number" pos:start="183:35" pos:end="183:35">0</literal></expr></argument>, <argument pos:start="183:38" pos:end="183:41"><expr pos:start="183:38" pos:end="183:41"><name pos:start="183:38" pos:end="183:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:29"><expr pos:start="185:5" pos:end="185:28"><call pos:start="185:5" pos:end="185:28"><name pos:start="185:5" pos:end="185:14">pcspk_init</name><argument_list pos:start="185:15" pos:end="185:28">(<argument pos:start="185:16" pos:end="185:22"><expr pos:start="185:16" pos:end="185:22"><name pos:start="185:16" pos:end="185:22">isa_bus</name></expr></argument>, <argument pos:start="185:25" pos:end="185:27"><expr pos:start="185:25" pos:end="185:27"><name pos:start="185:25" pos:end="185:27">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:36">/* ISA IO space at 0x90000000 */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:42"><expr pos:start="191:5" pos:end="191:41"><call pos:start="191:5" pos:end="191:41"><name pos:start="191:5" pos:end="191:17">isa_mmio_init</name><argument_list pos:start="191:18" pos:end="191:41">(<argument pos:start="191:19" pos:end="191:28"><expr pos:start="191:19" pos:end="191:28"><literal type="number" pos:start="191:19" pos:end="191:28">0x90000000</literal></expr></argument>, <argument pos:start="191:31" pos:end="191:40"><expr pos:start="191:31" pos:end="191:40"><literal type="number" pos:start="191:31" pos:end="191:40">0x01000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:30"><expr pos:start="193:5" pos:end="193:29"><name pos:start="193:5" pos:end="193:16">isa_mem_base</name> <operator pos:start="193:18" pos:end="193:18">=</operator> <literal type="number" pos:start="193:20" pos:end="193:29">0x11000000</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:20">/* Video card */</comment>

    <switch pos:start="199:5" pos:end="247:5">switch <condition pos:start="199:12" pos:end="199:23">(<expr pos:start="199:13" pos:end="199:22"><name pos:start="199:13" pos:end="199:22">jazz_model</name></expr>)</condition> <block pos:start="199:25" pos:end="247:5">{<block_content pos:start="201:5" pos:end="245:14">

    <case pos:start="201:5" pos:end="201:21">case <expr pos:start="201:10" pos:end="201:20"><name pos:start="201:10" pos:end="201:20">JAZZ_MAGNUM</name></expr>:</case>

        <expr_stmt pos:start="203:9" pos:end="203:47"><expr pos:start="203:9" pos:end="203:46"><name pos:start="203:9" pos:end="203:11">dev</name> <operator pos:start="203:13" pos:end="203:13">=</operator> <call pos:start="203:15" pos:end="203:46"><name pos:start="203:15" pos:end="203:25">qdev_create</name><argument_list pos:start="203:26" pos:end="203:46">(<argument pos:start="203:27" pos:end="203:30"><expr pos:start="203:27" pos:end="203:30"><name pos:start="203:27" pos:end="203:30">NULL</name></expr></argument>, <argument pos:start="203:33" pos:end="203:45"><expr pos:start="203:33" pos:end="203:45"><literal type="string" pos:start="203:33" pos:end="203:45">"sysbus-g364"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:30"><expr pos:start="205:9" pos:end="205:29"><call pos:start="205:9" pos:end="205:29"><name pos:start="205:9" pos:end="205:24">qdev_init_nofail</name><argument_list pos:start="205:25" pos:end="205:29">(<argument pos:start="205:26" pos:end="205:28"><expr pos:start="205:26" pos:end="205:28"><name pos:start="205:26" pos:end="205:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:39"><expr pos:start="207:9" pos:end="207:38"><name pos:start="207:9" pos:end="207:14">sysbus</name> <operator pos:start="207:16" pos:end="207:16">=</operator> <call pos:start="207:18" pos:end="207:38"><name pos:start="207:18" pos:end="207:33">sysbus_from_qdev</name><argument_list pos:start="207:34" pos:end="207:38">(<argument pos:start="207:35" pos:end="207:37"><expr pos:start="207:35" pos:end="207:37"><name pos:start="207:35" pos:end="207:37">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:47"><expr pos:start="209:9" pos:end="209:46"><call pos:start="209:9" pos:end="209:46"><name pos:start="209:9" pos:end="209:23">sysbus_mmio_map</name><argument_list pos:start="209:24" pos:end="209:46">(<argument pos:start="209:25" pos:end="209:30"><expr pos:start="209:25" pos:end="209:30"><name pos:start="209:25" pos:end="209:30">sysbus</name></expr></argument>, <argument pos:start="209:33" pos:end="209:33"><expr pos:start="209:33" pos:end="209:33"><literal type="number" pos:start="209:33" pos:end="209:33">0</literal></expr></argument>, <argument pos:start="209:36" pos:end="209:45"><expr pos:start="209:36" pos:end="209:45"><literal type="number" pos:start="209:36" pos:end="209:45">0x60080000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:47"><expr pos:start="211:9" pos:end="211:46"><call pos:start="211:9" pos:end="211:46"><name pos:start="211:9" pos:end="211:23">sysbus_mmio_map</name><argument_list pos:start="211:24" pos:end="211:46">(<argument pos:start="211:25" pos:end="211:30"><expr pos:start="211:25" pos:end="211:30"><name pos:start="211:25" pos:end="211:30">sysbus</name></expr></argument>, <argument pos:start="211:33" pos:end="211:33"><expr pos:start="211:33" pos:end="211:33"><literal type="number" pos:start="211:33" pos:end="211:33">1</literal></expr></argument>, <argument pos:start="211:36" pos:end="211:45"><expr pos:start="211:36" pos:end="211:45"><literal type="number" pos:start="211:36" pos:end="211:45">0x40000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:49"><expr pos:start="213:9" pos:end="213:48"><call pos:start="213:9" pos:end="213:48"><name pos:start="213:9" pos:end="213:26">sysbus_connect_irq</name><argument_list pos:start="213:27" pos:end="213:48">(<argument pos:start="213:28" pos:end="213:33"><expr pos:start="213:28" pos:end="213:33"><name pos:start="213:28" pos:end="213:33">sysbus</name></expr></argument>, <argument pos:start="213:36" pos:end="213:36"><expr pos:start="213:36" pos:end="213:36"><literal type="number" pos:start="213:36" pos:end="213:36">0</literal></expr></argument>, <argument pos:start="213:39" pos:end="213:47"><expr pos:start="213:39" pos:end="213:47"><name pos:start="213:39" pos:end="213:47"><name pos:start="213:39" pos:end="213:44">rc4030</name><index pos:start="213:45" pos:end="213:47">[<expr pos:start="213:46" pos:end="213:46"><literal type="number" pos:start="213:46" pos:end="213:46">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="215:9" pos:end="233:9">{<block_content pos:start="219:13" pos:end="231:26">

            <comment type="block" pos:start="217:13" pos:end="217:65">/* Simple ROM, so user doesn't have to provide one */</comment>

            <decl_stmt pos:start="219:13" pos:end="219:58"><decl pos:start="219:13" pos:end="219:57"><type pos:start="219:13" pos:end="219:26"><name pos:start="219:13" pos:end="219:24">MemoryRegion</name> <modifier pos:start="219:26" pos:end="219:26">*</modifier></type><name pos:start="219:27" pos:end="219:32">rom_mr</name> <init pos:start="219:34" pos:end="219:57">= <expr pos:start="219:36" pos:end="219:57"><call pos:start="219:36" pos:end="219:57"><name pos:start="219:36" pos:end="219:40">g_new</name><argument_list pos:start="219:41" pos:end="219:57">(<argument pos:start="219:42" pos:end="219:53"><expr pos:start="219:42" pos:end="219:53"><name pos:start="219:42" pos:end="219:53">MemoryRegion</name></expr></argument>, <argument pos:start="219:56" pos:end="219:56"><expr pos:start="219:56" pos:end="219:56"><literal type="number" pos:start="219:56" pos:end="219:56">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:66"><expr pos:start="221:13" pos:end="221:65"><call pos:start="221:13" pos:end="221:65"><name pos:start="221:13" pos:end="221:34">memory_region_init_ram</name><argument_list pos:start="221:35" pos:end="221:65">(<argument pos:start="221:36" pos:end="221:41"><expr pos:start="221:36" pos:end="221:41"><name pos:start="221:36" pos:end="221:41">rom_mr</name></expr></argument>, <argument pos:start="221:44" pos:end="221:55"><expr pos:start="221:44" pos:end="221:55"><literal type="string" pos:start="221:44" pos:end="221:55">"g364fb.rom"</literal></expr></argument>, <argument pos:start="221:58" pos:end="221:64"><expr pos:start="221:58" pos:end="221:64"><literal type="number" pos:start="221:58" pos:end="221:64">0x80000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:48"><expr pos:start="223:13" pos:end="223:47"><call pos:start="223:13" pos:end="223:47"><name pos:start="223:13" pos:end="223:39">vmstate_register_ram_global</name><argument_list pos:start="223:40" pos:end="223:47">(<argument pos:start="223:41" pos:end="223:46"><expr pos:start="223:41" pos:end="223:46"><name pos:start="223:41" pos:end="223:46">rom_mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:53"><expr pos:start="225:13" pos:end="225:52"><call pos:start="225:13" pos:end="225:52"><name pos:start="225:13" pos:end="225:38">memory_region_set_readonly</name><argument_list pos:start="225:39" pos:end="225:52">(<argument pos:start="225:40" pos:end="225:45"><expr pos:start="225:40" pos:end="225:45"><name pos:start="225:40" pos:end="225:45">rom_mr</name></expr></argument>, <argument pos:start="225:48" pos:end="225:51"><expr pos:start="225:48" pos:end="225:51"><name pos:start="225:48" pos:end="225:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt pos:start="227:13" pos:end="227:61"><decl pos:start="227:13" pos:end="227:60"><type pos:start="227:13" pos:end="227:21"><name pos:start="227:13" pos:end="227:19">uint8_t</name> <modifier pos:start="227:21" pos:end="227:21">*</modifier></type><name pos:start="227:22" pos:end="227:24">rom</name> <init pos:start="227:26" pos:end="227:60">= <expr pos:start="227:28" pos:end="227:60"><call pos:start="227:28" pos:end="227:60"><name pos:start="227:28" pos:end="227:52">memory_region_get_ram_ptr</name><argument_list pos:start="227:53" pos:end="227:60">(<argument pos:start="227:54" pos:end="227:59"><expr pos:start="227:54" pos:end="227:59"><name pos:start="227:54" pos:end="227:59">rom_mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:75"><expr pos:start="229:13" pos:end="229:74"><call pos:start="229:13" pos:end="229:74"><name pos:start="229:13" pos:end="229:39">memory_region_add_subregion</name><argument_list pos:start="229:40" pos:end="229:74">(<argument pos:start="229:41" pos:end="229:53"><expr pos:start="229:41" pos:end="229:53"><name pos:start="229:41" pos:end="229:53">address_space</name></expr></argument>, <argument pos:start="229:56" pos:end="229:65"><expr pos:start="229:56" pos:end="229:65"><literal type="number" pos:start="229:56" pos:end="229:65">0x60000000</literal></expr></argument>, <argument pos:start="229:68" pos:end="229:73"><expr pos:start="229:68" pos:end="229:73"><name pos:start="229:68" pos:end="229:73">rom_mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:26"><expr pos:start="231:13" pos:end="231:25"><name pos:start="231:13" pos:end="231:18"><name pos:start="231:13" pos:end="231:15">rom</name><index pos:start="231:16" pos:end="231:18">[<expr pos:start="231:17" pos:end="231:17"><literal type="number" pos:start="231:17" pos:end="231:17">0</literal></expr>]</index></name> <operator pos:start="231:20" pos:end="231:20">=</operator> <literal type="number" pos:start="231:22" pos:end="231:25">0x10</literal></expr>;</expr_stmt> <comment type="block" pos:start="231:28" pos:end="231:42">/* Mips G364 */</comment>

        </block_content>}</block>

        <break pos:start="235:9" pos:end="235:14">break;</break>

    <case pos:start="237:5" pos:end="237:21">case <expr pos:start="237:10" pos:end="237:20"><name pos:start="237:10" pos:end="237:20">JAZZ_PICA61</name></expr>:</case>

        <expr_stmt pos:start="239:9" pos:end="239:72"><expr pos:start="239:9" pos:end="239:71"><call pos:start="239:9" pos:end="239:71"><name pos:start="239:9" pos:end="239:23">isa_vga_mm_init</name><argument_list pos:start="239:24" pos:end="239:71">(<argument pos:start="239:25" pos:end="239:34"><expr pos:start="239:25" pos:end="239:34"><literal type="number" pos:start="239:25" pos:end="239:34">0x40000000</literal></expr></argument>, <argument pos:start="239:37" pos:end="239:46"><expr pos:start="239:37" pos:end="239:46"><literal type="number" pos:start="239:37" pos:end="239:46">0x60000000</literal></expr></argument>, <argument pos:start="239:49" pos:end="239:49"><expr pos:start="239:49" pos:end="239:49"><literal type="number" pos:start="239:49" pos:end="239:49">0</literal></expr></argument>, <argument pos:start="239:52" pos:end="239:70"><expr pos:start="239:52" pos:end="239:70"><call pos:start="239:52" pos:end="239:70"><name pos:start="239:52" pos:end="239:68">get_system_memory</name><argument_list pos:start="239:69" pos:end="239:70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="241:9" pos:end="241:14">break;</break>

    <default pos:start="243:5" pos:end="243:12">default:</default>

        <break pos:start="245:9" pos:end="245:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="251:5" pos:end="251:28">/* Network controller */</comment>

    <for pos:start="253:5" pos:end="283:5">for <control pos:start="253:9" pos:end="253:33">(<init pos:start="253:10" pos:end="253:15"><expr pos:start="253:10" pos:end="253:14"><name pos:start="253:10" pos:end="253:10">n</name> <operator pos:start="253:12" pos:end="253:12">=</operator> <literal type="number" pos:start="253:14" pos:end="253:14">0</literal></expr>;</init> <condition pos:start="253:17" pos:end="253:28"><expr pos:start="253:17" pos:end="253:27"><name pos:start="253:17" pos:end="253:17">n</name> <operator pos:start="253:19" pos:end="253:19">&lt;</operator> <name pos:start="253:21" pos:end="253:27">nb_nics</name></expr>;</condition> <incr pos:start="253:30" pos:end="253:32"><expr pos:start="253:30" pos:end="253:32"><name pos:start="253:30" pos:end="253:30">n</name><operator pos:start="253:31" pos:end="253:32">++</operator></expr></incr>)</control> <block pos:start="253:35" pos:end="283:5">{<block_content pos:start="255:9" pos:end="281:9">

        <expr_stmt pos:start="255:9" pos:end="255:26"><expr pos:start="255:9" pos:end="255:25"><name pos:start="255:9" pos:end="255:10">nd</name> <operator pos:start="255:12" pos:end="255:12">=</operator> <operator pos:start="255:14" pos:end="255:14">&amp;</operator><name pos:start="255:15" pos:end="255:25"><name pos:start="255:15" pos:end="255:22">nd_table</name><index pos:start="255:23" pos:end="255:25">[<expr pos:start="255:24" pos:end="255:24"><name pos:start="255:24" pos:end="255:24">n</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="257:9" pos:end="259:44"><if pos:start="257:9" pos:end="259:44">if <condition pos:start="257:12" pos:end="257:23">(<expr pos:start="257:13" pos:end="257:22"><operator pos:start="257:13" pos:end="257:13">!</operator><name pos:start="257:14" pos:end="257:22"><name pos:start="257:14" pos:end="257:15">nd</name><operator pos:start="257:16" pos:end="257:17">-&gt;</operator><name pos:start="257:18" pos:end="257:22">model</name></name></expr>)</condition><block type="pseudo" pos:start="259:13" pos:end="259:44"><block_content pos:start="259:13" pos:end="259:44">

            <expr_stmt pos:start="259:13" pos:end="259:44"><expr pos:start="259:13" pos:end="259:43"><name pos:start="259:13" pos:end="259:21"><name pos:start="259:13" pos:end="259:14">nd</name><operator pos:start="259:15" pos:end="259:16">-&gt;</operator><name pos:start="259:17" pos:end="259:21">model</name></name> <operator pos:start="259:23" pos:end="259:23">=</operator> <call pos:start="259:25" pos:end="259:43"><name pos:start="259:25" pos:end="259:32">g_strdup</name><argument_list pos:start="259:33" pos:end="259:43">(<argument pos:start="259:34" pos:end="259:42"><expr pos:start="259:34" pos:end="259:42"><literal type="string" pos:start="259:34" pos:end="259:42">"dp83932"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="261:9" pos:end="281:9"><if pos:start="261:9" pos:end="269:9">if <condition pos:start="261:12" pos:end="261:46">(<expr pos:start="261:13" pos:end="261:45"><call pos:start="261:13" pos:end="261:40"><name pos:start="261:13" pos:end="261:18">strcmp</name><argument_list pos:start="261:19" pos:end="261:40">(<argument pos:start="261:20" pos:end="261:28"><expr pos:start="261:20" pos:end="261:28"><name pos:start="261:20" pos:end="261:28"><name pos:start="261:20" pos:end="261:21">nd</name><operator pos:start="261:22" pos:end="261:23">-&gt;</operator><name pos:start="261:24" pos:end="261:28">model</name></name></expr></argument>, <argument pos:start="261:31" pos:end="261:39"><expr pos:start="261:31" pos:end="261:39"><literal type="string" pos:start="261:31" pos:end="261:39">"dp83932"</literal></expr></argument>)</argument_list></call> <operator pos:start="261:42" pos:end="261:43">==</operator> <literal type="number" pos:start="261:45" pos:end="261:45">0</literal></expr>)</condition> <block pos:start="261:48" pos:end="269:9">{<block_content pos:start="263:13" pos:end="267:18">

            <expr_stmt pos:start="263:13" pos:end="265:62"><expr pos:start="263:13" pos:end="265:61"><call pos:start="263:13" pos:end="265:61"><name pos:start="263:13" pos:end="263:24">dp83932_init</name><argument_list pos:start="263:25" pos:end="265:61">(<argument pos:start="263:26" pos:end="263:27"><expr pos:start="263:26" pos:end="263:27"><name pos:start="263:26" pos:end="263:27">nd</name></expr></argument>, <argument pos:start="263:30" pos:end="263:39"><expr pos:start="263:30" pos:end="263:39"><literal type="number" pos:start="263:30" pos:end="263:39">0x80001000</literal></expr></argument>, <argument pos:start="263:42" pos:end="263:42"><expr pos:start="263:42" pos:end="263:42"><literal type="number" pos:start="263:42" pos:end="263:42">2</literal></expr></argument>, <argument pos:start="263:45" pos:end="263:63"><expr pos:start="263:45" pos:end="263:63"><call pos:start="263:45" pos:end="263:63"><name pos:start="263:45" pos:end="263:61">get_system_memory</name><argument_list pos:start="263:62" pos:end="263:63">()</argument_list></call></expr></argument>, <argument pos:start="263:66" pos:end="263:74"><expr pos:start="263:66" pos:end="263:74"><name pos:start="263:66" pos:end="263:74"><name pos:start="263:66" pos:end="263:71">rc4030</name><index pos:start="263:72" pos:end="263:74">[<expr pos:start="263:73" pos:end="263:73"><literal type="number" pos:start="263:73" pos:end="263:73">4</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="265:26" pos:end="265:38"><expr pos:start="265:26" pos:end="265:38"><name pos:start="265:26" pos:end="265:38">rc4030_opaque</name></expr></argument>, <argument pos:start="265:41" pos:end="265:60"><expr pos:start="265:41" pos:end="265:60"><name pos:start="265:41" pos:end="265:60">rc4030_dma_memory_rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="267:13" pos:end="267:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="269:11" pos:end="275:9">else if <condition pos:start="269:19" pos:end="269:47">(<expr pos:start="269:20" pos:end="269:46"><call pos:start="269:20" pos:end="269:41"><name pos:start="269:20" pos:end="269:25">strcmp</name><argument_list pos:start="269:26" pos:end="269:41">(<argument pos:start="269:27" pos:end="269:35"><expr pos:start="269:27" pos:end="269:35"><name pos:start="269:27" pos:end="269:35"><name pos:start="269:27" pos:end="269:28">nd</name><operator pos:start="269:29" pos:end="269:30">-&gt;</operator><name pos:start="269:31" pos:end="269:35">model</name></name></expr></argument>, <argument pos:start="269:38" pos:end="269:40"><expr pos:start="269:38" pos:end="269:40"><literal type="string" pos:start="269:38" pos:end="269:40">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="269:43" pos:end="269:44">==</operator> <literal type="number" pos:start="269:46" pos:end="269:46">0</literal></expr>)</condition> <block pos:start="269:49" pos:end="275:9">{<block_content pos:start="271:13" pos:end="273:20">

            <expr_stmt pos:start="271:13" pos:end="271:63"><expr pos:start="271:13" pos:end="271:62"><call pos:start="271:13" pos:end="271:62"><name pos:start="271:13" pos:end="271:19">fprintf</name><argument_list pos:start="271:20" pos:end="271:62">(<argument pos:start="271:21" pos:end="271:26"><expr pos:start="271:21" pos:end="271:26"><name pos:start="271:21" pos:end="271:26">stderr</name></expr></argument>, <argument pos:start="271:29" pos:end="271:61"><expr pos:start="271:29" pos:end="271:61"><literal type="string" pos:start="271:29" pos:end="271:61">"qemu: Supported NICs: dp83932\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:20"><expr pos:start="273:13" pos:end="273:19"><call pos:start="273:13" pos:end="273:19"><name pos:start="273:13" pos:end="273:16">exit</name><argument_list pos:start="273:17" pos:end="273:19">(<argument pos:start="273:18" pos:end="273:18"><expr pos:start="273:18" pos:end="273:18"><literal type="number" pos:start="273:18" pos:end="273:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="275:11" pos:end="281:9">else <block pos:start="275:16" pos:end="281:9">{<block_content pos:start="277:13" pos:end="279:20">

            <expr_stmt pos:start="277:13" pos:end="277:70"><expr pos:start="277:13" pos:end="277:69"><call pos:start="277:13" pos:end="277:69"><name pos:start="277:13" pos:end="277:19">fprintf</name><argument_list pos:start="277:20" pos:end="277:69">(<argument pos:start="277:21" pos:end="277:26"><expr pos:start="277:21" pos:end="277:26"><name pos:start="277:21" pos:end="277:26">stderr</name></expr></argument>, <argument pos:start="277:29" pos:end="277:57"><expr pos:start="277:29" pos:end="277:57"><literal type="string" pos:start="277:29" pos:end="277:57">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="277:60" pos:end="277:68"><expr pos:start="277:60" pos:end="277:68"><name pos:start="277:60" pos:end="277:68"><name pos:start="277:60" pos:end="277:61">nd</name><operator pos:start="277:62" pos:end="277:63">-&gt;</operator><name pos:start="277:64" pos:end="277:68">model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:20"><expr pos:start="279:13" pos:end="279:19"><call pos:start="279:13" pos:end="279:19"><name pos:start="279:13" pos:end="279:16">exit</name><argument_list pos:start="279:17" pos:end="279:19">(<argument pos:start="279:18" pos:end="279:18"><expr pos:start="279:18" pos:end="279:18"><literal type="number" pos:start="279:18" pos:end="279:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="287:5" pos:end="287:22">/* SCSI adapter */</comment>

    <expr_stmt pos:start="289:5" pos:end="293:49"><expr pos:start="289:5" pos:end="293:48"><call pos:start="289:5" pos:end="293:48"><name pos:start="289:5" pos:end="289:12">esp_init</name><argument_list pos:start="289:13" pos:end="293:48">(<argument pos:start="289:14" pos:end="289:23"><expr pos:start="289:14" pos:end="289:23"><literal type="number" pos:start="289:14" pos:end="289:23">0x80002000</literal></expr></argument>, <argument pos:start="289:26" pos:end="289:26"><expr pos:start="289:26" pos:end="289:26"><literal type="number" pos:start="289:26" pos:end="289:26">0</literal></expr></argument>,

             <argument pos:start="291:14" pos:end="291:28"><expr pos:start="291:14" pos:end="291:28"><name pos:start="291:14" pos:end="291:28">rc4030_dma_read</name></expr></argument>, <argument pos:start="291:31" pos:end="291:46"><expr pos:start="291:31" pos:end="291:46"><name pos:start="291:31" pos:end="291:46">rc4030_dma_write</name></expr></argument>, <argument pos:start="291:49" pos:end="291:55"><expr pos:start="291:49" pos:end="291:55"><name pos:start="291:49" pos:end="291:55"><name pos:start="291:49" pos:end="291:52">dmas</name><index pos:start="291:53" pos:end="291:55">[<expr pos:start="291:54" pos:end="291:54"><literal type="number" pos:start="291:54" pos:end="291:54">0</literal></expr>]</index></name></expr></argument>,

             <argument pos:start="293:14" pos:end="293:22"><expr pos:start="293:14" pos:end="293:22"><name pos:start="293:14" pos:end="293:22"><name pos:start="293:14" pos:end="293:19">rc4030</name><index pos:start="293:20" pos:end="293:22">[<expr pos:start="293:21" pos:end="293:21"><literal type="number" pos:start="293:21" pos:end="293:21">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="293:25" pos:end="293:34"><expr pos:start="293:25" pos:end="293:34"><operator pos:start="293:25" pos:end="293:25">&amp;</operator><name pos:start="293:26" pos:end="293:34">esp_reset</name></expr></argument>, <argument pos:start="293:37" pos:end="293:47"><expr pos:start="293:37" pos:end="293:47"><operator pos:start="293:37" pos:end="293:37">&amp;</operator><name pos:start="293:38" pos:end="293:47">dma_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="297:5" pos:end="297:16">/* Floppy */</comment>

    <if_stmt pos:start="299:5" pos:end="305:5"><if pos:start="299:5" pos:end="305:5">if <condition pos:start="299:8" pos:end="299:47">(<expr pos:start="299:9" pos:end="299:46"><call pos:start="299:9" pos:end="299:36"><name pos:start="299:9" pos:end="299:25">drive_get_max_bus</name><argument_list pos:start="299:26" pos:end="299:36">(<argument pos:start="299:27" pos:end="299:35"><expr pos:start="299:27" pos:end="299:35"><name pos:start="299:27" pos:end="299:35">IF_FLOPPY</name></expr></argument>)</argument_list></call> <operator pos:start="299:38" pos:end="299:39">&gt;=</operator> <name pos:start="299:41" pos:end="299:46">MAX_FD</name></expr>)</condition> <block pos:start="299:49" pos:end="305:5">{<block_content pos:start="301:9" pos:end="303:16">

        <expr_stmt pos:start="301:9" pos:end="301:58"><expr pos:start="301:9" pos:end="301:57"><call pos:start="301:9" pos:end="301:57"><name pos:start="301:9" pos:end="301:15">fprintf</name><argument_list pos:start="301:16" pos:end="301:57">(<argument pos:start="301:17" pos:end="301:22"><expr pos:start="301:17" pos:end="301:22"><name pos:start="301:17" pos:end="301:22">stderr</name></expr></argument>, <argument pos:start="301:25" pos:end="301:56"><expr pos:start="301:25" pos:end="301:56"><literal type="string" pos:start="301:25" pos:end="301:56">"qemu: too many floppy drives\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:16"><expr pos:start="303:9" pos:end="303:15"><call pos:start="303:9" pos:end="303:15"><name pos:start="303:9" pos:end="303:12">exit</name><argument_list pos:start="303:13" pos:end="303:15">(<argument pos:start="303:14" pos:end="303:14"><expr pos:start="303:14" pos:end="303:14"><literal type="number" pos:start="303:14" pos:end="303:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="307:5" pos:end="311:5">for <control pos:start="307:9" pos:end="307:32">(<init pos:start="307:10" pos:end="307:15"><expr pos:start="307:10" pos:end="307:14"><name pos:start="307:10" pos:end="307:10">n</name> <operator pos:start="307:12" pos:end="307:12">=</operator> <literal type="number" pos:start="307:14" pos:end="307:14">0</literal></expr>;</init> <condition pos:start="307:17" pos:end="307:27"><expr pos:start="307:17" pos:end="307:26"><name pos:start="307:17" pos:end="307:17">n</name> <operator pos:start="307:19" pos:end="307:19">&lt;</operator> <name pos:start="307:21" pos:end="307:26">MAX_FD</name></expr>;</condition> <incr pos:start="307:29" pos:end="307:31"><expr pos:start="307:29" pos:end="307:31"><name pos:start="307:29" pos:end="307:29">n</name><operator pos:start="307:30" pos:end="307:31">++</operator></expr></incr>)</control> <block pos:start="307:34" pos:end="311:5">{<block_content pos:start="309:9" pos:end="309:44">

        <expr_stmt pos:start="309:9" pos:end="309:44"><expr pos:start="309:9" pos:end="309:43"><name pos:start="309:9" pos:end="309:14"><name pos:start="309:9" pos:end="309:11">fds</name><index pos:start="309:12" pos:end="309:14">[<expr pos:start="309:13" pos:end="309:13"><name pos:start="309:13" pos:end="309:13">n</name></expr>]</index></name> <operator pos:start="309:16" pos:end="309:16">=</operator> <call pos:start="309:18" pos:end="309:43"><name pos:start="309:18" pos:end="309:26">drive_get</name><argument_list pos:start="309:27" pos:end="309:43">(<argument pos:start="309:28" pos:end="309:36"><expr pos:start="309:28" pos:end="309:36"><name pos:start="309:28" pos:end="309:36">IF_FLOPPY</name></expr></argument>, <argument pos:start="309:39" pos:end="309:39"><expr pos:start="309:39" pos:end="309:39"><literal type="number" pos:start="309:39" pos:end="309:39">0</literal></expr></argument>, <argument pos:start="309:42" pos:end="309:42"><expr pos:start="309:42" pos:end="309:42"><name pos:start="309:42" pos:end="309:42">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="313:5" pos:end="313:54"><expr pos:start="313:5" pos:end="313:53"><call pos:start="313:5" pos:end="313:53"><name pos:start="313:5" pos:end="313:22">fdctrl_init_sysbus</name><argument_list pos:start="313:23" pos:end="313:53">(<argument pos:start="313:24" pos:end="313:32"><expr pos:start="313:24" pos:end="313:32"><name pos:start="313:24" pos:end="313:32"><name pos:start="313:24" pos:end="313:29">rc4030</name><index pos:start="313:30" pos:end="313:32">[<expr pos:start="313:31" pos:end="313:31"><literal type="number" pos:start="313:31" pos:end="313:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="313:35" pos:end="313:35"><expr pos:start="313:35" pos:end="313:35"><literal type="number" pos:start="313:35" pos:end="313:35">0</literal></expr></argument>, <argument pos:start="313:38" pos:end="313:47"><expr pos:start="313:38" pos:end="313:47"><literal type="number" pos:start="313:38" pos:end="313:47">0x80003000</literal></expr></argument>, <argument pos:start="313:50" pos:end="313:52"><expr pos:start="313:50" pos:end="313:52"><name pos:start="313:50" pos:end="313:52">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="317:5" pos:end="317:25">/* Real time clock */</comment>

    <expr_stmt pos:start="319:5" pos:end="319:34"><expr pos:start="319:5" pos:end="319:33"><call pos:start="319:5" pos:end="319:33"><name pos:start="319:5" pos:end="319:12">rtc_init</name><argument_list pos:start="319:13" pos:end="319:33">(<argument pos:start="319:14" pos:end="319:20"><expr pos:start="319:14" pos:end="319:20"><name pos:start="319:14" pos:end="319:20">isa_bus</name></expr></argument>, <argument pos:start="319:23" pos:end="319:26"><expr pos:start="319:23" pos:end="319:26"><literal type="number" pos:start="319:23" pos:end="319:26">1980</literal></expr></argument>, <argument pos:start="319:29" pos:end="319:32"><expr pos:start="319:29" pos:end="319:32"><name pos:start="319:29" pos:end="319:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="321:5" pos:end="321:62"><expr pos:start="321:5" pos:end="321:61"><call pos:start="321:5" pos:end="321:61"><name pos:start="321:5" pos:end="321:25">memory_region_init_io</name><argument_list pos:start="321:26" pos:end="321:61">(<argument pos:start="321:27" pos:end="321:29"><expr pos:start="321:27" pos:end="321:29"><name pos:start="321:27" pos:end="321:29">rtc</name></expr></argument>, <argument pos:start="321:32" pos:end="321:39"><expr pos:start="321:32" pos:end="321:39"><operator pos:start="321:32" pos:end="321:32">&amp;</operator><name pos:start="321:33" pos:end="321:39">rtc_ops</name></expr></argument>, <argument pos:start="321:42" pos:end="321:45"><expr pos:start="321:42" pos:end="321:45"><name pos:start="321:42" pos:end="321:45">NULL</name></expr></argument>, <argument pos:start="321:48" pos:end="321:52"><expr pos:start="321:48" pos:end="321:52"><literal type="string" pos:start="321:48" pos:end="321:52">"rtc"</literal></expr></argument>, <argument pos:start="321:55" pos:end="321:60"><expr pos:start="321:55" pos:end="321:60"><literal type="number" pos:start="321:55" pos:end="321:60">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:64"><expr pos:start="323:5" pos:end="323:63"><call pos:start="323:5" pos:end="323:63"><name pos:start="323:5" pos:end="323:31">memory_region_add_subregion</name><argument_list pos:start="323:32" pos:end="323:63">(<argument pos:start="323:33" pos:end="323:45"><expr pos:start="323:33" pos:end="323:45"><name pos:start="323:33" pos:end="323:45">address_space</name></expr></argument>, <argument pos:start="323:48" pos:end="323:57"><expr pos:start="323:48" pos:end="323:57"><literal type="number" pos:start="323:48" pos:end="323:57">0x80004000</literal></expr></argument>, <argument pos:start="323:60" pos:end="323:62"><expr pos:start="323:60" pos:end="323:62"><name pos:start="323:60" pos:end="323:62">rtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="327:5" pos:end="327:26">/* Keyboard (i8042) */</comment>

    <expr_stmt pos:start="329:5" pos:end="329:60"><expr pos:start="329:5" pos:end="329:59"><call pos:start="329:5" pos:end="329:59"><name pos:start="329:5" pos:end="329:17">i8042_mm_init</name><argument_list pos:start="329:18" pos:end="329:59">(<argument pos:start="329:19" pos:end="329:27"><expr pos:start="329:19" pos:end="329:27"><name pos:start="329:19" pos:end="329:27"><name pos:start="329:19" pos:end="329:24">rc4030</name><index pos:start="329:25" pos:end="329:27">[<expr pos:start="329:26" pos:end="329:26"><literal type="number" pos:start="329:26" pos:end="329:26">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="329:30" pos:end="329:38"><expr pos:start="329:30" pos:end="329:38"><name pos:start="329:30" pos:end="329:38"><name pos:start="329:30" pos:end="329:35">rc4030</name><index pos:start="329:36" pos:end="329:38">[<expr pos:start="329:37" pos:end="329:37"><literal type="number" pos:start="329:37" pos:end="329:37">7</literal></expr>]</index></name></expr></argument>, <argument pos:start="329:41" pos:end="329:45"><expr pos:start="329:41" pos:end="329:45"><name pos:start="329:41" pos:end="329:45">i8042</name></expr></argument>, <argument pos:start="329:48" pos:end="329:53"><expr pos:start="329:48" pos:end="329:53"><literal type="number" pos:start="329:48" pos:end="329:53">0x1000</literal></expr></argument>, <argument pos:start="329:56" pos:end="329:58"><expr pos:start="329:56" pos:end="329:58"><literal type="number" pos:start="329:56" pos:end="329:58">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:66"><expr pos:start="331:5" pos:end="331:65"><call pos:start="331:5" pos:end="331:65"><name pos:start="331:5" pos:end="331:31">memory_region_add_subregion</name><argument_list pos:start="331:32" pos:end="331:65">(<argument pos:start="331:33" pos:end="331:45"><expr pos:start="331:33" pos:end="331:45"><name pos:start="331:33" pos:end="331:45">address_space</name></expr></argument>, <argument pos:start="331:48" pos:end="331:57"><expr pos:start="331:48" pos:end="331:57"><literal type="number" pos:start="331:48" pos:end="331:57">0x80005000</literal></expr></argument>, <argument pos:start="331:60" pos:end="331:64"><expr pos:start="331:60" pos:end="331:64"><name pos:start="331:60" pos:end="331:64">i8042</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="335:5" pos:end="335:22">/* Serial ports */</comment>

    <if_stmt pos:start="337:5" pos:end="343:5"><if pos:start="337:5" pos:end="343:5">if <condition pos:start="337:8" pos:end="337:22">(<expr pos:start="337:9" pos:end="337:21"><name pos:start="337:9" pos:end="337:21"><name pos:start="337:9" pos:end="337:18">serial_hds</name><index pos:start="337:19" pos:end="337:21">[<expr pos:start="337:20" pos:end="337:20"><literal type="number" pos:start="337:20" pos:end="337:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="337:24" pos:end="343:5">{<block_content pos:start="339:9" pos:end="341:60">

        <expr_stmt pos:start="339:9" pos:end="341:60"><expr pos:start="339:9" pos:end="341:59"><call pos:start="339:9" pos:end="341:59"><name pos:start="339:9" pos:end="339:22">serial_mm_init</name><argument_list pos:start="339:23" pos:end="341:59">(<argument pos:start="339:24" pos:end="339:36"><expr pos:start="339:24" pos:end="339:36"><name pos:start="339:24" pos:end="339:36">address_space</name></expr></argument>, <argument pos:start="339:39" pos:end="339:48"><expr pos:start="339:39" pos:end="339:48"><literal type="number" pos:start="339:39" pos:end="339:48">0x80006000</literal></expr></argument>, <argument pos:start="339:51" pos:end="339:51"><expr pos:start="339:51" pos:end="339:51"><literal type="number" pos:start="339:51" pos:end="339:51">0</literal></expr></argument>, <argument pos:start="339:54" pos:end="339:62"><expr pos:start="339:54" pos:end="339:62"><name pos:start="339:54" pos:end="339:62"><name pos:start="339:54" pos:end="339:59">rc4030</name><index pos:start="339:60" pos:end="339:62">[<expr pos:start="339:61" pos:end="339:61"><literal type="number" pos:start="339:61" pos:end="339:61">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="339:65" pos:end="339:74"><expr pos:start="339:65" pos:end="339:74"><literal type="number" pos:start="339:65" pos:end="339:71">8000000</literal><operator pos:start="339:72" pos:end="339:72">/</operator><literal type="number" pos:start="339:73" pos:end="339:74">16</literal></expr></argument>,

                       <argument pos:start="341:24" pos:end="341:36"><expr pos:start="341:24" pos:end="341:36"><name pos:start="341:24" pos:end="341:36"><name pos:start="341:24" pos:end="341:33">serial_hds</name><index pos:start="341:34" pos:end="341:36">[<expr pos:start="341:35" pos:end="341:35"><literal type="number" pos:start="341:35" pos:end="341:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="341:39" pos:end="341:58"><expr pos:start="341:39" pos:end="341:58"><name pos:start="341:39" pos:end="341:58">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="345:5" pos:end="351:5"><if pos:start="345:5" pos:end="351:5">if <condition pos:start="345:8" pos:end="345:22">(<expr pos:start="345:9" pos:end="345:21"><name pos:start="345:9" pos:end="345:21"><name pos:start="345:9" pos:end="345:18">serial_hds</name><index pos:start="345:19" pos:end="345:21">[<expr pos:start="345:20" pos:end="345:20"><literal type="number" pos:start="345:20" pos:end="345:20">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="345:24" pos:end="351:5">{<block_content pos:start="347:9" pos:end="349:60">

        <expr_stmt pos:start="347:9" pos:end="349:60"><expr pos:start="347:9" pos:end="349:59"><call pos:start="347:9" pos:end="349:59"><name pos:start="347:9" pos:end="347:22">serial_mm_init</name><argument_list pos:start="347:23" pos:end="349:59">(<argument pos:start="347:24" pos:end="347:36"><expr pos:start="347:24" pos:end="347:36"><name pos:start="347:24" pos:end="347:36">address_space</name></expr></argument>, <argument pos:start="347:39" pos:end="347:48"><expr pos:start="347:39" pos:end="347:48"><literal type="number" pos:start="347:39" pos:end="347:48">0x80007000</literal></expr></argument>, <argument pos:start="347:51" pos:end="347:51"><expr pos:start="347:51" pos:end="347:51"><literal type="number" pos:start="347:51" pos:end="347:51">0</literal></expr></argument>, <argument pos:start="347:54" pos:end="347:62"><expr pos:start="347:54" pos:end="347:62"><name pos:start="347:54" pos:end="347:62"><name pos:start="347:54" pos:end="347:59">rc4030</name><index pos:start="347:60" pos:end="347:62">[<expr pos:start="347:61" pos:end="347:61"><literal type="number" pos:start="347:61" pos:end="347:61">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="347:65" pos:end="347:74"><expr pos:start="347:65" pos:end="347:74"><literal type="number" pos:start="347:65" pos:end="347:71">8000000</literal><operator pos:start="347:72" pos:end="347:72">/</operator><literal type="number" pos:start="347:73" pos:end="347:74">16</literal></expr></argument>,

                       <argument pos:start="349:24" pos:end="349:36"><expr pos:start="349:24" pos:end="349:36"><name pos:start="349:24" pos:end="349:36"><name pos:start="349:24" pos:end="349:33">serial_hds</name><index pos:start="349:34" pos:end="349:36">[<expr pos:start="349:35" pos:end="349:35"><literal type="number" pos:start="349:35" pos:end="349:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="349:39" pos:end="349:58"><expr pos:start="349:39" pos:end="349:58"><name pos:start="349:39" pos:end="349:58">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="355:5" pos:end="355:23">/* Parallel port */</comment>

    <if_stmt pos:start="357:5" pos:end="361:42"><if pos:start="357:5" pos:end="361:42">if <condition pos:start="357:8" pos:end="357:24">(<expr pos:start="357:9" pos:end="357:23"><name pos:start="357:9" pos:end="357:23"><name pos:start="357:9" pos:end="357:20">parallel_hds</name><index pos:start="357:21" pos:end="357:23">[<expr pos:start="357:22" pos:end="357:22"><literal type="number" pos:start="357:22" pos:end="357:22">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="359:9" pos:end="361:42"><block_content pos:start="359:9" pos:end="361:42">

        <expr_stmt pos:start="359:9" pos:end="361:42"><expr pos:start="359:9" pos:end="361:41"><call pos:start="359:9" pos:end="361:41"><name pos:start="359:9" pos:end="359:24">parallel_mm_init</name><argument_list pos:start="359:25" pos:end="361:41">(<argument pos:start="359:26" pos:end="359:38"><expr pos:start="359:26" pos:end="359:38"><name pos:start="359:26" pos:end="359:38">address_space</name></expr></argument>, <argument pos:start="359:41" pos:end="359:50"><expr pos:start="359:41" pos:end="359:50"><literal type="number" pos:start="359:41" pos:end="359:50">0x80008000</literal></expr></argument>, <argument pos:start="359:53" pos:end="359:53"><expr pos:start="359:53" pos:end="359:53"><literal type="number" pos:start="359:53" pos:end="359:53">0</literal></expr></argument>, <argument pos:start="359:56" pos:end="359:64"><expr pos:start="359:56" pos:end="359:64"><name pos:start="359:56" pos:end="359:64"><name pos:start="359:56" pos:end="359:61">rc4030</name><index pos:start="359:62" pos:end="359:64">[<expr pos:start="359:63" pos:end="359:63"><literal type="number" pos:start="359:63" pos:end="359:63">0</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="361:26" pos:end="361:40"><expr pos:start="361:26" pos:end="361:40"><name pos:start="361:26" pos:end="361:40"><name pos:start="361:26" pos:end="361:37">parallel_hds</name><index pos:start="361:38" pos:end="361:40">[<expr pos:start="361:39" pos:end="361:39"><literal type="number" pos:start="361:39" pos:end="361:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="365:5" pos:end="365:20">/* Sound card */</comment>

    <comment type="block" pos:start="367:5" pos:end="367:60">/* FIXME: missing Jazz sound at 0x8000c000, rc4030[2] */</comment>

    <expr_stmt pos:start="369:5" pos:end="369:30"><expr pos:start="369:5" pos:end="369:29"><call pos:start="369:5" pos:end="369:29"><name pos:start="369:5" pos:end="369:14">audio_init</name><argument_list pos:start="369:15" pos:end="369:29">(<argument pos:start="369:16" pos:end="369:22"><expr pos:start="369:16" pos:end="369:22"><name pos:start="369:16" pos:end="369:22">isa_bus</name></expr></argument>, <argument pos:start="369:25" pos:end="369:28"><expr pos:start="369:25" pos:end="369:28"><name pos:start="369:25" pos:end="369:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="373:5" pos:end="373:15">/* NVRAM */</comment>

    <expr_stmt pos:start="375:5" pos:end="375:39"><expr pos:start="375:5" pos:end="375:38"><name pos:start="375:5" pos:end="375:7">dev</name> <operator pos:start="375:9" pos:end="375:9">=</operator> <call pos:start="375:11" pos:end="375:38"><name pos:start="375:11" pos:end="375:21">qdev_create</name><argument_list pos:start="375:22" pos:end="375:38">(<argument pos:start="375:23" pos:end="375:26"><expr pos:start="375:23" pos:end="375:26"><name pos:start="375:23" pos:end="375:26">NULL</name></expr></argument>, <argument pos:start="375:29" pos:end="375:37"><expr pos:start="375:29" pos:end="375:37"><literal type="string" pos:start="375:29" pos:end="375:37">"ds1225y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="377:26"><expr pos:start="377:5" pos:end="377:25"><call pos:start="377:5" pos:end="377:25"><name pos:start="377:5" pos:end="377:20">qdev_init_nofail</name><argument_list pos:start="377:21" pos:end="377:25">(<argument pos:start="377:22" pos:end="377:24"><expr pos:start="377:22" pos:end="377:24"><name pos:start="377:22" pos:end="377:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:35"><expr pos:start="379:5" pos:end="379:34"><name pos:start="379:5" pos:end="379:10">sysbus</name> <operator pos:start="379:12" pos:end="379:12">=</operator> <call pos:start="379:14" pos:end="379:34"><name pos:start="379:14" pos:end="379:29">sysbus_from_qdev</name><argument_list pos:start="379:30" pos:end="379:34">(<argument pos:start="379:31" pos:end="379:33"><expr pos:start="379:31" pos:end="379:33"><name pos:start="379:31" pos:end="379:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:43"><expr pos:start="381:5" pos:end="381:42"><call pos:start="381:5" pos:end="381:42"><name pos:start="381:5" pos:end="381:19">sysbus_mmio_map</name><argument_list pos:start="381:20" pos:end="381:42">(<argument pos:start="381:21" pos:end="381:26"><expr pos:start="381:21" pos:end="381:26"><name pos:start="381:21" pos:end="381:26">sysbus</name></expr></argument>, <argument pos:start="381:29" pos:end="381:29"><expr pos:start="381:29" pos:end="381:29"><literal type="number" pos:start="381:29" pos:end="381:29">0</literal></expr></argument>, <argument pos:start="381:32" pos:end="381:41"><expr pos:start="381:32" pos:end="381:41"><literal type="number" pos:start="381:32" pos:end="381:41">0x80009000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="385:5" pos:end="385:23">/* LED indicator */</comment>

    <expr_stmt pos:start="387:5" pos:end="387:55"><expr pos:start="387:5" pos:end="387:54"><call pos:start="387:5" pos:end="387:54"><name pos:start="387:5" pos:end="387:24">sysbus_create_simple</name><argument_list pos:start="387:25" pos:end="387:54">(<argument pos:start="387:26" pos:end="387:35"><expr pos:start="387:26" pos:end="387:35"><literal type="string" pos:start="387:26" pos:end="387:35">"jazz-led"</literal></expr></argument>, <argument pos:start="387:38" pos:end="387:47"><expr pos:start="387:38" pos:end="387:47"><literal type="number" pos:start="387:38" pos:end="387:47">0x8000f000</literal></expr></argument>, <argument pos:start="387:50" pos:end="387:53"><expr pos:start="387:50" pos:end="387:53"><name pos:start="387:50" pos:end="387:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
