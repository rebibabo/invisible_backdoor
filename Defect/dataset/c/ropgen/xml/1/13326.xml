<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13326.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">allocate_buffers</name><parameter_list pos:start="1:28" pos:end="1:46">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:42">ShortenContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:15">chan</name></decl>, <decl pos:start="5:18" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:20">err</name></decl>;</decl_stmt>



    <for pos:start="9:5" pos:end="55:5">for <control pos:start="9:9" pos:end="9:46">(<init pos:start="9:10" pos:end="9:18"><expr pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:13">chan</name> <operator pos:start="9:15" pos:end="9:15">=</operator> <literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr>;</init> <condition pos:start="9:20" pos:end="9:38"><expr pos:start="9:20" pos:end="9:37"><name pos:start="9:20" pos:end="9:23">chan</name> <operator pos:start="9:25" pos:end="9:25">&lt;</operator> <name pos:start="9:27" pos:end="9:37"><name pos:start="9:27" pos:end="9:27">s</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:37">channels</name></name></expr>;</condition> <incr pos:start="9:40" pos:end="9:45"><expr pos:start="9:40" pos:end="9:45"><name pos:start="9:40" pos:end="9:43">chan</name><operator pos:start="9:44" pos:end="9:45">++</operator></expr></incr>)</control> <block pos:start="9:48" pos:end="55:5">{<block_content pos:start="11:9" pos:end="53:60">

        <if_stmt pos:start="11:9" pos:end="17:9"><if pos:start="11:9" pos:end="17:9">if <condition pos:start="11:12" pos:end="11:61">(<expr pos:start="11:13" pos:end="11:60"><call pos:start="11:13" pos:end="11:30"><name pos:start="11:13" pos:end="11:17">FFMAX</name><argument_list pos:start="11:18" pos:end="11:30">(<argument pos:start="11:19" pos:end="11:19"><expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">1</literal></expr></argument>, <argument pos:start="11:22" pos:end="11:29"><expr pos:start="11:22" pos:end="11:29"><name pos:start="11:22" pos:end="11:29"><name pos:start="11:22" pos:end="11:22">s</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:29">nmean</name></name></expr></argument>)</argument_list></call> <operator pos:start="11:32" pos:end="11:33">&gt;=</operator> <name pos:start="11:35" pos:end="11:42">UINT_MAX</name> <operator pos:start="11:44" pos:end="11:44">/</operator> <sizeof pos:start="11:46" pos:end="11:60">sizeof<argument_list pos:start="11:52" pos:end="11:60">(<argument pos:start="11:53" pos:end="11:59"><expr pos:start="11:53" pos:end="11:59"><name pos:start="11:53" pos:end="11:59">int32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="11:63" pos:end="17:9">{<block_content pos:start="13:13" pos:end="15:39">

            <expr_stmt pos:start="13:13" pos:end="13:64"><expr pos:start="13:13" pos:end="13:63"><call pos:start="13:13" pos:end="13:63"><name pos:start="13:13" pos:end="13:18">av_log</name><argument_list pos:start="13:19" pos:end="13:63">(<argument pos:start="13:20" pos:end="13:27"><expr pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:20">s</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:27">avctx</name></name></expr></argument>, <argument pos:start="13:30" pos:end="13:41"><expr pos:start="13:30" pos:end="13:41"><name pos:start="13:30" pos:end="13:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:44" pos:end="13:62"><expr pos:start="13:44" pos:end="13:62"><literal type="string" pos:start="13:44" pos:end="13:62">"nmean too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="15:13" pos:end="15:39">return <expr pos:start="15:20" pos:end="15:38"><name pos:start="15:20" pos:end="15:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="19:9" pos:end="29:9"><if pos:start="19:9" pos:end="29:9">if <condition pos:start="19:12" pos:end="21:58">(<expr pos:start="19:13" pos:end="21:57"><name pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:24">blocksize</name></name> <operator pos:start="19:26" pos:end="19:26">+</operator> <name pos:start="19:28" pos:end="19:35"><name pos:start="19:28" pos:end="19:28">s</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:35">nwrap</name></name> <operator pos:start="19:37" pos:end="19:38">&gt;=</operator> <name pos:start="19:40" pos:end="19:47">UINT_MAX</name> <operator pos:start="19:49" pos:end="19:49">/</operator> <sizeof pos:start="19:51" pos:end="19:65">sizeof<argument_list pos:start="19:57" pos:end="19:65">(<argument pos:start="19:58" pos:end="19:64"><expr pos:start="19:58" pos:end="19:64"><name pos:start="19:58" pos:end="19:64">int32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="19:67" pos:end="19:68">||</operator>

            <name pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:24">blocksize</name></name> <operator pos:start="21:26" pos:end="21:26">+</operator> <name pos:start="21:28" pos:end="21:35"><name pos:start="21:28" pos:end="21:28">s</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:35">nwrap</name></name> <operator pos:start="21:37" pos:end="21:38">&lt;=</operator> <operator pos:start="21:40" pos:end="21:40">(</operator><name pos:start="21:41" pos:end="21:48">unsigned</name><operator pos:start="21:49" pos:end="21:49">)</operator><name pos:start="21:50" pos:end="21:57"><name pos:start="21:50" pos:end="21:50">s</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:57">nwrap</name></name></expr>)</condition> <block pos:start="21:60" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:39">

            <expr_stmt pos:start="23:13" pos:end="25:58"><expr pos:start="23:13" pos:end="25:57"><call pos:start="23:13" pos:end="25:57"><name pos:start="23:13" pos:end="23:18">av_log</name><argument_list pos:start="23:19" pos:end="25:57">(<argument pos:start="23:20" pos:end="23:27"><expr pos:start="23:20" pos:end="23:27"><name pos:start="23:20" pos:end="23:27"><name pos:start="23:20" pos:end="23:20">s</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:27">avctx</name></name></expr></argument>, <argument pos:start="23:30" pos:end="23:41"><expr pos:start="23:30" pos:end="23:41"><name pos:start="23:30" pos:end="23:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:56"><expr pos:start="25:20" pos:end="25:56"><literal type="string" pos:start="25:20" pos:end="25:56">"s-&gt;blocksize + s-&gt;nwrap too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:39">return <expr pos:start="27:20" pos:end="27:38"><name pos:start="27:20" pos:end="27:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="33:9" pos:end="39:23"><if pos:start="33:9" pos:end="39:23">if <condition pos:start="33:12" pos:end="37:56">(<expr pos:start="33:13" pos:end="37:55"><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:16">err</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="37:50"><name pos:start="33:20" pos:end="33:36">av_reallocp_array</name><argument_list pos:start="33:37" pos:end="37:50">(<argument pos:start="33:38" pos:end="33:53"><expr pos:start="33:38" pos:end="33:53"><operator pos:start="33:38" pos:end="33:38">&amp;</operator><name pos:start="33:39" pos:end="33:53"><name pos:start="33:39" pos:end="33:39">s</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:47">offset</name><index pos:start="33:48" pos:end="33:53">[<expr pos:start="33:49" pos:end="33:52"><name pos:start="33:49" pos:end="33:52">chan</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="35:32" pos:end="35:46"><expr pos:start="35:32" pos:end="35:46"><sizeof pos:start="35:32" pos:end="35:46">sizeof<argument_list pos:start="35:38" pos:end="35:46">(<argument pos:start="35:39" pos:end="35:45"><expr pos:start="35:39" pos:end="35:45"><name pos:start="35:39" pos:end="35:45">int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                               <argument pos:start="37:32" pos:end="37:49"><expr pos:start="37:32" pos:end="37:49"><call pos:start="37:32" pos:end="37:49"><name pos:start="37:32" pos:end="37:36">FFMAX</name><argument_list pos:start="37:37" pos:end="37:49">(<argument pos:start="37:38" pos:end="37:38"><expr pos:start="37:38" pos:end="37:38"><literal type="number" pos:start="37:38" pos:end="37:38">1</literal></expr></argument>, <argument pos:start="37:41" pos:end="37:48"><expr pos:start="37:41" pos:end="37:48"><name pos:start="37:41" pos:end="37:48"><name pos:start="37:41" pos:end="37:41">s</name><operator pos:start="37:42" pos:end="37:43">-&gt;</operator><name pos:start="37:44" pos:end="37:48">nmean</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="37:51" pos:end="37:51">)</operator> <operator pos:start="37:53" pos:end="37:53">&lt;</operator> <literal type="number" pos:start="37:55" pos:end="37:55">0</literal></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:23"><block_content pos:start="39:13" pos:end="39:23">

            <return pos:start="39:13" pos:end="39:23">return <expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">err</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="43:9" pos:end="47:23"><if pos:start="43:9" pos:end="47:23">if <condition pos:start="43:12" pos:end="45:67">(<expr pos:start="43:13" pos:end="45:66"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:16">err</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="45:61"><name pos:start="43:20" pos:end="43:36">av_reallocp_array</name><argument_list pos:start="43:37" pos:end="45:61">(<argument pos:start="43:38" pos:end="43:59"><expr pos:start="43:38" pos:end="43:59"><operator pos:start="43:38" pos:end="43:38">&amp;</operator><name pos:start="43:39" pos:end="43:59"><name pos:start="43:39" pos:end="43:39">s</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:53">decoded_base</name><index pos:start="43:54" pos:end="43:59">[<expr pos:start="43:55" pos:end="43:58"><name pos:start="43:55" pos:end="43:58">chan</name></expr>]</index></name></expr></argument>, <argument pos:start="43:62" pos:end="43:86"><expr pos:start="43:62" pos:end="43:86"><operator pos:start="43:62" pos:end="43:62">(</operator><name pos:start="43:63" pos:end="43:74"><name pos:start="43:63" pos:end="43:63">s</name><operator pos:start="43:64" pos:end="43:65">-&gt;</operator><name pos:start="43:66" pos:end="43:74">blocksize</name></name> <operator pos:start="43:76" pos:end="43:76">+</operator> <name pos:start="43:78" pos:end="43:85"><name pos:start="43:78" pos:end="43:78">s</name><operator pos:start="43:79" pos:end="43:80">-&gt;</operator><name pos:start="43:81" pos:end="43:85">nwrap</name></name><operator pos:start="43:86" pos:end="43:86">)</operator></expr></argument>,

                               <argument pos:start="45:32" pos:end="45:60"><expr pos:start="45:32" pos:end="45:60"><sizeof pos:start="45:32" pos:end="45:60">sizeof<argument_list pos:start="45:38" pos:end="45:60">(<argument pos:start="45:39" pos:end="45:59"><expr pos:start="45:39" pos:end="45:59"><name pos:start="45:39" pos:end="45:59"><name pos:start="45:39" pos:end="45:39">s</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:53">decoded_base</name><index pos:start="45:54" pos:end="45:56">[<expr pos:start="45:55" pos:end="45:55"><literal type="number" pos:start="45:55" pos:end="45:55">0</literal></expr>]</index><index pos:start="45:57" pos:end="45:59">[<expr pos:start="45:58" pos:end="45:58"><literal type="number" pos:start="45:58" pos:end="45:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="45:62" pos:end="45:62">)</operator> <operator pos:start="45:64" pos:end="45:64">&lt;</operator> <literal type="number" pos:start="45:66" pos:end="45:66">0</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:23"><block_content pos:start="47:13" pos:end="47:23">

            <return pos:start="47:13" pos:end="47:23">return <expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">err</name></expr>;</return></block_content></block></if></if_stmt>

        <for pos:start="49:9" pos:end="51:41">for <control pos:start="49:13" pos:end="49:38">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:33"><expr pos:start="49:21" pos:end="49:32"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <name pos:start="49:25" pos:end="49:32"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:32">nwrap</name></name></expr>;</condition> <incr pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:35">i</name><operator pos:start="49:36" pos:end="49:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="51:13" pos:end="51:41"><block_content pos:start="51:13" pos:end="51:41">

            <expr_stmt pos:start="51:13" pos:end="51:41"><expr pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:27">decoded_base</name><index pos:start="51:28" pos:end="51:33">[<expr pos:start="51:29" pos:end="51:32"><name pos:start="51:29" pos:end="51:32">chan</name></expr>]</index><index pos:start="51:34" pos:end="51:36">[<expr pos:start="51:35" pos:end="51:35"><name pos:start="51:35" pos:end="51:35">i</name></expr>]</index></name> <operator pos:start="51:38" pos:end="51:38">=</operator> <literal type="number" pos:start="51:40" pos:end="51:40">0</literal></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="53:9" pos:end="53:60"><expr pos:start="53:9" pos:end="53:59"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:18">decoded</name><index pos:start="53:19" pos:end="53:24">[<expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">chan</name></expr>]</index></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:48"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:42">decoded_base</name><index pos:start="53:43" pos:end="53:48">[<expr pos:start="53:44" pos:end="53:47"><name pos:start="53:44" pos:end="53:47">chan</name></expr>]</index></name> <operator pos:start="53:50" pos:end="53:50">+</operator> <name pos:start="53:52" pos:end="53:59"><name pos:start="53:52" pos:end="53:52">s</name><operator pos:start="53:53" pos:end="53:54">-&gt;</operator><name pos:start="53:55" pos:end="53:59">nwrap</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="59:5" pos:end="61:19"><if pos:start="59:5" pos:end="61:19">if <condition pos:start="59:8" pos:end="59:80">(<expr pos:start="59:9" pos:end="59:79"><operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:12">err</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="59:74"><name pos:start="59:16" pos:end="59:32">av_reallocp_array</name><argument_list pos:start="59:33" pos:end="59:74">(<argument pos:start="59:34" pos:end="59:43"><expr pos:start="59:34" pos:end="59:43"><operator pos:start="59:34" pos:end="59:34">&amp;</operator><name pos:start="59:35" pos:end="59:43"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:43">coeffs</name></name></expr></argument>, <argument pos:start="59:46" pos:end="59:53"><expr pos:start="59:46" pos:end="59:53"><name pos:start="59:46" pos:end="59:53"><name pos:start="59:46" pos:end="59:46">s</name><operator pos:start="59:47" pos:end="59:48">-&gt;</operator><name pos:start="59:49" pos:end="59:53">nwrap</name></name></expr></argument>, <argument pos:start="59:56" pos:end="59:73"><expr pos:start="59:56" pos:end="59:73"><sizeof pos:start="59:56" pos:end="59:73">sizeof<argument_list pos:start="59:62" pos:end="59:73">(<argument pos:start="59:63" pos:end="59:72"><expr pos:start="59:63" pos:end="59:72"><operator pos:start="59:63" pos:end="59:63">*</operator><name pos:start="59:64" pos:end="59:72"><name pos:start="59:64" pos:end="59:64">s</name><operator pos:start="59:65" pos:end="59:66">-&gt;</operator><name pos:start="59:67" pos:end="59:72">coeffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="59:75" pos:end="59:75">)</operator> <operator pos:start="59:77" pos:end="59:77">&lt;</operator> <literal type="number" pos:start="59:79" pos:end="59:79">0</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:19"><block_content pos:start="61:9" pos:end="61:19">

        <return pos:start="61:9" pos:end="61:19">return <expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><literal type="number" pos:start="65:12" pos:end="65:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
