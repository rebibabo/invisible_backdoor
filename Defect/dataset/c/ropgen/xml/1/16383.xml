<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16383.c" pos:tabs="8"><function pos:start="1:1" pos:end="189:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">img_info</name><parameter_list pos:start="1:20" pos:end="1:42">(<parameter pos:start="1:21" pos:end="1:28"><decl pos:start="1:21" pos:end="1:28"><type pos:start="1:21" pos:end="1:28"><name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:28">argc</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:41"><decl pos:start="1:31" pos:end="1:41"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier><modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:41">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="189:1">{<block_content pos:start="5:5" pos:end="187:13">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">OutputFormat</name></type> <name pos:start="7:18" pos:end="7:30">output_format</name> <init pos:start="7:32" pos:end="7:46">= <expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">OFORMAT_HUMAN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">chain</name> <init pos:start="9:16" pos:end="9:22">= <expr pos:start="9:18" pos:end="9:22"><name pos:start="9:18" pos:end="9:22">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">filename</name></decl>, <decl pos:start="11:27" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:30">fmt</name></decl>, <decl pos:start="11:33" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:33" pos:end="11:33">*</modifier></type><name pos:start="11:34" pos:end="11:39">output</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">ImageInfoList</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:23">list</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:19">image_opts</name> <init pos:start="15:21" pos:end="15:27">= <expr pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:27">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:7">fmt</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <name pos:start="19:11" pos:end="19:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:18"><expr pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:10">output</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:17">NULL</name></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="107:5">for<control pos:start="23:8" pos:end="23:11">(<init pos:start="23:9" pos:end="23:9">;</init><condition pos:start="23:10" pos:end="23:10">;</condition><incr/>)</control> <block pos:start="23:13" pos:end="107:5">{<block_content pos:start="25:9" pos:end="105:9">

        <decl_stmt pos:start="25:9" pos:end="25:29"><decl pos:start="25:9" pos:end="25:28"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:24">option_index</name> <init pos:start="25:26" pos:end="25:28">= <expr pos:start="25:28" pos:end="25:28"><literal type="number" pos:start="25:28" pos:end="25:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="43:10"><decl pos:start="27:9" pos:end="43:9"><type pos:start="27:9" pos:end="27:34"><specifier pos:start="27:9" pos:end="27:14">static</specifier> <specifier pos:start="27:16" pos:end="27:20">const</specifier> <name pos:start="27:22" pos:end="27:34"><name pos:start="27:22" pos:end="27:27">struct</name> <name pos:start="27:29" pos:end="27:34">option</name></name></type> <name pos:start="27:36" pos:end="27:49"><name pos:start="27:36" pos:end="27:47">long_options</name><index pos:start="27:48" pos:end="27:49">[]</index></name> <init pos:start="27:51" pos:end="43:9">= <expr pos:start="27:53" pos:end="43:9"><block pos:start="27:53" pos:end="43:9">{

            <expr pos:start="29:13" pos:end="29:41"><block pos:start="29:13" pos:end="29:41">{<expr pos:start="29:14" pos:end="29:19"><literal type="string" pos:start="29:14" pos:end="29:19">"help"</literal></expr>, <expr pos:start="29:22" pos:end="29:32"><name pos:start="29:22" pos:end="29:32">no_argument</name></expr>, <expr pos:start="29:35" pos:end="29:35"><literal type="number" pos:start="29:35" pos:end="29:35">0</literal></expr>, <expr pos:start="29:38" pos:end="29:40"><literal type="char" pos:start="29:38" pos:end="29:40">'h'</literal></expr>}</block></expr>,

            <expr pos:start="31:13" pos:end="31:49"><block pos:start="31:13" pos:end="31:49">{<expr pos:start="31:14" pos:end="31:21"><literal type="string" pos:start="31:14" pos:end="31:21">"format"</literal></expr>, <expr pos:start="31:24" pos:end="31:40"><name pos:start="31:24" pos:end="31:40">required_argument</name></expr>, <expr pos:start="31:43" pos:end="31:43"><literal type="number" pos:start="31:43" pos:end="31:43">0</literal></expr>, <expr pos:start="31:46" pos:end="31:48"><literal type="char" pos:start="31:46" pos:end="31:48">'f'</literal></expr>}</block></expr>,

            <expr pos:start="33:13" pos:end="33:59"><block pos:start="33:13" pos:end="33:59">{<expr pos:start="33:14" pos:end="33:21"><literal type="string" pos:start="33:14" pos:end="33:21">"output"</literal></expr>, <expr pos:start="33:24" pos:end="33:40"><name pos:start="33:24" pos:end="33:40">required_argument</name></expr>, <expr pos:start="33:43" pos:end="33:43"><literal type="number" pos:start="33:43" pos:end="33:43">0</literal></expr>, <expr pos:start="33:46" pos:end="33:58"><name pos:start="33:46" pos:end="33:58">OPTION_OUTPUT</name></expr>}</block></expr>,

            <expr pos:start="35:13" pos:end="35:67"><block pos:start="35:13" pos:end="35:67">{<expr pos:start="35:14" pos:end="35:28"><literal type="string" pos:start="35:14" pos:end="35:28">"backing-chain"</literal></expr>, <expr pos:start="35:31" pos:end="35:41"><name pos:start="35:31" pos:end="35:41">no_argument</name></expr>, <expr pos:start="35:44" pos:end="35:44"><literal type="number" pos:start="35:44" pos:end="35:44">0</literal></expr>, <expr pos:start="35:47" pos:end="35:66"><name pos:start="35:47" pos:end="35:66">OPTION_BACKING_CHAIN</name></expr>}</block></expr>,

            <expr pos:start="37:13" pos:end="37:59"><block pos:start="37:13" pos:end="37:59">{<expr pos:start="37:14" pos:end="37:21"><literal type="string" pos:start="37:14" pos:end="37:21">"object"</literal></expr>, <expr pos:start="37:24" pos:end="37:40"><name pos:start="37:24" pos:end="37:40">required_argument</name></expr>, <expr pos:start="37:43" pos:end="37:43"><literal type="number" pos:start="37:43" pos:end="37:43">0</literal></expr>, <expr pos:start="37:46" pos:end="37:58"><name pos:start="37:46" pos:end="37:58">OPTION_OBJECT</name></expr>}</block></expr>,

            <expr pos:start="39:13" pos:end="39:61"><block pos:start="39:13" pos:end="39:61">{<expr pos:start="39:14" pos:end="39:25"><literal type="string" pos:start="39:14" pos:end="39:25">"image-opts"</literal></expr>, <expr pos:start="39:28" pos:end="39:38"><name pos:start="39:28" pos:end="39:38">no_argument</name></expr>, <expr pos:start="39:41" pos:end="39:41"><literal type="number" pos:start="39:41" pos:end="39:41">0</literal></expr>, <expr pos:start="39:44" pos:end="39:60"><name pos:start="39:44" pos:end="39:60">OPTION_IMAGE_OPTS</name></expr>}</block></expr>,

            <expr pos:start="41:13" pos:end="41:24"><block pos:start="41:13" pos:end="41:24">{<expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>, <expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr>, <expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr>, <expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr>}</block></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="45:9" pos:end="47:53"><expr pos:start="45:9" pos:end="47:52"><name pos:start="45:9" pos:end="45:9">c</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="47:52"><name pos:start="45:13" pos:end="45:23">getopt_long</name><argument_list pos:start="45:24" pos:end="47:52">(<argument pos:start="45:25" pos:end="45:28"><expr pos:start="45:25" pos:end="45:28"><name pos:start="45:25" pos:end="45:28">argc</name></expr></argument>, <argument pos:start="45:31" pos:end="45:34"><expr pos:start="45:31" pos:end="45:34"><name pos:start="45:31" pos:end="45:34">argv</name></expr></argument>, <argument pos:start="45:37" pos:end="45:41"><expr pos:start="45:37" pos:end="45:41"><literal type="string" pos:start="45:37" pos:end="45:41">"f:h"</literal></expr></argument>,

                        <argument pos:start="47:25" pos:end="47:36"><expr pos:start="47:25" pos:end="47:36"><name pos:start="47:25" pos:end="47:36">long_options</name></expr></argument>, <argument pos:start="47:39" pos:end="47:51"><expr pos:start="47:39" pos:end="47:51"><operator pos:start="47:39" pos:end="47:39">&amp;</operator><name pos:start="47:40" pos:end="47:51">option_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:20">(<expr pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:13">c</name> <operator pos:start="49:15" pos:end="49:16">==</operator> <operator pos:start="49:18" pos:end="49:18">-</operator><literal type="number" pos:start="49:19" pos:end="49:19">1</literal></expr>)</condition> <block pos:start="49:22" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:18">

            <break pos:start="51:13" pos:end="51:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="55:9" pos:end="105:9">switch<condition pos:start="55:15" pos:end="55:17">(<expr pos:start="55:16" pos:end="55:16"><name pos:start="55:16" pos:end="55:16">c</name></expr>)</condition> <block pos:start="55:19" pos:end="105:9">{<block_content pos:start="57:9" pos:end="103:18">

        <case pos:start="57:9" pos:end="57:17">case <expr pos:start="57:14" pos:end="57:16"><literal type="char" pos:start="57:14" pos:end="57:16">'?'</literal></expr>:</case>

        <case pos:start="59:9" pos:end="59:17">case <expr pos:start="59:14" pos:end="59:16"><literal type="char" pos:start="59:14" pos:end="59:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:19"><expr pos:start="61:13" pos:end="61:18"><call pos:start="61:13" pos:end="61:18"><name pos:start="61:13" pos:end="61:16">help</name><argument_list pos:start="61:17" pos:end="61:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <case pos:start="65:9" pos:end="65:17">case <expr pos:start="65:14" pos:end="65:16"><literal type="char" pos:start="65:14" pos:end="65:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:25"><expr pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:15">fmt</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <case pos:start="71:9" pos:end="71:27">case <expr pos:start="71:14" pos:end="71:26"><name pos:start="71:14" pos:end="71:26">OPTION_OUTPUT</name></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="73:28"><expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:18">output</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <name pos:start="73:22" pos:end="73:27">optarg</name></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:34">case <expr pos:start="77:14" pos:end="77:33"><name pos:start="77:14" pos:end="77:33">OPTION_BACKING_CHAIN</name></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:25"><expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:17">chain</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <name pos:start="79:21" pos:end="79:24">true</name></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <case pos:start="83:9" pos:end="83:27">case <expr pos:start="83:14" pos:end="83:26"><name pos:start="83:14" pos:end="83:26">OPTION_OBJECT</name></expr>:</case> <block pos:start="83:29" pos:end="97:9">{<block_content pos:start="85:13" pos:end="95:13">

            <decl_stmt pos:start="85:13" pos:end="85:27"><decl pos:start="85:13" pos:end="85:26"><type pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:20">QemuOpts</name> <modifier pos:start="85:22" pos:end="85:22">*</modifier></type><name pos:start="85:23" pos:end="85:26">opts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="87:13" pos:end="89:57"><expr pos:start="87:13" pos:end="89:56"><name pos:start="87:13" pos:end="87:16">opts</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="89:56"><name pos:start="87:20" pos:end="87:42">qemu_opts_parse_noisily</name><argument_list pos:start="87:43" pos:end="89:56">(<argument pos:start="87:44" pos:end="87:60"><expr pos:start="87:44" pos:end="87:60"><operator pos:start="87:44" pos:end="87:44">&amp;</operator><name pos:start="87:45" pos:end="87:60">qemu_object_opts</name></expr></argument>,

                                           <argument pos:start="89:44" pos:end="89:49"><expr pos:start="89:44" pos:end="89:49"><name pos:start="89:44" pos:end="89:49">optarg</name></expr></argument>, <argument pos:start="89:52" pos:end="89:55"><expr pos:start="89:52" pos:end="89:55"><name pos:start="89:52" pos:end="89:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="95:13"><if pos:start="91:13" pos:end="95:13">if <condition pos:start="91:16" pos:end="91:22">(<expr pos:start="91:17" pos:end="91:21"><operator pos:start="91:17" pos:end="91:17">!</operator><name pos:start="91:18" pos:end="91:21">opts</name></expr>)</condition> <block pos:start="91:24" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:25">

                <return pos:start="93:17" pos:end="93:25">return <expr pos:start="93:24" pos:end="93:24"><literal type="number" pos:start="93:24" pos:end="93:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>   <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:31">case <expr pos:start="99:14" pos:end="99:30"><name pos:start="99:14" pos:end="99:30">OPTION_IMAGE_OPTS</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:30"><expr pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:22">image_opts</name> <operator pos:start="101:24" pos:end="101:24">=</operator> <name pos:start="101:26" pos:end="101:29">true</name></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:27">(<expr pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:14">optind</name> <operator pos:start="109:16" pos:end="109:17">!=</operator> <name pos:start="109:19" pos:end="109:22">argc</name> <operator pos:start="109:24" pos:end="109:24">-</operator> <literal type="number" pos:start="109:26" pos:end="109:26">1</literal></expr>)</condition> <block pos:start="109:29" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:52">

        <expr_stmt pos:start="111:9" pos:end="111:52"><expr pos:start="111:9" pos:end="111:51"><call pos:start="111:9" pos:end="111:51"><name pos:start="111:9" pos:end="111:18">error_exit</name><argument_list pos:start="111:19" pos:end="111:51">(<argument pos:start="111:20" pos:end="111:50"><expr pos:start="111:20" pos:end="111:50"><literal type="string" pos:start="111:20" pos:end="111:50">"Expecting one image file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:30"><expr pos:start="115:5" pos:end="115:29"><name pos:start="115:5" pos:end="115:12">filename</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <name pos:start="115:16" pos:end="115:29"><name pos:start="115:16" pos:end="115:19">argv</name><index pos:start="115:20" pos:end="115:29">[<expr pos:start="115:21" pos:end="115:28"><name pos:start="115:21" pos:end="115:26">optind</name><operator pos:start="115:27" pos:end="115:28">++</operator></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="133:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:42">(<expr pos:start="119:9" pos:end="119:41"><name pos:start="119:9" pos:end="119:14">output</name> <operator pos:start="119:16" pos:end="119:17">&amp;&amp;</operator> <operator pos:start="119:19" pos:end="119:19">!</operator><call pos:start="119:20" pos:end="119:41"><name pos:start="119:20" pos:end="119:25">strcmp</name><argument_list pos:start="119:26" pos:end="119:41">(<argument pos:start="119:27" pos:end="119:32"><expr pos:start="119:27" pos:end="119:32"><name pos:start="119:27" pos:end="119:32">output</name></expr></argument>, <argument pos:start="119:35" pos:end="119:40"><expr pos:start="119:35" pos:end="119:40"><literal type="string" pos:start="119:35" pos:end="119:40">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:44" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:37">

        <expr_stmt pos:start="121:9" pos:end="121:37"><expr pos:start="121:9" pos:end="121:36"><name pos:start="121:9" pos:end="121:21">output_format</name> <operator pos:start="121:23" pos:end="121:23">=</operator> <name pos:start="121:25" pos:end="121:36">OFORMAT_JSON</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="123:7" pos:end="127:5">else if <condition pos:start="123:15" pos:end="123:50">(<expr pos:start="123:16" pos:end="123:49"><name pos:start="123:16" pos:end="123:21">output</name> <operator pos:start="123:23" pos:end="123:24">&amp;&amp;</operator> <operator pos:start="123:26" pos:end="123:26">!</operator><call pos:start="123:27" pos:end="123:49"><name pos:start="123:27" pos:end="123:32">strcmp</name><argument_list pos:start="123:33" pos:end="123:49">(<argument pos:start="123:34" pos:end="123:39"><expr pos:start="123:34" pos:end="123:39"><name pos:start="123:34" pos:end="123:39">output</name></expr></argument>, <argument pos:start="123:42" pos:end="123:48"><expr pos:start="123:42" pos:end="123:48"><literal type="string" pos:start="123:42" pos:end="123:48">"human"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:52" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:38">

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:21">output_format</name> <operator pos:start="125:23" pos:end="125:23">=</operator> <name pos:start="125:25" pos:end="125:37">OFORMAT_HUMAN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="127:7" pos:end="133:5">else if <condition pos:start="127:15" pos:end="127:22">(<expr pos:start="127:16" pos:end="127:21"><name pos:start="127:16" pos:end="127:21">output</name></expr>)</condition> <block pos:start="127:24" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:17">

        <expr_stmt pos:start="129:9" pos:end="129:78"><expr pos:start="129:9" pos:end="129:77"><call pos:start="129:9" pos:end="129:77"><name pos:start="129:9" pos:end="129:20">error_report</name><argument_list pos:start="129:21" pos:end="129:77">(<argument pos:start="129:22" pos:end="129:76"><expr pos:start="129:22" pos:end="129:76"><literal type="string" pos:start="129:22" pos:end="129:76">"--output must be used with human or json as argument."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:17">return <expr pos:start="131:16" pos:end="131:16"><literal type="number" pos:start="131:16" pos:end="131:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="145:5">if <condition pos:start="137:8" pos:end="141:38">(<expr pos:start="137:9" pos:end="141:37"><call pos:start="137:9" pos:end="141:37"><name pos:start="137:9" pos:end="137:25">qemu_opts_foreach</name><argument_list pos:start="137:26" pos:end="141:37">(<argument pos:start="137:27" pos:end="137:43"><expr pos:start="137:27" pos:end="137:43"><operator pos:start="137:27" pos:end="137:27">&amp;</operator><name pos:start="137:28" pos:end="137:43">qemu_object_opts</name></expr></argument>,

                          <argument pos:start="139:27" pos:end="139:57"><expr pos:start="139:27" pos:end="139:57"><name pos:start="139:27" pos:end="139:57">user_creatable_add_opts_foreach</name></expr></argument>,

                          <argument pos:start="141:27" pos:end="141:30"><expr pos:start="141:27" pos:end="141:30"><name pos:start="141:27" pos:end="141:30">NULL</name></expr></argument>, <argument pos:start="141:33" pos:end="141:36"><expr pos:start="141:33" pos:end="141:36"><name pos:start="141:33" pos:end="141:36">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:40" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:17">

        <return pos:start="143:9" pos:end="143:17">return <expr pos:start="143:16" pos:end="143:16"><literal type="number" pos:start="143:16" pos:end="143:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:69"><expr pos:start="149:5" pos:end="149:68"><name pos:start="149:5" pos:end="149:8">list</name> <operator pos:start="149:10" pos:end="149:10">=</operator> <call pos:start="149:12" pos:end="149:68"><name pos:start="149:12" pos:end="149:34">collect_image_info_list</name><argument_list pos:start="149:35" pos:end="149:68">(<argument pos:start="149:36" pos:end="149:45"><expr pos:start="149:36" pos:end="149:45"><name pos:start="149:36" pos:end="149:45">image_opts</name></expr></argument>, <argument pos:start="149:48" pos:end="149:55"><expr pos:start="149:48" pos:end="149:55"><name pos:start="149:48" pos:end="149:55">filename</name></expr></argument>, <argument pos:start="149:58" pos:end="149:60"><expr pos:start="149:58" pos:end="149:60"><name pos:start="149:58" pos:end="149:60">fmt</name></expr></argument>, <argument pos:start="149:63" pos:end="149:67"><expr pos:start="149:63" pos:end="149:67"><name pos:start="149:63" pos:end="149:67">chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="155:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:14">(<expr pos:start="151:9" pos:end="151:13"><operator pos:start="151:9" pos:end="151:9">!</operator><name pos:start="151:10" pos:end="151:13">list</name></expr>)</condition> <block pos:start="151:16" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:17">

        <return pos:start="153:9" pos:end="153:17">return <expr pos:start="153:16" pos:end="153:16"><literal type="number" pos:start="153:16" pos:end="153:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="159:5" pos:end="181:5">switch <condition pos:start="159:12" pos:end="159:26">(<expr pos:start="159:13" pos:end="159:25"><name pos:start="159:13" pos:end="159:25">output_format</name></expr>)</condition> <block pos:start="159:28" pos:end="181:5">{<block_content pos:start="161:5" pos:end="179:14">

    <case pos:start="161:5" pos:end="161:23">case <expr pos:start="161:10" pos:end="161:22"><name pos:start="161:10" pos:end="161:22">OFORMAT_HUMAN</name></expr>:</case>

        <expr_stmt pos:start="163:9" pos:end="163:41"><expr pos:start="163:9" pos:end="163:40"><call pos:start="163:9" pos:end="163:40"><name pos:start="163:9" pos:end="163:34">dump_human_image_info_list</name><argument_list pos:start="163:35" pos:end="163:40">(<argument pos:start="163:36" pos:end="163:39"><expr pos:start="163:36" pos:end="163:39"><name pos:start="163:36" pos:end="163:39">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:22">case <expr pos:start="167:10" pos:end="167:21"><name pos:start="167:10" pos:end="167:21">OFORMAT_JSON</name></expr>:</case>

        <if_stmt pos:start="169:9" pos:end="177:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:18">(<expr pos:start="169:13" pos:end="169:17"><name pos:start="169:13" pos:end="169:17">chain</name></expr>)</condition> <block pos:start="169:20" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:44">

            <expr_stmt pos:start="171:13" pos:end="171:44"><expr pos:start="171:13" pos:end="171:43"><call pos:start="171:13" pos:end="171:43"><name pos:start="171:13" pos:end="171:37">dump_json_image_info_list</name><argument_list pos:start="171:38" pos:end="171:43">(<argument pos:start="171:39" pos:end="171:42"><expr pos:start="171:39" pos:end="171:42"><name pos:start="171:39" pos:end="171:42">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="173:11" pos:end="177:9">else <block pos:start="173:16" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:46">

            <expr_stmt pos:start="175:13" pos:end="175:46"><expr pos:start="175:13" pos:end="175:45"><call pos:start="175:13" pos:end="175:45"><name pos:start="175:13" pos:end="175:32">dump_json_image_info</name><argument_list pos:start="175:33" pos:end="175:45">(<argument pos:start="175:34" pos:end="175:44"><expr pos:start="175:34" pos:end="175:44"><name pos:start="175:34" pos:end="175:44"><name pos:start="175:34" pos:end="175:37">list</name><operator pos:start="175:38" pos:end="175:39">-&gt;</operator><name pos:start="175:40" pos:end="175:44">value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="179:9" pos:end="179:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="185:5" pos:end="185:34"><expr pos:start="185:5" pos:end="185:33"><call pos:start="185:5" pos:end="185:33"><name pos:start="185:5" pos:end="185:27">qapi_free_ImageInfoList</name><argument_list pos:start="185:28" pos:end="185:33">(<argument pos:start="185:29" pos:end="185:32"><expr pos:start="185:29" pos:end="185:32"><name pos:start="185:29" pos:end="185:32">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="187:5" pos:end="187:13">return <expr pos:start="187:12" pos:end="187:12"><literal type="number" pos:start="187:12" pos:end="187:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
