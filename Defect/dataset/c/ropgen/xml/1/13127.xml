<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13127.c" pos:tabs="8"><function pos:start="1:1" pos:end="36:21"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">spapr_tce_dma_read</name><parameter_list pos:start="1:23" pos:end="2:37">(<parameter pos:start="1:24" pos:end="1:42"><decl pos:start="1:24" pos:end="1:42"><type pos:start="1:24" pos:end="1:42"><name pos:start="1:24" pos:end="1:37">VIOsPAPRDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:52">uint64_t</name></type> <name pos:start="1:54" pos:end="1:58">taddr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:64">void</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">buf</name></decl></parameter>,
                       <parameter pos:start="2:24" pos:end="2:36"><decl pos:start="2:24" pos:end="2:36"><type pos:start="2:24" pos:end="2:36"><name pos:start="2:24" pos:end="2:31">uint32_t</name></type> <name pos:start="2:33" pos:end="2:36">size</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="36:21">{<block_content pos:start="5:5" pos:end="36:21">
<cpp:ifdef pos:start="4:1" pos:end="4:16">#<cpp:directive pos:start="4:2" pos:end="4:6">ifdef</cpp:directive> <name pos:start="4:8" pos:end="4:16">DEBUG_TCE</name></cpp:ifdef>
    <expr_stmt pos:start="5:5" pos:end="8:0"><expr pos:start="5:5" pos:end="6:44"><call pos:start="5:5" pos:end="6:44"><name pos:start="5:5" pos:end="5:11">fprintf</name><argument_list pos:start="5:12" pos:end="6:44">(<argument pos:start="5:13" pos:end="5:18"><expr pos:start="5:13" pos:end="5:18"><name pos:start="5:13" pos:end="5:18">stderr</name></expr></argument>, <argument pos:start="5:21" pos:end="5:66"><expr pos:start="5:21" pos:end="5:66"><literal type="string" pos:start="5:21" pos:end="5:66">"spapr_tce_dma_write taddr=0x%llx size=0x%x\n"</literal></expr></argument>,
            <argument pos:start="6:13" pos:end="6:37"><expr pos:start="6:13" pos:end="6:37"><operator pos:start="6:13" pos:end="6:13">(</operator><name pos:start="6:14" pos:end="6:21">unsigned</name> <name pos:start="6:23" pos:end="6:26">long</name> <name pos:start="6:28" pos:end="6:31">long</name><operator pos:start="6:32" pos:end="6:32">)</operator><name pos:start="6:33" pos:end="6:37">taddr</name></expr></argument>, <argument pos:start="6:40" pos:end="6:43"><expr pos:start="6:40" pos:end="6:43"><name pos:start="6:40" pos:end="6:43">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="7:1" pos:end="7:6">#<cpp:directive pos:start="7:2" pos:end="7:6">endif</cpp:directive></cpp:endif>
    <while pos:start="8:5" pos:end="36:21">while <condition pos:start="8:11" pos:end="8:16">(<expr pos:start="8:12" pos:end="8:15"><name pos:start="8:12" pos:end="8:15">size</name></expr>)</condition> <block pos:start="8:18" pos:end="36:21">{<block_content pos:start="9:9" pos:end="36:21">
        <decl_stmt pos:start="9:9" pos:end="9:21"><decl pos:start="9:9" pos:end="9:20"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">uint64_t</name></type> <name pos:start="9:18" pos:end="9:20">tce</name></decl>;</decl_stmt>
        <decl_stmt pos:start="10:9" pos:end="10:23"><decl pos:start="10:9" pos:end="10:22"><type pos:start="10:9" pos:end="10:16"><name pos:start="10:9" pos:end="10:16">uint32_t</name></type> <name pos:start="10:18" pos:end="10:22">lsize</name></decl>;</decl_stmt>
        <decl_stmt pos:start="11:9" pos:end="11:24"><decl pos:start="11:9" pos:end="11:23"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">uint64_t</name></type> <name pos:start="11:18" pos:end="11:23">txaddr</name></decl>;</decl_stmt>
        <comment type="block" pos:start="12:9" pos:end="12:38">/* Check if we are in bound */</comment>
        <if_stmt pos:start="13:9" pos:end="36:21"><if pos:start="13:9" pos:end="36:21">if <condition pos:start="13:12" pos:end="13:43">(<expr pos:start="13:13" pos:end="13:42"><name pos:start="13:13" pos:end="13:17">taddr</name> <operator pos:start="13:19" pos:end="13:20">&gt;=</operator> <name pos:start="13:22" pos:end="13:42"><name pos:start="13:22" pos:end="13:24">dev</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:42">rtce_window_size</name></name></expr>)</condition> <block pos:start="13:45" pos:end="36:21">{<block_content pos:start="15:13" pos:end="36:21">
<cpp:ifdef pos:start="14:1" pos:end="14:16">#<cpp:directive pos:start="14:2" pos:end="14:6">ifdef</cpp:directive> <name pos:start="14:8" pos:end="14:16">DEBUG_TCE</name></cpp:ifdef>
            <expr_stmt pos:start="15:13" pos:end="17:0"><expr pos:start="15:13" pos:end="15:65"><call pos:start="15:13" pos:end="15:65"><name pos:start="15:13" pos:end="15:19">fprintf</name><argument_list pos:start="15:20" pos:end="15:65">(<argument pos:start="15:21" pos:end="15:26"><expr pos:start="15:21" pos:end="15:26"><name pos:start="15:21" pos:end="15:26">stderr</name></expr></argument>, <argument pos:start="15:29" pos:end="15:64"><expr pos:start="15:29" pos:end="15:64"><literal type="string" pos:start="15:29" pos:end="15:64">"spapr_tce_dma_read out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="16:1" pos:end="16:6">#<cpp:directive pos:start="16:2" pos:end="16:6">endif</cpp:directive></cpp:endif>
            <return pos:start="17:13" pos:end="17:31">return <expr pos:start="17:20" pos:end="17:30"><name pos:start="17:20" pos:end="17:30">H_DEST_PARM</name></expr>;</return>
        <expr_stmt pos:start="18:9" pos:end="18:69"><expr pos:start="18:9" pos:end="18:68"><name pos:start="18:9" pos:end="18:11">tce</name> <operator pos:start="18:13" pos:end="18:13">=</operator> <name pos:start="18:15" pos:end="18:64"><name pos:start="18:15" pos:end="18:17">dev</name><operator pos:start="18:18" pos:end="18:19">-&gt;</operator><name pos:start="18:20" pos:end="18:29">rtce_table</name><index pos:start="18:30" pos:end="18:64">[<expr pos:start="18:31" pos:end="18:63"><name pos:start="18:31" pos:end="18:35">taddr</name> <operator pos:start="18:37" pos:end="18:38">&gt;&gt;</operator> <name pos:start="18:40" pos:end="18:63">SPAPR_VIO_TCE_PAGE_SHIFT</name></expr>]</index></name><operator pos:start="18:65" pos:end="18:65">.</operator><name pos:start="18:66" pos:end="18:68">tce</name></expr>;</expr_stmt>
        <comment type="block" pos:start="19:9" pos:end="19:40">/* How much til end of page ? */</comment>
        <expr_stmt pos:start="20:9" pos:end="20:68"><expr pos:start="20:9" pos:end="20:67"><name pos:start="20:9" pos:end="20:13">lsize</name> <operator pos:start="20:15" pos:end="20:15">=</operator> <call pos:start="20:17" pos:end="20:67"><name pos:start="20:17" pos:end="20:19">MIN</name><argument_list pos:start="20:20" pos:end="20:67">(<argument pos:start="20:21" pos:end="20:24"><expr pos:start="20:21" pos:end="20:24"><name pos:start="20:21" pos:end="20:24">size</name></expr></argument>, <argument pos:start="20:27" pos:end="20:66"><expr pos:start="20:27" pos:end="20:66"><operator pos:start="20:27" pos:end="20:27">(</operator><operator pos:start="20:28" pos:end="20:28">(</operator><operator pos:start="20:29" pos:end="20:29">~</operator><name pos:start="20:30" pos:end="20:34">taddr</name><operator pos:start="20:35" pos:end="20:35">)</operator> <operator pos:start="20:37" pos:end="20:37">&amp;</operator> <name pos:start="20:39" pos:end="20:61">SPAPR_VIO_TCE_PAGE_MASK</name><operator pos:start="20:62" pos:end="20:62">)</operator> <operator pos:start="20:64" pos:end="20:64">+</operator> <literal type="number" pos:start="20:66" pos:end="20:66">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="21:9" pos:end="21:23">/* Check TCE */</comment>
        <if_stmt pos:start="22:9" pos:end="36:21"><if pos:start="22:9" pos:end="36:21">if <condition pos:start="22:12" pos:end="22:23">(<expr pos:start="22:13" pos:end="22:22"><operator pos:start="22:13" pos:end="22:13">!</operator><operator pos:start="22:14" pos:end="22:14">(</operator><name pos:start="22:15" pos:end="22:17">tce</name> <operator pos:start="22:19" pos:end="22:19">&amp;</operator> <literal type="number" pos:start="22:21" pos:end="22:21">1</literal><operator pos:start="22:22" pos:end="22:22">)</operator></expr>)</condition> <block pos:start="22:25" pos:end="36:21">{<block_content pos:start="23:13" pos:end="36:21">
            <return pos:start="23:13" pos:end="23:31">return <expr pos:start="23:20" pos:end="23:30"><name pos:start="23:20" pos:end="23:30">H_DEST_PARM</name></expr>;</return>
        <comment type="block" pos:start="24:9" pos:end="24:23">/* Translate */</comment>
        <expr_stmt pos:start="25:9" pos:end="28:0"><expr pos:start="25:9" pos:end="26:45"><name pos:start="25:9" pos:end="25:14">txaddr</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <operator pos:start="25:18" pos:end="25:18">(</operator><name pos:start="25:19" pos:end="25:21">tce</name> <operator pos:start="25:23" pos:end="25:23">&amp;</operator> <operator pos:start="25:25" pos:end="25:25">~</operator><name pos:start="25:26" pos:end="25:48">SPAPR_VIO_TCE_PAGE_MASK</name><operator pos:start="25:49" pos:end="25:49">)</operator> <operator pos:start="25:51" pos:end="25:51">|</operator>
            <operator pos:start="26:13" pos:end="26:13">(</operator><name pos:start="26:14" pos:end="26:18">taddr</name> <operator pos:start="26:20" pos:end="26:20">&amp;</operator> <name pos:start="26:22" pos:end="26:44">SPAPR_VIO_TCE_PAGE_MASK</name><operator pos:start="26:45" pos:end="26:45">)</operator></expr>;</expr_stmt>
<cpp:ifdef pos:start="27:1" pos:end="27:16">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:16">DEBUG_TCE</name></cpp:ifdef>
        <expr_stmt pos:start="28:9" pos:end="31:0"><expr pos:start="28:9" pos:end="29:50"><call pos:start="28:9" pos:end="29:50"><name pos:start="28:9" pos:end="28:15">fprintf</name><argument_list pos:start="28:16" pos:end="29:50">(<argument pos:start="28:17" pos:end="28:22"><expr pos:start="28:17" pos:end="28:22"><name pos:start="28:17" pos:end="28:22">stderr</name></expr></argument>, <argument pos:start="28:25" pos:end="28:65"><expr pos:start="28:25" pos:end="28:65"><literal type="string" pos:start="28:25" pos:end="28:65">" -&gt; write to txaddr=0x%llx, size=0x%x\n"</literal></expr></argument>,
                <argument pos:start="29:17" pos:end="29:42"><expr pos:start="29:17" pos:end="29:42"><operator pos:start="29:17" pos:end="29:17">(</operator><name pos:start="29:18" pos:end="29:25">unsigned</name> <name pos:start="29:27" pos:end="29:30">long</name> <name pos:start="29:32" pos:end="29:35">long</name><operator pos:start="29:36" pos:end="29:36">)</operator><name pos:start="29:37" pos:end="29:42">txaddr</name></expr></argument>, <argument pos:start="29:45" pos:end="29:49"><expr pos:start="29:45" pos:end="29:49"><name pos:start="29:45" pos:end="29:49">lsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="30:1" pos:end="30:6">#<cpp:directive pos:start="30:2" pos:end="30:6">endif</cpp:directive></cpp:endif>
        <comment type="block" pos:start="31:9" pos:end="31:19">/* Do it */</comment>
        <expr_stmt pos:start="32:9" pos:end="32:53"><expr pos:start="32:9" pos:end="32:52"><call pos:start="32:9" pos:end="32:52"><name pos:start="32:9" pos:end="32:32">cpu_physical_memory_read</name><argument_list pos:start="32:33" pos:end="32:52">(<argument pos:start="32:34" pos:end="32:39"><expr pos:start="32:34" pos:end="32:39"><name pos:start="32:34" pos:end="32:39">txaddr</name></expr></argument>, <argument pos:start="32:42" pos:end="32:44"><expr pos:start="32:42" pos:end="32:44"><name pos:start="32:42" pos:end="32:44">buf</name></expr></argument>, <argument pos:start="32:47" pos:end="32:51"><expr pos:start="32:47" pos:end="32:51"><name pos:start="32:47" pos:end="32:51">lsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:21"><expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:11">buf</name> <operator pos:start="33:13" pos:end="33:14">+=</operator> <name pos:start="33:16" pos:end="33:20">lsize</name></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:23"><expr pos:start="34:9" pos:end="34:22"><name pos:start="34:9" pos:end="34:13">taddr</name> <operator pos:start="34:15" pos:end="34:16">+=</operator> <name pos:start="34:18" pos:end="34:22">lsize</name></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:12">size</name> <operator pos:start="35:14" pos:end="35:15">-=</operator> <name pos:start="35:17" pos:end="35:21">lsize</name></expr>;</expr_stmt>
    <return pos:start="36:5" pos:end="36:21">return <expr pos:start="36:12" pos:end="36:20"><name pos:start="36:12" pos:end="36:20">H_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function></unit>
