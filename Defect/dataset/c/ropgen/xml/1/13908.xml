<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13908.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:12">void</name></type> <name pos:start="1:14" pos:end="1:28">ff_h264dsp_init</name><parameter_list pos:start="1:29" pos:end="3:57">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:43">H264DSPContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">c</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:67"><decl pos:start="1:49" pos:end="1:67"><type pos:start="1:49" pos:end="1:67"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:67">bit_depth</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:56"><decl pos:start="3:30" pos:end="3:56"><type pos:start="3:30" pos:end="3:56"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:56">chroma_format_idc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="171:1">{<block_content pos:start="21:5" pos:end="169:71">

<cpp:undef pos:start="7:1" pos:end="7:11">#<cpp:directive pos:start="7:2" pos:end="7:6">undef</cpp:directive> <name pos:start="7:8" pos:end="7:11">FUNC</name></cpp:undef>

<cpp:define pos:start="9:1" pos:end="9:44">#<cpp:directive pos:start="9:2" pos:end="9:7">define</cpp:directive> <cpp:macro pos:start="9:9" pos:end="9:22"><name pos:start="9:9" pos:end="9:12">FUNC</name><parameter_list pos:start="9:13" pos:end="9:22">(<parameter pos:start="9:14" pos:end="9:14"><type pos:start="9:14" pos:end="9:14"><name pos:start="9:14" pos:end="9:14">a</name></type></parameter>, <parameter pos:start="9:17" pos:end="9:21"><type pos:start="9:17" pos:end="9:21"><name pos:start="9:17" pos:end="9:21">depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="9:24" pos:end="9:44">a ## _ ## depth ## _c</cpp:value></cpp:define>



<cpp:define pos:start="13:1" pos:end="17:64">#<cpp:directive pos:start="13:2" pos:end="13:7">define</cpp:directive> <cpp:macro pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:17">ADDPX_DSP</name><parameter_list pos:start="13:18" pos:end="13:24">(<parameter pos:start="13:19" pos:end="13:23"><type pos:start="13:19" pos:end="13:23"><name pos:start="13:19" pos:end="13:23">depth</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="15:5" pos:end="17:64">c-&gt;h264_add_pixels4_clear = FUNC(ff_h264_add_pixels4, depth);\

    c-&gt;h264_add_pixels8_clear = FUNC(ff_h264_add_pixels8, depth)</cpp:value></cpp:define>



    <if_stmt pos:start="21:5" pos:end="136:0"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:41">(<expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:17">bit_depth</name> <operator pos:start="21:19" pos:end="21:19">&gt;</operator> <literal type="number" pos:start="21:21" pos:end="21:21">8</literal> <operator pos:start="21:23" pos:end="21:24">&amp;&amp;</operator> <name pos:start="21:26" pos:end="21:34">bit_depth</name> <operator pos:start="21:36" pos:end="21:37">&lt;=</operator> <literal type="number" pos:start="21:39" pos:end="21:40">16</literal></expr>)</condition> <block pos:start="21:43" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:22">

        <expr_stmt pos:start="23:9" pos:end="23:22"><expr pos:start="23:9" pos:end="23:21"><call pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:17">ADDPX_DSP</name><argument_list pos:start="23:18" pos:end="23:21">(<argument pos:start="23:19" pos:end="23:20"><expr pos:start="23:19" pos:end="23:20"><literal type="number" pos:start="23:19" pos:end="23:20">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="136:0">else <block pos:start="25:12" pos:end="136:0">{<block_content pos:start="27:9" pos:end="27:21">

        <expr_stmt pos:start="27:9" pos:end="27:21"><expr pos:start="27:9" pos:end="27:20"><call pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:17">ADDPX_DSP</name><argument_list pos:start="27:18" pos:end="27:20">(<argument pos:start="27:19" pos:end="27:19"><expr pos:start="27:19" pos:end="27:19"><literal type="number" pos:start="27:19" pos:end="27:19">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:define pos:start="33:1" pos:end="135:39">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:16">H264_DSP</name><parameter_list pos:start="33:17" pos:end="33:23">(<parameter pos:start="33:18" pos:end="33:22"><type pos:start="33:18" pos:end="33:22"><name pos:start="33:18" pos:end="33:22">depth</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="35:5" pos:end="135:39">c-&gt;h264_idct_add= FUNC(ff_h264_idct_add, depth);\

    c-&gt;h264_idct8_add= FUNC(ff_h264_idct8_add, depth);\

    c-&gt;h264_idct_dc_add= FUNC(ff_h264_idct_dc_add, depth);\

    c-&gt;h264_idct8_dc_add= FUNC(ff_h264_idct8_dc_add, depth);\

    c-&gt;h264_idct_add16     = FUNC(ff_h264_idct_add16, depth);\

    c-&gt;h264_idct8_add4     = FUNC(ff_h264_idct8_add4, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_idct_add8  = FUNC(ff_h264_idct_add8, depth);\

    else\

        c-&gt;h264_idct_add8  = FUNC(ff_h264_idct_add8_422, depth);\

    c-&gt;h264_idct_add16intra= FUNC(ff_h264_idct_add16intra, depth);\

    c-&gt;h264_luma_dc_dequant_idct= FUNC(ff_h264_luma_dc_dequant_idct, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_chroma_dc_dequant_idct= FUNC(ff_h264_chroma_dc_dequant_idct, depth);\

    else\

        c-&gt;h264_chroma_dc_dequant_idct= FUNC(ff_h264_chroma422_dc_dequant_idct, depth);\

\

    c-&gt;weight_h264_pixels_tab[0]= FUNC(weight_h264_pixels16, depth);\

    c-&gt;weight_h264_pixels_tab[1]= FUNC(weight_h264_pixels8, depth);\

    c-&gt;weight_h264_pixels_tab[2]= FUNC(weight_h264_pixels4, depth);\

    c-&gt;weight_h264_pixels_tab[3]= FUNC(weight_h264_pixels2, depth);\

    c-&gt;biweight_h264_pixels_tab[0]= FUNC(biweight_h264_pixels16, depth);\

    c-&gt;biweight_h264_pixels_tab[1]= FUNC(biweight_h264_pixels8, depth);\

    c-&gt;biweight_h264_pixels_tab[2]= FUNC(biweight_h264_pixels4, depth);\

    c-&gt;biweight_h264_pixels_tab[3]= FUNC(biweight_h264_pixels2, depth);\

\

    c-&gt;h264_v_loop_filter_luma= FUNC(h264_v_loop_filter_luma, depth);\

    c-&gt;h264_h_loop_filter_luma= FUNC(h264_h_loop_filter_luma, depth);\

    c-&gt;h264_h_loop_filter_luma_mbaff= FUNC(h264_h_loop_filter_luma_mbaff, depth);\

    c-&gt;h264_v_loop_filter_luma_intra= FUNC(h264_v_loop_filter_luma_intra, depth);\

    c-&gt;h264_h_loop_filter_luma_intra= FUNC(h264_h_loop_filter_luma_intra, depth);\

    c-&gt;h264_h_loop_filter_luma_mbaff_intra= FUNC(h264_h_loop_filter_luma_mbaff_intra, depth);\

    c-&gt;h264_v_loop_filter_chroma= FUNC(h264_v_loop_filter_chroma, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_h_loop_filter_chroma= FUNC(h264_h_loop_filter_chroma, depth);\

    else\

        c-&gt;h264_h_loop_filter_chroma= FUNC(h264_h_loop_filter_chroma422, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_h_loop_filter_chroma_mbaff= FUNC(h264_h_loop_filter_chroma_mbaff, depth);\

    else\

        c-&gt;h264_h_loop_filter_chroma_mbaff= FUNC(h264_h_loop_filter_chroma422_mbaff, depth);\

    c-&gt;h264_v_loop_filter_chroma_intra= FUNC(h264_v_loop_filter_chroma_intra, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_h_loop_filter_chroma_intra= FUNC(h264_h_loop_filter_chroma_intra, depth);\

    else\

        c-&gt;h264_h_loop_filter_chroma_intra= FUNC(h264_h_loop_filter_chroma422_intra, depth);\

    if (chroma_format_idc == 1)\

        c-&gt;h264_h_loop_filter_chroma_mbaff_intra= FUNC(h264_h_loop_filter_chroma_mbaff_intra, depth);\

    else\

        c-&gt;h264_h_loop_filter_chroma_mbaff_intra= FUNC(h264_h_loop_filter_chroma422_mbaff_intra, depth);\

    c-&gt;h264_loop_filter_strength= NULL;</cpp:value></cpp:define>



    <switch pos:start="139:5" pos:end="159:5">switch <condition pos:start="139:12" pos:end="139:22">(<expr pos:start="139:13" pos:end="139:21"><name pos:start="139:13" pos:end="139:21">bit_depth</name></expr>)</condition> <block pos:start="139:24" pos:end="159:5">{<block_content pos:start="141:5" pos:end="157:14">

    <case pos:start="141:5" pos:end="141:11">case <expr pos:start="141:10" pos:end="141:10"><literal type="number" pos:start="141:10" pos:end="141:10">9</literal></expr>:</case>

        <expr_stmt pos:start="143:9" pos:end="143:20"><expr pos:start="143:9" pos:end="143:19"><call pos:start="143:9" pos:end="143:19"><name pos:start="143:9" pos:end="143:16">H264_DSP</name><argument_list pos:start="143:17" pos:end="143:19">(<argument pos:start="143:18" pos:end="143:18"><expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:12">case <expr pos:start="147:10" pos:end="147:11"><literal type="number" pos:start="147:10" pos:end="147:11">10</literal></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:21"><expr pos:start="149:9" pos:end="149:20"><call pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:16">H264_DSP</name><argument_list pos:start="149:17" pos:end="149:20">(<argument pos:start="149:18" pos:end="149:19"><expr pos:start="149:18" pos:end="149:19"><literal type="number" pos:start="149:18" pos:end="149:19">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <default pos:start="153:5" pos:end="153:12">default:</default>

        <expr_stmt pos:start="155:9" pos:end="155:20"><expr pos:start="155:9" pos:end="155:19"><call pos:start="155:9" pos:end="155:19"><name pos:start="155:9" pos:end="155:16">H264_DSP</name><argument_list pos:start="155:17" pos:end="155:19">(<argument pos:start="155:18" pos:end="155:18"><expr pos:start="155:18" pos:end="155:18"><literal type="number" pos:start="155:18" pos:end="155:18">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="157:9" pos:end="157:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="161:5" pos:end="161:73"><expr pos:start="161:5" pos:end="161:72"><name pos:start="161:5" pos:end="161:37"><name pos:start="161:5" pos:end="161:5">c</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:37">h264_find_start_code_candidate</name></name> <operator pos:start="161:39" pos:end="161:39">=</operator> <name pos:start="161:41" pos:end="161:72">h264_find_start_code_candidate_c</name></expr>;</expr_stmt>



    <if_stmt pos:start="165:5" pos:end="165:71"><if pos:start="165:5" pos:end="165:71">if <condition pos:start="165:8" pos:end="165:17">(<expr pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:16">ARCH_ARM</name></expr>)</condition><block type="pseudo" pos:start="165:19" pos:end="165:71"><block_content pos:start="165:19" pos:end="165:71"> <expr_stmt pos:start="165:19" pos:end="165:71"><expr pos:start="165:19" pos:end="165:70"><call pos:start="165:19" pos:end="165:70"><name pos:start="165:19" pos:end="165:37">ff_h264dsp_init_arm</name><argument_list pos:start="165:38" pos:end="165:70">(<argument pos:start="165:39" pos:end="165:39"><expr pos:start="165:39" pos:end="165:39"><name pos:start="165:39" pos:end="165:39">c</name></expr></argument>, <argument pos:start="165:42" pos:end="165:50"><expr pos:start="165:42" pos:end="165:50"><name pos:start="165:42" pos:end="165:50">bit_depth</name></expr></argument>, <argument pos:start="165:53" pos:end="165:69"><expr pos:start="165:53" pos:end="165:69"><name pos:start="165:53" pos:end="165:69">chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="167:5" pos:end="167:71"><if pos:start="167:5" pos:end="167:71">if <condition pos:start="167:8" pos:end="167:17">(<expr pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:16">ARCH_PPC</name></expr>)</condition><block type="pseudo" pos:start="167:19" pos:end="167:71"><block_content pos:start="167:19" pos:end="167:71"> <expr_stmt pos:start="167:19" pos:end="167:71"><expr pos:start="167:19" pos:end="167:70"><call pos:start="167:19" pos:end="167:70"><name pos:start="167:19" pos:end="167:37">ff_h264dsp_init_ppc</name><argument_list pos:start="167:38" pos:end="167:70">(<argument pos:start="167:39" pos:end="167:39"><expr pos:start="167:39" pos:end="167:39"><name pos:start="167:39" pos:end="167:39">c</name></expr></argument>, <argument pos:start="167:42" pos:end="167:50"><expr pos:start="167:42" pos:end="167:50"><name pos:start="167:42" pos:end="167:50">bit_depth</name></expr></argument>, <argument pos:start="167:53" pos:end="167:69"><expr pos:start="167:53" pos:end="167:69"><name pos:start="167:53" pos:end="167:69">chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="169:5" pos:end="169:71"><if pos:start="169:5" pos:end="169:71">if <condition pos:start="169:8" pos:end="169:17">(<expr pos:start="169:9" pos:end="169:16"><name pos:start="169:9" pos:end="169:16">ARCH_X86</name></expr>)</condition><block type="pseudo" pos:start="169:19" pos:end="169:71"><block_content pos:start="169:19" pos:end="169:71"> <expr_stmt pos:start="169:19" pos:end="169:71"><expr pos:start="169:19" pos:end="169:70"><call pos:start="169:19" pos:end="169:70"><name pos:start="169:19" pos:end="169:37">ff_h264dsp_init_x86</name><argument_list pos:start="169:38" pos:end="169:70">(<argument pos:start="169:39" pos:end="169:39"><expr pos:start="169:39" pos:end="169:39"><name pos:start="169:39" pos:end="169:39">c</name></expr></argument>, <argument pos:start="169:42" pos:end="169:50"><expr pos:start="169:42" pos:end="169:50"><name pos:start="169:42" pos:end="169:50">bit_depth</name></expr></argument>, <argument pos:start="169:53" pos:end="169:69"><expr pos:start="169:53" pos:end="169:69"><name pos:start="169:53" pos:end="169:69">chroma_format_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
