<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7208.c" pos:tabs="8"><function pos:start="1:1" pos:end="473:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">lsi_reg_writeb</name><parameter_list pos:start="1:27" pos:end="1:64">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:38"><name pos:start="1:28" pos:end="1:35">LSIState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:50"><decl pos:start="1:41" pos:end="1:50"><type pos:start="1:41" pos:end="1:50"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:50">offset</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:59">uint8_t</name></type> <name pos:start="1:61" pos:end="1:63">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="473:1">{<block_content pos:start="29:5" pos:end="472:0">

<cpp:define pos:start="5:1" pos:end="11:70">#<cpp:directive pos:start="5:2" pos:end="5:7">define</cpp:directive> <cpp:macro pos:start="5:9" pos:end="5:34"><name pos:start="5:9" pos:end="5:22">CASE_SET_REG24</name><parameter_list pos:start="5:23" pos:end="5:34">(<parameter pos:start="5:24" pos:end="5:27"><type pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">name</name></type></parameter>, <parameter pos:start="5:30" pos:end="5:33"><type pos:start="5:30" pos:end="5:33"><name pos:start="5:30" pos:end="5:33">addr</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="7:5" pos:end="11:70">case addr    : s-&gt;name &amp;= 0xffffff00; s-&gt;name |= val;       break; \

    case addr + 1: s-&gt;name &amp;= 0xffff00ff; s-&gt;name |= val &lt;&lt; 8;  break; \

    case addr + 2: s-&gt;name &amp;= 0xff00ffff; s-&gt;name |= val &lt;&lt; 16; break;</cpp:value></cpp:define>



<cpp:define pos:start="15:1" pos:end="23:70">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:34"><name pos:start="15:9" pos:end="15:22">CASE_SET_REG32</name><parameter_list pos:start="15:23" pos:end="15:34">(<parameter pos:start="15:24" pos:end="15:27"><type pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">name</name></type></parameter>, <parameter pos:start="15:30" pos:end="15:33"><type pos:start="15:30" pos:end="15:33"><name pos:start="15:30" pos:end="15:33">addr</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="17:5" pos:end="23:70">case addr    : s-&gt;name &amp;= 0xffffff00; s-&gt;name |= val;       break; \

    case addr + 1: s-&gt;name &amp;= 0xffff00ff; s-&gt;name |= val &lt;&lt; 8;  break; \

    case addr + 2: s-&gt;name &amp;= 0xff00ffff; s-&gt;name |= val &lt;&lt; 16; break; \

    case addr + 3: s-&gt;name &amp;= 0x00ffffff; s-&gt;name |= val &lt;&lt; 24; break;</cpp:value></cpp:define>



<cpp:ifdef pos:start="27:1" pos:end="27:20">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:20">DEBUG_LSI_REG</name></cpp:ifdef>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:49"><call pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:11">DPRINTF</name><argument_list pos:start="29:12" pos:end="29:49">(<argument pos:start="29:13" pos:end="29:35"><expr pos:start="29:13" pos:end="29:35"><literal type="string" pos:start="29:13" pos:end="29:35">"Write reg %x = %02x\n"</literal></expr></argument>, <argument pos:start="29:38" pos:end="29:43"><expr pos:start="29:38" pos:end="29:43"><name pos:start="29:38" pos:end="29:43">offset</name></expr></argument>, <argument pos:start="29:46" pos:end="29:48"><expr pos:start="29:46" pos:end="29:48"><name pos:start="29:46" pos:end="29:48">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <switch pos:start="33:5" pos:end="472:0">switch <condition pos:start="33:12" pos:end="33:19">(<expr pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:18">offset</name></expr>)</condition> <block pos:start="33:21" pos:end="472:0">{<block_content pos:start="35:5" pos:end="465:9">

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0x00</literal></expr>:</case> <comment type="block" pos:start="35:16" pos:end="35:27">/* SCNTL0 */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:17">scntl0</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:23">val</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:35">(<expr pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:15">val</name> <operator pos:start="39:17" pos:end="39:17">&amp;</operator> <name pos:start="39:19" pos:end="39:34">LSI_SCNTL0_START</name></expr>)</condition> <block pos:start="39:37" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:53">

            <expr_stmt pos:start="41:13" pos:end="41:53"><expr pos:start="41:13" pos:end="41:52"><call pos:start="41:13" pos:end="41:52"><name pos:start="41:13" pos:end="41:16">BADF</name><argument_list pos:start="41:17" pos:end="41:52">(<argument pos:start="41:18" pos:end="41:51"><expr pos:start="41:18" pos:end="41:51"><literal type="string" pos:start="41:18" pos:end="41:51">"Start sequence not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0x01</literal></expr>:</case> <comment type="block" pos:start="47:16" pos:end="47:27">/* SCNTL1 */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:42"><expr pos:start="49:9" pos:end="49:41"><name pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:17">scntl1</name></name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:23">val</name> <operator pos:start="49:25" pos:end="49:25">&amp;</operator> <operator pos:start="49:27" pos:end="49:27">~</operator><name pos:start="49:28" pos:end="49:41">LSI_SCNTL1_SST</name></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:34">(<expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:15">val</name> <operator pos:start="51:17" pos:end="51:17">&amp;</operator> <name pos:start="51:19" pos:end="51:33">LSI_SCNTL1_IARB</name></expr>)</condition> <block pos:start="51:36" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:61">

            <expr_stmt pos:start="53:13" pos:end="53:61"><expr pos:start="53:13" pos:end="53:60"><call pos:start="53:13" pos:end="53:60"><name pos:start="53:13" pos:end="53:16">BADF</name><argument_list pos:start="53:17" pos:end="53:60">(<argument pos:start="53:18" pos:end="53:59"><expr pos:start="53:18" pos:end="53:59"><literal type="string" pos:start="53:18" pos:end="53:59">"Immediate Arbritration not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="83:9"><if pos:start="57:9" pos:end="79:9">if <condition pos:start="57:12" pos:end="57:33">(<expr pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:15">val</name> <operator pos:start="57:17" pos:end="57:17">&amp;</operator> <name pos:start="57:19" pos:end="57:32">LSI_SCNTL1_RST</name></expr>)</condition> <block pos:start="57:35" pos:end="79:9">{<block_content pos:start="59:13" pos:end="77:13">

            <if_stmt pos:start="59:13" pos:end="77:13"><if pos:start="59:13" pos:end="77:13">if <condition pos:start="59:16" pos:end="59:46">(<expr pos:start="59:17" pos:end="59:45"><operator pos:start="59:17" pos:end="59:17">!</operator><operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:27"><name pos:start="59:19" pos:end="59:19">s</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:27">sstat0</name></name> <operator pos:start="59:29" pos:end="59:29">&amp;</operator> <name pos:start="59:31" pos:end="59:44">LSI_SSTAT0_RST</name><operator pos:start="59:45" pos:end="59:45">)</operator></expr>)</condition> <block pos:start="59:48" pos:end="77:13">{<block_content pos:start="61:17" pos:end="75:63">

                <decl_stmt pos:start="61:17" pos:end="61:30"><decl pos:start="61:17" pos:end="61:29"><type pos:start="61:17" pos:end="61:26"><name pos:start="61:17" pos:end="61:24">BusChild</name> <modifier pos:start="61:26" pos:end="61:26">*</modifier></type><name pos:start="61:27" pos:end="61:29">kid</name></decl>;</decl_stmt>



                <macro pos:start="65:17" pos:end="65:67"><name pos:start="65:17" pos:end="65:30">QTAILQ_FOREACH</name><argument_list pos:start="65:31" pos:end="65:67">(<argument pos:start="65:32" pos:end="65:34">kid</argument>, <argument pos:start="65:37" pos:end="65:57">&amp;s-&gt;bus.qbus.children</argument>, <argument pos:start="65:60" pos:end="65:66">sibling</argument>)</argument_list></macro> <block pos:start="65:69" pos:end="71:17">{<block_content pos:start="67:21" pos:end="69:38">

                    <decl_stmt pos:start="67:21" pos:end="67:50"><decl pos:start="67:21" pos:end="67:49"><type pos:start="67:21" pos:end="67:33"><name pos:start="67:21" pos:end="67:31">DeviceState</name> <modifier pos:start="67:33" pos:end="67:33">*</modifier></type><name pos:start="67:34" pos:end="67:36">dev</name> <init pos:start="67:38" pos:end="67:49">= <expr pos:start="67:40" pos:end="67:49"><name pos:start="67:40" pos:end="67:49"><name pos:start="67:40" pos:end="67:42">kid</name><operator pos:start="67:43" pos:end="67:44">-&gt;</operator><name pos:start="67:45" pos:end="67:49">child</name></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="69:21" pos:end="69:38"><expr pos:start="69:21" pos:end="69:37"><call pos:start="69:21" pos:end="69:37"><name pos:start="69:21" pos:end="69:32">device_reset</name><argument_list pos:start="69:33" pos:end="69:37">(<argument pos:start="69:34" pos:end="69:36"><expr pos:start="69:34" pos:end="69:36"><name pos:start="69:34" pos:end="69:36">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>

                <expr_stmt pos:start="73:17" pos:end="73:44"><expr pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:25"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:25">sstat0</name></name> <operator pos:start="73:27" pos:end="73:28">|=</operator> <name pos:start="73:30" pos:end="73:43">LSI_SSTAT0_RST</name></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:63"><expr pos:start="75:17" pos:end="75:62"><call pos:start="75:17" pos:end="75:62"><name pos:start="75:17" pos:end="75:41">lsi_script_scsi_interrupt</name><argument_list pos:start="75:42" pos:end="75:62">(<argument pos:start="75:43" pos:end="75:43"><expr pos:start="75:43" pos:end="75:43"><name pos:start="75:43" pos:end="75:43">s</name></expr></argument>, <argument pos:start="75:46" pos:end="75:58"><expr pos:start="75:46" pos:end="75:58"><name pos:start="75:46" pos:end="75:58">LSI_SIST0_RST</name></expr></argument>, <argument pos:start="75:61" pos:end="75:61"><expr pos:start="75:61" pos:end="75:61"><literal type="number" pos:start="75:61" pos:end="75:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="83:9">else <block pos:start="79:16" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:41">

            <expr_stmt pos:start="81:13" pos:end="81:41"><expr pos:start="81:13" pos:end="81:40"><name pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:21">sstat0</name></name> <operator pos:start="81:23" pos:end="81:24">&amp;=</operator> <operator pos:start="81:26" pos:end="81:26">~</operator><name pos:start="81:27" pos:end="81:40">LSI_SSTAT0_RST</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:14">case <expr pos:start="87:10" pos:end="87:13"><literal type="number" pos:start="87:10" pos:end="87:13">0x02</literal></expr>:</case> <comment type="block" pos:start="87:16" pos:end="87:27">/* SCNTL2 */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:50"><expr pos:start="89:9" pos:end="89:49"><name pos:start="89:9" pos:end="89:11">val</name> <operator pos:start="89:13" pos:end="89:14">&amp;=</operator> <operator pos:start="89:16" pos:end="89:16">~</operator><operator pos:start="89:17" pos:end="89:17">(</operator><name pos:start="89:18" pos:end="89:31">LSI_SCNTL2_WSR</name> <operator pos:start="89:33" pos:end="89:33">|</operator> <name pos:start="89:35" pos:end="89:48">LSI_SCNTL2_WSS</name><operator pos:start="89:49" pos:end="89:49">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:24"><expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:17"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:17">scntl2</name></name> <operator pos:start="91:19" pos:end="91:19">=</operator> <name pos:start="91:21" pos:end="91:23">val</name></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:14">case <expr pos:start="95:10" pos:end="95:13"><literal type="number" pos:start="95:10" pos:end="95:13">0x03</literal></expr>:</case> <comment type="block" pos:start="95:16" pos:end="95:27">/* SCNTL3 */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:24"><expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:17"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:17">scntl3</name></name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:23">val</name></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <case pos:start="101:5" pos:end="101:14">case <expr pos:start="101:10" pos:end="101:13"><literal type="number" pos:start="101:10" pos:end="101:13">0x04</literal></expr>:</case> <comment type="block" pos:start="101:16" pos:end="101:25">/* SCID */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:22"><expr pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:15"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:15">scid</name></name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:21">val</name></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:14">case <expr pos:start="107:10" pos:end="107:13"><literal type="number" pos:start="107:10" pos:end="107:13">0x05</literal></expr>:</case> <comment type="block" pos:start="107:16" pos:end="107:26">/* SXFER */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:23"><expr pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:16">sxfer</name></name> <operator pos:start="109:18" pos:end="109:18">=</operator> <name pos:start="109:20" pos:end="109:22">val</name></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:14">case <expr pos:start="113:10" pos:end="113:13"><literal type="number" pos:start="113:10" pos:end="113:13">0x06</literal></expr>:</case> <comment type="block" pos:start="113:16" pos:end="113:25">/* SDID */</comment>

        <if_stmt pos:start="115:9" pos:end="117:57"><if pos:start="115:9" pos:end="117:57">if <condition pos:start="115:12" pos:end="115:43">(<expr pos:start="115:13" pos:end="115:42"><operator pos:start="115:13" pos:end="115:13">(</operator><name pos:start="115:14" pos:end="115:16">val</name> <operator pos:start="115:18" pos:end="115:18">&amp;</operator> <literal type="number" pos:start="115:20" pos:end="115:22">0xf</literal><operator pos:start="115:23" pos:end="115:23">)</operator> <operator pos:start="115:25" pos:end="115:26">!=</operator> <operator pos:start="115:28" pos:end="115:28">(</operator><name pos:start="115:29" pos:end="115:35"><name pos:start="115:29" pos:end="115:29">s</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:35">ssid</name></name> <operator pos:start="115:37" pos:end="115:37">&amp;</operator> <literal type="number" pos:start="115:39" pos:end="115:41">0xf</literal><operator pos:start="115:42" pos:end="115:42">)</operator></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:57"><block_content pos:start="117:13" pos:end="117:57">

            <expr_stmt pos:start="117:13" pos:end="117:57"><expr pos:start="117:13" pos:end="117:56"><call pos:start="117:13" pos:end="117:56"><name pos:start="117:13" pos:end="117:16">BADF</name><argument_list pos:start="117:17" pos:end="117:56">(<argument pos:start="117:18" pos:end="117:55"><expr pos:start="117:18" pos:end="117:55"><literal type="string" pos:start="117:18" pos:end="117:55">"Destination ID does not match SSID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:28"><expr pos:start="119:9" pos:end="119:27"><name pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:15">sdid</name></name> <operator pos:start="119:17" pos:end="119:17">=</operator> <name pos:start="119:19" pos:end="119:21">val</name> <operator pos:start="119:23" pos:end="119:23">&amp;</operator> <literal type="number" pos:start="119:25" pos:end="119:27">0xf</literal></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    <case pos:start="123:5" pos:end="123:14">case <expr pos:start="123:10" pos:end="123:13"><literal type="number" pos:start="123:10" pos:end="123:13">0x07</literal></expr>:</case> <comment type="block" pos:start="123:16" pos:end="123:27">/* GPREG0 */</comment>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:14">case <expr pos:start="127:10" pos:end="127:13"><literal type="number" pos:start="127:10" pos:end="127:13">0x08</literal></expr>:</case> <comment type="block" pos:start="127:16" pos:end="127:25">/* SFBR */</comment>

        <comment type="block" pos:start="129:9" pos:end="131:54">/* The CPU is not allowed to write to this register.  However the

           SCRIPTS register move instructions are.  */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:22"><expr pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:15">sfbr</name></name> <operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:21">val</name></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:14">case <expr pos:start="137:10" pos:end="137:13"><literal type="number" pos:start="137:10" pos:end="137:13">0x0a</literal></expr>:</case> <case pos:start="137:16" pos:end="137:25">case <expr pos:start="137:21" pos:end="137:24"><literal type="number" pos:start="137:21" pos:end="137:24">0x0b</literal></expr>:</case>

        <comment type="block" pos:start="139:9" pos:end="139:70">/* Openserver writes to these readonly registers on startup */</comment>

	<return pos:start="141:9" pos:end="141:15">return;</return>

    <case pos:start="143:5" pos:end="143:14">case <expr pos:start="143:10" pos:end="143:13"><literal type="number" pos:start="143:10" pos:end="143:13">0x0c</literal></expr>:</case> <case pos:start="143:16" pos:end="143:25">case <expr pos:start="143:21" pos:end="143:24"><literal type="number" pos:start="143:21" pos:end="143:24">0x0d</literal></expr>:</case> <case pos:start="143:27" pos:end="143:36">case <expr pos:start="143:32" pos:end="143:35"><literal type="number" pos:start="143:32" pos:end="143:35">0x0e</literal></expr>:</case> <case pos:start="143:38" pos:end="143:47">case <expr pos:start="143:43" pos:end="143:46"><literal type="number" pos:start="143:43" pos:end="143:46">0x0f</literal></expr>:</case>

        <comment type="block" pos:start="145:9" pos:end="145:67">/* Linux writes to these readonly registers on startup.  */</comment>

        <return pos:start="147:9" pos:end="147:15">return;</return>

    <macro pos:start="149:5" pos:end="149:29"><name pos:start="149:5" pos:end="149:18">CASE_SET_REG32</name><argument_list pos:start="149:19" pos:end="149:29">(<argument pos:start="149:20" pos:end="149:22">dsa</argument>, <argument pos:start="149:25" pos:end="149:28"><literal type="number" pos:start="149:25" pos:end="149:28">0x10</literal></argument>)</argument_list></macro>

    <case pos:start="151:5" pos:end="151:14">case <expr pos:start="151:10" pos:end="151:13"><literal type="number" pos:start="151:10" pos:end="151:13">0x14</literal></expr>:</case> <comment type="block" pos:start="151:16" pos:end="151:27">/* ISTAT0 */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:54"><expr pos:start="153:9" pos:end="153:53"><name pos:start="153:9" pos:end="153:17"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:17">istat0</name></name> <operator pos:start="153:19" pos:end="153:19">=</operator> <operator pos:start="153:21" pos:end="153:21">(</operator><name pos:start="153:22" pos:end="153:30"><name pos:start="153:22" pos:end="153:22">s</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:30">istat0</name></name> <operator pos:start="153:32" pos:end="153:32">&amp;</operator> <literal type="number" pos:start="153:34" pos:end="153:37">0x0f</literal><operator pos:start="153:38" pos:end="153:38">)</operator> <operator pos:start="153:40" pos:end="153:40">|</operator> <operator pos:start="153:42" pos:end="153:42">(</operator><name pos:start="153:43" pos:end="153:45">val</name> <operator pos:start="153:47" pos:end="153:47">&amp;</operator> <literal type="number" pos:start="153:49" pos:end="153:52">0xf0</literal><operator pos:start="153:53" pos:end="153:53">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="159:9"><if pos:start="155:9" pos:end="159:9">if <condition pos:start="155:12" pos:end="155:34">(<expr pos:start="155:13" pos:end="155:33"><name pos:start="155:13" pos:end="155:15">val</name> <operator pos:start="155:17" pos:end="155:17">&amp;</operator> <name pos:start="155:19" pos:end="155:33">LSI_ISTAT0_ABRT</name></expr>)</condition> <block pos:start="155:36" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:56">

            <expr_stmt pos:start="157:13" pos:end="157:56"><expr pos:start="157:13" pos:end="157:55"><call pos:start="157:13" pos:end="157:55"><name pos:start="157:13" pos:end="157:36">lsi_script_dma_interrupt</name><argument_list pos:start="157:37" pos:end="157:55">(<argument pos:start="157:38" pos:end="157:38"><expr pos:start="157:38" pos:end="157:38"><name pos:start="157:38" pos:end="157:38">s</name></expr></argument>, <argument pos:start="157:41" pos:end="157:54"><expr pos:start="157:41" pos:end="157:54"><name pos:start="157:41" pos:end="157:54">LSI_DSTAT_ABRT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="161:9" pos:end="167:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:34">(<expr pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:15">val</name> <operator pos:start="161:17" pos:end="161:17">&amp;</operator> <name pos:start="161:19" pos:end="161:33">LSI_ISTAT0_INTF</name></expr>)</condition> <block pos:start="161:36" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:30">

            <expr_stmt pos:start="163:13" pos:end="163:42"><expr pos:start="163:13" pos:end="163:41"><name pos:start="163:13" pos:end="163:21"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:21">istat0</name></name> <operator pos:start="163:23" pos:end="163:24">&amp;=</operator> <operator pos:start="163:26" pos:end="163:26">~</operator><name pos:start="163:27" pos:end="163:41">LSI_ISTAT0_INTF</name></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:30"><expr pos:start="165:13" pos:end="165:29"><call pos:start="165:13" pos:end="165:29"><name pos:start="165:13" pos:end="165:26">lsi_update_irq</name><argument_list pos:start="165:27" pos:end="165:29">(<argument pos:start="165:28" pos:end="165:28"><expr pos:start="165:28" pos:end="165:28"><name pos:start="165:28" pos:end="165:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="169:9" pos:end="179:9"><if pos:start="169:9" pos:end="179:9">if <condition pos:start="169:12" pos:end="169:53">(<expr pos:start="169:13" pos:end="169:52"><name pos:start="169:13" pos:end="169:22"><name pos:start="169:13" pos:end="169:13">s</name><operator pos:start="169:14" pos:end="169:15">-&gt;</operator><name pos:start="169:16" pos:end="169:22">waiting</name></name> <operator pos:start="169:24" pos:end="169:25">==</operator> <literal type="number" pos:start="169:27" pos:end="169:27">1</literal> <operator pos:start="169:29" pos:end="169:30">&amp;&amp;</operator> <name pos:start="169:32" pos:end="169:34">val</name> <operator pos:start="169:36" pos:end="169:36">&amp;</operator> <name pos:start="169:38" pos:end="169:52">LSI_ISTAT0_SIGP</name></expr>)</condition> <block pos:start="169:55" pos:end="179:9">{<block_content pos:start="171:13" pos:end="177:34">

            <expr_stmt pos:start="171:13" pos:end="171:39"><expr pos:start="171:13" pos:end="171:38"><call pos:start="171:13" pos:end="171:38"><name pos:start="171:13" pos:end="171:19">DPRINTF</name><argument_list pos:start="171:20" pos:end="171:38">(<argument pos:start="171:21" pos:end="171:37"><expr pos:start="171:21" pos:end="171:37"><literal type="string" pos:start="171:21" pos:end="171:37">"Woken by SIGP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:27"><expr pos:start="173:13" pos:end="173:26"><name pos:start="173:13" pos:end="173:22"><name pos:start="173:13" pos:end="173:13">s</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:22">waiting</name></name> <operator pos:start="173:24" pos:end="173:24">=</operator> <literal type="number" pos:start="173:26" pos:end="173:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:29"><expr pos:start="175:13" pos:end="175:28"><name pos:start="175:13" pos:end="175:18"><name pos:start="175:13" pos:end="175:13">s</name><operator pos:start="175:14" pos:end="175:15">-&gt;</operator><name pos:start="175:16" pos:end="175:18">dsp</name></name> <operator pos:start="175:20" pos:end="175:20">=</operator> <name pos:start="175:22" pos:end="175:28"><name pos:start="175:22" pos:end="175:22">s</name><operator pos:start="175:23" pos:end="175:24">-&gt;</operator><name pos:start="175:25" pos:end="175:28">dnad</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:34"><expr pos:start="177:13" pos:end="177:33"><call pos:start="177:13" pos:end="177:33"><name pos:start="177:13" pos:end="177:30">lsi_execute_script</name><argument_list pos:start="177:31" pos:end="177:33">(<argument pos:start="177:32" pos:end="177:32"><expr pos:start="177:32" pos:end="177:32"><name pos:start="177:32" pos:end="177:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="181:9" pos:end="185:9"><if pos:start="181:9" pos:end="185:9">if <condition pos:start="181:12" pos:end="181:34">(<expr pos:start="181:13" pos:end="181:33"><name pos:start="181:13" pos:end="181:15">val</name> <operator pos:start="181:17" pos:end="181:17">&amp;</operator> <name pos:start="181:19" pos:end="181:33">LSI_ISTAT0_SRST</name></expr>)</condition> <block pos:start="181:36" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:30">

            <expr_stmt pos:start="183:13" pos:end="183:30"><expr pos:start="183:13" pos:end="183:29"><call pos:start="183:13" pos:end="183:29"><name pos:start="183:13" pos:end="183:26">lsi_soft_reset</name><argument_list pos:start="183:27" pos:end="183:29">(<argument pos:start="183:28" pos:end="183:28"><expr pos:start="183:28" pos:end="183:28"><name pos:start="183:28" pos:end="183:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <case pos:start="189:5" pos:end="189:14">case <expr pos:start="189:10" pos:end="189:13"><literal type="number" pos:start="189:10" pos:end="189:13">0x16</literal></expr>:</case> <comment type="block" pos:start="189:16" pos:end="189:26">/* MBOX0 */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:23"><expr pos:start="191:9" pos:end="191:22"><name pos:start="191:9" pos:end="191:16"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:16">mbox0</name></name> <operator pos:start="191:18" pos:end="191:18">=</operator> <name pos:start="191:20" pos:end="191:22">val</name></expr>;</expr_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <case pos:start="195:5" pos:end="195:14">case <expr pos:start="195:10" pos:end="195:13"><literal type="number" pos:start="195:10" pos:end="195:13">0x17</literal></expr>:</case> <comment type="block" pos:start="195:16" pos:end="195:26">/* MBOX1 */</comment>

        <expr_stmt pos:start="197:9" pos:end="197:23"><expr pos:start="197:9" pos:end="197:22"><name pos:start="197:9" pos:end="197:16"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:16">mbox1</name></name> <operator pos:start="197:18" pos:end="197:18">=</operator> <name pos:start="197:20" pos:end="197:22">val</name></expr>;</expr_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:14">case <expr pos:start="201:10" pos:end="201:13"><literal type="number" pos:start="201:10" pos:end="201:13">0x1a</literal></expr>:</case> <comment type="block" pos:start="201:16" pos:end="201:27">/* CTEST2 */</comment>

	<expr_stmt pos:start="203:9" pos:end="203:44"><expr pos:start="203:9" pos:end="203:43"><name pos:start="203:9" pos:end="203:17"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:17">ctest2</name></name> <operator pos:start="203:19" pos:end="203:19">=</operator> <name pos:start="203:21" pos:end="203:23">val</name> <operator pos:start="203:25" pos:end="203:25">&amp;</operator> <name pos:start="203:27" pos:end="203:43">LSI_CTEST2_PCICIE</name></expr>;</expr_stmt>

	<break pos:start="205:9" pos:end="205:14">break;</break>

    <case pos:start="207:5" pos:end="207:14">case <expr pos:start="207:10" pos:end="207:13"><literal type="number" pos:start="207:10" pos:end="207:13">0x1b</literal></expr>:</case> <comment type="block" pos:start="207:16" pos:end="207:27">/* CTEST3 */</comment>

        <expr_stmt pos:start="209:9" pos:end="209:31"><expr pos:start="209:9" pos:end="209:30"><name pos:start="209:9" pos:end="209:17"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:17">ctest3</name></name> <operator pos:start="209:19" pos:end="209:19">=</operator> <name pos:start="209:21" pos:end="209:23">val</name> <operator pos:start="209:25" pos:end="209:25">&amp;</operator> <literal type="number" pos:start="209:27" pos:end="209:30">0x0f</literal></expr>;</expr_stmt>

        <break pos:start="211:9" pos:end="211:14">break;</break>

    <macro pos:start="213:5" pos:end="213:30"><name pos:start="213:5" pos:end="213:18">CASE_SET_REG32</name><argument_list pos:start="213:19" pos:end="213:30">(<argument pos:start="213:20" pos:end="213:23">temp</argument>, <argument pos:start="213:26" pos:end="213:29"><literal type="number" pos:start="213:26" pos:end="213:29">0x1c</literal></argument>)</argument_list></macro>

    <case pos:start="215:5" pos:end="215:14">case <expr pos:start="215:10" pos:end="215:13"><literal type="number" pos:start="215:10" pos:end="215:13">0x21</literal></expr>:</case> <comment type="block" pos:start="215:16" pos:end="215:27">/* CTEST4 */</comment>

        <if_stmt pos:start="217:9" pos:end="221:9"><if pos:start="217:9" pos:end="221:9">if <condition pos:start="217:12" pos:end="217:20">(<expr pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:15">val</name> <operator pos:start="217:17" pos:end="217:17">&amp;</operator> <literal type="number" pos:start="217:19" pos:end="217:19">7</literal></expr>)</condition> <block pos:start="217:22" pos:end="221:9">{<block_content pos:start="219:12" pos:end="219:56">

           <expr_stmt pos:start="219:12" pos:end="219:56"><expr pos:start="219:12" pos:end="219:55"><call pos:start="219:12" pos:end="219:55"><name pos:start="219:12" pos:end="219:15">BADF</name><argument_list pos:start="219:16" pos:end="219:55">(<argument pos:start="219:17" pos:end="219:49"><expr pos:start="219:17" pos:end="219:49"><literal type="string" pos:start="219:17" pos:end="219:49">"Unimplemented CTEST4-FBL 0x%x\n"</literal></expr></argument>, <argument pos:start="219:52" pos:end="219:54"><expr pos:start="219:52" pos:end="219:54"><name pos:start="219:52" pos:end="219:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:24"><expr pos:start="223:9" pos:end="223:23"><name pos:start="223:9" pos:end="223:17"><name pos:start="223:9" pos:end="223:9">s</name><operator pos:start="223:10" pos:end="223:11">-&gt;</operator><name pos:start="223:12" pos:end="223:17">ctest4</name></name> <operator pos:start="223:19" pos:end="223:19">=</operator> <name pos:start="223:21" pos:end="223:23">val</name></expr>;</expr_stmt>

        <break pos:start="225:9" pos:end="225:14">break;</break>

    <case pos:start="227:5" pos:end="227:14">case <expr pos:start="227:10" pos:end="227:13"><literal type="number" pos:start="227:10" pos:end="227:13">0x22</literal></expr>:</case> <comment type="block" pos:start="227:16" pos:end="227:27">/* CTEST5 */</comment>

        <if_stmt pos:start="229:9" pos:end="233:9"><if pos:start="229:9" pos:end="233:9">if <condition pos:start="229:12" pos:end="229:54">(<expr pos:start="229:13" pos:end="229:53"><name pos:start="229:13" pos:end="229:15">val</name> <operator pos:start="229:17" pos:end="229:17">&amp;</operator> <operator pos:start="229:19" pos:end="229:19">(</operator><name pos:start="229:20" pos:end="229:34">LSI_CTEST5_ADCK</name> <operator pos:start="229:36" pos:end="229:36">|</operator> <name pos:start="229:38" pos:end="229:52">LSI_CTEST5_BBCK</name><operator pos:start="229:53" pos:end="229:53">)</operator></expr>)</condition> <block pos:start="229:56" pos:end="233:9">{<block_content pos:start="231:13" pos:end="231:59">

            <expr_stmt pos:start="231:13" pos:end="231:59"><expr pos:start="231:13" pos:end="231:58"><call pos:start="231:13" pos:end="231:58"><name pos:start="231:13" pos:end="231:16">BADF</name><argument_list pos:start="231:17" pos:end="231:58">(<argument pos:start="231:18" pos:end="231:57"><expr pos:start="231:18" pos:end="231:57"><literal type="string" pos:start="231:18" pos:end="231:57">"CTEST5 DMA increment not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:24"><expr pos:start="235:9" pos:end="235:23"><name pos:start="235:9" pos:end="235:17"><name pos:start="235:9" pos:end="235:9">s</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:17">ctest5</name></name> <operator pos:start="235:19" pos:end="235:19">=</operator> <name pos:start="235:21" pos:end="235:23">val</name></expr>;</expr_stmt>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <macro pos:start="239:5" pos:end="239:29"><name pos:start="239:5" pos:end="239:18">CASE_SET_REG24</name><argument_list pos:start="239:19" pos:end="239:29">(<argument pos:start="239:20" pos:end="239:22">dbc</argument>, <argument pos:start="239:25" pos:end="239:28"><literal type="number" pos:start="239:25" pos:end="239:28">0x24</literal></argument>)</argument_list></macro>

    <macro pos:start="241:5" pos:end="241:30"><name pos:start="241:5" pos:end="241:18">CASE_SET_REG32</name><argument_list pos:start="241:19" pos:end="241:30">(<argument pos:start="241:20" pos:end="241:23">dnad</argument>, <argument pos:start="241:26" pos:end="241:29"><literal type="number" pos:start="241:26" pos:end="241:29">0x28</literal></argument>)</argument_list></macro>

    <case pos:start="243:5" pos:end="243:14">case <expr pos:start="243:10" pos:end="243:13"><literal type="number" pos:start="243:10" pos:end="243:13">0x2c</literal></expr>:</case> <comment type="block" pos:start="243:16" pos:end="243:29">/* DSP[0:7] */</comment>

        <expr_stmt pos:start="245:9" pos:end="245:29"><expr pos:start="245:9" pos:end="245:28"><name pos:start="245:9" pos:end="245:14"><name pos:start="245:9" pos:end="245:9">s</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:14">dsp</name></name> <operator pos:start="245:16" pos:end="245:17">&amp;=</operator> <literal type="number" pos:start="245:19" pos:end="245:28">0xffffff00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:22"><expr pos:start="247:9" pos:end="247:21"><name pos:start="247:9" pos:end="247:14"><name pos:start="247:9" pos:end="247:9">s</name><operator pos:start="247:10" pos:end="247:11">-&gt;</operator><name pos:start="247:12" pos:end="247:14">dsp</name></name> <operator pos:start="247:16" pos:end="247:17">|=</operator> <name pos:start="247:19" pos:end="247:21">val</name></expr>;</expr_stmt>

        <break pos:start="249:9" pos:end="249:14">break;</break>

    <case pos:start="251:5" pos:end="251:14">case <expr pos:start="251:10" pos:end="251:13"><literal type="number" pos:start="251:10" pos:end="251:13">0x2d</literal></expr>:</case> <comment type="block" pos:start="251:16" pos:end="251:30">/* DSP[8:15] */</comment>

        <expr_stmt pos:start="253:9" pos:end="253:29"><expr pos:start="253:9" pos:end="253:28"><name pos:start="253:9" pos:end="253:14"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:14">dsp</name></name> <operator pos:start="253:16" pos:end="253:17">&amp;=</operator> <literal type="number" pos:start="253:19" pos:end="253:28">0xffff00ff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:27"><expr pos:start="255:9" pos:end="255:26"><name pos:start="255:9" pos:end="255:14"><name pos:start="255:9" pos:end="255:9">s</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:14">dsp</name></name> <operator pos:start="255:16" pos:end="255:17">|=</operator> <name pos:start="255:19" pos:end="255:21">val</name> <operator pos:start="255:23" pos:end="255:24">&lt;&lt;</operator> <literal type="number" pos:start="255:26" pos:end="255:26">8</literal></expr>;</expr_stmt>

        <break pos:start="257:9" pos:end="257:14">break;</break>

    <case pos:start="259:5" pos:end="259:14">case <expr pos:start="259:10" pos:end="259:13"><literal type="number" pos:start="259:10" pos:end="259:13">0x2e</literal></expr>:</case> <comment type="block" pos:start="259:16" pos:end="259:31">/* DSP[16:23] */</comment>

        <expr_stmt pos:start="261:9" pos:end="261:29"><expr pos:start="261:9" pos:end="261:28"><name pos:start="261:9" pos:end="261:14"><name pos:start="261:9" pos:end="261:9">s</name><operator pos:start="261:10" pos:end="261:11">-&gt;</operator><name pos:start="261:12" pos:end="261:14">dsp</name></name> <operator pos:start="261:16" pos:end="261:17">&amp;=</operator> <literal type="number" pos:start="261:19" pos:end="261:28">0xff00ffff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:28"><expr pos:start="263:9" pos:end="263:27"><name pos:start="263:9" pos:end="263:14"><name pos:start="263:9" pos:end="263:9">s</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:14">dsp</name></name> <operator pos:start="263:16" pos:end="263:17">|=</operator> <name pos:start="263:19" pos:end="263:21">val</name> <operator pos:start="263:23" pos:end="263:24">&lt;&lt;</operator> <literal type="number" pos:start="263:26" pos:end="263:27">16</literal></expr>;</expr_stmt>

        <break pos:start="265:9" pos:end="265:14">break;</break>

    <case pos:start="267:5" pos:end="267:14">case <expr pos:start="267:10" pos:end="267:13"><literal type="number" pos:start="267:10" pos:end="267:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="267:16" pos:end="267:31">/* DSP[24:31] */</comment>

        <expr_stmt pos:start="269:9" pos:end="269:29"><expr pos:start="269:9" pos:end="269:28"><name pos:start="269:9" pos:end="269:14"><name pos:start="269:9" pos:end="269:9">s</name><operator pos:start="269:10" pos:end="269:11">-&gt;</operator><name pos:start="269:12" pos:end="269:14">dsp</name></name> <operator pos:start="269:16" pos:end="269:17">&amp;=</operator> <literal type="number" pos:start="269:19" pos:end="269:28">0x00ffffff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:28"><expr pos:start="271:9" pos:end="271:27"><name pos:start="271:9" pos:end="271:14"><name pos:start="271:9" pos:end="271:9">s</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:14">dsp</name></name> <operator pos:start="271:16" pos:end="271:17">|=</operator> <name pos:start="271:19" pos:end="271:21">val</name> <operator pos:start="271:23" pos:end="271:24">&lt;&lt;</operator> <literal type="number" pos:start="271:26" pos:end="271:27">24</literal></expr>;</expr_stmt>

        <if_stmt pos:start="273:9" pos:end="277:34"><if pos:start="273:9" pos:end="277:34">if <condition pos:start="273:12" pos:end="275:50">(<expr pos:start="273:13" pos:end="275:49"><operator pos:start="273:13" pos:end="273:13">(</operator><name pos:start="273:14" pos:end="273:21"><name pos:start="273:14" pos:end="273:14">s</name><operator pos:start="273:15" pos:end="273:16">-&gt;</operator><name pos:start="273:17" pos:end="273:21">dmode</name></name> <operator pos:start="273:23" pos:end="273:23">&amp;</operator> <name pos:start="273:25" pos:end="273:37">LSI_DMODE_MAN</name><operator pos:start="273:38" pos:end="273:38">)</operator> <operator pos:start="273:40" pos:end="273:41">==</operator> <literal type="number" pos:start="273:43" pos:end="273:43">0</literal>

            <operator pos:start="275:13" pos:end="275:14">&amp;&amp;</operator> <operator pos:start="275:16" pos:end="275:16">(</operator><name pos:start="275:17" pos:end="275:25"><name pos:start="275:17" pos:end="275:17">s</name><operator pos:start="275:18" pos:end="275:19">-&gt;</operator><name pos:start="275:20" pos:end="275:25">istat1</name></name> <operator pos:start="275:27" pos:end="275:27">&amp;</operator> <name pos:start="275:29" pos:end="275:43">LSI_ISTAT1_SRUN</name><operator pos:start="275:44" pos:end="275:44">)</operator> <operator pos:start="275:46" pos:end="275:47">==</operator> <literal type="number" pos:start="275:49" pos:end="275:49">0</literal></expr>)</condition><block type="pseudo" pos:start="277:13" pos:end="277:34"><block_content pos:start="277:13" pos:end="277:34">

            <expr_stmt pos:start="277:13" pos:end="277:34"><expr pos:start="277:13" pos:end="277:33"><call pos:start="277:13" pos:end="277:33"><name pos:start="277:13" pos:end="277:30">lsi_execute_script</name><argument_list pos:start="277:31" pos:end="277:33">(<argument pos:start="277:32" pos:end="277:32"><expr pos:start="277:32" pos:end="277:32"><name pos:start="277:32" pos:end="277:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    <macro pos:start="281:5" pos:end="281:30"><name pos:start="281:5" pos:end="281:18">CASE_SET_REG32</name><argument_list pos:start="281:19" pos:end="281:30">(<argument pos:start="281:20" pos:end="281:23">dsps</argument>, <argument pos:start="281:26" pos:end="281:29"><literal type="number" pos:start="281:26" pos:end="281:29">0x30</literal></argument>)</argument_list></macro>

    <macro pos:start="283:5" pos:end="283:36"><name pos:start="283:5" pos:end="283:18">CASE_SET_REG32</name><argument_list pos:start="283:19" pos:end="283:36">(<argument pos:start="283:20" pos:end="283:29">scratch[<literal type="number" pos:start="283:28" pos:end="283:28">0</literal>]</argument>, <argument pos:start="283:32" pos:end="283:35"><literal type="number" pos:start="283:32" pos:end="283:35">0x34</literal></argument>)</argument_list></macro>

    <case pos:start="285:5" pos:end="285:14">case <expr pos:start="285:10" pos:end="285:13"><literal type="number" pos:start="285:10" pos:end="285:13">0x38</literal></expr>:</case> <comment type="block" pos:start="285:16" pos:end="285:26">/* DMODE */</comment>

        <if_stmt pos:start="287:9" pos:end="291:9"><if pos:start="287:9" pos:end="291:9">if <condition pos:start="287:12" pos:end="287:52">(<expr pos:start="287:13" pos:end="287:51"><name pos:start="287:13" pos:end="287:15">val</name> <operator pos:start="287:17" pos:end="287:17">&amp;</operator> <operator pos:start="287:19" pos:end="287:19">(</operator><name pos:start="287:20" pos:end="287:33">LSI_DMODE_SIOM</name> <operator pos:start="287:35" pos:end="287:35">|</operator> <name pos:start="287:37" pos:end="287:50">LSI_DMODE_DIOM</name><operator pos:start="287:51" pos:end="287:51">)</operator></expr>)</condition> <block pos:start="287:54" pos:end="291:9">{<block_content pos:start="289:13" pos:end="289:50">

            <expr_stmt pos:start="289:13" pos:end="289:50"><expr pos:start="289:13" pos:end="289:49"><call pos:start="289:13" pos:end="289:49"><name pos:start="289:13" pos:end="289:16">BADF</name><argument_list pos:start="289:17" pos:end="289:49">(<argument pos:start="289:18" pos:end="289:48"><expr pos:start="289:18" pos:end="289:48"><literal type="string" pos:start="289:18" pos:end="289:48">"IO mappings not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:23"><expr pos:start="293:9" pos:end="293:22"><name pos:start="293:9" pos:end="293:16"><name pos:start="293:9" pos:end="293:9">s</name><operator pos:start="293:10" pos:end="293:11">-&gt;</operator><name pos:start="293:12" pos:end="293:16">dmode</name></name> <operator pos:start="293:18" pos:end="293:18">=</operator> <name pos:start="293:20" pos:end="293:22">val</name></expr>;</expr_stmt>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    <case pos:start="297:5" pos:end="297:14">case <expr pos:start="297:10" pos:end="297:13"><literal type="number" pos:start="297:10" pos:end="297:13">0x39</literal></expr>:</case> <comment type="block" pos:start="297:16" pos:end="297:25">/* DIEN */</comment>

        <expr_stmt pos:start="299:9" pos:end="299:22"><expr pos:start="299:9" pos:end="299:21"><name pos:start="299:9" pos:end="299:15"><name pos:start="299:9" pos:end="299:9">s</name><operator pos:start="299:10" pos:end="299:11">-&gt;</operator><name pos:start="299:12" pos:end="299:15">dien</name></name> <operator pos:start="299:17" pos:end="299:17">=</operator> <name pos:start="299:19" pos:end="299:21">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:26"><expr pos:start="301:9" pos:end="301:25"><call pos:start="301:9" pos:end="301:25"><name pos:start="301:9" pos:end="301:22">lsi_update_irq</name><argument_list pos:start="301:23" pos:end="301:25">(<argument pos:start="301:24" pos:end="301:24"><expr pos:start="301:24" pos:end="301:24"><name pos:start="301:24" pos:end="301:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="303:9" pos:end="303:14">break;</break>

    <case pos:start="305:5" pos:end="305:14">case <expr pos:start="305:10" pos:end="305:13"><literal type="number" pos:start="305:10" pos:end="305:13">0x3a</literal></expr>:</case> <comment type="block" pos:start="305:16" pos:end="305:24">/* SBR */</comment>

        <expr_stmt pos:start="307:9" pos:end="307:21"><expr pos:start="307:9" pos:end="307:20"><name pos:start="307:9" pos:end="307:14"><name pos:start="307:9" pos:end="307:9">s</name><operator pos:start="307:10" pos:end="307:11">-&gt;</operator><name pos:start="307:12" pos:end="307:14">sbr</name></name> <operator pos:start="307:16" pos:end="307:16">=</operator> <name pos:start="307:18" pos:end="307:20">val</name></expr>;</expr_stmt>

        <break pos:start="309:9" pos:end="309:14">break;</break>

    <case pos:start="311:5" pos:end="311:14">case <expr pos:start="311:10" pos:end="311:13"><literal type="number" pos:start="311:10" pos:end="311:13">0x3b</literal></expr>:</case> <comment type="block" pos:start="311:16" pos:end="311:26">/* DCNTL */</comment>

        <expr_stmt pos:start="313:9" pos:end="313:58"><expr pos:start="313:9" pos:end="313:57"><name pos:start="313:9" pos:end="313:16"><name pos:start="313:9" pos:end="313:9">s</name><operator pos:start="313:10" pos:end="313:11">-&gt;</operator><name pos:start="313:12" pos:end="313:16">dcntl</name></name> <operator pos:start="313:18" pos:end="313:18">=</operator> <name pos:start="313:20" pos:end="313:22">val</name> <operator pos:start="313:24" pos:end="313:24">&amp;</operator> <operator pos:start="313:26" pos:end="313:26">~</operator><operator pos:start="313:27" pos:end="313:27">(</operator><name pos:start="313:28" pos:end="313:40">LSI_DCNTL_PFF</name> <operator pos:start="313:42" pos:end="313:42">|</operator> <name pos:start="313:44" pos:end="313:56">LSI_DCNTL_STD</name><operator pos:start="313:57" pos:end="313:57">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="315:9" pos:end="317:34"><if pos:start="315:9" pos:end="317:34">if <condition pos:start="315:12" pos:end="315:72">(<expr pos:start="315:13" pos:end="315:71"><operator pos:start="315:13" pos:end="315:13">(</operator><name pos:start="315:14" pos:end="315:16">val</name> <operator pos:start="315:18" pos:end="315:18">&amp;</operator> <name pos:start="315:20" pos:end="315:32">LSI_DCNTL_STD</name><operator pos:start="315:33" pos:end="315:33">)</operator> <operator pos:start="315:35" pos:end="315:36">&amp;&amp;</operator> <operator pos:start="315:38" pos:end="315:38">(</operator><name pos:start="315:39" pos:end="315:47"><name pos:start="315:39" pos:end="315:39">s</name><operator pos:start="315:40" pos:end="315:41">-&gt;</operator><name pos:start="315:42" pos:end="315:47">istat1</name></name> <operator pos:start="315:49" pos:end="315:49">&amp;</operator> <name pos:start="315:51" pos:end="315:65">LSI_ISTAT1_SRUN</name><operator pos:start="315:66" pos:end="315:66">)</operator> <operator pos:start="315:68" pos:end="315:69">==</operator> <literal type="number" pos:start="315:71" pos:end="315:71">0</literal></expr>)</condition><block type="pseudo" pos:start="317:13" pos:end="317:34"><block_content pos:start="317:13" pos:end="317:34">

            <expr_stmt pos:start="317:13" pos:end="317:34"><expr pos:start="317:13" pos:end="317:33"><call pos:start="317:13" pos:end="317:33"><name pos:start="317:13" pos:end="317:30">lsi_execute_script</name><argument_list pos:start="317:31" pos:end="317:33">(<argument pos:start="317:32" pos:end="317:32"><expr pos:start="317:32" pos:end="317:32"><name pos:start="317:32" pos:end="317:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="319:9" pos:end="319:14">break;</break>

    <case pos:start="321:5" pos:end="321:14">case <expr pos:start="321:10" pos:end="321:13"><literal type="number" pos:start="321:10" pos:end="321:13">0x40</literal></expr>:</case> <comment type="block" pos:start="321:16" pos:end="321:26">/* SIEN0 */</comment>

        <expr_stmt pos:start="323:9" pos:end="323:23"><expr pos:start="323:9" pos:end="323:22"><name pos:start="323:9" pos:end="323:16"><name pos:start="323:9" pos:end="323:9">s</name><operator pos:start="323:10" pos:end="323:11">-&gt;</operator><name pos:start="323:12" pos:end="323:16">sien0</name></name> <operator pos:start="323:18" pos:end="323:18">=</operator> <name pos:start="323:20" pos:end="323:22">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:26"><expr pos:start="325:9" pos:end="325:25"><call pos:start="325:9" pos:end="325:25"><name pos:start="325:9" pos:end="325:22">lsi_update_irq</name><argument_list pos:start="325:23" pos:end="325:25">(<argument pos:start="325:24" pos:end="325:24"><expr pos:start="325:24" pos:end="325:24"><name pos:start="325:24" pos:end="325:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="327:9" pos:end="327:14">break;</break>

    <case pos:start="329:5" pos:end="329:14">case <expr pos:start="329:10" pos:end="329:13"><literal type="number" pos:start="329:10" pos:end="329:13">0x41</literal></expr>:</case> <comment type="block" pos:start="329:16" pos:end="329:26">/* SIEN1 */</comment>

        <expr_stmt pos:start="331:9" pos:end="331:23"><expr pos:start="331:9" pos:end="331:22"><name pos:start="331:9" pos:end="331:16"><name pos:start="331:9" pos:end="331:9">s</name><operator pos:start="331:10" pos:end="331:11">-&gt;</operator><name pos:start="331:12" pos:end="331:16">sien1</name></name> <operator pos:start="331:18" pos:end="331:18">=</operator> <name pos:start="331:20" pos:end="331:22">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:26"><expr pos:start="333:9" pos:end="333:25"><call pos:start="333:9" pos:end="333:25"><name pos:start="333:9" pos:end="333:22">lsi_update_irq</name><argument_list pos:start="333:23" pos:end="333:25">(<argument pos:start="333:24" pos:end="333:24"><expr pos:start="333:24" pos:end="333:24"><name pos:start="333:24" pos:end="333:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="335:9" pos:end="335:14">break;</break>

    <case pos:start="337:5" pos:end="337:14">case <expr pos:start="337:10" pos:end="337:13"><literal type="number" pos:start="337:10" pos:end="337:13">0x47</literal></expr>:</case> <comment type="block" pos:start="337:16" pos:end="337:28">/* GPCNTL0 */</comment>

        <break pos:start="339:9" pos:end="339:14">break;</break>

    <case pos:start="341:5" pos:end="341:14">case <expr pos:start="341:10" pos:end="341:13"><literal type="number" pos:start="341:10" pos:end="341:13">0x48</literal></expr>:</case> <comment type="block" pos:start="341:16" pos:end="341:27">/* STIME0 */</comment>

        <expr_stmt pos:start="343:9" pos:end="343:24"><expr pos:start="343:9" pos:end="343:23"><name pos:start="343:9" pos:end="343:17"><name pos:start="343:9" pos:end="343:9">s</name><operator pos:start="343:10" pos:end="343:11">-&gt;</operator><name pos:start="343:12" pos:end="343:17">stime0</name></name> <operator pos:start="343:19" pos:end="343:19">=</operator> <name pos:start="343:21" pos:end="343:23">val</name></expr>;</expr_stmt>

        <break pos:start="345:9" pos:end="345:14">break;</break>

    <case pos:start="347:5" pos:end="347:14">case <expr pos:start="347:10" pos:end="347:13"><literal type="number" pos:start="347:10" pos:end="347:13">0x49</literal></expr>:</case> <comment type="block" pos:start="347:16" pos:end="347:27">/* STIME1 */</comment>

        <if_stmt pos:start="349:9" pos:end="359:9"><if pos:start="349:9" pos:end="359:9">if <condition pos:start="349:12" pos:end="349:22">(<expr pos:start="349:13" pos:end="349:21"><name pos:start="349:13" pos:end="349:15">val</name> <operator pos:start="349:17" pos:end="349:17">&amp;</operator> <literal type="number" pos:start="349:19" pos:end="349:21">0xf</literal></expr>)</condition> <block pos:start="349:24" pos:end="359:9">{<block_content pos:start="351:13" pos:end="357:59">

            <expr_stmt pos:start="351:13" pos:end="351:63"><expr pos:start="351:13" pos:end="351:62"><call pos:start="351:13" pos:end="351:62"><name pos:start="351:13" pos:end="351:19">DPRINTF</name><argument_list pos:start="351:20" pos:end="351:62">(<argument pos:start="351:21" pos:end="351:61"><expr pos:start="351:21" pos:end="351:61"><literal type="string" pos:start="351:21" pos:end="351:61">"General purpose timer not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="353:13" pos:end="355:52">/* ??? Raising the interrupt immediately seems to be sufficient

               to keep the FreeBSD driver happy.  */</comment>

            <expr_stmt pos:start="357:13" pos:end="357:59"><expr pos:start="357:13" pos:end="357:58"><call pos:start="357:13" pos:end="357:58"><name pos:start="357:13" pos:end="357:37">lsi_script_scsi_interrupt</name><argument_list pos:start="357:38" pos:end="357:58">(<argument pos:start="357:39" pos:end="357:39"><expr pos:start="357:39" pos:end="357:39"><name pos:start="357:39" pos:end="357:39">s</name></expr></argument>, <argument pos:start="357:42" pos:end="357:42"><expr pos:start="357:42" pos:end="357:42"><literal type="number" pos:start="357:42" pos:end="357:42">0</literal></expr></argument>, <argument pos:start="357:45" pos:end="357:57"><expr pos:start="357:45" pos:end="357:57"><name pos:start="357:45" pos:end="357:57">LSI_SIST1_GEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="361:9" pos:end="361:14">break;</break>

    <case pos:start="363:5" pos:end="363:14">case <expr pos:start="363:10" pos:end="363:13"><literal type="number" pos:start="363:10" pos:end="363:13">0x4a</literal></expr>:</case> <comment type="block" pos:start="363:16" pos:end="363:28">/* RESPID0 */</comment>

        <expr_stmt pos:start="365:9" pos:end="365:25"><expr pos:start="365:9" pos:end="365:24"><name pos:start="365:9" pos:end="365:18"><name pos:start="365:9" pos:end="365:9">s</name><operator pos:start="365:10" pos:end="365:11">-&gt;</operator><name pos:start="365:12" pos:end="365:18">respid0</name></name> <operator pos:start="365:20" pos:end="365:20">=</operator> <name pos:start="365:22" pos:end="365:24">val</name></expr>;</expr_stmt>

        <break pos:start="367:9" pos:end="367:14">break;</break>

    <case pos:start="369:5" pos:end="369:14">case <expr pos:start="369:10" pos:end="369:13"><literal type="number" pos:start="369:10" pos:end="369:13">0x4b</literal></expr>:</case> <comment type="block" pos:start="369:16" pos:end="369:28">/* RESPID1 */</comment>

        <expr_stmt pos:start="371:9" pos:end="371:25"><expr pos:start="371:9" pos:end="371:24"><name pos:start="371:9" pos:end="371:18"><name pos:start="371:9" pos:end="371:9">s</name><operator pos:start="371:10" pos:end="371:11">-&gt;</operator><name pos:start="371:12" pos:end="371:18">respid1</name></name> <operator pos:start="371:20" pos:end="371:20">=</operator> <name pos:start="371:22" pos:end="371:24">val</name></expr>;</expr_stmt>

        <break pos:start="373:9" pos:end="373:14">break;</break>

    <case pos:start="375:5" pos:end="375:14">case <expr pos:start="375:10" pos:end="375:13"><literal type="number" pos:start="375:10" pos:end="375:13">0x4d</literal></expr>:</case> <comment type="block" pos:start="375:16" pos:end="375:27">/* STEST1 */</comment>

        <expr_stmt pos:start="377:9" pos:end="377:24"><expr pos:start="377:9" pos:end="377:23"><name pos:start="377:9" pos:end="377:17"><name pos:start="377:9" pos:end="377:9">s</name><operator pos:start="377:10" pos:end="377:11">-&gt;</operator><name pos:start="377:12" pos:end="377:17">stest1</name></name> <operator pos:start="377:19" pos:end="377:19">=</operator> <name pos:start="377:21" pos:end="377:23">val</name></expr>;</expr_stmt>

        <break pos:start="379:9" pos:end="379:14">break;</break>

    <case pos:start="381:5" pos:end="381:14">case <expr pos:start="381:10" pos:end="381:13"><literal type="number" pos:start="381:10" pos:end="381:13">0x4e</literal></expr>:</case> <comment type="block" pos:start="381:16" pos:end="381:27">/* STEST2 */</comment>

        <if_stmt pos:start="383:9" pos:end="387:9"><if pos:start="383:9" pos:end="387:9">if <condition pos:start="383:12" pos:end="383:20">(<expr pos:start="383:13" pos:end="383:19"><name pos:start="383:13" pos:end="383:15">val</name> <operator pos:start="383:17" pos:end="383:17">&amp;</operator> <literal type="number" pos:start="383:19" pos:end="383:19">1</literal></expr>)</condition> <block pos:start="383:22" pos:end="387:9">{<block_content pos:start="385:13" pos:end="385:53">

            <expr_stmt pos:start="385:13" pos:end="385:53"><expr pos:start="385:13" pos:end="385:52"><call pos:start="385:13" pos:end="385:52"><name pos:start="385:13" pos:end="385:16">BADF</name><argument_list pos:start="385:17" pos:end="385:52">(<argument pos:start="385:18" pos:end="385:51"><expr pos:start="385:18" pos:end="385:51"><literal type="string" pos:start="385:18" pos:end="385:51">"Low level mode not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:24"><expr pos:start="389:9" pos:end="389:23"><name pos:start="389:9" pos:end="389:17"><name pos:start="389:9" pos:end="389:9">s</name><operator pos:start="389:10" pos:end="389:11">-&gt;</operator><name pos:start="389:12" pos:end="389:17">stest2</name></name> <operator pos:start="389:19" pos:end="389:19">=</operator> <name pos:start="389:21" pos:end="389:23">val</name></expr>;</expr_stmt>

        <break pos:start="391:9" pos:end="391:14">break;</break>

    <case pos:start="393:5" pos:end="393:14">case <expr pos:start="393:10" pos:end="393:13"><literal type="number" pos:start="393:10" pos:end="393:13">0x4f</literal></expr>:</case> <comment type="block" pos:start="393:16" pos:end="393:27">/* STEST3 */</comment>

        <if_stmt pos:start="395:9" pos:end="399:9"><if pos:start="395:9" pos:end="399:9">if <condition pos:start="395:12" pos:end="395:23">(<expr pos:start="395:13" pos:end="395:22"><name pos:start="395:13" pos:end="395:15">val</name> <operator pos:start="395:17" pos:end="395:17">&amp;</operator> <literal type="number" pos:start="395:19" pos:end="395:22">0x41</literal></expr>)</condition> <block pos:start="395:25" pos:end="399:9">{<block_content pos:start="397:13" pos:end="397:58">

            <expr_stmt pos:start="397:13" pos:end="397:58"><expr pos:start="397:13" pos:end="397:57"><call pos:start="397:13" pos:end="397:57"><name pos:start="397:13" pos:end="397:16">BADF</name><argument_list pos:start="397:17" pos:end="397:57">(<argument pos:start="397:18" pos:end="397:56"><expr pos:start="397:18" pos:end="397:56"><literal type="string" pos:start="397:18" pos:end="397:56">"SCSI FIFO test mode not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:24"><expr pos:start="401:9" pos:end="401:23"><name pos:start="401:9" pos:end="401:17"><name pos:start="401:9" pos:end="401:9">s</name><operator pos:start="401:10" pos:end="401:11">-&gt;</operator><name pos:start="401:12" pos:end="401:17">stest3</name></name> <operator pos:start="401:19" pos:end="401:19">=</operator> <name pos:start="401:21" pos:end="401:23">val</name></expr>;</expr_stmt>

        <break pos:start="403:9" pos:end="403:14">break;</break>

    <case pos:start="405:5" pos:end="405:14">case <expr pos:start="405:10" pos:end="405:13"><literal type="number" pos:start="405:10" pos:end="405:13">0x56</literal></expr>:</case> <comment type="block" pos:start="405:16" pos:end="405:27">/* CCNTL0 */</comment>

        <expr_stmt pos:start="407:9" pos:end="407:24"><expr pos:start="407:9" pos:end="407:23"><name pos:start="407:9" pos:end="407:17"><name pos:start="407:9" pos:end="407:9">s</name><operator pos:start="407:10" pos:end="407:11">-&gt;</operator><name pos:start="407:12" pos:end="407:17">ccntl0</name></name> <operator pos:start="407:19" pos:end="407:19">=</operator> <name pos:start="407:21" pos:end="407:23">val</name></expr>;</expr_stmt>

        <break pos:start="409:9" pos:end="409:14">break;</break>

    <case pos:start="411:5" pos:end="411:14">case <expr pos:start="411:10" pos:end="411:13"><literal type="number" pos:start="411:10" pos:end="411:13">0x57</literal></expr>:</case> <comment type="block" pos:start="411:16" pos:end="411:27">/* CCNTL1 */</comment>

        <expr_stmt pos:start="413:9" pos:end="413:24"><expr pos:start="413:9" pos:end="413:23"><name pos:start="413:9" pos:end="413:17"><name pos:start="413:9" pos:end="413:9">s</name><operator pos:start="413:10" pos:end="413:11">-&gt;</operator><name pos:start="413:12" pos:end="413:17">ccntl1</name></name> <operator pos:start="413:19" pos:end="413:19">=</operator> <name pos:start="413:21" pos:end="413:23">val</name></expr>;</expr_stmt>

        <break pos:start="415:9" pos:end="415:14">break;</break>

    <macro pos:start="417:5" pos:end="417:30"><name pos:start="417:5" pos:end="417:18">CASE_SET_REG32</name><argument_list pos:start="417:19" pos:end="417:30">(<argument pos:start="417:20" pos:end="417:23">mmrs</argument>, <argument pos:start="417:26" pos:end="417:29"><literal type="number" pos:start="417:26" pos:end="417:29">0xa0</literal></argument>)</argument_list></macro>

    <macro pos:start="419:5" pos:end="419:30"><name pos:start="419:5" pos:end="419:18">CASE_SET_REG32</name><argument_list pos:start="419:19" pos:end="419:30">(<argument pos:start="419:20" pos:end="419:23">mmws</argument>, <argument pos:start="419:26" pos:end="419:29"><literal type="number" pos:start="419:26" pos:end="419:29">0xa4</literal></argument>)</argument_list></macro>

    <macro pos:start="421:5" pos:end="421:29"><name pos:start="421:5" pos:end="421:18">CASE_SET_REG32</name><argument_list pos:start="421:19" pos:end="421:29">(<argument pos:start="421:20" pos:end="421:22">sfs</argument>, <argument pos:start="421:25" pos:end="421:28"><literal type="number" pos:start="421:25" pos:end="421:28">0xa8</literal></argument>)</argument_list></macro>

    <macro pos:start="423:5" pos:end="423:29"><name pos:start="423:5" pos:end="423:18">CASE_SET_REG32</name><argument_list pos:start="423:19" pos:end="423:29">(<argument pos:start="423:20" pos:end="423:22">drs</argument>, <argument pos:start="423:25" pos:end="423:28"><literal type="number" pos:start="423:25" pos:end="423:28">0xac</literal></argument>)</argument_list></macro>

    <macro pos:start="425:5" pos:end="425:30"><name pos:start="425:5" pos:end="425:18">CASE_SET_REG32</name><argument_list pos:start="425:19" pos:end="425:30">(<argument pos:start="425:20" pos:end="425:23">sbms</argument>, <argument pos:start="425:26" pos:end="425:29"><literal type="number" pos:start="425:26" pos:end="425:29">0xb0</literal></argument>)</argument_list></macro>

    <macro pos:start="427:5" pos:end="427:30"><name pos:start="427:5" pos:end="427:18">CASE_SET_REG32</name><argument_list pos:start="427:19" pos:end="427:30">(<argument pos:start="427:20" pos:end="427:23">dbms</argument>, <argument pos:start="427:26" pos:end="427:29"><literal type="number" pos:start="427:26" pos:end="427:29">0xb4</literal></argument>)</argument_list></macro>

    <macro pos:start="429:5" pos:end="429:32"><name pos:start="429:5" pos:end="429:18">CASE_SET_REG32</name><argument_list pos:start="429:19" pos:end="429:32">(<argument pos:start="429:20" pos:end="429:25">dnad64</argument>, <argument pos:start="429:28" pos:end="429:31"><literal type="number" pos:start="429:28" pos:end="429:31">0xb8</literal></argument>)</argument_list></macro>

    <macro pos:start="431:5" pos:end="431:32"><name pos:start="431:5" pos:end="431:18">CASE_SET_REG32</name><argument_list pos:start="431:19" pos:end="431:32">(<argument pos:start="431:20" pos:end="431:25">pmjad1</argument>, <argument pos:start="431:28" pos:end="431:31"><literal type="number" pos:start="431:28" pos:end="431:31">0xc0</literal></argument>)</argument_list></macro>

    <macro pos:start="433:5" pos:end="433:32"><name pos:start="433:5" pos:end="433:18">CASE_SET_REG32</name><argument_list pos:start="433:19" pos:end="433:32">(<argument pos:start="433:20" pos:end="433:25">pmjad2</argument>, <argument pos:start="433:28" pos:end="433:31"><literal type="number" pos:start="433:28" pos:end="433:31">0xc4</literal></argument>)</argument_list></macro>

    <macro pos:start="435:5" pos:end="435:29"><name pos:start="435:5" pos:end="435:18">CASE_SET_REG32</name><argument_list pos:start="435:19" pos:end="435:29">(<argument pos:start="435:20" pos:end="435:22">rbc</argument>, <argument pos:start="435:25" pos:end="435:28"><literal type="number" pos:start="435:25" pos:end="435:28">0xc8</literal></argument>)</argument_list></macro>

    <macro pos:start="437:5" pos:end="437:28"><name pos:start="437:5" pos:end="437:18">CASE_SET_REG32</name><argument_list pos:start="437:19" pos:end="437:28">(<argument pos:start="437:20" pos:end="437:21">ua</argument>, <argument pos:start="437:24" pos:end="437:27"><literal type="number" pos:start="437:24" pos:end="437:27">0xcc</literal></argument>)</argument_list></macro>

    <macro pos:start="439:5" pos:end="439:28"><name pos:start="439:5" pos:end="439:18">CASE_SET_REG32</name><argument_list pos:start="439:19" pos:end="439:28">(<argument pos:start="439:20" pos:end="439:21">ia</argument>, <argument pos:start="439:24" pos:end="439:27"><literal type="number" pos:start="439:24" pos:end="439:27">0xd4</literal></argument>)</argument_list></macro>

    <macro pos:start="441:5" pos:end="441:29"><name pos:start="441:5" pos:end="441:18">CASE_SET_REG32</name><argument_list pos:start="441:19" pos:end="441:29">(<argument pos:start="441:20" pos:end="441:22">sbc</argument>, <argument pos:start="441:25" pos:end="441:28"><literal type="number" pos:start="441:25" pos:end="441:28">0xd8</literal></argument>)</argument_list></macro>

    <macro pos:start="443:5" pos:end="443:30"><name pos:start="443:5" pos:end="443:18">CASE_SET_REG32</name><argument_list pos:start="443:19" pos:end="443:30">(<argument pos:start="443:20" pos:end="443:23">csbc</argument>, <argument pos:start="443:26" pos:end="443:29"><literal type="number" pos:start="443:26" pos:end="443:29">0xdc</literal></argument>)</argument_list></macro>

    <default pos:start="445:5" pos:end="445:12">default:</default>

        <if_stmt pos:start="447:9" pos:end="465:9"><if pos:start="447:9" pos:end="461:9">if <condition pos:start="447:12" pos:end="447:44">(<expr pos:start="447:13" pos:end="447:43"><name pos:start="447:13" pos:end="447:18">offset</name> <operator pos:start="447:20" pos:end="447:21">&gt;=</operator> <literal type="number" pos:start="447:23" pos:end="447:26">0x5c</literal> <operator pos:start="447:28" pos:end="447:29">&amp;&amp;</operator> <name pos:start="447:31" pos:end="447:36">offset</name> <operator pos:start="447:38" pos:end="447:38">&lt;</operator> <literal type="number" pos:start="447:40" pos:end="447:43">0xa0</literal></expr>)</condition> <block pos:start="447:46" pos:end="461:9">{<block_content pos:start="449:13" pos:end="459:51">

            <decl_stmt pos:start="449:13" pos:end="449:18"><decl pos:start="449:13" pos:end="449:17"><type pos:start="449:13" pos:end="449:15"><name pos:start="449:13" pos:end="449:15">int</name></type> <name pos:start="449:17" pos:end="449:17">n</name></decl>;</decl_stmt>

            <decl_stmt pos:start="451:13" pos:end="451:22"><decl pos:start="451:13" pos:end="451:21"><type pos:start="451:13" pos:end="451:15"><name pos:start="451:13" pos:end="451:15">int</name></type> <name pos:start="451:17" pos:end="451:21">shift</name></decl>;</decl_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:37"><expr pos:start="453:13" pos:end="453:36"><name pos:start="453:13" pos:end="453:13">n</name> <operator pos:start="453:15" pos:end="453:15">=</operator> <operator pos:start="453:17" pos:end="453:17">(</operator><name pos:start="453:18" pos:end="453:23">offset</name> <operator pos:start="453:25" pos:end="453:25">-</operator> <literal type="number" pos:start="453:27" pos:end="453:30">0x58</literal><operator pos:start="453:31" pos:end="453:31">)</operator> <operator pos:start="453:33" pos:end="453:34">&gt;&gt;</operator> <literal type="number" pos:start="453:36" pos:end="453:36">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:37"><expr pos:start="455:13" pos:end="455:36"><name pos:start="455:13" pos:end="455:17">shift</name> <operator pos:start="455:19" pos:end="455:19">=</operator> <operator pos:start="455:21" pos:end="455:21">(</operator><name pos:start="455:22" pos:end="455:27">offset</name> <operator pos:start="455:29" pos:end="455:29">&amp;</operator> <literal type="number" pos:start="455:31" pos:end="455:31">3</literal><operator pos:start="455:32" pos:end="455:32">)</operator> <operator pos:start="455:34" pos:end="455:34">*</operator> <literal type="number" pos:start="455:36" pos:end="455:36">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:46"><expr pos:start="457:13" pos:end="457:45"><name pos:start="457:13" pos:end="457:25"><name pos:start="457:13" pos:end="457:13">s</name><operator pos:start="457:14" pos:end="457:15">-&gt;</operator><name pos:start="457:16" pos:end="457:22">scratch</name><index pos:start="457:23" pos:end="457:25">[<expr pos:start="457:24" pos:end="457:24"><name pos:start="457:24" pos:end="457:24">n</name></expr>]</index></name> <operator pos:start="457:27" pos:end="457:28">&amp;=</operator> <operator pos:start="457:30" pos:end="457:30">~</operator><operator pos:start="457:31" pos:end="457:31">(</operator><literal type="number" pos:start="457:32" pos:end="457:35">0xff</literal> <operator pos:start="457:37" pos:end="457:38">&lt;&lt;</operator> <name pos:start="457:40" pos:end="457:44">shift</name><operator pos:start="457:45" pos:end="457:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:51"><expr pos:start="459:13" pos:end="459:50"><name pos:start="459:13" pos:end="459:25"><name pos:start="459:13" pos:end="459:13">s</name><operator pos:start="459:14" pos:end="459:15">-&gt;</operator><name pos:start="459:16" pos:end="459:22">scratch</name><index pos:start="459:23" pos:end="459:25">[<expr pos:start="459:24" pos:end="459:24"><name pos:start="459:24" pos:end="459:24">n</name></expr>]</index></name> <operator pos:start="459:27" pos:end="459:28">|=</operator> <operator pos:start="459:30" pos:end="459:30">(</operator><name pos:start="459:31" pos:end="459:33">val</name> <operator pos:start="459:35" pos:end="459:35">&amp;</operator> <literal type="number" pos:start="459:37" pos:end="459:40">0xff</literal><operator pos:start="459:41" pos:end="459:41">)</operator> <operator pos:start="459:43" pos:end="459:44">&lt;&lt;</operator> <name pos:start="459:46" pos:end="459:50">shift</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="461:11" pos:end="465:9">else <block pos:start="461:16" pos:end="465:9">{<block_content pos:start="463:13" pos:end="463:64">

            <expr_stmt pos:start="463:13" pos:end="463:64"><expr pos:start="463:13" pos:end="463:63"><call pos:start="463:13" pos:end="463:63"><name pos:start="463:13" pos:end="463:16">BADF</name><argument_list pos:start="463:17" pos:end="463:63">(<argument pos:start="463:18" pos:end="463:49"><expr pos:start="463:18" pos:end="463:49"><literal type="string" pos:start="463:18" pos:end="463:49">"Unhandled writeb 0x%x = 0x%x\n"</literal></expr></argument>, <argument pos:start="463:52" pos:end="463:57"><expr pos:start="463:52" pos:end="463:57"><name pos:start="463:52" pos:end="463:57">offset</name></expr></argument>, <argument pos:start="463:60" pos:end="463:62"><expr pos:start="463:60" pos:end="463:62"><name pos:start="463:60" pos:end="463:62">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></switch>

<cpp:undef pos:start="469:1" pos:end="469:21">#<cpp:directive pos:start="469:2" pos:end="469:6">undef</cpp:directive> <name pos:start="469:8" pos:end="469:21">CASE_SET_REG24</name></cpp:undef>

<cpp:undef pos:start="471:1" pos:end="471:21">#<cpp:directive pos:start="471:2" pos:end="471:6">undef</cpp:directive> <name pos:start="471:8" pos:end="471:21">CASE_SET_REG32</name></cpp:undef>

</block_content>}</block></function>
</unit>
