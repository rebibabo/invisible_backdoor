<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6574.c" pos:tabs="8"><function pos:start="1:1" pos:end="372:20"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vp3_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:55">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:40"><decl pos:start="5:29" pos:end="5:40"><type pos:start="5:29" pos:end="5:40"><name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="372:20">{<block_content pos:start="9:5" pos:end="372:20">

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">Vp3DecodeContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:23">s</name> <init pos:start="9:25" pos:end="9:42">= <expr pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:31">avctx</name><operator pos:start="9:32" pos:end="9:33">-&gt;</operator><name pos:start="9:34" pos:end="9:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">GetBitContext</name></type> <name pos:start="11:19" pos:end="11:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:14"><specifier pos:start="13:5" pos:end="13:10">static</specifier> <name pos:start="13:12" pos:end="13:14">int</name></type> <name pos:start="13:16" pos:end="13:22">counter</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><call pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:17">init_get_bits</name><argument_list pos:start="19:18" pos:end="19:41">(<argument pos:start="19:19" pos:end="19:21"><expr pos:start="19:19" pos:end="19:21"><operator pos:start="19:19" pos:end="19:19">&amp;</operator><name pos:start="19:20" pos:end="19:21">gb</name></expr></argument>, <argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">buf</name></expr></argument>, <argument pos:start="19:29" pos:end="19:40"><expr pos:start="19:29" pos:end="19:40"><name pos:start="19:29" pos:end="19:36">buf_size</name> <operator pos:start="19:38" pos:end="19:38">*</operator> <literal type="number" pos:start="19:40" pos:end="19:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="372:20"><if pos:start="23:5" pos:end="372:20">if <condition pos:start="23:8" pos:end="23:36">(<expr pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:17">theora</name></name> <operator pos:start="23:19" pos:end="23:20">&amp;&amp;</operator> <call pos:start="23:22" pos:end="23:35"><name pos:start="23:22" pos:end="23:30">get_bits1</name><argument_list pos:start="23:31" pos:end="23:35">(<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><operator pos:start="23:32" pos:end="23:32">&amp;</operator><name pos:start="23:33" pos:end="23:34">gb</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="25:5" pos:end="372:20">{<block_content pos:start="29:9" pos:end="372:20">

<cpp:if pos:start="27:1" pos:end="27:5">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:5"><literal type="number" pos:start="27:5" pos:end="27:5">1</literal></expr></cpp:if>

        <expr_stmt pos:start="29:9" pos:end="33:0"><expr pos:start="29:9" pos:end="29:88"><call pos:start="29:9" pos:end="29:88"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:88">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:87"><expr pos:start="29:37" pos:end="29:87"><literal type="string" pos:start="29:37" pos:end="29:87">"Header packet passed to frame decoder, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:else pos:start="32:1" pos:end="32:5">#<cpp:directive pos:start="32:2" pos:end="32:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="34:9" pos:end="34:37"><decl pos:start="34:9" pos:end="34:36"><type pos:start="34:9" pos:end="34:11"><name pos:start="34:9" pos:end="34:11">int</name></type> <name pos:start="34:13" pos:end="34:17">ptype</name> <init pos:start="34:19" pos:end="34:36">= <expr pos:start="34:21" pos:end="34:36"><call pos:start="34:21" pos:end="34:36"><name pos:start="34:21" pos:end="34:28">get_bits</name><argument_list pos:start="34:29" pos:end="34:36">(<argument pos:start="34:30" pos:end="34:32"><expr pos:start="34:30" pos:end="34:32"><operator pos:start="34:30" pos:end="34:30">&amp;</operator><name pos:start="34:31" pos:end="34:32">gb</name></expr></argument>, <argument pos:start="34:35" pos:end="34:35"><expr pos:start="34:35" pos:end="34:35"><literal type="number" pos:start="34:35" pos:end="34:35">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="38:9" pos:end="38:28"><expr pos:start="38:9" pos:end="38:27"><call pos:start="38:9" pos:end="38:27"><name pos:start="38:9" pos:end="38:17">skip_bits</name><argument_list pos:start="38:18" pos:end="38:27">(<argument pos:start="38:19" pos:end="38:21"><expr pos:start="38:19" pos:end="38:21"><operator pos:start="38:19" pos:end="38:19">&amp;</operator><name pos:start="38:20" pos:end="38:21">gb</name></expr></argument>, <argument pos:start="38:24" pos:end="38:26"><expr pos:start="38:24" pos:end="38:26"><literal type="number" pos:start="38:24" pos:end="38:24">6</literal><operator pos:start="38:25" pos:end="38:25">*</operator><literal type="number" pos:start="38:26" pos:end="38:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="38:30" pos:end="38:43">/* "theora" */</comment>



        <switch pos:start="42:9" pos:end="372:20">switch<condition pos:start="42:15" pos:end="42:21">(<expr pos:start="42:16" pos:end="42:20"><name pos:start="42:16" pos:end="42:20">ptype</name></expr>)</condition>

        <block pos:start="44:9" pos:end="372:20">{<block_content pos:start="46:13" pos:end="372:20">

            <case pos:start="46:13" pos:end="46:19">case <expr pos:start="46:18" pos:end="46:18"><literal type="number" pos:start="46:18" pos:end="46:18">1</literal></expr>:</case>

                <expr_stmt pos:start="48:17" pos:end="48:51"><expr pos:start="48:17" pos:end="48:50"><call pos:start="48:17" pos:end="48:50"><name pos:start="48:17" pos:end="48:38">theora_decode_comments</name><argument_list pos:start="48:39" pos:end="48:50">(<argument pos:start="48:40" pos:end="48:44"><expr pos:start="48:40" pos:end="48:44"><name pos:start="48:40" pos:end="48:44">avctx</name></expr></argument>, <argument pos:start="48:47" pos:end="48:49"><expr pos:start="48:47" pos:end="48:49"><operator pos:start="48:47" pos:end="48:47">&amp;</operator><name pos:start="48:48" pos:end="48:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="50:17" pos:end="50:22">break;</break>

            <case pos:start="52:13" pos:end="52:19">case <expr pos:start="52:18" pos:end="52:18"><literal type="number" pos:start="52:18" pos:end="52:18">2</literal></expr>:</case>

                <expr_stmt pos:start="54:17" pos:end="54:49"><expr pos:start="54:17" pos:end="54:48"><call pos:start="54:17" pos:end="54:48"><name pos:start="54:17" pos:end="54:36">theora_decode_tables</name><argument_list pos:start="54:37" pos:end="54:48">(<argument pos:start="54:38" pos:end="54:42"><expr pos:start="54:38" pos:end="54:42"><name pos:start="54:38" pos:end="54:42">avctx</name></expr></argument>, <argument pos:start="54:45" pos:end="54:47"><expr pos:start="54:45" pos:end="54:47"><operator pos:start="54:45" pos:end="54:45">&amp;</operator><name pos:start="54:46" pos:end="54:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="56:21" pos:end="56:40"><expr pos:start="56:21" pos:end="56:39"><call pos:start="56:21" pos:end="56:39"><name pos:start="56:21" pos:end="56:36">init_dequantizer</name><argument_list pos:start="56:37" pos:end="56:39">(<argument pos:start="56:38" pos:end="56:38"><expr pos:start="56:38" pos:end="56:38"><name pos:start="56:38" pos:end="56:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="58:17" pos:end="58:22">break;</break>

            <default pos:start="60:13" pos:end="60:20">default:</default>

                <expr_stmt pos:start="62:17" pos:end="62:89"><expr pos:start="62:17" pos:end="62:88"><call pos:start="62:17" pos:end="62:88"><name pos:start="62:17" pos:end="62:22">av_log</name><argument_list pos:start="62:23" pos:end="62:88">(<argument pos:start="62:24" pos:end="62:28"><expr pos:start="62:24" pos:end="62:28"><name pos:start="62:24" pos:end="62:28">avctx</name></expr></argument>, <argument pos:start="62:31" pos:end="62:42"><expr pos:start="62:31" pos:end="62:42"><name pos:start="62:31" pos:end="62:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="62:45" pos:end="62:80"><expr pos:start="62:45" pos:end="62:80"><literal type="string" pos:start="62:45" pos:end="62:80">"Unknown Theora config packet: %d\n"</literal></expr></argument>, <argument pos:start="62:83" pos:end="62:87"><expr pos:start="62:83" pos:end="62:87"><name pos:start="62:83" pos:end="62:87">ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <return pos:start="65:9" pos:end="68:0">return <expr pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:23">buf_size</name></expr>;</return>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>




    <expr_stmt pos:start="72:5" pos:end="72:34"><expr pos:start="72:5" pos:end="72:33"><name pos:start="72:5" pos:end="72:15"><name pos:start="72:5" pos:end="72:5">s</name><operator pos:start="72:6" pos:end="72:7">-&gt;</operator><name pos:start="72:8" pos:end="72:15">keyframe</name></name> <operator pos:start="72:17" pos:end="72:17">=</operator> <operator pos:start="72:19" pos:end="72:19">!</operator><call pos:start="72:20" pos:end="72:33"><name pos:start="72:20" pos:end="72:28">get_bits1</name><argument_list pos:start="72:29" pos:end="72:33">(<argument pos:start="72:30" pos:end="72:32"><expr pos:start="72:30" pos:end="72:32"><operator pos:start="72:30" pos:end="72:30">&amp;</operator><name pos:start="72:31" pos:end="72:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="74:5" pos:end="76:26"><if pos:start="74:5" pos:end="76:26">if <condition pos:start="74:8" pos:end="74:19">(<expr pos:start="74:9" pos:end="74:18"><operator pos:start="74:9" pos:end="74:9">!</operator><name pos:start="74:10" pos:end="74:18"><name pos:start="74:10" pos:end="74:10">s</name><operator pos:start="74:11" pos:end="74:12">-&gt;</operator><name pos:start="74:13" pos:end="74:18">theora</name></name></expr>)</condition><block type="pseudo" pos:start="76:9" pos:end="76:26"><block_content pos:start="76:9" pos:end="76:26">

        <expr_stmt pos:start="76:9" pos:end="76:26"><expr pos:start="76:9" pos:end="76:25"><call pos:start="76:9" pos:end="76:25"><name pos:start="76:9" pos:end="76:17">skip_bits</name><argument_list pos:start="76:18" pos:end="76:25">(<argument pos:start="76:19" pos:end="76:21"><expr pos:start="76:19" pos:end="76:21"><operator pos:start="76:19" pos:end="76:19">&amp;</operator><name pos:start="76:20" pos:end="76:21">gb</name></expr></argument>, <argument pos:start="76:24" pos:end="76:24"><expr pos:start="76:24" pos:end="76:24"><literal type="number" pos:start="76:24" pos:end="76:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="78:5" pos:end="78:45"><expr pos:start="78:5" pos:end="78:44"><name pos:start="78:5" pos:end="78:25"><name pos:start="78:5" pos:end="78:5">s</name><operator pos:start="78:6" pos:end="78:7">-&gt;</operator><name pos:start="78:8" pos:end="78:25">last_quality_index</name></name> <operator pos:start="78:27" pos:end="78:27">=</operator> <name pos:start="78:29" pos:end="78:44"><name pos:start="78:29" pos:end="78:29">s</name><operator pos:start="78:30" pos:end="78:31">-&gt;</operator><name pos:start="78:32" pos:end="78:44">quality_index</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="82:5" pos:end="82:14"><expr pos:start="82:5" pos:end="82:13"><name pos:start="82:5" pos:end="82:11"><name pos:start="82:5" pos:end="82:5">s</name><operator pos:start="82:6" pos:end="82:7">-&gt;</operator><name pos:start="82:8" pos:end="82:11">nqis</name></name><operator pos:start="82:12" pos:end="82:12">=</operator><literal type="number" pos:start="82:13" pos:end="82:13">0</literal></expr>;</expr_stmt>

    <do pos:start="84:5" pos:end="88:66">do<block pos:start="84:7" pos:end="88:5">{<block_content pos:start="86:9" pos:end="86:44">

        <expr_stmt pos:start="86:9" pos:end="86:44"><expr pos:start="86:9" pos:end="86:43"><name pos:start="86:9" pos:end="86:25"><name pos:start="86:9" pos:end="86:9">s</name><operator pos:start="86:10" pos:end="86:11">-&gt;</operator><name pos:start="86:12" pos:end="86:14">qis</name><index pos:start="86:15" pos:end="86:25">[<expr pos:start="86:16" pos:end="86:24"><name pos:start="86:16" pos:end="86:22"><name pos:start="86:16" pos:end="86:16">s</name><operator pos:start="86:17" pos:end="86:18">-&gt;</operator><name pos:start="86:19" pos:end="86:22">nqis</name></name><operator pos:start="86:23" pos:end="86:24">++</operator></expr>]</index></name><operator pos:start="86:26" pos:end="86:26">=</operator> <call pos:start="86:28" pos:end="86:43"><name pos:start="86:28" pos:end="86:35">get_bits</name><argument_list pos:start="86:36" pos:end="86:43">(<argument pos:start="86:37" pos:end="86:39"><expr pos:start="86:37" pos:end="86:39"><operator pos:start="86:37" pos:end="86:37">&amp;</operator><name pos:start="86:38" pos:end="86:39">gb</name></expr></argument>, <argument pos:start="86:42" pos:end="86:42"><expr pos:start="86:42" pos:end="86:42"><literal type="number" pos:start="86:42" pos:end="86:42">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while<condition pos:start="88:12" pos:end="88:65">(<expr pos:start="88:13" pos:end="88:64"><name pos:start="88:13" pos:end="88:21"><name pos:start="88:13" pos:end="88:13">s</name><operator pos:start="88:14" pos:end="88:15">-&gt;</operator><name pos:start="88:16" pos:end="88:21">theora</name></name> <operator pos:start="88:23" pos:end="88:24">&gt;=</operator> <literal type="number" pos:start="88:26" pos:end="88:33">0x030200</literal> <operator pos:start="88:35" pos:end="88:36">&amp;&amp;</operator> <name pos:start="88:38" pos:end="88:44"><name pos:start="88:38" pos:end="88:38">s</name><operator pos:start="88:39" pos:end="88:40">-&gt;</operator><name pos:start="88:41" pos:end="88:44">nqis</name></name><operator pos:start="88:45" pos:end="88:45">&lt;</operator><literal type="number" pos:start="88:46" pos:end="88:46">3</literal> <operator pos:start="88:48" pos:end="88:49">&amp;&amp;</operator> <call pos:start="88:51" pos:end="88:64"><name pos:start="88:51" pos:end="88:59">get_bits1</name><argument_list pos:start="88:60" pos:end="88:64">(<argument pos:start="88:61" pos:end="88:63"><expr pos:start="88:61" pos:end="88:63"><operator pos:start="88:61" pos:end="88:61">&amp;</operator><name pos:start="88:62" pos:end="88:63">gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



    <expr_stmt pos:start="92:5" pos:end="92:32"><expr pos:start="92:5" pos:end="92:31"><name pos:start="92:5" pos:end="92:20"><name pos:start="92:5" pos:end="92:5">s</name><operator pos:start="92:6" pos:end="92:7">-&gt;</operator><name pos:start="92:8" pos:end="92:20">quality_index</name></name><operator pos:start="92:21" pos:end="92:21">=</operator> <name pos:start="92:23" pos:end="92:31"><name pos:start="92:23" pos:end="92:23">s</name><operator pos:start="92:24" pos:end="92:25">-&gt;</operator><name pos:start="92:26" pos:end="92:28">qis</name><index pos:start="92:29" pos:end="92:31">[<expr pos:start="92:30" pos:end="92:30"><literal type="number" pos:start="92:30" pos:end="92:30">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="96:5" pos:end="100:61"><if pos:start="96:5" pos:end="100:61">if <condition pos:start="96:8" pos:end="96:45">(<expr pos:start="96:9" pos:end="96:44"><name pos:start="96:9" pos:end="96:23"><name pos:start="96:9" pos:end="96:9">s</name><operator pos:start="96:10" pos:end="96:11">-&gt;</operator><name pos:start="96:12" pos:end="96:16">avctx</name><operator pos:start="96:17" pos:end="96:18">-&gt;</operator><name pos:start="96:19" pos:end="96:23">debug</name></name> <operator pos:start="96:25" pos:end="96:25">&amp;</operator> <name pos:start="96:27" pos:end="96:44">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="98:9" pos:end="100:61"><block_content pos:start="98:9" pos:end="100:61">

        <expr_stmt pos:start="98:9" pos:end="100:61"><expr pos:start="98:9" pos:end="100:60"><call pos:start="98:9" pos:end="100:60"><name pos:start="98:9" pos:end="98:14">av_log</name><argument_list pos:start="98:15" pos:end="100:60">(<argument pos:start="98:16" pos:end="98:23"><expr pos:start="98:16" pos:end="98:23"><name pos:start="98:16" pos:end="98:23"><name pos:start="98:16" pos:end="98:16">s</name><operator pos:start="98:17" pos:end="98:18">-&gt;</operator><name pos:start="98:19" pos:end="98:23">avctx</name></name></expr></argument>, <argument pos:start="98:26" pos:end="98:36"><expr pos:start="98:26" pos:end="98:36"><name pos:start="98:26" pos:end="98:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="98:39" pos:end="98:72"><expr pos:start="98:39" pos:end="98:72"><literal type="string" pos:start="98:39" pos:end="98:72">" VP3 %sframe #%d: Q index = %d\n"</literal></expr></argument>,

            <argument pos:start="100:13" pos:end="100:32"><expr pos:start="100:13" pos:end="100:32"><ternary pos:start="100:13" pos:end="100:32"><condition pos:start="100:13" pos:end="100:24"><expr pos:start="100:13" pos:end="100:23"><name pos:start="100:13" pos:end="100:23"><name pos:start="100:13" pos:end="100:13">s</name><operator pos:start="100:14" pos:end="100:15">-&gt;</operator><name pos:start="100:16" pos:end="100:23">keyframe</name></name></expr>?</condition><then pos:start="100:25" pos:end="100:29"><expr pos:start="100:25" pos:end="100:29"><literal type="string" pos:start="100:25" pos:end="100:29">"key"</literal></expr></then><else pos:start="100:30" pos:end="100:32">:<expr pos:start="100:31" pos:end="100:32"><literal type="string" pos:start="100:31" pos:end="100:32">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="100:35" pos:end="100:41"><expr pos:start="100:35" pos:end="100:41"><name pos:start="100:35" pos:end="100:41">counter</name></expr></argument>, <argument pos:start="100:44" pos:end="100:59"><expr pos:start="100:44" pos:end="100:59"><name pos:start="100:44" pos:end="100:59"><name pos:start="100:44" pos:end="100:44">s</name><operator pos:start="100:45" pos:end="100:46">-&gt;</operator><name pos:start="100:47" pos:end="100:59">quality_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="102:5" pos:end="102:14"><expr pos:start="102:5" pos:end="102:13"><name pos:start="102:5" pos:end="102:11">counter</name><operator pos:start="102:12" pos:end="102:13">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="106:5" pos:end="372:20"><if pos:start="106:5" pos:end="372:20">if <condition pos:start="106:8" pos:end="106:50">(<expr pos:start="106:9" pos:end="106:49"><name pos:start="106:9" pos:end="106:24"><name pos:start="106:9" pos:end="106:9">s</name><operator pos:start="106:10" pos:end="106:11">-&gt;</operator><name pos:start="106:12" pos:end="106:24">quality_index</name></name> <operator pos:start="106:26" pos:end="106:27">!=</operator> <name pos:start="106:29" pos:end="106:49"><name pos:start="106:29" pos:end="106:29">s</name><operator pos:start="106:30" pos:end="106:31">-&gt;</operator><name pos:start="106:32" pos:end="106:49">last_quality_index</name></name></expr>)</condition> <block pos:start="106:52" pos:end="372:20">{<block_content pos:start="108:9" pos:end="372:20">

        <expr_stmt pos:start="108:9" pos:end="108:28"><expr pos:start="108:9" pos:end="108:27"><call pos:start="108:9" pos:end="108:27"><name pos:start="108:9" pos:end="108:24">init_dequantizer</name><argument_list pos:start="108:25" pos:end="108:27">(<argument pos:start="108:26" pos:end="108:26"><expr pos:start="108:26" pos:end="108:26"><name pos:start="108:26" pos:end="108:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="110:9" pos:end="110:28"><expr pos:start="110:9" pos:end="110:27"><call pos:start="110:9" pos:end="110:27"><name pos:start="110:9" pos:end="110:24">init_loop_filter</name><argument_list pos:start="110:25" pos:end="110:27">(<argument pos:start="110:26" pos:end="110:26"><expr pos:start="110:26" pos:end="110:26"><name pos:start="110:26" pos:end="110:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <if_stmt pos:start="115:5" pos:end="372:20"><if pos:start="115:5" pos:end="372:20">if <condition pos:start="115:8" pos:end="115:20">(<expr pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:19">keyframe</name></name></expr>)</condition> <block pos:start="115:22" pos:end="372:20">{<block_content pos:start="117:9" pos:end="372:20">

        <if_stmt pos:start="117:9" pos:end="372:20"><if pos:start="117:9" pos:end="372:20">if <condition pos:start="117:12" pos:end="117:23">(<expr pos:start="117:13" pos:end="117:22"><operator pos:start="117:13" pos:end="117:13">!</operator><name pos:start="117:14" pos:end="117:22"><name pos:start="117:14" pos:end="117:14">s</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:22">theora</name></name></expr>)</condition>

        <block pos:start="119:9" pos:end="372:20">{<block_content pos:start="121:13" pos:end="372:20">

            <expr_stmt pos:start="121:13" pos:end="121:30"><expr pos:start="121:13" pos:end="121:29"><call pos:start="121:13" pos:end="121:29"><name pos:start="121:13" pos:end="121:21">skip_bits</name><argument_list pos:start="121:22" pos:end="121:29">(<argument pos:start="121:23" pos:end="121:25"><expr pos:start="121:23" pos:end="121:25"><operator pos:start="121:23" pos:end="121:23">&amp;</operator><name pos:start="121:24" pos:end="121:25">gb</name></expr></argument>, <argument pos:start="121:28" pos:end="121:28"><expr pos:start="121:28" pos:end="121:28"><literal type="number" pos:start="121:28" pos:end="121:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="121:32" pos:end="121:47">/* width code */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:30"><expr pos:start="123:13" pos:end="123:29"><call pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:21">skip_bits</name><argument_list pos:start="123:22" pos:end="123:29">(<argument pos:start="123:23" pos:end="123:25"><expr pos:start="123:23" pos:end="123:25"><operator pos:start="123:23" pos:end="123:23">&amp;</operator><name pos:start="123:24" pos:end="123:25">gb</name></expr></argument>, <argument pos:start="123:28" pos:end="123:28"><expr pos:start="123:28" pos:end="123:28"><literal type="number" pos:start="123:28" pos:end="123:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="123:32" pos:end="123:48">/* height code */</comment>

            <if_stmt pos:start="125:13" pos:end="372:20"><if pos:start="125:13" pos:end="372:20">if <condition pos:start="125:16" pos:end="125:27">(<expr pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:17">s</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:26">version</name></name></expr>)</condition>

            <block pos:start="127:13" pos:end="372:20">{<block_content pos:start="129:17" pos:end="372:20">

                <expr_stmt pos:start="129:17" pos:end="129:46"><expr pos:start="129:17" pos:end="129:45"><name pos:start="129:17" pos:end="129:26"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:26">version</name></name> <operator pos:start="129:28" pos:end="129:28">=</operator> <call pos:start="129:30" pos:end="129:45"><name pos:start="129:30" pos:end="129:37">get_bits</name><argument_list pos:start="129:38" pos:end="129:45">(<argument pos:start="129:39" pos:end="129:41"><expr pos:start="129:39" pos:end="129:41"><operator pos:start="129:39" pos:end="129:39">&amp;</operator><name pos:start="129:40" pos:end="129:41">gb</name></expr></argument>, <argument pos:start="129:44" pos:end="129:44"><expr pos:start="129:44" pos:end="129:44"><literal type="number" pos:start="129:44" pos:end="129:44">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="131:17" pos:end="133:83"><if pos:start="131:17" pos:end="133:83">if <condition pos:start="131:20" pos:end="131:33">(<expr pos:start="131:21" pos:end="131:32"><name pos:start="131:21" pos:end="131:27">counter</name> <operator pos:start="131:29" pos:end="131:30">==</operator> <literal type="number" pos:start="131:32" pos:end="131:32">1</literal></expr>)</condition><block type="pseudo" pos:start="133:21" pos:end="133:83"><block_content pos:start="133:21" pos:end="133:83">

                    <expr_stmt pos:start="133:21" pos:end="133:83"><expr pos:start="133:21" pos:end="133:82"><call pos:start="133:21" pos:end="133:82"><name pos:start="133:21" pos:end="133:26">av_log</name><argument_list pos:start="133:27" pos:end="133:82">(<argument pos:start="133:28" pos:end="133:35"><expr pos:start="133:28" pos:end="133:35"><name pos:start="133:28" pos:end="133:35"><name pos:start="133:28" pos:end="133:28">s</name><operator pos:start="133:29" pos:end="133:30">-&gt;</operator><name pos:start="133:31" pos:end="133:35">avctx</name></name></expr></argument>, <argument pos:start="133:38" pos:end="133:49"><expr pos:start="133:38" pos:end="133:49"><name pos:start="133:38" pos:end="133:49">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="133:52" pos:end="133:69"><expr pos:start="133:52" pos:end="133:69"><literal type="string" pos:start="133:52" pos:end="133:69">"VP version: %d\n"</literal></expr></argument>, <argument pos:start="133:72" pos:end="133:81"><expr pos:start="133:72" pos:end="133:81"><name pos:start="133:72" pos:end="133:81"><name pos:start="133:72" pos:end="133:72">s</name><operator pos:start="133:73" pos:end="133:74">-&gt;</operator><name pos:start="133:75" pos:end="133:81">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="137:9" pos:end="372:20"><if pos:start="137:9" pos:end="372:20">if <condition pos:start="137:12" pos:end="137:36">(<expr pos:start="137:13" pos:end="137:35"><name pos:start="137:13" pos:end="137:22"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:22">version</name></name> <operator pos:start="137:24" pos:end="137:25">||</operator> <name pos:start="137:27" pos:end="137:35"><name pos:start="137:27" pos:end="137:27">s</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:35">theora</name></name></expr>)</condition>

        <block pos:start="139:9" pos:end="372:20">{<block_content pos:start="141:17" pos:end="372:20">

                <if_stmt pos:start="141:17" pos:end="143:100"><if pos:start="141:17" pos:end="143:100">if <condition pos:start="141:20" pos:end="141:35">(<expr pos:start="141:21" pos:end="141:34"><call pos:start="141:21" pos:end="141:34"><name pos:start="141:21" pos:end="141:29">get_bits1</name><argument_list pos:start="141:30" pos:end="141:34">(<argument pos:start="141:31" pos:end="141:33"><expr pos:start="141:31" pos:end="141:33"><operator pos:start="141:31" pos:end="141:31">&amp;</operator><name pos:start="141:32" pos:end="141:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="143:21" pos:end="143:100"><block_content pos:start="143:21" pos:end="143:100">

                    <expr_stmt pos:start="143:21" pos:end="143:100"><expr pos:start="143:21" pos:end="143:99"><call pos:start="143:21" pos:end="143:99"><name pos:start="143:21" pos:end="143:26">av_log</name><argument_list pos:start="143:27" pos:end="143:99">(<argument pos:start="143:28" pos:end="143:35"><expr pos:start="143:28" pos:end="143:35"><name pos:start="143:28" pos:end="143:35"><name pos:start="143:28" pos:end="143:28">s</name><operator pos:start="143:29" pos:end="143:30">-&gt;</operator><name pos:start="143:31" pos:end="143:35">avctx</name></name></expr></argument>, <argument pos:start="143:38" pos:end="143:49"><expr pos:start="143:38" pos:end="143:49"><name pos:start="143:38" pos:end="143:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="143:52" pos:end="143:98"><expr pos:start="143:52" pos:end="143:98"><literal type="string" pos:start="143:52" pos:end="143:98">"Warning, unsupported keyframe coding type?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:30"><expr pos:start="145:13" pos:end="145:29"><call pos:start="145:13" pos:end="145:29"><name pos:start="145:13" pos:end="145:21">skip_bits</name><argument_list pos:start="145:22" pos:end="145:29">(<argument pos:start="145:23" pos:end="145:25"><expr pos:start="145:23" pos:end="145:25"><operator pos:start="145:23" pos:end="145:23">&amp;</operator><name pos:start="145:24" pos:end="145:25">gb</name></expr></argument>, <argument pos:start="145:28" pos:end="145:28"><expr pos:start="145:28" pos:end="145:28"><literal type="number" pos:start="145:28" pos:end="145:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="145:32" pos:end="145:46">/* reserved? */</comment>




        <if_stmt pos:start="150:9" pos:end="372:20"><if pos:start="150:9" pos:end="158:9">if <condition pos:start="150:12" pos:end="150:61">(<expr pos:start="150:13" pos:end="150:60"><name pos:start="150:13" pos:end="150:33"><name pos:start="150:13" pos:end="150:13">s</name><operator pos:start="150:14" pos:end="150:15">-&gt;</operator><name pos:start="150:16" pos:end="150:25">last_frame</name><operator pos:start="150:26" pos:end="150:26">.</operator><name pos:start="150:27" pos:end="150:30">data</name><index pos:start="150:31" pos:end="150:33">[<expr pos:start="150:32" pos:end="150:32"><literal type="number" pos:start="150:32" pos:end="150:32">0</literal></expr>]</index></name> <operator pos:start="150:35" pos:end="150:36">==</operator> <name pos:start="150:38" pos:end="150:60"><name pos:start="150:38" pos:end="150:38">s</name><operator pos:start="150:39" pos:end="150:40">-&gt;</operator><name pos:start="150:41" pos:end="150:52">golden_frame</name><operator pos:start="150:53" pos:end="150:53">.</operator><name pos:start="150:54" pos:end="150:57">data</name><index pos:start="150:58" pos:end="150:60">[<expr pos:start="150:59" pos:end="150:59"><literal type="number" pos:start="150:59" pos:end="150:59">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="150:63" pos:end="158:9">{<block_content pos:start="152:13" pos:end="156:43">

            <if_stmt pos:start="152:13" pos:end="154:63"><if pos:start="152:13" pos:end="154:63">if <condition pos:start="152:16" pos:end="152:40">(<expr pos:start="152:17" pos:end="152:39"><name pos:start="152:17" pos:end="152:39"><name pos:start="152:17" pos:end="152:17">s</name><operator pos:start="152:18" pos:end="152:19">-&gt;</operator><name pos:start="152:20" pos:end="152:31">golden_frame</name><operator pos:start="152:32" pos:end="152:32">.</operator><name pos:start="152:33" pos:end="152:36">data</name><index pos:start="152:37" pos:end="152:39">[<expr pos:start="152:38" pos:end="152:38"><literal type="number" pos:start="152:38" pos:end="152:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="154:17" pos:end="154:63"><block_content pos:start="154:17" pos:end="154:63">

                <expr_stmt pos:start="154:17" pos:end="154:63"><expr pos:start="154:17" pos:end="154:62"><call pos:start="154:17" pos:end="154:62"><name pos:start="154:17" pos:end="154:37"><name pos:start="154:17" pos:end="154:21">avctx</name><operator pos:start="154:22" pos:end="154:23">-&gt;</operator><name pos:start="154:24" pos:end="154:37">release_buffer</name></name><argument_list pos:start="154:38" pos:end="154:62">(<argument pos:start="154:39" pos:end="154:43"><expr pos:start="154:39" pos:end="154:43"><name pos:start="154:39" pos:end="154:43">avctx</name></expr></argument>, <argument pos:start="154:46" pos:end="154:61"><expr pos:start="154:46" pos:end="154:61"><operator pos:start="154:46" pos:end="154:46">&amp;</operator><name pos:start="154:47" pos:end="154:61"><name pos:start="154:47" pos:end="154:47">s</name><operator pos:start="154:48" pos:end="154:49">-&gt;</operator><name pos:start="154:50" pos:end="154:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="156:13" pos:end="156:43"><expr pos:start="156:13" pos:end="156:42"><name pos:start="156:13" pos:end="156:25"><name pos:start="156:13" pos:end="156:13">s</name><operator pos:start="156:14" pos:end="156:15">-&gt;</operator><name pos:start="156:16" pos:end="156:25">last_frame</name></name><operator pos:start="156:26" pos:end="156:26">=</operator> <name pos:start="156:28" pos:end="156:42"><name pos:start="156:28" pos:end="156:28">s</name><operator pos:start="156:29" pos:end="156:30">-&gt;</operator><name pos:start="156:31" pos:end="156:42">golden_frame</name></name></expr>;</expr_stmt> <comment type="block" pos:start="156:45" pos:end="156:104">/* ensure that we catch any access to this released frame */</comment>

        </block_content>}</block></if> <else pos:start="158:11" pos:end="372:20">else <block pos:start="158:16" pos:end="372:20">{<block_content pos:start="160:13" pos:end="372:20">

            <if_stmt pos:start="160:13" pos:end="162:63"><if pos:start="160:13" pos:end="162:63">if <condition pos:start="160:16" pos:end="160:40">(<expr pos:start="160:17" pos:end="160:39"><name pos:start="160:17" pos:end="160:39"><name pos:start="160:17" pos:end="160:17">s</name><operator pos:start="160:18" pos:end="160:19">-&gt;</operator><name pos:start="160:20" pos:end="160:31">golden_frame</name><operator pos:start="160:32" pos:end="160:32">.</operator><name pos:start="160:33" pos:end="160:36">data</name><index pos:start="160:37" pos:end="160:39">[<expr pos:start="160:38" pos:end="160:38"><literal type="number" pos:start="160:38" pos:end="160:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="162:17" pos:end="162:63"><block_content pos:start="162:17" pos:end="162:63">

                <expr_stmt pos:start="162:17" pos:end="162:63"><expr pos:start="162:17" pos:end="162:62"><call pos:start="162:17" pos:end="162:62"><name pos:start="162:17" pos:end="162:37"><name pos:start="162:17" pos:end="162:21">avctx</name><operator pos:start="162:22" pos:end="162:23">-&gt;</operator><name pos:start="162:24" pos:end="162:37">release_buffer</name></name><argument_list pos:start="162:38" pos:end="162:62">(<argument pos:start="162:39" pos:end="162:43"><expr pos:start="162:39" pos:end="162:43"><name pos:start="162:39" pos:end="162:43">avctx</name></expr></argument>, <argument pos:start="162:46" pos:end="162:61"><expr pos:start="162:46" pos:end="162:61"><operator pos:start="162:46" pos:end="162:46">&amp;</operator><name pos:start="162:47" pos:end="162:61"><name pos:start="162:47" pos:end="162:47">s</name><operator pos:start="162:48" pos:end="162:49">-&gt;</operator><name pos:start="162:50" pos:end="162:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="164:13" pos:end="166:61"><if pos:start="164:13" pos:end="166:61">if <condition pos:start="164:16" pos:end="164:38">(<expr pos:start="164:17" pos:end="164:37"><name pos:start="164:17" pos:end="164:37"><name pos:start="164:17" pos:end="164:17">s</name><operator pos:start="164:18" pos:end="164:19">-&gt;</operator><name pos:start="164:20" pos:end="164:29">last_frame</name><operator pos:start="164:30" pos:end="164:30">.</operator><name pos:start="164:31" pos:end="164:34">data</name><index pos:start="164:35" pos:end="164:37">[<expr pos:start="164:36" pos:end="164:36"><literal type="number" pos:start="164:36" pos:end="164:36">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="166:17" pos:end="166:61"><block_content pos:start="166:17" pos:end="166:61">

                <expr_stmt pos:start="166:17" pos:end="166:61"><expr pos:start="166:17" pos:end="166:60"><call pos:start="166:17" pos:end="166:60"><name pos:start="166:17" pos:end="166:37"><name pos:start="166:17" pos:end="166:21">avctx</name><operator pos:start="166:22" pos:end="166:23">-&gt;</operator><name pos:start="166:24" pos:end="166:37">release_buffer</name></name><argument_list pos:start="166:38" pos:end="166:60">(<argument pos:start="166:39" pos:end="166:43"><expr pos:start="166:39" pos:end="166:43"><name pos:start="166:39" pos:end="166:43">avctx</name></expr></argument>, <argument pos:start="166:46" pos:end="166:59"><expr pos:start="166:46" pos:end="166:59"><operator pos:start="166:46" pos:end="166:46">&amp;</operator><name pos:start="166:47" pos:end="166:59"><name pos:start="166:47" pos:end="166:47">s</name><operator pos:start="166:48" pos:end="166:49">-&gt;</operator><name pos:start="166:50" pos:end="166:59">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>




        <expr_stmt pos:start="171:9" pos:end="171:38"><expr pos:start="171:9" pos:end="171:37"><name pos:start="171:9" pos:end="171:33"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:23">golden_frame</name><operator pos:start="171:24" pos:end="171:24">.</operator><name pos:start="171:25" pos:end="171:33">reference</name></name> <operator pos:start="171:35" pos:end="171:35">=</operator> <literal type="number" pos:start="171:37" pos:end="171:37">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="372:20"><if pos:start="173:9" pos:end="372:20">if<condition pos:start="173:11" pos:end="173:58">(<expr pos:start="173:12" pos:end="173:57"><call pos:start="173:12" pos:end="173:53"><name pos:start="173:12" pos:end="173:28"><name pos:start="173:12" pos:end="173:16">avctx</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:28">get_buffer</name></name><argument_list pos:start="173:29" pos:end="173:53">(<argument pos:start="173:30" pos:end="173:34"><expr pos:start="173:30" pos:end="173:34"><name pos:start="173:30" pos:end="173:34">avctx</name></expr></argument>, <argument pos:start="173:37" pos:end="173:52"><expr pos:start="173:37" pos:end="173:52"><operator pos:start="173:37" pos:end="173:37">&amp;</operator><name pos:start="173:38" pos:end="173:52"><name pos:start="173:38" pos:end="173:38">s</name><operator pos:start="173:39" pos:end="173:40">-&gt;</operator><name pos:start="173:41" pos:end="173:52">golden_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="173:55" pos:end="173:55">&lt;</operator> <literal type="number" pos:start="173:57" pos:end="173:57">0</literal></expr>)</condition> <block pos:start="173:60" pos:end="372:20">{<block_content pos:start="175:13" pos:end="372:20">

            <expr_stmt pos:start="175:13" pos:end="175:73"><expr pos:start="175:13" pos:end="175:72"><call pos:start="175:13" pos:end="175:72"><name pos:start="175:13" pos:end="175:18">av_log</name><argument_list pos:start="175:19" pos:end="175:72">(<argument pos:start="175:20" pos:end="175:27"><expr pos:start="175:20" pos:end="175:27"><name pos:start="175:20" pos:end="175:27"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:27">avctx</name></name></expr></argument>, <argument pos:start="175:30" pos:end="175:41"><expr pos:start="175:30" pos:end="175:41"><name pos:start="175:30" pos:end="175:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:44" pos:end="175:71"><expr pos:start="175:44" pos:end="175:71"><literal type="string" pos:start="175:44" pos:end="175:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <comment type="block" pos:start="181:9" pos:end="181:52">/* golden frame is also the current frame */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:42"><expr pos:start="183:9" pos:end="183:41"><name pos:start="183:9" pos:end="183:24"><name pos:start="183:9" pos:end="183:9">s</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:24">current_frame</name></name><operator pos:start="183:25" pos:end="183:25">=</operator> <name pos:start="183:27" pos:end="183:41"><name pos:start="183:27" pos:end="183:27">s</name><operator pos:start="183:28" pos:end="183:29">-&gt;</operator><name pos:start="183:30" pos:end="183:41">golden_frame</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="187:9" pos:end="187:49">/* time to figure out pixel addresses? */</comment>

        <if_stmt pos:start="189:9" pos:end="372:20"><if pos:start="189:9" pos:end="203:5">if <condition pos:start="189:12" pos:end="189:39">(<expr pos:start="189:13" pos:end="189:38"><operator pos:start="189:13" pos:end="189:13">!</operator><name pos:start="189:14" pos:end="189:38"><name pos:start="189:14" pos:end="189:14">s</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:38">pixel_addresses_inited</name></name></expr>)</condition>

        <block pos:start="191:9" pos:end="203:5">{<block_content pos:start="193:13" pos:end="199:52">

            <if_stmt pos:start="193:13" pos:end="199:52"><if pos:start="193:13" pos:end="195:49">if <condition pos:start="193:16" pos:end="193:34">(<expr pos:start="193:17" pos:end="193:33"><operator pos:start="193:17" pos:end="193:17">!</operator><name pos:start="193:18" pos:end="193:33"><name pos:start="193:18" pos:end="193:18">s</name><operator pos:start="193:19" pos:end="193:20">-&gt;</operator><name pos:start="193:21" pos:end="193:33">flipped_image</name></name></expr>)</condition><block type="pseudo" pos:start="195:17" pos:end="195:49"><block_content pos:start="195:17" pos:end="195:49">

                <expr_stmt pos:start="195:17" pos:end="195:49"><expr pos:start="195:17" pos:end="195:48"><call pos:start="195:17" pos:end="195:48"><name pos:start="195:17" pos:end="195:45">vp3_calculate_pixel_addresses</name><argument_list pos:start="195:46" pos:end="195:48">(<argument pos:start="195:47" pos:end="195:47"><expr pos:start="195:47" pos:end="195:47"><name pos:start="195:47" pos:end="195:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="197:13" pos:end="199:52">else<block type="pseudo" pos:start="199:17" pos:end="199:52"><block_content pos:start="199:17" pos:end="199:52">

                <expr_stmt pos:start="199:17" pos:end="199:52"><expr pos:start="199:17" pos:end="199:51"><call pos:start="199:17" pos:end="199:51"><name pos:start="199:17" pos:end="199:48">theora_calculate_pixel_addresses</name><argument_list pos:start="199:49" pos:end="199:51">(<argument pos:start="199:50" pos:end="199:50"><expr pos:start="199:50" pos:end="199:50"><name pos:start="199:50" pos:end="199:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    </block_content>}</block></if> <else pos:start="203:7" pos:end="372:20">else <block pos:start="203:12" pos:end="372:20">{<block_content pos:start="207:9" pos:end="372:20">

        <comment type="block" pos:start="205:9" pos:end="205:42">/* allocate a new current frame */</comment>

        <expr_stmt pos:start="207:9" pos:end="207:39"><expr pos:start="207:9" pos:end="207:38"><name pos:start="207:9" pos:end="207:34"><name pos:start="207:9" pos:end="207:9">s</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:24">current_frame</name><operator pos:start="207:25" pos:end="207:25">.</operator><name pos:start="207:26" pos:end="207:34">reference</name></name> <operator pos:start="207:36" pos:end="207:36">=</operator> <literal type="number" pos:start="207:38" pos:end="207:38">3</literal></expr>;</expr_stmt>





        <if_stmt pos:start="213:9" pos:end="372:20"><if pos:start="213:9" pos:end="372:20">if<condition pos:start="213:11" pos:end="213:59">(<expr pos:start="213:12" pos:end="213:58"><call pos:start="213:12" pos:end="213:54"><name pos:start="213:12" pos:end="213:28"><name pos:start="213:12" pos:end="213:16">avctx</name><operator pos:start="213:17" pos:end="213:18">-&gt;</operator><name pos:start="213:19" pos:end="213:28">get_buffer</name></name><argument_list pos:start="213:29" pos:end="213:54">(<argument pos:start="213:30" pos:end="213:34"><expr pos:start="213:30" pos:end="213:34"><name pos:start="213:30" pos:end="213:34">avctx</name></expr></argument>, <argument pos:start="213:37" pos:end="213:53"><expr pos:start="213:37" pos:end="213:53"><operator pos:start="213:37" pos:end="213:37">&amp;</operator><name pos:start="213:38" pos:end="213:53"><name pos:start="213:38" pos:end="213:38">s</name><operator pos:start="213:39" pos:end="213:40">-&gt;</operator><name pos:start="213:41" pos:end="213:53">current_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="213:56" pos:end="213:56">&lt;</operator> <literal type="number" pos:start="213:58" pos:end="213:58">0</literal></expr>)</condition> <block pos:start="213:61" pos:end="372:20">{<block_content pos:start="215:13" pos:end="372:20">

            <expr_stmt pos:start="215:13" pos:end="215:73"><expr pos:start="215:13" pos:end="215:72"><call pos:start="215:13" pos:end="215:72"><name pos:start="215:13" pos:end="215:18">av_log</name><argument_list pos:start="215:19" pos:end="215:72">(<argument pos:start="215:20" pos:end="215:27"><expr pos:start="215:20" pos:end="215:27"><name pos:start="215:20" pos:end="215:27"><name pos:start="215:20" pos:end="215:20">s</name><operator pos:start="215:21" pos:end="215:22">-&gt;</operator><name pos:start="215:23" pos:end="215:27">avctx</name></name></expr></argument>, <argument pos:start="215:30" pos:end="215:41"><expr pos:start="215:30" pos:end="215:41"><name pos:start="215:30" pos:end="215:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="215:44" pos:end="215:71"><expr pos:start="215:44" pos:end="215:71"><literal type="string" pos:start="215:44" pos:end="215:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






    <expr_stmt pos:start="222:5" pos:end="222:51"><expr pos:start="222:5" pos:end="222:50"><name pos:start="222:5" pos:end="222:33"><name pos:start="222:5" pos:end="222:5">s</name><operator pos:start="222:6" pos:end="222:7">-&gt;</operator><name pos:start="222:8" pos:end="222:20">current_frame</name><operator pos:start="222:21" pos:end="222:21">.</operator><name pos:start="222:22" pos:end="222:33">qscale_table</name></name><operator pos:start="222:34" pos:end="222:34">=</operator> <name pos:start="222:36" pos:end="222:50"><name pos:start="222:36" pos:end="222:36">s</name><operator pos:start="222:37" pos:end="222:38">-&gt;</operator><name pos:start="222:39" pos:end="222:50">qscale_table</name></name></expr>;</expr_stmt> <comment type="line" pos:start="222:53" pos:end="222:98">//FIXME allocate individual tables per AVFrame</comment>

    <expr_stmt pos:start="224:5" pos:end="224:32"><expr pos:start="224:5" pos:end="224:31"><name pos:start="224:5" pos:end="224:28"><name pos:start="224:5" pos:end="224:5">s</name><operator pos:start="224:6" pos:end="224:7">-&gt;</operator><name pos:start="224:8" pos:end="224:20">current_frame</name><operator pos:start="224:21" pos:end="224:21">.</operator><name pos:start="224:22" pos:end="224:28">qstride</name></name><operator pos:start="224:29" pos:end="224:29">=</operator> <literal type="number" pos:start="224:31" pos:end="224:31">0</literal></expr>;</expr_stmt>



    <block pos:start="228:5" pos:end="237:0">{<block_content pos:start="228:6" pos:end="232:28"><decl_stmt pos:start="228:6" pos:end="230:23"><decl pos:start="228:6" pos:end="230:22"><type pos:start="228:6" pos:end="228:16"><name pos:start="228:6" pos:end="228:16">START_TIMER</name></type>

    <name pos:start="230:5" pos:end="230:14">init_frame</name><argument_list pos:start="230:15" pos:end="230:22">(<argument pos:start="230:16" pos:end="230:16"><expr pos:start="230:16" pos:end="230:16"><name pos:start="230:16" pos:end="230:16">s</name></expr></argument>, <argument pos:start="230:19" pos:end="230:21"><expr pos:start="230:19" pos:end="230:21"><operator pos:start="230:19" pos:end="230:19">&amp;</operator><name pos:start="230:20" pos:end="230:21">gb</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro pos:start="232:5" pos:end="232:28"><name pos:start="232:5" pos:end="232:14">STOP_TIMER</name><argument_list pos:start="232:15" pos:end="232:28">(<argument pos:start="232:16" pos:end="232:27"><literal type="string" pos:start="232:16" pos:end="232:27">"init_frame"</literal></argument>)</argument_list></macro></block_content>}</block>



<cpp:if pos:start="236:1" pos:end="236:18">#<cpp:directive pos:start="236:2" pos:end="236:3">if</cpp:directive> <expr pos:start="236:5" pos:end="236:18"><name pos:start="236:5" pos:end="236:18">KEYFRAMES_ONLY</name></expr></cpp:if>

<if_stmt pos:start="238:1" pos:end="372:20"><if pos:start="238:1" pos:end="256:1">if <condition pos:start="238:4" pos:end="238:17">(<expr pos:start="238:5" pos:end="238:16"><operator pos:start="238:5" pos:end="238:5">!</operator><name pos:start="238:6" pos:end="238:16"><name pos:start="238:6" pos:end="238:6">s</name><operator pos:start="238:7" pos:end="238:8">-&gt;</operator><name pos:start="238:9" pos:end="238:16">keyframe</name></name></expr>)</condition> <block pos:start="238:19" pos:end="256:1">{<block_content pos:start="242:5" pos:end="252:54">



    <expr_stmt pos:start="242:5" pos:end="244:50"><expr pos:start="242:5" pos:end="244:49"><call pos:start="242:5" pos:end="244:49"><name pos:start="242:5" pos:end="242:10">memcpy</name><argument_list pos:start="242:11" pos:end="244:49">(<argument pos:start="242:12" pos:end="242:35"><expr pos:start="242:12" pos:end="242:35"><name pos:start="242:12" pos:end="242:35"><name pos:start="242:12" pos:end="242:12">s</name><operator pos:start="242:13" pos:end="242:14">-&gt;</operator><name pos:start="242:15" pos:end="242:27">current_frame</name><operator pos:start="242:28" pos:end="242:28">.</operator><name pos:start="242:29" pos:end="242:32">data</name><index pos:start="242:33" pos:end="242:35">[<expr pos:start="242:34" pos:end="242:34"><literal type="number" pos:start="242:34" pos:end="242:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="242:38" pos:end="242:60"><expr pos:start="242:38" pos:end="242:60"><name pos:start="242:38" pos:end="242:60"><name pos:start="242:38" pos:end="242:38">s</name><operator pos:start="242:39" pos:end="242:40">-&gt;</operator><name pos:start="242:41" pos:end="242:52">golden_frame</name><operator pos:start="242:53" pos:end="242:53">.</operator><name pos:start="242:54" pos:end="242:57">data</name><index pos:start="242:58" pos:end="242:60">[<expr pos:start="242:59" pos:end="242:59"><literal type="number" pos:start="242:59" pos:end="242:59">0</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="244:9" pos:end="244:48"><expr pos:start="244:9" pos:end="244:48"><name pos:start="244:9" pos:end="244:36"><name pos:start="244:9" pos:end="244:9">s</name><operator pos:start="244:10" pos:end="244:11">-&gt;</operator><name pos:start="244:12" pos:end="244:24">current_frame</name><operator pos:start="244:25" pos:end="244:25">.</operator><name pos:start="244:26" pos:end="244:33">linesize</name><index pos:start="244:34" pos:end="244:36">[<expr pos:start="244:35" pos:end="244:35"><literal type="number" pos:start="244:35" pos:end="244:35">0</literal></expr>]</index></name> <operator pos:start="244:38" pos:end="244:38">*</operator> <name pos:start="244:40" pos:end="244:48"><name pos:start="244:40" pos:end="244:40">s</name><operator pos:start="244:41" pos:end="244:42">-&gt;</operator><name pos:start="244:43" pos:end="244:48">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="246:5" pos:end="248:54"><expr pos:start="246:5" pos:end="248:53"><call pos:start="246:5" pos:end="248:53"><name pos:start="246:5" pos:end="246:10">memcpy</name><argument_list pos:start="246:11" pos:end="248:53">(<argument pos:start="246:12" pos:end="246:35"><expr pos:start="246:12" pos:end="246:35"><name pos:start="246:12" pos:end="246:35"><name pos:start="246:12" pos:end="246:12">s</name><operator pos:start="246:13" pos:end="246:14">-&gt;</operator><name pos:start="246:15" pos:end="246:27">current_frame</name><operator pos:start="246:28" pos:end="246:28">.</operator><name pos:start="246:29" pos:end="246:32">data</name><index pos:start="246:33" pos:end="246:35">[<expr pos:start="246:34" pos:end="246:34"><literal type="number" pos:start="246:34" pos:end="246:34">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="246:38" pos:end="246:60"><expr pos:start="246:38" pos:end="246:60"><name pos:start="246:38" pos:end="246:60"><name pos:start="246:38" pos:end="246:38">s</name><operator pos:start="246:39" pos:end="246:40">-&gt;</operator><name pos:start="246:41" pos:end="246:52">golden_frame</name><operator pos:start="246:53" pos:end="246:53">.</operator><name pos:start="246:54" pos:end="246:57">data</name><index pos:start="246:58" pos:end="246:60">[<expr pos:start="246:59" pos:end="246:59"><literal type="number" pos:start="246:59" pos:end="246:59">1</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="248:9" pos:end="248:52"><expr pos:start="248:9" pos:end="248:52"><name pos:start="248:9" pos:end="248:36"><name pos:start="248:9" pos:end="248:9">s</name><operator pos:start="248:10" pos:end="248:11">-&gt;</operator><name pos:start="248:12" pos:end="248:24">current_frame</name><operator pos:start="248:25" pos:end="248:25">.</operator><name pos:start="248:26" pos:end="248:33">linesize</name><index pos:start="248:34" pos:end="248:36">[<expr pos:start="248:35" pos:end="248:35"><literal type="number" pos:start="248:35" pos:end="248:35">1</literal></expr>]</index></name> <operator pos:start="248:38" pos:end="248:38">*</operator> <name pos:start="248:40" pos:end="248:48"><name pos:start="248:40" pos:end="248:40">s</name><operator pos:start="248:41" pos:end="248:42">-&gt;</operator><name pos:start="248:43" pos:end="248:48">height</name></name> <operator pos:start="248:50" pos:end="248:50">/</operator> <literal type="number" pos:start="248:52" pos:end="248:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="250:5" pos:end="252:54"><expr pos:start="250:5" pos:end="252:53"><call pos:start="250:5" pos:end="252:53"><name pos:start="250:5" pos:end="250:10">memcpy</name><argument_list pos:start="250:11" pos:end="252:53">(<argument pos:start="250:12" pos:end="250:35"><expr pos:start="250:12" pos:end="250:35"><name pos:start="250:12" pos:end="250:35"><name pos:start="250:12" pos:end="250:12">s</name><operator pos:start="250:13" pos:end="250:14">-&gt;</operator><name pos:start="250:15" pos:end="250:27">current_frame</name><operator pos:start="250:28" pos:end="250:28">.</operator><name pos:start="250:29" pos:end="250:32">data</name><index pos:start="250:33" pos:end="250:35">[<expr pos:start="250:34" pos:end="250:34"><literal type="number" pos:start="250:34" pos:end="250:34">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="250:38" pos:end="250:60"><expr pos:start="250:38" pos:end="250:60"><name pos:start="250:38" pos:end="250:60"><name pos:start="250:38" pos:end="250:38">s</name><operator pos:start="250:39" pos:end="250:40">-&gt;</operator><name pos:start="250:41" pos:end="250:52">golden_frame</name><operator pos:start="250:53" pos:end="250:53">.</operator><name pos:start="250:54" pos:end="250:57">data</name><index pos:start="250:58" pos:end="250:60">[<expr pos:start="250:59" pos:end="250:59"><literal type="number" pos:start="250:59" pos:end="250:59">2</literal></expr>]</index></name></expr></argument>,

        <argument pos:start="252:9" pos:end="252:52"><expr pos:start="252:9" pos:end="252:52"><name pos:start="252:9" pos:end="252:36"><name pos:start="252:9" pos:end="252:9">s</name><operator pos:start="252:10" pos:end="252:11">-&gt;</operator><name pos:start="252:12" pos:end="252:24">current_frame</name><operator pos:start="252:25" pos:end="252:25">.</operator><name pos:start="252:26" pos:end="252:33">linesize</name><index pos:start="252:34" pos:end="252:36">[<expr pos:start="252:35" pos:end="252:35"><literal type="number" pos:start="252:35" pos:end="252:35">2</literal></expr>]</index></name> <operator pos:start="252:38" pos:end="252:38">*</operator> <name pos:start="252:40" pos:end="252:48"><name pos:start="252:40" pos:end="252:40">s</name><operator pos:start="252:41" pos:end="252:42">-&gt;</operator><name pos:start="252:43" pos:end="252:48">height</name></name> <operator pos:start="252:50" pos:end="252:50">/</operator> <literal type="number" pos:start="252:52" pos:end="252:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></if> <else pos:start="256:3" pos:end="372:20">else <block pos:start="256:8" pos:end="372:20">{<block_content pos:start="262:5" pos:end="372:20">

<cpp:endif pos:start="258:1" pos:end="258:6">#<cpp:directive pos:start="258:2" pos:end="258:6">endif</cpp:directive></cpp:endif>



    <block pos:start="262:5" pos:end="372:20">{<block_content pos:start="262:6" pos:end="372:20"><macro pos:start="262:6" pos:end="262:16"><name pos:start="262:6" pos:end="262:16">START_TIMER</name></macro>

    <if_stmt pos:start="264:5" pos:end="270:37"><if pos:start="264:5" pos:end="270:37">if <condition pos:start="264:8" pos:end="264:35">(<expr pos:start="264:9" pos:end="264:34"><call pos:start="264:9" pos:end="264:34"><name pos:start="264:9" pos:end="264:26">unpack_superblocks</name><argument_list pos:start="264:27" pos:end="264:34">(<argument pos:start="264:28" pos:end="264:28"><expr pos:start="264:28" pos:end="264:28"><name pos:start="264:28" pos:end="264:28">s</name></expr></argument>, <argument pos:start="264:31" pos:end="264:33"><expr pos:start="264:31" pos:end="264:33"><operator pos:start="264:31" pos:end="264:31">&amp;</operator><name pos:start="264:32" pos:end="264:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="264:36" pos:end="270:37">{<block_content pos:start="266:9" pos:end="270:36">

        <expr_stmt pos:start="266:9" pos:end="266:72"><expr pos:start="266:9" pos:end="266:71"><call pos:start="266:9" pos:end="266:71"><name pos:start="266:9" pos:end="266:14">av_log</name><argument_list pos:start="266:15" pos:end="266:71">(<argument pos:start="266:16" pos:end="266:23"><expr pos:start="266:16" pos:end="266:23"><name pos:start="266:16" pos:end="266:23"><name pos:start="266:16" pos:end="266:16">s</name><operator pos:start="266:17" pos:end="266:18">-&gt;</operator><name pos:start="266:19" pos:end="266:23">avctx</name></name></expr></argument>, <argument pos:start="266:26" pos:end="266:37"><expr pos:start="266:26" pos:end="266:37"><name pos:start="266:26" pos:end="266:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="266:40" pos:end="266:70"><expr pos:start="266:40" pos:end="266:70"><literal type="string" pos:start="266:40" pos:end="266:70">"error in unpack_superblocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="270:5" pos:end="270:36"><name pos:start="270:5" pos:end="270:14">STOP_TIMER</name><argument_list pos:start="270:15" pos:end="270:36">(<argument pos:start="270:16" pos:end="270:35"><literal type="string" pos:start="270:16" pos:end="270:35">"unpack_superblocks"</literal></argument>)</argument_list></macro></block_content>}</block></if></if_stmt>

    <block pos:start="272:5" pos:end="372:20">{<block_content pos:start="272:6" pos:end="372:20"><macro pos:start="272:6" pos:end="272:16"><name pos:start="272:6" pos:end="272:16">START_TIMER</name></macro>

    <if_stmt pos:start="274:5" pos:end="280:31"><if pos:start="274:5" pos:end="280:31">if <condition pos:start="274:8" pos:end="274:29">(<expr pos:start="274:9" pos:end="274:28"><call pos:start="274:9" pos:end="274:28"><name pos:start="274:9" pos:end="274:20">unpack_modes</name><argument_list pos:start="274:21" pos:end="274:28">(<argument pos:start="274:22" pos:end="274:22"><expr pos:start="274:22" pos:end="274:22"><name pos:start="274:22" pos:end="274:22">s</name></expr></argument>, <argument pos:start="274:25" pos:end="274:27"><expr pos:start="274:25" pos:end="274:27"><operator pos:start="274:25" pos:end="274:25">&amp;</operator><name pos:start="274:26" pos:end="274:27">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="274:30" pos:end="280:31">{<block_content pos:start="276:9" pos:end="280:30">

        <expr_stmt pos:start="276:9" pos:end="276:66"><expr pos:start="276:9" pos:end="276:65"><call pos:start="276:9" pos:end="276:65"><name pos:start="276:9" pos:end="276:14">av_log</name><argument_list pos:start="276:15" pos:end="276:65">(<argument pos:start="276:16" pos:end="276:23"><expr pos:start="276:16" pos:end="276:23"><name pos:start="276:16" pos:end="276:23"><name pos:start="276:16" pos:end="276:16">s</name><operator pos:start="276:17" pos:end="276:18">-&gt;</operator><name pos:start="276:19" pos:end="276:23">avctx</name></name></expr></argument>, <argument pos:start="276:26" pos:end="276:37"><expr pos:start="276:26" pos:end="276:37"><name pos:start="276:26" pos:end="276:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="276:40" pos:end="276:64"><expr pos:start="276:40" pos:end="276:64"><literal type="string" pos:start="276:40" pos:end="276:64">"error in unpack_modes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="280:5" pos:end="280:30"><name pos:start="280:5" pos:end="280:14">STOP_TIMER</name><argument_list pos:start="280:15" pos:end="280:30">(<argument pos:start="280:16" pos:end="280:29"><literal type="string" pos:start="280:16" pos:end="280:29">"unpack_modes"</literal></argument>)</argument_list></macro></block_content>}</block></if></if_stmt>

    <block pos:start="282:5" pos:end="372:20">{<block_content pos:start="282:6" pos:end="372:20"><macro pos:start="282:6" pos:end="282:16"><name pos:start="282:6" pos:end="282:16">START_TIMER</name></macro>

    <if_stmt pos:start="284:5" pos:end="290:33"><if pos:start="284:5" pos:end="290:33">if <condition pos:start="284:8" pos:end="284:31">(<expr pos:start="284:9" pos:end="284:30"><call pos:start="284:9" pos:end="284:30"><name pos:start="284:9" pos:end="284:22">unpack_vectors</name><argument_list pos:start="284:23" pos:end="284:30">(<argument pos:start="284:24" pos:end="284:24"><expr pos:start="284:24" pos:end="284:24"><name pos:start="284:24" pos:end="284:24">s</name></expr></argument>, <argument pos:start="284:27" pos:end="284:29"><expr pos:start="284:27" pos:end="284:29"><operator pos:start="284:27" pos:end="284:27">&amp;</operator><name pos:start="284:28" pos:end="284:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="284:32" pos:end="290:33">{<block_content pos:start="286:9" pos:end="290:32">

        <expr_stmt pos:start="286:9" pos:end="286:68"><expr pos:start="286:9" pos:end="286:67"><call pos:start="286:9" pos:end="286:67"><name pos:start="286:9" pos:end="286:14">av_log</name><argument_list pos:start="286:15" pos:end="286:67">(<argument pos:start="286:16" pos:end="286:23"><expr pos:start="286:16" pos:end="286:23"><name pos:start="286:16" pos:end="286:23"><name pos:start="286:16" pos:end="286:16">s</name><operator pos:start="286:17" pos:end="286:18">-&gt;</operator><name pos:start="286:19" pos:end="286:23">avctx</name></name></expr></argument>, <argument pos:start="286:26" pos:end="286:37"><expr pos:start="286:26" pos:end="286:37"><name pos:start="286:26" pos:end="286:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="286:40" pos:end="286:66"><expr pos:start="286:40" pos:end="286:66"><literal type="string" pos:start="286:40" pos:end="286:66">"error in unpack_vectors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="290:5" pos:end="290:32"><name pos:start="290:5" pos:end="290:14">STOP_TIMER</name><argument_list pos:start="290:15" pos:end="290:32">(<argument pos:start="290:16" pos:end="290:31"><literal type="string" pos:start="290:16" pos:end="290:31">"unpack_vectors"</literal></argument>)</argument_list></macro></block_content>}</block></if></if_stmt>

    <block pos:start="292:5" pos:end="372:20">{<block_content pos:start="292:6" pos:end="372:20"><macro pos:start="292:6" pos:end="292:16"><name pos:start="292:6" pos:end="292:16">START_TIMER</name></macro>

    <if_stmt pos:start="294:5" pos:end="300:36"><if pos:start="294:5" pos:end="300:36">if <condition pos:start="294:8" pos:end="294:34">(<expr pos:start="294:9" pos:end="294:33"><call pos:start="294:9" pos:end="294:33"><name pos:start="294:9" pos:end="294:25">unpack_dct_coeffs</name><argument_list pos:start="294:26" pos:end="294:33">(<argument pos:start="294:27" pos:end="294:27"><expr pos:start="294:27" pos:end="294:27"><name pos:start="294:27" pos:end="294:27">s</name></expr></argument>, <argument pos:start="294:30" pos:end="294:32"><expr pos:start="294:30" pos:end="294:32"><operator pos:start="294:30" pos:end="294:30">&amp;</operator><name pos:start="294:31" pos:end="294:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="294:35" pos:end="300:36">{<block_content pos:start="296:9" pos:end="300:35">

        <expr_stmt pos:start="296:9" pos:end="296:71"><expr pos:start="296:9" pos:end="296:70"><call pos:start="296:9" pos:end="296:70"><name pos:start="296:9" pos:end="296:14">av_log</name><argument_list pos:start="296:15" pos:end="296:70">(<argument pos:start="296:16" pos:end="296:23"><expr pos:start="296:16" pos:end="296:23"><name pos:start="296:16" pos:end="296:23"><name pos:start="296:16" pos:end="296:16">s</name><operator pos:start="296:17" pos:end="296:18">-&gt;</operator><name pos:start="296:19" pos:end="296:23">avctx</name></name></expr></argument>, <argument pos:start="296:26" pos:end="296:37"><expr pos:start="296:26" pos:end="296:37"><name pos:start="296:26" pos:end="296:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="296:40" pos:end="296:69"><expr pos:start="296:40" pos:end="296:69"><literal type="string" pos:start="296:40" pos:end="296:69">"error in unpack_dct_coeffs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="300:5" pos:end="300:35"><name pos:start="300:5" pos:end="300:14">STOP_TIMER</name><argument_list pos:start="300:15" pos:end="300:35">(<argument pos:start="300:16" pos:end="300:34"><literal type="string" pos:start="300:16" pos:end="300:34">"unpack_dct_coeffs"</literal></argument>)</argument_list></macro></block_content>}</block></if></if_stmt>

    <block pos:start="302:5" pos:end="372:20">{<block_content pos:start="302:6" pos:end="372:20"><decl_stmt pos:start="302:6" pos:end="306:71"><decl pos:start="302:6" pos:end="306:70"><type pos:start="302:6" pos:end="302:16"><name pos:start="302:6" pos:end="302:16">START_TIMER</name></type>



    <name pos:start="306:5" pos:end="306:25">reverse_dc_prediction</name><argument_list pos:start="306:26" pos:end="306:70">(<argument pos:start="306:27" pos:end="306:27"><expr pos:start="306:27" pos:end="306:27"><name pos:start="306:27" pos:end="306:27">s</name></expr></argument>, <argument pos:start="306:30" pos:end="306:30"><expr pos:start="306:30" pos:end="306:30"><literal type="number" pos:start="306:30" pos:end="306:30">0</literal></expr></argument>, <argument pos:start="306:33" pos:end="306:49"><expr pos:start="306:33" pos:end="306:49"><name pos:start="306:33" pos:end="306:49"><name pos:start="306:33" pos:end="306:33">s</name><operator pos:start="306:34" pos:end="306:35">-&gt;</operator><name pos:start="306:36" pos:end="306:49">fragment_width</name></name></expr></argument>, <argument pos:start="306:52" pos:end="306:69"><expr pos:start="306:52" pos:end="306:69"><name pos:start="306:52" pos:end="306:69"><name pos:start="306:52" pos:end="306:52">s</name><operator pos:start="306:53" pos:end="306:54">-&gt;</operator><name pos:start="306:55" pos:end="306:69">fragment_height</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <if_stmt pos:start="308:5" pos:end="319:40"><if pos:start="308:5" pos:end="319:40">if <condition pos:start="308:8" pos:end="308:46">(<expr pos:start="308:9" pos:end="308:45"><operator pos:start="308:9" pos:end="308:9">(</operator><name pos:start="308:10" pos:end="308:21"><name pos:start="308:10" pos:end="308:14">avctx</name><operator pos:start="308:15" pos:end="308:16">-&gt;</operator><name pos:start="308:17" pos:end="308:21">flags</name></name> <operator pos:start="308:23" pos:end="308:23">&amp;</operator> <name pos:start="308:25" pos:end="308:39">CODEC_FLAG_GRAY</name><operator pos:start="308:40" pos:end="308:40">)</operator> <operator pos:start="308:42" pos:end="308:43">==</operator> <literal type="number" pos:start="308:45" pos:end="308:45">0</literal></expr>)</condition> <block pos:start="308:48" pos:end="319:40">{<block_content pos:start="310:9" pos:end="319:39">

        <expr_stmt pos:start="310:9" pos:end="312:59"><expr pos:start="310:9" pos:end="312:58"><call pos:start="310:9" pos:end="312:58"><name pos:start="310:9" pos:end="310:29">reverse_dc_prediction</name><argument_list pos:start="310:30" pos:end="312:58">(<argument pos:start="310:31" pos:end="310:31"><expr pos:start="310:31" pos:end="310:31"><name pos:start="310:31" pos:end="310:31">s</name></expr></argument>, <argument pos:start="310:34" pos:end="310:53"><expr pos:start="310:34" pos:end="310:53"><name pos:start="310:34" pos:end="310:53"><name pos:start="310:34" pos:end="310:34">s</name><operator pos:start="310:35" pos:end="310:36">-&gt;</operator><name pos:start="310:37" pos:end="310:50">fragment_start</name><index pos:start="310:51" pos:end="310:53">[<expr pos:start="310:52" pos:end="310:52"><literal type="number" pos:start="310:52" pos:end="310:52">1</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="312:13" pos:end="312:33"><expr pos:start="312:13" pos:end="312:33"><name pos:start="312:13" pos:end="312:29"><name pos:start="312:13" pos:end="312:13">s</name><operator pos:start="312:14" pos:end="312:15">-&gt;</operator><name pos:start="312:16" pos:end="312:29">fragment_width</name></name> <operator pos:start="312:31" pos:end="312:31">/</operator> <literal type="number" pos:start="312:33" pos:end="312:33">2</literal></expr></argument>, <argument pos:start="312:36" pos:end="312:57"><expr pos:start="312:36" pos:end="312:57"><name pos:start="312:36" pos:end="312:53"><name pos:start="312:36" pos:end="312:36">s</name><operator pos:start="312:37" pos:end="312:38">-&gt;</operator><name pos:start="312:39" pos:end="312:53">fragment_height</name></name> <operator pos:start="312:55" pos:end="312:55">/</operator> <literal type="number" pos:start="312:57" pos:end="312:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="314:9" pos:end="316:59"><expr pos:start="314:9" pos:end="316:58"><call pos:start="314:9" pos:end="316:58"><name pos:start="314:9" pos:end="314:29">reverse_dc_prediction</name><argument_list pos:start="314:30" pos:end="316:58">(<argument pos:start="314:31" pos:end="314:31"><expr pos:start="314:31" pos:end="314:31"><name pos:start="314:31" pos:end="314:31">s</name></expr></argument>, <argument pos:start="314:34" pos:end="314:53"><expr pos:start="314:34" pos:end="314:53"><name pos:start="314:34" pos:end="314:53"><name pos:start="314:34" pos:end="314:34">s</name><operator pos:start="314:35" pos:end="314:36">-&gt;</operator><name pos:start="314:37" pos:end="314:50">fragment_start</name><index pos:start="314:51" pos:end="314:53">[<expr pos:start="314:52" pos:end="314:52"><literal type="number" pos:start="314:52" pos:end="314:52">2</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="316:13" pos:end="316:33"><expr pos:start="316:13" pos:end="316:33"><name pos:start="316:13" pos:end="316:29"><name pos:start="316:13" pos:end="316:13">s</name><operator pos:start="316:14" pos:end="316:15">-&gt;</operator><name pos:start="316:16" pos:end="316:29">fragment_width</name></name> <operator pos:start="316:31" pos:end="316:31">/</operator> <literal type="number" pos:start="316:33" pos:end="316:33">2</literal></expr></argument>, <argument pos:start="316:36" pos:end="316:57"><expr pos:start="316:36" pos:end="316:57"><name pos:start="316:36" pos:end="316:53"><name pos:start="316:36" pos:end="316:36">s</name><operator pos:start="316:37" pos:end="316:38">-&gt;</operator><name pos:start="316:39" pos:end="316:53">fragment_height</name></name> <operator pos:start="316:55" pos:end="316:55">/</operator> <literal type="number" pos:start="316:57" pos:end="316:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <macro pos:start="319:5" pos:end="319:39"><name pos:start="319:5" pos:end="319:14">STOP_TIMER</name><argument_list pos:start="319:15" pos:end="319:39">(<argument pos:start="319:16" pos:end="319:38"><literal type="string" pos:start="319:16" pos:end="319:38">"reverse_dc_prediction"</literal></argument>)</argument_list></macro></block_content>}</block></if></if_stmt>

    <block pos:start="321:5" pos:end="329:35">{<block_content pos:start="321:6" pos:end="329:34"><macro pos:start="321:6" pos:end="321:16"><name pos:start="321:6" pos:end="321:16">START_TIMER</name></macro>



    <for pos:start="325:5" pos:end="327:27">for <control pos:start="325:9" pos:end="325:46">(<init pos:start="325:10" pos:end="325:15"><expr pos:start="325:10" pos:end="325:14"><name pos:start="325:10" pos:end="325:10">i</name> <operator pos:start="325:12" pos:end="325:12">=</operator> <literal type="number" pos:start="325:14" pos:end="325:14">0</literal></expr>;</init> <condition pos:start="325:17" pos:end="325:41"><expr pos:start="325:17" pos:end="325:40"><name pos:start="325:17" pos:end="325:17">i</name> <operator pos:start="325:19" pos:end="325:19">&lt;</operator> <name pos:start="325:21" pos:end="325:40"><name pos:start="325:21" pos:end="325:21">s</name><operator pos:start="325:22" pos:end="325:23">-&gt;</operator><name pos:start="325:24" pos:end="325:40">macroblock_height</name></name></expr>;</condition> <incr pos:start="325:43" pos:end="325:45"><expr pos:start="325:43" pos:end="325:45"><name pos:start="325:43" pos:end="325:43">i</name><operator pos:start="325:44" pos:end="325:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="327:9" pos:end="327:27"><block_content pos:start="327:9" pos:end="327:27">

        <expr_stmt pos:start="327:9" pos:end="327:27"><expr pos:start="327:9" pos:end="327:26"><call pos:start="327:9" pos:end="327:26"><name pos:start="327:9" pos:end="327:20">render_slice</name><argument_list pos:start="327:21" pos:end="327:26">(<argument pos:start="327:22" pos:end="327:22"><expr pos:start="327:22" pos:end="327:22"><name pos:start="327:22" pos:end="327:22">s</name></expr></argument>, <argument pos:start="327:25" pos:end="327:25"><expr pos:start="327:25" pos:end="327:25"><name pos:start="327:25" pos:end="327:25">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <macro pos:start="329:5" pos:end="329:34"><name pos:start="329:5" pos:end="329:14">STOP_TIMER</name><argument_list pos:start="329:15" pos:end="329:34">(<argument pos:start="329:16" pos:end="329:33"><literal type="string" pos:start="329:16" pos:end="329:33">"render_fragments"</literal></argument>)</argument_list></macro></block_content>}</block>



    <block pos:start="333:5" pos:end="343:0">{<block_content pos:start="333:6" pos:end="337:35"><decl_stmt pos:start="333:6" pos:end="335:25"><decl pos:start="333:6" pos:end="335:24"><type pos:start="333:6" pos:end="333:16"><name pos:start="333:6" pos:end="333:16">START_TIMER</name></type>

    <name pos:start="335:5" pos:end="335:21">apply_loop_filter</name><argument_list pos:start="335:22" pos:end="335:24">(<argument pos:start="335:23" pos:end="335:23"><expr pos:start="335:23" pos:end="335:23"><name pos:start="335:23" pos:end="335:23">s</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro pos:start="337:5" pos:end="337:35"><name pos:start="337:5" pos:end="337:14">STOP_TIMER</name><argument_list pos:start="337:15" pos:end="337:35">(<argument pos:start="337:16" pos:end="337:34"><literal type="string" pos:start="337:16" pos:end="337:34">"apply_loop_filter"</literal></argument>)</argument_list></macro></block_content>}</block>

<cpp:if pos:start="339:1" pos:end="339:18">#<cpp:directive pos:start="339:2" pos:end="339:3">if</cpp:directive> <expr pos:start="339:5" pos:end="339:18"><name pos:start="339:5" pos:end="339:18">KEYFRAMES_ONLY</name></expr></cpp:if>


<cpp:endif pos:start="342:1" pos:end="342:6">#<cpp:directive pos:start="342:2" pos:end="342:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="346:5" pos:end="346:31"><expr pos:start="346:5" pos:end="346:30"><operator pos:start="346:5" pos:end="346:5">*</operator><name pos:start="346:6" pos:end="346:14">data_size</name><operator pos:start="346:15" pos:end="346:15">=</operator><sizeof pos:start="346:16" pos:end="346:30">sizeof<argument_list pos:start="346:22" pos:end="346:30">(<argument pos:start="346:23" pos:end="346:29"><expr pos:start="346:23" pos:end="346:29"><name pos:start="346:23" pos:end="346:29">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="348:5" pos:end="348:38"><expr pos:start="348:5" pos:end="348:37"><operator pos:start="348:5" pos:end="348:5">*</operator><operator pos:start="348:6" pos:end="348:6">(</operator><name pos:start="348:7" pos:end="348:13">AVFrame</name><operator pos:start="348:14" pos:end="348:14">*</operator><operator pos:start="348:15" pos:end="348:15">)</operator><name pos:start="348:16" pos:end="348:19">data</name><operator pos:start="348:20" pos:end="348:20">=</operator> <name pos:start="348:22" pos:end="348:37"><name pos:start="348:22" pos:end="348:22">s</name><operator pos:start="348:23" pos:end="348:24">-&gt;</operator><name pos:start="348:25" pos:end="348:37">current_frame</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="352:5" pos:end="354:22">/* release the last frame, if it is allocated and if it is not the

     * golden frame */</comment>

    <if_stmt pos:start="356:5" pos:end="360:53"><if pos:start="356:5" pos:end="360:53">if <condition pos:start="356:8" pos:end="358:59">(<expr pos:start="356:9" pos:end="358:58"><operator pos:start="356:9" pos:end="356:9">(</operator><name pos:start="356:10" pos:end="356:30"><name pos:start="356:10" pos:end="356:10">s</name><operator pos:start="356:11" pos:end="356:12">-&gt;</operator><name pos:start="356:13" pos:end="356:22">last_frame</name><operator pos:start="356:23" pos:end="356:23">.</operator><name pos:start="356:24" pos:end="356:27">data</name><index pos:start="356:28" pos:end="356:30">[<expr pos:start="356:29" pos:end="356:29"><literal type="number" pos:start="356:29" pos:end="356:29">0</literal></expr>]</index></name><operator pos:start="356:31" pos:end="356:31">)</operator> <operator pos:start="356:33" pos:end="356:34">&amp;&amp;</operator>

        <operator pos:start="358:9" pos:end="358:9">(</operator><name pos:start="358:10" pos:end="358:30"><name pos:start="358:10" pos:end="358:10">s</name><operator pos:start="358:11" pos:end="358:12">-&gt;</operator><name pos:start="358:13" pos:end="358:22">last_frame</name><operator pos:start="358:23" pos:end="358:23">.</operator><name pos:start="358:24" pos:end="358:27">data</name><index pos:start="358:28" pos:end="358:30">[<expr pos:start="358:29" pos:end="358:29"><literal type="number" pos:start="358:29" pos:end="358:29">0</literal></expr>]</index></name> <operator pos:start="358:32" pos:end="358:33">!=</operator> <name pos:start="358:35" pos:end="358:57"><name pos:start="358:35" pos:end="358:35">s</name><operator pos:start="358:36" pos:end="358:37">-&gt;</operator><name pos:start="358:38" pos:end="358:49">golden_frame</name><operator pos:start="358:50" pos:end="358:50">.</operator><name pos:start="358:51" pos:end="358:54">data</name><index pos:start="358:55" pos:end="358:57">[<expr pos:start="358:56" pos:end="358:56"><literal type="number" pos:start="358:56" pos:end="358:56">0</literal></expr>]</index></name><operator pos:start="358:58" pos:end="358:58">)</operator></expr>)</condition><block type="pseudo" pos:start="360:9" pos:end="360:53"><block_content pos:start="360:9" pos:end="360:53">

        <expr_stmt pos:start="360:9" pos:end="360:53"><expr pos:start="360:9" pos:end="360:52"><call pos:start="360:9" pos:end="360:52"><name pos:start="360:9" pos:end="360:29"><name pos:start="360:9" pos:end="360:13">avctx</name><operator pos:start="360:14" pos:end="360:15">-&gt;</operator><name pos:start="360:16" pos:end="360:29">release_buffer</name></name><argument_list pos:start="360:30" pos:end="360:52">(<argument pos:start="360:31" pos:end="360:35"><expr pos:start="360:31" pos:end="360:35"><name pos:start="360:31" pos:end="360:35">avctx</name></expr></argument>, <argument pos:start="360:38" pos:end="360:51"><expr pos:start="360:38" pos:end="360:51"><operator pos:start="360:38" pos:end="360:38">&amp;</operator><name pos:start="360:39" pos:end="360:51"><name pos:start="360:39" pos:end="360:39">s</name><operator pos:start="360:40" pos:end="360:41">-&gt;</operator><name pos:start="360:42" pos:end="360:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="364:5" pos:end="364:41">/* shuffle frames (last = current) */</comment>

    <expr_stmt pos:start="366:5" pos:end="366:36"><expr pos:start="366:5" pos:end="366:35"><name pos:start="366:5" pos:end="366:17"><name pos:start="366:5" pos:end="366:5">s</name><operator pos:start="366:6" pos:end="366:7">-&gt;</operator><name pos:start="366:8" pos:end="366:17">last_frame</name></name><operator pos:start="366:18" pos:end="366:18">=</operator> <name pos:start="366:20" pos:end="366:35"><name pos:start="366:20" pos:end="366:20">s</name><operator pos:start="366:21" pos:end="366:22">-&gt;</operator><name pos:start="366:23" pos:end="366:35">current_frame</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="368:5" pos:end="368:35"><expr pos:start="368:5" pos:end="368:34"><name pos:start="368:5" pos:end="368:28"><name pos:start="368:5" pos:end="368:5">s</name><operator pos:start="368:6" pos:end="368:7">-&gt;</operator><name pos:start="368:8" pos:end="368:20">current_frame</name><operator pos:start="368:21" pos:end="368:21">.</operator><name pos:start="368:22" pos:end="368:25">data</name><index pos:start="368:26" pos:end="368:28">[<expr pos:start="368:27" pos:end="368:27"><literal type="number" pos:start="368:27" pos:end="368:27">0</literal></expr>]</index></name><operator pos:start="368:29" pos:end="368:29">=</operator> <name pos:start="368:31" pos:end="368:34">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="368:37" pos:end="368:96">/* ensure that we catch any access to this released frame */</comment>



    <return pos:start="372:5" pos:end="372:20">return <expr pos:start="372:12" pos:end="372:19"><name pos:start="372:12" pos:end="372:19">buf_size</name></expr>;</return></block_content></block></block_content></block></block_content></block></block_content></block></block_content></block></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></function>
</unit>
