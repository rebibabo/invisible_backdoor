<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22639.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:15"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:46">qcow2_co_pwrite_zeroes</name><parameter_list pos:start="1:47" pos:end="3:54">(<parameter pos:start="1:48" pos:end="1:67"><decl pos:start="1:48" pos:end="1:67"><type pos:start="1:48" pos:end="1:67"><name pos:start="1:48" pos:end="1:63">BlockDriverState</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:18">offset</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:29"><decl pos:start="3:21" pos:end="3:29"><type pos:start="3:21" pos:end="3:29"><name pos:start="3:21" pos:end="3:23">int</name></type> <name pos:start="3:25" pos:end="3:29">count</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:53"><decl pos:start="3:32" pos:end="3:53"><type pos:start="3:32" pos:end="3:53"><name pos:start="3:32" pos:end="3:47">BdrvRequestFlags</name></type> <name pos:start="3:49" pos:end="3:53">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="99:15">{<block_content pos:start="7:5" pos:end="99:15">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">BDRVQcow2State</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:34">= <expr pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:26">bs</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:34">opaque</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">head</name> <init pos:start="13:19" pos:end="13:44">= <expr pos:start="13:21" pos:end="13:44"><name pos:start="13:21" pos:end="13:26">offset</name> <operator pos:start="13:28" pos:end="13:28">%</operator> <name pos:start="13:30" pos:end="13:44"><name pos:start="13:30" pos:end="13:30">s</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:44">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:55"><decl pos:start="15:5" pos:end="15:54"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:17">tail</name> <init pos:start="15:19" pos:end="15:54">= <expr pos:start="15:21" pos:end="15:54"><operator pos:start="15:21" pos:end="15:21">(</operator><name pos:start="15:22" pos:end="15:27">offset</name> <operator pos:start="15:29" pos:end="15:29">+</operator> <name pos:start="15:31" pos:end="15:35">count</name><operator pos:start="15:36" pos:end="15:36">)</operator> <operator pos:start="15:38" pos:end="15:38">%</operator> <name pos:start="15:40" pos:end="15:54"><name pos:start="15:40" pos:end="15:40">s</name><operator pos:start="15:41" pos:end="15:42">-&gt;</operator><name pos:start="15:43" pos:end="15:54">cluster_size</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:78"><expr pos:start="19:5" pos:end="19:77"><call pos:start="19:5" pos:end="19:77"><name pos:start="19:5" pos:end="19:39">trace_qcow2_pwrite_zeroes_start_req</name><argument_list pos:start="19:40" pos:end="19:77">(<argument pos:start="19:41" pos:end="19:61"><expr pos:start="19:41" pos:end="19:61"><call pos:start="19:41" pos:end="19:61"><name pos:start="19:41" pos:end="19:59">qemu_coroutine_self</name><argument_list pos:start="19:60" pos:end="19:61">()</argument_list></call></expr></argument>, <argument pos:start="19:64" pos:end="19:69"><expr pos:start="19:64" pos:end="19:69"><name pos:start="19:64" pos:end="19:69">offset</name></expr></argument>, <argument pos:start="19:72" pos:end="19:76"><expr pos:start="19:72" pos:end="19:76"><name pos:start="19:72" pos:end="19:76">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>






    <if_stmt pos:start="26:5" pos:end="99:15"><if pos:start="26:5" pos:end="99:15">if <condition pos:start="26:8" pos:end="26:21">(<expr pos:start="26:9" pos:end="26:20"><name pos:start="26:9" pos:end="26:12">head</name> <operator pos:start="26:14" pos:end="26:15">||</operator> <name pos:start="26:17" pos:end="26:20">tail</name></expr>)</condition> <block pos:start="26:23" pos:end="99:15">{<block_content pos:start="28:9" pos:end="99:15">

        <decl_stmt pos:start="28:9" pos:end="28:63"><decl pos:start="28:9" pos:end="28:62"><type pos:start="28:9" pos:end="28:15"><name pos:start="28:9" pos:end="28:15">int64_t</name></type> <name pos:start="28:17" pos:end="28:24">cl_start</name> <init pos:start="28:26" pos:end="28:62">= <expr pos:start="28:28" pos:end="28:62"><operator pos:start="28:28" pos:end="28:28">(</operator><name pos:start="28:29" pos:end="28:34">offset</name> <operator pos:start="28:36" pos:end="28:36">-</operator> <name pos:start="28:38" pos:end="28:41">head</name><operator pos:start="28:42" pos:end="28:42">)</operator> <operator pos:start="28:44" pos:end="28:45">&gt;&gt;</operator> <name pos:start="28:47" pos:end="28:62">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="30:9" pos:end="30:21"><decl pos:start="30:9" pos:end="30:20"><type pos:start="30:9" pos:end="30:16"><name pos:start="30:9" pos:end="30:16">uint64_t</name></type> <name pos:start="30:18" pos:end="30:20">off</name></decl>;</decl_stmt>

        <decl_stmt pos:start="32:9" pos:end="32:24"><decl pos:start="32:9" pos:end="32:23"><type pos:start="32:9" pos:end="32:20"><name pos:start="32:9" pos:end="32:16">unsigned</name> <name pos:start="32:18" pos:end="32:20">int</name></type> <name pos:start="32:22" pos:end="32:23">nr</name></decl>;</decl_stmt>



        <expr_stmt pos:start="36:9" pos:end="36:48"><expr pos:start="36:9" pos:end="36:47"><call pos:start="36:9" pos:end="36:47"><name pos:start="36:9" pos:end="36:14">assert</name><argument_list pos:start="36:15" pos:end="36:47">(<argument pos:start="36:16" pos:end="36:46"><expr pos:start="36:16" pos:end="36:46"><name pos:start="36:16" pos:end="36:19">head</name> <operator pos:start="36:21" pos:end="36:21">+</operator> <name pos:start="36:23" pos:end="36:27">count</name> <operator pos:start="36:29" pos:end="36:30">&lt;=</operator> <name pos:start="36:32" pos:end="36:46"><name pos:start="36:32" pos:end="36:32">s</name><operator pos:start="36:33" pos:end="36:34">-&gt;</operator><name pos:start="36:35" pos:end="36:46">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="40:9" pos:end="40:70">/* check whether remainder of cluster already reads as zero */</comment>

        <if_stmt pos:start="42:9" pos:end="99:15"><if pos:start="42:9" pos:end="99:15">if <condition pos:start="42:12" pos:end="50:63">(<expr pos:start="42:13" pos:end="50:62"><operator pos:start="42:13" pos:end="42:13">!</operator><operator pos:start="42:14" pos:end="42:14">(</operator><call pos:start="42:15" pos:end="44:67"><name pos:start="42:15" pos:end="42:29">is_zero_sectors</name><argument_list pos:start="42:30" pos:end="44:67">(<argument pos:start="42:31" pos:end="42:32"><expr pos:start="42:31" pos:end="42:32"><name pos:start="42:31" pos:end="42:32">bs</name></expr></argument>, <argument pos:start="42:35" pos:end="42:42"><expr pos:start="42:35" pos:end="42:42"><name pos:start="42:35" pos:end="42:42">cl_start</name></expr></argument>,

                              <argument pos:start="44:31" pos:end="44:66"><expr pos:start="44:31" pos:end="44:66"><call pos:start="44:31" pos:end="44:66"><name pos:start="44:31" pos:end="44:42">DIV_ROUND_UP</name><argument_list pos:start="44:43" pos:end="44:66">(<argument pos:start="44:44" pos:end="44:47"><expr pos:start="44:44" pos:end="44:47"><name pos:start="44:44" pos:end="44:47">head</name></expr></argument>, <argument pos:start="44:50" pos:end="44:65"><expr pos:start="44:50" pos:end="44:65"><name pos:start="44:50" pos:end="44:65">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="44:69" pos:end="44:70">&amp;&amp;</operator>

              <call pos:start="46:15" pos:end="50:61"><name pos:start="46:15" pos:end="46:29">is_zero_sectors</name><argument_list pos:start="46:30" pos:end="50:61">(<argument pos:start="46:31" pos:end="46:32"><expr pos:start="46:31" pos:end="46:32"><name pos:start="46:31" pos:end="46:32">bs</name></expr></argument>, <argument pos:start="46:35" pos:end="46:70"><expr pos:start="46:35" pos:end="46:70"><operator pos:start="46:35" pos:end="46:35">(</operator><name pos:start="46:36" pos:end="46:41">offset</name> <operator pos:start="46:43" pos:end="46:43">+</operator> <name pos:start="46:45" pos:end="46:49">count</name><operator pos:start="46:50" pos:end="46:50">)</operator> <operator pos:start="46:52" pos:end="46:53">&gt;&gt;</operator> <name pos:start="46:55" pos:end="46:70">BDRV_SECTOR_BITS</name></expr></argument>,

                              <argument pos:start="48:31" pos:end="50:60"><expr pos:start="48:31" pos:end="50:60"><call pos:start="48:31" pos:end="50:60"><name pos:start="48:31" pos:end="48:42">DIV_ROUND_UP</name><argument_list pos:start="48:43" pos:end="50:60">(<argument pos:start="48:44" pos:end="48:72"><expr pos:start="48:44" pos:end="48:72"><operator pos:start="48:44" pos:end="48:44">-</operator><name pos:start="48:45" pos:end="48:48">tail</name> <operator pos:start="48:50" pos:end="48:50">&amp;</operator> <operator pos:start="48:52" pos:end="48:52">(</operator><name pos:start="48:53" pos:end="48:67"><name pos:start="48:53" pos:end="48:53">s</name><operator pos:start="48:54" pos:end="48:55">-&gt;</operator><name pos:start="48:56" pos:end="48:67">cluster_size</name></name> <operator pos:start="48:69" pos:end="48:69">-</operator> <literal type="number" pos:start="48:71" pos:end="48:71">1</literal><operator pos:start="48:72" pos:end="48:72">)</operator></expr></argument>,

                                           <argument pos:start="50:44" pos:end="50:59"><expr pos:start="50:44" pos:end="50:59"><name pos:start="50:44" pos:end="50:59">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="50:62" pos:end="50:62">)</operator></expr>)</condition> <block pos:start="50:65" pos:end="99:15">{<block_content pos:start="52:13" pos:end="99:15">

            <return pos:start="52:13" pos:end="52:28">return <expr pos:start="52:20" pos:end="52:27"><operator pos:start="52:20" pos:end="52:20">-</operator><name pos:start="52:21" pos:end="52:27">ENOTSUP</name></expr>;</return>




        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><call pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:26">qemu_co_mutex_lock</name><argument_list pos:start="57:27" pos:end="57:36">(<argument pos:start="57:28" pos:end="57:35"><expr pos:start="57:28" pos:end="57:35"><operator pos:start="57:28" pos:end="57:28">&amp;</operator><name pos:start="57:29" pos:end="57:35"><name pos:start="57:29" pos:end="57:29">s</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="59:9" pos:end="59:56">/* We can have new write after previous check */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:46"><expr pos:start="61:9" pos:end="61:45"><name pos:start="61:9" pos:end="61:14">offset</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:25">cl_start</name> <operator pos:start="61:27" pos:end="61:28">&lt;&lt;</operator> <name pos:start="61:30" pos:end="61:45">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:13">count</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:31">cluster_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:29"><expr pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:10">nr</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <name pos:start="65:14" pos:end="65:28"><name pos:start="65:14" pos:end="65:14">s</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:28">cluster_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:62"><expr pos:start="67:9" pos:end="67:61"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:61"><name pos:start="67:15" pos:end="67:38">qcow2_get_cluster_offset</name><argument_list pos:start="67:39" pos:end="67:61">(<argument pos:start="67:40" pos:end="67:41"><expr pos:start="67:40" pos:end="67:41"><name pos:start="67:40" pos:end="67:41">bs</name></expr></argument>, <argument pos:start="67:44" pos:end="67:49"><expr pos:start="67:44" pos:end="67:49"><name pos:start="67:44" pos:end="67:49">offset</name></expr></argument>, <argument pos:start="67:52" pos:end="67:54"><expr pos:start="67:52" pos:end="67:54"><operator pos:start="67:52" pos:end="67:52">&amp;</operator><name pos:start="67:53" pos:end="67:54">nr</name></expr></argument>, <argument pos:start="67:57" pos:end="67:60"><expr pos:start="67:57" pos:end="67:60"><operator pos:start="67:57" pos:end="67:57">&amp;</operator><name pos:start="67:58" pos:end="67:60">off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="99:15"><if pos:start="69:9" pos:end="80:5">if <condition pos:start="69:12" pos:end="73:44">(<expr pos:start="69:13" pos:end="73:43"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:18">!=</operator> <name pos:start="69:20" pos:end="69:44">QCOW2_CLUSTER_UNALLOCATED</name> <operator pos:start="69:46" pos:end="69:47">&amp;&amp;</operator>

            <name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:18">!=</operator> <name pos:start="71:20" pos:end="71:43">QCOW2_CLUSTER_ZERO_PLAIN</name> <operator pos:start="71:45" pos:end="71:46">&amp;&amp;</operator>

            <name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:18">!=</operator> <name pos:start="73:20" pos:end="73:43">QCOW2_CLUSTER_ZERO_ALLOC</name></expr>)</condition> <block pos:start="73:46" pos:end="80:5">{<block_content pos:start="75:13" pos:end="77:28">

            <expr_stmt pos:start="75:13" pos:end="75:43"><expr pos:start="75:13" pos:end="75:42"><call pos:start="75:13" pos:end="75:42"><name pos:start="75:13" pos:end="75:32">qemu_co_mutex_unlock</name><argument_list pos:start="75:33" pos:end="75:42">(<argument pos:start="75:34" pos:end="75:41"><expr pos:start="75:34" pos:end="75:41"><operator pos:start="75:34" pos:end="75:34">&amp;</operator><name pos:start="75:35" pos:end="75:41"><name pos:start="75:35" pos:end="75:35">s</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:41">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:28">return <expr pos:start="77:20" pos:end="77:27"><operator pos:start="77:20" pos:end="77:20">-</operator><name pos:start="77:21" pos:end="77:27">ENOTSUP</name></expr>;</return>


    </block_content>}</block></if> <else pos:start="80:7" pos:end="99:15">else <block pos:start="80:12" pos:end="99:15">{<block_content pos:start="82:9" pos:end="99:15">

        <expr_stmt pos:start="82:9" pos:end="82:37"><expr pos:start="82:9" pos:end="82:36"><call pos:start="82:9" pos:end="82:36"><name pos:start="82:9" pos:end="82:26">qemu_co_mutex_lock</name><argument_list pos:start="82:27" pos:end="82:36">(<argument pos:start="82:28" pos:end="82:35"><expr pos:start="82:28" pos:end="82:35"><operator pos:start="82:28" pos:end="82:28">&amp;</operator><name pos:start="82:29" pos:end="82:35"><name pos:start="82:29" pos:end="82:29">s</name><operator pos:start="82:30" pos:end="82:31">-&gt;</operator><name pos:start="82:32" pos:end="82:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="87:5" pos:end="87:68"><expr pos:start="87:5" pos:end="87:67"><call pos:start="87:5" pos:end="87:67"><name pos:start="87:5" pos:end="87:29">trace_qcow2_pwrite_zeroes</name><argument_list pos:start="87:30" pos:end="87:67">(<argument pos:start="87:31" pos:end="87:51"><expr pos:start="87:31" pos:end="87:51"><call pos:start="87:31" pos:end="87:51"><name pos:start="87:31" pos:end="87:49">qemu_coroutine_self</name><argument_list pos:start="87:50" pos:end="87:51">()</argument_list></call></expr></argument>, <argument pos:start="87:54" pos:end="87:59"><expr pos:start="87:54" pos:end="87:59"><name pos:start="87:54" pos:end="87:59">offset</name></expr></argument>, <argument pos:start="87:62" pos:end="87:66"><expr pos:start="87:62" pos:end="87:66"><name pos:start="87:62" pos:end="87:66">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:53">/* Whatever is left can use real zero clusters */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:76"><expr pos:start="93:5" pos:end="93:75"><name pos:start="93:5" pos:end="93:7">ret</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <call pos:start="93:11" pos:end="93:75"><name pos:start="93:11" pos:end="93:29">qcow2_zero_clusters</name><argument_list pos:start="93:30" pos:end="93:75">(<argument pos:start="93:31" pos:end="93:32"><expr pos:start="93:31" pos:end="93:32"><name pos:start="93:31" pos:end="93:32">bs</name></expr></argument>, <argument pos:start="93:35" pos:end="93:40"><expr pos:start="93:35" pos:end="93:40"><name pos:start="93:35" pos:end="93:40">offset</name></expr></argument>, <argument pos:start="93:43" pos:end="93:67"><expr pos:start="93:43" pos:end="93:67"><name pos:start="93:43" pos:end="93:47">count</name> <operator pos:start="93:49" pos:end="93:50">&gt;&gt;</operator> <name pos:start="93:52" pos:end="93:67">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="93:70" pos:end="93:74"><expr pos:start="93:70" pos:end="93:74"><name pos:start="93:70" pos:end="93:74">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:35"><expr pos:start="95:5" pos:end="95:34"><call pos:start="95:5" pos:end="95:34"><name pos:start="95:5" pos:end="95:24">qemu_co_mutex_unlock</name><argument_list pos:start="95:25" pos:end="95:34">(<argument pos:start="95:26" pos:end="95:33"><expr pos:start="95:26" pos:end="95:33"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:33"><name pos:start="95:27" pos:end="95:27">s</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="99:5" pos:end="99:15">return <expr pos:start="99:12" pos:end="99:14"><name pos:start="99:12" pos:end="99:14">ret</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
