<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6116.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:30">concat_open</name><parameter_list pos:start="1:31" pos:end="1:73">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:41">URLContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">h</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><specifier pos:start="1:47" pos:end="1:51">const</specifier> <name pos:start="1:53" pos:end="1:56">char</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">uri</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:15">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:18">node_uri</name> <init pos:start="5:20" pos:end="5:25">= <expr pos:start="5:22" pos:end="5:25"><name pos:start="5:22" pos:end="5:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type>  <name pos:start="11:13" pos:end="11:15">len</name></decl>, <decl pos:start="11:18" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:18" pos:end="11:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">URLContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:18">uc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:44"><type pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:22">concat_data</name></name>  <modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:29">data</name> <init pos:start="15:31" pos:end="15:44">= <expr pos:start="15:33" pos:end="15:44"><name pos:start="15:33" pos:end="15:44"><name pos:start="15:33" pos:end="15:33">h</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:23">concat_nodes</name></name> <modifier pos:start="17:25" pos:end="17:25">*</modifier></type><name pos:start="17:26" pos:end="17:30">nodes</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:38"><expr pos:start="21:5" pos:end="21:37"><call pos:start="21:5" pos:end="21:37"><name pos:start="21:5" pos:end="21:15">av_strstart</name><argument_list pos:start="21:16" pos:end="21:37">(<argument pos:start="21:17" pos:end="21:19"><expr pos:start="21:17" pos:end="21:19"><name pos:start="21:17" pos:end="21:19">uri</name></expr></argument>, <argument pos:start="21:22" pos:end="21:30"><expr pos:start="21:22" pos:end="21:30"><literal type="string" pos:start="21:22" pos:end="21:30">"concat:"</literal></expr></argument>, <argument pos:start="21:33" pos:end="21:36"><expr pos:start="21:33" pos:end="21:36"><operator pos:start="21:33" pos:end="21:33">&amp;</operator><name pos:start="21:34" pos:end="21:36">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="25:5" pos:end="37:13">for <control pos:start="25:9" pos:end="25:37">(<init pos:start="25:10" pos:end="25:24"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr><operator pos:start="25:15" pos:end="25:15">,</operator> <expr pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:19">len</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <literal type="number" pos:start="25:23" pos:end="25:23">1</literal></expr>;</init> <condition pos:start="25:26" pos:end="25:32"><expr pos:start="25:26" pos:end="25:31"><name pos:start="25:26" pos:end="25:31"><name pos:start="25:26" pos:end="25:28">uri</name><index pos:start="25:29" pos:end="25:31">[<expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="25:34" pos:end="25:36"><expr pos:start="25:34" pos:end="25:36"><name pos:start="25:34" pos:end="25:34">i</name><operator pos:start="25:35" pos:end="25:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:9" pos:end="37:13"><block_content pos:start="27:9" pos:end="37:13">

        <if_stmt pos:start="27:9" pos:end="37:13"><if pos:start="27:9" pos:end="37:13">if <condition pos:start="27:12" pos:end="27:40">(<expr pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:15">uri</name><index pos:start="27:16" pos:end="27:18">[<expr pos:start="27:17" pos:end="27:17"><name pos:start="27:17" pos:end="27:17">i</name></expr>]</index></name> <operator pos:start="27:20" pos:end="27:21">==</operator> <operator pos:start="27:23" pos:end="27:23">*</operator><name pos:start="27:24" pos:end="27:39">AV_CAT_SEPARATOR</name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="37:13"><block_content pos:start="31:13" pos:end="37:13">

            <comment type="block" pos:start="29:13" pos:end="29:34">/* integer overflow */</comment>

            <if_stmt pos:start="31:13" pos:end="37:13"><if pos:start="31:13" pos:end="37:13">if <condition pos:start="31:16" pos:end="31:51">(<expr pos:start="31:17" pos:end="31:50"><operator pos:start="31:17" pos:end="31:18">++</operator><name pos:start="31:19" pos:end="31:21">len</name> <operator pos:start="31:23" pos:end="31:24">==</operator> <name pos:start="31:26" pos:end="31:33">UINT_MAX</name> <operator pos:start="31:35" pos:end="31:35">/</operator> <sizeof pos:start="31:37" pos:end="31:50">sizeof<argument_list pos:start="31:43" pos:end="31:50">(<argument pos:start="31:44" pos:end="31:49"><expr pos:start="31:44" pos:end="31:49"><operator pos:start="31:44" pos:end="31:44">*</operator><name pos:start="31:45" pos:end="31:49">nodes</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="31:53" pos:end="37:13">{<block_content pos:start="33:17" pos:end="35:45">

                <expr_stmt pos:start="33:17" pos:end="33:40"><expr pos:start="33:17" pos:end="33:39"><call pos:start="33:17" pos:end="33:39"><name pos:start="33:17" pos:end="33:24">av_freep</name><argument_list pos:start="33:25" pos:end="33:39">(<argument pos:start="33:26" pos:end="33:38"><expr pos:start="33:26" pos:end="33:38"><operator pos:start="33:26" pos:end="33:26">&amp;</operator><name pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:27">h</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:38">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="35:17" pos:end="35:45">return <expr pos:start="35:24" pos:end="35:44"><call pos:start="35:24" pos:end="35:44"><name pos:start="35:24" pos:end="35:30">AVERROR</name><argument_list pos:start="35:31" pos:end="35:44">(<argument pos:start="35:32" pos:end="35:43"><expr pos:start="35:32" pos:end="35:43"><name pos:start="35:32" pos:end="35:43">ENAMETOOLONG</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>



    <if_stmt pos:start="41:5" pos:end="47:28"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:51">(<expr pos:start="41:9" pos:end="41:50"><operator pos:start="41:9" pos:end="41:9">!</operator><operator pos:start="41:10" pos:end="41:10">(</operator><name pos:start="41:11" pos:end="41:15">nodes</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:49"><name pos:start="41:19" pos:end="41:27">av_malloc</name><argument_list pos:start="41:28" pos:end="41:49">(<argument pos:start="41:29" pos:end="41:48"><expr pos:start="41:29" pos:end="41:48"><sizeof pos:start="41:29" pos:end="41:42">sizeof<argument_list pos:start="41:35" pos:end="41:42">(<argument pos:start="41:36" pos:end="41:41"><expr pos:start="41:36" pos:end="41:41"><operator pos:start="41:36" pos:end="41:36">*</operator><name pos:start="41:37" pos:end="41:41">nodes</name></expr></argument>)</argument_list></sizeof> <operator pos:start="41:44" pos:end="41:44">*</operator> <name pos:start="41:46" pos:end="41:48">len</name></expr></argument>)</argument_list></call><operator pos:start="41:50" pos:end="41:50">)</operator></expr>)</condition> <block pos:start="41:53" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:31">

        <return pos:start="43:9" pos:end="43:31">return <expr pos:start="43:16" pos:end="43:30"><call pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:30">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="47:28">else<block type="pseudo" pos:start="47:9" pos:end="47:28"><block_content pos:start="47:9" pos:end="47:28">

        <expr_stmt pos:start="47:9" pos:end="47:28"><expr pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:12">data</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:19">nodes</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:27">nodes</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:22">/* handle input */</comment>

    <if_stmt pos:start="53:5" pos:end="55:30"><if pos:start="53:5" pos:end="55:30">if <condition pos:start="53:8" pos:end="53:14">(<expr pos:start="53:9" pos:end="53:13"><operator pos:start="53:9" pos:end="53:9">!</operator><operator pos:start="53:10" pos:end="53:10">*</operator><name pos:start="53:11" pos:end="53:13">uri</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:30"><block_content pos:start="55:9" pos:end="55:30">

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:11">err</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:29"><name pos:start="55:15" pos:end="55:21">AVERROR</name><argument_list pos:start="55:22" pos:end="55:29">(<argument pos:start="55:23" pos:end="55:28"><expr pos:start="55:23" pos:end="55:28"><name pos:start="55:23" pos:end="55:28">ENOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="57:5" pos:end="103:5">for <control pos:start="57:9" pos:end="57:26">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:21"><expr pos:start="57:17" pos:end="57:20"><operator pos:start="57:17" pos:end="57:17">*</operator><name pos:start="57:18" pos:end="57:20">uri</name></expr>;</condition> <incr pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:23">i</name><operator pos:start="57:24" pos:end="57:25">++</operator></expr></incr>)</control> <block pos:start="57:28" pos:end="103:5">{<block_content pos:start="61:9" pos:end="101:29">

        <comment type="block" pos:start="59:9" pos:end="59:25">/* parsing uri */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:11">len</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:44"><name pos:start="61:15" pos:end="61:21">strcspn</name><argument_list pos:start="61:22" pos:end="61:44">(<argument pos:start="61:23" pos:end="61:25"><expr pos:start="61:23" pos:end="61:25"><name pos:start="61:23" pos:end="61:25">uri</name></expr></argument>, <argument pos:start="61:28" pos:end="61:43"><expr pos:start="61:28" pos:end="61:43"><name pos:start="61:28" pos:end="61:43">AV_CAT_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="65:18"><if pos:start="63:9" pos:end="65:18">if <condition pos:start="63:12" pos:end="63:56">(<expr pos:start="63:13" pos:end="63:55"><operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:16">err</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:50"><name pos:start="63:20" pos:end="63:30">av_reallocp</name><argument_list pos:start="63:31" pos:end="63:50">(<argument pos:start="63:32" pos:end="63:40"><expr pos:start="63:32" pos:end="63:40"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:40">node_uri</name></expr></argument>, <argument pos:start="63:43" pos:end="63:49"><expr pos:start="63:43" pos:end="63:49"><name pos:start="63:43" pos:end="63:45">len</name> <operator pos:start="63:47" pos:end="63:47">+</operator> <literal type="number" pos:start="63:49" pos:end="63:49">1</literal></expr></argument>)</argument_list></call><operator pos:start="63:51" pos:end="63:51">)</operator> <operator pos:start="63:53" pos:end="63:53">&lt;</operator> <literal type="number" pos:start="63:55" pos:end="63:55">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:18"><block_content pos:start="65:13" pos:end="65:18">

            <break pos:start="65:13" pos:end="65:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:41"><expr pos:start="67:9" pos:end="67:40"><call pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:18">av_strlcpy</name><argument_list pos:start="67:19" pos:end="67:40">(<argument pos:start="67:20" pos:end="67:27"><expr pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:27">node_uri</name></expr></argument>, <argument pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:32">uri</name></expr></argument>, <argument pos:start="67:35" pos:end="67:39"><expr pos:start="67:35" pos:end="67:39"><name pos:start="67:35" pos:end="67:37">len</name><operator pos:start="67:38" pos:end="67:38">+</operator><literal type="number" pos:start="67:39" pos:end="67:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:55"><expr pos:start="69:9" pos:end="69:54"><name pos:start="69:9" pos:end="69:11">uri</name> <operator pos:start="69:13" pos:end="69:14">+=</operator> <name pos:start="69:16" pos:end="69:18">len</name> <operator pos:start="69:20" pos:end="69:20">+</operator> <call pos:start="69:22" pos:end="69:54"><name pos:start="69:22" pos:end="69:27">strspn</name><argument_list pos:start="69:28" pos:end="69:54">(<argument pos:start="69:29" pos:end="69:35"><expr pos:start="69:29" pos:end="69:35"><name pos:start="69:29" pos:end="69:31">uri</name><operator pos:start="69:32" pos:end="69:32">+</operator><name pos:start="69:33" pos:end="69:35">len</name></expr></argument>, <argument pos:start="69:38" pos:end="69:53"><expr pos:start="69:38" pos:end="69:53"><name pos:start="69:38" pos:end="69:53">AV_CAT_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="73:9" pos:end="73:33">/* creating URLContext */</comment>

        <if_stmt pos:start="75:9" pos:end="79:18"><if pos:start="75:9" pos:end="79:18">if <condition pos:start="75:12" pos:end="77:65">(<expr pos:start="75:13" pos:end="77:64"><operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:16">err</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="77:59"><name pos:start="75:20" pos:end="75:29">ffurl_open</name><argument_list pos:start="75:30" pos:end="77:59">(<argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><operator pos:start="75:31" pos:end="75:31">&amp;</operator><name pos:start="75:32" pos:end="75:33">uc</name></expr></argument>, <argument pos:start="75:36" pos:end="75:43"><expr pos:start="75:36" pos:end="75:43"><name pos:start="75:36" pos:end="75:43">node_uri</name></expr></argument>, <argument pos:start="75:46" pos:end="75:50"><expr pos:start="75:46" pos:end="75:50"><name pos:start="75:46" pos:end="75:50">flags</name></expr></argument>,

                              <argument pos:start="77:31" pos:end="77:52"><expr pos:start="77:31" pos:end="77:52"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:52"><name pos:start="77:32" pos:end="77:32">h</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:52">interrupt_callback</name></name></expr></argument>, <argument pos:start="77:55" pos:end="77:58"><expr pos:start="77:55" pos:end="77:58"><name pos:start="77:55" pos:end="77:58">NULL</name></expr></argument>)</argument_list></call><operator pos:start="77:60" pos:end="77:60">)</operator> <operator pos:start="77:62" pos:end="77:62">&lt;</operator> <literal type="number" pos:start="77:64" pos:end="77:64">0</literal></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:18"><block_content pos:start="79:13" pos:end="79:18">

            <break pos:start="79:13" pos:end="79:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="83:9" pos:end="83:27">/* creating size */</comment>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:40">(<expr pos:start="85:13" pos:end="85:39"><operator pos:start="85:13" pos:end="85:13">(</operator><name pos:start="85:14" pos:end="85:17">size</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <call pos:start="85:21" pos:end="85:34"><name pos:start="85:21" pos:end="85:30">ffurl_size</name><argument_list pos:start="85:31" pos:end="85:34">(<argument pos:start="85:32" pos:end="85:33"><expr pos:start="85:32" pos:end="85:33"><name pos:start="85:32" pos:end="85:33">uc</name></expr></argument>)</argument_list></call><operator pos:start="85:35" pos:end="85:35">)</operator> <operator pos:start="85:37" pos:end="85:37">&lt;</operator> <literal type="number" pos:start="85:39" pos:end="85:39">0</literal></expr>)</condition> <block pos:start="85:42" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:18">

            <expr_stmt pos:start="87:13" pos:end="87:28"><expr pos:start="87:13" pos:end="87:27"><call pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:23">ffurl_close</name><argument_list pos:start="87:24" pos:end="87:27">(<argument pos:start="87:25" pos:end="87:26"><expr pos:start="87:25" pos:end="87:26"><name pos:start="87:25" pos:end="87:26">uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:34"><expr pos:start="89:13" pos:end="89:33"><name pos:start="89:13" pos:end="89:15">err</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:33"><name pos:start="89:19" pos:end="89:25">AVERROR</name><argument_list pos:start="89:26" pos:end="89:33">(<argument pos:start="89:27" pos:end="89:32"><expr pos:start="89:27" pos:end="89:32"><name pos:start="89:27" pos:end="89:32">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="97:9" pos:end="97:24">/* assembling */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:27"><expr pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:13">nodes</name><index pos:start="99:14" pos:end="99:16">[<expr pos:start="99:15" pos:end="99:15"><name pos:start="99:15" pos:end="99:15">i</name></expr>]</index></name><operator pos:start="99:17" pos:end="99:17">.</operator><name pos:start="99:18" pos:end="99:19">uc</name>   <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:26">uc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:13">nodes</name><index pos:start="101:14" pos:end="101:16">[<expr pos:start="101:15" pos:end="101:15"><name pos:start="101:15" pos:end="101:15">i</name></expr>]</index></name><operator pos:start="101:17" pos:end="101:17">.</operator><name pos:start="101:18" pos:end="101:21">size</name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:28">size</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="105:5" pos:end="105:22"><expr pos:start="105:5" pos:end="105:21"><call pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:11">av_free</name><argument_list pos:start="105:12" pos:end="105:21">(<argument pos:start="105:13" pos:end="105:20"><expr pos:start="105:13" pos:end="105:20"><name pos:start="105:13" pos:end="105:20">node_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:21"><expr pos:start="107:5" pos:end="107:20"><name pos:start="107:5" pos:end="107:16"><name pos:start="107:5" pos:end="107:8">data</name><operator pos:start="107:9" pos:end="107:10">-&gt;</operator><name pos:start="107:11" pos:end="107:16">length</name></name> <operator pos:start="107:18" pos:end="107:18">=</operator> <name pos:start="107:20" pos:end="107:20">i</name></expr>;</expr_stmt>



    <if_stmt pos:start="111:5" pos:end="121:28"><if pos:start="111:5" pos:end="113:24">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:11">err</name> <operator pos:start="111:13" pos:end="111:13">&lt;</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:24"><block_content pos:start="113:9" pos:end="113:24">

        <expr_stmt pos:start="113:9" pos:end="113:24"><expr pos:start="113:9" pos:end="113:23"><call pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:20">concat_close</name><argument_list pos:start="113:21" pos:end="113:23">(<argument pos:start="113:22" pos:end="113:22"><expr pos:start="113:22" pos:end="113:22"><name pos:start="113:22" pos:end="113:22">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="115:5" pos:end="117:24">else if <condition pos:start="115:13" pos:end="115:76">(<expr pos:start="115:14" pos:end="115:75"><operator pos:start="115:14" pos:end="115:14">(</operator><name pos:start="115:15" pos:end="115:17">err</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <call pos:start="115:21" pos:end="115:70"><name pos:start="115:21" pos:end="115:31">av_reallocp</name><argument_list pos:start="115:32" pos:end="115:70">(<argument pos:start="115:33" pos:end="115:38"><expr pos:start="115:33" pos:end="115:38"><operator pos:start="115:33" pos:end="115:33">&amp;</operator><name pos:start="115:34" pos:end="115:38">nodes</name></expr></argument>, <argument pos:start="115:41" pos:end="115:69"><expr pos:start="115:41" pos:end="115:69"><name pos:start="115:41" pos:end="115:52"><name pos:start="115:41" pos:end="115:44">data</name><operator pos:start="115:45" pos:end="115:46">-&gt;</operator><name pos:start="115:47" pos:end="115:52">length</name></name> <operator pos:start="115:54" pos:end="115:54">*</operator> <sizeof pos:start="115:56" pos:end="115:69">sizeof<argument_list pos:start="115:62" pos:end="115:69">(<argument pos:start="115:63" pos:end="115:68"><expr pos:start="115:63" pos:end="115:68"><operator pos:start="115:63" pos:end="115:63">*</operator><name pos:start="115:64" pos:end="115:68">nodes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="115:71" pos:end="115:71">)</operator> <operator pos:start="115:73" pos:end="115:73">&lt;</operator> <literal type="number" pos:start="115:75" pos:end="115:75">0</literal></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:24"><block_content pos:start="117:9" pos:end="117:24">

        <expr_stmt pos:start="117:9" pos:end="117:24"><expr pos:start="117:9" pos:end="117:23"><call pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:20">concat_close</name><argument_list pos:start="117:21" pos:end="117:23">(<argument pos:start="117:22" pos:end="117:22"><expr pos:start="117:22" pos:end="117:22"><name pos:start="117:22" pos:end="117:22">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="119:5" pos:end="121:28">else<block type="pseudo" pos:start="121:9" pos:end="121:28"><block_content pos:start="121:9" pos:end="121:28">

        <expr_stmt pos:start="121:9" pos:end="121:28"><expr pos:start="121:9" pos:end="121:27"><name pos:start="121:9" pos:end="121:19"><name pos:start="121:9" pos:end="121:12">data</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:19">nodes</name></name> <operator pos:start="121:21" pos:end="121:21">=</operator> <name pos:start="121:23" pos:end="121:27">nodes</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
