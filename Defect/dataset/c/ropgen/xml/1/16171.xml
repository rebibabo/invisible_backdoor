<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16171.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">test_ivshmem_server</name><parameter_list pos:start="1:32" pos:end="1:37">(<parameter pos:start="1:33" pos:end="1:36"><decl pos:start="1:33" pos:end="1:36"><type pos:start="1:33" pos:end="1:36"><name pos:start="1:33" pos:end="1:36">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:26">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">IVState</name></type> <name pos:start="5:13" pos:end="5:18">state1</name></decl>, <decl pos:start="5:21" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:21" pos:end="5:26">state2</name></decl>, <decl pos:start="5:29" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:11"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:31">s1</name></decl>, <decl pos:start="5:34" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:11"><modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:36">s2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">ServerThread</name></type> <name pos:start="7:18" pos:end="7:23">thread</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">IvshmemServer</name></type> <name pos:start="9:19" pos:end="9:24">server</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:16">vm1</name></decl>, <decl pos:start="11:19" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:21">vm2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">nvectors</name> <init pos:start="13:18" pos:end="13:20">= <expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:71"><decl pos:start="15:5" pos:end="15:70"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">guint64</name></type> <name pos:start="15:13" pos:end="15:20">end_time</name> <init pos:start="15:22" pos:end="15:70">= <expr pos:start="15:24" pos:end="15:70"><call pos:start="15:24" pos:end="15:45"><name pos:start="15:24" pos:end="15:43">g_get_monotonic_time</name><argument_list pos:start="15:44" pos:end="15:45">()</argument_list></call> <operator pos:start="15:47" pos:end="15:47">+</operator> <literal type="number" pos:start="15:49" pos:end="15:49">5</literal> <operator pos:start="15:51" pos:end="15:51">*</operator> <name pos:start="15:53" pos:end="15:70">G_TIME_SPAN_SECOND</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:39"><expr pos:start="19:5" pos:end="19:38"><call pos:start="19:5" pos:end="19:38"><name pos:start="19:5" pos:end="19:10">memset</name><argument_list pos:start="19:11" pos:end="19:38">(<argument pos:start="19:12" pos:end="19:19"><expr pos:start="19:12" pos:end="19:19"><name pos:start="19:12" pos:end="19:19">tmpshmem</name></expr></argument>, <argument pos:start="19:22" pos:end="19:25"><expr pos:start="19:22" pos:end="19:25"><literal type="number" pos:start="19:22" pos:end="19:25">0x42</literal></expr></argument>, <argument pos:start="19:28" pos:end="19:37"><expr pos:start="19:28" pos:end="19:37"><name pos:start="19:28" pos:end="19:37">TMPSHMSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="25:48"><expr pos:start="21:5" pos:end="25:47"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="25:47"><name pos:start="21:11" pos:end="21:29">ivshmem_server_init</name><argument_list pos:start="21:30" pos:end="25:47">(<argument pos:start="21:31" pos:end="21:37"><expr pos:start="21:31" pos:end="21:37"><operator pos:start="21:31" pos:end="21:31">&amp;</operator><name pos:start="21:32" pos:end="21:37">server</name></expr></argument>, <argument pos:start="21:40" pos:end="21:48"><expr pos:start="21:40" pos:end="21:48"><name pos:start="21:40" pos:end="21:48">tmpserver</name></expr></argument>, <argument pos:start="21:51" pos:end="21:56"><expr pos:start="21:51" pos:end="21:56"><name pos:start="21:51" pos:end="21:56">tmpshm</name></expr></argument>,

                              <argument pos:start="23:31" pos:end="23:40"><expr pos:start="23:31" pos:end="23:40"><name pos:start="23:31" pos:end="23:40">TMPSHMSIZE</name></expr></argument>, <argument pos:start="23:43" pos:end="23:50"><expr pos:start="23:43" pos:end="23:50"><name pos:start="23:43" pos:end="23:50">nvectors</name></expr></argument>,

                              <argument pos:start="25:31" pos:end="25:46"><expr pos:start="25:31" pos:end="25:46"><call pos:start="25:31" pos:end="25:46"><name pos:start="25:31" pos:end="25:44">g_test_verbose</name><argument_list pos:start="25:45" pos:end="25:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><call pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:19">g_assert_cmpint</name><argument_list pos:start="27:20" pos:end="27:31">(<argument pos:start="27:21" pos:end="27:23"><expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">ret</name></expr></argument>, <argument pos:start="27:26" pos:end="27:27"><expr pos:start="27:26" pos:end="27:27"><operator pos:start="27:26" pos:end="27:27">==</operator></expr></argument>, <argument pos:start="27:30" pos:end="27:30"><expr pos:start="27:30" pos:end="27:30"><literal type="number" pos:start="27:30" pos:end="27:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:39"><name pos:start="31:11" pos:end="31:30">ivshmem_server_start</name><argument_list pos:start="31:31" pos:end="31:39">(<argument pos:start="31:32" pos:end="31:38"><expr pos:start="31:32" pos:end="31:38"><operator pos:start="31:32" pos:end="31:32">&amp;</operator><name pos:start="31:33" pos:end="31:38">server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><call pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:19">g_assert_cmpint</name><argument_list pos:start="33:20" pos:end="33:31">(<argument pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:23">ret</name></expr></argument>, <argument pos:start="33:26" pos:end="33:27"><expr pos:start="33:26" pos:end="33:27"><operator pos:start="33:26" pos:end="33:27">==</operator></expr></argument>, <argument pos:start="33:30" pos:end="33:30"><expr pos:start="33:30" pos:end="33:30"><literal type="number" pos:start="33:30" pos:end="33:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><call pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:24">setup_vm_with_server</name><argument_list pos:start="37:25" pos:end="37:43">(<argument pos:start="37:26" pos:end="37:32"><expr pos:start="37:26" pos:end="37:32"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:32">state1</name></expr></argument>, <argument pos:start="37:35" pos:end="37:42"><expr pos:start="37:35" pos:end="37:42"><name pos:start="37:35" pos:end="37:42">nvectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:6">s1</name> <operator pos:start="39:8" pos:end="39:8">=</operator> <operator pos:start="39:10" pos:end="39:10">&amp;</operator><name pos:start="39:11" pos:end="39:16">state1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><call pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:24">setup_vm_with_server</name><argument_list pos:start="41:25" pos:end="41:43">(<argument pos:start="41:26" pos:end="41:32"><expr pos:start="41:26" pos:end="41:32"><operator pos:start="41:26" pos:end="41:26">&amp;</operator><name pos:start="41:27" pos:end="41:32">state2</name></expr></argument>, <argument pos:start="41:35" pos:end="41:42"><expr pos:start="41:35" pos:end="41:42"><name pos:start="41:35" pos:end="41:42">nvectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:6">s2</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <operator pos:start="43:10" pos:end="43:10">&amp;</operator><name pos:start="43:11" pos:end="43:16">state2</name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:61"><expr pos:start="47:5" pos:end="47:60"><call pos:start="47:5" pos:end="47:60"><name pos:start="47:5" pos:end="47:20">g_assert_cmpuint</name><argument_list pos:start="47:21" pos:end="47:60">(<argument pos:start="47:22" pos:end="47:43"><expr pos:start="47:22" pos:end="47:43"><call pos:start="47:22" pos:end="47:43"><name pos:start="47:22" pos:end="47:27">in_reg</name><argument_list pos:start="47:28" pos:end="47:43">(<argument pos:start="47:29" pos:end="47:30"><expr pos:start="47:29" pos:end="47:30"><name pos:start="47:29" pos:end="47:30">s1</name></expr></argument>, <argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:42">IVPOSITION</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:46" pos:end="47:47"><expr pos:start="47:46" pos:end="47:47"><operator pos:start="47:46" pos:end="47:47">==</operator></expr></argument>, <argument pos:start="47:50" pos:end="47:59"><expr pos:start="47:50" pos:end="47:59"><literal type="number" pos:start="47:50" pos:end="47:59">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:61"><expr pos:start="49:5" pos:end="49:60"><call pos:start="49:5" pos:end="49:60"><name pos:start="49:5" pos:end="49:20">g_assert_cmpuint</name><argument_list pos:start="49:21" pos:end="49:60">(<argument pos:start="49:22" pos:end="49:43"><expr pos:start="49:22" pos:end="49:43"><call pos:start="49:22" pos:end="49:43"><name pos:start="49:22" pos:end="49:27">in_reg</name><argument_list pos:start="49:28" pos:end="49:43">(<argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><name pos:start="49:29" pos:end="49:30">s2</name></expr></argument>, <argument pos:start="49:33" pos:end="49:42"><expr pos:start="49:33" pos:end="49:42"><name pos:start="49:33" pos:end="49:42">IVPOSITION</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:46" pos:end="49:47"><expr pos:start="49:46" pos:end="49:47"><operator pos:start="49:46" pos:end="49:47">==</operator></expr></argument>, <argument pos:start="49:50" pos:end="49:59"><expr pos:start="49:50" pos:end="49:59"><literal type="number" pos:start="49:50" pos:end="49:59">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:80"><expr pos:start="53:5" pos:end="53:79"><call pos:start="53:5" pos:end="53:79"><name pos:start="53:5" pos:end="53:20">g_assert_cmpuint</name><argument_list pos:start="53:21" pos:end="53:79">(<argument pos:start="53:22" pos:end="53:68"><expr pos:start="53:22" pos:end="53:68"><call pos:start="53:22" pos:end="53:68"><name pos:start="53:22" pos:end="53:32">qtest_readb</name><argument_list pos:start="53:33" pos:end="53:68">(<argument pos:start="53:34" pos:end="53:42"><expr pos:start="53:34" pos:end="53:42"><name pos:start="53:34" pos:end="53:42"><name pos:start="53:34" pos:end="53:35">s1</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:42">qtest</name></name></expr></argument>, <argument pos:start="53:45" pos:end="53:67"><expr pos:start="53:45" pos:end="53:67"><operator pos:start="53:45" pos:end="53:45">(</operator><name pos:start="53:46" pos:end="53:54">uintptr_t</name><operator pos:start="53:55" pos:end="53:55">)</operator><name pos:start="53:56" pos:end="53:67"><name pos:start="53:56" pos:end="53:57">s1</name><operator pos:start="53:58" pos:end="53:59">-&gt;</operator><name pos:start="53:60" pos:end="53:67">mem_base</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:71" pos:end="53:72"><expr pos:start="53:71" pos:end="53:72"><operator pos:start="53:71" pos:end="53:72">==</operator></expr></argument>, <argument pos:start="53:75" pos:end="53:78"><expr pos:start="53:75" pos:end="53:78"><literal type="number" pos:start="53:75" pos:end="53:78">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:10">thread</name><operator pos:start="57:11" pos:end="57:11">.</operator><name pos:start="57:12" pos:end="57:17">server</name></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <operator pos:start="57:21" pos:end="57:21">&amp;</operator><name pos:start="57:22" pos:end="57:27">server</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:28"><expr pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:7">ret</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:27"><name pos:start="59:11" pos:end="59:14">pipe</name><argument_list pos:start="59:15" pos:end="59:27">(<argument pos:start="59:16" pos:end="59:26"><expr pos:start="59:16" pos:end="59:26"><name pos:start="59:16" pos:end="59:26"><name pos:start="59:16" pos:end="59:21">thread</name><operator pos:start="59:22" pos:end="59:22">.</operator><name pos:start="59:23" pos:end="59:26">pipe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:32"><expr pos:start="61:5" pos:end="61:31"><call pos:start="61:5" pos:end="61:31"><name pos:start="61:5" pos:end="61:19">g_assert_cmpint</name><argument_list pos:start="61:20" pos:end="61:31">(<argument pos:start="61:21" pos:end="61:23"><expr pos:start="61:21" pos:end="61:23"><name pos:start="61:21" pos:end="61:23">ret</name></expr></argument>, <argument pos:start="61:26" pos:end="61:27"><expr pos:start="61:26" pos:end="61:27"><operator pos:start="61:26" pos:end="61:27">==</operator></expr></argument>, <argument pos:start="61:30" pos:end="61:30"><expr pos:start="61:30" pos:end="61:30"><literal type="number" pos:start="61:30" pos:end="61:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:75"><expr pos:start="63:5" pos:end="63:74"><name pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:10">thread</name><operator pos:start="63:11" pos:end="63:11">.</operator><name pos:start="63:12" pos:end="63:17">thread</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <call pos:start="63:21" pos:end="63:74"><name pos:start="63:21" pos:end="63:32">g_thread_new</name><argument_list pos:start="63:33" pos:end="63:74">(<argument pos:start="63:34" pos:end="63:49"><expr pos:start="63:34" pos:end="63:49"><literal type="string" pos:start="63:34" pos:end="63:49">"ivshmem-server"</literal></expr></argument>, <argument pos:start="63:52" pos:end="63:64"><expr pos:start="63:52" pos:end="63:64"><name pos:start="63:52" pos:end="63:64">server_thread</name></expr></argument>, <argument pos:start="63:67" pos:end="63:73"><expr pos:start="63:67" pos:end="63:73"><operator pos:start="63:67" pos:end="63:67">&amp;</operator><name pos:start="63:68" pos:end="63:73">thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:36"><expr pos:start="65:5" pos:end="65:35"><call pos:start="65:5" pos:end="65:35"><name pos:start="65:5" pos:end="65:12">g_assert</name><argument_list pos:start="65:13" pos:end="65:35">(<argument pos:start="65:14" pos:end="65:34"><expr pos:start="65:14" pos:end="65:34"><name pos:start="65:14" pos:end="65:26"><name pos:start="65:14" pos:end="65:19">thread</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:26">thread</name></name> <operator pos:start="65:28" pos:end="65:29">!=</operator> <name pos:start="65:31" pos:end="65:34">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:39">/* waiting until mapping is done */</comment>

    <while pos:start="71:5" pos:end="85:5">while <condition pos:start="71:11" pos:end="71:45">(<expr pos:start="71:12" pos:end="71:44"><call pos:start="71:12" pos:end="71:33"><name pos:start="71:12" pos:end="71:31">g_get_monotonic_time</name><argument_list pos:start="71:32" pos:end="71:33">()</argument_list></call> <operator pos:start="71:35" pos:end="71:35">&lt;</operator> <name pos:start="71:37" pos:end="71:44">end_time</name></expr>)</condition> <block pos:start="71:47" pos:end="85:5">{<block_content pos:start="73:9" pos:end="83:9">

        <expr_stmt pos:start="73:9" pos:end="73:23"><expr pos:start="73:9" pos:end="73:22"><call pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:16">g_usleep</name><argument_list pos:start="73:17" pos:end="73:22">(<argument pos:start="73:18" pos:end="73:21"><expr pos:start="73:18" pos:end="73:21"><literal type="number" pos:start="73:18" pos:end="73:21">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="79:68">(<expr pos:start="77:13" pos:end="79:67"><call pos:start="77:13" pos:end="77:59"><name pos:start="77:13" pos:end="77:23">qtest_readb</name><argument_list pos:start="77:24" pos:end="77:59">(<argument pos:start="77:25" pos:end="77:33"><expr pos:start="77:25" pos:end="77:33"><name pos:start="77:25" pos:end="77:33"><name pos:start="77:25" pos:end="77:26">s1</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:33">qtest</name></name></expr></argument>, <argument pos:start="77:36" pos:end="77:58"><expr pos:start="77:36" pos:end="77:58"><operator pos:start="77:36" pos:end="77:36">(</operator><name pos:start="77:37" pos:end="77:45">uintptr_t</name><operator pos:start="77:46" pos:end="77:46">)</operator><name pos:start="77:47" pos:end="77:58"><name pos:start="77:47" pos:end="77:48">s1</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:58">mem_base</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:61" pos:end="77:62">==</operator> <literal type="number" pos:start="77:64" pos:end="77:67">0x42</literal> <operator pos:start="77:69" pos:end="77:70">&amp;&amp;</operator>

            <call pos:start="79:13" pos:end="79:59"><name pos:start="79:13" pos:end="79:23">qtest_readb</name><argument_list pos:start="79:24" pos:end="79:59">(<argument pos:start="79:25" pos:end="79:33"><expr pos:start="79:25" pos:end="79:33"><name pos:start="79:25" pos:end="79:33"><name pos:start="79:25" pos:end="79:26">s2</name><operator pos:start="79:27" pos:end="79:28">-&gt;</operator><name pos:start="79:29" pos:end="79:33">qtest</name></name></expr></argument>, <argument pos:start="79:36" pos:end="79:58"><expr pos:start="79:36" pos:end="79:58"><operator pos:start="79:36" pos:end="79:36">(</operator><name pos:start="79:37" pos:end="79:45">uintptr_t</name><operator pos:start="79:46" pos:end="79:46">)</operator><name pos:start="79:47" pos:end="79:58"><name pos:start="79:47" pos:end="79:48">s2</name><operator pos:start="79:49" pos:end="79:50">-&gt;</operator><name pos:start="79:51" pos:end="79:58">mem_base</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:61" pos:end="79:62">==</operator> <literal type="number" pos:start="79:64" pos:end="79:67">0x42</literal></expr>)</condition> <block pos:start="79:70" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:18">

            <break pos:start="81:13" pos:end="81:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="89:5" pos:end="89:36">/* check got different VM ids */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:33"><expr pos:start="91:5" pos:end="91:32"><name pos:start="91:5" pos:end="91:7">vm1</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:32"><name pos:start="91:11" pos:end="91:16">in_reg</name><argument_list pos:start="91:17" pos:end="91:32">(<argument pos:start="91:18" pos:end="91:19"><expr pos:start="91:18" pos:end="91:19"><name pos:start="91:18" pos:end="91:19">s1</name></expr></argument>, <argument pos:start="91:22" pos:end="91:31"><expr pos:start="91:22" pos:end="91:31"><name pos:start="91:22" pos:end="91:31">IVPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:33"><expr pos:start="93:5" pos:end="93:32"><name pos:start="93:5" pos:end="93:7">vm2</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <call pos:start="93:11" pos:end="93:32"><name pos:start="93:11" pos:end="93:16">in_reg</name><argument_list pos:start="93:17" pos:end="93:32">(<argument pos:start="93:18" pos:end="93:19"><expr pos:start="93:18" pos:end="93:19"><name pos:start="93:18" pos:end="93:19">s2</name></expr></argument>, <argument pos:start="93:22" pos:end="93:31"><expr pos:start="93:22" pos:end="93:31"><name pos:start="93:22" pos:end="93:31">IVPOSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:35"><expr pos:start="95:5" pos:end="95:34"><call pos:start="95:5" pos:end="95:34"><name pos:start="95:5" pos:end="95:20">g_assert_cmpuint</name><argument_list pos:start="95:21" pos:end="95:34">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><name pos:start="95:22" pos:end="95:24">vm1</name></expr></argument>, <argument pos:start="95:27" pos:end="95:28"><expr pos:start="95:27" pos:end="95:28"><operator pos:start="95:27" pos:end="95:28">!=</operator></expr></argument>, <argument pos:start="95:31" pos:end="95:33"><expr pos:start="95:31" pos:end="95:33"><name pos:start="95:31" pos:end="95:33">vm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:29"><expr pos:start="99:5" pos:end="99:28"><name pos:start="99:5" pos:end="99:16">global_qtest</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:28"><name pos:start="99:20" pos:end="99:21">s1</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:28">qtest</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:40"><expr pos:start="101:5" pos:end="101:39"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:39"><name pos:start="101:11" pos:end="101:30">qpci_msix_table_size</name><argument_list pos:start="101:31" pos:end="101:39">(<argument pos:start="101:32" pos:end="101:38"><expr pos:start="101:32" pos:end="101:38"><name pos:start="101:32" pos:end="101:38"><name pos:start="101:32" pos:end="101:33">s1</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:38">dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:40"><expr pos:start="103:5" pos:end="103:39"><call pos:start="103:5" pos:end="103:39"><name pos:start="103:5" pos:end="103:20">g_assert_cmpuint</name><argument_list pos:start="103:21" pos:end="103:39">(<argument pos:start="103:22" pos:end="103:24"><expr pos:start="103:22" pos:end="103:24"><name pos:start="103:22" pos:end="103:24">ret</name></expr></argument>, <argument pos:start="103:27" pos:end="103:28"><expr pos:start="103:27" pos:end="103:28"><operator pos:start="103:27" pos:end="103:28">==</operator></expr></argument>, <argument pos:start="103:31" pos:end="103:38"><expr pos:start="103:31" pos:end="103:38"><name pos:start="103:31" pos:end="103:38">nvectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:25">/* ping vm2 -&gt; vm1 */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:40"><expr pos:start="109:5" pos:end="109:39"><name pos:start="109:5" pos:end="109:7">ret</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:39"><name pos:start="109:11" pos:end="109:27">qpci_msix_pending</name><argument_list pos:start="109:28" pos:end="109:39">(<argument pos:start="109:29" pos:end="109:35"><expr pos:start="109:29" pos:end="109:35"><name pos:start="109:29" pos:end="109:35"><name pos:start="109:29" pos:end="109:30">s1</name><operator pos:start="109:31" pos:end="109:32">-&gt;</operator><name pos:start="109:33" pos:end="109:35">dev</name></name></expr></argument>, <argument pos:start="109:38" pos:end="109:38"><expr pos:start="109:38" pos:end="109:38"><literal type="number" pos:start="109:38" pos:end="109:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:33"><expr pos:start="111:5" pos:end="111:32"><call pos:start="111:5" pos:end="111:32"><name pos:start="111:5" pos:end="111:20">g_assert_cmpuint</name><argument_list pos:start="111:21" pos:end="111:32">(<argument pos:start="111:22" pos:end="111:24"><expr pos:start="111:22" pos:end="111:24"><name pos:start="111:22" pos:end="111:24">ret</name></expr></argument>, <argument pos:start="111:27" pos:end="111:28"><expr pos:start="111:27" pos:end="111:28"><operator pos:start="111:27" pos:end="111:28">==</operator></expr></argument>, <argument pos:start="111:31" pos:end="111:31"><expr pos:start="111:31" pos:end="111:31"><literal type="number" pos:start="111:31" pos:end="111:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:37"><expr pos:start="113:5" pos:end="113:36"><call pos:start="113:5" pos:end="113:36"><name pos:start="113:5" pos:end="113:11">out_reg</name><argument_list pos:start="113:12" pos:end="113:36">(<argument pos:start="113:13" pos:end="113:14"><expr pos:start="113:13" pos:end="113:14"><name pos:start="113:13" pos:end="113:14">s2</name></expr></argument>, <argument pos:start="113:17" pos:end="113:24"><expr pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:24">DOORBELL</name></expr></argument>, <argument pos:start="113:27" pos:end="113:35"><expr pos:start="113:27" pos:end="113:35"><name pos:start="113:27" pos:end="113:29">vm1</name> <operator pos:start="113:31" pos:end="113:32">&lt;&lt;</operator> <literal type="number" pos:start="113:34" pos:end="113:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="115:5" pos:end="121:60">do <block pos:start="115:8" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:44">

        <expr_stmt pos:start="117:9" pos:end="117:24"><expr pos:start="117:9" pos:end="117:23"><call pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:16">g_usleep</name><argument_list pos:start="117:17" pos:end="117:23">(<argument pos:start="117:18" pos:end="117:22"><expr pos:start="117:18" pos:end="117:22"><literal type="number" pos:start="117:18" pos:end="117:22">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:44"><expr pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:43"><name pos:start="119:15" pos:end="119:31">qpci_msix_pending</name><argument_list pos:start="119:32" pos:end="119:43">(<argument pos:start="119:33" pos:end="119:39"><expr pos:start="119:33" pos:end="119:39"><name pos:start="119:33" pos:end="119:39"><name pos:start="119:33" pos:end="119:34">s1</name><operator pos:start="119:35" pos:end="119:36">-&gt;</operator><name pos:start="119:37" pos:end="119:39">dev</name></name></expr></argument>, <argument pos:start="119:42" pos:end="119:42"><expr pos:start="119:42" pos:end="119:42"><literal type="number" pos:start="119:42" pos:end="119:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="121:13" pos:end="121:59">(<expr pos:start="121:14" pos:end="121:58"><name pos:start="121:14" pos:end="121:16">ret</name> <operator pos:start="121:18" pos:end="121:19">==</operator> <literal type="number" pos:start="121:21" pos:end="121:21">0</literal> <operator pos:start="121:23" pos:end="121:24">&amp;&amp;</operator> <call pos:start="121:26" pos:end="121:47"><name pos:start="121:26" pos:end="121:45">g_get_monotonic_time</name><argument_list pos:start="121:46" pos:end="121:47">()</argument_list></call> <operator pos:start="121:49" pos:end="121:49">&lt;</operator> <name pos:start="121:51" pos:end="121:58">end_time</name></expr>)</condition>;</do>

    <expr_stmt pos:start="123:5" pos:end="123:33"><expr pos:start="123:5" pos:end="123:32"><call pos:start="123:5" pos:end="123:32"><name pos:start="123:5" pos:end="123:20">g_assert_cmpuint</name><argument_list pos:start="123:21" pos:end="123:32">(<argument pos:start="123:22" pos:end="123:24"><expr pos:start="123:22" pos:end="123:24"><name pos:start="123:22" pos:end="123:24">ret</name></expr></argument>, <argument pos:start="123:27" pos:end="123:28"><expr pos:start="123:27" pos:end="123:28"><operator pos:start="123:27" pos:end="123:28">!=</operator></expr></argument>, <argument pos:start="123:31" pos:end="123:31"><expr pos:start="123:31" pos:end="123:31"><literal type="number" pos:start="123:31" pos:end="123:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:25">/* ping vm1 -&gt; vm2 */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:29"><expr pos:start="129:5" pos:end="129:28"><name pos:start="129:5" pos:end="129:16">global_qtest</name> <operator pos:start="129:18" pos:end="129:18">=</operator> <name pos:start="129:20" pos:end="129:28"><name pos:start="129:20" pos:end="129:21">s2</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:28">qtest</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:40"><expr pos:start="131:5" pos:end="131:39"><name pos:start="131:5" pos:end="131:7">ret</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <call pos:start="131:11" pos:end="131:39"><name pos:start="131:11" pos:end="131:27">qpci_msix_pending</name><argument_list pos:start="131:28" pos:end="131:39">(<argument pos:start="131:29" pos:end="131:35"><expr pos:start="131:29" pos:end="131:35"><name pos:start="131:29" pos:end="131:35"><name pos:start="131:29" pos:end="131:30">s2</name><operator pos:start="131:31" pos:end="131:32">-&gt;</operator><name pos:start="131:33" pos:end="131:35">dev</name></name></expr></argument>, <argument pos:start="131:38" pos:end="131:38"><expr pos:start="131:38" pos:end="131:38"><literal type="number" pos:start="131:38" pos:end="131:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:33"><expr pos:start="133:5" pos:end="133:32"><call pos:start="133:5" pos:end="133:32"><name pos:start="133:5" pos:end="133:20">g_assert_cmpuint</name><argument_list pos:start="133:21" pos:end="133:32">(<argument pos:start="133:22" pos:end="133:24"><expr pos:start="133:22" pos:end="133:24"><name pos:start="133:22" pos:end="133:24">ret</name></expr></argument>, <argument pos:start="133:27" pos:end="133:28"><expr pos:start="133:27" pos:end="133:28"><operator pos:start="133:27" pos:end="133:28">==</operator></expr></argument>, <argument pos:start="133:31" pos:end="133:31"><expr pos:start="133:31" pos:end="133:31"><literal type="number" pos:start="133:31" pos:end="133:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:37"><expr pos:start="135:5" pos:end="135:36"><call pos:start="135:5" pos:end="135:36"><name pos:start="135:5" pos:end="135:11">out_reg</name><argument_list pos:start="135:12" pos:end="135:36">(<argument pos:start="135:13" pos:end="135:14"><expr pos:start="135:13" pos:end="135:14"><name pos:start="135:13" pos:end="135:14">s1</name></expr></argument>, <argument pos:start="135:17" pos:end="135:24"><expr pos:start="135:17" pos:end="135:24"><name pos:start="135:17" pos:end="135:24">DOORBELL</name></expr></argument>, <argument pos:start="135:27" pos:end="135:35"><expr pos:start="135:27" pos:end="135:35"><name pos:start="135:27" pos:end="135:29">vm2</name> <operator pos:start="135:31" pos:end="135:32">&lt;&lt;</operator> <literal type="number" pos:start="135:34" pos:end="135:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="137:5" pos:end="143:60">do <block pos:start="137:8" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:44">

        <expr_stmt pos:start="139:9" pos:end="139:24"><expr pos:start="139:9" pos:end="139:23"><call pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:16">g_usleep</name><argument_list pos:start="139:17" pos:end="139:23">(<argument pos:start="139:18" pos:end="139:22"><expr pos:start="139:18" pos:end="139:22"><literal type="number" pos:start="139:18" pos:end="139:22">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:44"><expr pos:start="141:9" pos:end="141:43"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="141:43"><name pos:start="141:15" pos:end="141:31">qpci_msix_pending</name><argument_list pos:start="141:32" pos:end="141:43">(<argument pos:start="141:33" pos:end="141:39"><expr pos:start="141:33" pos:end="141:39"><name pos:start="141:33" pos:end="141:39"><name pos:start="141:33" pos:end="141:34">s2</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:39">dev</name></name></expr></argument>, <argument pos:start="141:42" pos:end="141:42"><expr pos:start="141:42" pos:end="141:42"><literal type="number" pos:start="141:42" pos:end="141:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="143:13" pos:end="143:59">(<expr pos:start="143:14" pos:end="143:58"><name pos:start="143:14" pos:end="143:16">ret</name> <operator pos:start="143:18" pos:end="143:19">==</operator> <literal type="number" pos:start="143:21" pos:end="143:21">0</literal> <operator pos:start="143:23" pos:end="143:24">&amp;&amp;</operator> <call pos:start="143:26" pos:end="143:47"><name pos:start="143:26" pos:end="143:45">g_get_monotonic_time</name><argument_list pos:start="143:46" pos:end="143:47">()</argument_list></call> <operator pos:start="143:49" pos:end="143:49">&lt;</operator> <name pos:start="143:51" pos:end="143:58">end_time</name></expr>)</condition>;</do>

    <expr_stmt pos:start="145:5" pos:end="145:33"><expr pos:start="145:5" pos:end="145:32"><call pos:start="145:5" pos:end="145:32"><name pos:start="145:5" pos:end="145:20">g_assert_cmpuint</name><argument_list pos:start="145:21" pos:end="145:32">(<argument pos:start="145:22" pos:end="145:24"><expr pos:start="145:22" pos:end="145:24"><name pos:start="145:22" pos:end="145:24">ret</name></expr></argument>, <argument pos:start="145:27" pos:end="145:28"><expr pos:start="145:27" pos:end="145:28"><operator pos:start="145:27" pos:end="145:28">!=</operator></expr></argument>, <argument pos:start="145:31" pos:end="145:31"><expr pos:start="145:31" pos:end="145:31"><literal type="number" pos:start="145:31" pos:end="145:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:26"><expr pos:start="149:5" pos:end="149:25"><call pos:start="149:5" pos:end="149:25"><name pos:start="149:5" pos:end="149:14">qtest_quit</name><argument_list pos:start="149:15" pos:end="149:25">(<argument pos:start="149:16" pos:end="149:24"><expr pos:start="149:16" pos:end="149:24"><name pos:start="149:16" pos:end="149:24"><name pos:start="149:16" pos:end="149:17">s2</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:24">qtest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:26"><expr pos:start="151:5" pos:end="151:25"><call pos:start="151:5" pos:end="151:25"><name pos:start="151:5" pos:end="151:14">qtest_quit</name><argument_list pos:start="151:15" pos:end="151:25">(<argument pos:start="151:16" pos:end="151:24"><expr pos:start="151:16" pos:end="151:24"><name pos:start="151:16" pos:end="151:24"><name pos:start="151:16" pos:end="151:17">s1</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:24">qtest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:53">(<expr pos:start="155:9" pos:end="155:52"><call pos:start="155:9" pos:end="155:47"><name pos:start="155:9" pos:end="155:23">qemu_write_full</name><argument_list pos:start="155:24" pos:end="155:47">(<argument pos:start="155:25" pos:end="155:38"><expr pos:start="155:25" pos:end="155:38"><name pos:start="155:25" pos:end="155:38"><name pos:start="155:25" pos:end="155:30">thread</name><operator pos:start="155:31" pos:end="155:31">.</operator><name pos:start="155:32" pos:end="155:35">pipe</name><index pos:start="155:36" pos:end="155:38">[<expr pos:start="155:37" pos:end="155:37"><literal type="number" pos:start="155:37" pos:end="155:37">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="155:41" pos:end="155:43"><expr pos:start="155:41" pos:end="155:43"><literal type="string" pos:start="155:41" pos:end="155:43">"q"</literal></expr></argument>, <argument pos:start="155:46" pos:end="155:46"><expr pos:start="155:46" pos:end="155:46"><literal type="number" pos:start="155:46" pos:end="155:46">1</literal></expr></argument>)</argument_list></call> <operator pos:start="155:49" pos:end="155:50">!=</operator> <literal type="number" pos:start="155:52" pos:end="155:52">1</literal></expr>)</condition> <block pos:start="155:55" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:58">

        <expr_stmt pos:start="157:9" pos:end="157:58"><expr pos:start="157:9" pos:end="157:57"><call pos:start="157:9" pos:end="157:57"><name pos:start="157:9" pos:end="157:15">g_error</name><argument_list pos:start="157:16" pos:end="157:57">(<argument pos:start="157:17" pos:end="157:37"><expr pos:start="157:17" pos:end="157:37"><literal type="string" pos:start="157:17" pos:end="157:37">"qemu_write_full: %s"</literal></expr></argument>, <argument pos:start="157:40" pos:end="157:56"><expr pos:start="157:40" pos:end="157:56"><call pos:start="157:40" pos:end="157:56"><name pos:start="157:40" pos:end="157:49">g_strerror</name><argument_list pos:start="157:50" pos:end="157:56">(<argument pos:start="157:51" pos:end="157:55"><expr pos:start="157:51" pos:end="157:55"><name pos:start="157:51" pos:end="157:55">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:33"><expr pos:start="163:5" pos:end="163:32"><call pos:start="163:5" pos:end="163:32"><name pos:start="163:5" pos:end="163:17">g_thread_join</name><argument_list pos:start="163:18" pos:end="163:32">(<argument pos:start="163:19" pos:end="163:31"><expr pos:start="163:19" pos:end="163:31"><name pos:start="163:19" pos:end="163:31"><name pos:start="163:19" pos:end="163:24">thread</name><operator pos:start="163:25" pos:end="163:25">.</operator><name pos:start="163:26" pos:end="163:31">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:34"><expr pos:start="167:5" pos:end="167:33"><call pos:start="167:5" pos:end="167:33"><name pos:start="167:5" pos:end="167:24">ivshmem_server_close</name><argument_list pos:start="167:25" pos:end="167:33">(<argument pos:start="167:26" pos:end="167:32"><expr pos:start="167:26" pos:end="167:32"><operator pos:start="167:26" pos:end="167:26">&amp;</operator><name pos:start="167:27" pos:end="167:32">server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:26"><expr pos:start="169:5" pos:end="169:25"><call pos:start="169:5" pos:end="169:25"><name pos:start="169:5" pos:end="169:9">close</name><argument_list pos:start="169:10" pos:end="169:25">(<argument pos:start="169:11" pos:end="169:24"><expr pos:start="169:11" pos:end="169:24"><name pos:start="169:11" pos:end="169:24"><name pos:start="169:11" pos:end="169:16">thread</name><operator pos:start="169:17" pos:end="169:17">.</operator><name pos:start="169:18" pos:end="169:21">pipe</name><index pos:start="169:22" pos:end="169:24">[<expr pos:start="169:23" pos:end="169:23"><literal type="number" pos:start="169:23" pos:end="169:23">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:26"><expr pos:start="171:5" pos:end="171:25"><call pos:start="171:5" pos:end="171:25"><name pos:start="171:5" pos:end="171:9">close</name><argument_list pos:start="171:10" pos:end="171:25">(<argument pos:start="171:11" pos:end="171:24"><expr pos:start="171:11" pos:end="171:24"><name pos:start="171:11" pos:end="171:24"><name pos:start="171:11" pos:end="171:16">thread</name><operator pos:start="171:17" pos:end="171:17">.</operator><name pos:start="171:18" pos:end="171:21">pipe</name><index pos:start="171:22" pos:end="171:24">[<expr pos:start="171:23" pos:end="171:23"><literal type="number" pos:start="171:23" pos:end="171:23">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
