<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21801.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">mem_info</name><parameter_list pos:start="1:21" pos:end="1:34">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:30"><name pos:start="1:22" pos:end="1:28">Monitor</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">mon</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:5">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">l1</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:14">l2</name></decl>, <decl pos:start="7:17" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:20">prot</name></decl>, <decl pos:start="7:23" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:31">last_prot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">pgd</name></decl>, <decl pos:start="9:19" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:21">pde</name></decl>, <decl pos:start="9:24" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:24" pos:end="9:26">pte</name></decl>, <decl pos:start="9:29" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:29" pos:end="9:33">start</name></decl>, <decl pos:start="9:36" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:36" pos:end="9:38">end</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:7">env</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:23"><name pos:start="13:11" pos:end="13:21">mon_get_cpu</name><argument_list pos:start="13:22" pos:end="13:23">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:15"><if pos:start="15:5" pos:end="17:15">if <condition pos:start="15:8" pos:end="15:13">(<expr pos:start="15:9" pos:end="15:12"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">env</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:15"><block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:36">(<expr pos:start="21:9" pos:end="21:35"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:20"><name pos:start="21:11" pos:end="21:13">env</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:17">cr</name><index pos:start="21:18" pos:end="21:20">[<expr pos:start="21:19" pos:end="21:19"><literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>]</index></name> <operator pos:start="21:22" pos:end="21:22">&amp;</operator> <name pos:start="21:24" pos:end="21:34">CR0_PG_MASK</name><operator pos:start="21:35" pos:end="21:35">)</operator></expr>)</condition> <block pos:start="21:38" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:45"><expr pos:start="23:9" pos:end="23:44"><call pos:start="23:9" pos:end="23:44"><name pos:start="23:9" pos:end="23:22">monitor_printf</name><argument_list pos:start="23:23" pos:end="23:44">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">mon</name></expr></argument>, <argument pos:start="23:29" pos:end="23:43"><expr pos:start="23:29" pos:end="23:43"><literal type="string" pos:start="23:29" pos:end="23:43">"PG disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:7">pgd</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:20"><name pos:start="29:11" pos:end="29:13">env</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:17">cr</name><index pos:start="29:18" pos:end="29:20">[<expr pos:start="29:19" pos:end="29:19"><literal type="number" pos:start="29:19" pos:end="29:19">3</literal></expr>]</index></name> <operator pos:start="29:22" pos:end="29:22">&amp;</operator> <operator pos:start="29:24" pos:end="29:24">~</operator><literal type="number" pos:start="29:25" pos:end="29:29">0xfff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:13">last_prot</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:15"><expr pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:9">start</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <operator pos:start="33:13" pos:end="33:13">-</operator><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="87:5">for<control pos:start="35:8" pos:end="35:32">(<init pos:start="35:9" pos:end="35:15"><expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">l1</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:26"><expr pos:start="35:17" pos:end="35:25"><name pos:start="35:17" pos:end="35:18">l1</name> <operator pos:start="35:20" pos:end="35:20">&lt;</operator> <literal type="number" pos:start="35:22" pos:end="35:25">1024</literal></expr>;</condition> <incr pos:start="35:28" pos:end="35:31"><expr pos:start="35:28" pos:end="35:31"><name pos:start="35:28" pos:end="35:29">l1</name><operator pos:start="35:30" pos:end="35:31">++</operator></expr></incr>)</control> <block pos:start="35:34" pos:end="87:5">{<block_content pos:start="37:9" pos:end="85:9">

        <expr_stmt pos:start="37:9" pos:end="37:67"><expr pos:start="37:9" pos:end="37:66"><call pos:start="37:9" pos:end="37:66"><name pos:start="37:9" pos:end="37:32">cpu_physical_memory_read</name><argument_list pos:start="37:33" pos:end="37:66">(<argument pos:start="37:34" pos:end="37:45"><expr pos:start="37:34" pos:end="37:45"><name pos:start="37:34" pos:end="37:36">pgd</name> <operator pos:start="37:38" pos:end="37:38">+</operator> <name pos:start="37:40" pos:end="37:41">l1</name> <operator pos:start="37:43" pos:end="37:43">*</operator> <literal type="number" pos:start="37:45" pos:end="37:45">4</literal></expr></argument>, <argument pos:start="37:48" pos:end="37:62"><expr pos:start="37:48" pos:end="37:62"><operator pos:start="37:48" pos:end="37:48">(</operator><name pos:start="37:49" pos:end="37:55">uint8_t</name> <operator pos:start="37:57" pos:end="37:57">*</operator><operator pos:start="37:58" pos:end="37:58">)</operator><operator pos:start="37:59" pos:end="37:59">&amp;</operator><name pos:start="37:60" pos:end="37:62">pde</name></expr></argument>, <argument pos:start="37:65" pos:end="37:65"><expr pos:start="37:65" pos:end="37:65"><literal type="number" pos:start="37:65" pos:end="37:65">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:31"><expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:11">pde</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:30"><name pos:start="39:15" pos:end="39:25">le32_to_cpu</name><argument_list pos:start="39:26" pos:end="39:30">(<argument pos:start="39:27" pos:end="39:29"><expr pos:start="39:27" pos:end="39:29"><name pos:start="39:27" pos:end="39:29">pde</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:11">end</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:16">l1</name> <operator pos:start="41:18" pos:end="41:19">&lt;&lt;</operator> <literal type="number" pos:start="41:21" pos:end="41:22">22</literal></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="85:9"><if pos:start="43:9" pos:end="79:9">if <condition pos:start="43:12" pos:end="43:34">(<expr pos:start="43:13" pos:end="43:33"><name pos:start="43:13" pos:end="43:15">pde</name> <operator pos:start="43:17" pos:end="43:17">&amp;</operator> <name pos:start="43:19" pos:end="43:33">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="43:36" pos:end="79:9">{<block_content pos:start="45:13" pos:end="77:13">

            <if_stmt pos:start="45:13" pos:end="77:13"><if pos:start="45:13" pos:end="51:13">if <condition pos:start="45:16" pos:end="45:67">(<expr pos:start="45:17" pos:end="45:66"><operator pos:start="45:17" pos:end="45:17">(</operator><name pos:start="45:18" pos:end="45:20">pde</name> <operator pos:start="45:22" pos:end="45:22">&amp;</operator> <name pos:start="45:24" pos:end="45:34">PG_PSE_MASK</name><operator pos:start="45:35" pos:end="45:35">)</operator> <operator pos:start="45:37" pos:end="45:38">&amp;&amp;</operator> <operator pos:start="45:40" pos:end="45:40">(</operator><name pos:start="45:41" pos:end="45:50"><name pos:start="45:41" pos:end="45:43">env</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:47">cr</name><index pos:start="45:48" pos:end="45:50">[<expr pos:start="45:49" pos:end="45:49"><literal type="number" pos:start="45:49" pos:end="45:49">4</literal></expr>]</index></name> <operator pos:start="45:52" pos:end="45:52">&amp;</operator> <name pos:start="45:54" pos:end="45:65">CR4_PSE_MASK</name><operator pos:start="45:66" pos:end="45:66">)</operator></expr>)</condition> <block pos:start="45:69" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:62">

                <expr_stmt pos:start="47:17" pos:end="47:75"><expr pos:start="47:17" pos:end="47:74"><name pos:start="47:17" pos:end="47:20">prot</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:26">pde</name> <operator pos:start="47:28" pos:end="47:28">&amp;</operator> <operator pos:start="47:30" pos:end="47:30">(</operator><name pos:start="47:31" pos:end="47:42">PG_USER_MASK</name> <operator pos:start="47:44" pos:end="47:44">|</operator> <name pos:start="47:46" pos:end="47:55">PG_RW_MASK</name> <operator pos:start="47:57" pos:end="47:57">|</operator> <name pos:start="47:59" pos:end="47:73">PG_PRESENT_MASK</name><operator pos:start="47:74" pos:end="47:74">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:62"><expr pos:start="49:17" pos:end="49:61"><call pos:start="49:17" pos:end="49:61"><name pos:start="49:17" pos:end="49:25">mem_print</name><argument_list pos:start="49:26" pos:end="49:61">(<argument pos:start="49:27" pos:end="49:29"><expr pos:start="49:27" pos:end="49:29"><name pos:start="49:27" pos:end="49:29">mon</name></expr></argument>, <argument pos:start="49:32" pos:end="49:37"><expr pos:start="49:32" pos:end="49:37"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:37">start</name></expr></argument>, <argument pos:start="49:40" pos:end="49:49"><expr pos:start="49:40" pos:end="49:49"><operator pos:start="49:40" pos:end="49:40">&amp;</operator><name pos:start="49:41" pos:end="49:49">last_prot</name></expr></argument>, <argument pos:start="49:52" pos:end="49:54"><expr pos:start="49:52" pos:end="49:54"><name pos:start="49:52" pos:end="49:54">end</name></expr></argument>, <argument pos:start="49:57" pos:end="49:60"><expr pos:start="49:57" pos:end="49:60"><name pos:start="49:57" pos:end="49:60">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="77:13">else <block pos:start="51:20" pos:end="77:13">{<block_content pos:start="53:17" pos:end="75:17">

                <for pos:start="53:17" pos:end="75:17">for<control pos:start="53:20" pos:end="53:44">(<init pos:start="53:21" pos:end="53:27"><expr pos:start="53:21" pos:end="53:26"><name pos:start="53:21" pos:end="53:22">l2</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <literal type="number" pos:start="53:26" pos:end="53:26">0</literal></expr>;</init> <condition pos:start="53:29" pos:end="53:38"><expr pos:start="53:29" pos:end="53:37"><name pos:start="53:29" pos:end="53:30">l2</name> <operator pos:start="53:32" pos:end="53:32">&lt;</operator> <literal type="number" pos:start="53:34" pos:end="53:37">1024</literal></expr>;</condition> <incr pos:start="53:40" pos:end="53:43"><expr pos:start="53:40" pos:end="53:43"><name pos:start="53:40" pos:end="53:41">l2</name><operator pos:start="53:42" pos:end="53:43">++</operator></expr></incr>)</control> <block pos:start="53:46" pos:end="75:17">{<block_content pos:start="55:21" pos:end="73:66">

                    <expr_stmt pos:start="55:21" pos:end="57:65"><expr pos:start="55:21" pos:end="57:64"><call pos:start="55:21" pos:end="57:64"><name pos:start="55:21" pos:end="55:44">cpu_physical_memory_read</name><argument_list pos:start="55:45" pos:end="57:64">(<argument pos:start="55:46" pos:end="55:68"><expr pos:start="55:46" pos:end="55:68"><operator pos:start="55:46" pos:end="55:46">(</operator><name pos:start="55:47" pos:end="55:49">pde</name> <operator pos:start="55:51" pos:end="55:51">&amp;</operator> <operator pos:start="55:53" pos:end="55:53">~</operator><literal type="number" pos:start="55:54" pos:end="55:58">0xfff</literal><operator pos:start="55:59" pos:end="55:59">)</operator> <operator pos:start="55:61" pos:end="55:61">+</operator> <name pos:start="55:63" pos:end="55:64">l2</name> <operator pos:start="55:66" pos:end="55:66">*</operator> <literal type="number" pos:start="55:68" pos:end="55:68">4</literal></expr></argument>,

                                             <argument pos:start="57:46" pos:end="57:60"><expr pos:start="57:46" pos:end="57:60"><operator pos:start="57:46" pos:end="57:46">(</operator><name pos:start="57:47" pos:end="57:53">uint8_t</name> <operator pos:start="57:55" pos:end="57:55">*</operator><operator pos:start="57:56" pos:end="57:56">)</operator><operator pos:start="57:57" pos:end="57:57">&amp;</operator><name pos:start="57:58" pos:end="57:60">pte</name></expr></argument>, <argument pos:start="57:63" pos:end="57:63"><expr pos:start="57:63" pos:end="57:63"><literal type="number" pos:start="57:63" pos:end="57:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="59:43"><expr pos:start="59:21" pos:end="59:42"><name pos:start="59:21" pos:end="59:23">pte</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <call pos:start="59:27" pos:end="59:42"><name pos:start="59:27" pos:end="59:37">le32_to_cpu</name><argument_list pos:start="59:38" pos:end="59:42">(<argument pos:start="59:39" pos:end="59:41"><expr pos:start="59:39" pos:end="59:41"><name pos:start="59:39" pos:end="59:41">pte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="61:21" pos:end="61:50"><expr pos:start="61:21" pos:end="61:49"><name pos:start="61:21" pos:end="61:23">end</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <operator pos:start="61:27" pos:end="61:27">(</operator><name pos:start="61:28" pos:end="61:29">l1</name> <operator pos:start="61:31" pos:end="61:32">&lt;&lt;</operator> <literal type="number" pos:start="61:34" pos:end="61:35">22</literal><operator pos:start="61:36" pos:end="61:36">)</operator> <operator pos:start="61:38" pos:end="61:38">+</operator> <operator pos:start="61:40" pos:end="61:40">(</operator><name pos:start="61:41" pos:end="61:42">l2</name> <operator pos:start="61:44" pos:end="61:45">&lt;&lt;</operator> <literal type="number" pos:start="61:47" pos:end="61:48">12</literal><operator pos:start="61:49" pos:end="61:49">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="63:21" pos:end="71:21"><if pos:start="63:21" pos:end="67:21">if <condition pos:start="63:24" pos:end="63:46">(<expr pos:start="63:25" pos:end="63:45"><name pos:start="63:25" pos:end="63:27">pte</name> <operator pos:start="63:29" pos:end="63:29">&amp;</operator> <name pos:start="63:31" pos:end="63:45">PG_PRESENT_MASK</name></expr>)</condition> <block pos:start="63:48" pos:end="67:21">{<block_content pos:start="65:25" pos:end="65:83">

                        <expr_stmt pos:start="65:25" pos:end="65:83"><expr pos:start="65:25" pos:end="65:82"><name pos:start="65:25" pos:end="65:28">prot</name> <operator pos:start="65:30" pos:end="65:30">=</operator> <name pos:start="65:32" pos:end="65:34">pte</name> <operator pos:start="65:36" pos:end="65:36">&amp;</operator> <operator pos:start="65:38" pos:end="65:38">(</operator><name pos:start="65:39" pos:end="65:50">PG_USER_MASK</name> <operator pos:start="65:52" pos:end="65:52">|</operator> <name pos:start="65:54" pos:end="65:63">PG_RW_MASK</name> <operator pos:start="65:65" pos:end="65:65">|</operator> <name pos:start="65:67" pos:end="65:81">PG_PRESENT_MASK</name><operator pos:start="65:82" pos:end="65:82">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="67:23" pos:end="71:21">else <block pos:start="67:28" pos:end="71:21">{<block_content pos:start="69:25" pos:end="69:33">

                        <expr_stmt pos:start="69:25" pos:end="69:33"><expr pos:start="69:25" pos:end="69:32"><name pos:start="69:25" pos:end="69:28">prot</name> <operator pos:start="69:30" pos:end="69:30">=</operator> <literal type="number" pos:start="69:32" pos:end="69:32">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="73:21" pos:end="73:66"><expr pos:start="73:21" pos:end="73:65"><call pos:start="73:21" pos:end="73:65"><name pos:start="73:21" pos:end="73:29">mem_print</name><argument_list pos:start="73:30" pos:end="73:65">(<argument pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:33">mon</name></expr></argument>, <argument pos:start="73:36" pos:end="73:41"><expr pos:start="73:36" pos:end="73:41"><operator pos:start="73:36" pos:end="73:36">&amp;</operator><name pos:start="73:37" pos:end="73:41">start</name></expr></argument>, <argument pos:start="73:44" pos:end="73:53"><expr pos:start="73:44" pos:end="73:53"><operator pos:start="73:44" pos:end="73:44">&amp;</operator><name pos:start="73:45" pos:end="73:53">last_prot</name></expr></argument>, <argument pos:start="73:56" pos:end="73:58"><expr pos:start="73:56" pos:end="73:58"><name pos:start="73:56" pos:end="73:58">end</name></expr></argument>, <argument pos:start="73:61" pos:end="73:64"><expr pos:start="73:61" pos:end="73:64"><name pos:start="73:61" pos:end="73:64">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="85:9">else <block pos:start="79:16" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:58">

            <expr_stmt pos:start="81:13" pos:end="81:21"><expr pos:start="81:13" pos:end="81:20"><name pos:start="81:13" pos:end="81:16">prot</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:58"><expr pos:start="83:13" pos:end="83:57"><call pos:start="83:13" pos:end="83:57"><name pos:start="83:13" pos:end="83:21">mem_print</name><argument_list pos:start="83:22" pos:end="83:57">(<argument pos:start="83:23" pos:end="83:25"><expr pos:start="83:23" pos:end="83:25"><name pos:start="83:23" pos:end="83:25">mon</name></expr></argument>, <argument pos:start="83:28" pos:end="83:33"><expr pos:start="83:28" pos:end="83:33"><operator pos:start="83:28" pos:end="83:28">&amp;</operator><name pos:start="83:29" pos:end="83:33">start</name></expr></argument>, <argument pos:start="83:36" pos:end="83:45"><expr pos:start="83:36" pos:end="83:45"><operator pos:start="83:36" pos:end="83:36">&amp;</operator><name pos:start="83:37" pos:end="83:45">last_prot</name></expr></argument>, <argument pos:start="83:48" pos:end="83:50"><expr pos:start="83:48" pos:end="83:50"><name pos:start="83:48" pos:end="83:50">end</name></expr></argument>, <argument pos:start="83:53" pos:end="83:56"><expr pos:start="83:53" pos:end="83:56"><name pos:start="83:53" pos:end="83:56">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
