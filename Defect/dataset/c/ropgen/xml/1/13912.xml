<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13912.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">sclp_service_call</name><parameter_list pos:start="1:22" pos:end="1:51">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:30">uint64_t</name></type> <name pos:start="1:32" pos:end="1:35">sccb</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:50"><decl pos:start="1:38" pos:end="1:50"><type pos:start="1:38" pos:end="1:50"><name pos:start="1:38" pos:end="1:45">uint32_t</name></type> <name pos:start="1:47" pos:end="1:50">code</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">r</name> <init pos:start="5:11" pos:end="5:13">= <expr pos:start="5:13" pos:end="5:13"><literal type="number" pos:start="5:13" pos:end="5:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">SCCB</name></type> <name pos:start="7:10" pos:end="7:18">work_sccb</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:19">sccb_len</name> <init pos:start="11:21" pos:end="11:34">= <expr pos:start="11:23" pos:end="11:34"><sizeof pos:start="11:23" pos:end="11:34">sizeof<argument_list pos:start="11:29" pos:end="11:34">(<argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">SCCB</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:51">/* first some basic checks on program checks */</comment>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:40">(<expr pos:start="17:9" pos:end="17:39"><call pos:start="17:9" pos:end="17:39"><name pos:start="17:9" pos:end="17:33">cpu_physical_memory_is_io</name><argument_list pos:start="17:34" pos:end="17:39">(<argument pos:start="17:35" pos:end="17:38"><expr pos:start="17:35" pos:end="17:38"><name pos:start="17:35" pos:end="17:38">sccb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:42" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:17">

        <expr_stmt pos:start="19:9" pos:end="19:28"><expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:9">r</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <operator pos:start="19:13" pos:end="19:13">-</operator><name pos:start="19:14" pos:end="19:27">PGM_ADDRESSING</name></expr>;</expr_stmt>

        <goto pos:start="21:9" pos:end="21:17">goto <name pos:start="21:14" pos:end="21:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:29">(<expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:12">sccb</name> <operator pos:start="25:14" pos:end="25:14">&amp;</operator> <operator pos:start="25:16" pos:end="25:16">~</operator><literal type="number" pos:start="25:17" pos:end="25:28">0x7ffffff8ul</literal></expr>)</condition> <block pos:start="25:31" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:9">r</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <operator pos:start="27:13" pos:end="27:13">-</operator><name pos:start="27:14" pos:end="27:30">PGM_SPECIFICATION</name></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="43:7">/*

     * we want to work on a private copy of the sccb, to prevent guests

     * from playing dirty tricks by modifying the memory content after

     * the host has checked the values

     */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:57"><expr pos:start="45:5" pos:end="45:56"><call pos:start="45:5" pos:end="45:56"><name pos:start="45:5" pos:end="45:28">cpu_physical_memory_read</name><argument_list pos:start="45:29" pos:end="45:56">(<argument pos:start="45:30" pos:end="45:33"><expr pos:start="45:30" pos:end="45:33"><name pos:start="45:30" pos:end="45:33">sccb</name></expr></argument>, <argument pos:start="45:36" pos:end="45:45"><expr pos:start="45:36" pos:end="45:45"><operator pos:start="45:36" pos:end="45:36">&amp;</operator><name pos:start="45:37" pos:end="45:45">work_sccb</name></expr></argument>, <argument pos:start="45:48" pos:end="45:55"><expr pos:start="45:48" pos:end="45:55"><name pos:start="45:48" pos:end="45:55">sccb_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:26">/* Valid sccb sizes */</comment>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="53:52">(<expr pos:start="51:9" pos:end="53:51"><call pos:start="51:9" pos:end="51:39"><name pos:start="51:9" pos:end="51:19">be16_to_cpu</name><argument_list pos:start="51:20" pos:end="51:39">(<argument pos:start="51:21" pos:end="51:38"><expr pos:start="51:21" pos:end="51:38"><name pos:start="51:21" pos:end="51:38"><name pos:start="51:21" pos:end="51:29">work_sccb</name><operator pos:start="51:30" pos:end="51:30">.</operator><name pos:start="51:31" pos:end="51:31">h</name><operator pos:start="51:32" pos:end="51:32">.</operator><name pos:start="51:33" pos:end="51:38">length</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:41" pos:end="51:41">&lt;</operator> <sizeof pos:start="51:43" pos:end="51:60">sizeof<argument_list pos:start="51:49" pos:end="51:60">(<argument pos:start="51:50" pos:end="51:59"><expr pos:start="51:50" pos:end="51:59"><name pos:start="51:50" pos:end="51:59">SCCBHeader</name></expr></argument>)</argument_list></sizeof> <operator pos:start="51:62" pos:end="51:63">||</operator>

        <call pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:19">be16_to_cpu</name><argument_list pos:start="53:20" pos:end="53:39">(<argument pos:start="53:21" pos:end="53:38"><expr pos:start="53:21" pos:end="53:38"><name pos:start="53:21" pos:end="53:38"><name pos:start="53:21" pos:end="53:29">work_sccb</name><operator pos:start="53:30" pos:end="53:30">.</operator><name pos:start="53:31" pos:end="53:31">h</name><operator pos:start="53:32" pos:end="53:32">.</operator><name pos:start="53:33" pos:end="53:38">length</name></name></expr></argument>)</argument_list></call> <operator pos:start="53:41" pos:end="53:41">&gt;</operator> <name pos:start="53:43" pos:end="53:51">SCCB_SIZE</name></expr>)</condition> <block pos:start="53:54" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:17">

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:9">r</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <operator pos:start="55:13" pos:end="55:13">-</operator><name pos:start="55:14" pos:end="55:30">PGM_SPECIFICATION</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:17">goto <name pos:start="57:14" pos:end="57:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><call pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:16">sclp_execute</name><argument_list pos:start="63:17" pos:end="63:42">(<argument pos:start="63:18" pos:end="63:35"><expr pos:start="63:18" pos:end="63:35"><operator pos:start="63:18" pos:end="63:18">(</operator><name pos:start="63:19" pos:end="63:22">SCCB</name> <operator pos:start="63:24" pos:end="63:24">*</operator><operator pos:start="63:25" pos:end="63:25">)</operator><operator pos:start="63:26" pos:end="63:26">&amp;</operator><name pos:start="63:27" pos:end="63:35">work_sccb</name></expr></argument>, <argument pos:start="63:38" pos:end="63:41"><expr pos:start="63:38" pos:end="63:41"><name pos:start="63:38" pos:end="63:41">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="69:63"><expr pos:start="67:5" pos:end="69:62"><call pos:start="67:5" pos:end="69:62"><name pos:start="67:5" pos:end="67:29">cpu_physical_memory_write</name><argument_list pos:start="67:30" pos:end="69:62">(<argument pos:start="67:31" pos:end="67:34"><expr pos:start="67:31" pos:end="67:34"><name pos:start="67:31" pos:end="67:34">sccb</name></expr></argument>, <argument pos:start="67:37" pos:end="67:46"><expr pos:start="67:37" pos:end="67:46"><operator pos:start="67:37" pos:end="67:37">&amp;</operator><name pos:start="67:38" pos:end="67:46">work_sccb</name></expr></argument>,

                              <argument pos:start="69:31" pos:end="69:61"><expr pos:start="69:31" pos:end="69:61"><call pos:start="69:31" pos:end="69:61"><name pos:start="69:31" pos:end="69:41">be16_to_cpu</name><argument_list pos:start="69:42" pos:end="69:61">(<argument pos:start="69:43" pos:end="69:60"><expr pos:start="69:43" pos:end="69:60"><name pos:start="69:43" pos:end="69:60"><name pos:start="69:43" pos:end="69:51">work_sccb</name><operator pos:start="69:52" pos:end="69:52">.</operator><name pos:start="69:53" pos:end="69:53">h</name><operator pos:start="69:54" pos:end="69:54">.</operator><name pos:start="69:55" pos:end="69:60">length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><call pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:26">sclp_service_interrupt</name><argument_list pos:start="73:27" pos:end="73:32">(<argument pos:start="73:28" pos:end="73:31"><expr pos:start="73:28" pos:end="73:31"><name pos:start="73:28" pos:end="73:31">sccb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="77:1" pos:end="77:4"><name pos:start="77:1" pos:end="77:3">out</name>:</label>

    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><name pos:start="79:12" pos:end="79:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
