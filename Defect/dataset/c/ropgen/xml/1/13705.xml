<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13705.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">qemu_rbd_complete_aio</name><parameter_list pos:start="1:34" pos:end="1:47">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:43"><name pos:start="1:35" pos:end="1:41">RADOSCB</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">rcb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:16">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">RBDAIOCB</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">acb</name> <init pos:start="5:19" pos:end="5:28">= <expr pos:start="5:21" pos:end="5:28"><name pos:start="5:21" pos:end="5:28"><name pos:start="5:21" pos:end="5:23">rcb</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:28">acb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:13">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:17"><expr pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:5">r</name> <operator pos:start="11:7" pos:end="11:7">=</operator> <name pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:11">rcb</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:16">ret</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="55:5"><if pos:start="15:5" pos:end="29:5">if <condition pos:start="15:8" pos:end="15:33">(<expr pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:11">acb</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:16">cmd</name></name> <operator pos:start="15:18" pos:end="15:19">!=</operator> <name pos:start="15:21" pos:end="15:32">RBD_AIO_READ</name></expr>)</condition> <block pos:start="15:35" pos:end="29:5">{<block_content pos:start="17:9" pos:end="27:9">

        <if_stmt pos:start="17:9" pos:end="27:9"><if pos:start="17:9" pos:end="23:9">if <condition pos:start="17:12" pos:end="17:18">(<expr pos:start="17:13" pos:end="17:17"><name pos:start="17:13" pos:end="17:13">r</name> <operator pos:start="17:15" pos:end="17:15">&lt;</operator> <literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr>)</condition> <block pos:start="17:20" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:27">

            <expr_stmt pos:start="19:13" pos:end="19:25"><expr pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:15">acb</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:20">ret</name></name> <operator pos:start="19:22" pos:end="19:22">=</operator> <name pos:start="19:24" pos:end="19:24">r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:27"><expr pos:start="21:13" pos:end="21:26"><name pos:start="21:13" pos:end="21:22"><name pos:start="21:13" pos:end="21:15">acb</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:22">error</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <literal type="number" pos:start="21:26" pos:end="21:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="23:11" pos:end="27:9">else if <condition pos:start="23:19" pos:end="23:31">(<expr pos:start="23:20" pos:end="23:30"><operator pos:start="23:20" pos:end="23:20">!</operator><name pos:start="23:21" pos:end="23:30"><name pos:start="23:21" pos:end="23:23">acb</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:30">error</name></name></expr>)</condition> <block pos:start="23:33" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:33">

            <expr_stmt pos:start="25:13" pos:end="25:33"><expr pos:start="25:13" pos:end="25:32"><name pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:15">acb</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:20">ret</name></name> <operator pos:start="25:22" pos:end="25:22">=</operator> <name pos:start="25:24" pos:end="25:32"><name pos:start="25:24" pos:end="25:26">rcb</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:32">size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="55:5">else <block pos:start="29:12" pos:end="55:5">{<block_content pos:start="31:9" pos:end="53:9">

        <if_stmt pos:start="31:9" pos:end="53:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:18">(<expr pos:start="31:13" pos:end="31:17"><name pos:start="31:13" pos:end="31:13">r</name> <operator pos:start="31:15" pos:end="31:15">&lt;</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>)</condition> <block pos:start="31:20" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:27">

            <expr_stmt pos:start="33:13" pos:end="33:43"><expr pos:start="33:13" pos:end="33:42"><call pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:18">memset</name><argument_list pos:start="33:19" pos:end="33:42">(<argument pos:start="33:20" pos:end="33:27"><expr pos:start="33:20" pos:end="33:27"><name pos:start="33:20" pos:end="33:27"><name pos:start="33:20" pos:end="33:22">rcb</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:27">buf</name></name></expr></argument>, <argument pos:start="33:30" pos:end="33:30"><expr pos:start="33:30" pos:end="33:30"><literal type="number" pos:start="33:30" pos:end="33:30">0</literal></expr></argument>, <argument pos:start="33:33" pos:end="33:41"><expr pos:start="33:33" pos:end="33:41"><name pos:start="33:33" pos:end="33:41"><name pos:start="33:33" pos:end="33:35">rcb</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:41">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:15">acb</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:20">ret</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:24">r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:27"><expr pos:start="37:13" pos:end="37:26"><name pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:15">acb</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:22">error</name></name> <operator pos:start="37:24" pos:end="37:24">=</operator> <literal type="number" pos:start="37:26" pos:end="37:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="39:11" pos:end="49:9">else if <condition pos:start="39:19" pos:end="39:33">(<expr pos:start="39:20" pos:end="39:32"><name pos:start="39:20" pos:end="39:20">r</name> <operator pos:start="39:22" pos:end="39:22">&lt;</operator> <name pos:start="39:24" pos:end="39:32"><name pos:start="39:24" pos:end="39:26">rcb</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:32">size</name></name></expr>)</condition> <block pos:start="39:35" pos:end="49:9">{<block_content pos:start="41:13" pos:end="47:13">

            <expr_stmt pos:start="41:13" pos:end="41:51"><expr pos:start="41:13" pos:end="41:50"><call pos:start="41:13" pos:end="41:50"><name pos:start="41:13" pos:end="41:18">memset</name><argument_list pos:start="41:19" pos:end="41:50">(<argument pos:start="41:20" pos:end="41:31"><expr pos:start="41:20" pos:end="41:31"><name pos:start="41:20" pos:end="41:27"><name pos:start="41:20" pos:end="41:22">rcb</name><operator pos:start="41:23" pos:end="41:24">-&gt;</operator><name pos:start="41:25" pos:end="41:27">buf</name></name> <operator pos:start="41:29" pos:end="41:29">+</operator> <name pos:start="41:31" pos:end="41:31">r</name></expr></argument>, <argument pos:start="41:34" pos:end="41:34"><expr pos:start="41:34" pos:end="41:34"><literal type="number" pos:start="41:34" pos:end="41:34">0</literal></expr></argument>, <argument pos:start="41:37" pos:end="41:49"><expr pos:start="41:37" pos:end="41:49"><name pos:start="41:37" pos:end="41:45"><name pos:start="41:37" pos:end="41:39">rcb</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:45">size</name></name> <operator pos:start="41:47" pos:end="41:47">-</operator> <name pos:start="41:49" pos:end="41:49">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:28">(<expr pos:start="43:17" pos:end="43:27"><operator pos:start="43:17" pos:end="43:17">!</operator><name pos:start="43:18" pos:end="43:27"><name pos:start="43:18" pos:end="43:20">acb</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:27">error</name></name></expr>)</condition> <block pos:start="43:30" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:37">

                <expr_stmt pos:start="45:17" pos:end="45:37"><expr pos:start="45:17" pos:end="45:36"><name pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:19">acb</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:24">ret</name></name> <operator pos:start="45:26" pos:end="45:26">=</operator> <name pos:start="45:28" pos:end="45:36"><name pos:start="45:28" pos:end="45:30">rcb</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:36">size</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="53:9">else if <condition pos:start="49:19" pos:end="49:31">(<expr pos:start="49:20" pos:end="49:30"><operator pos:start="49:20" pos:end="49:20">!</operator><name pos:start="49:21" pos:end="49:30"><name pos:start="49:21" pos:end="49:23">acb</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:30">error</name></name></expr>)</condition> <block pos:start="49:33" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:25">

            <expr_stmt pos:start="51:13" pos:end="51:25"><expr pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:20"><name pos:start="51:13" pos:end="51:15">acb</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:20">ret</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:24">r</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="57:5" pos:end="57:75">/* Note that acb-&gt;bh can be NULL in case where the aio was cancelled */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:11"><name pos:start="59:5" pos:end="59:7">acb</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:11">bh</name></name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:45"><name pos:start="59:15" pos:end="59:25">qemu_bh_new</name><argument_list pos:start="59:26" pos:end="59:45">(<argument pos:start="59:27" pos:end="59:39"><expr pos:start="59:27" pos:end="59:39"><name pos:start="59:27" pos:end="59:39">rbd_aio_bh_cb</name></expr></argument>, <argument pos:start="59:42" pos:end="59:44"><expr pos:start="59:42" pos:end="59:44"><name pos:start="59:42" pos:end="59:44">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:30"><expr pos:start="61:5" pos:end="61:29"><call pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:20">qemu_bh_schedule</name><argument_list pos:start="61:21" pos:end="61:29">(<argument pos:start="61:22" pos:end="61:28"><expr pos:start="61:22" pos:end="61:28"><name pos:start="61:22" pos:end="61:28"><name pos:start="61:22" pos:end="61:24">acb</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:28">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:16"><expr pos:start="63:5" pos:end="63:15"><call pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:10">g_free</name><argument_list pos:start="63:11" pos:end="63:15">(<argument pos:start="63:12" pos:end="63:14"><expr pos:start="63:12" pos:end="63:14"><name pos:start="63:12" pos:end="63:14">rcb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
