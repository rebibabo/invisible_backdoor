<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19449.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">net_socket_connect_init</name><parameter_list pos:start="1:35" pos:end="7:56">(<parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><name pos:start="1:36" pos:end="1:44">VLANState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">vlan</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:52"><decl pos:start="3:36" pos:end="3:52"><type pos:start="3:36" pos:end="3:52"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:45">char</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:52">model</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:51"><decl pos:start="5:36" pos:end="5:51"><type pos:start="5:36" pos:end="5:51"><specifier pos:start="5:36" pos:end="5:40">const</specifier> <name pos:start="5:42" pos:end="5:45">char</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:51">name</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:55"><decl pos:start="7:36" pos:end="7:55"><type pos:start="7:36" pos:end="7:55"><specifier pos:start="7:36" pos:end="7:40">const</specifier> <name pos:start="7:42" pos:end="7:45">char</name> <modifier pos:start="7:47" pos:end="7:47">*</modifier></type><name pos:start="7:48" pos:end="7:55">host_str</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="97:1">{<block_content pos:start="11:5" pos:end="95:13">

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">NetSocketState</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">fd</name></decl>, <decl pos:start="13:13" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:13" pos:end="13:21">connected</name></decl>, <decl pos:start="13:24" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:24" pos:end="13:26">ret</name></decl>, <decl pos:start="13:29" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:29" pos:end="13:31">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:22">sockaddr_in</name></name></type> <name pos:start="15:24" pos:end="15:28">saddr</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:18"><if pos:start="19:5" pos:end="21:18">if <condition pos:start="19:8" pos:end="19:46">(<expr pos:start="19:9" pos:end="19:45"><call pos:start="19:9" pos:end="19:41"><name pos:start="19:9" pos:end="19:23">parse_host_port</name><argument_list pos:start="19:24" pos:end="19:41">(<argument pos:start="19:25" pos:end="19:30"><expr pos:start="19:25" pos:end="19:30"><operator pos:start="19:25" pos:end="19:25">&amp;</operator><name pos:start="19:26" pos:end="19:30">saddr</name></expr></argument>, <argument pos:start="19:33" pos:end="19:40"><expr pos:start="19:33" pos:end="19:40"><name pos:start="19:33" pos:end="19:40">host_str</name></expr></argument>)</argument_list></call> <operator pos:start="19:43" pos:end="19:43">&lt;</operator> <literal type="number" pos:start="19:45" pos:end="19:45">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:18"><block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:6">fd</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:40"><name pos:start="25:10" pos:end="25:15">socket</name><argument_list pos:start="25:16" pos:end="25:40">(<argument pos:start="25:17" pos:end="25:23"><expr pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:23">PF_INET</name></expr></argument>, <argument pos:start="25:26" pos:end="25:36"><expr pos:start="25:26" pos:end="25:36"><name pos:start="25:26" pos:end="25:36">SOCK_STREAM</name></expr></argument>, <argument pos:start="25:39" pos:end="25:39"><expr pos:start="25:39" pos:end="25:39"><literal type="number" pos:start="25:39" pos:end="25:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">fd</name> <operator pos:start="27:12" pos:end="27:12">&lt;</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>)</condition> <block pos:start="27:17" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:25"><expr pos:start="29:9" pos:end="29:24"><call pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:14">perror</name><argument_list pos:start="29:15" pos:end="29:24">(<argument pos:start="29:16" pos:end="29:23"><expr pos:start="29:16" pos:end="29:23"><literal type="string" pos:start="29:16" pos:end="29:23">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:28"><expr pos:start="35:5" pos:end="35:27"><call pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:23">socket_set_nonblock</name><argument_list pos:start="35:24" pos:end="35:27">(<argument pos:start="35:25" pos:end="35:26"><expr pos:start="35:25" pos:end="35:26"><name pos:start="35:25" pos:end="35:26">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:13">connected</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="81:5">for<control pos:start="41:8" pos:end="41:11">(<init pos:start="41:9" pos:end="41:9">;</init><condition pos:start="41:10" pos:end="41:10">;</condition><incr/>)</control> <block pos:start="41:13" pos:end="81:5">{<block_content pos:start="43:9" pos:end="79:9">

        <expr_stmt pos:start="43:9" pos:end="43:68"><expr pos:start="43:9" pos:end="43:67"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:67"><name pos:start="43:15" pos:end="43:21">connect</name><argument_list pos:start="43:22" pos:end="43:67">(<argument pos:start="43:23" pos:end="43:24"><expr pos:start="43:23" pos:end="43:24"><name pos:start="43:23" pos:end="43:24">fd</name></expr></argument>, <argument pos:start="43:27" pos:end="43:51"><expr pos:start="43:27" pos:end="43:51"><operator pos:start="43:27" pos:end="43:27">(</operator>struct <name pos:start="43:35" pos:end="43:42">sockaddr</name> <operator pos:start="43:44" pos:end="43:44">*</operator><operator pos:start="43:45" pos:end="43:45">)</operator><operator pos:start="43:46" pos:end="43:46">&amp;</operator><name pos:start="43:47" pos:end="43:51">saddr</name></expr></argument>, <argument pos:start="43:54" pos:end="43:66"><expr pos:start="43:54" pos:end="43:66"><sizeof pos:start="43:54" pos:end="43:66">sizeof<argument_list pos:start="43:60" pos:end="43:66">(<argument pos:start="43:61" pos:end="43:65"><expr pos:start="43:61" pos:end="43:65"><name pos:start="43:61" pos:end="43:65">saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="79:9"><if pos:start="45:9" pos:end="73:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="73:9">{<block_content pos:start="47:13" pos:end="71:13">

            <expr_stmt pos:start="47:13" pos:end="47:33"><expr pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:15">err</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:32"><name pos:start="47:19" pos:end="47:30">socket_error</name><argument_list pos:start="47:31" pos:end="47:32">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="71:13"><if pos:start="49:13" pos:end="51:13">if <condition pos:start="49:16" pos:end="49:51">(<expr pos:start="49:17" pos:end="49:50"><name pos:start="49:17" pos:end="49:19">err</name> <operator pos:start="49:21" pos:end="49:22">==</operator> <name pos:start="49:24" pos:end="49:28">EINTR</name> <operator pos:start="49:30" pos:end="49:31">||</operator> <name pos:start="49:33" pos:end="49:35">err</name> <operator pos:start="49:37" pos:end="49:38">==</operator> <name pos:start="49:40" pos:end="49:50">EWOULDBLOCK</name></expr>)</condition> <block pos:start="49:53" pos:end="51:13">{<block_content>

            </block_content>}</block></if> <if type="elseif" pos:start="51:15" pos:end="57:13">else if <condition pos:start="51:23" pos:end="51:42">(<expr pos:start="51:24" pos:end="51:41"><name pos:start="51:24" pos:end="51:26">err</name> <operator pos:start="51:28" pos:end="51:29">==</operator> <name pos:start="51:31" pos:end="51:41">EINPROGRESS</name></expr>)</condition> <block pos:start="51:44" pos:end="57:13">{<block_content pos:start="53:17" pos:end="56:0">

                <break pos:start="53:17" pos:end="56:0">break;</break>

<cpp:ifdef pos:start="55:1" pos:end="55:13">#<cpp:directive pos:start="55:2" pos:end="55:6">ifdef</cpp:directive> <name pos:start="55:8" pos:end="55:13">_WIN32</name></cpp:ifdef>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="63:13">else if <condition pos:start="57:23" pos:end="57:42">(<expr pos:start="57:24" pos:end="57:41"><name pos:start="57:24" pos:end="57:26">err</name> <operator pos:start="57:28" pos:end="57:29">==</operator> <name pos:start="57:31" pos:end="57:41">WSAEALREADY</name></expr>)</condition> <block pos:start="57:44" pos:end="63:13">{<block_content pos:start="59:17" pos:end="62:0">

                <break pos:start="59:17" pos:end="62:0">break;</break>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="63:15" pos:end="71:13">else <block pos:start="63:20" pos:end="71:13">{<block_content pos:start="65:17" pos:end="69:26">

                <expr_stmt pos:start="65:17" pos:end="65:34"><expr pos:start="65:17" pos:end="65:33"><call pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:22">perror</name><argument_list pos:start="65:23" pos:end="65:33">(<argument pos:start="65:24" pos:end="65:32"><expr pos:start="65:24" pos:end="65:32"><literal type="string" pos:start="65:24" pos:end="65:32">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:31"><call pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:27">closesocket</name><argument_list pos:start="67:28" pos:end="67:31">(<argument pos:start="67:29" pos:end="67:30"><expr pos:start="67:29" pos:end="67:30"><name pos:start="67:29" pos:end="67:30">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="69:17" pos:end="69:26">return <expr pos:start="69:24" pos:end="69:25"><operator pos:start="69:24" pos:end="69:24">-</operator><literal type="number" pos:start="69:25" pos:end="69:25">1</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="79:9">else <block pos:start="73:16" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:18">

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:21">connected</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="83:5" pos:end="83:61"><expr pos:start="83:5" pos:end="83:60"><name pos:start="83:5" pos:end="83:5">s</name> <operator pos:start="83:7" pos:end="83:7">=</operator> <call pos:start="83:9" pos:end="83:60"><name pos:start="83:9" pos:end="83:26">net_socket_fd_init</name><argument_list pos:start="83:27" pos:end="83:60">(<argument pos:start="83:28" pos:end="83:31"><expr pos:start="83:28" pos:end="83:31"><name pos:start="83:28" pos:end="83:31">vlan</name></expr></argument>, <argument pos:start="83:34" pos:end="83:38"><expr pos:start="83:34" pos:end="83:38"><name pos:start="83:34" pos:end="83:38">model</name></expr></argument>, <argument pos:start="83:41" pos:end="83:44"><expr pos:start="83:41" pos:end="83:44"><name pos:start="83:41" pos:end="83:44">name</name></expr></argument>, <argument pos:start="83:47" pos:end="83:48"><expr pos:start="83:47" pos:end="83:48"><name pos:start="83:47" pos:end="83:48">fd</name></expr></argument>, <argument pos:start="83:51" pos:end="83:59"><expr pos:start="83:51" pos:end="83:59"><name pos:start="83:51" pos:end="83:59">connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="87:18"><if pos:start="85:5" pos:end="87:18">if <condition pos:start="85:8" pos:end="85:11">(<expr pos:start="85:9" pos:end="85:10"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:10">s</name></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:18"><block_content pos:start="87:9" pos:end="87:18">

        <return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><operator pos:start="87:16" pos:end="87:16">-</operator><literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="93:63"><expr pos:start="89:5" pos:end="93:62"><call pos:start="89:5" pos:end="93:62"><name pos:start="89:5" pos:end="89:12">snprintf</name><argument_list pos:start="89:13" pos:end="93:62">(<argument pos:start="89:14" pos:end="89:27"><expr pos:start="89:14" pos:end="89:27"><name pos:start="89:14" pos:end="89:27"><name pos:start="89:14" pos:end="89:14">s</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:18">nc</name><operator pos:start="89:19" pos:end="89:19">.</operator><name pos:start="89:20" pos:end="89:27">info_str</name></name></expr></argument>, <argument pos:start="89:30" pos:end="89:51"><expr pos:start="89:30" pos:end="89:51"><sizeof pos:start="89:30" pos:end="89:51">sizeof<argument_list pos:start="89:36" pos:end="89:51">(<argument pos:start="89:37" pos:end="89:50"><expr pos:start="89:37" pos:end="89:50"><name pos:start="89:37" pos:end="89:50"><name pos:start="89:37" pos:end="89:37">s</name><operator pos:start="89:38" pos:end="89:39">-&gt;</operator><name pos:start="89:40" pos:end="89:41">nc</name><operator pos:start="89:42" pos:end="89:42">.</operator><name pos:start="89:43" pos:end="89:50">info_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

             <argument pos:start="91:14" pos:end="91:39"><expr pos:start="91:14" pos:end="91:39"><literal type="string" pos:start="91:14" pos:end="91:39">"socket: connect to %s:%d"</literal></expr></argument>,

             <argument pos:start="93:14" pos:end="93:38"><expr pos:start="93:14" pos:end="93:38"><call pos:start="93:14" pos:end="93:38"><name pos:start="93:14" pos:end="93:22">inet_ntoa</name><argument_list pos:start="93:23" pos:end="93:38">(<argument pos:start="93:24" pos:end="93:37"><expr pos:start="93:24" pos:end="93:37"><name pos:start="93:24" pos:end="93:37"><name pos:start="93:24" pos:end="93:28">saddr</name><operator pos:start="93:29" pos:end="93:29">.</operator><name pos:start="93:30" pos:end="93:37">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:41" pos:end="93:61"><expr pos:start="93:41" pos:end="93:61"><call pos:start="93:41" pos:end="93:61"><name pos:start="93:41" pos:end="93:45">ntohs</name><argument_list pos:start="93:46" pos:end="93:61">(<argument pos:start="93:47" pos:end="93:60"><expr pos:start="93:47" pos:end="93:60"><name pos:start="93:47" pos:end="93:60"><name pos:start="93:47" pos:end="93:51">saddr</name><operator pos:start="93:52" pos:end="93:52">.</operator><name pos:start="93:53" pos:end="93:60">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
