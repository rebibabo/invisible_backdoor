<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22745.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">iommu_config_write</name><parameter_list pos:start="1:31" pos:end="3:59">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:56"><decl pos:start="1:46" pos:end="1:56"><type pos:start="1:46" pos:end="1:56"><name pos:start="1:46" pos:end="1:51">hwaddr</name></type> <name pos:start="1:53" pos:end="1:56">addr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:39">uint64_t</name></type> <name pos:start="3:41" pos:end="3:43">val</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:5">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">IOMMUState</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">is</name> <init pos:start="7:20" pos:end="7:27">= <expr pos:start="7:22" pos:end="7:27"><name pos:start="7:22" pos:end="7:27">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="13:50"><expr pos:start="11:5" pos:end="13:49"><call pos:start="11:5" pos:end="13:49"><name pos:start="11:5" pos:end="11:17">IOMMU_DPRINTF</name><argument_list pos:start="11:18" pos:end="13:49">(<argument pos:start="11:19" pos:end="13:31"><expr pos:start="11:19" pos:end="13:31"><literal type="string" pos:start="11:19" pos:end="11:43">"IOMMU config write: 0x%"</literal> <name pos:start="11:45" pos:end="11:55">HWADDR_PRIx</name> <literal type="string" pos:start="11:57" pos:end="11:65">" val: %"</literal> <name pos:start="11:67" pos:end="11:72">PRIx64</name>

                  <literal type="string" pos:start="13:19" pos:end="13:31">" size: %d\n"</literal></expr></argument>, <argument pos:start="13:34" pos:end="13:37"><expr pos:start="13:34" pos:end="13:37"><name pos:start="13:34" pos:end="13:37">addr</name></expr></argument>, <argument pos:start="13:40" pos:end="13:42"><expr pos:start="13:40" pos:end="13:42"><name pos:start="13:40" pos:end="13:42">val</name></expr></argument>, <argument pos:start="13:45" pos:end="13:48"><expr pos:start="13:45" pos:end="13:48"><name pos:start="13:45" pos:end="13:48">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="17:5" pos:end="79:5">switch <condition pos:start="17:12" pos:end="17:17">(<expr pos:start="17:13" pos:end="17:16"><name pos:start="17:13" pos:end="17:16">addr</name></expr>)</condition> <block pos:start="17:19" pos:end="79:5">{<block_content pos:start="19:5" pos:end="77:14">

    <case pos:start="19:5" pos:end="19:20">case <expr pos:start="19:10" pos:end="19:19"><name pos:start="19:10" pos:end="19:19">IOMMU_CTRL</name></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="31:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:16">size</name> <operator pos:start="21:18" pos:end="21:19">==</operator> <literal type="number" pos:start="21:21" pos:end="21:21">4</literal></expr>)</condition> <block pos:start="21:24" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:51">

            <expr_stmt pos:start="23:13" pos:end="23:55"><expr pos:start="23:13" pos:end="23:54"><name pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:14">is</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:20">regs</name><index pos:start="23:21" pos:end="23:37">[<expr pos:start="23:22" pos:end="23:36"><name pos:start="23:22" pos:end="23:31">IOMMU_CTRL</name> <operator pos:start="23:33" pos:end="23:34">&gt;&gt;</operator> <literal type="number" pos:start="23:36" pos:end="23:36">3</literal></expr>]</index></name> <operator pos:start="23:39" pos:end="23:40">&amp;=</operator> <literal type="number" pos:start="23:42" pos:end="23:54">0xffffffffULL</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:51"><expr pos:start="25:13" pos:end="25:50"><name pos:start="25:13" pos:end="25:37"><name pos:start="25:13" pos:end="25:14">is</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:20">regs</name><index pos:start="25:21" pos:end="25:37">[<expr pos:start="25:22" pos:end="25:36"><name pos:start="25:22" pos:end="25:31">IOMMU_CTRL</name> <operator pos:start="25:33" pos:end="25:34">&gt;&gt;</operator> <literal type="number" pos:start="25:36" pos:end="25:36">3</literal></expr>]</index></name> <operator pos:start="25:39" pos:end="25:40">|=</operator> <name pos:start="25:42" pos:end="25:44">val</name> <operator pos:start="25:46" pos:end="25:47">&lt;&lt;</operator> <literal type="number" pos:start="25:49" pos:end="25:50">32</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="31:9">else <block pos:start="27:16" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:39">

            <expr_stmt pos:start="29:13" pos:end="29:39"><expr pos:start="29:13" pos:end="29:38"><name pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:14">is</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:20">regs</name><index pos:start="29:21" pos:end="29:32">[<expr pos:start="29:22" pos:end="29:31"><name pos:start="29:22" pos:end="29:31">IOMMU_CTRL</name></expr>]</index></name> <operator pos:start="29:34" pos:end="29:34">=</operator> <name pos:start="29:36" pos:end="29:38">val</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:26">case <expr pos:start="35:10" pos:end="35:25"><name pos:start="35:10" pos:end="35:19">IOMMU_CTRL</name> <operator pos:start="35:21" pos:end="35:21">+</operator> <literal type="number" pos:start="35:23" pos:end="35:25">0x4</literal></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:59"><expr pos:start="37:9" pos:end="37:58"><name pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:10">is</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:16">regs</name><index pos:start="37:17" pos:end="37:33">[<expr pos:start="37:18" pos:end="37:32"><name pos:start="37:18" pos:end="37:27">IOMMU_CTRL</name> <operator pos:start="37:29" pos:end="37:30">&gt;&gt;</operator> <literal type="number" pos:start="37:32" pos:end="37:32">3</literal></expr>]</index></name> <operator pos:start="37:35" pos:end="37:36">&amp;=</operator> <literal type="number" pos:start="37:38" pos:end="37:58">0xffffffff00000000ULL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:57"><expr pos:start="39:9" pos:end="39:56"><name pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:10">is</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:16">regs</name><index pos:start="39:17" pos:end="39:33">[<expr pos:start="39:18" pos:end="39:32"><name pos:start="39:18" pos:end="39:27">IOMMU_CTRL</name> <operator pos:start="39:29" pos:end="39:30">&gt;&gt;</operator> <literal type="number" pos:start="39:32" pos:end="39:32">3</literal></expr>]</index></name> <operator pos:start="39:35" pos:end="39:36">|=</operator> <name pos:start="39:38" pos:end="39:40">val</name> <operator pos:start="39:42" pos:end="39:42">&amp;</operator> <literal type="number" pos:start="39:44" pos:end="39:56">0xffffffffULL</literal></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:20">case <expr pos:start="43:10" pos:end="43:19"><name pos:start="43:10" pos:end="43:19">IOMMU_BASE</name></expr>:</case>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:22">(<expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:16">size</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <literal type="number" pos:start="45:21" pos:end="45:21">4</literal></expr>)</condition> <block pos:start="45:24" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:51">

            <expr_stmt pos:start="47:13" pos:end="47:55"><expr pos:start="47:13" pos:end="47:54"><name pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:14">is</name><operator pos:start="47:15" pos:end="47:16">-&gt;</operator><name pos:start="47:17" pos:end="47:20">regs</name><index pos:start="47:21" pos:end="47:37">[<expr pos:start="47:22" pos:end="47:36"><name pos:start="47:22" pos:end="47:31">IOMMU_BASE</name> <operator pos:start="47:33" pos:end="47:34">&gt;&gt;</operator> <literal type="number" pos:start="47:36" pos:end="47:36">3</literal></expr>]</index></name> <operator pos:start="47:39" pos:end="47:40">&amp;=</operator> <literal type="number" pos:start="47:42" pos:end="47:54">0xffffffffULL</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:51"><expr pos:start="49:13" pos:end="49:50"><name pos:start="49:13" pos:end="49:37"><name pos:start="49:13" pos:end="49:14">is</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:20">regs</name><index pos:start="49:21" pos:end="49:37">[<expr pos:start="49:22" pos:end="49:36"><name pos:start="49:22" pos:end="49:31">IOMMU_BASE</name> <operator pos:start="49:33" pos:end="49:34">&gt;&gt;</operator> <literal type="number" pos:start="49:36" pos:end="49:36">3</literal></expr>]</index></name> <operator pos:start="49:39" pos:end="49:40">|=</operator> <name pos:start="49:42" pos:end="49:44">val</name> <operator pos:start="49:46" pos:end="49:47">&lt;&lt;</operator> <literal type="number" pos:start="49:49" pos:end="49:50">32</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="55:9">else <block pos:start="51:16" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:39">

            <expr_stmt pos:start="53:13" pos:end="53:39"><expr pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:32"><name pos:start="53:13" pos:end="53:14">is</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:20">regs</name><index pos:start="53:21" pos:end="53:32">[<expr pos:start="53:22" pos:end="53:31"><name pos:start="53:22" pos:end="53:31">IOMMU_BASE</name></expr>]</index></name> <operator pos:start="53:34" pos:end="53:34">=</operator> <name pos:start="53:36" pos:end="53:38">val</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:26">case <expr pos:start="59:10" pos:end="59:25"><name pos:start="59:10" pos:end="59:19">IOMMU_BASE</name> <operator pos:start="59:21" pos:end="59:21">+</operator> <literal type="number" pos:start="59:23" pos:end="59:25">0x4</literal></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:59"><expr pos:start="61:9" pos:end="61:58"><name pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:10">is</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:16">regs</name><index pos:start="61:17" pos:end="61:33">[<expr pos:start="61:18" pos:end="61:32"><name pos:start="61:18" pos:end="61:27">IOMMU_BASE</name> <operator pos:start="61:29" pos:end="61:30">&gt;&gt;</operator> <literal type="number" pos:start="61:32" pos:end="61:32">3</literal></expr>]</index></name> <operator pos:start="61:35" pos:end="61:36">&amp;=</operator> <literal type="number" pos:start="61:38" pos:end="61:58">0xffffffff00000000ULL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:57"><expr pos:start="63:9" pos:end="63:56"><name pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:10">is</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:16">regs</name><index pos:start="63:17" pos:end="63:33">[<expr pos:start="63:18" pos:end="63:32"><name pos:start="63:18" pos:end="63:27">IOMMU_BASE</name> <operator pos:start="63:29" pos:end="63:30">&gt;&gt;</operator> <literal type="number" pos:start="63:32" pos:end="63:32">3</literal></expr>]</index></name> <operator pos:start="63:35" pos:end="63:36">|=</operator> <name pos:start="63:38" pos:end="63:40">val</name> <operator pos:start="63:42" pos:end="63:42">&amp;</operator> <literal type="number" pos:start="63:44" pos:end="63:56">0xffffffffULL</literal></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <default pos:start="67:5" pos:end="67:12">default:</default>

        <expr_stmt pos:start="69:9" pos:end="75:35"><expr pos:start="69:9" pos:end="75:34"><call pos:start="69:9" pos:end="75:34"><name pos:start="69:9" pos:end="69:21">qemu_log_mask</name><argument_list pos:start="69:22" pos:end="75:34">(<argument pos:start="69:23" pos:end="69:31"><expr pos:start="69:23" pos:end="69:31"><name pos:start="69:23" pos:end="69:31">LOG_UNIMP</name></expr></argument>,

                  <argument pos:start="71:19" pos:end="73:74"><expr pos:start="71:19" pos:end="73:74"><literal type="string" pos:start="71:19" pos:end="71:60">"apb iommu: Unimplemented register write "</literal>

                  <literal type="string" pos:start="73:19" pos:end="73:27">"reg 0x%"</literal> <name pos:start="73:29" pos:end="73:39">HWADDR_PRIx</name> <literal type="string" pos:start="73:41" pos:end="73:62">" size 0x%x value 0x%"</literal> <name pos:start="73:64" pos:end="73:69">PRIx64</name> <literal type="string" pos:start="73:71" pos:end="73:74">"\n"</literal></expr></argument>,

                  <argument pos:start="75:19" pos:end="75:22"><expr pos:start="75:19" pos:end="75:22"><name pos:start="75:19" pos:end="75:22">addr</name></expr></argument>, <argument pos:start="75:25" pos:end="75:28"><expr pos:start="75:25" pos:end="75:28"><name pos:start="75:25" pos:end="75:28">size</name></expr></argument>, <argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
