<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11482.c" pos:tabs="8"><function pos:start="1:1" pos:end="403:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">lx_init</name><parameter_list pos:start="1:20" pos:end="1:68">(<parameter pos:start="1:21" pos:end="1:44"><decl pos:start="1:21" pos:end="1:44"><type pos:start="1:21" pos:end="1:44"><specifier pos:start="1:21" pos:end="1:25">const</specifier> <name pos:start="1:27" pos:end="1:37">LxBoardDesc</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:44">board</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:58">MachineState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:67">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="403:1">{<block_content pos:start="7:5" pos:end="401:5">

<cpp:ifdef pos:start="5:1" pos:end="5:29">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">be</name> <init pos:start="7:12" pos:end="7:14">= <expr pos:start="7:14" pos:end="7:14"><literal type="number" pos:start="7:14" pos:end="7:14">1</literal></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">be</name> <init pos:start="11:12" pos:end="11:14">= <expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:31">system_memory</name> <init pos:start="15:33" pos:end="15:53">= <expr pos:start="15:35" pos:end="15:53"><call pos:start="15:35" pos:end="15:53"><name pos:start="15:35" pos:end="15:51">get_system_memory</name><argument_list pos:start="15:52" pos:end="15:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">XtensaCPU</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:18">cpu</name> <init pos:start="17:20" pos:end="17:25">= <expr pos:start="17:22" pos:end="17:25"><name pos:start="17:22" pos:end="17:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">CPUXtensaState</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">env</name> <init pos:start="19:25" pos:end="19:30">= <expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">ram</name></decl>, <decl pos:start="21:24" pos:end="21:27"><type ref="prev" pos:start="21:5" pos:end="21:18"><modifier pos:start="21:24" pos:end="21:24">*</modifier></type><name pos:start="21:25" pos:end="21:27">rom</name></decl>, <decl pos:start="21:30" pos:end="21:39"><type ref="prev" pos:start="21:5" pos:end="21:18"><modifier pos:start="21:30" pos:end="21:30">*</modifier></type><name pos:start="21:31" pos:end="21:39">system_io</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:13">DriveInfo</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">pflash_t</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:19">flash</name> <init pos:start="25:21" pos:end="25:26">= <expr pos:start="25:23" pos:end="25:26"><name pos:start="25:23" pos:end="25:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:53"><decl pos:start="27:5" pos:end="27:52"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">QemuOpts</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:26">machine_opts</name> <init pos:start="27:28" pos:end="27:52">= <expr pos:start="27:30" pos:end="27:52"><call pos:start="27:30" pos:end="27:52"><name pos:start="27:30" pos:end="27:50">qemu_get_machine_opts</name><argument_list pos:start="27:51" pos:end="27:52">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:47"><decl pos:start="29:5" pos:end="29:46"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:25">cpu_model</name> <init pos:start="29:27" pos:end="29:46">= <expr pos:start="29:29" pos:end="29:46"><name pos:start="29:29" pos:end="29:46"><name pos:start="29:29" pos:end="29:35">machine</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:71"><decl pos:start="31:5" pos:end="31:70"><type pos:start="31:5" pos:end="31:16"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:14">char</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:31">kernel_filename</name> <init pos:start="31:33" pos:end="31:70">= <expr pos:start="31:35" pos:end="31:70"><call pos:start="31:35" pos:end="31:70"><name pos:start="31:35" pos:end="31:46">qemu_opt_get</name><argument_list pos:start="31:47" pos:end="31:70">(<argument pos:start="31:48" pos:end="31:59"><expr pos:start="31:48" pos:end="31:59"><name pos:start="31:48" pos:end="31:59">machine_opts</name></expr></argument>, <argument pos:start="31:62" pos:end="31:69"><expr pos:start="31:62" pos:end="31:69"><literal type="string" pos:start="31:62" pos:end="31:69">"kernel"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:70"><decl pos:start="33:5" pos:end="33:69"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:14">char</name> <modifier pos:start="33:16" pos:end="33:16">*</modifier></type><name pos:start="33:17" pos:end="33:30">kernel_cmdline</name> <init pos:start="33:32" pos:end="33:69">= <expr pos:start="33:34" pos:end="33:69"><call pos:start="33:34" pos:end="33:69"><name pos:start="33:34" pos:end="33:45">qemu_opt_get</name><argument_list pos:start="33:46" pos:end="33:69">(<argument pos:start="33:47" pos:end="33:58"><expr pos:start="33:47" pos:end="33:58"><name pos:start="33:47" pos:end="33:58">machine_opts</name></expr></argument>, <argument pos:start="33:61" pos:end="33:68"><expr pos:start="33:61" pos:end="33:68"><literal type="string" pos:start="33:61" pos:end="33:68">"append"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:65"><decl pos:start="35:5" pos:end="35:64"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:28">dtb_filename</name> <init pos:start="35:30" pos:end="35:64">= <expr pos:start="35:32" pos:end="35:64"><call pos:start="35:32" pos:end="35:64"><name pos:start="35:32" pos:end="35:43">qemu_opt_get</name><argument_list pos:start="35:44" pos:end="35:64">(<argument pos:start="35:45" pos:end="35:56"><expr pos:start="35:45" pos:end="35:56"><name pos:start="35:45" pos:end="35:56">machine_opts</name></expr></argument>, <argument pos:start="35:59" pos:end="35:63"><expr pos:start="35:59" pos:end="35:63"><literal type="string" pos:start="35:59" pos:end="35:63">"dtb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:71"><decl pos:start="37:5" pos:end="37:70"><type pos:start="37:5" pos:end="37:16"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:14">char</name> <modifier pos:start="37:16" pos:end="37:16">*</modifier></type><name pos:start="37:17" pos:end="37:31">initrd_filename</name> <init pos:start="37:33" pos:end="37:70">= <expr pos:start="37:35" pos:end="37:70"><call pos:start="37:35" pos:end="37:70"><name pos:start="37:35" pos:end="37:46">qemu_opt_get</name><argument_list pos:start="37:47" pos:end="37:70">(<argument pos:start="37:48" pos:end="37:59"><expr pos:start="37:48" pos:end="37:59"><name pos:start="37:48" pos:end="37:59">machine_opts</name></expr></argument>, <argument pos:start="37:62" pos:end="37:69"><expr pos:start="37:62" pos:end="37:69"><literal type="string" pos:start="37:62" pos:end="37:69">"initrd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:10"><decl pos:start="39:5" pos:end="39:9"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:18">cpu_model</name></expr>)</condition> <block pos:start="43:21" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:45">

        <expr_stmt pos:start="45:9" pos:end="45:45"><expr pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:17">cpu_model</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:44">XTENSA_DEFAULT_CPU_MODEL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="51:5" pos:end="81:5">for <control pos:start="51:9" pos:end="51:34">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">n</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:29"><expr pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:17">n</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:28">smp_cpus</name></expr>;</condition> <incr pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:31">n</name><operator pos:start="51:32" pos:end="51:33">++</operator></expr></incr>)</control> <block pos:start="51:36" pos:end="81:5">{<block_content pos:start="53:9" pos:end="79:28">

        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:11">cpu</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:40"><name pos:start="53:15" pos:end="53:29">cpu_xtensa_init</name><argument_list pos:start="53:30" pos:end="53:40">(<argument pos:start="53:31" pos:end="53:39"><expr pos:start="53:31" pos:end="53:39"><name pos:start="53:31" pos:end="53:39">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="63:9">if <condition pos:start="55:12" pos:end="55:24">(<expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:15">cpu</name> <operator pos:start="55:17" pos:end="55:18">==</operator> <name pos:start="55:20" pos:end="55:23">NULL</name></expr>)</condition> <block pos:start="55:26" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:31">

            <expr_stmt pos:start="57:13" pos:end="59:36"><expr pos:start="57:13" pos:end="59:35"><call pos:start="57:13" pos:end="59:35"><name pos:start="57:13" pos:end="57:24">error_report</name><argument_list pos:start="57:25" pos:end="59:35">(<argument pos:start="57:26" pos:end="57:61"><expr pos:start="57:26" pos:end="57:61"><literal type="string" pos:start="57:26" pos:end="57:61">"unable to find CPU definition '%s'"</literal></expr></argument>,

                         <argument pos:start="59:26" pos:end="59:34"><expr pos:start="59:26" pos:end="59:34"><name pos:start="59:26" pos:end="59:34">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:31"><expr pos:start="61:13" pos:end="61:30"><call pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:16">exit</name><argument_list pos:start="61:17" pos:end="61:30">(<argument pos:start="61:18" pos:end="61:29"><expr pos:start="61:18" pos:end="61:29"><name pos:start="61:18" pos:end="61:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:11">env</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">&amp;</operator><name pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:18">cpu</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:23">env</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:29"><expr pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:11">env</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:18">sregs</name><index pos:start="69:19" pos:end="69:24">[<expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">PRID</name></expr>]</index></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:28">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><call pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:27">qemu_register_reset</name><argument_list pos:start="71:28" pos:end="71:44">(<argument pos:start="71:29" pos:end="71:38"><expr pos:start="71:29" pos:end="71:38"><name pos:start="71:29" pos:end="71:38">lx60_reset</name></expr></argument>, <argument pos:start="71:41" pos:end="71:43"><expr pos:start="71:41" pos:end="71:43"><name pos:start="71:41" pos:end="71:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="73:9" pos:end="77:11">/* Need MMU initialized prior to ELF loading,

         * so that ELF gets loaded into virtual addresses

         */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:28"><expr pos:start="79:9" pos:end="79:27"><call pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:17">cpu_reset</name><argument_list pos:start="79:18" pos:end="79:27">(<argument pos:start="79:19" pos:end="79:26"><expr pos:start="79:19" pos:end="79:26"><call pos:start="79:19" pos:end="79:26"><name pos:start="79:19" pos:end="79:21">CPU</name><argument_list pos:start="79:22" pos:end="79:26">(<argument pos:start="79:23" pos:end="79:25"><expr pos:start="79:23" pos:end="79:25"><name pos:start="79:23" pos:end="79:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="85:5" pos:end="85:33"><expr pos:start="85:5" pos:end="85:32"><name pos:start="85:5" pos:end="85:7">ram</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:32"><name pos:start="85:11" pos:end="85:18">g_malloc</name><argument_list pos:start="85:19" pos:end="85:32">(<argument pos:start="85:20" pos:end="85:31"><expr pos:start="85:20" pos:end="85:31"><sizeof pos:start="85:20" pos:end="85:31">sizeof<argument_list pos:start="85:26" pos:end="85:31">(<argument pos:start="85:27" pos:end="85:30"><expr pos:start="85:27" pos:end="85:30"><operator pos:start="85:27" pos:end="85:27">*</operator><name pos:start="85:28" pos:end="85:30">ram</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="89:41"><expr pos:start="87:5" pos:end="89:40"><call pos:start="87:5" pos:end="89:40"><name pos:start="87:5" pos:end="87:26">memory_region_init_ram</name><argument_list pos:start="87:27" pos:end="89:40">(<argument pos:start="87:28" pos:end="87:30"><expr pos:start="87:28" pos:end="87:30"><name pos:start="87:28" pos:end="87:30">ram</name></expr></argument>, <argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">NULL</name></expr></argument>, <argument pos:start="87:39" pos:end="87:49"><expr pos:start="87:39" pos:end="87:49"><literal type="string" pos:start="87:39" pos:end="87:49">"lx60.dram"</literal></expr></argument>, <argument pos:start="87:52" pos:end="87:68"><expr pos:start="87:52" pos:end="87:68"><name pos:start="87:52" pos:end="87:68"><name pos:start="87:52" pos:end="87:58">machine</name><operator pos:start="87:59" pos:end="87:60">-&gt;</operator><name pos:start="87:61" pos:end="87:68">ram_size</name></name></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:39"><expr pos:start="89:28" pos:end="89:39"><operator pos:start="89:28" pos:end="89:28">&amp;</operator><name pos:start="89:29" pos:end="89:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:37"><expr pos:start="91:5" pos:end="91:36"><call pos:start="91:5" pos:end="91:36"><name pos:start="91:5" pos:end="91:31">vmstate_register_ram_global</name><argument_list pos:start="91:32" pos:end="91:36">(<argument pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:55"><expr pos:start="93:5" pos:end="93:54"><call pos:start="93:5" pos:end="93:54"><name pos:start="93:5" pos:end="93:31">memory_region_add_subregion</name><argument_list pos:start="93:32" pos:end="93:54">(<argument pos:start="93:33" pos:end="93:45"><expr pos:start="93:33" pos:end="93:45"><name pos:start="93:33" pos:end="93:45">system_memory</name></expr></argument>, <argument pos:start="93:48" pos:end="93:48"><expr pos:start="93:48" pos:end="93:48"><literal type="number" pos:start="93:48" pos:end="93:48">0</literal></expr></argument>, <argument pos:start="93:51" pos:end="93:53"><expr pos:start="93:51" pos:end="93:53"><name pos:start="93:51" pos:end="93:53">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:45"><expr pos:start="97:5" pos:end="97:44"><name pos:start="97:5" pos:end="97:13">system_io</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <call pos:start="97:17" pos:end="97:44"><name pos:start="97:17" pos:end="97:24">g_malloc</name><argument_list pos:start="97:25" pos:end="97:44">(<argument pos:start="97:26" pos:end="97:43"><expr pos:start="97:26" pos:end="97:43"><sizeof pos:start="97:26" pos:end="97:43">sizeof<argument_list pos:start="97:32" pos:end="97:43">(<argument pos:start="97:33" pos:end="97:42"><expr pos:start="97:33" pos:end="97:42"><operator pos:start="97:33" pos:end="97:33">*</operator><name pos:start="97:34" pos:end="97:42">system_io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="101:45"><expr pos:start="99:5" pos:end="101:44"><call pos:start="99:5" pos:end="101:44"><name pos:start="99:5" pos:end="99:25">memory_region_init_io</name><argument_list pos:start="99:26" pos:end="101:44">(<argument pos:start="99:27" pos:end="99:35"><expr pos:start="99:27" pos:end="99:35"><name pos:start="99:27" pos:end="99:35">system_io</name></expr></argument>, <argument pos:start="99:38" pos:end="99:41"><expr pos:start="99:38" pos:end="99:41"><name pos:start="99:38" pos:end="99:41">NULL</name></expr></argument>, <argument pos:start="99:44" pos:end="99:55"><expr pos:start="99:44" pos:end="99:55"><operator pos:start="99:44" pos:end="99:44">&amp;</operator><name pos:start="99:45" pos:end="99:55">lx60_io_ops</name></expr></argument>, <argument pos:start="99:58" pos:end="99:61"><expr pos:start="99:58" pos:end="99:61"><name pos:start="99:58" pos:end="99:61">NULL</name></expr></argument>, <argument pos:start="99:64" pos:end="99:72"><expr pos:start="99:64" pos:end="99:72"><literal type="string" pos:start="99:64" pos:end="99:72">"lx60.io"</literal></expr></argument>,

                          <argument pos:start="101:27" pos:end="101:43"><expr pos:start="101:27" pos:end="101:43"><literal type="number" pos:start="101:27" pos:end="101:29">224</literal> <operator pos:start="101:31" pos:end="101:31">*</operator> <literal type="number" pos:start="101:33" pos:end="101:36">1024</literal> <operator pos:start="101:38" pos:end="101:38">*</operator> <literal type="number" pos:start="101:40" pos:end="101:43">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:70"><expr pos:start="103:5" pos:end="103:69"><call pos:start="103:5" pos:end="103:69"><name pos:start="103:5" pos:end="103:31">memory_region_add_subregion</name><argument_list pos:start="103:32" pos:end="103:69">(<argument pos:start="103:33" pos:end="103:45"><expr pos:start="103:33" pos:end="103:45"><name pos:start="103:33" pos:end="103:45">system_memory</name></expr></argument>, <argument pos:start="103:48" pos:end="103:57"><expr pos:start="103:48" pos:end="103:57"><literal type="number" pos:start="103:48" pos:end="103:57">0xf0000000</literal></expr></argument>, <argument pos:start="103:60" pos:end="103:68"><expr pos:start="103:60" pos:end="103:68"><name pos:start="103:60" pos:end="103:68">system_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><call pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:18">lx60_fpga_init</name><argument_list pos:start="105:19" pos:end="105:41">(<argument pos:start="105:20" pos:end="105:28"><expr pos:start="105:20" pos:end="105:28"><name pos:start="105:20" pos:end="105:28">system_io</name></expr></argument>, <argument pos:start="105:31" pos:end="105:40"><expr pos:start="105:31" pos:end="105:40"><literal type="number" pos:start="105:31" pos:end="105:40">0x0d020000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:25">(<expr pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:19"><name pos:start="107:9" pos:end="107:16">nd_table</name><index pos:start="107:17" pos:end="107:19">[<expr pos:start="107:18" pos:end="107:18"><literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>]</index></name><operator pos:start="107:20" pos:end="107:20">.</operator><name pos:start="107:21" pos:end="107:24">used</name></expr>)</condition> <block pos:start="107:27" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:53">

        <expr_stmt pos:start="109:9" pos:end="111:53"><expr pos:start="109:9" pos:end="111:52"><call pos:start="109:9" pos:end="111:52"><name pos:start="109:9" pos:end="109:21">lx60_net_init</name><argument_list pos:start="109:22" pos:end="111:52">(<argument pos:start="109:23" pos:end="109:31"><expr pos:start="109:23" pos:end="109:31"><name pos:start="109:23" pos:end="109:31">system_io</name></expr></argument>, <argument pos:start="109:34" pos:end="109:43"><expr pos:start="109:34" pos:end="109:43"><literal type="number" pos:start="109:34" pos:end="109:43">0x0d030000</literal></expr></argument>, <argument pos:start="109:46" pos:end="109:55"><expr pos:start="109:46" pos:end="109:55"><literal type="number" pos:start="109:46" pos:end="109:55">0x0d030400</literal></expr></argument>, <argument pos:start="109:58" pos:end="109:67"><expr pos:start="109:58" pos:end="109:67"><literal type="number" pos:start="109:58" pos:end="109:67">0x0d800000</literal></expr></argument>,

                <argument pos:start="111:17" pos:end="111:41"><expr pos:start="111:17" pos:end="111:41"><call pos:start="111:17" pos:end="111:41"><name pos:start="111:17" pos:end="111:33">xtensa_get_extint</name><argument_list pos:start="111:34" pos:end="111:41">(<argument pos:start="111:35" pos:end="111:37"><expr pos:start="111:35" pos:end="111:37"><name pos:start="111:35" pos:end="111:37">env</name></expr></argument>, <argument pos:start="111:40" pos:end="111:40"><expr pos:start="111:40" pos:end="111:40"><literal type="number" pos:start="111:40" pos:end="111:40">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="111:44" pos:end="111:51"><expr pos:start="111:44" pos:end="111:51"><name pos:start="111:44" pos:end="111:51">nd_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:23">(<expr pos:start="117:9" pos:end="117:22"><operator pos:start="117:9" pos:end="117:9">!</operator><name pos:start="117:10" pos:end="117:22"><name pos:start="117:10" pos:end="117:19">serial_hds</name><index pos:start="117:20" pos:end="117:22">[<expr pos:start="117:21" pos:end="117:21"><literal type="number" pos:start="117:21" pos:end="117:21">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="117:25" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:62">

        <expr_stmt pos:start="119:9" pos:end="119:62"><expr pos:start="119:9" pos:end="119:61"><name pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:18">serial_hds</name><index pos:start="119:19" pos:end="119:21">[<expr pos:start="119:20" pos:end="119:20"><literal type="number" pos:start="119:20" pos:end="119:20">0</literal></expr>]</index></name> <operator pos:start="119:23" pos:end="119:23">=</operator> <call pos:start="119:25" pos:end="119:61"><name pos:start="119:25" pos:end="119:36">qemu_chr_new</name><argument_list pos:start="119:37" pos:end="119:61">(<argument pos:start="119:38" pos:end="119:46"><expr pos:start="119:38" pos:end="119:46"><literal type="string" pos:start="119:38" pos:end="119:46">"serial0"</literal></expr></argument>, <argument pos:start="119:49" pos:end="119:54"><expr pos:start="119:49" pos:end="119:54"><literal type="string" pos:start="119:49" pos:end="119:54">"null"</literal></expr></argument>, <argument pos:start="119:57" pos:end="119:60"><expr pos:start="119:57" pos:end="119:60"><name pos:start="119:57" pos:end="119:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="127:57"><expr pos:start="125:5" pos:end="127:56"><call pos:start="125:5" pos:end="127:56"><name pos:start="125:5" pos:end="125:18">serial_mm_init</name><argument_list pos:start="125:19" pos:end="127:56">(<argument pos:start="125:20" pos:end="125:28"><expr pos:start="125:20" pos:end="125:28"><name pos:start="125:20" pos:end="125:28">system_io</name></expr></argument>, <argument pos:start="125:31" pos:end="125:40"><expr pos:start="125:31" pos:end="125:40"><literal type="number" pos:start="125:31" pos:end="125:40">0x0d050020</literal></expr></argument>, <argument pos:start="125:43" pos:end="125:43"><expr pos:start="125:43" pos:end="125:43"><literal type="number" pos:start="125:43" pos:end="125:43">2</literal></expr></argument>, <argument pos:start="125:46" pos:end="125:70"><expr pos:start="125:46" pos:end="125:70"><call pos:start="125:46" pos:end="125:70"><name pos:start="125:46" pos:end="125:62">xtensa_get_extint</name><argument_list pos:start="125:63" pos:end="125:70">(<argument pos:start="125:64" pos:end="125:66"><expr pos:start="125:64" pos:end="125:66"><name pos:start="125:64" pos:end="125:66">env</name></expr></argument>, <argument pos:start="125:69" pos:end="125:69"><expr pos:start="125:69" pos:end="125:69"><literal type="number" pos:start="125:69" pos:end="125:69">0</literal></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="127:13" pos:end="127:18"><expr pos:start="127:13" pos:end="127:18"><literal type="number" pos:start="127:13" pos:end="127:18">115200</literal></expr></argument>, <argument pos:start="127:21" pos:end="127:33"><expr pos:start="127:21" pos:end="127:33"><name pos:start="127:21" pos:end="127:33"><name pos:start="127:21" pos:end="127:30">serial_hds</name><index pos:start="127:31" pos:end="127:33">[<expr pos:start="127:32" pos:end="127:32"><literal type="number" pos:start="127:32" pos:end="127:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="127:36" pos:end="127:55"><expr pos:start="127:36" pos:end="127:55"><name pos:start="127:36" pos:end="127:55">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:39"><expr pos:start="131:5" pos:end="131:38"><name pos:start="131:5" pos:end="131:9">dinfo</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <call pos:start="131:13" pos:end="131:38"><name pos:start="131:13" pos:end="131:21">drive_get</name><argument_list pos:start="131:22" pos:end="131:38">(<argument pos:start="131:23" pos:end="131:31"><expr pos:start="131:23" pos:end="131:31"><name pos:start="131:23" pos:end="131:31">IF_PFLASH</name></expr></argument>, <argument pos:start="131:34" pos:end="131:34"><expr pos:start="131:34" pos:end="131:34"><literal type="number" pos:start="131:34" pos:end="131:34">0</literal></expr></argument>, <argument pos:start="131:37" pos:end="131:37"><expr pos:start="131:37" pos:end="131:37"><literal type="number" pos:start="131:37" pos:end="131:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="155:5"><if pos:start="133:5" pos:end="155:5">if <condition pos:start="133:8" pos:end="133:14">(<expr pos:start="133:9" pos:end="133:13"><name pos:start="133:9" pos:end="133:13">dinfo</name></expr>)</condition> <block pos:start="133:16" pos:end="155:5">{<block_content pos:start="135:9" pos:end="153:9">

        <expr_stmt pos:start="135:9" pos:end="145:55"><expr pos:start="135:9" pos:end="145:54"><name pos:start="135:9" pos:end="135:13">flash</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <call pos:start="135:17" pos:end="145:54"><name pos:start="135:17" pos:end="135:37">pflash_cfi01_register</name><argument_list pos:start="135:38" pos:end="145:54">(<argument pos:start="135:39" pos:end="135:55"><expr pos:start="135:39" pos:end="135:55"><name pos:start="135:39" pos:end="135:55"><name pos:start="135:39" pos:end="135:43">board</name><operator pos:start="135:44" pos:end="135:45">-&gt;</operator><name pos:start="135:46" pos:end="135:55">flash_base</name></name></expr></argument>,

                <argument pos:start="137:17" pos:end="137:20"><expr pos:start="137:17" pos:end="137:20"><name pos:start="137:17" pos:end="137:20">NULL</name></expr></argument>, <argument pos:start="137:23" pos:end="137:37"><expr pos:start="137:23" pos:end="137:37"><literal type="string" pos:start="137:23" pos:end="137:37">"lx60.io.flash"</literal></expr></argument>, <argument pos:start="137:40" pos:end="137:56"><expr pos:start="137:40" pos:end="137:56"><name pos:start="137:40" pos:end="137:56"><name pos:start="137:40" pos:end="137:44">board</name><operator pos:start="137:45" pos:end="137:46">-&gt;</operator><name pos:start="137:47" pos:end="137:56">flash_size</name></name></expr></argument>,

                <argument pos:start="139:17" pos:end="139:42"><expr pos:start="139:17" pos:end="139:42"><call pos:start="139:17" pos:end="139:42"><name pos:start="139:17" pos:end="139:35">blk_by_legacy_dinfo</name><argument_list pos:start="139:36" pos:end="139:42">(<argument pos:start="139:37" pos:end="139:41"><expr pos:start="139:37" pos:end="139:41"><name pos:start="139:37" pos:end="139:41">dinfo</name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="141:17" pos:end="141:40"><expr pos:start="141:17" pos:end="141:40"><name pos:start="141:17" pos:end="141:40"><name pos:start="141:17" pos:end="141:21">board</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:40">flash_sector_size</name></name></expr></argument>,

                <argument pos:start="143:17" pos:end="143:60"><expr pos:start="143:17" pos:end="143:60"><name pos:start="143:17" pos:end="143:33"><name pos:start="143:17" pos:end="143:21">board</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:33">flash_size</name></name> <operator pos:start="143:35" pos:end="143:35">/</operator> <name pos:start="143:37" pos:end="143:60"><name pos:start="143:37" pos:end="143:41">board</name><operator pos:start="143:42" pos:end="143:43">-&gt;</operator><name pos:start="143:44" pos:end="143:60">flash_sector_size</name></name></expr></argument>,

                <argument pos:start="145:17" pos:end="145:17"><expr pos:start="145:17" pos:end="145:17"><literal type="number" pos:start="145:17" pos:end="145:17">4</literal></expr></argument>, <argument pos:start="145:20" pos:end="145:25"><expr pos:start="145:20" pos:end="145:25"><literal type="number" pos:start="145:20" pos:end="145:25">0x0000</literal></expr></argument>, <argument pos:start="145:28" pos:end="145:33"><expr pos:start="145:28" pos:end="145:33"><literal type="number" pos:start="145:28" pos:end="145:33">0x0000</literal></expr></argument>, <argument pos:start="145:36" pos:end="145:41"><expr pos:start="145:36" pos:end="145:41"><literal type="number" pos:start="145:36" pos:end="145:41">0x0000</literal></expr></argument>, <argument pos:start="145:44" pos:end="145:49"><expr pos:start="145:44" pos:end="145:49"><literal type="number" pos:start="145:44" pos:end="145:49">0x0000</literal></expr></argument>, <argument pos:start="145:52" pos:end="145:53"><expr pos:start="145:52" pos:end="145:53"><name pos:start="145:52" pos:end="145:53">be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:26">(<expr pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:17">flash</name> <operator pos:start="147:19" pos:end="147:20">==</operator> <name pos:start="147:22" pos:end="147:25">NULL</name></expr>)</condition> <block pos:start="147:28" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:31">

            <expr_stmt pos:start="149:13" pos:end="149:51"><expr pos:start="149:13" pos:end="149:50"><call pos:start="149:13" pos:end="149:50"><name pos:start="149:13" pos:end="149:24">error_report</name><argument_list pos:start="149:25" pos:end="149:50">(<argument pos:start="149:26" pos:end="149:49"><expr pos:start="149:26" pos:end="149:49"><literal type="string" pos:start="149:26" pos:end="149:49">"unable to mount pflash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:31"><expr pos:start="151:13" pos:end="151:30"><call pos:start="151:13" pos:end="151:30"><name pos:start="151:13" pos:end="151:16">exit</name><argument_list pos:start="151:17" pos:end="151:30">(<argument pos:start="151:18" pos:end="151:29"><expr pos:start="151:18" pos:end="151:29"><name pos:start="151:18" pos:end="151:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:70">/* Use presence of kernel file name as 'boot from SRAM' switch. */</comment>

    <if_stmt pos:start="161:5" pos:end="401:5"><if pos:start="161:5" pos:end="377:5">if <condition pos:start="161:8" pos:end="161:24">(<expr pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:23">kernel_filename</name></expr>)</condition> <block pos:start="161:26" pos:end="377:5">{<block_content pos:start="163:9" pos:end="375:9">

        <decl_stmt pos:start="163:9" pos:end="163:39"><decl pos:start="163:9" pos:end="163:38"><type pos:start="163:9" pos:end="163:16"><name pos:start="163:9" pos:end="163:16">uint32_t</name></type> <name pos:start="163:18" pos:end="163:28">entry_point</name> <init pos:start="163:30" pos:end="163:38">= <expr pos:start="163:32" pos:end="163:38"><name pos:start="163:32" pos:end="163:38"><name pos:start="163:32" pos:end="163:34">env</name><operator pos:start="163:35" pos:end="163:36">-&gt;</operator><name pos:start="163:37" pos:end="163:38">pc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:45"><decl pos:start="165:9" pos:end="165:44"><type pos:start="165:9" pos:end="165:14"><name pos:start="165:9" pos:end="165:14">size_t</name></type> <name pos:start="165:16" pos:end="165:22">bp_size</name> <init pos:start="165:24" pos:end="165:44">= <expr pos:start="165:26" pos:end="165:44"><literal type="number" pos:start="165:26" pos:end="165:26">3</literal> <operator pos:start="165:28" pos:end="165:28">*</operator> <call pos:start="165:30" pos:end="165:44"><name pos:start="165:30" pos:end="165:41">get_tag_size</name><argument_list pos:start="165:42" pos:end="165:44">(<argument pos:start="165:43" pos:end="165:43"><expr pos:start="165:43" pos:end="165:43"><literal type="number" pos:start="165:43" pos:end="165:43">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="165:47" pos:end="165:78">/* first/last and memory tags */</comment>

        <decl_stmt pos:start="167:9" pos:end="167:56"><decl pos:start="167:9" pos:end="167:55"><type pos:start="167:9" pos:end="167:16"><name pos:start="167:9" pos:end="167:16">uint32_t</name></type> <name pos:start="167:18" pos:end="167:23">tagptr</name> <init pos:start="167:25" pos:end="167:55">= <expr pos:start="167:27" pos:end="167:55"><literal type="number" pos:start="167:27" pos:end="167:38">0xfe000000</literal> <operator pos:start="167:38" pos:end="167:38">+</operator> <name pos:start="167:40" pos:end="167:55"><name pos:start="167:40" pos:end="167:44">board</name><operator pos:start="167:45" pos:end="167:46">-&gt;</operator><name pos:start="167:47" pos:end="167:55">sram_size</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="169:9" pos:end="169:28"><decl pos:start="169:9" pos:end="169:27"><type pos:start="169:9" pos:end="169:16"><name pos:start="169:9" pos:end="169:16">uint32_t</name></type> <name pos:start="169:18" pos:end="169:27">cur_tagptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="171:9" pos:end="179:10"><decl pos:start="171:9" pos:end="179:9"><type pos:start="171:9" pos:end="171:17"><name pos:start="171:9" pos:end="171:17">BpMemInfo</name></type> <name pos:start="171:19" pos:end="171:33">memory_location</name> <init pos:start="171:35" pos:end="179:9">= <expr pos:start="171:37" pos:end="179:9"><block pos:start="171:37" pos:end="179:9">{

            <expr pos:start="173:13" pos:end="173:53"><operator pos:start="173:13" pos:end="173:13">.</operator><name pos:start="173:14" pos:end="173:17">type</name> <operator pos:start="173:19" pos:end="173:19">=</operator> <call pos:start="173:21" pos:end="173:53"><name pos:start="173:21" pos:end="173:27">tswap32</name><argument_list pos:start="173:28" pos:end="173:53">(<argument pos:start="173:29" pos:end="173:52"><expr pos:start="173:29" pos:end="173:52"><name pos:start="173:29" pos:end="173:52">MEMORY_TYPE_CONVENTIONAL</name></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="175:13" pos:end="175:31"><operator pos:start="175:13" pos:end="175:13">.</operator><name pos:start="175:14" pos:end="175:18">start</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <call pos:start="175:22" pos:end="175:31"><name pos:start="175:22" pos:end="175:28">tswap32</name><argument_list pos:start="175:29" pos:end="175:31">(<argument pos:start="175:30" pos:end="175:30"><expr pos:start="175:30" pos:end="175:30"><literal type="number" pos:start="175:30" pos:end="175:30">0</literal></expr></argument>)</argument_list></call></expr>,

            <expr pos:start="177:13" pos:end="177:45"><operator pos:start="177:13" pos:end="177:13">.</operator><name pos:start="177:14" pos:end="177:16">end</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <call pos:start="177:20" pos:end="177:45"><name pos:start="177:20" pos:end="177:26">tswap32</name><argument_list pos:start="177:27" pos:end="177:45">(<argument pos:start="177:28" pos:end="177:44"><expr pos:start="177:28" pos:end="177:44"><name pos:start="177:28" pos:end="177:44"><name pos:start="177:28" pos:end="177:34">machine</name><operator pos:start="177:35" pos:end="177:36">-&gt;</operator><name pos:start="177:37" pos:end="177:44">ram_size</name></name></expr></argument>)</argument_list></call></expr>,

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="181:9" pos:end="183:43"><decl pos:start="181:9" pos:end="183:42"><type pos:start="181:9" pos:end="181:16"><name pos:start="181:9" pos:end="181:16">uint32_t</name></type> <name pos:start="181:18" pos:end="181:27">lowmem_end</name> <init pos:start="181:29" pos:end="183:42">= <expr pos:start="181:31" pos:end="183:42"><ternary pos:start="181:31" pos:end="183:42"><condition pos:start="181:31" pos:end="181:62"><expr pos:start="181:31" pos:end="181:60"><name pos:start="181:31" pos:end="181:47"><name pos:start="181:31" pos:end="181:37">machine</name><operator pos:start="181:38" pos:end="181:39">-&gt;</operator><name pos:start="181:40" pos:end="181:47">ram_size</name></name> <operator pos:start="181:49" pos:end="181:49">&lt;</operator> <literal type="number" pos:start="181:51" pos:end="181:60">0x08000000</literal></expr> ?</condition><then pos:start="183:13" pos:end="183:29">

            <expr pos:start="183:13" pos:end="183:29"><name pos:start="183:13" pos:end="183:29"><name pos:start="183:13" pos:end="183:19">machine</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:29">ram_size</name></name></expr> </then><else pos:start="183:31" pos:end="183:42">: <expr pos:start="183:33" pos:end="183:42"><literal type="number" pos:start="183:33" pos:end="183:42">0x08000000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="185:9" pos:end="185:66"><decl pos:start="185:9" pos:end="185:65"><type pos:start="185:9" pos:end="185:16"><name pos:start="185:9" pos:end="185:16">uint32_t</name></type> <name pos:start="185:18" pos:end="185:27">cur_lowmem</name> <init pos:start="185:29" pos:end="185:65">= <expr pos:start="185:31" pos:end="185:65"><call pos:start="185:31" pos:end="185:65"><name pos:start="185:31" pos:end="185:43">QEMU_ALIGN_UP</name><argument_list pos:start="185:44" pos:end="185:65">(<argument pos:start="185:45" pos:end="185:58"><expr pos:start="185:45" pos:end="185:58"><name pos:start="185:45" pos:end="185:54">lowmem_end</name> <operator pos:start="185:56" pos:end="185:56">/</operator> <literal type="number" pos:start="185:58" pos:end="185:58">2</literal></expr></argument>, <argument pos:start="185:61" pos:end="185:64"><expr pos:start="185:61" pos:end="185:64"><literal type="number" pos:start="185:61" pos:end="185:64">4096</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:37"><expr pos:start="189:9" pos:end="189:36"><name pos:start="189:9" pos:end="189:11">rom</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:36"><name pos:start="189:15" pos:end="189:22">g_malloc</name><argument_list pos:start="189:23" pos:end="189:36">(<argument pos:start="189:24" pos:end="189:35"><expr pos:start="189:24" pos:end="189:35"><sizeof pos:start="189:24" pos:end="189:35">sizeof<argument_list pos:start="189:30" pos:end="189:35">(<argument pos:start="189:31" pos:end="189:34"><expr pos:start="189:31" pos:end="189:34"><operator pos:start="189:31" pos:end="189:31">*</operator><name pos:start="189:32" pos:end="189:34">rom</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="193:45"><expr pos:start="191:9" pos:end="193:44"><call pos:start="191:9" pos:end="193:44"><name pos:start="191:9" pos:end="191:30">memory_region_init_ram</name><argument_list pos:start="191:31" pos:end="193:44">(<argument pos:start="191:32" pos:end="191:34"><expr pos:start="191:32" pos:end="191:34"><name pos:start="191:32" pos:end="191:34">rom</name></expr></argument>, <argument pos:start="191:37" pos:end="191:40"><expr pos:start="191:37" pos:end="191:40"><name pos:start="191:37" pos:end="191:40">NULL</name></expr></argument>, <argument pos:start="191:43" pos:end="191:53"><expr pos:start="191:43" pos:end="191:53"><literal type="string" pos:start="191:43" pos:end="191:53">"lx60.sram"</literal></expr></argument>, <argument pos:start="191:56" pos:end="191:71"><expr pos:start="191:56" pos:end="191:71"><name pos:start="191:56" pos:end="191:71"><name pos:start="191:56" pos:end="191:60">board</name><operator pos:start="191:61" pos:end="191:62">-&gt;</operator><name pos:start="191:63" pos:end="191:71">sram_size</name></name></expr></argument>,

                               <argument pos:start="193:32" pos:end="193:43"><expr pos:start="193:32" pos:end="193:43"><operator pos:start="193:32" pos:end="193:32">&amp;</operator><name pos:start="193:33" pos:end="193:43">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:41"><expr pos:start="195:9" pos:end="195:40"><call pos:start="195:9" pos:end="195:40"><name pos:start="195:9" pos:end="195:35">vmstate_register_ram_global</name><argument_list pos:start="195:36" pos:end="195:40">(<argument pos:start="195:37" pos:end="195:39"><expr pos:start="195:37" pos:end="195:39"><name pos:start="195:37" pos:end="195:39">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:68"><expr pos:start="197:9" pos:end="197:67"><call pos:start="197:9" pos:end="197:67"><name pos:start="197:9" pos:end="197:35">memory_region_add_subregion</name><argument_list pos:start="197:36" pos:end="197:67">(<argument pos:start="197:37" pos:end="197:49"><expr pos:start="197:37" pos:end="197:49"><name pos:start="197:37" pos:end="197:49">system_memory</name></expr></argument>, <argument pos:start="197:52" pos:end="197:61"><expr pos:start="197:52" pos:end="197:61"><literal type="number" pos:start="197:52" pos:end="197:61">0xfe000000</literal></expr></argument>, <argument pos:start="197:64" pos:end="197:66"><expr pos:start="197:64" pos:end="197:66"><name pos:start="197:64" pos:end="197:66">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="201:9" pos:end="205:9"><if pos:start="201:9" pos:end="205:9">if <condition pos:start="201:12" pos:end="201:27">(<expr pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:26">kernel_cmdline</name></expr>)</condition> <block pos:start="201:29" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:64">

            <expr_stmt pos:start="203:13" pos:end="203:64"><expr pos:start="203:13" pos:end="203:63"><name pos:start="203:13" pos:end="203:19">bp_size</name> <operator pos:start="203:21" pos:end="203:22">+=</operator> <call pos:start="203:24" pos:end="203:63"><name pos:start="203:24" pos:end="203:35">get_tag_size</name><argument_list pos:start="203:36" pos:end="203:63">(<argument pos:start="203:37" pos:end="203:62"><expr pos:start="203:37" pos:end="203:62"><call pos:start="203:37" pos:end="203:58"><name pos:start="203:37" pos:end="203:42">strlen</name><argument_list pos:start="203:43" pos:end="203:58">(<argument pos:start="203:44" pos:end="203:57"><expr pos:start="203:44" pos:end="203:57"><name pos:start="203:44" pos:end="203:57">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="203:60" pos:end="203:60">+</operator> <literal type="number" pos:start="203:62" pos:end="203:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="207:9" pos:end="211:9"><if pos:start="207:9" pos:end="211:9">if <condition pos:start="207:12" pos:end="207:25">(<expr pos:start="207:13" pos:end="207:24"><name pos:start="207:13" pos:end="207:24">dtb_filename</name></expr>)</condition> <block pos:start="207:27" pos:end="211:9">{<block_content pos:start="209:13" pos:end="209:54">

            <expr_stmt pos:start="209:13" pos:end="209:54"><expr pos:start="209:13" pos:end="209:53"><name pos:start="209:13" pos:end="209:19">bp_size</name> <operator pos:start="209:21" pos:end="209:22">+=</operator> <call pos:start="209:24" pos:end="209:53"><name pos:start="209:24" pos:end="209:35">get_tag_size</name><argument_list pos:start="209:36" pos:end="209:53">(<argument pos:start="209:37" pos:end="209:52"><expr pos:start="209:37" pos:end="209:52"><sizeof pos:start="209:37" pos:end="209:52">sizeof<argument_list pos:start="209:43" pos:end="209:52">(<argument pos:start="209:44" pos:end="209:51"><expr pos:start="209:44" pos:end="209:51"><name pos:start="209:44" pos:end="209:51">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="213:9" pos:end="217:9"><if pos:start="213:9" pos:end="217:9">if <condition pos:start="213:12" pos:end="213:28">(<expr pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:27">initrd_filename</name></expr>)</condition> <block pos:start="213:30" pos:end="217:9">{<block_content pos:start="215:13" pos:end="215:55">

            <expr_stmt pos:start="215:13" pos:end="215:55"><expr pos:start="215:13" pos:end="215:54"><name pos:start="215:13" pos:end="215:19">bp_size</name> <operator pos:start="215:21" pos:end="215:22">+=</operator> <call pos:start="215:24" pos:end="215:54"><name pos:start="215:24" pos:end="215:35">get_tag_size</name><argument_list pos:start="215:36" pos:end="215:54">(<argument pos:start="215:37" pos:end="215:53"><expr pos:start="215:37" pos:end="215:53"><sizeof pos:start="215:37" pos:end="215:53">sizeof<argument_list pos:start="215:43" pos:end="215:53">(<argument pos:start="215:44" pos:end="215:52"><expr pos:start="215:44" pos:end="215:52"><name pos:start="215:44" pos:end="215:52">BpMemInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="221:9" pos:end="221:63">/* Put kernel bootparameters to the end of that SRAM */</comment>

        <expr_stmt pos:start="223:9" pos:end="223:44"><expr pos:start="223:9" pos:end="223:43"><name pos:start="223:9" pos:end="223:14">tagptr</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <operator pos:start="223:18" pos:end="223:18">(</operator><name pos:start="223:19" pos:end="223:24">tagptr</name> <operator pos:start="223:26" pos:end="223:26">-</operator> <name pos:start="223:28" pos:end="223:34">bp_size</name><operator pos:start="223:35" pos:end="223:35">)</operator> <operator pos:start="223:37" pos:end="223:37">&amp;</operator> <operator pos:start="223:39" pos:end="223:39">~</operator><literal type="number" pos:start="223:40" pos:end="223:43">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:60"><expr pos:start="225:9" pos:end="225:59"><name pos:start="225:9" pos:end="225:18">cur_tagptr</name> <operator pos:start="225:20" pos:end="225:20">=</operator> <call pos:start="225:22" pos:end="225:59"><name pos:start="225:22" pos:end="225:28">put_tag</name><argument_list pos:start="225:29" pos:end="225:59">(<argument pos:start="225:30" pos:end="225:35"><expr pos:start="225:30" pos:end="225:35"><name pos:start="225:30" pos:end="225:35">tagptr</name></expr></argument>, <argument pos:start="225:38" pos:end="225:49"><expr pos:start="225:38" pos:end="225:49"><name pos:start="225:38" pos:end="225:49">BP_TAG_FIRST</name></expr></argument>, <argument pos:start="225:52" pos:end="225:52"><expr pos:start="225:52" pos:end="225:52"><literal type="number" pos:start="225:52" pos:end="225:52">0</literal></expr></argument>, <argument pos:start="225:55" pos:end="225:58"><expr pos:start="225:55" pos:end="225:58"><name pos:start="225:55" pos:end="225:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="229:72"><expr pos:start="227:9" pos:end="229:71"><name pos:start="227:9" pos:end="227:18">cur_tagptr</name> <operator pos:start="227:20" pos:end="227:20">=</operator> <call pos:start="227:22" pos:end="229:71"><name pos:start="227:22" pos:end="227:28">put_tag</name><argument_list pos:start="227:29" pos:end="229:71">(<argument pos:start="227:30" pos:end="227:39"><expr pos:start="227:30" pos:end="227:39"><name pos:start="227:30" pos:end="227:39">cur_tagptr</name></expr></argument>, <argument pos:start="227:42" pos:end="227:54"><expr pos:start="227:42" pos:end="227:54"><name pos:start="227:42" pos:end="227:54">BP_TAG_MEMORY</name></expr></argument>,

                             <argument pos:start="229:30" pos:end="229:52"><expr pos:start="229:30" pos:end="229:52"><sizeof pos:start="229:30" pos:end="229:52">sizeof<argument_list pos:start="229:36" pos:end="229:52">(<argument pos:start="229:37" pos:end="229:51"><expr pos:start="229:37" pos:end="229:51"><name pos:start="229:37" pos:end="229:51">memory_location</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="229:55" pos:end="229:70"><expr pos:start="229:55" pos:end="229:70"><operator pos:start="229:55" pos:end="229:55">&amp;</operator><name pos:start="229:56" pos:end="229:70">memory_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="233:9" pos:end="239:9"><if pos:start="233:9" pos:end="239:9">if <condition pos:start="233:12" pos:end="233:27">(<expr pos:start="233:13" pos:end="233:26"><name pos:start="233:13" pos:end="233:26">kernel_cmdline</name></expr>)</condition> <block pos:start="233:29" pos:end="239:9">{<block_content pos:start="235:13" pos:end="237:77">

            <expr_stmt pos:start="235:13" pos:end="237:77"><expr pos:start="235:13" pos:end="237:76"><name pos:start="235:13" pos:end="235:22">cur_tagptr</name> <operator pos:start="235:24" pos:end="235:24">=</operator> <call pos:start="235:26" pos:end="237:76"><name pos:start="235:26" pos:end="235:32">put_tag</name><argument_list pos:start="235:33" pos:end="237:76">(<argument pos:start="235:34" pos:end="235:43"><expr pos:start="235:34" pos:end="235:43"><name pos:start="235:34" pos:end="235:43">cur_tagptr</name></expr></argument>, <argument pos:start="235:46" pos:end="235:64"><expr pos:start="235:46" pos:end="235:64"><name pos:start="235:46" pos:end="235:64">BP_TAG_COMMAND_LINE</name></expr></argument>,

                                 <argument pos:start="237:34" pos:end="237:59"><expr pos:start="237:34" pos:end="237:59"><call pos:start="237:34" pos:end="237:55"><name pos:start="237:34" pos:end="237:39">strlen</name><argument_list pos:start="237:40" pos:end="237:55">(<argument pos:start="237:41" pos:end="237:54"><expr pos:start="237:41" pos:end="237:54"><name pos:start="237:41" pos:end="237:54">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="237:57" pos:end="237:57">+</operator> <literal type="number" pos:start="237:59" pos:end="237:59">1</literal></expr></argument>, <argument pos:start="237:62" pos:end="237:75"><expr pos:start="237:62" pos:end="237:75"><name pos:start="237:62" pos:end="237:75">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="241:9" pos:end="269:9"><if pos:start="241:9" pos:end="269:9">if <condition pos:start="241:12" pos:end="241:25">(<expr pos:start="241:13" pos:end="241:24"><name pos:start="241:13" pos:end="241:24">dtb_filename</name></expr>)</condition> <block pos:start="241:27" pos:end="269:9">{<block_content pos:start="243:13" pos:end="267:68">

            <decl_stmt pos:start="243:13" pos:end="243:25"><decl pos:start="243:13" pos:end="243:24"><type pos:start="243:13" pos:end="243:15"><name pos:start="243:13" pos:end="243:15">int</name></type> <name pos:start="243:17" pos:end="243:24">fdt_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="245:13" pos:end="245:66"><decl pos:start="245:13" pos:end="245:65"><type pos:start="245:13" pos:end="245:18"><name pos:start="245:13" pos:end="245:16">void</name> <modifier pos:start="245:18" pos:end="245:18">*</modifier></type><name pos:start="245:19" pos:end="245:21">fdt</name> <init pos:start="245:23" pos:end="245:65">= <expr pos:start="245:25" pos:end="245:65"><call pos:start="245:25" pos:end="245:65"><name pos:start="245:25" pos:end="245:40">load_device_tree</name><argument_list pos:start="245:41" pos:end="245:65">(<argument pos:start="245:42" pos:end="245:53"><expr pos:start="245:42" pos:end="245:53"><name pos:start="245:42" pos:end="245:53">dtb_filename</name></expr></argument>, <argument pos:start="245:56" pos:end="245:64"><expr pos:start="245:56" pos:end="245:64"><operator pos:start="245:56" pos:end="245:56">&amp;</operator><name pos:start="245:57" pos:end="245:64">fdt_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="247:13" pos:end="247:52"><decl pos:start="247:13" pos:end="247:51"><type pos:start="247:13" pos:end="247:20"><name pos:start="247:13" pos:end="247:20">uint32_t</name></type> <name pos:start="247:22" pos:end="247:29">dtb_addr</name> <init pos:start="247:31" pos:end="247:51">= <expr pos:start="247:33" pos:end="247:51"><call pos:start="247:33" pos:end="247:51"><name pos:start="247:33" pos:end="247:39">tswap32</name><argument_list pos:start="247:40" pos:end="247:51">(<argument pos:start="247:41" pos:end="247:50"><expr pos:start="247:41" pos:end="247:50"><name pos:start="247:41" pos:end="247:50">cur_lowmem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="251:13" pos:end="257:13"><if pos:start="251:13" pos:end="257:13">if <condition pos:start="251:16" pos:end="251:21">(<expr pos:start="251:17" pos:end="251:20"><operator pos:start="251:17" pos:end="251:17">!</operator><name pos:start="251:18" pos:end="251:20">fdt</name></expr>)</condition> <block pos:start="251:23" pos:end="257:13">{<block_content pos:start="253:17" pos:end="255:35">

                <expr_stmt pos:start="253:17" pos:end="253:70"><expr pos:start="253:17" pos:end="253:69"><call pos:start="253:17" pos:end="253:69"><name pos:start="253:17" pos:end="253:28">error_report</name><argument_list pos:start="253:29" pos:end="253:69">(<argument pos:start="253:30" pos:end="253:54"><expr pos:start="253:30" pos:end="253:54"><literal type="string" pos:start="253:30" pos:end="253:54">"could not load DTB '%s'"</literal></expr></argument>, <argument pos:start="253:57" pos:end="253:68"><expr pos:start="253:57" pos:end="253:68"><name pos:start="253:57" pos:end="253:68">dtb_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:35"><expr pos:start="255:17" pos:end="255:34"><call pos:start="255:17" pos:end="255:34"><name pos:start="255:17" pos:end="255:20">exit</name><argument_list pos:start="255:21" pos:end="255:34">(<argument pos:start="255:22" pos:end="255:33"><expr pos:start="255:22" pos:end="255:33"><name pos:start="255:22" pos:end="255:33">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="261:13" pos:end="261:65"><expr pos:start="261:13" pos:end="261:64"><call pos:start="261:13" pos:end="261:64"><name pos:start="261:13" pos:end="261:37">cpu_physical_memory_write</name><argument_list pos:start="261:38" pos:end="261:64">(<argument pos:start="261:39" pos:end="261:48"><expr pos:start="261:39" pos:end="261:48"><name pos:start="261:39" pos:end="261:48">cur_lowmem</name></expr></argument>, <argument pos:start="261:51" pos:end="261:53"><expr pos:start="261:51" pos:end="261:53"><name pos:start="261:51" pos:end="261:53">fdt</name></expr></argument>, <argument pos:start="261:56" pos:end="261:63"><expr pos:start="261:56" pos:end="261:63"><name pos:start="261:56" pos:end="261:63">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="265:62"><expr pos:start="263:13" pos:end="265:61"><name pos:start="263:13" pos:end="263:22">cur_tagptr</name> <operator pos:start="263:24" pos:end="263:24">=</operator> <call pos:start="263:26" pos:end="265:61"><name pos:start="263:26" pos:end="263:32">put_tag</name><argument_list pos:start="263:33" pos:end="265:61">(<argument pos:start="263:34" pos:end="263:43"><expr pos:start="263:34" pos:end="263:43"><name pos:start="263:34" pos:end="263:43">cur_tagptr</name></expr></argument>, <argument pos:start="263:46" pos:end="263:55"><expr pos:start="263:46" pos:end="263:55"><name pos:start="263:46" pos:end="263:55">BP_TAG_FDT</name></expr></argument>,

                                 <argument pos:start="265:34" pos:end="265:49"><expr pos:start="265:34" pos:end="265:49"><sizeof pos:start="265:34" pos:end="265:49">sizeof<argument_list pos:start="265:40" pos:end="265:49">(<argument pos:start="265:41" pos:end="265:48"><expr pos:start="265:41" pos:end="265:48"><name pos:start="265:41" pos:end="265:48">dtb_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="265:52" pos:end="265:60"><expr pos:start="265:52" pos:end="265:60"><operator pos:start="265:52" pos:end="265:52">&amp;</operator><name pos:start="265:53" pos:end="265:60">dtb_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:68"><expr pos:start="267:13" pos:end="267:67"><name pos:start="267:13" pos:end="267:22">cur_lowmem</name> <operator pos:start="267:24" pos:end="267:24">=</operator> <call pos:start="267:26" pos:end="267:67"><name pos:start="267:26" pos:end="267:38">QEMU_ALIGN_UP</name><argument_list pos:start="267:39" pos:end="267:67">(<argument pos:start="267:40" pos:end="267:60"><expr pos:start="267:40" pos:end="267:60"><name pos:start="267:40" pos:end="267:49">cur_lowmem</name> <operator pos:start="267:51" pos:end="267:51">+</operator> <name pos:start="267:53" pos:end="267:60">fdt_size</name></expr></argument>, <argument pos:start="267:63" pos:end="267:66"><expr pos:start="267:63" pos:end="267:66"><literal type="number" pos:start="267:63" pos:end="267:66">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="271:9" pos:end="309:9"><if pos:start="271:9" pos:end="309:9">if <condition pos:start="271:12" pos:end="271:28">(<expr pos:start="271:13" pos:end="271:27"><name pos:start="271:13" pos:end="271:27">initrd_filename</name></expr>)</condition> <block pos:start="271:30" pos:end="309:9">{<block_content pos:start="273:13" pos:end="307:71">

            <decl_stmt pos:start="273:13" pos:end="273:46"><decl pos:start="273:13" pos:end="273:45"><type pos:start="273:13" pos:end="273:21"><name pos:start="273:13" pos:end="273:21">BpMemInfo</name></type> <name pos:start="273:23" pos:end="273:37">initrd_location</name> <init pos:start="273:39" pos:end="273:45">= <expr pos:start="273:41" pos:end="273:45"><block pos:start="273:41" pos:end="273:45">{ <expr pos:start="273:43" pos:end="273:43"><literal type="number" pos:start="273:43" pos:end="273:43">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="275:13" pos:end="277:68"><decl pos:start="275:13" pos:end="277:67"><type pos:start="275:13" pos:end="275:15"><name pos:start="275:13" pos:end="275:15">int</name></type> <name pos:start="275:17" pos:end="275:27">initrd_size</name> <init pos:start="275:29" pos:end="277:67">= <expr pos:start="275:31" pos:end="277:67"><call pos:start="275:31" pos:end="277:67"><name pos:start="275:31" pos:end="275:42">load_ramdisk</name><argument_list pos:start="275:43" pos:end="277:67">(<argument pos:start="275:44" pos:end="275:58"><expr pos:start="275:44" pos:end="275:58"><name pos:start="275:44" pos:end="275:58">initrd_filename</name></expr></argument>, <argument pos:start="275:61" pos:end="275:70"><expr pos:start="275:61" pos:end="275:70"><name pos:start="275:61" pos:end="275:70">cur_lowmem</name></expr></argument>,

                                           <argument pos:start="277:44" pos:end="277:66"><expr pos:start="277:44" pos:end="277:66"><name pos:start="277:44" pos:end="277:53">lowmem_end</name> <operator pos:start="277:55" pos:end="277:55">-</operator> <name pos:start="277:57" pos:end="277:66">cur_lowmem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="281:13" pos:end="289:13"><if pos:start="281:13" pos:end="289:13">if <condition pos:start="281:16" pos:end="281:32">(<expr pos:start="281:17" pos:end="281:31"><name pos:start="281:17" pos:end="281:27">initrd_size</name> <operator pos:start="281:29" pos:end="281:29">&lt;</operator> <literal type="number" pos:start="281:31" pos:end="281:31">0</literal></expr>)</condition> <block pos:start="281:34" pos:end="289:13">{<block_content pos:start="283:17" pos:end="287:75">

                <expr_stmt pos:start="283:17" pos:end="287:75"><expr pos:start="283:17" pos:end="287:74"><name pos:start="283:17" pos:end="283:27">initrd_size</name> <operator pos:start="283:29" pos:end="283:29">=</operator> <call pos:start="283:31" pos:end="287:74"><name pos:start="283:31" pos:end="283:49">load_image_targphys</name><argument_list pos:start="283:50" pos:end="287:74">(<argument pos:start="283:51" pos:end="283:65"><expr pos:start="283:51" pos:end="283:65"><name pos:start="283:51" pos:end="283:65">initrd_filename</name></expr></argument>,

                                                  <argument pos:start="285:51" pos:end="285:60"><expr pos:start="285:51" pos:end="285:60"><name pos:start="285:51" pos:end="285:60">cur_lowmem</name></expr></argument>,

                                                  <argument pos:start="287:51" pos:end="287:73"><expr pos:start="287:51" pos:end="287:73"><name pos:start="287:51" pos:end="287:60">lowmem_end</name> <operator pos:start="287:62" pos:end="287:62">-</operator> <name pos:start="287:64" pos:end="287:73">cur_lowmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="291:13" pos:end="297:13"><if pos:start="291:13" pos:end="297:13">if <condition pos:start="291:16" pos:end="291:32">(<expr pos:start="291:17" pos:end="291:31"><name pos:start="291:17" pos:end="291:27">initrd_size</name> <operator pos:start="291:29" pos:end="291:29">&lt;</operator> <literal type="number" pos:start="291:31" pos:end="291:31">0</literal></expr>)</condition> <block pos:start="291:34" pos:end="297:13">{<block_content pos:start="293:17" pos:end="295:35">

                <expr_stmt pos:start="293:17" pos:end="293:76"><expr pos:start="293:17" pos:end="293:75"><call pos:start="293:17" pos:end="293:75"><name pos:start="293:17" pos:end="293:28">error_report</name><argument_list pos:start="293:29" pos:end="293:75">(<argument pos:start="293:30" pos:end="293:57"><expr pos:start="293:30" pos:end="293:57"><literal type="string" pos:start="293:30" pos:end="293:57">"could not load initrd '%s'"</literal></expr></argument>, <argument pos:start="293:60" pos:end="293:74"><expr pos:start="293:60" pos:end="293:74"><name pos:start="293:60" pos:end="293:74">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:35"><expr pos:start="295:17" pos:end="295:34"><call pos:start="295:17" pos:end="295:34"><name pos:start="295:17" pos:end="295:20">exit</name><argument_list pos:start="295:21" pos:end="295:34">(<argument pos:start="295:22" pos:end="295:33"><expr pos:start="295:22" pos:end="295:33"><name pos:start="295:22" pos:end="295:33">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:56"><expr pos:start="299:13" pos:end="299:55"><name pos:start="299:13" pos:end="299:33"><name pos:start="299:13" pos:end="299:27">initrd_location</name><operator pos:start="299:28" pos:end="299:28">.</operator><name pos:start="299:29" pos:end="299:33">start</name></name> <operator pos:start="299:35" pos:end="299:35">=</operator> <call pos:start="299:37" pos:end="299:55"><name pos:start="299:37" pos:end="299:43">tswap32</name><argument_list pos:start="299:44" pos:end="299:55">(<argument pos:start="299:45" pos:end="299:54"><expr pos:start="299:45" pos:end="299:54"><name pos:start="299:45" pos:end="299:54">cur_lowmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:68"><expr pos:start="301:13" pos:end="301:67"><name pos:start="301:13" pos:end="301:31"><name pos:start="301:13" pos:end="301:27">initrd_location</name><operator pos:start="301:28" pos:end="301:28">.</operator><name pos:start="301:29" pos:end="301:31">end</name></name> <operator pos:start="301:33" pos:end="301:33">=</operator> <call pos:start="301:35" pos:end="301:67"><name pos:start="301:35" pos:end="301:41">tswap32</name><argument_list pos:start="301:42" pos:end="301:67">(<argument pos:start="301:43" pos:end="301:66"><expr pos:start="301:43" pos:end="301:66"><name pos:start="301:43" pos:end="301:52">cur_lowmem</name> <operator pos:start="301:54" pos:end="301:54">+</operator> <name pos:start="301:56" pos:end="301:66">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="305:76"><expr pos:start="303:13" pos:end="305:75"><name pos:start="303:13" pos:end="303:22">cur_tagptr</name> <operator pos:start="303:24" pos:end="303:24">=</operator> <call pos:start="303:26" pos:end="305:75"><name pos:start="303:26" pos:end="303:32">put_tag</name><argument_list pos:start="303:33" pos:end="305:75">(<argument pos:start="303:34" pos:end="303:43"><expr pos:start="303:34" pos:end="303:43"><name pos:start="303:34" pos:end="303:43">cur_tagptr</name></expr></argument>, <argument pos:start="303:46" pos:end="303:58"><expr pos:start="303:46" pos:end="303:58"><name pos:start="303:46" pos:end="303:58">BP_TAG_INITRD</name></expr></argument>,

                                 <argument pos:start="305:34" pos:end="305:56"><expr pos:start="305:34" pos:end="305:56"><sizeof pos:start="305:34" pos:end="305:56">sizeof<argument_list pos:start="305:40" pos:end="305:56">(<argument pos:start="305:41" pos:end="305:55"><expr pos:start="305:41" pos:end="305:55"><name pos:start="305:41" pos:end="305:55">initrd_location</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="305:59" pos:end="305:74"><expr pos:start="305:59" pos:end="305:74"><operator pos:start="305:59" pos:end="305:59">&amp;</operator><name pos:start="305:60" pos:end="305:74">initrd_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:71"><expr pos:start="307:13" pos:end="307:70"><name pos:start="307:13" pos:end="307:22">cur_lowmem</name> <operator pos:start="307:24" pos:end="307:24">=</operator> <call pos:start="307:26" pos:end="307:70"><name pos:start="307:26" pos:end="307:38">QEMU_ALIGN_UP</name><argument_list pos:start="307:39" pos:end="307:70">(<argument pos:start="307:40" pos:end="307:63"><expr pos:start="307:40" pos:end="307:63"><name pos:start="307:40" pos:end="307:49">cur_lowmem</name> <operator pos:start="307:51" pos:end="307:51">+</operator> <name pos:start="307:53" pos:end="307:63">initrd_size</name></expr></argument>, <argument pos:start="307:66" pos:end="307:69"><expr pos:start="307:66" pos:end="307:69"><literal type="number" pos:start="307:66" pos:end="307:69">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:63"><expr pos:start="311:9" pos:end="311:62"><name pos:start="311:9" pos:end="311:18">cur_tagptr</name> <operator pos:start="311:20" pos:end="311:20">=</operator> <call pos:start="311:22" pos:end="311:62"><name pos:start="311:22" pos:end="311:28">put_tag</name><argument_list pos:start="311:29" pos:end="311:62">(<argument pos:start="311:30" pos:end="311:39"><expr pos:start="311:30" pos:end="311:39"><name pos:start="311:30" pos:end="311:39">cur_tagptr</name></expr></argument>, <argument pos:start="311:42" pos:end="311:52"><expr pos:start="311:42" pos:end="311:52"><name pos:start="311:42" pos:end="311:52">BP_TAG_LAST</name></expr></argument>, <argument pos:start="311:55" pos:end="311:55"><expr pos:start="311:55" pos:end="311:55"><literal type="number" pos:start="311:55" pos:end="311:55">0</literal></expr></argument>, <argument pos:start="311:58" pos:end="311:61"><expr pos:start="311:58" pos:end="311:61"><name pos:start="311:58" pos:end="311:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:30"><expr pos:start="313:9" pos:end="313:29"><name pos:start="313:9" pos:end="313:20"><name pos:start="313:9" pos:end="313:11">env</name><operator pos:start="313:12" pos:end="313:13">-&gt;</operator><name pos:start="313:14" pos:end="313:17">regs</name><index pos:start="313:18" pos:end="313:20">[<expr pos:start="313:19" pos:end="313:19"><literal type="number" pos:start="313:19" pos:end="313:19">2</literal></expr>]</index></name> <operator pos:start="313:22" pos:end="313:22">=</operator> <name pos:start="313:24" pos:end="313:29">tagptr</name></expr>;</expr_stmt>



        <decl_stmt pos:start="317:9" pos:end="317:27"><decl pos:start="317:9" pos:end="317:26"><type pos:start="317:9" pos:end="317:16"><name pos:start="317:9" pos:end="317:16">uint64_t</name></type> <name pos:start="317:18" pos:end="317:26">elf_entry</name></decl>;</decl_stmt>

        <decl_stmt pos:start="319:9" pos:end="319:29"><decl pos:start="319:9" pos:end="319:28"><type pos:start="319:9" pos:end="319:16"><name pos:start="319:9" pos:end="319:16">uint64_t</name></type> <name pos:start="319:18" pos:end="319:28">elf_lowaddr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="321:9" pos:end="323:68"><decl pos:start="321:9" pos:end="323:67"><type pos:start="321:9" pos:end="321:11"><name pos:start="321:9" pos:end="321:11">int</name></type> <name pos:start="321:13" pos:end="321:19">success</name> <init pos:start="321:21" pos:end="323:67">= <expr pos:start="321:23" pos:end="323:67"><call pos:start="321:23" pos:end="323:67"><name pos:start="321:23" pos:end="321:30">load_elf</name><argument_list pos:start="321:31" pos:end="323:67">(<argument pos:start="321:32" pos:end="321:46"><expr pos:start="321:32" pos:end="321:46"><name pos:start="321:32" pos:end="321:46">kernel_filename</name></expr></argument>, <argument pos:start="321:49" pos:end="321:67"><expr pos:start="321:49" pos:end="321:67"><name pos:start="321:49" pos:end="321:67">translate_phys_addr</name></expr></argument>, <argument pos:start="321:70" pos:end="321:72"><expr pos:start="321:70" pos:end="321:72"><name pos:start="321:70" pos:end="321:72">cpu</name></expr></argument>,

                <argument pos:start="323:17" pos:end="323:26"><expr pos:start="323:17" pos:end="323:26"><operator pos:start="323:17" pos:end="323:17">&amp;</operator><name pos:start="323:18" pos:end="323:26">elf_entry</name></expr></argument>, <argument pos:start="323:29" pos:end="323:40"><expr pos:start="323:29" pos:end="323:40"><operator pos:start="323:29" pos:end="323:29">&amp;</operator><name pos:start="323:30" pos:end="323:40">elf_lowaddr</name></expr></argument>, <argument pos:start="323:43" pos:end="323:46"><expr pos:start="323:43" pos:end="323:46"><name pos:start="323:43" pos:end="323:46">NULL</name></expr></argument>, <argument pos:start="323:49" pos:end="323:50"><expr pos:start="323:49" pos:end="323:50"><name pos:start="323:49" pos:end="323:50">be</name></expr></argument>, <argument pos:start="323:53" pos:end="323:63"><expr pos:start="323:53" pos:end="323:63"><name pos:start="323:53" pos:end="323:63">ELF_MACHINE</name></expr></argument>, <argument pos:start="323:66" pos:end="323:66"><expr pos:start="323:66" pos:end="323:66"><literal type="number" pos:start="323:66" pos:end="323:66">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="325:9" pos:end="353:9"><if pos:start="325:9" pos:end="329:9">if <condition pos:start="325:12" pos:end="325:24">(<expr pos:start="325:13" pos:end="325:23"><name pos:start="325:13" pos:end="325:19">success</name> <operator pos:start="325:21" pos:end="325:21">&gt;</operator> <literal type="number" pos:start="325:23" pos:end="325:23">0</literal></expr>)</condition> <block pos:start="325:26" pos:end="329:9">{<block_content pos:start="327:13" pos:end="327:36">

            <expr_stmt pos:start="327:13" pos:end="327:36"><expr pos:start="327:13" pos:end="327:35"><name pos:start="327:13" pos:end="327:23">entry_point</name> <operator pos:start="327:25" pos:end="327:25">=</operator> <name pos:start="327:27" pos:end="327:35">elf_entry</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="329:11" pos:end="353:9">else <block pos:start="329:16" pos:end="353:9">{<block_content pos:start="331:13" pos:end="351:13">

            <decl_stmt pos:start="331:13" pos:end="331:22"><decl pos:start="331:13" pos:end="331:21"><type pos:start="331:13" pos:end="331:18"><name pos:start="331:13" pos:end="331:18">hwaddr</name></type> <name pos:start="331:20" pos:end="331:21">ep</name></decl>;</decl_stmt>

            <decl_stmt pos:start="333:13" pos:end="333:25"><decl pos:start="333:13" pos:end="333:24"><type pos:start="333:13" pos:end="333:15"><name pos:start="333:13" pos:end="333:15">int</name></type> <name pos:start="333:17" pos:end="333:24">is_linux</name></decl>;</decl_stmt>

            <expr_stmt pos:start="335:13" pos:end="337:60"><expr pos:start="335:13" pos:end="337:59"><name pos:start="335:13" pos:end="335:19">success</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <call pos:start="335:23" pos:end="337:59"><name pos:start="335:23" pos:end="335:33">load_uimage</name><argument_list pos:start="335:34" pos:end="337:59">(<argument pos:start="335:35" pos:end="335:49"><expr pos:start="335:35" pos:end="335:49"><name pos:start="335:35" pos:end="335:49">kernel_filename</name></expr></argument>, <argument pos:start="335:52" pos:end="335:54"><expr pos:start="335:52" pos:end="335:54"><operator pos:start="335:52" pos:end="335:52">&amp;</operator><name pos:start="335:53" pos:end="335:54">ep</name></expr></argument>, <argument pos:start="335:57" pos:end="335:60"><expr pos:start="335:57" pos:end="335:60"><name pos:start="335:57" pos:end="335:60">NULL</name></expr></argument>, <argument pos:start="335:63" pos:end="335:71"><expr pos:start="335:63" pos:end="335:71"><operator pos:start="335:63" pos:end="335:63">&amp;</operator><name pos:start="335:64" pos:end="335:71">is_linux</name></expr></argument>,

                                  <argument pos:start="337:35" pos:end="337:53"><expr pos:start="337:35" pos:end="337:53"><name pos:start="337:35" pos:end="337:53">translate_phys_addr</name></expr></argument>, <argument pos:start="337:56" pos:end="337:58"><expr pos:start="337:56" pos:end="337:58"><name pos:start="337:56" pos:end="337:58">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="339:13" pos:end="351:13"><if pos:start="339:13" pos:end="343:13">if <condition pos:start="339:16" pos:end="339:40">(<expr pos:start="339:17" pos:end="339:39"><name pos:start="339:17" pos:end="339:23">success</name> <operator pos:start="339:25" pos:end="339:25">&gt;</operator> <literal type="number" pos:start="339:27" pos:end="339:27">0</literal> <operator pos:start="339:29" pos:end="339:30">&amp;&amp;</operator> <name pos:start="339:32" pos:end="339:39">is_linux</name></expr>)</condition> <block pos:start="339:42" pos:end="343:13">{<block_content pos:start="341:17" pos:end="341:33">

                <expr_stmt pos:start="341:17" pos:end="341:33"><expr pos:start="341:17" pos:end="341:32"><name pos:start="341:17" pos:end="341:27">entry_point</name> <operator pos:start="341:29" pos:end="341:29">=</operator> <name pos:start="341:31" pos:end="341:32">ep</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="343:15" pos:end="351:13">else <block pos:start="343:20" pos:end="351:13">{<block_content pos:start="345:17" pos:end="349:35">

                <expr_stmt pos:start="345:17" pos:end="347:46"><expr pos:start="345:17" pos:end="347:45"><call pos:start="345:17" pos:end="347:45"><name pos:start="345:17" pos:end="345:28">error_report</name><argument_list pos:start="345:29" pos:end="347:45">(<argument pos:start="345:30" pos:end="345:57"><expr pos:start="345:30" pos:end="345:57"><literal type="string" pos:start="345:30" pos:end="345:57">"could not load kernel '%s'"</literal></expr></argument>,

                             <argument pos:start="347:30" pos:end="347:44"><expr pos:start="347:30" pos:end="347:44"><name pos:start="347:30" pos:end="347:44">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:35"><expr pos:start="349:17" pos:end="349:34"><call pos:start="349:17" pos:end="349:34"><name pos:start="349:17" pos:end="349:20">exit</name><argument_list pos:start="349:21" pos:end="349:34">(<argument pos:start="349:22" pos:end="349:33"><expr pos:start="349:22" pos:end="349:33"><name pos:start="349:22" pos:end="349:33">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="355:9" pos:end="375:9"><if pos:start="355:9" pos:end="375:9">if <condition pos:start="355:12" pos:end="355:35">(<expr pos:start="355:13" pos:end="355:34"><name pos:start="355:13" pos:end="355:23">entry_point</name> <operator pos:start="355:25" pos:end="355:26">!=</operator> <name pos:start="355:28" pos:end="355:34"><name pos:start="355:28" pos:end="355:30">env</name><operator pos:start="355:31" pos:end="355:32">-&gt;</operator><name pos:start="355:33" pos:end="355:34">pc</name></name></expr>)</condition> <block pos:start="355:37" pos:end="375:9">{<block_content pos:start="357:13" pos:end="373:69">

            <decl_stmt pos:start="357:13" pos:end="369:14"><decl pos:start="357:13" pos:end="369:13"><type pos:start="357:13" pos:end="357:32"><specifier pos:start="357:13" pos:end="357:18">static</specifier> <specifier pos:start="357:20" pos:end="357:24">const</specifier> <name pos:start="357:26" pos:end="357:32">uint8_t</name></type> <name pos:start="357:34" pos:end="357:40"><name pos:start="357:34" pos:end="357:38">jx_a0</name><index pos:start="357:39" pos:end="357:40">[]</index></name> <init pos:start="357:42" pos:end="369:13">= <expr pos:start="357:44" pos:end="369:13"><block pos:start="357:44" pos:end="369:13">{

<cpp:ifdef pos:start="359:1" pos:end="359:29">#<cpp:directive pos:start="359:2" pos:end="359:6">ifdef</cpp:directive> <name pos:start="359:8" pos:end="359:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

                <expr pos:start="361:17" pos:end="361:20"><literal type="number" pos:start="361:17" pos:end="361:20">0x0a</literal></expr>, <expr pos:start="361:23" pos:end="361:23"><literal type="number" pos:start="361:23" pos:end="361:23">0</literal></expr>, <expr pos:start="361:26" pos:end="361:26"><literal type="number" pos:start="361:26" pos:end="361:26">0</literal></expr>,

<cpp:else pos:start="363:1" pos:end="363:5">#<cpp:directive pos:start="363:2" pos:end="363:5">else</cpp:directive></cpp:else>

                <expr pos:start="365:17" pos:end="365:20"><literal type="number" pos:start="365:17" pos:end="365:20">0xa0</literal></expr>, <expr pos:start="365:23" pos:end="365:23"><literal type="number" pos:start="365:23" pos:end="365:23">0</literal></expr>, <expr pos:start="365:26" pos:end="365:26"><literal type="number" pos:start="365:26" pos:end="365:26">0</literal></expr>,

<cpp:endif pos:start="367:1" pos:end="367:6">#<cpp:directive pos:start="367:2" pos:end="367:6">endif</cpp:directive></cpp:endif>

            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:39"><expr pos:start="371:13" pos:end="371:38"><name pos:start="371:13" pos:end="371:24"><name pos:start="371:13" pos:end="371:15">env</name><operator pos:start="371:16" pos:end="371:17">-&gt;</operator><name pos:start="371:18" pos:end="371:21">regs</name><index pos:start="371:22" pos:end="371:24">[<expr pos:start="371:23" pos:end="371:23"><literal type="number" pos:start="371:23" pos:end="371:23">0</literal></expr>]</index></name> <operator pos:start="371:26" pos:end="371:26">=</operator> <name pos:start="371:28" pos:end="371:38">entry_point</name></expr>;</expr_stmt>

            <expr_stmt pos:start="373:13" pos:end="373:69"><expr pos:start="373:13" pos:end="373:68"><call pos:start="373:13" pos:end="373:68"><name pos:start="373:13" pos:end="373:37">cpu_physical_memory_write</name><argument_list pos:start="373:38" pos:end="373:68">(<argument pos:start="373:39" pos:end="373:45"><expr pos:start="373:39" pos:end="373:45"><name pos:start="373:39" pos:end="373:45"><name pos:start="373:39" pos:end="373:41">env</name><operator pos:start="373:42" pos:end="373:43">-&gt;</operator><name pos:start="373:44" pos:end="373:45">pc</name></name></expr></argument>, <argument pos:start="373:48" pos:end="373:52"><expr pos:start="373:48" pos:end="373:52"><name pos:start="373:48" pos:end="373:52">jx_a0</name></expr></argument>, <argument pos:start="373:55" pos:end="373:67"><expr pos:start="373:55" pos:end="373:67"><sizeof pos:start="373:55" pos:end="373:67">sizeof<argument_list pos:start="373:61" pos:end="373:67">(<argument pos:start="373:62" pos:end="373:66"><expr pos:start="373:62" pos:end="373:66"><name pos:start="373:62" pos:end="373:66">jx_a0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="377:7" pos:end="401:5">else <block pos:start="377:12" pos:end="401:5">{<block_content pos:start="379:9" pos:end="399:9">

        <if_stmt pos:start="379:9" pos:end="399:9"><if pos:start="379:9" pos:end="399:9">if <condition pos:start="379:12" pos:end="379:18">(<expr pos:start="379:13" pos:end="379:17"><name pos:start="379:13" pos:end="379:17">flash</name></expr>)</condition> <block pos:start="379:20" pos:end="399:9">{<block_content pos:start="381:13" pos:end="397:30">

            <decl_stmt pos:start="381:13" pos:end="381:68"><decl pos:start="381:13" pos:end="381:67"><type pos:start="381:13" pos:end="381:26"><name pos:start="381:13" pos:end="381:24">MemoryRegion</name> <modifier pos:start="381:26" pos:end="381:26">*</modifier></type><name pos:start="381:27" pos:end="381:34">flash_mr</name> <init pos:start="381:36" pos:end="381:67">= <expr pos:start="381:38" pos:end="381:67"><call pos:start="381:38" pos:end="381:67"><name pos:start="381:38" pos:end="381:60">pflash_cfi01_get_memory</name><argument_list pos:start="381:61" pos:end="381:67">(<argument pos:start="381:62" pos:end="381:66"><expr pos:start="381:62" pos:end="381:66"><name pos:start="381:62" pos:end="381:66">flash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="383:13" pos:end="383:65"><decl pos:start="383:13" pos:end="383:64"><type pos:start="383:13" pos:end="383:26"><name pos:start="383:13" pos:end="383:24">MemoryRegion</name> <modifier pos:start="383:26" pos:end="383:26">*</modifier></type><name pos:start="383:27" pos:end="383:34">flash_io</name> <init pos:start="383:36" pos:end="383:64">= <expr pos:start="383:38" pos:end="383:64"><call pos:start="383:38" pos:end="383:64"><name pos:start="383:38" pos:end="383:45">g_malloc</name><argument_list pos:start="383:46" pos:end="383:64">(<argument pos:start="383:47" pos:end="383:63"><expr pos:start="383:47" pos:end="383:63"><sizeof pos:start="383:47" pos:end="383:63">sizeof<argument_list pos:start="383:53" pos:end="383:63">(<argument pos:start="383:54" pos:end="383:62"><expr pos:start="383:54" pos:end="383:62"><operator pos:start="383:54" pos:end="383:54">*</operator><name pos:start="383:55" pos:end="383:62">flash_io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="387:13" pos:end="393:77"><expr pos:start="387:13" pos:end="393:76"><call pos:start="387:13" pos:end="393:76"><name pos:start="387:13" pos:end="387:36">memory_region_init_alias</name><argument_list pos:start="387:37" pos:end="393:76">(<argument pos:start="387:38" pos:end="387:45"><expr pos:start="387:38" pos:end="387:45"><name pos:start="387:38" pos:end="387:45">flash_io</name></expr></argument>, <argument pos:start="387:48" pos:end="387:51"><expr pos:start="387:48" pos:end="387:51"><name pos:start="387:48" pos:end="387:51">NULL</name></expr></argument>, <argument pos:start="387:54" pos:end="387:65"><expr pos:start="387:54" pos:end="387:65"><literal type="string" pos:start="387:54" pos:end="387:65">"lx60.flash"</literal></expr></argument>,

                    <argument pos:start="389:21" pos:end="389:28"><expr pos:start="389:21" pos:end="389:28"><name pos:start="389:21" pos:end="389:28">flash_mr</name></expr></argument>, <argument pos:start="389:31" pos:end="389:52"><expr pos:start="389:31" pos:end="389:52"><name pos:start="389:31" pos:end="389:52"><name pos:start="389:31" pos:end="389:35">board</name><operator pos:start="389:36" pos:end="389:37">-&gt;</operator><name pos:start="389:38" pos:end="389:52">flash_boot_base</name></name></expr></argument>,

                    <argument pos:start="391:21" pos:end="393:75"><expr pos:start="391:21" pos:end="393:75"><ternary pos:start="391:21" pos:end="393:75"><condition pos:start="391:21" pos:end="391:77"><expr pos:start="391:21" pos:end="391:75"><name pos:start="391:21" pos:end="391:37"><name pos:start="391:21" pos:end="391:25">board</name><operator pos:start="391:26" pos:end="391:27">-&gt;</operator><name pos:start="391:28" pos:end="391:37">flash_size</name></name> <operator pos:start="391:39" pos:end="391:39">-</operator> <name pos:start="391:41" pos:end="391:62"><name pos:start="391:41" pos:end="391:45">board</name><operator pos:start="391:46" pos:end="391:47">-&gt;</operator><name pos:start="391:48" pos:end="391:62">flash_boot_base</name></name> <operator pos:start="391:64" pos:end="391:64">&lt;</operator> <literal type="number" pos:start="391:66" pos:end="391:75">0x02000000</literal></expr> ?</condition><then pos:start="393:21" pos:end="393:62">

                    <expr pos:start="393:21" pos:end="393:62"><name pos:start="393:21" pos:end="393:37"><name pos:start="393:21" pos:end="393:25">board</name><operator pos:start="393:26" pos:end="393:27">-&gt;</operator><name pos:start="393:28" pos:end="393:37">flash_size</name></name> <operator pos:start="393:39" pos:end="393:39">-</operator> <name pos:start="393:41" pos:end="393:62"><name pos:start="393:41" pos:end="393:45">board</name><operator pos:start="393:46" pos:end="393:47">-&gt;</operator><name pos:start="393:48" pos:end="393:62">flash_boot_base</name></name></expr> </then><else pos:start="393:64" pos:end="393:75">: <expr pos:start="393:66" pos:end="393:75"><literal type="number" pos:start="393:66" pos:end="393:75">0x02000000</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="397:30"><expr pos:start="395:13" pos:end="397:29"><call pos:start="395:13" pos:end="397:29"><name pos:start="395:13" pos:end="395:39">memory_region_add_subregion</name><argument_list pos:start="395:40" pos:end="397:29">(<argument pos:start="395:41" pos:end="395:53"><expr pos:start="395:41" pos:end="395:53"><name pos:start="395:41" pos:end="395:53">system_memory</name></expr></argument>, <argument pos:start="395:56" pos:end="395:65"><expr pos:start="395:56" pos:end="395:65"><literal type="number" pos:start="395:56" pos:end="395:65">0xfe000000</literal></expr></argument>,

                    <argument pos:start="397:21" pos:end="397:28"><expr pos:start="397:21" pos:end="397:28"><name pos:start="397:21" pos:end="397:28">flash_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
