<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2383.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">test_lifecycle</name><parameter_list pos:start="1:27" pos:end="1:32">(<parameter pos:start="1:28" pos:end="1:31"><decl pos:start="1:28" pos:end="1:31"><type pos:start="1:28" pos:end="1:31"><name pos:start="1:28" pos:end="1:31">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:19">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">Coroutine</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:24">coroutine</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:13">done</name> <init pos:start="7:15" pos:end="7:21">= <expr pos:start="7:17" pos:end="7:21"><name pos:start="7:17" pos:end="7:21">false</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:50">/* Create, enter, and return from coroutine */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:52"><expr pos:start="13:5" pos:end="13:51"><name pos:start="13:5" pos:end="13:13">coroutine</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <call pos:start="13:17" pos:end="13:51"><name pos:start="13:17" pos:end="13:37">qemu_coroutine_create</name><argument_list pos:start="13:38" pos:end="13:51">(<argument pos:start="13:39" pos:end="13:50"><expr pos:start="13:39" pos:end="13:50"><name pos:start="13:39" pos:end="13:50">set_and_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><call pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:24">qemu_coroutine_enter</name><argument_list pos:start="15:25" pos:end="15:42">(<argument pos:start="15:26" pos:end="15:34"><expr pos:start="15:26" pos:end="15:34"><name pos:start="15:26" pos:end="15:34">coroutine</name></expr></argument>, <argument pos:start="15:37" pos:end="15:41"><expr pos:start="15:37" pos:end="15:41"><operator pos:start="15:37" pos:end="15:37">&amp;</operator><name pos:start="15:38" pos:end="15:41">done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:19"><expr pos:start="17:5" pos:end="17:18"><call pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:12">g_assert</name><argument_list pos:start="17:13" pos:end="17:18">(<argument pos:start="17:14" pos:end="17:17"><expr pos:start="17:14" pos:end="17:17"><name pos:start="17:14" pos:end="17:17">done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="17:21" pos:end="17:61">/* expect done to be true (first time) */</comment>



    <comment type="block" pos:start="21:5" pos:end="21:57">/* Repeat to check that no state affects this test */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:17"><expr pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:8">done</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:16">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:52"><expr pos:start="25:5" pos:end="25:51"><name pos:start="25:5" pos:end="25:13">coroutine</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <call pos:start="25:17" pos:end="25:51"><name pos:start="25:17" pos:end="25:37">qemu_coroutine_create</name><argument_list pos:start="25:38" pos:end="25:51">(<argument pos:start="25:39" pos:end="25:50"><expr pos:start="25:39" pos:end="25:50"><name pos:start="25:39" pos:end="25:50">set_and_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:43"><expr pos:start="27:5" pos:end="27:42"><call pos:start="27:5" pos:end="27:42"><name pos:start="27:5" pos:end="27:24">qemu_coroutine_enter</name><argument_list pos:start="27:25" pos:end="27:42">(<argument pos:start="27:26" pos:end="27:34"><expr pos:start="27:26" pos:end="27:34"><name pos:start="27:26" pos:end="27:34">coroutine</name></expr></argument>, <argument pos:start="27:37" pos:end="27:41"><expr pos:start="27:37" pos:end="27:41"><operator pos:start="27:37" pos:end="27:37">&amp;</operator><name pos:start="27:38" pos:end="27:41">done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:19"><expr pos:start="29:5" pos:end="29:18"><call pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:12">g_assert</name><argument_list pos:start="29:13" pos:end="29:18">(<argument pos:start="29:14" pos:end="29:17"><expr pos:start="29:14" pos:end="29:17"><name pos:start="29:14" pos:end="29:17">done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="29:21" pos:end="29:62">/* expect done to be true (second time) */</comment>

</block_content>}</block></function>
</unit>
