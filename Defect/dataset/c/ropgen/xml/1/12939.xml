<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12939.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">vfio_map_bar</name><parameter_list pos:start="1:25" pos:end="1:53">(<parameter pos:start="1:26" pos:end="1:44"><decl pos:start="1:26" pos:end="1:44"><type pos:start="1:26" pos:end="1:44"><name pos:start="1:26" pos:end="1:38">VFIOPCIDevice</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:44">vdev</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:52"><decl pos:start="1:47" pos:end="1:52"><type pos:start="1:47" pos:end="1:52"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:52">nr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="5:5" pos:end="137:35">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">VFIOBAR</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">bar</name> <init pos:start="5:18" pos:end="5:34">= <expr pos:start="5:20" pos:end="5:34"><operator pos:start="5:20" pos:end="5:20">&amp;</operator><name pos:start="5:21" pos:end="5:34"><name pos:start="5:21" pos:end="5:24">vdev</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:30">bars</name><index pos:start="5:31" pos:end="5:34">[<expr pos:start="5:32" pos:end="5:33"><name pos:start="5:32" pos:end="5:33">nr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:17">size</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:23">bar</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:31">region</name><operator pos:start="7:32" pos:end="7:32">.</operator><name pos:start="7:33" pos:end="7:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:13">name</name><index pos:start="9:14" pos:end="9:17">[<expr pos:start="9:15" pos:end="9:16"><literal type="number" pos:start="9:15" pos:end="9:16">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">pci_bar</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:16">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:72">/* Skip both unimplemented BARs and the upper half of 64bit BARS. */</comment>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">size</name></expr>)</condition> <block pos:start="21:16" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="33:38"><expr pos:start="29:5" pos:end="33:37"><call pos:start="29:5" pos:end="33:37"><name pos:start="29:5" pos:end="29:12">snprintf</name><argument_list pos:start="29:13" pos:end="33:37">(<argument pos:start="29:14" pos:end="29:17"><expr pos:start="29:14" pos:end="29:17"><name pos:start="29:14" pos:end="29:17">name</name></expr></argument>, <argument pos:start="29:20" pos:end="29:31"><expr pos:start="29:20" pos:end="29:31"><sizeof pos:start="29:20" pos:end="29:31">sizeof<argument_list pos:start="29:26" pos:end="29:31">(<argument pos:start="29:27" pos:end="29:30"><expr pos:start="29:27" pos:end="29:30"><name pos:start="29:27" pos:end="29:30">name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:34" pos:end="29:64"><expr pos:start="29:34" pos:end="29:64"><literal type="string" pos:start="29:34" pos:end="29:64">"VFIO %04x:%02x:%02x.%x BAR %d"</literal></expr></argument>,

             <argument pos:start="31:14" pos:end="31:30"><expr pos:start="31:14" pos:end="31:30"><name pos:start="31:14" pos:end="31:30"><name pos:start="31:14" pos:end="31:17">vdev</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">host</name><operator pos:start="31:24" pos:end="31:24">.</operator><name pos:start="31:25" pos:end="31:30">domain</name></name></expr></argument>, <argument pos:start="31:33" pos:end="31:46"><expr pos:start="31:33" pos:end="31:46"><name pos:start="31:33" pos:end="31:46"><name pos:start="31:33" pos:end="31:36">vdev</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:42">host</name><operator pos:start="31:43" pos:end="31:43">.</operator><name pos:start="31:44" pos:end="31:46">bus</name></name></expr></argument>, <argument pos:start="31:49" pos:end="31:63"><expr pos:start="31:49" pos:end="31:63"><name pos:start="31:49" pos:end="31:63"><name pos:start="31:49" pos:end="31:52">vdev</name><operator pos:start="31:53" pos:end="31:54">-&gt;</operator><name pos:start="31:55" pos:end="31:58">host</name><operator pos:start="31:59" pos:end="31:59">.</operator><name pos:start="31:60" pos:end="31:63">slot</name></name></expr></argument>,

             <argument pos:start="33:14" pos:end="33:32"><expr pos:start="33:14" pos:end="33:32"><name pos:start="33:14" pos:end="33:32"><name pos:start="33:14" pos:end="33:17">vdev</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:23">host</name><operator pos:start="33:24" pos:end="33:24">.</operator><name pos:start="33:25" pos:end="33:32">function</name></name></expr></argument>, <argument pos:start="33:35" pos:end="33:36"><expr pos:start="33:35" pos:end="33:36"><name pos:start="33:35" pos:end="33:36">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:61">/* Determine what type of BAR this is for registration */</comment>

    <expr_stmt pos:start="39:5" pos:end="41:69"><expr pos:start="39:5" pos:end="41:68"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="41:68"><name pos:start="39:11" pos:end="39:15">pread</name><argument_list pos:start="39:16" pos:end="41:68">(<argument pos:start="39:17" pos:end="39:33"><expr pos:start="39:17" pos:end="39:33"><name pos:start="39:17" pos:end="39:33"><name pos:start="39:17" pos:end="39:20">vdev</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:30">vbasedev</name><operator pos:start="39:31" pos:end="39:31">.</operator><name pos:start="39:32" pos:end="39:33">fd</name></name></expr></argument>, <argument pos:start="39:36" pos:end="39:43"><expr pos:start="39:36" pos:end="39:43"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:43">pci_bar</name></expr></argument>, <argument pos:start="39:46" pos:end="39:60"><expr pos:start="39:46" pos:end="39:60"><sizeof pos:start="39:46" pos:end="39:60">sizeof<argument_list pos:start="39:52" pos:end="39:60">(<argument pos:start="39:53" pos:end="39:59"><expr pos:start="39:53" pos:end="39:59"><name pos:start="39:53" pos:end="39:59">pci_bar</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="41:17" pos:end="41:67"><expr pos:start="41:17" pos:end="41:67"><name pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:20">vdev</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:35">config_offset</name></name> <operator pos:start="41:37" pos:end="41:37">+</operator> <name pos:start="41:39" pos:end="41:56">PCI_BASE_ADDRESS_0</name> <operator pos:start="41:58" pos:end="41:58">+</operator> <operator pos:start="41:60" pos:end="41:60">(</operator><literal type="number" pos:start="41:61" pos:end="41:61">4</literal> <operator pos:start="41:63" pos:end="41:63">*</operator> <name pos:start="41:65" pos:end="41:66">nr</name><operator pos:start="41:67" pos:end="41:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:31">(<expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:14">!=</operator> <sizeof pos:start="43:16" pos:end="43:30">sizeof<argument_list pos:start="43:22" pos:end="43:30">(<argument pos:start="43:23" pos:end="43:29"><expr pos:start="43:23" pos:end="43:29"><name pos:start="43:23" pos:end="43:29">pci_bar</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="43:33" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:15">

        <expr_stmt pos:start="45:9" pos:end="45:61"><expr pos:start="45:9" pos:end="45:60"><call pos:start="45:9" pos:end="45:60"><name pos:start="45:9" pos:end="45:20">error_report</name><argument_list pos:start="45:21" pos:end="45:60">(<argument pos:start="45:22" pos:end="45:55"><expr pos:start="45:22" pos:end="45:55"><literal type="string" pos:start="45:22" pos:end="45:55">"vfio: Failed to read BAR %d (%m)"</literal></expr></argument>, <argument pos:start="45:58" pos:end="45:59"><expr pos:start="45:58" pos:end="45:59"><name pos:start="45:58" pos:end="45:59">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:11">pci_bar</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:34"><name pos:start="53:15" pos:end="53:25">le32_to_cpu</name><argument_list pos:start="53:26" pos:end="53:34">(<argument pos:start="53:27" pos:end="53:33"><expr pos:start="53:27" pos:end="53:33"><name pos:start="53:27" pos:end="53:33">pci_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:56"><expr pos:start="55:5" pos:end="55:55"><name pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:7">bar</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:15">ioport</name></name> <operator pos:start="55:17" pos:end="55:17">=</operator> <operator pos:start="55:19" pos:end="55:19">(</operator><name pos:start="55:20" pos:end="55:26">pci_bar</name> <operator pos:start="55:28" pos:end="55:28">&amp;</operator> <name pos:start="55:30" pos:end="55:54">PCI_BASE_ADDRESS_SPACE_IO</name><operator pos:start="55:55" pos:end="55:55">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:76"><expr pos:start="57:5" pos:end="57:75"><name pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:7">bar</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:14">mem64</name></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <ternary pos:start="57:18" pos:end="57:75"><condition pos:start="57:18" pos:end="57:30"><expr pos:start="57:18" pos:end="57:28"><name pos:start="57:18" pos:end="57:28"><name pos:start="57:18" pos:end="57:20">bar</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:28">ioport</name></name></expr> ?</condition><then pos:start="57:32" pos:end="57:32"> <expr pos:start="57:32" pos:end="57:32"><literal type="number" pos:start="57:32" pos:end="57:32">0</literal></expr> </then><else pos:start="57:34" pos:end="57:75">: <expr pos:start="57:36" pos:end="57:75"><operator pos:start="57:36" pos:end="57:36">(</operator><name pos:start="57:37" pos:end="57:43">pci_bar</name> <operator pos:start="57:45" pos:end="57:45">&amp;</operator> <name pos:start="57:47" pos:end="57:74">PCI_BASE_ADDRESS_MEM_TYPE_64</name><operator pos:start="57:75" pos:end="57:75">)</operator></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:64"><expr pos:start="59:5" pos:end="61:63"><name pos:start="59:5" pos:end="59:8">type</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <name pos:start="59:12" pos:end="59:18">pci_bar</name> <operator pos:start="59:20" pos:end="59:20">&amp;</operator> <operator pos:start="59:22" pos:end="59:22">(</operator><ternary pos:start="59:23" pos:end="61:62"><condition pos:start="59:23" pos:end="59:35"><expr pos:start="59:23" pos:end="59:33"><name pos:start="59:23" pos:end="59:33"><name pos:start="59:23" pos:end="59:25">bar</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:33">ioport</name></name></expr> ?</condition><then pos:start="59:37" pos:end="59:61"> <expr pos:start="59:37" pos:end="59:61"><operator pos:start="59:37" pos:end="59:37">~</operator><name pos:start="59:38" pos:end="59:61">PCI_BASE_ADDRESS_IO_MASK</name></expr> </then><else pos:start="59:63" pos:end="61:62">:

                                    <expr pos:start="61:37" pos:end="61:62"><operator pos:start="61:37" pos:end="61:37">~</operator><name pos:start="61:38" pos:end="61:62">PCI_BASE_ADDRESS_MEM_MASK</name></expr></else></ternary><operator pos:start="61:63" pos:end="61:63">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:56">/* A "slow" read/write mapping underlies all BARs */</comment>

    <expr_stmt pos:start="67:5" pos:end="69:43"><expr pos:start="67:5" pos:end="69:42"><call pos:start="67:5" pos:end="69:42"><name pos:start="67:5" pos:end="67:25">memory_region_init_io</name><argument_list pos:start="67:26" pos:end="69:42">(<argument pos:start="67:27" pos:end="67:42"><expr pos:start="67:27" pos:end="67:42"><operator pos:start="67:27" pos:end="67:27">&amp;</operator><name pos:start="67:28" pos:end="67:42"><name pos:start="67:28" pos:end="67:30">bar</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:38">region</name><operator pos:start="67:39" pos:end="67:39">.</operator><name pos:start="67:40" pos:end="67:42">mem</name></name></expr></argument>, <argument pos:start="67:45" pos:end="67:56"><expr pos:start="67:45" pos:end="67:56"><call pos:start="67:45" pos:end="67:56"><name pos:start="67:45" pos:end="67:50">OBJECT</name><argument_list pos:start="67:51" pos:end="67:56">(<argument pos:start="67:52" pos:end="67:55"><expr pos:start="67:52" pos:end="67:55"><name pos:start="67:52" pos:end="67:55">vdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:59" pos:end="67:74"><expr pos:start="67:59" pos:end="67:74"><operator pos:start="67:59" pos:end="67:59">&amp;</operator><name pos:start="67:60" pos:end="67:74">vfio_region_ops</name></expr></argument>,

                          <argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:29">bar</name></expr></argument>, <argument pos:start="69:32" pos:end="69:35"><expr pos:start="69:32" pos:end="69:35"><name pos:start="69:32" pos:end="69:35">name</name></expr></argument>, <argument pos:start="69:38" pos:end="69:41"><expr pos:start="69:38" pos:end="69:41"><name pos:start="69:38" pos:end="69:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:62"><expr pos:start="71:5" pos:end="71:61"><call pos:start="71:5" pos:end="71:61"><name pos:start="71:5" pos:end="71:20">pci_register_bar</name><argument_list pos:start="71:21" pos:end="71:61">(<argument pos:start="71:22" pos:end="71:32"><expr pos:start="71:22" pos:end="71:32"><operator pos:start="71:22" pos:end="71:22">&amp;</operator><name pos:start="71:23" pos:end="71:32"><name pos:start="71:23" pos:end="71:26">vdev</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:32">pdev</name></name></expr></argument>, <argument pos:start="71:35" pos:end="71:36"><expr pos:start="71:35" pos:end="71:36"><name pos:start="71:35" pos:end="71:36">nr</name></expr></argument>, <argument pos:start="71:39" pos:end="71:42"><expr pos:start="71:39" pos:end="71:42"><name pos:start="71:39" pos:end="71:42">type</name></expr></argument>, <argument pos:start="71:45" pos:end="71:60"><expr pos:start="71:45" pos:end="71:60"><operator pos:start="71:45" pos:end="71:45">&amp;</operator><name pos:start="71:46" pos:end="71:60"><name pos:start="71:46" pos:end="71:48">bar</name><operator pos:start="71:49" pos:end="71:50">-&gt;</operator><name pos:start="71:51" pos:end="71:56">region</name><operator pos:start="71:57" pos:end="71:57">.</operator><name pos:start="71:58" pos:end="71:60">mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="81:7">/*

     * We can't mmap areas overlapping the MSIX vector table, so we

     * potentially insert a direct-mapped subregion before and after it.

     */</comment>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:50">(<expr pos:start="83:9" pos:end="83:49"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:12">vdev</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:18">msix</name></name> <operator pos:start="83:20" pos:end="83:21">&amp;&amp;</operator> <name pos:start="83:23" pos:end="83:43"><name pos:start="83:23" pos:end="83:26">vdev</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:32">msix</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:43">table_bar</name></name> <operator pos:start="83:45" pos:end="83:46">==</operator> <name pos:start="83:48" pos:end="83:49">nr</name></expr>)</condition> <block pos:start="83:52" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:62">

        <expr_stmt pos:start="85:9" pos:end="85:62"><expr pos:start="85:9" pos:end="85:61"><name pos:start="85:9" pos:end="85:12">size</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <name pos:start="85:16" pos:end="85:39"><name pos:start="85:16" pos:end="85:19">vdev</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:25">msix</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:39">table_offset</name></name> <operator pos:start="85:41" pos:end="85:41">&amp;</operator> <name pos:start="85:43" pos:end="85:61">qemu_host_page_mask</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:60"><expr pos:start="91:5" pos:end="91:59"><call pos:start="91:5" pos:end="91:59"><name pos:start="91:5" pos:end="91:11">strncat</name><argument_list pos:start="91:12" pos:end="91:59">(<argument pos:start="91:13" pos:end="91:16"><expr pos:start="91:13" pos:end="91:16"><name pos:start="91:13" pos:end="91:16">name</name></expr></argument>, <argument pos:start="91:19" pos:end="91:25"><expr pos:start="91:19" pos:end="91:25"><literal type="string" pos:start="91:19" pos:end="91:25">" mmap"</literal></expr></argument>, <argument pos:start="91:28" pos:end="91:58"><expr pos:start="91:28" pos:end="91:58"><sizeof pos:start="91:28" pos:end="91:39">sizeof<argument_list pos:start="91:34" pos:end="91:39">(<argument pos:start="91:35" pos:end="91:38"><expr pos:start="91:35" pos:end="91:38"><name pos:start="91:35" pos:end="91:38">name</name></expr></argument>)</argument_list></sizeof> <operator pos:start="91:41" pos:end="91:41">-</operator> <call pos:start="91:43" pos:end="91:54"><name pos:start="91:43" pos:end="91:48">strlen</name><argument_list pos:start="91:49" pos:end="91:54">(<argument pos:start="91:50" pos:end="91:53"><expr pos:start="91:50" pos:end="91:53"><name pos:start="91:50" pos:end="91:53">name</name></expr></argument>)</argument_list></call> <operator pos:start="91:56" pos:end="91:56">-</operator> <literal type="number" pos:start="91:58" pos:end="91:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="97:37">(<expr pos:start="93:9" pos:end="97:36"><call pos:start="93:9" pos:end="97:36"><name pos:start="93:9" pos:end="93:24">vfio_mmap_region</name><argument_list pos:start="93:25" pos:end="97:36">(<argument pos:start="93:26" pos:end="93:37"><expr pos:start="93:26" pos:end="93:37"><call pos:start="93:26" pos:end="93:37"><name pos:start="93:26" pos:end="93:31">OBJECT</name><argument_list pos:start="93:32" pos:end="93:37">(<argument pos:start="93:33" pos:end="93:36"><expr pos:start="93:33" pos:end="93:36"><name pos:start="93:33" pos:end="93:36">vdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:40" pos:end="93:51"><expr pos:start="93:40" pos:end="93:51"><operator pos:start="93:40" pos:end="93:40">&amp;</operator><name pos:start="93:41" pos:end="93:51"><name pos:start="93:41" pos:end="93:43">bar</name><operator pos:start="93:44" pos:end="93:45">-&gt;</operator><name pos:start="93:46" pos:end="93:51">region</name></name></expr></argument>, <argument pos:start="93:54" pos:end="93:69"><expr pos:start="93:54" pos:end="93:69"><operator pos:start="93:54" pos:end="93:54">&amp;</operator><name pos:start="93:55" pos:end="93:69"><name pos:start="93:55" pos:end="93:57">bar</name><operator pos:start="93:58" pos:end="93:59">-&gt;</operator><name pos:start="93:60" pos:end="93:65">region</name><operator pos:start="93:66" pos:end="93:66">.</operator><name pos:start="93:67" pos:end="93:69">mem</name></name></expr></argument>,

                      <argument pos:start="95:23" pos:end="95:43"><expr pos:start="95:23" pos:end="95:43"><operator pos:start="95:23" pos:end="95:23">&amp;</operator><name pos:start="95:24" pos:end="95:43"><name pos:start="95:24" pos:end="95:26">bar</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:34">region</name><operator pos:start="95:35" pos:end="95:35">.</operator><name pos:start="95:36" pos:end="95:43">mmap_mem</name></name></expr></argument>, <argument pos:start="95:46" pos:end="95:62"><expr pos:start="95:46" pos:end="95:62"><operator pos:start="95:46" pos:end="95:46">&amp;</operator><name pos:start="95:47" pos:end="95:62"><name pos:start="95:47" pos:end="95:49">bar</name><operator pos:start="95:50" pos:end="95:51">-&gt;</operator><name pos:start="95:52" pos:end="95:57">region</name><operator pos:start="95:58" pos:end="95:58">.</operator><name pos:start="95:59" pos:end="95:62">mmap</name></name></expr></argument>,

                      <argument pos:start="97:23" pos:end="97:26"><expr pos:start="97:23" pos:end="97:26"><name pos:start="97:23" pos:end="97:26">size</name></expr></argument>, <argument pos:start="97:29" pos:end="97:29"><expr pos:start="97:29" pos:end="97:29"><literal type="number" pos:start="97:29" pos:end="97:29">0</literal></expr></argument>, <argument pos:start="97:32" pos:end="97:35"><expr pos:start="97:32" pos:end="97:35"><name pos:start="97:32" pos:end="97:35">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:39" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:70">

        <expr_stmt pos:start="99:9" pos:end="99:70"><expr pos:start="99:9" pos:end="99:69"><call pos:start="99:9" pos:end="99:69"><name pos:start="99:9" pos:end="99:20">error_report</name><argument_list pos:start="99:21" pos:end="99:69">(<argument pos:start="99:22" pos:end="99:62"><expr pos:start="99:22" pos:end="99:62"><literal type="string" pos:start="99:22" pos:end="99:62">"%s unsupported. Performance may be slow"</literal></expr></argument>, <argument pos:start="99:65" pos:end="99:68"><expr pos:start="99:65" pos:end="99:68"><name pos:start="99:65" pos:end="99:68">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="133:5"><if pos:start="105:5" pos:end="133:5">if <condition pos:start="105:8" pos:end="105:50">(<expr pos:start="105:9" pos:end="105:49"><name pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:12">vdev</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:18">msix</name></name> <operator pos:start="105:20" pos:end="105:21">&amp;&amp;</operator> <name pos:start="105:23" pos:end="105:43"><name pos:start="105:23" pos:end="105:26">vdev</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:32">msix</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:43">table_bar</name></name> <operator pos:start="105:45" pos:end="105:46">==</operator> <name pos:start="105:48" pos:end="105:49">nr</name></expr>)</condition> <block pos:start="105:52" pos:end="133:5">{<block_content pos:start="107:9" pos:end="131:9">

        <decl_stmt pos:start="107:9" pos:end="107:23"><decl pos:start="107:9" pos:end="107:22"><type pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:16">uint64_t</name></type> <name pos:start="107:18" pos:end="107:22">start</name></decl>;</decl_stmt>



        <expr_stmt pos:start="111:9" pos:end="113:77"><expr pos:start="111:9" pos:end="113:76"><name pos:start="111:9" pos:end="111:13">start</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <call pos:start="111:17" pos:end="113:76"><name pos:start="111:17" pos:end="111:31">HOST_PAGE_ALIGN</name><argument_list pos:start="111:32" pos:end="113:76">(<argument pos:start="111:33" pos:end="113:75"><expr pos:start="111:33" pos:end="113:75"><name pos:start="111:33" pos:end="111:56"><name pos:start="111:33" pos:end="111:36">vdev</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:42">msix</name><operator pos:start="111:43" pos:end="111:44">-&gt;</operator><name pos:start="111:45" pos:end="111:56">table_offset</name></name> <operator pos:start="111:58" pos:end="111:58">+</operator>

                                <operator pos:start="113:33" pos:end="113:33">(</operator><name pos:start="113:34" pos:end="113:52"><name pos:start="113:34" pos:end="113:37">vdev</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:43">msix</name><operator pos:start="113:44" pos:end="113:45">-&gt;</operator><name pos:start="113:46" pos:end="113:52">entries</name></name> <operator pos:start="113:54" pos:end="113:54">*</operator> <name pos:start="113:56" pos:end="113:74">PCI_MSIX_ENTRY_SIZE</name><operator pos:start="113:75" pos:end="113:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:71"><expr pos:start="117:9" pos:end="117:70"><name pos:start="117:9" pos:end="117:12">size</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <ternary pos:start="117:16" pos:end="117:70"><condition pos:start="117:16" pos:end="117:41"><expr pos:start="117:16" pos:end="117:39"><name pos:start="117:16" pos:end="117:20">start</name> <operator pos:start="117:22" pos:end="117:22">&lt;</operator> <name pos:start="117:24" pos:end="117:39"><name pos:start="117:24" pos:end="117:26">bar</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:34">region</name><operator pos:start="117:35" pos:end="117:35">.</operator><name pos:start="117:36" pos:end="117:39">size</name></name></expr> ?</condition><then pos:start="117:43" pos:end="117:66"> <expr pos:start="117:43" pos:end="117:66"><name pos:start="117:43" pos:end="117:58"><name pos:start="117:43" pos:end="117:45">bar</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:53">region</name><operator pos:start="117:54" pos:end="117:54">.</operator><name pos:start="117:55" pos:end="117:58">size</name></name> <operator pos:start="117:60" pos:end="117:60">-</operator> <name pos:start="117:62" pos:end="117:66">start</name></expr> </then><else pos:start="117:68" pos:end="117:70">: <expr pos:start="117:70" pos:end="117:70"><literal type="number" pos:start="117:70" pos:end="117:70">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:67"><expr pos:start="119:9" pos:end="119:66"><call pos:start="119:9" pos:end="119:66"><name pos:start="119:9" pos:end="119:15">strncat</name><argument_list pos:start="119:16" pos:end="119:66">(<argument pos:start="119:17" pos:end="119:20"><expr pos:start="119:17" pos:end="119:20"><name pos:start="119:17" pos:end="119:20">name</name></expr></argument>, <argument pos:start="119:23" pos:end="119:32"><expr pos:start="119:23" pos:end="119:32"><literal type="string" pos:start="119:23" pos:end="119:32">" msix-hi"</literal></expr></argument>, <argument pos:start="119:35" pos:end="119:65"><expr pos:start="119:35" pos:end="119:65"><sizeof pos:start="119:35" pos:end="119:46">sizeof<argument_list pos:start="119:41" pos:end="119:46">(<argument pos:start="119:42" pos:end="119:45"><expr pos:start="119:42" pos:end="119:45"><name pos:start="119:42" pos:end="119:45">name</name></expr></argument>)</argument_list></sizeof> <operator pos:start="119:48" pos:end="119:48">-</operator> <call pos:start="119:50" pos:end="119:61"><name pos:start="119:50" pos:end="119:55">strlen</name><argument_list pos:start="119:56" pos:end="119:61">(<argument pos:start="119:57" pos:end="119:60"><expr pos:start="119:57" pos:end="119:60"><name pos:start="119:57" pos:end="119:60">name</name></expr></argument>)</argument_list></call> <operator pos:start="119:63" pos:end="119:63">-</operator> <literal type="number" pos:start="119:65" pos:end="119:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="121:9" pos:end="121:73">/* VFIOMSIXInfo contains another MemoryRegion for this mapping */</comment>

        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="127:64">(<expr pos:start="123:13" pos:end="127:63"><call pos:start="123:13" pos:end="127:63"><name pos:start="123:13" pos:end="123:28">vfio_mmap_region</name><argument_list pos:start="123:29" pos:end="127:63">(<argument pos:start="123:30" pos:end="123:41"><expr pos:start="123:30" pos:end="123:41"><call pos:start="123:30" pos:end="123:41"><name pos:start="123:30" pos:end="123:35">OBJECT</name><argument_list pos:start="123:36" pos:end="123:41">(<argument pos:start="123:37" pos:end="123:40"><expr pos:start="123:37" pos:end="123:40"><name pos:start="123:37" pos:end="123:40">vdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="123:44" pos:end="123:55"><expr pos:start="123:44" pos:end="123:55"><operator pos:start="123:44" pos:end="123:44">&amp;</operator><name pos:start="123:45" pos:end="123:55"><name pos:start="123:45" pos:end="123:47">bar</name><operator pos:start="123:48" pos:end="123:49">-&gt;</operator><name pos:start="123:50" pos:end="123:55">region</name></name></expr></argument>, <argument pos:start="123:58" pos:end="123:73"><expr pos:start="123:58" pos:end="123:73"><operator pos:start="123:58" pos:end="123:58">&amp;</operator><name pos:start="123:59" pos:end="123:73"><name pos:start="123:59" pos:end="123:61">bar</name><operator pos:start="123:62" pos:end="123:63">-&gt;</operator><name pos:start="123:64" pos:end="123:69">region</name><operator pos:start="123:70" pos:end="123:70">.</operator><name pos:start="123:71" pos:end="123:73">mem</name></name></expr></argument>,

                          <argument pos:start="125:27" pos:end="125:47"><expr pos:start="125:27" pos:end="125:47"><operator pos:start="125:27" pos:end="125:27">&amp;</operator><name pos:start="125:28" pos:end="125:47"><name pos:start="125:28" pos:end="125:31">vdev</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:37">msix</name><operator pos:start="125:38" pos:end="125:39">-&gt;</operator><name pos:start="125:40" pos:end="125:47">mmap_mem</name></name></expr></argument>,

                          <argument pos:start="127:27" pos:end="127:43"><expr pos:start="127:27" pos:end="127:43"><operator pos:start="127:27" pos:end="127:27">&amp;</operator><name pos:start="127:28" pos:end="127:43"><name pos:start="127:28" pos:end="127:31">vdev</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:37">msix</name><operator pos:start="127:38" pos:end="127:39">-&gt;</operator><name pos:start="127:40" pos:end="127:43">mmap</name></name></expr></argument>, <argument pos:start="127:46" pos:end="127:49"><expr pos:start="127:46" pos:end="127:49"><name pos:start="127:46" pos:end="127:49">size</name></expr></argument>, <argument pos:start="127:52" pos:end="127:56"><expr pos:start="127:52" pos:end="127:56"><name pos:start="127:52" pos:end="127:56">start</name></expr></argument>, <argument pos:start="127:59" pos:end="127:62"><expr pos:start="127:59" pos:end="127:62"><name pos:start="127:59" pos:end="127:62">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:66" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:74">

            <expr_stmt pos:start="129:13" pos:end="129:74"><expr pos:start="129:13" pos:end="129:73"><call pos:start="129:13" pos:end="129:73"><name pos:start="129:13" pos:end="129:24">error_report</name><argument_list pos:start="129:25" pos:end="129:73">(<argument pos:start="129:26" pos:end="129:66"><expr pos:start="129:26" pos:end="129:66"><literal type="string" pos:start="129:26" pos:end="129:66">"%s unsupported. Performance may be slow"</literal></expr></argument>, <argument pos:start="129:69" pos:end="129:72"><expr pos:start="129:69" pos:end="129:72"><name pos:start="129:69" pos:end="129:72">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:35"><expr pos:start="137:5" pos:end="137:34"><call pos:start="137:5" pos:end="137:34"><name pos:start="137:5" pos:end="137:24">vfio_bar_quirk_setup</name><argument_list pos:start="137:25" pos:end="137:34">(<argument pos:start="137:26" pos:end="137:29"><expr pos:start="137:26" pos:end="137:29"><name pos:start="137:26" pos:end="137:29">vdev</name></expr></argument>, <argument pos:start="137:32" pos:end="137:33"><expr pos:start="137:32" pos:end="137:33"><name pos:start="137:32" pos:end="137:33">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
