<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19240.c" pos:tabs="8"><function pos:start="1:1" pos:end="44:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">cloop_open</name><parameter_list pos:start="1:22" pos:end="2:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,
                      <parameter pos:start="2:23" pos:end="2:34"><decl pos:start="2:23" pos:end="2:34"><type pos:start="2:23" pos:end="2:34"><name pos:start="2:23" pos:end="2:27">Error</name> <modifier pos:start="2:29" pos:end="2:29">*</modifier><modifier pos:start="2:30" pos:end="2:30">*</modifier></type><name pos:start="2:31" pos:end="2:34">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="44:15">{<block_content pos:start="4:5" pos:end="44:15">
    <decl_stmt pos:start="4:5" pos:end="4:35"><decl pos:start="4:5" pos:end="4:34"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:18">BDRVCloopState</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier></type><name pos:start="4:21" pos:end="4:21">s</name> <init pos:start="4:23" pos:end="4:34">= <expr pos:start="4:25" pos:end="4:34"><name pos:start="4:25" pos:end="4:34"><name pos:start="4:25" pos:end="4:26">bs</name><operator pos:start="4:27" pos:end="4:28">-&gt;</operator><name pos:start="4:29" pos:end="4:34">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:60"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:25">offsets_size</name></decl>, <decl pos:start="5:28" pos:end="5:56"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:28" pos:end="5:52">max_compressed_block_size</name> <init pos:start="5:54" pos:end="5:56">= <expr pos:start="5:56" pos:end="5:56"><literal type="number" pos:start="5:56" pos:end="5:56">1</literal></expr></init></decl>, <decl pos:start="5:59" pos:end="5:59"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:59" pos:end="5:59">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:12"><decl pos:start="6:5" pos:end="6:11"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:22"><expr pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:6">bs</name><operator pos:start="7:7" pos:end="7:8">-&gt;</operator><name pos:start="7:9" pos:end="7:17">read_only</name></name> <operator pos:start="7:19" pos:end="7:19">=</operator> <literal type="number" pos:start="7:21" pos:end="7:21">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="8:5" pos:end="8:21">/* read header */</comment>
    <expr_stmt pos:start="9:5" pos:end="9:55"><expr pos:start="9:5" pos:end="9:54"><name pos:start="9:5" pos:end="9:7">ret</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:54"><name pos:start="9:11" pos:end="9:20">bdrv_pread</name><argument_list pos:start="9:21" pos:end="9:54">(<argument pos:start="9:22" pos:end="9:29"><expr pos:start="9:22" pos:end="9:29"><name pos:start="9:22" pos:end="9:29"><name pos:start="9:22" pos:end="9:23">bs</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:29">file</name></name></expr></argument>, <argument pos:start="9:32" pos:end="9:34"><expr pos:start="9:32" pos:end="9:34"><literal type="number" pos:start="9:32" pos:end="9:34">128</literal></expr></argument>, <argument pos:start="9:37" pos:end="9:50"><expr pos:start="9:37" pos:end="9:50"><operator pos:start="9:37" pos:end="9:37">&amp;</operator><name pos:start="9:38" pos:end="9:50"><name pos:start="9:38" pos:end="9:38">s</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:50">block_size</name></name></expr></argument>, <argument pos:start="9:53" pos:end="9:53"><expr pos:start="9:53" pos:end="9:53"><literal type="number" pos:start="9:53" pos:end="9:53">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="10:5" pos:end="44:15"><if pos:start="10:5" pos:end="44:15">if <condition pos:start="10:8" pos:end="10:16">(<expr pos:start="10:9" pos:end="10:15"><name pos:start="10:9" pos:end="10:11">ret</name> <operator pos:start="10:13" pos:end="10:13">&lt;</operator> <literal type="number" pos:start="10:15" pos:end="10:15">0</literal></expr>)</condition> <block pos:start="10:18" pos:end="44:15">{<block_content pos:start="11:9" pos:end="44:15">
        <return pos:start="11:9" pos:end="11:19">return <expr pos:start="11:16" pos:end="11:18"><name pos:start="11:16" pos:end="11:18">ret</name></expr>;</return>
    <expr_stmt pos:start="12:5" pos:end="12:47"><expr pos:start="12:5" pos:end="12:46"><name pos:start="12:5" pos:end="12:17"><name pos:start="12:5" pos:end="12:5">s</name><operator pos:start="12:6" pos:end="12:7">-&gt;</operator><name pos:start="12:8" pos:end="12:17">block_size</name></name> <operator pos:start="12:19" pos:end="12:19">=</operator> <call pos:start="12:21" pos:end="12:46"><name pos:start="12:21" pos:end="12:31">be32_to_cpu</name><argument_list pos:start="12:32" pos:end="12:46">(<argument pos:start="12:33" pos:end="12:45"><expr pos:start="12:33" pos:end="12:45"><name pos:start="12:33" pos:end="12:45"><name pos:start="12:33" pos:end="12:33">s</name><operator pos:start="12:34" pos:end="12:35">-&gt;</operator><name pos:start="12:36" pos:end="12:45">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:57"><expr pos:start="13:5" pos:end="13:56"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:56"><name pos:start="13:11" pos:end="13:20">bdrv_pread</name><argument_list pos:start="13:21" pos:end="13:56">(<argument pos:start="13:22" pos:end="13:29"><expr pos:start="13:22" pos:end="13:29"><name pos:start="13:22" pos:end="13:29"><name pos:start="13:22" pos:end="13:23">bs</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:29">file</name></name></expr></argument>, <argument pos:start="13:32" pos:end="13:38"><expr pos:start="13:32" pos:end="13:38"><literal type="number" pos:start="13:32" pos:end="13:36">128</literal> <operator pos:start="13:36" pos:end="13:36">+</operator> <literal type="number" pos:start="13:38" pos:end="13:38">4</literal></expr></argument>, <argument pos:start="13:41" pos:end="13:52"><expr pos:start="13:41" pos:end="13:52"><operator pos:start="13:41" pos:end="13:41">&amp;</operator><name pos:start="13:42" pos:end="13:52"><name pos:start="13:42" pos:end="13:42">s</name><operator pos:start="13:43" pos:end="13:44">-&gt;</operator><name pos:start="13:45" pos:end="13:52">n_blocks</name></name></expr></argument>, <argument pos:start="13:55" pos:end="13:55"><expr pos:start="13:55" pos:end="13:55"><literal type="number" pos:start="13:55" pos:end="13:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="44:15"><if pos:start="14:5" pos:end="44:15">if <condition pos:start="14:8" pos:end="14:16">(<expr pos:start="14:9" pos:end="14:15"><name pos:start="14:9" pos:end="14:11">ret</name> <operator pos:start="14:13" pos:end="14:13">&lt;</operator> <literal type="number" pos:start="14:15" pos:end="14:15">0</literal></expr>)</condition> <block pos:start="14:18" pos:end="44:15">{<block_content pos:start="15:9" pos:end="44:15">
        <return pos:start="15:9" pos:end="15:19">return <expr pos:start="15:16" pos:end="15:18"><name pos:start="15:16" pos:end="15:18">ret</name></expr>;</return>
    <expr_stmt pos:start="16:5" pos:end="16:43"><expr pos:start="16:5" pos:end="16:42"><name pos:start="16:5" pos:end="16:15"><name pos:start="16:5" pos:end="16:5">s</name><operator pos:start="16:6" pos:end="16:7">-&gt;</operator><name pos:start="16:8" pos:end="16:15">n_blocks</name></name> <operator pos:start="16:17" pos:end="16:17">=</operator> <call pos:start="16:19" pos:end="16:42"><name pos:start="16:19" pos:end="16:29">be32_to_cpu</name><argument_list pos:start="16:30" pos:end="16:42">(<argument pos:start="16:31" pos:end="16:41"><expr pos:start="16:31" pos:end="16:41"><name pos:start="16:31" pos:end="16:41"><name pos:start="16:31" pos:end="16:31">s</name><operator pos:start="16:32" pos:end="16:33">-&gt;</operator><name pos:start="16:34" pos:end="16:41">n_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="17:5" pos:end="17:22">/* read offsets */</comment>
    <expr_stmt pos:start="18:5" pos:end="18:50"><expr pos:start="18:5" pos:end="18:49"><name pos:start="18:5" pos:end="18:16">offsets_size</name> <operator pos:start="18:18" pos:end="18:18">=</operator> <name pos:start="18:20" pos:end="18:30"><name pos:start="18:20" pos:end="18:20">s</name><operator pos:start="18:21" pos:end="18:22">-&gt;</operator><name pos:start="18:23" pos:end="18:30">n_blocks</name></name> <operator pos:start="18:32" pos:end="18:32">*</operator> <sizeof pos:start="18:34" pos:end="18:49">sizeof<argument_list pos:start="18:40" pos:end="18:49">(<argument pos:start="18:41" pos:end="18:48"><expr pos:start="18:41" pos:end="18:48"><name pos:start="18:41" pos:end="18:48">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:14">offsets</name></name> <operator pos:start="19:16" pos:end="19:16">=</operator> <call pos:start="19:18" pos:end="19:39"><name pos:start="19:18" pos:end="19:25">g_malloc</name><argument_list pos:start="19:26" pos:end="19:39">(<argument pos:start="19:27" pos:end="19:38"><expr pos:start="19:27" pos:end="19:38"><name pos:start="19:27" pos:end="19:38">offsets_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:70"><expr pos:start="20:5" pos:end="20:69"><name pos:start="20:5" pos:end="20:7">ret</name> <operator pos:start="20:9" pos:end="20:9">=</operator> <call pos:start="20:11" pos:end="20:69"><name pos:start="20:11" pos:end="20:20">bdrv_pread</name><argument_list pos:start="20:21" pos:end="20:69">(<argument pos:start="20:22" pos:end="20:29"><expr pos:start="20:22" pos:end="20:29"><name pos:start="20:22" pos:end="20:29"><name pos:start="20:22" pos:end="20:23">bs</name><operator pos:start="20:24" pos:end="20:25">-&gt;</operator><name pos:start="20:26" pos:end="20:29">file</name></name></expr></argument>, <argument pos:start="20:32" pos:end="20:42"><expr pos:start="20:32" pos:end="20:42"><literal type="number" pos:start="20:32" pos:end="20:36">128</literal> <operator pos:start="20:36" pos:end="20:36">+</operator> <literal type="number" pos:start="20:38" pos:end="20:40">4</literal> <operator pos:start="20:40" pos:end="20:40">+</operator> <literal type="number" pos:start="20:42" pos:end="20:42">4</literal></expr></argument>, <argument pos:start="20:45" pos:end="20:54"><expr pos:start="20:45" pos:end="20:54"><name pos:start="20:45" pos:end="20:54"><name pos:start="20:45" pos:end="20:45">s</name><operator pos:start="20:46" pos:end="20:47">-&gt;</operator><name pos:start="20:48" pos:end="20:54">offsets</name></name></expr></argument>, <argument pos:start="20:57" pos:end="20:68"><expr pos:start="20:57" pos:end="20:68"><name pos:start="20:57" pos:end="20:68">offsets_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="21:5" pos:end="44:15"><if pos:start="21:5" pos:end="44:15">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="44:15">{<block_content pos:start="22:9" pos:end="44:15">
        <goto pos:start="22:9" pos:end="22:18">goto <name pos:start="22:14" pos:end="22:17">fail</name>;</goto>
    <for pos:start="23:5" pos:end="44:15">for<control pos:start="23:8" pos:end="23:30">(<init pos:start="23:9" pos:end="23:12"><expr pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:9">i</name><operator pos:start="23:10" pos:end="23:10">=</operator><literal type="number" pos:start="23:11" pos:end="23:11">0</literal></expr>;</init><condition pos:start="23:13" pos:end="23:26"><expr pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:13">i</name><operator pos:start="23:14" pos:end="23:14">&lt;</operator><name pos:start="23:15" pos:end="23:25"><name pos:start="23:15" pos:end="23:15">s</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:25">n_blocks</name></name></expr>;</condition><incr pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:27">i</name><operator pos:start="23:28" pos:end="23:29">++</operator></expr></incr>)</control> <block pos:start="23:32" pos:end="44:15">{<block_content pos:start="24:9" pos:end="44:15">
        <expr_stmt pos:start="24:9" pos:end="24:51"><expr pos:start="24:9" pos:end="24:50"><name pos:start="24:9" pos:end="24:21"><name pos:start="24:9" pos:end="24:9">s</name><operator pos:start="24:10" pos:end="24:11">-&gt;</operator><name pos:start="24:12" pos:end="24:18">offsets</name><index pos:start="24:19" pos:end="24:21">[<expr pos:start="24:20" pos:end="24:20"><name pos:start="24:20" pos:end="24:20">i</name></expr>]</index></name> <operator pos:start="24:23" pos:end="24:23">=</operator> <call pos:start="24:25" pos:end="24:50"><name pos:start="24:25" pos:end="24:35">be64_to_cpu</name><argument_list pos:start="24:36" pos:end="24:50">(<argument pos:start="24:37" pos:end="24:49"><expr pos:start="24:37" pos:end="24:49"><name pos:start="24:37" pos:end="24:49"><name pos:start="24:37" pos:end="24:37">s</name><operator pos:start="24:38" pos:end="24:39">-&gt;</operator><name pos:start="24:40" pos:end="24:46">offsets</name><index pos:start="24:47" pos:end="24:49">[<expr pos:start="24:48" pos:end="24:48"><name pos:start="24:48" pos:end="24:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="25:9" pos:end="44:15"><if pos:start="25:9" pos:end="44:15">if <condition pos:start="25:12" pos:end="25:18">(<expr pos:start="25:13" pos:end="25:17"><name pos:start="25:13" pos:end="25:13">i</name> <operator pos:start="25:15" pos:end="25:15">&gt;</operator> <literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr>)</condition> <block pos:start="25:20" pos:end="44:15">{<block_content pos:start="26:13" pos:end="44:15">
            <decl_stmt pos:start="26:13" pos:end="26:62"><decl pos:start="26:13" pos:end="26:61"><type pos:start="26:13" pos:end="26:20"><name pos:start="26:13" pos:end="26:20">uint32_t</name></type> <name pos:start="26:22" pos:end="26:25">size</name> <init pos:start="26:27" pos:end="26:61">= <expr pos:start="26:29" pos:end="26:61"><name pos:start="26:29" pos:end="26:41"><name pos:start="26:29" pos:end="26:29">s</name><operator pos:start="26:30" pos:end="26:31">-&gt;</operator><name pos:start="26:32" pos:end="26:38">offsets</name><index pos:start="26:39" pos:end="26:41">[<expr pos:start="26:40" pos:end="26:40"><name pos:start="26:40" pos:end="26:40">i</name></expr>]</index></name> <operator pos:start="26:43" pos:end="26:43">-</operator> <name pos:start="26:45" pos:end="26:61"><name pos:start="26:45" pos:end="26:45">s</name><operator pos:start="26:46" pos:end="26:47">-&gt;</operator><name pos:start="26:48" pos:end="26:54">offsets</name><index pos:start="26:55" pos:end="26:61">[<expr pos:start="26:56" pos:end="26:60"><name pos:start="26:56" pos:end="26:56">i</name> <operator pos:start="26:58" pos:end="26:58">-</operator> <literal type="number" pos:start="26:60" pos:end="26:60">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="27:13" pos:end="44:15"><if pos:start="27:13" pos:end="44:15">if <condition pos:start="27:16" pos:end="27:49">(<expr pos:start="27:17" pos:end="27:48"><name pos:start="27:17" pos:end="27:20">size</name> <operator pos:start="27:22" pos:end="27:22">&gt;</operator> <name pos:start="27:24" pos:end="27:48">max_compressed_block_size</name></expr>)</condition> <block pos:start="27:51" pos:end="44:15">{<block_content pos:start="28:17" pos:end="44:15">
                <expr_stmt pos:start="28:17" pos:end="28:49"><expr pos:start="28:17" pos:end="28:48"><name pos:start="28:17" pos:end="28:41">max_compressed_block_size</name> <operator pos:start="28:43" pos:end="28:43">=</operator> <name pos:start="28:45" pos:end="28:48">size</name></expr>;</expr_stmt>
    <comment type="block" pos:start="29:5" pos:end="29:32">/* initialize zlib engine */</comment>
    <expr_stmt pos:start="30:5" pos:end="30:66"><expr pos:start="30:5" pos:end="30:65"><name pos:start="30:5" pos:end="30:23"><name pos:start="30:5" pos:end="30:5">s</name><operator pos:start="30:6" pos:end="30:7">-&gt;</operator><name pos:start="30:8" pos:end="30:23">compressed_block</name></name> <operator pos:start="30:25" pos:end="30:25">=</operator> <call pos:start="30:27" pos:end="30:65"><name pos:start="30:27" pos:end="30:34">g_malloc</name><argument_list pos:start="30:35" pos:end="30:65">(<argument pos:start="30:36" pos:end="30:64"><expr pos:start="30:36" pos:end="30:64"><name pos:start="30:36" pos:end="30:60">max_compressed_block_size</name> <operator pos:start="30:62" pos:end="30:62">+</operator> <literal type="number" pos:start="30:64" pos:end="30:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:25">uncompressed_block</name></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <call pos:start="31:29" pos:end="31:51"><name pos:start="31:29" pos:end="31:36">g_malloc</name><argument_list pos:start="31:37" pos:end="31:51">(<argument pos:start="31:38" pos:end="31:50"><expr pos:start="31:38" pos:end="31:50"><name pos:start="31:38" pos:end="31:50"><name pos:start="31:38" pos:end="31:38">s</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:50">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="32:5" pos:end="44:15"><if pos:start="32:5" pos:end="44:15">if <condition pos:start="32:8" pos:end="32:41">(<expr pos:start="32:9" pos:end="32:40"><call pos:start="32:9" pos:end="32:32"><name pos:start="32:9" pos:end="32:19">inflateInit</name><argument_list pos:start="32:20" pos:end="32:32">(<argument pos:start="32:21" pos:end="32:31"><expr pos:start="32:21" pos:end="32:31"><operator pos:start="32:21" pos:end="32:21">&amp;</operator><name pos:start="32:22" pos:end="32:31"><name pos:start="32:22" pos:end="32:22">s</name><operator pos:start="32:23" pos:end="32:24">-&gt;</operator><name pos:start="32:25" pos:end="32:31">zstream</name></name></expr></argument>)</argument_list></call> <operator pos:start="32:34" pos:end="32:35">!=</operator> <name pos:start="32:37" pos:end="32:40">Z_OK</name></expr>)</condition> <block pos:start="32:43" pos:end="44:15">{<block_content pos:start="33:9" pos:end="44:15">
        <expr_stmt pos:start="33:9" pos:end="33:22"><expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <operator pos:start="33:15" pos:end="33:15">-</operator><name pos:start="33:16" pos:end="33:21">EINVAL</name></expr>;</expr_stmt>
        <goto pos:start="34:9" pos:end="34:18">goto <name pos:start="34:14" pos:end="34:17">fail</name>;</goto>
    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:20">current_block</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:34"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:34">n_blocks</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:45"><expr pos:start="36:5" pos:end="36:44"><name pos:start="36:5" pos:end="36:24"><name pos:start="36:5" pos:end="36:5">s</name><operator pos:start="36:6" pos:end="36:7">-&gt;</operator><name pos:start="36:8" pos:end="36:24">sectors_per_block</name></name> <operator pos:start="36:26" pos:end="36:26">=</operator> <name pos:start="36:28" pos:end="36:40"><name pos:start="36:28" pos:end="36:28">s</name><operator pos:start="36:29" pos:end="36:30">-&gt;</operator><name pos:start="36:31" pos:end="36:40">block_size</name></name><operator pos:start="36:41" pos:end="36:41">/</operator><literal type="number" pos:start="36:42" pos:end="36:44">512</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:59"><expr pos:start="37:5" pos:end="37:58"><name pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:6">bs</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:21">total_sectors</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:35"><name pos:start="37:25" pos:end="37:25">s</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:35">n_blocks</name></name> <operator pos:start="37:37" pos:end="37:37">*</operator> <name pos:start="37:39" pos:end="37:58"><name pos:start="37:39" pos:end="37:39">s</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:58">sectors_per_block</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:33"><expr pos:start="38:5" pos:end="38:32"><call pos:start="38:5" pos:end="38:32"><name pos:start="38:5" pos:end="38:22">qemu_co_mutex_init</name><argument_list pos:start="38:23" pos:end="38:32">(<argument pos:start="38:24" pos:end="38:31"><expr pos:start="38:24" pos:end="38:31"><operator pos:start="38:24" pos:end="38:24">&amp;</operator><name pos:start="38:25" pos:end="38:31"><name pos:start="38:25" pos:end="38:25">s</name><operator pos:start="38:26" pos:end="38:27">-&gt;</operator><name pos:start="38:28" pos:end="38:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>
<label pos:start="40:1" pos:end="40:5"><name pos:start="40:1" pos:end="40:4">fail</name>:</label>
    <expr_stmt pos:start="41:5" pos:end="41:23"><expr pos:start="41:5" pos:end="41:22"><call pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:10">g_free</name><argument_list pos:start="41:11" pos:end="41:22">(<argument pos:start="41:12" pos:end="41:21"><expr pos:start="41:12" pos:end="41:21"><name pos:start="41:12" pos:end="41:21"><name pos:start="41:12" pos:end="41:12">s</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:21">offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="42:5" pos:end="42:32"><expr pos:start="42:5" pos:end="42:31"><call pos:start="42:5" pos:end="42:31"><name pos:start="42:5" pos:end="42:10">g_free</name><argument_list pos:start="42:11" pos:end="42:31">(<argument pos:start="42:12" pos:end="42:30"><expr pos:start="42:12" pos:end="42:30"><name pos:start="42:12" pos:end="42:30"><name pos:start="42:12" pos:end="42:12">s</name><operator pos:start="42:13" pos:end="42:14">-&gt;</operator><name pos:start="42:15" pos:end="42:30">compressed_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><call pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:10">g_free</name><argument_list pos:start="43:11" pos:end="43:33">(<argument pos:start="43:12" pos:end="43:32"><expr pos:start="43:12" pos:end="43:32"><name pos:start="43:12" pos:end="43:32"><name pos:start="43:12" pos:end="43:12">s</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:32">uncompressed_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="44:5" pos:end="44:15">return <expr pos:start="44:12" pos:end="44:14"><name pos:start="44:12" pos:end="44:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
