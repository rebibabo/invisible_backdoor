<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11249.c" pos:tabs="8"><function pos:start="1:1" pos:end="242:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">qcow2_open</name><parameter_list pos:start="1:22" pos:end="2:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,
                      <parameter pos:start="2:23" pos:end="2:34"><decl pos:start="2:23" pos:end="2:34"><type pos:start="2:23" pos:end="2:34"><name pos:start="2:23" pos:end="2:27">Error</name> <modifier pos:start="2:29" pos:end="2:29">*</modifier><modifier pos:start="2:30" pos:end="2:30">*</modifier></type><name pos:start="2:31" pos:end="2:34">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="242:15">{<block_content pos:start="4:5" pos:end="242:15">
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:33"><type pos:start="4:5" pos:end="4:19"><name pos:start="4:5" pos:end="4:17">BDRVQcowState</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:20">s</name> <init pos:start="4:22" pos:end="4:33">= <expr pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:33"><name pos:start="4:24" pos:end="4:25">bs</name><operator pos:start="4:26" pos:end="4:27">-&gt;</operator><name pos:start="4:28" pos:end="4:33">opaque</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">len</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>, <decl pos:start="5:17" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:19">ret</name> <init pos:start="5:21" pos:end="5:23">= <expr pos:start="5:23" pos:end="5:23"><literal type="number" pos:start="5:23" pos:end="5:23">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:22"><decl pos:start="6:5" pos:end="6:21"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:14">QCowHeader</name></type> <name pos:start="6:16" pos:end="6:21">header</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">QemuOpts</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">opts</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:11"><name pos:start="8:5" pos:end="8:9">Error</name> <modifier pos:start="8:11" pos:end="8:11">*</modifier></type><name pos:start="8:12" pos:end="8:20">local_err</name> <init pos:start="8:22" pos:end="8:27">= <expr pos:start="8:24" pos:end="8:27"><name pos:start="8:24" pos:end="8:27">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:20">ext_end</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:31"><decl pos:start="10:5" pos:end="10:30"><type pos:start="10:5" pos:end="10:12"><name pos:start="10:5" pos:end="10:12">uint64_t</name></type> <name pos:start="10:14" pos:end="10:30">l1_vm_state_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:33">opt_overlap_check</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:35"><decl pos:start="12:5" pos:end="12:34"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:30">overlap_check_template</name> <init pos:start="12:32" pos:end="12:34">= <expr pos:start="12:34" pos:end="12:34"><literal type="number" pos:start="12:34" pos:end="12:34">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:59"><expr pos:start="13:5" pos:end="13:58"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:58"><name pos:start="13:11" pos:end="13:20">bdrv_pread</name><argument_list pos:start="13:21" pos:end="13:58">(<argument pos:start="13:22" pos:end="13:29"><expr pos:start="13:22" pos:end="13:29"><name pos:start="13:22" pos:end="13:29"><name pos:start="13:22" pos:end="13:23">bs</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:29">file</name></name></expr></argument>, <argument pos:start="13:32" pos:end="13:32"><expr pos:start="13:32" pos:end="13:32"><literal type="number" pos:start="13:32" pos:end="13:32">0</literal></expr></argument>, <argument pos:start="13:35" pos:end="13:41"><expr pos:start="13:35" pos:end="13:41"><operator pos:start="13:35" pos:end="13:35">&amp;</operator><name pos:start="13:36" pos:end="13:41">header</name></expr></argument>, <argument pos:start="13:44" pos:end="13:57"><expr pos:start="13:44" pos:end="13:57"><sizeof pos:start="13:44" pos:end="13:57">sizeof<argument_list pos:start="13:50" pos:end="13:57">(<argument pos:start="13:51" pos:end="13:56"><expr pos:start="13:51" pos:end="13:56"><name pos:start="13:51" pos:end="13:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="242:15"><if pos:start="14:5" pos:end="242:15">if <condition pos:start="14:8" pos:end="14:16">(<expr pos:start="14:9" pos:end="14:15"><name pos:start="14:9" pos:end="14:11">ret</name> <operator pos:start="14:13" pos:end="14:13">&lt;</operator> <literal type="number" pos:start="14:15" pos:end="14:15">0</literal></expr>)</condition> <block pos:start="14:18" pos:end="242:15">{<block_content pos:start="15:9" pos:end="242:15">
        <expr_stmt pos:start="15:9" pos:end="15:68"><expr pos:start="15:9" pos:end="15:67"><call pos:start="15:9" pos:end="15:67"><name pos:start="15:9" pos:end="15:24">error_setg_errno</name><argument_list pos:start="15:25" pos:end="15:67">(<argument pos:start="15:26" pos:end="15:29"><expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">errp</name></expr></argument>, <argument pos:start="15:32" pos:end="15:35"><expr pos:start="15:32" pos:end="15:35"><operator pos:start="15:32" pos:end="15:32">-</operator><name pos:start="15:33" pos:end="15:35">ret</name></expr></argument>, <argument pos:start="15:38" pos:end="15:66"><expr pos:start="15:38" pos:end="15:66"><literal type="string" pos:start="15:38" pos:end="15:66">"Could not read qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:32"><expr pos:start="16:5" pos:end="16:31"><call pos:start="16:5" pos:end="16:31"><name pos:start="16:5" pos:end="16:16">be32_to_cpus</name><argument_list pos:start="16:17" pos:end="16:31">(<argument pos:start="16:18" pos:end="16:30"><expr pos:start="16:18" pos:end="16:30"><operator pos:start="16:18" pos:end="16:18">&amp;</operator><name pos:start="16:19" pos:end="16:30"><name pos:start="16:19" pos:end="16:24">header</name><operator pos:start="16:25" pos:end="16:25">.</operator><name pos:start="16:26" pos:end="16:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><call pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:16">be32_to_cpus</name><argument_list pos:start="17:17" pos:end="17:33">(<argument pos:start="17:18" pos:end="17:32"><expr pos:start="17:18" pos:end="17:32"><operator pos:start="17:18" pos:end="17:18">&amp;</operator><name pos:start="17:19" pos:end="17:32"><name pos:start="17:19" pos:end="17:24">header</name><operator pos:start="17:25" pos:end="17:25">.</operator><name pos:start="17:26" pos:end="17:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:46"><expr pos:start="18:5" pos:end="18:45"><call pos:start="18:5" pos:end="18:45"><name pos:start="18:5" pos:end="18:16">be64_to_cpus</name><argument_list pos:start="18:17" pos:end="18:45">(<argument pos:start="18:18" pos:end="18:44"><expr pos:start="18:18" pos:end="18:44"><operator pos:start="18:18" pos:end="18:18">&amp;</operator><name pos:start="18:19" pos:end="18:44"><name pos:start="18:19" pos:end="18:24">header</name><operator pos:start="18:25" pos:end="18:25">.</operator><name pos:start="18:26" pos:end="18:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:44"><expr pos:start="19:5" pos:end="19:43"><call pos:start="19:5" pos:end="19:43"><name pos:start="19:5" pos:end="19:16">be32_to_cpus</name><argument_list pos:start="19:17" pos:end="19:43">(<argument pos:start="19:18" pos:end="19:42"><expr pos:start="19:18" pos:end="19:42"><operator pos:start="19:18" pos:end="19:18">&amp;</operator><name pos:start="19:19" pos:end="19:42"><name pos:start="19:19" pos:end="19:24">header</name><operator pos:start="19:25" pos:end="19:25">.</operator><name pos:start="19:26" pos:end="19:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:31"><expr pos:start="20:5" pos:end="20:30"><call pos:start="20:5" pos:end="20:30"><name pos:start="20:5" pos:end="20:16">be64_to_cpus</name><argument_list pos:start="20:17" pos:end="20:30">(<argument pos:start="20:18" pos:end="20:29"><expr pos:start="20:18" pos:end="20:29"><operator pos:start="20:18" pos:end="20:18">&amp;</operator><name pos:start="20:19" pos:end="20:29"><name pos:start="20:19" pos:end="20:24">header</name><operator pos:start="20:25" pos:end="20:25">.</operator><name pos:start="20:26" pos:end="20:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><call pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:16">be32_to_cpus</name><argument_list pos:start="21:17" pos:end="21:38">(<argument pos:start="21:18" pos:end="21:37"><expr pos:start="21:18" pos:end="21:37"><operator pos:start="21:18" pos:end="21:18">&amp;</operator><name pos:start="21:19" pos:end="21:37"><name pos:start="21:19" pos:end="21:24">header</name><operator pos:start="21:25" pos:end="21:25">.</operator><name pos:start="21:26" pos:end="21:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:39"><expr pos:start="22:5" pos:end="22:38"><call pos:start="22:5" pos:end="22:38"><name pos:start="22:5" pos:end="22:16">be32_to_cpus</name><argument_list pos:start="22:17" pos:end="22:38">(<argument pos:start="22:18" pos:end="22:37"><expr pos:start="22:18" pos:end="22:37"><operator pos:start="22:18" pos:end="22:18">&amp;</operator><name pos:start="22:19" pos:end="22:37"><name pos:start="22:19" pos:end="22:24">header</name><operator pos:start="22:25" pos:end="22:25">.</operator><name pos:start="22:26" pos:end="22:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><call pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:16">be64_to_cpus</name><argument_list pos:start="23:17" pos:end="23:41">(<argument pos:start="23:18" pos:end="23:40"><expr pos:start="23:18" pos:end="23:40"><operator pos:start="23:18" pos:end="23:18">&amp;</operator><name pos:start="23:19" pos:end="23:40"><name pos:start="23:19" pos:end="23:24">header</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:34"><expr pos:start="24:5" pos:end="24:33"><call pos:start="24:5" pos:end="24:33"><name pos:start="24:5" pos:end="24:16">be32_to_cpus</name><argument_list pos:start="24:17" pos:end="24:33">(<argument pos:start="24:18" pos:end="24:32"><expr pos:start="24:18" pos:end="24:32"><operator pos:start="24:18" pos:end="24:18">&amp;</operator><name pos:start="24:19" pos:end="24:32"><name pos:start="24:19" pos:end="24:24">header</name><operator pos:start="24:25" pos:end="24:25">.</operator><name pos:start="24:26" pos:end="24:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:48"><expr pos:start="25:5" pos:end="25:47"><call pos:start="25:5" pos:end="25:47"><name pos:start="25:5" pos:end="25:16">be64_to_cpus</name><argument_list pos:start="25:17" pos:end="25:47">(<argument pos:start="25:18" pos:end="25:46"><expr pos:start="25:18" pos:end="25:46"><operator pos:start="25:18" pos:end="25:18">&amp;</operator><name pos:start="25:19" pos:end="25:46"><name pos:start="25:19" pos:end="25:24">header</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:50"><expr pos:start="26:5" pos:end="26:49"><call pos:start="26:5" pos:end="26:49"><name pos:start="26:5" pos:end="26:16">be32_to_cpus</name><argument_list pos:start="26:17" pos:end="26:49">(<argument pos:start="26:18" pos:end="26:48"><expr pos:start="26:18" pos:end="26:48"><operator pos:start="26:18" pos:end="26:18">&amp;</operator><name pos:start="26:19" pos:end="26:48"><name pos:start="26:19" pos:end="26:24">header</name><operator pos:start="26:25" pos:end="26:25">.</operator><name pos:start="26:26" pos:end="26:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:43"><expr pos:start="27:5" pos:end="27:42"><call pos:start="27:5" pos:end="27:42"><name pos:start="27:5" pos:end="27:16">be64_to_cpus</name><argument_list pos:start="27:17" pos:end="27:42">(<argument pos:start="27:18" pos:end="27:41"><expr pos:start="27:18" pos:end="27:41"><operator pos:start="27:18" pos:end="27:18">&amp;</operator><name pos:start="27:19" pos:end="27:41"><name pos:start="27:19" pos:end="27:24">header</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:39"><expr pos:start="28:5" pos:end="28:38"><call pos:start="28:5" pos:end="28:38"><name pos:start="28:5" pos:end="28:16">be32_to_cpus</name><argument_list pos:start="28:17" pos:end="28:38">(<argument pos:start="28:18" pos:end="28:37"><expr pos:start="28:18" pos:end="28:37"><operator pos:start="28:18" pos:end="28:18">&amp;</operator><name pos:start="28:19" pos:end="28:37"><name pos:start="28:19" pos:end="28:24">header</name><operator pos:start="28:25" pos:end="28:25">.</operator><name pos:start="28:26" pos:end="28:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="29:5" pos:end="242:15"><if pos:start="29:5" pos:end="242:15">if <condition pos:start="29:8" pos:end="29:35">(<expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:14">header</name><operator pos:start="29:15" pos:end="29:15">.</operator><name pos:start="29:16" pos:end="29:20">magic</name></name> <operator pos:start="29:22" pos:end="29:23">!=</operator> <name pos:start="29:25" pos:end="29:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="29:37" pos:end="242:15">{<block_content pos:start="30:9" pos:end="242:15">
        <expr_stmt pos:start="30:9" pos:end="30:57"><expr pos:start="30:9" pos:end="30:56"><call pos:start="30:9" pos:end="30:56"><name pos:start="30:9" pos:end="30:18">error_setg</name><argument_list pos:start="30:19" pos:end="30:56">(<argument pos:start="30:20" pos:end="30:23"><expr pos:start="30:20" pos:end="30:23"><name pos:start="30:20" pos:end="30:23">errp</name></expr></argument>, <argument pos:start="30:26" pos:end="30:55"><expr pos:start="30:26" pos:end="30:55"><literal type="string" pos:start="30:26" pos:end="30:55">"Image is not in qcow2 format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="31:5" pos:end="242:15"><if pos:start="31:5" pos:end="242:15">if <condition pos:start="31:8" pos:end="31:49">(<expr pos:start="31:9" pos:end="31:48"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:14">header</name><operator pos:start="31:15" pos:end="31:15">.</operator><name pos:start="31:16" pos:end="31:22">version</name></name> <operator pos:start="31:24" pos:end="31:24">&lt;</operator> <literal type="number" pos:start="31:26" pos:end="31:26">2</literal> <operator pos:start="31:28" pos:end="31:29">||</operator> <name pos:start="31:31" pos:end="31:44"><name pos:start="31:31" pos:end="31:36">header</name><operator pos:start="31:37" pos:end="31:37">.</operator><name pos:start="31:38" pos:end="31:44">version</name></name> <operator pos:start="31:46" pos:end="31:46">&gt;</operator> <literal type="number" pos:start="31:48" pos:end="31:48">3</literal></expr>)</condition> <block pos:start="31:51" pos:end="242:15">{<block_content pos:start="32:9" pos:end="242:15">
        <expr_stmt pos:start="32:9" pos:end="32:72"><expr pos:start="32:9" pos:end="32:71"><call pos:start="32:9" pos:end="32:71"><name pos:start="32:9" pos:end="32:26">report_unsupported</name><argument_list pos:start="32:27" pos:end="32:71">(<argument pos:start="32:28" pos:end="32:29"><expr pos:start="32:28" pos:end="32:29"><name pos:start="32:28" pos:end="32:29">bs</name></expr></argument>, <argument pos:start="32:32" pos:end="32:35"><expr pos:start="32:32" pos:end="32:35"><name pos:start="32:32" pos:end="32:35">errp</name></expr></argument>, <argument pos:start="32:38" pos:end="32:54"><expr pos:start="32:38" pos:end="32:54"><literal type="string" pos:start="32:38" pos:end="32:54">"QCOW version %d"</literal></expr></argument>, <argument pos:start="32:57" pos:end="32:70"><expr pos:start="32:57" pos:end="32:70"><name pos:start="32:57" pos:end="32:70"><name pos:start="32:57" pos:end="32:62">header</name><operator pos:start="32:63" pos:end="32:63">.</operator><name pos:start="32:64" pos:end="32:70">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <operator pos:start="33:15" pos:end="33:15">-</operator><name pos:start="33:16" pos:end="33:22">ENOTSUP</name></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:37"><expr pos:start="34:5" pos:end="34:36"><name pos:start="34:5" pos:end="34:19"><name pos:start="34:5" pos:end="34:5">s</name><operator pos:start="34:6" pos:end="34:7">-&gt;</operator><name pos:start="34:8" pos:end="34:19">qcow_version</name></name> <operator pos:start="34:21" pos:end="34:21">=</operator> <name pos:start="34:23" pos:end="34:36"><name pos:start="34:23" pos:end="34:28">header</name><operator pos:start="34:29" pos:end="34:29">.</operator><name pos:start="34:30" pos:end="34:36">version</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="35:5" pos:end="35:33">/* Initialise cluster size */</comment>
    <if_stmt pos:start="36:5" pos:end="242:15"><if pos:start="36:5" pos:end="242:15">if <condition pos:start="36:8" pos:end="37:47">(<expr pos:start="36:9" pos:end="37:46"><name pos:start="36:9" pos:end="36:27"><name pos:start="36:9" pos:end="36:14">header</name><operator pos:start="36:15" pos:end="36:15">.</operator><name pos:start="36:16" pos:end="36:27">cluster_bits</name></name> <operator pos:start="36:29" pos:end="36:29">&lt;</operator> <name pos:start="36:31" pos:end="36:46">MIN_CLUSTER_BITS</name> <operator pos:start="36:48" pos:end="36:49">||</operator>
        <name pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:14">header</name><operator pos:start="37:15" pos:end="37:15">.</operator><name pos:start="37:16" pos:end="37:27">cluster_bits</name></name> <operator pos:start="37:29" pos:end="37:29">&gt;</operator> <name pos:start="37:31" pos:end="37:46">MAX_CLUSTER_BITS</name></expr>)</condition> <block pos:start="37:49" pos:end="242:15">{<block_content pos:start="38:9" pos:end="242:15">
        <expr_stmt pos:start="38:9" pos:end="38:80"><expr pos:start="38:9" pos:end="38:79"><call pos:start="38:9" pos:end="38:79"><name pos:start="38:9" pos:end="38:18">error_setg</name><argument_list pos:start="38:19" pos:end="38:79">(<argument pos:start="38:20" pos:end="38:23"><expr pos:start="38:20" pos:end="38:23"><name pos:start="38:20" pos:end="38:23">errp</name></expr></argument>, <argument pos:start="38:26" pos:end="38:57"><expr pos:start="38:26" pos:end="38:57"><literal type="string" pos:start="38:26" pos:end="38:57">"Unsupported cluster size: 2^%i"</literal></expr></argument>, <argument pos:start="38:60" pos:end="38:78"><expr pos:start="38:60" pos:end="38:78"><name pos:start="38:60" pos:end="38:78"><name pos:start="38:60" pos:end="38:65">header</name><operator pos:start="38:66" pos:end="38:66">.</operator><name pos:start="38:67" pos:end="38:78">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="39:5" pos:end="39:42"><expr pos:start="39:5" pos:end="39:41"><name pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:19">cluster_bits</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:41"><name pos:start="39:23" pos:end="39:28">header</name><operator pos:start="39:29" pos:end="39:29">.</operator><name pos:start="39:30" pos:end="39:41">cluster_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="40:43"><expr pos:start="40:5" pos:end="40:42"><name pos:start="40:5" pos:end="40:19"><name pos:start="40:5" pos:end="40:5">s</name><operator pos:start="40:6" pos:end="40:7">-&gt;</operator><name pos:start="40:8" pos:end="40:19">cluster_size</name></name> <operator pos:start="40:21" pos:end="40:21">=</operator> <literal type="number" pos:start="40:23" pos:end="40:23">1</literal> <operator pos:start="40:25" pos:end="40:26">&lt;&lt;</operator> <name pos:start="40:28" pos:end="40:42"><name pos:start="40:28" pos:end="40:28">s</name><operator pos:start="40:29" pos:end="40:30">-&gt;</operator><name pos:start="40:31" pos:end="40:42">cluster_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><name pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:22">cluster_sectors</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <literal type="number" pos:start="41:26" pos:end="41:26">1</literal> <operator pos:start="41:28" pos:end="41:29">&lt;&lt;</operator> <operator pos:start="41:31" pos:end="41:31">(</operator><name pos:start="41:32" pos:end="41:46"><name pos:start="41:32" pos:end="41:32">s</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:46">cluster_bits</name></name> <operator pos:start="41:48" pos:end="41:48">-</operator> <literal type="number" pos:start="41:50" pos:end="41:50">9</literal><operator pos:start="41:51" pos:end="41:51">)</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="42:5" pos:end="42:44">/* Initialise version 3 header fields */</comment>
    <if_stmt pos:start="43:5" pos:end="242:15"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:28">(<expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:14">header</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:22">version</name></name> <operator pos:start="43:24" pos:end="43:25">==</operator> <literal type="number" pos:start="43:27" pos:end="43:27">2</literal></expr>)</condition> <block pos:start="43:30" pos:end="49:5">{<block_content pos:start="44:9" pos:end="48:45">
        <expr_stmt pos:start="44:9" pos:end="44:44"><expr pos:start="44:9" pos:end="44:43"><name pos:start="44:9" pos:end="44:36"><name pos:start="44:9" pos:end="44:14">header</name><operator pos:start="44:15" pos:end="44:15">.</operator><name pos:start="44:16" pos:end="44:36">incompatible_features</name></name>    <operator pos:start="44:41" pos:end="44:41">=</operator> <literal type="number" pos:start="44:43" pos:end="44:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:44"><expr pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:14">header</name><operator pos:start="45:15" pos:end="45:15">.</operator><name pos:start="45:16" pos:end="45:34">compatible_features</name></name>      <operator pos:start="45:41" pos:end="45:41">=</operator> <literal type="number" pos:start="45:43" pos:end="45:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:44"><expr pos:start="46:9" pos:end="46:43"><name pos:start="46:9" pos:end="46:33"><name pos:start="46:9" pos:end="46:14">header</name><operator pos:start="46:15" pos:end="46:15">.</operator><name pos:start="46:16" pos:end="46:33">autoclear_features</name></name>       <operator pos:start="46:41" pos:end="46:41">=</operator> <literal type="number" pos:start="46:43" pos:end="46:43">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:14">header</name><operator pos:start="47:15" pos:end="47:15">.</operator><name pos:start="47:16" pos:end="47:29">refcount_order</name></name>           <operator pos:start="47:41" pos:end="47:41">=</operator> <literal type="number" pos:start="47:43" pos:end="47:43">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:45"><expr pos:start="48:9" pos:end="48:44"><name pos:start="48:9" pos:end="48:28"><name pos:start="48:9" pos:end="48:14">header</name><operator pos:start="48:15" pos:end="48:15">.</operator><name pos:start="48:16" pos:end="48:28">header_length</name></name>            <operator pos:start="48:41" pos:end="48:41">=</operator> <literal type="number" pos:start="48:43" pos:end="48:44">72</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="49:7" pos:end="242:15">else <block pos:start="49:12" pos:end="242:15">{<block_content pos:start="50:9" pos:end="242:15">
        <expr_stmt pos:start="50:9" pos:end="50:52"><expr pos:start="50:9" pos:end="50:51"><call pos:start="50:9" pos:end="50:51"><name pos:start="50:9" pos:end="50:20">be64_to_cpus</name><argument_list pos:start="50:21" pos:end="50:51">(<argument pos:start="50:22" pos:end="50:50"><expr pos:start="50:22" pos:end="50:50"><operator pos:start="50:22" pos:end="50:22">&amp;</operator><name pos:start="50:23" pos:end="50:50"><name pos:start="50:23" pos:end="50:28">header</name><operator pos:start="50:29" pos:end="50:29">.</operator><name pos:start="50:30" pos:end="50:50">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:50"><expr pos:start="51:9" pos:end="51:49"><call pos:start="51:9" pos:end="51:49"><name pos:start="51:9" pos:end="51:20">be64_to_cpus</name><argument_list pos:start="51:21" pos:end="51:49">(<argument pos:start="51:22" pos:end="51:48"><expr pos:start="51:22" pos:end="51:48"><operator pos:start="51:22" pos:end="51:22">&amp;</operator><name pos:start="51:23" pos:end="51:48"><name pos:start="51:23" pos:end="51:28">header</name><operator pos:start="51:29" pos:end="51:29">.</operator><name pos:start="51:30" pos:end="51:48">compatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="52:9" pos:end="52:49"><expr pos:start="52:9" pos:end="52:48"><call pos:start="52:9" pos:end="52:48"><name pos:start="52:9" pos:end="52:20">be64_to_cpus</name><argument_list pos:start="52:21" pos:end="52:48">(<argument pos:start="52:22" pos:end="52:47"><expr pos:start="52:22" pos:end="52:47"><operator pos:start="52:22" pos:end="52:22">&amp;</operator><name pos:start="52:23" pos:end="52:47"><name pos:start="52:23" pos:end="52:28">header</name><operator pos:start="52:29" pos:end="52:29">.</operator><name pos:start="52:30" pos:end="52:47">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:45"><expr pos:start="53:9" pos:end="53:44"><call pos:start="53:9" pos:end="53:44"><name pos:start="53:9" pos:end="53:20">be32_to_cpus</name><argument_list pos:start="53:21" pos:end="53:44">(<argument pos:start="53:22" pos:end="53:43"><expr pos:start="53:22" pos:end="53:43"><operator pos:start="53:22" pos:end="53:22">&amp;</operator><name pos:start="53:23" pos:end="53:43"><name pos:start="53:23" pos:end="53:28">header</name><operator pos:start="53:29" pos:end="53:29">.</operator><name pos:start="53:30" pos:end="53:43">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:44"><expr pos:start="54:9" pos:end="54:43"><call pos:start="54:9" pos:end="54:43"><name pos:start="54:9" pos:end="54:20">be32_to_cpus</name><argument_list pos:start="54:21" pos:end="54:43">(<argument pos:start="54:22" pos:end="54:42"><expr pos:start="54:22" pos:end="54:42"><operator pos:start="54:22" pos:end="54:22">&amp;</operator><name pos:start="54:23" pos:end="54:42"><name pos:start="54:23" pos:end="54:28">header</name><operator pos:start="54:29" pos:end="54:29">.</operator><name pos:start="54:30" pos:end="54:42">header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="55:9" pos:end="242:15"><if pos:start="55:9" pos:end="242:15">if <condition pos:start="55:12" pos:end="55:39">(<expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:18">header</name><operator pos:start="55:19" pos:end="55:19">.</operator><name pos:start="55:20" pos:end="55:32">header_length</name></name> <operator pos:start="55:34" pos:end="55:34">&lt;</operator> <literal type="number" pos:start="55:36" pos:end="55:38">104</literal></expr>)</condition> <block pos:start="55:41" pos:end="242:15">{<block_content pos:start="56:13" pos:end="242:15">
            <expr_stmt pos:start="56:13" pos:end="56:55"><expr pos:start="56:13" pos:end="56:54"><call pos:start="56:13" pos:end="56:54"><name pos:start="56:13" pos:end="56:22">error_setg</name><argument_list pos:start="56:23" pos:end="56:54">(<argument pos:start="56:24" pos:end="56:27"><expr pos:start="56:24" pos:end="56:27"><name pos:start="56:24" pos:end="56:27">errp</name></expr></argument>, <argument pos:start="56:30" pos:end="56:53"><expr pos:start="56:30" pos:end="56:53"><literal type="string" pos:start="56:30" pos:end="56:53">"qcow2 header too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="57:5" pos:end="242:15"><if pos:start="57:5" pos:end="242:15">if <condition pos:start="57:8" pos:end="57:47">(<expr pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:14">header</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:28">header_length</name></name> <operator pos:start="57:30" pos:end="57:30">&gt;</operator> <name pos:start="57:32" pos:end="57:46"><name pos:start="57:32" pos:end="57:32">s</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:46">cluster_size</name></name></expr>)</condition> <block pos:start="57:49" pos:end="242:15">{<block_content pos:start="58:9" pos:end="242:15">
        <expr_stmt pos:start="58:9" pos:end="58:62"><expr pos:start="58:9" pos:end="58:61"><call pos:start="58:9" pos:end="58:61"><name pos:start="58:9" pos:end="58:18">error_setg</name><argument_list pos:start="58:19" pos:end="58:61">(<argument pos:start="58:20" pos:end="58:23"><expr pos:start="58:20" pos:end="58:23"><name pos:start="58:20" pos:end="58:23">errp</name></expr></argument>, <argument pos:start="58:26" pos:end="58:60"><expr pos:start="58:26" pos:end="58:60"><literal type="string" pos:start="58:26" pos:end="58:60">"qcow2 header exceeds cluster size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="59:5" pos:end="242:15"><if pos:start="59:5" pos:end="242:15">if <condition pos:start="59:8" pos:end="59:46">(<expr pos:start="59:9" pos:end="59:45"><name pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:14">header</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:28">header_length</name></name> <operator pos:start="59:30" pos:end="59:30">&gt;</operator> <sizeof pos:start="59:32" pos:end="59:45">sizeof<argument_list pos:start="59:38" pos:end="59:45">(<argument pos:start="59:39" pos:end="59:44"><expr pos:start="59:39" pos:end="59:44"><name pos:start="59:39" pos:end="59:44">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="59:48" pos:end="242:15">{<block_content pos:start="60:9" pos:end="242:15">
        <expr_stmt pos:start="60:9" pos:end="60:78"><expr pos:start="60:9" pos:end="60:77"><name pos:start="60:9" pos:end="60:37"><name pos:start="60:9" pos:end="60:9">s</name><operator pos:start="60:10" pos:end="60:11">-&gt;</operator><name pos:start="60:12" pos:end="60:37">unknown_header_fields_size</name></name> <operator pos:start="60:39" pos:end="60:39">=</operator> <name pos:start="60:41" pos:end="60:60"><name pos:start="60:41" pos:end="60:46">header</name><operator pos:start="60:47" pos:end="60:47">.</operator><name pos:start="60:48" pos:end="60:60">header_length</name></name> <operator pos:start="60:62" pos:end="60:62">-</operator> <sizeof pos:start="60:64" pos:end="60:77">sizeof<argument_list pos:start="60:70" pos:end="60:77">(<argument pos:start="60:71" pos:end="60:76"><expr pos:start="60:71" pos:end="60:76"><name pos:start="60:71" pos:end="60:76">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="61:75"><expr pos:start="61:9" pos:end="61:74"><name pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:32">unknown_header_fields</name></name> <operator pos:start="61:34" pos:end="61:34">=</operator> <call pos:start="61:36" pos:end="61:74"><name pos:start="61:36" pos:end="61:43">g_malloc</name><argument_list pos:start="61:44" pos:end="61:74">(<argument pos:start="61:45" pos:end="61:73"><expr pos:start="61:45" pos:end="61:73"><name pos:start="61:45" pos:end="61:73"><name pos:start="61:45" pos:end="61:45">s</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:73">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="62:9" pos:end="63:56"><expr pos:start="62:9" pos:end="63:55"><name pos:start="62:9" pos:end="62:11">ret</name> <operator pos:start="62:13" pos:end="62:13">=</operator> <call pos:start="62:15" pos:end="63:55"><name pos:start="62:15" pos:end="62:24">bdrv_pread</name><argument_list pos:start="62:25" pos:end="63:55">(<argument pos:start="62:26" pos:end="62:33"><expr pos:start="62:26" pos:end="62:33"><name pos:start="62:26" pos:end="62:33"><name pos:start="62:26" pos:end="62:27">bs</name><operator pos:start="62:28" pos:end="62:29">-&gt;</operator><name pos:start="62:30" pos:end="62:33">file</name></name></expr></argument>, <argument pos:start="62:36" pos:end="62:49"><expr pos:start="62:36" pos:end="62:49"><sizeof pos:start="62:36" pos:end="62:49">sizeof<argument_list pos:start="62:42" pos:end="62:49">(<argument pos:start="62:43" pos:end="62:48"><expr pos:start="62:43" pos:end="62:48"><name pos:start="62:43" pos:end="62:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="62:52" pos:end="62:75"><expr pos:start="62:52" pos:end="62:75"><name pos:start="62:52" pos:end="62:75"><name pos:start="62:52" pos:end="62:52">s</name><operator pos:start="62:53" pos:end="62:54">-&gt;</operator><name pos:start="62:55" pos:end="62:75">unknown_header_fields</name></name></expr></argument>,
                         <argument pos:start="63:26" pos:end="63:54"><expr pos:start="63:26" pos:end="63:54"><name pos:start="63:26" pos:end="63:54"><name pos:start="63:26" pos:end="63:26">s</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:54">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="64:9" pos:end="242:15"><if pos:start="64:9" pos:end="242:15">if <condition pos:start="64:12" pos:end="64:20">(<expr pos:start="64:13" pos:end="64:19"><name pos:start="64:13" pos:end="64:15">ret</name> <operator pos:start="64:17" pos:end="64:17">&lt;</operator> <literal type="number" pos:start="64:19" pos:end="64:19">0</literal></expr>)</condition> <block pos:start="64:22" pos:end="242:15">{<block_content pos:start="65:13" pos:end="242:15">
            <expr_stmt pos:start="65:13" pos:end="66:39"><expr pos:start="65:13" pos:end="66:38"><call pos:start="65:13" pos:end="66:38"><name pos:start="65:13" pos:end="65:28">error_setg_errno</name><argument_list pos:start="65:29" pos:end="66:38">(<argument pos:start="65:30" pos:end="65:33"><expr pos:start="65:30" pos:end="65:33"><name pos:start="65:30" pos:end="65:33">errp</name></expr></argument>, <argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><operator pos:start="65:36" pos:end="65:36">-</operator><name pos:start="65:37" pos:end="65:39">ret</name></expr></argument>, <argument pos:start="65:42" pos:end="66:37"><expr pos:start="65:42" pos:end="66:37"><literal type="string" pos:start="65:42" pos:end="65:79">"Could not read unknown qcow2 header "</literal>
                             <literal type="string" pos:start="66:30" pos:end="66:37">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="67:5" pos:end="242:15"><if pos:start="67:5" pos:end="69:5">if <condition pos:start="67:8" pos:end="67:35">(<expr pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:14">header</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:34">backing_file_offset</name></name></expr>)</condition> <block pos:start="67:37" pos:end="69:5">{<block_content pos:start="68:9" pos:end="68:45">
        <expr_stmt pos:start="68:9" pos:end="68:45"><expr pos:start="68:9" pos:end="68:44"><name pos:start="68:9" pos:end="68:15">ext_end</name> <operator pos:start="68:17" pos:end="68:17">=</operator> <name pos:start="68:19" pos:end="68:44"><name pos:start="68:19" pos:end="68:24">header</name><operator pos:start="68:25" pos:end="68:25">.</operator><name pos:start="68:26" pos:end="68:44">backing_file_offset</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="69:7" pos:end="242:15">else <block pos:start="69:12" pos:end="242:15">{<block_content pos:start="70:9" pos:end="242:15">
        <expr_stmt pos:start="70:9" pos:end="70:43"><expr pos:start="70:9" pos:end="70:42"><name pos:start="70:9" pos:end="70:15">ext_end</name> <operator pos:start="70:17" pos:end="70:17">=</operator> <literal type="number" pos:start="70:19" pos:end="70:19">1</literal> <operator pos:start="70:21" pos:end="70:22">&lt;&lt;</operator> <name pos:start="70:24" pos:end="70:42"><name pos:start="70:24" pos:end="70:29">header</name><operator pos:start="70:30" pos:end="70:30">.</operator><name pos:start="70:31" pos:end="70:42">cluster_bits</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="71:5" pos:end="71:29">/* Handle feature bits */</comment>
    <expr_stmt pos:start="72:5" pos:end="72:63"><expr pos:start="72:5" pos:end="72:62"><name pos:start="72:5" pos:end="72:28"><name pos:start="72:5" pos:end="72:5">s</name><operator pos:start="72:6" pos:end="72:7">-&gt;</operator><name pos:start="72:8" pos:end="72:28">incompatible_features</name></name>    <operator pos:start="72:33" pos:end="72:33">=</operator> <name pos:start="72:35" pos:end="72:62"><name pos:start="72:35" pos:end="72:40">header</name><operator pos:start="72:41" pos:end="72:41">.</operator><name pos:start="72:42" pos:end="72:62">incompatible_features</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="73:5" pos:end="73:61"><expr pos:start="73:5" pos:end="73:60"><name pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:26">compatible_features</name></name>      <operator pos:start="73:33" pos:end="73:33">=</operator> <name pos:start="73:35" pos:end="73:60"><name pos:start="73:35" pos:end="73:40">header</name><operator pos:start="73:41" pos:end="73:41">.</operator><name pos:start="73:42" pos:end="73:60">compatible_features</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="74:5" pos:end="74:60"><expr pos:start="74:5" pos:end="74:59"><name pos:start="74:5" pos:end="74:25"><name pos:start="74:5" pos:end="74:5">s</name><operator pos:start="74:6" pos:end="74:7">-&gt;</operator><name pos:start="74:8" pos:end="74:25">autoclear_features</name></name>       <operator pos:start="74:33" pos:end="74:33">=</operator> <name pos:start="74:35" pos:end="74:59"><name pos:start="74:35" pos:end="74:40">header</name><operator pos:start="74:41" pos:end="74:41">.</operator><name pos:start="74:42" pos:end="74:59">autoclear_features</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="75:5" pos:end="242:15"><if pos:start="75:5" pos:end="242:15">if <condition pos:start="75:8" pos:end="75:56">(<expr pos:start="75:9" pos:end="75:55"><name pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:32">incompatible_features</name></name> <operator pos:start="75:34" pos:end="75:34">&amp;</operator> <operator pos:start="75:36" pos:end="75:36">~</operator><name pos:start="75:37" pos:end="75:55">QCOW2_INCOMPAT_MASK</name></expr>)</condition> <block pos:start="75:58" pos:end="242:15">{<block_content pos:start="76:9" pos:end="242:15">
        <decl_stmt pos:start="76:9" pos:end="76:35"><decl pos:start="76:9" pos:end="76:34"><type pos:start="76:9" pos:end="76:14"><name pos:start="76:9" pos:end="76:12">void</name> <modifier pos:start="76:14" pos:end="76:14">*</modifier></type><name pos:start="76:15" pos:end="76:27">feature_table</name> <init pos:start="76:29" pos:end="76:34">= <expr pos:start="76:31" pos:end="76:34"><name pos:start="76:31" pos:end="76:34">NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="77:9" pos:end="78:52"><expr pos:start="77:9" pos:end="78:51"><call pos:start="77:9" pos:end="78:51"><name pos:start="77:9" pos:end="77:29">qcow2_read_extensions</name><argument_list pos:start="77:30" pos:end="78:51">(<argument pos:start="77:31" pos:end="77:32"><expr pos:start="77:31" pos:end="77:32"><name pos:start="77:31" pos:end="77:32">bs</name></expr></argument>, <argument pos:start="77:35" pos:end="77:54"><expr pos:start="77:35" pos:end="77:54"><name pos:start="77:35" pos:end="77:54"><name pos:start="77:35" pos:end="77:40">header</name><operator pos:start="77:41" pos:end="77:41">.</operator><name pos:start="77:42" pos:end="77:54">header_length</name></name></expr></argument>, <argument pos:start="77:57" pos:end="77:63"><expr pos:start="77:57" pos:end="77:63"><name pos:start="77:57" pos:end="77:63">ext_end</name></expr></argument>,
                              <argument pos:start="78:31" pos:end="78:44"><expr pos:start="78:31" pos:end="78:44"><operator pos:start="78:31" pos:end="78:31">&amp;</operator><name pos:start="78:32" pos:end="78:44">feature_table</name></expr></argument>, <argument pos:start="78:47" pos:end="78:50"><expr pos:start="78:47" pos:end="78:50"><name pos:start="78:47" pos:end="78:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="79:9" pos:end="81:57"><expr pos:start="79:9" pos:end="81:56"><call pos:start="79:9" pos:end="81:56"><name pos:start="79:9" pos:end="79:34">report_unsupported_feature</name><argument_list pos:start="79:35" pos:end="81:56">(<argument pos:start="79:36" pos:end="79:37"><expr pos:start="79:36" pos:end="79:37"><name pos:start="79:36" pos:end="79:37">bs</name></expr></argument>, <argument pos:start="79:40" pos:end="79:43"><expr pos:start="79:40" pos:end="79:43"><name pos:start="79:40" pos:end="79:43">errp</name></expr></argument>, <argument pos:start="79:46" pos:end="79:58"><expr pos:start="79:46" pos:end="79:58"><name pos:start="79:46" pos:end="79:58">feature_table</name></expr></argument>,
                                   <argument pos:start="80:36" pos:end="81:55"><expr pos:start="80:36" pos:end="81:55"><name pos:start="80:36" pos:end="80:59"><name pos:start="80:36" pos:end="80:36">s</name><operator pos:start="80:37" pos:end="80:38">-&gt;</operator><name pos:start="80:39" pos:end="80:59">incompatible_features</name></name> <operator pos:start="80:61" pos:end="80:61">&amp;</operator>
                                   <operator pos:start="81:36" pos:end="81:36">~</operator><name pos:start="81:37" pos:end="81:55">QCOW2_INCOMPAT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="82:9" pos:end="82:23"><expr pos:start="82:9" pos:end="82:22"><name pos:start="82:9" pos:end="82:11">ret</name> <operator pos:start="82:13" pos:end="82:13">=</operator> <operator pos:start="82:15" pos:end="82:15">-</operator><name pos:start="82:16" pos:end="82:22">ENOTSUP</name></expr>;</expr_stmt>
        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><call pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:14">g_free</name><argument_list pos:start="83:15" pos:end="83:29">(<argument pos:start="83:16" pos:end="83:28"><expr pos:start="83:16" pos:end="83:28"><name pos:start="83:16" pos:end="83:28">feature_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="84:5" pos:end="242:15"><if pos:start="84:5" pos:end="242:15">if <condition pos:start="84:8" pos:end="84:58">(<expr pos:start="84:9" pos:end="84:57"><name pos:start="84:9" pos:end="84:32"><name pos:start="84:9" pos:end="84:9">s</name><operator pos:start="84:10" pos:end="84:11">-&gt;</operator><name pos:start="84:12" pos:end="84:32">incompatible_features</name></name> <operator pos:start="84:34" pos:end="84:34">&amp;</operator> <name pos:start="84:36" pos:end="84:57">QCOW2_INCOMPAT_CORRUPT</name></expr>)</condition> <block pos:start="84:60" pos:end="242:15">{<block_content pos:start="87:9" pos:end="242:15">
        <comment type="block" pos:start="85:9" pos:end="86:11">/* Corrupt images may not be written to unless they are being repaired
         */</comment>
        <if_stmt pos:start="87:9" pos:end="242:15"><if pos:start="87:9" pos:end="242:15">if <condition pos:start="87:12" pos:end="87:61">(<expr pos:start="87:13" pos:end="87:60"><operator pos:start="87:13" pos:end="87:13">(</operator><name pos:start="87:14" pos:end="87:18">flags</name> <operator pos:start="87:20" pos:end="87:20">&amp;</operator> <name pos:start="87:22" pos:end="87:32">BDRV_O_RDWR</name><operator pos:start="87:33" pos:end="87:33">)</operator> <operator pos:start="87:35" pos:end="87:36">&amp;&amp;</operator> <operator pos:start="87:38" pos:end="87:38">!</operator><operator pos:start="87:39" pos:end="87:39">(</operator><name pos:start="87:40" pos:end="87:44">flags</name> <operator pos:start="87:46" pos:end="87:46">&amp;</operator> <name pos:start="87:48" pos:end="87:59">BDRV_O_CHECK</name><operator pos:start="87:60" pos:end="87:60">)</operator></expr>)</condition> <block pos:start="87:63" pos:end="242:15">{<block_content pos:start="88:13" pos:end="242:15">
            <expr_stmt pos:start="88:13" pos:end="89:37"><expr pos:start="88:13" pos:end="89:36"><call pos:start="88:13" pos:end="89:36"><name pos:start="88:13" pos:end="88:22">error_setg</name><argument_list pos:start="88:23" pos:end="89:36">(<argument pos:start="88:24" pos:end="88:27"><expr pos:start="88:24" pos:end="88:27"><name pos:start="88:24" pos:end="88:27">errp</name></expr></argument>, <argument pos:start="88:30" pos:end="89:35"><expr pos:start="88:30" pos:end="89:35"><literal type="string" pos:start="88:30" pos:end="88:73">"qcow2: Image is corrupt; cannot be opened "</literal>
                       <literal type="string" pos:start="89:24" pos:end="89:35">"read/write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="90:13" pos:end="90:26"><expr pos:start="90:13" pos:end="90:25"><name pos:start="90:13" pos:end="90:15">ret</name> <operator pos:start="90:17" pos:end="90:17">=</operator> <operator pos:start="90:19" pos:end="90:19">-</operator><name pos:start="90:20" pos:end="90:25">EACCES</name></expr>;</expr_stmt>
    <comment type="block" pos:start="91:5" pos:end="91:49">/* Check support for various header values */</comment>
    <if_stmt pos:start="92:5" pos:end="242:15"><if pos:start="92:5" pos:end="242:15">if <condition pos:start="92:8" pos:end="92:35">(<expr pos:start="92:9" pos:end="92:34"><name pos:start="92:9" pos:end="92:29"><name pos:start="92:9" pos:end="92:14">header</name><operator pos:start="92:15" pos:end="92:15">.</operator><name pos:start="92:16" pos:end="92:29">refcount_order</name></name> <operator pos:start="92:31" pos:end="92:32">!=</operator> <literal type="number" pos:start="92:34" pos:end="92:34">4</literal></expr>)</condition> <block pos:start="92:37" pos:end="242:15">{<block_content pos:start="93:9" pos:end="242:15">
        <expr_stmt pos:start="93:9" pos:end="94:55"><expr pos:start="93:9" pos:end="94:54"><call pos:start="93:9" pos:end="94:54"><name pos:start="93:9" pos:end="93:26">report_unsupported</name><argument_list pos:start="93:27" pos:end="94:54">(<argument pos:start="93:28" pos:end="93:29"><expr pos:start="93:28" pos:end="93:29"><name pos:start="93:28" pos:end="93:29">bs</name></expr></argument>, <argument pos:start="93:32" pos:end="93:35"><expr pos:start="93:32" pos:end="93:35"><name pos:start="93:32" pos:end="93:35">errp</name></expr></argument>, <argument pos:start="93:38" pos:end="93:62"><expr pos:start="93:38" pos:end="93:62"><literal type="string" pos:start="93:38" pos:end="93:62">"%d bit reference counts"</literal></expr></argument>,
                           <argument pos:start="94:28" pos:end="94:53"><expr pos:start="94:28" pos:end="94:53"><literal type="number" pos:start="94:28" pos:end="94:28">1</literal> <operator pos:start="94:30" pos:end="94:31">&lt;&lt;</operator> <name pos:start="94:33" pos:end="94:53"><name pos:start="94:33" pos:end="94:38">header</name><operator pos:start="94:39" pos:end="94:39">.</operator><name pos:start="94:40" pos:end="94:53">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="95:9" pos:end="95:23"><expr pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <operator pos:start="95:15" pos:end="95:15">-</operator><name pos:start="95:16" pos:end="95:22">ENOTSUP</name></expr>;</expr_stmt>
    <expr_stmt pos:start="96:5" pos:end="96:46"><expr pos:start="96:5" pos:end="96:45"><name pos:start="96:5" pos:end="96:21"><name pos:start="96:5" pos:end="96:5">s</name><operator pos:start="96:6" pos:end="96:7">-&gt;</operator><name pos:start="96:8" pos:end="96:21">refcount_order</name></name> <operator pos:start="96:23" pos:end="96:23">=</operator> <name pos:start="96:25" pos:end="96:45"><name pos:start="96:25" pos:end="96:30">header</name><operator pos:start="96:31" pos:end="96:31">.</operator><name pos:start="96:32" pos:end="96:45">refcount_order</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="97:5" pos:end="242:15"><if pos:start="97:5" pos:end="242:15">if <condition pos:start="97:8" pos:end="97:45">(<expr pos:start="97:9" pos:end="97:44"><name pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:14">header</name><operator pos:start="97:15" pos:end="97:15">.</operator><name pos:start="97:16" pos:end="97:27">crypt_method</name></name> <operator pos:start="97:29" pos:end="97:29">&gt;</operator> <name pos:start="97:31" pos:end="97:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="97:47" pos:end="242:15">{<block_content pos:start="98:9" pos:end="242:15">
        <expr_stmt pos:start="98:9" pos:end="99:40"><expr pos:start="98:9" pos:end="99:39"><call pos:start="98:9" pos:end="99:39"><name pos:start="98:9" pos:end="98:18">error_setg</name><argument_list pos:start="98:19" pos:end="99:39">(<argument pos:start="98:20" pos:end="98:23"><expr pos:start="98:20" pos:end="98:23"><name pos:start="98:20" pos:end="98:23">errp</name></expr></argument>, <argument pos:start="98:26" pos:end="98:60"><expr pos:start="98:26" pos:end="98:60"><literal type="string" pos:start="98:26" pos:end="98:60">"Unsupported encryption method: %i"</literal></expr></argument>,
                   <argument pos:start="99:20" pos:end="99:38"><expr pos:start="99:20" pos:end="99:38"><name pos:start="99:20" pos:end="99:38"><name pos:start="99:20" pos:end="99:25">header</name><operator pos:start="99:26" pos:end="99:26">.</operator><name pos:start="99:27" pos:end="99:38">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:49"><expr pos:start="100:5" pos:end="100:48"><name pos:start="100:5" pos:end="100:26"><name pos:start="100:5" pos:end="100:5">s</name><operator pos:start="100:6" pos:end="100:7">-&gt;</operator><name pos:start="100:8" pos:end="100:26">crypt_method_header</name></name> <operator pos:start="100:28" pos:end="100:28">=</operator> <name pos:start="100:30" pos:end="100:48"><name pos:start="100:30" pos:end="100:35">header</name><operator pos:start="100:36" pos:end="100:36">.</operator><name pos:start="100:37" pos:end="100:48">crypt_method</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="101:5" pos:end="242:15"><if pos:start="101:5" pos:end="242:15">if <condition pos:start="101:8" pos:end="101:31">(<expr pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="101:33" pos:end="242:15">{<block_content pos:start="102:9" pos:end="242:15">
        <expr_stmt pos:start="102:9" pos:end="102:26"><expr pos:start="102:9" pos:end="102:25"><name pos:start="102:9" pos:end="102:21"><name pos:start="102:9" pos:end="102:10">bs</name><operator pos:start="102:11" pos:end="102:12">-&gt;</operator><name pos:start="102:13" pos:end="102:21">encrypted</name></name> <operator pos:start="102:23" pos:end="102:23">=</operator> <literal type="number" pos:start="102:25" pos:end="102:25">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:37"><expr pos:start="103:5" pos:end="103:36"><name pos:start="103:5" pos:end="103:14"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:14">l2_bits</name></name> <operator pos:start="103:16" pos:end="103:16">=</operator> <name pos:start="103:18" pos:end="103:32"><name pos:start="103:18" pos:end="103:18">s</name><operator pos:start="103:19" pos:end="103:20">-&gt;</operator><name pos:start="103:21" pos:end="103:32">cluster_bits</name></name> <operator pos:start="103:34" pos:end="103:34">-</operator> <literal type="number" pos:start="103:36" pos:end="103:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="103:39" pos:end="103:68">/* L2 is always one cluster */</comment>
    <expr_stmt pos:start="104:5" pos:end="104:33"><expr pos:start="104:5" pos:end="104:32"><name pos:start="104:5" pos:end="104:14"><name pos:start="104:5" pos:end="104:5">s</name><operator pos:start="104:6" pos:end="104:7">-&gt;</operator><name pos:start="104:8" pos:end="104:14">l2_size</name></name> <operator pos:start="104:16" pos:end="104:16">=</operator> <literal type="number" pos:start="104:18" pos:end="104:18">1</literal> <operator pos:start="104:20" pos:end="104:21">&lt;&lt;</operator> <name pos:start="104:23" pos:end="104:32"><name pos:start="104:23" pos:end="104:23">s</name><operator pos:start="104:24" pos:end="104:25">-&gt;</operator><name pos:start="104:26" pos:end="104:32">l2_bits</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:6">bs</name><operator pos:start="105:7" pos:end="105:8">-&gt;</operator><name pos:start="105:9" pos:end="105:21">total_sectors</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <name pos:start="105:25" pos:end="105:35"><name pos:start="105:25" pos:end="105:30">header</name><operator pos:start="105:31" pos:end="105:31">.</operator><name pos:start="105:32" pos:end="105:35">size</name></name> <operator pos:start="105:37" pos:end="105:37">/</operator> <literal type="number" pos:start="105:39" pos:end="105:41">512</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="106:5" pos:end="106:50"><expr pos:start="106:5" pos:end="106:49"><name pos:start="106:5" pos:end="106:18"><name pos:start="106:5" pos:end="106:5">s</name><operator pos:start="106:6" pos:end="106:7">-&gt;</operator><name pos:start="106:8" pos:end="106:18">csize_shift</name></name> <operator pos:start="106:20" pos:end="106:20">=</operator> <operator pos:start="106:22" pos:end="106:22">(</operator><literal type="number" pos:start="106:23" pos:end="106:26">62</literal> <operator pos:start="106:26" pos:end="106:26">-</operator> <operator pos:start="106:28" pos:end="106:28">(</operator><name pos:start="106:29" pos:end="106:43"><name pos:start="106:29" pos:end="106:29">s</name><operator pos:start="106:30" pos:end="106:31">-&gt;</operator><name pos:start="106:32" pos:end="106:43">cluster_bits</name></name> <operator pos:start="106:45" pos:end="106:45">-</operator> <literal type="number" pos:start="106:47" pos:end="106:47">8</literal><operator pos:start="106:48" pos:end="106:48">)</operator><operator pos:start="106:49" pos:end="106:49">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="107:5" pos:end="107:53"><expr pos:start="107:5" pos:end="107:52"><name pos:start="107:5" pos:end="107:17"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:17">csize_mask</name></name> <operator pos:start="107:19" pos:end="107:19">=</operator> <operator pos:start="107:21" pos:end="107:21">(</operator><literal type="number" pos:start="107:22" pos:end="107:22">1</literal> <operator pos:start="107:24" pos:end="107:25">&lt;&lt;</operator> <operator pos:start="107:27" pos:end="107:27">(</operator><name pos:start="107:28" pos:end="107:42"><name pos:start="107:28" pos:end="107:28">s</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:42">cluster_bits</name></name> <operator pos:start="107:44" pos:end="107:44">-</operator> <literal type="number" pos:start="107:46" pos:end="107:46">8</literal><operator pos:start="107:47" pos:end="107:47">)</operator><operator pos:start="107:48" pos:end="107:48">)</operator> <operator pos:start="107:50" pos:end="107:50">-</operator> <literal type="number" pos:start="107:52" pos:end="107:52">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="108:5" pos:end="108:57"><expr pos:start="108:5" pos:end="108:56"><name pos:start="108:5" pos:end="108:26"><name pos:start="108:5" pos:end="108:5">s</name><operator pos:start="108:6" pos:end="108:7">-&gt;</operator><name pos:start="108:8" pos:end="108:26">cluster_offset_mask</name></name> <operator pos:start="108:28" pos:end="108:28">=</operator> <operator pos:start="108:30" pos:end="108:30">(</operator><literal type="number" pos:start="108:31" pos:end="108:33">1LL</literal> <operator pos:start="108:35" pos:end="108:36">&lt;&lt;</operator> <name pos:start="108:38" pos:end="108:51"><name pos:start="108:38" pos:end="108:38">s</name><operator pos:start="108:39" pos:end="108:40">-&gt;</operator><name pos:start="108:41" pos:end="108:51">csize_shift</name></name><operator pos:start="108:52" pos:end="108:52">)</operator> <operator pos:start="108:54" pos:end="108:54">-</operator> <literal type="number" pos:start="108:56" pos:end="108:56">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="109:5" pos:end="109:60"><expr pos:start="109:5" pos:end="109:59"><name pos:start="109:5" pos:end="109:28"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:28">refcount_table_offset</name></name> <operator pos:start="109:30" pos:end="109:30">=</operator> <name pos:start="109:32" pos:end="109:59"><name pos:start="109:32" pos:end="109:37">header</name><operator pos:start="109:38" pos:end="109:38">.</operator><name pos:start="109:39" pos:end="109:59">refcount_table_offset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="110:5" pos:end="111:64"><expr pos:start="110:5" pos:end="111:63"><name pos:start="110:5" pos:end="110:26"><name pos:start="110:5" pos:end="110:5">s</name><operator pos:start="110:6" pos:end="110:7">-&gt;</operator><name pos:start="110:8" pos:end="110:26">refcount_table_size</name></name> <operator pos:start="110:28" pos:end="110:28">=</operator>
        <name pos:start="111:9" pos:end="111:38"><name pos:start="111:9" pos:end="111:14">header</name><operator pos:start="111:15" pos:end="111:15">.</operator><name pos:start="111:16" pos:end="111:38">refcount_table_clusters</name></name> <operator pos:start="111:40" pos:end="111:41">&lt;&lt;</operator> <operator pos:start="111:43" pos:end="111:43">(</operator><name pos:start="111:44" pos:end="111:58"><name pos:start="111:44" pos:end="111:44">s</name><operator pos:start="111:45" pos:end="111:46">-&gt;</operator><name pos:start="111:47" pos:end="111:58">cluster_bits</name></name> <operator pos:start="111:60" pos:end="111:60">-</operator> <literal type="number" pos:start="111:62" pos:end="111:62">3</literal><operator pos:start="111:63" pos:end="111:63">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="112:5" pos:end="112:50"><expr pos:start="112:5" pos:end="112:49"><name pos:start="112:5" pos:end="112:23"><name pos:start="112:5" pos:end="112:5">s</name><operator pos:start="112:6" pos:end="112:7">-&gt;</operator><name pos:start="112:8" pos:end="112:23">snapshots_offset</name></name> <operator pos:start="112:25" pos:end="112:25">=</operator> <name pos:start="112:27" pos:end="112:49"><name pos:start="112:27" pos:end="112:32">header</name><operator pos:start="112:33" pos:end="112:33">.</operator><name pos:start="112:34" pos:end="112:49">snapshots_offset</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="113:5" pos:end="113:42"><expr pos:start="113:5" pos:end="113:41"><name pos:start="113:5" pos:end="113:19"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:19">nb_snapshots</name></name> <operator pos:start="113:21" pos:end="113:21">=</operator> <name pos:start="113:23" pos:end="113:41"><name pos:start="113:23" pos:end="113:28">header</name><operator pos:start="113:29" pos:end="113:29">.</operator><name pos:start="113:30" pos:end="113:41">nb_snapshots</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="114:5" pos:end="114:32">/* read the level 1 table */</comment>
    <expr_stmt pos:start="115:5" pos:end="115:32"><expr pos:start="115:5" pos:end="115:31"><name pos:start="115:5" pos:end="115:14"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:14">l1_size</name></name> <operator pos:start="115:16" pos:end="115:16">=</operator> <name pos:start="115:18" pos:end="115:31"><name pos:start="115:18" pos:end="115:23">header</name><operator pos:start="115:24" pos:end="115:24">.</operator><name pos:start="115:25" pos:end="115:31">l1_size</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="116:5" pos:end="116:51"><expr pos:start="116:5" pos:end="116:50"><name pos:start="116:5" pos:end="116:21">l1_vm_state_index</name> <operator pos:start="116:23" pos:end="116:23">=</operator> <call pos:start="116:25" pos:end="116:50"><name pos:start="116:25" pos:end="116:34">size_to_l1</name><argument_list pos:start="116:35" pos:end="116:50">(<argument pos:start="116:36" pos:end="116:36"><expr pos:start="116:36" pos:end="116:36"><name pos:start="116:36" pos:end="116:36">s</name></expr></argument>, <argument pos:start="116:39" pos:end="116:49"><expr pos:start="116:39" pos:end="116:49"><name pos:start="116:39" pos:end="116:49"><name pos:start="116:39" pos:end="116:44">header</name><operator pos:start="116:45" pos:end="116:45">.</operator><name pos:start="116:46" pos:end="116:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="117:5" pos:end="242:15"><if pos:start="117:5" pos:end="242:15">if <condition pos:start="117:8" pos:end="117:36">(<expr pos:start="117:9" pos:end="117:35"><name pos:start="117:9" pos:end="117:25">l1_vm_state_index</name> <operator pos:start="117:27" pos:end="117:27">&gt;</operator> <name pos:start="117:29" pos:end="117:35">INT_MAX</name></expr>)</condition> <block pos:start="117:38" pos:end="242:15">{<block_content pos:start="118:9" pos:end="242:15">
        <expr_stmt pos:start="118:9" pos:end="118:45"><expr pos:start="118:9" pos:end="118:44"><call pos:start="118:9" pos:end="118:44"><name pos:start="118:9" pos:end="118:18">error_setg</name><argument_list pos:start="118:19" pos:end="118:44">(<argument pos:start="118:20" pos:end="118:23"><expr pos:start="118:20" pos:end="118:23"><name pos:start="118:20" pos:end="118:23">errp</name></expr></argument>, <argument pos:start="118:26" pos:end="118:43"><expr pos:start="118:26" pos:end="118:43"><literal type="string" pos:start="118:26" pos:end="118:43">"Image is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="119:9" pos:end="119:21"><expr pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <operator pos:start="119:15" pos:end="119:15">-</operator><name pos:start="119:16" pos:end="119:20">EFBIG</name></expr>;</expr_stmt>
    <expr_stmt pos:start="120:5" pos:end="120:45"><expr pos:start="120:5" pos:end="120:44"><name pos:start="120:5" pos:end="120:24"><name pos:start="120:5" pos:end="120:5">s</name><operator pos:start="120:6" pos:end="120:7">-&gt;</operator><name pos:start="120:8" pos:end="120:24">l1_vm_state_index</name></name> <operator pos:start="120:26" pos:end="120:26">=</operator> <name pos:start="120:28" pos:end="120:44">l1_vm_state_index</name></expr>;</expr_stmt>
    <comment type="block" pos:start="121:5" pos:end="122:27">/* the L1 table must contain at least enough entries to put
       header.size bytes */</comment>
    <if_stmt pos:start="123:5" pos:end="242:15"><if pos:start="123:5" pos:end="242:15">if <condition pos:start="123:8" pos:end="123:42">(<expr pos:start="123:9" pos:end="123:41"><name pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:18">l1_size</name></name> <operator pos:start="123:20" pos:end="123:20">&lt;</operator> <name pos:start="123:22" pos:end="123:41"><name pos:start="123:22" pos:end="123:22">s</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:41">l1_vm_state_index</name></name></expr>)</condition> <block pos:start="123:44" pos:end="242:15">{<block_content pos:start="124:9" pos:end="242:15">
        <expr_stmt pos:start="124:9" pos:end="124:50"><expr pos:start="124:9" pos:end="124:49"><call pos:start="124:9" pos:end="124:49"><name pos:start="124:9" pos:end="124:18">error_setg</name><argument_list pos:start="124:19" pos:end="124:49">(<argument pos:start="124:20" pos:end="124:23"><expr pos:start="124:20" pos:end="124:23"><name pos:start="124:20" pos:end="124:23">errp</name></expr></argument>, <argument pos:start="124:26" pos:end="124:48"><expr pos:start="124:26" pos:end="124:48"><literal type="string" pos:start="124:26" pos:end="124:48">"L1 table is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="125:5" pos:end="125:48"><expr pos:start="125:5" pos:end="125:47"><name pos:start="125:5" pos:end="125:22"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:22">l1_table_offset</name></name> <operator pos:start="125:24" pos:end="125:24">=</operator> <name pos:start="125:26" pos:end="125:47"><name pos:start="125:26" pos:end="125:31">header</name><operator pos:start="125:32" pos:end="125:32">.</operator><name pos:start="125:33" pos:end="125:47">l1_table_offset</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="126:5" pos:end="242:15"><if pos:start="126:5" pos:end="242:15">if <condition pos:start="126:8" pos:end="126:23">(<expr pos:start="126:9" pos:end="126:22"><name pos:start="126:9" pos:end="126:18"><name pos:start="126:9" pos:end="126:9">s</name><operator pos:start="126:10" pos:end="126:11">-&gt;</operator><name pos:start="126:12" pos:end="126:18">l1_size</name></name> <operator pos:start="126:20" pos:end="126:20">&gt;</operator> <literal type="number" pos:start="126:22" pos:end="126:22">0</literal></expr>)</condition> <block pos:start="126:25" pos:end="242:15">{<block_content pos:start="127:9" pos:end="242:15">
        <expr_stmt pos:start="127:9" pos:end="128:62"><expr pos:start="127:9" pos:end="128:61"><name pos:start="127:9" pos:end="127:19"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:19">l1_table</name></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="128:61"><name pos:start="127:23" pos:end="127:31">g_malloc0</name><argument_list pos:start="127:32" pos:end="128:61">(
            <argument pos:start="128:13" pos:end="128:60"><expr pos:start="128:13" pos:end="128:60"><call pos:start="128:13" pos:end="128:60"><name pos:start="128:13" pos:end="128:24">align_offset</name><argument_list pos:start="128:25" pos:end="128:60">(<argument pos:start="128:26" pos:end="128:54"><expr pos:start="128:26" pos:end="128:54"><name pos:start="128:26" pos:end="128:35"><name pos:start="128:26" pos:end="128:26">s</name><operator pos:start="128:27" pos:end="128:28">-&gt;</operator><name pos:start="128:29" pos:end="128:35">l1_size</name></name> <operator pos:start="128:37" pos:end="128:37">*</operator> <sizeof pos:start="128:39" pos:end="128:54">sizeof<argument_list pos:start="128:45" pos:end="128:54">(<argument pos:start="128:46" pos:end="128:53"><expr pos:start="128:46" pos:end="128:53"><name pos:start="128:46" pos:end="128:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="128:57" pos:end="128:59"><expr pos:start="128:57" pos:end="128:59"><literal type="number" pos:start="128:57" pos:end="128:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="129:9" pos:end="130:56"><expr pos:start="129:9" pos:end="130:55"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="130:55"><name pos:start="129:15" pos:end="129:24">bdrv_pread</name><argument_list pos:start="129:25" pos:end="130:55">(<argument pos:start="129:26" pos:end="129:33"><expr pos:start="129:26" pos:end="129:33"><name pos:start="129:26" pos:end="129:33"><name pos:start="129:26" pos:end="129:27">bs</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:33">file</name></name></expr></argument>, <argument pos:start="129:36" pos:end="129:53"><expr pos:start="129:36" pos:end="129:53"><name pos:start="129:36" pos:end="129:53"><name pos:start="129:36" pos:end="129:36">s</name><operator pos:start="129:37" pos:end="129:38">-&gt;</operator><name pos:start="129:39" pos:end="129:53">l1_table_offset</name></name></expr></argument>, <argument pos:start="129:56" pos:end="129:66"><expr pos:start="129:56" pos:end="129:66"><name pos:start="129:56" pos:end="129:66"><name pos:start="129:56" pos:end="129:56">s</name><operator pos:start="129:57" pos:end="129:58">-&gt;</operator><name pos:start="129:59" pos:end="129:66">l1_table</name></name></expr></argument>,
                         <argument pos:start="130:26" pos:end="130:54"><expr pos:start="130:26" pos:end="130:54"><name pos:start="130:26" pos:end="130:35"><name pos:start="130:26" pos:end="130:26">s</name><operator pos:start="130:27" pos:end="130:28">-&gt;</operator><name pos:start="130:29" pos:end="130:35">l1_size</name></name> <operator pos:start="130:37" pos:end="130:37">*</operator> <sizeof pos:start="130:39" pos:end="130:54">sizeof<argument_list pos:start="130:45" pos:end="130:54">(<argument pos:start="130:46" pos:end="130:53"><expr pos:start="130:46" pos:end="130:53"><name pos:start="130:46" pos:end="130:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="131:9" pos:end="242:15"><if pos:start="131:9" pos:end="242:15">if <condition pos:start="131:12" pos:end="131:20">(<expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">&lt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition> <block pos:start="131:22" pos:end="242:15">{<block_content pos:start="132:13" pos:end="242:15">
            <expr_stmt pos:start="132:13" pos:end="132:68"><expr pos:start="132:13" pos:end="132:67"><call pos:start="132:13" pos:end="132:67"><name pos:start="132:13" pos:end="132:28">error_setg_errno</name><argument_list pos:start="132:29" pos:end="132:67">(<argument pos:start="132:30" pos:end="132:33"><expr pos:start="132:30" pos:end="132:33"><name pos:start="132:30" pos:end="132:33">errp</name></expr></argument>, <argument pos:start="132:36" pos:end="132:39"><expr pos:start="132:36" pos:end="132:39"><operator pos:start="132:36" pos:end="132:36">-</operator><name pos:start="132:37" pos:end="132:39">ret</name></expr></argument>, <argument pos:start="132:42" pos:end="132:66"><expr pos:start="132:42" pos:end="132:66"><literal type="string" pos:start="132:42" pos:end="132:66">"Could not read L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="133:9" pos:end="242:15">for<control pos:start="133:12" pos:end="133:38">(<init pos:start="133:13" pos:end="133:18"><expr pos:start="133:13" pos:end="133:17"><name pos:start="133:13" pos:end="133:13">i</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <literal type="number" pos:start="133:17" pos:end="133:17">0</literal></expr>;</init><condition pos:start="133:19" pos:end="133:33"><expr pos:start="133:19" pos:end="133:32"><name pos:start="133:19" pos:end="133:19">i</name> <operator pos:start="133:21" pos:end="133:21">&lt;</operator> <name pos:start="133:23" pos:end="133:32"><name pos:start="133:23" pos:end="133:23">s</name><operator pos:start="133:24" pos:end="133:25">-&gt;</operator><name pos:start="133:26" pos:end="133:32">l1_size</name></name></expr>;</condition> <incr pos:start="133:35" pos:end="133:37"><expr pos:start="133:35" pos:end="133:37"><name pos:start="133:35" pos:end="133:35">i</name><operator pos:start="133:36" pos:end="133:37">++</operator></expr></incr>)</control> <block pos:start="133:40" pos:end="242:15">{<block_content pos:start="134:13" pos:end="242:15">
            <expr_stmt pos:start="134:13" pos:end="134:42"><expr pos:start="134:13" pos:end="134:41"><call pos:start="134:13" pos:end="134:41"><name pos:start="134:13" pos:end="134:24">be64_to_cpus</name><argument_list pos:start="134:25" pos:end="134:41">(<argument pos:start="134:26" pos:end="134:40"><expr pos:start="134:26" pos:end="134:40"><operator pos:start="134:26" pos:end="134:26">&amp;</operator><name pos:start="134:27" pos:end="134:40"><name pos:start="134:27" pos:end="134:27">s</name><operator pos:start="134:28" pos:end="134:29">-&gt;</operator><name pos:start="134:30" pos:end="134:37">l1_table</name><index pos:start="134:38" pos:end="134:40">[<expr pos:start="134:39" pos:end="134:39"><name pos:start="134:39" pos:end="134:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="135:5" pos:end="135:45">/* alloc L2 table/refcount block cache */</comment>
    <expr_stmt pos:start="136:5" pos:end="136:62"><expr pos:start="136:5" pos:end="136:61"><name pos:start="136:5" pos:end="136:21"><name pos:start="136:5" pos:end="136:5">s</name><operator pos:start="136:6" pos:end="136:7">-&gt;</operator><name pos:start="136:8" pos:end="136:21">l2_table_cache</name></name> <operator pos:start="136:23" pos:end="136:23">=</operator> <call pos:start="136:25" pos:end="136:61"><name pos:start="136:25" pos:end="136:42">qcow2_cache_create</name><argument_list pos:start="136:43" pos:end="136:61">(<argument pos:start="136:44" pos:end="136:45"><expr pos:start="136:44" pos:end="136:45"><name pos:start="136:44" pos:end="136:45">bs</name></expr></argument>, <argument pos:start="136:48" pos:end="136:60"><expr pos:start="136:48" pos:end="136:60"><name pos:start="136:48" pos:end="136:60">L2_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="137:5" pos:end="137:74"><expr pos:start="137:5" pos:end="137:73"><name pos:start="137:5" pos:end="137:27"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:27">refcount_block_cache</name></name> <operator pos:start="137:29" pos:end="137:29">=</operator> <call pos:start="137:31" pos:end="137:73"><name pos:start="137:31" pos:end="137:48">qcow2_cache_create</name><argument_list pos:start="137:49" pos:end="137:73">(<argument pos:start="137:50" pos:end="137:51"><expr pos:start="137:50" pos:end="137:51"><name pos:start="137:50" pos:end="137:51">bs</name></expr></argument>, <argument pos:start="137:54" pos:end="137:72"><expr pos:start="137:54" pos:end="137:72"><name pos:start="137:54" pos:end="137:72">REFCOUNT_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="138:5" pos:end="138:49"><expr pos:start="138:5" pos:end="138:48"><name pos:start="138:5" pos:end="138:20"><name pos:start="138:5" pos:end="138:5">s</name><operator pos:start="138:6" pos:end="138:7">-&gt;</operator><name pos:start="138:8" pos:end="138:20">cluster_cache</name></name> <operator pos:start="138:22" pos:end="138:22">=</operator> <call pos:start="138:24" pos:end="138:48"><name pos:start="138:24" pos:end="138:31">g_malloc</name><argument_list pos:start="138:32" pos:end="138:48">(<argument pos:start="138:33" pos:end="138:47"><expr pos:start="138:33" pos:end="138:47"><name pos:start="138:33" pos:end="138:47"><name pos:start="138:33" pos:end="138:33">s</name><operator pos:start="138:34" pos:end="138:35">-&gt;</operator><name pos:start="138:36" pos:end="138:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="139:5" pos:end="139:57">/* one more sector for decompressed data alignment */</comment>
    <expr_stmt pos:start="140:5" pos:end="141:41"><expr pos:start="140:5" pos:end="141:40"><name pos:start="140:5" pos:end="140:19"><name pos:start="140:5" pos:end="140:5">s</name><operator pos:start="140:6" pos:end="140:7">-&gt;</operator><name pos:start="140:8" pos:end="140:19">cluster_data</name></name> <operator pos:start="140:21" pos:end="140:21">=</operator> <call pos:start="140:23" pos:end="141:40"><name pos:start="140:23" pos:end="140:37">qemu_blockalign</name><argument_list pos:start="140:38" pos:end="141:40">(<argument pos:start="140:39" pos:end="140:40"><expr pos:start="140:39" pos:end="140:40"><name pos:start="140:39" pos:end="140:40">bs</name></expr></argument>, <argument pos:start="140:43" pos:end="141:39"><expr pos:start="140:43" pos:end="141:39"><name pos:start="140:43" pos:end="140:65">QCOW_MAX_CRYPT_CLUSTERS</name> <operator pos:start="140:67" pos:end="140:67">*</operator> <name pos:start="140:69" pos:end="140:83"><name pos:start="140:69" pos:end="140:69">s</name><operator pos:start="140:70" pos:end="140:71">-&gt;</operator><name pos:start="140:72" pos:end="140:83">cluster_size</name></name>
                                  <operator pos:start="141:35" pos:end="141:35">+</operator> <literal type="number" pos:start="141:37" pos:end="141:39">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="142:5" pos:end="142:33"><expr pos:start="142:5" pos:end="142:32"><name pos:start="142:5" pos:end="142:27"><name pos:start="142:5" pos:end="142:5">s</name><operator pos:start="142:6" pos:end="142:7">-&gt;</operator><name pos:start="142:8" pos:end="142:27">cluster_cache_offset</name></name> <operator pos:start="142:29" pos:end="142:29">=</operator> <operator pos:start="142:31" pos:end="142:31">-</operator><literal type="number" pos:start="142:32" pos:end="142:32">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="143:5" pos:end="143:21"><expr pos:start="143:5" pos:end="143:20"><name pos:start="143:5" pos:end="143:12"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:12">flags</name></name> <operator pos:start="143:14" pos:end="143:14">=</operator> <name pos:start="143:16" pos:end="143:20">flags</name></expr>;</expr_stmt>
    <expr_stmt pos:start="144:5" pos:end="144:34"><expr pos:start="144:5" pos:end="144:33"><name pos:start="144:5" pos:end="144:7">ret</name> <operator pos:start="144:9" pos:end="144:9">=</operator> <call pos:start="144:11" pos:end="144:33"><name pos:start="144:11" pos:end="144:29">qcow2_refcount_init</name><argument_list pos:start="144:30" pos:end="144:33">(<argument pos:start="144:31" pos:end="144:32"><expr pos:start="144:31" pos:end="144:32"><name pos:start="144:31" pos:end="144:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="145:5" pos:end="242:15"><if pos:start="145:5" pos:end="242:15">if <condition pos:start="145:8" pos:end="145:17">(<expr pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:14">!=</operator> <literal type="number" pos:start="145:16" pos:end="145:16">0</literal></expr>)</condition> <block pos:start="145:19" pos:end="242:15">{<block_content pos:start="146:9" pos:end="242:15">
        <expr_stmt pos:start="146:9" pos:end="146:79"><expr pos:start="146:9" pos:end="146:78"><call pos:start="146:9" pos:end="146:78"><name pos:start="146:9" pos:end="146:24">error_setg_errno</name><argument_list pos:start="146:25" pos:end="146:78">(<argument pos:start="146:26" pos:end="146:29"><expr pos:start="146:26" pos:end="146:29"><name pos:start="146:26" pos:end="146:29">errp</name></expr></argument>, <argument pos:start="146:32" pos:end="146:35"><expr pos:start="146:32" pos:end="146:35"><operator pos:start="146:32" pos:end="146:32">-</operator><name pos:start="146:33" pos:end="146:35">ret</name></expr></argument>, <argument pos:start="146:38" pos:end="146:77"><expr pos:start="146:38" pos:end="146:77"><literal type="string" pos:start="146:38" pos:end="146:77">"Could not initialize refcount handling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="147:5" pos:end="147:35"><expr pos:start="147:5" pos:end="147:34"><call pos:start="147:5" pos:end="147:34"><name pos:start="147:5" pos:end="147:14">QLIST_INIT</name><argument_list pos:start="147:15" pos:end="147:34">(<argument pos:start="147:16" pos:end="147:33"><expr pos:start="147:16" pos:end="147:33"><operator pos:start="147:16" pos:end="147:16">&amp;</operator><name pos:start="147:17" pos:end="147:33"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:33">cluster_allocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="148:5" pos:end="148:30"><expr pos:start="148:5" pos:end="148:29"><call pos:start="148:5" pos:end="148:29"><name pos:start="148:5" pos:end="148:15">QTAILQ_INIT</name><argument_list pos:start="148:16" pos:end="148:29">(<argument pos:start="148:17" pos:end="148:28"><expr pos:start="148:17" pos:end="148:28"><operator pos:start="148:17" pos:end="148:17">&amp;</operator><name pos:start="148:18" pos:end="148:28"><name pos:start="148:18" pos:end="148:18">s</name><operator pos:start="148:19" pos:end="148:20">-&gt;</operator><name pos:start="148:21" pos:end="148:28">discards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="149:5" pos:end="149:31">/* read qcow2 extensions */</comment>
    <if_stmt pos:start="150:5" pos:end="242:15"><if pos:start="150:5" pos:end="242:15">if <condition pos:start="150:8" pos:end="151:20">(<expr pos:start="150:9" pos:end="151:19"><call pos:start="150:9" pos:end="151:19"><name pos:start="150:9" pos:end="150:29">qcow2_read_extensions</name><argument_list pos:start="150:30" pos:end="151:19">(<argument pos:start="150:31" pos:end="150:32"><expr pos:start="150:31" pos:end="150:32"><name pos:start="150:31" pos:end="150:32">bs</name></expr></argument>, <argument pos:start="150:35" pos:end="150:54"><expr pos:start="150:35" pos:end="150:54"><name pos:start="150:35" pos:end="150:54"><name pos:start="150:35" pos:end="150:40">header</name><operator pos:start="150:41" pos:end="150:41">.</operator><name pos:start="150:42" pos:end="150:54">header_length</name></name></expr></argument>, <argument pos:start="150:57" pos:end="150:63"><expr pos:start="150:57" pos:end="150:63"><name pos:start="150:57" pos:end="150:63">ext_end</name></expr></argument>, <argument pos:start="150:66" pos:end="150:69"><expr pos:start="150:66" pos:end="150:69"><name pos:start="150:66" pos:end="150:69">NULL</name></expr></argument>,
        <argument pos:start="151:9" pos:end="151:18"><expr pos:start="151:9" pos:end="151:18"><operator pos:start="151:9" pos:end="151:9">&amp;</operator><name pos:start="151:10" pos:end="151:18">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:22" pos:end="242:15">{<block_content pos:start="152:9" pos:end="242:15">
        <expr_stmt pos:start="152:9" pos:end="152:41"><expr pos:start="152:9" pos:end="152:40"><call pos:start="152:9" pos:end="152:40"><name pos:start="152:9" pos:end="152:23">error_propagate</name><argument_list pos:start="152:24" pos:end="152:40">(<argument pos:start="152:25" pos:end="152:28"><expr pos:start="152:25" pos:end="152:28"><name pos:start="152:25" pos:end="152:28">errp</name></expr></argument>, <argument pos:start="152:31" pos:end="152:39"><expr pos:start="152:31" pos:end="152:39"><name pos:start="152:31" pos:end="152:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="153:5" pos:end="153:36">/* read the backing file name */</comment>
    <if_stmt pos:start="154:5" pos:end="242:15"><if pos:start="154:5" pos:end="242:15">if <condition pos:start="154:8" pos:end="154:40">(<expr pos:start="154:9" pos:end="154:39"><name pos:start="154:9" pos:end="154:34"><name pos:start="154:9" pos:end="154:14">header</name><operator pos:start="154:15" pos:end="154:15">.</operator><name pos:start="154:16" pos:end="154:34">backing_file_offset</name></name> <operator pos:start="154:36" pos:end="154:37">!=</operator> <literal type="number" pos:start="154:39" pos:end="154:39">0</literal></expr>)</condition> <block pos:start="154:42" pos:end="242:15">{<block_content pos:start="155:9" pos:end="242:15">
        <expr_stmt pos:start="155:9" pos:end="155:39"><expr pos:start="155:9" pos:end="155:38"><name pos:start="155:9" pos:end="155:11">len</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <name pos:start="155:15" pos:end="155:38"><name pos:start="155:15" pos:end="155:20">header</name><operator pos:start="155:21" pos:end="155:21">.</operator><name pos:start="155:22" pos:end="155:38">backing_file_size</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="156:9" pos:end="242:15"><if pos:start="156:9" pos:end="242:15">if <condition pos:start="156:12" pos:end="156:23">(<expr pos:start="156:13" pos:end="156:22"><name pos:start="156:13" pos:end="156:15">len</name> <operator pos:start="156:17" pos:end="156:17">&gt;</operator> <literal type="number" pos:start="156:19" pos:end="156:22">1023</literal></expr>)</condition> <block pos:start="156:25" pos:end="242:15">{<block_content pos:start="157:13" pos:end="242:15">
            <expr_stmt pos:start="157:13" pos:end="157:23"><expr pos:start="157:13" pos:end="157:22"><name pos:start="157:13" pos:end="157:15">len</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <literal type="number" pos:start="157:19" pos:end="157:22">1023</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="158:9" pos:end="159:48"><expr pos:start="158:9" pos:end="159:47"><name pos:start="158:9" pos:end="158:11">ret</name> <operator pos:start="158:13" pos:end="158:13">=</operator> <call pos:start="158:15" pos:end="159:47"><name pos:start="158:15" pos:end="158:24">bdrv_pread</name><argument_list pos:start="158:25" pos:end="159:47">(<argument pos:start="158:26" pos:end="158:33"><expr pos:start="158:26" pos:end="158:33"><name pos:start="158:26" pos:end="158:33"><name pos:start="158:26" pos:end="158:27">bs</name><operator pos:start="158:28" pos:end="158:29">-&gt;</operator><name pos:start="158:30" pos:end="158:33">file</name></name></expr></argument>, <argument pos:start="158:36" pos:end="158:61"><expr pos:start="158:36" pos:end="158:61"><name pos:start="158:36" pos:end="158:61"><name pos:start="158:36" pos:end="158:41">header</name><operator pos:start="158:42" pos:end="158:42">.</operator><name pos:start="158:43" pos:end="158:61">backing_file_offset</name></name></expr></argument>,
                         <argument pos:start="159:26" pos:end="159:41"><expr pos:start="159:26" pos:end="159:41"><name pos:start="159:26" pos:end="159:41"><name pos:start="159:26" pos:end="159:27">bs</name><operator pos:start="159:28" pos:end="159:29">-&gt;</operator><name pos:start="159:30" pos:end="159:41">backing_file</name></name></expr></argument>, <argument pos:start="159:44" pos:end="159:46"><expr pos:start="159:44" pos:end="159:46"><name pos:start="159:44" pos:end="159:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="160:9" pos:end="242:15"><if pos:start="160:9" pos:end="242:15">if <condition pos:start="160:12" pos:end="160:20">(<expr pos:start="160:13" pos:end="160:19"><name pos:start="160:13" pos:end="160:15">ret</name> <operator pos:start="160:17" pos:end="160:17">&lt;</operator> <literal type="number" pos:start="160:19" pos:end="160:19">0</literal></expr>)</condition> <block pos:start="160:22" pos:end="242:15">{<block_content pos:start="161:13" pos:end="242:15">
            <expr_stmt pos:start="161:13" pos:end="161:77"><expr pos:start="161:13" pos:end="161:76"><call pos:start="161:13" pos:end="161:76"><name pos:start="161:13" pos:end="161:28">error_setg_errno</name><argument_list pos:start="161:29" pos:end="161:76">(<argument pos:start="161:30" pos:end="161:33"><expr pos:start="161:30" pos:end="161:33"><name pos:start="161:30" pos:end="161:33">errp</name></expr></argument>, <argument pos:start="161:36" pos:end="161:39"><expr pos:start="161:36" pos:end="161:39"><operator pos:start="161:36" pos:end="161:36">-</operator><name pos:start="161:37" pos:end="161:39">ret</name></expr></argument>, <argument pos:start="161:42" pos:end="161:75"><expr pos:start="161:42" pos:end="161:75"><literal type="string" pos:start="161:42" pos:end="161:75">"Could not read backing file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="162:9" pos:end="162:37"><expr pos:start="162:9" pos:end="162:36"><name pos:start="162:9" pos:end="162:29"><name pos:start="162:9" pos:end="162:10">bs</name><operator pos:start="162:11" pos:end="162:12">-&gt;</operator><name pos:start="162:13" pos:end="162:24">backing_file</name><index pos:start="162:25" pos:end="162:29">[<expr pos:start="162:26" pos:end="162:28"><name pos:start="162:26" pos:end="162:28">len</name></expr>]</index></name> <operator pos:start="162:31" pos:end="162:31">=</operator> <literal type="char" pos:start="162:33" pos:end="162:36">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="163:5" pos:end="163:35"><expr pos:start="163:5" pos:end="163:34"><name pos:start="163:5" pos:end="163:7">ret</name> <operator pos:start="163:9" pos:end="163:9">=</operator> <call pos:start="163:11" pos:end="163:34"><name pos:start="163:11" pos:end="163:30">qcow2_read_snapshots</name><argument_list pos:start="163:31" pos:end="163:34">(<argument pos:start="163:32" pos:end="163:33"><expr pos:start="163:32" pos:end="163:33"><name pos:start="163:32" pos:end="163:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="164:5" pos:end="242:15"><if pos:start="164:5" pos:end="242:15">if <condition pos:start="164:8" pos:end="164:16">(<expr pos:start="164:9" pos:end="164:15"><name pos:start="164:9" pos:end="164:11">ret</name> <operator pos:start="164:13" pos:end="164:13">&lt;</operator> <literal type="number" pos:start="164:15" pos:end="164:15">0</literal></expr>)</condition> <block pos:start="164:18" pos:end="242:15">{<block_content pos:start="165:9" pos:end="242:15">
        <expr_stmt pos:start="165:9" pos:end="165:65"><expr pos:start="165:9" pos:end="165:64"><call pos:start="165:9" pos:end="165:64"><name pos:start="165:9" pos:end="165:24">error_setg_errno</name><argument_list pos:start="165:25" pos:end="165:64">(<argument pos:start="165:26" pos:end="165:29"><expr pos:start="165:26" pos:end="165:29"><name pos:start="165:26" pos:end="165:29">errp</name></expr></argument>, <argument pos:start="165:32" pos:end="165:35"><expr pos:start="165:32" pos:end="165:35"><operator pos:start="165:32" pos:end="165:32">-</operator><name pos:start="165:33" pos:end="165:35">ret</name></expr></argument>, <argument pos:start="165:38" pos:end="165:63"><expr pos:start="165:38" pos:end="165:63"><literal type="string" pos:start="165:38" pos:end="165:63">"Could not read snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="166:5" pos:end="166:46">/* Clear unknown autoclear feature bits */</comment>
    <if_stmt pos:start="167:5" pos:end="242:15"><if pos:start="167:5" pos:end="242:15">if <condition pos:start="167:8" pos:end="167:78">(<expr pos:start="167:9" pos:end="167:77"><operator pos:start="167:9" pos:end="167:9">!</operator><name pos:start="167:10" pos:end="167:22"><name pos:start="167:10" pos:end="167:11">bs</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:22">read_only</name></name> <operator pos:start="167:24" pos:end="167:25">&amp;&amp;</operator> <operator pos:start="167:27" pos:end="167:27">!</operator><operator pos:start="167:28" pos:end="167:28">(</operator><name pos:start="167:29" pos:end="167:33">flags</name> <operator pos:start="167:35" pos:end="167:35">&amp;</operator> <name pos:start="167:37" pos:end="167:51">BDRV_O_INCOMING</name><operator pos:start="167:52" pos:end="167:52">)</operator> <operator pos:start="167:54" pos:end="167:55">&amp;&amp;</operator> <name pos:start="167:57" pos:end="167:77"><name pos:start="167:57" pos:end="167:57">s</name><operator pos:start="167:58" pos:end="167:59">-&gt;</operator><name pos:start="167:60" pos:end="167:77">autoclear_features</name></name></expr>)</condition> <block pos:start="167:80" pos:end="242:15">{<block_content pos:start="168:9" pos:end="242:15">
        <expr_stmt pos:start="168:9" pos:end="168:34"><expr pos:start="168:9" pos:end="168:33"><name pos:start="168:9" pos:end="168:29"><name pos:start="168:9" pos:end="168:9">s</name><operator pos:start="168:10" pos:end="168:11">-&gt;</operator><name pos:start="168:12" pos:end="168:29">autoclear_features</name></name> <operator pos:start="168:31" pos:end="168:31">=</operator> <literal type="number" pos:start="168:33" pos:end="168:33">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="169:9" pos:end="169:38"><expr pos:start="169:9" pos:end="169:37"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:37"><name pos:start="169:15" pos:end="169:33">qcow2_update_header</name><argument_list pos:start="169:34" pos:end="169:37">(<argument pos:start="169:35" pos:end="169:36"><expr pos:start="169:35" pos:end="169:36"><name pos:start="169:35" pos:end="169:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="170:9" pos:end="242:15"><if pos:start="170:9" pos:end="242:15">if <condition pos:start="170:12" pos:end="170:20">(<expr pos:start="170:13" pos:end="170:19"><name pos:start="170:13" pos:end="170:15">ret</name> <operator pos:start="170:17" pos:end="170:17">&lt;</operator> <literal type="number" pos:start="170:19" pos:end="170:19">0</literal></expr>)</condition> <block pos:start="170:22" pos:end="242:15">{<block_content pos:start="171:13" pos:end="242:15">
            <expr_stmt pos:start="171:13" pos:end="171:74"><expr pos:start="171:13" pos:end="171:73"><call pos:start="171:13" pos:end="171:73"><name pos:start="171:13" pos:end="171:28">error_setg_errno</name><argument_list pos:start="171:29" pos:end="171:73">(<argument pos:start="171:30" pos:end="171:33"><expr pos:start="171:30" pos:end="171:33"><name pos:start="171:30" pos:end="171:33">errp</name></expr></argument>, <argument pos:start="171:36" pos:end="171:39"><expr pos:start="171:36" pos:end="171:39"><operator pos:start="171:36" pos:end="171:36">-</operator><name pos:start="171:37" pos:end="171:39">ret</name></expr></argument>, <argument pos:start="171:42" pos:end="171:72"><expr pos:start="171:42" pos:end="171:72"><literal type="string" pos:start="171:42" pos:end="171:72">"Could not update qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="172:5" pos:end="172:26">/* Initialise locks */</comment>
    <expr_stmt pos:start="173:5" pos:end="173:33"><expr pos:start="173:5" pos:end="173:32"><call pos:start="173:5" pos:end="173:32"><name pos:start="173:5" pos:end="173:22">qemu_co_mutex_init</name><argument_list pos:start="173:23" pos:end="173:32">(<argument pos:start="173:24" pos:end="173:31"><expr pos:start="173:24" pos:end="173:31"><operator pos:start="173:24" pos:end="173:24">&amp;</operator><name pos:start="173:25" pos:end="173:31"><name pos:start="173:25" pos:end="173:25">s</name><operator pos:start="173:26" pos:end="173:27">-&gt;</operator><name pos:start="173:28" pos:end="173:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="174:5" pos:end="174:31">/* Repair image if dirty */</comment>
    <if_stmt pos:start="175:5" pos:end="242:15"><if pos:start="175:5" pos:end="242:15">if <condition pos:start="175:8" pos:end="176:58">(<expr pos:start="175:9" pos:end="176:57"><operator pos:start="175:9" pos:end="175:9">!</operator><operator pos:start="175:10" pos:end="175:10">(</operator><name pos:start="175:11" pos:end="175:15">flags</name> <operator pos:start="175:17" pos:end="175:17">&amp;</operator> <operator pos:start="175:19" pos:end="175:19">(</operator><name pos:start="175:20" pos:end="175:31">BDRV_O_CHECK</name> <operator pos:start="175:33" pos:end="175:33">|</operator> <name pos:start="175:35" pos:end="175:49">BDRV_O_INCOMING</name><operator pos:start="175:50" pos:end="175:50">)</operator><operator pos:start="175:51" pos:end="175:51">)</operator> <operator pos:start="175:53" pos:end="175:54">&amp;&amp;</operator> <operator pos:start="175:56" pos:end="175:56">!</operator><name pos:start="175:57" pos:end="175:69"><name pos:start="175:57" pos:end="175:58">bs</name><operator pos:start="175:59" pos:end="175:60">-&gt;</operator><name pos:start="175:61" pos:end="175:69">read_only</name></name> <operator pos:start="175:71" pos:end="175:72">&amp;&amp;</operator>
        <operator pos:start="176:9" pos:end="176:9">(</operator><name pos:start="176:10" pos:end="176:33"><name pos:start="176:10" pos:end="176:10">s</name><operator pos:start="176:11" pos:end="176:12">-&gt;</operator><name pos:start="176:13" pos:end="176:33">incompatible_features</name></name> <operator pos:start="176:35" pos:end="176:35">&amp;</operator> <name pos:start="176:37" pos:end="176:56">QCOW2_INCOMPAT_DIRTY</name><operator pos:start="176:57" pos:end="176:57">)</operator></expr>)</condition> <block pos:start="176:60" pos:end="242:15">{<block_content pos:start="177:9" pos:end="242:15">
        <decl_stmt pos:start="177:9" pos:end="177:37"><decl pos:start="177:9" pos:end="177:36"><type pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:23">BdrvCheckResult</name></type> <name pos:start="177:25" pos:end="177:30">result</name> <init pos:start="177:32" pos:end="177:36">= <expr pos:start="177:34" pos:end="177:36"><block pos:start="177:34" pos:end="177:36">{<expr pos:start="177:35" pos:end="177:35"><literal type="number" pos:start="177:35" pos:end="177:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="178:9" pos:end="178:56"><expr pos:start="178:9" pos:end="178:55"><name pos:start="178:9" pos:end="178:11">ret</name> <operator pos:start="178:13" pos:end="178:13">=</operator> <call pos:start="178:15" pos:end="178:55"><name pos:start="178:15" pos:end="178:25">qcow2_check</name><argument_list pos:start="178:26" pos:end="178:55">(<argument pos:start="178:27" pos:end="178:28"><expr pos:start="178:27" pos:end="178:28"><name pos:start="178:27" pos:end="178:28">bs</name></expr></argument>, <argument pos:start="178:31" pos:end="178:37"><expr pos:start="178:31" pos:end="178:37"><operator pos:start="178:31" pos:end="178:31">&amp;</operator><name pos:start="178:32" pos:end="178:37">result</name></expr></argument>, <argument pos:start="178:40" pos:end="178:54"><expr pos:start="178:40" pos:end="178:54"><name pos:start="178:40" pos:end="178:54">BDRV_FIX_ERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="179:9" pos:end="242:15"><if pos:start="179:9" pos:end="242:15">if <condition pos:start="179:12" pos:end="179:20">(<expr pos:start="179:13" pos:end="179:19"><name pos:start="179:13" pos:end="179:15">ret</name> <operator pos:start="179:17" pos:end="179:17">&lt;</operator> <literal type="number" pos:start="179:19" pos:end="179:19">0</literal></expr>)</condition> <block pos:start="179:22" pos:end="242:15">{<block_content pos:start="180:13" pos:end="242:15">
            <expr_stmt pos:start="180:13" pos:end="180:73"><expr pos:start="180:13" pos:end="180:72"><call pos:start="180:13" pos:end="180:72"><name pos:start="180:13" pos:end="180:28">error_setg_errno</name><argument_list pos:start="180:29" pos:end="180:72">(<argument pos:start="180:30" pos:end="180:33"><expr pos:start="180:30" pos:end="180:33"><name pos:start="180:30" pos:end="180:33">errp</name></expr></argument>, <argument pos:start="180:36" pos:end="180:39"><expr pos:start="180:36" pos:end="180:39"><operator pos:start="180:36" pos:end="180:36">-</operator><name pos:start="180:37" pos:end="180:39">ret</name></expr></argument>, <argument pos:start="180:42" pos:end="180:71"><expr pos:start="180:42" pos:end="180:71"><literal type="string" pos:start="180:42" pos:end="180:71">"Could not repair dirty image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="181:5" pos:end="181:75">/* Enable lazy_refcounts according to image and command line options */</comment>
    <expr_stmt pos:start="182:5" pos:end="182:72"><expr pos:start="182:5" pos:end="182:71"><name pos:start="182:5" pos:end="182:8">opts</name> <operator pos:start="182:10" pos:end="182:10">=</operator> <call pos:start="182:12" pos:end="182:71"><name pos:start="182:12" pos:end="182:27">qemu_opts_create</name><argument_list pos:start="182:28" pos:end="182:71">(<argument pos:start="182:29" pos:end="182:47"><expr pos:start="182:29" pos:end="182:47"><operator pos:start="182:29" pos:end="182:29">&amp;</operator><name pos:start="182:30" pos:end="182:47">qcow2_runtime_opts</name></expr></argument>, <argument pos:start="182:50" pos:end="182:53"><expr pos:start="182:50" pos:end="182:53"><name pos:start="182:50" pos:end="182:53">NULL</name></expr></argument>, <argument pos:start="182:56" pos:end="182:56"><expr pos:start="182:56" pos:end="182:56"><literal type="number" pos:start="182:56" pos:end="182:56">0</literal></expr></argument>, <argument pos:start="182:59" pos:end="182:70"><expr pos:start="182:59" pos:end="182:70"><operator pos:start="182:59" pos:end="182:59">&amp;</operator><name pos:start="182:60" pos:end="182:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="183:5" pos:end="183:54"><expr pos:start="183:5" pos:end="183:53"><call pos:start="183:5" pos:end="183:53"><name pos:start="183:5" pos:end="183:26">qemu_opts_absorb_qdict</name><argument_list pos:start="183:27" pos:end="183:53">(<argument pos:start="183:28" pos:end="183:31"><expr pos:start="183:28" pos:end="183:31"><name pos:start="183:28" pos:end="183:31">opts</name></expr></argument>, <argument pos:start="183:34" pos:end="183:40"><expr pos:start="183:34" pos:end="183:40"><name pos:start="183:34" pos:end="183:40">options</name></expr></argument>, <argument pos:start="183:43" pos:end="183:52"><expr pos:start="183:43" pos:end="183:52"><operator pos:start="183:43" pos:end="183:43">&amp;</operator><name pos:start="183:44" pos:end="183:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="184:5" pos:end="242:15"><if pos:start="184:5" pos:end="242:15">if <condition pos:start="184:8" pos:end="184:18">(<expr pos:start="184:9" pos:end="184:17"><name pos:start="184:9" pos:end="184:17">local_err</name></expr>)</condition> <block pos:start="184:20" pos:end="242:15">{<block_content pos:start="185:9" pos:end="242:15">
        <expr_stmt pos:start="185:9" pos:end="185:41"><expr pos:start="185:9" pos:end="185:40"><call pos:start="185:9" pos:end="185:40"><name pos:start="185:9" pos:end="185:23">error_propagate</name><argument_list pos:start="185:24" pos:end="185:40">(<argument pos:start="185:25" pos:end="185:28"><expr pos:start="185:25" pos:end="185:28"><name pos:start="185:25" pos:end="185:28">errp</name></expr></argument>, <argument pos:start="185:31" pos:end="185:39"><expr pos:start="185:31" pos:end="185:39"><name pos:start="185:31" pos:end="185:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="186:5" pos:end="187:64"><expr pos:start="186:5" pos:end="187:63"><name pos:start="186:5" pos:end="186:25"><name pos:start="186:5" pos:end="186:5">s</name><operator pos:start="186:6" pos:end="186:7">-&gt;</operator><name pos:start="186:8" pos:end="186:25">use_lazy_refcounts</name></name> <operator pos:start="186:27" pos:end="186:27">=</operator> <call pos:start="186:29" pos:end="187:63"><name pos:start="186:29" pos:end="186:45">qemu_opt_get_bool</name><argument_list pos:start="186:46" pos:end="187:63">(<argument pos:start="186:47" pos:end="186:50"><expr pos:start="186:47" pos:end="186:50"><name pos:start="186:47" pos:end="186:50">opts</name></expr></argument>, <argument pos:start="186:53" pos:end="186:76"><expr pos:start="186:53" pos:end="186:76"><name pos:start="186:53" pos:end="186:76">QCOW2_OPT_LAZY_REFCOUNTS</name></expr></argument>,
        <argument pos:start="187:9" pos:end="187:62"><expr pos:start="187:9" pos:end="187:62"><operator pos:start="187:9" pos:end="187:9">(</operator><name pos:start="187:10" pos:end="187:31"><name pos:start="187:10" pos:end="187:10">s</name><operator pos:start="187:11" pos:end="187:12">-&gt;</operator><name pos:start="187:13" pos:end="187:31">compatible_features</name></name> <operator pos:start="187:33" pos:end="187:33">&amp;</operator> <name pos:start="187:35" pos:end="187:61">QCOW2_COMPAT_LAZY_REFCOUNTS</name><operator pos:start="187:62" pos:end="187:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="188:5" pos:end="188:56"><expr pos:start="188:5" pos:end="188:55"><name pos:start="188:5" pos:end="188:47"><name pos:start="188:5" pos:end="188:5">s</name><operator pos:start="188:6" pos:end="188:7">-&gt;</operator><name pos:start="188:8" pos:end="188:26">discard_passthrough</name><index pos:start="188:27" pos:end="188:47">[<expr pos:start="188:28" pos:end="188:46"><name pos:start="188:28" pos:end="188:46">QCOW2_DISCARD_NEVER</name></expr>]</index></name> <operator pos:start="188:49" pos:end="188:49">=</operator> <name pos:start="188:51" pos:end="188:55">false</name></expr>;</expr_stmt>
    <expr_stmt pos:start="189:5" pos:end="189:56"><expr pos:start="189:5" pos:end="189:55"><name pos:start="189:5" pos:end="189:48"><name pos:start="189:5" pos:end="189:5">s</name><operator pos:start="189:6" pos:end="189:7">-&gt;</operator><name pos:start="189:8" pos:end="189:26">discard_passthrough</name><index pos:start="189:27" pos:end="189:48">[<expr pos:start="189:28" pos:end="189:47"><name pos:start="189:28" pos:end="189:47">QCOW2_DISCARD_ALWAYS</name></expr>]</index></name> <operator pos:start="189:50" pos:end="189:50">=</operator> <name pos:start="189:52" pos:end="189:55">true</name></expr>;</expr_stmt>
    <expr_stmt pos:start="190:5" pos:end="192:48"><expr pos:start="190:5" pos:end="192:47"><name pos:start="190:5" pos:end="190:49"><name pos:start="190:5" pos:end="190:5">s</name><operator pos:start="190:6" pos:end="190:7">-&gt;</operator><name pos:start="190:8" pos:end="190:26">discard_passthrough</name><index pos:start="190:27" pos:end="190:49">[<expr pos:start="190:28" pos:end="190:48"><name pos:start="190:28" pos:end="190:48">QCOW2_DISCARD_REQUEST</name></expr>]</index></name> <operator pos:start="190:51" pos:end="190:51">=</operator>
        <call pos:start="191:9" pos:end="192:47"><name pos:start="191:9" pos:end="191:25">qemu_opt_get_bool</name><argument_list pos:start="191:26" pos:end="192:47">(<argument pos:start="191:27" pos:end="191:30"><expr pos:start="191:27" pos:end="191:30"><name pos:start="191:27" pos:end="191:30">opts</name></expr></argument>, <argument pos:start="191:33" pos:end="191:57"><expr pos:start="191:33" pos:end="191:57"><name pos:start="191:33" pos:end="191:57">QCOW2_OPT_DISCARD_REQUEST</name></expr></argument>,
                          <argument pos:start="192:27" pos:end="192:46"><expr pos:start="192:27" pos:end="192:46"><name pos:start="192:27" pos:end="192:31">flags</name> <operator pos:start="192:33" pos:end="192:33">&amp;</operator> <name pos:start="192:35" pos:end="192:46">BDRV_O_UNMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="193:5" pos:end="194:66"><expr pos:start="193:5" pos:end="194:65"><name pos:start="193:5" pos:end="193:50"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:26">discard_passthrough</name><index pos:start="193:27" pos:end="193:50">[<expr pos:start="193:28" pos:end="193:49"><name pos:start="193:28" pos:end="193:49">QCOW2_DISCARD_SNAPSHOT</name></expr>]</index></name> <operator pos:start="193:52" pos:end="193:52">=</operator>
        <call pos:start="194:9" pos:end="194:65"><name pos:start="194:9" pos:end="194:25">qemu_opt_get_bool</name><argument_list pos:start="194:26" pos:end="194:65">(<argument pos:start="194:27" pos:end="194:30"><expr pos:start="194:27" pos:end="194:30"><name pos:start="194:27" pos:end="194:30">opts</name></expr></argument>, <argument pos:start="194:33" pos:end="194:58"><expr pos:start="194:33" pos:end="194:58"><name pos:start="194:33" pos:end="194:58">QCOW2_OPT_DISCARD_SNAPSHOT</name></expr></argument>, <argument pos:start="194:61" pos:end="194:64"><expr pos:start="194:61" pos:end="194:64"><name pos:start="194:61" pos:end="194:64">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="195:5" pos:end="196:64"><expr pos:start="195:5" pos:end="196:63"><name pos:start="195:5" pos:end="195:47"><name pos:start="195:5" pos:end="195:5">s</name><operator pos:start="195:6" pos:end="195:7">-&gt;</operator><name pos:start="195:8" pos:end="195:26">discard_passthrough</name><index pos:start="195:27" pos:end="195:47">[<expr pos:start="195:28" pos:end="195:46"><name pos:start="195:28" pos:end="195:46">QCOW2_DISCARD_OTHER</name></expr>]</index></name> <operator pos:start="195:49" pos:end="195:49">=</operator>
        <call pos:start="196:9" pos:end="196:63"><name pos:start="196:9" pos:end="196:25">qemu_opt_get_bool</name><argument_list pos:start="196:26" pos:end="196:63">(<argument pos:start="196:27" pos:end="196:30"><expr pos:start="196:27" pos:end="196:30"><name pos:start="196:27" pos:end="196:30">opts</name></expr></argument>, <argument pos:start="196:33" pos:end="196:55"><expr pos:start="196:33" pos:end="196:55"><name pos:start="196:33" pos:end="196:55">QCOW2_OPT_DISCARD_OTHER</name></expr></argument>, <argument pos:start="196:58" pos:end="196:62"><expr pos:start="196:58" pos:end="196:62"><name pos:start="196:58" pos:end="196:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="197:5" pos:end="197:72"><expr pos:start="197:5" pos:end="197:71"><name pos:start="197:5" pos:end="197:21">opt_overlap_check</name> <operator pos:start="197:23" pos:end="197:23">=</operator> <ternary pos:start="197:25" pos:end="197:71"><condition pos:start="197:25" pos:end="197:61"><expr pos:start="197:25" pos:end="197:59"><call pos:start="197:25" pos:end="197:59"><name pos:start="197:25" pos:end="197:36">qemu_opt_get</name><argument_list pos:start="197:37" pos:end="197:59">(<argument pos:start="197:38" pos:end="197:41"><expr pos:start="197:38" pos:end="197:41"><name pos:start="197:38" pos:end="197:41">opts</name></expr></argument>, <argument pos:start="197:44" pos:end="197:58"><expr pos:start="197:44" pos:end="197:58"><literal type="string" pos:start="197:44" pos:end="197:58">"overlap-check"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then/><else pos:start="197:62" pos:end="197:71">: <expr pos:start="197:64" pos:end="197:71"><literal type="string" pos:start="197:64" pos:end="197:71">"cached"</literal></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt pos:start="198:5" pos:end="242:15"><if pos:start="198:5" pos:end="200:5">if <condition pos:start="198:8" pos:end="198:43">(<expr pos:start="198:9" pos:end="198:42"><operator pos:start="198:9" pos:end="198:9">!</operator><call pos:start="198:10" pos:end="198:42"><name pos:start="198:10" pos:end="198:15">strcmp</name><argument_list pos:start="198:16" pos:end="198:42">(<argument pos:start="198:17" pos:end="198:33"><expr pos:start="198:17" pos:end="198:33"><name pos:start="198:17" pos:end="198:33">opt_overlap_check</name></expr></argument>, <argument pos:start="198:36" pos:end="198:41"><expr pos:start="198:36" pos:end="198:41"><literal type="string" pos:start="198:36" pos:end="198:41">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="198:45" pos:end="200:5">{<block_content pos:start="199:9" pos:end="199:35">
        <expr_stmt pos:start="199:9" pos:end="199:35"><expr pos:start="199:9" pos:end="199:34"><name pos:start="199:9" pos:end="199:30">overlap_check_template</name> <operator pos:start="199:32" pos:end="199:32">=</operator> <literal type="number" pos:start="199:34" pos:end="199:34">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="200:7" pos:end="202:5">else if <condition pos:start="200:15" pos:end="200:54">(<expr pos:start="200:16" pos:end="200:53"><operator pos:start="200:16" pos:end="200:16">!</operator><call pos:start="200:17" pos:end="200:53"><name pos:start="200:17" pos:end="200:22">strcmp</name><argument_list pos:start="200:23" pos:end="200:53">(<argument pos:start="200:24" pos:end="200:40"><expr pos:start="200:24" pos:end="200:40"><name pos:start="200:24" pos:end="200:40">opt_overlap_check</name></expr></argument>, <argument pos:start="200:43" pos:end="200:52"><expr pos:start="200:43" pos:end="200:52"><literal type="string" pos:start="200:43" pos:end="200:52">"constant"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="200:56" pos:end="202:5">{<block_content pos:start="201:9" pos:end="201:51">
        <expr_stmt pos:start="201:9" pos:end="201:51"><expr pos:start="201:9" pos:end="201:50"><name pos:start="201:9" pos:end="201:30">overlap_check_template</name> <operator pos:start="201:32" pos:end="201:32">=</operator> <name pos:start="201:34" pos:end="201:50">QCOW2_OL_CONSTANT</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="202:7" pos:end="204:5">else if <condition pos:start="202:15" pos:end="202:52">(<expr pos:start="202:16" pos:end="202:51"><operator pos:start="202:16" pos:end="202:16">!</operator><call pos:start="202:17" pos:end="202:51"><name pos:start="202:17" pos:end="202:22">strcmp</name><argument_list pos:start="202:23" pos:end="202:51">(<argument pos:start="202:24" pos:end="202:40"><expr pos:start="202:24" pos:end="202:40"><name pos:start="202:24" pos:end="202:40">opt_overlap_check</name></expr></argument>, <argument pos:start="202:43" pos:end="202:50"><expr pos:start="202:43" pos:end="202:50"><literal type="string" pos:start="202:43" pos:end="202:50">"cached"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="202:54" pos:end="204:5">{<block_content pos:start="203:9" pos:end="203:49">
        <expr_stmt pos:start="203:9" pos:end="203:49"><expr pos:start="203:9" pos:end="203:48"><name pos:start="203:9" pos:end="203:30">overlap_check_template</name> <operator pos:start="203:32" pos:end="203:32">=</operator> <name pos:start="203:34" pos:end="203:48">QCOW2_OL_CACHED</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="204:7" pos:end="206:5">else if <condition pos:start="204:15" pos:end="204:49">(<expr pos:start="204:16" pos:end="204:48"><operator pos:start="204:16" pos:end="204:16">!</operator><call pos:start="204:17" pos:end="204:48"><name pos:start="204:17" pos:end="204:22">strcmp</name><argument_list pos:start="204:23" pos:end="204:48">(<argument pos:start="204:24" pos:end="204:40"><expr pos:start="204:24" pos:end="204:40"><name pos:start="204:24" pos:end="204:40">opt_overlap_check</name></expr></argument>, <argument pos:start="204:43" pos:end="204:47"><expr pos:start="204:43" pos:end="204:47"><literal type="string" pos:start="204:43" pos:end="204:47">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="204:51" pos:end="206:5">{<block_content pos:start="205:9" pos:end="205:46">
        <expr_stmt pos:start="205:9" pos:end="205:46"><expr pos:start="205:9" pos:end="205:45"><name pos:start="205:9" pos:end="205:30">overlap_check_template</name> <operator pos:start="205:32" pos:end="205:32">=</operator> <name pos:start="205:34" pos:end="205:45">QCOW2_OL_ALL</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="206:7" pos:end="242:15">else <block pos:start="206:12" pos:end="242:15">{<block_content pos:start="207:9" pos:end="242:15">
        <expr_stmt pos:start="207:9" pos:end="209:69"><expr pos:start="207:9" pos:end="209:68"><call pos:start="207:9" pos:end="209:68"><name pos:start="207:9" pos:end="207:18">error_setg</name><argument_list pos:start="207:19" pos:end="209:68">(<argument pos:start="207:20" pos:end="207:23"><expr pos:start="207:20" pos:end="207:23"><name pos:start="207:20" pos:end="207:23">errp</name></expr></argument>, <argument pos:start="207:26" pos:end="209:48"><expr pos:start="207:26" pos:end="209:48"><literal type="string" pos:start="207:26" pos:end="207:67">"Unsupported value '%s' for qcow2 option "</literal>
                   <literal type="string" pos:start="208:20" pos:end="208:75">"'overlap-check'. Allowed are either of the following: "</literal>
                   <literal type="string" pos:start="209:20" pos:end="209:48">"none, constant, cached, all"</literal></expr></argument>, <argument pos:start="209:51" pos:end="209:67"><expr pos:start="209:51" pos:end="209:67"><name pos:start="209:51" pos:end="209:67">opt_overlap_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="210:9" pos:end="210:28"><expr pos:start="210:9" pos:end="210:27"><call pos:start="210:9" pos:end="210:27"><name pos:start="210:9" pos:end="210:21">qemu_opts_del</name><argument_list pos:start="210:22" pos:end="210:27">(<argument pos:start="210:23" pos:end="210:26"><expr pos:start="210:23" pos:end="210:26"><name pos:start="210:23" pos:end="210:26">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="211:5" pos:end="211:25"><expr pos:start="211:5" pos:end="211:24"><name pos:start="211:5" pos:end="211:20"><name pos:start="211:5" pos:end="211:5">s</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:20">overlap_check</name></name> <operator pos:start="211:22" pos:end="211:22">=</operator> <literal type="number" pos:start="211:24" pos:end="211:24">0</literal></expr>;</expr_stmt>
    <for pos:start="212:5" pos:end="242:15">for <control pos:start="212:9" pos:end="212:44">(<init pos:start="212:10" pos:end="212:15"><expr pos:start="212:10" pos:end="212:14"><name pos:start="212:10" pos:end="212:10">i</name> <operator pos:start="212:12" pos:end="212:12">=</operator> <literal type="number" pos:start="212:14" pos:end="212:14">0</literal></expr>;</init> <condition pos:start="212:17" pos:end="212:39"><expr pos:start="212:17" pos:end="212:38"><name pos:start="212:17" pos:end="212:17">i</name> <operator pos:start="212:19" pos:end="212:19">&lt;</operator> <name pos:start="212:21" pos:end="212:38">QCOW2_OL_MAX_BITNR</name></expr>;</condition> <incr pos:start="212:41" pos:end="212:43"><expr pos:start="212:41" pos:end="212:43"><name pos:start="212:41" pos:end="212:41">i</name><operator pos:start="212:42" pos:end="212:43">++</operator></expr></incr>)</control> <block pos:start="212:46" pos:end="242:15">{<block_content pos:start="215:9" pos:end="242:15">
        <comment type="block" pos:start="213:9" pos:end="214:63">/* overlap-check defines a template bitmask, but every flag may be
         * overwritten through the associated boolean option */</comment>
        <expr_stmt pos:start="215:9" pos:end="217:70"><expr pos:start="215:9" pos:end="217:69"><name pos:start="215:9" pos:end="215:24"><name pos:start="215:9" pos:end="215:9">s</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:24">overlap_check</name></name> <operator pos:start="215:26" pos:end="215:27">|=</operator>
            <call pos:start="216:13" pos:end="217:64"><name pos:start="216:13" pos:end="216:29">qemu_opt_get_bool</name><argument_list pos:start="216:30" pos:end="217:64">(<argument pos:start="216:31" pos:end="216:34"><expr pos:start="216:31" pos:end="216:34"><name pos:start="216:31" pos:end="216:34">opts</name></expr></argument>, <argument pos:start="216:37" pos:end="216:64"><expr pos:start="216:37" pos:end="216:64"><name pos:start="216:37" pos:end="216:64"><name pos:start="216:37" pos:end="216:61">overlap_bool_option_names</name><index pos:start="216:62" pos:end="216:64">[<expr pos:start="216:63" pos:end="216:63"><name pos:start="216:63" pos:end="216:63">i</name></expr>]</index></name></expr></argument>,
                              <argument pos:start="217:31" pos:end="217:63"><expr pos:start="217:31" pos:end="217:63"><name pos:start="217:31" pos:end="217:52">overlap_check_template</name> <operator pos:start="217:54" pos:end="217:54">&amp;</operator> <operator pos:start="217:56" pos:end="217:56">(</operator><literal type="number" pos:start="217:57" pos:end="217:57">1</literal> <operator pos:start="217:59" pos:end="217:60">&lt;&lt;</operator> <name pos:start="217:62" pos:end="217:62">i</name><operator pos:start="217:63" pos:end="217:63">)</operator></expr></argument>)</argument_list></call> <operator pos:start="217:66" pos:end="217:67">&lt;&lt;</operator> <name pos:start="217:69" pos:end="217:69">i</name></expr>;</expr_stmt>
    <expr_stmt pos:start="218:5" pos:end="218:24"><expr pos:start="218:5" pos:end="218:23"><call pos:start="218:5" pos:end="218:23"><name pos:start="218:5" pos:end="218:17">qemu_opts_del</name><argument_list pos:start="218:18" pos:end="218:23">(<argument pos:start="218:19" pos:end="218:22"><expr pos:start="218:19" pos:end="218:22"><name pos:start="218:19" pos:end="218:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="219:5" pos:end="242:15"><if pos:start="219:5" pos:end="242:15">if <condition pos:start="219:8" pos:end="219:53">(<expr pos:start="219:9" pos:end="219:52"><name pos:start="219:9" pos:end="219:29"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:29">use_lazy_refcounts</name></name> <operator pos:start="219:31" pos:end="219:32">&amp;&amp;</operator> <name pos:start="219:34" pos:end="219:48"><name pos:start="219:34" pos:end="219:34">s</name><operator pos:start="219:35" pos:end="219:36">-&gt;</operator><name pos:start="219:37" pos:end="219:48">qcow_version</name></name> <operator pos:start="219:50" pos:end="219:50">&lt;</operator> <literal type="number" pos:start="219:52" pos:end="219:52">3</literal></expr>)</condition> <block pos:start="219:55" pos:end="242:15">{<block_content pos:start="220:9" pos:end="242:15">
        <expr_stmt pos:start="220:9" pos:end="223:0"><expr pos:start="220:9" pos:end="221:50"><call pos:start="220:9" pos:end="221:50"><name pos:start="220:9" pos:end="220:18">error_setg</name><argument_list pos:start="220:19" pos:end="221:50">(<argument pos:start="220:20" pos:end="220:23"><expr pos:start="220:20" pos:end="220:23"><name pos:start="220:20" pos:end="220:23">errp</name></expr></argument>, <argument pos:start="220:26" pos:end="221:49"><expr pos:start="220:26" pos:end="221:49"><literal type="string" pos:start="220:26" pos:end="220:78">"Lazy refcounts require a qcow2 image with at least "</literal>
                   <literal type="string" pos:start="221:20" pos:end="221:49">"qemu 1.1 compatibility level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="222:1" pos:end="222:18">#<cpp:directive pos:start="222:2" pos:end="222:6">ifdef</cpp:directive> <name pos:start="222:8" pos:end="222:18">DEBUG_ALLOC</name></cpp:ifdef>
    <block pos:start="223:5" pos:end="242:15">{<block_content pos:start="224:9" pos:end="242:15">
        <decl_stmt pos:start="224:9" pos:end="224:37"><decl pos:start="224:9" pos:end="224:36"><type pos:start="224:9" pos:end="224:23"><name pos:start="224:9" pos:end="224:23">BdrvCheckResult</name></type> <name pos:start="224:25" pos:end="224:30">result</name> <init pos:start="224:32" pos:end="224:36">= <expr pos:start="224:34" pos:end="224:36"><block pos:start="224:34" pos:end="224:36">{<expr pos:start="224:35" pos:end="224:35"><literal type="number" pos:start="224:35" pos:end="224:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="225:9" pos:end="227:0"><expr pos:start="225:9" pos:end="225:45"><call pos:start="225:9" pos:end="225:45"><name pos:start="225:9" pos:end="225:29">qcow2_check_refcounts</name><argument_list pos:start="225:30" pos:end="225:45">(<argument pos:start="225:31" pos:end="225:32"><expr pos:start="225:31" pos:end="225:32"><name pos:start="225:31" pos:end="225:32">bs</name></expr></argument>, <argument pos:start="225:35" pos:end="225:41"><expr pos:start="225:35" pos:end="225:41"><operator pos:start="225:35" pos:end="225:35">&amp;</operator><name pos:start="225:36" pos:end="225:41">result</name></expr></argument>, <argument pos:start="225:44" pos:end="225:44"><expr pos:start="225:44" pos:end="225:44"><literal type="number" pos:start="225:44" pos:end="225:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="226:1" pos:end="226:6">#<cpp:directive pos:start="226:2" pos:end="226:6">endif</cpp:directive></cpp:endif>
    <return pos:start="227:5" pos:end="227:15">return <expr pos:start="227:12" pos:end="227:14"><name pos:start="227:12" pos:end="227:14">ret</name></expr>;</return>
 <label pos:start="228:2" pos:end="228:6"><name pos:start="228:2" pos:end="228:5">fail</name>:</label>
    <expr_stmt pos:start="229:5" pos:end="229:37"><expr pos:start="229:5" pos:end="229:36"><call pos:start="229:5" pos:end="229:36"><name pos:start="229:5" pos:end="229:10">g_free</name><argument_list pos:start="229:11" pos:end="229:36">(<argument pos:start="229:12" pos:end="229:35"><expr pos:start="229:12" pos:end="229:35"><name pos:start="229:12" pos:end="229:35"><name pos:start="229:12" pos:end="229:12">s</name><operator pos:start="229:13" pos:end="229:14">-&gt;</operator><name pos:start="229:15" pos:end="229:35">unknown_header_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="230:5" pos:end="230:35"><expr pos:start="230:5" pos:end="230:34"><call pos:start="230:5" pos:end="230:34"><name pos:start="230:5" pos:end="230:30">cleanup_unknown_header_ext</name><argument_list pos:start="230:31" pos:end="230:34">(<argument pos:start="230:32" pos:end="230:33"><expr pos:start="230:32" pos:end="230:33"><name pos:start="230:32" pos:end="230:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="231:5" pos:end="231:29"><expr pos:start="231:5" pos:end="231:28"><call pos:start="231:5" pos:end="231:28"><name pos:start="231:5" pos:end="231:24">qcow2_free_snapshots</name><argument_list pos:start="231:25" pos:end="231:28">(<argument pos:start="231:26" pos:end="231:27"><expr pos:start="231:26" pos:end="231:27"><name pos:start="231:26" pos:end="231:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="232:5" pos:end="232:29"><expr pos:start="232:5" pos:end="232:28"><call pos:start="232:5" pos:end="232:28"><name pos:start="232:5" pos:end="232:24">qcow2_refcount_close</name><argument_list pos:start="232:25" pos:end="232:28">(<argument pos:start="232:26" pos:end="232:27"><expr pos:start="232:26" pos:end="232:27"><name pos:start="232:26" pos:end="232:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="233:5" pos:end="233:24"><expr pos:start="233:5" pos:end="233:23"><call pos:start="233:5" pos:end="233:23"><name pos:start="233:5" pos:end="233:10">g_free</name><argument_list pos:start="233:11" pos:end="233:23">(<argument pos:start="233:12" pos:end="233:22"><expr pos:start="233:12" pos:end="233:22"><name pos:start="233:12" pos:end="233:22"><name pos:start="233:12" pos:end="233:12">s</name><operator pos:start="233:13" pos:end="233:14">-&gt;</operator><name pos:start="233:15" pos:end="233:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="234:5" pos:end="234:66">/* else pre-write overlap checks in cache_destroy may crash */</comment>
    <expr_stmt pos:start="235:5" pos:end="235:23"><expr pos:start="235:5" pos:end="235:22"><name pos:start="235:5" pos:end="235:15"><name pos:start="235:5" pos:end="235:5">s</name><operator pos:start="235:6" pos:end="235:7">-&gt;</operator><name pos:start="235:8" pos:end="235:15">l1_table</name></name> <operator pos:start="235:17" pos:end="235:17">=</operator> <name pos:start="235:19" pos:end="235:22">NULL</name></expr>;</expr_stmt>
    <if_stmt pos:start="236:5" pos:end="242:15"><if pos:start="236:5" pos:end="242:15">if <condition pos:start="236:8" pos:end="236:26">(<expr pos:start="236:9" pos:end="236:25"><name pos:start="236:9" pos:end="236:25"><name pos:start="236:9" pos:end="236:9">s</name><operator pos:start="236:10" pos:end="236:11">-&gt;</operator><name pos:start="236:12" pos:end="236:25">l2_table_cache</name></name></expr>)</condition> <block pos:start="236:28" pos:end="242:15">{<block_content pos:start="237:9" pos:end="242:15">
        <expr_stmt pos:start="237:9" pos:end="237:51"><expr pos:start="237:9" pos:end="237:50"><call pos:start="237:9" pos:end="237:50"><name pos:start="237:9" pos:end="237:27">qcow2_cache_destroy</name><argument_list pos:start="237:28" pos:end="237:50">(<argument pos:start="237:29" pos:end="237:30"><expr pos:start="237:29" pos:end="237:30"><name pos:start="237:29" pos:end="237:30">bs</name></expr></argument>, <argument pos:start="237:33" pos:end="237:49"><expr pos:start="237:33" pos:end="237:49"><name pos:start="237:33" pos:end="237:49"><name pos:start="237:33" pos:end="237:33">s</name><operator pos:start="237:34" pos:end="237:35">-&gt;</operator><name pos:start="237:36" pos:end="237:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="238:5" pos:end="242:15"><if pos:start="238:5" pos:end="242:15">if <condition pos:start="238:8" pos:end="238:32">(<expr pos:start="238:9" pos:end="238:31"><name pos:start="238:9" pos:end="238:31"><name pos:start="238:9" pos:end="238:9">s</name><operator pos:start="238:10" pos:end="238:11">-&gt;</operator><name pos:start="238:12" pos:end="238:31">refcount_block_cache</name></name></expr>)</condition> <block pos:start="238:34" pos:end="242:15">{<block_content pos:start="239:9" pos:end="242:15">
        <expr_stmt pos:start="239:9" pos:end="239:57"><expr pos:start="239:9" pos:end="239:56"><call pos:start="239:9" pos:end="239:56"><name pos:start="239:9" pos:end="239:27">qcow2_cache_destroy</name><argument_list pos:start="239:28" pos:end="239:56">(<argument pos:start="239:29" pos:end="239:30"><expr pos:start="239:29" pos:end="239:30"><name pos:start="239:29" pos:end="239:30">bs</name></expr></argument>, <argument pos:start="239:33" pos:end="239:55"><expr pos:start="239:33" pos:end="239:55"><name pos:start="239:33" pos:end="239:55"><name pos:start="239:33" pos:end="239:33">s</name><operator pos:start="239:34" pos:end="239:35">-&gt;</operator><name pos:start="239:36" pos:end="239:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="240:5" pos:end="240:29"><expr pos:start="240:5" pos:end="240:28"><call pos:start="240:5" pos:end="240:28"><name pos:start="240:5" pos:end="240:10">g_free</name><argument_list pos:start="240:11" pos:end="240:28">(<argument pos:start="240:12" pos:end="240:27"><expr pos:start="240:12" pos:end="240:27"><name pos:start="240:12" pos:end="240:27"><name pos:start="240:12" pos:end="240:12">s</name><operator pos:start="240:13" pos:end="240:14">-&gt;</operator><name pos:start="240:15" pos:end="240:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="241:5" pos:end="241:32"><expr pos:start="241:5" pos:end="241:31"><call pos:start="241:5" pos:end="241:31"><name pos:start="241:5" pos:end="241:14">qemu_vfree</name><argument_list pos:start="241:15" pos:end="241:31">(<argument pos:start="241:16" pos:end="241:30"><expr pos:start="241:16" pos:end="241:30"><name pos:start="241:16" pos:end="241:30"><name pos:start="241:16" pos:end="241:16">s</name><operator pos:start="241:17" pos:end="241:18">-&gt;</operator><name pos:start="241:19" pos:end="241:30">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="242:5" pos:end="242:15">return <expr pos:start="242:12" pos:end="242:14"><name pos:start="242:12" pos:end="242:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
