<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9182.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">compute_mask</name><parameter_list pos:start="1:24" pos:end="1:49">(<parameter pos:start="1:25" pos:end="1:32"><decl pos:start="1:25" pos:end="1:32"><type pos:start="1:25" pos:end="1:32"><name pos:start="1:25" pos:end="1:27">int</name></type> <name pos:start="1:29" pos:end="1:32">step</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:42">uint32_t</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">mask</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:15">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">z</name></decl>, <decl pos:start="5:15" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:17">ret</name> <init pos:start="5:19" pos:end="5:21">= <expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">counter_size</name> <init pos:start="7:22" pos:end="7:56">= <expr pos:start="7:24" pos:end="7:56"><sizeof pos:start="7:24" pos:end="7:39">sizeof<argument_list pos:start="7:30" pos:end="7:39">(<argument pos:start="7:31" pos:end="7:38"><expr pos:start="7:31" pos:end="7:38"><name pos:start="7:31" pos:end="7:38">uint32_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="7:41" pos:end="7:41">*</operator> <operator pos:start="7:43" pos:end="7:43">(</operator><literal type="number" pos:start="7:44" pos:end="7:44">2</literal> <operator pos:start="7:46" pos:end="7:46">*</operator> <name pos:start="7:48" pos:end="7:51">step</name> <operator pos:start="7:53" pos:end="7:53">+</operator> <literal type="number" pos:start="7:55" pos:end="7:55">1</literal><operator pos:start="7:56" pos:end="7:56">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint32_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:27">temp1_counter</name></decl>, <decl pos:start="9:30" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:30" pos:end="9:30">*</modifier></type><name pos:start="9:31" pos:end="9:43">temp2_counter</name></decl>, <decl pos:start="9:46" pos:end="9:54"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:46" pos:end="9:46">*</modifier><modifier pos:start="9:47" pos:end="9:47">*</modifier></type><name pos:start="9:48" pos:end="9:54">counter</name></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:45"><expr pos:start="11:5" pos:end="11:44"><name pos:start="11:5" pos:end="11:17">temp1_counter</name> <operator pos:start="11:19" pos:end="11:19">=</operator> <call pos:start="11:21" pos:end="11:44"><name pos:start="11:21" pos:end="11:30">av_mallocz</name><argument_list pos:start="11:31" pos:end="11:44">(<argument pos:start="11:32" pos:end="11:43"><expr pos:start="11:32" pos:end="11:43"><name pos:start="11:32" pos:end="11:43">counter_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:23">(<expr pos:start="13:9" pos:end="13:22"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:22">temp1_counter</name></expr>)</condition> <block pos:start="13:25" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:30"><expr pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:29"><name pos:start="15:15" pos:end="15:21">AVERROR</name><argument_list pos:start="15:22" pos:end="15:29">(<argument pos:start="15:23" pos:end="15:28"><expr pos:start="15:23" pos:end="15:28"><name pos:start="15:23" pos:end="15:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="17:9" pos:end="17:17">goto <name pos:start="17:14" pos:end="17:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:45"><expr pos:start="21:5" pos:end="21:44"><name pos:start="21:5" pos:end="21:17">temp2_counter</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:44"><name pos:start="21:21" pos:end="21:30">av_mallocz</name><argument_list pos:start="21:31" pos:end="21:44">(<argument pos:start="21:32" pos:end="21:43"><expr pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:43">counter_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:23">(<expr pos:start="23:9" pos:end="23:22"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:22">temp2_counter</name></expr>)</condition> <block pos:start="23:25" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:17">

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:29"><name pos:start="25:15" pos:end="25:21">AVERROR</name><argument_list pos:start="25:22" pos:end="25:29">(<argument pos:start="25:23" pos:end="25:28"><expr pos:start="25:23" pos:end="25:28"><name pos:start="25:23" pos:end="25:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:65"><expr pos:start="31:5" pos:end="31:64"><name pos:start="31:5" pos:end="31:11">counter</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:64"><name pos:start="31:15" pos:end="31:30">av_mallocz_array</name><argument_list pos:start="31:31" pos:end="31:64">(<argument pos:start="31:32" pos:end="31:43"><expr pos:start="31:32" pos:end="31:43"><literal type="number" pos:start="31:32" pos:end="31:32">2</literal> <operator pos:start="31:34" pos:end="31:34">*</operator> <name pos:start="31:36" pos:end="31:39">step</name> <operator pos:start="31:41" pos:end="31:41">+</operator> <literal type="number" pos:start="31:43" pos:end="31:43">1</literal></expr></argument>, <argument pos:start="31:46" pos:end="31:63"><expr pos:start="31:46" pos:end="31:63"><sizeof pos:start="31:46" pos:end="31:63">sizeof<argument_list pos:start="31:52" pos:end="31:63">(<argument pos:start="31:53" pos:end="31:62"><expr pos:start="31:53" pos:end="31:62"><name pos:start="31:53" pos:end="31:60">uint32_t</name> <operator pos:start="31:62" pos:end="31:62">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:16">counter</name></expr>)</condition> <block pos:start="33:19" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:17">

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:29"><name pos:start="35:15" pos:end="35:21">AVERROR</name><argument_list pos:start="35:22" pos:end="35:29">(<argument pos:start="35:23" pos:end="35:28"><expr pos:start="35:23" pos:end="35:28"><name pos:start="35:23" pos:end="35:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:17">goto <name pos:start="37:14" pos:end="37:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <for pos:start="41:5" pos:end="53:5">for <control pos:start="41:9" pos:end="41:38">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:33"><expr pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <literal type="number" pos:start="41:21" pos:end="41:21">2</literal> <operator pos:start="41:23" pos:end="41:23">*</operator> <name pos:start="41:25" pos:end="41:28">step</name> <operator pos:start="41:30" pos:end="41:30">+</operator> <literal type="number" pos:start="41:32" pos:end="41:32">1</literal></expr>;</condition> <incr pos:start="41:35" pos:end="41:37"><expr pos:start="41:35" pos:end="41:37"><name pos:start="41:35" pos:end="41:35">i</name><operator pos:start="41:36" pos:end="41:37">++</operator></expr></incr>)</control> <block pos:start="41:40" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:9">

        <expr_stmt pos:start="43:9" pos:end="43:46"><expr pos:start="43:9" pos:end="43:45"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:15">counter</name><index pos:start="43:16" pos:end="43:18">[<expr pos:start="43:17" pos:end="43:17"><name pos:start="43:17" pos:end="43:17">i</name></expr>]</index></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:45"><name pos:start="43:22" pos:end="43:31">av_mallocz</name><argument_list pos:start="43:32" pos:end="43:45">(<argument pos:start="43:33" pos:end="43:44"><expr pos:start="43:33" pos:end="43:44"><name pos:start="43:33" pos:end="43:44">counter_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:24">(<expr pos:start="45:13" pos:end="45:23"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:23"><name pos:start="45:14" pos:end="45:20">counter</name><index pos:start="45:21" pos:end="45:23">[<expr pos:start="45:22" pos:end="45:22"><name pos:start="45:22" pos:end="45:22">i</name></expr>]</index></name></expr>)</condition> <block pos:start="45:26" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:21">

            <expr_stmt pos:start="47:13" pos:end="47:34"><expr pos:start="47:13" pos:end="47:33"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:33"><name pos:start="47:19" pos:end="47:25">AVERROR</name><argument_list pos:start="47:26" pos:end="47:33">(<argument pos:start="47:27" pos:end="47:32"><expr pos:start="47:27" pos:end="47:32"><name pos:start="47:27" pos:end="47:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:21">goto <name pos:start="49:18" pos:end="49:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <for pos:start="55:5" pos:end="73:5">for <control pos:start="55:9" pos:end="55:38">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:33"><expr pos:start="55:17" pos:end="55:32"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <literal type="number" pos:start="55:21" pos:end="55:21">2</literal> <operator pos:start="55:23" pos:end="55:23">*</operator> <name pos:start="55:25" pos:end="55:28">step</name> <operator pos:start="55:30" pos:end="55:30">+</operator> <literal type="number" pos:start="55:32" pos:end="55:32">1</literal></expr>;</condition> <incr pos:start="55:35" pos:end="55:37"><expr pos:start="55:35" pos:end="55:37"><name pos:start="55:35" pos:end="55:35">i</name><operator pos:start="55:36" pos:end="55:37">++</operator></expr></incr>)</control> <block pos:start="55:40" pos:end="73:5">{<block_content pos:start="57:9" pos:end="71:9">

        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><call pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:14">memset</name><argument_list pos:start="57:15" pos:end="57:46">(<argument pos:start="57:16" pos:end="57:28"><expr pos:start="57:16" pos:end="57:28"><name pos:start="57:16" pos:end="57:28">temp1_counter</name></expr></argument>, <argument pos:start="57:31" pos:end="57:31"><expr pos:start="57:31" pos:end="57:31"><literal type="number" pos:start="57:31" pos:end="57:31">0</literal></expr></argument>, <argument pos:start="57:34" pos:end="57:45"><expr pos:start="57:34" pos:end="57:45"><name pos:start="57:34" pos:end="57:45">counter_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:21">temp1_counter</name><index pos:start="59:22" pos:end="59:24">[<expr pos:start="59:23" pos:end="59:23"><name pos:start="59:23" pos:end="59:23">i</name></expr>]</index></name> <operator pos:start="59:26" pos:end="59:26">=</operator> <literal type="number" pos:start="59:28" pos:end="59:28">1</literal></expr>;</expr_stmt>

        <for pos:start="61:9" pos:end="71:9">for <control pos:start="61:13" pos:end="61:41">(<init pos:start="61:14" pos:end="61:19"><expr pos:start="61:14" pos:end="61:18"><name pos:start="61:14" pos:end="61:14">z</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <literal type="number" pos:start="61:18" pos:end="61:18">0</literal></expr>;</init> <condition pos:start="61:21" pos:end="61:33"><expr pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:21">z</name> <operator pos:start="61:23" pos:end="61:23">&lt;</operator> <name pos:start="61:25" pos:end="61:28">step</name> <operator pos:start="61:30" pos:end="61:30">*</operator> <literal type="number" pos:start="61:32" pos:end="61:32">2</literal></expr>;</condition> <incr pos:start="61:35" pos:end="61:40"><expr pos:start="61:35" pos:end="61:40"><name pos:start="61:35" pos:end="61:35">z</name> <operator pos:start="61:37" pos:end="61:38">+=</operator> <literal type="number" pos:start="61:40" pos:end="61:40">2</literal></expr></incr>)</control> <block pos:start="61:43" pos:end="71:9">{<block_content pos:start="63:13" pos:end="69:64">

            <expr_stmt pos:start="63:13" pos:end="63:81"><expr pos:start="63:13" pos:end="63:80"><call pos:start="63:13" pos:end="63:80"><name pos:start="63:13" pos:end="63:28">add_mask_counter</name><argument_list pos:start="63:29" pos:end="63:80">(<argument pos:start="63:30" pos:end="63:42"><expr pos:start="63:30" pos:end="63:42"><name pos:start="63:30" pos:end="63:42">temp2_counter</name></expr></argument>, <argument pos:start="63:45" pos:end="63:54"><expr pos:start="63:45" pos:end="63:54"><name pos:start="63:45" pos:end="63:54"><name pos:start="63:45" pos:end="63:51">counter</name><index pos:start="63:52" pos:end="63:54">[<expr pos:start="63:53" pos:end="63:53"><name pos:start="63:53" pos:end="63:53">z</name></expr>]</index></name></expr></argument>, <argument pos:start="63:57" pos:end="63:69"><expr pos:start="63:57" pos:end="63:69"><name pos:start="63:57" pos:end="63:69">temp1_counter</name></expr></argument>, <argument pos:start="63:72" pos:end="63:79"><expr pos:start="63:72" pos:end="63:79"><name pos:start="63:72" pos:end="63:75">step</name> <operator pos:start="63:77" pos:end="63:77">*</operator> <literal type="number" pos:start="63:79" pos:end="63:79">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:60"><expr pos:start="65:13" pos:end="65:59"><call pos:start="65:13" pos:end="65:59"><name pos:start="65:13" pos:end="65:18">memcpy</name><argument_list pos:start="65:19" pos:end="65:59">(<argument pos:start="65:20" pos:end="65:29"><expr pos:start="65:20" pos:end="65:29"><name pos:start="65:20" pos:end="65:29"><name pos:start="65:20" pos:end="65:26">counter</name><index pos:start="65:27" pos:end="65:29">[<expr pos:start="65:28" pos:end="65:28"><name pos:start="65:28" pos:end="65:28">z</name></expr>]</index></name></expr></argument>, <argument pos:start="65:32" pos:end="65:44"><expr pos:start="65:32" pos:end="65:44"><name pos:start="65:32" pos:end="65:44">temp1_counter</name></expr></argument>, <argument pos:start="65:47" pos:end="65:58"><expr pos:start="65:47" pos:end="65:58"><name pos:start="65:47" pos:end="65:58">counter_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:85"><expr pos:start="67:13" pos:end="67:84"><call pos:start="67:13" pos:end="67:84"><name pos:start="67:13" pos:end="67:28">add_mask_counter</name><argument_list pos:start="67:29" pos:end="67:84">(<argument pos:start="67:30" pos:end="67:42"><expr pos:start="67:30" pos:end="67:42"><name pos:start="67:30" pos:end="67:42">temp1_counter</name></expr></argument>, <argument pos:start="67:45" pos:end="67:58"><expr pos:start="67:45" pos:end="67:58"><name pos:start="67:45" pos:end="67:58"><name pos:start="67:45" pos:end="67:51">counter</name><index pos:start="67:52" pos:end="67:58">[<expr pos:start="67:53" pos:end="67:57"><name pos:start="67:53" pos:end="67:53">z</name> <operator pos:start="67:55" pos:end="67:55">+</operator> <literal type="number" pos:start="67:57" pos:end="67:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="67:61" pos:end="67:73"><expr pos:start="67:61" pos:end="67:73"><name pos:start="67:61" pos:end="67:73">temp2_counter</name></expr></argument>, <argument pos:start="67:76" pos:end="67:83"><expr pos:start="67:76" pos:end="67:83"><name pos:start="67:76" pos:end="67:79">step</name> <operator pos:start="67:81" pos:end="67:81">*</operator> <literal type="number" pos:start="67:83" pos:end="67:83">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:64"><expr pos:start="69:13" pos:end="69:63"><call pos:start="69:13" pos:end="69:63"><name pos:start="69:13" pos:end="69:18">memcpy</name><argument_list pos:start="69:19" pos:end="69:63">(<argument pos:start="69:20" pos:end="69:33"><expr pos:start="69:20" pos:end="69:33"><name pos:start="69:20" pos:end="69:33"><name pos:start="69:20" pos:end="69:26">counter</name><index pos:start="69:27" pos:end="69:33">[<expr pos:start="69:28" pos:end="69:32"><name pos:start="69:28" pos:end="69:28">z</name> <operator pos:start="69:30" pos:end="69:30">+</operator> <literal type="number" pos:start="69:32" pos:end="69:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:36" pos:end="69:48"><expr pos:start="69:36" pos:end="69:48"><name pos:start="69:36" pos:end="69:48">temp2_counter</name></expr></argument>, <argument pos:start="69:51" pos:end="69:62"><expr pos:start="69:51" pos:end="69:62"><name pos:start="69:51" pos:end="69:62">counter_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <expr_stmt pos:start="75:5" pos:end="75:46"><expr pos:start="75:5" pos:end="75:45"><call pos:start="75:5" pos:end="75:45"><name pos:start="75:5" pos:end="75:10">memcpy</name><argument_list pos:start="75:11" pos:end="75:45">(<argument pos:start="75:12" pos:end="75:15"><expr pos:start="75:12" pos:end="75:15"><name pos:start="75:12" pos:end="75:15">mask</name></expr></argument>, <argument pos:start="75:18" pos:end="75:30"><expr pos:start="75:18" pos:end="75:30"><name pos:start="75:18" pos:end="75:30">temp1_counter</name></expr></argument>, <argument pos:start="75:33" pos:end="75:44"><expr pos:start="75:33" pos:end="75:44"><name pos:start="75:33" pos:end="75:44">counter_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="77:1" pos:end="77:4"><name pos:start="77:1" pos:end="77:3">end</name>:</label>

    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><call pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:12">av_freep</name><argument_list pos:start="79:13" pos:end="79:28">(<argument pos:start="79:14" pos:end="79:27"><expr pos:start="79:14" pos:end="79:27"><operator pos:start="79:14" pos:end="79:14">&amp;</operator><name pos:start="79:15" pos:end="79:27">temp1_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><call pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:12">av_freep</name><argument_list pos:start="81:13" pos:end="81:28">(<argument pos:start="81:14" pos:end="81:27"><expr pos:start="81:14" pos:end="81:27"><operator pos:start="81:14" pos:end="81:14">&amp;</operator><name pos:start="81:15" pos:end="81:27">temp2_counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="83:5" pos:end="87:5">for <control pos:start="83:9" pos:end="83:38">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:33"><expr pos:start="83:17" pos:end="83:32"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <literal type="number" pos:start="83:21" pos:end="83:21">2</literal> <operator pos:start="83:23" pos:end="83:23">*</operator> <name pos:start="83:25" pos:end="83:28">step</name> <operator pos:start="83:30" pos:end="83:30">+</operator> <literal type="number" pos:start="83:32" pos:end="83:32">1</literal></expr>;</condition> <incr pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:35">i</name><operator pos:start="83:36" pos:end="83:37">++</operator></expr></incr>)</control> <block pos:start="83:40" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:30">

        <expr_stmt pos:start="85:9" pos:end="85:30"><expr pos:start="85:9" pos:end="85:29"><call pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:16">av_freep</name><argument_list pos:start="85:17" pos:end="85:29">(<argument pos:start="85:18" pos:end="85:28"><expr pos:start="85:18" pos:end="85:28"><operator pos:start="85:18" pos:end="85:18">&amp;</operator><name pos:start="85:19" pos:end="85:28"><name pos:start="85:19" pos:end="85:25">counter</name><index pos:start="85:26" pos:end="85:28">[<expr pos:start="85:27" pos:end="85:27"><name pos:start="85:27" pos:end="85:27">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="89:5" pos:end="89:23"><expr pos:start="89:5" pos:end="89:22"><call pos:start="89:5" pos:end="89:22"><name pos:start="89:5" pos:end="89:12">av_freep</name><argument_list pos:start="89:13" pos:end="89:22">(<argument pos:start="89:14" pos:end="89:21"><expr pos:start="89:14" pos:end="89:21"><operator pos:start="89:14" pos:end="89:14">&amp;</operator><name pos:start="89:15" pos:end="89:21">counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:15">return <expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
