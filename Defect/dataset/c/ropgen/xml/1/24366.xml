<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24366.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">vp3_update_thread_context</name><parameter_list pos:start="1:37" pos:end="1:84">(<parameter pos:start="1:38" pos:end="1:56"><decl pos:start="1:38" pos:end="1:56"><type pos:start="1:38" pos:end="1:56"><name pos:start="1:38" pos:end="1:51">AVCodecContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">dst</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:83"><decl pos:start="1:59" pos:end="1:83"><type pos:start="1:59" pos:end="1:83"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:78">AVCodecContext</name> <modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:83">src</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:13">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">Vp3DecodeContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:29">dst</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>, <decl pos:start="5:43" pos:end="5:62"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:45">s1</name> <init pos:start="5:47" pos:end="5:62">= <expr pos:start="5:49" pos:end="5:62"><name pos:start="5:49" pos:end="5:62"><name pos:start="5:49" pos:end="5:51">src</name><operator pos:start="5:52" pos:end="5:53">-&gt;</operator><name pos:start="5:54" pos:end="5:62">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">qps_changed</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>, <decl pos:start="7:26" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:26">i</name></decl>, <decl pos:start="7:29" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:31">err</name></decl>;</decl_stmt>



<cpp:define pos:start="11:1" pos:end="11:147">#<cpp:directive pos:start="11:2" pos:end="11:7">define</cpp:directive> <cpp:macro pos:start="11:9" pos:end="11:53"><name pos:start="11:9" pos:end="11:19">copy_fields</name><parameter_list pos:start="11:20" pos:end="11:53">(<parameter pos:start="11:21" pos:end="11:22"><type pos:start="11:21" pos:end="11:22"><name pos:start="11:21" pos:end="11:22">to</name></type></parameter>, <parameter pos:start="11:25" pos:end="11:28"><type pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">from</name></type></parameter>, <parameter pos:start="11:31" pos:end="11:41"><type pos:start="11:31" pos:end="11:41"><name pos:start="11:31" pos:end="11:41">start_field</name></type></parameter>, <parameter pos:start="11:44" pos:end="11:52"><type pos:start="11:44" pos:end="11:52"><name pos:start="11:44" pos:end="11:52">end_field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="11:55" pos:end="11:147">memcpy(&amp;to-&gt;start_field, &amp;from-&gt;start_field, (char*)&amp;to-&gt;end_field - (char*)&amp;to-&gt;start_field)</cpp:value></cpp:define>



    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="19:33">(<expr pos:start="15:9" pos:end="19:32"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:34"><name pos:start="15:10" pos:end="15:11">s1</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:26">current_frame</name><operator pos:start="15:27" pos:end="15:27">.</operator><name pos:start="15:28" pos:end="15:31">data</name><index pos:start="15:32" pos:end="15:34">[<expr pos:start="15:33" pos:end="15:33"><literal type="number" pos:start="15:33" pos:end="15:33">0</literal></expr>]</index></name>

        <operator pos:start="17:9" pos:end="17:10">||</operator><name pos:start="17:11" pos:end="17:18"><name pos:start="17:11" pos:end="17:11">s</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:18">width</name></name> <operator pos:start="17:20" pos:end="17:21">!=</operator> <name pos:start="17:23" pos:end="17:31"><name pos:start="17:23" pos:end="17:24">s1</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:31">width</name></name>

        <operator pos:start="19:9" pos:end="19:10">||</operator><name pos:start="19:11" pos:end="19:19"><name pos:start="19:11" pos:end="19:11">s</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:19">height</name></name><operator pos:start="19:20" pos:end="19:21">!=</operator> <name pos:start="19:23" pos:end="19:32"><name pos:start="19:23" pos:end="19:24">s1</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:32">height</name></name></expr>)</condition> <block pos:start="19:35" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:18">

        <if_stmt pos:start="21:9" pos:end="23:60"><if pos:start="21:9" pos:end="23:60">if <condition pos:start="21:12" pos:end="21:20">(<expr pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:13">s</name> <operator pos:start="21:15" pos:end="21:16">!=</operator> <name pos:start="21:18" pos:end="21:19">s1</name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:60"><block_content pos:start="23:13" pos:end="23:60">

            <expr_stmt pos:start="23:13" pos:end="23:60"><expr pos:start="23:13" pos:end="23:59"><call pos:start="23:13" pos:end="23:59"><name pos:start="23:13" pos:end="23:23">copy_fields</name><argument_list pos:start="23:24" pos:end="23:59">(<argument pos:start="23:25" pos:end="23:25"><expr pos:start="23:25" pos:end="23:25"><name pos:start="23:25" pos:end="23:25">s</name></expr></argument>, <argument pos:start="23:28" pos:end="23:29"><expr pos:start="23:28" pos:end="23:29"><name pos:start="23:28" pos:end="23:29">s1</name></expr></argument>, <argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43">golden_frame</name></expr></argument>, <argument pos:start="23:46" pos:end="23:58"><expr pos:start="23:46" pos:end="23:58"><name pos:start="23:46" pos:end="23:58">current_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="93:5"><if pos:start="31:5" pos:end="93:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:9">s</name> <operator pos:start="31:11" pos:end="31:12">!=</operator> <name pos:start="31:14" pos:end="31:15">s1</name></expr>)</condition> <block pos:start="31:18" pos:end="93:5">{<block_content pos:start="35:9" pos:end="92:0">

        <comment type="line" pos:start="33:9" pos:end="33:61">// init tables if the first frame hasn't been decoded</comment>

        <if_stmt pos:start="35:9" pos:end="55:9"><if pos:start="35:9" pos:end="55:9">if <condition pos:start="35:12" pos:end="35:38">(<expr pos:start="35:13" pos:end="35:37"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:37"><name pos:start="35:14" pos:end="35:14">s</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:29">current_frame</name><operator pos:start="35:30" pos:end="35:30">.</operator><name pos:start="35:31" pos:end="35:34">data</name><index pos:start="35:35" pos:end="35:37">[<expr pos:start="35:36" pos:end="35:36"><literal type="number" pos:start="35:36" pos:end="35:36">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="35:40" pos:end="55:9">{<block_content pos:start="37:13" pos:end="53:102">

            <decl_stmt pos:start="37:13" pos:end="37:51"><decl pos:start="37:13" pos:end="37:32"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:32">y_fragment_count</name></decl>, <decl pos:start="37:35" pos:end="37:50"><type ref="prev" pos:start="37:13" pos:end="37:15"/><name pos:start="37:35" pos:end="37:50">c_fragment_count</name></decl>;</decl_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:27"><expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:20">avctx</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <name pos:start="39:24" pos:end="39:26">dst</name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:39"><expr pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:15">err</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:38"><name pos:start="41:19" pos:end="41:33">allocate_tables</name><argument_list pos:start="41:34" pos:end="41:38">(<argument pos:start="41:35" pos:end="41:37"><expr pos:start="41:35" pos:end="41:37"><name pos:start="41:35" pos:end="41:37">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="45:27"><if pos:start="43:13" pos:end="45:27">if <condition pos:start="43:16" pos:end="43:20">(<expr pos:start="43:17" pos:end="43:19"><name pos:start="43:17" pos:end="43:19">err</name></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:27"><block_content pos:start="45:17" pos:end="45:27">

                <return pos:start="45:17" pos:end="45:27">return <expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">err</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:76"><expr pos:start="47:13" pos:end="47:75"><name pos:start="47:13" pos:end="47:28">y_fragment_count</name> <operator pos:start="47:30" pos:end="47:30">=</operator> <name pos:start="47:32" pos:end="47:51"><name pos:start="47:32" pos:end="47:32">s</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:48">fragment_width</name><index pos:start="47:49" pos:end="47:51">[<expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr>]</index></name> <operator pos:start="47:53" pos:end="47:53">*</operator> <name pos:start="47:55" pos:end="47:75"><name pos:start="47:55" pos:end="47:55">s</name><operator pos:start="47:56" pos:end="47:57">-&gt;</operator><name pos:start="47:58" pos:end="47:72">fragment_height</name><index pos:start="47:73" pos:end="47:75">[<expr pos:start="47:74" pos:end="47:74"><literal type="number" pos:start="47:74" pos:end="47:74">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:76"><expr pos:start="49:13" pos:end="49:75"><name pos:start="49:13" pos:end="49:28">c_fragment_count</name> <operator pos:start="49:30" pos:end="49:30">=</operator> <name pos:start="49:32" pos:end="49:51"><name pos:start="49:32" pos:end="49:32">s</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:48">fragment_width</name><index pos:start="49:49" pos:end="49:51">[<expr pos:start="49:50" pos:end="49:50"><literal type="number" pos:start="49:50" pos:end="49:50">1</literal></expr>]</index></name> <operator pos:start="49:53" pos:end="49:53">*</operator> <name pos:start="49:55" pos:end="49:75"><name pos:start="49:55" pos:end="49:55">s</name><operator pos:start="49:56" pos:end="49:57">-&gt;</operator><name pos:start="49:58" pos:end="49:72">fragment_height</name><index pos:start="49:73" pos:end="49:75">[<expr pos:start="49:74" pos:end="49:74"><literal type="number" pos:start="49:74" pos:end="49:74">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:102"><expr pos:start="51:13" pos:end="51:101"><call pos:start="51:13" pos:end="51:101"><name pos:start="51:13" pos:end="51:18">memcpy</name><argument_list pos:start="51:19" pos:end="51:101">(<argument pos:start="51:20" pos:end="51:35"><expr pos:start="51:20" pos:end="51:35"><name pos:start="51:20" pos:end="51:35"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:32">motion_val</name><index pos:start="51:33" pos:end="51:35">[<expr pos:start="51:34" pos:end="51:34"><literal type="number" pos:start="51:34" pos:end="51:34">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:38" pos:end="51:54"><expr pos:start="51:38" pos:end="51:54"><name pos:start="51:38" pos:end="51:54"><name pos:start="51:38" pos:end="51:39">s1</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:51">motion_val</name><index pos:start="51:52" pos:end="51:54">[<expr pos:start="51:53" pos:end="51:53"><literal type="number" pos:start="51:53" pos:end="51:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:57" pos:end="51:100"><expr pos:start="51:57" pos:end="51:100"><name pos:start="51:57" pos:end="51:72">y_fragment_count</name> <operator pos:start="51:74" pos:end="51:74">*</operator> <sizeof pos:start="51:76" pos:end="51:100">sizeof<argument_list pos:start="51:82" pos:end="51:100">(<argument pos:start="51:83" pos:end="51:99"><expr pos:start="51:83" pos:end="51:99"><operator pos:start="51:83" pos:end="51:83">*</operator><name pos:start="51:84" pos:end="51:99"><name pos:start="51:84" pos:end="51:84">s</name><operator pos:start="51:85" pos:end="51:86">-&gt;</operator><name pos:start="51:87" pos:end="51:96">motion_val</name><index pos:start="51:97" pos:end="51:99">[<expr pos:start="51:98" pos:end="51:98"><literal type="number" pos:start="51:98" pos:end="51:98">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:102"><expr pos:start="53:13" pos:end="53:101"><call pos:start="53:13" pos:end="53:101"><name pos:start="53:13" pos:end="53:18">memcpy</name><argument_list pos:start="53:19" pos:end="53:101">(<argument pos:start="53:20" pos:end="53:35"><expr pos:start="53:20" pos:end="53:35"><name pos:start="53:20" pos:end="53:35"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:32">motion_val</name><index pos:start="53:33" pos:end="53:35">[<expr pos:start="53:34" pos:end="53:34"><literal type="number" pos:start="53:34" pos:end="53:34">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="53:38" pos:end="53:54"><expr pos:start="53:38" pos:end="53:54"><name pos:start="53:38" pos:end="53:54"><name pos:start="53:38" pos:end="53:39">s1</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:51">motion_val</name><index pos:start="53:52" pos:end="53:54">[<expr pos:start="53:53" pos:end="53:53"><literal type="number" pos:start="53:53" pos:end="53:53">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="53:57" pos:end="53:100"><expr pos:start="53:57" pos:end="53:100"><name pos:start="53:57" pos:end="53:72">c_fragment_count</name> <operator pos:start="53:74" pos:end="53:74">*</operator> <sizeof pos:start="53:76" pos:end="53:100">sizeof<argument_list pos:start="53:82" pos:end="53:100">(<argument pos:start="53:83" pos:end="53:99"><expr pos:start="53:83" pos:end="53:99"><operator pos:start="53:83" pos:end="53:83">*</operator><name pos:start="53:84" pos:end="53:99"><name pos:start="53:84" pos:end="53:84">s</name><operator pos:start="53:85" pos:end="53:86">-&gt;</operator><name pos:start="53:87" pos:end="53:96">motion_val</name><index pos:start="53:97" pos:end="53:99">[<expr pos:start="53:98" pos:end="53:98"><literal type="number" pos:start="53:98" pos:end="53:98">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="59:9" pos:end="59:35">// copy previous frame data</comment>

        <expr_stmt pos:start="61:9" pos:end="61:46"><expr pos:start="61:9" pos:end="61:45"><call pos:start="61:9" pos:end="61:45"><name pos:start="61:9" pos:end="61:19">copy_fields</name><argument_list pos:start="61:20" pos:end="61:45">(<argument pos:start="61:21" pos:end="61:21"><expr pos:start="61:21" pos:end="61:21"><name pos:start="61:21" pos:end="61:21">s</name></expr></argument>, <argument pos:start="61:24" pos:end="61:25"><expr pos:start="61:24" pos:end="61:25"><name pos:start="61:24" pos:end="61:25">s1</name></expr></argument>, <argument pos:start="61:28" pos:end="61:39"><expr pos:start="61:28" pos:end="61:39"><name pos:start="61:28" pos:end="61:39">golden_frame</name></expr></argument>, <argument pos:start="61:42" pos:end="61:44"><expr pos:start="61:42" pos:end="61:44"><name pos:start="61:42" pos:end="61:44">dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="65:9" pos:end="65:40">// copy qscale data if necessary</comment>

        <for pos:start="67:9" pos:end="77:9">for <control pos:start="67:13" pos:end="67:31">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:26"><expr pos:start="67:21" pos:end="67:25"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <literal type="number" pos:start="67:25" pos:end="67:25">3</literal></expr>;</condition> <incr pos:start="67:28" pos:end="67:30"><expr pos:start="67:28" pos:end="67:30"><name pos:start="67:28" pos:end="67:28">i</name><operator pos:start="67:29" pos:end="67:30">++</operator></expr></incr>)</control> <block pos:start="67:33" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:13">

            <if_stmt pos:start="69:13" pos:end="75:13"><if pos:start="69:13" pos:end="75:13">if <condition pos:start="69:16" pos:end="69:40">(<expr pos:start="69:17" pos:end="69:39"><name pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:22">qps</name><index pos:start="69:23" pos:end="69:25">[<expr pos:start="69:24" pos:end="69:24"><name pos:start="69:24" pos:end="69:24">i</name></expr>]</index></name> <operator pos:start="69:27" pos:end="69:28">!=</operator> <name pos:start="69:30" pos:end="69:39"><name pos:start="69:30" pos:end="69:31">s1</name><operator pos:start="69:32" pos:end="69:33">-&gt;</operator><name pos:start="69:34" pos:end="69:36">qps</name><index pos:start="69:37" pos:end="69:39">[<expr pos:start="69:38" pos:end="69:38"><literal type="number" pos:start="69:38" pos:end="69:38">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="69:42" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:70">

                <expr_stmt pos:start="71:17" pos:end="71:32"><expr pos:start="71:17" pos:end="71:31"><name pos:start="71:17" pos:end="71:27">qps_changed</name> <operator pos:start="71:29" pos:end="71:29">=</operator> <literal type="number" pos:start="71:31" pos:end="71:31">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:70"><expr pos:start="73:17" pos:end="73:69"><call pos:start="73:17" pos:end="73:69"><name pos:start="73:17" pos:end="73:22">memcpy</name><argument_list pos:start="73:23" pos:end="73:69">(<argument pos:start="73:24" pos:end="73:34"><expr pos:start="73:24" pos:end="73:34"><operator pos:start="73:24" pos:end="73:24">&amp;</operator><name pos:start="73:25" pos:end="73:34"><name pos:start="73:25" pos:end="73:25">s</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:31">qmat</name><index pos:start="73:32" pos:end="73:34">[<expr pos:start="73:33" pos:end="73:33"><name pos:start="73:33" pos:end="73:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="73:37" pos:end="73:48"><expr pos:start="73:37" pos:end="73:48"><operator pos:start="73:37" pos:end="73:37">&amp;</operator><name pos:start="73:38" pos:end="73:48"><name pos:start="73:38" pos:end="73:39">s1</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:45">qmat</name><index pos:start="73:46" pos:end="73:48">[<expr pos:start="73:47" pos:end="73:47"><name pos:start="73:47" pos:end="73:47">i</name></expr>]</index></name></expr></argument>, <argument pos:start="73:51" pos:end="73:68"><expr pos:start="73:51" pos:end="73:68"><sizeof pos:start="73:51" pos:end="73:68">sizeof<argument_list pos:start="73:57" pos:end="73:68">(<argument pos:start="73:58" pos:end="73:67"><expr pos:start="73:58" pos:end="73:67"><name pos:start="73:58" pos:end="73:67"><name pos:start="73:58" pos:end="73:58">s</name><operator pos:start="73:59" pos:end="73:60">-&gt;</operator><name pos:start="73:61" pos:end="73:64">qmat</name><index pos:start="73:65" pos:end="73:67">[<expr pos:start="73:66" pos:end="73:66"><name pos:start="73:66" pos:end="73:66">i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="81:9" pos:end="83:108"><if pos:start="81:9" pos:end="83:108">if <condition pos:start="81:12" pos:end="81:36">(<expr pos:start="81:13" pos:end="81:35"><name pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:18">qps</name><index pos:start="81:19" pos:end="81:21">[<expr pos:start="81:20" pos:end="81:20"><literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>]</index></name> <operator pos:start="81:23" pos:end="81:24">!=</operator> <name pos:start="81:26" pos:end="81:35"><name pos:start="81:26" pos:end="81:27">s1</name><operator pos:start="81:28" pos:end="81:29">-&gt;</operator><name pos:start="81:30" pos:end="81:32">qps</name><index pos:start="81:33" pos:end="81:35">[<expr pos:start="81:34" pos:end="81:34"><literal type="number" pos:start="81:34" pos:end="81:34">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:108"><block_content pos:start="83:13" pos:end="83:108">

            <expr_stmt pos:start="83:13" pos:end="83:108"><expr pos:start="83:13" pos:end="83:107"><call pos:start="83:13" pos:end="83:107"><name pos:start="83:13" pos:end="83:18">memcpy</name><argument_list pos:start="83:19" pos:end="83:107">(<argument pos:start="83:20" pos:end="83:44"><expr pos:start="83:20" pos:end="83:44"><operator pos:start="83:20" pos:end="83:20">&amp;</operator><name pos:start="83:21" pos:end="83:44"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:44">bounding_values_array</name></name></expr></argument>, <argument pos:start="83:47" pos:end="83:72"><expr pos:start="83:47" pos:end="83:72"><operator pos:start="83:47" pos:end="83:47">&amp;</operator><name pos:start="83:48" pos:end="83:72"><name pos:start="83:48" pos:end="83:49">s1</name><operator pos:start="83:50" pos:end="83:51">-&gt;</operator><name pos:start="83:52" pos:end="83:72">bounding_values_array</name></name></expr></argument>, <argument pos:start="83:75" pos:end="83:106"><expr pos:start="83:75" pos:end="83:106"><sizeof pos:start="83:75" pos:end="83:106">sizeof<argument_list pos:start="83:81" pos:end="83:106">(<argument pos:start="83:82" pos:end="83:105"><expr pos:start="83:82" pos:end="83:105"><name pos:start="83:82" pos:end="83:105"><name pos:start="83:82" pos:end="83:82">s</name><operator pos:start="83:83" pos:end="83:84">-&gt;</operator><name pos:start="83:85" pos:end="83:105">bounding_values_array</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="87:9" pos:end="92:0"><if pos:start="87:9" pos:end="92:0">if <condition pos:start="87:12" pos:end="87:24">(<expr pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:23">qps_changed</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="92:0"><block_content pos:start="89:13" pos:end="92:0">

            <expr_stmt pos:start="89:13" pos:end="92:0"><expr pos:start="89:13" pos:end="89:53"><call pos:start="89:13" pos:end="89:53"><name pos:start="89:13" pos:end="89:23">copy_fields</name><argument_list pos:start="89:24" pos:end="89:53">(<argument pos:start="89:25" pos:end="89:25"><expr pos:start="89:25" pos:end="89:25"><name pos:start="89:25" pos:end="89:25">s</name></expr></argument>, <argument pos:start="89:28" pos:end="89:29"><expr pos:start="89:28" pos:end="89:29"><name pos:start="89:28" pos:end="89:29">s1</name></expr></argument>, <argument pos:start="89:32" pos:end="89:34"><expr pos:start="89:32" pos:end="89:34"><name pos:start="89:32" pos:end="89:34">qps</name></expr></argument>, <argument pos:start="89:37" pos:end="89:52"><expr pos:start="89:37" pos:end="89:52"><name pos:start="89:37" pos:end="89:52">superblock_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:undef pos:start="91:1" pos:end="91:18">#<cpp:directive pos:start="91:2" pos:end="91:6">undef</cpp:directive> <name pos:start="91:8" pos:end="91:18">copy_fields</name></cpp:undef>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:23"><expr pos:start="97:5" pos:end="97:22"><call pos:start="97:5" pos:end="97:22"><name pos:start="97:5" pos:end="97:17">update_frames</name><argument_list pos:start="97:18" pos:end="97:22">(<argument pos:start="97:19" pos:end="97:21"><expr pos:start="97:19" pos:end="97:21"><name pos:start="97:19" pos:end="97:21">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
