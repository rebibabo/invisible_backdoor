<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12242.c" pos:tabs="8"><function pos:start="1:1" pos:end="64:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:41">qcow2_crypto_hdr_init_func</name><parameter_list pos:start="1:42" pos:end="3:69">(<parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><name pos:start="1:43" pos:end="1:54">QCryptoBlock</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">block</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:79"><decl pos:start="1:64" pos:end="1:79"><type pos:start="1:64" pos:end="1:79"><name pos:start="1:64" pos:end="1:69">size_t</name></type> <name pos:start="1:71" pos:end="1:79">headerlen</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:54"><decl pos:start="3:43" pos:end="3:54"><type pos:start="3:43" pos:end="3:54"><name pos:start="3:43" pos:end="3:46">void</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:54">opaque</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:68"><decl pos:start="3:57" pos:end="3:68"><type pos:start="3:57" pos:end="3:68"><name pos:start="3:57" pos:end="3:61">Error</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier><modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:68">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="64:1">{<block_content pos:start="7:5" pos:end="62:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name> <init pos:start="7:26" pos:end="7:33">= <expr pos:start="7:28" pos:end="7:33"><name pos:start="7:28" pos:end="7:33">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">BDRVQcow2State</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:34">= <expr pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:26">bs</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:22">clusterlen</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:46"><expr pos:start="17:5" pos:end="17:45"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:45"><name pos:start="17:11" pos:end="17:30">qcow2_alloc_clusters</name><argument_list pos:start="17:31" pos:end="17:45">(<argument pos:start="17:32" pos:end="17:33"><expr pos:start="17:32" pos:end="17:33"><name pos:start="17:32" pos:end="17:33">bs</name></expr></argument>, <argument pos:start="17:36" pos:end="17:44"><expr pos:start="17:36" pos:end="17:44"><name pos:start="17:36" pos:end="17:44">headerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">&lt;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>)</condition> <block pos:start="19:18" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:18">

        <expr_stmt pos:start="21:9" pos:end="25:36"><expr pos:start="21:9" pos:end="25:35"><call pos:start="21:9" pos:end="25:35"><name pos:start="21:9" pos:end="21:24">error_setg_errno</name><argument_list pos:start="21:25" pos:end="25:35">(<argument pos:start="21:26" pos:end="21:29"><expr pos:start="21:26" pos:end="21:29"><name pos:start="21:26" pos:end="21:29">errp</name></expr></argument>, <argument pos:start="21:32" pos:end="21:35"><expr pos:start="21:32" pos:end="21:35"><operator pos:start="21:32" pos:end="21:32">-</operator><name pos:start="21:33" pos:end="21:35">ret</name></expr></argument>,

                         <argument pos:start="23:26" pos:end="23:75"><expr pos:start="23:26" pos:end="23:75"><literal type="string" pos:start="23:26" pos:end="23:75">"Cannot allocate cluster for LUKS header size %zu"</literal></expr></argument>,

                         <argument pos:start="25:26" pos:end="25:34"><expr pos:start="25:26" pos:end="25:34"><name pos:start="25:26" pos:end="25:34">headerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:40"><expr pos:start="33:5" pos:end="33:39"><name pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:20">crypto_header</name><operator pos:start="33:21" pos:end="33:21">.</operator><name pos:start="33:22" pos:end="33:27">length</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <name pos:start="33:31" pos:end="33:39">headerlen</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:20">crypto_header</name><operator pos:start="35:21" pos:end="35:21">.</operator><name pos:start="35:22" pos:end="35:27">offset</name></name> <operator pos:start="35:29" pos:end="35:29">=</operator> <name pos:start="35:31" pos:end="35:33">ret</name></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="41:48">/* Zero fill remaining space in cluster so it has predictable

     * content in case of future spec changes */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:66"><expr pos:start="43:5" pos:end="43:65"><name pos:start="43:5" pos:end="43:14">clusterlen</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="43:47"><name pos:start="43:18" pos:end="43:33">size_to_clusters</name><argument_list pos:start="43:34" pos:end="43:47">(<argument pos:start="43:35" pos:end="43:35"><expr pos:start="43:35" pos:end="43:35"><name pos:start="43:35" pos:end="43:35">s</name></expr></argument>, <argument pos:start="43:38" pos:end="43:46"><expr pos:start="43:38" pos:end="43:46"><name pos:start="43:38" pos:end="43:46">headerlen</name></expr></argument>)</argument_list></call> <operator pos:start="43:49" pos:end="43:49">*</operator> <name pos:start="43:51" pos:end="43:65"><name pos:start="43:51" pos:end="43:51">s</name><operator pos:start="43:52" pos:end="43:53">-&gt;</operator><name pos:start="43:54" pos:end="43:65">cluster_size</name></name></expr>;</expr_stmt>


    <expr_stmt pos:start="46:5" pos:end="50:56"><expr pos:start="46:5" pos:end="50:55"><name pos:start="46:5" pos:end="46:7">ret</name> <operator pos:start="46:9" pos:end="46:9">=</operator> <call pos:start="46:11" pos:end="50:55"><name pos:start="46:11" pos:end="46:28">bdrv_pwrite_zeroes</name><argument_list pos:start="46:29" pos:end="50:55">(<argument pos:start="46:30" pos:end="46:37"><expr pos:start="46:30" pos:end="46:37"><name pos:start="46:30" pos:end="46:37"><name pos:start="46:30" pos:end="46:31">bs</name><operator pos:start="46:32" pos:end="46:33">-&gt;</operator><name pos:start="46:34" pos:end="46:37">file</name></name></expr></argument>,

                             <argument pos:start="48:30" pos:end="48:44"><expr pos:start="48:30" pos:end="48:44"><name pos:start="48:30" pos:end="48:32">ret</name> <operator pos:start="48:34" pos:end="48:34">+</operator> <name pos:start="48:36" pos:end="48:44">headerlen</name></expr></argument>,

                             <argument pos:start="50:30" pos:end="50:51"><expr pos:start="50:30" pos:end="50:51"><name pos:start="50:30" pos:end="50:39">clusterlen</name> <operator pos:start="50:41" pos:end="50:41">-</operator> <name pos:start="50:43" pos:end="50:51">headerlen</name></expr></argument>, <argument pos:start="50:54" pos:end="50:54"><expr pos:start="50:54" pos:end="50:54"><literal type="number" pos:start="50:54" pos:end="50:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="52:5" pos:end="58:5"><if pos:start="52:5" pos:end="58:5">if <condition pos:start="52:8" pos:end="52:16">(<expr pos:start="52:9" pos:end="52:15"><name pos:start="52:9" pos:end="52:11">ret</name> <operator pos:start="52:13" pos:end="52:13">&lt;</operator> <literal type="number" pos:start="52:15" pos:end="52:15">0</literal></expr>)</condition> <block pos:start="52:18" pos:end="58:5">{<block_content pos:start="54:9" pos:end="56:18">

        <expr_stmt pos:start="54:9" pos:end="54:78"><expr pos:start="54:9" pos:end="54:77"><call pos:start="54:9" pos:end="54:77"><name pos:start="54:9" pos:end="54:24">error_setg_errno</name><argument_list pos:start="54:25" pos:end="54:77">(<argument pos:start="54:26" pos:end="54:29"><expr pos:start="54:26" pos:end="54:29"><name pos:start="54:26" pos:end="54:29">errp</name></expr></argument>, <argument pos:start="54:32" pos:end="54:35"><expr pos:start="54:32" pos:end="54:35"><operator pos:start="54:32" pos:end="54:32">-</operator><name pos:start="54:33" pos:end="54:35">ret</name></expr></argument>, <argument pos:start="54:38" pos:end="54:76"><expr pos:start="54:38" pos:end="54:76"><literal type="string" pos:start="54:38" pos:end="54:76">"Could not zero fill encryption header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="56:9" pos:end="56:18">return <expr pos:start="56:16" pos:end="56:17"><operator pos:start="56:16" pos:end="56:16">-</operator><literal type="number" pos:start="56:17" pos:end="56:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="62:5" pos:end="62:15">return <expr pos:start="62:12" pos:end="62:14"><name pos:start="62:12" pos:end="62:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
