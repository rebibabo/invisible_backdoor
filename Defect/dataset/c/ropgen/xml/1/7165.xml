<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7165.c" pos:tabs="8"><function pos:start="1:1" pos:end="703:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint64_t</name></type> <name pos:start="1:10" pos:end="1:22">helper_ld_asi</name><parameter_list pos:start="1:23" pos:end="1:70">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:40"><name pos:start="1:24" pos:end="1:35">target_ulong</name></type> <name pos:start="1:37" pos:end="1:40">addr</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:49"><decl pos:start="1:43" pos:end="1:49"><type pos:start="1:43" pos:end="1:49"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:49">asi</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:59"><decl pos:start="1:52" pos:end="1:59"><type pos:start="1:52" pos:end="1:59"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:59">size</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:69"><decl pos:start="1:62" pos:end="1:69"><type pos:start="1:62" pos:end="1:69"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:69">sign</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="703:1">{<block_content pos:start="5:5" pos:end="701:15">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:16">ret</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="7:1" pos:end="7:22">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:22"><call pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:11">defined</name><argument_list pos:start="7:12" pos:end="7:22">(<argument pos:start="7:13" pos:end="7:21"><expr pos:start="7:13" pos:end="7:21"><name pos:start="7:13" pos:end="7:21">DEBUG_ASI</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:26">last_addr</name> <init pos:start="9:28" pos:end="9:33">= <expr pos:start="9:30" pos:end="9:33"><name pos:start="9:30" pos:end="9:33">addr</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:7">asi</name> <operator pos:start="15:9" pos:end="15:10">&amp;=</operator> <literal type="number" pos:start="15:12" pos:end="15:15">0xff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="27:37"><if pos:start="19:5" pos:end="27:37">if <condition pos:start="19:8" pos:end="25:42">(<expr pos:start="19:9" pos:end="25:41"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:12">asi</name> <operator pos:start="19:14" pos:end="19:14">&lt;</operator> <literal type="number" pos:start="19:16" pos:end="19:19">0x80</literal> <operator pos:start="19:21" pos:end="19:22">&amp;&amp;</operator> <operator pos:start="19:24" pos:end="19:24">(</operator><name pos:start="19:25" pos:end="19:35"><name pos:start="19:25" pos:end="19:27">env</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:35">pstate</name></name> <operator pos:start="19:37" pos:end="19:37">&amp;</operator> <name pos:start="19:39" pos:end="19:45">PS_PRIV</name><operator pos:start="19:46" pos:end="19:46">)</operator> <operator pos:start="19:48" pos:end="19:49">==</operator> <literal type="number" pos:start="19:51" pos:end="19:51">0</literal><operator pos:start="19:52" pos:end="19:52">)</operator>

        <operator pos:start="21:9" pos:end="21:10">||</operator> <operator pos:start="21:12" pos:end="21:12">(</operator><operator pos:start="21:13" pos:end="21:13">(</operator><name pos:start="21:14" pos:end="21:31"><name pos:start="21:14" pos:end="21:16">env</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:21">def</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:31">features</name></name> <operator pos:start="21:33" pos:end="21:33">&amp;</operator> <name pos:start="21:35" pos:end="21:50">CPU_FEATURE_HYPV</name><operator pos:start="21:51" pos:end="21:51">)</operator>

            <operator pos:start="23:13" pos:end="23:14">&amp;&amp;</operator> <name pos:start="23:16" pos:end="23:18">asi</name> <operator pos:start="23:20" pos:end="23:21">&gt;=</operator> <literal type="number" pos:start="23:23" pos:end="23:26">0x30</literal> <operator pos:start="23:28" pos:end="23:29">&amp;&amp;</operator> <name pos:start="23:31" pos:end="23:33">asi</name> <operator pos:start="23:35" pos:end="23:35">&lt;</operator> <literal type="number" pos:start="23:37" pos:end="23:40">0x80</literal>

            <operator pos:start="25:13" pos:end="25:14">&amp;&amp;</operator> <operator pos:start="25:16" pos:end="25:16">!</operator><operator pos:start="25:17" pos:end="25:17">(</operator><name pos:start="25:18" pos:end="25:29"><name pos:start="25:18" pos:end="25:20">env</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:29">hpstate</name></name> <operator pos:start="25:31" pos:end="25:31">&amp;</operator> <name pos:start="25:33" pos:end="25:39">HS_PRIV</name><operator pos:start="25:40" pos:end="25:40">)</operator><operator pos:start="25:41" pos:end="25:41">)</operator></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:37"><block_content pos:start="27:9" pos:end="27:37">

        <expr_stmt pos:start="27:9" pos:end="27:37"><expr pos:start="27:9" pos:end="27:36"><call pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:23">raise_exception</name><argument_list pos:start="27:24" pos:end="27:36">(<argument pos:start="27:25" pos:end="27:35"><expr pos:start="27:25" pos:end="27:35"><name pos:start="27:25" pos:end="27:35">TT_PRIV_ACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><call pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:22">helper_check_align</name><argument_list pos:start="31:23" pos:end="31:38">(<argument pos:start="31:24" pos:end="31:27"><expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">addr</name></expr></argument>, <argument pos:start="31:30" pos:end="31:37"><expr pos:start="31:30" pos:end="31:37"><name pos:start="31:30" pos:end="31:33">size</name> <operator pos:start="31:35" pos:end="31:35">-</operator> <literal type="number" pos:start="31:37" pos:end="31:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="33:5" pos:end="603:5">switch <condition pos:start="33:12" pos:end="33:16">(<expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">asi</name></expr>)</condition> <block pos:start="33:18" pos:end="603:5">{<block_content pos:start="35:5" pos:end="601:14">

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0x82</literal></expr>:</case> <comment type="line" pos:start="35:16" pos:end="35:34">// Primary no-fault</comment>

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><literal type="number" pos:start="37:10" pos:end="37:13">0x8a</literal></expr>:</case> <comment type="line" pos:start="37:16" pos:end="37:37">// Primary no-fault LE</comment>

    <case pos:start="39:5" pos:end="39:14">case <expr pos:start="39:10" pos:end="39:13"><literal type="number" pos:start="39:10" pos:end="39:13">0x83</literal></expr>:</case> <comment type="line" pos:start="39:16" pos:end="39:36">// Secondary no-fault</comment>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0x8b</literal></expr>:</case> <comment type="line" pos:start="41:16" pos:end="41:39">// Secondary no-fault LE</comment>

        <block pos:start="43:9" pos:end="65:9">{<block_content pos:start="47:13" pos:end="63:13">

            <comment type="block" pos:start="45:13" pos:end="45:70">/* secondary space access has lowest asi bit equal to 1 */</comment>

            <decl_stmt pos:start="47:13" pos:end="49:72"><decl pos:start="47:13" pos:end="49:71"><type pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:15">int</name></type> <name pos:start="47:17" pos:end="47:30">access_mmu_idx</name> <init pos:start="47:32" pos:end="49:71">= <expr pos:start="47:34" pos:end="49:71"><ternary pos:start="47:34" pos:end="49:71"><condition pos:start="47:34" pos:end="47:46"><expr pos:start="47:34" pos:end="47:44"><operator pos:start="47:34" pos:end="47:34">(</operator> <name pos:start="47:36" pos:end="47:38">asi</name> <operator pos:start="47:40" pos:end="47:40">&amp;</operator> <literal type="number" pos:start="47:42" pos:end="47:42">1</literal> <operator pos:start="47:44" pos:end="47:44">)</operator></expr> ?</condition><then pos:start="47:48" pos:end="47:61"> <expr pos:start="47:48" pos:end="47:61"><name pos:start="47:48" pos:end="47:61">MMU_KERNEL_IDX</name></expr>

                                             </then><else pos:start="49:46" pos:end="49:71">: <expr pos:start="49:48" pos:end="49:71"><name pos:start="49:48" pos:end="49:71">MMU_KERNEL_SECONDARY_IDX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="53:13" pos:end="63:13"><if pos:start="53:13" pos:end="63:13">if <condition pos:start="53:16" pos:end="53:78">(<expr pos:start="53:17" pos:end="53:77"><call pos:start="53:17" pos:end="53:68"><name pos:start="53:17" pos:end="53:41">cpu_get_phys_page_nofault</name><argument_list pos:start="53:42" pos:end="53:68">(<argument pos:start="53:43" pos:end="53:45"><expr pos:start="53:43" pos:end="53:45"><name pos:start="53:43" pos:end="53:45">env</name></expr></argument>, <argument pos:start="53:48" pos:end="53:51"><expr pos:start="53:48" pos:end="53:51"><name pos:start="53:48" pos:end="53:51">addr</name></expr></argument>, <argument pos:start="53:54" pos:end="53:67"><expr pos:start="53:54" pos:end="53:67"><name pos:start="53:54" pos:end="53:67">access_mmu_idx</name></expr></argument>)</argument_list></call> <operator pos:start="53:70" pos:end="53:71">==</operator> <operator pos:start="53:73" pos:end="53:73">-</operator><literal type="number" pos:start="53:74" pos:end="53:77">1ULL</literal></expr>)</condition> <block pos:start="53:80" pos:end="63:13">{<block_content pos:start="57:17" pos:end="61:25">

<cpp:ifdef pos:start="55:1" pos:end="55:16">#<cpp:directive pos:start="55:2" pos:end="55:6">ifdef</cpp:directive> <name pos:start="55:8" pos:end="55:16">DEBUG_ASI</name></cpp:ifdef>

                <expr_stmt pos:start="57:17" pos:end="60:0"><expr pos:start="57:17" pos:end="57:60"><call pos:start="57:17" pos:end="57:60"><name pos:start="57:17" pos:end="57:24">dump_asi</name><argument_list pos:start="57:25" pos:end="57:60">(<argument pos:start="57:26" pos:end="57:32"><expr pos:start="57:26" pos:end="57:32"><literal type="string" pos:start="57:26" pos:end="57:32">"read "</literal></expr></argument>, <argument pos:start="57:35" pos:end="57:43"><expr pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:43">last_addr</name></expr></argument>, <argument pos:start="57:46" pos:end="57:48"><expr pos:start="57:46" pos:end="57:48"><name pos:start="57:46" pos:end="57:48">asi</name></expr></argument>, <argument pos:start="57:51" pos:end="57:54"><expr pos:start="57:51" pos:end="57:54"><name pos:start="57:51" pos:end="57:54">size</name></expr></argument>, <argument pos:start="57:57" pos:end="57:59"><expr pos:start="57:57" pos:end="57:59"><name pos:start="57:57" pos:end="57:59">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

                <return pos:start="61:17" pos:end="61:25">return <expr pos:start="61:24" pos:end="61:24"><literal type="number" pos:start="61:24" pos:end="61:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <comment type="line" pos:start="67:9" pos:end="67:23">// Fall through</comment>

    <case pos:start="69:5" pos:end="69:14">case <expr pos:start="69:10" pos:end="69:13"><literal type="number" pos:start="69:10" pos:end="69:13">0x10</literal></expr>:</case> <comment type="line" pos:start="69:16" pos:end="69:36">// As if user primary</comment>

    <case pos:start="71:5" pos:end="71:14">case <expr pos:start="71:10" pos:end="71:13"><literal type="number" pos:start="71:10" pos:end="71:13">0x11</literal></expr>:</case> <comment type="line" pos:start="71:16" pos:end="71:38">// As if user secondary</comment>

    <case pos:start="73:5" pos:end="73:14">case <expr pos:start="73:10" pos:end="73:13"><literal type="number" pos:start="73:10" pos:end="73:13">0x18</literal></expr>:</case> <comment type="line" pos:start="73:16" pos:end="73:39">// As if user primary LE</comment>

    <case pos:start="75:5" pos:end="75:14">case <expr pos:start="75:10" pos:end="75:13"><literal type="number" pos:start="75:10" pos:end="75:13">0x19</literal></expr>:</case> <comment type="line" pos:start="75:16" pos:end="75:41">// As if user secondary LE</comment>

    <case pos:start="77:5" pos:end="77:14">case <expr pos:start="77:10" pos:end="77:13"><literal type="number" pos:start="77:10" pos:end="77:13">0x80</literal></expr>:</case> <comment type="line" pos:start="77:16" pos:end="77:25">// Primary</comment>

    <case pos:start="79:5" pos:end="79:14">case <expr pos:start="79:10" pos:end="79:13"><literal type="number" pos:start="79:10" pos:end="79:13">0x81</literal></expr>:</case> <comment type="line" pos:start="79:16" pos:end="79:27">// Secondary</comment>

    <case pos:start="81:5" pos:end="81:14">case <expr pos:start="81:10" pos:end="81:13"><literal type="number" pos:start="81:10" pos:end="81:13">0x88</literal></expr>:</case> <comment type="line" pos:start="81:16" pos:end="81:28">// Primary LE</comment>

    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0x89</literal></expr>:</case> <comment type="line" pos:start="83:16" pos:end="83:30">// Secondary LE</comment>

    <case pos:start="85:5" pos:end="85:14">case <expr pos:start="85:10" pos:end="85:13"><literal type="number" pos:start="85:10" pos:end="85:13">0xe2</literal></expr>:</case> <comment type="line" pos:start="85:16" pos:end="85:43">// UA2007 Primary block init</comment>

    <case pos:start="87:5" pos:end="87:14">case <expr pos:start="87:10" pos:end="87:13"><literal type="number" pos:start="87:10" pos:end="87:13">0xe3</literal></expr>:</case> <comment type="line" pos:start="87:16" pos:end="87:45">// UA2007 Secondary block init</comment>

        <if_stmt pos:start="89:9" pos:end="267:9"><if pos:start="89:9" pos:end="197:9">if <condition pos:start="89:12" pos:end="89:52">(<expr pos:start="89:13" pos:end="89:51"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:16">asi</name> <operator pos:start="89:18" pos:end="89:18">&amp;</operator> <literal type="number" pos:start="89:20" pos:end="89:23">0x80</literal><operator pos:start="89:24" pos:end="89:24">)</operator> <operator pos:start="89:26" pos:end="89:27">&amp;&amp;</operator> <operator pos:start="89:29" pos:end="89:29">(</operator><name pos:start="89:30" pos:end="89:40"><name pos:start="89:30" pos:end="89:32">env</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:40">pstate</name></name> <operator pos:start="89:42" pos:end="89:42">&amp;</operator> <name pos:start="89:44" pos:end="89:50">PS_PRIV</name><operator pos:start="89:51" pos:end="89:51">)</operator></expr>)</condition> <block pos:start="89:54" pos:end="197:9">{<block_content pos:start="91:13" pos:end="195:13">

            <if_stmt pos:start="91:13" pos:end="195:13"><if pos:start="91:13" pos:end="125:13">if <condition pos:start="91:16" pos:end="93:42">(<expr pos:start="91:17" pos:end="93:41"><operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:35"><name pos:start="91:18" pos:end="91:20">env</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:25">def</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:35">features</name></name> <operator pos:start="91:37" pos:end="91:37">&amp;</operator> <name pos:start="91:39" pos:end="91:54">CPU_FEATURE_HYPV</name><operator pos:start="91:55" pos:end="91:55">)</operator>

                <operator pos:start="93:17" pos:end="93:18">&amp;&amp;</operator> <name pos:start="93:20" pos:end="93:31"><name pos:start="93:20" pos:end="93:22">env</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:31">hpstate</name></name> <operator pos:start="93:33" pos:end="93:33">&amp;</operator> <name pos:start="93:35" pos:end="93:41">HS_PRIV</name></expr>)</condition> <block pos:start="93:44" pos:end="125:13">{<block_content pos:start="95:17" pos:end="123:17">

                <switch pos:start="95:17" pos:end="123:17">switch<condition pos:start="95:23" pos:end="95:28">(<expr pos:start="95:24" pos:end="95:27"><name pos:start="95:24" pos:end="95:27">size</name></expr>)</condition> <block pos:start="95:30" pos:end="123:17">{<block_content pos:start="97:17" pos:end="121:26">

                <case pos:start="97:17" pos:end="97:23">case <expr pos:start="97:22" pos:end="97:22"><literal type="number" pos:start="97:22" pos:end="97:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="99:21" pos:end="99:42"><expr pos:start="99:21" pos:end="99:41"><name pos:start="99:21" pos:end="99:23">ret</name> <operator pos:start="99:25" pos:end="99:25">=</operator> <call pos:start="99:27" pos:end="99:41"><name pos:start="99:27" pos:end="99:35">ldub_hypv</name><argument_list pos:start="99:36" pos:end="99:41">(<argument pos:start="99:37" pos:end="99:40"><expr pos:start="99:37" pos:end="99:40"><name pos:start="99:37" pos:end="99:40">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="101:21" pos:end="101:26">break;</break>

                <case pos:start="103:17" pos:end="103:23">case <expr pos:start="103:22" pos:end="103:22"><literal type="number" pos:start="103:22" pos:end="103:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="105:21" pos:end="105:42"><expr pos:start="105:21" pos:end="105:41"><name pos:start="105:21" pos:end="105:23">ret</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <call pos:start="105:27" pos:end="105:41"><name pos:start="105:27" pos:end="105:35">lduw_hypv</name><argument_list pos:start="105:36" pos:end="105:41">(<argument pos:start="105:37" pos:end="105:40"><expr pos:start="105:37" pos:end="105:40"><name pos:start="105:37" pos:end="105:40">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="107:21" pos:end="107:26">break;</break>

                <case pos:start="109:17" pos:end="109:23">case <expr pos:start="109:22" pos:end="109:22"><literal type="number" pos:start="109:22" pos:end="109:22">4</literal></expr>:</case>

                    <expr_stmt pos:start="111:21" pos:end="111:41"><expr pos:start="111:21" pos:end="111:40"><name pos:start="111:21" pos:end="111:23">ret</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <call pos:start="111:27" pos:end="111:40"><name pos:start="111:27" pos:end="111:34">ldl_hypv</name><argument_list pos:start="111:35" pos:end="111:40">(<argument pos:start="111:36" pos:end="111:39"><expr pos:start="111:36" pos:end="111:39"><name pos:start="111:36" pos:end="111:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="113:21" pos:end="113:26">break;</break>

                <default pos:start="115:17" pos:end="115:24">default:</default>

                <case pos:start="117:17" pos:end="117:23">case <expr pos:start="117:22" pos:end="117:22"><literal type="number" pos:start="117:22" pos:end="117:22">8</literal></expr>:</case>

                    <expr_stmt pos:start="119:21" pos:end="119:41"><expr pos:start="119:21" pos:end="119:40"><name pos:start="119:21" pos:end="119:23">ret</name> <operator pos:start="119:25" pos:end="119:25">=</operator> <call pos:start="119:27" pos:end="119:40"><name pos:start="119:27" pos:end="119:34">ldq_hypv</name><argument_list pos:start="119:35" pos:end="119:40">(<argument pos:start="119:36" pos:end="119:39"><expr pos:start="119:36" pos:end="119:39"><name pos:start="119:36" pos:end="119:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="121:21" pos:end="121:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="125:15" pos:end="195:13">else <block pos:start="125:20" pos:end="195:13">{<block_content pos:start="129:17" pos:end="193:17">

                <comment type="block" pos:start="127:17" pos:end="127:74">/* secondary space access has lowest asi bit equal to 1 */</comment>

                <if_stmt pos:start="129:17" pos:end="193:17"><if pos:start="129:17" pos:end="161:17">if <condition pos:start="129:20" pos:end="129:28">(<expr pos:start="129:21" pos:end="129:27"><name pos:start="129:21" pos:end="129:23">asi</name> <operator pos:start="129:25" pos:end="129:25">&amp;</operator> <literal type="number" pos:start="129:27" pos:end="129:27">1</literal></expr>)</condition> <block pos:start="129:30" pos:end="161:17">{<block_content pos:start="131:21" pos:end="159:21">

                    <switch pos:start="131:21" pos:end="159:21">switch<condition pos:start="131:27" pos:end="131:32">(<expr pos:start="131:28" pos:end="131:31"><name pos:start="131:28" pos:end="131:31">size</name></expr>)</condition> <block pos:start="131:34" pos:end="159:21">{<block_content pos:start="133:21" pos:end="157:30">

                    <case pos:start="133:21" pos:end="133:27">case <expr pos:start="133:26" pos:end="133:26"><literal type="number" pos:start="133:26" pos:end="133:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="135:25" pos:end="135:58"><expr pos:start="135:25" pos:end="135:57"><name pos:start="135:25" pos:end="135:27">ret</name> <operator pos:start="135:29" pos:end="135:29">=</operator> <call pos:start="135:31" pos:end="135:57"><name pos:start="135:31" pos:end="135:51">ldub_kernel_secondary</name><argument_list pos:start="135:52" pos:end="135:57">(<argument pos:start="135:53" pos:end="135:56"><expr pos:start="135:53" pos:end="135:56"><name pos:start="135:53" pos:end="135:56">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="137:25" pos:end="137:30">break;</break>

                    <case pos:start="139:21" pos:end="139:27">case <expr pos:start="139:26" pos:end="139:26"><literal type="number" pos:start="139:26" pos:end="139:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="141:25" pos:end="141:58"><expr pos:start="141:25" pos:end="141:57"><name pos:start="141:25" pos:end="141:27">ret</name> <operator pos:start="141:29" pos:end="141:29">=</operator> <call pos:start="141:31" pos:end="141:57"><name pos:start="141:31" pos:end="141:51">lduw_kernel_secondary</name><argument_list pos:start="141:52" pos:end="141:57">(<argument pos:start="141:53" pos:end="141:56"><expr pos:start="141:53" pos:end="141:56"><name pos:start="141:53" pos:end="141:56">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="143:25" pos:end="143:30">break;</break>

                    <case pos:start="145:21" pos:end="145:27">case <expr pos:start="145:26" pos:end="145:26"><literal type="number" pos:start="145:26" pos:end="145:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="147:25" pos:end="147:57"><expr pos:start="147:25" pos:end="147:56"><name pos:start="147:25" pos:end="147:27">ret</name> <operator pos:start="147:29" pos:end="147:29">=</operator> <call pos:start="147:31" pos:end="147:56"><name pos:start="147:31" pos:end="147:50">ldl_kernel_secondary</name><argument_list pos:start="147:51" pos:end="147:56">(<argument pos:start="147:52" pos:end="147:55"><expr pos:start="147:52" pos:end="147:55"><name pos:start="147:52" pos:end="147:55">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="149:25" pos:end="149:30">break;</break>

                    <default pos:start="151:21" pos:end="151:28">default:</default>

                    <case pos:start="153:21" pos:end="153:27">case <expr pos:start="153:26" pos:end="153:26"><literal type="number" pos:start="153:26" pos:end="153:26">8</literal></expr>:</case>

                        <expr_stmt pos:start="155:25" pos:end="155:57"><expr pos:start="155:25" pos:end="155:56"><name pos:start="155:25" pos:end="155:27">ret</name> <operator pos:start="155:29" pos:end="155:29">=</operator> <call pos:start="155:31" pos:end="155:56"><name pos:start="155:31" pos:end="155:50">ldq_kernel_secondary</name><argument_list pos:start="155:51" pos:end="155:56">(<argument pos:start="155:52" pos:end="155:55"><expr pos:start="155:52" pos:end="155:55"><name pos:start="155:52" pos:end="155:55">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="157:25" pos:end="157:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></if> <else pos:start="161:19" pos:end="193:17">else <block pos:start="161:24" pos:end="193:17">{<block_content pos:start="163:21" pos:end="191:21">

                    <switch pos:start="163:21" pos:end="191:21">switch<condition pos:start="163:27" pos:end="163:32">(<expr pos:start="163:28" pos:end="163:31"><name pos:start="163:28" pos:end="163:31">size</name></expr>)</condition> <block pos:start="163:34" pos:end="191:21">{<block_content pos:start="165:21" pos:end="189:30">

                    <case pos:start="165:21" pos:end="165:27">case <expr pos:start="165:26" pos:end="165:26"><literal type="number" pos:start="165:26" pos:end="165:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="167:25" pos:end="167:48"><expr pos:start="167:25" pos:end="167:47"><name pos:start="167:25" pos:end="167:27">ret</name> <operator pos:start="167:29" pos:end="167:29">=</operator> <call pos:start="167:31" pos:end="167:47"><name pos:start="167:31" pos:end="167:41">ldub_kernel</name><argument_list pos:start="167:42" pos:end="167:47">(<argument pos:start="167:43" pos:end="167:46"><expr pos:start="167:43" pos:end="167:46"><name pos:start="167:43" pos:end="167:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="169:25" pos:end="169:30">break;</break>

                    <case pos:start="171:21" pos:end="171:27">case <expr pos:start="171:26" pos:end="171:26"><literal type="number" pos:start="171:26" pos:end="171:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="173:25" pos:end="173:48"><expr pos:start="173:25" pos:end="173:47"><name pos:start="173:25" pos:end="173:27">ret</name> <operator pos:start="173:29" pos:end="173:29">=</operator> <call pos:start="173:31" pos:end="173:47"><name pos:start="173:31" pos:end="173:41">lduw_kernel</name><argument_list pos:start="173:42" pos:end="173:47">(<argument pos:start="173:43" pos:end="173:46"><expr pos:start="173:43" pos:end="173:46"><name pos:start="173:43" pos:end="173:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="175:25" pos:end="175:30">break;</break>

                    <case pos:start="177:21" pos:end="177:27">case <expr pos:start="177:26" pos:end="177:26"><literal type="number" pos:start="177:26" pos:end="177:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="179:25" pos:end="179:47"><expr pos:start="179:25" pos:end="179:46"><name pos:start="179:25" pos:end="179:27">ret</name> <operator pos:start="179:29" pos:end="179:29">=</operator> <call pos:start="179:31" pos:end="179:46"><name pos:start="179:31" pos:end="179:40">ldl_kernel</name><argument_list pos:start="179:41" pos:end="179:46">(<argument pos:start="179:42" pos:end="179:45"><expr pos:start="179:42" pos:end="179:45"><name pos:start="179:42" pos:end="179:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="181:25" pos:end="181:30">break;</break>

                    <default pos:start="183:21" pos:end="183:28">default:</default>

                    <case pos:start="185:21" pos:end="185:27">case <expr pos:start="185:26" pos:end="185:26"><literal type="number" pos:start="185:26" pos:end="185:26">8</literal></expr>:</case>

                        <expr_stmt pos:start="187:25" pos:end="187:47"><expr pos:start="187:25" pos:end="187:46"><name pos:start="187:25" pos:end="187:27">ret</name> <operator pos:start="187:29" pos:end="187:29">=</operator> <call pos:start="187:31" pos:end="187:46"><name pos:start="187:31" pos:end="187:40">ldq_kernel</name><argument_list pos:start="187:41" pos:end="187:46">(<argument pos:start="187:42" pos:end="187:45"><expr pos:start="187:42" pos:end="187:45"><name pos:start="187:42" pos:end="187:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="189:25" pos:end="189:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="197:11" pos:end="267:9">else <block pos:start="197:16" pos:end="267:9">{<block_content pos:start="201:13" pos:end="265:13">

            <comment type="block" pos:start="199:13" pos:end="199:70">/* secondary space access has lowest asi bit equal to 1 */</comment>

            <if_stmt pos:start="201:13" pos:end="265:13"><if pos:start="201:13" pos:end="233:13">if <condition pos:start="201:16" pos:end="201:24">(<expr pos:start="201:17" pos:end="201:23"><name pos:start="201:17" pos:end="201:19">asi</name> <operator pos:start="201:21" pos:end="201:21">&amp;</operator> <literal type="number" pos:start="201:23" pos:end="201:23">1</literal></expr>)</condition> <block pos:start="201:26" pos:end="233:13">{<block_content pos:start="203:17" pos:end="231:17">

                <switch pos:start="203:17" pos:end="231:17">switch<condition pos:start="203:23" pos:end="203:28">(<expr pos:start="203:24" pos:end="203:27"><name pos:start="203:24" pos:end="203:27">size</name></expr>)</condition> <block pos:start="203:30" pos:end="231:17">{<block_content pos:start="205:17" pos:end="229:26">

                <case pos:start="205:17" pos:end="205:23">case <expr pos:start="205:22" pos:end="205:22"><literal type="number" pos:start="205:22" pos:end="205:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="207:21" pos:end="207:52"><expr pos:start="207:21" pos:end="207:51"><name pos:start="207:21" pos:end="207:23">ret</name> <operator pos:start="207:25" pos:end="207:25">=</operator> <call pos:start="207:27" pos:end="207:51"><name pos:start="207:27" pos:end="207:45">ldub_user_secondary</name><argument_list pos:start="207:46" pos:end="207:51">(<argument pos:start="207:47" pos:end="207:50"><expr pos:start="207:47" pos:end="207:50"><name pos:start="207:47" pos:end="207:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="209:21" pos:end="209:26">break;</break>

                <case pos:start="211:17" pos:end="211:23">case <expr pos:start="211:22" pos:end="211:22"><literal type="number" pos:start="211:22" pos:end="211:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="213:21" pos:end="213:52"><expr pos:start="213:21" pos:end="213:51"><name pos:start="213:21" pos:end="213:23">ret</name> <operator pos:start="213:25" pos:end="213:25">=</operator> <call pos:start="213:27" pos:end="213:51"><name pos:start="213:27" pos:end="213:45">lduw_user_secondary</name><argument_list pos:start="213:46" pos:end="213:51">(<argument pos:start="213:47" pos:end="213:50"><expr pos:start="213:47" pos:end="213:50"><name pos:start="213:47" pos:end="213:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="215:21" pos:end="215:26">break;</break>

                <case pos:start="217:17" pos:end="217:23">case <expr pos:start="217:22" pos:end="217:22"><literal type="number" pos:start="217:22" pos:end="217:22">4</literal></expr>:</case>

                    <expr_stmt pos:start="219:21" pos:end="219:51"><expr pos:start="219:21" pos:end="219:50"><name pos:start="219:21" pos:end="219:23">ret</name> <operator pos:start="219:25" pos:end="219:25">=</operator> <call pos:start="219:27" pos:end="219:50"><name pos:start="219:27" pos:end="219:44">ldl_user_secondary</name><argument_list pos:start="219:45" pos:end="219:50">(<argument pos:start="219:46" pos:end="219:49"><expr pos:start="219:46" pos:end="219:49"><name pos:start="219:46" pos:end="219:49">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="221:21" pos:end="221:26">break;</break>

                <default pos:start="223:17" pos:end="223:24">default:</default>

                <case pos:start="225:17" pos:end="225:23">case <expr pos:start="225:22" pos:end="225:22"><literal type="number" pos:start="225:22" pos:end="225:22">8</literal></expr>:</case>

                    <expr_stmt pos:start="227:21" pos:end="227:51"><expr pos:start="227:21" pos:end="227:50"><name pos:start="227:21" pos:end="227:23">ret</name> <operator pos:start="227:25" pos:end="227:25">=</operator> <call pos:start="227:27" pos:end="227:50"><name pos:start="227:27" pos:end="227:44">ldq_user_secondary</name><argument_list pos:start="227:45" pos:end="227:50">(<argument pos:start="227:46" pos:end="227:49"><expr pos:start="227:46" pos:end="227:49"><name pos:start="227:46" pos:end="227:49">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="229:21" pos:end="229:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="233:15" pos:end="265:13">else <block pos:start="233:20" pos:end="265:13">{<block_content pos:start="235:17" pos:end="263:17">

                <switch pos:start="235:17" pos:end="263:17">switch<condition pos:start="235:23" pos:end="235:28">(<expr pos:start="235:24" pos:end="235:27"><name pos:start="235:24" pos:end="235:27">size</name></expr>)</condition> <block pos:start="235:30" pos:end="263:17">{<block_content pos:start="237:17" pos:end="261:26">

                <case pos:start="237:17" pos:end="237:23">case <expr pos:start="237:22" pos:end="237:22"><literal type="number" pos:start="237:22" pos:end="237:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="239:21" pos:end="239:42"><expr pos:start="239:21" pos:end="239:41"><name pos:start="239:21" pos:end="239:23">ret</name> <operator pos:start="239:25" pos:end="239:25">=</operator> <call pos:start="239:27" pos:end="239:41"><name pos:start="239:27" pos:end="239:35">ldub_user</name><argument_list pos:start="239:36" pos:end="239:41">(<argument pos:start="239:37" pos:end="239:40"><expr pos:start="239:37" pos:end="239:40"><name pos:start="239:37" pos:end="239:40">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="241:21" pos:end="241:26">break;</break>

                <case pos:start="243:17" pos:end="243:23">case <expr pos:start="243:22" pos:end="243:22"><literal type="number" pos:start="243:22" pos:end="243:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="245:21" pos:end="245:42"><expr pos:start="245:21" pos:end="245:41"><name pos:start="245:21" pos:end="245:23">ret</name> <operator pos:start="245:25" pos:end="245:25">=</operator> <call pos:start="245:27" pos:end="245:41"><name pos:start="245:27" pos:end="245:35">lduw_user</name><argument_list pos:start="245:36" pos:end="245:41">(<argument pos:start="245:37" pos:end="245:40"><expr pos:start="245:37" pos:end="245:40"><name pos:start="245:37" pos:end="245:40">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="247:21" pos:end="247:26">break;</break>

                <case pos:start="249:17" pos:end="249:23">case <expr pos:start="249:22" pos:end="249:22"><literal type="number" pos:start="249:22" pos:end="249:22">4</literal></expr>:</case>

                    <expr_stmt pos:start="251:21" pos:end="251:41"><expr pos:start="251:21" pos:end="251:40"><name pos:start="251:21" pos:end="251:23">ret</name> <operator pos:start="251:25" pos:end="251:25">=</operator> <call pos:start="251:27" pos:end="251:40"><name pos:start="251:27" pos:end="251:34">ldl_user</name><argument_list pos:start="251:35" pos:end="251:40">(<argument pos:start="251:36" pos:end="251:39"><expr pos:start="251:36" pos:end="251:39"><name pos:start="251:36" pos:end="251:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="253:21" pos:end="253:26">break;</break>

                <default pos:start="255:17" pos:end="255:24">default:</default>

                <case pos:start="257:17" pos:end="257:23">case <expr pos:start="257:22" pos:end="257:22"><literal type="number" pos:start="257:22" pos:end="257:22">8</literal></expr>:</case>

                    <expr_stmt pos:start="259:21" pos:end="259:41"><expr pos:start="259:21" pos:end="259:40"><name pos:start="259:21" pos:end="259:23">ret</name> <operator pos:start="259:25" pos:end="259:25">=</operator> <call pos:start="259:27" pos:end="259:40"><name pos:start="259:27" pos:end="259:34">ldq_user</name><argument_list pos:start="259:35" pos:end="259:40">(<argument pos:start="259:36" pos:end="259:39"><expr pos:start="259:36" pos:end="259:39"><name pos:start="259:36" pos:end="259:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="261:21" pos:end="261:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="269:9" pos:end="269:14">break;</break>

    <case pos:start="271:5" pos:end="271:14">case <expr pos:start="271:10" pos:end="271:13"><literal type="number" pos:start="271:10" pos:end="271:13">0x14</literal></expr>:</case> <comment type="line" pos:start="271:16" pos:end="271:24">// Bypass</comment>

    <case pos:start="273:5" pos:end="273:14">case <expr pos:start="273:10" pos:end="273:13"><literal type="number" pos:start="273:10" pos:end="273:13">0x15</literal></expr>:</case> <comment type="line" pos:start="273:16" pos:end="273:39">// Bypass, non-cacheable</comment>

    <case pos:start="275:5" pos:end="275:14">case <expr pos:start="275:10" pos:end="275:13"><literal type="number" pos:start="275:10" pos:end="275:13">0x1c</literal></expr>:</case> <comment type="line" pos:start="275:16" pos:end="275:27">// Bypass LE</comment>

    <case pos:start="277:5" pos:end="277:14">case <expr pos:start="277:10" pos:end="277:13"><literal type="number" pos:start="277:10" pos:end="277:13">0x1d</literal></expr>:</case> <comment type="line" pos:start="277:16" pos:end="277:42">// Bypass, non-cacheable LE</comment>

        <block pos:start="279:9" pos:end="313:9">{<block_content pos:start="281:13" pos:end="311:18">

            <switch pos:start="281:13" pos:end="309:13">switch<condition pos:start="281:19" pos:end="281:24">(<expr pos:start="281:20" pos:end="281:23"><name pos:start="281:20" pos:end="281:23">size</name></expr>)</condition> <block pos:start="281:26" pos:end="309:13">{<block_content pos:start="283:13" pos:end="307:22">

            <case pos:start="283:13" pos:end="283:19">case <expr pos:start="283:18" pos:end="283:18"><literal type="number" pos:start="283:18" pos:end="283:18">1</literal></expr>:</case>

                <expr_stmt pos:start="285:17" pos:end="285:38"><expr pos:start="285:17" pos:end="285:37"><name pos:start="285:17" pos:end="285:19">ret</name> <operator pos:start="285:21" pos:end="285:21">=</operator> <call pos:start="285:23" pos:end="285:37"><name pos:start="285:23" pos:end="285:31">ldub_phys</name><argument_list pos:start="285:32" pos:end="285:37">(<argument pos:start="285:33" pos:end="285:36"><expr pos:start="285:33" pos:end="285:36"><name pos:start="285:33" pos:end="285:36">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="287:17" pos:end="287:22">break;</break>

            <case pos:start="289:13" pos:end="289:19">case <expr pos:start="289:18" pos:end="289:18"><literal type="number" pos:start="289:18" pos:end="289:18">2</literal></expr>:</case>

                <expr_stmt pos:start="291:17" pos:end="291:38"><expr pos:start="291:17" pos:end="291:37"><name pos:start="291:17" pos:end="291:19">ret</name> <operator pos:start="291:21" pos:end="291:21">=</operator> <call pos:start="291:23" pos:end="291:37"><name pos:start="291:23" pos:end="291:31">lduw_phys</name><argument_list pos:start="291:32" pos:end="291:37">(<argument pos:start="291:33" pos:end="291:36"><expr pos:start="291:33" pos:end="291:36"><name pos:start="291:33" pos:end="291:36">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="293:17" pos:end="293:22">break;</break>

            <case pos:start="295:13" pos:end="295:19">case <expr pos:start="295:18" pos:end="295:18"><literal type="number" pos:start="295:18" pos:end="295:18">4</literal></expr>:</case>

                <expr_stmt pos:start="297:17" pos:end="297:37"><expr pos:start="297:17" pos:end="297:36"><name pos:start="297:17" pos:end="297:19">ret</name> <operator pos:start="297:21" pos:end="297:21">=</operator> <call pos:start="297:23" pos:end="297:36"><name pos:start="297:23" pos:end="297:30">ldl_phys</name><argument_list pos:start="297:31" pos:end="297:36">(<argument pos:start="297:32" pos:end="297:35"><expr pos:start="297:32" pos:end="297:35"><name pos:start="297:32" pos:end="297:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="299:17" pos:end="299:22">break;</break>

            <default pos:start="301:13" pos:end="301:20">default:</default>

            <case pos:start="303:13" pos:end="303:19">case <expr pos:start="303:18" pos:end="303:18"><literal type="number" pos:start="303:18" pos:end="303:18">8</literal></expr>:</case>

                <expr_stmt pos:start="305:17" pos:end="305:37"><expr pos:start="305:17" pos:end="305:36"><name pos:start="305:17" pos:end="305:19">ret</name> <operator pos:start="305:21" pos:end="305:21">=</operator> <call pos:start="305:23" pos:end="305:36"><name pos:start="305:23" pos:end="305:30">ldq_phys</name><argument_list pos:start="305:31" pos:end="305:36">(<argument pos:start="305:32" pos:end="305:35"><expr pos:start="305:32" pos:end="305:35"><name pos:start="305:32" pos:end="305:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="307:17" pos:end="307:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="311:13" pos:end="311:18">break;</break>

        </block_content>}</block>

    <case pos:start="315:5" pos:end="315:14">case <expr pos:start="315:10" pos:end="315:13"><literal type="number" pos:start="315:10" pos:end="315:13">0x24</literal></expr>:</case> <comment type="line" pos:start="315:16" pos:end="315:49">// Nucleus quad LDD 128 bit atomic</comment>

    <case pos:start="317:5" pos:end="317:14">case <expr pos:start="317:10" pos:end="317:13"><literal type="number" pos:start="317:10" pos:end="317:13">0x2c</literal></expr>:</case> <comment type="line" pos:start="317:16" pos:end="317:52">// Nucleus quad LDD 128 bit atomic LE</comment>

        <comment type="line" pos:start="319:9" pos:end="319:29">//  Only ldda allowed</comment>

        <expr_stmt pos:start="321:9" pos:end="321:37"><expr pos:start="321:9" pos:end="321:36"><call pos:start="321:9" pos:end="321:36"><name pos:start="321:9" pos:end="321:23">raise_exception</name><argument_list pos:start="321:24" pos:end="321:36">(<argument pos:start="321:25" pos:end="321:35"><expr pos:start="321:25" pos:end="321:35"><name pos:start="321:25" pos:end="321:35">TT_ILL_INSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="323:9" pos:end="323:17">return <expr pos:start="323:16" pos:end="323:16"><literal type="number" pos:start="323:16" pos:end="323:16">0</literal></expr>;</return>

    <case pos:start="325:5" pos:end="325:14">case <expr pos:start="325:10" pos:end="325:13"><literal type="number" pos:start="325:10" pos:end="325:13">0x04</literal></expr>:</case> <comment type="line" pos:start="325:16" pos:end="325:25">// Nucleus</comment>

    <case pos:start="327:5" pos:end="327:14">case <expr pos:start="327:10" pos:end="327:13"><literal type="number" pos:start="327:10" pos:end="327:13">0x0c</literal></expr>:</case> <comment type="line" pos:start="327:16" pos:end="327:44">// Nucleus Little Endian (LE)</comment>

    <block pos:start="329:5" pos:end="363:5">{<block_content pos:start="331:9" pos:end="361:14">

        <switch pos:start="331:9" pos:end="359:9">switch<condition pos:start="331:15" pos:end="331:20">(<expr pos:start="331:16" pos:end="331:19"><name pos:start="331:16" pos:end="331:19">size</name></expr>)</condition> <block pos:start="331:22" pos:end="359:9">{<block_content pos:start="333:9" pos:end="357:18">

        <case pos:start="333:9" pos:end="333:15">case <expr pos:start="333:14" pos:end="333:14"><literal type="number" pos:start="333:14" pos:end="333:14">1</literal></expr>:</case>

            <expr_stmt pos:start="335:13" pos:end="335:37"><expr pos:start="335:13" pos:end="335:36"><name pos:start="335:13" pos:end="335:15">ret</name> <operator pos:start="335:17" pos:end="335:17">=</operator> <call pos:start="335:19" pos:end="335:36"><name pos:start="335:19" pos:end="335:30">ldub_nucleus</name><argument_list pos:start="335:31" pos:end="335:36">(<argument pos:start="335:32" pos:end="335:35"><expr pos:start="335:32" pos:end="335:35"><name pos:start="335:32" pos:end="335:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="337:13" pos:end="337:18">break;</break>

        <case pos:start="339:9" pos:end="339:15">case <expr pos:start="339:14" pos:end="339:14"><literal type="number" pos:start="339:14" pos:end="339:14">2</literal></expr>:</case>

            <expr_stmt pos:start="341:13" pos:end="341:37"><expr pos:start="341:13" pos:end="341:36"><name pos:start="341:13" pos:end="341:15">ret</name> <operator pos:start="341:17" pos:end="341:17">=</operator> <call pos:start="341:19" pos:end="341:36"><name pos:start="341:19" pos:end="341:30">lduw_nucleus</name><argument_list pos:start="341:31" pos:end="341:36">(<argument pos:start="341:32" pos:end="341:35"><expr pos:start="341:32" pos:end="341:35"><name pos:start="341:32" pos:end="341:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="343:13" pos:end="343:18">break;</break>

        <case pos:start="345:9" pos:end="345:15">case <expr pos:start="345:14" pos:end="345:14"><literal type="number" pos:start="345:14" pos:end="345:14">4</literal></expr>:</case>

            <expr_stmt pos:start="347:13" pos:end="347:36"><expr pos:start="347:13" pos:end="347:35"><name pos:start="347:13" pos:end="347:15">ret</name> <operator pos:start="347:17" pos:end="347:17">=</operator> <call pos:start="347:19" pos:end="347:35"><name pos:start="347:19" pos:end="347:29">ldl_nucleus</name><argument_list pos:start="347:30" pos:end="347:35">(<argument pos:start="347:31" pos:end="347:34"><expr pos:start="347:31" pos:end="347:34"><name pos:start="347:31" pos:end="347:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="349:13" pos:end="349:18">break;</break>

        <default pos:start="351:9" pos:end="351:16">default:</default>

        <case pos:start="353:9" pos:end="353:15">case <expr pos:start="353:14" pos:end="353:14"><literal type="number" pos:start="353:14" pos:end="353:14">8</literal></expr>:</case>

            <expr_stmt pos:start="355:13" pos:end="355:36"><expr pos:start="355:13" pos:end="355:35"><name pos:start="355:13" pos:end="355:15">ret</name> <operator pos:start="355:17" pos:end="355:17">=</operator> <call pos:start="355:19" pos:end="355:35"><name pos:start="355:19" pos:end="355:29">ldq_nucleus</name><argument_list pos:start="355:30" pos:end="355:35">(<argument pos:start="355:31" pos:end="355:34"><expr pos:start="355:31" pos:end="355:34"><name pos:start="355:31" pos:end="355:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="357:13" pos:end="357:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="361:9" pos:end="361:14">break;</break>

    </block_content>}</block>

    <case pos:start="365:5" pos:end="365:14">case <expr pos:start="365:10" pos:end="365:13"><literal type="number" pos:start="365:10" pos:end="365:13">0x4a</literal></expr>:</case> <comment type="line" pos:start="365:16" pos:end="365:28">// UPA config</comment>

        <comment type="line" pos:start="367:9" pos:end="367:14">// XXX</comment>

        <break pos:start="369:9" pos:end="369:14">break;</break>

    <case pos:start="371:5" pos:end="371:14">case <expr pos:start="371:10" pos:end="371:13"><literal type="number" pos:start="371:10" pos:end="371:13">0x45</literal></expr>:</case> <comment type="line" pos:start="371:16" pos:end="371:21">// LSU</comment>

        <expr_stmt pos:start="373:9" pos:end="373:23"><expr pos:start="373:9" pos:end="373:22"><name pos:start="373:9" pos:end="373:11">ret</name> <operator pos:start="373:13" pos:end="373:13">=</operator> <name pos:start="373:15" pos:end="373:22"><name pos:start="373:15" pos:end="373:17">env</name><operator pos:start="373:18" pos:end="373:19">-&gt;</operator><name pos:start="373:20" pos:end="373:22">lsu</name></name></expr>;</expr_stmt>

        <break pos:start="375:9" pos:end="375:14">break;</break>

    <case pos:start="377:5" pos:end="377:14">case <expr pos:start="377:10" pos:end="377:13"><literal type="number" pos:start="377:10" pos:end="377:13">0x50</literal></expr>:</case> <comment type="line" pos:start="377:16" pos:end="377:28">// I-MMU regs</comment>

        <block pos:start="379:9" pos:end="401:9">{<block_content pos:start="381:13" pos:end="399:18">

            <decl_stmt pos:start="381:13" pos:end="381:40"><decl pos:start="381:13" pos:end="381:39"><type pos:start="381:13" pos:end="381:15"><name pos:start="381:13" pos:end="381:15">int</name></type> <name pos:start="381:17" pos:end="381:19">reg</name> <init pos:start="381:21" pos:end="381:39">= <expr pos:start="381:23" pos:end="381:39"><operator pos:start="381:23" pos:end="381:23">(</operator><name pos:start="381:24" pos:end="381:27">addr</name> <operator pos:start="381:29" pos:end="381:30">&gt;&gt;</operator> <literal type="number" pos:start="381:32" pos:end="381:32">3</literal><operator pos:start="381:33" pos:end="381:33">)</operator> <operator pos:start="381:35" pos:end="381:35">&amp;</operator> <literal type="number" pos:start="381:37" pos:end="381:39">0xf</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="385:13" pos:end="395:13"><if pos:start="385:13" pos:end="391:13">if <condition pos:start="385:16" pos:end="385:25">(<expr pos:start="385:17" pos:end="385:24"><name pos:start="385:17" pos:end="385:19">reg</name> <operator pos:start="385:21" pos:end="385:22">==</operator> <literal type="number" pos:start="385:24" pos:end="385:24">0</literal></expr>)</condition> <block pos:start="385:27" pos:end="391:13">{<block_content pos:start="389:17" pos:end="389:66">

                <comment type="line" pos:start="387:17" pos:end="387:44">// I-TSB Tag Target register</comment>

                <expr_stmt pos:start="389:17" pos:end="389:66"><expr pos:start="389:17" pos:end="389:65"><name pos:start="389:17" pos:end="389:19">ret</name> <operator pos:start="389:21" pos:end="389:21">=</operator> <call pos:start="389:23" pos:end="389:65"><name pos:start="389:23" pos:end="389:43">ultrasparc_tag_target</name><argument_list pos:start="389:44" pos:end="389:65">(<argument pos:start="389:45" pos:end="389:64"><expr pos:start="389:45" pos:end="389:64"><name pos:start="389:45" pos:end="389:64"><name pos:start="389:45" pos:end="389:47">env</name><operator pos:start="389:48" pos:end="389:49">-&gt;</operator><name pos:start="389:50" pos:end="389:53">immu</name><operator pos:start="389:54" pos:end="389:54">.</operator><name pos:start="389:55" pos:end="389:64">tag_access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="391:15" pos:end="395:13">else <block pos:start="391:20" pos:end="395:13">{<block_content pos:start="393:17" pos:end="393:41">

                <expr_stmt pos:start="393:17" pos:end="393:41"><expr pos:start="393:17" pos:end="393:40"><name pos:start="393:17" pos:end="393:19">ret</name> <operator pos:start="393:21" pos:end="393:21">=</operator> <name pos:start="393:23" pos:end="393:40"><name pos:start="393:23" pos:end="393:25">env</name><operator pos:start="393:26" pos:end="393:27">-&gt;</operator><name pos:start="393:28" pos:end="393:35">immuregs</name><index pos:start="393:36" pos:end="393:40">[<expr pos:start="393:37" pos:end="393:39"><name pos:start="393:37" pos:end="393:39">reg</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <break pos:start="399:13" pos:end="399:18">break;</break>

        </block_content>}</block>

    <case pos:start="403:5" pos:end="403:14">case <expr pos:start="403:10" pos:end="403:13"><literal type="number" pos:start="403:10" pos:end="403:13">0x51</literal></expr>:</case> <comment type="line" pos:start="403:16" pos:end="403:38">// I-MMU 8k TSB pointer</comment>

        <block pos:start="405:9" pos:end="417:9">{<block_content pos:start="411:13" pos:end="415:18">

            <comment type="line" pos:start="407:13" pos:end="407:62">// env-&gt;immuregs[5] holds I-MMU TSB register value</comment>

            <comment type="line" pos:start="409:13" pos:end="409:69">// env-&gt;immuregs[6] holds I-MMU Tag Access register value</comment>

            <expr_stmt pos:start="411:13" pos:end="413:49"><expr pos:start="411:13" pos:end="413:48"><name pos:start="411:13" pos:end="411:15">ret</name> <operator pos:start="411:17" pos:end="411:17">=</operator> <call pos:start="411:19" pos:end="413:48"><name pos:start="411:19" pos:end="411:40">ultrasparc_tsb_pointer</name><argument_list pos:start="411:41" pos:end="413:48">(<argument pos:start="411:42" pos:end="411:54"><expr pos:start="411:42" pos:end="411:54"><name pos:start="411:42" pos:end="411:54"><name pos:start="411:42" pos:end="411:44">env</name><operator pos:start="411:45" pos:end="411:46">-&gt;</operator><name pos:start="411:47" pos:end="411:50">immu</name><operator pos:start="411:51" pos:end="411:51">.</operator><name pos:start="411:52" pos:end="411:54">tsb</name></name></expr></argument>, <argument pos:start="411:57" pos:end="411:76"><expr pos:start="411:57" pos:end="411:76"><name pos:start="411:57" pos:end="411:76"><name pos:start="411:57" pos:end="411:59">env</name><operator pos:start="411:60" pos:end="411:61">-&gt;</operator><name pos:start="411:62" pos:end="411:65">immu</name><operator pos:start="411:66" pos:end="411:66">.</operator><name pos:start="411:67" pos:end="411:76">tag_access</name></name></expr></argument>,

                                         <argument pos:start="413:42" pos:end="413:47"><expr pos:start="413:42" pos:end="413:47"><literal type="number" pos:start="413:42" pos:end="413:42">8</literal><operator pos:start="413:43" pos:end="413:43">*</operator><literal type="number" pos:start="413:44" pos:end="413:47">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="415:13" pos:end="415:18">break;</break>

        </block_content>}</block>

    <case pos:start="419:5" pos:end="419:14">case <expr pos:start="419:10" pos:end="419:13"><literal type="number" pos:start="419:10" pos:end="419:13">0x52</literal></expr>:</case> <comment type="line" pos:start="419:16" pos:end="419:39">// I-MMU 64k TSB pointer</comment>

        <block pos:start="421:9" pos:end="433:9">{<block_content pos:start="427:13" pos:end="431:18">

            <comment type="line" pos:start="423:13" pos:end="423:62">// env-&gt;immuregs[5] holds I-MMU TSB register value</comment>

            <comment type="line" pos:start="425:13" pos:end="425:69">// env-&gt;immuregs[6] holds I-MMU Tag Access register value</comment>

            <expr_stmt pos:start="427:13" pos:end="429:50"><expr pos:start="427:13" pos:end="429:49"><name pos:start="427:13" pos:end="427:15">ret</name> <operator pos:start="427:17" pos:end="427:17">=</operator> <call pos:start="427:19" pos:end="429:49"><name pos:start="427:19" pos:end="427:40">ultrasparc_tsb_pointer</name><argument_list pos:start="427:41" pos:end="429:49">(<argument pos:start="427:42" pos:end="427:54"><expr pos:start="427:42" pos:end="427:54"><name pos:start="427:42" pos:end="427:54"><name pos:start="427:42" pos:end="427:44">env</name><operator pos:start="427:45" pos:end="427:46">-&gt;</operator><name pos:start="427:47" pos:end="427:50">immu</name><operator pos:start="427:51" pos:end="427:51">.</operator><name pos:start="427:52" pos:end="427:54">tsb</name></name></expr></argument>, <argument pos:start="427:57" pos:end="427:76"><expr pos:start="427:57" pos:end="427:76"><name pos:start="427:57" pos:end="427:76"><name pos:start="427:57" pos:end="427:59">env</name><operator pos:start="427:60" pos:end="427:61">-&gt;</operator><name pos:start="427:62" pos:end="427:65">immu</name><operator pos:start="427:66" pos:end="427:66">.</operator><name pos:start="427:67" pos:end="427:76">tag_access</name></name></expr></argument>,

                                         <argument pos:start="429:42" pos:end="429:48"><expr pos:start="429:42" pos:end="429:48"><literal type="number" pos:start="429:42" pos:end="429:43">64</literal><operator pos:start="429:44" pos:end="429:44">*</operator><literal type="number" pos:start="429:45" pos:end="429:48">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="431:13" pos:end="431:18">break;</break>

        </block_content>}</block>

    <case pos:start="435:5" pos:end="435:14">case <expr pos:start="435:10" pos:end="435:13"><literal type="number" pos:start="435:10" pos:end="435:13">0x55</literal></expr>:</case> <comment type="line" pos:start="435:16" pos:end="435:35">// I-MMU data access</comment>

        <block pos:start="437:9" pos:end="447:9">{<block_content pos:start="439:13" pos:end="445:18">

            <decl_stmt pos:start="439:13" pos:end="439:41"><decl pos:start="439:13" pos:end="439:40"><type pos:start="439:13" pos:end="439:15"><name pos:start="439:13" pos:end="439:15">int</name></type> <name pos:start="439:17" pos:end="439:19">reg</name> <init pos:start="439:21" pos:end="439:40">= <expr pos:start="439:23" pos:end="439:40"><operator pos:start="439:23" pos:end="439:23">(</operator><name pos:start="439:24" pos:end="439:27">addr</name> <operator pos:start="439:29" pos:end="439:30">&gt;&gt;</operator> <literal type="number" pos:start="439:32" pos:end="439:32">3</literal><operator pos:start="439:33" pos:end="439:33">)</operator> <operator pos:start="439:35" pos:end="439:35">&amp;</operator> <literal type="number" pos:start="439:37" pos:end="439:40">0x3f</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="443:13" pos:end="443:37"><expr pos:start="443:13" pos:end="443:36"><name pos:start="443:13" pos:end="443:15">ret</name> <operator pos:start="443:17" pos:end="443:17">=</operator> <name pos:start="443:19" pos:end="443:32"><name pos:start="443:19" pos:end="443:21">env</name><operator pos:start="443:22" pos:end="443:23">-&gt;</operator><name pos:start="443:24" pos:end="443:27">itlb</name><index pos:start="443:28" pos:end="443:32">[<expr pos:start="443:29" pos:end="443:31"><name pos:start="443:29" pos:end="443:31">reg</name></expr>]</index></name><operator pos:start="443:33" pos:end="443:33">.</operator><name pos:start="443:34" pos:end="443:36">tte</name></expr>;</expr_stmt>

            <break pos:start="445:13" pos:end="445:18">break;</break>

        </block_content>}</block>

    <case pos:start="449:5" pos:end="449:14">case <expr pos:start="449:10" pos:end="449:13"><literal type="number" pos:start="449:10" pos:end="449:13">0x56</literal></expr>:</case> <comment type="line" pos:start="449:16" pos:end="449:32">// I-MMU tag read</comment>

        <block pos:start="451:9" pos:end="461:9">{<block_content pos:start="453:13" pos:end="459:18">

            <decl_stmt pos:start="453:13" pos:end="453:41"><decl pos:start="453:13" pos:end="453:40"><type pos:start="453:13" pos:end="453:15"><name pos:start="453:13" pos:end="453:15">int</name></type> <name pos:start="453:17" pos:end="453:19">reg</name> <init pos:start="453:21" pos:end="453:40">= <expr pos:start="453:23" pos:end="453:40"><operator pos:start="453:23" pos:end="453:23">(</operator><name pos:start="453:24" pos:end="453:27">addr</name> <operator pos:start="453:29" pos:end="453:30">&gt;&gt;</operator> <literal type="number" pos:start="453:32" pos:end="453:32">3</literal><operator pos:start="453:33" pos:end="453:33">)</operator> <operator pos:start="453:35" pos:end="453:35">&amp;</operator> <literal type="number" pos:start="453:37" pos:end="453:40">0x3f</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="457:13" pos:end="457:37"><expr pos:start="457:13" pos:end="457:36"><name pos:start="457:13" pos:end="457:15">ret</name> <operator pos:start="457:17" pos:end="457:17">=</operator> <name pos:start="457:19" pos:end="457:32"><name pos:start="457:19" pos:end="457:21">env</name><operator pos:start="457:22" pos:end="457:23">-&gt;</operator><name pos:start="457:24" pos:end="457:27">itlb</name><index pos:start="457:28" pos:end="457:32">[<expr pos:start="457:29" pos:end="457:31"><name pos:start="457:29" pos:end="457:31">reg</name></expr>]</index></name><operator pos:start="457:33" pos:end="457:33">.</operator><name pos:start="457:34" pos:end="457:36">tag</name></expr>;</expr_stmt>

            <break pos:start="459:13" pos:end="459:18">break;</break>

        </block_content>}</block>

    <case pos:start="463:5" pos:end="463:14">case <expr pos:start="463:10" pos:end="463:13"><literal type="number" pos:start="463:10" pos:end="463:13">0x58</literal></expr>:</case> <comment type="line" pos:start="463:16" pos:end="463:28">// D-MMU regs</comment>

        <block pos:start="465:9" pos:end="485:9">{<block_content pos:start="467:13" pos:end="483:18">

            <decl_stmt pos:start="467:13" pos:end="467:40"><decl pos:start="467:13" pos:end="467:39"><type pos:start="467:13" pos:end="467:15"><name pos:start="467:13" pos:end="467:15">int</name></type> <name pos:start="467:17" pos:end="467:19">reg</name> <init pos:start="467:21" pos:end="467:39">= <expr pos:start="467:23" pos:end="467:39"><operator pos:start="467:23" pos:end="467:23">(</operator><name pos:start="467:24" pos:end="467:27">addr</name> <operator pos:start="467:29" pos:end="467:30">&gt;&gt;</operator> <literal type="number" pos:start="467:32" pos:end="467:32">3</literal><operator pos:start="467:33" pos:end="467:33">)</operator> <operator pos:start="467:35" pos:end="467:35">&amp;</operator> <literal type="number" pos:start="467:37" pos:end="467:39">0xf</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="471:13" pos:end="481:13"><if pos:start="471:13" pos:end="477:13">if <condition pos:start="471:16" pos:end="471:25">(<expr pos:start="471:17" pos:end="471:24"><name pos:start="471:17" pos:end="471:19">reg</name> <operator pos:start="471:21" pos:end="471:22">==</operator> <literal type="number" pos:start="471:24" pos:end="471:24">0</literal></expr>)</condition> <block pos:start="471:27" pos:end="477:13">{<block_content pos:start="475:17" pos:end="475:66">

                <comment type="line" pos:start="473:17" pos:end="473:44">// D-TSB Tag Target register</comment>

                <expr_stmt pos:start="475:17" pos:end="475:66"><expr pos:start="475:17" pos:end="475:65"><name pos:start="475:17" pos:end="475:19">ret</name> <operator pos:start="475:21" pos:end="475:21">=</operator> <call pos:start="475:23" pos:end="475:65"><name pos:start="475:23" pos:end="475:43">ultrasparc_tag_target</name><argument_list pos:start="475:44" pos:end="475:65">(<argument pos:start="475:45" pos:end="475:64"><expr pos:start="475:45" pos:end="475:64"><name pos:start="475:45" pos:end="475:64"><name pos:start="475:45" pos:end="475:47">env</name><operator pos:start="475:48" pos:end="475:49">-&gt;</operator><name pos:start="475:50" pos:end="475:53">dmmu</name><operator pos:start="475:54" pos:end="475:54">.</operator><name pos:start="475:55" pos:end="475:64">tag_access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="477:15" pos:end="481:13">else <block pos:start="477:20" pos:end="481:13">{<block_content pos:start="479:17" pos:end="479:41">

                <expr_stmt pos:start="479:17" pos:end="479:41"><expr pos:start="479:17" pos:end="479:40"><name pos:start="479:17" pos:end="479:19">ret</name> <operator pos:start="479:21" pos:end="479:21">=</operator> <name pos:start="479:23" pos:end="479:40"><name pos:start="479:23" pos:end="479:25">env</name><operator pos:start="479:26" pos:end="479:27">-&gt;</operator><name pos:start="479:28" pos:end="479:35">dmmuregs</name><index pos:start="479:36" pos:end="479:40">[<expr pos:start="479:37" pos:end="479:39"><name pos:start="479:37" pos:end="479:39">reg</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="483:13" pos:end="483:18">break;</break>

        </block_content>}</block>

    <case pos:start="487:5" pos:end="487:14">case <expr pos:start="487:10" pos:end="487:13"><literal type="number" pos:start="487:10" pos:end="487:13">0x59</literal></expr>:</case> <comment type="line" pos:start="487:16" pos:end="487:38">// D-MMU 8k TSB pointer</comment>

        <block pos:start="489:9" pos:end="501:9">{<block_content pos:start="495:13" pos:end="499:18">

            <comment type="line" pos:start="491:13" pos:end="491:62">// env-&gt;dmmuregs[5] holds D-MMU TSB register value</comment>

            <comment type="line" pos:start="493:13" pos:end="493:69">// env-&gt;dmmuregs[6] holds D-MMU Tag Access register value</comment>

            <expr_stmt pos:start="495:13" pos:end="497:49"><expr pos:start="495:13" pos:end="497:48"><name pos:start="495:13" pos:end="495:15">ret</name> <operator pos:start="495:17" pos:end="495:17">=</operator> <call pos:start="495:19" pos:end="497:48"><name pos:start="495:19" pos:end="495:40">ultrasparc_tsb_pointer</name><argument_list pos:start="495:41" pos:end="497:48">(<argument pos:start="495:42" pos:end="495:54"><expr pos:start="495:42" pos:end="495:54"><name pos:start="495:42" pos:end="495:54"><name pos:start="495:42" pos:end="495:44">env</name><operator pos:start="495:45" pos:end="495:46">-&gt;</operator><name pos:start="495:47" pos:end="495:50">dmmu</name><operator pos:start="495:51" pos:end="495:51">.</operator><name pos:start="495:52" pos:end="495:54">tsb</name></name></expr></argument>, <argument pos:start="495:57" pos:end="495:76"><expr pos:start="495:57" pos:end="495:76"><name pos:start="495:57" pos:end="495:76"><name pos:start="495:57" pos:end="495:59">env</name><operator pos:start="495:60" pos:end="495:61">-&gt;</operator><name pos:start="495:62" pos:end="495:65">dmmu</name><operator pos:start="495:66" pos:end="495:66">.</operator><name pos:start="495:67" pos:end="495:76">tag_access</name></name></expr></argument>,

                                         <argument pos:start="497:42" pos:end="497:47"><expr pos:start="497:42" pos:end="497:47"><literal type="number" pos:start="497:42" pos:end="497:42">8</literal><operator pos:start="497:43" pos:end="497:43">*</operator><literal type="number" pos:start="497:44" pos:end="497:47">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="499:13" pos:end="499:18">break;</break>

        </block_content>}</block>

    <case pos:start="503:5" pos:end="503:14">case <expr pos:start="503:10" pos:end="503:13"><literal type="number" pos:start="503:10" pos:end="503:13">0x5a</literal></expr>:</case> <comment type="line" pos:start="503:16" pos:end="503:39">// D-MMU 64k TSB pointer</comment>

        <block pos:start="505:9" pos:end="517:9">{<block_content pos:start="511:13" pos:end="515:18">

            <comment type="line" pos:start="507:13" pos:end="507:62">// env-&gt;dmmuregs[5] holds D-MMU TSB register value</comment>

            <comment type="line" pos:start="509:13" pos:end="509:69">// env-&gt;dmmuregs[6] holds D-MMU Tag Access register value</comment>

            <expr_stmt pos:start="511:13" pos:end="513:50"><expr pos:start="511:13" pos:end="513:49"><name pos:start="511:13" pos:end="511:15">ret</name> <operator pos:start="511:17" pos:end="511:17">=</operator> <call pos:start="511:19" pos:end="513:49"><name pos:start="511:19" pos:end="511:40">ultrasparc_tsb_pointer</name><argument_list pos:start="511:41" pos:end="513:49">(<argument pos:start="511:42" pos:end="511:54"><expr pos:start="511:42" pos:end="511:54"><name pos:start="511:42" pos:end="511:54"><name pos:start="511:42" pos:end="511:44">env</name><operator pos:start="511:45" pos:end="511:46">-&gt;</operator><name pos:start="511:47" pos:end="511:50">dmmu</name><operator pos:start="511:51" pos:end="511:51">.</operator><name pos:start="511:52" pos:end="511:54">tsb</name></name></expr></argument>, <argument pos:start="511:57" pos:end="511:76"><expr pos:start="511:57" pos:end="511:76"><name pos:start="511:57" pos:end="511:76"><name pos:start="511:57" pos:end="511:59">env</name><operator pos:start="511:60" pos:end="511:61">-&gt;</operator><name pos:start="511:62" pos:end="511:65">dmmu</name><operator pos:start="511:66" pos:end="511:66">.</operator><name pos:start="511:67" pos:end="511:76">tag_access</name></name></expr></argument>,

                                         <argument pos:start="513:42" pos:end="513:48"><expr pos:start="513:42" pos:end="513:48"><literal type="number" pos:start="513:42" pos:end="513:43">64</literal><operator pos:start="513:44" pos:end="513:44">*</operator><literal type="number" pos:start="513:45" pos:end="513:48">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="515:13" pos:end="515:18">break;</break>

        </block_content>}</block>

    <case pos:start="519:5" pos:end="519:14">case <expr pos:start="519:10" pos:end="519:13"><literal type="number" pos:start="519:10" pos:end="519:13">0x5d</literal></expr>:</case> <comment type="line" pos:start="519:16" pos:end="519:35">// D-MMU data access</comment>

        <block pos:start="521:9" pos:end="531:9">{<block_content pos:start="523:13" pos:end="529:18">

            <decl_stmt pos:start="523:13" pos:end="523:41"><decl pos:start="523:13" pos:end="523:40"><type pos:start="523:13" pos:end="523:15"><name pos:start="523:13" pos:end="523:15">int</name></type> <name pos:start="523:17" pos:end="523:19">reg</name> <init pos:start="523:21" pos:end="523:40">= <expr pos:start="523:23" pos:end="523:40"><operator pos:start="523:23" pos:end="523:23">(</operator><name pos:start="523:24" pos:end="523:27">addr</name> <operator pos:start="523:29" pos:end="523:30">&gt;&gt;</operator> <literal type="number" pos:start="523:32" pos:end="523:32">3</literal><operator pos:start="523:33" pos:end="523:33">)</operator> <operator pos:start="523:35" pos:end="523:35">&amp;</operator> <literal type="number" pos:start="523:37" pos:end="523:40">0x3f</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="527:13" pos:end="527:37"><expr pos:start="527:13" pos:end="527:36"><name pos:start="527:13" pos:end="527:15">ret</name> <operator pos:start="527:17" pos:end="527:17">=</operator> <name pos:start="527:19" pos:end="527:32"><name pos:start="527:19" pos:end="527:21">env</name><operator pos:start="527:22" pos:end="527:23">-&gt;</operator><name pos:start="527:24" pos:end="527:27">dtlb</name><index pos:start="527:28" pos:end="527:32">[<expr pos:start="527:29" pos:end="527:31"><name pos:start="527:29" pos:end="527:31">reg</name></expr>]</index></name><operator pos:start="527:33" pos:end="527:33">.</operator><name pos:start="527:34" pos:end="527:36">tte</name></expr>;</expr_stmt>

            <break pos:start="529:13" pos:end="529:18">break;</break>

        </block_content>}</block>

    <case pos:start="533:5" pos:end="533:14">case <expr pos:start="533:10" pos:end="533:13"><literal type="number" pos:start="533:10" pos:end="533:13">0x5e</literal></expr>:</case> <comment type="line" pos:start="533:16" pos:end="533:32">// D-MMU tag read</comment>

        <block pos:start="535:9" pos:end="545:9">{<block_content pos:start="537:13" pos:end="543:18">

            <decl_stmt pos:start="537:13" pos:end="537:41"><decl pos:start="537:13" pos:end="537:40"><type pos:start="537:13" pos:end="537:15"><name pos:start="537:13" pos:end="537:15">int</name></type> <name pos:start="537:17" pos:end="537:19">reg</name> <init pos:start="537:21" pos:end="537:40">= <expr pos:start="537:23" pos:end="537:40"><operator pos:start="537:23" pos:end="537:23">(</operator><name pos:start="537:24" pos:end="537:27">addr</name> <operator pos:start="537:29" pos:end="537:30">&gt;&gt;</operator> <literal type="number" pos:start="537:32" pos:end="537:32">3</literal><operator pos:start="537:33" pos:end="537:33">)</operator> <operator pos:start="537:35" pos:end="537:35">&amp;</operator> <literal type="number" pos:start="537:37" pos:end="537:40">0x3f</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="541:13" pos:end="541:37"><expr pos:start="541:13" pos:end="541:36"><name pos:start="541:13" pos:end="541:15">ret</name> <operator pos:start="541:17" pos:end="541:17">=</operator> <name pos:start="541:19" pos:end="541:32"><name pos:start="541:19" pos:end="541:21">env</name><operator pos:start="541:22" pos:end="541:23">-&gt;</operator><name pos:start="541:24" pos:end="541:27">dtlb</name><index pos:start="541:28" pos:end="541:32">[<expr pos:start="541:29" pos:end="541:31"><name pos:start="541:29" pos:end="541:31">reg</name></expr>]</index></name><operator pos:start="541:33" pos:end="541:33">.</operator><name pos:start="541:34" pos:end="541:36">tag</name></expr>;</expr_stmt>

            <break pos:start="543:13" pos:end="543:18">break;</break>

        </block_content>}</block>

    <case pos:start="547:5" pos:end="547:14">case <expr pos:start="547:10" pos:end="547:13"><literal type="number" pos:start="547:10" pos:end="547:13">0x46</literal></expr>:</case> <comment type="line" pos:start="547:16" pos:end="547:30">// D-cache data</comment>

    <case pos:start="549:5" pos:end="549:14">case <expr pos:start="549:10" pos:end="549:13"><literal type="number" pos:start="549:10" pos:end="549:13">0x47</literal></expr>:</case> <comment type="line" pos:start="549:16" pos:end="549:36">// D-cache tag access</comment>

    <case pos:start="551:5" pos:end="551:14">case <expr pos:start="551:10" pos:end="551:13"><literal type="number" pos:start="551:10" pos:end="551:13">0x4b</literal></expr>:</case> <comment type="line" pos:start="551:16" pos:end="551:38">// E-cache error enable</comment>

    <case pos:start="553:5" pos:end="553:14">case <expr pos:start="553:10" pos:end="553:13"><literal type="number" pos:start="553:10" pos:end="553:13">0x4c</literal></expr>:</case> <comment type="line" pos:start="553:16" pos:end="553:51">// E-cache asynchronous fault status</comment>

    <case pos:start="555:5" pos:end="555:14">case <expr pos:start="555:10" pos:end="555:13"><literal type="number" pos:start="555:10" pos:end="555:13">0x4d</literal></expr>:</case> <comment type="line" pos:start="555:16" pos:end="555:52">// E-cache asynchronous fault address</comment>

    <case pos:start="557:5" pos:end="557:14">case <expr pos:start="557:10" pos:end="557:13"><literal type="number" pos:start="557:10" pos:end="557:13">0x4e</literal></expr>:</case> <comment type="line" pos:start="557:16" pos:end="557:34">// E-cache tag data</comment>

    <case pos:start="559:5" pos:end="559:14">case <expr pos:start="559:10" pos:end="559:13"><literal type="number" pos:start="559:10" pos:end="559:13">0x66</literal></expr>:</case> <comment type="line" pos:start="559:16" pos:end="559:44">// I-cache instruction access</comment>

    <case pos:start="561:5" pos:end="561:14">case <expr pos:start="561:10" pos:end="561:13"><literal type="number" pos:start="561:10" pos:end="561:13">0x67</literal></expr>:</case> <comment type="line" pos:start="561:16" pos:end="561:36">// I-cache tag access</comment>

    <case pos:start="563:5" pos:end="563:14">case <expr pos:start="563:10" pos:end="563:13"><literal type="number" pos:start="563:10" pos:end="563:13">0x6e</literal></expr>:</case> <comment type="line" pos:start="563:16" pos:end="563:35">// I-cache predecode</comment>

    <case pos:start="565:5" pos:end="565:14">case <expr pos:start="565:10" pos:end="565:13"><literal type="number" pos:start="565:10" pos:end="565:13">0x6f</literal></expr>:</case> <comment type="line" pos:start="565:16" pos:end="565:34">// I-cache LRU etc.</comment>

    <case pos:start="567:5" pos:end="567:14">case <expr pos:start="567:10" pos:end="567:13"><literal type="number" pos:start="567:10" pos:end="567:13">0x76</literal></expr>:</case> <comment type="line" pos:start="567:16" pos:end="567:29">// E-cache tag</comment>

    <case pos:start="569:5" pos:end="569:14">case <expr pos:start="569:10" pos:end="569:13"><literal type="number" pos:start="569:10" pos:end="569:13">0x7e</literal></expr>:</case> <comment type="line" pos:start="569:16" pos:end="569:29">// E-cache tag</comment>

        <break pos:start="571:9" pos:end="571:14">break;</break>

    <case pos:start="573:5" pos:end="573:14">case <expr pos:start="573:10" pos:end="573:13"><literal type="number" pos:start="573:10" pos:end="573:13">0x5b</literal></expr>:</case> <comment type="line" pos:start="573:16" pos:end="573:36">// D-MMU data pointer</comment>

    <case pos:start="575:5" pos:end="575:14">case <expr pos:start="575:10" pos:end="575:13"><literal type="number" pos:start="575:10" pos:end="575:13">0x48</literal></expr>:</case> <comment type="line" pos:start="575:16" pos:end="575:40">// Interrupt dispatch, RO</comment>

    <case pos:start="577:5" pos:end="577:14">case <expr pos:start="577:10" pos:end="577:13"><literal type="number" pos:start="577:10" pos:end="577:13">0x49</literal></expr>:</case> <comment type="line" pos:start="577:16" pos:end="577:40">// Interrupt data receive</comment>

    <case pos:start="579:5" pos:end="579:14">case <expr pos:start="579:10" pos:end="579:13"><literal type="number" pos:start="579:10" pos:end="579:13">0x7f</literal></expr>:</case> <comment type="line" pos:start="579:16" pos:end="579:47">// Incoming interrupt vector, RO</comment>

        <comment type="line" pos:start="581:9" pos:end="581:14">// XXX</comment>

        <break pos:start="583:9" pos:end="583:14">break;</break>

    <case pos:start="585:5" pos:end="585:14">case <expr pos:start="585:10" pos:end="585:13"><literal type="number" pos:start="585:10" pos:end="585:13">0x54</literal></expr>:</case> <comment type="line" pos:start="585:16" pos:end="585:35">// I-MMU data in, WO</comment>

    <case pos:start="587:5" pos:end="587:14">case <expr pos:start="587:10" pos:end="587:13"><literal type="number" pos:start="587:10" pos:end="587:13">0x57</literal></expr>:</case> <comment type="line" pos:start="587:16" pos:end="587:33">// I-MMU demap, WO</comment>

    <case pos:start="589:5" pos:end="589:14">case <expr pos:start="589:10" pos:end="589:13"><literal type="number" pos:start="589:10" pos:end="589:13">0x5c</literal></expr>:</case> <comment type="line" pos:start="589:16" pos:end="589:35">// D-MMU data in, WO</comment>

    <case pos:start="591:5" pos:end="591:14">case <expr pos:start="591:10" pos:end="591:13"><literal type="number" pos:start="591:10" pos:end="591:13">0x5f</literal></expr>:</case> <comment type="line" pos:start="591:16" pos:end="591:33">// D-MMU demap, WO</comment>

    <case pos:start="593:5" pos:end="593:14">case <expr pos:start="593:10" pos:end="593:13"><literal type="number" pos:start="593:10" pos:end="593:13">0x77</literal></expr>:</case> <comment type="line" pos:start="593:16" pos:end="593:38">// Interrupt vector, WO</comment>

    <default pos:start="595:5" pos:end="595:12">default:</default>

        <expr_stmt pos:start="597:9" pos:end="597:50"><expr pos:start="597:9" pos:end="597:49"><call pos:start="597:9" pos:end="597:49"><name pos:start="597:9" pos:end="597:28">do_unassigned_access</name><argument_list pos:start="597:29" pos:end="597:49">(<argument pos:start="597:30" pos:end="597:33"><expr pos:start="597:30" pos:end="597:33"><name pos:start="597:30" pos:end="597:33">addr</name></expr></argument>, <argument pos:start="597:36" pos:end="597:36"><expr pos:start="597:36" pos:end="597:36"><literal type="number" pos:start="597:36" pos:end="597:36">0</literal></expr></argument>, <argument pos:start="597:39" pos:end="597:39"><expr pos:start="597:39" pos:end="597:39"><literal type="number" pos:start="597:39" pos:end="597:39">0</literal></expr></argument>, <argument pos:start="597:42" pos:end="597:42"><expr pos:start="597:42" pos:end="597:42"><literal type="number" pos:start="597:42" pos:end="597:42">1</literal></expr></argument>, <argument pos:start="597:45" pos:end="597:48"><expr pos:start="597:45" pos:end="597:48"><name pos:start="597:45" pos:end="597:48">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:16"><expr pos:start="599:9" pos:end="599:15"><name pos:start="599:9" pos:end="599:11">ret</name> <operator pos:start="599:13" pos:end="599:13">=</operator> <literal type="number" pos:start="599:15" pos:end="599:15">0</literal></expr>;</expr_stmt>

        <break pos:start="601:9" pos:end="601:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="607:5" pos:end="607:36">/* Convert from little endian */</comment>

    <switch pos:start="609:5" pos:end="659:5">switch <condition pos:start="609:12" pos:end="609:16">(<expr pos:start="609:13" pos:end="609:15"><name pos:start="609:13" pos:end="609:15">asi</name></expr>)</condition> <block pos:start="609:18" pos:end="659:5">{<block_content pos:start="611:5" pos:end="657:14">

    <case pos:start="611:5" pos:end="611:14">case <expr pos:start="611:10" pos:end="611:13"><literal type="number" pos:start="611:10" pos:end="611:13">0x0c</literal></expr>:</case> <comment type="line" pos:start="611:16" pos:end="611:44">// Nucleus Little Endian (LE)</comment>

    <case pos:start="613:5" pos:end="613:14">case <expr pos:start="613:10" pos:end="613:13"><literal type="number" pos:start="613:10" pos:end="613:13">0x18</literal></expr>:</case> <comment type="line" pos:start="613:16" pos:end="613:39">// As if user primary LE</comment>

    <case pos:start="615:5" pos:end="615:14">case <expr pos:start="615:10" pos:end="615:13"><literal type="number" pos:start="615:10" pos:end="615:13">0x19</literal></expr>:</case> <comment type="line" pos:start="615:16" pos:end="615:41">// As if user secondary LE</comment>

    <case pos:start="617:5" pos:end="617:14">case <expr pos:start="617:10" pos:end="617:13"><literal type="number" pos:start="617:10" pos:end="617:13">0x1c</literal></expr>:</case> <comment type="line" pos:start="617:16" pos:end="617:27">// Bypass LE</comment>

    <case pos:start="619:5" pos:end="619:14">case <expr pos:start="619:10" pos:end="619:13"><literal type="number" pos:start="619:10" pos:end="619:13">0x1d</literal></expr>:</case> <comment type="line" pos:start="619:16" pos:end="619:42">// Bypass, non-cacheable LE</comment>

    <case pos:start="621:5" pos:end="621:14">case <expr pos:start="621:10" pos:end="621:13"><literal type="number" pos:start="621:10" pos:end="621:13">0x88</literal></expr>:</case> <comment type="line" pos:start="621:16" pos:end="621:28">// Primary LE</comment>

    <case pos:start="623:5" pos:end="623:14">case <expr pos:start="623:10" pos:end="623:13"><literal type="number" pos:start="623:10" pos:end="623:13">0x89</literal></expr>:</case> <comment type="line" pos:start="623:16" pos:end="623:30">// Secondary LE</comment>

    <case pos:start="625:5" pos:end="625:14">case <expr pos:start="625:10" pos:end="625:13"><literal type="number" pos:start="625:10" pos:end="625:13">0x8a</literal></expr>:</case> <comment type="line" pos:start="625:16" pos:end="625:37">// Primary no-fault LE</comment>

    <case pos:start="627:5" pos:end="627:14">case <expr pos:start="627:10" pos:end="627:13"><literal type="number" pos:start="627:10" pos:end="627:13">0x8b</literal></expr>:</case> <comment type="line" pos:start="627:16" pos:end="627:39">// Secondary no-fault LE</comment>

        <switch pos:start="629:9" pos:end="653:9">switch<condition pos:start="629:15" pos:end="629:20">(<expr pos:start="629:16" pos:end="629:19"><name pos:start="629:16" pos:end="629:19">size</name></expr>)</condition> <block pos:start="629:22" pos:end="653:9">{<block_content pos:start="631:9" pos:end="651:18">

        <case pos:start="631:9" pos:end="631:15">case <expr pos:start="631:14" pos:end="631:14"><literal type="number" pos:start="631:14" pos:end="631:14">2</literal></expr>:</case>

            <expr_stmt pos:start="633:13" pos:end="633:31"><expr pos:start="633:13" pos:end="633:30"><name pos:start="633:13" pos:end="633:15">ret</name> <operator pos:start="633:17" pos:end="633:17">=</operator> <call pos:start="633:19" pos:end="633:30"><name pos:start="633:19" pos:end="633:25">bswap16</name><argument_list pos:start="633:26" pos:end="633:30">(<argument pos:start="633:27" pos:end="633:29"><expr pos:start="633:27" pos:end="633:29"><name pos:start="633:27" pos:end="633:29">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="635:13" pos:end="635:18">break;</break>

        <case pos:start="637:9" pos:end="637:15">case <expr pos:start="637:14" pos:end="637:14"><literal type="number" pos:start="637:14" pos:end="637:14">4</literal></expr>:</case>

            <expr_stmt pos:start="639:13" pos:end="639:31"><expr pos:start="639:13" pos:end="639:30"><name pos:start="639:13" pos:end="639:15">ret</name> <operator pos:start="639:17" pos:end="639:17">=</operator> <call pos:start="639:19" pos:end="639:30"><name pos:start="639:19" pos:end="639:25">bswap32</name><argument_list pos:start="639:26" pos:end="639:30">(<argument pos:start="639:27" pos:end="639:29"><expr pos:start="639:27" pos:end="639:29"><name pos:start="639:27" pos:end="639:29">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="641:13" pos:end="641:18">break;</break>

        <case pos:start="643:9" pos:end="643:15">case <expr pos:start="643:14" pos:end="643:14"><literal type="number" pos:start="643:14" pos:end="643:14">8</literal></expr>:</case>

            <expr_stmt pos:start="645:13" pos:end="645:31"><expr pos:start="645:13" pos:end="645:30"><name pos:start="645:13" pos:end="645:15">ret</name> <operator pos:start="645:17" pos:end="645:17">=</operator> <call pos:start="645:19" pos:end="645:30"><name pos:start="645:19" pos:end="645:25">bswap64</name><argument_list pos:start="645:26" pos:end="645:30">(<argument pos:start="645:27" pos:end="645:29"><expr pos:start="645:27" pos:end="645:29"><name pos:start="645:27" pos:end="645:29">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="647:13" pos:end="647:18">break;</break>

        <default pos:start="649:9" pos:end="649:16">default:</default>

            <break pos:start="651:13" pos:end="651:18">break;</break>

        </block_content>}</block></switch>

    <default pos:start="655:5" pos:end="655:12">default:</default>

        <break pos:start="657:9" pos:end="657:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="663:5" pos:end="663:34">/* Convert to signed number */</comment>

    <if_stmt pos:start="665:5" pos:end="696:0"><if pos:start="665:5" pos:end="696:0">if <condition pos:start="665:8" pos:end="665:13">(<expr pos:start="665:9" pos:end="665:12"><name pos:start="665:9" pos:end="665:12">sign</name></expr>)</condition> <block pos:start="665:15" pos:end="696:0">{<block_content pos:start="667:9" pos:end="691:9">

        <switch pos:start="667:9" pos:end="691:9">switch<condition pos:start="667:15" pos:end="667:20">(<expr pos:start="667:16" pos:end="667:19"><name pos:start="667:16" pos:end="667:19">size</name></expr>)</condition> <block pos:start="667:22" pos:end="691:9">{<block_content pos:start="669:9" pos:end="689:18">

        <case pos:start="669:9" pos:end="669:15">case <expr pos:start="669:14" pos:end="669:14"><literal type="number" pos:start="669:14" pos:end="669:14">1</literal></expr>:</case>

            <expr_stmt pos:start="671:13" pos:end="671:31"><expr pos:start="671:13" pos:end="671:30"><name pos:start="671:13" pos:end="671:15">ret</name> <operator pos:start="671:17" pos:end="671:17">=</operator> <operator pos:start="671:19" pos:end="671:19">(</operator><name pos:start="671:20" pos:end="671:25">int8_t</name><operator pos:start="671:26" pos:end="671:26">)</operator> <name pos:start="671:28" pos:end="671:30">ret</name></expr>;</expr_stmt>

            <break pos:start="673:13" pos:end="673:18">break;</break>

        <case pos:start="675:9" pos:end="675:15">case <expr pos:start="675:14" pos:end="675:14"><literal type="number" pos:start="675:14" pos:end="675:14">2</literal></expr>:</case>

            <expr_stmt pos:start="677:13" pos:end="677:32"><expr pos:start="677:13" pos:end="677:31"><name pos:start="677:13" pos:end="677:15">ret</name> <operator pos:start="677:17" pos:end="677:17">=</operator> <operator pos:start="677:19" pos:end="677:19">(</operator><name pos:start="677:20" pos:end="677:26">int16_t</name><operator pos:start="677:27" pos:end="677:27">)</operator> <name pos:start="677:29" pos:end="677:31">ret</name></expr>;</expr_stmt>

            <break pos:start="679:13" pos:end="679:18">break;</break>

        <case pos:start="681:9" pos:end="681:15">case <expr pos:start="681:14" pos:end="681:14"><literal type="number" pos:start="681:14" pos:end="681:14">4</literal></expr>:</case>

            <expr_stmt pos:start="683:13" pos:end="683:32"><expr pos:start="683:13" pos:end="683:31"><name pos:start="683:13" pos:end="683:15">ret</name> <operator pos:start="683:17" pos:end="683:17">=</operator> <operator pos:start="683:19" pos:end="683:19">(</operator><name pos:start="683:20" pos:end="683:26">int32_t</name><operator pos:start="683:27" pos:end="683:27">)</operator> <name pos:start="683:29" pos:end="683:31">ret</name></expr>;</expr_stmt>

            <break pos:start="685:13" pos:end="685:18">break;</break>

        <default pos:start="687:9" pos:end="687:16">default:</default>

            <break pos:start="689:13" pos:end="689:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="695:1" pos:end="695:16">#<cpp:directive pos:start="695:2" pos:end="695:6">ifdef</cpp:directive> <name pos:start="695:8" pos:end="695:16">DEBUG_ASI</name></cpp:ifdef>

    <expr_stmt pos:start="697:5" pos:end="700:0"><expr pos:start="697:5" pos:end="697:48"><call pos:start="697:5" pos:end="697:48"><name pos:start="697:5" pos:end="697:12">dump_asi</name><argument_list pos:start="697:13" pos:end="697:48">(<argument pos:start="697:14" pos:end="697:20"><expr pos:start="697:14" pos:end="697:20"><literal type="string" pos:start="697:14" pos:end="697:20">"read "</literal></expr></argument>, <argument pos:start="697:23" pos:end="697:31"><expr pos:start="697:23" pos:end="697:31"><name pos:start="697:23" pos:end="697:31">last_addr</name></expr></argument>, <argument pos:start="697:34" pos:end="697:36"><expr pos:start="697:34" pos:end="697:36"><name pos:start="697:34" pos:end="697:36">asi</name></expr></argument>, <argument pos:start="697:39" pos:end="697:42"><expr pos:start="697:39" pos:end="697:42"><name pos:start="697:39" pos:end="697:42">size</name></expr></argument>, <argument pos:start="697:45" pos:end="697:47"><expr pos:start="697:45" pos:end="697:47"><name pos:start="697:45" pos:end="697:47">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="699:1" pos:end="699:6">#<cpp:directive pos:start="699:2" pos:end="699:6">endif</cpp:directive></cpp:endif>

    <return pos:start="701:5" pos:end="701:15">return <expr pos:start="701:12" pos:end="701:14"><name pos:start="701:12" pos:end="701:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
