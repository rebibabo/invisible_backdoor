<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14210.c" pos:tabs="8"><function pos:start="1:1" pos:end="269:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">ivshmem_read</name><parameter_list pos:start="1:25" pos:end="1:68">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:29">void</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:37">opaque</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:57"><decl pos:start="1:40" pos:end="1:57"><type pos:start="1:40" pos:end="1:57"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:52">uint8_t</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">buf</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:67"><decl pos:start="1:60" pos:end="1:67"><type pos:start="1:60" pos:end="1:67"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:67">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="269:1">{<block_content pos:start="5:5" pos:end="267:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">IVShmemState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><name pos:start="5:23" pos:end="5:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">incoming_fd</name></decl>, <decl pos:start="7:22" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:27">tmp_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:25">guest_max_eventfd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">long</name></type> <name pos:start="11:10" pos:end="11:22">incoming_posn</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="55:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:75">(<expr pos:start="15:9" pos:end="15:74"><call pos:start="15:9" pos:end="15:41"><name pos:start="15:9" pos:end="15:22">fifo8_is_empty</name><argument_list pos:start="15:23" pos:end="15:41">(<argument pos:start="15:24" pos:end="15:40"><expr pos:start="15:24" pos:end="15:40"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:40"><name pos:start="15:25" pos:end="15:25">s</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:40">incoming_fifo</name></name></expr></argument>)</argument_list></call> <operator pos:start="15:43" pos:end="15:44">&amp;&amp;</operator> <name pos:start="15:46" pos:end="15:49">size</name> <operator pos:start="15:51" pos:end="15:52">==</operator> <sizeof pos:start="15:54" pos:end="15:74">sizeof<argument_list pos:start="15:60" pos:end="15:74">(<argument pos:start="15:61" pos:end="15:73"><expr pos:start="15:61" pos:end="15:73"><name pos:start="15:61" pos:end="15:73">incoming_posn</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="15:77" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:42">

        <expr_stmt pos:start="17:9" pos:end="17:42"><expr pos:start="17:9" pos:end="17:41"><call pos:start="17:9" pos:end="17:41"><name pos:start="17:9" pos:end="17:14">memcpy</name><argument_list pos:start="17:15" pos:end="17:41">(<argument pos:start="17:16" pos:end="17:29"><expr pos:start="17:16" pos:end="17:29"><operator pos:start="17:16" pos:end="17:16">&amp;</operator><name pos:start="17:17" pos:end="17:29">incoming_posn</name></expr></argument>, <argument pos:start="17:32" pos:end="17:34"><expr pos:start="17:32" pos:end="17:34"><name pos:start="17:32" pos:end="17:34">buf</name></expr></argument>, <argument pos:start="17:37" pos:end="17:40"><expr pos:start="17:37" pos:end="17:40"><name pos:start="17:37" pos:end="17:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="55:5">else <block pos:start="19:12" pos:end="55:5">{<block_content pos:start="21:9" pos:end="53:9">

        <decl_stmt pos:start="21:9" pos:end="21:25"><decl pos:start="21:9" pos:end="21:24"><type pos:start="21:9" pos:end="21:23"><specifier pos:start="21:9" pos:end="21:13">const</specifier> <name pos:start="21:15" pos:end="21:21">uint8_t</name> <modifier pos:start="21:23" pos:end="21:23">*</modifier></type><name pos:start="21:24" pos:end="21:24">p</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:21"><decl pos:start="23:9" pos:end="23:20"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint32_t</name></type> <name pos:start="23:18" pos:end="23:20">num</name></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:58"><expr pos:start="27:9" pos:end="27:57"><call pos:start="27:9" pos:end="27:57"><name pos:start="27:9" pos:end="27:23">IVSHMEM_DPRINTF</name><argument_list pos:start="27:24" pos:end="27:57">(<argument pos:start="27:25" pos:end="27:50"><expr pos:start="27:25" pos:end="27:50"><literal type="string" pos:start="27:25" pos:end="27:50">"short read of %d bytes\n"</literal></expr></argument>, <argument pos:start="27:53" pos:end="27:56"><expr pos:start="27:53" pos:end="27:56"><name pos:start="27:53" pos:end="27:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:74"><expr pos:start="29:9" pos:end="29:73"><name pos:start="29:9" pos:end="29:11">num</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:73"><name pos:start="29:15" pos:end="29:17">MAX</name><argument_list pos:start="29:18" pos:end="29:73">(<argument pos:start="29:19" pos:end="29:22"><expr pos:start="29:19" pos:end="29:22"><name pos:start="29:19" pos:end="29:22">size</name></expr></argument>, <argument pos:start="29:25" pos:end="29:72"><expr pos:start="29:25" pos:end="29:72"><sizeof pos:start="29:25" pos:end="29:36">sizeof<argument_list pos:start="29:31" pos:end="29:36">(<argument pos:start="29:32" pos:end="29:35"><expr pos:start="29:32" pos:end="29:35"><name pos:start="29:32" pos:end="29:35">long</name></expr></argument>)</argument_list></sizeof> <operator pos:start="29:38" pos:end="29:38">-</operator> <call pos:start="29:40" pos:end="29:72"><name pos:start="29:40" pos:end="29:53">fifo8_num_used</name><argument_list pos:start="29:54" pos:end="29:72">(<argument pos:start="29:55" pos:end="29:71"><expr pos:start="29:55" pos:end="29:71"><operator pos:start="29:55" pos:end="29:55">&amp;</operator><name pos:start="29:56" pos:end="29:71"><name pos:start="29:56" pos:end="29:56">s</name><operator pos:start="29:57" pos:end="29:58">-&gt;</operator><name pos:start="29:59" pos:end="29:71">incoming_fifo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:52"><expr pos:start="31:9" pos:end="31:51"><call pos:start="31:9" pos:end="31:51"><name pos:start="31:9" pos:end="31:22">fifo8_push_all</name><argument_list pos:start="31:23" pos:end="31:51">(<argument pos:start="31:24" pos:end="31:40"><expr pos:start="31:24" pos:end="31:40"><operator pos:start="31:24" pos:end="31:24">&amp;</operator><name pos:start="31:25" pos:end="31:40"><name pos:start="31:25" pos:end="31:25">s</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:40">incoming_fifo</name></name></expr></argument>, <argument pos:start="31:43" pos:end="31:45"><expr pos:start="31:43" pos:end="31:45"><name pos:start="31:43" pos:end="31:45">buf</name></expr></argument>, <argument pos:start="31:48" pos:end="31:50"><expr pos:start="31:48" pos:end="31:50"><name pos:start="31:48" pos:end="31:50">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:70">(<expr pos:start="33:13" pos:end="33:69"><call pos:start="33:13" pos:end="33:45"><name pos:start="33:13" pos:end="33:26">fifo8_num_used</name><argument_list pos:start="33:27" pos:end="33:45">(<argument pos:start="33:28" pos:end="33:44"><expr pos:start="33:28" pos:end="33:44"><operator pos:start="33:28" pos:end="33:28">&amp;</operator><name pos:start="33:29" pos:end="33:44"><name pos:start="33:29" pos:end="33:29">s</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:44">incoming_fifo</name></name></expr></argument>)</argument_list></call> <operator pos:start="33:47" pos:end="33:47">&lt;</operator> <sizeof pos:start="33:49" pos:end="33:69">sizeof<argument_list pos:start="33:55" pos:end="33:69">(<argument pos:start="33:56" pos:end="33:68"><expr pos:start="33:56" pos:end="33:68"><name pos:start="33:56" pos:end="33:68">incoming_posn</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="33:72" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:19">

            <return pos:start="35:13" pos:end="35:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:20"><expr pos:start="39:9" pos:end="39:19"><name pos:start="39:9" pos:end="39:12">size</name> <operator pos:start="39:14" pos:end="39:15">-=</operator> <name pos:start="39:17" pos:end="39:19">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:19"><expr pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:11">buf</name> <operator pos:start="41:13" pos:end="41:14">+=</operator> <name pos:start="41:16" pos:end="41:18">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:74"><expr pos:start="43:9" pos:end="43:73"><name pos:start="43:9" pos:end="43:9">p</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:73"><name pos:start="43:13" pos:end="43:25">fifo8_pop_buf</name><argument_list pos:start="43:26" pos:end="43:73">(<argument pos:start="43:27" pos:end="43:43"><expr pos:start="43:27" pos:end="43:43"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:43"><name pos:start="43:28" pos:end="43:28">s</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:43">incoming_fifo</name></name></expr></argument>, <argument pos:start="43:46" pos:end="43:66"><expr pos:start="43:46" pos:end="43:66"><sizeof pos:start="43:46" pos:end="43:66">sizeof<argument_list pos:start="43:52" pos:end="43:66">(<argument pos:start="43:53" pos:end="43:65"><expr pos:start="43:53" pos:end="43:65"><name pos:start="43:53" pos:end="43:65">incoming_posn</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="43:69" pos:end="43:72"><expr pos:start="43:69" pos:end="43:72"><operator pos:start="43:69" pos:end="43:69">&amp;</operator><name pos:start="43:70" pos:end="43:72">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:47"><expr pos:start="45:9" pos:end="45:46"><call pos:start="45:9" pos:end="45:46"><name pos:start="45:9" pos:end="45:16">g_assert</name><argument_list pos:start="45:17" pos:end="45:46">(<argument pos:start="45:18" pos:end="45:45"><expr pos:start="45:18" pos:end="45:45"><name pos:start="45:18" pos:end="45:20">num</name> <operator pos:start="45:22" pos:end="45:23">==</operator> <sizeof pos:start="45:25" pos:end="45:45">sizeof<argument_list pos:start="45:31" pos:end="45:45">(<argument pos:start="45:32" pos:end="45:44"><expr pos:start="45:32" pos:end="45:44"><name pos:start="45:32" pos:end="45:44">incoming_posn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:57"><expr pos:start="47:9" pos:end="47:56"><call pos:start="47:9" pos:end="47:56"><name pos:start="47:9" pos:end="47:14">memcpy</name><argument_list pos:start="47:15" pos:end="47:56">(<argument pos:start="47:16" pos:end="47:29"><expr pos:start="47:16" pos:end="47:29"><operator pos:start="47:16" pos:end="47:16">&amp;</operator><name pos:start="47:17" pos:end="47:29">incoming_posn</name></expr></argument>, <argument pos:start="47:32" pos:end="47:32"><expr pos:start="47:32" pos:end="47:32"><name pos:start="47:32" pos:end="47:32">p</name></expr></argument>, <argument pos:start="47:35" pos:end="47:55"><expr pos:start="47:35" pos:end="47:55"><sizeof pos:start="47:35" pos:end="47:55">sizeof<argument_list pos:start="47:41" pos:end="47:55">(<argument pos:start="47:42" pos:end="47:54"><expr pos:start="47:42" pos:end="47:54"><name pos:start="47:42" pos:end="47:54">incoming_posn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:21">(<expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:16">size</name> <operator pos:start="49:18" pos:end="49:18">&gt;</operator> <literal type="number" pos:start="49:20" pos:end="49:20">0</literal></expr>)</condition> <block pos:start="49:23" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:57">

            <expr_stmt pos:start="51:13" pos:end="51:57"><expr pos:start="51:13" pos:end="51:56"><call pos:start="51:13" pos:end="51:56"><name pos:start="51:13" pos:end="51:26">fifo8_push_all</name><argument_list pos:start="51:27" pos:end="51:56">(<argument pos:start="51:28" pos:end="51:44"><expr pos:start="51:28" pos:end="51:44"><operator pos:start="51:28" pos:end="51:28">&amp;</operator><name pos:start="51:29" pos:end="51:44"><name pos:start="51:29" pos:end="51:29">s</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:44">incoming_fifo</name></name></expr></argument>, <argument pos:start="51:47" pos:end="51:49"><expr pos:start="51:47" pos:end="51:49"><name pos:start="51:47" pos:end="51:49">buf</name></expr></argument>, <argument pos:start="51:52" pos:end="51:55"><expr pos:start="51:52" pos:end="51:55"><name pos:start="51:52" pos:end="51:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:27">(<expr pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:21">incoming_posn</name> <operator pos:start="59:23" pos:end="59:23">&lt;</operator> <operator pos:start="59:25" pos:end="59:25">-</operator><literal type="number" pos:start="59:26" pos:end="59:26">1</literal></expr>)</condition> <block pos:start="59:29" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:15">

        <expr_stmt pos:start="61:9" pos:end="61:70"><expr pos:start="61:9" pos:end="61:69"><call pos:start="61:9" pos:end="61:69"><name pos:start="61:9" pos:end="61:23">IVSHMEM_DPRINTF</name><argument_list pos:start="61:24" pos:end="61:69">(<argument pos:start="61:25" pos:end="61:53"><expr pos:start="61:25" pos:end="61:53"><literal type="string" pos:start="61:25" pos:end="61:53">"invalid incoming_posn %ld\n"</literal></expr></argument>, <argument pos:start="61:56" pos:end="61:68"><expr pos:start="61:56" pos:end="61:68"><name pos:start="61:56" pos:end="61:68">incoming_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:79">/* pick off s-&gt;server_chr-&gt;msgfd and store it, posn should accompany msg */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:10">tmp_fd</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <call pos:start="71:14" pos:end="71:49"><name pos:start="71:14" pos:end="71:34">qemu_chr_fe_get_msgfd</name><argument_list pos:start="71:35" pos:end="71:49">(<argument pos:start="71:36" pos:end="71:48"><expr pos:start="71:36" pos:end="71:48"><name pos:start="71:36" pos:end="71:48"><name pos:start="71:36" pos:end="71:36">s</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:48">server_chr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:70"><expr pos:start="73:5" pos:end="73:69"><call pos:start="73:5" pos:end="73:69"><name pos:start="73:5" pos:end="73:19">IVSHMEM_DPRINTF</name><argument_list pos:start="73:20" pos:end="73:69">(<argument pos:start="73:21" pos:end="73:45"><expr pos:start="73:21" pos:end="73:45"><literal type="string" pos:start="73:21" pos:end="73:45">"posn is %ld, fd is %d\n"</literal></expr></argument>, <argument pos:start="73:48" pos:end="73:60"><expr pos:start="73:48" pos:end="73:60"><name pos:start="73:48" pos:end="73:60">incoming_posn</name></expr></argument>, <argument pos:start="73:63" pos:end="73:68"><expr pos:start="73:63" pos:end="73:68"><name pos:start="73:63" pos:end="73:68">tmp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:55">/* make sure we have enough space for this guest */</comment>

    <if_stmt pos:start="79:5" pos:end="94:5"><if pos:start="79:5" pos:end="94:5">if <condition pos:start="79:8" pos:end="79:37">(<expr pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:21">incoming_posn</name> <operator pos:start="79:23" pos:end="79:24">&gt;=</operator> <name pos:start="79:26" pos:end="79:36"><name pos:start="79:26" pos:end="79:26">s</name><operator pos:start="79:27" pos:end="79:28">-&gt;</operator><name pos:start="79:29" pos:end="79:36">nb_peers</name></name></expr>)</condition> <block pos:start="79:39" pos:end="94:5">{<block_content pos:start="81:9" pos:end="92:9">

        <if_stmt pos:start="81:9" pos:end="92:9"><if pos:start="81:9" pos:end="92:9">if <condition pos:start="81:12" pos:end="81:59">(<expr pos:start="81:13" pos:end="81:58"><call pos:start="81:13" pos:end="81:54"><name pos:start="81:13" pos:end="81:36">increase_dynamic_storage</name><argument_list pos:start="81:37" pos:end="81:54">(<argument pos:start="81:38" pos:end="81:38"><expr pos:start="81:38" pos:end="81:38"><name pos:start="81:38" pos:end="81:38">s</name></expr></argument>, <argument pos:start="81:41" pos:end="81:53"><expr pos:start="81:41" pos:end="81:53"><name pos:start="81:41" pos:end="81:53">incoming_posn</name></expr></argument>)</argument_list></call> <operator pos:start="81:56" pos:end="81:56">&lt;</operator> <literal type="number" pos:start="81:58" pos:end="81:58">0</literal></expr>)</condition> <block pos:start="81:61" pos:end="92:9">{<block_content pos:start="83:13" pos:end="90:19">

            <expr_stmt pos:start="83:13" pos:end="83:62"><expr pos:start="83:13" pos:end="83:61"><call pos:start="83:13" pos:end="83:61"><name pos:start="83:13" pos:end="83:24">error_report</name><argument_list pos:start="83:25" pos:end="83:61">(<argument pos:start="83:26" pos:end="83:60"><expr pos:start="83:26" pos:end="83:60"><literal type="string" pos:start="83:26" pos:end="83:60">"increase_dynamic_storage() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="85:13" pos:end="88:13"><if pos:start="85:13" pos:end="88:13">if <condition pos:start="85:16" pos:end="85:29">(<expr pos:start="85:17" pos:end="85:28"><name pos:start="85:17" pos:end="85:22">tmp_fd</name> <operator pos:start="85:24" pos:end="85:25">!=</operator> <operator pos:start="85:27" pos:end="85:27">-</operator><literal type="number" pos:start="85:28" pos:end="85:28">1</literal></expr>)</condition> <block pos:start="85:31" pos:end="88:13">{<block_content>


            </block_content>}</block></if></if_stmt>

            <return pos:start="90:13" pos:end="90:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="98:5" pos:end="124:5"><if pos:start="98:5" pos:end="124:5">if <condition pos:start="98:8" pos:end="98:21">(<expr pos:start="98:9" pos:end="98:20"><name pos:start="98:9" pos:end="98:14">tmp_fd</name> <operator pos:start="98:16" pos:end="98:17">==</operator> <operator pos:start="98:19" pos:end="98:19">-</operator><literal type="number" pos:start="98:20" pos:end="98:20">1</literal></expr>)</condition> <block pos:start="98:23" pos:end="124:5">{<block_content pos:start="102:9" pos:end="122:9">

        <comment type="block" pos:start="100:9" pos:end="100:72">/* if posn is positive and unseen before then this is our posn*/</comment>

        <if_stmt pos:start="102:9" pos:end="122:9"><if pos:start="102:9" pos:end="112:9">if <condition pos:start="102:12" pos:end="104:71">(<expr pos:start="102:13" pos:end="104:70"><operator pos:start="102:13" pos:end="102:13">(</operator><name pos:start="102:14" pos:end="102:26">incoming_posn</name> <operator pos:start="102:28" pos:end="102:29">&gt;=</operator> <literal type="number" pos:start="102:31" pos:end="102:31">0</literal><operator pos:start="102:32" pos:end="102:32">)</operator> <operator pos:start="102:34" pos:end="102:35">&amp;&amp;</operator>

                            <operator pos:start="104:29" pos:end="104:29">(</operator><name pos:start="104:30" pos:end="104:52"><name pos:start="104:30" pos:end="104:30">s</name><operator pos:start="104:31" pos:end="104:32">-&gt;</operator><name pos:start="104:33" pos:end="104:37">peers</name><index pos:start="104:38" pos:end="104:52">[<expr pos:start="104:39" pos:end="104:51"><name pos:start="104:39" pos:end="104:51">incoming_posn</name></expr>]</index></name><operator pos:start="104:53" pos:end="104:53">.</operator><name pos:start="104:54" pos:end="104:61">eventfds</name> <operator pos:start="104:63" pos:end="104:64">==</operator> <name pos:start="104:66" pos:end="104:69">NULL</name><operator pos:start="104:70" pos:end="104:70">)</operator></expr>)</condition> <block pos:start="104:73" pos:end="112:9">{<block_content pos:start="108:13" pos:end="110:19">

            <comment type="block" pos:start="106:13" pos:end="106:34">/* receive our posn */</comment>

            <expr_stmt pos:start="108:13" pos:end="108:37"><expr pos:start="108:13" pos:end="108:36"><name pos:start="108:13" pos:end="108:20"><name pos:start="108:13" pos:end="108:13">s</name><operator pos:start="108:14" pos:end="108:15">-&gt;</operator><name pos:start="108:16" pos:end="108:20">vm_id</name></name> <operator pos:start="108:22" pos:end="108:22">=</operator> <name pos:start="108:24" pos:end="108:36">incoming_posn</name></expr>;</expr_stmt>

            <return pos:start="110:13" pos:end="110:19">return;</return>

        </block_content>}</block></if> <else pos:start="112:11" pos:end="122:9">else <block pos:start="112:16" pos:end="122:9">{<block_content pos:start="116:13" pos:end="120:19">

            <comment type="block" pos:start="114:13" pos:end="114:77">/* otherwise an fd == -1 means an existing guest has gone away */</comment>

            <expr_stmt pos:start="116:13" pos:end="116:71"><expr pos:start="116:13" pos:end="116:70"><call pos:start="116:13" pos:end="116:70"><name pos:start="116:13" pos:end="116:27">IVSHMEM_DPRINTF</name><argument_list pos:start="116:28" pos:end="116:70">(<argument pos:start="116:29" pos:end="116:54"><expr pos:start="116:29" pos:end="116:54"><literal type="string" pos:start="116:29" pos:end="116:54">"posn %ld has gone away\n"</literal></expr></argument>, <argument pos:start="116:57" pos:end="116:69"><expr pos:start="116:57" pos:end="116:69"><name pos:start="116:57" pos:end="116:69">incoming_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="118:13" pos:end="118:51"><expr pos:start="118:13" pos:end="118:50"><call pos:start="118:13" pos:end="118:50"><name pos:start="118:13" pos:end="118:32">close_guest_eventfds</name><argument_list pos:start="118:33" pos:end="118:50">(<argument pos:start="118:34" pos:end="118:34"><expr pos:start="118:34" pos:end="118:34"><name pos:start="118:34" pos:end="118:34">s</name></expr></argument>, <argument pos:start="118:37" pos:end="118:49"><expr pos:start="118:37" pos:end="118:49"><name pos:start="118:37" pos:end="118:49">incoming_posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="120:13" pos:end="120:19">return;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="128:5" pos:end="128:67">/* because of the implementation of get_msgfd, we need a dup */</comment>

    <expr_stmt pos:start="130:5" pos:end="130:30"><expr pos:start="130:5" pos:end="130:29"><name pos:start="130:5" pos:end="130:15">incoming_fd</name> <operator pos:start="130:17" pos:end="130:17">=</operator> <call pos:start="130:19" pos:end="130:29"><name pos:start="130:19" pos:end="130:21">dup</name><argument_list pos:start="130:22" pos:end="130:29">(<argument pos:start="130:23" pos:end="130:28"><expr pos:start="130:23" pos:end="130:28"><name pos:start="130:23" pos:end="130:28">tmp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="134:5" pos:end="143:5"><if pos:start="134:5" pos:end="143:5">if <condition pos:start="134:8" pos:end="134:26">(<expr pos:start="134:9" pos:end="134:25"><name pos:start="134:9" pos:end="134:19">incoming_fd</name> <operator pos:start="134:21" pos:end="134:22">==</operator> <operator pos:start="134:24" pos:end="134:24">-</operator><literal type="number" pos:start="134:25" pos:end="134:25">1</literal></expr>)</condition> <block pos:start="134:28" pos:end="143:5">{<block_content pos:start="136:9" pos:end="141:15">

        <expr_stmt pos:start="136:9" pos:end="138:77"><expr pos:start="136:9" pos:end="138:76"><call pos:start="136:9" pos:end="138:76"><name pos:start="136:9" pos:end="136:15">fprintf</name><argument_list pos:start="136:16" pos:end="138:76">(<argument pos:start="136:17" pos:end="136:22"><expr pos:start="136:17" pos:end="136:22"><name pos:start="136:17" pos:end="136:22">stderr</name></expr></argument>, <argument pos:start="136:25" pos:end="136:65"><expr pos:start="136:25" pos:end="136:65"><literal type="string" pos:start="136:25" pos:end="136:65">"could not allocate file descriptor %s\n"</literal></expr></argument>,

                                                            <argument pos:start="138:61" pos:end="138:75"><expr pos:start="138:61" pos:end="138:75"><call pos:start="138:61" pos:end="138:75"><name pos:start="138:61" pos:end="138:68">strerror</name><argument_list pos:start="138:69" pos:end="138:75">(<argument pos:start="138:70" pos:end="138:74"><expr pos:start="138:70" pos:end="138:74"><name pos:start="138:70" pos:end="138:74">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <return pos:start="141:9" pos:end="141:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:66">/* if the position is -1, then it's shared memory region fd */</comment>

    <if_stmt pos:start="149:5" pos:end="201:5"><if pos:start="149:5" pos:end="201:5">if <condition pos:start="149:8" pos:end="149:28">(<expr pos:start="149:9" pos:end="149:27"><name pos:start="149:9" pos:end="149:21">incoming_posn</name> <operator pos:start="149:23" pos:end="149:24">==</operator> <operator pos:start="149:26" pos:end="149:26">-</operator><literal type="number" pos:start="149:27" pos:end="149:27">1</literal></expr>)</condition> <block pos:start="149:30" pos:end="201:5">{<block_content pos:start="153:9" pos:end="199:15">



        <decl_stmt pos:start="153:9" pos:end="153:23"><decl pos:start="153:9" pos:end="153:22"><type pos:start="153:9" pos:end="153:14"><name pos:start="153:9" pos:end="153:12">void</name> <modifier pos:start="153:14" pos:end="153:14">*</modifier></type> <name pos:start="153:16" pos:end="153:22">map_ptr</name></decl>;</decl_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:24"><expr pos:start="157:9" pos:end="157:23"><name pos:start="157:9" pos:end="157:19"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:19">max_peer</name></name> <operator pos:start="157:21" pos:end="157:21">=</operator> <literal type="number" pos:start="157:23" pos:end="157:23">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="161:9" pos:end="165:9"><if pos:start="161:9" pos:end="165:9">if <condition pos:start="161:12" pos:end="161:49">(<expr pos:start="161:13" pos:end="161:48"><call pos:start="161:13" pos:end="161:42"><name pos:start="161:13" pos:end="161:26">check_shm_size</name><argument_list pos:start="161:27" pos:end="161:42">(<argument pos:start="161:28" pos:end="161:28"><expr pos:start="161:28" pos:end="161:28"><name pos:start="161:28" pos:end="161:28">s</name></expr></argument>, <argument pos:start="161:31" pos:end="161:41"><expr pos:start="161:31" pos:end="161:41"><name pos:start="161:31" pos:end="161:41">incoming_fd</name></expr></argument>)</argument_list></call> <operator pos:start="161:44" pos:end="161:45">==</operator> <operator pos:start="161:47" pos:end="161:47">-</operator><literal type="number" pos:start="161:48" pos:end="161:48">1</literal></expr>)</condition> <block pos:start="161:51" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:21">

            <expr_stmt pos:start="163:13" pos:end="163:21"><expr pos:start="163:13" pos:end="163:20"><call pos:start="163:13" pos:end="163:20"><name pos:start="163:13" pos:end="163:16">exit</name><argument_list pos:start="163:17" pos:end="163:20">(<argument pos:start="163:18" pos:end="163:19"><expr pos:start="163:18" pos:end="163:19"><operator pos:start="163:18" pos:end="163:18">-</operator><literal type="number" pos:start="163:19" pos:end="163:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="169:9" pos:end="169:51">/* mmap the region and map into the BAR2 */</comment>

        <expr_stmt pos:start="171:9" pos:end="173:76"><expr pos:start="171:9" pos:end="173:75"><name pos:start="171:9" pos:end="171:15">map_ptr</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <call pos:start="171:19" pos:end="173:75"><name pos:start="171:19" pos:end="171:22">mmap</name><argument_list pos:start="171:23" pos:end="173:75">(<argument pos:start="171:24" pos:end="171:24"><expr pos:start="171:24" pos:end="171:24"><literal type="number" pos:start="171:24" pos:end="171:24">0</literal></expr></argument>, <argument pos:start="171:27" pos:end="171:41"><expr pos:start="171:27" pos:end="171:41"><name pos:start="171:27" pos:end="171:41"><name pos:start="171:27" pos:end="171:27">s</name><operator pos:start="171:28" pos:end="171:29">-&gt;</operator><name pos:start="171:30" pos:end="171:41">ivshmem_size</name></name></expr></argument>, <argument pos:start="171:44" pos:end="171:63"><expr pos:start="171:44" pos:end="171:63"><name pos:start="171:44" pos:end="171:52">PROT_READ</name><operator pos:start="171:53" pos:end="171:53">|</operator><name pos:start="171:54" pos:end="171:63">PROT_WRITE</name></expr></argument>, <argument pos:start="171:66" pos:end="171:75"><expr pos:start="171:66" pos:end="171:75"><name pos:start="171:66" pos:end="171:75">MAP_SHARED</name></expr></argument>,

                                                            <argument pos:start="173:61" pos:end="173:71"><expr pos:start="173:61" pos:end="173:71"><name pos:start="173:61" pos:end="173:71">incoming_fd</name></expr></argument>, <argument pos:start="173:74" pos:end="173:74"><expr pos:start="173:74" pos:end="173:74"><literal type="number" pos:start="173:74" pos:end="173:74">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="177:77"><expr pos:start="175:9" pos:end="177:76"><call pos:start="175:9" pos:end="177:76"><name pos:start="175:9" pos:end="175:34">memory_region_init_ram_ptr</name><argument_list pos:start="175:35" pos:end="177:76">(<argument pos:start="175:36" pos:end="175:46"><expr pos:start="175:36" pos:end="175:46"><operator pos:start="175:36" pos:end="175:36">&amp;</operator><name pos:start="175:37" pos:end="175:46"><name pos:start="175:37" pos:end="175:37">s</name><operator pos:start="175:38" pos:end="175:39">-&gt;</operator><name pos:start="175:40" pos:end="175:46">ivshmem</name></name></expr></argument>, <argument pos:start="175:49" pos:end="175:57"><expr pos:start="175:49" pos:end="175:57"><call pos:start="175:49" pos:end="175:57"><name pos:start="175:49" pos:end="175:54">OBJECT</name><argument_list pos:start="175:55" pos:end="175:57">(<argument pos:start="175:56" pos:end="175:56"><expr pos:start="175:56" pos:end="175:56"><name pos:start="175:56" pos:end="175:56">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="177:36" pos:end="177:49"><expr pos:start="177:36" pos:end="177:49"><literal type="string" pos:start="177:36" pos:end="177:49">"ivshmem.bar2"</literal></expr></argument>, <argument pos:start="177:52" pos:end="177:66"><expr pos:start="177:52" pos:end="177:66"><name pos:start="177:52" pos:end="177:66"><name pos:start="177:52" pos:end="177:52">s</name><operator pos:start="177:53" pos:end="177:54">-&gt;</operator><name pos:start="177:55" pos:end="177:66">ivshmem_size</name></name></expr></argument>, <argument pos:start="177:69" pos:end="177:75"><expr pos:start="177:69" pos:end="177:75"><name pos:start="177:69" pos:end="177:75">map_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:53"><expr pos:start="179:9" pos:end="179:52"><call pos:start="179:9" pos:end="179:52"><name pos:start="179:9" pos:end="179:28">vmstate_register_ram</name><argument_list pos:start="179:29" pos:end="179:52">(<argument pos:start="179:30" pos:end="179:40"><expr pos:start="179:30" pos:end="179:40"><operator pos:start="179:30" pos:end="179:30">&amp;</operator><name pos:start="179:31" pos:end="179:40"><name pos:start="179:31" pos:end="179:31">s</name><operator pos:start="179:32" pos:end="179:33">-&gt;</operator><name pos:start="179:34" pos:end="179:40">ivshmem</name></name></expr></argument>, <argument pos:start="179:43" pos:end="179:51"><expr pos:start="179:43" pos:end="179:51"><call pos:start="179:43" pos:end="179:51"><name pos:start="179:43" pos:end="179:48">DEVICE</name><argument_list pos:start="179:49" pos:end="179:51">(<argument pos:start="179:50" pos:end="179:50"><expr pos:start="179:50" pos:end="179:50"><name pos:start="179:50" pos:end="179:50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="183:9" pos:end="185:51"><expr pos:start="183:9" pos:end="185:50"><call pos:start="183:9" pos:end="185:50"><name pos:start="183:9" pos:end="183:23">IVSHMEM_DPRINTF</name><argument_list pos:start="183:24" pos:end="185:50">(<argument pos:start="183:25" pos:end="183:67"><expr pos:start="183:25" pos:end="183:67"><literal type="string" pos:start="183:25" pos:end="183:55">"guest h/w addr = %p, size = %"</literal> <name pos:start="183:57" pos:end="183:62">PRIu64</name> <literal type="string" pos:start="183:64" pos:end="183:67">"\n"</literal></expr></argument>,

                         <argument pos:start="185:26" pos:end="185:32"><expr pos:start="185:26" pos:end="185:32"><name pos:start="185:26" pos:end="185:32">map_ptr</name></expr></argument>, <argument pos:start="185:35" pos:end="185:49"><expr pos:start="185:35" pos:end="185:49"><name pos:start="185:35" pos:end="185:49"><name pos:start="185:35" pos:end="185:35">s</name><operator pos:start="185:36" pos:end="185:37">-&gt;</operator><name pos:start="185:38" pos:end="185:49">ivshmem_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:61"><expr pos:start="189:9" pos:end="189:60"><call pos:start="189:9" pos:end="189:60"><name pos:start="189:9" pos:end="189:35">memory_region_add_subregion</name><argument_list pos:start="189:36" pos:end="189:60">(<argument pos:start="189:37" pos:end="189:43"><expr pos:start="189:37" pos:end="189:43"><operator pos:start="189:37" pos:end="189:37">&amp;</operator><name pos:start="189:38" pos:end="189:43"><name pos:start="189:38" pos:end="189:38">s</name><operator pos:start="189:39" pos:end="189:40">-&gt;</operator><name pos:start="189:41" pos:end="189:43">bar</name></name></expr></argument>, <argument pos:start="189:46" pos:end="189:46"><expr pos:start="189:46" pos:end="189:46"><literal type="number" pos:start="189:46" pos:end="189:46">0</literal></expr></argument>, <argument pos:start="189:49" pos:end="189:59"><expr pos:start="189:49" pos:end="189:59"><operator pos:start="189:49" pos:end="189:49">&amp;</operator><name pos:start="189:50" pos:end="189:59"><name pos:start="189:50" pos:end="189:50">s</name><operator pos:start="189:51" pos:end="189:52">-&gt;</operator><name pos:start="189:53" pos:end="189:59">ivshmem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="193:9" pos:end="193:60">/* only store the fd if it is successfully mapped */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:32"><expr pos:start="195:9" pos:end="195:31"><name pos:start="195:9" pos:end="195:17"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:17">shm_fd</name></name> <operator pos:start="195:19" pos:end="195:19">=</operator> <name pos:start="195:21" pos:end="195:31">incoming_fd</name></expr>;</expr_stmt>



        <return pos:start="199:9" pos:end="199:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="205:5" pos:end="207:28">/* each guest has an array of eventfds, and we keep track of how many

     * guests for each VM */</comment>

    <expr_stmt pos:start="209:5" pos:end="209:60"><expr pos:start="209:5" pos:end="209:59"><name pos:start="209:5" pos:end="209:21">guest_max_eventfd</name> <operator pos:start="209:23" pos:end="209:23">=</operator> <name pos:start="209:25" pos:end="209:47"><name pos:start="209:25" pos:end="209:25">s</name><operator pos:start="209:26" pos:end="209:27">-&gt;</operator><name pos:start="209:28" pos:end="209:32">peers</name><index pos:start="209:33" pos:end="209:47">[<expr pos:start="209:34" pos:end="209:46"><name pos:start="209:34" pos:end="209:46">incoming_posn</name></expr>]</index></name><operator pos:start="209:48" pos:end="209:48">.</operator><name pos:start="209:49" pos:end="209:59">nb_eventfds</name></expr>;</expr_stmt>



    <if_stmt pos:start="213:5" pos:end="219:5"><if pos:start="213:5" pos:end="219:5">if <condition pos:start="213:8" pos:end="213:31">(<expr pos:start="213:9" pos:end="213:30"><name pos:start="213:9" pos:end="213:25">guest_max_eventfd</name> <operator pos:start="213:27" pos:end="213:28">==</operator> <literal type="number" pos:start="213:30" pos:end="213:30">0</literal></expr>)</condition> <block pos:start="213:33" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:76">

        <comment type="block" pos:start="215:9" pos:end="215:40">/* one eventfd per MSI vector */</comment>

        <expr_stmt pos:start="217:9" pos:end="217:76"><expr pos:start="217:9" pos:end="217:75"><name pos:start="217:9" pos:end="217:31"><name pos:start="217:9" pos:end="217:9">s</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:16">peers</name><index pos:start="217:17" pos:end="217:31">[<expr pos:start="217:18" pos:end="217:30"><name pos:start="217:18" pos:end="217:30">incoming_posn</name></expr>]</index></name><operator pos:start="217:32" pos:end="217:32">.</operator><name pos:start="217:33" pos:end="217:40">eventfds</name> <operator pos:start="217:42" pos:end="217:42">=</operator> <call pos:start="217:44" pos:end="217:75"><name pos:start="217:44" pos:end="217:48">g_new</name><argument_list pos:start="217:49" pos:end="217:75">(<argument pos:start="217:50" pos:end="217:62"><expr pos:start="217:50" pos:end="217:62"><name pos:start="217:50" pos:end="217:62">EventNotifier</name></expr></argument>, <argument pos:start="217:65" pos:end="217:74"><expr pos:start="217:65" pos:end="217:74"><name pos:start="217:65" pos:end="217:74"><name pos:start="217:65" pos:end="217:65">s</name><operator pos:start="217:66" pos:end="217:67">-&gt;</operator><name pos:start="217:68" pos:end="217:74">vectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:54">/* this is an eventfd for a particular guest VM */</comment>

    <expr_stmt pos:start="225:5" pos:end="227:76"><expr pos:start="225:5" pos:end="227:75"><call pos:start="225:5" pos:end="227:75"><name pos:start="225:5" pos:end="225:19">IVSHMEM_DPRINTF</name><argument_list pos:start="225:20" pos:end="227:75">(<argument pos:start="225:21" pos:end="225:46"><expr pos:start="225:21" pos:end="225:46"><literal type="string" pos:start="225:21" pos:end="225:46">"eventfds[%ld][%d] = %d\n"</literal></expr></argument>, <argument pos:start="225:49" pos:end="225:61"><expr pos:start="225:49" pos:end="225:61"><name pos:start="225:49" pos:end="225:61">incoming_posn</name></expr></argument>,

                                            <argument pos:start="227:45" pos:end="227:61"><expr pos:start="227:45" pos:end="227:61"><name pos:start="227:45" pos:end="227:61">guest_max_eventfd</name></expr></argument>, <argument pos:start="227:64" pos:end="227:74"><expr pos:start="227:64" pos:end="227:74"><name pos:start="227:64" pos:end="227:74">incoming_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="231:40"><expr pos:start="229:5" pos:end="231:39"><call pos:start="229:5" pos:end="231:39"><name pos:start="229:5" pos:end="229:26">event_notifier_init_fd</name><argument_list pos:start="229:27" pos:end="231:39">(<argument pos:start="229:28" pos:end="229:79"><expr pos:start="229:28" pos:end="229:79"><operator pos:start="229:28" pos:end="229:28">&amp;</operator><name pos:start="229:29" pos:end="229:51"><name pos:start="229:29" pos:end="229:29">s</name><operator pos:start="229:30" pos:end="229:31">-&gt;</operator><name pos:start="229:32" pos:end="229:36">peers</name><index pos:start="229:37" pos:end="229:51">[<expr pos:start="229:38" pos:end="229:50"><name pos:start="229:38" pos:end="229:50">incoming_posn</name></expr>]</index></name><operator pos:start="229:52" pos:end="229:52">.</operator><name pos:start="229:53" pos:end="229:79"><name pos:start="229:53" pos:end="229:60">eventfds</name><index pos:start="229:61" pos:end="229:79">[<expr pos:start="229:62" pos:end="229:78"><name pos:start="229:62" pos:end="229:78">guest_max_eventfd</name></expr>]</index></name></expr></argument>,

                           <argument pos:start="231:28" pos:end="231:38"><expr pos:start="231:28" pos:end="231:38"><name pos:start="231:28" pos:end="231:38">incoming_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="235:5" pos:end="235:46">/* increment count for particular guest */</comment>

    <expr_stmt pos:start="237:5" pos:end="237:42"><expr pos:start="237:5" pos:end="237:41"><name pos:start="237:5" pos:end="237:27"><name pos:start="237:5" pos:end="237:5">s</name><operator pos:start="237:6" pos:end="237:7">-&gt;</operator><name pos:start="237:8" pos:end="237:12">peers</name><index pos:start="237:13" pos:end="237:27">[<expr pos:start="237:14" pos:end="237:26"><name pos:start="237:14" pos:end="237:26">incoming_posn</name></expr>]</index></name><operator pos:start="237:28" pos:end="237:28">.</operator><name pos:start="237:29" pos:end="237:39">nb_eventfds</name><operator pos:start="237:40" pos:end="237:41">++</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:41">/* keep track of the maximum VM ID */</comment>

    <if_stmt pos:start="243:5" pos:end="247:5"><if pos:start="243:5" pos:end="247:5">if <condition pos:start="243:8" pos:end="243:36">(<expr pos:start="243:9" pos:end="243:35"><name pos:start="243:9" pos:end="243:21">incoming_posn</name> <operator pos:start="243:23" pos:end="243:23">&gt;</operator> <name pos:start="243:25" pos:end="243:35"><name pos:start="243:25" pos:end="243:25">s</name><operator pos:start="243:26" pos:end="243:27">-&gt;</operator><name pos:start="243:28" pos:end="243:35">max_peer</name></name></expr>)</condition> <block pos:start="243:38" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:36">

        <expr_stmt pos:start="245:9" pos:end="245:36"><expr pos:start="245:9" pos:end="245:35"><name pos:start="245:9" pos:end="245:19"><name pos:start="245:9" pos:end="245:9">s</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:19">max_peer</name></name> <operator pos:start="245:21" pos:end="245:21">=</operator> <name pos:start="245:23" pos:end="245:35">incoming_posn</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="251:5" pos:end="259:5"><if pos:start="251:5" pos:end="259:5">if <condition pos:start="251:8" pos:end="251:34">(<expr pos:start="251:9" pos:end="251:33"><name pos:start="251:9" pos:end="251:21">incoming_posn</name> <operator pos:start="251:23" pos:end="251:24">==</operator> <name pos:start="251:26" pos:end="251:33"><name pos:start="251:26" pos:end="251:26">s</name><operator pos:start="251:27" pos:end="251:28">-&gt;</operator><name pos:start="251:29" pos:end="251:33">vm_id</name></name></expr>)</condition> <block pos:start="251:36" pos:end="259:5">{<block_content pos:start="253:9" pos:end="257:38">

        <expr_stmt pos:start="253:9" pos:end="257:38"><expr pos:start="253:9" pos:end="257:37"><name pos:start="253:9" pos:end="253:41"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:22">eventfd_chr</name><index pos:start="253:23" pos:end="253:41">[<expr pos:start="253:24" pos:end="253:40"><name pos:start="253:24" pos:end="253:40">guest_max_eventfd</name></expr>]</index></name> <operator pos:start="253:43" pos:end="253:43">=</operator> <call pos:start="253:45" pos:end="257:37"><name pos:start="253:45" pos:end="253:69">create_eventfd_chr_device</name><argument_list pos:start="253:70" pos:end="257:37">(<argument pos:start="253:71" pos:end="253:71"><expr pos:start="253:71" pos:end="253:71"><name pos:start="253:71" pos:end="253:71">s</name></expr></argument>,

                   <argument pos:start="255:20" pos:end="255:66"><expr pos:start="255:20" pos:end="255:66"><operator pos:start="255:20" pos:end="255:20">&amp;</operator><name pos:start="255:21" pos:end="255:38"><name pos:start="255:21" pos:end="255:21">s</name><operator pos:start="255:22" pos:end="255:23">-&gt;</operator><name pos:start="255:24" pos:end="255:28">peers</name><index pos:start="255:29" pos:end="255:38">[<expr pos:start="255:30" pos:end="255:37"><name pos:start="255:30" pos:end="255:37"><name pos:start="255:30" pos:end="255:30">s</name><operator pos:start="255:31" pos:end="255:32">-&gt;</operator><name pos:start="255:33" pos:end="255:37">vm_id</name></name></expr>]</index></name><operator pos:start="255:39" pos:end="255:39">.</operator><name pos:start="255:40" pos:end="255:66"><name pos:start="255:40" pos:end="255:47">eventfds</name><index pos:start="255:48" pos:end="255:66">[<expr pos:start="255:49" pos:end="255:65"><name pos:start="255:49" pos:end="255:65">guest_max_eventfd</name></expr>]</index></name></expr></argument>,

                   <argument pos:start="257:20" pos:end="257:36"><expr pos:start="257:20" pos:end="257:36"><name pos:start="257:20" pos:end="257:36">guest_max_eventfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="263:5" pos:end="267:5"><if pos:start="263:5" pos:end="267:5">if <condition pos:start="263:8" pos:end="263:50">(<expr pos:start="263:9" pos:end="263:49"><call pos:start="263:9" pos:end="263:49"><name pos:start="263:9" pos:end="263:27">ivshmem_has_feature</name><argument_list pos:start="263:28" pos:end="263:49">(<argument pos:start="263:29" pos:end="263:29"><expr pos:start="263:29" pos:end="263:29"><name pos:start="263:29" pos:end="263:29">s</name></expr></argument>, <argument pos:start="263:32" pos:end="263:48"><expr pos:start="263:32" pos:end="263:48"><name pos:start="263:32" pos:end="263:48">IVSHMEM_IOEVENTFD</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="263:52" pos:end="267:5">{<block_content pos:start="265:9" pos:end="265:65">

        <expr_stmt pos:start="265:9" pos:end="265:65"><expr pos:start="265:9" pos:end="265:64"><call pos:start="265:9" pos:end="265:64"><name pos:start="265:9" pos:end="265:27">ivshmem_add_eventfd</name><argument_list pos:start="265:28" pos:end="265:64">(<argument pos:start="265:29" pos:end="265:29"><expr pos:start="265:29" pos:end="265:29"><name pos:start="265:29" pos:end="265:29">s</name></expr></argument>, <argument pos:start="265:32" pos:end="265:44"><expr pos:start="265:32" pos:end="265:44"><name pos:start="265:32" pos:end="265:44">incoming_posn</name></expr></argument>, <argument pos:start="265:47" pos:end="265:63"><expr pos:start="265:47" pos:end="265:63"><name pos:start="265:47" pos:end="265:63">guest_max_eventfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
