<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22492.c" pos:tabs="8"><function pos:start="1:1" pos:end="275:1"><type pos:start="1:1" pos:end="1:28"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name> <name pos:start="1:17" pos:end="1:28">coroutine_fn</name></type> <name pos:start="1:30" pos:end="1:45">mirror_iteration</name><parameter_list pos:start="1:46" pos:end="1:64">(<parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:62"><name pos:start="1:47" pos:end="1:60">MirrorBlockJob</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="275:1">{<block_content pos:start="5:5" pos:end="273:20">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:28">source</name> <init pos:start="5:30" pos:end="5:43">= <expr pos:start="5:32" pos:end="5:43"><name pos:start="5:32" pos:end="5:43"><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:40">common</name><operator pos:start="5:41" pos:end="5:41">.</operator><name pos:start="5:42" pos:end="5:43">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">nb_sectors</name></decl>, <decl pos:start="7:21" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:37">sectors_per_chunk</name></decl>, <decl pos:start="7:40" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:40" pos:end="7:48">nb_chunks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:74"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">end</name></decl>, <decl pos:start="9:18" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:18" pos:end="9:27">sector_num</name></decl>, <decl pos:start="9:30" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:30" pos:end="9:39">next_chunk</name></decl>, <decl pos:start="9:42" pos:end="9:52"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:42" pos:end="9:52">next_sector</name></decl>, <decl pos:start="9:55" pos:end="9:73"><type ref="prev" pos:start="9:5" pos:end="9:11"/><name pos:start="9:55" pos:end="9:73">hbitmap_next_sector</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">delay_ns</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">MirrorOp</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">op</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:47"><expr pos:start="17:5" pos:end="17:46"><name pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:17">sector_num</name></name> <operator pos:start="17:19" pos:end="17:19">=</operator> <call pos:start="17:21" pos:end="17:46"><name pos:start="17:21" pos:end="17:37">hbitmap_iter_next</name><argument_list pos:start="17:38" pos:end="17:46">(<argument pos:start="17:39" pos:end="17:45"><expr pos:start="17:39" pos:end="17:45"><operator pos:start="17:39" pos:end="17:39">&amp;</operator><name pos:start="17:40" pos:end="17:45"><name pos:start="17:40" pos:end="17:40">s</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:45">hbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="19:26">(<expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:21">sector_num</name></name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <literal type="number" pos:start="19:25" pos:end="19:25">0</literal></expr>)</condition> <block pos:start="19:28" pos:end="31:5">{<block_content pos:start="21:9" pos:end="29:35">

        <expr_stmt pos:start="21:9" pos:end="21:63"><expr pos:start="21:9" pos:end="21:62"><call pos:start="21:9" pos:end="21:62"><name pos:start="21:9" pos:end="21:28">bdrv_dirty_iter_init</name><argument_list pos:start="21:29" pos:end="21:62">(<argument pos:start="21:30" pos:end="21:35"><expr pos:start="21:30" pos:end="21:35"><name pos:start="21:30" pos:end="21:35">source</name></expr></argument>, <argument pos:start="21:38" pos:end="21:52"><expr pos:start="21:38" pos:end="21:52"><name pos:start="21:38" pos:end="21:52"><name pos:start="21:38" pos:end="21:38">s</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:52">dirty_bitmap</name></name></expr></argument>, <argument pos:start="21:55" pos:end="21:61"><expr pos:start="21:55" pos:end="21:61"><operator pos:start="21:55" pos:end="21:55">&amp;</operator><name pos:start="21:56" pos:end="21:61"><name pos:start="21:56" pos:end="21:56">s</name><operator pos:start="21:57" pos:end="21:58">-&gt;</operator><name pos:start="21:59" pos:end="21:61">hbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:21">sector_num</name></name> <operator pos:start="23:23" pos:end="23:23">=</operator> <call pos:start="23:25" pos:end="23:50"><name pos:start="23:25" pos:end="23:41">hbitmap_iter_next</name><argument_list pos:start="23:42" pos:end="23:50">(<argument pos:start="23:43" pos:end="23:49"><expr pos:start="23:43" pos:end="23:49"><operator pos:start="23:43" pos:end="23:43">&amp;</operator><name pos:start="23:44" pos:end="23:49"><name pos:start="23:44" pos:end="23:44">s</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:49">hbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:81"><expr pos:start="25:9" pos:end="27:80"><call pos:start="25:9" pos:end="27:80"><name pos:start="25:9" pos:end="25:33">trace_mirror_restart_iter</name><argument_list pos:start="25:34" pos:end="27:80">(<argument pos:start="25:35" pos:end="25:35"><expr pos:start="25:35" pos:end="25:35"><name pos:start="25:35" pos:end="25:35">s</name></expr></argument>,

                                  <argument pos:start="27:35" pos:end="27:79"><expr pos:start="27:35" pos:end="27:79"><call pos:start="27:35" pos:end="27:79"><name pos:start="27:35" pos:end="27:54">bdrv_get_dirty_count</name><argument_list pos:start="27:55" pos:end="27:79">(<argument pos:start="27:56" pos:end="27:61"><expr pos:start="27:56" pos:end="27:61"><name pos:start="27:56" pos:end="27:61">source</name></expr></argument>, <argument pos:start="27:64" pos:end="27:78"><expr pos:start="27:64" pos:end="27:78"><name pos:start="27:64" pos:end="27:78"><name pos:start="27:64" pos:end="27:64">s</name><operator pos:start="27:65" pos:end="27:66">-&gt;</operator><name pos:start="27:67" pos:end="27:78">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><call pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:14">assert</name><argument_list pos:start="29:15" pos:end="29:34">(<argument pos:start="29:16" pos:end="29:33"><expr pos:start="29:16" pos:end="29:33"><name pos:start="29:16" pos:end="29:28"><name pos:start="29:16" pos:end="29:16">s</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:28">sector_num</name></name> <operator pos:start="29:30" pos:end="29:31">&gt;=</operator> <literal type="number" pos:start="29:33" pos:end="29:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:23">hbitmap_next_sector</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <name pos:start="35:27" pos:end="35:39"><name pos:start="35:27" pos:end="35:27">s</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:39">sector_num</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:14">sector_num</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:30"><name pos:start="37:18" pos:end="37:18">s</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:30">sector_num</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:59"><expr pos:start="39:5" pos:end="39:58"><name pos:start="39:5" pos:end="39:21">sectors_per_chunk</name> <operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:38"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:38">granularity</name></name> <operator pos:start="39:40" pos:end="39:41">&gt;&gt;</operator> <name pos:start="39:43" pos:end="39:58">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:7">end</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <name pos:start="41:11" pos:end="41:24"><name pos:start="41:11" pos:end="41:11">s</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:24">bdev_length</name></name> <operator pos:start="41:26" pos:end="41:26">/</operator> <name pos:start="41:28" pos:end="41:43">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="69:7">/* Extend the QEMUIOVector to include all adjacent blocks that will

     * be copied in this operation.

     *

     * We have to do this if we have no backing file yet in the destination,

     * and the cluster size is very large.  Then we need to do COW ourselves.

     * The first time a cluster is copied, copy it entirely.  Note that,

     * because both the granularity and the cluster size are powers of two,

     * the number of sectors to copy cannot exceed one cluster.

     *

     * We also want to extend the QEMUIOVector to include more adjacent

     * dirty blocks if possible, to limit the number of I/O operations and

     * run efficiently even with a small granularity.

     */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:18"><expr pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:13">nb_chunks</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <literal type="number" pos:start="71:17" pos:end="71:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:19"><expr pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:14">nb_sectors</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:15">next_sector</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:28">sector_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:48"><expr pos:start="77:5" pos:end="77:47"><name pos:start="77:5" pos:end="77:14">next_chunk</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:27">sector_num</name> <operator pos:start="77:29" pos:end="77:29">/</operator> <name pos:start="77:31" pos:end="77:47">sectors_per_chunk</name></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:79">/* Wait for I/O to this cluster (from a previous iteration) to be done.  */</comment>

    <while pos:start="83:5" pos:end="89:5">while <condition pos:start="83:11" pos:end="83:53">(<expr pos:start="83:12" pos:end="83:52"><call pos:start="83:12" pos:end="83:52"><name pos:start="83:12" pos:end="83:19">test_bit</name><argument_list pos:start="83:20" pos:end="83:52">(<argument pos:start="83:21" pos:end="83:30"><expr pos:start="83:21" pos:end="83:30"><name pos:start="83:21" pos:end="83:30">next_chunk</name></expr></argument>, <argument pos:start="83:33" pos:end="83:51"><expr pos:start="83:33" pos:end="83:51"><name pos:start="83:33" pos:end="83:51"><name pos:start="83:33" pos:end="83:33">s</name><operator pos:start="83:34" pos:end="83:35">-&gt;</operator><name pos:start="83:36" pos:end="83:51">in_flight_bitmap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:55" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:31">

        <expr_stmt pos:start="85:9" pos:end="85:66"><expr pos:start="85:9" pos:end="85:65"><call pos:start="85:9" pos:end="85:65"><name pos:start="85:9" pos:end="85:36">trace_mirror_yield_in_flight</name><argument_list pos:start="85:37" pos:end="85:65">(<argument pos:start="85:38" pos:end="85:38"><expr pos:start="85:38" pos:end="85:38"><name pos:start="85:38" pos:end="85:38">s</name></expr></argument>, <argument pos:start="85:41" pos:end="85:50"><expr pos:start="85:41" pos:end="85:50"><name pos:start="85:41" pos:end="85:50">sector_num</name></expr></argument>, <argument pos:start="85:53" pos:end="85:64"><expr pos:start="85:53" pos:end="85:64"><name pos:start="85:53" pos:end="85:64"><name pos:start="85:53" pos:end="85:53">s</name><operator pos:start="85:54" pos:end="85:55">-&gt;</operator><name pos:start="85:56" pos:end="85:64">in_flight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:31"><expr pos:start="87:9" pos:end="87:30"><call pos:start="87:9" pos:end="87:30"><name pos:start="87:9" pos:end="87:28">qemu_coroutine_yield</name><argument_list pos:start="87:29" pos:end="87:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <do pos:start="93:5" pos:end="193:49">do <block pos:start="93:8" pos:end="193:5">{<block_content pos:start="95:9" pos:end="191:9">

        <decl_stmt pos:start="95:9" pos:end="95:40"><decl pos:start="95:9" pos:end="95:25"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:25">added_sectors</name></decl>, <decl pos:start="95:28" pos:end="95:39"><type ref="prev" pos:start="95:9" pos:end="95:11"/><name pos:start="95:28" pos:end="95:39">added_chunks</name></decl>;</decl_stmt>



        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="101:54">(<expr pos:start="99:13" pos:end="101:53"><operator pos:start="99:13" pos:end="99:13">!</operator><call pos:start="99:14" pos:end="99:65"><name pos:start="99:14" pos:end="99:27">bdrv_get_dirty</name><argument_list pos:start="99:28" pos:end="99:65">(<argument pos:start="99:29" pos:end="99:34"><expr pos:start="99:29" pos:end="99:34"><name pos:start="99:29" pos:end="99:34">source</name></expr></argument>, <argument pos:start="99:37" pos:end="99:51"><expr pos:start="99:37" pos:end="99:51"><name pos:start="99:37" pos:end="99:51"><name pos:start="99:37" pos:end="99:37">s</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:51">dirty_bitmap</name></name></expr></argument>, <argument pos:start="99:54" pos:end="99:64"><expr pos:start="99:54" pos:end="99:64"><name pos:start="99:54" pos:end="99:64">next_sector</name></expr></argument>)</argument_list></call> <operator pos:start="99:67" pos:end="99:68">||</operator>

            <call pos:start="101:13" pos:end="101:53"><name pos:start="101:13" pos:end="101:20">test_bit</name><argument_list pos:start="101:21" pos:end="101:53">(<argument pos:start="101:22" pos:end="101:31"><expr pos:start="101:22" pos:end="101:31"><name pos:start="101:22" pos:end="101:31">next_chunk</name></expr></argument>, <argument pos:start="101:34" pos:end="101:52"><expr pos:start="101:34" pos:end="101:52"><name pos:start="101:34" pos:end="101:52"><name pos:start="101:34" pos:end="101:34">s</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:52">in_flight_bitmap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:56" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:18">

            <expr_stmt pos:start="103:13" pos:end="103:35"><expr pos:start="103:13" pos:end="103:34"><call pos:start="103:13" pos:end="103:34"><name pos:start="103:13" pos:end="103:18">assert</name><argument_list pos:start="103:19" pos:end="103:34">(<argument pos:start="103:20" pos:end="103:33"><expr pos:start="103:20" pos:end="103:33"><name pos:start="103:20" pos:end="103:29">nb_sectors</name> <operator pos:start="103:31" pos:end="103:31">&gt;</operator> <literal type="number" pos:start="103:33" pos:end="103:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:42"><expr pos:start="111:9" pos:end="111:41"><name pos:start="111:9" pos:end="111:21">added_sectors</name> <operator pos:start="111:23" pos:end="111:23">=</operator> <name pos:start="111:25" pos:end="111:41">sectors_per_chunk</name></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="139:9"><if pos:start="113:9" pos:end="139:9">if <condition pos:start="113:12" pos:end="113:66">(<expr pos:start="113:13" pos:end="113:65"><name pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:25">cow_bitmap</name></name> <operator pos:start="113:27" pos:end="113:28">&amp;&amp;</operator> <operator pos:start="113:30" pos:end="113:30">!</operator><call pos:start="113:31" pos:end="113:65"><name pos:start="113:31" pos:end="113:38">test_bit</name><argument_list pos:start="113:39" pos:end="113:65">(<argument pos:start="113:40" pos:end="113:49"><expr pos:start="113:40" pos:end="113:49"><name pos:start="113:40" pos:end="113:49">next_chunk</name></expr></argument>, <argument pos:start="113:52" pos:end="113:64"><expr pos:start="113:52" pos:end="113:64"><name pos:start="113:52" pos:end="113:64"><name pos:start="113:52" pos:end="113:52">s</name><operator pos:start="113:53" pos:end="113:54">-&gt;</operator><name pos:start="113:55" pos:end="113:64">cow_bitmap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:68" pos:end="139:9">{<block_content pos:start="115:13" pos:end="137:13">

            <expr_stmt pos:start="115:13" pos:end="119:65"><expr pos:start="115:13" pos:end="119:64"><call pos:start="115:13" pos:end="119:64"><name pos:start="115:13" pos:end="115:34">bdrv_round_to_clusters</name><argument_list pos:start="115:35" pos:end="119:64">(<argument pos:start="115:36" pos:end="115:44"><expr pos:start="115:36" pos:end="115:44"><name pos:start="115:36" pos:end="115:44"><name pos:start="115:36" pos:end="115:36">s</name><operator pos:start="115:37" pos:end="115:38">-&gt;</operator><name pos:start="115:39" pos:end="115:44">target</name></name></expr></argument>,

                                   <argument pos:start="117:36" pos:end="117:46"><expr pos:start="117:36" pos:end="117:46"><name pos:start="117:36" pos:end="117:46">next_sector</name></expr></argument>, <argument pos:start="117:49" pos:end="117:61"><expr pos:start="117:49" pos:end="117:61"><name pos:start="117:49" pos:end="117:61">added_sectors</name></expr></argument>,

                                   <argument pos:start="119:36" pos:end="119:47"><expr pos:start="119:36" pos:end="119:47"><operator pos:start="119:36" pos:end="119:36">&amp;</operator><name pos:start="119:37" pos:end="119:47">next_sector</name></expr></argument>, <argument pos:start="119:50" pos:end="119:63"><expr pos:start="119:50" pos:end="119:63"><operator pos:start="119:50" pos:end="119:50">&amp;</operator><name pos:start="119:51" pos:end="119:63">added_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="123:13" pos:end="127:15">/* On the first iteration, the rounding may make us copy

             * sectors before the first dirty one.

             */</comment>

            <if_stmt pos:start="129:13" pos:end="137:13"><if pos:start="129:13" pos:end="137:13">if <condition pos:start="129:16" pos:end="129:41">(<expr pos:start="129:17" pos:end="129:40"><name pos:start="129:17" pos:end="129:27">next_sector</name> <operator pos:start="129:29" pos:end="129:29">&lt;</operator> <name pos:start="129:31" pos:end="129:40">sector_num</name></expr>)</condition> <block pos:start="129:43" pos:end="137:13">{<block_content pos:start="131:17" pos:end="135:61">

                <expr_stmt pos:start="131:17" pos:end="131:40"><expr pos:start="131:17" pos:end="131:39"><call pos:start="131:17" pos:end="131:39"><name pos:start="131:17" pos:end="131:22">assert</name><argument_list pos:start="131:23" pos:end="131:39">(<argument pos:start="131:24" pos:end="131:38"><expr pos:start="131:24" pos:end="131:38"><name pos:start="131:24" pos:end="131:33">nb_sectors</name> <operator pos:start="131:35" pos:end="131:36">==</operator> <literal type="number" pos:start="131:38" pos:end="131:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:41"><expr pos:start="133:17" pos:end="133:40"><name pos:start="133:17" pos:end="133:26">sector_num</name> <operator pos:start="133:28" pos:end="133:28">=</operator> <name pos:start="133:30" pos:end="133:40">next_sector</name></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:61"><expr pos:start="135:17" pos:end="135:60"><name pos:start="135:17" pos:end="135:26">next_chunk</name> <operator pos:start="135:28" pos:end="135:28">=</operator> <name pos:start="135:30" pos:end="135:40">next_sector</name> <operator pos:start="135:42" pos:end="135:42">/</operator> <name pos:start="135:44" pos:end="135:60">sectors_per_chunk</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:76"><expr pos:start="143:9" pos:end="143:75"><name pos:start="143:9" pos:end="143:21">added_sectors</name> <operator pos:start="143:23" pos:end="143:23">=</operator> <call pos:start="143:25" pos:end="143:75"><name pos:start="143:25" pos:end="143:27">MIN</name><argument_list pos:start="143:28" pos:end="143:75">(<argument pos:start="143:29" pos:end="143:41"><expr pos:start="143:29" pos:end="143:41"><name pos:start="143:29" pos:end="143:41">added_sectors</name></expr></argument>, <argument pos:start="143:44" pos:end="143:74"><expr pos:start="143:44" pos:end="143:74"><name pos:start="143:44" pos:end="143:46">end</name> <operator pos:start="143:48" pos:end="143:48">-</operator> <operator pos:start="143:50" pos:end="143:50">(</operator><name pos:start="143:51" pos:end="143:60">sector_num</name> <operator pos:start="143:62" pos:end="143:62">+</operator> <name pos:start="143:64" pos:end="143:73">nb_sectors</name><operator pos:start="143:74" pos:end="143:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:83"><expr pos:start="145:9" pos:end="145:82"><name pos:start="145:9" pos:end="145:20">added_chunks</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <operator pos:start="145:24" pos:end="145:24">(</operator><name pos:start="145:25" pos:end="145:37">added_sectors</name> <operator pos:start="145:39" pos:end="145:39">+</operator> <name pos:start="145:41" pos:end="145:57">sectors_per_chunk</name> <operator pos:start="145:59" pos:end="145:59">-</operator> <literal type="number" pos:start="145:61" pos:end="145:61">1</literal><operator pos:start="145:62" pos:end="145:62">)</operator> <operator pos:start="145:64" pos:end="145:64">/</operator> <name pos:start="145:66" pos:end="145:82">sectors_per_chunk</name></expr>;</expr_stmt>



        <comment type="block" pos:start="149:9" pos:end="153:11">/* When doing COW, it may happen that there is not enough space for

         * a full cluster.  Wait if that is the case.

         */</comment>

        <while pos:start="155:9" pos:end="161:9">while <condition pos:start="155:15" pos:end="155:66">(<expr pos:start="155:16" pos:end="155:65"><name pos:start="155:16" pos:end="155:24">nb_chunks</name> <operator pos:start="155:26" pos:end="155:27">==</operator> <literal type="number" pos:start="155:29" pos:end="155:29">0</literal> <operator pos:start="155:31" pos:end="155:32">&amp;&amp;</operator> <name pos:start="155:34" pos:end="155:50"><name pos:start="155:34" pos:end="155:34">s</name><operator pos:start="155:35" pos:end="155:36">-&gt;</operator><name pos:start="155:37" pos:end="155:50">buf_free_count</name></name> <operator pos:start="155:52" pos:end="155:52">&lt;</operator> <name pos:start="155:54" pos:end="155:65">added_chunks</name></expr>)</condition> <block pos:start="155:68" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:35">

            <expr_stmt pos:start="157:13" pos:end="157:68"><expr pos:start="157:13" pos:end="157:67"><call pos:start="157:13" pos:end="157:67"><name pos:start="157:13" pos:end="157:39">trace_mirror_yield_buf_busy</name><argument_list pos:start="157:40" pos:end="157:67">(<argument pos:start="157:41" pos:end="157:41"><expr pos:start="157:41" pos:end="157:41"><name pos:start="157:41" pos:end="157:41">s</name></expr></argument>, <argument pos:start="157:44" pos:end="157:52"><expr pos:start="157:44" pos:end="157:52"><name pos:start="157:44" pos:end="157:52">nb_chunks</name></expr></argument>, <argument pos:start="157:55" pos:end="157:66"><expr pos:start="157:55" pos:end="157:66"><name pos:start="157:55" pos:end="157:66"><name pos:start="157:55" pos:end="157:55">s</name><operator pos:start="157:56" pos:end="157:57">-&gt;</operator><name pos:start="157:58" pos:end="157:66">in_flight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:35"><expr pos:start="159:13" pos:end="159:34"><call pos:start="159:13" pos:end="159:34"><name pos:start="159:13" pos:end="159:32">qemu_coroutine_yield</name><argument_list pos:start="159:33" pos:end="159:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:57">(<expr pos:start="163:13" pos:end="163:56"><name pos:start="163:13" pos:end="163:29"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:29">buf_free_count</name></name> <operator pos:start="163:31" pos:end="163:31">&lt;</operator> <name pos:start="163:33" pos:end="163:41">nb_chunks</name> <operator pos:start="163:43" pos:end="163:43">+</operator> <name pos:start="163:45" pos:end="163:56">added_chunks</name></expr>)</condition> <block pos:start="163:59" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:18">

            <expr_stmt pos:start="165:13" pos:end="165:68"><expr pos:start="165:13" pos:end="165:67"><call pos:start="165:13" pos:end="165:67"><name pos:start="165:13" pos:end="165:39">trace_mirror_break_buf_busy</name><argument_list pos:start="165:40" pos:end="165:67">(<argument pos:start="165:41" pos:end="165:41"><expr pos:start="165:41" pos:end="165:41"><name pos:start="165:41" pos:end="165:41">s</name></expr></argument>, <argument pos:start="165:44" pos:end="165:52"><expr pos:start="165:44" pos:end="165:52"><name pos:start="165:44" pos:end="165:52">nb_chunks</name></expr></argument>, <argument pos:start="165:55" pos:end="165:66"><expr pos:start="165:55" pos:end="165:66"><name pos:start="165:55" pos:end="165:66"><name pos:start="165:55" pos:end="165:55">s</name><operator pos:start="165:56" pos:end="165:57">-&gt;</operator><name pos:start="165:58" pos:end="165:66">in_flight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="173:9" pos:end="173:63">/* We have enough free space to copy these sectors.  */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:66"><expr pos:start="175:9" pos:end="175:65"><call pos:start="175:9" pos:end="175:65"><name pos:start="175:9" pos:end="175:18">bitmap_set</name><argument_list pos:start="175:19" pos:end="175:65">(<argument pos:start="175:20" pos:end="175:38"><expr pos:start="175:20" pos:end="175:38"><name pos:start="175:20" pos:end="175:38"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:38">in_flight_bitmap</name></name></expr></argument>, <argument pos:start="175:41" pos:end="175:50"><expr pos:start="175:41" pos:end="175:50"><name pos:start="175:41" pos:end="175:50">next_chunk</name></expr></argument>, <argument pos:start="175:53" pos:end="175:64"><expr pos:start="175:53" pos:end="175:64"><name pos:start="175:53" pos:end="175:64">added_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:36"><expr pos:start="179:9" pos:end="179:35"><name pos:start="179:9" pos:end="179:18">nb_sectors</name> <operator pos:start="179:20" pos:end="179:21">+=</operator> <name pos:start="179:23" pos:end="179:35">added_sectors</name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:34"><expr pos:start="181:9" pos:end="181:33"><name pos:start="181:9" pos:end="181:17">nb_chunks</name> <operator pos:start="181:19" pos:end="181:20">+=</operator> <name pos:start="181:22" pos:end="181:33">added_chunks</name></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:37"><expr pos:start="183:9" pos:end="183:36"><name pos:start="183:9" pos:end="183:19">next_sector</name> <operator pos:start="183:21" pos:end="183:22">+=</operator> <name pos:start="183:24" pos:end="183:36">added_sectors</name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:35"><expr pos:start="185:9" pos:end="185:34"><name pos:start="185:9" pos:end="185:18">next_chunk</name> <operator pos:start="185:20" pos:end="185:21">+=</operator> <name pos:start="185:23" pos:end="185:34">added_chunks</name></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:42">(<expr pos:start="187:13" pos:end="187:41"><operator pos:start="187:13" pos:end="187:13">!</operator><name pos:start="187:14" pos:end="187:22"><name pos:start="187:14" pos:end="187:14">s</name><operator pos:start="187:15" pos:end="187:16">-&gt;</operator><name pos:start="187:17" pos:end="187:22">synced</name></name> <operator pos:start="187:24" pos:end="187:25">&amp;&amp;</operator> <name pos:start="187:27" pos:end="187:41"><name pos:start="187:27" pos:end="187:27">s</name><operator pos:start="187:28" pos:end="187:29">-&gt;</operator><name pos:start="187:30" pos:end="187:35">common</name><operator pos:start="187:36" pos:end="187:36">.</operator><name pos:start="187:37" pos:end="187:41">speed</name></name></expr>)</condition> <block pos:start="187:44" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:75">

            <expr_stmt pos:start="189:13" pos:end="189:75"><expr pos:start="189:13" pos:end="189:74"><name pos:start="189:13" pos:end="189:20">delay_ns</name> <operator pos:start="189:22" pos:end="189:22">=</operator> <call pos:start="189:24" pos:end="189:74"><name pos:start="189:24" pos:end="189:48">ratelimit_calculate_delay</name><argument_list pos:start="189:49" pos:end="189:74">(<argument pos:start="189:50" pos:end="189:58"><expr pos:start="189:50" pos:end="189:58"><operator pos:start="189:50" pos:end="189:50">&amp;</operator><name pos:start="189:51" pos:end="189:58"><name pos:start="189:51" pos:end="189:51">s</name><operator pos:start="189:52" pos:end="189:53">-&gt;</operator><name pos:start="189:54" pos:end="189:58">limit</name></name></expr></argument>, <argument pos:start="189:61" pos:end="189:73"><expr pos:start="189:61" pos:end="189:73"><name pos:start="189:61" pos:end="189:73">added_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="193:13" pos:end="193:48">(<expr pos:start="193:14" pos:end="193:47"><name pos:start="193:14" pos:end="193:21">delay_ns</name> <operator pos:start="193:23" pos:end="193:24">==</operator> <literal type="number" pos:start="193:26" pos:end="193:26">0</literal> <operator pos:start="193:28" pos:end="193:29">&amp;&amp;</operator> <name pos:start="193:31" pos:end="193:41">next_sector</name> <operator pos:start="193:43" pos:end="193:43">&lt;</operator> <name pos:start="193:45" pos:end="193:47">end</name></expr>)</condition>;</do>



    <comment type="block" pos:start="197:5" pos:end="197:63">/* Allocate a MirrorOp that is used as an AIO callback.  */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:31"><expr pos:start="199:5" pos:end="199:30"><name pos:start="199:5" pos:end="199:6">op</name> <operator pos:start="199:8" pos:end="199:8">=</operator> <call pos:start="199:10" pos:end="199:30"><name pos:start="199:10" pos:end="199:20">g_slice_new</name><argument_list pos:start="199:21" pos:end="199:30">(<argument pos:start="199:22" pos:end="199:29"><expr pos:start="199:22" pos:end="199:29"><name pos:start="199:22" pos:end="199:29">MirrorOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:14"><expr pos:start="201:5" pos:end="201:13"><name pos:start="201:5" pos:end="201:9"><name pos:start="201:5" pos:end="201:6">op</name><operator pos:start="201:7" pos:end="201:8">-&gt;</operator><name pos:start="201:9" pos:end="201:9">s</name></name> <operator pos:start="201:11" pos:end="201:11">=</operator> <name pos:start="201:13" pos:end="201:13">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:32"><expr pos:start="203:5" pos:end="203:31"><name pos:start="203:5" pos:end="203:18"><name pos:start="203:5" pos:end="203:6">op</name><operator pos:start="203:7" pos:end="203:8">-&gt;</operator><name pos:start="203:9" pos:end="203:18">sector_num</name></name> <operator pos:start="203:20" pos:end="203:20">=</operator> <name pos:start="203:22" pos:end="203:31">sector_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:32"><expr pos:start="205:5" pos:end="205:31"><name pos:start="205:5" pos:end="205:18"><name pos:start="205:5" pos:end="205:6">op</name><operator pos:start="205:7" pos:end="205:8">-&gt;</operator><name pos:start="205:9" pos:end="205:18">nb_sectors</name></name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:31">nb_sectors</name></expr>;</expr_stmt>



    <comment type="block" pos:start="209:5" pos:end="213:7">/* Now make a QEMUIOVector taking enough granularity-sized chunks

     * from s-&gt;buf_free.

     */</comment>

    <expr_stmt pos:start="215:5" pos:end="215:42"><expr pos:start="215:5" pos:end="215:41"><call pos:start="215:5" pos:end="215:41"><name pos:start="215:5" pos:end="215:19">qemu_iovec_init</name><argument_list pos:start="215:20" pos:end="215:41">(<argument pos:start="215:21" pos:end="215:29"><expr pos:start="215:21" pos:end="215:29"><operator pos:start="215:21" pos:end="215:21">&amp;</operator><name pos:start="215:22" pos:end="215:29"><name pos:start="215:22" pos:end="215:23">op</name><operator pos:start="215:24" pos:end="215:25">-&gt;</operator><name pos:start="215:26" pos:end="215:29">qiov</name></name></expr></argument>, <argument pos:start="215:32" pos:end="215:40"><expr pos:start="215:32" pos:end="215:40"><name pos:start="215:32" pos:end="215:40">nb_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:29"><expr pos:start="217:5" pos:end="217:28"><name pos:start="217:5" pos:end="217:15">next_sector</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <name pos:start="217:19" pos:end="217:28">sector_num</name></expr>;</expr_stmt>

    <while pos:start="219:5" pos:end="253:5">while <condition pos:start="219:11" pos:end="219:27">(<expr pos:start="219:12" pos:end="219:26"><name pos:start="219:12" pos:end="219:20">nb_chunks</name><operator pos:start="219:21" pos:end="219:22">--</operator> <operator pos:start="219:24" pos:end="219:24">&gt;</operator> <literal type="number" pos:start="219:26" pos:end="219:26">0</literal></expr>)</condition> <block pos:start="219:29" pos:end="253:5">{<block_content pos:start="221:9" pos:end="251:41">

        <decl_stmt pos:start="221:9" pos:end="221:57"><decl pos:start="221:9" pos:end="221:56"><type pos:start="221:9" pos:end="221:22"><name pos:start="221:9" pos:end="221:20">MirrorBuffer</name> <modifier pos:start="221:22" pos:end="221:22">*</modifier></type><name pos:start="221:23" pos:end="221:25">buf</name> <init pos:start="221:27" pos:end="221:56">= <expr pos:start="221:29" pos:end="221:56"><call pos:start="221:29" pos:end="221:56"><name pos:start="221:29" pos:end="221:42">QSIMPLEQ_FIRST</name><argument_list pos:start="221:43" pos:end="221:56">(<argument pos:start="221:44" pos:end="221:55"><expr pos:start="221:44" pos:end="221:55"><operator pos:start="221:44" pos:end="221:44">&amp;</operator><name pos:start="221:45" pos:end="221:55"><name pos:start="221:45" pos:end="221:45">s</name><operator pos:start="221:46" pos:end="221:47">-&gt;</operator><name pos:start="221:48" pos:end="221:55">buf_free</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="223:9" pos:end="223:75"><decl pos:start="223:9" pos:end="223:74"><type pos:start="223:9" pos:end="223:14"><name pos:start="223:9" pos:end="223:14">size_t</name></type> <name pos:start="223:16" pos:end="223:24">remaining</name> <init pos:start="223:26" pos:end="223:74">= <expr pos:start="223:28" pos:end="223:74"><operator pos:start="223:28" pos:end="223:28">(</operator><name pos:start="223:29" pos:end="223:38">nb_sectors</name> <operator pos:start="223:40" pos:end="223:40">*</operator> <name pos:start="223:42" pos:end="223:57">BDRV_SECTOR_SIZE</name><operator pos:start="223:58" pos:end="223:58">)</operator> <operator pos:start="223:60" pos:end="223:60">-</operator> <name pos:start="223:62" pos:end="223:74"><name pos:start="223:62" pos:end="223:63">op</name><operator pos:start="223:64" pos:end="223:65">-&gt;</operator><name pos:start="223:66" pos:end="223:69">qiov</name><operator pos:start="223:70" pos:end="223:70">.</operator><name pos:start="223:71" pos:end="223:74">size</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="227:9" pos:end="227:49"><expr pos:start="227:9" pos:end="227:48"><call pos:start="227:9" pos:end="227:48"><name pos:start="227:9" pos:end="227:28">QSIMPLEQ_REMOVE_HEAD</name><argument_list pos:start="227:29" pos:end="227:48">(<argument pos:start="227:30" pos:end="227:41"><expr pos:start="227:30" pos:end="227:41"><operator pos:start="227:30" pos:end="227:30">&amp;</operator><name pos:start="227:31" pos:end="227:41"><name pos:start="227:31" pos:end="227:31">s</name><operator pos:start="227:32" pos:end="227:33">-&gt;</operator><name pos:start="227:34" pos:end="227:41">buf_free</name></name></expr></argument>, <argument pos:start="227:44" pos:end="227:47"><expr pos:start="227:44" pos:end="227:47"><name pos:start="227:44" pos:end="227:47">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:28"><expr pos:start="229:9" pos:end="229:27"><name pos:start="229:9" pos:end="229:25"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:25">buf_free_count</name></name><operator pos:start="229:26" pos:end="229:27">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:71"><expr pos:start="231:9" pos:end="231:70"><call pos:start="231:9" pos:end="231:70"><name pos:start="231:9" pos:end="231:22">qemu_iovec_add</name><argument_list pos:start="231:23" pos:end="231:70">(<argument pos:start="231:24" pos:end="231:32"><expr pos:start="231:24" pos:end="231:32"><operator pos:start="231:24" pos:end="231:24">&amp;</operator><name pos:start="231:25" pos:end="231:32"><name pos:start="231:25" pos:end="231:26">op</name><operator pos:start="231:27" pos:end="231:28">-&gt;</operator><name pos:start="231:29" pos:end="231:32">qiov</name></name></expr></argument>, <argument pos:start="231:35" pos:end="231:37"><expr pos:start="231:35" pos:end="231:37"><name pos:start="231:35" pos:end="231:37">buf</name></expr></argument>, <argument pos:start="231:40" pos:end="231:69"><expr pos:start="231:40" pos:end="231:69"><call pos:start="231:40" pos:end="231:69"><name pos:start="231:40" pos:end="231:42">MIN</name><argument_list pos:start="231:43" pos:end="231:69">(<argument pos:start="231:44" pos:end="231:57"><expr pos:start="231:44" pos:end="231:57"><name pos:start="231:44" pos:end="231:57"><name pos:start="231:44" pos:end="231:44">s</name><operator pos:start="231:45" pos:end="231:46">-&gt;</operator><name pos:start="231:47" pos:end="231:57">granularity</name></name></expr></argument>, <argument pos:start="231:60" pos:end="231:68"><expr pos:start="231:60" pos:end="231:68"><name pos:start="231:60" pos:end="231:68">remaining</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="235:9" pos:end="239:11">/* Advance the HBitmapIter in parallel, so that we do not examine

         * the same sector twice.

         */</comment>

        <if_stmt pos:start="241:9" pos:end="247:9"><if pos:start="241:9" pos:end="247:9">if <condition pos:start="241:12" pos:end="243:68">(<expr pos:start="241:13" pos:end="243:67"><name pos:start="241:13" pos:end="241:23">next_sector</name> <operator pos:start="241:25" pos:end="241:25">&gt;</operator> <name pos:start="241:27" pos:end="241:45">hbitmap_next_sector</name>

            <operator pos:start="243:13" pos:end="243:14">&amp;&amp;</operator> <call pos:start="243:16" pos:end="243:67"><name pos:start="243:16" pos:end="243:29">bdrv_get_dirty</name><argument_list pos:start="243:30" pos:end="243:67">(<argument pos:start="243:31" pos:end="243:36"><expr pos:start="243:31" pos:end="243:36"><name pos:start="243:31" pos:end="243:36">source</name></expr></argument>, <argument pos:start="243:39" pos:end="243:53"><expr pos:start="243:39" pos:end="243:53"><name pos:start="243:39" pos:end="243:53"><name pos:start="243:39" pos:end="243:39">s</name><operator pos:start="243:40" pos:end="243:41">-&gt;</operator><name pos:start="243:42" pos:end="243:53">dirty_bitmap</name></name></expr></argument>, <argument pos:start="243:56" pos:end="243:66"><expr pos:start="243:56" pos:end="243:66"><name pos:start="243:56" pos:end="243:66">next_sector</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="243:70" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:61">

            <expr_stmt pos:start="245:13" pos:end="245:61"><expr pos:start="245:13" pos:end="245:60"><name pos:start="245:13" pos:end="245:31">hbitmap_next_sector</name> <operator pos:start="245:33" pos:end="245:33">=</operator> <call pos:start="245:35" pos:end="245:60"><name pos:start="245:35" pos:end="245:51">hbitmap_iter_next</name><argument_list pos:start="245:52" pos:end="245:60">(<argument pos:start="245:53" pos:end="245:59"><expr pos:start="245:53" pos:end="245:59"><operator pos:start="245:53" pos:end="245:53">&amp;</operator><name pos:start="245:54" pos:end="245:59"><name pos:start="245:54" pos:end="245:54">s</name><operator pos:start="245:55" pos:end="245:56">-&gt;</operator><name pos:start="245:57" pos:end="245:59">hbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="251:9" pos:end="251:41"><expr pos:start="251:9" pos:end="251:40"><name pos:start="251:9" pos:end="251:19">next_sector</name> <operator pos:start="251:21" pos:end="251:22">+=</operator> <name pos:start="251:24" pos:end="251:40">sectors_per_chunk</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="257:5" pos:end="257:53"><expr pos:start="257:5" pos:end="257:52"><call pos:start="257:5" pos:end="257:52"><name pos:start="257:5" pos:end="257:20">bdrv_reset_dirty</name><argument_list pos:start="257:21" pos:end="257:52">(<argument pos:start="257:22" pos:end="257:27"><expr pos:start="257:22" pos:end="257:27"><name pos:start="257:22" pos:end="257:27">source</name></expr></argument>, <argument pos:start="257:30" pos:end="257:39"><expr pos:start="257:30" pos:end="257:39"><name pos:start="257:30" pos:end="257:39">sector_num</name></expr></argument>, <argument pos:start="257:42" pos:end="257:51"><expr pos:start="257:42" pos:end="257:51"><name pos:start="257:42" pos:end="257:51">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:34">/* Copy the dirty cluster.  */</comment>

    <expr_stmt pos:start="263:5" pos:end="263:19"><expr pos:start="263:5" pos:end="263:18"><name pos:start="263:5" pos:end="263:16"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:16">in_flight</name></name><operator pos:start="263:17" pos:end="263:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:39"><expr pos:start="265:5" pos:end="265:38"><name pos:start="265:5" pos:end="265:24"><name pos:start="265:5" pos:end="265:5">s</name><operator pos:start="265:6" pos:end="265:7">-&gt;</operator><name pos:start="265:8" pos:end="265:24">sectors_in_flight</name></name> <operator pos:start="265:26" pos:end="265:27">+=</operator> <name pos:start="265:29" pos:end="265:38">nb_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:58"><expr pos:start="267:5" pos:end="267:57"><call pos:start="267:5" pos:end="267:57"><name pos:start="267:5" pos:end="267:30">trace_mirror_one_iteration</name><argument_list pos:start="267:31" pos:end="267:57">(<argument pos:start="267:32" pos:end="267:32"><expr pos:start="267:32" pos:end="267:32"><name pos:start="267:32" pos:end="267:32">s</name></expr></argument>, <argument pos:start="267:35" pos:end="267:44"><expr pos:start="267:35" pos:end="267:44"><name pos:start="267:35" pos:end="267:44">sector_num</name></expr></argument>, <argument pos:start="267:47" pos:end="267:56"><expr pos:start="267:47" pos:end="267:56"><name pos:start="267:47" pos:end="267:56">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="271:45"><expr pos:start="269:5" pos:end="271:44"><call pos:start="269:5" pos:end="271:44"><name pos:start="269:5" pos:end="269:18">bdrv_aio_readv</name><argument_list pos:start="269:19" pos:end="271:44">(<argument pos:start="269:20" pos:end="269:25"><expr pos:start="269:20" pos:end="269:25"><name pos:start="269:20" pos:end="269:25">source</name></expr></argument>, <argument pos:start="269:28" pos:end="269:37"><expr pos:start="269:28" pos:end="269:37"><name pos:start="269:28" pos:end="269:37">sector_num</name></expr></argument>, <argument pos:start="269:40" pos:end="269:48"><expr pos:start="269:40" pos:end="269:48"><operator pos:start="269:40" pos:end="269:40">&amp;</operator><name pos:start="269:41" pos:end="269:48"><name pos:start="269:41" pos:end="269:42">op</name><operator pos:start="269:43" pos:end="269:44">-&gt;</operator><name pos:start="269:45" pos:end="269:48">qiov</name></name></expr></argument>, <argument pos:start="269:51" pos:end="269:60"><expr pos:start="269:51" pos:end="269:60"><name pos:start="269:51" pos:end="269:60">nb_sectors</name></expr></argument>,

                   <argument pos:start="271:20" pos:end="271:39"><expr pos:start="271:20" pos:end="271:39"><name pos:start="271:20" pos:end="271:39">mirror_read_complete</name></expr></argument>, <argument pos:start="271:42" pos:end="271:43"><expr pos:start="271:42" pos:end="271:43"><name pos:start="271:42" pos:end="271:43">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="273:5" pos:end="273:20">return <expr pos:start="273:12" pos:end="273:19"><name pos:start="273:12" pos:end="273:19">delay_ns</name></expr>;</return>

</block_content>}</block></function>
</unit>
