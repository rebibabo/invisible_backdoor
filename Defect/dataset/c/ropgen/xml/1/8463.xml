<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8463.c" pos:tabs="8"><function pos:start="1:1" pos:end="96:44"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_vdpau_common_init</name><parameter_list pos:start="1:25" pos:end="2:35">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:73"><decl pos:start="1:49" pos:end="1:73"><type pos:start="1:49" pos:end="1:73"><name pos:start="1:49" pos:end="1:65">VdpDecoderProfile</name></type> <name pos:start="1:67" pos:end="1:73">profile</name></decl></parameter>,
                         <parameter pos:start="2:26" pos:end="2:34"><decl pos:start="2:26" pos:end="2:34"><type pos:start="2:26" pos:end="2:34"><name pos:start="2:26" pos:end="2:28">int</name></type> <name pos:start="2:30" pos:end="2:34">level</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="96:44">{<block_content pos:start="4:5" pos:end="96:44">
    <decl_stmt pos:start="4:5" pos:end="4:51"><decl pos:start="4:5" pos:end="4:50"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:18">VDPAUHWContext</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier></type><name pos:start="4:21" pos:end="4:25">hwctx</name> <init pos:start="4:27" pos:end="4:50">= <expr pos:start="4:29" pos:end="4:50"><name pos:start="4:29" pos:end="4:50"><name pos:start="4:29" pos:end="4:33">avctx</name><operator pos:start="4:34" pos:end="4:35">-&gt;</operator><name pos:start="4:36" pos:end="4:50">hwaccel_context</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:61"><decl pos:start="5:5" pos:end="5:60"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">VDPAUContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:23">vdctx</name> <init pos:start="5:25" pos:end="5:60">= <expr pos:start="5:27" pos:end="5:60"><name pos:start="5:27" pos:end="5:60"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:41">internal</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:60">hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:57"><decl pos:start="6:5" pos:end="6:56"><type pos:start="6:5" pos:end="6:38"><name pos:start="6:5" pos:end="6:36">VdpVideoSurfaceQueryCapabilities</name> <modifier pos:start="6:38" pos:end="6:38">*</modifier></type><name pos:start="6:39" pos:end="6:56">surface_query_caps</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:33"><name pos:start="7:5" pos:end="7:31">VdpDecoderQueryCapabilities</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:51">decoder_query_caps</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:29"><decl pos:start="8:5" pos:end="8:28"><type pos:start="8:5" pos:end="8:22"><name pos:start="8:5" pos:end="8:20">VdpDecoderCreate</name> <modifier pos:start="8:22" pos:end="8:22">*</modifier></type><name pos:start="8:23" pos:end="8:28">create</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:29"><name pos:start="9:5" pos:end="9:27">VdpGetInformationString</name> <modifier pos:start="9:29" pos:end="9:29">*</modifier></type><name pos:start="9:30" pos:end="9:33">info</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:28"><decl pos:start="10:5" pos:end="10:27"><type pos:start="10:5" pos:end="10:16"><specifier pos:start="10:5" pos:end="10:9">const</specifier> <name pos:start="10:11" pos:end="10:14">char</name> <modifier pos:start="10:16" pos:end="10:16">*</modifier></type><name pos:start="10:17" pos:end="10:27">info_string</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:14">func</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:21"><decl pos:start="12:5" pos:end="12:20"><type pos:start="12:5" pos:end="12:13"><name pos:start="12:5" pos:end="12:13">VdpStatus</name></type> <name pos:start="12:15" pos:end="12:20">status</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">VdpBool</name></type> <name pos:start="13:13" pos:end="13:21">supported</name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:54"><decl pos:start="14:5" pos:end="14:22"><type pos:start="14:5" pos:end="14:12"><name pos:start="14:5" pos:end="14:12">uint32_t</name></type> <name pos:start="14:14" pos:end="14:22">max_level</name></decl>, <decl pos:start="14:25" pos:end="14:30"><type ref="prev" pos:start="14:5" pos:end="14:12"/><name pos:start="14:25" pos:end="14:30">max_mb</name></decl>, <decl pos:start="14:33" pos:end="14:41"><type ref="prev" pos:start="14:5" pos:end="14:12"/><name pos:start="14:33" pos:end="14:41">max_width</name></decl>, <decl pos:start="14:44" pos:end="14:53"><type ref="prev" pos:start="14:5" pos:end="14:12"/><name pos:start="14:44" pos:end="14:53">max_height</name></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">VdpChromaType</name></type> <name pos:start="15:19" pos:end="15:22">type</name></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:19"><decl pos:start="16:5" pos:end="16:18"><type pos:start="16:5" pos:end="16:12"><name pos:start="16:5" pos:end="16:12">uint32_t</name></type> <name pos:start="16:14" pos:end="16:18">width</name></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:19">height</name></decl>;</decl_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:41"><expr pos:start="18:5" pos:end="18:40"><name pos:start="18:5" pos:end="18:16"><name pos:start="18:5" pos:end="18:9">vdctx</name><operator pos:start="18:10" pos:end="18:11">-&gt;</operator><name pos:start="18:12" pos:end="18:16">width</name></name>            <operator pos:start="18:29" pos:end="18:29">=</operator> <name pos:start="18:31" pos:end="18:40">UINT32_MAX</name></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:9">vdctx</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:17">height</name></name>           <operator pos:start="19:29" pos:end="19:29">=</operator> <name pos:start="19:31" pos:end="19:40">UINT32_MAX</name></expr>;</expr_stmt>
    <if_stmt pos:start="20:5" pos:end="21:31"><if pos:start="20:5" pos:end="21:31">if <condition pos:start="20:8" pos:end="20:71">(<expr pos:start="20:9" pos:end="20:70"><call pos:start="20:9" pos:end="20:70"><name pos:start="20:9" pos:end="20:39">av_vdpau_get_surface_parameters</name><argument_list pos:start="20:40" pos:end="20:70">(<argument pos:start="20:41" pos:end="20:45"><expr pos:start="20:41" pos:end="20:45"><name pos:start="20:41" pos:end="20:45">avctx</name></expr></argument>, <argument pos:start="20:48" pos:end="20:52"><expr pos:start="20:48" pos:end="20:52"><operator pos:start="20:48" pos:end="20:48">&amp;</operator><name pos:start="20:49" pos:end="20:52">type</name></expr></argument>, <argument pos:start="20:55" pos:end="20:60"><expr pos:start="20:55" pos:end="20:60"><operator pos:start="20:55" pos:end="20:55">&amp;</operator><name pos:start="20:56" pos:end="20:60">width</name></expr></argument>, <argument pos:start="20:63" pos:end="20:69"><expr pos:start="20:63" pos:end="20:69"><operator pos:start="20:63" pos:end="20:63">&amp;</operator><name pos:start="20:64" pos:end="20:69">height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:31"><block_content pos:start="21:9" pos:end="21:31">
        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="22:5" pos:end="96:44"><if pos:start="22:5" pos:end="96:44">if <condition pos:start="22:8" pos:end="22:14">(<expr pos:start="22:9" pos:end="22:13"><name pos:start="22:9" pos:end="22:13">hwctx</name></expr>)</condition> <block pos:start="22:16" pos:end="96:44">{<block_content pos:start="23:9" pos:end="96:44">
        <expr_stmt pos:start="23:9" pos:end="23:36"><expr pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:13">hwctx</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:20">reset</name></name>            <operator pos:start="23:33" pos:end="23:33">=</operator> <literal type="number" pos:start="23:35" pos:end="23:35">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="24:9" pos:end="96:44"><if pos:start="24:9" pos:end="36:5">if <condition pos:start="24:12" pos:end="24:57">(<expr pos:start="24:13" pos:end="24:56"><name pos:start="24:13" pos:end="24:34"><name pos:start="24:13" pos:end="24:17">hwctx</name><operator pos:start="24:18" pos:end="24:19">-&gt;</operator><name pos:start="24:20" pos:end="24:26">context</name><operator pos:start="24:27" pos:end="24:27">.</operator><name pos:start="24:28" pos:end="24:34">decoder</name></name> <operator pos:start="24:36" pos:end="24:37">!=</operator> <name pos:start="24:39" pos:end="24:56">VDP_INVALID_HANDLE</name></expr>)</condition> <block pos:start="24:59" pos:end="36:5">{<block_content pos:start="25:13" pos:end="35:35">
            <expr_stmt pos:start="25:13" pos:end="25:52"><expr pos:start="25:13" pos:end="25:51"><name pos:start="25:13" pos:end="25:26"><name pos:start="25:13" pos:end="25:17">vdctx</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:26">decoder</name></name> <operator pos:start="25:28" pos:end="25:28">=</operator> <name pos:start="25:30" pos:end="25:51"><name pos:start="25:30" pos:end="25:34">hwctx</name><operator pos:start="25:35" pos:end="25:36">-&gt;</operator><name pos:start="25:37" pos:end="25:43">context</name><operator pos:start="25:44" pos:end="25:44">.</operator><name pos:start="25:45" pos:end="25:51">decoder</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="26:13" pos:end="26:51"><expr pos:start="26:13" pos:end="26:50"><name pos:start="26:13" pos:end="26:25"><name pos:start="26:13" pos:end="26:17">vdctx</name><operator pos:start="26:18" pos:end="26:19">-&gt;</operator><name pos:start="26:20" pos:end="26:25">render</name></name>  <operator pos:start="26:28" pos:end="26:28">=</operator> <name pos:start="26:30" pos:end="26:50"><name pos:start="26:30" pos:end="26:34">hwctx</name><operator pos:start="26:35" pos:end="26:36">-&gt;</operator><name pos:start="26:37" pos:end="26:43">context</name><operator pos:start="26:44" pos:end="26:44">.</operator><name pos:start="26:45" pos:end="26:50">render</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="27:13" pos:end="27:48"><expr pos:start="27:13" pos:end="27:47"><name pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:17">vdctx</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:25">device</name></name>  <operator pos:start="27:28" pos:end="27:28">=</operator> <name pos:start="27:30" pos:end="27:47">VDP_INVALID_HANDLE</name></expr>;</expr_stmt>
            <return pos:start="28:13" pos:end="28:21">return <expr pos:start="28:20" pos:end="28:20"><literal type="number" pos:start="28:20" pos:end="28:20">0</literal></expr>;</return> <comment type="block" pos:start="28:23" pos:end="28:51">/* Decoder created by user */</comment>
        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:13">vdctx</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:21">device</name></name>           <operator pos:start="29:33" pos:end="29:33">=</operator> <name pos:start="29:35" pos:end="29:47"><name pos:start="29:35" pos:end="29:39">hwctx</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:47">device</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:58"><expr pos:start="30:9" pos:end="30:57"><name pos:start="30:9" pos:end="30:31"><name pos:start="30:9" pos:end="30:13">vdctx</name><operator pos:start="30:14" pos:end="30:15">-&gt;</operator><name pos:start="30:16" pos:end="30:31">get_proc_address</name></name> <operator pos:start="30:33" pos:end="30:33">=</operator> <name pos:start="30:35" pos:end="30:57"><name pos:start="30:35" pos:end="30:39">hwctx</name><operator pos:start="30:40" pos:end="30:41">-&gt;</operator><name pos:start="30:42" pos:end="30:57">get_proc_address</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="31:9" pos:end="32:22"><if pos:start="31:9" pos:end="32:22">if <condition pos:start="31:12" pos:end="31:56">(<expr pos:start="31:13" pos:end="31:55"><name pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:17">hwctx</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:24">flags</name></name> <operator pos:start="31:26" pos:end="31:26">&amp;</operator> <name pos:start="31:28" pos:end="31:55">AV_HWACCEL_FLAG_IGNORE_LEVEL</name></expr>)</condition><block type="pseudo" pos:start="32:13" pos:end="32:22"><block_content pos:start="32:13" pos:end="32:22">
            <expr_stmt pos:start="32:13" pos:end="32:22"><expr pos:start="32:13" pos:end="32:21"><name pos:start="32:13" pos:end="32:17">level</name> <operator pos:start="32:19" pos:end="32:19">=</operator> <literal type="number" pos:start="32:21" pos:end="32:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="33:9" pos:end="35:35"><if pos:start="33:9" pos:end="35:35">if <condition pos:start="33:12" pos:end="34:40">(<expr pos:start="33:13" pos:end="34:39"><operator pos:start="33:13" pos:end="33:13">!</operator><operator pos:start="33:14" pos:end="33:14">(</operator><name pos:start="33:15" pos:end="33:26"><name pos:start="33:15" pos:end="33:19">hwctx</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:26">flags</name></name> <operator pos:start="33:28" pos:end="33:28">&amp;</operator> <name pos:start="33:30" pos:end="33:61">AV_HWACCEL_FLAG_ALLOW_HIGH_DEPTH</name><operator pos:start="33:62" pos:end="33:62">)</operator> <operator pos:start="33:64" pos:end="33:65">&amp;&amp;</operator>
            <name pos:start="34:13" pos:end="34:16">type</name> <operator pos:start="34:18" pos:end="34:19">!=</operator> <name pos:start="34:21" pos:end="34:39">VDP_CHROMA_TYPE_420</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:35"><block_content pos:start="35:13" pos:end="35:35">
            <return pos:start="35:13" pos:end="35:35">return <expr pos:start="35:20" pos:end="35:34"><call pos:start="35:20" pos:end="35:34"><name pos:start="35:20" pos:end="35:26">AVERROR</name><argument_list pos:start="35:27" pos:end="35:34">(<argument pos:start="35:28" pos:end="35:33"><expr pos:start="35:28" pos:end="35:33"><name pos:start="35:28" pos:end="35:33">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else pos:start="36:7" pos:end="96:44">else <block pos:start="36:12" pos:end="96:44">{<block_content pos:start="37:9" pos:end="96:44">
        <decl_stmt pos:start="37:9" pos:end="37:45"><decl pos:start="37:9" pos:end="37:44"><type pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:25">AVHWFramesContext</name> <modifier pos:start="37:27" pos:end="37:27">*</modifier></type><name pos:start="37:28" pos:end="37:37">frames_ctx</name> <init pos:start="37:39" pos:end="37:44">= <expr pos:start="37:41" pos:end="37:44"><name pos:start="37:41" pos:end="37:44">NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="38:9" pos:end="38:38"><decl pos:start="38:9" pos:end="38:37"><type pos:start="38:9" pos:end="38:30"><name pos:start="38:9" pos:end="38:28">AVVDPAUDeviceContext</name> <modifier pos:start="38:30" pos:end="38:30">*</modifier></type><name pos:start="38:31" pos:end="38:37">dev_ctx</name></decl>;</decl_stmt>
        <comment type="line" pos:start="39:9" pos:end="39:83">// We assume the hw_frames_ctx always survives until ff_vdpau_common_uninit</comment>
        <comment type="line" pos:start="40:9" pos:end="40:73">// is called. This holds true as the user is not allowed to touch</comment>
        <comment type="line" pos:start="41:9" pos:end="41:78">// hw_device_ctx, or hw_frames_ctx after get_format (and ff_get_format</comment>
        <comment type="line" pos:start="42:9" pos:end="42:63">// itself also uninits before unreffing hw_frames_ctx).</comment>
        <if_stmt pos:start="43:9" pos:end="96:44"><if pos:start="43:9" pos:end="45:9">if <condition pos:start="43:12" pos:end="43:33">(<expr pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:32"><name pos:start="43:13" pos:end="43:17">avctx</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:32">hw_frames_ctx</name></name></expr>)</condition> <block pos:start="43:35" pos:end="45:9">{<block_content pos:start="44:13" pos:end="44:72">
            <expr_stmt pos:start="44:13" pos:end="44:72"><expr pos:start="44:13" pos:end="44:71"><name pos:start="44:13" pos:end="44:22">frames_ctx</name> <operator pos:start="44:24" pos:end="44:24">=</operator> <operator pos:start="44:26" pos:end="44:26">(</operator><name pos:start="44:27" pos:end="44:43">AVHWFramesContext</name><operator pos:start="44:44" pos:end="44:44">*</operator><operator pos:start="44:45" pos:end="44:45">)</operator><name pos:start="44:46" pos:end="44:71"><name pos:start="44:46" pos:end="44:50">avctx</name><operator pos:start="44:51" pos:end="44:52">-&gt;</operator><name pos:start="44:53" pos:end="44:65">hw_frames_ctx</name><operator pos:start="44:66" pos:end="44:67">-&gt;</operator><name pos:start="44:68" pos:end="44:71">data</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="96:44">else if <condition pos:start="45:19" pos:end="45:40">(<expr pos:start="45:20" pos:end="45:39"><name pos:start="45:20" pos:end="45:39"><name pos:start="45:20" pos:end="45:24">avctx</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:39">hw_device_ctx</name></name></expr>)</condition> <block pos:start="45:42" pos:end="96:44">{<block_content pos:start="46:13" pos:end="96:44">
            <decl_stmt pos:start="46:13" pos:end="46:20"><decl pos:start="46:13" pos:end="46:19"><type pos:start="46:13" pos:end="46:15"><name pos:start="46:13" pos:end="46:15">int</name></type> <name pos:start="46:17" pos:end="46:19">ret</name></decl>;</decl_stmt>
            <expr_stmt pos:start="47:13" pos:end="47:78"><expr pos:start="47:13" pos:end="47:77"><name pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:17">avctx</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:32">hw_frames_ctx</name></name> <operator pos:start="47:34" pos:end="47:34">=</operator> <call pos:start="47:36" pos:end="47:77"><name pos:start="47:36" pos:end="47:55">av_hwframe_ctx_alloc</name><argument_list pos:start="47:56" pos:end="47:77">(<argument pos:start="47:57" pos:end="47:76"><expr pos:start="47:57" pos:end="47:76"><name pos:start="47:57" pos:end="47:76"><name pos:start="47:57" pos:end="47:61">avctx</name><operator pos:start="47:62" pos:end="47:63">-&gt;</operator><name pos:start="47:64" pos:end="47:76">hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="48:13" pos:end="49:39"><if pos:start="48:13" pos:end="49:39">if <condition pos:start="48:16" pos:end="48:38">(<expr pos:start="48:17" pos:end="48:37"><operator pos:start="48:17" pos:end="48:17">!</operator><name pos:start="48:18" pos:end="48:37"><name pos:start="48:18" pos:end="48:22">avctx</name><operator pos:start="48:23" pos:end="48:24">-&gt;</operator><name pos:start="48:25" pos:end="48:37">hw_frames_ctx</name></name></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:39"><block_content pos:start="49:17" pos:end="49:39">
                <return pos:start="49:17" pos:end="49:39">return <expr pos:start="49:24" pos:end="49:38"><call pos:start="49:24" pos:end="49:38"><name pos:start="49:24" pos:end="49:30">AVERROR</name><argument_list pos:start="49:31" pos:end="49:38">(<argument pos:start="49:32" pos:end="49:37"><expr pos:start="49:32" pos:end="49:37"><name pos:start="49:32" pos:end="49:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="50:13" pos:end="50:83"><expr pos:start="50:13" pos:end="50:82"><name pos:start="50:13" pos:end="50:22">frames_ctx</name>            <operator pos:start="50:35" pos:end="50:35">=</operator> <operator pos:start="50:37" pos:end="50:37">(</operator><name pos:start="50:38" pos:end="50:54">AVHWFramesContext</name><operator pos:start="50:55" pos:end="50:55">*</operator><operator pos:start="50:56" pos:end="50:56">)</operator><name pos:start="50:57" pos:end="50:82"><name pos:start="50:57" pos:end="50:61">avctx</name><operator pos:start="50:62" pos:end="50:63">-&gt;</operator><name pos:start="50:64" pos:end="50:76">hw_frames_ctx</name><operator pos:start="50:77" pos:end="50:78">-&gt;</operator><name pos:start="50:79" pos:end="50:82">data</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="51:13" pos:end="51:53"><expr pos:start="51:13" pos:end="51:52"><name pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:22">frames_ctx</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:30">format</name></name>    <operator pos:start="51:35" pos:end="51:35">=</operator> <name pos:start="51:37" pos:end="51:52">AV_PIX_FMT_VDPAU</name></expr>;</expr_stmt>
            <expr_stmt pos:start="52:13" pos:end="52:54"><expr pos:start="52:13" pos:end="52:53"><name pos:start="52:13" pos:end="52:33"><name pos:start="52:13" pos:end="52:22">frames_ctx</name><operator pos:start="52:23" pos:end="52:24">-&gt;</operator><name pos:start="52:25" pos:end="52:33">sw_format</name></name> <operator pos:start="52:35" pos:end="52:35">=</operator> <name pos:start="52:37" pos:end="52:53"><name pos:start="52:37" pos:end="52:41">avctx</name><operator pos:start="52:42" pos:end="52:43">-&gt;</operator><name pos:start="52:44" pos:end="52:53">sw_pix_fmt</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="53:13" pos:end="53:55"><expr pos:start="53:13" pos:end="53:54"><name pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:22">frames_ctx</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:29">width</name></name>     <operator pos:start="53:35" pos:end="53:35">=</operator> <name pos:start="53:37" pos:end="53:54"><name pos:start="53:37" pos:end="53:41">avctx</name><operator pos:start="53:42" pos:end="53:43">-&gt;</operator><name pos:start="53:44" pos:end="53:54">coded_width</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="54:13" pos:end="54:56"><expr pos:start="54:13" pos:end="54:55"><name pos:start="54:13" pos:end="54:30"><name pos:start="54:13" pos:end="54:22">frames_ctx</name><operator pos:start="54:23" pos:end="54:24">-&gt;</operator><name pos:start="54:25" pos:end="54:30">height</name></name>    <operator pos:start="54:35" pos:end="54:35">=</operator> <name pos:start="54:37" pos:end="54:55"><name pos:start="54:37" pos:end="54:41">avctx</name><operator pos:start="54:42" pos:end="54:43">-&gt;</operator><name pos:start="54:44" pos:end="54:55">coded_height</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="55:13" pos:end="55:60"><expr pos:start="55:13" pos:end="55:59"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:59"><name pos:start="55:19" pos:end="55:37">av_hwframe_ctx_init</name><argument_list pos:start="55:38" pos:end="55:59">(<argument pos:start="55:39" pos:end="55:58"><expr pos:start="55:39" pos:end="55:58"><name pos:start="55:39" pos:end="55:58"><name pos:start="55:39" pos:end="55:43">avctx</name><operator pos:start="55:44" pos:end="55:45">-&gt;</operator><name pos:start="55:46" pos:end="55:58">hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="56:13" pos:end="96:44"><if pos:start="56:13" pos:end="96:44">if <condition pos:start="56:16" pos:end="56:24">(<expr pos:start="56:17" pos:end="56:23"><name pos:start="56:17" pos:end="56:19">ret</name> <operator pos:start="56:21" pos:end="56:21">&lt;</operator> <literal type="number" pos:start="56:23" pos:end="56:23">0</literal></expr>)</condition> <block pos:start="56:26" pos:end="96:44">{<block_content pos:start="57:17" pos:end="96:44">
                <expr_stmt pos:start="57:17" pos:end="57:55"><expr pos:start="57:17" pos:end="57:54"><call pos:start="57:17" pos:end="57:54"><name pos:start="57:17" pos:end="57:31">av_buffer_unref</name><argument_list pos:start="57:32" pos:end="57:54">(<argument pos:start="57:33" pos:end="57:53"><expr pos:start="57:33" pos:end="57:53"><operator pos:start="57:33" pos:end="57:33">&amp;</operator><name pos:start="57:34" pos:end="57:53"><name pos:start="57:34" pos:end="57:38">avctx</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:53">hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="58:17" pos:end="58:27">return <expr pos:start="58:24" pos:end="58:26"><name pos:start="58:24" pos:end="58:26">ret</name></expr>;</return>
        <if_stmt pos:start="59:9" pos:end="96:44"><if pos:start="59:9" pos:end="96:44">if <condition pos:start="59:12" pos:end="59:24">(<expr pos:start="59:13" pos:end="59:23"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:23">frames_ctx</name></expr>)</condition> <block pos:start="59:26" pos:end="96:44">{<block_content pos:start="60:13" pos:end="96:44">
            <expr_stmt pos:start="60:13" pos:end="61:53"><expr pos:start="60:13" pos:end="61:52"><call pos:start="60:13" pos:end="61:52"><name pos:start="60:13" pos:end="60:18">av_log</name><argument_list pos:start="60:19" pos:end="61:52">(<argument pos:start="60:20" pos:end="60:24"><expr pos:start="60:20" pos:end="60:24"><name pos:start="60:20" pos:end="60:24">avctx</name></expr></argument>, <argument pos:start="60:27" pos:end="60:38"><expr pos:start="60:27" pos:end="60:38"><name pos:start="60:27" pos:end="60:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="60:41" pos:end="61:51"><expr pos:start="60:41" pos:end="61:51"><literal type="string" pos:start="60:41" pos:end="60:71">"A hardware frames context is "</literal>
                   <literal type="string" pos:start="61:20" pos:end="61:51">"required for VDPAU decoding.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="62:13" pos:end="62:35">return <expr pos:start="62:20" pos:end="62:34"><call pos:start="62:20" pos:end="62:34"><name pos:start="62:20" pos:end="62:26">AVERROR</name><argument_list pos:start="62:27" pos:end="62:34">(<argument pos:start="62:28" pos:end="62:33"><expr pos:start="62:28" pos:end="62:33"><name pos:start="62:28" pos:end="62:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
        <expr_stmt pos:start="63:9" pos:end="63:48"><expr pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:15">dev_ctx</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:47"><name pos:start="63:19" pos:end="63:28">frames_ctx</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:40">device_ctx</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:47">hwctx</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="64:9" pos:end="64:50"><expr pos:start="64:9" pos:end="64:49"><name pos:start="64:9" pos:end="64:21"><name pos:start="64:9" pos:end="64:13">vdctx</name><operator pos:start="64:14" pos:end="64:15">-&gt;</operator><name pos:start="64:16" pos:end="64:21">device</name></name>           <operator pos:start="64:33" pos:end="64:33">=</operator> <name pos:start="64:35" pos:end="64:49"><name pos:start="64:35" pos:end="64:41">dev_ctx</name><operator pos:start="64:42" pos:end="64:43">-&gt;</operator><name pos:start="64:44" pos:end="64:49">device</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="65:9" pos:end="65:60"><expr pos:start="65:9" pos:end="65:59"><name pos:start="65:9" pos:end="65:31"><name pos:start="65:9" pos:end="65:13">vdctx</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:31">get_proc_address</name></name> <operator pos:start="65:33" pos:end="65:33">=</operator> <name pos:start="65:35" pos:end="65:59"><name pos:start="65:35" pos:end="65:41">dev_ctx</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:59">get_proc_address</name></name></expr>;</expr_stmt>
        <if_stmt pos:start="66:9" pos:end="67:22"><if pos:start="66:9" pos:end="67:22">if <condition pos:start="66:12" pos:end="66:64">(<expr pos:start="66:13" pos:end="66:63"><name pos:start="66:13" pos:end="66:32"><name pos:start="66:13" pos:end="66:17">avctx</name><operator pos:start="66:18" pos:end="66:19">-&gt;</operator><name pos:start="66:20" pos:end="66:32">hwaccel_flags</name></name> <operator pos:start="66:34" pos:end="66:34">&amp;</operator> <name pos:start="66:36" pos:end="66:63">AV_HWACCEL_FLAG_IGNORE_LEVEL</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:22"><block_content pos:start="67:13" pos:end="67:22">
            <expr_stmt pos:start="67:13" pos:end="67:22"><expr pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:17">level</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="68:5" pos:end="70:34"><if pos:start="68:5" pos:end="70:34">if <condition pos:start="68:8" pos:end="68:18">(<expr pos:start="68:9" pos:end="68:17"><name pos:start="68:9" pos:end="68:13">level</name> <operator pos:start="68:15" pos:end="68:15">&lt;</operator> <literal type="number" pos:start="68:17" pos:end="68:17">0</literal></expr>)</condition><block type="pseudo" pos:start="69:38" pos:end="70:34"><block_content pos:start="69:38" pos:end="70:34">
                                     <expr_stmt pos:start="69:38" pos:end="70:34"><expr pos:start="69:38" pos:end="69:81"><name pos:start="69:38" pos:end="69:81">VDP_FUNC_ID_VIDEO_SURFACE_QUERY_CAPABILITIES</name></expr><operator pos:start="69:82" pos:end="69:82">,</operator>
        <expr pos:start="70:9" pos:end="70:33"><name pos:start="70:9" pos:end="70:26">surface_query_caps</name> <operator pos:start="70:28" pos:end="70:28">=</operator> <name pos:start="70:30" pos:end="70:33">func</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="71:5" pos:end="72:57"><expr pos:start="71:5" pos:end="72:56"><name pos:start="71:5" pos:end="71:10">status</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <call pos:start="71:14" pos:end="72:56"><name pos:start="71:14" pos:end="71:31">surface_query_caps</name><argument_list pos:start="71:32" pos:end="72:56">(<argument pos:start="71:33" pos:end="71:45"><expr pos:start="71:33" pos:end="71:45"><name pos:start="71:33" pos:end="71:45"><name pos:start="71:33" pos:end="71:37">vdctx</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:45">device</name></name></expr></argument>, <argument pos:start="71:48" pos:end="71:51"><expr pos:start="71:48" pos:end="71:51"><name pos:start="71:48" pos:end="71:51">type</name></expr></argument>, <argument pos:start="71:54" pos:end="71:63"><expr pos:start="71:54" pos:end="71:63"><operator pos:start="71:54" pos:end="71:54">&amp;</operator><name pos:start="71:55" pos:end="71:63">supported</name></expr></argument>,
                                <argument pos:start="72:33" pos:end="72:42"><expr pos:start="72:33" pos:end="72:42"><operator pos:start="72:33" pos:end="72:33">&amp;</operator><name pos:start="72:34" pos:end="72:42">max_width</name></expr></argument>, <argument pos:start="72:45" pos:end="72:55"><expr pos:start="72:45" pos:end="72:55"><operator pos:start="72:45" pos:end="72:45">&amp;</operator><name pos:start="72:46" pos:end="72:55">max_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="73:5" pos:end="76:34"><if pos:start="73:5" pos:end="76:34">if <condition pos:start="73:8" pos:end="74:49">(<expr pos:start="73:9" pos:end="74:48"><name pos:start="73:9" pos:end="73:17">supported</name> <operator pos:start="73:19" pos:end="73:20">!=</operator> <name pos:start="73:22" pos:end="73:29">VDP_TRUE</name> <operator pos:start="73:31" pos:end="73:32">||</operator>
        <name pos:start="74:9" pos:end="74:17">max_width</name> <operator pos:start="74:19" pos:end="74:19">&lt;</operator> <name pos:start="74:21" pos:end="74:25">width</name> <operator pos:start="74:27" pos:end="74:28">||</operator> <name pos:start="74:30" pos:end="74:39">max_height</name> <operator pos:start="74:41" pos:end="74:41">&lt;</operator> <name pos:start="74:43" pos:end="74:48">height</name></expr>)</condition><block type="pseudo" pos:start="75:38" pos:end="76:34"><block_content pos:start="75:38" pos:end="76:34">
                                     <expr_stmt pos:start="75:38" pos:end="76:34"><expr pos:start="75:38" pos:end="75:75"><name pos:start="75:38" pos:end="75:75">VDP_FUNC_ID_DECODER_QUERY_CAPABILITIES</name></expr><operator pos:start="75:76" pos:end="75:76">,</operator>
        <expr pos:start="76:9" pos:end="76:33"><name pos:start="76:9" pos:end="76:26">decoder_query_caps</name> <operator pos:start="76:28" pos:end="76:28">=</operator> <name pos:start="76:30" pos:end="76:33">func</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="77:5" pos:end="80:0"><expr pos:start="77:5" pos:end="78:65"><name pos:start="77:5" pos:end="77:10">status</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <call pos:start="77:14" pos:end="78:65"><name pos:start="77:14" pos:end="77:31">decoder_query_caps</name><argument_list pos:start="77:32" pos:end="78:65">(<argument pos:start="77:33" pos:end="77:45"><expr pos:start="77:33" pos:end="77:45"><name pos:start="77:33" pos:end="77:45"><name pos:start="77:33" pos:end="77:37">vdctx</name><operator pos:start="77:38" pos:end="77:39">-&gt;</operator><name pos:start="77:40" pos:end="77:45">device</name></name></expr></argument>, <argument pos:start="77:48" pos:end="77:54"><expr pos:start="77:48" pos:end="77:54"><name pos:start="77:48" pos:end="77:54">profile</name></expr></argument>, <argument pos:start="77:57" pos:end="77:66"><expr pos:start="77:57" pos:end="77:66"><operator pos:start="77:57" pos:end="77:57">&amp;</operator><name pos:start="77:58" pos:end="77:66">supported</name></expr></argument>, <argument pos:start="77:69" pos:end="77:78"><expr pos:start="77:69" pos:end="77:78"><operator pos:start="77:69" pos:end="77:69">&amp;</operator><name pos:start="77:70" pos:end="77:78">max_level</name></expr></argument>,
                                <argument pos:start="78:33" pos:end="78:39"><expr pos:start="78:33" pos:end="78:39"><operator pos:start="78:33" pos:end="78:33">&amp;</operator><name pos:start="78:34" pos:end="78:39">max_mb</name></expr></argument>, <argument pos:start="78:42" pos:end="78:51"><expr pos:start="78:42" pos:end="78:51"><operator pos:start="78:42" pos:end="78:42">&amp;</operator><name pos:start="78:43" pos:end="78:51">max_width</name></expr></argument>, <argument pos:start="78:54" pos:end="78:64"><expr pos:start="78:54" pos:end="78:64"><operator pos:start="78:54" pos:end="78:54">&amp;</operator><name pos:start="78:55" pos:end="78:64">max_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="79:1" pos:end="79:52">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:52">VDP_DECODER_PROFILE_H264_CONSTRAINED_BASELINE</name></cpp:ifdef>
    <if_stmt pos:start="80:5" pos:end="96:44"><if pos:start="80:5" pos:end="96:44">if <condition pos:start="80:8" pos:end="80:119">(<expr pos:start="80:9" pos:end="80:118"><operator pos:start="80:9" pos:end="80:9">(</operator><name pos:start="80:10" pos:end="80:15">status</name> <operator pos:start="80:17" pos:end="80:18">!=</operator> <name pos:start="80:20" pos:end="80:32">VDP_STATUS_OK</name> <operator pos:start="80:34" pos:end="80:35">||</operator> <name pos:start="80:37" pos:end="80:45">supported</name> <operator pos:start="80:47" pos:end="80:48">!=</operator> <name pos:start="80:50" pos:end="80:57">VDP_TRUE</name><operator pos:start="80:58" pos:end="80:58">)</operator> <operator pos:start="80:60" pos:end="80:61">&amp;&amp;</operator> <name pos:start="80:63" pos:end="80:69">profile</name> <operator pos:start="80:71" pos:end="80:72">==</operator> <name pos:start="80:74" pos:end="80:118">VDP_DECODER_PROFILE_H264_CONSTRAINED_BASELINE</name></expr>)</condition> <block pos:start="80:121" pos:end="96:44">{<block_content pos:start="81:9" pos:end="96:44">
        <expr_stmt pos:start="81:9" pos:end="81:48"><expr pos:start="81:9" pos:end="81:47"><name pos:start="81:9" pos:end="81:15">profile</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:47">VDP_DECODER_PROFILE_H264_MAIN</name></expr>;</expr_stmt>
        <expr_stmt pos:start="82:9" pos:end="86:0"><expr pos:start="82:9" pos:end="84:60"><name pos:start="82:9" pos:end="82:14">status</name> <operator pos:start="82:16" pos:end="82:16">=</operator> <call pos:start="82:18" pos:end="84:60"><name pos:start="82:18" pos:end="82:35">decoder_query_caps</name><argument_list pos:start="82:36" pos:end="84:60">(<argument pos:start="82:37" pos:end="82:49"><expr pos:start="82:37" pos:end="82:49"><name pos:start="82:37" pos:end="82:49"><name pos:start="82:37" pos:end="82:41">vdctx</name><operator pos:start="82:42" pos:end="82:43">-&gt;</operator><name pos:start="82:44" pos:end="82:49">device</name></name></expr></argument>, <argument pos:start="82:52" pos:end="82:58"><expr pos:start="82:52" pos:end="82:58"><name pos:start="82:52" pos:end="82:58">profile</name></expr></argument>, <argument pos:start="82:61" pos:end="82:70"><expr pos:start="82:61" pos:end="82:70"><operator pos:start="82:61" pos:end="82:61">&amp;</operator><name pos:start="82:62" pos:end="82:70">supported</name></expr></argument>,
                                    <argument pos:start="83:37" pos:end="83:46"><expr pos:start="83:37" pos:end="83:46"><operator pos:start="83:37" pos:end="83:37">&amp;</operator><name pos:start="83:38" pos:end="83:46">max_level</name></expr></argument>, <argument pos:start="83:49" pos:end="83:55"><expr pos:start="83:49" pos:end="83:55"><operator pos:start="83:49" pos:end="83:49">&amp;</operator><name pos:start="83:50" pos:end="83:55">max_mb</name></expr></argument>,
                                    <argument pos:start="84:37" pos:end="84:46"><expr pos:start="84:37" pos:end="84:46"><operator pos:start="84:37" pos:end="84:37">&amp;</operator><name pos:start="84:38" pos:end="84:46">max_width</name></expr></argument>, <argument pos:start="84:49" pos:end="84:59"><expr pos:start="84:49" pos:end="84:59"><operator pos:start="84:49" pos:end="84:49">&amp;</operator><name pos:start="84:50" pos:end="84:59">max_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>
    <if_stmt pos:start="86:5" pos:end="96:44"><if pos:start="86:5" pos:end="96:44">if <condition pos:start="86:8" pos:end="87:49">(<expr pos:start="86:9" pos:end="87:48"><name pos:start="86:9" pos:end="86:17">supported</name> <operator pos:start="86:19" pos:end="86:20">!=</operator> <name pos:start="86:22" pos:end="86:29">VDP_TRUE</name> <operator pos:start="86:31" pos:end="86:32">||</operator> <name pos:start="86:34" pos:end="86:42">max_level</name> <operator pos:start="86:44" pos:end="86:44">&lt;</operator> <name pos:start="86:46" pos:end="86:50">level</name> <operator pos:start="86:52" pos:end="86:53">||</operator>
        <name pos:start="87:9" pos:end="87:17">max_width</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:25">width</name> <operator pos:start="87:27" pos:end="87:28">||</operator> <name pos:start="87:30" pos:end="87:39">max_height</name> <operator pos:start="87:41" pos:end="87:41">&lt;</operator> <name pos:start="87:43" pos:end="87:48">height</name></expr>)</condition><block type="pseudo" pos:start="88:5" pos:end="96:44"><block_content pos:start="88:5" pos:end="96:44">
    <expr_stmt pos:start="88:5" pos:end="96:44"><expr pos:start="88:5" pos:end="96:44"><name pos:start="88:5" pos:end="88:10">status</name> <operator pos:start="88:12" pos:end="88:12">=</operator> <macro pos:start="88:14" pos:end="88:18"><name pos:start="88:14" pos:end="88:18">vdctx</name></macro><operator pos:start="88:19" pos:end="88:20">-&gt;</operator><macro pos:start="88:21" pos:end="96:44"><name pos:start="88:21" pos:end="88:36">get_proc_address</name><argument_list pos:start="88:37" pos:end="96:44">(<argument pos:start="88:38" pos:end="88:50">vdctx-&gt;device</argument>, <argument pos:start="88:53" pos:end="88:78">VDP_FUNC_ID_DECODER_CREATE</argument>,
        <argument pos:start="89:9" pos:end="96:44">create = func;
    status = vdctx-&gt;get_proc_address(vdctx-&gt;device, VDP_FUNC_ID_DECODER_RENDER,
        vdctx-&gt;render = func;
    status = create(vdctx-&gt;device, profile, width, height, avctx-&gt;refs,
                    &amp;vdctx-&gt;decoder);
    if (status == VDP_STATUS_OK) {
        vdctx-&gt;width  = avctx-&gt;coded_width;
        vdctx-&gt;height = avctx-&gt;coded_height;</argument></argument_list></macro></expr></expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
