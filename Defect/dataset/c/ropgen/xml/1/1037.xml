<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1037.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:51"><name pos:start="1:1" pos:end="1:10">build_ssdt</name><argument_list pos:start="1:11" pos:end="5:51">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:45">GArray *linker</argument>,

           <argument pos:start="3:12" pos:end="3:27">AcpiCpuInfo *cpu</argument>, <argument pos:start="3:30" pos:end="3:43">AcpiPmInfo *pm</argument>, <argument pos:start="3:46" pos:end="3:63">AcpiMiscInfo *misc</argument>,

           <argument pos:start="5:12" pos:end="5:25">PcPciInfo *pci</argument>, <argument pos:start="5:28" pos:end="5:50">PcGuestInfo *guest_info</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="901:1">{<block_content pos:start="9:5" pos:end="899:25">

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:25">machine</name> <init pos:start="9:27" pos:end="9:55">= <expr pos:start="9:29" pos:end="9:55"><call pos:start="9:29" pos:end="9:55"><name pos:start="9:29" pos:end="9:35">MACHINE</name><argument_list pos:start="9:36" pos:end="9:55">(<argument pos:start="9:37" pos:end="9:54"><expr pos:start="9:37" pos:end="9:54"><call pos:start="9:37" pos:end="9:54"><name pos:start="9:37" pos:end="9:52">qdev_get_machine</name><argument_list pos:start="9:53" pos:end="9:54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:19">nr_mem</name> <init pos:start="11:21" pos:end="11:40">= <expr pos:start="11:23" pos:end="11:40"><name pos:start="11:23" pos:end="11:40"><name pos:start="11:23" pos:end="11:29">machine</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:40">ram_slots</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:50"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:22">acpi_cpus</name> <init pos:start="13:24" pos:end="13:50">= <expr pos:start="13:26" pos:end="13:50"><name pos:start="13:26" pos:end="13:50"><name pos:start="13:26" pos:end="13:35">guest_info</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:50">apic_id_limit</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:76"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:7">Aml</name> <modifier pos:start="15:9" pos:end="15:9">*</modifier></type><name pos:start="15:10" pos:end="15:13">ssdt</name></decl>, <decl pos:start="15:16" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:9"><modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:24">sb_scope</name></decl>, <decl pos:start="15:27" pos:end="15:32"><type ref="prev" pos:start="15:5" pos:end="15:9"><modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:32">scope</name></decl>, <decl pos:start="15:35" pos:end="15:38"><type ref="prev" pos:start="15:5" pos:end="15:9"><modifier pos:start="15:35" pos:end="15:35">*</modifier></type><name pos:start="15:36" pos:end="15:38">pkg</name></decl>, <decl pos:start="15:41" pos:end="15:44"><type ref="prev" pos:start="15:5" pos:end="15:9"><modifier pos:start="15:41" pos:end="15:41">*</modifier></type><name pos:start="15:42" pos:end="15:44">dev</name></decl>, <decl pos:start="15:47" pos:end="15:53"><type ref="prev" pos:start="15:5" pos:end="15:9"><modifier pos:start="15:47" pos:end="15:47">*</modifier></type><name pos:start="15:48" pos:end="15:53">method</name></decl>, <decl pos:start="15:56" pos:end="15:59"><type ref="prev" pos:start="15:5" pos:end="15:9"><modifier pos:start="15:56" pos:end="15:56">*</modifier></type><name pos:start="15:57" pos:end="15:59">crs</name></decl>, <decl pos:start="15:62" pos:end="15:67"><type ref="prev" pos:start="15:5" pos:end="15:9"><modifier pos:start="15:62" pos:end="15:62">*</modifier></type><name pos:start="15:63" pos:end="15:67">field</name></decl>, <decl pos:start="15:70" pos:end="15:75"><type ref="prev" pos:start="15:5" pos:end="15:9"><modifier pos:start="15:70" pos:end="15:70">*</modifier></type><name pos:start="15:71" pos:end="15:75">ifctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:15">bus</name> <init pos:start="17:17" pos:end="17:22">= <expr pos:start="17:19" pos:end="17:22"><name pos:start="17:19" pos:end="17:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:74"><decl pos:start="19:5" pos:end="19:73"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">GPtrArray</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:24">io_ranges</name> <init pos:start="19:26" pos:end="19:73">= <expr pos:start="19:28" pos:end="19:73"><call pos:start="19:28" pos:end="19:73"><name pos:start="19:28" pos:end="19:57">g_ptr_array_new_with_free_func</name><argument_list pos:start="19:58" pos:end="19:73">(<argument pos:start="19:59" pos:end="19:72"><expr pos:start="19:59" pos:end="19:72"><name pos:start="19:59" pos:end="19:72">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:75"><decl pos:start="21:5" pos:end="21:74"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">GPtrArray</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:25">mem_ranges</name> <init pos:start="21:27" pos:end="21:74">= <expr pos:start="21:29" pos:end="21:74"><call pos:start="21:29" pos:end="21:74"><name pos:start="21:29" pos:end="21:58">g_ptr_array_new_with_free_func</name><argument_list pos:start="21:59" pos:end="21:74">(<argument pos:start="21:60" pos:end="21:73"><expr pos:start="21:60" pos:end="21:73"><name pos:start="21:60" pos:end="21:73">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:17">CrsRangeEntry</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:24">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:22">root_bus_limit</name> <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><literal type="number" pos:start="25:26" pos:end="25:29">0xFF</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:32"><expr pos:start="31:5" pos:end="31:31"><name pos:start="31:5" pos:end="31:8">ssdt</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:31"><name pos:start="31:12" pos:end="31:29">init_aml_allocator</name><argument_list pos:start="31:30" pos:end="31:31">()</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="33:5" pos:end="35:38">/* The current AML generator can cover the APIC ID range [0..255],

     * inclusive, for VCPU hotplug. */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:55"><expr pos:start="37:5" pos:end="37:54"><call pos:start="37:5" pos:end="37:54"><name pos:start="37:5" pos:end="37:21">QEMU_BUILD_BUG_ON</name><argument_list pos:start="37:22" pos:end="37:54">(<argument pos:start="37:23" pos:end="37:53"><expr pos:start="37:23" pos:end="37:53"><name pos:start="37:23" pos:end="37:47">ACPI_CPU_HOTPLUG_ID_LIMIT</name> <operator pos:start="37:49" pos:end="37:49">&gt;</operator> <literal type="number" pos:start="37:51" pos:end="37:53">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:53"><expr pos:start="39:5" pos:end="39:52"><call pos:start="39:5" pos:end="39:52"><name pos:start="39:5" pos:end="39:12">g_assert</name><argument_list pos:start="39:13" pos:end="39:52">(<argument pos:start="39:14" pos:end="39:51"><expr pos:start="39:14" pos:end="39:51"><name pos:start="39:14" pos:end="39:22">acpi_cpus</name> <operator pos:start="39:24" pos:end="39:25">&lt;=</operator> <name pos:start="39:27" pos:end="39:51">ACPI_CPU_HOTPLUG_ID_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:34">/* Reserve space for header */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:55"><expr pos:start="45:5" pos:end="45:54"><call pos:start="45:5" pos:end="45:54"><name pos:start="45:5" pos:end="45:18">acpi_data_push</name><argument_list pos:start="45:19" pos:end="45:54">(<argument pos:start="45:20" pos:end="45:28"><expr pos:start="45:20" pos:end="45:28"><name pos:start="45:20" pos:end="45:28"><name pos:start="45:20" pos:end="45:23">ssdt</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:28">buf</name></name></expr></argument>, <argument pos:start="45:31" pos:end="45:53"><expr pos:start="45:31" pos:end="45:53"><sizeof pos:start="45:31" pos:end="45:53">sizeof<argument_list pos:start="45:37" pos:end="45:53">(<argument pos:start="45:38" pos:end="45:52"><expr pos:start="45:38" pos:end="45:52"><name pos:start="45:38" pos:end="45:52">AcpiTableHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:63">/* Extra PCI root buses are implemented  only for i440fx */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:7">bus</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:23"><name pos:start="51:11" pos:end="51:21">find_i440fx</name><argument_list pos:start="51:22" pos:end="51:23">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="115:5"><if pos:start="53:5" pos:end="115:5">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">bus</name></expr>)</condition> <block pos:start="53:14" pos:end="115:5">{<block_content pos:start="55:9" pos:end="113:9">

        <macro pos:start="55:9" pos:end="55:48"><name pos:start="55:9" pos:end="55:21">QLIST_FOREACH</name><argument_list pos:start="55:22" pos:end="55:48">(<argument pos:start="55:23" pos:end="55:25">bus</argument>, <argument pos:start="55:28" pos:end="55:38">&amp;bus-&gt;child</argument>, <argument pos:start="55:41" pos:end="55:47">sibling</argument>)</argument_list></macro> <block pos:start="55:50" pos:end="113:9">{<block_content pos:start="57:13" pos:end="111:36">

            <decl_stmt pos:start="57:13" pos:end="57:47"><decl pos:start="57:13" pos:end="57:46"><type pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:19">uint8_t</name></type> <name pos:start="57:21" pos:end="57:27">bus_num</name> <init pos:start="57:29" pos:end="57:46">= <expr pos:start="57:31" pos:end="57:46"><call pos:start="57:31" pos:end="57:46"><name pos:start="57:31" pos:end="57:41">pci_bus_num</name><argument_list pos:start="57:42" pos:end="57:46">(<argument pos:start="57:43" pos:end="57:45"><expr pos:start="57:43" pos:end="57:45"><name pos:start="57:43" pos:end="57:45">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:55"><decl pos:start="59:13" pos:end="59:54"><type pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:19">uint8_t</name></type> <name pos:start="59:21" pos:end="59:29">numa_node</name> <init pos:start="59:31" pos:end="59:54">= <expr pos:start="59:33" pos:end="59:54"><call pos:start="59:33" pos:end="59:54"><name pos:start="59:33" pos:end="59:49">pci_bus_numa_node</name><argument_list pos:start="59:50" pos:end="59:54">(<argument pos:start="59:51" pos:end="59:53"><expr pos:start="59:51" pos:end="59:53"><name pos:start="59:51" pos:end="59:53">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="63:13" pos:end="63:51">/* look only for expander root buses */</comment>

            <if_stmt pos:start="65:13" pos:end="69:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:38">(<expr pos:start="65:17" pos:end="65:37"><operator pos:start="65:17" pos:end="65:17">!</operator><call pos:start="65:18" pos:end="65:37"><name pos:start="65:18" pos:end="65:32">pci_bus_is_root</name><argument_list pos:start="65:33" pos:end="65:37">(<argument pos:start="65:34" pos:end="65:36"><expr pos:start="65:34" pos:end="65:36"><name pos:start="65:34" pos:end="65:36">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:40" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:25">

                <continue pos:start="67:17" pos:end="67:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:41">(<expr pos:start="73:17" pos:end="73:40"><name pos:start="73:17" pos:end="73:23">bus_num</name> <operator pos:start="73:25" pos:end="73:25">&lt;</operator> <name pos:start="73:27" pos:end="73:40">root_bus_limit</name></expr>)</condition> <block pos:start="73:43" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:45">

                <expr_stmt pos:start="75:17" pos:end="75:45"><expr pos:start="75:17" pos:end="75:44"><name pos:start="75:17" pos:end="75:30">root_bus_limit</name> <operator pos:start="75:32" pos:end="75:32">=</operator> <name pos:start="75:34" pos:end="75:40">bus_num</name> <operator pos:start="75:42" pos:end="75:42">-</operator> <literal type="number" pos:start="75:44" pos:end="75:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="81:13" pos:end="81:39"><expr pos:start="81:13" pos:end="81:38"><name pos:start="81:13" pos:end="81:17">scope</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <call pos:start="81:21" pos:end="81:38"><name pos:start="81:21" pos:end="81:29">aml_scope</name><argument_list pos:start="81:30" pos:end="81:38">(<argument pos:start="81:31" pos:end="81:37"><expr pos:start="81:31" pos:end="81:37"><literal type="string" pos:start="81:31" pos:end="81:37">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:49"><expr pos:start="83:13" pos:end="83:48"><name pos:start="83:13" pos:end="83:15">dev</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:48"><name pos:start="83:19" pos:end="83:28">aml_device</name><argument_list pos:start="83:29" pos:end="83:48">(<argument pos:start="83:30" pos:end="83:38"><expr pos:start="83:30" pos:end="83:38"><literal type="string" pos:start="83:30" pos:end="83:38">"PC%.02X"</literal></expr></argument>, <argument pos:start="83:41" pos:end="83:47"><expr pos:start="83:41" pos:end="83:47"><name pos:start="83:41" pos:end="83:47">bus_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:69"><expr pos:start="85:13" pos:end="85:68"><call pos:start="85:13" pos:end="85:68"><name pos:start="85:13" pos:end="85:22">aml_append</name><argument_list pos:start="85:23" pos:end="85:68">(<argument pos:start="85:24" pos:end="85:26"><expr pos:start="85:24" pos:end="85:26"><name pos:start="85:24" pos:end="85:26">dev</name></expr></argument>, <argument pos:start="85:29" pos:end="85:67"><expr pos:start="85:29" pos:end="85:67"><call pos:start="85:29" pos:end="85:67"><name pos:start="85:29" pos:end="85:41">aml_name_decl</name><argument_list pos:start="85:42" pos:end="85:67">(<argument pos:start="85:43" pos:end="85:48"><expr pos:start="85:43" pos:end="85:48"><literal type="string" pos:start="85:43" pos:end="85:48">"_UID"</literal></expr></argument>, <argument pos:start="85:51" pos:end="85:66"><expr pos:start="85:51" pos:end="85:66"><call pos:start="85:51" pos:end="85:66"><name pos:start="85:51" pos:end="85:57">aml_int</name><argument_list pos:start="85:58" pos:end="85:66">(<argument pos:start="85:59" pos:end="85:65"><expr pos:start="85:59" pos:end="85:65"><name pos:start="85:59" pos:end="85:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:74"><expr pos:start="87:13" pos:end="87:73"><call pos:start="87:13" pos:end="87:73"><name pos:start="87:13" pos:end="87:22">aml_append</name><argument_list pos:start="87:23" pos:end="87:73">(<argument pos:start="87:24" pos:end="87:26"><expr pos:start="87:24" pos:end="87:26"><name pos:start="87:24" pos:end="87:26">dev</name></expr></argument>, <argument pos:start="87:29" pos:end="87:72"><expr pos:start="87:29" pos:end="87:72"><call pos:start="87:29" pos:end="87:72"><name pos:start="87:29" pos:end="87:41">aml_name_decl</name><argument_list pos:start="87:42" pos:end="87:72">(<argument pos:start="87:43" pos:end="87:48"><expr pos:start="87:43" pos:end="87:48"><literal type="string" pos:start="87:43" pos:end="87:48">"_HID"</literal></expr></argument>, <argument pos:start="87:51" pos:end="87:71"><expr pos:start="87:51" pos:end="87:71"><call pos:start="87:51" pos:end="87:71"><name pos:start="87:51" pos:end="87:60">aml_eisaid</name><argument_list pos:start="87:61" pos:end="87:71">(<argument pos:start="87:62" pos:end="87:70"><expr pos:start="87:62" pos:end="87:70"><literal type="string" pos:start="87:62" pos:end="87:70">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:69"><expr pos:start="89:13" pos:end="89:68"><call pos:start="89:13" pos:end="89:68"><name pos:start="89:13" pos:end="89:22">aml_append</name><argument_list pos:start="89:23" pos:end="89:68">(<argument pos:start="89:24" pos:end="89:26"><expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">dev</name></expr></argument>, <argument pos:start="89:29" pos:end="89:67"><expr pos:start="89:29" pos:end="89:67"><call pos:start="89:29" pos:end="89:67"><name pos:start="89:29" pos:end="89:41">aml_name_decl</name><argument_list pos:start="89:42" pos:end="89:67">(<argument pos:start="89:43" pos:end="89:48"><expr pos:start="89:43" pos:end="89:48"><literal type="string" pos:start="89:43" pos:end="89:48">"_BBN"</literal></expr></argument>, <argument pos:start="89:51" pos:end="89:66"><expr pos:start="89:51" pos:end="89:66"><call pos:start="89:51" pos:end="89:66"><name pos:start="89:51" pos:end="89:57">aml_int</name><argument_list pos:start="89:58" pos:end="89:66">(<argument pos:start="89:59" pos:end="89:65"><expr pos:start="89:59" pos:end="89:65"><name pos:start="89:59" pos:end="89:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="93:13" pos:end="97:13"><if pos:start="93:13" pos:end="97:13">if <condition pos:start="93:16" pos:end="93:50">(<expr pos:start="93:17" pos:end="93:49"><name pos:start="93:17" pos:end="93:25">numa_node</name> <operator pos:start="93:27" pos:end="93:28">!=</operator> <name pos:start="93:30" pos:end="93:49">NUMA_NODE_UNASSIGNED</name></expr>)</condition> <block pos:start="93:52" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:75">

                <expr_stmt pos:start="95:17" pos:end="95:75"><expr pos:start="95:17" pos:end="95:74"><call pos:start="95:17" pos:end="95:74"><name pos:start="95:17" pos:end="95:26">aml_append</name><argument_list pos:start="95:27" pos:end="95:74">(<argument pos:start="95:28" pos:end="95:30"><expr pos:start="95:28" pos:end="95:30"><name pos:start="95:28" pos:end="95:30">dev</name></expr></argument>, <argument pos:start="95:33" pos:end="95:73"><expr pos:start="95:33" pos:end="95:73"><call pos:start="95:33" pos:end="95:73"><name pos:start="95:33" pos:end="95:45">aml_name_decl</name><argument_list pos:start="95:46" pos:end="95:73">(<argument pos:start="95:47" pos:end="95:52"><expr pos:start="95:47" pos:end="95:52"><literal type="string" pos:start="95:47" pos:end="95:52">"_PXM"</literal></expr></argument>, <argument pos:start="95:55" pos:end="95:72"><expr pos:start="95:55" pos:end="95:72"><call pos:start="95:55" pos:end="95:72"><name pos:start="95:55" pos:end="95:61">aml_int</name><argument_list pos:start="95:62" pos:end="95:72">(<argument pos:start="95:63" pos:end="95:71"><expr pos:start="95:63" pos:end="95:71"><name pos:start="95:63" pos:end="95:71">numa_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:41"><expr pos:start="101:13" pos:end="101:40"><call pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:22">aml_append</name><argument_list pos:start="101:23" pos:end="101:40">(<argument pos:start="101:24" pos:end="101:26"><expr pos:start="101:24" pos:end="101:26"><name pos:start="101:24" pos:end="101:26">dev</name></expr></argument>, <argument pos:start="101:29" pos:end="101:39"><expr pos:start="101:29" pos:end="101:39"><call pos:start="101:29" pos:end="101:39"><name pos:start="101:29" pos:end="101:37">build_prt</name><argument_list pos:start="101:38" pos:end="101:39">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="105:51"><expr pos:start="103:13" pos:end="105:50"><name pos:start="103:13" pos:end="103:15">crs</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="105:50"><name pos:start="103:19" pos:end="103:27">build_crs</name><argument_list pos:start="103:28" pos:end="105:50">(<argument pos:start="103:29" pos:end="103:61"><expr pos:start="103:29" pos:end="103:61"><call pos:start="103:29" pos:end="103:61"><name pos:start="103:29" pos:end="103:43">PCI_HOST_BRIDGE</name><argument_list pos:start="103:44" pos:end="103:61">(<argument pos:start="103:45" pos:end="103:60"><expr pos:start="103:45" pos:end="103:60"><call pos:start="103:45" pos:end="103:52"><name pos:start="103:45" pos:end="103:47">BUS</name><argument_list pos:start="103:48" pos:end="103:52">(<argument pos:start="103:49" pos:end="103:51"><expr pos:start="103:49" pos:end="103:51"><name pos:start="103:49" pos:end="103:51">bus</name></expr></argument>)</argument_list></call><operator pos:start="103:53" pos:end="103:54">-&gt;</operator><name pos:start="103:55" pos:end="103:60">parent</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="105:29" pos:end="105:37"><expr pos:start="105:29" pos:end="105:37"><name pos:start="105:29" pos:end="105:37">io_ranges</name></expr></argument>, <argument pos:start="105:40" pos:end="105:49"><expr pos:start="105:40" pos:end="105:49"><name pos:start="105:40" pos:end="105:49">mem_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:56"><expr pos:start="107:13" pos:end="107:55"><call pos:start="107:13" pos:end="107:55"><name pos:start="107:13" pos:end="107:22">aml_append</name><argument_list pos:start="107:23" pos:end="107:55">(<argument pos:start="107:24" pos:end="107:26"><expr pos:start="107:24" pos:end="107:26"><name pos:start="107:24" pos:end="107:26">dev</name></expr></argument>, <argument pos:start="107:29" pos:end="107:54"><expr pos:start="107:29" pos:end="107:54"><call pos:start="107:29" pos:end="107:54"><name pos:start="107:29" pos:end="107:41">aml_name_decl</name><argument_list pos:start="107:42" pos:end="107:54">(<argument pos:start="107:43" pos:end="107:48"><expr pos:start="107:43" pos:end="107:48"><literal type="string" pos:start="107:43" pos:end="107:48">"_CRS"</literal></expr></argument>, <argument pos:start="107:51" pos:end="107:53"><expr pos:start="107:51" pos:end="107:53"><name pos:start="107:51" pos:end="107:53">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:35"><expr pos:start="109:13" pos:end="109:34"><call pos:start="109:13" pos:end="109:34"><name pos:start="109:13" pos:end="109:22">aml_append</name><argument_list pos:start="109:23" pos:end="109:34">(<argument pos:start="109:24" pos:end="109:28"><expr pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:28">scope</name></expr></argument>, <argument pos:start="109:31" pos:end="109:33"><expr pos:start="109:31" pos:end="109:33"><name pos:start="109:31" pos:end="109:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:36"><expr pos:start="111:13" pos:end="111:35"><call pos:start="111:13" pos:end="111:35"><name pos:start="111:13" pos:end="111:22">aml_append</name><argument_list pos:start="111:23" pos:end="111:35">(<argument pos:start="111:24" pos:end="111:27"><expr pos:start="111:24" pos:end="111:27"><name pos:start="111:24" pos:end="111:27">ssdt</name></expr></argument>, <argument pos:start="111:30" pos:end="111:34"><expr pos:start="111:30" pos:end="111:34"><name pos:start="111:30" pos:end="111:34">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:36"><expr pos:start="119:5" pos:end="119:35"><name pos:start="119:5" pos:end="119:9">scope</name> <operator pos:start="119:11" pos:end="119:11">=</operator> <call pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:21">aml_scope</name><argument_list pos:start="119:22" pos:end="119:35">(<argument pos:start="119:23" pos:end="119:34"><expr pos:start="119:23" pos:end="119:34"><literal type="string" pos:start="119:23" pos:end="119:34">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="121:5" pos:end="121:25">/* build PCI0._CRS */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:34"><expr pos:start="123:5" pos:end="123:33"><name pos:start="123:5" pos:end="123:7">crs</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:33"><name pos:start="123:11" pos:end="123:31">aml_resource_template</name><argument_list pos:start="123:32" pos:end="123:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="131:57"><expr pos:start="125:5" pos:end="131:56"><call pos:start="125:5" pos:end="131:56"><name pos:start="125:5" pos:end="125:14">aml_append</name><argument_list pos:start="125:15" pos:end="131:56">(<argument pos:start="125:16" pos:end="125:18"><expr pos:start="125:16" pos:end="125:18"><name pos:start="125:16" pos:end="125:18">crs</name></expr></argument>,

        <argument pos:start="127:9" pos:end="131:55"><expr pos:start="127:9" pos:end="131:55"><call pos:start="127:9" pos:end="131:55"><name pos:start="127:9" pos:end="127:27">aml_word_bus_number</name><argument_list pos:start="127:28" pos:end="131:55">(<argument pos:start="127:29" pos:end="127:41"><expr pos:start="127:29" pos:end="127:41"><name pos:start="127:29" pos:end="127:41">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="127:44" pos:end="127:56"><expr pos:start="127:44" pos:end="127:56"><name pos:start="127:44" pos:end="127:56">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="127:59" pos:end="127:72"><expr pos:start="127:59" pos:end="127:72"><name pos:start="127:59" pos:end="127:72">AML_POS_DECODE</name></expr></argument>,

                            <argument pos:start="129:29" pos:end="129:34"><expr pos:start="129:29" pos:end="129:34"><literal type="number" pos:start="129:29" pos:end="129:34">0x0000</literal></expr></argument>, <argument pos:start="129:37" pos:end="129:39"><expr pos:start="129:37" pos:end="129:39"><literal type="number" pos:start="129:37" pos:end="129:39">0x0</literal></expr></argument>, <argument pos:start="129:42" pos:end="129:55"><expr pos:start="129:42" pos:end="129:55"><name pos:start="129:42" pos:end="129:55">root_bus_limit</name></expr></argument>,

                            <argument pos:start="131:29" pos:end="131:34"><expr pos:start="131:29" pos:end="131:34"><literal type="number" pos:start="131:29" pos:end="131:34">0x0000</literal></expr></argument>, <argument pos:start="131:37" pos:end="131:54"><expr pos:start="131:37" pos:end="131:54"><name pos:start="131:37" pos:end="131:50">root_bus_limit</name> <operator pos:start="131:52" pos:end="131:52">+</operator> <literal type="number" pos:start="131:54" pos:end="131:54">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:70"><expr pos:start="133:5" pos:end="133:69"><call pos:start="133:5" pos:end="133:69"><name pos:start="133:5" pos:end="133:14">aml_append</name><argument_list pos:start="133:15" pos:end="133:69">(<argument pos:start="133:16" pos:end="133:18"><expr pos:start="133:16" pos:end="133:18"><name pos:start="133:16" pos:end="133:18">crs</name></expr></argument>, <argument pos:start="133:21" pos:end="133:68"><expr pos:start="133:21" pos:end="133:68"><call pos:start="133:21" pos:end="133:68"><name pos:start="133:21" pos:end="133:26">aml_io</name><argument_list pos:start="133:27" pos:end="133:68">(<argument pos:start="133:28" pos:end="133:39"><expr pos:start="133:28" pos:end="133:39"><name pos:start="133:28" pos:end="133:39">AML_DECODE16</name></expr></argument>, <argument pos:start="133:42" pos:end="133:47"><expr pos:start="133:42" pos:end="133:47"><literal type="number" pos:start="133:42" pos:end="133:47">0x0CF8</literal></expr></argument>, <argument pos:start="133:50" pos:end="133:55"><expr pos:start="133:50" pos:end="133:55"><literal type="number" pos:start="133:50" pos:end="133:55">0x0CF8</literal></expr></argument>, <argument pos:start="133:58" pos:end="133:61"><expr pos:start="133:58" pos:end="133:61"><literal type="number" pos:start="133:58" pos:end="133:61">0x01</literal></expr></argument>, <argument pos:start="133:64" pos:end="133:67"><expr pos:start="133:64" pos:end="133:67"><literal type="number" pos:start="133:64" pos:end="133:67">0x08</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="143:61"><expr pos:start="137:5" pos:end="143:60"><call pos:start="137:5" pos:end="143:60"><name pos:start="137:5" pos:end="137:14">aml_append</name><argument_list pos:start="137:15" pos:end="143:60">(<argument pos:start="137:16" pos:end="137:18"><expr pos:start="137:16" pos:end="137:18"><name pos:start="137:16" pos:end="137:18">crs</name></expr></argument>,

        <argument pos:start="139:9" pos:end="143:59"><expr pos:start="139:9" pos:end="143:59"><call pos:start="139:9" pos:end="143:59"><name pos:start="139:9" pos:end="139:19">aml_word_io</name><argument_list pos:start="139:20" pos:end="143:59">(<argument pos:start="139:21" pos:end="139:33"><expr pos:start="139:21" pos:end="139:33"><name pos:start="139:21" pos:end="139:33">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="139:36" pos:end="139:48"><expr pos:start="139:36" pos:end="139:48"><name pos:start="139:36" pos:end="139:48">AML_MAX_FIXED</name></expr></argument>,

                    <argument pos:start="141:21" pos:end="141:34"><expr pos:start="141:21" pos:end="141:34"><name pos:start="141:21" pos:end="141:34">AML_POS_DECODE</name></expr></argument>, <argument pos:start="141:37" pos:end="141:52"><expr pos:start="141:37" pos:end="141:52"><name pos:start="141:37" pos:end="141:52">AML_ENTIRE_RANGE</name></expr></argument>,

                    <argument pos:start="143:21" pos:end="143:26"><expr pos:start="143:21" pos:end="143:26"><literal type="number" pos:start="143:21" pos:end="143:26">0x0000</literal></expr></argument>, <argument pos:start="143:29" pos:end="143:34"><expr pos:start="143:29" pos:end="143:34"><literal type="number" pos:start="143:29" pos:end="143:34">0x0000</literal></expr></argument>, <argument pos:start="143:37" pos:end="143:42"><expr pos:start="143:37" pos:end="143:42"><literal type="number" pos:start="143:37" pos:end="143:42">0x0CF7</literal></expr></argument>, <argument pos:start="143:45" pos:end="143:50"><expr pos:start="143:45" pos:end="143:50"><literal type="number" pos:start="143:45" pos:end="143:50">0x0000</literal></expr></argument>, <argument pos:start="143:53" pos:end="143:58"><expr pos:start="143:53" pos:end="143:58"><literal type="number" pos:start="143:53" pos:end="143:58">0x0CF8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:60"><expr pos:start="147:5" pos:end="147:59"><call pos:start="147:5" pos:end="147:59"><name pos:start="147:5" pos:end="147:32">crs_replace_with_free_ranges</name><argument_list pos:start="147:33" pos:end="147:59">(<argument pos:start="147:34" pos:end="147:42"><expr pos:start="147:34" pos:end="147:42"><name pos:start="147:34" pos:end="147:42">io_ranges</name></expr></argument>, <argument pos:start="147:45" pos:end="147:50"><expr pos:start="147:45" pos:end="147:50"><literal type="number" pos:start="147:45" pos:end="147:50">0x0D00</literal></expr></argument>, <argument pos:start="147:53" pos:end="147:58"><expr pos:start="147:53" pos:end="147:58"><literal type="number" pos:start="147:53" pos:end="147:58">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="149:5" pos:end="163:5">for <control pos:start="149:9" pos:end="149:40">(<init pos:start="149:10" pos:end="149:15"><expr pos:start="149:10" pos:end="149:14"><name pos:start="149:10" pos:end="149:10">i</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <literal type="number" pos:start="149:14" pos:end="149:14">0</literal></expr>;</init> <condition pos:start="149:17" pos:end="149:35"><expr pos:start="149:17" pos:end="149:34"><name pos:start="149:17" pos:end="149:17">i</name> <operator pos:start="149:19" pos:end="149:19">&lt;</operator> <name pos:start="149:21" pos:end="149:34"><name pos:start="149:21" pos:end="149:29">io_ranges</name><operator pos:start="149:30" pos:end="149:31">-&gt;</operator><name pos:start="149:32" pos:end="149:34">len</name></name></expr>;</condition> <incr pos:start="149:37" pos:end="149:39"><expr pos:start="149:37" pos:end="149:39"><name pos:start="149:37" pos:end="149:37">i</name><operator pos:start="149:38" pos:end="149:39">++</operator></expr></incr>)</control> <block pos:start="149:42" pos:end="163:5">{<block_content pos:start="151:9" pos:end="161:65">

        <expr_stmt pos:start="151:9" pos:end="151:48"><expr pos:start="151:9" pos:end="151:47"><name pos:start="151:9" pos:end="151:13">entry</name> <operator pos:start="151:15" pos:end="151:15">=</operator> <call pos:start="151:17" pos:end="151:47"><name pos:start="151:17" pos:end="151:33">g_ptr_array_index</name><argument_list pos:start="151:34" pos:end="151:47">(<argument pos:start="151:35" pos:end="151:43"><expr pos:start="151:35" pos:end="151:43"><name pos:start="151:35" pos:end="151:43">io_ranges</name></expr></argument>, <argument pos:start="151:46" pos:end="151:46"><expr pos:start="151:46" pos:end="151:46"><name pos:start="151:46" pos:end="151:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="161:65"><expr pos:start="153:9" pos:end="161:64"><call pos:start="153:9" pos:end="161:64"><name pos:start="153:9" pos:end="153:18">aml_append</name><argument_list pos:start="153:19" pos:end="161:64">(<argument pos:start="153:20" pos:end="153:22"><expr pos:start="153:20" pos:end="153:22"><name pos:start="153:20" pos:end="153:22">crs</name></expr></argument>,

            <argument pos:start="155:13" pos:end="161:63"><expr pos:start="155:13" pos:end="161:63"><call pos:start="155:13" pos:end="161:63"><name pos:start="155:13" pos:end="155:23">aml_word_io</name><argument_list pos:start="155:24" pos:end="161:63">(<argument pos:start="155:25" pos:end="155:37"><expr pos:start="155:25" pos:end="155:37"><name pos:start="155:25" pos:end="155:37">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="155:40" pos:end="155:52"><expr pos:start="155:40" pos:end="155:52"><name pos:start="155:40" pos:end="155:52">AML_MAX_FIXED</name></expr></argument>,

                        <argument pos:start="157:25" pos:end="157:38"><expr pos:start="157:25" pos:end="157:38"><name pos:start="157:25" pos:end="157:38">AML_POS_DECODE</name></expr></argument>, <argument pos:start="157:41" pos:end="157:56"><expr pos:start="157:41" pos:end="157:56"><name pos:start="157:41" pos:end="157:56">AML_ENTIRE_RANGE</name></expr></argument>,

                        <argument pos:start="159:25" pos:end="159:30"><expr pos:start="159:25" pos:end="159:30"><literal type="number" pos:start="159:25" pos:end="159:30">0x0000</literal></expr></argument>, <argument pos:start="159:33" pos:end="159:43"><expr pos:start="159:33" pos:end="159:43"><name pos:start="159:33" pos:end="159:43"><name pos:start="159:33" pos:end="159:37">entry</name><operator pos:start="159:38" pos:end="159:39">-&gt;</operator><name pos:start="159:40" pos:end="159:43">base</name></name></expr></argument>, <argument pos:start="159:46" pos:end="159:57"><expr pos:start="159:46" pos:end="159:57"><name pos:start="159:46" pos:end="159:57"><name pos:start="159:46" pos:end="159:50">entry</name><operator pos:start="159:51" pos:end="159:52">-&gt;</operator><name pos:start="159:53" pos:end="159:57">limit</name></name></expr></argument>,

                        <argument pos:start="161:25" pos:end="161:30"><expr pos:start="161:25" pos:end="161:30"><literal type="number" pos:start="161:25" pos:end="161:30">0x0000</literal></expr></argument>, <argument pos:start="161:33" pos:end="161:62"><expr pos:start="161:33" pos:end="161:62"><name pos:start="161:33" pos:end="161:44"><name pos:start="161:33" pos:end="161:37">entry</name><operator pos:start="161:38" pos:end="161:39">-&gt;</operator><name pos:start="161:40" pos:end="161:44">limit</name></name> <operator pos:start="161:46" pos:end="161:46">-</operator> <name pos:start="161:48" pos:end="161:58"><name pos:start="161:48" pos:end="161:52">entry</name><operator pos:start="161:53" pos:end="161:54">-&gt;</operator><name pos:start="161:55" pos:end="161:58">base</name></name> <operator pos:start="161:60" pos:end="161:60">+</operator> <literal type="number" pos:start="161:62" pos:end="161:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="167:5" pos:end="173:68"><expr pos:start="167:5" pos:end="173:67"><call pos:start="167:5" pos:end="173:67"><name pos:start="167:5" pos:end="167:14">aml_append</name><argument_list pos:start="167:15" pos:end="173:67">(<argument pos:start="167:16" pos:end="167:18"><expr pos:start="167:16" pos:end="167:18"><name pos:start="167:16" pos:end="167:18">crs</name></expr></argument>,

        <argument pos:start="169:9" pos:end="173:66"><expr pos:start="169:9" pos:end="173:66"><call pos:start="169:9" pos:end="173:66"><name pos:start="169:9" pos:end="169:24">aml_dword_memory</name><argument_list pos:start="169:25" pos:end="173:66">(<argument pos:start="169:26" pos:end="169:39"><expr pos:start="169:26" pos:end="169:39"><name pos:start="169:26" pos:end="169:39">AML_POS_DECODE</name></expr></argument>, <argument pos:start="169:42" pos:end="169:54"><expr pos:start="169:42" pos:end="169:54"><name pos:start="169:42" pos:end="169:54">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="169:57" pos:end="169:69"><expr pos:start="169:57" pos:end="169:69"><name pos:start="169:57" pos:end="169:69">AML_MAX_FIXED</name></expr></argument>,

                         <argument pos:start="171:26" pos:end="171:38"><expr pos:start="171:26" pos:end="171:38"><name pos:start="171:26" pos:end="171:38">AML_CACHEABLE</name></expr></argument>, <argument pos:start="171:41" pos:end="171:54"><expr pos:start="171:41" pos:end="171:54"><name pos:start="171:41" pos:end="171:54">AML_READ_WRITE</name></expr></argument>,

                         <argument pos:start="173:26" pos:end="173:26"><expr pos:start="173:26" pos:end="173:26"><literal type="number" pos:start="173:26" pos:end="173:26">0</literal></expr></argument>, <argument pos:start="173:29" pos:end="173:38"><expr pos:start="173:29" pos:end="173:38"><literal type="number" pos:start="173:29" pos:end="173:38">0x000A0000</literal></expr></argument>, <argument pos:start="173:41" pos:end="173:50"><expr pos:start="173:41" pos:end="173:50"><literal type="number" pos:start="173:41" pos:end="173:50">0x000BFFFF</literal></expr></argument>, <argument pos:start="173:53" pos:end="173:53"><expr pos:start="173:53" pos:end="173:53"><literal type="number" pos:start="173:53" pos:end="173:53">0</literal></expr></argument>, <argument pos:start="173:56" pos:end="173:65"><expr pos:start="173:56" pos:end="173:65"><literal type="number" pos:start="173:56" pos:end="173:65">0x00020000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:79"><expr pos:start="177:5" pos:end="177:78"><call pos:start="177:5" pos:end="177:78"><name pos:start="177:5" pos:end="177:32">crs_replace_with_free_ranges</name><argument_list pos:start="177:33" pos:end="177:78">(<argument pos:start="177:34" pos:end="177:43"><expr pos:start="177:34" pos:end="177:43"><name pos:start="177:34" pos:end="177:43">mem_ranges</name></expr></argument>, <argument pos:start="177:46" pos:end="177:59"><expr pos:start="177:46" pos:end="177:59"><name pos:start="177:46" pos:end="177:59"><name pos:start="177:46" pos:end="177:48">pci</name><operator pos:start="177:49" pos:end="177:50">-&gt;</operator><name pos:start="177:51" pos:end="177:53">w32</name><operator pos:start="177:54" pos:end="177:54">.</operator><name pos:start="177:55" pos:end="177:59">begin</name></name></expr></argument>, <argument pos:start="177:62" pos:end="177:77"><expr pos:start="177:62" pos:end="177:77"><name pos:start="177:62" pos:end="177:73"><name pos:start="177:62" pos:end="177:64">pci</name><operator pos:start="177:65" pos:end="177:66">-&gt;</operator><name pos:start="177:67" pos:end="177:69">w32</name><operator pos:start="177:70" pos:end="177:70">.</operator><name pos:start="177:71" pos:end="177:73">end</name></name> <operator pos:start="177:75" pos:end="177:75">-</operator> <literal type="number" pos:start="177:77" pos:end="177:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="179:5" pos:end="193:5">for <control pos:start="179:9" pos:end="179:41">(<init pos:start="179:10" pos:end="179:15"><expr pos:start="179:10" pos:end="179:14"><name pos:start="179:10" pos:end="179:10">i</name> <operator pos:start="179:12" pos:end="179:12">=</operator> <literal type="number" pos:start="179:14" pos:end="179:14">0</literal></expr>;</init> <condition pos:start="179:17" pos:end="179:36"><expr pos:start="179:17" pos:end="179:35"><name pos:start="179:17" pos:end="179:17">i</name> <operator pos:start="179:19" pos:end="179:19">&lt;</operator> <name pos:start="179:21" pos:end="179:35"><name pos:start="179:21" pos:end="179:30">mem_ranges</name><operator pos:start="179:31" pos:end="179:32">-&gt;</operator><name pos:start="179:33" pos:end="179:35">len</name></name></expr>;</condition> <incr pos:start="179:38" pos:end="179:40"><expr pos:start="179:38" pos:end="179:40"><name pos:start="179:38" pos:end="179:38">i</name><operator pos:start="179:39" pos:end="179:40">++</operator></expr></incr>)</control> <block pos:start="179:43" pos:end="193:5">{<block_content pos:start="181:9" pos:end="191:65">

        <expr_stmt pos:start="181:9" pos:end="181:49"><expr pos:start="181:9" pos:end="181:48"><name pos:start="181:9" pos:end="181:13">entry</name> <operator pos:start="181:15" pos:end="181:15">=</operator> <call pos:start="181:17" pos:end="181:48"><name pos:start="181:17" pos:end="181:33">g_ptr_array_index</name><argument_list pos:start="181:34" pos:end="181:48">(<argument pos:start="181:35" pos:end="181:44"><expr pos:start="181:35" pos:end="181:44"><name pos:start="181:35" pos:end="181:44">mem_ranges</name></expr></argument>, <argument pos:start="181:47" pos:end="181:47"><expr pos:start="181:47" pos:end="181:47"><name pos:start="181:47" pos:end="181:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="191:65"><expr pos:start="183:9" pos:end="191:64"><call pos:start="183:9" pos:end="191:64"><name pos:start="183:9" pos:end="183:18">aml_append</name><argument_list pos:start="183:19" pos:end="191:64">(<argument pos:start="183:20" pos:end="183:22"><expr pos:start="183:20" pos:end="183:22"><name pos:start="183:20" pos:end="183:22">crs</name></expr></argument>,

            <argument pos:start="185:13" pos:end="191:63"><expr pos:start="185:13" pos:end="191:63"><call pos:start="185:13" pos:end="191:63"><name pos:start="185:13" pos:end="185:28">aml_dword_memory</name><argument_list pos:start="185:29" pos:end="191:63">(<argument pos:start="185:30" pos:end="185:43"><expr pos:start="185:30" pos:end="185:43"><name pos:start="185:30" pos:end="185:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="185:46" pos:end="185:58"><expr pos:start="185:46" pos:end="185:58"><name pos:start="185:46" pos:end="185:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="185:61" pos:end="185:73"><expr pos:start="185:61" pos:end="185:73"><name pos:start="185:61" pos:end="185:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="187:30" pos:end="187:46"><expr pos:start="187:30" pos:end="187:46"><name pos:start="187:30" pos:end="187:46">AML_NON_CACHEABLE</name></expr></argument>, <argument pos:start="187:49" pos:end="187:62"><expr pos:start="187:49" pos:end="187:62"><name pos:start="187:49" pos:end="187:62">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="189:30" pos:end="189:30"><expr pos:start="189:30" pos:end="189:30"><literal type="number" pos:start="189:30" pos:end="189:30">0</literal></expr></argument>, <argument pos:start="189:33" pos:end="189:43"><expr pos:start="189:33" pos:end="189:43"><name pos:start="189:33" pos:end="189:43"><name pos:start="189:33" pos:end="189:37">entry</name><operator pos:start="189:38" pos:end="189:39">-&gt;</operator><name pos:start="189:40" pos:end="189:43">base</name></name></expr></argument>, <argument pos:start="189:46" pos:end="189:57"><expr pos:start="189:46" pos:end="189:57"><name pos:start="189:46" pos:end="189:57"><name pos:start="189:46" pos:end="189:50">entry</name><operator pos:start="189:51" pos:end="189:52">-&gt;</operator><name pos:start="189:53" pos:end="189:57">limit</name></name></expr></argument>,

                             <argument pos:start="191:30" pos:end="191:30"><expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">0</literal></expr></argument>, <argument pos:start="191:33" pos:end="191:62"><expr pos:start="191:33" pos:end="191:62"><name pos:start="191:33" pos:end="191:44"><name pos:start="191:33" pos:end="191:37">entry</name><operator pos:start="191:38" pos:end="191:39">-&gt;</operator><name pos:start="191:40" pos:end="191:44">limit</name></name> <operator pos:start="191:46" pos:end="191:46">-</operator> <name pos:start="191:48" pos:end="191:58"><name pos:start="191:48" pos:end="191:52">entry</name><operator pos:start="191:53" pos:end="191:54">-&gt;</operator><name pos:start="191:55" pos:end="191:58">base</name></name> <operator pos:start="191:60" pos:end="191:60">+</operator> <literal type="number" pos:start="191:62" pos:end="191:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="197:5" pos:end="209:5"><if pos:start="197:5" pos:end="209:5">if <condition pos:start="197:8" pos:end="197:23">(<expr pos:start="197:9" pos:end="197:22"><name pos:start="197:9" pos:end="197:22"><name pos:start="197:9" pos:end="197:11">pci</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:16">w64</name><operator pos:start="197:17" pos:end="197:17">.</operator><name pos:start="197:18" pos:end="197:22">begin</name></name></expr>)</condition> <block pos:start="197:25" pos:end="209:5">{<block_content pos:start="199:9" pos:end="207:61">

        <expr_stmt pos:start="199:9" pos:end="207:61"><expr pos:start="199:9" pos:end="207:60"><call pos:start="199:9" pos:end="207:60"><name pos:start="199:9" pos:end="199:18">aml_append</name><argument_list pos:start="199:19" pos:end="207:60">(<argument pos:start="199:20" pos:end="199:22"><expr pos:start="199:20" pos:end="199:22"><name pos:start="199:20" pos:end="199:22">crs</name></expr></argument>,

            <argument pos:start="201:13" pos:end="207:59"><expr pos:start="201:13" pos:end="207:59"><call pos:start="201:13" pos:end="207:59"><name pos:start="201:13" pos:end="201:28">aml_qword_memory</name><argument_list pos:start="201:29" pos:end="207:59">(<argument pos:start="201:30" pos:end="201:43"><expr pos:start="201:30" pos:end="201:43"><name pos:start="201:30" pos:end="201:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="201:46" pos:end="201:58"><expr pos:start="201:46" pos:end="201:58"><name pos:start="201:46" pos:end="201:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="201:61" pos:end="201:73"><expr pos:start="201:61" pos:end="201:73"><name pos:start="201:61" pos:end="201:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="203:30" pos:end="203:42"><expr pos:start="203:30" pos:end="203:42"><name pos:start="203:30" pos:end="203:42">AML_CACHEABLE</name></expr></argument>, <argument pos:start="203:45" pos:end="203:58"><expr pos:start="203:45" pos:end="203:58"><name pos:start="203:45" pos:end="203:58">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="205:30" pos:end="205:30"><expr pos:start="205:30" pos:end="205:30"><literal type="number" pos:start="205:30" pos:end="205:30">0</literal></expr></argument>, <argument pos:start="205:33" pos:end="205:46"><expr pos:start="205:33" pos:end="205:46"><name pos:start="205:33" pos:end="205:46"><name pos:start="205:33" pos:end="205:35">pci</name><operator pos:start="205:36" pos:end="205:37">-&gt;</operator><name pos:start="205:38" pos:end="205:40">w64</name><operator pos:start="205:41" pos:end="205:41">.</operator><name pos:start="205:42" pos:end="205:46">begin</name></name></expr></argument>, <argument pos:start="205:49" pos:end="205:64"><expr pos:start="205:49" pos:end="205:64"><name pos:start="205:49" pos:end="205:60"><name pos:start="205:49" pos:end="205:51">pci</name><operator pos:start="205:52" pos:end="205:53">-&gt;</operator><name pos:start="205:54" pos:end="205:56">w64</name><operator pos:start="205:57" pos:end="205:57">.</operator><name pos:start="205:58" pos:end="205:60">end</name></name> <operator pos:start="205:62" pos:end="205:62">-</operator> <literal type="number" pos:start="205:64" pos:end="205:64">1</literal></expr></argument>, <argument pos:start="205:67" pos:end="205:67"><expr pos:start="205:67" pos:end="205:67"><literal type="number" pos:start="205:67" pos:end="205:67">0</literal></expr></argument>,

                             <argument pos:start="207:30" pos:end="207:58"><expr pos:start="207:30" pos:end="207:58"><name pos:start="207:30" pos:end="207:41"><name pos:start="207:30" pos:end="207:32">pci</name><operator pos:start="207:33" pos:end="207:34">-&gt;</operator><name pos:start="207:35" pos:end="207:37">w64</name><operator pos:start="207:38" pos:end="207:38">.</operator><name pos:start="207:39" pos:end="207:41">end</name></name> <operator pos:start="207:43" pos:end="207:43">-</operator> <name pos:start="207:45" pos:end="207:58"><name pos:start="207:45" pos:end="207:47">pci</name><operator pos:start="207:48" pos:end="207:49">-&gt;</operator><name pos:start="207:50" pos:end="207:52">w64</name><operator pos:start="207:53" pos:end="207:53">.</operator><name pos:start="207:54" pos:end="207:58">begin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:50"><expr pos:start="211:5" pos:end="211:49"><call pos:start="211:5" pos:end="211:49"><name pos:start="211:5" pos:end="211:14">aml_append</name><argument_list pos:start="211:15" pos:end="211:49">(<argument pos:start="211:16" pos:end="211:20"><expr pos:start="211:16" pos:end="211:20"><name pos:start="211:16" pos:end="211:20">scope</name></expr></argument>, <argument pos:start="211:23" pos:end="211:48"><expr pos:start="211:23" pos:end="211:48"><call pos:start="211:23" pos:end="211:48"><name pos:start="211:23" pos:end="211:35">aml_name_decl</name><argument_list pos:start="211:36" pos:end="211:48">(<argument pos:start="211:37" pos:end="211:42"><expr pos:start="211:37" pos:end="211:42"><literal type="string" pos:start="211:37" pos:end="211:42">"_CRS"</literal></expr></argument>, <argument pos:start="211:45" pos:end="211:47"><expr pos:start="211:45" pos:end="211:47"><name pos:start="211:45" pos:end="211:47">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:38">/* reserve GPE0 block resources */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:29"><expr pos:start="217:5" pos:end="217:28"><name pos:start="217:5" pos:end="217:7">dev</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:28"><name pos:start="217:11" pos:end="217:20">aml_device</name><argument_list pos:start="217:21" pos:end="217:28">(<argument pos:start="217:22" pos:end="217:27"><expr pos:start="217:22" pos:end="217:27"><literal type="string" pos:start="217:22" pos:end="217:27">"GPE0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:66"><expr pos:start="219:5" pos:end="219:65"><call pos:start="219:5" pos:end="219:65"><name pos:start="219:5" pos:end="219:14">aml_append</name><argument_list pos:start="219:15" pos:end="219:65">(<argument pos:start="219:16" pos:end="219:18"><expr pos:start="219:16" pos:end="219:18"><name pos:start="219:16" pos:end="219:18">dev</name></expr></argument>, <argument pos:start="219:21" pos:end="219:64"><expr pos:start="219:21" pos:end="219:64"><call pos:start="219:21" pos:end="219:64"><name pos:start="219:21" pos:end="219:33">aml_name_decl</name><argument_list pos:start="219:34" pos:end="219:64">(<argument pos:start="219:35" pos:end="219:40"><expr pos:start="219:35" pos:end="219:40"><literal type="string" pos:start="219:35" pos:end="219:40">"_HID"</literal></expr></argument>, <argument pos:start="219:43" pos:end="219:63"><expr pos:start="219:43" pos:end="219:63"><call pos:start="219:43" pos:end="219:63"><name pos:start="219:43" pos:end="219:52">aml_string</name><argument_list pos:start="219:53" pos:end="219:63">(<argument pos:start="219:54" pos:end="219:62"><expr pos:start="219:54" pos:end="219:62"><literal type="string" pos:start="219:54" pos:end="219:62">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:73"><expr pos:start="221:5" pos:end="221:72"><call pos:start="221:5" pos:end="221:72"><name pos:start="221:5" pos:end="221:14">aml_append</name><argument_list pos:start="221:15" pos:end="221:72">(<argument pos:start="221:16" pos:end="221:18"><expr pos:start="221:16" pos:end="221:18"><name pos:start="221:16" pos:end="221:18">dev</name></expr></argument>, <argument pos:start="221:21" pos:end="221:71"><expr pos:start="221:21" pos:end="221:71"><call pos:start="221:21" pos:end="221:71"><name pos:start="221:21" pos:end="221:33">aml_name_decl</name><argument_list pos:start="221:34" pos:end="221:71">(<argument pos:start="221:35" pos:end="221:40"><expr pos:start="221:35" pos:end="221:40"><literal type="string" pos:start="221:35" pos:end="221:40">"_UID"</literal></expr></argument>, <argument pos:start="221:43" pos:end="221:70"><expr pos:start="221:43" pos:end="221:70"><call pos:start="221:43" pos:end="221:70"><name pos:start="221:43" pos:end="221:52">aml_string</name><argument_list pos:start="221:53" pos:end="221:70">(<argument pos:start="221:54" pos:end="221:69"><expr pos:start="221:54" pos:end="221:69"><literal type="string" pos:start="221:54" pos:end="221:69">"GPE0 resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="223:5" pos:end="223:64">/* device present, functioning, decoding, not shown in UI */</comment>

    <expr_stmt pos:start="225:5" pos:end="225:57"><expr pos:start="225:5" pos:end="225:56"><call pos:start="225:5" pos:end="225:56"><name pos:start="225:5" pos:end="225:14">aml_append</name><argument_list pos:start="225:15" pos:end="225:56">(<argument pos:start="225:16" pos:end="225:18"><expr pos:start="225:16" pos:end="225:18"><name pos:start="225:16" pos:end="225:18">dev</name></expr></argument>, <argument pos:start="225:21" pos:end="225:55"><expr pos:start="225:21" pos:end="225:55"><call pos:start="225:21" pos:end="225:55"><name pos:start="225:21" pos:end="225:33">aml_name_decl</name><argument_list pos:start="225:34" pos:end="225:55">(<argument pos:start="225:35" pos:end="225:40"><expr pos:start="225:35" pos:end="225:40"><literal type="string" pos:start="225:35" pos:end="225:40">"_STA"</literal></expr></argument>, <argument pos:start="225:43" pos:end="225:54"><expr pos:start="225:43" pos:end="225:54"><call pos:start="225:43" pos:end="225:54"><name pos:start="225:43" pos:end="225:49">aml_int</name><argument_list pos:start="225:50" pos:end="225:54">(<argument pos:start="225:51" pos:end="225:53"><expr pos:start="225:51" pos:end="225:53"><literal type="number" pos:start="225:51" pos:end="225:53">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:34"><expr pos:start="227:5" pos:end="227:33"><name pos:start="227:5" pos:end="227:7">crs</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="227:33"><name pos:start="227:11" pos:end="227:31">aml_resource_template</name><argument_list pos:start="227:32" pos:end="227:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="233:6"><expr pos:start="229:5" pos:end="233:5"><call pos:start="229:5" pos:end="233:5"><name pos:start="229:5" pos:end="229:14">aml_append</name><argument_list pos:start="229:15" pos:end="233:5">(<argument pos:start="229:16" pos:end="229:18"><expr pos:start="229:16" pos:end="229:18"><name pos:start="229:16" pos:end="229:18">crs</name></expr></argument>,

        <argument pos:start="231:9" pos:end="231:77"><expr pos:start="231:9" pos:end="231:77"><call pos:start="231:9" pos:end="231:77"><name pos:start="231:9" pos:end="231:14">aml_io</name><argument_list pos:start="231:15" pos:end="231:77">(<argument pos:start="231:16" pos:end="231:27"><expr pos:start="231:16" pos:end="231:27"><name pos:start="231:16" pos:end="231:27">AML_DECODE16</name></expr></argument>, <argument pos:start="231:30" pos:end="231:41"><expr pos:start="231:30" pos:end="231:41"><name pos:start="231:30" pos:end="231:41"><name pos:start="231:30" pos:end="231:31">pm</name><operator pos:start="231:32" pos:end="231:33">-&gt;</operator><name pos:start="231:34" pos:end="231:41">gpe0_blk</name></name></expr></argument>, <argument pos:start="231:44" pos:end="231:55"><expr pos:start="231:44" pos:end="231:55"><name pos:start="231:44" pos:end="231:55"><name pos:start="231:44" pos:end="231:45">pm</name><operator pos:start="231:46" pos:end="231:47">-&gt;</operator><name pos:start="231:48" pos:end="231:55">gpe0_blk</name></name></expr></argument>, <argument pos:start="231:58" pos:end="231:58"><expr pos:start="231:58" pos:end="231:58"><literal type="number" pos:start="231:58" pos:end="231:58">1</literal></expr></argument>, <argument pos:start="231:61" pos:end="231:76"><expr pos:start="231:61" pos:end="231:76"><name pos:start="231:61" pos:end="231:76"><name pos:start="231:61" pos:end="231:62">pm</name><operator pos:start="231:63" pos:end="231:64">-&gt;</operator><name pos:start="231:65" pos:end="231:76">gpe0_blk_len</name></name></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:48"><expr pos:start="235:5" pos:end="235:47"><call pos:start="235:5" pos:end="235:47"><name pos:start="235:5" pos:end="235:14">aml_append</name><argument_list pos:start="235:15" pos:end="235:47">(<argument pos:start="235:16" pos:end="235:18"><expr pos:start="235:16" pos:end="235:18"><name pos:start="235:16" pos:end="235:18">dev</name></expr></argument>, <argument pos:start="235:21" pos:end="235:46"><expr pos:start="235:21" pos:end="235:46"><call pos:start="235:21" pos:end="235:46"><name pos:start="235:21" pos:end="235:33">aml_name_decl</name><argument_list pos:start="235:34" pos:end="235:46">(<argument pos:start="235:35" pos:end="235:40"><expr pos:start="235:35" pos:end="235:40"><literal type="string" pos:start="235:35" pos:end="235:40">"_CRS"</literal></expr></argument>, <argument pos:start="235:43" pos:end="235:45"><expr pos:start="235:43" pos:end="235:45"><name pos:start="235:43" pos:end="235:45">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:27"><expr pos:start="237:5" pos:end="237:26"><call pos:start="237:5" pos:end="237:26"><name pos:start="237:5" pos:end="237:14">aml_append</name><argument_list pos:start="237:15" pos:end="237:26">(<argument pos:start="237:16" pos:end="237:20"><expr pos:start="237:16" pos:end="237:20"><name pos:start="237:16" pos:end="237:20">scope</name></expr></argument>, <argument pos:start="237:23" pos:end="237:25"><expr pos:start="237:23" pos:end="237:25"><name pos:start="237:23" pos:end="237:25">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="241:5" pos:end="241:38"><expr pos:start="241:5" pos:end="241:37"><call pos:start="241:5" pos:end="241:37"><name pos:start="241:5" pos:end="241:20">g_ptr_array_free</name><argument_list pos:start="241:21" pos:end="241:37">(<argument pos:start="241:22" pos:end="241:30"><expr pos:start="241:22" pos:end="241:30"><name pos:start="241:22" pos:end="241:30">io_ranges</name></expr></argument>, <argument pos:start="241:33" pos:end="241:36"><expr pos:start="241:33" pos:end="241:36"><name pos:start="241:33" pos:end="241:36">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:39"><expr pos:start="243:5" pos:end="243:38"><call pos:start="243:5" pos:end="243:38"><name pos:start="243:5" pos:end="243:20">g_ptr_array_free</name><argument_list pos:start="243:21" pos:end="243:38">(<argument pos:start="243:22" pos:end="243:31"><expr pos:start="243:22" pos:end="243:31"><name pos:start="243:22" pos:end="243:31">mem_ranges</name></expr></argument>, <argument pos:start="243:34" pos:end="243:37"><expr pos:start="243:34" pos:end="243:37"><name pos:start="243:34" pos:end="243:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="247:5" pos:end="247:33">/* reserve PCIHP resources */</comment>

    <if_stmt pos:start="249:5" pos:end="277:5"><if pos:start="249:5" pos:end="277:5">if <condition pos:start="249:8" pos:end="249:25">(<expr pos:start="249:9" pos:end="249:24"><name pos:start="249:9" pos:end="249:24"><name pos:start="249:9" pos:end="249:10">pm</name><operator pos:start="249:11" pos:end="249:12">-&gt;</operator><name pos:start="249:13" pos:end="249:24">pcihp_io_len</name></name></expr>)</condition> <block pos:start="249:27" pos:end="277:5">{<block_content pos:start="251:9" pos:end="275:31">

        <expr_stmt pos:start="251:9" pos:end="251:33"><expr pos:start="251:9" pos:end="251:32"><name pos:start="251:9" pos:end="251:11">dev</name> <operator pos:start="251:13" pos:end="251:13">=</operator> <call pos:start="251:15" pos:end="251:32"><name pos:start="251:15" pos:end="251:24">aml_device</name><argument_list pos:start="251:25" pos:end="251:32">(<argument pos:start="251:26" pos:end="251:31"><expr pos:start="251:26" pos:end="251:31"><literal type="string" pos:start="251:26" pos:end="251:31">"PHPR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:70"><expr pos:start="253:9" pos:end="253:69"><call pos:start="253:9" pos:end="253:69"><name pos:start="253:9" pos:end="253:18">aml_append</name><argument_list pos:start="253:19" pos:end="253:69">(<argument pos:start="253:20" pos:end="253:22"><expr pos:start="253:20" pos:end="253:22"><name pos:start="253:20" pos:end="253:22">dev</name></expr></argument>, <argument pos:start="253:25" pos:end="253:68"><expr pos:start="253:25" pos:end="253:68"><call pos:start="253:25" pos:end="253:68"><name pos:start="253:25" pos:end="253:37">aml_name_decl</name><argument_list pos:start="253:38" pos:end="253:68">(<argument pos:start="253:39" pos:end="253:44"><expr pos:start="253:39" pos:end="253:44"><literal type="string" pos:start="253:39" pos:end="253:44">"_HID"</literal></expr></argument>, <argument pos:start="253:47" pos:end="253:67"><expr pos:start="253:47" pos:end="253:67"><call pos:start="253:47" pos:end="253:67"><name pos:start="253:47" pos:end="253:56">aml_string</name><argument_list pos:start="253:57" pos:end="253:67">(<argument pos:start="253:58" pos:end="253:66"><expr pos:start="253:58" pos:end="253:66"><literal type="string" pos:start="253:58" pos:end="253:66">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="257:72"><expr pos:start="255:9" pos:end="257:71"><call pos:start="255:9" pos:end="257:71"><name pos:start="255:9" pos:end="255:18">aml_append</name><argument_list pos:start="255:19" pos:end="257:71">(<argument pos:start="255:20" pos:end="255:22"><expr pos:start="255:20" pos:end="255:22"><name pos:start="255:20" pos:end="255:22">dev</name></expr></argument>,

            <argument pos:start="257:13" pos:end="257:70"><expr pos:start="257:13" pos:end="257:70"><call pos:start="257:13" pos:end="257:70"><name pos:start="257:13" pos:end="257:25">aml_name_decl</name><argument_list pos:start="257:26" pos:end="257:70">(<argument pos:start="257:27" pos:end="257:32"><expr pos:start="257:27" pos:end="257:32"><literal type="string" pos:start="257:27" pos:end="257:32">"_UID"</literal></expr></argument>, <argument pos:start="257:35" pos:end="257:69"><expr pos:start="257:35" pos:end="257:69"><call pos:start="257:35" pos:end="257:69"><name pos:start="257:35" pos:end="257:44">aml_string</name><argument_list pos:start="257:45" pos:end="257:69">(<argument pos:start="257:46" pos:end="257:68"><expr pos:start="257:46" pos:end="257:68"><literal type="string" pos:start="257:46" pos:end="257:68">"PCI Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="259:9" pos:end="259:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="261:9" pos:end="261:61"><expr pos:start="261:9" pos:end="261:60"><call pos:start="261:9" pos:end="261:60"><name pos:start="261:9" pos:end="261:18">aml_append</name><argument_list pos:start="261:19" pos:end="261:60">(<argument pos:start="261:20" pos:end="261:22"><expr pos:start="261:20" pos:end="261:22"><name pos:start="261:20" pos:end="261:22">dev</name></expr></argument>, <argument pos:start="261:25" pos:end="261:59"><expr pos:start="261:25" pos:end="261:59"><call pos:start="261:25" pos:end="261:59"><name pos:start="261:25" pos:end="261:37">aml_name_decl</name><argument_list pos:start="261:38" pos:end="261:59">(<argument pos:start="261:39" pos:end="261:44"><expr pos:start="261:39" pos:end="261:44"><literal type="string" pos:start="261:39" pos:end="261:44">"_STA"</literal></expr></argument>, <argument pos:start="261:47" pos:end="261:58"><expr pos:start="261:47" pos:end="261:58"><call pos:start="261:47" pos:end="261:58"><name pos:start="261:47" pos:end="261:53">aml_int</name><argument_list pos:start="261:54" pos:end="261:58">(<argument pos:start="261:55" pos:end="261:57"><expr pos:start="261:55" pos:end="261:57"><literal type="number" pos:start="261:55" pos:end="261:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:38"><expr pos:start="263:9" pos:end="263:37"><name pos:start="263:9" pos:end="263:11">crs</name> <operator pos:start="263:13" pos:end="263:13">=</operator> <call pos:start="263:15" pos:end="263:37"><name pos:start="263:15" pos:end="263:35">aml_resource_template</name><argument_list pos:start="263:36" pos:end="263:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="271:10"><expr pos:start="265:9" pos:end="271:9"><call pos:start="265:9" pos:end="271:9"><name pos:start="265:9" pos:end="265:18">aml_append</name><argument_list pos:start="265:19" pos:end="271:9">(<argument pos:start="265:20" pos:end="265:22"><expr pos:start="265:20" pos:end="265:22"><name pos:start="265:20" pos:end="265:22">crs</name></expr></argument>,

            <argument pos:start="267:13" pos:end="269:36"><expr pos:start="267:13" pos:end="269:36"><call pos:start="267:13" pos:end="269:36"><name pos:start="267:13" pos:end="267:18">aml_io</name><argument_list pos:start="267:19" pos:end="269:36">(<argument pos:start="267:20" pos:end="267:31"><expr pos:start="267:20" pos:end="267:31"><name pos:start="267:20" pos:end="267:31">AML_DECODE16</name></expr></argument>, <argument pos:start="267:34" pos:end="267:50"><expr pos:start="267:34" pos:end="267:50"><name pos:start="267:34" pos:end="267:50"><name pos:start="267:34" pos:end="267:35">pm</name><operator pos:start="267:36" pos:end="267:37">-&gt;</operator><name pos:start="267:38" pos:end="267:50">pcihp_io_base</name></name></expr></argument>, <argument pos:start="267:53" pos:end="267:69"><expr pos:start="267:53" pos:end="267:69"><name pos:start="267:53" pos:end="267:69"><name pos:start="267:53" pos:end="267:54">pm</name><operator pos:start="267:55" pos:end="267:56">-&gt;</operator><name pos:start="267:57" pos:end="267:69">pcihp_io_base</name></name></expr></argument>, <argument pos:start="267:72" pos:end="267:72"><expr pos:start="267:72" pos:end="267:72"><literal type="number" pos:start="267:72" pos:end="267:72">1</literal></expr></argument>,

                   <argument pos:start="269:20" pos:end="269:35"><expr pos:start="269:20" pos:end="269:35"><name pos:start="269:20" pos:end="269:35"><name pos:start="269:20" pos:end="269:21">pm</name><operator pos:start="269:22" pos:end="269:23">-&gt;</operator><name pos:start="269:24" pos:end="269:35">pcihp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:52"><expr pos:start="273:9" pos:end="273:51"><call pos:start="273:9" pos:end="273:51"><name pos:start="273:9" pos:end="273:18">aml_append</name><argument_list pos:start="273:19" pos:end="273:51">(<argument pos:start="273:20" pos:end="273:22"><expr pos:start="273:20" pos:end="273:22"><name pos:start="273:20" pos:end="273:22">dev</name></expr></argument>, <argument pos:start="273:25" pos:end="273:50"><expr pos:start="273:25" pos:end="273:50"><call pos:start="273:25" pos:end="273:50"><name pos:start="273:25" pos:end="273:37">aml_name_decl</name><argument_list pos:start="273:38" pos:end="273:50">(<argument pos:start="273:39" pos:end="273:44"><expr pos:start="273:39" pos:end="273:44"><literal type="string" pos:start="273:39" pos:end="273:44">"_CRS"</literal></expr></argument>, <argument pos:start="273:47" pos:end="273:49"><expr pos:start="273:47" pos:end="273:49"><name pos:start="273:47" pos:end="273:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:31"><expr pos:start="275:9" pos:end="275:30"><call pos:start="275:9" pos:end="275:30"><name pos:start="275:9" pos:end="275:18">aml_append</name><argument_list pos:start="275:19" pos:end="275:30">(<argument pos:start="275:20" pos:end="275:24"><expr pos:start="275:20" pos:end="275:24"><name pos:start="275:20" pos:end="275:24">scope</name></expr></argument>, <argument pos:start="275:27" pos:end="275:29"><expr pos:start="275:27" pos:end="275:29"><name pos:start="275:27" pos:end="275:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:28"><expr pos:start="279:5" pos:end="279:27"><call pos:start="279:5" pos:end="279:27"><name pos:start="279:5" pos:end="279:14">aml_append</name><argument_list pos:start="279:15" pos:end="279:27">(<argument pos:start="279:16" pos:end="279:19"><expr pos:start="279:16" pos:end="279:19"><name pos:start="279:16" pos:end="279:19">ssdt</name></expr></argument>, <argument pos:start="279:22" pos:end="279:26"><expr pos:start="279:22" pos:end="279:26"><name pos:start="279:22" pos:end="279:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="283:5" pos:end="283:55">/*  create S3_ / S4_ / S5_ packages if necessary */</comment>

    <expr_stmt pos:start="285:5" pos:end="285:28"><expr pos:start="285:5" pos:end="285:27"><name pos:start="285:5" pos:end="285:9">scope</name> <operator pos:start="285:11" pos:end="285:11">=</operator> <call pos:start="285:13" pos:end="285:27"><name pos:start="285:13" pos:end="285:21">aml_scope</name><argument_list pos:start="285:22" pos:end="285:27">(<argument pos:start="285:23" pos:end="285:26"><expr pos:start="285:23" pos:end="285:26"><literal type="string" pos:start="285:23" pos:end="285:26">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="287:5" pos:end="301:5"><if pos:start="287:5" pos:end="301:5">if <condition pos:start="287:8" pos:end="287:25">(<expr pos:start="287:9" pos:end="287:24"><operator pos:start="287:9" pos:end="287:9">!</operator><name pos:start="287:10" pos:end="287:24"><name pos:start="287:10" pos:end="287:11">pm</name><operator pos:start="287:12" pos:end="287:13">-&gt;</operator><name pos:start="287:14" pos:end="287:24">s3_disabled</name></name></expr>)</condition> <block pos:start="287:27" pos:end="301:5">{<block_content pos:start="289:9" pos:end="299:53">

        <expr_stmt pos:start="289:9" pos:end="289:29"><expr pos:start="289:9" pos:end="289:28"><name pos:start="289:9" pos:end="289:11">pkg</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <call pos:start="289:15" pos:end="289:28"><name pos:start="289:15" pos:end="289:25">aml_package</name><argument_list pos:start="289:26" pos:end="289:28">(<argument pos:start="289:27" pos:end="289:27"><expr pos:start="289:27" pos:end="289:27"><literal type="number" pos:start="289:27" pos:end="289:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:36"><expr pos:start="291:9" pos:end="291:35"><call pos:start="291:9" pos:end="291:35"><name pos:start="291:9" pos:end="291:18">aml_append</name><argument_list pos:start="291:19" pos:end="291:35">(<argument pos:start="291:20" pos:end="291:22"><expr pos:start="291:20" pos:end="291:22"><name pos:start="291:20" pos:end="291:22">pkg</name></expr></argument>, <argument pos:start="291:25" pos:end="291:34"><expr pos:start="291:25" pos:end="291:34"><call pos:start="291:25" pos:end="291:34"><name pos:start="291:25" pos:end="291:31">aml_int</name><argument_list pos:start="291:32" pos:end="291:34">(<argument pos:start="291:33" pos:end="291:33"><expr pos:start="291:33" pos:end="291:33"><literal type="number" pos:start="291:33" pos:end="291:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="291:38" pos:end="291:59">/* PM1a_CNT.SLP_TYP */</comment>

        <expr_stmt pos:start="293:9" pos:end="293:36"><expr pos:start="293:9" pos:end="293:35"><call pos:start="293:9" pos:end="293:35"><name pos:start="293:9" pos:end="293:18">aml_append</name><argument_list pos:start="293:19" pos:end="293:35">(<argument pos:start="293:20" pos:end="293:22"><expr pos:start="293:20" pos:end="293:22"><name pos:start="293:20" pos:end="293:22">pkg</name></expr></argument>, <argument pos:start="293:25" pos:end="293:34"><expr pos:start="293:25" pos:end="293:34"><call pos:start="293:25" pos:end="293:34"><name pos:start="293:25" pos:end="293:31">aml_int</name><argument_list pos:start="293:32" pos:end="293:34">(<argument pos:start="293:33" pos:end="293:33"><expr pos:start="293:33" pos:end="293:33"><literal type="number" pos:start="293:33" pos:end="293:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="293:38" pos:end="293:77">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="295:9" pos:end="295:36"><expr pos:start="295:9" pos:end="295:35"><call pos:start="295:9" pos:end="295:35"><name pos:start="295:9" pos:end="295:18">aml_append</name><argument_list pos:start="295:19" pos:end="295:35">(<argument pos:start="295:20" pos:end="295:22"><expr pos:start="295:20" pos:end="295:22"><name pos:start="295:20" pos:end="295:22">pkg</name></expr></argument>, <argument pos:start="295:25" pos:end="295:34"><expr pos:start="295:25" pos:end="295:34"><call pos:start="295:25" pos:end="295:34"><name pos:start="295:25" pos:end="295:31">aml_int</name><argument_list pos:start="295:32" pos:end="295:34">(<argument pos:start="295:33" pos:end="295:33"><expr pos:start="295:33" pos:end="295:33"><literal type="number" pos:start="295:33" pos:end="295:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="295:38" pos:end="295:51">/* reserved */</comment>

        <expr_stmt pos:start="297:9" pos:end="297:36"><expr pos:start="297:9" pos:end="297:35"><call pos:start="297:9" pos:end="297:35"><name pos:start="297:9" pos:end="297:18">aml_append</name><argument_list pos:start="297:19" pos:end="297:35">(<argument pos:start="297:20" pos:end="297:22"><expr pos:start="297:20" pos:end="297:22"><name pos:start="297:20" pos:end="297:22">pkg</name></expr></argument>, <argument pos:start="297:25" pos:end="297:34"><expr pos:start="297:25" pos:end="297:34"><call pos:start="297:25" pos:end="297:34"><name pos:start="297:25" pos:end="297:31">aml_int</name><argument_list pos:start="297:32" pos:end="297:34">(<argument pos:start="297:33" pos:end="297:33"><expr pos:start="297:33" pos:end="297:33"><literal type="number" pos:start="297:33" pos:end="297:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="297:38" pos:end="297:51">/* reserved */</comment>

        <expr_stmt pos:start="299:9" pos:end="299:53"><expr pos:start="299:9" pos:end="299:52"><call pos:start="299:9" pos:end="299:52"><name pos:start="299:9" pos:end="299:18">aml_append</name><argument_list pos:start="299:19" pos:end="299:52">(<argument pos:start="299:20" pos:end="299:24"><expr pos:start="299:20" pos:end="299:24"><name pos:start="299:20" pos:end="299:24">scope</name></expr></argument>, <argument pos:start="299:27" pos:end="299:51"><expr pos:start="299:27" pos:end="299:51"><call pos:start="299:27" pos:end="299:51"><name pos:start="299:27" pos:end="299:39">aml_name_decl</name><argument_list pos:start="299:40" pos:end="299:51">(<argument pos:start="299:41" pos:end="299:45"><expr pos:start="299:41" pos:end="299:45"><literal type="string" pos:start="299:41" pos:end="299:45">"_S3"</literal></expr></argument>, <argument pos:start="299:48" pos:end="299:50"><expr pos:start="299:48" pos:end="299:50"><name pos:start="299:48" pos:end="299:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="305:5" pos:end="321:5"><if pos:start="305:5" pos:end="321:5">if <condition pos:start="305:8" pos:end="305:25">(<expr pos:start="305:9" pos:end="305:24"><operator pos:start="305:9" pos:end="305:9">!</operator><name pos:start="305:10" pos:end="305:24"><name pos:start="305:10" pos:end="305:11">pm</name><operator pos:start="305:12" pos:end="305:13">-&gt;</operator><name pos:start="305:14" pos:end="305:24">s4_disabled</name></name></expr>)</condition> <block pos:start="305:27" pos:end="321:5">{<block_content pos:start="307:9" pos:end="319:53">

        <expr_stmt pos:start="307:9" pos:end="307:29"><expr pos:start="307:9" pos:end="307:28"><name pos:start="307:9" pos:end="307:11">pkg</name> <operator pos:start="307:13" pos:end="307:13">=</operator> <call pos:start="307:15" pos:end="307:28"><name pos:start="307:15" pos:end="307:25">aml_package</name><argument_list pos:start="307:26" pos:end="307:28">(<argument pos:start="307:27" pos:end="307:27"><expr pos:start="307:27" pos:end="307:27"><literal type="number" pos:start="307:27" pos:end="307:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:45"><expr pos:start="309:9" pos:end="309:44"><call pos:start="309:9" pos:end="309:44"><name pos:start="309:9" pos:end="309:18">aml_append</name><argument_list pos:start="309:19" pos:end="309:44">(<argument pos:start="309:20" pos:end="309:22"><expr pos:start="309:20" pos:end="309:22"><name pos:start="309:20" pos:end="309:22">pkg</name></expr></argument>, <argument pos:start="309:25" pos:end="309:43"><expr pos:start="309:25" pos:end="309:43"><call pos:start="309:25" pos:end="309:43"><name pos:start="309:25" pos:end="309:31">aml_int</name><argument_list pos:start="309:32" pos:end="309:43">(<argument pos:start="309:33" pos:end="309:42"><expr pos:start="309:33" pos:end="309:42"><name pos:start="309:33" pos:end="309:42"><name pos:start="309:33" pos:end="309:34">pm</name><operator pos:start="309:35" pos:end="309:36">-&gt;</operator><name pos:start="309:37" pos:end="309:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="309:47" pos:end="309:68">/* PM1a_CNT.SLP_TYP */</comment>

        <comment type="block" pos:start="311:9" pos:end="311:48">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="313:9" pos:end="313:45"><expr pos:start="313:9" pos:end="313:44"><call pos:start="313:9" pos:end="313:44"><name pos:start="313:9" pos:end="313:18">aml_append</name><argument_list pos:start="313:19" pos:end="313:44">(<argument pos:start="313:20" pos:end="313:22"><expr pos:start="313:20" pos:end="313:22"><name pos:start="313:20" pos:end="313:22">pkg</name></expr></argument>, <argument pos:start="313:25" pos:end="313:43"><expr pos:start="313:25" pos:end="313:43"><call pos:start="313:25" pos:end="313:43"><name pos:start="313:25" pos:end="313:31">aml_int</name><argument_list pos:start="313:32" pos:end="313:43">(<argument pos:start="313:33" pos:end="313:42"><expr pos:start="313:33" pos:end="313:42"><name pos:start="313:33" pos:end="313:42"><name pos:start="313:33" pos:end="313:34">pm</name><operator pos:start="313:35" pos:end="313:36">-&gt;</operator><name pos:start="313:37" pos:end="313:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:36"><expr pos:start="315:9" pos:end="315:35"><call pos:start="315:9" pos:end="315:35"><name pos:start="315:9" pos:end="315:18">aml_append</name><argument_list pos:start="315:19" pos:end="315:35">(<argument pos:start="315:20" pos:end="315:22"><expr pos:start="315:20" pos:end="315:22"><name pos:start="315:20" pos:end="315:22">pkg</name></expr></argument>, <argument pos:start="315:25" pos:end="315:34"><expr pos:start="315:25" pos:end="315:34"><call pos:start="315:25" pos:end="315:34"><name pos:start="315:25" pos:end="315:31">aml_int</name><argument_list pos:start="315:32" pos:end="315:34">(<argument pos:start="315:33" pos:end="315:33"><expr pos:start="315:33" pos:end="315:33"><literal type="number" pos:start="315:33" pos:end="315:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="315:38" pos:end="315:51">/* reserved */</comment>

        <expr_stmt pos:start="317:9" pos:end="317:36"><expr pos:start="317:9" pos:end="317:35"><call pos:start="317:9" pos:end="317:35"><name pos:start="317:9" pos:end="317:18">aml_append</name><argument_list pos:start="317:19" pos:end="317:35">(<argument pos:start="317:20" pos:end="317:22"><expr pos:start="317:20" pos:end="317:22"><name pos:start="317:20" pos:end="317:22">pkg</name></expr></argument>, <argument pos:start="317:25" pos:end="317:34"><expr pos:start="317:25" pos:end="317:34"><call pos:start="317:25" pos:end="317:34"><name pos:start="317:25" pos:end="317:31">aml_int</name><argument_list pos:start="317:32" pos:end="317:34">(<argument pos:start="317:33" pos:end="317:33"><expr pos:start="317:33" pos:end="317:33"><literal type="number" pos:start="317:33" pos:end="317:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="317:38" pos:end="317:51">/* reserved */</comment>

        <expr_stmt pos:start="319:9" pos:end="319:53"><expr pos:start="319:9" pos:end="319:52"><call pos:start="319:9" pos:end="319:52"><name pos:start="319:9" pos:end="319:18">aml_append</name><argument_list pos:start="319:19" pos:end="319:52">(<argument pos:start="319:20" pos:end="319:24"><expr pos:start="319:20" pos:end="319:24"><name pos:start="319:20" pos:end="319:24">scope</name></expr></argument>, <argument pos:start="319:27" pos:end="319:51"><expr pos:start="319:27" pos:end="319:51"><call pos:start="319:27" pos:end="319:51"><name pos:start="319:27" pos:end="319:39">aml_name_decl</name><argument_list pos:start="319:40" pos:end="319:51">(<argument pos:start="319:41" pos:end="319:45"><expr pos:start="319:41" pos:end="319:45"><literal type="string" pos:start="319:41" pos:end="319:45">"_S4"</literal></expr></argument>, <argument pos:start="319:48" pos:end="319:50"><expr pos:start="319:48" pos:end="319:50"><name pos:start="319:48" pos:end="319:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="325:5" pos:end="325:25"><expr pos:start="325:5" pos:end="325:24"><name pos:start="325:5" pos:end="325:7">pkg</name> <operator pos:start="325:9" pos:end="325:9">=</operator> <call pos:start="325:11" pos:end="325:24"><name pos:start="325:11" pos:end="325:21">aml_package</name><argument_list pos:start="325:22" pos:end="325:24">(<argument pos:start="325:23" pos:end="325:23"><expr pos:start="325:23" pos:end="325:23"><literal type="number" pos:start="325:23" pos:end="325:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:32"><expr pos:start="327:5" pos:end="327:31"><call pos:start="327:5" pos:end="327:31"><name pos:start="327:5" pos:end="327:14">aml_append</name><argument_list pos:start="327:15" pos:end="327:31">(<argument pos:start="327:16" pos:end="327:18"><expr pos:start="327:16" pos:end="327:18"><name pos:start="327:16" pos:end="327:18">pkg</name></expr></argument>, <argument pos:start="327:21" pos:end="327:30"><expr pos:start="327:21" pos:end="327:30"><call pos:start="327:21" pos:end="327:30"><name pos:start="327:21" pos:end="327:27">aml_int</name><argument_list pos:start="327:28" pos:end="327:30">(<argument pos:start="327:29" pos:end="327:29"><expr pos:start="327:29" pos:end="327:29"><literal type="number" pos:start="327:29" pos:end="327:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="327:34" pos:end="327:55">/* PM1a_CNT.SLP_TYP */</comment>

    <expr_stmt pos:start="329:5" pos:end="329:32"><expr pos:start="329:5" pos:end="329:31"><call pos:start="329:5" pos:end="329:31"><name pos:start="329:5" pos:end="329:14">aml_append</name><argument_list pos:start="329:15" pos:end="329:31">(<argument pos:start="329:16" pos:end="329:18"><expr pos:start="329:16" pos:end="329:18"><name pos:start="329:16" pos:end="329:18">pkg</name></expr></argument>, <argument pos:start="329:21" pos:end="329:30"><expr pos:start="329:21" pos:end="329:30"><call pos:start="329:21" pos:end="329:30"><name pos:start="329:21" pos:end="329:27">aml_int</name><argument_list pos:start="329:28" pos:end="329:30">(<argument pos:start="329:29" pos:end="329:29"><expr pos:start="329:29" pos:end="329:29"><literal type="number" pos:start="329:29" pos:end="329:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="329:34" pos:end="329:65">/* PM1b_CNT.SLP_TYP not impl. */</comment>

    <expr_stmt pos:start="331:5" pos:end="331:32"><expr pos:start="331:5" pos:end="331:31"><call pos:start="331:5" pos:end="331:31"><name pos:start="331:5" pos:end="331:14">aml_append</name><argument_list pos:start="331:15" pos:end="331:31">(<argument pos:start="331:16" pos:end="331:18"><expr pos:start="331:16" pos:end="331:18"><name pos:start="331:16" pos:end="331:18">pkg</name></expr></argument>, <argument pos:start="331:21" pos:end="331:30"><expr pos:start="331:21" pos:end="331:30"><call pos:start="331:21" pos:end="331:30"><name pos:start="331:21" pos:end="331:27">aml_int</name><argument_list pos:start="331:28" pos:end="331:30">(<argument pos:start="331:29" pos:end="331:29"><expr pos:start="331:29" pos:end="331:29"><literal type="number" pos:start="331:29" pos:end="331:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="331:34" pos:end="331:47">/* reserved */</comment>

    <expr_stmt pos:start="333:5" pos:end="333:32"><expr pos:start="333:5" pos:end="333:31"><call pos:start="333:5" pos:end="333:31"><name pos:start="333:5" pos:end="333:14">aml_append</name><argument_list pos:start="333:15" pos:end="333:31">(<argument pos:start="333:16" pos:end="333:18"><expr pos:start="333:16" pos:end="333:18"><name pos:start="333:16" pos:end="333:18">pkg</name></expr></argument>, <argument pos:start="333:21" pos:end="333:30"><expr pos:start="333:21" pos:end="333:30"><call pos:start="333:21" pos:end="333:30"><name pos:start="333:21" pos:end="333:27">aml_int</name><argument_list pos:start="333:28" pos:end="333:30">(<argument pos:start="333:29" pos:end="333:29"><expr pos:start="333:29" pos:end="333:29"><literal type="number" pos:start="333:29" pos:end="333:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="333:34" pos:end="333:47">/* reserved */</comment>

    <expr_stmt pos:start="335:5" pos:end="335:49"><expr pos:start="335:5" pos:end="335:48"><call pos:start="335:5" pos:end="335:48"><name pos:start="335:5" pos:end="335:14">aml_append</name><argument_list pos:start="335:15" pos:end="335:48">(<argument pos:start="335:16" pos:end="335:20"><expr pos:start="335:16" pos:end="335:20"><name pos:start="335:16" pos:end="335:20">scope</name></expr></argument>, <argument pos:start="335:23" pos:end="335:47"><expr pos:start="335:23" pos:end="335:47"><call pos:start="335:23" pos:end="335:47"><name pos:start="335:23" pos:end="335:35">aml_name_decl</name><argument_list pos:start="335:36" pos:end="335:47">(<argument pos:start="335:37" pos:end="335:41"><expr pos:start="335:37" pos:end="335:41"><literal type="string" pos:start="335:37" pos:end="335:41">"_S5"</literal></expr></argument>, <argument pos:start="335:44" pos:end="335:46"><expr pos:start="335:44" pos:end="335:46"><name pos:start="335:44" pos:end="335:46">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="337:5" pos:end="337:28"><expr pos:start="337:5" pos:end="337:27"><call pos:start="337:5" pos:end="337:27"><name pos:start="337:5" pos:end="337:14">aml_append</name><argument_list pos:start="337:15" pos:end="337:27">(<argument pos:start="337:16" pos:end="337:19"><expr pos:start="337:16" pos:end="337:19"><name pos:start="337:16" pos:end="337:19">ssdt</name></expr></argument>, <argument pos:start="337:22" pos:end="337:26"><expr pos:start="337:22" pos:end="337:26"><name pos:start="337:22" pos:end="337:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="341:5" pos:end="377:5"><if pos:start="341:5" pos:end="377:5">if <condition pos:start="341:8" pos:end="341:31">(<expr pos:start="341:9" pos:end="341:30"><name pos:start="341:9" pos:end="341:30"><name pos:start="341:9" pos:end="341:12">misc</name><operator pos:start="341:13" pos:end="341:14">-&gt;</operator><name pos:start="341:15" pos:end="341:30">applesmc_io_base</name></name></expr>)</condition> <block pos:start="341:33" pos:end="377:5">{<block_content pos:start="343:9" pos:end="375:32">

        <expr_stmt pos:start="343:9" pos:end="343:44"><expr pos:start="343:9" pos:end="343:43"><name pos:start="343:9" pos:end="343:13">scope</name> <operator pos:start="343:15" pos:end="343:15">=</operator> <call pos:start="343:17" pos:end="343:43"><name pos:start="343:17" pos:end="343:25">aml_scope</name><argument_list pos:start="343:26" pos:end="343:43">(<argument pos:start="343:27" pos:end="343:42"><expr pos:start="343:27" pos:end="343:42"><literal type="string" pos:start="343:27" pos:end="343:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:32"><expr pos:start="345:9" pos:end="345:31"><name pos:start="345:9" pos:end="345:11">dev</name> <operator pos:start="345:13" pos:end="345:13">=</operator> <call pos:start="345:15" pos:end="345:31"><name pos:start="345:15" pos:end="345:24">aml_device</name><argument_list pos:start="345:25" pos:end="345:31">(<argument pos:start="345:26" pos:end="345:30"><expr pos:start="345:26" pos:end="345:30"><literal type="string" pos:start="345:26" pos:end="345:30">"SMC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="349:9" pos:end="349:70"><expr pos:start="349:9" pos:end="349:69"><call pos:start="349:9" pos:end="349:69"><name pos:start="349:9" pos:end="349:18">aml_append</name><argument_list pos:start="349:19" pos:end="349:69">(<argument pos:start="349:20" pos:end="349:22"><expr pos:start="349:20" pos:end="349:22"><name pos:start="349:20" pos:end="349:22">dev</name></expr></argument>, <argument pos:start="349:25" pos:end="349:68"><expr pos:start="349:25" pos:end="349:68"><call pos:start="349:25" pos:end="349:68"><name pos:start="349:25" pos:end="349:37">aml_name_decl</name><argument_list pos:start="349:38" pos:end="349:68">(<argument pos:start="349:39" pos:end="349:44"><expr pos:start="349:39" pos:end="349:44"><literal type="string" pos:start="349:39" pos:end="349:44">"_HID"</literal></expr></argument>, <argument pos:start="349:47" pos:end="349:67"><expr pos:start="349:47" pos:end="349:67"><call pos:start="349:47" pos:end="349:67"><name pos:start="349:47" pos:end="349:56">aml_eisaid</name><argument_list pos:start="349:57" pos:end="349:67">(<argument pos:start="349:58" pos:end="349:66"><expr pos:start="349:58" pos:end="349:66"><literal type="string" pos:start="349:58" pos:end="349:66">"APP0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="351:9" pos:end="351:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="353:9" pos:end="353:61"><expr pos:start="353:9" pos:end="353:60"><call pos:start="353:9" pos:end="353:60"><name pos:start="353:9" pos:end="353:18">aml_append</name><argument_list pos:start="353:19" pos:end="353:60">(<argument pos:start="353:20" pos:end="353:22"><expr pos:start="353:20" pos:end="353:22"><name pos:start="353:20" pos:end="353:22">dev</name></expr></argument>, <argument pos:start="353:25" pos:end="353:59"><expr pos:start="353:25" pos:end="353:59"><call pos:start="353:25" pos:end="353:59"><name pos:start="353:25" pos:end="353:37">aml_name_decl</name><argument_list pos:start="353:38" pos:end="353:59">(<argument pos:start="353:39" pos:end="353:44"><expr pos:start="353:39" pos:end="353:44"><literal type="string" pos:start="353:39" pos:end="353:44">"_STA"</literal></expr></argument>, <argument pos:start="353:47" pos:end="353:58"><expr pos:start="353:47" pos:end="353:58"><call pos:start="353:47" pos:end="353:58"><name pos:start="353:47" pos:end="353:53">aml_int</name><argument_list pos:start="353:54" pos:end="353:58">(<argument pos:start="353:55" pos:end="353:57"><expr pos:start="353:55" pos:end="353:57"><literal type="number" pos:start="353:55" pos:end="353:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="357:9" pos:end="357:38"><expr pos:start="357:9" pos:end="357:37"><name pos:start="357:9" pos:end="357:11">crs</name> <operator pos:start="357:13" pos:end="357:13">=</operator> <call pos:start="357:15" pos:end="357:37"><name pos:start="357:15" pos:end="357:35">aml_resource_template</name><argument_list pos:start="357:36" pos:end="357:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="365:10"><expr pos:start="359:9" pos:end="365:9"><call pos:start="359:9" pos:end="365:9"><name pos:start="359:9" pos:end="359:18">aml_append</name><argument_list pos:start="359:19" pos:end="365:9">(<argument pos:start="359:20" pos:end="359:22"><expr pos:start="359:20" pos:end="359:22"><name pos:start="359:20" pos:end="359:22">crs</name></expr></argument>,

            <argument pos:start="361:13" pos:end="363:50"><expr pos:start="361:13" pos:end="363:50"><call pos:start="361:13" pos:end="363:50"><name pos:start="361:13" pos:end="361:18">aml_io</name><argument_list pos:start="361:19" pos:end="363:50">(<argument pos:start="361:20" pos:end="361:31"><expr pos:start="361:20" pos:end="361:31"><name pos:start="361:20" pos:end="361:31">AML_DECODE16</name></expr></argument>, <argument pos:start="361:34" pos:end="361:55"><expr pos:start="361:34" pos:end="361:55"><name pos:start="361:34" pos:end="361:55"><name pos:start="361:34" pos:end="361:37">misc</name><operator pos:start="361:38" pos:end="361:39">-&gt;</operator><name pos:start="361:40" pos:end="361:55">applesmc_io_base</name></name></expr></argument>, <argument pos:start="361:58" pos:end="361:79"><expr pos:start="361:58" pos:end="361:79"><name pos:start="361:58" pos:end="361:79"><name pos:start="361:58" pos:end="361:61">misc</name><operator pos:start="361:62" pos:end="361:63">-&gt;</operator><name pos:start="361:64" pos:end="361:79">applesmc_io_base</name></name></expr></argument>,

                   <argument pos:start="363:20" pos:end="363:23"><expr pos:start="363:20" pos:end="363:23"><literal type="number" pos:start="363:20" pos:end="363:23">0x01</literal></expr></argument>, <argument pos:start="363:26" pos:end="363:49"><expr pos:start="363:26" pos:end="363:49"><name pos:start="363:26" pos:end="363:49">APPLESMC_MAX_DATA_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:45"><expr pos:start="367:9" pos:end="367:44"><call pos:start="367:9" pos:end="367:44"><name pos:start="367:9" pos:end="367:18">aml_append</name><argument_list pos:start="367:19" pos:end="367:44">(<argument pos:start="367:20" pos:end="367:22"><expr pos:start="367:20" pos:end="367:22"><name pos:start="367:20" pos:end="367:22">crs</name></expr></argument>, <argument pos:start="367:25" pos:end="367:43"><expr pos:start="367:25" pos:end="367:43"><call pos:start="367:25" pos:end="367:43"><name pos:start="367:25" pos:end="367:40">aml_irq_no_flags</name><argument_list pos:start="367:41" pos:end="367:43">(<argument pos:start="367:42" pos:end="367:42"><expr pos:start="367:42" pos:end="367:42"><literal type="number" pos:start="367:42" pos:end="367:42">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:52"><expr pos:start="369:9" pos:end="369:51"><call pos:start="369:9" pos:end="369:51"><name pos:start="369:9" pos:end="369:18">aml_append</name><argument_list pos:start="369:19" pos:end="369:51">(<argument pos:start="369:20" pos:end="369:22"><expr pos:start="369:20" pos:end="369:22"><name pos:start="369:20" pos:end="369:22">dev</name></expr></argument>, <argument pos:start="369:25" pos:end="369:50"><expr pos:start="369:25" pos:end="369:50"><call pos:start="369:25" pos:end="369:50"><name pos:start="369:25" pos:end="369:37">aml_name_decl</name><argument_list pos:start="369:38" pos:end="369:50">(<argument pos:start="369:39" pos:end="369:44"><expr pos:start="369:39" pos:end="369:44"><literal type="string" pos:start="369:39" pos:end="369:44">"_CRS"</literal></expr></argument>, <argument pos:start="369:47" pos:end="369:49"><expr pos:start="369:47" pos:end="369:49"><name pos:start="369:47" pos:end="369:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="373:9" pos:end="373:31"><expr pos:start="373:9" pos:end="373:30"><call pos:start="373:9" pos:end="373:30"><name pos:start="373:9" pos:end="373:18">aml_append</name><argument_list pos:start="373:19" pos:end="373:30">(<argument pos:start="373:20" pos:end="373:24"><expr pos:start="373:20" pos:end="373:24"><name pos:start="373:20" pos:end="373:24">scope</name></expr></argument>, <argument pos:start="373:27" pos:end="373:29"><expr pos:start="373:27" pos:end="373:29"><name pos:start="373:27" pos:end="373:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:32"><expr pos:start="375:9" pos:end="375:31"><call pos:start="375:9" pos:end="375:31"><name pos:start="375:9" pos:end="375:18">aml_append</name><argument_list pos:start="375:19" pos:end="375:31">(<argument pos:start="375:20" pos:end="375:23"><expr pos:start="375:20" pos:end="375:23"><name pos:start="375:20" pos:end="375:23">ssdt</name></expr></argument>, <argument pos:start="375:26" pos:end="375:30"><expr pos:start="375:26" pos:end="375:30"><name pos:start="375:26" pos:end="375:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="381:5" pos:end="445:5"><if pos:start="381:5" pos:end="445:5">if <condition pos:start="381:8" pos:end="381:27">(<expr pos:start="381:9" pos:end="381:26"><name pos:start="381:9" pos:end="381:26"><name pos:start="381:9" pos:end="381:12">misc</name><operator pos:start="381:13" pos:end="381:14">-&gt;</operator><name pos:start="381:15" pos:end="381:26">pvpanic_port</name></name></expr>)</condition> <block pos:start="381:29" pos:end="445:5">{<block_content pos:start="383:9" pos:end="443:32">

        <expr_stmt pos:start="383:9" pos:end="383:44"><expr pos:start="383:9" pos:end="383:43"><name pos:start="383:9" pos:end="383:13">scope</name> <operator pos:start="383:15" pos:end="383:15">=</operator> <call pos:start="383:17" pos:end="383:43"><name pos:start="383:17" pos:end="383:25">aml_scope</name><argument_list pos:start="383:26" pos:end="383:43">(<argument pos:start="383:27" pos:end="383:42"><expr pos:start="383:27" pos:end="383:42"><literal type="string" pos:start="383:27" pos:end="383:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="387:9" pos:end="387:33"><expr pos:start="387:9" pos:end="387:32"><name pos:start="387:9" pos:end="387:11">dev</name> <operator pos:start="387:13" pos:end="387:13">=</operator> <call pos:start="387:15" pos:end="387:32"><name pos:start="387:15" pos:end="387:24">aml_device</name><argument_list pos:start="387:25" pos:end="387:32">(<argument pos:start="387:26" pos:end="387:31"><expr pos:start="387:26" pos:end="387:31"><literal type="string" pos:start="387:26" pos:end="387:31">"PEVT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:71"><expr pos:start="389:9" pos:end="389:70"><call pos:start="389:9" pos:end="389:70"><name pos:start="389:9" pos:end="389:18">aml_append</name><argument_list pos:start="389:19" pos:end="389:70">(<argument pos:start="389:20" pos:end="389:22"><expr pos:start="389:20" pos:end="389:22"><name pos:start="389:20" pos:end="389:22">dev</name></expr></argument>, <argument pos:start="389:25" pos:end="389:69"><expr pos:start="389:25" pos:end="389:69"><call pos:start="389:25" pos:end="389:69"><name pos:start="389:25" pos:end="389:37">aml_name_decl</name><argument_list pos:start="389:38" pos:end="389:69">(<argument pos:start="389:39" pos:end="389:44"><expr pos:start="389:39" pos:end="389:44"><literal type="string" pos:start="389:39" pos:end="389:44">"_HID"</literal></expr></argument>, <argument pos:start="389:47" pos:end="389:68"><expr pos:start="389:47" pos:end="389:68"><call pos:start="389:47" pos:end="389:68"><name pos:start="389:47" pos:end="389:56">aml_string</name><argument_list pos:start="389:57" pos:end="389:68">(<argument pos:start="389:58" pos:end="389:67"><expr pos:start="389:58" pos:end="389:67"><literal type="string" pos:start="389:58" pos:end="389:67">"QEMU0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="393:9" pos:end="393:38"><expr pos:start="393:9" pos:end="393:37"><name pos:start="393:9" pos:end="393:11">crs</name> <operator pos:start="393:13" pos:end="393:13">=</operator> <call pos:start="393:15" pos:end="393:37"><name pos:start="393:15" pos:end="393:35">aml_resource_template</name><argument_list pos:start="393:36" pos:end="393:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="399:10"><expr pos:start="395:9" pos:end="399:9"><call pos:start="395:9" pos:end="399:9"><name pos:start="395:9" pos:end="395:18">aml_append</name><argument_list pos:start="395:19" pos:end="399:9">(<argument pos:start="395:20" pos:end="395:22"><expr pos:start="395:20" pos:end="395:22"><name pos:start="395:20" pos:end="395:22">crs</name></expr></argument>,

            <argument pos:start="397:13" pos:end="397:78"><expr pos:start="397:13" pos:end="397:78"><call pos:start="397:13" pos:end="397:78"><name pos:start="397:13" pos:end="397:18">aml_io</name><argument_list pos:start="397:19" pos:end="397:78">(<argument pos:start="397:20" pos:end="397:31"><expr pos:start="397:20" pos:end="397:31"><name pos:start="397:20" pos:end="397:31">AML_DECODE16</name></expr></argument>, <argument pos:start="397:34" pos:end="397:51"><expr pos:start="397:34" pos:end="397:51"><name pos:start="397:34" pos:end="397:51"><name pos:start="397:34" pos:end="397:37">misc</name><operator pos:start="397:38" pos:end="397:39">-&gt;</operator><name pos:start="397:40" pos:end="397:51">pvpanic_port</name></name></expr></argument>, <argument pos:start="397:54" pos:end="397:71"><expr pos:start="397:54" pos:end="397:71"><name pos:start="397:54" pos:end="397:71"><name pos:start="397:54" pos:end="397:57">misc</name><operator pos:start="397:58" pos:end="397:59">-&gt;</operator><name pos:start="397:60" pos:end="397:71">pvpanic_port</name></name></expr></argument>, <argument pos:start="397:74" pos:end="397:74"><expr pos:start="397:74" pos:end="397:74"><literal type="number" pos:start="397:74" pos:end="397:74">1</literal></expr></argument>, <argument pos:start="397:77" pos:end="397:77"><expr pos:start="397:77" pos:end="397:77"><literal type="number" pos:start="397:77" pos:end="397:77">1</literal></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:52"><expr pos:start="401:9" pos:end="401:51"><call pos:start="401:9" pos:end="401:51"><name pos:start="401:9" pos:end="401:18">aml_append</name><argument_list pos:start="401:19" pos:end="401:51">(<argument pos:start="401:20" pos:end="401:22"><expr pos:start="401:20" pos:end="401:22"><name pos:start="401:20" pos:end="401:22">dev</name></expr></argument>, <argument pos:start="401:25" pos:end="401:50"><expr pos:start="401:25" pos:end="401:50"><call pos:start="401:25" pos:end="401:50"><name pos:start="401:25" pos:end="401:37">aml_name_decl</name><argument_list pos:start="401:38" pos:end="401:50">(<argument pos:start="401:39" pos:end="401:44"><expr pos:start="401:39" pos:end="401:44"><literal type="string" pos:start="401:39" pos:end="401:44">"_CRS"</literal></expr></argument>, <argument pos:start="401:47" pos:end="401:49"><expr pos:start="401:47" pos:end="401:49"><name pos:start="401:47" pos:end="401:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="405:9" pos:end="407:70"><expr pos:start="405:9" pos:end="407:69"><call pos:start="405:9" pos:end="407:69"><name pos:start="405:9" pos:end="405:18">aml_append</name><argument_list pos:start="405:19" pos:end="407:69">(<argument pos:start="405:20" pos:end="405:22"><expr pos:start="405:20" pos:end="405:22"><name pos:start="405:20" pos:end="405:22">dev</name></expr></argument>, <argument pos:start="405:25" pos:end="407:68"><expr pos:start="405:25" pos:end="407:68"><call pos:start="405:25" pos:end="407:68"><name pos:start="405:25" pos:end="405:44">aml_operation_region</name><argument_list pos:start="405:45" pos:end="407:68">(<argument pos:start="405:46" pos:end="405:51"><expr pos:start="405:46" pos:end="405:51"><literal type="string" pos:start="405:46" pos:end="405:51">"PEOR"</literal></expr></argument>, <argument pos:start="405:54" pos:end="405:66"><expr pos:start="405:54" pos:end="405:66"><name pos:start="405:54" pos:end="405:66">AML_SYSTEM_IO</name></expr></argument>,

                                              <argument pos:start="407:47" pos:end="407:64"><expr pos:start="407:47" pos:end="407:64"><name pos:start="407:47" pos:end="407:64"><name pos:start="407:47" pos:end="407:50">misc</name><operator pos:start="407:51" pos:end="407:52">-&gt;</operator><name pos:start="407:53" pos:end="407:64">pvpanic_port</name></name></expr></argument>, <argument pos:start="407:67" pos:end="407:67"><expr pos:start="407:67" pos:end="407:67"><literal type="number" pos:start="407:67" pos:end="407:67">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="409:9" pos:end="409:62"><expr pos:start="409:9" pos:end="409:61"><name pos:start="409:9" pos:end="409:13">field</name> <operator pos:start="409:15" pos:end="409:15">=</operator> <call pos:start="409:17" pos:end="409:61"><name pos:start="409:17" pos:end="409:25">aml_field</name><argument_list pos:start="409:26" pos:end="409:61">(<argument pos:start="409:27" pos:end="409:32"><expr pos:start="409:27" pos:end="409:32"><literal type="string" pos:start="409:27" pos:end="409:32">"PEOR"</literal></expr></argument>, <argument pos:start="409:35" pos:end="409:46"><expr pos:start="409:35" pos:end="409:46"><name pos:start="409:35" pos:end="409:46">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="409:49" pos:end="409:60"><expr pos:start="409:49" pos:end="409:60"><name pos:start="409:49" pos:end="409:60">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="411:9" pos:end="411:54"><expr pos:start="411:9" pos:end="411:53"><call pos:start="411:9" pos:end="411:53"><name pos:start="411:9" pos:end="411:18">aml_append</name><argument_list pos:start="411:19" pos:end="411:53">(<argument pos:start="411:20" pos:end="411:24"><expr pos:start="411:20" pos:end="411:24"><name pos:start="411:20" pos:end="411:24">field</name></expr></argument>, <argument pos:start="411:27" pos:end="411:52"><expr pos:start="411:27" pos:end="411:52"><call pos:start="411:27" pos:end="411:52"><name pos:start="411:27" pos:end="411:41">aml_named_field</name><argument_list pos:start="411:42" pos:end="411:52">(<argument pos:start="411:43" pos:end="411:48"><expr pos:start="411:43" pos:end="411:48"><literal type="string" pos:start="411:43" pos:end="411:48">"PEPT"</literal></expr></argument>, <argument pos:start="411:51" pos:end="411:51"><expr pos:start="411:51" pos:end="411:51"><literal type="number" pos:start="411:51" pos:end="411:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:31"><expr pos:start="413:9" pos:end="413:30"><call pos:start="413:9" pos:end="413:30"><name pos:start="413:9" pos:end="413:18">aml_append</name><argument_list pos:start="413:19" pos:end="413:30">(<argument pos:start="413:20" pos:end="413:22"><expr pos:start="413:20" pos:end="413:22"><name pos:start="413:20" pos:end="413:22">dev</name></expr></argument>, <argument pos:start="413:25" pos:end="413:29"><expr pos:start="413:25" pos:end="413:29"><name pos:start="413:25" pos:end="413:29">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="417:9" pos:end="417:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="419:9" pos:end="419:61"><expr pos:start="419:9" pos:end="419:60"><call pos:start="419:9" pos:end="419:60"><name pos:start="419:9" pos:end="419:18">aml_append</name><argument_list pos:start="419:19" pos:end="419:60">(<argument pos:start="419:20" pos:end="419:22"><expr pos:start="419:20" pos:end="419:22"><name pos:start="419:20" pos:end="419:22">dev</name></expr></argument>, <argument pos:start="419:25" pos:end="419:59"><expr pos:start="419:25" pos:end="419:59"><call pos:start="419:25" pos:end="419:59"><name pos:start="419:25" pos:end="419:37">aml_name_decl</name><argument_list pos:start="419:38" pos:end="419:59">(<argument pos:start="419:39" pos:end="419:44"><expr pos:start="419:39" pos:end="419:44"><literal type="string" pos:start="419:39" pos:end="419:44">"_STA"</literal></expr></argument>, <argument pos:start="419:47" pos:end="419:58"><expr pos:start="419:47" pos:end="419:58"><call pos:start="419:47" pos:end="419:58"><name pos:start="419:47" pos:end="419:53">aml_int</name><argument_list pos:start="419:54" pos:end="419:58">(<argument pos:start="419:55" pos:end="419:57"><expr pos:start="419:55" pos:end="419:57"><literal type="number" pos:start="419:55" pos:end="419:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="423:9" pos:end="423:39"><expr pos:start="423:9" pos:end="423:38"><name pos:start="423:9" pos:end="423:14">method</name> <operator pos:start="423:16" pos:end="423:16">=</operator> <call pos:start="423:18" pos:end="423:38"><name pos:start="423:18" pos:end="423:27">aml_method</name><argument_list pos:start="423:28" pos:end="423:38">(<argument pos:start="423:29" pos:end="423:34"><expr pos:start="423:29" pos:end="423:34"><literal type="string" pos:start="423:29" pos:end="423:34">"RDPT"</literal></expr></argument>, <argument pos:start="423:37" pos:end="423:37"><expr pos:start="423:37" pos:end="423:37"><literal type="number" pos:start="423:37" pos:end="423:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:70"><expr pos:start="425:9" pos:end="425:69"><call pos:start="425:9" pos:end="425:69"><name pos:start="425:9" pos:end="425:18">aml_append</name><argument_list pos:start="425:19" pos:end="425:69">(<argument pos:start="425:20" pos:end="425:25"><expr pos:start="425:20" pos:end="425:25"><name pos:start="425:20" pos:end="425:25">method</name></expr></argument>, <argument pos:start="425:28" pos:end="425:68"><expr pos:start="425:28" pos:end="425:68"><call pos:start="425:28" pos:end="425:68"><name pos:start="425:28" pos:end="425:36">aml_store</name><argument_list pos:start="425:37" pos:end="425:68">(<argument pos:start="425:38" pos:end="425:53"><expr pos:start="425:38" pos:end="425:53"><call pos:start="425:38" pos:end="425:53"><name pos:start="425:38" pos:end="425:45">aml_name</name><argument_list pos:start="425:46" pos:end="425:53">(<argument pos:start="425:47" pos:end="425:52"><expr pos:start="425:47" pos:end="425:52"><literal type="string" pos:start="425:47" pos:end="425:52">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="425:56" pos:end="425:67"><expr pos:start="425:56" pos:end="425:67"><call pos:start="425:56" pos:end="425:67"><name pos:start="425:56" pos:end="425:64">aml_local</name><argument_list pos:start="425:65" pos:end="425:67">(<argument pos:start="425:66" pos:end="425:66"><expr pos:start="425:66" pos:end="425:66"><literal type="number" pos:start="425:66" pos:end="425:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="427:9" pos:end="427:53"><expr pos:start="427:9" pos:end="427:52"><call pos:start="427:9" pos:end="427:52"><name pos:start="427:9" pos:end="427:18">aml_append</name><argument_list pos:start="427:19" pos:end="427:52">(<argument pos:start="427:20" pos:end="427:25"><expr pos:start="427:20" pos:end="427:25"><name pos:start="427:20" pos:end="427:25">method</name></expr></argument>, <argument pos:start="427:28" pos:end="427:51"><expr pos:start="427:28" pos:end="427:51"><call pos:start="427:28" pos:end="427:51"><name pos:start="427:28" pos:end="427:37">aml_return</name><argument_list pos:start="427:38" pos:end="427:51">(<argument pos:start="427:39" pos:end="427:50"><expr pos:start="427:39" pos:end="427:50"><call pos:start="427:39" pos:end="427:50"><name pos:start="427:39" pos:end="427:47">aml_local</name><argument_list pos:start="427:48" pos:end="427:50">(<argument pos:start="427:49" pos:end="427:49"><expr pos:start="427:49" pos:end="427:49"><literal type="number" pos:start="427:49" pos:end="427:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="429:9" pos:end="429:32"><expr pos:start="429:9" pos:end="429:31"><call pos:start="429:9" pos:end="429:31"><name pos:start="429:9" pos:end="429:18">aml_append</name><argument_list pos:start="429:19" pos:end="429:31">(<argument pos:start="429:20" pos:end="429:22"><expr pos:start="429:20" pos:end="429:22"><name pos:start="429:20" pos:end="429:22">dev</name></expr></argument>, <argument pos:start="429:25" pos:end="429:30"><expr pos:start="429:25" pos:end="429:30"><name pos:start="429:25" pos:end="429:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="433:9" pos:end="433:39"><expr pos:start="433:9" pos:end="433:38"><name pos:start="433:9" pos:end="433:14">method</name> <operator pos:start="433:16" pos:end="433:16">=</operator> <call pos:start="433:18" pos:end="433:38"><name pos:start="433:18" pos:end="433:27">aml_method</name><argument_list pos:start="433:28" pos:end="433:38">(<argument pos:start="433:29" pos:end="433:34"><expr pos:start="433:29" pos:end="433:34"><literal type="string" pos:start="433:29" pos:end="433:34">"WRPT"</literal></expr></argument>, <argument pos:start="433:37" pos:end="433:37"><expr pos:start="433:37" pos:end="433:37"><literal type="number" pos:start="433:37" pos:end="433:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="435:9" pos:end="435:68"><expr pos:start="435:9" pos:end="435:67"><call pos:start="435:9" pos:end="435:67"><name pos:start="435:9" pos:end="435:18">aml_append</name><argument_list pos:start="435:19" pos:end="435:67">(<argument pos:start="435:20" pos:end="435:25"><expr pos:start="435:20" pos:end="435:25"><name pos:start="435:20" pos:end="435:25">method</name></expr></argument>, <argument pos:start="435:28" pos:end="435:66"><expr pos:start="435:28" pos:end="435:66"><call pos:start="435:28" pos:end="435:66"><name pos:start="435:28" pos:end="435:36">aml_store</name><argument_list pos:start="435:37" pos:end="435:66">(<argument pos:start="435:38" pos:end="435:47"><expr pos:start="435:38" pos:end="435:47"><call pos:start="435:38" pos:end="435:47"><name pos:start="435:38" pos:end="435:44">aml_arg</name><argument_list pos:start="435:45" pos:end="435:47">(<argument pos:start="435:46" pos:end="435:46"><expr pos:start="435:46" pos:end="435:46"><literal type="number" pos:start="435:46" pos:end="435:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="435:50" pos:end="435:65"><expr pos:start="435:50" pos:end="435:65"><call pos:start="435:50" pos:end="435:65"><name pos:start="435:50" pos:end="435:57">aml_name</name><argument_list pos:start="435:58" pos:end="435:65">(<argument pos:start="435:59" pos:end="435:64"><expr pos:start="435:59" pos:end="435:64"><literal type="string" pos:start="435:59" pos:end="435:64">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="437:9" pos:end="437:32"><expr pos:start="437:9" pos:end="437:31"><call pos:start="437:9" pos:end="437:31"><name pos:start="437:9" pos:end="437:18">aml_append</name><argument_list pos:start="437:19" pos:end="437:31">(<argument pos:start="437:20" pos:end="437:22"><expr pos:start="437:20" pos:end="437:22"><name pos:start="437:20" pos:end="437:22">dev</name></expr></argument>, <argument pos:start="437:25" pos:end="437:30"><expr pos:start="437:25" pos:end="437:30"><name pos:start="437:25" pos:end="437:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="441:9" pos:end="441:31"><expr pos:start="441:9" pos:end="441:30"><call pos:start="441:9" pos:end="441:30"><name pos:start="441:9" pos:end="441:18">aml_append</name><argument_list pos:start="441:19" pos:end="441:30">(<argument pos:start="441:20" pos:end="441:24"><expr pos:start="441:20" pos:end="441:24"><name pos:start="441:20" pos:end="441:24">scope</name></expr></argument>, <argument pos:start="441:27" pos:end="441:29"><expr pos:start="441:27" pos:end="441:29"><name pos:start="441:27" pos:end="441:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="443:9" pos:end="443:32"><expr pos:start="443:9" pos:end="443:31"><call pos:start="443:9" pos:end="443:31"><name pos:start="443:9" pos:end="443:18">aml_append</name><argument_list pos:start="443:19" pos:end="443:31">(<argument pos:start="443:20" pos:end="443:23"><expr pos:start="443:20" pos:end="443:23"><name pos:start="443:20" pos:end="443:23">ssdt</name></expr></argument>, <argument pos:start="443:26" pos:end="443:30"><expr pos:start="443:26" pos:end="443:30"><name pos:start="443:26" pos:end="443:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="449:5" pos:end="449:34"><expr pos:start="449:5" pos:end="449:33"><name pos:start="449:5" pos:end="449:12">sb_scope</name> <operator pos:start="449:14" pos:end="449:14">=</operator> <call pos:start="449:16" pos:end="449:33"><name pos:start="449:16" pos:end="449:24">aml_scope</name><argument_list pos:start="449:25" pos:end="449:33">(<argument pos:start="449:26" pos:end="449:32"><expr pos:start="449:26" pos:end="449:32"><literal type="string" pos:start="449:26" pos:end="449:32">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="451:5" pos:end="885:5">{<block_content pos:start="455:9" pos:end="883:35">

        <comment type="block" pos:start="453:9" pos:end="453:78">/* create PCI0.PRES device and its _CRS to reserve CPU hotplug MMIO */</comment>

        <expr_stmt pos:start="455:9" pos:end="455:73"><expr pos:start="455:9" pos:end="455:72"><name pos:start="455:9" pos:end="455:11">dev</name> <operator pos:start="455:13" pos:end="455:13">=</operator> <call pos:start="455:15" pos:end="455:72"><name pos:start="455:15" pos:end="455:24">aml_device</name><argument_list pos:start="455:25" pos:end="455:72">(<argument pos:start="455:26" pos:end="455:71"><expr pos:start="455:26" pos:end="455:71"><literal type="string" pos:start="455:26" pos:end="455:32">"PCI0."</literal> <call pos:start="455:34" pos:end="455:71"><name pos:start="455:34" pos:end="455:42">stringify</name><argument_list pos:start="455:43" pos:end="455:71">(<argument pos:start="455:44" pos:end="455:70"><expr pos:start="455:44" pos:end="455:70"><name pos:start="455:44" pos:end="455:70">CPU_HOTPLUG_RESOURCE_DEVICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:70"><expr pos:start="457:9" pos:end="457:69"><call pos:start="457:9" pos:end="457:69"><name pos:start="457:9" pos:end="457:18">aml_append</name><argument_list pos:start="457:19" pos:end="457:69">(<argument pos:start="457:20" pos:end="457:22"><expr pos:start="457:20" pos:end="457:22"><name pos:start="457:20" pos:end="457:22">dev</name></expr></argument>, <argument pos:start="457:25" pos:end="457:68"><expr pos:start="457:25" pos:end="457:68"><call pos:start="457:25" pos:end="457:68"><name pos:start="457:25" pos:end="457:37">aml_name_decl</name><argument_list pos:start="457:38" pos:end="457:68">(<argument pos:start="457:39" pos:end="457:44"><expr pos:start="457:39" pos:end="457:44"><literal type="string" pos:start="457:39" pos:end="457:44">"_HID"</literal></expr></argument>, <argument pos:start="457:47" pos:end="457:67"><expr pos:start="457:47" pos:end="457:67"><call pos:start="457:47" pos:end="457:67"><name pos:start="457:47" pos:end="457:56">aml_eisaid</name><argument_list pos:start="457:57" pos:end="457:67">(<argument pos:start="457:58" pos:end="457:66"><expr pos:start="457:58" pos:end="457:66"><literal type="string" pos:start="457:58" pos:end="457:66">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="463:10"><expr pos:start="459:9" pos:end="463:9"><call pos:start="459:9" pos:end="463:9"><name pos:start="459:9" pos:end="459:18">aml_append</name><argument_list pos:start="459:19" pos:end="463:9">(<argument pos:start="459:20" pos:end="459:22"><expr pos:start="459:20" pos:end="459:22"><name pos:start="459:20" pos:end="459:22">dev</name></expr></argument>,

            <argument pos:start="461:13" pos:end="461:70"><expr pos:start="461:13" pos:end="461:70"><call pos:start="461:13" pos:end="461:70"><name pos:start="461:13" pos:end="461:25">aml_name_decl</name><argument_list pos:start="461:26" pos:end="461:70">(<argument pos:start="461:27" pos:end="461:32"><expr pos:start="461:27" pos:end="461:32"><literal type="string" pos:start="461:27" pos:end="461:32">"_UID"</literal></expr></argument>, <argument pos:start="461:35" pos:end="461:69"><expr pos:start="461:35" pos:end="461:69"><call pos:start="461:35" pos:end="461:69"><name pos:start="461:35" pos:end="461:44">aml_string</name><argument_list pos:start="461:45" pos:end="461:69">(<argument pos:start="461:46" pos:end="461:68"><expr pos:start="461:46" pos:end="461:68"><literal type="string" pos:start="461:46" pos:end="461:68">"CPU Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="465:9" pos:end="465:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="467:9" pos:end="467:61"><expr pos:start="467:9" pos:end="467:60"><call pos:start="467:9" pos:end="467:60"><name pos:start="467:9" pos:end="467:18">aml_append</name><argument_list pos:start="467:19" pos:end="467:60">(<argument pos:start="467:20" pos:end="467:22"><expr pos:start="467:20" pos:end="467:22"><name pos:start="467:20" pos:end="467:22">dev</name></expr></argument>, <argument pos:start="467:25" pos:end="467:59"><expr pos:start="467:25" pos:end="467:59"><call pos:start="467:25" pos:end="467:59"><name pos:start="467:25" pos:end="467:37">aml_name_decl</name><argument_list pos:start="467:38" pos:end="467:59">(<argument pos:start="467:39" pos:end="467:44"><expr pos:start="467:39" pos:end="467:44"><literal type="string" pos:start="467:39" pos:end="467:44">"_STA"</literal></expr></argument>, <argument pos:start="467:47" pos:end="467:58"><expr pos:start="467:47" pos:end="467:58"><call pos:start="467:47" pos:end="467:58"><name pos:start="467:47" pos:end="467:53">aml_int</name><argument_list pos:start="467:54" pos:end="467:58">(<argument pos:start="467:55" pos:end="467:57"><expr pos:start="467:55" pos:end="467:57"><literal type="number" pos:start="467:55" pos:end="467:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="469:38"><expr pos:start="469:9" pos:end="469:37"><name pos:start="469:9" pos:end="469:11">crs</name> <operator pos:start="469:13" pos:end="469:13">=</operator> <call pos:start="469:15" pos:end="469:37"><name pos:start="469:15" pos:end="469:35">aml_resource_template</name><argument_list pos:start="469:36" pos:end="469:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="471:9" pos:end="477:10"><expr pos:start="471:9" pos:end="477:9"><call pos:start="471:9" pos:end="477:9"><name pos:start="471:9" pos:end="471:18">aml_append</name><argument_list pos:start="471:19" pos:end="477:9">(<argument pos:start="471:20" pos:end="471:22"><expr pos:start="471:20" pos:end="471:22"><name pos:start="471:20" pos:end="471:22">crs</name></expr></argument>,

            <argument pos:start="473:13" pos:end="475:37"><expr pos:start="473:13" pos:end="475:37"><call pos:start="473:13" pos:end="475:37"><name pos:start="473:13" pos:end="473:18">aml_io</name><argument_list pos:start="473:19" pos:end="475:37">(<argument pos:start="473:20" pos:end="473:31"><expr pos:start="473:20" pos:end="473:31"><name pos:start="473:20" pos:end="473:31">AML_DECODE16</name></expr></argument>, <argument pos:start="473:34" pos:end="473:51"><expr pos:start="473:34" pos:end="473:51"><name pos:start="473:34" pos:end="473:51"><name pos:start="473:34" pos:end="473:35">pm</name><operator pos:start="473:36" pos:end="473:37">-&gt;</operator><name pos:start="473:38" pos:end="473:51">cpu_hp_io_base</name></name></expr></argument>, <argument pos:start="473:54" pos:end="473:71"><expr pos:start="473:54" pos:end="473:71"><name pos:start="473:54" pos:end="473:71"><name pos:start="473:54" pos:end="473:55">pm</name><operator pos:start="473:56" pos:end="473:57">-&gt;</operator><name pos:start="473:58" pos:end="473:71">cpu_hp_io_base</name></name></expr></argument>, <argument pos:start="473:74" pos:end="473:74"><expr pos:start="473:74" pos:end="473:74"><literal type="number" pos:start="473:74" pos:end="473:74">1</literal></expr></argument>,

                   <argument pos:start="475:20" pos:end="475:36"><expr pos:start="475:20" pos:end="475:36"><name pos:start="475:20" pos:end="475:36"><name pos:start="475:20" pos:end="475:21">pm</name><operator pos:start="475:22" pos:end="475:23">-&gt;</operator><name pos:start="475:24" pos:end="475:36">cpu_hp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="479:9" pos:end="479:52"><expr pos:start="479:9" pos:end="479:51"><call pos:start="479:9" pos:end="479:51"><name pos:start="479:9" pos:end="479:18">aml_append</name><argument_list pos:start="479:19" pos:end="479:51">(<argument pos:start="479:20" pos:end="479:22"><expr pos:start="479:20" pos:end="479:22"><name pos:start="479:20" pos:end="479:22">dev</name></expr></argument>, <argument pos:start="479:25" pos:end="479:50"><expr pos:start="479:25" pos:end="479:50"><call pos:start="479:25" pos:end="479:50"><name pos:start="479:25" pos:end="479:37">aml_name_decl</name><argument_list pos:start="479:38" pos:end="479:50">(<argument pos:start="479:39" pos:end="479:44"><expr pos:start="479:39" pos:end="479:44"><literal type="string" pos:start="479:39" pos:end="479:44">"_CRS"</literal></expr></argument>, <argument pos:start="479:47" pos:end="479:49"><expr pos:start="479:47" pos:end="479:49"><name pos:start="479:47" pos:end="479:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="481:9" pos:end="481:34"><expr pos:start="481:9" pos:end="481:33"><call pos:start="481:9" pos:end="481:33"><name pos:start="481:9" pos:end="481:18">aml_append</name><argument_list pos:start="481:19" pos:end="481:33">(<argument pos:start="481:20" pos:end="481:27"><expr pos:start="481:20" pos:end="481:27"><name pos:start="481:20" pos:end="481:27">sb_scope</name></expr></argument>, <argument pos:start="481:30" pos:end="481:32"><expr pos:start="481:30" pos:end="481:32"><name pos:start="481:30" pos:end="481:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="483:9" pos:end="483:72">/* declare CPU hotplug MMIO region and PRS field to access it */</comment>

        <expr_stmt pos:start="485:9" pos:end="487:75"><expr pos:start="485:9" pos:end="487:74"><call pos:start="485:9" pos:end="487:74"><name pos:start="485:9" pos:end="485:18">aml_append</name><argument_list pos:start="485:19" pos:end="487:74">(<argument pos:start="485:20" pos:end="485:27"><expr pos:start="485:20" pos:end="485:27"><name pos:start="485:20" pos:end="485:27">sb_scope</name></expr></argument>, <argument pos:start="485:30" pos:end="487:73"><expr pos:start="485:30" pos:end="487:73"><call pos:start="485:30" pos:end="487:73"><name pos:start="485:30" pos:end="485:49">aml_operation_region</name><argument_list pos:start="485:50" pos:end="487:73">(

            <argument pos:start="487:13" pos:end="487:18"><expr pos:start="487:13" pos:end="487:18"><literal type="string" pos:start="487:13" pos:end="487:18">"PRST"</literal></expr></argument>, <argument pos:start="487:21" pos:end="487:33"><expr pos:start="487:21" pos:end="487:33"><name pos:start="487:21" pos:end="487:33">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="487:36" pos:end="487:53"><expr pos:start="487:36" pos:end="487:53"><name pos:start="487:36" pos:end="487:53"><name pos:start="487:36" pos:end="487:37">pm</name><operator pos:start="487:38" pos:end="487:39">-&gt;</operator><name pos:start="487:40" pos:end="487:53">cpu_hp_io_base</name></name></expr></argument>, <argument pos:start="487:56" pos:end="487:72"><expr pos:start="487:56" pos:end="487:72"><name pos:start="487:56" pos:end="487:72"><name pos:start="487:56" pos:end="487:57">pm</name><operator pos:start="487:58" pos:end="487:59">-&gt;</operator><name pos:start="487:60" pos:end="487:72">cpu_hp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="489:9" pos:end="489:62"><expr pos:start="489:9" pos:end="489:61"><name pos:start="489:9" pos:end="489:13">field</name> <operator pos:start="489:15" pos:end="489:15">=</operator> <call pos:start="489:17" pos:end="489:61"><name pos:start="489:17" pos:end="489:25">aml_field</name><argument_list pos:start="489:26" pos:end="489:61">(<argument pos:start="489:27" pos:end="489:32"><expr pos:start="489:27" pos:end="489:32"><literal type="string" pos:start="489:27" pos:end="489:32">"PRST"</literal></expr></argument>, <argument pos:start="489:35" pos:end="489:46"><expr pos:start="489:35" pos:end="489:46"><name pos:start="489:35" pos:end="489:46">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="489:49" pos:end="489:60"><expr pos:start="489:49" pos:end="489:60"><name pos:start="489:49" pos:end="489:60">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="491:9" pos:end="491:55"><expr pos:start="491:9" pos:end="491:54"><call pos:start="491:9" pos:end="491:54"><name pos:start="491:9" pos:end="491:18">aml_append</name><argument_list pos:start="491:19" pos:end="491:54">(<argument pos:start="491:20" pos:end="491:24"><expr pos:start="491:20" pos:end="491:24"><name pos:start="491:20" pos:end="491:24">field</name></expr></argument>, <argument pos:start="491:27" pos:end="491:53"><expr pos:start="491:27" pos:end="491:53"><call pos:start="491:27" pos:end="491:53"><name pos:start="491:27" pos:end="491:41">aml_named_field</name><argument_list pos:start="491:42" pos:end="491:53">(<argument pos:start="491:43" pos:end="491:47"><expr pos:start="491:43" pos:end="491:47"><literal type="string" pos:start="491:43" pos:end="491:47">"PRS"</literal></expr></argument>, <argument pos:start="491:50" pos:end="491:52"><expr pos:start="491:50" pos:end="491:52"><literal type="number" pos:start="491:50" pos:end="491:52">256</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="493:9" pos:end="493:36"><expr pos:start="493:9" pos:end="493:35"><call pos:start="493:9" pos:end="493:35"><name pos:start="493:9" pos:end="493:18">aml_append</name><argument_list pos:start="493:19" pos:end="493:35">(<argument pos:start="493:20" pos:end="493:27"><expr pos:start="493:20" pos:end="493:27"><name pos:start="493:20" pos:end="493:27">sb_scope</name></expr></argument>, <argument pos:start="493:30" pos:end="493:34"><expr pos:start="493:30" pos:end="493:34"><name pos:start="493:30" pos:end="493:34">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="497:9" pos:end="497:55">/* build Processor object for each processor */</comment>

        <for pos:start="499:9" pos:end="535:9">for <control pos:start="499:13" pos:end="499:39">(<init pos:start="499:14" pos:end="499:19"><expr pos:start="499:14" pos:end="499:18"><name pos:start="499:14" pos:end="499:14">i</name> <operator pos:start="499:16" pos:end="499:16">=</operator> <literal type="number" pos:start="499:18" pos:end="499:18">0</literal></expr>;</init> <condition pos:start="499:21" pos:end="499:34"><expr pos:start="499:21" pos:end="499:33"><name pos:start="499:21" pos:end="499:21">i</name> <operator pos:start="499:23" pos:end="499:23">&lt;</operator> <name pos:start="499:25" pos:end="499:33">acpi_cpus</name></expr>;</condition> <incr pos:start="499:36" pos:end="499:38"><expr pos:start="499:36" pos:end="499:38"><name pos:start="499:36" pos:end="499:36">i</name><operator pos:start="499:37" pos:end="499:38">++</operator></expr></incr>)</control> <block pos:start="499:41" pos:end="535:9">{<block_content pos:start="501:13" pos:end="533:38">

            <expr_stmt pos:start="501:13" pos:end="501:55"><expr pos:start="501:13" pos:end="501:54"><name pos:start="501:13" pos:end="501:15">dev</name> <operator pos:start="501:17" pos:end="501:17">=</operator> <call pos:start="501:19" pos:end="501:54"><name pos:start="501:19" pos:end="501:31">aml_processor</name><argument_list pos:start="501:32" pos:end="501:54">(<argument pos:start="501:33" pos:end="501:33"><expr pos:start="501:33" pos:end="501:33"><name pos:start="501:33" pos:end="501:33">i</name></expr></argument>, <argument pos:start="501:36" pos:end="501:36"><expr pos:start="501:36" pos:end="501:36"><literal type="number" pos:start="501:36" pos:end="501:36">0</literal></expr></argument>, <argument pos:start="501:39" pos:end="501:39"><expr pos:start="501:39" pos:end="501:39"><literal type="number" pos:start="501:39" pos:end="501:39">0</literal></expr></argument>, <argument pos:start="501:42" pos:end="501:50"><expr pos:start="501:42" pos:end="501:50"><literal type="string" pos:start="501:42" pos:end="501:50">"CP%.02X"</literal></expr></argument>, <argument pos:start="501:53" pos:end="501:53"><expr pos:start="501:53" pos:end="501:53"><name pos:start="501:53" pos:end="501:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="505:13" pos:end="505:43"><expr pos:start="505:13" pos:end="505:42"><name pos:start="505:13" pos:end="505:18">method</name> <operator pos:start="505:20" pos:end="505:20">=</operator> <call pos:start="505:22" pos:end="505:42"><name pos:start="505:22" pos:end="505:31">aml_method</name><argument_list pos:start="505:32" pos:end="505:42">(<argument pos:start="505:33" pos:end="505:38"><expr pos:start="505:33" pos:end="505:38"><literal type="string" pos:start="505:33" pos:end="505:38">"_MAT"</literal></expr></argument>, <argument pos:start="505:41" pos:end="505:41"><expr pos:start="505:41" pos:end="505:41"><literal type="number" pos:start="505:41" pos:end="505:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:74"><expr pos:start="507:13" pos:end="507:73"><call pos:start="507:13" pos:end="507:73"><name pos:start="507:13" pos:end="507:22">aml_append</name><argument_list pos:start="507:23" pos:end="507:73">(<argument pos:start="507:24" pos:end="507:29"><expr pos:start="507:24" pos:end="507:29"><name pos:start="507:24" pos:end="507:29">method</name></expr></argument>, <argument pos:start="507:32" pos:end="507:72"><expr pos:start="507:32" pos:end="507:72"><call pos:start="507:32" pos:end="507:72"><name pos:start="507:32" pos:end="507:41">aml_return</name><argument_list pos:start="507:42" pos:end="507:72">(<argument pos:start="507:43" pos:end="507:71"><expr pos:start="507:43" pos:end="507:71"><call pos:start="507:43" pos:end="507:71"><name pos:start="507:43" pos:end="507:51">aml_call1</name><argument_list pos:start="507:52" pos:end="507:71">(<argument pos:start="507:53" pos:end="507:58"><expr pos:start="507:53" pos:end="507:58"><literal type="string" pos:start="507:53" pos:end="507:58">"CPMA"</literal></expr></argument>, <argument pos:start="507:61" pos:end="507:70"><expr pos:start="507:61" pos:end="507:70"><call pos:start="507:61" pos:end="507:70"><name pos:start="507:61" pos:end="507:67">aml_int</name><argument_list pos:start="507:68" pos:end="507:70">(<argument pos:start="507:69" pos:end="507:69"><expr pos:start="507:69" pos:end="507:69"><name pos:start="507:69" pos:end="507:69">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:36"><expr pos:start="509:13" pos:end="509:35"><call pos:start="509:13" pos:end="509:35"><name pos:start="509:13" pos:end="509:22">aml_append</name><argument_list pos:start="509:23" pos:end="509:35">(<argument pos:start="509:24" pos:end="509:26"><expr pos:start="509:24" pos:end="509:26"><name pos:start="509:24" pos:end="509:26">dev</name></expr></argument>, <argument pos:start="509:29" pos:end="509:34"><expr pos:start="509:29" pos:end="509:34"><name pos:start="509:29" pos:end="509:34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="513:13" pos:end="513:43"><expr pos:start="513:13" pos:end="513:42"><name pos:start="513:13" pos:end="513:18">method</name> <operator pos:start="513:20" pos:end="513:20">=</operator> <call pos:start="513:22" pos:end="513:42"><name pos:start="513:22" pos:end="513:31">aml_method</name><argument_list pos:start="513:32" pos:end="513:42">(<argument pos:start="513:33" pos:end="513:38"><expr pos:start="513:33" pos:end="513:38"><literal type="string" pos:start="513:33" pos:end="513:38">"_STA"</literal></expr></argument>, <argument pos:start="513:41" pos:end="513:41"><expr pos:start="513:41" pos:end="513:41"><literal type="number" pos:start="513:41" pos:end="513:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="515:13" pos:end="515:74"><expr pos:start="515:13" pos:end="515:73"><call pos:start="515:13" pos:end="515:73"><name pos:start="515:13" pos:end="515:22">aml_append</name><argument_list pos:start="515:23" pos:end="515:73">(<argument pos:start="515:24" pos:end="515:29"><expr pos:start="515:24" pos:end="515:29"><name pos:start="515:24" pos:end="515:29">method</name></expr></argument>, <argument pos:start="515:32" pos:end="515:72"><expr pos:start="515:32" pos:end="515:72"><call pos:start="515:32" pos:end="515:72"><name pos:start="515:32" pos:end="515:41">aml_return</name><argument_list pos:start="515:42" pos:end="515:72">(<argument pos:start="515:43" pos:end="515:71"><expr pos:start="515:43" pos:end="515:71"><call pos:start="515:43" pos:end="515:71"><name pos:start="515:43" pos:end="515:51">aml_call1</name><argument_list pos:start="515:52" pos:end="515:71">(<argument pos:start="515:53" pos:end="515:58"><expr pos:start="515:53" pos:end="515:58"><literal type="string" pos:start="515:53" pos:end="515:58">"CPST"</literal></expr></argument>, <argument pos:start="515:61" pos:end="515:70"><expr pos:start="515:61" pos:end="515:70"><call pos:start="515:61" pos:end="515:70"><name pos:start="515:61" pos:end="515:67">aml_int</name><argument_list pos:start="515:68" pos:end="515:70">(<argument pos:start="515:69" pos:end="515:69"><expr pos:start="515:69" pos:end="515:69"><name pos:start="515:69" pos:end="515:69">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="517:13" pos:end="517:36"><expr pos:start="517:13" pos:end="517:35"><call pos:start="517:13" pos:end="517:35"><name pos:start="517:13" pos:end="517:22">aml_append</name><argument_list pos:start="517:23" pos:end="517:35">(<argument pos:start="517:24" pos:end="517:26"><expr pos:start="517:24" pos:end="517:26"><name pos:start="517:24" pos:end="517:26">dev</name></expr></argument>, <argument pos:start="517:29" pos:end="517:34"><expr pos:start="517:29" pos:end="517:34"><name pos:start="517:29" pos:end="517:34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="521:13" pos:end="521:43"><expr pos:start="521:13" pos:end="521:42"><name pos:start="521:13" pos:end="521:18">method</name> <operator pos:start="521:20" pos:end="521:20">=</operator> <call pos:start="521:22" pos:end="521:42"><name pos:start="521:22" pos:end="521:31">aml_method</name><argument_list pos:start="521:32" pos:end="521:42">(<argument pos:start="521:33" pos:end="521:38"><expr pos:start="521:33" pos:end="521:38"><literal type="string" pos:start="521:33" pos:end="521:38">"_EJ0"</literal></expr></argument>, <argument pos:start="521:41" pos:end="521:41"><expr pos:start="521:41" pos:end="521:41"><literal type="number" pos:start="521:41" pos:end="521:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="523:13" pos:end="527:14"><expr pos:start="523:13" pos:end="527:13"><call pos:start="523:13" pos:end="527:13"><name pos:start="523:13" pos:end="523:22">aml_append</name><argument_list pos:start="523:23" pos:end="527:13">(<argument pos:start="523:24" pos:end="523:29"><expr pos:start="523:24" pos:end="523:29"><name pos:start="523:24" pos:end="523:29">method</name></expr></argument>,

                <argument pos:start="525:17" pos:end="525:69"><expr pos:start="525:17" pos:end="525:69"><call pos:start="525:17" pos:end="525:69"><name pos:start="525:17" pos:end="525:26">aml_return</name><argument_list pos:start="525:27" pos:end="525:69">(<argument pos:start="525:28" pos:end="525:68"><expr pos:start="525:28" pos:end="525:68"><call pos:start="525:28" pos:end="525:68"><name pos:start="525:28" pos:end="525:36">aml_call2</name><argument_list pos:start="525:37" pos:end="525:68">(<argument pos:start="525:38" pos:end="525:43"><expr pos:start="525:38" pos:end="525:43"><literal type="string" pos:start="525:38" pos:end="525:43">"CPEJ"</literal></expr></argument>, <argument pos:start="525:46" pos:end="525:55"><expr pos:start="525:46" pos:end="525:55"><call pos:start="525:46" pos:end="525:55"><name pos:start="525:46" pos:end="525:52">aml_int</name><argument_list pos:start="525:53" pos:end="525:55">(<argument pos:start="525:54" pos:end="525:54"><expr pos:start="525:54" pos:end="525:54"><name pos:start="525:54" pos:end="525:54">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="525:58" pos:end="525:67"><expr pos:start="525:58" pos:end="525:67"><call pos:start="525:58" pos:end="525:67"><name pos:start="525:58" pos:end="525:64">aml_arg</name><argument_list pos:start="525:65" pos:end="525:67">(<argument pos:start="525:66" pos:end="525:66"><expr pos:start="525:66" pos:end="525:66"><literal type="number" pos:start="525:66" pos:end="525:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

            )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="529:13" pos:end="529:36"><expr pos:start="529:13" pos:end="529:35"><call pos:start="529:13" pos:end="529:35"><name pos:start="529:13" pos:end="529:22">aml_append</name><argument_list pos:start="529:23" pos:end="529:35">(<argument pos:start="529:24" pos:end="529:26"><expr pos:start="529:24" pos:end="529:26"><name pos:start="529:24" pos:end="529:26">dev</name></expr></argument>, <argument pos:start="529:29" pos:end="529:34"><expr pos:start="529:29" pos:end="529:34"><name pos:start="529:29" pos:end="529:34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="533:13" pos:end="533:38"><expr pos:start="533:13" pos:end="533:37"><call pos:start="533:13" pos:end="533:37"><name pos:start="533:13" pos:end="533:22">aml_append</name><argument_list pos:start="533:23" pos:end="533:37">(<argument pos:start="533:24" pos:end="533:31"><expr pos:start="533:24" pos:end="533:31"><name pos:start="533:24" pos:end="533:31">sb_scope</name></expr></argument>, <argument pos:start="533:34" pos:end="533:36"><expr pos:start="533:34" pos:end="533:36"><name pos:start="533:34" pos:end="533:36">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="539:9" pos:end="543:11">/* build this code:

         *   Method(NTFY, 2) {If (LEqual(Arg0, 0x00)) {Notify(CP00, Arg1)} ...}

         */</comment>

        <comment type="block" pos:start="545:9" pos:end="545:43">/* Arg0 = Processor ID = APIC ID */</comment>

        <expr_stmt pos:start="547:9" pos:end="547:39"><expr pos:start="547:9" pos:end="547:38"><name pos:start="547:9" pos:end="547:14">method</name> <operator pos:start="547:16" pos:end="547:16">=</operator> <call pos:start="547:18" pos:end="547:38"><name pos:start="547:18" pos:end="547:27">aml_method</name><argument_list pos:start="547:28" pos:end="547:38">(<argument pos:start="547:29" pos:end="547:34"><expr pos:start="547:29" pos:end="547:34"><literal type="string" pos:start="547:29" pos:end="547:34">"NTFY"</literal></expr></argument>, <argument pos:start="547:37" pos:end="547:37"><expr pos:start="547:37" pos:end="547:37"><literal type="number" pos:start="547:37" pos:end="547:37">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="549:9" pos:end="561:9">for <control pos:start="549:13" pos:end="549:39">(<init pos:start="549:14" pos:end="549:19"><expr pos:start="549:14" pos:end="549:18"><name pos:start="549:14" pos:end="549:14">i</name> <operator pos:start="549:16" pos:end="549:16">=</operator> <literal type="number" pos:start="549:18" pos:end="549:18">0</literal></expr>;</init> <condition pos:start="549:21" pos:end="549:34"><expr pos:start="549:21" pos:end="549:33"><name pos:start="549:21" pos:end="549:21">i</name> <operator pos:start="549:23" pos:end="549:23">&lt;</operator> <name pos:start="549:25" pos:end="549:33">acpi_cpus</name></expr>;</condition> <incr pos:start="549:36" pos:end="549:38"><expr pos:start="549:36" pos:end="549:38"><name pos:start="549:36" pos:end="549:36">i</name><operator pos:start="549:37" pos:end="549:38">++</operator></expr></incr>)</control> <block pos:start="549:41" pos:end="561:9">{<block_content pos:start="551:13" pos:end="559:38">

            <expr_stmt pos:start="551:13" pos:end="551:62"><expr pos:start="551:13" pos:end="551:61"><name pos:start="551:13" pos:end="551:17">ifctx</name> <operator pos:start="551:19" pos:end="551:19">=</operator> <call pos:start="551:21" pos:end="551:61"><name pos:start="551:21" pos:end="551:26">aml_if</name><argument_list pos:start="551:27" pos:end="551:61">(<argument pos:start="551:28" pos:end="551:60"><expr pos:start="551:28" pos:end="551:60"><call pos:start="551:28" pos:end="551:60"><name pos:start="551:28" pos:end="551:36">aml_equal</name><argument_list pos:start="551:37" pos:end="551:60">(<argument pos:start="551:38" pos:end="551:47"><expr pos:start="551:38" pos:end="551:47"><call pos:start="551:38" pos:end="551:47"><name pos:start="551:38" pos:end="551:44">aml_arg</name><argument_list pos:start="551:45" pos:end="551:47">(<argument pos:start="551:46" pos:end="551:46"><expr pos:start="551:46" pos:end="551:46"><literal type="number" pos:start="551:46" pos:end="551:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="551:50" pos:end="551:59"><expr pos:start="551:50" pos:end="551:59"><call pos:start="551:50" pos:end="551:59"><name pos:start="551:50" pos:end="551:56">aml_int</name><argument_list pos:start="551:57" pos:end="551:59">(<argument pos:start="551:58" pos:end="551:58"><expr pos:start="551:58" pos:end="551:58"><name pos:start="551:58" pos:end="551:58">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="553:13" pos:end="557:14"><expr pos:start="553:13" pos:end="557:13"><call pos:start="553:13" pos:end="557:13"><name pos:start="553:13" pos:end="553:22">aml_append</name><argument_list pos:start="553:23" pos:end="557:13">(<argument pos:start="553:24" pos:end="553:28"><expr pos:start="553:24" pos:end="553:28"><name pos:start="553:24" pos:end="553:28">ifctx</name></expr></argument>,

                <argument pos:start="555:17" pos:end="555:62"><expr pos:start="555:17" pos:end="555:62"><call pos:start="555:17" pos:end="555:62"><name pos:start="555:17" pos:end="555:26">aml_notify</name><argument_list pos:start="555:27" pos:end="555:62">(<argument pos:start="555:28" pos:end="555:49"><expr pos:start="555:28" pos:end="555:49"><call pos:start="555:28" pos:end="555:49"><name pos:start="555:28" pos:end="555:35">aml_name</name><argument_list pos:start="555:36" pos:end="555:49">(<argument pos:start="555:37" pos:end="555:45"><expr pos:start="555:37" pos:end="555:45"><literal type="string" pos:start="555:37" pos:end="555:45">"CP%.02X"</literal></expr></argument>, <argument pos:start="555:48" pos:end="555:48"><expr pos:start="555:48" pos:end="555:48"><name pos:start="555:48" pos:end="555:48">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="555:52" pos:end="555:61"><expr pos:start="555:52" pos:end="555:61"><call pos:start="555:52" pos:end="555:61"><name pos:start="555:52" pos:end="555:58">aml_arg</name><argument_list pos:start="555:59" pos:end="555:61">(<argument pos:start="555:60" pos:end="555:60"><expr pos:start="555:60" pos:end="555:60"><literal type="number" pos:start="555:60" pos:end="555:60">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

            )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="559:13" pos:end="559:38"><expr pos:start="559:13" pos:end="559:37"><call pos:start="559:13" pos:end="559:37"><name pos:start="559:13" pos:end="559:22">aml_append</name><argument_list pos:start="559:23" pos:end="559:37">(<argument pos:start="559:24" pos:end="559:29"><expr pos:start="559:24" pos:end="559:29"><name pos:start="559:24" pos:end="559:29">method</name></expr></argument>, <argument pos:start="559:32" pos:end="559:36"><expr pos:start="559:32" pos:end="559:36"><name pos:start="559:32" pos:end="559:36">ifctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="563:9" pos:end="563:37"><expr pos:start="563:9" pos:end="563:36"><call pos:start="563:9" pos:end="563:36"><name pos:start="563:9" pos:end="563:18">aml_append</name><argument_list pos:start="563:19" pos:end="563:36">(<argument pos:start="563:20" pos:end="563:27"><expr pos:start="563:20" pos:end="563:27"><name pos:start="563:20" pos:end="563:27">sb_scope</name></expr></argument>, <argument pos:start="563:30" pos:end="563:35"><expr pos:start="563:30" pos:end="563:35"><name pos:start="563:30" pos:end="563:35">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="567:9" pos:end="579:11">/* build "Name(CPON, Package() { One, One, ..., Zero, Zero, ... })"

         *

         * Note: The ability to create variable-sized packages was first

         * introduced in ACPI 2.0. ACPI 1.0 only allowed fixed-size packages

         * ith up to 255 elements. Windows guests up to win2k8 fail when

         * VarPackageOp is used.

         */</comment>

        <expr_stmt pos:start="581:9" pos:end="583:59"><expr pos:start="581:9" pos:end="583:58"><name pos:start="581:9" pos:end="581:11">pkg</name> <operator pos:start="581:13" pos:end="581:13">=</operator> <ternary pos:start="581:15" pos:end="583:58"><condition pos:start="581:15" pos:end="581:32"><expr pos:start="581:15" pos:end="581:30"><name pos:start="581:15" pos:end="581:23">acpi_cpus</name> <operator pos:start="581:25" pos:end="581:26">&lt;=</operator> <literal type="number" pos:start="581:28" pos:end="581:30">255</literal></expr> ?</condition><then pos:start="581:34" pos:end="581:55"> <expr pos:start="581:34" pos:end="581:55"><call pos:start="581:34" pos:end="581:55"><name pos:start="581:34" pos:end="581:44">aml_package</name><argument_list pos:start="581:45" pos:end="581:55">(<argument pos:start="581:46" pos:end="581:54"><expr pos:start="581:46" pos:end="581:54"><name pos:start="581:46" pos:end="581:54">acpi_cpus</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="581:57" pos:end="583:58">:

                                 <expr pos:start="583:34" pos:end="583:58"><call pos:start="583:34" pos:end="583:58"><name pos:start="583:34" pos:end="583:47">aml_varpackage</name><argument_list pos:start="583:48" pos:end="583:58">(<argument pos:start="583:49" pos:end="583:57"><expr pos:start="583:49" pos:end="583:57"><name pos:start="583:49" pos:end="583:57">acpi_cpus</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



        <for pos:start="587:9" pos:end="593:9">for <control pos:start="587:13" pos:end="587:39">(<init pos:start="587:14" pos:end="587:19"><expr pos:start="587:14" pos:end="587:18"><name pos:start="587:14" pos:end="587:14">i</name> <operator pos:start="587:16" pos:end="587:16">=</operator> <literal type="number" pos:start="587:18" pos:end="587:18">0</literal></expr>;</init> <condition pos:start="587:21" pos:end="587:34"><expr pos:start="587:21" pos:end="587:33"><name pos:start="587:21" pos:end="587:21">i</name> <operator pos:start="587:23" pos:end="587:23">&lt;</operator> <name pos:start="587:25" pos:end="587:33">acpi_cpus</name></expr>;</condition> <incr pos:start="587:36" pos:end="587:38"><expr pos:start="587:36" pos:end="587:38"><name pos:start="587:36" pos:end="587:36">i</name><operator pos:start="587:37" pos:end="587:38">++</operator></expr></incr>)</control> <block pos:start="587:41" pos:end="593:9">{<block_content pos:start="589:13" pos:end="591:40">

            <decl_stmt pos:start="589:13" pos:end="589:67"><decl pos:start="589:13" pos:end="589:66"><type pos:start="589:13" pos:end="589:19"><name pos:start="589:13" pos:end="589:19">uint8_t</name></type> <name pos:start="589:21" pos:end="589:21">b</name> <init pos:start="589:23" pos:end="589:66">= <expr pos:start="589:25" pos:end="589:66"><ternary pos:start="589:25" pos:end="589:66"><condition pos:start="589:25" pos:end="589:54"><expr pos:start="589:25" pos:end="589:52"><call pos:start="589:25" pos:end="589:52"><name pos:start="589:25" pos:end="589:32">test_bit</name><argument_list pos:start="589:33" pos:end="589:52">(<argument pos:start="589:34" pos:end="589:34"><expr pos:start="589:34" pos:end="589:34"><name pos:start="589:34" pos:end="589:34">i</name></expr></argument>, <argument pos:start="589:37" pos:end="589:51"><expr pos:start="589:37" pos:end="589:51"><name pos:start="589:37" pos:end="589:51"><name pos:start="589:37" pos:end="589:39">cpu</name><operator pos:start="589:40" pos:end="589:41">-&gt;</operator><name pos:start="589:42" pos:end="589:51">found_cpus</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="589:56" pos:end="589:59"> <expr pos:start="589:56" pos:end="589:59"><literal type="number" pos:start="589:56" pos:end="589:59">0x01</literal></expr> </then><else pos:start="589:61" pos:end="589:66">: <expr pos:start="589:63" pos:end="589:66"><literal type="number" pos:start="589:63" pos:end="589:66">0x00</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="591:13" pos:end="591:40"><expr pos:start="591:13" pos:end="591:39"><call pos:start="591:13" pos:end="591:39"><name pos:start="591:13" pos:end="591:22">aml_append</name><argument_list pos:start="591:23" pos:end="591:39">(<argument pos:start="591:24" pos:end="591:26"><expr pos:start="591:24" pos:end="591:26"><name pos:start="591:24" pos:end="591:26">pkg</name></expr></argument>, <argument pos:start="591:29" pos:end="591:38"><expr pos:start="591:29" pos:end="591:38"><call pos:start="591:29" pos:end="591:38"><name pos:start="591:29" pos:end="591:35">aml_int</name><argument_list pos:start="591:36" pos:end="591:38">(<argument pos:start="591:37" pos:end="591:37"><expr pos:start="591:37" pos:end="591:37"><name pos:start="591:37" pos:end="591:37">b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="595:9" pos:end="595:57"><expr pos:start="595:9" pos:end="595:56"><call pos:start="595:9" pos:end="595:56"><name pos:start="595:9" pos:end="595:18">aml_append</name><argument_list pos:start="595:19" pos:end="595:56">(<argument pos:start="595:20" pos:end="595:27"><expr pos:start="595:20" pos:end="595:27"><name pos:start="595:20" pos:end="595:27">sb_scope</name></expr></argument>, <argument pos:start="595:30" pos:end="595:55"><expr pos:start="595:30" pos:end="595:55"><call pos:start="595:30" pos:end="595:55"><name pos:start="595:30" pos:end="595:42">aml_name_decl</name><argument_list pos:start="595:43" pos:end="595:55">(<argument pos:start="595:44" pos:end="595:49"><expr pos:start="595:44" pos:end="595:49"><literal type="string" pos:start="595:44" pos:end="595:49">"CPON"</literal></expr></argument>, <argument pos:start="595:52" pos:end="595:54"><expr pos:start="595:52" pos:end="595:54"><name pos:start="595:52" pos:end="595:54">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="599:9" pos:end="599:34">/* build memory devices */</comment>

        <expr_stmt pos:start="601:9" pos:end="601:45"><expr pos:start="601:9" pos:end="601:44"><call pos:start="601:9" pos:end="601:44"><name pos:start="601:9" pos:end="601:14">assert</name><argument_list pos:start="601:15" pos:end="601:44">(<argument pos:start="601:16" pos:end="601:43"><expr pos:start="601:16" pos:end="601:43"><name pos:start="601:16" pos:end="601:21">nr_mem</name> <operator pos:start="601:23" pos:end="601:24">&lt;=</operator> <name pos:start="601:26" pos:end="601:43">ACPI_MAX_RAM_SLOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="603:9" pos:end="603:74"><expr pos:start="603:9" pos:end="603:73"><name pos:start="603:9" pos:end="603:13">scope</name> <operator pos:start="603:15" pos:end="603:15">=</operator> <call pos:start="603:17" pos:end="603:73"><name pos:start="603:17" pos:end="603:25">aml_scope</name><argument_list pos:start="603:26" pos:end="603:73">(<argument pos:start="603:27" pos:end="603:72"><expr pos:start="603:27" pos:end="603:72"><literal type="string" pos:start="603:27" pos:end="603:39">"\\_SB.PCI0."</literal> <call pos:start="603:41" pos:end="603:72"><name pos:start="603:41" pos:end="603:49">stringify</name><argument_list pos:start="603:50" pos:end="603:72">(<argument pos:start="603:51" pos:end="603:71"><expr pos:start="603:51" pos:end="603:71"><name pos:start="603:51" pos:end="603:71">MEMORY_HOTPLUG_DEVICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="605:9" pos:end="609:10"><expr pos:start="605:9" pos:end="609:9"><call pos:start="605:9" pos:end="609:9"><name pos:start="605:9" pos:end="605:18">aml_append</name><argument_list pos:start="605:19" pos:end="609:9">(<argument pos:start="605:20" pos:end="605:24"><expr pos:start="605:20" pos:end="605:24"><name pos:start="605:20" pos:end="605:24">scope</name></expr></argument>,

            <argument pos:start="607:13" pos:end="607:74"><expr pos:start="607:13" pos:end="607:74"><call pos:start="607:13" pos:end="607:74"><name pos:start="607:13" pos:end="607:25">aml_name_decl</name><argument_list pos:start="607:26" pos:end="607:74">(<argument pos:start="607:27" pos:end="607:56"><expr pos:start="607:27" pos:end="607:56"><call pos:start="607:27" pos:end="607:56"><name pos:start="607:27" pos:end="607:35">stringify</name><argument_list pos:start="607:36" pos:end="607:56">(<argument pos:start="607:37" pos:end="607:55"><expr pos:start="607:37" pos:end="607:55"><name pos:start="607:37" pos:end="607:55">MEMORY_SLOTS_NUMBER</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="607:59" pos:end="607:73"><expr pos:start="607:59" pos:end="607:73"><call pos:start="607:59" pos:end="607:73"><name pos:start="607:59" pos:end="607:65">aml_int</name><argument_list pos:start="607:66" pos:end="607:73">(<argument pos:start="607:67" pos:end="607:72"><expr pos:start="607:67" pos:end="607:72"><name pos:start="607:67" pos:end="607:72">nr_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="613:9" pos:end="613:38"><expr pos:start="613:9" pos:end="613:37"><name pos:start="613:9" pos:end="613:11">crs</name> <operator pos:start="613:13" pos:end="613:13">=</operator> <call pos:start="613:15" pos:end="613:37"><name pos:start="613:15" pos:end="613:35">aml_resource_template</name><argument_list pos:start="613:36" pos:end="613:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="615:9" pos:end="621:10"><expr pos:start="615:9" pos:end="621:9"><call pos:start="615:9" pos:end="621:9"><name pos:start="615:9" pos:end="615:18">aml_append</name><argument_list pos:start="615:19" pos:end="621:9">(<argument pos:start="615:20" pos:end="615:22"><expr pos:start="615:20" pos:end="615:22"><name pos:start="615:20" pos:end="615:22">crs</name></expr></argument>,

            <argument pos:start="617:13" pos:end="619:37"><expr pos:start="617:13" pos:end="619:37"><call pos:start="617:13" pos:end="619:37"><name pos:start="617:13" pos:end="617:18">aml_io</name><argument_list pos:start="617:19" pos:end="619:37">(<argument pos:start="617:20" pos:end="617:31"><expr pos:start="617:20" pos:end="617:31"><name pos:start="617:20" pos:end="617:31">AML_DECODE16</name></expr></argument>, <argument pos:start="617:34" pos:end="617:51"><expr pos:start="617:34" pos:end="617:51"><name pos:start="617:34" pos:end="617:51"><name pos:start="617:34" pos:end="617:35">pm</name><operator pos:start="617:36" pos:end="617:37">-&gt;</operator><name pos:start="617:38" pos:end="617:51">mem_hp_io_base</name></name></expr></argument>, <argument pos:start="617:54" pos:end="617:71"><expr pos:start="617:54" pos:end="617:71"><name pos:start="617:54" pos:end="617:71"><name pos:start="617:54" pos:end="617:55">pm</name><operator pos:start="617:56" pos:end="617:57">-&gt;</operator><name pos:start="617:58" pos:end="617:71">mem_hp_io_base</name></name></expr></argument>, <argument pos:start="617:74" pos:end="617:74"><expr pos:start="617:74" pos:end="617:74"><literal type="number" pos:start="617:74" pos:end="617:74">0</literal></expr></argument>,

                   <argument pos:start="619:20" pos:end="619:36"><expr pos:start="619:20" pos:end="619:36"><name pos:start="619:20" pos:end="619:36"><name pos:start="619:20" pos:end="619:21">pm</name><operator pos:start="619:22" pos:end="619:23">-&gt;</operator><name pos:start="619:24" pos:end="619:36">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="623:9" pos:end="623:54"><expr pos:start="623:9" pos:end="623:53"><call pos:start="623:9" pos:end="623:53"><name pos:start="623:9" pos:end="623:18">aml_append</name><argument_list pos:start="623:19" pos:end="623:53">(<argument pos:start="623:20" pos:end="623:24"><expr pos:start="623:20" pos:end="623:24"><name pos:start="623:20" pos:end="623:24">scope</name></expr></argument>, <argument pos:start="623:27" pos:end="623:52"><expr pos:start="623:27" pos:end="623:52"><call pos:start="623:27" pos:end="623:52"><name pos:start="623:27" pos:end="623:39">aml_name_decl</name><argument_list pos:start="623:40" pos:end="623:52">(<argument pos:start="623:41" pos:end="623:46"><expr pos:start="623:41" pos:end="623:46"><literal type="string" pos:start="623:41" pos:end="623:46">"_CRS"</literal></expr></argument>, <argument pos:start="623:49" pos:end="623:51"><expr pos:start="623:49" pos:end="623:51"><name pos:start="623:49" pos:end="623:51">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="627:9" pos:end="633:10"><expr pos:start="627:9" pos:end="633:9"><call pos:start="627:9" pos:end="633:9"><name pos:start="627:9" pos:end="627:18">aml_append</name><argument_list pos:start="627:19" pos:end="633:9">(<argument pos:start="627:20" pos:end="627:24"><expr pos:start="627:20" pos:end="627:24"><name pos:start="627:20" pos:end="627:24">scope</name></expr></argument>, <argument pos:start="627:27" pos:end="631:50"><expr pos:start="627:27" pos:end="631:50"><call pos:start="627:27" pos:end="631:50"><name pos:start="627:27" pos:end="627:46">aml_operation_region</name><argument_list pos:start="627:47" pos:end="631:50">(

            <argument pos:start="629:13" pos:end="629:47"><expr pos:start="629:13" pos:end="629:47"><call pos:start="629:13" pos:end="629:47"><name pos:start="629:13" pos:end="629:21">stringify</name><argument_list pos:start="629:22" pos:end="629:47">(<argument pos:start="629:23" pos:end="629:46"><expr pos:start="629:23" pos:end="629:46"><name pos:start="629:23" pos:end="629:46">MEMORY_HOTPLUG_IO_REGION</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="629:50" pos:end="629:62"><expr pos:start="629:50" pos:end="629:62"><name pos:start="629:50" pos:end="629:62">AML_SYSTEM_IO</name></expr></argument>,

            <argument pos:start="631:13" pos:end="631:30"><expr pos:start="631:13" pos:end="631:30"><name pos:start="631:13" pos:end="631:30"><name pos:start="631:13" pos:end="631:14">pm</name><operator pos:start="631:15" pos:end="631:16">-&gt;</operator><name pos:start="631:17" pos:end="631:30">mem_hp_io_base</name></name></expr></argument>, <argument pos:start="631:33" pos:end="631:49"><expr pos:start="631:33" pos:end="631:49"><name pos:start="631:33" pos:end="631:49"><name pos:start="631:33" pos:end="631:34">pm</name><operator pos:start="631:35" pos:end="631:36">-&gt;</operator><name pos:start="631:37" pos:end="631:49">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="637:9" pos:end="639:40"><expr pos:start="637:9" pos:end="639:39"><name pos:start="637:9" pos:end="637:13">field</name> <operator pos:start="637:15" pos:end="637:15">=</operator> <call pos:start="637:17" pos:end="639:39"><name pos:start="637:17" pos:end="637:25">aml_field</name><argument_list pos:start="637:26" pos:end="639:39">(<argument pos:start="637:27" pos:end="637:61"><expr pos:start="637:27" pos:end="637:61"><call pos:start="637:27" pos:end="637:61"><name pos:start="637:27" pos:end="637:35">stringify</name><argument_list pos:start="637:36" pos:end="637:61">(<argument pos:start="637:37" pos:end="637:60"><expr pos:start="637:37" pos:end="637:60"><name pos:start="637:37" pos:end="637:60">MEMORY_HOTPLUG_IO_REGION</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="637:64" pos:end="637:76"><expr pos:start="637:64" pos:end="637:76"><name pos:start="637:64" pos:end="637:76">AML_DWORD_ACC</name></expr></argument>,

                          <argument pos:start="639:27" pos:end="639:38"><expr pos:start="639:27" pos:end="639:38"><name pos:start="639:27" pos:end="639:38">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="641:9" pos:end="643:66"><expr pos:start="641:9" pos:end="643:65"><call pos:start="641:9" pos:end="643:65"><name pos:start="641:9" pos:end="641:18">aml_append</name><argument_list pos:start="641:19" pos:end="643:65">(<argument pos:start="641:20" pos:end="641:24"><expr pos:start="641:20" pos:end="641:24"><name pos:start="641:20" pos:end="641:24">field</name></expr></argument>, <comment type="block" pos:start="641:27" pos:end="641:41">/* read only */</comment>

            <argument pos:start="643:13" pos:end="643:64"><expr pos:start="643:13" pos:end="643:64"><call pos:start="643:13" pos:end="643:64"><name pos:start="643:13" pos:end="643:27">aml_named_field</name><argument_list pos:start="643:28" pos:end="643:64">(<argument pos:start="643:29" pos:end="643:59"><expr pos:start="643:29" pos:end="643:59"><call pos:start="643:29" pos:end="643:59"><name pos:start="643:29" pos:end="643:37">stringify</name><argument_list pos:start="643:38" pos:end="643:59">(<argument pos:start="643:39" pos:end="643:58"><expr pos:start="643:39" pos:end="643:58"><name pos:start="643:39" pos:end="643:58">MEMORY_SLOT_ADDR_LOW</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="643:62" pos:end="643:63"><expr pos:start="643:62" pos:end="643:63"><literal type="number" pos:start="643:62" pos:end="643:63">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="645:9" pos:end="647:67"><expr pos:start="645:9" pos:end="647:66"><call pos:start="645:9" pos:end="647:66"><name pos:start="645:9" pos:end="645:18">aml_append</name><argument_list pos:start="645:19" pos:end="647:66">(<argument pos:start="645:20" pos:end="645:24"><expr pos:start="645:20" pos:end="645:24"><name pos:start="645:20" pos:end="645:24">field</name></expr></argument>, <comment type="block" pos:start="645:27" pos:end="645:41">/* read only */</comment>

            <argument pos:start="647:13" pos:end="647:65"><expr pos:start="647:13" pos:end="647:65"><call pos:start="647:13" pos:end="647:65"><name pos:start="647:13" pos:end="647:27">aml_named_field</name><argument_list pos:start="647:28" pos:end="647:65">(<argument pos:start="647:29" pos:end="647:60"><expr pos:start="647:29" pos:end="647:60"><call pos:start="647:29" pos:end="647:60"><name pos:start="647:29" pos:end="647:37">stringify</name><argument_list pos:start="647:38" pos:end="647:60">(<argument pos:start="647:39" pos:end="647:59"><expr pos:start="647:39" pos:end="647:59"><name pos:start="647:39" pos:end="647:59">MEMORY_SLOT_ADDR_HIGH</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="647:63" pos:end="647:64"><expr pos:start="647:63" pos:end="647:64"><literal type="number" pos:start="647:63" pos:end="647:64">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="649:9" pos:end="651:66"><expr pos:start="649:9" pos:end="651:65"><call pos:start="649:9" pos:end="651:65"><name pos:start="649:9" pos:end="649:18">aml_append</name><argument_list pos:start="649:19" pos:end="651:65">(<argument pos:start="649:20" pos:end="649:24"><expr pos:start="649:20" pos:end="649:24"><name pos:start="649:20" pos:end="649:24">field</name></expr></argument>, <comment type="block" pos:start="649:27" pos:end="649:41">/* read only */</comment>

            <argument pos:start="651:13" pos:end="651:64"><expr pos:start="651:13" pos:end="651:64"><call pos:start="651:13" pos:end="651:64"><name pos:start="651:13" pos:end="651:27">aml_named_field</name><argument_list pos:start="651:28" pos:end="651:64">(<argument pos:start="651:29" pos:end="651:59"><expr pos:start="651:29" pos:end="651:59"><call pos:start="651:29" pos:end="651:59"><name pos:start="651:29" pos:end="651:37">stringify</name><argument_list pos:start="651:38" pos:end="651:59">(<argument pos:start="651:39" pos:end="651:58"><expr pos:start="651:39" pos:end="651:58"><name pos:start="651:39" pos:end="651:58">MEMORY_SLOT_SIZE_LOW</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="651:62" pos:end="651:63"><expr pos:start="651:62" pos:end="651:63"><literal type="number" pos:start="651:62" pos:end="651:63">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="653:9" pos:end="655:67"><expr pos:start="653:9" pos:end="655:66"><call pos:start="653:9" pos:end="655:66"><name pos:start="653:9" pos:end="653:18">aml_append</name><argument_list pos:start="653:19" pos:end="655:66">(<argument pos:start="653:20" pos:end="653:24"><expr pos:start="653:20" pos:end="653:24"><name pos:start="653:20" pos:end="653:24">field</name></expr></argument>, <comment type="block" pos:start="653:27" pos:end="653:41">/* read only */</comment>

            <argument pos:start="655:13" pos:end="655:65"><expr pos:start="655:13" pos:end="655:65"><call pos:start="655:13" pos:end="655:65"><name pos:start="655:13" pos:end="655:27">aml_named_field</name><argument_list pos:start="655:28" pos:end="655:65">(<argument pos:start="655:29" pos:end="655:60"><expr pos:start="655:29" pos:end="655:60"><call pos:start="655:29" pos:end="655:60"><name pos:start="655:29" pos:end="655:37">stringify</name><argument_list pos:start="655:38" pos:end="655:60">(<argument pos:start="655:39" pos:end="655:59"><expr pos:start="655:39" pos:end="655:59"><name pos:start="655:39" pos:end="655:59">MEMORY_SLOT_SIZE_HIGH</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="655:63" pos:end="655:64"><expr pos:start="655:63" pos:end="655:64"><literal type="number" pos:start="655:63" pos:end="655:64">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="657:9" pos:end="659:67"><expr pos:start="657:9" pos:end="659:66"><call pos:start="657:9" pos:end="659:66"><name pos:start="657:9" pos:end="657:18">aml_append</name><argument_list pos:start="657:19" pos:end="659:66">(<argument pos:start="657:20" pos:end="657:24"><expr pos:start="657:20" pos:end="657:24"><name pos:start="657:20" pos:end="657:24">field</name></expr></argument>, <comment type="block" pos:start="657:27" pos:end="657:41">/* read only */</comment>

            <argument pos:start="659:13" pos:end="659:65"><expr pos:start="659:13" pos:end="659:65"><call pos:start="659:13" pos:end="659:65"><name pos:start="659:13" pos:end="659:27">aml_named_field</name><argument_list pos:start="659:28" pos:end="659:65">(<argument pos:start="659:29" pos:end="659:60"><expr pos:start="659:29" pos:end="659:60"><call pos:start="659:29" pos:end="659:60"><name pos:start="659:29" pos:end="659:37">stringify</name><argument_list pos:start="659:38" pos:end="659:60">(<argument pos:start="659:39" pos:end="659:59"><expr pos:start="659:39" pos:end="659:59"><name pos:start="659:39" pos:end="659:59">MEMORY_SLOT_PROXIMITY</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="659:63" pos:end="659:64"><expr pos:start="659:63" pos:end="659:64"><literal type="number" pos:start="659:63" pos:end="659:64">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="661:9" pos:end="661:33"><expr pos:start="661:9" pos:end="661:32"><call pos:start="661:9" pos:end="661:32"><name pos:start="661:9" pos:end="661:18">aml_append</name><argument_list pos:start="661:19" pos:end="661:32">(<argument pos:start="661:20" pos:end="661:24"><expr pos:start="661:20" pos:end="661:24"><name pos:start="661:20" pos:end="661:24">scope</name></expr></argument>, <argument pos:start="661:27" pos:end="661:31"><expr pos:start="661:27" pos:end="661:31"><name pos:start="661:27" pos:end="661:31">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="665:9" pos:end="667:46"><expr pos:start="665:9" pos:end="667:45"><name pos:start="665:9" pos:end="665:13">field</name> <operator pos:start="665:15" pos:end="665:15">=</operator> <call pos:start="665:17" pos:end="667:45"><name pos:start="665:17" pos:end="665:25">aml_field</name><argument_list pos:start="665:26" pos:end="667:45">(<argument pos:start="665:27" pos:end="665:61"><expr pos:start="665:27" pos:end="665:61"><call pos:start="665:27" pos:end="665:61"><name pos:start="665:27" pos:end="665:35">stringify</name><argument_list pos:start="665:36" pos:end="665:61">(<argument pos:start="665:37" pos:end="665:60"><expr pos:start="665:37" pos:end="665:60"><name pos:start="665:37" pos:end="665:60">MEMORY_HOTPLUG_IO_REGION</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="665:64" pos:end="665:75"><expr pos:start="665:64" pos:end="665:75"><name pos:start="665:64" pos:end="665:75">AML_BYTE_ACC</name></expr></argument>,

                          <argument pos:start="667:27" pos:end="667:44"><expr pos:start="667:27" pos:end="667:44"><name pos:start="667:27" pos:end="667:44">AML_WRITE_AS_ZEROS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="669:9" pos:end="669:74"><expr pos:start="669:9" pos:end="669:73"><call pos:start="669:9" pos:end="669:73"><name pos:start="669:9" pos:end="669:18">aml_append</name><argument_list pos:start="669:19" pos:end="669:73">(<argument pos:start="669:20" pos:end="669:24"><expr pos:start="669:20" pos:end="669:24"><name pos:start="669:20" pos:end="669:24">field</name></expr></argument>, <argument pos:start="669:27" pos:end="669:72"><expr pos:start="669:27" pos:end="669:72"><call pos:start="669:27" pos:end="669:72"><name pos:start="669:27" pos:end="669:44">aml_reserved_field</name><argument_list pos:start="669:45" pos:end="669:72">(<argument pos:start="669:46" pos:end="669:48"><expr pos:start="669:46" pos:end="669:48"><literal type="number" pos:start="669:46" pos:end="669:48">160</literal></expr></argument> <comment type="block" pos:start="669:50" pos:end="669:71">/* bits, Offset(20) */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="671:9" pos:end="673:64"><expr pos:start="671:9" pos:end="673:63"><call pos:start="671:9" pos:end="673:63"><name pos:start="671:9" pos:end="671:18">aml_append</name><argument_list pos:start="671:19" pos:end="673:63">(<argument pos:start="671:20" pos:end="671:24"><expr pos:start="671:20" pos:end="671:24"><name pos:start="671:20" pos:end="671:24">field</name></expr></argument>, <comment type="block" pos:start="671:27" pos:end="671:55">/* 1 if enabled, read only */</comment>

            <argument pos:start="673:13" pos:end="673:62"><expr pos:start="673:13" pos:end="673:62"><call pos:start="673:13" pos:end="673:62"><name pos:start="673:13" pos:end="673:27">aml_named_field</name><argument_list pos:start="673:28" pos:end="673:62">(<argument pos:start="673:29" pos:end="673:58"><expr pos:start="673:29" pos:end="673:58"><call pos:start="673:29" pos:end="673:58"><name pos:start="673:29" pos:end="673:37">stringify</name><argument_list pos:start="673:38" pos:end="673:58">(<argument pos:start="673:39" pos:end="673:57"><expr pos:start="673:39" pos:end="673:57"><name pos:start="673:39" pos:end="673:57">MEMORY_SLOT_ENABLED</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="673:61" pos:end="673:61"><expr pos:start="673:61" pos:end="673:61"><literal type="number" pos:start="673:61" pos:end="673:61">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="675:9" pos:end="679:69"><expr pos:start="675:9" pos:end="679:68"><call pos:start="675:9" pos:end="679:68"><name pos:start="675:9" pos:end="675:18">aml_append</name><argument_list pos:start="675:19" pos:end="679:68">(<argument pos:start="675:20" pos:end="675:24"><expr pos:start="675:20" pos:end="675:24"><name pos:start="675:20" pos:end="675:24">field</name></expr></argument>,

            <comment type="block" pos:start="677:13" pos:end="677:73">/*(read) 1 if has a insert event. (write) 1 to clear event */</comment>

            <argument pos:start="679:13" pos:end="679:67"><expr pos:start="679:13" pos:end="679:67"><call pos:start="679:13" pos:end="679:67"><name pos:start="679:13" pos:end="679:27">aml_named_field</name><argument_list pos:start="679:28" pos:end="679:67">(<argument pos:start="679:29" pos:end="679:63"><expr pos:start="679:29" pos:end="679:63"><call pos:start="679:29" pos:end="679:63"><name pos:start="679:29" pos:end="679:37">stringify</name><argument_list pos:start="679:38" pos:end="679:63">(<argument pos:start="679:39" pos:end="679:62"><expr pos:start="679:39" pos:end="679:62"><name pos:start="679:39" pos:end="679:62">MEMORY_SLOT_INSERT_EVENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="679:66" pos:end="679:66"><expr pos:start="679:66" pos:end="679:66"><literal type="number" pos:start="679:66" pos:end="679:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="681:9" pos:end="685:69"><expr pos:start="681:9" pos:end="685:68"><call pos:start="681:9" pos:end="685:68"><name pos:start="681:9" pos:end="681:18">aml_append</name><argument_list pos:start="681:19" pos:end="685:68">(<argument pos:start="681:20" pos:end="681:24"><expr pos:start="681:20" pos:end="681:24"><name pos:start="681:20" pos:end="681:24">field</name></expr></argument>,

            <comment type="block" pos:start="683:13" pos:end="683:74">/* (read) 1 if has a remove event. (write) 1 to clear event */</comment>

            <argument pos:start="685:13" pos:end="685:67"><expr pos:start="685:13" pos:end="685:67"><call pos:start="685:13" pos:end="685:67"><name pos:start="685:13" pos:end="685:27">aml_named_field</name><argument_list pos:start="685:28" pos:end="685:67">(<argument pos:start="685:29" pos:end="685:63"><expr pos:start="685:29" pos:end="685:63"><call pos:start="685:29" pos:end="685:63"><name pos:start="685:29" pos:end="685:37">stringify</name><argument_list pos:start="685:38" pos:end="685:63">(<argument pos:start="685:39" pos:end="685:62"><expr pos:start="685:39" pos:end="685:62"><name pos:start="685:39" pos:end="685:62">MEMORY_SLOT_REMOVE_EVENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="685:66" pos:end="685:66"><expr pos:start="685:66" pos:end="685:66"><literal type="number" pos:start="685:66" pos:end="685:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="687:9" pos:end="691:62"><expr pos:start="687:9" pos:end="691:61"><call pos:start="687:9" pos:end="691:61"><name pos:start="687:9" pos:end="687:18">aml_append</name><argument_list pos:start="687:19" pos:end="691:61">(<argument pos:start="687:20" pos:end="687:24"><expr pos:start="687:20" pos:end="687:24"><name pos:start="687:20" pos:end="687:24">field</name></expr></argument>,

            <comment type="block" pos:start="689:13" pos:end="689:52">/* initiates device eject, write only */</comment>

            <argument pos:start="691:13" pos:end="691:60"><expr pos:start="691:13" pos:end="691:60"><call pos:start="691:13" pos:end="691:60"><name pos:start="691:13" pos:end="691:27">aml_named_field</name><argument_list pos:start="691:28" pos:end="691:60">(<argument pos:start="691:29" pos:end="691:56"><expr pos:start="691:29" pos:end="691:56"><call pos:start="691:29" pos:end="691:56"><name pos:start="691:29" pos:end="691:37">stringify</name><argument_list pos:start="691:38" pos:end="691:56">(<argument pos:start="691:39" pos:end="691:55"><expr pos:start="691:39" pos:end="691:55"><name pos:start="691:39" pos:end="691:55">MEMORY_SLOT_EJECT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="691:59" pos:end="691:59"><expr pos:start="691:59" pos:end="691:59"><literal type="number" pos:start="691:59" pos:end="691:59">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="693:9" pos:end="693:33"><expr pos:start="693:9" pos:end="693:32"><call pos:start="693:9" pos:end="693:32"><name pos:start="693:9" pos:end="693:18">aml_append</name><argument_list pos:start="693:19" pos:end="693:32">(<argument pos:start="693:20" pos:end="693:24"><expr pos:start="693:20" pos:end="693:24"><name pos:start="693:20" pos:end="693:24">scope</name></expr></argument>, <argument pos:start="693:27" pos:end="693:31"><expr pos:start="693:27" pos:end="693:31"><name pos:start="693:27" pos:end="693:31">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="697:9" pos:end="699:40"><expr pos:start="697:9" pos:end="699:39"><name pos:start="697:9" pos:end="697:13">field</name> <operator pos:start="697:15" pos:end="697:15">=</operator> <call pos:start="697:17" pos:end="699:39"><name pos:start="697:17" pos:end="697:25">aml_field</name><argument_list pos:start="697:26" pos:end="699:39">(<argument pos:start="697:27" pos:end="697:61"><expr pos:start="697:27" pos:end="697:61"><call pos:start="697:27" pos:end="697:61"><name pos:start="697:27" pos:end="697:35">stringify</name><argument_list pos:start="697:36" pos:end="697:61">(<argument pos:start="697:37" pos:end="697:60"><expr pos:start="697:37" pos:end="697:60"><name pos:start="697:37" pos:end="697:60">MEMORY_HOTPLUG_IO_REGION</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="697:64" pos:end="697:76"><expr pos:start="697:64" pos:end="697:76"><name pos:start="697:64" pos:end="697:76">AML_DWORD_ACC</name></expr></argument>,

                          <argument pos:start="699:27" pos:end="699:38"><expr pos:start="699:27" pos:end="699:38"><name pos:start="699:27" pos:end="699:38">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="701:9" pos:end="703:65"><expr pos:start="701:9" pos:end="703:64"><call pos:start="701:9" pos:end="703:64"><name pos:start="701:9" pos:end="701:18">aml_append</name><argument_list pos:start="701:19" pos:end="703:64">(<argument pos:start="701:20" pos:end="701:24"><expr pos:start="701:20" pos:end="701:24"><name pos:start="701:20" pos:end="701:24">field</name></expr></argument>, <comment type="block" pos:start="701:27" pos:end="701:57">/* DIMM selector, write only */</comment>

            <argument pos:start="703:13" pos:end="703:63"><expr pos:start="703:13" pos:end="703:63"><call pos:start="703:13" pos:end="703:63"><name pos:start="703:13" pos:end="703:27">aml_named_field</name><argument_list pos:start="703:28" pos:end="703:63">(<argument pos:start="703:29" pos:end="703:58"><expr pos:start="703:29" pos:end="703:58"><call pos:start="703:29" pos:end="703:58"><name pos:start="703:29" pos:end="703:37">stringify</name><argument_list pos:start="703:38" pos:end="703:58">(<argument pos:start="703:39" pos:end="703:57"><expr pos:start="703:39" pos:end="703:57"><name pos:start="703:39" pos:end="703:57">MEMORY_SLOT_SLECTOR</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="703:61" pos:end="703:62"><expr pos:start="703:61" pos:end="703:62"><literal type="number" pos:start="703:61" pos:end="703:62">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="705:9" pos:end="707:67"><expr pos:start="705:9" pos:end="707:66"><call pos:start="705:9" pos:end="707:66"><name pos:start="705:9" pos:end="705:18">aml_append</name><argument_list pos:start="705:19" pos:end="707:66">(<argument pos:start="705:20" pos:end="705:24"><expr pos:start="705:20" pos:end="705:24"><name pos:start="705:20" pos:end="705:24">field</name></expr></argument>, <comment type="block" pos:start="705:27" pos:end="705:59">/* _OST event code, write only */</comment>

            <argument pos:start="707:13" pos:end="707:65"><expr pos:start="707:13" pos:end="707:65"><call pos:start="707:13" pos:end="707:65"><name pos:start="707:13" pos:end="707:27">aml_named_field</name><argument_list pos:start="707:28" pos:end="707:65">(<argument pos:start="707:29" pos:end="707:60"><expr pos:start="707:29" pos:end="707:60"><call pos:start="707:29" pos:end="707:60"><name pos:start="707:29" pos:end="707:37">stringify</name><argument_list pos:start="707:38" pos:end="707:60">(<argument pos:start="707:39" pos:end="707:59"><expr pos:start="707:39" pos:end="707:59"><name pos:start="707:39" pos:end="707:59">MEMORY_SLOT_OST_EVENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="707:63" pos:end="707:64"><expr pos:start="707:63" pos:end="707:64"><literal type="number" pos:start="707:63" pos:end="707:64">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="709:9" pos:end="711:68"><expr pos:start="709:9" pos:end="711:67"><call pos:start="709:9" pos:end="711:67"><name pos:start="709:9" pos:end="709:18">aml_append</name><argument_list pos:start="709:19" pos:end="711:67">(<argument pos:start="709:20" pos:end="709:24"><expr pos:start="709:20" pos:end="709:24"><name pos:start="709:20" pos:end="709:24">field</name></expr></argument>, <comment type="block" pos:start="709:27" pos:end="709:60">/* _OST status code, write only */</comment>

            <argument pos:start="711:13" pos:end="711:66"><expr pos:start="711:13" pos:end="711:66"><call pos:start="711:13" pos:end="711:66"><name pos:start="711:13" pos:end="711:27">aml_named_field</name><argument_list pos:start="711:28" pos:end="711:66">(<argument pos:start="711:29" pos:end="711:61"><expr pos:start="711:29" pos:end="711:61"><call pos:start="711:29" pos:end="711:61"><name pos:start="711:29" pos:end="711:37">stringify</name><argument_list pos:start="711:38" pos:end="711:61">(<argument pos:start="711:39" pos:end="711:60"><expr pos:start="711:39" pos:end="711:60"><name pos:start="711:39" pos:end="711:60">MEMORY_SLOT_OST_STATUS</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="711:64" pos:end="711:65"><expr pos:start="711:64" pos:end="711:65"><literal type="number" pos:start="711:64" pos:end="711:65">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="713:9" pos:end="713:33"><expr pos:start="713:9" pos:end="713:32"><call pos:start="713:9" pos:end="713:32"><name pos:start="713:9" pos:end="713:18">aml_append</name><argument_list pos:start="713:19" pos:end="713:32">(<argument pos:start="713:20" pos:end="713:24"><expr pos:start="713:20" pos:end="713:24"><name pos:start="713:20" pos:end="713:24">scope</name></expr></argument>, <argument pos:start="713:27" pos:end="713:31"><expr pos:start="713:27" pos:end="713:31"><name pos:start="713:27" pos:end="713:31">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="717:9" pos:end="717:36"><expr pos:start="717:9" pos:end="717:35"><call pos:start="717:9" pos:end="717:35"><name pos:start="717:9" pos:end="717:18">aml_append</name><argument_list pos:start="717:19" pos:end="717:35">(<argument pos:start="717:20" pos:end="717:27"><expr pos:start="717:20" pos:end="717:27"><name pos:start="717:20" pos:end="717:27">sb_scope</name></expr></argument>, <argument pos:start="717:30" pos:end="717:34"><expr pos:start="717:30" pos:end="717:34"><name pos:start="717:30" pos:end="717:34">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="721:9" pos:end="795:9">for <control pos:start="721:13" pos:end="721:36">(<init pos:start="721:14" pos:end="721:19"><expr pos:start="721:14" pos:end="721:18"><name pos:start="721:14" pos:end="721:14">i</name> <operator pos:start="721:16" pos:end="721:16">=</operator> <literal type="number" pos:start="721:18" pos:end="721:18">0</literal></expr>;</init> <condition pos:start="721:21" pos:end="721:31"><expr pos:start="721:21" pos:end="721:30"><name pos:start="721:21" pos:end="721:21">i</name> <operator pos:start="721:23" pos:end="721:23">&lt;</operator> <name pos:start="721:25" pos:end="721:30">nr_mem</name></expr>;</condition> <incr pos:start="721:33" pos:end="721:35"><expr pos:start="721:33" pos:end="721:35"><name pos:start="721:33" pos:end="721:33">i</name><operator pos:start="721:34" pos:end="721:35">++</operator></expr></incr>)</control> <block pos:start="721:38" pos:end="795:9">{<block_content pos:start="725:13" pos:end="793:38">

            <cpp:define pos:start="723:13" pos:end="723:79">#<cpp:directive pos:start="723:14" pos:end="723:19">define</cpp:directive> <cpp:macro pos:start="723:21" pos:end="723:28"><name pos:start="723:21" pos:end="723:28">BASEPATH</name></cpp:macro> <cpp:value pos:start="723:30" pos:end="723:79">"\\_SB.PCI0." stringify(MEMORY_HOTPLUG_DEVICE) "."</cpp:value></cpp:define>

            <decl_stmt pos:start="725:13" pos:end="725:26"><decl pos:start="725:13" pos:end="725:25"><type pos:start="725:13" pos:end="725:24"><specifier pos:start="725:13" pos:end="725:17">const</specifier> <name pos:start="725:19" pos:end="725:22">char</name> <modifier pos:start="725:24" pos:end="725:24">*</modifier></type><name pos:start="725:25" pos:end="725:25">s</name></decl>;</decl_stmt>



            <expr_stmt pos:start="729:13" pos:end="729:42"><expr pos:start="729:13" pos:end="729:41"><name pos:start="729:13" pos:end="729:15">dev</name> <operator pos:start="729:17" pos:end="729:17">=</operator> <call pos:start="729:19" pos:end="729:41"><name pos:start="729:19" pos:end="729:28">aml_device</name><argument_list pos:start="729:29" pos:end="729:41">(<argument pos:start="729:30" pos:end="729:37"><expr pos:start="729:30" pos:end="729:37"><literal type="string" pos:start="729:30" pos:end="729:37">"MP%02X"</literal></expr></argument>, <argument pos:start="729:40" pos:end="729:40"><expr pos:start="729:40" pos:end="729:40"><name pos:start="729:40" pos:end="729:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="731:13" pos:end="731:76"><expr pos:start="731:13" pos:end="731:75"><call pos:start="731:13" pos:end="731:75"><name pos:start="731:13" pos:end="731:22">aml_append</name><argument_list pos:start="731:23" pos:end="731:75">(<argument pos:start="731:24" pos:end="731:26"><expr pos:start="731:24" pos:end="731:26"><name pos:start="731:24" pos:end="731:26">dev</name></expr></argument>, <argument pos:start="731:29" pos:end="731:74"><expr pos:start="731:29" pos:end="731:74"><call pos:start="731:29" pos:end="731:74"><name pos:start="731:29" pos:end="731:41">aml_name_decl</name><argument_list pos:start="731:42" pos:end="731:74">(<argument pos:start="731:43" pos:end="731:48"><expr pos:start="731:43" pos:end="731:48"><literal type="string" pos:start="731:43" pos:end="731:48">"_UID"</literal></expr></argument>, <argument pos:start="731:51" pos:end="731:73"><expr pos:start="731:51" pos:end="731:73"><call pos:start="731:51" pos:end="731:73"><name pos:start="731:51" pos:end="731:60">aml_string</name><argument_list pos:start="731:61" pos:end="731:73">(<argument pos:start="731:62" pos:end="731:69"><expr pos:start="731:62" pos:end="731:69"><literal type="string" pos:start="731:62" pos:end="731:69">"0x%02X"</literal></expr></argument>, <argument pos:start="731:72" pos:end="731:72"><expr pos:start="731:72" pos:end="731:72"><name pos:start="731:72" pos:end="731:72">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="733:13" pos:end="733:74"><expr pos:start="733:13" pos:end="733:73"><call pos:start="733:13" pos:end="733:73"><name pos:start="733:13" pos:end="733:22">aml_append</name><argument_list pos:start="733:23" pos:end="733:73">(<argument pos:start="733:24" pos:end="733:26"><expr pos:start="733:24" pos:end="733:26"><name pos:start="733:24" pos:end="733:26">dev</name></expr></argument>, <argument pos:start="733:29" pos:end="733:72"><expr pos:start="733:29" pos:end="733:72"><call pos:start="733:29" pos:end="733:72"><name pos:start="733:29" pos:end="733:41">aml_name_decl</name><argument_list pos:start="733:42" pos:end="733:72">(<argument pos:start="733:43" pos:end="733:48"><expr pos:start="733:43" pos:end="733:48"><literal type="string" pos:start="733:43" pos:end="733:48">"_HID"</literal></expr></argument>, <argument pos:start="733:51" pos:end="733:71"><expr pos:start="733:51" pos:end="733:71"><call pos:start="733:51" pos:end="733:71"><name pos:start="733:51" pos:end="733:60">aml_eisaid</name><argument_list pos:start="733:61" pos:end="733:71">(<argument pos:start="733:62" pos:end="733:70"><expr pos:start="733:62" pos:end="733:70"><literal type="string" pos:start="733:62" pos:end="733:70">"PNP0C80"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="737:13" pos:end="737:43"><expr pos:start="737:13" pos:end="737:42"><name pos:start="737:13" pos:end="737:18">method</name> <operator pos:start="737:20" pos:end="737:20">=</operator> <call pos:start="737:22" pos:end="737:42"><name pos:start="737:22" pos:end="737:31">aml_method</name><argument_list pos:start="737:32" pos:end="737:42">(<argument pos:start="737:33" pos:end="737:38"><expr pos:start="737:33" pos:end="737:38"><literal type="string" pos:start="737:33" pos:end="737:38">"_CRS"</literal></expr></argument>, <argument pos:start="737:41" pos:end="737:41"><expr pos:start="737:41" pos:end="737:41"><literal type="number" pos:start="737:41" pos:end="737:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="739:13" pos:end="739:59"><expr pos:start="739:13" pos:end="739:58"><name pos:start="739:13" pos:end="739:13">s</name> <operator pos:start="739:15" pos:end="739:15">=</operator> <name pos:start="739:17" pos:end="739:24">BASEPATH</name> <call pos:start="739:26" pos:end="739:58"><name pos:start="739:26" pos:end="739:34">stringify</name><argument_list pos:start="739:35" pos:end="739:58">(<argument pos:start="739:36" pos:end="739:57"><expr pos:start="739:36" pos:end="739:57"><name pos:start="739:36" pos:end="739:57">MEMORY_SLOT_CRS_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="741:13" pos:end="741:75"><expr pos:start="741:13" pos:end="741:74"><call pos:start="741:13" pos:end="741:74"><name pos:start="741:13" pos:end="741:22">aml_append</name><argument_list pos:start="741:23" pos:end="741:74">(<argument pos:start="741:24" pos:end="741:29"><expr pos:start="741:24" pos:end="741:29"><name pos:start="741:24" pos:end="741:29">method</name></expr></argument>, <argument pos:start="741:32" pos:end="741:73"><expr pos:start="741:32" pos:end="741:73"><call pos:start="741:32" pos:end="741:73"><name pos:start="741:32" pos:end="741:41">aml_return</name><argument_list pos:start="741:42" pos:end="741:73">(<argument pos:start="741:43" pos:end="741:72"><expr pos:start="741:43" pos:end="741:72"><call pos:start="741:43" pos:end="741:72"><name pos:start="741:43" pos:end="741:51">aml_call1</name><argument_list pos:start="741:52" pos:end="741:72">(<argument pos:start="741:53" pos:end="741:53"><expr pos:start="741:53" pos:end="741:53"><name pos:start="741:53" pos:end="741:53">s</name></expr></argument>, <argument pos:start="741:56" pos:end="741:71"><expr pos:start="741:56" pos:end="741:71"><call pos:start="741:56" pos:end="741:71"><name pos:start="741:56" pos:end="741:63">aml_name</name><argument_list pos:start="741:64" pos:end="741:71">(<argument pos:start="741:65" pos:end="741:70"><expr pos:start="741:65" pos:end="741:70"><literal type="string" pos:start="741:65" pos:end="741:70">"_UID"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="743:13" pos:end="743:36"><expr pos:start="743:13" pos:end="743:35"><call pos:start="743:13" pos:end="743:35"><name pos:start="743:13" pos:end="743:22">aml_append</name><argument_list pos:start="743:23" pos:end="743:35">(<argument pos:start="743:24" pos:end="743:26"><expr pos:start="743:24" pos:end="743:26"><name pos:start="743:24" pos:end="743:26">dev</name></expr></argument>, <argument pos:start="743:29" pos:end="743:34"><expr pos:start="743:29" pos:end="743:34"><name pos:start="743:29" pos:end="743:34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="747:13" pos:end="747:43"><expr pos:start="747:13" pos:end="747:42"><name pos:start="747:13" pos:end="747:18">method</name> <operator pos:start="747:20" pos:end="747:20">=</operator> <call pos:start="747:22" pos:end="747:42"><name pos:start="747:22" pos:end="747:31">aml_method</name><argument_list pos:start="747:32" pos:end="747:42">(<argument pos:start="747:33" pos:end="747:38"><expr pos:start="747:33" pos:end="747:38"><literal type="string" pos:start="747:33" pos:end="747:38">"_STA"</literal></expr></argument>, <argument pos:start="747:41" pos:end="747:41"><expr pos:start="747:41" pos:end="747:41"><literal type="number" pos:start="747:41" pos:end="747:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="749:13" pos:end="749:62"><expr pos:start="749:13" pos:end="749:61"><name pos:start="749:13" pos:end="749:13">s</name> <operator pos:start="749:15" pos:end="749:15">=</operator> <name pos:start="749:17" pos:end="749:24">BASEPATH</name> <call pos:start="749:26" pos:end="749:61"><name pos:start="749:26" pos:end="749:34">stringify</name><argument_list pos:start="749:35" pos:end="749:61">(<argument pos:start="749:36" pos:end="749:60"><expr pos:start="749:36" pos:end="749:60"><name pos:start="749:36" pos:end="749:60">MEMORY_SLOT_STATUS_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="751:13" pos:end="751:75"><expr pos:start="751:13" pos:end="751:74"><call pos:start="751:13" pos:end="751:74"><name pos:start="751:13" pos:end="751:22">aml_append</name><argument_list pos:start="751:23" pos:end="751:74">(<argument pos:start="751:24" pos:end="751:29"><expr pos:start="751:24" pos:end="751:29"><name pos:start="751:24" pos:end="751:29">method</name></expr></argument>, <argument pos:start="751:32" pos:end="751:73"><expr pos:start="751:32" pos:end="751:73"><call pos:start="751:32" pos:end="751:73"><name pos:start="751:32" pos:end="751:41">aml_return</name><argument_list pos:start="751:42" pos:end="751:73">(<argument pos:start="751:43" pos:end="751:72"><expr pos:start="751:43" pos:end="751:72"><call pos:start="751:43" pos:end="751:72"><name pos:start="751:43" pos:end="751:51">aml_call1</name><argument_list pos:start="751:52" pos:end="751:72">(<argument pos:start="751:53" pos:end="751:53"><expr pos:start="751:53" pos:end="751:53"><name pos:start="751:53" pos:end="751:53">s</name></expr></argument>, <argument pos:start="751:56" pos:end="751:71"><expr pos:start="751:56" pos:end="751:71"><call pos:start="751:56" pos:end="751:71"><name pos:start="751:56" pos:end="751:63">aml_name</name><argument_list pos:start="751:64" pos:end="751:71">(<argument pos:start="751:65" pos:end="751:70"><expr pos:start="751:65" pos:end="751:70"><literal type="string" pos:start="751:65" pos:end="751:70">"_UID"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="753:13" pos:end="753:36"><expr pos:start="753:13" pos:end="753:35"><call pos:start="753:13" pos:end="753:35"><name pos:start="753:13" pos:end="753:22">aml_append</name><argument_list pos:start="753:23" pos:end="753:35">(<argument pos:start="753:24" pos:end="753:26"><expr pos:start="753:24" pos:end="753:26"><name pos:start="753:24" pos:end="753:26">dev</name></expr></argument>, <argument pos:start="753:29" pos:end="753:34"><expr pos:start="753:29" pos:end="753:34"><name pos:start="753:29" pos:end="753:34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="757:13" pos:end="757:43"><expr pos:start="757:13" pos:end="757:42"><name pos:start="757:13" pos:end="757:18">method</name> <operator pos:start="757:20" pos:end="757:20">=</operator> <call pos:start="757:22" pos:end="757:42"><name pos:start="757:22" pos:end="757:31">aml_method</name><argument_list pos:start="757:32" pos:end="757:42">(<argument pos:start="757:33" pos:end="757:38"><expr pos:start="757:33" pos:end="757:38"><literal type="string" pos:start="757:33" pos:end="757:38">"_PXM"</literal></expr></argument>, <argument pos:start="757:41" pos:end="757:41"><expr pos:start="757:41" pos:end="757:41"><literal type="number" pos:start="757:41" pos:end="757:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="759:13" pos:end="759:65"><expr pos:start="759:13" pos:end="759:64"><name pos:start="759:13" pos:end="759:13">s</name> <operator pos:start="759:15" pos:end="759:15">=</operator> <name pos:start="759:17" pos:end="759:24">BASEPATH</name> <call pos:start="759:26" pos:end="759:64"><name pos:start="759:26" pos:end="759:34">stringify</name><argument_list pos:start="759:35" pos:end="759:64">(<argument pos:start="759:36" pos:end="759:63"><expr pos:start="759:36" pos:end="759:63"><name pos:start="759:36" pos:end="759:63">MEMORY_SLOT_PROXIMITY_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="761:13" pos:end="761:75"><expr pos:start="761:13" pos:end="761:74"><call pos:start="761:13" pos:end="761:74"><name pos:start="761:13" pos:end="761:22">aml_append</name><argument_list pos:start="761:23" pos:end="761:74">(<argument pos:start="761:24" pos:end="761:29"><expr pos:start="761:24" pos:end="761:29"><name pos:start="761:24" pos:end="761:29">method</name></expr></argument>, <argument pos:start="761:32" pos:end="761:73"><expr pos:start="761:32" pos:end="761:73"><call pos:start="761:32" pos:end="761:73"><name pos:start="761:32" pos:end="761:41">aml_return</name><argument_list pos:start="761:42" pos:end="761:73">(<argument pos:start="761:43" pos:end="761:72"><expr pos:start="761:43" pos:end="761:72"><call pos:start="761:43" pos:end="761:72"><name pos:start="761:43" pos:end="761:51">aml_call1</name><argument_list pos:start="761:52" pos:end="761:72">(<argument pos:start="761:53" pos:end="761:53"><expr pos:start="761:53" pos:end="761:53"><name pos:start="761:53" pos:end="761:53">s</name></expr></argument>, <argument pos:start="761:56" pos:end="761:71"><expr pos:start="761:56" pos:end="761:71"><call pos:start="761:56" pos:end="761:71"><name pos:start="761:56" pos:end="761:63">aml_name</name><argument_list pos:start="761:64" pos:end="761:71">(<argument pos:start="761:65" pos:end="761:70"><expr pos:start="761:65" pos:end="761:70"><literal type="string" pos:start="761:65" pos:end="761:70">"_UID"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="763:13" pos:end="763:36"><expr pos:start="763:13" pos:end="763:35"><call pos:start="763:13" pos:end="763:35"><name pos:start="763:13" pos:end="763:22">aml_append</name><argument_list pos:start="763:23" pos:end="763:35">(<argument pos:start="763:24" pos:end="763:26"><expr pos:start="763:24" pos:end="763:26"><name pos:start="763:24" pos:end="763:26">dev</name></expr></argument>, <argument pos:start="763:29" pos:end="763:34"><expr pos:start="763:29" pos:end="763:34"><name pos:start="763:29" pos:end="763:34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="767:13" pos:end="767:43"><expr pos:start="767:13" pos:end="767:42"><name pos:start="767:13" pos:end="767:18">method</name> <operator pos:start="767:20" pos:end="767:20">=</operator> <call pos:start="767:22" pos:end="767:42"><name pos:start="767:22" pos:end="767:31">aml_method</name><argument_list pos:start="767:32" pos:end="767:42">(<argument pos:start="767:33" pos:end="767:38"><expr pos:start="767:33" pos:end="767:38"><literal type="string" pos:start="767:33" pos:end="767:38">"_OST"</literal></expr></argument>, <argument pos:start="767:41" pos:end="767:41"><expr pos:start="767:41" pos:end="767:41"><literal type="number" pos:start="767:41" pos:end="767:41">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="769:13" pos:end="769:59"><expr pos:start="769:13" pos:end="769:58"><name pos:start="769:13" pos:end="769:13">s</name> <operator pos:start="769:15" pos:end="769:15">=</operator> <name pos:start="769:17" pos:end="769:24">BASEPATH</name> <call pos:start="769:26" pos:end="769:58"><name pos:start="769:26" pos:end="769:34">stringify</name><argument_list pos:start="769:35" pos:end="769:58">(<argument pos:start="769:36" pos:end="769:57"><expr pos:start="769:36" pos:end="769:57"><name pos:start="769:36" pos:end="769:57">MEMORY_SLOT_OST_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="771:13" pos:end="775:16"><expr pos:start="771:13" pos:end="775:15"><call pos:start="771:13" pos:end="775:15"><name pos:start="771:13" pos:end="771:22">aml_append</name><argument_list pos:start="771:23" pos:end="775:15">(<argument pos:start="771:24" pos:end="771:29"><expr pos:start="771:24" pos:end="771:29"><name pos:start="771:24" pos:end="771:29">method</name></expr></argument>, <argument pos:start="771:32" pos:end="775:14"><expr pos:start="771:32" pos:end="775:14"><call pos:start="771:32" pos:end="775:14"><name pos:start="771:32" pos:end="771:41">aml_return</name><argument_list pos:start="771:42" pos:end="775:14">(<argument pos:start="771:43" pos:end="775:13"><expr pos:start="771:43" pos:end="775:13"><call pos:start="771:43" pos:end="775:13"><name pos:start="771:43" pos:end="771:51">aml_call4</name><argument_list pos:start="771:52" pos:end="775:13">(

                <argument pos:start="773:17" pos:end="773:17"><expr pos:start="773:17" pos:end="773:17"><name pos:start="773:17" pos:end="773:17">s</name></expr></argument>, <argument pos:start="773:20" pos:end="773:35"><expr pos:start="773:20" pos:end="773:35"><call pos:start="773:20" pos:end="773:35"><name pos:start="773:20" pos:end="773:27">aml_name</name><argument_list pos:start="773:28" pos:end="773:35">(<argument pos:start="773:29" pos:end="773:34"><expr pos:start="773:29" pos:end="773:34"><literal type="string" pos:start="773:29" pos:end="773:34">"_UID"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="773:38" pos:end="773:47"><expr pos:start="773:38" pos:end="773:47"><call pos:start="773:38" pos:end="773:47"><name pos:start="773:38" pos:end="773:44">aml_arg</name><argument_list pos:start="773:45" pos:end="773:47">(<argument pos:start="773:46" pos:end="773:46"><expr pos:start="773:46" pos:end="773:46"><literal type="number" pos:start="773:46" pos:end="773:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="773:50" pos:end="773:59"><expr pos:start="773:50" pos:end="773:59"><call pos:start="773:50" pos:end="773:59"><name pos:start="773:50" pos:end="773:56">aml_arg</name><argument_list pos:start="773:57" pos:end="773:59">(<argument pos:start="773:58" pos:end="773:58"><expr pos:start="773:58" pos:end="773:58"><literal type="number" pos:start="773:58" pos:end="773:58">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="773:62" pos:end="773:71"><expr pos:start="773:62" pos:end="773:71"><call pos:start="773:62" pos:end="773:71"><name pos:start="773:62" pos:end="773:68">aml_arg</name><argument_list pos:start="773:69" pos:end="773:71">(<argument pos:start="773:70" pos:end="773:70"><expr pos:start="773:70" pos:end="773:70"><literal type="number" pos:start="773:70" pos:end="773:70">2</literal></expr></argument>)</argument_list></call></expr></argument>

            )</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="777:13" pos:end="777:36"><expr pos:start="777:13" pos:end="777:35"><call pos:start="777:13" pos:end="777:35"><name pos:start="777:13" pos:end="777:22">aml_append</name><argument_list pos:start="777:23" pos:end="777:35">(<argument pos:start="777:24" pos:end="777:26"><expr pos:start="777:24" pos:end="777:26"><name pos:start="777:24" pos:end="777:26">dev</name></expr></argument>, <argument pos:start="777:29" pos:end="777:34"><expr pos:start="777:29" pos:end="777:34"><name pos:start="777:29" pos:end="777:34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="781:13" pos:end="781:43"><expr pos:start="781:13" pos:end="781:42"><name pos:start="781:13" pos:end="781:18">method</name> <operator pos:start="781:20" pos:end="781:20">=</operator> <call pos:start="781:22" pos:end="781:42"><name pos:start="781:22" pos:end="781:31">aml_method</name><argument_list pos:start="781:32" pos:end="781:42">(<argument pos:start="781:33" pos:end="781:38"><expr pos:start="781:33" pos:end="781:38"><literal type="string" pos:start="781:33" pos:end="781:38">"_EJ0"</literal></expr></argument>, <argument pos:start="781:41" pos:end="781:41"><expr pos:start="781:41" pos:end="781:41"><literal type="number" pos:start="781:41" pos:end="781:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="783:13" pos:end="783:61"><expr pos:start="783:13" pos:end="783:60"><name pos:start="783:13" pos:end="783:13">s</name> <operator pos:start="783:15" pos:end="783:15">=</operator> <name pos:start="783:17" pos:end="783:24">BASEPATH</name> <call pos:start="783:26" pos:end="783:60"><name pos:start="783:26" pos:end="783:34">stringify</name><argument_list pos:start="783:35" pos:end="783:60">(<argument pos:start="783:36" pos:end="783:59"><expr pos:start="783:36" pos:end="783:59"><name pos:start="783:36" pos:end="783:59">MEMORY_SLOT_EJECT_METHOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="785:13" pos:end="787:58"><expr pos:start="785:13" pos:end="787:57"><call pos:start="785:13" pos:end="787:57"><name pos:start="785:13" pos:end="785:22">aml_append</name><argument_list pos:start="785:23" pos:end="787:57">(<argument pos:start="785:24" pos:end="785:29"><expr pos:start="785:24" pos:end="785:29"><name pos:start="785:24" pos:end="785:29">method</name></expr></argument>, <argument pos:start="785:32" pos:end="787:56"><expr pos:start="785:32" pos:end="787:56"><call pos:start="785:32" pos:end="787:56"><name pos:start="785:32" pos:end="785:41">aml_return</name><argument_list pos:start="785:42" pos:end="787:56">(<argument pos:start="785:43" pos:end="787:55"><expr pos:start="785:43" pos:end="787:55"><call pos:start="785:43" pos:end="787:55"><name pos:start="785:43" pos:end="785:51">aml_call2</name><argument_list pos:start="785:52" pos:end="787:55">(

                       <argument pos:start="787:24" pos:end="787:24"><expr pos:start="787:24" pos:end="787:24"><name pos:start="787:24" pos:end="787:24">s</name></expr></argument>, <argument pos:start="787:27" pos:end="787:42"><expr pos:start="787:27" pos:end="787:42"><call pos:start="787:27" pos:end="787:42"><name pos:start="787:27" pos:end="787:34">aml_name</name><argument_list pos:start="787:35" pos:end="787:42">(<argument pos:start="787:36" pos:end="787:41"><expr pos:start="787:36" pos:end="787:41"><literal type="string" pos:start="787:36" pos:end="787:41">"_UID"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="787:45" pos:end="787:54"><expr pos:start="787:45" pos:end="787:54"><call pos:start="787:45" pos:end="787:54"><name pos:start="787:45" pos:end="787:51">aml_arg</name><argument_list pos:start="787:52" pos:end="787:54">(<argument pos:start="787:53" pos:end="787:53"><expr pos:start="787:53" pos:end="787:53"><literal type="number" pos:start="787:53" pos:end="787:53">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="789:13" pos:end="789:36"><expr pos:start="789:13" pos:end="789:35"><call pos:start="789:13" pos:end="789:35"><name pos:start="789:13" pos:end="789:22">aml_append</name><argument_list pos:start="789:23" pos:end="789:35">(<argument pos:start="789:24" pos:end="789:26"><expr pos:start="789:24" pos:end="789:26"><name pos:start="789:24" pos:end="789:26">dev</name></expr></argument>, <argument pos:start="789:29" pos:end="789:34"><expr pos:start="789:29" pos:end="789:34"><name pos:start="789:29" pos:end="789:34">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="793:13" pos:end="793:38"><expr pos:start="793:13" pos:end="793:37"><call pos:start="793:13" pos:end="793:37"><name pos:start="793:13" pos:end="793:22">aml_append</name><argument_list pos:start="793:23" pos:end="793:37">(<argument pos:start="793:24" pos:end="793:31"><expr pos:start="793:24" pos:end="793:31"><name pos:start="793:24" pos:end="793:31">sb_scope</name></expr></argument>, <argument pos:start="793:34" pos:end="793:36"><expr pos:start="793:34" pos:end="793:36"><name pos:start="793:34" pos:end="793:36">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="799:9" pos:end="803:11">/* build Method(MEMORY_SLOT_NOTIFY_METHOD, 2) {

         *     If (LEqual(Arg0, 0x00)) {Notify(MP00, Arg1)} ... }

         */</comment>

        <expr_stmt pos:start="805:9" pos:end="805:69"><expr pos:start="805:9" pos:end="805:68"><name pos:start="805:9" pos:end="805:14">method</name> <operator pos:start="805:16" pos:end="805:16">=</operator> <call pos:start="805:18" pos:end="805:68"><name pos:start="805:18" pos:end="805:27">aml_method</name><argument_list pos:start="805:28" pos:end="805:68">(<argument pos:start="805:29" pos:end="805:64"><expr pos:start="805:29" pos:end="805:64"><call pos:start="805:29" pos:end="805:64"><name pos:start="805:29" pos:end="805:37">stringify</name><argument_list pos:start="805:38" pos:end="805:64">(<argument pos:start="805:39" pos:end="805:63"><expr pos:start="805:39" pos:end="805:63"><name pos:start="805:39" pos:end="805:63">MEMORY_SLOT_NOTIFY_METHOD</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="805:67" pos:end="805:67"><expr pos:start="805:67" pos:end="805:67"><literal type="number" pos:start="805:67" pos:end="805:67">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="807:9" pos:end="819:9">for <control pos:start="807:13" pos:end="807:36">(<init pos:start="807:14" pos:end="807:19"><expr pos:start="807:14" pos:end="807:18"><name pos:start="807:14" pos:end="807:14">i</name> <operator pos:start="807:16" pos:end="807:16">=</operator> <literal type="number" pos:start="807:18" pos:end="807:18">0</literal></expr>;</init> <condition pos:start="807:21" pos:end="807:31"><expr pos:start="807:21" pos:end="807:30"><name pos:start="807:21" pos:end="807:21">i</name> <operator pos:start="807:23" pos:end="807:23">&lt;</operator> <name pos:start="807:25" pos:end="807:30">nr_mem</name></expr>;</condition> <incr pos:start="807:33" pos:end="807:35"><expr pos:start="807:33" pos:end="807:35"><name pos:start="807:33" pos:end="807:33">i</name><operator pos:start="807:34" pos:end="807:35">++</operator></expr></incr>)</control> <block pos:start="807:38" pos:end="819:9">{<block_content pos:start="809:13" pos:end="817:38">

            <expr_stmt pos:start="809:13" pos:end="809:62"><expr pos:start="809:13" pos:end="809:61"><name pos:start="809:13" pos:end="809:17">ifctx</name> <operator pos:start="809:19" pos:end="809:19">=</operator> <call pos:start="809:21" pos:end="809:61"><name pos:start="809:21" pos:end="809:26">aml_if</name><argument_list pos:start="809:27" pos:end="809:61">(<argument pos:start="809:28" pos:end="809:60"><expr pos:start="809:28" pos:end="809:60"><call pos:start="809:28" pos:end="809:60"><name pos:start="809:28" pos:end="809:36">aml_equal</name><argument_list pos:start="809:37" pos:end="809:60">(<argument pos:start="809:38" pos:end="809:47"><expr pos:start="809:38" pos:end="809:47"><call pos:start="809:38" pos:end="809:47"><name pos:start="809:38" pos:end="809:44">aml_arg</name><argument_list pos:start="809:45" pos:end="809:47">(<argument pos:start="809:46" pos:end="809:46"><expr pos:start="809:46" pos:end="809:46"><literal type="number" pos:start="809:46" pos:end="809:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="809:50" pos:end="809:59"><expr pos:start="809:50" pos:end="809:59"><call pos:start="809:50" pos:end="809:59"><name pos:start="809:50" pos:end="809:56">aml_int</name><argument_list pos:start="809:57" pos:end="809:59">(<argument pos:start="809:58" pos:end="809:58"><expr pos:start="809:58" pos:end="809:58"><name pos:start="809:58" pos:end="809:58">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="811:13" pos:end="815:14"><expr pos:start="811:13" pos:end="815:13"><call pos:start="811:13" pos:end="815:13"><name pos:start="811:13" pos:end="811:22">aml_append</name><argument_list pos:start="811:23" pos:end="815:13">(<argument pos:start="811:24" pos:end="811:28"><expr pos:start="811:24" pos:end="811:28"><name pos:start="811:24" pos:end="811:28">ifctx</name></expr></argument>,

                <argument pos:start="813:17" pos:end="813:62"><expr pos:start="813:17" pos:end="813:62"><call pos:start="813:17" pos:end="813:62"><name pos:start="813:17" pos:end="813:26">aml_notify</name><argument_list pos:start="813:27" pos:end="813:62">(<argument pos:start="813:28" pos:end="813:49"><expr pos:start="813:28" pos:end="813:49"><call pos:start="813:28" pos:end="813:49"><name pos:start="813:28" pos:end="813:35">aml_name</name><argument_list pos:start="813:36" pos:end="813:49">(<argument pos:start="813:37" pos:end="813:45"><expr pos:start="813:37" pos:end="813:45"><literal type="string" pos:start="813:37" pos:end="813:45">"MP%.02X"</literal></expr></argument>, <argument pos:start="813:48" pos:end="813:48"><expr pos:start="813:48" pos:end="813:48"><name pos:start="813:48" pos:end="813:48">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="813:52" pos:end="813:61"><expr pos:start="813:52" pos:end="813:61"><call pos:start="813:52" pos:end="813:61"><name pos:start="813:52" pos:end="813:58">aml_arg</name><argument_list pos:start="813:59" pos:end="813:61">(<argument pos:start="813:60" pos:end="813:60"><expr pos:start="813:60" pos:end="813:60"><literal type="number" pos:start="813:60" pos:end="813:60">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

            )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="817:13" pos:end="817:38"><expr pos:start="817:13" pos:end="817:37"><call pos:start="817:13" pos:end="817:37"><name pos:start="817:13" pos:end="817:22">aml_append</name><argument_list pos:start="817:23" pos:end="817:37">(<argument pos:start="817:24" pos:end="817:29"><expr pos:start="817:24" pos:end="817:29"><name pos:start="817:24" pos:end="817:29">method</name></expr></argument>, <argument pos:start="817:32" pos:end="817:36"><expr pos:start="817:32" pos:end="817:36"><name pos:start="817:32" pos:end="817:36">ifctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="821:9" pos:end="821:37"><expr pos:start="821:9" pos:end="821:36"><call pos:start="821:9" pos:end="821:36"><name pos:start="821:9" pos:end="821:18">aml_append</name><argument_list pos:start="821:19" pos:end="821:36">(<argument pos:start="821:20" pos:end="821:27"><expr pos:start="821:20" pos:end="821:27"><name pos:start="821:20" pos:end="821:27">sb_scope</name></expr></argument>, <argument pos:start="821:30" pos:end="821:35"><expr pos:start="821:30" pos:end="821:35"><name pos:start="821:30" pos:end="821:35">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <block pos:start="825:9" pos:end="881:9">{<block_content pos:start="827:13" pos:end="879:13">

            <decl_stmt pos:start="827:13" pos:end="827:29"><decl pos:start="827:13" pos:end="827:28"><type pos:start="827:13" pos:end="827:20"><name pos:start="827:13" pos:end="827:18">Object</name> <modifier pos:start="827:20" pos:end="827:20">*</modifier></type><name pos:start="827:21" pos:end="827:28">pci_host</name></decl>;</decl_stmt>

            <decl_stmt pos:start="829:13" pos:end="829:31"><decl pos:start="829:13" pos:end="829:30"><type pos:start="829:13" pos:end="829:20"><name pos:start="829:13" pos:end="829:18">PCIBus</name> <modifier pos:start="829:20" pos:end="829:20">*</modifier></type><name pos:start="829:21" pos:end="829:23">bus</name> <init pos:start="829:25" pos:end="829:30">= <expr pos:start="829:27" pos:end="829:30"><name pos:start="829:27" pos:end="829:30">NULL</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="833:13" pos:end="833:48"><expr pos:start="833:13" pos:end="833:47"><name pos:start="833:13" pos:end="833:20">pci_host</name> <operator pos:start="833:22" pos:end="833:22">=</operator> <call pos:start="833:24" pos:end="833:47"><name pos:start="833:24" pos:end="833:45">acpi_get_i386_pci_host</name><argument_list pos:start="833:46" pos:end="833:47">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="835:13" pos:end="839:13"><if pos:start="835:13" pos:end="839:13">if <condition pos:start="835:16" pos:end="835:25">(<expr pos:start="835:17" pos:end="835:24"><name pos:start="835:17" pos:end="835:24">pci_host</name></expr>)</condition> <block pos:start="835:27" pos:end="839:13">{<block_content pos:start="837:17" pos:end="837:53">

                <expr_stmt pos:start="837:17" pos:end="837:53"><expr pos:start="837:17" pos:end="837:52"><name pos:start="837:17" pos:end="837:19">bus</name> <operator pos:start="837:21" pos:end="837:21">=</operator> <call pos:start="837:23" pos:end="837:47"><name pos:start="837:23" pos:end="837:37">PCI_HOST_BRIDGE</name><argument_list pos:start="837:38" pos:end="837:47">(<argument pos:start="837:39" pos:end="837:46"><expr pos:start="837:39" pos:end="837:46"><name pos:start="837:39" pos:end="837:46">pci_host</name></expr></argument>)</argument_list></call><operator pos:start="837:48" pos:end="837:49">-&gt;</operator><name pos:start="837:50" pos:end="837:52">bus</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="843:13" pos:end="879:13"><if pos:start="843:13" pos:end="879:13">if <condition pos:start="843:16" pos:end="843:20">(<expr pos:start="843:17" pos:end="843:19"><name pos:start="843:17" pos:end="843:19">bus</name></expr>)</condition> <block pos:start="843:22" pos:end="879:13">{<block_content pos:start="845:17" pos:end="877:44">

                <decl_stmt pos:start="845:17" pos:end="845:47"><decl pos:start="845:17" pos:end="845:46"><type pos:start="845:17" pos:end="845:21"><name pos:start="845:17" pos:end="845:19">Aml</name> <modifier pos:start="845:21" pos:end="845:21">*</modifier></type><name pos:start="845:22" pos:end="845:26">scope</name> <init pos:start="845:28" pos:end="845:46">= <expr pos:start="845:30" pos:end="845:46"><call pos:start="845:30" pos:end="845:46"><name pos:start="845:30" pos:end="845:38">aml_scope</name><argument_list pos:start="845:39" pos:end="845:46">(<argument pos:start="845:40" pos:end="845:45"><expr pos:start="845:40" pos:end="845:45"><literal type="string" pos:start="845:40" pos:end="845:45">"PCI0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="847:17" pos:end="847:77">/* Scan all PCI buses. Generate tables to support hotplug. */</comment>

                <expr_stmt pos:start="849:17" pos:end="849:78"><expr pos:start="849:17" pos:end="849:77"><call pos:start="849:17" pos:end="849:77"><name pos:start="849:17" pos:end="849:44">build_append_pci_bus_devices</name><argument_list pos:start="849:45" pos:end="849:77">(<argument pos:start="849:46" pos:end="849:50"><expr pos:start="849:46" pos:end="849:50"><name pos:start="849:46" pos:end="849:50">scope</name></expr></argument>, <argument pos:start="849:53" pos:end="849:55"><expr pos:start="849:53" pos:end="849:55"><name pos:start="849:53" pos:end="849:55">bus</name></expr></argument>, <argument pos:start="849:58" pos:end="849:76"><expr pos:start="849:58" pos:end="849:76"><name pos:start="849:58" pos:end="849:76"><name pos:start="849:58" pos:end="849:59">pm</name><operator pos:start="849:60" pos:end="849:61">-&gt;</operator><name pos:start="849:62" pos:end="849:76">pcihp_bridge_en</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="853:17" pos:end="873:17"><if pos:start="853:17" pos:end="873:17">if <condition pos:start="853:20" pos:end="853:60">(<expr pos:start="853:21" pos:end="853:59"><name pos:start="853:21" pos:end="853:37"><name pos:start="853:21" pos:end="853:24">misc</name><operator pos:start="853:25" pos:end="853:26">-&gt;</operator><name pos:start="853:27" pos:end="853:37">tpm_version</name></name> <operator pos:start="853:39" pos:end="853:40">!=</operator> <name pos:start="853:42" pos:end="853:59">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="853:62" pos:end="873:17">{<block_content pos:start="855:21" pos:end="871:43">

                    <expr_stmt pos:start="855:21" pos:end="855:48"><expr pos:start="855:21" pos:end="855:47"><name pos:start="855:21" pos:end="855:23">dev</name> <operator pos:start="855:25" pos:end="855:25">=</operator> <call pos:start="855:27" pos:end="855:47"><name pos:start="855:27" pos:end="855:36">aml_device</name><argument_list pos:start="855:37" pos:end="855:47">(<argument pos:start="855:38" pos:end="855:46"><expr pos:start="855:38" pos:end="855:46"><literal type="string" pos:start="855:38" pos:end="855:46">"ISA.TPM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="857:21" pos:end="857:82"><expr pos:start="857:21" pos:end="857:81"><call pos:start="857:21" pos:end="857:81"><name pos:start="857:21" pos:end="857:30">aml_append</name><argument_list pos:start="857:31" pos:end="857:81">(<argument pos:start="857:32" pos:end="857:34"><expr pos:start="857:32" pos:end="857:34"><name pos:start="857:32" pos:end="857:34">dev</name></expr></argument>, <argument pos:start="857:37" pos:end="857:80"><expr pos:start="857:37" pos:end="857:80"><call pos:start="857:37" pos:end="857:80"><name pos:start="857:37" pos:end="857:49">aml_name_decl</name><argument_list pos:start="857:50" pos:end="857:80">(<argument pos:start="857:51" pos:end="857:56"><expr pos:start="857:51" pos:end="857:56"><literal type="string" pos:start="857:51" pos:end="857:56">"_HID"</literal></expr></argument>, <argument pos:start="857:59" pos:end="857:79"><expr pos:start="857:59" pos:end="857:79"><call pos:start="857:59" pos:end="857:79"><name pos:start="857:59" pos:end="857:68">aml_eisaid</name><argument_list pos:start="857:69" pos:end="857:79">(<argument pos:start="857:70" pos:end="857:78"><expr pos:start="857:70" pos:end="857:78"><literal type="string" pos:start="857:70" pos:end="857:78">"PNP0C31"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="859:21" pos:end="859:73"><expr pos:start="859:21" pos:end="859:72"><call pos:start="859:21" pos:end="859:72"><name pos:start="859:21" pos:end="859:30">aml_append</name><argument_list pos:start="859:31" pos:end="859:72">(<argument pos:start="859:32" pos:end="859:34"><expr pos:start="859:32" pos:end="859:34"><name pos:start="859:32" pos:end="859:34">dev</name></expr></argument>, <argument pos:start="859:37" pos:end="859:71"><expr pos:start="859:37" pos:end="859:71"><call pos:start="859:37" pos:end="859:71"><name pos:start="859:37" pos:end="859:49">aml_name_decl</name><argument_list pos:start="859:50" pos:end="859:71">(<argument pos:start="859:51" pos:end="859:56"><expr pos:start="859:51" pos:end="859:56"><literal type="string" pos:start="859:51" pos:end="859:56">"_STA"</literal></expr></argument>, <argument pos:start="859:59" pos:end="859:70"><expr pos:start="859:59" pos:end="859:70"><call pos:start="859:59" pos:end="859:70"><name pos:start="859:59" pos:end="859:65">aml_int</name><argument_list pos:start="859:66" pos:end="859:70">(<argument pos:start="859:67" pos:end="859:69"><expr pos:start="859:67" pos:end="859:69"><literal type="number" pos:start="859:67" pos:end="859:69">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="861:21" pos:end="861:50"><expr pos:start="861:21" pos:end="861:49"><name pos:start="861:21" pos:end="861:23">crs</name> <operator pos:start="861:25" pos:end="861:25">=</operator> <call pos:start="861:27" pos:end="861:49"><name pos:start="861:27" pos:end="861:47">aml_resource_template</name><argument_list pos:start="861:48" pos:end="861:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="863:21" pos:end="865:67"><expr pos:start="863:21" pos:end="865:66"><call pos:start="863:21" pos:end="865:66"><name pos:start="863:21" pos:end="863:30">aml_append</name><argument_list pos:start="863:31" pos:end="865:66">(<argument pos:start="863:32" pos:end="863:34"><expr pos:start="863:32" pos:end="863:34"><name pos:start="863:32" pos:end="863:34">crs</name></expr></argument>, <argument pos:start="863:37" pos:end="865:65"><expr pos:start="863:37" pos:end="865:65"><call pos:start="863:37" pos:end="865:65"><name pos:start="863:37" pos:end="863:54">aml_memory32_fixed</name><argument_list pos:start="863:55" pos:end="865:65">(<argument pos:start="863:56" pos:end="863:72"><expr pos:start="863:56" pos:end="863:72"><name pos:start="863:56" pos:end="863:72">TPM_TIS_ADDR_BASE</name></expr></argument>,

                               <argument pos:start="865:32" pos:end="865:48"><expr pos:start="865:32" pos:end="865:48"><name pos:start="865:32" pos:end="865:48">TPM_TIS_ADDR_SIZE</name></expr></argument>, <argument pos:start="865:51" pos:end="865:64"><expr pos:start="865:51" pos:end="865:64"><name pos:start="865:51" pos:end="865:64">AML_READ_WRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="867:21" pos:end="867:67"><expr pos:start="867:21" pos:end="867:66"><call pos:start="867:21" pos:end="867:66"><name pos:start="867:21" pos:end="867:30">aml_append</name><argument_list pos:start="867:31" pos:end="867:66">(<argument pos:start="867:32" pos:end="867:34"><expr pos:start="867:32" pos:end="867:34"><name pos:start="867:32" pos:end="867:34">crs</name></expr></argument>, <argument pos:start="867:37" pos:end="867:65"><expr pos:start="867:37" pos:end="867:65"><call pos:start="867:37" pos:end="867:65"><name pos:start="867:37" pos:end="867:52">aml_irq_no_flags</name><argument_list pos:start="867:53" pos:end="867:65">(<argument pos:start="867:54" pos:end="867:64"><expr pos:start="867:54" pos:end="867:64"><name pos:start="867:54" pos:end="867:64">TPM_TIS_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="869:21" pos:end="869:64"><expr pos:start="869:21" pos:end="869:63"><call pos:start="869:21" pos:end="869:63"><name pos:start="869:21" pos:end="869:30">aml_append</name><argument_list pos:start="869:31" pos:end="869:63">(<argument pos:start="869:32" pos:end="869:34"><expr pos:start="869:32" pos:end="869:34"><name pos:start="869:32" pos:end="869:34">dev</name></expr></argument>, <argument pos:start="869:37" pos:end="869:62"><expr pos:start="869:37" pos:end="869:62"><call pos:start="869:37" pos:end="869:62"><name pos:start="869:37" pos:end="869:49">aml_name_decl</name><argument_list pos:start="869:50" pos:end="869:62">(<argument pos:start="869:51" pos:end="869:56"><expr pos:start="869:51" pos:end="869:56"><literal type="string" pos:start="869:51" pos:end="869:56">"_CRS"</literal></expr></argument>, <argument pos:start="869:59" pos:end="869:61"><expr pos:start="869:59" pos:end="869:61"><name pos:start="869:59" pos:end="869:61">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="871:21" pos:end="871:43"><expr pos:start="871:21" pos:end="871:42"><call pos:start="871:21" pos:end="871:42"><name pos:start="871:21" pos:end="871:30">aml_append</name><argument_list pos:start="871:31" pos:end="871:42">(<argument pos:start="871:32" pos:end="871:36"><expr pos:start="871:32" pos:end="871:36"><name pos:start="871:32" pos:end="871:36">scope</name></expr></argument>, <argument pos:start="871:39" pos:end="871:41"><expr pos:start="871:39" pos:end="871:41"><name pos:start="871:39" pos:end="871:41">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="877:17" pos:end="877:44"><expr pos:start="877:17" pos:end="877:43"><call pos:start="877:17" pos:end="877:43"><name pos:start="877:17" pos:end="877:26">aml_append</name><argument_list pos:start="877:27" pos:end="877:43">(<argument pos:start="877:28" pos:end="877:35"><expr pos:start="877:28" pos:end="877:35"><name pos:start="877:28" pos:end="877:35">sb_scope</name></expr></argument>, <argument pos:start="877:38" pos:end="877:42"><expr pos:start="877:38" pos:end="877:42"><name pos:start="877:38" pos:end="877:42">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="883:9" pos:end="883:35"><expr pos:start="883:9" pos:end="883:34"><call pos:start="883:9" pos:end="883:34"><name pos:start="883:9" pos:end="883:18">aml_append</name><argument_list pos:start="883:19" pos:end="883:34">(<argument pos:start="883:20" pos:end="883:23"><expr pos:start="883:20" pos:end="883:23"><name pos:start="883:20" pos:end="883:23">ssdt</name></expr></argument>, <argument pos:start="883:26" pos:end="883:33"><expr pos:start="883:26" pos:end="883:33"><name pos:start="883:26" pos:end="883:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="889:5" pos:end="889:69">/* copy AML table into ACPI tables blob and patch header there */</comment>

    <expr_stmt pos:start="891:5" pos:end="891:69"><expr pos:start="891:5" pos:end="891:68"><call pos:start="891:5" pos:end="891:68"><name pos:start="891:5" pos:end="891:23">g_array_append_vals</name><argument_list pos:start="891:24" pos:end="891:68">(<argument pos:start="891:25" pos:end="891:34"><expr pos:start="891:25" pos:end="891:34"><name pos:start="891:25" pos:end="891:34">table_data</name></expr></argument>, <argument pos:start="891:37" pos:end="891:51"><expr pos:start="891:37" pos:end="891:51"><name pos:start="891:37" pos:end="891:51"><name pos:start="891:37" pos:end="891:40">ssdt</name><operator pos:start="891:41" pos:end="891:42">-&gt;</operator><name pos:start="891:43" pos:end="891:45">buf</name><operator pos:start="891:46" pos:end="891:47">-&gt;</operator><name pos:start="891:48" pos:end="891:51">data</name></name></expr></argument>, <argument pos:start="891:54" pos:end="891:67"><expr pos:start="891:54" pos:end="891:67"><name pos:start="891:54" pos:end="891:67"><name pos:start="891:54" pos:end="891:57">ssdt</name><operator pos:start="891:58" pos:end="891:59">-&gt;</operator><name pos:start="891:60" pos:end="891:62">buf</name><operator pos:start="891:63" pos:end="891:64">-&gt;</operator><name pos:start="891:65" pos:end="891:67">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="893:5" pos:end="897:35"><expr pos:start="893:5" pos:end="897:34"><call pos:start="893:5" pos:end="897:34"><name pos:start="893:5" pos:end="893:16">build_header</name><argument_list pos:start="893:17" pos:end="897:34">(<argument pos:start="893:18" pos:end="893:23"><expr pos:start="893:18" pos:end="893:23"><name pos:start="893:18" pos:end="893:23">linker</name></expr></argument>, <argument pos:start="893:26" pos:end="893:35"><expr pos:start="893:26" pos:end="893:35"><name pos:start="893:26" pos:end="893:35">table_data</name></expr></argument>,

        <argument pos:start="895:9" pos:end="895:69"><expr pos:start="895:9" pos:end="895:69"><operator pos:start="895:9" pos:end="895:9">(</operator><name pos:start="895:10" pos:end="895:13">void</name> <operator pos:start="895:15" pos:end="895:15">*</operator><operator pos:start="895:16" pos:end="895:16">)</operator><operator pos:start="895:17" pos:end="895:17">(</operator><name pos:start="895:18" pos:end="895:33"><name pos:start="895:18" pos:end="895:27">table_data</name><operator pos:start="895:28" pos:end="895:29">-&gt;</operator><name pos:start="895:30" pos:end="895:33">data</name></name> <operator pos:start="895:35" pos:end="895:35">+</operator> <name pos:start="895:37" pos:end="895:51"><name pos:start="895:37" pos:end="895:46">table_data</name><operator pos:start="895:47" pos:end="895:48">-&gt;</operator><name pos:start="895:49" pos:end="895:51">len</name></name> <operator pos:start="895:53" pos:end="895:53">-</operator> <name pos:start="895:55" pos:end="895:68"><name pos:start="895:55" pos:end="895:58">ssdt</name><operator pos:start="895:59" pos:end="895:60">-&gt;</operator><name pos:start="895:61" pos:end="895:63">buf</name><operator pos:start="895:64" pos:end="895:65">-&gt;</operator><name pos:start="895:66" pos:end="895:68">len</name></name><operator pos:start="895:69" pos:end="895:69">)</operator></expr></argument>,

        <argument pos:start="897:9" pos:end="897:14"><expr pos:start="897:9" pos:end="897:14"><literal type="string" pos:start="897:9" pos:end="897:14">"SSDT"</literal></expr></argument>, <argument pos:start="897:17" pos:end="897:30"><expr pos:start="897:17" pos:end="897:30"><name pos:start="897:17" pos:end="897:30"><name pos:start="897:17" pos:end="897:20">ssdt</name><operator pos:start="897:21" pos:end="897:22">-&gt;</operator><name pos:start="897:23" pos:end="897:25">buf</name><operator pos:start="897:26" pos:end="897:27">-&gt;</operator><name pos:start="897:28" pos:end="897:30">len</name></name></expr></argument>, <argument pos:start="897:33" pos:end="897:33"><expr pos:start="897:33" pos:end="897:33"><literal type="number" pos:start="897:33" pos:end="897:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="899:5" pos:end="899:25"><expr pos:start="899:5" pos:end="899:24"><call pos:start="899:5" pos:end="899:24"><name pos:start="899:5" pos:end="899:22">free_aml_allocator</name><argument_list pos:start="899:23" pos:end="899:24">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
