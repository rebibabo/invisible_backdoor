<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7643.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">av_bsf_list_parse_str</name><parameter_list pos:start="1:26" pos:end="1:66">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">str</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:65"><decl pos:start="1:44" pos:end="1:65"><type pos:start="1:44" pos:end="1:65"><name pos:start="1:44" pos:end="1:55">AVBSFContext</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:65">bsf_lst</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:15">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">AVBSFList</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">lst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:17">bsf_str</name></decl>, <decl pos:start="7:20" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">buf</name></decl>, <decl pos:start="7:26" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:29">dup</name></decl>, <decl pos:start="7:32" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:32" pos:end="7:32">*</modifier></type><name pos:start="7:33" pos:end="7:39">saveptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:47"><if pos:start="13:5" pos:end="15:47">if <condition pos:start="13:8" pos:end="13:13">(<expr pos:start="13:9" pos:end="13:12"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:12">str</name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:47"><block_content pos:start="15:9" pos:end="15:47">

        <return pos:start="15:9" pos:end="15:47">return <expr pos:start="15:16" pos:end="15:46"><call pos:start="15:16" pos:end="15:46"><name pos:start="15:16" pos:end="15:37">av_bsf_get_null_filter</name><argument_list pos:start="15:38" pos:end="15:46">(<argument pos:start="15:39" pos:end="15:45"><expr pos:start="15:39" pos:end="15:45"><name pos:start="15:39" pos:end="15:45">bsf_lst</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:7">lst</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:29"><name pos:start="19:11" pos:end="19:27">av_bsf_list_alloc</name><argument_list pos:start="19:28" pos:end="19:29">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">lst</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="29:31"><if pos:start="27:5" pos:end="29:31">if <condition pos:start="27:8" pos:end="27:38">(<expr pos:start="27:9" pos:end="27:37"><operator pos:start="27:9" pos:end="27:9">!</operator><operator pos:start="27:10" pos:end="27:10">(</operator><name pos:start="27:11" pos:end="27:13">dup</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <name pos:start="27:17" pos:end="27:19">buf</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:36"><name pos:start="27:23" pos:end="27:31">av_strdup</name><argument_list pos:start="27:32" pos:end="27:36">(<argument pos:start="27:33" pos:end="27:35"><expr pos:start="27:33" pos:end="27:35"><name pos:start="27:33" pos:end="27:35">str</name></expr></argument>)</argument_list></call><operator pos:start="27:37" pos:end="27:37">)</operator></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:31"><block_content pos:start="29:9" pos:end="29:31">

        <return pos:start="29:9" pos:end="29:31">return <expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="33:5" pos:end="53:5">while <condition pos:start="33:11" pos:end="33:13">(<expr pos:start="33:12" pos:end="33:12"><literal type="number" pos:start="33:12" pos:end="33:12">1</literal></expr>)</condition> <block pos:start="33:15" pos:end="53:5">{<block_content pos:start="35:9" pos:end="51:19">

        <expr_stmt pos:start="35:9" pos:end="35:48"><expr pos:start="35:9" pos:end="35:47"><name pos:start="35:9" pos:end="35:15">bsf_str</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:47"><name pos:start="35:19" pos:end="35:27">av_strtok</name><argument_list pos:start="35:28" pos:end="35:47">(<argument pos:start="35:29" pos:end="35:31"><expr pos:start="35:29" pos:end="35:31"><name pos:start="35:29" pos:end="35:31">buf</name></expr></argument>, <argument pos:start="35:34" pos:end="35:36"><expr pos:start="35:34" pos:end="35:36"><literal type="string" pos:start="35:34" pos:end="35:36">","</literal></expr></argument>, <argument pos:start="35:39" pos:end="35:46"><expr pos:start="35:39" pos:end="35:46"><operator pos:start="35:39" pos:end="35:39">&amp;</operator><name pos:start="35:40" pos:end="35:46">saveptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:18"><if pos:start="37:9" pos:end="39:18">if <condition pos:start="37:12" pos:end="37:21">(<expr pos:start="37:13" pos:end="37:20"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:20">bsf_str</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:18"><block_content pos:start="39:13" pos:end="39:18">

            <break pos:start="39:13" pos:end="39:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:45"><expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:44"><name pos:start="43:15" pos:end="43:30">bsf_parse_single</name><argument_list pos:start="43:31" pos:end="43:44">(<argument pos:start="43:32" pos:end="43:38"><expr pos:start="43:32" pos:end="43:38"><name pos:start="43:32" pos:end="43:38">bsf_str</name></expr></argument>, <argument pos:start="43:41" pos:end="43:43"><expr pos:start="43:41" pos:end="43:43"><name pos:start="43:41" pos:end="43:43">lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="47:21"><if pos:start="45:9" pos:end="47:21">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:21"><block_content pos:start="47:13" pos:end="47:21">

            <goto pos:start="47:13" pos:end="47:21">goto <name pos:start="47:18" pos:end="47:20">end</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:11">buf</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:18">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:45"><name pos:start="57:11" pos:end="57:30">av_bsf_list_finalize</name><argument_list pos:start="57:31" pos:end="57:45">(<argument pos:start="57:32" pos:end="57:35"><expr pos:start="57:32" pos:end="57:35"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:35">lst</name></expr></argument>, <argument pos:start="57:38" pos:end="57:44"><expr pos:start="57:38" pos:end="57:44"><name pos:start="57:38" pos:end="57:44">bsf_lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="59:1" pos:end="59:4"><name pos:start="59:1" pos:end="59:3">end</name>:</label>

    <if_stmt pos:start="61:5" pos:end="63:31"><if pos:start="61:5" pos:end="63:31">if <condition pos:start="61:8" pos:end="61:16">(<expr pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">&lt;</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:31"><block_content pos:start="63:9" pos:end="63:31">

        <expr_stmt pos:start="63:9" pos:end="63:31"><expr pos:start="63:9" pos:end="63:30"><call pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:24">av_bsf_list_free</name><argument_list pos:start="63:25" pos:end="63:30">(<argument pos:start="63:26" pos:end="63:29"><expr pos:start="63:26" pos:end="63:29"><operator pos:start="63:26" pos:end="63:26">&amp;</operator><name pos:start="63:27" pos:end="63:29">lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:17"><expr pos:start="65:5" pos:end="65:16"><call pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:11">av_free</name><argument_list pos:start="65:12" pos:end="65:16">(<argument pos:start="65:13" pos:end="65:15"><expr pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:15">dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="67:5" pos:end="67:15">return <expr pos:start="67:12" pos:end="67:14"><name pos:start="67:12" pos:end="67:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
