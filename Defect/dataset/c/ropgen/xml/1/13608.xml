<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13608.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">main_loop</name><parameter_list pos:start="1:14" pos:end="1:27">(<parameter pos:start="1:15" pos:end="1:26"><decl pos:start="1:15" pos:end="1:26"><type pos:start="1:15" pos:end="1:20"><name pos:start="1:15" pos:end="1:18">void</name> <modifier pos:start="1:20" pos:end="1:20">*</modifier></type><name pos:start="1:21" pos:end="1:26">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="187:1">{<block_content pos:start="5:5" pos:end="185:26">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:17">pollfd</name></name></type> <name pos:start="5:19" pos:end="5:25"><name pos:start="5:19" pos:end="5:22">ufds</name><index pos:start="5:23" pos:end="5:25">[<expr pos:start="5:24" pos:end="5:24"><literal type="number" pos:start="5:24" pos:end="5:24">2</literal></expr>]</index></name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:30">pf</name></decl>, <decl pos:start="5:33" pos:end="5:43"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:43">serial_ufd</name></decl>, <decl pos:start="5:46" pos:end="5:53"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:53">net_ufd</name></decl>, <decl pos:start="5:56" pos:end="5:63"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:63">gdb_ufd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">n</name></decl>, <decl pos:start="7:17" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:23">timeout</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:14">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name> <init pos:start="11:19" pos:end="11:30">= <expr pos:start="11:21" pos:end="11:30"><name pos:start="11:21" pos:end="11:30">global_env</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="15:21">(<expr pos:start="15:9" pos:end="15:20"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:20">term_inited</name></expr>)</condition> <block pos:start="15:23" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:20">

        <comment type="block" pos:start="17:9" pos:end="21:25">/* initialize terminal only there so that the user has a

           chance to stop QEMU with Ctrl-C before the gdb connection

           is launched */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:24"><expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:19">term_inited</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <literal type="number" pos:start="23:23" pos:end="23:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:20"><expr pos:start="25:9" pos:end="25:19"><call pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:17">term_init</name><argument_list pos:start="25:18" pos:end="25:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="31:5" pos:end="183:5">for<control pos:start="31:8" pos:end="31:11">(<init pos:start="31:9" pos:end="31:9">;</init><condition pos:start="31:10" pos:end="31:10">;</condition><incr/>)</control> <block pos:start="31:13" pos:end="183:5">{<block_content pos:start="33:9" pos:end="181:9">

        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:31"><name pos:start="33:15" pos:end="33:26">cpu_x86_exec</name><argument_list pos:start="33:27" pos:end="33:31">(<argument pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><name pos:start="33:28" pos:end="33:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="37:18"><if pos:start="35:9" pos:end="37:18">if <condition pos:start="35:12" pos:end="35:28">(<expr pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:27">reset_requested</name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:18"><block_content pos:start="37:13" pos:end="37:18">

            <break pos:start="37:13" pos:end="37:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="41:30"><if pos:start="39:9" pos:end="41:30">if <condition pos:start="39:12" pos:end="39:30">(<expr pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:18">==</operator> <name pos:start="39:20" pos:end="39:29">EXCP_DEBUG</name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:30"><block_content pos:start="41:13" pos:end="41:30">

            <return pos:start="41:13" pos:end="41:30">return <expr pos:start="41:20" pos:end="41:29"><name pos:start="41:20" pos:end="41:29">EXCP_DEBUG</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:60">/* if hlt instruction, we wait until the next IRQ */</comment>

        <if_stmt pos:start="45:9" pos:end="51:24"><if pos:start="45:9" pos:end="47:25">if <condition pos:start="45:12" pos:end="45:28">(<expr pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:18">==</operator> <name pos:start="45:20" pos:end="45:27">EXCP_HLT</name></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:25"><block_content pos:start="47:13" pos:end="47:25"> 

            <expr_stmt pos:start="47:13" pos:end="47:25"><expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:19">timeout</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <literal type="number" pos:start="47:23" pos:end="47:24">10</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="49:9" pos:end="51:24">else<block type="pseudo" pos:start="51:13" pos:end="51:24"><block_content pos:start="51:13" pos:end="51:24">

            <expr_stmt pos:start="51:13" pos:end="51:24"><expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:19">timeout</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block" pos:start="53:9" pos:end="53:29">/* poll any events */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:18">serial_ufd</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <name pos:start="55:22" pos:end="55:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:18"><expr pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:10">pf</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:17">ufds</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="69:9"><if pos:start="59:9" pos:end="69:9">if <condition pos:start="59:12" pos:end="59:49">(<expr pos:start="59:13" pos:end="59:48"><operator pos:start="59:13" pos:end="59:13">!</operator><operator pos:start="59:14" pos:end="59:14">(</operator><name pos:start="59:15" pos:end="59:29"><name pos:start="59:15" pos:end="59:26">serial_ports</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr>]</index></name><operator pos:start="59:30" pos:end="59:30">.</operator><name pos:start="59:31" pos:end="59:33">lsr</name> <operator pos:start="59:35" pos:end="59:35">&amp;</operator> <name pos:start="59:37" pos:end="59:47">UART_LSR_DR</name><operator pos:start="59:48" pos:end="59:48">)</operator></expr>)</condition> <block pos:start="59:51" pos:end="69:9">{<block_content pos:start="61:13" pos:end="67:17">

            <expr_stmt pos:start="61:13" pos:end="61:28"><expr pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:22">serial_ufd</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:27">pf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:23"><expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:14">pf</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:18">fd</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:32"><expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:14">pf</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:22">events</name></name> <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:31">POLLIN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:17"><expr pos:start="67:13" pos:end="67:16"><name pos:start="67:13" pos:end="67:14">pf</name><operator pos:start="67:15" pos:end="67:16">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:23"><expr pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:15">net_ufd</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:22">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="83:9">if <condition pos:start="73:12" pos:end="73:60">(<expr pos:start="73:13" pos:end="73:59"><name pos:start="73:13" pos:end="73:18">net_fd</name> <operator pos:start="73:20" pos:end="73:20">&gt;</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal> <operator pos:start="73:24" pos:end="73:25">&amp;&amp;</operator> <call pos:start="73:27" pos:end="73:59"><name pos:start="73:27" pos:end="73:44">ne2000_can_receive</name><argument_list pos:start="73:45" pos:end="73:59">(<argument pos:start="73:46" pos:end="73:58"><expr pos:start="73:46" pos:end="73:58"><operator pos:start="73:46" pos:end="73:46">&amp;</operator><name pos:start="73:47" pos:end="73:58">ne2000_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:62" pos:end="83:9">{<block_content pos:start="75:13" pos:end="81:17">

            <expr_stmt pos:start="75:13" pos:end="75:25"><expr pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:19">net_ufd</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:24">pf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:28"><expr pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:14">pf</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:18">fd</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:27">net_fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:32"><expr pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:14">pf</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:22">events</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <name pos:start="79:26" pos:end="79:31">POLLIN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:17"><expr pos:start="81:13" pos:end="81:16"><name pos:start="81:13" pos:end="81:14">pf</name><operator pos:start="81:15" pos:end="81:16">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:23"><expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:15">gdb_ufd</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:22">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="97:9"><if pos:start="87:9" pos:end="97:9">if <condition pos:start="87:12" pos:end="87:27">(<expr pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:22">gdbstub_fd</name> <operator pos:start="87:24" pos:end="87:24">&gt;</operator> <literal type="number" pos:start="87:26" pos:end="87:26">0</literal></expr>)</condition> <block pos:start="87:29" pos:end="97:9">{<block_content pos:start="89:13" pos:end="95:17">

            <expr_stmt pos:start="89:13" pos:end="89:25"><expr pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:19">gdb_ufd</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <name pos:start="89:23" pos:end="89:24">pf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:14">pf</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:18">fd</name></name> <operator pos:start="91:20" pos:end="91:20">=</operator> <name pos:start="91:22" pos:end="91:31">gdbstub_fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:32"><expr pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:22"><name pos:start="93:13" pos:end="93:14">pf</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:22">events</name></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:31">POLLIN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:17"><expr pos:start="95:13" pos:end="95:16"><name pos:start="95:13" pos:end="95:14">pf</name><operator pos:start="95:15" pos:end="95:16">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:45"><expr pos:start="101:9" pos:end="101:44"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:44"><name pos:start="101:15" pos:end="101:18">poll</name><argument_list pos:start="101:19" pos:end="101:44">(<argument pos:start="101:20" pos:end="101:23"><expr pos:start="101:20" pos:end="101:23"><name pos:start="101:20" pos:end="101:23">ufds</name></expr></argument>, <argument pos:start="101:26" pos:end="101:34"><expr pos:start="101:26" pos:end="101:34"><name pos:start="101:26" pos:end="101:27">pf</name> <operator pos:start="101:29" pos:end="101:29">-</operator> <name pos:start="101:31" pos:end="101:34">ufds</name></expr></argument>, <argument pos:start="101:37" pos:end="101:43"><expr pos:start="101:37" pos:end="101:43"><name pos:start="101:37" pos:end="101:43">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="155:9"><if pos:start="103:9" pos:end="155:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">&gt;</operator> <literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr>)</condition> <block pos:start="103:22" pos:end="155:9">{<block_content pos:start="105:13" pos:end="153:13">

            <if_stmt pos:start="105:13" pos:end="115:13"><if pos:start="105:13" pos:end="115:13">if <condition pos:start="105:16" pos:end="105:61">(<expr pos:start="105:17" pos:end="105:60"><name pos:start="105:17" pos:end="105:26">serial_ufd</name> <operator pos:start="105:28" pos:end="105:29">&amp;&amp;</operator> <operator pos:start="105:31" pos:end="105:31">(</operator><name pos:start="105:32" pos:end="105:50"><name pos:start="105:32" pos:end="105:41">serial_ufd</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:50">revents</name></name> <operator pos:start="105:52" pos:end="105:52">&amp;</operator> <name pos:start="105:54" pos:end="105:59">POLLIN</name><operator pos:start="105:60" pos:end="105:60">)</operator></expr>)</condition> <block pos:start="105:63" pos:end="115:13">{<block_content pos:start="107:17" pos:end="113:17">

                <expr_stmt pos:start="107:17" pos:end="107:36"><expr pos:start="107:17" pos:end="107:35"><name pos:start="107:17" pos:end="107:17">n</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <call pos:start="107:21" pos:end="107:35"><name pos:start="107:21" pos:end="107:24">read</name><argument_list pos:start="107:25" pos:end="107:35">(<argument pos:start="107:26" pos:end="107:26"><expr pos:start="107:26" pos:end="107:26"><literal type="number" pos:start="107:26" pos:end="107:26">0</literal></expr></argument>, <argument pos:start="107:29" pos:end="107:31"><expr pos:start="107:29" pos:end="107:31"><operator pos:start="107:29" pos:end="107:29">&amp;</operator><name pos:start="107:30" pos:end="107:31">ch</name></expr></argument>, <argument pos:start="107:34" pos:end="107:34"><expr pos:start="107:34" pos:end="107:34"><literal type="number" pos:start="107:34" pos:end="107:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="109:17" pos:end="113:17"><if pos:start="109:17" pos:end="113:17">if <condition pos:start="109:20" pos:end="109:27">(<expr pos:start="109:21" pos:end="109:26"><name pos:start="109:21" pos:end="109:21">n</name> <operator pos:start="109:23" pos:end="109:24">==</operator> <literal type="number" pos:start="109:26" pos:end="109:26">1</literal></expr>)</condition> <block pos:start="109:29" pos:end="113:17">{<block_content pos:start="111:21" pos:end="111:63">

                    <expr_stmt pos:start="111:21" pos:end="111:63"><expr pos:start="111:21" pos:end="111:62"><call pos:start="111:21" pos:end="111:62"><name pos:start="111:21" pos:end="111:40">serial_received_byte</name><argument_list pos:start="111:41" pos:end="111:62">(<argument pos:start="111:42" pos:end="111:57"><expr pos:start="111:42" pos:end="111:57"><operator pos:start="111:42" pos:end="111:42">&amp;</operator><name pos:start="111:43" pos:end="111:57"><name pos:start="111:43" pos:end="111:54">serial_ports</name><index pos:start="111:55" pos:end="111:57">[<expr pos:start="111:56" pos:end="111:56"><literal type="number" pos:start="111:56" pos:end="111:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="111:60" pos:end="111:61"><expr pos:start="111:60" pos:end="111:61"><name pos:start="111:60" pos:end="111:61">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="117:13" pos:end="139:13"><if pos:start="117:13" pos:end="139:13">if <condition pos:start="117:16" pos:end="117:55">(<expr pos:start="117:17" pos:end="117:54"><name pos:start="117:17" pos:end="117:23">net_ufd</name> <operator pos:start="117:25" pos:end="117:26">&amp;&amp;</operator> <operator pos:start="117:28" pos:end="117:28">(</operator><name pos:start="117:29" pos:end="117:44"><name pos:start="117:29" pos:end="117:35">net_ufd</name><operator pos:start="117:36" pos:end="117:37">-&gt;</operator><name pos:start="117:38" pos:end="117:44">revents</name></name> <operator pos:start="117:46" pos:end="117:46">&amp;</operator> <name pos:start="117:48" pos:end="117:53">POLLIN</name><operator pos:start="117:54" pos:end="117:54">)</operator></expr>)</condition> <block pos:start="117:57" pos:end="139:13">{<block_content pos:start="119:17" pos:end="137:17">

                <decl_stmt pos:start="119:17" pos:end="119:48"><decl pos:start="119:17" pos:end="119:47"><type pos:start="119:17" pos:end="119:23"><name pos:start="119:17" pos:end="119:23">uint8_t</name></type> <name pos:start="119:25" pos:end="119:47"><name pos:start="119:25" pos:end="119:27">buf</name><index pos:start="119:28" pos:end="119:47">[<expr pos:start="119:29" pos:end="119:46"><name pos:start="119:29" pos:end="119:46">MAX_ETH_FRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



                <expr_stmt pos:start="123:17" pos:end="123:58"><expr pos:start="123:17" pos:end="123:57"><name pos:start="123:17" pos:end="123:17">n</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <call pos:start="123:21" pos:end="123:57"><name pos:start="123:21" pos:end="123:24">read</name><argument_list pos:start="123:25" pos:end="123:57">(<argument pos:start="123:26" pos:end="123:31"><expr pos:start="123:26" pos:end="123:31"><name pos:start="123:26" pos:end="123:31">net_fd</name></expr></argument>, <argument pos:start="123:34" pos:end="123:36"><expr pos:start="123:34" pos:end="123:36"><name pos:start="123:34" pos:end="123:36">buf</name></expr></argument>, <argument pos:start="123:39" pos:end="123:56"><expr pos:start="123:39" pos:end="123:56"><name pos:start="123:39" pos:end="123:56">MAX_ETH_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="137:17"><if pos:start="125:17" pos:end="137:17">if <condition pos:start="125:20" pos:end="125:26">(<expr pos:start="125:21" pos:end="125:25"><name pos:start="125:21" pos:end="125:21">n</name> <operator pos:start="125:23" pos:end="125:23">&gt;</operator> <literal type="number" pos:start="125:25" pos:end="125:25">0</literal></expr>)</condition> <block pos:start="125:28" pos:end="137:17">{<block_content pos:start="127:21" pos:end="135:58">

                    <if_stmt pos:start="127:21" pos:end="133:21"><if pos:start="127:21" pos:end="133:21">if <condition pos:start="127:24" pos:end="127:31">(<expr pos:start="127:25" pos:end="127:30"><name pos:start="127:25" pos:end="127:25">n</name> <operator pos:start="127:27" pos:end="127:27">&lt;</operator> <literal type="number" pos:start="127:29" pos:end="127:30">60</literal></expr>)</condition> <block pos:start="127:33" pos:end="133:21">{<block_content pos:start="129:25" pos:end="131:31">

                        <expr_stmt pos:start="129:25" pos:end="129:51"><expr pos:start="129:25" pos:end="129:50"><call pos:start="129:25" pos:end="129:50"><name pos:start="129:25" pos:end="129:30">memset</name><argument_list pos:start="129:31" pos:end="129:50">(<argument pos:start="129:32" pos:end="129:38"><expr pos:start="129:32" pos:end="129:38"><name pos:start="129:32" pos:end="129:34">buf</name> <operator pos:start="129:36" pos:end="129:36">+</operator> <name pos:start="129:38" pos:end="129:38">n</name></expr></argument>, <argument pos:start="129:41" pos:end="129:41"><expr pos:start="129:41" pos:end="129:41"><literal type="number" pos:start="129:41" pos:end="129:41">0</literal></expr></argument>, <argument pos:start="129:44" pos:end="129:49"><expr pos:start="129:44" pos:end="129:49"><literal type="number" pos:start="129:44" pos:end="129:47">60</literal> <operator pos:start="129:47" pos:end="129:47">-</operator> <name pos:start="129:49" pos:end="129:49">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="131:25" pos:end="131:31"><expr pos:start="131:25" pos:end="131:30"><name pos:start="131:25" pos:end="131:25">n</name> <operator pos:start="131:27" pos:end="131:27">=</operator> <literal type="number" pos:start="131:29" pos:end="131:30">60</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="135:21" pos:end="135:58"><expr pos:start="135:21" pos:end="135:57"><call pos:start="135:21" pos:end="135:57"><name pos:start="135:21" pos:end="135:34">ne2000_receive</name><argument_list pos:start="135:35" pos:end="135:57">(<argument pos:start="135:36" pos:end="135:48"><expr pos:start="135:36" pos:end="135:48"><operator pos:start="135:36" pos:end="135:36">&amp;</operator><name pos:start="135:37" pos:end="135:48">ne2000_state</name></expr></argument>, <argument pos:start="135:51" pos:end="135:53"><expr pos:start="135:51" pos:end="135:53"><name pos:start="135:51" pos:end="135:53">buf</name></expr></argument>, <argument pos:start="135:56" pos:end="135:56"><expr pos:start="135:56" pos:end="135:56"><name pos:start="135:56" pos:end="135:56">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="141:13" pos:end="153:13"><if pos:start="141:13" pos:end="153:13">if <condition pos:start="141:16" pos:end="141:55">(<expr pos:start="141:17" pos:end="141:54"><name pos:start="141:17" pos:end="141:23">gdb_ufd</name> <operator pos:start="141:25" pos:end="141:26">&amp;&amp;</operator> <operator pos:start="141:28" pos:end="141:28">(</operator><name pos:start="141:29" pos:end="141:44"><name pos:start="141:29" pos:end="141:35">gdb_ufd</name><operator pos:start="141:36" pos:end="141:37">-&gt;</operator><name pos:start="141:38" pos:end="141:44">revents</name></name> <operator pos:start="141:46" pos:end="141:46">&amp;</operator> <name pos:start="141:48" pos:end="141:53">POLLIN</name><operator pos:start="141:54" pos:end="141:54">)</operator></expr>)</condition> <block pos:start="141:57" pos:end="153:13">{<block_content pos:start="143:17" pos:end="151:26">

                <decl_stmt pos:start="143:17" pos:end="143:31"><decl pos:start="143:17" pos:end="143:30"><type pos:start="143:17" pos:end="143:23"><name pos:start="143:17" pos:end="143:23">uint8_t</name></type> <name pos:start="143:25" pos:end="143:30"><name pos:start="143:25" pos:end="143:27">buf</name><index pos:start="143:28" pos:end="143:30">[<expr pos:start="143:29" pos:end="143:29"><literal type="number" pos:start="143:29" pos:end="143:29">1</literal></expr>]</index></name></decl>;</decl_stmt>

                <comment type="block" pos:start="145:17" pos:end="145:56">/* stop emulation if requested by gdb */</comment>

                <expr_stmt pos:start="147:17" pos:end="147:45"><expr pos:start="147:17" pos:end="147:44"><name pos:start="147:17" pos:end="147:17">n</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <call pos:start="147:21" pos:end="147:44"><name pos:start="147:21" pos:end="147:24">read</name><argument_list pos:start="147:25" pos:end="147:44">(<argument pos:start="147:26" pos:end="147:35"><expr pos:start="147:26" pos:end="147:35"><name pos:start="147:26" pos:end="147:35">gdbstub_fd</name></expr></argument>, <argument pos:start="147:38" pos:end="147:40"><expr pos:start="147:38" pos:end="147:40"><name pos:start="147:38" pos:end="147:40">buf</name></expr></argument>, <argument pos:start="147:43" pos:end="147:43"><expr pos:start="147:43" pos:end="147:43"><literal type="number" pos:start="147:43" pos:end="147:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="149:17" pos:end="151:26"><if pos:start="149:17" pos:end="151:26">if <condition pos:start="149:20" pos:end="149:27">(<expr pos:start="149:21" pos:end="149:26"><name pos:start="149:21" pos:end="149:21">n</name> <operator pos:start="149:23" pos:end="149:24">==</operator> <literal type="number" pos:start="149:26" pos:end="149:26">1</literal></expr>)</condition><block type="pseudo" pos:start="151:21" pos:end="151:26"><block_content pos:start="151:21" pos:end="151:26">

                    <break pos:start="151:21" pos:end="151:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:23">/* timer IRQ */</comment>

        <if_stmt pos:start="161:9" pos:end="169:9"><if pos:start="161:9" pos:end="169:9">if <condition pos:start="161:12" pos:end="161:30">(<expr pos:start="161:13" pos:end="161:29"><name pos:start="161:13" pos:end="161:29">timer_irq_pending</name></expr>)</condition> <block pos:start="161:32" pos:end="169:9">{<block_content pos:start="163:13" pos:end="167:34">

            <expr_stmt pos:start="163:13" pos:end="163:30"><expr pos:start="163:13" pos:end="163:29"><call pos:start="163:13" pos:end="163:29"><name pos:start="163:13" pos:end="163:23">pic_set_irq</name><argument_list pos:start="163:24" pos:end="163:29">(<argument pos:start="163:25" pos:end="163:25"><expr pos:start="163:25" pos:end="163:25"><literal type="number" pos:start="163:25" pos:end="163:25">0</literal></expr></argument>, <argument pos:start="163:28" pos:end="163:28"><expr pos:start="163:28" pos:end="163:28"><literal type="number" pos:start="163:28" pos:end="163:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:30"><expr pos:start="165:13" pos:end="165:29"><call pos:start="165:13" pos:end="165:29"><name pos:start="165:13" pos:end="165:23">pic_set_irq</name><argument_list pos:start="165:24" pos:end="165:29">(<argument pos:start="165:25" pos:end="165:25"><expr pos:start="165:25" pos:end="165:25"><literal type="number" pos:start="165:25" pos:end="165:25">0</literal></expr></argument>, <argument pos:start="165:28" pos:end="165:28"><expr pos:start="165:28" pos:end="165:28"><literal type="number" pos:start="165:28" pos:end="165:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:34"><expr pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:29">timer_irq_pending</name> <operator pos:start="167:31" pos:end="167:31">=</operator> <literal type="number" pos:start="167:33" pos:end="167:33">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="173:9" pos:end="173:17">/* VGA */</comment>

        <if_stmt pos:start="175:9" pos:end="181:9"><if pos:start="175:9" pos:end="181:9">if <condition pos:start="175:12" pos:end="175:32">(<expr pos:start="175:13" pos:end="175:31"><name pos:start="175:13" pos:end="175:31">gui_refresh_pending</name></expr>)</condition> <block pos:start="175:34" pos:end="181:9">{<block_content pos:start="177:13" pos:end="179:36">

            <expr_stmt pos:start="177:13" pos:end="177:54"><expr pos:start="177:13" pos:end="177:53"><call pos:start="177:13" pos:end="177:53"><name pos:start="177:13" pos:end="177:37"><name pos:start="177:13" pos:end="177:25">display_state</name><operator pos:start="177:26" pos:end="177:26">.</operator><name pos:start="177:27" pos:end="177:37">dpy_refresh</name></name><argument_list pos:start="177:38" pos:end="177:53">(<argument pos:start="177:39" pos:end="177:52"><expr pos:start="177:39" pos:end="177:52"><operator pos:start="177:39" pos:end="177:39">&amp;</operator><name pos:start="177:40" pos:end="177:52">display_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:36"><expr pos:start="179:13" pos:end="179:35"><name pos:start="179:13" pos:end="179:31">gui_refresh_pending</name> <operator pos:start="179:33" pos:end="179:33">=</operator> <literal type="number" pos:start="179:35" pos:end="179:35">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="185:5" pos:end="185:26">return <expr pos:start="185:12" pos:end="185:25"><name pos:start="185:12" pos:end="185:25">EXCP_INTERRUPT</name></expr>;</return>

</block_content>}</block></function>
</unit>
