<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/437.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">handle_primary_tcp_pkt</name><parameter_list pos:start="1:34" pos:end="5:46">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:48">NetFilterState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">nf</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:50"><decl pos:start="3:35" pos:end="3:50"><type pos:start="3:35" pos:end="3:50"><name pos:start="3:35" pos:end="3:44">Connection</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">conn</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:45"><decl pos:start="5:35" pos:end="5:45"><type pos:start="5:35" pos:end="5:45"><name pos:start="5:35" pos:end="5:40">Packet</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:45">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="85:1">{<block_content pos:start="9:5" pos:end="83:13">

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">tcphdr</name></name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:26">tcp_pkt</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:53"><expr pos:start="13:5" pos:end="13:52"><name pos:start="13:5" pos:end="13:11">tcp_pkt</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <operator pos:start="13:15" pos:end="13:15">(</operator>struct <name pos:start="13:23" pos:end="13:28">tcphdr</name> <operator pos:start="13:30" pos:end="13:30">*</operator><operator pos:start="13:31" pos:end="13:31">)</operator><name pos:start="13:32" pos:end="13:52"><name pos:start="13:32" pos:end="13:34">pkt</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:52">transport_header</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="27:5"><if pos:start="15:5" pos:end="27:5">if <condition pos:start="15:8" pos:end="15:73">(<expr pos:start="15:9" pos:end="15:72"><call pos:start="15:9" pos:end="15:72"><name pos:start="15:9" pos:end="15:38">trace_event_get_state_backends</name><argument_list pos:start="15:39" pos:end="15:72">(<argument pos:start="15:40" pos:end="15:71"><expr pos:start="15:40" pos:end="15:71"><name pos:start="15:40" pos:end="15:71">TRACE_COLO_FILTER_REWRITER_DEBUG</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:75" pos:end="27:5">{<block_content pos:start="17:9" pos:end="25:61">

        <expr_stmt pos:start="17:9" pos:end="23:39"><expr pos:start="17:9" pos:end="23:38"><call pos:start="17:9" pos:end="23:38"><name pos:start="17:9" pos:end="17:43">trace_colo_filter_rewriter_pkt_info</name><argument_list pos:start="17:44" pos:end="23:38">(<argument pos:start="17:45" pos:end="17:52"><expr pos:start="17:45" pos:end="17:52"><name pos:start="17:45" pos:end="17:52">__func__</name></expr></argument>,

                    <argument pos:start="19:21" pos:end="19:46"><expr pos:start="19:21" pos:end="19:46"><call pos:start="19:21" pos:end="19:46"><name pos:start="19:21" pos:end="19:29">inet_ntoa</name><argument_list pos:start="19:30" pos:end="19:46">(<argument pos:start="19:31" pos:end="19:45"><expr pos:start="19:31" pos:end="19:45"><name pos:start="19:31" pos:end="19:45"><name pos:start="19:31" pos:end="19:33">pkt</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:37">ip</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:45">ip_src</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:49" pos:end="19:74"><expr pos:start="19:49" pos:end="19:74"><call pos:start="19:49" pos:end="19:74"><name pos:start="19:49" pos:end="19:57">inet_ntoa</name><argument_list pos:start="19:58" pos:end="19:74">(<argument pos:start="19:59" pos:end="19:73"><expr pos:start="19:59" pos:end="19:73"><name pos:start="19:59" pos:end="19:73"><name pos:start="19:59" pos:end="19:61">pkt</name><operator pos:start="19:62" pos:end="19:63">-&gt;</operator><name pos:start="19:64" pos:end="19:65">ip</name><operator pos:start="19:66" pos:end="19:67">-&gt;</operator><name pos:start="19:68" pos:end="19:73">ip_dst</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="21:21" pos:end="21:42"><expr pos:start="21:21" pos:end="21:42"><call pos:start="21:21" pos:end="21:42"><name pos:start="21:21" pos:end="21:25">ntohl</name><argument_list pos:start="21:26" pos:end="21:42">(<argument pos:start="21:27" pos:end="21:41"><expr pos:start="21:27" pos:end="21:41"><name pos:start="21:27" pos:end="21:41"><name pos:start="21:27" pos:end="21:33">tcp_pkt</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:41">th_seq</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:45" pos:end="21:66"><expr pos:start="21:45" pos:end="21:66"><call pos:start="21:45" pos:end="21:66"><name pos:start="21:45" pos:end="21:49">ntohl</name><argument_list pos:start="21:50" pos:end="21:66">(<argument pos:start="21:51" pos:end="21:65"><expr pos:start="21:51" pos:end="21:65"><name pos:start="21:51" pos:end="21:65"><name pos:start="21:51" pos:end="21:57">tcp_pkt</name><operator pos:start="21:58" pos:end="21:59">-&gt;</operator><name pos:start="21:60" pos:end="21:65">th_ack</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="23:21" pos:end="23:37"><expr pos:start="23:21" pos:end="23:37"><name pos:start="23:21" pos:end="23:37"><name pos:start="23:21" pos:end="23:27">tcp_pkt</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:37">th_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:61"><expr pos:start="25:9" pos:end="25:60"><call pos:start="25:9" pos:end="25:60"><name pos:start="25:9" pos:end="25:46">trace_colo_filter_rewriter_conn_offset</name><argument_list pos:start="25:47" pos:end="25:60">(<argument pos:start="25:48" pos:end="25:59"><expr pos:start="25:48" pos:end="25:59"><name pos:start="25:48" pos:end="25:59"><name pos:start="25:48" pos:end="25:51">conn</name><operator pos:start="25:52" pos:end="25:53">-&gt;</operator><name pos:start="25:54" pos:end="25:59">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="43:5">if <condition pos:start="31:8" pos:end="31:60">(<expr pos:start="31:9" pos:end="31:59"><operator pos:start="31:9" pos:end="31:9">(</operator><operator pos:start="31:10" pos:end="31:10">(</operator><name pos:start="31:11" pos:end="31:27"><name pos:start="31:11" pos:end="31:17">tcp_pkt</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:27">th_flags</name></name> <operator pos:start="31:29" pos:end="31:29">&amp;</operator> <operator pos:start="31:31" pos:end="31:31">(</operator><name pos:start="31:32" pos:end="31:37">TH_ACK</name> <operator pos:start="31:39" pos:end="31:39">|</operator> <name pos:start="31:41" pos:end="31:46">TH_SYN</name><operator pos:start="31:47" pos:end="31:47">)</operator><operator pos:start="31:48" pos:end="31:48">)</operator> <operator pos:start="31:50" pos:end="31:51">==</operator> <name pos:start="31:53" pos:end="31:58">TH_SYN</name><operator pos:start="31:59" pos:end="31:59">)</operator></expr>)</condition> <block pos:start="31:62" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:27">

        <comment type="block" pos:start="33:9" pos:end="39:11">/*

         * we use this flag update offset func

         * run once in independent tcp connection

         */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:12">conn</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:22">syn_flag</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <literal type="number" pos:start="41:26" pos:end="41:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="79:5"><if pos:start="47:5" pos:end="79:5">if <condition pos:start="47:8" pos:end="47:60">(<expr pos:start="47:9" pos:end="47:59"><operator pos:start="47:9" pos:end="47:9">(</operator><operator pos:start="47:10" pos:end="47:10">(</operator><name pos:start="47:11" pos:end="47:27"><name pos:start="47:11" pos:end="47:17">tcp_pkt</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:27">th_flags</name></name> <operator pos:start="47:29" pos:end="47:29">&amp;</operator> <operator pos:start="47:31" pos:end="47:31">(</operator><name pos:start="47:32" pos:end="47:37">TH_ACK</name> <operator pos:start="47:39" pos:end="47:39">|</operator> <name pos:start="47:41" pos:end="47:46">TH_SYN</name><operator pos:start="47:47" pos:end="47:47">)</operator><operator pos:start="47:48" pos:end="47:48">)</operator> <operator pos:start="47:50" pos:end="47:51">==</operator> <name pos:start="47:53" pos:end="47:58">TH_ACK</name><operator pos:start="47:59" pos:end="47:59">)</operator></expr>)</condition> <block pos:start="47:62" pos:end="79:5">{<block_content pos:start="49:9" pos:end="77:9">

        <if_stmt pos:start="49:9" pos:end="65:9"><if pos:start="49:9" pos:end="65:9">if <condition pos:start="49:12" pos:end="49:27">(<expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:16">conn</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:26">syn_flag</name></name></expr>)</condition> <block pos:start="49:29" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:31">

            <comment type="block" pos:start="51:13" pos:end="59:15">/*

             * offset = secondary_seq - primary seq

             * ack packet sent by guest from primary node,

             * so we use th_ack - 1 get primary_seq

             */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:57"><expr pos:start="61:13" pos:end="61:56"><name pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:16">conn</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:24">offset</name></name> <operator pos:start="61:26" pos:end="61:27">-=</operator> <operator pos:start="61:29" pos:end="61:29">(</operator><call pos:start="61:30" pos:end="61:51"><name pos:start="61:30" pos:end="61:34">ntohl</name><argument_list pos:start="61:35" pos:end="61:51">(<argument pos:start="61:36" pos:end="61:50"><expr pos:start="61:36" pos:end="61:50"><name pos:start="61:36" pos:end="61:50"><name pos:start="61:36" pos:end="61:42">tcp_pkt</name><operator pos:start="61:43" pos:end="61:44">-&gt;</operator><name pos:start="61:45" pos:end="61:50">th_ack</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:53" pos:end="61:53">-</operator> <literal type="number" pos:start="61:55" pos:end="61:55">1</literal><operator pos:start="61:56" pos:end="61:56">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:31"><expr pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:16">conn</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:26">syn_flag</name></name> <operator pos:start="63:28" pos:end="63:28">=</operator> <literal type="number" pos:start="63:30" pos:end="63:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="77:9"><if pos:start="67:9" pos:end="77:9">if <condition pos:start="67:12" pos:end="67:25">(<expr pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:16">conn</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:24">offset</name></name></expr>)</condition> <block pos:start="67:27" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:68">

            <comment type="block" pos:start="69:13" pos:end="69:66">/* handle packets to the secondary from the primary */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:75"><expr pos:start="71:13" pos:end="71:74"><name pos:start="71:13" pos:end="71:27"><name pos:start="71:13" pos:end="71:19">tcp_pkt</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:27">th_ack</name></name> <operator pos:start="71:29" pos:end="71:29">=</operator> <call pos:start="71:31" pos:end="71:74"><name pos:start="71:31" pos:end="71:35">htonl</name><argument_list pos:start="71:36" pos:end="71:74">(<argument pos:start="71:37" pos:end="71:73"><expr pos:start="71:37" pos:end="71:73"><call pos:start="71:37" pos:end="71:58"><name pos:start="71:37" pos:end="71:41">ntohl</name><argument_list pos:start="71:42" pos:end="71:58">(<argument pos:start="71:43" pos:end="71:57"><expr pos:start="71:43" pos:end="71:57"><name pos:start="71:43" pos:end="71:57"><name pos:start="71:43" pos:end="71:49">tcp_pkt</name><operator pos:start="71:50" pos:end="71:51">-&gt;</operator><name pos:start="71:52" pos:end="71:57">th_ack</name></name></expr></argument>)</argument_list></call> <operator pos:start="71:60" pos:end="71:60">+</operator> <name pos:start="71:62" pos:end="71:73"><name pos:start="71:62" pos:end="71:65">conn</name><operator pos:start="71:66" pos:end="71:67">-&gt;</operator><name pos:start="71:68" pos:end="71:73">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="75:13" pos:end="75:68"><expr pos:start="75:13" pos:end="75:67"><call pos:start="75:13" pos:end="75:67"><name pos:start="75:13" pos:end="75:34">net_checksum_calculate</name><argument_list pos:start="75:35" pos:end="75:67">(<argument pos:start="75:36" pos:end="75:55"><expr pos:start="75:36" pos:end="75:55"><operator pos:start="75:36" pos:end="75:36">(</operator><name pos:start="75:37" pos:end="75:43">uint8_t</name> <operator pos:start="75:45" pos:end="75:45">*</operator><operator pos:start="75:46" pos:end="75:46">)</operator><name pos:start="75:47" pos:end="75:55"><name pos:start="75:47" pos:end="75:49">pkt</name><operator pos:start="75:50" pos:end="75:51">-&gt;</operator><name pos:start="75:52" pos:end="75:55">data</name></name></expr></argument>, <argument pos:start="75:58" pos:end="75:66"><expr pos:start="75:58" pos:end="75:66"><name pos:start="75:58" pos:end="75:66"><name pos:start="75:58" pos:end="75:60">pkt</name><operator pos:start="75:61" pos:end="75:62">-&gt;</operator><name pos:start="75:63" pos:end="75:66">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
