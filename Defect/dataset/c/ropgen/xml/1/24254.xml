<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24254.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:49"><name pos:start="1:1" pos:end="1:10">build_dsdt</name><argument_list pos:start="1:11" pos:end="5:49">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:45">GArray *linker</argument>,

           <argument pos:start="3:12" pos:end="3:25">AcpiPmInfo *pm</argument>, <argument pos:start="3:28" pos:end="3:45">AcpiMiscInfo *misc</argument>,

           <argument pos:start="5:12" pos:end="5:25">PcPciInfo *pci</argument>, <argument pos:start="5:28" pos:end="5:48">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="773:1">{<block_content pos:start="9:5" pos:end="771:25">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CrsRangeEntry</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">Aml</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:13">dsdt</name></decl>, <decl pos:start="11:16" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">sb_scope</name></decl>, <decl pos:start="11:27" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:32">scope</name></decl>, <decl pos:start="11:35" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:35" pos:end="11:35">*</modifier></type><name pos:start="11:36" pos:end="11:38">dev</name></decl>, <decl pos:start="11:41" pos:end="11:47"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:41" pos:end="11:41">*</modifier></type><name pos:start="11:42" pos:end="11:47">method</name></decl>, <decl pos:start="11:50" pos:end="11:55"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:50" pos:end="11:50">*</modifier></type><name pos:start="11:51" pos:end="11:55">field</name></decl>, <decl pos:start="11:58" pos:end="11:61"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:58" pos:end="11:58">*</modifier></type><name pos:start="11:59" pos:end="11:61">pkg</name></decl>, <decl pos:start="11:64" pos:end="11:67"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:64" pos:end="11:64">*</modifier></type><name pos:start="11:65" pos:end="11:67">crs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:75"><decl pos:start="13:5" pos:end="13:74"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">GPtrArray</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:25">mem_ranges</name> <init pos:start="13:27" pos:end="13:74">= <expr pos:start="13:29" pos:end="13:74"><call pos:start="13:29" pos:end="13:74"><name pos:start="13:29" pos:end="13:58">g_ptr_array_new_with_free_func</name><argument_list pos:start="13:59" pos:end="13:74">(<argument pos:start="13:60" pos:end="13:73"><expr pos:start="13:60" pos:end="13:73"><name pos:start="13:60" pos:end="13:73">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:74"><decl pos:start="15:5" pos:end="15:73"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">GPtrArray</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:24">io_ranges</name> <init pos:start="15:26" pos:end="15:73">= <expr pos:start="15:28" pos:end="15:73"><call pos:start="15:28" pos:end="15:73"><name pos:start="15:28" pos:end="15:57">g_ptr_array_new_with_free_func</name><argument_list pos:start="15:58" pos:end="15:73">(<argument pos:start="15:59" pos:end="15:72"><expr pos:start="15:59" pos:end="15:72"><name pos:start="15:59" pos:end="15:72">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">PCMachineState</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:24">pcms</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:37">PC_MACHINE</name><argument_list pos:start="17:38" pos:end="17:46">(<argument pos:start="17:39" pos:end="17:45"><expr pos:start="17:39" pos:end="17:45"><name pos:start="17:39" pos:end="17:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:40"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:19">nr_mem</name> <init pos:start="19:21" pos:end="19:40">= <expr pos:start="19:23" pos:end="19:40"><name pos:start="19:23" pos:end="19:40"><name pos:start="19:23" pos:end="19:29">machine</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:40">ram_slots</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:22">root_bus_limit</name> <init pos:start="21:24" pos:end="21:29">= <expr pos:start="21:26" pos:end="21:29"><literal type="number" pos:start="21:26" pos:end="21:29">0xFF</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10">PCIBus</name> <modifier pos:start="23:12" pos:end="23:12">*</modifier></type><name pos:start="23:13" pos:end="23:15">bus</name> <init pos:start="23:17" pos:end="23:22">= <expr pos:start="23:19" pos:end="23:22"><name pos:start="23:19" pos:end="23:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:8">dsdt</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:31"><name pos:start="29:12" pos:end="29:29">init_aml_allocator</name><argument_list pos:start="29:30" pos:end="29:31">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:34">/* Reserve space for header */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:55"><expr pos:start="35:5" pos:end="35:54"><call pos:start="35:5" pos:end="35:54"><name pos:start="35:5" pos:end="35:18">acpi_data_push</name><argument_list pos:start="35:19" pos:end="35:54">(<argument pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:23">dsdt</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:28">buf</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:53"><expr pos:start="35:31" pos:end="35:53"><sizeof pos:start="35:31" pos:end="35:53">sizeof<argument_list pos:start="35:37" pos:end="35:53">(<argument pos:start="35:38" pos:end="35:52"><expr pos:start="35:38" pos:end="35:52"><name pos:start="35:38" pos:end="35:52">AcpiTableHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><call pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:17">build_dbg_aml</name><argument_list pos:start="39:18" pos:end="39:23">(<argument pos:start="39:19" pos:end="39:22"><expr pos:start="39:19" pos:end="39:22"><name pos:start="39:19" pos:end="39:22">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="125:5"><if pos:start="41:5" pos:end="71:5">if <condition pos:start="41:8" pos:end="41:23">(<expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:12">misc</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:22">is_piix4</name></name></expr>)</condition> <block pos:start="41:25" pos:end="71:5">{<block_content pos:start="43:9" pos:end="69:35">

        <expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:16">sb_scope</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:35"><name pos:start="43:20" pos:end="43:28">aml_scope</name><argument_list pos:start="43:29" pos:end="43:35">(<argument pos:start="43:30" pos:end="43:34"><expr pos:start="43:30" pos:end="43:34"><literal type="string" pos:start="43:30" pos:end="43:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:33"><expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:11">dev</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:32"><name pos:start="45:15" pos:end="45:24">aml_device</name><argument_list pos:start="45:25" pos:end="45:32">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><literal type="string" pos:start="45:26" pos:end="45:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:70"><expr pos:start="47:9" pos:end="47:69"><call pos:start="47:9" pos:end="47:69"><name pos:start="47:9" pos:end="47:18">aml_append</name><argument_list pos:start="47:19" pos:end="47:69">(<argument pos:start="47:20" pos:end="47:22"><expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">dev</name></expr></argument>, <argument pos:start="47:25" pos:end="47:68"><expr pos:start="47:25" pos:end="47:68"><call pos:start="47:25" pos:end="47:68"><name pos:start="47:25" pos:end="47:37">aml_name_decl</name><argument_list pos:start="47:38" pos:end="47:68">(<argument pos:start="47:39" pos:end="47:44"><expr pos:start="47:39" pos:end="47:44"><literal type="string" pos:start="47:39" pos:end="47:44">"_HID"</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:67"><expr pos:start="47:47" pos:end="47:67"><call pos:start="47:47" pos:end="47:67"><name pos:start="47:47" pos:end="47:56">aml_eisaid</name><argument_list pos:start="47:57" pos:end="47:67">(<argument pos:start="47:58" pos:end="47:66"><expr pos:start="47:58" pos:end="47:66"><literal type="string" pos:start="47:58" pos:end="47:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><call pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:18">aml_append</name><argument_list pos:start="49:19" pos:end="49:58">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">dev</name></expr></argument>, <argument pos:start="49:25" pos:end="49:57"><expr pos:start="49:25" pos:end="49:57"><call pos:start="49:25" pos:end="49:57"><name pos:start="49:25" pos:end="49:37">aml_name_decl</name><argument_list pos:start="49:38" pos:end="49:57">(<argument pos:start="49:39" pos:end="49:44"><expr pos:start="49:39" pos:end="49:44"><literal type="string" pos:start="49:39" pos:end="49:44">"_ADR"</literal></expr></argument>, <argument pos:start="49:47" pos:end="49:56"><expr pos:start="49:47" pos:end="49:56"><call pos:start="49:47" pos:end="49:56"><name pos:start="49:47" pos:end="49:53">aml_int</name><argument_list pos:start="49:54" pos:end="49:56">(<argument pos:start="49:55" pos:end="49:55"><expr pos:start="49:55" pos:end="49:55"><literal type="number" pos:start="49:55" pos:end="49:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:18">aml_append</name><argument_list pos:start="51:19" pos:end="51:58">(<argument pos:start="51:20" pos:end="51:22"><expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">dev</name></expr></argument>, <argument pos:start="51:25" pos:end="51:57"><expr pos:start="51:25" pos:end="51:57"><call pos:start="51:25" pos:end="51:57"><name pos:start="51:25" pos:end="51:37">aml_name_decl</name><argument_list pos:start="51:38" pos:end="51:57">(<argument pos:start="51:39" pos:end="51:44"><expr pos:start="51:39" pos:end="51:44"><literal type="string" pos:start="51:39" pos:end="51:44">"_UID"</literal></expr></argument>, <argument pos:start="51:47" pos:end="51:56"><expr pos:start="51:47" pos:end="51:56"><call pos:start="51:47" pos:end="51:56"><name pos:start="51:47" pos:end="51:53">aml_int</name><argument_list pos:start="51:54" pos:end="51:56">(<argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><call pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:18">aml_append</name><argument_list pos:start="53:19" pos:end="53:33">(<argument pos:start="53:20" pos:end="53:27"><expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:27">sb_scope</name></expr></argument>, <argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><call pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:18">aml_append</name><argument_list pos:start="55:19" pos:end="55:34">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">dsdt</name></expr></argument>, <argument pos:start="55:26" pos:end="55:33"><expr pos:start="55:26" pos:end="55:33"><name pos:start="55:26" pos:end="55:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><call pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:22">build_hpet_aml</name><argument_list pos:start="59:23" pos:end="59:28">(<argument pos:start="59:24" pos:end="59:27"><expr pos:start="59:24" pos:end="59:27"><name pos:start="59:24" pos:end="59:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><call pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:22">build_piix4_pm</name><argument_list pos:start="61:23" pos:end="61:28">(<argument pos:start="61:24" pos:end="61:27"><expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><call pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:30">build_piix4_isa_bridge</name><argument_list pos:start="63:31" pos:end="63:36">(<argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:36"><expr pos:start="65:9" pos:end="65:35"><call pos:start="65:9" pos:end="65:35"><name pos:start="65:9" pos:end="65:29">build_isa_devices_aml</name><argument_list pos:start="65:30" pos:end="65:35">(<argument pos:start="65:31" pos:end="65:34"><expr pos:start="65:31" pos:end="65:34"><name pos:start="65:31" pos:end="65:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><call pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:31">build_piix4_pci_hotplug</name><argument_list pos:start="67:32" pos:end="67:37">(<argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><call pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:28">build_piix4_pci0_int</name><argument_list pos:start="69:29" pos:end="69:34">(<argument pos:start="69:30" pos:end="69:33"><expr pos:start="69:30" pos:end="69:33"><name pos:start="69:30" pos:end="69:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="125:5">else <block pos:start="71:12" pos:end="125:5">{<block_content pos:start="73:9" pos:end="123:33">

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:16">sb_scope</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:35"><name pos:start="73:20" pos:end="73:28">aml_scope</name><argument_list pos:start="73:29" pos:end="73:35">(<argument pos:start="73:30" pos:end="73:34"><expr pos:start="73:30" pos:end="73:34"><literal type="string" pos:start="73:30" pos:end="73:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="77:80"><expr pos:start="75:9" pos:end="77:79"><call pos:start="75:9" pos:end="77:79"><name pos:start="75:9" pos:end="75:18">aml_append</name><argument_list pos:start="75:19" pos:end="77:79">(<argument pos:start="75:20" pos:end="75:27"><expr pos:start="75:20" pos:end="75:27"><name pos:start="75:20" pos:end="75:27">sb_scope</name></expr></argument>,

            <argument pos:start="77:13" pos:end="77:78"><expr pos:start="77:13" pos:end="77:78"><call pos:start="77:13" pos:end="77:78"><name pos:start="77:13" pos:end="77:32">aml_operation_region</name><argument_list pos:start="77:33" pos:end="77:78">(<argument pos:start="77:34" pos:end="77:39"><expr pos:start="77:34" pos:end="77:39"><literal type="string" pos:start="77:34" pos:end="77:39">"PCST"</literal></expr></argument>, <argument pos:start="77:42" pos:end="77:54"><expr pos:start="77:42" pos:end="77:54"><name pos:start="77:42" pos:end="77:54">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="77:57" pos:end="77:71"><expr pos:start="77:57" pos:end="77:71"><call pos:start="77:57" pos:end="77:71"><name pos:start="77:57" pos:end="77:63">aml_int</name><argument_list pos:start="77:64" pos:end="77:71">(<argument pos:start="77:65" pos:end="77:70"><expr pos:start="77:65" pos:end="77:70"><literal type="number" pos:start="77:65" pos:end="77:70">0xae00</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:74" pos:end="77:77"><expr pos:start="77:74" pos:end="77:77"><literal type="number" pos:start="77:74" pos:end="77:77">0x0c</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="81:80"><expr pos:start="79:9" pos:end="81:79"><call pos:start="79:9" pos:end="81:79"><name pos:start="79:9" pos:end="79:18">aml_append</name><argument_list pos:start="79:19" pos:end="81:79">(<argument pos:start="79:20" pos:end="79:27"><expr pos:start="79:20" pos:end="79:27"><name pos:start="79:20" pos:end="79:27">sb_scope</name></expr></argument>,

            <argument pos:start="81:13" pos:end="81:78"><expr pos:start="81:13" pos:end="81:78"><call pos:start="81:13" pos:end="81:78"><name pos:start="81:13" pos:end="81:32">aml_operation_region</name><argument_list pos:start="81:33" pos:end="81:78">(<argument pos:start="81:34" pos:end="81:39"><expr pos:start="81:34" pos:end="81:39"><literal type="string" pos:start="81:34" pos:end="81:39">"PCSB"</literal></expr></argument>, <argument pos:start="81:42" pos:end="81:54"><expr pos:start="81:42" pos:end="81:54"><name pos:start="81:42" pos:end="81:54">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="81:57" pos:end="81:71"><expr pos:start="81:57" pos:end="81:71"><call pos:start="81:57" pos:end="81:71"><name pos:start="81:57" pos:end="81:63">aml_int</name><argument_list pos:start="81:64" pos:end="81:71">(<argument pos:start="81:65" pos:end="81:70"><expr pos:start="81:65" pos:end="81:70"><literal type="number" pos:start="81:65" pos:end="81:70">0xae0c</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:74" pos:end="81:77"><expr pos:start="81:74" pos:end="81:77"><literal type="number" pos:start="81:74" pos:end="81:77">0x01</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:79"><expr pos:start="83:9" pos:end="83:78"><name pos:start="83:9" pos:end="83:13">field</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <call pos:start="83:17" pos:end="83:78"><name pos:start="83:17" pos:end="83:25">aml_field</name><argument_list pos:start="83:26" pos:end="83:78">(<argument pos:start="83:27" pos:end="83:32"><expr pos:start="83:27" pos:end="83:32"><literal type="string" pos:start="83:27" pos:end="83:32">"PCSB"</literal></expr></argument>, <argument pos:start="83:35" pos:end="83:45"><expr pos:start="83:35" pos:end="83:45"><name pos:start="83:35" pos:end="83:45">AML_ANY_ACC</name></expr></argument>, <argument pos:start="83:48" pos:end="83:57"><expr pos:start="83:48" pos:end="83:57"><name pos:start="83:48" pos:end="83:57">AML_NOLOCK</name></expr></argument>, <argument pos:start="83:60" pos:end="83:77"><expr pos:start="83:60" pos:end="83:77"><name pos:start="83:60" pos:end="83:77">AML_WRITE_AS_ZEROS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:54"><expr pos:start="85:9" pos:end="85:53"><call pos:start="85:9" pos:end="85:53"><name pos:start="85:9" pos:end="85:18">aml_append</name><argument_list pos:start="85:19" pos:end="85:53">(<argument pos:start="85:20" pos:end="85:24"><expr pos:start="85:20" pos:end="85:24"><name pos:start="85:20" pos:end="85:24">field</name></expr></argument>, <argument pos:start="85:27" pos:end="85:52"><expr pos:start="85:27" pos:end="85:52"><call pos:start="85:27" pos:end="85:52"><name pos:start="85:27" pos:end="85:41">aml_named_field</name><argument_list pos:start="85:42" pos:end="85:52">(<argument pos:start="85:43" pos:end="85:48"><expr pos:start="85:43" pos:end="85:48"><literal type="string" pos:start="85:43" pos:end="85:48">"PCIB"</literal></expr></argument>, <argument pos:start="85:51" pos:end="85:51"><expr pos:start="85:51" pos:end="85:51"><literal type="number" pos:start="85:51" pos:end="85:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><call pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:18">aml_append</name><argument_list pos:start="87:19" pos:end="87:35">(<argument pos:start="87:20" pos:end="87:27"><expr pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:27">sb_scope</name></expr></argument>, <argument pos:start="87:30" pos:end="87:34"><expr pos:start="87:30" pos:end="87:34"><name pos:start="87:30" pos:end="87:34">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:35"><expr pos:start="89:9" pos:end="89:34"><call pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:18">aml_append</name><argument_list pos:start="89:19" pos:end="89:34">(<argument pos:start="89:20" pos:end="89:23"><expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">dsdt</name></expr></argument>, <argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:16">sb_scope</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="93:35"><name pos:start="93:20" pos:end="93:28">aml_scope</name><argument_list pos:start="93:29" pos:end="93:35">(<argument pos:start="93:30" pos:end="93:34"><expr pos:start="93:30" pos:end="93:34"><literal type="string" pos:start="93:30" pos:end="93:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:11">dev</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:32"><name pos:start="95:15" pos:end="95:24">aml_device</name><argument_list pos:start="95:25" pos:end="95:32">(<argument pos:start="95:26" pos:end="95:31"><expr pos:start="95:26" pos:end="95:31"><literal type="string" pos:start="95:26" pos:end="95:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:70"><expr pos:start="97:9" pos:end="97:69"><call pos:start="97:9" pos:end="97:69"><name pos:start="97:9" pos:end="97:18">aml_append</name><argument_list pos:start="97:19" pos:end="97:69">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">dev</name></expr></argument>, <argument pos:start="97:25" pos:end="97:68"><expr pos:start="97:25" pos:end="97:68"><call pos:start="97:25" pos:end="97:68"><name pos:start="97:25" pos:end="97:37">aml_name_decl</name><argument_list pos:start="97:38" pos:end="97:68">(<argument pos:start="97:39" pos:end="97:44"><expr pos:start="97:39" pos:end="97:44"><literal type="string" pos:start="97:39" pos:end="97:44">"_HID"</literal></expr></argument>, <argument pos:start="97:47" pos:end="97:67"><expr pos:start="97:47" pos:end="97:67"><call pos:start="97:47" pos:end="97:67"><name pos:start="97:47" pos:end="97:56">aml_eisaid</name><argument_list pos:start="97:57" pos:end="97:67">(<argument pos:start="97:58" pos:end="97:66"><expr pos:start="97:58" pos:end="97:66"><literal type="string" pos:start="97:58" pos:end="97:66">"PNP0A08"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:70"><expr pos:start="99:9" pos:end="99:69"><call pos:start="99:9" pos:end="99:69"><name pos:start="99:9" pos:end="99:18">aml_append</name><argument_list pos:start="99:19" pos:end="99:69">(<argument pos:start="99:20" pos:end="99:22"><expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">dev</name></expr></argument>, <argument pos:start="99:25" pos:end="99:68"><expr pos:start="99:25" pos:end="99:68"><call pos:start="99:25" pos:end="99:68"><name pos:start="99:25" pos:end="99:37">aml_name_decl</name><argument_list pos:start="99:38" pos:end="99:68">(<argument pos:start="99:39" pos:end="99:44"><expr pos:start="99:39" pos:end="99:44"><literal type="string" pos:start="99:39" pos:end="99:44">"_CID"</literal></expr></argument>, <argument pos:start="99:47" pos:end="99:67"><expr pos:start="99:47" pos:end="99:67"><call pos:start="99:47" pos:end="99:67"><name pos:start="99:47" pos:end="99:56">aml_eisaid</name><argument_list pos:start="99:57" pos:end="99:67">(<argument pos:start="99:58" pos:end="99:66"><expr pos:start="99:58" pos:end="99:66"><literal type="string" pos:start="99:58" pos:end="99:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:59"><expr pos:start="101:9" pos:end="101:58"><call pos:start="101:9" pos:end="101:58"><name pos:start="101:9" pos:end="101:18">aml_append</name><argument_list pos:start="101:19" pos:end="101:58">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">dev</name></expr></argument>, <argument pos:start="101:25" pos:end="101:57"><expr pos:start="101:25" pos:end="101:57"><call pos:start="101:25" pos:end="101:57"><name pos:start="101:25" pos:end="101:37">aml_name_decl</name><argument_list pos:start="101:38" pos:end="101:57">(<argument pos:start="101:39" pos:end="101:44"><expr pos:start="101:39" pos:end="101:44"><literal type="string" pos:start="101:39" pos:end="101:44">"_ADR"</literal></expr></argument>, <argument pos:start="101:47" pos:end="101:56"><expr pos:start="101:47" pos:end="101:56"><call pos:start="101:47" pos:end="101:56"><name pos:start="101:47" pos:end="101:53">aml_int</name><argument_list pos:start="101:54" pos:end="101:56">(<argument pos:start="101:55" pos:end="101:55"><expr pos:start="101:55" pos:end="101:55"><literal type="number" pos:start="101:55" pos:end="101:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:59"><expr pos:start="103:9" pos:end="103:58"><call pos:start="103:9" pos:end="103:58"><name pos:start="103:9" pos:end="103:18">aml_append</name><argument_list pos:start="103:19" pos:end="103:58">(<argument pos:start="103:20" pos:end="103:22"><expr pos:start="103:20" pos:end="103:22"><name pos:start="103:20" pos:end="103:22">dev</name></expr></argument>, <argument pos:start="103:25" pos:end="103:57"><expr pos:start="103:25" pos:end="103:57"><call pos:start="103:25" pos:end="103:57"><name pos:start="103:25" pos:end="103:37">aml_name_decl</name><argument_list pos:start="103:38" pos:end="103:57">(<argument pos:start="103:39" pos:end="103:44"><expr pos:start="103:39" pos:end="103:44"><literal type="string" pos:start="103:39" pos:end="103:44">"_UID"</literal></expr></argument>, <argument pos:start="103:47" pos:end="103:56"><expr pos:start="103:47" pos:end="103:56"><call pos:start="103:47" pos:end="103:56"><name pos:start="103:47" pos:end="103:53">aml_int</name><argument_list pos:start="103:54" pos:end="103:56">(<argument pos:start="103:55" pos:end="103:55"><expr pos:start="103:55" pos:end="103:55"><literal type="number" pos:start="103:55" pos:end="103:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:59"><expr pos:start="105:9" pos:end="105:58"><call pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:18">aml_append</name><argument_list pos:start="105:19" pos:end="105:58">(<argument pos:start="105:20" pos:end="105:22"><expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">dev</name></expr></argument>, <argument pos:start="105:25" pos:end="105:57"><expr pos:start="105:25" pos:end="105:57"><call pos:start="105:25" pos:end="105:57"><name pos:start="105:25" pos:end="105:37">aml_name_decl</name><argument_list pos:start="105:38" pos:end="105:57">(<argument pos:start="105:39" pos:end="105:44"><expr pos:start="105:39" pos:end="105:44"><literal type="string" pos:start="105:39" pos:end="105:44">"SUPP"</literal></expr></argument>, <argument pos:start="105:47" pos:end="105:56"><expr pos:start="105:47" pos:end="105:56"><call pos:start="105:47" pos:end="105:56"><name pos:start="105:47" pos:end="105:53">aml_int</name><argument_list pos:start="105:54" pos:end="105:56">(<argument pos:start="105:55" pos:end="105:55"><expr pos:start="105:55" pos:end="105:55"><literal type="number" pos:start="105:55" pos:end="105:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:59"><expr pos:start="107:9" pos:end="107:58"><call pos:start="107:9" pos:end="107:58"><name pos:start="107:9" pos:end="107:18">aml_append</name><argument_list pos:start="107:19" pos:end="107:58">(<argument pos:start="107:20" pos:end="107:22"><expr pos:start="107:20" pos:end="107:22"><name pos:start="107:20" pos:end="107:22">dev</name></expr></argument>, <argument pos:start="107:25" pos:end="107:57"><expr pos:start="107:25" pos:end="107:57"><call pos:start="107:25" pos:end="107:57"><name pos:start="107:25" pos:end="107:37">aml_name_decl</name><argument_list pos:start="107:38" pos:end="107:57">(<argument pos:start="107:39" pos:end="107:44"><expr pos:start="107:39" pos:end="107:44"><literal type="string" pos:start="107:39" pos:end="107:44">"CTRL"</literal></expr></argument>, <argument pos:start="107:47" pos:end="107:56"><expr pos:start="107:47" pos:end="107:56"><call pos:start="107:47" pos:end="107:56"><name pos:start="107:47" pos:end="107:53">aml_int</name><argument_list pos:start="107:54" pos:end="107:56">(<argument pos:start="107:55" pos:end="107:55"><expr pos:start="107:55" pos:end="107:55"><literal type="number" pos:start="107:55" pos:end="107:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:48"><expr pos:start="109:9" pos:end="109:47"><call pos:start="109:9" pos:end="109:47"><name pos:start="109:9" pos:end="109:18">aml_append</name><argument_list pos:start="109:19" pos:end="109:47">(<argument pos:start="109:20" pos:end="109:22"><expr pos:start="109:20" pos:end="109:22"><name pos:start="109:20" pos:end="109:22">dev</name></expr></argument>, <argument pos:start="109:25" pos:end="109:46"><expr pos:start="109:25" pos:end="109:46"><call pos:start="109:25" pos:end="109:46"><name pos:start="109:25" pos:end="109:44">build_q35_osc_method</name><argument_list pos:start="109:45" pos:end="109:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:34"><expr pos:start="111:9" pos:end="111:33"><call pos:start="111:9" pos:end="111:33"><name pos:start="111:9" pos:end="111:18">aml_append</name><argument_list pos:start="111:19" pos:end="111:33">(<argument pos:start="111:20" pos:end="111:27"><expr pos:start="111:20" pos:end="111:27"><name pos:start="111:20" pos:end="111:27">sb_scope</name></expr></argument>, <argument pos:start="111:30" pos:end="111:32"><expr pos:start="111:30" pos:end="111:32"><name pos:start="111:30" pos:end="111:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:35"><expr pos:start="113:9" pos:end="113:34"><call pos:start="113:9" pos:end="113:34"><name pos:start="113:9" pos:end="113:18">aml_append</name><argument_list pos:start="113:19" pos:end="113:34">(<argument pos:start="113:20" pos:end="113:23"><expr pos:start="113:20" pos:end="113:23"><name pos:start="113:20" pos:end="113:23">dsdt</name></expr></argument>, <argument pos:start="113:26" pos:end="113:33"><expr pos:start="113:26" pos:end="113:33"><name pos:start="113:26" pos:end="113:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:29"><expr pos:start="117:9" pos:end="117:28"><call pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:22">build_hpet_aml</name><argument_list pos:start="117:23" pos:end="117:28">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:35"><expr pos:start="119:9" pos:end="119:34"><call pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:28">build_q35_isa_bridge</name><argument_list pos:start="119:29" pos:end="119:34">(<argument pos:start="119:30" pos:end="119:33"><expr pos:start="119:30" pos:end="119:33"><name pos:start="119:30" pos:end="119:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:36"><expr pos:start="121:9" pos:end="121:35"><call pos:start="121:9" pos:end="121:35"><name pos:start="121:9" pos:end="121:29">build_isa_devices_aml</name><argument_list pos:start="121:30" pos:end="121:35">(<argument pos:start="121:31" pos:end="121:34"><expr pos:start="121:31" pos:end="121:34"><name pos:start="121:31" pos:end="121:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:33"><expr pos:start="123:9" pos:end="123:32"><call pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:26">build_q35_pci0_int</name><argument_list pos:start="123:27" pos:end="123:32">(<argument pos:start="123:28" pos:end="123:31"><expr pos:start="123:28" pos:end="123:31"><name pos:start="123:28" pos:end="123:31">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:32"><expr pos:start="129:5" pos:end="129:31"><call pos:start="129:5" pos:end="129:31"><name pos:start="129:5" pos:end="129:25">build_cpu_hotplug_aml</name><argument_list pos:start="129:26" pos:end="129:31">(<argument pos:start="129:27" pos:end="129:30"><expr pos:start="129:27" pos:end="129:30"><name pos:start="129:27" pos:end="129:30">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="133:48"><expr pos:start="131:5" pos:end="133:47"><call pos:start="131:5" pos:end="133:47"><name pos:start="131:5" pos:end="131:28">build_memory_hotplug_aml</name><argument_list pos:start="131:29" pos:end="133:47">(<argument pos:start="131:30" pos:end="131:33"><expr pos:start="131:30" pos:end="131:33"><name pos:start="131:30" pos:end="131:33">dsdt</name></expr></argument>, <argument pos:start="131:36" pos:end="131:41"><expr pos:start="131:36" pos:end="131:41"><name pos:start="131:36" pos:end="131:41">nr_mem</name></expr></argument>, <argument pos:start="131:44" pos:end="131:61"><expr pos:start="131:44" pos:end="131:61"><name pos:start="131:44" pos:end="131:61"><name pos:start="131:44" pos:end="131:45">pm</name><operator pos:start="131:46" pos:end="131:47">-&gt;</operator><name pos:start="131:48" pos:end="131:61">mem_hp_io_base</name></name></expr></argument>,

                             <argument pos:start="133:30" pos:end="133:46"><expr pos:start="133:30" pos:end="133:46"><name pos:start="133:30" pos:end="133:46"><name pos:start="133:30" pos:end="133:31">pm</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:46">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:31"><expr pos:start="137:5" pos:end="137:30"><name pos:start="137:5" pos:end="137:9">scope</name> <operator pos:start="137:11" pos:end="137:11">=</operator>  <call pos:start="137:14" pos:end="137:30"><name pos:start="137:14" pos:end="137:22">aml_scope</name><argument_list pos:start="137:23" pos:end="137:30">(<argument pos:start="137:24" pos:end="137:29"><expr pos:start="137:24" pos:end="137:29"><literal type="string" pos:start="137:24" pos:end="137:29">"_GPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="139:5" pos:end="211:5">{<block_content pos:start="141:9" pos:end="209:68">

        <expr_stmt pos:start="141:9" pos:end="141:73"><expr pos:start="141:9" pos:end="141:72"><call pos:start="141:9" pos:end="141:72"><name pos:start="141:9" pos:end="141:18">aml_append</name><argument_list pos:start="141:19" pos:end="141:72">(<argument pos:start="141:20" pos:end="141:24"><expr pos:start="141:20" pos:end="141:24"><name pos:start="141:20" pos:end="141:24">scope</name></expr></argument>, <argument pos:start="141:27" pos:end="141:71"><expr pos:start="141:27" pos:end="141:71"><call pos:start="141:27" pos:end="141:71"><name pos:start="141:27" pos:end="141:39">aml_name_decl</name><argument_list pos:start="141:40" pos:end="141:71">(<argument pos:start="141:41" pos:end="141:46"><expr pos:start="141:41" pos:end="141:46"><literal type="string" pos:start="141:41" pos:end="141:46">"_HID"</literal></expr></argument>, <argument pos:start="141:49" pos:end="141:70"><expr pos:start="141:49" pos:end="141:70"><call pos:start="141:49" pos:end="141:70"><name pos:start="141:49" pos:end="141:58">aml_string</name><argument_list pos:start="141:59" pos:end="141:70">(<argument pos:start="141:60" pos:end="141:69"><expr pos:start="141:60" pos:end="141:69"><literal type="string" pos:start="141:60" pos:end="141:69">"ACPI0006"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:68"><expr pos:start="145:9" pos:end="145:67"><call pos:start="145:9" pos:end="145:67"><name pos:start="145:9" pos:end="145:18">aml_append</name><argument_list pos:start="145:19" pos:end="145:67">(<argument pos:start="145:20" pos:end="145:24"><expr pos:start="145:20" pos:end="145:24"><name pos:start="145:20" pos:end="145:24">scope</name></expr></argument>, <argument pos:start="145:27" pos:end="145:66"><expr pos:start="145:27" pos:end="145:66"><call pos:start="145:27" pos:end="145:66"><name pos:start="145:27" pos:end="145:36">aml_method</name><argument_list pos:start="145:37" pos:end="145:66">(<argument pos:start="145:38" pos:end="145:43"><expr pos:start="145:38" pos:end="145:43"><literal type="string" pos:start="145:38" pos:end="145:43">"_L00"</literal></expr></argument>, <argument pos:start="145:46" pos:end="145:46"><expr pos:start="145:46" pos:end="145:46"><literal type="number" pos:start="145:46" pos:end="145:46">0</literal></expr></argument>, <argument pos:start="145:49" pos:end="145:65"><expr pos:start="145:49" pos:end="145:65"><name pos:start="145:49" pos:end="145:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="149:9" pos:end="167:9"><if pos:start="149:9" pos:end="163:9">if <condition pos:start="149:12" pos:end="149:27">(<expr pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:16">misc</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:26">is_piix4</name></name></expr>)</condition> <block pos:start="149:29" pos:end="163:9">{<block_content pos:start="151:13" pos:end="161:38">

            <expr_stmt pos:start="151:13" pos:end="151:62"><expr pos:start="151:13" pos:end="151:61"><name pos:start="151:13" pos:end="151:18">method</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <call pos:start="151:22" pos:end="151:61"><name pos:start="151:22" pos:end="151:31">aml_method</name><argument_list pos:start="151:32" pos:end="151:61">(<argument pos:start="151:33" pos:end="151:38"><expr pos:start="151:33" pos:end="151:38"><literal type="string" pos:start="151:33" pos:end="151:38">"_E01"</literal></expr></argument>, <argument pos:start="151:41" pos:end="151:41"><expr pos:start="151:41" pos:end="151:41"><literal type="number" pos:start="151:41" pos:end="151:41">0</literal></expr></argument>, <argument pos:start="151:44" pos:end="151:60"><expr pos:start="151:44" pos:end="151:60"><name pos:start="151:44" pos:end="151:60">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="155:66"><expr pos:start="153:13" pos:end="155:65"><call pos:start="153:13" pos:end="155:65"><name pos:start="153:13" pos:end="153:22">aml_append</name><argument_list pos:start="153:23" pos:end="155:65">(<argument pos:start="153:24" pos:end="153:29"><expr pos:start="153:24" pos:end="153:29"><name pos:start="153:24" pos:end="153:29">method</name></expr></argument>,

                <argument pos:start="155:17" pos:end="155:64"><expr pos:start="155:17" pos:end="155:64"><call pos:start="155:17" pos:end="155:64"><name pos:start="155:17" pos:end="155:27">aml_acquire</name><argument_list pos:start="155:28" pos:end="155:64">(<argument pos:start="155:29" pos:end="155:55"><expr pos:start="155:29" pos:end="155:55"><call pos:start="155:29" pos:end="155:55"><name pos:start="155:29" pos:end="155:36">aml_name</name><argument_list pos:start="155:37" pos:end="155:55">(<argument pos:start="155:38" pos:end="155:54"><expr pos:start="155:38" pos:end="155:54"><literal type="string" pos:start="155:38" pos:end="155:54">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="155:58" pos:end="155:63"><expr pos:start="155:58" pos:end="155:63"><literal type="number" pos:start="155:58" pos:end="155:63">0xFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:61"><expr pos:start="157:13" pos:end="157:60"><call pos:start="157:13" pos:end="157:60"><name pos:start="157:13" pos:end="157:22">aml_append</name><argument_list pos:start="157:23" pos:end="157:60">(<argument pos:start="157:24" pos:end="157:29"><expr pos:start="157:24" pos:end="157:29"><name pos:start="157:24" pos:end="157:29">method</name></expr></argument>, <argument pos:start="157:32" pos:end="157:59"><expr pos:start="157:32" pos:end="157:59"><call pos:start="157:32" pos:end="157:59"><name pos:start="157:32" pos:end="157:40">aml_call0</name><argument_list pos:start="157:41" pos:end="157:59">(<argument pos:start="157:42" pos:end="157:58"><expr pos:start="157:42" pos:end="157:58"><literal type="string" pos:start="157:42" pos:end="157:58">"\\_SB.PCI0.PCNT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:73"><expr pos:start="159:13" pos:end="159:72"><call pos:start="159:13" pos:end="159:72"><name pos:start="159:13" pos:end="159:22">aml_append</name><argument_list pos:start="159:23" pos:end="159:72">(<argument pos:start="159:24" pos:end="159:29"><expr pos:start="159:24" pos:end="159:29"><name pos:start="159:24" pos:end="159:29">method</name></expr></argument>, <argument pos:start="159:32" pos:end="159:71"><expr pos:start="159:32" pos:end="159:71"><call pos:start="159:32" pos:end="159:71"><name pos:start="159:32" pos:end="159:42">aml_release</name><argument_list pos:start="159:43" pos:end="159:71">(<argument pos:start="159:44" pos:end="159:70"><expr pos:start="159:44" pos:end="159:70"><call pos:start="159:44" pos:end="159:70"><name pos:start="159:44" pos:end="159:51">aml_name</name><argument_list pos:start="159:52" pos:end="159:70">(<argument pos:start="159:53" pos:end="159:69"><expr pos:start="159:53" pos:end="159:69"><literal type="string" pos:start="159:53" pos:end="159:69">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:38"><expr pos:start="161:13" pos:end="161:37"><call pos:start="161:13" pos:end="161:37"><name pos:start="161:13" pos:end="161:22">aml_append</name><argument_list pos:start="161:23" pos:end="161:37">(<argument pos:start="161:24" pos:end="161:28"><expr pos:start="161:24" pos:end="161:28"><name pos:start="161:24" pos:end="161:28">scope</name></expr></argument>, <argument pos:start="161:31" pos:end="161:36"><expr pos:start="161:31" pos:end="161:36"><name pos:start="161:31" pos:end="161:36">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="163:11" pos:end="167:9">else <block pos:start="163:16" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:72">

            <expr_stmt pos:start="165:13" pos:end="165:72"><expr pos:start="165:13" pos:end="165:71"><call pos:start="165:13" pos:end="165:71"><name pos:start="165:13" pos:end="165:22">aml_append</name><argument_list pos:start="165:23" pos:end="165:71">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28">scope</name></expr></argument>, <argument pos:start="165:31" pos:end="165:70"><expr pos:start="165:31" pos:end="165:70"><call pos:start="165:31" pos:end="165:70"><name pos:start="165:31" pos:end="165:40">aml_method</name><argument_list pos:start="165:41" pos:end="165:70">(<argument pos:start="165:42" pos:end="165:47"><expr pos:start="165:42" pos:end="165:47"><literal type="string" pos:start="165:42" pos:end="165:47">"_L01"</literal></expr></argument>, <argument pos:start="165:50" pos:end="165:50"><expr pos:start="165:50" pos:end="165:50"><literal type="number" pos:start="165:50" pos:end="165:50">0</literal></expr></argument>, <argument pos:start="165:53" pos:end="165:69"><expr pos:start="165:53" pos:end="165:69"><name pos:start="165:53" pos:end="165:69">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:58"><expr pos:start="171:9" pos:end="171:57"><name pos:start="171:9" pos:end="171:14">method</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <call pos:start="171:18" pos:end="171:57"><name pos:start="171:18" pos:end="171:27">aml_method</name><argument_list pos:start="171:28" pos:end="171:57">(<argument pos:start="171:29" pos:end="171:34"><expr pos:start="171:29" pos:end="171:34"><literal type="string" pos:start="171:29" pos:end="171:34">"_E02"</literal></expr></argument>, <argument pos:start="171:37" pos:end="171:37"><expr pos:start="171:37" pos:end="171:37"><literal type="number" pos:start="171:37" pos:end="171:37">0</literal></expr></argument>, <argument pos:start="171:40" pos:end="171:56"><expr pos:start="171:40" pos:end="171:56"><name pos:start="171:40" pos:end="171:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:64"><expr pos:start="173:9" pos:end="173:63"><call pos:start="173:9" pos:end="173:63"><name pos:start="173:9" pos:end="173:18">aml_append</name><argument_list pos:start="173:19" pos:end="173:63">(<argument pos:start="173:20" pos:end="173:25"><expr pos:start="173:20" pos:end="173:25"><name pos:start="173:20" pos:end="173:25">method</name></expr></argument>, <argument pos:start="173:28" pos:end="173:62"><expr pos:start="173:28" pos:end="173:62"><call pos:start="173:28" pos:end="173:62"><name pos:start="173:28" pos:end="173:36">aml_call0</name><argument_list pos:start="173:37" pos:end="173:62">(<argument pos:start="173:38" pos:end="173:61"><expr pos:start="173:38" pos:end="173:61"><literal type="string" pos:start="173:38" pos:end="173:45">"\\_SB."</literal> <name pos:start="173:47" pos:end="173:61">CPU_SCAN_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:34"><expr pos:start="175:9" pos:end="175:33"><call pos:start="175:9" pos:end="175:33"><name pos:start="175:9" pos:end="175:18">aml_append</name><argument_list pos:start="175:19" pos:end="175:33">(<argument pos:start="175:20" pos:end="175:24"><expr pos:start="175:20" pos:end="175:24"><name pos:start="175:20" pos:end="175:24">scope</name></expr></argument>, <argument pos:start="175:27" pos:end="175:32"><expr pos:start="175:27" pos:end="175:32"><name pos:start="175:27" pos:end="175:32">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:58"><expr pos:start="179:9" pos:end="179:57"><name pos:start="179:9" pos:end="179:14">method</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <call pos:start="179:18" pos:end="179:57"><name pos:start="179:18" pos:end="179:27">aml_method</name><argument_list pos:start="179:28" pos:end="179:57">(<argument pos:start="179:29" pos:end="179:34"><expr pos:start="179:29" pos:end="179:34"><literal type="string" pos:start="179:29" pos:end="179:34">"_E03"</literal></expr></argument>, <argument pos:start="179:37" pos:end="179:37"><expr pos:start="179:37" pos:end="179:37"><literal type="number" pos:start="179:37" pos:end="179:37">0</literal></expr></argument>, <argument pos:start="179:40" pos:end="179:56"><expr pos:start="179:40" pos:end="179:56"><name pos:start="179:40" pos:end="179:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:67"><expr pos:start="181:9" pos:end="181:66"><call pos:start="181:9" pos:end="181:66"><name pos:start="181:9" pos:end="181:18">aml_append</name><argument_list pos:start="181:19" pos:end="181:66">(<argument pos:start="181:20" pos:end="181:25"><expr pos:start="181:20" pos:end="181:25"><name pos:start="181:20" pos:end="181:25">method</name></expr></argument>, <argument pos:start="181:28" pos:end="181:65"><expr pos:start="181:28" pos:end="181:65"><call pos:start="181:28" pos:end="181:65"><name pos:start="181:28" pos:end="181:36">aml_call0</name><argument_list pos:start="181:37" pos:end="181:65">(<argument pos:start="181:38" pos:end="181:64"><expr pos:start="181:38" pos:end="181:64"><name pos:start="181:38" pos:end="181:64">MEMORY_HOTPLUG_HANDLER_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:34"><expr pos:start="183:9" pos:end="183:33"><call pos:start="183:9" pos:end="183:33"><name pos:start="183:9" pos:end="183:18">aml_append</name><argument_list pos:start="183:19" pos:end="183:33">(<argument pos:start="183:20" pos:end="183:24"><expr pos:start="183:20" pos:end="183:24"><name pos:start="183:20" pos:end="183:24">scope</name></expr></argument>, <argument pos:start="183:27" pos:end="183:32"><expr pos:start="183:27" pos:end="183:32"><name pos:start="183:27" pos:end="183:32">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:68"><expr pos:start="187:9" pos:end="187:67"><call pos:start="187:9" pos:end="187:67"><name pos:start="187:9" pos:end="187:18">aml_append</name><argument_list pos:start="187:19" pos:end="187:67">(<argument pos:start="187:20" pos:end="187:24"><expr pos:start="187:20" pos:end="187:24"><name pos:start="187:20" pos:end="187:24">scope</name></expr></argument>, <argument pos:start="187:27" pos:end="187:66"><expr pos:start="187:27" pos:end="187:66"><call pos:start="187:27" pos:end="187:66"><name pos:start="187:27" pos:end="187:36">aml_method</name><argument_list pos:start="187:37" pos:end="187:66">(<argument pos:start="187:38" pos:end="187:43"><expr pos:start="187:38" pos:end="187:43"><literal type="string" pos:start="187:38" pos:end="187:43">"_L04"</literal></expr></argument>, <argument pos:start="187:46" pos:end="187:46"><expr pos:start="187:46" pos:end="187:46"><literal type="number" pos:start="187:46" pos:end="187:46">0</literal></expr></argument>, <argument pos:start="187:49" pos:end="187:65"><expr pos:start="187:49" pos:end="187:65"><name pos:start="187:49" pos:end="187:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:68"><expr pos:start="189:9" pos:end="189:67"><call pos:start="189:9" pos:end="189:67"><name pos:start="189:9" pos:end="189:18">aml_append</name><argument_list pos:start="189:19" pos:end="189:67">(<argument pos:start="189:20" pos:end="189:24"><expr pos:start="189:20" pos:end="189:24"><name pos:start="189:20" pos:end="189:24">scope</name></expr></argument>, <argument pos:start="189:27" pos:end="189:66"><expr pos:start="189:27" pos:end="189:66"><call pos:start="189:27" pos:end="189:66"><name pos:start="189:27" pos:end="189:36">aml_method</name><argument_list pos:start="189:37" pos:end="189:66">(<argument pos:start="189:38" pos:end="189:43"><expr pos:start="189:38" pos:end="189:43"><literal type="string" pos:start="189:38" pos:end="189:43">"_L05"</literal></expr></argument>, <argument pos:start="189:46" pos:end="189:46"><expr pos:start="189:46" pos:end="189:46"><literal type="number" pos:start="189:46" pos:end="189:46">0</literal></expr></argument>, <argument pos:start="189:49" pos:end="189:65"><expr pos:start="189:49" pos:end="189:65"><name pos:start="189:49" pos:end="189:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:68"><expr pos:start="191:9" pos:end="191:67"><call pos:start="191:9" pos:end="191:67"><name pos:start="191:9" pos:end="191:18">aml_append</name><argument_list pos:start="191:19" pos:end="191:67">(<argument pos:start="191:20" pos:end="191:24"><expr pos:start="191:20" pos:end="191:24"><name pos:start="191:20" pos:end="191:24">scope</name></expr></argument>, <argument pos:start="191:27" pos:end="191:66"><expr pos:start="191:27" pos:end="191:66"><call pos:start="191:27" pos:end="191:66"><name pos:start="191:27" pos:end="191:36">aml_method</name><argument_list pos:start="191:37" pos:end="191:66">(<argument pos:start="191:38" pos:end="191:43"><expr pos:start="191:38" pos:end="191:43"><literal type="string" pos:start="191:38" pos:end="191:43">"_L06"</literal></expr></argument>, <argument pos:start="191:46" pos:end="191:46"><expr pos:start="191:46" pos:end="191:46"><literal type="number" pos:start="191:46" pos:end="191:46">0</literal></expr></argument>, <argument pos:start="191:49" pos:end="191:65"><expr pos:start="191:49" pos:end="191:65"><name pos:start="191:49" pos:end="191:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:68"><expr pos:start="193:9" pos:end="193:67"><call pos:start="193:9" pos:end="193:67"><name pos:start="193:9" pos:end="193:18">aml_append</name><argument_list pos:start="193:19" pos:end="193:67">(<argument pos:start="193:20" pos:end="193:24"><expr pos:start="193:20" pos:end="193:24"><name pos:start="193:20" pos:end="193:24">scope</name></expr></argument>, <argument pos:start="193:27" pos:end="193:66"><expr pos:start="193:27" pos:end="193:66"><call pos:start="193:27" pos:end="193:66"><name pos:start="193:27" pos:end="193:36">aml_method</name><argument_list pos:start="193:37" pos:end="193:66">(<argument pos:start="193:38" pos:end="193:43"><expr pos:start="193:38" pos:end="193:43"><literal type="string" pos:start="193:38" pos:end="193:43">"_L07"</literal></expr></argument>, <argument pos:start="193:46" pos:end="193:46"><expr pos:start="193:46" pos:end="193:46"><literal type="number" pos:start="193:46" pos:end="193:46">0</literal></expr></argument>, <argument pos:start="193:49" pos:end="193:65"><expr pos:start="193:49" pos:end="193:65"><name pos:start="193:49" pos:end="193:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:68"><expr pos:start="195:9" pos:end="195:67"><call pos:start="195:9" pos:end="195:67"><name pos:start="195:9" pos:end="195:18">aml_append</name><argument_list pos:start="195:19" pos:end="195:67">(<argument pos:start="195:20" pos:end="195:24"><expr pos:start="195:20" pos:end="195:24"><name pos:start="195:20" pos:end="195:24">scope</name></expr></argument>, <argument pos:start="195:27" pos:end="195:66"><expr pos:start="195:27" pos:end="195:66"><call pos:start="195:27" pos:end="195:66"><name pos:start="195:27" pos:end="195:36">aml_method</name><argument_list pos:start="195:37" pos:end="195:66">(<argument pos:start="195:38" pos:end="195:43"><expr pos:start="195:38" pos:end="195:43"><literal type="string" pos:start="195:38" pos:end="195:43">"_L08"</literal></expr></argument>, <argument pos:start="195:46" pos:end="195:46"><expr pos:start="195:46" pos:end="195:46"><literal type="number" pos:start="195:46" pos:end="195:46">0</literal></expr></argument>, <argument pos:start="195:49" pos:end="195:65"><expr pos:start="195:49" pos:end="195:65"><name pos:start="195:49" pos:end="195:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:68"><expr pos:start="197:9" pos:end="197:67"><call pos:start="197:9" pos:end="197:67"><name pos:start="197:9" pos:end="197:18">aml_append</name><argument_list pos:start="197:19" pos:end="197:67">(<argument pos:start="197:20" pos:end="197:24"><expr pos:start="197:20" pos:end="197:24"><name pos:start="197:20" pos:end="197:24">scope</name></expr></argument>, <argument pos:start="197:27" pos:end="197:66"><expr pos:start="197:27" pos:end="197:66"><call pos:start="197:27" pos:end="197:66"><name pos:start="197:27" pos:end="197:36">aml_method</name><argument_list pos:start="197:37" pos:end="197:66">(<argument pos:start="197:38" pos:end="197:43"><expr pos:start="197:38" pos:end="197:43"><literal type="string" pos:start="197:38" pos:end="197:43">"_L09"</literal></expr></argument>, <argument pos:start="197:46" pos:end="197:46"><expr pos:start="197:46" pos:end="197:46"><literal type="number" pos:start="197:46" pos:end="197:46">0</literal></expr></argument>, <argument pos:start="197:49" pos:end="197:65"><expr pos:start="197:49" pos:end="197:65"><name pos:start="197:49" pos:end="197:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:68"><expr pos:start="199:9" pos:end="199:67"><call pos:start="199:9" pos:end="199:67"><name pos:start="199:9" pos:end="199:18">aml_append</name><argument_list pos:start="199:19" pos:end="199:67">(<argument pos:start="199:20" pos:end="199:24"><expr pos:start="199:20" pos:end="199:24"><name pos:start="199:20" pos:end="199:24">scope</name></expr></argument>, <argument pos:start="199:27" pos:end="199:66"><expr pos:start="199:27" pos:end="199:66"><call pos:start="199:27" pos:end="199:66"><name pos:start="199:27" pos:end="199:36">aml_method</name><argument_list pos:start="199:37" pos:end="199:66">(<argument pos:start="199:38" pos:end="199:43"><expr pos:start="199:38" pos:end="199:43"><literal type="string" pos:start="199:38" pos:end="199:43">"_L0A"</literal></expr></argument>, <argument pos:start="199:46" pos:end="199:46"><expr pos:start="199:46" pos:end="199:46"><literal type="number" pos:start="199:46" pos:end="199:46">0</literal></expr></argument>, <argument pos:start="199:49" pos:end="199:65"><expr pos:start="199:49" pos:end="199:65"><name pos:start="199:49" pos:end="199:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:68"><expr pos:start="201:9" pos:end="201:67"><call pos:start="201:9" pos:end="201:67"><name pos:start="201:9" pos:end="201:18">aml_append</name><argument_list pos:start="201:19" pos:end="201:67">(<argument pos:start="201:20" pos:end="201:24"><expr pos:start="201:20" pos:end="201:24"><name pos:start="201:20" pos:end="201:24">scope</name></expr></argument>, <argument pos:start="201:27" pos:end="201:66"><expr pos:start="201:27" pos:end="201:66"><call pos:start="201:27" pos:end="201:66"><name pos:start="201:27" pos:end="201:36">aml_method</name><argument_list pos:start="201:37" pos:end="201:66">(<argument pos:start="201:38" pos:end="201:43"><expr pos:start="201:38" pos:end="201:43"><literal type="string" pos:start="201:38" pos:end="201:43">"_L0B"</literal></expr></argument>, <argument pos:start="201:46" pos:end="201:46"><expr pos:start="201:46" pos:end="201:46"><literal type="number" pos:start="201:46" pos:end="201:46">0</literal></expr></argument>, <argument pos:start="201:49" pos:end="201:65"><expr pos:start="201:49" pos:end="201:65"><name pos:start="201:49" pos:end="201:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:68"><expr pos:start="203:9" pos:end="203:67"><call pos:start="203:9" pos:end="203:67"><name pos:start="203:9" pos:end="203:18">aml_append</name><argument_list pos:start="203:19" pos:end="203:67">(<argument pos:start="203:20" pos:end="203:24"><expr pos:start="203:20" pos:end="203:24"><name pos:start="203:20" pos:end="203:24">scope</name></expr></argument>, <argument pos:start="203:27" pos:end="203:66"><expr pos:start="203:27" pos:end="203:66"><call pos:start="203:27" pos:end="203:66"><name pos:start="203:27" pos:end="203:36">aml_method</name><argument_list pos:start="203:37" pos:end="203:66">(<argument pos:start="203:38" pos:end="203:43"><expr pos:start="203:38" pos:end="203:43"><literal type="string" pos:start="203:38" pos:end="203:43">"_L0C"</literal></expr></argument>, <argument pos:start="203:46" pos:end="203:46"><expr pos:start="203:46" pos:end="203:46"><literal type="number" pos:start="203:46" pos:end="203:46">0</literal></expr></argument>, <argument pos:start="203:49" pos:end="203:65"><expr pos:start="203:49" pos:end="203:65"><name pos:start="203:49" pos:end="203:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:68"><expr pos:start="205:9" pos:end="205:67"><call pos:start="205:9" pos:end="205:67"><name pos:start="205:9" pos:end="205:18">aml_append</name><argument_list pos:start="205:19" pos:end="205:67">(<argument pos:start="205:20" pos:end="205:24"><expr pos:start="205:20" pos:end="205:24"><name pos:start="205:20" pos:end="205:24">scope</name></expr></argument>, <argument pos:start="205:27" pos:end="205:66"><expr pos:start="205:27" pos:end="205:66"><call pos:start="205:27" pos:end="205:66"><name pos:start="205:27" pos:end="205:36">aml_method</name><argument_list pos:start="205:37" pos:end="205:66">(<argument pos:start="205:38" pos:end="205:43"><expr pos:start="205:38" pos:end="205:43"><literal type="string" pos:start="205:38" pos:end="205:43">"_L0D"</literal></expr></argument>, <argument pos:start="205:46" pos:end="205:46"><expr pos:start="205:46" pos:end="205:46"><literal type="number" pos:start="205:46" pos:end="205:46">0</literal></expr></argument>, <argument pos:start="205:49" pos:end="205:65"><expr pos:start="205:49" pos:end="205:65"><name pos:start="205:49" pos:end="205:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:68"><expr pos:start="207:9" pos:end="207:67"><call pos:start="207:9" pos:end="207:67"><name pos:start="207:9" pos:end="207:18">aml_append</name><argument_list pos:start="207:19" pos:end="207:67">(<argument pos:start="207:20" pos:end="207:24"><expr pos:start="207:20" pos:end="207:24"><name pos:start="207:20" pos:end="207:24">scope</name></expr></argument>, <argument pos:start="207:27" pos:end="207:66"><expr pos:start="207:27" pos:end="207:66"><call pos:start="207:27" pos:end="207:66"><name pos:start="207:27" pos:end="207:36">aml_method</name><argument_list pos:start="207:37" pos:end="207:66">(<argument pos:start="207:38" pos:end="207:43"><expr pos:start="207:38" pos:end="207:43"><literal type="string" pos:start="207:38" pos:end="207:43">"_L0E"</literal></expr></argument>, <argument pos:start="207:46" pos:end="207:46"><expr pos:start="207:46" pos:end="207:46"><literal type="number" pos:start="207:46" pos:end="207:46">0</literal></expr></argument>, <argument pos:start="207:49" pos:end="207:65"><expr pos:start="207:49" pos:end="207:65"><name pos:start="207:49" pos:end="207:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:68"><expr pos:start="209:9" pos:end="209:67"><call pos:start="209:9" pos:end="209:67"><name pos:start="209:9" pos:end="209:18">aml_append</name><argument_list pos:start="209:19" pos:end="209:67">(<argument pos:start="209:20" pos:end="209:24"><expr pos:start="209:20" pos:end="209:24"><name pos:start="209:20" pos:end="209:24">scope</name></expr></argument>, <argument pos:start="209:27" pos:end="209:66"><expr pos:start="209:27" pos:end="209:66"><call pos:start="209:27" pos:end="209:66"><name pos:start="209:27" pos:end="209:36">aml_method</name><argument_list pos:start="209:37" pos:end="209:66">(<argument pos:start="209:38" pos:end="209:43"><expr pos:start="209:38" pos:end="209:43"><literal type="string" pos:start="209:38" pos:end="209:43">"_L0F"</literal></expr></argument>, <argument pos:start="209:46" pos:end="209:46"><expr pos:start="209:46" pos:end="209:46"><literal type="number" pos:start="209:46" pos:end="209:46">0</literal></expr></argument>, <argument pos:start="209:49" pos:end="209:65"><expr pos:start="209:49" pos:end="209:65"><name pos:start="209:49" pos:end="209:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="213:5" pos:end="213:28"><expr pos:start="213:5" pos:end="213:27"><call pos:start="213:5" pos:end="213:27"><name pos:start="213:5" pos:end="213:14">aml_append</name><argument_list pos:start="213:15" pos:end="213:27">(<argument pos:start="213:16" pos:end="213:19"><expr pos:start="213:16" pos:end="213:19"><name pos:start="213:16" pos:end="213:19">dsdt</name></expr></argument>, <argument pos:start="213:22" pos:end="213:26"><expr pos:start="213:22" pos:end="213:26"><name pos:start="213:22" pos:end="213:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:35"><expr pos:start="217:5" pos:end="217:34"><name pos:start="217:5" pos:end="217:7">bus</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:29"><name pos:start="217:11" pos:end="217:20">PC_MACHINE</name><argument_list pos:start="217:21" pos:end="217:29">(<argument pos:start="217:22" pos:end="217:28"><expr pos:start="217:22" pos:end="217:28"><name pos:start="217:22" pos:end="217:28">machine</name></expr></argument>)</argument_list></call><operator pos:start="217:30" pos:end="217:31">-&gt;</operator><name pos:start="217:32" pos:end="217:34">bus</name></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="281:5"><if pos:start="219:5" pos:end="281:5">if <condition pos:start="219:8" pos:end="219:12">(<expr pos:start="219:9" pos:end="219:11"><name pos:start="219:9" pos:end="219:11">bus</name></expr>)</condition> <block pos:start="219:14" pos:end="281:5">{<block_content pos:start="221:9" pos:end="279:9">

        <macro pos:start="221:9" pos:end="221:48"><name pos:start="221:9" pos:end="221:21">QLIST_FOREACH</name><argument_list pos:start="221:22" pos:end="221:48">(<argument pos:start="221:23" pos:end="221:25">bus</argument>, <argument pos:start="221:28" pos:end="221:38">&amp;bus-&gt;child</argument>, <argument pos:start="221:41" pos:end="221:47">sibling</argument>)</argument_list></macro> <block pos:start="221:50" pos:end="279:9">{<block_content pos:start="223:13" pos:end="277:36">

            <decl_stmt pos:start="223:13" pos:end="223:47"><decl pos:start="223:13" pos:end="223:46"><type pos:start="223:13" pos:end="223:19"><name pos:start="223:13" pos:end="223:19">uint8_t</name></type> <name pos:start="223:21" pos:end="223:27">bus_num</name> <init pos:start="223:29" pos:end="223:46">= <expr pos:start="223:31" pos:end="223:46"><call pos:start="223:31" pos:end="223:46"><name pos:start="223:31" pos:end="223:41">pci_bus_num</name><argument_list pos:start="223:42" pos:end="223:46">(<argument pos:start="223:43" pos:end="223:45"><expr pos:start="223:43" pos:end="223:45"><name pos:start="223:43" pos:end="223:45">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="225:13" pos:end="225:55"><decl pos:start="225:13" pos:end="225:54"><type pos:start="225:13" pos:end="225:19"><name pos:start="225:13" pos:end="225:19">uint8_t</name></type> <name pos:start="225:21" pos:end="225:29">numa_node</name> <init pos:start="225:31" pos:end="225:54">= <expr pos:start="225:33" pos:end="225:54"><call pos:start="225:33" pos:end="225:54"><name pos:start="225:33" pos:end="225:49">pci_bus_numa_node</name><argument_list pos:start="225:50" pos:end="225:54">(<argument pos:start="225:51" pos:end="225:53"><expr pos:start="225:51" pos:end="225:53"><name pos:start="225:51" pos:end="225:53">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="229:13" pos:end="229:51">/* look only for expander root buses */</comment>

            <if_stmt pos:start="231:13" pos:end="235:13"><if pos:start="231:13" pos:end="235:13">if <condition pos:start="231:16" pos:end="231:38">(<expr pos:start="231:17" pos:end="231:37"><operator pos:start="231:17" pos:end="231:17">!</operator><call pos:start="231:18" pos:end="231:37"><name pos:start="231:18" pos:end="231:32">pci_bus_is_root</name><argument_list pos:start="231:33" pos:end="231:37">(<argument pos:start="231:34" pos:end="231:36"><expr pos:start="231:34" pos:end="231:36"><name pos:start="231:34" pos:end="231:36">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="231:40" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:25">

                <continue pos:start="233:17" pos:end="233:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="239:13" pos:end="243:13"><if pos:start="239:13" pos:end="243:13">if <condition pos:start="239:16" pos:end="239:41">(<expr pos:start="239:17" pos:end="239:40"><name pos:start="239:17" pos:end="239:23">bus_num</name> <operator pos:start="239:25" pos:end="239:25">&lt;</operator> <name pos:start="239:27" pos:end="239:40">root_bus_limit</name></expr>)</condition> <block pos:start="239:43" pos:end="243:13">{<block_content pos:start="241:17" pos:end="241:45">

                <expr_stmt pos:start="241:17" pos:end="241:45"><expr pos:start="241:17" pos:end="241:44"><name pos:start="241:17" pos:end="241:30">root_bus_limit</name> <operator pos:start="241:32" pos:end="241:32">=</operator> <name pos:start="241:34" pos:end="241:40">bus_num</name> <operator pos:start="241:42" pos:end="241:42">-</operator> <literal type="number" pos:start="241:44" pos:end="241:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="247:13" pos:end="247:39"><expr pos:start="247:13" pos:end="247:38"><name pos:start="247:13" pos:end="247:17">scope</name> <operator pos:start="247:19" pos:end="247:19">=</operator> <call pos:start="247:21" pos:end="247:38"><name pos:start="247:21" pos:end="247:29">aml_scope</name><argument_list pos:start="247:30" pos:end="247:38">(<argument pos:start="247:31" pos:end="247:37"><expr pos:start="247:31" pos:end="247:37"><literal type="string" pos:start="247:31" pos:end="247:37">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:49"><expr pos:start="249:13" pos:end="249:48"><name pos:start="249:13" pos:end="249:15">dev</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <call pos:start="249:19" pos:end="249:48"><name pos:start="249:19" pos:end="249:28">aml_device</name><argument_list pos:start="249:29" pos:end="249:48">(<argument pos:start="249:30" pos:end="249:38"><expr pos:start="249:30" pos:end="249:38"><literal type="string" pos:start="249:30" pos:end="249:38">"PC%.02X"</literal></expr></argument>, <argument pos:start="249:41" pos:end="249:47"><expr pos:start="249:41" pos:end="249:47"><name pos:start="249:41" pos:end="249:47">bus_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:69"><expr pos:start="251:13" pos:end="251:68"><call pos:start="251:13" pos:end="251:68"><name pos:start="251:13" pos:end="251:22">aml_append</name><argument_list pos:start="251:23" pos:end="251:68">(<argument pos:start="251:24" pos:end="251:26"><expr pos:start="251:24" pos:end="251:26"><name pos:start="251:24" pos:end="251:26">dev</name></expr></argument>, <argument pos:start="251:29" pos:end="251:67"><expr pos:start="251:29" pos:end="251:67"><call pos:start="251:29" pos:end="251:67"><name pos:start="251:29" pos:end="251:41">aml_name_decl</name><argument_list pos:start="251:42" pos:end="251:67">(<argument pos:start="251:43" pos:end="251:48"><expr pos:start="251:43" pos:end="251:48"><literal type="string" pos:start="251:43" pos:end="251:48">"_UID"</literal></expr></argument>, <argument pos:start="251:51" pos:end="251:66"><expr pos:start="251:51" pos:end="251:66"><call pos:start="251:51" pos:end="251:66"><name pos:start="251:51" pos:end="251:57">aml_int</name><argument_list pos:start="251:58" pos:end="251:66">(<argument pos:start="251:59" pos:end="251:65"><expr pos:start="251:59" pos:end="251:65"><name pos:start="251:59" pos:end="251:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:74"><expr pos:start="253:13" pos:end="253:73"><call pos:start="253:13" pos:end="253:73"><name pos:start="253:13" pos:end="253:22">aml_append</name><argument_list pos:start="253:23" pos:end="253:73">(<argument pos:start="253:24" pos:end="253:26"><expr pos:start="253:24" pos:end="253:26"><name pos:start="253:24" pos:end="253:26">dev</name></expr></argument>, <argument pos:start="253:29" pos:end="253:72"><expr pos:start="253:29" pos:end="253:72"><call pos:start="253:29" pos:end="253:72"><name pos:start="253:29" pos:end="253:41">aml_name_decl</name><argument_list pos:start="253:42" pos:end="253:72">(<argument pos:start="253:43" pos:end="253:48"><expr pos:start="253:43" pos:end="253:48"><literal type="string" pos:start="253:43" pos:end="253:48">"_HID"</literal></expr></argument>, <argument pos:start="253:51" pos:end="253:71"><expr pos:start="253:51" pos:end="253:71"><call pos:start="253:51" pos:end="253:71"><name pos:start="253:51" pos:end="253:60">aml_eisaid</name><argument_list pos:start="253:61" pos:end="253:71">(<argument pos:start="253:62" pos:end="253:70"><expr pos:start="253:62" pos:end="253:70"><literal type="string" pos:start="253:62" pos:end="253:70">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:69"><expr pos:start="255:13" pos:end="255:68"><call pos:start="255:13" pos:end="255:68"><name pos:start="255:13" pos:end="255:22">aml_append</name><argument_list pos:start="255:23" pos:end="255:68">(<argument pos:start="255:24" pos:end="255:26"><expr pos:start="255:24" pos:end="255:26"><name pos:start="255:24" pos:end="255:26">dev</name></expr></argument>, <argument pos:start="255:29" pos:end="255:67"><expr pos:start="255:29" pos:end="255:67"><call pos:start="255:29" pos:end="255:67"><name pos:start="255:29" pos:end="255:41">aml_name_decl</name><argument_list pos:start="255:42" pos:end="255:67">(<argument pos:start="255:43" pos:end="255:48"><expr pos:start="255:43" pos:end="255:48"><literal type="string" pos:start="255:43" pos:end="255:48">"_BBN"</literal></expr></argument>, <argument pos:start="255:51" pos:end="255:66"><expr pos:start="255:51" pos:end="255:66"><call pos:start="255:51" pos:end="255:66"><name pos:start="255:51" pos:end="255:57">aml_int</name><argument_list pos:start="255:58" pos:end="255:66">(<argument pos:start="255:59" pos:end="255:65"><expr pos:start="255:59" pos:end="255:65"><name pos:start="255:59" pos:end="255:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="259:13" pos:end="263:13"><if pos:start="259:13" pos:end="263:13">if <condition pos:start="259:16" pos:end="259:50">(<expr pos:start="259:17" pos:end="259:49"><name pos:start="259:17" pos:end="259:25">numa_node</name> <operator pos:start="259:27" pos:end="259:28">!=</operator> <name pos:start="259:30" pos:end="259:49">NUMA_NODE_UNASSIGNED</name></expr>)</condition> <block pos:start="259:52" pos:end="263:13">{<block_content pos:start="261:17" pos:end="261:75">

                <expr_stmt pos:start="261:17" pos:end="261:75"><expr pos:start="261:17" pos:end="261:74"><call pos:start="261:17" pos:end="261:74"><name pos:start="261:17" pos:end="261:26">aml_append</name><argument_list pos:start="261:27" pos:end="261:74">(<argument pos:start="261:28" pos:end="261:30"><expr pos:start="261:28" pos:end="261:30"><name pos:start="261:28" pos:end="261:30">dev</name></expr></argument>, <argument pos:start="261:33" pos:end="261:73"><expr pos:start="261:33" pos:end="261:73"><call pos:start="261:33" pos:end="261:73"><name pos:start="261:33" pos:end="261:45">aml_name_decl</name><argument_list pos:start="261:46" pos:end="261:73">(<argument pos:start="261:47" pos:end="261:52"><expr pos:start="261:47" pos:end="261:52"><literal type="string" pos:start="261:47" pos:end="261:52">"_PXM"</literal></expr></argument>, <argument pos:start="261:55" pos:end="261:72"><expr pos:start="261:55" pos:end="261:72"><call pos:start="261:55" pos:end="261:72"><name pos:start="261:55" pos:end="261:61">aml_int</name><argument_list pos:start="261:62" pos:end="261:72">(<argument pos:start="261:63" pos:end="261:71"><expr pos:start="261:63" pos:end="261:71"><name pos:start="261:63" pos:end="261:71">numa_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="267:13" pos:end="267:46"><expr pos:start="267:13" pos:end="267:45"><call pos:start="267:13" pos:end="267:45"><name pos:start="267:13" pos:end="267:22">aml_append</name><argument_list pos:start="267:23" pos:end="267:45">(<argument pos:start="267:24" pos:end="267:26"><expr pos:start="267:24" pos:end="267:26"><name pos:start="267:24" pos:end="267:26">dev</name></expr></argument>, <argument pos:start="267:29" pos:end="267:44"><expr pos:start="267:29" pos:end="267:44"><call pos:start="267:29" pos:end="267:44"><name pos:start="267:29" pos:end="267:37">build_prt</name><argument_list pos:start="267:38" pos:end="267:44">(<argument pos:start="267:39" pos:end="267:43"><expr pos:start="267:39" pos:end="267:43"><name pos:start="267:39" pos:end="267:43">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="271:51"><expr pos:start="269:13" pos:end="271:50"><name pos:start="269:13" pos:end="269:15">crs</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <call pos:start="269:19" pos:end="271:50"><name pos:start="269:19" pos:end="269:27">build_crs</name><argument_list pos:start="269:28" pos:end="271:50">(<argument pos:start="269:29" pos:end="269:61"><expr pos:start="269:29" pos:end="269:61"><call pos:start="269:29" pos:end="269:61"><name pos:start="269:29" pos:end="269:43">PCI_HOST_BRIDGE</name><argument_list pos:start="269:44" pos:end="269:61">(<argument pos:start="269:45" pos:end="269:60"><expr pos:start="269:45" pos:end="269:60"><call pos:start="269:45" pos:end="269:52"><name pos:start="269:45" pos:end="269:47">BUS</name><argument_list pos:start="269:48" pos:end="269:52">(<argument pos:start="269:49" pos:end="269:51"><expr pos:start="269:49" pos:end="269:51"><name pos:start="269:49" pos:end="269:51">bus</name></expr></argument>)</argument_list></call><operator pos:start="269:53" pos:end="269:54">-&gt;</operator><name pos:start="269:55" pos:end="269:60">parent</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="271:29" pos:end="271:37"><expr pos:start="271:29" pos:end="271:37"><name pos:start="271:29" pos:end="271:37">io_ranges</name></expr></argument>, <argument pos:start="271:40" pos:end="271:49"><expr pos:start="271:40" pos:end="271:49"><name pos:start="271:40" pos:end="271:49">mem_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:56"><expr pos:start="273:13" pos:end="273:55"><call pos:start="273:13" pos:end="273:55"><name pos:start="273:13" pos:end="273:22">aml_append</name><argument_list pos:start="273:23" pos:end="273:55">(<argument pos:start="273:24" pos:end="273:26"><expr pos:start="273:24" pos:end="273:26"><name pos:start="273:24" pos:end="273:26">dev</name></expr></argument>, <argument pos:start="273:29" pos:end="273:54"><expr pos:start="273:29" pos:end="273:54"><call pos:start="273:29" pos:end="273:54"><name pos:start="273:29" pos:end="273:41">aml_name_decl</name><argument_list pos:start="273:42" pos:end="273:54">(<argument pos:start="273:43" pos:end="273:48"><expr pos:start="273:43" pos:end="273:48"><literal type="string" pos:start="273:43" pos:end="273:48">"_CRS"</literal></expr></argument>, <argument pos:start="273:51" pos:end="273:53"><expr pos:start="273:51" pos:end="273:53"><name pos:start="273:51" pos:end="273:53">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:35"><expr pos:start="275:13" pos:end="275:34"><call pos:start="275:13" pos:end="275:34"><name pos:start="275:13" pos:end="275:22">aml_append</name><argument_list pos:start="275:23" pos:end="275:34">(<argument pos:start="275:24" pos:end="275:28"><expr pos:start="275:24" pos:end="275:28"><name pos:start="275:24" pos:end="275:28">scope</name></expr></argument>, <argument pos:start="275:31" pos:end="275:33"><expr pos:start="275:31" pos:end="275:33"><name pos:start="275:31" pos:end="275:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:36"><expr pos:start="277:13" pos:end="277:35"><call pos:start="277:13" pos:end="277:35"><name pos:start="277:13" pos:end="277:22">aml_append</name><argument_list pos:start="277:23" pos:end="277:35">(<argument pos:start="277:24" pos:end="277:27"><expr pos:start="277:24" pos:end="277:27"><name pos:start="277:24" pos:end="277:27">dsdt</name></expr></argument>, <argument pos:start="277:30" pos:end="277:34"><expr pos:start="277:30" pos:end="277:34"><name pos:start="277:30" pos:end="277:34">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="285:5" pos:end="285:36"><expr pos:start="285:5" pos:end="285:35"><name pos:start="285:5" pos:end="285:9">scope</name> <operator pos:start="285:11" pos:end="285:11">=</operator> <call pos:start="285:13" pos:end="285:35"><name pos:start="285:13" pos:end="285:21">aml_scope</name><argument_list pos:start="285:22" pos:end="285:35">(<argument pos:start="285:23" pos:end="285:34"><expr pos:start="285:23" pos:end="285:34"><literal type="string" pos:start="285:23" pos:end="285:34">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="287:5" pos:end="287:25">/* build PCI0._CRS */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:34"><expr pos:start="289:5" pos:end="289:33"><name pos:start="289:5" pos:end="289:7">crs</name> <operator pos:start="289:9" pos:end="289:9">=</operator> <call pos:start="289:11" pos:end="289:33"><name pos:start="289:11" pos:end="289:31">aml_resource_template</name><argument_list pos:start="289:32" pos:end="289:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="297:57"><expr pos:start="291:5" pos:end="297:56"><call pos:start="291:5" pos:end="297:56"><name pos:start="291:5" pos:end="291:14">aml_append</name><argument_list pos:start="291:15" pos:end="297:56">(<argument pos:start="291:16" pos:end="291:18"><expr pos:start="291:16" pos:end="291:18"><name pos:start="291:16" pos:end="291:18">crs</name></expr></argument>,

        <argument pos:start="293:9" pos:end="297:55"><expr pos:start="293:9" pos:end="297:55"><call pos:start="293:9" pos:end="297:55"><name pos:start="293:9" pos:end="293:27">aml_word_bus_number</name><argument_list pos:start="293:28" pos:end="297:55">(<argument pos:start="293:29" pos:end="293:41"><expr pos:start="293:29" pos:end="293:41"><name pos:start="293:29" pos:end="293:41">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="293:44" pos:end="293:56"><expr pos:start="293:44" pos:end="293:56"><name pos:start="293:44" pos:end="293:56">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="293:59" pos:end="293:72"><expr pos:start="293:59" pos:end="293:72"><name pos:start="293:59" pos:end="293:72">AML_POS_DECODE</name></expr></argument>,

                            <argument pos:start="295:29" pos:end="295:34"><expr pos:start="295:29" pos:end="295:34"><literal type="number" pos:start="295:29" pos:end="295:34">0x0000</literal></expr></argument>, <argument pos:start="295:37" pos:end="295:39"><expr pos:start="295:37" pos:end="295:39"><literal type="number" pos:start="295:37" pos:end="295:39">0x0</literal></expr></argument>, <argument pos:start="295:42" pos:end="295:55"><expr pos:start="295:42" pos:end="295:55"><name pos:start="295:42" pos:end="295:55">root_bus_limit</name></expr></argument>,

                            <argument pos:start="297:29" pos:end="297:34"><expr pos:start="297:29" pos:end="297:34"><literal type="number" pos:start="297:29" pos:end="297:34">0x0000</literal></expr></argument>, <argument pos:start="297:37" pos:end="297:54"><expr pos:start="297:37" pos:end="297:54"><name pos:start="297:37" pos:end="297:50">root_bus_limit</name> <operator pos:start="297:52" pos:end="297:52">+</operator> <literal type="number" pos:start="297:54" pos:end="297:54">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:70"><expr pos:start="299:5" pos:end="299:69"><call pos:start="299:5" pos:end="299:69"><name pos:start="299:5" pos:end="299:14">aml_append</name><argument_list pos:start="299:15" pos:end="299:69">(<argument pos:start="299:16" pos:end="299:18"><expr pos:start="299:16" pos:end="299:18"><name pos:start="299:16" pos:end="299:18">crs</name></expr></argument>, <argument pos:start="299:21" pos:end="299:68"><expr pos:start="299:21" pos:end="299:68"><call pos:start="299:21" pos:end="299:68"><name pos:start="299:21" pos:end="299:26">aml_io</name><argument_list pos:start="299:27" pos:end="299:68">(<argument pos:start="299:28" pos:end="299:39"><expr pos:start="299:28" pos:end="299:39"><name pos:start="299:28" pos:end="299:39">AML_DECODE16</name></expr></argument>, <argument pos:start="299:42" pos:end="299:47"><expr pos:start="299:42" pos:end="299:47"><literal type="number" pos:start="299:42" pos:end="299:47">0x0CF8</literal></expr></argument>, <argument pos:start="299:50" pos:end="299:55"><expr pos:start="299:50" pos:end="299:55"><literal type="number" pos:start="299:50" pos:end="299:55">0x0CF8</literal></expr></argument>, <argument pos:start="299:58" pos:end="299:61"><expr pos:start="299:58" pos:end="299:61"><literal type="number" pos:start="299:58" pos:end="299:61">0x01</literal></expr></argument>, <argument pos:start="299:64" pos:end="299:67"><expr pos:start="299:64" pos:end="299:67"><literal type="number" pos:start="299:64" pos:end="299:67">0x08</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="303:5" pos:end="309:61"><expr pos:start="303:5" pos:end="309:60"><call pos:start="303:5" pos:end="309:60"><name pos:start="303:5" pos:end="303:14">aml_append</name><argument_list pos:start="303:15" pos:end="309:60">(<argument pos:start="303:16" pos:end="303:18"><expr pos:start="303:16" pos:end="303:18"><name pos:start="303:16" pos:end="303:18">crs</name></expr></argument>,

        <argument pos:start="305:9" pos:end="309:59"><expr pos:start="305:9" pos:end="309:59"><call pos:start="305:9" pos:end="309:59"><name pos:start="305:9" pos:end="305:19">aml_word_io</name><argument_list pos:start="305:20" pos:end="309:59">(<argument pos:start="305:21" pos:end="305:33"><expr pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:33">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="305:36" pos:end="305:48"><expr pos:start="305:36" pos:end="305:48"><name pos:start="305:36" pos:end="305:48">AML_MAX_FIXED</name></expr></argument>,

                    <argument pos:start="307:21" pos:end="307:34"><expr pos:start="307:21" pos:end="307:34"><name pos:start="307:21" pos:end="307:34">AML_POS_DECODE</name></expr></argument>, <argument pos:start="307:37" pos:end="307:52"><expr pos:start="307:37" pos:end="307:52"><name pos:start="307:37" pos:end="307:52">AML_ENTIRE_RANGE</name></expr></argument>,

                    <argument pos:start="309:21" pos:end="309:26"><expr pos:start="309:21" pos:end="309:26"><literal type="number" pos:start="309:21" pos:end="309:26">0x0000</literal></expr></argument>, <argument pos:start="309:29" pos:end="309:34"><expr pos:start="309:29" pos:end="309:34"><literal type="number" pos:start="309:29" pos:end="309:34">0x0000</literal></expr></argument>, <argument pos:start="309:37" pos:end="309:42"><expr pos:start="309:37" pos:end="309:42"><literal type="number" pos:start="309:37" pos:end="309:42">0x0CF7</literal></expr></argument>, <argument pos:start="309:45" pos:end="309:50"><expr pos:start="309:45" pos:end="309:50"><literal type="number" pos:start="309:45" pos:end="309:50">0x0000</literal></expr></argument>, <argument pos:start="309:53" pos:end="309:58"><expr pos:start="309:53" pos:end="309:58"><literal type="number" pos:start="309:53" pos:end="309:58">0x0CF8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="313:5" pos:end="313:60"><expr pos:start="313:5" pos:end="313:59"><call pos:start="313:5" pos:end="313:59"><name pos:start="313:5" pos:end="313:32">crs_replace_with_free_ranges</name><argument_list pos:start="313:33" pos:end="313:59">(<argument pos:start="313:34" pos:end="313:42"><expr pos:start="313:34" pos:end="313:42"><name pos:start="313:34" pos:end="313:42">io_ranges</name></expr></argument>, <argument pos:start="313:45" pos:end="313:50"><expr pos:start="313:45" pos:end="313:50"><literal type="number" pos:start="313:45" pos:end="313:50">0x0D00</literal></expr></argument>, <argument pos:start="313:53" pos:end="313:58"><expr pos:start="313:53" pos:end="313:58"><literal type="number" pos:start="313:53" pos:end="313:58">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="315:5" pos:end="329:5">for <control pos:start="315:9" pos:end="315:40">(<init pos:start="315:10" pos:end="315:15"><expr pos:start="315:10" pos:end="315:14"><name pos:start="315:10" pos:end="315:10">i</name> <operator pos:start="315:12" pos:end="315:12">=</operator> <literal type="number" pos:start="315:14" pos:end="315:14">0</literal></expr>;</init> <condition pos:start="315:17" pos:end="315:35"><expr pos:start="315:17" pos:end="315:34"><name pos:start="315:17" pos:end="315:17">i</name> <operator pos:start="315:19" pos:end="315:19">&lt;</operator> <name pos:start="315:21" pos:end="315:34"><name pos:start="315:21" pos:end="315:29">io_ranges</name><operator pos:start="315:30" pos:end="315:31">-&gt;</operator><name pos:start="315:32" pos:end="315:34">len</name></name></expr>;</condition> <incr pos:start="315:37" pos:end="315:39"><expr pos:start="315:37" pos:end="315:39"><name pos:start="315:37" pos:end="315:37">i</name><operator pos:start="315:38" pos:end="315:39">++</operator></expr></incr>)</control> <block pos:start="315:42" pos:end="329:5">{<block_content pos:start="317:9" pos:end="327:65">

        <expr_stmt pos:start="317:9" pos:end="317:48"><expr pos:start="317:9" pos:end="317:47"><name pos:start="317:9" pos:end="317:13">entry</name> <operator pos:start="317:15" pos:end="317:15">=</operator> <call pos:start="317:17" pos:end="317:47"><name pos:start="317:17" pos:end="317:33">g_ptr_array_index</name><argument_list pos:start="317:34" pos:end="317:47">(<argument pos:start="317:35" pos:end="317:43"><expr pos:start="317:35" pos:end="317:43"><name pos:start="317:35" pos:end="317:43">io_ranges</name></expr></argument>, <argument pos:start="317:46" pos:end="317:46"><expr pos:start="317:46" pos:end="317:46"><name pos:start="317:46" pos:end="317:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="327:65"><expr pos:start="319:9" pos:end="327:64"><call pos:start="319:9" pos:end="327:64"><name pos:start="319:9" pos:end="319:18">aml_append</name><argument_list pos:start="319:19" pos:end="327:64">(<argument pos:start="319:20" pos:end="319:22"><expr pos:start="319:20" pos:end="319:22"><name pos:start="319:20" pos:end="319:22">crs</name></expr></argument>,

            <argument pos:start="321:13" pos:end="327:63"><expr pos:start="321:13" pos:end="327:63"><call pos:start="321:13" pos:end="327:63"><name pos:start="321:13" pos:end="321:23">aml_word_io</name><argument_list pos:start="321:24" pos:end="327:63">(<argument pos:start="321:25" pos:end="321:37"><expr pos:start="321:25" pos:end="321:37"><name pos:start="321:25" pos:end="321:37">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="321:40" pos:end="321:52"><expr pos:start="321:40" pos:end="321:52"><name pos:start="321:40" pos:end="321:52">AML_MAX_FIXED</name></expr></argument>,

                        <argument pos:start="323:25" pos:end="323:38"><expr pos:start="323:25" pos:end="323:38"><name pos:start="323:25" pos:end="323:38">AML_POS_DECODE</name></expr></argument>, <argument pos:start="323:41" pos:end="323:56"><expr pos:start="323:41" pos:end="323:56"><name pos:start="323:41" pos:end="323:56">AML_ENTIRE_RANGE</name></expr></argument>,

                        <argument pos:start="325:25" pos:end="325:30"><expr pos:start="325:25" pos:end="325:30"><literal type="number" pos:start="325:25" pos:end="325:30">0x0000</literal></expr></argument>, <argument pos:start="325:33" pos:end="325:43"><expr pos:start="325:33" pos:end="325:43"><name pos:start="325:33" pos:end="325:43"><name pos:start="325:33" pos:end="325:37">entry</name><operator pos:start="325:38" pos:end="325:39">-&gt;</operator><name pos:start="325:40" pos:end="325:43">base</name></name></expr></argument>, <argument pos:start="325:46" pos:end="325:57"><expr pos:start="325:46" pos:end="325:57"><name pos:start="325:46" pos:end="325:57"><name pos:start="325:46" pos:end="325:50">entry</name><operator pos:start="325:51" pos:end="325:52">-&gt;</operator><name pos:start="325:53" pos:end="325:57">limit</name></name></expr></argument>,

                        <argument pos:start="327:25" pos:end="327:30"><expr pos:start="327:25" pos:end="327:30"><literal type="number" pos:start="327:25" pos:end="327:30">0x0000</literal></expr></argument>, <argument pos:start="327:33" pos:end="327:62"><expr pos:start="327:33" pos:end="327:62"><name pos:start="327:33" pos:end="327:44"><name pos:start="327:33" pos:end="327:37">entry</name><operator pos:start="327:38" pos:end="327:39">-&gt;</operator><name pos:start="327:40" pos:end="327:44">limit</name></name> <operator pos:start="327:46" pos:end="327:46">-</operator> <name pos:start="327:48" pos:end="327:58"><name pos:start="327:48" pos:end="327:52">entry</name><operator pos:start="327:53" pos:end="327:54">-&gt;</operator><name pos:start="327:55" pos:end="327:58">base</name></name> <operator pos:start="327:60" pos:end="327:60">+</operator> <literal type="number" pos:start="327:62" pos:end="327:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="333:5" pos:end="339:68"><expr pos:start="333:5" pos:end="339:67"><call pos:start="333:5" pos:end="339:67"><name pos:start="333:5" pos:end="333:14">aml_append</name><argument_list pos:start="333:15" pos:end="339:67">(<argument pos:start="333:16" pos:end="333:18"><expr pos:start="333:16" pos:end="333:18"><name pos:start="333:16" pos:end="333:18">crs</name></expr></argument>,

        <argument pos:start="335:9" pos:end="339:66"><expr pos:start="335:9" pos:end="339:66"><call pos:start="335:9" pos:end="339:66"><name pos:start="335:9" pos:end="335:24">aml_dword_memory</name><argument_list pos:start="335:25" pos:end="339:66">(<argument pos:start="335:26" pos:end="335:39"><expr pos:start="335:26" pos:end="335:39"><name pos:start="335:26" pos:end="335:39">AML_POS_DECODE</name></expr></argument>, <argument pos:start="335:42" pos:end="335:54"><expr pos:start="335:42" pos:end="335:54"><name pos:start="335:42" pos:end="335:54">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="335:57" pos:end="335:69"><expr pos:start="335:57" pos:end="335:69"><name pos:start="335:57" pos:end="335:69">AML_MAX_FIXED</name></expr></argument>,

                         <argument pos:start="337:26" pos:end="337:38"><expr pos:start="337:26" pos:end="337:38"><name pos:start="337:26" pos:end="337:38">AML_CACHEABLE</name></expr></argument>, <argument pos:start="337:41" pos:end="337:54"><expr pos:start="337:41" pos:end="337:54"><name pos:start="337:41" pos:end="337:54">AML_READ_WRITE</name></expr></argument>,

                         <argument pos:start="339:26" pos:end="339:26"><expr pos:start="339:26" pos:end="339:26"><literal type="number" pos:start="339:26" pos:end="339:26">0</literal></expr></argument>, <argument pos:start="339:29" pos:end="339:38"><expr pos:start="339:29" pos:end="339:38"><literal type="number" pos:start="339:29" pos:end="339:38">0x000A0000</literal></expr></argument>, <argument pos:start="339:41" pos:end="339:50"><expr pos:start="339:41" pos:end="339:50"><literal type="number" pos:start="339:41" pos:end="339:50">0x000BFFFF</literal></expr></argument>, <argument pos:start="339:53" pos:end="339:53"><expr pos:start="339:53" pos:end="339:53"><literal type="number" pos:start="339:53" pos:end="339:53">0</literal></expr></argument>, <argument pos:start="339:56" pos:end="339:65"><expr pos:start="339:56" pos:end="339:65"><literal type="number" pos:start="339:56" pos:end="339:65">0x00020000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:79"><expr pos:start="343:5" pos:end="343:78"><call pos:start="343:5" pos:end="343:78"><name pos:start="343:5" pos:end="343:32">crs_replace_with_free_ranges</name><argument_list pos:start="343:33" pos:end="343:78">(<argument pos:start="343:34" pos:end="343:43"><expr pos:start="343:34" pos:end="343:43"><name pos:start="343:34" pos:end="343:43">mem_ranges</name></expr></argument>, <argument pos:start="343:46" pos:end="343:59"><expr pos:start="343:46" pos:end="343:59"><name pos:start="343:46" pos:end="343:59"><name pos:start="343:46" pos:end="343:48">pci</name><operator pos:start="343:49" pos:end="343:50">-&gt;</operator><name pos:start="343:51" pos:end="343:53">w32</name><operator pos:start="343:54" pos:end="343:54">.</operator><name pos:start="343:55" pos:end="343:59">begin</name></name></expr></argument>, <argument pos:start="343:62" pos:end="343:77"><expr pos:start="343:62" pos:end="343:77"><name pos:start="343:62" pos:end="343:73"><name pos:start="343:62" pos:end="343:64">pci</name><operator pos:start="343:65" pos:end="343:66">-&gt;</operator><name pos:start="343:67" pos:end="343:69">w32</name><operator pos:start="343:70" pos:end="343:70">.</operator><name pos:start="343:71" pos:end="343:73">end</name></name> <operator pos:start="343:75" pos:end="343:75">-</operator> <literal type="number" pos:start="343:77" pos:end="343:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="345:5" pos:end="359:5">for <control pos:start="345:9" pos:end="345:41">(<init pos:start="345:10" pos:end="345:15"><expr pos:start="345:10" pos:end="345:14"><name pos:start="345:10" pos:end="345:10">i</name> <operator pos:start="345:12" pos:end="345:12">=</operator> <literal type="number" pos:start="345:14" pos:end="345:14">0</literal></expr>;</init> <condition pos:start="345:17" pos:end="345:36"><expr pos:start="345:17" pos:end="345:35"><name pos:start="345:17" pos:end="345:17">i</name> <operator pos:start="345:19" pos:end="345:19">&lt;</operator> <name pos:start="345:21" pos:end="345:35"><name pos:start="345:21" pos:end="345:30">mem_ranges</name><operator pos:start="345:31" pos:end="345:32">-&gt;</operator><name pos:start="345:33" pos:end="345:35">len</name></name></expr>;</condition> <incr pos:start="345:38" pos:end="345:40"><expr pos:start="345:38" pos:end="345:40"><name pos:start="345:38" pos:end="345:38">i</name><operator pos:start="345:39" pos:end="345:40">++</operator></expr></incr>)</control> <block pos:start="345:43" pos:end="359:5">{<block_content pos:start="347:9" pos:end="357:65">

        <expr_stmt pos:start="347:9" pos:end="347:49"><expr pos:start="347:9" pos:end="347:48"><name pos:start="347:9" pos:end="347:13">entry</name> <operator pos:start="347:15" pos:end="347:15">=</operator> <call pos:start="347:17" pos:end="347:48"><name pos:start="347:17" pos:end="347:33">g_ptr_array_index</name><argument_list pos:start="347:34" pos:end="347:48">(<argument pos:start="347:35" pos:end="347:44"><expr pos:start="347:35" pos:end="347:44"><name pos:start="347:35" pos:end="347:44">mem_ranges</name></expr></argument>, <argument pos:start="347:47" pos:end="347:47"><expr pos:start="347:47" pos:end="347:47"><name pos:start="347:47" pos:end="347:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="357:65"><expr pos:start="349:9" pos:end="357:64"><call pos:start="349:9" pos:end="357:64"><name pos:start="349:9" pos:end="349:18">aml_append</name><argument_list pos:start="349:19" pos:end="357:64">(<argument pos:start="349:20" pos:end="349:22"><expr pos:start="349:20" pos:end="349:22"><name pos:start="349:20" pos:end="349:22">crs</name></expr></argument>,

            <argument pos:start="351:13" pos:end="357:63"><expr pos:start="351:13" pos:end="357:63"><call pos:start="351:13" pos:end="357:63"><name pos:start="351:13" pos:end="351:28">aml_dword_memory</name><argument_list pos:start="351:29" pos:end="357:63">(<argument pos:start="351:30" pos:end="351:43"><expr pos:start="351:30" pos:end="351:43"><name pos:start="351:30" pos:end="351:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="351:46" pos:end="351:58"><expr pos:start="351:46" pos:end="351:58"><name pos:start="351:46" pos:end="351:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="351:61" pos:end="351:73"><expr pos:start="351:61" pos:end="351:73"><name pos:start="351:61" pos:end="351:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="353:30" pos:end="353:46"><expr pos:start="353:30" pos:end="353:46"><name pos:start="353:30" pos:end="353:46">AML_NON_CACHEABLE</name></expr></argument>, <argument pos:start="353:49" pos:end="353:62"><expr pos:start="353:49" pos:end="353:62"><name pos:start="353:49" pos:end="353:62">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="355:30" pos:end="355:30"><expr pos:start="355:30" pos:end="355:30"><literal type="number" pos:start="355:30" pos:end="355:30">0</literal></expr></argument>, <argument pos:start="355:33" pos:end="355:43"><expr pos:start="355:33" pos:end="355:43"><name pos:start="355:33" pos:end="355:43"><name pos:start="355:33" pos:end="355:37">entry</name><operator pos:start="355:38" pos:end="355:39">-&gt;</operator><name pos:start="355:40" pos:end="355:43">base</name></name></expr></argument>, <argument pos:start="355:46" pos:end="355:57"><expr pos:start="355:46" pos:end="355:57"><name pos:start="355:46" pos:end="355:57"><name pos:start="355:46" pos:end="355:50">entry</name><operator pos:start="355:51" pos:end="355:52">-&gt;</operator><name pos:start="355:53" pos:end="355:57">limit</name></name></expr></argument>,

                             <argument pos:start="357:30" pos:end="357:30"><expr pos:start="357:30" pos:end="357:30"><literal type="number" pos:start="357:30" pos:end="357:30">0</literal></expr></argument>, <argument pos:start="357:33" pos:end="357:62"><expr pos:start="357:33" pos:end="357:62"><name pos:start="357:33" pos:end="357:44"><name pos:start="357:33" pos:end="357:37">entry</name><operator pos:start="357:38" pos:end="357:39">-&gt;</operator><name pos:start="357:40" pos:end="357:44">limit</name></name> <operator pos:start="357:46" pos:end="357:46">-</operator> <name pos:start="357:48" pos:end="357:58"><name pos:start="357:48" pos:end="357:52">entry</name><operator pos:start="357:53" pos:end="357:54">-&gt;</operator><name pos:start="357:55" pos:end="357:58">base</name></name> <operator pos:start="357:60" pos:end="357:60">+</operator> <literal type="number" pos:start="357:62" pos:end="357:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="363:5" pos:end="375:5"><if pos:start="363:5" pos:end="375:5">if <condition pos:start="363:8" pos:end="363:23">(<expr pos:start="363:9" pos:end="363:22"><name pos:start="363:9" pos:end="363:22"><name pos:start="363:9" pos:end="363:11">pci</name><operator pos:start="363:12" pos:end="363:13">-&gt;</operator><name pos:start="363:14" pos:end="363:16">w64</name><operator pos:start="363:17" pos:end="363:17">.</operator><name pos:start="363:18" pos:end="363:22">begin</name></name></expr>)</condition> <block pos:start="363:25" pos:end="375:5">{<block_content pos:start="365:9" pos:end="373:61">

        <expr_stmt pos:start="365:9" pos:end="373:61"><expr pos:start="365:9" pos:end="373:60"><call pos:start="365:9" pos:end="373:60"><name pos:start="365:9" pos:end="365:18">aml_append</name><argument_list pos:start="365:19" pos:end="373:60">(<argument pos:start="365:20" pos:end="365:22"><expr pos:start="365:20" pos:end="365:22"><name pos:start="365:20" pos:end="365:22">crs</name></expr></argument>,

            <argument pos:start="367:13" pos:end="373:59"><expr pos:start="367:13" pos:end="373:59"><call pos:start="367:13" pos:end="373:59"><name pos:start="367:13" pos:end="367:28">aml_qword_memory</name><argument_list pos:start="367:29" pos:end="373:59">(<argument pos:start="367:30" pos:end="367:43"><expr pos:start="367:30" pos:end="367:43"><name pos:start="367:30" pos:end="367:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="367:46" pos:end="367:58"><expr pos:start="367:46" pos:end="367:58"><name pos:start="367:46" pos:end="367:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="367:61" pos:end="367:73"><expr pos:start="367:61" pos:end="367:73"><name pos:start="367:61" pos:end="367:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="369:30" pos:end="369:42"><expr pos:start="369:30" pos:end="369:42"><name pos:start="369:30" pos:end="369:42">AML_CACHEABLE</name></expr></argument>, <argument pos:start="369:45" pos:end="369:58"><expr pos:start="369:45" pos:end="369:58"><name pos:start="369:45" pos:end="369:58">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="371:30" pos:end="371:30"><expr pos:start="371:30" pos:end="371:30"><literal type="number" pos:start="371:30" pos:end="371:30">0</literal></expr></argument>, <argument pos:start="371:33" pos:end="371:46"><expr pos:start="371:33" pos:end="371:46"><name pos:start="371:33" pos:end="371:46"><name pos:start="371:33" pos:end="371:35">pci</name><operator pos:start="371:36" pos:end="371:37">-&gt;</operator><name pos:start="371:38" pos:end="371:40">w64</name><operator pos:start="371:41" pos:end="371:41">.</operator><name pos:start="371:42" pos:end="371:46">begin</name></name></expr></argument>, <argument pos:start="371:49" pos:end="371:64"><expr pos:start="371:49" pos:end="371:64"><name pos:start="371:49" pos:end="371:60"><name pos:start="371:49" pos:end="371:51">pci</name><operator pos:start="371:52" pos:end="371:53">-&gt;</operator><name pos:start="371:54" pos:end="371:56">w64</name><operator pos:start="371:57" pos:end="371:57">.</operator><name pos:start="371:58" pos:end="371:60">end</name></name> <operator pos:start="371:62" pos:end="371:62">-</operator> <literal type="number" pos:start="371:64" pos:end="371:64">1</literal></expr></argument>, <argument pos:start="371:67" pos:end="371:67"><expr pos:start="371:67" pos:end="371:67"><literal type="number" pos:start="371:67" pos:end="371:67">0</literal></expr></argument>,

                             <argument pos:start="373:30" pos:end="373:58"><expr pos:start="373:30" pos:end="373:58"><name pos:start="373:30" pos:end="373:41"><name pos:start="373:30" pos:end="373:32">pci</name><operator pos:start="373:33" pos:end="373:34">-&gt;</operator><name pos:start="373:35" pos:end="373:37">w64</name><operator pos:start="373:38" pos:end="373:38">.</operator><name pos:start="373:39" pos:end="373:41">end</name></name> <operator pos:start="373:43" pos:end="373:43">-</operator> <name pos:start="373:45" pos:end="373:58"><name pos:start="373:45" pos:end="373:47">pci</name><operator pos:start="373:48" pos:end="373:49">-&gt;</operator><name pos:start="373:50" pos:end="373:52">w64</name><operator pos:start="373:53" pos:end="373:53">.</operator><name pos:start="373:54" pos:end="373:58">begin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="379:5" pos:end="385:5"><if pos:start="379:5" pos:end="385:5">if <condition pos:start="379:8" pos:end="379:48">(<expr pos:start="379:9" pos:end="379:47"><name pos:start="379:9" pos:end="379:25"><name pos:start="379:9" pos:end="379:12">misc</name><operator pos:start="379:13" pos:end="379:14">-&gt;</operator><name pos:start="379:15" pos:end="379:25">tpm_version</name></name> <operator pos:start="379:27" pos:end="379:28">!=</operator> <name pos:start="379:30" pos:end="379:47">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="379:50" pos:end="385:5">{<block_content pos:start="381:9" pos:end="383:55">

        <expr_stmt pos:start="381:9" pos:end="383:55"><expr pos:start="381:9" pos:end="383:54"><call pos:start="381:9" pos:end="383:54"><name pos:start="381:9" pos:end="381:18">aml_append</name><argument_list pos:start="381:19" pos:end="383:54">(<argument pos:start="381:20" pos:end="381:22"><expr pos:start="381:20" pos:end="381:22"><name pos:start="381:20" pos:end="381:22">crs</name></expr></argument>, <argument pos:start="381:25" pos:end="383:53"><expr pos:start="381:25" pos:end="383:53"><call pos:start="381:25" pos:end="383:53"><name pos:start="381:25" pos:end="381:42">aml_memory32_fixed</name><argument_list pos:start="381:43" pos:end="383:53">(<argument pos:start="381:44" pos:end="381:60"><expr pos:start="381:44" pos:end="381:60"><name pos:start="381:44" pos:end="381:60">TPM_TIS_ADDR_BASE</name></expr></argument>,

                   <argument pos:start="383:20" pos:end="383:36"><expr pos:start="383:20" pos:end="383:36"><name pos:start="383:20" pos:end="383:36">TPM_TIS_ADDR_SIZE</name></expr></argument>, <argument pos:start="383:39" pos:end="383:52"><expr pos:start="383:39" pos:end="383:52"><name pos:start="383:39" pos:end="383:52">AML_READ_WRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="387:5" pos:end="387:50"><expr pos:start="387:5" pos:end="387:49"><call pos:start="387:5" pos:end="387:49"><name pos:start="387:5" pos:end="387:14">aml_append</name><argument_list pos:start="387:15" pos:end="387:49">(<argument pos:start="387:16" pos:end="387:20"><expr pos:start="387:16" pos:end="387:20"><name pos:start="387:16" pos:end="387:20">scope</name></expr></argument>, <argument pos:start="387:23" pos:end="387:48"><expr pos:start="387:23" pos:end="387:48"><call pos:start="387:23" pos:end="387:48"><name pos:start="387:23" pos:end="387:35">aml_name_decl</name><argument_list pos:start="387:36" pos:end="387:48">(<argument pos:start="387:37" pos:end="387:42"><expr pos:start="387:37" pos:end="387:42"><literal type="string" pos:start="387:37" pos:end="387:42">"_CRS"</literal></expr></argument>, <argument pos:start="387:45" pos:end="387:47"><expr pos:start="387:45" pos:end="387:47"><name pos:start="387:45" pos:end="387:47">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="391:5" pos:end="391:38">/* reserve GPE0 block resources */</comment>

    <expr_stmt pos:start="393:5" pos:end="393:29"><expr pos:start="393:5" pos:end="393:28"><name pos:start="393:5" pos:end="393:7">dev</name> <operator pos:start="393:9" pos:end="393:9">=</operator> <call pos:start="393:11" pos:end="393:28"><name pos:start="393:11" pos:end="393:20">aml_device</name><argument_list pos:start="393:21" pos:end="393:28">(<argument pos:start="393:22" pos:end="393:27"><expr pos:start="393:22" pos:end="393:27"><literal type="string" pos:start="393:22" pos:end="393:27">"GPE0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:66"><expr pos:start="395:5" pos:end="395:65"><call pos:start="395:5" pos:end="395:65"><name pos:start="395:5" pos:end="395:14">aml_append</name><argument_list pos:start="395:15" pos:end="395:65">(<argument pos:start="395:16" pos:end="395:18"><expr pos:start="395:16" pos:end="395:18"><name pos:start="395:16" pos:end="395:18">dev</name></expr></argument>, <argument pos:start="395:21" pos:end="395:64"><expr pos:start="395:21" pos:end="395:64"><call pos:start="395:21" pos:end="395:64"><name pos:start="395:21" pos:end="395:33">aml_name_decl</name><argument_list pos:start="395:34" pos:end="395:64">(<argument pos:start="395:35" pos:end="395:40"><expr pos:start="395:35" pos:end="395:40"><literal type="string" pos:start="395:35" pos:end="395:40">"_HID"</literal></expr></argument>, <argument pos:start="395:43" pos:end="395:63"><expr pos:start="395:43" pos:end="395:63"><call pos:start="395:43" pos:end="395:63"><name pos:start="395:43" pos:end="395:52">aml_string</name><argument_list pos:start="395:53" pos:end="395:63">(<argument pos:start="395:54" pos:end="395:62"><expr pos:start="395:54" pos:end="395:62"><literal type="string" pos:start="395:54" pos:end="395:62">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:73"><expr pos:start="397:5" pos:end="397:72"><call pos:start="397:5" pos:end="397:72"><name pos:start="397:5" pos:end="397:14">aml_append</name><argument_list pos:start="397:15" pos:end="397:72">(<argument pos:start="397:16" pos:end="397:18"><expr pos:start="397:16" pos:end="397:18"><name pos:start="397:16" pos:end="397:18">dev</name></expr></argument>, <argument pos:start="397:21" pos:end="397:71"><expr pos:start="397:21" pos:end="397:71"><call pos:start="397:21" pos:end="397:71"><name pos:start="397:21" pos:end="397:33">aml_name_decl</name><argument_list pos:start="397:34" pos:end="397:71">(<argument pos:start="397:35" pos:end="397:40"><expr pos:start="397:35" pos:end="397:40"><literal type="string" pos:start="397:35" pos:end="397:40">"_UID"</literal></expr></argument>, <argument pos:start="397:43" pos:end="397:70"><expr pos:start="397:43" pos:end="397:70"><call pos:start="397:43" pos:end="397:70"><name pos:start="397:43" pos:end="397:52">aml_string</name><argument_list pos:start="397:53" pos:end="397:70">(<argument pos:start="397:54" pos:end="397:69"><expr pos:start="397:54" pos:end="397:69"><literal type="string" pos:start="397:54" pos:end="397:69">"GPE0 resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="399:5" pos:end="399:64">/* device present, functioning, decoding, not shown in UI */</comment>

    <expr_stmt pos:start="401:5" pos:end="401:57"><expr pos:start="401:5" pos:end="401:56"><call pos:start="401:5" pos:end="401:56"><name pos:start="401:5" pos:end="401:14">aml_append</name><argument_list pos:start="401:15" pos:end="401:56">(<argument pos:start="401:16" pos:end="401:18"><expr pos:start="401:16" pos:end="401:18"><name pos:start="401:16" pos:end="401:18">dev</name></expr></argument>, <argument pos:start="401:21" pos:end="401:55"><expr pos:start="401:21" pos:end="401:55"><call pos:start="401:21" pos:end="401:55"><name pos:start="401:21" pos:end="401:33">aml_name_decl</name><argument_list pos:start="401:34" pos:end="401:55">(<argument pos:start="401:35" pos:end="401:40"><expr pos:start="401:35" pos:end="401:40"><literal type="string" pos:start="401:35" pos:end="401:40">"_STA"</literal></expr></argument>, <argument pos:start="401:43" pos:end="401:54"><expr pos:start="401:43" pos:end="401:54"><call pos:start="401:43" pos:end="401:54"><name pos:start="401:43" pos:end="401:49">aml_int</name><argument_list pos:start="401:50" pos:end="401:54">(<argument pos:start="401:51" pos:end="401:53"><expr pos:start="401:51" pos:end="401:53"><literal type="number" pos:start="401:51" pos:end="401:53">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:34"><expr pos:start="403:5" pos:end="403:33"><name pos:start="403:5" pos:end="403:7">crs</name> <operator pos:start="403:9" pos:end="403:9">=</operator> <call pos:start="403:11" pos:end="403:33"><name pos:start="403:11" pos:end="403:31">aml_resource_template</name><argument_list pos:start="403:32" pos:end="403:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="409:6"><expr pos:start="405:5" pos:end="409:5"><call pos:start="405:5" pos:end="409:5"><name pos:start="405:5" pos:end="405:14">aml_append</name><argument_list pos:start="405:15" pos:end="409:5">(<argument pos:start="405:16" pos:end="405:18"><expr pos:start="405:16" pos:end="405:18"><name pos:start="405:16" pos:end="405:18">crs</name></expr></argument>,

        <argument pos:start="407:9" pos:end="407:77"><expr pos:start="407:9" pos:end="407:77"><call pos:start="407:9" pos:end="407:77"><name pos:start="407:9" pos:end="407:14">aml_io</name><argument_list pos:start="407:15" pos:end="407:77">(<argument pos:start="407:16" pos:end="407:27"><expr pos:start="407:16" pos:end="407:27"><name pos:start="407:16" pos:end="407:27">AML_DECODE16</name></expr></argument>, <argument pos:start="407:30" pos:end="407:41"><expr pos:start="407:30" pos:end="407:41"><name pos:start="407:30" pos:end="407:41"><name pos:start="407:30" pos:end="407:31">pm</name><operator pos:start="407:32" pos:end="407:33">-&gt;</operator><name pos:start="407:34" pos:end="407:41">gpe0_blk</name></name></expr></argument>, <argument pos:start="407:44" pos:end="407:55"><expr pos:start="407:44" pos:end="407:55"><name pos:start="407:44" pos:end="407:55"><name pos:start="407:44" pos:end="407:45">pm</name><operator pos:start="407:46" pos:end="407:47">-&gt;</operator><name pos:start="407:48" pos:end="407:55">gpe0_blk</name></name></expr></argument>, <argument pos:start="407:58" pos:end="407:58"><expr pos:start="407:58" pos:end="407:58"><literal type="number" pos:start="407:58" pos:end="407:58">1</literal></expr></argument>, <argument pos:start="407:61" pos:end="407:76"><expr pos:start="407:61" pos:end="407:76"><name pos:start="407:61" pos:end="407:76"><name pos:start="407:61" pos:end="407:62">pm</name><operator pos:start="407:63" pos:end="407:64">-&gt;</operator><name pos:start="407:65" pos:end="407:76">gpe0_blk_len</name></name></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="411:5" pos:end="411:48"><expr pos:start="411:5" pos:end="411:47"><call pos:start="411:5" pos:end="411:47"><name pos:start="411:5" pos:end="411:14">aml_append</name><argument_list pos:start="411:15" pos:end="411:47">(<argument pos:start="411:16" pos:end="411:18"><expr pos:start="411:16" pos:end="411:18"><name pos:start="411:16" pos:end="411:18">dev</name></expr></argument>, <argument pos:start="411:21" pos:end="411:46"><expr pos:start="411:21" pos:end="411:46"><call pos:start="411:21" pos:end="411:46"><name pos:start="411:21" pos:end="411:33">aml_name_decl</name><argument_list pos:start="411:34" pos:end="411:46">(<argument pos:start="411:35" pos:end="411:40"><expr pos:start="411:35" pos:end="411:40"><literal type="string" pos:start="411:35" pos:end="411:40">"_CRS"</literal></expr></argument>, <argument pos:start="411:43" pos:end="411:45"><expr pos:start="411:43" pos:end="411:45"><name pos:start="411:43" pos:end="411:45">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="413:5" pos:end="413:27"><expr pos:start="413:5" pos:end="413:26"><call pos:start="413:5" pos:end="413:26"><name pos:start="413:5" pos:end="413:14">aml_append</name><argument_list pos:start="413:15" pos:end="413:26">(<argument pos:start="413:16" pos:end="413:20"><expr pos:start="413:16" pos:end="413:20"><name pos:start="413:16" pos:end="413:20">scope</name></expr></argument>, <argument pos:start="413:23" pos:end="413:25"><expr pos:start="413:23" pos:end="413:25"><name pos:start="413:23" pos:end="413:25">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="417:5" pos:end="417:38"><expr pos:start="417:5" pos:end="417:37"><call pos:start="417:5" pos:end="417:37"><name pos:start="417:5" pos:end="417:20">g_ptr_array_free</name><argument_list pos:start="417:21" pos:end="417:37">(<argument pos:start="417:22" pos:end="417:30"><expr pos:start="417:22" pos:end="417:30"><name pos:start="417:22" pos:end="417:30">io_ranges</name></expr></argument>, <argument pos:start="417:33" pos:end="417:36"><expr pos:start="417:33" pos:end="417:36"><name pos:start="417:33" pos:end="417:36">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="419:5" pos:end="419:39"><expr pos:start="419:5" pos:end="419:38"><call pos:start="419:5" pos:end="419:38"><name pos:start="419:5" pos:end="419:20">g_ptr_array_free</name><argument_list pos:start="419:21" pos:end="419:38">(<argument pos:start="419:22" pos:end="419:31"><expr pos:start="419:22" pos:end="419:31"><name pos:start="419:22" pos:end="419:31">mem_ranges</name></expr></argument>, <argument pos:start="419:34" pos:end="419:37"><expr pos:start="419:34" pos:end="419:37"><name pos:start="419:34" pos:end="419:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="423:5" pos:end="423:33">/* reserve PCIHP resources */</comment>

    <if_stmt pos:start="425:5" pos:end="453:5"><if pos:start="425:5" pos:end="453:5">if <condition pos:start="425:8" pos:end="425:25">(<expr pos:start="425:9" pos:end="425:24"><name pos:start="425:9" pos:end="425:24"><name pos:start="425:9" pos:end="425:10">pm</name><operator pos:start="425:11" pos:end="425:12">-&gt;</operator><name pos:start="425:13" pos:end="425:24">pcihp_io_len</name></name></expr>)</condition> <block pos:start="425:27" pos:end="453:5">{<block_content pos:start="427:9" pos:end="451:31">

        <expr_stmt pos:start="427:9" pos:end="427:33"><expr pos:start="427:9" pos:end="427:32"><name pos:start="427:9" pos:end="427:11">dev</name> <operator pos:start="427:13" pos:end="427:13">=</operator> <call pos:start="427:15" pos:end="427:32"><name pos:start="427:15" pos:end="427:24">aml_device</name><argument_list pos:start="427:25" pos:end="427:32">(<argument pos:start="427:26" pos:end="427:31"><expr pos:start="427:26" pos:end="427:31"><literal type="string" pos:start="427:26" pos:end="427:31">"PHPR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="429:9" pos:end="429:70"><expr pos:start="429:9" pos:end="429:69"><call pos:start="429:9" pos:end="429:69"><name pos:start="429:9" pos:end="429:18">aml_append</name><argument_list pos:start="429:19" pos:end="429:69">(<argument pos:start="429:20" pos:end="429:22"><expr pos:start="429:20" pos:end="429:22"><name pos:start="429:20" pos:end="429:22">dev</name></expr></argument>, <argument pos:start="429:25" pos:end="429:68"><expr pos:start="429:25" pos:end="429:68"><call pos:start="429:25" pos:end="429:68"><name pos:start="429:25" pos:end="429:37">aml_name_decl</name><argument_list pos:start="429:38" pos:end="429:68">(<argument pos:start="429:39" pos:end="429:44"><expr pos:start="429:39" pos:end="429:44"><literal type="string" pos:start="429:39" pos:end="429:44">"_HID"</literal></expr></argument>, <argument pos:start="429:47" pos:end="429:67"><expr pos:start="429:47" pos:end="429:67"><call pos:start="429:47" pos:end="429:67"><name pos:start="429:47" pos:end="429:56">aml_string</name><argument_list pos:start="429:57" pos:end="429:67">(<argument pos:start="429:58" pos:end="429:66"><expr pos:start="429:58" pos:end="429:66"><literal type="string" pos:start="429:58" pos:end="429:66">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="431:9" pos:end="433:72"><expr pos:start="431:9" pos:end="433:71"><call pos:start="431:9" pos:end="433:71"><name pos:start="431:9" pos:end="431:18">aml_append</name><argument_list pos:start="431:19" pos:end="433:71">(<argument pos:start="431:20" pos:end="431:22"><expr pos:start="431:20" pos:end="431:22"><name pos:start="431:20" pos:end="431:22">dev</name></expr></argument>,

            <argument pos:start="433:13" pos:end="433:70"><expr pos:start="433:13" pos:end="433:70"><call pos:start="433:13" pos:end="433:70"><name pos:start="433:13" pos:end="433:25">aml_name_decl</name><argument_list pos:start="433:26" pos:end="433:70">(<argument pos:start="433:27" pos:end="433:32"><expr pos:start="433:27" pos:end="433:32"><literal type="string" pos:start="433:27" pos:end="433:32">"_UID"</literal></expr></argument>, <argument pos:start="433:35" pos:end="433:69"><expr pos:start="433:35" pos:end="433:69"><call pos:start="433:35" pos:end="433:69"><name pos:start="433:35" pos:end="433:44">aml_string</name><argument_list pos:start="433:45" pos:end="433:69">(<argument pos:start="433:46" pos:end="433:68"><expr pos:start="433:46" pos:end="433:68"><literal type="string" pos:start="433:46" pos:end="433:68">"PCI Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="435:9" pos:end="435:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="437:9" pos:end="437:61"><expr pos:start="437:9" pos:end="437:60"><call pos:start="437:9" pos:end="437:60"><name pos:start="437:9" pos:end="437:18">aml_append</name><argument_list pos:start="437:19" pos:end="437:60">(<argument pos:start="437:20" pos:end="437:22"><expr pos:start="437:20" pos:end="437:22"><name pos:start="437:20" pos:end="437:22">dev</name></expr></argument>, <argument pos:start="437:25" pos:end="437:59"><expr pos:start="437:25" pos:end="437:59"><call pos:start="437:25" pos:end="437:59"><name pos:start="437:25" pos:end="437:37">aml_name_decl</name><argument_list pos:start="437:38" pos:end="437:59">(<argument pos:start="437:39" pos:end="437:44"><expr pos:start="437:39" pos:end="437:44"><literal type="string" pos:start="437:39" pos:end="437:44">"_STA"</literal></expr></argument>, <argument pos:start="437:47" pos:end="437:58"><expr pos:start="437:47" pos:end="437:58"><call pos:start="437:47" pos:end="437:58"><name pos:start="437:47" pos:end="437:53">aml_int</name><argument_list pos:start="437:54" pos:end="437:58">(<argument pos:start="437:55" pos:end="437:57"><expr pos:start="437:55" pos:end="437:57"><literal type="number" pos:start="437:55" pos:end="437:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:38"><expr pos:start="439:9" pos:end="439:37"><name pos:start="439:9" pos:end="439:11">crs</name> <operator pos:start="439:13" pos:end="439:13">=</operator> <call pos:start="439:15" pos:end="439:37"><name pos:start="439:15" pos:end="439:35">aml_resource_template</name><argument_list pos:start="439:36" pos:end="439:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="441:9" pos:end="447:10"><expr pos:start="441:9" pos:end="447:9"><call pos:start="441:9" pos:end="447:9"><name pos:start="441:9" pos:end="441:18">aml_append</name><argument_list pos:start="441:19" pos:end="447:9">(<argument pos:start="441:20" pos:end="441:22"><expr pos:start="441:20" pos:end="441:22"><name pos:start="441:20" pos:end="441:22">crs</name></expr></argument>,

            <argument pos:start="443:13" pos:end="445:36"><expr pos:start="443:13" pos:end="445:36"><call pos:start="443:13" pos:end="445:36"><name pos:start="443:13" pos:end="443:18">aml_io</name><argument_list pos:start="443:19" pos:end="445:36">(<argument pos:start="443:20" pos:end="443:31"><expr pos:start="443:20" pos:end="443:31"><name pos:start="443:20" pos:end="443:31">AML_DECODE16</name></expr></argument>, <argument pos:start="443:34" pos:end="443:50"><expr pos:start="443:34" pos:end="443:50"><name pos:start="443:34" pos:end="443:50"><name pos:start="443:34" pos:end="443:35">pm</name><operator pos:start="443:36" pos:end="443:37">-&gt;</operator><name pos:start="443:38" pos:end="443:50">pcihp_io_base</name></name></expr></argument>, <argument pos:start="443:53" pos:end="443:69"><expr pos:start="443:53" pos:end="443:69"><name pos:start="443:53" pos:end="443:69"><name pos:start="443:53" pos:end="443:54">pm</name><operator pos:start="443:55" pos:end="443:56">-&gt;</operator><name pos:start="443:57" pos:end="443:69">pcihp_io_base</name></name></expr></argument>, <argument pos:start="443:72" pos:end="443:72"><expr pos:start="443:72" pos:end="443:72"><literal type="number" pos:start="443:72" pos:end="443:72">1</literal></expr></argument>,

                   <argument pos:start="445:20" pos:end="445:35"><expr pos:start="445:20" pos:end="445:35"><name pos:start="445:20" pos:end="445:35"><name pos:start="445:20" pos:end="445:21">pm</name><operator pos:start="445:22" pos:end="445:23">-&gt;</operator><name pos:start="445:24" pos:end="445:35">pcihp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="449:9" pos:end="449:52"><expr pos:start="449:9" pos:end="449:51"><call pos:start="449:9" pos:end="449:51"><name pos:start="449:9" pos:end="449:18">aml_append</name><argument_list pos:start="449:19" pos:end="449:51">(<argument pos:start="449:20" pos:end="449:22"><expr pos:start="449:20" pos:end="449:22"><name pos:start="449:20" pos:end="449:22">dev</name></expr></argument>, <argument pos:start="449:25" pos:end="449:50"><expr pos:start="449:25" pos:end="449:50"><call pos:start="449:25" pos:end="449:50"><name pos:start="449:25" pos:end="449:37">aml_name_decl</name><argument_list pos:start="449:38" pos:end="449:50">(<argument pos:start="449:39" pos:end="449:44"><expr pos:start="449:39" pos:end="449:44"><literal type="string" pos:start="449:39" pos:end="449:44">"_CRS"</literal></expr></argument>, <argument pos:start="449:47" pos:end="449:49"><expr pos:start="449:47" pos:end="449:49"><name pos:start="449:47" pos:end="449:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="451:9" pos:end="451:31"><expr pos:start="451:9" pos:end="451:30"><call pos:start="451:9" pos:end="451:30"><name pos:start="451:9" pos:end="451:18">aml_append</name><argument_list pos:start="451:19" pos:end="451:30">(<argument pos:start="451:20" pos:end="451:24"><expr pos:start="451:20" pos:end="451:24"><name pos:start="451:20" pos:end="451:24">scope</name></expr></argument>, <argument pos:start="451:27" pos:end="451:29"><expr pos:start="451:27" pos:end="451:29"><name pos:start="451:27" pos:end="451:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="455:5" pos:end="455:28"><expr pos:start="455:5" pos:end="455:27"><call pos:start="455:5" pos:end="455:27"><name pos:start="455:5" pos:end="455:14">aml_append</name><argument_list pos:start="455:15" pos:end="455:27">(<argument pos:start="455:16" pos:end="455:19"><expr pos:start="455:16" pos:end="455:19"><name pos:start="455:16" pos:end="455:19">dsdt</name></expr></argument>, <argument pos:start="455:22" pos:end="455:26"><expr pos:start="455:22" pos:end="455:26"><name pos:start="455:22" pos:end="455:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="459:5" pos:end="459:55">/*  create S3_ / S4_ / S5_ packages if necessary */</comment>

    <expr_stmt pos:start="461:5" pos:end="461:28"><expr pos:start="461:5" pos:end="461:27"><name pos:start="461:5" pos:end="461:9">scope</name> <operator pos:start="461:11" pos:end="461:11">=</operator> <call pos:start="461:13" pos:end="461:27"><name pos:start="461:13" pos:end="461:21">aml_scope</name><argument_list pos:start="461:22" pos:end="461:27">(<argument pos:start="461:23" pos:end="461:26"><expr pos:start="461:23" pos:end="461:26"><literal type="string" pos:start="461:23" pos:end="461:26">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="463:5" pos:end="477:5"><if pos:start="463:5" pos:end="477:5">if <condition pos:start="463:8" pos:end="463:25">(<expr pos:start="463:9" pos:end="463:24"><operator pos:start="463:9" pos:end="463:9">!</operator><name pos:start="463:10" pos:end="463:24"><name pos:start="463:10" pos:end="463:11">pm</name><operator pos:start="463:12" pos:end="463:13">-&gt;</operator><name pos:start="463:14" pos:end="463:24">s3_disabled</name></name></expr>)</condition> <block pos:start="463:27" pos:end="477:5">{<block_content pos:start="465:9" pos:end="475:53">

        <expr_stmt pos:start="465:9" pos:end="465:29"><expr pos:start="465:9" pos:end="465:28"><name pos:start="465:9" pos:end="465:11">pkg</name> <operator pos:start="465:13" pos:end="465:13">=</operator> <call pos:start="465:15" pos:end="465:28"><name pos:start="465:15" pos:end="465:25">aml_package</name><argument_list pos:start="465:26" pos:end="465:28">(<argument pos:start="465:27" pos:end="465:27"><expr pos:start="465:27" pos:end="465:27"><literal type="number" pos:start="465:27" pos:end="465:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:36"><expr pos:start="467:9" pos:end="467:35"><call pos:start="467:9" pos:end="467:35"><name pos:start="467:9" pos:end="467:18">aml_append</name><argument_list pos:start="467:19" pos:end="467:35">(<argument pos:start="467:20" pos:end="467:22"><expr pos:start="467:20" pos:end="467:22"><name pos:start="467:20" pos:end="467:22">pkg</name></expr></argument>, <argument pos:start="467:25" pos:end="467:34"><expr pos:start="467:25" pos:end="467:34"><call pos:start="467:25" pos:end="467:34"><name pos:start="467:25" pos:end="467:31">aml_int</name><argument_list pos:start="467:32" pos:end="467:34">(<argument pos:start="467:33" pos:end="467:33"><expr pos:start="467:33" pos:end="467:33"><literal type="number" pos:start="467:33" pos:end="467:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="467:38" pos:end="467:59">/* PM1a_CNT.SLP_TYP */</comment>

        <expr_stmt pos:start="469:9" pos:end="469:36"><expr pos:start="469:9" pos:end="469:35"><call pos:start="469:9" pos:end="469:35"><name pos:start="469:9" pos:end="469:18">aml_append</name><argument_list pos:start="469:19" pos:end="469:35">(<argument pos:start="469:20" pos:end="469:22"><expr pos:start="469:20" pos:end="469:22"><name pos:start="469:20" pos:end="469:22">pkg</name></expr></argument>, <argument pos:start="469:25" pos:end="469:34"><expr pos:start="469:25" pos:end="469:34"><call pos:start="469:25" pos:end="469:34"><name pos:start="469:25" pos:end="469:31">aml_int</name><argument_list pos:start="469:32" pos:end="469:34">(<argument pos:start="469:33" pos:end="469:33"><expr pos:start="469:33" pos:end="469:33"><literal type="number" pos:start="469:33" pos:end="469:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="469:38" pos:end="469:77">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="471:9" pos:end="471:36"><expr pos:start="471:9" pos:end="471:35"><call pos:start="471:9" pos:end="471:35"><name pos:start="471:9" pos:end="471:18">aml_append</name><argument_list pos:start="471:19" pos:end="471:35">(<argument pos:start="471:20" pos:end="471:22"><expr pos:start="471:20" pos:end="471:22"><name pos:start="471:20" pos:end="471:22">pkg</name></expr></argument>, <argument pos:start="471:25" pos:end="471:34"><expr pos:start="471:25" pos:end="471:34"><call pos:start="471:25" pos:end="471:34"><name pos:start="471:25" pos:end="471:31">aml_int</name><argument_list pos:start="471:32" pos:end="471:34">(<argument pos:start="471:33" pos:end="471:33"><expr pos:start="471:33" pos:end="471:33"><literal type="number" pos:start="471:33" pos:end="471:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="471:38" pos:end="471:51">/* reserved */</comment>

        <expr_stmt pos:start="473:9" pos:end="473:36"><expr pos:start="473:9" pos:end="473:35"><call pos:start="473:9" pos:end="473:35"><name pos:start="473:9" pos:end="473:18">aml_append</name><argument_list pos:start="473:19" pos:end="473:35">(<argument pos:start="473:20" pos:end="473:22"><expr pos:start="473:20" pos:end="473:22"><name pos:start="473:20" pos:end="473:22">pkg</name></expr></argument>, <argument pos:start="473:25" pos:end="473:34"><expr pos:start="473:25" pos:end="473:34"><call pos:start="473:25" pos:end="473:34"><name pos:start="473:25" pos:end="473:31">aml_int</name><argument_list pos:start="473:32" pos:end="473:34">(<argument pos:start="473:33" pos:end="473:33"><expr pos:start="473:33" pos:end="473:33"><literal type="number" pos:start="473:33" pos:end="473:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="473:38" pos:end="473:51">/* reserved */</comment>

        <expr_stmt pos:start="475:9" pos:end="475:53"><expr pos:start="475:9" pos:end="475:52"><call pos:start="475:9" pos:end="475:52"><name pos:start="475:9" pos:end="475:18">aml_append</name><argument_list pos:start="475:19" pos:end="475:52">(<argument pos:start="475:20" pos:end="475:24"><expr pos:start="475:20" pos:end="475:24"><name pos:start="475:20" pos:end="475:24">scope</name></expr></argument>, <argument pos:start="475:27" pos:end="475:51"><expr pos:start="475:27" pos:end="475:51"><call pos:start="475:27" pos:end="475:51"><name pos:start="475:27" pos:end="475:39">aml_name_decl</name><argument_list pos:start="475:40" pos:end="475:51">(<argument pos:start="475:41" pos:end="475:45"><expr pos:start="475:41" pos:end="475:45"><literal type="string" pos:start="475:41" pos:end="475:45">"_S3"</literal></expr></argument>, <argument pos:start="475:48" pos:end="475:50"><expr pos:start="475:48" pos:end="475:50"><name pos:start="475:48" pos:end="475:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="481:5" pos:end="497:5"><if pos:start="481:5" pos:end="497:5">if <condition pos:start="481:8" pos:end="481:25">(<expr pos:start="481:9" pos:end="481:24"><operator pos:start="481:9" pos:end="481:9">!</operator><name pos:start="481:10" pos:end="481:24"><name pos:start="481:10" pos:end="481:11">pm</name><operator pos:start="481:12" pos:end="481:13">-&gt;</operator><name pos:start="481:14" pos:end="481:24">s4_disabled</name></name></expr>)</condition> <block pos:start="481:27" pos:end="497:5">{<block_content pos:start="483:9" pos:end="495:53">

        <expr_stmt pos:start="483:9" pos:end="483:29"><expr pos:start="483:9" pos:end="483:28"><name pos:start="483:9" pos:end="483:11">pkg</name> <operator pos:start="483:13" pos:end="483:13">=</operator> <call pos:start="483:15" pos:end="483:28"><name pos:start="483:15" pos:end="483:25">aml_package</name><argument_list pos:start="483:26" pos:end="483:28">(<argument pos:start="483:27" pos:end="483:27"><expr pos:start="483:27" pos:end="483:27"><literal type="number" pos:start="483:27" pos:end="483:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="485:9" pos:end="485:45"><expr pos:start="485:9" pos:end="485:44"><call pos:start="485:9" pos:end="485:44"><name pos:start="485:9" pos:end="485:18">aml_append</name><argument_list pos:start="485:19" pos:end="485:44">(<argument pos:start="485:20" pos:end="485:22"><expr pos:start="485:20" pos:end="485:22"><name pos:start="485:20" pos:end="485:22">pkg</name></expr></argument>, <argument pos:start="485:25" pos:end="485:43"><expr pos:start="485:25" pos:end="485:43"><call pos:start="485:25" pos:end="485:43"><name pos:start="485:25" pos:end="485:31">aml_int</name><argument_list pos:start="485:32" pos:end="485:43">(<argument pos:start="485:33" pos:end="485:42"><expr pos:start="485:33" pos:end="485:42"><name pos:start="485:33" pos:end="485:42"><name pos:start="485:33" pos:end="485:34">pm</name><operator pos:start="485:35" pos:end="485:36">-&gt;</operator><name pos:start="485:37" pos:end="485:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="485:47" pos:end="485:68">/* PM1a_CNT.SLP_TYP */</comment>

        <comment type="block" pos:start="487:9" pos:end="487:48">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="489:9" pos:end="489:45"><expr pos:start="489:9" pos:end="489:44"><call pos:start="489:9" pos:end="489:44"><name pos:start="489:9" pos:end="489:18">aml_append</name><argument_list pos:start="489:19" pos:end="489:44">(<argument pos:start="489:20" pos:end="489:22"><expr pos:start="489:20" pos:end="489:22"><name pos:start="489:20" pos:end="489:22">pkg</name></expr></argument>, <argument pos:start="489:25" pos:end="489:43"><expr pos:start="489:25" pos:end="489:43"><call pos:start="489:25" pos:end="489:43"><name pos:start="489:25" pos:end="489:31">aml_int</name><argument_list pos:start="489:32" pos:end="489:43">(<argument pos:start="489:33" pos:end="489:42"><expr pos:start="489:33" pos:end="489:42"><name pos:start="489:33" pos:end="489:42"><name pos:start="489:33" pos:end="489:34">pm</name><operator pos:start="489:35" pos:end="489:36">-&gt;</operator><name pos:start="489:37" pos:end="489:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="491:9" pos:end="491:36"><expr pos:start="491:9" pos:end="491:35"><call pos:start="491:9" pos:end="491:35"><name pos:start="491:9" pos:end="491:18">aml_append</name><argument_list pos:start="491:19" pos:end="491:35">(<argument pos:start="491:20" pos:end="491:22"><expr pos:start="491:20" pos:end="491:22"><name pos:start="491:20" pos:end="491:22">pkg</name></expr></argument>, <argument pos:start="491:25" pos:end="491:34"><expr pos:start="491:25" pos:end="491:34"><call pos:start="491:25" pos:end="491:34"><name pos:start="491:25" pos:end="491:31">aml_int</name><argument_list pos:start="491:32" pos:end="491:34">(<argument pos:start="491:33" pos:end="491:33"><expr pos:start="491:33" pos:end="491:33"><literal type="number" pos:start="491:33" pos:end="491:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="491:38" pos:end="491:51">/* reserved */</comment>

        <expr_stmt pos:start="493:9" pos:end="493:36"><expr pos:start="493:9" pos:end="493:35"><call pos:start="493:9" pos:end="493:35"><name pos:start="493:9" pos:end="493:18">aml_append</name><argument_list pos:start="493:19" pos:end="493:35">(<argument pos:start="493:20" pos:end="493:22"><expr pos:start="493:20" pos:end="493:22"><name pos:start="493:20" pos:end="493:22">pkg</name></expr></argument>, <argument pos:start="493:25" pos:end="493:34"><expr pos:start="493:25" pos:end="493:34"><call pos:start="493:25" pos:end="493:34"><name pos:start="493:25" pos:end="493:31">aml_int</name><argument_list pos:start="493:32" pos:end="493:34">(<argument pos:start="493:33" pos:end="493:33"><expr pos:start="493:33" pos:end="493:33"><literal type="number" pos:start="493:33" pos:end="493:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="493:38" pos:end="493:51">/* reserved */</comment>

        <expr_stmt pos:start="495:9" pos:end="495:53"><expr pos:start="495:9" pos:end="495:52"><call pos:start="495:9" pos:end="495:52"><name pos:start="495:9" pos:end="495:18">aml_append</name><argument_list pos:start="495:19" pos:end="495:52">(<argument pos:start="495:20" pos:end="495:24"><expr pos:start="495:20" pos:end="495:24"><name pos:start="495:20" pos:end="495:24">scope</name></expr></argument>, <argument pos:start="495:27" pos:end="495:51"><expr pos:start="495:27" pos:end="495:51"><call pos:start="495:27" pos:end="495:51"><name pos:start="495:27" pos:end="495:39">aml_name_decl</name><argument_list pos:start="495:40" pos:end="495:51">(<argument pos:start="495:41" pos:end="495:45"><expr pos:start="495:41" pos:end="495:45"><literal type="string" pos:start="495:41" pos:end="495:45">"_S4"</literal></expr></argument>, <argument pos:start="495:48" pos:end="495:50"><expr pos:start="495:48" pos:end="495:50"><name pos:start="495:48" pos:end="495:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="501:5" pos:end="501:25"><expr pos:start="501:5" pos:end="501:24"><name pos:start="501:5" pos:end="501:7">pkg</name> <operator pos:start="501:9" pos:end="501:9">=</operator> <call pos:start="501:11" pos:end="501:24"><name pos:start="501:11" pos:end="501:21">aml_package</name><argument_list pos:start="501:22" pos:end="501:24">(<argument pos:start="501:23" pos:end="501:23"><expr pos:start="501:23" pos:end="501:23"><literal type="number" pos:start="501:23" pos:end="501:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="503:5" pos:end="503:32"><expr pos:start="503:5" pos:end="503:31"><call pos:start="503:5" pos:end="503:31"><name pos:start="503:5" pos:end="503:14">aml_append</name><argument_list pos:start="503:15" pos:end="503:31">(<argument pos:start="503:16" pos:end="503:18"><expr pos:start="503:16" pos:end="503:18"><name pos:start="503:16" pos:end="503:18">pkg</name></expr></argument>, <argument pos:start="503:21" pos:end="503:30"><expr pos:start="503:21" pos:end="503:30"><call pos:start="503:21" pos:end="503:30"><name pos:start="503:21" pos:end="503:27">aml_int</name><argument_list pos:start="503:28" pos:end="503:30">(<argument pos:start="503:29" pos:end="503:29"><expr pos:start="503:29" pos:end="503:29"><literal type="number" pos:start="503:29" pos:end="503:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="503:34" pos:end="503:55">/* PM1a_CNT.SLP_TYP */</comment>

    <expr_stmt pos:start="505:5" pos:end="505:32"><expr pos:start="505:5" pos:end="505:31"><call pos:start="505:5" pos:end="505:31"><name pos:start="505:5" pos:end="505:14">aml_append</name><argument_list pos:start="505:15" pos:end="505:31">(<argument pos:start="505:16" pos:end="505:18"><expr pos:start="505:16" pos:end="505:18"><name pos:start="505:16" pos:end="505:18">pkg</name></expr></argument>, <argument pos:start="505:21" pos:end="505:30"><expr pos:start="505:21" pos:end="505:30"><call pos:start="505:21" pos:end="505:30"><name pos:start="505:21" pos:end="505:27">aml_int</name><argument_list pos:start="505:28" pos:end="505:30">(<argument pos:start="505:29" pos:end="505:29"><expr pos:start="505:29" pos:end="505:29"><literal type="number" pos:start="505:29" pos:end="505:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="505:34" pos:end="505:65">/* PM1b_CNT.SLP_TYP not impl. */</comment>

    <expr_stmt pos:start="507:5" pos:end="507:32"><expr pos:start="507:5" pos:end="507:31"><call pos:start="507:5" pos:end="507:31"><name pos:start="507:5" pos:end="507:14">aml_append</name><argument_list pos:start="507:15" pos:end="507:31">(<argument pos:start="507:16" pos:end="507:18"><expr pos:start="507:16" pos:end="507:18"><name pos:start="507:16" pos:end="507:18">pkg</name></expr></argument>, <argument pos:start="507:21" pos:end="507:30"><expr pos:start="507:21" pos:end="507:30"><call pos:start="507:21" pos:end="507:30"><name pos:start="507:21" pos:end="507:27">aml_int</name><argument_list pos:start="507:28" pos:end="507:30">(<argument pos:start="507:29" pos:end="507:29"><expr pos:start="507:29" pos:end="507:29"><literal type="number" pos:start="507:29" pos:end="507:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="507:34" pos:end="507:47">/* reserved */</comment>

    <expr_stmt pos:start="509:5" pos:end="509:32"><expr pos:start="509:5" pos:end="509:31"><call pos:start="509:5" pos:end="509:31"><name pos:start="509:5" pos:end="509:14">aml_append</name><argument_list pos:start="509:15" pos:end="509:31">(<argument pos:start="509:16" pos:end="509:18"><expr pos:start="509:16" pos:end="509:18"><name pos:start="509:16" pos:end="509:18">pkg</name></expr></argument>, <argument pos:start="509:21" pos:end="509:30"><expr pos:start="509:21" pos:end="509:30"><call pos:start="509:21" pos:end="509:30"><name pos:start="509:21" pos:end="509:27">aml_int</name><argument_list pos:start="509:28" pos:end="509:30">(<argument pos:start="509:29" pos:end="509:29"><expr pos:start="509:29" pos:end="509:29"><literal type="number" pos:start="509:29" pos:end="509:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="509:34" pos:end="509:47">/* reserved */</comment>

    <expr_stmt pos:start="511:5" pos:end="511:49"><expr pos:start="511:5" pos:end="511:48"><call pos:start="511:5" pos:end="511:48"><name pos:start="511:5" pos:end="511:14">aml_append</name><argument_list pos:start="511:15" pos:end="511:48">(<argument pos:start="511:16" pos:end="511:20"><expr pos:start="511:16" pos:end="511:20"><name pos:start="511:16" pos:end="511:20">scope</name></expr></argument>, <argument pos:start="511:23" pos:end="511:47"><expr pos:start="511:23" pos:end="511:47"><call pos:start="511:23" pos:end="511:47"><name pos:start="511:23" pos:end="511:35">aml_name_decl</name><argument_list pos:start="511:36" pos:end="511:47">(<argument pos:start="511:37" pos:end="511:41"><expr pos:start="511:37" pos:end="511:41"><literal type="string" pos:start="511:37" pos:end="511:41">"_S5"</literal></expr></argument>, <argument pos:start="511:44" pos:end="511:46"><expr pos:start="511:44" pos:end="511:46"><name pos:start="511:44" pos:end="511:46">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:28"><expr pos:start="513:5" pos:end="513:27"><call pos:start="513:5" pos:end="513:27"><name pos:start="513:5" pos:end="513:14">aml_append</name><argument_list pos:start="513:15" pos:end="513:27">(<argument pos:start="513:16" pos:end="513:19"><expr pos:start="513:16" pos:end="513:19"><name pos:start="513:16" pos:end="513:19">dsdt</name></expr></argument>, <argument pos:start="513:22" pos:end="513:26"><expr pos:start="513:22" pos:end="513:26"><name pos:start="513:22" pos:end="513:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="517:5" pos:end="517:45">/* create fw_cfg node, unconditionally */</comment>

    <block pos:start="519:5" pos:end="571:5">{<block_content pos:start="529:9" pos:end="569:32">

        <comment type="block" pos:start="521:9" pos:end="527:71">/* when using port i/o, the 8-bit data register *always* overlaps

         * with half of the 16-bit control register. Hence, the total size

         * of the i/o region used is FW_CFG_CTL_SIZE; when using DMA, the

         * DMA control register is located at FW_CFG_DMA_IO_BASE + 4 */</comment>

        <decl_stmt pos:start="529:9" pos:end="535:42"><decl pos:start="529:9" pos:end="535:41"><type pos:start="529:9" pos:end="529:15"><name pos:start="529:9" pos:end="529:15">uint8_t</name></type> <name pos:start="529:17" pos:end="529:23">io_size</name> <init pos:start="529:25" pos:end="535:41">= <expr pos:start="529:27" pos:end="535:41"><ternary pos:start="529:27" pos:end="535:41"><condition pos:start="529:27" pos:end="531:73"><expr pos:start="529:27" pos:end="531:71"><call pos:start="529:27" pos:end="531:71"><name pos:start="529:27" pos:end="529:50">object_property_get_bool</name><argument_list pos:start="529:51" pos:end="531:71">(<argument pos:start="529:52" pos:end="529:71"><expr pos:start="529:52" pos:end="529:71"><call pos:start="529:52" pos:end="529:71"><name pos:start="529:52" pos:end="529:57">OBJECT</name><argument_list pos:start="529:58" pos:end="529:71">(<argument pos:start="529:59" pos:end="529:70"><expr pos:start="529:59" pos:end="529:70"><name pos:start="529:59" pos:end="529:70"><name pos:start="529:59" pos:end="529:62">pcms</name><operator pos:start="529:63" pos:end="529:64">-&gt;</operator><name pos:start="529:65" pos:end="529:70">fw_cfg</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                   <argument pos:start="531:52" pos:end="531:64"><expr pos:start="531:52" pos:end="531:64"><literal type="string" pos:start="531:52" pos:end="531:64">"dma_enabled"</literal></expr></argument>, <argument pos:start="531:67" pos:end="531:70"><expr pos:start="531:67" pos:end="531:70"><name pos:start="531:67" pos:end="531:70">NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="533:27" pos:end="533:75">

                          <expr pos:start="533:27" pos:end="533:75"><call pos:start="533:27" pos:end="533:54"><name pos:start="533:27" pos:end="533:34">ROUND_UP</name><argument_list pos:start="533:35" pos:end="533:54">(<argument pos:start="533:36" pos:end="533:50"><expr pos:start="533:36" pos:end="533:50"><name pos:start="533:36" pos:end="533:50">FW_CFG_CTL_SIZE</name></expr></argument>, <argument pos:start="533:53" pos:end="533:53"><expr pos:start="533:53" pos:end="533:53"><literal type="number" pos:start="533:53" pos:end="533:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="533:56" pos:end="533:56">+</operator> <sizeof pos:start="533:58" pos:end="533:75">sizeof<argument_list pos:start="533:64" pos:end="533:75">(<argument pos:start="533:65" pos:end="533:74"><expr pos:start="533:65" pos:end="533:74"><name pos:start="533:65" pos:end="533:74">dma_addr_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="533:77" pos:end="535:41">:

                          <expr pos:start="535:27" pos:end="535:41"><name pos:start="535:27" pos:end="535:41">FW_CFG_CTL_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="539:9" pos:end="539:40"><expr pos:start="539:9" pos:end="539:39"><name pos:start="539:9" pos:end="539:13">scope</name> <operator pos:start="539:15" pos:end="539:15">=</operator> <call pos:start="539:17" pos:end="539:39"><name pos:start="539:17" pos:end="539:25">aml_scope</name><argument_list pos:start="539:26" pos:end="539:39">(<argument pos:start="539:27" pos:end="539:38"><expr pos:start="539:27" pos:end="539:38"><literal type="string" pos:start="539:27" pos:end="539:38">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="541:9" pos:end="541:33"><expr pos:start="541:9" pos:end="541:32"><name pos:start="541:9" pos:end="541:11">dev</name> <operator pos:start="541:13" pos:end="541:13">=</operator> <call pos:start="541:15" pos:end="541:32"><name pos:start="541:15" pos:end="541:24">aml_device</name><argument_list pos:start="541:25" pos:end="541:32">(<argument pos:start="541:26" pos:end="541:31"><expr pos:start="541:26" pos:end="541:31"><literal type="string" pos:start="541:26" pos:end="541:31">"FWCF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="545:9" pos:end="545:71"><expr pos:start="545:9" pos:end="545:70"><call pos:start="545:9" pos:end="545:70"><name pos:start="545:9" pos:end="545:18">aml_append</name><argument_list pos:start="545:19" pos:end="545:70">(<argument pos:start="545:20" pos:end="545:22"><expr pos:start="545:20" pos:end="545:22"><name pos:start="545:20" pos:end="545:22">dev</name></expr></argument>, <argument pos:start="545:25" pos:end="545:69"><expr pos:start="545:25" pos:end="545:69"><call pos:start="545:25" pos:end="545:69"><name pos:start="545:25" pos:end="545:37">aml_name_decl</name><argument_list pos:start="545:38" pos:end="545:69">(<argument pos:start="545:39" pos:end="545:44"><expr pos:start="545:39" pos:end="545:44"><literal type="string" pos:start="545:39" pos:end="545:44">"_HID"</literal></expr></argument>, <argument pos:start="545:47" pos:end="545:68"><expr pos:start="545:47" pos:end="545:68"><call pos:start="545:47" pos:end="545:68"><name pos:start="545:47" pos:end="545:56">aml_string</name><argument_list pos:start="545:57" pos:end="545:68">(<argument pos:start="545:58" pos:end="545:67"><expr pos:start="545:58" pos:end="545:67"><literal type="string" pos:start="545:58" pos:end="545:67">"QEMU0002"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="549:9" pos:end="549:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="551:9" pos:end="551:61"><expr pos:start="551:9" pos:end="551:60"><call pos:start="551:9" pos:end="551:60"><name pos:start="551:9" pos:end="551:18">aml_append</name><argument_list pos:start="551:19" pos:end="551:60">(<argument pos:start="551:20" pos:end="551:22"><expr pos:start="551:20" pos:end="551:22"><name pos:start="551:20" pos:end="551:22">dev</name></expr></argument>, <argument pos:start="551:25" pos:end="551:59"><expr pos:start="551:25" pos:end="551:59"><call pos:start="551:25" pos:end="551:59"><name pos:start="551:25" pos:end="551:37">aml_name_decl</name><argument_list pos:start="551:38" pos:end="551:59">(<argument pos:start="551:39" pos:end="551:44"><expr pos:start="551:39" pos:end="551:44"><literal type="string" pos:start="551:39" pos:end="551:44">"_STA"</literal></expr></argument>, <argument pos:start="551:47" pos:end="551:58"><expr pos:start="551:47" pos:end="551:58"><call pos:start="551:47" pos:end="551:58"><name pos:start="551:47" pos:end="551:53">aml_int</name><argument_list pos:start="551:54" pos:end="551:58">(<argument pos:start="551:55" pos:end="551:57"><expr pos:start="551:55" pos:end="551:57"><literal type="number" pos:start="551:55" pos:end="551:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="555:9" pos:end="555:38"><expr pos:start="555:9" pos:end="555:37"><name pos:start="555:9" pos:end="555:11">crs</name> <operator pos:start="555:13" pos:end="555:13">=</operator> <call pos:start="555:15" pos:end="555:37"><name pos:start="555:15" pos:end="555:35">aml_resource_template</name><argument_list pos:start="555:36" pos:end="555:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="557:9" pos:end="561:10"><expr pos:start="557:9" pos:end="561:9"><call pos:start="557:9" pos:end="561:9"><name pos:start="557:9" pos:end="557:18">aml_append</name><argument_list pos:start="557:19" pos:end="561:9">(<argument pos:start="557:20" pos:end="557:22"><expr pos:start="557:20" pos:end="557:22"><name pos:start="557:20" pos:end="557:22">crs</name></expr></argument>,

            <argument pos:start="559:13" pos:end="559:79"><expr pos:start="559:13" pos:end="559:79"><call pos:start="559:13" pos:end="559:79"><name pos:start="559:13" pos:end="559:18">aml_io</name><argument_list pos:start="559:19" pos:end="559:79">(<argument pos:start="559:20" pos:end="559:31"><expr pos:start="559:20" pos:end="559:31"><name pos:start="559:20" pos:end="559:31">AML_DECODE16</name></expr></argument>, <argument pos:start="559:34" pos:end="559:47"><expr pos:start="559:34" pos:end="559:47"><name pos:start="559:34" pos:end="559:47">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="559:50" pos:end="559:63"><expr pos:start="559:50" pos:end="559:63"><name pos:start="559:50" pos:end="559:63">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="559:66" pos:end="559:69"><expr pos:start="559:66" pos:end="559:69"><literal type="number" pos:start="559:66" pos:end="559:69">0x01</literal></expr></argument>, <argument pos:start="559:72" pos:end="559:78"><expr pos:start="559:72" pos:end="559:78"><name pos:start="559:72" pos:end="559:78">io_size</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="563:9" pos:end="563:52"><expr pos:start="563:9" pos:end="563:51"><call pos:start="563:9" pos:end="563:51"><name pos:start="563:9" pos:end="563:18">aml_append</name><argument_list pos:start="563:19" pos:end="563:51">(<argument pos:start="563:20" pos:end="563:22"><expr pos:start="563:20" pos:end="563:22"><name pos:start="563:20" pos:end="563:22">dev</name></expr></argument>, <argument pos:start="563:25" pos:end="563:50"><expr pos:start="563:25" pos:end="563:50"><call pos:start="563:25" pos:end="563:50"><name pos:start="563:25" pos:end="563:37">aml_name_decl</name><argument_list pos:start="563:38" pos:end="563:50">(<argument pos:start="563:39" pos:end="563:44"><expr pos:start="563:39" pos:end="563:44"><literal type="string" pos:start="563:39" pos:end="563:44">"_CRS"</literal></expr></argument>, <argument pos:start="563:47" pos:end="563:49"><expr pos:start="563:47" pos:end="563:49"><name pos:start="563:47" pos:end="563:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="567:9" pos:end="567:31"><expr pos:start="567:9" pos:end="567:30"><call pos:start="567:9" pos:end="567:30"><name pos:start="567:9" pos:end="567:18">aml_append</name><argument_list pos:start="567:19" pos:end="567:30">(<argument pos:start="567:20" pos:end="567:24"><expr pos:start="567:20" pos:end="567:24"><name pos:start="567:20" pos:end="567:24">scope</name></expr></argument>, <argument pos:start="567:27" pos:end="567:29"><expr pos:start="567:27" pos:end="567:29"><name pos:start="567:27" pos:end="567:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="569:9" pos:end="569:32"><expr pos:start="569:9" pos:end="569:31"><call pos:start="569:9" pos:end="569:31"><name pos:start="569:9" pos:end="569:18">aml_append</name><argument_list pos:start="569:19" pos:end="569:31">(<argument pos:start="569:20" pos:end="569:23"><expr pos:start="569:20" pos:end="569:23"><name pos:start="569:20" pos:end="569:23">dsdt</name></expr></argument>, <argument pos:start="569:26" pos:end="569:30"><expr pos:start="569:26" pos:end="569:30"><name pos:start="569:26" pos:end="569:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="575:5" pos:end="611:5"><if pos:start="575:5" pos:end="611:5">if <condition pos:start="575:8" pos:end="575:31">(<expr pos:start="575:9" pos:end="575:30"><name pos:start="575:9" pos:end="575:30"><name pos:start="575:9" pos:end="575:12">misc</name><operator pos:start="575:13" pos:end="575:14">-&gt;</operator><name pos:start="575:15" pos:end="575:30">applesmc_io_base</name></name></expr>)</condition> <block pos:start="575:33" pos:end="611:5">{<block_content pos:start="577:9" pos:end="609:32">

        <expr_stmt pos:start="577:9" pos:end="577:44"><expr pos:start="577:9" pos:end="577:43"><name pos:start="577:9" pos:end="577:13">scope</name> <operator pos:start="577:15" pos:end="577:15">=</operator> <call pos:start="577:17" pos:end="577:43"><name pos:start="577:17" pos:end="577:25">aml_scope</name><argument_list pos:start="577:26" pos:end="577:43">(<argument pos:start="577:27" pos:end="577:42"><expr pos:start="577:27" pos:end="577:42"><literal type="string" pos:start="577:27" pos:end="577:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="579:9" pos:end="579:32"><expr pos:start="579:9" pos:end="579:31"><name pos:start="579:9" pos:end="579:11">dev</name> <operator pos:start="579:13" pos:end="579:13">=</operator> <call pos:start="579:15" pos:end="579:31"><name pos:start="579:15" pos:end="579:24">aml_device</name><argument_list pos:start="579:25" pos:end="579:31">(<argument pos:start="579:26" pos:end="579:30"><expr pos:start="579:26" pos:end="579:30"><literal type="string" pos:start="579:26" pos:end="579:30">"SMC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="583:9" pos:end="583:70"><expr pos:start="583:9" pos:end="583:69"><call pos:start="583:9" pos:end="583:69"><name pos:start="583:9" pos:end="583:18">aml_append</name><argument_list pos:start="583:19" pos:end="583:69">(<argument pos:start="583:20" pos:end="583:22"><expr pos:start="583:20" pos:end="583:22"><name pos:start="583:20" pos:end="583:22">dev</name></expr></argument>, <argument pos:start="583:25" pos:end="583:68"><expr pos:start="583:25" pos:end="583:68"><call pos:start="583:25" pos:end="583:68"><name pos:start="583:25" pos:end="583:37">aml_name_decl</name><argument_list pos:start="583:38" pos:end="583:68">(<argument pos:start="583:39" pos:end="583:44"><expr pos:start="583:39" pos:end="583:44"><literal type="string" pos:start="583:39" pos:end="583:44">"_HID"</literal></expr></argument>, <argument pos:start="583:47" pos:end="583:67"><expr pos:start="583:47" pos:end="583:67"><call pos:start="583:47" pos:end="583:67"><name pos:start="583:47" pos:end="583:56">aml_eisaid</name><argument_list pos:start="583:57" pos:end="583:67">(<argument pos:start="583:58" pos:end="583:66"><expr pos:start="583:58" pos:end="583:66"><literal type="string" pos:start="583:58" pos:end="583:66">"APP0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="585:9" pos:end="585:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="587:9" pos:end="587:61"><expr pos:start="587:9" pos:end="587:60"><call pos:start="587:9" pos:end="587:60"><name pos:start="587:9" pos:end="587:18">aml_append</name><argument_list pos:start="587:19" pos:end="587:60">(<argument pos:start="587:20" pos:end="587:22"><expr pos:start="587:20" pos:end="587:22"><name pos:start="587:20" pos:end="587:22">dev</name></expr></argument>, <argument pos:start="587:25" pos:end="587:59"><expr pos:start="587:25" pos:end="587:59"><call pos:start="587:25" pos:end="587:59"><name pos:start="587:25" pos:end="587:37">aml_name_decl</name><argument_list pos:start="587:38" pos:end="587:59">(<argument pos:start="587:39" pos:end="587:44"><expr pos:start="587:39" pos:end="587:44"><literal type="string" pos:start="587:39" pos:end="587:44">"_STA"</literal></expr></argument>, <argument pos:start="587:47" pos:end="587:58"><expr pos:start="587:47" pos:end="587:58"><call pos:start="587:47" pos:end="587:58"><name pos:start="587:47" pos:end="587:53">aml_int</name><argument_list pos:start="587:54" pos:end="587:58">(<argument pos:start="587:55" pos:end="587:57"><expr pos:start="587:55" pos:end="587:57"><literal type="number" pos:start="587:55" pos:end="587:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="591:9" pos:end="591:38"><expr pos:start="591:9" pos:end="591:37"><name pos:start="591:9" pos:end="591:11">crs</name> <operator pos:start="591:13" pos:end="591:13">=</operator> <call pos:start="591:15" pos:end="591:37"><name pos:start="591:15" pos:end="591:35">aml_resource_template</name><argument_list pos:start="591:36" pos:end="591:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="593:9" pos:end="599:10"><expr pos:start="593:9" pos:end="599:9"><call pos:start="593:9" pos:end="599:9"><name pos:start="593:9" pos:end="593:18">aml_append</name><argument_list pos:start="593:19" pos:end="599:9">(<argument pos:start="593:20" pos:end="593:22"><expr pos:start="593:20" pos:end="593:22"><name pos:start="593:20" pos:end="593:22">crs</name></expr></argument>,

            <argument pos:start="595:13" pos:end="597:50"><expr pos:start="595:13" pos:end="597:50"><call pos:start="595:13" pos:end="597:50"><name pos:start="595:13" pos:end="595:18">aml_io</name><argument_list pos:start="595:19" pos:end="597:50">(<argument pos:start="595:20" pos:end="595:31"><expr pos:start="595:20" pos:end="595:31"><name pos:start="595:20" pos:end="595:31">AML_DECODE16</name></expr></argument>, <argument pos:start="595:34" pos:end="595:55"><expr pos:start="595:34" pos:end="595:55"><name pos:start="595:34" pos:end="595:55"><name pos:start="595:34" pos:end="595:37">misc</name><operator pos:start="595:38" pos:end="595:39">-&gt;</operator><name pos:start="595:40" pos:end="595:55">applesmc_io_base</name></name></expr></argument>, <argument pos:start="595:58" pos:end="595:79"><expr pos:start="595:58" pos:end="595:79"><name pos:start="595:58" pos:end="595:79"><name pos:start="595:58" pos:end="595:61">misc</name><operator pos:start="595:62" pos:end="595:63">-&gt;</operator><name pos:start="595:64" pos:end="595:79">applesmc_io_base</name></name></expr></argument>,

                   <argument pos:start="597:20" pos:end="597:23"><expr pos:start="597:20" pos:end="597:23"><literal type="number" pos:start="597:20" pos:end="597:23">0x01</literal></expr></argument>, <argument pos:start="597:26" pos:end="597:49"><expr pos:start="597:26" pos:end="597:49"><name pos:start="597:26" pos:end="597:49">APPLESMC_MAX_DATA_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:45"><expr pos:start="601:9" pos:end="601:44"><call pos:start="601:9" pos:end="601:44"><name pos:start="601:9" pos:end="601:18">aml_append</name><argument_list pos:start="601:19" pos:end="601:44">(<argument pos:start="601:20" pos:end="601:22"><expr pos:start="601:20" pos:end="601:22"><name pos:start="601:20" pos:end="601:22">crs</name></expr></argument>, <argument pos:start="601:25" pos:end="601:43"><expr pos:start="601:25" pos:end="601:43"><call pos:start="601:25" pos:end="601:43"><name pos:start="601:25" pos:end="601:40">aml_irq_no_flags</name><argument_list pos:start="601:41" pos:end="601:43">(<argument pos:start="601:42" pos:end="601:42"><expr pos:start="601:42" pos:end="601:42"><literal type="number" pos:start="601:42" pos:end="601:42">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="603:9" pos:end="603:52"><expr pos:start="603:9" pos:end="603:51"><call pos:start="603:9" pos:end="603:51"><name pos:start="603:9" pos:end="603:18">aml_append</name><argument_list pos:start="603:19" pos:end="603:51">(<argument pos:start="603:20" pos:end="603:22"><expr pos:start="603:20" pos:end="603:22"><name pos:start="603:20" pos:end="603:22">dev</name></expr></argument>, <argument pos:start="603:25" pos:end="603:50"><expr pos:start="603:25" pos:end="603:50"><call pos:start="603:25" pos:end="603:50"><name pos:start="603:25" pos:end="603:37">aml_name_decl</name><argument_list pos:start="603:38" pos:end="603:50">(<argument pos:start="603:39" pos:end="603:44"><expr pos:start="603:39" pos:end="603:44"><literal type="string" pos:start="603:39" pos:end="603:44">"_CRS"</literal></expr></argument>, <argument pos:start="603:47" pos:end="603:49"><expr pos:start="603:47" pos:end="603:49"><name pos:start="603:47" pos:end="603:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="607:9" pos:end="607:31"><expr pos:start="607:9" pos:end="607:30"><call pos:start="607:9" pos:end="607:30"><name pos:start="607:9" pos:end="607:18">aml_append</name><argument_list pos:start="607:19" pos:end="607:30">(<argument pos:start="607:20" pos:end="607:24"><expr pos:start="607:20" pos:end="607:24"><name pos:start="607:20" pos:end="607:24">scope</name></expr></argument>, <argument pos:start="607:27" pos:end="607:29"><expr pos:start="607:27" pos:end="607:29"><name pos:start="607:27" pos:end="607:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:32"><expr pos:start="609:9" pos:end="609:31"><call pos:start="609:9" pos:end="609:31"><name pos:start="609:9" pos:end="609:18">aml_append</name><argument_list pos:start="609:19" pos:end="609:31">(<argument pos:start="609:20" pos:end="609:23"><expr pos:start="609:20" pos:end="609:23"><name pos:start="609:20" pos:end="609:23">dsdt</name></expr></argument>, <argument pos:start="609:26" pos:end="609:30"><expr pos:start="609:26" pos:end="609:30"><name pos:start="609:26" pos:end="609:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="615:5" pos:end="679:5"><if pos:start="615:5" pos:end="679:5">if <condition pos:start="615:8" pos:end="615:27">(<expr pos:start="615:9" pos:end="615:26"><name pos:start="615:9" pos:end="615:26"><name pos:start="615:9" pos:end="615:12">misc</name><operator pos:start="615:13" pos:end="615:14">-&gt;</operator><name pos:start="615:15" pos:end="615:26">pvpanic_port</name></name></expr>)</condition> <block pos:start="615:29" pos:end="679:5">{<block_content pos:start="617:9" pos:end="677:32">

        <expr_stmt pos:start="617:9" pos:end="617:44"><expr pos:start="617:9" pos:end="617:43"><name pos:start="617:9" pos:end="617:13">scope</name> <operator pos:start="617:15" pos:end="617:15">=</operator> <call pos:start="617:17" pos:end="617:43"><name pos:start="617:17" pos:end="617:25">aml_scope</name><argument_list pos:start="617:26" pos:end="617:43">(<argument pos:start="617:27" pos:end="617:42"><expr pos:start="617:27" pos:end="617:42"><literal type="string" pos:start="617:27" pos:end="617:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="621:9" pos:end="621:33"><expr pos:start="621:9" pos:end="621:32"><name pos:start="621:9" pos:end="621:11">dev</name> <operator pos:start="621:13" pos:end="621:13">=</operator> <call pos:start="621:15" pos:end="621:32"><name pos:start="621:15" pos:end="621:24">aml_device</name><argument_list pos:start="621:25" pos:end="621:32">(<argument pos:start="621:26" pos:end="621:31"><expr pos:start="621:26" pos:end="621:31"><literal type="string" pos:start="621:26" pos:end="621:31">"PEVT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="623:9" pos:end="623:71"><expr pos:start="623:9" pos:end="623:70"><call pos:start="623:9" pos:end="623:70"><name pos:start="623:9" pos:end="623:18">aml_append</name><argument_list pos:start="623:19" pos:end="623:70">(<argument pos:start="623:20" pos:end="623:22"><expr pos:start="623:20" pos:end="623:22"><name pos:start="623:20" pos:end="623:22">dev</name></expr></argument>, <argument pos:start="623:25" pos:end="623:69"><expr pos:start="623:25" pos:end="623:69"><call pos:start="623:25" pos:end="623:69"><name pos:start="623:25" pos:end="623:37">aml_name_decl</name><argument_list pos:start="623:38" pos:end="623:69">(<argument pos:start="623:39" pos:end="623:44"><expr pos:start="623:39" pos:end="623:44"><literal type="string" pos:start="623:39" pos:end="623:44">"_HID"</literal></expr></argument>, <argument pos:start="623:47" pos:end="623:68"><expr pos:start="623:47" pos:end="623:68"><call pos:start="623:47" pos:end="623:68"><name pos:start="623:47" pos:end="623:56">aml_string</name><argument_list pos:start="623:57" pos:end="623:68">(<argument pos:start="623:58" pos:end="623:67"><expr pos:start="623:58" pos:end="623:67"><literal type="string" pos:start="623:58" pos:end="623:67">"QEMU0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="627:9" pos:end="627:38"><expr pos:start="627:9" pos:end="627:37"><name pos:start="627:9" pos:end="627:11">crs</name> <operator pos:start="627:13" pos:end="627:13">=</operator> <call pos:start="627:15" pos:end="627:37"><name pos:start="627:15" pos:end="627:35">aml_resource_template</name><argument_list pos:start="627:36" pos:end="627:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="629:9" pos:end="633:10"><expr pos:start="629:9" pos:end="633:9"><call pos:start="629:9" pos:end="633:9"><name pos:start="629:9" pos:end="629:18">aml_append</name><argument_list pos:start="629:19" pos:end="633:9">(<argument pos:start="629:20" pos:end="629:22"><expr pos:start="629:20" pos:end="629:22"><name pos:start="629:20" pos:end="629:22">crs</name></expr></argument>,

            <argument pos:start="631:13" pos:end="631:78"><expr pos:start="631:13" pos:end="631:78"><call pos:start="631:13" pos:end="631:78"><name pos:start="631:13" pos:end="631:18">aml_io</name><argument_list pos:start="631:19" pos:end="631:78">(<argument pos:start="631:20" pos:end="631:31"><expr pos:start="631:20" pos:end="631:31"><name pos:start="631:20" pos:end="631:31">AML_DECODE16</name></expr></argument>, <argument pos:start="631:34" pos:end="631:51"><expr pos:start="631:34" pos:end="631:51"><name pos:start="631:34" pos:end="631:51"><name pos:start="631:34" pos:end="631:37">misc</name><operator pos:start="631:38" pos:end="631:39">-&gt;</operator><name pos:start="631:40" pos:end="631:51">pvpanic_port</name></name></expr></argument>, <argument pos:start="631:54" pos:end="631:71"><expr pos:start="631:54" pos:end="631:71"><name pos:start="631:54" pos:end="631:71"><name pos:start="631:54" pos:end="631:57">misc</name><operator pos:start="631:58" pos:end="631:59">-&gt;</operator><name pos:start="631:60" pos:end="631:71">pvpanic_port</name></name></expr></argument>, <argument pos:start="631:74" pos:end="631:74"><expr pos:start="631:74" pos:end="631:74"><literal type="number" pos:start="631:74" pos:end="631:74">1</literal></expr></argument>, <argument pos:start="631:77" pos:end="631:77"><expr pos:start="631:77" pos:end="631:77"><literal type="number" pos:start="631:77" pos:end="631:77">1</literal></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="635:9" pos:end="635:52"><expr pos:start="635:9" pos:end="635:51"><call pos:start="635:9" pos:end="635:51"><name pos:start="635:9" pos:end="635:18">aml_append</name><argument_list pos:start="635:19" pos:end="635:51">(<argument pos:start="635:20" pos:end="635:22"><expr pos:start="635:20" pos:end="635:22"><name pos:start="635:20" pos:end="635:22">dev</name></expr></argument>, <argument pos:start="635:25" pos:end="635:50"><expr pos:start="635:25" pos:end="635:50"><call pos:start="635:25" pos:end="635:50"><name pos:start="635:25" pos:end="635:37">aml_name_decl</name><argument_list pos:start="635:38" pos:end="635:50">(<argument pos:start="635:39" pos:end="635:44"><expr pos:start="635:39" pos:end="635:44"><literal type="string" pos:start="635:39" pos:end="635:44">"_CRS"</literal></expr></argument>, <argument pos:start="635:47" pos:end="635:49"><expr pos:start="635:47" pos:end="635:49"><name pos:start="635:47" pos:end="635:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="639:9" pos:end="641:79"><expr pos:start="639:9" pos:end="641:78"><call pos:start="639:9" pos:end="641:78"><name pos:start="639:9" pos:end="639:18">aml_append</name><argument_list pos:start="639:19" pos:end="641:78">(<argument pos:start="639:20" pos:end="639:22"><expr pos:start="639:20" pos:end="639:22"><name pos:start="639:20" pos:end="639:22">dev</name></expr></argument>, <argument pos:start="639:25" pos:end="641:77"><expr pos:start="639:25" pos:end="641:77"><call pos:start="639:25" pos:end="641:77"><name pos:start="639:25" pos:end="639:44">aml_operation_region</name><argument_list pos:start="639:45" pos:end="641:77">(<argument pos:start="639:46" pos:end="639:51"><expr pos:start="639:46" pos:end="639:51"><literal type="string" pos:start="639:46" pos:end="639:51">"PEOR"</literal></expr></argument>, <argument pos:start="639:54" pos:end="639:66"><expr pos:start="639:54" pos:end="639:66"><name pos:start="639:54" pos:end="639:66">AML_SYSTEM_IO</name></expr></argument>,

                                              <argument pos:start="641:47" pos:end="641:73"><expr pos:start="641:47" pos:end="641:73"><call pos:start="641:47" pos:end="641:73"><name pos:start="641:47" pos:end="641:53">aml_int</name><argument_list pos:start="641:54" pos:end="641:73">(<argument pos:start="641:55" pos:end="641:72"><expr pos:start="641:55" pos:end="641:72"><name pos:start="641:55" pos:end="641:72"><name pos:start="641:55" pos:end="641:58">misc</name><operator pos:start="641:59" pos:end="641:60">-&gt;</operator><name pos:start="641:61" pos:end="641:72">pvpanic_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="641:76" pos:end="641:76"><expr pos:start="641:76" pos:end="641:76"><literal type="number" pos:start="641:76" pos:end="641:76">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="643:9" pos:end="643:74"><expr pos:start="643:9" pos:end="643:73"><name pos:start="643:9" pos:end="643:13">field</name> <operator pos:start="643:15" pos:end="643:15">=</operator> <call pos:start="643:17" pos:end="643:73"><name pos:start="643:17" pos:end="643:25">aml_field</name><argument_list pos:start="643:26" pos:end="643:73">(<argument pos:start="643:27" pos:end="643:32"><expr pos:start="643:27" pos:end="643:32"><literal type="string" pos:start="643:27" pos:end="643:32">"PEOR"</literal></expr></argument>, <argument pos:start="643:35" pos:end="643:46"><expr pos:start="643:35" pos:end="643:46"><name pos:start="643:35" pos:end="643:46">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="643:49" pos:end="643:58"><expr pos:start="643:49" pos:end="643:58"><name pos:start="643:49" pos:end="643:58">AML_NOLOCK</name></expr></argument>, <argument pos:start="643:61" pos:end="643:72"><expr pos:start="643:61" pos:end="643:72"><name pos:start="643:61" pos:end="643:72">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="645:9" pos:end="645:54"><expr pos:start="645:9" pos:end="645:53"><call pos:start="645:9" pos:end="645:53"><name pos:start="645:9" pos:end="645:18">aml_append</name><argument_list pos:start="645:19" pos:end="645:53">(<argument pos:start="645:20" pos:end="645:24"><expr pos:start="645:20" pos:end="645:24"><name pos:start="645:20" pos:end="645:24">field</name></expr></argument>, <argument pos:start="645:27" pos:end="645:52"><expr pos:start="645:27" pos:end="645:52"><call pos:start="645:27" pos:end="645:52"><name pos:start="645:27" pos:end="645:41">aml_named_field</name><argument_list pos:start="645:42" pos:end="645:52">(<argument pos:start="645:43" pos:end="645:48"><expr pos:start="645:43" pos:end="645:48"><literal type="string" pos:start="645:43" pos:end="645:48">"PEPT"</literal></expr></argument>, <argument pos:start="645:51" pos:end="645:51"><expr pos:start="645:51" pos:end="645:51"><literal type="number" pos:start="645:51" pos:end="645:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="647:9" pos:end="647:31"><expr pos:start="647:9" pos:end="647:30"><call pos:start="647:9" pos:end="647:30"><name pos:start="647:9" pos:end="647:18">aml_append</name><argument_list pos:start="647:19" pos:end="647:30">(<argument pos:start="647:20" pos:end="647:22"><expr pos:start="647:20" pos:end="647:22"><name pos:start="647:20" pos:end="647:22">dev</name></expr></argument>, <argument pos:start="647:25" pos:end="647:29"><expr pos:start="647:25" pos:end="647:29"><name pos:start="647:25" pos:end="647:29">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="651:9" pos:end="651:64">/* device present, functioning, decoding, shown in UI */</comment>

        <expr_stmt pos:start="653:9" pos:end="653:61"><expr pos:start="653:9" pos:end="653:60"><call pos:start="653:9" pos:end="653:60"><name pos:start="653:9" pos:end="653:18">aml_append</name><argument_list pos:start="653:19" pos:end="653:60">(<argument pos:start="653:20" pos:end="653:22"><expr pos:start="653:20" pos:end="653:22"><name pos:start="653:20" pos:end="653:22">dev</name></expr></argument>, <argument pos:start="653:25" pos:end="653:59"><expr pos:start="653:25" pos:end="653:59"><call pos:start="653:25" pos:end="653:59"><name pos:start="653:25" pos:end="653:37">aml_name_decl</name><argument_list pos:start="653:38" pos:end="653:59">(<argument pos:start="653:39" pos:end="653:44"><expr pos:start="653:39" pos:end="653:44"><literal type="string" pos:start="653:39" pos:end="653:44">"_STA"</literal></expr></argument>, <argument pos:start="653:47" pos:end="653:58"><expr pos:start="653:47" pos:end="653:58"><call pos:start="653:47" pos:end="653:58"><name pos:start="653:47" pos:end="653:53">aml_int</name><argument_list pos:start="653:54" pos:end="653:58">(<argument pos:start="653:55" pos:end="653:57"><expr pos:start="653:55" pos:end="653:57"><literal type="number" pos:start="653:55" pos:end="653:57">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="657:9" pos:end="657:58"><expr pos:start="657:9" pos:end="657:57"><name pos:start="657:9" pos:end="657:14">method</name> <operator pos:start="657:16" pos:end="657:16">=</operator> <call pos:start="657:18" pos:end="657:57"><name pos:start="657:18" pos:end="657:27">aml_method</name><argument_list pos:start="657:28" pos:end="657:57">(<argument pos:start="657:29" pos:end="657:34"><expr pos:start="657:29" pos:end="657:34"><literal type="string" pos:start="657:29" pos:end="657:34">"RDPT"</literal></expr></argument>, <argument pos:start="657:37" pos:end="657:37"><expr pos:start="657:37" pos:end="657:37"><literal type="number" pos:start="657:37" pos:end="657:37">0</literal></expr></argument>, <argument pos:start="657:40" pos:end="657:56"><expr pos:start="657:40" pos:end="657:56"><name pos:start="657:40" pos:end="657:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="659:9" pos:end="659:70"><expr pos:start="659:9" pos:end="659:69"><call pos:start="659:9" pos:end="659:69"><name pos:start="659:9" pos:end="659:18">aml_append</name><argument_list pos:start="659:19" pos:end="659:69">(<argument pos:start="659:20" pos:end="659:25"><expr pos:start="659:20" pos:end="659:25"><name pos:start="659:20" pos:end="659:25">method</name></expr></argument>, <argument pos:start="659:28" pos:end="659:68"><expr pos:start="659:28" pos:end="659:68"><call pos:start="659:28" pos:end="659:68"><name pos:start="659:28" pos:end="659:36">aml_store</name><argument_list pos:start="659:37" pos:end="659:68">(<argument pos:start="659:38" pos:end="659:53"><expr pos:start="659:38" pos:end="659:53"><call pos:start="659:38" pos:end="659:53"><name pos:start="659:38" pos:end="659:45">aml_name</name><argument_list pos:start="659:46" pos:end="659:53">(<argument pos:start="659:47" pos:end="659:52"><expr pos:start="659:47" pos:end="659:52"><literal type="string" pos:start="659:47" pos:end="659:52">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="659:56" pos:end="659:67"><expr pos:start="659:56" pos:end="659:67"><call pos:start="659:56" pos:end="659:67"><name pos:start="659:56" pos:end="659:64">aml_local</name><argument_list pos:start="659:65" pos:end="659:67">(<argument pos:start="659:66" pos:end="659:66"><expr pos:start="659:66" pos:end="659:66"><literal type="number" pos:start="659:66" pos:end="659:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="661:9" pos:end="661:53"><expr pos:start="661:9" pos:end="661:52"><call pos:start="661:9" pos:end="661:52"><name pos:start="661:9" pos:end="661:18">aml_append</name><argument_list pos:start="661:19" pos:end="661:52">(<argument pos:start="661:20" pos:end="661:25"><expr pos:start="661:20" pos:end="661:25"><name pos:start="661:20" pos:end="661:25">method</name></expr></argument>, <argument pos:start="661:28" pos:end="661:51"><expr pos:start="661:28" pos:end="661:51"><call pos:start="661:28" pos:end="661:51"><name pos:start="661:28" pos:end="661:37">aml_return</name><argument_list pos:start="661:38" pos:end="661:51">(<argument pos:start="661:39" pos:end="661:50"><expr pos:start="661:39" pos:end="661:50"><call pos:start="661:39" pos:end="661:50"><name pos:start="661:39" pos:end="661:47">aml_local</name><argument_list pos:start="661:48" pos:end="661:50">(<argument pos:start="661:49" pos:end="661:49"><expr pos:start="661:49" pos:end="661:49"><literal type="number" pos:start="661:49" pos:end="661:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="663:9" pos:end="663:32"><expr pos:start="663:9" pos:end="663:31"><call pos:start="663:9" pos:end="663:31"><name pos:start="663:9" pos:end="663:18">aml_append</name><argument_list pos:start="663:19" pos:end="663:31">(<argument pos:start="663:20" pos:end="663:22"><expr pos:start="663:20" pos:end="663:22"><name pos:start="663:20" pos:end="663:22">dev</name></expr></argument>, <argument pos:start="663:25" pos:end="663:30"><expr pos:start="663:25" pos:end="663:30"><name pos:start="663:25" pos:end="663:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="667:9" pos:end="667:58"><expr pos:start="667:9" pos:end="667:57"><name pos:start="667:9" pos:end="667:14">method</name> <operator pos:start="667:16" pos:end="667:16">=</operator> <call pos:start="667:18" pos:end="667:57"><name pos:start="667:18" pos:end="667:27">aml_method</name><argument_list pos:start="667:28" pos:end="667:57">(<argument pos:start="667:29" pos:end="667:34"><expr pos:start="667:29" pos:end="667:34"><literal type="string" pos:start="667:29" pos:end="667:34">"WRPT"</literal></expr></argument>, <argument pos:start="667:37" pos:end="667:37"><expr pos:start="667:37" pos:end="667:37"><literal type="number" pos:start="667:37" pos:end="667:37">1</literal></expr></argument>, <argument pos:start="667:40" pos:end="667:56"><expr pos:start="667:40" pos:end="667:56"><name pos:start="667:40" pos:end="667:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="669:9" pos:end="669:68"><expr pos:start="669:9" pos:end="669:67"><call pos:start="669:9" pos:end="669:67"><name pos:start="669:9" pos:end="669:18">aml_append</name><argument_list pos:start="669:19" pos:end="669:67">(<argument pos:start="669:20" pos:end="669:25"><expr pos:start="669:20" pos:end="669:25"><name pos:start="669:20" pos:end="669:25">method</name></expr></argument>, <argument pos:start="669:28" pos:end="669:66"><expr pos:start="669:28" pos:end="669:66"><call pos:start="669:28" pos:end="669:66"><name pos:start="669:28" pos:end="669:36">aml_store</name><argument_list pos:start="669:37" pos:end="669:66">(<argument pos:start="669:38" pos:end="669:47"><expr pos:start="669:38" pos:end="669:47"><call pos:start="669:38" pos:end="669:47"><name pos:start="669:38" pos:end="669:44">aml_arg</name><argument_list pos:start="669:45" pos:end="669:47">(<argument pos:start="669:46" pos:end="669:46"><expr pos:start="669:46" pos:end="669:46"><literal type="number" pos:start="669:46" pos:end="669:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="669:50" pos:end="669:65"><expr pos:start="669:50" pos:end="669:65"><call pos:start="669:50" pos:end="669:65"><name pos:start="669:50" pos:end="669:57">aml_name</name><argument_list pos:start="669:58" pos:end="669:65">(<argument pos:start="669:59" pos:end="669:64"><expr pos:start="669:59" pos:end="669:64"><literal type="string" pos:start="669:59" pos:end="669:64">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="671:9" pos:end="671:32"><expr pos:start="671:9" pos:end="671:31"><call pos:start="671:9" pos:end="671:31"><name pos:start="671:9" pos:end="671:18">aml_append</name><argument_list pos:start="671:19" pos:end="671:31">(<argument pos:start="671:20" pos:end="671:22"><expr pos:start="671:20" pos:end="671:22"><name pos:start="671:20" pos:end="671:22">dev</name></expr></argument>, <argument pos:start="671:25" pos:end="671:30"><expr pos:start="671:25" pos:end="671:30"><name pos:start="671:25" pos:end="671:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="675:9" pos:end="675:31"><expr pos:start="675:9" pos:end="675:30"><call pos:start="675:9" pos:end="675:30"><name pos:start="675:9" pos:end="675:18">aml_append</name><argument_list pos:start="675:19" pos:end="675:30">(<argument pos:start="675:20" pos:end="675:24"><expr pos:start="675:20" pos:end="675:24"><name pos:start="675:20" pos:end="675:24">scope</name></expr></argument>, <argument pos:start="675:27" pos:end="675:29"><expr pos:start="675:27" pos:end="675:29"><name pos:start="675:27" pos:end="675:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="677:9" pos:end="677:32"><expr pos:start="677:9" pos:end="677:31"><call pos:start="677:9" pos:end="677:31"><name pos:start="677:9" pos:end="677:18">aml_append</name><argument_list pos:start="677:19" pos:end="677:31">(<argument pos:start="677:20" pos:end="677:23"><expr pos:start="677:20" pos:end="677:23"><name pos:start="677:20" pos:end="677:23">dsdt</name></expr></argument>, <argument pos:start="677:26" pos:end="677:30"><expr pos:start="677:26" pos:end="677:30"><name pos:start="677:26" pos:end="677:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="683:5" pos:end="683:34"><expr pos:start="683:5" pos:end="683:33"><name pos:start="683:5" pos:end="683:12">sb_scope</name> <operator pos:start="683:14" pos:end="683:14">=</operator> <call pos:start="683:16" pos:end="683:33"><name pos:start="683:16" pos:end="683:24">aml_scope</name><argument_list pos:start="683:25" pos:end="683:33">(<argument pos:start="683:26" pos:end="683:32"><expr pos:start="683:26" pos:end="683:32"><literal type="string" pos:start="683:26" pos:end="683:32">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="685:5" pos:end="757:5">{<block_content pos:start="687:9" pos:end="755:35">

        <expr_stmt pos:start="687:9" pos:end="687:55"><expr pos:start="687:9" pos:end="687:54"><call pos:start="687:9" pos:end="687:54"><name pos:start="687:9" pos:end="687:31">build_processor_devices</name><argument_list pos:start="687:32" pos:end="687:54">(<argument pos:start="687:33" pos:end="687:40"><expr pos:start="687:33" pos:end="687:40"><name pos:start="687:33" pos:end="687:40">sb_scope</name></expr></argument>, <argument pos:start="687:43" pos:end="687:49"><expr pos:start="687:43" pos:end="687:49"><name pos:start="687:43" pos:end="687:49">machine</name></expr></argument>, <argument pos:start="687:52" pos:end="687:53"><expr pos:start="687:52" pos:end="687:53"><name pos:start="687:52" pos:end="687:53">pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="691:9" pos:end="693:48"><expr pos:start="691:9" pos:end="693:47"><call pos:start="691:9" pos:end="693:47"><name pos:start="691:9" pos:end="691:28">build_memory_devices</name><argument_list pos:start="691:29" pos:end="693:47">(<argument pos:start="691:30" pos:end="691:37"><expr pos:start="691:30" pos:end="691:37"><name pos:start="691:30" pos:end="691:37">sb_scope</name></expr></argument>, <argument pos:start="691:40" pos:end="691:45"><expr pos:start="691:40" pos:end="691:45"><name pos:start="691:40" pos:end="691:45">nr_mem</name></expr></argument>, <argument pos:start="691:48" pos:end="691:65"><expr pos:start="691:48" pos:end="691:65"><name pos:start="691:48" pos:end="691:65"><name pos:start="691:48" pos:end="691:49">pm</name><operator pos:start="691:50" pos:end="691:51">-&gt;</operator><name pos:start="691:52" pos:end="691:65">mem_hp_io_base</name></name></expr></argument>,

                             <argument pos:start="693:30" pos:end="693:46"><expr pos:start="693:30" pos:end="693:46"><name pos:start="693:30" pos:end="693:46"><name pos:start="693:30" pos:end="693:31">pm</name><operator pos:start="693:32" pos:end="693:33">-&gt;</operator><name pos:start="693:34" pos:end="693:46">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <block pos:start="697:9" pos:end="753:9">{<block_content pos:start="699:13" pos:end="751:13">

            <decl_stmt pos:start="699:13" pos:end="699:29"><decl pos:start="699:13" pos:end="699:28"><type pos:start="699:13" pos:end="699:20"><name pos:start="699:13" pos:end="699:18">Object</name> <modifier pos:start="699:20" pos:end="699:20">*</modifier></type><name pos:start="699:21" pos:end="699:28">pci_host</name></decl>;</decl_stmt>

            <decl_stmt pos:start="701:13" pos:end="701:31"><decl pos:start="701:13" pos:end="701:30"><type pos:start="701:13" pos:end="701:20"><name pos:start="701:13" pos:end="701:18">PCIBus</name> <modifier pos:start="701:20" pos:end="701:20">*</modifier></type><name pos:start="701:21" pos:end="701:23">bus</name> <init pos:start="701:25" pos:end="701:30">= <expr pos:start="701:27" pos:end="701:30"><name pos:start="701:27" pos:end="701:30">NULL</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="705:13" pos:end="705:48"><expr pos:start="705:13" pos:end="705:47"><name pos:start="705:13" pos:end="705:20">pci_host</name> <operator pos:start="705:22" pos:end="705:22">=</operator> <call pos:start="705:24" pos:end="705:47"><name pos:start="705:24" pos:end="705:45">acpi_get_i386_pci_host</name><argument_list pos:start="705:46" pos:end="705:47">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="707:13" pos:end="711:13"><if pos:start="707:13" pos:end="711:13">if <condition pos:start="707:16" pos:end="707:25">(<expr pos:start="707:17" pos:end="707:24"><name pos:start="707:17" pos:end="707:24">pci_host</name></expr>)</condition> <block pos:start="707:27" pos:end="711:13">{<block_content pos:start="709:17" pos:end="709:53">

                <expr_stmt pos:start="709:17" pos:end="709:53"><expr pos:start="709:17" pos:end="709:52"><name pos:start="709:17" pos:end="709:19">bus</name> <operator pos:start="709:21" pos:end="709:21">=</operator> <call pos:start="709:23" pos:end="709:47"><name pos:start="709:23" pos:end="709:37">PCI_HOST_BRIDGE</name><argument_list pos:start="709:38" pos:end="709:47">(<argument pos:start="709:39" pos:end="709:46"><expr pos:start="709:39" pos:end="709:46"><name pos:start="709:39" pos:end="709:46">pci_host</name></expr></argument>)</argument_list></call><operator pos:start="709:48" pos:end="709:49">-&gt;</operator><name pos:start="709:50" pos:end="709:52">bus</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="715:13" pos:end="751:13"><if pos:start="715:13" pos:end="751:13">if <condition pos:start="715:16" pos:end="715:20">(<expr pos:start="715:17" pos:end="715:19"><name pos:start="715:17" pos:end="715:19">bus</name></expr>)</condition> <block pos:start="715:22" pos:end="751:13">{<block_content pos:start="717:17" pos:end="749:44">

                <decl_stmt pos:start="717:17" pos:end="717:47"><decl pos:start="717:17" pos:end="717:46"><type pos:start="717:17" pos:end="717:21"><name pos:start="717:17" pos:end="717:19">Aml</name> <modifier pos:start="717:21" pos:end="717:21">*</modifier></type><name pos:start="717:22" pos:end="717:26">scope</name> <init pos:start="717:28" pos:end="717:46">= <expr pos:start="717:30" pos:end="717:46"><call pos:start="717:30" pos:end="717:46"><name pos:start="717:30" pos:end="717:38">aml_scope</name><argument_list pos:start="717:39" pos:end="717:46">(<argument pos:start="717:40" pos:end="717:45"><expr pos:start="717:40" pos:end="717:45"><literal type="string" pos:start="717:40" pos:end="717:45">"PCI0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="719:17" pos:end="719:77">/* Scan all PCI buses. Generate tables to support hotplug. */</comment>

                <expr_stmt pos:start="721:17" pos:end="721:78"><expr pos:start="721:17" pos:end="721:77"><call pos:start="721:17" pos:end="721:77"><name pos:start="721:17" pos:end="721:44">build_append_pci_bus_devices</name><argument_list pos:start="721:45" pos:end="721:77">(<argument pos:start="721:46" pos:end="721:50"><expr pos:start="721:46" pos:end="721:50"><name pos:start="721:46" pos:end="721:50">scope</name></expr></argument>, <argument pos:start="721:53" pos:end="721:55"><expr pos:start="721:53" pos:end="721:55"><name pos:start="721:53" pos:end="721:55">bus</name></expr></argument>, <argument pos:start="721:58" pos:end="721:76"><expr pos:start="721:58" pos:end="721:76"><name pos:start="721:58" pos:end="721:76"><name pos:start="721:58" pos:end="721:59">pm</name><operator pos:start="721:60" pos:end="721:61">-&gt;</operator><name pos:start="721:62" pos:end="721:76">pcihp_bridge_en</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="725:17" pos:end="745:17"><if pos:start="725:17" pos:end="745:17">if <condition pos:start="725:20" pos:end="725:60">(<expr pos:start="725:21" pos:end="725:59"><name pos:start="725:21" pos:end="725:37"><name pos:start="725:21" pos:end="725:24">misc</name><operator pos:start="725:25" pos:end="725:26">-&gt;</operator><name pos:start="725:27" pos:end="725:37">tpm_version</name></name> <operator pos:start="725:39" pos:end="725:40">!=</operator> <name pos:start="725:42" pos:end="725:59">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="725:62" pos:end="745:17">{<block_content pos:start="727:21" pos:end="743:43">

                    <expr_stmt pos:start="727:21" pos:end="727:48"><expr pos:start="727:21" pos:end="727:47"><name pos:start="727:21" pos:end="727:23">dev</name> <operator pos:start="727:25" pos:end="727:25">=</operator> <call pos:start="727:27" pos:end="727:47"><name pos:start="727:27" pos:end="727:36">aml_device</name><argument_list pos:start="727:37" pos:end="727:47">(<argument pos:start="727:38" pos:end="727:46"><expr pos:start="727:38" pos:end="727:46"><literal type="string" pos:start="727:38" pos:end="727:46">"ISA.TPM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="729:21" pos:end="729:82"><expr pos:start="729:21" pos:end="729:81"><call pos:start="729:21" pos:end="729:81"><name pos:start="729:21" pos:end="729:30">aml_append</name><argument_list pos:start="729:31" pos:end="729:81">(<argument pos:start="729:32" pos:end="729:34"><expr pos:start="729:32" pos:end="729:34"><name pos:start="729:32" pos:end="729:34">dev</name></expr></argument>, <argument pos:start="729:37" pos:end="729:80"><expr pos:start="729:37" pos:end="729:80"><call pos:start="729:37" pos:end="729:80"><name pos:start="729:37" pos:end="729:49">aml_name_decl</name><argument_list pos:start="729:50" pos:end="729:80">(<argument pos:start="729:51" pos:end="729:56"><expr pos:start="729:51" pos:end="729:56"><literal type="string" pos:start="729:51" pos:end="729:56">"_HID"</literal></expr></argument>, <argument pos:start="729:59" pos:end="729:79"><expr pos:start="729:59" pos:end="729:79"><call pos:start="729:59" pos:end="729:79"><name pos:start="729:59" pos:end="729:68">aml_eisaid</name><argument_list pos:start="729:69" pos:end="729:79">(<argument pos:start="729:70" pos:end="729:78"><expr pos:start="729:70" pos:end="729:78"><literal type="string" pos:start="729:70" pos:end="729:78">"PNP0C31"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="731:21" pos:end="731:73"><expr pos:start="731:21" pos:end="731:72"><call pos:start="731:21" pos:end="731:72"><name pos:start="731:21" pos:end="731:30">aml_append</name><argument_list pos:start="731:31" pos:end="731:72">(<argument pos:start="731:32" pos:end="731:34"><expr pos:start="731:32" pos:end="731:34"><name pos:start="731:32" pos:end="731:34">dev</name></expr></argument>, <argument pos:start="731:37" pos:end="731:71"><expr pos:start="731:37" pos:end="731:71"><call pos:start="731:37" pos:end="731:71"><name pos:start="731:37" pos:end="731:49">aml_name_decl</name><argument_list pos:start="731:50" pos:end="731:71">(<argument pos:start="731:51" pos:end="731:56"><expr pos:start="731:51" pos:end="731:56"><literal type="string" pos:start="731:51" pos:end="731:56">"_STA"</literal></expr></argument>, <argument pos:start="731:59" pos:end="731:70"><expr pos:start="731:59" pos:end="731:70"><call pos:start="731:59" pos:end="731:70"><name pos:start="731:59" pos:end="731:65">aml_int</name><argument_list pos:start="731:66" pos:end="731:70">(<argument pos:start="731:67" pos:end="731:69"><expr pos:start="731:67" pos:end="731:69"><literal type="number" pos:start="731:67" pos:end="731:69">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="733:21" pos:end="733:50"><expr pos:start="733:21" pos:end="733:49"><name pos:start="733:21" pos:end="733:23">crs</name> <operator pos:start="733:25" pos:end="733:25">=</operator> <call pos:start="733:27" pos:end="733:49"><name pos:start="733:27" pos:end="733:47">aml_resource_template</name><argument_list pos:start="733:48" pos:end="733:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="735:21" pos:end="737:67"><expr pos:start="735:21" pos:end="737:66"><call pos:start="735:21" pos:end="737:66"><name pos:start="735:21" pos:end="735:30">aml_append</name><argument_list pos:start="735:31" pos:end="737:66">(<argument pos:start="735:32" pos:end="735:34"><expr pos:start="735:32" pos:end="735:34"><name pos:start="735:32" pos:end="735:34">crs</name></expr></argument>, <argument pos:start="735:37" pos:end="737:65"><expr pos:start="735:37" pos:end="737:65"><call pos:start="735:37" pos:end="737:65"><name pos:start="735:37" pos:end="735:54">aml_memory32_fixed</name><argument_list pos:start="735:55" pos:end="737:65">(<argument pos:start="735:56" pos:end="735:72"><expr pos:start="735:56" pos:end="735:72"><name pos:start="735:56" pos:end="735:72">TPM_TIS_ADDR_BASE</name></expr></argument>,

                               <argument pos:start="737:32" pos:end="737:48"><expr pos:start="737:32" pos:end="737:48"><name pos:start="737:32" pos:end="737:48">TPM_TIS_ADDR_SIZE</name></expr></argument>, <argument pos:start="737:51" pos:end="737:64"><expr pos:start="737:51" pos:end="737:64"><name pos:start="737:51" pos:end="737:64">AML_READ_WRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="739:21" pos:end="739:67"><expr pos:start="739:21" pos:end="739:66"><call pos:start="739:21" pos:end="739:66"><name pos:start="739:21" pos:end="739:30">aml_append</name><argument_list pos:start="739:31" pos:end="739:66">(<argument pos:start="739:32" pos:end="739:34"><expr pos:start="739:32" pos:end="739:34"><name pos:start="739:32" pos:end="739:34">crs</name></expr></argument>, <argument pos:start="739:37" pos:end="739:65"><expr pos:start="739:37" pos:end="739:65"><call pos:start="739:37" pos:end="739:65"><name pos:start="739:37" pos:end="739:52">aml_irq_no_flags</name><argument_list pos:start="739:53" pos:end="739:65">(<argument pos:start="739:54" pos:end="739:64"><expr pos:start="739:54" pos:end="739:64"><name pos:start="739:54" pos:end="739:64">TPM_TIS_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="741:21" pos:end="741:64"><expr pos:start="741:21" pos:end="741:63"><call pos:start="741:21" pos:end="741:63"><name pos:start="741:21" pos:end="741:30">aml_append</name><argument_list pos:start="741:31" pos:end="741:63">(<argument pos:start="741:32" pos:end="741:34"><expr pos:start="741:32" pos:end="741:34"><name pos:start="741:32" pos:end="741:34">dev</name></expr></argument>, <argument pos:start="741:37" pos:end="741:62"><expr pos:start="741:37" pos:end="741:62"><call pos:start="741:37" pos:end="741:62"><name pos:start="741:37" pos:end="741:49">aml_name_decl</name><argument_list pos:start="741:50" pos:end="741:62">(<argument pos:start="741:51" pos:end="741:56"><expr pos:start="741:51" pos:end="741:56"><literal type="string" pos:start="741:51" pos:end="741:56">"_CRS"</literal></expr></argument>, <argument pos:start="741:59" pos:end="741:61"><expr pos:start="741:59" pos:end="741:61"><name pos:start="741:59" pos:end="741:61">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="743:21" pos:end="743:43"><expr pos:start="743:21" pos:end="743:42"><call pos:start="743:21" pos:end="743:42"><name pos:start="743:21" pos:end="743:30">aml_append</name><argument_list pos:start="743:31" pos:end="743:42">(<argument pos:start="743:32" pos:end="743:36"><expr pos:start="743:32" pos:end="743:36"><name pos:start="743:32" pos:end="743:36">scope</name></expr></argument>, <argument pos:start="743:39" pos:end="743:41"><expr pos:start="743:39" pos:end="743:41"><name pos:start="743:39" pos:end="743:41">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="749:17" pos:end="749:44"><expr pos:start="749:17" pos:end="749:43"><call pos:start="749:17" pos:end="749:43"><name pos:start="749:17" pos:end="749:26">aml_append</name><argument_list pos:start="749:27" pos:end="749:43">(<argument pos:start="749:28" pos:end="749:35"><expr pos:start="749:28" pos:end="749:35"><name pos:start="749:28" pos:end="749:35">sb_scope</name></expr></argument>, <argument pos:start="749:38" pos:end="749:42"><expr pos:start="749:38" pos:end="749:42"><name pos:start="749:38" pos:end="749:42">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="755:9" pos:end="755:35"><expr pos:start="755:9" pos:end="755:34"><call pos:start="755:9" pos:end="755:34"><name pos:start="755:9" pos:end="755:18">aml_append</name><argument_list pos:start="755:19" pos:end="755:34">(<argument pos:start="755:20" pos:end="755:23"><expr pos:start="755:20" pos:end="755:23"><name pos:start="755:20" pos:end="755:23">dsdt</name></expr></argument>, <argument pos:start="755:26" pos:end="755:33"><expr pos:start="755:26" pos:end="755:33"><name pos:start="755:26" pos:end="755:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="761:5" pos:end="761:69">/* copy AML table into ACPI tables blob and patch header there */</comment>

    <expr_stmt pos:start="763:5" pos:end="763:69"><expr pos:start="763:5" pos:end="763:68"><call pos:start="763:5" pos:end="763:68"><name pos:start="763:5" pos:end="763:23">g_array_append_vals</name><argument_list pos:start="763:24" pos:end="763:68">(<argument pos:start="763:25" pos:end="763:34"><expr pos:start="763:25" pos:end="763:34"><name pos:start="763:25" pos:end="763:34">table_data</name></expr></argument>, <argument pos:start="763:37" pos:end="763:51"><expr pos:start="763:37" pos:end="763:51"><name pos:start="763:37" pos:end="763:51"><name pos:start="763:37" pos:end="763:40">dsdt</name><operator pos:start="763:41" pos:end="763:42">-&gt;</operator><name pos:start="763:43" pos:end="763:45">buf</name><operator pos:start="763:46" pos:end="763:47">-&gt;</operator><name pos:start="763:48" pos:end="763:51">data</name></name></expr></argument>, <argument pos:start="763:54" pos:end="763:67"><expr pos:start="763:54" pos:end="763:67"><name pos:start="763:54" pos:end="763:67"><name pos:start="763:54" pos:end="763:57">dsdt</name><operator pos:start="763:58" pos:end="763:59">-&gt;</operator><name pos:start="763:60" pos:end="763:62">buf</name><operator pos:start="763:63" pos:end="763:64">-&gt;</operator><name pos:start="763:65" pos:end="763:67">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="765:5" pos:end="769:47"><expr pos:start="765:5" pos:end="769:46"><call pos:start="765:5" pos:end="769:46"><name pos:start="765:5" pos:end="765:16">build_header</name><argument_list pos:start="765:17" pos:end="769:46">(<argument pos:start="765:18" pos:end="765:23"><expr pos:start="765:18" pos:end="765:23"><name pos:start="765:18" pos:end="765:23">linker</name></expr></argument>, <argument pos:start="765:26" pos:end="765:35"><expr pos:start="765:26" pos:end="765:35"><name pos:start="765:26" pos:end="765:35">table_data</name></expr></argument>,

        <argument pos:start="767:9" pos:end="767:69"><expr pos:start="767:9" pos:end="767:69"><operator pos:start="767:9" pos:end="767:9">(</operator><name pos:start="767:10" pos:end="767:13">void</name> <operator pos:start="767:15" pos:end="767:15">*</operator><operator pos:start="767:16" pos:end="767:16">)</operator><operator pos:start="767:17" pos:end="767:17">(</operator><name pos:start="767:18" pos:end="767:33"><name pos:start="767:18" pos:end="767:27">table_data</name><operator pos:start="767:28" pos:end="767:29">-&gt;</operator><name pos:start="767:30" pos:end="767:33">data</name></name> <operator pos:start="767:35" pos:end="767:35">+</operator> <name pos:start="767:37" pos:end="767:51"><name pos:start="767:37" pos:end="767:46">table_data</name><operator pos:start="767:47" pos:end="767:48">-&gt;</operator><name pos:start="767:49" pos:end="767:51">len</name></name> <operator pos:start="767:53" pos:end="767:53">-</operator> <name pos:start="767:55" pos:end="767:68"><name pos:start="767:55" pos:end="767:58">dsdt</name><operator pos:start="767:59" pos:end="767:60">-&gt;</operator><name pos:start="767:61" pos:end="767:63">buf</name><operator pos:start="767:64" pos:end="767:65">-&gt;</operator><name pos:start="767:66" pos:end="767:68">len</name></name><operator pos:start="767:69" pos:end="767:69">)</operator></expr></argument>,

        <argument pos:start="769:9" pos:end="769:14"><expr pos:start="769:9" pos:end="769:14"><literal type="string" pos:start="769:9" pos:end="769:14">"DSDT"</literal></expr></argument>, <argument pos:start="769:17" pos:end="769:30"><expr pos:start="769:17" pos:end="769:30"><name pos:start="769:17" pos:end="769:30"><name pos:start="769:17" pos:end="769:20">dsdt</name><operator pos:start="769:21" pos:end="769:22">-&gt;</operator><name pos:start="769:23" pos:end="769:25">buf</name><operator pos:start="769:26" pos:end="769:27">-&gt;</operator><name pos:start="769:28" pos:end="769:30">len</name></name></expr></argument>, <argument pos:start="769:33" pos:end="769:33"><expr pos:start="769:33" pos:end="769:33"><literal type="number" pos:start="769:33" pos:end="769:33">1</literal></expr></argument>, <argument pos:start="769:36" pos:end="769:39"><expr pos:start="769:36" pos:end="769:39"><name pos:start="769:36" pos:end="769:39">NULL</name></expr></argument>, <argument pos:start="769:42" pos:end="769:45"><expr pos:start="769:42" pos:end="769:45"><name pos:start="769:42" pos:end="769:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="771:5" pos:end="771:25"><expr pos:start="771:5" pos:end="771:24"><call pos:start="771:5" pos:end="771:24"><name pos:start="771:5" pos:end="771:22">free_aml_allocator</name><argument_list pos:start="771:23" pos:end="771:24">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
