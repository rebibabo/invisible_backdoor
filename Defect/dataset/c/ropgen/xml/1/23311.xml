<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23311.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">compute_default_clut</name><parameter_list pos:start="1:33" pos:end="1:68">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:47">AVSubtitleRect</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">rect</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:60"><decl pos:start="1:56" pos:end="1:60"><type pos:start="1:56" pos:end="1:60"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:60">w</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:67"><decl pos:start="1:63" pos:end="1:67"><type pos:start="1:63" pos:end="1:67"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:67">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:21"><name pos:start="5:13" pos:end="5:16">list</name><index pos:start="5:17" pos:end="5:21">[<expr pos:start="5:18" pos:end="5:20"><literal type="number" pos:start="5:18" pos:end="5:20">256</literal></expr>]</index></name> <init pos:start="5:23" pos:end="5:27">= <expr pos:start="5:25" pos:end="5:27"><block pos:start="5:25" pos:end="5:27">{<expr pos:start="5:26" pos:end="5:26"><literal type="number" pos:start="5:26" pos:end="5:26">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:25"><name pos:start="7:13" pos:end="7:20">list_inv</name><index pos:start="7:21" pos:end="7:25">[<expr pos:start="7:22" pos:end="7:24"><literal type="number" pos:start="7:22" pos:end="7:24">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:16">counttab</name><index pos:start="9:17" pos:end="9:21">[<expr pos:start="9:18" pos:end="9:20"><literal type="number" pos:start="9:18" pos:end="9:20">256</literal></expr>]</index></name> <init pos:start="9:23" pos:end="9:27">= <expr pos:start="9:25" pos:end="9:27"><block pos:start="9:25" pos:end="9:27">{<expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">count</name></decl>, <decl pos:start="11:16" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:16" pos:end="11:16">i</name></decl>, <decl pos:start="11:19" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:19">x</name></decl>, <decl pos:start="11:22" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:22">y</name></decl>;</decl_stmt>



<cpp:define pos:start="15:1" pos:end="15:57">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:9">V</name><parameter_list pos:start="15:10" pos:end="15:14">(<parameter pos:start="15:11" pos:end="15:11"><type pos:start="15:11" pos:end="15:11"><name pos:start="15:11" pos:end="15:11">x</name></type></parameter>,<parameter pos:start="15:13" pos:end="15:13"><type pos:start="15:13" pos:end="15:13"><name pos:start="15:13" pos:end="15:13">y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="15:16" pos:end="15:57">rect-&gt;data[0][(x) + (y)*rect-&gt;linesize[0]]</cpp:value></cpp:define>

    <for pos:start="17:5" pos:end="38:0">for <control pos:start="17:9" pos:end="17:25">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">y</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:20"><expr pos:start="17:17" pos:end="17:19"><name pos:start="17:17" pos:end="17:17">y</name><operator pos:start="17:18" pos:end="17:18">&lt;</operator><name pos:start="17:19" pos:end="17:19">h</name></expr>;</condition> <incr pos:start="17:22" pos:end="17:24"><expr pos:start="17:22" pos:end="17:24"><name pos:start="17:22" pos:end="17:22">y</name><operator pos:start="17:23" pos:end="17:24">++</operator></expr></incr>)</control> <block pos:start="17:27" pos:end="38:0">{<block_content pos:start="19:9" pos:end="33:9">

        <for pos:start="19:9" pos:end="33:9">for <control pos:start="19:13" pos:end="19:29">(<init pos:start="19:14" pos:end="19:19"><expr pos:start="19:14" pos:end="19:18"><name pos:start="19:14" pos:end="19:14">x</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>;</init> <condition pos:start="19:21" pos:end="19:24"><expr pos:start="19:21" pos:end="19:23"><name pos:start="19:21" pos:end="19:21">x</name><operator pos:start="19:22" pos:end="19:22">&lt;</operator><name pos:start="19:23" pos:end="19:23">w</name></expr>;</condition> <incr pos:start="19:26" pos:end="19:28"><expr pos:start="19:26" pos:end="19:28"><name pos:start="19:26" pos:end="19:26">x</name><operator pos:start="19:27" pos:end="19:28">++</operator></expr></incr>)</control> <block pos:start="19:31" pos:end="33:9">{<block_content pos:start="21:13" pos:end="31:71">

            <decl_stmt pos:start="21:13" pos:end="21:31"><decl pos:start="21:13" pos:end="21:30"><type pos:start="21:13" pos:end="21:15"><name pos:start="21:13" pos:end="21:15">int</name></type> <name pos:start="21:17" pos:end="21:17">v</name> <init pos:start="21:19" pos:end="21:30">= <expr pos:start="21:21" pos:end="21:30"><call pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:21">V</name><argument_list pos:start="21:22" pos:end="21:26">(<argument pos:start="21:23" pos:end="21:23"><expr pos:start="21:23" pos:end="21:23"><name pos:start="21:23" pos:end="21:23">x</name></expr></argument>,<argument pos:start="21:25" pos:end="21:25"><expr pos:start="21:25" pos:end="21:25"><name pos:start="21:25" pos:end="21:25">y</name></expr></argument>)</argument_list></call> <operator pos:start="21:28" pos:end="21:28">+</operator> <literal type="number" pos:start="21:30" pos:end="21:30">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="23:13" pos:end="23:46"><decl pos:start="23:13" pos:end="23:45"><type pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:18">vl</name> <init pos:start="23:20" pos:end="23:45">= <expr pos:start="23:22" pos:end="23:45"><ternary pos:start="23:22" pos:end="23:45"><condition pos:start="23:22" pos:end="23:28"><expr pos:start="23:22" pos:end="23:22"><name pos:start="23:22" pos:end="23:22">x</name></expr>     ?</condition><then pos:start="23:30" pos:end="23:41"> <expr pos:start="23:30" pos:end="23:41"><call pos:start="23:30" pos:end="23:37"><name pos:start="23:30" pos:end="23:30">V</name><argument_list pos:start="23:31" pos:end="23:37">(<argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:32">x</name><operator pos:start="23:33" pos:end="23:33">-</operator><literal type="number" pos:start="23:34" pos:end="23:34">1</literal></expr></argument>,<argument pos:start="23:36" pos:end="23:36"><expr pos:start="23:36" pos:end="23:36"><name pos:start="23:36" pos:end="23:36">y</name></expr></argument>)</argument_list></call> <operator pos:start="23:39" pos:end="23:39">+</operator> <literal type="number" pos:start="23:41" pos:end="23:41">1</literal></expr> </then><else pos:start="23:43" pos:end="23:45">: <expr pos:start="23:45" pos:end="23:45"><literal type="number" pos:start="23:45" pos:end="23:45">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="25:13" pos:end="25:46"><decl pos:start="25:13" pos:end="25:45"><type pos:start="25:13" pos:end="25:15"><name pos:start="25:13" pos:end="25:15">int</name></type> <name pos:start="25:17" pos:end="25:18">vr</name> <init pos:start="25:20" pos:end="25:45">= <expr pos:start="25:22" pos:end="25:45"><ternary pos:start="25:22" pos:end="25:45"><condition pos:start="25:22" pos:end="25:28"><expr pos:start="25:22" pos:end="25:26"><name pos:start="25:22" pos:end="25:22">x</name><operator pos:start="25:23" pos:end="25:23">+</operator><literal type="number" pos:start="25:24" pos:end="25:24">1</literal><operator pos:start="25:25" pos:end="25:25">&lt;</operator><name pos:start="25:26" pos:end="25:26">w</name></expr> ?</condition><then pos:start="25:30" pos:end="25:41"> <expr pos:start="25:30" pos:end="25:41"><call pos:start="25:30" pos:end="25:37"><name pos:start="25:30" pos:end="25:30">V</name><argument_list pos:start="25:31" pos:end="25:37">(<argument pos:start="25:32" pos:end="25:34"><expr pos:start="25:32" pos:end="25:34"><name pos:start="25:32" pos:end="25:32">x</name><operator pos:start="25:33" pos:end="25:33">+</operator><literal type="number" pos:start="25:34" pos:end="25:34">1</literal></expr></argument>,<argument pos:start="25:36" pos:end="25:36"><expr pos:start="25:36" pos:end="25:36"><name pos:start="25:36" pos:end="25:36">y</name></expr></argument>)</argument_list></call> <operator pos:start="25:39" pos:end="25:39">+</operator> <literal type="number" pos:start="25:41" pos:end="25:41">1</literal></expr> </then><else pos:start="25:43" pos:end="25:45">: <expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="27:13" pos:end="27:46"><decl pos:start="27:13" pos:end="27:45"><type pos:start="27:13" pos:end="27:15"><name pos:start="27:13" pos:end="27:15">int</name></type> <name pos:start="27:17" pos:end="27:18">vt</name> <init pos:start="27:20" pos:end="27:45">= <expr pos:start="27:22" pos:end="27:45"><ternary pos:start="27:22" pos:end="27:45"><condition pos:start="27:22" pos:end="27:28"><expr pos:start="27:22" pos:end="27:22"><name pos:start="27:22" pos:end="27:22">y</name></expr>     ?</condition><then pos:start="27:30" pos:end="27:41"> <expr pos:start="27:30" pos:end="27:41"><call pos:start="27:30" pos:end="27:37"><name pos:start="27:30" pos:end="27:30">V</name><argument_list pos:start="27:31" pos:end="27:37">(<argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">x</name></expr></argument>,<argument pos:start="27:34" pos:end="27:36"><expr pos:start="27:34" pos:end="27:36"><name pos:start="27:34" pos:end="27:34">y</name><operator pos:start="27:35" pos:end="27:35">-</operator><literal type="number" pos:start="27:36" pos:end="27:36">1</literal></expr></argument>)</argument_list></call> <operator pos:start="27:39" pos:end="27:39">+</operator> <literal type="number" pos:start="27:41" pos:end="27:41">1</literal></expr> </then><else pos:start="27:43" pos:end="27:45">: <expr pos:start="27:45" pos:end="27:45"><literal type="number" pos:start="27:45" pos:end="27:45">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="29:13" pos:end="29:46"><decl pos:start="29:13" pos:end="29:45"><type pos:start="29:13" pos:end="29:15"><name pos:start="29:13" pos:end="29:15">int</name></type> <name pos:start="29:17" pos:end="29:18">vb</name> <init pos:start="29:20" pos:end="29:45">= <expr pos:start="29:22" pos:end="29:45"><ternary pos:start="29:22" pos:end="29:45"><condition pos:start="29:22" pos:end="29:28"><expr pos:start="29:22" pos:end="29:26"><name pos:start="29:22" pos:end="29:22">y</name><operator pos:start="29:23" pos:end="29:23">+</operator><literal type="number" pos:start="29:24" pos:end="29:24">1</literal><operator pos:start="29:25" pos:end="29:25">&lt;</operator><name pos:start="29:26" pos:end="29:26">h</name></expr> ?</condition><then pos:start="29:30" pos:end="29:41"> <expr pos:start="29:30" pos:end="29:41"><call pos:start="29:30" pos:end="29:37"><name pos:start="29:30" pos:end="29:30">V</name><argument_list pos:start="29:31" pos:end="29:37">(<argument pos:start="29:32" pos:end="29:32"><expr pos:start="29:32" pos:end="29:32"><name pos:start="29:32" pos:end="29:32">x</name></expr></argument>,<argument pos:start="29:34" pos:end="29:36"><expr pos:start="29:34" pos:end="29:36"><name pos:start="29:34" pos:end="29:34">y</name><operator pos:start="29:35" pos:end="29:35">+</operator><literal type="number" pos:start="29:36" pos:end="29:36">1</literal></expr></argument>)</argument_list></call> <operator pos:start="29:39" pos:end="29:39">+</operator> <literal type="number" pos:start="29:41" pos:end="29:41">1</literal></expr> </then><else pos:start="29:43" pos:end="29:45">: <expr pos:start="29:45" pos:end="29:45"><literal type="number" pos:start="29:45" pos:end="29:45">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:71"><expr pos:start="31:13" pos:end="31:70"><name pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:20">counttab</name><index pos:start="31:21" pos:end="31:25">[<expr pos:start="31:22" pos:end="31:24"><name pos:start="31:22" pos:end="31:22">v</name><operator pos:start="31:23" pos:end="31:23">-</operator><literal type="number" pos:start="31:24" pos:end="31:24">1</literal></expr>]</index></name> <operator pos:start="31:27" pos:end="31:28">+=</operator> <operator pos:start="31:30" pos:end="31:30">!</operator><operator pos:start="31:31" pos:end="31:31">!</operator><operator pos:start="31:32" pos:end="31:32">(</operator><operator pos:start="31:33" pos:end="31:33">(</operator><name pos:start="31:34" pos:end="31:34">v</name><operator pos:start="31:35" pos:end="31:36">!=</operator><name pos:start="31:37" pos:end="31:38">vl</name><operator pos:start="31:39" pos:end="31:39">)</operator> <operator pos:start="31:41" pos:end="31:41">+</operator> <operator pos:start="31:43" pos:end="31:43">(</operator><name pos:start="31:44" pos:end="31:44">v</name><operator pos:start="31:45" pos:end="31:46">!=</operator><name pos:start="31:47" pos:end="31:48">vr</name><operator pos:start="31:49" pos:end="31:49">)</operator> <operator pos:start="31:51" pos:end="31:51">+</operator> <operator pos:start="31:53" pos:end="31:53">(</operator><name pos:start="31:54" pos:end="31:54">v</name><operator pos:start="31:55" pos:end="31:56">!=</operator><name pos:start="31:57" pos:end="31:58">vt</name><operator pos:start="31:59" pos:end="31:59">)</operator> <operator pos:start="31:61" pos:end="31:61">+</operator> <operator pos:start="31:63" pos:end="31:63">(</operator><name pos:start="31:64" pos:end="31:64">v</name><operator pos:start="31:65" pos:end="31:66">!=</operator><name pos:start="31:67" pos:end="31:68">vb</name><operator pos:start="31:69" pos:end="31:69">)</operator><operator pos:start="31:70" pos:end="31:70">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

<cpp:define pos:start="37:1" pos:end="37:65">#<cpp:directive pos:start="37:2" pos:end="37:7">define</cpp:directive> <cpp:macro pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:9">L</name><parameter_list pos:start="37:10" pos:end="37:14">(<parameter pos:start="37:11" pos:end="37:11"><type pos:start="37:11" pos:end="37:11"><name pos:start="37:11" pos:end="37:11">x</name></type></parameter>,<parameter pos:start="37:13" pos:end="37:13"><type pos:start="37:13" pos:end="37:13"><name pos:start="37:13" pos:end="37:13">y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="37:16" pos:end="37:65">list[ rect-&gt;data[0][(x) + (y)*rect-&gt;linesize[0]] ]</cpp:value></cpp:define>



    <for pos:start="41:5" pos:end="95:5">for <control pos:start="41:9" pos:end="41:27">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:21"><name pos:start="41:17" pos:end="41:17">i</name><operator pos:start="41:18" pos:end="41:18">&lt;</operator><literal type="number" pos:start="41:19" pos:end="41:21">256</literal></expr>;</condition> <incr pos:start="41:24" pos:end="41:26"><expr pos:start="41:24" pos:end="41:26"><name pos:start="41:24" pos:end="41:24">i</name><operator pos:start="41:25" pos:end="41:26">++</operator></expr></incr>)</control> <block pos:start="41:29" pos:end="95:5">{<block_content pos:start="43:9" pos:end="93:34">

        <decl_stmt pos:start="43:9" pos:end="43:32"><decl pos:start="43:9" pos:end="43:31"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:20">scoretab</name><index pos:start="43:21" pos:end="43:25">[<expr pos:start="43:22" pos:end="43:24"><literal type="number" pos:start="43:22" pos:end="43:24">256</literal></expr>]</index></name> <init pos:start="43:27" pos:end="43:31">= <expr pos:start="43:29" pos:end="43:31"><block pos:start="43:29" pos:end="43:31">{<expr pos:start="43:30" pos:end="43:30"><literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:26"><decl pos:start="45:9" pos:end="45:25"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:21">bestscore</name> <init pos:start="45:23" pos:end="45:25">= <expr pos:start="45:25" pos:end="45:25"><literal type="number" pos:start="45:25" pos:end="45:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:22"><decl pos:start="47:9" pos:end="47:21"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:17">bestv</name> <init pos:start="47:19" pos:end="47:21">= <expr pos:start="47:21" pos:end="47:21"><literal type="number" pos:start="47:21" pos:end="47:21">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="49:9" pos:end="85:9">for <control pos:start="49:13" pos:end="49:29">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">y</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:24"><expr pos:start="49:21" pos:end="49:23"><name pos:start="49:21" pos:end="49:21">y</name><operator pos:start="49:22" pos:end="49:22">&lt;</operator><name pos:start="49:23" pos:end="49:23">h</name></expr>;</condition> <incr pos:start="49:26" pos:end="49:28"><expr pos:start="49:26" pos:end="49:28"><name pos:start="49:26" pos:end="49:26">y</name><operator pos:start="49:27" pos:end="49:28">++</operator></expr></incr>)</control> <block pos:start="49:31" pos:end="85:9">{<block_content pos:start="51:13" pos:end="83:13">

            <for pos:start="51:13" pos:end="83:13">for <control pos:start="51:17" pos:end="51:33">(<init pos:start="51:18" pos:end="51:23"><expr pos:start="51:18" pos:end="51:22"><name pos:start="51:18" pos:end="51:18">x</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr>;</init> <condition pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:27"><name pos:start="51:25" pos:end="51:25">x</name><operator pos:start="51:26" pos:end="51:26">&lt;</operator><name pos:start="51:27" pos:end="51:27">w</name></expr>;</condition> <incr pos:start="51:30" pos:end="51:32"><expr pos:start="51:30" pos:end="51:32"><name pos:start="51:30" pos:end="51:30">x</name><operator pos:start="51:31" pos:end="51:32">++</operator></expr></incr>)</control> <block pos:start="51:35" pos:end="83:13">{<block_content pos:start="53:17" pos:end="81:17">

                <decl_stmt pos:start="53:17" pos:end="53:63"><decl pos:start="53:17" pos:end="53:62"><type pos:start="53:17" pos:end="53:19"><name pos:start="53:17" pos:end="53:19">int</name></type> <name pos:start="53:21" pos:end="53:21">v</name> <init pos:start="53:23" pos:end="53:62">= <expr pos:start="53:25" pos:end="53:62"><name pos:start="53:25" pos:end="53:62"><name pos:start="53:25" pos:end="53:28">rect</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:34">data</name><index pos:start="53:35" pos:end="53:37">[<expr pos:start="53:36" pos:end="53:36"><literal type="number" pos:start="53:36" pos:end="53:36">0</literal></expr>]</index><index pos:start="53:38" pos:end="53:62">[<expr pos:start="53:39" pos:end="53:61"><name pos:start="53:39" pos:end="53:39">x</name> <operator pos:start="53:41" pos:end="53:41">+</operator> <name pos:start="53:43" pos:end="53:43">y</name><operator pos:start="53:44" pos:end="53:44">*</operator><name pos:start="53:45" pos:end="53:61"><name pos:start="53:45" pos:end="53:48">rect</name><operator pos:start="53:49" pos:end="53:50">-&gt;</operator><name pos:start="53:51" pos:end="53:58">linesize</name><index pos:start="53:59" pos:end="53:61">[<expr pos:start="53:60" pos:end="53:60"><literal type="number" pos:start="53:60" pos:end="53:60">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="55:17" pos:end="55:34"><decl pos:start="55:17" pos:end="55:33"><type pos:start="55:17" pos:end="55:19"><name pos:start="55:17" pos:end="55:19">int</name></type> <name pos:start="55:21" pos:end="55:23">l_m</name> <init pos:start="55:25" pos:end="55:33">= <expr pos:start="55:27" pos:end="55:33"><name pos:start="55:27" pos:end="55:33"><name pos:start="55:27" pos:end="55:30">list</name><index pos:start="55:31" pos:end="55:33">[<expr pos:start="55:32" pos:end="55:32"><name pos:start="55:32" pos:end="55:32">v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="57:17" pos:end="57:48"><decl pos:start="57:17" pos:end="57:47"><type pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">int</name></type> <name pos:start="57:21" pos:end="57:23">l_l</name> <init pos:start="57:25" pos:end="57:47">= <expr pos:start="57:27" pos:end="57:47"><ternary pos:start="57:27" pos:end="57:47"><condition pos:start="57:27" pos:end="57:33"><expr pos:start="57:27" pos:end="57:27"><name pos:start="57:27" pos:end="57:27">x</name></expr>     ?</condition><then pos:start="57:35" pos:end="57:43"> <expr pos:start="57:35" pos:end="57:43"><call pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:35">L</name><argument_list pos:start="57:36" pos:end="57:43">(<argument pos:start="57:37" pos:end="57:39"><expr pos:start="57:37" pos:end="57:39"><name pos:start="57:37" pos:end="57:37">x</name><operator pos:start="57:38" pos:end="57:38">-</operator><literal type="number" pos:start="57:39" pos:end="57:39">1</literal></expr></argument>, <argument pos:start="57:42" pos:end="57:42"><expr pos:start="57:42" pos:end="57:42"><name pos:start="57:42" pos:end="57:42">y</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="57:45" pos:end="57:47">: <expr pos:start="57:47" pos:end="57:47"><literal type="number" pos:start="57:47" pos:end="57:47">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="59:17" pos:end="59:48"><decl pos:start="59:17" pos:end="59:47"><type pos:start="59:17" pos:end="59:19"><name pos:start="59:17" pos:end="59:19">int</name></type> <name pos:start="59:21" pos:end="59:23">l_r</name> <init pos:start="59:25" pos:end="59:47">= <expr pos:start="59:27" pos:end="59:47"><ternary pos:start="59:27" pos:end="59:47"><condition pos:start="59:27" pos:end="59:33"><expr pos:start="59:27" pos:end="59:31"><name pos:start="59:27" pos:end="59:27">x</name><operator pos:start="59:28" pos:end="59:28">+</operator><literal type="number" pos:start="59:29" pos:end="59:29">1</literal><operator pos:start="59:30" pos:end="59:30">&lt;</operator><name pos:start="59:31" pos:end="59:31">w</name></expr> ?</condition><then pos:start="59:35" pos:end="59:43"> <expr pos:start="59:35" pos:end="59:43"><call pos:start="59:35" pos:end="59:43"><name pos:start="59:35" pos:end="59:35">L</name><argument_list pos:start="59:36" pos:end="59:43">(<argument pos:start="59:37" pos:end="59:39"><expr pos:start="59:37" pos:end="59:39"><name pos:start="59:37" pos:end="59:37">x</name><operator pos:start="59:38" pos:end="59:38">+</operator><literal type="number" pos:start="59:39" pos:end="59:39">1</literal></expr></argument>, <argument pos:start="59:42" pos:end="59:42"><expr pos:start="59:42" pos:end="59:42"><name pos:start="59:42" pos:end="59:42">y</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="59:45" pos:end="59:47">: <expr pos:start="59:47" pos:end="59:47"><literal type="number" pos:start="59:47" pos:end="59:47">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="61:17" pos:end="61:48"><decl pos:start="61:17" pos:end="61:47"><type pos:start="61:17" pos:end="61:19"><name pos:start="61:17" pos:end="61:19">int</name></type> <name pos:start="61:21" pos:end="61:23">l_t</name> <init pos:start="61:25" pos:end="61:47">= <expr pos:start="61:27" pos:end="61:47"><ternary pos:start="61:27" pos:end="61:47"><condition pos:start="61:27" pos:end="61:33"><expr pos:start="61:27" pos:end="61:27"><name pos:start="61:27" pos:end="61:27">y</name></expr>     ?</condition><then pos:start="61:35" pos:end="61:43"> <expr pos:start="61:35" pos:end="61:43"><call pos:start="61:35" pos:end="61:43"><name pos:start="61:35" pos:end="61:35">L</name><argument_list pos:start="61:36" pos:end="61:43">(<argument pos:start="61:37" pos:end="61:37"><expr pos:start="61:37" pos:end="61:37"><name pos:start="61:37" pos:end="61:37">x</name></expr></argument>, <argument pos:start="61:40" pos:end="61:42"><expr pos:start="61:40" pos:end="61:42"><name pos:start="61:40" pos:end="61:40">y</name><operator pos:start="61:41" pos:end="61:41">-</operator><literal type="number" pos:start="61:42" pos:end="61:42">1</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="61:45" pos:end="61:47">: <expr pos:start="61:47" pos:end="61:47"><literal type="number" pos:start="61:47" pos:end="61:47">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="63:17" pos:end="63:48"><decl pos:start="63:17" pos:end="63:47"><type pos:start="63:17" pos:end="63:19"><name pos:start="63:17" pos:end="63:19">int</name></type> <name pos:start="63:21" pos:end="63:23">l_b</name> <init pos:start="63:25" pos:end="63:47">= <expr pos:start="63:27" pos:end="63:47"><ternary pos:start="63:27" pos:end="63:47"><condition pos:start="63:27" pos:end="63:33"><expr pos:start="63:27" pos:end="63:31"><name pos:start="63:27" pos:end="63:27">y</name><operator pos:start="63:28" pos:end="63:28">+</operator><literal type="number" pos:start="63:29" pos:end="63:29">1</literal><operator pos:start="63:30" pos:end="63:30">&lt;</operator><name pos:start="63:31" pos:end="63:31">h</name></expr> ?</condition><then pos:start="63:35" pos:end="63:43"> <expr pos:start="63:35" pos:end="63:43"><call pos:start="63:35" pos:end="63:43"><name pos:start="63:35" pos:end="63:35">L</name><argument_list pos:start="63:36" pos:end="63:43">(<argument pos:start="63:37" pos:end="63:37"><expr pos:start="63:37" pos:end="63:37"><name pos:start="63:37" pos:end="63:37">x</name></expr></argument>, <argument pos:start="63:40" pos:end="63:42"><expr pos:start="63:40" pos:end="63:42"><name pos:start="63:40" pos:end="63:40">y</name><operator pos:start="63:41" pos:end="63:41">+</operator><literal type="number" pos:start="63:42" pos:end="63:42">1</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="63:45" pos:end="63:47">: <expr pos:start="63:47" pos:end="63:47"><literal type="number" pos:start="63:47" pos:end="63:47">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="65:17" pos:end="65:26"><decl pos:start="65:17" pos:end="65:25"><type pos:start="65:17" pos:end="65:19"><name pos:start="65:17" pos:end="65:19">int</name></type> <name pos:start="65:21" pos:end="65:25">score</name></decl>;</decl_stmt>

                <if_stmt pos:start="67:17" pos:end="69:29"><if pos:start="67:17" pos:end="69:29">if <condition pos:start="67:20" pos:end="67:24">(<expr pos:start="67:21" pos:end="67:23"><name pos:start="67:21" pos:end="67:23">l_m</name></expr>)</condition><block type="pseudo" pos:start="69:21" pos:end="69:29"><block_content pos:start="69:21" pos:end="69:29">

                    <continue pos:start="69:21" pos:end="69:29">continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:53"><expr pos:start="71:17" pos:end="71:52"><name pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:24">scoretab</name><index pos:start="71:25" pos:end="71:27">[<expr pos:start="71:26" pos:end="71:26"><name pos:start="71:26" pos:end="71:26">v</name></expr>]</index></name> <operator pos:start="71:29" pos:end="71:30">+=</operator> <name pos:start="71:32" pos:end="71:34">l_l</name> <operator pos:start="71:36" pos:end="71:36">+</operator> <name pos:start="71:38" pos:end="71:40">l_r</name> <operator pos:start="71:42" pos:end="71:42">+</operator> <name pos:start="71:44" pos:end="71:46">l_t</name> <operator pos:start="71:48" pos:end="71:48">+</operator> <name pos:start="71:50" pos:end="71:52">l_b</name></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:57"><expr pos:start="73:17" pos:end="73:56"><name pos:start="73:17" pos:end="73:21">score</name> <operator pos:start="73:23" pos:end="73:23">=</operator> <literal type="number" pos:start="73:25" pos:end="73:30">1024LL</literal><operator pos:start="73:31" pos:end="73:31">*</operator><name pos:start="73:32" pos:end="73:42"><name pos:start="73:32" pos:end="73:39">scoretab</name><index pos:start="73:40" pos:end="73:42">[<expr pos:start="73:41" pos:end="73:41"><name pos:start="73:41" pos:end="73:41">v</name></expr>]</index></name> <operator pos:start="73:44" pos:end="73:44">/</operator> <name pos:start="73:46" pos:end="73:56"><name pos:start="73:46" pos:end="73:53">counttab</name><index pos:start="73:54" pos:end="73:56">[<expr pos:start="73:55" pos:end="73:55"><name pos:start="73:55" pos:end="73:55">v</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="75:17" pos:end="81:17"><if pos:start="75:17" pos:end="81:17">if <condition pos:start="75:20" pos:end="75:38">(<expr pos:start="75:21" pos:end="75:37"><name pos:start="75:21" pos:end="75:25">score</name> <operator pos:start="75:27" pos:end="75:27">&gt;</operator> <name pos:start="75:29" pos:end="75:37">bestscore</name></expr>)</condition> <block pos:start="75:40" pos:end="81:17">{<block_content pos:start="77:21" pos:end="79:30">

                    <expr_stmt pos:start="77:21" pos:end="77:38"><expr pos:start="77:21" pos:end="77:37"><name pos:start="77:21" pos:end="77:29">bestscore</name> <operator pos:start="77:31" pos:end="77:31">=</operator> <name pos:start="77:33" pos:end="77:37">score</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="79:21" pos:end="79:30"><expr pos:start="79:21" pos:end="79:29"><name pos:start="79:21" pos:end="79:25">bestv</name> <operator pos:start="79:27" pos:end="79:27">=</operator> <name pos:start="79:29" pos:end="79:29">v</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <if_stmt pos:start="87:9" pos:end="89:18"><if pos:start="87:9" pos:end="89:18">if <condition pos:start="87:12" pos:end="87:23">(<expr pos:start="87:13" pos:end="87:22"><operator pos:start="87:13" pos:end="87:13">!</operator><name pos:start="87:14" pos:end="87:22">bestscore</name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:18"><block_content pos:start="89:13" pos:end="89:18">

            <break pos:start="89:13" pos:end="89:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:30"><expr pos:start="91:9" pos:end="91:29"><name pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:12">list</name>    <index pos:start="91:17" pos:end="91:25">[ <expr pos:start="91:19" pos:end="91:23"><name pos:start="91:19" pos:end="91:23">bestv</name></expr> ]</index></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <literal type="number" pos:start="91:29" pos:end="91:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:34"><expr pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:16">list_inv</name><index pos:start="93:17" pos:end="93:25">[     <expr pos:start="93:23" pos:end="93:23"><name pos:start="93:23" pos:end="93:23">i</name></expr> ]</index></name> <operator pos:start="93:27" pos:end="93:27">=</operator> <name pos:start="93:29" pos:end="93:33">bestv</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="99:5" pos:end="99:18"><expr pos:start="99:5" pos:end="99:17"><name pos:start="99:5" pos:end="99:9">count</name> <operator pos:start="99:11" pos:end="99:11">=</operator> <name pos:start="99:13" pos:end="99:13">i</name> <operator pos:start="99:15" pos:end="99:15">-</operator> <literal type="number" pos:start="99:17" pos:end="99:17">1</literal></expr>;</expr_stmt>

    <for pos:start="101:5" pos:end="107:5">for <control pos:start="101:9" pos:end="101:24">(<init pos:start="101:10" pos:end="101:13"><expr pos:start="101:10" pos:end="101:12"><name pos:start="101:10" pos:end="101:10">i</name><operator pos:start="101:11" pos:end="101:12">--</operator></expr>;</init> <condition pos:start="101:15" pos:end="101:19"><expr pos:start="101:15" pos:end="101:18"><name pos:start="101:15" pos:end="101:15">i</name><operator pos:start="101:16" pos:end="101:17">&gt;=</operator><literal type="number" pos:start="101:18" pos:end="101:18">0</literal></expr>;</condition> <incr pos:start="101:21" pos:end="101:23"><expr pos:start="101:21" pos:end="101:23"><name pos:start="101:21" pos:end="101:21">i</name><operator pos:start="101:22" pos:end="101:23">--</operator></expr></incr>)</control> <block pos:start="101:26" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:66">

        <decl_stmt pos:start="103:9" pos:end="103:28"><decl pos:start="103:9" pos:end="103:27"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:13">v</name> <init pos:start="103:15" pos:end="103:27">= <expr pos:start="103:17" pos:end="103:27"><name pos:start="103:17" pos:end="103:17">i</name><operator pos:start="103:18" pos:end="103:18">*</operator><literal type="number" pos:start="103:19" pos:end="103:21">255</literal><operator pos:start="103:22" pos:end="103:22">/</operator><name pos:start="103:23" pos:end="103:27">count</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:66"><expr pos:start="105:9" pos:end="105:65"><call pos:start="105:9" pos:end="105:65"><name pos:start="105:9" pos:end="105:15">AV_WN32</name><argument_list pos:start="105:16" pos:end="105:65">(<argument pos:start="105:17" pos:end="105:45"><expr pos:start="105:17" pos:end="105:45"><name pos:start="105:17" pos:end="105:29"><name pos:start="105:17" pos:end="105:20">rect</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:26">data</name><index pos:start="105:27" pos:end="105:29">[<expr pos:start="105:28" pos:end="105:28"><literal type="number" pos:start="105:28" pos:end="105:28">1</literal></expr>]</index></name> <operator pos:start="105:31" pos:end="105:31">+</operator> <literal type="number" pos:start="105:33" pos:end="105:33">4</literal><operator pos:start="105:34" pos:end="105:34">*</operator><name pos:start="105:35" pos:end="105:45"><name pos:start="105:35" pos:end="105:42">list_inv</name><index pos:start="105:43" pos:end="105:45">[<expr pos:start="105:44" pos:end="105:44"><name pos:start="105:44" pos:end="105:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="105:48" pos:end="105:64"><expr pos:start="105:48" pos:end="105:64"><call pos:start="105:48" pos:end="105:64"><name pos:start="105:48" pos:end="105:51">RGBA</name><argument_list pos:start="105:52" pos:end="105:64">(<argument pos:start="105:53" pos:end="105:55"><expr pos:start="105:53" pos:end="105:55"><name pos:start="105:53" pos:end="105:53">v</name><operator pos:start="105:54" pos:end="105:54">/</operator><literal type="number" pos:start="105:55" pos:end="105:55">2</literal></expr></argument>,<argument pos:start="105:57" pos:end="105:57"><expr pos:start="105:57" pos:end="105:57"><name pos:start="105:57" pos:end="105:57">v</name></expr></argument>,<argument pos:start="105:59" pos:end="105:61"><expr pos:start="105:59" pos:end="105:61"><name pos:start="105:59" pos:end="105:59">v</name><operator pos:start="105:60" pos:end="105:60">/</operator><literal type="number" pos:start="105:61" pos:end="105:61">2</literal></expr></argument>,<argument pos:start="105:63" pos:end="105:63"><expr pos:start="105:63" pos:end="105:63"><name pos:start="105:63" pos:end="105:63">v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
