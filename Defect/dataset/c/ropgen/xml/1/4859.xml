<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4859.c" pos:tabs="8"><function pos:start="1:1" pos:end="349:21"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">load_linux</name><parameter_list pos:start="1:23" pos:end="3:42">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><name pos:start="1:24" pos:end="1:37">PCMachineState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">pcms</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:41"><decl pos:start="3:24" pos:end="3:41"><type pos:start="3:24" pos:end="3:41"><name pos:start="3:24" pos:end="3:33">FWCfgState</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:41">fw_cfg</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="349:21">{<block_content pos:start="7:5" pos:end="349:21">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:21">protocol</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">setup_size</name></decl>, <decl pos:start="9:21" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:31">kernel_size</name></decl>, <decl pos:start="9:34" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:34" pos:end="9:44">initrd_size</name> <init pos:start="9:46" pos:end="9:48">= <expr pos:start="9:48" pos:end="9:48"><literal type="number" pos:start="9:48" pos:end="9:48">0</literal></expr></init></decl>, <decl pos:start="9:51" pos:end="9:62"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:51" pos:end="9:62">cmdline_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:23">initrd_max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:24"><name pos:start="13:13" pos:end="13:18">header</name><index pos:start="13:19" pos:end="13:24">[<expr pos:start="13:20" pos:end="13:23"><literal type="number" pos:start="13:20" pos:end="13:23">8192</literal></expr>]</index></name></decl>, <decl pos:start="13:27" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:11"><modifier pos:start="13:27" pos:end="13:27">*</modifier></type><name pos:start="13:28" pos:end="13:32">setup</name></decl>, <decl pos:start="13:35" pos:end="13:41"><type ref="prev" pos:start="13:5" pos:end="13:11"><modifier pos:start="13:35" pos:end="13:35">*</modifier></type><name pos:start="13:36" pos:end="13:41">kernel</name></decl>, <decl pos:start="13:44" pos:end="13:55"><type ref="prev" pos:start="13:5" pos:end="13:11"><modifier pos:start="13:44" pos:end="13:44">*</modifier></type><name pos:start="13:45" pos:end="13:55">initrd_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:63"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">hwaddr</name></type> <name pos:start="15:12" pos:end="15:20">real_addr</name></decl>, <decl pos:start="15:23" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:23" pos:end="15:31">prot_addr</name></decl>, <decl pos:start="15:34" pos:end="15:45"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:34" pos:end="15:45">cmdline_addr</name></decl>, <decl pos:start="15:48" pos:end="15:62"><type ref="prev" pos:start="15:5" pos:end="15:10"/><name pos:start="15:48" pos:end="15:58">initrd_addr</name> <init pos:start="15:60" pos:end="15:62">= <expr pos:start="15:62" pos:end="15:62"><literal type="number" pos:start="15:62" pos:end="15:62">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">FILE</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:15">vmode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:42"><decl pos:start="21:5" pos:end="21:41"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MachineState</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:25">machine</name> <init pos:start="21:27" pos:end="21:41">= <expr pos:start="21:29" pos:end="21:41"><call pos:start="21:29" pos:end="21:41"><name pos:start="21:29" pos:end="21:35">MACHINE</name><argument_list pos:start="21:36" pos:end="21:41">(<argument pos:start="21:37" pos:end="21:40"><expr pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:40">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:59"><decl pos:start="23:5" pos:end="23:58"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:31">kernel_filename</name> <init pos:start="23:33" pos:end="23:58">= <expr pos:start="23:35" pos:end="23:58"><name pos:start="23:35" pos:end="23:58"><name pos:start="23:35" pos:end="23:41">machine</name><operator pos:start="23:42" pos:end="23:43">-&gt;</operator><name pos:start="23:44" pos:end="23:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:59"><decl pos:start="25:5" pos:end="25:58"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:31">initrd_filename</name> <init pos:start="25:33" pos:end="25:58">= <expr pos:start="25:35" pos:end="25:58"><name pos:start="25:35" pos:end="25:58"><name pos:start="25:35" pos:end="25:41">machine</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:57"><decl pos:start="27:5" pos:end="27:56"><type pos:start="27:5" pos:end="27:16"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:14">char</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:30">kernel_cmdline</name> <init pos:start="27:32" pos:end="27:56">= <expr pos:start="27:34" pos:end="27:56"><name pos:start="27:34" pos:end="27:56"><name pos:start="27:34" pos:end="27:40">machine</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:49">/* Align to 16 bytes as a paranoia measure */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:53"><expr pos:start="33:5" pos:end="33:52"><name pos:start="33:5" pos:end="33:16">cmdline_size</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <operator pos:start="33:20" pos:end="33:20">(</operator><call pos:start="33:21" pos:end="33:42"><name pos:start="33:21" pos:end="33:26">strlen</name><argument_list pos:start="33:27" pos:end="33:42">(<argument pos:start="33:28" pos:end="33:41"><expr pos:start="33:28" pos:end="33:41"><name pos:start="33:28" pos:end="33:41">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="33:43" pos:end="33:43">+</operator><literal type="number" pos:start="33:44" pos:end="33:45">16</literal><operator pos:start="33:46" pos:end="33:46">)</operator> <operator pos:start="33:48" pos:end="33:48">&amp;</operator> <operator pos:start="33:50" pos:end="33:50">~</operator><literal type="number" pos:start="33:51" pos:end="33:52">15</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:32">/* load the kernel header */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:5">f</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <call pos:start="39:9" pos:end="39:36"><name pos:start="39:9" pos:end="39:13">fopen</name><argument_list pos:start="39:14" pos:end="39:36">(<argument pos:start="39:15" pos:end="39:29"><expr pos:start="39:15" pos:end="39:29"><name pos:start="39:15" pos:end="39:29">kernel_filename</name></expr></argument>, <argument pos:start="39:32" pos:end="39:35"><expr pos:start="39:32" pos:end="39:35"><literal type="string" pos:start="39:32" pos:end="39:35">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="349:21"><if pos:start="41:5" pos:end="349:21">if <condition pos:start="41:8" pos:end="45:45">(<expr pos:start="41:9" pos:end="45:44"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:10">f</name> <operator pos:start="41:12" pos:end="41:13">||</operator> <operator pos:start="41:15" pos:end="41:15">!</operator><operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:27">kernel_size</name> <operator pos:start="41:29" pos:end="41:29">=</operator> <call pos:start="41:31" pos:end="41:46"><name pos:start="41:31" pos:end="41:43">get_file_size</name><argument_list pos:start="41:44" pos:end="41:46">(<argument pos:start="41:45" pos:end="41:45"><expr pos:start="41:45" pos:end="41:45"><name pos:start="41:45" pos:end="41:45">f</name></expr></argument>)</argument_list></call><operator pos:start="41:47" pos:end="41:47">)</operator> <operator pos:start="41:49" pos:end="41:50">||</operator>

        <call pos:start="43:9" pos:end="43:65"><name pos:start="43:9" pos:end="43:13">fread</name><argument_list pos:start="43:14" pos:end="43:65">(<argument pos:start="43:15" pos:end="43:20"><expr pos:start="43:15" pos:end="43:20"><name pos:start="43:15" pos:end="43:20">header</name></expr></argument>, <argument pos:start="43:23" pos:end="43:23"><expr pos:start="43:23" pos:end="43:23"><literal type="number" pos:start="43:23" pos:end="43:23">1</literal></expr></argument>, <argument pos:start="43:26" pos:end="43:61"><expr pos:start="43:26" pos:end="43:61"><call pos:start="43:26" pos:end="43:61"><name pos:start="43:26" pos:end="43:28">MIN</name><argument_list pos:start="43:29" pos:end="43:61">(<argument pos:start="43:30" pos:end="43:47"><expr pos:start="43:30" pos:end="43:47"><call pos:start="43:30" pos:end="43:47"><name pos:start="43:30" pos:end="43:39">ARRAY_SIZE</name><argument_list pos:start="43:40" pos:end="43:47">(<argument pos:start="43:41" pos:end="43:46"><expr pos:start="43:41" pos:end="43:46"><name pos:start="43:41" pos:end="43:46">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:50" pos:end="43:60"><expr pos:start="43:50" pos:end="43:60"><name pos:start="43:50" pos:end="43:60">kernel_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:64" pos:end="43:64"><expr pos:start="43:64" pos:end="43:64"><name pos:start="43:64" pos:end="43:64">f</name></expr></argument>)</argument_list></call> <operator pos:start="43:67" pos:end="43:68">!=</operator>

        <call pos:start="45:9" pos:end="45:44"><name pos:start="45:9" pos:end="45:11">MIN</name><argument_list pos:start="45:12" pos:end="45:44">(<argument pos:start="45:13" pos:end="45:30"><expr pos:start="45:13" pos:end="45:30"><call pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:22">ARRAY_SIZE</name><argument_list pos:start="45:23" pos:end="45:30">(<argument pos:start="45:24" pos:end="45:29"><expr pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:29">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="45:33" pos:end="45:43"><expr pos:start="45:33" pos:end="45:43"><name pos:start="45:33" pos:end="45:43">kernel_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:47" pos:end="349:21">{<block_content pos:start="47:9" pos:end="349:21">

        <expr_stmt pos:start="47:9" pos:end="62:0"><expr pos:start="47:9" pos:end="49:49"><call pos:start="47:9" pos:end="49:49"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="49:49">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:64"><expr pos:start="47:25" pos:end="47:64"><literal type="string" pos:start="47:25" pos:end="47:64">"qemu: could not load kernel '%s': %s\n"</literal></expr></argument>,

                <argument pos:start="49:17" pos:end="49:31"><expr pos:start="49:17" pos:end="49:31"><name pos:start="49:17" pos:end="49:31">kernel_filename</name></expr></argument>, <argument pos:start="49:34" pos:end="49:48"><expr pos:start="49:34" pos:end="49:48"><call pos:start="49:34" pos:end="49:48"><name pos:start="49:34" pos:end="49:41">strerror</name><argument_list pos:start="49:42" pos:end="49:48">(<argument pos:start="49:43" pos:end="49:47"><expr pos:start="49:43" pos:end="49:47"><name pos:start="49:43" pos:end="49:47">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <comment type="block" pos:start="55:5" pos:end="55:33">/* kernel protocol version */</comment>

<cpp:if pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:5"><literal type="number" pos:start="57:5" pos:end="57:5">0</literal></expr></cpp:if>

    fprintf(stderr, "header magic: %#x\n", ldl_p(header+0x202));

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="63:5" pos:end="349:21"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:42">(<expr pos:start="63:9" pos:end="63:41"><call pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:13">ldl_p</name><argument_list pos:start="63:14" pos:end="63:27">(<argument pos:start="63:15" pos:end="63:26"><expr pos:start="63:15" pos:end="63:26"><name pos:start="63:15" pos:end="63:20">header</name><operator pos:start="63:21" pos:end="63:21">+</operator><literal type="number" pos:start="63:22" pos:end="63:26">0x202</literal></expr></argument>)</argument_list></call> <operator pos:start="63:29" pos:end="63:30">==</operator> <literal type="number" pos:start="63:32" pos:end="63:41">0x53726448</literal></expr>)</condition> <block pos:start="63:44" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:40">

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:16">protocol</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:39"><name pos:start="65:20" pos:end="65:25">lduw_p</name><argument_list pos:start="65:26" pos:end="65:39">(<argument pos:start="65:27" pos:end="65:38"><expr pos:start="65:27" pos:end="65:38"><name pos:start="65:27" pos:end="65:32">header</name><operator pos:start="65:33" pos:end="65:33">+</operator><literal type="number" pos:start="65:34" pos:end="65:38">0x206</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="349:21">else <block pos:start="67:12" pos:end="349:21">{<block_content pos:start="73:9" pos:end="349:21">

        <comment type="block" pos:start="69:9" pos:end="71:46">/* This looks like a multiboot kernel. If it is, let's stop

           treating it like a Linux kernel. */</comment>

        <if_stmt pos:start="73:9" pos:end="349:21"><if pos:start="73:9" pos:end="349:21">if <condition pos:start="73:12" pos:end="75:64">(<expr pos:start="73:13" pos:end="75:63"><call pos:start="73:13" pos:end="75:63"><name pos:start="73:13" pos:end="73:26">load_multiboot</name><argument_list pos:start="73:27" pos:end="75:63">(<argument pos:start="73:28" pos:end="73:33"><expr pos:start="73:28" pos:end="73:33"><name pos:start="73:28" pos:end="73:33">fw_cfg</name></expr></argument>, <argument pos:start="73:36" pos:end="73:36"><expr pos:start="73:36" pos:end="73:36"><name pos:start="73:36" pos:end="73:36">f</name></expr></argument>, <argument pos:start="73:39" pos:end="73:53"><expr pos:start="73:39" pos:end="73:53"><name pos:start="73:39" pos:end="73:53">kernel_filename</name></expr></argument>, <argument pos:start="73:56" pos:end="73:70"><expr pos:start="73:56" pos:end="73:70"><name pos:start="73:56" pos:end="73:70">initrd_filename</name></expr></argument>,

                           <argument pos:start="75:28" pos:end="75:41"><expr pos:start="75:28" pos:end="75:41"><name pos:start="75:28" pos:end="75:41">kernel_cmdline</name></expr></argument>, <argument pos:start="75:44" pos:end="75:54"><expr pos:start="75:44" pos:end="75:54"><name pos:start="75:44" pos:end="75:54">kernel_size</name></expr></argument>, <argument pos:start="75:57" pos:end="75:62"><expr pos:start="75:57" pos:end="75:62"><name pos:start="75:57" pos:end="75:62">header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:66" pos:end="349:21">{<block_content pos:start="77:13" pos:end="349:21">

            <return pos:start="77:13" pos:end="77:19">return;</return>


        <expr_stmt pos:start="80:9" pos:end="80:21"><expr pos:start="80:9" pos:end="80:20"><name pos:start="80:9" pos:end="80:16">protocol</name> <operator pos:start="80:18" pos:end="80:18">=</operator> <literal type="number" pos:start="80:20" pos:end="80:20">0</literal></expr>;</expr_stmt>




    <if_stmt pos:start="85:5" pos:end="349:21"><if pos:start="85:5" pos:end="95:5">if <condition pos:start="85:8" pos:end="85:52">(<expr pos:start="85:9" pos:end="85:51"><name pos:start="85:9" pos:end="85:16">protocol</name> <operator pos:start="85:18" pos:end="85:18">&lt;</operator> <literal type="number" pos:start="85:20" pos:end="85:24">0x200</literal> <operator pos:start="85:26" pos:end="85:27">||</operator> <operator pos:start="85:29" pos:end="85:29">!</operator><operator pos:start="85:30" pos:end="85:30">(</operator><name pos:start="85:31" pos:end="85:43"><name pos:start="85:31" pos:end="85:36">header</name><index pos:start="85:37" pos:end="85:43">[<expr pos:start="85:38" pos:end="85:42"><literal type="number" pos:start="85:38" pos:end="85:42">0x211</literal></expr>]</index></name> <operator pos:start="85:45" pos:end="85:45">&amp;</operator> <literal type="number" pos:start="85:47" pos:end="85:50">0x01</literal><operator pos:start="85:51" pos:end="85:51">)</operator></expr>)</condition> <block pos:start="85:54" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:31">

        <comment type="block" pos:start="87:9" pos:end="87:24">/* Low kernel */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:31"><expr pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:17">real_addr</name>    <operator pos:start="89:22" pos:end="89:22">=</operator> <literal type="number" pos:start="89:24" pos:end="89:30">0x90000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:46"><expr pos:start="91:9" pos:end="91:45"><name pos:start="91:9" pos:end="91:20">cmdline_addr</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <literal type="number" pos:start="91:24" pos:end="91:32">0x9a000</literal> <operator pos:start="91:32" pos:end="91:32">-</operator> <name pos:start="91:34" pos:end="91:45">cmdline_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:31"><expr pos:start="93:9" pos:end="93:30"><name pos:start="93:9" pos:end="93:17">prot_addr</name>    <operator pos:start="93:22" pos:end="93:22">=</operator> <literal type="number" pos:start="93:24" pos:end="93:30">0x10000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="95:7" pos:end="105:5">else if <condition pos:start="95:15" pos:end="95:32">(<expr pos:start="95:16" pos:end="95:31"><name pos:start="95:16" pos:end="95:23">protocol</name> <operator pos:start="95:25" pos:end="95:25">&lt;</operator> <literal type="number" pos:start="95:27" pos:end="95:31">0x202</literal></expr>)</condition> <block pos:start="95:34" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:32">

        <comment type="block" pos:start="97:9" pos:end="97:37">/* High but ancient kernel */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:31"><expr pos:start="99:9" pos:end="99:30"><name pos:start="99:9" pos:end="99:17">real_addr</name>    <operator pos:start="99:22" pos:end="99:22">=</operator> <literal type="number" pos:start="99:24" pos:end="99:30">0x90000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:46"><expr pos:start="101:9" pos:end="101:45"><name pos:start="101:9" pos:end="101:20">cmdline_addr</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <literal type="number" pos:start="101:24" pos:end="101:32">0x9a000</literal> <operator pos:start="101:32" pos:end="101:32">-</operator> <name pos:start="101:34" pos:end="101:45">cmdline_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:32"><expr pos:start="103:9" pos:end="103:31"><name pos:start="103:9" pos:end="103:17">prot_addr</name>    <operator pos:start="103:22" pos:end="103:22">=</operator> <literal type="number" pos:start="103:24" pos:end="103:31">0x100000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="349:21">else <block pos:start="105:12" pos:end="349:21">{<block_content pos:start="109:9" pos:end="349:21">

        <comment type="block" pos:start="107:9" pos:end="107:36">/* High and recent kernel */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:31"><expr pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:17">real_addr</name>    <operator pos:start="109:22" pos:end="109:22">=</operator> <literal type="number" pos:start="109:24" pos:end="109:30">0x10000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:31"><expr pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:20">cmdline_addr</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <literal type="number" pos:start="111:24" pos:end="111:30">0x20000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="135:0"><expr pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:17">prot_addr</name>    <operator pos:start="113:22" pos:end="113:22">=</operator> <literal type="number" pos:start="113:24" pos:end="113:31">0x100000</literal></expr>;</expr_stmt>




<cpp:if pos:start="118:1" pos:end="118:5">#<cpp:directive pos:start="118:2" pos:end="118:3">if</cpp:directive> <expr pos:start="118:5" pos:end="118:5"><literal type="number" pos:start="118:5" pos:end="118:5">0</literal></expr></cpp:if>

    fprintf(stderr,

            "qemu: real_addr     = 0x" TARGET_FMT_plx "\n"

            "qemu: cmdline_addr  = 0x" TARGET_FMT_plx "\n"

            "qemu: prot_addr     = 0x" TARGET_FMT_plx "\n",

            real_addr,

            cmdline_addr,

            prot_addr);

<cpp:endif pos:start="134:1" pos:end="134:6">#<cpp:directive pos:start="134:2" pos:end="134:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="138:5" pos:end="138:48">/* highest address for loading the initrd */</comment>

    <if_stmt pos:start="140:5" pos:end="349:21"><if pos:start="140:5" pos:end="144:5">if <condition pos:start="140:8" pos:end="140:26">(<expr pos:start="140:9" pos:end="140:25"><name pos:start="140:9" pos:end="140:16">protocol</name> <operator pos:start="140:18" pos:end="140:19">&gt;=</operator> <literal type="number" pos:start="140:21" pos:end="140:25">0x203</literal></expr>)</condition> <block pos:start="140:28" pos:end="144:5">{<block_content pos:start="142:9" pos:end="142:41">

        <expr_stmt pos:start="142:9" pos:end="142:41"><expr pos:start="142:9" pos:end="142:40"><name pos:start="142:9" pos:end="142:18">initrd_max</name> <operator pos:start="142:20" pos:end="142:20">=</operator> <call pos:start="142:22" pos:end="142:40"><name pos:start="142:22" pos:end="142:26">ldl_p</name><argument_list pos:start="142:27" pos:end="142:40">(<argument pos:start="142:28" pos:end="142:39"><expr pos:start="142:28" pos:end="142:39"><name pos:start="142:28" pos:end="142:33">header</name><operator pos:start="142:34" pos:end="142:34">+</operator><literal type="number" pos:start="142:35" pos:end="142:39">0x22c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="144:7" pos:end="349:21">else <block pos:start="144:12" pos:end="349:21">{<block_content pos:start="146:9" pos:end="349:21">

        <expr_stmt pos:start="146:9" pos:end="146:32"><expr pos:start="146:9" pos:end="146:31"><name pos:start="146:9" pos:end="146:18">initrd_max</name> <operator pos:start="146:20" pos:end="146:20">=</operator> <literal type="number" pos:start="146:22" pos:end="146:31">0x37ffffff</literal></expr>;</expr_stmt>




    <if_stmt pos:start="151:5" pos:end="349:21"><if pos:start="151:5" pos:end="349:21">if <condition pos:start="151:8" pos:end="151:63">(<expr pos:start="151:9" pos:end="151:62"><name pos:start="151:9" pos:end="151:18">initrd_max</name> <operator pos:start="151:20" pos:end="151:21">&gt;=</operator> <name pos:start="151:23" pos:end="151:45"><name pos:start="151:23" pos:end="151:26">pcms</name><operator pos:start="151:27" pos:end="151:28">-&gt;</operator><name pos:start="151:29" pos:end="151:45">below_4g_mem_size</name></name> <operator pos:start="151:47" pos:end="151:47">-</operator> <name pos:start="151:49" pos:end="151:62">acpi_data_size</name></expr>)</condition> <block pos:start="151:65" pos:end="349:21">{<block_content pos:start="153:9" pos:end="349:21">

        <expr_stmt pos:start="153:9" pos:end="153:66"><expr pos:start="153:9" pos:end="153:65"><name pos:start="153:9" pos:end="153:18">initrd_max</name> <operator pos:start="153:20" pos:end="153:20">=</operator> <name pos:start="153:22" pos:end="153:44"><name pos:start="153:22" pos:end="153:25">pcms</name><operator pos:start="153:26" pos:end="153:27">-&gt;</operator><name pos:start="153:28" pos:end="153:44">below_4g_mem_size</name></name> <operator pos:start="153:46" pos:end="153:46">-</operator> <name pos:start="153:48" pos:end="153:61">acpi_data_size</name> <operator pos:start="153:63" pos:end="153:63">-</operator> <literal type="number" pos:start="153:65" pos:end="153:65">1</literal></expr>;</expr_stmt>




    <expr_stmt pos:start="158:5" pos:end="158:62"><expr pos:start="158:5" pos:end="158:61"><call pos:start="158:5" pos:end="158:61"><name pos:start="158:5" pos:end="158:18">fw_cfg_add_i32</name><argument_list pos:start="158:19" pos:end="158:61">(<argument pos:start="158:20" pos:end="158:25"><expr pos:start="158:20" pos:end="158:25"><name pos:start="158:20" pos:end="158:25">fw_cfg</name></expr></argument>, <argument pos:start="158:28" pos:end="158:46"><expr pos:start="158:28" pos:end="158:46"><name pos:start="158:28" pos:end="158:46">FW_CFG_CMDLINE_ADDR</name></expr></argument>, <argument pos:start="158:49" pos:end="158:60"><expr pos:start="158:49" pos:end="158:60"><name pos:start="158:49" pos:end="158:60">cmdline_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="160:5" pos:end="160:74"><expr pos:start="160:5" pos:end="160:73"><call pos:start="160:5" pos:end="160:73"><name pos:start="160:5" pos:end="160:18">fw_cfg_add_i32</name><argument_list pos:start="160:19" pos:end="160:73">(<argument pos:start="160:20" pos:end="160:25"><expr pos:start="160:20" pos:end="160:25"><name pos:start="160:20" pos:end="160:25">fw_cfg</name></expr></argument>, <argument pos:start="160:28" pos:end="160:46"><expr pos:start="160:28" pos:end="160:46"><name pos:start="160:28" pos:end="160:46">FW_CFG_CMDLINE_SIZE</name></expr></argument>, <argument pos:start="160:49" pos:end="160:72"><expr pos:start="160:49" pos:end="160:72"><call pos:start="160:49" pos:end="160:70"><name pos:start="160:49" pos:end="160:54">strlen</name><argument_list pos:start="160:55" pos:end="160:70">(<argument pos:start="160:56" pos:end="160:69"><expr pos:start="160:56" pos:end="160:69"><name pos:start="160:56" pos:end="160:69">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="160:71" pos:end="160:71">+</operator><literal type="number" pos:start="160:72" pos:end="160:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="162:5" pos:end="162:67"><expr pos:start="162:5" pos:end="162:66"><call pos:start="162:5" pos:end="162:66"><name pos:start="162:5" pos:end="162:21">fw_cfg_add_string</name><argument_list pos:start="162:22" pos:end="162:66">(<argument pos:start="162:23" pos:end="162:28"><expr pos:start="162:23" pos:end="162:28"><name pos:start="162:23" pos:end="162:28">fw_cfg</name></expr></argument>, <argument pos:start="162:31" pos:end="162:49"><expr pos:start="162:31" pos:end="162:49"><name pos:start="162:31" pos:end="162:49">FW_CFG_CMDLINE_DATA</name></expr></argument>, <argument pos:start="162:52" pos:end="162:65"><expr pos:start="162:52" pos:end="162:65"><name pos:start="162:52" pos:end="162:65">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="166:5" pos:end="349:21"><if pos:start="166:5" pos:end="170:5">if <condition pos:start="166:8" pos:end="166:26">(<expr pos:start="166:9" pos:end="166:25"><name pos:start="166:9" pos:end="166:16">protocol</name> <operator pos:start="166:18" pos:end="166:19">&gt;=</operator> <literal type="number" pos:start="166:21" pos:end="166:25">0x202</literal></expr>)</condition> <block pos:start="166:28" pos:end="170:5">{<block_content pos:start="168:9" pos:end="168:42">

        <expr_stmt pos:start="168:9" pos:end="168:42"><expr pos:start="168:9" pos:end="168:41"><call pos:start="168:9" pos:end="168:41"><name pos:start="168:9" pos:end="168:13">stl_p</name><argument_list pos:start="168:14" pos:end="168:41">(<argument pos:start="168:15" pos:end="168:26"><expr pos:start="168:15" pos:end="168:26"><name pos:start="168:15" pos:end="168:20">header</name><operator pos:start="168:21" pos:end="168:21">+</operator><literal type="number" pos:start="168:22" pos:end="168:26">0x228</literal></expr></argument>, <argument pos:start="168:29" pos:end="168:40"><expr pos:start="168:29" pos:end="168:40"><name pos:start="168:29" pos:end="168:40">cmdline_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="170:7" pos:end="349:21">else <block pos:start="170:12" pos:end="349:21">{<block_content pos:start="172:9" pos:end="349:21">

        <expr_stmt pos:start="172:9" pos:end="172:35"><expr pos:start="172:9" pos:end="172:34"><call pos:start="172:9" pos:end="172:34"><name pos:start="172:9" pos:end="172:13">stw_p</name><argument_list pos:start="172:14" pos:end="172:34">(<argument pos:start="172:15" pos:end="172:25"><expr pos:start="172:15" pos:end="172:25"><name pos:start="172:15" pos:end="172:20">header</name><operator pos:start="172:21" pos:end="172:21">+</operator><literal type="number" pos:start="172:22" pos:end="172:25">0x20</literal></expr></argument>, <argument pos:start="172:28" pos:end="172:33"><expr pos:start="172:28" pos:end="172:33"><literal type="number" pos:start="172:28" pos:end="172:33">0xA33F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="174:9" pos:end="174:51"><expr pos:start="174:9" pos:end="174:50"><call pos:start="174:9" pos:end="174:50"><name pos:start="174:9" pos:end="174:13">stw_p</name><argument_list pos:start="174:14" pos:end="174:50">(<argument pos:start="174:15" pos:end="174:25"><expr pos:start="174:15" pos:end="174:25"><name pos:start="174:15" pos:end="174:20">header</name><operator pos:start="174:21" pos:end="174:21">+</operator><literal type="number" pos:start="174:22" pos:end="174:25">0x22</literal></expr></argument>, <argument pos:start="174:28" pos:end="174:49"><expr pos:start="174:28" pos:end="174:49"><name pos:start="174:28" pos:end="174:39">cmdline_addr</name><operator pos:start="174:40" pos:end="174:40">-</operator><name pos:start="174:41" pos:end="174:49">real_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="179:5" pos:end="179:31">/* handle vga= parameter */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:43"><expr pos:start="181:5" pos:end="181:42"><name pos:start="181:5" pos:end="181:9">vmode</name> <operator pos:start="181:11" pos:end="181:11">=</operator> <call pos:start="181:13" pos:end="181:42"><name pos:start="181:13" pos:end="181:18">strstr</name><argument_list pos:start="181:19" pos:end="181:42">(<argument pos:start="181:20" pos:end="181:33"><expr pos:start="181:20" pos:end="181:33"><name pos:start="181:20" pos:end="181:33">kernel_cmdline</name></expr></argument>, <argument pos:start="181:36" pos:end="181:41"><expr pos:start="181:36" pos:end="181:41"><literal type="string" pos:start="181:36" pos:end="181:41">"vga="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="349:21"><if pos:start="183:5" pos:end="349:21">if <condition pos:start="183:8" pos:end="183:14">(<expr pos:start="183:9" pos:end="183:13"><name pos:start="183:9" pos:end="183:13">vmode</name></expr>)</condition> <block pos:start="183:16" pos:end="349:21">{<block_content pos:start="185:9" pos:end="349:21">

        <decl_stmt pos:start="185:9" pos:end="185:32"><decl pos:start="185:9" pos:end="185:31"><type pos:start="185:9" pos:end="185:20"><name pos:start="185:9" pos:end="185:16">unsigned</name> <name pos:start="185:18" pos:end="185:20">int</name></type> <name pos:start="185:22" pos:end="185:31">video_mode</name></decl>;</decl_stmt>

        <comment type="block" pos:start="187:9" pos:end="187:25">/* skip "vga=" */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:19"><expr pos:start="189:9" pos:end="189:18"><name pos:start="189:9" pos:end="189:13">vmode</name> <operator pos:start="189:15" pos:end="189:16">+=</operator> <literal type="number" pos:start="189:18" pos:end="189:18">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="349:21"><if pos:start="191:9" pos:end="195:9">if <condition pos:start="191:12" pos:end="191:41">(<expr pos:start="191:13" pos:end="191:40"><operator pos:start="191:13" pos:end="191:13">!</operator><call pos:start="191:14" pos:end="191:40"><name pos:start="191:14" pos:end="191:20">strncmp</name><argument_list pos:start="191:21" pos:end="191:40">(<argument pos:start="191:22" pos:end="191:26"><expr pos:start="191:22" pos:end="191:26"><name pos:start="191:22" pos:end="191:26">vmode</name></expr></argument>, <argument pos:start="191:29" pos:end="191:36"><expr pos:start="191:29" pos:end="191:36"><literal type="string" pos:start="191:29" pos:end="191:36">"normal"</literal></expr></argument>, <argument pos:start="191:39" pos:end="191:39"><expr pos:start="191:39" pos:end="191:39"><literal type="number" pos:start="191:39" pos:end="191:39">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:43" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:32">

            <expr_stmt pos:start="193:13" pos:end="193:32"><expr pos:start="193:13" pos:end="193:31"><name pos:start="193:13" pos:end="193:22">video_mode</name> <operator pos:start="193:24" pos:end="193:24">=</operator> <literal type="number" pos:start="193:26" pos:end="193:31">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="195:11" pos:end="199:9">else if <condition pos:start="195:19" pos:end="195:45">(<expr pos:start="195:20" pos:end="195:44"><operator pos:start="195:20" pos:end="195:20">!</operator><call pos:start="195:21" pos:end="195:44"><name pos:start="195:21" pos:end="195:27">strncmp</name><argument_list pos:start="195:28" pos:end="195:44">(<argument pos:start="195:29" pos:end="195:33"><expr pos:start="195:29" pos:end="195:33"><name pos:start="195:29" pos:end="195:33">vmode</name></expr></argument>, <argument pos:start="195:36" pos:end="195:40"><expr pos:start="195:36" pos:end="195:40"><literal type="string" pos:start="195:36" pos:end="195:40">"ext"</literal></expr></argument>, <argument pos:start="195:43" pos:end="195:43"><expr pos:start="195:43" pos:end="195:43"><literal type="number" pos:start="195:43" pos:end="195:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:47" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:32">

            <expr_stmt pos:start="197:13" pos:end="197:32"><expr pos:start="197:13" pos:end="197:31"><name pos:start="197:13" pos:end="197:22">video_mode</name> <operator pos:start="197:24" pos:end="197:24">=</operator> <literal type="number" pos:start="197:26" pos:end="197:31">0xfffe</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="199:11" pos:end="203:9">else if <condition pos:start="199:19" pos:end="199:45">(<expr pos:start="199:20" pos:end="199:44"><operator pos:start="199:20" pos:end="199:20">!</operator><call pos:start="199:21" pos:end="199:44"><name pos:start="199:21" pos:end="199:27">strncmp</name><argument_list pos:start="199:28" pos:end="199:44">(<argument pos:start="199:29" pos:end="199:33"><expr pos:start="199:29" pos:end="199:33"><name pos:start="199:29" pos:end="199:33">vmode</name></expr></argument>, <argument pos:start="199:36" pos:end="199:40"><expr pos:start="199:36" pos:end="199:40"><literal type="string" pos:start="199:36" pos:end="199:40">"ask"</literal></expr></argument>, <argument pos:start="199:43" pos:end="199:43"><expr pos:start="199:43" pos:end="199:43"><literal type="number" pos:start="199:43" pos:end="199:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:47" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:32">

            <expr_stmt pos:start="201:13" pos:end="201:32"><expr pos:start="201:13" pos:end="201:31"><name pos:start="201:13" pos:end="201:22">video_mode</name> <operator pos:start="201:24" pos:end="201:24">=</operator> <literal type="number" pos:start="201:26" pos:end="201:31">0xfffd</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="203:11" pos:end="349:21">else <block pos:start="203:16" pos:end="349:21">{<block_content pos:start="205:13" pos:end="349:21">

            <expr_stmt pos:start="205:13" pos:end="205:48"><expr pos:start="205:13" pos:end="205:47"><name pos:start="205:13" pos:end="205:22">video_mode</name> <operator pos:start="205:24" pos:end="205:24">=</operator> <call pos:start="205:26" pos:end="205:47"><name pos:start="205:26" pos:end="205:31">strtol</name><argument_list pos:start="205:32" pos:end="205:47">(<argument pos:start="205:33" pos:end="205:37"><expr pos:start="205:33" pos:end="205:37"><name pos:start="205:33" pos:end="205:37">vmode</name></expr></argument>, <argument pos:start="205:40" pos:end="205:43"><expr pos:start="205:40" pos:end="205:43"><name pos:start="205:40" pos:end="205:43">NULL</name></expr></argument>, <argument pos:start="205:46" pos:end="205:46"><expr pos:start="205:46" pos:end="205:46"><literal type="number" pos:start="205:46" pos:end="205:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="208:9" pos:end="208:40"><expr pos:start="208:9" pos:end="208:39"><call pos:start="208:9" pos:end="208:39"><name pos:start="208:9" pos:end="208:13">stw_p</name><argument_list pos:start="208:14" pos:end="208:39">(<argument pos:start="208:15" pos:end="208:26"><expr pos:start="208:15" pos:end="208:26"><name pos:start="208:15" pos:end="208:20">header</name><operator pos:start="208:21" pos:end="208:21">+</operator><literal type="number" pos:start="208:22" pos:end="208:26">0x1fa</literal></expr></argument>, <argument pos:start="208:29" pos:end="208:38"><expr pos:start="208:29" pos:end="208:38"><name pos:start="208:29" pos:end="208:38">video_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="213:5" pos:end="213:21">/* loader type */</comment>

    <comment type="block" pos:start="215:5" pos:end="219:36">/* High nybble = B reserved for QEMU; low nybble is revision number.

       If this code is substantially changed, you may want to consider

       incrementing the revision. */</comment>

    <if_stmt pos:start="221:5" pos:end="349:21"><if pos:start="221:5" pos:end="349:21">if <condition pos:start="221:8" pos:end="221:26">(<expr pos:start="221:9" pos:end="221:25"><name pos:start="221:9" pos:end="221:16">protocol</name> <operator pos:start="221:18" pos:end="221:19">&gt;=</operator> <literal type="number" pos:start="221:21" pos:end="221:25">0x200</literal></expr>)</condition> <block pos:start="221:28" pos:end="349:21">{<block_content pos:start="223:9" pos:end="349:21">

        <expr_stmt pos:start="223:9" pos:end="223:29"><expr pos:start="223:9" pos:end="223:28"><name pos:start="223:9" pos:end="223:21"><name pos:start="223:9" pos:end="223:14">header</name><index pos:start="223:15" pos:end="223:21">[<expr pos:start="223:16" pos:end="223:20"><literal type="number" pos:start="223:16" pos:end="223:20">0x210</literal></expr>]</index></name> <operator pos:start="223:23" pos:end="223:23">=</operator> <literal type="number" pos:start="223:25" pos:end="223:28">0xB0</literal></expr>;</expr_stmt>


    <comment type="block" pos:start="226:5" pos:end="226:14">/* heap */</comment>

    <if_stmt pos:start="228:5" pos:end="349:21"><if pos:start="228:5" pos:end="349:21">if <condition pos:start="228:8" pos:end="228:26">(<expr pos:start="228:9" pos:end="228:25"><name pos:start="228:9" pos:end="228:16">protocol</name> <operator pos:start="228:18" pos:end="228:19">&gt;=</operator> <literal type="number" pos:start="228:21" pos:end="228:25">0x201</literal></expr>)</condition> <block pos:start="228:28" pos:end="349:21">{<block_content pos:start="230:9" pos:end="349:21">

        <expr_stmt pos:start="230:9" pos:end="230:30"><expr pos:start="230:9" pos:end="230:29"><name pos:start="230:9" pos:end="230:21"><name pos:start="230:9" pos:end="230:14">header</name><index pos:start="230:15" pos:end="230:21">[<expr pos:start="230:16" pos:end="230:20"><literal type="number" pos:start="230:16" pos:end="230:20">0x211</literal></expr>]</index></name> <operator pos:start="230:23" pos:end="230:24">|=</operator> <literal type="number" pos:start="230:26" pos:end="230:29">0x80</literal></expr>;</expr_stmt>	<comment type="block" pos:start="230:33" pos:end="230:50">/* CAN_USE_HEAP */</comment>

        <expr_stmt pos:start="232:9" pos:end="232:58"><expr pos:start="232:9" pos:end="232:57"><call pos:start="232:9" pos:end="232:57"><name pos:start="232:9" pos:end="232:13">stw_p</name><argument_list pos:start="232:14" pos:end="232:57">(<argument pos:start="232:15" pos:end="232:26"><expr pos:start="232:15" pos:end="232:26"><name pos:start="232:15" pos:end="232:20">header</name><operator pos:start="232:21" pos:end="232:21">+</operator><literal type="number" pos:start="232:22" pos:end="232:26">0x224</literal></expr></argument>, <argument pos:start="232:29" pos:end="232:56"><expr pos:start="232:29" pos:end="232:56"><name pos:start="232:29" pos:end="232:40">cmdline_addr</name><operator pos:start="232:41" pos:end="232:41">-</operator><name pos:start="232:42" pos:end="232:50">real_addr</name><operator pos:start="232:51" pos:end="232:51">-</operator><literal type="number" pos:start="232:52" pos:end="232:56">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="237:5" pos:end="237:21">/* load initrd */</comment>

    <if_stmt pos:start="239:5" pos:end="349:21"><if pos:start="239:5" pos:end="349:21">if <condition pos:start="239:8" pos:end="239:24">(<expr pos:start="239:9" pos:end="239:23"><name pos:start="239:9" pos:end="239:23">initrd_filename</name></expr>)</condition> <block pos:start="239:26" pos:end="349:21">{<block_content pos:start="241:9" pos:end="349:21">

        <if_stmt pos:start="241:9" pos:end="349:21"><if pos:start="241:9" pos:end="349:21">if <condition pos:start="241:12" pos:end="241:29">(<expr pos:start="241:13" pos:end="241:28"><name pos:start="241:13" pos:end="241:20">protocol</name> <operator pos:start="241:22" pos:end="241:22">&lt;</operator> <literal type="number" pos:start="241:24" pos:end="241:28">0x200</literal></expr>)</condition> <block pos:start="241:31" pos:end="349:21">{<block_content pos:start="243:13" pos:end="349:21">

            <expr_stmt pos:start="243:13" pos:end="243:79"><expr pos:start="243:13" pos:end="243:78"><call pos:start="243:13" pos:end="243:78"><name pos:start="243:13" pos:end="243:19">fprintf</name><argument_list pos:start="243:20" pos:end="243:78">(<argument pos:start="243:21" pos:end="243:26"><expr pos:start="243:21" pos:end="243:26"><name pos:start="243:21" pos:end="243:26">stderr</name></expr></argument>, <argument pos:start="243:29" pos:end="243:77"><expr pos:start="243:29" pos:end="243:77"><literal type="string" pos:start="243:29" pos:end="243:77">"qemu: linux kernel too old to load a ram disk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <expr_stmt pos:start="249:9" pos:end="249:54"><expr pos:start="249:9" pos:end="249:53"><name pos:start="249:9" pos:end="249:19">initrd_size</name> <operator pos:start="249:21" pos:end="249:21">=</operator> <call pos:start="249:23" pos:end="249:53"><name pos:start="249:23" pos:end="249:36">get_image_size</name><argument_list pos:start="249:37" pos:end="249:53">(<argument pos:start="249:38" pos:end="249:52"><expr pos:start="249:38" pos:end="249:52"><name pos:start="249:38" pos:end="249:52">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="349:21"><if pos:start="251:9" pos:end="349:21">if <condition pos:start="251:12" pos:end="251:28">(<expr pos:start="251:13" pos:end="251:27"><name pos:start="251:13" pos:end="251:23">initrd_size</name> <operator pos:start="251:25" pos:end="251:25">&lt;</operator> <literal type="number" pos:start="251:27" pos:end="251:27">0</literal></expr>)</condition> <block pos:start="251:30" pos:end="349:21">{<block_content pos:start="253:13" pos:end="349:21">

            <expr_stmt pos:start="253:13" pos:end="255:54"><expr pos:start="253:13" pos:end="255:53"><call pos:start="253:13" pos:end="255:53"><name pos:start="253:13" pos:end="253:19">fprintf</name><argument_list pos:start="253:20" pos:end="255:53">(<argument pos:start="253:21" pos:end="253:26"><expr pos:start="253:21" pos:end="253:26"><name pos:start="253:21" pos:end="253:26">stderr</name></expr></argument>, <argument pos:start="253:29" pos:end="253:65"><expr pos:start="253:29" pos:end="253:65"><literal type="string" pos:start="253:29" pos:end="253:65">"qemu: error reading initrd %s: %s\n"</literal></expr></argument>,

                    <argument pos:start="255:21" pos:end="255:35"><expr pos:start="255:21" pos:end="255:35"><name pos:start="255:21" pos:end="255:35">initrd_filename</name></expr></argument>, <argument pos:start="255:38" pos:end="255:52"><expr pos:start="255:38" pos:end="255:52"><call pos:start="255:38" pos:end="255:52"><name pos:start="255:38" pos:end="255:45">strerror</name><argument_list pos:start="255:46" pos:end="255:52">(<argument pos:start="255:47" pos:end="255:51"><expr pos:start="255:47" pos:end="255:51"><name pos:start="255:47" pos:end="255:51">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <expr_stmt pos:start="261:9" pos:end="261:55"><expr pos:start="261:9" pos:end="261:54"><name pos:start="261:9" pos:end="261:19">initrd_addr</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <operator pos:start="261:23" pos:end="261:23">(</operator><name pos:start="261:24" pos:end="261:33">initrd_max</name><operator pos:start="261:34" pos:end="261:34">-</operator><name pos:start="261:35" pos:end="261:45">initrd_size</name><operator pos:start="261:46" pos:end="261:46">)</operator> <operator pos:start="261:48" pos:end="261:48">&amp;</operator> <operator pos:start="261:50" pos:end="261:50">~</operator><literal type="number" pos:start="261:51" pos:end="261:54">4095</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="265:9" pos:end="265:44"><expr pos:start="265:9" pos:end="265:43"><name pos:start="265:9" pos:end="265:19">initrd_data</name> <operator pos:start="265:21" pos:end="265:21">=</operator> <call pos:start="265:23" pos:end="265:43"><name pos:start="265:23" pos:end="265:30">g_malloc</name><argument_list pos:start="265:31" pos:end="265:43">(<argument pos:start="265:32" pos:end="265:42"><expr pos:start="265:32" pos:end="265:42"><name pos:start="265:32" pos:end="265:42">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:49"><expr pos:start="267:9" pos:end="267:48"><call pos:start="267:9" pos:end="267:48"><name pos:start="267:9" pos:end="267:18">load_image</name><argument_list pos:start="267:19" pos:end="267:48">(<argument pos:start="267:20" pos:end="267:34"><expr pos:start="267:20" pos:end="267:34"><name pos:start="267:20" pos:end="267:34">initrd_filename</name></expr></argument>, <argument pos:start="267:37" pos:end="267:47"><expr pos:start="267:37" pos:end="267:47"><name pos:start="267:37" pos:end="267:47">initrd_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="271:9" pos:end="271:64"><expr pos:start="271:9" pos:end="271:63"><call pos:start="271:9" pos:end="271:63"><name pos:start="271:9" pos:end="271:22">fw_cfg_add_i32</name><argument_list pos:start="271:23" pos:end="271:63">(<argument pos:start="271:24" pos:end="271:29"><expr pos:start="271:24" pos:end="271:29"><name pos:start="271:24" pos:end="271:29">fw_cfg</name></expr></argument>, <argument pos:start="271:32" pos:end="271:49"><expr pos:start="271:32" pos:end="271:49"><name pos:start="271:32" pos:end="271:49">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="271:52" pos:end="271:62"><expr pos:start="271:52" pos:end="271:62"><name pos:start="271:52" pos:end="271:62">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:64"><expr pos:start="273:9" pos:end="273:63"><call pos:start="273:9" pos:end="273:63"><name pos:start="273:9" pos:end="273:22">fw_cfg_add_i32</name><argument_list pos:start="273:23" pos:end="273:63">(<argument pos:start="273:24" pos:end="273:29"><expr pos:start="273:24" pos:end="273:29"><name pos:start="273:24" pos:end="273:29">fw_cfg</name></expr></argument>, <argument pos:start="273:32" pos:end="273:49"><expr pos:start="273:32" pos:end="273:49"><name pos:start="273:32" pos:end="273:49">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="273:52" pos:end="273:62"><expr pos:start="273:52" pos:end="273:62"><name pos:start="273:52" pos:end="273:62">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:79"><expr pos:start="275:9" pos:end="275:78"><call pos:start="275:9" pos:end="275:78"><name pos:start="275:9" pos:end="275:24">fw_cfg_add_bytes</name><argument_list pos:start="275:25" pos:end="275:78">(<argument pos:start="275:26" pos:end="275:31"><expr pos:start="275:26" pos:end="275:31"><name pos:start="275:26" pos:end="275:31">fw_cfg</name></expr></argument>, <argument pos:start="275:34" pos:end="275:51"><expr pos:start="275:34" pos:end="275:51"><name pos:start="275:34" pos:end="275:51">FW_CFG_INITRD_DATA</name></expr></argument>, <argument pos:start="275:54" pos:end="275:64"><expr pos:start="275:54" pos:end="275:64"><name pos:start="275:54" pos:end="275:64">initrd_data</name></expr></argument>, <argument pos:start="275:67" pos:end="275:77"><expr pos:start="275:67" pos:end="275:77"><name pos:start="275:67" pos:end="275:77">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="279:9" pos:end="279:41"><expr pos:start="279:9" pos:end="279:40"><call pos:start="279:9" pos:end="279:40"><name pos:start="279:9" pos:end="279:13">stl_p</name><argument_list pos:start="279:14" pos:end="279:40">(<argument pos:start="279:15" pos:end="279:26"><expr pos:start="279:15" pos:end="279:26"><name pos:start="279:15" pos:end="279:20">header</name><operator pos:start="279:21" pos:end="279:21">+</operator><literal type="number" pos:start="279:22" pos:end="279:26">0x218</literal></expr></argument>, <argument pos:start="279:29" pos:end="279:39"><expr pos:start="279:29" pos:end="279:39"><name pos:start="279:29" pos:end="279:39">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:41"><expr pos:start="281:9" pos:end="281:40"><call pos:start="281:9" pos:end="281:40"><name pos:start="281:9" pos:end="281:13">stl_p</name><argument_list pos:start="281:14" pos:end="281:40">(<argument pos:start="281:15" pos:end="281:26"><expr pos:start="281:15" pos:end="281:26"><name pos:start="281:15" pos:end="281:20">header</name><operator pos:start="281:21" pos:end="281:21">+</operator><literal type="number" pos:start="281:22" pos:end="281:26">0x21c</literal></expr></argument>, <argument pos:start="281:29" pos:end="281:39"><expr pos:start="281:29" pos:end="281:39"><name pos:start="281:29" pos:end="281:39">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="286:5" pos:end="286:31">/* load kernel and setup */</comment>

    <expr_stmt pos:start="288:5" pos:end="288:31"><expr pos:start="288:5" pos:end="288:30"><name pos:start="288:5" pos:end="288:14">setup_size</name> <operator pos:start="288:16" pos:end="288:16">=</operator> <name pos:start="288:18" pos:end="288:30"><name pos:start="288:18" pos:end="288:23">header</name><index pos:start="288:24" pos:end="288:30">[<expr pos:start="288:25" pos:end="288:29"><literal type="number" pos:start="288:25" pos:end="288:29">0x1f1</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="290:5" pos:end="349:21"><if pos:start="290:5" pos:end="349:21">if <condition pos:start="290:8" pos:end="290:24">(<expr pos:start="290:9" pos:end="290:23"><name pos:start="290:9" pos:end="290:18">setup_size</name> <operator pos:start="290:20" pos:end="290:21">==</operator> <literal type="number" pos:start="290:23" pos:end="290:23">0</literal></expr>)</condition> <block pos:start="290:26" pos:end="349:21">{<block_content pos:start="292:9" pos:end="349:21">

        <expr_stmt pos:start="292:9" pos:end="292:23"><expr pos:start="292:9" pos:end="292:22"><name pos:start="292:9" pos:end="292:18">setup_size</name> <operator pos:start="292:20" pos:end="292:20">=</operator> <literal type="number" pos:start="292:22" pos:end="292:22">4</literal></expr>;</expr_stmt>


    <expr_stmt pos:start="295:5" pos:end="295:36"><expr pos:start="295:5" pos:end="295:35"><name pos:start="295:5" pos:end="295:14">setup_size</name> <operator pos:start="295:16" pos:end="295:16">=</operator> <operator pos:start="295:18" pos:end="295:18">(</operator><name pos:start="295:19" pos:end="295:28">setup_size</name><operator pos:start="295:29" pos:end="295:29">+</operator><literal type="number" pos:start="295:30" pos:end="295:30">1</literal><operator pos:start="295:31" pos:end="295:31">)</operator><operator pos:start="295:32" pos:end="295:32">*</operator><literal type="number" pos:start="295:33" pos:end="295:35">512</literal></expr>;</expr_stmt>





    <expr_stmt pos:start="301:5" pos:end="301:30"><expr pos:start="301:5" pos:end="301:29"><name pos:start="301:5" pos:end="301:15">kernel_size</name> <operator pos:start="301:17" pos:end="301:18">-=</operator> <name pos:start="301:20" pos:end="301:29">setup_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="305:5" pos:end="305:34"><expr pos:start="305:5" pos:end="305:33"><name pos:start="305:5" pos:end="305:9">setup</name>  <operator pos:start="305:12" pos:end="305:12">=</operator> <call pos:start="305:14" pos:end="305:33"><name pos:start="305:14" pos:end="305:21">g_malloc</name><argument_list pos:start="305:22" pos:end="305:33">(<argument pos:start="305:23" pos:end="305:32"><expr pos:start="305:23" pos:end="305:32"><name pos:start="305:23" pos:end="305:32">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:35"><expr pos:start="307:5" pos:end="307:34"><name pos:start="307:5" pos:end="307:10">kernel</name> <operator pos:start="307:12" pos:end="307:12">=</operator> <call pos:start="307:14" pos:end="307:34"><name pos:start="307:14" pos:end="307:21">g_malloc</name><argument_list pos:start="307:22" pos:end="307:34">(<argument pos:start="307:23" pos:end="307:33"><expr pos:start="307:23" pos:end="307:33"><name pos:start="307:23" pos:end="307:33">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:26"><expr pos:start="309:5" pos:end="309:25"><call pos:start="309:5" pos:end="309:25"><name pos:start="309:5" pos:end="309:9">fseek</name><argument_list pos:start="309:10" pos:end="309:25">(<argument pos:start="309:11" pos:end="309:11"><expr pos:start="309:11" pos:end="309:11"><name pos:start="309:11" pos:end="309:11">f</name></expr></argument>, <argument pos:start="309:14" pos:end="309:14"><expr pos:start="309:14" pos:end="309:14"><literal type="number" pos:start="309:14" pos:end="309:14">0</literal></expr></argument>, <argument pos:start="309:17" pos:end="309:24"><expr pos:start="309:17" pos:end="309:24"><name pos:start="309:17" pos:end="309:24">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="311:5" pos:end="349:21"><if pos:start="311:5" pos:end="349:21">if <condition pos:start="311:8" pos:end="311:53">(<expr pos:start="311:9" pos:end="311:52"><call pos:start="311:9" pos:end="311:38"><name pos:start="311:9" pos:end="311:13">fread</name><argument_list pos:start="311:14" pos:end="311:38">(<argument pos:start="311:15" pos:end="311:19"><expr pos:start="311:15" pos:end="311:19"><name pos:start="311:15" pos:end="311:19">setup</name></expr></argument>, <argument pos:start="311:22" pos:end="311:22"><expr pos:start="311:22" pos:end="311:22"><literal type="number" pos:start="311:22" pos:end="311:22">1</literal></expr></argument>, <argument pos:start="311:25" pos:end="311:34"><expr pos:start="311:25" pos:end="311:34"><name pos:start="311:25" pos:end="311:34">setup_size</name></expr></argument>, <argument pos:start="311:37" pos:end="311:37"><expr pos:start="311:37" pos:end="311:37"><name pos:start="311:37" pos:end="311:37">f</name></expr></argument>)</argument_list></call> <operator pos:start="311:40" pos:end="311:41">!=</operator> <name pos:start="311:43" pos:end="311:52">setup_size</name></expr>)</condition> <block pos:start="311:55" pos:end="349:21">{<block_content pos:start="313:9" pos:end="349:21">

        <expr_stmt pos:start="313:9" pos:end="313:44"><expr pos:start="313:9" pos:end="313:43"><call pos:start="313:9" pos:end="313:43"><name pos:start="313:9" pos:end="313:15">fprintf</name><argument_list pos:start="313:16" pos:end="313:43">(<argument pos:start="313:17" pos:end="313:22"><expr pos:start="313:17" pos:end="313:22"><name pos:start="313:17" pos:end="313:22">stderr</name></expr></argument>, <argument pos:start="313:25" pos:end="313:42"><expr pos:start="313:25" pos:end="313:42"><literal type="string" pos:start="313:25" pos:end="313:42">"fread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="317:5" pos:end="349:21"><if pos:start="317:5" pos:end="349:21">if <condition pos:start="317:8" pos:end="317:56">(<expr pos:start="317:9" pos:end="317:55"><call pos:start="317:9" pos:end="317:40"><name pos:start="317:9" pos:end="317:13">fread</name><argument_list pos:start="317:14" pos:end="317:40">(<argument pos:start="317:15" pos:end="317:20"><expr pos:start="317:15" pos:end="317:20"><name pos:start="317:15" pos:end="317:20">kernel</name></expr></argument>, <argument pos:start="317:23" pos:end="317:23"><expr pos:start="317:23" pos:end="317:23"><literal type="number" pos:start="317:23" pos:end="317:23">1</literal></expr></argument>, <argument pos:start="317:26" pos:end="317:36"><expr pos:start="317:26" pos:end="317:36"><name pos:start="317:26" pos:end="317:36">kernel_size</name></expr></argument>, <argument pos:start="317:39" pos:end="317:39"><expr pos:start="317:39" pos:end="317:39"><name pos:start="317:39" pos:end="317:39">f</name></expr></argument>)</argument_list></call> <operator pos:start="317:42" pos:end="317:43">!=</operator> <name pos:start="317:45" pos:end="317:55">kernel_size</name></expr>)</condition> <block pos:start="317:58" pos:end="349:21">{<block_content pos:start="319:9" pos:end="349:21">

        <expr_stmt pos:start="319:9" pos:end="319:44"><expr pos:start="319:9" pos:end="319:43"><call pos:start="319:9" pos:end="319:43"><name pos:start="319:9" pos:end="319:15">fprintf</name><argument_list pos:start="319:16" pos:end="319:43">(<argument pos:start="319:17" pos:end="319:22"><expr pos:start="319:17" pos:end="319:22"><name pos:start="319:17" pos:end="319:22">stderr</name></expr></argument>, <argument pos:start="319:25" pos:end="319:42"><expr pos:start="319:25" pos:end="319:42"><literal type="string" pos:start="319:25" pos:end="319:42">"fread() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="323:5" pos:end="323:14"><expr pos:start="323:5" pos:end="323:13"><call pos:start="323:5" pos:end="323:13"><name pos:start="323:5" pos:end="323:10">fclose</name><argument_list pos:start="323:11" pos:end="323:13">(<argument pos:start="323:12" pos:end="323:12"><expr pos:start="323:12" pos:end="323:12"><name pos:start="323:12" pos:end="323:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:59"><expr pos:start="325:5" pos:end="325:58"><call pos:start="325:5" pos:end="325:58"><name pos:start="325:5" pos:end="325:10">memcpy</name><argument_list pos:start="325:11" pos:end="325:58">(<argument pos:start="325:12" pos:end="325:16"><expr pos:start="325:12" pos:end="325:16"><name pos:start="325:12" pos:end="325:16">setup</name></expr></argument>, <argument pos:start="325:19" pos:end="325:24"><expr pos:start="325:19" pos:end="325:24"><name pos:start="325:19" pos:end="325:24">header</name></expr></argument>, <argument pos:start="325:27" pos:end="325:57"><expr pos:start="325:27" pos:end="325:57"><call pos:start="325:27" pos:end="325:57"><name pos:start="325:27" pos:end="325:29">MIN</name><argument_list pos:start="325:30" pos:end="325:57">(<argument pos:start="325:31" pos:end="325:44"><expr pos:start="325:31" pos:end="325:44"><sizeof pos:start="325:31" pos:end="325:44">sizeof<argument_list pos:start="325:37" pos:end="325:44">(<argument pos:start="325:38" pos:end="325:43"><expr pos:start="325:38" pos:end="325:43"><name pos:start="325:38" pos:end="325:43">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="325:47" pos:end="325:56"><expr pos:start="325:47" pos:end="325:56"><name pos:start="325:47" pos:end="325:56">setup_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:58"><expr pos:start="329:5" pos:end="329:57"><call pos:start="329:5" pos:end="329:57"><name pos:start="329:5" pos:end="329:18">fw_cfg_add_i32</name><argument_list pos:start="329:19" pos:end="329:57">(<argument pos:start="329:20" pos:end="329:25"><expr pos:start="329:20" pos:end="329:25"><name pos:start="329:20" pos:end="329:25">fw_cfg</name></expr></argument>, <argument pos:start="329:28" pos:end="329:45"><expr pos:start="329:28" pos:end="329:45"><name pos:start="329:28" pos:end="329:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="329:48" pos:end="329:56"><expr pos:start="329:48" pos:end="329:56"><name pos:start="329:48" pos:end="329:56">prot_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:60"><expr pos:start="331:5" pos:end="331:59"><call pos:start="331:5" pos:end="331:59"><name pos:start="331:5" pos:end="331:18">fw_cfg_add_i32</name><argument_list pos:start="331:19" pos:end="331:59">(<argument pos:start="331:20" pos:end="331:25"><expr pos:start="331:20" pos:end="331:25"><name pos:start="331:20" pos:end="331:25">fw_cfg</name></expr></argument>, <argument pos:start="331:28" pos:end="331:45"><expr pos:start="331:28" pos:end="331:45"><name pos:start="331:28" pos:end="331:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="331:48" pos:end="331:58"><expr pos:start="331:48" pos:end="331:58"><name pos:start="331:48" pos:end="331:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:70"><expr pos:start="333:5" pos:end="333:69"><call pos:start="333:5" pos:end="333:69"><name pos:start="333:5" pos:end="333:20">fw_cfg_add_bytes</name><argument_list pos:start="333:21" pos:end="333:69">(<argument pos:start="333:22" pos:end="333:27"><expr pos:start="333:22" pos:end="333:27"><name pos:start="333:22" pos:end="333:27">fw_cfg</name></expr></argument>, <argument pos:start="333:30" pos:end="333:47"><expr pos:start="333:30" pos:end="333:47"><name pos:start="333:30" pos:end="333:47">FW_CFG_KERNEL_DATA</name></expr></argument>, <argument pos:start="333:50" pos:end="333:55"><expr pos:start="333:50" pos:end="333:55"><name pos:start="333:50" pos:end="333:55">kernel</name></expr></argument>, <argument pos:start="333:58" pos:end="333:68"><expr pos:start="333:58" pos:end="333:68"><name pos:start="333:58" pos:end="333:68">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="337:5" pos:end="337:57"><expr pos:start="337:5" pos:end="337:56"><call pos:start="337:5" pos:end="337:56"><name pos:start="337:5" pos:end="337:18">fw_cfg_add_i32</name><argument_list pos:start="337:19" pos:end="337:56">(<argument pos:start="337:20" pos:end="337:25"><expr pos:start="337:20" pos:end="337:25"><name pos:start="337:20" pos:end="337:25">fw_cfg</name></expr></argument>, <argument pos:start="337:28" pos:end="337:44"><expr pos:start="337:28" pos:end="337:44"><name pos:start="337:28" pos:end="337:44">FW_CFG_SETUP_ADDR</name></expr></argument>, <argument pos:start="337:47" pos:end="337:55"><expr pos:start="337:47" pos:end="337:55"><name pos:start="337:47" pos:end="337:55">real_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:58"><expr pos:start="339:5" pos:end="339:57"><call pos:start="339:5" pos:end="339:57"><name pos:start="339:5" pos:end="339:18">fw_cfg_add_i32</name><argument_list pos:start="339:19" pos:end="339:57">(<argument pos:start="339:20" pos:end="339:25"><expr pos:start="339:20" pos:end="339:25"><name pos:start="339:20" pos:end="339:25">fw_cfg</name></expr></argument>, <argument pos:start="339:28" pos:end="339:44"><expr pos:start="339:28" pos:end="339:44"><name pos:start="339:28" pos:end="339:44">FW_CFG_SETUP_SIZE</name></expr></argument>, <argument pos:start="339:47" pos:end="339:56"><expr pos:start="339:47" pos:end="339:56"><name pos:start="339:47" pos:end="339:56">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:67"><expr pos:start="341:5" pos:end="341:66"><call pos:start="341:5" pos:end="341:66"><name pos:start="341:5" pos:end="341:20">fw_cfg_add_bytes</name><argument_list pos:start="341:21" pos:end="341:66">(<argument pos:start="341:22" pos:end="341:27"><expr pos:start="341:22" pos:end="341:27"><name pos:start="341:22" pos:end="341:27">fw_cfg</name></expr></argument>, <argument pos:start="341:30" pos:end="341:46"><expr pos:start="341:30" pos:end="341:46"><name pos:start="341:30" pos:end="341:46">FW_CFG_SETUP_DATA</name></expr></argument>, <argument pos:start="341:49" pos:end="341:53"><expr pos:start="341:49" pos:end="341:53"><name pos:start="341:49" pos:end="341:53">setup</name></expr></argument>, <argument pos:start="341:56" pos:end="341:65"><expr pos:start="341:56" pos:end="341:65"><name pos:start="341:56" pos:end="341:65">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="345:5" pos:end="345:54"><expr pos:start="345:5" pos:end="345:53"><name pos:start="345:5" pos:end="345:30"><name pos:start="345:5" pos:end="345:14">option_rom</name><index pos:start="345:15" pos:end="345:30">[<expr pos:start="345:16" pos:end="345:29"><name pos:start="345:16" pos:end="345:29">nb_option_roms</name></expr>]</index></name><operator pos:start="345:31" pos:end="345:31">.</operator><name pos:start="345:32" pos:end="345:35">name</name> <operator pos:start="345:37" pos:end="345:37">=</operator> <literal type="string" pos:start="345:39" pos:end="345:53">"linuxboot.bin"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:45"><expr pos:start="347:5" pos:end="347:44"><name pos:start="347:5" pos:end="347:30"><name pos:start="347:5" pos:end="347:14">option_rom</name><index pos:start="347:15" pos:end="347:30">[<expr pos:start="347:16" pos:end="347:29"><name pos:start="347:16" pos:end="347:29">nb_option_roms</name></expr>]</index></name><operator pos:start="347:31" pos:end="347:31">.</operator><name pos:start="347:32" pos:end="347:40">bootindex</name> <operator pos:start="347:42" pos:end="347:42">=</operator> <literal type="number" pos:start="347:44" pos:end="347:44">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:21"><expr pos:start="349:5" pos:end="349:20"><name pos:start="349:5" pos:end="349:18">nb_option_roms</name><operator pos:start="349:19" pos:end="349:20">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
