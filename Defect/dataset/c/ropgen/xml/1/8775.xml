<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8775.c" pos:tabs="8"><function pos:start="1:1" pos:end="357:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">scsi_disk_emulate_command</name><parameter_list pos:start="1:37" pos:end="1:69">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:48">SCSIDiskReq</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">r</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:68">outbuf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="357:1">{<block_content pos:start="5:5" pos:end="355:14">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIRequest</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">req</name> <init pos:start="5:22" pos:end="5:30">= <expr pos:start="5:24" pos:end="5:30"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:25">r</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:30">req</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:63">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:62"><expr pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:57">req</name><operator pos:start="7:58" pos:end="7:59">-&gt;</operator><name pos:start="7:60" pos:end="7:62">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">nb_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">buflen</name> <init pos:start="11:16" pos:end="11:18">= <expr pos:start="11:18" pos:end="11:18"><literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <switch pos:start="17:5" pos:end="335:5">switch <condition pos:start="17:12" pos:end="17:28">(<expr pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:15">req</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:20">cmd</name><operator pos:start="17:21" pos:end="17:21">.</operator><name pos:start="17:22" pos:end="17:24">buf</name><index pos:start="17:25" pos:end="17:27">[<expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="17:30" pos:end="335:5">{<block_content pos:start="19:5" pos:end="333:29">

    <case pos:start="19:5" pos:end="19:25">case <expr pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:24">TEST_UNIT_READY</name></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="23:27"><if pos:start="21:9" pos:end="23:27">if <condition pos:start="21:12" pos:end="21:37">(<expr pos:start="21:13" pos:end="21:36"><operator pos:start="21:13" pos:end="21:13">!</operator><call pos:start="21:14" pos:end="21:36"><name pos:start="21:14" pos:end="21:29">bdrv_is_inserted</name><argument_list pos:start="21:30" pos:end="21:36">(<argument pos:start="21:31" pos:end="21:35"><expr pos:start="21:31" pos:end="21:35"><name pos:start="21:31" pos:end="21:35"><name pos:start="21:31" pos:end="21:31">s</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:35">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:27"><block_content pos:start="23:13" pos:end="23:27">

            <goto pos:start="23:13" pos:end="23:27">goto <name pos:start="23:18" pos:end="23:26">not_ready</name>;</goto></block_content></block></if></if_stmt>

	<break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:23">case <expr pos:start="27:10" pos:end="27:22"><name pos:start="27:10" pos:end="27:22">REQUEST_SENSE</name></expr>:</case>

        <if_stmt pos:start="29:9" pos:end="31:33"><if pos:start="29:9" pos:end="31:33">if <condition pos:start="29:12" pos:end="29:30">(<expr pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:15">req</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:20">cmd</name><operator pos:start="29:21" pos:end="29:21">.</operator><name pos:start="29:22" pos:end="29:25">xfer</name></name> <operator pos:start="29:27" pos:end="29:27">&lt;</operator> <literal type="number" pos:start="29:29" pos:end="29:29">4</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:33"><block_content pos:start="31:13" pos:end="31:33">

            <goto pos:start="31:13" pos:end="31:33">goto <name pos:start="31:18" pos:end="31:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:29"><expr pos:start="33:9" pos:end="33:28"><call pos:start="33:9" pos:end="33:28"><name pos:start="33:9" pos:end="33:14">memset</name><argument_list pos:start="33:15" pos:end="33:28">(<argument pos:start="33:16" pos:end="33:21"><expr pos:start="33:16" pos:end="33:21"><name pos:start="33:16" pos:end="33:21">outbuf</name></expr></argument>, <argument pos:start="33:24" pos:end="33:24"><expr pos:start="33:24" pos:end="33:24"><literal type="number" pos:start="33:24" pos:end="33:24">0</literal></expr></argument>, <argument pos:start="33:27" pos:end="33:27"><expr pos:start="33:27" pos:end="33:27"><literal type="number" pos:start="33:27" pos:end="33:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:19"><expr pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:14">buflen</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="51:9"><if pos:start="37:9" pos:end="51:9">if <condition pos:start="37:12" pos:end="37:61">(<expr pos:start="37:13" pos:end="37:60"><name pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">sense</name><operator pos:start="37:21" pos:end="37:21">.</operator><name pos:start="37:22" pos:end="37:24">key</name></name> <operator pos:start="37:26" pos:end="37:27">==</operator> <name pos:start="37:29" pos:end="37:37">NOT_READY</name> <operator pos:start="37:39" pos:end="37:40">&amp;&amp;</operator> <name pos:start="37:42" pos:end="37:54"><name pos:start="37:42" pos:end="37:44">req</name><operator pos:start="37:45" pos:end="37:46">-&gt;</operator><name pos:start="37:47" pos:end="37:49">cmd</name><operator pos:start="37:50" pos:end="37:50">.</operator><name pos:start="37:51" pos:end="37:54">xfer</name></name> <operator pos:start="37:56" pos:end="37:57">&gt;=</operator> <literal type="number" pos:start="37:59" pos:end="37:60">18</literal></expr>)</condition> <block pos:start="37:63" pos:end="51:9">{<block_content pos:start="39:13" pos:end="49:27">

            <expr_stmt pos:start="39:13" pos:end="39:34"><expr pos:start="39:13" pos:end="39:33"><call pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:18">memset</name><argument_list pos:start="39:19" pos:end="39:33">(<argument pos:start="39:20" pos:end="39:25"><expr pos:start="39:20" pos:end="39:25"><name pos:start="39:20" pos:end="39:25">outbuf</name></expr></argument>, <argument pos:start="39:28" pos:end="39:28"><expr pos:start="39:28" pos:end="39:28"><literal type="number" pos:start="39:28" pos:end="39:28">0</literal></expr></argument>, <argument pos:start="39:31" pos:end="39:32"><expr pos:start="39:31" pos:end="39:32"><literal type="number" pos:start="39:31" pos:end="39:32">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:24"><expr pos:start="41:13" pos:end="41:23"><name pos:start="41:13" pos:end="41:18">buflen</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:23">18</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:18">outbuf</name><index pos:start="43:19" pos:end="43:21">[<expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">7</literal></expr>]</index></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:26">10</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="45:13" pos:end="45:54">/* asc 0x3a, ascq 0: Medium not present */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:30"><expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:18">outbuf</name><index pos:start="47:19" pos:end="47:22">[<expr pos:start="47:20" pos:end="47:21"><literal type="number" pos:start="47:20" pos:end="47:21">12</literal></expr>]</index></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <literal type="number" pos:start="47:26" pos:end="47:29">0x3a</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:27"><expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:18">outbuf</name><index pos:start="49:19" pos:end="49:22">[<expr pos:start="49:20" pos:end="49:21"><literal type="number" pos:start="49:20" pos:end="49:21">13</literal></expr>]</index></name> <operator pos:start="49:24" pos:end="49:24">=</operator> <literal type="number" pos:start="49:26" pos:end="49:26">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:25"><expr pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:14">outbuf</name><index pos:start="53:15" pos:end="53:17">[<expr pos:start="53:16" pos:end="53:16"><literal type="number" pos:start="53:16" pos:end="53:16">0</literal></expr>]</index></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:24">0xf0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:22"><expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:14">outbuf</name><index pos:start="55:15" pos:end="55:17">[<expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">1</literal></expr>]</index></name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:14">outbuf</name><index pos:start="57:15" pos:end="57:17">[<expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">2</literal></expr>]</index></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:21">s</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:28">sense</name><operator pos:start="57:29" pos:end="57:29">.</operator><name pos:start="57:30" pos:end="57:32">key</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><call pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:29">scsi_disk_clear_sense</name><argument_list pos:start="59:30" pos:end="59:32">(<argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><name pos:start="59:31" pos:end="59:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:17">case <expr pos:start="63:10" pos:end="63:16"><name pos:start="63:10" pos:end="63:16">INQUIRY</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:56"><expr pos:start="65:9" pos:end="65:55"><name pos:start="65:9" pos:end="65:14">buflen</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:55"><name pos:start="65:18" pos:end="65:42">scsi_disk_emulate_inquiry</name><argument_list pos:start="65:43" pos:end="65:55">(<argument pos:start="65:44" pos:end="65:46"><expr pos:start="65:44" pos:end="65:46"><name pos:start="65:44" pos:end="65:46">req</name></expr></argument>, <argument pos:start="65:49" pos:end="65:54"><expr pos:start="65:49" pos:end="65:54"><name pos:start="65:49" pos:end="65:54">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:33"><if pos:start="67:9" pos:end="69:33">if <condition pos:start="67:12" pos:end="67:23">(<expr pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:18">buflen</name> <operator pos:start="67:20" pos:end="67:20">&lt;</operator> <literal type="number" pos:start="67:22" pos:end="67:22">0</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:33"><block_content pos:start="69:13" pos:end="69:33">

            <goto pos:start="69:13" pos:end="69:33">goto <name pos:start="69:18" pos:end="69:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

	<break pos:start="71:9" pos:end="71:14">break;</break>

    <case pos:start="73:5" pos:end="73:20">case <expr pos:start="73:10" pos:end="73:19"><name pos:start="73:10" pos:end="73:19">MODE_SENSE</name></expr>:</case>

    <case pos:start="75:5" pos:end="75:23">case <expr pos:start="75:10" pos:end="75:22"><name pos:start="75:10" pos:end="75:22">MODE_SENSE_10</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:59"><expr pos:start="77:9" pos:end="77:58"><name pos:start="77:9" pos:end="77:14">buflen</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <call pos:start="77:18" pos:end="77:58"><name pos:start="77:18" pos:end="77:45">scsi_disk_emulate_mode_sense</name><argument_list pos:start="77:46" pos:end="77:58">(<argument pos:start="77:47" pos:end="77:49"><expr pos:start="77:47" pos:end="77:49"><name pos:start="77:47" pos:end="77:49">req</name></expr></argument>, <argument pos:start="77:52" pos:end="77:57"><expr pos:start="77:52" pos:end="77:57"><name pos:start="77:52" pos:end="77:57">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="81:33"><if pos:start="79:9" pos:end="81:33">if <condition pos:start="79:12" pos:end="79:23">(<expr pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:18">buflen</name> <operator pos:start="79:20" pos:end="79:20">&lt;</operator> <literal type="number" pos:start="79:22" pos:end="79:22">0</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:33"><block_content pos:start="81:13" pos:end="81:33">

            <goto pos:start="81:13" pos:end="81:33">goto <name pos:start="81:18" pos:end="81:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:18">case <expr pos:start="85:10" pos:end="85:17"><name pos:start="85:10" pos:end="85:17">READ_TOC</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:57"><expr pos:start="87:9" pos:end="87:56"><name pos:start="87:9" pos:end="87:14">buflen</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:56"><name pos:start="87:18" pos:end="87:43">scsi_disk_emulate_read_toc</name><argument_list pos:start="87:44" pos:end="87:56">(<argument pos:start="87:45" pos:end="87:47"><expr pos:start="87:45" pos:end="87:47"><name pos:start="87:45" pos:end="87:47">req</name></expr></argument>, <argument pos:start="87:50" pos:end="87:55"><expr pos:start="87:50" pos:end="87:55"><name pos:start="87:50" pos:end="87:55">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="91:33"><if pos:start="89:9" pos:end="91:33">if <condition pos:start="89:12" pos:end="89:23">(<expr pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:18">buflen</name> <operator pos:start="89:20" pos:end="89:20">&lt;</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:33"><block_content pos:start="91:13" pos:end="91:33">

            <goto pos:start="91:13" pos:end="91:33">goto <name pos:start="91:18" pos:end="91:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:17">case <expr pos:start="95:10" pos:end="95:16"><name pos:start="95:10" pos:end="95:16">RESERVE</name></expr>:</case>

        <if_stmt pos:start="97:9" pos:end="99:33"><if pos:start="97:9" pos:end="99:33">if <condition pos:start="97:12" pos:end="97:32">(<expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:27"><name pos:start="97:13" pos:end="97:15">req</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:20">cmd</name><operator pos:start="97:21" pos:end="97:21">.</operator><name pos:start="97:22" pos:end="97:24">buf</name><index pos:start="97:25" pos:end="97:27">[<expr pos:start="97:26" pos:end="97:26"><literal type="number" pos:start="97:26" pos:end="97:26">1</literal></expr>]</index></name> <operator pos:start="97:29" pos:end="97:29">&amp;</operator> <literal type="number" pos:start="97:31" pos:end="97:31">1</literal></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:33"><block_content pos:start="99:13" pos:end="99:33">

            <goto pos:start="99:13" pos:end="99:33">goto <name pos:start="99:18" pos:end="99:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:20">case <expr pos:start="103:10" pos:end="103:19"><name pos:start="103:10" pos:end="103:19">RESERVE_10</name></expr>:</case>

        <if_stmt pos:start="105:9" pos:end="107:33"><if pos:start="105:9" pos:end="107:33">if <condition pos:start="105:12" pos:end="105:32">(<expr pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:15">req</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:20">cmd</name><operator pos:start="105:21" pos:end="105:21">.</operator><name pos:start="105:22" pos:end="105:24">buf</name><index pos:start="105:25" pos:end="105:27">[<expr pos:start="105:26" pos:end="105:26"><literal type="number" pos:start="105:26" pos:end="105:26">1</literal></expr>]</index></name> <operator pos:start="105:29" pos:end="105:29">&amp;</operator> <literal type="number" pos:start="105:31" pos:end="105:31">3</literal></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:33"><block_content pos:start="107:13" pos:end="107:33">

            <goto pos:start="107:13" pos:end="107:33">goto <name pos:start="107:18" pos:end="107:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:17">case <expr pos:start="111:10" pos:end="111:16"><name pos:start="111:10" pos:end="111:16">RELEASE</name></expr>:</case>

        <if_stmt pos:start="113:9" pos:end="115:33"><if pos:start="113:9" pos:end="115:33">if <condition pos:start="113:12" pos:end="113:32">(<expr pos:start="113:13" pos:end="113:31"><name pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:15">req</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:20">cmd</name><operator pos:start="113:21" pos:end="113:21">.</operator><name pos:start="113:22" pos:end="113:24">buf</name><index pos:start="113:25" pos:end="113:27">[<expr pos:start="113:26" pos:end="113:26"><literal type="number" pos:start="113:26" pos:end="113:26">1</literal></expr>]</index></name> <operator pos:start="113:29" pos:end="113:29">&amp;</operator> <literal type="number" pos:start="113:31" pos:end="113:31">1</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:33"><block_content pos:start="115:13" pos:end="115:33">

            <goto pos:start="115:13" pos:end="115:33">goto <name pos:start="115:18" pos:end="115:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:20">case <expr pos:start="119:10" pos:end="119:19"><name pos:start="119:10" pos:end="119:19">RELEASE_10</name></expr>:</case>

        <if_stmt pos:start="121:9" pos:end="123:33"><if pos:start="121:9" pos:end="123:33">if <condition pos:start="121:12" pos:end="121:32">(<expr pos:start="121:13" pos:end="121:31"><name pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:15">req</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:20">cmd</name><operator pos:start="121:21" pos:end="121:21">.</operator><name pos:start="121:22" pos:end="121:24">buf</name><index pos:start="121:25" pos:end="121:27">[<expr pos:start="121:26" pos:end="121:26"><literal type="number" pos:start="121:26" pos:end="121:26">1</literal></expr>]</index></name> <operator pos:start="121:29" pos:end="121:29">&amp;</operator> <literal type="number" pos:start="121:31" pos:end="121:31">3</literal></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:33"><block_content pos:start="123:13" pos:end="123:33">

            <goto pos:start="123:13" pos:end="123:33">goto <name pos:start="123:18" pos:end="123:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:20">case <expr pos:start="127:10" pos:end="127:19"><name pos:start="127:10" pos:end="127:19">START_STOP</name></expr>:</case>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:62">(<expr pos:start="129:13" pos:end="129:61"><name pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:13">s</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:25">drive_kind</name></name> <operator pos:start="129:27" pos:end="129:28">==</operator> <name pos:start="129:30" pos:end="129:36">SCSI_CD</name> <operator pos:start="129:38" pos:end="129:39">&amp;&amp;</operator> <operator pos:start="129:41" pos:end="129:41">(</operator><name pos:start="129:42" pos:end="129:56"><name pos:start="129:42" pos:end="129:44">req</name><operator pos:start="129:45" pos:end="129:46">-&gt;</operator><name pos:start="129:47" pos:end="129:49">cmd</name><operator pos:start="129:50" pos:end="129:50">.</operator><name pos:start="129:51" pos:end="129:53">buf</name><index pos:start="129:54" pos:end="129:56">[<expr pos:start="129:55" pos:end="129:55"><literal type="number" pos:start="129:55" pos:end="129:55">4</literal></expr>]</index></name> <operator pos:start="129:58" pos:end="129:58">&amp;</operator> <literal type="number" pos:start="129:60" pos:end="129:60">2</literal><operator pos:start="129:61" pos:end="129:61">)</operator></expr>)</condition> <block pos:start="129:64" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:54">

            <comment type="block" pos:start="131:13" pos:end="131:35">/* load/eject medium */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:54"><expr pos:start="133:13" pos:end="133:53"><call pos:start="133:13" pos:end="133:53"><name pos:start="133:13" pos:end="133:22">bdrv_eject</name><argument_list pos:start="133:23" pos:end="133:53">(<argument pos:start="133:24" pos:end="133:28"><expr pos:start="133:24" pos:end="133:28"><name pos:start="133:24" pos:end="133:28"><name pos:start="133:24" pos:end="133:24">s</name><operator pos:start="133:25" pos:end="133:26">-&gt;</operator><name pos:start="133:27" pos:end="133:28">bs</name></name></expr></argument>, <argument pos:start="133:31" pos:end="133:52"><expr pos:start="133:31" pos:end="133:52"><operator pos:start="133:31" pos:end="133:31">!</operator><operator pos:start="133:32" pos:end="133:32">(</operator><name pos:start="133:33" pos:end="133:47"><name pos:start="133:33" pos:end="133:35">req</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:40">cmd</name><operator pos:start="133:41" pos:end="133:41">.</operator><name pos:start="133:42" pos:end="133:44">buf</name><index pos:start="133:45" pos:end="133:47">[<expr pos:start="133:46" pos:end="133:46"><literal type="number" pos:start="133:46" pos:end="133:46">4</literal></expr>]</index></name> <operator pos:start="133:49" pos:end="133:49">&amp;</operator> <literal type="number" pos:start="133:51" pos:end="133:51">1</literal><operator pos:start="133:52" pos:end="133:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

	<break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:30">case <expr pos:start="139:10" pos:end="139:29"><name pos:start="139:10" pos:end="139:29">ALLOW_MEDIUM_REMOVAL</name></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:52"><expr pos:start="141:9" pos:end="141:51"><call pos:start="141:9" pos:end="141:51"><name pos:start="141:9" pos:end="141:23">bdrv_set_locked</name><argument_list pos:start="141:24" pos:end="141:51">(<argument pos:start="141:25" pos:end="141:29"><expr pos:start="141:25" pos:end="141:29"><name pos:start="141:25" pos:end="141:29"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:29">bs</name></name></expr></argument>, <argument pos:start="141:32" pos:end="141:50"><expr pos:start="141:32" pos:end="141:50"><name pos:start="141:32" pos:end="141:46"><name pos:start="141:32" pos:end="141:34">req</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:39">cmd</name><operator pos:start="141:40" pos:end="141:40">.</operator><name pos:start="141:41" pos:end="141:43">buf</name><index pos:start="141:44" pos:end="141:46">[<expr pos:start="141:45" pos:end="141:45"><literal type="number" pos:start="141:45" pos:end="141:45">4</literal></expr>]</index></name> <operator pos:start="141:48" pos:end="141:48">&amp;</operator> <literal type="number" pos:start="141:50" pos:end="141:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:23">case <expr pos:start="145:10" pos:end="145:22"><name pos:start="145:10" pos:end="145:22">READ_CAPACITY</name></expr>:</case>

        <comment type="block" pos:start="147:9" pos:end="147:61">/* The normal LEN field for this command is zero.  */</comment>

	<expr_stmt pos:start="149:9" pos:end="149:29"><expr pos:start="149:9" pos:end="149:28"><call pos:start="149:9" pos:end="149:28"><name pos:start="149:9" pos:end="149:14">memset</name><argument_list pos:start="149:15" pos:end="149:28">(<argument pos:start="149:16" pos:end="149:21"><expr pos:start="149:16" pos:end="149:21"><name pos:start="149:16" pos:end="149:21">outbuf</name></expr></argument>, <argument pos:start="149:24" pos:end="149:24"><expr pos:start="149:24" pos:end="149:24"><literal type="number" pos:start="149:24" pos:end="149:24">0</literal></expr></argument>, <argument pos:start="149:27" pos:end="149:27"><expr pos:start="149:27" pos:end="149:27"><literal type="number" pos:start="149:27" pos:end="149:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="151:9" pos:end="151:46"><expr pos:start="151:9" pos:end="151:45"><call pos:start="151:9" pos:end="151:45"><name pos:start="151:9" pos:end="151:25">bdrv_get_geometry</name><argument_list pos:start="151:26" pos:end="151:45">(<argument pos:start="151:27" pos:end="151:31"><expr pos:start="151:27" pos:end="151:31"><name pos:start="151:27" pos:end="151:31"><name pos:start="151:27" pos:end="151:27">s</name><operator pos:start="151:28" pos:end="151:29">-&gt;</operator><name pos:start="151:30" pos:end="151:31">bs</name></name></expr></argument>, <argument pos:start="151:34" pos:end="151:44"><expr pos:start="151:34" pos:end="151:44"><operator pos:start="151:34" pos:end="151:34">&amp;</operator><name pos:start="151:35" pos:end="151:44">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="155:27"><if pos:start="153:9" pos:end="155:27">if <condition pos:start="153:12" pos:end="153:24">(<expr pos:start="153:13" pos:end="153:23"><operator pos:start="153:13" pos:end="153:13">!</operator><name pos:start="153:14" pos:end="153:23">nb_sectors</name></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:27"><block_content pos:start="155:13" pos:end="155:27">

            <goto pos:start="155:13" pos:end="155:27">goto <name pos:start="155:18" pos:end="155:26">not_ready</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:38"><expr pos:start="157:9" pos:end="157:37"><name pos:start="157:9" pos:end="157:18">nb_sectors</name> <operator pos:start="157:20" pos:end="157:21">/=</operator> <name pos:start="157:23" pos:end="157:37"><name pos:start="157:23" pos:end="157:23">s</name><operator pos:start="157:24" pos:end="157:25">-&gt;</operator><name pos:start="157:26" pos:end="157:37">cluster_size</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="159:9" pos:end="159:64">/* Returned value is the address of the last sector.  */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:21"><expr pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:18">nb_sectors</name><operator pos:start="161:19" pos:end="161:20">--</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="163:9" pos:end="163:67">/* Remember the new size for read/write sanity checking. */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:32"><expr pos:start="165:9" pos:end="165:31"><name pos:start="165:9" pos:end="165:18"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:18">max_lba</name></name> <operator pos:start="165:20" pos:end="165:20">=</operator> <name pos:start="165:22" pos:end="165:31">nb_sectors</name></expr>;</expr_stmt>

        <comment type="block" pos:start="167:9" pos:end="167:68">/* Clip to 2TB, instead of returning capacity modulo 2TB. */</comment>

        <if_stmt pos:start="169:9" pos:end="171:36"><if pos:start="169:9" pos:end="171:36">if <condition pos:start="169:12" pos:end="169:36">(<expr pos:start="169:13" pos:end="169:35"><name pos:start="169:13" pos:end="169:22">nb_sectors</name> <operator pos:start="169:24" pos:end="169:24">&gt;</operator> <name pos:start="169:26" pos:end="169:35">UINT32_MAX</name></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:36"><block_content pos:start="171:13" pos:end="171:36">

            <expr_stmt pos:start="171:13" pos:end="171:36"><expr pos:start="171:13" pos:end="171:35"><name pos:start="171:13" pos:end="171:22">nb_sectors</name> <operator pos:start="171:24" pos:end="171:24">=</operator> <name pos:start="171:26" pos:end="171:35">UINT32_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:46"><expr pos:start="173:9" pos:end="173:45"><name pos:start="173:9" pos:end="173:17"><name pos:start="173:9" pos:end="173:14">outbuf</name><index pos:start="173:15" pos:end="173:17">[<expr pos:start="173:16" pos:end="173:16"><literal type="number" pos:start="173:16" pos:end="173:16">0</literal></expr>]</index></name> <operator pos:start="173:19" pos:end="173:19">=</operator> <operator pos:start="173:21" pos:end="173:21">(</operator><name pos:start="173:22" pos:end="173:31">nb_sectors</name> <operator pos:start="173:33" pos:end="173:34">&gt;&gt;</operator> <literal type="number" pos:start="173:36" pos:end="173:37">24</literal><operator pos:start="173:38" pos:end="173:38">)</operator> <operator pos:start="173:40" pos:end="173:40">&amp;</operator> <literal type="number" pos:start="173:42" pos:end="173:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:46"><expr pos:start="175:9" pos:end="175:45"><name pos:start="175:9" pos:end="175:17"><name pos:start="175:9" pos:end="175:14">outbuf</name><index pos:start="175:15" pos:end="175:17">[<expr pos:start="175:16" pos:end="175:16"><literal type="number" pos:start="175:16" pos:end="175:16">1</literal></expr>]</index></name> <operator pos:start="175:19" pos:end="175:19">=</operator> <operator pos:start="175:21" pos:end="175:21">(</operator><name pos:start="175:22" pos:end="175:31">nb_sectors</name> <operator pos:start="175:33" pos:end="175:34">&gt;&gt;</operator> <literal type="number" pos:start="175:36" pos:end="175:37">16</literal><operator pos:start="175:38" pos:end="175:38">)</operator> <operator pos:start="175:40" pos:end="175:40">&amp;</operator> <literal type="number" pos:start="175:42" pos:end="175:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:45"><expr pos:start="177:9" pos:end="177:44"><name pos:start="177:9" pos:end="177:17"><name pos:start="177:9" pos:end="177:14">outbuf</name><index pos:start="177:15" pos:end="177:17">[<expr pos:start="177:16" pos:end="177:16"><literal type="number" pos:start="177:16" pos:end="177:16">2</literal></expr>]</index></name> <operator pos:start="177:19" pos:end="177:19">=</operator> <operator pos:start="177:21" pos:end="177:21">(</operator><name pos:start="177:22" pos:end="177:31">nb_sectors</name> <operator pos:start="177:33" pos:end="177:34">&gt;&gt;</operator> <literal type="number" pos:start="177:36" pos:end="177:36">8</literal><operator pos:start="177:37" pos:end="177:37">)</operator> <operator pos:start="177:39" pos:end="177:39">&amp;</operator> <literal type="number" pos:start="177:41" pos:end="177:44">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:38"><expr pos:start="179:9" pos:end="179:37"><name pos:start="179:9" pos:end="179:17"><name pos:start="179:9" pos:end="179:14">outbuf</name><index pos:start="179:15" pos:end="179:17">[<expr pos:start="179:16" pos:end="179:16"><literal type="number" pos:start="179:16" pos:end="179:16">3</literal></expr>]</index></name> <operator pos:start="179:19" pos:end="179:19">=</operator> <name pos:start="179:21" pos:end="179:30">nb_sectors</name> <operator pos:start="179:32" pos:end="179:32">&amp;</operator> <literal type="number" pos:start="179:34" pos:end="179:37">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:22"><expr pos:start="181:9" pos:end="181:21"><name pos:start="181:9" pos:end="181:17"><name pos:start="181:9" pos:end="181:14">outbuf</name><index pos:start="181:15" pos:end="181:17">[<expr pos:start="181:16" pos:end="181:16"><literal type="number" pos:start="181:16" pos:end="181:16">4</literal></expr>]</index></name> <operator pos:start="181:19" pos:end="181:19">=</operator> <literal type="number" pos:start="181:21" pos:end="181:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:22"><expr pos:start="183:9" pos:end="183:21"><name pos:start="183:9" pos:end="183:17"><name pos:start="183:9" pos:end="183:14">outbuf</name><index pos:start="183:15" pos:end="183:17">[<expr pos:start="183:16" pos:end="183:16"><literal type="number" pos:start="183:16" pos:end="183:16">5</literal></expr>]</index></name> <operator pos:start="183:19" pos:end="183:19">=</operator> <literal type="number" pos:start="183:21" pos:end="183:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:40"><expr pos:start="185:9" pos:end="185:39"><name pos:start="185:9" pos:end="185:17"><name pos:start="185:9" pos:end="185:14">outbuf</name><index pos:start="185:15" pos:end="185:17">[<expr pos:start="185:16" pos:end="185:16"><literal type="number" pos:start="185:16" pos:end="185:16">6</literal></expr>]</index></name> <operator pos:start="185:19" pos:end="185:19">=</operator> <name pos:start="185:21" pos:end="185:35"><name pos:start="185:21" pos:end="185:21">s</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:35">cluster_size</name></name> <operator pos:start="185:37" pos:end="185:37">*</operator> <literal type="number" pos:start="185:39" pos:end="185:39">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:22"><expr pos:start="187:9" pos:end="187:21"><name pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:14">outbuf</name><index pos:start="187:15" pos:end="187:17">[<expr pos:start="187:16" pos:end="187:16"><literal type="number" pos:start="187:16" pos:end="187:16">7</literal></expr>]</index></name> <operator pos:start="187:19" pos:end="187:19">=</operator> <literal type="number" pos:start="187:21" pos:end="187:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:19"><expr pos:start="189:9" pos:end="189:18"><name pos:start="189:9" pos:end="189:14">buflen</name> <operator pos:start="189:16" pos:end="189:16">=</operator> <literal type="number" pos:start="189:18" pos:end="189:18">8</literal></expr>;</expr_stmt>

	<break pos:start="191:9" pos:end="191:14">break;</break>

    <case pos:start="193:5" pos:end="193:27">case <expr pos:start="193:10" pos:end="193:26"><name pos:start="193:10" pos:end="193:26">SYNCHRONIZE_CACHE</name></expr>:</case>

        <expr_stmt pos:start="195:9" pos:end="195:32"><expr pos:start="195:9" pos:end="195:31"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:31"><name pos:start="195:15" pos:end="195:24">bdrv_flush</name><argument_list pos:start="195:25" pos:end="195:31">(<argument pos:start="195:26" pos:end="195:30"><expr pos:start="195:26" pos:end="195:30"><name pos:start="195:26" pos:end="195:30"><name pos:start="195:26" pos:end="195:26">s</name><operator pos:start="195:27" pos:end="195:28">-&gt;</operator><name pos:start="195:29" pos:end="195:30">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="205:9"><if pos:start="197:9" pos:end="205:9">if <condition pos:start="197:12" pos:end="197:20">(<expr pos:start="197:13" pos:end="197:19"><name pos:start="197:13" pos:end="197:15">ret</name> <operator pos:start="197:17" pos:end="197:17">&lt;</operator> <literal type="number" pos:start="197:19" pos:end="197:19">0</literal></expr>)</condition> <block pos:start="197:22" pos:end="205:9">{<block_content pos:start="199:13" pos:end="203:13">

            <if_stmt pos:start="199:13" pos:end="203:13"><if pos:start="199:13" pos:end="203:13">if <condition pos:start="199:16" pos:end="199:75">(<expr pos:start="199:17" pos:end="199:74"><call pos:start="199:17" pos:end="199:74"><name pos:start="199:17" pos:end="199:36">scsi_handle_rw_error</name><argument_list pos:start="199:37" pos:end="199:74">(<argument pos:start="199:38" pos:end="199:38"><expr pos:start="199:38" pos:end="199:38"><name pos:start="199:38" pos:end="199:38">r</name></expr></argument>, <argument pos:start="199:41" pos:end="199:44"><expr pos:start="199:41" pos:end="199:44"><operator pos:start="199:41" pos:end="199:41">-</operator><name pos:start="199:42" pos:end="199:44">ret</name></expr></argument>, <argument pos:start="199:47" pos:end="199:73"><expr pos:start="199:47" pos:end="199:73"><name pos:start="199:47" pos:end="199:73">SCSI_REQ_STATUS_RETRY_FLUSH</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:77" pos:end="203:13">{<block_content pos:start="201:17" pos:end="201:26">

                <return pos:start="201:17" pos:end="201:26">return <expr pos:start="201:24" pos:end="201:25"><operator pos:start="201:24" pos:end="201:24">-</operator><literal type="number" pos:start="201:25" pos:end="201:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="207:9" pos:end="207:14">break;</break>

    <case pos:start="209:5" pos:end="209:27">case <expr pos:start="209:10" pos:end="209:26"><name pos:start="209:10" pos:end="209:26">GET_CONFIGURATION</name></expr>:</case>

        <expr_stmt pos:start="211:9" pos:end="211:29"><expr pos:start="211:9" pos:end="211:28"><call pos:start="211:9" pos:end="211:28"><name pos:start="211:9" pos:end="211:14">memset</name><argument_list pos:start="211:15" pos:end="211:28">(<argument pos:start="211:16" pos:end="211:21"><expr pos:start="211:16" pos:end="211:21"><name pos:start="211:16" pos:end="211:21">outbuf</name></expr></argument>, <argument pos:start="211:24" pos:end="211:24"><expr pos:start="211:24" pos:end="211:24"><literal type="number" pos:start="211:24" pos:end="211:24">0</literal></expr></argument>, <argument pos:start="211:27" pos:end="211:27"><expr pos:start="211:27" pos:end="211:27"><literal type="number" pos:start="211:27" pos:end="211:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="213:9" pos:end="215:74">/* ??? This should probably return much more information.  For now

           just return the basic header indicating the CD-ROM profile.  */</comment>

        <expr_stmt pos:start="217:9" pos:end="217:22"><expr pos:start="217:9" pos:end="217:21"><name pos:start="217:9" pos:end="217:17"><name pos:start="217:9" pos:end="217:14">outbuf</name><index pos:start="217:15" pos:end="217:17">[<expr pos:start="217:16" pos:end="217:16"><literal type="number" pos:start="217:16" pos:end="217:16">7</literal></expr>]</index></name> <operator pos:start="217:19" pos:end="217:19">=</operator> <literal type="number" pos:start="217:21" pos:end="217:21">8</literal></expr>;</expr_stmt> <comment type="line" pos:start="217:24" pos:end="217:32">// CD-ROM</comment>

        <expr_stmt pos:start="219:9" pos:end="219:19"><expr pos:start="219:9" pos:end="219:18"><name pos:start="219:9" pos:end="219:14">buflen</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <literal type="number" pos:start="219:18" pos:end="219:18">8</literal></expr>;</expr_stmt>

        <break pos:start="221:9" pos:end="221:14">break;</break>

    <case pos:start="223:5" pos:end="223:27">case <expr pos:start="223:10" pos:end="223:26"><name pos:start="223:10" pos:end="223:26">SERVICE_ACTION_IN</name></expr>:</case>

        <comment type="block" pos:start="225:9" pos:end="225:44">/* Service Action In subcommands. */</comment>

        <if_stmt pos:start="227:9" pos:end="295:9"><if pos:start="227:9" pos:end="295:9">if <condition pos:start="227:12" pos:end="227:43">(<expr pos:start="227:13" pos:end="227:42"><operator pos:start="227:13" pos:end="227:13">(</operator><name pos:start="227:14" pos:end="227:28"><name pos:start="227:14" pos:end="227:16">req</name><operator pos:start="227:17" pos:end="227:18">-&gt;</operator><name pos:start="227:19" pos:end="227:21">cmd</name><operator pos:start="227:22" pos:end="227:22">.</operator><name pos:start="227:23" pos:end="227:25">buf</name><index pos:start="227:26" pos:end="227:28">[<expr pos:start="227:27" pos:end="227:27"><literal type="number" pos:start="227:27" pos:end="227:27">1</literal></expr>]</index></name> <operator pos:start="227:30" pos:end="227:30">&amp;</operator> <literal type="number" pos:start="227:32" pos:end="227:33">31</literal><operator pos:start="227:34" pos:end="227:34">)</operator> <operator pos:start="227:36" pos:end="227:37">==</operator> <literal type="number" pos:start="227:39" pos:end="227:42">0x10</literal></expr>)</condition> <block pos:start="227:45" pos:end="295:9">{<block_content pos:start="229:13" pos:end="293:18">

            <expr_stmt pos:start="229:13" pos:end="229:47"><expr pos:start="229:13" pos:end="229:46"><call pos:start="229:13" pos:end="229:46"><name pos:start="229:13" pos:end="229:19">DPRINTF</name><argument_list pos:start="229:20" pos:end="229:46">(<argument pos:start="229:21" pos:end="229:45"><expr pos:start="229:21" pos:end="229:45"><literal type="string" pos:start="229:21" pos:end="229:45">"SAI READ CAPACITY(16)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:45"><expr pos:start="231:13" pos:end="231:44"><call pos:start="231:13" pos:end="231:44"><name pos:start="231:13" pos:end="231:18">memset</name><argument_list pos:start="231:19" pos:end="231:44">(<argument pos:start="231:20" pos:end="231:25"><expr pos:start="231:20" pos:end="231:25"><name pos:start="231:20" pos:end="231:25">outbuf</name></expr></argument>, <argument pos:start="231:28" pos:end="231:28"><expr pos:start="231:28" pos:end="231:28"><literal type="number" pos:start="231:28" pos:end="231:28">0</literal></expr></argument>, <argument pos:start="231:31" pos:end="231:43"><expr pos:start="231:31" pos:end="231:43"><name pos:start="231:31" pos:end="231:43"><name pos:start="231:31" pos:end="231:33">req</name><operator pos:start="231:34" pos:end="231:35">-&gt;</operator><name pos:start="231:36" pos:end="231:38">cmd</name><operator pos:start="231:39" pos:end="231:39">.</operator><name pos:start="231:40" pos:end="231:43">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:50"><expr pos:start="233:13" pos:end="233:49"><call pos:start="233:13" pos:end="233:49"><name pos:start="233:13" pos:end="233:29">bdrv_get_geometry</name><argument_list pos:start="233:30" pos:end="233:49">(<argument pos:start="233:31" pos:end="233:35"><expr pos:start="233:31" pos:end="233:35"><name pos:start="233:31" pos:end="233:35"><name pos:start="233:31" pos:end="233:31">s</name><operator pos:start="233:32" pos:end="233:33">-&gt;</operator><name pos:start="233:34" pos:end="233:35">bs</name></name></expr></argument>, <argument pos:start="233:38" pos:end="233:48"><expr pos:start="233:38" pos:end="233:48"><operator pos:start="233:38" pos:end="233:38">&amp;</operator><name pos:start="233:39" pos:end="233:48">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="235:13" pos:end="237:31"><if pos:start="235:13" pos:end="237:31">if <condition pos:start="235:16" pos:end="235:28">(<expr pos:start="235:17" pos:end="235:27"><operator pos:start="235:17" pos:end="235:17">!</operator><name pos:start="235:18" pos:end="235:27">nb_sectors</name></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:31"><block_content pos:start="237:17" pos:end="237:31">

                <goto pos:start="237:17" pos:end="237:31">goto <name pos:start="237:22" pos:end="237:30">not_ready</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:42"><expr pos:start="239:13" pos:end="239:41"><name pos:start="239:13" pos:end="239:22">nb_sectors</name> <operator pos:start="239:24" pos:end="239:25">/=</operator> <name pos:start="239:27" pos:end="239:41"><name pos:start="239:27" pos:end="239:27">s</name><operator pos:start="239:28" pos:end="239:29">-&gt;</operator><name pos:start="239:30" pos:end="239:41">cluster_size</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="241:13" pos:end="241:68">/* Returned value is the address of the last sector.  */</comment>

            <expr_stmt pos:start="243:13" pos:end="243:25"><expr pos:start="243:13" pos:end="243:24"><name pos:start="243:13" pos:end="243:22">nb_sectors</name><operator pos:start="243:23" pos:end="243:24">--</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="245:13" pos:end="245:71">/* Remember the new size for read/write sanity checking. */</comment>

            <expr_stmt pos:start="247:13" pos:end="247:36"><expr pos:start="247:13" pos:end="247:35"><name pos:start="247:13" pos:end="247:22"><name pos:start="247:13" pos:end="247:13">s</name><operator pos:start="247:14" pos:end="247:15">-&gt;</operator><name pos:start="247:16" pos:end="247:22">max_lba</name></name> <operator pos:start="247:24" pos:end="247:24">=</operator> <name pos:start="247:26" pos:end="247:35">nb_sectors</name></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:50"><expr pos:start="249:13" pos:end="249:49"><name pos:start="249:13" pos:end="249:21"><name pos:start="249:13" pos:end="249:18">outbuf</name><index pos:start="249:19" pos:end="249:21">[<expr pos:start="249:20" pos:end="249:20"><literal type="number" pos:start="249:20" pos:end="249:20">0</literal></expr>]</index></name> <operator pos:start="249:23" pos:end="249:23">=</operator> <operator pos:start="249:25" pos:end="249:25">(</operator><name pos:start="249:26" pos:end="249:35">nb_sectors</name> <operator pos:start="249:37" pos:end="249:38">&gt;&gt;</operator> <literal type="number" pos:start="249:40" pos:end="249:41">56</literal><operator pos:start="249:42" pos:end="249:42">)</operator> <operator pos:start="249:44" pos:end="249:44">&amp;</operator> <literal type="number" pos:start="249:46" pos:end="249:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:50"><expr pos:start="251:13" pos:end="251:49"><name pos:start="251:13" pos:end="251:21"><name pos:start="251:13" pos:end="251:18">outbuf</name><index pos:start="251:19" pos:end="251:21">[<expr pos:start="251:20" pos:end="251:20"><literal type="number" pos:start="251:20" pos:end="251:20">1</literal></expr>]</index></name> <operator pos:start="251:23" pos:end="251:23">=</operator> <operator pos:start="251:25" pos:end="251:25">(</operator><name pos:start="251:26" pos:end="251:35">nb_sectors</name> <operator pos:start="251:37" pos:end="251:38">&gt;&gt;</operator> <literal type="number" pos:start="251:40" pos:end="251:41">48</literal><operator pos:start="251:42" pos:end="251:42">)</operator> <operator pos:start="251:44" pos:end="251:44">&amp;</operator> <literal type="number" pos:start="251:46" pos:end="251:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:50"><expr pos:start="253:13" pos:end="253:49"><name pos:start="253:13" pos:end="253:21"><name pos:start="253:13" pos:end="253:18">outbuf</name><index pos:start="253:19" pos:end="253:21">[<expr pos:start="253:20" pos:end="253:20"><literal type="number" pos:start="253:20" pos:end="253:20">2</literal></expr>]</index></name> <operator pos:start="253:23" pos:end="253:23">=</operator> <operator pos:start="253:25" pos:end="253:25">(</operator><name pos:start="253:26" pos:end="253:35">nb_sectors</name> <operator pos:start="253:37" pos:end="253:38">&gt;&gt;</operator> <literal type="number" pos:start="253:40" pos:end="253:41">40</literal><operator pos:start="253:42" pos:end="253:42">)</operator> <operator pos:start="253:44" pos:end="253:44">&amp;</operator> <literal type="number" pos:start="253:46" pos:end="253:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:50"><expr pos:start="255:13" pos:end="255:49"><name pos:start="255:13" pos:end="255:21"><name pos:start="255:13" pos:end="255:18">outbuf</name><index pos:start="255:19" pos:end="255:21">[<expr pos:start="255:20" pos:end="255:20"><literal type="number" pos:start="255:20" pos:end="255:20">3</literal></expr>]</index></name> <operator pos:start="255:23" pos:end="255:23">=</operator> <operator pos:start="255:25" pos:end="255:25">(</operator><name pos:start="255:26" pos:end="255:35">nb_sectors</name> <operator pos:start="255:37" pos:end="255:38">&gt;&gt;</operator> <literal type="number" pos:start="255:40" pos:end="255:41">32</literal><operator pos:start="255:42" pos:end="255:42">)</operator> <operator pos:start="255:44" pos:end="255:44">&amp;</operator> <literal type="number" pos:start="255:46" pos:end="255:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:50"><expr pos:start="257:13" pos:end="257:49"><name pos:start="257:13" pos:end="257:21"><name pos:start="257:13" pos:end="257:18">outbuf</name><index pos:start="257:19" pos:end="257:21">[<expr pos:start="257:20" pos:end="257:20"><literal type="number" pos:start="257:20" pos:end="257:20">4</literal></expr>]</index></name> <operator pos:start="257:23" pos:end="257:23">=</operator> <operator pos:start="257:25" pos:end="257:25">(</operator><name pos:start="257:26" pos:end="257:35">nb_sectors</name> <operator pos:start="257:37" pos:end="257:38">&gt;&gt;</operator> <literal type="number" pos:start="257:40" pos:end="257:41">24</literal><operator pos:start="257:42" pos:end="257:42">)</operator> <operator pos:start="257:44" pos:end="257:44">&amp;</operator> <literal type="number" pos:start="257:46" pos:end="257:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:50"><expr pos:start="259:13" pos:end="259:49"><name pos:start="259:13" pos:end="259:21"><name pos:start="259:13" pos:end="259:18">outbuf</name><index pos:start="259:19" pos:end="259:21">[<expr pos:start="259:20" pos:end="259:20"><literal type="number" pos:start="259:20" pos:end="259:20">5</literal></expr>]</index></name> <operator pos:start="259:23" pos:end="259:23">=</operator> <operator pos:start="259:25" pos:end="259:25">(</operator><name pos:start="259:26" pos:end="259:35">nb_sectors</name> <operator pos:start="259:37" pos:end="259:38">&gt;&gt;</operator> <literal type="number" pos:start="259:40" pos:end="259:41">16</literal><operator pos:start="259:42" pos:end="259:42">)</operator> <operator pos:start="259:44" pos:end="259:44">&amp;</operator> <literal type="number" pos:start="259:46" pos:end="259:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:49"><expr pos:start="261:13" pos:end="261:48"><name pos:start="261:13" pos:end="261:21"><name pos:start="261:13" pos:end="261:18">outbuf</name><index pos:start="261:19" pos:end="261:21">[<expr pos:start="261:20" pos:end="261:20"><literal type="number" pos:start="261:20" pos:end="261:20">6</literal></expr>]</index></name> <operator pos:start="261:23" pos:end="261:23">=</operator> <operator pos:start="261:25" pos:end="261:25">(</operator><name pos:start="261:26" pos:end="261:35">nb_sectors</name> <operator pos:start="261:37" pos:end="261:38">&gt;&gt;</operator> <literal type="number" pos:start="261:40" pos:end="261:40">8</literal><operator pos:start="261:41" pos:end="261:41">)</operator> <operator pos:start="261:43" pos:end="261:43">&amp;</operator> <literal type="number" pos:start="261:45" pos:end="261:48">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:42"><expr pos:start="263:13" pos:end="263:41"><name pos:start="263:13" pos:end="263:21"><name pos:start="263:13" pos:end="263:18">outbuf</name><index pos:start="263:19" pos:end="263:21">[<expr pos:start="263:20" pos:end="263:20"><literal type="number" pos:start="263:20" pos:end="263:20">7</literal></expr>]</index></name> <operator pos:start="263:23" pos:end="263:23">=</operator> <name pos:start="263:25" pos:end="263:34">nb_sectors</name> <operator pos:start="263:36" pos:end="263:36">&amp;</operator> <literal type="number" pos:start="263:38" pos:end="263:41">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:26"><expr pos:start="265:13" pos:end="265:25"><name pos:start="265:13" pos:end="265:21"><name pos:start="265:13" pos:end="265:18">outbuf</name><index pos:start="265:19" pos:end="265:21">[<expr pos:start="265:20" pos:end="265:20"><literal type="number" pos:start="265:20" pos:end="265:20">8</literal></expr>]</index></name> <operator pos:start="265:23" pos:end="265:23">=</operator> <literal type="number" pos:start="265:25" pos:end="265:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:26"><expr pos:start="267:13" pos:end="267:25"><name pos:start="267:13" pos:end="267:21"><name pos:start="267:13" pos:end="267:18">outbuf</name><index pos:start="267:19" pos:end="267:21">[<expr pos:start="267:20" pos:end="267:20"><literal type="number" pos:start="267:20" pos:end="267:20">9</literal></expr>]</index></name> <operator pos:start="267:23" pos:end="267:23">=</operator> <literal type="number" pos:start="267:25" pos:end="267:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:45"><expr pos:start="269:13" pos:end="269:44"><name pos:start="269:13" pos:end="269:22"><name pos:start="269:13" pos:end="269:18">outbuf</name><index pos:start="269:19" pos:end="269:22">[<expr pos:start="269:20" pos:end="269:21"><literal type="number" pos:start="269:20" pos:end="269:21">10</literal></expr>]</index></name> <operator pos:start="269:24" pos:end="269:24">=</operator> <name pos:start="269:26" pos:end="269:40"><name pos:start="269:26" pos:end="269:26">s</name><operator pos:start="269:27" pos:end="269:28">-&gt;</operator><name pos:start="269:29" pos:end="269:40">cluster_size</name></name> <operator pos:start="269:42" pos:end="269:42">*</operator> <literal type="number" pos:start="269:44" pos:end="269:44">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:27"><expr pos:start="271:13" pos:end="271:26"><name pos:start="271:13" pos:end="271:22"><name pos:start="271:13" pos:end="271:18">outbuf</name><index pos:start="271:19" pos:end="271:22">[<expr pos:start="271:20" pos:end="271:21"><literal type="number" pos:start="271:20" pos:end="271:21">11</literal></expr>]</index></name> <operator pos:start="271:24" pos:end="271:24">=</operator> <literal type="number" pos:start="271:26" pos:end="271:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:27"><expr pos:start="273:13" pos:end="273:26"><name pos:start="273:13" pos:end="273:22"><name pos:start="273:13" pos:end="273:18">outbuf</name><index pos:start="273:19" pos:end="273:22">[<expr pos:start="273:20" pos:end="273:21"><literal type="number" pos:start="273:20" pos:end="273:21">12</literal></expr>]</index></name> <operator pos:start="273:24" pos:end="273:24">=</operator> <literal type="number" pos:start="273:26" pos:end="273:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:63"><expr pos:start="275:13" pos:end="275:62"><name pos:start="275:13" pos:end="275:22"><name pos:start="275:13" pos:end="275:18">outbuf</name><index pos:start="275:19" pos:end="275:22">[<expr pos:start="275:20" pos:end="275:21"><literal type="number" pos:start="275:20" pos:end="275:21">13</literal></expr>]</index></name> <operator pos:start="275:24" pos:end="275:24">=</operator> <call pos:start="275:26" pos:end="275:62"><name pos:start="275:26" pos:end="275:47">get_physical_block_exp</name><argument_list pos:start="275:48" pos:end="275:62">(<argument pos:start="275:49" pos:end="275:61"><expr pos:start="275:49" pos:end="275:61"><operator pos:start="275:49" pos:end="275:49">&amp;</operator><name pos:start="275:50" pos:end="275:61"><name pos:start="275:50" pos:end="275:50">s</name><operator pos:start="275:51" pos:end="275:52">-&gt;</operator><name pos:start="275:53" pos:end="275:56">qdev</name><operator pos:start="275:57" pos:end="275:57">.</operator><name pos:start="275:58" pos:end="275:61">conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="279:13" pos:end="279:60">/* set TPE bit if the format supports discard */</comment>

            <if_stmt pos:start="281:13" pos:end="285:13"><if pos:start="281:13" pos:end="285:13">if <condition pos:start="281:16" pos:end="281:49">(<expr pos:start="281:17" pos:end="281:48"><name pos:start="281:17" pos:end="281:48"><name pos:start="281:17" pos:end="281:17">s</name><operator pos:start="281:18" pos:end="281:19">-&gt;</operator><name pos:start="281:20" pos:end="281:23">qdev</name><operator pos:start="281:24" pos:end="281:24">.</operator><name pos:start="281:25" pos:end="281:28">conf</name><operator pos:start="281:29" pos:end="281:29">.</operator><name pos:start="281:30" pos:end="281:48">discard_granularity</name></name></expr>)</condition> <block pos:start="281:51" pos:end="285:13">{<block_content pos:start="283:17" pos:end="283:34">

                <expr_stmt pos:start="283:17" pos:end="283:34"><expr pos:start="283:17" pos:end="283:33"><name pos:start="283:17" pos:end="283:26"><name pos:start="283:17" pos:end="283:22">outbuf</name><index pos:start="283:23" pos:end="283:26">[<expr pos:start="283:24" pos:end="283:25"><literal type="number" pos:start="283:24" pos:end="283:25">14</literal></expr>]</index></name> <operator pos:start="283:28" pos:end="283:28">=</operator> <literal type="number" pos:start="283:30" pos:end="283:33">0x80</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="289:13" pos:end="289:71">/* Protection, exponent and lowest lba field left blank. */</comment>

            <expr_stmt pos:start="291:13" pos:end="291:35"><expr pos:start="291:13" pos:end="291:34"><name pos:start="291:13" pos:end="291:18">buflen</name> <operator pos:start="291:20" pos:end="291:20">=</operator> <name pos:start="291:22" pos:end="291:34"><name pos:start="291:22" pos:end="291:24">req</name><operator pos:start="291:25" pos:end="291:26">-&gt;</operator><name pos:start="291:27" pos:end="291:29">cmd</name><operator pos:start="291:30" pos:end="291:30">.</operator><name pos:start="291:31" pos:end="291:34">xfer</name></name></expr>;</expr_stmt>

            <break pos:start="293:13" pos:end="293:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:51"><expr pos:start="297:9" pos:end="297:50"><call pos:start="297:9" pos:end="297:50"><name pos:start="297:9" pos:end="297:15">DPRINTF</name><argument_list pos:start="297:16" pos:end="297:50">(<argument pos:start="297:17" pos:end="297:49"><expr pos:start="297:17" pos:end="297:49"><literal type="string" pos:start="297:17" pos:end="297:49">"Unsupported Service Action In\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="299:9" pos:end="299:29">goto <name pos:start="299:14" pos:end="299:28">illegal_request</name>;</goto>

    <case pos:start="301:5" pos:end="301:21">case <expr pos:start="301:10" pos:end="301:20"><name pos:start="301:10" pos:end="301:20">REPORT_LUNS</name></expr>:</case>

        <if_stmt pos:start="303:9" pos:end="305:33"><if pos:start="303:9" pos:end="305:33">if <condition pos:start="303:12" pos:end="303:31">(<expr pos:start="303:13" pos:end="303:30"><name pos:start="303:13" pos:end="303:25"><name pos:start="303:13" pos:end="303:15">req</name><operator pos:start="303:16" pos:end="303:17">-&gt;</operator><name pos:start="303:18" pos:end="303:20">cmd</name><operator pos:start="303:21" pos:end="303:21">.</operator><name pos:start="303:22" pos:end="303:25">xfer</name></name> <operator pos:start="303:27" pos:end="303:27">&lt;</operator> <literal type="number" pos:start="303:29" pos:end="303:30">16</literal></expr>)</condition><block type="pseudo" pos:start="305:13" pos:end="305:33"><block_content pos:start="305:13" pos:end="305:33">

            <goto pos:start="305:13" pos:end="305:33">goto <name pos:start="305:18" pos:end="305:32">illegal_request</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:30"><expr pos:start="307:9" pos:end="307:29"><call pos:start="307:9" pos:end="307:29"><name pos:start="307:9" pos:end="307:14">memset</name><argument_list pos:start="307:15" pos:end="307:29">(<argument pos:start="307:16" pos:end="307:21"><expr pos:start="307:16" pos:end="307:21"><name pos:start="307:16" pos:end="307:21">outbuf</name></expr></argument>, <argument pos:start="307:24" pos:end="307:24"><expr pos:start="307:24" pos:end="307:24"><literal type="number" pos:start="307:24" pos:end="307:24">0</literal></expr></argument>, <argument pos:start="307:27" pos:end="307:28"><expr pos:start="307:27" pos:end="307:28"><literal type="number" pos:start="307:27" pos:end="307:28">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:22"><expr pos:start="309:9" pos:end="309:21"><name pos:start="309:9" pos:end="309:17"><name pos:start="309:9" pos:end="309:14">outbuf</name><index pos:start="309:15" pos:end="309:17">[<expr pos:start="309:16" pos:end="309:16"><literal type="number" pos:start="309:16" pos:end="309:16">3</literal></expr>]</index></name> <operator pos:start="309:19" pos:end="309:19">=</operator> <literal type="number" pos:start="309:21" pos:end="309:21">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:20"><expr pos:start="311:9" pos:end="311:19"><name pos:start="311:9" pos:end="311:14">buflen</name> <operator pos:start="311:16" pos:end="311:16">=</operator> <literal type="number" pos:start="311:18" pos:end="311:19">16</literal></expr>;</expr_stmt>

        <break pos:start="313:9" pos:end="313:14">break;</break>

    <case pos:start="315:5" pos:end="315:16">case <expr pos:start="315:10" pos:end="315:15"><name pos:start="315:10" pos:end="315:15">VERIFY</name></expr>:</case>

        <break pos:start="317:9" pos:end="317:14">break;</break>

    <case pos:start="319:5" pos:end="319:21">case <expr pos:start="319:10" pos:end="319:20"><name pos:start="319:10" pos:end="319:20">REZERO_UNIT</name></expr>:</case>

        <expr_stmt pos:start="321:9" pos:end="321:33"><expr pos:start="321:9" pos:end="321:32"><call pos:start="321:9" pos:end="321:32"><name pos:start="321:9" pos:end="321:15">DPRINTF</name><argument_list pos:start="321:16" pos:end="321:32">(<argument pos:start="321:17" pos:end="321:31"><expr pos:start="321:17" pos:end="321:31"><literal type="string" pos:start="321:17" pos:end="321:31">"Rezero Unit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="323:9" pos:end="327:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:37">(<expr pos:start="323:13" pos:end="323:36"><operator pos:start="323:13" pos:end="323:13">!</operator><call pos:start="323:14" pos:end="323:36"><name pos:start="323:14" pos:end="323:29">bdrv_is_inserted</name><argument_list pos:start="323:30" pos:end="323:36">(<argument pos:start="323:31" pos:end="323:35"><expr pos:start="323:31" pos:end="323:35"><name pos:start="323:31" pos:end="323:35"><name pos:start="323:31" pos:end="323:31">s</name><operator pos:start="323:32" pos:end="323:33">-&gt;</operator><name pos:start="323:34" pos:end="323:35">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="323:39" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:27">

            <goto pos:start="325:13" pos:end="325:27">goto <name pos:start="325:18" pos:end="325:26">not_ready</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="329:9" pos:end="329:14">break;</break>

    <default pos:start="331:5" pos:end="331:12">default:</default>

        <goto pos:start="333:9" pos:end="333:29">goto <name pos:start="333:14" pos:end="333:28">illegal_request</name>;</goto>

    </block_content>}</block></switch>

    <expr_stmt pos:start="337:5" pos:end="337:43"><expr pos:start="337:5" pos:end="337:42"><call pos:start="337:5" pos:end="337:42"><name pos:start="337:5" pos:end="337:23">scsi_req_set_status</name><argument_list pos:start="337:24" pos:end="337:42">(<argument pos:start="337:25" pos:end="337:25"><expr pos:start="337:25" pos:end="337:25"><name pos:start="337:25" pos:end="337:25">r</name></expr></argument>, <argument pos:start="337:28" pos:end="337:31"><expr pos:start="337:28" pos:end="337:31"><name pos:start="337:28" pos:end="337:31">GOOD</name></expr></argument>, <argument pos:start="337:34" pos:end="337:41"><expr pos:start="337:34" pos:end="337:41"><name pos:start="337:34" pos:end="337:41">NO_SENSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="339:5" pos:end="339:18">return <expr pos:start="339:12" pos:end="339:17"><name pos:start="339:12" pos:end="339:17">buflen</name></expr>;</return>



<label pos:start="343:1" pos:end="343:10"><name pos:start="343:1" pos:end="343:9">not_ready</name>:</label>

    <expr_stmt pos:start="345:5" pos:end="345:57"><expr pos:start="345:5" pos:end="345:56"><call pos:start="345:5" pos:end="345:56"><name pos:start="345:5" pos:end="345:25">scsi_command_complete</name><argument_list pos:start="345:26" pos:end="345:56">(<argument pos:start="345:27" pos:end="345:27"><expr pos:start="345:27" pos:end="345:27"><name pos:start="345:27" pos:end="345:27">r</name></expr></argument>, <argument pos:start="345:30" pos:end="345:44"><expr pos:start="345:30" pos:end="345:44"><name pos:start="345:30" pos:end="345:44">CHECK_CONDITION</name></expr></argument>, <argument pos:start="345:47" pos:end="345:55"><expr pos:start="345:47" pos:end="345:55"><name pos:start="345:47" pos:end="345:55">NOT_READY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="347:5" pos:end="347:14">return <expr pos:start="347:12" pos:end="347:13"><operator pos:start="347:12" pos:end="347:12">-</operator><literal type="number" pos:start="347:13" pos:end="347:13">1</literal></expr>;</return>



<label pos:start="351:1" pos:end="351:16"><name pos:start="351:1" pos:end="351:15">illegal_request</name>:</label>

    <expr_stmt pos:start="353:5" pos:end="353:63"><expr pos:start="353:5" pos:end="353:62"><call pos:start="353:5" pos:end="353:62"><name pos:start="353:5" pos:end="353:25">scsi_command_complete</name><argument_list pos:start="353:26" pos:end="353:62">(<argument pos:start="353:27" pos:end="353:27"><expr pos:start="353:27" pos:end="353:27"><name pos:start="353:27" pos:end="353:27">r</name></expr></argument>, <argument pos:start="353:30" pos:end="353:44"><expr pos:start="353:30" pos:end="353:44"><name pos:start="353:30" pos:end="353:44">CHECK_CONDITION</name></expr></argument>, <argument pos:start="353:47" pos:end="353:61"><expr pos:start="353:47" pos:end="353:61"><name pos:start="353:47" pos:end="353:61">ILLEGAL_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="355:5" pos:end="355:14">return <expr pos:start="355:12" pos:end="355:13"><operator pos:start="355:12" pos:end="355:12">-</operator><literal type="number" pos:start="355:13" pos:end="355:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
