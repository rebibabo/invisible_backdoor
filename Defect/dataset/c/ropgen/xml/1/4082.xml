<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4082.c" pos:tabs="8"><function pos:start="1:1" pos:end="712:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">ff_mov_read_stsd_entries</name><parameter_list pos:start="1:29" pos:end="1:73">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">MOVContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">c</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:59"><decl pos:start="1:45" pos:end="1:59"><type pos:start="1:45" pos:end="1:59"><name pos:start="1:45" pos:end="1:55">AVIOContext</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">pb</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:72"><decl pos:start="1:62" pos:end="1:72"><type pos:start="1:62" pos:end="1:72"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:72">entries</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="712:1">{<block_content pos:start="5:5" pos:end="710:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">j</name></decl>, <decl pos:start="9:12" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:27">pseudo_stream_id</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:30">(<expr pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:9">c</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:13">fc</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:25">nb_streams</name></name> <operator pos:start="13:27" pos:end="13:27">&lt;</operator> <literal type="number" pos:start="13:29" pos:end="13:29">1</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:6">st</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <name pos:start="17:10" pos:end="17:44"><name pos:start="17:10" pos:end="17:10">c</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:14">fc</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:23">streams</name><index pos:start="17:24" pos:end="17:44">[<expr pos:start="17:25" pos:end="17:43"><name pos:start="17:25" pos:end="17:41"><name pos:start="17:25" pos:end="17:25">c</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:29">fc</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:41">nb_streams</name></name><operator pos:start="17:42" pos:end="17:42">-</operator><literal type="number" pos:start="17:43" pos:end="17:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:6">sc</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <name pos:start="19:10" pos:end="19:22"><name pos:start="19:10" pos:end="19:11">st</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:22">priv_data</name></name></expr>;</expr_stmt>



    <for pos:start="23:5" pos:end="577:5">for <control pos:start="23:9" pos:end="23:74">(<init pos:start="23:10" pos:end="23:28"><expr pos:start="23:10" pos:end="23:27"><name pos:start="23:10" pos:end="23:25">pseudo_stream_id</name><operator pos:start="23:26" pos:end="23:26">=</operator><literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr>;</init> <condition pos:start="23:30" pos:end="23:54"><expr pos:start="23:30" pos:end="23:53"><name pos:start="23:30" pos:end="23:45">pseudo_stream_id</name><operator pos:start="23:46" pos:end="23:46">&lt;</operator><name pos:start="23:47" pos:end="23:53">entries</name></expr>;</condition> <incr pos:start="23:56" pos:end="23:73"><expr pos:start="23:56" pos:end="23:73"><name pos:start="23:56" pos:end="23:71">pseudo_stream_id</name><operator pos:start="23:72" pos:end="23:73">++</operator></expr></incr>)</control> <block pos:start="23:76" pos:end="577:5">{<block_content pos:start="27:9" pos:end="575:34">

        <comment type="line" pos:start="25:9" pos:end="25:42">//Parsing Sample description table</comment>

        <decl_stmt pos:start="27:9" pos:end="27:24"><decl pos:start="27:9" pos:end="27:23"><type pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:12">enum</name> <name pos:start="27:14" pos:end="27:20">CodecID</name></name></type> <name pos:start="27:22" pos:end="27:23">id</name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:24"><decl pos:start="29:9" pos:end="29:23"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:19">dref_id</name> <init pos:start="29:21" pos:end="29:23">= <expr pos:start="29:23" pos:end="29:23"><literal type="number" pos:start="29:23" pos:end="29:23">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:40"><decl pos:start="31:9" pos:end="31:39"><type pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:15">MOVAtom</name></type> <name pos:start="31:17" pos:end="31:17">a</name> <init pos:start="31:19" pos:end="31:39">= <expr pos:start="31:21" pos:end="31:39"><block pos:start="31:21" pos:end="31:39">{ <macro pos:start="31:23" pos:end="31:37"><name pos:start="31:23" pos:end="31:29">AV_RL32</name><argument_list pos:start="31:30" pos:end="31:37">(<argument pos:start="31:31" pos:end="31:36"><literal type="string" pos:start="31:31" pos:end="31:36">"stsd"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:42"><decl pos:start="33:9" pos:end="33:41"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">int64_t</name></type> <name pos:start="33:17" pos:end="33:25">start_pos</name> <init pos:start="33:27" pos:end="33:41">= <expr pos:start="33:29" pos:end="33:41"><call pos:start="33:29" pos:end="33:41"><name pos:start="33:29" pos:end="33:37">avio_tell</name><argument_list pos:start="33:38" pos:end="33:41">(<argument pos:start="33:39" pos:end="33:40"><expr pos:start="33:39" pos:end="33:40"><name pos:start="33:39" pos:end="33:40">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:33"><decl pos:start="35:9" pos:end="35:32"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:16">size</name> <init pos:start="35:18" pos:end="35:32">= <expr pos:start="35:20" pos:end="35:32"><call pos:start="35:20" pos:end="35:32"><name pos:start="35:20" pos:end="35:28">avio_rb32</name><argument_list pos:start="35:29" pos:end="35:32">(<argument pos:start="35:30" pos:end="35:31"><expr pos:start="35:30" pos:end="35:31"><name pos:start="35:30" pos:end="35:31">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="35:35" pos:end="35:44">/* size */</comment>

        <decl_stmt pos:start="37:9" pos:end="37:40"><decl pos:start="37:9" pos:end="37:39"><type pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">uint32_t</name></type> <name pos:start="37:18" pos:end="37:23">format</name> <init pos:start="37:25" pos:end="37:39">= <expr pos:start="37:27" pos:end="37:39"><call pos:start="37:27" pos:end="37:39"><name pos:start="37:27" pos:end="37:35">avio_rl32</name><argument_list pos:start="37:36" pos:end="37:39">(<argument pos:start="37:37" pos:end="37:38"><expr pos:start="37:37" pos:end="37:38"><name pos:start="37:37" pos:end="37:38">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="37:42" pos:end="37:58">/* data format */</comment>



        <if_stmt pos:start="41:9" pos:end="52:9"><if pos:start="41:9" pos:end="52:9">if <condition pos:start="41:12" pos:end="41:23">(<expr pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:16">size</name> <operator pos:start="41:18" pos:end="41:19">&gt;=</operator> <literal type="number" pos:start="41:21" pos:end="41:22">16</literal></expr>)</condition> <block pos:start="41:25" pos:end="52:9">{<block_content pos:start="43:13" pos:end="47:36">

            <expr_stmt pos:start="43:13" pos:end="43:26"><expr pos:start="43:13" pos:end="43:25"><call pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:21">avio_rb32</name><argument_list pos:start="43:22" pos:end="43:25">(<argument pos:start="43:23" pos:end="43:24"><expr pos:start="43:23" pos:end="43:24"><name pos:start="43:23" pos:end="43:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="43:28" pos:end="43:41">/* reserved */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:26"><expr pos:start="45:13" pos:end="45:25"><call pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:21">avio_rb16</name><argument_list pos:start="45:22" pos:end="45:25">(<argument pos:start="45:23" pos:end="45:24"><expr pos:start="45:23" pos:end="45:24"><name pos:start="45:23" pos:end="45:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="45:28" pos:end="45:41">/* reserved */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:36"><expr pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:19">dref_id</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="47:35"><name pos:start="47:23" pos:end="47:31">avio_rb16</name><argument_list pos:start="47:32" pos:end="47:35">(<argument pos:start="47:33" pos:end="47:34"><expr pos:start="47:33" pos:end="47:34"><name pos:start="47:33" pos:end="47:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="56:9" pos:end="80:9"><if pos:start="56:9" pos:end="80:9">if <condition pos:start="56:12" pos:end="64:12">(<expr pos:start="56:13" pos:end="62:84"><name pos:start="56:13" pos:end="56:32"><name pos:start="56:13" pos:end="56:14">st</name><operator pos:start="56:15" pos:end="56:16">-&gt;</operator><name pos:start="56:17" pos:end="56:21">codec</name><operator pos:start="56:22" pos:end="56:23">-&gt;</operator><name pos:start="56:24" pos:end="56:32">codec_tag</name></name> <operator pos:start="56:34" pos:end="56:35">&amp;&amp;</operator>

            <name pos:start="58:13" pos:end="58:32"><name pos:start="58:13" pos:end="58:14">st</name><operator pos:start="58:15" pos:end="58:16">-&gt;</operator><name pos:start="58:17" pos:end="58:21">codec</name><operator pos:start="58:22" pos:end="58:23">-&gt;</operator><name pos:start="58:24" pos:end="58:32">codec_tag</name></name> <operator pos:start="58:34" pos:end="58:35">!=</operator> <name pos:start="58:37" pos:end="58:42">format</name> <operator pos:start="58:44" pos:end="58:45">&amp;&amp;</operator>

            <operator pos:start="60:13" pos:end="60:13">(</operator><ternary pos:start="60:14" pos:end="62:83"><condition pos:start="60:14" pos:end="60:36"><expr pos:start="60:14" pos:end="60:34"><name pos:start="60:14" pos:end="60:34"><name pos:start="60:14" pos:end="60:14">c</name><operator pos:start="60:15" pos:end="60:16">-&gt;</operator><name pos:start="60:17" pos:end="60:18">fc</name><operator pos:start="60:19" pos:end="60:20">-&gt;</operator><name pos:start="60:21" pos:end="60:34">video_codec_id</name></name></expr> ?</condition><then pos:start="60:38" pos:end="60:106"> <expr pos:start="60:38" pos:end="60:106"><call pos:start="60:38" pos:end="60:81"><name pos:start="60:38" pos:end="60:52">ff_codec_get_id</name><argument_list pos:start="60:53" pos:end="60:81">(<argument pos:start="60:54" pos:end="60:72"><expr pos:start="60:54" pos:end="60:72"><name pos:start="60:54" pos:end="60:72">codec_movvideo_tags</name></expr></argument>, <argument pos:start="60:75" pos:end="60:80"><expr pos:start="60:75" pos:end="60:80"><name pos:start="60:75" pos:end="60:80">format</name></expr></argument>)</argument_list></call> <operator pos:start="60:83" pos:end="60:84">!=</operator> <name pos:start="60:86" pos:end="60:106"><name pos:start="60:86" pos:end="60:86">c</name><operator pos:start="60:87" pos:end="60:88">-&gt;</operator><name pos:start="60:89" pos:end="60:90">fc</name><operator pos:start="60:91" pos:end="60:92">-&gt;</operator><name pos:start="60:93" pos:end="60:106">video_codec_id</name></name></expr>

                                   </then><else pos:start="62:36" pos:end="62:83">: <expr pos:start="62:38" pos:end="62:83"><name pos:start="62:38" pos:end="62:57"><name pos:start="62:38" pos:end="62:39">st</name><operator pos:start="62:40" pos:end="62:41">-&gt;</operator><name pos:start="62:42" pos:end="62:46">codec</name><operator pos:start="62:47" pos:end="62:48">-&gt;</operator><name pos:start="62:49" pos:end="62:57">codec_tag</name></name> <operator pos:start="62:59" pos:end="62:60">!=</operator> <call pos:start="62:62" pos:end="62:83"><name pos:start="62:62" pos:end="62:66">MKTAG</name><argument_list pos:start="62:67" pos:end="62:83">(<argument pos:start="62:68" pos:end="62:70"><expr pos:start="62:68" pos:end="62:70"><literal type="char" pos:start="62:68" pos:end="62:70">'j'</literal></expr></argument>,<argument pos:start="62:72" pos:end="62:74"><expr pos:start="62:72" pos:end="62:74"><literal type="char" pos:start="62:72" pos:end="62:74">'p'</literal></expr></argument>,<argument pos:start="62:76" pos:end="62:78"><expr pos:start="62:76" pos:end="62:78"><literal type="char" pos:start="62:76" pos:end="62:78">'e'</literal></expr></argument>,<argument pos:start="62:80" pos:end="62:82"><expr pos:start="62:80" pos:end="62:82"><literal type="char" pos:start="62:80" pos:end="62:82">'g'</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="62:84" pos:end="62:84">)</operator></expr>

           )</condition><block pos:start="64:13" pos:end="80:9">{<block_content pos:start="72:9" pos:end="78:21">

            <comment type="block" pos:start="66:13" pos:end="70:52">/* Multiple fourcc, we skip JPEG. This is not correct, we should

             * export it as a separate AVStream but this needs a few changes

             * in the MOV demuxer, patch welcome. */</comment>

        <label pos:start="72:9" pos:end="72:22"><name pos:start="72:9" pos:end="72:21">multiple_stsd</name>:</label>

            <expr_stmt pos:start="74:13" pos:end="74:77"><expr pos:start="74:13" pos:end="74:76"><call pos:start="74:13" pos:end="74:76"><name pos:start="74:13" pos:end="74:18">av_log</name><argument_list pos:start="74:19" pos:end="74:76">(<argument pos:start="74:20" pos:end="74:24"><expr pos:start="74:20" pos:end="74:24"><name pos:start="74:20" pos:end="74:24"><name pos:start="74:20" pos:end="74:20">c</name><operator pos:start="74:21" pos:end="74:22">-&gt;</operator><name pos:start="74:23" pos:end="74:24">fc</name></name></expr></argument>, <argument pos:start="74:27" pos:end="74:40"><expr pos:start="74:27" pos:end="74:40"><name pos:start="74:27" pos:end="74:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="74:43" pos:end="74:75"><expr pos:start="74:43" pos:end="74:75"><literal type="string" pos:start="74:43" pos:end="74:75">"multiple fourcc not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="76:13" pos:end="76:62"><expr pos:start="76:13" pos:end="76:61"><call pos:start="76:13" pos:end="76:61"><name pos:start="76:13" pos:end="76:21">avio_skip</name><argument_list pos:start="76:22" pos:end="76:61">(<argument pos:start="76:23" pos:end="76:24"><expr pos:start="76:23" pos:end="76:24"><name pos:start="76:23" pos:end="76:24">pb</name></expr></argument>, <argument pos:start="76:27" pos:end="76:60"><expr pos:start="76:27" pos:end="76:60"><name pos:start="76:27" pos:end="76:30">size</name> <operator pos:start="76:32" pos:end="76:32">-</operator> <operator pos:start="76:34" pos:end="76:34">(</operator><call pos:start="76:35" pos:end="76:47"><name pos:start="76:35" pos:end="76:43">avio_tell</name><argument_list pos:start="76:44" pos:end="76:47">(<argument pos:start="76:45" pos:end="76:46"><expr pos:start="76:45" pos:end="76:46"><name pos:start="76:45" pos:end="76:46">pb</name></expr></argument>)</argument_list></call> <operator pos:start="76:49" pos:end="76:49">-</operator> <name pos:start="76:51" pos:end="76:59">start_pos</name><operator pos:start="76:60" pos:end="76:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="78:13" pos:end="78:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="82:9" pos:end="82:86">/* we cannot demux concatenated h264 streams because of different extradata */</comment>

        <if_stmt pos:start="84:9" pos:end="86:31"><if pos:start="84:9" pos:end="86:31">if <condition pos:start="84:12" pos:end="84:76">(<expr pos:start="84:13" pos:end="84:75"><name pos:start="84:13" pos:end="84:32"><name pos:start="84:13" pos:end="84:14">st</name><operator pos:start="84:15" pos:end="84:16">-&gt;</operator><name pos:start="84:17" pos:end="84:21">codec</name><operator pos:start="84:22" pos:end="84:23">-&gt;</operator><name pos:start="84:24" pos:end="84:32">codec_tag</name></name> <operator pos:start="84:34" pos:end="84:35">&amp;&amp;</operator> <name pos:start="84:37" pos:end="84:56"><name pos:start="84:37" pos:end="84:38">st</name><operator pos:start="84:39" pos:end="84:40">-&gt;</operator><name pos:start="84:41" pos:end="84:45">codec</name><operator pos:start="84:46" pos:end="84:47">-&gt;</operator><name pos:start="84:48" pos:end="84:56">codec_tag</name></name> <operator pos:start="84:58" pos:end="84:59">==</operator> <call pos:start="84:61" pos:end="84:75"><name pos:start="84:61" pos:end="84:67">AV_RL32</name><argument_list pos:start="84:68" pos:end="84:75">(<argument pos:start="84:69" pos:end="84:74"><expr pos:start="84:69" pos:end="84:74"><literal type="string" pos:start="84:69" pos:end="84:74">"avc1"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="86:13" pos:end="86:31"><block_content pos:start="86:13" pos:end="86:31">

            <goto pos:start="86:13" pos:end="86:31">goto <name pos:start="86:18" pos:end="86:30">multiple_stsd</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="88:9" pos:end="88:76"><expr pos:start="88:9" pos:end="88:75"><name pos:start="88:9" pos:end="88:28"><name pos:start="88:9" pos:end="88:10">sc</name><operator pos:start="88:11" pos:end="88:12">-&gt;</operator><name pos:start="88:13" pos:end="88:28">pseudo_stream_id</name></name> <operator pos:start="88:30" pos:end="88:30">=</operator> <ternary pos:start="88:32" pos:end="88:75"><condition pos:start="88:32" pos:end="88:53"><expr pos:start="88:32" pos:end="88:51"><name pos:start="88:32" pos:end="88:51"><name pos:start="88:32" pos:end="88:33">st</name><operator pos:start="88:34" pos:end="88:35">-&gt;</operator><name pos:start="88:36" pos:end="88:40">codec</name><operator pos:start="88:41" pos:end="88:42">-&gt;</operator><name pos:start="88:43" pos:end="88:51">codec_tag</name></name></expr> ?</condition><then pos:start="88:55" pos:end="88:56"> <expr pos:start="88:55" pos:end="88:56"><operator pos:start="88:55" pos:end="88:55">-</operator><literal type="number" pos:start="88:56" pos:end="88:56">1</literal></expr> </then><else pos:start="88:58" pos:end="88:75">: <expr pos:start="88:60" pos:end="88:75"><name pos:start="88:60" pos:end="88:75">pseudo_stream_id</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="90:9" pos:end="90:29"><expr pos:start="90:9" pos:end="90:28"><name pos:start="90:9" pos:end="90:19"><name pos:start="90:9" pos:end="90:10">sc</name><operator pos:start="90:11" pos:end="90:12">-&gt;</operator><name pos:start="90:13" pos:end="90:19">dref_id</name></name><operator pos:start="90:20" pos:end="90:20">=</operator> <name pos:start="90:22" pos:end="90:28">dref_id</name></expr>;</expr_stmt>



        <expr_stmt pos:start="94:9" pos:end="94:38"><expr pos:start="94:9" pos:end="94:37"><name pos:start="94:9" pos:end="94:28"><name pos:start="94:9" pos:end="94:10">st</name><operator pos:start="94:11" pos:end="94:12">-&gt;</operator><name pos:start="94:13" pos:end="94:17">codec</name><operator pos:start="94:18" pos:end="94:19">-&gt;</operator><name pos:start="94:20" pos:end="94:28">codec_tag</name></name> <operator pos:start="94:30" pos:end="94:30">=</operator> <name pos:start="94:32" pos:end="94:37">format</name></expr>;</expr_stmt>

        <expr_stmt pos:start="96:9" pos:end="96:58"><expr pos:start="96:9" pos:end="96:57"><name pos:start="96:9" pos:end="96:10">id</name> <operator pos:start="96:12" pos:end="96:12">=</operator> <call pos:start="96:14" pos:end="96:57"><name pos:start="96:14" pos:end="96:28">ff_codec_get_id</name><argument_list pos:start="96:29" pos:end="96:57">(<argument pos:start="96:30" pos:end="96:48"><expr pos:start="96:30" pos:end="96:48"><name pos:start="96:30" pos:end="96:48">codec_movaudio_tags</name></expr></argument>, <argument pos:start="96:51" pos:end="96:56"><expr pos:start="96:51" pos:end="96:56"><name pos:start="96:51" pos:end="96:56">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="98:9" pos:end="100:79"><if pos:start="98:9" pos:end="100:79">if <condition pos:start="98:12" pos:end="98:90">(<expr pos:start="98:13" pos:end="98:89"><name pos:start="98:13" pos:end="98:14">id</name><operator pos:start="98:15" pos:end="98:16">&lt;=</operator><literal type="number" pos:start="98:17" pos:end="98:17">0</literal> <operator pos:start="98:19" pos:end="98:20">&amp;&amp;</operator> <operator pos:start="98:22" pos:end="98:22">(</operator><operator pos:start="98:23" pos:end="98:23">(</operator><name pos:start="98:24" pos:end="98:29">format</name><operator pos:start="98:30" pos:end="98:30">&amp;</operator><literal type="number" pos:start="98:31" pos:end="98:36">0xFFFF</literal><operator pos:start="98:37" pos:end="98:37">)</operator> <operator pos:start="98:39" pos:end="98:40">==</operator> <literal type="char" pos:start="98:42" pos:end="98:44">'m'</literal><operator pos:start="98:45" pos:end="98:45">+</operator><operator pos:start="98:46" pos:end="98:46">(</operator><literal type="char" pos:start="98:47" pos:end="98:49">'s'</literal><operator pos:start="98:50" pos:end="98:51">&lt;&lt;</operator><literal type="number" pos:start="98:52" pos:end="98:52">8</literal><operator pos:start="98:53" pos:end="98:53">)</operator> <operator pos:start="98:55" pos:end="98:56">||</operator> <operator pos:start="98:58" pos:end="98:58">(</operator><name pos:start="98:59" pos:end="98:64">format</name><operator pos:start="98:65" pos:end="98:65">&amp;</operator><literal type="number" pos:start="98:66" pos:end="98:71">0xFFFF</literal><operator pos:start="98:72" pos:end="98:72">)</operator> <operator pos:start="98:74" pos:end="98:75">==</operator> <literal type="char" pos:start="98:77" pos:end="98:79">'T'</literal><operator pos:start="98:80" pos:end="98:80">+</operator><operator pos:start="98:81" pos:end="98:81">(</operator><literal type="char" pos:start="98:82" pos:end="98:84">'S'</literal><operator pos:start="98:85" pos:end="98:86">&lt;&lt;</operator><literal type="number" pos:start="98:87" pos:end="98:87">8</literal><operator pos:start="98:88" pos:end="98:88">)</operator><operator pos:start="98:89" pos:end="98:89">)</operator></expr>)</condition><block type="pseudo" pos:start="100:13" pos:end="100:79"><block_content pos:start="100:13" pos:end="100:79">

            <expr_stmt pos:start="100:13" pos:end="100:79"><expr pos:start="100:13" pos:end="100:78"><name pos:start="100:13" pos:end="100:14">id</name> <operator pos:start="100:16" pos:end="100:16">=</operator> <call pos:start="100:18" pos:end="100:78"><name pos:start="100:18" pos:end="100:32">ff_codec_get_id</name><argument_list pos:start="100:33" pos:end="100:78">(<argument pos:start="100:34" pos:end="100:50"><expr pos:start="100:34" pos:end="100:50"><name pos:start="100:34" pos:end="100:50">ff_codec_wav_tags</name></expr></argument>, <argument pos:start="100:53" pos:end="100:77"><expr pos:start="100:53" pos:end="100:77"><call pos:start="100:53" pos:end="100:70"><name pos:start="100:53" pos:end="100:62">av_bswap32</name><argument_list pos:start="100:63" pos:end="100:70">(<argument pos:start="100:64" pos:end="100:69"><expr pos:start="100:64" pos:end="100:69"><name pos:start="100:64" pos:end="100:69">format</name></expr></argument>)</argument_list></call><operator pos:start="100:71" pos:end="100:71">&amp;</operator><literal type="number" pos:start="100:72" pos:end="100:77">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="104:9" pos:end="132:9"><if pos:start="104:9" pos:end="108:9">if <condition pos:start="104:12" pos:end="104:66">(<expr pos:start="104:13" pos:end="104:65"><name pos:start="104:13" pos:end="104:33"><name pos:start="104:13" pos:end="104:14">st</name><operator pos:start="104:15" pos:end="104:16">-&gt;</operator><name pos:start="104:17" pos:end="104:21">codec</name><operator pos:start="104:22" pos:end="104:23">-&gt;</operator><name pos:start="104:24" pos:end="104:33">codec_type</name></name> <operator pos:start="104:35" pos:end="104:36">!=</operator> <name pos:start="104:38" pos:end="104:55">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="104:57" pos:end="104:58">&amp;&amp;</operator> <name pos:start="104:60" pos:end="104:61">id</name> <operator pos:start="104:63" pos:end="104:63">&gt;</operator> <literal type="number" pos:start="104:65" pos:end="104:65">0</literal></expr>)</condition> <block pos:start="104:68" pos:end="108:9">{<block_content pos:start="106:13" pos:end="106:55">

            <expr_stmt pos:start="106:13" pos:end="106:55"><expr pos:start="106:13" pos:end="106:54"><name pos:start="106:13" pos:end="106:33"><name pos:start="106:13" pos:end="106:14">st</name><operator pos:start="106:15" pos:end="106:16">-&gt;</operator><name pos:start="106:17" pos:end="106:21">codec</name><operator pos:start="106:22" pos:end="106:23">-&gt;</operator><name pos:start="106:24" pos:end="106:33">codec_type</name></name> <operator pos:start="106:35" pos:end="106:35">=</operator> <name pos:start="106:37" pos:end="106:54">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="108:11" pos:end="132:9">else if <condition pos:start="108:19" pos:end="110:62">(<expr pos:start="108:20" pos:end="110:61"><name pos:start="108:20" pos:end="108:40"><name pos:start="108:20" pos:end="108:21">st</name><operator pos:start="108:22" pos:end="108:23">-&gt;</operator><name pos:start="108:24" pos:end="108:28">codec</name><operator pos:start="108:29" pos:end="108:30">-&gt;</operator><name pos:start="108:31" pos:end="108:40">codec_type</name></name> <operator pos:start="108:42" pos:end="108:43">!=</operator> <name pos:start="108:45" pos:end="108:62">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="108:64" pos:end="108:65">&amp;&amp;</operator> <comment type="block" pos:start="108:67" pos:end="108:99">/* do not overwrite codec type */</comment>

                   <name pos:start="110:20" pos:end="110:25">format</name> <operator pos:start="110:27" pos:end="110:28">&amp;&amp;</operator> <name pos:start="110:30" pos:end="110:35">format</name> <operator pos:start="110:37" pos:end="110:38">!=</operator> <call pos:start="110:40" pos:end="110:61"><name pos:start="110:40" pos:end="110:44">MKTAG</name><argument_list pos:start="110:45" pos:end="110:61">(<argument pos:start="110:46" pos:end="110:48"><expr pos:start="110:46" pos:end="110:48"><literal type="char" pos:start="110:46" pos:end="110:48">'m'</literal></expr></argument>,<argument pos:start="110:50" pos:end="110:52"><expr pos:start="110:50" pos:end="110:52"><literal type="char" pos:start="110:50" pos:end="110:52">'p'</literal></expr></argument>,<argument pos:start="110:54" pos:end="110:56"><expr pos:start="110:54" pos:end="110:56"><literal type="char" pos:start="110:54" pos:end="110:56">'4'</literal></expr></argument>,<argument pos:start="110:58" pos:end="110:60"><expr pos:start="110:58" pos:end="110:60"><literal type="char" pos:start="110:58" pos:end="110:60">'s'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="110:64" pos:end="132:9">{<block_content pos:start="112:13" pos:end="130:13"> <comment type="block" pos:start="110:66" pos:end="110:93">/* skip old asf mpeg4 tag */</comment>

            <expr_stmt pos:start="112:13" pos:end="112:62"><expr pos:start="112:13" pos:end="112:61"><name pos:start="112:13" pos:end="112:14">id</name> <operator pos:start="112:16" pos:end="112:16">=</operator> <call pos:start="112:18" pos:end="112:61"><name pos:start="112:18" pos:end="112:32">ff_codec_get_id</name><argument_list pos:start="112:33" pos:end="112:61">(<argument pos:start="112:34" pos:end="112:52"><expr pos:start="112:34" pos:end="112:52"><name pos:start="112:34" pos:end="112:52">codec_movvideo_tags</name></expr></argument>, <argument pos:start="112:55" pos:end="112:60"><expr pos:start="112:55" pos:end="112:60"><name pos:start="112:55" pos:end="112:60">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="114:13" pos:end="116:64"><if pos:start="114:13" pos:end="116:64">if <condition pos:start="114:16" pos:end="114:24">(<expr pos:start="114:17" pos:end="114:23"><name pos:start="114:17" pos:end="114:18">id</name> <operator pos:start="114:20" pos:end="114:21">&lt;=</operator> <literal type="number" pos:start="114:23" pos:end="114:23">0</literal></expr>)</condition><block type="pseudo" pos:start="116:17" pos:end="116:64"><block_content pos:start="116:17" pos:end="116:64">

                <expr_stmt pos:start="116:17" pos:end="116:64"><expr pos:start="116:17" pos:end="116:63"><name pos:start="116:17" pos:end="116:18">id</name> <operator pos:start="116:20" pos:end="116:20">=</operator> <call pos:start="116:22" pos:end="116:63"><name pos:start="116:22" pos:end="116:36">ff_codec_get_id</name><argument_list pos:start="116:37" pos:end="116:63">(<argument pos:start="116:38" pos:end="116:54"><expr pos:start="116:38" pos:end="116:54"><name pos:start="116:38" pos:end="116:54">ff_codec_bmp_tags</name></expr></argument>, <argument pos:start="116:57" pos:end="116:62"><expr pos:start="116:57" pos:end="116:62"><name pos:start="116:57" pos:end="116:62">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="118:13" pos:end="130:13"><if pos:start="118:13" pos:end="120:59">if <condition pos:start="118:16" pos:end="118:23">(<expr pos:start="118:17" pos:end="118:22"><name pos:start="118:17" pos:end="118:18">id</name> <operator pos:start="118:20" pos:end="118:20">&gt;</operator> <literal type="number" pos:start="118:22" pos:end="118:22">0</literal></expr>)</condition><block type="pseudo" pos:start="120:17" pos:end="120:59"><block_content pos:start="120:17" pos:end="120:59">

                <expr_stmt pos:start="120:17" pos:end="120:59"><expr pos:start="120:17" pos:end="120:58"><name pos:start="120:17" pos:end="120:37"><name pos:start="120:17" pos:end="120:18">st</name><operator pos:start="120:19" pos:end="120:20">-&gt;</operator><name pos:start="120:21" pos:end="120:25">codec</name><operator pos:start="120:26" pos:end="120:27">-&gt;</operator><name pos:start="120:28" pos:end="120:37">codec_type</name></name> <operator pos:start="120:39" pos:end="120:39">=</operator> <name pos:start="120:41" pos:end="120:58">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="122:13" pos:end="130:13">else if <condition pos:start="122:21" pos:end="122:64">(<expr pos:start="122:22" pos:end="122:63"><name pos:start="122:22" pos:end="122:42"><name pos:start="122:22" pos:end="122:23">st</name><operator pos:start="122:24" pos:end="122:25">-&gt;</operator><name pos:start="122:26" pos:end="122:30">codec</name><operator pos:start="122:31" pos:end="122:32">-&gt;</operator><name pos:start="122:33" pos:end="122:42">codec_type</name></name> <operator pos:start="122:44" pos:end="122:45">==</operator> <name pos:start="122:47" pos:end="122:63">AVMEDIA_TYPE_DATA</name></expr>)</condition><block pos:start="122:65" pos:end="130:13">{<block_content pos:start="124:17" pos:end="128:66">

                <expr_stmt pos:start="124:17" pos:end="124:72"><expr pos:start="124:17" pos:end="124:71"><name pos:start="124:17" pos:end="124:18">id</name> <operator pos:start="124:20" pos:end="124:20">=</operator> <call pos:start="124:22" pos:end="124:71"><name pos:start="124:22" pos:end="124:36">ff_codec_get_id</name><argument_list pos:start="124:37" pos:end="124:71">(<argument pos:start="124:38" pos:end="124:62"><expr pos:start="124:38" pos:end="124:62"><name pos:start="124:38" pos:end="124:62">ff_codec_movsubtitle_tags</name></expr></argument>, <argument pos:start="124:65" pos:end="124:70"><expr pos:start="124:65" pos:end="124:70"><name pos:start="124:65" pos:end="124:70">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="126:17" pos:end="128:66"><if pos:start="126:17" pos:end="128:66">if <condition pos:start="126:20" pos:end="126:27">(<expr pos:start="126:21" pos:end="126:26"><name pos:start="126:21" pos:end="126:22">id</name> <operator pos:start="126:24" pos:end="126:24">&gt;</operator> <literal type="number" pos:start="126:26" pos:end="126:26">0</literal></expr>)</condition><block type="pseudo" pos:start="128:21" pos:end="128:66"><block_content pos:start="128:21" pos:end="128:66">

                    <expr_stmt pos:start="128:21" pos:end="128:66"><expr pos:start="128:21" pos:end="128:65"><name pos:start="128:21" pos:end="128:41"><name pos:start="128:21" pos:end="128:22">st</name><operator pos:start="128:23" pos:end="128:24">-&gt;</operator><name pos:start="128:25" pos:end="128:29">codec</name><operator pos:start="128:30" pos:end="128:31">-&gt;</operator><name pos:start="128:32" pos:end="128:41">codec_type</name></name> <operator pos:start="128:43" pos:end="128:43">=</operator> <name pos:start="128:45" pos:end="128:65">AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="136:9" pos:end="140:62"><expr pos:start="136:9" pos:end="140:61"><call pos:start="136:9" pos:end="140:61"><name pos:start="136:9" pos:end="136:15">av_dlog</name><argument_list pos:start="136:16" pos:end="140:61">(<argument pos:start="136:17" pos:end="136:21"><expr pos:start="136:17" pos:end="136:21"><name pos:start="136:17" pos:end="136:21"><name pos:start="136:17" pos:end="136:17">c</name><operator pos:start="136:18" pos:end="136:19">-&gt;</operator><name pos:start="136:20" pos:end="136:21">fc</name></name></expr></argument>, <argument pos:start="136:24" pos:end="136:62"><expr pos:start="136:24" pos:end="136:62"><literal type="string" pos:start="136:24" pos:end="136:62">"size=%d 4CC= %c%c%c%c codec_type=%d\n"</literal></expr></argument>, <argument pos:start="136:65" pos:end="136:68"><expr pos:start="136:65" pos:end="136:68"><name pos:start="136:65" pos:end="136:68">size</name></expr></argument>,

                <argument pos:start="138:17" pos:end="138:36"><expr pos:start="138:17" pos:end="138:36"><operator pos:start="138:17" pos:end="138:17">(</operator><name pos:start="138:18" pos:end="138:23">format</name> <operator pos:start="138:25" pos:end="138:26">&gt;&gt;</operator> <literal type="number" pos:start="138:28" pos:end="138:28">0</literal><operator pos:start="138:29" pos:end="138:29">)</operator> <operator pos:start="138:31" pos:end="138:31">&amp;</operator> <literal type="number" pos:start="138:33" pos:end="138:36">0xff</literal></expr></argument>, <argument pos:start="138:39" pos:end="138:58"><expr pos:start="138:39" pos:end="138:58"><operator pos:start="138:39" pos:end="138:39">(</operator><name pos:start="138:40" pos:end="138:45">format</name> <operator pos:start="138:47" pos:end="138:48">&gt;&gt;</operator> <literal type="number" pos:start="138:50" pos:end="138:50">8</literal><operator pos:start="138:51" pos:end="138:51">)</operator> <operator pos:start="138:53" pos:end="138:53">&amp;</operator> <literal type="number" pos:start="138:55" pos:end="138:58">0xff</literal></expr></argument>, <argument pos:start="138:61" pos:end="138:81"><expr pos:start="138:61" pos:end="138:81"><operator pos:start="138:61" pos:end="138:61">(</operator><name pos:start="138:62" pos:end="138:67">format</name> <operator pos:start="138:69" pos:end="138:70">&gt;&gt;</operator> <literal type="number" pos:start="138:72" pos:end="138:73">16</literal><operator pos:start="138:74" pos:end="138:74">)</operator> <operator pos:start="138:76" pos:end="138:76">&amp;</operator> <literal type="number" pos:start="138:78" pos:end="138:81">0xff</literal></expr></argument>,

                <argument pos:start="140:17" pos:end="140:37"><expr pos:start="140:17" pos:end="140:37"><operator pos:start="140:17" pos:end="140:17">(</operator><name pos:start="140:18" pos:end="140:23">format</name> <operator pos:start="140:25" pos:end="140:26">&gt;&gt;</operator> <literal type="number" pos:start="140:28" pos:end="140:29">24</literal><operator pos:start="140:30" pos:end="140:30">)</operator> <operator pos:start="140:32" pos:end="140:32">&amp;</operator> <literal type="number" pos:start="140:34" pos:end="140:37">0xff</literal></expr></argument>, <argument pos:start="140:40" pos:end="140:60"><expr pos:start="140:40" pos:end="140:60"><name pos:start="140:40" pos:end="140:60"><name pos:start="140:40" pos:end="140:41">st</name><operator pos:start="140:42" pos:end="140:43">-&gt;</operator><name pos:start="140:44" pos:end="140:48">codec</name><operator pos:start="140:49" pos:end="140:50">-&gt;</operator><name pos:start="140:51" pos:end="140:60">codec_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="144:9" pos:end="562:9"><if pos:start="144:9" pos:end="356:9">if <condition pos:start="144:12" pos:end="144:54">(<expr pos:start="144:13" pos:end="144:53"><name pos:start="144:13" pos:end="144:33"><name pos:start="144:13" pos:end="144:14">st</name><operator pos:start="144:15" pos:end="144:16">-&gt;</operator><name pos:start="144:17" pos:end="144:21">codec</name><operator pos:start="144:22" pos:end="144:23">-&gt;</operator><name pos:start="144:24" pos:end="144:33">codec_type</name></name><operator pos:start="144:34" pos:end="144:35">==</operator><name pos:start="144:36" pos:end="144:53">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="144:56" pos:end="356:9">{<block_content pos:start="146:13" pos:end="354:13">

            <decl_stmt pos:start="146:13" pos:end="146:42"><decl pos:start="146:13" pos:end="146:36"><type pos:start="146:13" pos:end="146:24"><name pos:start="146:13" pos:end="146:20">unsigned</name> <name pos:start="146:22" pos:end="146:24">int</name></type> <name pos:start="146:26" pos:end="146:36">color_depth</name></decl>, <decl pos:start="146:39" pos:end="146:41"><type ref="prev" pos:start="146:13" pos:end="146:24"/><name pos:start="146:39" pos:end="146:41">len</name></decl>;</decl_stmt>

            <decl_stmt pos:start="148:13" pos:end="148:32"><decl pos:start="148:13" pos:end="148:31"><type pos:start="148:13" pos:end="148:15"><name pos:start="148:13" pos:end="148:15">int</name></type> <name pos:start="148:17" pos:end="148:31">color_greyscale</name></decl>;</decl_stmt>



            <expr_stmt pos:start="152:13" pos:end="152:37"><expr pos:start="152:13" pos:end="152:36"><name pos:start="152:13" pos:end="152:31"><name pos:start="152:13" pos:end="152:14">st</name><operator pos:start="152:15" pos:end="152:16">-&gt;</operator><name pos:start="152:17" pos:end="152:21">codec</name><operator pos:start="152:22" pos:end="152:23">-&gt;</operator><name pos:start="152:24" pos:end="152:31">codec_id</name></name> <operator pos:start="152:33" pos:end="152:33">=</operator> <name pos:start="152:35" pos:end="152:36">id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="154:13" pos:end="154:26"><expr pos:start="154:13" pos:end="154:25"><call pos:start="154:13" pos:end="154:25"><name pos:start="154:13" pos:end="154:21">avio_rb16</name><argument_list pos:start="154:22" pos:end="154:25">(<argument pos:start="154:23" pos:end="154:24"><expr pos:start="154:23" pos:end="154:24"><name pos:start="154:23" pos:end="154:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="154:28" pos:end="154:40">/* version */</comment>

            <expr_stmt pos:start="156:13" pos:end="156:26"><expr pos:start="156:13" pos:end="156:25"><call pos:start="156:13" pos:end="156:25"><name pos:start="156:13" pos:end="156:21">avio_rb16</name><argument_list pos:start="156:22" pos:end="156:25">(<argument pos:start="156:23" pos:end="156:24"><expr pos:start="156:23" pos:end="156:24"><name pos:start="156:23" pos:end="156:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="156:28" pos:end="156:47">/* revision level */</comment>

            <expr_stmt pos:start="158:13" pos:end="158:26"><expr pos:start="158:13" pos:end="158:25"><call pos:start="158:13" pos:end="158:25"><name pos:start="158:13" pos:end="158:21">avio_rb32</name><argument_list pos:start="158:22" pos:end="158:25">(<argument pos:start="158:23" pos:end="158:24"><expr pos:start="158:23" pos:end="158:24"><name pos:start="158:23" pos:end="158:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="158:28" pos:end="158:39">/* vendor */</comment>

            <expr_stmt pos:start="160:13" pos:end="160:26"><expr pos:start="160:13" pos:end="160:25"><call pos:start="160:13" pos:end="160:25"><name pos:start="160:13" pos:end="160:21">avio_rb32</name><argument_list pos:start="160:22" pos:end="160:25">(<argument pos:start="160:23" pos:end="160:24"><expr pos:start="160:23" pos:end="160:24"><name pos:start="160:23" pos:end="160:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="160:28" pos:end="160:49">/* temporal quality */</comment>

            <expr_stmt pos:start="162:13" pos:end="162:26"><expr pos:start="162:13" pos:end="162:25"><call pos:start="162:13" pos:end="162:25"><name pos:start="162:13" pos:end="162:21">avio_rb32</name><argument_list pos:start="162:22" pos:end="162:25">(<argument pos:start="162:23" pos:end="162:24"><expr pos:start="162:23" pos:end="162:24"><name pos:start="162:23" pos:end="162:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="162:28" pos:end="162:48">/* spatial quality */</comment>



            <expr_stmt pos:start="166:13" pos:end="166:45"><expr pos:start="166:13" pos:end="166:44"><name pos:start="166:13" pos:end="166:28"><name pos:start="166:13" pos:end="166:14">st</name><operator pos:start="166:15" pos:end="166:16">-&gt;</operator><name pos:start="166:17" pos:end="166:21">codec</name><operator pos:start="166:22" pos:end="166:23">-&gt;</operator><name pos:start="166:24" pos:end="166:28">width</name></name> <operator pos:start="166:30" pos:end="166:30">=</operator> <call pos:start="166:32" pos:end="166:44"><name pos:start="166:32" pos:end="166:40">avio_rb16</name><argument_list pos:start="166:41" pos:end="166:44">(<argument pos:start="166:42" pos:end="166:43"><expr pos:start="166:42" pos:end="166:43"><name pos:start="166:42" pos:end="166:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="166:47" pos:end="166:57">/* width */</comment>

            <expr_stmt pos:start="168:13" pos:end="168:46"><expr pos:start="168:13" pos:end="168:45"><name pos:start="168:13" pos:end="168:29"><name pos:start="168:13" pos:end="168:14">st</name><operator pos:start="168:15" pos:end="168:16">-&gt;</operator><name pos:start="168:17" pos:end="168:21">codec</name><operator pos:start="168:22" pos:end="168:23">-&gt;</operator><name pos:start="168:24" pos:end="168:29">height</name></name> <operator pos:start="168:31" pos:end="168:31">=</operator> <call pos:start="168:33" pos:end="168:45"><name pos:start="168:33" pos:end="168:41">avio_rb16</name><argument_list pos:start="168:42" pos:end="168:45">(<argument pos:start="168:43" pos:end="168:44"><expr pos:start="168:43" pos:end="168:44"><name pos:start="168:43" pos:end="168:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="168:48" pos:end="168:59">/* height */</comment>



            <expr_stmt pos:start="172:13" pos:end="172:26"><expr pos:start="172:13" pos:end="172:25"><call pos:start="172:13" pos:end="172:25"><name pos:start="172:13" pos:end="172:21">avio_rb32</name><argument_list pos:start="172:22" pos:end="172:25">(<argument pos:start="172:23" pos:end="172:24"><expr pos:start="172:23" pos:end="172:24"><name pos:start="172:23" pos:end="172:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="172:28" pos:end="172:49">/* horiz resolution */</comment>

            <expr_stmt pos:start="174:13" pos:end="174:26"><expr pos:start="174:13" pos:end="174:25"><call pos:start="174:13" pos:end="174:25"><name pos:start="174:13" pos:end="174:21">avio_rb32</name><argument_list pos:start="174:22" pos:end="174:25">(<argument pos:start="174:23" pos:end="174:24"><expr pos:start="174:23" pos:end="174:24"><name pos:start="174:23" pos:end="174:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="174:28" pos:end="174:48">/* vert resolution */</comment>

            <expr_stmt pos:start="176:13" pos:end="176:26"><expr pos:start="176:13" pos:end="176:25"><call pos:start="176:13" pos:end="176:25"><name pos:start="176:13" pos:end="176:21">avio_rb32</name><argument_list pos:start="176:22" pos:end="176:25">(<argument pos:start="176:23" pos:end="176:24"><expr pos:start="176:23" pos:end="176:24"><name pos:start="176:23" pos:end="176:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="176:28" pos:end="176:52">/* data size, always 0 */</comment>

            <expr_stmt pos:start="178:13" pos:end="178:26"><expr pos:start="178:13" pos:end="178:25"><call pos:start="178:13" pos:end="178:25"><name pos:start="178:13" pos:end="178:21">avio_rb16</name><argument_list pos:start="178:22" pos:end="178:25">(<argument pos:start="178:23" pos:end="178:24"><expr pos:start="178:23" pos:end="178:24"><name pos:start="178:23" pos:end="178:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="178:28" pos:end="178:51">/* frames per samples */</comment>



            <expr_stmt pos:start="182:13" pos:end="182:30"><expr pos:start="182:13" pos:end="182:29"><name pos:start="182:13" pos:end="182:15">len</name> <operator pos:start="182:17" pos:end="182:17">=</operator> <call pos:start="182:19" pos:end="182:29"><name pos:start="182:19" pos:end="182:25">avio_r8</name><argument_list pos:start="182:26" pos:end="182:29">(<argument pos:start="182:27" pos:end="182:28"><expr pos:start="182:27" pos:end="182:28"><name pos:start="182:27" pos:end="182:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="182:32" pos:end="182:62">/* codec name, pascal string */</comment>

            <if_stmt pos:start="184:13" pos:end="186:25"><if pos:start="184:13" pos:end="186:25">if <condition pos:start="184:16" pos:end="184:25">(<expr pos:start="184:17" pos:end="184:24"><name pos:start="184:17" pos:end="184:19">len</name> <operator pos:start="184:21" pos:end="184:21">&gt;</operator> <literal type="number" pos:start="184:23" pos:end="184:24">31</literal></expr>)</condition><block type="pseudo" pos:start="186:17" pos:end="186:25"><block_content pos:start="186:17" pos:end="186:25">

                <expr_stmt pos:start="186:17" pos:end="186:25"><expr pos:start="186:17" pos:end="186:24"><name pos:start="186:17" pos:end="186:19">len</name> <operator pos:start="186:21" pos:end="186:21">=</operator> <literal type="number" pos:start="186:23" pos:end="186:24">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="188:13" pos:end="188:71"><expr pos:start="188:13" pos:end="188:70"><call pos:start="188:13" pos:end="188:70"><name pos:start="188:13" pos:end="188:31">mov_read_mac_string</name><argument_list pos:start="188:32" pos:end="188:70">(<argument pos:start="188:33" pos:end="188:33"><expr pos:start="188:33" pos:end="188:33"><name pos:start="188:33" pos:end="188:33">c</name></expr></argument>, <argument pos:start="188:36" pos:end="188:37"><expr pos:start="188:36" pos:end="188:37"><name pos:start="188:36" pos:end="188:37">pb</name></expr></argument>, <argument pos:start="188:40" pos:end="188:42"><expr pos:start="188:40" pos:end="188:42"><name pos:start="188:40" pos:end="188:42">len</name></expr></argument>, <argument pos:start="188:45" pos:end="188:65"><expr pos:start="188:45" pos:end="188:65"><name pos:start="188:45" pos:end="188:65"><name pos:start="188:45" pos:end="188:46">st</name><operator pos:start="188:47" pos:end="188:48">-&gt;</operator><name pos:start="188:49" pos:end="188:53">codec</name><operator pos:start="188:54" pos:end="188:55">-&gt;</operator><name pos:start="188:56" pos:end="188:65">codec_name</name></name></expr></argument>, <argument pos:start="188:68" pos:end="188:69"><expr pos:start="188:68" pos:end="188:69"><literal type="number" pos:start="188:68" pos:end="188:69">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="190:13" pos:end="192:40"><if pos:start="190:13" pos:end="192:40">if <condition pos:start="190:16" pos:end="190:25">(<expr pos:start="190:17" pos:end="190:24"><name pos:start="190:17" pos:end="190:19">len</name> <operator pos:start="190:21" pos:end="190:21">&lt;</operator> <literal type="number" pos:start="190:23" pos:end="190:24">31</literal></expr>)</condition><block type="pseudo" pos:start="192:17" pos:end="192:40"><block_content pos:start="192:17" pos:end="192:40">

                <expr_stmt pos:start="192:17" pos:end="192:40"><expr pos:start="192:17" pos:end="192:39"><call pos:start="192:17" pos:end="192:39"><name pos:start="192:17" pos:end="192:25">avio_skip</name><argument_list pos:start="192:26" pos:end="192:39">(<argument pos:start="192:27" pos:end="192:28"><expr pos:start="192:27" pos:end="192:28"><name pos:start="192:27" pos:end="192:28">pb</name></expr></argument>, <argument pos:start="192:31" pos:end="192:38"><expr pos:start="192:31" pos:end="192:38"><literal type="number" pos:start="192:31" pos:end="192:34">31</literal> <operator pos:start="192:34" pos:end="192:34">-</operator> <name pos:start="192:36" pos:end="192:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="194:13" pos:end="194:64">/* codec_tag YV12 triggers an UV swap in rawdec.c */</comment>

            <if_stmt pos:start="196:13" pos:end="198:63"><if pos:start="196:13" pos:end="198:63">if <condition pos:start="196:16" pos:end="196:80">(<expr pos:start="196:17" pos:end="196:79"><operator pos:start="196:17" pos:end="196:17">!</operator><call pos:start="196:18" pos:end="196:79"><name pos:start="196:18" pos:end="196:23">memcmp</name><argument_list pos:start="196:24" pos:end="196:79">(<argument pos:start="196:25" pos:end="196:45"><expr pos:start="196:25" pos:end="196:45"><name pos:start="196:25" pos:end="196:45"><name pos:start="196:25" pos:end="196:26">st</name><operator pos:start="196:27" pos:end="196:28">-&gt;</operator><name pos:start="196:29" pos:end="196:33">codec</name><operator pos:start="196:34" pos:end="196:35">-&gt;</operator><name pos:start="196:36" pos:end="196:45">codec_name</name></name></expr></argument>, <argument pos:start="196:48" pos:end="196:74"><expr pos:start="196:48" pos:end="196:74"><literal type="string" pos:start="196:48" pos:end="196:74">"Planar Y'CbCr 8-bit 4:2:0"</literal></expr></argument>, <argument pos:start="196:77" pos:end="196:78"><expr pos:start="196:77" pos:end="196:78"><literal type="number" pos:start="196:77" pos:end="196:78">25</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="198:17" pos:end="198:63"><block_content pos:start="198:17" pos:end="198:63">

                <expr_stmt pos:start="198:17" pos:end="198:63"><expr pos:start="198:17" pos:end="198:62"><name pos:start="198:17" pos:end="198:36"><name pos:start="198:17" pos:end="198:18">st</name><operator pos:start="198:19" pos:end="198:20">-&gt;</operator><name pos:start="198:21" pos:end="198:25">codec</name><operator pos:start="198:26" pos:end="198:27">-&gt;</operator><name pos:start="198:28" pos:end="198:36">codec_tag</name></name><operator pos:start="198:37" pos:end="198:37">=</operator><call pos:start="198:38" pos:end="198:62"><name pos:start="198:38" pos:end="198:42">MKTAG</name><argument_list pos:start="198:43" pos:end="198:62">(<argument pos:start="198:44" pos:end="198:46"><expr pos:start="198:44" pos:end="198:46"><literal type="char" pos:start="198:44" pos:end="198:46">'I'</literal></expr></argument>, <argument pos:start="198:49" pos:end="198:51"><expr pos:start="198:49" pos:end="198:51"><literal type="char" pos:start="198:49" pos:end="198:51">'4'</literal></expr></argument>, <argument pos:start="198:54" pos:end="198:56"><expr pos:start="198:54" pos:end="198:56"><literal type="char" pos:start="198:54" pos:end="198:56">'2'</literal></expr></argument>, <argument pos:start="198:59" pos:end="198:61"><expr pos:start="198:59" pos:end="198:61"><literal type="char" pos:start="198:59" pos:end="198:61">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="202:13" pos:end="202:61"><expr pos:start="202:13" pos:end="202:60"><name pos:start="202:13" pos:end="202:44"><name pos:start="202:13" pos:end="202:14">st</name><operator pos:start="202:15" pos:end="202:16">-&gt;</operator><name pos:start="202:17" pos:end="202:21">codec</name><operator pos:start="202:22" pos:end="202:23">-&gt;</operator><name pos:start="202:24" pos:end="202:44">bits_per_coded_sample</name></name> <operator pos:start="202:46" pos:end="202:46">=</operator> <call pos:start="202:48" pos:end="202:60"><name pos:start="202:48" pos:end="202:56">avio_rb16</name><argument_list pos:start="202:57" pos:end="202:60">(<argument pos:start="202:58" pos:end="202:59"><expr pos:start="202:58" pos:end="202:59"><name pos:start="202:58" pos:end="202:59">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="202:63" pos:end="202:73">/* depth */</comment>

            <expr_stmt pos:start="204:13" pos:end="204:54"><expr pos:start="204:13" pos:end="204:53"><name pos:start="204:13" pos:end="204:37"><name pos:start="204:13" pos:end="204:14">st</name><operator pos:start="204:15" pos:end="204:16">-&gt;</operator><name pos:start="204:17" pos:end="204:21">codec</name><operator pos:start="204:22" pos:end="204:23">-&gt;</operator><name pos:start="204:24" pos:end="204:37">color_table_id</name></name> <operator pos:start="204:39" pos:end="204:39">=</operator> <call pos:start="204:41" pos:end="204:53"><name pos:start="204:41" pos:end="204:49">avio_rb16</name><argument_list pos:start="204:50" pos:end="204:53">(<argument pos:start="204:51" pos:end="204:52"><expr pos:start="204:51" pos:end="204:52"><name pos:start="204:51" pos:end="204:52">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="204:56" pos:end="204:74">/* colortable id */</comment>

            <expr_stmt pos:start="206:13" pos:end="208:80"><expr pos:start="206:13" pos:end="208:79"><call pos:start="206:13" pos:end="208:79"><name pos:start="206:13" pos:end="206:19">av_dlog</name><argument_list pos:start="206:20" pos:end="208:79">(<argument pos:start="206:21" pos:end="206:25"><expr pos:start="206:21" pos:end="206:25"><name pos:start="206:21" pos:end="206:25"><name pos:start="206:21" pos:end="206:21">c</name><operator pos:start="206:22" pos:end="206:23">-&gt;</operator><name pos:start="206:24" pos:end="206:25">fc</name></name></expr></argument>, <argument pos:start="206:28" pos:end="206:51"><expr pos:start="206:28" pos:end="206:51"><literal type="string" pos:start="206:28" pos:end="206:51">"depth %d, ctab id %d\n"</literal></expr></argument>,

                   <argument pos:start="208:20" pos:end="208:51"><expr pos:start="208:20" pos:end="208:51"><name pos:start="208:20" pos:end="208:51"><name pos:start="208:20" pos:end="208:21">st</name><operator pos:start="208:22" pos:end="208:23">-&gt;</operator><name pos:start="208:24" pos:end="208:28">codec</name><operator pos:start="208:29" pos:end="208:30">-&gt;</operator><name pos:start="208:31" pos:end="208:51">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="208:54" pos:end="208:78"><expr pos:start="208:54" pos:end="208:78"><name pos:start="208:54" pos:end="208:78"><name pos:start="208:54" pos:end="208:55">st</name><operator pos:start="208:56" pos:end="208:57">-&gt;</operator><name pos:start="208:58" pos:end="208:62">codec</name><operator pos:start="208:63" pos:end="208:64">-&gt;</operator><name pos:start="208:65" pos:end="208:78">color_table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="210:13" pos:end="210:50">/* figure out the palette situation */</comment>

            <expr_stmt pos:start="212:13" pos:end="212:66"><expr pos:start="212:13" pos:end="212:65"><name pos:start="212:13" pos:end="212:23">color_depth</name> <operator pos:start="212:25" pos:end="212:25">=</operator> <name pos:start="212:27" pos:end="212:58"><name pos:start="212:27" pos:end="212:28">st</name><operator pos:start="212:29" pos:end="212:30">-&gt;</operator><name pos:start="212:31" pos:end="212:35">codec</name><operator pos:start="212:36" pos:end="212:37">-&gt;</operator><name pos:start="212:38" pos:end="212:58">bits_per_coded_sample</name></name> <operator pos:start="212:60" pos:end="212:60">&amp;</operator> <literal type="number" pos:start="212:62" pos:end="212:65">0x1F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="214:13" pos:end="214:70"><expr pos:start="214:13" pos:end="214:69"><name pos:start="214:13" pos:end="214:27">color_greyscale</name> <operator pos:start="214:29" pos:end="214:29">=</operator> <name pos:start="214:31" pos:end="214:62"><name pos:start="214:31" pos:end="214:32">st</name><operator pos:start="214:33" pos:end="214:34">-&gt;</operator><name pos:start="214:35" pos:end="214:39">codec</name><operator pos:start="214:40" pos:end="214:41">-&gt;</operator><name pos:start="214:42" pos:end="214:62">bits_per_coded_sample</name></name> <operator pos:start="214:64" pos:end="214:64">&amp;</operator> <literal type="number" pos:start="214:66" pos:end="214:69">0x20</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="218:13" pos:end="218:68">/* if the depth is 2, 4, or 8 bpp, file is palettized */</comment>

            <if_stmt pos:start="220:13" pos:end="354:13"><if pos:start="220:13" pos:end="354:13">if <condition pos:start="220:16" pos:end="222:35">(<expr pos:start="220:17" pos:end="222:34"><operator pos:start="220:17" pos:end="220:17">(</operator><name pos:start="220:18" pos:end="220:28">color_depth</name> <operator pos:start="220:30" pos:end="220:31">==</operator> <literal type="number" pos:start="220:33" pos:end="220:33">2</literal><operator pos:start="220:34" pos:end="220:34">)</operator> <operator pos:start="220:36" pos:end="220:37">||</operator> <operator pos:start="220:39" pos:end="220:39">(</operator><name pos:start="220:40" pos:end="220:50">color_depth</name> <operator pos:start="220:52" pos:end="220:53">==</operator> <literal type="number" pos:start="220:55" pos:end="220:55">4</literal><operator pos:start="220:56" pos:end="220:56">)</operator> <operator pos:start="220:58" pos:end="220:59">||</operator>

                <operator pos:start="222:17" pos:end="222:17">(</operator><name pos:start="222:18" pos:end="222:28">color_depth</name> <operator pos:start="222:30" pos:end="222:31">==</operator> <literal type="number" pos:start="222:33" pos:end="222:33">8</literal><operator pos:start="222:34" pos:end="222:34">)</operator></expr>)</condition> <block pos:start="222:37" pos:end="354:13">{<block_content pos:start="226:17" pos:end="352:36">

                <comment type="block" pos:start="224:17" pos:end="224:43">/* for palette traversal */</comment>

                <decl_stmt pos:start="226:17" pos:end="226:65"><decl pos:start="226:17" pos:end="226:40"><type pos:start="226:17" pos:end="226:28"><name pos:start="226:17" pos:end="226:24">unsigned</name> <name pos:start="226:26" pos:end="226:28">int</name></type> <name pos:start="226:30" pos:end="226:40">color_start</name></decl>, <decl pos:start="226:43" pos:end="226:53"><type ref="prev" pos:start="226:17" pos:end="226:28"/><name pos:start="226:43" pos:end="226:53">color_count</name></decl>, <decl pos:start="226:56" pos:end="226:64"><type ref="prev" pos:start="226:17" pos:end="226:28"/><name pos:start="226:56" pos:end="226:64">color_end</name></decl>;</decl_stmt>

                <decl_stmt pos:start="228:17" pos:end="228:38"><decl pos:start="228:17" pos:end="228:31"><type pos:start="228:17" pos:end="228:29"><name pos:start="228:17" pos:end="228:24">unsigned</name> <name pos:start="228:26" pos:end="228:29">char</name></type> <name pos:start="228:31" pos:end="228:31">r</name></decl>, <decl pos:start="228:34" pos:end="228:34"><type ref="prev" pos:start="228:17" pos:end="228:29"/><name pos:start="228:34" pos:end="228:34">g</name></decl>, <decl pos:start="228:37" pos:end="228:37"><type ref="prev" pos:start="228:17" pos:end="228:29"/><name pos:start="228:37" pos:end="228:37">b</name></decl>;</decl_stmt>



                <if_stmt pos:start="232:17" pos:end="350:17"><if pos:start="232:17" pos:end="268:17">if <condition pos:start="232:20" pos:end="232:36">(<expr pos:start="232:21" pos:end="232:35"><name pos:start="232:21" pos:end="232:35">color_greyscale</name></expr>)</condition> <block pos:start="232:38" pos:end="268:17">{<block_content pos:start="234:21" pos:end="266:21">

                    <decl_stmt pos:start="234:21" pos:end="234:47"><decl pos:start="234:21" pos:end="234:35"><type pos:start="234:21" pos:end="234:23"><name pos:start="234:21" pos:end="234:23">int</name></type> <name pos:start="234:25" pos:end="234:35">color_index</name></decl>, <decl pos:start="234:38" pos:end="234:46"><type ref="prev" pos:start="234:21" pos:end="234:23"/><name pos:start="234:38" pos:end="234:46">color_dec</name></decl>;</decl_stmt>

                    <comment type="block" pos:start="236:21" pos:end="236:55">/* compute the greyscale palette */</comment>

                    <expr_stmt pos:start="238:21" pos:end="238:67"><expr pos:start="238:21" pos:end="238:66"><name pos:start="238:21" pos:end="238:52"><name pos:start="238:21" pos:end="238:22">st</name><operator pos:start="238:23" pos:end="238:24">-&gt;</operator><name pos:start="238:25" pos:end="238:29">codec</name><operator pos:start="238:30" pos:end="238:31">-&gt;</operator><name pos:start="238:32" pos:end="238:52">bits_per_coded_sample</name></name> <operator pos:start="238:54" pos:end="238:54">=</operator> <name pos:start="238:56" pos:end="238:66">color_depth</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="240:21" pos:end="240:51"><expr pos:start="240:21" pos:end="240:50"><name pos:start="240:21" pos:end="240:31">color_count</name> <operator pos:start="240:33" pos:end="240:33">=</operator> <literal type="number" pos:start="240:35" pos:end="240:35">1</literal> <operator pos:start="240:37" pos:end="240:38">&lt;&lt;</operator> <name pos:start="240:40" pos:end="240:50">color_depth</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="242:21" pos:end="242:38"><expr pos:start="242:21" pos:end="242:37"><name pos:start="242:21" pos:end="242:31">color_index</name> <operator pos:start="242:33" pos:end="242:33">=</operator> <literal type="number" pos:start="242:35" pos:end="242:37">255</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="244:21" pos:end="244:56"><expr pos:start="244:21" pos:end="244:55"><name pos:start="244:21" pos:end="244:29">color_dec</name> <operator pos:start="244:31" pos:end="244:31">=</operator> <literal type="number" pos:start="244:33" pos:end="244:35">256</literal> <operator pos:start="244:37" pos:end="244:37">/</operator> <operator pos:start="244:39" pos:end="244:39">(</operator><name pos:start="244:40" pos:end="244:50">color_count</name> <operator pos:start="244:52" pos:end="244:52">-</operator> <literal type="number" pos:start="244:54" pos:end="244:54">1</literal><operator pos:start="244:55" pos:end="244:55">)</operator></expr>;</expr_stmt>

                    <for pos:start="246:21" pos:end="266:21">for <control pos:start="246:25" pos:end="246:53">(<init pos:start="246:26" pos:end="246:31"><expr pos:start="246:26" pos:end="246:30"><name pos:start="246:26" pos:end="246:26">j</name> <operator pos:start="246:28" pos:end="246:28">=</operator> <literal type="number" pos:start="246:30" pos:end="246:30">0</literal></expr>;</init> <condition pos:start="246:33" pos:end="246:48"><expr pos:start="246:33" pos:end="246:47"><name pos:start="246:33" pos:end="246:33">j</name> <operator pos:start="246:35" pos:end="246:35">&lt;</operator> <name pos:start="246:37" pos:end="246:47">color_count</name></expr>;</condition> <incr pos:start="246:50" pos:end="246:52"><expr pos:start="246:50" pos:end="246:52"><name pos:start="246:50" pos:end="246:50">j</name><operator pos:start="246:51" pos:end="246:52">++</operator></expr></incr>)</control> <block pos:start="246:55" pos:end="266:21">{<block_content pos:start="248:25" pos:end="264:44">

                        <if_stmt pos:start="248:25" pos:end="254:48"><if pos:start="248:25" pos:end="252:25">if <condition pos:start="248:28" pos:end="248:51">(<expr pos:start="248:29" pos:end="248:50"><name pos:start="248:29" pos:end="248:30">id</name> <operator pos:start="248:32" pos:end="248:33">==</operator> <name pos:start="248:35" pos:end="248:50">CODEC_ID_CINEPAK</name></expr>)</condition><block pos:start="248:52" pos:end="252:25">{<block_content pos:start="250:29" pos:end="250:70">

                            <expr_stmt pos:start="250:29" pos:end="250:70"><expr pos:start="250:29" pos:end="250:69"><name pos:start="250:29" pos:end="250:29">r</name> <operator pos:start="250:31" pos:end="250:31">=</operator> <name pos:start="250:33" pos:end="250:33">g</name> <operator pos:start="250:35" pos:end="250:35">=</operator> <name pos:start="250:37" pos:end="250:37">b</name> <operator pos:start="250:39" pos:end="250:39">=</operator> <name pos:start="250:41" pos:end="250:51">color_count</name> <operator pos:start="250:53" pos:end="250:53">-</operator> <literal type="number" pos:start="250:55" pos:end="250:57">1</literal> <operator pos:start="250:57" pos:end="250:57">-</operator> <name pos:start="250:59" pos:end="250:69">color_index</name></expr>;</expr_stmt>

                        </block_content>}</block></if><else pos:start="252:26" pos:end="254:48">else<block type="pseudo" pos:start="254:25" pos:end="254:48"><block_content pos:start="254:25" pos:end="254:48">

                        <expr_stmt pos:start="254:25" pos:end="254:48"><expr pos:start="254:25" pos:end="254:47"><name pos:start="254:25" pos:end="254:25">r</name> <operator pos:start="254:27" pos:end="254:27">=</operator> <name pos:start="254:29" pos:end="254:29">g</name> <operator pos:start="254:31" pos:end="254:31">=</operator> <name pos:start="254:33" pos:end="254:33">b</name> <operator pos:start="254:35" pos:end="254:35">=</operator> <name pos:start="254:37" pos:end="254:47">color_index</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="256:25" pos:end="258:55"><expr pos:start="256:25" pos:end="258:54"><name pos:start="256:25" pos:end="256:38"><name pos:start="256:25" pos:end="256:26">sc</name><operator pos:start="256:27" pos:end="256:28">-&gt;</operator><name pos:start="256:29" pos:end="256:35">palette</name><index pos:start="256:36" pos:end="256:38">[<expr pos:start="256:37" pos:end="256:37"><name pos:start="256:37" pos:end="256:37">j</name></expr>]</index></name> <operator pos:start="256:40" pos:end="256:40">=</operator>

                            <operator pos:start="258:29" pos:end="258:29">(</operator><name pos:start="258:30" pos:end="258:30">r</name> <operator pos:start="258:32" pos:end="258:33">&lt;&lt;</operator> <literal type="number" pos:start="258:35" pos:end="258:36">16</literal><operator pos:start="258:37" pos:end="258:37">)</operator> <operator pos:start="258:39" pos:end="258:39">|</operator> <operator pos:start="258:41" pos:end="258:41">(</operator><name pos:start="258:42" pos:end="258:42">g</name> <operator pos:start="258:44" pos:end="258:45">&lt;&lt;</operator> <literal type="number" pos:start="258:47" pos:end="258:47">8</literal><operator pos:start="258:48" pos:end="258:48">)</operator> <operator pos:start="258:50" pos:end="258:50">|</operator> <operator pos:start="258:52" pos:end="258:52">(</operator><name pos:start="258:53" pos:end="258:53">b</name><operator pos:start="258:54" pos:end="258:54">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="260:25" pos:end="260:49"><expr pos:start="260:25" pos:end="260:48"><name pos:start="260:25" pos:end="260:35">color_index</name> <operator pos:start="260:37" pos:end="260:38">-=</operator> <name pos:start="260:40" pos:end="260:48">color_dec</name></expr>;</expr_stmt>

                        <if_stmt pos:start="262:25" pos:end="264:44"><if pos:start="262:25" pos:end="264:44">if <condition pos:start="262:28" pos:end="262:44">(<expr pos:start="262:29" pos:end="262:43"><name pos:start="262:29" pos:end="262:39">color_index</name> <operator pos:start="262:41" pos:end="262:41">&lt;</operator> <literal type="number" pos:start="262:43" pos:end="262:43">0</literal></expr>)</condition><block type="pseudo" pos:start="264:29" pos:end="264:44"><block_content pos:start="264:29" pos:end="264:44">

                            <expr_stmt pos:start="264:29" pos:end="264:44"><expr pos:start="264:29" pos:end="264:43"><name pos:start="264:29" pos:end="264:39">color_index</name> <operator pos:start="264:41" pos:end="264:41">=</operator> <literal type="number" pos:start="264:43" pos:end="264:43">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <if type="elseif" pos:start="268:19" pos:end="304:17">else if <condition pos:start="268:27" pos:end="268:53">(<expr pos:start="268:28" pos:end="268:52"><name pos:start="268:28" pos:end="268:52"><name pos:start="268:28" pos:end="268:29">st</name><operator pos:start="268:30" pos:end="268:31">-&gt;</operator><name pos:start="268:32" pos:end="268:36">codec</name><operator pos:start="268:37" pos:end="268:38">-&gt;</operator><name pos:start="268:39" pos:end="268:52">color_table_id</name></name></expr>)</condition> <block pos:start="268:55" pos:end="304:17">{<block_content pos:start="270:21" pos:end="302:21">

                    <decl_stmt pos:start="270:21" pos:end="270:47"><decl pos:start="270:21" pos:end="270:46"><type pos:start="270:21" pos:end="270:35"><specifier pos:start="270:21" pos:end="270:25">const</specifier> <name pos:start="270:27" pos:end="270:33">uint8_t</name> <modifier pos:start="270:35" pos:end="270:35">*</modifier></type><name pos:start="270:36" pos:end="270:46">color_table</name></decl>;</decl_stmt>

                    <comment type="block" pos:start="272:21" pos:end="272:71">/* if flag bit 3 is set, use the default palette */</comment>

                    <expr_stmt pos:start="274:21" pos:end="274:51"><expr pos:start="274:21" pos:end="274:50"><name pos:start="274:21" pos:end="274:31">color_count</name> <operator pos:start="274:33" pos:end="274:33">=</operator> <literal type="number" pos:start="274:35" pos:end="274:35">1</literal> <operator pos:start="274:37" pos:end="274:38">&lt;&lt;</operator> <name pos:start="274:40" pos:end="274:50">color_depth</name></expr>;</expr_stmt>

                    <if_stmt pos:start="276:21" pos:end="286:64"><if pos:start="276:21" pos:end="278:62">if <condition pos:start="276:24" pos:end="276:41">(<expr pos:start="276:25" pos:end="276:40"><name pos:start="276:25" pos:end="276:35">color_depth</name> <operator pos:start="276:37" pos:end="276:38">==</operator> <literal type="number" pos:start="276:40" pos:end="276:40">2</literal></expr>)</condition><block type="pseudo" pos:start="278:25" pos:end="278:62"><block_content pos:start="278:25" pos:end="278:62">

                        <expr_stmt pos:start="278:25" pos:end="278:62"><expr pos:start="278:25" pos:end="278:61"><name pos:start="278:25" pos:end="278:35">color_table</name> <operator pos:start="278:37" pos:end="278:37">=</operator> <name pos:start="278:39" pos:end="278:61">ff_qt_default_palette_4</name></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="280:21" pos:end="282:63">else if <condition pos:start="280:29" pos:end="280:46">(<expr pos:start="280:30" pos:end="280:45"><name pos:start="280:30" pos:end="280:40">color_depth</name> <operator pos:start="280:42" pos:end="280:43">==</operator> <literal type="number" pos:start="280:45" pos:end="280:45">4</literal></expr>)</condition><block type="pseudo" pos:start="282:25" pos:end="282:63"><block_content pos:start="282:25" pos:end="282:63">

                        <expr_stmt pos:start="282:25" pos:end="282:63"><expr pos:start="282:25" pos:end="282:62"><name pos:start="282:25" pos:end="282:35">color_table</name> <operator pos:start="282:37" pos:end="282:37">=</operator> <name pos:start="282:39" pos:end="282:62">ff_qt_default_palette_16</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="284:21" pos:end="286:64">else<block type="pseudo" pos:start="286:25" pos:end="286:64"><block_content pos:start="286:25" pos:end="286:64">

                        <expr_stmt pos:start="286:25" pos:end="286:64"><expr pos:start="286:25" pos:end="286:63"><name pos:start="286:25" pos:end="286:35">color_table</name> <operator pos:start="286:37" pos:end="286:37">=</operator> <name pos:start="286:39" pos:end="286:63">ff_qt_default_palette_256</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                    <for pos:start="290:21" pos:end="302:21">for <control pos:start="290:25" pos:end="290:53">(<init pos:start="290:26" pos:end="290:31"><expr pos:start="290:26" pos:end="290:30"><name pos:start="290:26" pos:end="290:26">j</name> <operator pos:start="290:28" pos:end="290:28">=</operator> <literal type="number" pos:start="290:30" pos:end="290:30">0</literal></expr>;</init> <condition pos:start="290:33" pos:end="290:48"><expr pos:start="290:33" pos:end="290:47"><name pos:start="290:33" pos:end="290:33">j</name> <operator pos:start="290:35" pos:end="290:35">&lt;</operator> <name pos:start="290:37" pos:end="290:47">color_count</name></expr>;</condition> <incr pos:start="290:50" pos:end="290:52"><expr pos:start="290:50" pos:end="290:52"><name pos:start="290:50" pos:end="290:50">j</name><operator pos:start="290:51" pos:end="290:52">++</operator></expr></incr>)</control> <block pos:start="290:55" pos:end="302:21">{<block_content pos:start="292:25" pos:end="300:55">

                        <expr_stmt pos:start="292:25" pos:end="292:51"><expr pos:start="292:25" pos:end="292:50"><name pos:start="292:25" pos:end="292:25">r</name> <operator pos:start="292:27" pos:end="292:27">=</operator> <name pos:start="292:29" pos:end="292:50"><name pos:start="292:29" pos:end="292:39">color_table</name><index pos:start="292:40" pos:end="292:50">[<expr pos:start="292:41" pos:end="292:49"><name pos:start="292:41" pos:end="292:41">j</name> <operator pos:start="292:43" pos:end="292:43">*</operator> <literal type="number" pos:start="292:45" pos:end="292:47">3</literal> <operator pos:start="292:47" pos:end="292:47">+</operator> <literal type="number" pos:start="292:49" pos:end="292:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="294:25" pos:end="294:51"><expr pos:start="294:25" pos:end="294:50"><name pos:start="294:25" pos:end="294:25">g</name> <operator pos:start="294:27" pos:end="294:27">=</operator> <name pos:start="294:29" pos:end="294:50"><name pos:start="294:29" pos:end="294:39">color_table</name><index pos:start="294:40" pos:end="294:50">[<expr pos:start="294:41" pos:end="294:49"><name pos:start="294:41" pos:end="294:41">j</name> <operator pos:start="294:43" pos:end="294:43">*</operator> <literal type="number" pos:start="294:45" pos:end="294:47">3</literal> <operator pos:start="294:47" pos:end="294:47">+</operator> <literal type="number" pos:start="294:49" pos:end="294:49">1</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="296:25" pos:end="296:51"><expr pos:start="296:25" pos:end="296:50"><name pos:start="296:25" pos:end="296:25">b</name> <operator pos:start="296:27" pos:end="296:27">=</operator> <name pos:start="296:29" pos:end="296:50"><name pos:start="296:29" pos:end="296:39">color_table</name><index pos:start="296:40" pos:end="296:50">[<expr pos:start="296:41" pos:end="296:49"><name pos:start="296:41" pos:end="296:41">j</name> <operator pos:start="296:43" pos:end="296:43">*</operator> <literal type="number" pos:start="296:45" pos:end="296:47">3</literal> <operator pos:start="296:47" pos:end="296:47">+</operator> <literal type="number" pos:start="296:49" pos:end="296:49">2</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="298:25" pos:end="300:55"><expr pos:start="298:25" pos:end="300:54"><name pos:start="298:25" pos:end="298:38"><name pos:start="298:25" pos:end="298:26">sc</name><operator pos:start="298:27" pos:end="298:28">-&gt;</operator><name pos:start="298:29" pos:end="298:35">palette</name><index pos:start="298:36" pos:end="298:38">[<expr pos:start="298:37" pos:end="298:37"><name pos:start="298:37" pos:end="298:37">j</name></expr>]</index></name> <operator pos:start="298:40" pos:end="298:40">=</operator>

                            <operator pos:start="300:29" pos:end="300:29">(</operator><name pos:start="300:30" pos:end="300:30">r</name> <operator pos:start="300:32" pos:end="300:33">&lt;&lt;</operator> <literal type="number" pos:start="300:35" pos:end="300:36">16</literal><operator pos:start="300:37" pos:end="300:37">)</operator> <operator pos:start="300:39" pos:end="300:39">|</operator> <operator pos:start="300:41" pos:end="300:41">(</operator><name pos:start="300:42" pos:end="300:42">g</name> <operator pos:start="300:44" pos:end="300:45">&lt;&lt;</operator> <literal type="number" pos:start="300:47" pos:end="300:47">8</literal><operator pos:start="300:48" pos:end="300:48">)</operator> <operator pos:start="300:50" pos:end="300:50">|</operator> <operator pos:start="300:52" pos:end="300:52">(</operator><name pos:start="300:53" pos:end="300:53">b</name><operator pos:start="300:54" pos:end="300:54">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="304:19" pos:end="350:17">else <block pos:start="304:24" pos:end="350:17">{<block_content pos:start="308:21" pos:end="348:21">

                    <comment type="block" pos:start="306:21" pos:end="306:56">/* load the palette from the file */</comment>

                    <expr_stmt pos:start="308:21" pos:end="308:48"><expr pos:start="308:21" pos:end="308:47"><name pos:start="308:21" pos:end="308:31">color_start</name> <operator pos:start="308:33" pos:end="308:33">=</operator> <call pos:start="308:35" pos:end="308:47"><name pos:start="308:35" pos:end="308:43">avio_rb32</name><argument_list pos:start="308:44" pos:end="308:47">(<argument pos:start="308:45" pos:end="308:46"><expr pos:start="308:45" pos:end="308:46"><name pos:start="308:45" pos:end="308:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="310:21" pos:end="310:48"><expr pos:start="310:21" pos:end="310:47"><name pos:start="310:21" pos:end="310:31">color_count</name> <operator pos:start="310:33" pos:end="310:33">=</operator> <call pos:start="310:35" pos:end="310:47"><name pos:start="310:35" pos:end="310:43">avio_rb16</name><argument_list pos:start="310:44" pos:end="310:47">(<argument pos:start="310:45" pos:end="310:46"><expr pos:start="310:45" pos:end="310:46"><name pos:start="310:45" pos:end="310:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="312:21" pos:end="312:46"><expr pos:start="312:21" pos:end="312:45"><name pos:start="312:21" pos:end="312:29">color_end</name> <operator pos:start="312:31" pos:end="312:31">=</operator> <call pos:start="312:33" pos:end="312:45"><name pos:start="312:33" pos:end="312:41">avio_rb16</name><argument_list pos:start="312:42" pos:end="312:45">(<argument pos:start="312:43" pos:end="312:44"><expr pos:start="312:43" pos:end="312:44"><name pos:start="312:43" pos:end="312:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="314:21" pos:end="348:21"><if pos:start="314:21" pos:end="348:21">if <condition pos:start="314:24" pos:end="316:43">(<expr pos:start="314:25" pos:end="316:42"><operator pos:start="314:25" pos:end="314:25">(</operator><name pos:start="314:26" pos:end="314:36">color_start</name> <operator pos:start="314:38" pos:end="314:39">&lt;=</operator> <literal type="number" pos:start="314:41" pos:end="314:43">255</literal><operator pos:start="314:44" pos:end="314:44">)</operator> <operator pos:start="314:46" pos:end="314:47">&amp;&amp;</operator>

                        <operator pos:start="316:25" pos:end="316:25">(</operator><name pos:start="316:26" pos:end="316:34">color_end</name> <operator pos:start="316:36" pos:end="316:37">&lt;=</operator> <literal type="number" pos:start="316:39" pos:end="316:41">255</literal><operator pos:start="316:42" pos:end="316:42">)</operator></expr>)</condition> <block pos:start="316:45" pos:end="348:21">{<block_content pos:start="318:25" pos:end="346:25">

                        <for pos:start="318:25" pos:end="346:25">for <control pos:start="318:29" pos:end="318:66">(<init pos:start="318:30" pos:end="318:45"><expr pos:start="318:30" pos:end="318:44"><name pos:start="318:30" pos:end="318:30">j</name> <operator pos:start="318:32" pos:end="318:32">=</operator> <name pos:start="318:34" pos:end="318:44">color_start</name></expr>;</init> <condition pos:start="318:47" pos:end="318:61"><expr pos:start="318:47" pos:end="318:60"><name pos:start="318:47" pos:end="318:47">j</name> <operator pos:start="318:49" pos:end="318:50">&lt;=</operator> <name pos:start="318:52" pos:end="318:60">color_end</name></expr>;</condition> <incr pos:start="318:63" pos:end="318:65"><expr pos:start="318:63" pos:end="318:65"><name pos:start="318:63" pos:end="318:63">j</name><operator pos:start="318:64" pos:end="318:65">++</operator></expr></incr>)</control> <block pos:start="318:68" pos:end="346:25">{<block_content pos:start="326:29" pos:end="344:59">

                            <comment type="block" pos:start="320:29" pos:end="324:42">/* each R, G, or B component is 16 bits;

                             * only use the top 8 bits; skip alpha bytes

                             * up front */</comment>

                            <expr_stmt pos:start="326:29" pos:end="326:40"><expr pos:start="326:29" pos:end="326:39"><call pos:start="326:29" pos:end="326:39"><name pos:start="326:29" pos:end="326:35">avio_r8</name><argument_list pos:start="326:36" pos:end="326:39">(<argument pos:start="326:37" pos:end="326:38"><expr pos:start="326:37" pos:end="326:38"><name pos:start="326:37" pos:end="326:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="328:29" pos:end="328:40"><expr pos:start="328:29" pos:end="328:39"><call pos:start="328:29" pos:end="328:39"><name pos:start="328:29" pos:end="328:35">avio_r8</name><argument_list pos:start="328:36" pos:end="328:39">(<argument pos:start="328:37" pos:end="328:38"><expr pos:start="328:37" pos:end="328:38"><name pos:start="328:37" pos:end="328:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="330:29" pos:end="330:44"><expr pos:start="330:29" pos:end="330:43"><name pos:start="330:29" pos:end="330:29">r</name> <operator pos:start="330:31" pos:end="330:31">=</operator> <call pos:start="330:33" pos:end="330:43"><name pos:start="330:33" pos:end="330:39">avio_r8</name><argument_list pos:start="330:40" pos:end="330:43">(<argument pos:start="330:41" pos:end="330:42"><expr pos:start="330:41" pos:end="330:42"><name pos:start="330:41" pos:end="330:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="332:29" pos:end="332:40"><expr pos:start="332:29" pos:end="332:39"><call pos:start="332:29" pos:end="332:39"><name pos:start="332:29" pos:end="332:35">avio_r8</name><argument_list pos:start="332:36" pos:end="332:39">(<argument pos:start="332:37" pos:end="332:38"><expr pos:start="332:37" pos:end="332:38"><name pos:start="332:37" pos:end="332:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="334:29" pos:end="334:44"><expr pos:start="334:29" pos:end="334:43"><name pos:start="334:29" pos:end="334:29">g</name> <operator pos:start="334:31" pos:end="334:31">=</operator> <call pos:start="334:33" pos:end="334:43"><name pos:start="334:33" pos:end="334:39">avio_r8</name><argument_list pos:start="334:40" pos:end="334:43">(<argument pos:start="334:41" pos:end="334:42"><expr pos:start="334:41" pos:end="334:42"><name pos:start="334:41" pos:end="334:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="336:29" pos:end="336:40"><expr pos:start="336:29" pos:end="336:39"><call pos:start="336:29" pos:end="336:39"><name pos:start="336:29" pos:end="336:35">avio_r8</name><argument_list pos:start="336:36" pos:end="336:39">(<argument pos:start="336:37" pos:end="336:38"><expr pos:start="336:37" pos:end="336:38"><name pos:start="336:37" pos:end="336:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="338:29" pos:end="338:44"><expr pos:start="338:29" pos:end="338:43"><name pos:start="338:29" pos:end="338:29">b</name> <operator pos:start="338:31" pos:end="338:31">=</operator> <call pos:start="338:33" pos:end="338:43"><name pos:start="338:33" pos:end="338:39">avio_r8</name><argument_list pos:start="338:40" pos:end="338:43">(<argument pos:start="338:41" pos:end="338:42"><expr pos:start="338:41" pos:end="338:42"><name pos:start="338:41" pos:end="338:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="340:29" pos:end="340:40"><expr pos:start="340:29" pos:end="340:39"><call pos:start="340:29" pos:end="340:39"><name pos:start="340:29" pos:end="340:35">avio_r8</name><argument_list pos:start="340:36" pos:end="340:39">(<argument pos:start="340:37" pos:end="340:38"><expr pos:start="340:37" pos:end="340:38"><name pos:start="340:37" pos:end="340:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="342:29" pos:end="344:59"><expr pos:start="342:29" pos:end="344:58"><name pos:start="342:29" pos:end="342:42"><name pos:start="342:29" pos:end="342:30">sc</name><operator pos:start="342:31" pos:end="342:32">-&gt;</operator><name pos:start="342:33" pos:end="342:39">palette</name><index pos:start="342:40" pos:end="342:42">[<expr pos:start="342:41" pos:end="342:41"><name pos:start="342:41" pos:end="342:41">j</name></expr>]</index></name> <operator pos:start="342:44" pos:end="342:44">=</operator>

                                <operator pos:start="344:33" pos:end="344:33">(</operator><name pos:start="344:34" pos:end="344:34">r</name> <operator pos:start="344:36" pos:end="344:37">&lt;&lt;</operator> <literal type="number" pos:start="344:39" pos:end="344:40">16</literal><operator pos:start="344:41" pos:end="344:41">)</operator> <operator pos:start="344:43" pos:end="344:43">|</operator> <operator pos:start="344:45" pos:end="344:45">(</operator><name pos:start="344:46" pos:end="344:46">g</name> <operator pos:start="344:48" pos:end="344:49">&lt;&lt;</operator> <literal type="number" pos:start="344:51" pos:end="344:51">8</literal><operator pos:start="344:52" pos:end="344:52">)</operator> <operator pos:start="344:54" pos:end="344:54">|</operator> <operator pos:start="344:56" pos:end="344:56">(</operator><name pos:start="344:57" pos:end="344:57">b</name><operator pos:start="344:58" pos:end="344:58">)</operator></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="352:17" pos:end="352:36"><expr pos:start="352:17" pos:end="352:35"><name pos:start="352:17" pos:end="352:31"><name pos:start="352:17" pos:end="352:18">sc</name><operator pos:start="352:19" pos:end="352:20">-&gt;</operator><name pos:start="352:21" pos:end="352:31">has_palette</name></name> <operator pos:start="352:33" pos:end="352:33">=</operator> <literal type="number" pos:start="352:35" pos:end="352:35">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="356:11" pos:end="516:9">else if <condition pos:start="356:19" pos:end="356:61">(<expr pos:start="356:20" pos:end="356:60"><name pos:start="356:20" pos:end="356:40"><name pos:start="356:20" pos:end="356:21">st</name><operator pos:start="356:22" pos:end="356:23">-&gt;</operator><name pos:start="356:24" pos:end="356:28">codec</name><operator pos:start="356:29" pos:end="356:30">-&gt;</operator><name pos:start="356:31" pos:end="356:40">codec_type</name></name><operator pos:start="356:41" pos:end="356:42">==</operator><name pos:start="356:43" pos:end="356:60">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="356:63" pos:end="516:9">{<block_content pos:start="358:13" pos:end="514:13">

            <decl_stmt pos:start="358:13" pos:end="358:39"><decl pos:start="358:13" pos:end="358:31"><type pos:start="358:13" pos:end="358:15"><name pos:start="358:13" pos:end="358:15">int</name></type> <name pos:start="358:17" pos:end="358:31">bits_per_sample</name></decl>, <decl pos:start="358:34" pos:end="358:38"><type ref="prev" pos:start="358:13" pos:end="358:15"/><name pos:start="358:34" pos:end="358:38">flags</name></decl>;</decl_stmt>

            <decl_stmt pos:start="360:13" pos:end="360:45"><decl pos:start="360:13" pos:end="360:44"><type pos:start="360:13" pos:end="360:20"><name pos:start="360:13" pos:end="360:20">uint16_t</name></type> <name pos:start="360:22" pos:end="360:28">version</name> <init pos:start="360:30" pos:end="360:44">= <expr pos:start="360:32" pos:end="360:44"><call pos:start="360:32" pos:end="360:44"><name pos:start="360:32" pos:end="360:40">avio_rb16</name><argument_list pos:start="360:41" pos:end="360:44">(<argument pos:start="360:42" pos:end="360:43"><expr pos:start="360:42" pos:end="360:43"><name pos:start="360:42" pos:end="360:43">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="364:13" pos:end="364:37"><expr pos:start="364:13" pos:end="364:36"><name pos:start="364:13" pos:end="364:31"><name pos:start="364:13" pos:end="364:14">st</name><operator pos:start="364:15" pos:end="364:16">-&gt;</operator><name pos:start="364:17" pos:end="364:21">codec</name><operator pos:start="364:22" pos:end="364:23">-&gt;</operator><name pos:start="364:24" pos:end="364:31">codec_id</name></name> <operator pos:start="364:33" pos:end="364:33">=</operator> <name pos:start="364:35" pos:end="364:36">id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="366:13" pos:end="366:26"><expr pos:start="366:13" pos:end="366:25"><call pos:start="366:13" pos:end="366:25"><name pos:start="366:13" pos:end="366:21">avio_rb16</name><argument_list pos:start="366:22" pos:end="366:25">(<argument pos:start="366:23" pos:end="366:24"><expr pos:start="366:23" pos:end="366:24"><name pos:start="366:23" pos:end="366:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="366:28" pos:end="366:47">/* revision level */</comment>

            <expr_stmt pos:start="368:13" pos:end="368:26"><expr pos:start="368:13" pos:end="368:25"><call pos:start="368:13" pos:end="368:25"><name pos:start="368:13" pos:end="368:21">avio_rb32</name><argument_list pos:start="368:22" pos:end="368:25">(<argument pos:start="368:23" pos:end="368:24"><expr pos:start="368:23" pos:end="368:24"><name pos:start="368:23" pos:end="368:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="368:28" pos:end="368:39">/* vendor */</comment>



            <expr_stmt pos:start="372:13" pos:end="372:48"><expr pos:start="372:13" pos:end="372:47"><name pos:start="372:13" pos:end="372:31"><name pos:start="372:13" pos:end="372:14">st</name><operator pos:start="372:15" pos:end="372:16">-&gt;</operator><name pos:start="372:17" pos:end="372:21">codec</name><operator pos:start="372:22" pos:end="372:23">-&gt;</operator><name pos:start="372:24" pos:end="372:31">channels</name></name> <operator pos:start="372:33" pos:end="372:33">=</operator> <call pos:start="372:35" pos:end="372:47"><name pos:start="372:35" pos:end="372:43">avio_rb16</name><argument_list pos:start="372:44" pos:end="372:47">(<argument pos:start="372:45" pos:end="372:46"><expr pos:start="372:45" pos:end="372:46"><name pos:start="372:45" pos:end="372:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block" pos:start="372:62" pos:end="372:80">/* channel count */</comment>

            <expr_stmt pos:start="374:13" pos:end="374:71"><expr pos:start="374:13" pos:end="374:70"><call pos:start="374:13" pos:end="374:70"><name pos:start="374:13" pos:end="374:19">av_dlog</name><argument_list pos:start="374:20" pos:end="374:70">(<argument pos:start="374:21" pos:end="374:25"><expr pos:start="374:21" pos:end="374:25"><name pos:start="374:21" pos:end="374:25"><name pos:start="374:21" pos:end="374:21">c</name><operator pos:start="374:22" pos:end="374:23">-&gt;</operator><name pos:start="374:24" pos:end="374:25">fc</name></name></expr></argument>, <argument pos:start="374:28" pos:end="374:48"><expr pos:start="374:28" pos:end="374:48"><literal type="string" pos:start="374:28" pos:end="374:48">"audio channels %d\n"</literal></expr></argument>, <argument pos:start="374:51" pos:end="374:69"><expr pos:start="374:51" pos:end="374:69"><name pos:start="374:51" pos:end="374:69"><name pos:start="374:51" pos:end="374:52">st</name><operator pos:start="374:53" pos:end="374:54">-&gt;</operator><name pos:start="374:55" pos:end="374:59">codec</name><operator pos:start="374:60" pos:end="374:61">-&gt;</operator><name pos:start="374:62" pos:end="374:69">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="376:13" pos:end="376:61"><expr pos:start="376:13" pos:end="376:60"><name pos:start="376:13" pos:end="376:44"><name pos:start="376:13" pos:end="376:14">st</name><operator pos:start="376:15" pos:end="376:16">-&gt;</operator><name pos:start="376:17" pos:end="376:21">codec</name><operator pos:start="376:22" pos:end="376:23">-&gt;</operator><name pos:start="376:24" pos:end="376:44">bits_per_coded_sample</name></name> <operator pos:start="376:46" pos:end="376:46">=</operator> <call pos:start="376:48" pos:end="376:60"><name pos:start="376:48" pos:end="376:56">avio_rb16</name><argument_list pos:start="376:57" pos:end="376:60">(<argument pos:start="376:58" pos:end="376:59"><expr pos:start="376:58" pos:end="376:59"><name pos:start="376:58" pos:end="376:59">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="376:68" pos:end="376:84">/* sample size */</comment>



            <expr_stmt pos:start="380:13" pos:end="380:42"><expr pos:start="380:13" pos:end="380:41"><name pos:start="380:13" pos:end="380:25"><name pos:start="380:13" pos:end="380:14">sc</name><operator pos:start="380:15" pos:end="380:16">-&gt;</operator><name pos:start="380:17" pos:end="380:25">audio_cid</name></name> <operator pos:start="380:27" pos:end="380:27">=</operator> <call pos:start="380:29" pos:end="380:41"><name pos:start="380:29" pos:end="380:37">avio_rb16</name><argument_list pos:start="380:38" pos:end="380:41">(<argument pos:start="380:39" pos:end="380:40"><expr pos:start="380:39" pos:end="380:40"><name pos:start="380:39" pos:end="380:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="382:13" pos:end="382:26"><expr pos:start="382:13" pos:end="382:25"><call pos:start="382:13" pos:end="382:25"><name pos:start="382:13" pos:end="382:21">avio_rb16</name><argument_list pos:start="382:22" pos:end="382:25">(<argument pos:start="382:23" pos:end="382:24"><expr pos:start="382:23" pos:end="382:24"><name pos:start="382:23" pos:end="382:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="382:28" pos:end="382:48">/* packet size = 0 */</comment>



            <expr_stmt pos:start="386:13" pos:end="386:61"><expr pos:start="386:13" pos:end="386:60"><name pos:start="386:13" pos:end="386:34"><name pos:start="386:13" pos:end="386:14">st</name><operator pos:start="386:15" pos:end="386:16">-&gt;</operator><name pos:start="386:17" pos:end="386:21">codec</name><operator pos:start="386:22" pos:end="386:23">-&gt;</operator><name pos:start="386:24" pos:end="386:34">sample_rate</name></name> <operator pos:start="386:36" pos:end="386:36">=</operator> <operator pos:start="386:38" pos:end="386:38">(</operator><operator pos:start="386:39" pos:end="386:39">(</operator><call pos:start="386:40" pos:end="386:52"><name pos:start="386:40" pos:end="386:48">avio_rb32</name><argument_list pos:start="386:49" pos:end="386:52">(<argument pos:start="386:50" pos:end="386:51"><expr pos:start="386:50" pos:end="386:51"><name pos:start="386:50" pos:end="386:51">pb</name></expr></argument>)</argument_list></call> <operator pos:start="386:54" pos:end="386:55">&gt;&gt;</operator> <literal type="number" pos:start="386:57" pos:end="386:58">16</literal><operator pos:start="386:59" pos:end="386:59">)</operator><operator pos:start="386:60" pos:end="386:60">)</operator></expr>;</expr_stmt>



            <comment type="line" pos:start="390:13" pos:end="390:72">//Read QT version 1 fields. In version 0 these do not exist.</comment>

            <expr_stmt pos:start="392:13" pos:end="392:70"><expr pos:start="392:13" pos:end="392:69"><call pos:start="392:13" pos:end="392:69"><name pos:start="392:13" pos:end="392:19">av_dlog</name><argument_list pos:start="392:20" pos:end="392:69">(<argument pos:start="392:21" pos:end="392:25"><expr pos:start="392:21" pos:end="392:25"><name pos:start="392:21" pos:end="392:25"><name pos:start="392:21" pos:end="392:21">c</name><operator pos:start="392:22" pos:end="392:23">-&gt;</operator><name pos:start="392:24" pos:end="392:25">fc</name></name></expr></argument>, <argument pos:start="392:28" pos:end="392:52"><expr pos:start="392:28" pos:end="392:52"><literal type="string" pos:start="392:28" pos:end="392:52">"version =%d, isom =%d\n"</literal></expr></argument>,<argument pos:start="392:54" pos:end="392:60"><expr pos:start="392:54" pos:end="392:60"><name pos:start="392:54" pos:end="392:60">version</name></expr></argument>,<argument pos:start="392:62" pos:end="392:68"><expr pos:start="392:62" pos:end="392:68"><name pos:start="392:62" pos:end="392:68"><name pos:start="392:62" pos:end="392:62">c</name><operator pos:start="392:63" pos:end="392:64">-&gt;</operator><name pos:start="392:65" pos:end="392:68">isom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="394:13" pos:end="430:13"><if pos:start="394:13" pos:end="430:13">if <condition pos:start="394:16" pos:end="394:25">(<expr pos:start="394:17" pos:end="394:24"><operator pos:start="394:17" pos:end="394:17">!</operator><name pos:start="394:18" pos:end="394:24"><name pos:start="394:18" pos:end="394:18">c</name><operator pos:start="394:19" pos:end="394:20">-&gt;</operator><name pos:start="394:21" pos:end="394:24">isom</name></name></expr>)</condition> <block pos:start="394:27" pos:end="430:13">{<block_content pos:start="396:17" pos:end="428:17">

                <if_stmt pos:start="396:17" pos:end="428:17"><if pos:start="396:17" pos:end="406:17">if <condition pos:start="396:20" pos:end="396:31">(<expr pos:start="396:21" pos:end="396:30"><name pos:start="396:21" pos:end="396:27">version</name><operator pos:start="396:28" pos:end="396:29">==</operator><literal type="number" pos:start="396:30" pos:end="396:30">1</literal></expr>)</condition> <block pos:start="396:33" pos:end="406:17">{<block_content pos:start="398:21" pos:end="404:34">

                    <expr_stmt pos:start="398:21" pos:end="398:58"><expr pos:start="398:21" pos:end="398:57"><name pos:start="398:21" pos:end="398:41"><name pos:start="398:21" pos:end="398:22">sc</name><operator pos:start="398:23" pos:end="398:24">-&gt;</operator><name pos:start="398:25" pos:end="398:41">samples_per_frame</name></name> <operator pos:start="398:43" pos:end="398:43">=</operator> <call pos:start="398:45" pos:end="398:57"><name pos:start="398:45" pos:end="398:53">avio_rb32</name><argument_list pos:start="398:54" pos:end="398:57">(<argument pos:start="398:55" pos:end="398:56"><expr pos:start="398:55" pos:end="398:56"><name pos:start="398:55" pos:end="398:56">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="400:21" pos:end="400:34"><expr pos:start="400:21" pos:end="400:33"><call pos:start="400:21" pos:end="400:33"><name pos:start="400:21" pos:end="400:29">avio_rb32</name><argument_list pos:start="400:30" pos:end="400:33">(<argument pos:start="400:31" pos:end="400:32"><expr pos:start="400:31" pos:end="400:32"><name pos:start="400:31" pos:end="400:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="400:36" pos:end="400:57">/* bytes per packet */</comment>

                    <expr_stmt pos:start="402:21" pos:end="402:56"><expr pos:start="402:21" pos:end="402:55"><name pos:start="402:21" pos:end="402:39"><name pos:start="402:21" pos:end="402:22">sc</name><operator pos:start="402:23" pos:end="402:24">-&gt;</operator><name pos:start="402:25" pos:end="402:39">bytes_per_frame</name></name> <operator pos:start="402:41" pos:end="402:41">=</operator> <call pos:start="402:43" pos:end="402:55"><name pos:start="402:43" pos:end="402:51">avio_rb32</name><argument_list pos:start="402:52" pos:end="402:55">(<argument pos:start="402:53" pos:end="402:54"><expr pos:start="402:53" pos:end="402:54"><name pos:start="402:53" pos:end="402:54">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="404:21" pos:end="404:34"><expr pos:start="404:21" pos:end="404:33"><call pos:start="404:21" pos:end="404:33"><name pos:start="404:21" pos:end="404:29">avio_rb32</name><argument_list pos:start="404:30" pos:end="404:33">(<argument pos:start="404:31" pos:end="404:32"><expr pos:start="404:31" pos:end="404:32"><name pos:start="404:31" pos:end="404:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="404:36" pos:end="404:57">/* bytes per sample */</comment>

                </block_content>}</block></if> <if type="elseif" pos:start="406:19" pos:end="428:17">else if <condition pos:start="406:27" pos:end="406:38">(<expr pos:start="406:28" pos:end="406:37"><name pos:start="406:28" pos:end="406:34">version</name><operator pos:start="406:35" pos:end="406:36">==</operator><literal type="number" pos:start="406:37" pos:end="406:37">2</literal></expr>)</condition> <block pos:start="406:40" pos:end="428:17">{<block_content pos:start="408:21" pos:end="426:112">

                    <expr_stmt pos:start="408:21" pos:end="408:34"><expr pos:start="408:21" pos:end="408:33"><call pos:start="408:21" pos:end="408:33"><name pos:start="408:21" pos:end="408:29">avio_rb32</name><argument_list pos:start="408:30" pos:end="408:33">(<argument pos:start="408:31" pos:end="408:32"><expr pos:start="408:31" pos:end="408:32"><name pos:start="408:31" pos:end="408:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="408:36" pos:end="408:59">/* sizeof struct only */</comment>

                    <expr_stmt pos:start="410:21" pos:end="410:74"><expr pos:start="410:21" pos:end="410:73"><name pos:start="410:21" pos:end="410:42"><name pos:start="410:21" pos:end="410:22">st</name><operator pos:start="410:23" pos:end="410:24">-&gt;</operator><name pos:start="410:25" pos:end="410:29">codec</name><operator pos:start="410:30" pos:end="410:31">-&gt;</operator><name pos:start="410:32" pos:end="410:42">sample_rate</name></name> <operator pos:start="410:44" pos:end="410:44">=</operator> <call pos:start="410:46" pos:end="410:73"><name pos:start="410:46" pos:end="410:58">av_int2double</name><argument_list pos:start="410:59" pos:end="410:73">(<argument pos:start="410:60" pos:end="410:72"><expr pos:start="410:60" pos:end="410:72"><call pos:start="410:60" pos:end="410:72"><name pos:start="410:60" pos:end="410:68">avio_rb64</name><argument_list pos:start="410:69" pos:end="410:72">(<argument pos:start="410:70" pos:end="410:71"><expr pos:start="410:70" pos:end="410:71"><name pos:start="410:70" pos:end="410:71">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="410:76" pos:end="410:89">/* float 64 */</comment>

                    <expr_stmt pos:start="412:21" pos:end="412:56"><expr pos:start="412:21" pos:end="412:55"><name pos:start="412:21" pos:end="412:39"><name pos:start="412:21" pos:end="412:22">st</name><operator pos:start="412:23" pos:end="412:24">-&gt;</operator><name pos:start="412:25" pos:end="412:29">codec</name><operator pos:start="412:30" pos:end="412:31">-&gt;</operator><name pos:start="412:32" pos:end="412:39">channels</name></name> <operator pos:start="412:41" pos:end="412:41">=</operator> <call pos:start="412:43" pos:end="412:55"><name pos:start="412:43" pos:end="412:51">avio_rb32</name><argument_list pos:start="412:52" pos:end="412:55">(<argument pos:start="412:53" pos:end="412:54"><expr pos:start="412:53" pos:end="412:54"><name pos:start="412:53" pos:end="412:54">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="414:21" pos:end="414:34"><expr pos:start="414:21" pos:end="414:33"><call pos:start="414:21" pos:end="414:33"><name pos:start="414:21" pos:end="414:29">avio_rb32</name><argument_list pos:start="414:30" pos:end="414:33">(<argument pos:start="414:31" pos:end="414:32"><expr pos:start="414:31" pos:end="414:32"><name pos:start="414:31" pos:end="414:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="414:36" pos:end="414:58">/* always 0x7F000000 */</comment>

                    <expr_stmt pos:start="416:21" pos:end="416:69"><expr pos:start="416:21" pos:end="416:68"><name pos:start="416:21" pos:end="416:52"><name pos:start="416:21" pos:end="416:22">st</name><operator pos:start="416:23" pos:end="416:24">-&gt;</operator><name pos:start="416:25" pos:end="416:29">codec</name><operator pos:start="416:30" pos:end="416:31">-&gt;</operator><name pos:start="416:32" pos:end="416:52">bits_per_coded_sample</name></name> <operator pos:start="416:54" pos:end="416:54">=</operator> <call pos:start="416:56" pos:end="416:68"><name pos:start="416:56" pos:end="416:64">avio_rb32</name><argument_list pos:start="416:65" pos:end="416:68">(<argument pos:start="416:66" pos:end="416:67"><expr pos:start="416:66" pos:end="416:67"><name pos:start="416:66" pos:end="416:67">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="416:71" pos:end="416:117">/* bits per channel if sound is uncompressed */</comment>

                    <expr_stmt pos:start="418:21" pos:end="418:42"><expr pos:start="418:21" pos:end="418:41"><name pos:start="418:21" pos:end="418:25">flags</name> <operator pos:start="418:27" pos:end="418:27">=</operator> <call pos:start="418:29" pos:end="418:41"><name pos:start="418:29" pos:end="418:37">avio_rb32</name><argument_list pos:start="418:38" pos:end="418:41">(<argument pos:start="418:39" pos:end="418:40"><expr pos:start="418:39" pos:end="418:40"><name pos:start="418:39" pos:end="418:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="418:44" pos:end="418:74">/* lpcm format specific flag */</comment>

                    <expr_stmt pos:start="420:21" pos:end="420:56"><expr pos:start="420:21" pos:end="420:55"><name pos:start="420:21" pos:end="420:39"><name pos:start="420:21" pos:end="420:22">sc</name><operator pos:start="420:23" pos:end="420:24">-&gt;</operator><name pos:start="420:25" pos:end="420:39">bytes_per_frame</name></name> <operator pos:start="420:41" pos:end="420:41">=</operator> <call pos:start="420:43" pos:end="420:55"><name pos:start="420:43" pos:end="420:51">avio_rb32</name><argument_list pos:start="420:52" pos:end="420:55">(<argument pos:start="420:53" pos:end="420:54"><expr pos:start="420:53" pos:end="420:54"><name pos:start="420:53" pos:end="420:54">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="420:58" pos:end="420:97">/* bytes per audio packet if constant */</comment>

                    <expr_stmt pos:start="422:21" pos:end="422:58"><expr pos:start="422:21" pos:end="422:57"><name pos:start="422:21" pos:end="422:41"><name pos:start="422:21" pos:end="422:22">sc</name><operator pos:start="422:23" pos:end="422:24">-&gt;</operator><name pos:start="422:25" pos:end="422:41">samples_per_frame</name></name> <operator pos:start="422:43" pos:end="422:43">=</operator> <call pos:start="422:45" pos:end="422:57"><name pos:start="422:45" pos:end="422:53">avio_rb32</name><argument_list pos:start="422:54" pos:end="422:57">(<argument pos:start="422:55" pos:end="422:56"><expr pos:start="422:55" pos:end="422:56"><name pos:start="422:55" pos:end="422:56">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="422:60" pos:end="422:105">/* lpcm frames per audio packet if constant */</comment>

                    <if_stmt pos:start="424:21" pos:end="426:112"><if pos:start="424:21" pos:end="426:112">if <condition pos:start="424:24" pos:end="424:57">(<expr pos:start="424:25" pos:end="424:56"><name pos:start="424:25" pos:end="424:30">format</name> <operator pos:start="424:32" pos:end="424:33">==</operator> <call pos:start="424:35" pos:end="424:56"><name pos:start="424:35" pos:end="424:39">MKTAG</name><argument_list pos:start="424:40" pos:end="424:56">(<argument pos:start="424:41" pos:end="424:43"><expr pos:start="424:41" pos:end="424:43"><literal type="char" pos:start="424:41" pos:end="424:43">'l'</literal></expr></argument>,<argument pos:start="424:45" pos:end="424:47"><expr pos:start="424:45" pos:end="424:47"><literal type="char" pos:start="424:45" pos:end="424:47">'p'</literal></expr></argument>,<argument pos:start="424:49" pos:end="424:51"><expr pos:start="424:49" pos:end="424:51"><literal type="char" pos:start="424:49" pos:end="424:51">'c'</literal></expr></argument>,<argument pos:start="424:53" pos:end="424:55"><expr pos:start="424:53" pos:end="424:55"><literal type="char" pos:start="424:53" pos:end="424:55">'m'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="426:25" pos:end="426:112"><block_content pos:start="426:25" pos:end="426:112">

                        <expr_stmt pos:start="426:25" pos:end="426:112"><expr pos:start="426:25" pos:end="426:111"><name pos:start="426:25" pos:end="426:43"><name pos:start="426:25" pos:end="426:26">st</name><operator pos:start="426:27" pos:end="426:28">-&gt;</operator><name pos:start="426:29" pos:end="426:33">codec</name><operator pos:start="426:34" pos:end="426:35">-&gt;</operator><name pos:start="426:36" pos:end="426:43">codec_id</name></name> <operator pos:start="426:45" pos:end="426:45">=</operator> <call pos:start="426:47" pos:end="426:111"><name pos:start="426:47" pos:end="426:70">ff_mov_get_lpcm_codec_id</name><argument_list pos:start="426:71" pos:end="426:111">(<argument pos:start="426:72" pos:end="426:103"><expr pos:start="426:72" pos:end="426:103"><name pos:start="426:72" pos:end="426:103"><name pos:start="426:72" pos:end="426:73">st</name><operator pos:start="426:74" pos:end="426:75">-&gt;</operator><name pos:start="426:76" pos:end="426:80">codec</name><operator pos:start="426:81" pos:end="426:82">-&gt;</operator><name pos:start="426:83" pos:end="426:103">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="426:106" pos:end="426:110"><expr pos:start="426:106" pos:end="426:110"><name pos:start="426:106" pos:end="426:110">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="434:13" pos:end="502:13">switch <condition pos:start="434:20" pos:end="434:40">(<expr pos:start="434:21" pos:end="434:39"><name pos:start="434:21" pos:end="434:39"><name pos:start="434:21" pos:end="434:22">st</name><operator pos:start="434:23" pos:end="434:24">-&gt;</operator><name pos:start="434:25" pos:end="434:29">codec</name><operator pos:start="434:30" pos:end="434:31">-&gt;</operator><name pos:start="434:32" pos:end="434:39">codec_id</name></name></expr>)</condition> <block pos:start="434:42" pos:end="502:13">{<block_content pos:start="436:13" pos:end="500:22">

            <case pos:start="436:13" pos:end="436:33">case <expr pos:start="436:18" pos:end="436:32"><name pos:start="436:18" pos:end="436:32">CODEC_ID_PCM_S8</name></expr>:</case>

            <case pos:start="438:13" pos:end="438:33">case <expr pos:start="438:18" pos:end="438:32"><name pos:start="438:18" pos:end="438:32">CODEC_ID_PCM_U8</name></expr>:</case>

                <if_stmt pos:start="440:17" pos:end="442:61"><if pos:start="440:17" pos:end="442:61">if <condition pos:start="440:20" pos:end="440:59">(<expr pos:start="440:21" pos:end="440:58"><name pos:start="440:21" pos:end="440:52"><name pos:start="440:21" pos:end="440:22">st</name><operator pos:start="440:23" pos:end="440:24">-&gt;</operator><name pos:start="440:25" pos:end="440:29">codec</name><operator pos:start="440:30" pos:end="440:31">-&gt;</operator><name pos:start="440:32" pos:end="440:52">bits_per_coded_sample</name></name> <operator pos:start="440:54" pos:end="440:55">==</operator> <literal type="number" pos:start="440:57" pos:end="440:58">16</literal></expr>)</condition><block type="pseudo" pos:start="442:21" pos:end="442:61"><block_content pos:start="442:21" pos:end="442:61">

                    <expr_stmt pos:start="442:21" pos:end="442:61"><expr pos:start="442:21" pos:end="442:60"><name pos:start="442:21" pos:end="442:39"><name pos:start="442:21" pos:end="442:22">st</name><operator pos:start="442:23" pos:end="442:24">-&gt;</operator><name pos:start="442:25" pos:end="442:29">codec</name><operator pos:start="442:30" pos:end="442:31">-&gt;</operator><name pos:start="442:32" pos:end="442:39">codec_id</name></name> <operator pos:start="442:41" pos:end="442:41">=</operator> <name pos:start="442:43" pos:end="442:60">CODEC_ID_PCM_S16BE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="444:17" pos:end="444:22">break;</break>

            <case pos:start="446:13" pos:end="446:36">case <expr pos:start="446:18" pos:end="446:35"><name pos:start="446:18" pos:end="446:35">CODEC_ID_PCM_S16LE</name></expr>:</case>

            <case pos:start="448:13" pos:end="448:36">case <expr pos:start="448:18" pos:end="448:35"><name pos:start="448:18" pos:end="448:35">CODEC_ID_PCM_S16BE</name></expr>:</case>

                <if_stmt pos:start="450:17" pos:end="460:64"><if pos:start="450:17" pos:end="452:58">if <condition pos:start="450:20" pos:end="450:58">(<expr pos:start="450:21" pos:end="450:57"><name pos:start="450:21" pos:end="450:52"><name pos:start="450:21" pos:end="450:22">st</name><operator pos:start="450:23" pos:end="450:24">-&gt;</operator><name pos:start="450:25" pos:end="450:29">codec</name><operator pos:start="450:30" pos:end="450:31">-&gt;</operator><name pos:start="450:32" pos:end="450:52">bits_per_coded_sample</name></name> <operator pos:start="450:54" pos:end="450:55">==</operator> <literal type="number" pos:start="450:57" pos:end="450:57">8</literal></expr>)</condition><block type="pseudo" pos:start="452:21" pos:end="452:58"><block_content pos:start="452:21" pos:end="452:58">

                    <expr_stmt pos:start="452:21" pos:end="452:58"><expr pos:start="452:21" pos:end="452:57"><name pos:start="452:21" pos:end="452:39"><name pos:start="452:21" pos:end="452:22">st</name><operator pos:start="452:23" pos:end="452:24">-&gt;</operator><name pos:start="452:25" pos:end="452:29">codec</name><operator pos:start="452:30" pos:end="452:31">-&gt;</operator><name pos:start="452:32" pos:end="452:39">codec_id</name></name> <operator pos:start="452:41" pos:end="452:41">=</operator> <name pos:start="452:43" pos:end="452:57">CODEC_ID_PCM_S8</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="454:17" pos:end="460:64">else if <condition pos:start="454:25" pos:end="454:64">(<expr pos:start="454:26" pos:end="454:63"><name pos:start="454:26" pos:end="454:57"><name pos:start="454:26" pos:end="454:27">st</name><operator pos:start="454:28" pos:end="454:29">-&gt;</operator><name pos:start="454:30" pos:end="454:34">codec</name><operator pos:start="454:35" pos:end="454:36">-&gt;</operator><name pos:start="454:37" pos:end="454:57">bits_per_coded_sample</name></name> <operator pos:start="454:59" pos:end="454:60">==</operator> <literal type="number" pos:start="454:62" pos:end="454:63">24</literal></expr>)</condition><block type="pseudo" pos:start="456:21" pos:end="460:64"><block_content pos:start="456:21" pos:end="460:64">

                    <expr_stmt pos:start="456:21" pos:end="460:64"><expr pos:start="456:21" pos:end="460:63"><name pos:start="456:21" pos:end="456:39"><name pos:start="456:21" pos:end="456:22">st</name><operator pos:start="456:23" pos:end="456:24">-&gt;</operator><name pos:start="456:25" pos:end="456:29">codec</name><operator pos:start="456:30" pos:end="456:31">-&gt;</operator><name pos:start="456:32" pos:end="456:39">codec_id</name></name> <operator pos:start="456:41" pos:end="456:41">=</operator>

                        <ternary pos:start="458:25" pos:end="460:63"><condition pos:start="458:25" pos:end="458:67"><expr pos:start="458:25" pos:end="458:65"><name pos:start="458:25" pos:end="458:43"><name pos:start="458:25" pos:end="458:26">st</name><operator pos:start="458:27" pos:end="458:28">-&gt;</operator><name pos:start="458:29" pos:end="458:33">codec</name><operator pos:start="458:34" pos:end="458:35">-&gt;</operator><name pos:start="458:36" pos:end="458:43">codec_id</name></name> <operator pos:start="458:45" pos:end="458:46">==</operator> <name pos:start="458:48" pos:end="458:65">CODEC_ID_PCM_S16BE</name></expr> ?</condition><then pos:start="460:25" pos:end="460:42">

                        <expr pos:start="460:25" pos:end="460:42"><name pos:start="460:25" pos:end="460:42">CODEC_ID_PCM_S24BE</name></expr> </then><else pos:start="460:44" pos:end="460:63">: <expr pos:start="460:46" pos:end="460:63"><name pos:start="460:46" pos:end="460:63">CODEC_ID_PCM_S24LE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="462:17" pos:end="462:22">break;</break>

            <comment type="block" pos:start="464:13" pos:end="464:74">/* set values for old format before stsd version 1 appeared */</comment>

            <case pos:start="466:13" pos:end="466:32">case <expr pos:start="466:18" pos:end="466:31"><name pos:start="466:18" pos:end="466:31">CODEC_ID_MACE3</name></expr>:</case>

                <expr_stmt pos:start="468:17" pos:end="468:42"><expr pos:start="468:17" pos:end="468:41"><name pos:start="468:17" pos:end="468:37"><name pos:start="468:17" pos:end="468:18">sc</name><operator pos:start="468:19" pos:end="468:20">-&gt;</operator><name pos:start="468:21" pos:end="468:37">samples_per_frame</name></name> <operator pos:start="468:39" pos:end="468:39">=</operator> <literal type="number" pos:start="468:41" pos:end="468:41">6</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="470:17" pos:end="470:60"><expr pos:start="470:17" pos:end="470:59"><name pos:start="470:17" pos:end="470:35"><name pos:start="470:17" pos:end="470:18">sc</name><operator pos:start="470:19" pos:end="470:20">-&gt;</operator><name pos:start="470:21" pos:end="470:35">bytes_per_frame</name></name> <operator pos:start="470:37" pos:end="470:37">=</operator> <literal type="number" pos:start="470:39" pos:end="470:39">2</literal><operator pos:start="470:40" pos:end="470:40">*</operator><name pos:start="470:41" pos:end="470:59"><name pos:start="470:41" pos:end="470:42">st</name><operator pos:start="470:43" pos:end="470:44">-&gt;</operator><name pos:start="470:45" pos:end="470:49">codec</name><operator pos:start="470:50" pos:end="470:51">-&gt;</operator><name pos:start="470:52" pos:end="470:59">channels</name></name></expr>;</expr_stmt>

                <break pos:start="472:17" pos:end="472:22">break;</break>

            <case pos:start="474:13" pos:end="474:32">case <expr pos:start="474:18" pos:end="474:31"><name pos:start="474:18" pos:end="474:31">CODEC_ID_MACE6</name></expr>:</case>

                <expr_stmt pos:start="476:17" pos:end="476:42"><expr pos:start="476:17" pos:end="476:41"><name pos:start="476:17" pos:end="476:37"><name pos:start="476:17" pos:end="476:18">sc</name><operator pos:start="476:19" pos:end="476:20">-&gt;</operator><name pos:start="476:21" pos:end="476:37">samples_per_frame</name></name> <operator pos:start="476:39" pos:end="476:39">=</operator> <literal type="number" pos:start="476:41" pos:end="476:41">6</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="478:17" pos:end="478:60"><expr pos:start="478:17" pos:end="478:59"><name pos:start="478:17" pos:end="478:35"><name pos:start="478:17" pos:end="478:18">sc</name><operator pos:start="478:19" pos:end="478:20">-&gt;</operator><name pos:start="478:21" pos:end="478:35">bytes_per_frame</name></name> <operator pos:start="478:37" pos:end="478:37">=</operator> <literal type="number" pos:start="478:39" pos:end="478:39">1</literal><operator pos:start="478:40" pos:end="478:40">*</operator><name pos:start="478:41" pos:end="478:59"><name pos:start="478:41" pos:end="478:42">st</name><operator pos:start="478:43" pos:end="478:44">-&gt;</operator><name pos:start="478:45" pos:end="478:49">codec</name><operator pos:start="478:50" pos:end="478:51">-&gt;</operator><name pos:start="478:52" pos:end="478:59">channels</name></name></expr>;</expr_stmt>

                <break pos:start="480:17" pos:end="480:22">break;</break>

            <case pos:start="482:13" pos:end="482:39">case <expr pos:start="482:18" pos:end="482:38"><name pos:start="482:18" pos:end="482:38">CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

                <expr_stmt pos:start="484:17" pos:end="484:43"><expr pos:start="484:17" pos:end="484:42"><name pos:start="484:17" pos:end="484:37"><name pos:start="484:17" pos:end="484:18">sc</name><operator pos:start="484:19" pos:end="484:20">-&gt;</operator><name pos:start="484:21" pos:end="484:37">samples_per_frame</name></name> <operator pos:start="484:39" pos:end="484:39">=</operator> <literal type="number" pos:start="484:41" pos:end="484:42">64</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="486:17" pos:end="486:61"><expr pos:start="486:17" pos:end="486:60"><name pos:start="486:17" pos:end="486:35"><name pos:start="486:17" pos:end="486:18">sc</name><operator pos:start="486:19" pos:end="486:20">-&gt;</operator><name pos:start="486:21" pos:end="486:35">bytes_per_frame</name></name> <operator pos:start="486:37" pos:end="486:37">=</operator> <literal type="number" pos:start="486:39" pos:end="486:40">34</literal><operator pos:start="486:41" pos:end="486:41">*</operator><name pos:start="486:42" pos:end="486:60"><name pos:start="486:42" pos:end="486:43">st</name><operator pos:start="486:44" pos:end="486:45">-&gt;</operator><name pos:start="486:46" pos:end="486:50">codec</name><operator pos:start="486:51" pos:end="486:52">-&gt;</operator><name pos:start="486:53" pos:end="486:60">channels</name></name></expr>;</expr_stmt>

                <break pos:start="488:17" pos:end="488:22">break;</break>

            <case pos:start="490:13" pos:end="490:30">case <expr pos:start="490:18" pos:end="490:29"><name pos:start="490:18" pos:end="490:29">CODEC_ID_GSM</name></expr>:</case>

                <expr_stmt pos:start="492:17" pos:end="492:44"><expr pos:start="492:17" pos:end="492:43"><name pos:start="492:17" pos:end="492:37"><name pos:start="492:17" pos:end="492:18">sc</name><operator pos:start="492:19" pos:end="492:20">-&gt;</operator><name pos:start="492:21" pos:end="492:37">samples_per_frame</name></name> <operator pos:start="492:39" pos:end="492:39">=</operator> <literal type="number" pos:start="492:41" pos:end="492:43">160</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="494:17" pos:end="494:41"><expr pos:start="494:17" pos:end="494:40"><name pos:start="494:17" pos:end="494:35"><name pos:start="494:17" pos:end="494:18">sc</name><operator pos:start="494:19" pos:end="494:20">-&gt;</operator><name pos:start="494:21" pos:end="494:35">bytes_per_frame</name></name> <operator pos:start="494:37" pos:end="494:37">=</operator> <literal type="number" pos:start="494:39" pos:end="494:40">33</literal></expr>;</expr_stmt>

                <break pos:start="496:17" pos:end="496:22">break;</break>

            <default pos:start="498:13" pos:end="498:20">default:</default>

                <break pos:start="500:17" pos:end="500:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="506:13" pos:end="506:74"><expr pos:start="506:13" pos:end="506:73"><name pos:start="506:13" pos:end="506:27">bits_per_sample</name> <operator pos:start="506:29" pos:end="506:29">=</operator> <call pos:start="506:31" pos:end="506:73"><name pos:start="506:31" pos:end="506:52">av_get_bits_per_sample</name><argument_list pos:start="506:53" pos:end="506:73">(<argument pos:start="506:54" pos:end="506:72"><expr pos:start="506:54" pos:end="506:72"><name pos:start="506:54" pos:end="506:72"><name pos:start="506:54" pos:end="506:55">st</name><operator pos:start="506:56" pos:end="506:57">-&gt;</operator><name pos:start="506:58" pos:end="506:62">codec</name><operator pos:start="506:63" pos:end="506:64">-&gt;</operator><name pos:start="506:65" pos:end="506:72">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="508:13" pos:end="514:13"><if pos:start="508:13" pos:end="514:13">if <condition pos:start="508:16" pos:end="508:32">(<expr pos:start="508:17" pos:end="508:31"><name pos:start="508:17" pos:end="508:31">bits_per_sample</name></expr>)</condition> <block pos:start="508:34" pos:end="514:13">{<block_content pos:start="510:17" pos:end="512:79">

                <expr_stmt pos:start="510:17" pos:end="510:67"><expr pos:start="510:17" pos:end="510:66"><name pos:start="510:17" pos:end="510:48"><name pos:start="510:17" pos:end="510:18">st</name><operator pos:start="510:19" pos:end="510:20">-&gt;</operator><name pos:start="510:21" pos:end="510:25">codec</name><operator pos:start="510:26" pos:end="510:27">-&gt;</operator><name pos:start="510:28" pos:end="510:48">bits_per_coded_sample</name></name> <operator pos:start="510:50" pos:end="510:50">=</operator> <name pos:start="510:52" pos:end="510:66">bits_per_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="512:17" pos:end="512:79"><expr pos:start="512:17" pos:end="512:78"><name pos:start="512:17" pos:end="512:31"><name pos:start="512:17" pos:end="512:18">sc</name><operator pos:start="512:19" pos:end="512:20">-&gt;</operator><name pos:start="512:21" pos:end="512:31">sample_size</name></name> <operator pos:start="512:33" pos:end="512:33">=</operator> <operator pos:start="512:35" pos:end="512:35">(</operator><name pos:start="512:36" pos:end="512:50">bits_per_sample</name> <operator pos:start="512:52" pos:end="512:53">&gt;&gt;</operator> <literal type="number" pos:start="512:55" pos:end="512:55">3</literal><operator pos:start="512:56" pos:end="512:56">)</operator> <operator pos:start="512:58" pos:end="512:58">*</operator> <name pos:start="512:60" pos:end="512:78"><name pos:start="512:60" pos:end="512:61">st</name><operator pos:start="512:62" pos:end="512:63">-&gt;</operator><name pos:start="512:64" pos:end="512:68">codec</name><operator pos:start="512:69" pos:end="512:70">-&gt;</operator><name pos:start="512:71" pos:end="512:78">channels</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="516:11" pos:end="534:9">else if <condition pos:start="516:19" pos:end="516:64">(<expr pos:start="516:20" pos:end="516:63"><name pos:start="516:20" pos:end="516:40"><name pos:start="516:20" pos:end="516:21">st</name><operator pos:start="516:22" pos:end="516:23">-&gt;</operator><name pos:start="516:24" pos:end="516:28">codec</name><operator pos:start="516:29" pos:end="516:30">-&gt;</operator><name pos:start="516:31" pos:end="516:40">codec_type</name></name><operator pos:start="516:41" pos:end="516:42">==</operator><name pos:start="516:43" pos:end="516:63">AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition><block pos:start="516:65" pos:end="534:9">{<block_content pos:start="522:13" pos:end="532:43">

            <comment type="line" pos:start="518:13" pos:end="518:74">// ttxt stsd contains display flags, justification, background</comment>

            <comment type="line" pos:start="520:13" pos:end="520:75">// color, fonts, and default styles, so fake an atom to read it</comment>

            <decl_stmt pos:start="522:13" pos:end="522:79"><decl pos:start="522:13" pos:end="522:78"><type pos:start="522:13" pos:end="522:19"><name pos:start="522:13" pos:end="522:19">MOVAtom</name></type> <name pos:start="522:21" pos:end="522:29">fake_atom</name> <init pos:start="522:31" pos:end="522:78">= <expr pos:start="522:33" pos:end="522:78"><block pos:start="522:33" pos:end="522:78">{ <expr pos:start="522:35" pos:end="522:76"><operator pos:start="522:35" pos:end="522:35">.</operator><name pos:start="522:36" pos:end="522:39">size</name> <operator pos:start="522:41" pos:end="522:41">=</operator> <name pos:start="522:43" pos:end="522:46">size</name> <operator pos:start="522:48" pos:end="522:48">-</operator> <operator pos:start="522:50" pos:end="522:50">(</operator><call pos:start="522:51" pos:end="522:63"><name pos:start="522:51" pos:end="522:59">avio_tell</name><argument_list pos:start="522:60" pos:end="522:63">(<argument pos:start="522:61" pos:end="522:62"><expr pos:start="522:61" pos:end="522:62"><name pos:start="522:61" pos:end="522:62">pb</name></expr></argument>)</argument_list></call> <operator pos:start="522:65" pos:end="522:65">-</operator> <name pos:start="522:67" pos:end="522:75">start_pos</name><operator pos:start="522:76" pos:end="522:76">)</operator></expr> }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="524:13" pos:end="526:48"><if pos:start="524:13" pos:end="526:48">if <condition pos:start="524:16" pos:end="524:42">(<expr pos:start="524:17" pos:end="524:41"><name pos:start="524:17" pos:end="524:22">format</name> <operator pos:start="524:24" pos:end="524:25">!=</operator> <call pos:start="524:27" pos:end="524:41"><name pos:start="524:27" pos:end="524:33">AV_RL32</name><argument_list pos:start="524:34" pos:end="524:41">(<argument pos:start="524:35" pos:end="524:40"><expr pos:start="524:35" pos:end="524:40"><literal type="string" pos:start="524:35" pos:end="524:40">"mp4s"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="526:17" pos:end="526:48"><block_content pos:start="526:17" pos:end="526:48"> <comment type="line" pos:start="524:44" pos:end="524:79">// mp4s contains a regular esds atom</comment>

                <expr_stmt pos:start="526:17" pos:end="526:48"><expr pos:start="526:17" pos:end="526:47"><call pos:start="526:17" pos:end="526:47"><name pos:start="526:17" pos:end="526:29">mov_read_glbl</name><argument_list pos:start="526:30" pos:end="526:47">(<argument pos:start="526:31" pos:end="526:31"><expr pos:start="526:31" pos:end="526:31"><name pos:start="526:31" pos:end="526:31">c</name></expr></argument>, <argument pos:start="526:34" pos:end="526:35"><expr pos:start="526:34" pos:end="526:35"><name pos:start="526:34" pos:end="526:35">pb</name></expr></argument>, <argument pos:start="526:38" pos:end="526:46"><expr pos:start="526:38" pos:end="526:46"><name pos:start="526:38" pos:end="526:46">fake_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="528:13" pos:end="528:36"><expr pos:start="528:13" pos:end="528:35"><name pos:start="528:13" pos:end="528:31"><name pos:start="528:13" pos:end="528:14">st</name><operator pos:start="528:15" pos:end="528:16">-&gt;</operator><name pos:start="528:17" pos:end="528:21">codec</name><operator pos:start="528:22" pos:end="528:23">-&gt;</operator><name pos:start="528:24" pos:end="528:31">codec_id</name></name><operator pos:start="528:32" pos:end="528:32">=</operator> <name pos:start="528:34" pos:end="528:35">id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="530:13" pos:end="530:41"><expr pos:start="530:13" pos:end="530:40"><name pos:start="530:13" pos:end="530:28"><name pos:start="530:13" pos:end="530:14">st</name><operator pos:start="530:15" pos:end="530:16">-&gt;</operator><name pos:start="530:17" pos:end="530:21">codec</name><operator pos:start="530:22" pos:end="530:23">-&gt;</operator><name pos:start="530:24" pos:end="530:28">width</name></name> <operator pos:start="530:30" pos:end="530:30">=</operator> <name pos:start="530:32" pos:end="530:40"><name pos:start="530:32" pos:end="530:33">sc</name><operator pos:start="530:34" pos:end="530:35">-&gt;</operator><name pos:start="530:36" pos:end="530:40">width</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="532:13" pos:end="532:43"><expr pos:start="532:13" pos:end="532:42"><name pos:start="532:13" pos:end="532:29"><name pos:start="532:13" pos:end="532:14">st</name><operator pos:start="532:15" pos:end="532:16">-&gt;</operator><name pos:start="532:17" pos:end="532:21">codec</name><operator pos:start="532:22" pos:end="532:23">-&gt;</operator><name pos:start="532:24" pos:end="532:29">height</name></name> <operator pos:start="532:31" pos:end="532:31">=</operator> <name pos:start="532:33" pos:end="532:42"><name pos:start="532:33" pos:end="532:34">sc</name><operator pos:start="532:35" pos:end="532:36">-&gt;</operator><name pos:start="532:37" pos:end="532:42">height</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="534:11" pos:end="562:9">else <block pos:start="534:16" pos:end="562:9">{<block_content pos:start="536:13" pos:end="560:62">

            <if_stmt pos:start="536:13" pos:end="556:13"><if pos:start="536:13" pos:end="556:13">if <condition pos:start="536:16" pos:end="536:63">(<expr pos:start="536:17" pos:end="536:62"><name pos:start="536:17" pos:end="536:36"><name pos:start="536:17" pos:end="536:18">st</name><operator pos:start="536:19" pos:end="536:20">-&gt;</operator><name pos:start="536:21" pos:end="536:25">codec</name><operator pos:start="536:26" pos:end="536:27">-&gt;</operator><name pos:start="536:28" pos:end="536:36">codec_tag</name></name> <operator pos:start="536:38" pos:end="536:39">==</operator> <call pos:start="536:41" pos:end="536:62"><name pos:start="536:41" pos:end="536:45">MKTAG</name><argument_list pos:start="536:46" pos:end="536:62">(<argument pos:start="536:47" pos:end="536:49"><expr pos:start="536:47" pos:end="536:49"><literal type="char" pos:start="536:47" pos:end="536:49">'t'</literal></expr></argument>,<argument pos:start="536:51" pos:end="536:53"><expr pos:start="536:51" pos:end="536:53"><literal type="char" pos:start="536:51" pos:end="536:53">'m'</literal></expr></argument>,<argument pos:start="536:55" pos:end="536:57"><expr pos:start="536:55" pos:end="536:57"><literal type="char" pos:start="536:55" pos:end="536:57">'c'</literal></expr></argument>,<argument pos:start="536:59" pos:end="536:61"><expr pos:start="536:59" pos:end="536:61"><literal type="char" pos:start="536:59" pos:end="536:61">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="536:65" pos:end="556:13">{<block_content pos:start="538:17" pos:end="554:45">

                <decl_stmt pos:start="538:17" pos:end="538:24"><decl pos:start="538:17" pos:end="538:23"><type pos:start="538:17" pos:end="538:19"><name pos:start="538:17" pos:end="538:19">int</name></type> <name pos:start="538:21" pos:end="538:23">val</name></decl>;</decl_stmt>

                <expr_stmt pos:start="540:17" pos:end="540:30"><expr pos:start="540:17" pos:end="540:29"><call pos:start="540:17" pos:end="540:29"><name pos:start="540:17" pos:end="540:25">avio_rb32</name><argument_list pos:start="540:26" pos:end="540:29">(<argument pos:start="540:27" pos:end="540:28"><expr pos:start="540:27" pos:end="540:28"><name pos:start="540:27" pos:end="540:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block" pos:start="540:38" pos:end="540:51">/* reserved */</comment>

                <expr_stmt pos:start="542:17" pos:end="542:36"><expr pos:start="542:17" pos:end="542:35"><name pos:start="542:17" pos:end="542:19">val</name> <operator pos:start="542:21" pos:end="542:21">=</operator> <call pos:start="542:23" pos:end="542:35"><name pos:start="542:23" pos:end="542:31">avio_rb32</name><argument_list pos:start="542:32" pos:end="542:35">(<argument pos:start="542:33" pos:end="542:34"><expr pos:start="542:33" pos:end="542:34"><name pos:start="542:33" pos:end="542:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="542:38" pos:end="542:48">/* flags */</comment>

                <if_stmt pos:start="544:17" pos:end="546:73"><if pos:start="544:17" pos:end="546:73">if <condition pos:start="544:20" pos:end="544:28">(<expr pos:start="544:21" pos:end="544:27"><name pos:start="544:21" pos:end="544:23">val</name> <operator pos:start="544:25" pos:end="544:25">&amp;</operator> <literal type="number" pos:start="544:27" pos:end="544:27">1</literal></expr>)</condition><block type="pseudo" pos:start="546:21" pos:end="546:73"><block_content pos:start="546:21" pos:end="546:73">

                    <expr_stmt pos:start="546:21" pos:end="546:73"><expr pos:start="546:21" pos:end="546:72"><name pos:start="546:21" pos:end="546:37"><name pos:start="546:21" pos:end="546:22">st</name><operator pos:start="546:23" pos:end="546:24">-&gt;</operator><name pos:start="546:25" pos:end="546:29">codec</name><operator pos:start="546:30" pos:end="546:31">-&gt;</operator><name pos:start="546:32" pos:end="546:37">flags2</name></name> <operator pos:start="546:39" pos:end="546:40">|=</operator> <name pos:start="546:42" pos:end="546:72">CODEC_FLAG2_DROP_FRAME_TIMECODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="548:17" pos:end="548:30"><expr pos:start="548:17" pos:end="548:29"><call pos:start="548:17" pos:end="548:29"><name pos:start="548:17" pos:end="548:25">avio_rb32</name><argument_list pos:start="548:26" pos:end="548:29">(<argument pos:start="548:27" pos:end="548:28"><expr pos:start="548:27" pos:end="548:28"><name pos:start="548:27" pos:end="548:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="550:17" pos:end="550:30"><expr pos:start="550:17" pos:end="550:29"><call pos:start="550:17" pos:end="550:29"><name pos:start="550:17" pos:end="550:25">avio_rb32</name><argument_list pos:start="550:26" pos:end="550:29">(<argument pos:start="550:27" pos:end="550:28"><expr pos:start="550:27" pos:end="550:28"><name pos:start="550:27" pos:end="550:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="552:17" pos:end="552:55"><expr pos:start="552:17" pos:end="552:54"><name pos:start="552:17" pos:end="552:40"><name pos:start="552:17" pos:end="552:18">st</name><operator pos:start="552:19" pos:end="552:20">-&gt;</operator><name pos:start="552:21" pos:end="552:25">codec</name><operator pos:start="552:26" pos:end="552:27">-&gt;</operator><name pos:start="552:28" pos:end="552:36">time_base</name><operator pos:start="552:37" pos:end="552:37">.</operator><name pos:start="552:38" pos:end="552:40">den</name></name> <operator pos:start="552:42" pos:end="552:42">=</operator> <call pos:start="552:44" pos:end="552:54"><name pos:start="552:44" pos:end="552:50">avio_r8</name><argument_list pos:start="552:51" pos:end="552:54">(<argument pos:start="552:52" pos:end="552:53"><expr pos:start="552:52" pos:end="552:53"><name pos:start="552:52" pos:end="552:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="554:17" pos:end="554:45"><expr pos:start="554:17" pos:end="554:44"><name pos:start="554:17" pos:end="554:40"><name pos:start="554:17" pos:end="554:18">st</name><operator pos:start="554:19" pos:end="554:20">-&gt;</operator><name pos:start="554:21" pos:end="554:25">codec</name><operator pos:start="554:26" pos:end="554:27">-&gt;</operator><name pos:start="554:28" pos:end="554:36">time_base</name><operator pos:start="554:37" pos:end="554:37">.</operator><name pos:start="554:38" pos:end="554:40">num</name></name> <operator pos:start="554:42" pos:end="554:42">=</operator> <literal type="number" pos:start="554:44" pos:end="554:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="558:13" pos:end="558:62">/* other codec type, just skip (rtp, mp4s, ...) */</comment>

            <expr_stmt pos:start="560:13" pos:end="560:62"><expr pos:start="560:13" pos:end="560:61"><call pos:start="560:13" pos:end="560:61"><name pos:start="560:13" pos:end="560:21">avio_skip</name><argument_list pos:start="560:22" pos:end="560:61">(<argument pos:start="560:23" pos:end="560:24"><expr pos:start="560:23" pos:end="560:24"><name pos:start="560:23" pos:end="560:24">pb</name></expr></argument>, <argument pos:start="560:27" pos:end="560:60"><expr pos:start="560:27" pos:end="560:60"><name pos:start="560:27" pos:end="560:30">size</name> <operator pos:start="560:32" pos:end="560:32">-</operator> <operator pos:start="560:34" pos:end="560:34">(</operator><call pos:start="560:35" pos:end="560:47"><name pos:start="560:35" pos:end="560:43">avio_tell</name><argument_list pos:start="560:44" pos:end="560:47">(<argument pos:start="560:45" pos:end="560:46"><expr pos:start="560:45" pos:end="560:46"><name pos:start="560:45" pos:end="560:46">pb</name></expr></argument>)</argument_list></call> <operator pos:start="560:49" pos:end="560:49">-</operator> <name pos:start="560:51" pos:end="560:59">start_pos</name><operator pos:start="560:60" pos:end="560:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="564:9" pos:end="564:85">/* this will read extra atoms at the end (wave, alac, damr, avcC, SMI ...) */</comment>

        <expr_stmt pos:start="566:9" pos:end="566:52"><expr pos:start="566:9" pos:end="566:51"><name pos:start="566:9" pos:end="566:14"><name pos:start="566:9" pos:end="566:9">a</name><operator pos:start="566:10" pos:end="566:10">.</operator><name pos:start="566:11" pos:end="566:14">size</name></name> <operator pos:start="566:16" pos:end="566:16">=</operator> <name pos:start="566:18" pos:end="566:21">size</name> <operator pos:start="566:23" pos:end="566:23">-</operator> <operator pos:start="566:25" pos:end="566:25">(</operator><call pos:start="566:26" pos:end="566:38"><name pos:start="566:26" pos:end="566:34">avio_tell</name><argument_list pos:start="566:35" pos:end="566:38">(<argument pos:start="566:36" pos:end="566:37"><expr pos:start="566:36" pos:end="566:37"><name pos:start="566:36" pos:end="566:37">pb</name></expr></argument>)</argument_list></call> <operator pos:start="566:40" pos:end="566:40">-</operator> <name pos:start="566:42" pos:end="566:50">start_pos</name><operator pos:start="566:51" pos:end="566:51">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="568:9" pos:end="575:34"><if pos:start="568:9" pos:end="573:9">if <condition pos:start="568:12" pos:end="568:23">(<expr pos:start="568:13" pos:end="568:22"><name pos:start="568:13" pos:end="568:18"><name pos:start="568:13" pos:end="568:13">a</name><operator pos:start="568:14" pos:end="568:14">.</operator><name pos:start="568:15" pos:end="568:18">size</name></name> <operator pos:start="568:20" pos:end="568:20">&gt;</operator> <literal type="number" pos:start="568:22" pos:end="568:22">8</literal></expr>)</condition> <block pos:start="568:25" pos:end="573:9">{<block_content pos:start="570:13" pos:end="570:47">

            <if_stmt pos:start="570:13" pos:end="570:47"><if pos:start="570:13" pos:end="570:47">if <condition pos:start="570:16" pos:end="570:47">(<expr pos:start="570:17" pos:end="570:46"><call pos:start="570:17" pos:end="570:42"><name pos:start="570:17" pos:end="570:32">mov_read_default</name><argument_list pos:start="570:33" pos:end="570:42">(<argument pos:start="570:34" pos:end="570:34"><expr pos:start="570:34" pos:end="570:34"><name pos:start="570:34" pos:end="570:34">c</name></expr></argument>, <argument pos:start="570:37" pos:end="570:38"><expr pos:start="570:37" pos:end="570:38"><name pos:start="570:37" pos:end="570:38">pb</name></expr></argument>, <argument pos:start="570:41" pos:end="570:41"><expr pos:start="570:41" pos:end="570:41"><name pos:start="570:41" pos:end="570:41">a</name></expr></argument>)</argument_list></call> <operator pos:start="570:44" pos:end="570:44">&lt;</operator> <literal type="number" pos:start="570:46" pos:end="570:46">0</literal></expr>)</condition><block type="pseudo"><block_content/></block></if></if_stmt>


        </block_content>}</block></if> <if type="elseif" pos:start="573:11" pos:end="575:34">else if <condition pos:start="573:19" pos:end="573:30">(<expr pos:start="573:20" pos:end="573:29"><name pos:start="573:20" pos:end="573:25"><name pos:start="573:20" pos:end="573:20">a</name><operator pos:start="573:21" pos:end="573:21">.</operator><name pos:start="573:22" pos:end="573:25">size</name></name> <operator pos:start="573:27" pos:end="573:27">&gt;</operator> <literal type="number" pos:start="573:29" pos:end="573:29">0</literal></expr>)</condition><block type="pseudo" pos:start="575:13" pos:end="575:34"><block_content pos:start="575:13" pos:end="575:34">

            <expr_stmt pos:start="575:13" pos:end="575:34"><expr pos:start="575:13" pos:end="575:33"><call pos:start="575:13" pos:end="575:33"><name pos:start="575:13" pos:end="575:21">avio_skip</name><argument_list pos:start="575:22" pos:end="575:33">(<argument pos:start="575:23" pos:end="575:24"><expr pos:start="575:23" pos:end="575:24"><name pos:start="575:23" pos:end="575:24">pb</name></expr></argument>, <argument pos:start="575:27" pos:end="575:32"><expr pos:start="575:27" pos:end="575:32"><name pos:start="575:27" pos:end="575:32"><name pos:start="575:27" pos:end="575:27">a</name><operator pos:start="575:28" pos:end="575:28">.</operator><name pos:start="575:29" pos:end="575:32">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="581:5" pos:end="583:47"><if pos:start="581:5" pos:end="583:47">if <condition pos:start="581:8" pos:end="581:99">(<expr pos:start="581:9" pos:end="581:98"><name pos:start="581:9" pos:end="581:29"><name pos:start="581:9" pos:end="581:10">st</name><operator pos:start="581:11" pos:end="581:12">-&gt;</operator><name pos:start="581:13" pos:end="581:17">codec</name><operator pos:start="581:18" pos:end="581:19">-&gt;</operator><name pos:start="581:20" pos:end="581:29">codec_type</name></name><operator pos:start="581:30" pos:end="581:31">==</operator><name pos:start="581:32" pos:end="581:49">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="581:51" pos:end="581:52">&amp;&amp;</operator> <name pos:start="581:54" pos:end="581:75"><name pos:start="581:54" pos:end="581:55">st</name><operator pos:start="581:56" pos:end="581:57">-&gt;</operator><name pos:start="581:58" pos:end="581:62">codec</name><operator pos:start="581:63" pos:end="581:64">-&gt;</operator><name pos:start="581:65" pos:end="581:75">sample_rate</name></name><operator pos:start="581:76" pos:end="581:77">==</operator><literal type="number" pos:start="581:78" pos:end="581:78">0</literal> <operator pos:start="581:80" pos:end="581:81">&amp;&amp;</operator> <name pos:start="581:83" pos:end="581:96"><name pos:start="581:83" pos:end="581:84">sc</name><operator pos:start="581:85" pos:end="581:86">-&gt;</operator><name pos:start="581:87" pos:end="581:96">time_scale</name></name><operator pos:start="581:97" pos:end="581:97">&gt;</operator><literal type="number" pos:start="581:98" pos:end="581:98">1</literal></expr>)</condition><block type="pseudo" pos:start="583:9" pos:end="583:47"><block_content pos:start="583:9" pos:end="583:47">

        <expr_stmt pos:start="583:9" pos:end="583:47"><expr pos:start="583:9" pos:end="583:46"><name pos:start="583:9" pos:end="583:30"><name pos:start="583:9" pos:end="583:10">st</name><operator pos:start="583:11" pos:end="583:12">-&gt;</operator><name pos:start="583:13" pos:end="583:17">codec</name><operator pos:start="583:18" pos:end="583:19">-&gt;</operator><name pos:start="583:20" pos:end="583:30">sample_rate</name></name><operator pos:start="583:31" pos:end="583:31">=</operator> <name pos:start="583:33" pos:end="583:46"><name pos:start="583:33" pos:end="583:34">sc</name><operator pos:start="583:35" pos:end="583:36">-&gt;</operator><name pos:start="583:37" pos:end="583:46">time_scale</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="587:5" pos:end="587:43">/* special codec parameters handling */</comment>

    <switch pos:start="589:5" pos:end="706:5">switch <condition pos:start="589:12" pos:end="589:32">(<expr pos:start="589:13" pos:end="589:31"><name pos:start="589:13" pos:end="589:31"><name pos:start="589:13" pos:end="589:14">st</name><operator pos:start="589:15" pos:end="589:16">-&gt;</operator><name pos:start="589:17" pos:end="589:21">codec</name><operator pos:start="589:22" pos:end="589:23">-&gt;</operator><name pos:start="589:24" pos:end="589:31">codec_id</name></name></expr>)</condition> <block pos:start="589:34" pos:end="706:5">{<block_content pos:start="593:5" pos:end="704:14">

<cpp:if pos:start="591:1" pos:end="591:21">#<cpp:directive pos:start="591:2" pos:end="591:3">if</cpp:directive> <expr pos:start="591:5" pos:end="591:21"><name pos:start="591:5" pos:end="591:21">CONFIG_DV_DEMUXER</name></expr></cpp:if>

    <case pos:start="593:5" pos:end="593:26">case <expr pos:start="593:10" pos:end="593:25"><name pos:start="593:10" pos:end="593:25">CODEC_ID_DVAUDIO</name></expr>:</case>

        <expr_stmt pos:start="595:9" pos:end="595:46"><expr pos:start="595:9" pos:end="595:45"><name pos:start="595:9" pos:end="595:18"><name pos:start="595:9" pos:end="595:9">c</name><operator pos:start="595:10" pos:end="595:11">-&gt;</operator><name pos:start="595:12" pos:end="595:18">dv_fctx</name></name> <operator pos:start="595:20" pos:end="595:20">=</operator> <call pos:start="595:22" pos:end="595:45"><name pos:start="595:22" pos:end="595:43">avformat_alloc_context</name><argument_list pos:start="595:44" pos:end="595:45">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="597:9" pos:end="597:55"><expr pos:start="597:9" pos:end="597:54"><name pos:start="597:9" pos:end="597:19"><name pos:start="597:9" pos:end="597:9">c</name><operator pos:start="597:10" pos:end="597:11">-&gt;</operator><name pos:start="597:12" pos:end="597:19">dv_demux</name></name> <operator pos:start="597:21" pos:end="597:21">=</operator> <call pos:start="597:23" pos:end="597:54"><name pos:start="597:23" pos:end="597:42">avpriv_dv_init_demux</name><argument_list pos:start="597:43" pos:end="597:54">(<argument pos:start="597:44" pos:end="597:53"><expr pos:start="597:44" pos:end="597:53"><name pos:start="597:44" pos:end="597:53"><name pos:start="597:44" pos:end="597:44">c</name><operator pos:start="597:45" pos:end="597:46">-&gt;</operator><name pos:start="597:47" pos:end="597:53">dv_fctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="599:9" pos:end="604:9"><if pos:start="599:9" pos:end="604:9">if <condition pos:start="599:12" pos:end="599:25">(<expr pos:start="599:13" pos:end="599:24"><operator pos:start="599:13" pos:end="599:13">!</operator><name pos:start="599:14" pos:end="599:24"><name pos:start="599:14" pos:end="599:14">c</name><operator pos:start="599:15" pos:end="599:16">-&gt;</operator><name pos:start="599:17" pos:end="599:24">dv_demux</name></name></expr>)</condition> <block pos:start="599:27" pos:end="604:9">{<block_content pos:start="601:13" pos:end="601:73">

            <expr_stmt pos:start="601:13" pos:end="601:73"><expr pos:start="601:13" pos:end="601:72"><call pos:start="601:13" pos:end="601:72"><name pos:start="601:13" pos:end="601:18">av_log</name><argument_list pos:start="601:19" pos:end="601:72">(<argument pos:start="601:20" pos:end="601:24"><expr pos:start="601:20" pos:end="601:24"><name pos:start="601:20" pos:end="601:24"><name pos:start="601:20" pos:end="601:20">c</name><operator pos:start="601:21" pos:end="601:22">-&gt;</operator><name pos:start="601:23" pos:end="601:24">fc</name></name></expr></argument>, <argument pos:start="601:27" pos:end="601:38"><expr pos:start="601:27" pos:end="601:38"><name pos:start="601:27" pos:end="601:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="601:41" pos:end="601:71"><expr pos:start="601:41" pos:end="601:71"><literal type="string" pos:start="601:41" pos:end="601:71">"dv demux context init error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="606:9" pos:end="606:35"><expr pos:start="606:9" pos:end="606:34"><name pos:start="606:9" pos:end="606:30"><name pos:start="606:9" pos:end="606:10">sc</name><operator pos:start="606:11" pos:end="606:12">-&gt;</operator><name pos:start="606:13" pos:end="606:30">dv_audio_container</name></name> <operator pos:start="606:32" pos:end="606:32">=</operator> <literal type="number" pos:start="606:34" pos:end="606:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="608:9" pos:end="608:49"><expr pos:start="608:9" pos:end="608:48"><name pos:start="608:9" pos:end="608:27"><name pos:start="608:9" pos:end="608:10">st</name><operator pos:start="608:11" pos:end="608:12">-&gt;</operator><name pos:start="608:13" pos:end="608:17">codec</name><operator pos:start="608:18" pos:end="608:19">-&gt;</operator><name pos:start="608:20" pos:end="608:27">codec_id</name></name> <operator pos:start="608:29" pos:end="608:29">=</operator> <name pos:start="608:31" pos:end="608:48">CODEC_ID_PCM_S16LE</name></expr>;</expr_stmt>

        <break pos:start="610:9" pos:end="613:0">break;</break>

<cpp:endif pos:start="612:1" pos:end="612:6">#<cpp:directive pos:start="612:2" pos:end="612:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="614:5" pos:end="614:52">/* no ifdef since parameters are always those */</comment>

    <case pos:start="616:5" pos:end="616:24">case <expr pos:start="616:10" pos:end="616:23"><name pos:start="616:10" pos:end="616:23">CODEC_ID_QCELP</name></expr>:</case>

        <comment type="line" pos:start="618:9" pos:end="618:61">// force sample rate for qcelp when not stored in mov</comment>

        <if_stmt pos:start="620:9" pos:end="622:42"><if pos:start="620:9" pos:end="622:42">if <condition pos:start="620:12" pos:end="620:59">(<expr pos:start="620:13" pos:end="620:58"><name pos:start="620:13" pos:end="620:32"><name pos:start="620:13" pos:end="620:14">st</name><operator pos:start="620:15" pos:end="620:16">-&gt;</operator><name pos:start="620:17" pos:end="620:21">codec</name><operator pos:start="620:22" pos:end="620:23">-&gt;</operator><name pos:start="620:24" pos:end="620:32">codec_tag</name></name> <operator pos:start="620:34" pos:end="620:35">!=</operator> <call pos:start="620:37" pos:end="620:58"><name pos:start="620:37" pos:end="620:41">MKTAG</name><argument_list pos:start="620:42" pos:end="620:58">(<argument pos:start="620:43" pos:end="620:45"><expr pos:start="620:43" pos:end="620:45"><literal type="char" pos:start="620:43" pos:end="620:45">'Q'</literal></expr></argument>,<argument pos:start="620:47" pos:end="620:49"><expr pos:start="620:47" pos:end="620:49"><literal type="char" pos:start="620:47" pos:end="620:49">'c'</literal></expr></argument>,<argument pos:start="620:51" pos:end="620:53"><expr pos:start="620:51" pos:end="620:53"><literal type="char" pos:start="620:51" pos:end="620:53">'l'</literal></expr></argument>,<argument pos:start="620:55" pos:end="620:57"><expr pos:start="620:55" pos:end="620:57"><literal type="char" pos:start="620:55" pos:end="620:57">'p'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="622:13" pos:end="622:42"><block_content pos:start="622:13" pos:end="622:42">

            <expr_stmt pos:start="622:13" pos:end="622:42"><expr pos:start="622:13" pos:end="622:41"><name pos:start="622:13" pos:end="622:34"><name pos:start="622:13" pos:end="622:14">st</name><operator pos:start="622:15" pos:end="622:16">-&gt;</operator><name pos:start="622:17" pos:end="622:21">codec</name><operator pos:start="622:22" pos:end="622:23">-&gt;</operator><name pos:start="622:24" pos:end="622:34">sample_rate</name></name> <operator pos:start="622:36" pos:end="622:36">=</operator> <literal type="number" pos:start="622:38" pos:end="622:41">8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="624:9" pos:end="624:35"><expr pos:start="624:9" pos:end="624:34"><name pos:start="624:9" pos:end="624:29"><name pos:start="624:9" pos:end="624:10">st</name><operator pos:start="624:11" pos:end="624:12">-&gt;</operator><name pos:start="624:13" pos:end="624:17">codec</name><operator pos:start="624:18" pos:end="624:19">-&gt;</operator><name pos:start="624:20" pos:end="624:29">frame_size</name></name><operator pos:start="624:30" pos:end="624:30">=</operator> <literal type="number" pos:start="624:32" pos:end="624:34">160</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="626:9" pos:end="626:31"><expr pos:start="626:9" pos:end="626:30"><name pos:start="626:9" pos:end="626:27"><name pos:start="626:9" pos:end="626:10">st</name><operator pos:start="626:11" pos:end="626:12">-&gt;</operator><name pos:start="626:13" pos:end="626:17">codec</name><operator pos:start="626:18" pos:end="626:19">-&gt;</operator><name pos:start="626:20" pos:end="626:27">channels</name></name><operator pos:start="626:28" pos:end="626:28">=</operator> <literal type="number" pos:start="626:30" pos:end="626:30">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="626:33" pos:end="626:51">/* really needed */</comment>

        <break pos:start="628:9" pos:end="628:14">break;</break>

    <case pos:start="630:5" pos:end="630:25">case <expr pos:start="630:10" pos:end="630:24"><name pos:start="630:10" pos:end="630:24">CODEC_ID_AMR_NB</name></expr>:</case>

        <expr_stmt pos:start="632:9" pos:end="632:31"><expr pos:start="632:9" pos:end="632:30"><name pos:start="632:9" pos:end="632:27"><name pos:start="632:9" pos:end="632:10">st</name><operator pos:start="632:11" pos:end="632:12">-&gt;</operator><name pos:start="632:13" pos:end="632:17">codec</name><operator pos:start="632:18" pos:end="632:19">-&gt;</operator><name pos:start="632:20" pos:end="632:27">channels</name></name><operator pos:start="632:28" pos:end="632:28">=</operator> <literal type="number" pos:start="632:30" pos:end="632:30">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="632:33" pos:end="632:51">/* really needed */</comment>

        <comment type="block" pos:start="634:9" pos:end="634:79">/* force sample rate for amr, stsd in 3gp does not store sample rate */</comment>

        <expr_stmt pos:start="636:9" pos:end="636:38"><expr pos:start="636:9" pos:end="636:37"><name pos:start="636:9" pos:end="636:30"><name pos:start="636:9" pos:end="636:10">st</name><operator pos:start="636:11" pos:end="636:12">-&gt;</operator><name pos:start="636:13" pos:end="636:17">codec</name><operator pos:start="636:18" pos:end="636:19">-&gt;</operator><name pos:start="636:20" pos:end="636:30">sample_rate</name></name> <operator pos:start="636:32" pos:end="636:32">=</operator> <literal type="number" pos:start="636:34" pos:end="636:37">8000</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="638:9" pos:end="638:80">/* force frame_size, too, samples_per_frame isn't always set properly */</comment>

        <expr_stmt pos:start="640:9" pos:end="640:37"><expr pos:start="640:9" pos:end="640:36"><name pos:start="640:9" pos:end="640:29"><name pos:start="640:9" pos:end="640:10">st</name><operator pos:start="640:11" pos:end="640:12">-&gt;</operator><name pos:start="640:13" pos:end="640:17">codec</name><operator pos:start="640:18" pos:end="640:19">-&gt;</operator><name pos:start="640:20" pos:end="640:29">frame_size</name></name>  <operator pos:start="640:32" pos:end="640:32">=</operator> <literal type="number" pos:start="640:34" pos:end="640:36">160</literal></expr>;</expr_stmt>

        <break pos:start="642:9" pos:end="642:14">break;</break>

    <case pos:start="644:5" pos:end="644:25">case <expr pos:start="644:10" pos:end="644:24"><name pos:start="644:10" pos:end="644:24">CODEC_ID_AMR_WB</name></expr>:</case>

        <expr_stmt pos:start="646:9" pos:end="646:35"><expr pos:start="646:9" pos:end="646:34"><name pos:start="646:9" pos:end="646:27"><name pos:start="646:9" pos:end="646:10">st</name><operator pos:start="646:11" pos:end="646:12">-&gt;</operator><name pos:start="646:13" pos:end="646:17">codec</name><operator pos:start="646:18" pos:end="646:19">-&gt;</operator><name pos:start="646:20" pos:end="646:27">channels</name></name>    <operator pos:start="646:32" pos:end="646:32">=</operator> <literal type="number" pos:start="646:34" pos:end="646:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="648:9" pos:end="648:39"><expr pos:start="648:9" pos:end="648:38"><name pos:start="648:9" pos:end="648:30"><name pos:start="648:9" pos:end="648:10">st</name><operator pos:start="648:11" pos:end="648:12">-&gt;</operator><name pos:start="648:13" pos:end="648:17">codec</name><operator pos:start="648:18" pos:end="648:19">-&gt;</operator><name pos:start="648:20" pos:end="648:30">sample_rate</name></name> <operator pos:start="648:32" pos:end="648:32">=</operator> <literal type="number" pos:start="648:34" pos:end="648:38">16000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="650:9" pos:end="650:37"><expr pos:start="650:9" pos:end="650:36"><name pos:start="650:9" pos:end="650:29"><name pos:start="650:9" pos:end="650:10">st</name><operator pos:start="650:11" pos:end="650:12">-&gt;</operator><name pos:start="650:13" pos:end="650:17">codec</name><operator pos:start="650:18" pos:end="650:19">-&gt;</operator><name pos:start="650:20" pos:end="650:29">frame_size</name></name>  <operator pos:start="650:32" pos:end="650:32">=</operator> <literal type="number" pos:start="650:34" pos:end="650:36">320</literal></expr>;</expr_stmt>

        <break pos:start="652:9" pos:end="652:14">break;</break>

    <case pos:start="654:5" pos:end="654:22">case <expr pos:start="654:10" pos:end="654:21"><name pos:start="654:10" pos:end="654:21">CODEC_ID_MP2</name></expr>:</case>

    <case pos:start="656:5" pos:end="656:22">case <expr pos:start="656:10" pos:end="656:21"><name pos:start="656:10" pos:end="656:21">CODEC_ID_MP3</name></expr>:</case>

        <expr_stmt pos:start="658:9" pos:end="658:51"><expr pos:start="658:9" pos:end="658:50"><name pos:start="658:9" pos:end="658:29"><name pos:start="658:9" pos:end="658:10">st</name><operator pos:start="658:11" pos:end="658:12">-&gt;</operator><name pos:start="658:13" pos:end="658:17">codec</name><operator pos:start="658:18" pos:end="658:19">-&gt;</operator><name pos:start="658:20" pos:end="658:29">codec_type</name></name> <operator pos:start="658:31" pos:end="658:31">=</operator> <name pos:start="658:33" pos:end="658:50">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt> <comment type="block" pos:start="658:53" pos:end="658:92">/* force type after stsd for m1a hdlr */</comment>

        <expr_stmt pos:start="660:9" pos:end="660:47"><expr pos:start="660:9" pos:end="660:46"><name pos:start="660:9" pos:end="660:24"><name pos:start="660:9" pos:end="660:10">st</name><operator pos:start="660:11" pos:end="660:12">-&gt;</operator><name pos:start="660:13" pos:end="660:24">need_parsing</name></name> <operator pos:start="660:26" pos:end="660:26">=</operator> <name pos:start="660:28" pos:end="660:46">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

        <break pos:start="662:9" pos:end="662:14">break;</break>

    <case pos:start="664:5" pos:end="664:22">case <expr pos:start="664:10" pos:end="664:21"><name pos:start="664:10" pos:end="664:21">CODEC_ID_GSM</name></expr>:</case>

    <case pos:start="666:5" pos:end="666:27">case <expr pos:start="666:10" pos:end="666:26"><name pos:start="666:10" pos:end="666:26">CODEC_ID_ADPCM_MS</name></expr>:</case>

    <case pos:start="668:5" pos:end="668:32">case <expr pos:start="668:10" pos:end="668:31"><name pos:start="668:10" pos:end="668:31">CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

        <expr_stmt pos:start="670:9" pos:end="670:54"><expr pos:start="670:9" pos:end="670:53"><name pos:start="670:9" pos:end="670:29"><name pos:start="670:9" pos:end="670:10">st</name><operator pos:start="670:11" pos:end="670:12">-&gt;</operator><name pos:start="670:13" pos:end="670:17">codec</name><operator pos:start="670:18" pos:end="670:19">-&gt;</operator><name pos:start="670:20" pos:end="670:29">frame_size</name></name> <operator pos:start="670:31" pos:end="670:31">=</operator> <name pos:start="670:33" pos:end="670:53"><name pos:start="670:33" pos:end="670:34">sc</name><operator pos:start="670:35" pos:end="670:36">-&gt;</operator><name pos:start="670:37" pos:end="670:53">samples_per_frame</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="672:9" pos:end="672:53"><expr pos:start="672:9" pos:end="672:52"><name pos:start="672:9" pos:end="672:30"><name pos:start="672:9" pos:end="672:10">st</name><operator pos:start="672:11" pos:end="672:12">-&gt;</operator><name pos:start="672:13" pos:end="672:17">codec</name><operator pos:start="672:18" pos:end="672:19">-&gt;</operator><name pos:start="672:20" pos:end="672:30">block_align</name></name> <operator pos:start="672:32" pos:end="672:32">=</operator> <name pos:start="672:34" pos:end="672:52"><name pos:start="672:34" pos:end="672:35">sc</name><operator pos:start="672:36" pos:end="672:37">-&gt;</operator><name pos:start="672:38" pos:end="672:52">bytes_per_frame</name></name></expr>;</expr_stmt>

        <break pos:start="674:9" pos:end="674:14">break;</break>

    <case pos:start="676:5" pos:end="676:23">case <expr pos:start="676:10" pos:end="676:22"><name pos:start="676:10" pos:end="676:22">CODEC_ID_ALAC</name></expr>:</case>

        <if_stmt pos:start="678:9" pos:end="686:9"><if pos:start="678:9" pos:end="686:9">if <condition pos:start="678:12" pos:end="678:44">(<expr pos:start="678:13" pos:end="678:43"><name pos:start="678:13" pos:end="678:37"><name pos:start="678:13" pos:end="678:14">st</name><operator pos:start="678:15" pos:end="678:16">-&gt;</operator><name pos:start="678:17" pos:end="678:21">codec</name><operator pos:start="678:22" pos:end="678:23">-&gt;</operator><name pos:start="678:24" pos:end="678:37">extradata_size</name></name> <operator pos:start="678:39" pos:end="678:40">==</operator> <literal type="number" pos:start="678:42" pos:end="678:43">36</literal></expr>)</condition> <block pos:start="678:46" pos:end="686:9">{<block_content pos:start="680:13" pos:end="684:70">

            <expr_stmt pos:start="680:13" pos:end="680:69"><expr pos:start="680:13" pos:end="680:68"><name pos:start="680:13" pos:end="680:33"><name pos:start="680:13" pos:end="680:14">st</name><operator pos:start="680:15" pos:end="680:16">-&gt;</operator><name pos:start="680:17" pos:end="680:21">codec</name><operator pos:start="680:22" pos:end="680:23">-&gt;</operator><name pos:start="680:24" pos:end="680:33">frame_size</name></name> <operator pos:start="680:35" pos:end="680:35">=</operator> <call pos:start="680:37" pos:end="680:68"><name pos:start="680:37" pos:end="680:43">AV_RB32</name><argument_list pos:start="680:44" pos:end="680:68">(<argument pos:start="680:45" pos:end="680:67"><expr pos:start="680:45" pos:end="680:67"><name pos:start="680:45" pos:end="680:64"><name pos:start="680:45" pos:end="680:46">st</name><operator pos:start="680:47" pos:end="680:48">-&gt;</operator><name pos:start="680:49" pos:end="680:53">codec</name><operator pos:start="680:54" pos:end="680:55">-&gt;</operator><name pos:start="680:56" pos:end="680:64">extradata</name></name><operator pos:start="680:65" pos:end="680:65">+</operator><literal type="number" pos:start="680:66" pos:end="680:67">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="682:13" pos:end="682:69"><expr pos:start="682:13" pos:end="682:68"><name pos:start="682:13" pos:end="682:31"><name pos:start="682:13" pos:end="682:14">st</name><operator pos:start="682:15" pos:end="682:16">-&gt;</operator><name pos:start="682:17" pos:end="682:21">codec</name><operator pos:start="682:22" pos:end="682:23">-&gt;</operator><name pos:start="682:24" pos:end="682:31">channels</name></name>   <operator pos:start="682:35" pos:end="682:35">=</operator> <call pos:start="682:37" pos:end="682:68"><name pos:start="682:37" pos:end="682:42">AV_RB8</name> <argument_list pos:start="682:44" pos:end="682:68">(<argument pos:start="682:45" pos:end="682:67"><expr pos:start="682:45" pos:end="682:67"><name pos:start="682:45" pos:end="682:64"><name pos:start="682:45" pos:end="682:46">st</name><operator pos:start="682:47" pos:end="682:48">-&gt;</operator><name pos:start="682:49" pos:end="682:53">codec</name><operator pos:start="682:54" pos:end="682:55">-&gt;</operator><name pos:start="682:56" pos:end="682:64">extradata</name></name><operator pos:start="682:65" pos:end="682:65">+</operator><literal type="number" pos:start="682:66" pos:end="682:67">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="684:13" pos:end="684:70"><expr pos:start="684:13" pos:end="684:69"><name pos:start="684:13" pos:end="684:34"><name pos:start="684:13" pos:end="684:14">st</name><operator pos:start="684:15" pos:end="684:16">-&gt;</operator><name pos:start="684:17" pos:end="684:21">codec</name><operator pos:start="684:22" pos:end="684:23">-&gt;</operator><name pos:start="684:24" pos:end="684:34">sample_rate</name></name> <operator pos:start="684:36" pos:end="684:36">=</operator> <call pos:start="684:38" pos:end="684:69"><name pos:start="684:38" pos:end="684:44">AV_RB32</name><argument_list pos:start="684:45" pos:end="684:69">(<argument pos:start="684:46" pos:end="684:68"><expr pos:start="684:46" pos:end="684:68"><name pos:start="684:46" pos:end="684:65"><name pos:start="684:46" pos:end="684:47">st</name><operator pos:start="684:48" pos:end="684:49">-&gt;</operator><name pos:start="684:50" pos:end="684:54">codec</name><operator pos:start="684:55" pos:end="684:56">-&gt;</operator><name pos:start="684:57" pos:end="684:65">extradata</name></name><operator pos:start="684:66" pos:end="684:66">+</operator><literal type="number" pos:start="684:67" pos:end="684:68">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="688:9" pos:end="688:14">break;</break>

    <case pos:start="690:5" pos:end="690:22">case <expr pos:start="690:10" pos:end="690:21"><name pos:start="690:10" pos:end="690:21">CODEC_ID_AC3</name></expr>:</case>

        <expr_stmt pos:start="692:9" pos:end="692:47"><expr pos:start="692:9" pos:end="692:46"><name pos:start="692:9" pos:end="692:24"><name pos:start="692:9" pos:end="692:10">st</name><operator pos:start="692:11" pos:end="692:12">-&gt;</operator><name pos:start="692:13" pos:end="692:24">need_parsing</name></name> <operator pos:start="692:26" pos:end="692:26">=</operator> <name pos:start="692:28" pos:end="692:46">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

        <break pos:start="694:9" pos:end="694:14">break;</break>

    <case pos:start="696:5" pos:end="696:29">case <expr pos:start="696:10" pos:end="696:28"><name pos:start="696:10" pos:end="696:28">CODEC_ID_MPEG1VIDEO</name></expr>:</case>

        <expr_stmt pos:start="698:9" pos:end="698:47"><expr pos:start="698:9" pos:end="698:46"><name pos:start="698:9" pos:end="698:24"><name pos:start="698:9" pos:end="698:10">st</name><operator pos:start="698:11" pos:end="698:12">-&gt;</operator><name pos:start="698:13" pos:end="698:24">need_parsing</name></name> <operator pos:start="698:26" pos:end="698:26">=</operator> <name pos:start="698:28" pos:end="698:46">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

        <break pos:start="700:9" pos:end="700:14">break;</break>

    <default pos:start="702:5" pos:end="702:12">default:</default>

        <break pos:start="704:9" pos:end="704:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="710:5" pos:end="710:13">return <expr pos:start="710:12" pos:end="710:12"><literal type="number" pos:start="710:12" pos:end="710:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
