<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13074.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">vnc_refresh_server_surface</name><parameter_list pos:start="1:38" pos:end="1:53">(<parameter pos:start="1:39" pos:end="1:52"><decl pos:start="1:39" pos:end="1:52"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:48">VncDisplay</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">vd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:21">

    <decl_stmt pos:start="5:5" pos:end="7:56"><decl pos:start="5:5" pos:end="7:55"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">width</name> <init pos:start="5:15" pos:end="7:55">= <expr pos:start="5:17" pos:end="7:55"><call pos:start="5:17" pos:end="7:55"><name pos:start="5:17" pos:end="5:19">MIN</name><argument_list pos:start="5:20" pos:end="7:55">(<argument pos:start="5:21" pos:end="5:56"><expr pos:start="5:21" pos:end="5:56"><call pos:start="5:21" pos:end="5:56"><name pos:start="5:21" pos:end="5:42">pixman_image_get_width</name><argument_list pos:start="5:43" pos:end="5:56">(<argument pos:start="5:44" pos:end="5:55"><expr pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:45">vd</name><operator pos:start="5:46" pos:end="5:47">-&gt;</operator><name pos:start="5:48" pos:end="5:52">guest</name><operator pos:start="5:53" pos:end="5:53">.</operator><name pos:start="5:54" pos:end="5:55">fb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="7:21" pos:end="7:54"><expr pos:start="7:21" pos:end="7:54"><call pos:start="7:21" pos:end="7:54"><name pos:start="7:21" pos:end="7:42">pixman_image_get_width</name><argument_list pos:start="7:43" pos:end="7:54">(<argument pos:start="7:44" pos:end="7:53"><expr pos:start="7:44" pos:end="7:53"><name pos:start="7:44" pos:end="7:53"><name pos:start="7:44" pos:end="7:45">vd</name><operator pos:start="7:46" pos:end="7:47">-&gt;</operator><name pos:start="7:48" pos:end="7:53">server</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:58"><decl pos:start="9:5" pos:end="11:57"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">height</name> <init pos:start="9:16" pos:end="11:57">= <expr pos:start="9:18" pos:end="11:57"><call pos:start="9:18" pos:end="11:57"><name pos:start="9:18" pos:end="9:20">MIN</name><argument_list pos:start="9:21" pos:end="11:57">(<argument pos:start="9:22" pos:end="9:58"><expr pos:start="9:22" pos:end="9:58"><call pos:start="9:22" pos:end="9:58"><name pos:start="9:22" pos:end="9:44">pixman_image_get_height</name><argument_list pos:start="9:45" pos:end="9:58">(<argument pos:start="9:46" pos:end="9:57"><expr pos:start="9:46" pos:end="9:57"><name pos:start="9:46" pos:end="9:57"><name pos:start="9:46" pos:end="9:47">vd</name><operator pos:start="9:48" pos:end="9:49">-&gt;</operator><name pos:start="9:50" pos:end="9:54">guest</name><operator pos:start="9:55" pos:end="9:55">.</operator><name pos:start="9:56" pos:end="9:57">fb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                     <argument pos:start="11:22" pos:end="11:56"><expr pos:start="11:22" pos:end="11:56"><call pos:start="11:22" pos:end="11:56"><name pos:start="11:22" pos:end="11:44">pixman_image_get_height</name><argument_list pos:start="11:45" pos:end="11:56">(<argument pos:start="11:46" pos:end="11:55"><expr pos:start="11:46" pos:end="11:55"><name pos:start="11:46" pos:end="11:55"><name pos:start="11:46" pos:end="11:47">vd</name><operator pos:start="11:48" pos:end="11:49">-&gt;</operator><name pos:start="11:50" pos:end="11:55">server</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:66"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">cmp_bytes</name></decl>, <decl pos:start="13:20" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:32">server_stride</name></decl>, <decl pos:start="13:35" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:35" pos:end="13:44">min_stride</name></decl>, <decl pos:start="13:47" pos:end="13:58"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:47" pos:end="13:58">guest_stride</name></decl>, <decl pos:start="13:61" pos:end="13:65"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:61" pos:end="13:61">y</name> <init pos:start="13:63" pos:end="13:65">= <expr pos:start="13:65" pos:end="13:65"><literal type="number" pos:start="13:65" pos:end="13:65">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:23">guest_row0</name> <init pos:start="15:25" pos:end="15:30">= <expr pos:start="15:27" pos:end="15:30"><name pos:start="15:27" pos:end="15:30">NULL</name></expr></init></decl>, <decl pos:start="15:33" pos:end="15:44"><type ref="prev" pos:start="15:5" pos:end="15:13"><modifier pos:start="15:33" pos:end="15:33">*</modifier></type><name pos:start="15:34" pos:end="15:44">server_row0</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">VncState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">vs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">has_dirty</name> <init pos:start="19:19" pos:end="19:21">= <expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:18">pixman_image_t</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:26">tmpbuf</name> <init pos:start="21:28" pos:end="21:33">= <expr pos:start="21:30" pos:end="21:33"><name pos:start="21:30" pos:end="21:33">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:10">struct</name> <name pos:start="25:12" pos:end="25:18">timeval</name></name></type> <name pos:start="25:20" pos:end="25:21">tv</name> <init pos:start="25:23" pos:end="25:32">= <expr pos:start="25:25" pos:end="25:32"><block pos:start="25:25" pos:end="25:32">{ <expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr>, <expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:26">(<expr pos:start="29:9" pos:end="29:25"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:11">vd</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:25">non_adaptive</name></name></expr>)</condition> <block pos:start="29:28" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:46">

        <expr_stmt pos:start="31:9" pos:end="31:32"><expr pos:start="31:9" pos:end="31:31"><call pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:20">gettimeofday</name><argument_list pos:start="31:21" pos:end="31:31">(<argument pos:start="31:22" pos:end="31:24"><expr pos:start="31:22" pos:end="31:24"><operator pos:start="31:22" pos:end="31:22">&amp;</operator><name pos:start="31:23" pos:end="31:24">tv</name></expr></argument>, <argument pos:start="31:27" pos:end="31:30"><expr pos:start="31:27" pos:end="31:30"><name pos:start="31:27" pos:end="31:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:17">has_dirty</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <call pos:start="33:21" pos:end="33:45"><name pos:start="33:21" pos:end="33:36">vnc_update_stats</name><argument_list pos:start="33:37" pos:end="33:45">(<argument pos:start="33:38" pos:end="33:39"><expr pos:start="33:38" pos:end="33:39"><name pos:start="33:38" pos:end="33:39">vd</name></expr></argument>, <argument pos:start="33:42" pos:end="33:44"><expr pos:start="33:42" pos:end="33:44"><operator pos:start="33:42" pos:end="33:42">&amp;</operator><name pos:start="33:43" pos:end="33:44">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="47:7">/*

     * Walk through the guest dirty map.

     * Check and copy modified bits from guest to server surface.

     * Update server dirty map.

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:63"><expr pos:start="49:5" pos:end="49:62"><name pos:start="49:5" pos:end="49:15">server_row0</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <operator pos:start="49:19" pos:end="49:19">(</operator><name pos:start="49:20" pos:end="49:26">uint8_t</name> <operator pos:start="49:28" pos:end="49:28">*</operator><operator pos:start="49:29" pos:end="49:29">)</operator><call pos:start="49:30" pos:end="49:62"><name pos:start="49:30" pos:end="49:50">pixman_image_get_data</name><argument_list pos:start="49:51" pos:end="49:62">(<argument pos:start="49:52" pos:end="49:61"><expr pos:start="49:52" pos:end="49:61"><name pos:start="49:52" pos:end="49:61"><name pos:start="49:52" pos:end="49:53">vd</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:61">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:71"><expr pos:start="51:5" pos:end="51:70"><name pos:start="51:5" pos:end="51:17">server_stride</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:32">guest_stride</name> <operator pos:start="51:34" pos:end="51:34">=</operator> <call pos:start="51:36" pos:end="51:70"><name pos:start="51:36" pos:end="51:58">pixman_image_get_stride</name><argument_list pos:start="51:59" pos:end="51:70">(<argument pos:start="51:60" pos:end="51:69"><expr pos:start="51:60" pos:end="51:69"><name pos:start="51:60" pos:end="51:69"><name pos:start="51:60" pos:end="51:61">vd</name><operator pos:start="51:62" pos:end="51:63">-&gt;</operator><name pos:start="51:64" pos:end="51:69">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="55:35"><expr pos:start="53:5" pos:end="55:34"><name pos:start="53:5" pos:end="53:13">cmp_bytes</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="55:34"><name pos:start="53:17" pos:end="53:19">MIN</name><argument_list pos:start="53:20" pos:end="55:34">(<argument pos:start="53:21" pos:end="53:66"><expr pos:start="53:21" pos:end="53:66"><name pos:start="53:21" pos:end="53:44">VNC_DIRTY_PIXELS_PER_BIT</name> <operator pos:start="53:46" pos:end="53:46">*</operator> <name pos:start="53:48" pos:end="53:66">VNC_SERVER_FB_BYTES</name></expr></argument>,

                    <argument pos:start="55:21" pos:end="55:33"><expr pos:start="55:21" pos:end="55:33"><name pos:start="55:21" pos:end="55:33">server_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:49">(<expr pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:10">vd</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:17">guest</name><operator pos:start="57:18" pos:end="57:18">.</operator><name pos:start="57:19" pos:end="57:24">format</name></name> <operator pos:start="57:26" pos:end="57:27">!=</operator> <name pos:start="57:29" pos:end="57:48">VNC_SERVER_FB_FORMAT</name></expr>)</condition> <block pos:start="57:51" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:73">

        <decl_stmt pos:start="59:9" pos:end="59:55"><decl pos:start="59:9" pos:end="59:54"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:17">width</name> <init pos:start="59:19" pos:end="59:54">= <expr pos:start="59:21" pos:end="59:54"><call pos:start="59:21" pos:end="59:54"><name pos:start="59:21" pos:end="59:42">pixman_image_get_width</name><argument_list pos:start="59:43" pos:end="59:54">(<argument pos:start="59:44" pos:end="59:53"><expr pos:start="59:44" pos:end="59:53"><name pos:start="59:44" pos:end="59:53"><name pos:start="59:44" pos:end="59:45">vd</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:53">server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:73"><expr pos:start="61:9" pos:end="61:72"><name pos:start="61:9" pos:end="61:14">tmpbuf</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:72"><name pos:start="61:18" pos:end="61:43">qemu_pixman_linebuf_create</name><argument_list pos:start="61:44" pos:end="61:72">(<argument pos:start="61:45" pos:end="61:64"><expr pos:start="61:45" pos:end="61:64"><name pos:start="61:45" pos:end="61:64">VNC_SERVER_FB_FORMAT</name></expr></argument>, <argument pos:start="61:67" pos:end="61:71"><expr pos:start="61:67" pos:end="61:71"><name pos:start="61:67" pos:end="61:71">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="69:5">else <block pos:start="63:12" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:61">

        <expr_stmt pos:start="65:9" pos:end="65:68"><expr pos:start="65:9" pos:end="65:67"><name pos:start="65:9" pos:end="65:18">guest_row0</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <operator pos:start="65:22" pos:end="65:22">(</operator><name pos:start="65:23" pos:end="65:29">uint8_t</name> <operator pos:start="65:31" pos:end="65:31">*</operator><operator pos:start="65:32" pos:end="65:32">)</operator><call pos:start="65:33" pos:end="65:67"><name pos:start="65:33" pos:end="65:53">pixman_image_get_data</name><argument_list pos:start="65:54" pos:end="65:67">(<argument pos:start="65:55" pos:end="65:66"><expr pos:start="65:55" pos:end="65:66"><name pos:start="65:55" pos:end="65:66"><name pos:start="65:55" pos:end="65:56">vd</name><operator pos:start="65:57" pos:end="65:58">-&gt;</operator><name pos:start="65:59" pos:end="65:63">guest</name><operator pos:start="65:64" pos:end="65:64">.</operator><name pos:start="65:65" pos:end="65:66">fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:61"><expr pos:start="67:9" pos:end="67:60"><name pos:start="67:9" pos:end="67:20">guest_stride</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <call pos:start="67:24" pos:end="67:60"><name pos:start="67:24" pos:end="67:46">pixman_image_get_stride</name><argument_list pos:start="67:47" pos:end="67:60">(<argument pos:start="67:48" pos:end="67:59"><expr pos:start="67:48" pos:end="67:59"><name pos:start="67:48" pos:end="67:59"><name pos:start="67:48" pos:end="67:49">vd</name><operator pos:start="67:50" pos:end="67:51">-&gt;</operator><name pos:start="67:52" pos:end="67:56">guest</name><operator pos:start="67:57" pos:end="67:57">.</operator><name pos:start="67:58" pos:end="67:59">fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:50"><expr pos:start="71:5" pos:end="71:49"><name pos:start="71:5" pos:end="71:14">min_stride</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <call pos:start="71:18" pos:end="71:49"><name pos:start="71:18" pos:end="71:20">MIN</name><argument_list pos:start="71:21" pos:end="71:49">(<argument pos:start="71:22" pos:end="71:34"><expr pos:start="71:22" pos:end="71:34"><name pos:start="71:22" pos:end="71:34">server_stride</name></expr></argument>, <argument pos:start="71:37" pos:end="71:48"><expr pos:start="71:37" pos:end="71:48"><name pos:start="71:37" pos:end="71:48">guest_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="75:5" pos:end="169:5">for <control pos:start="75:9" pos:end="75:12">(<init pos:start="75:10" pos:end="75:10">;</init><condition pos:start="75:11" pos:end="75:11">;</condition><incr/>)</control> <block pos:start="75:14" pos:end="169:5">{<block_content pos:start="77:9" pos:end="167:12">

        <decl_stmt pos:start="77:9" pos:end="77:14"><decl pos:start="77:9" pos:end="77:13"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:13">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:40"><decl pos:start="79:9" pos:end="79:26"><type pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:15">uint8_t</name> <modifier pos:start="79:17" pos:end="79:17">*</modifier></type><name pos:start="79:18" pos:end="79:26">guest_ptr</name></decl>, <decl pos:start="79:29" pos:end="79:39"><type ref="prev" pos:start="79:9" pos:end="79:17"><modifier pos:start="79:29" pos:end="79:29">*</modifier></type><name pos:start="79:30" pos:end="79:39">server_ptr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="85:76"><decl pos:start="81:9" pos:end="85:75"><type pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:16">unsigned</name> <name pos:start="81:18" pos:end="81:21">long</name></type> <name pos:start="81:23" pos:end="81:28">offset</name> <init pos:start="81:30" pos:end="85:75">= <expr pos:start="81:32" pos:end="85:75"><call pos:start="81:32" pos:end="85:75"><name pos:start="81:32" pos:end="81:44">find_next_bit</name><argument_list pos:start="81:45" pos:end="85:75">(<argument pos:start="81:46" pos:end="81:79"><expr pos:start="81:46" pos:end="81:79"><operator pos:start="81:46" pos:end="81:46">(</operator><name pos:start="81:47" pos:end="81:54">unsigned</name> <name pos:start="81:56" pos:end="81:59">long</name> <operator pos:start="81:61" pos:end="81:61">*</operator><operator pos:start="81:62" pos:end="81:62">)</operator> <operator pos:start="81:64" pos:end="81:64">&amp;</operator><name pos:start="81:65" pos:end="81:79"><name pos:start="81:65" pos:end="81:66">vd</name><operator pos:start="81:67" pos:end="81:68">-&gt;</operator><name pos:start="81:69" pos:end="81:73">guest</name><operator pos:start="81:74" pos:end="81:74">.</operator><name pos:start="81:75" pos:end="81:79">dirty</name></name></expr></argument>,

                                             <argument pos:start="83:46" pos:end="83:79"><expr pos:start="83:46" pos:end="83:79"><name pos:start="83:46" pos:end="83:51">height</name> <operator pos:start="83:53" pos:end="83:53">*</operator> <call pos:start="83:55" pos:end="83:79"><name pos:start="83:55" pos:end="83:67">VNC_DIRTY_BPL</name><argument_list pos:start="83:68" pos:end="83:79">(<argument pos:start="83:69" pos:end="83:78"><expr pos:start="83:69" pos:end="83:78"><operator pos:start="83:69" pos:end="83:69">&amp;</operator><name pos:start="83:70" pos:end="83:78"><name pos:start="83:70" pos:end="83:71">vd</name><operator pos:start="83:72" pos:end="83:73">-&gt;</operator><name pos:start="83:74" pos:end="83:78">guest</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                             <argument pos:start="85:46" pos:end="85:74"><expr pos:start="85:46" pos:end="85:74"><name pos:start="85:46" pos:end="85:46">y</name> <operator pos:start="85:48" pos:end="85:48">*</operator> <call pos:start="85:50" pos:end="85:74"><name pos:start="85:50" pos:end="85:62">VNC_DIRTY_BPL</name><argument_list pos:start="85:63" pos:end="85:74">(<argument pos:start="85:64" pos:end="85:73"><expr pos:start="85:64" pos:end="85:73"><operator pos:start="85:64" pos:end="85:64">&amp;</operator><name pos:start="85:65" pos:end="85:73"><name pos:start="85:65" pos:end="85:66">vd</name><operator pos:start="85:67" pos:end="85:68">-&gt;</operator><name pos:start="85:69" pos:end="85:73">guest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:57">(<expr pos:start="87:13" pos:end="87:56"><name pos:start="87:13" pos:end="87:18">offset</name> <operator pos:start="87:20" pos:end="87:21">==</operator> <name pos:start="87:23" pos:end="87:28">height</name> <operator pos:start="87:30" pos:end="87:30">*</operator> <call pos:start="87:32" pos:end="87:56"><name pos:start="87:32" pos:end="87:44">VNC_DIRTY_BPL</name><argument_list pos:start="87:45" pos:end="87:56">(<argument pos:start="87:46" pos:end="87:55"><expr pos:start="87:46" pos:end="87:55"><operator pos:start="87:46" pos:end="87:46">&amp;</operator><name pos:start="87:47" pos:end="87:55"><name pos:start="87:47" pos:end="87:48">vd</name><operator pos:start="87:49" pos:end="87:50">-&gt;</operator><name pos:start="87:51" pos:end="87:55">guest</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:59" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:18">

            <comment type="block" pos:start="89:13" pos:end="89:36">/* no more dirty bits */</comment>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:47"><expr pos:start="95:9" pos:end="95:46"><name pos:start="95:9" pos:end="95:9">y</name> <operator pos:start="95:11" pos:end="95:11">=</operator> <name pos:start="95:13" pos:end="95:18">offset</name> <operator pos:start="95:20" pos:end="95:20">/</operator> <call pos:start="95:22" pos:end="95:46"><name pos:start="95:22" pos:end="95:34">VNC_DIRTY_BPL</name><argument_list pos:start="95:35" pos:end="95:46">(<argument pos:start="95:36" pos:end="95:45"><expr pos:start="95:36" pos:end="95:45"><operator pos:start="95:36" pos:end="95:36">&amp;</operator><name pos:start="95:37" pos:end="95:45"><name pos:start="95:37" pos:end="95:38">vd</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:45">guest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:47"><expr pos:start="97:9" pos:end="97:46"><name pos:start="97:9" pos:end="97:9">x</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <name pos:start="97:13" pos:end="97:18">offset</name> <operator pos:start="97:20" pos:end="97:20">%</operator> <call pos:start="97:22" pos:end="97:46"><name pos:start="97:22" pos:end="97:34">VNC_DIRTY_BPL</name><argument_list pos:start="97:35" pos:end="97:46">(<argument pos:start="97:36" pos:end="97:45"><expr pos:start="97:36" pos:end="97:45"><operator pos:start="97:36" pos:end="97:36">&amp;</operator><name pos:start="97:37" pos:end="97:45"><name pos:start="97:37" pos:end="97:38">vd</name><operator pos:start="97:39" pos:end="97:40">-&gt;</operator><name pos:start="97:41" pos:end="97:45">guest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:69"><expr pos:start="101:9" pos:end="101:68"><name pos:start="101:9" pos:end="101:18">server_ptr</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <name pos:start="101:22" pos:end="101:32">server_row0</name> <operator pos:start="101:34" pos:end="101:34">+</operator> <name pos:start="101:36" pos:end="101:36">y</name> <operator pos:start="101:38" pos:end="101:38">*</operator> <name pos:start="101:40" pos:end="101:52">server_stride</name> <operator pos:start="101:54" pos:end="101:54">+</operator> <name pos:start="101:56" pos:end="101:56">x</name> <operator pos:start="101:58" pos:end="101:58">*</operator> <name pos:start="101:60" pos:end="101:68">cmp_bytes</name></expr>;</expr_stmt>



        <if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:53">(<expr pos:start="105:13" pos:end="105:52"><name pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:14">vd</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:21">guest</name><operator pos:start="105:22" pos:end="105:22">.</operator><name pos:start="105:23" pos:end="105:28">format</name></name> <operator pos:start="105:30" pos:end="105:31">!=</operator> <name pos:start="105:33" pos:end="105:52">VNC_SERVER_FB_FORMAT</name></expr>)</condition> <block pos:start="105:55" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:65">

            <expr_stmt pos:start="107:13" pos:end="107:72"><expr pos:start="107:13" pos:end="107:71"><call pos:start="107:13" pos:end="107:71"><name pos:start="107:13" pos:end="107:36">qemu_pixman_linebuf_fill</name><argument_list pos:start="107:37" pos:end="107:71">(<argument pos:start="107:38" pos:end="107:43"><expr pos:start="107:38" pos:end="107:43"><name pos:start="107:38" pos:end="107:43">tmpbuf</name></expr></argument>, <argument pos:start="107:46" pos:end="107:57"><expr pos:start="107:46" pos:end="107:57"><name pos:start="107:46" pos:end="107:57"><name pos:start="107:46" pos:end="107:47">vd</name><operator pos:start="107:48" pos:end="107:49">-&gt;</operator><name pos:start="107:50" pos:end="107:54">guest</name><operator pos:start="107:55" pos:end="107:55">.</operator><name pos:start="107:56" pos:end="107:57">fb</name></name></expr></argument>, <argument pos:start="107:60" pos:end="107:64"><expr pos:start="107:60" pos:end="107:64"><name pos:start="107:60" pos:end="107:64">width</name></expr></argument>, <argument pos:start="107:67" pos:end="107:67"><expr pos:start="107:67" pos:end="107:67"><literal type="number" pos:start="107:67" pos:end="107:67">0</literal></expr></argument>, <argument pos:start="107:70" pos:end="107:70"><expr pos:start="107:70" pos:end="107:70"><name pos:start="107:70" pos:end="107:70">y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:65"><expr pos:start="109:13" pos:end="109:64"><name pos:start="109:13" pos:end="109:21">guest_ptr</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <operator pos:start="109:25" pos:end="109:25">(</operator><name pos:start="109:26" pos:end="109:32">uint8_t</name> <operator pos:start="109:34" pos:end="109:34">*</operator><operator pos:start="109:35" pos:end="109:35">)</operator><call pos:start="109:36" pos:end="109:64"><name pos:start="109:36" pos:end="109:56">pixman_image_get_data</name><argument_list pos:start="109:57" pos:end="109:64">(<argument pos:start="109:58" pos:end="109:63"><expr pos:start="109:58" pos:end="109:63"><name pos:start="109:58" pos:end="109:63">tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="111:11" pos:end="115:9">else <block pos:start="111:16" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:54">

            <expr_stmt pos:start="113:13" pos:end="113:54"><expr pos:start="113:13" pos:end="113:53"><name pos:start="113:13" pos:end="113:21">guest_ptr</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:34">guest_row0</name> <operator pos:start="113:36" pos:end="113:36">+</operator> <name pos:start="113:38" pos:end="113:38">y</name> <operator pos:start="113:40" pos:end="113:40">*</operator> <name pos:start="113:42" pos:end="113:53">guest_stride</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:35"><expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:17">guest_ptr</name> <operator pos:start="117:19" pos:end="117:20">+=</operator> <name pos:start="117:22" pos:end="117:22">x</name> <operator pos:start="117:24" pos:end="117:24">*</operator> <name pos:start="117:26" pos:end="117:34">cmp_bytes</name></expr>;</expr_stmt>



        <for pos:start="121:9" pos:end="163:9">for <control pos:start="121:13" pos:end="123:66">(<init pos:start="121:14" pos:end="121:14">;</init> <condition pos:start="121:16" pos:end="121:65"><expr pos:start="121:16" pos:end="121:64"><name pos:start="121:16" pos:end="121:16">x</name> <operator pos:start="121:18" pos:end="121:18">&lt;</operator> <call pos:start="121:20" pos:end="121:64"><name pos:start="121:20" pos:end="121:31">DIV_ROUND_UP</name><argument_list pos:start="121:32" pos:end="121:64">(<argument pos:start="121:33" pos:end="121:37"><expr pos:start="121:33" pos:end="121:37"><name pos:start="121:33" pos:end="121:37">width</name></expr></argument>, <argument pos:start="121:40" pos:end="121:63"><expr pos:start="121:40" pos:end="121:63"><name pos:start="121:40" pos:end="121:63">VNC_DIRTY_PIXELS_PER_BIT</name></expr></argument>)</argument_list></call></expr>;</condition>

             <incr pos:start="123:14" pos:end="123:65"><expr pos:start="123:14" pos:end="123:16"><name pos:start="123:14" pos:end="123:14">x</name><operator pos:start="123:15" pos:end="123:16">++</operator></expr><operator pos:start="123:17" pos:end="123:17">,</operator> <expr pos:start="123:19" pos:end="123:40"><name pos:start="123:19" pos:end="123:27">guest_ptr</name> <operator pos:start="123:29" pos:end="123:30">+=</operator> <name pos:start="123:32" pos:end="123:40">cmp_bytes</name></expr><operator pos:start="123:41" pos:end="123:41">,</operator> <expr pos:start="123:43" pos:end="123:65"><name pos:start="123:43" pos:end="123:52">server_ptr</name> <operator pos:start="123:54" pos:end="123:55">+=</operator> <name pos:start="123:57" pos:end="123:65">cmp_bytes</name></expr></incr>)</control> <block pos:start="123:68" pos:end="163:9">{<block_content pos:start="125:13" pos:end="161:24">

            <decl_stmt pos:start="125:13" pos:end="125:39"><decl pos:start="125:13" pos:end="125:38"><type pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:15">int</name></type> <name pos:start="125:17" pos:end="125:26">_cmp_bytes</name> <init pos:start="125:28" pos:end="125:38">= <expr pos:start="125:30" pos:end="125:38"><name pos:start="125:30" pos:end="125:38">cmp_bytes</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="127:13" pos:end="131:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:59">(<expr pos:start="127:17" pos:end="127:58"><operator pos:start="127:17" pos:end="127:17">!</operator><call pos:start="127:18" pos:end="127:58"><name pos:start="127:18" pos:end="127:35">test_and_clear_bit</name><argument_list pos:start="127:36" pos:end="127:58">(<argument pos:start="127:37" pos:end="127:37"><expr pos:start="127:37" pos:end="127:37"><name pos:start="127:37" pos:end="127:37">x</name></expr></argument>, <argument pos:start="127:40" pos:end="127:57"><expr pos:start="127:40" pos:end="127:57"><name pos:start="127:40" pos:end="127:57"><name pos:start="127:40" pos:end="127:41">vd</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:48">guest</name><operator pos:start="127:49" pos:end="127:49">.</operator><name pos:start="127:50" pos:end="127:54">dirty</name><index pos:start="127:55" pos:end="127:57">[<expr pos:start="127:56" pos:end="127:56"><name pos:start="127:56" pos:end="127:56">y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:61" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:25">

                <continue pos:start="129:17" pos:end="129:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="133:13" pos:end="137:13"><if pos:start="133:13" pos:end="137:13">if <condition pos:start="133:16" pos:end="133:49">(<expr pos:start="133:17" pos:end="133:48"><operator pos:start="133:17" pos:end="133:17">(</operator><name pos:start="133:18" pos:end="133:18">x</name> <operator pos:start="133:20" pos:end="133:20">+</operator> <literal type="number" pos:start="133:22" pos:end="133:22">1</literal><operator pos:start="133:23" pos:end="133:23">)</operator> <operator pos:start="133:25" pos:end="133:25">*</operator> <name pos:start="133:27" pos:end="133:35">cmp_bytes</name> <operator pos:start="133:37" pos:end="133:37">&gt;</operator> <name pos:start="133:39" pos:end="133:48">min_stride</name></expr>)</condition> <block pos:start="133:51" pos:end="137:13">{<block_content pos:start="135:17" pos:end="135:56">

                <expr_stmt pos:start="135:17" pos:end="135:56"><expr pos:start="135:17" pos:end="135:55"><name pos:start="135:17" pos:end="135:26">_cmp_bytes</name> <operator pos:start="135:28" pos:end="135:28">=</operator> <name pos:start="135:30" pos:end="135:39">min_stride</name> <operator pos:start="135:41" pos:end="135:41">-</operator> <name pos:start="135:43" pos:end="135:43">x</name> <operator pos:start="135:45" pos:end="135:45">*</operator> <name pos:start="135:47" pos:end="135:55">cmp_bytes</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:63">(<expr pos:start="139:17" pos:end="139:62"><call pos:start="139:17" pos:end="139:57"><name pos:start="139:17" pos:end="139:22">memcmp</name><argument_list pos:start="139:23" pos:end="139:57">(<argument pos:start="139:24" pos:end="139:33"><expr pos:start="139:24" pos:end="139:33"><name pos:start="139:24" pos:end="139:33">server_ptr</name></expr></argument>, <argument pos:start="139:36" pos:end="139:44"><expr pos:start="139:36" pos:end="139:44"><name pos:start="139:36" pos:end="139:44">guest_ptr</name></expr></argument>, <argument pos:start="139:47" pos:end="139:56"><expr pos:start="139:47" pos:end="139:56"><name pos:start="139:47" pos:end="139:56">_cmp_bytes</name></expr></argument>)</argument_list></call> <operator pos:start="139:59" pos:end="139:60">==</operator> <literal type="number" pos:start="139:62" pos:end="139:62">0</literal></expr>)</condition> <block pos:start="139:65" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:25">

                <continue pos:start="141:17" pos:end="141:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:54"><expr pos:start="145:13" pos:end="145:53"><call pos:start="145:13" pos:end="145:53"><name pos:start="145:13" pos:end="145:18">memcpy</name><argument_list pos:start="145:19" pos:end="145:53">(<argument pos:start="145:20" pos:end="145:29"><expr pos:start="145:20" pos:end="145:29"><name pos:start="145:20" pos:end="145:29">server_ptr</name></expr></argument>, <argument pos:start="145:32" pos:end="145:40"><expr pos:start="145:32" pos:end="145:40"><name pos:start="145:32" pos:end="145:40">guest_ptr</name></expr></argument>, <argument pos:start="145:43" pos:end="145:52"><expr pos:start="145:43" pos:end="145:52"><name pos:start="145:43" pos:end="145:52">_cmp_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="153:13"><if pos:start="147:13" pos:end="153:13">if <condition pos:start="147:16" pos:end="147:34">(<expr pos:start="147:17" pos:end="147:33"><operator pos:start="147:17" pos:end="147:17">!</operator><name pos:start="147:18" pos:end="147:33"><name pos:start="147:18" pos:end="147:19">vd</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:33">non_adaptive</name></name></expr>)</condition> <block pos:start="147:36" pos:end="153:13">{<block_content pos:start="149:17" pos:end="151:41">

                <expr_stmt pos:start="149:17" pos:end="151:41"><expr pos:start="149:17" pos:end="151:40"><call pos:start="149:17" pos:end="151:40"><name pos:start="149:17" pos:end="149:32">vnc_rect_updated</name><argument_list pos:start="149:33" pos:end="151:40">(<argument pos:start="149:34" pos:end="149:35"><expr pos:start="149:34" pos:end="149:35"><name pos:start="149:34" pos:end="149:35">vd</name></expr></argument>, <argument pos:start="149:38" pos:end="149:65"><expr pos:start="149:38" pos:end="149:65"><name pos:start="149:38" pos:end="149:38">x</name> <operator pos:start="149:40" pos:end="149:40">*</operator> <name pos:start="149:42" pos:end="149:65">VNC_DIRTY_PIXELS_PER_BIT</name></expr></argument>,

                                 <argument pos:start="151:34" pos:end="151:34"><expr pos:start="151:34" pos:end="151:34"><name pos:start="151:34" pos:end="151:34">y</name></expr></argument>, <argument pos:start="151:37" pos:end="151:39"><expr pos:start="151:37" pos:end="151:39"><operator pos:start="151:37" pos:end="151:37">&amp;</operator><name pos:start="151:38" pos:end="151:39">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <macro pos:start="155:13" pos:end="155:50"><name pos:start="155:13" pos:end="155:26">QTAILQ_FOREACH</name><argument_list pos:start="155:27" pos:end="155:50">(<argument pos:start="155:28" pos:end="155:29">vs</argument>, <argument pos:start="155:32" pos:end="155:43">&amp;vd-&gt;clients</argument>, <argument pos:start="155:46" pos:end="155:49">next</argument>)</argument_list></macro> <block pos:start="155:52" pos:end="159:13">{<block_content pos:start="157:17" pos:end="157:41">

                <expr_stmt pos:start="157:17" pos:end="157:41"><expr pos:start="157:17" pos:end="157:40"><call pos:start="157:17" pos:end="157:40"><name pos:start="157:17" pos:end="157:23">set_bit</name><argument_list pos:start="157:24" pos:end="157:40">(<argument pos:start="157:25" pos:end="157:25"><expr pos:start="157:25" pos:end="157:25"><name pos:start="157:25" pos:end="157:25">x</name></expr></argument>, <argument pos:start="157:28" pos:end="157:39"><expr pos:start="157:28" pos:end="157:39"><name pos:start="157:28" pos:end="157:39"><name pos:start="157:28" pos:end="157:29">vs</name><operator pos:start="157:30" pos:end="157:31">-&gt;</operator><name pos:start="157:32" pos:end="157:36">dirty</name><index pos:start="157:37" pos:end="157:39">[<expr pos:start="157:38" pos:end="157:38"><name pos:start="157:38" pos:end="157:38">y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <expr_stmt pos:start="161:13" pos:end="161:24"><expr pos:start="161:13" pos:end="161:23"><name pos:start="161:13" pos:end="161:21">has_dirty</name><operator pos:start="161:22" pos:end="161:23">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="167:9" pos:end="167:12"><expr pos:start="167:9" pos:end="167:11"><name pos:start="167:9" pos:end="167:9">y</name><operator pos:start="167:10" pos:end="167:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="171:5" pos:end="171:36"><expr pos:start="171:5" pos:end="171:35"><call pos:start="171:5" pos:end="171:35"><name pos:start="171:5" pos:end="171:27">qemu_pixman_image_unref</name><argument_list pos:start="171:28" pos:end="171:35">(<argument pos:start="171:29" pos:end="171:34"><expr pos:start="171:29" pos:end="171:34"><name pos:start="171:29" pos:end="171:34">tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="173:5" pos:end="173:21">return <expr pos:start="173:12" pos:end="173:20"><name pos:start="173:12" pos:end="173:20">has_dirty</name></expr>;</return>

</block_content>}</block></function>
</unit>
