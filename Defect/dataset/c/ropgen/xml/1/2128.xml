<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2128.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:34">qemu_get_guest_memory_mapping</name><parameter_list pos:start="1:35" pos:end="1:73">(<parameter pos:start="1:36" pos:end="1:58"><decl pos:start="1:36" pos:end="1:58"><type pos:start="1:36" pos:end="1:58"><name pos:start="1:36" pos:end="1:52">MemoryMappingList</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">list</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:5">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name></decl>, <decl pos:start="5:20" pos:end="5:44"><type ref="prev" pos:start="5:5" pos:end="5:14"><modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:44">first_paging_enabled_cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">RAMBlock</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:19">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:21">offset</name></decl>, <decl pos:start="9:24" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:14"/><name pos:start="9:24" pos:end="9:29">length</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:66"><expr pos:start="13:5" pos:end="13:65"><name pos:start="13:5" pos:end="13:28">first_paging_enabled_cpu</name> <operator pos:start="13:30" pos:end="13:30">=</operator> <call pos:start="13:32" pos:end="13:65"><name pos:start="13:32" pos:end="13:54">find_paging_enabled_cpu</name><argument_list pos:start="13:55" pos:end="13:65">(<argument pos:start="13:56" pos:end="13:64"><expr pos:start="13:56" pos:end="13:64"><name pos:start="13:56" pos:end="13:64">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="35:5"><if pos:start="15:5" pos:end="35:5">if <condition pos:start="15:8" pos:end="15:33">(<expr pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:32">first_paging_enabled_cpu</name></expr>)</condition> <block pos:start="15:35" pos:end="35:5">{<block_content pos:start="17:9" pos:end="33:15">

        <for pos:start="17:9" pos:end="31:9">for <control pos:start="17:13" pos:end="17:78">(<init pos:start="17:14" pos:end="17:44"><expr pos:start="17:14" pos:end="17:43"><name pos:start="17:14" pos:end="17:16">cpu</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <name pos:start="17:20" pos:end="17:43">first_paging_enabled_cpu</name></expr>;</init> <condition pos:start="17:46" pos:end="17:57"><expr pos:start="17:46" pos:end="17:56"><name pos:start="17:46" pos:end="17:48">cpu</name> <operator pos:start="17:50" pos:end="17:51">!=</operator> <name pos:start="17:53" pos:end="17:56">NULL</name></expr>;</condition> <incr pos:start="17:59" pos:end="17:77"><expr pos:start="17:59" pos:end="17:77"><name pos:start="17:59" pos:end="17:61">cpu</name> <operator pos:start="17:63" pos:end="17:63">=</operator> <name pos:start="17:65" pos:end="17:77"><name pos:start="17:65" pos:end="17:67">cpu</name><operator pos:start="17:68" pos:end="17:69">-&gt;</operator><name pos:start="17:70" pos:end="17:77">next_cpu</name></name></expr></incr>)</control> <block pos:start="17:80" pos:end="31:9">{<block_content pos:start="19:13" pos:end="29:13">

            <decl_stmt pos:start="19:13" pos:end="19:30"><decl pos:start="19:13" pos:end="19:29"><type pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:17">Error</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:22">err</name> <init pos:start="19:24" pos:end="19:29">= <expr pos:start="19:26" pos:end="19:29"><name pos:start="19:26" pos:end="19:29">NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:52"><expr pos:start="21:13" pos:end="21:51"><call pos:start="21:13" pos:end="21:51"><name pos:start="21:13" pos:end="21:34">cpu_get_memory_mapping</name><argument_list pos:start="21:35" pos:end="21:51">(<argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><name pos:start="21:36" pos:end="21:38">cpu</name></expr></argument>, <argument pos:start="21:41" pos:end="21:44"><expr pos:start="21:41" pos:end="21:44"><name pos:start="21:41" pos:end="21:44">list</name></expr></argument>, <argument pos:start="21:47" pos:end="21:50"><expr pos:start="21:47" pos:end="21:50"><operator pos:start="21:47" pos:end="21:47">&amp;</operator><name pos:start="21:48" pos:end="21:50">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="29:13"><if pos:start="23:13" pos:end="29:13">if <condition pos:start="23:16" pos:end="23:20">(<expr pos:start="23:17" pos:end="23:19"><name pos:start="23:17" pos:end="23:19">err</name></expr>)</condition> <block pos:start="23:22" pos:end="29:13">{<block_content pos:start="25:17" pos:end="27:23">

                <expr_stmt pos:start="25:17" pos:end="25:43"><expr pos:start="25:17" pos:end="25:42"><call pos:start="25:17" pos:end="25:42"><name pos:start="25:17" pos:end="25:31">error_propagate</name><argument_list pos:start="25:32" pos:end="25:42">(<argument pos:start="25:33" pos:end="25:36"><expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">errp</name></expr></argument>, <argument pos:start="25:39" pos:end="25:41"><expr pos:start="25:39" pos:end="25:41"><name pos:start="25:39" pos:end="25:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="27:17" pos:end="27:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="45:7">/*

     * If the guest doesn't use paging, the virtual address is equal to physical

     * address.

     */</comment>

    <macro pos:start="47:5" pos:end="47:49"><name pos:start="47:5" pos:end="47:18">QTAILQ_FOREACH</name><argument_list pos:start="47:19" pos:end="47:49">(<argument pos:start="47:20" pos:end="47:24">block</argument>, <argument pos:start="47:27" pos:end="47:42">&amp;ram_list.blocks</argument>, <argument pos:start="47:45" pos:end="47:48">next</argument>)</argument_list></macro> <block pos:start="47:51" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:64">

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:14">offset</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <name pos:start="49:18" pos:end="49:30"><name pos:start="49:18" pos:end="49:22">block</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:30">offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:31"><expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:14">length</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:30"><name pos:start="51:18" pos:end="51:22">block</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:30">length</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:64"><expr pos:start="53:9" pos:end="53:63"><call pos:start="53:9" pos:end="53:63"><name pos:start="53:9" pos:end="53:33">create_new_memory_mapping</name><argument_list pos:start="53:34" pos:end="53:63">(<argument pos:start="53:35" pos:end="53:38"><expr pos:start="53:35" pos:end="53:38"><name pos:start="53:35" pos:end="53:38">list</name></expr></argument>, <argument pos:start="53:41" pos:end="53:46"><expr pos:start="53:41" pos:end="53:46"><name pos:start="53:41" pos:end="53:46">offset</name></expr></argument>, <argument pos:start="53:49" pos:end="53:54"><expr pos:start="53:49" pos:end="53:54"><name pos:start="53:49" pos:end="53:54">offset</name></expr></argument>, <argument pos:start="53:57" pos:end="53:62"><expr pos:start="53:57" pos:end="53:62"><name pos:start="53:57" pos:end="53:62">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
