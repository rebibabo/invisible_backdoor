<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21178.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">set_string_binary</name><parameter_list pos:start="1:29" pos:end="1:90">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">obj</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:54">AVOption</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">o</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><specifier pos:start="1:60" pos:end="1:64">const</specifier> <name pos:start="1:66" pos:end="1:69">char</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">val</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:89"><decl pos:start="1:77" pos:end="1:89"><type pos:start="1:77" pos:end="1:89"><name pos:start="1:77" pos:end="1:83">uint8_t</name> <modifier pos:start="1:85" pos:end="1:85">*</modifier><modifier pos:start="1:86" pos:end="1:86">*</modifier></type><name pos:start="1:87" pos:end="1:89">dst</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:9"><name pos:start="5:5" pos:end="5:7">int</name> <modifier pos:start="5:9" pos:end="5:9">*</modifier></type><name pos:start="5:10" pos:end="5:15">lendst</name> <init pos:start="5:17" pos:end="5:34">= <expr pos:start="5:19" pos:end="5:34"><operator pos:start="5:19" pos:end="5:19">(</operator><name pos:start="5:20" pos:end="5:22">int</name> <operator pos:start="5:24" pos:end="5:24">*</operator><operator pos:start="5:25" pos:end="5:25">)</operator><operator pos:start="5:26" pos:end="5:26">(</operator><name pos:start="5:27" pos:end="5:29">dst</name> <operator pos:start="5:31" pos:end="5:31">+</operator> <literal type="number" pos:start="5:33" pos:end="5:33">1</literal><operator pos:start="5:34" pos:end="5:34">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">bin</name></decl>, <decl pos:start="7:19" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:13"><modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name> <init pos:start="9:13" pos:end="9:25">= <expr pos:start="9:15" pos:end="9:25"><call pos:start="9:15" pos:end="9:25"><name pos:start="9:15" pos:end="9:20">strlen</name><argument_list pos:start="9:21" pos:end="9:25">(<argument pos:start="9:22" pos:end="9:24"><expr pos:start="9:22" pos:end="9:24"><name pos:start="9:22" pos:end="9:24">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:18"><expr pos:start="13:5" pos:end="13:17"><call pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">av_freep</name><argument_list pos:start="13:13" pos:end="13:17">(<argument pos:start="13:14" pos:end="13:16"><expr pos:start="13:14" pos:end="13:16"><name pos:start="13:14" pos:end="13:16">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><operator pos:start="15:5" pos:end="15:5">*</operator><name pos:start="15:6" pos:end="15:11">lendst</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="21:31"><if pos:start="19:5" pos:end="21:31">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">len</name> <operator pos:start="19:13" pos:end="19:13">&amp;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">1</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:31"><block_content pos:start="21:9" pos:end="21:31">

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:13"><expr pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:7">len</name> <operator pos:start="23:9" pos:end="23:10">/=</operator> <literal type="number" pos:start="23:12" pos:end="23:12">2</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:7">ptr</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <name pos:start="27:11" pos:end="27:13">bin</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:25">av_malloc</name><argument_list pos:start="27:26" pos:end="27:30">(<argument pos:start="27:27" pos:end="27:29"><expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="29:5" pos:end="45:5">while <condition pos:start="29:11" pos:end="29:16">(<expr pos:start="29:12" pos:end="29:15"><operator pos:start="29:12" pos:end="29:12">*</operator><name pos:start="29:13" pos:end="29:15">val</name></expr>)</condition> <block pos:start="29:18" pos:end="45:5">{<block_content pos:start="31:9" pos:end="43:30">

        <decl_stmt pos:start="31:9" pos:end="31:36"><decl pos:start="31:9" pos:end="31:35"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:13">a</name> <init pos:start="31:15" pos:end="31:35">= <expr pos:start="31:17" pos:end="31:35"><call pos:start="31:17" pos:end="31:35"><name pos:start="31:17" pos:end="31:27">hexchar2int</name><argument_list pos:start="31:28" pos:end="31:35">(<argument pos:start="31:29" pos:end="31:34"><expr pos:start="31:29" pos:end="31:34"><operator pos:start="31:29" pos:end="31:29">*</operator><name pos:start="31:30" pos:end="31:32">val</name><operator pos:start="31:33" pos:end="31:34">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:36"><decl pos:start="33:9" pos:end="33:35"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:13">b</name> <init pos:start="33:15" pos:end="33:35">= <expr pos:start="33:17" pos:end="33:35"><call pos:start="33:17" pos:end="33:35"><name pos:start="33:17" pos:end="33:27">hexchar2int</name><argument_list pos:start="33:28" pos:end="33:35">(<argument pos:start="33:29" pos:end="33:34"><expr pos:start="33:29" pos:end="33:34"><operator pos:start="33:29" pos:end="33:29">*</operator><name pos:start="33:30" pos:end="33:32">val</name><operator pos:start="33:33" pos:end="33:34">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:27">(<expr pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:13">a</name> <operator pos:start="35:15" pos:end="35:15">&lt;</operator> <literal type="number" pos:start="35:17" pos:end="35:17">0</literal> <operator pos:start="35:19" pos:end="35:20">||</operator> <name pos:start="35:22" pos:end="35:22">b</name> <operator pos:start="35:24" pos:end="35:24">&lt;</operator> <literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr>)</condition> <block pos:start="35:29" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:35">

            <expr_stmt pos:start="37:13" pos:end="37:25"><expr pos:start="37:13" pos:end="37:24"><call pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:19">av_free</name><argument_list pos:start="37:20" pos:end="37:24">(<argument pos:start="37:21" pos:end="37:23"><expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:35">return <expr pos:start="39:20" pos:end="39:34"><call pos:start="39:20" pos:end="39:34"><name pos:start="39:20" pos:end="39:26">AVERROR</name><argument_list pos:start="39:27" pos:end="39:34">(<argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:12">ptr</name><operator pos:start="43:13" pos:end="43:14">++</operator> <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">(</operator><name pos:start="43:19" pos:end="43:19">a</name> <operator pos:start="43:21" pos:end="43:22">&lt;&lt;</operator> <literal type="number" pos:start="43:24" pos:end="43:24">4</literal><operator pos:start="43:25" pos:end="43:25">)</operator> <operator pos:start="43:27" pos:end="43:27">|</operator> <name pos:start="43:29" pos:end="43:29">b</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="47:5" pos:end="47:15"><expr pos:start="47:5" pos:end="47:14"><operator pos:start="47:5" pos:end="47:5">*</operator><name pos:start="47:6" pos:end="47:8">dst</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <name pos:start="47:12" pos:end="47:14">bin</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:18"><expr pos:start="49:5" pos:end="49:17"><operator pos:start="49:5" pos:end="49:5">*</operator><name pos:start="49:6" pos:end="49:11">lendst</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:17">len</name></expr>;</expr_stmt>



    <return pos:start="53:5" pos:end="53:13">return <expr pos:start="53:12" pos:end="53:12"><literal type="number" pos:start="53:12" pos:end="53:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
