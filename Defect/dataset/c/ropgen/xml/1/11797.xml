<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11797.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">avformat_write_header</name><parameter_list pos:start="1:26" pos:end="1:69">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><name pos:start="1:27" pos:end="1:41">AVFormatContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:68"><decl pos:start="1:47" pos:end="1:68"><type pos:start="1:47" pos:end="1:68"><name pos:start="1:47" pos:end="1:58">AVDictionary</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:68">options</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="303:1">{<block_content pos:start="5:5" pos:end="301:15">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">AVDictionary</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">tmp</name> <init pos:start="9:23" pos:end="9:28">= <expr pos:start="9:25" pos:end="9:28"><name pos:start="9:25" pos:end="9:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">AVCodecContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:25">codec</name> <init pos:start="11:27" pos:end="11:32">= <expr pos:start="11:29" pos:end="11:32"><name pos:start="11:29" pos:end="11:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">AVOutputFormat</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:22">of</name> <init pos:start="13:24" pos:end="13:35">= <expr pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:35">oformat</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:40"><if pos:start="17:5" pos:end="19:40">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">options</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:40"><block_content pos:start="19:9" pos:end="19:40">

        <expr_stmt pos:start="19:9" pos:end="19:40"><expr pos:start="19:9" pos:end="19:39"><call pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:20">av_dict_copy</name><argument_list pos:start="19:21" pos:end="19:39">(<argument pos:start="19:22" pos:end="19:25"><expr pos:start="19:22" pos:end="19:25"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:25">tmp</name></expr></argument>, <argument pos:start="19:28" pos:end="19:35"><expr pos:start="19:28" pos:end="19:35"><operator pos:start="19:28" pos:end="19:28">*</operator><name pos:start="19:29" pos:end="19:35">options</name></expr></argument>, <argument pos:start="19:38" pos:end="19:38"><expr pos:start="19:38" pos:end="19:38"><literal type="number" pos:start="19:38" pos:end="19:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="25:18"><if pos:start="23:5" pos:end="25:18">if <condition pos:start="23:8" pos:end="23:45">(<expr pos:start="23:9" pos:end="23:44"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:12">ret</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:39"><name pos:start="23:16" pos:end="23:30">av_opt_set_dict</name><argument_list pos:start="23:31" pos:end="23:39">(<argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><name pos:start="23:32" pos:end="23:32">s</name></expr></argument>, <argument pos:start="23:35" pos:end="23:38"><expr pos:start="23:35" pos:end="23:38"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:38">tmp</name></expr></argument>)</argument_list></call><operator pos:start="23:40" pos:end="23:40">)</operator> <operator pos:start="23:42" pos:end="23:42">&lt;</operator> <literal type="number" pos:start="23:44" pos:end="23:44">0</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:18"><block_content pos:start="25:9" pos:end="25:18">

        <goto pos:start="25:9" pos:end="25:18">goto <name pos:start="25:14" pos:end="25:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="line" pos:start="29:5" pos:end="29:25">// some sanity checks</comment>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:61">(<expr pos:start="31:9" pos:end="31:60"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:21">nb_streams</name></name> <operator pos:start="31:23" pos:end="31:24">==</operator> <literal type="number" pos:start="31:26" pos:end="31:26">0</literal> <operator pos:start="31:28" pos:end="31:29">&amp;&amp;</operator> <operator pos:start="31:31" pos:end="31:31">!</operator><operator pos:start="31:32" pos:end="31:32">(</operator><name pos:start="31:33" pos:end="31:41"><name pos:start="31:33" pos:end="31:34">of</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:41">flags</name></name> <operator pos:start="31:43" pos:end="31:43">&amp;</operator> <name pos:start="31:45" pos:end="31:59">AVFMT_NOSTREAMS</name><operator pos:start="31:60" pos:end="31:60">)</operator></expr>)</condition> <block pos:start="31:63" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:18">

        <expr_stmt pos:start="33:9" pos:end="33:48"><expr pos:start="33:9" pos:end="33:47"><call pos:start="33:9" pos:end="33:47"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:47">(<argument pos:start="33:16" pos:end="33:16"><expr pos:start="33:16" pos:end="33:16"><name pos:start="33:16" pos:end="33:16">s</name></expr></argument>, <argument pos:start="33:19" pos:end="33:30"><expr pos:start="33:19" pos:end="33:30"><name pos:start="33:19" pos:end="33:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:33" pos:end="33:46"><expr pos:start="33:33" pos:end="33:46"><literal type="string" pos:start="33:33" pos:end="33:46">"no streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:29"><name pos:start="35:15" pos:end="35:21">AVERROR</name><argument_list pos:start="35:22" pos:end="35:29">(<argument pos:start="35:23" pos:end="35:28"><expr pos:start="35:23" pos:end="35:28"><name pos:start="35:23" pos:end="35:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="43:5" pos:end="185:5">for <control pos:start="43:9" pos:end="43:39">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:34"><expr pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <name pos:start="43:21" pos:end="43:33"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:33">nb_streams</name></name></expr>;</condition> <incr pos:start="43:36" pos:end="43:38"><expr pos:start="43:36" pos:end="43:38"><name pos:start="43:36" pos:end="43:36">i</name><operator pos:start="43:37" pos:end="43:38">++</operator></expr></incr>)</control> <block pos:start="43:41" pos:end="185:5">{<block_content pos:start="45:9" pos:end="183:72">

        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:10">st</name>    <operator pos:start="45:15" pos:end="45:15">=</operator> <name pos:start="45:17" pos:end="45:29"><name pos:start="45:17" pos:end="45:17">s</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:26">streams</name><index pos:start="45:27" pos:end="45:29">[<expr pos:start="45:28" pos:end="45:28"><name pos:start="45:28" pos:end="45:28">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:13">codec</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:25"><name pos:start="47:17" pos:end="47:18">st</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:25">codec</name></name></expr>;</expr_stmt>



        <switch pos:start="51:9" pos:end="125:9">switch <condition pos:start="51:16" pos:end="51:34">(<expr pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:21">codec</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:33">codec_type</name></name></expr>)</condition> <block pos:start="51:36" pos:end="125:9">{<block_content pos:start="53:9" pos:end="123:18">

        <case pos:start="53:9" pos:end="53:32">case <expr pos:start="53:14" pos:end="53:31"><name pos:start="53:14" pos:end="53:31">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

            <if_stmt pos:start="55:13" pos:end="63:13"><if pos:start="55:13" pos:end="63:13">if <condition pos:start="55:16" pos:end="55:40">(<expr pos:start="55:17" pos:end="55:39"><name pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:21">codec</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:34">sample_rate</name></name> <operator pos:start="55:36" pos:end="55:37">&lt;=</operator> <literal type="number" pos:start="55:39" pos:end="55:39">0</literal></expr>)</condition> <block pos:start="55:42" pos:end="63:13">{<block_content pos:start="57:17" pos:end="61:26">

                <expr_stmt pos:start="57:17" pos:end="57:65"><expr pos:start="57:17" pos:end="57:64"><call pos:start="57:17" pos:end="57:64"><name pos:start="57:17" pos:end="57:22">av_log</name><argument_list pos:start="57:23" pos:end="57:64">(<argument pos:start="57:24" pos:end="57:24"><expr pos:start="57:24" pos:end="57:24"><name pos:start="57:24" pos:end="57:24">s</name></expr></argument>, <argument pos:start="57:27" pos:end="57:38"><expr pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:41" pos:end="57:63"><expr pos:start="57:41" pos:end="57:63"><literal type="string" pos:start="57:41" pos:end="57:63">"sample rate not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:38"><expr pos:start="59:17" pos:end="59:37"><name pos:start="59:17" pos:end="59:19">ret</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <call pos:start="59:23" pos:end="59:37"><name pos:start="59:23" pos:end="59:29">AVERROR</name><argument_list pos:start="59:30" pos:end="59:37">(<argument pos:start="59:31" pos:end="59:36"><expr pos:start="59:31" pos:end="59:36"><name pos:start="59:31" pos:end="59:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="61:17" pos:end="61:26">goto <name pos:start="61:22" pos:end="61:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="65:13" pos:end="69:82"><if pos:start="65:13" pos:end="69:82">if <condition pos:start="65:16" pos:end="65:36">(<expr pos:start="65:17" pos:end="65:35"><operator pos:start="65:17" pos:end="65:17">!</operator><name pos:start="65:18" pos:end="65:35"><name pos:start="65:18" pos:end="65:22">codec</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:35">block_align</name></name></expr>)</condition><block type="pseudo" pos:start="67:17" pos:end="69:82"><block_content pos:start="67:17" pos:end="69:82">

                <expr_stmt pos:start="67:17" pos:end="69:82"><expr pos:start="67:17" pos:end="69:81"><name pos:start="67:17" pos:end="67:34"><name pos:start="67:17" pos:end="67:21">codec</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:34">block_align</name></name> <operator pos:start="67:36" pos:end="67:36">=</operator> <name pos:start="67:38" pos:end="67:52"><name pos:start="67:38" pos:end="67:42">codec</name><operator pos:start="67:43" pos:end="67:44">-&gt;</operator><name pos:start="67:45" pos:end="67:52">channels</name></name> <operator pos:start="67:54" pos:end="67:54">*</operator>

                                     <call pos:start="69:38" pos:end="69:76"><name pos:start="69:38" pos:end="69:59">av_get_bits_per_sample</name><argument_list pos:start="69:60" pos:end="69:76">(<argument pos:start="69:61" pos:end="69:75"><expr pos:start="69:61" pos:end="69:75"><name pos:start="69:61" pos:end="69:75"><name pos:start="69:61" pos:end="69:65">codec</name><operator pos:start="69:66" pos:end="69:67">-&gt;</operator><name pos:start="69:68" pos:end="69:75">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="69:78" pos:end="69:79">&gt;&gt;</operator> <literal type="number" pos:start="69:81" pos:end="69:81">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        <case pos:start="73:9" pos:end="73:32">case <expr pos:start="73:14" pos:end="73:31"><name pos:start="73:14" pos:end="73:31">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

            <if_stmt pos:start="75:13" pos:end="85:13"><if pos:start="75:13" pos:end="85:13">if <condition pos:start="75:16" pos:end="77:42">(<expr pos:start="75:17" pos:end="77:41"><name pos:start="75:17" pos:end="75:36"><name pos:start="75:17" pos:end="75:21">codec</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:32">time_base</name><operator pos:start="75:33" pos:end="75:33">.</operator><name pos:start="75:34" pos:end="75:36">num</name></name> <operator pos:start="75:38" pos:end="75:39">&lt;=</operator> <literal type="number" pos:start="75:41" pos:end="75:41">0</literal> <operator pos:start="75:43" pos:end="75:44">||</operator>

                <name pos:start="77:17" pos:end="77:36"><name pos:start="77:17" pos:end="77:21">codec</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:32">time_base</name><operator pos:start="77:33" pos:end="77:33">.</operator><name pos:start="77:34" pos:end="77:36">den</name></name> <operator pos:start="77:38" pos:end="77:39">&lt;=</operator> <literal type="number" pos:start="77:41" pos:end="77:41">0</literal></expr>)</condition> <block pos:start="77:44" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:26"> <comment type="line" pos:start="77:46" pos:end="77:63">//FIXME audio too?</comment>

                <expr_stmt pos:start="79:17" pos:end="79:63"><expr pos:start="79:17" pos:end="79:62"><call pos:start="79:17" pos:end="79:62"><name pos:start="79:17" pos:end="79:22">av_log</name><argument_list pos:start="79:23" pos:end="79:62">(<argument pos:start="79:24" pos:end="79:24"><expr pos:start="79:24" pos:end="79:24"><name pos:start="79:24" pos:end="79:24">s</name></expr></argument>, <argument pos:start="79:27" pos:end="79:38"><expr pos:start="79:27" pos:end="79:38"><name pos:start="79:27" pos:end="79:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:41" pos:end="79:61"><expr pos:start="79:41" pos:end="79:61"><literal type="string" pos:start="79:41" pos:end="79:61">"time base not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:38"><expr pos:start="81:17" pos:end="81:37"><name pos:start="81:17" pos:end="81:19">ret</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <call pos:start="81:23" pos:end="81:37"><name pos:start="81:23" pos:end="81:29">AVERROR</name><argument_list pos:start="81:30" pos:end="81:37">(<argument pos:start="81:31" pos:end="81:36"><expr pos:start="81:31" pos:end="81:36"><name pos:start="81:31" pos:end="81:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="83:17" pos:end="83:26">goto <name pos:start="83:22" pos:end="83:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="89:13" pos:end="99:13"><if pos:start="89:13" pos:end="99:13">if <condition pos:start="89:16" pos:end="91:50">(<expr pos:start="89:17" pos:end="91:49"><operator pos:start="89:17" pos:end="89:17">(</operator><name pos:start="89:18" pos:end="89:29"><name pos:start="89:18" pos:end="89:22">codec</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:29">width</name></name> <operator pos:start="89:31" pos:end="89:32">&lt;=</operator> <literal type="number" pos:start="89:34" pos:end="89:34">0</literal> <operator pos:start="89:36" pos:end="89:37">||</operator> <name pos:start="89:39" pos:end="89:51"><name pos:start="89:39" pos:end="89:43">codec</name><operator pos:start="89:44" pos:end="89:45">-&gt;</operator><name pos:start="89:46" pos:end="89:51">height</name></name> <operator pos:start="89:53" pos:end="89:54">&lt;=</operator> <literal type="number" pos:start="89:56" pos:end="89:56">0</literal><operator pos:start="89:57" pos:end="89:57">)</operator> <operator pos:start="89:59" pos:end="89:60">&amp;&amp;</operator>

                <operator pos:start="91:17" pos:end="91:17">!</operator><operator pos:start="91:18" pos:end="91:18">(</operator><name pos:start="91:19" pos:end="91:27"><name pos:start="91:19" pos:end="91:20">of</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:27">flags</name></name> <operator pos:start="91:29" pos:end="91:29">&amp;</operator> <name pos:start="91:31" pos:end="91:48">AVFMT_NODIMENSIONS</name><operator pos:start="91:49" pos:end="91:49">)</operator></expr>)</condition> <block pos:start="91:52" pos:end="99:13">{<block_content pos:start="93:17" pos:end="97:26">

                <expr_stmt pos:start="93:17" pos:end="93:64"><expr pos:start="93:17" pos:end="93:63"><call pos:start="93:17" pos:end="93:63"><name pos:start="93:17" pos:end="93:22">av_log</name><argument_list pos:start="93:23" pos:end="93:63">(<argument pos:start="93:24" pos:end="93:24"><expr pos:start="93:24" pos:end="93:24"><name pos:start="93:24" pos:end="93:24">s</name></expr></argument>, <argument pos:start="93:27" pos:end="93:38"><expr pos:start="93:27" pos:end="93:38"><name pos:start="93:27" pos:end="93:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:41" pos:end="93:62"><expr pos:start="93:41" pos:end="93:62"><literal type="string" pos:start="93:41" pos:end="93:62">"dimensions not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:38"><expr pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:19">ret</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="95:37"><name pos:start="95:23" pos:end="95:29">AVERROR</name><argument_list pos:start="95:30" pos:end="95:37">(<argument pos:start="95:31" pos:end="95:36"><expr pos:start="95:31" pos:end="95:36"><name pos:start="95:31" pos:end="95:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="97:17" pos:end="97:26">goto <name pos:start="97:22" pos:end="97:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="103:13" pos:end="121:13"><if pos:start="103:13" pos:end="121:13">if <condition pos:start="103:16" pos:end="105:53">(<expr pos:start="103:17" pos:end="105:52"><call pos:start="103:17" pos:end="105:52"><name pos:start="103:17" pos:end="103:24">av_cmp_q</name><argument_list pos:start="103:25" pos:end="105:52">(<argument pos:start="103:26" pos:end="103:48"><expr pos:start="103:26" pos:end="103:48"><name pos:start="103:26" pos:end="103:48"><name pos:start="103:26" pos:end="103:27">st</name><operator pos:start="103:28" pos:end="103:29">-&gt;</operator><name pos:start="103:30" pos:end="103:48">sample_aspect_ratio</name></name></expr></argument>,

                         <argument pos:start="105:26" pos:end="105:51"><expr pos:start="105:26" pos:end="105:51"><name pos:start="105:26" pos:end="105:51"><name pos:start="105:26" pos:end="105:30">codec</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:51">sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:55" pos:end="121:13">{<block_content pos:start="107:17" pos:end="119:26">

                <expr_stmt pos:start="107:17" pos:end="115:55"><expr pos:start="107:17" pos:end="115:54"><call pos:start="107:17" pos:end="115:54"><name pos:start="107:17" pos:end="107:22">av_log</name><argument_list pos:start="107:23" pos:end="115:54">(<argument pos:start="107:24" pos:end="107:24"><expr pos:start="107:24" pos:end="107:24"><name pos:start="107:24" pos:end="107:24">s</name></expr></argument>, <argument pos:start="107:27" pos:end="107:38"><expr pos:start="107:27" pos:end="107:38"><name pos:start="107:27" pos:end="107:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:41" pos:end="109:77"><expr pos:start="107:41" pos:end="109:77"><literal type="string" pos:start="107:41" pos:end="107:78">"Aspect ratio mismatch between muxer "</literal>

                                        <literal type="string" pos:start="109:41" pos:end="109:77">"(%d/%d) and encoder layer (%d/%d)\n"</literal></expr></argument>,

                       <argument pos:start="111:24" pos:end="111:50"><expr pos:start="111:24" pos:end="111:50"><name pos:start="111:24" pos:end="111:50"><name pos:start="111:24" pos:end="111:25">st</name><operator pos:start="111:26" pos:end="111:27">-&gt;</operator><name pos:start="111:28" pos:end="111:46">sample_aspect_ratio</name><operator pos:start="111:47" pos:end="111:47">.</operator><name pos:start="111:48" pos:end="111:50">num</name></name></expr></argument>, <argument pos:start="111:53" pos:end="111:79"><expr pos:start="111:53" pos:end="111:79"><name pos:start="111:53" pos:end="111:79"><name pos:start="111:53" pos:end="111:54">st</name><operator pos:start="111:55" pos:end="111:56">-&gt;</operator><name pos:start="111:57" pos:end="111:75">sample_aspect_ratio</name><operator pos:start="111:76" pos:end="111:76">.</operator><name pos:start="111:77" pos:end="111:79">den</name></name></expr></argument>,

                       <argument pos:start="113:24" pos:end="113:53"><expr pos:start="113:24" pos:end="113:53"><name pos:start="113:24" pos:end="113:53"><name pos:start="113:24" pos:end="113:28">codec</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:49">sample_aspect_ratio</name><operator pos:start="113:50" pos:end="113:50">.</operator><name pos:start="113:51" pos:end="113:53">num</name></name></expr></argument>,

                       <argument pos:start="115:24" pos:end="115:53"><expr pos:start="115:24" pos:end="115:53"><name pos:start="115:24" pos:end="115:53"><name pos:start="115:24" pos:end="115:28">codec</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:49">sample_aspect_ratio</name><operator pos:start="115:50" pos:end="115:50">.</operator><name pos:start="115:51" pos:end="115:53">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:38"><expr pos:start="117:17" pos:end="117:37"><name pos:start="117:17" pos:end="117:19">ret</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:37"><name pos:start="117:23" pos:end="117:29">AVERROR</name><argument_list pos:start="117:30" pos:end="117:37">(<argument pos:start="117:31" pos:end="117:36"><expr pos:start="117:31" pos:end="117:36"><name pos:start="117:31" pos:end="117:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="119:17" pos:end="119:26">goto <name pos:start="119:22" pos:end="119:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="129:9" pos:end="171:9"><if pos:start="129:9" pos:end="171:9">if <condition pos:start="129:12" pos:end="129:26">(<expr pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:14">of</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:25">codec_tag</name></name></expr>)</condition> <block pos:start="129:28" pos:end="171:9">{<block_content pos:start="131:13" pos:end="169:84">

            <if_stmt pos:start="131:13" pos:end="145:13"><if pos:start="131:13" pos:end="145:13">if <condition pos:start="131:16" pos:end="137:43">(<expr pos:start="131:17" pos:end="137:42"><name pos:start="131:17" pos:end="131:32"><name pos:start="131:17" pos:end="131:21">codec</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:32">codec_tag</name></name> <operator pos:start="131:34" pos:end="131:35">&amp;&amp;</operator>

                <name pos:start="133:17" pos:end="133:31"><name pos:start="133:17" pos:end="133:21">codec</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:31">codec_id</name></name> <operator pos:start="133:33" pos:end="133:34">==</operator> <name pos:start="133:36" pos:end="133:55">AV_CODEC_ID_RAWVIDEO</name> <operator pos:start="133:57" pos:end="133:58">&amp;&amp;</operator>

                <operator pos:start="135:17" pos:end="135:17">!</operator><call pos:start="135:18" pos:end="135:65"><name pos:start="135:18" pos:end="135:33">av_codec_get_tag</name><argument_list pos:start="135:34" pos:end="135:65">(<argument pos:start="135:35" pos:end="135:47"><expr pos:start="135:35" pos:end="135:47"><name pos:start="135:35" pos:end="135:47"><name pos:start="135:35" pos:end="135:36">of</name><operator pos:start="135:37" pos:end="135:38">-&gt;</operator><name pos:start="135:39" pos:end="135:47">codec_tag</name></name></expr></argument>, <argument pos:start="135:50" pos:end="135:64"><expr pos:start="135:50" pos:end="135:64"><name pos:start="135:50" pos:end="135:64"><name pos:start="135:50" pos:end="135:54">codec</name><operator pos:start="135:55" pos:end="135:56">-&gt;</operator><name pos:start="135:57" pos:end="135:64">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="135:67" pos:end="135:68">&amp;&amp;</operator>

                <operator pos:start="137:17" pos:end="137:17">!</operator><call pos:start="137:18" pos:end="137:42"><name pos:start="137:18" pos:end="137:35">validate_codec_tag</name><argument_list pos:start="137:36" pos:end="137:42">(<argument pos:start="137:37" pos:end="137:37"><expr pos:start="137:37" pos:end="137:37"><name pos:start="137:37" pos:end="137:37">s</name></expr></argument>, <argument pos:start="137:40" pos:end="137:41"><expr pos:start="137:40" pos:end="137:41"><name pos:start="137:40" pos:end="137:41">st</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:45" pos:end="145:13">{<block_content pos:start="143:17" pos:end="143:37">

                <comment type="line" pos:start="139:17" pos:end="139:71">// the current rawvideo encoding system ends up setting</comment>

                <comment type="line" pos:start="141:17" pos:end="141:67">// the wrong codec_tag for avi, we override it here</comment>

                <expr_stmt pos:start="143:17" pos:end="143:37"><expr pos:start="143:17" pos:end="143:36"><name pos:start="143:17" pos:end="143:32"><name pos:start="143:17" pos:end="143:21">codec</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:32">codec_tag</name></name> <operator pos:start="143:34" pos:end="143:34">=</operator> <literal type="number" pos:start="143:36" pos:end="143:36">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="147:13" pos:end="169:84"><if pos:start="147:13" pos:end="167:13">if <condition pos:start="147:16" pos:end="147:33">(<expr pos:start="147:17" pos:end="147:32"><name pos:start="147:17" pos:end="147:32"><name pos:start="147:17" pos:end="147:21">codec</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:32">codec_tag</name></name></expr>)</condition> <block pos:start="147:35" pos:end="167:13">{<block_content pos:start="149:17" pos:end="165:17">

                <if_stmt pos:start="149:17" pos:end="165:17"><if pos:start="149:17" pos:end="165:17">if <condition pos:start="149:20" pos:end="149:47">(<expr pos:start="149:21" pos:end="149:46"><operator pos:start="149:21" pos:end="149:21">!</operator><call pos:start="149:22" pos:end="149:46"><name pos:start="149:22" pos:end="149:39">validate_codec_tag</name><argument_list pos:start="149:40" pos:end="149:46">(<argument pos:start="149:41" pos:end="149:41"><expr pos:start="149:41" pos:end="149:41"><name pos:start="149:41" pos:end="149:41">s</name></expr></argument>, <argument pos:start="149:44" pos:end="149:45"><expr pos:start="149:44" pos:end="149:45"><name pos:start="149:44" pos:end="149:45">st</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:49" pos:end="165:17">{<block_content pos:start="151:21" pos:end="163:30">

                    <decl_stmt pos:start="151:21" pos:end="151:36"><decl pos:start="151:21" pos:end="151:35"><type pos:start="151:21" pos:end="151:24"><name pos:start="151:21" pos:end="151:24">char</name></type> <name pos:start="151:26" pos:end="151:35"><name pos:start="151:26" pos:end="151:31">tagbuf</name><index pos:start="151:32" pos:end="151:35">[<expr pos:start="151:33" pos:end="151:34"><literal type="number" pos:start="151:33" pos:end="151:34">32</literal></expr>]</index></name></decl>;</decl_stmt>

                    <expr_stmt pos:start="153:21" pos:end="153:86"><expr pos:start="153:21" pos:end="153:85"><call pos:start="153:21" pos:end="153:85"><name pos:start="153:21" pos:end="153:43">av_get_codec_tag_string</name><argument_list pos:start="153:44" pos:end="153:85">(<argument pos:start="153:45" pos:end="153:50"><expr pos:start="153:45" pos:end="153:50"><name pos:start="153:45" pos:end="153:50">tagbuf</name></expr></argument>, <argument pos:start="153:53" pos:end="153:66"><expr pos:start="153:53" pos:end="153:66"><sizeof pos:start="153:53" pos:end="153:66">sizeof<argument_list pos:start="153:59" pos:end="153:66">(<argument pos:start="153:60" pos:end="153:65"><expr pos:start="153:60" pos:end="153:65"><name pos:start="153:60" pos:end="153:65">tagbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="153:69" pos:end="153:84"><expr pos:start="153:69" pos:end="153:84"><name pos:start="153:69" pos:end="153:84"><name pos:start="153:69" pos:end="153:73">codec</name><operator pos:start="153:74" pos:end="153:75">-&gt;</operator><name pos:start="153:76" pos:end="153:84">codec_tag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="155:21" pos:end="159:70"><expr pos:start="155:21" pos:end="159:69"><call pos:start="155:21" pos:end="159:69"><name pos:start="155:21" pos:end="155:26">av_log</name><argument_list pos:start="155:27" pos:end="159:69">(<argument pos:start="155:28" pos:end="155:28"><expr pos:start="155:28" pos:end="155:28"><name pos:start="155:28" pos:end="155:28">s</name></expr></argument>, <argument pos:start="155:31" pos:end="155:42"><expr pos:start="155:31" pos:end="155:42"><name pos:start="155:31" pos:end="155:42">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="157:28" pos:end="157:83"><expr pos:start="157:28" pos:end="157:83"><literal type="string" pos:start="157:28" pos:end="157:83">"Tag %s/0x%08x incompatible with output codec id '%d'\n"</literal></expr></argument>,

                           <argument pos:start="159:28" pos:end="159:33"><expr pos:start="159:28" pos:end="159:33"><name pos:start="159:28" pos:end="159:33">tagbuf</name></expr></argument>, <argument pos:start="159:36" pos:end="159:51"><expr pos:start="159:36" pos:end="159:51"><name pos:start="159:36" pos:end="159:51"><name pos:start="159:36" pos:end="159:40">codec</name><operator pos:start="159:41" pos:end="159:42">-&gt;</operator><name pos:start="159:43" pos:end="159:51">codec_tag</name></name></expr></argument>, <argument pos:start="159:54" pos:end="159:68"><expr pos:start="159:54" pos:end="159:68"><name pos:start="159:54" pos:end="159:68"><name pos:start="159:54" pos:end="159:58">codec</name><operator pos:start="159:59" pos:end="159:60">-&gt;</operator><name pos:start="159:61" pos:end="159:68">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="161:21" pos:end="161:46"><expr pos:start="161:21" pos:end="161:45"><name pos:start="161:21" pos:end="161:23">ret</name> <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:45">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                    <goto pos:start="163:21" pos:end="163:30">goto <name pos:start="163:26" pos:end="163:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="167:15" pos:end="169:84">else<block type="pseudo" pos:start="169:17" pos:end="169:84"><block_content pos:start="169:17" pos:end="169:84">

                <expr_stmt pos:start="169:17" pos:end="169:84"><expr pos:start="169:17" pos:end="169:83"><name pos:start="169:17" pos:end="169:32"><name pos:start="169:17" pos:end="169:21">codec</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:32">codec_tag</name></name> <operator pos:start="169:34" pos:end="169:34">=</operator> <call pos:start="169:36" pos:end="169:83"><name pos:start="169:36" pos:end="169:51">av_codec_get_tag</name><argument_list pos:start="169:52" pos:end="169:83">(<argument pos:start="169:53" pos:end="169:65"><expr pos:start="169:53" pos:end="169:65"><name pos:start="169:53" pos:end="169:65"><name pos:start="169:53" pos:end="169:54">of</name><operator pos:start="169:55" pos:end="169:56">-&gt;</operator><name pos:start="169:57" pos:end="169:65">codec_tag</name></name></expr></argument>, <argument pos:start="169:68" pos:end="169:82"><expr pos:start="169:68" pos:end="169:82"><name pos:start="169:68" pos:end="169:82"><name pos:start="169:68" pos:end="169:72">codec</name><operator pos:start="169:73" pos:end="169:74">-&gt;</operator><name pos:start="169:75" pos:end="169:82">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="175:9" pos:end="183:72"><if pos:start="175:9" pos:end="183:72">if <condition pos:start="175:12" pos:end="177:55">(<expr pos:start="175:13" pos:end="177:54"><name pos:start="175:13" pos:end="175:21"><name pos:start="175:13" pos:end="175:14">of</name><operator pos:start="175:15" pos:end="175:16">-&gt;</operator><name pos:start="175:17" pos:end="175:21">flags</name></name> <operator pos:start="175:23" pos:end="175:23">&amp;</operator> <name pos:start="175:25" pos:end="175:42">AVFMT_GLOBALHEADER</name> <operator pos:start="175:44" pos:end="175:45">&amp;&amp;</operator>

            <operator pos:start="177:13" pos:end="177:13">!</operator><operator pos:start="177:14" pos:end="177:14">(</operator><name pos:start="177:15" pos:end="177:26"><name pos:start="177:15" pos:end="177:19">codec</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:26">flags</name></name> <operator pos:start="177:28" pos:end="177:28">&amp;</operator> <name pos:start="177:30" pos:end="177:53">CODEC_FLAG_GLOBAL_HEADER</name><operator pos:start="177:54" pos:end="177:54">)</operator></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="183:72"><block_content pos:start="179:13" pos:end="183:72">

            <expr_stmt pos:start="179:13" pos:end="183:72"><expr pos:start="179:13" pos:end="183:71"><call pos:start="179:13" pos:end="183:71"><name pos:start="179:13" pos:end="179:18">av_log</name><argument_list pos:start="179:19" pos:end="183:71">(<argument pos:start="179:20" pos:end="179:20"><expr pos:start="179:20" pos:end="179:20"><name pos:start="179:20" pos:end="179:20">s</name></expr></argument>, <argument pos:start="179:23" pos:end="179:36"><expr pos:start="179:23" pos:end="179:36"><name pos:start="179:23" pos:end="179:36">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="181:20" pos:end="183:67"><expr pos:start="181:20" pos:end="183:67"><literal type="string" pos:start="181:20" pos:end="181:69">"Codec for stream %d does not use global headers "</literal>

                   <literal type="string" pos:start="183:20" pos:end="183:67">"but container format requires global headers\n"</literal></expr></argument>, <argument pos:start="183:70" pos:end="183:70"><expr pos:start="183:70" pos:end="183:70"><name pos:start="183:70" pos:end="183:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="189:5" pos:end="213:5"><if pos:start="189:5" pos:end="213:5">if <condition pos:start="189:8" pos:end="189:48">(<expr pos:start="189:9" pos:end="189:47"><operator pos:start="189:9" pos:end="189:9">!</operator><name pos:start="189:10" pos:end="189:21"><name pos:start="189:10" pos:end="189:10">s</name><operator pos:start="189:11" pos:end="189:12">-&gt;</operator><name pos:start="189:13" pos:end="189:21">priv_data</name></name> <operator pos:start="189:23" pos:end="189:24">&amp;&amp;</operator> <name pos:start="189:26" pos:end="189:43"><name pos:start="189:26" pos:end="189:27">of</name><operator pos:start="189:28" pos:end="189:29">-&gt;</operator><name pos:start="189:30" pos:end="189:43">priv_data_size</name></name> <operator pos:start="189:45" pos:end="189:45">&gt;</operator> <literal type="number" pos:start="189:47" pos:end="189:47">0</literal></expr>)</condition> <block pos:start="189:50" pos:end="213:5">{<block_content pos:start="191:9" pos:end="211:9">

        <expr_stmt pos:start="191:9" pos:end="191:54"><expr pos:start="191:9" pos:end="191:53"><name pos:start="191:9" pos:end="191:20"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:20">priv_data</name></name> <operator pos:start="191:22" pos:end="191:22">=</operator> <call pos:start="191:24" pos:end="191:53"><name pos:start="191:24" pos:end="191:33">av_mallocz</name><argument_list pos:start="191:34" pos:end="191:53">(<argument pos:start="191:35" pos:end="191:52"><expr pos:start="191:35" pos:end="191:52"><name pos:start="191:35" pos:end="191:52"><name pos:start="191:35" pos:end="191:36">of</name><operator pos:start="191:37" pos:end="191:38">-&gt;</operator><name pos:start="191:39" pos:end="191:52">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="199:9"><if pos:start="193:9" pos:end="199:9">if <condition pos:start="193:12" pos:end="193:26">(<expr pos:start="193:13" pos:end="193:25"><operator pos:start="193:13" pos:end="193:13">!</operator><name pos:start="193:14" pos:end="193:25"><name pos:start="193:14" pos:end="193:14">s</name><operator pos:start="193:15" pos:end="193:16">-&gt;</operator><name pos:start="193:17" pos:end="193:25">priv_data</name></name></expr>)</condition> <block pos:start="193:28" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:22">

            <expr_stmt pos:start="195:13" pos:end="195:34"><expr pos:start="195:13" pos:end="195:33"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <call pos:start="195:19" pos:end="195:33"><name pos:start="195:19" pos:end="195:25">AVERROR</name><argument_list pos:start="195:26" pos:end="195:33">(<argument pos:start="195:27" pos:end="195:32"><expr pos:start="195:27" pos:end="195:32"><name pos:start="195:27" pos:end="195:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="197:13" pos:end="197:22">goto <name pos:start="197:18" pos:end="197:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="201:9" pos:end="211:9"><if pos:start="201:9" pos:end="211:9">if <condition pos:start="201:12" pos:end="201:27">(<expr pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:14">of</name><operator pos:start="201:15" pos:end="201:16">-&gt;</operator><name pos:start="201:17" pos:end="201:26">priv_class</name></name></expr>)</condition> <block pos:start="201:29" pos:end="211:9">{<block_content pos:start="203:13" pos:end="209:26">

            <expr_stmt pos:start="203:13" pos:end="203:61"><expr pos:start="203:13" pos:end="203:60"><operator pos:start="203:13" pos:end="203:13">*</operator><operator pos:start="203:14" pos:end="203:14">(</operator><specifier pos:start="203:15" pos:end="203:19">const</specifier> <name pos:start="203:21" pos:end="203:27">AVClass</name> <operator pos:start="203:29" pos:end="203:29">*</operator><operator pos:start="203:30" pos:end="203:30">*</operator><operator pos:start="203:31" pos:end="203:31">)</operator><name pos:start="203:32" pos:end="203:43"><name pos:start="203:32" pos:end="203:32">s</name><operator pos:start="203:33" pos:end="203:34">-&gt;</operator><name pos:start="203:35" pos:end="203:43">priv_data</name></name> <operator pos:start="203:45" pos:end="203:45">=</operator> <name pos:start="203:47" pos:end="203:60"><name pos:start="203:47" pos:end="203:48">of</name><operator pos:start="203:49" pos:end="203:50">-&gt;</operator><name pos:start="203:51" pos:end="203:60">priv_class</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:46"><expr pos:start="205:13" pos:end="205:45"><call pos:start="205:13" pos:end="205:45"><name pos:start="205:13" pos:end="205:31">av_opt_set_defaults</name><argument_list pos:start="205:32" pos:end="205:45">(<argument pos:start="205:33" pos:end="205:44"><expr pos:start="205:33" pos:end="205:44"><name pos:start="205:33" pos:end="205:44"><name pos:start="205:33" pos:end="205:33">s</name><operator pos:start="205:34" pos:end="205:35">-&gt;</operator><name pos:start="205:36" pos:end="205:44">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="207:13" pos:end="209:26"><if pos:start="207:13" pos:end="209:26">if <condition pos:start="207:16" pos:end="207:64">(<expr pos:start="207:17" pos:end="207:63"><operator pos:start="207:17" pos:end="207:17">(</operator><name pos:start="207:18" pos:end="207:20">ret</name> <operator pos:start="207:22" pos:end="207:22">=</operator> <call pos:start="207:24" pos:end="207:58"><name pos:start="207:24" pos:end="207:38">av_opt_set_dict</name><argument_list pos:start="207:39" pos:end="207:58">(<argument pos:start="207:40" pos:end="207:51"><expr pos:start="207:40" pos:end="207:51"><name pos:start="207:40" pos:end="207:51"><name pos:start="207:40" pos:end="207:40">s</name><operator pos:start="207:41" pos:end="207:42">-&gt;</operator><name pos:start="207:43" pos:end="207:51">priv_data</name></name></expr></argument>, <argument pos:start="207:54" pos:end="207:57"><expr pos:start="207:54" pos:end="207:57"><operator pos:start="207:54" pos:end="207:54">&amp;</operator><name pos:start="207:55" pos:end="207:57">tmp</name></expr></argument>)</argument_list></call><operator pos:start="207:59" pos:end="207:59">)</operator> <operator pos:start="207:61" pos:end="207:61">&lt;</operator> <literal type="number" pos:start="207:63" pos:end="207:63">0</literal></expr>)</condition><block type="pseudo" pos:start="209:17" pos:end="209:26"><block_content pos:start="209:17" pos:end="209:26">

                <goto pos:start="209:17" pos:end="209:26">goto <name pos:start="209:22" pos:end="209:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="217:5" pos:end="217:41">/* set muxer identification string */</comment>

    <if_stmt pos:start="219:5" pos:end="223:5"><if pos:start="219:5" pos:end="223:5">if <condition pos:start="219:8" pos:end="219:78">(<expr pos:start="219:9" pos:end="219:77"><name pos:start="219:9" pos:end="219:21"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:21">nb_streams</name></name> <operator pos:start="219:23" pos:end="219:24">&amp;&amp;</operator> <operator pos:start="219:26" pos:end="219:26">!</operator><operator pos:start="219:27" pos:end="219:27">(</operator><name pos:start="219:28" pos:end="219:40"><name pos:start="219:28" pos:end="219:28">s</name><operator pos:start="219:29" pos:end="219:30">-&gt;</operator><name pos:start="219:31" pos:end="219:37">streams</name><index pos:start="219:38" pos:end="219:40">[<expr pos:start="219:39" pos:end="219:39"><literal type="number" pos:start="219:39" pos:end="219:39">0</literal></expr>]</index></name><operator pos:start="219:41" pos:end="219:42">-&gt;</operator><name pos:start="219:43" pos:end="219:54"><name pos:start="219:43" pos:end="219:47">codec</name><operator pos:start="219:48" pos:end="219:49">-&gt;</operator><name pos:start="219:50" pos:end="219:54">flags</name></name> <operator pos:start="219:56" pos:end="219:56">&amp;</operator> <name pos:start="219:58" pos:end="219:76">CODEC_FLAG_BITEXACT</name><operator pos:start="219:77" pos:end="219:77">)</operator></expr>)</condition> <block pos:start="219:80" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:67">

        <expr_stmt pos:start="221:9" pos:end="221:67"><expr pos:start="221:9" pos:end="221:66"><call pos:start="221:9" pos:end="221:66"><name pos:start="221:9" pos:end="221:19">av_dict_set</name><argument_list pos:start="221:20" pos:end="221:66">(<argument pos:start="221:21" pos:end="221:32"><expr pos:start="221:21" pos:end="221:32"><operator pos:start="221:21" pos:end="221:21">&amp;</operator><name pos:start="221:22" pos:end="221:32"><name pos:start="221:22" pos:end="221:22">s</name><operator pos:start="221:23" pos:end="221:24">-&gt;</operator><name pos:start="221:25" pos:end="221:32">metadata</name></name></expr></argument>, <argument pos:start="221:35" pos:end="221:43"><expr pos:start="221:35" pos:end="221:43"><literal type="string" pos:start="221:35" pos:end="221:43">"encoder"</literal></expr></argument>, <argument pos:start="221:46" pos:end="221:62"><expr pos:start="221:46" pos:end="221:62"><name pos:start="221:46" pos:end="221:62">LIBAVFORMAT_IDENT</name></expr></argument>, <argument pos:start="221:65" pos:end="221:65"><expr pos:start="221:65" pos:end="221:65"><literal type="number" pos:start="221:65" pos:end="221:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="227:5" pos:end="235:5"><if pos:start="227:5" pos:end="235:5">if <condition pos:start="227:8" pos:end="227:33">(<expr pos:start="227:9" pos:end="227:32"><name pos:start="227:9" pos:end="227:32"><name pos:start="227:9" pos:end="227:9">s</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:18">oformat</name><operator pos:start="227:19" pos:end="227:20">-&gt;</operator><name pos:start="227:21" pos:end="227:32">write_header</name></name></expr>)</condition> <block pos:start="227:35" pos:end="235:5">{<block_content pos:start="229:9" pos:end="233:22">

        <expr_stmt pos:start="229:9" pos:end="229:42"><expr pos:start="229:9" pos:end="229:41"><name pos:start="229:9" pos:end="229:11">ret</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <call pos:start="229:15" pos:end="229:41"><name pos:start="229:15" pos:end="229:38"><name pos:start="229:15" pos:end="229:15">s</name><operator pos:start="229:16" pos:end="229:17">-&gt;</operator><name pos:start="229:18" pos:end="229:24">oformat</name><operator pos:start="229:25" pos:end="229:26">-&gt;</operator><name pos:start="229:27" pos:end="229:38">write_header</name></name><argument_list pos:start="229:39" pos:end="229:41">(<argument pos:start="229:40" pos:end="229:40"><expr pos:start="229:40" pos:end="229:40"><name pos:start="229:40" pos:end="229:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="231:9" pos:end="233:22"><if pos:start="231:9" pos:end="233:22">if <condition pos:start="231:12" pos:end="231:20">(<expr pos:start="231:13" pos:end="231:19"><name pos:start="231:13" pos:end="231:15">ret</name> <operator pos:start="231:17" pos:end="231:17">&lt;</operator> <literal type="number" pos:start="231:19" pos:end="231:19">0</literal></expr>)</condition><block type="pseudo" pos:start="233:13" pos:end="233:22"><block_content pos:start="233:13" pos:end="233:22">

            <goto pos:start="233:13" pos:end="233:22">goto <name pos:start="233:18" pos:end="233:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:29">/* init PTS generation */</comment>

    <for pos:start="241:5" pos:end="283:5">for <control pos:start="241:9" pos:end="241:39">(<init pos:start="241:10" pos:end="241:15"><expr pos:start="241:10" pos:end="241:14"><name pos:start="241:10" pos:end="241:10">i</name> <operator pos:start="241:12" pos:end="241:12">=</operator> <literal type="number" pos:start="241:14" pos:end="241:14">0</literal></expr>;</init> <condition pos:start="241:17" pos:end="241:34"><expr pos:start="241:17" pos:end="241:33"><name pos:start="241:17" pos:end="241:17">i</name> <operator pos:start="241:19" pos:end="241:19">&lt;</operator> <name pos:start="241:21" pos:end="241:33"><name pos:start="241:21" pos:end="241:21">s</name><operator pos:start="241:22" pos:end="241:23">-&gt;</operator><name pos:start="241:24" pos:end="241:33">nb_streams</name></name></expr>;</condition> <incr pos:start="241:36" pos:end="241:38"><expr pos:start="241:36" pos:end="241:38"><name pos:start="241:36" pos:end="241:36">i</name><operator pos:start="241:37" pos:end="241:38">++</operator></expr></incr>)</control> <block pos:start="241:41" pos:end="283:5">{<block_content pos:start="243:9" pos:end="281:9">

        <decl_stmt pos:start="243:9" pos:end="243:37"><decl pos:start="243:9" pos:end="243:36"><type pos:start="243:9" pos:end="243:15"><name pos:start="243:9" pos:end="243:15">int64_t</name></type> <name pos:start="243:17" pos:end="243:19">den</name> <init pos:start="243:21" pos:end="243:36">= <expr pos:start="243:23" pos:end="243:36"><name pos:start="243:23" pos:end="243:36">AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:27"><expr pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:10">st</name> <operator pos:start="245:12" pos:end="245:12">=</operator> <name pos:start="245:14" pos:end="245:26"><name pos:start="245:14" pos:end="245:14">s</name><operator pos:start="245:15" pos:end="245:16">-&gt;</operator><name pos:start="245:17" pos:end="245:23">streams</name><index pos:start="245:24" pos:end="245:26">[<expr pos:start="245:25" pos:end="245:25"><name pos:start="245:25" pos:end="245:25">i</name></expr>]</index></name></expr>;</expr_stmt>



        <switch pos:start="249:9" pos:end="267:9">switch <condition pos:start="249:16" pos:end="249:38">(<expr pos:start="249:17" pos:end="249:37"><name pos:start="249:17" pos:end="249:37"><name pos:start="249:17" pos:end="249:18">st</name><operator pos:start="249:19" pos:end="249:20">-&gt;</operator><name pos:start="249:21" pos:end="249:25">codec</name><operator pos:start="249:26" pos:end="249:27">-&gt;</operator><name pos:start="249:28" pos:end="249:37">codec_type</name></name></expr>)</condition> <block pos:start="249:40" pos:end="267:9">{<block_content pos:start="251:9" pos:end="265:18">

        <case pos:start="251:9" pos:end="251:32">case <expr pos:start="251:14" pos:end="251:31"><name pos:start="251:14" pos:end="251:31">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

            <expr_stmt pos:start="253:13" pos:end="253:70"><expr pos:start="253:13" pos:end="253:69"><name pos:start="253:13" pos:end="253:15">den</name> <operator pos:start="253:17" pos:end="253:17">=</operator> <operator pos:start="253:19" pos:end="253:19">(</operator><name pos:start="253:20" pos:end="253:26">int64_t</name><operator pos:start="253:27" pos:end="253:27">)</operator><name pos:start="253:28" pos:end="253:44"><name pos:start="253:28" pos:end="253:29">st</name><operator pos:start="253:30" pos:end="253:31">-&gt;</operator><name pos:start="253:32" pos:end="253:40">time_base</name><operator pos:start="253:41" pos:end="253:41">.</operator><name pos:start="253:42" pos:end="253:44">num</name></name> <operator pos:start="253:46" pos:end="253:46">*</operator> <name pos:start="253:48" pos:end="253:69"><name pos:start="253:48" pos:end="253:49">st</name><operator pos:start="253:50" pos:end="253:51">-&gt;</operator><name pos:start="253:52" pos:end="253:56">codec</name><operator pos:start="253:57" pos:end="253:58">-&gt;</operator><name pos:start="253:59" pos:end="253:69">sample_rate</name></name></expr>;</expr_stmt>

            <break pos:start="255:13" pos:end="255:18">break;</break>

        <case pos:start="257:9" pos:end="257:32">case <expr pos:start="257:14" pos:end="257:31"><name pos:start="257:14" pos:end="257:31">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

            <expr_stmt pos:start="259:13" pos:end="259:72"><expr pos:start="259:13" pos:end="259:71"><name pos:start="259:13" pos:end="259:15">den</name> <operator pos:start="259:17" pos:end="259:17">=</operator> <operator pos:start="259:19" pos:end="259:19">(</operator><name pos:start="259:20" pos:end="259:26">int64_t</name><operator pos:start="259:27" pos:end="259:27">)</operator><name pos:start="259:28" pos:end="259:44"><name pos:start="259:28" pos:end="259:29">st</name><operator pos:start="259:30" pos:end="259:31">-&gt;</operator><name pos:start="259:32" pos:end="259:40">time_base</name><operator pos:start="259:41" pos:end="259:41">.</operator><name pos:start="259:42" pos:end="259:44">num</name></name> <operator pos:start="259:46" pos:end="259:46">*</operator> <name pos:start="259:48" pos:end="259:71"><name pos:start="259:48" pos:end="259:49">st</name><operator pos:start="259:50" pos:end="259:51">-&gt;</operator><name pos:start="259:52" pos:end="259:56">codec</name><operator pos:start="259:57" pos:end="259:58">-&gt;</operator><name pos:start="259:59" pos:end="259:67">time_base</name><operator pos:start="259:68" pos:end="259:68">.</operator><name pos:start="259:69" pos:end="259:71">den</name></name></expr>;</expr_stmt>

            <break pos:start="261:13" pos:end="261:18">break;</break>

        <default pos:start="263:9" pos:end="263:16">default:</default>

            <break pos:start="265:13" pos:end="265:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="269:9" pos:end="281:9"><if pos:start="269:9" pos:end="281:9">if <condition pos:start="269:12" pos:end="269:34">(<expr pos:start="269:13" pos:end="269:33"><name pos:start="269:13" pos:end="269:15">den</name> <operator pos:start="269:17" pos:end="269:18">!=</operator> <name pos:start="269:20" pos:end="269:33">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="269:36" pos:end="281:9">{<block_content pos:start="271:13" pos:end="279:43">

            <if_stmt pos:start="271:13" pos:end="277:13"><if pos:start="271:13" pos:end="277:13">if <condition pos:start="271:16" pos:end="271:25">(<expr pos:start="271:17" pos:end="271:24"><name pos:start="271:17" pos:end="271:19">den</name> <operator pos:start="271:21" pos:end="271:22">&lt;=</operator> <literal type="number" pos:start="271:24" pos:end="271:24">0</literal></expr>)</condition> <block pos:start="271:27" pos:end="277:13">{<block_content pos:start="273:17" pos:end="275:26">

                <expr_stmt pos:start="273:17" pos:end="273:42"><expr pos:start="273:17" pos:end="273:41"><name pos:start="273:17" pos:end="273:19">ret</name> <operator pos:start="273:21" pos:end="273:21">=</operator> <name pos:start="273:23" pos:end="273:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="275:17" pos:end="275:26">goto <name pos:start="275:22" pos:end="275:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:43"><expr pos:start="279:13" pos:end="279:42"><call pos:start="279:13" pos:end="279:42"><name pos:start="279:13" pos:end="279:21">frac_init</name><argument_list pos:start="279:22" pos:end="279:42">(<argument pos:start="279:23" pos:end="279:30"><expr pos:start="279:23" pos:end="279:30"><operator pos:start="279:23" pos:end="279:23">&amp;</operator><name pos:start="279:24" pos:end="279:30"><name pos:start="279:24" pos:end="279:25">st</name><operator pos:start="279:26" pos:end="279:27">-&gt;</operator><name pos:start="279:28" pos:end="279:30">pts</name></name></expr></argument>, <argument pos:start="279:33" pos:end="279:33"><expr pos:start="279:33" pos:end="279:33"><literal type="number" pos:start="279:33" pos:end="279:33">0</literal></expr></argument>, <argument pos:start="279:36" pos:end="279:36"><expr pos:start="279:36" pos:end="279:36"><literal type="number" pos:start="279:36" pos:end="279:36">0</literal></expr></argument>, <argument pos:start="279:39" pos:end="279:41"><expr pos:start="279:39" pos:end="279:41"><name pos:start="279:39" pos:end="279:41">den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="287:5" pos:end="293:5"><if pos:start="287:5" pos:end="293:5">if <condition pos:start="287:8" pos:end="287:16">(<expr pos:start="287:9" pos:end="287:15"><name pos:start="287:9" pos:end="287:15">options</name></expr>)</condition> <block pos:start="287:18" pos:end="293:5">{<block_content pos:start="289:9" pos:end="291:23">

        <expr_stmt pos:start="289:9" pos:end="289:30"><expr pos:start="289:9" pos:end="289:29"><call pos:start="289:9" pos:end="289:29"><name pos:start="289:9" pos:end="289:20">av_dict_free</name><argument_list pos:start="289:21" pos:end="289:29">(<argument pos:start="289:22" pos:end="289:28"><expr pos:start="289:22" pos:end="289:28"><name pos:start="289:22" pos:end="289:28">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:23"><expr pos:start="291:9" pos:end="291:22"><operator pos:start="291:9" pos:end="291:9">*</operator><name pos:start="291:10" pos:end="291:16">options</name> <operator pos:start="291:18" pos:end="291:18">=</operator> <name pos:start="291:20" pos:end="291:22">tmp</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="295:5" pos:end="295:13">return <expr pos:start="295:12" pos:end="295:12"><literal type="number" pos:start="295:12" pos:end="295:12">0</literal></expr>;</return>

<label pos:start="297:1" pos:end="297:5"><name pos:start="297:1" pos:end="297:4">fail</name>:</label>

    <expr_stmt pos:start="299:5" pos:end="299:23"><expr pos:start="299:5" pos:end="299:22"><call pos:start="299:5" pos:end="299:22"><name pos:start="299:5" pos:end="299:16">av_dict_free</name><argument_list pos:start="299:17" pos:end="299:22">(<argument pos:start="299:18" pos:end="299:21"><expr pos:start="299:18" pos:end="299:21"><operator pos:start="299:18" pos:end="299:18">&amp;</operator><name pos:start="299:19" pos:end="299:21">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="301:5" pos:end="301:15">return <expr pos:start="301:12" pos:end="301:14"><name pos:start="301:12" pos:end="301:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
