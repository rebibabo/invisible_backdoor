<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20423.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">macio_newworld_initfn</name><parameter_list pos:start="1:33" pos:end="1:46">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:42">PCIDevice</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:13">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">MacIOState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:28">= <expr pos:start="5:21" pos:end="5:28"><call pos:start="5:21" pos:end="5:28"><name pos:start="5:21" pos:end="5:25">MACIO</name><argument_list pos:start="5:26" pos:end="5:28">(<argument pos:start="5:27" pos:end="5:27"><expr pos:start="5:27" pos:end="5:27"><name pos:start="5:27" pos:end="5:27">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">NewWorldMacIOState</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:26">ns</name> <init pos:start="7:28" pos:end="7:46">= <expr pos:start="7:30" pos:end="7:46"><call pos:start="7:30" pos:end="7:46"><name pos:start="7:30" pos:end="7:43">NEWWORLD_MACIO</name><argument_list pos:start="7:44" pos:end="7:46">(<argument pos:start="7:45" pos:end="7:45"><expr pos:start="7:45" pos:end="7:45"><name pos:start="7:45" pos:end="7:45">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">SysBusDevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:28">sysbus_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:30">timer_memory</name> <init pos:start="11:32" pos:end="11:55">= <expr pos:start="11:34" pos:end="11:55"><call pos:start="11:34" pos:end="11:55"><name pos:start="11:34" pos:end="11:38">g_new</name><argument_list pos:start="11:39" pos:end="11:55">(<argument pos:start="11:40" pos:end="11:51"><expr pos:start="11:40" pos:end="11:51"><name pos:start="11:40" pos:end="11:51">MemoryRegion</name></expr></argument>, <argument pos:start="11:54" pos:end="11:54"><expr pos:start="11:54" pos:end="11:54"><literal type="number" pos:start="11:54" pos:end="11:54">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">cur_irq</name> <init pos:start="15:17" pos:end="15:19">= <expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name> <init pos:start="17:13" pos:end="17:36">= <expr pos:start="17:15" pos:end="17:36"><call pos:start="17:15" pos:end="17:36"><name pos:start="17:15" pos:end="17:33">macio_common_initfn</name><argument_list pos:start="17:34" pos:end="17:36">(<argument pos:start="17:35" pos:end="17:35"><expr pos:start="17:35" pos:end="17:35"><name pos:start="17:35" pos:end="17:35">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">&lt;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>)</condition> <block pos:start="19:18" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:19">

        <return pos:start="21:9" pos:end="21:19">return <expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:42"><expr pos:start="27:5" pos:end="27:41"><name pos:start="27:5" pos:end="27:14">sysbus_dev</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="27:41"><name pos:start="27:18" pos:end="27:31">SYS_BUS_DEVICE</name><argument_list pos:start="27:32" pos:end="27:41">(<argument pos:start="27:33" pos:end="27:40"><expr pos:start="27:33" pos:end="27:40"><operator pos:start="27:33" pos:end="27:33">&amp;</operator><name pos:start="27:34" pos:end="27:40"><name pos:start="27:34" pos:end="27:34">s</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:40">cuda</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:59"><expr pos:start="29:5" pos:end="29:58"><call pos:start="29:5" pos:end="29:58"><name pos:start="29:5" pos:end="29:22">sysbus_connect_irq</name><argument_list pos:start="29:23" pos:end="29:58">(<argument pos:start="29:24" pos:end="29:33"><expr pos:start="29:24" pos:end="29:33"><name pos:start="29:24" pos:end="29:33">sysbus_dev</name></expr></argument>, <argument pos:start="29:36" pos:end="29:36"><expr pos:start="29:36" pos:end="29:36"><literal type="number" pos:start="29:36" pos:end="29:36">0</literal></expr></argument>, <argument pos:start="29:39" pos:end="29:57"><expr pos:start="29:39" pos:end="29:57"><name pos:start="29:39" pos:end="29:57"><name pos:start="29:39" pos:end="29:40">ns</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:46">irqs</name><index pos:start="29:47" pos:end="29:57">[<expr pos:start="29:48" pos:end="29:56"><name pos:start="29:48" pos:end="29:54">cur_irq</name><operator pos:start="29:55" pos:end="29:56">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">pic_mem</name></name></expr>)</condition> <block pos:start="33:21" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:66">

        <comment type="block" pos:start="35:9" pos:end="35:21">/* OpenPIC */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:66"><expr pos:start="37:9" pos:end="37:65"><call pos:start="37:9" pos:end="37:65"><name pos:start="37:9" pos:end="37:35">memory_region_add_subregion</name><argument_list pos:start="37:36" pos:end="37:65">(<argument pos:start="37:37" pos:end="37:43"><expr pos:start="37:37" pos:end="37:43"><operator pos:start="37:37" pos:end="37:37">&amp;</operator><name pos:start="37:38" pos:end="37:43"><name pos:start="37:38" pos:end="37:38">s</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:43">bar</name></name></expr></argument>, <argument pos:start="37:46" pos:end="37:52"><expr pos:start="37:46" pos:end="37:52"><literal type="number" pos:start="37:46" pos:end="37:52">0x40000</literal></expr></argument>, <argument pos:start="37:55" pos:end="37:64"><expr pos:start="37:55" pos:end="37:64"><name pos:start="37:55" pos:end="37:64"><name pos:start="37:55" pos:end="37:55">s</name><operator pos:start="37:56" pos:end="37:57">-&gt;</operator><name pos:start="37:58" pos:end="37:64">pic_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:19">/* IDE buses */</comment>

    <for pos:start="45:5" pos:end="61:5">for <control pos:start="45:9" pos:end="45:45">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:40"><expr pos:start="45:17" pos:end="45:39"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <call pos:start="45:21" pos:end="45:39"><name pos:start="45:21" pos:end="45:30">ARRAY_SIZE</name><argument_list pos:start="45:31" pos:end="45:39">(<argument pos:start="45:32" pos:end="45:38"><expr pos:start="45:32" pos:end="45:38"><name pos:start="45:32" pos:end="45:38"><name pos:start="45:32" pos:end="45:33">ns</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:38">ide</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="45:42" pos:end="45:44"><expr pos:start="45:42" pos:end="45:44"><name pos:start="45:42" pos:end="45:42">i</name><operator pos:start="45:43" pos:end="45:44">++</operator></expr></incr>)</control> <block pos:start="45:47" pos:end="61:5">{<block_content pos:start="47:9" pos:end="59:9">

        <decl_stmt pos:start="47:9" pos:end="47:44"><decl pos:start="47:9" pos:end="47:43"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">qemu_irq</name></type> <name pos:start="47:18" pos:end="47:21">irq0</name> <init pos:start="47:23" pos:end="47:43">= <expr pos:start="47:25" pos:end="47:43"><name pos:start="47:25" pos:end="47:43"><name pos:start="47:25" pos:end="47:26">ns</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:32">irqs</name><index pos:start="47:33" pos:end="47:43">[<expr pos:start="47:34" pos:end="47:42"><name pos:start="47:34" pos:end="47:40">cur_irq</name><operator pos:start="47:41" pos:end="47:42">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:44"><decl pos:start="49:9" pos:end="49:43"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">qemu_irq</name></type> <name pos:start="49:18" pos:end="49:21">irq1</name> <init pos:start="49:23" pos:end="49:43">= <expr pos:start="49:25" pos:end="49:43"><name pos:start="49:25" pos:end="49:43"><name pos:start="49:25" pos:end="49:26">ns</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:32">irqs</name><index pos:start="49:33" pos:end="49:43">[<expr pos:start="49:34" pos:end="49:42"><name pos:start="49:34" pos:end="49:40">cur_irq</name><operator pos:start="49:41" pos:end="49:42">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:75"><expr pos:start="53:9" pos:end="53:74"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:74"><name pos:start="53:15" pos:end="53:30">macio_initfn_ide</name><argument_list pos:start="53:31" pos:end="53:74">(<argument pos:start="53:32" pos:end="53:32"><expr pos:start="53:32" pos:end="53:32"><name pos:start="53:32" pos:end="53:32">s</name></expr></argument>, <argument pos:start="53:35" pos:end="53:45"><expr pos:start="53:35" pos:end="53:45"><operator pos:start="53:35" pos:end="53:35">&amp;</operator><name pos:start="53:36" pos:end="53:45"><name pos:start="53:36" pos:end="53:37">ns</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:42">ide</name><index pos:start="53:43" pos:end="53:45">[<expr pos:start="53:44" pos:end="53:44"><name pos:start="53:44" pos:end="53:44">i</name></expr>]</index></name></expr></argument>, <argument pos:start="53:48" pos:end="53:51"><expr pos:start="53:48" pos:end="53:51"><name pos:start="53:48" pos:end="53:51">irq0</name></expr></argument>, <argument pos:start="53:54" pos:end="53:57"><expr pos:start="53:54" pos:end="53:57"><name pos:start="53:54" pos:end="53:57">irq1</name></expr></argument>, <argument pos:start="53:60" pos:end="53:73"><expr pos:start="53:60" pos:end="53:73"><literal type="number" pos:start="53:60" pos:end="53:65">0x16</literal> <operator pos:start="53:65" pos:end="53:65">+</operator> <operator pos:start="53:67" pos:end="53:67">(</operator><name pos:start="53:68" pos:end="53:68">i</name> <operator pos:start="53:70" pos:end="53:70">*</operator> <literal type="number" pos:start="53:72" pos:end="53:72">4</literal><operator pos:start="53:73" pos:end="53:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:23">

            <return pos:start="57:13" pos:end="57:23">return <expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="65:5" pos:end="65:15">/* Timer */</comment>

    <expr_stmt pos:start="67:5" pos:end="69:34"><expr pos:start="67:5" pos:end="69:33"><call pos:start="67:5" pos:end="69:33"><name pos:start="67:5" pos:end="67:25">memory_region_init_io</name><argument_list pos:start="67:26" pos:end="69:33">(<argument pos:start="67:27" pos:end="67:38"><expr pos:start="67:27" pos:end="67:38"><name pos:start="67:27" pos:end="67:38">timer_memory</name></expr></argument>, <argument pos:start="67:41" pos:end="67:49"><expr pos:start="67:41" pos:end="67:49"><call pos:start="67:41" pos:end="67:49"><name pos:start="67:41" pos:end="67:46">OBJECT</name><argument_list pos:start="67:47" pos:end="67:49">(<argument pos:start="67:48" pos:end="67:48"><expr pos:start="67:48" pos:end="67:48"><name pos:start="67:48" pos:end="67:48">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:52" pos:end="67:61"><expr pos:start="67:52" pos:end="67:61"><operator pos:start="67:52" pos:end="67:52">&amp;</operator><name pos:start="67:53" pos:end="67:61">timer_ops</name></expr></argument>, <argument pos:start="67:64" pos:end="67:67"><expr pos:start="67:64" pos:end="67:67"><name pos:start="67:64" pos:end="67:67">NULL</name></expr></argument>, <argument pos:start="67:70" pos:end="67:76"><expr pos:start="67:70" pos:end="67:76"><literal type="string" pos:start="67:70" pos:end="67:76">"timer"</literal></expr></argument>,

                          <argument pos:start="69:27" pos:end="69:32"><expr pos:start="69:27" pos:end="69:32"><literal type="number" pos:start="69:27" pos:end="69:32">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:64"><expr pos:start="71:5" pos:end="71:63"><call pos:start="71:5" pos:end="71:63"><name pos:start="71:5" pos:end="71:31">memory_region_add_subregion</name><argument_list pos:start="71:32" pos:end="71:63">(<argument pos:start="71:33" pos:end="71:39"><expr pos:start="71:33" pos:end="71:39"><operator pos:start="71:33" pos:end="71:33">&amp;</operator><name pos:start="71:34" pos:end="71:39"><name pos:start="71:34" pos:end="71:34">s</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:39">bar</name></name></expr></argument>, <argument pos:start="71:42" pos:end="71:48"><expr pos:start="71:42" pos:end="71:48"><literal type="number" pos:start="71:42" pos:end="71:48">0x15000</literal></expr></argument>, <argument pos:start="71:51" pos:end="71:62"><expr pos:start="71:51" pos:end="71:62"><name pos:start="71:51" pos:end="71:62">timer_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
