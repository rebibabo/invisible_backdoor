<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2679.c" pos:tabs="8"><function pos:start="1:1" pos:end="605:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">flush_packet</name><parameter_list pos:start="1:24" pos:end="3:81">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:39">AVFormatContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:62"><decl pos:start="1:47" pos:end="1:62"><type pos:start="1:47" pos:end="1:62"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:62">stream_index</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:36"><decl pos:start="3:26" pos:end="3:36"><type pos:start="3:26" pos:end="3:36"><name pos:start="3:26" pos:end="3:32">int64_t</name></type> <name pos:start="3:34" pos:end="3:36">pts</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:49"><decl pos:start="3:39" pos:end="3:49"><type pos:start="3:39" pos:end="3:49"><name pos:start="3:39" pos:end="3:45">int64_t</name></type> <name pos:start="3:47" pos:end="3:49">dts</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:62"><decl pos:start="3:52" pos:end="3:62"><type pos:start="3:52" pos:end="3:62"><name pos:start="3:52" pos:end="3:58">int64_t</name></type> <name pos:start="3:60" pos:end="3:62">scr</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:80"><decl pos:start="3:65" pos:end="3:80"><type pos:start="3:65" pos:end="3:80"><name pos:start="3:65" pos:end="3:67">int</name></type> <name pos:start="3:69" pos:end="3:80">trailer_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="605:1">{<block_content pos:start="7:5" pos:end="603:40">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MpegMuxContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:38">= <expr pos:start="7:25" pos:end="7:38"><name pos:start="7:25" pos:end="7:38"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:63"><decl pos:start="9:5" pos:end="9:62"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">StreamInfo</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">stream</name> <init pos:start="9:24" pos:end="9:62">= <expr pos:start="9:26" pos:end="9:62"><name pos:start="9:26" pos:end="9:51"><name pos:start="9:26" pos:end="9:28">ctx</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:37">streams</name><index pos:start="9:38" pos:end="9:51">[<expr pos:start="9:39" pos:end="9:50"><name pos:start="9:39" pos:end="9:50">stream_index</name></expr>]</index></name><operator pos:start="9:52" pos:end="9:53">-&gt;</operator><name pos:start="9:54" pos:end="9:62">priv_data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:72"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">size</name></decl>, <decl pos:start="13:15" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:26">payload_size</name></decl>, <decl pos:start="13:29" pos:end="13:37"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:29" pos:end="13:37">startcode</name></decl>, <decl pos:start="13:40" pos:end="13:41"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:40" pos:end="13:41">id</name></decl>, <decl pos:start="13:44" pos:end="13:56"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:44" pos:end="13:56">stuffing_size</name></decl>, <decl pos:start="13:59" pos:end="13:59"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:59" pos:end="13:59">i</name></decl>, <decl pos:start="13:62" pos:end="13:71"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:62" pos:end="13:71">header_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">packet_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:23"><name pos:start="17:13" pos:end="17:18">buffer</name><index pos:start="17:19" pos:end="17:23">[<expr pos:start="17:20" pos:end="17:22"><literal type="number" pos:start="17:20" pos:end="17:22">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:24">zero_trail_bytes</name> <init pos:start="19:26" pos:end="19:28">= <expr pos:start="19:28" pos:end="19:28"><literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:24">pad_packet_bytes</name> <init pos:start="21:26" pos:end="21:28">= <expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">pes_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:20">general_pack</name> <init pos:start="25:22" pos:end="25:24">= <expr pos:start="25:24" pos:end="25:24"><literal type="number" pos:start="25:24" pos:end="25:24">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block" pos:start="25:28" pos:end="25:82">/*"general" pack without data specific to one stream?*/</comment>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:17">nb_frames</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="42:0"><expr pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:6">id</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <name pos:start="31:10" pos:end="31:19"><name pos:start="31:10" pos:end="31:15">stream</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:19">id</name></name></expr>;</expr_stmt>



<cpp:if pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:5"><literal type="number" pos:start="35:5" pos:end="35:5">0</literal></expr></cpp:if>

    printf("packet ID=%2x PTS=%0.3f\n",

           id, pts / 90000.0);

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="45:5" pos:end="45:21"><expr pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:11">buf_ptr</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <name pos:start="45:15" pos:end="45:20">buffer</name></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="175:5"><if pos:start="49:5" pos:end="175:5">if <condition pos:start="49:8" pos:end="49:76">(<expr pos:start="49:9" pos:end="49:75"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:25"><name pos:start="49:10" pos:end="49:10">s</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:25">packet_number</name></name> <operator pos:start="49:27" pos:end="49:27">%</operator> <name pos:start="49:29" pos:end="49:47"><name pos:start="49:29" pos:end="49:29">s</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:47">pack_header_freq</name></name><operator pos:start="49:48" pos:end="49:48">)</operator> <operator pos:start="49:50" pos:end="49:51">==</operator> <literal type="number" pos:start="49:53" pos:end="49:53">0</literal> <operator pos:start="49:55" pos:end="49:56">||</operator> <name pos:start="49:58" pos:end="49:68"><name pos:start="49:58" pos:end="49:58">s</name><operator pos:start="49:59" pos:end="49:60">-&gt;</operator><name pos:start="49:61" pos:end="49:68">last_scr</name></name> <operator pos:start="49:70" pos:end="49:71">!=</operator> <name pos:start="49:73" pos:end="49:75">scr</name></expr>)</condition> <block pos:start="49:78" pos:end="175:5">{<block_content pos:start="53:9" pos:end="173:9">

        <comment type="block" pos:start="51:9" pos:end="51:54">/* output pack and systems header if needed */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:50"><expr pos:start="53:9" pos:end="53:49"><name pos:start="53:9" pos:end="53:12">size</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:49"><name pos:start="53:16" pos:end="53:30">put_pack_header</name><argument_list pos:start="53:31" pos:end="53:49">(<argument pos:start="53:32" pos:end="53:34"><expr pos:start="53:32" pos:end="53:34"><name pos:start="53:32" pos:end="53:34">ctx</name></expr></argument>, <argument pos:start="53:37" pos:end="53:43"><expr pos:start="53:37" pos:end="53:43"><name pos:start="53:37" pos:end="53:43">buf_ptr</name></expr></argument>, <argument pos:start="53:46" pos:end="53:48"><expr pos:start="53:46" pos:end="53:48"><name pos:start="53:46" pos:end="53:48">scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:24"><expr pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:15">buf_ptr</name> <operator pos:start="55:17" pos:end="55:18">+=</operator> <name pos:start="55:20" pos:end="55:23">size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:25"><expr pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:19">last_scr</name></name><operator pos:start="57:20" pos:end="57:20">=</operator> <name pos:start="57:22" pos:end="57:24">scr</name></expr>;</expr_stmt>



        <if_stmt pos:start="61:9" pos:end="173:9"><if pos:start="61:9" pos:end="79:9">if <condition pos:start="61:12" pos:end="61:22">(<expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:21">is_vcd</name></name></expr>)</condition> <block pos:start="61:24" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:13">

            <comment type="block" pos:start="63:13" pos:end="67:66">/* there is exactly one system header for each stream in a VCD MPEG,

               One in the very first video packet and one in the very first

               audio packet (see VCD standard p. IV-7 and IV-8).*/</comment>



            <if_stmt pos:start="71:13" pos:end="77:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="71:41">(<expr pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:37"><name pos:start="71:17" pos:end="71:22">stream</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:37">packet_number</name></name><operator pos:start="71:38" pos:end="71:39">==</operator><literal type="number" pos:start="71:40" pos:end="71:40">0</literal></expr>)</condition> <block pos:start="71:43" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:32">

                <expr_stmt pos:start="73:17" pos:end="73:59"><expr pos:start="73:17" pos:end="73:58"><name pos:start="73:17" pos:end="73:20">size</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:58"><name pos:start="73:24" pos:end="73:40">put_system_header</name><argument_list pos:start="73:41" pos:end="73:58">(<argument pos:start="73:42" pos:end="73:44"><expr pos:start="73:42" pos:end="73:44"><name pos:start="73:42" pos:end="73:44">ctx</name></expr></argument>, <argument pos:start="73:47" pos:end="73:53"><expr pos:start="73:47" pos:end="73:53"><name pos:start="73:47" pos:end="73:53">buf_ptr</name></expr></argument>, <argument pos:start="73:56" pos:end="73:57"><expr pos:start="73:56" pos:end="73:57"><name pos:start="73:56" pos:end="73:57">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:32"><expr pos:start="75:17" pos:end="75:31"><name pos:start="75:17" pos:end="75:23">buf_ptr</name> <operator pos:start="75:25" pos:end="75:26">+=</operator> <name pos:start="75:28" pos:end="75:31">size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="163:9">else if <condition pos:start="79:19" pos:end="79:29">(<expr pos:start="79:20" pos:end="79:28"><name pos:start="79:20" pos:end="79:28"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:28">is_dvd</name></name></expr>)</condition> <block pos:start="79:31" pos:end="163:9">{<block_content pos:start="81:13" pos:end="161:13">

            <if_stmt pos:start="81:13" pos:end="161:13"><if pos:start="81:13" pos:end="161:13">if <condition pos:start="81:16" pos:end="81:62">(<expr pos:start="81:17" pos:end="81:61"><name pos:start="81:17" pos:end="81:36"><name pos:start="81:17" pos:end="81:22">stream</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:36">align_iframe</name></name> <operator pos:start="81:38" pos:end="81:39">||</operator> <name pos:start="81:41" pos:end="81:56"><name pos:start="81:41" pos:end="81:41">s</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:56">packet_number</name></name> <operator pos:start="81:58" pos:end="81:59">==</operator> <literal type="number" pos:start="81:61" pos:end="81:61">0</literal></expr>)</condition><block pos:start="81:63" pos:end="161:13">{<block_content pos:start="83:17" pos:end="159:17">

                <decl_stmt pos:start="83:17" pos:end="83:67"><decl pos:start="83:17" pos:end="83:66"><type pos:start="83:17" pos:end="83:19"><name pos:start="83:17" pos:end="83:19">int</name></type> <name pos:start="83:21" pos:end="83:37">PES_bytes_to_fill</name> <init pos:start="83:39" pos:end="83:66">= <expr pos:start="83:41" pos:end="83:66"><name pos:start="83:41" pos:end="83:54"><name pos:start="83:41" pos:end="83:41">s</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:54">packet_size</name></name> <operator pos:start="83:56" pos:end="83:56">-</operator> <name pos:start="83:58" pos:end="83:61">size</name> <operator pos:start="83:63" pos:end="83:63">-</operator> <literal type="number" pos:start="83:65" pos:end="83:66">10</literal></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="87:17" pos:end="97:17"><if pos:start="87:17" pos:end="97:17">if <condition pos:start="87:20" pos:end="87:42">(<expr pos:start="87:21" pos:end="87:41"><name pos:start="87:21" pos:end="87:23">pts</name> <operator pos:start="87:25" pos:end="87:26">!=</operator> <name pos:start="87:28" pos:end="87:41">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="87:44" pos:end="97:17">{<block_content pos:start="89:21" pos:end="95:47">

                    <if_stmt pos:start="89:21" pos:end="95:47"><if pos:start="89:21" pos:end="91:51">if <condition pos:start="89:24" pos:end="89:35">(<expr pos:start="89:25" pos:end="89:34"><name pos:start="89:25" pos:end="89:27">dts</name> <operator pos:start="89:29" pos:end="89:30">!=</operator> <name pos:start="89:32" pos:end="89:34">pts</name></expr>)</condition><block type="pseudo" pos:start="91:25" pos:end="91:51"><block_content pos:start="91:25" pos:end="91:51">

                        <expr_stmt pos:start="91:25" pos:end="91:51"><expr pos:start="91:25" pos:end="91:50"><name pos:start="91:25" pos:end="91:41">PES_bytes_to_fill</name> <operator pos:start="91:43" pos:end="91:44">-=</operator> <literal type="number" pos:start="91:46" pos:end="91:48">5</literal> <operator pos:start="91:48" pos:end="91:48">+</operator> <literal type="number" pos:start="91:50" pos:end="91:50">5</literal></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="93:21" pos:end="95:47">else<block type="pseudo" pos:start="95:25" pos:end="95:47"><block_content pos:start="95:25" pos:end="95:47">

                        <expr_stmt pos:start="95:25" pos:end="95:47"><expr pos:start="95:25" pos:end="95:46"><name pos:start="95:25" pos:end="95:41">PES_bytes_to_fill</name> <operator pos:start="95:43" pos:end="95:44">-=</operator> <literal type="number" pos:start="95:46" pos:end="95:46">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="101:17" pos:end="159:17"><if pos:start="101:17" pos:end="155:17">if <condition pos:start="101:20" pos:end="101:74">(<expr pos:start="101:21" pos:end="101:73"><name pos:start="101:21" pos:end="101:43"><name pos:start="101:21" pos:end="101:26">stream</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:43">bytes_to_iframe</name></name> <operator pos:start="101:45" pos:end="101:46">==</operator> <literal type="number" pos:start="101:48" pos:end="101:48">0</literal> <operator pos:start="101:50" pos:end="101:51">||</operator> <name pos:start="101:53" pos:end="101:68"><name pos:start="101:53" pos:end="101:53">s</name><operator pos:start="101:54" pos:end="101:55">-&gt;</operator><name pos:start="101:56" pos:end="101:68">packet_number</name></name> <operator pos:start="101:70" pos:end="101:71">==</operator> <literal type="number" pos:start="101:73" pos:end="101:73">0</literal></expr>)</condition> <block pos:start="101:76" pos:end="155:17">{<block_content pos:start="103:21" pos:end="151:36">

                    <expr_stmt pos:start="103:21" pos:end="103:62"><expr pos:start="103:21" pos:end="103:61"><name pos:start="103:21" pos:end="103:24">size</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <call pos:start="103:28" pos:end="103:61"><name pos:start="103:28" pos:end="103:44">put_system_header</name><argument_list pos:start="103:45" pos:end="103:61">(<argument pos:start="103:46" pos:end="103:48"><expr pos:start="103:46" pos:end="103:48"><name pos:start="103:46" pos:end="103:48">ctx</name></expr></argument>, <argument pos:start="103:51" pos:end="103:57"><expr pos:start="103:51" pos:end="103:57"><name pos:start="103:51" pos:end="103:57">buf_ptr</name></expr></argument>, <argument pos:start="103:60" pos:end="103:60"><expr pos:start="103:60" pos:end="103:60"><literal type="number" pos:start="103:60" pos:end="103:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:36"><expr pos:start="105:21" pos:end="105:35"><name pos:start="105:21" pos:end="105:27">buf_ptr</name> <operator pos:start="105:29" pos:end="105:30">+=</operator> <name pos:start="105:32" pos:end="105:35">size</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:44"><expr pos:start="107:21" pos:end="107:43"><name pos:start="107:21" pos:end="107:24">size</name> <operator pos:start="107:26" pos:end="107:26">=</operator> <name pos:start="107:28" pos:end="107:34">buf_ptr</name> <operator pos:start="107:36" pos:end="107:36">-</operator> <name pos:start="107:38" pos:end="107:43">buffer</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:54"><expr pos:start="109:21" pos:end="109:53"><call pos:start="109:21" pos:end="109:53"><name pos:start="109:21" pos:end="109:30">put_buffer</name><argument_list pos:start="109:31" pos:end="109:53">(<argument pos:start="109:32" pos:end="109:38"><expr pos:start="109:32" pos:end="109:38"><name pos:start="109:32" pos:end="109:38"><name pos:start="109:32" pos:end="109:34">ctx</name><operator pos:start="109:35" pos:end="109:36">-&gt;</operator><name pos:start="109:37" pos:end="109:38">pb</name></name></expr></argument>, <argument pos:start="109:41" pos:end="109:46"><expr pos:start="109:41" pos:end="109:46"><name pos:start="109:41" pos:end="109:46">buffer</name></expr></argument>, <argument pos:start="109:49" pos:end="109:52"><expr pos:start="109:49" pos:end="109:52"><name pos:start="109:49" pos:end="109:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="113:21" pos:end="113:56"><expr pos:start="113:21" pos:end="113:55"><call pos:start="113:21" pos:end="113:55"><name pos:start="113:21" pos:end="113:28">put_be32</name><argument_list pos:start="113:29" pos:end="113:55">(<argument pos:start="113:30" pos:end="113:36"><expr pos:start="113:30" pos:end="113:36"><name pos:start="113:30" pos:end="113:36"><name pos:start="113:30" pos:end="113:32">ctx</name><operator pos:start="113:33" pos:end="113:34">-&gt;</operator><name pos:start="113:35" pos:end="113:36">pb</name></name></expr></argument>, <argument pos:start="113:39" pos:end="113:54"><expr pos:start="113:39" pos:end="113:54"><name pos:start="113:39" pos:end="113:54">PRIVATE_STREAM_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:46"><expr pos:start="115:21" pos:end="115:45"><call pos:start="115:21" pos:end="115:45"><name pos:start="115:21" pos:end="115:28">put_be16</name><argument_list pos:start="115:29" pos:end="115:45">(<argument pos:start="115:30" pos:end="115:36"><expr pos:start="115:30" pos:end="115:36"><name pos:start="115:30" pos:end="115:36"><name pos:start="115:30" pos:end="115:32">ctx</name><operator pos:start="115:33" pos:end="115:34">-&gt;</operator><name pos:start="115:35" pos:end="115:36">pb</name></name></expr></argument>, <argument pos:start="115:39" pos:end="115:44"><expr pos:start="115:39" pos:end="115:44"><literal type="number" pos:start="115:39" pos:end="115:44">0x03d4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="line" pos:start="115:56" pos:end="115:64">// length</comment>

                    <expr_stmt pos:start="117:21" pos:end="117:44"><expr pos:start="117:21" pos:end="117:43"><call pos:start="117:21" pos:end="117:43"><name pos:start="117:21" pos:end="117:28">put_byte</name><argument_list pos:start="117:29" pos:end="117:43">(<argument pos:start="117:30" pos:end="117:36"><expr pos:start="117:30" pos:end="117:36"><name pos:start="117:30" pos:end="117:36"><name pos:start="117:30" pos:end="117:32">ctx</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:36">pb</name></name></expr></argument>, <argument pos:start="117:39" pos:end="117:42"><expr pos:start="117:39" pos:end="117:42"><literal type="number" pos:start="117:39" pos:end="117:42">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line" pos:start="117:56" pos:end="117:78">// substream ID, 00=PCI</comment>

                    <for pos:start="119:21" pos:end="121:48">for <control pos:start="119:25" pos:end="119:45">(<init pos:start="119:26" pos:end="119:31"><expr pos:start="119:26" pos:end="119:30"><name pos:start="119:26" pos:end="119:26">i</name> <operator pos:start="119:28" pos:end="119:28">=</operator> <literal type="number" pos:start="119:30" pos:end="119:30">0</literal></expr>;</init> <condition pos:start="119:33" pos:end="119:40"><expr pos:start="119:33" pos:end="119:39"><name pos:start="119:33" pos:end="119:33">i</name> <operator pos:start="119:35" pos:end="119:35">&lt;</operator> <literal type="number" pos:start="119:37" pos:end="119:39">979</literal></expr>;</condition> <incr pos:start="119:42" pos:end="119:44"><expr pos:start="119:42" pos:end="119:44"><name pos:start="119:42" pos:end="119:42">i</name><operator pos:start="119:43" pos:end="119:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="121:25" pos:end="121:48"><block_content pos:start="121:25" pos:end="121:48">

                        <expr_stmt pos:start="121:25" pos:end="121:48"><expr pos:start="121:25" pos:end="121:47"><call pos:start="121:25" pos:end="121:47"><name pos:start="121:25" pos:end="121:32">put_byte</name><argument_list pos:start="121:33" pos:end="121:47">(<argument pos:start="121:34" pos:end="121:40"><expr pos:start="121:34" pos:end="121:40"><name pos:start="121:34" pos:end="121:40"><name pos:start="121:34" pos:end="121:36">ctx</name><operator pos:start="121:37" pos:end="121:38">-&gt;</operator><name pos:start="121:39" pos:end="121:40">pb</name></name></expr></argument>, <argument pos:start="121:43" pos:end="121:46"><expr pos:start="121:43" pos:end="121:46"><literal type="number" pos:start="121:43" pos:end="121:46">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



                    <expr_stmt pos:start="125:21" pos:end="125:56"><expr pos:start="125:21" pos:end="125:55"><call pos:start="125:21" pos:end="125:55"><name pos:start="125:21" pos:end="125:28">put_be32</name><argument_list pos:start="125:29" pos:end="125:55">(<argument pos:start="125:30" pos:end="125:36"><expr pos:start="125:30" pos:end="125:36"><name pos:start="125:30" pos:end="125:36"><name pos:start="125:30" pos:end="125:32">ctx</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:36">pb</name></name></expr></argument>, <argument pos:start="125:39" pos:end="125:54"><expr pos:start="125:39" pos:end="125:54"><name pos:start="125:39" pos:end="125:54">PRIVATE_STREAM_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="127:21" pos:end="127:46"><expr pos:start="127:21" pos:end="127:45"><call pos:start="127:21" pos:end="127:45"><name pos:start="127:21" pos:end="127:28">put_be16</name><argument_list pos:start="127:29" pos:end="127:45">(<argument pos:start="127:30" pos:end="127:36"><expr pos:start="127:30" pos:end="127:36"><name pos:start="127:30" pos:end="127:36"><name pos:start="127:30" pos:end="127:32">ctx</name><operator pos:start="127:33" pos:end="127:34">-&gt;</operator><name pos:start="127:35" pos:end="127:36">pb</name></name></expr></argument>, <argument pos:start="127:39" pos:end="127:44"><expr pos:start="127:39" pos:end="127:44"><literal type="number" pos:start="127:39" pos:end="127:44">0x03fa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="line" pos:start="127:56" pos:end="127:64">// length</comment>

                    <expr_stmt pos:start="129:21" pos:end="129:44"><expr pos:start="129:21" pos:end="129:43"><call pos:start="129:21" pos:end="129:43"><name pos:start="129:21" pos:end="129:28">put_byte</name><argument_list pos:start="129:29" pos:end="129:43">(<argument pos:start="129:30" pos:end="129:36"><expr pos:start="129:30" pos:end="129:36"><name pos:start="129:30" pos:end="129:36"><name pos:start="129:30" pos:end="129:32">ctx</name><operator pos:start="129:33" pos:end="129:34">-&gt;</operator><name pos:start="129:35" pos:end="129:36">pb</name></name></expr></argument>, <argument pos:start="129:39" pos:end="129:42"><expr pos:start="129:39" pos:end="129:42"><literal type="number" pos:start="129:39" pos:end="129:42">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line" pos:start="129:56" pos:end="129:78">// substream ID, 01=DSI</comment>

                    <for pos:start="131:21" pos:end="133:48">for <control pos:start="131:25" pos:end="131:46">(<init pos:start="131:26" pos:end="131:31"><expr pos:start="131:26" pos:end="131:30"><name pos:start="131:26" pos:end="131:26">i</name> <operator pos:start="131:28" pos:end="131:28">=</operator> <literal type="number" pos:start="131:30" pos:end="131:30">0</literal></expr>;</init> <condition pos:start="131:33" pos:end="131:41"><expr pos:start="131:33" pos:end="131:40"><name pos:start="131:33" pos:end="131:33">i</name> <operator pos:start="131:35" pos:end="131:35">&lt;</operator> <literal type="number" pos:start="131:37" pos:end="131:40">1017</literal></expr>;</condition> <incr pos:start="131:43" pos:end="131:45"><expr pos:start="131:43" pos:end="131:45"><name pos:start="131:43" pos:end="131:43">i</name><operator pos:start="131:44" pos:end="131:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="133:25" pos:end="133:48"><block_content pos:start="133:25" pos:end="133:48">

                        <expr_stmt pos:start="133:25" pos:end="133:48"><expr pos:start="133:25" pos:end="133:47"><call pos:start="133:25" pos:end="133:47"><name pos:start="133:25" pos:end="133:32">put_byte</name><argument_list pos:start="133:33" pos:end="133:47">(<argument pos:start="133:34" pos:end="133:40"><expr pos:start="133:34" pos:end="133:40"><name pos:start="133:34" pos:end="133:40"><name pos:start="133:34" pos:end="133:36">ctx</name><operator pos:start="133:37" pos:end="133:38">-&gt;</operator><name pos:start="133:39" pos:end="133:40">pb</name></name></expr></argument>, <argument pos:start="133:43" pos:end="133:46"><expr pos:start="133:43" pos:end="133:46"><literal type="number" pos:start="133:43" pos:end="133:46">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



                    <expr_stmt pos:start="137:21" pos:end="137:43"><expr pos:start="137:21" pos:end="137:42"><call pos:start="137:21" pos:end="137:42"><name pos:start="137:21" pos:end="137:26">memset</name><argument_list pos:start="137:27" pos:end="137:42">(<argument pos:start="137:28" pos:end="137:33"><expr pos:start="137:28" pos:end="137:33"><name pos:start="137:28" pos:end="137:33">buffer</name></expr></argument>, <argument pos:start="137:36" pos:end="137:36"><expr pos:start="137:36" pos:end="137:36"><literal type="number" pos:start="137:36" pos:end="137:36">0</literal></expr></argument>, <argument pos:start="137:39" pos:end="137:41"><expr pos:start="137:39" pos:end="137:41"><literal type="number" pos:start="137:39" pos:end="137:41">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="139:21" pos:end="139:37"><expr pos:start="139:21" pos:end="139:36"><name pos:start="139:21" pos:end="139:27">buf_ptr</name> <operator pos:start="139:29" pos:end="139:29">=</operator> <name pos:start="139:31" pos:end="139:36">buffer</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:39"><expr pos:start="141:21" pos:end="141:38"><name pos:start="141:21" pos:end="141:36"><name pos:start="141:21" pos:end="141:21">s</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:36">packet_number</name></name><operator pos:start="141:37" pos:end="141:38">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="143:21" pos:end="143:45"><expr pos:start="143:21" pos:end="143:44"><name pos:start="143:21" pos:end="143:40"><name pos:start="143:21" pos:end="143:26">stream</name><operator pos:start="143:27" pos:end="143:28">-&gt;</operator><name pos:start="143:29" pos:end="143:40">align_iframe</name></name> <operator pos:start="143:42" pos:end="143:42">=</operator> <literal type="number" pos:start="143:44" pos:end="143:44">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="145:21" pos:end="145:71"><expr pos:start="145:21" pos:end="145:70"><name pos:start="145:21" pos:end="145:23">scr</name> <operator pos:start="145:25" pos:end="145:26">+=</operator> <name pos:start="145:28" pos:end="145:41"><name pos:start="145:28" pos:end="145:28">s</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:41">packet_size</name></name><operator pos:start="145:42" pos:end="145:42">*</operator><literal type="number" pos:start="145:43" pos:end="145:49">90000LL</literal> <operator pos:start="145:51" pos:end="145:51">/</operator> <operator pos:start="145:53" pos:end="145:53">(</operator><name pos:start="145:54" pos:end="145:64"><name pos:start="145:54" pos:end="145:54">s</name><operator pos:start="145:55" pos:end="145:56">-&gt;</operator><name pos:start="145:57" pos:end="145:64">mux_rate</name></name><operator pos:start="145:65" pos:end="145:65">*</operator><literal type="number" pos:start="145:66" pos:end="145:69">50LL</literal><operator pos:start="145:70" pos:end="145:70">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="145:73" pos:end="145:123">//FIXME rounding and first few bytes of each packet</comment>

                    <expr_stmt pos:start="147:21" pos:end="147:62"><expr pos:start="147:21" pos:end="147:61"><name pos:start="147:21" pos:end="147:24">size</name> <operator pos:start="147:26" pos:end="147:26">=</operator> <call pos:start="147:28" pos:end="147:61"><name pos:start="147:28" pos:end="147:42">put_pack_header</name><argument_list pos:start="147:43" pos:end="147:61">(<argument pos:start="147:44" pos:end="147:46"><expr pos:start="147:44" pos:end="147:46"><name pos:start="147:44" pos:end="147:46">ctx</name></expr></argument>, <argument pos:start="147:49" pos:end="147:55"><expr pos:start="147:49" pos:end="147:55"><name pos:start="147:49" pos:end="147:55">buf_ptr</name></expr></argument>, <argument pos:start="147:58" pos:end="147:60"><expr pos:start="147:58" pos:end="147:60"><name pos:start="147:58" pos:end="147:60">scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:37"><expr pos:start="149:21" pos:end="149:36"><name pos:start="149:21" pos:end="149:31"><name pos:start="149:21" pos:end="149:21">s</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:31">last_scr</name></name><operator pos:start="149:32" pos:end="149:32">=</operator> <name pos:start="149:34" pos:end="149:36">scr</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="151:21" pos:end="151:36"><expr pos:start="151:21" pos:end="151:35"><name pos:start="151:21" pos:end="151:27">buf_ptr</name> <operator pos:start="151:29" pos:end="151:30">+=</operator> <name pos:start="151:32" pos:end="151:35">size</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="153:21" pos:end="153:35">/* GOP Start */</comment>

                </block_content>}</block></if> <if type="elseif" pos:start="155:19" pos:end="159:17">else if <condition pos:start="155:27" pos:end="155:71">(<expr pos:start="155:28" pos:end="155:70"><name pos:start="155:28" pos:end="155:50"><name pos:start="155:28" pos:end="155:33">stream</name><operator pos:start="155:34" pos:end="155:35">-&gt;</operator><name pos:start="155:36" pos:end="155:50">bytes_to_iframe</name></name> <operator pos:start="155:52" pos:end="155:52">&lt;</operator> <name pos:start="155:54" pos:end="155:70">PES_bytes_to_fill</name></expr>)</condition> <block pos:start="155:73" pos:end="159:17">{<block_content pos:start="157:21" pos:end="157:83">

                    <expr_stmt pos:start="157:21" pos:end="157:83"><expr pos:start="157:21" pos:end="157:82"><name pos:start="157:21" pos:end="157:36">pad_packet_bytes</name> <operator pos:start="157:38" pos:end="157:38">=</operator> <name pos:start="157:40" pos:end="157:56">PES_bytes_to_fill</name> <operator pos:start="157:58" pos:end="157:58">-</operator> <name pos:start="157:60" pos:end="157:82"><name pos:start="157:60" pos:end="157:65">stream</name><operator pos:start="157:66" pos:end="157:67">-&gt;</operator><name pos:start="157:68" pos:end="157:82">bytes_to_iframe</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="163:11" pos:end="173:9">else <block pos:start="163:16" pos:end="173:9">{<block_content pos:start="165:13" pos:end="171:13">

            <if_stmt pos:start="165:13" pos:end="171:13"><if pos:start="165:13" pos:end="171:13">if <condition pos:start="165:16" pos:end="165:64">(<expr pos:start="165:17" pos:end="165:63"><operator pos:start="165:17" pos:end="165:17">(</operator><name pos:start="165:18" pos:end="165:33"><name pos:start="165:18" pos:end="165:18">s</name><operator pos:start="165:19" pos:end="165:20">-&gt;</operator><name pos:start="165:21" pos:end="165:33">packet_number</name></name> <operator pos:start="165:35" pos:end="165:35">%</operator> <name pos:start="165:37" pos:end="165:57"><name pos:start="165:37" pos:end="165:37">s</name><operator pos:start="165:38" pos:end="165:39">-&gt;</operator><name pos:start="165:40" pos:end="165:57">system_header_freq</name></name><operator pos:start="165:58" pos:end="165:58">)</operator> <operator pos:start="165:60" pos:end="165:61">==</operator> <literal type="number" pos:start="165:63" pos:end="165:63">0</literal></expr>)</condition> <block pos:start="165:66" pos:end="171:13">{<block_content pos:start="167:17" pos:end="169:32">

                <expr_stmt pos:start="167:17" pos:end="167:58"><expr pos:start="167:17" pos:end="167:57"><name pos:start="167:17" pos:end="167:20">size</name> <operator pos:start="167:22" pos:end="167:22">=</operator> <call pos:start="167:24" pos:end="167:57"><name pos:start="167:24" pos:end="167:40">put_system_header</name><argument_list pos:start="167:41" pos:end="167:57">(<argument pos:start="167:42" pos:end="167:44"><expr pos:start="167:42" pos:end="167:44"><name pos:start="167:42" pos:end="167:44">ctx</name></expr></argument>, <argument pos:start="167:47" pos:end="167:53"><expr pos:start="167:47" pos:end="167:53"><name pos:start="167:47" pos:end="167:53">buf_ptr</name></expr></argument>, <argument pos:start="167:56" pos:end="167:56"><expr pos:start="167:56" pos:end="167:56"><literal type="number" pos:start="167:56" pos:end="167:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:32"><expr pos:start="169:17" pos:end="169:31"><name pos:start="169:17" pos:end="169:23">buf_ptr</name> <operator pos:start="169:25" pos:end="169:26">+=</operator> <name pos:start="169:28" pos:end="169:31">size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:28"><expr pos:start="177:5" pos:end="177:27"><name pos:start="177:5" pos:end="177:8">size</name> <operator pos:start="177:10" pos:end="177:10">=</operator> <name pos:start="177:12" pos:end="177:18">buf_ptr</name> <operator pos:start="177:20" pos:end="177:20">-</operator> <name pos:start="177:22" pos:end="177:27">buffer</name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:38"><expr pos:start="179:5" pos:end="179:37"><call pos:start="179:5" pos:end="179:37"><name pos:start="179:5" pos:end="179:14">put_buffer</name><argument_list pos:start="179:15" pos:end="179:37">(<argument pos:start="179:16" pos:end="179:22"><expr pos:start="179:16" pos:end="179:22"><name pos:start="179:16" pos:end="179:22"><name pos:start="179:16" pos:end="179:18">ctx</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:22">pb</name></name></expr></argument>, <argument pos:start="179:25" pos:end="179:30"><expr pos:start="179:25" pos:end="179:30"><name pos:start="179:25" pos:end="179:30">buffer</name></expr></argument>, <argument pos:start="179:33" pos:end="179:36"><expr pos:start="179:33" pos:end="179:36"><name pos:start="179:33" pos:end="179:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:40"><expr pos:start="183:5" pos:end="183:39"><name pos:start="183:5" pos:end="183:15">packet_size</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <name pos:start="183:19" pos:end="183:32"><name pos:start="183:19" pos:end="183:19">s</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:32">packet_size</name></name> <operator pos:start="183:34" pos:end="183:34">-</operator> <name pos:start="183:36" pos:end="183:39">size</name></expr>;</expr_stmt>



    <if_stmt pos:start="187:5" pos:end="193:31"><if pos:start="187:5" pos:end="193:31">if <condition pos:start="187:8" pos:end="187:36">(<expr pos:start="187:9" pos:end="187:35"><name pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:17">is_vcd</name></name> <operator pos:start="187:19" pos:end="187:20">&amp;&amp;</operator> <name pos:start="187:22" pos:end="187:23">id</name> <operator pos:start="187:25" pos:end="187:26">==</operator> <name pos:start="187:28" pos:end="187:35">AUDIO_ID</name></expr>)</condition><block type="pseudo" pos:start="193:9" pos:end="193:31"><block_content pos:start="193:9" pos:end="193:31">

        <comment type="block" pos:start="189:9" pos:end="191:52">/* The VCD standard demands that 20 zero bytes follow

           each audio pack (see standard p. IV-8).*/</comment>

        <expr_stmt pos:start="193:9" pos:end="193:31"><expr pos:start="193:9" pos:end="193:30"><name pos:start="193:9" pos:end="193:24">zero_trail_bytes</name> <operator pos:start="193:26" pos:end="193:27">+=</operator> <literal type="number" pos:start="193:29" pos:end="193:30">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="197:5" pos:end="219:5"><if pos:start="197:5" pos:end="219:5">if <condition pos:start="197:8" pos:end="199:47">(<expr pos:start="197:9" pos:end="199:46"><operator pos:start="197:9" pos:end="197:9">(</operator><name pos:start="197:10" pos:end="197:18"><name pos:start="197:10" pos:end="197:10">s</name><operator pos:start="197:11" pos:end="197:12">-&gt;</operator><name pos:start="197:13" pos:end="197:18">is_vcd</name></name> <operator pos:start="197:20" pos:end="197:21">&amp;&amp;</operator> <name pos:start="197:23" pos:end="197:43"><name pos:start="197:23" pos:end="197:28">stream</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:43">packet_number</name></name><operator pos:start="197:44" pos:end="197:45">==</operator><literal type="number" pos:start="197:46" pos:end="197:46">0</literal><operator pos:start="197:47" pos:end="197:47">)</operator>

        <operator pos:start="199:9" pos:end="199:10">||</operator> <operator pos:start="199:12" pos:end="199:12">(</operator><name pos:start="199:13" pos:end="199:22"><name pos:start="199:13" pos:end="199:13">s</name><operator pos:start="199:14" pos:end="199:15">-&gt;</operator><name pos:start="199:16" pos:end="199:22">is_svcd</name></name> <operator pos:start="199:24" pos:end="199:25">&amp;&amp;</operator> <name pos:start="199:27" pos:end="199:42"><name pos:start="199:27" pos:end="199:27">s</name><operator pos:start="199:28" pos:end="199:29">-&gt;</operator><name pos:start="199:30" pos:end="199:42">packet_number</name></name><operator pos:start="199:43" pos:end="199:44">==</operator><literal type="number" pos:start="199:45" pos:end="199:45">0</literal><operator pos:start="199:46" pos:end="199:46">)</operator></expr>)</condition> <block pos:start="199:49" pos:end="219:5">{<block_content pos:start="213:9" pos:end="217:58">

        <comment type="block" pos:start="201:9" pos:end="207:21">/* for VCD the first pack of each stream contains only the pack header,

           the system header and lots of padding (see VCD standard p. IV-6).

           In the case of an audio pack, 20 zero bytes are also added at

           the end.*/</comment>

        <comment type="block" pos:start="209:9" pos:end="211:60">/* For SVCD we fill the very first pack to increase compatibility with

           some DVD players. Not mandated by the standard.*/</comment>

        <if_stmt pos:start="213:9" pos:end="215:29"><if pos:start="213:9" pos:end="215:29">if <condition pos:start="213:12" pos:end="213:23">(<expr pos:start="213:13" pos:end="213:22"><name pos:start="213:13" pos:end="213:22"><name pos:start="213:13" pos:end="213:13">s</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:22">is_svcd</name></name></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:29"><block_content pos:start="215:13" pos:end="215:29">

            <expr_stmt pos:start="215:13" pos:end="215:29"><expr pos:start="215:13" pos:end="215:28"><name pos:start="215:13" pos:end="215:24">general_pack</name> <operator pos:start="215:26" pos:end="215:26">=</operator> <literal type="number" pos:start="215:28" pos:end="215:28">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>    <comment type="block" pos:start="215:34" pos:end="215:97">/* the system header refers to both streams and no stream data*/</comment>

        <expr_stmt pos:start="217:9" pos:end="217:58"><expr pos:start="217:9" pos:end="217:57"><name pos:start="217:9" pos:end="217:24">pad_packet_bytes</name> <operator pos:start="217:26" pos:end="217:26">=</operator> <name pos:start="217:28" pos:end="217:38">packet_size</name> <operator pos:start="217:40" pos:end="217:40">-</operator> <name pos:start="217:42" pos:end="217:57">zero_trail_bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:55"><expr pos:start="223:5" pos:end="223:54"><name pos:start="223:5" pos:end="223:15">packet_size</name> <operator pos:start="223:17" pos:end="223:18">-=</operator> <name pos:start="223:20" pos:end="223:35">pad_packet_bytes</name> <operator pos:start="223:37" pos:end="223:37">+</operator> <name pos:start="223:39" pos:end="223:54">zero_trail_bytes</name></expr>;</expr_stmt>



    <if_stmt pos:start="227:5" pos:end="567:5"><if pos:start="227:5" pos:end="561:5">if <condition pos:start="227:8" pos:end="227:24">(<expr pos:start="227:9" pos:end="227:23"><name pos:start="227:9" pos:end="227:19">packet_size</name> <operator pos:start="227:21" pos:end="227:21">&gt;</operator> <literal type="number" pos:start="227:23" pos:end="227:23">0</literal></expr>)</condition> <block pos:start="227:26" pos:end="561:5">{<block_content pos:start="233:9" pos:end="559:64">



        <comment type="block" pos:start="231:9" pos:end="231:32">/* packet header size */</comment>

        <expr_stmt pos:start="233:9" pos:end="233:25"><expr pos:start="233:9" pos:end="233:24"><name pos:start="233:9" pos:end="233:19">packet_size</name> <operator pos:start="233:21" pos:end="233:22">-=</operator> <literal type="number" pos:start="233:24" pos:end="233:24">6</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="237:9" pos:end="237:27">/* packet header */</comment>

        <if_stmt pos:start="239:9" pos:end="253:9"><if pos:start="239:9" pos:end="249:9">if <condition pos:start="239:12" pos:end="239:24">(<expr pos:start="239:13" pos:end="239:23"><name pos:start="239:13" pos:end="239:23"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:23">is_mpeg2</name></name></expr>)</condition> <block pos:start="239:26" pos:end="249:9">{<block_content pos:start="241:13" pos:end="247:28">

            <expr_stmt pos:start="241:13" pos:end="241:27"><expr pos:start="241:13" pos:end="241:26"><name pos:start="241:13" pos:end="241:22">header_len</name> <operator pos:start="241:24" pos:end="241:24">=</operator> <literal type="number" pos:start="241:26" pos:end="241:26">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="243:13" pos:end="245:32"><if pos:start="243:13" pos:end="245:32">if <condition pos:start="243:16" pos:end="243:41">(<expr pos:start="243:17" pos:end="243:40"><name pos:start="243:17" pos:end="243:37"><name pos:start="243:17" pos:end="243:22">stream</name><operator pos:start="243:23" pos:end="243:24">-&gt;</operator><name pos:start="243:25" pos:end="243:37">packet_number</name></name><operator pos:start="243:38" pos:end="243:39">==</operator><literal type="number" pos:start="243:40" pos:end="243:40">0</literal></expr>)</condition><block type="pseudo" pos:start="245:17" pos:end="245:32"><block_content pos:start="245:17" pos:end="245:32">

                <expr_stmt pos:start="245:17" pos:end="245:32"><expr pos:start="245:17" pos:end="245:31"><name pos:start="245:17" pos:end="245:26">header_len</name> <operator pos:start="245:28" pos:end="245:29">+=</operator> <literal type="number" pos:start="245:31" pos:end="245:31">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="245:34" pos:end="245:52">/* PES extension */</comment>

            <expr_stmt pos:start="247:13" pos:end="247:28"><expr pos:start="247:13" pos:end="247:27"><name pos:start="247:13" pos:end="247:22">header_len</name> <operator pos:start="247:24" pos:end="247:25">+=</operator> <literal type="number" pos:start="247:27" pos:end="247:27">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="247:30" pos:end="247:59">/* obligatory stuffing byte */</comment>

        </block_content>}</block></if> <else pos:start="249:11" pos:end="253:9">else <block pos:start="249:16" pos:end="253:9">{<block_content pos:start="251:13" pos:end="251:27">

            <expr_stmt pos:start="251:13" pos:end="251:27"><expr pos:start="251:13" pos:end="251:26"><name pos:start="251:13" pos:end="251:22">header_len</name> <operator pos:start="251:24" pos:end="251:24">=</operator> <literal type="number" pos:start="251:26" pos:end="251:26">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="255:9" pos:end="271:9"><if pos:start="255:9" pos:end="265:9">if <condition pos:start="255:12" pos:end="255:34">(<expr pos:start="255:13" pos:end="255:33"><name pos:start="255:13" pos:end="255:15">pts</name> <operator pos:start="255:17" pos:end="255:18">!=</operator> <name pos:start="255:20" pos:end="255:33">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="255:36" pos:end="265:9">{<block_content pos:start="257:13" pos:end="263:32">

            <if_stmt pos:start="257:13" pos:end="263:32"><if pos:start="257:13" pos:end="259:36">if <condition pos:start="257:16" pos:end="257:27">(<expr pos:start="257:17" pos:end="257:26"><name pos:start="257:17" pos:end="257:19">dts</name> <operator pos:start="257:21" pos:end="257:22">!=</operator> <name pos:start="257:24" pos:end="257:26">pts</name></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:36"><block_content pos:start="259:17" pos:end="259:36">

                <expr_stmt pos:start="259:17" pos:end="259:36"><expr pos:start="259:17" pos:end="259:35"><name pos:start="259:17" pos:end="259:26">header_len</name> <operator pos:start="259:28" pos:end="259:29">+=</operator> <literal type="number" pos:start="259:31" pos:end="259:33">5</literal> <operator pos:start="259:33" pos:end="259:33">+</operator> <literal type="number" pos:start="259:35" pos:end="259:35">5</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="261:13" pos:end="263:32">else<block type="pseudo" pos:start="263:17" pos:end="263:32"><block_content pos:start="263:17" pos:end="263:32">

                <expr_stmt pos:start="263:17" pos:end="263:32"><expr pos:start="263:17" pos:end="263:31"><name pos:start="263:17" pos:end="263:26">header_len</name> <operator pos:start="263:28" pos:end="263:29">+=</operator> <literal type="number" pos:start="263:31" pos:end="263:31">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="265:11" pos:end="271:9">else <block pos:start="265:16" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:29">

            <if_stmt pos:start="267:13" pos:end="269:29"><if pos:start="267:13" pos:end="269:29">if <condition pos:start="267:16" pos:end="267:29">(<expr pos:start="267:17" pos:end="267:28"><operator pos:start="267:17" pos:end="267:17">!</operator><name pos:start="267:18" pos:end="267:28"><name pos:start="267:18" pos:end="267:18">s</name><operator pos:start="267:19" pos:end="267:20">-&gt;</operator><name pos:start="267:21" pos:end="267:28">is_mpeg2</name></name></expr>)</condition><block type="pseudo" pos:start="269:17" pos:end="269:29"><block_content pos:start="269:17" pos:end="269:29">

                <expr_stmt pos:start="269:17" pos:end="269:29"><expr pos:start="269:17" pos:end="269:28"><name pos:start="269:17" pos:end="269:26">header_len</name><operator pos:start="269:27" pos:end="269:28">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="275:9" pos:end="275:48"><expr pos:start="275:9" pos:end="275:47"><name pos:start="275:9" pos:end="275:20">payload_size</name> <operator pos:start="275:22" pos:end="275:22">=</operator> <name pos:start="275:24" pos:end="275:34">packet_size</name> <operator pos:start="275:36" pos:end="275:36">-</operator> <name pos:start="275:38" pos:end="275:47">header_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="277:9" pos:end="297:9"><if pos:start="277:9" pos:end="293:9">if <condition pos:start="277:12" pos:end="277:22">(<expr pos:start="277:13" pos:end="277:21"><name pos:start="277:13" pos:end="277:14">id</name> <operator pos:start="277:16" pos:end="277:16">&lt;</operator> <literal type="number" pos:start="277:18" pos:end="277:21">0xc0</literal></expr>)</condition> <block pos:start="277:24" pos:end="293:9">{<block_content pos:start="279:13" pos:end="291:13">

            <expr_stmt pos:start="279:13" pos:end="279:41"><expr pos:start="279:13" pos:end="279:40"><name pos:start="279:13" pos:end="279:21">startcode</name> <operator pos:start="279:23" pos:end="279:23">=</operator> <name pos:start="279:25" pos:end="279:40">PRIVATE_STREAM_1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:30"><expr pos:start="281:13" pos:end="281:29"><name pos:start="281:13" pos:end="281:24">payload_size</name> <operator pos:start="281:26" pos:end="281:27">-=</operator> <literal type="number" pos:start="281:29" pos:end="281:29">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="283:13" pos:end="291:13"><if pos:start="283:13" pos:end="291:13">if <condition pos:start="283:16" pos:end="283:27">(<expr pos:start="283:17" pos:end="283:26"><name pos:start="283:17" pos:end="283:18">id</name> <operator pos:start="283:20" pos:end="283:21">&gt;=</operator> <literal type="number" pos:start="283:23" pos:end="283:26">0x40</literal></expr>)</condition> <block pos:start="283:29" pos:end="291:13">{<block_content pos:start="285:17" pos:end="289:38">

                <expr_stmt pos:start="285:17" pos:end="285:34"><expr pos:start="285:17" pos:end="285:33"><name pos:start="285:17" pos:end="285:28">payload_size</name> <operator pos:start="285:30" pos:end="285:31">-=</operator> <literal type="number" pos:start="285:33" pos:end="285:33">3</literal></expr>;</expr_stmt>

                <if_stmt pos:start="287:17" pos:end="289:38"><if pos:start="287:17" pos:end="289:38">if <condition pos:start="287:20" pos:end="287:31">(<expr pos:start="287:21" pos:end="287:30"><name pos:start="287:21" pos:end="287:22">id</name> <operator pos:start="287:24" pos:end="287:25">&gt;=</operator> <literal type="number" pos:start="287:27" pos:end="287:30">0xa0</literal></expr>)</condition><block type="pseudo" pos:start="289:21" pos:end="289:38"><block_content pos:start="289:21" pos:end="289:38">

                    <expr_stmt pos:start="289:21" pos:end="289:38"><expr pos:start="289:21" pos:end="289:37"><name pos:start="289:21" pos:end="289:32">payload_size</name> <operator pos:start="289:34" pos:end="289:35">-=</operator> <literal type="number" pos:start="289:37" pos:end="289:37">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="293:11" pos:end="297:9">else <block pos:start="293:16" pos:end="297:9">{<block_content pos:start="295:13" pos:end="295:35">

            <expr_stmt pos:start="295:13" pos:end="295:35"><expr pos:start="295:13" pos:end="295:34"><name pos:start="295:13" pos:end="295:21">startcode</name> <operator pos:start="295:23" pos:end="295:23">=</operator> <literal type="number" pos:start="295:25" pos:end="295:31">0x100</literal> <operator pos:start="295:31" pos:end="295:31">+</operator> <name pos:start="295:33" pos:end="295:34">id</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="301:9" pos:end="301:67"><expr pos:start="301:9" pos:end="301:66"><name pos:start="301:9" pos:end="301:21">stuffing_size</name> <operator pos:start="301:23" pos:end="301:23">=</operator> <name pos:start="301:25" pos:end="301:36">payload_size</name> <operator pos:start="301:38" pos:end="301:38">-</operator> <call pos:start="301:40" pos:end="301:66"><name pos:start="301:40" pos:end="301:51">av_fifo_size</name><argument_list pos:start="301:52" pos:end="301:66">(<argument pos:start="301:53" pos:end="301:65"><expr pos:start="301:53" pos:end="301:65"><operator pos:start="301:53" pos:end="301:53">&amp;</operator><name pos:start="301:54" pos:end="301:65"><name pos:start="301:54" pos:end="301:59">stream</name><operator pos:start="301:60" pos:end="301:61">-&gt;</operator><name pos:start="301:62" pos:end="301:65">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="305:9" pos:end="305:62">// first byte does not fit -&gt; reset pts/dts + stuffing</comment>

        <if_stmt pos:start="307:9" pos:end="341:9"><if pos:start="307:9" pos:end="341:9">if<condition pos:start="307:11" pos:end="307:65">(<expr pos:start="307:12" pos:end="307:64"><name pos:start="307:12" pos:end="307:23">payload_size</name> <operator pos:start="307:25" pos:end="307:26">&lt;=</operator> <name pos:start="307:28" pos:end="307:39">trailer_size</name> <operator pos:start="307:41" pos:end="307:42">&amp;&amp;</operator> <name pos:start="307:44" pos:end="307:46">pts</name> <operator pos:start="307:48" pos:end="307:49">!=</operator> <name pos:start="307:51" pos:end="307:64">AV_NOPTS_VALUE</name></expr>)</condition><block pos:start="307:66" pos:end="341:9">{<block_content pos:start="309:13" pos:end="339:61">

            <decl_stmt pos:start="309:13" pos:end="309:32"><decl pos:start="309:13" pos:end="309:31"><type pos:start="309:13" pos:end="309:15"><name pos:start="309:13" pos:end="309:15">int</name></type> <name pos:start="309:17" pos:end="309:29">timestamp_len</name><init pos:start="309:30" pos:end="309:31">=<expr pos:start="309:31" pos:end="309:31"><literal type="number" pos:start="309:31" pos:end="309:31">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="311:13" pos:end="313:35"><if pos:start="311:13" pos:end="313:35">if<condition pos:start="311:15" pos:end="311:26">(<expr pos:start="311:16" pos:end="311:25"><name pos:start="311:16" pos:end="311:18">dts</name> <operator pos:start="311:20" pos:end="311:21">!=</operator> <name pos:start="311:23" pos:end="311:25">pts</name></expr>)</condition><block type="pseudo" pos:start="313:17" pos:end="313:35"><block_content pos:start="313:17" pos:end="313:35">

                <expr_stmt pos:start="313:17" pos:end="313:35"><expr pos:start="313:17" pos:end="313:34"><name pos:start="313:17" pos:end="313:29">timestamp_len</name> <operator pos:start="313:31" pos:end="313:32">+=</operator> <literal type="number" pos:start="313:34" pos:end="313:34">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="315:13" pos:end="317:53"><if pos:start="315:13" pos:end="317:53">if<condition pos:start="315:15" pos:end="315:37">(<expr pos:start="315:16" pos:end="315:36"><name pos:start="315:16" pos:end="315:18">pts</name> <operator pos:start="315:20" pos:end="315:21">!=</operator> <name pos:start="315:23" pos:end="315:36">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="317:17" pos:end="317:53"><block_content pos:start="317:17" pos:end="317:53">

                <expr_stmt pos:start="317:17" pos:end="317:53"><expr pos:start="317:17" pos:end="317:52"><name pos:start="317:17" pos:end="317:29">timestamp_len</name> <operator pos:start="317:31" pos:end="317:32">+=</operator> <ternary pos:start="317:34" pos:end="317:52"><condition pos:start="317:34" pos:end="317:46"><expr pos:start="317:34" pos:end="317:44"><name pos:start="317:34" pos:end="317:44"><name pos:start="317:34" pos:end="317:34">s</name><operator pos:start="317:35" pos:end="317:36">-&gt;</operator><name pos:start="317:37" pos:end="317:44">is_mpeg2</name></name></expr> ?</condition><then pos:start="317:48" pos:end="317:48"> <expr pos:start="317:48" pos:end="317:48"><literal type="number" pos:start="317:48" pos:end="317:48">5</literal></expr> </then><else pos:start="317:50" pos:end="317:52">: <expr pos:start="317:52" pos:end="317:52"><literal type="number" pos:start="317:52" pos:end="317:52">4</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:36"><expr pos:start="319:13" pos:end="319:35"><name pos:start="319:13" pos:end="319:15">pts</name><operator pos:start="319:16" pos:end="319:16">=</operator><name pos:start="319:17" pos:end="319:19">dts</name><operator pos:start="319:20" pos:end="319:20">=</operator> <name pos:start="319:22" pos:end="319:35">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:40"><expr pos:start="321:13" pos:end="321:39"><name pos:start="321:13" pos:end="321:22">header_len</name> <operator pos:start="321:24" pos:end="321:25">-=</operator> <name pos:start="321:27" pos:end="321:39">timestamp_len</name></expr>;</expr_stmt>

            <if_stmt pos:start="323:13" pos:end="333:13"><if pos:start="323:13" pos:end="329:13">if <condition pos:start="323:16" pos:end="323:50">(<expr pos:start="323:17" pos:end="323:49"><name pos:start="323:17" pos:end="323:25"><name pos:start="323:17" pos:end="323:17">s</name><operator pos:start="323:18" pos:end="323:19">-&gt;</operator><name pos:start="323:20" pos:end="323:25">is_dvd</name></name> <operator pos:start="323:27" pos:end="323:28">&amp;&amp;</operator> <name pos:start="323:30" pos:end="323:49"><name pos:start="323:30" pos:end="323:35">stream</name><operator pos:start="323:36" pos:end="323:37">-&gt;</operator><name pos:start="323:38" pos:end="323:49">align_iframe</name></name></expr>)</condition> <block pos:start="323:52" pos:end="329:13">{<block_content pos:start="325:17" pos:end="327:45">

                <expr_stmt pos:start="325:17" pos:end="325:50"><expr pos:start="325:17" pos:end="325:49"><name pos:start="325:17" pos:end="325:32">pad_packet_bytes</name> <operator pos:start="325:34" pos:end="325:35">+=</operator> <name pos:start="325:37" pos:end="325:49">timestamp_len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:45"><expr pos:start="327:17" pos:end="327:44"><name pos:start="327:17" pos:end="327:27">packet_size</name> <operator pos:start="327:29" pos:end="327:30">-=</operator> <name pos:start="327:32" pos:end="327:44">timestamp_len</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="329:15" pos:end="333:13">else <block pos:start="329:20" pos:end="333:13">{<block_content pos:start="331:17" pos:end="331:46">

                <expr_stmt pos:start="331:17" pos:end="331:46"><expr pos:start="331:17" pos:end="331:45"><name pos:start="331:17" pos:end="331:28">payload_size</name> <operator pos:start="331:30" pos:end="331:31">+=</operator> <name pos:start="331:33" pos:end="331:45">timestamp_len</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:43"><expr pos:start="335:13" pos:end="335:42"><name pos:start="335:13" pos:end="335:25">stuffing_size</name> <operator pos:start="335:27" pos:end="335:28">+=</operator> <name pos:start="335:30" pos:end="335:42">timestamp_len</name></expr>;</expr_stmt>

            <if_stmt pos:start="337:13" pos:end="339:61"><if pos:start="337:13" pos:end="339:61">if<condition pos:start="337:15" pos:end="337:43">(<expr pos:start="337:16" pos:end="337:42"><name pos:start="337:16" pos:end="337:27">payload_size</name> <operator pos:start="337:29" pos:end="337:29">&gt;</operator> <name pos:start="337:31" pos:end="337:42">trailer_size</name></expr>)</condition><block type="pseudo" pos:start="339:17" pos:end="339:61"><block_content pos:start="339:17" pos:end="339:61">

                <expr_stmt pos:start="339:17" pos:end="339:61"><expr pos:start="339:17" pos:end="339:60"><name pos:start="339:17" pos:end="339:29">stuffing_size</name> <operator pos:start="339:31" pos:end="339:32">+=</operator> <name pos:start="339:34" pos:end="339:45">payload_size</name> <operator pos:start="339:47" pos:end="339:47">-</operator> <name pos:start="339:49" pos:end="339:60">trailer_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="345:9" pos:end="363:9"><if pos:start="345:9" pos:end="363:9">if <condition pos:start="345:12" pos:end="345:58">(<expr pos:start="345:13" pos:end="345:57"><name pos:start="345:13" pos:end="345:28">pad_packet_bytes</name> <operator pos:start="345:30" pos:end="345:30">&gt;</operator> <literal type="number" pos:start="345:32" pos:end="345:32">0</literal> <operator pos:start="345:34" pos:end="345:35">&amp;&amp;</operator> <name pos:start="345:37" pos:end="345:52">pad_packet_bytes</name> <operator pos:start="345:54" pos:end="345:55">&lt;=</operator> <literal type="number" pos:start="345:57" pos:end="345:57">7</literal></expr>)</condition> <block pos:start="345:60" pos:end="363:9">{<block_content pos:start="347:13" pos:end="361:33"> <comment type="line" pos:start="345:62" pos:end="345:98">// can't use padding, so use stuffing</comment>

            <expr_stmt pos:start="347:13" pos:end="347:44"><expr pos:start="347:13" pos:end="347:43"><name pos:start="347:13" pos:end="347:23">packet_size</name> <operator pos:start="347:25" pos:end="347:26">+=</operator> <name pos:start="347:28" pos:end="347:43">pad_packet_bytes</name></expr>;</expr_stmt>

            <expr_stmt pos:start="349:13" pos:end="349:45"><expr pos:start="349:13" pos:end="349:44"><name pos:start="349:13" pos:end="349:24">payload_size</name> <operator pos:start="349:26" pos:end="349:27">+=</operator> <name pos:start="349:29" pos:end="349:44">pad_packet_bytes</name></expr>;</expr_stmt> <comment type="line" pos:start="349:47" pos:end="349:77">// undo the previous adjustment</comment>

            <if_stmt pos:start="351:13" pos:end="359:13"><if pos:start="351:13" pos:end="355:13">if <condition pos:start="351:16" pos:end="351:34">(<expr pos:start="351:17" pos:end="351:33"><name pos:start="351:17" pos:end="351:29">stuffing_size</name> <operator pos:start="351:31" pos:end="351:31">&lt;</operator> <literal type="number" pos:start="351:33" pos:end="351:33">0</literal></expr>)</condition> <block pos:start="351:36" pos:end="355:13">{<block_content pos:start="353:17" pos:end="353:49">

                <expr_stmt pos:start="353:17" pos:end="353:49"><expr pos:start="353:17" pos:end="353:48"><name pos:start="353:17" pos:end="353:29">stuffing_size</name> <operator pos:start="353:31" pos:end="353:31">=</operator> <name pos:start="353:33" pos:end="353:48">pad_packet_bytes</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="355:15" pos:end="359:13">else <block pos:start="355:20" pos:end="359:13">{<block_content pos:start="357:17" pos:end="357:50">

                <expr_stmt pos:start="357:17" pos:end="357:50"><expr pos:start="357:17" pos:end="357:49"><name pos:start="357:17" pos:end="357:29">stuffing_size</name> <operator pos:start="357:31" pos:end="357:32">+=</operator> <name pos:start="357:34" pos:end="357:49">pad_packet_bytes</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:33"><expr pos:start="361:13" pos:end="361:32"><name pos:start="361:13" pos:end="361:28">pad_packet_bytes</name> <operator pos:start="361:30" pos:end="361:30">=</operator> <literal type="number" pos:start="361:32" pos:end="361:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="367:9" pos:end="369:30"><if pos:start="367:9" pos:end="369:30">if <condition pos:start="367:12" pos:end="367:30">(<expr pos:start="367:13" pos:end="367:29"><name pos:start="367:13" pos:end="367:25">stuffing_size</name> <operator pos:start="367:27" pos:end="367:27">&lt;</operator> <literal type="number" pos:start="367:29" pos:end="367:29">0</literal></expr>)</condition><block type="pseudo" pos:start="369:13" pos:end="369:30"><block_content pos:start="369:13" pos:end="369:30">

            <expr_stmt pos:start="369:13" pos:end="369:30"><expr pos:start="369:13" pos:end="369:29"><name pos:start="369:13" pos:end="369:25">stuffing_size</name> <operator pos:start="369:27" pos:end="369:27">=</operator> <literal type="number" pos:start="369:29" pos:end="369:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="371:9" pos:end="381:9"><if pos:start="371:9" pos:end="381:9">if <condition pos:start="371:12" pos:end="371:31">(<expr pos:start="371:13" pos:end="371:30"><name pos:start="371:13" pos:end="371:25">stuffing_size</name> <operator pos:start="371:27" pos:end="371:27">&gt;</operator> <literal type="number" pos:start="371:29" pos:end="371:30">16</literal></expr>)</condition> <block pos:start="371:33" pos:end="381:9">{<block_content pos:start="373:13" pos:end="379:30">    <comment type="block" pos:start="371:38" pos:end="371:73">/*&lt;=16 for MPEG-1, &lt;=32 for MPEG-2*/</comment>

            <expr_stmt pos:start="373:13" pos:end="373:46"><expr pos:start="373:13" pos:end="373:45"><name pos:start="373:13" pos:end="373:28">pad_packet_bytes</name> <operator pos:start="373:30" pos:end="373:31">+=</operator> <name pos:start="373:33" pos:end="373:45">stuffing_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="375:13" pos:end="375:41"><expr pos:start="375:13" pos:end="375:40"><name pos:start="375:13" pos:end="375:23">packet_size</name> <operator pos:start="375:25" pos:end="375:26">-=</operator> <name pos:start="375:28" pos:end="375:40">stuffing_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="377:13" pos:end="377:42"><expr pos:start="377:13" pos:end="377:41"><name pos:start="377:13" pos:end="377:24">payload_size</name> <operator pos:start="377:26" pos:end="377:27">-=</operator> <name pos:start="377:29" pos:end="377:41">stuffing_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:30"><expr pos:start="379:13" pos:end="379:29"><name pos:start="379:13" pos:end="379:25">stuffing_size</name> <operator pos:start="379:27" pos:end="379:27">=</operator> <literal type="number" pos:start="379:29" pos:end="379:29">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="385:9" pos:end="385:76"><expr pos:start="385:9" pos:end="385:75"><name pos:start="385:9" pos:end="385:17">nb_frames</name><operator pos:start="385:18" pos:end="385:18">=</operator> <call pos:start="385:20" pos:end="385:75"><name pos:start="385:20" pos:end="385:32">get_nb_frames</name><argument_list pos:start="385:33" pos:end="385:75">(<argument pos:start="385:34" pos:end="385:36"><expr pos:start="385:34" pos:end="385:36"><name pos:start="385:34" pos:end="385:36">ctx</name></expr></argument>, <argument pos:start="385:39" pos:end="385:44"><expr pos:start="385:39" pos:end="385:44"><name pos:start="385:39" pos:end="385:44">stream</name></expr></argument>, <argument pos:start="385:47" pos:end="385:74"><expr pos:start="385:47" pos:end="385:74"><name pos:start="385:47" pos:end="385:58">payload_size</name> <operator pos:start="385:60" pos:end="385:60">-</operator> <name pos:start="385:62" pos:end="385:74">stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="389:9" pos:end="389:37"><expr pos:start="389:9" pos:end="389:36"><call pos:start="389:9" pos:end="389:36"><name pos:start="389:9" pos:end="389:16">put_be32</name><argument_list pos:start="389:17" pos:end="389:36">(<argument pos:start="389:18" pos:end="389:24"><expr pos:start="389:18" pos:end="389:24"><name pos:start="389:18" pos:end="389:24"><name pos:start="389:18" pos:end="389:20">ctx</name><operator pos:start="389:21" pos:end="389:22">-&gt;</operator><name pos:start="389:23" pos:end="389:24">pb</name></name></expr></argument>, <argument pos:start="389:27" pos:end="389:35"><expr pos:start="389:27" pos:end="389:35"><name pos:start="389:27" pos:end="389:35">startcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="393:9" pos:end="393:39"><expr pos:start="393:9" pos:end="393:38"><call pos:start="393:9" pos:end="393:38"><name pos:start="393:9" pos:end="393:16">put_be16</name><argument_list pos:start="393:17" pos:end="393:38">(<argument pos:start="393:18" pos:end="393:24"><expr pos:start="393:18" pos:end="393:24"><name pos:start="393:18" pos:end="393:24"><name pos:start="393:18" pos:end="393:20">ctx</name><operator pos:start="393:21" pos:end="393:22">-&gt;</operator><name pos:start="393:23" pos:end="393:24">pb</name></name></expr></argument>, <argument pos:start="393:27" pos:end="393:37"><expr pos:start="393:27" pos:end="393:37"><name pos:start="393:27" pos:end="393:37">packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="397:9" pos:end="401:40"><if pos:start="397:9" pos:end="401:40">if <condition pos:start="397:12" pos:end="397:25">(<expr pos:start="397:13" pos:end="397:24"><operator pos:start="397:13" pos:end="397:13">!</operator><name pos:start="397:14" pos:end="397:24"><name pos:start="397:14" pos:end="397:14">s</name><operator pos:start="397:15" pos:end="397:16">-&gt;</operator><name pos:start="397:17" pos:end="397:24">is_mpeg2</name></name></expr>)</condition><block type="pseudo" pos:start="399:13" pos:end="401:40"><block_content pos:start="399:13" pos:end="401:40">

            <for pos:start="399:13" pos:end="401:40">for<control pos:start="399:16" pos:end="399:40">(<init pos:start="399:17" pos:end="399:20"><expr pos:start="399:17" pos:end="399:19"><name pos:start="399:17" pos:end="399:17">i</name><operator pos:start="399:18" pos:end="399:18">=</operator><literal type="number" pos:start="399:19" pos:end="399:19">0</literal></expr>;</init><condition pos:start="399:21" pos:end="399:36"><expr pos:start="399:21" pos:end="399:35"><name pos:start="399:21" pos:end="399:21">i</name><operator pos:start="399:22" pos:end="399:22">&lt;</operator><name pos:start="399:23" pos:end="399:35">stuffing_size</name></expr>;</condition><incr pos:start="399:37" pos:end="399:39"><expr pos:start="399:37" pos:end="399:39"><name pos:start="399:37" pos:end="399:37">i</name><operator pos:start="399:38" pos:end="399:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="401:17" pos:end="401:40"><block_content pos:start="401:17" pos:end="401:40">

                <expr_stmt pos:start="401:17" pos:end="401:40"><expr pos:start="401:17" pos:end="401:39"><call pos:start="401:17" pos:end="401:39"><name pos:start="401:17" pos:end="401:24">put_byte</name><argument_list pos:start="401:25" pos:end="401:39">(<argument pos:start="401:26" pos:end="401:32"><expr pos:start="401:26" pos:end="401:32"><name pos:start="401:26" pos:end="401:32"><name pos:start="401:26" pos:end="401:28">ctx</name><operator pos:start="401:29" pos:end="401:30">-&gt;</operator><name pos:start="401:31" pos:end="401:32">pb</name></name></expr></argument>, <argument pos:start="401:35" pos:end="401:38"><expr pos:start="401:35" pos:end="401:38"><literal type="number" pos:start="401:35" pos:end="401:38">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>



        <if_stmt pos:start="405:9" pos:end="499:9"><if pos:start="405:9" pos:end="477:9">if <condition pos:start="405:12" pos:end="405:24">(<expr pos:start="405:13" pos:end="405:23"><name pos:start="405:13" pos:end="405:23"><name pos:start="405:13" pos:end="405:13">s</name><operator pos:start="405:14" pos:end="405:15">-&gt;</operator><name pos:start="405:16" pos:end="405:23">is_mpeg2</name></name></expr>)</condition> <block pos:start="405:26" pos:end="477:9">{<block_content pos:start="407:13" pos:end="473:13">

            <expr_stmt pos:start="407:13" pos:end="407:36"><expr pos:start="407:13" pos:end="407:35"><call pos:start="407:13" pos:end="407:35"><name pos:start="407:13" pos:end="407:20">put_byte</name><argument_list pos:start="407:21" pos:end="407:35">(<argument pos:start="407:22" pos:end="407:28"><expr pos:start="407:22" pos:end="407:28"><name pos:start="407:22" pos:end="407:28"><name pos:start="407:22" pos:end="407:24">ctx</name><operator pos:start="407:25" pos:end="407:26">-&gt;</operator><name pos:start="407:27" pos:end="407:28">pb</name></name></expr></argument>, <argument pos:start="407:31" pos:end="407:34"><expr pos:start="407:31" pos:end="407:34"><literal type="number" pos:start="407:31" pos:end="407:34">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="407:38" pos:end="407:51">/* mpeg2 id */</comment>



            <expr_stmt pos:start="411:13" pos:end="411:24"><expr pos:start="411:13" pos:end="411:23"><name pos:start="411:13" pos:end="411:21">pes_flags</name><operator pos:start="411:22" pos:end="411:22">=</operator><literal type="number" pos:start="411:23" pos:end="411:23">0</literal></expr>;</expr_stmt>



            <if_stmt pos:start="415:13" pos:end="423:13"><if pos:start="415:13" pos:end="423:13">if <condition pos:start="415:16" pos:end="415:38">(<expr pos:start="415:17" pos:end="415:37"><name pos:start="415:17" pos:end="415:19">pts</name> <operator pos:start="415:21" pos:end="415:22">!=</operator> <name pos:start="415:24" pos:end="415:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="415:40" pos:end="423:13">{<block_content pos:start="417:17" pos:end="421:38">

                <expr_stmt pos:start="417:17" pos:end="417:34"><expr pos:start="417:17" pos:end="417:33"><name pos:start="417:17" pos:end="417:25">pes_flags</name> <operator pos:start="417:27" pos:end="417:28">|=</operator> <literal type="number" pos:start="417:30" pos:end="417:33">0x80</literal></expr>;</expr_stmt>

                <if_stmt pos:start="419:17" pos:end="421:38"><if pos:start="419:17" pos:end="421:38">if <condition pos:start="419:20" pos:end="419:31">(<expr pos:start="419:21" pos:end="419:30"><name pos:start="419:21" pos:end="419:23">dts</name> <operator pos:start="419:25" pos:end="419:26">!=</operator> <name pos:start="419:28" pos:end="419:30">pts</name></expr>)</condition><block type="pseudo" pos:start="421:21" pos:end="421:38"><block_content pos:start="421:21" pos:end="421:38">

                    <expr_stmt pos:start="421:21" pos:end="421:38"><expr pos:start="421:21" pos:end="421:37"><name pos:start="421:21" pos:end="421:29">pes_flags</name> <operator pos:start="421:31" pos:end="421:32">|=</operator> <literal type="number" pos:start="421:34" pos:end="421:37">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="427:13" pos:end="433:44">/* Both the MPEG-2 and the SVCD standards demand that the

               P-STD_buffer_size field be included in the first packet of

               every stream. (see SVCD standard p. 26 V.2.3.1 and V.2.3.2

               and MPEG-2 standard 2.7.7) */</comment>

            <if_stmt pos:start="435:13" pos:end="437:34"><if pos:start="435:13" pos:end="437:34">if <condition pos:start="435:16" pos:end="435:43">(<expr pos:start="435:17" pos:end="435:42"><name pos:start="435:17" pos:end="435:37"><name pos:start="435:17" pos:end="435:22">stream</name><operator pos:start="435:23" pos:end="435:24">-&gt;</operator><name pos:start="435:25" pos:end="435:37">packet_number</name></name> <operator pos:start="435:39" pos:end="435:40">==</operator> <literal type="number" pos:start="435:42" pos:end="435:42">0</literal></expr>)</condition><block type="pseudo" pos:start="437:17" pos:end="437:34"><block_content pos:start="437:17" pos:end="437:34">

                <expr_stmt pos:start="437:17" pos:end="437:34"><expr pos:start="437:17" pos:end="437:33"><name pos:start="437:17" pos:end="437:25">pes_flags</name> <operator pos:start="437:27" pos:end="437:28">|=</operator> <literal type="number" pos:start="437:30" pos:end="437:33">0x01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="441:13" pos:end="441:41"><expr pos:start="441:13" pos:end="441:40"><call pos:start="441:13" pos:end="441:40"><name pos:start="441:13" pos:end="441:20">put_byte</name><argument_list pos:start="441:21" pos:end="441:40">(<argument pos:start="441:22" pos:end="441:28"><expr pos:start="441:22" pos:end="441:28"><name pos:start="441:22" pos:end="441:28"><name pos:start="441:22" pos:end="441:24">ctx</name><operator pos:start="441:25" pos:end="441:26">-&gt;</operator><name pos:start="441:27" pos:end="441:28">pb</name></name></expr></argument>, <argument pos:start="441:31" pos:end="441:39"><expr pos:start="441:31" pos:end="441:39"><name pos:start="441:31" pos:end="441:39">pes_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="441:43" pos:end="441:53">/* flags */</comment>

            <expr_stmt pos:start="443:13" pos:end="443:62"><expr pos:start="443:13" pos:end="443:61"><call pos:start="443:13" pos:end="443:61"><name pos:start="443:13" pos:end="443:20">put_byte</name><argument_list pos:start="443:21" pos:end="443:61">(<argument pos:start="443:22" pos:end="443:28"><expr pos:start="443:22" pos:end="443:28"><name pos:start="443:22" pos:end="443:28"><name pos:start="443:22" pos:end="443:24">ctx</name><operator pos:start="443:25" pos:end="443:26">-&gt;</operator><name pos:start="443:27" pos:end="443:28">pb</name></name></expr></argument>, <argument pos:start="443:31" pos:end="443:60"><expr pos:start="443:31" pos:end="443:60"><name pos:start="443:31" pos:end="443:40">header_len</name> <operator pos:start="443:42" pos:end="443:42">-</operator> <literal type="number" pos:start="443:44" pos:end="443:46">3</literal> <operator pos:start="443:46" pos:end="443:46">+</operator> <name pos:start="443:48" pos:end="443:60">stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="447:13" pos:end="449:78"><if pos:start="447:13" pos:end="449:78">if <condition pos:start="447:16" pos:end="447:33">(<expr pos:start="447:17" pos:end="447:32"><name pos:start="447:17" pos:end="447:25">pes_flags</name> <operator pos:start="447:27" pos:end="447:27">&amp;</operator> <literal type="number" pos:start="447:29" pos:end="447:32">0x80</literal></expr>)</condition><block type="pseudo" pos:start="449:17" pos:end="449:78"><block_content pos:start="449:17" pos:end="449:78">  <comment type="block" pos:start="447:36" pos:end="447:48">/*write pts*/</comment>

                <expr_stmt pos:start="449:17" pos:end="449:78"><expr pos:start="449:17" pos:end="449:77"><call pos:start="449:17" pos:end="449:77"><name pos:start="449:17" pos:end="449:29">put_timestamp</name><argument_list pos:start="449:30" pos:end="449:77">(<argument pos:start="449:31" pos:end="449:37"><expr pos:start="449:31" pos:end="449:37"><name pos:start="449:31" pos:end="449:37"><name pos:start="449:31" pos:end="449:33">ctx</name><operator pos:start="449:34" pos:end="449:35">-&gt;</operator><name pos:start="449:36" pos:end="449:37">pb</name></name></expr></argument>, <argument pos:start="449:40" pos:end="449:71"><expr pos:start="449:40" pos:end="449:71"><ternary pos:start="449:40" pos:end="449:71"><condition pos:start="449:40" pos:end="449:59"><expr pos:start="449:40" pos:end="449:57"><operator pos:start="449:40" pos:end="449:40">(</operator><name pos:start="449:41" pos:end="449:49">pes_flags</name> <operator pos:start="449:51" pos:end="449:51">&amp;</operator> <literal type="number" pos:start="449:53" pos:end="449:56">0x40</literal><operator pos:start="449:57" pos:end="449:57">)</operator></expr> ?</condition><then pos:start="449:61" pos:end="449:64"> <expr pos:start="449:61" pos:end="449:64"><literal type="number" pos:start="449:61" pos:end="449:64">0x03</literal></expr> </then><else pos:start="449:66" pos:end="449:71">: <expr pos:start="449:68" pos:end="449:71"><literal type="number" pos:start="449:68" pos:end="449:71">0x02</literal></expr></else></ternary></expr></argument>, <argument pos:start="449:74" pos:end="449:76"><expr pos:start="449:74" pos:end="449:76"><name pos:start="449:74" pos:end="449:76">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="451:13" pos:end="453:50"><if pos:start="451:13" pos:end="453:50">if <condition pos:start="451:16" pos:end="451:33">(<expr pos:start="451:17" pos:end="451:32"><name pos:start="451:17" pos:end="451:25">pes_flags</name> <operator pos:start="451:27" pos:end="451:27">&amp;</operator> <literal type="number" pos:start="451:29" pos:end="451:32">0x40</literal></expr>)</condition><block type="pseudo" pos:start="453:17" pos:end="453:50"><block_content pos:start="453:17" pos:end="453:50">  <comment type="block" pos:start="451:36" pos:end="451:48">/*write dts*/</comment>

                <expr_stmt pos:start="453:17" pos:end="453:50"><expr pos:start="453:17" pos:end="453:49"><call pos:start="453:17" pos:end="453:49"><name pos:start="453:17" pos:end="453:29">put_timestamp</name><argument_list pos:start="453:30" pos:end="453:49">(<argument pos:start="453:31" pos:end="453:37"><expr pos:start="453:31" pos:end="453:37"><name pos:start="453:31" pos:end="453:37"><name pos:start="453:31" pos:end="453:33">ctx</name><operator pos:start="453:34" pos:end="453:35">-&gt;</operator><name pos:start="453:36" pos:end="453:37">pb</name></name></expr></argument>, <argument pos:start="453:40" pos:end="453:43"><expr pos:start="453:40" pos:end="453:43"><literal type="number" pos:start="453:40" pos:end="453:43">0x01</literal></expr></argument>, <argument pos:start="453:46" pos:end="453:48"><expr pos:start="453:46" pos:end="453:48"><name pos:start="453:46" pos:end="453:48">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="457:13" pos:end="473:13"><if pos:start="457:13" pos:end="473:13">if <condition pos:start="457:16" pos:end="457:33">(<expr pos:start="457:17" pos:end="457:32"><name pos:start="457:17" pos:end="457:25">pes_flags</name> <operator pos:start="457:27" pos:end="457:27">&amp;</operator> <literal type="number" pos:start="457:29" pos:end="457:32">0x01</literal></expr>)</condition> <block pos:start="457:35" pos:end="473:13">{<block_content pos:start="459:17" pos:end="471:77">  <comment type="block" pos:start="457:38" pos:end="457:60">/*write pes extension*/</comment>

                <expr_stmt pos:start="459:17" pos:end="459:40"><expr pos:start="459:17" pos:end="459:39"><call pos:start="459:17" pos:end="459:39"><name pos:start="459:17" pos:end="459:24">put_byte</name><argument_list pos:start="459:25" pos:end="459:39">(<argument pos:start="459:26" pos:end="459:32"><expr pos:start="459:26" pos:end="459:32"><name pos:start="459:26" pos:end="459:32"><name pos:start="459:26" pos:end="459:28">ctx</name><operator pos:start="459:29" pos:end="459:30">-&gt;</operator><name pos:start="459:31" pos:end="459:32">pb</name></name></expr></argument>, <argument pos:start="459:35" pos:end="459:38"><expr pos:start="459:35" pos:end="459:38"><literal type="number" pos:start="459:35" pos:end="459:38">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="459:42" pos:end="459:52">/* flags */</comment>



                <comment type="block" pos:start="463:17" pos:end="463:39">/* P-STD buffer info */</comment>

                <if_stmt pos:start="465:17" pos:end="471:77"><if pos:start="465:17" pos:end="467:76">if <condition pos:start="465:20" pos:end="465:35">(<expr pos:start="465:21" pos:end="465:34"><name pos:start="465:21" pos:end="465:22">id</name> <operator pos:start="465:24" pos:end="465:25">==</operator> <name pos:start="465:27" pos:end="465:34">AUDIO_ID</name></expr>)</condition><block type="pseudo" pos:start="467:21" pos:end="467:76"><block_content pos:start="467:21" pos:end="467:76">

                    <expr_stmt pos:start="467:21" pos:end="467:76"><expr pos:start="467:21" pos:end="467:75"><call pos:start="467:21" pos:end="467:75"><name pos:start="467:21" pos:end="467:28">put_be16</name><argument_list pos:start="467:29" pos:end="467:75">(<argument pos:start="467:30" pos:end="467:36"><expr pos:start="467:30" pos:end="467:36"><name pos:start="467:30" pos:end="467:36"><name pos:start="467:30" pos:end="467:32">ctx</name><operator pos:start="467:33" pos:end="467:34">-&gt;</operator><name pos:start="467:35" pos:end="467:36">pb</name></name></expr></argument>, <argument pos:start="467:39" pos:end="467:74"><expr pos:start="467:39" pos:end="467:74"><literal type="number" pos:start="467:39" pos:end="467:44">0x4000</literal> <operator pos:start="467:46" pos:end="467:46">|</operator> <name pos:start="467:48" pos:end="467:70"><name pos:start="467:48" pos:end="467:53">stream</name><operator pos:start="467:54" pos:end="467:55">-&gt;</operator><name pos:start="467:56" pos:end="467:70">max_buffer_size</name></name><operator pos:start="467:71" pos:end="467:71">/</operator><literal type="number" pos:start="467:72" pos:end="467:74">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="469:17" pos:end="471:77">else<block type="pseudo" pos:start="471:21" pos:end="471:77"><block_content pos:start="471:21" pos:end="471:77">

                    <expr_stmt pos:start="471:21" pos:end="471:77"><expr pos:start="471:21" pos:end="471:76"><call pos:start="471:21" pos:end="471:76"><name pos:start="471:21" pos:end="471:28">put_be16</name><argument_list pos:start="471:29" pos:end="471:76">(<argument pos:start="471:30" pos:end="471:36"><expr pos:start="471:30" pos:end="471:36"><name pos:start="471:30" pos:end="471:36"><name pos:start="471:30" pos:end="471:32">ctx</name><operator pos:start="471:33" pos:end="471:34">-&gt;</operator><name pos:start="471:35" pos:end="471:36">pb</name></name></expr></argument>, <argument pos:start="471:39" pos:end="471:75"><expr pos:start="471:39" pos:end="471:75"><literal type="number" pos:start="471:39" pos:end="471:44">0x6000</literal> <operator pos:start="471:46" pos:end="471:46">|</operator> <name pos:start="471:48" pos:end="471:70"><name pos:start="471:48" pos:end="471:53">stream</name><operator pos:start="471:54" pos:end="471:55">-&gt;</operator><name pos:start="471:56" pos:end="471:70">max_buffer_size</name></name><operator pos:start="471:71" pos:end="471:71">/</operator><literal type="number" pos:start="471:72" pos:end="471:75">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



        </block_content>}</block></if> <else pos:start="477:11" pos:end="499:9">else <block pos:start="477:16" pos:end="499:9">{<block_content pos:start="479:13" pos:end="497:13">

            <if_stmt pos:start="479:13" pos:end="497:13"><if pos:start="479:13" pos:end="493:13">if <condition pos:start="479:16" pos:end="479:38">(<expr pos:start="479:17" pos:end="479:37"><name pos:start="479:17" pos:end="479:19">pts</name> <operator pos:start="479:21" pos:end="479:22">!=</operator> <name pos:start="479:24" pos:end="479:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="479:40" pos:end="493:13">{<block_content pos:start="481:17" pos:end="491:17">

                <if_stmt pos:start="481:17" pos:end="491:17"><if pos:start="481:17" pos:end="487:17">if <condition pos:start="481:20" pos:end="481:31">(<expr pos:start="481:21" pos:end="481:30"><name pos:start="481:21" pos:end="481:23">dts</name> <operator pos:start="481:25" pos:end="481:26">!=</operator> <name pos:start="481:28" pos:end="481:30">pts</name></expr>)</condition> <block pos:start="481:33" pos:end="487:17">{<block_content pos:start="483:21" pos:end="485:54">

                    <expr_stmt pos:start="483:21" pos:end="483:54"><expr pos:start="483:21" pos:end="483:53"><call pos:start="483:21" pos:end="483:53"><name pos:start="483:21" pos:end="483:33">put_timestamp</name><argument_list pos:start="483:34" pos:end="483:53">(<argument pos:start="483:35" pos:end="483:41"><expr pos:start="483:35" pos:end="483:41"><name pos:start="483:35" pos:end="483:41"><name pos:start="483:35" pos:end="483:37">ctx</name><operator pos:start="483:38" pos:end="483:39">-&gt;</operator><name pos:start="483:40" pos:end="483:41">pb</name></name></expr></argument>, <argument pos:start="483:44" pos:end="483:47"><expr pos:start="483:44" pos:end="483:47"><literal type="number" pos:start="483:44" pos:end="483:47">0x03</literal></expr></argument>, <argument pos:start="483:50" pos:end="483:52"><expr pos:start="483:50" pos:end="483:52"><name pos:start="483:50" pos:end="483:52">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="485:21" pos:end="485:54"><expr pos:start="485:21" pos:end="485:53"><call pos:start="485:21" pos:end="485:53"><name pos:start="485:21" pos:end="485:33">put_timestamp</name><argument_list pos:start="485:34" pos:end="485:53">(<argument pos:start="485:35" pos:end="485:41"><expr pos:start="485:35" pos:end="485:41"><name pos:start="485:35" pos:end="485:41"><name pos:start="485:35" pos:end="485:37">ctx</name><operator pos:start="485:38" pos:end="485:39">-&gt;</operator><name pos:start="485:40" pos:end="485:41">pb</name></name></expr></argument>, <argument pos:start="485:44" pos:end="485:47"><expr pos:start="485:44" pos:end="485:47"><literal type="number" pos:start="485:44" pos:end="485:47">0x01</literal></expr></argument>, <argument pos:start="485:50" pos:end="485:52"><expr pos:start="485:50" pos:end="485:52"><name pos:start="485:50" pos:end="485:52">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="487:19" pos:end="491:17">else <block pos:start="487:24" pos:end="491:17">{<block_content pos:start="489:21" pos:end="489:54">

                    <expr_stmt pos:start="489:21" pos:end="489:54"><expr pos:start="489:21" pos:end="489:53"><call pos:start="489:21" pos:end="489:53"><name pos:start="489:21" pos:end="489:33">put_timestamp</name><argument_list pos:start="489:34" pos:end="489:53">(<argument pos:start="489:35" pos:end="489:41"><expr pos:start="489:35" pos:end="489:41"><name pos:start="489:35" pos:end="489:41"><name pos:start="489:35" pos:end="489:37">ctx</name><operator pos:start="489:38" pos:end="489:39">-&gt;</operator><name pos:start="489:40" pos:end="489:41">pb</name></name></expr></argument>, <argument pos:start="489:44" pos:end="489:47"><expr pos:start="489:44" pos:end="489:47"><literal type="number" pos:start="489:44" pos:end="489:47">0x02</literal></expr></argument>, <argument pos:start="489:50" pos:end="489:52"><expr pos:start="489:50" pos:end="489:52"><name pos:start="489:50" pos:end="489:52">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="493:15" pos:end="497:13">else <block pos:start="493:20" pos:end="497:13">{<block_content pos:start="495:17" pos:end="495:40">

                <expr_stmt pos:start="495:17" pos:end="495:40"><expr pos:start="495:17" pos:end="495:39"><call pos:start="495:17" pos:end="495:39"><name pos:start="495:17" pos:end="495:24">put_byte</name><argument_list pos:start="495:25" pos:end="495:39">(<argument pos:start="495:26" pos:end="495:32"><expr pos:start="495:26" pos:end="495:32"><name pos:start="495:26" pos:end="495:32"><name pos:start="495:26" pos:end="495:28">ctx</name><operator pos:start="495:29" pos:end="495:30">-&gt;</operator><name pos:start="495:31" pos:end="495:32">pb</name></name></expr></argument>, <argument pos:start="495:35" pos:end="495:38"><expr pos:start="495:35" pos:end="495:38"><literal type="number" pos:start="495:35" pos:end="495:38">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="503:9" pos:end="517:9"><if pos:start="503:9" pos:end="517:9">if <condition pos:start="503:12" pos:end="503:24">(<expr pos:start="503:13" pos:end="503:23"><name pos:start="503:13" pos:end="503:23"><name pos:start="503:13" pos:end="503:13">s</name><operator pos:start="503:14" pos:end="503:15">-&gt;</operator><name pos:start="503:16" pos:end="503:23">is_mpeg2</name></name></expr>)</condition> <block pos:start="503:26" pos:end="517:9">{<block_content pos:start="509:13" pos:end="515:40">

            <comment type="block" pos:start="505:13" pos:end="507:66">/* special stuffing byte that is always written

               to prevent accidental generation of start codes. */</comment>

            <expr_stmt pos:start="509:13" pos:end="509:36"><expr pos:start="509:13" pos:end="509:35"><call pos:start="509:13" pos:end="509:35"><name pos:start="509:13" pos:end="509:20">put_byte</name><argument_list pos:start="509:21" pos:end="509:35">(<argument pos:start="509:22" pos:end="509:28"><expr pos:start="509:22" pos:end="509:28"><name pos:start="509:22" pos:end="509:28"><name pos:start="509:22" pos:end="509:24">ctx</name><operator pos:start="509:25" pos:end="509:26">-&gt;</operator><name pos:start="509:27" pos:end="509:28">pb</name></name></expr></argument>, <argument pos:start="509:31" pos:end="509:34"><expr pos:start="509:31" pos:end="509:34"><literal type="number" pos:start="509:31" pos:end="509:34">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="513:13" pos:end="515:40">for<control pos:start="513:16" pos:end="513:40">(<init pos:start="513:17" pos:end="513:20"><expr pos:start="513:17" pos:end="513:19"><name pos:start="513:17" pos:end="513:17">i</name><operator pos:start="513:18" pos:end="513:18">=</operator><literal type="number" pos:start="513:19" pos:end="513:19">0</literal></expr>;</init><condition pos:start="513:21" pos:end="513:36"><expr pos:start="513:21" pos:end="513:35"><name pos:start="513:21" pos:end="513:21">i</name><operator pos:start="513:22" pos:end="513:22">&lt;</operator><name pos:start="513:23" pos:end="513:35">stuffing_size</name></expr>;</condition><incr pos:start="513:37" pos:end="513:39"><expr pos:start="513:37" pos:end="513:39"><name pos:start="513:37" pos:end="513:37">i</name><operator pos:start="513:38" pos:end="513:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="515:17" pos:end="515:40"><block_content pos:start="515:17" pos:end="515:40">

                <expr_stmt pos:start="515:17" pos:end="515:40"><expr pos:start="515:17" pos:end="515:39"><call pos:start="515:17" pos:end="515:39"><name pos:start="515:17" pos:end="515:24">put_byte</name><argument_list pos:start="515:25" pos:end="515:39">(<argument pos:start="515:26" pos:end="515:32"><expr pos:start="515:26" pos:end="515:32"><name pos:start="515:26" pos:end="515:32"><name pos:start="515:26" pos:end="515:28">ctx</name><operator pos:start="515:29" pos:end="515:30">-&gt;</operator><name pos:start="515:31" pos:end="515:32">pb</name></name></expr></argument>, <argument pos:start="515:35" pos:end="515:38"><expr pos:start="515:35" pos:end="515:38"><literal type="number" pos:start="515:35" pos:end="515:38">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="521:9" pos:end="549:9"><if pos:start="521:9" pos:end="549:9">if <condition pos:start="521:12" pos:end="521:42">(<expr pos:start="521:13" pos:end="521:41"><name pos:start="521:13" pos:end="521:21">startcode</name> <operator pos:start="521:23" pos:end="521:24">==</operator> <name pos:start="521:26" pos:end="521:41">PRIVATE_STREAM_1</name></expr>)</condition> <block pos:start="521:44" pos:end="549:9">{<block_content pos:start="523:13" pos:end="547:13">

            <expr_stmt pos:start="523:13" pos:end="523:34"><expr pos:start="523:13" pos:end="523:33"><call pos:start="523:13" pos:end="523:33"><name pos:start="523:13" pos:end="523:20">put_byte</name><argument_list pos:start="523:21" pos:end="523:33">(<argument pos:start="523:22" pos:end="523:28"><expr pos:start="523:22" pos:end="523:28"><name pos:start="523:22" pos:end="523:28"><name pos:start="523:22" pos:end="523:24">ctx</name><operator pos:start="523:25" pos:end="523:26">-&gt;</operator><name pos:start="523:27" pos:end="523:28">pb</name></name></expr></argument>, <argument pos:start="523:31" pos:end="523:32"><expr pos:start="523:31" pos:end="523:32"><name pos:start="523:31" pos:end="523:32">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="525:13" pos:end="547:13"><if pos:start="525:13" pos:end="539:13">if <condition pos:start="525:16" pos:end="525:27">(<expr pos:start="525:17" pos:end="525:26"><name pos:start="525:17" pos:end="525:18">id</name> <operator pos:start="525:20" pos:end="525:21">&gt;=</operator> <literal type="number" pos:start="525:23" pos:end="525:26">0xa0</literal></expr>)</condition> <block pos:start="525:29" pos:end="539:13">{<block_content pos:start="529:17" pos:end="537:58">

                <comment type="block" pos:start="527:17" pos:end="527:49">/* LPCM (XXX: check nb_frames) */</comment>

                <expr_stmt pos:start="529:17" pos:end="529:37"><expr pos:start="529:17" pos:end="529:36"><call pos:start="529:17" pos:end="529:36"><name pos:start="529:17" pos:end="529:24">put_byte</name><argument_list pos:start="529:25" pos:end="529:36">(<argument pos:start="529:26" pos:end="529:32"><expr pos:start="529:26" pos:end="529:32"><name pos:start="529:26" pos:end="529:32"><name pos:start="529:26" pos:end="529:28">ctx</name><operator pos:start="529:29" pos:end="529:30">-&gt;</operator><name pos:start="529:31" pos:end="529:32">pb</name></name></expr></argument>, <argument pos:start="529:35" pos:end="529:35"><expr pos:start="529:35" pos:end="529:35"><literal type="number" pos:start="529:35" pos:end="529:35">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="531:17" pos:end="531:37"><expr pos:start="531:17" pos:end="531:36"><call pos:start="531:17" pos:end="531:36"><name pos:start="531:17" pos:end="531:24">put_be16</name><argument_list pos:start="531:25" pos:end="531:36">(<argument pos:start="531:26" pos:end="531:32"><expr pos:start="531:26" pos:end="531:32"><name pos:start="531:26" pos:end="531:32"><name pos:start="531:26" pos:end="531:28">ctx</name><operator pos:start="531:29" pos:end="531:30">-&gt;</operator><name pos:start="531:31" pos:end="531:32">pb</name></name></expr></argument>, <argument pos:start="531:35" pos:end="531:35"><expr pos:start="531:35" pos:end="531:35"><literal type="number" pos:start="531:35" pos:end="531:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="531:39" pos:end="531:63">/* skip 3 header bytes */</comment>

                <expr_stmt pos:start="533:17" pos:end="533:58"><expr pos:start="533:17" pos:end="533:57"><call pos:start="533:17" pos:end="533:57"><name pos:start="533:17" pos:end="533:24">put_byte</name><argument_list pos:start="533:25" pos:end="533:57">(<argument pos:start="533:26" pos:end="533:32"><expr pos:start="533:26" pos:end="533:32"><name pos:start="533:26" pos:end="533:32"><name pos:start="533:26" pos:end="533:28">ctx</name><operator pos:start="533:29" pos:end="533:30">-&gt;</operator><name pos:start="533:31" pos:end="533:32">pb</name></name></expr></argument>, <argument pos:start="533:35" pos:end="533:56"><expr pos:start="533:35" pos:end="533:56"><name pos:start="533:35" pos:end="533:56"><name pos:start="533:35" pos:end="533:40">stream</name><operator pos:start="533:41" pos:end="533:42">-&gt;</operator><name pos:start="533:43" pos:end="533:53">lpcm_header</name><index pos:start="533:54" pos:end="533:56">[<expr pos:start="533:55" pos:end="533:55"><literal type="number" pos:start="533:55" pos:end="533:55">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="535:17" pos:end="535:58"><expr pos:start="535:17" pos:end="535:57"><call pos:start="535:17" pos:end="535:57"><name pos:start="535:17" pos:end="535:24">put_byte</name><argument_list pos:start="535:25" pos:end="535:57">(<argument pos:start="535:26" pos:end="535:32"><expr pos:start="535:26" pos:end="535:32"><name pos:start="535:26" pos:end="535:32"><name pos:start="535:26" pos:end="535:28">ctx</name><operator pos:start="535:29" pos:end="535:30">-&gt;</operator><name pos:start="535:31" pos:end="535:32">pb</name></name></expr></argument>, <argument pos:start="535:35" pos:end="535:56"><expr pos:start="535:35" pos:end="535:56"><name pos:start="535:35" pos:end="535:56"><name pos:start="535:35" pos:end="535:40">stream</name><operator pos:start="535:41" pos:end="535:42">-&gt;</operator><name pos:start="535:43" pos:end="535:53">lpcm_header</name><index pos:start="535:54" pos:end="535:56">[<expr pos:start="535:55" pos:end="535:55"><literal type="number" pos:start="535:55" pos:end="535:55">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="537:17" pos:end="537:58"><expr pos:start="537:17" pos:end="537:57"><call pos:start="537:17" pos:end="537:57"><name pos:start="537:17" pos:end="537:24">put_byte</name><argument_list pos:start="537:25" pos:end="537:57">(<argument pos:start="537:26" pos:end="537:32"><expr pos:start="537:26" pos:end="537:32"><name pos:start="537:26" pos:end="537:32"><name pos:start="537:26" pos:end="537:28">ctx</name><operator pos:start="537:29" pos:end="537:30">-&gt;</operator><name pos:start="537:31" pos:end="537:32">pb</name></name></expr></argument>, <argument pos:start="537:35" pos:end="537:56"><expr pos:start="537:35" pos:end="537:56"><name pos:start="537:35" pos:end="537:56"><name pos:start="537:35" pos:end="537:40">stream</name><operator pos:start="537:41" pos:end="537:42">-&gt;</operator><name pos:start="537:43" pos:end="537:53">lpcm_header</name><index pos:start="537:54" pos:end="537:56">[<expr pos:start="537:55" pos:end="537:55"><literal type="number" pos:start="537:55" pos:end="537:55">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="539:15" pos:end="547:13">else if <condition pos:start="539:23" pos:end="539:34">(<expr pos:start="539:24" pos:end="539:33"><name pos:start="539:24" pos:end="539:25">id</name> <operator pos:start="539:27" pos:end="539:28">&gt;=</operator> <literal type="number" pos:start="539:30" pos:end="539:33">0x40</literal></expr>)</condition> <block pos:start="539:36" pos:end="547:13">{<block_content pos:start="543:17" pos:end="545:50">

                <comment type="block" pos:start="541:17" pos:end="541:25">/* AC3 */</comment>

                <expr_stmt pos:start="543:17" pos:end="543:45"><expr pos:start="543:17" pos:end="543:44"><call pos:start="543:17" pos:end="543:44"><name pos:start="543:17" pos:end="543:24">put_byte</name><argument_list pos:start="543:25" pos:end="543:44">(<argument pos:start="543:26" pos:end="543:32"><expr pos:start="543:26" pos:end="543:32"><name pos:start="543:26" pos:end="543:32"><name pos:start="543:26" pos:end="543:28">ctx</name><operator pos:start="543:29" pos:end="543:30">-&gt;</operator><name pos:start="543:31" pos:end="543:32">pb</name></name></expr></argument>, <argument pos:start="543:35" pos:end="543:43"><expr pos:start="543:35" pos:end="543:43"><name pos:start="543:35" pos:end="543:43">nb_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="545:17" pos:end="545:50"><expr pos:start="545:17" pos:end="545:49"><call pos:start="545:17" pos:end="545:49"><name pos:start="545:17" pos:end="545:24">put_be16</name><argument_list pos:start="545:25" pos:end="545:49">(<argument pos:start="545:26" pos:end="545:32"><expr pos:start="545:26" pos:end="545:32"><name pos:start="545:26" pos:end="545:32"><name pos:start="545:26" pos:end="545:28">ctx</name><operator pos:start="545:29" pos:end="545:30">-&gt;</operator><name pos:start="545:31" pos:end="545:32">pb</name></name></expr></argument>, <argument pos:start="545:35" pos:end="545:48"><expr pos:start="545:35" pos:end="545:48"><name pos:start="545:35" pos:end="545:46">trailer_size</name><operator pos:start="545:47" pos:end="545:47">+</operator><literal type="number" pos:start="545:48" pos:end="545:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="553:9" pos:end="553:25">/* output data */</comment>

        <if_stmt pos:start="555:9" pos:end="557:22"><if pos:start="555:9" pos:end="557:22">if<condition pos:start="555:11" pos:end="555:103">(<expr pos:start="555:12" pos:end="555:102"><call pos:start="555:12" pos:end="555:98"><name pos:start="555:12" pos:end="555:31">av_fifo_generic_read</name><argument_list pos:start="555:32" pos:end="555:98">(<argument pos:start="555:33" pos:end="555:45"><expr pos:start="555:33" pos:end="555:45"><operator pos:start="555:33" pos:end="555:33">&amp;</operator><name pos:start="555:34" pos:end="555:45"><name pos:start="555:34" pos:end="555:39">stream</name><operator pos:start="555:40" pos:end="555:41">-&gt;</operator><name pos:start="555:42" pos:end="555:45">fifo</name></name></expr></argument>, <argument pos:start="555:48" pos:end="555:75"><expr pos:start="555:48" pos:end="555:75"><name pos:start="555:48" pos:end="555:59">payload_size</name> <operator pos:start="555:61" pos:end="555:61">-</operator> <name pos:start="555:63" pos:end="555:75">stuffing_size</name></expr></argument>, <argument pos:start="555:78" pos:end="555:88"><expr pos:start="555:78" pos:end="555:88"><operator pos:start="555:78" pos:end="555:78">&amp;</operator><name pos:start="555:79" pos:end="555:88">put_buffer</name></expr></argument>, <argument pos:start="555:91" pos:end="555:97"><expr pos:start="555:91" pos:end="555:97"><name pos:start="555:91" pos:end="555:97"><name pos:start="555:91" pos:end="555:93">ctx</name><operator pos:start="555:94" pos:end="555:95">-&gt;</operator><name pos:start="555:96" pos:end="555:97">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="555:100" pos:end="555:100">&lt;</operator> <literal type="number" pos:start="555:102" pos:end="555:102">0</literal></expr>)</condition><block type="pseudo" pos:start="557:13" pos:end="557:22"><block_content pos:start="557:13" pos:end="557:22">

            <return pos:start="557:13" pos:end="557:22">return <expr pos:start="557:20" pos:end="557:21"><operator pos:start="557:20" pos:end="557:20">-</operator><literal type="number" pos:start="557:21" pos:end="557:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="559:9" pos:end="559:64"><expr pos:start="559:9" pos:end="559:63"><name pos:start="559:9" pos:end="559:31"><name pos:start="559:9" pos:end="559:14">stream</name><operator pos:start="559:15" pos:end="559:16">-&gt;</operator><name pos:start="559:17" pos:end="559:31">bytes_to_iframe</name></name> <operator pos:start="559:33" pos:end="559:34">-=</operator> <name pos:start="559:36" pos:end="559:47">payload_size</name> <operator pos:start="559:49" pos:end="559:49">-</operator> <name pos:start="559:51" pos:end="559:63">stuffing_size</name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="561:6" pos:end="567:5">else<block pos:start="561:10" pos:end="567:5">{<block_content pos:start="563:9" pos:end="565:25">

        <expr_stmt pos:start="563:9" pos:end="565:25"><expr pos:start="563:9" pos:end="565:24"><name pos:start="563:9" pos:end="563:20">payload_size</name><operator pos:start="563:21" pos:end="563:21">=</operator>

        <name pos:start="565:9" pos:end="565:21">stuffing_size</name><operator pos:start="565:22" pos:end="565:22">=</operator> <literal type="number" pos:start="565:24" pos:end="565:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="571:5" pos:end="573:58"><if pos:start="571:5" pos:end="573:58">if <condition pos:start="571:8" pos:end="571:29">(<expr pos:start="571:9" pos:end="571:28"><name pos:start="571:9" pos:end="571:24">pad_packet_bytes</name> <operator pos:start="571:26" pos:end="571:26">&gt;</operator> <literal type="number" pos:start="571:28" pos:end="571:28">0</literal></expr>)</condition><block type="pseudo" pos:start="573:9" pos:end="573:58"><block_content pos:start="573:9" pos:end="573:58">

        <expr_stmt pos:start="573:9" pos:end="573:58"><expr pos:start="573:9" pos:end="573:57"><call pos:start="573:9" pos:end="573:57"><name pos:start="573:9" pos:end="573:26">put_padding_packet</name><argument_list pos:start="573:27" pos:end="573:57">(<argument pos:start="573:28" pos:end="573:30"><expr pos:start="573:28" pos:end="573:30"><name pos:start="573:28" pos:end="573:30">ctx</name></expr></argument>,<argument pos:start="573:32" pos:end="573:38"><expr pos:start="573:32" pos:end="573:38"><name pos:start="573:32" pos:end="573:38"><name pos:start="573:32" pos:end="573:34">ctx</name><operator pos:start="573:35" pos:end="573:36">-&gt;</operator><name pos:start="573:37" pos:end="573:38">pb</name></name></expr></argument>, <argument pos:start="573:41" pos:end="573:56"><expr pos:start="573:41" pos:end="573:56"><name pos:start="573:41" pos:end="573:56">pad_packet_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="577:5" pos:end="579:32">for<control pos:start="577:8" pos:end="577:35">(<init pos:start="577:9" pos:end="577:12"><expr pos:start="577:9" pos:end="577:11"><name pos:start="577:9" pos:end="577:9">i</name><operator pos:start="577:10" pos:end="577:10">=</operator><literal type="number" pos:start="577:11" pos:end="577:11">0</literal></expr>;</init><condition pos:start="577:13" pos:end="577:31"><expr pos:start="577:13" pos:end="577:30"><name pos:start="577:13" pos:end="577:13">i</name><operator pos:start="577:14" pos:end="577:14">&lt;</operator><name pos:start="577:15" pos:end="577:30">zero_trail_bytes</name></expr>;</condition><incr pos:start="577:32" pos:end="577:34"><expr pos:start="577:32" pos:end="577:34"><name pos:start="577:32" pos:end="577:32">i</name><operator pos:start="577:33" pos:end="577:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="579:9" pos:end="579:32"><block_content pos:start="579:9" pos:end="579:32">

        <expr_stmt pos:start="579:9" pos:end="579:32"><expr pos:start="579:9" pos:end="579:31"><call pos:start="579:9" pos:end="579:31"><name pos:start="579:9" pos:end="579:16">put_byte</name><argument_list pos:start="579:17" pos:end="579:31">(<argument pos:start="579:18" pos:end="579:24"><expr pos:start="579:18" pos:end="579:24"><name pos:start="579:18" pos:end="579:24"><name pos:start="579:18" pos:end="579:20">ctx</name><operator pos:start="579:21" pos:end="579:22">-&gt;</operator><name pos:start="579:23" pos:end="579:24">pb</name></name></expr></argument>, <argument pos:start="579:27" pos:end="579:30"><expr pos:start="579:27" pos:end="579:30"><literal type="number" pos:start="579:27" pos:end="579:30">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="583:5" pos:end="583:30"><expr pos:start="583:5" pos:end="583:29"><call pos:start="583:5" pos:end="583:29"><name pos:start="583:5" pos:end="583:20">put_flush_packet</name><argument_list pos:start="583:21" pos:end="583:29">(<argument pos:start="583:22" pos:end="583:28"><expr pos:start="583:22" pos:end="583:28"><name pos:start="583:22" pos:end="583:28"><name pos:start="583:22" pos:end="583:24">ctx</name><operator pos:start="583:25" pos:end="583:26">-&gt;</operator><name pos:start="583:27" pos:end="583:28">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="587:5" pos:end="587:23"><expr pos:start="587:5" pos:end="587:22"><name pos:start="587:5" pos:end="587:20"><name pos:start="587:5" pos:end="587:5">s</name><operator pos:start="587:6" pos:end="587:7">-&gt;</operator><name pos:start="587:8" pos:end="587:20">packet_number</name></name><operator pos:start="587:21" pos:end="587:22">++</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="591:5" pos:end="595:22">/* only increase the stream packet number if this pack actually contains

       something that is specific to this stream! I.e. a dedicated header

       or some data.*/</comment>

    <if_stmt pos:start="597:5" pos:end="599:32"><if pos:start="597:5" pos:end="599:32">if <condition pos:start="597:8" pos:end="597:22">(<expr pos:start="597:9" pos:end="597:21"><operator pos:start="597:9" pos:end="597:9">!</operator><name pos:start="597:10" pos:end="597:21">general_pack</name></expr>)</condition><block type="pseudo" pos:start="599:9" pos:end="599:32"><block_content pos:start="599:9" pos:end="599:32">

        <expr_stmt pos:start="599:9" pos:end="599:32"><expr pos:start="599:9" pos:end="599:31"><name pos:start="599:9" pos:end="599:29"><name pos:start="599:9" pos:end="599:14">stream</name><operator pos:start="599:15" pos:end="599:16">-&gt;</operator><name pos:start="599:17" pos:end="599:29">packet_number</name></name><operator pos:start="599:30" pos:end="599:31">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="603:5" pos:end="603:40">return <expr pos:start="603:12" pos:end="603:39"><name pos:start="603:12" pos:end="603:23">payload_size</name> <operator pos:start="603:25" pos:end="603:25">-</operator> <name pos:start="603:27" pos:end="603:39">stuffing_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
