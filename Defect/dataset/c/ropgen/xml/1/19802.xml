<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19802.c" pos:tabs="8"><macro pos:start="1:1" pos:end="2:50"><name pos:start="1:1" pos:end="1:21">vmxnet3_io_bar0_write</name><argument_list pos:start="1:22" pos:end="2:50">(<argument pos:start="1:23" pos:end="1:34">void *opaque</argument>, <argument pos:start="1:37" pos:end="1:47">hwaddr addr</argument>,
                      <argument pos:start="2:23" pos:end="2:34">uint64_t val</argument>, <argument pos:start="2:37" pos:end="2:49">unsigned size</argument>)</argument_list></macro>
<block pos:start="3:1" pos:end="23:42">{<block_content pos:start="4:5" pos:end="23:42">
    <decl_stmt pos:start="4:5" pos:end="4:29"><decl pos:start="4:5" pos:end="4:28"><type pos:start="4:5" pos:end="4:18"><name pos:start="4:5" pos:end="4:16">VMXNET3State</name> <modifier pos:start="4:18" pos:end="4:18">*</modifier></type><name pos:start="4:19" pos:end="4:19">s</name> <init pos:start="4:21" pos:end="4:28">= <expr pos:start="4:23" pos:end="4:28"><name pos:start="4:23" pos:end="4:28">opaque</name></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="5:5" pos:end="23:42"><if pos:start="5:5" pos:end="23:42">if <condition pos:start="5:8" pos:end="6:73">(<expr pos:start="5:9" pos:end="6:72"><call pos:start="5:9" pos:end="6:72"><name pos:start="5:9" pos:end="5:28">VMW_IS_MULTIREG_ADDR</name><argument_list pos:start="5:29" pos:end="6:72">(<argument pos:start="5:30" pos:end="5:33"><expr pos:start="5:30" pos:end="5:33"><name pos:start="5:30" pos:end="5:33">addr</name></expr></argument>, <argument pos:start="5:36" pos:end="5:53"><expr pos:start="5:36" pos:end="5:53"><name pos:start="5:36" pos:end="5:53">VMXNET3_REG_TXPROD</name></expr></argument>,
                        <argument pos:start="6:25" pos:end="6:52"><expr pos:start="6:25" pos:end="6:52"><name pos:start="6:25" pos:end="6:52">VMXNET3_DEVICE_MAX_TX_QUEUES</name></expr></argument>, <argument pos:start="6:55" pos:end="6:71"><expr pos:start="6:55" pos:end="6:71"><name pos:start="6:55" pos:end="6:71">VMXNET3_REG_ALIGN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6:75" pos:end="23:42">{<block_content pos:start="7:9" pos:end="23:42">
        <decl_stmt pos:start="7:9" pos:end="9:56"><decl pos:start="7:9" pos:end="9:55"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:24">tx_queue_idx</name> <init pos:start="7:26" pos:end="9:55">=
            <expr pos:start="8:13" pos:end="9:55"><call pos:start="8:13" pos:end="9:55"><name pos:start="8:13" pos:end="8:36">VMW_MULTIREG_IDX_BY_ADDR</name><argument_list pos:start="8:37" pos:end="9:55">(<argument pos:start="8:38" pos:end="8:41"><expr pos:start="8:38" pos:end="8:41"><name pos:start="8:38" pos:end="8:41">addr</name></expr></argument>, <argument pos:start="8:44" pos:end="8:61"><expr pos:start="8:44" pos:end="8:61"><name pos:start="8:44" pos:end="8:61">VMXNET3_REG_TXPROD</name></expr></argument>,
                                     <argument pos:start="9:38" pos:end="9:54"><expr pos:start="9:38" pos:end="9:54"><name pos:start="9:38" pos:end="9:54">VMXNET3_REG_ALIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="10:9" pos:end="10:43"><expr pos:start="10:9" pos:end="10:42"><call pos:start="10:9" pos:end="10:42"><name pos:start="10:9" pos:end="10:14">assert</name><argument_list pos:start="10:15" pos:end="10:42">(<argument pos:start="10:16" pos:end="10:41"><expr pos:start="10:16" pos:end="10:41"><name pos:start="10:16" pos:end="10:27">tx_queue_idx</name> <operator pos:start="10:29" pos:end="10:30">&lt;=</operator> <name pos:start="10:32" pos:end="10:41"><name pos:start="10:32" pos:end="10:32">s</name><operator pos:start="10:33" pos:end="10:34">-&gt;</operator><name pos:start="10:35" pos:end="10:41">txq_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="11:9" pos:end="11:50"><expr pos:start="11:9" pos:end="11:49"><call pos:start="11:9" pos:end="11:49"><name pos:start="11:9" pos:end="11:32">vmxnet3_process_tx_queue</name><argument_list pos:start="11:33" pos:end="11:49">(<argument pos:start="11:34" pos:end="11:34"><expr pos:start="11:34" pos:end="11:34"><name pos:start="11:34" pos:end="11:34">s</name></expr></argument>, <argument pos:start="11:37" pos:end="11:48"><expr pos:start="11:37" pos:end="11:48"><name pos:start="11:37" pos:end="11:48">tx_queue_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="12:5" pos:end="23:42"><if pos:start="12:5" pos:end="23:42">if <condition pos:start="12:8" pos:end="13:62">(<expr pos:start="12:9" pos:end="13:61"><call pos:start="12:9" pos:end="13:61"><name pos:start="12:9" pos:end="12:28">VMW_IS_MULTIREG_ADDR</name><argument_list pos:start="12:29" pos:end="13:61">(<argument pos:start="12:30" pos:end="12:33"><expr pos:start="12:30" pos:end="12:33"><name pos:start="12:30" pos:end="12:33">addr</name></expr></argument>, <argument pos:start="12:36" pos:end="12:50"><expr pos:start="12:36" pos:end="12:50"><name pos:start="12:36" pos:end="12:50">VMXNET3_REG_IMR</name></expr></argument>,
                        <argument pos:start="13:25" pos:end="13:41"><expr pos:start="13:25" pos:end="13:41"><name pos:start="13:25" pos:end="13:41">VMXNET3_MAX_INTRS</name></expr></argument>, <argument pos:start="13:44" pos:end="13:60"><expr pos:start="13:44" pos:end="13:60"><name pos:start="13:44" pos:end="13:60">VMXNET3_REG_ALIGN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:64" pos:end="23:42">{<block_content pos:start="14:9" pos:end="23:42">
        <decl_stmt pos:start="14:9" pos:end="15:60"><decl pos:start="14:9" pos:end="15:59"><type pos:start="14:9" pos:end="14:11"><name pos:start="14:9" pos:end="14:11">int</name></type> <name pos:start="14:13" pos:end="14:13">l</name> <init pos:start="14:15" pos:end="15:59">= <expr pos:start="14:17" pos:end="15:59"><call pos:start="14:17" pos:end="15:59"><name pos:start="14:17" pos:end="14:40">VMW_MULTIREG_IDX_BY_ADDR</name><argument_list pos:start="14:41" pos:end="15:59">(<argument pos:start="14:42" pos:end="14:45"><expr pos:start="14:42" pos:end="14:45"><name pos:start="14:42" pos:end="14:45">addr</name></expr></argument>, <argument pos:start="14:48" pos:end="14:62"><expr pos:start="14:48" pos:end="14:62"><name pos:start="14:48" pos:end="14:62">VMXNET3_REG_IMR</name></expr></argument>,
                                         <argument pos:start="15:42" pos:end="15:58"><expr pos:start="15:42" pos:end="15:58"><name pos:start="15:42" pos:end="15:58">VMXNET3_REG_ALIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:76"><expr pos:start="16:9" pos:end="16:75"><call pos:start="16:9" pos:end="16:75"><name pos:start="16:9" pos:end="16:17">VMW_CBPRN</name><argument_list pos:start="16:18" pos:end="16:75">(<argument pos:start="16:19" pos:end="16:66"><expr pos:start="16:19" pos:end="16:66"><literal type="string" pos:start="16:19" pos:end="16:59">"Interrupt mask for line %d written: 0x%"</literal> <name pos:start="16:61" pos:end="16:66">PRIx64</name></expr></argument>, <argument pos:start="16:69" pos:end="16:69"><expr pos:start="16:69" pos:end="16:69"><name pos:start="16:69" pos:end="16:69">l</name></expr></argument>, <argument pos:start="16:72" pos:end="16:74"><expr pos:start="16:72" pos:end="16:74"><name pos:start="16:72" pos:end="16:74">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:41">vmxnet3_on_interrupt_mask_changed</name><argument_list pos:start="17:42" pos:end="17:52">(<argument pos:start="17:43" pos:end="17:43"><expr pos:start="17:43" pos:end="17:43"><name pos:start="17:43" pos:end="17:43">s</name></expr></argument>, <argument pos:start="17:46" pos:end="17:46"><expr pos:start="17:46" pos:end="17:46"><name pos:start="17:46" pos:end="17:46">l</name></expr></argument>, <argument pos:start="17:49" pos:end="17:51"><expr pos:start="17:49" pos:end="17:51"><name pos:start="17:49" pos:end="17:51">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="23:42"><if pos:start="18:5" pos:end="23:42">if <condition pos:start="18:8" pos:end="21:73">(<expr pos:start="18:9" pos:end="21:72"><call pos:start="18:9" pos:end="19:72"><name pos:start="18:9" pos:end="18:28">VMW_IS_MULTIREG_ADDR</name><argument_list pos:start="18:29" pos:end="19:72">(<argument pos:start="18:30" pos:end="18:33"><expr pos:start="18:30" pos:end="18:33"><name pos:start="18:30" pos:end="18:33">addr</name></expr></argument>, <argument pos:start="18:36" pos:end="18:53"><expr pos:start="18:36" pos:end="18:53"><name pos:start="18:36" pos:end="18:53">VMXNET3_REG_RXPROD</name></expr></argument>,
                        <argument pos:start="19:25" pos:end="19:52"><expr pos:start="19:25" pos:end="19:52"><name pos:start="19:25" pos:end="19:52">VMXNET3_DEVICE_MAX_RX_QUEUES</name></expr></argument>, <argument pos:start="19:55" pos:end="19:71"><expr pos:start="19:55" pos:end="19:71"><name pos:start="19:55" pos:end="19:71">VMXNET3_REG_ALIGN</name></expr></argument>)</argument_list></call> <operator pos:start="19:74" pos:end="19:75">||</operator>
       <call pos:start="20:8" pos:end="21:72"><name pos:start="20:8" pos:end="20:27">VMW_IS_MULTIREG_ADDR</name><argument_list pos:start="20:28" pos:end="21:72">(<argument pos:start="20:29" pos:end="20:32"><expr pos:start="20:29" pos:end="20:32"><name pos:start="20:29" pos:end="20:32">addr</name></expr></argument>, <argument pos:start="20:35" pos:end="20:53"><expr pos:start="20:35" pos:end="20:53"><name pos:start="20:35" pos:end="20:53">VMXNET3_REG_RXPROD2</name></expr></argument>,
                        <argument pos:start="21:25" pos:end="21:52"><expr pos:start="21:25" pos:end="21:52"><name pos:start="21:25" pos:end="21:52">VMXNET3_DEVICE_MAX_RX_QUEUES</name></expr></argument>, <argument pos:start="21:55" pos:end="21:71"><expr pos:start="21:55" pos:end="21:71"><name pos:start="21:55" pos:end="21:71">VMXNET3_REG_ALIGN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:75" pos:end="23:42">{<block_content pos:start="22:5" pos:end="23:42">
    <expr_stmt pos:start="22:5" pos:end="23:42"><expr pos:start="22:5" pos:end="23:41"><call pos:start="22:5" pos:end="23:41"><name pos:start="22:5" pos:end="22:13">VMW_WRPRN</name><argument_list pos:start="22:14" pos:end="23:41">(<argument pos:start="22:15" pos:end="22:71"><expr pos:start="22:15" pos:end="22:71"><literal type="string" pos:start="22:15" pos:end="22:37">"BAR0 unknown write [%"</literal> <name pos:start="22:39" pos:end="22:44">PRIx64</name> <literal type="string" pos:start="22:46" pos:end="22:52">"] = %"</literal> <name pos:start="22:54" pos:end="22:59">PRIx64</name> <literal type="string" pos:start="22:61" pos:end="22:71">", size %d"</literal></expr></argument>,
              <argument pos:start="23:15" pos:end="23:29"><expr pos:start="23:15" pos:end="23:29"><operator pos:start="23:15" pos:end="23:15">(</operator><name pos:start="23:16" pos:end="23:23">uint64_t</name><operator pos:start="23:24" pos:end="23:24">)</operator> <name pos:start="23:26" pos:end="23:29">addr</name></expr></argument>, <argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:34">val</name></expr></argument>, <argument pos:start="23:37" pos:end="23:40"><expr pos:start="23:37" pos:end="23:40"><name pos:start="23:37" pos:end="23:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></unit>
