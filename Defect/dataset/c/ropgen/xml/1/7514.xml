<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7514.c" pos:tabs="8"><function pos:start="1:1" pos:end="315:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">s390_init</name><parameter_list pos:start="1:22" pos:end="11:44">(<parameter pos:start="1:23" pos:end="1:44"><decl pos:start="1:23" pos:end="1:44"><type pos:start="1:23" pos:end="1:44"><name pos:start="1:23" pos:end="1:32">ram_addr_t</name></type> <name pos:start="1:34" pos:end="1:44">my_ram_size</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:45"><decl pos:start="3:23" pos:end="3:45"><type pos:start="3:23" pos:end="3:45"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:32">char</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:45">boot_device</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:49"><decl pos:start="5:23" pos:end="5:49"><type pos:start="5:23" pos:end="5:49"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:32">char</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:49">kernel_filename</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:48"><decl pos:start="7:23" pos:end="7:48"><type pos:start="7:23" pos:end="7:48"><specifier pos:start="7:23" pos:end="7:27">const</specifier> <name pos:start="7:29" pos:end="7:32">char</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:48">kernel_cmdline</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:49"><decl pos:start="9:23" pos:end="9:49"><type pos:start="9:23" pos:end="9:49"><specifier pos:start="9:23" pos:end="9:27">const</specifier> <name pos:start="9:29" pos:end="9:32">char</name> <modifier pos:start="9:34" pos:end="9:34">*</modifier></type><name pos:start="9:35" pos:end="9:49">initrd_filename</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:43"><decl pos:start="11:23" pos:end="11:43"><type pos:start="11:23" pos:end="11:43"><specifier pos:start="11:23" pos:end="11:27">const</specifier> <name pos:start="11:29" pos:end="11:32">char</name> <modifier pos:start="11:34" pos:end="11:34">*</modifier></type><name pos:start="11:35" pos:end="11:43">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="315:1">{<block_content pos:start="15:5" pos:end="313:5">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">sysmem</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:44">get_system_memory</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">ram</name> <init pos:start="19:23" pos:end="19:46">= <expr pos:start="19:25" pos:end="19:46"><call pos:start="19:25" pos:end="19:46"><name pos:start="19:25" pos:end="19:29">g_new</name><argument_list pos:start="19:30" pos:end="19:46">(<argument pos:start="19:31" pos:end="19:42"><expr pos:start="19:31" pos:end="19:42"><name pos:start="19:31" pos:end="19:42">MemoryRegion</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ram_addr_t</name></type> <name pos:start="21:16" pos:end="21:26">kernel_size</name> <init pos:start="21:28" pos:end="21:30">= <expr pos:start="21:30" pos:end="21:30"><literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:28">initrd_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:14">ram_addr_t</name></type> <name pos:start="25:16" pos:end="25:26">initrd_size</name> <init pos:start="25:28" pos:end="25:30">= <expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:18"><decl pos:start="27:5" pos:end="27:17"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:13">shift</name> <init pos:start="27:15" pos:end="27:17">= <expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:26"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:11">uint8_t</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type><name pos:start="29:14" pos:end="29:25">storage_keys</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:8">void</name> <modifier pos:start="31:10" pos:end="31:10">*</modifier></type><name pos:start="31:11" pos:end="31:23">virtio_region</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:41"><decl pos:start="33:5" pos:end="33:40"><type pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:22">target_phys_addr_t</name></type> <name pos:start="33:24" pos:end="33:40">virtio_region_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:43"><decl pos:start="35:5" pos:end="35:42"><type pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:22">target_phys_addr_t</name></type> <name pos:start="35:24" pos:end="35:42">virtio_region_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:10"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="41:5" pos:end="43:58">/* s390x ram size detection needs a 16bit multiplier + an increment. So

       guests &gt; 64GB can be specified in 2MB steps etc. */</comment>

    <while pos:start="45:5" pos:end="49:5">while <condition pos:start="45:11" pos:end="45:49">(<expr pos:start="45:12" pos:end="45:48"><operator pos:start="45:12" pos:end="45:12">(</operator><name pos:start="45:13" pos:end="45:23">my_ram_size</name> <operator pos:start="45:25" pos:end="45:26">&gt;&gt;</operator> <operator pos:start="45:28" pos:end="45:28">(</operator><literal type="number" pos:start="45:29" pos:end="45:32">20</literal> <operator pos:start="45:32" pos:end="45:32">+</operator> <name pos:start="45:34" pos:end="45:38">shift</name><operator pos:start="45:39" pos:end="45:39">)</operator><operator pos:start="45:40" pos:end="45:40">)</operator> <operator pos:start="45:42" pos:end="45:42">&gt;</operator> <literal type="number" pos:start="45:44" pos:end="45:48">65535</literal></expr>)</condition> <block pos:start="45:51" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:16">

        <expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:13">shift</name><operator pos:start="47:14" pos:end="47:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="51:5" pos:end="51:62"><expr pos:start="51:5" pos:end="51:61"><name pos:start="51:5" pos:end="51:15">my_ram_size</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:29">my_ram_size</name> <operator pos:start="51:31" pos:end="51:32">&gt;&gt;</operator> <operator pos:start="51:34" pos:end="51:34">(</operator><literal type="number" pos:start="51:35" pos:end="51:38">20</literal> <operator pos:start="51:38" pos:end="51:38">+</operator> <name pos:start="51:40" pos:end="51:44">shift</name><operator pos:start="51:45" pos:end="51:45">)</operator> <operator pos:start="51:47" pos:end="51:48">&lt;&lt;</operator> <operator pos:start="51:50" pos:end="51:50">(</operator><literal type="number" pos:start="51:51" pos:end="51:54">20</literal> <operator pos:start="51:54" pos:end="51:54">+</operator> <name pos:start="51:56" pos:end="51:60">shift</name><operator pos:start="51:61" pos:end="51:61">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:71">/* lets propagate the changed ram size into the global variable. */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:12">ram_size</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:26">my_ram_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:19">/* get a BUS */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:50"><expr pos:start="63:5" pos:end="63:49"><name pos:start="63:5" pos:end="63:12">s390_bus</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:49"><name pos:start="63:16" pos:end="63:35">s390_virtio_bus_init</name><argument_list pos:start="63:36" pos:end="63:49">(<argument pos:start="63:37" pos:end="63:48"><expr pos:start="63:37" pos:end="63:48"><operator pos:start="63:37" pos:end="63:37">&amp;</operator><name pos:start="63:38" pos:end="63:48">my_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:57"><expr pos:start="69:5" pos:end="69:56"><call pos:start="69:5" pos:end="69:56"><name pos:start="69:5" pos:end="69:26">memory_region_init_ram</name><argument_list pos:start="69:27" pos:end="69:56">(<argument pos:start="69:28" pos:end="69:30"><expr pos:start="69:28" pos:end="69:30"><name pos:start="69:28" pos:end="69:30">ram</name></expr></argument>, <argument pos:start="69:33" pos:end="69:42"><expr pos:start="69:33" pos:end="69:42"><literal type="string" pos:start="69:33" pos:end="69:42">"s390.ram"</literal></expr></argument>, <argument pos:start="69:45" pos:end="69:55"><expr pos:start="69:45" pos:end="69:55"><name pos:start="69:45" pos:end="69:55">my_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><call pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:31">vmstate_register_ram_global</name><argument_list pos:start="71:32" pos:end="71:36">(<argument pos:start="71:33" pos:end="71:35"><expr pos:start="71:33" pos:end="71:35"><name pos:start="71:33" pos:end="71:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:48"><expr pos:start="73:5" pos:end="73:47"><call pos:start="73:5" pos:end="73:47"><name pos:start="73:5" pos:end="73:31">memory_region_add_subregion</name><argument_list pos:start="73:32" pos:end="73:47">(<argument pos:start="73:33" pos:end="73:38"><expr pos:start="73:33" pos:end="73:38"><name pos:start="73:33" pos:end="73:38">sysmem</name></expr></argument>, <argument pos:start="73:41" pos:end="73:41"><expr pos:start="73:41" pos:end="73:41"><literal type="number" pos:start="73:41" pos:end="73:41">0</literal></expr></argument>, <argument pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><name pos:start="73:44" pos:end="73:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:29">/* clear virtio region */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:47"><expr pos:start="79:5" pos:end="79:46"><name pos:start="79:5" pos:end="79:21">virtio_region_len</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:35">my_ram_size</name> <operator pos:start="79:37" pos:end="79:37">-</operator> <name pos:start="79:39" pos:end="79:46">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:35"><expr pos:start="81:5" pos:end="81:34"><name pos:start="81:5" pos:end="81:23">virtio_region_start</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:34">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="85:70"><expr pos:start="83:5" pos:end="85:69"><name pos:start="83:5" pos:end="83:17">virtio_region</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <call pos:start="83:21" pos:end="85:69"><name pos:start="83:21" pos:end="83:43">cpu_physical_memory_map</name><argument_list pos:start="83:44" pos:end="85:69">(<argument pos:start="83:45" pos:end="83:63"><expr pos:start="83:45" pos:end="83:63"><name pos:start="83:45" pos:end="83:63">virtio_region_start</name></expr></argument>,

                                            <argument pos:start="85:45" pos:end="85:62"><expr pos:start="85:45" pos:end="85:62"><operator pos:start="85:45" pos:end="85:45">&amp;</operator><name pos:start="85:46" pos:end="85:62">virtio_region_len</name></expr></argument>, <argument pos:start="85:65" pos:end="85:68"><expr pos:start="85:65" pos:end="85:68"><name pos:start="85:65" pos:end="85:68">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:48"><expr pos:start="87:5" pos:end="87:47"><call pos:start="87:5" pos:end="87:47"><name pos:start="87:5" pos:end="87:10">memset</name><argument_list pos:start="87:11" pos:end="87:47">(<argument pos:start="87:12" pos:end="87:24"><expr pos:start="87:12" pos:end="87:24"><name pos:start="87:12" pos:end="87:24">virtio_region</name></expr></argument>, <argument pos:start="87:27" pos:end="87:27"><expr pos:start="87:27" pos:end="87:27"><literal type="number" pos:start="87:27" pos:end="87:27">0</literal></expr></argument>, <argument pos:start="87:30" pos:end="87:46"><expr pos:start="87:30" pos:end="87:46"><name pos:start="87:30" pos:end="87:46">virtio_region_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="91:49"><expr pos:start="89:5" pos:end="91:48"><call pos:start="89:5" pos:end="91:48"><name pos:start="89:5" pos:end="89:29">cpu_physical_memory_unmap</name><argument_list pos:start="89:30" pos:end="91:48">(<argument pos:start="89:31" pos:end="89:43"><expr pos:start="89:31" pos:end="89:43"><name pos:start="89:31" pos:end="89:43">virtio_region</name></expr></argument>, <argument pos:start="89:46" pos:end="89:62"><expr pos:start="89:46" pos:end="89:62"><name pos:start="89:46" pos:end="89:62">virtio_region_len</name></expr></argument>, <argument pos:start="89:65" pos:end="89:65"><expr pos:start="89:65" pos:end="89:65"><literal type="number" pos:start="89:65" pos:end="89:65">1</literal></expr></argument>,

                              <argument pos:start="91:31" pos:end="91:47"><expr pos:start="91:31" pos:end="91:47"><name pos:start="91:31" pos:end="91:47">virtio_region_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:31">/* allocate storage keys */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:61"><expr pos:start="97:5" pos:end="97:60"><name pos:start="97:5" pos:end="97:16">storage_keys</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:60"><name pos:start="97:20" pos:end="97:28">g_malloc0</name><argument_list pos:start="97:29" pos:end="97:60">(<argument pos:start="97:30" pos:end="97:59"><expr pos:start="97:30" pos:end="97:59"><name pos:start="97:30" pos:end="97:40">my_ram_size</name> <operator pos:start="97:42" pos:end="97:42">/</operator> <name pos:start="97:44" pos:end="97:59">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:19">/* init CPUs */</comment>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:26">(<expr pos:start="103:9" pos:end="103:25"><name pos:start="103:9" pos:end="103:17">cpu_model</name> <operator pos:start="103:19" pos:end="103:20">==</operator> <name pos:start="103:22" pos:end="103:25">NULL</name></expr>)</condition> <block pos:start="103:28" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:27">

        <expr_stmt pos:start="105:9" pos:end="105:27"><expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:17">cpu_model</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <literal type="string" pos:start="105:21" pos:end="105:26">"host"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:57"><expr pos:start="111:5" pos:end="111:56"><name pos:start="111:5" pos:end="111:14">ipi_states</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <call pos:start="111:18" pos:end="111:56"><name pos:start="111:18" pos:end="111:25">g_malloc</name><argument_list pos:start="111:26" pos:end="111:56">(<argument pos:start="111:27" pos:end="111:55"><expr pos:start="111:27" pos:end="111:55"><sizeof pos:start="111:27" pos:end="111:44">sizeof<argument_list pos:start="111:33" pos:end="111:44">(<argument pos:start="111:34" pos:end="111:43"><expr pos:start="111:34" pos:end="111:43"><name pos:start="111:34" pos:end="111:41">CPUState</name> <operator pos:start="111:43" pos:end="111:43">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="111:46" pos:end="111:46">*</operator> <name pos:start="111:48" pos:end="111:55">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="115:5" pos:end="137:5">for <control pos:start="115:9" pos:end="115:34">(<init pos:start="115:10" pos:end="115:15"><expr pos:start="115:10" pos:end="115:14"><name pos:start="115:10" pos:end="115:10">i</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr>;</init> <condition pos:start="115:17" pos:end="115:29"><expr pos:start="115:17" pos:end="115:28"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <name pos:start="115:21" pos:end="115:28">smp_cpus</name></expr>;</condition> <incr pos:start="115:31" pos:end="115:33"><expr pos:start="115:31" pos:end="115:33"><name pos:start="115:31" pos:end="115:31">i</name><operator pos:start="115:32" pos:end="115:33">++</operator></expr></incr>)</control> <block pos:start="115:36" pos:end="137:5">{<block_content pos:start="117:9" pos:end="135:45">

        <decl_stmt pos:start="117:9" pos:end="117:26"><decl pos:start="117:9" pos:end="117:25"><type pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:16">CPUState</name> <modifier pos:start="117:18" pos:end="117:18">*</modifier></type><name pos:start="117:19" pos:end="117:25">tmp_env</name></decl>;</decl_stmt>



        <expr_stmt pos:start="121:9" pos:end="121:38"><expr pos:start="121:9" pos:end="121:37"><name pos:start="121:9" pos:end="121:15">tmp_env</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:37"><name pos:start="121:19" pos:end="121:26">cpu_init</name><argument_list pos:start="121:27" pos:end="121:37">(<argument pos:start="121:28" pos:end="121:36"><expr pos:start="121:28" pos:end="121:36"><name pos:start="121:28" pos:end="121:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:17">(<expr pos:start="123:13" pos:end="123:16"><operator pos:start="123:13" pos:end="123:13">!</operator><name pos:start="123:14" pos:end="123:16">env</name></expr>)</condition> <block pos:start="123:19" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:26">

            <expr_stmt pos:start="125:13" pos:end="125:26"><expr pos:start="125:13" pos:end="125:25"><name pos:start="125:13" pos:end="125:15">env</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:25">tmp_env</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:32"><expr pos:start="129:9" pos:end="129:31"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:18">ipi_states</name><index pos:start="129:19" pos:end="129:21">[<expr pos:start="129:20" pos:end="129:20"><name pos:start="129:20" pos:end="129:20">i</name></expr>]</index></name> <operator pos:start="129:23" pos:end="129:23">=</operator> <name pos:start="129:25" pos:end="129:31">tmp_env</name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:28"><expr pos:start="131:9" pos:end="131:27"><name pos:start="131:9" pos:end="131:23"><name pos:start="131:9" pos:end="131:15">tmp_env</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:23">halted</name></name> <operator pos:start="131:25" pos:end="131:25">=</operator> <literal type="number" pos:start="131:27" pos:end="131:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:44"><expr pos:start="133:9" pos:end="133:43"><name pos:start="133:9" pos:end="133:32"><name pos:start="133:9" pos:end="133:15">tmp_env</name><operator pos:start="133:16" pos:end="133:17">-&gt;</operator><name pos:start="133:18" pos:end="133:32">exception_index</name></name> <operator pos:start="133:34" pos:end="133:34">=</operator> <name pos:start="133:36" pos:end="133:43">EXCP_HLT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:45"><expr pos:start="135:9" pos:end="135:44"><name pos:start="135:9" pos:end="135:29"><name pos:start="135:9" pos:end="135:15">tmp_env</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:29">storage_keys</name></name> <operator pos:start="135:31" pos:end="135:31">=</operator> <name pos:start="135:33" pos:end="135:44">storage_keys</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="141:5" pos:end="141:28">/* One CPU has to run */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:30"><expr pos:start="143:5" pos:end="143:29"><call pos:start="143:5" pos:end="143:29"><name pos:start="143:5" pos:end="143:24">s390_add_running_cpu</name><argument_list pos:start="143:25" pos:end="143:29">(<argument pos:start="143:26" pos:end="143:28"><expr pos:start="143:26" pos:end="143:28"><name pos:start="143:26" pos:end="143:28">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="213:5"><if pos:start="147:5" pos:end="167:5">if <condition pos:start="147:8" pos:end="147:24">(<expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:23">kernel_filename</name></expr>)</condition> <block pos:start="147:26" pos:end="167:5">{<block_content pos:start="149:9" pos:end="165:46">

        <expr_stmt pos:start="149:9" pos:end="149:71"><expr pos:start="149:9" pos:end="149:70"><name pos:start="149:9" pos:end="149:19">kernel_size</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <call pos:start="149:23" pos:end="149:70"><name pos:start="149:23" pos:end="149:32">load_image</name><argument_list pos:start="149:33" pos:end="149:70">(<argument pos:start="149:34" pos:end="149:48"><expr pos:start="149:34" pos:end="149:48"><name pos:start="149:34" pos:end="149:48">kernel_filename</name></expr></argument>, <argument pos:start="149:51" pos:end="149:69"><expr pos:start="149:51" pos:end="149:69"><call pos:start="149:51" pos:end="149:69"><name pos:start="149:51" pos:end="149:66">qemu_get_ram_ptr</name><argument_list pos:start="149:67" pos:end="149:69">(<argument pos:start="149:68" pos:end="149:68"><expr pos:start="149:68" pos:end="149:68"><literal type="number" pos:start="149:68" pos:end="149:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="153:9" pos:end="159:9"><if pos:start="153:9" pos:end="159:9">if <condition pos:start="153:12" pos:end="153:53">(<expr pos:start="153:13" pos:end="153:52"><call pos:start="153:13" pos:end="153:42"><name pos:start="153:13" pos:end="153:24">lduw_be_phys</name><argument_list pos:start="153:25" pos:end="153:42">(<argument pos:start="153:26" pos:end="153:41"><expr pos:start="153:26" pos:end="153:41"><name pos:start="153:26" pos:end="153:41">KERN_IMAGE_START</name></expr></argument>)</argument_list></call> <operator pos:start="153:44" pos:end="153:45">!=</operator> <literal type="number" pos:start="153:47" pos:end="153:52">0x0dd0</literal></expr>)</condition> <block pos:start="153:55" pos:end="159:9">{<block_content pos:start="155:13" pos:end="157:20">

            <expr_stmt pos:start="155:13" pos:end="155:75"><expr pos:start="155:13" pos:end="155:74"><call pos:start="155:13" pos:end="155:74"><name pos:start="155:13" pos:end="155:19">fprintf</name><argument_list pos:start="155:20" pos:end="155:74">(<argument pos:start="155:21" pos:end="155:26"><expr pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:26">stderr</name></expr></argument>, <argument pos:start="155:29" pos:end="155:73"><expr pos:start="155:29" pos:end="155:73"><literal type="string" pos:start="155:29" pos:end="155:73">"Specified image is not an s390 boot image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:20"><expr pos:start="157:13" pos:end="157:19"><call pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:16">exit</name><argument_list pos:start="157:17" pos:end="157:19">(<argument pos:start="157:18" pos:end="157:18"><expr pos:start="157:18" pos:end="157:18"><literal type="number" pos:start="157:18" pos:end="157:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="163:9" pos:end="163:41"><expr pos:start="163:9" pos:end="163:40"><name pos:start="163:9" pos:end="163:21"><name pos:start="163:9" pos:end="163:11">env</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:16">psw</name><operator pos:start="163:17" pos:end="163:17">.</operator><name pos:start="163:18" pos:end="163:21">addr</name></name> <operator pos:start="163:23" pos:end="163:23">=</operator> <name pos:start="163:25" pos:end="163:40">KERN_IMAGE_START</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:46"><expr pos:start="165:9" pos:end="165:45"><name pos:start="165:9" pos:end="165:21"><name pos:start="165:9" pos:end="165:11">env</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:16">psw</name><operator pos:start="165:17" pos:end="165:17">.</operator><name pos:start="165:18" pos:end="165:21">mask</name></name> <operator pos:start="165:23" pos:end="165:23">=</operator> <literal type="number" pos:start="165:25" pos:end="165:45">0x0000000180000000ULL</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="167:7" pos:end="213:5">else <block pos:start="167:12" pos:end="213:5">{<block_content pos:start="169:9" pos:end="211:46">

        <decl_stmt pos:start="169:9" pos:end="169:33"><decl pos:start="169:9" pos:end="169:32"><type pos:start="169:9" pos:end="169:18"><name pos:start="169:9" pos:end="169:18">ram_addr_t</name></type> <name pos:start="169:20" pos:end="169:28">bios_size</name> <init pos:start="169:30" pos:end="169:32">= <expr pos:start="169:32" pos:end="169:32"><literal type="number" pos:start="169:32" pos:end="169:32">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="171:9" pos:end="171:28"><decl pos:start="171:9" pos:end="171:27"><type pos:start="171:9" pos:end="171:14"><name pos:start="171:9" pos:end="171:12">char</name> <modifier pos:start="171:14" pos:end="171:14">*</modifier></type><name pos:start="171:15" pos:end="171:27">bios_filename</name></decl>;</decl_stmt>



        <comment type="block" pos:start="175:9" pos:end="175:34">/* Load zipl bootloader */</comment>

        <if_stmt pos:start="177:9" pos:end="181:9"><if pos:start="177:9" pos:end="181:9">if <condition pos:start="177:12" pos:end="177:30">(<expr pos:start="177:13" pos:end="177:29"><name pos:start="177:13" pos:end="177:21">bios_name</name> <operator pos:start="177:23" pos:end="177:24">==</operator> <name pos:start="177:26" pos:end="177:29">NULL</name></expr>)</condition> <block pos:start="177:32" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:38">

            <expr_stmt pos:start="179:13" pos:end="179:38"><expr pos:start="179:13" pos:end="179:37"><name pos:start="179:13" pos:end="179:21">bios_name</name> <operator pos:start="179:23" pos:end="179:23">=</operator> <name pos:start="179:25" pos:end="179:37">ZIPL_FILENAME</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:71"><expr pos:start="185:9" pos:end="185:70"><name pos:start="185:9" pos:end="185:21">bios_filename</name> <operator pos:start="185:23" pos:end="185:23">=</operator> <call pos:start="185:25" pos:end="185:70"><name pos:start="185:25" pos:end="185:38">qemu_find_file</name><argument_list pos:start="185:39" pos:end="185:70">(<argument pos:start="185:40" pos:end="185:58"><expr pos:start="185:40" pos:end="185:58"><name pos:start="185:40" pos:end="185:58">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="185:61" pos:end="185:69"><expr pos:start="185:61" pos:end="185:69"><name pos:start="185:61" pos:end="185:69">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:80"><expr pos:start="187:9" pos:end="187:79"><name pos:start="187:9" pos:end="187:17">bios_size</name> <operator pos:start="187:19" pos:end="187:19">=</operator> <call pos:start="187:21" pos:end="187:79"><name pos:start="187:21" pos:end="187:30">load_image</name><argument_list pos:start="187:31" pos:end="187:79">(<argument pos:start="187:32" pos:end="187:44"><expr pos:start="187:32" pos:end="187:44"><name pos:start="187:32" pos:end="187:44">bios_filename</name></expr></argument>, <argument pos:start="187:47" pos:end="187:78"><expr pos:start="187:47" pos:end="187:78"><call pos:start="187:47" pos:end="187:78"><name pos:start="187:47" pos:end="187:62">qemu_get_ram_ptr</name><argument_list pos:start="187:63" pos:end="187:78">(<argument pos:start="187:64" pos:end="187:77"><expr pos:start="187:64" pos:end="187:77"><name pos:start="187:64" pos:end="187:77">ZIPL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:30"><expr pos:start="189:9" pos:end="189:29"><call pos:start="189:9" pos:end="189:29"><name pos:start="189:9" pos:end="189:14">g_free</name><argument_list pos:start="189:15" pos:end="189:29">(<argument pos:start="189:16" pos:end="189:28"><expr pos:start="189:16" pos:end="189:28"><name pos:start="189:16" pos:end="189:28">bios_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:32">(<expr pos:start="193:13" pos:end="193:31"><operator pos:start="193:13" pos:end="193:13">(</operator><name pos:start="193:14" pos:end="193:17">long</name><operator pos:start="193:18" pos:end="193:18">)</operator><name pos:start="193:19" pos:end="193:27">bios_size</name> <operator pos:start="193:29" pos:end="193:29">&lt;</operator> <literal type="number" pos:start="193:31" pos:end="193:31">0</literal></expr>)</condition> <block pos:start="193:34" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:68">

            <expr_stmt pos:start="195:13" pos:end="195:68"><expr pos:start="195:13" pos:end="195:67"><call pos:start="195:13" pos:end="195:67"><name pos:start="195:13" pos:end="195:20">hw_error</name><argument_list pos:start="195:21" pos:end="195:67">(<argument pos:start="195:22" pos:end="195:55"><expr pos:start="195:22" pos:end="195:55"><literal type="string" pos:start="195:22" pos:end="195:55">"could not load bootloader '%s'\n"</literal></expr></argument>, <argument pos:start="195:58" pos:end="195:66"><expr pos:start="195:58" pos:end="195:66"><name pos:start="195:58" pos:end="195:66">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="201:9" pos:end="205:9"><if pos:start="201:9" pos:end="205:9">if <condition pos:start="201:12" pos:end="201:29">(<expr pos:start="201:13" pos:end="201:28"><name pos:start="201:13" pos:end="201:21">bios_size</name> <operator pos:start="201:23" pos:end="201:23">&gt;</operator> <literal type="number" pos:start="201:25" pos:end="201:28">4096</literal></expr>)</condition> <block pos:start="201:31" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:52">

            <expr_stmt pos:start="203:13" pos:end="203:52"><expr pos:start="203:13" pos:end="203:51"><call pos:start="203:13" pos:end="203:51"><name pos:start="203:13" pos:end="203:20">hw_error</name><argument_list pos:start="203:21" pos:end="203:51">(<argument pos:start="203:22" pos:end="203:50"><expr pos:start="203:22" pos:end="203:50"><literal type="string" pos:start="203:22" pos:end="203:50">"stage1 bootloader is &gt; 4k\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="209:9" pos:end="209:35"><expr pos:start="209:9" pos:end="209:34"><name pos:start="209:9" pos:end="209:21"><name pos:start="209:9" pos:end="209:11">env</name><operator pos:start="209:12" pos:end="209:13">-&gt;</operator><name pos:start="209:14" pos:end="209:16">psw</name><operator pos:start="209:17" pos:end="209:17">.</operator><name pos:start="209:18" pos:end="209:21">addr</name></name> <operator pos:start="209:23" pos:end="209:23">=</operator> <name pos:start="209:25" pos:end="209:34">ZIPL_START</name></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:46"><expr pos:start="211:9" pos:end="211:45"><name pos:start="211:9" pos:end="211:21"><name pos:start="211:9" pos:end="211:11">env</name><operator pos:start="211:12" pos:end="211:13">-&gt;</operator><name pos:start="211:14" pos:end="211:16">psw</name><operator pos:start="211:17" pos:end="211:17">.</operator><name pos:start="211:18" pos:end="211:21">mask</name></name> <operator pos:start="211:23" pos:end="211:23">=</operator> <literal type="number" pos:start="211:25" pos:end="211:45">0x0000000180000000ULL</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="217:5" pos:end="235:5"><if pos:start="217:5" pos:end="235:5">if <condition pos:start="217:8" pos:end="217:24">(<expr pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:23">initrd_filename</name></expr>)</condition> <block pos:start="217:26" pos:end="235:5">{<block_content pos:start="219:9" pos:end="233:51">

        <expr_stmt pos:start="219:9" pos:end="219:37"><expr pos:start="219:9" pos:end="219:36"><name pos:start="219:9" pos:end="219:21">initrd_offset</name> <operator pos:start="219:23" pos:end="219:23">=</operator> <name pos:start="219:25" pos:end="219:36">INITRD_START</name></expr>;</expr_stmt>

        <while pos:start="221:9" pos:end="225:9">while <condition pos:start="221:15" pos:end="221:54">(<expr pos:start="221:16" pos:end="221:53"><name pos:start="221:16" pos:end="221:26">kernel_size</name> <operator pos:start="221:28" pos:end="221:28">+</operator> <literal type="number" pos:start="221:30" pos:end="221:37">0x100000</literal> <operator pos:start="221:39" pos:end="221:39">&gt;</operator> <name pos:start="221:41" pos:end="221:53">initrd_offset</name></expr>)</condition> <block pos:start="221:56" pos:end="225:9">{<block_content pos:start="223:13" pos:end="223:38">

            <expr_stmt pos:start="223:13" pos:end="223:38"><expr pos:start="223:13" pos:end="223:37"><name pos:start="223:13" pos:end="223:25">initrd_offset</name> <operator pos:start="223:27" pos:end="223:28">+=</operator> <literal type="number" pos:start="223:30" pos:end="223:37">0x100000</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="227:9" pos:end="227:83"><expr pos:start="227:9" pos:end="227:82"><name pos:start="227:9" pos:end="227:19">initrd_size</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <call pos:start="227:23" pos:end="227:82"><name pos:start="227:23" pos:end="227:32">load_image</name><argument_list pos:start="227:33" pos:end="227:82">(<argument pos:start="227:34" pos:end="227:48"><expr pos:start="227:34" pos:end="227:48"><name pos:start="227:34" pos:end="227:48">initrd_filename</name></expr></argument>, <argument pos:start="227:51" pos:end="227:81"><expr pos:start="227:51" pos:end="227:81"><call pos:start="227:51" pos:end="227:81"><name pos:start="227:51" pos:end="227:66">qemu_get_ram_ptr</name><argument_list pos:start="227:67" pos:end="227:81">(<argument pos:start="227:68" pos:end="227:80"><expr pos:start="227:68" pos:end="227:80"><name pos:start="227:68" pos:end="227:80">initrd_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="231:9" pos:end="231:54"><expr pos:start="231:9" pos:end="231:53"><call pos:start="231:9" pos:end="231:53"><name pos:start="231:9" pos:end="231:19">stq_be_phys</name><argument_list pos:start="231:20" pos:end="231:53">(<argument pos:start="231:21" pos:end="231:37"><expr pos:start="231:21" pos:end="231:37"><name pos:start="231:21" pos:end="231:37">INITRD_PARM_START</name></expr></argument>, <argument pos:start="231:40" pos:end="231:52"><expr pos:start="231:40" pos:end="231:52"><name pos:start="231:40" pos:end="231:52">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:51"><expr pos:start="233:9" pos:end="233:50"><call pos:start="233:9" pos:end="233:50"><name pos:start="233:9" pos:end="233:19">stq_be_phys</name><argument_list pos:start="233:20" pos:end="233:50">(<argument pos:start="233:21" pos:end="233:36"><expr pos:start="233:21" pos:end="233:36"><name pos:start="233:21" pos:end="233:36">INITRD_PARM_SIZE</name></expr></argument>, <argument pos:start="233:39" pos:end="233:49"><expr pos:start="233:39" pos:end="233:49"><name pos:start="233:39" pos:end="233:49">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="245:5"><if pos:start="239:5" pos:end="245:5">if <condition pos:start="239:8" pos:end="239:23">(<expr pos:start="239:9" pos:end="239:22"><name pos:start="239:9" pos:end="239:22">kernel_cmdline</name></expr>)</condition> <block pos:start="239:25" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:62">

        <expr_stmt pos:start="241:9" pos:end="243:62"><expr pos:start="241:9" pos:end="243:61"><call pos:start="241:9" pos:end="243:61"><name pos:start="241:9" pos:end="241:33">cpu_physical_memory_write</name><argument_list pos:start="241:34" pos:end="243:61">(<argument pos:start="241:35" pos:end="241:48"><expr pos:start="241:35" pos:end="241:48"><name pos:start="241:35" pos:end="241:48">KERN_PARM_AREA</name></expr></argument>, <argument pos:start="241:51" pos:end="241:64"><expr pos:start="241:51" pos:end="241:64"><name pos:start="241:51" pos:end="241:64">kernel_cmdline</name></expr></argument>,

                                  <argument pos:start="243:35" pos:end="243:60"><expr pos:start="243:35" pos:end="243:60"><call pos:start="243:35" pos:end="243:56"><name pos:start="243:35" pos:end="243:40">strlen</name><argument_list pos:start="243:41" pos:end="243:56">(<argument pos:start="243:42" pos:end="243:55"><expr pos:start="243:42" pos:end="243:55"><name pos:start="243:42" pos:end="243:55">kernel_cmdline</name></expr></argument>)</argument_list></call> <operator pos:start="243:58" pos:end="243:58">+</operator> <literal type="number" pos:start="243:60" pos:end="243:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="249:5" pos:end="249:40">/* Create VirtIO network adapters */</comment>

    <for pos:start="251:5" pos:end="283:5">for<control pos:start="251:8" pos:end="251:32">(<init pos:start="251:9" pos:end="251:14"><expr pos:start="251:9" pos:end="251:13"><name pos:start="251:9" pos:end="251:9">i</name> <operator pos:start="251:11" pos:end="251:11">=</operator> <literal type="number" pos:start="251:13" pos:end="251:13">0</literal></expr>;</init> <condition pos:start="251:16" pos:end="251:27"><expr pos:start="251:16" pos:end="251:26"><name pos:start="251:16" pos:end="251:16">i</name> <operator pos:start="251:18" pos:end="251:18">&lt;</operator> <name pos:start="251:20" pos:end="251:26">nb_nics</name></expr>;</condition> <incr pos:start="251:29" pos:end="251:31"><expr pos:start="251:29" pos:end="251:31"><name pos:start="251:29" pos:end="251:29">i</name><operator pos:start="251:30" pos:end="251:31">++</operator></expr></incr>)</control> <block pos:start="251:34" pos:end="283:5">{<block_content pos:start="253:9" pos:end="281:30">

        <decl_stmt pos:start="253:9" pos:end="253:35"><decl pos:start="253:9" pos:end="253:34"><type pos:start="253:9" pos:end="253:17"><name pos:start="253:9" pos:end="253:15">NICInfo</name> <modifier pos:start="253:17" pos:end="253:17">*</modifier></type><name pos:start="253:18" pos:end="253:19">nd</name> <init pos:start="253:21" pos:end="253:34">= <expr pos:start="253:23" pos:end="253:34"><operator pos:start="253:23" pos:end="253:23">&amp;</operator><name pos:start="253:24" pos:end="253:34"><name pos:start="253:24" pos:end="253:31">nd_table</name><index pos:start="253:32" pos:end="253:34">[<expr pos:start="253:33" pos:end="253:33"><name pos:start="253:33" pos:end="253:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="255:9" pos:end="255:25"><decl pos:start="255:9" pos:end="255:24"><type pos:start="255:9" pos:end="255:21"><name pos:start="255:9" pos:end="255:19">DeviceState</name> <modifier pos:start="255:21" pos:end="255:21">*</modifier></type><name pos:start="255:22" pos:end="255:24">dev</name></decl>;</decl_stmt>



        <if_stmt pos:start="259:9" pos:end="263:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:23">(<expr pos:start="259:13" pos:end="259:22"><operator pos:start="259:13" pos:end="259:13">!</operator><name pos:start="259:14" pos:end="259:22"><name pos:start="259:14" pos:end="259:15">nd</name><operator pos:start="259:16" pos:end="259:17">-&gt;</operator><name pos:start="259:18" pos:end="259:22">model</name></name></expr>)</condition> <block pos:start="259:25" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:43">

            <expr_stmt pos:start="261:13" pos:end="261:43"><expr pos:start="261:13" pos:end="261:42"><name pos:start="261:13" pos:end="261:21"><name pos:start="261:13" pos:end="261:14">nd</name><operator pos:start="261:15" pos:end="261:16">-&gt;</operator><name pos:start="261:17" pos:end="261:21">model</name></name> <operator pos:start="261:23" pos:end="261:23">=</operator> <call pos:start="261:25" pos:end="261:42"><name pos:start="261:25" pos:end="261:32">g_strdup</name><argument_list pos:start="261:33" pos:end="261:42">(<argument pos:start="261:34" pos:end="261:41"><expr pos:start="261:34" pos:end="261:41"><literal type="string" pos:start="261:34" pos:end="261:41">"virtio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="267:9" pos:end="273:9"><if pos:start="267:9" pos:end="273:9">if <condition pos:start="267:12" pos:end="267:40">(<expr pos:start="267:13" pos:end="267:39"><call pos:start="267:13" pos:end="267:39"><name pos:start="267:13" pos:end="267:18">strcmp</name><argument_list pos:start="267:19" pos:end="267:39">(<argument pos:start="267:20" pos:end="267:28"><expr pos:start="267:20" pos:end="267:28"><name pos:start="267:20" pos:end="267:28"><name pos:start="267:20" pos:end="267:21">nd</name><operator pos:start="267:22" pos:end="267:23">-&gt;</operator><name pos:start="267:24" pos:end="267:28">model</name></name></expr></argument>, <argument pos:start="267:31" pos:end="267:38"><expr pos:start="267:31" pos:end="267:38"><literal type="string" pos:start="267:31" pos:end="267:38">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="267:42" pos:end="273:9">{<block_content pos:start="269:13" pos:end="271:20">

            <expr_stmt pos:start="269:13" pos:end="269:64"><expr pos:start="269:13" pos:end="269:63"><call pos:start="269:13" pos:end="269:63"><name pos:start="269:13" pos:end="269:19">fprintf</name><argument_list pos:start="269:20" pos:end="269:63">(<argument pos:start="269:21" pos:end="269:26"><expr pos:start="269:21" pos:end="269:26"><name pos:start="269:21" pos:end="269:26">stderr</name></expr></argument>, <argument pos:start="269:29" pos:end="269:62"><expr pos:start="269:29" pos:end="269:62"><literal type="string" pos:start="269:29" pos:end="269:62">"S390 only supports VirtIO nics\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:20"><expr pos:start="271:13" pos:end="271:19"><call pos:start="271:13" pos:end="271:19"><name pos:start="271:13" pos:end="271:16">exit</name><argument_list pos:start="271:17" pos:end="271:19">(<argument pos:start="271:18" pos:end="271:18"><expr pos:start="271:18" pos:end="271:18"><literal type="number" pos:start="271:18" pos:end="271:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="277:9" pos:end="277:67"><expr pos:start="277:9" pos:end="277:66"><name pos:start="277:9" pos:end="277:11">dev</name> <operator pos:start="277:13" pos:end="277:13">=</operator> <call pos:start="277:15" pos:end="277:66"><name pos:start="277:15" pos:end="277:25">qdev_create</name><argument_list pos:start="277:26" pos:end="277:66">(<argument pos:start="277:27" pos:end="277:46"><expr pos:start="277:27" pos:end="277:46"><operator pos:start="277:27" pos:end="277:27">(</operator><name pos:start="277:28" pos:end="277:35">BusState</name> <operator pos:start="277:37" pos:end="277:37">*</operator><operator pos:start="277:38" pos:end="277:38">)</operator><name pos:start="277:39" pos:end="277:46">s390_bus</name></expr></argument>, <argument pos:start="277:49" pos:end="277:65"><expr pos:start="277:49" pos:end="277:65"><literal type="string" pos:start="277:49" pos:end="277:65">"virtio-net-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:41"><expr pos:start="279:9" pos:end="279:40"><call pos:start="279:9" pos:end="279:40"><name pos:start="279:9" pos:end="279:31">qdev_set_nic_properties</name><argument_list pos:start="279:32" pos:end="279:40">(<argument pos:start="279:33" pos:end="279:35"><expr pos:start="279:33" pos:end="279:35"><name pos:start="279:33" pos:end="279:35">dev</name></expr></argument>, <argument pos:start="279:38" pos:end="279:39"><expr pos:start="279:38" pos:end="279:39"><name pos:start="279:38" pos:end="279:39">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:30"><expr pos:start="281:9" pos:end="281:29"><call pos:start="281:9" pos:end="281:29"><name pos:start="281:9" pos:end="281:24">qdev_init_nofail</name><argument_list pos:start="281:25" pos:end="281:29">(<argument pos:start="281:26" pos:end="281:28"><expr pos:start="281:26" pos:end="281:28"><name pos:start="281:26" pos:end="281:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="287:5" pos:end="287:35">/* Create VirtIO disk drives */</comment>

    <for pos:start="289:5" pos:end="313:5">for<control pos:start="289:8" pos:end="289:37">(<init pos:start="289:9" pos:end="289:14"><expr pos:start="289:9" pos:end="289:13"><name pos:start="289:9" pos:end="289:9">i</name> <operator pos:start="289:11" pos:end="289:11">=</operator> <literal type="number" pos:start="289:13" pos:end="289:13">0</literal></expr>;</init> <condition pos:start="289:16" pos:end="289:32"><expr pos:start="289:16" pos:end="289:31"><name pos:start="289:16" pos:end="289:16">i</name> <operator pos:start="289:18" pos:end="289:18">&lt;</operator> <name pos:start="289:20" pos:end="289:31">MAX_BLK_DEVS</name></expr>;</condition> <incr pos:start="289:34" pos:end="289:36"><expr pos:start="289:34" pos:end="289:36"><name pos:start="289:34" pos:end="289:34">i</name><operator pos:start="289:35" pos:end="289:36">++</operator></expr></incr>)</control> <block pos:start="289:39" pos:end="313:5">{<block_content pos:start="291:9" pos:end="311:30">

        <decl_stmt pos:start="291:9" pos:end="291:25"><decl pos:start="291:9" pos:end="291:24"><type pos:start="291:9" pos:end="291:19"><name pos:start="291:9" pos:end="291:17">DriveInfo</name> <modifier pos:start="291:19" pos:end="291:19">*</modifier></type><name pos:start="291:20" pos:end="291:24">dinfo</name></decl>;</decl_stmt>

        <decl_stmt pos:start="293:9" pos:end="293:25"><decl pos:start="293:9" pos:end="293:24"><type pos:start="293:9" pos:end="293:21"><name pos:start="293:9" pos:end="293:19">DeviceState</name> <modifier pos:start="293:21" pos:end="293:21">*</modifier></type><name pos:start="293:22" pos:end="293:24">dev</name></decl>;</decl_stmt>



        <expr_stmt pos:start="297:9" pos:end="297:40"><expr pos:start="297:9" pos:end="297:39"><name pos:start="297:9" pos:end="297:13">dinfo</name> <operator pos:start="297:15" pos:end="297:15">=</operator> <call pos:start="297:17" pos:end="297:39"><name pos:start="297:17" pos:end="297:25">drive_get</name><argument_list pos:start="297:26" pos:end="297:39">(<argument pos:start="297:27" pos:end="297:32"><expr pos:start="297:27" pos:end="297:32"><name pos:start="297:27" pos:end="297:32">IF_IDE</name></expr></argument>, <argument pos:start="297:35" pos:end="297:35"><expr pos:start="297:35" pos:end="297:35"><literal type="number" pos:start="297:35" pos:end="297:35">0</literal></expr></argument>, <argument pos:start="297:38" pos:end="297:38"><expr pos:start="297:38" pos:end="297:38"><name pos:start="297:38" pos:end="297:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="299:9" pos:end="303:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:19">(<expr pos:start="299:13" pos:end="299:18"><operator pos:start="299:13" pos:end="299:13">!</operator><name pos:start="299:14" pos:end="299:18">dinfo</name></expr>)</condition> <block pos:start="299:21" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:21">

            <continue pos:start="301:13" pos:end="301:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="307:9" pos:end="307:67"><expr pos:start="307:9" pos:end="307:66"><name pos:start="307:9" pos:end="307:11">dev</name> <operator pos:start="307:13" pos:end="307:13">=</operator> <call pos:start="307:15" pos:end="307:66"><name pos:start="307:15" pos:end="307:25">qdev_create</name><argument_list pos:start="307:26" pos:end="307:66">(<argument pos:start="307:27" pos:end="307:46"><expr pos:start="307:27" pos:end="307:46"><operator pos:start="307:27" pos:end="307:27">(</operator><name pos:start="307:28" pos:end="307:35">BusState</name> <operator pos:start="307:37" pos:end="307:37">*</operator><operator pos:start="307:38" pos:end="307:38">)</operator><name pos:start="307:39" pos:end="307:46">s390_bus</name></expr></argument>, <argument pos:start="307:49" pos:end="307:65"><expr pos:start="307:49" pos:end="307:65"><literal type="string" pos:start="307:49" pos:end="307:65">"virtio-blk-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:62"><expr pos:start="309:9" pos:end="309:61"><call pos:start="309:9" pos:end="309:61"><name pos:start="309:9" pos:end="309:34">qdev_prop_set_drive_nofail</name><argument_list pos:start="309:35" pos:end="309:61">(<argument pos:start="309:36" pos:end="309:38"><expr pos:start="309:36" pos:end="309:38"><name pos:start="309:36" pos:end="309:38">dev</name></expr></argument>, <argument pos:start="309:41" pos:end="309:47"><expr pos:start="309:41" pos:end="309:47"><literal type="string" pos:start="309:41" pos:end="309:47">"drive"</literal></expr></argument>, <argument pos:start="309:50" pos:end="309:60"><expr pos:start="309:50" pos:end="309:60"><name pos:start="309:50" pos:end="309:60"><name pos:start="309:50" pos:end="309:54">dinfo</name><operator pos:start="309:55" pos:end="309:56">-&gt;</operator><name pos:start="309:57" pos:end="309:60">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:30"><expr pos:start="311:9" pos:end="311:29"><call pos:start="311:9" pos:end="311:29"><name pos:start="311:9" pos:end="311:24">qdev_init_nofail</name><argument_list pos:start="311:25" pos:end="311:29">(<argument pos:start="311:26" pos:end="311:28"><expr pos:start="311:26" pos:end="311:28"><name pos:start="311:26" pos:end="311:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
