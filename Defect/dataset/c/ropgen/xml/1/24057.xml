<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24057.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">aac_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="135:1">{<block_content pos:start="7:5" pos:end="133:59">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">AACContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">ac</name> <init pos:start="7:20" pos:end="7:37">= <expr pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:37"><name pos:start="7:22" pos:end="7:26">avctx</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">buf_consumed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">buf_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:26">new_extradata_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="27:60"><decl pos:start="23:5" pos:end="27:59"><type pos:start="23:5" pos:end="23:19"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:17">uint8_t</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:32">new_extradata</name> <init pos:start="23:34" pos:end="27:59">= <expr pos:start="23:36" pos:end="27:59"><call pos:start="23:36" pos:end="27:59"><name pos:start="23:36" pos:end="23:58">av_packet_get_side_data</name><argument_list pos:start="23:59" pos:end="27:59">(<argument pos:start="23:60" pos:end="23:64"><expr pos:start="23:60" pos:end="23:64"><name pos:start="23:60" pos:end="23:64">avpkt</name></expr></argument>,

                                       <argument pos:start="25:40" pos:end="25:64"><expr pos:start="25:40" pos:end="25:64"><name pos:start="25:40" pos:end="25:64">AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>,

                                       <argument pos:start="27:40" pos:end="27:58"><expr pos:start="27:40" pos:end="27:58"><operator pos:start="27:40" pos:end="27:40">&amp;</operator><name pos:start="27:41" pos:end="27:58">new_extradata_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:24">jp_dualmono_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="35:58"><decl pos:start="31:5" pos:end="35:57"><type pos:start="31:5" pos:end="31:19"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:17">uint8_t</name> <modifier pos:start="31:19" pos:end="31:19">*</modifier></type><name pos:start="31:20" pos:end="31:30">jp_dualmono</name>   <init pos:start="31:34" pos:end="35:57">= <expr pos:start="31:36" pos:end="35:57"><call pos:start="31:36" pos:end="35:57"><name pos:start="31:36" pos:end="31:58">av_packet_get_side_data</name><argument_list pos:start="31:59" pos:end="35:57">(<argument pos:start="31:60" pos:end="31:64"><expr pos:start="31:60" pos:end="31:64"><name pos:start="31:60" pos:end="31:64">avpkt</name></expr></argument>,

                                       <argument pos:start="33:40" pos:end="33:62"><expr pos:start="33:40" pos:end="33:62"><name pos:start="33:40" pos:end="33:62">AV_PKT_DATA_JP_DUALMONO</name></expr></argument>,

                                       <argument pos:start="35:40" pos:end="35:56"><expr pos:start="35:40" pos:end="35:56"><operator pos:start="35:40" pos:end="35:40">&amp;</operator><name pos:start="35:41" pos:end="35:56">jp_dualmono_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="69:5"><if pos:start="39:5" pos:end="69:5">if <condition pos:start="39:8" pos:end="39:27">(<expr pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:21">new_extradata</name> <operator pos:start="39:23" pos:end="39:24">&amp;&amp;</operator> <literal type="number" pos:start="39:26" pos:end="39:26">0</literal></expr>)</condition> <block pos:start="39:29" pos:end="69:5">{<block_content pos:start="41:9" pos:end="67:9">

        <expr_stmt pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><call pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:15">av_free</name><argument_list pos:start="41:16" pos:end="41:33">(<argument pos:start="41:17" pos:end="41:32"><expr pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:21">avctx</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:32">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="45:68"><expr pos:start="43:9" pos:end="45:67"><name pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:13">avctx</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:24">extradata</name></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="45:67"><name pos:start="43:28" pos:end="43:37">av_mallocz</name><argument_list pos:start="43:38" pos:end="45:67">(<argument pos:start="43:39" pos:end="45:66"><expr pos:start="43:39" pos:end="45:66"><name pos:start="43:39" pos:end="43:56">new_extradata_size</name> <operator pos:start="43:58" pos:end="43:58">+</operator>

                                      <name pos:start="45:39" pos:end="45:66">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="49:35"><if pos:start="47:9" pos:end="49:35">if <condition pos:start="47:12" pos:end="47:30">(<expr pos:start="47:13" pos:end="47:29"><operator pos:start="47:13" pos:end="47:13">!</operator><name pos:start="47:14" pos:end="47:29"><name pos:start="47:14" pos:end="47:18">avctx</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:29">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:35"><block_content pos:start="49:13" pos:end="49:35">

            <return pos:start="49:13" pos:end="49:35">return <expr pos:start="49:20" pos:end="49:34"><call pos:start="49:20" pos:end="49:34"><name pos:start="49:20" pos:end="49:26">AVERROR</name><argument_list pos:start="49:27" pos:end="49:34">(<argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:13">avctx</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:29">extradata_size</name></name> <operator pos:start="51:31" pos:end="51:31">=</operator> <name pos:start="51:33" pos:end="51:50">new_extradata_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:68"><expr pos:start="53:9" pos:end="53:67"><call pos:start="53:9" pos:end="53:67"><name pos:start="53:9" pos:end="53:14">memcpy</name><argument_list pos:start="53:15" pos:end="53:67">(<argument pos:start="53:16" pos:end="53:31"><expr pos:start="53:16" pos:end="53:31"><name pos:start="53:16" pos:end="53:31"><name pos:start="53:16" pos:end="53:20">avctx</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:31">extradata</name></name></expr></argument>, <argument pos:start="53:34" pos:end="53:46"><expr pos:start="53:34" pos:end="53:46"><name pos:start="53:34" pos:end="53:46">new_extradata</name></expr></argument>, <argument pos:start="53:49" pos:end="53:66"><expr pos:start="53:49" pos:end="53:66"><name pos:start="53:49" pos:end="53:66">new_extradata_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:38"><expr pos:start="55:9" pos:end="55:37"><call pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:33">push_output_configuration</name><argument_list pos:start="55:34" pos:end="55:37">(<argument pos:start="55:35" pos:end="55:36"><expr pos:start="55:35" pos:end="55:36"><name pos:start="55:35" pos:end="55:36">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="61:73">(<expr pos:start="57:13" pos:end="61:72"><call pos:start="57:13" pos:end="61:68"><name pos:start="57:13" pos:end="57:40">decode_audio_specific_config</name><argument_list pos:start="57:41" pos:end="61:68">(<argument pos:start="57:42" pos:end="57:43"><expr pos:start="57:42" pos:end="57:43"><name pos:start="57:42" pos:end="57:43">ac</name></expr></argument>, <argument pos:start="57:46" pos:end="57:54"><expr pos:start="57:46" pos:end="57:54"><name pos:start="57:46" pos:end="57:54"><name pos:start="57:46" pos:end="57:47">ac</name><operator pos:start="57:48" pos:end="57:49">-&gt;</operator><name pos:start="57:50" pos:end="57:54">avctx</name></name></expr></argument>, <argument pos:start="57:57" pos:end="57:71"><expr pos:start="57:57" pos:end="57:71"><operator pos:start="57:57" pos:end="57:57">&amp;</operator><name pos:start="57:58" pos:end="57:66"><name pos:start="57:58" pos:end="57:59">ac</name><operator pos:start="57:60" pos:end="57:61">-&gt;</operator><name pos:start="57:62" pos:end="57:63">oc</name><index pos:start="57:64" pos:end="57:66">[<expr pos:start="57:65" pos:end="57:65"><literal type="number" pos:start="57:65" pos:end="57:65">1</literal></expr>]</index></name><operator pos:start="57:67" pos:end="57:67">.</operator><name pos:start="57:68" pos:end="57:71">m4ac</name></expr></argument>,

                                         <argument pos:start="59:42" pos:end="59:57"><expr pos:start="59:42" pos:end="59:57"><name pos:start="59:42" pos:end="59:57"><name pos:start="59:42" pos:end="59:46">avctx</name><operator pos:start="59:47" pos:end="59:48">-&gt;</operator><name pos:start="59:49" pos:end="59:57">extradata</name></name></expr></argument>,

                                         <argument pos:start="61:42" pos:end="61:64"><expr pos:start="61:42" pos:end="61:64"><name pos:start="61:42" pos:end="61:62"><name pos:start="61:42" pos:end="61:46">avctx</name><operator pos:start="61:47" pos:end="61:48">-&gt;</operator><name pos:start="61:49" pos:end="61:62">extradata_size</name></name><operator pos:start="61:63" pos:end="61:63">*</operator><literal type="number" pos:start="61:64" pos:end="61:64">8</literal></expr></argument>, <argument pos:start="61:67" pos:end="61:67"><expr pos:start="61:67" pos:end="61:67"><literal type="number" pos:start="61:67" pos:end="61:67">1</literal></expr></argument>)</argument_list></call> <operator pos:start="61:70" pos:end="61:70">&lt;</operator> <literal type="number" pos:start="61:72" pos:end="61:72">0</literal></expr>)</condition> <block pos:start="61:75" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:39">

            <expr_stmt pos:start="63:13" pos:end="63:41"><expr pos:start="63:13" pos:end="63:40"><call pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:36">pop_output_configuration</name><argument_list pos:start="63:37" pos:end="63:40">(<argument pos:start="63:38" pos:end="63:39"><expr pos:start="63:38" pos:end="63:39"><name pos:start="63:38" pos:end="63:39">ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:39">return <expr pos:start="65:20" pos:end="65:38"><name pos:start="65:20" pos:end="65:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:23"><expr pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:6">ac</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:18">dmono_mode</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="77:43"><if pos:start="75:5" pos:end="77:43">if <condition pos:start="75:8" pos:end="75:44">(<expr pos:start="75:9" pos:end="75:43"><name pos:start="75:9" pos:end="75:19">jp_dualmono</name> <operator pos:start="75:21" pos:end="75:22">&amp;&amp;</operator> <name pos:start="75:24" pos:end="75:39">jp_dualmono_size</name> <operator pos:start="75:41" pos:end="75:41">&gt;</operator> <literal type="number" pos:start="75:43" pos:end="75:43">0</literal></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:43"><block_content pos:start="77:9" pos:end="77:43">

        <expr_stmt pos:start="77:9" pos:end="77:43"><expr pos:start="77:9" pos:end="77:42"><name pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:10">ac</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:22">dmono_mode</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator>  <literal type="number" pos:start="77:27" pos:end="77:29">1</literal> <operator pos:start="77:29" pos:end="77:29">+</operator> <operator pos:start="77:31" pos:end="77:31">*</operator><name pos:start="77:32" pos:end="77:42">jp_dualmono</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="81:46"><if pos:start="79:5" pos:end="81:46">if <condition pos:start="79:8" pos:end="79:34">(<expr pos:start="79:9" pos:end="79:33"><name pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:10">ac</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:28">force_dmono_mode</name></name> <operator pos:start="79:30" pos:end="79:31">&gt;=</operator> <literal type="number" pos:start="79:33" pos:end="79:33">0</literal></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:46"><block_content pos:start="81:9" pos:end="81:46">

        <expr_stmt pos:start="81:9" pos:end="81:46"><expr pos:start="81:9" pos:end="81:45"><name pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:10">ac</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:22">dmono_mode</name></name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:45"><name pos:start="81:26" pos:end="81:27">ac</name><operator pos:start="81:28" pos:end="81:29">-&gt;</operator><name pos:start="81:30" pos:end="81:45">force_dmono_mode</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="87:35"><if pos:start="85:5" pos:end="87:35">if <condition pos:start="85:8" pos:end="85:32">(<expr pos:start="85:9" pos:end="85:31"><name pos:start="85:9" pos:end="85:15">INT_MAX</name> <operator pos:start="85:17" pos:end="85:17">/</operator> <literal type="number" pos:start="85:19" pos:end="85:19">8</literal> <operator pos:start="85:21" pos:end="85:22">&lt;=</operator> <name pos:start="85:24" pos:end="85:31">buf_size</name></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:35"><block_content pos:start="87:9" pos:end="87:35">

        <return pos:start="87:9" pos:end="87:35">return <expr pos:start="87:16" pos:end="87:34"><name pos:start="87:16" pos:end="87:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="93:19"><if pos:start="91:5" pos:end="93:19">if <condition pos:start="91:8" pos:end="91:55">(<expr pos:start="91:9" pos:end="91:54"><operator pos:start="91:9" pos:end="91:9">(</operator><name pos:start="91:10" pos:end="91:12">err</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:49"><name pos:start="91:16" pos:end="91:29">init_get_bits8</name><argument_list pos:start="91:30" pos:end="91:49">(<argument pos:start="91:31" pos:end="91:33"><expr pos:start="91:31" pos:end="91:33"><operator pos:start="91:31" pos:end="91:31">&amp;</operator><name pos:start="91:32" pos:end="91:33">gb</name></expr></argument>, <argument pos:start="91:36" pos:end="91:38"><expr pos:start="91:36" pos:end="91:38"><name pos:start="91:36" pos:end="91:38">buf</name></expr></argument>, <argument pos:start="91:41" pos:end="91:48"><expr pos:start="91:41" pos:end="91:48"><name pos:start="91:41" pos:end="91:48">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="91:50" pos:end="91:50">)</operator> <operator pos:start="91:52" pos:end="91:52">&lt;</operator> <literal type="number" pos:start="91:54" pos:end="91:54">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:19"><block_content pos:start="93:9" pos:end="93:19">

        <return pos:start="93:9" pos:end="93:19">return <expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <switch pos:start="97:5" pos:end="115:5">switch <condition pos:start="97:12" pos:end="97:39">(<expr pos:start="97:13" pos:end="97:38"><name pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:14">ac</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:18">oc</name><index pos:start="97:19" pos:end="97:21">[<expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">1</literal></expr>]</index></name><operator pos:start="97:22" pos:end="97:22">.</operator><name pos:start="97:23" pos:end="97:38"><name pos:start="97:23" pos:end="97:26">m4ac</name><operator pos:start="97:27" pos:end="97:27">.</operator><name pos:start="97:28" pos:end="97:38">object_type</name></name></expr>)</condition> <block pos:start="97:41" pos:end="115:5">{<block_content pos:start="99:5" pos:end="113:75">

    <case pos:start="99:5" pos:end="99:23">case <expr pos:start="99:10" pos:end="99:22"><name pos:start="99:10" pos:end="99:22">AOT_ER_AAC_LC</name></expr>:</case>

    <case pos:start="101:5" pos:end="101:24">case <expr pos:start="101:10" pos:end="101:23"><name pos:start="101:10" pos:end="101:23">AOT_ER_AAC_LTP</name></expr>:</case>

    <case pos:start="103:5" pos:end="103:23">case <expr pos:start="103:10" pos:end="103:22"><name pos:start="103:10" pos:end="103:22">AOT_ER_AAC_LD</name></expr>:</case>

    <case pos:start="105:5" pos:end="105:24">case <expr pos:start="105:10" pos:end="105:23"><name pos:start="105:10" pos:end="105:23">AOT_ER_AAC_ELD</name></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:67"><expr pos:start="107:9" pos:end="107:66"><name pos:start="107:9" pos:end="107:11">err</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="107:66"><name pos:start="107:15" pos:end="107:33">aac_decode_er_frame</name><argument_list pos:start="107:34" pos:end="107:66">(<argument pos:start="107:35" pos:end="107:39"><expr pos:start="107:35" pos:end="107:39"><name pos:start="107:35" pos:end="107:39">avctx</name></expr></argument>, <argument pos:start="107:42" pos:end="107:45"><expr pos:start="107:42" pos:end="107:45"><name pos:start="107:42" pos:end="107:45">data</name></expr></argument>, <argument pos:start="107:48" pos:end="107:60"><expr pos:start="107:48" pos:end="107:60"><name pos:start="107:48" pos:end="107:60">got_frame_ptr</name></expr></argument>, <argument pos:start="107:63" pos:end="107:65"><expr pos:start="107:63" pos:end="107:65"><operator pos:start="107:63" pos:end="107:63">&amp;</operator><name pos:start="107:64" pos:end="107:65">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <default pos:start="111:5" pos:end="111:12">default:</default>

        <expr_stmt pos:start="113:9" pos:end="113:75"><expr pos:start="113:9" pos:end="113:74"><name pos:start="113:9" pos:end="113:11">err</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="113:74"><name pos:start="113:15" pos:end="113:34">aac_decode_frame_int</name><argument_list pos:start="113:35" pos:end="113:74">(<argument pos:start="113:36" pos:end="113:40"><expr pos:start="113:36" pos:end="113:40"><name pos:start="113:36" pos:end="113:40">avctx</name></expr></argument>, <argument pos:start="113:43" pos:end="113:46"><expr pos:start="113:43" pos:end="113:46"><name pos:start="113:43" pos:end="113:46">data</name></expr></argument>, <argument pos:start="113:49" pos:end="113:61"><expr pos:start="113:49" pos:end="113:61"><name pos:start="113:49" pos:end="113:61">got_frame_ptr</name></expr></argument>, <argument pos:start="113:64" pos:end="113:66"><expr pos:start="113:64" pos:end="113:66"><operator pos:start="113:64" pos:end="113:64">&amp;</operator><name pos:start="113:65" pos:end="113:66">gb</name></expr></argument>, <argument pos:start="113:69" pos:end="113:73"><expr pos:start="113:69" pos:end="113:73"><name pos:start="113:69" pos:end="113:73">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="117:5" pos:end="119:19"><if pos:start="117:5" pos:end="119:19">if <condition pos:start="117:8" pos:end="117:16">(<expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:11">err</name> <operator pos:start="117:13" pos:end="117:13">&lt;</operator> <literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:19"><block_content pos:start="119:9" pos:end="119:19">

        <return pos:start="119:9" pos:end="119:19">return <expr pos:start="119:16" pos:end="119:18"><name pos:start="119:16" pos:end="119:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:50"><expr pos:start="123:5" pos:end="123:49"><name pos:start="123:5" pos:end="123:16">buf_consumed</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <operator pos:start="123:20" pos:end="123:20">(</operator><call pos:start="123:21" pos:end="123:39"><name pos:start="123:21" pos:end="123:34">get_bits_count</name><argument_list pos:start="123:35" pos:end="123:39">(<argument pos:start="123:36" pos:end="123:38"><expr pos:start="123:36" pos:end="123:38"><operator pos:start="123:36" pos:end="123:36">&amp;</operator><name pos:start="123:37" pos:end="123:38">gb</name></expr></argument>)</argument_list></call> <operator pos:start="123:41" pos:end="123:41">+</operator> <literal type="number" pos:start="123:43" pos:end="123:43">7</literal><operator pos:start="123:44" pos:end="123:44">)</operator> <operator pos:start="123:46" pos:end="123:47">&gt;&gt;</operator> <literal type="number" pos:start="123:49" pos:end="123:49">3</literal></expr>;</expr_stmt>

    <for pos:start="125:5" pos:end="129:18">for <control pos:start="125:9" pos:end="125:72">(<init pos:start="125:10" pos:end="125:35"><expr pos:start="125:10" pos:end="125:34"><name pos:start="125:10" pos:end="125:19">buf_offset</name> <operator pos:start="125:21" pos:end="125:21">=</operator> <name pos:start="125:23" pos:end="125:34">buf_consumed</name></expr>;</init> <condition pos:start="125:37" pos:end="125:58"><expr pos:start="125:37" pos:end="125:57"><name pos:start="125:37" pos:end="125:46">buf_offset</name> <operator pos:start="125:48" pos:end="125:48">&lt;</operator> <name pos:start="125:50" pos:end="125:57">buf_size</name></expr>;</condition> <incr pos:start="125:60" pos:end="125:71"><expr pos:start="125:60" pos:end="125:71"><name pos:start="125:60" pos:end="125:69">buf_offset</name><operator pos:start="125:70" pos:end="125:71">++</operator></expr></incr>)</control><block type="pseudo" pos:start="127:9" pos:end="129:18"><block_content pos:start="127:9" pos:end="129:18">

        <if_stmt pos:start="127:9" pos:end="129:18"><if pos:start="127:9" pos:end="129:18">if <condition pos:start="127:12" pos:end="127:28">(<expr pos:start="127:13" pos:end="127:27"><name pos:start="127:13" pos:end="127:27"><name pos:start="127:13" pos:end="127:15">buf</name><index pos:start="127:16" pos:end="127:27">[<expr pos:start="127:17" pos:end="127:26"><name pos:start="127:17" pos:end="127:26">buf_offset</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:18"><block_content pos:start="129:13" pos:end="129:18">

            <break pos:start="129:13" pos:end="129:18">break;</break></block_content></block></if></if_stmt></block_content></block></for>



    <return pos:start="133:5" pos:end="133:59">return <expr pos:start="133:12" pos:end="133:58"><ternary pos:start="133:12" pos:end="133:58"><condition pos:start="133:12" pos:end="133:34"><expr pos:start="133:12" pos:end="133:32"><name pos:start="133:12" pos:end="133:19">buf_size</name> <operator pos:start="133:21" pos:end="133:21">&gt;</operator> <name pos:start="133:23" pos:end="133:32">buf_offset</name></expr> ?</condition><then pos:start="133:36" pos:end="133:47"> <expr pos:start="133:36" pos:end="133:47"><name pos:start="133:36" pos:end="133:47">buf_consumed</name></expr> </then><else pos:start="133:49" pos:end="133:58">: <expr pos:start="133:51" pos:end="133:58"><name pos:start="133:51" pos:end="133:58">buf_size</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
