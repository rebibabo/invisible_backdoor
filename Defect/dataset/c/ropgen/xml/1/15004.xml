<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15004.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">av_probe_input_buffer</name><parameter_list pos:start="1:26" pos:end="5:75">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:37">AVIOContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">pb</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:62"><decl pos:start="1:44" pos:end="1:62"><type pos:start="1:44" pos:end="1:62"><name pos:start="1:44" pos:end="1:56">AVInputFormat</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier><modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">fmt</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:46"><decl pos:start="3:27" pos:end="3:46"><type pos:start="3:27" pos:end="3:46"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:36">char</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:46">filename</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:52">void</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:60">logctx</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:45"><decl pos:start="5:27" pos:end="5:45"><type pos:start="5:27" pos:end="5:45"><name pos:start="5:27" pos:end="5:34">unsigned</name> <name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:45">offset</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:74"><decl pos:start="5:48" pos:end="5:74"><type pos:start="5:48" pos:end="5:74"><name pos:start="5:48" pos:end="5:55">unsigned</name> <name pos:start="5:57" pos:end="5:59">int</name></type> <name pos:start="5:61" pos:end="5:74">max_probe_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="143:1">{<block_content pos:start="9:5" pos:end="141:15">

    <decl_stmt pos:start="9:5" pos:end="9:65"><decl pos:start="9:5" pos:end="9:64"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">AVProbeData</name></type> <name pos:start="9:17" pos:end="9:18">pd</name> <init pos:start="9:20" pos:end="9:64">= <expr pos:start="9:22" pos:end="9:64"><block pos:start="9:22" pos:end="9:64">{ <expr pos:start="9:24" pos:end="9:47"><name pos:start="9:24" pos:end="9:31">filename</name> <operator pos:start="9:33" pos:end="9:33">?</operator> <name pos:start="9:35" pos:end="9:42">filename</name> <operator pos:start="9:44" pos:end="9:44">:</operator> <literal type="string" pos:start="9:46" pos:end="9:47">""</literal></expr>, <expr pos:start="9:50" pos:end="9:53"><name pos:start="9:50" pos:end="9:53">NULL</name></expr>, <expr pos:start="9:56" pos:end="9:62"><operator pos:start="9:56" pos:end="9:56">-</operator><name pos:start="9:57" pos:end="9:62">offset</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>, <decl pos:start="13:18" pos:end="13:27"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:27">probe_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="29:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:24">(<expr pos:start="17:9" pos:end="17:23"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:23">max_probe_size</name></expr>)</condition> <block pos:start="17:26" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:39">

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:22">max_probe_size</name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:38">PROBE_BUF_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="21:7" pos:end="25:5">else if <condition pos:start="21:15" pos:end="21:46">(<expr pos:start="21:16" pos:end="21:45"><name pos:start="21:16" pos:end="21:29">max_probe_size</name> <operator pos:start="21:31" pos:end="21:31">&gt;</operator> <name pos:start="21:33" pos:end="21:45">PROBE_BUF_MAX</name></expr>)</condition> <block pos:start="21:48" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:39">

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:22">max_probe_size</name> <operator pos:start="23:24" pos:end="23:24">=</operator> <name pos:start="23:26" pos:end="23:38">PROBE_BUF_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="29:5">else if <condition pos:start="25:15" pos:end="25:46">(<expr pos:start="25:16" pos:end="25:45"><name pos:start="25:16" pos:end="25:29">max_probe_size</name> <operator pos:start="25:31" pos:end="25:31">&lt;</operator> <name pos:start="25:33" pos:end="25:45">PROBE_BUF_MIN</name></expr>)</condition> <block pos:start="25:48" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:31">

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:33">(<expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:14">offset</name> <operator pos:start="33:16" pos:end="33:17">&gt;=</operator> <name pos:start="33:19" pos:end="33:32">max_probe_size</name></expr>)</condition> <block pos:start="33:35" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:31">

        <return pos:start="35:9" pos:end="35:31">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="41:5" pos:end="119:5">for<control pos:start="41:8" pos:end="43:79">(<init pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:18">probe_size</name><operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:33">PROBE_BUF_MIN</name></expr>;</init> <condition pos:start="41:36" pos:end="41:71"><expr pos:start="41:36" pos:end="41:70"><name pos:start="41:36" pos:end="41:45">probe_size</name><operator pos:start="41:46" pos:end="41:47">&lt;=</operator><name pos:start="41:48" pos:end="41:61">max_probe_size</name> <operator pos:start="41:63" pos:end="41:64">&amp;&amp;</operator> <operator pos:start="41:66" pos:end="41:66">!</operator><operator pos:start="41:67" pos:end="41:67">*</operator><name pos:start="41:68" pos:end="41:70">fmt</name></expr>;</condition>

        <incr pos:start="43:9" pos:end="43:78"><expr pos:start="43:9" pos:end="43:78"><name pos:start="43:9" pos:end="43:18">probe_size</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:78"><name pos:start="43:22" pos:end="43:26">FFMIN</name><argument_list pos:start="43:27" pos:end="43:78">(<argument pos:start="43:28" pos:end="43:40"><expr pos:start="43:28" pos:end="43:40"><name pos:start="43:28" pos:end="43:37">probe_size</name><operator pos:start="43:38" pos:end="43:39">&lt;&lt;</operator><literal type="number" pos:start="43:40" pos:end="43:40">1</literal></expr></argument>, <argument pos:start="43:43" pos:end="43:77"><expr pos:start="43:43" pos:end="43:77"><call pos:start="43:43" pos:end="43:77"><name pos:start="43:43" pos:end="43:47">FFMAX</name><argument_list pos:start="43:48" pos:end="43:77">(<argument pos:start="43:49" pos:end="43:62"><expr pos:start="43:49" pos:end="43:62"><name pos:start="43:49" pos:end="43:62">max_probe_size</name></expr></argument>, <argument pos:start="43:65" pos:end="43:76"><expr pos:start="43:65" pos:end="43:76"><name pos:start="43:65" pos:end="43:74">probe_size</name><operator pos:start="43:75" pos:end="43:75">+</operator><literal type="number" pos:start="43:76" pos:end="43:76">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="43:81" pos:end="119:5">{<block_content pos:start="45:9" pos:end="117:9">

        <decl_stmt pos:start="45:9" pos:end="45:74"><decl pos:start="45:9" pos:end="45:73"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:17">score</name> <init pos:start="45:19" pos:end="45:73">= <expr pos:start="45:21" pos:end="45:73"><ternary pos:start="45:21" pos:end="45:73"><condition pos:start="45:21" pos:end="45:49"><expr pos:start="45:21" pos:end="45:47"><name pos:start="45:21" pos:end="45:30">probe_size</name> <operator pos:start="45:32" pos:end="45:32">&lt;</operator> <name pos:start="45:34" pos:end="45:47">max_probe_size</name></expr> ?</condition><then pos:start="45:51" pos:end="45:69"> <expr pos:start="45:51" pos:end="45:69"><name pos:start="45:51" pos:end="45:69">AVPROBE_SCORE_RETRY</name></expr> </then><else pos:start="45:71" pos:end="45:73">: <expr pos:start="45:73" pos:end="45:73"><literal type="number" pos:start="45:73" pos:end="45:73">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:75"><decl pos:start="47:9" pos:end="47:74"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:22">buf_offset</name> <init pos:start="47:24" pos:end="47:74">= <expr pos:start="47:26" pos:end="47:74"><ternary pos:start="47:26" pos:end="47:74"><condition pos:start="47:26" pos:end="47:56"><expr pos:start="47:26" pos:end="47:54"><operator pos:start="47:26" pos:end="47:26">(</operator><name pos:start="47:27" pos:end="47:36">probe_size</name> <operator pos:start="47:38" pos:end="47:39">==</operator> <name pos:start="47:41" pos:end="47:53">PROBE_BUF_MIN</name><operator pos:start="47:54" pos:end="47:54">)</operator></expr> ?</condition><then pos:start="47:58" pos:end="47:58"> <expr pos:start="47:58" pos:end="47:58"><literal type="number" pos:start="47:58" pos:end="47:58">0</literal></expr> </then><else pos:start="47:60" pos:end="47:74">: <expr pos:start="47:62" pos:end="47:74"><name pos:start="47:62" pos:end="47:71">probe_size</name><operator pos:start="47:72" pos:end="47:73">&gt;&gt;</operator><literal type="number" pos:start="47:74" pos:end="47:74">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:21"><decl pos:start="49:9" pos:end="49:20"><type pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:12">void</name> <modifier pos:start="49:14" pos:end="49:14">*</modifier></type><name pos:start="49:15" pos:end="49:20">buftmp</name></decl>;</decl_stmt>



        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:32">(<expr pos:start="53:13" pos:end="53:31"><name pos:start="53:13" pos:end="53:22">probe_size</name> <operator pos:start="53:24" pos:end="53:24">&lt;</operator> <name pos:start="53:26" pos:end="53:31">offset</name></expr>)</condition> <block pos:start="53:34" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:21">

            <continue pos:start="55:13" pos:end="55:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:29">/* read probe data */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:68"><expr pos:start="63:9" pos:end="63:67"><name pos:start="63:9" pos:end="63:14">buftmp</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <call pos:start="63:18" pos:end="63:67"><name pos:start="63:18" pos:end="63:27">av_realloc</name><argument_list pos:start="63:28" pos:end="63:67">(<argument pos:start="63:29" pos:end="63:31"><expr pos:start="63:29" pos:end="63:31"><name pos:start="63:29" pos:end="63:31">buf</name></expr></argument>, <argument pos:start="63:34" pos:end="63:66"><expr pos:start="63:34" pos:end="63:66"><name pos:start="63:34" pos:end="63:43">probe_size</name> <operator pos:start="63:45" pos:end="63:45">+</operator> <name pos:start="63:47" pos:end="63:66">AVPROBE_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if<condition pos:start="65:11" pos:end="65:19">(<expr pos:start="65:12" pos:end="65:18"><operator pos:start="65:12" pos:end="65:12">!</operator><name pos:start="65:13" pos:end="65:18">buftmp</name></expr>)</condition><block pos:start="65:20" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:35">

            <expr_stmt pos:start="67:13" pos:end="67:25"><expr pos:start="67:13" pos:end="67:24"><call pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:19">av_free</name><argument_list pos:start="67:20" pos:end="67:24">(<argument pos:start="67:21" pos:end="67:23"><expr pos:start="67:21" pos:end="67:23"><name pos:start="67:21" pos:end="67:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:35">return <expr pos:start="69:20" pos:end="69:34"><call pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:26">AVERROR</name><argument_list pos:start="69:27" pos:end="69:34">(<argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><name pos:start="69:28" pos:end="69:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:19"><expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:11">buf</name><operator pos:start="73:12" pos:end="73:12">=</operator><name pos:start="73:13" pos:end="73:18">buftmp</name></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="91:9"><if pos:start="75:9" pos:end="91:9">if <condition pos:start="75:12" pos:end="75:81">(<expr pos:start="75:13" pos:end="75:80"><operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:16">ret</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:75"><name pos:start="75:20" pos:end="75:28">avio_read</name><argument_list pos:start="75:29" pos:end="75:75">(<argument pos:start="75:30" pos:end="75:31"><expr pos:start="75:30" pos:end="75:31"><name pos:start="75:30" pos:end="75:31">pb</name></expr></argument>, <argument pos:start="75:34" pos:end="75:49"><expr pos:start="75:34" pos:end="75:49"><name pos:start="75:34" pos:end="75:36">buf</name> <operator pos:start="75:38" pos:end="75:38">+</operator> <name pos:start="75:40" pos:end="75:49">buf_offset</name></expr></argument>, <argument pos:start="75:52" pos:end="75:74"><expr pos:start="75:52" pos:end="75:74"><name pos:start="75:52" pos:end="75:61">probe_size</name> <operator pos:start="75:63" pos:end="75:63">-</operator> <name pos:start="75:65" pos:end="75:74">buf_offset</name></expr></argument>)</argument_list></call><operator pos:start="75:76" pos:end="75:76">)</operator> <operator pos:start="75:78" pos:end="75:78">&lt;</operator> <literal type="number" pos:start="75:80" pos:end="75:80">0</literal></expr>)</condition> <block pos:start="75:83" pos:end="91:9">{<block_content pos:start="79:13" pos:end="89:20">

            <comment type="block" pos:start="77:13" pos:end="77:75">/* fail if error was not end of file, otherwise, lower score */</comment>

            <if_stmt pos:start="79:13" pos:end="85:13"><if pos:start="79:13" pos:end="85:13">if <condition pos:start="79:16" pos:end="79:35">(<expr pos:start="79:17" pos:end="79:34"><name pos:start="79:17" pos:end="79:19">ret</name> <operator pos:start="79:21" pos:end="79:22">!=</operator> <name pos:start="79:24" pos:end="79:34">AVERROR_EOF</name></expr>)</condition> <block pos:start="79:37" pos:end="85:13">{<block_content pos:start="81:17" pos:end="83:27">

                <expr_stmt pos:start="81:17" pos:end="81:29"><expr pos:start="81:17" pos:end="81:28"><call pos:start="81:17" pos:end="81:28"><name pos:start="81:17" pos:end="81:23">av_free</name><argument_list pos:start="81:24" pos:end="81:28">(<argument pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><name pos:start="81:25" pos:end="81:27">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="83:17" pos:end="83:27">return <expr pos:start="83:24" pos:end="83:26"><name pos:start="83:24" pos:end="83:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:22"><expr pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:17">score</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <literal type="number" pos:start="87:21" pos:end="87:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:20"><expr pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr>;</expr_stmt>            <comment type="block" pos:start="89:33" pos:end="89:73">/* error was end of file, nothing read */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:10">pd</name><operator pos:start="93:11" pos:end="93:11">.</operator><name pos:start="93:12" pos:end="93:19">buf_size</name></name> <operator pos:start="93:21" pos:end="93:22">+=</operator> <name pos:start="93:24" pos:end="93:26">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:30"><expr pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:10">pd</name><operator pos:start="95:11" pos:end="95:11">.</operator><name pos:start="95:12" pos:end="95:14">buf</name></name> <operator pos:start="95:16" pos:end="95:16">=</operator> <operator pos:start="95:18" pos:end="95:18">&amp;</operator><name pos:start="95:19" pos:end="95:29"><name pos:start="95:19" pos:end="95:21">buf</name><index pos:start="95:22" pos:end="95:29">[<expr pos:start="95:23" pos:end="95:28"><name pos:start="95:23" pos:end="95:28">offset</name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:62"><expr pos:start="99:9" pos:end="99:61"><call pos:start="99:9" pos:end="99:61"><name pos:start="99:9" pos:end="99:14">memset</name><argument_list pos:start="99:15" pos:end="99:61">(<argument pos:start="99:16" pos:end="99:35"><expr pos:start="99:16" pos:end="99:35"><name pos:start="99:16" pos:end="99:21"><name pos:start="99:16" pos:end="99:17">pd</name><operator pos:start="99:18" pos:end="99:18">.</operator><name pos:start="99:19" pos:end="99:21">buf</name></name> <operator pos:start="99:23" pos:end="99:23">+</operator> <name pos:start="99:25" pos:end="99:35"><name pos:start="99:25" pos:end="99:26">pd</name><operator pos:start="99:27" pos:end="99:27">.</operator><name pos:start="99:28" pos:end="99:35">buf_size</name></name></expr></argument>, <argument pos:start="99:38" pos:end="99:38"><expr pos:start="99:38" pos:end="99:38"><literal type="number" pos:start="99:38" pos:end="99:38">0</literal></expr></argument>, <argument pos:start="99:41" pos:end="99:60"><expr pos:start="99:41" pos:end="99:60"><name pos:start="99:41" pos:end="99:60">AVPROBE_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="103:9" pos:end="103:31">/* guess file format */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:54"><expr pos:start="105:9" pos:end="105:53"><operator pos:start="105:9" pos:end="105:9">*</operator><name pos:start="105:10" pos:end="105:12">fmt</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="105:53"><name pos:start="105:16" pos:end="105:37">av_probe_input_format2</name><argument_list pos:start="105:38" pos:end="105:53">(<argument pos:start="105:39" pos:end="105:41"><expr pos:start="105:39" pos:end="105:41"><operator pos:start="105:39" pos:end="105:39">&amp;</operator><name pos:start="105:40" pos:end="105:41">pd</name></expr></argument>, <argument pos:start="105:44" pos:end="105:44"><expr pos:start="105:44" pos:end="105:44"><literal type="number" pos:start="105:44" pos:end="105:44">1</literal></expr></argument>, <argument pos:start="105:47" pos:end="105:52"><expr pos:start="105:47" pos:end="105:52"><operator pos:start="105:47" pos:end="105:47">&amp;</operator><name pos:start="105:48" pos:end="105:52">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="117:9"><if pos:start="107:9" pos:end="117:9">if<condition pos:start="107:11" pos:end="107:16">(<expr pos:start="107:12" pos:end="107:15"><operator pos:start="107:12" pos:end="107:12">*</operator><name pos:start="107:13" pos:end="107:15">fmt</name></expr>)</condition><block pos:start="107:17" pos:end="117:9">{<block_content pos:start="109:13" pos:end="115:126">

            <if_stmt pos:start="109:13" pos:end="115:126"><if pos:start="109:13" pos:end="113:13">if<condition pos:start="109:15" pos:end="109:44">(<expr pos:start="109:16" pos:end="109:43"><name pos:start="109:16" pos:end="109:20">score</name> <operator pos:start="109:22" pos:end="109:23">&lt;=</operator> <name pos:start="109:25" pos:end="109:43">AVPROBE_SCORE_RETRY</name></expr>)</condition><block pos:start="109:45" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:142"> <comment type="line" pos:start="109:47" pos:end="109:91">//this can only be true in the last iteration</comment>

                <expr_stmt pos:start="111:17" pos:end="111:142"><expr pos:start="111:17" pos:end="111:141"><call pos:start="111:17" pos:end="111:141"><name pos:start="111:17" pos:end="111:22">av_log</name><argument_list pos:start="111:23" pos:end="111:141">(<argument pos:start="111:24" pos:end="111:29"><expr pos:start="111:24" pos:end="111:29"><name pos:start="111:24" pos:end="111:29">logctx</name></expr></argument>, <argument pos:start="111:32" pos:end="111:45"><expr pos:start="111:32" pos:end="111:45"><name pos:start="111:32" pos:end="111:45">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="111:48" pos:end="111:119"><expr pos:start="111:48" pos:end="111:119"><literal type="string" pos:start="111:48" pos:end="111:119">"Format %s detected only with low score of %d, misdetection possible!\n"</literal></expr></argument>, <argument pos:start="111:122" pos:end="111:133"><expr pos:start="111:122" pos:end="111:133"><name pos:start="111:122" pos:end="111:133"><operator pos:start="111:122" pos:end="111:122">(</operator><operator pos:start="111:123" pos:end="111:123">*</operator><name pos:start="111:124" pos:end="111:126">fmt</name><operator pos:start="111:127" pos:end="111:127">)</operator><operator pos:start="111:128" pos:end="111:129">-&gt;</operator><name pos:start="111:130" pos:end="111:133">name</name></name></expr></argument>, <argument pos:start="111:136" pos:end="111:140"><expr pos:start="111:136" pos:end="111:140"><name pos:start="111:136" pos:end="111:140">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="113:14" pos:end="115:126">else<block type="pseudo" pos:start="115:17" pos:end="115:126"><block_content pos:start="115:17" pos:end="115:126">

                <expr_stmt pos:start="115:17" pos:end="115:126"><expr pos:start="115:17" pos:end="115:125"><call pos:start="115:17" pos:end="115:125"><name pos:start="115:17" pos:end="115:22">av_log</name><argument_list pos:start="115:23" pos:end="115:125">(<argument pos:start="115:24" pos:end="115:29"><expr pos:start="115:24" pos:end="115:29"><name pos:start="115:24" pos:end="115:29">logctx</name></expr></argument>, <argument pos:start="115:32" pos:end="115:43"><expr pos:start="115:32" pos:end="115:43"><name pos:start="115:32" pos:end="115:43">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="115:46" pos:end="115:91"><expr pos:start="115:46" pos:end="115:91"><literal type="string" pos:start="115:46" pos:end="115:91">"Format %s probed with size=%d and score=%d\n"</literal></expr></argument>, <argument pos:start="115:94" pos:end="115:105"><expr pos:start="115:94" pos:end="115:105"><name pos:start="115:94" pos:end="115:105"><operator pos:start="115:94" pos:end="115:94">(</operator><operator pos:start="115:95" pos:end="115:95">*</operator><name pos:start="115:96" pos:end="115:98">fmt</name><operator pos:start="115:99" pos:end="115:99">)</operator><operator pos:start="115:100" pos:end="115:101">-&gt;</operator><name pos:start="115:102" pos:end="115:105">name</name></name></expr></argument>, <argument pos:start="115:108" pos:end="115:117"><expr pos:start="115:108" pos:end="115:117"><name pos:start="115:108" pos:end="115:117">probe_size</name></expr></argument>, <argument pos:start="115:120" pos:end="115:124"><expr pos:start="115:120" pos:end="115:124"><name pos:start="115:120" pos:end="115:124">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:14">(<expr pos:start="123:9" pos:end="123:13"><operator pos:start="123:9" pos:end="123:9">!</operator><operator pos:start="123:10" pos:end="123:10">*</operator><name pos:start="123:11" pos:end="123:13">fmt</name></expr>)</condition> <block pos:start="123:16" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:35">

        <expr_stmt pos:start="125:9" pos:end="125:21"><expr pos:start="125:9" pos:end="125:20"><call pos:start="125:9" pos:end="125:20"><name pos:start="125:9" pos:end="125:15">av_free</name><argument_list pos:start="125:16" pos:end="125:20">(<argument pos:start="125:17" pos:end="125:19"><expr pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:35">return <expr pos:start="127:16" pos:end="127:34"><name pos:start="127:16" pos:end="127:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:53">/* rewind. reuse probe buffer to avoid seeking */</comment>

    <if_stmt pos:start="135:5" pos:end="137:21"><if pos:start="135:5" pos:end="137:21">if <condition pos:start="135:8" pos:end="135:70">(<expr pos:start="135:9" pos:end="135:69"><operator pos:start="135:9" pos:end="135:9">(</operator><name pos:start="135:10" pos:end="135:12">ret</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <call pos:start="135:16" pos:end="135:64"><name pos:start="135:16" pos:end="135:42">ffio_rewind_with_probe_data</name><argument_list pos:start="135:43" pos:end="135:64">(<argument pos:start="135:44" pos:end="135:45"><expr pos:start="135:44" pos:end="135:45"><name pos:start="135:44" pos:end="135:45">pb</name></expr></argument>, <argument pos:start="135:48" pos:end="135:50"><expr pos:start="135:48" pos:end="135:50"><name pos:start="135:48" pos:end="135:50">buf</name></expr></argument>, <argument pos:start="135:53" pos:end="135:63"><expr pos:start="135:53" pos:end="135:63"><name pos:start="135:53" pos:end="135:63"><name pos:start="135:53" pos:end="135:54">pd</name><operator pos:start="135:55" pos:end="135:55">.</operator><name pos:start="135:56" pos:end="135:63">buf_size</name></name></expr></argument>)</argument_list></call><operator pos:start="135:65" pos:end="135:65">)</operator> <operator pos:start="135:67" pos:end="135:67">&lt;</operator> <literal type="number" pos:start="135:69" pos:end="135:69">0</literal></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:21"><block_content pos:start="137:9" pos:end="137:21">

        <expr_stmt pos:start="137:9" pos:end="137:21"><expr pos:start="137:9" pos:end="137:20"><call pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:15">av_free</name><argument_list pos:start="137:16" pos:end="137:20">(<argument pos:start="137:17" pos:end="137:19"><expr pos:start="137:17" pos:end="137:19"><name pos:start="137:17" pos:end="137:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="141:5" pos:end="141:15">return <expr pos:start="141:12" pos:end="141:14"><name pos:start="141:12" pos:end="141:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
