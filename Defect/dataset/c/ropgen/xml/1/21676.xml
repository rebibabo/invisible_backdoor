<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21676.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:30">decode_bytes</name><parameter_list pos:start="1:31" pos:end="1:80">(<parameter pos:start="1:32" pos:end="1:54"><decl pos:start="1:32" pos:end="1:54"><type pos:start="1:32" pos:end="1:54"><specifier pos:start="1:32" pos:end="1:36">const</specifier> <name pos:start="1:38" pos:end="1:44">uint8_t</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:54">inbuffer</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">uint8_t</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">out</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:79"><decl pos:start="1:71" pos:end="1:79"><type pos:start="1:71" pos:end="1:79"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:79">bytes</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:15">

    <decl_stmt pos:start="5:5" pos:end="11:6"><decl pos:start="5:5" pos:end="11:5"><type pos:start="5:5" pos:end="5:25"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:25">uint32_t</name></type> <name pos:start="5:27" pos:end="5:32"><name pos:start="5:27" pos:end="5:29">tab</name><index pos:start="5:30" pos:end="5:32">[<expr pos:start="5:31" pos:end="5:31"><literal type="number" pos:start="5:31" pos:end="5:31">4</literal></expr>]</index></name> <init pos:start="5:34" pos:end="11:5">= <expr pos:start="5:36" pos:end="11:5"><block pos:start="5:36" pos:end="11:5">{

        <expr pos:start="7:9" pos:end="7:31"><call pos:start="7:9" pos:end="7:31"><name pos:start="7:9" pos:end="7:19">AV_BE2NE32C</name><argument_list pos:start="7:20" pos:end="7:31">(<argument pos:start="7:21" pos:end="7:30"><expr pos:start="7:21" pos:end="7:30"><literal type="number" pos:start="7:21" pos:end="7:30">0x37c511f2</literal></expr></argument>)</argument_list></call></expr>, <expr pos:start="7:34" pos:end="7:56"><call pos:start="7:34" pos:end="7:56"><name pos:start="7:34" pos:end="7:44">AV_BE2NE32C</name><argument_list pos:start="7:45" pos:end="7:56">(<argument pos:start="7:46" pos:end="7:55"><expr pos:start="7:46" pos:end="7:55"><literal type="number" pos:start="7:46" pos:end="7:55">0xf237c511</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="9:9" pos:end="9:31"><call pos:start="9:9" pos:end="9:31"><name pos:start="9:9" pos:end="9:19">AV_BE2NE32C</name><argument_list pos:start="9:20" pos:end="9:31">(<argument pos:start="9:21" pos:end="9:30"><expr pos:start="9:21" pos:end="9:30"><literal type="number" pos:start="9:21" pos:end="9:30">0x11f237c5</literal></expr></argument>)</argument_list></call></expr>, <expr pos:start="9:34" pos:end="9:56"><call pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:44">AV_BE2NE32C</name><argument_list pos:start="9:45" pos:end="9:56">(<argument pos:start="9:46" pos:end="9:55"><expr pos:start="9:46" pos:end="9:55"><literal type="number" pos:start="9:46" pos:end="9:55">0xc511f237</literal></expr></argument>)</argument_list></call></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">off</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:14">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:20"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:18">uint32_t</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:23">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:38"><decl pos:start="19:5" pos:end="19:37"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint32_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:18">obuf</name> <init pos:start="19:20" pos:end="19:37">= <expr pos:start="19:22" pos:end="19:37"><operator pos:start="19:22" pos:end="19:22">(</operator><name pos:start="19:23" pos:end="19:30">uint32_t</name> <operator pos:start="19:32" pos:end="19:32">*</operator><operator pos:start="19:33" pos:end="19:33">)</operator> <name pos:start="19:35" pos:end="19:37">out</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="21:5" pos:end="29:47">/* FIXME: 64 bit platforms would be able to do 64 bits at a time.

     * I'm too lazy though, should be something like

     * for (i = 0; i &lt; bitamount / 64; i++)

     *     (int64_t) out[i] = 0x37c511f237c511f2 ^ av_be2ne64(int64_t) in[i]);

     * Buffer alignment needs to be checked. */</comment>



    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:7">off</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <operator pos:start="33:11" pos:end="33:11">(</operator><name pos:start="33:12" pos:end="33:19">intptr_t</name><operator pos:start="33:20" pos:end="33:20">)</operator> <name pos:start="33:22" pos:end="33:29">inbuffer</name> <operator pos:start="33:31" pos:end="33:31">&amp;</operator> <literal type="number" pos:start="33:33" pos:end="33:33">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:7">buf</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <operator pos:start="35:11" pos:end="35:11">(</operator><specifier pos:start="35:12" pos:end="35:16">const</specifier> <name pos:start="35:18" pos:end="35:25">uint32_t</name> <operator pos:start="35:27" pos:end="35:27">*</operator><operator pos:start="35:28" pos:end="35:28">)</operator> <operator pos:start="35:30" pos:end="35:30">(</operator><name pos:start="35:31" pos:end="35:38">inbuffer</name> <operator pos:start="35:40" pos:end="35:40">-</operator> <name pos:start="35:42" pos:end="35:44">off</name><operator pos:start="35:45" pos:end="35:45">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:17"><expr pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:5">c</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <name pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">tab</name><index pos:start="37:12" pos:end="37:16">[<expr pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">off</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:9">bytes</name> <operator pos:start="39:11" pos:end="39:12">+=</operator> <literal type="number" pos:start="39:14" pos:end="39:16">3</literal> <operator pos:start="39:16" pos:end="39:16">+</operator> <name pos:start="39:18" pos:end="39:20">off</name></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="43:29">for <control pos:start="41:9" pos:end="41:35">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:30"><expr pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:25">bytes</name> <operator pos:start="41:27" pos:end="41:27">/</operator> <literal type="number" pos:start="41:29" pos:end="41:29">4</literal></expr>;</condition> <incr pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:32">i</name><operator pos:start="41:33" pos:end="41:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:9" pos:end="43:29"><block_content pos:start="43:9" pos:end="43:29">

        <expr_stmt pos:start="43:9" pos:end="43:29"><expr pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:12">obuf</name><index pos:start="43:13" pos:end="43:15">[<expr pos:start="43:14" pos:end="43:14"><name pos:start="43:14" pos:end="43:14">i</name></expr>]</index></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:19">c</name> <operator pos:start="43:21" pos:end="43:21">^</operator> <name pos:start="43:23" pos:end="43:28"><name pos:start="43:23" pos:end="43:25">buf</name><index pos:start="43:26" pos:end="43:28">[<expr pos:start="43:27" pos:end="43:27"><name pos:start="43:27" pos:end="43:27">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



    <return pos:start="47:5" pos:end="47:15">return <expr pos:start="47:12" pos:end="47:14"><name pos:start="47:12" pos:end="47:14">off</name></expr>;</return>

</block_content>}</block></function>
</unit>
