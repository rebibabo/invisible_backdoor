<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14103.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">test_visitor_in_uint</name><parameter_list pos:start="1:33" pos:end="3:51">(<parameter pos:start="1:34" pos:end="1:59"><decl pos:start="1:34" pos:end="1:59"><type pos:start="1:34" pos:end="1:59"><name pos:start="1:34" pos:end="1:53">TestInputVisitorData</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:50"><decl pos:start="3:33" pos:end="3:50"><type pos:start="3:33" pos:end="3:50"><specifier pos:start="3:33" pos:end="3:37">const</specifier> <name pos:start="3:39" pos:end="3:42">void</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:50">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:55">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">err</name> <init pos:start="7:16" pos:end="7:21">= <expr pos:start="7:18" pos:end="7:21"><name pos:start="7:18" pos:end="7:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">res</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:15">i64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">double</name></type> <name pos:start="13:12" pos:end="13:14">dbl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">value</name> <init pos:start="15:15" pos:end="15:18">= <expr pos:start="15:17" pos:end="15:18"><literal type="number" pos:start="15:17" pos:end="15:18">42</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">Visitor</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:14">v</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:5">v</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <call pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:31">visitor_input_test_init</name><argument_list pos:start="21:32" pos:end="21:50">(<argument pos:start="21:33" pos:end="21:36"><expr pos:start="21:33" pos:end="21:36"><name pos:start="21:33" pos:end="21:36">data</name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><literal type="string" pos:start="21:39" pos:end="21:42">"%d"</literal></expr></argument>, <argument pos:start="21:45" pos:end="21:49"><expr pos:start="21:45" pos:end="21:49"><name pos:start="21:45" pos:end="21:49">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:51"><expr pos:start="25:5" pos:end="25:50"><call pos:start="25:5" pos:end="25:50"><name pos:start="25:5" pos:end="25:21">visit_type_uint64</name><argument_list pos:start="25:22" pos:end="25:50">(<argument pos:start="25:23" pos:end="25:23"><expr pos:start="25:23" pos:end="25:23"><name pos:start="25:23" pos:end="25:23">v</name></expr></argument>, <argument pos:start="25:26" pos:end="25:29"><expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></argument>, <argument pos:start="25:32" pos:end="25:35"><expr pos:start="25:32" pos:end="25:35"><operator pos:start="25:32" pos:end="25:32">&amp;</operator><name pos:start="25:33" pos:end="25:35">res</name></expr></argument>, <argument pos:start="25:38" pos:end="25:49"><expr pos:start="25:38" pos:end="25:49"><operator pos:start="25:38" pos:end="25:38">&amp;</operator><name pos:start="25:39" pos:end="25:49">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:20">g_assert_cmpuint</name><argument_list pos:start="27:21" pos:end="27:46">(<argument pos:start="27:22" pos:end="27:24"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">res</name></expr></argument>, <argument pos:start="27:27" pos:end="27:28"><expr pos:start="27:27" pos:end="27:28"><operator pos:start="27:27" pos:end="27:28">==</operator></expr></argument>, <argument pos:start="27:31" pos:end="27:45"><expr pos:start="27:31" pos:end="27:45"><operator pos:start="27:31" pos:end="27:31">(</operator><name pos:start="27:32" pos:end="27:39">uint64_t</name><operator pos:start="27:40" pos:end="27:40">)</operator><name pos:start="27:41" pos:end="27:45">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:48"><expr pos:start="31:5" pos:end="31:47"><call pos:start="31:5" pos:end="31:47"><name pos:start="31:5" pos:end="31:18">visit_type_int</name><argument_list pos:start="31:19" pos:end="31:47">(<argument pos:start="31:20" pos:end="31:20"><expr pos:start="31:20" pos:end="31:20"><name pos:start="31:20" pos:end="31:20">v</name></expr></argument>, <argument pos:start="31:23" pos:end="31:26"><expr pos:start="31:23" pos:end="31:26"><name pos:start="31:23" pos:end="31:26">NULL</name></expr></argument>, <argument pos:start="31:29" pos:end="31:32"><expr pos:start="31:29" pos:end="31:32"><operator pos:start="31:29" pos:end="31:29">&amp;</operator><name pos:start="31:30" pos:end="31:32">i64</name></expr></argument>, <argument pos:start="31:35" pos:end="31:46"><expr pos:start="31:35" pos:end="31:46"><operator pos:start="31:35" pos:end="31:35">&amp;</operator><name pos:start="31:36" pos:end="31:46">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><call pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:19">g_assert_cmpint</name><argument_list pos:start="33:20" pos:end="33:35">(<argument pos:start="33:21" pos:end="33:23"><expr pos:start="33:21" pos:end="33:23"><name pos:start="33:21" pos:end="33:23">i64</name></expr></argument>, <argument pos:start="33:26" pos:end="33:27"><expr pos:start="33:26" pos:end="33:27"><operator pos:start="33:26" pos:end="33:27">==</operator></expr></argument>, <argument pos:start="33:30" pos:end="33:34"><expr pos:start="33:30" pos:end="33:34"><name pos:start="33:30" pos:end="33:34">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:51"><expr pos:start="37:5" pos:end="37:50"><call pos:start="37:5" pos:end="37:50"><name pos:start="37:5" pos:end="37:21">visit_type_number</name><argument_list pos:start="37:22" pos:end="37:50">(<argument pos:start="37:23" pos:end="37:23"><expr pos:start="37:23" pos:end="37:23"><name pos:start="37:23" pos:end="37:23">v</name></expr></argument>, <argument pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:29">NULL</name></expr></argument>, <argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><operator pos:start="37:32" pos:end="37:32">&amp;</operator><name pos:start="37:33" pos:end="37:35">dbl</name></expr></argument>, <argument pos:start="37:38" pos:end="37:49"><expr pos:start="37:38" pos:end="37:49"><operator pos:start="37:38" pos:end="37:38">&amp;</operator><name pos:start="37:39" pos:end="37:49">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><call pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:21">g_assert_cmpfloat</name><argument_list pos:start="39:22" pos:end="39:37">(<argument pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:25">dbl</name></expr></argument>, <argument pos:start="39:28" pos:end="39:29"><expr pos:start="39:28" pos:end="39:29"><operator pos:start="39:28" pos:end="39:29">==</operator></expr></argument>, <argument pos:start="39:32" pos:end="39:36"><expr pos:start="39:32" pos:end="39:36"><name pos:start="39:32" pos:end="39:36">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:66">/* BUG: value between INT64_MIN and -1 accepted modulo 2^64 */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:52"><expr pos:start="45:5" pos:end="45:51"><name pos:start="45:5" pos:end="45:5">v</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <call pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:31">visitor_input_test_init</name><argument_list pos:start="45:32" pos:end="45:51">(<argument pos:start="45:33" pos:end="45:36"><expr pos:start="45:33" pos:end="45:36"><name pos:start="45:33" pos:end="45:36">data</name></expr></argument>, <argument pos:start="45:39" pos:end="45:42"><expr pos:start="45:39" pos:end="45:42"><literal type="string" pos:start="45:39" pos:end="45:42">"%d"</literal></expr></argument>, <argument pos:start="45:45" pos:end="45:50"><expr pos:start="45:45" pos:end="45:50"><operator pos:start="45:45" pos:end="45:45">-</operator><name pos:start="45:46" pos:end="45:50">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:51"><expr pos:start="49:5" pos:end="49:50"><call pos:start="49:5" pos:end="49:50"><name pos:start="49:5" pos:end="49:21">visit_type_uint64</name><argument_list pos:start="49:22" pos:end="49:50">(<argument pos:start="49:23" pos:end="49:23"><expr pos:start="49:23" pos:end="49:23"><name pos:start="49:23" pos:end="49:23">v</name></expr></argument>, <argument pos:start="49:26" pos:end="49:29"><expr pos:start="49:26" pos:end="49:29"><name pos:start="49:26" pos:end="49:29">NULL</name></expr></argument>, <argument pos:start="49:32" pos:end="49:35"><expr pos:start="49:32" pos:end="49:35"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:35">res</name></expr></argument>, <argument pos:start="49:38" pos:end="49:49"><expr pos:start="49:38" pos:end="49:49"><operator pos:start="49:38" pos:end="49:38">&amp;</operator><name pos:start="49:39" pos:end="49:49">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:48"><expr pos:start="51:5" pos:end="51:47"><call pos:start="51:5" pos:end="51:47"><name pos:start="51:5" pos:end="51:20">g_assert_cmpuint</name><argument_list pos:start="51:21" pos:end="51:47">(<argument pos:start="51:22" pos:end="51:24"><expr pos:start="51:22" pos:end="51:24"><name pos:start="51:22" pos:end="51:24">res</name></expr></argument>, <argument pos:start="51:27" pos:end="51:28"><expr pos:start="51:27" pos:end="51:28"><operator pos:start="51:27" pos:end="51:28">==</operator></expr></argument>, <argument pos:start="51:31" pos:end="51:46"><expr pos:start="51:31" pos:end="51:46"><operator pos:start="51:31" pos:end="51:31">(</operator><name pos:start="51:32" pos:end="51:39">uint64_t</name><operator pos:start="51:40" pos:end="51:40">)</operator><operator pos:start="51:41" pos:end="51:41">-</operator><name pos:start="51:42" pos:end="51:46">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:64">/* BUG: value between INT64_MAX+1 and UINT64_MAX rejected */</comment>



    <expr_stmt pos:start="59:5" pos:end="59:62"><expr pos:start="59:5" pos:end="59:61"><name pos:start="59:5" pos:end="59:5">v</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <call pos:start="59:9" pos:end="59:61"><name pos:start="59:9" pos:end="59:31">visitor_input_test_init</name><argument_list pos:start="59:32" pos:end="59:61">(<argument pos:start="59:33" pos:end="59:36"><expr pos:start="59:33" pos:end="59:36"><name pos:start="59:33" pos:end="59:36">data</name></expr></argument>, <argument pos:start="59:39" pos:end="59:60"><expr pos:start="59:39" pos:end="59:60"><literal type="string" pos:start="59:39" pos:end="59:60">"18446744073709551574"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><call pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:21">visit_type_uint64</name><argument_list pos:start="63:22" pos:end="63:42">(<argument pos:start="63:23" pos:end="63:23"><expr pos:start="63:23" pos:end="63:23"><name pos:start="63:23" pos:end="63:23">v</name></expr></argument>, <argument pos:start="63:26" pos:end="63:29"><expr pos:start="63:26" pos:end="63:29"><name pos:start="63:26" pos:end="63:29">NULL</name></expr></argument>, <argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><operator pos:start="63:32" pos:end="63:32">&amp;</operator><name pos:start="63:33" pos:end="63:35">res</name></expr></argument>, <argument pos:start="63:38" pos:end="63:41"><expr pos:start="63:38" pos:end="63:41"><operator pos:start="63:38" pos:end="63:38">&amp;</operator><name pos:start="63:39" pos:end="63:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><call pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:23">error_free_or_abort</name><argument_list pos:start="65:24" pos:end="65:29">(<argument pos:start="65:25" pos:end="65:28"><expr pos:start="65:25" pos:end="65:28"><operator pos:start="65:25" pos:end="65:25">&amp;</operator><name pos:start="65:26" pos:end="65:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><call pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:21">visit_type_number</name><argument_list pos:start="69:22" pos:end="69:50">(<argument pos:start="69:23" pos:end="69:23"><expr pos:start="69:23" pos:end="69:23"><name pos:start="69:23" pos:end="69:23">v</name></expr></argument>, <argument pos:start="69:26" pos:end="69:29"><expr pos:start="69:26" pos:end="69:29"><name pos:start="69:26" pos:end="69:29">NULL</name></expr></argument>, <argument pos:start="69:32" pos:end="69:35"><expr pos:start="69:32" pos:end="69:35"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:35">dbl</name></expr></argument>, <argument pos:start="69:38" pos:end="69:49"><expr pos:start="69:38" pos:end="69:49"><operator pos:start="69:38" pos:end="69:38">&amp;</operator><name pos:start="69:39" pos:end="69:49">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:55"><expr pos:start="71:5" pos:end="71:54"><call pos:start="71:5" pos:end="71:54"><name pos:start="71:5" pos:end="71:21">g_assert_cmpfloat</name><argument_list pos:start="71:22" pos:end="71:54">(<argument pos:start="71:23" pos:end="71:25"><expr pos:start="71:23" pos:end="71:25"><name pos:start="71:23" pos:end="71:25">dbl</name></expr></argument>, <argument pos:start="71:28" pos:end="71:29"><expr pos:start="71:28" pos:end="71:29"><operator pos:start="71:28" pos:end="71:29">==</operator></expr></argument>, <argument pos:start="71:32" pos:end="71:53"><expr pos:start="71:32" pos:end="71:53"><literal type="number" pos:start="71:32" pos:end="71:53">18446744073709552000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
