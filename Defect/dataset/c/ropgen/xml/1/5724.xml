<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5724.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:16">sample_dump</name><parameter_list pos:start="1:17" pos:end="1:47">(<parameter pos:start="1:18" pos:end="1:25"><decl pos:start="1:18" pos:end="1:25"><type pos:start="1:18" pos:end="1:25"><name pos:start="1:18" pos:end="1:20">int</name></type> <name pos:start="1:22" pos:end="1:25">fnum</name></decl></parameter>, <parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:34">int32_t</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">tab</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:46"><decl pos:start="1:42" pos:end="1:46"><type pos:start="1:42" pos:end="1:46"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:46">n</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:17"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:15">FILE</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:26"><name pos:start="5:18" pos:end="5:22">files</name><index pos:start="5:23" pos:end="5:26">[<expr pos:start="5:24" pos:end="5:25"><literal type="number" pos:start="5:24" pos:end="5:25">16</literal></expr>]</index></name></decl>, <decl pos:start="5:29" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:17"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:17"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:17">[<expr pos:start="7:14" pos:end="7:16"><literal type="number" pos:start="7:14" pos:end="7:16">512</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int32_t</name></type> <name pos:start="11:13" pos:end="11:13">v</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="15:5" pos:end="15:20"><expr pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:5">f</name> <operator pos:start="15:7" pos:end="15:7">=</operator> <name pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:13">files</name><index pos:start="15:14" pos:end="15:19">[<expr pos:start="15:15" pos:end="15:18"><name pos:start="15:15" pos:end="15:18">fnum</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="43:5"><if pos:start="17:5" pos:end="43:5">if <condition pos:start="17:8" pos:end="17:11">(<expr pos:start="17:9" pos:end="17:10"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:10">f</name></expr>)</condition> <block pos:start="17:13" pos:end="43:5">{<block_content pos:start="19:9" pos:end="41:24">

        <expr_stmt pos:start="19:9" pos:end="33:18"><expr pos:start="19:9" pos:end="33:17"><call pos:start="19:9" pos:end="33:17"><name pos:start="19:9" pos:end="19:16">snprintf</name><argument_list pos:start="19:17" pos:end="33:17">(<argument pos:start="19:18" pos:end="19:20"><expr pos:start="19:18" pos:end="19:20"><name pos:start="19:18" pos:end="19:20">buf</name></expr></argument>, <argument pos:start="19:23" pos:end="19:33"><expr pos:start="19:23" pos:end="19:33"><sizeof pos:start="19:23" pos:end="19:33">sizeof<argument_list pos:start="19:29" pos:end="19:33">(<argument pos:start="19:30" pos:end="19:32"><expr pos:start="19:30" pos:end="19:32"><name pos:start="19:30" pos:end="19:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:36" pos:end="19:54"><expr pos:start="19:36" pos:end="19:54"><literal type="string" pos:start="19:36" pos:end="19:54">"/tmp/out%d.%s.pcm"</literal></expr></argument>, 

                <argument pos:start="21:17" pos:end="21:20"><expr pos:start="21:17" pos:end="21:20"><name pos:start="21:17" pos:end="21:20">fnum</name></expr></argument>, 

<cpp:ifdef pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:24">USE_HIGHPRECISION</name></cpp:ifdef>

                <argument pos:start="25:17" pos:end="32:0"><expr pos:start="25:17" pos:end="32:0"><literal type="string" pos:start="25:17" pos:end="28:0">"hp"</literal>

<cpp:else pos:start="27:1" pos:end="27:5">#<cpp:directive pos:start="27:2" pos:end="27:5">else</cpp:directive></cpp:else>

                <literal type="string" pos:start="29:17" pos:end="32:0">"lp"</literal></expr></argument>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

                )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:28"><expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:9">f</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:17">fopen</name><argument_list pos:start="35:18" pos:end="35:27">(<argument pos:start="35:19" pos:end="35:21"><expr pos:start="35:19" pos:end="35:21"><name pos:start="35:19" pos:end="35:21">buf</name></expr></argument>, <argument pos:start="35:24" pos:end="35:26"><expr pos:start="35:24" pos:end="35:26"><literal type="string" pos:start="35:24" pos:end="35:26">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:19"><if pos:start="37:9" pos:end="39:19">if <condition pos:start="37:12" pos:end="37:15">(<expr pos:start="37:13" pos:end="37:14"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:14">f</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:19"><block_content pos:start="39:13" pos:end="39:19">

            <return pos:start="39:13" pos:end="39:19">return;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:24"><expr pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:13">files</name><index pos:start="41:14" pos:end="41:19">[<expr pos:start="41:15" pos:end="41:18"><name pos:start="41:15" pos:end="41:18">fnum</name></expr>]</index></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <name pos:start="41:23" pos:end="41:23">f</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    

    <if_stmt pos:start="47:5" pos:end="65:5"><if pos:start="47:5" pos:end="65:5">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:12">fnum</name> <operator pos:start="47:14" pos:end="47:15">==</operator> <literal type="number" pos:start="47:17" pos:end="47:17">0</literal></expr>)</condition> <block pos:start="47:20" pos:end="65:5">{<block_content pos:start="49:9" pos:end="63:17">

        <decl_stmt pos:start="49:9" pos:end="49:27"><decl pos:start="49:9" pos:end="49:26"><type pos:start="49:9" pos:end="49:18"><specifier pos:start="49:9" pos:end="49:14">static</specifier> <name pos:start="49:16" pos:end="49:18">int</name></type> <name pos:start="49:20" pos:end="49:22">pos</name> <init pos:start="49:24" pos:end="49:26">= <expr pos:start="49:26" pos:end="49:26"><literal type="number" pos:start="49:26" pos:end="49:26">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:32"><expr pos:start="51:9" pos:end="51:31"><call pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:14">printf</name><argument_list pos:start="51:15" pos:end="51:31">(<argument pos:start="51:16" pos:end="51:25"><expr pos:start="51:16" pos:end="51:25"><literal type="string" pos:start="51:16" pos:end="51:25">"pos=%d\n"</literal></expr></argument>, <argument pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><name pos:start="51:28" pos:end="51:30">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="53:9" pos:end="61:9">for<control pos:start="53:12" pos:end="53:24">(<init pos:start="53:13" pos:end="53:16"><expr pos:start="53:13" pos:end="53:15"><name pos:start="53:13" pos:end="53:13">i</name><operator pos:start="53:14" pos:end="53:14">=</operator><literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>;</init><condition pos:start="53:17" pos:end="53:20"><expr pos:start="53:17" pos:end="53:19"><name pos:start="53:17" pos:end="53:17">i</name><operator pos:start="53:18" pos:end="53:18">&lt;</operator><name pos:start="53:19" pos:end="53:19">n</name></expr>;</condition><incr pos:start="53:21" pos:end="53:23"><expr pos:start="53:21" pos:end="53:23"><name pos:start="53:21" pos:end="53:21">i</name><operator pos:start="53:22" pos:end="53:23">++</operator></expr></incr>)</control> <block pos:start="53:26" pos:end="61:9">{<block_content pos:start="55:13" pos:end="59:29">

            <expr_stmt pos:start="55:13" pos:end="55:56"><expr pos:start="55:13" pos:end="55:55"><call pos:start="55:13" pos:end="55:55"><name pos:start="55:13" pos:end="55:18">printf</name><argument_list pos:start="55:19" pos:end="55:55">(<argument pos:start="55:20" pos:end="55:27"><expr pos:start="55:20" pos:end="55:27"><literal type="string" pos:start="55:20" pos:end="55:27">" %0.4f"</literal></expr></argument>, <argument pos:start="55:30" pos:end="55:54"><expr pos:start="55:30" pos:end="55:54"><operator pos:start="55:30" pos:end="55:30">(</operator><name pos:start="55:31" pos:end="55:36">double</name><operator pos:start="55:37" pos:end="55:37">)</operator><name pos:start="55:38" pos:end="55:43"><name pos:start="55:38" pos:end="55:40">tab</name><index pos:start="55:41" pos:end="55:43">[<expr pos:start="55:42" pos:end="55:42"><name pos:start="55:42" pos:end="55:42">i</name></expr>]</index></name> <operator pos:start="55:45" pos:end="55:45">/</operator> <name pos:start="55:47" pos:end="55:54">FRAC_ONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="57:13" pos:end="59:29"><if pos:start="57:13" pos:end="59:29">if <condition pos:start="57:16" pos:end="57:31">(<expr pos:start="57:17" pos:end="57:30"><operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:18">i</name> <operator pos:start="57:20" pos:end="57:20">%</operator> <literal type="number" pos:start="57:22" pos:end="57:23">18</literal><operator pos:start="57:24" pos:end="57:24">)</operator> <operator pos:start="57:26" pos:end="57:27">==</operator> <literal type="number" pos:start="57:29" pos:end="57:30">17</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:29"><block_content pos:start="59:17" pos:end="59:29">

                <expr_stmt pos:start="59:17" pos:end="59:29"><expr pos:start="59:17" pos:end="59:28"><call pos:start="59:17" pos:end="59:28"><name pos:start="59:17" pos:end="59:22">printf</name><argument_list pos:start="59:23" pos:end="59:28">(<argument pos:start="59:24" pos:end="59:27"><expr pos:start="59:24" pos:end="59:27"><literal type="string" pos:start="59:24" pos:end="59:27">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="63:9" pos:end="63:17"><expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:11">pos</name> <operator pos:start="63:13" pos:end="63:14">+=</operator> <name pos:start="63:16" pos:end="63:16">n</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="67:5" pos:end="75:5">for<control pos:start="67:8" pos:end="67:20">(<init pos:start="67:9" pos:end="67:12"><expr pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:9">i</name><operator pos:start="67:10" pos:end="67:10">=</operator><literal type="number" pos:start="67:11" pos:end="67:11">0</literal></expr>;</init><condition pos:start="67:13" pos:end="67:16"><expr pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:13">i</name><operator pos:start="67:14" pos:end="67:14">&lt;</operator><name pos:start="67:15" pos:end="67:15">n</name></expr>;</condition><incr pos:start="67:17" pos:end="67:19"><expr pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:17">i</name><operator pos:start="67:18" pos:end="67:19">++</operator></expr></incr>)</control> <block pos:start="67:22" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:42">

        <comment type="block" pos:start="69:9" pos:end="69:39">/* normalize to 23 frac bits */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:39"><expr pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:9">v</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <name pos:start="71:13" pos:end="71:18"><name pos:start="71:13" pos:end="71:15">tab</name><index pos:start="71:16" pos:end="71:18">[<expr pos:start="71:17" pos:end="71:17"><name pos:start="71:17" pos:end="71:17">i</name></expr>]</index></name> <operator pos:start="71:20" pos:end="71:21">&lt;&lt;</operator> <operator pos:start="71:23" pos:end="71:23">(</operator><literal type="number" pos:start="71:24" pos:end="71:27">23</literal> <operator pos:start="71:27" pos:end="71:27">-</operator> <name pos:start="71:29" pos:end="71:37">FRAC_BITS</name><operator pos:start="71:38" pos:end="71:38">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:42"><expr pos:start="73:9" pos:end="73:41"><call pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:14">fwrite</name><argument_list pos:start="73:15" pos:end="73:41">(<argument pos:start="73:16" pos:end="73:17"><expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">&amp;</operator><name pos:start="73:17" pos:end="73:17">v</name></expr></argument>, <argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><literal type="number" pos:start="73:20" pos:end="73:20">1</literal></expr></argument>, <argument pos:start="73:23" pos:end="73:37"><expr pos:start="73:23" pos:end="73:37"><sizeof pos:start="73:23" pos:end="73:37">sizeof<argument_list pos:start="73:29" pos:end="73:37">(<argument pos:start="73:30" pos:end="73:36"><expr pos:start="73:30" pos:end="73:36"><name pos:start="73:30" pos:end="73:36">int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="73:40" pos:end="73:40"><expr pos:start="73:40" pos:end="73:40"><name pos:start="73:40" pos:end="73:40">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
