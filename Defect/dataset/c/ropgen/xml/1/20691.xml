<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20691.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">loadvm_postcopy_handle_run_bh</name><parameter_list pos:start="1:42" pos:end="1:55">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:48"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:28">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26">MigrationIncomingState</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:31">mis</name> <init pos:start="7:33" pos:end="7:40">= <expr pos:start="7:35" pos:end="7:40"><name pos:start="7:35" pos:end="7:40">opaque</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="15:7">/* TODO we should move all of this lot into postcopy_ram.c or a shared code

     * in migration.c

     */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:36"><expr pos:start="17:5" pos:end="17:35"><call pos:start="17:5" pos:end="17:35"><name pos:start="17:5" pos:end="17:33">cpu_synchronize_all_post_init</name><argument_list pos:start="17:34" pos:end="17:35">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><call pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:22">qemu_announce_self</name><argument_list pos:start="21:23" pos:end="21:24">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:65">/* Make sure all file formats flush their mutable metadata */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:42"><expr pos:start="27:5" pos:end="27:41"><call pos:start="27:5" pos:end="27:41"><name pos:start="27:5" pos:end="27:29">bdrv_invalidate_cache_all</name><argument_list pos:start="27:30" pos:end="27:41">(<argument pos:start="27:31" pos:end="27:40"><expr pos:start="27:31" pos:end="27:40"><operator pos:start="27:31" pos:end="27:31">&amp;</operator><name pos:start="27:32" pos:end="27:40">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:17">local_err</name></expr>)</condition> <block pos:start="29:20" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:36">

        <expr_stmt pos:start="31:9" pos:end="31:36"><expr pos:start="31:9" pos:end="31:35"><call pos:start="31:9" pos:end="31:35"><name pos:start="31:9" pos:end="31:24">error_report_err</name><argument_list pos:start="31:25" pos:end="31:35">(<argument pos:start="31:26" pos:end="31:34"><expr pos:start="31:26" pos:end="31:34"><name pos:start="31:26" pos:end="31:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><call pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:45">trace_loadvm_postcopy_handle_run_cpu_sync</name><argument_list pos:start="37:46" pos:end="37:47">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><call pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:33">cpu_synchronize_all_post_init</name><argument_list pos:start="39:34" pos:end="39:35">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><call pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:44">trace_loadvm_postcopy_handle_run_vmstart</name><argument_list pos:start="43:45" pos:end="43:46">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="59:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:17">autostart</name></expr>)</condition> <block pos:start="47:20" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:19">

        <comment type="block" pos:start="49:9" pos:end="49:51">/* Hold onto your hats, starting the CPU */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><call pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:16">vm_start</name><argument_list pos:start="51:17" pos:end="51:18">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="59:5">else <block pos:start="53:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:39">

        <comment type="block" pos:start="55:9" pos:end="55:77">/* leave it paused and let management decide when to start the CPU */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:39"><expr pos:start="57:9" pos:end="57:38"><call pos:start="57:9" pos:end="57:38"><name pos:start="57:9" pos:end="57:20">runstate_set</name><argument_list pos:start="57:21" pos:end="57:38">(<argument pos:start="57:22" pos:end="57:37"><expr pos:start="57:22" pos:end="57:37"><name pos:start="57:22" pos:end="57:37">RUN_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><call pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:18">qemu_bh_delete</name><argument_list pos:start="63:19" pos:end="63:27">(<argument pos:start="63:20" pos:end="63:26"><expr pos:start="63:20" pos:end="63:26"><name pos:start="63:20" pos:end="63:26"><name pos:start="63:20" pos:end="63:22">mis</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:26">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
