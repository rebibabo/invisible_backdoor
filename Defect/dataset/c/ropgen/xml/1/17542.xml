<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17542.c" pos:tabs="8"><function pos:start="1:1" pos:end="499:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vmdk_create</name><parameter_list pos:start="1:23" pos:end="1:74">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:43">filename</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:53">QemuOpts</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">opts</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:66">Error</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier><modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="499:1">{<block_content pos:start="5:5" pos:end="497:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">idx</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BlockBackend</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">new_blk</name> <init pos:start="7:27" pos:end="7:32">= <expr pos:start="7:29" pos:end="7:32"><name pos:start="7:29" pos:end="7:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:14">desc</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:22">total_size</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>, <decl pos:start="13:29" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:29" pos:end="13:36">filesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:22">adapter_type</name> <init pos:start="15:24" pos:end="15:29">= <expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:22">backing_file</name> <init pos:start="17:24" pos:end="17:29">= <expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:20">hw_version</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:13">fmt</name> <init pos:start="21:15" pos:end="21:20">= <expr pos:start="21:17" pos:end="21:20"><name pos:start="21:17" pos:end="21:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:13">flat</name></decl>, <decl pos:start="25:16" pos:end="25:20"><type ref="prev" pos:start="25:5" pos:end="25:8"/><name pos:start="25:16" pos:end="25:20">split</name></decl>, <decl pos:start="25:23" pos:end="25:30"><type ref="prev" pos:start="25:5" pos:end="25:8"/><name pos:start="25:23" pos:end="25:30">compress</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">GString</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:27">ext_desc_lines</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:37"><decl pos:start="29:5" pos:end="29:36"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:8">char</name> <modifier pos:start="29:10" pos:end="29:10">*</modifier></type><name pos:start="29:11" pos:end="29:14">path</name> <init pos:start="29:16" pos:end="29:36">= <expr pos:start="29:18" pos:end="29:36"><call pos:start="29:18" pos:end="29:36"><name pos:start="29:18" pos:end="29:26">g_malloc0</name><argument_list pos:start="29:27" pos:end="29:36">(<argument pos:start="29:28" pos:end="29:35"><expr pos:start="29:28" pos:end="29:35"><name pos:start="29:28" pos:end="29:35">PATH_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:39"><decl pos:start="31:5" pos:end="31:38"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:8">char</name> <modifier pos:start="31:10" pos:end="31:10">*</modifier></type><name pos:start="31:11" pos:end="31:16">prefix</name> <init pos:start="31:18" pos:end="31:38">= <expr pos:start="31:20" pos:end="31:38"><call pos:start="31:20" pos:end="31:38"><name pos:start="31:20" pos:end="31:28">g_malloc0</name><argument_list pos:start="31:29" pos:end="31:38">(<argument pos:start="31:30" pos:end="31:37"><expr pos:start="31:30" pos:end="31:37"><name pos:start="31:30" pos:end="31:37">PATH_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:40"><decl pos:start="33:5" pos:end="33:39"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:8">char</name> <modifier pos:start="33:10" pos:end="33:10">*</modifier></type><name pos:start="33:11" pos:end="33:17">postfix</name> <init pos:start="33:19" pos:end="33:39">= <expr pos:start="33:21" pos:end="33:39"><call pos:start="33:21" pos:end="33:39"><name pos:start="33:21" pos:end="33:29">g_malloc0</name><argument_list pos:start="33:30" pos:end="33:39">(<argument pos:start="33:31" pos:end="33:38"><expr pos:start="33:31" pos:end="33:38"><name pos:start="33:31" pos:end="33:38">PATH_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:42"><decl pos:start="35:5" pos:end="35:41"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:8">char</name> <modifier pos:start="35:10" pos:end="35:10">*</modifier></type><name pos:start="35:11" pos:end="35:19">desc_line</name> <init pos:start="35:21" pos:end="35:41">= <expr pos:start="35:23" pos:end="35:41"><call pos:start="35:23" pos:end="35:41"><name pos:start="35:23" pos:end="35:31">g_malloc0</name><argument_list pos:start="35:32" pos:end="35:41">(<argument pos:start="35:33" pos:end="35:40"><expr pos:start="35:33" pos:end="35:40"><name pos:start="35:33" pos:end="35:40">BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:45"><decl pos:start="37:5" pos:end="37:44"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:8">char</name> <modifier pos:start="37:10" pos:end="37:10">*</modifier></type><name pos:start="37:11" pos:end="37:22">ext_filename</name> <init pos:start="37:24" pos:end="37:44">= <expr pos:start="37:26" pos:end="37:44"><call pos:start="37:26" pos:end="37:44"><name pos:start="37:26" pos:end="37:34">g_malloc0</name><argument_list pos:start="37:35" pos:end="37:44">(<argument pos:start="37:36" pos:end="37:43"><expr pos:start="37:36" pos:end="37:43"><name pos:start="37:36" pos:end="37:43">PATH_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:46"><decl pos:start="39:5" pos:end="39:45"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:8">char</name> <modifier pos:start="39:10" pos:end="39:10">*</modifier></type><name pos:start="39:11" pos:end="39:23">desc_filename</name> <init pos:start="39:25" pos:end="39:45">= <expr pos:start="39:27" pos:end="39:45"><call pos:start="39:27" pos:end="39:45"><name pos:start="39:27" pos:end="39:35">g_malloc0</name><argument_list pos:start="39:36" pos:end="39:45">(<argument pos:start="39:37" pos:end="39:44"><expr pos:start="39:37" pos:end="39:44"><name pos:start="39:37" pos:end="39:44">PATH_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:42"><decl pos:start="41:5" pos:end="41:41"><type pos:start="41:5" pos:end="41:17"><specifier pos:start="41:5" pos:end="41:9">const</specifier> <name pos:start="41:11" pos:end="41:17">int64_t</name></type> <name pos:start="41:19" pos:end="41:28">split_size</name> <init pos:start="41:30" pos:end="41:41">= <expr pos:start="41:32" pos:end="41:41"><literal type="number" pos:start="41:32" pos:end="41:41">0x80000000</literal></expr></init></decl>;</decl_stmt>  <comment type="block" pos:start="41:45" pos:end="41:78">/* VMDK has constant split size */</comment>

    <decl_stmt pos:start="43:5" pos:end="43:33"><decl pos:start="43:5" pos:end="43:32"><type pos:start="43:5" pos:end="43:16"><specifier pos:start="43:5" pos:end="43:9">const</specifier> <name pos:start="43:11" pos:end="43:14">char</name> <modifier pos:start="43:16" pos:end="43:16">*</modifier></type><name pos:start="43:17" pos:end="43:32">desc_extent_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:49"><decl pos:start="45:5" pos:end="45:48"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:8">char</name> <modifier pos:start="45:10" pos:end="45:10">*</modifier></type><name pos:start="45:11" pos:end="45:26">parent_desc_line</name> <init pos:start="45:28" pos:end="45:48">= <expr pos:start="45:30" pos:end="45:48"><call pos:start="45:30" pos:end="45:48"><name pos:start="45:30" pos:end="45:38">g_malloc0</name><argument_list pos:start="45:39" pos:end="45:48">(<argument pos:start="45:40" pos:end="45:47"><expr pos:start="45:40" pos:end="45:47"><name pos:start="45:40" pos:end="45:47">BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:37"><decl pos:start="47:5" pos:end="47:36"><type pos:start="47:5" pos:end="47:12"><name pos:start="47:5" pos:end="47:12">uint32_t</name></type> <name pos:start="47:14" pos:end="47:23">parent_cid</name> <init pos:start="47:25" pos:end="47:36">= <expr pos:start="47:27" pos:end="47:36"><literal type="number" pos:start="47:27" pos:end="47:36">0xffffffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:31"><decl pos:start="49:5" pos:end="49:30"><type pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:12">uint32_t</name></type> <name pos:start="49:14" pos:end="49:25">number_heads</name> <init pos:start="49:27" pos:end="49:30">= <expr pos:start="49:29" pos:end="49:30"><literal type="number" pos:start="49:29" pos:end="49:30">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:30"><decl pos:start="51:5" pos:end="51:29"><type pos:start="51:5" pos:end="51:8"><name pos:start="51:5" pos:end="51:8">bool</name></type> <name pos:start="51:10" pos:end="51:21">zeroed_grain</name> <init pos:start="51:23" pos:end="51:29">= <expr pos:start="51:25" pos:end="51:29"><name pos:start="51:25" pos:end="51:29">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:39"><decl pos:start="53:5" pos:end="53:28"><type pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:12">uint32_t</name></type> <name pos:start="53:14" pos:end="53:24">desc_offset</name> <init pos:start="53:26" pos:end="53:28">= <expr pos:start="53:28" pos:end="53:28"><literal type="number" pos:start="53:28" pos:end="53:28">0</literal></expr></init></decl>, <decl pos:start="53:31" pos:end="53:38"><type ref="prev" pos:start="53:5" pos:end="53:12"/><name pos:start="53:31" pos:end="53:38">desc_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="91:37"><decl pos:start="55:5" pos:end="91:36"><type pos:start="55:5" pos:end="55:14"><specifier pos:start="55:5" pos:end="55:9">const</specifier> <name pos:start="55:11" pos:end="55:14">char</name></type> <name pos:start="55:16" pos:end="55:30"><name pos:start="55:16" pos:end="55:28">desc_template</name><index pos:start="55:29" pos:end="55:30">[]</index></name> <init pos:start="55:32" pos:end="91:36">=

        <expr pos:start="57:9" pos:end="91:36"><literal type="string" pos:start="57:9" pos:end="57:33">"# Disk DescriptorFile\n"</literal>

        <literal type="string" pos:start="59:9" pos:end="59:21">"version=1\n"</literal>

        <literal type="string" pos:start="61:9" pos:end="61:15">"CID=%"</literal> <name pos:start="61:17" pos:end="61:22">PRIx32</name> <literal type="string" pos:start="61:24" pos:end="61:27">"\n"</literal>

        <literal type="string" pos:start="63:9" pos:end="63:21">"parentCID=%"</literal> <name pos:start="63:23" pos:end="63:28">PRIx32</name> <literal type="string" pos:start="63:30" pos:end="63:33">"\n"</literal>

        <literal type="string" pos:start="65:9" pos:end="65:29">"createType=\"%s\"\n"</literal>

        <literal type="string" pos:start="67:9" pos:end="67:12">"%s"</literal>

        <literal type="string" pos:start="69:9" pos:end="69:12">"\n"</literal>

        <literal type="string" pos:start="71:9" pos:end="71:32">"# Extent description\n"</literal>

        <literal type="string" pos:start="73:9" pos:end="73:12">"%s"</literal>

        <literal type="string" pos:start="75:9" pos:end="75:12">"\n"</literal>

        <literal type="string" pos:start="77:9" pos:end="77:32">"# The Disk Data Base\n"</literal>

        <literal type="string" pos:start="79:9" pos:end="79:16">"#DDB\n"</literal>

        <literal type="string" pos:start="81:9" pos:end="81:12">"\n"</literal>

        <literal type="string" pos:start="83:9" pos:end="83:41">"ddb.virtualHWVersion = \"%s\"\n"</literal>

        <literal type="string" pos:start="85:9" pos:end="85:38">"ddb.geometry.cylinders = \"%"</literal> <name pos:start="85:40" pos:end="85:45">PRId64</name> <literal type="string" pos:start="85:47" pos:end="85:52">"\"\n"</literal>

        <literal type="string" pos:start="87:9" pos:end="87:34">"ddb.geometry.heads = \"%"</literal> <name pos:start="87:36" pos:end="87:41">PRIu32</name> <literal type="string" pos:start="87:43" pos:end="87:48">"\"\n"</literal>

        <literal type="string" pos:start="89:9" pos:end="89:41">"ddb.geometry.sectors = \"63\"\n"</literal>

        <literal type="string" pos:start="91:9" pos:end="91:36">"ddb.adapterType = \"%s\"\n"</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:40"><expr pos:start="95:5" pos:end="95:39"><name pos:start="95:5" pos:end="95:18">ext_desc_lines</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <call pos:start="95:22" pos:end="95:39"><name pos:start="95:22" pos:end="95:33">g_string_new</name><argument_list pos:start="95:34" pos:end="95:39">(<argument pos:start="95:35" pos:end="95:38"><expr pos:start="95:35" pos:end="95:38"><name pos:start="95:35" pos:end="95:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:76">(<expr pos:start="99:9" pos:end="99:75"><call pos:start="99:9" pos:end="99:75"><name pos:start="99:9" pos:end="99:26">filename_decompose</name><argument_list pos:start="99:27" pos:end="99:75">(<argument pos:start="99:28" pos:end="99:35"><expr pos:start="99:28" pos:end="99:35"><name pos:start="99:28" pos:end="99:35">filename</name></expr></argument>, <argument pos:start="99:38" pos:end="99:41"><expr pos:start="99:38" pos:end="99:41"><name pos:start="99:38" pos:end="99:41">path</name></expr></argument>, <argument pos:start="99:44" pos:end="99:49"><expr pos:start="99:44" pos:end="99:49"><name pos:start="99:44" pos:end="99:49">prefix</name></expr></argument>, <argument pos:start="99:52" pos:end="99:58"><expr pos:start="99:52" pos:end="99:58"><name pos:start="99:52" pos:end="99:58">postfix</name></expr></argument>, <argument pos:start="99:61" pos:end="99:68"><expr pos:start="99:61" pos:end="99:68"><name pos:start="99:61" pos:end="99:68">PATH_MAX</name></expr></argument>, <argument pos:start="99:71" pos:end="99:74"><expr pos:start="99:71" pos:end="99:74"><name pos:start="99:71" pos:end="99:74">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:78" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:18">

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <operator pos:start="101:15" pos:end="101:15">-</operator><name pos:start="101:16" pos:end="101:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="107:5" pos:end="107:26">/* Read out options */</comment>

    <expr_stmt pos:start="109:5" pos:end="111:44"><expr pos:start="109:5" pos:end="111:43"><name pos:start="109:5" pos:end="109:14">total_size</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <call pos:start="109:18" pos:end="111:43"><name pos:start="109:18" pos:end="109:25">ROUND_UP</name><argument_list pos:start="109:26" pos:end="111:43">(<argument pos:start="109:27" pos:end="109:72"><expr pos:start="109:27" pos:end="109:72"><call pos:start="109:27" pos:end="109:72"><name pos:start="109:27" pos:end="109:47">qemu_opt_get_size_del</name><argument_list pos:start="109:48" pos:end="109:72">(<argument pos:start="109:49" pos:end="109:52"><expr pos:start="109:49" pos:end="109:52"><name pos:start="109:49" pos:end="109:52">opts</name></expr></argument>, <argument pos:start="109:55" pos:end="109:68"><expr pos:start="109:55" pos:end="109:68"><name pos:start="109:55" pos:end="109:68">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="109:71" pos:end="109:71"><expr pos:start="109:71" pos:end="109:71"><literal type="number" pos:start="109:71" pos:end="109:71">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="111:27" pos:end="111:42"><expr pos:start="111:27" pos:end="111:42"><name pos:start="111:27" pos:end="111:42">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:66"><expr pos:start="113:5" pos:end="113:65"><name pos:start="113:5" pos:end="113:16">adapter_type</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <call pos:start="113:20" pos:end="113:65"><name pos:start="113:20" pos:end="113:35">qemu_opt_get_del</name><argument_list pos:start="113:36" pos:end="113:65">(<argument pos:start="113:37" pos:end="113:40"><expr pos:start="113:37" pos:end="113:40"><name pos:start="113:37" pos:end="113:40">opts</name></expr></argument>, <argument pos:start="113:43" pos:end="113:64"><expr pos:start="113:43" pos:end="113:64"><name pos:start="113:43" pos:end="113:64">BLOCK_OPT_ADAPTER_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:66"><expr pos:start="115:5" pos:end="115:65"><name pos:start="115:5" pos:end="115:16">backing_file</name> <operator pos:start="115:18" pos:end="115:18">=</operator> <call pos:start="115:20" pos:end="115:65"><name pos:start="115:20" pos:end="115:35">qemu_opt_get_del</name><argument_list pos:start="115:36" pos:end="115:65">(<argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">opts</name></expr></argument>, <argument pos:start="115:43" pos:end="115:64"><expr pos:start="115:43" pos:end="115:64"><name pos:start="115:43" pos:end="115:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:61"><expr pos:start="117:5" pos:end="117:60"><name pos:start="117:5" pos:end="117:14">hw_version</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <call pos:start="117:18" pos:end="117:60"><name pos:start="117:18" pos:end="117:33">qemu_opt_get_del</name><argument_list pos:start="117:34" pos:end="117:60">(<argument pos:start="117:35" pos:end="117:38"><expr pos:start="117:35" pos:end="117:38"><name pos:start="117:35" pos:end="117:38">opts</name></expr></argument>, <argument pos:start="117:41" pos:end="117:59"><expr pos:start="117:41" pos:end="117:59"><name pos:start="117:41" pos:end="117:59">BLOCK_OPT_HWVERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="137:5"><if pos:start="119:5" pos:end="137:5">if <condition pos:start="119:8" pos:end="119:62">(<expr pos:start="119:9" pos:end="119:61"><call pos:start="119:9" pos:end="119:61"><name pos:start="119:9" pos:end="119:29">qemu_opt_get_bool_del</name><argument_list pos:start="119:30" pos:end="119:61">(<argument pos:start="119:31" pos:end="119:34"><expr pos:start="119:31" pos:end="119:34"><name pos:start="119:31" pos:end="119:34">opts</name></expr></argument>, <argument pos:start="119:37" pos:end="119:53"><expr pos:start="119:37" pos:end="119:53"><name pos:start="119:37" pos:end="119:53">BLOCK_OPT_COMPAT6</name></expr></argument>, <argument pos:start="119:56" pos:end="119:60"><expr pos:start="119:56" pos:end="119:60"><name pos:start="119:56" pos:end="119:60">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:64" pos:end="137:5">{<block_content pos:start="121:9" pos:end="135:35">

        <if_stmt pos:start="121:9" pos:end="131:9"><if pos:start="121:9" pos:end="131:9">if <condition pos:start="121:12" pos:end="121:44">(<expr pos:start="121:13" pos:end="121:43"><call pos:start="121:13" pos:end="121:43"><name pos:start="121:13" pos:end="121:18">strcmp</name><argument_list pos:start="121:19" pos:end="121:43">(<argument pos:start="121:20" pos:end="121:29"><expr pos:start="121:20" pos:end="121:29"><name pos:start="121:20" pos:end="121:29">hw_version</name></expr></argument>, <argument pos:start="121:32" pos:end="121:42"><expr pos:start="121:32" pos:end="121:42"><literal type="string" pos:start="121:32" pos:end="121:42">"undefined"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:46" pos:end="131:9">{<block_content pos:start="123:13" pos:end="129:22">

            <expr_stmt pos:start="123:13" pos:end="125:71"><expr pos:start="123:13" pos:end="125:70"><call pos:start="123:13" pos:end="125:70"><name pos:start="123:13" pos:end="123:22">error_setg</name><argument_list pos:start="123:23" pos:end="125:70">(<argument pos:start="123:24" pos:end="123:27"><expr pos:start="123:24" pos:end="123:27"><name pos:start="123:24" pos:end="123:27">errp</name></expr></argument>,

                       <argument pos:start="125:24" pos:end="125:69"><expr pos:start="125:24" pos:end="125:69"><literal type="string" pos:start="125:24" pos:end="125:69">"compat6 cannot be enabled with hwversion set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:26"><expr pos:start="127:13" pos:end="127:25"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <operator pos:start="127:19" pos:end="127:19">-</operator><name pos:start="127:20" pos:end="127:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:22">goto <name pos:start="129:18" pos:end="129:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:27"><expr pos:start="133:9" pos:end="133:26"><call pos:start="133:9" pos:end="133:26"><name pos:start="133:9" pos:end="133:14">g_free</name><argument_list pos:start="133:15" pos:end="133:26">(<argument pos:start="133:16" pos:end="133:25"><expr pos:start="133:16" pos:end="133:25"><name pos:start="133:16" pos:end="133:25">hw_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:35"><expr pos:start="135:9" pos:end="135:34"><name pos:start="135:9" pos:end="135:18">hw_version</name> <operator pos:start="135:20" pos:end="135:20">=</operator> <call pos:start="135:22" pos:end="135:34"><name pos:start="135:22" pos:end="135:29">g_strdup</name><argument_list pos:start="135:30" pos:end="135:34">(<argument pos:start="135:31" pos:end="135:33"><expr pos:start="135:31" pos:end="135:33"><literal type="string" pos:start="135:31" pos:end="135:33">"6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:45">(<expr pos:start="139:9" pos:end="139:44"><call pos:start="139:9" pos:end="139:39"><name pos:start="139:9" pos:end="139:14">strcmp</name><argument_list pos:start="139:15" pos:end="139:39">(<argument pos:start="139:16" pos:end="139:25"><expr pos:start="139:16" pos:end="139:25"><name pos:start="139:16" pos:end="139:25">hw_version</name></expr></argument>, <argument pos:start="139:28" pos:end="139:38"><expr pos:start="139:28" pos:end="139:38"><literal type="string" pos:start="139:28" pos:end="139:38">"undefined"</literal></expr></argument>)</argument_list></call> <operator pos:start="139:41" pos:end="139:42">==</operator> <literal type="number" pos:start="139:44" pos:end="139:44">0</literal></expr>)</condition> <block pos:start="139:47" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:35">

        <expr_stmt pos:start="141:9" pos:end="141:27"><expr pos:start="141:9" pos:end="141:26"><call pos:start="141:9" pos:end="141:26"><name pos:start="141:9" pos:end="141:14">g_free</name><argument_list pos:start="141:15" pos:end="141:26">(<argument pos:start="141:16" pos:end="141:25"><expr pos:start="141:16" pos:end="141:25"><name pos:start="141:16" pos:end="141:25">hw_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:35"><expr pos:start="143:9" pos:end="143:34"><name pos:start="143:9" pos:end="143:18">hw_version</name> <operator pos:start="143:20" pos:end="143:20">=</operator> <call pos:start="143:22" pos:end="143:34"><name pos:start="143:22" pos:end="143:29">g_strdup</name><argument_list pos:start="143:30" pos:end="143:34">(<argument pos:start="143:31" pos:end="143:33"><expr pos:start="143:31" pos:end="143:33"><literal type="string" pos:start="143:31" pos:end="143:33">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:51"><expr pos:start="147:5" pos:end="147:50"><name pos:start="147:5" pos:end="147:7">fmt</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <call pos:start="147:11" pos:end="147:50"><name pos:start="147:11" pos:end="147:26">qemu_opt_get_del</name><argument_list pos:start="147:27" pos:end="147:50">(<argument pos:start="147:28" pos:end="147:31"><expr pos:start="147:28" pos:end="147:31"><name pos:start="147:28" pos:end="147:31">opts</name></expr></argument>, <argument pos:start="147:34" pos:end="147:49"><expr pos:start="147:34" pos:end="147:49"><name pos:start="147:34" pos:end="147:49">BLOCK_OPT_SUBFMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:67">(<expr pos:start="149:9" pos:end="149:66"><call pos:start="149:9" pos:end="149:66"><name pos:start="149:9" pos:end="149:29">qemu_opt_get_bool_del</name><argument_list pos:start="149:30" pos:end="149:66">(<argument pos:start="149:31" pos:end="149:34"><expr pos:start="149:31" pos:end="149:34"><name pos:start="149:31" pos:end="149:34">opts</name></expr></argument>, <argument pos:start="149:37" pos:end="149:58"><expr pos:start="149:37" pos:end="149:58"><name pos:start="149:37" pos:end="149:58">BLOCK_OPT_ZEROED_GRAIN</name></expr></argument>, <argument pos:start="149:61" pos:end="149:65"><expr pos:start="149:61" pos:end="149:65"><name pos:start="149:61" pos:end="149:65">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:69" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:28">

        <expr_stmt pos:start="151:9" pos:end="151:28"><expr pos:start="151:9" pos:end="151:27"><name pos:start="151:9" pos:end="151:20">zeroed_grain</name> <operator pos:start="151:22" pos:end="151:22">=</operator> <name pos:start="151:24" pos:end="151:27">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="157:5" pos:end="175:5"><if pos:start="157:5" pos:end="161:5">if <condition pos:start="157:8" pos:end="157:22">(<expr pos:start="157:9" pos:end="157:21"><operator pos:start="157:9" pos:end="157:9">!</operator><name pos:start="157:10" pos:end="157:21">adapter_type</name></expr>)</condition> <block pos:start="157:24" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:39">

        <expr_stmt pos:start="159:9" pos:end="159:39"><expr pos:start="159:9" pos:end="159:38"><name pos:start="159:9" pos:end="159:20">adapter_type</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <call pos:start="159:24" pos:end="159:38"><name pos:start="159:24" pos:end="159:31">g_strdup</name><argument_list pos:start="159:32" pos:end="159:38">(<argument pos:start="159:33" pos:end="159:37"><expr pos:start="159:33" pos:end="159:37"><literal type="string" pos:start="159:33" pos:end="159:37">"ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="161:7" pos:end="175:5">else if <condition pos:start="161:15" pos:end="167:49">(<expr pos:start="161:16" pos:end="167:48"><call pos:start="161:16" pos:end="161:42"><name pos:start="161:16" pos:end="161:21">strcmp</name><argument_list pos:start="161:22" pos:end="161:42">(<argument pos:start="161:23" pos:end="161:34"><expr pos:start="161:23" pos:end="161:34"><name pos:start="161:23" pos:end="161:34">adapter_type</name></expr></argument>, <argument pos:start="161:37" pos:end="161:41"><expr pos:start="161:37" pos:end="161:41"><literal type="string" pos:start="161:37" pos:end="161:41">"ide"</literal></expr></argument>)</argument_list></call> <operator pos:start="161:44" pos:end="161:45">&amp;&amp;</operator>

               <call pos:start="163:16" pos:end="163:47"><name pos:start="163:16" pos:end="163:21">strcmp</name><argument_list pos:start="163:22" pos:end="163:47">(<argument pos:start="163:23" pos:end="163:34"><expr pos:start="163:23" pos:end="163:34"><name pos:start="163:23" pos:end="163:34">adapter_type</name></expr></argument>, <argument pos:start="163:37" pos:end="163:46"><expr pos:start="163:37" pos:end="163:46"><literal type="string" pos:start="163:37" pos:end="163:46">"buslogic"</literal></expr></argument>)</argument_list></call> <operator pos:start="163:49" pos:end="163:50">&amp;&amp;</operator>

               <call pos:start="165:16" pos:end="165:47"><name pos:start="165:16" pos:end="165:21">strcmp</name><argument_list pos:start="165:22" pos:end="165:47">(<argument pos:start="165:23" pos:end="165:34"><expr pos:start="165:23" pos:end="165:34"><name pos:start="165:23" pos:end="165:34">adapter_type</name></expr></argument>, <argument pos:start="165:37" pos:end="165:46"><expr pos:start="165:37" pos:end="165:46"><literal type="string" pos:start="165:37" pos:end="165:46">"lsilogic"</literal></expr></argument>)</argument_list></call> <operator pos:start="165:49" pos:end="165:50">&amp;&amp;</operator>

               <call pos:start="167:16" pos:end="167:48"><name pos:start="167:16" pos:end="167:21">strcmp</name><argument_list pos:start="167:22" pos:end="167:48">(<argument pos:start="167:23" pos:end="167:34"><expr pos:start="167:23" pos:end="167:34"><name pos:start="167:23" pos:end="167:34">adapter_type</name></expr></argument>, <argument pos:start="167:37" pos:end="167:47"><expr pos:start="167:37" pos:end="167:47"><literal type="string" pos:start="167:37" pos:end="167:47">"legacyESX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:51" pos:end="175:5">{<block_content pos:start="169:9" pos:end="173:18">

        <expr_stmt pos:start="169:9" pos:end="169:69"><expr pos:start="169:9" pos:end="169:68"><call pos:start="169:9" pos:end="169:68"><name pos:start="169:9" pos:end="169:18">error_setg</name><argument_list pos:start="169:19" pos:end="169:68">(<argument pos:start="169:20" pos:end="169:23"><expr pos:start="169:20" pos:end="169:23"><name pos:start="169:20" pos:end="169:23">errp</name></expr></argument>, <argument pos:start="169:26" pos:end="169:53"><expr pos:start="169:26" pos:end="169:53"><literal type="string" pos:start="169:26" pos:end="169:53">"Unknown adapter type: '%s'"</literal></expr></argument>, <argument pos:start="169:56" pos:end="169:67"><expr pos:start="169:56" pos:end="169:67"><name pos:start="169:56" pos:end="169:67">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:22"><expr pos:start="171:9" pos:end="171:21"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <operator pos:start="171:15" pos:end="171:15">-</operator><name pos:start="171:16" pos:end="171:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="173:9" pos:end="173:18">goto <name pos:start="173:14" pos:end="173:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="177:5" pos:end="185:5"><if pos:start="177:5" pos:end="185:5">if <condition pos:start="177:8" pos:end="177:41">(<expr pos:start="177:9" pos:end="177:40"><call pos:start="177:9" pos:end="177:35"><name pos:start="177:9" pos:end="177:14">strcmp</name><argument_list pos:start="177:15" pos:end="177:35">(<argument pos:start="177:16" pos:end="177:27"><expr pos:start="177:16" pos:end="177:27"><name pos:start="177:16" pos:end="177:27">adapter_type</name></expr></argument>, <argument pos:start="177:30" pos:end="177:34"><expr pos:start="177:30" pos:end="177:34"><literal type="string" pos:start="177:30" pos:end="177:34">"ide"</literal></expr></argument>)</argument_list></call> <operator pos:start="177:37" pos:end="177:38">!=</operator> <literal type="number" pos:start="177:40" pos:end="177:40">0</literal></expr>)</condition> <block pos:start="177:43" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:27">

        <comment type="block" pos:start="179:9" pos:end="181:78">/* that's the number of heads with which vmware operates when

           creating, exporting, etc. vmdk files with a non-ide adapter type */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:27"><expr pos:start="183:9" pos:end="183:26"><name pos:start="183:9" pos:end="183:20">number_heads</name> <operator pos:start="183:22" pos:end="183:22">=</operator> <literal type="number" pos:start="183:24" pos:end="183:26">255</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="187:5" pos:end="209:5"><if pos:start="187:5" pos:end="193:5">if <condition pos:start="187:8" pos:end="187:13">(<expr pos:start="187:9" pos:end="187:12"><operator pos:start="187:9" pos:end="187:9">!</operator><name pos:start="187:10" pos:end="187:12">fmt</name></expr>)</condition> <block pos:start="187:15" pos:end="193:5">{<block_content pos:start="191:9" pos:end="191:43">

        <comment type="block" pos:start="189:9" pos:end="189:48">/* Default format to monolithicSparse */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:43"><expr pos:start="191:9" pos:end="191:42"><name pos:start="191:9" pos:end="191:11">fmt</name> <operator pos:start="191:13" pos:end="191:13">=</operator> <call pos:start="191:15" pos:end="191:42"><name pos:start="191:15" pos:end="191:22">g_strdup</name><argument_list pos:start="191:23" pos:end="191:42">(<argument pos:start="191:24" pos:end="191:41"><expr pos:start="191:24" pos:end="191:41"><literal type="string" pos:start="191:24" pos:end="191:41">"monolithicSparse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="193:7" pos:end="209:5">else if <condition pos:start="193:15" pos:end="201:46">(<expr pos:start="193:16" pos:end="201:45"><call pos:start="193:16" pos:end="193:44"><name pos:start="193:16" pos:end="193:21">strcmp</name><argument_list pos:start="193:22" pos:end="193:44">(<argument pos:start="193:23" pos:end="193:25"><expr pos:start="193:23" pos:end="193:25"><name pos:start="193:23" pos:end="193:25">fmt</name></expr></argument>, <argument pos:start="193:28" pos:end="193:43"><expr pos:start="193:28" pos:end="193:43"><literal type="string" pos:start="193:28" pos:end="193:43">"monolithicFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="193:46" pos:end="193:47">&amp;&amp;</operator>

               <call pos:start="195:16" pos:end="195:46"><name pos:start="195:16" pos:end="195:21">strcmp</name><argument_list pos:start="195:22" pos:end="195:46">(<argument pos:start="195:23" pos:end="195:25"><expr pos:start="195:23" pos:end="195:25"><name pos:start="195:23" pos:end="195:25">fmt</name></expr></argument>, <argument pos:start="195:28" pos:end="195:45"><expr pos:start="195:28" pos:end="195:45"><literal type="string" pos:start="195:28" pos:end="195:45">"monolithicSparse"</literal></expr></argument>)</argument_list></call> <operator pos:start="195:48" pos:end="195:49">&amp;&amp;</operator>

               <call pos:start="197:16" pos:end="197:50"><name pos:start="197:16" pos:end="197:21">strcmp</name><argument_list pos:start="197:22" pos:end="197:50">(<argument pos:start="197:23" pos:end="197:25"><expr pos:start="197:23" pos:end="197:25"><name pos:start="197:23" pos:end="197:25">fmt</name></expr></argument>, <argument pos:start="197:28" pos:end="197:49"><expr pos:start="197:28" pos:end="197:49"><literal type="string" pos:start="197:28" pos:end="197:49">"twoGbMaxExtentSparse"</literal></expr></argument>)</argument_list></call> <operator pos:start="197:52" pos:end="197:53">&amp;&amp;</operator>

               <call pos:start="199:16" pos:end="199:48"><name pos:start="199:16" pos:end="199:21">strcmp</name><argument_list pos:start="199:22" pos:end="199:48">(<argument pos:start="199:23" pos:end="199:25"><expr pos:start="199:23" pos:end="199:25"><name pos:start="199:23" pos:end="199:25">fmt</name></expr></argument>, <argument pos:start="199:28" pos:end="199:47"><expr pos:start="199:28" pos:end="199:47"><literal type="string" pos:start="199:28" pos:end="199:47">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="199:50" pos:end="199:51">&amp;&amp;</operator>

               <call pos:start="201:16" pos:end="201:45"><name pos:start="201:16" pos:end="201:21">strcmp</name><argument_list pos:start="201:22" pos:end="201:45">(<argument pos:start="201:23" pos:end="201:25"><expr pos:start="201:23" pos:end="201:25"><name pos:start="201:23" pos:end="201:25">fmt</name></expr></argument>, <argument pos:start="201:28" pos:end="201:44"><expr pos:start="201:28" pos:end="201:44"><literal type="string" pos:start="201:28" pos:end="201:44">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="201:48" pos:end="209:5">{<block_content pos:start="203:9" pos:end="207:18">

        <expr_stmt pos:start="203:9" pos:end="203:57"><expr pos:start="203:9" pos:end="203:56"><call pos:start="203:9" pos:end="203:56"><name pos:start="203:9" pos:end="203:18">error_setg</name><argument_list pos:start="203:19" pos:end="203:56">(<argument pos:start="203:20" pos:end="203:23"><expr pos:start="203:20" pos:end="203:23"><name pos:start="203:20" pos:end="203:23">errp</name></expr></argument>, <argument pos:start="203:26" pos:end="203:50"><expr pos:start="203:26" pos:end="203:50"><literal type="string" pos:start="203:26" pos:end="203:50">"Unknown subformat: '%s'"</literal></expr></argument>, <argument pos:start="203:53" pos:end="203:55"><expr pos:start="203:53" pos:end="203:55"><name pos:start="203:53" pos:end="203:55">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:22"><expr pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:11">ret</name> <operator pos:start="205:13" pos:end="205:13">=</operator> <operator pos:start="205:15" pos:end="205:15">-</operator><name pos:start="205:16" pos:end="205:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="207:9" pos:end="207:18">goto <name pos:start="207:14" pos:end="207:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="211:5" pos:end="213:51"><expr pos:start="211:5" pos:end="213:50"><name pos:start="211:5" pos:end="211:9">split</name> <operator pos:start="211:11" pos:end="211:11">=</operator> <operator pos:start="211:13" pos:end="211:13">!</operator><operator pos:start="211:14" pos:end="211:14">(</operator><call pos:start="211:15" pos:end="211:47"><name pos:start="211:15" pos:end="211:20">strcmp</name><argument_list pos:start="211:21" pos:end="211:47">(<argument pos:start="211:22" pos:end="211:24"><expr pos:start="211:22" pos:end="211:24"><name pos:start="211:22" pos:end="211:24">fmt</name></expr></argument>, <argument pos:start="211:27" pos:end="211:46"><expr pos:start="211:27" pos:end="211:46"><literal type="string" pos:start="211:27" pos:end="211:46">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="211:49" pos:end="211:50">&amp;&amp;</operator>

              <call pos:start="213:15" pos:end="213:49"><name pos:start="213:15" pos:end="213:20">strcmp</name><argument_list pos:start="213:21" pos:end="213:49">(<argument pos:start="213:22" pos:end="213:24"><expr pos:start="213:22" pos:end="213:24"><name pos:start="213:22" pos:end="213:24">fmt</name></expr></argument>, <argument pos:start="213:27" pos:end="213:48"><expr pos:start="213:27" pos:end="213:48"><literal type="string" pos:start="213:27" pos:end="213:48">"twoGbMaxExtentSparse"</literal></expr></argument>)</argument_list></call><operator pos:start="213:50" pos:end="213:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="217:48"><expr pos:start="215:5" pos:end="217:47"><name pos:start="215:5" pos:end="215:8">flat</name> <operator pos:start="215:10" pos:end="215:10">=</operator> <operator pos:start="215:12" pos:end="215:12">!</operator><operator pos:start="215:13" pos:end="215:13">(</operator><call pos:start="215:14" pos:end="215:42"><name pos:start="215:14" pos:end="215:19">strcmp</name><argument_list pos:start="215:20" pos:end="215:42">(<argument pos:start="215:21" pos:end="215:23"><expr pos:start="215:21" pos:end="215:23"><name pos:start="215:21" pos:end="215:23">fmt</name></expr></argument>, <argument pos:start="215:26" pos:end="215:41"><expr pos:start="215:26" pos:end="215:41"><literal type="string" pos:start="215:26" pos:end="215:41">"monolithicFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="215:44" pos:end="215:45">&amp;&amp;</operator>

             <call pos:start="217:14" pos:end="217:46"><name pos:start="217:14" pos:end="217:19">strcmp</name><argument_list pos:start="217:20" pos:end="217:46">(<argument pos:start="217:21" pos:end="217:23"><expr pos:start="217:21" pos:end="217:23"><name pos:start="217:21" pos:end="217:23">fmt</name></expr></argument>, <argument pos:start="217:26" pos:end="217:45"><expr pos:start="217:26" pos:end="217:45"><literal type="string" pos:start="217:26" pos:end="217:45">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call><operator pos:start="217:47" pos:end="217:47">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:47"><expr pos:start="219:5" pos:end="219:46"><name pos:start="219:5" pos:end="219:12">compress</name> <operator pos:start="219:14" pos:end="219:14">=</operator> <operator pos:start="219:16" pos:end="219:16">!</operator><call pos:start="219:17" pos:end="219:46"><name pos:start="219:17" pos:end="219:22">strcmp</name><argument_list pos:start="219:23" pos:end="219:46">(<argument pos:start="219:24" pos:end="219:26"><expr pos:start="219:24" pos:end="219:26"><name pos:start="219:24" pos:end="219:26">fmt</name></expr></argument>, <argument pos:start="219:29" pos:end="219:45"><expr pos:start="219:29" pos:end="219:45"><literal type="string" pos:start="219:29" pos:end="219:45">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="221:5" pos:end="229:5"><if pos:start="221:5" pos:end="225:5">if <condition pos:start="221:8" pos:end="221:13">(<expr pos:start="221:9" pos:end="221:12"><name pos:start="221:9" pos:end="221:12">flat</name></expr>)</condition> <block pos:start="221:15" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:60">

        <expr_stmt pos:start="223:9" pos:end="223:60"><expr pos:start="223:9" pos:end="223:59"><name pos:start="223:9" pos:end="223:24">desc_extent_line</name> <operator pos:start="223:26" pos:end="223:26">=</operator> <literal type="string" pos:start="223:28" pos:end="223:33">"RW %"</literal> <name pos:start="223:35" pos:end="223:40">PRId64</name> <literal type="string" pos:start="223:42" pos:end="223:59">" FLAT \"%s\" 0\n"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="229:5">else <block pos:start="225:12" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:60">

        <expr_stmt pos:start="227:9" pos:end="227:60"><expr pos:start="227:9" pos:end="227:59"><name pos:start="227:9" pos:end="227:24">desc_extent_line</name> <operator pos:start="227:26" pos:end="227:26">=</operator> <literal type="string" pos:start="227:28" pos:end="227:33">"RW %"</literal> <name pos:start="227:35" pos:end="227:40">PRId64</name> <literal type="string" pos:start="227:42" pos:end="227:59">" SPARSE \"%s\"\n"</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="231:5" pos:end="239:5"><if pos:start="231:5" pos:end="239:5">if <condition pos:start="231:8" pos:end="231:29">(<expr pos:start="231:9" pos:end="231:28"><name pos:start="231:9" pos:end="231:12">flat</name> <operator pos:start="231:14" pos:end="231:15">&amp;&amp;</operator> <name pos:start="231:17" pos:end="231:28">backing_file</name></expr>)</condition> <block pos:start="231:31" pos:end="239:5">{<block_content pos:start="233:9" pos:end="237:18">

        <expr_stmt pos:start="233:9" pos:end="233:63"><expr pos:start="233:9" pos:end="233:62"><call pos:start="233:9" pos:end="233:62"><name pos:start="233:9" pos:end="233:18">error_setg</name><argument_list pos:start="233:19" pos:end="233:62">(<argument pos:start="233:20" pos:end="233:23"><expr pos:start="233:20" pos:end="233:23"><name pos:start="233:20" pos:end="233:23">errp</name></expr></argument>, <argument pos:start="233:26" pos:end="233:61"><expr pos:start="233:26" pos:end="233:61"><literal type="string" pos:start="233:26" pos:end="233:61">"Flat image can't have backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:23"><expr pos:start="235:9" pos:end="235:22"><name pos:start="235:9" pos:end="235:11">ret</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <operator pos:start="235:15" pos:end="235:15">-</operator><name pos:start="235:16" pos:end="235:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="237:9" pos:end="237:18">goto <name pos:start="237:14" pos:end="237:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="241:5" pos:end="249:5"><if pos:start="241:5" pos:end="249:5">if <condition pos:start="241:8" pos:end="241:29">(<expr pos:start="241:9" pos:end="241:28"><name pos:start="241:9" pos:end="241:12">flat</name> <operator pos:start="241:14" pos:end="241:15">&amp;&amp;</operator> <name pos:start="241:17" pos:end="241:28">zeroed_grain</name></expr>)</condition> <block pos:start="241:31" pos:end="249:5">{<block_content pos:start="243:9" pos:end="247:18">

        <expr_stmt pos:start="243:9" pos:end="243:65"><expr pos:start="243:9" pos:end="243:64"><call pos:start="243:9" pos:end="243:64"><name pos:start="243:9" pos:end="243:18">error_setg</name><argument_list pos:start="243:19" pos:end="243:64">(<argument pos:start="243:20" pos:end="243:23"><expr pos:start="243:20" pos:end="243:23"><name pos:start="243:20" pos:end="243:23">errp</name></expr></argument>, <argument pos:start="243:26" pos:end="243:63"><expr pos:start="243:26" pos:end="243:63"><literal type="string" pos:start="243:26" pos:end="243:63">"Flat image can't enable zeroed grain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:23"><expr pos:start="245:9" pos:end="245:22"><name pos:start="245:9" pos:end="245:11">ret</name> <operator pos:start="245:13" pos:end="245:13">=</operator> <operator pos:start="245:15" pos:end="245:15">-</operator><name pos:start="245:16" pos:end="245:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="247:9" pos:end="247:18">goto <name pos:start="247:14" pos:end="247:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="251:5" pos:end="309:5"><if pos:start="251:5" pos:end="309:5">if <condition pos:start="251:8" pos:end="251:21">(<expr pos:start="251:9" pos:end="251:20"><name pos:start="251:9" pos:end="251:20">backing_file</name></expr>)</condition> <block pos:start="251:23" pos:end="309:5">{<block_content pos:start="253:9" pos:end="307:59">

        <decl_stmt pos:start="253:9" pos:end="253:26"><decl pos:start="253:9" pos:end="253:25"><type pos:start="253:9" pos:end="253:22"><name pos:start="253:9" pos:end="253:20">BlockBackend</name> <modifier pos:start="253:22" pos:end="253:22">*</modifier></type><name pos:start="253:23" pos:end="253:25">blk</name></decl>;</decl_stmt>

        <decl_stmt pos:start="255:9" pos:end="255:52"><decl pos:start="255:9" pos:end="255:51"><type pos:start="255:9" pos:end="255:14"><name pos:start="255:9" pos:end="255:12">char</name> <modifier pos:start="255:14" pos:end="255:14">*</modifier></type><name pos:start="255:15" pos:end="255:26">full_backing</name> <init pos:start="255:28" pos:end="255:51">= <expr pos:start="255:30" pos:end="255:51"><call pos:start="255:30" pos:end="255:51"><name pos:start="255:30" pos:end="255:35">g_new0</name><argument_list pos:start="255:36" pos:end="255:51">(<argument pos:start="255:37" pos:end="255:40"><expr pos:start="255:37" pos:end="255:40"><name pos:start="255:37" pos:end="255:40">char</name></expr></argument>, <argument pos:start="255:43" pos:end="255:50"><expr pos:start="255:43" pos:end="255:50"><name pos:start="255:43" pos:end="255:50">PATH_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="257:9" pos:end="261:65"><expr pos:start="257:9" pos:end="261:64"><call pos:start="257:9" pos:end="261:64"><name pos:start="257:9" pos:end="257:52">bdrv_get_full_backing_filename_from_filename</name><argument_list pos:start="257:53" pos:end="261:64">(<argument pos:start="257:54" pos:end="257:61"><expr pos:start="257:54" pos:end="257:61"><name pos:start="257:54" pos:end="257:61">filename</name></expr></argument>, <argument pos:start="257:64" pos:end="257:75"><expr pos:start="257:64" pos:end="257:75"><name pos:start="257:64" pos:end="257:75">backing_file</name></expr></argument>,

                                                     <argument pos:start="259:54" pos:end="259:65"><expr pos:start="259:54" pos:end="259:65"><name pos:start="259:54" pos:end="259:65">full_backing</name></expr></argument>, <argument pos:start="259:68" pos:end="259:75"><expr pos:start="259:68" pos:end="259:75"><name pos:start="259:68" pos:end="259:75">PATH_MAX</name></expr></argument>,

                                                     <argument pos:start="261:54" pos:end="261:63"><expr pos:start="261:54" pos:end="261:63"><operator pos:start="261:54" pos:end="261:54">&amp;</operator><name pos:start="261:55" pos:end="261:63">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="263:9" pos:end="273:9"><if pos:start="263:9" pos:end="273:9">if <condition pos:start="263:12" pos:end="263:22">(<expr pos:start="263:13" pos:end="263:21"><name pos:start="263:13" pos:end="263:21">local_err</name></expr>)</condition> <block pos:start="263:24" pos:end="273:9">{<block_content pos:start="265:13" pos:end="271:22">

            <expr_stmt pos:start="265:13" pos:end="265:33"><expr pos:start="265:13" pos:end="265:32"><call pos:start="265:13" pos:end="265:32"><name pos:start="265:13" pos:end="265:18">g_free</name><argument_list pos:start="265:19" pos:end="265:32">(<argument pos:start="265:20" pos:end="265:31"><expr pos:start="265:20" pos:end="265:31"><name pos:start="265:20" pos:end="265:31">full_backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:45"><expr pos:start="267:13" pos:end="267:44"><call pos:start="267:13" pos:end="267:44"><name pos:start="267:13" pos:end="267:27">error_propagate</name><argument_list pos:start="267:28" pos:end="267:44">(<argument pos:start="267:29" pos:end="267:32"><expr pos:start="267:29" pos:end="267:32"><name pos:start="267:29" pos:end="267:32">errp</name></expr></argument>, <argument pos:start="267:35" pos:end="267:43"><expr pos:start="267:35" pos:end="267:43"><name pos:start="267:35" pos:end="267:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:26"><expr pos:start="269:13" pos:end="269:25"><name pos:start="269:13" pos:end="269:15">ret</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <operator pos:start="269:19" pos:end="269:19">-</operator><name pos:start="269:20" pos:end="269:25">ENOENT</name></expr>;</expr_stmt>

            <goto pos:start="271:13" pos:end="271:22">goto <name pos:start="271:18" pos:end="271:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="277:9" pos:end="279:52"><expr pos:start="277:9" pos:end="279:51"><name pos:start="277:9" pos:end="277:11">blk</name> <operator pos:start="277:13" pos:end="277:13">=</operator> <call pos:start="277:15" pos:end="279:51"><name pos:start="277:15" pos:end="277:26">blk_new_open</name><argument_list pos:start="277:27" pos:end="279:51">(<argument pos:start="277:28" pos:end="277:39"><expr pos:start="277:28" pos:end="277:39"><name pos:start="277:28" pos:end="277:39">full_backing</name></expr></argument>, <argument pos:start="277:42" pos:end="277:45"><expr pos:start="277:42" pos:end="277:45"><name pos:start="277:42" pos:end="277:45">NULL</name></expr></argument>, <argument pos:start="277:48" pos:end="277:51"><expr pos:start="277:48" pos:end="277:51"><name pos:start="277:48" pos:end="277:51">NULL</name></expr></argument>,

                           <argument pos:start="279:28" pos:end="279:44"><expr pos:start="279:28" pos:end="279:44"><name pos:start="279:28" pos:end="279:44">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="279:47" pos:end="279:50"><expr pos:start="279:47" pos:end="279:50"><name pos:start="279:47" pos:end="279:50">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:29"><expr pos:start="281:9" pos:end="281:28"><call pos:start="281:9" pos:end="281:28"><name pos:start="281:9" pos:end="281:14">g_free</name><argument_list pos:start="281:15" pos:end="281:28">(<argument pos:start="281:16" pos:end="281:27"><expr pos:start="281:16" pos:end="281:27"><name pos:start="281:16" pos:end="281:27">full_backing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="283:9" pos:end="289:9"><if pos:start="283:9" pos:end="289:9">if <condition pos:start="283:12" pos:end="283:24">(<expr pos:start="283:13" pos:end="283:23"><name pos:start="283:13" pos:end="283:15">blk</name> <operator pos:start="283:17" pos:end="283:18">==</operator> <name pos:start="283:20" pos:end="283:23">NULL</name></expr>)</condition> <block pos:start="283:26" pos:end="289:9">{<block_content pos:start="285:13" pos:end="287:22">

            <expr_stmt pos:start="285:13" pos:end="285:23"><expr pos:start="285:13" pos:end="285:22"><name pos:start="285:13" pos:end="285:15">ret</name> <operator pos:start="285:17" pos:end="285:17">=</operator> <operator pos:start="285:19" pos:end="285:19">-</operator><name pos:start="285:20" pos:end="285:22">EIO</name></expr>;</expr_stmt>

            <goto pos:start="287:13" pos:end="287:22">goto <name pos:start="287:18" pos:end="287:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="291:9" pos:end="299:9"><if pos:start="291:9" pos:end="299:9">if <condition pos:start="291:12" pos:end="291:58">(<expr pos:start="291:13" pos:end="291:57"><call pos:start="291:13" pos:end="291:57"><name pos:start="291:13" pos:end="291:18">strcmp</name><argument_list pos:start="291:19" pos:end="291:57">(<argument pos:start="291:20" pos:end="291:48"><expr pos:start="291:20" pos:end="291:48"><call pos:start="291:20" pos:end="291:30"><name pos:start="291:20" pos:end="291:25">blk_bs</name><argument_list pos:start="291:26" pos:end="291:30">(<argument pos:start="291:27" pos:end="291:29"><expr pos:start="291:27" pos:end="291:29"><name pos:start="291:27" pos:end="291:29">blk</name></expr></argument>)</argument_list></call><operator pos:start="291:31" pos:end="291:32">-&gt;</operator><name pos:start="291:33" pos:end="291:48"><name pos:start="291:33" pos:end="291:35">drv</name><operator pos:start="291:36" pos:end="291:37">-&gt;</operator><name pos:start="291:38" pos:end="291:48">format_name</name></name></expr></argument>, <argument pos:start="291:51" pos:end="291:56"><expr pos:start="291:51" pos:end="291:56"><literal type="string" pos:start="291:51" pos:end="291:56">"vmdk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:60" pos:end="299:9">{<block_content pos:start="293:13" pos:end="297:22">

            <expr_stmt pos:start="293:13" pos:end="293:27"><expr pos:start="293:13" pos:end="293:26"><call pos:start="293:13" pos:end="293:26"><name pos:start="293:13" pos:end="293:21">blk_unref</name><argument_list pos:start="293:22" pos:end="293:26">(<argument pos:start="293:23" pos:end="293:25"><expr pos:start="293:23" pos:end="293:25"><name pos:start="293:23" pos:end="293:25">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:26"><expr pos:start="295:13" pos:end="295:25"><name pos:start="295:13" pos:end="295:15">ret</name> <operator pos:start="295:17" pos:end="295:17">=</operator> <operator pos:start="295:19" pos:end="295:19">-</operator><name pos:start="295:20" pos:end="295:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="297:13" pos:end="297:22">goto <name pos:start="297:18" pos:end="297:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:51"><expr pos:start="301:9" pos:end="301:50"><name pos:start="301:9" pos:end="301:18">parent_cid</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <call pos:start="301:22" pos:end="301:50"><name pos:start="301:22" pos:end="301:34">vmdk_read_cid</name><argument_list pos:start="301:35" pos:end="301:50">(<argument pos:start="301:36" pos:end="301:46"><expr pos:start="301:36" pos:end="301:46"><call pos:start="301:36" pos:end="301:46"><name pos:start="301:36" pos:end="301:41">blk_bs</name><argument_list pos:start="301:42" pos:end="301:46">(<argument pos:start="301:43" pos:end="301:45"><expr pos:start="301:43" pos:end="301:45"><name pos:start="301:43" pos:end="301:45">blk</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="301:49" pos:end="301:49"><expr pos:start="301:49" pos:end="301:49"><literal type="number" pos:start="301:49" pos:end="301:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:23"><expr pos:start="303:9" pos:end="303:22"><call pos:start="303:9" pos:end="303:22"><name pos:start="303:9" pos:end="303:17">blk_unref</name><argument_list pos:start="303:18" pos:end="303:22">(<argument pos:start="303:19" pos:end="303:21"><expr pos:start="303:19" pos:end="303:21"><name pos:start="303:19" pos:end="303:21">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="307:59"><expr pos:start="305:9" pos:end="307:58"><call pos:start="305:9" pos:end="307:58"><name pos:start="305:9" pos:end="305:16">snprintf</name><argument_list pos:start="305:17" pos:end="307:58">(<argument pos:start="305:18" pos:end="305:33"><expr pos:start="305:18" pos:end="305:33"><name pos:start="305:18" pos:end="305:33">parent_desc_line</name></expr></argument>, <argument pos:start="305:36" pos:end="305:43"><expr pos:start="305:36" pos:end="305:43"><name pos:start="305:36" pos:end="305:43">BUF_SIZE</name></expr></argument>,

                <argument pos:start="307:17" pos:end="307:43"><expr pos:start="307:17" pos:end="307:43"><literal type="string" pos:start="307:17" pos:end="307:43">"parentFileNameHint=\"%s\""</literal></expr></argument>, <argument pos:start="307:46" pos:end="307:57"><expr pos:start="307:46" pos:end="307:57"><name pos:start="307:46" pos:end="307:57">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="313:5" pos:end="313:24">/* Create extents */</comment>

    <expr_stmt pos:start="315:5" pos:end="315:26"><expr pos:start="315:5" pos:end="315:25"><name pos:start="315:5" pos:end="315:12">filesize</name> <operator pos:start="315:14" pos:end="315:14">=</operator> <name pos:start="315:16" pos:end="315:25">total_size</name></expr>;</expr_stmt>

    <while pos:start="317:5" pos:end="371:5">while <condition pos:start="317:11" pos:end="317:24">(<expr pos:start="317:12" pos:end="317:23"><name pos:start="317:12" pos:end="317:19">filesize</name> <operator pos:start="317:21" pos:end="317:21">&gt;</operator> <literal type="number" pos:start="317:23" pos:end="317:23">0</literal></expr>)</condition> <block pos:start="317:26" pos:end="371:5">{<block_content pos:start="319:9" pos:end="369:51">

        <decl_stmt pos:start="319:9" pos:end="319:32"><decl pos:start="319:9" pos:end="319:31"><type pos:start="319:9" pos:end="319:15"><name pos:start="319:9" pos:end="319:15">int64_t</name></type> <name pos:start="319:17" pos:end="319:20">size</name> <init pos:start="319:22" pos:end="319:31">= <expr pos:start="319:24" pos:end="319:31"><name pos:start="319:24" pos:end="319:31">filesize</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="323:9" pos:end="327:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:39">(<expr pos:start="323:13" pos:end="323:38"><name pos:start="323:13" pos:end="323:17">split</name> <operator pos:start="323:19" pos:end="323:20">&amp;&amp;</operator> <name pos:start="323:22" pos:end="323:25">size</name> <operator pos:start="323:27" pos:end="323:27">&gt;</operator> <name pos:start="323:29" pos:end="323:38">split_size</name></expr>)</condition> <block pos:start="323:41" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:30">

            <expr_stmt pos:start="325:13" pos:end="325:30"><expr pos:start="325:13" pos:end="325:29"><name pos:start="325:13" pos:end="325:16">size</name> <operator pos:start="325:18" pos:end="325:18">=</operator> <name pos:start="325:20" pos:end="325:29">split_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="329:9" pos:end="343:9"><if pos:start="329:9" pos:end="335:9">if <condition pos:start="329:12" pos:end="329:18">(<expr pos:start="329:13" pos:end="329:17"><name pos:start="329:13" pos:end="329:17">split</name></expr>)</condition> <block pos:start="329:20" pos:end="335:9">{<block_content pos:start="331:13" pos:end="333:62">

            <expr_stmt pos:start="331:13" pos:end="333:62"><expr pos:start="331:13" pos:end="333:61"><call pos:start="331:13" pos:end="333:61"><name pos:start="331:13" pos:end="331:20">snprintf</name><argument_list pos:start="331:21" pos:end="333:61">(<argument pos:start="331:22" pos:end="331:34"><expr pos:start="331:22" pos:end="331:34"><name pos:start="331:22" pos:end="331:34">desc_filename</name></expr></argument>, <argument pos:start="331:37" pos:end="331:44"><expr pos:start="331:37" pos:end="331:44"><name pos:start="331:37" pos:end="331:44">PATH_MAX</name></expr></argument>, <argument pos:start="331:47" pos:end="331:59"><expr pos:start="331:47" pos:end="331:59"><literal type="string" pos:start="331:47" pos:end="331:59">"%s-%c%03d%s"</literal></expr></argument>,

                    <argument pos:start="333:21" pos:end="333:26"><expr pos:start="333:21" pos:end="333:26"><name pos:start="333:21" pos:end="333:26">prefix</name></expr></argument>, <argument pos:start="333:29" pos:end="333:44"><expr pos:start="333:29" pos:end="333:44"><ternary pos:start="333:29" pos:end="333:44"><condition pos:start="333:29" pos:end="333:34"><expr pos:start="333:29" pos:end="333:32"><name pos:start="333:29" pos:end="333:32">flat</name></expr> ?</condition><then pos:start="333:36" pos:end="333:38"> <expr pos:start="333:36" pos:end="333:38"><literal type="char" pos:start="333:36" pos:end="333:38">'f'</literal></expr> </then><else pos:start="333:40" pos:end="333:44">: <expr pos:start="333:42" pos:end="333:44"><literal type="char" pos:start="333:42" pos:end="333:44">'s'</literal></expr></else></ternary></expr></argument>, <argument pos:start="333:47" pos:end="333:51"><expr pos:start="333:47" pos:end="333:51"><operator pos:start="333:47" pos:end="333:48">++</operator><name pos:start="333:49" pos:end="333:51">idx</name></expr></argument>, <argument pos:start="333:54" pos:end="333:60"><expr pos:start="333:54" pos:end="333:60"><name pos:start="333:54" pos:end="333:60">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="335:11" pos:end="339:9">else if <condition pos:start="335:19" pos:end="335:24">(<expr pos:start="335:20" pos:end="335:23"><name pos:start="335:20" pos:end="335:23">flat</name></expr>)</condition> <block pos:start="335:26" pos:end="339:9">{<block_content pos:start="337:13" pos:end="337:76">

            <expr_stmt pos:start="337:13" pos:end="337:76"><expr pos:start="337:13" pos:end="337:75"><call pos:start="337:13" pos:end="337:75"><name pos:start="337:13" pos:end="337:20">snprintf</name><argument_list pos:start="337:21" pos:end="337:75">(<argument pos:start="337:22" pos:end="337:34"><expr pos:start="337:22" pos:end="337:34"><name pos:start="337:22" pos:end="337:34">desc_filename</name></expr></argument>, <argument pos:start="337:37" pos:end="337:44"><expr pos:start="337:37" pos:end="337:44"><name pos:start="337:37" pos:end="337:44">PATH_MAX</name></expr></argument>, <argument pos:start="337:47" pos:end="337:57"><expr pos:start="337:47" pos:end="337:57"><literal type="string" pos:start="337:47" pos:end="337:57">"%s-flat%s"</literal></expr></argument>, <argument pos:start="337:60" pos:end="337:65"><expr pos:start="337:60" pos:end="337:65"><name pos:start="337:60" pos:end="337:65">prefix</name></expr></argument>, <argument pos:start="337:68" pos:end="337:74"><expr pos:start="337:68" pos:end="337:74"><name pos:start="337:68" pos:end="337:74">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="339:11" pos:end="343:9">else <block pos:start="339:16" pos:end="343:9">{<block_content pos:start="341:13" pos:end="341:71">

            <expr_stmt pos:start="341:13" pos:end="341:71"><expr pos:start="341:13" pos:end="341:70"><call pos:start="341:13" pos:end="341:70"><name pos:start="341:13" pos:end="341:20">snprintf</name><argument_list pos:start="341:21" pos:end="341:70">(<argument pos:start="341:22" pos:end="341:34"><expr pos:start="341:22" pos:end="341:34"><name pos:start="341:22" pos:end="341:34">desc_filename</name></expr></argument>, <argument pos:start="341:37" pos:end="341:44"><expr pos:start="341:37" pos:end="341:44"><name pos:start="341:37" pos:end="341:44">PATH_MAX</name></expr></argument>, <argument pos:start="341:47" pos:end="341:52"><expr pos:start="341:47" pos:end="341:52"><literal type="string" pos:start="341:47" pos:end="341:52">"%s%s"</literal></expr></argument>, <argument pos:start="341:55" pos:end="341:60"><expr pos:start="341:55" pos:end="341:60"><name pos:start="341:55" pos:end="341:60">prefix</name></expr></argument>, <argument pos:start="341:63" pos:end="341:69"><expr pos:start="341:63" pos:end="341:69"><name pos:start="341:63" pos:end="341:69">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:70"><expr pos:start="345:9" pos:end="345:69"><call pos:start="345:9" pos:end="345:69"><name pos:start="345:9" pos:end="345:16">snprintf</name><argument_list pos:start="345:17" pos:end="345:69">(<argument pos:start="345:18" pos:end="345:29"><expr pos:start="345:18" pos:end="345:29"><name pos:start="345:18" pos:end="345:29">ext_filename</name></expr></argument>, <argument pos:start="345:32" pos:end="345:39"><expr pos:start="345:32" pos:end="345:39"><name pos:start="345:32" pos:end="345:39">PATH_MAX</name></expr></argument>, <argument pos:start="345:42" pos:end="345:47"><expr pos:start="345:42" pos:end="345:47"><literal type="string" pos:start="345:42" pos:end="345:47">"%s%s"</literal></expr></argument>, <argument pos:start="345:50" pos:end="345:53"><expr pos:start="345:50" pos:end="345:53"><name pos:start="345:50" pos:end="345:53">path</name></expr></argument>, <argument pos:start="345:56" pos:end="345:68"><expr pos:start="345:56" pos:end="345:68"><name pos:start="345:56" pos:end="345:68">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="349:9" pos:end="357:9"><if pos:start="349:9" pos:end="357:9">if <condition pos:start="349:12" pos:end="351:73">(<expr pos:start="349:13" pos:end="351:72"><call pos:start="349:13" pos:end="351:72"><name pos:start="349:13" pos:end="349:30">vmdk_create_extent</name><argument_list pos:start="349:31" pos:end="351:72">(<argument pos:start="349:32" pos:end="349:43"><expr pos:start="349:32" pos:end="349:43"><name pos:start="349:32" pos:end="349:43">ext_filename</name></expr></argument>, <argument pos:start="349:46" pos:end="349:49"><expr pos:start="349:46" pos:end="349:49"><name pos:start="349:46" pos:end="349:49">size</name></expr></argument>,

                               <argument pos:start="351:32" pos:end="351:35"><expr pos:start="351:32" pos:end="351:35"><name pos:start="351:32" pos:end="351:35">flat</name></expr></argument>, <argument pos:start="351:38" pos:end="351:45"><expr pos:start="351:38" pos:end="351:45"><name pos:start="351:38" pos:end="351:45">compress</name></expr></argument>, <argument pos:start="351:48" pos:end="351:59"><expr pos:start="351:48" pos:end="351:59"><name pos:start="351:48" pos:end="351:59">zeroed_grain</name></expr></argument>, <argument pos:start="351:62" pos:end="351:65"><expr pos:start="351:62" pos:end="351:65"><name pos:start="351:62" pos:end="351:65">opts</name></expr></argument>, <argument pos:start="351:68" pos:end="351:71"><expr pos:start="351:68" pos:end="351:71"><name pos:start="351:68" pos:end="351:71">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="351:75" pos:end="357:9">{<block_content pos:start="353:13" pos:end="355:22">

            <expr_stmt pos:start="353:13" pos:end="353:26"><expr pos:start="353:13" pos:end="353:25"><name pos:start="353:13" pos:end="353:15">ret</name> <operator pos:start="353:17" pos:end="353:17">=</operator> <operator pos:start="353:19" pos:end="353:19">-</operator><name pos:start="353:20" pos:end="353:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="355:13" pos:end="355:22">goto <name pos:start="355:18" pos:end="355:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="359:9" pos:end="359:25"><expr pos:start="359:9" pos:end="359:24"><name pos:start="359:9" pos:end="359:16">filesize</name> <operator pos:start="359:18" pos:end="359:19">-=</operator> <name pos:start="359:21" pos:end="359:24">size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="363:9" pos:end="363:37">/* Format description line */</comment>

        <expr_stmt pos:start="365:9" pos:end="367:78"><expr pos:start="365:9" pos:end="367:77"><call pos:start="365:9" pos:end="367:77"><name pos:start="365:9" pos:end="365:16">snprintf</name><argument_list pos:start="365:17" pos:end="367:77">(<argument pos:start="365:18" pos:end="365:26"><expr pos:start="365:18" pos:end="365:26"><name pos:start="365:18" pos:end="365:26">desc_line</name></expr></argument>, <argument pos:start="365:29" pos:end="365:36"><expr pos:start="365:29" pos:end="365:36"><name pos:start="365:29" pos:end="365:36">BUF_SIZE</name></expr></argument>,

                    <argument pos:start="367:21" pos:end="367:36"><expr pos:start="367:21" pos:end="367:36"><name pos:start="367:21" pos:end="367:36">desc_extent_line</name></expr></argument>, <argument pos:start="367:39" pos:end="367:61"><expr pos:start="367:39" pos:end="367:61"><name pos:start="367:39" pos:end="367:42">size</name> <operator pos:start="367:44" pos:end="367:44">/</operator> <name pos:start="367:46" pos:end="367:61">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="367:64" pos:end="367:76"><expr pos:start="367:64" pos:end="367:76"><name pos:start="367:64" pos:end="367:76">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:51"><expr pos:start="369:9" pos:end="369:50"><call pos:start="369:9" pos:end="369:50"><name pos:start="369:9" pos:end="369:23">g_string_append</name><argument_list pos:start="369:24" pos:end="369:50">(<argument pos:start="369:25" pos:end="369:38"><expr pos:start="369:25" pos:end="369:38"><name pos:start="369:25" pos:end="369:38">ext_desc_lines</name></expr></argument>, <argument pos:start="369:41" pos:end="369:49"><expr pos:start="369:41" pos:end="369:49"><name pos:start="369:41" pos:end="369:49">desc_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="373:5" pos:end="373:34">/* generate descriptor file */</comment>

    <expr_stmt pos:start="375:5" pos:end="395:41"><expr pos:start="375:5" pos:end="395:40"><name pos:start="375:5" pos:end="375:8">desc</name> <operator pos:start="375:10" pos:end="375:10">=</operator> <call pos:start="375:12" pos:end="395:40"><name pos:start="375:12" pos:end="375:26">g_strdup_printf</name><argument_list pos:start="375:27" pos:end="395:40">(<argument pos:start="375:28" pos:end="375:40"><expr pos:start="375:28" pos:end="375:40"><name pos:start="375:28" pos:end="375:40">desc_template</name></expr></argument>,

                           <argument pos:start="377:28" pos:end="377:41"><expr pos:start="377:28" pos:end="377:41"><call pos:start="377:28" pos:end="377:41"><name pos:start="377:28" pos:end="377:39">g_random_int</name><argument_list pos:start="377:40" pos:end="377:41">()</argument_list></call></expr></argument>,

                           <argument pos:start="379:28" pos:end="379:37"><expr pos:start="379:28" pos:end="379:37"><name pos:start="379:28" pos:end="379:37">parent_cid</name></expr></argument>,

                           <argument pos:start="381:28" pos:end="381:30"><expr pos:start="381:28" pos:end="381:30"><name pos:start="381:28" pos:end="381:30">fmt</name></expr></argument>,

                           <argument pos:start="383:28" pos:end="383:43"><expr pos:start="383:28" pos:end="383:43"><name pos:start="383:28" pos:end="383:43">parent_desc_line</name></expr></argument>,

                           <argument pos:start="385:28" pos:end="385:46"><expr pos:start="385:28" pos:end="385:46"><name pos:start="385:28" pos:end="385:46"><name pos:start="385:28" pos:end="385:41">ext_desc_lines</name><operator pos:start="385:42" pos:end="385:43">-&gt;</operator><name pos:start="385:44" pos:end="385:46">str</name></name></expr></argument>,

                           <argument pos:start="387:28" pos:end="387:37"><expr pos:start="387:28" pos:end="387:37"><name pos:start="387:28" pos:end="387:37">hw_version</name></expr></argument>,

                           <argument pos:start="389:28" pos:end="391:78"><expr pos:start="389:28" pos:end="391:78"><name pos:start="389:28" pos:end="389:37">total_size</name> <operator pos:start="389:39" pos:end="389:39">/</operator>

                               <operator pos:start="391:32" pos:end="391:32">(</operator><name pos:start="391:33" pos:end="391:39">int64_t</name><operator pos:start="391:40" pos:end="391:40">)</operator><operator pos:start="391:41" pos:end="391:41">(</operator><literal type="number" pos:start="391:42" pos:end="391:43">63</literal> <operator pos:start="391:45" pos:end="391:45">*</operator> <name pos:start="391:47" pos:end="391:58">number_heads</name> <operator pos:start="391:60" pos:end="391:60">*</operator> <name pos:start="391:62" pos:end="391:77">BDRV_SECTOR_SIZE</name><operator pos:start="391:78" pos:end="391:78">)</operator></expr></argument>,

                           <argument pos:start="393:28" pos:end="393:39"><expr pos:start="393:28" pos:end="393:39"><name pos:start="393:28" pos:end="393:39">number_heads</name></expr></argument>,

                           <argument pos:start="395:28" pos:end="395:39"><expr pos:start="395:28" pos:end="395:39"><name pos:start="395:28" pos:end="395:39">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:28"><expr pos:start="397:5" pos:end="397:27"><name pos:start="397:5" pos:end="397:12">desc_len</name> <operator pos:start="397:14" pos:end="397:14">=</operator> <call pos:start="397:16" pos:end="397:27"><name pos:start="397:16" pos:end="397:21">strlen</name><argument_list pos:start="397:22" pos:end="397:27">(<argument pos:start="397:23" pos:end="397:26"><expr pos:start="397:23" pos:end="397:26"><name pos:start="397:23" pos:end="397:26">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="399:5" pos:end="399:39">/* the descriptor offset = 0x200 */</comment>

    <if_stmt pos:start="401:5" pos:end="417:5"><if pos:start="401:5" pos:end="405:5">if <condition pos:start="401:8" pos:end="401:24">(<expr pos:start="401:9" pos:end="401:23"><operator pos:start="401:9" pos:end="401:9">!</operator><name pos:start="401:10" pos:end="401:14">split</name> <operator pos:start="401:16" pos:end="401:17">&amp;&amp;</operator> <operator pos:start="401:19" pos:end="401:19">!</operator><name pos:start="401:20" pos:end="401:23">flat</name></expr>)</condition> <block pos:start="401:26" pos:end="405:5">{<block_content pos:start="403:9" pos:end="403:28">

        <expr_stmt pos:start="403:9" pos:end="403:28"><expr pos:start="403:9" pos:end="403:27"><name pos:start="403:9" pos:end="403:19">desc_offset</name> <operator pos:start="403:21" pos:end="403:21">=</operator> <literal type="number" pos:start="403:23" pos:end="403:27">0x200</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="405:7" pos:end="417:5">else <block pos:start="405:12" pos:end="417:5">{<block_content pos:start="407:9" pos:end="415:9">

        <expr_stmt pos:start="407:9" pos:end="407:59"><expr pos:start="407:9" pos:end="407:58"><name pos:start="407:9" pos:end="407:11">ret</name> <operator pos:start="407:13" pos:end="407:13">=</operator> <call pos:start="407:15" pos:end="407:58"><name pos:start="407:15" pos:end="407:30">bdrv_create_file</name><argument_list pos:start="407:31" pos:end="407:58">(<argument pos:start="407:32" pos:end="407:39"><expr pos:start="407:32" pos:end="407:39"><name pos:start="407:32" pos:end="407:39">filename</name></expr></argument>, <argument pos:start="407:42" pos:end="407:45"><expr pos:start="407:42" pos:end="407:45"><name pos:start="407:42" pos:end="407:45">opts</name></expr></argument>, <argument pos:start="407:48" pos:end="407:57"><expr pos:start="407:48" pos:end="407:57"><operator pos:start="407:48" pos:end="407:48">&amp;</operator><name pos:start="407:49" pos:end="407:57">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="409:9" pos:end="415:9"><if pos:start="409:9" pos:end="415:9">if <condition pos:start="409:12" pos:end="409:20">(<expr pos:start="409:13" pos:end="409:19"><name pos:start="409:13" pos:end="409:15">ret</name> <operator pos:start="409:17" pos:end="409:17">&lt;</operator> <literal type="number" pos:start="409:19" pos:end="409:19">0</literal></expr>)</condition> <block pos:start="409:22" pos:end="415:9">{<block_content pos:start="411:13" pos:end="413:22">

            <expr_stmt pos:start="411:13" pos:end="411:45"><expr pos:start="411:13" pos:end="411:44"><call pos:start="411:13" pos:end="411:44"><name pos:start="411:13" pos:end="411:27">error_propagate</name><argument_list pos:start="411:28" pos:end="411:44">(<argument pos:start="411:29" pos:end="411:32"><expr pos:start="411:29" pos:end="411:32"><name pos:start="411:29" pos:end="411:32">errp</name></expr></argument>, <argument pos:start="411:35" pos:end="411:43"><expr pos:start="411:35" pos:end="411:43"><name pos:start="411:35" pos:end="411:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="413:13" pos:end="413:22">goto <name pos:start="413:18" pos:end="413:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="421:5" pos:end="425:39"><expr pos:start="421:5" pos:end="425:38"><name pos:start="421:5" pos:end="421:11">new_blk</name> <operator pos:start="421:13" pos:end="421:13">=</operator> <call pos:start="421:15" pos:end="425:38"><name pos:start="421:15" pos:end="421:26">blk_new_open</name><argument_list pos:start="421:27" pos:end="425:38">(<argument pos:start="421:28" pos:end="421:35"><expr pos:start="421:28" pos:end="421:35"><name pos:start="421:28" pos:end="421:35">filename</name></expr></argument>, <argument pos:start="421:38" pos:end="421:41"><expr pos:start="421:38" pos:end="421:41"><name pos:start="421:38" pos:end="421:41">NULL</name></expr></argument>, <argument pos:start="421:44" pos:end="421:47"><expr pos:start="421:44" pos:end="421:47"><name pos:start="421:44" pos:end="421:47">NULL</name></expr></argument>,

                           <argument pos:start="423:28" pos:end="423:72"><expr pos:start="423:28" pos:end="423:72"><name pos:start="423:28" pos:end="423:38">BDRV_O_RDWR</name> <operator pos:start="423:40" pos:end="423:40">|</operator> <name pos:start="423:42" pos:end="423:54">BDRV_O_RESIZE</name> <operator pos:start="423:56" pos:end="423:56">|</operator> <name pos:start="423:58" pos:end="423:72">BDRV_O_PROTOCOL</name></expr></argument>,

                           <argument pos:start="425:28" pos:end="425:37"><expr pos:start="425:28" pos:end="425:37"><operator pos:start="425:28" pos:end="425:28">&amp;</operator><name pos:start="425:29" pos:end="425:37">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="427:5" pos:end="435:5"><if pos:start="427:5" pos:end="435:5">if <condition pos:start="427:8" pos:end="427:24">(<expr pos:start="427:9" pos:end="427:23"><name pos:start="427:9" pos:end="427:15">new_blk</name> <operator pos:start="427:17" pos:end="427:18">==</operator> <name pos:start="427:20" pos:end="427:23">NULL</name></expr>)</condition> <block pos:start="427:26" pos:end="435:5">{<block_content pos:start="429:9" pos:end="433:18">

        <expr_stmt pos:start="429:9" pos:end="429:41"><expr pos:start="429:9" pos:end="429:40"><call pos:start="429:9" pos:end="429:40"><name pos:start="429:9" pos:end="429:23">error_propagate</name><argument_list pos:start="429:24" pos:end="429:40">(<argument pos:start="429:25" pos:end="429:28"><expr pos:start="429:25" pos:end="429:28"><name pos:start="429:25" pos:end="429:28">errp</name></expr></argument>, <argument pos:start="429:31" pos:end="429:39"><expr pos:start="429:31" pos:end="429:39"><name pos:start="429:31" pos:end="429:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="431:9" pos:end="431:19"><expr pos:start="431:9" pos:end="431:18"><name pos:start="431:9" pos:end="431:11">ret</name> <operator pos:start="431:13" pos:end="431:13">=</operator> <operator pos:start="431:15" pos:end="431:15">-</operator><name pos:start="431:16" pos:end="431:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="433:9" pos:end="433:18">goto <name pos:start="433:14" pos:end="433:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="439:5" pos:end="439:50"><expr pos:start="439:5" pos:end="439:49"><call pos:start="439:5" pos:end="439:49"><name pos:start="439:5" pos:end="439:34">blk_set_allow_write_beyond_eof</name><argument_list pos:start="439:35" pos:end="439:49">(<argument pos:start="439:36" pos:end="439:42"><expr pos:start="439:36" pos:end="439:42"><name pos:start="439:36" pos:end="439:42">new_blk</name></expr></argument>, <argument pos:start="439:45" pos:end="439:48"><expr pos:start="439:45" pos:end="439:48"><name pos:start="439:45" pos:end="439:48">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="443:5" pos:end="443:62"><expr pos:start="443:5" pos:end="443:61"><name pos:start="443:5" pos:end="443:7">ret</name> <operator pos:start="443:9" pos:end="443:9">=</operator> <call pos:start="443:11" pos:end="443:61"><name pos:start="443:11" pos:end="443:20">blk_pwrite</name><argument_list pos:start="443:21" pos:end="443:61">(<argument pos:start="443:22" pos:end="443:28"><expr pos:start="443:22" pos:end="443:28"><name pos:start="443:22" pos:end="443:28">new_blk</name></expr></argument>, <argument pos:start="443:31" pos:end="443:41"><expr pos:start="443:31" pos:end="443:41"><name pos:start="443:31" pos:end="443:41">desc_offset</name></expr></argument>, <argument pos:start="443:44" pos:end="443:47"><expr pos:start="443:44" pos:end="443:47"><name pos:start="443:44" pos:end="443:47">desc</name></expr></argument>, <argument pos:start="443:50" pos:end="443:57"><expr pos:start="443:50" pos:end="443:57"><name pos:start="443:50" pos:end="443:57">desc_len</name></expr></argument>, <argument pos:start="443:60" pos:end="443:60"><expr pos:start="443:60" pos:end="443:60"><literal type="number" pos:start="443:60" pos:end="443:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="445:5" pos:end="451:5"><if pos:start="445:5" pos:end="451:5">if <condition pos:start="445:8" pos:end="445:16">(<expr pos:start="445:9" pos:end="445:15"><name pos:start="445:9" pos:end="445:11">ret</name> <operator pos:start="445:13" pos:end="445:13">&lt;</operator> <literal type="number" pos:start="445:15" pos:end="445:15">0</literal></expr>)</condition> <block pos:start="445:18" pos:end="451:5">{<block_content pos:start="447:9" pos:end="449:18">

        <expr_stmt pos:start="447:9" pos:end="447:68"><expr pos:start="447:9" pos:end="447:67"><call pos:start="447:9" pos:end="447:67"><name pos:start="447:9" pos:end="447:24">error_setg_errno</name><argument_list pos:start="447:25" pos:end="447:67">(<argument pos:start="447:26" pos:end="447:29"><expr pos:start="447:26" pos:end="447:29"><name pos:start="447:26" pos:end="447:29">errp</name></expr></argument>, <argument pos:start="447:32" pos:end="447:35"><expr pos:start="447:32" pos:end="447:35"><operator pos:start="447:32" pos:end="447:32">-</operator><name pos:start="447:33" pos:end="447:35">ret</name></expr></argument>, <argument pos:start="447:38" pos:end="447:66"><expr pos:start="447:38" pos:end="447:66"><literal type="string" pos:start="447:38" pos:end="447:66">"Could not write description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="449:9" pos:end="449:18">goto <name pos:start="449:14" pos:end="449:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="453:5" pos:end="455:30">/* bdrv_pwrite write padding zeros to align to sector, we don't need that

     * for description file */</comment>

    <if_stmt pos:start="457:5" pos:end="461:5"><if pos:start="457:5" pos:end="461:5">if <condition pos:start="457:8" pos:end="457:25">(<expr pos:start="457:9" pos:end="457:24"><name pos:start="457:9" pos:end="457:19">desc_offset</name> <operator pos:start="457:21" pos:end="457:22">==</operator> <literal type="number" pos:start="457:24" pos:end="457:24">0</literal></expr>)</condition> <block pos:start="457:27" pos:end="461:5">{<block_content pos:start="459:9" pos:end="459:71">

        <expr_stmt pos:start="459:9" pos:end="459:71"><expr pos:start="459:9" pos:end="459:70"><name pos:start="459:9" pos:end="459:11">ret</name> <operator pos:start="459:13" pos:end="459:13">=</operator> <call pos:start="459:15" pos:end="459:70"><name pos:start="459:15" pos:end="459:26">blk_truncate</name><argument_list pos:start="459:27" pos:end="459:70">(<argument pos:start="459:28" pos:end="459:34"><expr pos:start="459:28" pos:end="459:34"><name pos:start="459:28" pos:end="459:34">new_blk</name></expr></argument>, <argument pos:start="459:37" pos:end="459:44"><expr pos:start="459:37" pos:end="459:44"><name pos:start="459:37" pos:end="459:44">desc_len</name></expr></argument>, <argument pos:start="459:47" pos:end="459:63"><expr pos:start="459:47" pos:end="459:63"><name pos:start="459:47" pos:end="459:63">PREALLOC_MODE_OFF</name></expr></argument>, <argument pos:start="459:66" pos:end="459:69"><expr pos:start="459:66" pos:end="459:69"><name pos:start="459:66" pos:end="459:69">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="463:1" pos:end="463:5"><name pos:start="463:1" pos:end="463:4">exit</name>:</label>

    <if_stmt pos:start="465:5" pos:end="469:5"><if pos:start="465:5" pos:end="469:5">if <condition pos:start="465:8" pos:end="465:16">(<expr pos:start="465:9" pos:end="465:15"><name pos:start="465:9" pos:end="465:15">new_blk</name></expr>)</condition> <block pos:start="465:18" pos:end="469:5">{<block_content pos:start="467:9" pos:end="467:27">

        <expr_stmt pos:start="467:9" pos:end="467:27"><expr pos:start="467:9" pos:end="467:26"><call pos:start="467:9" pos:end="467:26"><name pos:start="467:9" pos:end="467:17">blk_unref</name><argument_list pos:start="467:18" pos:end="467:26">(<argument pos:start="467:19" pos:end="467:25"><expr pos:start="467:19" pos:end="467:25"><name pos:start="467:19" pos:end="467:25">new_blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:25"><expr pos:start="471:5" pos:end="471:24"><call pos:start="471:5" pos:end="471:24"><name pos:start="471:5" pos:end="471:10">g_free</name><argument_list pos:start="471:11" pos:end="471:24">(<argument pos:start="471:12" pos:end="471:23"><expr pos:start="471:12" pos:end="471:23"><name pos:start="471:12" pos:end="471:23">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:25"><expr pos:start="473:5" pos:end="473:24"><call pos:start="473:5" pos:end="473:24"><name pos:start="473:5" pos:end="473:10">g_free</name><argument_list pos:start="473:11" pos:end="473:24">(<argument pos:start="473:12" pos:end="473:23"><expr pos:start="473:12" pos:end="473:23"><name pos:start="473:12" pos:end="473:23">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="475:5" pos:end="475:23"><expr pos:start="475:5" pos:end="475:22"><call pos:start="475:5" pos:end="475:22"><name pos:start="475:5" pos:end="475:10">g_free</name><argument_list pos:start="475:11" pos:end="475:22">(<argument pos:start="475:12" pos:end="475:21"><expr pos:start="475:12" pos:end="475:21"><name pos:start="475:12" pos:end="475:21">hw_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="477:5" pos:end="477:16"><expr pos:start="477:5" pos:end="477:15"><call pos:start="477:5" pos:end="477:15"><name pos:start="477:5" pos:end="477:10">g_free</name><argument_list pos:start="477:11" pos:end="477:15">(<argument pos:start="477:12" pos:end="477:14"><expr pos:start="477:12" pos:end="477:14"><name pos:start="477:12" pos:end="477:14">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="479:5" pos:end="479:17"><expr pos:start="479:5" pos:end="479:16"><call pos:start="479:5" pos:end="479:16"><name pos:start="479:5" pos:end="479:10">g_free</name><argument_list pos:start="479:11" pos:end="479:16">(<argument pos:start="479:12" pos:end="479:15"><expr pos:start="479:12" pos:end="479:15"><name pos:start="479:12" pos:end="479:15">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="481:5" pos:end="481:17"><expr pos:start="481:5" pos:end="481:16"><call pos:start="481:5" pos:end="481:16"><name pos:start="481:5" pos:end="481:10">g_free</name><argument_list pos:start="481:11" pos:end="481:16">(<argument pos:start="481:12" pos:end="481:15"><expr pos:start="481:12" pos:end="481:15"><name pos:start="481:12" pos:end="481:15">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="483:5" pos:end="483:19"><expr pos:start="483:5" pos:end="483:18"><call pos:start="483:5" pos:end="483:18"><name pos:start="483:5" pos:end="483:10">g_free</name><argument_list pos:start="483:11" pos:end="483:18">(<argument pos:start="483:12" pos:end="483:17"><expr pos:start="483:12" pos:end="483:17"><name pos:start="483:12" pos:end="483:17">prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="485:5" pos:end="485:20"><expr pos:start="485:5" pos:end="485:19"><call pos:start="485:5" pos:end="485:19"><name pos:start="485:5" pos:end="485:10">g_free</name><argument_list pos:start="485:11" pos:end="485:19">(<argument pos:start="485:12" pos:end="485:18"><expr pos:start="485:12" pos:end="485:18"><name pos:start="485:12" pos:end="485:18">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="487:5" pos:end="487:22"><expr pos:start="487:5" pos:end="487:21"><call pos:start="487:5" pos:end="487:21"><name pos:start="487:5" pos:end="487:10">g_free</name><argument_list pos:start="487:11" pos:end="487:21">(<argument pos:start="487:12" pos:end="487:20"><expr pos:start="487:12" pos:end="487:20"><name pos:start="487:12" pos:end="487:20">desc_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="489:5" pos:end="489:25"><expr pos:start="489:5" pos:end="489:24"><call pos:start="489:5" pos:end="489:24"><name pos:start="489:5" pos:end="489:10">g_free</name><argument_list pos:start="489:11" pos:end="489:24">(<argument pos:start="489:12" pos:end="489:23"><expr pos:start="489:12" pos:end="489:23"><name pos:start="489:12" pos:end="489:23">ext_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="491:5" pos:end="491:26"><expr pos:start="491:5" pos:end="491:25"><call pos:start="491:5" pos:end="491:25"><name pos:start="491:5" pos:end="491:10">g_free</name><argument_list pos:start="491:11" pos:end="491:25">(<argument pos:start="491:12" pos:end="491:24"><expr pos:start="491:12" pos:end="491:24"><name pos:start="491:12" pos:end="491:24">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="493:29"><expr pos:start="493:5" pos:end="493:28"><call pos:start="493:5" pos:end="493:28"><name pos:start="493:5" pos:end="493:10">g_free</name><argument_list pos:start="493:11" pos:end="493:28">(<argument pos:start="493:12" pos:end="493:27"><expr pos:start="493:12" pos:end="493:27"><name pos:start="493:12" pos:end="493:27">parent_desc_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="495:40"><expr pos:start="495:5" pos:end="495:39"><call pos:start="495:5" pos:end="495:39"><name pos:start="495:5" pos:end="495:17">g_string_free</name><argument_list pos:start="495:18" pos:end="495:39">(<argument pos:start="495:19" pos:end="495:32"><expr pos:start="495:19" pos:end="495:32"><name pos:start="495:19" pos:end="495:32">ext_desc_lines</name></expr></argument>, <argument pos:start="495:35" pos:end="495:38"><expr pos:start="495:35" pos:end="495:38"><name pos:start="495:35" pos:end="495:38">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="497:5" pos:end="497:15">return <expr pos:start="497:12" pos:end="497:14"><name pos:start="497:12" pos:end="497:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
