<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8355.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">ff_frame_thread_encoder_free</name><parameter_list pos:start="1:34" pos:end="1:56">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>)</parameter_list><block pos:start="1:57" pos:end="41:1">{<block_content pos:start="3:5" pos:end="39:53">

    <decl_stmt pos:start="3:5" pos:end="3:10"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:60"><decl pos:start="5:5" pos:end="5:59"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">ThreadContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">c</name><init pos:start="5:21" pos:end="5:59">= <expr pos:start="5:23" pos:end="5:59"><name pos:start="5:23" pos:end="5:59"><name pos:start="5:23" pos:end="5:27">avctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:37">internal</name><operator pos:start="5:38" pos:end="5:39">-&gt;</operator><name pos:start="5:40" pos:end="5:59">frame_thread_encoder</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:44"><expr pos:start="9:5" pos:end="9:43"><call pos:start="9:5" pos:end="9:43"><name pos:start="9:5" pos:end="9:22">pthread_mutex_lock</name><argument_list pos:start="9:23" pos:end="9:43">(<argument pos:start="9:24" pos:end="9:42"><expr pos:start="9:24" pos:end="9:42"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:42"><name pos:start="9:25" pos:end="9:25">c</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:42">task_fifo_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:16"><expr pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:5">c</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:11">exit</name></name> <operator pos:start="11:13" pos:end="11:13">=</operator> <literal type="number" pos:start="11:15" pos:end="11:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:47"><expr pos:start="13:5" pos:end="13:46"><call pos:start="13:5" pos:end="13:46"><name pos:start="13:5" pos:end="13:26">pthread_cond_broadcast</name><argument_list pos:start="13:27" pos:end="13:46">(<argument pos:start="13:28" pos:end="13:45"><expr pos:start="13:28" pos:end="13:45"><operator pos:start="13:28" pos:end="13:28">&amp;</operator><name pos:start="13:29" pos:end="13:45"><name pos:start="13:29" pos:end="13:29">c</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:45">task_fifo_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:46"><expr pos:start="15:5" pos:end="15:45"><call pos:start="15:5" pos:end="15:45"><name pos:start="15:5" pos:end="15:24">pthread_mutex_unlock</name><argument_list pos:start="15:25" pos:end="15:45">(<argument pos:start="15:26" pos:end="15:44"><expr pos:start="15:26" pos:end="15:44"><operator pos:start="15:26" pos:end="15:26">&amp;</operator><name pos:start="15:27" pos:end="15:44"><name pos:start="15:27" pos:end="15:27">c</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:44">task_fifo_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="19:5" pos:end="23:5">for <control pos:start="19:9" pos:end="19:41">(<init pos:start="19:10" pos:end="19:13"><expr pos:start="19:10" pos:end="19:12"><name pos:start="19:10" pos:end="19:10">i</name><operator pos:start="19:11" pos:end="19:11">=</operator><literal type="number" pos:start="19:12" pos:end="19:12">0</literal></expr>;</init> <condition pos:start="19:15" pos:end="19:36"><expr pos:start="19:15" pos:end="19:35"><name pos:start="19:15" pos:end="19:15">i</name><operator pos:start="19:16" pos:end="19:16">&lt;</operator><name pos:start="19:17" pos:end="19:35"><name pos:start="19:17" pos:end="19:21">avctx</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:35">thread_count</name></name></expr>;</condition> <incr pos:start="19:38" pos:end="19:40"><expr pos:start="19:38" pos:end="19:40"><name pos:start="19:38" pos:end="19:38">i</name><operator pos:start="19:39" pos:end="19:40">++</operator></expr></incr>)</control> <block pos:start="19:43" pos:end="23:5">{<block_content pos:start="21:10" pos:end="21:42">

         <expr_stmt pos:start="21:10" pos:end="21:42"><expr pos:start="21:10" pos:end="21:41"><call pos:start="21:10" pos:end="21:41"><name pos:start="21:10" pos:end="21:21">pthread_join</name><argument_list pos:start="21:22" pos:end="21:41">(<argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:23">c</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:31">worker</name><index pos:start="21:32" pos:end="21:34">[<expr pos:start="21:33" pos:end="21:33"><name pos:start="21:33" pos:end="21:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="21:37" pos:end="21:40"><expr pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:40">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:25">pthread_mutex_destroy</name><argument_list pos:start="27:26" pos:end="27:46">(<argument pos:start="27:27" pos:end="27:45"><expr pos:start="27:27" pos:end="27:45"><operator pos:start="27:27" pos:end="27:27">&amp;</operator><name pos:start="27:28" pos:end="27:45"><name pos:start="27:28" pos:end="27:28">c</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:45">task_fifo_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:51"><expr pos:start="29:5" pos:end="29:50"><call pos:start="29:5" pos:end="29:50"><name pos:start="29:5" pos:end="29:25">pthread_mutex_destroy</name><argument_list pos:start="29:26" pos:end="29:50">(<argument pos:start="29:27" pos:end="29:49"><expr pos:start="29:27" pos:end="29:49"><operator pos:start="29:27" pos:end="29:27">&amp;</operator><name pos:start="29:28" pos:end="29:49"><name pos:start="29:28" pos:end="29:28">c</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:49">finished_task_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><call pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:25">pthread_mutex_destroy</name><argument_list pos:start="31:26" pos:end="31:43">(<argument pos:start="31:27" pos:end="31:42"><expr pos:start="31:27" pos:end="31:42"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:42"><name pos:start="31:28" pos:end="31:28">c</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:42">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:45"><expr pos:start="33:5" pos:end="33:44"><call pos:start="33:5" pos:end="33:44"><name pos:start="33:5" pos:end="33:24">pthread_cond_destroy</name><argument_list pos:start="33:25" pos:end="33:44">(<argument pos:start="33:26" pos:end="33:43"><expr pos:start="33:26" pos:end="33:43"><operator pos:start="33:26" pos:end="33:26">&amp;</operator><name pos:start="33:27" pos:end="33:43"><name pos:start="33:27" pos:end="33:27">c</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:43">task_fifo_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:49"><expr pos:start="35:5" pos:end="35:48"><call pos:start="35:5" pos:end="35:48"><name pos:start="35:5" pos:end="35:24">pthread_cond_destroy</name><argument_list pos:start="35:25" pos:end="35:48">(<argument pos:start="35:26" pos:end="35:47"><expr pos:start="35:26" pos:end="35:47"><operator pos:start="35:26" pos:end="35:26">&amp;</operator><name pos:start="35:27" pos:end="35:47"><name pos:start="35:27" pos:end="35:27">c</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:47">finished_task_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:17">av_fifo_freep</name><argument_list pos:start="37:18" pos:end="37:32">(<argument pos:start="37:19" pos:end="37:31"><expr pos:start="37:19" pos:end="37:31"><operator pos:start="37:19" pos:end="37:19">&amp;</operator><name pos:start="37:20" pos:end="37:31"><name pos:start="37:20" pos:end="37:20">c</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:31">task_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:53"><expr pos:start="39:5" pos:end="39:52"><call pos:start="39:5" pos:end="39:52"><name pos:start="39:5" pos:end="39:12">av_freep</name><argument_list pos:start="39:13" pos:end="39:52">(<argument pos:start="39:14" pos:end="39:51"><expr pos:start="39:14" pos:end="39:51"><operator pos:start="39:14" pos:end="39:14">&amp;</operator><name pos:start="39:15" pos:end="39:51"><name pos:start="39:15" pos:end="39:19">avctx</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:29">internal</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:51">frame_thread_encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
