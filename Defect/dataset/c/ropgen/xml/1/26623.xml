<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26623.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">scsi_disk_emulate_command</name><parameter_list pos:start="1:37" pos:end="1:52">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:50"><name pos:start="1:38" pos:end="1:48">SCSIDiskReq</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">r</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="389:1">{<block_content pos:start="5:5" pos:end="387:14">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIRequest</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">req</name> <init pos:start="5:22" pos:end="5:30">= <expr pos:start="5:24" pos:end="5:30"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:25">r</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:30">req</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:64"><decl pos:start="7:5" pos:end="7:63"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:63">= <expr pos:start="7:24" pos:end="7:63"><call pos:start="7:24" pos:end="7:63"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:63">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:62"><expr pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:62"><name pos:start="7:55" pos:end="7:57">req</name><operator pos:start="7:58" pos:end="7:59">-&gt;</operator><name pos:start="7:60" pos:end="7:62">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">nb_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:19">outbuf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">buflen</name> <init pos:start="13:16" pos:end="13:18">= <expr pos:start="13:18" pos:end="13:18"><literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="45:5"><if pos:start="17:5" pos:end="45:5">if <condition pos:start="17:8" pos:end="17:25">(<expr pos:start="17:9" pos:end="17:24"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:24"><name pos:start="17:10" pos:end="17:10">r</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:15">iov</name><operator pos:start="17:16" pos:end="17:16">.</operator><name pos:start="17:17" pos:end="17:24">iov_base</name></name></expr>)</condition> <block pos:start="17:27" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:70">

        <comment type="block" pos:start="19:9" pos:end="33:11">/*

         * FIXME: we shouldn't return anything bigger than 4k, but the code

         * requires the buffer to be as big as req-&gt;cmd.xfer in several

         * places.  So, do not allow CDBs with a very large ALLOCATION

         * LENGTH.  The real fix would be to modify scsi_read_data and

         * dma_buf_read, so that they return data beyond the buflen

         * as all zeros.

         */</comment>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:34">(<expr pos:start="35:13" pos:end="35:33"><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:15">req</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:20">cmd</name><operator pos:start="35:21" pos:end="35:21">.</operator><name pos:start="35:22" pos:end="35:25">xfer</name></name> <operator pos:start="35:27" pos:end="35:27">&gt;</operator> <literal type="number" pos:start="35:29" pos:end="35:33">65536</literal></expr>)</condition> <block pos:start="35:36" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:33">

            <goto pos:start="37:13" pos:end="37:33">goto <name pos:start="37:18" pos:end="37:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:9">r</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:17">buflen</name></name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:44"><name pos:start="41:21" pos:end="41:23">MAX</name><argument_list pos:start="41:24" pos:end="41:44">(<argument pos:start="41:25" pos:end="41:28"><expr pos:start="41:25" pos:end="41:28"><literal type="number" pos:start="41:25" pos:end="41:28">4096</literal></expr></argument>, <argument pos:start="41:31" pos:end="41:43"><expr pos:start="41:31" pos:end="41:43"><name pos:start="41:31" pos:end="41:43"><name pos:start="41:31" pos:end="41:33">req</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:38">cmd</name><operator pos:start="41:39" pos:end="41:39">.</operator><name pos:start="41:40" pos:end="41:43">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:70"><expr pos:start="43:9" pos:end="43:69"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:9">r</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:14">iov</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:23">iov_base</name></name> <operator pos:start="43:25" pos:end="43:25">=</operator> <call pos:start="43:27" pos:end="43:69"><name pos:start="43:27" pos:end="43:41">qemu_blockalign</name><argument_list pos:start="43:42" pos:end="43:69">(<argument pos:start="43:43" pos:end="43:57"><expr pos:start="43:43" pos:end="43:57"><name pos:start="43:43" pos:end="43:57"><name pos:start="43:43" pos:end="43:43">s</name><operator pos:start="43:44" pos:end="43:45">-&gt;</operator><name pos:start="43:46" pos:end="43:49">qdev</name><operator pos:start="43:50" pos:end="43:50">.</operator><name pos:start="43:51" pos:end="43:54">conf</name><operator pos:start="43:55" pos:end="43:55">.</operator><name pos:start="43:56" pos:end="43:57">bs</name></name></expr></argument>, <argument pos:start="43:60" pos:end="43:68"><expr pos:start="43:60" pos:end="43:68"><name pos:start="43:60" pos:end="43:68"><name pos:start="43:60" pos:end="43:60">r</name><operator pos:start="43:61" pos:end="43:62">-&gt;</operator><name pos:start="43:63" pos:end="43:68">buflen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:10">outbuf</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:28"><name pos:start="49:14" pos:end="49:14">r</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:19">iov</name><operator pos:start="49:20" pos:end="49:20">.</operator><name pos:start="49:21" pos:end="49:28">iov_base</name></name></expr>;</expr_stmt>

    <switch pos:start="51:5" pos:end="371:5">switch <condition pos:start="51:12" pos:end="51:28">(<expr pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:15">req</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:20">cmd</name><operator pos:start="51:21" pos:end="51:21">.</operator><name pos:start="51:22" pos:end="51:24">buf</name><index pos:start="51:25" pos:end="51:27">[<expr pos:start="51:26" pos:end="51:26"><literal type="number" pos:start="51:26" pos:end="51:26">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="51:30" pos:end="371:5">{<block_content pos:start="53:5" pos:end="369:18">

    <case pos:start="53:5" pos:end="53:25">case <expr pos:start="53:10" pos:end="53:24"><name pos:start="53:10" pos:end="53:24">TEST_UNIT_READY</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:67"><expr pos:start="55:9" pos:end="55:66"><call pos:start="55:9" pos:end="55:66"><name pos:start="55:9" pos:end="55:14">assert</name><argument_list pos:start="55:15" pos:end="55:66">(<argument pos:start="55:16" pos:end="55:65"><expr pos:start="55:16" pos:end="55:65"><operator pos:start="55:16" pos:end="55:16">!</operator><name pos:start="55:17" pos:end="55:28"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:28">tray_open</name></name> <operator pos:start="55:30" pos:end="55:31">&amp;&amp;</operator> <call pos:start="55:33" pos:end="55:65"><name pos:start="55:33" pos:end="55:48">bdrv_is_inserted</name><argument_list pos:start="55:49" pos:end="55:65">(<argument pos:start="55:50" pos:end="55:64"><expr pos:start="55:50" pos:end="55:64"><name pos:start="55:50" pos:end="55:64"><name pos:start="55:50" pos:end="55:50">s</name><operator pos:start="55:51" pos:end="55:52">-&gt;</operator><name pos:start="55:53" pos:end="55:56">qdev</name><operator pos:start="55:57" pos:end="55:57">.</operator><name pos:start="55:58" pos:end="55:61">conf</name><operator pos:start="55:62" pos:end="55:62">.</operator><name pos:start="55:63" pos:end="55:64">bs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:17">case <expr pos:start="59:10" pos:end="59:16"><name pos:start="59:10" pos:end="59:16">INQUIRY</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:56"><expr pos:start="61:9" pos:end="61:55"><name pos:start="61:9" pos:end="61:14">buflen</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:55"><name pos:start="61:18" pos:end="61:42">scsi_disk_emulate_inquiry</name><argument_list pos:start="61:43" pos:end="61:55">(<argument pos:start="61:44" pos:end="61:46"><expr pos:start="61:44" pos:end="61:46"><name pos:start="61:44" pos:end="61:46">req</name></expr></argument>, <argument pos:start="61:49" pos:end="61:54"><expr pos:start="61:49" pos:end="61:54"><name pos:start="61:49" pos:end="61:54">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:23">(<expr pos:start="63:13" pos:end="63:22"><name pos:start="63:13" pos:end="63:18">buflen</name> <operator pos:start="63:20" pos:end="63:20">&lt;</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>)</condition> <block pos:start="63:25" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:33">

            <goto pos:start="65:13" pos:end="65:33">goto <name pos:start="65:18" pos:end="65:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:20">case <expr pos:start="71:10" pos:end="71:19"><name pos:start="71:10" pos:end="71:19">MODE_SENSE</name></expr>:</case>

    <case pos:start="73:5" pos:end="73:23">case <expr pos:start="73:10" pos:end="73:22"><name pos:start="73:10" pos:end="73:22">MODE_SENSE_10</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:57"><expr pos:start="75:9" pos:end="75:56"><name pos:start="75:9" pos:end="75:14">buflen</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <call pos:start="75:18" pos:end="75:56"><name pos:start="75:18" pos:end="75:45">scsi_disk_emulate_mode_sense</name><argument_list pos:start="75:46" pos:end="75:56">(<argument pos:start="75:47" pos:end="75:47"><expr pos:start="75:47" pos:end="75:47"><name pos:start="75:47" pos:end="75:47">r</name></expr></argument>, <argument pos:start="75:50" pos:end="75:55"><expr pos:start="75:50" pos:end="75:55"><name pos:start="75:50" pos:end="75:55">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:23">(<expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:18">buflen</name> <operator pos:start="77:20" pos:end="77:20">&lt;</operator> <literal type="number" pos:start="77:22" pos:end="77:22">0</literal></expr>)</condition> <block pos:start="77:25" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:33">

            <goto pos:start="79:13" pos:end="79:33">goto <name pos:start="79:18" pos:end="79:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <case pos:start="85:5" pos:end="85:18">case <expr pos:start="85:10" pos:end="85:17"><name pos:start="85:10" pos:end="85:17">READ_TOC</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:57"><expr pos:start="87:9" pos:end="87:56"><name pos:start="87:9" pos:end="87:14">buflen</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:56"><name pos:start="87:18" pos:end="87:43">scsi_disk_emulate_read_toc</name><argument_list pos:start="87:44" pos:end="87:56">(<argument pos:start="87:45" pos:end="87:47"><expr pos:start="87:45" pos:end="87:47"><name pos:start="87:45" pos:end="87:47">req</name></expr></argument>, <argument pos:start="87:50" pos:end="87:55"><expr pos:start="87:50" pos:end="87:55"><name pos:start="87:50" pos:end="87:55">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:23">(<expr pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:18">buflen</name> <operator pos:start="89:20" pos:end="89:20">&lt;</operator> <literal type="number" pos:start="89:22" pos:end="89:22">0</literal></expr>)</condition> <block pos:start="89:25" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:33">

            <goto pos:start="91:13" pos:end="91:33">goto <name pos:start="91:18" pos:end="91:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:17">case <expr pos:start="97:10" pos:end="97:16"><name pos:start="97:10" pos:end="97:16">RESERVE</name></expr>:</case>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:32">(<expr pos:start="99:13" pos:end="99:31"><name pos:start="99:13" pos:end="99:27"><name pos:start="99:13" pos:end="99:15">req</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:20">cmd</name><operator pos:start="99:21" pos:end="99:21">.</operator><name pos:start="99:22" pos:end="99:24">buf</name><index pos:start="99:25" pos:end="99:27">[<expr pos:start="99:26" pos:end="99:26"><literal type="number" pos:start="99:26" pos:end="99:26">1</literal></expr>]</index></name> <operator pos:start="99:29" pos:end="99:29">&amp;</operator> <literal type="number" pos:start="99:31" pos:end="99:31">1</literal></expr>)</condition> <block pos:start="99:34" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:33">

            <goto pos:start="101:13" pos:end="101:33">goto <name pos:start="101:18" pos:end="101:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>

    <case pos:start="107:5" pos:end="107:20">case <expr pos:start="107:10" pos:end="107:19"><name pos:start="107:10" pos:end="107:19">RESERVE_10</name></expr>:</case>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:32">(<expr pos:start="109:13" pos:end="109:31"><name pos:start="109:13" pos:end="109:27"><name pos:start="109:13" pos:end="109:15">req</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:20">cmd</name><operator pos:start="109:21" pos:end="109:21">.</operator><name pos:start="109:22" pos:end="109:24">buf</name><index pos:start="109:25" pos:end="109:27">[<expr pos:start="109:26" pos:end="109:26"><literal type="number" pos:start="109:26" pos:end="109:26">1</literal></expr>]</index></name> <operator pos:start="109:29" pos:end="109:29">&amp;</operator> <literal type="number" pos:start="109:31" pos:end="109:31">3</literal></expr>)</condition> <block pos:start="109:34" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:33">

            <goto pos:start="111:13" pos:end="111:33">goto <name pos:start="111:18" pos:end="111:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:17">case <expr pos:start="117:10" pos:end="117:16"><name pos:start="117:10" pos:end="117:16">RELEASE</name></expr>:</case>

        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:32">(<expr pos:start="119:13" pos:end="119:31"><name pos:start="119:13" pos:end="119:27"><name pos:start="119:13" pos:end="119:15">req</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:20">cmd</name><operator pos:start="119:21" pos:end="119:21">.</operator><name pos:start="119:22" pos:end="119:24">buf</name><index pos:start="119:25" pos:end="119:27">[<expr pos:start="119:26" pos:end="119:26"><literal type="number" pos:start="119:26" pos:end="119:26">1</literal></expr>]</index></name> <operator pos:start="119:29" pos:end="119:29">&amp;</operator> <literal type="number" pos:start="119:31" pos:end="119:31">1</literal></expr>)</condition> <block pos:start="119:34" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:33">

            <goto pos:start="121:13" pos:end="121:33">goto <name pos:start="121:18" pos:end="121:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:20">case <expr pos:start="127:10" pos:end="127:19"><name pos:start="127:10" pos:end="127:19">RELEASE_10</name></expr>:</case>

        <if_stmt pos:start="129:9" pos:end="133:9"><if pos:start="129:9" pos:end="133:9">if <condition pos:start="129:12" pos:end="129:32">(<expr pos:start="129:13" pos:end="129:31"><name pos:start="129:13" pos:end="129:27"><name pos:start="129:13" pos:end="129:15">req</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:20">cmd</name><operator pos:start="129:21" pos:end="129:21">.</operator><name pos:start="129:22" pos:end="129:24">buf</name><index pos:start="129:25" pos:end="129:27">[<expr pos:start="129:26" pos:end="129:26"><literal type="number" pos:start="129:26" pos:end="129:26">1</literal></expr>]</index></name> <operator pos:start="129:29" pos:end="129:29">&amp;</operator> <literal type="number" pos:start="129:31" pos:end="129:31">3</literal></expr>)</condition> <block pos:start="129:34" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:33">

            <goto pos:start="131:13" pos:end="131:33">goto <name pos:start="131:18" pos:end="131:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:20">case <expr pos:start="137:10" pos:end="137:19"><name pos:start="137:10" pos:end="137:19">START_STOP</name></expr>:</case>

        <if_stmt pos:start="139:9" pos:end="143:9"><if pos:start="139:9" pos:end="143:9">if <condition pos:start="139:12" pos:end="139:48">(<expr pos:start="139:13" pos:end="139:47"><call pos:start="139:13" pos:end="139:43"><name pos:start="139:13" pos:end="139:40">scsi_disk_emulate_start_stop</name><argument_list pos:start="139:41" pos:end="139:43">(<argument pos:start="139:42" pos:end="139:42"><expr pos:start="139:42" pos:end="139:42"><name pos:start="139:42" pos:end="139:42">r</name></expr></argument>)</argument_list></call> <operator pos:start="139:45" pos:end="139:45">&lt;</operator> <literal type="number" pos:start="139:47" pos:end="139:47">0</literal></expr>)</condition> <block pos:start="139:50" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:22">

            <return pos:start="141:13" pos:end="141:22">return <expr pos:start="141:20" pos:end="141:21"><operator pos:start="141:20" pos:end="141:20">-</operator><literal type="number" pos:start="141:21" pos:end="141:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:30">case <expr pos:start="147:10" pos:end="147:29"><name pos:start="147:10" pos:end="147:29">ALLOW_MEDIUM_REMOVAL</name></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:45"><expr pos:start="149:9" pos:end="149:44"><name pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:22">tray_locked</name></name> <operator pos:start="149:24" pos:end="149:24">=</operator> <name pos:start="149:26" pos:end="149:40"><name pos:start="149:26" pos:end="149:28">req</name><operator pos:start="149:29" pos:end="149:30">-&gt;</operator><name pos:start="149:31" pos:end="149:33">cmd</name><operator pos:start="149:34" pos:end="149:34">.</operator><name pos:start="149:35" pos:end="149:37">buf</name><index pos:start="149:38" pos:end="149:40">[<expr pos:start="149:39" pos:end="149:39"><literal type="number" pos:start="149:39" pos:end="149:39">4</literal></expr>]</index></name> <operator pos:start="149:42" pos:end="149:42">&amp;</operator> <literal type="number" pos:start="149:44" pos:end="149:44">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:63"><expr pos:start="151:9" pos:end="151:62"><call pos:start="151:9" pos:end="151:62"><name pos:start="151:9" pos:end="151:24">bdrv_lock_medium</name><argument_list pos:start="151:25" pos:end="151:62">(<argument pos:start="151:26" pos:end="151:40"><expr pos:start="151:26" pos:end="151:40"><name pos:start="151:26" pos:end="151:40"><name pos:start="151:26" pos:end="151:26">s</name><operator pos:start="151:27" pos:end="151:28">-&gt;</operator><name pos:start="151:29" pos:end="151:32">qdev</name><operator pos:start="151:33" pos:end="151:33">.</operator><name pos:start="151:34" pos:end="151:37">conf</name><operator pos:start="151:38" pos:end="151:38">.</operator><name pos:start="151:39" pos:end="151:40">bs</name></name></expr></argument>, <argument pos:start="151:43" pos:end="151:61"><expr pos:start="151:43" pos:end="151:61"><name pos:start="151:43" pos:end="151:57"><name pos:start="151:43" pos:end="151:45">req</name><operator pos:start="151:46" pos:end="151:47">-&gt;</operator><name pos:start="151:48" pos:end="151:50">cmd</name><operator pos:start="151:51" pos:end="151:51">.</operator><name pos:start="151:52" pos:end="151:54">buf</name><index pos:start="151:55" pos:end="151:57">[<expr pos:start="151:56" pos:end="151:56"><literal type="number" pos:start="151:56" pos:end="151:56">4</literal></expr>]</index></name> <operator pos:start="151:59" pos:end="151:59">&amp;</operator> <literal type="number" pos:start="151:61" pos:end="151:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:26">case <expr pos:start="155:10" pos:end="155:25"><name pos:start="155:10" pos:end="155:25">READ_CAPACITY_10</name></expr>:</case>

        <comment type="block" pos:start="157:9" pos:end="157:61">/* The normal LEN field for this command is zero.  */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:29"><expr pos:start="159:9" pos:end="159:28"><call pos:start="159:9" pos:end="159:28"><name pos:start="159:9" pos:end="159:14">memset</name><argument_list pos:start="159:15" pos:end="159:28">(<argument pos:start="159:16" pos:end="159:21"><expr pos:start="159:16" pos:end="159:21"><name pos:start="159:16" pos:end="159:21">outbuf</name></expr></argument>, <argument pos:start="159:24" pos:end="159:24"><expr pos:start="159:24" pos:end="159:24"><literal type="number" pos:start="159:24" pos:end="159:24">0</literal></expr></argument>, <argument pos:start="159:27" pos:end="159:27"><expr pos:start="159:27" pos:end="159:27"><literal type="number" pos:start="159:27" pos:end="159:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:56"><expr pos:start="161:9" pos:end="161:55"><call pos:start="161:9" pos:end="161:55"><name pos:start="161:9" pos:end="161:25">bdrv_get_geometry</name><argument_list pos:start="161:26" pos:end="161:55">(<argument pos:start="161:27" pos:end="161:41"><expr pos:start="161:27" pos:end="161:41"><name pos:start="161:27" pos:end="161:41"><name pos:start="161:27" pos:end="161:27">s</name><operator pos:start="161:28" pos:end="161:29">-&gt;</operator><name pos:start="161:30" pos:end="161:33">qdev</name><operator pos:start="161:34" pos:end="161:34">.</operator><name pos:start="161:35" pos:end="161:38">conf</name><operator pos:start="161:39" pos:end="161:39">.</operator><name pos:start="161:40" pos:end="161:41">bs</name></name></expr></argument>, <argument pos:start="161:44" pos:end="161:54"><expr pos:start="161:44" pos:end="161:54"><operator pos:start="161:44" pos:end="161:44">&amp;</operator><name pos:start="161:45" pos:end="161:54">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:24">(<expr pos:start="163:13" pos:end="163:23"><operator pos:start="163:13" pos:end="163:13">!</operator><name pos:start="163:14" pos:end="163:23">nb_sectors</name></expr>)</condition> <block pos:start="163:26" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:22">

            <expr_stmt pos:start="165:13" pos:end="165:63"><expr pos:start="165:13" pos:end="165:62"><call pos:start="165:13" pos:end="165:62"><name pos:start="165:13" pos:end="165:32">scsi_check_condition</name><argument_list pos:start="165:33" pos:end="165:62">(<argument pos:start="165:34" pos:end="165:34"><expr pos:start="165:34" pos:end="165:34"><name pos:start="165:34" pos:end="165:34">r</name></expr></argument>, <argument pos:start="165:37" pos:end="165:61"><expr pos:start="165:37" pos:end="165:61"><call pos:start="165:37" pos:end="165:61"><name pos:start="165:37" pos:end="165:46">SENSE_CODE</name><argument_list pos:start="165:47" pos:end="165:61">(<argument pos:start="165:48" pos:end="165:60"><expr pos:start="165:48" pos:end="165:60"><name pos:start="165:48" pos:end="165:60">LUN_NOT_READY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="167:13" pos:end="167:22">return <expr pos:start="167:20" pos:end="167:21"><operator pos:start="167:20" pos:end="167:20">-</operator><literal type="number" pos:start="167:21" pos:end="167:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="171:9" pos:end="175:9"><if pos:start="171:9" pos:end="175:9">if <condition pos:start="171:12" pos:end="171:55">(<expr pos:start="171:13" pos:end="171:54"><operator pos:start="171:13" pos:end="171:13">(</operator><name pos:start="171:14" pos:end="171:28"><name pos:start="171:14" pos:end="171:16">req</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:21">cmd</name><operator pos:start="171:22" pos:end="171:22">.</operator><name pos:start="171:23" pos:end="171:25">buf</name><index pos:start="171:26" pos:end="171:28">[<expr pos:start="171:27" pos:end="171:27"><literal type="number" pos:start="171:27" pos:end="171:27">8</literal></expr>]</index></name> <operator pos:start="171:30" pos:end="171:30">&amp;</operator> <literal type="number" pos:start="171:32" pos:end="171:32">1</literal><operator pos:start="171:33" pos:end="171:33">)</operator> <operator pos:start="171:35" pos:end="171:36">==</operator> <literal type="number" pos:start="171:38" pos:end="171:38">0</literal> <operator pos:start="171:40" pos:end="171:41">&amp;&amp;</operator> <name pos:start="171:43" pos:end="171:54"><name pos:start="171:43" pos:end="171:45">req</name><operator pos:start="171:46" pos:end="171:47">-&gt;</operator><name pos:start="171:48" pos:end="171:50">cmd</name><operator pos:start="171:51" pos:end="171:51">.</operator><name pos:start="171:52" pos:end="171:54">lba</name></name></expr>)</condition> <block pos:start="171:57" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:33">

            <goto pos:start="173:13" pos:end="173:33">goto <name pos:start="173:18" pos:end="173:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:46"><expr pos:start="177:9" pos:end="177:45"><name pos:start="177:9" pos:end="177:18">nb_sectors</name> <operator pos:start="177:20" pos:end="177:21">/=</operator> <name pos:start="177:23" pos:end="177:39"><name pos:start="177:23" pos:end="177:23">s</name><operator pos:start="177:24" pos:end="177:25">-&gt;</operator><name pos:start="177:26" pos:end="177:29">qdev</name><operator pos:start="177:30" pos:end="177:30">.</operator><name pos:start="177:31" pos:end="177:39">blocksize</name></name> <operator pos:start="177:41" pos:end="177:41">/</operator> <literal type="number" pos:start="177:43" pos:end="177:45">512</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="179:9" pos:end="179:64">/* Returned value is the address of the last sector.  */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:21"><expr pos:start="181:9" pos:end="181:20"><name pos:start="181:9" pos:end="181:18">nb_sectors</name><operator pos:start="181:19" pos:end="181:20">--</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="183:9" pos:end="183:67">/* Remember the new size for read/write sanity checking. */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:37"><expr pos:start="185:9" pos:end="185:36"><name pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:15">qdev</name><operator pos:start="185:16" pos:end="185:16">.</operator><name pos:start="185:17" pos:end="185:23">max_lba</name></name> <operator pos:start="185:25" pos:end="185:25">=</operator> <name pos:start="185:27" pos:end="185:36">nb_sectors</name></expr>;</expr_stmt>

        <comment type="block" pos:start="187:9" pos:end="187:68">/* Clip to 2TB, instead of returning capacity modulo 2TB. */</comment>

        <if_stmt pos:start="189:9" pos:end="193:9"><if pos:start="189:9" pos:end="193:9">if <condition pos:start="189:12" pos:end="189:36">(<expr pos:start="189:13" pos:end="189:35"><name pos:start="189:13" pos:end="189:22">nb_sectors</name> <operator pos:start="189:24" pos:end="189:24">&gt;</operator> <name pos:start="189:26" pos:end="189:35">UINT32_MAX</name></expr>)</condition> <block pos:start="189:38" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:36">

            <expr_stmt pos:start="191:13" pos:end="191:36"><expr pos:start="191:13" pos:end="191:35"><name pos:start="191:13" pos:end="191:22">nb_sectors</name> <operator pos:start="191:24" pos:end="191:24">=</operator> <name pos:start="191:26" pos:end="191:35">UINT32_MAX</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:46"><expr pos:start="195:9" pos:end="195:45"><name pos:start="195:9" pos:end="195:17"><name pos:start="195:9" pos:end="195:14">outbuf</name><index pos:start="195:15" pos:end="195:17">[<expr pos:start="195:16" pos:end="195:16"><literal type="number" pos:start="195:16" pos:end="195:16">0</literal></expr>]</index></name> <operator pos:start="195:19" pos:end="195:19">=</operator> <operator pos:start="195:21" pos:end="195:21">(</operator><name pos:start="195:22" pos:end="195:31">nb_sectors</name> <operator pos:start="195:33" pos:end="195:34">&gt;&gt;</operator> <literal type="number" pos:start="195:36" pos:end="195:37">24</literal><operator pos:start="195:38" pos:end="195:38">)</operator> <operator pos:start="195:40" pos:end="195:40">&amp;</operator> <literal type="number" pos:start="195:42" pos:end="195:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:46"><expr pos:start="197:9" pos:end="197:45"><name pos:start="197:9" pos:end="197:17"><name pos:start="197:9" pos:end="197:14">outbuf</name><index pos:start="197:15" pos:end="197:17">[<expr pos:start="197:16" pos:end="197:16"><literal type="number" pos:start="197:16" pos:end="197:16">1</literal></expr>]</index></name> <operator pos:start="197:19" pos:end="197:19">=</operator> <operator pos:start="197:21" pos:end="197:21">(</operator><name pos:start="197:22" pos:end="197:31">nb_sectors</name> <operator pos:start="197:33" pos:end="197:34">&gt;&gt;</operator> <literal type="number" pos:start="197:36" pos:end="197:37">16</literal><operator pos:start="197:38" pos:end="197:38">)</operator> <operator pos:start="197:40" pos:end="197:40">&amp;</operator> <literal type="number" pos:start="197:42" pos:end="197:45">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:45"><expr pos:start="199:9" pos:end="199:44"><name pos:start="199:9" pos:end="199:17"><name pos:start="199:9" pos:end="199:14">outbuf</name><index pos:start="199:15" pos:end="199:17">[<expr pos:start="199:16" pos:end="199:16"><literal type="number" pos:start="199:16" pos:end="199:16">2</literal></expr>]</index></name> <operator pos:start="199:19" pos:end="199:19">=</operator> <operator pos:start="199:21" pos:end="199:21">(</operator><name pos:start="199:22" pos:end="199:31">nb_sectors</name> <operator pos:start="199:33" pos:end="199:34">&gt;&gt;</operator> <literal type="number" pos:start="199:36" pos:end="199:36">8</literal><operator pos:start="199:37" pos:end="199:37">)</operator> <operator pos:start="199:39" pos:end="199:39">&amp;</operator> <literal type="number" pos:start="199:41" pos:end="199:44">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:38"><expr pos:start="201:9" pos:end="201:37"><name pos:start="201:9" pos:end="201:17"><name pos:start="201:9" pos:end="201:14">outbuf</name><index pos:start="201:15" pos:end="201:17">[<expr pos:start="201:16" pos:end="201:16"><literal type="number" pos:start="201:16" pos:end="201:16">3</literal></expr>]</index></name> <operator pos:start="201:19" pos:end="201:19">=</operator> <name pos:start="201:21" pos:end="201:30">nb_sectors</name> <operator pos:start="201:32" pos:end="201:32">&amp;</operator> <literal type="number" pos:start="201:34" pos:end="201:37">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:22"><expr pos:start="203:9" pos:end="203:21"><name pos:start="203:9" pos:end="203:17"><name pos:start="203:9" pos:end="203:14">outbuf</name><index pos:start="203:15" pos:end="203:17">[<expr pos:start="203:16" pos:end="203:16"><literal type="number" pos:start="203:16" pos:end="203:16">4</literal></expr>]</index></name> <operator pos:start="203:19" pos:end="203:19">=</operator> <literal type="number" pos:start="203:21" pos:end="203:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:22"><expr pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:17"><name pos:start="205:9" pos:end="205:14">outbuf</name><index pos:start="205:15" pos:end="205:17">[<expr pos:start="205:16" pos:end="205:16"><literal type="number" pos:start="205:16" pos:end="205:16">5</literal></expr>]</index></name> <operator pos:start="205:19" pos:end="205:19">=</operator> <literal type="number" pos:start="205:21" pos:end="205:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:43"><expr pos:start="207:9" pos:end="207:42"><name pos:start="207:9" pos:end="207:17"><name pos:start="207:9" pos:end="207:14">outbuf</name><index pos:start="207:15" pos:end="207:17">[<expr pos:start="207:16" pos:end="207:16"><literal type="number" pos:start="207:16" pos:end="207:16">6</literal></expr>]</index></name> <operator pos:start="207:19" pos:end="207:19">=</operator> <name pos:start="207:21" pos:end="207:37"><name pos:start="207:21" pos:end="207:21">s</name><operator pos:start="207:22" pos:end="207:23">-&gt;</operator><name pos:start="207:24" pos:end="207:27">qdev</name><operator pos:start="207:28" pos:end="207:28">.</operator><name pos:start="207:29" pos:end="207:37">blocksize</name></name> <operator pos:start="207:39" pos:end="207:40">&gt;&gt;</operator> <literal type="number" pos:start="207:42" pos:end="207:42">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:22"><expr pos:start="209:9" pos:end="209:21"><name pos:start="209:9" pos:end="209:17"><name pos:start="209:9" pos:end="209:14">outbuf</name><index pos:start="209:15" pos:end="209:17">[<expr pos:start="209:16" pos:end="209:16"><literal type="number" pos:start="209:16" pos:end="209:16">7</literal></expr>]</index></name> <operator pos:start="209:19" pos:end="209:19">=</operator> <literal type="number" pos:start="209:21" pos:end="209:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:19"><expr pos:start="211:9" pos:end="211:18"><name pos:start="211:9" pos:end="211:14">buflen</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <literal type="number" pos:start="211:18" pos:end="211:18">8</literal></expr>;</expr_stmt>

        <break pos:start="213:9" pos:end="213:14">break;</break>

    <case pos:start="215:5" pos:end="215:23">case <expr pos:start="215:10" pos:end="215:22"><name pos:start="215:10" pos:end="215:22">REQUEST_SENSE</name></expr>:</case>

        <comment type="block" pos:start="217:9" pos:end="217:38">/* Just return "NO SENSE".  */</comment>

        <expr_stmt pos:start="219:9" pos:end="221:62"><expr pos:start="219:9" pos:end="221:61"><name pos:start="219:9" pos:end="219:14">buflen</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <call pos:start="219:18" pos:end="221:61"><name pos:start="219:18" pos:end="219:33">scsi_build_sense</name><argument_list pos:start="219:34" pos:end="221:61">(<argument pos:start="219:35" pos:end="219:38"><expr pos:start="219:35" pos:end="219:38"><name pos:start="219:35" pos:end="219:38">NULL</name></expr></argument>, <argument pos:start="219:41" pos:end="219:41"><expr pos:start="219:41" pos:end="219:41"><literal type="number" pos:start="219:41" pos:end="219:41">0</literal></expr></argument>, <argument pos:start="219:44" pos:end="219:49"><expr pos:start="219:44" pos:end="219:49"><name pos:start="219:44" pos:end="219:49">outbuf</name></expr></argument>, <argument pos:start="219:52" pos:end="219:60"><expr pos:start="219:52" pos:end="219:60"><name pos:start="219:52" pos:end="219:60"><name pos:start="219:52" pos:end="219:52">r</name><operator pos:start="219:53" pos:end="219:54">-&gt;</operator><name pos:start="219:55" pos:end="219:60">buflen</name></name></expr></argument>,

                                  <argument pos:start="221:35" pos:end="221:60"><expr pos:start="221:35" pos:end="221:60"><operator pos:start="221:35" pos:end="221:35">(</operator><name pos:start="221:36" pos:end="221:50"><name pos:start="221:36" pos:end="221:38">req</name><operator pos:start="221:39" pos:end="221:40">-&gt;</operator><name pos:start="221:41" pos:end="221:43">cmd</name><operator pos:start="221:44" pos:end="221:44">.</operator><name pos:start="221:45" pos:end="221:47">buf</name><index pos:start="221:48" pos:end="221:50">[<expr pos:start="221:49" pos:end="221:49"><literal type="number" pos:start="221:49" pos:end="221:49">1</literal></expr>]</index></name> <operator pos:start="221:52" pos:end="221:52">&amp;</operator> <literal type="number" pos:start="221:54" pos:end="221:54">1</literal><operator pos:start="221:55" pos:end="221:55">)</operator> <operator pos:start="221:57" pos:end="221:58">==</operator> <literal type="number" pos:start="221:60" pos:end="221:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="223:9" pos:end="223:14">break;</break>

    <case pos:start="225:5" pos:end="225:26">case <expr pos:start="225:10" pos:end="225:25"><name pos:start="225:10" pos:end="225:25">MECHANISM_STATUS</name></expr>:</case>

        <expr_stmt pos:start="227:9" pos:end="227:58"><expr pos:start="227:9" pos:end="227:57"><name pos:start="227:9" pos:end="227:14">buflen</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <call pos:start="227:18" pos:end="227:57"><name pos:start="227:18" pos:end="227:46">scsi_emulate_mechanism_status</name><argument_list pos:start="227:47" pos:end="227:57">(<argument pos:start="227:48" pos:end="227:48"><expr pos:start="227:48" pos:end="227:48"><name pos:start="227:48" pos:end="227:48">s</name></expr></argument>, <argument pos:start="227:51" pos:end="227:56"><expr pos:start="227:51" pos:end="227:56"><name pos:start="227:51" pos:end="227:56">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="229:9" pos:end="233:9"><if pos:start="229:9" pos:end="233:9">if <condition pos:start="229:12" pos:end="229:23">(<expr pos:start="229:13" pos:end="229:22"><name pos:start="229:13" pos:end="229:18">buflen</name> <operator pos:start="229:20" pos:end="229:20">&lt;</operator> <literal type="number" pos:start="229:22" pos:end="229:22">0</literal></expr>)</condition> <block pos:start="229:25" pos:end="233:9">{<block_content pos:start="231:13" pos:end="231:33">

            <goto pos:start="231:13" pos:end="231:33">goto <name pos:start="231:18" pos:end="231:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="235:9" pos:end="235:14">break;</break>

    <case pos:start="237:5" pos:end="237:27">case <expr pos:start="237:10" pos:end="237:26"><name pos:start="237:10" pos:end="237:26">GET_CONFIGURATION</name></expr>:</case>

        <expr_stmt pos:start="239:9" pos:end="239:51"><expr pos:start="239:9" pos:end="239:50"><name pos:start="239:9" pos:end="239:14">buflen</name> <operator pos:start="239:16" pos:end="239:16">=</operator> <call pos:start="239:18" pos:end="239:50"><name pos:start="239:18" pos:end="239:39">scsi_get_configuration</name><argument_list pos:start="239:40" pos:end="239:50">(<argument pos:start="239:41" pos:end="239:41"><expr pos:start="239:41" pos:end="239:41"><name pos:start="239:41" pos:end="239:41">s</name></expr></argument>, <argument pos:start="239:44" pos:end="239:49"><expr pos:start="239:44" pos:end="239:49"><name pos:start="239:44" pos:end="239:49">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="241:9" pos:end="245:9"><if pos:start="241:9" pos:end="245:9">if <condition pos:start="241:12" pos:end="241:23">(<expr pos:start="241:13" pos:end="241:22"><name pos:start="241:13" pos:end="241:18">buflen</name> <operator pos:start="241:20" pos:end="241:20">&lt;</operator> <literal type="number" pos:start="241:22" pos:end="241:22">0</literal></expr>)</condition> <block pos:start="241:25" pos:end="245:9">{<block_content pos:start="243:13" pos:end="243:33">

            <goto pos:start="243:13" pos:end="243:33">goto <name pos:start="243:18" pos:end="243:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="247:9" pos:end="247:14">break;</break>

    <case pos:start="249:5" pos:end="249:39">case <expr pos:start="249:10" pos:end="249:38"><name pos:start="249:10" pos:end="249:38">GET_EVENT_STATUS_NOTIFICATION</name></expr>:</case>

        <expr_stmt pos:start="251:9" pos:end="251:66"><expr pos:start="251:9" pos:end="251:65"><name pos:start="251:9" pos:end="251:14">buflen</name> <operator pos:start="251:16" pos:end="251:16">=</operator> <call pos:start="251:18" pos:end="251:65"><name pos:start="251:18" pos:end="251:51">scsi_get_event_status_notification</name><argument_list pos:start="251:52" pos:end="251:65">(<argument pos:start="251:53" pos:end="251:53"><expr pos:start="251:53" pos:end="251:53"><name pos:start="251:53" pos:end="251:53">s</name></expr></argument>, <argument pos:start="251:56" pos:end="251:56"><expr pos:start="251:56" pos:end="251:56"><name pos:start="251:56" pos:end="251:56">r</name></expr></argument>, <argument pos:start="251:59" pos:end="251:64"><expr pos:start="251:59" pos:end="251:64"><name pos:start="251:59" pos:end="251:64">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="257:9"><if pos:start="253:9" pos:end="257:9">if <condition pos:start="253:12" pos:end="253:23">(<expr pos:start="253:13" pos:end="253:22"><name pos:start="253:13" pos:end="253:18">buflen</name> <operator pos:start="253:20" pos:end="253:20">&lt;</operator> <literal type="number" pos:start="253:22" pos:end="253:22">0</literal></expr>)</condition> <block pos:start="253:25" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:33">

            <goto pos:start="255:13" pos:end="255:33">goto <name pos:start="255:18" pos:end="255:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="259:9" pos:end="259:14">break;</break>

    <case pos:start="261:5" pos:end="261:28">case <expr pos:start="261:10" pos:end="261:27"><name pos:start="261:10" pos:end="261:27">READ_DVD_STRUCTURE</name></expr>:</case>

        <expr_stmt pos:start="263:9" pos:end="263:55"><expr pos:start="263:9" pos:end="263:54"><name pos:start="263:9" pos:end="263:14">buflen</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <call pos:start="263:18" pos:end="263:54"><name pos:start="263:18" pos:end="263:40">scsi_read_dvd_structure</name><argument_list pos:start="263:41" pos:end="263:54">(<argument pos:start="263:42" pos:end="263:42"><expr pos:start="263:42" pos:end="263:42"><name pos:start="263:42" pos:end="263:42">s</name></expr></argument>, <argument pos:start="263:45" pos:end="263:45"><expr pos:start="263:45" pos:end="263:45"><name pos:start="263:45" pos:end="263:45">r</name></expr></argument>, <argument pos:start="263:48" pos:end="263:53"><expr pos:start="263:48" pos:end="263:53"><name pos:start="263:48" pos:end="263:53">outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="269:9"><if pos:start="265:9" pos:end="269:9">if <condition pos:start="265:12" pos:end="265:23">(<expr pos:start="265:13" pos:end="265:22"><name pos:start="265:13" pos:end="265:18">buflen</name> <operator pos:start="265:20" pos:end="265:20">&lt;</operator> <literal type="number" pos:start="265:22" pos:end="265:22">0</literal></expr>)</condition> <block pos:start="265:25" pos:end="269:9">{<block_content pos:start="267:13" pos:end="267:33">

            <goto pos:start="267:13" pos:end="267:33">goto <name pos:start="267:18" pos:end="267:32">illegal_request</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="271:9" pos:end="271:14">break;</break>

    <case pos:start="273:5" pos:end="273:30">case <expr pos:start="273:10" pos:end="273:29"><name pos:start="273:10" pos:end="273:29">SERVICE_ACTION_IN_16</name></expr>:</case>

        <comment type="block" pos:start="275:9" pos:end="275:44">/* Service Action In subcommands. */</comment>

        <if_stmt pos:start="277:9" pos:end="355:9"><if pos:start="277:9" pos:end="355:9">if <condition pos:start="277:12" pos:end="277:59">(<expr pos:start="277:13" pos:end="277:58"><operator pos:start="277:13" pos:end="277:13">(</operator><name pos:start="277:14" pos:end="277:28"><name pos:start="277:14" pos:end="277:16">req</name><operator pos:start="277:17" pos:end="277:18">-&gt;</operator><name pos:start="277:19" pos:end="277:21">cmd</name><operator pos:start="277:22" pos:end="277:22">.</operator><name pos:start="277:23" pos:end="277:25">buf</name><index pos:start="277:26" pos:end="277:28">[<expr pos:start="277:27" pos:end="277:27"><literal type="number" pos:start="277:27" pos:end="277:27">1</literal></expr>]</index></name> <operator pos:start="277:30" pos:end="277:30">&amp;</operator> <literal type="number" pos:start="277:32" pos:end="277:33">31</literal><operator pos:start="277:34" pos:end="277:34">)</operator> <operator pos:start="277:36" pos:end="277:37">==</operator> <name pos:start="277:39" pos:end="277:58">SAI_READ_CAPACITY_16</name></expr>)</condition> <block pos:start="277:61" pos:end="355:9">{<block_content pos:start="279:13" pos:end="353:18">

            <expr_stmt pos:start="279:13" pos:end="279:47"><expr pos:start="279:13" pos:end="279:46"><call pos:start="279:13" pos:end="279:46"><name pos:start="279:13" pos:end="279:19">DPRINTF</name><argument_list pos:start="279:20" pos:end="279:46">(<argument pos:start="279:21" pos:end="279:45"><expr pos:start="279:21" pos:end="279:45"><literal type="string" pos:start="279:21" pos:end="279:45">"SAI READ CAPACITY(16)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:45"><expr pos:start="281:13" pos:end="281:44"><call pos:start="281:13" pos:end="281:44"><name pos:start="281:13" pos:end="281:18">memset</name><argument_list pos:start="281:19" pos:end="281:44">(<argument pos:start="281:20" pos:end="281:25"><expr pos:start="281:20" pos:end="281:25"><name pos:start="281:20" pos:end="281:25">outbuf</name></expr></argument>, <argument pos:start="281:28" pos:end="281:28"><expr pos:start="281:28" pos:end="281:28"><literal type="number" pos:start="281:28" pos:end="281:28">0</literal></expr></argument>, <argument pos:start="281:31" pos:end="281:43"><expr pos:start="281:31" pos:end="281:43"><name pos:start="281:31" pos:end="281:43"><name pos:start="281:31" pos:end="281:33">req</name><operator pos:start="281:34" pos:end="281:35">-&gt;</operator><name pos:start="281:36" pos:end="281:38">cmd</name><operator pos:start="281:39" pos:end="281:39">.</operator><name pos:start="281:40" pos:end="281:43">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:60"><expr pos:start="283:13" pos:end="283:59"><call pos:start="283:13" pos:end="283:59"><name pos:start="283:13" pos:end="283:29">bdrv_get_geometry</name><argument_list pos:start="283:30" pos:end="283:59">(<argument pos:start="283:31" pos:end="283:45"><expr pos:start="283:31" pos:end="283:45"><name pos:start="283:31" pos:end="283:45"><name pos:start="283:31" pos:end="283:31">s</name><operator pos:start="283:32" pos:end="283:33">-&gt;</operator><name pos:start="283:34" pos:end="283:37">qdev</name><operator pos:start="283:38" pos:end="283:38">.</operator><name pos:start="283:39" pos:end="283:42">conf</name><operator pos:start="283:43" pos:end="283:43">.</operator><name pos:start="283:44" pos:end="283:45">bs</name></name></expr></argument>, <argument pos:start="283:48" pos:end="283:58"><expr pos:start="283:48" pos:end="283:58"><operator pos:start="283:48" pos:end="283:48">&amp;</operator><name pos:start="283:49" pos:end="283:58">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="285:13" pos:end="291:13"><if pos:start="285:13" pos:end="291:13">if <condition pos:start="285:16" pos:end="285:28">(<expr pos:start="285:17" pos:end="285:27"><operator pos:start="285:17" pos:end="285:17">!</operator><name pos:start="285:18" pos:end="285:27">nb_sectors</name></expr>)</condition> <block pos:start="285:30" pos:end="291:13">{<block_content pos:start="287:17" pos:end="289:26">

                <expr_stmt pos:start="287:17" pos:end="287:67"><expr pos:start="287:17" pos:end="287:66"><call pos:start="287:17" pos:end="287:66"><name pos:start="287:17" pos:end="287:36">scsi_check_condition</name><argument_list pos:start="287:37" pos:end="287:66">(<argument pos:start="287:38" pos:end="287:38"><expr pos:start="287:38" pos:end="287:38"><name pos:start="287:38" pos:end="287:38">r</name></expr></argument>, <argument pos:start="287:41" pos:end="287:65"><expr pos:start="287:41" pos:end="287:65"><call pos:start="287:41" pos:end="287:65"><name pos:start="287:41" pos:end="287:50">SENSE_CODE</name><argument_list pos:start="287:51" pos:end="287:65">(<argument pos:start="287:52" pos:end="287:64"><expr pos:start="287:52" pos:end="287:64"><name pos:start="287:52" pos:end="287:64">LUN_NOT_READY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="289:17" pos:end="289:26">return <expr pos:start="289:24" pos:end="289:25"><operator pos:start="289:24" pos:end="289:24">-</operator><literal type="number" pos:start="289:25" pos:end="289:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="293:13" pos:end="297:13"><if pos:start="293:13" pos:end="297:13">if <condition pos:start="293:16" pos:end="293:60">(<expr pos:start="293:17" pos:end="293:59"><operator pos:start="293:17" pos:end="293:17">(</operator><name pos:start="293:18" pos:end="293:33"><name pos:start="293:18" pos:end="293:20">req</name><operator pos:start="293:21" pos:end="293:22">-&gt;</operator><name pos:start="293:23" pos:end="293:25">cmd</name><operator pos:start="293:26" pos:end="293:26">.</operator><name pos:start="293:27" pos:end="293:29">buf</name><index pos:start="293:30" pos:end="293:33">[<expr pos:start="293:31" pos:end="293:32"><literal type="number" pos:start="293:31" pos:end="293:32">14</literal></expr>]</index></name> <operator pos:start="293:35" pos:end="293:35">&amp;</operator> <literal type="number" pos:start="293:37" pos:end="293:37">1</literal><operator pos:start="293:38" pos:end="293:38">)</operator> <operator pos:start="293:40" pos:end="293:41">==</operator> <literal type="number" pos:start="293:43" pos:end="293:43">0</literal> <operator pos:start="293:45" pos:end="293:46">&amp;&amp;</operator> <name pos:start="293:48" pos:end="293:59"><name pos:start="293:48" pos:end="293:50">req</name><operator pos:start="293:51" pos:end="293:52">-&gt;</operator><name pos:start="293:53" pos:end="293:55">cmd</name><operator pos:start="293:56" pos:end="293:56">.</operator><name pos:start="293:57" pos:end="293:59">lba</name></name></expr>)</condition> <block pos:start="293:62" pos:end="297:13">{<block_content pos:start="295:17" pos:end="295:37">

                <goto pos:start="295:17" pos:end="295:37">goto <name pos:start="295:22" pos:end="295:36">illegal_request</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:50"><expr pos:start="299:13" pos:end="299:49"><name pos:start="299:13" pos:end="299:22">nb_sectors</name> <operator pos:start="299:24" pos:end="299:25">/=</operator> <name pos:start="299:27" pos:end="299:43"><name pos:start="299:27" pos:end="299:27">s</name><operator pos:start="299:28" pos:end="299:29">-&gt;</operator><name pos:start="299:30" pos:end="299:33">qdev</name><operator pos:start="299:34" pos:end="299:34">.</operator><name pos:start="299:35" pos:end="299:43">blocksize</name></name> <operator pos:start="299:45" pos:end="299:45">/</operator> <literal type="number" pos:start="299:47" pos:end="299:49">512</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="301:13" pos:end="301:68">/* Returned value is the address of the last sector.  */</comment>

            <expr_stmt pos:start="303:13" pos:end="303:25"><expr pos:start="303:13" pos:end="303:24"><name pos:start="303:13" pos:end="303:22">nb_sectors</name><operator pos:start="303:23" pos:end="303:24">--</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="305:13" pos:end="305:71">/* Remember the new size for read/write sanity checking. */</comment>

            <expr_stmt pos:start="307:13" pos:end="307:41"><expr pos:start="307:13" pos:end="307:40"><name pos:start="307:13" pos:end="307:27"><name pos:start="307:13" pos:end="307:13">s</name><operator pos:start="307:14" pos:end="307:15">-&gt;</operator><name pos:start="307:16" pos:end="307:19">qdev</name><operator pos:start="307:20" pos:end="307:20">.</operator><name pos:start="307:21" pos:end="307:27">max_lba</name></name> <operator pos:start="307:29" pos:end="307:29">=</operator> <name pos:start="307:31" pos:end="307:40">nb_sectors</name></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:50"><expr pos:start="309:13" pos:end="309:49"><name pos:start="309:13" pos:end="309:21"><name pos:start="309:13" pos:end="309:18">outbuf</name><index pos:start="309:19" pos:end="309:21">[<expr pos:start="309:20" pos:end="309:20"><literal type="number" pos:start="309:20" pos:end="309:20">0</literal></expr>]</index></name> <operator pos:start="309:23" pos:end="309:23">=</operator> <operator pos:start="309:25" pos:end="309:25">(</operator><name pos:start="309:26" pos:end="309:35">nb_sectors</name> <operator pos:start="309:37" pos:end="309:38">&gt;&gt;</operator> <literal type="number" pos:start="309:40" pos:end="309:41">56</literal><operator pos:start="309:42" pos:end="309:42">)</operator> <operator pos:start="309:44" pos:end="309:44">&amp;</operator> <literal type="number" pos:start="309:46" pos:end="309:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:50"><expr pos:start="311:13" pos:end="311:49"><name pos:start="311:13" pos:end="311:21"><name pos:start="311:13" pos:end="311:18">outbuf</name><index pos:start="311:19" pos:end="311:21">[<expr pos:start="311:20" pos:end="311:20"><literal type="number" pos:start="311:20" pos:end="311:20">1</literal></expr>]</index></name> <operator pos:start="311:23" pos:end="311:23">=</operator> <operator pos:start="311:25" pos:end="311:25">(</operator><name pos:start="311:26" pos:end="311:35">nb_sectors</name> <operator pos:start="311:37" pos:end="311:38">&gt;&gt;</operator> <literal type="number" pos:start="311:40" pos:end="311:41">48</literal><operator pos:start="311:42" pos:end="311:42">)</operator> <operator pos:start="311:44" pos:end="311:44">&amp;</operator> <literal type="number" pos:start="311:46" pos:end="311:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:50"><expr pos:start="313:13" pos:end="313:49"><name pos:start="313:13" pos:end="313:21"><name pos:start="313:13" pos:end="313:18">outbuf</name><index pos:start="313:19" pos:end="313:21">[<expr pos:start="313:20" pos:end="313:20"><literal type="number" pos:start="313:20" pos:end="313:20">2</literal></expr>]</index></name> <operator pos:start="313:23" pos:end="313:23">=</operator> <operator pos:start="313:25" pos:end="313:25">(</operator><name pos:start="313:26" pos:end="313:35">nb_sectors</name> <operator pos:start="313:37" pos:end="313:38">&gt;&gt;</operator> <literal type="number" pos:start="313:40" pos:end="313:41">40</literal><operator pos:start="313:42" pos:end="313:42">)</operator> <operator pos:start="313:44" pos:end="313:44">&amp;</operator> <literal type="number" pos:start="313:46" pos:end="313:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:50"><expr pos:start="315:13" pos:end="315:49"><name pos:start="315:13" pos:end="315:21"><name pos:start="315:13" pos:end="315:18">outbuf</name><index pos:start="315:19" pos:end="315:21">[<expr pos:start="315:20" pos:end="315:20"><literal type="number" pos:start="315:20" pos:end="315:20">3</literal></expr>]</index></name> <operator pos:start="315:23" pos:end="315:23">=</operator> <operator pos:start="315:25" pos:end="315:25">(</operator><name pos:start="315:26" pos:end="315:35">nb_sectors</name> <operator pos:start="315:37" pos:end="315:38">&gt;&gt;</operator> <literal type="number" pos:start="315:40" pos:end="315:41">32</literal><operator pos:start="315:42" pos:end="315:42">)</operator> <operator pos:start="315:44" pos:end="315:44">&amp;</operator> <literal type="number" pos:start="315:46" pos:end="315:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:50"><expr pos:start="317:13" pos:end="317:49"><name pos:start="317:13" pos:end="317:21"><name pos:start="317:13" pos:end="317:18">outbuf</name><index pos:start="317:19" pos:end="317:21">[<expr pos:start="317:20" pos:end="317:20"><literal type="number" pos:start="317:20" pos:end="317:20">4</literal></expr>]</index></name> <operator pos:start="317:23" pos:end="317:23">=</operator> <operator pos:start="317:25" pos:end="317:25">(</operator><name pos:start="317:26" pos:end="317:35">nb_sectors</name> <operator pos:start="317:37" pos:end="317:38">&gt;&gt;</operator> <literal type="number" pos:start="317:40" pos:end="317:41">24</literal><operator pos:start="317:42" pos:end="317:42">)</operator> <operator pos:start="317:44" pos:end="317:44">&amp;</operator> <literal type="number" pos:start="317:46" pos:end="317:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:50"><expr pos:start="319:13" pos:end="319:49"><name pos:start="319:13" pos:end="319:21"><name pos:start="319:13" pos:end="319:18">outbuf</name><index pos:start="319:19" pos:end="319:21">[<expr pos:start="319:20" pos:end="319:20"><literal type="number" pos:start="319:20" pos:end="319:20">5</literal></expr>]</index></name> <operator pos:start="319:23" pos:end="319:23">=</operator> <operator pos:start="319:25" pos:end="319:25">(</operator><name pos:start="319:26" pos:end="319:35">nb_sectors</name> <operator pos:start="319:37" pos:end="319:38">&gt;&gt;</operator> <literal type="number" pos:start="319:40" pos:end="319:41">16</literal><operator pos:start="319:42" pos:end="319:42">)</operator> <operator pos:start="319:44" pos:end="319:44">&amp;</operator> <literal type="number" pos:start="319:46" pos:end="319:49">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:49"><expr pos:start="321:13" pos:end="321:48"><name pos:start="321:13" pos:end="321:21"><name pos:start="321:13" pos:end="321:18">outbuf</name><index pos:start="321:19" pos:end="321:21">[<expr pos:start="321:20" pos:end="321:20"><literal type="number" pos:start="321:20" pos:end="321:20">6</literal></expr>]</index></name> <operator pos:start="321:23" pos:end="321:23">=</operator> <operator pos:start="321:25" pos:end="321:25">(</operator><name pos:start="321:26" pos:end="321:35">nb_sectors</name> <operator pos:start="321:37" pos:end="321:38">&gt;&gt;</operator> <literal type="number" pos:start="321:40" pos:end="321:40">8</literal><operator pos:start="321:41" pos:end="321:41">)</operator> <operator pos:start="321:43" pos:end="321:43">&amp;</operator> <literal type="number" pos:start="321:45" pos:end="321:48">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="323:42"><expr pos:start="323:13" pos:end="323:41"><name pos:start="323:13" pos:end="323:21"><name pos:start="323:13" pos:end="323:18">outbuf</name><index pos:start="323:19" pos:end="323:21">[<expr pos:start="323:20" pos:end="323:20"><literal type="number" pos:start="323:20" pos:end="323:20">7</literal></expr>]</index></name> <operator pos:start="323:23" pos:end="323:23">=</operator> <name pos:start="323:25" pos:end="323:34">nb_sectors</name> <operator pos:start="323:36" pos:end="323:36">&amp;</operator> <literal type="number" pos:start="323:38" pos:end="323:41">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="325:13" pos:end="325:26"><expr pos:start="325:13" pos:end="325:25"><name pos:start="325:13" pos:end="325:21"><name pos:start="325:13" pos:end="325:18">outbuf</name><index pos:start="325:19" pos:end="325:21">[<expr pos:start="325:20" pos:end="325:20"><literal type="number" pos:start="325:20" pos:end="325:20">8</literal></expr>]</index></name> <operator pos:start="325:23" pos:end="325:23">=</operator> <literal type="number" pos:start="325:25" pos:end="325:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:26"><expr pos:start="327:13" pos:end="327:25"><name pos:start="327:13" pos:end="327:21"><name pos:start="327:13" pos:end="327:18">outbuf</name><index pos:start="327:19" pos:end="327:21">[<expr pos:start="327:20" pos:end="327:20"><literal type="number" pos:start="327:20" pos:end="327:20">9</literal></expr>]</index></name> <operator pos:start="327:23" pos:end="327:23">=</operator> <literal type="number" pos:start="327:25" pos:end="327:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:48"><expr pos:start="329:13" pos:end="329:47"><name pos:start="329:13" pos:end="329:22"><name pos:start="329:13" pos:end="329:18">outbuf</name><index pos:start="329:19" pos:end="329:22">[<expr pos:start="329:20" pos:end="329:21"><literal type="number" pos:start="329:20" pos:end="329:21">10</literal></expr>]</index></name> <operator pos:start="329:24" pos:end="329:24">=</operator> <name pos:start="329:26" pos:end="329:42"><name pos:start="329:26" pos:end="329:26">s</name><operator pos:start="329:27" pos:end="329:28">-&gt;</operator><name pos:start="329:29" pos:end="329:32">qdev</name><operator pos:start="329:33" pos:end="329:33">.</operator><name pos:start="329:34" pos:end="329:42">blocksize</name></name> <operator pos:start="329:44" pos:end="329:45">&gt;&gt;</operator> <literal type="number" pos:start="329:47" pos:end="329:47">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:27"><expr pos:start="331:13" pos:end="331:26"><name pos:start="331:13" pos:end="331:22"><name pos:start="331:13" pos:end="331:18">outbuf</name><index pos:start="331:19" pos:end="331:22">[<expr pos:start="331:20" pos:end="331:21"><literal type="number" pos:start="331:20" pos:end="331:21">11</literal></expr>]</index></name> <operator pos:start="331:24" pos:end="331:24">=</operator> <literal type="number" pos:start="331:26" pos:end="331:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:27"><expr pos:start="333:13" pos:end="333:26"><name pos:start="333:13" pos:end="333:22"><name pos:start="333:13" pos:end="333:18">outbuf</name><index pos:start="333:19" pos:end="333:22">[<expr pos:start="333:20" pos:end="333:21"><literal type="number" pos:start="333:20" pos:end="333:21">12</literal></expr>]</index></name> <operator pos:start="333:24" pos:end="333:24">=</operator> <literal type="number" pos:start="333:26" pos:end="333:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:63"><expr pos:start="335:13" pos:end="335:62"><name pos:start="335:13" pos:end="335:22"><name pos:start="335:13" pos:end="335:18">outbuf</name><index pos:start="335:19" pos:end="335:22">[<expr pos:start="335:20" pos:end="335:21"><literal type="number" pos:start="335:20" pos:end="335:21">13</literal></expr>]</index></name> <operator pos:start="335:24" pos:end="335:24">=</operator> <call pos:start="335:26" pos:end="335:62"><name pos:start="335:26" pos:end="335:47">get_physical_block_exp</name><argument_list pos:start="335:48" pos:end="335:62">(<argument pos:start="335:49" pos:end="335:61"><expr pos:start="335:49" pos:end="335:61"><operator pos:start="335:49" pos:end="335:49">&amp;</operator><name pos:start="335:50" pos:end="335:61"><name pos:start="335:50" pos:end="335:50">s</name><operator pos:start="335:51" pos:end="335:52">-&gt;</operator><name pos:start="335:53" pos:end="335:56">qdev</name><operator pos:start="335:57" pos:end="335:57">.</operator><name pos:start="335:58" pos:end="335:61">conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="339:13" pos:end="339:60">/* set TPE bit if the format supports discard */</comment>

            <if_stmt pos:start="341:13" pos:end="345:13"><if pos:start="341:13" pos:end="345:13">if <condition pos:start="341:16" pos:end="341:49">(<expr pos:start="341:17" pos:end="341:48"><name pos:start="341:17" pos:end="341:48"><name pos:start="341:17" pos:end="341:17">s</name><operator pos:start="341:18" pos:end="341:19">-&gt;</operator><name pos:start="341:20" pos:end="341:23">qdev</name><operator pos:start="341:24" pos:end="341:24">.</operator><name pos:start="341:25" pos:end="341:28">conf</name><operator pos:start="341:29" pos:end="341:29">.</operator><name pos:start="341:30" pos:end="341:48">discard_granularity</name></name></expr>)</condition> <block pos:start="341:51" pos:end="345:13">{<block_content pos:start="343:17" pos:end="343:34">

                <expr_stmt pos:start="343:17" pos:end="343:34"><expr pos:start="343:17" pos:end="343:33"><name pos:start="343:17" pos:end="343:26"><name pos:start="343:17" pos:end="343:22">outbuf</name><index pos:start="343:23" pos:end="343:26">[<expr pos:start="343:24" pos:end="343:25"><literal type="number" pos:start="343:24" pos:end="343:25">14</literal></expr>]</index></name> <operator pos:start="343:28" pos:end="343:28">=</operator> <literal type="number" pos:start="343:30" pos:end="343:33">0x80</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="349:13" pos:end="349:71">/* Protection, exponent and lowest lba field left blank. */</comment>

            <expr_stmt pos:start="351:13" pos:end="351:35"><expr pos:start="351:13" pos:end="351:34"><name pos:start="351:13" pos:end="351:18">buflen</name> <operator pos:start="351:20" pos:end="351:20">=</operator> <name pos:start="351:22" pos:end="351:34"><name pos:start="351:22" pos:end="351:24">req</name><operator pos:start="351:25" pos:end="351:26">-&gt;</operator><name pos:start="351:27" pos:end="351:29">cmd</name><operator pos:start="351:30" pos:end="351:30">.</operator><name pos:start="351:31" pos:end="351:34">xfer</name></name></expr>;</expr_stmt>

            <break pos:start="353:13" pos:end="353:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:51"><expr pos:start="357:9" pos:end="357:50"><call pos:start="357:9" pos:end="357:50"><name pos:start="357:9" pos:end="357:15">DPRINTF</name><argument_list pos:start="357:16" pos:end="357:50">(<argument pos:start="357:17" pos:end="357:49"><expr pos:start="357:17" pos:end="357:49"><literal type="string" pos:start="357:17" pos:end="357:49">"Unsupported Service Action In\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="359:9" pos:end="359:29">goto <name pos:start="359:14" pos:end="359:28">illegal_request</name>;</goto>

    <case pos:start="361:5" pos:end="361:19">case <expr pos:start="361:10" pos:end="361:18"><name pos:start="361:10" pos:end="361:18">VERIFY_10</name></expr>:</case>

        <break pos:start="363:9" pos:end="363:14">break;</break>

    <default pos:start="365:5" pos:end="365:12">default:</default>

        <expr_stmt pos:start="367:9" pos:end="367:60"><expr pos:start="367:9" pos:end="367:59"><call pos:start="367:9" pos:end="367:59"><name pos:start="367:9" pos:end="367:28">scsi_check_condition</name><argument_list pos:start="367:29" pos:end="367:59">(<argument pos:start="367:30" pos:end="367:30"><expr pos:start="367:30" pos:end="367:30"><name pos:start="367:30" pos:end="367:30">r</name></expr></argument>, <argument pos:start="367:33" pos:end="367:58"><expr pos:start="367:33" pos:end="367:58"><call pos:start="367:33" pos:end="367:58"><name pos:start="367:33" pos:end="367:42">SENSE_CODE</name><argument_list pos:start="367:43" pos:end="367:58">(<argument pos:start="367:44" pos:end="367:57"><expr pos:start="367:44" pos:end="367:57"><name pos:start="367:44" pos:end="367:57">INVALID_OPCODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="369:9" pos:end="369:18">return <expr pos:start="369:16" pos:end="369:17"><operator pos:start="369:16" pos:end="369:16">-</operator><literal type="number" pos:start="369:17" pos:end="369:17">1</literal></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="373:5" pos:end="373:40"><expr pos:start="373:5" pos:end="373:39"><name pos:start="373:5" pos:end="373:10">buflen</name> <operator pos:start="373:12" pos:end="373:12">=</operator> <call pos:start="373:14" pos:end="373:39"><name pos:start="373:14" pos:end="373:16">MIN</name><argument_list pos:start="373:17" pos:end="373:39">(<argument pos:start="373:18" pos:end="373:23"><expr pos:start="373:18" pos:end="373:23"><name pos:start="373:18" pos:end="373:23">buflen</name></expr></argument>, <argument pos:start="373:26" pos:end="373:38"><expr pos:start="373:26" pos:end="373:38"><name pos:start="373:26" pos:end="373:38"><name pos:start="373:26" pos:end="373:28">req</name><operator pos:start="373:29" pos:end="373:30">-&gt;</operator><name pos:start="373:31" pos:end="373:33">cmd</name><operator pos:start="373:34" pos:end="373:34">.</operator><name pos:start="373:35" pos:end="373:38">xfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="375:5" pos:end="375:18">return <expr pos:start="375:12" pos:end="375:17"><name pos:start="375:12" pos:end="375:17">buflen</name></expr>;</return>



<label pos:start="379:1" pos:end="379:16"><name pos:start="379:1" pos:end="379:15">illegal_request</name>:</label>

    <if_stmt pos:start="381:5" pos:end="385:5"><if pos:start="381:5" pos:end="385:5">if <condition pos:start="381:8" pos:end="381:28">(<expr pos:start="381:9" pos:end="381:27"><name pos:start="381:9" pos:end="381:21"><name pos:start="381:9" pos:end="381:9">r</name><operator pos:start="381:10" pos:end="381:11">-&gt;</operator><name pos:start="381:12" pos:end="381:14">req</name><operator pos:start="381:15" pos:end="381:15">.</operator><name pos:start="381:16" pos:end="381:21">status</name></name> <operator pos:start="381:23" pos:end="381:24">==</operator> <operator pos:start="381:26" pos:end="381:26">-</operator><literal type="number" pos:start="381:27" pos:end="381:27">1</literal></expr>)</condition> <block pos:start="381:30" pos:end="385:5">{<block_content pos:start="383:9" pos:end="383:59">

        <expr_stmt pos:start="383:9" pos:end="383:59"><expr pos:start="383:9" pos:end="383:58"><call pos:start="383:9" pos:end="383:58"><name pos:start="383:9" pos:end="383:28">scsi_check_condition</name><argument_list pos:start="383:29" pos:end="383:58">(<argument pos:start="383:30" pos:end="383:30"><expr pos:start="383:30" pos:end="383:30"><name pos:start="383:30" pos:end="383:30">r</name></expr></argument>, <argument pos:start="383:33" pos:end="383:57"><expr pos:start="383:33" pos:end="383:57"><call pos:start="383:33" pos:end="383:57"><name pos:start="383:33" pos:end="383:42">SENSE_CODE</name><argument_list pos:start="383:43" pos:end="383:57">(<argument pos:start="383:44" pos:end="383:56"><expr pos:start="383:44" pos:end="383:56"><name pos:start="383:44" pos:end="383:56">INVALID_FIELD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="387:5" pos:end="387:14">return <expr pos:start="387:12" pos:end="387:13"><operator pos:start="387:12" pos:end="387:12">-</operator><literal type="number" pos:start="387:13" pos:end="387:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
