<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10457.c" pos:tabs="8"><function pos:start="1:1" pos:end="146:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">get_nb_samples</name><parameter_list pos:start="1:26" pos:end="2:59">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:47"><name pos:start="1:27" pos:end="1:40">AVCodecContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">avctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:67"><decl pos:start="1:50" pos:end="1:67"><type pos:start="1:50" pos:end="1:67"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:62">uint8_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">buf</name></decl></parameter>,
                          <parameter pos:start="2:27" pos:end="2:38"><decl pos:start="2:27" pos:end="2:38"><type pos:start="2:27" pos:end="2:38"><name pos:start="2:27" pos:end="2:29">int</name></type> <name pos:start="2:31" pos:end="2:38">buf_size</name></decl></parameter>, <parameter pos:start="2:41" pos:end="2:58"><decl pos:start="2:41" pos:end="2:58"><type pos:start="2:41" pos:end="2:58"><name pos:start="2:41" pos:end="2:43">int</name> <modifier pos:start="2:45" pos:end="2:45">*</modifier></type><name pos:start="2:46" pos:end="2:58">coded_samples</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="146:1">{<block_content pos:start="4:5" pos:end="145:22">
    <decl_stmt pos:start="4:5" pos:end="4:45"><decl pos:start="4:5" pos:end="4:44"><type pos:start="4:5" pos:end="4:24"><name pos:start="4:5" pos:end="4:22">ADPCMDecodeContext</name> <modifier pos:start="4:24" pos:end="4:24">*</modifier></type><name pos:start="4:25" pos:end="4:25">s</name> <init pos:start="4:27" pos:end="4:44">= <expr pos:start="4:29" pos:end="4:44"><name pos:start="4:29" pos:end="4:44"><name pos:start="4:29" pos:end="4:33">avctx</name><operator pos:start="4:34" pos:end="4:35">-&gt;</operator><name pos:start="4:36" pos:end="4:44">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">nb_samples</name>        <init pos:start="5:27" pos:end="5:29">= <expr pos:start="5:29" pos:end="5:29"><literal type="number" pos:start="5:29" pos:end="5:29">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:44"><decl pos:start="6:5" pos:end="6:43"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:10">ch</name>                <init pos:start="6:27" pos:end="6:43">= <expr pos:start="6:29" pos:end="6:43"><name pos:start="6:29" pos:end="6:43"><name pos:start="6:29" pos:end="6:33">avctx</name><operator pos:start="6:34" pos:end="6:35">-&gt;</operator><name pos:start="6:36" pos:end="6:43">channels</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:25">has_coded_samples</name> <init pos:start="7:27" pos:end="7:29">= <expr pos:start="7:29" pos:end="7:29"><literal type="number" pos:start="7:29" pos:end="7:29">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:20"><decl pos:start="8:5" pos:end="8:19"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:19">header_size</name></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:23"><expr pos:start="9:5" pos:end="9:22"><operator pos:start="9:5" pos:end="9:5">*</operator><name pos:start="9:6" pos:end="9:18">coded_samples</name> <operator pos:start="9:20" pos:end="9:20">=</operator> <literal type="number" pos:start="9:22" pos:end="9:22">0</literal></expr>;</expr_stmt>
    <switch pos:start="10:5" pos:end="27:5">switch <condition pos:start="10:12" pos:end="10:29">(<expr pos:start="10:13" pos:end="10:28"><name pos:start="10:13" pos:end="10:28"><name pos:start="10:13" pos:end="10:17">avctx</name><operator pos:start="10:18" pos:end="10:19">-&gt;</operator><name pos:start="10:20" pos:end="10:24">codec</name><operator pos:start="10:25" pos:end="10:26">-&gt;</operator><name pos:start="10:27" pos:end="10:28">id</name></name></expr>)</condition> <block pos:start="10:31" pos:end="27:5">{<block_content pos:start="12:5" pos:end="26:14">
    <comment type="block" pos:start="11:5" pos:end="11:39">/* constant, only check buf_size */</comment>
    <case pos:start="12:5" pos:end="12:31">case <expr pos:start="12:10" pos:end="12:30"><name pos:start="12:10" pos:end="12:30">CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>
        <if_stmt pos:start="13:9" pos:end="14:25"><if pos:start="13:9" pos:end="14:25">if <condition pos:start="13:12" pos:end="13:31">(<expr pos:start="13:13" pos:end="13:30"><name pos:start="13:13" pos:end="13:20">buf_size</name> <operator pos:start="13:22" pos:end="13:22">&lt;</operator> <literal type="number" pos:start="13:24" pos:end="13:25">76</literal> <operator pos:start="13:27" pos:end="13:27">*</operator> <name pos:start="13:29" pos:end="13:30">ch</name></expr>)</condition><block type="pseudo" pos:start="14:9" pos:end="14:25"><block_content pos:start="14:9" pos:end="14:25">
        <expr_stmt pos:start="14:9" pos:end="14:25"><expr pos:start="14:9" pos:end="14:24"><name pos:start="14:9" pos:end="14:18">nb_samples</name> <operator pos:start="14:20" pos:end="14:20">=</operator> <literal type="number" pos:start="14:22" pos:end="14:24">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break pos:start="15:9" pos:end="15:14">break;</break>
    <case pos:start="16:5" pos:end="16:31">case <expr pos:start="16:10" pos:end="16:30"><name pos:start="16:10" pos:end="16:30">CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>
        <if_stmt pos:start="17:9" pos:end="18:24"><if pos:start="17:9" pos:end="18:24">if <condition pos:start="17:12" pos:end="17:31">(<expr pos:start="17:13" pos:end="17:30"><name pos:start="17:13" pos:end="17:20">buf_size</name> <operator pos:start="17:22" pos:end="17:22">&lt;</operator> <literal type="number" pos:start="17:24" pos:end="17:25">34</literal> <operator pos:start="17:27" pos:end="17:27">*</operator> <name pos:start="17:29" pos:end="17:30">ch</name></expr>)</condition><block type="pseudo" pos:start="18:9" pos:end="18:24"><block_content pos:start="18:9" pos:end="18:24">
        <expr_stmt pos:start="18:9" pos:end="18:24"><expr pos:start="18:9" pos:end="18:23"><name pos:start="18:9" pos:end="18:18">nb_samples</name> <operator pos:start="18:20" pos:end="18:20">=</operator> <literal type="number" pos:start="18:22" pos:end="18:23">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break pos:start="19:9" pos:end="19:14">break;</break>
    <comment type="block" pos:start="20:5" pos:end="20:28">/* simple 4-bit adpcm */</comment>
    <case pos:start="21:5" pos:end="21:27">case <expr pos:start="21:10" pos:end="21:26"><name pos:start="21:10" pos:end="21:26">CODEC_ID_ADPCM_CT</name></expr>:</case>
    <case pos:start="22:5" pos:end="22:36">case <expr pos:start="22:10" pos:end="22:35"><name pos:start="22:10" pos:end="22:35">CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>
    <case pos:start="23:5" pos:end="23:31">case <expr pos:start="23:10" pos:end="23:30"><name pos:start="23:10" pos:end="23:30">CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>
    <case pos:start="24:5" pos:end="24:31">case <expr pos:start="24:10" pos:end="24:30"><name pos:start="24:10" pos:end="24:30">CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>
        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:18">nb_samples</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:29">buf_size</name> <operator pos:start="25:31" pos:end="25:31">*</operator> <literal type="number" pos:start="25:33" pos:end="25:33">2</literal> <operator pos:start="25:35" pos:end="25:35">/</operator> <name pos:start="25:37" pos:end="25:38">ch</name></expr>;</expr_stmt>
        <break pos:start="26:9" pos:end="26:14">break;</break>
    </block_content>}</block></switch>
    <if_stmt pos:start="28:5" pos:end="29:26"><if pos:start="28:5" pos:end="29:26">if <condition pos:start="28:8" pos:end="28:19">(<expr pos:start="28:9" pos:end="28:18"><name pos:start="28:9" pos:end="28:18">nb_samples</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:26"><block_content pos:start="29:9" pos:end="29:26">
        <return pos:start="29:9" pos:end="29:26">return <expr pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:25">nb_samples</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="30:5" pos:end="30:41">/* simple 4-bit adpcm, with header */</comment>
    <expr_stmt pos:start="31:5" pos:end="31:20"><expr pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:15">header_size</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr>;</expr_stmt>
    <switch pos:start="32:5" pos:end="37:5">switch <condition pos:start="32:12" pos:end="32:29">(<expr pos:start="32:13" pos:end="32:28"><name pos:start="32:13" pos:end="32:28"><name pos:start="32:13" pos:end="32:17">avctx</name><operator pos:start="32:18" pos:end="32:19">-&gt;</operator><name pos:start="32:20" pos:end="32:24">codec</name><operator pos:start="32:25" pos:end="32:26">-&gt;</operator><name pos:start="32:27" pos:end="32:28">id</name></name></expr>)</condition> <block pos:start="32:31" pos:end="37:5">{<block_content pos:start="33:9" pos:end="36:74">
        <case pos:start="33:9" pos:end="33:32">case <expr pos:start="33:14" pos:end="33:31"><name pos:start="33:14" pos:end="33:31">CODEC_ID_ADPCM_4XM</name></expr>:</case>
        <case pos:start="34:9" pos:end="34:36">case <expr pos:start="34:14" pos:end="34:35"><name pos:start="34:14" pos:end="34:35">CODEC_ID_ADPCM_IMA_ISS</name></expr>:</case>     <expr_stmt pos:start="34:42" pos:end="34:62"><expr pos:start="34:42" pos:end="34:61"><name pos:start="34:42" pos:end="34:52">header_size</name> <operator pos:start="34:54" pos:end="34:54">=</operator> <literal type="number" pos:start="34:56" pos:end="34:56">4</literal> <operator pos:start="34:58" pos:end="34:58">*</operator> <name pos:start="34:60" pos:end="34:61">ch</name></expr>;</expr_stmt>      <break pos:start="34:69" pos:end="34:74">break;</break>
        <case pos:start="35:9" pos:end="35:36">case <expr pos:start="35:14" pos:end="35:35"><name pos:start="35:14" pos:end="35:35">CODEC_ID_ADPCM_IMA_AMV</name></expr>:</case>     <expr_stmt pos:start="35:42" pos:end="35:57"><expr pos:start="35:42" pos:end="35:56"><name pos:start="35:42" pos:end="35:52">header_size</name> <operator pos:start="35:54" pos:end="35:54">=</operator> <literal type="number" pos:start="35:56" pos:end="35:56">8</literal></expr>;</expr_stmt>           <break pos:start="35:69" pos:end="35:74">break;</break>
        <case pos:start="36:9" pos:end="36:39">case <expr pos:start="36:14" pos:end="36:38"><name pos:start="36:14" pos:end="36:38">CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case>  <expr_stmt pos:start="36:42" pos:end="36:57"><expr pos:start="36:42" pos:end="36:56"><name pos:start="36:42" pos:end="36:52">header_size</name> <operator pos:start="36:54" pos:end="36:54">=</operator> <literal type="number" pos:start="36:56" pos:end="36:56">4</literal></expr>;</expr_stmt>           <break pos:start="36:69" pos:end="36:74">break;</break>
    </block_content>}</block></switch>
    <if_stmt pos:start="38:5" pos:end="39:49"><if pos:start="38:5" pos:end="39:49">if <condition pos:start="38:8" pos:end="38:24">(<expr pos:start="38:9" pos:end="38:23"><name pos:start="38:9" pos:end="38:19">header_size</name> <operator pos:start="38:21" pos:end="38:21">&gt;</operator> <literal type="number" pos:start="38:23" pos:end="38:23">0</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:49"><block_content pos:start="39:9" pos:end="39:49">
        <return pos:start="39:9" pos:end="39:49">return <expr pos:start="39:16" pos:end="39:48"><operator pos:start="39:16" pos:end="39:16">(</operator><name pos:start="39:17" pos:end="39:24">buf_size</name> <operator pos:start="39:26" pos:end="39:26">-</operator> <name pos:start="39:28" pos:end="39:38">header_size</name><operator pos:start="39:39" pos:end="39:39">)</operator> <operator pos:start="39:41" pos:end="39:41">*</operator> <literal type="number" pos:start="39:43" pos:end="39:43">2</literal> <operator pos:start="39:45" pos:end="39:45">/</operator> <name pos:start="39:47" pos:end="39:48">ch</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="40:5" pos:end="40:30">/* more complex formats */</comment>
    <switch pos:start="41:5" pos:end="141:5">switch <condition pos:start="41:12" pos:end="41:29">(<expr pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:17">avctx</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:24">codec</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:28">id</name></name></expr>)</condition> <block pos:start="41:31" pos:end="141:5">{<block_content pos:start="42:5" pos:end="140:14">
    <case pos:start="42:5" pos:end="42:27">case <expr pos:start="42:10" pos:end="42:26"><name pos:start="42:10" pos:end="42:26">CODEC_ID_ADPCM_EA</name></expr>:</case>
        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:25">has_coded_samples</name> <operator pos:start="43:27" pos:end="43:27">=</operator> <literal type="number" pos:start="43:29" pos:end="43:29">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="44:9" pos:end="45:39"><if pos:start="44:9" pos:end="45:39">if <condition pos:start="44:12" pos:end="44:25">(<expr pos:start="44:13" pos:end="44:24"><name pos:start="44:13" pos:end="44:20">buf_size</name> <operator pos:start="44:22" pos:end="44:22">&lt;</operator> <literal type="number" pos:start="44:24" pos:end="44:24">4</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:39"><block_content pos:start="45:9" pos:end="45:39">
        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><operator pos:start="45:9" pos:end="45:9">*</operator><name pos:start="45:10" pos:end="45:22">coded_samples</name>  <operator pos:start="45:25" pos:end="45:25">=</operator> <call pos:start="45:27" pos:end="45:38"><name pos:start="45:27" pos:end="45:33">AV_RL32</name><argument_list pos:start="45:34" pos:end="45:38">(<argument pos:start="45:35" pos:end="45:37"><expr pos:start="45:35" pos:end="45:37"><name pos:start="45:35" pos:end="45:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:46"><expr pos:start="46:9" pos:end="46:45"><operator pos:start="46:9" pos:end="46:9">*</operator><name pos:start="46:10" pos:end="46:22">coded_samples</name> <operator pos:start="46:24" pos:end="46:25">-=</operator> <operator pos:start="46:27" pos:end="46:27">*</operator><name pos:start="46:28" pos:end="46:40">coded_samples</name> <operator pos:start="46:42" pos:end="46:42">%</operator> <literal type="number" pos:start="46:44" pos:end="46:45">28</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:18">nb_samples</name>      <operator pos:start="47:25" pos:end="47:25">=</operator> <operator pos:start="47:27" pos:end="47:27">(</operator><name pos:start="47:28" pos:end="47:35">buf_size</name> <operator pos:start="47:37" pos:end="47:37">-</operator> <literal type="number" pos:start="47:39" pos:end="47:40">12</literal><operator pos:start="47:41" pos:end="47:41">)</operator> <operator pos:start="47:43" pos:end="47:43">/</operator> <literal type="number" pos:start="47:45" pos:end="47:46">30</literal> <operator pos:start="47:48" pos:end="47:48">*</operator> <literal type="number" pos:start="47:50" pos:end="47:51">28</literal></expr>;</expr_stmt>
        <break pos:start="48:9" pos:end="48:14">break;</break>
    <case pos:start="49:5" pos:end="49:36">case <expr pos:start="49:10" pos:end="49:35"><name pos:start="49:10" pos:end="49:35">CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>:</case>
        <expr_stmt pos:start="50:9" pos:end="50:30"><expr pos:start="50:9" pos:end="50:29"><name pos:start="50:9" pos:end="50:25">has_coded_samples</name> <operator pos:start="50:27" pos:end="50:27">=</operator> <literal type="number" pos:start="50:29" pos:end="50:29">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="51:9" pos:end="52:38"><if pos:start="51:9" pos:end="52:38">if <condition pos:start="51:12" pos:end="51:25">(<expr pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:20">buf_size</name> <operator pos:start="51:22" pos:end="51:22">&lt;</operator> <literal type="number" pos:start="51:24" pos:end="51:24">4</literal></expr>)</condition><block type="pseudo" pos:start="52:9" pos:end="52:38"><block_content pos:start="52:9" pos:end="52:38">
        <expr_stmt pos:start="52:9" pos:end="52:38"><expr pos:start="52:9" pos:end="52:37"><operator pos:start="52:9" pos:end="52:9">*</operator><name pos:start="52:10" pos:end="52:22">coded_samples</name> <operator pos:start="52:24" pos:end="52:24">=</operator> <call pos:start="52:26" pos:end="52:37"><name pos:start="52:26" pos:end="52:32">AV_RL32</name><argument_list pos:start="52:33" pos:end="52:37">(<argument pos:start="52:34" pos:end="52:36"><expr pos:start="52:34" pos:end="52:36"><name pos:start="52:34" pos:end="52:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:60"><expr pos:start="53:9" pos:end="53:59"><name pos:start="53:9" pos:end="53:18">nb_samples</name>     <operator pos:start="53:24" pos:end="53:24">=</operator> <operator pos:start="53:26" pos:end="53:26">(</operator><name pos:start="53:27" pos:end="53:34">buf_size</name> <operator pos:start="53:36" pos:end="53:36">-</operator> <operator pos:start="53:38" pos:end="53:38">(</operator><literal type="number" pos:start="53:39" pos:end="53:41">4</literal> <operator pos:start="53:41" pos:end="53:41">+</operator> <literal type="number" pos:start="53:43" pos:end="53:43">8</literal> <operator pos:start="53:45" pos:end="53:45">*</operator> <name pos:start="53:47" pos:end="53:48">ch</name><operator pos:start="53:49" pos:end="53:49">)</operator><operator pos:start="53:50" pos:end="53:50">)</operator> <operator pos:start="53:52" pos:end="53:52">*</operator> <literal type="number" pos:start="53:54" pos:end="53:54">2</literal> <operator pos:start="53:56" pos:end="53:56">/</operator> <name pos:start="53:58" pos:end="53:59">ch</name></expr>;</expr_stmt>
        <break pos:start="54:9" pos:end="54:14">break;</break>
    <case pos:start="55:5" pos:end="55:36">case <expr pos:start="55:10" pos:end="55:35"><name pos:start="55:10" pos:end="55:35">CODEC_ID_ADPCM_EA_MAXIS_XA</name></expr>:</case>
        <expr_stmt pos:start="56:9" pos:end="56:59"><expr pos:start="56:9" pos:end="56:58"><name pos:start="56:9" pos:end="56:18">nb_samples</name> <operator pos:start="56:20" pos:end="56:20">=</operator> <operator pos:start="56:22" pos:end="56:22">(</operator><operator pos:start="56:23" pos:end="56:23">(</operator><name pos:start="56:24" pos:end="56:31">buf_size</name> <operator pos:start="56:33" pos:end="56:33">-</operator> <name pos:start="56:35" pos:end="56:36">ch</name><operator pos:start="56:37" pos:end="56:37">)</operator> <operator pos:start="56:39" pos:end="56:39">/</operator> <operator pos:start="56:41" pos:end="56:41">(</operator><literal type="number" pos:start="56:42" pos:end="56:42">2</literal> <operator pos:start="56:44" pos:end="56:44">*</operator> <name pos:start="56:46" pos:end="56:47">ch</name><operator pos:start="56:48" pos:end="56:48">)</operator><operator pos:start="56:49" pos:end="56:49">)</operator> <operator pos:start="56:51" pos:end="56:51">*</operator> <literal type="number" pos:start="56:53" pos:end="56:53">2</literal> <operator pos:start="56:55" pos:end="56:55">*</operator> <name pos:start="56:57" pos:end="56:58">ch</name></expr>;</expr_stmt>
        <break pos:start="57:9" pos:end="57:14">break;</break>
    <case pos:start="58:5" pos:end="58:30">case <expr pos:start="58:10" pos:end="58:29"><name pos:start="58:10" pos:end="58:29">CODEC_ID_ADPCM_EA_R1</name></expr>:</case>
    <case pos:start="59:5" pos:end="59:30">case <expr pos:start="59:10" pos:end="59:29"><name pos:start="59:10" pos:end="59:29">CODEC_ID_ADPCM_EA_R2</name></expr>:</case>
    <case pos:start="60:5" pos:end="60:30">case <expr pos:start="60:10" pos:end="60:29"><name pos:start="60:10" pos:end="60:29">CODEC_ID_ADPCM_EA_R3</name></expr>:</case>
        <comment type="block" pos:start="61:9" pos:end="61:39">/* maximum number of samples */</comment>
        <comment type="block" pos:start="62:9" pos:end="62:78">/* has internal offsets and a per-frame switch to signal raw 16-bit */</comment>
        <expr_stmt pos:start="63:9" pos:end="63:30"><expr pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:25">has_coded_samples</name> <operator pos:start="63:27" pos:end="63:27">=</operator> <literal type="number" pos:start="63:29" pos:end="63:29">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="64:9" pos:end="78:9"><if pos:start="64:9" pos:end="78:9">if <condition pos:start="64:12" pos:end="64:25">(<expr pos:start="64:13" pos:end="64:24"><name pos:start="64:13" pos:end="64:20">buf_size</name> <operator pos:start="64:22" pos:end="64:22">&lt;</operator> <literal type="number" pos:start="64:24" pos:end="64:24">4</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="78:9"><block_content pos:start="65:9" pos:end="78:9">
        <switch pos:start="65:9" pos:end="78:9">switch <condition pos:start="65:16" pos:end="65:33">(<expr pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:21">avctx</name><operator pos:start="65:22" pos:end="65:23">-&gt;</operator><name pos:start="65:24" pos:end="65:28">codec</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:32">id</name></name></expr>)</condition> <block pos:start="65:35" pos:end="78:9">{<block_content pos:start="66:9" pos:end="77:18">
        <case pos:start="66:9" pos:end="66:34">case <expr pos:start="66:14" pos:end="66:33"><name pos:start="66:14" pos:end="66:33">CODEC_ID_ADPCM_EA_R1</name></expr>:</case>
            <expr_stmt pos:start="67:13" pos:end="67:40"><expr pos:start="67:13" pos:end="67:39"><name pos:start="67:13" pos:end="67:23">header_size</name>    <operator pos:start="67:28" pos:end="67:28">=</operator> <literal type="number" pos:start="67:30" pos:end="67:32">4</literal> <operator pos:start="67:32" pos:end="67:32">+</operator> <literal type="number" pos:start="67:34" pos:end="67:34">9</literal> <operator pos:start="67:36" pos:end="67:36">*</operator> <name pos:start="67:38" pos:end="67:39">ch</name></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:42"><expr pos:start="68:13" pos:end="68:41"><operator pos:start="68:13" pos:end="68:13">*</operator><name pos:start="68:14" pos:end="68:26">coded_samples</name> <operator pos:start="68:28" pos:end="68:28">=</operator> <call pos:start="68:30" pos:end="68:41"><name pos:start="68:30" pos:end="68:36">AV_RL32</name><argument_list pos:start="68:37" pos:end="68:41">(<argument pos:start="68:38" pos:end="68:40"><expr pos:start="68:38" pos:end="68:40"><name pos:start="68:38" pos:end="68:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="69:13" pos:end="69:18">break;</break>
        <case pos:start="70:9" pos:end="70:34">case <expr pos:start="70:14" pos:end="70:33"><name pos:start="70:14" pos:end="70:33">CODEC_ID_ADPCM_EA_R2</name></expr>:</case>
            <expr_stmt pos:start="71:13" pos:end="71:40"><expr pos:start="71:13" pos:end="71:39"><name pos:start="71:13" pos:end="71:23">header_size</name>    <operator pos:start="71:28" pos:end="71:28">=</operator> <literal type="number" pos:start="71:30" pos:end="71:32">4</literal> <operator pos:start="71:32" pos:end="71:32">+</operator> <literal type="number" pos:start="71:34" pos:end="71:34">5</literal> <operator pos:start="71:36" pos:end="71:36">*</operator> <name pos:start="71:38" pos:end="71:39">ch</name></expr>;</expr_stmt>
            <expr_stmt pos:start="72:13" pos:end="72:42"><expr pos:start="72:13" pos:end="72:41"><operator pos:start="72:13" pos:end="72:13">*</operator><name pos:start="72:14" pos:end="72:26">coded_samples</name> <operator pos:start="72:28" pos:end="72:28">=</operator> <call pos:start="72:30" pos:end="72:41"><name pos:start="72:30" pos:end="72:36">AV_RL32</name><argument_list pos:start="72:37" pos:end="72:41">(<argument pos:start="72:38" pos:end="72:40"><expr pos:start="72:38" pos:end="72:40"><name pos:start="72:38" pos:end="72:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="73:13" pos:end="73:18">break;</break>
        <case pos:start="74:9" pos:end="74:34">case <expr pos:start="74:14" pos:end="74:33"><name pos:start="74:14" pos:end="74:33">CODEC_ID_ADPCM_EA_R3</name></expr>:</case>
            <expr_stmt pos:start="75:13" pos:end="75:40"><expr pos:start="75:13" pos:end="75:39"><name pos:start="75:13" pos:end="75:23">header_size</name>    <operator pos:start="75:28" pos:end="75:28">=</operator> <literal type="number" pos:start="75:30" pos:end="75:32">4</literal> <operator pos:start="75:32" pos:end="75:32">+</operator> <literal type="number" pos:start="75:34" pos:end="75:34">5</literal> <operator pos:start="75:36" pos:end="75:36">*</operator> <name pos:start="75:38" pos:end="75:39">ch</name></expr>;</expr_stmt>
            <expr_stmt pos:start="76:13" pos:end="76:42"><expr pos:start="76:13" pos:end="76:41"><operator pos:start="76:13" pos:end="76:13">*</operator><name pos:start="76:14" pos:end="76:26">coded_samples</name> <operator pos:start="76:28" pos:end="76:28">=</operator> <call pos:start="76:30" pos:end="76:41"><name pos:start="76:30" pos:end="76:36">AV_RB32</name><argument_list pos:start="76:37" pos:end="76:41">(<argument pos:start="76:38" pos:end="76:40"><expr pos:start="76:38" pos:end="76:40"><name pos:start="76:38" pos:end="76:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="77:13" pos:end="77:18">break;</break>
        </block_content>}</block></switch></block_content></block></if></if_stmt>
        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><operator pos:start="79:9" pos:end="79:9">*</operator><name pos:start="79:10" pos:end="79:22">coded_samples</name> <operator pos:start="79:24" pos:end="79:25">-=</operator> <operator pos:start="79:27" pos:end="79:27">*</operator><name pos:start="79:28" pos:end="79:40">coded_samples</name> <operator pos:start="79:42" pos:end="79:42">%</operator> <literal type="number" pos:start="79:44" pos:end="79:45">28</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="80:9" pos:end="80:60"><expr pos:start="80:9" pos:end="80:59"><name pos:start="80:9" pos:end="80:18">nb_samples</name>      <operator pos:start="80:25" pos:end="80:25">=</operator> <operator pos:start="80:27" pos:end="80:27">(</operator><name pos:start="80:28" pos:end="80:35">buf_size</name> <operator pos:start="80:37" pos:end="80:37">-</operator> <name pos:start="80:39" pos:end="80:49">header_size</name><operator pos:start="80:50" pos:end="80:50">)</operator> <operator pos:start="80:52" pos:end="80:52">*</operator> <literal type="number" pos:start="80:54" pos:end="80:54">2</literal> <operator pos:start="80:56" pos:end="80:56">/</operator> <name pos:start="80:58" pos:end="80:59">ch</name></expr>;</expr_stmt>
        <expr_stmt pos:start="81:9" pos:end="81:42"><expr pos:start="81:9" pos:end="81:41"><name pos:start="81:9" pos:end="81:18">nb_samples</name>     <operator pos:start="81:24" pos:end="81:25">-=</operator> <name pos:start="81:27" pos:end="81:36">nb_samples</name> <operator pos:start="81:38" pos:end="81:38">%</operator> <literal type="number" pos:start="81:40" pos:end="81:41">28</literal></expr>;</expr_stmt>
        <break pos:start="82:9" pos:end="82:14">break;</break>
    <case pos:start="83:5" pos:end="83:32">case <expr pos:start="83:10" pos:end="83:31"><name pos:start="83:10" pos:end="83:31">CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>
        <if_stmt pos:start="84:9" pos:end="85:59"><if pos:start="84:9" pos:end="85:59">if <condition pos:start="84:12" pos:end="84:35">(<expr pos:start="84:13" pos:end="84:34"><name pos:start="84:13" pos:end="84:30"><name pos:start="84:13" pos:end="84:17">avctx</name><operator pos:start="84:18" pos:end="84:19">-&gt;</operator><name pos:start="84:20" pos:end="84:30">block_align</name></name> <operator pos:start="84:32" pos:end="84:32">&gt;</operator> <literal type="number" pos:start="84:34" pos:end="84:34">0</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:59"><block_content pos:start="85:13" pos:end="85:59">
            <expr_stmt pos:start="85:13" pos:end="85:59"><expr pos:start="85:13" pos:end="85:58"><name pos:start="85:13" pos:end="85:20">buf_size</name> <operator pos:start="85:22" pos:end="85:22">=</operator> <call pos:start="85:24" pos:end="85:58"><name pos:start="85:24" pos:end="85:28">FFMIN</name><argument_list pos:start="85:29" pos:end="85:58">(<argument pos:start="85:30" pos:end="85:37"><expr pos:start="85:30" pos:end="85:37"><name pos:start="85:30" pos:end="85:37">buf_size</name></expr></argument>, <argument pos:start="85:40" pos:end="85:57"><expr pos:start="85:40" pos:end="85:57"><name pos:start="85:40" pos:end="85:57"><name pos:start="85:40" pos:end="85:44">avctx</name><operator pos:start="85:45" pos:end="85:46">-&gt;</operator><name pos:start="85:47" pos:end="85:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="86:9" pos:end="86:52"><expr pos:start="86:9" pos:end="86:51"><name pos:start="86:9" pos:end="86:18">nb_samples</name> <operator pos:start="86:20" pos:end="86:20">=</operator> <operator pos:start="86:22" pos:end="86:22">(</operator><operator pos:start="86:23" pos:end="86:23">(</operator><name pos:start="86:24" pos:end="86:31">buf_size</name> <operator pos:start="86:33" pos:end="86:33">-</operator> <literal type="number" pos:start="86:35" pos:end="86:36">16</literal><operator pos:start="86:37" pos:end="86:37">)</operator> <operator pos:start="86:39" pos:end="86:39">*</operator> <literal type="number" pos:start="86:41" pos:end="86:41">8</literal> <operator pos:start="86:43" pos:end="86:43">/</operator> <literal type="number" pos:start="86:45" pos:end="86:45">3</literal><operator pos:start="86:46" pos:end="86:46">)</operator> <operator pos:start="86:48" pos:end="86:48">/</operator> <name pos:start="86:50" pos:end="86:51">ch</name></expr>;</expr_stmt>
        <break pos:start="87:9" pos:end="87:14">break;</break>
    <case pos:start="88:5" pos:end="88:32">case <expr pos:start="88:10" pos:end="88:31"><name pos:start="88:10" pos:end="88:31">CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>
        <expr_stmt pos:start="89:9" pos:end="89:54"><expr pos:start="89:9" pos:end="89:53"><name pos:start="89:9" pos:end="89:18">nb_samples</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:24">1</literal> <operator pos:start="89:24" pos:end="89:24">+</operator> <operator pos:start="89:26" pos:end="89:26">(</operator><name pos:start="89:27" pos:end="89:34">buf_size</name> <operator pos:start="89:36" pos:end="89:36">-</operator> <literal type="number" pos:start="89:38" pos:end="89:38">4</literal> <operator pos:start="89:40" pos:end="89:40">*</operator> <name pos:start="89:42" pos:end="89:43">ch</name><operator pos:start="89:44" pos:end="89:44">)</operator> <operator pos:start="89:46" pos:end="89:46">*</operator> <literal type="number" pos:start="89:48" pos:end="89:48">2</literal> <operator pos:start="89:50" pos:end="89:50">/</operator> <name pos:start="89:52" pos:end="89:53">ch</name></expr>;</expr_stmt>
        <break pos:start="90:9" pos:end="90:14">break;</break>
    <case pos:start="91:5" pos:end="91:32">case <expr pos:start="91:10" pos:end="91:31"><name pos:start="91:10" pos:end="91:31">CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>
        <if_stmt pos:start="92:9" pos:end="93:59"><if pos:start="92:9" pos:end="93:59">if <condition pos:start="92:12" pos:end="92:35">(<expr pos:start="92:13" pos:end="92:34"><name pos:start="92:13" pos:end="92:30"><name pos:start="92:13" pos:end="92:17">avctx</name><operator pos:start="92:18" pos:end="92:19">-&gt;</operator><name pos:start="92:20" pos:end="92:30">block_align</name></name> <operator pos:start="92:32" pos:end="92:32">&gt;</operator> <literal type="number" pos:start="92:34" pos:end="92:34">0</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:59"><block_content pos:start="93:13" pos:end="93:59">
            <expr_stmt pos:start="93:13" pos:end="93:59"><expr pos:start="93:13" pos:end="93:58"><name pos:start="93:13" pos:end="93:20">buf_size</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <call pos:start="93:24" pos:end="93:58"><name pos:start="93:24" pos:end="93:28">FFMIN</name><argument_list pos:start="93:29" pos:end="93:58">(<argument pos:start="93:30" pos:end="93:37"><expr pos:start="93:30" pos:end="93:37"><name pos:start="93:30" pos:end="93:37">buf_size</name></expr></argument>, <argument pos:start="93:40" pos:end="93:57"><expr pos:start="93:40" pos:end="93:57"><name pos:start="93:40" pos:end="93:57"><name pos:start="93:40" pos:end="93:44">avctx</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="94:9" pos:end="94:60"><expr pos:start="94:9" pos:end="94:59"><name pos:start="94:9" pos:end="94:18">nb_samples</name> <operator pos:start="94:20" pos:end="94:20">=</operator> <literal type="number" pos:start="94:22" pos:end="94:24">1</literal> <operator pos:start="94:24" pos:end="94:24">+</operator> <operator pos:start="94:26" pos:end="94:26">(</operator><name pos:start="94:27" pos:end="94:34">buf_size</name> <operator pos:start="94:36" pos:end="94:36">-</operator> <literal type="number" pos:start="94:38" pos:end="94:38">4</literal> <operator pos:start="94:40" pos:end="94:40">*</operator> <name pos:start="94:42" pos:end="94:43">ch</name><operator pos:start="94:44" pos:end="94:44">)</operator> <operator pos:start="94:46" pos:end="94:46">/</operator> <operator pos:start="94:48" pos:end="94:48">(</operator><literal type="number" pos:start="94:49" pos:end="94:49">4</literal> <operator pos:start="94:51" pos:end="94:51">*</operator> <name pos:start="94:53" pos:end="94:54">ch</name><operator pos:start="94:55" pos:end="94:55">)</operator> <operator pos:start="94:57" pos:end="94:57">*</operator> <literal type="number" pos:start="94:59" pos:end="94:59">8</literal></expr>;</expr_stmt>
        <break pos:start="95:9" pos:end="95:14">break;</break>
    <case pos:start="96:5" pos:end="96:27">case <expr pos:start="96:10" pos:end="96:26"><name pos:start="96:10" pos:end="96:26">CODEC_ID_ADPCM_MS</name></expr>:</case>
        <if_stmt pos:start="97:9" pos:end="98:59"><if pos:start="97:9" pos:end="98:59">if <condition pos:start="97:12" pos:end="97:35">(<expr pos:start="97:13" pos:end="97:34"><name pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:17">avctx</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:30">block_align</name></name> <operator pos:start="97:32" pos:end="97:32">&gt;</operator> <literal type="number" pos:start="97:34" pos:end="97:34">0</literal></expr>)</condition><block type="pseudo" pos:start="98:13" pos:end="98:59"><block_content pos:start="98:13" pos:end="98:59">
            <expr_stmt pos:start="98:13" pos:end="98:59"><expr pos:start="98:13" pos:end="98:58"><name pos:start="98:13" pos:end="98:20">buf_size</name> <operator pos:start="98:22" pos:end="98:22">=</operator> <call pos:start="98:24" pos:end="98:58"><name pos:start="98:24" pos:end="98:28">FFMIN</name><argument_list pos:start="98:29" pos:end="98:58">(<argument pos:start="98:30" pos:end="98:37"><expr pos:start="98:30" pos:end="98:37"><name pos:start="98:30" pos:end="98:37">buf_size</name></expr></argument>, <argument pos:start="98:40" pos:end="98:57"><expr pos:start="98:40" pos:end="98:57"><name pos:start="98:40" pos:end="98:57"><name pos:start="98:40" pos:end="98:44">avctx</name><operator pos:start="98:45" pos:end="98:46">-&gt;</operator><name pos:start="98:47" pos:end="98:57">block_align</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="99:9" pos:end="99:54"><expr pos:start="99:9" pos:end="99:53"><name pos:start="99:9" pos:end="99:18">nb_samples</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="number" pos:start="99:22" pos:end="99:24">2</literal> <operator pos:start="99:24" pos:end="99:24">+</operator> <operator pos:start="99:26" pos:end="99:26">(</operator><name pos:start="99:27" pos:end="99:34">buf_size</name> <operator pos:start="99:36" pos:end="99:36">-</operator> <literal type="number" pos:start="99:38" pos:end="99:38">7</literal> <operator pos:start="99:40" pos:end="99:40">*</operator> <name pos:start="99:42" pos:end="99:43">ch</name><operator pos:start="99:44" pos:end="99:44">)</operator> <operator pos:start="99:46" pos:end="99:46">*</operator> <literal type="number" pos:start="99:48" pos:end="99:48">2</literal> <operator pos:start="99:50" pos:end="99:50">/</operator> <name pos:start="99:52" pos:end="99:53">ch</name></expr>;</expr_stmt>
        <break pos:start="100:9" pos:end="100:14">break;</break>
    <case pos:start="101:5" pos:end="101:32">case <expr pos:start="101:10" pos:end="101:31"><name pos:start="101:10" pos:end="101:31">CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>
    <case pos:start="102:5" pos:end="102:32">case <expr pos:start="102:10" pos:end="102:31"><name pos:start="102:10" pos:end="102:31">CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>
    <case pos:start="103:5" pos:end="103:32">case <expr pos:start="103:10" pos:end="103:31"><name pos:start="103:10" pos:end="103:31">CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>
    <block pos:start="104:5" pos:end="117:5">{<block_content pos:start="105:9" pos:end="116:14">
        <decl_stmt pos:start="105:9" pos:end="105:29"><decl pos:start="105:9" pos:end="105:28"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:28">samples_per_byte</name></decl>;</decl_stmt>
        <switch pos:start="106:9" pos:end="110:9">switch <condition pos:start="106:16" pos:end="106:33">(<expr pos:start="106:17" pos:end="106:32"><name pos:start="106:17" pos:end="106:32"><name pos:start="106:17" pos:end="106:21">avctx</name><operator pos:start="106:22" pos:end="106:23">-&gt;</operator><name pos:start="106:24" pos:end="106:28">codec</name><operator pos:start="106:29" pos:end="106:30">-&gt;</operator><name pos:start="106:31" pos:end="106:32">id</name></name></expr>)</condition> <block pos:start="106:35" pos:end="110:9">{<block_content pos:start="107:9" pos:end="109:65">
        <case pos:start="107:9" pos:end="107:36">case <expr pos:start="107:14" pos:end="107:35"><name pos:start="107:14" pos:end="107:35">CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case> <expr_stmt pos:start="107:38" pos:end="107:58"><expr pos:start="107:38" pos:end="107:57"><name pos:start="107:38" pos:end="107:53">samples_per_byte</name> <operator pos:start="107:55" pos:end="107:55">=</operator> <literal type="number" pos:start="107:57" pos:end="107:57">4</literal></expr>;</expr_stmt> <break pos:start="107:60" pos:end="107:65">break;</break>
        <case pos:start="108:9" pos:end="108:36">case <expr pos:start="108:14" pos:end="108:35"><name pos:start="108:14" pos:end="108:35">CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case> <expr_stmt pos:start="108:38" pos:end="108:58"><expr pos:start="108:38" pos:end="108:57"><name pos:start="108:38" pos:end="108:53">samples_per_byte</name> <operator pos:start="108:55" pos:end="108:55">=</operator> <literal type="number" pos:start="108:57" pos:end="108:57">3</literal></expr>;</expr_stmt> <break pos:start="108:60" pos:end="108:65">break;</break>
        <case pos:start="109:9" pos:end="109:36">case <expr pos:start="109:14" pos:end="109:35"><name pos:start="109:14" pos:end="109:35">CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case> <expr_stmt pos:start="109:38" pos:end="109:58"><expr pos:start="109:38" pos:end="109:57"><name pos:start="109:38" pos:end="109:53">samples_per_byte</name> <operator pos:start="109:55" pos:end="109:55">=</operator> <literal type="number" pos:start="109:57" pos:end="109:57">2</literal></expr>;</expr_stmt> <break pos:start="109:60" pos:end="109:65">break;</break>
        </block_content>}</block></switch>
        <if_stmt pos:start="111:9" pos:end="114:9"><if pos:start="111:9" pos:end="114:9">if <condition pos:start="111:12" pos:end="111:37">(<expr pos:start="111:13" pos:end="111:36"><operator pos:start="111:13" pos:end="111:13">!</operator><name pos:start="111:14" pos:end="111:25"><name pos:start="111:14" pos:end="111:14">s</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:22">status</name><index pos:start="111:23" pos:end="111:25">[<expr pos:start="111:24" pos:end="111:24"><literal type="number" pos:start="111:24" pos:end="111:24">0</literal></expr>]</index></name><operator pos:start="111:26" pos:end="111:26">.</operator><name pos:start="111:27" pos:end="111:36">step_index</name></expr>)</condition> <block pos:start="111:39" pos:end="114:9">{<block_content pos:start="112:13" pos:end="113:27">
            <expr_stmt pos:start="112:13" pos:end="112:25"><expr pos:start="112:13" pos:end="112:24"><name pos:start="112:13" pos:end="112:22">nb_samples</name><operator pos:start="112:23" pos:end="112:24">++</operator></expr>;</expr_stmt>
            <expr_stmt pos:start="113:13" pos:end="113:27"><expr pos:start="113:13" pos:end="113:26"><name pos:start="113:13" pos:end="113:20">buf_size</name> <operator pos:start="113:22" pos:end="113:23">-=</operator> <name pos:start="113:25" pos:end="113:26">ch</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="115:9" pos:end="115:55"><expr pos:start="115:9" pos:end="115:54"><name pos:start="115:9" pos:end="115:18">nb_samples</name> <operator pos:start="115:20" pos:end="115:21">+=</operator> <name pos:start="115:23" pos:end="115:30">buf_size</name> <operator pos:start="115:32" pos:end="115:32">*</operator> <name pos:start="115:34" pos:end="115:49">samples_per_byte</name> <operator pos:start="115:51" pos:end="115:51">/</operator> <name pos:start="115:53" pos:end="115:54">ch</name></expr>;</expr_stmt>
        <break pos:start="116:9" pos:end="116:14">break;</break>
    </block_content>}</block>
    <case pos:start="118:5" pos:end="118:28">case <expr pos:start="118:10" pos:end="118:27"><name pos:start="118:10" pos:end="118:27">CODEC_ID_ADPCM_SWF</name></expr>:</case>
    <block pos:start="119:5" pos:end="130:5">{<block_content pos:start="120:9" pos:end="129:14">
        <decl_stmt pos:start="120:9" pos:end="120:46"><decl pos:start="120:9" pos:end="120:45"><type pos:start="120:9" pos:end="120:11"><name pos:start="120:9" pos:end="120:11">int</name></type> <name pos:start="120:13" pos:end="120:20">buf_bits</name>       <init pos:start="120:28" pos:end="120:45">= <expr pos:start="120:30" pos:end="120:45"><name pos:start="120:30" pos:end="120:37">buf_size</name> <operator pos:start="120:39" pos:end="120:39">*</operator> <literal type="number" pos:start="120:41" pos:end="120:43">8</literal> <operator pos:start="120:43" pos:end="120:43">-</operator> <literal type="number" pos:start="120:45" pos:end="120:45">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="121:9" pos:end="121:47"><decl pos:start="121:9" pos:end="121:46"><type pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:11">int</name></type> <name pos:start="121:13" pos:end="121:17">nbits</name>          <init pos:start="121:28" pos:end="121:46">= <expr pos:start="121:30" pos:end="121:46"><operator pos:start="121:30" pos:end="121:30">(</operator><name pos:start="121:31" pos:end="121:36"><name pos:start="121:31" pos:end="121:33">buf</name><index pos:start="121:34" pos:end="121:36">[<expr pos:start="121:35" pos:end="121:35"><literal type="number" pos:start="121:35" pos:end="121:35">0</literal></expr>]</index></name> <operator pos:start="121:38" pos:end="121:39">&gt;&gt;</operator> <literal type="number" pos:start="121:41" pos:end="121:41">6</literal><operator pos:start="121:42" pos:end="121:42">)</operator> <operator pos:start="121:44" pos:end="121:44">+</operator> <literal type="number" pos:start="121:46" pos:end="121:46">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="122:9" pos:end="122:37"><decl pos:start="122:9" pos:end="122:36"><type pos:start="122:9" pos:end="122:11"><name pos:start="122:9" pos:end="122:11">int</name></type> <name pos:start="122:13" pos:end="122:26">block_hdr_size</name> <init pos:start="122:28" pos:end="122:36">= <expr pos:start="122:30" pos:end="122:36"><literal type="number" pos:start="122:30" pos:end="122:31">22</literal> <operator pos:start="122:33" pos:end="122:33">*</operator> <name pos:start="122:35" pos:end="122:36">ch</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="123:9" pos:end="123:64"><decl pos:start="123:9" pos:end="123:63"><type pos:start="123:9" pos:end="123:11"><name pos:start="123:9" pos:end="123:11">int</name></type> <name pos:start="123:13" pos:end="123:22">block_size</name>     <init pos:start="123:28" pos:end="123:63">= <expr pos:start="123:30" pos:end="123:63"><name pos:start="123:30" pos:end="123:43">block_hdr_size</name> <operator pos:start="123:45" pos:end="123:45">+</operator> <name pos:start="123:47" pos:end="123:51">nbits</name> <operator pos:start="123:53" pos:end="123:53">*</operator> <name pos:start="123:55" pos:end="123:56">ch</name> <operator pos:start="123:58" pos:end="123:58">*</operator> <literal type="number" pos:start="123:60" pos:end="123:63">4095</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="124:9" pos:end="124:51"><decl pos:start="124:9" pos:end="124:50"><type pos:start="124:9" pos:end="124:11"><name pos:start="124:9" pos:end="124:11">int</name></type> <name pos:start="124:13" pos:end="124:19">nblocks</name>        <init pos:start="124:28" pos:end="124:50">= <expr pos:start="124:30" pos:end="124:50"><name pos:start="124:30" pos:end="124:37">buf_bits</name> <operator pos:start="124:39" pos:end="124:39">/</operator> <name pos:start="124:41" pos:end="124:50">block_size</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="125:9" pos:end="125:61"><decl pos:start="125:9" pos:end="125:60"><type pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">int</name></type> <name pos:start="125:13" pos:end="125:21">bits_left</name>      <init pos:start="125:28" pos:end="125:60">= <expr pos:start="125:30" pos:end="125:60"><name pos:start="125:30" pos:end="125:37">buf_bits</name> <operator pos:start="125:39" pos:end="125:39">-</operator> <name pos:start="125:41" pos:end="125:47">nblocks</name> <operator pos:start="125:49" pos:end="125:49">*</operator> <name pos:start="125:51" pos:end="125:60">block_size</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="126:9" pos:end="126:44"><expr pos:start="126:9" pos:end="126:43"><name pos:start="126:9" pos:end="126:18">nb_samples</name>         <operator pos:start="126:28" pos:end="126:28">=</operator> <name pos:start="126:30" pos:end="126:36">nblocks</name> <operator pos:start="126:38" pos:end="126:38">*</operator> <literal type="number" pos:start="126:40" pos:end="126:43">4096</literal></expr>;</expr_stmt>
        <if_stmt pos:start="127:9" pos:end="128:74"><if pos:start="127:9" pos:end="128:74">if <condition pos:start="127:12" pos:end="127:40">(<expr pos:start="127:13" pos:end="127:39"><name pos:start="127:13" pos:end="127:21">bits_left</name> <operator pos:start="127:23" pos:end="127:24">&gt;=</operator> <name pos:start="127:26" pos:end="127:39">block_hdr_size</name></expr>)</condition><block type="pseudo" pos:start="128:13" pos:end="128:74"><block_content pos:start="128:13" pos:end="128:74">
            <expr_stmt pos:start="128:13" pos:end="128:74"><expr pos:start="128:13" pos:end="128:73"><name pos:start="128:13" pos:end="128:22">nb_samples</name> <operator pos:start="128:24" pos:end="128:25">+=</operator> <literal type="number" pos:start="128:27" pos:end="128:29">1</literal> <operator pos:start="128:29" pos:end="128:29">+</operator> <operator pos:start="128:31" pos:end="128:31">(</operator><name pos:start="128:32" pos:end="128:40">bits_left</name> <operator pos:start="128:42" pos:end="128:42">-</operator> <name pos:start="128:44" pos:end="128:57">block_hdr_size</name><operator pos:start="128:58" pos:end="128:58">)</operator> <operator pos:start="128:60" pos:end="128:60">/</operator> <operator pos:start="128:62" pos:end="128:62">(</operator><name pos:start="128:63" pos:end="128:67">nbits</name> <operator pos:start="128:69" pos:end="128:69">*</operator> <name pos:start="128:71" pos:end="128:72">ch</name><operator pos:start="128:73" pos:end="128:73">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break pos:start="129:9" pos:end="129:14">break;</break>
    </block_content>}</block>
    <case pos:start="131:5" pos:end="131:28">case <expr pos:start="131:10" pos:end="131:27"><name pos:start="131:10" pos:end="131:27">CODEC_ID_ADPCM_THP</name></expr>:</case>
        <expr_stmt pos:start="132:9" pos:end="132:30"><expr pos:start="132:9" pos:end="132:29"><name pos:start="132:9" pos:end="132:25">has_coded_samples</name> <operator pos:start="132:27" pos:end="132:27">=</operator> <literal type="number" pos:start="132:29" pos:end="132:29">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="133:9" pos:end="134:43"><if pos:start="133:9" pos:end="134:43">if <condition pos:start="133:12" pos:end="133:25">(<expr pos:start="133:13" pos:end="133:24"><name pos:start="133:13" pos:end="133:20">buf_size</name> <operator pos:start="133:22" pos:end="133:22">&lt;</operator> <literal type="number" pos:start="133:24" pos:end="133:24">8</literal></expr>)</condition><block type="pseudo" pos:start="134:9" pos:end="134:43"><block_content pos:start="134:9" pos:end="134:43">
        <expr_stmt pos:start="134:9" pos:end="134:43"><expr pos:start="134:9" pos:end="134:42"><operator pos:start="134:9" pos:end="134:9">*</operator><name pos:start="134:10" pos:end="134:22">coded_samples</name>  <operator pos:start="134:25" pos:end="134:25">=</operator> <call pos:start="134:27" pos:end="134:42"><name pos:start="134:27" pos:end="134:33">AV_RB32</name><argument_list pos:start="134:34" pos:end="134:42">(<argument pos:start="134:35" pos:end="134:41"><expr pos:start="134:35" pos:end="134:41"><operator pos:start="134:35" pos:end="134:35">&amp;</operator><name pos:start="134:36" pos:end="134:41"><name pos:start="134:36" pos:end="134:38">buf</name><index pos:start="134:39" pos:end="134:41">[<expr pos:start="134:40" pos:end="134:40"><literal type="number" pos:start="134:40" pos:end="134:40">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="135:9" pos:end="135:46"><expr pos:start="135:9" pos:end="135:45"><operator pos:start="135:9" pos:end="135:9">*</operator><name pos:start="135:10" pos:end="135:22">coded_samples</name> <operator pos:start="135:24" pos:end="135:25">-=</operator> <operator pos:start="135:27" pos:end="135:27">*</operator><name pos:start="135:28" pos:end="135:40">coded_samples</name> <operator pos:start="135:42" pos:end="135:42">%</operator> <literal type="number" pos:start="135:44" pos:end="135:45">14</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="136:9" pos:end="136:58"><expr pos:start="136:9" pos:end="136:57"><name pos:start="136:9" pos:end="136:18">nb_samples</name>      <operator pos:start="136:25" pos:end="136:25">=</operator> <operator pos:start="136:27" pos:end="136:27">(</operator><name pos:start="136:28" pos:end="136:35">buf_size</name> <operator pos:start="136:37" pos:end="136:37">-</operator> <literal type="number" pos:start="136:39" pos:end="136:40">80</literal><operator pos:start="136:41" pos:end="136:41">)</operator> <operator pos:start="136:43" pos:end="136:43">/</operator> <operator pos:start="136:45" pos:end="136:45">(</operator><literal type="number" pos:start="136:46" pos:end="136:46">8</literal> <operator pos:start="136:48" pos:end="136:48">*</operator> <name pos:start="136:50" pos:end="136:51">ch</name><operator pos:start="136:52" pos:end="136:52">)</operator> <operator pos:start="136:54" pos:end="136:54">*</operator> <literal type="number" pos:start="136:56" pos:end="136:57">14</literal></expr>;</expr_stmt>
        <break pos:start="137:9" pos:end="137:14">break;</break>
    <case pos:start="138:5" pos:end="138:27">case <expr pos:start="138:10" pos:end="138:26"><name pos:start="138:10" pos:end="138:26">CODEC_ID_ADPCM_XA</name></expr>:</case>
        <expr_stmt pos:start="139:9" pos:end="139:49"><expr pos:start="139:9" pos:end="139:48"><name pos:start="139:9" pos:end="139:18">nb_samples</name> <operator pos:start="139:20" pos:end="139:20">=</operator> <operator pos:start="139:22" pos:end="139:22">(</operator><name pos:start="139:23" pos:end="139:30">buf_size</name> <operator pos:start="139:32" pos:end="139:32">/</operator> <literal type="number" pos:start="139:34" pos:end="139:36">128</literal><operator pos:start="139:37" pos:end="139:37">)</operator> <operator pos:start="139:39" pos:end="139:39">*</operator> <literal type="number" pos:start="139:41" pos:end="139:43">224</literal> <operator pos:start="139:45" pos:end="139:45">/</operator> <name pos:start="139:47" pos:end="139:48">ch</name></expr>;</expr_stmt>
        <break pos:start="140:9" pos:end="140:14">break;</break>
    </block_content>}</block></switch>
    <comment type="block" pos:start="142:5" pos:end="142:37">/* validate coded sample count */</comment>
    <if_stmt pos:start="143:5" pos:end="144:35"><if pos:start="143:5" pos:end="144:35">if <condition pos:start="143:8" pos:end="143:82">(<expr pos:start="143:9" pos:end="143:81"><name pos:start="143:9" pos:end="143:25">has_coded_samples</name> <operator pos:start="143:27" pos:end="143:28">&amp;&amp;</operator> <operator pos:start="143:30" pos:end="143:30">(</operator><operator pos:start="143:31" pos:end="143:31">*</operator><name pos:start="143:32" pos:end="143:44">coded_samples</name> <operator pos:start="143:46" pos:end="143:47">&lt;=</operator> <literal type="number" pos:start="143:49" pos:end="143:49">0</literal> <operator pos:start="143:51" pos:end="143:52">||</operator> <operator pos:start="143:54" pos:end="143:54">*</operator><name pos:start="143:55" pos:end="143:67">coded_samples</name> <operator pos:start="143:69" pos:end="143:69">&gt;</operator> <name pos:start="143:71" pos:end="143:80">nb_samples</name><operator pos:start="143:81" pos:end="143:81">)</operator></expr>)</condition><block type="pseudo" pos:start="144:9" pos:end="144:35"><block_content pos:start="144:9" pos:end="144:35">
        <return pos:start="144:9" pos:end="144:35">return <expr pos:start="144:16" pos:end="144:34"><name pos:start="144:16" pos:end="144:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="145:5" pos:end="145:22">return <expr pos:start="145:12" pos:end="145:21"><name pos:start="145:12" pos:end="145:21">nb_samples</name></expr>;</return>
</block_content>}</block></function></unit>
