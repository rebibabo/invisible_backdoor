<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24733.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">moxiesim_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MoxieCPU</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:24">= <expr pos:start="5:21" pos:end="5:24"><name pos:start="5:21" pos:end="5:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">ram_addr_t</name></type> <name pos:start="7:16" pos:end="7:23">ram_size</name> <init pos:start="7:25" pos:end="7:43">= <expr pos:start="7:27" pos:end="7:43"><name pos:start="7:27" pos:end="7:43"><name pos:start="7:27" pos:end="7:33">machine</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:25">cpu_model</name> <init pos:start="9:27" pos:end="9:46">= <expr pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:35">machine</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">kernel_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:57"><decl pos:start="13:5" pos:end="13:56"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:30">kernel_cmdline</name> <init pos:start="13:32" pos:end="13:56">= <expr pos:start="13:34" pos:end="13:56"><name pos:start="13:34" pos:end="13:56"><name pos:start="13:34" pos:end="13:40">machine</name><operator pos:start="13:41" pos:end="13:42">-&gt;</operator><name pos:start="13:43" pos:end="13:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:59"><decl pos:start="15:5" pos:end="15:58"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:31">initrd_filename</name> <init pos:start="15:33" pos:end="15:58">= <expr pos:start="15:35" pos:end="15:58"><name pos:start="15:35" pos:end="15:58"><name pos:start="15:35" pos:end="15:41">machine</name><operator pos:start="15:42" pos:end="15:43">-&gt;</operator><name pos:start="15:44" pos:end="15:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">CPUMoxieState</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:22">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:57"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:35">address_space_mem</name> <init pos:start="19:37" pos:end="19:57">= <expr pos:start="19:39" pos:end="19:57"><call pos:start="19:39" pos:end="19:57"><name pos:start="19:39" pos:end="19:55">get_system_memory</name><argument_list pos:start="19:56" pos:end="19:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:46"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">ram</name> <init pos:start="21:23" pos:end="21:46">= <expr pos:start="21:25" pos:end="21:46"><call pos:start="21:25" pos:end="21:46"><name pos:start="21:25" pos:end="21:29">g_new</name><argument_list pos:start="21:30" pos:end="21:46">(<argument pos:start="21:31" pos:end="21:42"><expr pos:start="21:31" pos:end="21:42"><name pos:start="21:31" pos:end="21:42">MemoryRegion</name></expr></argument>, <argument pos:start="21:45" pos:end="21:45"><expr pos:start="21:45" pos:end="21:45"><literal type="number" pos:start="21:45" pos:end="21:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:46"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:21">rom</name> <init pos:start="23:23" pos:end="23:46">= <expr pos:start="23:25" pos:end="23:46"><call pos:start="23:25" pos:end="23:46"><name pos:start="23:25" pos:end="23:29">g_new</name><argument_list pos:start="23:30" pos:end="23:46">(<argument pos:start="23:31" pos:end="23:42"><expr pos:start="23:31" pos:end="23:42"><name pos:start="23:31" pos:end="23:42">MemoryRegion</name></expr></argument>, <argument pos:start="23:45" pos:end="23:45"><expr pos:start="23:45" pos:end="23:45"><literal type="number" pos:start="23:45" pos:end="23:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">hwaddr</name></type> <name pos:start="25:12" pos:end="25:19">ram_base</name> <init pos:start="25:21" pos:end="25:30">= <expr pos:start="25:23" pos:end="25:30"><literal type="number" pos:start="25:23" pos:end="25:30">0x200000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:16">LoaderParams</name></type> <name pos:start="27:18" pos:end="27:30">loader_params</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:20">/* Init CPUs. */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">cpu_model</name> <operator pos:start="33:19" pos:end="33:20">==</operator> <name pos:start="33:22" pos:end="33:25">NULL</name></expr>)</condition> <block pos:start="33:28" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:42">

        <expr_stmt pos:start="35:9" pos:end="35:42"><expr pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:17">cpu_model</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <literal type="string" pos:start="35:21" pos:end="35:41">"MoxieLite-moxie-cpu"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:65"><expr pos:start="39:5" pos:end="39:64"><name pos:start="39:5" pos:end="39:7">cpu</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:64"><name pos:start="39:11" pos:end="39:19">MOXIE_CPU</name><argument_list pos:start="39:20" pos:end="39:64">(<argument pos:start="39:21" pos:end="39:63"><expr pos:start="39:21" pos:end="39:63"><call pos:start="39:21" pos:end="39:63"><name pos:start="39:21" pos:end="39:36">cpu_generic_init</name><argument_list pos:start="39:37" pos:end="39:63">(<argument pos:start="39:38" pos:end="39:51"><expr pos:start="39:38" pos:end="39:51"><name pos:start="39:38" pos:end="39:51">TYPE_MOXIE_CPU</name></expr></argument>, <argument pos:start="39:54" pos:end="39:62"><expr pos:start="39:54" pos:end="39:62"><name pos:start="39:54" pos:end="39:62">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:13">(<expr pos:start="41:9" pos:end="41:12"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:12">cpu</name></expr>)</condition> <block pos:start="41:15" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:16">

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><call pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="43:58">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:57"><expr pos:start="43:25" pos:end="43:57"><literal type="string" pos:start="43:25" pos:end="43:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:16"><expr pos:start="45:9" pos:end="45:15"><call pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:12">exit</name><argument_list pos:start="45:13" pos:end="45:15">(<argument pos:start="45:14" pos:end="45:14"><expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:7">env</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <operator pos:start="49:11" pos:end="49:11">&amp;</operator><name pos:start="49:12" pos:end="49:19"><name pos:start="49:12" pos:end="49:14">cpu</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:45"><expr pos:start="53:5" pos:end="53:44"><call pos:start="53:5" pos:end="53:44"><name pos:start="53:5" pos:end="53:23">qemu_register_reset</name><argument_list pos:start="53:24" pos:end="53:44">(<argument pos:start="53:25" pos:end="53:38"><expr pos:start="53:25" pos:end="53:38"><name pos:start="53:25" pos:end="53:38">main_cpu_reset</name></expr></argument>, <argument pos:start="53:41" pos:end="53:43"><expr pos:start="53:41" pos:end="53:43"><name pos:start="53:41" pos:end="53:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:23">/* Allocate RAM. */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:78"><expr pos:start="59:5" pos:end="59:77"><call pos:start="59:5" pos:end="59:77"><name pos:start="59:5" pos:end="59:26">memory_region_init_ram</name><argument_list pos:start="59:27" pos:end="59:77">(<argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">ram</name></expr></argument>, <argument pos:start="59:33" pos:end="59:36"><expr pos:start="59:33" pos:end="59:36"><name pos:start="59:33" pos:end="59:36">NULL</name></expr></argument>, <argument pos:start="59:39" pos:end="59:52"><expr pos:start="59:39" pos:end="59:52"><literal type="string" pos:start="59:39" pos:end="59:52">"moxiesim.ram"</literal></expr></argument>, <argument pos:start="59:55" pos:end="59:62"><expr pos:start="59:55" pos:end="59:62"><name pos:start="59:55" pos:end="59:62">ram_size</name></expr></argument>, <argument pos:start="59:65" pos:end="59:76"><expr pos:start="59:65" pos:end="59:76"><operator pos:start="59:65" pos:end="59:65">&amp;</operator><name pos:start="59:66" pos:end="59:76">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:66"><expr pos:start="61:5" pos:end="61:65"><call pos:start="61:5" pos:end="61:65"><name pos:start="61:5" pos:end="61:31">memory_region_add_subregion</name><argument_list pos:start="61:32" pos:end="61:65">(<argument pos:start="61:33" pos:end="61:49"><expr pos:start="61:33" pos:end="61:49"><name pos:start="61:33" pos:end="61:49">address_space_mem</name></expr></argument>, <argument pos:start="61:52" pos:end="61:59"><expr pos:start="61:52" pos:end="61:59"><name pos:start="61:52" pos:end="61:59">ram_base</name></expr></argument>, <argument pos:start="61:62" pos:end="61:64"><expr pos:start="61:62" pos:end="61:64"><name pos:start="61:62" pos:end="61:64">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:79"><expr pos:start="65:5" pos:end="65:78"><call pos:start="65:5" pos:end="65:78"><name pos:start="65:5" pos:end="65:26">memory_region_init_ram</name><argument_list pos:start="65:27" pos:end="65:78">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">rom</name></expr></argument>, <argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">NULL</name></expr></argument>, <argument pos:start="65:39" pos:end="65:49"><expr pos:start="65:39" pos:end="65:49"><literal type="string" pos:start="65:39" pos:end="65:49">"moxie.rom"</literal></expr></argument>, <argument pos:start="65:52" pos:end="65:63"><expr pos:start="65:52" pos:end="65:63"><literal type="number" pos:start="65:52" pos:end="65:54">128</literal> <operator pos:start="65:56" pos:end="65:56">*</operator> <literal type="number" pos:start="65:58" pos:end="65:63">0x1000</literal></expr></argument>, <argument pos:start="65:66" pos:end="65:77"><expr pos:start="65:66" pos:end="65:77"><operator pos:start="65:66" pos:end="65:66">&amp;</operator><name pos:start="65:67" pos:end="65:77">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:66"><expr pos:start="67:5" pos:end="67:65"><call pos:start="67:5" pos:end="67:65"><name pos:start="67:5" pos:end="67:31">memory_region_add_subregion</name><argument_list pos:start="67:32" pos:end="67:65">(<argument pos:start="67:33" pos:end="67:51"><expr pos:start="67:33" pos:end="67:51"><call pos:start="67:33" pos:end="67:51"><name pos:start="67:33" pos:end="67:49">get_system_memory</name><argument_list pos:start="67:50" pos:end="67:51">()</argument_list></call></expr></argument>, <argument pos:start="67:54" pos:end="67:59"><expr pos:start="67:54" pos:end="67:59"><literal type="number" pos:start="67:54" pos:end="67:59">0x1000</literal></expr></argument>, <argument pos:start="67:62" pos:end="67:64"><expr pos:start="67:62" pos:end="67:64"><name pos:start="67:62" pos:end="67:64">rom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="83:5"><if pos:start="71:5" pos:end="83:5">if <condition pos:start="71:8" pos:end="71:24">(<expr pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:23">kernel_filename</name></expr>)</condition> <block pos:start="71:26" pos:end="83:5">{<block_content pos:start="73:9" pos:end="81:41">

        <expr_stmt pos:start="73:9" pos:end="73:42"><expr pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:21">loader_params</name><operator pos:start="73:22" pos:end="73:22">.</operator><name pos:start="73:23" pos:end="73:30">ram_size</name></name> <operator pos:start="73:32" pos:end="73:32">=</operator> <name pos:start="73:34" pos:end="73:41">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:56"><expr pos:start="75:9" pos:end="75:55"><name pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:21">loader_params</name><operator pos:start="75:22" pos:end="75:22">.</operator><name pos:start="75:23" pos:end="75:37">kernel_filename</name></name> <operator pos:start="75:39" pos:end="75:39">=</operator> <name pos:start="75:41" pos:end="75:55">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:54"><expr pos:start="77:9" pos:end="77:53"><name pos:start="77:9" pos:end="77:36"><name pos:start="77:9" pos:end="77:21">loader_params</name><operator pos:start="77:22" pos:end="77:22">.</operator><name pos:start="77:23" pos:end="77:36">kernel_cmdline</name></name> <operator pos:start="77:38" pos:end="77:38">=</operator> <name pos:start="77:40" pos:end="77:53">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:56"><expr pos:start="79:9" pos:end="79:55"><name pos:start="79:9" pos:end="79:37"><name pos:start="79:9" pos:end="79:21">loader_params</name><operator pos:start="79:22" pos:end="79:22">.</operator><name pos:start="79:23" pos:end="79:37">initrd_filename</name></name> <operator pos:start="79:39" pos:end="79:39">=</operator> <name pos:start="79:41" pos:end="79:55">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:41"><expr pos:start="81:9" pos:end="81:40"><call pos:start="81:9" pos:end="81:40"><name pos:start="81:9" pos:end="81:19">load_kernel</name><argument_list pos:start="81:20" pos:end="81:40">(<argument pos:start="81:21" pos:end="81:23"><expr pos:start="81:21" pos:end="81:23"><name pos:start="81:21" pos:end="81:23">cpu</name></expr></argument>, <argument pos:start="81:26" pos:end="81:39"><expr pos:start="81:26" pos:end="81:39"><operator pos:start="81:26" pos:end="81:26">&amp;</operator><name pos:start="81:27" pos:end="81:39">loader_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:47">/* A single 16450 sits at offset 0x3f8.  */</comment>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:22">(<expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:18">serial_hds</name><index pos:start="89:19" pos:end="89:21">[<expr pos:start="89:20" pos:end="89:20"><literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="89:24" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:72">

        <expr_stmt pos:start="91:9" pos:end="93:72"><expr pos:start="91:9" pos:end="93:71"><call pos:start="91:9" pos:end="93:71"><name pos:start="91:9" pos:end="91:22">serial_mm_init</name><argument_list pos:start="91:23" pos:end="93:71">(<argument pos:start="91:24" pos:end="91:40"><expr pos:start="91:24" pos:end="91:40"><name pos:start="91:24" pos:end="91:40">address_space_mem</name></expr></argument>, <argument pos:start="91:43" pos:end="91:47"><expr pos:start="91:43" pos:end="91:47"><literal type="number" pos:start="91:43" pos:end="91:47">0x3f8</literal></expr></argument>, <argument pos:start="91:50" pos:end="91:50"><expr pos:start="91:50" pos:end="91:50"><literal type="number" pos:start="91:50" pos:end="91:50">0</literal></expr></argument>, <argument pos:start="91:53" pos:end="91:63"><expr pos:start="91:53" pos:end="91:63"><name pos:start="91:53" pos:end="91:63"><name pos:start="91:53" pos:end="91:55">env</name><operator pos:start="91:56" pos:end="91:57">-&gt;</operator><name pos:start="91:58" pos:end="91:60">irq</name><index pos:start="91:61" pos:end="91:63">[<expr pos:start="91:62" pos:end="91:62"><literal type="number" pos:start="91:62" pos:end="91:62">4</literal></expr>]</index></name></expr></argument>,

                       <argument pos:start="93:24" pos:end="93:33"><expr pos:start="93:24" pos:end="93:33"><literal type="number" pos:start="93:24" pos:end="93:30">8000000</literal><operator pos:start="93:31" pos:end="93:31">/</operator><literal type="number" pos:start="93:32" pos:end="93:33">16</literal></expr></argument>, <argument pos:start="93:36" pos:end="93:48"><expr pos:start="93:36" pos:end="93:48"><name pos:start="93:36" pos:end="93:48"><name pos:start="93:36" pos:end="93:45">serial_hds</name><index pos:start="93:46" pos:end="93:48">[<expr pos:start="93:47" pos:end="93:47"><literal type="number" pos:start="93:47" pos:end="93:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:51" pos:end="93:70"><expr pos:start="93:51" pos:end="93:70"><name pos:start="93:51" pos:end="93:70">DEVICE_LITTLE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
