<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11341.c" pos:tabs="8"><function pos:start="1:1" pos:end="609:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">vnc_display_open</name><parameter_list pos:start="1:22" pos:end="1:74">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:34">DisplayState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">ds</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:59"><decl pos:start="1:41" pos:end="1:59"><type pos:start="1:41" pos:end="1:59"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:59">display</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:66">Error</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier><modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="609:1">{<block_content pos:start="5:5" pos:end="608:0">

    <decl_stmt pos:start="5:5" pos:end="5:65"><decl pos:start="5:5" pos:end="5:64"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VncDisplay</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">vs</name> <init pos:start="5:20" pos:end="5:64">= <expr pos:start="5:22" pos:end="5:64"><ternary pos:start="5:22" pos:end="5:64"><condition pos:start="5:22" pos:end="5:25"><expr pos:start="5:22" pos:end="5:23"><name pos:start="5:22" pos:end="5:23">ds</name></expr> ?</condition><then pos:start="5:27" pos:end="5:50"> <expr pos:start="5:27" pos:end="5:50"><operator pos:start="5:27" pos:end="5:27">(</operator><name pos:start="5:28" pos:end="5:37">VncDisplay</name> <operator pos:start="5:39" pos:end="5:39">*</operator><operator pos:start="5:40" pos:end="5:40">)</operator><name pos:start="5:41" pos:end="5:50"><name pos:start="5:41" pos:end="5:42">ds</name><operator pos:start="5:43" pos:end="5:44">-&gt;</operator><name pos:start="5:45" pos:end="5:50">opaque</name></name></expr> </then><else pos:start="5:52" pos:end="5:64">: <expr pos:start="5:54" pos:end="5:64"><name pos:start="5:54" pos:end="5:64">vnc_display</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:23">options</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">password</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">reverse</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="13:1" pos:end="13:21">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:21">CONFIG_VNC_TLS</name></cpp:ifdef>

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">tls</name> <init pos:start="15:13" pos:end="15:15">= <expr pos:start="15:15" pos:end="15:15"><literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr></init></decl>, <decl pos:start="15:18" pos:end="15:25"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:21">x509</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="19:1" pos:end="19:22">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:12">sasl</name> <init pos:start="21:14" pos:end="21:16">= <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="28:0"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">saslErr</name></decl>;</decl_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="27:1" pos:end="27:55">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:55"><call pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:11">defined</name><argument_list pos:start="27:12" pos:end="27:27">(<argument pos:start="27:13" pos:end="27:26"><expr pos:start="27:13" pos:end="27:26"><name pos:start="27:13" pos:end="27:26">CONFIG_VNC_TLS</name></expr></argument>)</argument_list></call> <operator pos:start="27:29" pos:end="27:30">||</operator> <call pos:start="27:32" pos:end="27:55"><name pos:start="27:32" pos:end="27:38">defined</name><argument_list pos:start="27:39" pos:end="27:55">(<argument pos:start="27:40" pos:end="27:54"><expr pos:start="27:40" pos:end="27:54"><name pos:start="27:40" pos:end="27:54">CONFIG_VNC_SASL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="29:5" pos:end="32:0"><decl pos:start="29:5" pos:end="29:15"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">acl</name> <init pos:start="29:13" pos:end="29:15">= <expr pos:start="29:15" pos:end="29:15"><literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="33:5" pos:end="33:26"><decl pos:start="33:5" pos:end="33:25"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:21">lock_key_sync</name> <init pos:start="33:23" pos:end="33:25">= <expr pos:start="33:25" pos:end="33:25"><literal type="number" pos:start="33:25" pos:end="33:25">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:20">vnc_display</name></expr>)</condition> <block pos:start="37:23" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:15">

        <expr_stmt pos:start="39:9" pos:end="39:51"><expr pos:start="39:9" pos:end="39:50"><call pos:start="39:9" pos:end="39:50"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="39:50">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:49"><expr pos:start="39:26" pos:end="39:49"><literal type="string" pos:start="39:26" pos:end="39:49">"VNC display not active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><call pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:21">vnc_display_close</name><argument_list pos:start="45:22" pos:end="45:25">(<argument pos:start="45:23" pos:end="45:24"><expr pos:start="45:23" pos:end="45:24"><name pos:start="45:23" pos:end="45:24">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:15"><if pos:start="47:5" pos:end="49:15">if <condition pos:start="47:8" pos:end="47:37">(<expr pos:start="47:9" pos:end="47:36"><call pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:14">strcmp</name><argument_list pos:start="47:15" pos:end="47:31">(<argument pos:start="47:16" pos:end="47:22"><expr pos:start="47:16" pos:end="47:22"><name pos:start="47:16" pos:end="47:22">display</name></expr></argument>, <argument pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:30"><literal type="string" pos:start="47:25" pos:end="47:30">"none"</literal></expr></argument>)</argument_list></call> <operator pos:start="47:33" pos:end="47:34">==</operator> <literal type="number" pos:start="47:36" pos:end="47:36">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:15"><block_content pos:start="49:9" pos:end="49:15">

        <return pos:start="49:9" pos:end="49:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:36"><expr pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:6">vs</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:15">display</name></name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:35"><name pos:start="53:19" pos:end="53:26">g_strdup</name><argument_list pos:start="53:27" pos:end="53:35">(<argument pos:start="53:28" pos:end="53:34"><expr pos:start="53:28" pos:end="53:34"><name pos:start="53:28" pos:end="53:34">display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:56"><expr pos:start="55:5" pos:end="55:55"><name pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:6">vs</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:20">share_policy</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:55">VNC_SHARE_POLICY_ALLOW_EXCLUSIVE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:22"><expr pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:11">options</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:21">display</name></expr>;</expr_stmt>

    <while pos:start="61:5" pos:end="262:0">while <condition pos:start="61:11" pos:end="61:44">(<expr pos:start="61:12" pos:end="61:43"><operator pos:start="61:12" pos:end="61:12">(</operator><name pos:start="61:13" pos:end="61:19">options</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:42"><name pos:start="61:23" pos:end="61:28">strchr</name><argument_list pos:start="61:29" pos:end="61:42">(<argument pos:start="61:30" pos:end="61:36"><expr pos:start="61:30" pos:end="61:36"><name pos:start="61:30" pos:end="61:36">options</name></expr></argument>, <argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><literal type="char" pos:start="61:39" pos:end="61:41">','</literal></expr></argument>)</argument_list></call><operator pos:start="61:43" pos:end="61:43">)</operator></expr>)</condition> <block pos:start="61:46" pos:end="262:0">{<block_content pos:start="63:9" pos:end="255:9">

        <expr_stmt pos:start="63:9" pos:end="63:18"><expr pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:15">options</name><operator pos:start="63:16" pos:end="63:17">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="255:9"><if pos:start="65:9" pos:end="83:9">if <condition pos:start="65:12" pos:end="65:49">(<expr pos:start="65:13" pos:end="65:48"><call pos:start="65:13" pos:end="65:43"><name pos:start="65:13" pos:end="65:19">strncmp</name><argument_list pos:start="65:20" pos:end="65:43">(<argument pos:start="65:21" pos:end="65:27"><expr pos:start="65:21" pos:end="65:27"><name pos:start="65:21" pos:end="65:27">options</name></expr></argument>, <argument pos:start="65:30" pos:end="65:39"><expr pos:start="65:30" pos:end="65:39"><literal type="string" pos:start="65:30" pos:end="65:39">"password"</literal></expr></argument>, <argument pos:start="65:42" pos:end="65:42"><expr pos:start="65:42" pos:end="65:42"><literal type="number" pos:start="65:42" pos:end="65:42">8</literal></expr></argument>)</argument_list></call> <operator pos:start="65:45" pos:end="65:46">==</operator> <literal type="number" pos:start="65:48" pos:end="65:48">0</literal></expr>)</condition> <block pos:start="65:51" pos:end="83:9">{<block_content pos:start="67:13" pos:end="81:25">

            <if_stmt pos:start="67:13" pos:end="79:13"><if pos:start="67:13" pos:end="79:13">if <condition pos:start="67:16" pos:end="67:33">(<expr pos:start="67:17" pos:end="67:32"><call pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:30">fips_get_state</name><argument_list pos:start="67:31" pos:end="67:32">()</argument_list></call></expr>)</condition> <block pos:start="67:35" pos:end="79:13">{<block_content pos:start="69:17" pos:end="77:26">

                <expr_stmt pos:start="69:17" pos:end="75:56"><expr pos:start="69:17" pos:end="75:55"><call pos:start="69:17" pos:end="75:55"><name pos:start="69:17" pos:end="69:26">error_setg</name><argument_list pos:start="69:27" pos:end="75:55">(<argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><name pos:start="69:28" pos:end="69:31">errp</name></expr></argument>,

                           <argument pos:start="71:28" pos:end="75:54"><expr pos:start="71:28" pos:end="75:54"><literal type="string" pos:start="71:28" pos:end="71:74">"VNC password auth disabled due to FIPS mode, "</literal>

                           <literal type="string" pos:start="73:28" pos:end="73:80">"consider using the VeNCrypt or SASL authentication "</literal>

                           <literal type="string" pos:start="75:28" pos:end="75:54">"methods as an alternative"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="77:17" pos:end="77:26">goto <name pos:start="77:22" pos:end="77:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:25"><expr pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:20">password</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <literal type="number" pos:start="81:24" pos:end="81:24">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="81:27" pos:end="81:53">/* Require password auth */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="83:11" pos:end="87:9">else if <condition pos:start="83:19" pos:end="83:55">(<expr pos:start="83:20" pos:end="83:54"><call pos:start="83:20" pos:end="83:49"><name pos:start="83:20" pos:end="83:26">strncmp</name><argument_list pos:start="83:27" pos:end="83:49">(<argument pos:start="83:28" pos:end="83:34"><expr pos:start="83:28" pos:end="83:34"><name pos:start="83:28" pos:end="83:34">options</name></expr></argument>, <argument pos:start="83:37" pos:end="83:45"><expr pos:start="83:37" pos:end="83:45"><literal type="string" pos:start="83:37" pos:end="83:45">"reverse"</literal></expr></argument>, <argument pos:start="83:48" pos:end="83:48"><expr pos:start="83:48" pos:end="83:48"><literal type="number" pos:start="83:48" pos:end="83:48">7</literal></expr></argument>)</argument_list></call> <operator pos:start="83:51" pos:end="83:52">==</operator> <literal type="number" pos:start="83:54" pos:end="83:54">0</literal></expr>)</condition> <block pos:start="83:57" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:24">

            <expr_stmt pos:start="85:13" pos:end="85:24"><expr pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:19">reverse</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <literal type="number" pos:start="85:23" pos:end="85:23">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="87:11" pos:end="93:9">else if <condition pos:start="87:19" pos:end="87:65">(<expr pos:start="87:20" pos:end="87:64"><call pos:start="87:20" pos:end="87:59"><name pos:start="87:20" pos:end="87:26">strncmp</name><argument_list pos:start="87:27" pos:end="87:59">(<argument pos:start="87:28" pos:end="87:34"><expr pos:start="87:28" pos:end="87:34"><name pos:start="87:28" pos:end="87:34">options</name></expr></argument>, <argument pos:start="87:37" pos:end="87:54"><expr pos:start="87:37" pos:end="87:54"><literal type="string" pos:start="87:37" pos:end="87:54">"no-lock-key-sync"</literal></expr></argument>, <argument pos:start="87:57" pos:end="87:58"><expr pos:start="87:57" pos:end="87:58"><literal type="number" pos:start="87:57" pos:end="87:58">16</literal></expr></argument>)</argument_list></call> <operator pos:start="87:61" pos:end="87:62">==</operator> <literal type="number" pos:start="87:64" pos:end="87:64">0</literal></expr>)</condition> <block pos:start="87:67" pos:end="93:9">{<block_content pos:start="89:13" pos:end="92:0">

            <expr_stmt pos:start="89:13" pos:end="92:0"><expr pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:25">lock_key_sync</name> <operator pos:start="89:27" pos:end="89:27">=</operator> <literal type="number" pos:start="89:29" pos:end="89:29">0</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="91:1" pos:end="91:22">#<cpp:directive pos:start="91:2" pos:end="91:6">ifdef</cpp:directive> <name pos:start="91:8" pos:end="91:22">CONFIG_VNC_SASL</name></cpp:ifdef>

        </block_content>}</block></if> <if type="elseif" pos:start="93:11" pos:end="101:9">else if <condition pos:start="93:19" pos:end="93:52">(<expr pos:start="93:20" pos:end="93:51"><call pos:start="93:20" pos:end="93:46"><name pos:start="93:20" pos:end="93:26">strncmp</name><argument_list pos:start="93:27" pos:end="93:46">(<argument pos:start="93:28" pos:end="93:34"><expr pos:start="93:28" pos:end="93:34"><name pos:start="93:28" pos:end="93:34">options</name></expr></argument>, <argument pos:start="93:37" pos:end="93:42"><expr pos:start="93:37" pos:end="93:42"><literal type="string" pos:start="93:37" pos:end="93:42">"sasl"</literal></expr></argument>, <argument pos:start="93:45" pos:end="93:45"><expr pos:start="93:45" pos:end="93:45"><literal type="number" pos:start="93:45" pos:end="93:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="93:48" pos:end="93:49">==</operator> <literal type="number" pos:start="93:51" pos:end="93:51">0</literal></expr>)</condition> <block pos:start="93:54" pos:end="101:9">{<block_content pos:start="95:13" pos:end="100:0">

            <expr_stmt pos:start="95:13" pos:end="100:0"><expr pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:16">sasl</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <literal type="number" pos:start="95:20" pos:end="95:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="95:23" pos:end="95:45">/* Require SASL auth */</comment>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="99:1" pos:end="99:20">#<cpp:directive pos:start="99:2" pos:end="99:6">ifdef</cpp:directive> <name pos:start="99:8" pos:end="99:20">CONFIG_VNC_WS</name></cpp:ifdef>

        </block_content>}</block></if> <if type="elseif" pos:start="101:11" pos:end="161:9">else if <condition pos:start="101:19" pos:end="101:57">(<expr pos:start="101:20" pos:end="101:56"><call pos:start="101:20" pos:end="101:51"><name pos:start="101:20" pos:end="101:26">strncmp</name><argument_list pos:start="101:27" pos:end="101:51">(<argument pos:start="101:28" pos:end="101:34"><expr pos:start="101:28" pos:end="101:34"><name pos:start="101:28" pos:end="101:34">options</name></expr></argument>, <argument pos:start="101:37" pos:end="101:47"><expr pos:start="101:37" pos:end="101:47"><literal type="string" pos:start="101:37" pos:end="101:47">"websocket"</literal></expr></argument>, <argument pos:start="101:50" pos:end="101:50"><expr pos:start="101:50" pos:end="101:50"><literal type="number" pos:start="101:50" pos:end="101:50">9</literal></expr></argument>)</argument_list></call> <operator pos:start="101:53" pos:end="101:54">==</operator> <literal type="number" pos:start="101:56" pos:end="101:56">0</literal></expr>)</condition> <block pos:start="101:59" pos:end="161:9">{<block_content pos:start="103:13" pos:end="160:0">

            <decl_stmt pos:start="103:13" pos:end="103:30"><decl pos:start="103:13" pos:end="103:23"><type pos:start="103:13" pos:end="103:18"><name pos:start="103:13" pos:end="103:16">char</name> <modifier pos:start="103:18" pos:end="103:18">*</modifier></type><name pos:start="103:19" pos:end="103:23">start</name></decl>, <decl pos:start="103:26" pos:end="103:29"><type ref="prev" pos:start="103:13" pos:end="103:18"><modifier pos:start="103:26" pos:end="103:26">*</modifier></type><name pos:start="103:27" pos:end="103:29">end</name></decl>;</decl_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:30"><expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:14">vs</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:25">websocket</name></name> <operator pos:start="105:27" pos:end="105:27">=</operator> <literal type="number" pos:start="105:29" pos:end="105:29">1</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="109:13" pos:end="109:46">/* Check for 'websocket=&lt;port&gt;' */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:41"><expr pos:start="111:13" pos:end="111:40"><name pos:start="111:13" pos:end="111:17">start</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:40"><name pos:start="111:21" pos:end="111:26">strchr</name><argument_list pos:start="111:27" pos:end="111:40">(<argument pos:start="111:28" pos:end="111:34"><expr pos:start="111:28" pos:end="111:34"><name pos:start="111:28" pos:end="111:34">options</name></expr></argument>, <argument pos:start="111:37" pos:end="111:39"><expr pos:start="111:37" pos:end="111:39"><literal type="char" pos:start="111:37" pos:end="111:39">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:39"><expr pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:15">end</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <call pos:start="113:19" pos:end="113:38"><name pos:start="113:19" pos:end="113:24">strchr</name><argument_list pos:start="113:25" pos:end="113:38">(<argument pos:start="113:26" pos:end="113:32"><expr pos:start="113:26" pos:end="113:32"><name pos:start="113:26" pos:end="113:32">options</name></expr></argument>, <argument pos:start="113:35" pos:end="113:37"><expr pos:start="113:35" pos:end="113:37"><literal type="char" pos:start="113:35" pos:end="113:37">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="160:0"><if pos:start="115:13" pos:end="160:0">if <condition pos:start="115:16" pos:end="115:49">(<expr pos:start="115:17" pos:end="115:48"><name pos:start="115:17" pos:end="115:21">start</name> <operator pos:start="115:23" pos:end="115:24">&amp;&amp;</operator> <operator pos:start="115:26" pos:end="115:26">(</operator><operator pos:start="115:27" pos:end="115:27">!</operator><name pos:start="115:28" pos:end="115:30">end</name> <operator pos:start="115:32" pos:end="115:33">||</operator> <operator pos:start="115:35" pos:end="115:35">(</operator><name pos:start="115:36" pos:end="115:40">start</name> <operator pos:start="115:42" pos:end="115:42">&lt;</operator> <name pos:start="115:44" pos:end="115:46">end</name><operator pos:start="115:47" pos:end="115:47">)</operator><operator pos:start="115:48" pos:end="115:48">)</operator></expr>)</condition> <block pos:start="115:51" pos:end="160:0">{<block_content pos:start="117:17" pos:end="153:17">

                <decl_stmt pos:start="117:17" pos:end="117:64"><decl pos:start="117:17" pos:end="117:63"><type pos:start="117:17" pos:end="117:19"><name pos:start="117:17" pos:end="117:19">int</name></type> <name pos:start="117:21" pos:end="117:23">len</name> <init pos:start="117:25" pos:end="117:63">= <expr pos:start="117:27" pos:end="117:63"><ternary pos:start="117:27" pos:end="117:63"><condition pos:start="117:27" pos:end="117:31"><expr pos:start="117:27" pos:end="117:29"><name pos:start="117:27" pos:end="117:29">end</name></expr> ?</condition><then pos:start="117:33" pos:end="117:45"> <expr pos:start="117:33" pos:end="117:45"><name pos:start="117:33" pos:end="117:35">end</name><operator pos:start="117:36" pos:end="117:36">-</operator><operator pos:start="117:37" pos:end="117:37">(</operator><name pos:start="117:38" pos:end="117:42">start</name><operator pos:start="117:43" pos:end="117:43">+</operator><literal type="number" pos:start="117:44" pos:end="117:44">1</literal><operator pos:start="117:45" pos:end="117:45">)</operator></expr> </then><else pos:start="117:47" pos:end="117:63">: <expr pos:start="117:49" pos:end="117:63"><call pos:start="117:49" pos:end="117:63"><name pos:start="117:49" pos:end="117:54">strlen</name><argument_list pos:start="117:55" pos:end="117:63">(<argument pos:start="117:56" pos:end="117:62"><expr pos:start="117:56" pos:end="117:62"><name pos:start="117:56" pos:end="117:60">start</name><operator pos:start="117:61" pos:end="117:61">+</operator><literal type="number" pos:start="117:62" pos:end="117:62">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="119:17" pos:end="153:17"><if pos:start="119:17" pos:end="153:17">if <condition pos:start="119:20" pos:end="119:28">(<expr pos:start="119:21" pos:end="119:27"><name pos:start="119:21" pos:end="119:23">len</name> <operator pos:start="119:25" pos:end="119:25">&lt;</operator> <literal type="number" pos:start="119:27" pos:end="119:27">6</literal></expr>)</condition> <block pos:start="119:30" pos:end="153:17">{<block_content pos:start="123:21" pos:end="151:33">

                    <comment type="block" pos:start="121:21" pos:end="121:69">/* extract the host specification from display */</comment>

                    <decl_stmt pos:start="123:21" pos:end="123:71"><decl pos:start="123:21" pos:end="123:38"><type pos:start="123:21" pos:end="123:27"><name pos:start="123:21" pos:end="123:24">char</name>  <modifier pos:start="123:27" pos:end="123:27">*</modifier></type><name pos:start="123:28" pos:end="123:31">host</name> <init pos:start="123:33" pos:end="123:38">= <expr pos:start="123:35" pos:end="123:38"><name pos:start="123:35" pos:end="123:38">NULL</name></expr></init></decl>, <decl pos:start="123:41" pos:end="123:52"><type ref="prev" pos:start="123:21" pos:end="123:27"><modifier pos:start="123:41" pos:end="123:41">*</modifier></type><name pos:start="123:42" pos:end="123:45">port</name> <init pos:start="123:47" pos:end="123:52">= <expr pos:start="123:49" pos:end="123:52"><name pos:start="123:49" pos:end="123:52">NULL</name></expr></init></decl>, <decl pos:start="123:55" pos:end="123:70"><type ref="prev" pos:start="123:21" pos:end="123:27"><modifier pos:start="123:55" pos:end="123:55">*</modifier></type><name pos:start="123:56" pos:end="123:63">host_end</name> <init pos:start="123:65" pos:end="123:70">= <expr pos:start="123:67" pos:end="123:70"><name pos:start="123:67" pos:end="123:70">NULL</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:53"><expr pos:start="125:21" pos:end="125:52"><name pos:start="125:21" pos:end="125:24">port</name> <operator pos:start="125:26" pos:end="125:26">=</operator> <call pos:start="125:28" pos:end="125:52"><name pos:start="125:28" pos:end="125:36">g_strndup</name><argument_list pos:start="125:37" pos:end="125:52">(<argument pos:start="125:38" pos:end="125:46"><expr pos:start="125:38" pos:end="125:46"><name pos:start="125:38" pos:end="125:42">start</name> <operator pos:start="125:44" pos:end="125:44">+</operator> <literal type="number" pos:start="125:46" pos:end="125:46">1</literal></expr></argument>, <argument pos:start="125:49" pos:end="125:51"><expr pos:start="125:49" pos:end="125:51"><name pos:start="125:49" pos:end="125:51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <comment type="block" pos:start="129:21" pos:end="129:48">/* ipv6 hosts have colons */</comment>

                    <expr_stmt pos:start="131:21" pos:end="131:47"><expr pos:start="131:21" pos:end="131:46"><name pos:start="131:21" pos:end="131:23">end</name> <operator pos:start="131:25" pos:end="131:25">=</operator> <call pos:start="131:27" pos:end="131:46"><name pos:start="131:27" pos:end="131:32">strchr</name><argument_list pos:start="131:33" pos:end="131:46">(<argument pos:start="131:34" pos:end="131:40"><expr pos:start="131:34" pos:end="131:40"><name pos:start="131:34" pos:end="131:40">display</name></expr></argument>, <argument pos:start="131:43" pos:end="131:45"><expr pos:start="131:43" pos:end="131:45"><literal type="char" pos:start="131:43" pos:end="131:45">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="133:21" pos:end="133:74"><expr pos:start="133:21" pos:end="133:73"><name pos:start="133:21" pos:end="133:28">host_end</name> <operator pos:start="133:30" pos:end="133:30">=</operator> <call pos:start="133:32" pos:end="133:73"><name pos:start="133:32" pos:end="133:44">g_strrstr_len</name><argument_list pos:start="133:45" pos:end="133:73">(<argument pos:start="133:46" pos:end="133:52"><expr pos:start="133:46" pos:end="133:52"><name pos:start="133:46" pos:end="133:52">display</name></expr></argument>, <argument pos:start="133:55" pos:end="133:67"><expr pos:start="133:55" pos:end="133:67"><name pos:start="133:55" pos:end="133:57">end</name> <operator pos:start="133:59" pos:end="133:59">-</operator> <name pos:start="133:61" pos:end="133:67">display</name></expr></argument>, <argument pos:start="133:70" pos:end="133:72"><expr pos:start="133:70" pos:end="133:72"><literal type="string" pos:start="133:70" pos:end="133:72">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="137:21" pos:end="145:21"><if pos:start="137:21" pos:end="141:21">if <condition pos:start="137:24" pos:end="137:33">(<expr pos:start="137:25" pos:end="137:32"><name pos:start="137:25" pos:end="137:32">host_end</name></expr>)</condition> <block pos:start="137:35" pos:end="141:21">{<block_content pos:start="139:25" pos:end="139:74">

                        <expr_stmt pos:start="139:25" pos:end="139:74"><expr pos:start="139:25" pos:end="139:73"><name pos:start="139:25" pos:end="139:28">host</name> <operator pos:start="139:30" pos:end="139:30">=</operator> <call pos:start="139:32" pos:end="139:73"><name pos:start="139:32" pos:end="139:40">g_strndup</name><argument_list pos:start="139:41" pos:end="139:73">(<argument pos:start="139:42" pos:end="139:48"><expr pos:start="139:42" pos:end="139:48"><name pos:start="139:42" pos:end="139:48">display</name></expr></argument>, <argument pos:start="139:51" pos:end="139:72"><expr pos:start="139:51" pos:end="139:72"><name pos:start="139:51" pos:end="139:58">host_end</name> <operator pos:start="139:60" pos:end="139:60">-</operator> <name pos:start="139:62" pos:end="139:68">display</name> <operator pos:start="139:70" pos:end="139:70">+</operator> <literal type="number" pos:start="139:72" pos:end="139:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="141:23" pos:end="145:21">else <block pos:start="141:28" pos:end="145:21">{<block_content pos:start="143:25" pos:end="143:49">

                        <expr_stmt pos:start="143:25" pos:end="143:49"><expr pos:start="143:25" pos:end="143:48"><name pos:start="143:25" pos:end="143:28">host</name> <operator pos:start="143:30" pos:end="143:30">=</operator> <call pos:start="143:32" pos:end="143:48"><name pos:start="143:32" pos:end="143:40">g_strndup</name><argument_list pos:start="143:41" pos:end="143:48">(<argument pos:start="143:42" pos:end="143:44"><expr pos:start="143:42" pos:end="143:44"><literal type="string" pos:start="143:42" pos:end="143:44">":"</literal></expr></argument>, <argument pos:start="143:47" pos:end="143:47"><expr pos:start="143:47" pos:end="143:47"><literal type="number" pos:start="143:47" pos:end="143:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:67"><expr pos:start="147:21" pos:end="147:66"><name pos:start="147:21" pos:end="147:34"><name pos:start="147:21" pos:end="147:22">vs</name><operator pos:start="147:23" pos:end="147:24">-&gt;</operator><name pos:start="147:25" pos:end="147:34">ws_display</name></name> <operator pos:start="147:36" pos:end="147:36">=</operator> <call pos:start="147:38" pos:end="147:66"><name pos:start="147:38" pos:end="147:48">g_strconcat</name><argument_list pos:start="147:49" pos:end="147:66">(<argument pos:start="147:50" pos:end="147:53"><expr pos:start="147:50" pos:end="147:53"><name pos:start="147:50" pos:end="147:53">host</name></expr></argument>, <argument pos:start="147:56" pos:end="147:59"><expr pos:start="147:56" pos:end="147:59"><name pos:start="147:56" pos:end="147:59">port</name></expr></argument>, <argument pos:start="147:62" pos:end="147:65"><expr pos:start="147:62" pos:end="147:65"><name pos:start="147:62" pos:end="147:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:33"><expr pos:start="149:21" pos:end="149:32"><call pos:start="149:21" pos:end="149:32"><name pos:start="149:21" pos:end="149:26">g_free</name><argument_list pos:start="149:27" pos:end="149:32">(<argument pos:start="149:28" pos:end="149:31"><expr pos:start="149:28" pos:end="149:31"><name pos:start="149:28" pos:end="149:31">host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="151:21" pos:end="151:33"><expr pos:start="151:21" pos:end="151:32"><call pos:start="151:21" pos:end="151:32"><name pos:start="151:21" pos:end="151:26">g_free</name><argument_list pos:start="151:27" pos:end="151:32">(<argument pos:start="151:28" pos:end="151:31"><expr pos:start="151:28" pos:end="151:31"><name pos:start="151:28" pos:end="151:31">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="157:8" pos:end="157:26">/* CONFIG_VNC_WS */</comment>

<cpp:ifdef pos:start="159:1" pos:end="159:21">#<cpp:directive pos:start="159:2" pos:end="159:6">ifdef</cpp:directive> <name pos:start="159:8" pos:end="159:21">CONFIG_VNC_TLS</name></cpp:ifdef>

        </block_content>}</block></if> <if type="elseif" pos:start="161:11" pos:end="165:9">else if <condition pos:start="161:19" pos:end="161:51">(<expr pos:start="161:20" pos:end="161:50"><call pos:start="161:20" pos:end="161:45"><name pos:start="161:20" pos:end="161:26">strncmp</name><argument_list pos:start="161:27" pos:end="161:45">(<argument pos:start="161:28" pos:end="161:34"><expr pos:start="161:28" pos:end="161:34"><name pos:start="161:28" pos:end="161:34">options</name></expr></argument>, <argument pos:start="161:37" pos:end="161:41"><expr pos:start="161:37" pos:end="161:41"><literal type="string" pos:start="161:37" pos:end="161:41">"tls"</literal></expr></argument>, <argument pos:start="161:44" pos:end="161:44"><expr pos:start="161:44" pos:end="161:44"><literal type="number" pos:start="161:44" pos:end="161:44">3</literal></expr></argument>)</argument_list></call> <operator pos:start="161:47" pos:end="161:48">==</operator> <literal type="number" pos:start="161:50" pos:end="161:50">0</literal></expr>)</condition> <block pos:start="161:53" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:20">

            <expr_stmt pos:start="163:13" pos:end="163:20"><expr pos:start="163:13" pos:end="163:19"><name pos:start="163:13" pos:end="163:15">tls</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <literal type="number" pos:start="163:19" pos:end="163:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="163:22" pos:end="163:38">/* Require TLS */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="165:11" pos:end="219:9">else if <condition pos:start="165:19" pos:end="165:52">(<expr pos:start="165:20" pos:end="165:51"><call pos:start="165:20" pos:end="165:46"><name pos:start="165:20" pos:end="165:26">strncmp</name><argument_list pos:start="165:27" pos:end="165:46">(<argument pos:start="165:28" pos:end="165:34"><expr pos:start="165:28" pos:end="165:34"><name pos:start="165:28" pos:end="165:34">options</name></expr></argument>, <argument pos:start="165:37" pos:end="165:42"><expr pos:start="165:37" pos:end="165:42"><literal type="string" pos:start="165:37" pos:end="165:42">"x509"</literal></expr></argument>, <argument pos:start="165:45" pos:end="165:45"><expr pos:start="165:45" pos:end="165:45"><literal type="number" pos:start="165:45" pos:end="165:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="165:48" pos:end="165:49">==</operator> <literal type="number" pos:start="165:51" pos:end="165:51">0</literal></expr>)</condition> <block pos:start="165:54" pos:end="219:9">{<block_content pos:start="167:13" pos:end="218:0">

            <decl_stmt pos:start="167:13" pos:end="167:30"><decl pos:start="167:13" pos:end="167:23"><type pos:start="167:13" pos:end="167:18"><name pos:start="167:13" pos:end="167:16">char</name> <modifier pos:start="167:18" pos:end="167:18">*</modifier></type><name pos:start="167:19" pos:end="167:23">start</name></decl>, <decl pos:start="167:26" pos:end="167:29"><type ref="prev" pos:start="167:13" pos:end="167:18"><modifier pos:start="167:26" pos:end="167:26">*</modifier></type><name pos:start="167:27" pos:end="167:29">end</name></decl>;</decl_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:21"><expr pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:16">x509</name> <operator pos:start="169:18" pos:end="169:18">=</operator> <literal type="number" pos:start="169:20" pos:end="169:20">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="169:23" pos:end="169:53">/* Require x509 certificates */</comment>

            <if_stmt pos:start="171:13" pos:end="173:39"><if pos:start="171:13" pos:end="173:39">if <condition pos:start="171:16" pos:end="171:56">(<expr pos:start="171:17" pos:end="171:55"><call pos:start="171:17" pos:end="171:50"><name pos:start="171:17" pos:end="171:23">strncmp</name><argument_list pos:start="171:24" pos:end="171:50">(<argument pos:start="171:25" pos:end="171:31"><expr pos:start="171:25" pos:end="171:31"><name pos:start="171:25" pos:end="171:31">options</name></expr></argument>, <argument pos:start="171:34" pos:end="171:45"><expr pos:start="171:34" pos:end="171:45"><literal type="string" pos:start="171:34" pos:end="171:45">"x509verify"</literal></expr></argument>, <argument pos:start="171:48" pos:end="171:49"><expr pos:start="171:48" pos:end="171:49"><literal type="number" pos:start="171:48" pos:end="171:49">10</literal></expr></argument>)</argument_list></call> <operator pos:start="171:52" pos:end="171:53">==</operator> <literal type="number" pos:start="171:55" pos:end="171:55">0</literal></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:39"><block_content pos:start="173:17" pos:end="173:39">

                <expr_stmt pos:start="173:17" pos:end="173:39"><expr pos:start="173:17" pos:end="173:38"><name pos:start="173:17" pos:end="173:34"><name pos:start="173:17" pos:end="173:18">vs</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:23">tls</name><operator pos:start="173:24" pos:end="173:24">.</operator><name pos:start="173:25" pos:end="173:34">x509verify</name></name> <operator pos:start="173:36" pos:end="173:36">=</operator> <literal type="number" pos:start="173:38" pos:end="173:38">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="173:41" pos:end="173:72">/* ...and verify client certs */</comment>



            <comment type="block" pos:start="177:13" pos:end="179:66">/* Now check for 'x509=/some/path' postfix

             * and use that to setup x509 certificate/key paths */</comment>

            <expr_stmt pos:start="181:13" pos:end="181:41"><expr pos:start="181:13" pos:end="181:40"><name pos:start="181:13" pos:end="181:17">start</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <call pos:start="181:21" pos:end="181:40"><name pos:start="181:21" pos:end="181:26">strchr</name><argument_list pos:start="181:27" pos:end="181:40">(<argument pos:start="181:28" pos:end="181:34"><expr pos:start="181:28" pos:end="181:34"><name pos:start="181:28" pos:end="181:34">options</name></expr></argument>, <argument pos:start="181:37" pos:end="181:39"><expr pos:start="181:37" pos:end="181:39"><literal type="char" pos:start="181:37" pos:end="181:39">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:39"><expr pos:start="183:13" pos:end="183:38"><name pos:start="183:13" pos:end="183:15">end</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="183:38"><name pos:start="183:19" pos:end="183:24">strchr</name><argument_list pos:start="183:25" pos:end="183:38">(<argument pos:start="183:26" pos:end="183:32"><expr pos:start="183:26" pos:end="183:32"><name pos:start="183:26" pos:end="183:32">options</name></expr></argument>, <argument pos:start="183:35" pos:end="183:37"><expr pos:start="183:35" pos:end="183:37"><literal type="char" pos:start="183:35" pos:end="183:37">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="185:13" pos:end="218:0"><if pos:start="185:13" pos:end="207:13">if <condition pos:start="185:16" pos:end="185:49">(<expr pos:start="185:17" pos:end="185:48"><name pos:start="185:17" pos:end="185:21">start</name> <operator pos:start="185:23" pos:end="185:24">&amp;&amp;</operator> <operator pos:start="185:26" pos:end="185:26">(</operator><operator pos:start="185:27" pos:end="185:27">!</operator><name pos:start="185:28" pos:end="185:30">end</name> <operator pos:start="185:32" pos:end="185:33">||</operator> <operator pos:start="185:35" pos:end="185:35">(</operator><name pos:start="185:36" pos:end="185:40">start</name> <operator pos:start="185:42" pos:end="185:42">&lt;</operator> <name pos:start="185:44" pos:end="185:46">end</name><operator pos:start="185:47" pos:end="185:47">)</operator><operator pos:start="185:48" pos:end="185:48">)</operator></expr>)</condition> <block pos:start="185:51" pos:end="207:13">{<block_content pos:start="187:17" pos:end="205:29">

                <decl_stmt pos:start="187:17" pos:end="187:64"><decl pos:start="187:17" pos:end="187:63"><type pos:start="187:17" pos:end="187:19"><name pos:start="187:17" pos:end="187:19">int</name></type> <name pos:start="187:21" pos:end="187:23">len</name> <init pos:start="187:25" pos:end="187:63">= <expr pos:start="187:27" pos:end="187:63"><ternary pos:start="187:27" pos:end="187:63"><condition pos:start="187:27" pos:end="187:31"><expr pos:start="187:27" pos:end="187:29"><name pos:start="187:27" pos:end="187:29">end</name></expr> ?</condition><then pos:start="187:33" pos:end="187:45"> <expr pos:start="187:33" pos:end="187:45"><name pos:start="187:33" pos:end="187:35">end</name><operator pos:start="187:36" pos:end="187:36">-</operator><operator pos:start="187:37" pos:end="187:37">(</operator><name pos:start="187:38" pos:end="187:42">start</name><operator pos:start="187:43" pos:end="187:43">+</operator><literal type="number" pos:start="187:44" pos:end="187:44">1</literal><operator pos:start="187:45" pos:end="187:45">)</operator></expr> </then><else pos:start="187:47" pos:end="187:63">: <expr pos:start="187:49" pos:end="187:63"><call pos:start="187:49" pos:end="187:63"><name pos:start="187:49" pos:end="187:54">strlen</name><argument_list pos:start="187:55" pos:end="187:63">(<argument pos:start="187:56" pos:end="187:62"><expr pos:start="187:56" pos:end="187:62"><name pos:start="187:56" pos:end="187:60">start</name><operator pos:start="187:61" pos:end="187:61">+</operator><literal type="number" pos:start="187:62" pos:end="187:62">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="189:17" pos:end="189:55"><decl pos:start="189:17" pos:end="189:54"><type pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:20">char</name> <modifier pos:start="189:22" pos:end="189:22">*</modifier></type><name pos:start="189:23" pos:end="189:26">path</name> <init pos:start="189:28" pos:end="189:54">= <expr pos:start="189:30" pos:end="189:54"><call pos:start="189:30" pos:end="189:54"><name pos:start="189:30" pos:end="189:38">g_strndup</name><argument_list pos:start="189:39" pos:end="189:54">(<argument pos:start="189:40" pos:end="189:48"><expr pos:start="189:40" pos:end="189:48"><name pos:start="189:40" pos:end="189:44">start</name> <operator pos:start="189:46" pos:end="189:46">+</operator> <literal type="number" pos:start="189:48" pos:end="189:48">1</literal></expr></argument>, <argument pos:start="189:51" pos:end="189:53"><expr pos:start="189:51" pos:end="189:53"><name pos:start="189:51" pos:end="189:53">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="193:17" pos:end="193:66"><expr pos:start="193:17" pos:end="193:65"><call pos:start="193:17" pos:end="193:65"><name pos:start="193:17" pos:end="193:25">VNC_DEBUG</name><argument_list pos:start="193:26" pos:end="193:65">(<argument pos:start="193:27" pos:end="193:58"><expr pos:start="193:27" pos:end="193:58"><literal type="string" pos:start="193:27" pos:end="193:58">"Trying certificate path '%s'\n"</literal></expr></argument>, <argument pos:start="193:61" pos:end="193:64"><expr pos:start="193:61" pos:end="193:64"><name pos:start="193:61" pos:end="193:64">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="195:17" pos:end="203:17"><if pos:start="195:17" pos:end="203:17">if <condition pos:start="195:20" pos:end="195:61">(<expr pos:start="195:21" pos:end="195:60"><call pos:start="195:21" pos:end="195:56"><name pos:start="195:21" pos:end="195:46">vnc_tls_set_x509_creds_dir</name><argument_list pos:start="195:47" pos:end="195:56">(<argument pos:start="195:48" pos:end="195:49"><expr pos:start="195:48" pos:end="195:49"><name pos:start="195:48" pos:end="195:49">vs</name></expr></argument>, <argument pos:start="195:52" pos:end="195:55"><expr pos:start="195:52" pos:end="195:55"><name pos:start="195:52" pos:end="195:55">path</name></expr></argument>)</argument_list></call> <operator pos:start="195:58" pos:end="195:58">&lt;</operator> <literal type="number" pos:start="195:60" pos:end="195:60">0</literal></expr>)</condition> <block pos:start="195:63" pos:end="203:17">{<block_content pos:start="197:21" pos:end="201:30">

                    <expr_stmt pos:start="197:21" pos:end="197:90"><expr pos:start="197:21" pos:end="197:89"><call pos:start="197:21" pos:end="197:89"><name pos:start="197:21" pos:end="197:30">error_setg</name><argument_list pos:start="197:31" pos:end="197:89">(<argument pos:start="197:32" pos:end="197:35"><expr pos:start="197:32" pos:end="197:35"><name pos:start="197:32" pos:end="197:35">errp</name></expr></argument>, <argument pos:start="197:38" pos:end="197:82"><expr pos:start="197:38" pos:end="197:82"><literal type="string" pos:start="197:38" pos:end="197:82">"Failed to find x509 certificates/keys in %s"</literal></expr></argument>, <argument pos:start="197:85" pos:end="197:88"><expr pos:start="197:85" pos:end="197:88"><name pos:start="197:85" pos:end="197:88">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="199:21" pos:end="199:33"><expr pos:start="199:21" pos:end="199:32"><call pos:start="199:21" pos:end="199:32"><name pos:start="199:21" pos:end="199:26">g_free</name><argument_list pos:start="199:27" pos:end="199:32">(<argument pos:start="199:28" pos:end="199:31"><expr pos:start="199:28" pos:end="199:31"><name pos:start="199:28" pos:end="199:31">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="201:21" pos:end="201:30">goto <name pos:start="201:26" pos:end="201:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:29"><expr pos:start="205:17" pos:end="205:28"><call pos:start="205:17" pos:end="205:28"><name pos:start="205:17" pos:end="205:22">g_free</name><argument_list pos:start="205:23" pos:end="205:28">(<argument pos:start="205:24" pos:end="205:27"><expr pos:start="205:24" pos:end="205:27"><name pos:start="205:24" pos:end="205:27">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="207:15" pos:end="218:0">else <block pos:start="207:20" pos:end="218:0">{<block_content pos:start="209:17" pos:end="211:26">

                <expr_stmt pos:start="209:17" pos:end="209:65"><expr pos:start="209:17" pos:end="209:64"><call pos:start="209:17" pos:end="209:64"><name pos:start="209:17" pos:end="209:26">error_setg</name><argument_list pos:start="209:27" pos:end="209:64">(<argument pos:start="209:28" pos:end="209:31"><expr pos:start="209:28" pos:end="209:31"><name pos:start="209:28" pos:end="209:31">errp</name></expr></argument>, <argument pos:start="209:34" pos:end="209:63"><expr pos:start="209:34" pos:end="209:63"><literal type="string" pos:start="209:34" pos:end="209:63">"No certificate path provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="211:17" pos:end="211:26">goto <name pos:start="211:22" pos:end="211:25">fail</name>;</goto>

            </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="215:1" pos:end="215:6">#<cpp:directive pos:start="215:2" pos:end="215:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="217:1" pos:end="217:55">#<cpp:directive pos:start="217:2" pos:end="217:3">if</cpp:directive> <expr pos:start="217:5" pos:end="217:55"><call pos:start="217:5" pos:end="217:27"><name pos:start="217:5" pos:end="217:11">defined</name><argument_list pos:start="217:12" pos:end="217:27">(<argument pos:start="217:13" pos:end="217:26"><expr pos:start="217:13" pos:end="217:26"><name pos:start="217:13" pos:end="217:26">CONFIG_VNC_TLS</name></expr></argument>)</argument_list></call> <operator pos:start="217:29" pos:end="217:30">||</operator> <call pos:start="217:32" pos:end="217:55"><name pos:start="217:32" pos:end="217:38">defined</name><argument_list pos:start="217:39" pos:end="217:55">(<argument pos:start="217:40" pos:end="217:54"><expr pos:start="217:40" pos:end="217:54"><name pos:start="217:40" pos:end="217:54">CONFIG_VNC_SASL</name></expr></argument>)</argument_list></call></expr></cpp:if>

        </block_content>}</block></if> <if type="elseif" pos:start="219:11" pos:end="225:9">else if <condition pos:start="219:19" pos:end="219:51">(<expr pos:start="219:20" pos:end="219:50"><call pos:start="219:20" pos:end="219:45"><name pos:start="219:20" pos:end="219:26">strncmp</name><argument_list pos:start="219:27" pos:end="219:45">(<argument pos:start="219:28" pos:end="219:34"><expr pos:start="219:28" pos:end="219:34"><name pos:start="219:28" pos:end="219:34">options</name></expr></argument>, <argument pos:start="219:37" pos:end="219:41"><expr pos:start="219:37" pos:end="219:41"><literal type="string" pos:start="219:37" pos:end="219:41">"acl"</literal></expr></argument>, <argument pos:start="219:44" pos:end="219:44"><expr pos:start="219:44" pos:end="219:44"><literal type="number" pos:start="219:44" pos:end="219:44">3</literal></expr></argument>)</argument_list></call> <operator pos:start="219:47" pos:end="219:48">==</operator> <literal type="number" pos:start="219:50" pos:end="219:50">0</literal></expr>)</condition> <block pos:start="219:53" pos:end="225:9">{<block_content pos:start="221:13" pos:end="224:0">

            <expr_stmt pos:start="221:13" pos:end="224:0"><expr pos:start="221:13" pos:end="221:19"><name pos:start="221:13" pos:end="221:15">acl</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <literal type="number" pos:start="221:19" pos:end="221:19">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="223:1" pos:end="223:6">#<cpp:directive pos:start="223:2" pos:end="223:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <if type="elseif" pos:start="225:11" pos:end="229:9">else if <condition pos:start="225:19" pos:end="225:53">(<expr pos:start="225:20" pos:end="225:52"><call pos:start="225:20" pos:end="225:47"><name pos:start="225:20" pos:end="225:26">strncmp</name><argument_list pos:start="225:27" pos:end="225:47">(<argument pos:start="225:28" pos:end="225:34"><expr pos:start="225:28" pos:end="225:34"><name pos:start="225:28" pos:end="225:34">options</name></expr></argument>, <argument pos:start="225:37" pos:end="225:43"><expr pos:start="225:37" pos:end="225:43"><literal type="string" pos:start="225:37" pos:end="225:43">"lossy"</literal></expr></argument>, <argument pos:start="225:46" pos:end="225:46"><expr pos:start="225:46" pos:end="225:46"><literal type="number" pos:start="225:46" pos:end="225:46">5</literal></expr></argument>)</argument_list></call> <operator pos:start="225:49" pos:end="225:50">==</operator> <literal type="number" pos:start="225:52" pos:end="225:52">0</literal></expr>)</condition> <block pos:start="225:55" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:29">

            <expr_stmt pos:start="227:13" pos:end="227:29"><expr pos:start="227:13" pos:end="227:28"><name pos:start="227:13" pos:end="227:21"><name pos:start="227:13" pos:end="227:14">vs</name><operator pos:start="227:15" pos:end="227:16">-&gt;</operator><name pos:start="227:17" pos:end="227:21">lossy</name></name> <operator pos:start="227:23" pos:end="227:23">=</operator> <name pos:start="227:25" pos:end="227:28">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="229:11" pos:end="233:9">else if <condition pos:start="229:19" pos:end="229:61">(<expr pos:start="229:20" pos:end="229:60"><call pos:start="229:20" pos:end="229:55"><name pos:start="229:20" pos:end="229:26">strncmp</name><argument_list pos:start="229:27" pos:end="229:55">(<argument pos:start="229:28" pos:end="229:34"><expr pos:start="229:28" pos:end="229:34"><name pos:start="229:28" pos:end="229:34">options</name></expr></argument>, <argument pos:start="229:37" pos:end="229:50"><expr pos:start="229:37" pos:end="229:50"><literal type="string" pos:start="229:37" pos:end="229:50">"non-adaptive"</literal></expr></argument>, <argument pos:start="229:53" pos:end="229:54"><expr pos:start="229:53" pos:end="229:54"><literal type="number" pos:start="229:53" pos:end="229:54">12</literal></expr></argument>)</argument_list></call> <operator pos:start="229:57" pos:end="229:58">==</operator> <literal type="number" pos:start="229:60" pos:end="229:60">0</literal></expr>)</condition> <block pos:start="229:63" pos:end="233:9">{<block_content pos:start="231:13" pos:end="231:36">

            <expr_stmt pos:start="231:13" pos:end="231:36"><expr pos:start="231:13" pos:end="231:35"><name pos:start="231:13" pos:end="231:28"><name pos:start="231:13" pos:end="231:14">vs</name><operator pos:start="231:15" pos:end="231:16">-&gt;</operator><name pos:start="231:17" pos:end="231:28">non_adaptive</name></name> <operator pos:start="231:30" pos:end="231:30">=</operator> <name pos:start="231:32" pos:end="231:35">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="233:11" pos:end="255:9">else if <condition pos:start="233:19" pos:end="233:54">(<expr pos:start="233:20" pos:end="233:53"><call pos:start="233:20" pos:end="233:48"><name pos:start="233:20" pos:end="233:26">strncmp</name><argument_list pos:start="233:27" pos:end="233:48">(<argument pos:start="233:28" pos:end="233:34"><expr pos:start="233:28" pos:end="233:34"><name pos:start="233:28" pos:end="233:34">options</name></expr></argument>, <argument pos:start="233:37" pos:end="233:44"><expr pos:start="233:37" pos:end="233:44"><literal type="string" pos:start="233:37" pos:end="233:44">"share="</literal></expr></argument>, <argument pos:start="233:47" pos:end="233:47"><expr pos:start="233:47" pos:end="233:47"><literal type="number" pos:start="233:47" pos:end="233:47">6</literal></expr></argument>)</argument_list></call> <operator pos:start="233:50" pos:end="233:51">==</operator> <literal type="number" pos:start="233:53" pos:end="233:53">0</literal></expr>)</condition> <block pos:start="233:56" pos:end="255:9">{<block_content pos:start="235:13" pos:end="253:13">

            <if_stmt pos:start="235:13" pos:end="253:13"><if pos:start="235:13" pos:end="239:13">if <condition pos:start="235:16" pos:end="235:53">(<expr pos:start="235:17" pos:end="235:52"><call pos:start="235:17" pos:end="235:47"><name pos:start="235:17" pos:end="235:23">strncmp</name><argument_list pos:start="235:24" pos:end="235:47">(<argument pos:start="235:25" pos:end="235:33"><expr pos:start="235:25" pos:end="235:33"><name pos:start="235:25" pos:end="235:31">options</name><operator pos:start="235:32" pos:end="235:32">+</operator><literal type="number" pos:start="235:33" pos:end="235:33">6</literal></expr></argument>, <argument pos:start="235:36" pos:end="235:43"><expr pos:start="235:36" pos:end="235:43"><literal type="string" pos:start="235:36" pos:end="235:43">"ignore"</literal></expr></argument>, <argument pos:start="235:46" pos:end="235:46"><expr pos:start="235:46" pos:end="235:46"><literal type="number" pos:start="235:46" pos:end="235:46">6</literal></expr></argument>)</argument_list></call> <operator pos:start="235:49" pos:end="235:50">==</operator> <literal type="number" pos:start="235:52" pos:end="235:52">0</literal></expr>)</condition> <block pos:start="235:55" pos:end="239:13">{<block_content pos:start="237:17" pos:end="237:59">

                <expr_stmt pos:start="237:17" pos:end="237:59"><expr pos:start="237:17" pos:end="237:58"><name pos:start="237:17" pos:end="237:32"><name pos:start="237:17" pos:end="237:18">vs</name><operator pos:start="237:19" pos:end="237:20">-&gt;</operator><name pos:start="237:21" pos:end="237:32">share_policy</name></name> <operator pos:start="237:34" pos:end="237:34">=</operator> <name pos:start="237:36" pos:end="237:58">VNC_SHARE_POLICY_IGNORE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="239:15" pos:end="243:13">else if <condition pos:start="239:23" pos:end="239:70">(<expr pos:start="239:24" pos:end="239:69"><call pos:start="239:24" pos:end="239:64"><name pos:start="239:24" pos:end="239:30">strncmp</name><argument_list pos:start="239:31" pos:end="239:64">(<argument pos:start="239:32" pos:end="239:40"><expr pos:start="239:32" pos:end="239:40"><name pos:start="239:32" pos:end="239:38">options</name><operator pos:start="239:39" pos:end="239:39">+</operator><literal type="number" pos:start="239:40" pos:end="239:40">6</literal></expr></argument>, <argument pos:start="239:43" pos:end="239:59"><expr pos:start="239:43" pos:end="239:59"><literal type="string" pos:start="239:43" pos:end="239:59">"allow-exclusive"</literal></expr></argument>, <argument pos:start="239:62" pos:end="239:63"><expr pos:start="239:62" pos:end="239:63"><literal type="number" pos:start="239:62" pos:end="239:63">15</literal></expr></argument>)</argument_list></call> <operator pos:start="239:66" pos:end="239:67">==</operator> <literal type="number" pos:start="239:69" pos:end="239:69">0</literal></expr>)</condition> <block pos:start="239:72" pos:end="243:13">{<block_content pos:start="241:17" pos:end="241:68">

                <expr_stmt pos:start="241:17" pos:end="241:68"><expr pos:start="241:17" pos:end="241:67"><name pos:start="241:17" pos:end="241:32"><name pos:start="241:17" pos:end="241:18">vs</name><operator pos:start="241:19" pos:end="241:20">-&gt;</operator><name pos:start="241:21" pos:end="241:32">share_policy</name></name> <operator pos:start="241:34" pos:end="241:34">=</operator> <name pos:start="241:36" pos:end="241:67">VNC_SHARE_POLICY_ALLOW_EXCLUSIVE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="243:15" pos:end="247:13">else if <condition pos:start="243:23" pos:end="243:67">(<expr pos:start="243:24" pos:end="243:66"><call pos:start="243:24" pos:end="243:61"><name pos:start="243:24" pos:end="243:30">strncmp</name><argument_list pos:start="243:31" pos:end="243:61">(<argument pos:start="243:32" pos:end="243:40"><expr pos:start="243:32" pos:end="243:40"><name pos:start="243:32" pos:end="243:38">options</name><operator pos:start="243:39" pos:end="243:39">+</operator><literal type="number" pos:start="243:40" pos:end="243:40">6</literal></expr></argument>, <argument pos:start="243:43" pos:end="243:56"><expr pos:start="243:43" pos:end="243:56"><literal type="string" pos:start="243:43" pos:end="243:56">"force-shared"</literal></expr></argument>, <argument pos:start="243:59" pos:end="243:60"><expr pos:start="243:59" pos:end="243:60"><literal type="number" pos:start="243:59" pos:end="243:60">12</literal></expr></argument>)</argument_list></call> <operator pos:start="243:63" pos:end="243:64">==</operator> <literal type="number" pos:start="243:66" pos:end="243:66">0</literal></expr>)</condition> <block pos:start="243:69" pos:end="247:13">{<block_content pos:start="245:17" pos:end="245:65">

                <expr_stmt pos:start="245:17" pos:end="245:65"><expr pos:start="245:17" pos:end="245:64"><name pos:start="245:17" pos:end="245:32"><name pos:start="245:17" pos:end="245:18">vs</name><operator pos:start="245:19" pos:end="245:20">-&gt;</operator><name pos:start="245:21" pos:end="245:32">share_policy</name></name> <operator pos:start="245:34" pos:end="245:34">=</operator> <name pos:start="245:36" pos:end="245:64">VNC_SHARE_POLICY_FORCE_SHARED</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="247:15" pos:end="253:13">else <block pos:start="247:20" pos:end="253:13">{<block_content pos:start="249:17" pos:end="251:26">

                <expr_stmt pos:start="249:17" pos:end="249:62"><expr pos:start="249:17" pos:end="249:61"><call pos:start="249:17" pos:end="249:61"><name pos:start="249:17" pos:end="249:26">error_setg</name><argument_list pos:start="249:27" pos:end="249:61">(<argument pos:start="249:28" pos:end="249:31"><expr pos:start="249:28" pos:end="249:31"><name pos:start="249:28" pos:end="249:31">errp</name></expr></argument>, <argument pos:start="249:34" pos:end="249:60"><expr pos:start="249:34" pos:end="249:60"><literal type="string" pos:start="249:34" pos:end="249:60">"unknown vnc share= option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="251:17" pos:end="251:26">goto <name pos:start="251:22" pos:end="251:25">fail</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



<cpp:ifdef pos:start="261:1" pos:end="261:21">#<cpp:directive pos:start="261:2" pos:end="261:6">ifdef</cpp:directive> <name pos:start="261:8" pos:end="261:21">CONFIG_VNC_TLS</name></cpp:ifdef>

    <if_stmt pos:start="263:5" pos:end="278:0"><if pos:start="263:5" pos:end="278:0">if <condition pos:start="263:8" pos:end="263:42">(<expr pos:start="263:9" pos:end="263:41"><name pos:start="263:9" pos:end="263:11">acl</name> <operator pos:start="263:13" pos:end="263:14">&amp;&amp;</operator> <name pos:start="263:16" pos:end="263:19">x509</name> <operator pos:start="263:21" pos:end="263:22">&amp;&amp;</operator> <name pos:start="263:24" pos:end="263:41"><name pos:start="263:24" pos:end="263:25">vs</name><operator pos:start="263:26" pos:end="263:27">-&gt;</operator><name pos:start="263:28" pos:end="263:30">tls</name><operator pos:start="263:31" pos:end="263:31">.</operator><name pos:start="263:32" pos:end="263:41">x509verify</name></name></expr>)</condition> <block pos:start="263:44" pos:end="278:0">{<block_content pos:start="265:9" pos:end="271:9">

        <if_stmt pos:start="265:9" pos:end="271:9"><if pos:start="265:9" pos:end="271:9">if <condition pos:start="265:12" pos:end="265:60">(<expr pos:start="265:13" pos:end="265:59"><operator pos:start="265:13" pos:end="265:13">!</operator><operator pos:start="265:14" pos:end="265:14">(</operator><name pos:start="265:15" pos:end="265:25"><name pos:start="265:15" pos:end="265:16">vs</name><operator pos:start="265:17" pos:end="265:18">-&gt;</operator><name pos:start="265:19" pos:end="265:21">tls</name><operator pos:start="265:22" pos:end="265:22">.</operator><name pos:start="265:23" pos:end="265:25">acl</name></name> <operator pos:start="265:27" pos:end="265:27">=</operator> <call pos:start="265:29" pos:end="265:58"><name pos:start="265:29" pos:end="265:41">qemu_acl_init</name><argument_list pos:start="265:42" pos:end="265:58">(<argument pos:start="265:43" pos:end="265:57"><expr pos:start="265:43" pos:end="265:57"><literal type="string" pos:start="265:43" pos:end="265:57">"vnc.x509dname"</literal></expr></argument>)</argument_list></call><operator pos:start="265:59" pos:end="265:59">)</operator></expr>)</condition> <block pos:start="265:62" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:20">

            <expr_stmt pos:start="267:13" pos:end="267:65"><expr pos:start="267:13" pos:end="267:64"><call pos:start="267:13" pos:end="267:64"><name pos:start="267:13" pos:end="267:19">fprintf</name><argument_list pos:start="267:20" pos:end="267:64">(<argument pos:start="267:21" pos:end="267:26"><expr pos:start="267:21" pos:end="267:26"><name pos:start="267:21" pos:end="267:26">stderr</name></expr></argument>, <argument pos:start="267:29" pos:end="267:63"><expr pos:start="267:29" pos:end="267:63"><literal type="string" pos:start="267:29" pos:end="267:63">"Failed to create x509 dname ACL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:20"><expr pos:start="269:13" pos:end="269:19"><call pos:start="269:13" pos:end="269:19"><name pos:start="269:13" pos:end="269:16">exit</name><argument_list pos:start="269:17" pos:end="269:19">(<argument pos:start="269:18" pos:end="269:18"><expr pos:start="269:18" pos:end="269:18"><literal type="number" pos:start="269:18" pos:end="269:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="275:1" pos:end="275:6">#<cpp:directive pos:start="275:2" pos:end="275:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="277:1" pos:end="277:22">#<cpp:directive pos:start="277:2" pos:end="277:6">ifdef</cpp:directive> <name pos:start="277:8" pos:end="277:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <if_stmt pos:start="279:5" pos:end="292:0"><if pos:start="279:5" pos:end="292:0">if <condition pos:start="279:8" pos:end="279:20">(<expr pos:start="279:9" pos:end="279:19"><name pos:start="279:9" pos:end="279:11">acl</name> <operator pos:start="279:13" pos:end="279:14">&amp;&amp;</operator> <name pos:start="279:16" pos:end="279:19">sasl</name></expr>)</condition> <block pos:start="279:22" pos:end="292:0">{<block_content pos:start="281:9" pos:end="287:9">

        <if_stmt pos:start="281:9" pos:end="287:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:60">(<expr pos:start="281:13" pos:end="281:59"><operator pos:start="281:13" pos:end="281:13">!</operator><operator pos:start="281:14" pos:end="281:14">(</operator><name pos:start="281:15" pos:end="281:26"><name pos:start="281:15" pos:end="281:16">vs</name><operator pos:start="281:17" pos:end="281:18">-&gt;</operator><name pos:start="281:19" pos:end="281:22">sasl</name><operator pos:start="281:23" pos:end="281:23">.</operator><name pos:start="281:24" pos:end="281:26">acl</name></name> <operator pos:start="281:28" pos:end="281:28">=</operator> <call pos:start="281:30" pos:end="281:58"><name pos:start="281:30" pos:end="281:42">qemu_acl_init</name><argument_list pos:start="281:43" pos:end="281:58">(<argument pos:start="281:44" pos:end="281:57"><expr pos:start="281:44" pos:end="281:57"><literal type="string" pos:start="281:44" pos:end="281:57">"vnc.username"</literal></expr></argument>)</argument_list></call><operator pos:start="281:59" pos:end="281:59">)</operator></expr>)</condition> <block pos:start="281:62" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:20">

            <expr_stmt pos:start="283:13" pos:end="283:63"><expr pos:start="283:13" pos:end="283:62"><call pos:start="283:13" pos:end="283:62"><name pos:start="283:13" pos:end="283:19">fprintf</name><argument_list pos:start="283:20" pos:end="283:62">(<argument pos:start="283:21" pos:end="283:26"><expr pos:start="283:21" pos:end="283:26"><name pos:start="283:21" pos:end="283:26">stderr</name></expr></argument>, <argument pos:start="283:29" pos:end="283:61"><expr pos:start="283:29" pos:end="283:61"><literal type="string" pos:start="283:29" pos:end="283:61">"Failed to create username ACL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:20"><expr pos:start="285:13" pos:end="285:19"><call pos:start="285:13" pos:end="285:19"><name pos:start="285:13" pos:end="285:16">exit</name><argument_list pos:start="285:17" pos:end="285:19">(<argument pos:start="285:18" pos:end="285:18"><expr pos:start="285:18" pos:end="285:18"><literal type="number" pos:start="285:18" pos:end="285:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="291:1" pos:end="291:6">#<cpp:directive pos:start="291:2" pos:end="291:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="295:5" pos:end="325:7">/*

     * Combinations we support here:

     *

     *  - no-auth                (clear text, no auth)

     *  - password               (clear text, weak auth)

     *  - sasl                   (encrypt, good auth *IF* using Kerberos via GSSAPI)

     *  - tls                    (encrypt, weak anonymous creds, no auth)

     *  - tls + password         (encrypt, weak anonymous creds, weak auth)

     *  - tls + sasl             (encrypt, weak anonymous creds, good auth)

     *  - tls + x509             (encrypt, good x509 creds, no auth)

     *  - tls + x509 + password  (encrypt, good x509 creds, weak auth)

     *  - tls + x509 + sasl      (encrypt, good x509 creds, good auth)

     *

     * NB1. TLS is a stackable auth scheme.

     * NB2. the x509 schemes have option to validate a client cert dname

     */</comment>

    <if_stmt pos:start="327:5" pos:end="450:0"><if pos:start="327:5" pos:end="367:5">if <condition pos:start="327:8" pos:end="327:17">(<expr pos:start="327:9" pos:end="327:16"><name pos:start="327:9" pos:end="327:16">password</name></expr>)</condition> <block pos:start="327:19" pos:end="367:5">{<block_content pos:start="331:9" pos:end="366:0">

<cpp:ifdef pos:start="329:1" pos:end="329:21">#<cpp:directive pos:start="329:2" pos:end="329:6">ifdef</cpp:directive> <name pos:start="329:8" pos:end="329:21">CONFIG_VNC_TLS</name></cpp:ifdef>

        <if_stmt pos:start="331:9" pos:end="366:0"><if pos:start="331:9" pos:end="349:9">if <condition pos:start="331:12" pos:end="331:16">(<expr pos:start="331:13" pos:end="331:15"><name pos:start="331:13" pos:end="331:15">tls</name></expr>)</condition> <block pos:start="331:18" pos:end="349:9">{<block_content pos:start="333:13" pos:end="347:13">

            <expr_stmt pos:start="333:13" pos:end="333:41"><expr pos:start="333:13" pos:end="333:40"><name pos:start="333:13" pos:end="333:20"><name pos:start="333:13" pos:end="333:14">vs</name><operator pos:start="333:15" pos:end="333:16">-&gt;</operator><name pos:start="333:17" pos:end="333:20">auth</name></name> <operator pos:start="333:22" pos:end="333:22">=</operator> <name pos:start="333:24" pos:end="333:40">VNC_AUTH_VENCRYPT</name></expr>;</expr_stmt>

            <if_stmt pos:start="335:13" pos:end="347:13"><if pos:start="335:13" pos:end="341:13">if <condition pos:start="335:16" pos:end="335:21">(<expr pos:start="335:17" pos:end="335:20"><name pos:start="335:17" pos:end="335:20">x509</name></expr>)</condition> <block pos:start="335:23" pos:end="341:13">{<block_content pos:start="337:17" pos:end="339:56">

                <expr_stmt pos:start="337:17" pos:end="337:79"><expr pos:start="337:17" pos:end="337:78"><call pos:start="337:17" pos:end="337:78"><name pos:start="337:17" pos:end="337:25">VNC_DEBUG</name><argument_list pos:start="337:26" pos:end="337:78">(<argument pos:start="337:27" pos:end="337:77"><expr pos:start="337:27" pos:end="337:77"><literal type="string" pos:start="337:27" pos:end="337:77">"Initializing VNC server with x509 password auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:56"><expr pos:start="339:17" pos:end="339:55"><name pos:start="339:17" pos:end="339:27"><name pos:start="339:17" pos:end="339:18">vs</name><operator pos:start="339:19" pos:end="339:20">-&gt;</operator><name pos:start="339:21" pos:end="339:27">subauth</name></name> <operator pos:start="339:29" pos:end="339:29">=</operator> <name pos:start="339:31" pos:end="339:55">VNC_AUTH_VENCRYPT_X509VNC</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="341:15" pos:end="347:13">else <block pos:start="341:20" pos:end="347:13">{<block_content pos:start="343:17" pos:end="345:55">

                <expr_stmt pos:start="343:17" pos:end="343:78"><expr pos:start="343:17" pos:end="343:77"><call pos:start="343:17" pos:end="343:77"><name pos:start="343:17" pos:end="343:25">VNC_DEBUG</name><argument_list pos:start="343:26" pos:end="343:77">(<argument pos:start="343:27" pos:end="343:76"><expr pos:start="343:27" pos:end="343:76"><literal type="string" pos:start="343:27" pos:end="343:76">"Initializing VNC server with TLS password auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:55"><expr pos:start="345:17" pos:end="345:54"><name pos:start="345:17" pos:end="345:27"><name pos:start="345:17" pos:end="345:18">vs</name><operator pos:start="345:19" pos:end="345:20">-&gt;</operator><name pos:start="345:21" pos:end="345:27">subauth</name></name> <operator pos:start="345:29" pos:end="345:29">=</operator> <name pos:start="345:31" pos:end="345:54">VNC_AUTH_VENCRYPT_TLSVNC</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="349:11" pos:end="366:0">else <block pos:start="349:16" pos:end="366:0">{<block_content pos:start="353:13" pos:end="359:43">

<cpp:endif pos:start="351:1" pos:end="351:6">#<cpp:directive pos:start="351:2" pos:end="351:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="351:8" pos:end="351:27">/* CONFIG_VNC_TLS */</comment>

            <expr_stmt pos:start="353:13" pos:end="353:70"><expr pos:start="353:13" pos:end="353:69"><call pos:start="353:13" pos:end="353:69"><name pos:start="353:13" pos:end="353:21">VNC_DEBUG</name><argument_list pos:start="353:22" pos:end="353:69">(<argument pos:start="353:23" pos:end="353:68"><expr pos:start="353:23" pos:end="353:68"><literal type="string" pos:start="353:23" pos:end="353:68">"Initializing VNC server with password auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="358:0"><expr pos:start="355:13" pos:end="355:35"><name pos:start="355:13" pos:end="355:20"><name pos:start="355:13" pos:end="355:14">vs</name><operator pos:start="355:15" pos:end="355:16">-&gt;</operator><name pos:start="355:17" pos:end="355:20">auth</name></name> <operator pos:start="355:22" pos:end="355:22">=</operator> <name pos:start="355:24" pos:end="355:35">VNC_AUTH_VNC</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="357:1" pos:end="357:21">#<cpp:directive pos:start="357:2" pos:end="357:6">ifdef</cpp:directive> <name pos:start="357:8" pos:end="357:21">CONFIG_VNC_TLS</name></cpp:ifdef>

            <expr_stmt pos:start="359:13" pos:end="359:43"><expr pos:start="359:13" pos:end="359:42"><name pos:start="359:13" pos:end="359:23"><name pos:start="359:13" pos:end="359:14">vs</name><operator pos:start="359:15" pos:end="359:16">-&gt;</operator><name pos:start="359:17" pos:end="359:23">subauth</name></name> <operator pos:start="359:25" pos:end="359:25">=</operator> <name pos:start="359:27" pos:end="359:42">VNC_AUTH_INVALID</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="363:1" pos:end="363:6">#<cpp:directive pos:start="363:2" pos:end="363:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="363:8" pos:end="363:27">/* CONFIG_VNC_TLS */</comment>

<cpp:ifdef pos:start="365:1" pos:end="365:22">#<cpp:directive pos:start="365:2" pos:end="365:6">ifdef</cpp:directive> <name pos:start="365:8" pos:end="365:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    </block_content>}</block></if> <if type="elseif" pos:start="367:7" pos:end="407:5">else if <condition pos:start="367:15" pos:end="367:20">(<expr pos:start="367:16" pos:end="367:19"><name pos:start="367:16" pos:end="367:19">sasl</name></expr>)</condition> <block pos:start="367:22" pos:end="407:5">{<block_content pos:start="371:9" pos:end="406:0">

<cpp:ifdef pos:start="369:1" pos:end="369:21">#<cpp:directive pos:start="369:2" pos:end="369:6">ifdef</cpp:directive> <name pos:start="369:8" pos:end="369:21">CONFIG_VNC_TLS</name></cpp:ifdef>

        <if_stmt pos:start="371:9" pos:end="406:0"><if pos:start="371:9" pos:end="389:9">if <condition pos:start="371:12" pos:end="371:16">(<expr pos:start="371:13" pos:end="371:15"><name pos:start="371:13" pos:end="371:15">tls</name></expr>)</condition> <block pos:start="371:18" pos:end="389:9">{<block_content pos:start="373:13" pos:end="387:13">

            <expr_stmt pos:start="373:13" pos:end="373:41"><expr pos:start="373:13" pos:end="373:40"><name pos:start="373:13" pos:end="373:20"><name pos:start="373:13" pos:end="373:14">vs</name><operator pos:start="373:15" pos:end="373:16">-&gt;</operator><name pos:start="373:17" pos:end="373:20">auth</name></name> <operator pos:start="373:22" pos:end="373:22">=</operator> <name pos:start="373:24" pos:end="373:40">VNC_AUTH_VENCRYPT</name></expr>;</expr_stmt>

            <if_stmt pos:start="375:13" pos:end="387:13"><if pos:start="375:13" pos:end="381:13">if <condition pos:start="375:16" pos:end="375:21">(<expr pos:start="375:17" pos:end="375:20"><name pos:start="375:17" pos:end="375:20">x509</name></expr>)</condition> <block pos:start="375:23" pos:end="381:13">{<block_content pos:start="377:17" pos:end="379:57">

                <expr_stmt pos:start="377:17" pos:end="377:75"><expr pos:start="377:17" pos:end="377:74"><call pos:start="377:17" pos:end="377:74"><name pos:start="377:17" pos:end="377:25">VNC_DEBUG</name><argument_list pos:start="377:26" pos:end="377:74">(<argument pos:start="377:27" pos:end="377:73"><expr pos:start="377:27" pos:end="377:73"><literal type="string" pos:start="377:27" pos:end="377:73">"Initializing VNC server with x509 SASL auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:57"><expr pos:start="379:17" pos:end="379:56"><name pos:start="379:17" pos:end="379:27"><name pos:start="379:17" pos:end="379:18">vs</name><operator pos:start="379:19" pos:end="379:20">-&gt;</operator><name pos:start="379:21" pos:end="379:27">subauth</name></name> <operator pos:start="379:29" pos:end="379:29">=</operator> <name pos:start="379:31" pos:end="379:56">VNC_AUTH_VENCRYPT_X509SASL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="381:15" pos:end="387:13">else <block pos:start="381:20" pos:end="387:13">{<block_content pos:start="383:17" pos:end="385:56">

                <expr_stmt pos:start="383:17" pos:end="383:74"><expr pos:start="383:17" pos:end="383:73"><call pos:start="383:17" pos:end="383:73"><name pos:start="383:17" pos:end="383:25">VNC_DEBUG</name><argument_list pos:start="383:26" pos:end="383:73">(<argument pos:start="383:27" pos:end="383:72"><expr pos:start="383:27" pos:end="383:72"><literal type="string" pos:start="383:27" pos:end="383:72">"Initializing VNC server with TLS SASL auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="385:17" pos:end="385:56"><expr pos:start="385:17" pos:end="385:55"><name pos:start="385:17" pos:end="385:27"><name pos:start="385:17" pos:end="385:18">vs</name><operator pos:start="385:19" pos:end="385:20">-&gt;</operator><name pos:start="385:21" pos:end="385:27">subauth</name></name> <operator pos:start="385:29" pos:end="385:29">=</operator> <name pos:start="385:31" pos:end="385:55">VNC_AUTH_VENCRYPT_TLSSASL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="389:11" pos:end="406:0">else <block pos:start="389:16" pos:end="406:0">{<block_content pos:start="393:13" pos:end="399:43">

<cpp:endif pos:start="391:1" pos:end="391:6">#<cpp:directive pos:start="391:2" pos:end="391:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="391:8" pos:end="391:27">/* CONFIG_VNC_TLS */</comment>

            <expr_stmt pos:start="393:13" pos:end="393:66"><expr pos:start="393:13" pos:end="393:65"><call pos:start="393:13" pos:end="393:65"><name pos:start="393:13" pos:end="393:21">VNC_DEBUG</name><argument_list pos:start="393:22" pos:end="393:65">(<argument pos:start="393:23" pos:end="393:64"><expr pos:start="393:23" pos:end="393:64"><literal type="string" pos:start="393:23" pos:end="393:64">"Initializing VNC server with SASL auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="398:0"><expr pos:start="395:13" pos:end="395:36"><name pos:start="395:13" pos:end="395:20"><name pos:start="395:13" pos:end="395:14">vs</name><operator pos:start="395:15" pos:end="395:16">-&gt;</operator><name pos:start="395:17" pos:end="395:20">auth</name></name> <operator pos:start="395:22" pos:end="395:22">=</operator> <name pos:start="395:24" pos:end="395:36">VNC_AUTH_SASL</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="397:1" pos:end="397:21">#<cpp:directive pos:start="397:2" pos:end="397:6">ifdef</cpp:directive> <name pos:start="397:8" pos:end="397:21">CONFIG_VNC_TLS</name></cpp:ifdef>

            <expr_stmt pos:start="399:13" pos:end="399:43"><expr pos:start="399:13" pos:end="399:42"><name pos:start="399:13" pos:end="399:23"><name pos:start="399:13" pos:end="399:14">vs</name><operator pos:start="399:15" pos:end="399:16">-&gt;</operator><name pos:start="399:17" pos:end="399:23">subauth</name></name> <operator pos:start="399:25" pos:end="399:25">=</operator> <name pos:start="399:27" pos:end="399:42">VNC_AUTH_INVALID</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="403:1" pos:end="403:6">#<cpp:directive pos:start="403:2" pos:end="403:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="403:8" pos:end="403:27">/* CONFIG_VNC_TLS */</comment>

<cpp:endif pos:start="405:1" pos:end="405:6">#<cpp:directive pos:start="405:2" pos:end="405:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="405:8" pos:end="405:28">/* CONFIG_VNC_SASL */</comment>

    </block_content>}</block></if> <else pos:start="407:7" pos:end="450:0">else <block pos:start="407:12" pos:end="450:0">{<block_content pos:start="411:9" pos:end="444:0">

<cpp:ifdef pos:start="409:1" pos:end="409:21">#<cpp:directive pos:start="409:2" pos:end="409:6">ifdef</cpp:directive> <name pos:start="409:8" pos:end="409:21">CONFIG_VNC_TLS</name></cpp:ifdef>

        <if_stmt pos:start="411:9" pos:end="444:0"><if pos:start="411:9" pos:end="429:9">if <condition pos:start="411:12" pos:end="411:16">(<expr pos:start="411:13" pos:end="411:15"><name pos:start="411:13" pos:end="411:15">tls</name></expr>)</condition> <block pos:start="411:18" pos:end="429:9">{<block_content pos:start="413:13" pos:end="427:13">

            <expr_stmt pos:start="413:13" pos:end="413:41"><expr pos:start="413:13" pos:end="413:40"><name pos:start="413:13" pos:end="413:20"><name pos:start="413:13" pos:end="413:14">vs</name><operator pos:start="413:15" pos:end="413:16">-&gt;</operator><name pos:start="413:17" pos:end="413:20">auth</name></name> <operator pos:start="413:22" pos:end="413:22">=</operator> <name pos:start="413:24" pos:end="413:40">VNC_AUTH_VENCRYPT</name></expr>;</expr_stmt>

            <if_stmt pos:start="415:13" pos:end="427:13"><if pos:start="415:13" pos:end="421:13">if <condition pos:start="415:16" pos:end="415:21">(<expr pos:start="415:17" pos:end="415:20"><name pos:start="415:17" pos:end="415:20">x509</name></expr>)</condition> <block pos:start="415:23" pos:end="421:13">{<block_content pos:start="417:17" pos:end="419:57">

                <expr_stmt pos:start="417:17" pos:end="417:73"><expr pos:start="417:17" pos:end="417:72"><call pos:start="417:17" pos:end="417:72"><name pos:start="417:17" pos:end="417:25">VNC_DEBUG</name><argument_list pos:start="417:26" pos:end="417:72">(<argument pos:start="417:27" pos:end="417:71"><expr pos:start="417:27" pos:end="417:71"><literal type="string" pos:start="417:27" pos:end="417:71">"Initializing VNC server with x509 no auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="419:17" pos:end="419:57"><expr pos:start="419:17" pos:end="419:56"><name pos:start="419:17" pos:end="419:27"><name pos:start="419:17" pos:end="419:18">vs</name><operator pos:start="419:19" pos:end="419:20">-&gt;</operator><name pos:start="419:21" pos:end="419:27">subauth</name></name> <operator pos:start="419:29" pos:end="419:29">=</operator> <name pos:start="419:31" pos:end="419:56">VNC_AUTH_VENCRYPT_X509NONE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="421:15" pos:end="427:13">else <block pos:start="421:20" pos:end="427:13">{<block_content pos:start="423:17" pos:end="425:56">

                <expr_stmt pos:start="423:17" pos:end="423:72"><expr pos:start="423:17" pos:end="423:71"><call pos:start="423:17" pos:end="423:71"><name pos:start="423:17" pos:end="423:25">VNC_DEBUG</name><argument_list pos:start="423:26" pos:end="423:71">(<argument pos:start="423:27" pos:end="423:70"><expr pos:start="423:27" pos:end="423:70"><literal type="string" pos:start="423:27" pos:end="423:70">"Initializing VNC server with TLS no auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:56"><expr pos:start="425:17" pos:end="425:55"><name pos:start="425:17" pos:end="425:27"><name pos:start="425:17" pos:end="425:18">vs</name><operator pos:start="425:19" pos:end="425:20">-&gt;</operator><name pos:start="425:21" pos:end="425:27">subauth</name></name> <operator pos:start="425:29" pos:end="425:29">=</operator> <name pos:start="425:31" pos:end="425:55">VNC_AUTH_VENCRYPT_TLSNONE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="429:11" pos:end="444:0">else <block pos:start="429:16" pos:end="444:0">{<block_content pos:start="433:13" pos:end="439:43">

<cpp:endif pos:start="431:1" pos:end="431:6">#<cpp:directive pos:start="431:2" pos:end="431:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="433:13" pos:end="433:64"><expr pos:start="433:13" pos:end="433:63"><call pos:start="433:13" pos:end="433:63"><name pos:start="433:13" pos:end="433:21">VNC_DEBUG</name><argument_list pos:start="433:22" pos:end="433:63">(<argument pos:start="433:23" pos:end="433:62"><expr pos:start="433:23" pos:end="433:62"><literal type="string" pos:start="433:23" pos:end="433:62">"Initializing VNC server with no auth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="438:0"><expr pos:start="435:13" pos:end="435:36"><name pos:start="435:13" pos:end="435:20"><name pos:start="435:13" pos:end="435:14">vs</name><operator pos:start="435:15" pos:end="435:16">-&gt;</operator><name pos:start="435:17" pos:end="435:20">auth</name></name> <operator pos:start="435:22" pos:end="435:22">=</operator> <name pos:start="435:24" pos:end="435:36">VNC_AUTH_NONE</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="437:1" pos:end="437:21">#<cpp:directive pos:start="437:2" pos:end="437:6">ifdef</cpp:directive> <name pos:start="437:8" pos:end="437:21">CONFIG_VNC_TLS</name></cpp:ifdef>

            <expr_stmt pos:start="439:13" pos:end="439:43"><expr pos:start="439:13" pos:end="439:42"><name pos:start="439:13" pos:end="439:23"><name pos:start="439:13" pos:end="439:14">vs</name><operator pos:start="439:15" pos:end="439:16">-&gt;</operator><name pos:start="439:17" pos:end="439:23">subauth</name></name> <operator pos:start="439:25" pos:end="439:25">=</operator> <name pos:start="439:27" pos:end="439:42">VNC_AUTH_INVALID</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="443:1" pos:end="443:6">#<cpp:directive pos:start="443:2" pos:end="443:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="449:1" pos:end="449:22">#<cpp:directive pos:start="449:2" pos:end="449:6">ifdef</cpp:directive> <name pos:start="449:8" pos:end="449:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <if_stmt pos:start="451:5" pos:end="462:0"><if pos:start="451:5" pos:end="462:0">if <condition pos:start="451:8" pos:end="451:62">(<expr pos:start="451:9" pos:end="451:61"><operator pos:start="451:9" pos:end="451:9">(</operator><name pos:start="451:10" pos:end="451:16">saslErr</name> <operator pos:start="451:18" pos:end="451:18">=</operator> <call pos:start="451:20" pos:end="451:49"><name pos:start="451:20" pos:end="451:35">sasl_server_init</name><argument_list pos:start="451:36" pos:end="451:49">(<argument pos:start="451:37" pos:end="451:40"><expr pos:start="451:37" pos:end="451:40"><name pos:start="451:37" pos:end="451:40">NULL</name></expr></argument>, <argument pos:start="451:43" pos:end="451:48"><expr pos:start="451:43" pos:end="451:48"><literal type="string" pos:start="451:43" pos:end="451:48">"qemu"</literal></expr></argument>)</argument_list></call><operator pos:start="451:50" pos:end="451:50">)</operator> <operator pos:start="451:52" pos:end="451:53">!=</operator> <name pos:start="451:55" pos:end="451:61">SASL_OK</name></expr>)</condition> <block pos:start="451:64" pos:end="462:0">{<block_content pos:start="453:9" pos:end="457:18">

        <expr_stmt pos:start="453:9" pos:end="455:56"><expr pos:start="453:9" pos:end="455:55"><call pos:start="453:9" pos:end="455:55"><name pos:start="453:9" pos:end="453:18">error_setg</name><argument_list pos:start="453:19" pos:end="455:55">(<argument pos:start="453:20" pos:end="453:23"><expr pos:start="453:20" pos:end="453:23"><name pos:start="453:20" pos:end="453:23">errp</name></expr></argument>, <argument pos:start="453:26" pos:end="453:61"><expr pos:start="453:26" pos:end="453:61"><literal type="string" pos:start="453:26" pos:end="453:61">"Failed to initialize SASL auth: %s"</literal></expr></argument>,

                   <argument pos:start="455:20" pos:end="455:54"><expr pos:start="455:20" pos:end="455:54"><call pos:start="455:20" pos:end="455:54"><name pos:start="455:20" pos:end="455:33">sasl_errstring</name><argument_list pos:start="455:34" pos:end="455:54">(<argument pos:start="455:35" pos:end="455:41"><expr pos:start="455:35" pos:end="455:41"><name pos:start="455:35" pos:end="455:41">saslErr</name></expr></argument>, <argument pos:start="455:44" pos:end="455:47"><expr pos:start="455:44" pos:end="455:47"><name pos:start="455:44" pos:end="455:47">NULL</name></expr></argument>, <argument pos:start="455:50" pos:end="455:53"><expr pos:start="455:50" pos:end="455:53"><name pos:start="455:50" pos:end="455:53">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="457:9" pos:end="457:18">goto <name pos:start="457:14" pos:end="457:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="461:1" pos:end="461:6">#<cpp:directive pos:start="461:2" pos:end="461:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="463:5" pos:end="463:38"><expr pos:start="463:5" pos:end="463:37"><name pos:start="463:5" pos:end="463:21"><name pos:start="463:5" pos:end="463:6">vs</name><operator pos:start="463:7" pos:end="463:8">-&gt;</operator><name pos:start="463:9" pos:end="463:21">lock_key_sync</name></name> <operator pos:start="463:23" pos:end="463:23">=</operator> <name pos:start="463:25" pos:end="463:37">lock_key_sync</name></expr>;</expr_stmt>



    <if_stmt pos:start="467:5" pos:end="589:5"><if pos:start="467:5" pos:end="499:5">if <condition pos:start="467:8" pos:end="467:16">(<expr pos:start="467:9" pos:end="467:15"><name pos:start="467:9" pos:end="467:15">reverse</name></expr>)</condition> <block pos:start="467:18" pos:end="499:5">{<block_content pos:start="471:9" pos:end="497:37">

        <comment type="block" pos:start="469:9" pos:end="469:31">/* connect to viewer */</comment>

        <decl_stmt pos:start="471:9" pos:end="471:18"><decl pos:start="471:9" pos:end="471:17"><type pos:start="471:9" pos:end="471:11"><name pos:start="471:9" pos:end="471:11">int</name></type> <name pos:start="471:13" pos:end="471:17">csock</name></decl>;</decl_stmt>

        <expr_stmt pos:start="473:9" pos:end="476:0"><expr pos:start="473:9" pos:end="473:22"><name pos:start="473:9" pos:end="473:17"><name pos:start="473:9" pos:end="473:10">vs</name><operator pos:start="473:11" pos:end="473:12">-&gt;</operator><name pos:start="473:13" pos:end="473:17">lsock</name></name> <operator pos:start="473:19" pos:end="473:19">=</operator> <operator pos:start="473:21" pos:end="473:21">-</operator><literal type="number" pos:start="473:22" pos:end="473:22">1</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="475:1" pos:end="475:20">#<cpp:directive pos:start="475:2" pos:end="475:6">ifdef</cpp:directive> <name pos:start="475:8" pos:end="475:20">CONFIG_VNC_WS</name></cpp:ifdef>

        <expr_stmt pos:start="477:9" pos:end="480:0"><expr pos:start="477:9" pos:end="477:25"><name pos:start="477:9" pos:end="477:20"><name pos:start="477:9" pos:end="477:10">vs</name><operator pos:start="477:11" pos:end="477:12">-&gt;</operator><name pos:start="477:13" pos:end="477:20">lwebsock</name></name> <operator pos:start="477:22" pos:end="477:22">=</operator> <operator pos:start="477:24" pos:end="477:24">-</operator><literal type="number" pos:start="477:25" pos:end="477:25">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="479:1" pos:end="479:6">#<cpp:directive pos:start="479:2" pos:end="479:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="481:9" pos:end="489:9"><if pos:start="481:9" pos:end="485:9">if <condition pos:start="481:12" pos:end="481:46">(<expr pos:start="481:13" pos:end="481:45"><call pos:start="481:13" pos:end="481:40"><name pos:start="481:13" pos:end="481:19">strncmp</name><argument_list pos:start="481:20" pos:end="481:40">(<argument pos:start="481:21" pos:end="481:27"><expr pos:start="481:21" pos:end="481:27"><name pos:start="481:21" pos:end="481:27">display</name></expr></argument>, <argument pos:start="481:30" pos:end="481:36"><expr pos:start="481:30" pos:end="481:36"><literal type="string" pos:start="481:30" pos:end="481:36">"unix:"</literal></expr></argument>, <argument pos:start="481:39" pos:end="481:39"><expr pos:start="481:39" pos:end="481:39"><literal type="number" pos:start="481:39" pos:end="481:39">5</literal></expr></argument>)</argument_list></call> <operator pos:start="481:42" pos:end="481:43">==</operator> <literal type="number" pos:start="481:45" pos:end="481:45">0</literal></expr>)</condition> <block pos:start="481:48" pos:end="485:9">{<block_content pos:start="483:13" pos:end="483:50">

            <expr_stmt pos:start="483:13" pos:end="483:50"><expr pos:start="483:13" pos:end="483:49"><name pos:start="483:13" pos:end="483:17">csock</name> <operator pos:start="483:19" pos:end="483:19">=</operator> <call pos:start="483:21" pos:end="483:49"><name pos:start="483:21" pos:end="483:32">unix_connect</name><argument_list pos:start="483:33" pos:end="483:49">(<argument pos:start="483:34" pos:end="483:42"><expr pos:start="483:34" pos:end="483:42"><name pos:start="483:34" pos:end="483:40">display</name><operator pos:start="483:41" pos:end="483:41">+</operator><literal type="number" pos:start="483:42" pos:end="483:42">5</literal></expr></argument>, <argument pos:start="483:45" pos:end="483:48"><expr pos:start="483:45" pos:end="483:48"><name pos:start="483:45" pos:end="483:48">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="485:11" pos:end="489:9">else <block pos:start="485:16" pos:end="489:9">{<block_content pos:start="487:13" pos:end="487:48">

            <expr_stmt pos:start="487:13" pos:end="487:48"><expr pos:start="487:13" pos:end="487:47"><name pos:start="487:13" pos:end="487:17">csock</name> <operator pos:start="487:19" pos:end="487:19">=</operator> <call pos:start="487:21" pos:end="487:47"><name pos:start="487:21" pos:end="487:32">inet_connect</name><argument_list pos:start="487:33" pos:end="487:47">(<argument pos:start="487:34" pos:end="487:40"><expr pos:start="487:34" pos:end="487:40"><name pos:start="487:34" pos:end="487:40">display</name></expr></argument>, <argument pos:start="487:43" pos:end="487:46"><expr pos:start="487:43" pos:end="487:46"><name pos:start="487:43" pos:end="487:46">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="491:9" pos:end="495:9"><if pos:start="491:9" pos:end="495:9">if <condition pos:start="491:12" pos:end="491:22">(<expr pos:start="491:13" pos:end="491:21"><name pos:start="491:13" pos:end="491:17">csock</name> <operator pos:start="491:19" pos:end="491:19">&lt;</operator> <literal type="number" pos:start="491:21" pos:end="491:21">0</literal></expr>)</condition> <block pos:start="491:24" pos:end="495:9">{<block_content pos:start="493:13" pos:end="493:22">

            <goto pos:start="493:13" pos:end="493:22">goto <name pos:start="493:18" pos:end="493:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="497:9" pos:end="497:37"><expr pos:start="497:9" pos:end="497:36"><call pos:start="497:9" pos:end="497:36"><name pos:start="497:9" pos:end="497:19">vnc_connect</name><argument_list pos:start="497:20" pos:end="497:36">(<argument pos:start="497:21" pos:end="497:22"><expr pos:start="497:21" pos:end="497:22"><name pos:start="497:21" pos:end="497:22">vs</name></expr></argument>, <argument pos:start="497:25" pos:end="497:29"><expr pos:start="497:25" pos:end="497:29"><name pos:start="497:25" pos:end="497:29">csock</name></expr></argument>, <argument pos:start="497:32" pos:end="497:32"><expr pos:start="497:32" pos:end="497:32"><literal type="number" pos:start="497:32" pos:end="497:32">0</literal></expr></argument>, <argument pos:start="497:35" pos:end="497:35"><expr pos:start="497:35" pos:end="497:35"><literal type="number" pos:start="497:35" pos:end="497:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="499:7" pos:end="589:5">else <block pos:start="499:12" pos:end="589:5">{<block_content pos:start="503:9" pos:end="588:0">

        <comment type="block" pos:start="501:9" pos:end="501:33">/* listen for connects */</comment>

        <decl_stmt pos:start="503:9" pos:end="503:18"><decl pos:start="503:9" pos:end="503:17"><type pos:start="503:9" pos:end="503:14"><name pos:start="503:9" pos:end="503:12">char</name> <modifier pos:start="503:14" pos:end="503:14">*</modifier></type><name pos:start="503:15" pos:end="503:17">dpy</name></decl>;</decl_stmt>

        <expr_stmt pos:start="505:9" pos:end="505:28"><expr pos:start="505:9" pos:end="505:27"><name pos:start="505:9" pos:end="505:11">dpy</name> <operator pos:start="505:13" pos:end="505:13">=</operator> <call pos:start="505:15" pos:end="505:27"><name pos:start="505:15" pos:end="505:22">g_malloc</name><argument_list pos:start="505:23" pos:end="505:27">(<argument pos:start="505:24" pos:end="505:26"><expr pos:start="505:24" pos:end="505:26"><literal type="number" pos:start="505:24" pos:end="505:26">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="507:9" pos:end="567:9"><if pos:start="507:9" pos:end="513:9">if <condition pos:start="507:12" pos:end="507:46">(<expr pos:start="507:13" pos:end="507:45"><call pos:start="507:13" pos:end="507:40"><name pos:start="507:13" pos:end="507:19">strncmp</name><argument_list pos:start="507:20" pos:end="507:40">(<argument pos:start="507:21" pos:end="507:27"><expr pos:start="507:21" pos:end="507:27"><name pos:start="507:21" pos:end="507:27">display</name></expr></argument>, <argument pos:start="507:30" pos:end="507:36"><expr pos:start="507:30" pos:end="507:36"><literal type="string" pos:start="507:30" pos:end="507:36">"unix:"</literal></expr></argument>, <argument pos:start="507:39" pos:end="507:39"><expr pos:start="507:39" pos:end="507:39"><literal type="number" pos:start="507:39" pos:end="507:39">5</literal></expr></argument>)</argument_list></call> <operator pos:start="507:42" pos:end="507:43">==</operator> <literal type="number" pos:start="507:45" pos:end="507:45">0</literal></expr>)</condition> <block pos:start="507:48" pos:end="513:9">{<block_content pos:start="509:13" pos:end="511:67">

            <expr_stmt pos:start="509:13" pos:end="509:39"><expr pos:start="509:13" pos:end="509:38"><call pos:start="509:13" pos:end="509:38"><name pos:start="509:13" pos:end="509:19">pstrcpy</name><argument_list pos:start="509:20" pos:end="509:38">(<argument pos:start="509:21" pos:end="509:23"><expr pos:start="509:21" pos:end="509:23"><name pos:start="509:21" pos:end="509:23">dpy</name></expr></argument>, <argument pos:start="509:26" pos:end="509:28"><expr pos:start="509:26" pos:end="509:28"><literal type="number" pos:start="509:26" pos:end="509:28">256</literal></expr></argument>, <argument pos:start="509:31" pos:end="509:37"><expr pos:start="509:31" pos:end="509:37"><literal type="string" pos:start="509:31" pos:end="509:37">"unix:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:67"><expr pos:start="511:13" pos:end="511:66"><name pos:start="511:13" pos:end="511:21"><name pos:start="511:13" pos:end="511:14">vs</name><operator pos:start="511:15" pos:end="511:16">-&gt;</operator><name pos:start="511:17" pos:end="511:21">lsock</name></name> <operator pos:start="511:23" pos:end="511:23">=</operator> <call pos:start="511:25" pos:end="511:66"><name pos:start="511:25" pos:end="511:35">unix_listen</name><argument_list pos:start="511:36" pos:end="511:66">(<argument pos:start="511:37" pos:end="511:45"><expr pos:start="511:37" pos:end="511:45"><name pos:start="511:37" pos:end="511:43">display</name><operator pos:start="511:44" pos:end="511:44">+</operator><literal type="number" pos:start="511:45" pos:end="511:45">5</literal></expr></argument>, <argument pos:start="511:48" pos:end="511:52"><expr pos:start="511:48" pos:end="511:52"><name pos:start="511:48" pos:end="511:50">dpy</name><operator pos:start="511:51" pos:end="511:51">+</operator><literal type="number" pos:start="511:52" pos:end="511:52">5</literal></expr></argument>, <argument pos:start="511:55" pos:end="511:59"><expr pos:start="511:55" pos:end="511:59"><literal type="number" pos:start="511:55" pos:end="511:58">256</literal><operator pos:start="511:58" pos:end="511:58">-</operator><literal type="number" pos:start="511:59" pos:end="511:59">5</literal></expr></argument>, <argument pos:start="511:62" pos:end="511:65"><expr pos:start="511:62" pos:end="511:65"><name pos:start="511:62" pos:end="511:65">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="513:11" pos:end="567:9">else <block pos:start="513:16" pos:end="567:9">{<block_content pos:start="515:13" pos:end="566:0">

            <expr_stmt pos:start="515:13" pos:end="517:61"><expr pos:start="515:13" pos:end="517:60"><name pos:start="515:13" pos:end="515:21"><name pos:start="515:13" pos:end="515:14">vs</name><operator pos:start="515:15" pos:end="515:16">-&gt;</operator><name pos:start="515:17" pos:end="515:21">lsock</name></name> <operator pos:start="515:23" pos:end="515:23">=</operator> <call pos:start="515:25" pos:end="517:60"><name pos:start="515:25" pos:end="515:35">inet_listen</name><argument_list pos:start="515:36" pos:end="517:60">(<argument pos:start="515:37" pos:end="515:43"><expr pos:start="515:37" pos:end="515:43"><name pos:start="515:37" pos:end="515:43">display</name></expr></argument>, <argument pos:start="515:46" pos:end="515:48"><expr pos:start="515:46" pos:end="515:48"><name pos:start="515:46" pos:end="515:48">dpy</name></expr></argument>, <argument pos:start="515:51" pos:end="515:53"><expr pos:start="515:51" pos:end="515:53"><literal type="number" pos:start="515:51" pos:end="515:53">256</literal></expr></argument>,

                                    <argument pos:start="517:37" pos:end="517:47"><expr pos:start="517:37" pos:end="517:47"><name pos:start="517:37" pos:end="517:47">SOCK_STREAM</name></expr></argument>, <argument pos:start="517:50" pos:end="517:53"><expr pos:start="517:50" pos:end="517:53"><literal type="number" pos:start="517:50" pos:end="517:53">5900</literal></expr></argument>, <argument pos:start="517:56" pos:end="517:59"><expr pos:start="517:56" pos:end="517:59"><name pos:start="517:56" pos:end="517:59">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="519:13" pos:end="528:0"><if pos:start="519:13" pos:end="528:0">if <condition pos:start="519:16" pos:end="519:30">(<expr pos:start="519:17" pos:end="519:29"><name pos:start="519:17" pos:end="519:25"><name pos:start="519:17" pos:end="519:18">vs</name><operator pos:start="519:19" pos:end="519:20">-&gt;</operator><name pos:start="519:21" pos:end="519:25">lsock</name></name> <operator pos:start="519:27" pos:end="519:27">&lt;</operator> <literal type="number" pos:start="519:29" pos:end="519:29">0</literal></expr>)</condition> <block pos:start="519:32" pos:end="528:0">{<block_content pos:start="521:17" pos:end="523:26">

                <expr_stmt pos:start="521:17" pos:end="521:28"><expr pos:start="521:17" pos:end="521:27"><call pos:start="521:17" pos:end="521:27"><name pos:start="521:17" pos:end="521:22">g_free</name><argument_list pos:start="521:23" pos:end="521:27">(<argument pos:start="521:24" pos:end="521:26"><expr pos:start="521:24" pos:end="521:26"><name pos:start="521:24" pos:end="521:26">dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="523:17" pos:end="523:26">goto <name pos:start="523:22" pos:end="523:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="527:1" pos:end="527:20">#<cpp:directive pos:start="527:2" pos:end="527:6">ifdef</cpp:directive> <name pos:start="527:8" pos:end="527:20">CONFIG_VNC_WS</name></cpp:ifdef>

            <if_stmt pos:start="529:13" pos:end="566:0"><if pos:start="529:13" pos:end="566:0">if <condition pos:start="529:16" pos:end="529:30">(<expr pos:start="529:17" pos:end="529:29"><name pos:start="529:17" pos:end="529:29"><name pos:start="529:17" pos:end="529:18">vs</name><operator pos:start="529:19" pos:end="529:20">-&gt;</operator><name pos:start="529:21" pos:end="529:29">websocket</name></name></expr>)</condition> <block pos:start="529:32" pos:end="566:0">{<block_content pos:start="531:17" pos:end="561:17">

                <if_stmt pos:start="531:17" pos:end="543:17"><if pos:start="531:17" pos:end="537:17">if <condition pos:start="531:20" pos:end="531:35">(<expr pos:start="531:21" pos:end="531:34"><name pos:start="531:21" pos:end="531:34"><name pos:start="531:21" pos:end="531:22">vs</name><operator pos:start="531:23" pos:end="531:24">-&gt;</operator><name pos:start="531:25" pos:end="531:34">ws_display</name></name></expr>)</condition> <block pos:start="531:37" pos:end="537:17">{<block_content pos:start="533:21" pos:end="535:46">

                    <expr_stmt pos:start="533:21" pos:end="535:46"><expr pos:start="533:21" pos:end="535:45"><name pos:start="533:21" pos:end="533:32"><name pos:start="533:21" pos:end="533:22">vs</name><operator pos:start="533:23" pos:end="533:24">-&gt;</operator><name pos:start="533:25" pos:end="533:32">lwebsock</name></name> <operator pos:start="533:34" pos:end="533:34">=</operator> <call pos:start="533:36" pos:end="535:45"><name pos:start="533:36" pos:end="533:46">inet_listen</name><argument_list pos:start="533:47" pos:end="535:45">(<argument pos:start="533:48" pos:end="533:61"><expr pos:start="533:48" pos:end="533:61"><name pos:start="533:48" pos:end="533:61"><name pos:start="533:48" pos:end="533:49">vs</name><operator pos:start="533:50" pos:end="533:51">-&gt;</operator><name pos:start="533:52" pos:end="533:61">ws_display</name></name></expr></argument>, <argument pos:start="533:64" pos:end="533:67"><expr pos:start="533:64" pos:end="533:67"><name pos:start="533:64" pos:end="533:67">NULL</name></expr></argument>, <argument pos:start="533:70" pos:end="533:72"><expr pos:start="533:70" pos:end="533:72"><literal type="number" pos:start="533:70" pos:end="533:72">256</literal></expr></argument>,

                        <argument pos:start="535:25" pos:end="535:35"><expr pos:start="535:25" pos:end="535:35"><name pos:start="535:25" pos:end="535:35">SOCK_STREAM</name></expr></argument>, <argument pos:start="535:38" pos:end="535:38"><expr pos:start="535:38" pos:end="535:38"><literal type="number" pos:start="535:38" pos:end="535:38">0</literal></expr></argument>, <argument pos:start="535:41" pos:end="535:44"><expr pos:start="535:41" pos:end="535:44"><name pos:start="535:41" pos:end="535:44">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="537:19" pos:end="543:17">else <block pos:start="537:24" pos:end="543:17">{<block_content pos:start="539:21" pos:end="541:49">

                    <expr_stmt pos:start="539:21" pos:end="541:49"><expr pos:start="539:21" pos:end="541:48"><name pos:start="539:21" pos:end="539:32"><name pos:start="539:21" pos:end="539:22">vs</name><operator pos:start="539:23" pos:end="539:24">-&gt;</operator><name pos:start="539:25" pos:end="539:32">lwebsock</name></name> <operator pos:start="539:34" pos:end="539:34">=</operator> <call pos:start="539:36" pos:end="541:48"><name pos:start="539:36" pos:end="539:46">inet_listen</name><argument_list pos:start="539:47" pos:end="541:48">(<argument pos:start="539:48" pos:end="539:58"><expr pos:start="539:48" pos:end="539:58"><name pos:start="539:48" pos:end="539:58"><name pos:start="539:48" pos:end="539:49">vs</name><operator pos:start="539:50" pos:end="539:51">-&gt;</operator><name pos:start="539:52" pos:end="539:58">display</name></name></expr></argument>, <argument pos:start="539:61" pos:end="539:64"><expr pos:start="539:61" pos:end="539:64"><name pos:start="539:61" pos:end="539:64">NULL</name></expr></argument>, <argument pos:start="539:67" pos:end="539:69"><expr pos:start="539:67" pos:end="539:69"><literal type="number" pos:start="539:67" pos:end="539:69">256</literal></expr></argument>,

                        <argument pos:start="541:25" pos:end="541:35"><expr pos:start="541:25" pos:end="541:35"><name pos:start="541:25" pos:end="541:35">SOCK_STREAM</name></expr></argument>, <argument pos:start="541:38" pos:end="541:41"><expr pos:start="541:38" pos:end="541:41"><literal type="number" pos:start="541:38" pos:end="541:41">5700</literal></expr></argument>, <argument pos:start="541:44" pos:end="541:47"><expr pos:start="541:44" pos:end="541:47"><name pos:start="541:44" pos:end="541:47">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="547:17" pos:end="561:17"><if pos:start="547:17" pos:end="561:17">if <condition pos:start="547:20" pos:end="547:37">(<expr pos:start="547:21" pos:end="547:36"><name pos:start="547:21" pos:end="547:32"><name pos:start="547:21" pos:end="547:22">vs</name><operator pos:start="547:23" pos:end="547:24">-&gt;</operator><name pos:start="547:25" pos:end="547:32">lwebsock</name></name> <operator pos:start="547:34" pos:end="547:34">&lt;</operator> <literal type="number" pos:start="547:36" pos:end="547:36">0</literal></expr>)</condition> <block pos:start="547:39" pos:end="561:17">{<block_content pos:start="549:21" pos:end="559:30">

                    <if_stmt pos:start="549:21" pos:end="555:21"><if pos:start="549:21" pos:end="555:21">if <condition pos:start="549:24" pos:end="549:34">(<expr pos:start="549:25" pos:end="549:33"><name pos:start="549:25" pos:end="549:33"><name pos:start="549:25" pos:end="549:26">vs</name><operator pos:start="549:27" pos:end="549:28">-&gt;</operator><name pos:start="549:29" pos:end="549:33">lsock</name></name></expr>)</condition> <block pos:start="549:36" pos:end="555:21">{<block_content pos:start="551:25" pos:end="553:39">

                        <expr_stmt pos:start="551:25" pos:end="551:41"><expr pos:start="551:25" pos:end="551:40"><call pos:start="551:25" pos:end="551:40"><name pos:start="551:25" pos:end="551:29">close</name><argument_list pos:start="551:30" pos:end="551:40">(<argument pos:start="551:31" pos:end="551:39"><expr pos:start="551:31" pos:end="551:39"><name pos:start="551:31" pos:end="551:39"><name pos:start="551:31" pos:end="551:32">vs</name><operator pos:start="551:33" pos:end="551:34">-&gt;</operator><name pos:start="551:35" pos:end="551:39">lsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="553:25" pos:end="553:39"><expr pos:start="553:25" pos:end="553:38"><name pos:start="553:25" pos:end="553:33"><name pos:start="553:25" pos:end="553:26">vs</name><operator pos:start="553:27" pos:end="553:28">-&gt;</operator><name pos:start="553:29" pos:end="553:33">lsock</name></name> <operator pos:start="553:35" pos:end="553:35">=</operator> <operator pos:start="553:37" pos:end="553:37">-</operator><literal type="number" pos:start="553:38" pos:end="553:38">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="557:21" pos:end="557:32"><expr pos:start="557:21" pos:end="557:31"><call pos:start="557:21" pos:end="557:31"><name pos:start="557:21" pos:end="557:26">g_free</name><argument_list pos:start="557:27" pos:end="557:31">(<argument pos:start="557:28" pos:end="557:30"><expr pos:start="557:28" pos:end="557:30"><name pos:start="557:28" pos:end="557:30">dpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="559:21" pos:end="559:30">goto <name pos:start="559:26" pos:end="559:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="565:1" pos:end="565:6">#<cpp:directive pos:start="565:2" pos:end="565:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="565:8" pos:end="565:26">/* CONFIG_VNC_WS */</comment>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="569:9" pos:end="569:28"><expr pos:start="569:9" pos:end="569:27"><call pos:start="569:9" pos:end="569:27"><name pos:start="569:9" pos:end="569:14">g_free</name><argument_list pos:start="569:15" pos:end="569:27">(<argument pos:start="569:16" pos:end="569:26"><expr pos:start="569:16" pos:end="569:26"><name pos:start="569:16" pos:end="569:26"><name pos:start="569:16" pos:end="569:17">vs</name><operator pos:start="569:18" pos:end="569:19">-&gt;</operator><name pos:start="569:20" pos:end="569:26">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="571:9" pos:end="571:26"><expr pos:start="571:9" pos:end="571:25"><name pos:start="571:9" pos:end="571:19"><name pos:start="571:9" pos:end="571:10">vs</name><operator pos:start="571:11" pos:end="571:12">-&gt;</operator><name pos:start="571:13" pos:end="571:19">display</name></name> <operator pos:start="571:21" pos:end="571:21">=</operator> <name pos:start="571:23" pos:end="571:25">dpy</name></expr>;</expr_stmt>

        <expr_stmt pos:start="573:9" pos:end="578:0"><expr pos:start="573:9" pos:end="575:50"><call pos:start="573:9" pos:end="575:50"><name pos:start="573:9" pos:end="573:28">qemu_set_fd_handler2</name><argument_list pos:start="573:29" pos:end="575:50">(<argument pos:start="573:30" pos:end="573:38"><expr pos:start="573:30" pos:end="573:38"><name pos:start="573:30" pos:end="573:38"><name pos:start="573:30" pos:end="573:31">vs</name><operator pos:start="573:32" pos:end="573:33">-&gt;</operator><name pos:start="573:34" pos:end="573:38">lsock</name></name></expr></argument>, <argument pos:start="573:41" pos:end="573:44"><expr pos:start="573:41" pos:end="573:44"><name pos:start="573:41" pos:end="573:44">NULL</name></expr></argument>,

                <argument pos:start="575:17" pos:end="575:39"><expr pos:start="575:17" pos:end="575:39"><name pos:start="575:17" pos:end="575:39">vnc_listen_regular_read</name></expr></argument>, <argument pos:start="575:42" pos:end="575:45"><expr pos:start="575:42" pos:end="575:45"><name pos:start="575:42" pos:end="575:45">NULL</name></expr></argument>, <argument pos:start="575:48" pos:end="575:49"><expr pos:start="575:48" pos:end="575:49"><name pos:start="575:48" pos:end="575:49">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="577:1" pos:end="577:20">#<cpp:directive pos:start="577:2" pos:end="577:6">ifdef</cpp:directive> <name pos:start="577:8" pos:end="577:20">CONFIG_VNC_WS</name></cpp:ifdef>

        <if_stmt pos:start="579:9" pos:end="588:0"><if pos:start="579:9" pos:end="588:0">if <condition pos:start="579:12" pos:end="579:26">(<expr pos:start="579:13" pos:end="579:25"><name pos:start="579:13" pos:end="579:25"><name pos:start="579:13" pos:end="579:14">vs</name><operator pos:start="579:15" pos:end="579:16">-&gt;</operator><name pos:start="579:17" pos:end="579:25">websocket</name></name></expr>)</condition> <block pos:start="579:28" pos:end="588:0">{<block_content pos:start="581:13" pos:end="583:57">

            <expr_stmt pos:start="581:13" pos:end="583:57"><expr pos:start="581:13" pos:end="583:56"><call pos:start="581:13" pos:end="583:56"><name pos:start="581:13" pos:end="581:32">qemu_set_fd_handler2</name><argument_list pos:start="581:33" pos:end="583:56">(<argument pos:start="581:34" pos:end="581:45"><expr pos:start="581:34" pos:end="581:45"><name pos:start="581:34" pos:end="581:45"><name pos:start="581:34" pos:end="581:35">vs</name><operator pos:start="581:36" pos:end="581:37">-&gt;</operator><name pos:start="581:38" pos:end="581:45">lwebsock</name></name></expr></argument>, <argument pos:start="581:48" pos:end="581:51"><expr pos:start="581:48" pos:end="581:51"><name pos:start="581:48" pos:end="581:51">NULL</name></expr></argument>,

                    <argument pos:start="583:21" pos:end="583:45"><expr pos:start="583:21" pos:end="583:45"><name pos:start="583:21" pos:end="583:45">vnc_listen_websocket_read</name></expr></argument>, <argument pos:start="583:48" pos:end="583:51"><expr pos:start="583:48" pos:end="583:51"><name pos:start="583:48" pos:end="583:51">NULL</name></expr></argument>, <argument pos:start="583:54" pos:end="583:55"><expr pos:start="583:54" pos:end="583:55"><name pos:start="583:54" pos:end="583:55">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="587:1" pos:end="587:6">#<cpp:directive pos:start="587:2" pos:end="587:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="587:8" pos:end="587:26">/* CONFIG_VNC_WS */</comment>

    </block_content>}</block></else></if_stmt>

    <return pos:start="591:5" pos:end="591:11">return;</return>



<label pos:start="595:1" pos:end="595:5"><name pos:start="595:1" pos:end="595:4">fail</name>:</label>

    <expr_stmt pos:start="597:5" pos:end="597:24"><expr pos:start="597:5" pos:end="597:23"><call pos:start="597:5" pos:end="597:23"><name pos:start="597:5" pos:end="597:10">g_free</name><argument_list pos:start="597:11" pos:end="597:23">(<argument pos:start="597:12" pos:end="597:22"><expr pos:start="597:12" pos:end="597:22"><name pos:start="597:12" pos:end="597:22"><name pos:start="597:12" pos:end="597:13">vs</name><operator pos:start="597:14" pos:end="597:15">-&gt;</operator><name pos:start="597:16" pos:end="597:22">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="599:5" pos:end="602:0"><expr pos:start="599:5" pos:end="599:22"><name pos:start="599:5" pos:end="599:15"><name pos:start="599:5" pos:end="599:6">vs</name><operator pos:start="599:7" pos:end="599:8">-&gt;</operator><name pos:start="599:9" pos:end="599:15">display</name></name> <operator pos:start="599:17" pos:end="599:17">=</operator> <name pos:start="599:19" pos:end="599:22">NULL</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="601:1" pos:end="601:20">#<cpp:directive pos:start="601:2" pos:end="601:6">ifdef</cpp:directive> <name pos:start="601:8" pos:end="601:20">CONFIG_VNC_WS</name></cpp:ifdef>

    <expr_stmt pos:start="603:5" pos:end="603:27"><expr pos:start="603:5" pos:end="603:26"><call pos:start="603:5" pos:end="603:26"><name pos:start="603:5" pos:end="603:10">g_free</name><argument_list pos:start="603:11" pos:end="603:26">(<argument pos:start="603:12" pos:end="603:25"><expr pos:start="603:12" pos:end="603:25"><name pos:start="603:12" pos:end="603:25"><name pos:start="603:12" pos:end="603:13">vs</name><operator pos:start="603:14" pos:end="603:15">-&gt;</operator><name pos:start="603:16" pos:end="603:25">ws_display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="605:5" pos:end="608:0"><expr pos:start="605:5" pos:end="605:25"><name pos:start="605:5" pos:end="605:18"><name pos:start="605:5" pos:end="605:6">vs</name><operator pos:start="605:7" pos:end="605:8">-&gt;</operator><name pos:start="605:9" pos:end="605:18">ws_display</name></name> <operator pos:start="605:20" pos:end="605:20">=</operator> <name pos:start="605:22" pos:end="605:25">NULL</name></expr>;</expr_stmt>

<cpp:endif pos:start="607:1" pos:end="607:6">#<cpp:directive pos:start="607:2" pos:end="607:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="607:8" pos:end="607:26">/* CONFIG_VNC_WS */</comment>

</block_content>}</block></function>
</unit>
