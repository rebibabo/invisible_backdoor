<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26083.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">mxf_read_generic_descriptor</name><parameter_list pos:start="1:39" pos:end="1:94">(<parameter pos:start="1:40" pos:end="1:48"><decl pos:start="1:40" pos:end="1:48"><type pos:start="1:40" pos:end="1:48"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">arg</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:61">AVIOContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">pb</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:74"><decl pos:start="1:68" pos:end="1:74"><type pos:start="1:68" pos:end="1:74"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:74">tag</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:84"><decl pos:start="1:77" pos:end="1:84"><type pos:start="1:77" pos:end="1:84"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:84">size</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:93"><decl pos:start="1:87" pos:end="1:93"><type pos:start="1:87" pos:end="1:93"><name pos:start="1:87" pos:end="1:89">UID</name></type> <name pos:start="1:91" pos:end="1:93">uid</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">MXFDescriptor</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:29">descriptor</name> <init pos:start="5:31" pos:end="5:35">= <expr pos:start="5:33" pos:end="5:35"><name pos:start="5:33" pos:end="5:35">arg</name></expr></init></decl>;</decl_stmt>

    <switch pos:start="7:5" pos:end="119:5">switch<condition pos:start="7:11" pos:end="7:15">(<expr pos:start="7:12" pos:end="7:14"><name pos:start="7:12" pos:end="7:14">tag</name></expr>)</condition> <block pos:start="7:17" pos:end="119:5">{<block_content pos:start="9:5" pos:end="117:14">

    <case pos:start="9:5" pos:end="9:16">case <expr pos:start="9:10" pos:end="9:15"><literal type="number" pos:start="9:10" pos:end="9:15">0x3F01</literal></expr>:</case>

        <expr_stmt pos:start="11:9" pos:end="11:58"><expr pos:start="11:9" pos:end="11:57"><name pos:start="11:9" pos:end="11:41"><name pos:start="11:9" pos:end="11:18">descriptor</name><operator pos:start="11:19" pos:end="11:20">-&gt;</operator><name pos:start="11:21" pos:end="11:41">sub_descriptors_count</name></name> <operator pos:start="11:43" pos:end="11:43">=</operator> <call pos:start="11:45" pos:end="11:57"><name pos:start="11:45" pos:end="11:53">avio_rb32</name><argument_list pos:start="11:54" pos:end="11:57">(<argument pos:start="11:55" pos:end="11:56"><expr pos:start="11:55" pos:end="11:56"><name pos:start="11:55" pos:end="11:56">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="13:9" pos:end="15:22"><if pos:start="13:9" pos:end="15:22">if <condition pos:start="13:12" pos:end="13:72">(<expr pos:start="13:13" pos:end="13:71"><name pos:start="13:13" pos:end="13:45"><name pos:start="13:13" pos:end="13:22">descriptor</name><operator pos:start="13:23" pos:end="13:24">-&gt;</operator><name pos:start="13:25" pos:end="13:45">sub_descriptors_count</name></name> <operator pos:start="13:47" pos:end="13:48">&gt;=</operator> <name pos:start="13:50" pos:end="13:57">UINT_MAX</name> <operator pos:start="13:59" pos:end="13:59">/</operator> <sizeof pos:start="13:61" pos:end="13:71">sizeof<argument_list pos:start="13:67" pos:end="13:71">(<argument pos:start="13:68" pos:end="13:70"><expr pos:start="13:68" pos:end="13:70"><name pos:start="13:68" pos:end="13:70">UID</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="15:13" pos:end="15:22"><block_content pos:start="15:13" pos:end="15:22">

            <return pos:start="15:13" pos:end="15:22">return <expr pos:start="15:20" pos:end="15:21"><operator pos:start="15:20" pos:end="15:20">-</operator><literal type="number" pos:start="15:21" pos:end="15:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:102"><expr pos:start="17:9" pos:end="17:101"><name pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:18">descriptor</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:40">sub_descriptors_refs</name></name> <operator pos:start="17:42" pos:end="17:42">=</operator> <call pos:start="17:44" pos:end="17:101"><name pos:start="17:44" pos:end="17:52">av_malloc</name><argument_list pos:start="17:53" pos:end="17:101">(<argument pos:start="17:54" pos:end="17:100"><expr pos:start="17:54" pos:end="17:100"><name pos:start="17:54" pos:end="17:86"><name pos:start="17:54" pos:end="17:63">descriptor</name><operator pos:start="17:64" pos:end="17:65">-&gt;</operator><name pos:start="17:66" pos:end="17:86">sub_descriptors_count</name></name> <operator pos:start="17:88" pos:end="17:88">*</operator> <sizeof pos:start="17:90" pos:end="17:100">sizeof<argument_list pos:start="17:96" pos:end="17:100">(<argument pos:start="17:97" pos:end="17:99"><expr pos:start="17:97" pos:end="17:99"><name pos:start="17:97" pos:end="17:99">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="21:22"><if pos:start="19:9" pos:end="21:22">if <condition pos:start="19:12" pos:end="19:46">(<expr pos:start="19:13" pos:end="19:45"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:45"><name pos:start="19:14" pos:end="19:23">descriptor</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:45">sub_descriptors_refs</name></name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:22"><block_content pos:start="21:13" pos:end="21:22">

            <return pos:start="21:13" pos:end="21:22">return <expr pos:start="21:20" pos:end="21:21"><operator pos:start="21:20" pos:end="21:20">-</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:25"><expr pos:start="23:9" pos:end="23:24"><call pos:start="23:9" pos:end="23:24"><name pos:start="23:9" pos:end="23:17">avio_skip</name><argument_list pos:start="23:18" pos:end="23:24">(<argument pos:start="23:19" pos:end="23:20"><expr pos:start="23:19" pos:end="23:20"><name pos:start="23:19" pos:end="23:20">pb</name></expr></argument>, <argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="23:27" pos:end="23:85">/* useless size of objects, always 16 according to specs */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:116"><expr pos:start="25:9" pos:end="25:115"><call pos:start="25:9" pos:end="25:115"><name pos:start="25:9" pos:end="25:17">avio_read</name><argument_list pos:start="25:18" pos:end="25:115">(<argument pos:start="25:19" pos:end="25:20"><expr pos:start="25:19" pos:end="25:20"><name pos:start="25:19" pos:end="25:20">pb</name></expr></argument>, <argument pos:start="25:23" pos:end="25:65"><expr pos:start="25:23" pos:end="25:65"><operator pos:start="25:23" pos:end="25:23">(</operator><name pos:start="25:24" pos:end="25:30">uint8_t</name> <operator pos:start="25:32" pos:end="25:32">*</operator><operator pos:start="25:33" pos:end="25:33">)</operator><name pos:start="25:34" pos:end="25:65"><name pos:start="25:34" pos:end="25:43">descriptor</name><operator pos:start="25:44" pos:end="25:45">-&gt;</operator><name pos:start="25:46" pos:end="25:65">sub_descriptors_refs</name></name></expr></argument>, <argument pos:start="25:68" pos:end="25:114"><expr pos:start="25:68" pos:end="25:114"><name pos:start="25:68" pos:end="25:100"><name pos:start="25:68" pos:end="25:77">descriptor</name><operator pos:start="25:78" pos:end="25:79">-&gt;</operator><name pos:start="25:80" pos:end="25:100">sub_descriptors_count</name></name> <operator pos:start="25:102" pos:end="25:102">*</operator> <sizeof pos:start="25:104" pos:end="25:114">sizeof<argument_list pos:start="25:110" pos:end="25:114">(<argument pos:start="25:111" pos:end="25:113"><expr pos:start="25:111" pos:end="25:113"><name pos:start="25:111" pos:end="25:113">UID</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:16">case <expr pos:start="29:10" pos:end="29:15"><literal type="number" pos:start="29:10" pos:end="29:15">0x3004</literal></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:60"><expr pos:start="31:9" pos:end="31:59"><call pos:start="31:9" pos:end="31:59"><name pos:start="31:9" pos:end="31:17">avio_read</name><argument_list pos:start="31:18" pos:end="31:59">(<argument pos:start="31:19" pos:end="31:20"><expr pos:start="31:19" pos:end="31:20"><name pos:start="31:19" pos:end="31:20">pb</name></expr></argument>, <argument pos:start="31:23" pos:end="31:54"><expr pos:start="31:23" pos:end="31:54"><name pos:start="31:23" pos:end="31:54"><name pos:start="31:23" pos:end="31:32">descriptor</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:54">essence_container_ul</name></name></expr></argument>, <argument pos:start="31:57" pos:end="31:58"><expr pos:start="31:57" pos:end="31:58"><literal type="number" pos:start="31:57" pos:end="31:58">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:16">case <expr pos:start="35:10" pos:end="35:15"><literal type="number" pos:start="35:10" pos:end="35:15">0x3006</literal></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:52"><expr pos:start="37:9" pos:end="37:51"><name pos:start="37:9" pos:end="37:35"><name pos:start="37:9" pos:end="37:18">descriptor</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:35">linked_track_id</name></name> <operator pos:start="37:37" pos:end="37:37">=</operator> <call pos:start="37:39" pos:end="37:51"><name pos:start="37:39" pos:end="37:47">avio_rb32</name><argument_list pos:start="37:48" pos:end="37:51">(<argument pos:start="37:49" pos:end="37:50"><expr pos:start="37:49" pos:end="37:50"><name pos:start="37:49" pos:end="37:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:16">case <expr pos:start="41:10" pos:end="41:15"><literal type="number" pos:start="41:10" pos:end="41:15">0x3201</literal></expr>:</case> <comment type="block" pos:start="41:18" pos:end="41:43">/* PictureEssenceCoding */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:56"><expr pos:start="43:9" pos:end="43:55"><call pos:start="43:9" pos:end="43:55"><name pos:start="43:9" pos:end="43:17">avio_read</name><argument_list pos:start="43:18" pos:end="43:55">(<argument pos:start="43:19" pos:end="43:20"><expr pos:start="43:19" pos:end="43:20"><name pos:start="43:19" pos:end="43:20">pb</name></expr></argument>, <argument pos:start="43:23" pos:end="43:50"><expr pos:start="43:23" pos:end="43:50"><name pos:start="43:23" pos:end="43:50"><name pos:start="43:23" pos:end="43:32">descriptor</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:50">essence_codec_ul</name></name></expr></argument>, <argument pos:start="43:53" pos:end="43:54"><expr pos:start="43:53" pos:end="43:54"><literal type="number" pos:start="43:53" pos:end="43:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:16">case <expr pos:start="47:10" pos:end="47:15"><literal type="number" pos:start="47:10" pos:end="47:15">0x3203</literal></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:42"><expr pos:start="49:9" pos:end="49:41"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:18">descriptor</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:25">width</name></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <call pos:start="49:29" pos:end="49:41"><name pos:start="49:29" pos:end="49:37">avio_rb32</name><argument_list pos:start="49:38" pos:end="49:41">(<argument pos:start="49:39" pos:end="49:40"><expr pos:start="49:39" pos:end="49:40"><name pos:start="49:39" pos:end="49:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:16">case <expr pos:start="53:10" pos:end="53:15"><literal type="number" pos:start="53:10" pos:end="53:15">0x3202</literal></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:43"><expr pos:start="55:9" pos:end="55:42"><name pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:18">descriptor</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:26">height</name></name> <operator pos:start="55:28" pos:end="55:28">=</operator> <call pos:start="55:30" pos:end="55:42"><name pos:start="55:30" pos:end="55:38">avio_rb32</name><argument_list pos:start="55:39" pos:end="55:42">(<argument pos:start="55:40" pos:end="55:41"><expr pos:start="55:40" pos:end="55:41"><name pos:start="55:40" pos:end="55:41">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:16">case <expr pos:start="59:10" pos:end="59:15"><literal type="number" pos:start="59:10" pos:end="59:15">0x320E</literal></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:53"><expr pos:start="61:9" pos:end="61:52"><name pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:18">descriptor</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:32">aspect_ratio</name><operator pos:start="61:33" pos:end="61:33">.</operator><name pos:start="61:34" pos:end="61:36">num</name></name> <operator pos:start="61:38" pos:end="61:38">=</operator> <call pos:start="61:40" pos:end="61:52"><name pos:start="61:40" pos:end="61:48">avio_rb32</name><argument_list pos:start="61:49" pos:end="61:52">(<argument pos:start="61:50" pos:end="61:51"><expr pos:start="61:50" pos:end="61:51"><name pos:start="61:50" pos:end="61:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:53"><expr pos:start="63:9" pos:end="63:52"><name pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:18">descriptor</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:32">aspect_ratio</name><operator pos:start="63:33" pos:end="63:33">.</operator><name pos:start="63:34" pos:end="63:36">den</name></name> <operator pos:start="63:38" pos:end="63:38">=</operator> <call pos:start="63:40" pos:end="63:52"><name pos:start="63:40" pos:end="63:48">avio_rb32</name><argument_list pos:start="63:49" pos:end="63:52">(<argument pos:start="63:50" pos:end="63:51"><expr pos:start="63:50" pos:end="63:51"><name pos:start="63:50" pos:end="63:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:16">case <expr pos:start="67:10" pos:end="67:15"><literal type="number" pos:start="67:10" pos:end="67:15">0x3D03</literal></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:52"><expr pos:start="69:9" pos:end="69:51"><name pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:18">descriptor</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:31">sample_rate</name><operator pos:start="69:32" pos:end="69:32">.</operator><name pos:start="69:33" pos:end="69:35">num</name></name> <operator pos:start="69:37" pos:end="69:37">=</operator> <call pos:start="69:39" pos:end="69:51"><name pos:start="69:39" pos:end="69:47">avio_rb32</name><argument_list pos:start="69:48" pos:end="69:51">(<argument pos:start="69:49" pos:end="69:50"><expr pos:start="69:49" pos:end="69:50"><name pos:start="69:49" pos:end="69:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:52"><expr pos:start="71:9" pos:end="71:51"><name pos:start="71:9" pos:end="71:35"><name pos:start="71:9" pos:end="71:18">descriptor</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:31">sample_rate</name><operator pos:start="71:32" pos:end="71:32">.</operator><name pos:start="71:33" pos:end="71:35">den</name></name> <operator pos:start="71:37" pos:end="71:37">=</operator> <call pos:start="71:39" pos:end="71:51"><name pos:start="71:39" pos:end="71:47">avio_rb32</name><argument_list pos:start="71:48" pos:end="71:51">(<argument pos:start="71:49" pos:end="71:50"><expr pos:start="71:49" pos:end="71:50"><name pos:start="71:49" pos:end="71:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:16">case <expr pos:start="75:10" pos:end="75:15"><literal type="number" pos:start="75:10" pos:end="75:15">0x3D06</literal></expr>:</case> <comment type="block" pos:start="75:18" pos:end="75:46">/* SoundEssenceCompression */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:56"><expr pos:start="77:9" pos:end="77:55"><call pos:start="77:9" pos:end="77:55"><name pos:start="77:9" pos:end="77:17">avio_read</name><argument_list pos:start="77:18" pos:end="77:55">(<argument pos:start="77:19" pos:end="77:20"><expr pos:start="77:19" pos:end="77:20"><name pos:start="77:19" pos:end="77:20">pb</name></expr></argument>, <argument pos:start="77:23" pos:end="77:50"><expr pos:start="77:23" pos:end="77:50"><name pos:start="77:23" pos:end="77:50"><name pos:start="77:23" pos:end="77:32">descriptor</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:50">essence_codec_ul</name></name></expr></argument>, <argument pos:start="77:53" pos:end="77:54"><expr pos:start="77:53" pos:end="77:54"><literal type="number" pos:start="77:53" pos:end="77:54">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:16">case <expr pos:start="81:10" pos:end="81:15"><literal type="number" pos:start="81:10" pos:end="81:15">0x3D07</literal></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:45"><expr pos:start="83:9" pos:end="83:44"><name pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:18">descriptor</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:28">channels</name></name> <operator pos:start="83:30" pos:end="83:30">=</operator> <call pos:start="83:32" pos:end="83:44"><name pos:start="83:32" pos:end="83:40">avio_rb32</name><argument_list pos:start="83:41" pos:end="83:44">(<argument pos:start="83:42" pos:end="83:43"><expr pos:start="83:42" pos:end="83:43"><name pos:start="83:42" pos:end="83:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:16">case <expr pos:start="87:10" pos:end="87:15"><literal type="number" pos:start="87:10" pos:end="87:15">0x3D01</literal></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:52"><expr pos:start="89:9" pos:end="89:51"><name pos:start="89:9" pos:end="89:35"><name pos:start="89:9" pos:end="89:18">descriptor</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:35">bits_per_sample</name></name> <operator pos:start="89:37" pos:end="89:37">=</operator> <call pos:start="89:39" pos:end="89:51"><name pos:start="89:39" pos:end="89:47">avio_rb32</name><argument_list pos:start="89:48" pos:end="89:51">(<argument pos:start="89:49" pos:end="89:50"><expr pos:start="89:49" pos:end="89:50"><name pos:start="89:49" pos:end="89:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>

    <case pos:start="93:5" pos:end="93:16">case <expr pos:start="93:10" pos:end="93:15"><literal type="number" pos:start="93:10" pos:end="93:15">0x3401</literal></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:46"><expr pos:start="95:9" pos:end="95:45"><call pos:start="95:9" pos:end="95:45"><name pos:start="95:9" pos:end="95:29">mxf_read_pixel_layout</name><argument_list pos:start="95:30" pos:end="95:45">(<argument pos:start="95:31" pos:end="95:32"><expr pos:start="95:31" pos:end="95:32"><name pos:start="95:31" pos:end="95:32">pb</name></expr></argument>, <argument pos:start="95:35" pos:end="95:44"><expr pos:start="95:35" pos:end="95:44"><name pos:start="95:35" pos:end="95:44">descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <default pos:start="99:5" pos:end="99:12">default:</default>

        <comment type="block" pos:start="101:9" pos:end="101:51">/* Private uid used by SONY C0023S01.mxf */</comment>

        <if_stmt pos:start="103:9" pos:end="115:9"><if pos:start="103:9" pos:end="115:9">if <condition pos:start="103:12" pos:end="103:54">(<expr pos:start="103:13" pos:end="103:53"><call pos:start="103:13" pos:end="103:53"><name pos:start="103:13" pos:end="103:22">IS_KLV_KEY</name><argument_list pos:start="103:23" pos:end="103:53">(<argument pos:start="103:24" pos:end="103:26"><expr pos:start="103:24" pos:end="103:26"><name pos:start="103:24" pos:end="103:26">uid</name></expr></argument>, <argument pos:start="103:29" pos:end="103:52"><expr pos:start="103:29" pos:end="103:52"><name pos:start="103:29" pos:end="103:52">mxf_sony_mpeg4_extradata</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:56" pos:end="115:9">{<block_content pos:start="105:13" pos:end="113:55">

            <expr_stmt pos:start="105:13" pos:end="105:83"><expr pos:start="105:13" pos:end="105:82"><name pos:start="105:13" pos:end="105:33"><name pos:start="105:13" pos:end="105:22">descriptor</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:33">extradata</name></name> <operator pos:start="105:35" pos:end="105:35">=</operator> <call pos:start="105:37" pos:end="105:82"><name pos:start="105:37" pos:end="105:45">av_malloc</name><argument_list pos:start="105:46" pos:end="105:82">(<argument pos:start="105:47" pos:end="105:81"><expr pos:start="105:47" pos:end="105:81"><name pos:start="105:47" pos:end="105:50">size</name> <operator pos:start="105:52" pos:end="105:52">+</operator> <name pos:start="105:54" pos:end="105:81">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="109:26"><if pos:start="107:13" pos:end="109:26">if <condition pos:start="107:16" pos:end="107:39">(<expr pos:start="107:17" pos:end="107:38"><operator pos:start="107:17" pos:end="107:17">!</operator><name pos:start="107:18" pos:end="107:38"><name pos:start="107:18" pos:end="107:27">descriptor</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:38">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="109:17" pos:end="109:26"><block_content pos:start="109:17" pos:end="109:26">

                <return pos:start="109:17" pos:end="109:26">return <expr pos:start="109:24" pos:end="109:25"><operator pos:start="109:24" pos:end="109:24">-</operator><literal type="number" pos:start="109:25" pos:end="109:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:46"><expr pos:start="111:13" pos:end="111:45"><name pos:start="111:13" pos:end="111:38"><name pos:start="111:13" pos:end="111:22">descriptor</name><operator pos:start="111:23" pos:end="111:24">-&gt;</operator><name pos:start="111:25" pos:end="111:38">extradata_size</name></name> <operator pos:start="111:40" pos:end="111:40">=</operator> <name pos:start="111:42" pos:end="111:45">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:55"><expr pos:start="113:13" pos:end="113:54"><call pos:start="113:13" pos:end="113:54"><name pos:start="113:13" pos:end="113:21">avio_read</name><argument_list pos:start="113:22" pos:end="113:54">(<argument pos:start="113:23" pos:end="113:24"><expr pos:start="113:23" pos:end="113:24"><name pos:start="113:23" pos:end="113:24">pb</name></expr></argument>, <argument pos:start="113:27" pos:end="113:47"><expr pos:start="113:27" pos:end="113:47"><name pos:start="113:27" pos:end="113:47"><name pos:start="113:27" pos:end="113:36">descriptor</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:47">extradata</name></name></expr></argument>, <argument pos:start="113:50" pos:end="113:53"><expr pos:start="113:50" pos:end="113:53"><name pos:start="113:50" pos:end="113:53">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
