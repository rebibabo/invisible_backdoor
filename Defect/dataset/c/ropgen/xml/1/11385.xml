<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11385.c" pos:tabs="8"><function pos:start="1:1" pos:end="259:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">vmsvga_value_write</name><parameter_list pos:start="1:31" pos:end="1:78">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:53">uint32_t</name></type> <name pos:start="1:55" pos:end="1:61">address</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:71">uint32_t</name></type> <name pos:start="1:73" pos:end="1:77">value</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="259:1">{<block_content pos:start="5:5" pos:end="257:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:25">vmsvga_state_s</name></name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:28">s</name> <init pos:start="5:30" pos:end="5:37">= <expr pos:start="5:32" pos:end="5:37"><name pos:start="5:32" pos:end="5:37">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="21:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:38">(<expr pos:start="9:9" pos:end="9:37"><name pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:9">s</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:16">index</name></name> <operator pos:start="9:18" pos:end="9:19">&gt;=</operator> <name pos:start="9:21" pos:end="9:37">SVGA_SCRATCH_BASE</name></expr>)</condition> <block pos:start="9:40" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:52">

        <expr_stmt pos:start="11:9" pos:end="11:52"><expr pos:start="11:9" pos:end="11:51"><call pos:start="11:9" pos:end="11:51"><name pos:start="11:9" pos:end="11:34">trace_vmware_scratch_write</name><argument_list pos:start="11:35" pos:end="11:51">(<argument pos:start="11:36" pos:end="11:43"><expr pos:start="11:36" pos:end="11:43"><name pos:start="11:36" pos:end="11:43"><name pos:start="11:36" pos:end="11:36">s</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:43">index</name></name></expr></argument>, <argument pos:start="11:46" pos:end="11:50"><expr pos:start="11:46" pos:end="11:50"><name pos:start="11:46" pos:end="11:50">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="13:7" pos:end="17:5">else if <condition pos:start="13:15" pos:end="13:45">(<expr pos:start="13:16" pos:end="13:44"><name pos:start="13:16" pos:end="13:23"><name pos:start="13:16" pos:end="13:16">s</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:23">index</name></name> <operator pos:start="13:25" pos:end="13:26">&gt;=</operator> <name pos:start="13:28" pos:end="13:44">SVGA_PALETTE_BASE</name></expr>)</condition> <block pos:start="13:47" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:52">

        <expr_stmt pos:start="15:9" pos:end="15:52"><expr pos:start="15:9" pos:end="15:51"><call pos:start="15:9" pos:end="15:51"><name pos:start="15:9" pos:end="15:34">trace_vmware_palette_write</name><argument_list pos:start="15:35" pos:end="15:51">(<argument pos:start="15:36" pos:end="15:43"><expr pos:start="15:36" pos:end="15:43"><name pos:start="15:36" pos:end="15:43"><name pos:start="15:36" pos:end="15:36">s</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:43">index</name></name></expr></argument>, <argument pos:start="15:46" pos:end="15:50"><expr pos:start="15:46" pos:end="15:50"><name pos:start="15:46" pos:end="15:50">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="17:7" pos:end="21:5">else <block pos:start="17:12" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:50">

        <expr_stmt pos:start="19:9" pos:end="19:50"><expr pos:start="19:9" pos:end="19:49"><call pos:start="19:9" pos:end="19:49"><name pos:start="19:9" pos:end="19:32">trace_vmware_value_write</name><argument_list pos:start="19:33" pos:end="19:49">(<argument pos:start="19:34" pos:end="19:41"><expr pos:start="19:34" pos:end="19:41"><name pos:start="19:34" pos:end="19:41"><name pos:start="19:34" pos:end="19:34">s</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:41">index</name></name></expr></argument>, <argument pos:start="19:44" pos:end="19:48"><expr pos:start="19:44" pos:end="19:48"><name pos:start="19:44" pos:end="19:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <switch pos:start="23:5" pos:end="257:5">switch <condition pos:start="23:12" pos:end="23:21">(<expr pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:20">index</name></name></expr>)</condition> <block pos:start="23:23" pos:end="257:5">{<block_content pos:start="25:5" pos:end="255:62">

    <case pos:start="25:5" pos:end="25:21">case <expr pos:start="25:10" pos:end="25:20"><name pos:start="25:10" pos:end="25:20">SVGA_REG_ID</name></expr>:</case>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:75">(<expr pos:start="27:13" pos:end="27:74"><name pos:start="27:13" pos:end="27:17">value</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <name pos:start="27:22" pos:end="27:30">SVGA_ID_2</name> <operator pos:start="27:32" pos:end="27:33">||</operator> <name pos:start="27:35" pos:end="27:39">value</name> <operator pos:start="27:41" pos:end="27:42">==</operator> <name pos:start="27:44" pos:end="27:52">SVGA_ID_1</name> <operator pos:start="27:54" pos:end="27:55">||</operator> <name pos:start="27:57" pos:end="27:61">value</name> <operator pos:start="27:63" pos:end="27:64">==</operator> <name pos:start="27:66" pos:end="27:74">SVGA_ID_0</name></expr>)</condition> <block pos:start="27:77" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:30">

            <expr_stmt pos:start="29:13" pos:end="29:30"><expr pos:start="29:13" pos:end="29:29"><name pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:21">svgaid</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:29">value</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>



    <case pos:start="37:5" pos:end="37:25">case <expr pos:start="37:10" pos:end="37:24"><name pos:start="37:10" pos:end="37:24">SVGA_REG_ENABLE</name></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:28"><expr pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:17">enable</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <operator pos:start="39:21" pos:end="39:21">!</operator><operator pos:start="39:22" pos:end="39:22">!</operator><name pos:start="39:23" pos:end="39:27">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:22">invalidated</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <literal type="number" pos:start="41:26" pos:end="41:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:43"><expr pos:start="43:9" pos:end="43:42"><call pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:14">vga</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:21">hw_ops</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:33">invalidate</name></name><argument_list pos:start="43:34" pos:end="43:42">(<argument pos:start="43:35" pos:end="43:41"><expr pos:start="43:35" pos:end="43:41"><operator pos:start="43:35" pos:end="43:35">&amp;</operator><name pos:start="43:36" pos:end="43:41"><name pos:start="43:36" pos:end="43:36">s</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:41">vga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:35">(<expr pos:start="45:13" pos:end="45:34"><name pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:21">enable</name></name> <operator pos:start="45:23" pos:end="45:24">&amp;&amp;</operator> <name pos:start="45:26" pos:end="45:34"><name pos:start="45:26" pos:end="45:26">s</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:34">config</name></name></expr>)</condition> <block pos:start="45:37" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:40">

            <expr_stmt pos:start="47:13" pos:end="47:40"><expr pos:start="47:13" pos:end="47:39"><call pos:start="47:13" pos:end="47:39"><name pos:start="47:13" pos:end="47:30">vga_dirty_log_stop</name><argument_list pos:start="47:31" pos:end="47:39">(<argument pos:start="47:32" pos:end="47:38"><expr pos:start="47:32" pos:end="47:38"><operator pos:start="47:32" pos:end="47:32">&amp;</operator><name pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:33">s</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:38">vga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="53:9">else <block pos:start="49:16" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:41">

            <expr_stmt pos:start="51:13" pos:end="51:41"><expr pos:start="51:13" pos:end="51:40"><call pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:31">vga_dirty_log_start</name><argument_list pos:start="51:32" pos:end="51:40">(<argument pos:start="51:33" pos:end="51:39"><expr pos:start="51:33" pos:end="51:39"><operator pos:start="51:33" pos:end="51:33">&amp;</operator><name pos:start="51:34" pos:end="51:39"><name pos:start="51:34" pos:end="51:34">s</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:39">vga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>



    <case pos:start="59:5" pos:end="59:24">case <expr pos:start="59:10" pos:end="59:23"><name pos:start="59:10" pos:end="59:23">SVGA_REG_WIDTH</name></expr>:</case>

        <if_stmt pos:start="61:9" pos:end="71:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:36">(<expr pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:17">value</name> <operator pos:start="61:19" pos:end="61:20">&lt;=</operator> <name pos:start="61:22" pos:end="61:35">SVGA_MAX_WIDTH</name></expr>)</condition> <block pos:start="61:38" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:31">

            <expr_stmt pos:start="63:13" pos:end="63:33"><expr pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:24">new_width</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:32">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:31"><expr pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:26">invalidated</name></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <literal type="number" pos:start="65:30" pos:end="65:30">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="71:9">else <block pos:start="67:16" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:59">

            <expr_stmt pos:start="69:13" pos:end="69:59"><expr pos:start="69:13" pos:end="69:58"><call pos:start="69:13" pos:end="69:58"><name pos:start="69:13" pos:end="69:18">printf</name><argument_list pos:start="69:19" pos:end="69:58">(<argument pos:start="69:20" pos:end="69:40"><expr pos:start="69:20" pos:end="69:40"><literal type="string" pos:start="69:20" pos:end="69:40">"%s: Bad width: %i\n"</literal></expr></argument>, <argument pos:start="69:43" pos:end="69:50"><expr pos:start="69:43" pos:end="69:50"><name pos:start="69:43" pos:end="69:50">__func__</name></expr></argument>, <argument pos:start="69:53" pos:end="69:57"><expr pos:start="69:53" pos:end="69:57"><name pos:start="69:53" pos:end="69:57">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>



    <case pos:start="77:5" pos:end="77:25">case <expr pos:start="77:10" pos:end="77:24"><name pos:start="77:10" pos:end="77:24">SVGA_REG_HEIGHT</name></expr>:</case>

        <if_stmt pos:start="79:9" pos:end="89:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:37">(<expr pos:start="79:13" pos:end="79:36"><name pos:start="79:13" pos:end="79:17">value</name> <operator pos:start="79:19" pos:end="79:20">&lt;=</operator> <name pos:start="79:22" pos:end="79:36">SVGA_MAX_HEIGHT</name></expr>)</condition> <block pos:start="79:39" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:31">

            <expr_stmt pos:start="81:13" pos:end="81:34"><expr pos:start="81:13" pos:end="81:33"><name pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:25">new_height</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <name pos:start="81:29" pos:end="81:33">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:31"><expr pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:26"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:26">invalidated</name></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <literal type="number" pos:start="83:30" pos:end="83:30">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="85:11" pos:end="89:9">else <block pos:start="85:16" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:60">

            <expr_stmt pos:start="87:13" pos:end="87:60"><expr pos:start="87:13" pos:end="87:59"><call pos:start="87:13" pos:end="87:59"><name pos:start="87:13" pos:end="87:18">printf</name><argument_list pos:start="87:19" pos:end="87:59">(<argument pos:start="87:20" pos:end="87:41"><expr pos:start="87:20" pos:end="87:41"><literal type="string" pos:start="87:20" pos:end="87:41">"%s: Bad height: %i\n"</literal></expr></argument>, <argument pos:start="87:44" pos:end="87:51"><expr pos:start="87:44" pos:end="87:51"><name pos:start="87:44" pos:end="87:51">__func__</name></expr></argument>, <argument pos:start="87:54" pos:end="87:58"><expr pos:start="87:54" pos:end="87:58"><name pos:start="87:54" pos:end="87:58">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



    <case pos:start="95:5" pos:end="95:33">case <expr pos:start="95:10" pos:end="95:32"><name pos:start="95:10" pos:end="95:32">SVGA_REG_BITS_PER_PIXEL</name></expr>:</case>

        <if_stmt pos:start="97:9" pos:end="105:9"><if pos:start="97:9" pos:end="105:9">if <condition pos:start="97:12" pos:end="97:24">(<expr pos:start="97:13" pos:end="97:23"><name pos:start="97:13" pos:end="97:17">value</name> <operator pos:start="97:19" pos:end="97:20">!=</operator> <literal type="number" pos:start="97:22" pos:end="97:23">32</literal></expr>)</condition> <block pos:start="97:26" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:31">

            <expr_stmt pos:start="99:13" pos:end="99:73"><expr pos:start="99:13" pos:end="99:72"><call pos:start="99:13" pos:end="99:72"><name pos:start="99:13" pos:end="99:18">printf</name><argument_list pos:start="99:19" pos:end="99:72">(<argument pos:start="99:20" pos:end="99:54"><expr pos:start="99:20" pos:end="99:54"><literal type="string" pos:start="99:20" pos:end="99:54">"%s: Bad bits per pixel: %i bits\n"</literal></expr></argument>, <argument pos:start="99:57" pos:end="99:64"><expr pos:start="99:57" pos:end="99:64"><name pos:start="99:57" pos:end="99:64">__func__</name></expr></argument>, <argument pos:start="99:67" pos:end="99:71"><expr pos:start="99:67" pos:end="99:71"><name pos:start="99:67" pos:end="99:71">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:26"><expr pos:start="101:13" pos:end="101:25"><name pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:13">s</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:21">config</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <literal type="number" pos:start="101:25" pos:end="101:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:31"><expr pos:start="103:13" pos:end="103:30"><name pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:26">invalidated</name></name> <operator pos:start="103:28" pos:end="103:28">=</operator> <literal type="number" pos:start="103:30" pos:end="103:30">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>



    <case pos:start="111:5" pos:end="111:30">case <expr pos:start="111:10" pos:end="111:29"><name pos:start="111:10" pos:end="111:29">SVGA_REG_CONFIG_DONE</name></expr>:</case>

        <if_stmt pos:start="113:9" pos:end="145:9"><if pos:start="113:9" pos:end="145:9">if <condition pos:start="113:12" pos:end="113:18">(<expr pos:start="113:13" pos:end="113:17"><name pos:start="113:13" pos:end="113:17">value</name></expr>)</condition> <block pos:start="113:20" pos:end="145:9">{<block_content pos:start="115:13" pos:end="143:40">

            <expr_stmt pos:start="115:13" pos:end="115:47"><expr pos:start="115:13" pos:end="115:46"><name pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:19">fifo</name></name> <operator pos:start="115:21" pos:end="115:21">=</operator> <operator pos:start="115:23" pos:end="115:23">(</operator><name pos:start="115:24" pos:end="115:31">uint32_t</name> <operator pos:start="115:33" pos:end="115:33">*</operator><operator pos:start="115:34" pos:end="115:34">)</operator> <name pos:start="115:36" pos:end="115:46"><name pos:start="115:36" pos:end="115:36">s</name><operator pos:start="115:37" pos:end="115:38">-&gt;</operator><name pos:start="115:39" pos:end="115:46">fifo_ptr</name></name></expr>;</expr_stmt>

            <comment type="block" pos:start="117:13" pos:end="117:45">/* Check range and alignment.  */</comment>

            <if_stmt pos:start="119:13" pos:end="123:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:70">(<expr pos:start="119:17" pos:end="119:69"><operator pos:start="119:17" pos:end="119:17">(</operator><call pos:start="119:18" pos:end="119:25"><name pos:start="119:18" pos:end="119:20">CMD</name><argument_list pos:start="119:21" pos:end="119:25">(<argument pos:start="119:22" pos:end="119:24"><expr pos:start="119:22" pos:end="119:24"><name pos:start="119:22" pos:end="119:24">min</name></expr></argument>)</argument_list></call> <operator pos:start="119:27" pos:end="119:27">|</operator> <call pos:start="119:29" pos:end="119:36"><name pos:start="119:29" pos:end="119:31">CMD</name><argument_list pos:start="119:32" pos:end="119:36">(<argument pos:start="119:33" pos:end="119:35"><expr pos:start="119:33" pos:end="119:35"><name pos:start="119:33" pos:end="119:35">max</name></expr></argument>)</argument_list></call> <operator pos:start="119:38" pos:end="119:38">|</operator> <call pos:start="119:40" pos:end="119:52"><name pos:start="119:40" pos:end="119:42">CMD</name><argument_list pos:start="119:43" pos:end="119:52">(<argument pos:start="119:44" pos:end="119:51"><expr pos:start="119:44" pos:end="119:51"><name pos:start="119:44" pos:end="119:51">next_cmd</name></expr></argument>)</argument_list></call> <operator pos:start="119:54" pos:end="119:54">|</operator> <call pos:start="119:56" pos:end="119:64"><name pos:start="119:56" pos:end="119:58">CMD</name><argument_list pos:start="119:59" pos:end="119:64">(<argument pos:start="119:60" pos:end="119:63"><expr pos:start="119:60" pos:end="119:63"><name pos:start="119:60" pos:end="119:63">stop</name></expr></argument>)</argument_list></call><operator pos:start="119:65" pos:end="119:65">)</operator> <operator pos:start="119:67" pos:end="119:67">&amp;</operator> <literal type="number" pos:start="119:69" pos:end="119:69">3</literal></expr>)</condition> <block pos:start="119:72" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:22">

                <break pos:start="121:17" pos:end="121:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="125:13" pos:end="129:13"><if pos:start="125:13" pos:end="129:13">if <condition pos:start="125:16" pos:end="125:74">(<expr pos:start="125:17" pos:end="125:73"><call pos:start="125:17" pos:end="125:24"><name pos:start="125:17" pos:end="125:19">CMD</name><argument_list pos:start="125:20" pos:end="125:24">(<argument pos:start="125:21" pos:end="125:23"><expr pos:start="125:21" pos:end="125:23"><name pos:start="125:21" pos:end="125:23">min</name></expr></argument>)</argument_list></call> <operator pos:start="125:26" pos:end="125:26">&lt;</operator> <operator pos:start="125:28" pos:end="125:28">(</operator><name pos:start="125:29" pos:end="125:35">uint8_t</name> <operator pos:start="125:37" pos:end="125:37">*</operator><operator pos:start="125:38" pos:end="125:38">)</operator> <name pos:start="125:40" pos:end="125:51"><name pos:start="125:40" pos:end="125:40">s</name><operator pos:start="125:41" pos:end="125:42">-&gt;</operator><name pos:start="125:43" pos:end="125:45">cmd</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:51">fifo</name></name> <operator pos:start="125:53" pos:end="125:53">-</operator> <operator pos:start="125:55" pos:end="125:55">(</operator><name pos:start="125:56" pos:end="125:62">uint8_t</name> <operator pos:start="125:64" pos:end="125:64">*</operator><operator pos:start="125:65" pos:end="125:65">)</operator> <name pos:start="125:67" pos:end="125:73"><name pos:start="125:67" pos:end="125:67">s</name><operator pos:start="125:68" pos:end="125:69">-&gt;</operator><name pos:start="125:70" pos:end="125:73">fifo</name></name></expr>)</condition> <block pos:start="125:76" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:22">

                <break pos:start="127:17" pos:end="127:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="131:13" pos:end="135:13"><if pos:start="131:13" pos:end="135:13">if <condition pos:start="131:16" pos:end="131:42">(<expr pos:start="131:17" pos:end="131:41"><call pos:start="131:17" pos:end="131:24"><name pos:start="131:17" pos:end="131:19">CMD</name><argument_list pos:start="131:20" pos:end="131:24">(<argument pos:start="131:21" pos:end="131:23"><expr pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:23">max</name></expr></argument>)</argument_list></call> <operator pos:start="131:26" pos:end="131:26">&gt;</operator> <name pos:start="131:28" pos:end="131:41">SVGA_FIFO_SIZE</name></expr>)</condition> <block pos:start="131:44" pos:end="135:13">{<block_content pos:start="133:17" pos:end="133:22">

                <break pos:start="133:17" pos:end="133:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="137:13" pos:end="141:13"><if pos:start="137:13" pos:end="141:13">if <condition pos:start="137:16" pos:end="137:48">(<expr pos:start="137:17" pos:end="137:47"><call pos:start="137:17" pos:end="137:24"><name pos:start="137:17" pos:end="137:19">CMD</name><argument_list pos:start="137:20" pos:end="137:24">(<argument pos:start="137:21" pos:end="137:23"><expr pos:start="137:21" pos:end="137:23"><name pos:start="137:21" pos:end="137:23">max</name></expr></argument>)</argument_list></call> <operator pos:start="137:26" pos:end="137:26">&lt;</operator> <call pos:start="137:28" pos:end="137:35"><name pos:start="137:28" pos:end="137:30">CMD</name><argument_list pos:start="137:31" pos:end="137:35">(<argument pos:start="137:32" pos:end="137:34"><expr pos:start="137:32" pos:end="137:34"><name pos:start="137:32" pos:end="137:34">min</name></expr></argument>)</argument_list></call> <operator pos:start="137:37" pos:end="137:37">+</operator> <literal type="number" pos:start="137:39" pos:end="137:40">10</literal> <operator pos:start="137:42" pos:end="137:42">*</operator> <literal type="number" pos:start="137:44" pos:end="137:47">1024</literal></expr>)</condition> <block pos:start="137:50" pos:end="141:13">{<block_content pos:start="139:17" pos:end="139:22">

                <break pos:start="139:17" pos:end="139:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:40"><expr pos:start="143:13" pos:end="143:39"><call pos:start="143:13" pos:end="143:39"><name pos:start="143:13" pos:end="143:30">vga_dirty_log_stop</name><argument_list pos:start="143:31" pos:end="143:39">(<argument pos:start="143:32" pos:end="143:38"><expr pos:start="143:32" pos:end="143:38"><operator pos:start="143:32" pos:end="143:32">&amp;</operator><name pos:start="143:33" pos:end="143:38"><name pos:start="143:33" pos:end="143:33">s</name><operator pos:start="143:34" pos:end="143:35">-&gt;</operator><name pos:start="143:36" pos:end="143:38">vga</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:28"><expr pos:start="147:9" pos:end="147:27"><name pos:start="147:9" pos:end="147:17"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:17">config</name></name> <operator pos:start="147:19" pos:end="147:19">=</operator> <operator pos:start="147:21" pos:end="147:21">!</operator><operator pos:start="147:22" pos:end="147:22">!</operator><name pos:start="147:23" pos:end="147:27">value</name></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>



    <case pos:start="153:5" pos:end="153:23">case <expr pos:start="153:10" pos:end="153:22"><name pos:start="153:10" pos:end="153:22">SVGA_REG_SYNC</name></expr>:</case>

        <expr_stmt pos:start="155:9" pos:end="155:23"><expr pos:start="155:9" pos:end="155:22"><name pos:start="155:9" pos:end="155:18"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:18">syncing</name></name> <operator pos:start="155:20" pos:end="155:20">=</operator> <literal type="number" pos:start="155:22" pos:end="155:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:27"><expr pos:start="157:9" pos:end="157:26"><call pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:23">vmsvga_fifo_run</name><argument_list pos:start="157:24" pos:end="157:26">(<argument pos:start="157:25" pos:end="157:25"><expr pos:start="157:25" pos:end="157:25"><name pos:start="157:25" pos:end="157:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="157:29" pos:end="157:76">/* Or should we just wait for update_display? */</comment>

        <break pos:start="159:9" pos:end="159:14">break;</break>



    <case pos:start="163:5" pos:end="163:27">case <expr pos:start="163:10" pos:end="163:26"><name pos:start="163:10" pos:end="163:26">SVGA_REG_GUEST_ID</name></expr>:</case>

        <expr_stmt pos:start="165:9" pos:end="168:0"><expr pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:16"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:16">guest</name></name> <operator pos:start="165:18" pos:end="165:18">=</operator> <name pos:start="165:20" pos:end="165:24">value</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="167:1" pos:end="167:14">#<cpp:directive pos:start="167:2" pos:end="167:6">ifdef</cpp:directive> <name pos:start="167:8" pos:end="167:14">VERBOSE</name></cpp:ifdef>

        <if_stmt pos:start="169:9" pos:end="180:0"><if pos:start="169:9" pos:end="180:0">if <condition pos:start="169:12" pos:end="171:40">(<expr pos:start="169:13" pos:end="171:39"><name pos:start="169:13" pos:end="169:17">value</name> <operator pos:start="169:19" pos:end="169:20">&gt;=</operator> <name pos:start="169:22" pos:end="169:34">GUEST_OS_BASE</name> <operator pos:start="169:36" pos:end="169:37">&amp;&amp;</operator> <name pos:start="169:39" pos:end="169:43">value</name> <operator pos:start="169:45" pos:end="169:45">&lt;</operator> <name pos:start="169:47" pos:end="169:59">GUEST_OS_BASE</name> <operator pos:start="169:61" pos:end="169:61">+</operator>

            <call pos:start="171:13" pos:end="171:39"><name pos:start="171:13" pos:end="171:22">ARRAY_SIZE</name><argument_list pos:start="171:23" pos:end="171:39">(<argument pos:start="171:24" pos:end="171:38"><expr pos:start="171:24" pos:end="171:38"><name pos:start="171:24" pos:end="171:38">vmsvga_guest_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:42" pos:end="180:0">{<block_content pos:start="173:13" pos:end="175:59">

            <expr_stmt pos:start="173:13" pos:end="175:59"><expr pos:start="173:13" pos:end="175:58"><call pos:start="173:13" pos:end="175:58"><name pos:start="173:13" pos:end="173:18">printf</name><argument_list pos:start="173:19" pos:end="175:58">(<argument pos:start="173:20" pos:end="173:41"><expr pos:start="173:20" pos:end="173:41"><literal type="string" pos:start="173:20" pos:end="173:41">"%s: guest runs %s.\n"</literal></expr></argument>, <argument pos:start="173:44" pos:end="173:51"><expr pos:start="173:44" pos:end="173:51"><name pos:start="173:44" pos:end="173:51">__func__</name></expr></argument>,

                   <argument pos:start="175:20" pos:end="175:57"><expr pos:start="175:20" pos:end="175:57"><name pos:start="175:20" pos:end="175:57"><name pos:start="175:20" pos:end="175:34">vmsvga_guest_id</name><index pos:start="175:35" pos:end="175:57">[<expr pos:start="175:36" pos:end="175:56"><name pos:start="175:36" pos:end="175:40">value</name> <operator pos:start="175:42" pos:end="175:42">-</operator> <name pos:start="175:44" pos:end="175:56">GUEST_OS_BASE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="179:1" pos:end="179:6">#<cpp:directive pos:start="179:2" pos:end="179:6">endif</cpp:directive></cpp:endif>

        <break pos:start="181:9" pos:end="181:14">break;</break>



    <case pos:start="185:5" pos:end="185:28">case <expr pos:start="185:10" pos:end="185:27"><name pos:start="185:10" pos:end="185:27">SVGA_REG_CURSOR_ID</name></expr>:</case>

        <expr_stmt pos:start="187:9" pos:end="187:29"><expr pos:start="187:9" pos:end="187:28"><name pos:start="187:9" pos:end="187:20"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:17">cursor</name><operator pos:start="187:18" pos:end="187:18">.</operator><name pos:start="187:19" pos:end="187:20">id</name></name> <operator pos:start="187:22" pos:end="187:22">=</operator> <name pos:start="187:24" pos:end="187:28">value</name></expr>;</expr_stmt>

        <break pos:start="189:9" pos:end="189:14">break;</break>



    <case pos:start="193:5" pos:end="193:27">case <expr pos:start="193:10" pos:end="193:26"><name pos:start="193:10" pos:end="193:26">SVGA_REG_CURSOR_X</name></expr>:</case>

        <expr_stmt pos:start="195:9" pos:end="195:28"><expr pos:start="195:9" pos:end="195:27"><name pos:start="195:9" pos:end="195:19"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:17">cursor</name><operator pos:start="195:18" pos:end="195:18">.</operator><name pos:start="195:19" pos:end="195:19">x</name></name> <operator pos:start="195:21" pos:end="195:21">=</operator> <name pos:start="195:23" pos:end="195:27">value</name></expr>;</expr_stmt>

        <break pos:start="197:9" pos:end="197:14">break;</break>



    <case pos:start="201:5" pos:end="201:27">case <expr pos:start="201:10" pos:end="201:26"><name pos:start="201:10" pos:end="201:26">SVGA_REG_CURSOR_Y</name></expr>:</case>

        <expr_stmt pos:start="203:9" pos:end="203:28"><expr pos:start="203:9" pos:end="203:27"><name pos:start="203:9" pos:end="203:19"><name pos:start="203:9" pos:end="203:9">s</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:17">cursor</name><operator pos:start="203:18" pos:end="203:18">.</operator><name pos:start="203:19" pos:end="203:19">y</name></name> <operator pos:start="203:21" pos:end="203:21">=</operator> <name pos:start="203:23" pos:end="203:27">value</name></expr>;</expr_stmt>

        <break pos:start="205:9" pos:end="205:14">break;</break>



    <case pos:start="209:5" pos:end="209:28">case <expr pos:start="209:10" pos:end="209:27"><name pos:start="209:10" pos:end="209:27">SVGA_REG_CURSOR_ON</name></expr>:</case>

        <expr_stmt pos:start="211:9" pos:end="211:55"><expr pos:start="211:9" pos:end="211:54"><name pos:start="211:9" pos:end="211:20"><name pos:start="211:9" pos:end="211:9">s</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:17">cursor</name><operator pos:start="211:18" pos:end="211:18">.</operator><name pos:start="211:19" pos:end="211:20">on</name></name> <operator pos:start="211:22" pos:end="211:23">|=</operator> <operator pos:start="211:25" pos:end="211:25">(</operator><name pos:start="211:26" pos:end="211:30">value</name> <operator pos:start="211:32" pos:end="211:33">==</operator> <name pos:start="211:35" pos:end="211:53">SVGA_CURSOR_ON_SHOW</name><operator pos:start="211:54" pos:end="211:54">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="216:0"><expr pos:start="213:9" pos:end="213:54"><name pos:start="213:9" pos:end="213:20"><name pos:start="213:9" pos:end="213:9">s</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:17">cursor</name><operator pos:start="213:18" pos:end="213:18">.</operator><name pos:start="213:19" pos:end="213:20">on</name></name> <operator pos:start="213:22" pos:end="213:23">&amp;=</operator> <operator pos:start="213:25" pos:end="213:25">(</operator><name pos:start="213:26" pos:end="213:30">value</name> <operator pos:start="213:32" pos:end="213:33">!=</operator> <name pos:start="213:35" pos:end="213:53">SVGA_CURSOR_ON_HIDE</name><operator pos:start="213:54" pos:end="213:54">)</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="215:1" pos:end="215:21">#<cpp:directive pos:start="215:2" pos:end="215:6">ifdef</cpp:directive> <name pos:start="215:8" pos:end="215:21">HW_MOUSE_ACCEL</name></cpp:ifdef>

        <if_stmt pos:start="217:9" pos:end="224:0"><if pos:start="217:9" pos:end="224:0">if <condition pos:start="217:12" pos:end="217:41">(<expr pos:start="217:13" pos:end="217:40"><name pos:start="217:13" pos:end="217:17">value</name> <operator pos:start="217:19" pos:end="217:20">&lt;=</operator> <name pos:start="217:22" pos:end="217:40">SVGA_CURSOR_ON_SHOW</name></expr>)</condition> <block pos:start="217:43" pos:end="224:0">{<block_content pos:start="219:13" pos:end="219:78">

            <expr_stmt pos:start="219:13" pos:end="219:78"><expr pos:start="219:13" pos:end="219:77"><call pos:start="219:13" pos:end="219:77"><name pos:start="219:13" pos:end="219:25">dpy_mouse_set</name><argument_list pos:start="219:26" pos:end="219:77">(<argument pos:start="219:27" pos:end="219:36"><expr pos:start="219:27" pos:end="219:36"><name pos:start="219:27" pos:end="219:36"><name pos:start="219:27" pos:end="219:27">s</name><operator pos:start="219:28" pos:end="219:29">-&gt;</operator><name pos:start="219:30" pos:end="219:32">vga</name><operator pos:start="219:33" pos:end="219:33">.</operator><name pos:start="219:34" pos:end="219:36">con</name></name></expr></argument>, <argument pos:start="219:39" pos:end="219:49"><expr pos:start="219:39" pos:end="219:49"><name pos:start="219:39" pos:end="219:49"><name pos:start="219:39" pos:end="219:39">s</name><operator pos:start="219:40" pos:end="219:41">-&gt;</operator><name pos:start="219:42" pos:end="219:47">cursor</name><operator pos:start="219:48" pos:end="219:48">.</operator><name pos:start="219:49" pos:end="219:49">x</name></name></expr></argument>, <argument pos:start="219:52" pos:end="219:62"><expr pos:start="219:52" pos:end="219:62"><name pos:start="219:52" pos:end="219:62"><name pos:start="219:52" pos:end="219:52">s</name><operator pos:start="219:53" pos:end="219:54">-&gt;</operator><name pos:start="219:55" pos:end="219:60">cursor</name><operator pos:start="219:61" pos:end="219:61">.</operator><name pos:start="219:62" pos:end="219:62">y</name></name></expr></argument>, <argument pos:start="219:65" pos:end="219:76"><expr pos:start="219:65" pos:end="219:76"><name pos:start="219:65" pos:end="219:76"><name pos:start="219:65" pos:end="219:65">s</name><operator pos:start="219:66" pos:end="219:67">-&gt;</operator><name pos:start="219:68" pos:end="219:73">cursor</name><operator pos:start="219:74" pos:end="219:74">.</operator><name pos:start="219:75" pos:end="219:76">on</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="223:1" pos:end="223:6">#<cpp:directive pos:start="223:2" pos:end="223:6">endif</cpp:directive></cpp:endif>

        <break pos:start="225:9" pos:end="225:14">break;</break>



    <case pos:start="229:5" pos:end="229:24">case <expr pos:start="229:10" pos:end="229:23"><name pos:start="229:10" pos:end="229:23">SVGA_REG_DEPTH</name></expr>:</case>

    <case pos:start="231:5" pos:end="231:27">case <expr pos:start="231:10" pos:end="231:26"><name pos:start="231:10" pos:end="231:26">SVGA_REG_MEM_REGS</name></expr>:</case>

    <case pos:start="233:5" pos:end="233:31">case <expr pos:start="233:10" pos:end="233:30"><name pos:start="233:10" pos:end="233:30">SVGA_REG_NUM_DISPLAYS</name></expr>:</case>

    <case pos:start="235:5" pos:end="235:28">case <expr pos:start="235:10" pos:end="235:27"><name pos:start="235:10" pos:end="235:27">SVGA_REG_PITCHLOCK</name></expr>:</case>

    <case pos:start="237:5" pos:end="237:48">case <expr pos:start="237:10" pos:end="237:47"><name pos:start="237:10" pos:end="237:26">SVGA_PALETTE_BASE</name> <operator pos:start="237:28" pos:end="237:30">...</operator> <name pos:start="237:32" pos:end="237:47">SVGA_PALETTE_END</name></expr>:</case>

        <break pos:start="239:9" pos:end="239:14">break;</break>



    <default pos:start="243:5" pos:end="243:12">default:</default>

        <if_stmt pos:start="245:9" pos:end="253:9"><if pos:start="245:9" pos:end="253:9">if <condition pos:start="245:12" pos:end="247:63">(<expr pos:start="245:13" pos:end="247:62"><name pos:start="245:13" pos:end="245:20"><name pos:start="245:13" pos:end="245:13">s</name><operator pos:start="245:14" pos:end="245:15">-&gt;</operator><name pos:start="245:16" pos:end="245:20">index</name></name> <operator pos:start="245:22" pos:end="245:23">&gt;=</operator> <name pos:start="245:25" pos:end="245:41">SVGA_SCRATCH_BASE</name> <operator pos:start="245:43" pos:end="245:44">&amp;&amp;</operator>

                <name pos:start="247:17" pos:end="247:24"><name pos:start="247:17" pos:end="247:17">s</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:24">index</name></name> <operator pos:start="247:26" pos:end="247:26">&lt;</operator> <name pos:start="247:28" pos:end="247:44">SVGA_SCRATCH_BASE</name> <operator pos:start="247:46" pos:end="247:46">+</operator> <name pos:start="247:48" pos:end="247:62"><name pos:start="247:48" pos:end="247:48">s</name><operator pos:start="247:49" pos:end="247:50">-&gt;</operator><name pos:start="247:51" pos:end="247:62">scratch_size</name></name></expr>)</condition> <block pos:start="247:65" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:18">

            <expr_stmt pos:start="249:13" pos:end="249:61"><expr pos:start="249:13" pos:end="249:60"><name pos:start="249:13" pos:end="249:52"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:22">scratch</name><index pos:start="249:23" pos:end="249:52">[<expr pos:start="249:24" pos:end="249:51"><name pos:start="249:24" pos:end="249:31"><name pos:start="249:24" pos:end="249:24">s</name><operator pos:start="249:25" pos:end="249:26">-&gt;</operator><name pos:start="249:27" pos:end="249:31">index</name></name> <operator pos:start="249:33" pos:end="249:33">-</operator> <name pos:start="249:35" pos:end="249:51">SVGA_SCRATCH_BASE</name></expr>]</index></name> <operator pos:start="249:54" pos:end="249:54">=</operator> <name pos:start="249:56" pos:end="249:60">value</name></expr>;</expr_stmt>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:62"><expr pos:start="255:9" pos:end="255:61"><call pos:start="255:9" pos:end="255:61"><name pos:start="255:9" pos:end="255:14">printf</name><argument_list pos:start="255:15" pos:end="255:61">(<argument pos:start="255:16" pos:end="255:40"><expr pos:start="255:16" pos:end="255:40"><literal type="string" pos:start="255:16" pos:end="255:40">"%s: Bad register %02x\n"</literal></expr></argument>, <argument pos:start="255:43" pos:end="255:50"><expr pos:start="255:43" pos:end="255:50"><name pos:start="255:43" pos:end="255:50">__func__</name></expr></argument>, <argument pos:start="255:53" pos:end="255:60"><expr pos:start="255:53" pos:end="255:60"><name pos:start="255:53" pos:end="255:60"><name pos:start="255:53" pos:end="255:53">s</name><operator pos:start="255:54" pos:end="255:55">-&gt;</operator><name pos:start="255:56" pos:end="255:60">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
