<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5939.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:23">aio_thread</name><parameter_list pos:start="1:24" pos:end="1:37">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:30"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">unused</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:16">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">sigset_t</name></type> <name pos:start="5:14" pos:end="5:16">set</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:27">/* block all signals */</comment>

    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><call pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:14">sigfillset</name><argument_list pos:start="11:15" pos:end="11:20">(<argument pos:start="11:16" pos:end="11:19"><expr pos:start="11:16" pos:end="11:19"><operator pos:start="11:16" pos:end="11:16">&amp;</operator><name pos:start="11:17" pos:end="11:19">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><call pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:15">sigprocmask</name><argument_list pos:start="13:16" pos:end="13:38">(<argument pos:start="13:17" pos:end="13:25"><expr pos:start="13:17" pos:end="13:25"><name pos:start="13:17" pos:end="13:25">SIG_BLOCK</name></expr></argument>, <argument pos:start="13:28" pos:end="13:31"><expr pos:start="13:28" pos:end="13:31"><operator pos:start="13:28" pos:end="13:28">&amp;</operator><name pos:start="13:29" pos:end="13:31">set</name></expr></argument>, <argument pos:start="13:34" pos:end="13:37"><expr pos:start="13:34" pos:end="13:37"><name pos:start="13:34" pos:end="13:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="17:5" pos:end="151:5">while <condition pos:start="17:11" pos:end="17:13">(<expr pos:start="17:12" pos:end="17:12"><literal type="number" pos:start="17:12" pos:end="17:12">1</literal></expr>)</condition> <block pos:start="17:15" pos:end="151:5">{<block_content pos:start="19:9" pos:end="149:50">

        <decl_stmt pos:start="19:9" pos:end="19:34"><decl pos:start="19:9" pos:end="19:33"><type pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:14">struct</name> <name pos:start="19:16" pos:end="19:26">qemu_paiocb</name></name> <modifier pos:start="19:28" pos:end="19:28">*</modifier></type><name pos:start="19:29" pos:end="19:33">aiocb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:22"><decl pos:start="21:9" pos:end="21:21"><type pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:14">size_t</name></type> <name pos:start="21:16" pos:end="21:21">offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:20"><decl pos:start="23:9" pos:end="23:19"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:15">ret</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:34"><expr pos:start="27:9" pos:end="27:33"><call pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:26">pthread_mutex_lock</name><argument_list pos:start="27:27" pos:end="27:33">(<argument pos:start="27:28" pos:end="27:32"><expr pos:start="27:28" pos:end="27:32"><operator pos:start="27:28" pos:end="27:28">&amp;</operator><name pos:start="27:29" pos:end="27:32">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="31:9" pos:end="47:9">while <condition pos:start="31:15" pos:end="33:35">(<expr pos:start="31:16" pos:end="33:34"><call pos:start="31:16" pos:end="31:41"><name pos:start="31:16" pos:end="31:26">TAILQ_EMPTY</name><argument_list pos:start="31:27" pos:end="31:41">(<argument pos:start="31:28" pos:end="31:40"><expr pos:start="31:28" pos:end="31:40"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:40">request_list</name></expr></argument>)</argument_list></call> <operator pos:start="31:43" pos:end="31:44">&amp;&amp;</operator>

               <operator pos:start="33:16" pos:end="33:16">!</operator><operator pos:start="33:17" pos:end="33:17">(</operator><name pos:start="33:18" pos:end="33:20">ret</name> <operator pos:start="33:22" pos:end="33:23">==</operator> <name pos:start="33:25" pos:end="33:33">ETIMEDOUT</name><operator pos:start="33:34" pos:end="33:34">)</operator></expr>)</condition> <block pos:start="33:37" pos:end="47:9">{<block_content pos:start="35:13" pos:end="45:60">

            <decl_stmt pos:start="35:13" pos:end="35:39"><decl pos:start="35:13" pos:end="35:38"><type pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:18">struct</name> <name pos:start="35:20" pos:end="35:27">timespec</name></name></type> <name pos:start="35:29" pos:end="35:30">ts</name> <init pos:start="35:32" pos:end="35:38">= <expr pos:start="35:34" pos:end="35:38"><block pos:start="35:34" pos:end="35:38">{ <expr pos:start="35:36" pos:end="35:36"><literal type="number" pos:start="35:36" pos:end="35:36">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="37:13" pos:end="37:28"><decl pos:start="37:13" pos:end="37:27"><type pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:24">qemu_timeval</name></type> <name pos:start="37:26" pos:end="37:27">tv</name></decl>;</decl_stmt>



            <expr_stmt pos:start="41:13" pos:end="41:35"><expr pos:start="41:13" pos:end="41:34"><call pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:29">qemu_gettimeofday</name><argument_list pos:start="41:30" pos:end="41:34">(<argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><operator pos:start="41:31" pos:end="41:31">&amp;</operator><name pos:start="41:32" pos:end="41:33">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:14">ts</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:21">tv_sec</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <name pos:start="43:25" pos:end="43:33"><name pos:start="43:25" pos:end="43:26">tv</name><operator pos:start="43:27" pos:end="43:27">.</operator><name pos:start="43:28" pos:end="43:33">tv_sec</name></name> <operator pos:start="43:35" pos:end="43:35">+</operator> <literal type="number" pos:start="43:37" pos:end="43:38">10</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:60"><expr pos:start="45:13" pos:end="45:59"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:59"><name pos:start="45:19" pos:end="45:40">pthread_cond_timedwait</name><argument_list pos:start="45:41" pos:end="45:59">(<argument pos:start="45:42" pos:end="45:46"><expr pos:start="45:42" pos:end="45:46"><operator pos:start="45:42" pos:end="45:42">&amp;</operator><name pos:start="45:43" pos:end="45:46">cond</name></expr></argument>, <argument pos:start="45:49" pos:end="45:53"><expr pos:start="45:49" pos:end="45:53"><operator pos:start="45:49" pos:end="45:49">&amp;</operator><name pos:start="45:50" pos:end="45:53">lock</name></expr></argument>, <argument pos:start="45:56" pos:end="45:58"><expr pos:start="45:56" pos:end="45:58"><operator pos:start="45:56" pos:end="45:56">&amp;</operator><name pos:start="45:57" pos:end="45:58">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="51:9" pos:end="53:18"><if pos:start="51:9" pos:end="53:18">if <condition pos:start="51:12" pos:end="51:29">(<expr pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:18">==</operator> <name pos:start="51:20" pos:end="51:28">ETIMEDOUT</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:18"><block_content pos:start="53:13" pos:end="53:18">

            <break pos:start="53:13" pos:end="53:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:13">aiocb</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:42"><name pos:start="57:17" pos:end="57:27">TAILQ_FIRST</name><argument_list pos:start="57:28" pos:end="57:42">(<argument pos:start="57:29" pos:end="57:41"><expr pos:start="57:29" pos:end="57:41"><operator pos:start="57:29" pos:end="57:29">&amp;</operator><name pos:start="57:30" pos:end="57:41">request_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:49"><expr pos:start="59:9" pos:end="59:48"><call pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:20">TAILQ_REMOVE</name><argument_list pos:start="59:21" pos:end="59:48">(<argument pos:start="59:22" pos:end="59:34"><expr pos:start="59:22" pos:end="59:34"><operator pos:start="59:22" pos:end="59:22">&amp;</operator><name pos:start="59:23" pos:end="59:34">request_list</name></expr></argument>, <argument pos:start="59:37" pos:end="59:41"><expr pos:start="59:37" pos:end="59:41"><name pos:start="59:37" pos:end="59:41">aiocb</name></expr></argument>, <argument pos:start="59:44" pos:end="59:47"><expr pos:start="59:44" pos:end="59:47"><name pos:start="59:44" pos:end="59:47">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:19"><expr pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:14">offset</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:13">aiocb</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:21">active</name></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:20">idle_threads</name><operator pos:start="69:21" pos:end="69:22">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:36"><expr pos:start="71:9" pos:end="71:35"><call pos:start="71:9" pos:end="71:35"><name pos:start="71:9" pos:end="71:28">pthread_mutex_unlock</name><argument_list pos:start="71:29" pos:end="71:35">(<argument pos:start="71:30" pos:end="71:34"><expr pos:start="71:30" pos:end="71:34"><operator pos:start="71:30" pos:end="71:30">&amp;</operator><name pos:start="71:31" pos:end="71:34">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="75:9" pos:end="133:9">while <condition pos:start="75:15" pos:end="75:42">(<expr pos:start="75:16" pos:end="75:41"><name pos:start="75:16" pos:end="75:21">offset</name> <operator pos:start="75:23" pos:end="75:23">&lt;</operator> <name pos:start="75:25" pos:end="75:41"><name pos:start="75:25" pos:end="75:29">aiocb</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:41">aio_nbytes</name></name></expr>)</condition> <block pos:start="75:44" pos:end="133:9">{<block_content pos:start="77:13" pos:end="131:40">

            <decl_stmt pos:start="77:13" pos:end="77:24"><decl pos:start="77:13" pos:end="77:23"><type pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:19">ssize_t</name></type> <name pos:start="77:21" pos:end="77:23">len</name></decl>;</decl_stmt>



            <if_stmt pos:start="81:13" pos:end="99:56"><if pos:start="81:13" pos:end="89:57">if <condition pos:start="81:16" pos:end="81:32">(<expr pos:start="81:17" pos:end="81:31"><name pos:start="81:17" pos:end="81:31"><name pos:start="81:17" pos:end="81:21">aiocb</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:31">is_write</name></name></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="89:57"><block_content pos:start="83:17" pos:end="89:57">

                <expr_stmt pos:start="83:17" pos:end="89:57"><expr pos:start="83:17" pos:end="89:56"><name pos:start="83:17" pos:end="83:19">len</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <call pos:start="83:23" pos:end="89:56"><name pos:start="83:23" pos:end="83:28">pwrite</name><argument_list pos:start="83:29" pos:end="89:56">(<argument pos:start="83:30" pos:end="83:46"><expr pos:start="83:30" pos:end="83:46"><name pos:start="83:30" pos:end="83:46"><name pos:start="83:30" pos:end="83:34">aiocb</name><operator pos:start="83:35" pos:end="83:36">-&gt;</operator><name pos:start="83:37" pos:end="83:46">aio_fildes</name></name></expr></argument>,

                             <argument pos:start="85:30" pos:end="85:66"><expr pos:start="85:30" pos:end="85:66"><operator pos:start="85:30" pos:end="85:30">(</operator><specifier pos:start="85:31" pos:end="85:35">const</specifier> <name pos:start="85:37" pos:end="85:40">char</name> <operator pos:start="85:42" pos:end="85:42">*</operator><operator pos:start="85:43" pos:end="85:43">)</operator><name pos:start="85:44" pos:end="85:57"><name pos:start="85:44" pos:end="85:48">aiocb</name><operator pos:start="85:49" pos:end="85:50">-&gt;</operator><name pos:start="85:51" pos:end="85:57">aio_buf</name></name> <operator pos:start="85:59" pos:end="85:59">+</operator> <name pos:start="85:61" pos:end="85:66">offset</name></expr></argument>,

                             <argument pos:start="87:30" pos:end="87:55"><expr pos:start="87:30" pos:end="87:55"><name pos:start="87:30" pos:end="87:46"><name pos:start="87:30" pos:end="87:34">aiocb</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:46">aio_nbytes</name></name> <operator pos:start="87:48" pos:end="87:48">-</operator> <name pos:start="87:50" pos:end="87:55">offset</name></expr></argument>,

                             <argument pos:start="89:30" pos:end="89:55"><expr pos:start="89:30" pos:end="89:55"><name pos:start="89:30" pos:end="89:46"><name pos:start="89:30" pos:end="89:34">aiocb</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:46">aio_offset</name></name> <operator pos:start="89:48" pos:end="89:48">+</operator> <name pos:start="89:50" pos:end="89:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="91:13" pos:end="99:56">else<block type="pseudo" pos:start="93:17" pos:end="99:56"><block_content pos:start="93:17" pos:end="99:56">

                <expr_stmt pos:start="93:17" pos:end="99:56"><expr pos:start="93:17" pos:end="99:55"><name pos:start="93:17" pos:end="93:19">len</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="99:55"><name pos:start="93:23" pos:end="93:27">pread</name><argument_list pos:start="93:28" pos:end="99:55">(<argument pos:start="93:29" pos:end="93:45"><expr pos:start="93:29" pos:end="93:45"><name pos:start="93:29" pos:end="93:45"><name pos:start="93:29" pos:end="93:33">aiocb</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:45">aio_fildes</name></name></expr></argument>,

                            <argument pos:start="95:29" pos:end="95:59"><expr pos:start="95:29" pos:end="95:59"><operator pos:start="95:29" pos:end="95:29">(</operator><name pos:start="95:30" pos:end="95:33">char</name> <operator pos:start="95:35" pos:end="95:35">*</operator><operator pos:start="95:36" pos:end="95:36">)</operator><name pos:start="95:37" pos:end="95:50"><name pos:start="95:37" pos:end="95:41">aiocb</name><operator pos:start="95:42" pos:end="95:43">-&gt;</operator><name pos:start="95:44" pos:end="95:50">aio_buf</name></name> <operator pos:start="95:52" pos:end="95:52">+</operator> <name pos:start="95:54" pos:end="95:59">offset</name></expr></argument>,

                            <argument pos:start="97:29" pos:end="97:54"><expr pos:start="97:29" pos:end="97:54"><name pos:start="97:29" pos:end="97:45"><name pos:start="97:29" pos:end="97:33">aiocb</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:45">aio_nbytes</name></name> <operator pos:start="97:47" pos:end="97:47">-</operator> <name pos:start="97:49" pos:end="97:54">offset</name></expr></argument>,

                            <argument pos:start="99:29" pos:end="99:54"><expr pos:start="99:29" pos:end="99:54"><name pos:start="99:29" pos:end="99:45"><name pos:start="99:29" pos:end="99:33">aiocb</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:45">aio_offset</name></name> <operator pos:start="99:47" pos:end="99:47">+</operator> <name pos:start="99:49" pos:end="99:54">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="103:13" pos:end="119:22"><if pos:start="103:13" pos:end="105:25">if <condition pos:start="103:16" pos:end="103:44">(<expr pos:start="103:17" pos:end="103:43"><name pos:start="103:17" pos:end="103:19">len</name> <operator pos:start="103:21" pos:end="103:22">==</operator> <operator pos:start="103:24" pos:end="103:24">-</operator><literal type="number" pos:start="103:25" pos:end="103:25">1</literal> <operator pos:start="103:27" pos:end="103:28">&amp;&amp;</operator> <name pos:start="103:30" pos:end="103:34">errno</name> <operator pos:start="103:36" pos:end="103:37">==</operator> <name pos:start="103:39" pos:end="103:43">EINTR</name></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:25"><block_content pos:start="105:17" pos:end="105:25">

                <continue pos:start="105:17" pos:end="105:25">continue;</continue></block_content></block></if>

            <if type="elseif" pos:start="107:13" pos:end="117:13">else if <condition pos:start="107:21" pos:end="107:31">(<expr pos:start="107:22" pos:end="107:30"><name pos:start="107:22" pos:end="107:24">len</name> <operator pos:start="107:26" pos:end="107:27">==</operator> <operator pos:start="107:29" pos:end="107:29">-</operator><literal type="number" pos:start="107:30" pos:end="107:30">1</literal></expr>)</condition> <block pos:start="107:33" pos:end="117:13">{<block_content pos:start="109:17" pos:end="115:22">

                <expr_stmt pos:start="109:17" pos:end="109:42"><expr pos:start="109:17" pos:end="109:41"><call pos:start="109:17" pos:end="109:41"><name pos:start="109:17" pos:end="109:34">pthread_mutex_lock</name><argument_list pos:start="109:35" pos:end="109:41">(<argument pos:start="109:36" pos:end="109:40"><expr pos:start="109:36" pos:end="109:40"><operator pos:start="109:36" pos:end="109:36">&amp;</operator><name pos:start="109:37" pos:end="109:40">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:36"><expr pos:start="111:17" pos:end="111:35"><name pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:21">aiocb</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:26">ret</name></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <operator pos:start="111:30" pos:end="111:30">-</operator><name pos:start="111:31" pos:end="111:35">errno</name></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:44"><expr pos:start="113:17" pos:end="113:43"><call pos:start="113:17" pos:end="113:43"><name pos:start="113:17" pos:end="113:36">pthread_mutex_unlock</name><argument_list pos:start="113:37" pos:end="113:43">(<argument pos:start="113:38" pos:end="113:42"><expr pos:start="113:38" pos:end="113:42"><operator pos:start="113:38" pos:end="113:38">&amp;</operator><name pos:start="113:39" pos:end="113:42">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="115:17" pos:end="115:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="117:15" pos:end="119:22">else if <condition pos:start="117:23" pos:end="117:32">(<expr pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:26">len</name> <operator pos:start="117:28" pos:end="117:29">==</operator> <literal type="number" pos:start="117:31" pos:end="117:31">0</literal></expr>)</condition><block type="pseudo" pos:start="119:17" pos:end="119:22"><block_content pos:start="119:17" pos:end="119:22">

                <break pos:start="119:17" pos:end="119:22">break;</break></block_content></block></if></if_stmt>



            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:18">offset</name> <operator pos:start="123:20" pos:end="123:21">+=</operator> <name pos:start="123:23" pos:end="123:25">len</name></expr>;</expr_stmt>



            <expr_stmt pos:start="127:13" pos:end="127:38"><expr pos:start="127:13" pos:end="127:37"><call pos:start="127:13" pos:end="127:37"><name pos:start="127:13" pos:end="127:30">pthread_mutex_lock</name><argument_list pos:start="127:31" pos:end="127:37">(<argument pos:start="127:32" pos:end="127:36"><expr pos:start="127:32" pos:end="127:36"><operator pos:start="127:32" pos:end="127:32">&amp;</operator><name pos:start="127:33" pos:end="127:36">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:32"><expr pos:start="129:13" pos:end="129:31"><name pos:start="129:13" pos:end="129:22"><name pos:start="129:13" pos:end="129:17">aiocb</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:22">ret</name></name> <operator pos:start="129:24" pos:end="129:24">=</operator> <name pos:start="129:26" pos:end="129:31">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:40"><expr pos:start="131:13" pos:end="131:39"><call pos:start="131:13" pos:end="131:39"><name pos:start="131:13" pos:end="131:32">pthread_mutex_unlock</name><argument_list pos:start="131:33" pos:end="131:39">(<argument pos:start="131:34" pos:end="131:38"><expr pos:start="131:34" pos:end="131:38"><operator pos:start="131:34" pos:end="131:34">&amp;</operator><name pos:start="131:35" pos:end="131:38">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>



        <expr_stmt pos:start="137:9" pos:end="137:34"><expr pos:start="137:9" pos:end="137:33"><call pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:26">pthread_mutex_lock</name><argument_list pos:start="137:27" pos:end="137:33">(<argument pos:start="137:28" pos:end="137:32"><expr pos:start="137:28" pos:end="137:32"><operator pos:start="137:28" pos:end="137:28">&amp;</operator><name pos:start="137:29" pos:end="137:32">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:23"><expr pos:start="139:9" pos:end="139:22"><name pos:start="139:9" pos:end="139:20">idle_threads</name><operator pos:start="139:21" pos:end="139:22">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:36"><expr pos:start="141:9" pos:end="141:35"><call pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:28">pthread_mutex_unlock</name><argument_list pos:start="141:29" pos:end="141:35">(<argument pos:start="141:30" pos:end="141:34"><expr pos:start="141:30" pos:end="141:34"><operator pos:start="141:30" pos:end="141:30">&amp;</operator><name pos:start="141:31" pos:end="141:34">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="149:50"><expr pos:start="145:9" pos:end="149:49"><call pos:start="145:9" pos:end="149:49"><name pos:start="145:9" pos:end="145:16">sigqueue</name><argument_list pos:start="145:17" pos:end="149:49">(<argument pos:start="145:18" pos:end="145:25"><expr pos:start="145:18" pos:end="145:25"><call pos:start="145:18" pos:end="145:25"><name pos:start="145:18" pos:end="145:23">getpid</name><argument_list pos:start="145:24" pos:end="145:25">()</argument_list></call></expr></argument>,

                 <argument pos:start="147:18" pos:end="147:48"><expr pos:start="147:18" pos:end="147:48"><name pos:start="147:18" pos:end="147:48"><name pos:start="147:18" pos:end="147:22">aiocb</name><operator pos:start="147:23" pos:end="147:24">-&gt;</operator><name pos:start="147:25" pos:end="147:36">aio_sigevent</name><operator pos:start="147:37" pos:end="147:37">.</operator><name pos:start="147:38" pos:end="147:48">sigev_signo</name></name></expr></argument>,

                 <argument pos:start="149:18" pos:end="149:48"><expr pos:start="149:18" pos:end="149:48"><name pos:start="149:18" pos:end="149:48"><name pos:start="149:18" pos:end="149:22">aiocb</name><operator pos:start="149:23" pos:end="149:24">-&gt;</operator><name pos:start="149:25" pos:end="149:36">aio_sigevent</name><operator pos:start="149:37" pos:end="149:37">.</operator><name pos:start="149:38" pos:end="149:48">sigev_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="155:5" pos:end="155:19"><expr pos:start="155:5" pos:end="155:18"><name pos:start="155:5" pos:end="155:16">idle_threads</name><operator pos:start="155:17" pos:end="155:18">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:18"><expr pos:start="157:5" pos:end="157:17"><name pos:start="157:5" pos:end="157:15">cur_threads</name><operator pos:start="157:16" pos:end="157:17">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:32"><expr pos:start="159:5" pos:end="159:31"><call pos:start="159:5" pos:end="159:31"><name pos:start="159:5" pos:end="159:24">pthread_mutex_unlock</name><argument_list pos:start="159:25" pos:end="159:31">(<argument pos:start="159:26" pos:end="159:30"><expr pos:start="159:26" pos:end="159:30"><operator pos:start="159:26" pos:end="159:26">&amp;</operator><name pos:start="159:27" pos:end="159:30">lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="163:5" pos:end="163:16">return <expr pos:start="163:12" pos:end="163:15"><name pos:start="163:12" pos:end="163:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
