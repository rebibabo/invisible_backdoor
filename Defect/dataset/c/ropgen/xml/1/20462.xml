<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20462.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">set_string_number</name><parameter_list pos:start="1:29" pos:end="1:104">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">obj</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:44">void</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:56">target_obj</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:75"><decl pos:start="1:59" pos:end="1:75"><type pos:start="1:59" pos:end="1:75"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:72">AVOption</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:75">o</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:92"><decl pos:start="1:78" pos:end="1:92"><type pos:start="1:78" pos:end="1:92"><specifier pos:start="1:78" pos:end="1:82">const</specifier> <name pos:start="1:84" pos:end="1:87">char</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type><name pos:start="1:90" pos:end="1:92">val</name></decl></parameter>, <parameter pos:start="1:95" pos:end="1:103"><decl pos:start="1:95" pos:end="1:103"><type pos:start="1:95" pos:end="1:103"><name pos:start="1:95" pos:end="1:98">void</name> <modifier pos:start="1:100" pos:end="1:100">*</modifier></type><name pos:start="1:101" pos:end="1:103">dst</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="171:1">{<block_content pos:start="5:5" pos:end="169:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">num</name></decl>, <decl pos:start="7:14" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:16">den</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:10">c</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:58">(<expr pos:start="13:9" pos:end="13:57"><call pos:start="13:9" pos:end="13:52"><name pos:start="13:9" pos:end="13:14">sscanf</name><argument_list pos:start="13:15" pos:end="13:52">(<argument pos:start="13:16" pos:end="13:18"><expr pos:start="13:16" pos:end="13:18"><name pos:start="13:16" pos:end="13:18">val</name></expr></argument>, <argument pos:start="13:21" pos:end="13:35"><expr pos:start="13:21" pos:end="13:35"><literal type="string" pos:start="13:21" pos:end="13:35">"%d%*1[:/]%d%c"</literal></expr></argument>, <argument pos:start="13:38" pos:end="13:41"><expr pos:start="13:38" pos:end="13:41"><operator pos:start="13:38" pos:end="13:38">&amp;</operator><name pos:start="13:39" pos:end="13:41">num</name></expr></argument>, <argument pos:start="13:44" pos:end="13:47"><expr pos:start="13:44" pos:end="13:47"><operator pos:start="13:44" pos:end="13:44">&amp;</operator><name pos:start="13:45" pos:end="13:47">den</name></expr></argument>, <argument pos:start="13:50" pos:end="13:51"><expr pos:start="13:50" pos:end="13:51"><operator pos:start="13:50" pos:end="13:50">&amp;</operator><name pos:start="13:51" pos:end="13:51">c</name></expr></argument>)</argument_list></call> <operator pos:start="13:54" pos:end="13:55">==</operator> <literal type="number" pos:start="13:57" pos:end="13:57">2</literal></expr>)</condition> <block pos:start="13:60" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:16">

        <if_stmt pos:start="15:9" pos:end="17:23"><if pos:start="15:9" pos:end="17:23">if <condition pos:start="15:12" pos:end="15:64">(<expr pos:start="15:13" pos:end="15:63"><operator pos:start="15:13" pos:end="15:13">(</operator><name pos:start="15:14" pos:end="15:16">ret</name> <operator pos:start="15:18" pos:end="15:18">=</operator> <call pos:start="15:20" pos:end="15:57"><name pos:start="15:20" pos:end="15:31">write_number</name><argument_list pos:start="15:32" pos:end="15:57">(<argument pos:start="15:33" pos:end="15:35"><expr pos:start="15:33" pos:end="15:35"><name pos:start="15:33" pos:end="15:35">obj</name></expr></argument>, <argument pos:start="15:38" pos:end="15:38"><expr pos:start="15:38" pos:end="15:38"><name pos:start="15:38" pos:end="15:38">o</name></expr></argument>, <argument pos:start="15:41" pos:end="15:43"><expr pos:start="15:41" pos:end="15:43"><name pos:start="15:41" pos:end="15:43">dst</name></expr></argument>, <argument pos:start="15:46" pos:end="15:46"><expr pos:start="15:46" pos:end="15:46"><literal type="number" pos:start="15:46" pos:end="15:46">1</literal></expr></argument>, <argument pos:start="15:49" pos:end="15:51"><expr pos:start="15:49" pos:end="15:51"><name pos:start="15:49" pos:end="15:51">den</name></expr></argument>, <argument pos:start="15:54" pos:end="15:56"><expr pos:start="15:54" pos:end="15:56"><name pos:start="15:54" pos:end="15:56">num</name></expr></argument>)</argument_list></call><operator pos:start="15:58" pos:end="15:58">)</operator> <operator pos:start="15:60" pos:end="15:61">&gt;=</operator> <literal type="number" pos:start="15:63" pos:end="15:63">0</literal></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:23"><block_content pos:start="17:13" pos:end="17:23">

            <return pos:start="17:13" pos:end="17:23">return <expr pos:start="17:20" pos:end="17:22"><name pos:start="17:20" pos:end="17:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:16"><expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="25:5" pos:end="165:5">for <control pos:start="25:9" pos:end="25:12">(<init pos:start="25:10" pos:end="25:10">;</init><condition pos:start="25:11" pos:end="25:11">;</condition><incr/>)</control> <block pos:start="25:14" pos:end="165:5">{<block_content pos:start="27:9" pos:end="163:21">

        <decl_stmt pos:start="27:9" pos:end="27:18"><decl pos:start="27:9" pos:end="27:17"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:13">i</name> <init pos:start="27:15" pos:end="27:17">= <expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:22"><decl pos:start="29:9" pos:end="29:21"><type pos:start="29:9" pos:end="29:12"><name pos:start="29:9" pos:end="29:12">char</name></type> <name pos:start="29:14" pos:end="29:21"><name pos:start="29:14" pos:end="29:16">buf</name><index pos:start="29:17" pos:end="29:21">[<expr pos:start="29:18" pos:end="29:20"><literal type="number" pos:start="29:18" pos:end="29:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:20"><decl pos:start="31:9" pos:end="31:19"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:15">cmd</name> <init pos:start="31:17" pos:end="31:19">= <expr pos:start="31:19" pos:end="31:19"><literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:17"><decl pos:start="33:9" pos:end="33:16"><type pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:14">double</name></type> <name pos:start="33:16" pos:end="33:16">d</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:27"><decl pos:start="35:9" pos:end="35:26"><type pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">int64_t</name></type> <name pos:start="35:17" pos:end="35:22">intnum</name> <init pos:start="35:24" pos:end="35:26">= <expr pos:start="35:26" pos:end="35:26"><literal type="number" pos:start="35:26" pos:end="35:26">1</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="39:9" pos:end="51:9"><if pos:start="39:9" pos:end="51:9">if <condition pos:start="39:12" pos:end="39:41">(<expr pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:13">o</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:19">type</name></name> <operator pos:start="39:21" pos:end="39:22">==</operator> <name pos:start="39:24" pos:end="39:40">AV_OPT_TYPE_FLAGS</name></expr>)</condition> <block pos:start="39:43" pos:end="51:9">{<block_content pos:start="41:13" pos:end="49:23">

            <if_stmt pos:start="41:13" pos:end="43:31"><if pos:start="41:13" pos:end="43:31">if <condition pos:start="41:16" pos:end="41:43">(<expr pos:start="41:17" pos:end="41:42"><operator pos:start="41:17" pos:end="41:17">*</operator><name pos:start="41:18" pos:end="41:20">val</name> <operator pos:start="41:22" pos:end="41:23">==</operator> <literal type="char" pos:start="41:25" pos:end="41:27">'+'</literal> <operator pos:start="41:29" pos:end="41:30">||</operator> <operator pos:start="41:32" pos:end="41:32">*</operator><name pos:start="41:33" pos:end="41:35">val</name> <operator pos:start="41:37" pos:end="41:38">==</operator> <literal type="char" pos:start="41:40" pos:end="41:42">'-'</literal></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:31"><block_content pos:start="43:17" pos:end="43:31">

                <expr_stmt pos:start="43:17" pos:end="43:31"><expr pos:start="43:17" pos:end="43:30"><name pos:start="43:17" pos:end="43:19">cmd</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <operator pos:start="43:23" pos:end="43:23">*</operator><operator pos:start="43:24" pos:end="43:24">(</operator><name pos:start="43:25" pos:end="43:27">val</name><operator pos:start="43:28" pos:end="43:29">++</operator><operator pos:start="43:30" pos:end="43:30">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <for pos:start="45:13" pos:end="47:32">for <control pos:start="45:17" pos:end="45:88">(<init pos:start="45:18" pos:end="45:18">;</init> <condition pos:start="45:20" pos:end="45:83"><expr pos:start="45:20" pos:end="45:82"><name pos:start="45:20" pos:end="45:20">i</name> <operator pos:start="45:22" pos:end="45:22">&lt;</operator> <sizeof pos:start="45:24" pos:end="45:34">sizeof<argument_list pos:start="45:30" pos:end="45:34">(<argument pos:start="45:31" pos:end="45:33"><expr pos:start="45:31" pos:end="45:33"><name pos:start="45:31" pos:end="45:33">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:36" pos:end="45:36">-</operator> <literal type="number" pos:start="45:38" pos:end="45:38">1</literal> <operator pos:start="45:40" pos:end="45:41">&amp;&amp;</operator> <name pos:start="45:43" pos:end="45:48"><name pos:start="45:43" pos:end="45:45">val</name><index pos:start="45:46" pos:end="45:48">[<expr pos:start="45:47" pos:end="45:47"><name pos:start="45:47" pos:end="45:47">i</name></expr>]</index></name> <operator pos:start="45:50" pos:end="45:51">&amp;&amp;</operator> <name pos:start="45:53" pos:end="45:58"><name pos:start="45:53" pos:end="45:55">val</name><index pos:start="45:56" pos:end="45:58">[<expr pos:start="45:57" pos:end="45:57"><name pos:start="45:57" pos:end="45:57">i</name></expr>]</index></name> <operator pos:start="45:60" pos:end="45:61">!=</operator> <literal type="char" pos:start="45:63" pos:end="45:65">'+'</literal> <operator pos:start="45:67" pos:end="45:68">&amp;&amp;</operator> <name pos:start="45:70" pos:end="45:75"><name pos:start="45:70" pos:end="45:72">val</name><index pos:start="45:73" pos:end="45:75">[<expr pos:start="45:74" pos:end="45:74"><name pos:start="45:74" pos:end="45:74">i</name></expr>]</index></name> <operator pos:start="45:77" pos:end="45:78">!=</operator> <literal type="char" pos:start="45:80" pos:end="45:82">'-'</literal></expr>;</condition> <incr pos:start="45:85" pos:end="45:87"><expr pos:start="45:85" pos:end="45:87"><name pos:start="45:85" pos:end="45:85">i</name><operator pos:start="45:86" pos:end="45:87">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:17" pos:end="47:32"><block_content pos:start="47:17" pos:end="47:32">

                <expr_stmt pos:start="47:17" pos:end="47:32"><expr pos:start="47:17" pos:end="47:31"><name pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:19">buf</name><index pos:start="47:20" pos:end="47:22">[<expr pos:start="47:21" pos:end="47:21"><name pos:start="47:21" pos:end="47:21">i</name></expr>]</index></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:31"><name pos:start="47:26" pos:end="47:28">val</name><index pos:start="47:29" pos:end="47:31">[<expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="49:13" pos:end="49:23"><expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:15">buf</name><index pos:start="49:16" pos:end="49:18">[<expr pos:start="49:17" pos:end="49:17"><name pos:start="49:17" pos:end="49:17">i</name></expr>]</index></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <literal type="number" pos:start="49:22" pos:end="49:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <block pos:start="55:9" pos:end="141:9">{<block_content pos:start="57:13" pos:end="139:13">

            <decl_stmt pos:start="57:13" pos:end="57:82"><decl pos:start="57:13" pos:end="57:81"><type pos:start="57:13" pos:end="57:28"><specifier pos:start="57:13" pos:end="57:17">const</specifier> <name pos:start="57:19" pos:end="57:26">AVOption</name> <modifier pos:start="57:28" pos:end="57:28">*</modifier></type><name pos:start="57:29" pos:end="57:35">o_named</name> <init pos:start="57:37" pos:end="57:81">= <expr pos:start="57:39" pos:end="57:81"><call pos:start="57:39" pos:end="57:81"><name pos:start="57:39" pos:end="57:49">av_opt_find</name><argument_list pos:start="57:50" pos:end="57:81">(<argument pos:start="57:51" pos:end="57:60"><expr pos:start="57:51" pos:end="57:60"><name pos:start="57:51" pos:end="57:60">target_obj</name></expr></argument>, <argument pos:start="57:63" pos:end="57:65"><expr pos:start="57:63" pos:end="57:65"><name pos:start="57:63" pos:end="57:65">buf</name></expr></argument>, <argument pos:start="57:68" pos:end="57:74"><expr pos:start="57:68" pos:end="57:74"><name pos:start="57:68" pos:end="57:74"><name pos:start="57:68" pos:end="57:68">o</name><operator pos:start="57:69" pos:end="57:70">-&gt;</operator><name pos:start="57:71" pos:end="57:74">unit</name></name></expr></argument>, <argument pos:start="57:77" pos:end="57:77"><expr pos:start="57:77" pos:end="57:77"><literal type="number" pos:start="57:77" pos:end="57:77">0</literal></expr></argument>, <argument pos:start="57:80" pos:end="57:80"><expr pos:start="57:80" pos:end="57:80"><literal type="number" pos:start="57:80" pos:end="57:80">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:20"><decl pos:start="59:13" pos:end="59:19"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:19">res</name></decl>;</decl_stmt>

            <decl_stmt pos:start="61:13" pos:end="61:23"><decl pos:start="61:13" pos:end="61:22"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:18">ci</name> <init pos:start="61:20" pos:end="61:22">= <expr pos:start="61:22" pos:end="61:22"><literal type="number" pos:start="61:22" pos:end="61:22">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="63:13" pos:end="63:36"><decl pos:start="63:13" pos:end="63:35"><type pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:18">double</name></type> <name pos:start="63:20" pos:end="63:35"><name pos:start="63:20" pos:end="63:31">const_values</name><index pos:start="63:32" pos:end="63:35">[<expr pos:start="63:33" pos:end="63:34"><literal type="number" pos:start="63:33" pos:end="63:34">64</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="65:13" pos:end="65:41"><decl pos:start="65:13" pos:end="65:40"><type pos:start="65:13" pos:end="65:24"><specifier pos:start="65:13" pos:end="65:17">const</specifier> <name pos:start="65:19" pos:end="65:22">char</name> <modifier pos:start="65:24" pos:end="65:24">*</modifier></type> <name pos:start="65:26" pos:end="65:40"><name pos:start="65:26" pos:end="65:36">const_names</name><index pos:start="65:37" pos:end="65:40">[<expr pos:start="65:38" pos:end="65:39"><literal type="number" pos:start="65:38" pos:end="65:39">64</literal></expr>]</index></name></decl>;</decl_stmt>

            <if_stmt pos:start="67:13" pos:end="139:13"><if pos:start="67:13" pos:end="69:44">if <condition pos:start="67:16" pos:end="67:62">(<expr pos:start="67:17" pos:end="67:61"><name pos:start="67:17" pos:end="67:23">o_named</name> <operator pos:start="67:25" pos:end="67:26">&amp;&amp;</operator> <name pos:start="67:28" pos:end="67:40"><name pos:start="67:28" pos:end="67:34">o_named</name><operator pos:start="67:35" pos:end="67:36">-&gt;</operator><name pos:start="67:37" pos:end="67:40">type</name></name> <operator pos:start="67:42" pos:end="67:43">==</operator> <name pos:start="67:45" pos:end="67:61">AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:44"><block_content pos:start="69:17" pos:end="69:44">

                <expr_stmt pos:start="69:17" pos:end="69:44"><expr pos:start="69:17" pos:end="69:43"><name pos:start="69:17" pos:end="69:17">d</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <call pos:start="69:21" pos:end="69:43"><name pos:start="69:21" pos:end="69:34">DEFAULT_NUMVAL</name><argument_list pos:start="69:35" pos:end="69:43">(<argument pos:start="69:36" pos:end="69:42"><expr pos:start="69:36" pos:end="69:42"><name pos:start="69:36" pos:end="69:42">o_named</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="71:13" pos:end="139:13">else <block pos:start="71:18" pos:end="139:13">{<block_content pos:start="73:17" pos:end="137:17">

                <if_stmt pos:start="73:17" pos:end="99:17"><if pos:start="73:17" pos:end="99:17">if <condition pos:start="73:20" pos:end="73:28">(<expr pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:21">o</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:27">unit</name></name></expr>)</condition> <block pos:start="73:30" pos:end="99:17">{<block_content pos:start="75:21" pos:end="97:21">

                    <for pos:start="75:21" pos:end="97:21">for <control pos:start="75:25" pos:end="75:86">(<init pos:start="75:26" pos:end="75:40"><expr pos:start="75:26" pos:end="75:39"><name pos:start="75:26" pos:end="75:32">o_named</name> <operator pos:start="75:34" pos:end="75:34">=</operator> <name pos:start="75:36" pos:end="75:39">NULL</name></expr>;</init> <condition pos:start="75:42" pos:end="75:84"><expr pos:start="75:42" pos:end="75:83"><name pos:start="75:42" pos:end="75:48">o_named</name> <operator pos:start="75:50" pos:end="75:50">=</operator> <call pos:start="75:52" pos:end="75:83"><name pos:start="75:52" pos:end="75:62">av_opt_next</name><argument_list pos:start="75:63" pos:end="75:83">(<argument pos:start="75:64" pos:end="75:73"><expr pos:start="75:64" pos:end="75:73"><name pos:start="75:64" pos:end="75:73">target_obj</name></expr></argument>, <argument pos:start="75:76" pos:end="75:82"><expr pos:start="75:76" pos:end="75:82"><name pos:start="75:76" pos:end="75:82">o_named</name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control> <block pos:start="75:88" pos:end="97:21">{<block_content pos:start="77:25" pos:end="95:25">

                        <if_stmt pos:start="77:25" pos:end="95:25"><if pos:start="77:25" pos:end="95:25">if <condition pos:start="77:28" pos:end="81:60">(<expr pos:start="77:29" pos:end="81:59"><name pos:start="77:29" pos:end="77:41"><name pos:start="77:29" pos:end="77:35">o_named</name><operator pos:start="77:36" pos:end="77:37">-&gt;</operator><name pos:start="77:38" pos:end="77:41">type</name></name> <operator pos:start="77:43" pos:end="77:44">==</operator> <name pos:start="77:46" pos:end="77:62">AV_OPT_TYPE_CONST</name> <operator pos:start="77:64" pos:end="77:65">&amp;&amp;</operator>

                            <name pos:start="79:29" pos:end="79:41"><name pos:start="79:29" pos:end="79:35">o_named</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:41">unit</name></name> <operator pos:start="79:43" pos:end="79:44">&amp;&amp;</operator>

                            <operator pos:start="81:29" pos:end="81:29">!</operator><call pos:start="81:30" pos:end="81:59"><name pos:start="81:30" pos:end="81:35">strcmp</name><argument_list pos:start="81:36" pos:end="81:59">(<argument pos:start="81:37" pos:end="81:49"><expr pos:start="81:37" pos:end="81:49"><name pos:start="81:37" pos:end="81:49"><name pos:start="81:37" pos:end="81:43">o_named</name><operator pos:start="81:44" pos:end="81:45">-&gt;</operator><name pos:start="81:46" pos:end="81:49">unit</name></name></expr></argument>, <argument pos:start="81:52" pos:end="81:58"><expr pos:start="81:52" pos:end="81:58"><name pos:start="81:52" pos:end="81:58"><name pos:start="81:52" pos:end="81:52">o</name><operator pos:start="81:53" pos:end="81:54">-&gt;</operator><name pos:start="81:55" pos:end="81:58">unit</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:62" pos:end="95:25">{<block_content pos:start="83:29" pos:end="93:73">

                            <if_stmt pos:start="83:29" pos:end="89:29"><if pos:start="83:29" pos:end="89:29">if <condition pos:start="83:32" pos:end="83:71">(<expr pos:start="83:33" pos:end="83:70"><name pos:start="83:33" pos:end="83:34">ci</name> <operator pos:start="83:36" pos:end="83:36">+</operator> <literal type="number" pos:start="83:38" pos:end="83:38">6</literal> <operator pos:start="83:40" pos:end="83:41">&gt;=</operator> <call pos:start="83:43" pos:end="83:70"><name pos:start="83:43" pos:end="83:56">FF_ARRAY_ELEMS</name><argument_list pos:start="83:57" pos:end="83:70">(<argument pos:start="83:58" pos:end="83:69"><expr pos:start="83:58" pos:end="83:69"><name pos:start="83:58" pos:end="83:69">const_values</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:73" pos:end="89:29">{<block_content pos:start="85:33" pos:end="87:60">

                                <expr_stmt pos:start="85:33" pos:end="85:108"><expr pos:start="85:33" pos:end="85:107"><call pos:start="85:33" pos:end="85:107"><name pos:start="85:33" pos:end="85:38">av_log</name><argument_list pos:start="85:39" pos:end="85:107">(<argument pos:start="85:40" pos:end="85:42"><expr pos:start="85:40" pos:end="85:42"><name pos:start="85:40" pos:end="85:42">obj</name></expr></argument>, <argument pos:start="85:45" pos:end="85:56"><expr pos:start="85:45" pos:end="85:56"><name pos:start="85:45" pos:end="85:56">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:59" pos:end="85:97"><expr pos:start="85:59" pos:end="85:97"><literal type="string" pos:start="85:59" pos:end="85:97">"const_values array too small for %s\n"</literal></expr></argument>, <argument pos:start="85:100" pos:end="85:106"><expr pos:start="85:100" pos:end="85:106"><name pos:start="85:100" pos:end="85:106"><name pos:start="85:100" pos:end="85:100">o</name><operator pos:start="85:101" pos:end="85:102">-&gt;</operator><name pos:start="85:103" pos:end="85:106">unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <return pos:start="87:33" pos:end="87:60">return <expr pos:start="87:40" pos:end="87:59"><name pos:start="87:40" pos:end="87:59">AVERROR_PATCHWELCOME</name></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="91:29" pos:end="91:63"><expr pos:start="91:29" pos:end="91:62"><name pos:start="91:29" pos:end="91:46"><name pos:start="91:29" pos:end="91:39">const_names</name> <index pos:start="91:41" pos:end="91:46">[<expr pos:start="91:42" pos:end="91:43"><name pos:start="91:42" pos:end="91:43">ci</name></expr>  ]</index></name> <operator pos:start="91:48" pos:end="91:48">=</operator> <name pos:start="91:50" pos:end="91:62"><name pos:start="91:50" pos:end="91:56">o_named</name><operator pos:start="91:57" pos:end="91:58">-&gt;</operator><name pos:start="91:59" pos:end="91:62">name</name></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="93:29" pos:end="93:73"><expr pos:start="93:29" pos:end="93:72"><name pos:start="93:29" pos:end="93:46"><name pos:start="93:29" pos:end="93:40">const_values</name><index pos:start="93:41" pos:end="93:46">[<expr pos:start="93:42" pos:end="93:45"><name pos:start="93:42" pos:end="93:43">ci</name><operator pos:start="93:44" pos:end="93:45">++</operator></expr>]</index></name> <operator pos:start="93:48" pos:end="93:48">=</operator> <call pos:start="93:50" pos:end="93:72"><name pos:start="93:50" pos:end="93:63">DEFAULT_NUMVAL</name><argument_list pos:start="93:64" pos:end="93:72">(<argument pos:start="93:65" pos:end="93:71"><expr pos:start="93:65" pos:end="93:71"><name pos:start="93:65" pos:end="93:71">o_named</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:47"><expr pos:start="101:17" pos:end="101:46"><name pos:start="101:17" pos:end="101:34"><name pos:start="101:17" pos:end="101:27">const_names</name> <index pos:start="101:29" pos:end="101:34">[<expr pos:start="101:30" pos:end="101:31"><name pos:start="101:30" pos:end="101:31">ci</name></expr>  ]</index></name> <operator pos:start="101:36" pos:end="101:36">=</operator> <literal type="string" pos:start="101:38" pos:end="101:46">"default"</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:55"><expr pos:start="103:17" pos:end="103:54"><name pos:start="103:17" pos:end="103:34"><name pos:start="103:17" pos:end="103:28">const_values</name><index pos:start="103:29" pos:end="103:34">[<expr pos:start="103:30" pos:end="103:33"><name pos:start="103:30" pos:end="103:31">ci</name><operator pos:start="103:32" pos:end="103:33">++</operator></expr>]</index></name> <operator pos:start="103:36" pos:end="103:36">=</operator> <call pos:start="103:38" pos:end="103:54"><name pos:start="103:38" pos:end="103:51">DEFAULT_NUMVAL</name><argument_list pos:start="103:52" pos:end="103:54">(<argument pos:start="103:53" pos:end="103:53"><expr pos:start="103:53" pos:end="103:53"><name pos:start="103:53" pos:end="103:53">o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:43"><expr pos:start="105:17" pos:end="105:42"><name pos:start="105:17" pos:end="105:34"><name pos:start="105:17" pos:end="105:27">const_names</name> <index pos:start="105:29" pos:end="105:34">[<expr pos:start="105:30" pos:end="105:31"><name pos:start="105:30" pos:end="105:31">ci</name></expr>  ]</index></name> <operator pos:start="105:36" pos:end="105:36">=</operator> <literal type="string" pos:start="105:38" pos:end="105:42">"max"</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:44"><expr pos:start="107:17" pos:end="107:43"><name pos:start="107:17" pos:end="107:34"><name pos:start="107:17" pos:end="107:28">const_values</name><index pos:start="107:29" pos:end="107:34">[<expr pos:start="107:30" pos:end="107:33"><name pos:start="107:30" pos:end="107:31">ci</name><operator pos:start="107:32" pos:end="107:33">++</operator></expr>]</index></name> <operator pos:start="107:36" pos:end="107:36">=</operator> <name pos:start="107:38" pos:end="107:43"><name pos:start="107:38" pos:end="107:38">o</name><operator pos:start="107:39" pos:end="107:40">-&gt;</operator><name pos:start="107:41" pos:end="107:43">max</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:43"><expr pos:start="109:17" pos:end="109:42"><name pos:start="109:17" pos:end="109:34"><name pos:start="109:17" pos:end="109:27">const_names</name> <index pos:start="109:29" pos:end="109:34">[<expr pos:start="109:30" pos:end="109:31"><name pos:start="109:30" pos:end="109:31">ci</name></expr>  ]</index></name> <operator pos:start="109:36" pos:end="109:36">=</operator> <literal type="string" pos:start="109:38" pos:end="109:42">"min"</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:44"><expr pos:start="111:17" pos:end="111:43"><name pos:start="111:17" pos:end="111:34"><name pos:start="111:17" pos:end="111:28">const_values</name><index pos:start="111:29" pos:end="111:34">[<expr pos:start="111:30" pos:end="111:33"><name pos:start="111:30" pos:end="111:31">ci</name><operator pos:start="111:32" pos:end="111:33">++</operator></expr>]</index></name> <operator pos:start="111:36" pos:end="111:36">=</operator> <name pos:start="111:38" pos:end="111:43"><name pos:start="111:38" pos:end="111:38">o</name><operator pos:start="111:39" pos:end="111:40">-&gt;</operator><name pos:start="111:41" pos:end="111:43">min</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:44"><expr pos:start="113:17" pos:end="113:43"><name pos:start="113:17" pos:end="113:34"><name pos:start="113:17" pos:end="113:27">const_names</name> <index pos:start="113:29" pos:end="113:34">[<expr pos:start="113:30" pos:end="113:31"><name pos:start="113:30" pos:end="113:31">ci</name></expr>  ]</index></name> <operator pos:start="113:36" pos:end="113:36">=</operator> <literal type="string" pos:start="113:38" pos:end="113:43">"none"</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:39"><expr pos:start="115:17" pos:end="115:38"><name pos:start="115:17" pos:end="115:34"><name pos:start="115:17" pos:end="115:28">const_values</name><index pos:start="115:29" pos:end="115:34">[<expr pos:start="115:30" pos:end="115:33"><name pos:start="115:30" pos:end="115:31">ci</name><operator pos:start="115:32" pos:end="115:33">++</operator></expr>]</index></name> <operator pos:start="115:36" pos:end="115:36">=</operator> <literal type="number" pos:start="115:38" pos:end="115:38">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:43"><expr pos:start="117:17" pos:end="117:42"><name pos:start="117:17" pos:end="117:34"><name pos:start="117:17" pos:end="117:27">const_names</name> <index pos:start="117:29" pos:end="117:34">[<expr pos:start="117:30" pos:end="117:31"><name pos:start="117:30" pos:end="117:31">ci</name></expr>  ]</index></name> <operator pos:start="117:36" pos:end="117:36">=</operator> <literal type="string" pos:start="117:38" pos:end="117:42">"all"</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:40"><expr pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:34"><name pos:start="119:17" pos:end="119:28">const_values</name><index pos:start="119:29" pos:end="119:34">[<expr pos:start="119:30" pos:end="119:33"><name pos:start="119:30" pos:end="119:31">ci</name><operator pos:start="119:32" pos:end="119:33">++</operator></expr>]</index></name> <operator pos:start="119:36" pos:end="119:36">=</operator> <operator pos:start="119:38" pos:end="119:38">~</operator><literal type="number" pos:start="119:39" pos:end="119:39">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:40"><expr pos:start="121:17" pos:end="121:39"><name pos:start="121:17" pos:end="121:32"><name pos:start="121:17" pos:end="121:27">const_names</name> <index pos:start="121:29" pos:end="121:32">[<expr pos:start="121:30" pos:end="121:31"><name pos:start="121:30" pos:end="121:31">ci</name></expr>]</index></name> <operator pos:start="121:34" pos:end="121:34">=</operator> <name pos:start="121:36" pos:end="121:39">NULL</name></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:37"><expr pos:start="123:17" pos:end="123:36"><name pos:start="123:17" pos:end="123:32"><name pos:start="123:17" pos:end="123:28">const_values</name><index pos:start="123:29" pos:end="123:32">[<expr pos:start="123:30" pos:end="123:31"><name pos:start="123:30" pos:end="123:31">ci</name></expr>]</index></name> <operator pos:start="123:34" pos:end="123:34">=</operator> <literal type="number" pos:start="123:36" pos:end="123:36">0</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="127:17" pos:end="129:96"><expr pos:start="127:17" pos:end="129:95"><name pos:start="127:17" pos:end="127:19">res</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="129:95"><name pos:start="127:23" pos:end="127:44">av_expr_parse_and_eval</name><argument_list pos:start="127:45" pos:end="129:95">(<argument pos:start="127:46" pos:end="127:47"><expr pos:start="127:46" pos:end="127:47"><operator pos:start="127:46" pos:end="127:46">&amp;</operator><name pos:start="127:47" pos:end="127:47">d</name></expr></argument>, <argument pos:start="127:50" pos:end="127:62"><expr pos:start="127:50" pos:end="127:62"><ternary pos:start="127:50" pos:end="127:62"><condition pos:start="127:50" pos:end="127:52"><expr pos:start="127:50" pos:end="127:50"><name pos:start="127:50" pos:end="127:50">i</name></expr> ?</condition><then pos:start="127:54" pos:end="127:56"> <expr pos:start="127:54" pos:end="127:56"><name pos:start="127:54" pos:end="127:56">buf</name></expr> </then><else pos:start="127:58" pos:end="127:62">: <expr pos:start="127:60" pos:end="127:62"><name pos:start="127:60" pos:end="127:62">val</name></expr></else></ternary></expr></argument>, <argument pos:start="127:65" pos:end="127:75"><expr pos:start="127:65" pos:end="127:75"><name pos:start="127:65" pos:end="127:75">const_names</name></expr></argument>,

                                            <argument pos:start="129:45" pos:end="129:56"><expr pos:start="129:45" pos:end="129:56"><name pos:start="129:45" pos:end="129:56">const_values</name></expr></argument>, <argument pos:start="129:59" pos:end="129:62"><expr pos:start="129:59" pos:end="129:62"><name pos:start="129:59" pos:end="129:62">NULL</name></expr></argument>, <argument pos:start="129:65" pos:end="129:68"><expr pos:start="129:65" pos:end="129:68"><name pos:start="129:65" pos:end="129:68">NULL</name></expr></argument>, <argument pos:start="129:71" pos:end="129:74"><expr pos:start="129:71" pos:end="129:74"><name pos:start="129:71" pos:end="129:74">NULL</name></expr></argument>, <argument pos:start="129:77" pos:end="129:80"><expr pos:start="129:77" pos:end="129:80"><name pos:start="129:77" pos:end="129:80">NULL</name></expr></argument>, <argument pos:start="129:83" pos:end="129:86"><expr pos:start="129:83" pos:end="129:86"><name pos:start="129:83" pos:end="129:86">NULL</name></expr></argument>, <argument pos:start="129:89" pos:end="129:89"><expr pos:start="129:89" pos:end="129:89"><literal type="number" pos:start="129:89" pos:end="129:89">0</literal></expr></argument>, <argument pos:start="129:92" pos:end="129:94"><expr pos:start="129:92" pos:end="129:94"><name pos:start="129:92" pos:end="129:94">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="131:17" pos:end="137:17"><if pos:start="131:17" pos:end="137:17">if <condition pos:start="131:20" pos:end="131:28">(<expr pos:start="131:21" pos:end="131:27"><name pos:start="131:21" pos:end="131:23">res</name> <operator pos:start="131:25" pos:end="131:25">&lt;</operator> <literal type="number" pos:start="131:27" pos:end="131:27">0</literal></expr>)</condition> <block pos:start="131:30" pos:end="137:17">{<block_content pos:start="133:21" pos:end="135:31">

                    <expr_stmt pos:start="133:21" pos:end="133:92"><expr pos:start="133:21" pos:end="133:91"><call pos:start="133:21" pos:end="133:91"><name pos:start="133:21" pos:end="133:26">av_log</name><argument_list pos:start="133:27" pos:end="133:91">(<argument pos:start="133:28" pos:end="133:30"><expr pos:start="133:28" pos:end="133:30"><name pos:start="133:28" pos:end="133:30">obj</name></expr></argument>, <argument pos:start="133:33" pos:end="133:44"><expr pos:start="133:33" pos:end="133:44"><name pos:start="133:33" pos:end="133:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:47" pos:end="133:85"><expr pos:start="133:47" pos:end="133:85"><literal type="string" pos:start="133:47" pos:end="133:85">"Unable to parse option value \"%s\"\n"</literal></expr></argument>, <argument pos:start="133:88" pos:end="133:90"><expr pos:start="133:88" pos:end="133:90"><name pos:start="133:88" pos:end="133:90">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="135:21" pos:end="135:31">return <expr pos:start="135:28" pos:end="135:30"><name pos:start="135:28" pos:end="135:30">res</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="143:9" pos:end="151:9"><if pos:start="143:9" pos:end="151:9">if <condition pos:start="143:12" pos:end="143:41">(<expr pos:start="143:13" pos:end="143:40"><name pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:13">o</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:19">type</name></name> <operator pos:start="143:21" pos:end="143:22">==</operator> <name pos:start="143:24" pos:end="143:40">AV_OPT_TYPE_FLAGS</name></expr>)</condition> <block pos:start="143:43" pos:end="151:9">{<block_content pos:start="145:13" pos:end="149:57">

            <expr_stmt pos:start="145:13" pos:end="145:53"><expr pos:start="145:13" pos:end="145:52"><call pos:start="145:13" pos:end="145:52"><name pos:start="145:13" pos:end="145:23">read_number</name><argument_list pos:start="145:24" pos:end="145:52">(<argument pos:start="145:25" pos:end="145:25"><expr pos:start="145:25" pos:end="145:25"><name pos:start="145:25" pos:end="145:25">o</name></expr></argument>, <argument pos:start="145:28" pos:end="145:30"><expr pos:start="145:28" pos:end="145:30"><name pos:start="145:28" pos:end="145:30">dst</name></expr></argument>, <argument pos:start="145:33" pos:end="145:36"><expr pos:start="145:33" pos:end="145:36"><name pos:start="145:33" pos:end="145:36">NULL</name></expr></argument>, <argument pos:start="145:39" pos:end="145:42"><expr pos:start="145:39" pos:end="145:42"><name pos:start="145:39" pos:end="145:42">NULL</name></expr></argument>, <argument pos:start="145:45" pos:end="145:51"><expr pos:start="145:45" pos:end="145:51"><operator pos:start="145:45" pos:end="145:45">&amp;</operator><name pos:start="145:46" pos:end="145:51">intnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="149:57"><if pos:start="147:13" pos:end="147:57">if      <condition pos:start="147:21" pos:end="147:32">(<expr pos:start="147:22" pos:end="147:31"><name pos:start="147:22" pos:end="147:24">cmd</name> <operator pos:start="147:26" pos:end="147:27">==</operator> <literal type="char" pos:start="147:29" pos:end="147:31">'+'</literal></expr>)</condition><block type="pseudo" pos:start="147:34" pos:end="147:57"><block_content pos:start="147:34" pos:end="147:57"> <expr_stmt pos:start="147:34" pos:end="147:57"><expr pos:start="147:34" pos:end="147:56"><name pos:start="147:34" pos:end="147:34">d</name> <operator pos:start="147:36" pos:end="147:36">=</operator> <name pos:start="147:38" pos:end="147:43">intnum</name> <operator pos:start="147:45" pos:end="147:45">|</operator> <operator pos:start="147:47" pos:end="147:47">(</operator><name pos:start="147:48" pos:end="147:54">int64_t</name><operator pos:start="147:55" pos:end="147:55">)</operator><name pos:start="147:56" pos:end="147:56">d</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="149:13" pos:end="149:57">else if <condition pos:start="149:21" pos:end="149:32">(<expr pos:start="149:22" pos:end="149:31"><name pos:start="149:22" pos:end="149:24">cmd</name> <operator pos:start="149:26" pos:end="149:27">==</operator> <literal type="char" pos:start="149:29" pos:end="149:31">'-'</literal></expr>)</condition><block type="pseudo" pos:start="149:34" pos:end="149:57"><block_content pos:start="149:34" pos:end="149:57"> <expr_stmt pos:start="149:34" pos:end="149:57"><expr pos:start="149:34" pos:end="149:56"><name pos:start="149:34" pos:end="149:34">d</name> <operator pos:start="149:36" pos:end="149:36">=</operator> <name pos:start="149:38" pos:end="149:43">intnum</name> <operator pos:start="149:45" pos:end="149:45">&amp;</operator><operator pos:start="149:46" pos:end="149:46">~</operator><operator pos:start="149:47" pos:end="149:47">(</operator><name pos:start="149:48" pos:end="149:54">int64_t</name><operator pos:start="149:55" pos:end="149:55">)</operator><name pos:start="149:56" pos:end="149:56">d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="155:9" pos:end="157:23"><if pos:start="155:9" pos:end="157:23">if <condition pos:start="155:12" pos:end="155:59">(<expr pos:start="155:13" pos:end="155:58"><operator pos:start="155:13" pos:end="155:13">(</operator><name pos:start="155:14" pos:end="155:16">ret</name> <operator pos:start="155:18" pos:end="155:18">=</operator> <call pos:start="155:20" pos:end="155:53"><name pos:start="155:20" pos:end="155:31">write_number</name><argument_list pos:start="155:32" pos:end="155:53">(<argument pos:start="155:33" pos:end="155:35"><expr pos:start="155:33" pos:end="155:35"><name pos:start="155:33" pos:end="155:35">obj</name></expr></argument>, <argument pos:start="155:38" pos:end="155:38"><expr pos:start="155:38" pos:end="155:38"><name pos:start="155:38" pos:end="155:38">o</name></expr></argument>, <argument pos:start="155:41" pos:end="155:43"><expr pos:start="155:41" pos:end="155:43"><name pos:start="155:41" pos:end="155:43">dst</name></expr></argument>, <argument pos:start="155:46" pos:end="155:46"><expr pos:start="155:46" pos:end="155:46"><name pos:start="155:46" pos:end="155:46">d</name></expr></argument>, <argument pos:start="155:49" pos:end="155:49"><expr pos:start="155:49" pos:end="155:49"><literal type="number" pos:start="155:49" pos:end="155:49">1</literal></expr></argument>, <argument pos:start="155:52" pos:end="155:52"><expr pos:start="155:52" pos:end="155:52"><literal type="number" pos:start="155:52" pos:end="155:52">1</literal></expr></argument>)</argument_list></call><operator pos:start="155:54" pos:end="155:54">)</operator> <operator pos:start="155:56" pos:end="155:56">&lt;</operator> <literal type="number" pos:start="155:58" pos:end="155:58">0</literal></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:23"><block_content pos:start="157:13" pos:end="157:23">

            <return pos:start="157:13" pos:end="157:23">return <expr pos:start="157:20" pos:end="157:22"><name pos:start="157:20" pos:end="157:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:17"><expr pos:start="159:9" pos:end="159:16"><name pos:start="159:9" pos:end="159:11">val</name> <operator pos:start="159:13" pos:end="159:14">+=</operator> <name pos:start="159:16" pos:end="159:16">i</name></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="163:21"><if pos:start="161:9" pos:end="163:21">if <condition pos:start="161:12" pos:end="161:24">(<expr pos:start="161:13" pos:end="161:23"><operator pos:start="161:13" pos:end="161:13">!</operator><name pos:start="161:14" pos:end="161:14">i</name> <operator pos:start="161:16" pos:end="161:17">||</operator> <operator pos:start="161:19" pos:end="161:19">!</operator><operator pos:start="161:20" pos:end="161:20">*</operator><name pos:start="161:21" pos:end="161:23">val</name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:21"><block_content pos:start="163:13" pos:end="163:21">

            <return pos:start="163:13" pos:end="163:21">return <expr pos:start="163:20" pos:end="163:20"><literal type="number" pos:start="163:20" pos:end="163:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="169:5" pos:end="169:13">return <expr pos:start="169:12" pos:end="169:12"><literal type="number" pos:start="169:12" pos:end="169:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
