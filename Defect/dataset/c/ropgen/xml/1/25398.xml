<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25398.c" pos:tabs="8"><function pos:start="1:1" pos:end="911:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">asf_read_header</name><parameter_list pos:start="1:27" pos:end="1:70">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:69"><decl pos:start="1:48" pos:end="1:69"><type pos:start="1:48" pos:end="1:69"><name pos:start="1:48" pos:end="1:65">AVFormatParameters</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">ap</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="911:1">{<block_content pos:start="5:5" pos:end="909:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ASFContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">asf</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:15">ff_asf_guid</name></type> <name pos:start="7:17" pos:end="7:17">g</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">ByteIOContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">pb</name> <init pos:start="9:23" pos:end="9:29">= <expr pos:start="9:25" pos:end="9:29"><name pos:start="9:25" pos:end="9:29"><name pos:start="9:25" pos:end="9:25">s</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:29">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">ASFStream</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:21">asf_st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">size</name></decl>, <decl pos:start="15:15" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:15">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:17">gsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:14">AVRational</name></type> <name pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:18">dar</name><index pos:start="19:19" pos:end="19:23">[<expr pos:start="19:20" pos:end="19:22"><literal type="number" pos:start="19:20" pos:end="19:22">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:25"><name pos:start="21:14" pos:end="21:20">bitrate</name><index pos:start="21:21" pos:end="21:25">[<expr pos:start="21:22" pos:end="21:24"><literal type="number" pos:start="21:22" pos:end="21:24">128</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><call pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:10">memset</name><argument_list pos:start="25:11" pos:end="25:31">(<argument pos:start="25:12" pos:end="25:14"><expr pos:start="25:12" pos:end="25:14"><name pos:start="25:12" pos:end="25:14">dar</name></expr></argument>, <argument pos:start="25:17" pos:end="25:17"><expr pos:start="25:17" pos:end="25:17"><literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr></argument>, <argument pos:start="25:20" pos:end="25:30"><expr pos:start="25:20" pos:end="25:30"><sizeof pos:start="25:20" pos:end="25:30">sizeof<argument_list pos:start="25:26" pos:end="25:30">(<argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><name pos:start="25:27" pos:end="25:29">dar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><call pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:10">memset</name><argument_list pos:start="27:11" pos:end="27:39">(<argument pos:start="27:12" pos:end="27:18"><expr pos:start="27:12" pos:end="27:18"><name pos:start="27:12" pos:end="27:18">bitrate</name></expr></argument>, <argument pos:start="27:21" pos:end="27:21"><expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr></argument>, <argument pos:start="27:24" pos:end="27:38"><expr pos:start="27:24" pos:end="27:38"><sizeof pos:start="27:24" pos:end="27:38">sizeof<argument_list pos:start="27:30" pos:end="27:38">(<argument pos:start="27:31" pos:end="27:37"><expr pos:start="27:31" pos:end="27:37"><name pos:start="27:31" pos:end="27:37">bitrate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><call pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:12">get_guid</name><argument_list pos:start="31:13" pos:end="31:20">(<argument pos:start="31:14" pos:end="31:15"><expr pos:start="31:14" pos:end="31:15"><name pos:start="31:14" pos:end="31:15">pb</name></expr></argument>, <argument pos:start="31:18" pos:end="31:19"><expr pos:start="31:18" pos:end="31:19"><operator pos:start="31:18" pos:end="31:18">&amp;</operator><name pos:start="31:19" pos:end="31:19">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:18"><if pos:start="33:5" pos:end="35:18">if <condition pos:start="33:8" pos:end="33:36">(<expr pos:start="33:9" pos:end="33:35"><call pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:15">guidcmp</name><argument_list pos:start="33:16" pos:end="33:35">(<argument pos:start="33:17" pos:end="33:18"><expr pos:start="33:17" pos:end="33:18"><operator pos:start="33:17" pos:end="33:17">&amp;</operator><name pos:start="33:18" pos:end="33:18">g</name></expr></argument>, <argument pos:start="33:21" pos:end="33:34"><expr pos:start="33:21" pos:end="33:34"><operator pos:start="33:21" pos:end="33:21">&amp;</operator><name pos:start="33:22" pos:end="33:34">ff_asf_header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:18"><block_content pos:start="35:9" pos:end="35:18">

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:17"><expr pos:start="37:5" pos:end="37:16"><call pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:12">get_le64</name><argument_list pos:start="37:13" pos:end="37:16">(<argument pos:start="37:14" pos:end="37:15"><expr pos:start="37:14" pos:end="37:15"><name pos:start="37:14" pos:end="37:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><call pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:12">get_le32</name><argument_list pos:start="39:13" pos:end="39:16">(<argument pos:start="39:14" pos:end="39:15"><expr pos:start="39:14" pos:end="39:15"><name pos:start="39:14" pos:end="39:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:17"><expr pos:start="41:5" pos:end="41:16"><call pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:12">get_byte</name><argument_list pos:start="41:13" pos:end="41:16">(<argument pos:start="41:14" pos:end="41:15"><expr pos:start="41:14" pos:end="41:15"><name pos:start="41:14" pos:end="41:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><call pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:12">get_byte</name><argument_list pos:start="43:13" pos:end="43:16">(<argument pos:start="43:14" pos:end="43:15"><expr pos:start="43:14" pos:end="43:15"><name pos:start="43:14" pos:end="43:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:58"><expr pos:start="45:5" pos:end="45:57"><call pos:start="45:5" pos:end="45:57"><name pos:start="45:5" pos:end="45:10">memset</name><argument_list pos:start="45:11" pos:end="45:57">(<argument pos:start="45:12" pos:end="45:27"><expr pos:start="45:12" pos:end="45:27"><operator pos:start="45:12" pos:end="45:12">&amp;</operator><name pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:15">asf</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:27">asfid2avid</name></name></expr></argument>, <argument pos:start="45:30" pos:end="45:31"><expr pos:start="45:30" pos:end="45:31"><operator pos:start="45:30" pos:end="45:30">-</operator><literal type="number" pos:start="45:31" pos:end="45:31">1</literal></expr></argument>, <argument pos:start="45:34" pos:end="45:56"><expr pos:start="45:34" pos:end="45:56"><sizeof pos:start="45:34" pos:end="45:56">sizeof<argument_list pos:start="45:40" pos:end="45:56">(<argument pos:start="45:41" pos:end="45:55"><expr pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:55"><name pos:start="45:41" pos:end="45:43">asf</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:55">asfid2avid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="837:5">for<control pos:start="47:8" pos:end="47:11">(<init pos:start="47:9" pos:end="47:9">;</init><condition pos:start="47:10" pos:end="47:10">;</condition><incr/>)</control> <block pos:start="47:13" pos:end="837:5">{<block_content pos:start="49:9" pos:end="835:46">

        <decl_stmt pos:start="49:9" pos:end="49:37"><decl pos:start="49:9" pos:end="49:36"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">uint64_t</name></type> <name pos:start="49:18" pos:end="49:21">gpos</name><init pos:start="49:22" pos:end="49:36">= <expr pos:start="49:24" pos:end="49:36"><call pos:start="49:24" pos:end="49:36"><name pos:start="49:24" pos:end="49:32">url_ftell</name><argument_list pos:start="49:33" pos:end="49:36">(<argument pos:start="49:34" pos:end="49:35"><expr pos:start="49:34" pos:end="49:35"><name pos:start="49:34" pos:end="49:35">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:25"><expr pos:start="51:9" pos:end="51:24"><call pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:16">get_guid</name><argument_list pos:start="51:17" pos:end="51:24">(<argument pos:start="51:18" pos:end="51:19"><expr pos:start="51:18" pos:end="51:19"><name pos:start="51:18" pos:end="51:19">pb</name></expr></argument>, <argument pos:start="51:22" pos:end="51:23"><expr pos:start="51:22" pos:end="51:23"><operator pos:start="51:22" pos:end="51:22">&amp;</operator><name pos:start="51:23" pos:end="51:23">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:13">gsize</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:24">get_le64</name><argument_list pos:start="53:25" pos:end="53:28">(<argument pos:start="53:26" pos:end="53:27"><expr pos:start="53:26" pos:end="53:27"><name pos:start="53:26" pos:end="53:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:42"><expr pos:start="55:9" pos:end="55:41"><call pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:15">dprintf</name><argument_list pos:start="55:16" pos:end="55:41">(<argument pos:start="55:17" pos:end="55:17"><expr pos:start="55:17" pos:end="55:17"><name pos:start="55:17" pos:end="55:17">s</name></expr></argument>, <argument pos:start="55:20" pos:end="55:34"><expr pos:start="55:20" pos:end="55:34"><literal type="string" pos:start="55:20" pos:end="55:24">"%08"</literal><name pos:start="55:25" pos:end="55:30">PRIx64</name><literal type="string" pos:start="55:31" pos:end="55:34">": "</literal></expr></argument>, <argument pos:start="55:37" pos:end="55:40"><expr pos:start="55:37" pos:end="55:40"><name pos:start="55:37" pos:end="55:40">gpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><call pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:18">print_guid</name><argument_list pos:start="57:19" pos:end="57:22">(<argument pos:start="57:20" pos:end="57:21"><expr pos:start="57:20" pos:end="57:21"><operator pos:start="57:20" pos:end="57:20">&amp;</operator><name pos:start="57:21" pos:end="57:21">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:50"><expr pos:start="59:9" pos:end="59:49"><call pos:start="59:9" pos:end="59:49"><name pos:start="59:9" pos:end="59:15">dprintf</name><argument_list pos:start="59:16" pos:end="59:49">(<argument pos:start="59:17" pos:end="59:17"><expr pos:start="59:17" pos:end="59:17"><name pos:start="59:17" pos:end="59:17">s</name></expr></argument>, <argument pos:start="59:20" pos:end="59:41"><expr pos:start="59:20" pos:end="59:41"><literal type="string" pos:start="59:20" pos:end="59:31">"  size=0x%"</literal><name pos:start="59:32" pos:end="59:37">PRIx64</name><literal type="string" pos:start="59:38" pos:end="59:41">"\n"</literal></expr></argument>, <argument pos:start="59:44" pos:end="59:48"><expr pos:start="59:44" pos:end="59:48"><name pos:start="59:44" pos:end="59:48">gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="79:9"><if pos:start="61:9" pos:end="79:9">if <condition pos:start="61:12" pos:end="61:46">(<expr pos:start="61:13" pos:end="61:45"><operator pos:start="61:13" pos:end="61:13">!</operator><call pos:start="61:14" pos:end="61:45"><name pos:start="61:14" pos:end="61:20">guidcmp</name><argument_list pos:start="61:21" pos:end="61:45">(<argument pos:start="61:22" pos:end="61:23"><expr pos:start="61:22" pos:end="61:23"><operator pos:start="61:22" pos:end="61:22">&amp;</operator><name pos:start="61:23" pos:end="61:23">g</name></expr></argument>, <argument pos:start="61:26" pos:end="61:44"><expr pos:start="61:26" pos:end="61:44"><operator pos:start="61:26" pos:end="61:26">&amp;</operator><name pos:start="61:27" pos:end="61:44">ff_asf_data_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:48" pos:end="79:9">{<block_content pos:start="63:13" pos:end="77:18">

            <expr_stmt pos:start="63:13" pos:end="63:52"><expr pos:start="63:13" pos:end="63:51"><name pos:start="63:13" pos:end="63:35"><name pos:start="63:13" pos:end="63:15">asf</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:35">data_object_offset</name></name> <operator pos:start="63:37" pos:end="63:37">=</operator> <call pos:start="63:39" pos:end="63:51"><name pos:start="63:39" pos:end="63:47">url_ftell</name><argument_list pos:start="63:48" pos:end="63:51">(<argument pos:start="63:49" pos:end="63:50"><expr pos:start="63:49" pos:end="63:50"><name pos:start="63:49" pos:end="63:50">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="65:13" pos:end="65:103">// if not streaming, gsize is not unlimited (how?), and there is enough space in the file..</comment>

            <if_stmt pos:start="67:13" pos:end="75:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:57">(<expr pos:start="67:17" pos:end="67:56"><operator pos:start="67:17" pos:end="67:17">!</operator><operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:32"><name pos:start="67:19" pos:end="67:21">asf</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:26">hdr</name><operator pos:start="67:27" pos:end="67:27">.</operator><name pos:start="67:28" pos:end="67:32">flags</name></name> <operator pos:start="67:34" pos:end="67:34">&amp;</operator> <literal type="number" pos:start="67:36" pos:end="67:39">0x01</literal><operator pos:start="67:40" pos:end="67:40">)</operator> <operator pos:start="67:42" pos:end="67:43">&amp;&amp;</operator> <name pos:start="67:45" pos:end="67:49">gsize</name> <operator pos:start="67:51" pos:end="67:52">&gt;=</operator> <literal type="number" pos:start="67:54" pos:end="67:56">100</literal></expr>)</condition> <block pos:start="67:59" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:51">

                <expr_stmt pos:start="69:17" pos:end="69:51"><expr pos:start="69:17" pos:end="69:50"><name pos:start="69:17" pos:end="69:37"><name pos:start="69:17" pos:end="69:19">asf</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:37">data_object_size</name></name> <operator pos:start="69:39" pos:end="69:39">=</operator> <name pos:start="69:41" pos:end="69:45">gsize</name> <operator pos:start="69:47" pos:end="69:47">-</operator> <literal type="number" pos:start="69:49" pos:end="69:50">24</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="75:13">else <block pos:start="71:20" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:53">

                <expr_stmt pos:start="73:17" pos:end="73:53"><expr pos:start="73:17" pos:end="73:52"><name pos:start="73:17" pos:end="73:37"><name pos:start="73:17" pos:end="73:19">asf</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:37">data_object_size</name></name> <operator pos:start="73:39" pos:end="73:39">=</operator> <operator pos:start="73:41" pos:end="73:41">(</operator><name pos:start="73:42" pos:end="73:49">uint64_t</name><operator pos:start="73:50" pos:end="73:50">)</operator><operator pos:start="73:51" pos:end="73:51">-</operator><literal type="number" pos:start="73:52" pos:end="73:52">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="83:22"><if pos:start="81:9" pos:end="83:22">if <condition pos:start="81:12" pos:end="81:23">(<expr pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:17">gsize</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <literal type="number" pos:start="81:21" pos:end="81:22">24</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:22"><block_content pos:start="83:13" pos:end="83:22">

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="829:9"><if pos:start="85:9" pos:end="113:9">if <condition pos:start="85:12" pos:end="85:46">(<expr pos:start="85:13" pos:end="85:45"><operator pos:start="85:13" pos:end="85:13">!</operator><call pos:start="85:14" pos:end="85:45"><name pos:start="85:14" pos:end="85:20">guidcmp</name><argument_list pos:start="85:21" pos:end="85:45">(<argument pos:start="85:22" pos:end="85:23"><expr pos:start="85:22" pos:end="85:23"><operator pos:start="85:22" pos:end="85:22">&amp;</operator><name pos:start="85:23" pos:end="85:23">g</name></expr></argument>, <argument pos:start="85:26" pos:end="85:44"><expr pos:start="85:26" pos:end="85:44"><operator pos:start="85:26" pos:end="85:26">&amp;</operator><name pos:start="85:27" pos:end="85:44">ff_asf_file_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:48" pos:end="113:9">{<block_content pos:start="87:13" pos:end="111:50">

            <expr_stmt pos:start="87:13" pos:end="87:41"><expr pos:start="87:13" pos:end="87:40"><call pos:start="87:13" pos:end="87:40"><name pos:start="87:13" pos:end="87:20">get_guid</name><argument_list pos:start="87:21" pos:end="87:40">(<argument pos:start="87:22" pos:end="87:23"><expr pos:start="87:22" pos:end="87:23"><name pos:start="87:22" pos:end="87:23">pb</name></expr></argument>, <argument pos:start="87:26" pos:end="87:39"><expr pos:start="87:26" pos:end="87:39"><operator pos:start="87:26" pos:end="87:26">&amp;</operator><name pos:start="87:27" pos:end="87:39"><name pos:start="87:27" pos:end="87:29">asf</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:34">hdr</name><operator pos:start="87:35" pos:end="87:35">.</operator><name pos:start="87:36" pos:end="87:39">guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:55"><expr pos:start="89:13" pos:end="89:54"><name pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:15">asf</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:20">hdr</name><operator pos:start="89:21" pos:end="89:21">.</operator><name pos:start="89:22" pos:end="89:30">file_size</name></name>          <operator pos:start="89:41" pos:end="89:41">=</operator> <call pos:start="89:43" pos:end="89:54"><name pos:start="89:43" pos:end="89:50">get_le64</name><argument_list pos:start="89:51" pos:end="89:54">(<argument pos:start="89:52" pos:end="89:53"><expr pos:start="89:52" pos:end="89:53"><name pos:start="89:52" pos:end="89:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:55"><expr pos:start="91:13" pos:end="91:54"><name pos:start="91:13" pos:end="91:32"><name pos:start="91:13" pos:end="91:15">asf</name><operator pos:start="91:16" pos:end="91:17">-&gt;</operator><name pos:start="91:18" pos:end="91:20">hdr</name><operator pos:start="91:21" pos:end="91:21">.</operator><name pos:start="91:22" pos:end="91:32">create_time</name></name>        <operator pos:start="91:41" pos:end="91:41">=</operator> <call pos:start="91:43" pos:end="91:54"><name pos:start="91:43" pos:end="91:50">get_le64</name><argument_list pos:start="91:51" pos:end="91:54">(<argument pos:start="91:52" pos:end="91:53"><expr pos:start="91:52" pos:end="91:53"><name pos:start="91:52" pos:end="91:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:55"><expr pos:start="93:13" pos:end="93:54"><name pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:15">asf</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:27">nb_packets</name></name>             <operator pos:start="93:41" pos:end="93:41">=</operator> <call pos:start="93:43" pos:end="93:54"><name pos:start="93:43" pos:end="93:50">get_le64</name><argument_list pos:start="93:51" pos:end="93:54">(<argument pos:start="93:52" pos:end="93:53"><expr pos:start="93:52" pos:end="93:53"><name pos:start="93:52" pos:end="93:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:30"><name pos:start="95:13" pos:end="95:15">asf</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:20">hdr</name><operator pos:start="95:21" pos:end="95:21">.</operator><name pos:start="95:22" pos:end="95:30">play_time</name></name>          <operator pos:start="95:41" pos:end="95:41">=</operator> <call pos:start="95:43" pos:end="95:54"><name pos:start="95:43" pos:end="95:50">get_le64</name><argument_list pos:start="95:51" pos:end="95:54">(<argument pos:start="95:52" pos:end="95:53"><expr pos:start="95:52" pos:end="95:53"><name pos:start="95:52" pos:end="95:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:55"><expr pos:start="97:13" pos:end="97:54"><name pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:15">asf</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:20">hdr</name><operator pos:start="97:21" pos:end="97:21">.</operator><name pos:start="97:22" pos:end="97:30">send_time</name></name>          <operator pos:start="97:41" pos:end="97:41">=</operator> <call pos:start="97:43" pos:end="97:54"><name pos:start="97:43" pos:end="97:50">get_le64</name><argument_list pos:start="97:51" pos:end="97:54">(<argument pos:start="97:52" pos:end="97:53"><expr pos:start="97:52" pos:end="97:53"><name pos:start="97:52" pos:end="97:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:55"><expr pos:start="99:13" pos:end="99:54"><name pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:15">asf</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:20">hdr</name><operator pos:start="99:21" pos:end="99:21">.</operator><name pos:start="99:22" pos:end="99:28">preroll</name></name>            <operator pos:start="99:41" pos:end="99:41">=</operator> <call pos:start="99:43" pos:end="99:54"><name pos:start="99:43" pos:end="99:50">get_le32</name><argument_list pos:start="99:51" pos:end="99:54">(<argument pos:start="99:52" pos:end="99:53"><expr pos:start="99:52" pos:end="99:53"><name pos:start="99:52" pos:end="99:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:55"><expr pos:start="101:13" pos:end="101:54"><name pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:15">asf</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:20">hdr</name><operator pos:start="101:21" pos:end="101:21">.</operator><name pos:start="101:22" pos:end="101:27">ignore</name></name>             <operator pos:start="101:41" pos:end="101:41">=</operator> <call pos:start="101:43" pos:end="101:54"><name pos:start="101:43" pos:end="101:50">get_le32</name><argument_list pos:start="101:51" pos:end="101:54">(<argument pos:start="101:52" pos:end="101:53"><expr pos:start="101:52" pos:end="101:53"><name pos:start="101:52" pos:end="101:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:55"><expr pos:start="103:13" pos:end="103:54"><name pos:start="103:13" pos:end="103:26"><name pos:start="103:13" pos:end="103:15">asf</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:20">hdr</name><operator pos:start="103:21" pos:end="103:21">.</operator><name pos:start="103:22" pos:end="103:26">flags</name></name>              <operator pos:start="103:41" pos:end="103:41">=</operator> <call pos:start="103:43" pos:end="103:54"><name pos:start="103:43" pos:end="103:50">get_le32</name><argument_list pos:start="103:51" pos:end="103:54">(<argument pos:start="103:52" pos:end="103:53"><expr pos:start="103:52" pos:end="103:53"><name pos:start="103:52" pos:end="103:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:55"><expr pos:start="105:13" pos:end="105:54"><name pos:start="105:13" pos:end="105:32"><name pos:start="105:13" pos:end="105:15">asf</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:20">hdr</name><operator pos:start="105:21" pos:end="105:21">.</operator><name pos:start="105:22" pos:end="105:32">min_pktsize</name></name>        <operator pos:start="105:41" pos:end="105:41">=</operator> <call pos:start="105:43" pos:end="105:54"><name pos:start="105:43" pos:end="105:50">get_le32</name><argument_list pos:start="105:51" pos:end="105:54">(<argument pos:start="105:52" pos:end="105:53"><expr pos:start="105:52" pos:end="105:53"><name pos:start="105:52" pos:end="105:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:55"><expr pos:start="107:13" pos:end="107:54"><name pos:start="107:13" pos:end="107:32"><name pos:start="107:13" pos:end="107:15">asf</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:20">hdr</name><operator pos:start="107:21" pos:end="107:21">.</operator><name pos:start="107:22" pos:end="107:32">max_pktsize</name></name>        <operator pos:start="107:41" pos:end="107:41">=</operator> <call pos:start="107:43" pos:end="107:54"><name pos:start="107:43" pos:end="107:50">get_le32</name><argument_list pos:start="107:51" pos:end="107:54">(<argument pos:start="107:52" pos:end="107:53"><expr pos:start="107:52" pos:end="107:53"><name pos:start="107:52" pos:end="107:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:55"><expr pos:start="109:13" pos:end="109:54"><name pos:start="109:13" pos:end="109:32"><name pos:start="109:13" pos:end="109:15">asf</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:20">hdr</name><operator pos:start="109:21" pos:end="109:21">.</operator><name pos:start="109:22" pos:end="109:32">max_bitrate</name></name>        <operator pos:start="109:41" pos:end="109:41">=</operator> <call pos:start="109:43" pos:end="109:54"><name pos:start="109:43" pos:end="109:50">get_le32</name><argument_list pos:start="109:51" pos:end="109:54">(<argument pos:start="109:52" pos:end="109:53"><expr pos:start="109:52" pos:end="109:53"><name pos:start="109:52" pos:end="109:53">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:50"><expr pos:start="111:13" pos:end="111:49"><name pos:start="111:13" pos:end="111:26"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:26">packet_size</name></name> <operator pos:start="111:28" pos:end="111:28">=</operator> <name pos:start="111:30" pos:end="111:49"><name pos:start="111:30" pos:end="111:32">asf</name><operator pos:start="111:33" pos:end="111:34">-&gt;</operator><name pos:start="111:35" pos:end="111:37">hdr</name><operator pos:start="111:38" pos:end="111:38">.</operator><name pos:start="111:39" pos:end="111:49">max_pktsize</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="445:9">else if <condition pos:start="113:19" pos:end="113:55">(<expr pos:start="113:20" pos:end="113:54"><operator pos:start="113:20" pos:end="113:20">!</operator><call pos:start="113:21" pos:end="113:54"><name pos:start="113:21" pos:end="113:27">guidcmp</name><argument_list pos:start="113:28" pos:end="113:54">(<argument pos:start="113:29" pos:end="113:30"><expr pos:start="113:29" pos:end="113:30"><operator pos:start="113:29" pos:end="113:29">&amp;</operator><name pos:start="113:30" pos:end="113:30">g</name></expr></argument>, <argument pos:start="113:33" pos:end="113:53"><expr pos:start="113:33" pos:end="113:53"><operator pos:start="113:33" pos:end="113:33">&amp;</operator><name pos:start="113:34" pos:end="113:53">ff_asf_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:57" pos:end="445:9">{<block_content pos:start="115:13" pos:end="443:54">

            <decl_stmt pos:start="115:13" pos:end="115:34"><decl pos:start="115:13" pos:end="115:33"><type pos:start="115:13" pos:end="115:28"><name pos:start="115:13" pos:end="115:28"><name pos:start="115:13" pos:end="115:16">enum</name> <name pos:start="115:18" pos:end="115:28">AVMediaType</name></name></type> <name pos:start="115:30" pos:end="115:33">type</name></decl>;</decl_stmt>

            <decl_stmt pos:start="117:13" pos:end="117:42"><decl pos:start="117:13" pos:end="117:34"><type pos:start="117:13" pos:end="117:15"><name pos:start="117:13" pos:end="117:15">int</name></type> <name pos:start="117:17" pos:end="117:34">type_specific_size</name></decl>, <decl pos:start="117:37" pos:end="117:41"><type ref="prev" pos:start="117:13" pos:end="117:15"/><name pos:start="117:37" pos:end="117:41">sizeX</name></decl>;</decl_stmt>

            <decl_stmt pos:start="119:13" pos:end="119:32"><decl pos:start="119:13" pos:end="119:31"><type pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:20">uint64_t</name></type> <name pos:start="119:22" pos:end="119:31">total_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="121:13" pos:end="121:30"><decl pos:start="121:13" pos:end="121:29"><type pos:start="121:13" pos:end="121:24"><name pos:start="121:13" pos:end="121:20">unsigned</name> <name pos:start="121:22" pos:end="121:24">int</name></type> <name pos:start="121:26" pos:end="121:29">tag1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="123:13" pos:end="123:43"><decl pos:start="123:13" pos:end="123:24"><type pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:19">int64_t</name></type> <name pos:start="123:21" pos:end="123:24">pos1</name></decl>, <decl pos:start="123:27" pos:end="123:30"><type ref="prev" pos:start="123:13" pos:end="123:19"/><name pos:start="123:27" pos:end="123:30">pos2</name></decl>, <decl pos:start="123:33" pos:end="123:42"><type ref="prev" pos:start="123:13" pos:end="123:19"/><name pos:start="123:33" pos:end="123:42">start_time</name></decl>;</decl_stmt>

            <decl_stmt pos:start="125:13" pos:end="125:61"><decl pos:start="125:13" pos:end="125:41"><type pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:15">int</name></type> <name pos:start="125:17" pos:end="125:41">test_for_ext_stream_audio</name></decl>, <decl pos:start="125:44" pos:end="125:60"><type ref="prev" pos:start="125:13" pos:end="125:15"/><name pos:start="125:44" pos:end="125:58">is_dvr_ms_audio</name><init pos:start="125:59" pos:end="125:60">=<expr pos:start="125:60" pos:end="125:60"><literal type="number" pos:start="125:60" pos:end="125:60">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="129:13" pos:end="135:13"><if pos:start="129:13" pos:end="135:13">if <condition pos:start="129:16" pos:end="129:49">(<expr pos:start="129:17" pos:end="129:48"><name pos:start="129:17" pos:end="129:29"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:29">nb_streams</name></name> <operator pos:start="129:31" pos:end="129:32">==</operator> <name pos:start="129:34" pos:end="129:48">ASF_MAX_STREAMS</name></expr>)</condition> <block pos:start="129:51" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:39">

                <expr_stmt pos:start="131:17" pos:end="131:62"><expr pos:start="131:17" pos:end="131:61"><call pos:start="131:17" pos:end="131:61"><name pos:start="131:17" pos:end="131:22">av_log</name><argument_list pos:start="131:23" pos:end="131:61">(<argument pos:start="131:24" pos:end="131:24"><expr pos:start="131:24" pos:end="131:24"><name pos:start="131:24" pos:end="131:24">s</name></expr></argument>, <argument pos:start="131:27" pos:end="131:38"><expr pos:start="131:27" pos:end="131:38"><name pos:start="131:27" pos:end="131:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:41" pos:end="131:60"><expr pos:start="131:41" pos:end="131:60"><literal type="string" pos:start="131:41" pos:end="131:60">"too many streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="133:17" pos:end="133:39">return <expr pos:start="133:24" pos:end="133:38"><call pos:start="133:24" pos:end="133:38"><name pos:start="133:24" pos:end="133:30">AVERROR</name><argument_list pos:start="133:31" pos:end="133:38">(<argument pos:start="133:32" pos:end="133:37"><expr pos:start="133:32" pos:end="133:37"><name pos:start="133:32" pos:end="133:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="139:13" pos:end="139:33"><expr pos:start="139:13" pos:end="139:32"><name pos:start="139:13" pos:end="139:16">pos1</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <call pos:start="139:20" pos:end="139:32"><name pos:start="139:20" pos:end="139:28">url_ftell</name><argument_list pos:start="139:29" pos:end="139:32">(<argument pos:start="139:30" pos:end="139:31"><expr pos:start="139:30" pos:end="139:31"><name pos:start="139:30" pos:end="139:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="143:13" pos:end="143:37"><expr pos:start="143:13" pos:end="143:36"><name pos:start="143:13" pos:end="143:14">st</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:36"><name pos:start="143:18" pos:end="143:30">av_new_stream</name><argument_list pos:start="143:31" pos:end="143:36">(<argument pos:start="143:32" pos:end="143:32"><expr pos:start="143:32" pos:end="143:32"><name pos:start="143:32" pos:end="143:32">s</name></expr></argument>, <argument pos:start="143:35" pos:end="143:35"><expr pos:start="143:35" pos:end="143:35"><literal type="number" pos:start="143:35" pos:end="143:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="147:39"><if pos:start="145:13" pos:end="147:39">if <condition pos:start="145:16" pos:end="145:20">(<expr pos:start="145:17" pos:end="145:19"><operator pos:start="145:17" pos:end="145:17">!</operator><name pos:start="145:18" pos:end="145:19">st</name></expr>)</condition><block type="pseudo" pos:start="147:17" pos:end="147:39"><block_content pos:start="147:17" pos:end="147:39">

                <return pos:start="147:17" pos:end="147:39">return <expr pos:start="147:24" pos:end="147:38"><call pos:start="147:24" pos:end="147:38"><name pos:start="147:24" pos:end="147:30">AVERROR</name><argument_list pos:start="147:31" pos:end="147:38">(<argument pos:start="147:32" pos:end="147:37"><expr pos:start="147:32" pos:end="147:37"><name pos:start="147:32" pos:end="147:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:45"><expr pos:start="149:13" pos:end="149:44"><call pos:start="149:13" pos:end="149:44"><name pos:start="149:13" pos:end="149:27">av_set_pts_info</name><argument_list pos:start="149:28" pos:end="149:44">(<argument pos:start="149:29" pos:end="149:30"><expr pos:start="149:29" pos:end="149:30"><name pos:start="149:29" pos:end="149:30">st</name></expr></argument>, <argument pos:start="149:33" pos:end="149:34"><expr pos:start="149:33" pos:end="149:34"><literal type="number" pos:start="149:33" pos:end="149:34">32</literal></expr></argument>, <argument pos:start="149:37" pos:end="149:37"><expr pos:start="149:37" pos:end="149:37"><literal type="number" pos:start="149:37" pos:end="149:37">1</literal></expr></argument>, <argument pos:start="149:40" pos:end="149:43"><expr pos:start="149:40" pos:end="149:43"><literal type="number" pos:start="149:40" pos:end="149:43">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="149:47" pos:end="149:68">/* 32 bit pts in ms */</comment>

            <expr_stmt pos:start="151:13" pos:end="151:51"><expr pos:start="151:13" pos:end="151:50"><name pos:start="151:13" pos:end="151:18">asf_st</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <call pos:start="151:22" pos:end="151:50"><name pos:start="151:22" pos:end="151:31">av_mallocz</name><argument_list pos:start="151:32" pos:end="151:50">(<argument pos:start="151:33" pos:end="151:49"><expr pos:start="151:33" pos:end="151:49"><sizeof pos:start="151:33" pos:end="151:49">sizeof<argument_list pos:start="151:39" pos:end="151:49">(<argument pos:start="151:40" pos:end="151:48"><expr pos:start="151:40" pos:end="151:48"><name pos:start="151:40" pos:end="151:48">ASFStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="153:13" pos:end="155:39"><if pos:start="153:13" pos:end="155:39">if <condition pos:start="153:16" pos:end="153:24">(<expr pos:start="153:17" pos:end="153:23"><operator pos:start="153:17" pos:end="153:17">!</operator><name pos:start="153:18" pos:end="153:23">asf_st</name></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:39"><block_content pos:start="155:17" pos:end="155:39">

                <return pos:start="155:17" pos:end="155:39">return <expr pos:start="155:24" pos:end="155:38"><call pos:start="155:24" pos:end="155:38"><name pos:start="155:24" pos:end="155:30">AVERROR</name><argument_list pos:start="155:31" pos:end="155:38">(<argument pos:start="155:32" pos:end="155:37"><expr pos:start="155:32" pos:end="155:37"><name pos:start="155:32" pos:end="155:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:35"><expr pos:start="157:13" pos:end="157:34"><name pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:14">st</name><operator pos:start="157:15" pos:end="157:16">-&gt;</operator><name pos:start="157:17" pos:end="157:25">priv_data</name></name> <operator pos:start="157:27" pos:end="157:27">=</operator> <name pos:start="157:29" pos:end="157:34">asf_st</name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:42"><expr pos:start="159:13" pos:end="159:41"><name pos:start="159:13" pos:end="159:22">start_time</name> <operator pos:start="159:24" pos:end="159:24">=</operator> <name pos:start="159:26" pos:end="159:41"><name pos:start="159:26" pos:end="159:28">asf</name><operator pos:start="159:29" pos:end="159:30">-&gt;</operator><name pos:start="159:31" pos:end="159:33">hdr</name><operator pos:start="159:34" pos:end="159:34">.</operator><name pos:start="159:35" pos:end="159:41">preroll</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="163:13" pos:end="163:48"><expr pos:start="163:13" pos:end="163:47"><name pos:start="163:13" pos:end="163:41"><name pos:start="163:13" pos:end="163:18">asf_st</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:41">stream_language_index</name></name> <operator pos:start="163:43" pos:end="163:43">=</operator> <literal type="number" pos:start="163:45" pos:end="163:47">128</literal></expr>;</expr_stmt> <comment type="line" pos:start="163:50" pos:end="163:95">// invalid stream index means no language info</comment>



            <if_stmt pos:start="167:13" pos:end="173:13"><if pos:start="167:13" pos:end="173:13">if<condition pos:start="167:15" pos:end="167:40">(<expr pos:start="167:16" pos:end="167:39"><operator pos:start="167:16" pos:end="167:16">!</operator><operator pos:start="167:17" pos:end="167:17">(</operator><name pos:start="167:18" pos:end="167:31"><name pos:start="167:18" pos:end="167:20">asf</name><operator pos:start="167:21" pos:end="167:22">-&gt;</operator><name pos:start="167:23" pos:end="167:25">hdr</name><operator pos:start="167:26" pos:end="167:26">.</operator><name pos:start="167:27" pos:end="167:31">flags</name></name> <operator pos:start="167:33" pos:end="167:33">&amp;</operator> <literal type="number" pos:start="167:35" pos:end="167:38">0x01</literal><operator pos:start="167:39" pos:end="167:39">)</operator></expr>)</condition> <block pos:start="167:42" pos:end="173:13">{<block_content pos:start="169:17" pos:end="171:51"> <comment type="line" pos:start="167:44" pos:end="167:71">// if we aren't streaming...</comment>

                <expr_stmt pos:start="169:17" pos:end="171:51"><expr pos:start="169:17" pos:end="171:50"><name pos:start="169:17" pos:end="169:28"><name pos:start="169:17" pos:end="169:18">st</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:28">duration</name></name> <operator pos:start="169:30" pos:end="169:30">=</operator> <name pos:start="169:32" pos:end="169:49"><name pos:start="169:32" pos:end="169:34">asf</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:39">hdr</name><operator pos:start="169:40" pos:end="169:40">.</operator><name pos:start="169:41" pos:end="169:49">play_time</name></name> <operator pos:start="169:51" pos:end="169:51">/</operator>

                    <operator pos:start="171:21" pos:end="171:21">(</operator><literal type="number" pos:start="171:22" pos:end="171:29">10000000</literal> <operator pos:start="171:31" pos:end="171:31">/</operator> <literal type="number" pos:start="171:33" pos:end="171:36">1000</literal><operator pos:start="171:37" pos:end="171:37">)</operator> <operator pos:start="171:39" pos:end="171:39">-</operator> <name pos:start="171:41" pos:end="171:50">start_time</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:29"><expr pos:start="175:13" pos:end="175:28"><call pos:start="175:13" pos:end="175:28"><name pos:start="175:13" pos:end="175:20">get_guid</name><argument_list pos:start="175:21" pos:end="175:28">(<argument pos:start="175:22" pos:end="175:23"><expr pos:start="175:22" pos:end="175:23"><name pos:start="175:22" pos:end="175:23">pb</name></expr></argument>, <argument pos:start="175:26" pos:end="175:27"><expr pos:start="175:26" pos:end="175:27"><operator pos:start="175:26" pos:end="175:26">&amp;</operator><name pos:start="175:27" pos:end="175:27">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="179:13" pos:end="179:42"><expr pos:start="179:13" pos:end="179:41"><name pos:start="179:13" pos:end="179:37">test_for_ext_stream_audio</name> <operator pos:start="179:39" pos:end="179:39">=</operator> <literal type="number" pos:start="179:41" pos:end="179:41">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="181:13" pos:end="203:13"><if pos:start="181:13" pos:end="185:13">if <condition pos:start="181:16" pos:end="181:51">(<expr pos:start="181:17" pos:end="181:50"><operator pos:start="181:17" pos:end="181:17">!</operator><call pos:start="181:18" pos:end="181:50"><name pos:start="181:18" pos:end="181:24">guidcmp</name><argument_list pos:start="181:25" pos:end="181:50">(<argument pos:start="181:26" pos:end="181:27"><expr pos:start="181:26" pos:end="181:27"><operator pos:start="181:26" pos:end="181:26">&amp;</operator><name pos:start="181:27" pos:end="181:27">g</name></expr></argument>, <argument pos:start="181:30" pos:end="181:49"><expr pos:start="181:30" pos:end="181:49"><operator pos:start="181:30" pos:end="181:30">&amp;</operator><name pos:start="181:31" pos:end="181:49">ff_asf_audio_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:53" pos:end="185:13">{<block_content pos:start="183:17" pos:end="183:42">

                <expr_stmt pos:start="183:17" pos:end="183:42"><expr pos:start="183:17" pos:end="183:41"><name pos:start="183:17" pos:end="183:20">type</name> <operator pos:start="183:22" pos:end="183:22">=</operator> <name pos:start="183:24" pos:end="183:41">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="185:15" pos:end="189:13">else if <condition pos:start="185:23" pos:end="185:58">(<expr pos:start="185:24" pos:end="185:57"><operator pos:start="185:24" pos:end="185:24">!</operator><call pos:start="185:25" pos:end="185:57"><name pos:start="185:25" pos:end="185:31">guidcmp</name><argument_list pos:start="185:32" pos:end="185:57">(<argument pos:start="185:33" pos:end="185:34"><expr pos:start="185:33" pos:end="185:34"><operator pos:start="185:33" pos:end="185:33">&amp;</operator><name pos:start="185:34" pos:end="185:34">g</name></expr></argument>, <argument pos:start="185:37" pos:end="185:56"><expr pos:start="185:37" pos:end="185:56"><operator pos:start="185:37" pos:end="185:37">&amp;</operator><name pos:start="185:38" pos:end="185:56">ff_asf_video_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:60" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:42">

                <expr_stmt pos:start="187:17" pos:end="187:42"><expr pos:start="187:17" pos:end="187:41"><name pos:start="187:17" pos:end="187:20">type</name> <operator pos:start="187:22" pos:end="187:22">=</operator> <name pos:start="187:24" pos:end="187:41">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="189:15" pos:end="193:13">else if <condition pos:start="189:23" pos:end="189:60">(<expr pos:start="189:24" pos:end="189:59"><operator pos:start="189:24" pos:end="189:24">!</operator><call pos:start="189:25" pos:end="189:59"><name pos:start="189:25" pos:end="189:31">guidcmp</name><argument_list pos:start="189:32" pos:end="189:59">(<argument pos:start="189:33" pos:end="189:34"><expr pos:start="189:33" pos:end="189:34"><operator pos:start="189:33" pos:end="189:33">&amp;</operator><name pos:start="189:34" pos:end="189:34">g</name></expr></argument>, <argument pos:start="189:37" pos:end="189:58"><expr pos:start="189:37" pos:end="189:58"><operator pos:start="189:37" pos:end="189:37">&amp;</operator><name pos:start="189:38" pos:end="189:58">ff_asf_command_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:62" pos:end="193:13">{<block_content pos:start="191:17" pos:end="191:41">

                <expr_stmt pos:start="191:17" pos:end="191:41"><expr pos:start="191:17" pos:end="191:40"><name pos:start="191:17" pos:end="191:20">type</name> <operator pos:start="191:22" pos:end="191:22">=</operator> <name pos:start="191:24" pos:end="191:40">AVMEDIA_TYPE_DATA</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="193:15" pos:end="199:13">else if <condition pos:start="193:23" pos:end="193:76">(<expr pos:start="193:24" pos:end="193:75"><operator pos:start="193:24" pos:end="193:24">!</operator><call pos:start="193:25" pos:end="193:75"><name pos:start="193:25" pos:end="193:31">guidcmp</name><argument_list pos:start="193:32" pos:end="193:75">(<argument pos:start="193:33" pos:end="193:34"><expr pos:start="193:33" pos:end="193:34"><operator pos:start="193:33" pos:end="193:33">&amp;</operator><name pos:start="193:34" pos:end="193:34">g</name></expr></argument>, <argument pos:start="193:37" pos:end="193:74"><expr pos:start="193:37" pos:end="193:74"><operator pos:start="193:37" pos:end="193:37">&amp;</operator><name pos:start="193:38" pos:end="193:74">ff_asf_ext_stream_embed_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:78" pos:end="199:13">{<block_content pos:start="195:17" pos:end="197:44">

                <expr_stmt pos:start="195:17" pos:end="195:46"><expr pos:start="195:17" pos:end="195:45"><name pos:start="195:17" pos:end="195:41">test_for_ext_stream_audio</name> <operator pos:start="195:43" pos:end="195:43">=</operator> <literal type="number" pos:start="195:45" pos:end="195:45">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:44"><expr pos:start="197:17" pos:end="197:43"><name pos:start="197:17" pos:end="197:20">type</name> <operator pos:start="197:22" pos:end="197:22">=</operator> <name pos:start="197:24" pos:end="197:43">AVMEDIA_TYPE_UNKNOWN</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="199:15" pos:end="203:13">else <block pos:start="199:20" pos:end="203:13">{<block_content pos:start="201:17" pos:end="201:26">

                <return pos:start="201:17" pos:end="201:26">return <expr pos:start="201:24" pos:end="201:25"><operator pos:start="201:24" pos:end="201:24">-</operator><literal type="number" pos:start="201:25" pos:end="201:25">1</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:29"><expr pos:start="205:13" pos:end="205:28"><call pos:start="205:13" pos:end="205:28"><name pos:start="205:13" pos:end="205:20">get_guid</name><argument_list pos:start="205:21" pos:end="205:28">(<argument pos:start="205:22" pos:end="205:23"><expr pos:start="205:22" pos:end="205:23"><name pos:start="205:22" pos:end="205:23">pb</name></expr></argument>, <argument pos:start="205:26" pos:end="205:27"><expr pos:start="205:26" pos:end="205:27"><operator pos:start="205:26" pos:end="205:26">&amp;</operator><name pos:start="205:27" pos:end="205:27">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:38"><expr pos:start="207:13" pos:end="207:37"><name pos:start="207:13" pos:end="207:22">total_size</name> <operator pos:start="207:24" pos:end="207:24">=</operator> <call pos:start="207:26" pos:end="207:37"><name pos:start="207:26" pos:end="207:33">get_le64</name><argument_list pos:start="207:34" pos:end="207:37">(<argument pos:start="207:35" pos:end="207:36"><expr pos:start="207:35" pos:end="207:36"><name pos:start="207:35" pos:end="207:36">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:46"><expr pos:start="209:13" pos:end="209:45"><name pos:start="209:13" pos:end="209:30">type_specific_size</name> <operator pos:start="209:32" pos:end="209:32">=</operator> <call pos:start="209:34" pos:end="209:45"><name pos:start="209:34" pos:end="209:41">get_le32</name><argument_list pos:start="209:42" pos:end="209:45">(<argument pos:start="209:43" pos:end="209:44"><expr pos:start="209:43" pos:end="209:44"><name pos:start="209:43" pos:end="209:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:25"><expr pos:start="211:13" pos:end="211:24"><call pos:start="211:13" pos:end="211:24"><name pos:start="211:13" pos:end="211:20">get_le32</name><argument_list pos:start="211:21" pos:end="211:24">(<argument pos:start="211:22" pos:end="211:23"><expr pos:start="211:22" pos:end="211:23"><name pos:start="211:22" pos:end="211:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:41"><expr pos:start="213:13" pos:end="213:40"><name pos:start="213:13" pos:end="213:18"><name pos:start="213:13" pos:end="213:14">st</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:18">id</name></name> <operator pos:start="213:20" pos:end="213:20">=</operator> <call pos:start="213:22" pos:end="213:33"><name pos:start="213:22" pos:end="213:29">get_le16</name><argument_list pos:start="213:30" pos:end="213:33">(<argument pos:start="213:31" pos:end="213:32"><expr pos:start="213:31" pos:end="213:32"><name pos:start="213:31" pos:end="213:32">pb</name></expr></argument>)</argument_list></call> <operator pos:start="213:35" pos:end="213:35">&amp;</operator> <literal type="number" pos:start="213:37" pos:end="213:40">0x7f</literal></expr>;</expr_stmt> <comment type="block" pos:start="213:43" pos:end="213:57">/* stream id */</comment>

            <comment type="line" pos:start="215:13" pos:end="215:49">// mapping of asf ID to AV stream ID;</comment>

            <expr_stmt pos:start="217:13" pos:end="217:56"><expr pos:start="217:13" pos:end="217:55"><name pos:start="217:13" pos:end="217:35"><name pos:start="217:13" pos:end="217:15">asf</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:27">asfid2avid</name><index pos:start="217:28" pos:end="217:35">[<expr pos:start="217:29" pos:end="217:34"><name pos:start="217:29" pos:end="217:34"><name pos:start="217:29" pos:end="217:30">st</name><operator pos:start="217:31" pos:end="217:32">-&gt;</operator><name pos:start="217:33" pos:end="217:34">id</name></name></expr>]</index></name> <operator pos:start="217:37" pos:end="217:37">=</operator> <name pos:start="217:39" pos:end="217:51"><name pos:start="217:39" pos:end="217:39">s</name><operator pos:start="217:40" pos:end="217:41">-&gt;</operator><name pos:start="217:42" pos:end="217:51">nb_streams</name></name> <operator pos:start="217:53" pos:end="217:53">-</operator> <literal type="number" pos:start="217:55" pos:end="217:55">1</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="221:13" pos:end="221:25"><expr pos:start="221:13" pos:end="221:24"><call pos:start="221:13" pos:end="221:24"><name pos:start="221:13" pos:end="221:20">get_le32</name><argument_list pos:start="221:21" pos:end="221:24">(<argument pos:start="221:22" pos:end="221:23"><expr pos:start="221:22" pos:end="221:23"><name pos:start="221:22" pos:end="221:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="225:13" pos:end="249:13"><if pos:start="225:13" pos:end="249:13">if <condition pos:start="225:16" pos:end="225:42">(<expr pos:start="225:17" pos:end="225:41"><name pos:start="225:17" pos:end="225:41">test_for_ext_stream_audio</name></expr>)</condition> <block pos:start="225:44" pos:end="249:13">{<block_content pos:start="227:17" pos:end="247:17">

                <expr_stmt pos:start="227:17" pos:end="227:33"><expr pos:start="227:17" pos:end="227:32"><call pos:start="227:17" pos:end="227:32"><name pos:start="227:17" pos:end="227:24">get_guid</name><argument_list pos:start="227:25" pos:end="227:32">(<argument pos:start="227:26" pos:end="227:27"><expr pos:start="227:26" pos:end="227:27"><name pos:start="227:26" pos:end="227:27">pb</name></expr></argument>, <argument pos:start="227:30" pos:end="227:31"><expr pos:start="227:30" pos:end="227:31"><operator pos:start="227:30" pos:end="227:30">&amp;</operator><name pos:start="227:31" pos:end="227:31">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="229:17" pos:end="247:17"><if pos:start="229:17" pos:end="247:17">if <condition pos:start="229:20" pos:end="229:66">(<expr pos:start="229:21" pos:end="229:65"><operator pos:start="229:21" pos:end="229:21">!</operator><call pos:start="229:22" pos:end="229:65"><name pos:start="229:22" pos:end="229:28">guidcmp</name><argument_list pos:start="229:29" pos:end="229:65">(<argument pos:start="229:30" pos:end="229:31"><expr pos:start="229:30" pos:end="229:31"><operator pos:start="229:30" pos:end="229:30">&amp;</operator><name pos:start="229:31" pos:end="229:31">g</name></expr></argument>, <argument pos:start="229:34" pos:end="229:64"><expr pos:start="229:34" pos:end="229:64"><operator pos:start="229:34" pos:end="229:34">&amp;</operator><name pos:start="229:35" pos:end="229:64">ff_asf_ext_stream_audio_stream</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:68" pos:end="247:17">{<block_content pos:start="231:21" pos:end="245:33">

                    <expr_stmt pos:start="231:21" pos:end="231:46"><expr pos:start="231:21" pos:end="231:45"><name pos:start="231:21" pos:end="231:24">type</name> <operator pos:start="231:26" pos:end="231:26">=</operator> <name pos:start="231:28" pos:end="231:45">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:38"><expr pos:start="233:21" pos:end="233:37"><name pos:start="233:21" pos:end="233:35">is_dvr_ms_audio</name><operator pos:start="233:36" pos:end="233:36">=</operator><literal type="number" pos:start="233:37" pos:end="233:37">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="235:21" pos:end="235:37"><expr pos:start="235:21" pos:end="235:36"><call pos:start="235:21" pos:end="235:36"><name pos:start="235:21" pos:end="235:28">get_guid</name><argument_list pos:start="235:29" pos:end="235:36">(<argument pos:start="235:30" pos:end="235:31"><expr pos:start="235:30" pos:end="235:31"><name pos:start="235:30" pos:end="235:31">pb</name></expr></argument>, <argument pos:start="235:34" pos:end="235:35"><expr pos:start="235:34" pos:end="235:35"><operator pos:start="235:34" pos:end="235:34">&amp;</operator><name pos:start="235:35" pos:end="235:35">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="237:21" pos:end="237:33"><expr pos:start="237:21" pos:end="237:32"><call pos:start="237:21" pos:end="237:32"><name pos:start="237:21" pos:end="237:28">get_le32</name><argument_list pos:start="237:29" pos:end="237:32">(<argument pos:start="237:30" pos:end="237:31"><expr pos:start="237:30" pos:end="237:31"><name pos:start="237:30" pos:end="237:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="239:21" pos:end="239:33"><expr pos:start="239:21" pos:end="239:32"><call pos:start="239:21" pos:end="239:32"><name pos:start="239:21" pos:end="239:28">get_le32</name><argument_list pos:start="239:29" pos:end="239:32">(<argument pos:start="239:30" pos:end="239:31"><expr pos:start="239:30" pos:end="239:31"><name pos:start="239:30" pos:end="239:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="241:21" pos:end="241:33"><expr pos:start="241:21" pos:end="241:32"><call pos:start="241:21" pos:end="241:32"><name pos:start="241:21" pos:end="241:28">get_le32</name><argument_list pos:start="241:29" pos:end="241:32">(<argument pos:start="241:30" pos:end="241:31"><expr pos:start="241:30" pos:end="241:31"><name pos:start="241:30" pos:end="241:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="243:21" pos:end="243:37"><expr pos:start="243:21" pos:end="243:36"><call pos:start="243:21" pos:end="243:36"><name pos:start="243:21" pos:end="243:28">get_guid</name><argument_list pos:start="243:29" pos:end="243:36">(<argument pos:start="243:30" pos:end="243:31"><expr pos:start="243:30" pos:end="243:31"><name pos:start="243:30" pos:end="243:31">pb</name></expr></argument>, <argument pos:start="243:34" pos:end="243:35"><expr pos:start="243:34" pos:end="243:35"><operator pos:start="243:34" pos:end="243:34">&amp;</operator><name pos:start="243:35" pos:end="243:35">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="245:21" pos:end="245:33"><expr pos:start="245:21" pos:end="245:32"><call pos:start="245:21" pos:end="245:32"><name pos:start="245:21" pos:end="245:28">get_le32</name><argument_list pos:start="245:29" pos:end="245:32">(<argument pos:start="245:30" pos:end="245:31"><expr pos:start="245:30" pos:end="245:31"><name pos:start="245:30" pos:end="245:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="253:13" pos:end="253:41"><expr pos:start="253:13" pos:end="253:40"><name pos:start="253:13" pos:end="253:33"><name pos:start="253:13" pos:end="253:14">st</name><operator pos:start="253:15" pos:end="253:16">-&gt;</operator><name pos:start="253:17" pos:end="253:21">codec</name><operator pos:start="253:22" pos:end="253:23">-&gt;</operator><name pos:start="253:24" pos:end="253:33">codec_type</name></name> <operator pos:start="253:35" pos:end="253:35">=</operator> <name pos:start="253:37" pos:end="253:40">type</name></expr>;</expr_stmt>

            <if_stmt pos:start="255:13" pos:end="439:13"><if pos:start="255:13" pos:end="355:13">if <condition pos:start="255:16" pos:end="255:43">(<expr pos:start="255:17" pos:end="255:42"><name pos:start="255:17" pos:end="255:20">type</name> <operator pos:start="255:22" pos:end="255:23">==</operator> <name pos:start="255:25" pos:end="255:42">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="255:45" pos:end="355:13">{<block_content pos:start="257:17" pos:end="353:17">

                <expr_stmt pos:start="257:17" pos:end="257:69"><expr pos:start="257:17" pos:end="257:68"><call pos:start="257:17" pos:end="257:68"><name pos:start="257:17" pos:end="257:33">ff_get_wav_header</name><argument_list pos:start="257:34" pos:end="257:68">(<argument pos:start="257:35" pos:end="257:36"><expr pos:start="257:35" pos:end="257:36"><name pos:start="257:35" pos:end="257:36">pb</name></expr></argument>, <argument pos:start="257:39" pos:end="257:47"><expr pos:start="257:39" pos:end="257:47"><name pos:start="257:39" pos:end="257:47"><name pos:start="257:39" pos:end="257:40">st</name><operator pos:start="257:41" pos:end="257:42">-&gt;</operator><name pos:start="257:43" pos:end="257:47">codec</name></name></expr></argument>, <argument pos:start="257:50" pos:end="257:67"><expr pos:start="257:50" pos:end="257:67"><name pos:start="257:50" pos:end="257:67">type_specific_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="259:17" pos:end="269:17"><if pos:start="259:17" pos:end="269:17">if <condition pos:start="259:20" pos:end="259:36">(<expr pos:start="259:21" pos:end="259:35"><name pos:start="259:21" pos:end="259:35">is_dvr_ms_audio</name></expr>)</condition> <block pos:start="259:38" pos:end="269:17">{<block_content pos:start="265:21" pos:end="267:45">

                    <comment type="line" pos:start="261:21" pos:end="261:70">// codec_id and codec_tag are unreliable in dvr_ms</comment>

                    <comment type="line" pos:start="263:21" pos:end="263:63">// files. Set them later by probing stream.</comment>

                    <expr_stmt pos:start="265:21" pos:end="265:57"><expr pos:start="265:21" pos:end="265:56"><name pos:start="265:21" pos:end="265:39"><name pos:start="265:21" pos:end="265:22">st</name><operator pos:start="265:23" pos:end="265:24">-&gt;</operator><name pos:start="265:25" pos:end="265:29">codec</name><operator pos:start="265:30" pos:end="265:31">-&gt;</operator><name pos:start="265:32" pos:end="265:39">codec_id</name></name> <operator pos:start="265:41" pos:end="265:41">=</operator> <name pos:start="265:43" pos:end="265:56">CODEC_ID_PROBE</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="267:21" pos:end="267:45"><expr pos:start="267:21" pos:end="267:44"><name pos:start="267:21" pos:end="267:40"><name pos:start="267:21" pos:end="267:22">st</name><operator pos:start="267:23" pos:end="267:24">-&gt;</operator><name pos:start="267:25" pos:end="267:29">codec</name><operator pos:start="267:30" pos:end="267:31">-&gt;</operator><name pos:start="267:32" pos:end="267:40">codec_tag</name></name> <operator pos:start="267:42" pos:end="267:42">=</operator> <literal type="number" pos:start="267:44" pos:end="267:44">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="271:17" pos:end="279:17"><if pos:start="271:17" pos:end="275:17">if <condition pos:start="271:20" pos:end="271:56">(<expr pos:start="271:21" pos:end="271:55"><name pos:start="271:21" pos:end="271:39"><name pos:start="271:21" pos:end="271:22">st</name><operator pos:start="271:23" pos:end="271:24">-&gt;</operator><name pos:start="271:25" pos:end="271:29">codec</name><operator pos:start="271:30" pos:end="271:31">-&gt;</operator><name pos:start="271:32" pos:end="271:39">codec_id</name></name> <operator pos:start="271:41" pos:end="271:42">==</operator> <name pos:start="271:44" pos:end="271:55">CODEC_ID_AAC</name></expr>)</condition> <block pos:start="271:58" pos:end="275:17">{<block_content pos:start="273:21" pos:end="273:59">

                    <expr_stmt pos:start="273:21" pos:end="273:59"><expr pos:start="273:21" pos:end="273:58"><name pos:start="273:21" pos:end="273:36"><name pos:start="273:21" pos:end="273:22">st</name><operator pos:start="273:23" pos:end="273:24">-&gt;</operator><name pos:start="273:25" pos:end="273:36">need_parsing</name></name> <operator pos:start="273:38" pos:end="273:38">=</operator> <name pos:start="273:40" pos:end="273:58">AVSTREAM_PARSE_NONE</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="275:19" pos:end="279:17">else <block pos:start="275:24" pos:end="279:17">{<block_content pos:start="277:21" pos:end="277:59">

                    <expr_stmt pos:start="277:21" pos:end="277:59"><expr pos:start="277:21" pos:end="277:58"><name pos:start="277:21" pos:end="277:36"><name pos:start="277:21" pos:end="277:22">st</name><operator pos:start="277:23" pos:end="277:24">-&gt;</operator><name pos:start="277:25" pos:end="277:36">need_parsing</name></name> <operator pos:start="277:38" pos:end="277:38">=</operator> <name pos:start="277:40" pos:end="277:58">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <comment type="block" pos:start="281:17" pos:end="281:71">/* We have to init the frame size at some point .... */</comment>

                <expr_stmt pos:start="283:17" pos:end="283:37"><expr pos:start="283:17" pos:end="283:36"><name pos:start="283:17" pos:end="283:20">pos2</name> <operator pos:start="283:22" pos:end="283:22">=</operator> <call pos:start="283:24" pos:end="283:36"><name pos:start="283:24" pos:end="283:32">url_ftell</name><argument_list pos:start="283:33" pos:end="283:36">(<argument pos:start="283:34" pos:end="283:35"><expr pos:start="283:34" pos:end="283:35"><name pos:start="283:34" pos:end="283:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="285:17" pos:end="297:17"><if pos:start="285:17" pos:end="297:17">if <condition pos:start="285:20" pos:end="285:52">(<expr pos:start="285:21" pos:end="285:51"><name pos:start="285:21" pos:end="285:25">gsize</name> <operator pos:start="285:27" pos:end="285:28">&gt;=</operator> <operator pos:start="285:30" pos:end="285:30">(</operator><name pos:start="285:31" pos:end="285:34">pos2</name> <operator pos:start="285:36" pos:end="285:36">+</operator> <literal type="number" pos:start="285:38" pos:end="285:40">8</literal> <operator pos:start="285:40" pos:end="285:40">-</operator> <name pos:start="285:42" pos:end="285:45">pos1</name> <operator pos:start="285:47" pos:end="285:47">+</operator> <literal type="number" pos:start="285:49" pos:end="285:50">24</literal><operator pos:start="285:51" pos:end="285:51">)</operator></expr>)</condition> <block pos:start="285:54" pos:end="297:17">{<block_content pos:start="287:21" pos:end="295:33">

                    <expr_stmt pos:start="287:21" pos:end="287:51"><expr pos:start="287:21" pos:end="287:50"><name pos:start="287:21" pos:end="287:35"><name pos:start="287:21" pos:end="287:26">asf_st</name><operator pos:start="287:27" pos:end="287:28">-&gt;</operator><name pos:start="287:29" pos:end="287:35">ds_span</name></name> <operator pos:start="287:37" pos:end="287:37">=</operator> <call pos:start="287:39" pos:end="287:50"><name pos:start="287:39" pos:end="287:46">get_byte</name><argument_list pos:start="287:47" pos:end="287:50">(<argument pos:start="287:48" pos:end="287:49"><expr pos:start="287:48" pos:end="287:49"><name pos:start="287:48" pos:end="287:49">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="289:21" pos:end="289:58"><expr pos:start="289:21" pos:end="289:57"><name pos:start="289:21" pos:end="289:42"><name pos:start="289:21" pos:end="289:26">asf_st</name><operator pos:start="289:27" pos:end="289:28">-&gt;</operator><name pos:start="289:29" pos:end="289:42">ds_packet_size</name></name> <operator pos:start="289:44" pos:end="289:44">=</operator> <call pos:start="289:46" pos:end="289:57"><name pos:start="289:46" pos:end="289:53">get_le16</name><argument_list pos:start="289:54" pos:end="289:57">(<argument pos:start="289:55" pos:end="289:56"><expr pos:start="289:55" pos:end="289:56"><name pos:start="289:55" pos:end="289:56">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:57"><expr pos:start="291:21" pos:end="291:56"><name pos:start="291:21" pos:end="291:41"><name pos:start="291:21" pos:end="291:26">asf_st</name><operator pos:start="291:27" pos:end="291:28">-&gt;</operator><name pos:start="291:29" pos:end="291:41">ds_chunk_size</name></name> <operator pos:start="291:43" pos:end="291:43">=</operator> <call pos:start="291:45" pos:end="291:56"><name pos:start="291:45" pos:end="291:52">get_le16</name><argument_list pos:start="291:53" pos:end="291:56">(<argument pos:start="291:54" pos:end="291:55"><expr pos:start="291:54" pos:end="291:55"><name pos:start="291:54" pos:end="291:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="293:21" pos:end="293:33"><expr pos:start="293:21" pos:end="293:32"><call pos:start="293:21" pos:end="293:32"><name pos:start="293:21" pos:end="293:28">get_le16</name><argument_list pos:start="293:29" pos:end="293:32">(<argument pos:start="293:30" pos:end="293:31"><expr pos:start="293:30" pos:end="293:31"><name pos:start="293:30" pos:end="293:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="293:35" pos:end="293:48">//ds_data_size</comment>

                    <expr_stmt pos:start="295:21" pos:end="295:33"><expr pos:start="295:21" pos:end="295:32"><call pos:start="295:21" pos:end="295:32"><name pos:start="295:21" pos:end="295:28">get_byte</name><argument_list pos:start="295:29" pos:end="295:32">(<argument pos:start="295:30" pos:end="295:31"><expr pos:start="295:30" pos:end="295:31"><name pos:start="295:30" pos:end="295:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="295:35" pos:end="295:51">//ds_silence_data</comment>

                </block_content>}</block></if></if_stmt>

                <comment type="line" pos:start="299:17" pos:end="299:73">//printf("Descrambling: ps:%d cs:%d ds:%d s:%d  sd:%d\n",</comment>

                <comment type="line" pos:start="301:17" pos:end="301:71">//       asf_st-&gt;ds_packet_size, asf_st-&gt;ds_chunk_size,</comment>

                <comment type="line" pos:start="303:17" pos:end="303:89">//       asf_st-&gt;ds_data_size, asf_st-&gt;ds_span, asf_st-&gt;ds_silence_data);</comment>

                <if_stmt pos:start="305:17" pos:end="315:17"><if pos:start="305:17" pos:end="315:17">if <condition pos:start="305:20" pos:end="305:40">(<expr pos:start="305:21" pos:end="305:39"><name pos:start="305:21" pos:end="305:35"><name pos:start="305:21" pos:end="305:26">asf_st</name><operator pos:start="305:27" pos:end="305:28">-&gt;</operator><name pos:start="305:29" pos:end="305:35">ds_span</name></name> <operator pos:start="305:37" pos:end="305:37">&gt;</operator> <literal type="number" pos:start="305:39" pos:end="305:39">1</literal></expr>)</condition> <block pos:start="305:42" pos:end="315:17">{<block_content pos:start="307:21" pos:end="313:44">

                    <if_stmt pos:start="307:21" pos:end="313:44"><if pos:start="307:21" pos:end="313:44">if <condition pos:start="307:24" pos:end="311:74">(<expr pos:start="307:25" pos:end="311:73"><operator pos:start="307:25" pos:end="307:25">!</operator><name pos:start="307:26" pos:end="307:46"><name pos:start="307:26" pos:end="307:31">asf_st</name><operator pos:start="307:32" pos:end="307:33">-&gt;</operator><name pos:start="307:34" pos:end="307:46">ds_chunk_size</name></name>

                        <operator pos:start="309:25" pos:end="309:26">||</operator> <operator pos:start="309:28" pos:end="309:28">(</operator><name pos:start="309:29" pos:end="309:50"><name pos:start="309:29" pos:end="309:34">asf_st</name><operator pos:start="309:35" pos:end="309:36">-&gt;</operator><name pos:start="309:37" pos:end="309:50">ds_packet_size</name></name><operator pos:start="309:51" pos:end="309:51">/</operator><name pos:start="309:52" pos:end="309:72"><name pos:start="309:52" pos:end="309:57">asf_st</name><operator pos:start="309:58" pos:end="309:59">-&gt;</operator><name pos:start="309:60" pos:end="309:72">ds_chunk_size</name></name> <operator pos:start="309:74" pos:end="309:75">&lt;=</operator> <literal type="number" pos:start="309:77" pos:end="309:77">1</literal><operator pos:start="309:78" pos:end="309:78">)</operator>

                        <operator pos:start="311:25" pos:end="311:26">||</operator> <name pos:start="311:28" pos:end="311:49"><name pos:start="311:28" pos:end="311:33">asf_st</name><operator pos:start="311:34" pos:end="311:35">-&gt;</operator><name pos:start="311:36" pos:end="311:49">ds_packet_size</name></name> <operator pos:start="311:51" pos:end="311:51">%</operator> <name pos:start="311:53" pos:end="311:73"><name pos:start="311:53" pos:end="311:58">asf_st</name><operator pos:start="311:59" pos:end="311:60">-&gt;</operator><name pos:start="311:61" pos:end="311:73">ds_chunk_size</name></name></expr>)</condition><block type="pseudo" pos:start="313:25" pos:end="313:44"><block_content pos:start="313:25" pos:end="313:44">

                        <expr_stmt pos:start="313:25" pos:end="313:44"><expr pos:start="313:25" pos:end="313:43"><name pos:start="313:25" pos:end="313:39"><name pos:start="313:25" pos:end="313:30">asf_st</name><operator pos:start="313:31" pos:end="313:32">-&gt;</operator><name pos:start="313:33" pos:end="313:39">ds_span</name></name> <operator pos:start="313:41" pos:end="313:41">=</operator> <literal type="number" pos:start="313:43" pos:end="313:43">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="313:46" pos:end="313:68">// disable descrambling</comment>

                </block_content>}</block></if></if_stmt>

                <switch pos:start="317:17" pos:end="353:17">switch <condition pos:start="317:24" pos:end="317:44">(<expr pos:start="317:25" pos:end="317:43"><name pos:start="317:25" pos:end="317:43"><name pos:start="317:25" pos:end="317:26">st</name><operator pos:start="317:27" pos:end="317:28">-&gt;</operator><name pos:start="317:29" pos:end="317:33">codec</name><operator pos:start="317:34" pos:end="317:35">-&gt;</operator><name pos:start="317:36" pos:end="317:43">codec_id</name></name></expr>)</condition> <block pos:start="317:46" pos:end="353:17">{<block_content pos:start="319:17" pos:end="351:26">

                <case pos:start="319:17" pos:end="319:34">case <expr pos:start="319:22" pos:end="319:33"><name pos:start="319:22" pos:end="319:33">CODEC_ID_MP3</name></expr>:</case>

                    <expr_stmt pos:start="321:21" pos:end="321:59"><expr pos:start="321:21" pos:end="321:58"><name pos:start="321:21" pos:end="321:41"><name pos:start="321:21" pos:end="321:22">st</name><operator pos:start="321:23" pos:end="321:24">-&gt;</operator><name pos:start="321:25" pos:end="321:29">codec</name><operator pos:start="321:30" pos:end="321:31">-&gt;</operator><name pos:start="321:32" pos:end="321:41">frame_size</name></name> <operator pos:start="321:43" pos:end="321:43">=</operator> <name pos:start="321:45" pos:end="321:58">MPA_FRAME_SIZE</name></expr>;</expr_stmt>

                    <break pos:start="323:21" pos:end="323:26">break;</break>

                <case pos:start="325:17" pos:end="325:40">case <expr pos:start="325:22" pos:end="325:39"><name pos:start="325:22" pos:end="325:39">CODEC_ID_PCM_S16LE</name></expr>:</case>

                <case pos:start="327:17" pos:end="327:40">case <expr pos:start="327:22" pos:end="327:39"><name pos:start="327:22" pos:end="327:39">CODEC_ID_PCM_S16BE</name></expr>:</case>

                <case pos:start="329:17" pos:end="329:40">case <expr pos:start="329:22" pos:end="329:39"><name pos:start="329:22" pos:end="329:39">CODEC_ID_PCM_U16LE</name></expr>:</case>

                <case pos:start="331:17" pos:end="331:40">case <expr pos:start="331:22" pos:end="331:39"><name pos:start="331:22" pos:end="331:39">CODEC_ID_PCM_U16BE</name></expr>:</case>

                <case pos:start="333:17" pos:end="333:37">case <expr pos:start="333:22" pos:end="333:36"><name pos:start="333:22" pos:end="333:36">CODEC_ID_PCM_S8</name></expr>:</case>

                <case pos:start="335:17" pos:end="335:37">case <expr pos:start="335:22" pos:end="335:36"><name pos:start="335:22" pos:end="335:36">CODEC_ID_PCM_U8</name></expr>:</case>

                <case pos:start="337:17" pos:end="337:39">case <expr pos:start="337:22" pos:end="337:38"><name pos:start="337:22" pos:end="337:38">CODEC_ID_PCM_ALAW</name></expr>:</case>

                <case pos:start="339:17" pos:end="339:40">case <expr pos:start="339:22" pos:end="339:39"><name pos:start="339:22" pos:end="339:39">CODEC_ID_PCM_MULAW</name></expr>:</case>

                    <expr_stmt pos:start="341:21" pos:end="341:46"><expr pos:start="341:21" pos:end="341:45"><name pos:start="341:21" pos:end="341:41"><name pos:start="341:21" pos:end="341:22">st</name><operator pos:start="341:23" pos:end="341:24">-&gt;</operator><name pos:start="341:25" pos:end="341:29">codec</name><operator pos:start="341:30" pos:end="341:31">-&gt;</operator><name pos:start="341:32" pos:end="341:41">frame_size</name></name> <operator pos:start="341:43" pos:end="341:43">=</operator> <literal type="number" pos:start="341:45" pos:end="341:45">1</literal></expr>;</expr_stmt>

                    <break pos:start="343:21" pos:end="343:26">break;</break>

                <default pos:start="345:17" pos:end="345:24">default:</default>

                    <comment type="block" pos:start="347:21" pos:end="347:79">/* This is probably wrong, but it prevents a crash later */</comment>

                    <expr_stmt pos:start="349:21" pos:end="349:46"><expr pos:start="349:21" pos:end="349:45"><name pos:start="349:21" pos:end="349:41"><name pos:start="349:21" pos:end="349:22">st</name><operator pos:start="349:23" pos:end="349:24">-&gt;</operator><name pos:start="349:25" pos:end="349:29">codec</name><operator pos:start="349:30" pos:end="349:31">-&gt;</operator><name pos:start="349:32" pos:end="349:41">frame_size</name></name> <operator pos:start="349:43" pos:end="349:43">=</operator> <literal type="number" pos:start="349:45" pos:end="349:45">1</literal></expr>;</expr_stmt>

                    <break pos:start="351:21" pos:end="351:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="355:15" pos:end="439:13">else if <condition pos:start="355:23" pos:end="355:50">(<expr pos:start="355:24" pos:end="355:49"><name pos:start="355:24" pos:end="355:27">type</name> <operator pos:start="355:29" pos:end="355:30">==</operator> <name pos:start="355:32" pos:end="355:49">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="355:52" pos:end="439:13">{<block_content pos:start="357:17" pos:end="437:64">

                <expr_stmt pos:start="357:17" pos:end="357:29"><expr pos:start="357:17" pos:end="357:28"><call pos:start="357:17" pos:end="357:28"><name pos:start="357:17" pos:end="357:24">get_le32</name><argument_list pos:start="357:25" pos:end="357:28">(<argument pos:start="357:26" pos:end="357:27"><expr pos:start="357:26" pos:end="357:27"><name pos:start="357:26" pos:end="357:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:29"><expr pos:start="359:17" pos:end="359:28"><call pos:start="359:17" pos:end="359:28"><name pos:start="359:17" pos:end="359:24">get_le32</name><argument_list pos:start="359:25" pos:end="359:28">(<argument pos:start="359:26" pos:end="359:27"><expr pos:start="359:26" pos:end="359:27"><name pos:start="359:26" pos:end="359:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="361:17" pos:end="361:29"><expr pos:start="361:17" pos:end="361:28"><call pos:start="361:17" pos:end="361:28"><name pos:start="361:17" pos:end="361:24">get_byte</name><argument_list pos:start="361:25" pos:end="361:28">(<argument pos:start="361:26" pos:end="361:27"><expr pos:start="361:26" pos:end="361:27"><name pos:start="361:26" pos:end="361:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:36"><expr pos:start="363:17" pos:end="363:35"><name pos:start="363:17" pos:end="363:20">size</name> <operator pos:start="363:22" pos:end="363:22">=</operator> <call pos:start="363:24" pos:end="363:35"><name pos:start="363:24" pos:end="363:31">get_le16</name><argument_list pos:start="363:32" pos:end="363:35">(<argument pos:start="363:33" pos:end="363:34"><expr pos:start="363:33" pos:end="363:34"><name pos:start="363:33" pos:end="363:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="363:38" pos:end="363:47">/* size */</comment>

                <expr_stmt pos:start="365:17" pos:end="365:36"><expr pos:start="365:17" pos:end="365:35"><name pos:start="365:17" pos:end="365:21">sizeX</name><operator pos:start="365:22" pos:end="365:22">=</operator> <call pos:start="365:24" pos:end="365:35"><name pos:start="365:24" pos:end="365:31">get_le32</name><argument_list pos:start="365:32" pos:end="365:35">(<argument pos:start="365:33" pos:end="365:34"><expr pos:start="365:33" pos:end="365:34"><name pos:start="365:33" pos:end="365:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="365:38" pos:end="365:47">/* size */</comment>

                <expr_stmt pos:start="367:17" pos:end="367:48"><expr pos:start="367:17" pos:end="367:47"><name pos:start="367:17" pos:end="367:32"><name pos:start="367:17" pos:end="367:18">st</name><operator pos:start="367:19" pos:end="367:20">-&gt;</operator><name pos:start="367:21" pos:end="367:25">codec</name><operator pos:start="367:26" pos:end="367:27">-&gt;</operator><name pos:start="367:28" pos:end="367:32">width</name></name> <operator pos:start="367:34" pos:end="367:34">=</operator> <call pos:start="367:36" pos:end="367:47"><name pos:start="367:36" pos:end="367:43">get_le32</name><argument_list pos:start="367:44" pos:end="367:47">(<argument pos:start="367:45" pos:end="367:46"><expr pos:start="367:45" pos:end="367:46"><name pos:start="367:45" pos:end="367:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:49"><expr pos:start="369:17" pos:end="369:48"><name pos:start="369:17" pos:end="369:33"><name pos:start="369:17" pos:end="369:18">st</name><operator pos:start="369:19" pos:end="369:20">-&gt;</operator><name pos:start="369:21" pos:end="369:25">codec</name><operator pos:start="369:26" pos:end="369:27">-&gt;</operator><name pos:start="369:28" pos:end="369:33">height</name></name> <operator pos:start="369:35" pos:end="369:35">=</operator> <call pos:start="369:37" pos:end="369:48"><name pos:start="369:37" pos:end="369:44">get_le32</name><argument_list pos:start="369:45" pos:end="369:48">(<argument pos:start="369:46" pos:end="369:47"><expr pos:start="369:46" pos:end="369:47"><name pos:start="369:46" pos:end="369:47">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="371:17" pos:end="371:43">/* not available for asf */</comment>

                <expr_stmt pos:start="373:17" pos:end="373:29"><expr pos:start="373:17" pos:end="373:28"><call pos:start="373:17" pos:end="373:28"><name pos:start="373:17" pos:end="373:24">get_le16</name><argument_list pos:start="373:25" pos:end="373:28">(<argument pos:start="373:26" pos:end="373:27"><expr pos:start="373:26" pos:end="373:27"><name pos:start="373:26" pos:end="373:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="373:31" pos:end="373:41">/* panes */</comment>

                <expr_stmt pos:start="375:17" pos:end="375:64"><expr pos:start="375:17" pos:end="375:63"><name pos:start="375:17" pos:end="375:48"><name pos:start="375:17" pos:end="375:18">st</name><operator pos:start="375:19" pos:end="375:20">-&gt;</operator><name pos:start="375:21" pos:end="375:25">codec</name><operator pos:start="375:26" pos:end="375:27">-&gt;</operator><name pos:start="375:28" pos:end="375:48">bits_per_coded_sample</name></name> <operator pos:start="375:50" pos:end="375:50">=</operator> <call pos:start="375:52" pos:end="375:63"><name pos:start="375:52" pos:end="375:59">get_le16</name><argument_list pos:start="375:60" pos:end="375:63">(<argument pos:start="375:61" pos:end="375:62"><expr pos:start="375:61" pos:end="375:62"><name pos:start="375:61" pos:end="375:62">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="375:66" pos:end="375:76">/* depth */</comment>

                <expr_stmt pos:start="377:17" pos:end="377:36"><expr pos:start="377:17" pos:end="377:35"><name pos:start="377:17" pos:end="377:20">tag1</name> <operator pos:start="377:22" pos:end="377:22">=</operator> <call pos:start="377:24" pos:end="377:35"><name pos:start="377:24" pos:end="377:31">get_le32</name><argument_list pos:start="377:32" pos:end="377:35">(<argument pos:start="377:33" pos:end="377:34"><expr pos:start="377:33" pos:end="377:34"><name pos:start="377:33" pos:end="377:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="379:17" pos:end="379:34"><expr pos:start="379:17" pos:end="379:33"><call pos:start="379:17" pos:end="379:33"><name pos:start="379:17" pos:end="379:25">url_fskip</name><argument_list pos:start="379:26" pos:end="379:33">(<argument pos:start="379:27" pos:end="379:28"><expr pos:start="379:27" pos:end="379:28"><name pos:start="379:27" pos:end="379:28">pb</name></expr></argument>, <argument pos:start="379:31" pos:end="379:32"><expr pos:start="379:31" pos:end="379:32"><literal type="number" pos:start="379:31" pos:end="379:32">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="381:1" pos:end="381:98">//                av_log(s, AV_LOG_DEBUG, "size:%d tsize:%d sizeX:%d\n", size, total_size, sizeX);</comment>

                <expr_stmt pos:start="383:17" pos:end="383:28"><expr pos:start="383:17" pos:end="383:27"><name pos:start="383:17" pos:end="383:20">size</name><operator pos:start="383:21" pos:end="383:21">=</operator> <name pos:start="383:23" pos:end="383:27">sizeX</name></expr>;</expr_stmt>

                <if_stmt pos:start="385:17" pos:end="393:17"><if pos:start="385:17" pos:end="393:17">if <condition pos:start="385:20" pos:end="385:30">(<expr pos:start="385:21" pos:end="385:29"><name pos:start="385:21" pos:end="385:24">size</name> <operator pos:start="385:26" pos:end="385:26">&gt;</operator> <literal type="number" pos:start="385:28" pos:end="385:29">40</literal></expr>)</condition> <block pos:start="385:32" pos:end="393:17">{<block_content pos:start="387:21" pos:end="391:84">

                    <expr_stmt pos:start="387:21" pos:end="387:58"><expr pos:start="387:21" pos:end="387:57"><name pos:start="387:21" pos:end="387:45"><name pos:start="387:21" pos:end="387:22">st</name><operator pos:start="387:23" pos:end="387:24">-&gt;</operator><name pos:start="387:25" pos:end="387:29">codec</name><operator pos:start="387:30" pos:end="387:31">-&gt;</operator><name pos:start="387:32" pos:end="387:45">extradata_size</name></name> <operator pos:start="387:47" pos:end="387:47">=</operator> <name pos:start="387:49" pos:end="387:52">size</name> <operator pos:start="387:54" pos:end="387:54">-</operator> <literal type="number" pos:start="387:56" pos:end="387:57">40</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="389:21" pos:end="389:112"><expr pos:start="389:21" pos:end="389:111"><name pos:start="389:21" pos:end="389:40"><name pos:start="389:21" pos:end="389:22">st</name><operator pos:start="389:23" pos:end="389:24">-&gt;</operator><name pos:start="389:25" pos:end="389:29">codec</name><operator pos:start="389:30" pos:end="389:31">-&gt;</operator><name pos:start="389:32" pos:end="389:40">extradata</name></name> <operator pos:start="389:42" pos:end="389:42">=</operator> <call pos:start="389:44" pos:end="389:111"><name pos:start="389:44" pos:end="389:53">av_mallocz</name><argument_list pos:start="389:54" pos:end="389:111">(<argument pos:start="389:55" pos:end="389:110"><expr pos:start="389:55" pos:end="389:110"><name pos:start="389:55" pos:end="389:79"><name pos:start="389:55" pos:end="389:56">st</name><operator pos:start="389:57" pos:end="389:58">-&gt;</operator><name pos:start="389:59" pos:end="389:63">codec</name><operator pos:start="389:64" pos:end="389:65">-&gt;</operator><name pos:start="389:66" pos:end="389:79">extradata_size</name></name> <operator pos:start="389:81" pos:end="389:81">+</operator> <name pos:start="389:83" pos:end="389:110">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="391:21" pos:end="391:84"><expr pos:start="391:21" pos:end="391:83"><call pos:start="391:21" pos:end="391:83"><name pos:start="391:21" pos:end="391:30">get_buffer</name><argument_list pos:start="391:31" pos:end="391:83">(<argument pos:start="391:32" pos:end="391:33"><expr pos:start="391:32" pos:end="391:33"><name pos:start="391:32" pos:end="391:33">pb</name></expr></argument>, <argument pos:start="391:36" pos:end="391:55"><expr pos:start="391:36" pos:end="391:55"><name pos:start="391:36" pos:end="391:55"><name pos:start="391:36" pos:end="391:37">st</name><operator pos:start="391:38" pos:end="391:39">-&gt;</operator><name pos:start="391:40" pos:end="391:44">codec</name><operator pos:start="391:45" pos:end="391:46">-&gt;</operator><name pos:start="391:47" pos:end="391:55">extradata</name></name></expr></argument>, <argument pos:start="391:58" pos:end="391:82"><expr pos:start="391:58" pos:end="391:82"><name pos:start="391:58" pos:end="391:82"><name pos:start="391:58" pos:end="391:59">st</name><operator pos:start="391:60" pos:end="391:61">-&gt;</operator><name pos:start="391:62" pos:end="391:66">codec</name><operator pos:start="391:67" pos:end="391:68">-&gt;</operator><name pos:start="391:69" pos:end="391:82">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="397:17" pos:end="397:64">/* Extract palette from extradata if bpp &lt;= 8 */</comment>

                <comment type="block" pos:start="399:17" pos:end="399:76">/* This code assumes that extradata contains only palette */</comment>

                <comment type="block" pos:start="401:17" pos:end="401:80">/* This is true for all paletted codecs implemented in ffmpeg */</comment>

                <if_stmt pos:start="403:17" pos:end="423:17"><if pos:start="403:17" pos:end="423:17">if <condition pos:start="403:20" pos:end="403:89">(<expr pos:start="403:21" pos:end="403:88"><name pos:start="403:21" pos:end="403:45"><name pos:start="403:21" pos:end="403:22">st</name><operator pos:start="403:23" pos:end="403:24">-&gt;</operator><name pos:start="403:25" pos:end="403:29">codec</name><operator pos:start="403:30" pos:end="403:31">-&gt;</operator><name pos:start="403:32" pos:end="403:45">extradata_size</name></name> <operator pos:start="403:47" pos:end="403:48">&amp;&amp;</operator> <operator pos:start="403:50" pos:end="403:50">(</operator><name pos:start="403:51" pos:end="403:82"><name pos:start="403:51" pos:end="403:52">st</name><operator pos:start="403:53" pos:end="403:54">-&gt;</operator><name pos:start="403:55" pos:end="403:59">codec</name><operator pos:start="403:60" pos:end="403:61">-&gt;</operator><name pos:start="403:62" pos:end="403:82">bits_per_coded_sample</name></name> <operator pos:start="403:84" pos:end="403:85">&lt;=</operator> <literal type="number" pos:start="403:87" pos:end="403:87">8</literal><operator pos:start="403:88" pos:end="403:88">)</operator></expr>)</condition> <block pos:start="403:91" pos:end="423:17">{<block_content pos:start="405:21" pos:end="421:60">

                    <expr_stmt pos:start="405:21" pos:end="408:0"><expr pos:start="405:21" pos:end="405:77"><name pos:start="405:21" pos:end="405:38"><name pos:start="405:21" pos:end="405:22">st</name><operator pos:start="405:23" pos:end="405:24">-&gt;</operator><name pos:start="405:25" pos:end="405:29">codec</name><operator pos:start="405:30" pos:end="405:31">-&gt;</operator><name pos:start="405:32" pos:end="405:38">palctrl</name></name> <operator pos:start="405:40" pos:end="405:40">=</operator> <call pos:start="405:42" pos:end="405:77"><name pos:start="405:42" pos:end="405:51">av_mallocz</name><argument_list pos:start="405:52" pos:end="405:77">(<argument pos:start="405:53" pos:end="405:76"><expr pos:start="405:53" pos:end="405:76"><sizeof pos:start="405:53" pos:end="405:76">sizeof<argument_list pos:start="405:59" pos:end="405:76">(<argument pos:start="405:60" pos:end="405:75"><expr pos:start="405:60" pos:end="405:75"><name pos:start="405:60" pos:end="405:75">AVPaletteControl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="407:1" pos:end="407:18">#<cpp:directive pos:start="407:2" pos:end="407:3">if</cpp:directive> <expr pos:start="407:5" pos:end="407:18"><name pos:start="407:5" pos:end="407:18">HAVE_BIGENDIAN</name></expr></cpp:if>

                    <for pos:start="409:21" pos:end="414:0">for <control pos:start="409:25" pos:end="409:92">(<init pos:start="409:26" pos:end="409:31"><expr pos:start="409:26" pos:end="409:30"><name pos:start="409:26" pos:end="409:26">i</name> <operator pos:start="409:28" pos:end="409:28">=</operator> <literal type="number" pos:start="409:30" pos:end="409:30">0</literal></expr>;</init> <condition pos:start="409:33" pos:end="409:87"><expr pos:start="409:33" pos:end="409:86"><name pos:start="409:33" pos:end="409:33">i</name> <operator pos:start="409:35" pos:end="409:35">&lt;</operator> <call pos:start="409:37" pos:end="409:84"><name pos:start="409:37" pos:end="409:41">FFMIN</name><argument_list pos:start="409:42" pos:end="409:84">(<argument pos:start="409:43" pos:end="409:67"><expr pos:start="409:43" pos:end="409:67"><name pos:start="409:43" pos:end="409:67"><name pos:start="409:43" pos:end="409:44">st</name><operator pos:start="409:45" pos:end="409:46">-&gt;</operator><name pos:start="409:47" pos:end="409:51">codec</name><operator pos:start="409:52" pos:end="409:53">-&gt;</operator><name pos:start="409:54" pos:end="409:67">extradata_size</name></name></expr></argument>, <argument pos:start="409:70" pos:end="409:83"><expr pos:start="409:70" pos:end="409:83"><name pos:start="409:70" pos:end="409:83">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="409:85" pos:end="409:85">/</operator><literal type="number" pos:start="409:86" pos:end="409:86">4</literal></expr>;</condition> <incr pos:start="409:89" pos:end="409:91"><expr pos:start="409:89" pos:end="409:91"><name pos:start="409:89" pos:end="409:89">i</name><operator pos:start="409:90" pos:end="409:91">++</operator></expr></incr>)</control><block type="pseudo" pos:start="411:25" pos:end="414:0"><block_content pos:start="411:25" pos:end="414:0">

                        <expr_stmt pos:start="411:25" pos:end="414:0"><expr pos:start="411:25" pos:end="411:103"><name pos:start="411:25" pos:end="411:54"><name pos:start="411:25" pos:end="411:26">st</name><operator pos:start="411:27" pos:end="411:28">-&gt;</operator><name pos:start="411:29" pos:end="411:33">codec</name><operator pos:start="411:34" pos:end="411:35">-&gt;</operator><name pos:start="411:36" pos:end="411:42">palctrl</name><operator pos:start="411:43" pos:end="411:44">-&gt;</operator><name pos:start="411:45" pos:end="411:51">palette</name><index pos:start="411:52" pos:end="411:54">[<expr pos:start="411:53" pos:end="411:53"><name pos:start="411:53" pos:end="411:53">i</name></expr>]</index></name> <operator pos:start="411:56" pos:end="411:56">=</operator> <call pos:start="411:58" pos:end="411:103"><name pos:start="411:58" pos:end="411:65">bswap_32</name><argument_list pos:start="411:66" pos:end="411:103">(<argument pos:start="411:67" pos:end="411:102"><expr pos:start="411:67" pos:end="411:102"><operator pos:start="411:67" pos:end="411:67">(</operator><operator pos:start="411:68" pos:end="411:68">(</operator><name pos:start="411:69" pos:end="411:76">uint32_t</name><operator pos:start="411:77" pos:end="411:77">*</operator><operator pos:start="411:78" pos:end="411:78">)</operator><name pos:start="411:79" pos:end="411:98"><name pos:start="411:79" pos:end="411:80">st</name><operator pos:start="411:81" pos:end="411:82">-&gt;</operator><name pos:start="411:83" pos:end="411:87">codec</name><operator pos:start="411:88" pos:end="411:89">-&gt;</operator><name pos:start="411:90" pos:end="411:98">extradata</name></name><operator pos:start="411:99" pos:end="411:99">)</operator><index pos:start="411:100" pos:end="411:102">[<expr pos:start="411:101" pos:end="411:101"><name pos:start="411:101" pos:end="411:101">i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:else pos:start="413:1" pos:end="413:5">#<cpp:directive pos:start="413:2" pos:end="413:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="415:21" pos:end="420:0"><expr pos:start="415:21" pos:end="417:76"><call pos:start="415:21" pos:end="417:76"><name pos:start="415:21" pos:end="415:26">memcpy</name><argument_list pos:start="415:27" pos:end="417:76">(<argument pos:start="415:28" pos:end="415:54"><expr pos:start="415:28" pos:end="415:54"><name pos:start="415:28" pos:end="415:54"><name pos:start="415:28" pos:end="415:29">st</name><operator pos:start="415:30" pos:end="415:31">-&gt;</operator><name pos:start="415:32" pos:end="415:36">codec</name><operator pos:start="415:37" pos:end="415:38">-&gt;</operator><name pos:start="415:39" pos:end="415:45">palctrl</name><operator pos:start="415:46" pos:end="415:47">-&gt;</operator><name pos:start="415:48" pos:end="415:54">palette</name></name></expr></argument>, <argument pos:start="415:57" pos:end="415:76"><expr pos:start="415:57" pos:end="415:76"><name pos:start="415:57" pos:end="415:76"><name pos:start="415:57" pos:end="415:58">st</name><operator pos:start="415:59" pos:end="415:60">-&gt;</operator><name pos:start="415:61" pos:end="415:65">codec</name><operator pos:start="415:66" pos:end="415:67">-&gt;</operator><name pos:start="415:68" pos:end="415:76">extradata</name></name></expr></argument>,

                           <argument pos:start="417:28" pos:end="417:75"><expr pos:start="417:28" pos:end="417:75"><call pos:start="417:28" pos:end="417:75"><name pos:start="417:28" pos:end="417:32">FFMIN</name><argument_list pos:start="417:33" pos:end="417:75">(<argument pos:start="417:34" pos:end="417:58"><expr pos:start="417:34" pos:end="417:58"><name pos:start="417:34" pos:end="417:58"><name pos:start="417:34" pos:end="417:35">st</name><operator pos:start="417:36" pos:end="417:37">-&gt;</operator><name pos:start="417:38" pos:end="417:42">codec</name><operator pos:start="417:43" pos:end="417:44">-&gt;</operator><name pos:start="417:45" pos:end="417:58">extradata_size</name></name></expr></argument>, <argument pos:start="417:61" pos:end="417:74"><expr pos:start="417:61" pos:end="417:74"><name pos:start="417:61" pos:end="417:74">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="419:1" pos:end="419:6">#<cpp:directive pos:start="419:2" pos:end="419:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="421:21" pos:end="421:60"><expr pos:start="421:21" pos:end="421:59"><name pos:start="421:21" pos:end="421:55"><name pos:start="421:21" pos:end="421:22">st</name><operator pos:start="421:23" pos:end="421:24">-&gt;</operator><name pos:start="421:25" pos:end="421:29">codec</name><operator pos:start="421:30" pos:end="421:31">-&gt;</operator><name pos:start="421:32" pos:end="421:38">palctrl</name><operator pos:start="421:39" pos:end="421:40">-&gt;</operator><name pos:start="421:41" pos:end="421:55">palette_changed</name></name> <operator pos:start="421:57" pos:end="421:57">=</operator> <literal type="number" pos:start="421:59" pos:end="421:59">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="427:17" pos:end="427:44"><expr pos:start="427:17" pos:end="427:43"><name pos:start="427:17" pos:end="427:36"><name pos:start="427:17" pos:end="427:18">st</name><operator pos:start="427:19" pos:end="427:20">-&gt;</operator><name pos:start="427:21" pos:end="427:25">codec</name><operator pos:start="427:26" pos:end="427:27">-&gt;</operator><name pos:start="427:28" pos:end="427:36">codec_tag</name></name> <operator pos:start="427:38" pos:end="427:38">=</operator> <name pos:start="427:40" pos:end="427:43">tag1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="429:17" pos:end="429:79"><expr pos:start="429:17" pos:end="429:78"><name pos:start="429:17" pos:end="429:35"><name pos:start="429:17" pos:end="429:18">st</name><operator pos:start="429:19" pos:end="429:20">-&gt;</operator><name pos:start="429:21" pos:end="429:25">codec</name><operator pos:start="429:26" pos:end="429:27">-&gt;</operator><name pos:start="429:28" pos:end="429:35">codec_id</name></name> <operator pos:start="429:37" pos:end="429:37">=</operator> <call pos:start="429:39" pos:end="429:78"><name pos:start="429:39" pos:end="429:53">ff_codec_get_id</name><argument_list pos:start="429:54" pos:end="429:78">(<argument pos:start="429:55" pos:end="429:71"><expr pos:start="429:55" pos:end="429:71"><name pos:start="429:55" pos:end="429:71">ff_codec_bmp_tags</name></expr></argument>, <argument pos:start="429:74" pos:end="429:77"><expr pos:start="429:74" pos:end="429:77"><name pos:start="429:74" pos:end="429:77">tag1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="431:17" pos:end="433:59"><if pos:start="431:17" pos:end="433:59">if<condition pos:start="431:19" pos:end="431:53">(<expr pos:start="431:20" pos:end="431:52"><name pos:start="431:20" pos:end="431:23">tag1</name> <operator pos:start="431:25" pos:end="431:26">==</operator> <call pos:start="431:28" pos:end="431:52"><name pos:start="431:28" pos:end="431:32">MKTAG</name><argument_list pos:start="431:33" pos:end="431:52">(<argument pos:start="431:34" pos:end="431:36"><expr pos:start="431:34" pos:end="431:36"><literal type="char" pos:start="431:34" pos:end="431:36">'D'</literal></expr></argument>, <argument pos:start="431:39" pos:end="431:41"><expr pos:start="431:39" pos:end="431:41"><literal type="char" pos:start="431:39" pos:end="431:41">'V'</literal></expr></argument>, <argument pos:start="431:44" pos:end="431:46"><expr pos:start="431:44" pos:end="431:46"><literal type="char" pos:start="431:44" pos:end="431:46">'R'</literal></expr></argument>, <argument pos:start="431:49" pos:end="431:51"><expr pos:start="431:49" pos:end="431:51"><literal type="char" pos:start="431:49" pos:end="431:51">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="433:21" pos:end="433:59"><block_content pos:start="433:21" pos:end="433:59">

                    <expr_stmt pos:start="433:21" pos:end="433:59"><expr pos:start="433:21" pos:end="433:58"><name pos:start="433:21" pos:end="433:36"><name pos:start="433:21" pos:end="433:22">st</name><operator pos:start="433:23" pos:end="433:24">-&gt;</operator><name pos:start="433:25" pos:end="433:36">need_parsing</name></name> <operator pos:start="433:38" pos:end="433:38">=</operator> <name pos:start="433:40" pos:end="433:58">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="435:17" pos:end="437:64"><if pos:start="435:17" pos:end="437:64">if<condition pos:start="435:19" pos:end="435:56">(<expr pos:start="435:20" pos:end="435:55"><name pos:start="435:20" pos:end="435:38"><name pos:start="435:20" pos:end="435:21">st</name><operator pos:start="435:22" pos:end="435:23">-&gt;</operator><name pos:start="435:24" pos:end="435:28">codec</name><operator pos:start="435:29" pos:end="435:30">-&gt;</operator><name pos:start="435:31" pos:end="435:38">codec_id</name></name> <operator pos:start="435:40" pos:end="435:41">==</operator> <name pos:start="435:43" pos:end="435:55">CODEC_ID_H264</name></expr>)</condition><block type="pseudo" pos:start="437:21" pos:end="437:64"><block_content pos:start="437:21" pos:end="437:64">

                    <expr_stmt pos:start="437:21" pos:end="437:64"><expr pos:start="437:21" pos:end="437:63"><name pos:start="437:21" pos:end="437:36"><name pos:start="437:21" pos:end="437:22">st</name><operator pos:start="437:23" pos:end="437:24">-&gt;</operator><name pos:start="437:25" pos:end="437:36">need_parsing</name></name> <operator pos:start="437:38" pos:end="437:38">=</operator> <name pos:start="437:40" pos:end="437:63">AVSTREAM_PARSE_FULL_ONCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="441:13" pos:end="441:33"><expr pos:start="441:13" pos:end="441:32"><name pos:start="441:13" pos:end="441:16">pos2</name> <operator pos:start="441:18" pos:end="441:18">=</operator> <call pos:start="441:20" pos:end="441:32"><name pos:start="441:20" pos:end="441:28">url_ftell</name><argument_list pos:start="441:29" pos:end="441:32">(<argument pos:start="441:30" pos:end="441:31"><expr pos:start="441:30" pos:end="441:31"><name pos:start="441:30" pos:end="441:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:54"><expr pos:start="443:13" pos:end="443:53"><call pos:start="443:13" pos:end="443:53"><name pos:start="443:13" pos:end="443:21">url_fskip</name><argument_list pos:start="443:22" pos:end="443:53">(<argument pos:start="443:23" pos:end="443:24"><expr pos:start="443:23" pos:end="443:24"><name pos:start="443:23" pos:end="443:24">pb</name></expr></argument>, <argument pos:start="443:27" pos:end="443:52"><expr pos:start="443:27" pos:end="443:52"><name pos:start="443:27" pos:end="443:31">gsize</name> <operator pos:start="443:33" pos:end="443:33">-</operator> <operator pos:start="443:35" pos:end="443:35">(</operator><name pos:start="443:36" pos:end="443:39">pos2</name> <operator pos:start="443:41" pos:end="443:41">-</operator> <name pos:start="443:43" pos:end="443:46">pos1</name> <operator pos:start="443:48" pos:end="443:48">+</operator> <literal type="number" pos:start="443:50" pos:end="443:51">24</literal><operator pos:start="443:52" pos:end="443:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="445:11" pos:end="471:9">else if <condition pos:start="445:19" pos:end="445:56">(<expr pos:start="445:20" pos:end="445:55"><operator pos:start="445:20" pos:end="445:20">!</operator><call pos:start="445:21" pos:end="445:55"><name pos:start="445:21" pos:end="445:27">guidcmp</name><argument_list pos:start="445:28" pos:end="445:55">(<argument pos:start="445:29" pos:end="445:30"><expr pos:start="445:29" pos:end="445:30"><operator pos:start="445:29" pos:end="445:29">&amp;</operator><name pos:start="445:30" pos:end="445:30">g</name></expr></argument>, <argument pos:start="445:33" pos:end="445:54"><expr pos:start="445:33" pos:end="445:54"><operator pos:start="445:33" pos:end="445:33">&amp;</operator><name pos:start="445:34" pos:end="445:54">ff_asf_comment_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="445:58" pos:end="471:9">{<block_content pos:start="447:13" pos:end="469:32">

            <decl_stmt pos:start="447:13" pos:end="447:45"><decl pos:start="447:13" pos:end="447:20"><type pos:start="447:13" pos:end="447:15"><name pos:start="447:13" pos:end="447:15">int</name></type> <name pos:start="447:17" pos:end="447:20">len1</name></decl>, <decl pos:start="447:23" pos:end="447:26"><type ref="prev" pos:start="447:13" pos:end="447:15"/><name pos:start="447:23" pos:end="447:26">len2</name></decl>, <decl pos:start="447:29" pos:end="447:32"><type ref="prev" pos:start="447:13" pos:end="447:15"/><name pos:start="447:29" pos:end="447:32">len3</name></decl>, <decl pos:start="447:35" pos:end="447:38"><type ref="prev" pos:start="447:13" pos:end="447:15"/><name pos:start="447:35" pos:end="447:38">len4</name></decl>, <decl pos:start="447:41" pos:end="447:44"><type ref="prev" pos:start="447:13" pos:end="447:15"/><name pos:start="447:41" pos:end="447:44">len5</name></decl>;</decl_stmt>



            <expr_stmt pos:start="451:13" pos:end="451:32"><expr pos:start="451:13" pos:end="451:31"><name pos:start="451:13" pos:end="451:16">len1</name> <operator pos:start="451:18" pos:end="451:18">=</operator> <call pos:start="451:20" pos:end="451:31"><name pos:start="451:20" pos:end="451:27">get_le16</name><argument_list pos:start="451:28" pos:end="451:31">(<argument pos:start="451:29" pos:end="451:30"><expr pos:start="451:29" pos:end="451:30"><name pos:start="451:29" pos:end="451:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:32"><expr pos:start="453:13" pos:end="453:31"><name pos:start="453:13" pos:end="453:16">len2</name> <operator pos:start="453:18" pos:end="453:18">=</operator> <call pos:start="453:20" pos:end="453:31"><name pos:start="453:20" pos:end="453:27">get_le16</name><argument_list pos:start="453:28" pos:end="453:31">(<argument pos:start="453:29" pos:end="453:30"><expr pos:start="453:29" pos:end="453:30"><name pos:start="453:29" pos:end="453:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:32"><expr pos:start="455:13" pos:end="455:31"><name pos:start="455:13" pos:end="455:16">len3</name> <operator pos:start="455:18" pos:end="455:18">=</operator> <call pos:start="455:20" pos:end="455:31"><name pos:start="455:20" pos:end="455:27">get_le16</name><argument_list pos:start="455:28" pos:end="455:31">(<argument pos:start="455:29" pos:end="455:30"><expr pos:start="455:29" pos:end="455:30"><name pos:start="455:29" pos:end="455:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:32"><expr pos:start="457:13" pos:end="457:31"><name pos:start="457:13" pos:end="457:16">len4</name> <operator pos:start="457:18" pos:end="457:18">=</operator> <call pos:start="457:20" pos:end="457:31"><name pos:start="457:20" pos:end="457:27">get_le16</name><argument_list pos:start="457:28" pos:end="457:31">(<argument pos:start="457:29" pos:end="457:30"><expr pos:start="457:29" pos:end="457:30"><name pos:start="457:29" pos:end="457:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:32"><expr pos:start="459:13" pos:end="459:31"><name pos:start="459:13" pos:end="459:16">len5</name> <operator pos:start="459:18" pos:end="459:18">=</operator> <call pos:start="459:20" pos:end="459:31"><name pos:start="459:20" pos:end="459:27">get_le16</name><argument_list pos:start="459:28" pos:end="459:31">(<argument pos:start="459:29" pos:end="459:30"><expr pos:start="459:29" pos:end="459:30"><name pos:start="459:29" pos:end="459:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:45"><expr pos:start="461:13" pos:end="461:44"><call pos:start="461:13" pos:end="461:44"><name pos:start="461:13" pos:end="461:19">get_tag</name><argument_list pos:start="461:20" pos:end="461:44">(<argument pos:start="461:21" pos:end="461:21"><expr pos:start="461:21" pos:end="461:21"><name pos:start="461:21" pos:end="461:21">s</name></expr></argument>, <argument pos:start="461:24" pos:end="461:30"><expr pos:start="461:24" pos:end="461:30"><literal type="string" pos:start="461:24" pos:end="461:30">"title"</literal></expr></argument>    , <argument pos:start="461:37" pos:end="461:37"><expr pos:start="461:37" pos:end="461:37"><literal type="number" pos:start="461:37" pos:end="461:37">0</literal></expr></argument>, <argument pos:start="461:40" pos:end="461:43"><expr pos:start="461:40" pos:end="461:43"><name pos:start="461:40" pos:end="461:43">len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="463:13" pos:end="463:45"><expr pos:start="463:13" pos:end="463:44"><call pos:start="463:13" pos:end="463:44"><name pos:start="463:13" pos:end="463:19">get_tag</name><argument_list pos:start="463:20" pos:end="463:44">(<argument pos:start="463:21" pos:end="463:21"><expr pos:start="463:21" pos:end="463:21"><name pos:start="463:21" pos:end="463:21">s</name></expr></argument>, <argument pos:start="463:24" pos:end="463:31"><expr pos:start="463:24" pos:end="463:31"><literal type="string" pos:start="463:24" pos:end="463:31">"author"</literal></expr></argument>   , <argument pos:start="463:37" pos:end="463:37"><expr pos:start="463:37" pos:end="463:37"><literal type="number" pos:start="463:37" pos:end="463:37">0</literal></expr></argument>, <argument pos:start="463:40" pos:end="463:43"><expr pos:start="463:40" pos:end="463:43"><name pos:start="463:40" pos:end="463:43">len2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="465:13" pos:end="465:45"><expr pos:start="465:13" pos:end="465:44"><call pos:start="465:13" pos:end="465:44"><name pos:start="465:13" pos:end="465:19">get_tag</name><argument_list pos:start="465:20" pos:end="465:44">(<argument pos:start="465:21" pos:end="465:21"><expr pos:start="465:21" pos:end="465:21"><name pos:start="465:21" pos:end="465:21">s</name></expr></argument>, <argument pos:start="465:24" pos:end="465:34"><expr pos:start="465:24" pos:end="465:34"><literal type="string" pos:start="465:24" pos:end="465:34">"copyright"</literal></expr></argument>, <argument pos:start="465:37" pos:end="465:37"><expr pos:start="465:37" pos:end="465:37"><literal type="number" pos:start="465:37" pos:end="465:37">0</literal></expr></argument>, <argument pos:start="465:40" pos:end="465:43"><expr pos:start="465:40" pos:end="465:43"><name pos:start="465:40" pos:end="465:43">len3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="467:13" pos:end="467:45"><expr pos:start="467:13" pos:end="467:44"><call pos:start="467:13" pos:end="467:44"><name pos:start="467:13" pos:end="467:19">get_tag</name><argument_list pos:start="467:20" pos:end="467:44">(<argument pos:start="467:21" pos:end="467:21"><expr pos:start="467:21" pos:end="467:21"><name pos:start="467:21" pos:end="467:21">s</name></expr></argument>, <argument pos:start="467:24" pos:end="467:32"><expr pos:start="467:24" pos:end="467:32"><literal type="string" pos:start="467:24" pos:end="467:32">"comment"</literal></expr></argument>  , <argument pos:start="467:37" pos:end="467:37"><expr pos:start="467:37" pos:end="467:37"><literal type="number" pos:start="467:37" pos:end="467:37">0</literal></expr></argument>, <argument pos:start="467:40" pos:end="467:43"><expr pos:start="467:40" pos:end="467:43"><name pos:start="467:40" pos:end="467:43">len4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="469:32"><expr pos:start="469:13" pos:end="469:31"><call pos:start="469:13" pos:end="469:31"><name pos:start="469:13" pos:end="469:21">url_fskip</name><argument_list pos:start="469:22" pos:end="469:31">(<argument pos:start="469:23" pos:end="469:24"><expr pos:start="469:23" pos:end="469:24"><name pos:start="469:23" pos:end="469:24">pb</name></expr></argument>, <argument pos:start="469:27" pos:end="469:30"><expr pos:start="469:27" pos:end="469:30"><name pos:start="469:27" pos:end="469:30">len5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="471:11" pos:end="501:9">else if <condition pos:start="471:19" pos:end="471:54">(<expr pos:start="471:20" pos:end="471:53"><operator pos:start="471:20" pos:end="471:20">!</operator><call pos:start="471:21" pos:end="471:53"><name pos:start="471:21" pos:end="471:27">guidcmp</name><argument_list pos:start="471:28" pos:end="471:53">(<argument pos:start="471:29" pos:end="471:30"><expr pos:start="471:29" pos:end="471:30"><operator pos:start="471:29" pos:end="471:29">&amp;</operator><name pos:start="471:30" pos:end="471:30">g</name></expr></argument>, <argument pos:start="471:33" pos:end="471:52"><expr pos:start="471:33" pos:end="471:52"><operator pos:start="471:33" pos:end="471:33">&amp;</operator><name pos:start="471:34" pos:end="471:52">stream_bitrate_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="471:56" pos:end="501:9">{<block_content pos:start="473:13" pos:end="499:13">

            <decl_stmt pos:start="473:13" pos:end="473:44"><decl pos:start="473:13" pos:end="473:43"><type pos:start="473:13" pos:end="473:15"><name pos:start="473:13" pos:end="473:15">int</name></type> <name pos:start="473:17" pos:end="473:28">stream_count</name> <init pos:start="473:30" pos:end="473:43">= <expr pos:start="473:32" pos:end="473:43"><call pos:start="473:32" pos:end="473:43"><name pos:start="473:32" pos:end="473:39">get_le16</name><argument_list pos:start="473:40" pos:end="473:43">(<argument pos:start="473:41" pos:end="473:42"><expr pos:start="473:41" pos:end="473:42"><name pos:start="473:41" pos:end="473:42">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="475:13" pos:end="475:18"><decl pos:start="475:13" pos:end="475:17"><type pos:start="475:13" pos:end="475:15"><name pos:start="475:13" pos:end="475:15">int</name></type> <name pos:start="475:17" pos:end="475:17">j</name></decl>;</decl_stmt>



<comment type="line" pos:start="479:1" pos:end="479:69">//            av_log(s, AV_LOG_ERROR, "stream bitrate properties\n");</comment>

<comment type="line" pos:start="481:1" pos:end="481:63">//            av_log(s, AV_LOG_ERROR, "streams %d\n", streams);</comment>

            <for pos:start="483:13" pos:end="499:13">for<control pos:start="483:16" pos:end="483:45">(<init pos:start="483:17" pos:end="483:22"><expr pos:start="483:17" pos:end="483:21"><name pos:start="483:17" pos:end="483:17">j</name> <operator pos:start="483:19" pos:end="483:19">=</operator> <literal type="number" pos:start="483:21" pos:end="483:21">0</literal></expr>;</init> <condition pos:start="483:24" pos:end="483:40"><expr pos:start="483:24" pos:end="483:39"><name pos:start="483:24" pos:end="483:24">j</name> <operator pos:start="483:26" pos:end="483:26">&lt;</operator> <name pos:start="483:28" pos:end="483:39">stream_count</name></expr>;</condition> <incr pos:start="483:42" pos:end="483:44"><expr pos:start="483:42" pos:end="483:44"><name pos:start="483:42" pos:end="483:42">j</name><operator pos:start="483:43" pos:end="483:44">++</operator></expr></incr>)</control> <block pos:start="483:47" pos:end="499:13">{<block_content pos:start="485:17" pos:end="497:57">

                <decl_stmt pos:start="485:17" pos:end="485:46"><decl pos:start="485:17" pos:end="485:25"><type pos:start="485:17" pos:end="485:19"><name pos:start="485:17" pos:end="485:19">int</name></type> <name pos:start="485:21" pos:end="485:25">flags</name></decl>, <decl pos:start="485:28" pos:end="485:34"><type ref="prev" pos:start="485:17" pos:end="485:19"/><name pos:start="485:28" pos:end="485:34">bitrate</name></decl>, <decl pos:start="485:37" pos:end="485:45"><type ref="prev" pos:start="485:17" pos:end="485:19"/><name pos:start="485:37" pos:end="485:45">stream_id</name></decl>;</decl_stmt>



                <expr_stmt pos:start="489:17" pos:end="489:36"><expr pos:start="489:17" pos:end="489:35"><name pos:start="489:17" pos:end="489:21">flags</name><operator pos:start="489:22" pos:end="489:22">=</operator> <call pos:start="489:24" pos:end="489:35"><name pos:start="489:24" pos:end="489:31">get_le16</name><argument_list pos:start="489:32" pos:end="489:35">(<argument pos:start="489:33" pos:end="489:34"><expr pos:start="489:33" pos:end="489:34"><name pos:start="489:33" pos:end="489:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="491:17" pos:end="491:38"><expr pos:start="491:17" pos:end="491:37"><name pos:start="491:17" pos:end="491:23">bitrate</name><operator pos:start="491:24" pos:end="491:24">=</operator> <call pos:start="491:26" pos:end="491:37"><name pos:start="491:26" pos:end="491:33">get_le32</name><argument_list pos:start="491:34" pos:end="491:37">(<argument pos:start="491:35" pos:end="491:36"><expr pos:start="491:35" pos:end="491:36"><name pos:start="491:35" pos:end="491:36">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="493:17" pos:end="493:42"><expr pos:start="493:17" pos:end="493:41"><name pos:start="493:17" pos:end="493:25">stream_id</name><operator pos:start="493:26" pos:end="493:26">=</operator> <operator pos:start="493:28" pos:end="493:28">(</operator><name pos:start="493:29" pos:end="493:33">flags</name> <operator pos:start="493:35" pos:end="493:35">&amp;</operator> <literal type="number" pos:start="493:37" pos:end="493:40">0x7f</literal><operator pos:start="493:41" pos:end="493:41">)</operator></expr>;</expr_stmt>

<comment type="line" pos:start="495:1" pos:end="495:111">//                av_log(s, AV_LOG_ERROR, "flags: 0x%x stream id %d, bitrate %d\n", flags, stream_id, bitrate);</comment>

                <expr_stmt pos:start="497:17" pos:end="497:57"><expr pos:start="497:17" pos:end="497:56"><name pos:start="497:17" pos:end="497:47"><name pos:start="497:17" pos:end="497:19">asf</name><operator pos:start="497:20" pos:end="497:21">-&gt;</operator><name pos:start="497:22" pos:end="497:36">stream_bitrates</name><index pos:start="497:37" pos:end="497:47">[<expr pos:start="497:38" pos:end="497:46"><name pos:start="497:38" pos:end="497:46">stream_id</name></expr>]</index></name><operator pos:start="497:48" pos:end="497:48">=</operator> <name pos:start="497:50" pos:end="497:56">bitrate</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="501:11" pos:end="521:9">else if <condition pos:start="501:19" pos:end="501:55">(<expr pos:start="501:20" pos:end="501:54"><operator pos:start="501:20" pos:end="501:20">!</operator><call pos:start="501:21" pos:end="501:54"><name pos:start="501:21" pos:end="501:27">guidcmp</name><argument_list pos:start="501:28" pos:end="501:54">(<argument pos:start="501:29" pos:end="501:30"><expr pos:start="501:29" pos:end="501:30"><operator pos:start="501:29" pos:end="501:29">&amp;</operator><name pos:start="501:30" pos:end="501:30">g</name></expr></argument>, <argument pos:start="501:33" pos:end="501:53"><expr pos:start="501:33" pos:end="501:53"><operator pos:start="501:33" pos:end="501:33">&amp;</operator><name pos:start="501:34" pos:end="501:53">ff_asf_language_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="501:57" pos:end="521:9">{<block_content pos:start="503:13" pos:end="519:13">

            <decl_stmt pos:start="503:13" pos:end="503:18"><decl pos:start="503:13" pos:end="503:17"><type pos:start="503:13" pos:end="503:15"><name pos:start="503:13" pos:end="503:15">int</name></type> <name pos:start="503:17" pos:end="503:17">j</name></decl>;</decl_stmt>

            <decl_stmt pos:start="505:13" pos:end="505:44"><decl pos:start="505:13" pos:end="505:43"><type pos:start="505:13" pos:end="505:15"><name pos:start="505:13" pos:end="505:15">int</name></type> <name pos:start="505:17" pos:end="505:28">stream_count</name> <init pos:start="505:30" pos:end="505:43">= <expr pos:start="505:32" pos:end="505:43"><call pos:start="505:32" pos:end="505:43"><name pos:start="505:32" pos:end="505:39">get_le16</name><argument_list pos:start="505:40" pos:end="505:43">(<argument pos:start="505:41" pos:end="505:42"><expr pos:start="505:41" pos:end="505:42"><name pos:start="505:41" pos:end="505:42">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="507:13" pos:end="519:13">for<control pos:start="507:16" pos:end="507:45">(<init pos:start="507:17" pos:end="507:22"><expr pos:start="507:17" pos:end="507:21"><name pos:start="507:17" pos:end="507:17">j</name> <operator pos:start="507:19" pos:end="507:19">=</operator> <literal type="number" pos:start="507:21" pos:end="507:21">0</literal></expr>;</init> <condition pos:start="507:24" pos:end="507:40"><expr pos:start="507:24" pos:end="507:39"><name pos:start="507:24" pos:end="507:24">j</name> <operator pos:start="507:26" pos:end="507:26">&lt;</operator> <name pos:start="507:28" pos:end="507:39">stream_count</name></expr>;</condition> <incr pos:start="507:42" pos:end="507:44"><expr pos:start="507:42" pos:end="507:44"><name pos:start="507:42" pos:end="507:42">j</name><operator pos:start="507:43" pos:end="507:44">++</operator></expr></incr>)</control> <block pos:start="507:47" pos:end="519:13">{<block_content pos:start="509:17" pos:end="517:95">

                <decl_stmt pos:start="509:17" pos:end="509:29"><decl pos:start="509:17" pos:end="509:28"><type pos:start="509:17" pos:end="509:20"><name pos:start="509:17" pos:end="509:20">char</name></type> <name pos:start="509:22" pos:end="509:28"><name pos:start="509:22" pos:end="509:25">lang</name><index pos:start="509:26" pos:end="509:28">[<expr pos:start="509:27" pos:end="509:27"><literal type="number" pos:start="509:27" pos:end="509:27">6</literal></expr>]</index></name></decl>;</decl_stmt>

                <decl_stmt pos:start="511:17" pos:end="511:53"><decl pos:start="511:17" pos:end="511:52"><type pos:start="511:17" pos:end="511:28"><name pos:start="511:17" pos:end="511:24">unsigned</name> <name pos:start="511:26" pos:end="511:28">int</name></type> <name pos:start="511:30" pos:end="511:37">lang_len</name> <init pos:start="511:39" pos:end="511:52">= <expr pos:start="511:41" pos:end="511:52"><call pos:start="511:41" pos:end="511:52"><name pos:start="511:41" pos:end="511:48">get_byte</name><argument_list pos:start="511:49" pos:end="511:52">(<argument pos:start="511:50" pos:end="511:51"><expr pos:start="511:50" pos:end="511:51"><name pos:start="511:50" pos:end="511:51">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="513:17" pos:end="513:66"><expr pos:start="513:17" pos:end="513:65"><call pos:start="513:17" pos:end="513:65"><name pos:start="513:17" pos:end="513:31">get_str16_nolen</name><argument_list pos:start="513:32" pos:end="513:65">(<argument pos:start="513:33" pos:end="513:34"><expr pos:start="513:33" pos:end="513:34"><name pos:start="513:33" pos:end="513:34">pb</name></expr></argument>, <argument pos:start="513:37" pos:end="513:44"><expr pos:start="513:37" pos:end="513:44"><name pos:start="513:37" pos:end="513:44">lang_len</name></expr></argument>, <argument pos:start="513:47" pos:end="513:50"><expr pos:start="513:47" pos:end="513:50"><name pos:start="513:47" pos:end="513:50">lang</name></expr></argument>, <argument pos:start="513:53" pos:end="513:64"><expr pos:start="513:53" pos:end="513:64"><sizeof pos:start="513:53" pos:end="513:64">sizeof<argument_list pos:start="513:59" pos:end="513:64">(<argument pos:start="513:60" pos:end="513:63"><expr pos:start="513:60" pos:end="513:63"><name pos:start="513:60" pos:end="513:63">lang</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="515:17" pos:end="517:95"><if pos:start="515:17" pos:end="517:95">if <condition pos:start="515:20" pos:end="515:28">(<expr pos:start="515:21" pos:end="515:27"><name pos:start="515:21" pos:end="515:21">j</name> <operator pos:start="515:23" pos:end="515:23">&lt;</operator> <literal type="number" pos:start="515:25" pos:end="515:27">128</literal></expr>)</condition><block type="pseudo" pos:start="517:21" pos:end="517:95"><block_content pos:start="517:21" pos:end="517:95">

                    <expr_stmt pos:start="517:21" pos:end="517:95"><expr pos:start="517:21" pos:end="517:94"><call pos:start="517:21" pos:end="517:94"><name pos:start="517:21" pos:end="517:30">av_strlcpy</name><argument_list pos:start="517:31" pos:end="517:94">(<argument pos:start="517:32" pos:end="517:55"><expr pos:start="517:32" pos:end="517:55"><name pos:start="517:32" pos:end="517:55"><name pos:start="517:32" pos:end="517:34">asf</name><operator pos:start="517:35" pos:end="517:36">-&gt;</operator><name pos:start="517:37" pos:end="517:52">stream_languages</name><index pos:start="517:53" pos:end="517:55">[<expr pos:start="517:54" pos:end="517:54"><name pos:start="517:54" pos:end="517:54">j</name></expr>]</index></name></expr></argument>, <argument pos:start="517:58" pos:end="517:61"><expr pos:start="517:58" pos:end="517:61"><name pos:start="517:58" pos:end="517:61">lang</name></expr></argument>, <argument pos:start="517:64" pos:end="517:93"><expr pos:start="517:64" pos:end="517:93"><sizeof pos:start="517:64" pos:end="517:93">sizeof<argument_list pos:start="517:70" pos:end="517:93">(<argument pos:start="517:71" pos:end="517:92"><expr pos:start="517:71" pos:end="517:92"><operator pos:start="517:71" pos:end="517:71">*</operator><name pos:start="517:72" pos:end="517:92"><name pos:start="517:72" pos:end="517:74">asf</name><operator pos:start="517:75" pos:end="517:76">-&gt;</operator><name pos:start="517:77" pos:end="517:92">stream_languages</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="521:11" pos:end="557:9">else if <condition pos:start="521:19" pos:end="521:65">(<expr pos:start="521:20" pos:end="521:64"><operator pos:start="521:20" pos:end="521:20">!</operator><call pos:start="521:21" pos:end="521:64"><name pos:start="521:21" pos:end="521:27">guidcmp</name><argument_list pos:start="521:28" pos:end="521:64">(<argument pos:start="521:29" pos:end="521:30"><expr pos:start="521:29" pos:end="521:30"><operator pos:start="521:29" pos:end="521:29">&amp;</operator><name pos:start="521:30" pos:end="521:30">g</name></expr></argument>, <argument pos:start="521:33" pos:end="521:63"><expr pos:start="521:33" pos:end="521:63"><operator pos:start="521:33" pos:end="521:33">&amp;</operator><name pos:start="521:34" pos:end="521:63">ff_asf_extended_content_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="521:67" pos:end="557:9">{<block_content pos:start="523:13" pos:end="555:13">

            <decl_stmt pos:start="523:13" pos:end="523:30"><decl pos:start="523:13" pos:end="523:26"><type pos:start="523:13" pos:end="523:15"><name pos:start="523:13" pos:end="523:15">int</name></type> <name pos:start="523:17" pos:end="523:26">desc_count</name></decl>, <decl pos:start="523:29" pos:end="523:29"><type ref="prev" pos:start="523:13" pos:end="523:15"/><name pos:start="523:29" pos:end="523:29">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="527:13" pos:end="527:38"><expr pos:start="527:13" pos:end="527:37"><name pos:start="527:13" pos:end="527:22">desc_count</name> <operator pos:start="527:24" pos:end="527:24">=</operator> <call pos:start="527:26" pos:end="527:37"><name pos:start="527:26" pos:end="527:33">get_le16</name><argument_list pos:start="527:34" pos:end="527:37">(<argument pos:start="527:35" pos:end="527:36"><expr pos:start="527:35" pos:end="527:36"><name pos:start="527:35" pos:end="527:36">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="529:13" pos:end="555:13">for<control pos:start="529:16" pos:end="529:37">(<init pos:start="529:17" pos:end="529:20"><expr pos:start="529:17" pos:end="529:19"><name pos:start="529:17" pos:end="529:17">i</name><operator pos:start="529:18" pos:end="529:18">=</operator><literal type="number" pos:start="529:19" pos:end="529:19">0</literal></expr>;</init><condition pos:start="529:21" pos:end="529:33"><expr pos:start="529:21" pos:end="529:32"><name pos:start="529:21" pos:end="529:21">i</name><operator pos:start="529:22" pos:end="529:22">&lt;</operator><name pos:start="529:23" pos:end="529:32">desc_count</name></expr>;</condition><incr pos:start="529:34" pos:end="529:36"><expr pos:start="529:34" pos:end="529:36"><name pos:start="529:34" pos:end="529:34">i</name><operator pos:start="529:35" pos:end="529:36">++</operator></expr></incr>)</control> <block pos:start="529:39" pos:end="555:13">{<block_content pos:start="531:21" pos:end="553:60">

                    <decl_stmt pos:start="531:21" pos:end="531:54"><decl pos:start="531:21" pos:end="531:32"><type pos:start="531:21" pos:end="531:23"><name pos:start="531:21" pos:end="531:23">int</name></type> <name pos:start="531:25" pos:end="531:32">name_len</name></decl>,<decl pos:start="531:34" pos:end="531:43"><type ref="prev" pos:start="531:21" pos:end="531:23"/><name pos:start="531:34" pos:end="531:43">value_type</name></decl>,<decl pos:start="531:45" pos:end="531:53"><type ref="prev" pos:start="531:21" pos:end="531:23"/><name pos:start="531:45" pos:end="531:53">value_len</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="533:21" pos:end="533:36"><decl pos:start="533:21" pos:end="533:35"><type pos:start="533:21" pos:end="533:24"><name pos:start="533:21" pos:end="533:24">char</name></type> <name pos:start="533:26" pos:end="533:35"><name pos:start="533:26" pos:end="533:29">name</name><index pos:start="533:30" pos:end="533:35">[<expr pos:start="533:31" pos:end="533:34"><literal type="number" pos:start="533:31" pos:end="533:34">1024</literal></expr>]</index></name></decl>;</decl_stmt>



                    <expr_stmt pos:start="537:21" pos:end="537:44"><expr pos:start="537:21" pos:end="537:43"><name pos:start="537:21" pos:end="537:28">name_len</name> <operator pos:start="537:30" pos:end="537:30">=</operator> <call pos:start="537:32" pos:end="537:43"><name pos:start="537:32" pos:end="537:39">get_le16</name><argument_list pos:start="537:40" pos:end="537:43">(<argument pos:start="537:41" pos:end="537:42"><expr pos:start="537:41" pos:end="537:42"><name pos:start="537:41" pos:end="537:42">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="539:21" pos:end="541:38"><if pos:start="539:21" pos:end="541:38">if <condition pos:start="539:24" pos:end="539:35">(<expr pos:start="539:25" pos:end="539:34"><name pos:start="539:25" pos:end="539:32">name_len</name><operator pos:start="539:33" pos:end="539:33">%</operator><literal type="number" pos:start="539:34" pos:end="539:34">2</literal></expr>)</condition><block type="pseudo" pos:start="541:25" pos:end="541:38"><block_content pos:start="541:25" pos:end="541:38">     <comment type="line" pos:start="539:41" pos:end="539:89">// must be even, broken lavf versions wrote len-1</comment>

                        <expr_stmt pos:start="541:25" pos:end="541:38"><expr pos:start="541:25" pos:end="541:37"><name pos:start="541:25" pos:end="541:32">name_len</name> <operator pos:start="541:34" pos:end="541:35">+=</operator> <literal type="number" pos:start="541:37" pos:end="541:37">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="543:21" pos:end="543:70"><expr pos:start="543:21" pos:end="543:69"><call pos:start="543:21" pos:end="543:69"><name pos:start="543:21" pos:end="543:35">get_str16_nolen</name><argument_list pos:start="543:36" pos:end="543:69">(<argument pos:start="543:37" pos:end="543:38"><expr pos:start="543:37" pos:end="543:38"><name pos:start="543:37" pos:end="543:38">pb</name></expr></argument>, <argument pos:start="543:41" pos:end="543:48"><expr pos:start="543:41" pos:end="543:48"><name pos:start="543:41" pos:end="543:48">name_len</name></expr></argument>, <argument pos:start="543:51" pos:end="543:54"><expr pos:start="543:51" pos:end="543:54"><name pos:start="543:51" pos:end="543:54">name</name></expr></argument>, <argument pos:start="543:57" pos:end="543:68"><expr pos:start="543:57" pos:end="543:68"><sizeof pos:start="543:57" pos:end="543:68">sizeof<argument_list pos:start="543:63" pos:end="543:68">(<argument pos:start="543:64" pos:end="543:67"><expr pos:start="543:64" pos:end="543:67"><name pos:start="543:64" pos:end="543:67">name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="545:21" pos:end="545:46"><expr pos:start="545:21" pos:end="545:45"><name pos:start="545:21" pos:end="545:30">value_type</name> <operator pos:start="545:32" pos:end="545:32">=</operator> <call pos:start="545:34" pos:end="545:45"><name pos:start="545:34" pos:end="545:41">get_le16</name><argument_list pos:start="545:42" pos:end="545:45">(<argument pos:start="545:43" pos:end="545:44"><expr pos:start="545:43" pos:end="545:44"><name pos:start="545:43" pos:end="545:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="547:21" pos:end="547:46"><expr pos:start="547:21" pos:end="547:45"><name pos:start="547:21" pos:end="547:29">value_len</name>  <operator pos:start="547:32" pos:end="547:32">=</operator> <call pos:start="547:34" pos:end="547:45"><name pos:start="547:34" pos:end="547:41">get_le16</name><argument_list pos:start="547:42" pos:end="547:45">(<argument pos:start="547:43" pos:end="547:44"><expr pos:start="547:43" pos:end="547:44"><name pos:start="547:43" pos:end="547:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="549:21" pos:end="551:39"><if pos:start="549:21" pos:end="551:39">if <condition pos:start="549:24" pos:end="549:51">(<expr pos:start="549:25" pos:end="549:50"><operator pos:start="549:25" pos:end="549:25">!</operator><name pos:start="549:26" pos:end="549:35">value_type</name> <operator pos:start="549:37" pos:end="549:38">&amp;&amp;</operator> <name pos:start="549:40" pos:end="549:48">value_len</name><operator pos:start="549:49" pos:end="549:49">%</operator><literal type="number" pos:start="549:50" pos:end="549:50">2</literal></expr>)</condition><block type="pseudo" pos:start="551:25" pos:end="551:39"><block_content pos:start="551:25" pos:end="551:39">

                        <expr_stmt pos:start="551:25" pos:end="551:39"><expr pos:start="551:25" pos:end="551:38"><name pos:start="551:25" pos:end="551:33">value_len</name> <operator pos:start="551:35" pos:end="551:36">+=</operator> <literal type="number" pos:start="551:38" pos:end="551:38">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="553:21" pos:end="553:60"><expr pos:start="553:21" pos:end="553:59"><call pos:start="553:21" pos:end="553:59"><name pos:start="553:21" pos:end="553:27">get_tag</name><argument_list pos:start="553:28" pos:end="553:59">(<argument pos:start="553:29" pos:end="553:29"><expr pos:start="553:29" pos:end="553:29"><name pos:start="553:29" pos:end="553:29">s</name></expr></argument>, <argument pos:start="553:32" pos:end="553:35"><expr pos:start="553:32" pos:end="553:35"><name pos:start="553:32" pos:end="553:35">name</name></expr></argument>, <argument pos:start="553:38" pos:end="553:47"><expr pos:start="553:38" pos:end="553:47"><name pos:start="553:38" pos:end="553:47">value_type</name></expr></argument>, <argument pos:start="553:50" pos:end="553:58"><expr pos:start="553:50" pos:end="553:58"><name pos:start="553:50" pos:end="553:58">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="557:11" pos:end="603:9">else if <condition pos:start="557:19" pos:end="557:57">(<expr pos:start="557:20" pos:end="557:56"><operator pos:start="557:20" pos:end="557:20">!</operator><call pos:start="557:21" pos:end="557:56"><name pos:start="557:21" pos:end="557:27">guidcmp</name><argument_list pos:start="557:28" pos:end="557:56">(<argument pos:start="557:29" pos:end="557:30"><expr pos:start="557:29" pos:end="557:30"><operator pos:start="557:29" pos:end="557:29">&amp;</operator><name pos:start="557:30" pos:end="557:30">g</name></expr></argument>, <argument pos:start="557:33" pos:end="557:55"><expr pos:start="557:33" pos:end="557:55"><operator pos:start="557:33" pos:end="557:33">&amp;</operator><name pos:start="557:34" pos:end="557:55">ff_asf_metadata_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="557:59" pos:end="603:9">{<block_content pos:start="559:13" pos:end="601:13">

            <decl_stmt pos:start="559:13" pos:end="559:74"><decl pos:start="559:13" pos:end="559:17"><type pos:start="559:13" pos:end="559:15"><name pos:start="559:13" pos:end="559:15">int</name></type> <name pos:start="559:17" pos:end="559:17">n</name></decl>, <decl pos:start="559:20" pos:end="559:29"><type ref="prev" pos:start="559:13" pos:end="559:15"/><name pos:start="559:20" pos:end="559:29">stream_num</name></decl>, <decl pos:start="559:32" pos:end="559:39"><type ref="prev" pos:start="559:13" pos:end="559:15"/><name pos:start="559:32" pos:end="559:39">name_len</name></decl>, <decl pos:start="559:42" pos:end="559:50"><type ref="prev" pos:start="559:13" pos:end="559:15"/><name pos:start="559:42" pos:end="559:50">value_len</name></decl>, <decl pos:start="559:53" pos:end="559:62"><type ref="prev" pos:start="559:13" pos:end="559:15"/><name pos:start="559:53" pos:end="559:62">value_type</name></decl>, <decl pos:start="559:65" pos:end="559:73"><type ref="prev" pos:start="559:13" pos:end="559:15"/><name pos:start="559:65" pos:end="559:73">value_num</name></decl>;</decl_stmt>

            <expr_stmt pos:start="561:13" pos:end="561:29"><expr pos:start="561:13" pos:end="561:28"><name pos:start="561:13" pos:end="561:13">n</name> <operator pos:start="561:15" pos:end="561:15">=</operator> <call pos:start="561:17" pos:end="561:28"><name pos:start="561:17" pos:end="561:24">get_le16</name><argument_list pos:start="561:25" pos:end="561:28">(<argument pos:start="561:26" pos:end="561:27"><expr pos:start="561:26" pos:end="561:27"><name pos:start="561:26" pos:end="561:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="565:13" pos:end="601:13">for<control pos:start="565:16" pos:end="565:28">(<init pos:start="565:17" pos:end="565:20"><expr pos:start="565:17" pos:end="565:19"><name pos:start="565:17" pos:end="565:17">i</name><operator pos:start="565:18" pos:end="565:18">=</operator><literal type="number" pos:start="565:19" pos:end="565:19">0</literal></expr>;</init><condition pos:start="565:21" pos:end="565:24"><expr pos:start="565:21" pos:end="565:23"><name pos:start="565:21" pos:end="565:21">i</name><operator pos:start="565:22" pos:end="565:22">&lt;</operator><name pos:start="565:23" pos:end="565:23">n</name></expr>;</condition><incr pos:start="565:25" pos:end="565:27"><expr pos:start="565:25" pos:end="565:27"><name pos:start="565:25" pos:end="565:25">i</name><operator pos:start="565:26" pos:end="565:27">++</operator></expr></incr>)</control> <block pos:start="565:30" pos:end="601:13">{<block_content pos:start="567:17" pos:end="599:17">

                <decl_stmt pos:start="567:17" pos:end="567:32"><decl pos:start="567:17" pos:end="567:31"><type pos:start="567:17" pos:end="567:20"><name pos:start="567:17" pos:end="567:20">char</name></type> <name pos:start="567:22" pos:end="567:31"><name pos:start="567:22" pos:end="567:25">name</name><index pos:start="567:26" pos:end="567:31">[<expr pos:start="567:27" pos:end="567:30"><literal type="number" pos:start="567:27" pos:end="567:30">1024</literal></expr>]</index></name></decl>;</decl_stmt>



                <expr_stmt pos:start="571:17" pos:end="571:29"><expr pos:start="571:17" pos:end="571:28"><call pos:start="571:17" pos:end="571:28"><name pos:start="571:17" pos:end="571:24">get_le16</name><argument_list pos:start="571:25" pos:end="571:28">(<argument pos:start="571:26" pos:end="571:27"><expr pos:start="571:26" pos:end="571:27"><name pos:start="571:26" pos:end="571:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="571:31" pos:end="571:47">//lang_list_index</comment>

                <expr_stmt pos:start="573:17" pos:end="573:41"><expr pos:start="573:17" pos:end="573:40"><name pos:start="573:17" pos:end="573:26">stream_num</name><operator pos:start="573:27" pos:end="573:27">=</operator> <call pos:start="573:29" pos:end="573:40"><name pos:start="573:29" pos:end="573:36">get_le16</name><argument_list pos:start="573:37" pos:end="573:40">(<argument pos:start="573:38" pos:end="573:39"><expr pos:start="573:38" pos:end="573:39"><name pos:start="573:38" pos:end="573:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="575:17" pos:end="575:41"><expr pos:start="575:17" pos:end="575:40"><name pos:start="575:17" pos:end="575:24">name_len</name><operator pos:start="575:25" pos:end="575:25">=</operator>   <call pos:start="575:29" pos:end="575:40"><name pos:start="575:29" pos:end="575:36">get_le16</name><argument_list pos:start="575:37" pos:end="575:40">(<argument pos:start="575:38" pos:end="575:39"><expr pos:start="575:38" pos:end="575:39"><name pos:start="575:38" pos:end="575:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="577:17" pos:end="577:41"><expr pos:start="577:17" pos:end="577:40"><name pos:start="577:17" pos:end="577:26">value_type</name><operator pos:start="577:27" pos:end="577:27">=</operator> <call pos:start="577:29" pos:end="577:40"><name pos:start="577:29" pos:end="577:36">get_le16</name><argument_list pos:start="577:37" pos:end="577:40">(<argument pos:start="577:38" pos:end="577:39"><expr pos:start="577:38" pos:end="577:39"><name pos:start="577:38" pos:end="577:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="579:17" pos:end="579:41"><expr pos:start="579:17" pos:end="579:40"><name pos:start="579:17" pos:end="579:25">value_len</name><operator pos:start="579:26" pos:end="579:26">=</operator>  <call pos:start="579:29" pos:end="579:40"><name pos:start="579:29" pos:end="579:36">get_le32</name><argument_list pos:start="579:37" pos:end="579:40">(<argument pos:start="579:38" pos:end="579:39"><expr pos:start="579:38" pos:end="579:39"><name pos:start="579:38" pos:end="579:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="583:17" pos:end="583:66"><expr pos:start="583:17" pos:end="583:65"><call pos:start="583:17" pos:end="583:65"><name pos:start="583:17" pos:end="583:31">get_str16_nolen</name><argument_list pos:start="583:32" pos:end="583:65">(<argument pos:start="583:33" pos:end="583:34"><expr pos:start="583:33" pos:end="583:34"><name pos:start="583:33" pos:end="583:34">pb</name></expr></argument>, <argument pos:start="583:37" pos:end="583:44"><expr pos:start="583:37" pos:end="583:44"><name pos:start="583:37" pos:end="583:44">name_len</name></expr></argument>, <argument pos:start="583:47" pos:end="583:50"><expr pos:start="583:47" pos:end="583:50"><name pos:start="583:47" pos:end="583:50">name</name></expr></argument>, <argument pos:start="583:53" pos:end="583:64"><expr pos:start="583:53" pos:end="583:64"><sizeof pos:start="583:53" pos:end="583:64">sizeof<argument_list pos:start="583:59" pos:end="583:64">(<argument pos:start="583:60" pos:end="583:63"><expr pos:start="583:60" pos:end="583:63"><name pos:start="583:60" pos:end="583:63">name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="585:1" pos:end="585:105">//av_log(s, AV_LOG_ERROR, "%d %d %d %d %d &lt;%s&gt;\n", i, stream_num, name_len, value_type, value_len, name);</comment>

                <expr_stmt pos:start="587:17" pos:end="587:40"><expr pos:start="587:17" pos:end="587:39"><name pos:start="587:17" pos:end="587:25">value_num</name><operator pos:start="587:26" pos:end="587:26">=</operator> <call pos:start="587:28" pos:end="587:39"><name pos:start="587:28" pos:end="587:35">get_le16</name><argument_list pos:start="587:36" pos:end="587:39">(<argument pos:start="587:37" pos:end="587:38"><expr pos:start="587:37" pos:end="587:38"><name pos:start="587:37" pos:end="587:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:start="587:41" pos:end="587:127">//we should use get_value() here but it does not work 2 is le16 here but le32 elsewhere</comment>

                <expr_stmt pos:start="589:17" pos:end="589:45"><expr pos:start="589:17" pos:end="589:44"><call pos:start="589:17" pos:end="589:44"><name pos:start="589:17" pos:end="589:25">url_fskip</name><argument_list pos:start="589:26" pos:end="589:44">(<argument pos:start="589:27" pos:end="589:28"><expr pos:start="589:27" pos:end="589:28"><name pos:start="589:27" pos:end="589:28">pb</name></expr></argument>, <argument pos:start="589:31" pos:end="589:43"><expr pos:start="589:31" pos:end="589:43"><name pos:start="589:31" pos:end="589:39">value_len</name> <operator pos:start="589:41" pos:end="589:41">-</operator> <literal type="number" pos:start="589:43" pos:end="589:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="593:17" pos:end="599:17"><if pos:start="593:17" pos:end="599:17">if<condition pos:start="593:19" pos:end="593:34">(<expr pos:start="593:20" pos:end="593:33"><name pos:start="593:20" pos:end="593:29">stream_num</name><operator pos:start="593:30" pos:end="593:30">&lt;</operator><literal type="number" pos:start="593:31" pos:end="593:33">128</literal></expr>)</condition><block pos:start="593:35" pos:end="599:17">{<block_content pos:start="595:21" pos:end="597:90">

                    <if_stmt pos:start="595:21" pos:end="597:90"><if pos:start="595:21" pos:end="595:90">if     <condition pos:start="595:28" pos:end="595:58">(<expr pos:start="595:29" pos:end="595:57"><operator pos:start="595:29" pos:end="595:29">!</operator><call pos:start="595:30" pos:end="595:57"><name pos:start="595:30" pos:end="595:35">strcmp</name><argument_list pos:start="595:36" pos:end="595:57">(<argument pos:start="595:37" pos:end="595:40"><expr pos:start="595:37" pos:end="595:40"><name pos:start="595:37" pos:end="595:40">name</name></expr></argument>, <argument pos:start="595:43" pos:end="595:56"><expr pos:start="595:43" pos:end="595:56"><literal type="string" pos:start="595:43" pos:end="595:56">"AspectRatioX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="595:60" pos:end="595:90"><block_content pos:start="595:60" pos:end="595:90"> <expr_stmt pos:start="595:60" pos:end="595:90"><expr pos:start="595:60" pos:end="595:89"><name pos:start="595:60" pos:end="595:74"><name pos:start="595:60" pos:end="595:62">dar</name><index pos:start="595:63" pos:end="595:74">[<expr pos:start="595:64" pos:end="595:73"><name pos:start="595:64" pos:end="595:73">stream_num</name></expr>]</index></name><operator pos:start="595:75" pos:end="595:75">.</operator><name pos:start="595:76" pos:end="595:78">num</name><operator pos:start="595:79" pos:end="595:79">=</operator> <name pos:start="595:81" pos:end="595:89">value_num</name></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="597:21" pos:end="597:90">else if<condition pos:start="597:28" pos:end="597:58">(<expr pos:start="597:29" pos:end="597:57"><operator pos:start="597:29" pos:end="597:29">!</operator><call pos:start="597:30" pos:end="597:57"><name pos:start="597:30" pos:end="597:35">strcmp</name><argument_list pos:start="597:36" pos:end="597:57">(<argument pos:start="597:37" pos:end="597:40"><expr pos:start="597:37" pos:end="597:40"><name pos:start="597:37" pos:end="597:40">name</name></expr></argument>, <argument pos:start="597:43" pos:end="597:56"><expr pos:start="597:43" pos:end="597:56"><literal type="string" pos:start="597:43" pos:end="597:56">"AspectRatioY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="597:60" pos:end="597:90"><block_content pos:start="597:60" pos:end="597:90"> <expr_stmt pos:start="597:60" pos:end="597:90"><expr pos:start="597:60" pos:end="597:89"><name pos:start="597:60" pos:end="597:74"><name pos:start="597:60" pos:end="597:62">dar</name><index pos:start="597:63" pos:end="597:74">[<expr pos:start="597:64" pos:end="597:73"><name pos:start="597:64" pos:end="597:73">stream_num</name></expr>]</index></name><operator pos:start="597:75" pos:end="597:75">.</operator><name pos:start="597:76" pos:end="597:78">den</name><operator pos:start="597:79" pos:end="597:79">=</operator> <name pos:start="597:81" pos:end="597:89">value_num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="603:11" pos:end="691:9">else if <condition pos:start="603:19" pos:end="603:59">(<expr pos:start="603:20" pos:end="603:58"><operator pos:start="603:20" pos:end="603:20">!</operator><call pos:start="603:21" pos:end="603:58"><name pos:start="603:21" pos:end="603:27">guidcmp</name><argument_list pos:start="603:28" pos:end="603:58">(<argument pos:start="603:29" pos:end="603:30"><expr pos:start="603:29" pos:end="603:30"><operator pos:start="603:29" pos:end="603:29">&amp;</operator><name pos:start="603:30" pos:end="603:30">g</name></expr></argument>, <argument pos:start="603:33" pos:end="603:57"><expr pos:start="603:33" pos:end="603:57"><operator pos:start="603:33" pos:end="603:33">&amp;</operator><name pos:start="603:34" pos:end="603:57">ff_asf_ext_stream_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="603:61" pos:end="691:9">{<block_content pos:start="605:13" pos:end="689:21">

            <decl_stmt pos:start="605:13" pos:end="605:51"><decl pos:start="605:13" pos:end="605:23"><type pos:start="605:13" pos:end="605:15"><name pos:start="605:13" pos:end="605:15">int</name></type> <name pos:start="605:17" pos:end="605:23">ext_len</name></decl>, <decl pos:start="605:26" pos:end="605:39"><type ref="prev" pos:start="605:13" pos:end="605:15"/><name pos:start="605:26" pos:end="605:39">payload_ext_ct</name></decl>, <decl pos:start="605:42" pos:end="605:50"><type ref="prev" pos:start="605:13" pos:end="605:15"/><name pos:start="605:42" pos:end="605:50">stream_ct</name></decl>;</decl_stmt>

            <decl_stmt pos:start="607:13" pos:end="607:50"><decl pos:start="607:13" pos:end="607:26"><type pos:start="607:13" pos:end="607:20"><name pos:start="607:13" pos:end="607:20">uint32_t</name></type> <name pos:start="607:22" pos:end="607:26">ext_d</name></decl>, <decl pos:start="607:29" pos:end="607:37"><type ref="prev" pos:start="607:13" pos:end="607:20"/><name pos:start="607:29" pos:end="607:37">leak_rate</name></decl>, <decl pos:start="607:40" pos:end="607:49"><type ref="prev" pos:start="607:13" pos:end="607:20"/><name pos:start="607:40" pos:end="607:49">stream_num</name></decl>;</decl_stmt>

            <decl_stmt pos:start="609:13" pos:end="609:49"><decl pos:start="609:13" pos:end="609:48"><type pos:start="609:13" pos:end="609:24"><name pos:start="609:13" pos:end="609:20">unsigned</name> <name pos:start="609:22" pos:end="609:24">int</name></type> <name pos:start="609:26" pos:end="609:48">stream_languageid_index</name></decl>;</decl_stmt>



            <expr_stmt pos:start="613:13" pos:end="613:25"><expr pos:start="613:13" pos:end="613:24"><call pos:start="613:13" pos:end="613:24"><name pos:start="613:13" pos:end="613:20">get_le64</name><argument_list pos:start="613:21" pos:end="613:24">(<argument pos:start="613:22" pos:end="613:23"><expr pos:start="613:22" pos:end="613:23"><name pos:start="613:22" pos:end="613:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="613:27" pos:end="613:38">// starttime</comment>

            <expr_stmt pos:start="615:13" pos:end="615:25"><expr pos:start="615:13" pos:end="615:24"><call pos:start="615:13" pos:end="615:24"><name pos:start="615:13" pos:end="615:20">get_le64</name><argument_list pos:start="615:21" pos:end="615:24">(<argument pos:start="615:22" pos:end="615:23"><expr pos:start="615:22" pos:end="615:23"><name pos:start="615:22" pos:end="615:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="615:27" pos:end="615:36">// endtime</comment>

            <expr_stmt pos:start="617:13" pos:end="617:37"><expr pos:start="617:13" pos:end="617:36"><name pos:start="617:13" pos:end="617:21">leak_rate</name> <operator pos:start="617:23" pos:end="617:23">=</operator> <call pos:start="617:25" pos:end="617:36"><name pos:start="617:25" pos:end="617:32">get_le32</name><argument_list pos:start="617:33" pos:end="617:36">(<argument pos:start="617:34" pos:end="617:35"><expr pos:start="617:34" pos:end="617:35"><name pos:start="617:34" pos:end="617:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="617:39" pos:end="617:54">// leak-datarate</comment>

            <expr_stmt pos:start="619:13" pos:end="619:25"><expr pos:start="619:13" pos:end="619:24"><call pos:start="619:13" pos:end="619:24"><name pos:start="619:13" pos:end="619:20">get_le32</name><argument_list pos:start="619:21" pos:end="619:24">(<argument pos:start="619:22" pos:end="619:23"><expr pos:start="619:22" pos:end="619:23"><name pos:start="619:22" pos:end="619:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="619:27" pos:end="619:44">// bucket-datasize</comment>

            <expr_stmt pos:start="621:13" pos:end="621:25"><expr pos:start="621:13" pos:end="621:24"><call pos:start="621:13" pos:end="621:24"><name pos:start="621:13" pos:end="621:20">get_le32</name><argument_list pos:start="621:21" pos:end="621:24">(<argument pos:start="621:22" pos:end="621:23"><expr pos:start="621:22" pos:end="621:23"><name pos:start="621:22" pos:end="621:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="621:27" pos:end="621:49">// init-bucket-fullness</comment>

            <expr_stmt pos:start="623:13" pos:end="623:25"><expr pos:start="623:13" pos:end="623:24"><call pos:start="623:13" pos:end="623:24"><name pos:start="623:13" pos:end="623:20">get_le32</name><argument_list pos:start="623:21" pos:end="623:24">(<argument pos:start="623:22" pos:end="623:23"><expr pos:start="623:22" pos:end="623:23"><name pos:start="623:22" pos:end="623:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="623:27" pos:end="623:46">// alt-leak-datarate</comment>

            <expr_stmt pos:start="625:13" pos:end="625:25"><expr pos:start="625:13" pos:end="625:24"><call pos:start="625:13" pos:end="625:24"><name pos:start="625:13" pos:end="625:20">get_le32</name><argument_list pos:start="625:21" pos:end="625:24">(<argument pos:start="625:22" pos:end="625:23"><expr pos:start="625:22" pos:end="625:23"><name pos:start="625:22" pos:end="625:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="625:27" pos:end="625:48">// alt-bucket-datasize</comment>

            <expr_stmt pos:start="627:13" pos:end="627:25"><expr pos:start="627:13" pos:end="627:24"><call pos:start="627:13" pos:end="627:24"><name pos:start="627:13" pos:end="627:20">get_le32</name><argument_list pos:start="627:21" pos:end="627:24">(<argument pos:start="627:22" pos:end="627:23"><expr pos:start="627:22" pos:end="627:23"><name pos:start="627:22" pos:end="627:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="627:27" pos:end="627:53">// alt-init-bucket-fullness</comment>

            <expr_stmt pos:start="629:13" pos:end="629:25"><expr pos:start="629:13" pos:end="629:24"><call pos:start="629:13" pos:end="629:24"><name pos:start="629:13" pos:end="629:20">get_le32</name><argument_list pos:start="629:21" pos:end="629:24">(<argument pos:start="629:22" pos:end="629:23"><expr pos:start="629:22" pos:end="629:23"><name pos:start="629:22" pos:end="629:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="629:27" pos:end="629:44">// max-object-size</comment>

            <expr_stmt pos:start="631:13" pos:end="631:25"><expr pos:start="631:13" pos:end="631:24"><call pos:start="631:13" pos:end="631:24"><name pos:start="631:13" pos:end="631:20">get_le32</name><argument_list pos:start="631:21" pos:end="631:24">(<argument pos:start="631:22" pos:end="631:23"><expr pos:start="631:22" pos:end="631:23"><name pos:start="631:22" pos:end="631:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="631:27" pos:end="631:117">// flags (reliable,seekable,no_cleanpoints?,resend-live-cleanpoints, rest of bits reserved)</comment>

            <expr_stmt pos:start="633:13" pos:end="633:38"><expr pos:start="633:13" pos:end="633:37"><name pos:start="633:13" pos:end="633:22">stream_num</name> <operator pos:start="633:24" pos:end="633:24">=</operator> <call pos:start="633:26" pos:end="633:37"><name pos:start="633:26" pos:end="633:33">get_le16</name><argument_list pos:start="633:34" pos:end="633:37">(<argument pos:start="633:35" pos:end="633:36"><expr pos:start="633:35" pos:end="633:36"><name pos:start="633:35" pos:end="633:36">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="633:40" pos:end="633:52">// stream-num</comment>



            <expr_stmt pos:start="637:13" pos:end="637:51"><expr pos:start="637:13" pos:end="637:50"><name pos:start="637:13" pos:end="637:35">stream_languageid_index</name> <operator pos:start="637:37" pos:end="637:37">=</operator> <call pos:start="637:39" pos:end="637:50"><name pos:start="637:39" pos:end="637:46">get_le16</name><argument_list pos:start="637:47" pos:end="637:50">(<argument pos:start="637:48" pos:end="637:49"><expr pos:start="637:48" pos:end="637:49"><name pos:start="637:48" pos:end="637:49">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="637:53" pos:end="637:79">// stream-language-id-index</comment>

            <if_stmt pos:start="639:13" pos:end="641:89"><if pos:start="639:13" pos:end="641:89">if <condition pos:start="639:16" pos:end="639:33">(<expr pos:start="639:17" pos:end="639:32"><name pos:start="639:17" pos:end="639:26">stream_num</name> <operator pos:start="639:28" pos:end="639:28">&lt;</operator> <literal type="number" pos:start="639:30" pos:end="639:32">128</literal></expr>)</condition><block type="pseudo" pos:start="641:17" pos:end="641:89"><block_content pos:start="641:17" pos:end="641:89">

                <expr_stmt pos:start="641:17" pos:end="641:89"><expr pos:start="641:17" pos:end="641:88"><name pos:start="641:17" pos:end="641:40"><name pos:start="641:17" pos:end="641:19">asf</name><operator pos:start="641:20" pos:end="641:21">-&gt;</operator><name pos:start="641:22" pos:end="641:28">streams</name><index pos:start="641:29" pos:end="641:40">[<expr pos:start="641:30" pos:end="641:39"><name pos:start="641:30" pos:end="641:39">stream_num</name></expr>]</index></name><operator pos:start="641:41" pos:end="641:41">.</operator><name pos:start="641:42" pos:end="641:62">stream_language_index</name> <operator pos:start="641:64" pos:end="641:64">=</operator> <name pos:start="641:66" pos:end="641:88">stream_languageid_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="645:13" pos:end="645:25"><expr pos:start="645:13" pos:end="645:24"><call pos:start="645:13" pos:end="645:24"><name pos:start="645:13" pos:end="645:20">get_le64</name><argument_list pos:start="645:21" pos:end="645:24">(<argument pos:start="645:22" pos:end="645:23"><expr pos:start="645:22" pos:end="645:23"><name pos:start="645:22" pos:end="645:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="645:27" pos:end="645:57">// avg frametime in 100ns units</comment>

            <expr_stmt pos:start="647:13" pos:end="647:37"><expr pos:start="647:13" pos:end="647:36"><name pos:start="647:13" pos:end="647:21">stream_ct</name> <operator pos:start="647:23" pos:end="647:23">=</operator> <call pos:start="647:25" pos:end="647:36"><name pos:start="647:25" pos:end="647:32">get_le16</name><argument_list pos:start="647:33" pos:end="647:36">(<argument pos:start="647:34" pos:end="647:35"><expr pos:start="647:34" pos:end="647:35"><name pos:start="647:34" pos:end="647:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="647:39" pos:end="647:57">//stream-name-count</comment>

            <expr_stmt pos:start="649:13" pos:end="649:42"><expr pos:start="649:13" pos:end="649:41"><name pos:start="649:13" pos:end="649:26">payload_ext_ct</name> <operator pos:start="649:28" pos:end="649:28">=</operator> <call pos:start="649:30" pos:end="649:41"><name pos:start="649:30" pos:end="649:37">get_le16</name><argument_list pos:start="649:38" pos:end="649:41">(<argument pos:start="649:39" pos:end="649:40"><expr pos:start="649:39" pos:end="649:40"><name pos:start="649:39" pos:end="649:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="649:44" pos:end="649:75">//payload-extension-system-count</comment>



            <if_stmt pos:start="653:13" pos:end="655:48"><if pos:start="653:13" pos:end="655:48">if <condition pos:start="653:16" pos:end="653:33">(<expr pos:start="653:17" pos:end="653:32"><name pos:start="653:17" pos:end="653:26">stream_num</name> <operator pos:start="653:28" pos:end="653:28">&lt;</operator> <literal type="number" pos:start="653:30" pos:end="653:32">128</literal></expr>)</condition><block type="pseudo" pos:start="655:17" pos:end="655:48"><block_content pos:start="655:17" pos:end="655:48">

                <expr_stmt pos:start="655:17" pos:end="655:48"><expr pos:start="655:17" pos:end="655:47"><name pos:start="655:17" pos:end="655:35"><name pos:start="655:17" pos:end="655:23">bitrate</name><index pos:start="655:24" pos:end="655:35">[<expr pos:start="655:25" pos:end="655:34"><name pos:start="655:25" pos:end="655:34">stream_num</name></expr>]</index></name> <operator pos:start="655:37" pos:end="655:37">=</operator> <name pos:start="655:39" pos:end="655:47">leak_rate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <for pos:start="659:13" pos:end="667:13">for <control pos:start="659:17" pos:end="659:39">(<init pos:start="659:18" pos:end="659:21"><expr pos:start="659:18" pos:end="659:20"><name pos:start="659:18" pos:end="659:18">i</name><operator pos:start="659:19" pos:end="659:19">=</operator><literal type="number" pos:start="659:20" pos:end="659:20">0</literal></expr>;</init> <condition pos:start="659:23" pos:end="659:34"><expr pos:start="659:23" pos:end="659:33"><name pos:start="659:23" pos:end="659:23">i</name><operator pos:start="659:24" pos:end="659:24">&lt;</operator><name pos:start="659:25" pos:end="659:33">stream_ct</name></expr>;</condition> <incr pos:start="659:36" pos:end="659:38"><expr pos:start="659:36" pos:end="659:38"><name pos:start="659:36" pos:end="659:36">i</name><operator pos:start="659:37" pos:end="659:38">++</operator></expr></incr>)</control><block pos:start="659:40" pos:end="667:13">{<block_content pos:start="661:17" pos:end="665:49">

                <expr_stmt pos:start="661:17" pos:end="661:29"><expr pos:start="661:17" pos:end="661:28"><call pos:start="661:17" pos:end="661:28"><name pos:start="661:17" pos:end="661:24">get_le16</name><argument_list pos:start="661:25" pos:end="661:28">(<argument pos:start="661:26" pos:end="661:27"><expr pos:start="661:26" pos:end="661:27"><name pos:start="661:26" pos:end="661:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="663:17" pos:end="663:39"><expr pos:start="663:17" pos:end="663:38"><name pos:start="663:17" pos:end="663:23">ext_len</name> <operator pos:start="663:25" pos:end="663:25">=</operator> <call pos:start="663:27" pos:end="663:38"><name pos:start="663:27" pos:end="663:34">get_le16</name><argument_list pos:start="663:35" pos:end="663:38">(<argument pos:start="663:36" pos:end="663:37"><expr pos:start="663:36" pos:end="663:37"><name pos:start="663:36" pos:end="663:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="665:17" pos:end="665:49"><expr pos:start="665:17" pos:end="665:48"><call pos:start="665:17" pos:end="665:48"><name pos:start="665:17" pos:end="665:25">url_fseek</name><argument_list pos:start="665:26" pos:end="665:48">(<argument pos:start="665:27" pos:end="665:28"><expr pos:start="665:27" pos:end="665:28"><name pos:start="665:27" pos:end="665:28">pb</name></expr></argument>, <argument pos:start="665:31" pos:end="665:37"><expr pos:start="665:31" pos:end="665:37"><name pos:start="665:31" pos:end="665:37">ext_len</name></expr></argument>, <argument pos:start="665:40" pos:end="665:47"><expr pos:start="665:40" pos:end="665:47"><name pos:start="665:40" pos:end="665:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <for pos:start="671:13" pos:end="681:13">for <control pos:start="671:17" pos:end="671:44">(<init pos:start="671:18" pos:end="671:21"><expr pos:start="671:18" pos:end="671:20"><name pos:start="671:18" pos:end="671:18">i</name><operator pos:start="671:19" pos:end="671:19">=</operator><literal type="number" pos:start="671:20" pos:end="671:20">0</literal></expr>;</init> <condition pos:start="671:23" pos:end="671:39"><expr pos:start="671:23" pos:end="671:38"><name pos:start="671:23" pos:end="671:23">i</name><operator pos:start="671:24" pos:end="671:24">&lt;</operator><name pos:start="671:25" pos:end="671:38">payload_ext_ct</name></expr>;</condition> <incr pos:start="671:41" pos:end="671:43"><expr pos:start="671:41" pos:end="671:43"><name pos:start="671:41" pos:end="671:41">i</name><operator pos:start="671:42" pos:end="671:43">++</operator></expr></incr>)</control><block pos:start="671:45" pos:end="681:13">{<block_content pos:start="673:17" pos:end="679:49">

                <expr_stmt pos:start="673:17" pos:end="673:33"><expr pos:start="673:17" pos:end="673:32"><call pos:start="673:17" pos:end="673:32"><name pos:start="673:17" pos:end="673:24">get_guid</name><argument_list pos:start="673:25" pos:end="673:32">(<argument pos:start="673:26" pos:end="673:27"><expr pos:start="673:26" pos:end="673:27"><name pos:start="673:26" pos:end="673:27">pb</name></expr></argument>, <argument pos:start="673:30" pos:end="673:31"><expr pos:start="673:30" pos:end="673:31"><operator pos:start="673:30" pos:end="673:30">&amp;</operator><name pos:start="673:31" pos:end="673:31">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="675:17" pos:end="675:35"><expr pos:start="675:17" pos:end="675:34"><name pos:start="675:17" pos:end="675:21">ext_d</name><operator pos:start="675:22" pos:end="675:22">=</operator><call pos:start="675:23" pos:end="675:34"><name pos:start="675:23" pos:end="675:30">get_le16</name><argument_list pos:start="675:31" pos:end="675:34">(<argument pos:start="675:32" pos:end="675:33"><expr pos:start="675:32" pos:end="675:33"><name pos:start="675:32" pos:end="675:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="677:17" pos:end="677:37"><expr pos:start="677:17" pos:end="677:36"><name pos:start="677:17" pos:end="677:23">ext_len</name><operator pos:start="677:24" pos:end="677:24">=</operator><call pos:start="677:25" pos:end="677:36"><name pos:start="677:25" pos:end="677:32">get_le32</name><argument_list pos:start="677:33" pos:end="677:36">(<argument pos:start="677:34" pos:end="677:35"><expr pos:start="677:34" pos:end="677:35"><name pos:start="677:34" pos:end="677:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="679:17" pos:end="679:49"><expr pos:start="679:17" pos:end="679:48"><call pos:start="679:17" pos:end="679:48"><name pos:start="679:17" pos:end="679:25">url_fseek</name><argument_list pos:start="679:26" pos:end="679:48">(<argument pos:start="679:27" pos:end="679:28"><expr pos:start="679:27" pos:end="679:28"><name pos:start="679:27" pos:end="679:28">pb</name></expr></argument>, <argument pos:start="679:31" pos:end="679:37"><expr pos:start="679:31" pos:end="679:37"><name pos:start="679:31" pos:end="679:37">ext_len</name></expr></argument>, <argument pos:start="679:40" pos:end="679:47"><expr pos:start="679:40" pos:end="679:47"><name pos:start="679:40" pos:end="679:47">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <comment type="line" pos:start="685:13" pos:end="685:75">// there could be a optional stream properties object to follow</comment>

            <comment type="line" pos:start="687:13" pos:end="687:55">// if so the next iteration will pick it up</comment>

            <continue pos:start="689:13" pos:end="689:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="691:11" pos:end="703:9">else if <condition pos:start="691:19" pos:end="691:52">(<expr pos:start="691:20" pos:end="691:51"><operator pos:start="691:20" pos:end="691:20">!</operator><call pos:start="691:21" pos:end="691:51"><name pos:start="691:21" pos:end="691:27">guidcmp</name><argument_list pos:start="691:28" pos:end="691:51">(<argument pos:start="691:29" pos:end="691:30"><expr pos:start="691:29" pos:end="691:30"><operator pos:start="691:29" pos:end="691:29">&amp;</operator><name pos:start="691:30" pos:end="691:30">g</name></expr></argument>, <argument pos:start="691:33" pos:end="691:50"><expr pos:start="691:33" pos:end="691:50"><operator pos:start="691:33" pos:end="691:33">&amp;</operator><name pos:start="691:34" pos:end="691:50">ff_asf_head1_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="691:54" pos:end="703:9">{<block_content pos:start="693:13" pos:end="701:21">

            <decl_stmt pos:start="693:13" pos:end="693:23"><decl pos:start="693:13" pos:end="693:18"><type pos:start="693:13" pos:end="693:15"><name pos:start="693:13" pos:end="693:15">int</name></type> <name pos:start="693:17" pos:end="693:18">v1</name></decl>, <decl pos:start="693:21" pos:end="693:22"><type ref="prev" pos:start="693:13" pos:end="693:15"/><name pos:start="693:21" pos:end="693:22">v2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:29"><expr pos:start="695:13" pos:end="695:28"><call pos:start="695:13" pos:end="695:28"><name pos:start="695:13" pos:end="695:20">get_guid</name><argument_list pos:start="695:21" pos:end="695:28">(<argument pos:start="695:22" pos:end="695:23"><expr pos:start="695:22" pos:end="695:23"><name pos:start="695:22" pos:end="695:23">pb</name></expr></argument>, <argument pos:start="695:26" pos:end="695:27"><expr pos:start="695:26" pos:end="695:27"><operator pos:start="695:26" pos:end="695:26">&amp;</operator><name pos:start="695:27" pos:end="695:27">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="697:13" pos:end="697:30"><expr pos:start="697:13" pos:end="697:29"><name pos:start="697:13" pos:end="697:14">v1</name> <operator pos:start="697:16" pos:end="697:16">=</operator> <call pos:start="697:18" pos:end="697:29"><name pos:start="697:18" pos:end="697:25">get_le32</name><argument_list pos:start="697:26" pos:end="697:29">(<argument pos:start="697:27" pos:end="697:28"><expr pos:start="697:27" pos:end="697:28"><name pos:start="697:27" pos:end="697:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="699:13" pos:end="699:30"><expr pos:start="699:13" pos:end="699:29"><name pos:start="699:13" pos:end="699:14">v2</name> <operator pos:start="699:16" pos:end="699:16">=</operator> <call pos:start="699:18" pos:end="699:29"><name pos:start="699:18" pos:end="699:25">get_le16</name><argument_list pos:start="699:26" pos:end="699:29">(<argument pos:start="699:27" pos:end="699:28"><expr pos:start="699:27" pos:end="699:28"><name pos:start="699:27" pos:end="699:28">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="701:13" pos:end="701:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="703:11" pos:end="805:9">else if <condition pos:start="703:19" pos:end="703:55">(<expr pos:start="703:20" pos:end="703:54"><operator pos:start="703:20" pos:end="703:20">!</operator><call pos:start="703:21" pos:end="703:54"><name pos:start="703:21" pos:end="703:27">guidcmp</name><argument_list pos:start="703:28" pos:end="703:54">(<argument pos:start="703:29" pos:end="703:30"><expr pos:start="703:29" pos:end="703:30"><operator pos:start="703:29" pos:end="703:29">&amp;</operator><name pos:start="703:30" pos:end="703:30">g</name></expr></argument>, <argument pos:start="703:33" pos:end="703:53"><expr pos:start="703:33" pos:end="703:53"><operator pos:start="703:33" pos:end="703:33">&amp;</operator><name pos:start="703:34" pos:end="703:53">ff_asf_marker_header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="703:57" pos:end="805:9">{<block_content pos:start="705:13" pos:end="804:0">

            <decl_stmt pos:start="705:13" pos:end="705:35"><decl pos:start="705:13" pos:end="705:17"><type pos:start="705:13" pos:end="705:15"><name pos:start="705:13" pos:end="705:15">int</name></type> <name pos:start="705:17" pos:end="705:17">i</name></decl>, <decl pos:start="705:20" pos:end="705:24"><type ref="prev" pos:start="705:13" pos:end="705:15"/><name pos:start="705:20" pos:end="705:24">count</name></decl>, <decl pos:start="705:27" pos:end="705:34"><type ref="prev" pos:start="705:13" pos:end="705:15"/><name pos:start="705:27" pos:end="705:34">name_len</name></decl>;</decl_stmt>

            <decl_stmt pos:start="707:13" pos:end="707:28"><decl pos:start="707:13" pos:end="707:27"><type pos:start="707:13" pos:end="707:16"><name pos:start="707:13" pos:end="707:16">char</name></type> <name pos:start="707:18" pos:end="707:27"><name pos:start="707:18" pos:end="707:21">name</name><index pos:start="707:22" pos:end="707:27">[<expr pos:start="707:23" pos:end="707:26"><literal type="number" pos:start="707:23" pos:end="707:26">1024</literal></expr>]</index></name></decl>;</decl_stmt>



            <expr_stmt pos:start="711:13" pos:end="711:25"><expr pos:start="711:13" pos:end="711:24"><call pos:start="711:13" pos:end="711:24"><name pos:start="711:13" pos:end="711:20">get_le64</name><argument_list pos:start="711:21" pos:end="711:24">(<argument pos:start="711:22" pos:end="711:23"><expr pos:start="711:22" pos:end="711:23"><name pos:start="711:22" pos:end="711:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line" pos:start="711:38" pos:end="711:57">// reserved 16 bytes</comment>

            <expr_stmt pos:start="713:13" pos:end="713:25"><expr pos:start="713:13" pos:end="713:24"><call pos:start="713:13" pos:end="713:24"><name pos:start="713:13" pos:end="713:20">get_le64</name><argument_list pos:start="713:21" pos:end="713:24">(<argument pos:start="713:22" pos:end="713:23"><expr pos:start="713:22" pos:end="713:23"><name pos:start="713:22" pos:end="713:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line" pos:start="713:38" pos:end="713:43">// ...</comment>

            <expr_stmt pos:start="715:13" pos:end="715:33"><expr pos:start="715:13" pos:end="715:32"><name pos:start="715:13" pos:end="715:17">count</name> <operator pos:start="715:19" pos:end="715:19">=</operator> <call pos:start="715:21" pos:end="715:32"><name pos:start="715:21" pos:end="715:28">get_le32</name><argument_list pos:start="715:29" pos:end="715:32">(<argument pos:start="715:30" pos:end="715:31"><expr pos:start="715:30" pos:end="715:31"><name pos:start="715:30" pos:end="715:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:start="715:38" pos:end="715:53">// markers count</comment>

            <expr_stmt pos:start="717:13" pos:end="717:25"><expr pos:start="717:13" pos:end="717:24"><call pos:start="717:13" pos:end="717:24"><name pos:start="717:13" pos:end="717:20">get_le16</name><argument_list pos:start="717:21" pos:end="717:24">(<argument pos:start="717:22" pos:end="717:23"><expr pos:start="717:22" pos:end="717:23"><name pos:start="717:22" pos:end="717:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line" pos:start="717:38" pos:end="717:56">// reserved 2 bytes</comment>

            <expr_stmt pos:start="719:13" pos:end="719:36"><expr pos:start="719:13" pos:end="719:35"><name pos:start="719:13" pos:end="719:20">name_len</name> <operator pos:start="719:22" pos:end="719:22">=</operator> <call pos:start="719:24" pos:end="719:35"><name pos:start="719:24" pos:end="719:31">get_le16</name><argument_list pos:start="719:32" pos:end="719:35">(<argument pos:start="719:33" pos:end="719:34"><expr pos:start="719:33" pos:end="719:34"><name pos:start="719:33" pos:end="719:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="719:38" pos:end="719:51">// name length</comment>

            <for pos:start="721:13" pos:end="725:13">for<control pos:start="721:16" pos:end="721:35">(<init pos:start="721:17" pos:end="721:20"><expr pos:start="721:17" pos:end="721:19"><name pos:start="721:17" pos:end="721:17">i</name><operator pos:start="721:18" pos:end="721:18">=</operator><literal type="number" pos:start="721:19" pos:end="721:19">0</literal></expr>;</init><condition pos:start="721:21" pos:end="721:31"><expr pos:start="721:21" pos:end="721:30"><name pos:start="721:21" pos:end="721:21">i</name><operator pos:start="721:22" pos:end="721:22">&lt;</operator><name pos:start="721:23" pos:end="721:30">name_len</name></expr>;</condition><incr pos:start="721:32" pos:end="721:34"><expr pos:start="721:32" pos:end="721:34"><name pos:start="721:32" pos:end="721:32">i</name><operator pos:start="721:33" pos:end="721:34">++</operator></expr></incr>)</control><block pos:start="721:36" pos:end="725:13">{<block_content pos:start="723:17" pos:end="723:29">

                <expr_stmt pos:start="723:17" pos:end="723:29"><expr pos:start="723:17" pos:end="723:28"><call pos:start="723:17" pos:end="723:28"><name pos:start="723:17" pos:end="723:24">get_byte</name><argument_list pos:start="723:25" pos:end="723:28">(<argument pos:start="723:26" pos:end="723:27"><expr pos:start="723:26" pos:end="723:27"><name pos:start="723:26" pos:end="723:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="723:31" pos:end="723:46">// skip the name</comment>

            </block_content>}</block></for>



            <for pos:start="729:13" pos:end="804:0">for<control pos:start="729:16" pos:end="729:32">(<init pos:start="729:17" pos:end="729:20"><expr pos:start="729:17" pos:end="729:19"><name pos:start="729:17" pos:end="729:17">i</name><operator pos:start="729:18" pos:end="729:18">=</operator><literal type="number" pos:start="729:19" pos:end="729:19">0</literal></expr>;</init><condition pos:start="729:21" pos:end="729:28"><expr pos:start="729:21" pos:end="729:27"><name pos:start="729:21" pos:end="729:21">i</name><operator pos:start="729:22" pos:end="729:22">&lt;</operator><name pos:start="729:23" pos:end="729:27">count</name></expr>;</condition><incr pos:start="729:29" pos:end="729:31"><expr pos:start="729:29" pos:end="729:31"><name pos:start="729:29" pos:end="729:29">i</name><operator pos:start="729:30" pos:end="729:31">++</operator></expr></incr>)</control><block pos:start="729:33" pos:end="804:0">{<block_content pos:start="731:17" pos:end="751:98">

                <decl_stmt pos:start="731:17" pos:end="731:34"><decl pos:start="731:17" pos:end="731:33"><type pos:start="731:17" pos:end="731:23"><name pos:start="731:17" pos:end="731:23">int64_t</name></type> <name pos:start="731:25" pos:end="731:33">pres_time</name></decl>;</decl_stmt>

                <decl_stmt pos:start="733:17" pos:end="733:29"><decl pos:start="733:17" pos:end="733:28"><type pos:start="733:17" pos:end="733:19"><name pos:start="733:17" pos:end="733:19">int</name></type> <name pos:start="733:21" pos:end="733:28">name_len</name></decl>;</decl_stmt>



                <expr_stmt pos:start="737:17" pos:end="737:29"><expr pos:start="737:17" pos:end="737:28"><call pos:start="737:17" pos:end="737:28"><name pos:start="737:17" pos:end="737:24">get_le64</name><argument_list pos:start="737:25" pos:end="737:28">(<argument pos:start="737:26" pos:end="737:27"><expr pos:start="737:26" pos:end="737:27"><name pos:start="737:26" pos:end="737:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line" pos:start="737:43" pos:end="737:60">// offset, 8 bytes</comment>

                <expr_stmt pos:start="739:17" pos:end="739:41"><expr pos:start="739:17" pos:end="739:40"><name pos:start="739:17" pos:end="739:25">pres_time</name> <operator pos:start="739:27" pos:end="739:27">=</operator> <call pos:start="739:29" pos:end="739:40"><name pos:start="739:29" pos:end="739:36">get_le64</name><argument_list pos:start="739:37" pos:end="739:40">(<argument pos:start="739:38" pos:end="739:39"><expr pos:start="739:38" pos:end="739:39"><name pos:start="739:38" pos:end="739:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="739:43" pos:end="739:62">// presentation time</comment>

                <expr_stmt pos:start="741:17" pos:end="741:29"><expr pos:start="741:17" pos:end="741:28"><call pos:start="741:17" pos:end="741:28"><name pos:start="741:17" pos:end="741:24">get_le16</name><argument_list pos:start="741:25" pos:end="741:28">(<argument pos:start="741:26" pos:end="741:27"><expr pos:start="741:26" pos:end="741:27"><name pos:start="741:26" pos:end="741:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line" pos:start="741:43" pos:end="741:57">// entry length</comment>

                <expr_stmt pos:start="743:17" pos:end="743:29"><expr pos:start="743:17" pos:end="743:28"><call pos:start="743:17" pos:end="743:28"><name pos:start="743:17" pos:end="743:24">get_le32</name><argument_list pos:start="743:25" pos:end="743:28">(<argument pos:start="743:26" pos:end="743:27"><expr pos:start="743:26" pos:end="743:27"><name pos:start="743:26" pos:end="743:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line" pos:start="743:43" pos:end="743:54">// send time</comment>

                <expr_stmt pos:start="745:17" pos:end="745:29"><expr pos:start="745:17" pos:end="745:28"><call pos:start="745:17" pos:end="745:28"><name pos:start="745:17" pos:end="745:24">get_le32</name><argument_list pos:start="745:25" pos:end="745:28">(<argument pos:start="745:26" pos:end="745:27"><expr pos:start="745:26" pos:end="745:27"><name pos:start="745:26" pos:end="745:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line" pos:start="745:43" pos:end="745:50">// flags</comment>

                <expr_stmt pos:start="747:17" pos:end="747:40"><expr pos:start="747:17" pos:end="747:39"><name pos:start="747:17" pos:end="747:24">name_len</name> <operator pos:start="747:26" pos:end="747:26">=</operator> <call pos:start="747:28" pos:end="747:39"><name pos:start="747:28" pos:end="747:35">get_le32</name><argument_list pos:start="747:36" pos:end="747:39">(<argument pos:start="747:37" pos:end="747:38"><expr pos:start="747:37" pos:end="747:38"><name pos:start="747:37" pos:end="747:38">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="747:43" pos:end="747:56">// name length</comment>

                <expr_stmt pos:start="749:17" pos:end="749:70"><expr pos:start="749:17" pos:end="749:69"><call pos:start="749:17" pos:end="749:69"><name pos:start="749:17" pos:end="749:31">get_str16_nolen</name><argument_list pos:start="749:32" pos:end="749:69">(<argument pos:start="749:33" pos:end="749:34"><expr pos:start="749:33" pos:end="749:34"><name pos:start="749:33" pos:end="749:34">pb</name></expr></argument>, <argument pos:start="749:37" pos:end="749:48"><expr pos:start="749:37" pos:end="749:48"><name pos:start="749:37" pos:end="749:44">name_len</name> <operator pos:start="749:46" pos:end="749:46">*</operator> <literal type="number" pos:start="749:48" pos:end="749:48">2</literal></expr></argument>, <argument pos:start="749:51" pos:end="749:54"><expr pos:start="749:51" pos:end="749:54"><name pos:start="749:51" pos:end="749:54">name</name></expr></argument>, <argument pos:start="749:57" pos:end="749:68"><expr pos:start="749:57" pos:end="749:68"><sizeof pos:start="749:57" pos:end="749:68">sizeof<argument_list pos:start="749:63" pos:end="749:68">(<argument pos:start="749:64" pos:end="749:67"><expr pos:start="749:64" pos:end="749:67"><name pos:start="749:64" pos:end="749:67">name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <macro pos:start="751:17" pos:end="751:97"><name pos:start="751:17" pos:end="751:30">ff_new_chapter</name><argument_list pos:start="751:31" pos:end="751:97">(<argument pos:start="751:32" pos:end="751:32">s</argument>, <argument pos:start="751:35" pos:end="751:35">i</argument>, <argument pos:start="751:38" pos:end="751:51">(AVRational){<literal type="number" pos:start="751:51" pos:end="751:51">1</literal></argument>, <argument pos:start="751:54" pos:end="751:62"><literal type="number" pos:start="751:54" pos:end="751:61">10000000</literal>}</argument>, <argument pos:start="751:65" pos:end="751:73">pres_time</argument>, <argument pos:start="751:76" pos:end="751:89">AV_NOPTS_VALUE</argument>, <argument pos:start="751:92" pos:end="751:95">name</argument> )</argument_list></macro><empty_stmt pos:start="751:98" pos:end="751:98">;</empty_stmt>

            </block_content>}</block></for>

<cpp:if pos:start="755:1" pos:end="755:5">#<cpp:directive pos:start="755:2" pos:end="755:3">if</cpp:directive> <expr pos:start="755:5" pos:end="755:5"><literal type="number" pos:start="755:5" pos:end="755:5">0</literal></expr></cpp:if>

        } else if (!guidcmp(&amp;g, &amp;ff_asf_codec_comment_header)) {

            int len, v1, n, num;

            char str[256], *q;

            char tag[16];



            get_guid(pb, &amp;g);

            print_guid(&amp;g);



            n = get_le32(pb);

            for(i=0;i&lt;n;i++) {

                num = get_le16(pb); <comment type="block" pos:start="777:37" pos:end="777:55">/* stream number */</comment>

                get_str16(pb, str, sizeof(str));

                get_str16(pb, str, sizeof(str));

                len = get_le16(pb);

                q = tag;

                while (len &gt; 0) {

                    v1 = get_byte(pb);

                    if ((q - tag) &lt; sizeof(tag) - 1)

                        *q++ = v1;

                    len--;

                }

                *q = '\0';

            }

<cpp:endif pos:start="803:1" pos:end="803:6">#<cpp:directive pos:start="803:2" pos:end="803:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <if type="elseif" pos:start="805:11" pos:end="809:9">else if <condition pos:start="805:19" pos:end="805:32">(<expr pos:start="805:20" pos:end="805:31"><call pos:start="805:20" pos:end="805:31"><name pos:start="805:20" pos:end="805:27">url_feof</name><argument_list pos:start="805:28" pos:end="805:31">(<argument pos:start="805:29" pos:end="805:30"><expr pos:start="805:29" pos:end="805:30"><name pos:start="805:29" pos:end="805:30">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="805:34" pos:end="809:9">{<block_content pos:start="807:13" pos:end="807:22">

            <return pos:start="807:13" pos:end="807:22">return <expr pos:start="807:20" pos:end="807:21"><operator pos:start="807:20" pos:end="807:20">-</operator><literal type="number" pos:start="807:21" pos:end="807:21">1</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="809:11" pos:end="829:9">else <block pos:start="809:16" pos:end="829:9">{<block_content pos:start="811:13" pos:end="827:13">

            <if_stmt pos:start="811:13" pos:end="827:13"><if pos:start="811:13" pos:end="827:13">if <condition pos:start="811:16" pos:end="811:27">(<expr pos:start="811:17" pos:end="811:26"><operator pos:start="811:17" pos:end="811:17">!</operator><name pos:start="811:18" pos:end="811:26"><name pos:start="811:18" pos:end="811:18">s</name><operator pos:start="811:19" pos:end="811:20">-&gt;</operator><name pos:start="811:21" pos:end="811:26">keylen</name></name></expr>)</condition> <block pos:start="811:29" pos:end="827:13">{<block_content pos:start="813:17" pos:end="825:17">

                <if_stmt pos:start="813:17" pos:end="825:17"><if pos:start="813:17" pos:end="817:17">if <condition pos:start="813:20" pos:end="813:61">(<expr pos:start="813:21" pos:end="813:60"><operator pos:start="813:21" pos:end="813:21">!</operator><call pos:start="813:22" pos:end="813:60"><name pos:start="813:22" pos:end="813:28">guidcmp</name><argument_list pos:start="813:29" pos:end="813:60">(<argument pos:start="813:30" pos:end="813:31"><expr pos:start="813:30" pos:end="813:31"><operator pos:start="813:30" pos:end="813:30">&amp;</operator><name pos:start="813:31" pos:end="813:31">g</name></expr></argument>, <argument pos:start="813:34" pos:end="813:59"><expr pos:start="813:34" pos:end="813:59"><operator pos:start="813:34" pos:end="813:34">&amp;</operator><name pos:start="813:35" pos:end="813:59">ff_asf_content_encryption</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="813:63" pos:end="817:17">{<block_content pos:start="815:21" pos:end="815:109">

                    <expr_stmt pos:start="815:21" pos:end="815:109"><expr pos:start="815:21" pos:end="815:108"><call pos:start="815:21" pos:end="815:108"><name pos:start="815:21" pos:end="815:26">av_log</name><argument_list pos:start="815:27" pos:end="815:108">(<argument pos:start="815:28" pos:end="815:28"><expr pos:start="815:28" pos:end="815:28"><name pos:start="815:28" pos:end="815:28">s</name></expr></argument>, <argument pos:start="815:31" pos:end="815:44"><expr pos:start="815:31" pos:end="815:44"><name pos:start="815:31" pos:end="815:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="815:47" pos:end="815:107"><expr pos:start="815:47" pos:end="815:107"><literal type="string" pos:start="815:47" pos:end="815:107">"DRM protected stream detected, decoding will likely fail!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="817:19" pos:end="821:17">else if <condition pos:start="817:27" pos:end="817:72">(<expr pos:start="817:28" pos:end="817:71"><operator pos:start="817:28" pos:end="817:28">!</operator><call pos:start="817:29" pos:end="817:71"><name pos:start="817:29" pos:end="817:35">guidcmp</name><argument_list pos:start="817:36" pos:end="817:71">(<argument pos:start="817:37" pos:end="817:38"><expr pos:start="817:37" pos:end="817:38"><operator pos:start="817:37" pos:end="817:37">&amp;</operator><name pos:start="817:38" pos:end="817:38">g</name></expr></argument>, <argument pos:start="817:41" pos:end="817:70"><expr pos:start="817:41" pos:end="817:70"><operator pos:start="817:41" pos:end="817:41">&amp;</operator><name pos:start="817:42" pos:end="817:70">ff_asf_ext_content_encryption</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="817:74" pos:end="821:17">{<block_content pos:start="819:21" pos:end="819:113">

                    <expr_stmt pos:start="819:21" pos:end="819:113"><expr pos:start="819:21" pos:end="819:112"><call pos:start="819:21" pos:end="819:112"><name pos:start="819:21" pos:end="819:26">av_log</name><argument_list pos:start="819:27" pos:end="819:112">(<argument pos:start="819:28" pos:end="819:28"><expr pos:start="819:28" pos:end="819:28"><name pos:start="819:28" pos:end="819:28">s</name></expr></argument>, <argument pos:start="819:31" pos:end="819:44"><expr pos:start="819:31" pos:end="819:44"><name pos:start="819:31" pos:end="819:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="819:47" pos:end="819:111"><expr pos:start="819:47" pos:end="819:111"><literal type="string" pos:start="819:47" pos:end="819:111">"Ext DRM protected stream detected, decoding will likely fail!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="821:19" pos:end="825:17">else if <condition pos:start="821:27" pos:end="821:67">(<expr pos:start="821:28" pos:end="821:66"><operator pos:start="821:28" pos:end="821:28">!</operator><call pos:start="821:29" pos:end="821:66"><name pos:start="821:29" pos:end="821:35">guidcmp</name><argument_list pos:start="821:36" pos:end="821:66">(<argument pos:start="821:37" pos:end="821:38"><expr pos:start="821:37" pos:end="821:38"><operator pos:start="821:37" pos:end="821:37">&amp;</operator><name pos:start="821:38" pos:end="821:38">g</name></expr></argument>, <argument pos:start="821:41" pos:end="821:65"><expr pos:start="821:41" pos:end="821:65"><operator pos:start="821:41" pos:end="821:41">&amp;</operator><name pos:start="821:42" pos:end="821:65">ff_asf_digital_signature</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="821:69" pos:end="825:17">{<block_content pos:start="823:21" pos:end="823:106">

                    <expr_stmt pos:start="823:21" pos:end="823:106"><expr pos:start="823:21" pos:end="823:105"><call pos:start="823:21" pos:end="823:105"><name pos:start="823:21" pos:end="823:26">av_log</name><argument_list pos:start="823:27" pos:end="823:105">(<argument pos:start="823:28" pos:end="823:28"><expr pos:start="823:28" pos:end="823:28"><name pos:start="823:28" pos:end="823:28">s</name></expr></argument>, <argument pos:start="823:31" pos:end="823:44"><expr pos:start="823:31" pos:end="823:44"><name pos:start="823:31" pos:end="823:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="823:47" pos:end="823:104"><expr pos:start="823:47" pos:end="823:104"><literal type="string" pos:start="823:47" pos:end="823:104">"Digital signature detected, decoding will likely fail!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="831:9" pos:end="833:115"><if pos:start="831:9" pos:end="833:115">if<condition pos:start="831:11" pos:end="831:41">(<expr pos:start="831:12" pos:end="831:40"><call pos:start="831:12" pos:end="831:24"><name pos:start="831:12" pos:end="831:20">url_ftell</name><argument_list pos:start="831:21" pos:end="831:24">(<argument pos:start="831:22" pos:end="831:23"><expr pos:start="831:22" pos:end="831:23"><name pos:start="831:22" pos:end="831:23">pb</name></expr></argument>)</argument_list></call> <operator pos:start="831:26" pos:end="831:27">!=</operator> <name pos:start="831:29" pos:end="831:32">gpos</name> <operator pos:start="831:34" pos:end="831:34">+</operator> <name pos:start="831:36" pos:end="831:40">gsize</name></expr>)</condition><block type="pseudo" pos:start="833:13" pos:end="833:115"><block_content pos:start="833:13" pos:end="833:115">

            <expr_stmt pos:start="833:13" pos:end="833:115"><expr pos:start="833:13" pos:end="833:114"><call pos:start="833:13" pos:end="833:114"><name pos:start="833:13" pos:end="833:18">av_log</name><argument_list pos:start="833:19" pos:end="833:114">(<argument pos:start="833:20" pos:end="833:20"><expr pos:start="833:20" pos:end="833:20"><name pos:start="833:20" pos:end="833:20">s</name></expr></argument>, <argument pos:start="833:23" pos:end="833:34"><expr pos:start="833:23" pos:end="833:34"><name pos:start="833:23" pos:end="833:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="833:37" pos:end="833:86"><expr pos:start="833:37" pos:end="833:86"><literal type="string" pos:start="833:37" pos:end="833:61">"gpos mismatch our pos=%"</literal><name pos:start="833:62" pos:end="833:67">PRIu64</name><literal type="string" pos:start="833:68" pos:end="833:76">", end=%"</literal><name pos:start="833:77" pos:end="833:82">PRIu64</name><literal type="string" pos:start="833:83" pos:end="833:86">"\n"</literal></expr></argument>, <argument pos:start="833:89" pos:end="833:106"><expr pos:start="833:89" pos:end="833:106"><call pos:start="833:89" pos:end="833:101"><name pos:start="833:89" pos:end="833:97">url_ftell</name><argument_list pos:start="833:98" pos:end="833:101">(<argument pos:start="833:99" pos:end="833:100"><expr pos:start="833:99" pos:end="833:100"><name pos:start="833:99" pos:end="833:100">pb</name></expr></argument>)</argument_list></call><operator pos:start="833:102" pos:end="833:102">-</operator><name pos:start="833:103" pos:end="833:106">gpos</name></expr></argument>, <argument pos:start="833:109" pos:end="833:113"><expr pos:start="833:109" pos:end="833:113"><name pos:start="833:109" pos:end="833:113">gsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="835:9" pos:end="835:46"><expr pos:start="835:9" pos:end="835:45"><call pos:start="835:9" pos:end="835:45"><name pos:start="835:9" pos:end="835:17">url_fseek</name><argument_list pos:start="835:18" pos:end="835:45">(<argument pos:start="835:19" pos:end="835:20"><expr pos:start="835:19" pos:end="835:20"><name pos:start="835:19" pos:end="835:20">pb</name></expr></argument>, <argument pos:start="835:23" pos:end="835:34"><expr pos:start="835:23" pos:end="835:34"><name pos:start="835:23" pos:end="835:26">gpos</name> <operator pos:start="835:28" pos:end="835:28">+</operator> <name pos:start="835:30" pos:end="835:34">gsize</name></expr></argument>, <argument pos:start="835:37" pos:end="835:44"><expr pos:start="835:37" pos:end="835:44"><name pos:start="835:37" pos:end="835:44">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="839:5" pos:end="839:21"><expr pos:start="839:5" pos:end="839:20"><call pos:start="839:5" pos:end="839:20"><name pos:start="839:5" pos:end="839:12">get_guid</name><argument_list pos:start="839:13" pos:end="839:20">(<argument pos:start="839:14" pos:end="839:15"><expr pos:start="839:14" pos:end="839:15"><name pos:start="839:14" pos:end="839:15">pb</name></expr></argument>, <argument pos:start="839:18" pos:end="839:19"><expr pos:start="839:18" pos:end="839:19"><operator pos:start="839:18" pos:end="839:18">&amp;</operator><name pos:start="839:19" pos:end="839:19">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="841:5" pos:end="841:17"><expr pos:start="841:5" pos:end="841:16"><call pos:start="841:5" pos:end="841:16"><name pos:start="841:5" pos:end="841:12">get_le64</name><argument_list pos:start="841:13" pos:end="841:16">(<argument pos:start="841:14" pos:end="841:15"><expr pos:start="841:14" pos:end="841:15"><name pos:start="841:14" pos:end="841:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="843:5" pos:end="843:17"><expr pos:start="843:5" pos:end="843:16"><call pos:start="843:5" pos:end="843:16"><name pos:start="843:5" pos:end="843:12">get_byte</name><argument_list pos:start="843:13" pos:end="843:16">(<argument pos:start="843:14" pos:end="843:15"><expr pos:start="843:14" pos:end="843:15"><name pos:start="843:14" pos:end="843:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="845:5" pos:end="845:17"><expr pos:start="845:5" pos:end="845:16"><call pos:start="845:5" pos:end="845:16"><name pos:start="845:5" pos:end="845:12">get_byte</name><argument_list pos:start="845:13" pos:end="845:16">(<argument pos:start="845:14" pos:end="845:15"><expr pos:start="845:14" pos:end="845:15"><name pos:start="845:14" pos:end="845:15">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="847:5" pos:end="849:18"><if pos:start="847:5" pos:end="849:18">if <condition pos:start="847:8" pos:end="847:21">(<expr pos:start="847:9" pos:end="847:20"><call pos:start="847:9" pos:end="847:20"><name pos:start="847:9" pos:end="847:16">url_feof</name><argument_list pos:start="847:17" pos:end="847:20">(<argument pos:start="847:18" pos:end="847:19"><expr pos:start="847:18" pos:end="847:19"><name pos:start="847:18" pos:end="847:19">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="849:9" pos:end="849:18"><block_content pos:start="849:9" pos:end="849:18">

        <return pos:start="849:9" pos:end="849:18">return <expr pos:start="849:16" pos:end="849:17"><operator pos:start="849:16" pos:end="849:16">-</operator><literal type="number" pos:start="849:17" pos:end="849:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="851:5" pos:end="851:37"><expr pos:start="851:5" pos:end="851:36"><name pos:start="851:5" pos:end="851:20"><name pos:start="851:5" pos:end="851:7">asf</name><operator pos:start="851:8" pos:end="851:9">-&gt;</operator><name pos:start="851:10" pos:end="851:20">data_offset</name></name> <operator pos:start="851:22" pos:end="851:22">=</operator> <call pos:start="851:24" pos:end="851:36"><name pos:start="851:24" pos:end="851:32">url_ftell</name><argument_list pos:start="851:33" pos:end="851:36">(<argument pos:start="851:34" pos:end="851:35"><expr pos:start="851:34" pos:end="851:35"><name pos:start="851:34" pos:end="851:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="853:5" pos:end="853:30"><expr pos:start="853:5" pos:end="853:29"><name pos:start="853:5" pos:end="853:25"><name pos:start="853:5" pos:end="853:7">asf</name><operator pos:start="853:8" pos:end="853:9">-&gt;</operator><name pos:start="853:10" pos:end="853:25">packet_size_left</name></name> <operator pos:start="853:27" pos:end="853:27">=</operator> <literal type="number" pos:start="853:29" pos:end="853:29">0</literal></expr>;</expr_stmt>





    <for pos:start="859:5" pos:end="905:5">for<control pos:start="859:8" pos:end="859:24">(<init pos:start="859:9" pos:end="859:12"><expr pos:start="859:9" pos:end="859:11"><name pos:start="859:9" pos:end="859:9">i</name><operator pos:start="859:10" pos:end="859:10">=</operator><literal type="number" pos:start="859:11" pos:end="859:11">0</literal></expr>;</init> <condition pos:start="859:14" pos:end="859:19"><expr pos:start="859:14" pos:end="859:18"><name pos:start="859:14" pos:end="859:14">i</name><operator pos:start="859:15" pos:end="859:15">&lt;</operator><literal type="number" pos:start="859:16" pos:end="859:18">128</literal></expr>;</condition> <incr pos:start="859:21" pos:end="859:23"><expr pos:start="859:21" pos:end="859:23"><name pos:start="859:21" pos:end="859:21">i</name><operator pos:start="859:22" pos:end="859:23">++</operator></expr></incr>)</control><block pos:start="859:25" pos:end="905:5">{<block_content pos:start="861:9" pos:end="903:9">

        <decl_stmt pos:start="861:9" pos:end="861:43"><decl pos:start="861:9" pos:end="861:42"><type pos:start="861:9" pos:end="861:11"><name pos:start="861:9" pos:end="861:11">int</name></type> <name pos:start="861:13" pos:end="861:22">stream_num</name><init pos:start="861:23" pos:end="861:42">= <expr pos:start="861:25" pos:end="861:42"><name pos:start="861:25" pos:end="861:42"><name pos:start="861:25" pos:end="861:27">asf</name><operator pos:start="861:28" pos:end="861:29">-&gt;</operator><name pos:start="861:30" pos:end="861:39">asfid2avid</name><index pos:start="861:40" pos:end="861:42">[<expr pos:start="861:41" pos:end="861:41"><name pos:start="861:41" pos:end="861:41">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="863:9" pos:end="903:9"><if pos:start="863:9" pos:end="903:9">if<condition pos:start="863:11" pos:end="863:25">(<expr pos:start="863:12" pos:end="863:24"><name pos:start="863:12" pos:end="863:21">stream_num</name><operator pos:start="863:22" pos:end="863:23">&gt;=</operator><literal type="number" pos:start="863:24" pos:end="863:24">0</literal></expr>)</condition><block pos:start="863:26" pos:end="903:9">{<block_content pos:start="865:13" pos:end="901:13">

            <decl_stmt pos:start="865:13" pos:end="865:50"><decl pos:start="865:13" pos:end="865:49"><type pos:start="865:13" pos:end="865:22"><name pos:start="865:13" pos:end="865:20">AVStream</name> <modifier pos:start="865:22" pos:end="865:22">*</modifier></type><name pos:start="865:23" pos:end="865:24">st</name> <init pos:start="865:26" pos:end="865:49">= <expr pos:start="865:28" pos:end="865:49"><name pos:start="865:28" pos:end="865:49"><name pos:start="865:28" pos:end="865:28">s</name><operator pos:start="865:29" pos:end="865:30">-&gt;</operator><name pos:start="865:31" pos:end="865:37">streams</name><index pos:start="865:38" pos:end="865:49">[<expr pos:start="865:39" pos:end="865:48"><name pos:start="865:39" pos:end="865:48">stream_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="867:13" pos:end="869:49"><if pos:start="867:13" pos:end="869:49">if <condition pos:start="867:16" pos:end="867:37">(<expr pos:start="867:17" pos:end="867:36"><operator pos:start="867:17" pos:end="867:17">!</operator><name pos:start="867:18" pos:end="867:36"><name pos:start="867:18" pos:end="867:19">st</name><operator pos:start="867:20" pos:end="867:21">-&gt;</operator><name pos:start="867:22" pos:end="867:26">codec</name><operator pos:start="867:27" pos:end="867:28">-&gt;</operator><name pos:start="867:29" pos:end="867:36">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="869:17" pos:end="869:49"><block_content pos:start="869:17" pos:end="869:49">

                <expr_stmt pos:start="869:17" pos:end="869:49"><expr pos:start="869:17" pos:end="869:48"><name pos:start="869:17" pos:end="869:35"><name pos:start="869:17" pos:end="869:18">st</name><operator pos:start="869:19" pos:end="869:20">-&gt;</operator><name pos:start="869:21" pos:end="869:25">codec</name><operator pos:start="869:26" pos:end="869:27">-&gt;</operator><name pos:start="869:28" pos:end="869:35">bit_rate</name></name> <operator pos:start="869:37" pos:end="869:37">=</operator> <name pos:start="869:39" pos:end="869:48"><name pos:start="869:39" pos:end="869:45">bitrate</name><index pos:start="869:46" pos:end="869:48">[<expr pos:start="869:47" pos:end="869:47"><name pos:start="869:47" pos:end="869:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="871:13" pos:end="877:59"><if pos:start="871:13" pos:end="877:59">if <condition pos:start="871:16" pos:end="871:49">(<expr pos:start="871:17" pos:end="871:48"><name pos:start="871:17" pos:end="871:22"><name pos:start="871:17" pos:end="871:19">dar</name><index pos:start="871:20" pos:end="871:22">[<expr pos:start="871:21" pos:end="871:21"><name pos:start="871:21" pos:end="871:21">i</name></expr>]</index></name><operator pos:start="871:23" pos:end="871:23">.</operator><name pos:start="871:24" pos:end="871:26">num</name> <operator pos:start="871:28" pos:end="871:28">&gt;</operator> <literal type="number" pos:start="871:30" pos:end="871:30">0</literal> <operator pos:start="871:32" pos:end="871:33">&amp;&amp;</operator> <name pos:start="871:35" pos:end="871:40"><name pos:start="871:35" pos:end="871:37">dar</name><index pos:start="871:38" pos:end="871:40">[<expr pos:start="871:39" pos:end="871:39"><name pos:start="871:39" pos:end="871:39">i</name></expr>]</index></name><operator pos:start="871:41" pos:end="871:41">.</operator><name pos:start="871:42" pos:end="871:44">den</name> <operator pos:start="871:46" pos:end="871:46">&gt;</operator> <literal type="number" pos:start="871:48" pos:end="871:48">0</literal></expr>)</condition><block type="pseudo" pos:start="873:17" pos:end="877:59"><block_content pos:start="873:17" pos:end="877:59">

                <expr_stmt pos:start="873:17" pos:end="877:59"><expr pos:start="873:17" pos:end="877:58"><call pos:start="873:17" pos:end="877:58"><name pos:start="873:17" pos:end="873:25">av_reduce</name><argument_list pos:start="873:26" pos:end="877:58">(<argument pos:start="873:27" pos:end="873:54"><expr pos:start="873:27" pos:end="873:54"><operator pos:start="873:27" pos:end="873:27">&amp;</operator><name pos:start="873:28" pos:end="873:54"><name pos:start="873:28" pos:end="873:29">st</name><operator pos:start="873:30" pos:end="873:31">-&gt;</operator><name pos:start="873:32" pos:end="873:50">sample_aspect_ratio</name><operator pos:start="873:51" pos:end="873:51">.</operator><name pos:start="873:52" pos:end="873:54">num</name></name></expr></argument>,

                          <argument pos:start="875:27" pos:end="875:54"><expr pos:start="875:27" pos:end="875:54"><operator pos:start="875:27" pos:end="875:27">&amp;</operator><name pos:start="875:28" pos:end="875:54"><name pos:start="875:28" pos:end="875:29">st</name><operator pos:start="875:30" pos:end="875:31">-&gt;</operator><name pos:start="875:32" pos:end="875:50">sample_aspect_ratio</name><operator pos:start="875:51" pos:end="875:51">.</operator><name pos:start="875:52" pos:end="875:54">den</name></name></expr></argument>,

                          <argument pos:start="877:27" pos:end="877:36"><expr pos:start="877:27" pos:end="877:36"><name pos:start="877:27" pos:end="877:32"><name pos:start="877:27" pos:end="877:29">dar</name><index pos:start="877:30" pos:end="877:32">[<expr pos:start="877:31" pos:end="877:31"><name pos:start="877:31" pos:end="877:31">i</name></expr>]</index></name><operator pos:start="877:33" pos:end="877:33">.</operator><name pos:start="877:34" pos:end="877:36">num</name></expr></argument>, <argument pos:start="877:39" pos:end="877:48"><expr pos:start="877:39" pos:end="877:48"><name pos:start="877:39" pos:end="877:44"><name pos:start="877:39" pos:end="877:41">dar</name><index pos:start="877:42" pos:end="877:44">[<expr pos:start="877:43" pos:end="877:43"><name pos:start="877:43" pos:end="877:43">i</name></expr>]</index></name><operator pos:start="877:45" pos:end="877:45">.</operator><name pos:start="877:46" pos:end="877:48">den</name></expr></argument>, <argument pos:start="877:51" pos:end="877:57"><expr pos:start="877:51" pos:end="877:57"><name pos:start="877:51" pos:end="877:57">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line" pos:start="879:1" pos:end="879:133">//av_log(s, AV_LOG_ERROR, "dar %d:%d sar=%d:%d\n", dar[i].num, dar[i].den, st-&gt;sample_aspect_ratio.num, st-&gt;sample_aspect_ratio.den);</comment>



            <comment type="line" pos:start="883:13" pos:end="883:62">// copy and convert language codes to the frontend</comment>

            <if_stmt pos:start="885:13" pos:end="901:13"><if pos:start="885:13" pos:end="901:13">if <condition pos:start="885:16" pos:end="885:60">(<expr pos:start="885:17" pos:end="885:59"><name pos:start="885:17" pos:end="885:31"><name pos:start="885:17" pos:end="885:19">asf</name><operator pos:start="885:20" pos:end="885:21">-&gt;</operator><name pos:start="885:22" pos:end="885:28">streams</name><index pos:start="885:29" pos:end="885:31">[<expr pos:start="885:30" pos:end="885:30"><name pos:start="885:30" pos:end="885:30">i</name></expr>]</index></name><operator pos:start="885:32" pos:end="885:32">.</operator><name pos:start="885:33" pos:end="885:53">stream_language_index</name> <operator pos:start="885:55" pos:end="885:55">&lt;</operator> <literal type="number" pos:start="885:57" pos:end="885:59">128</literal></expr>)</condition> <block pos:start="885:62" pos:end="901:13">{<block_content pos:start="887:17" pos:end="899:17">

                <decl_stmt pos:start="887:17" pos:end="887:99"><decl pos:start="887:17" pos:end="887:98"><type pos:start="887:17" pos:end="887:28"><specifier pos:start="887:17" pos:end="887:21">const</specifier> <name pos:start="887:23" pos:end="887:26">char</name> <modifier pos:start="887:28" pos:end="887:28">*</modifier></type><name pos:start="887:29" pos:end="887:35">rfc1766</name> <init pos:start="887:37" pos:end="887:98">= <expr pos:start="887:39" pos:end="887:98"><name pos:start="887:39" pos:end="887:98"><name pos:start="887:39" pos:end="887:41">asf</name><operator pos:start="887:42" pos:end="887:43">-&gt;</operator><name pos:start="887:44" pos:end="887:59">stream_languages</name><index pos:start="887:60" pos:end="887:98">[<expr pos:start="887:61" pos:end="887:97"><name pos:start="887:61" pos:end="887:75"><name pos:start="887:61" pos:end="887:63">asf</name><operator pos:start="887:64" pos:end="887:65">-&gt;</operator><name pos:start="887:66" pos:end="887:72">streams</name><index pos:start="887:73" pos:end="887:75">[<expr pos:start="887:74" pos:end="887:74"><name pos:start="887:74" pos:end="887:74">i</name></expr>]</index></name><operator pos:start="887:76" pos:end="887:76">.</operator><name pos:start="887:77" pos:end="887:97">stream_language_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="889:17" pos:end="899:17"><if pos:start="889:17" pos:end="899:17">if <condition pos:start="889:20" pos:end="889:51">(<expr pos:start="889:21" pos:end="889:50"><name pos:start="889:21" pos:end="889:27">rfc1766</name> <operator pos:start="889:29" pos:end="889:30">&amp;&amp;</operator> <call pos:start="889:32" pos:end="889:46"><name pos:start="889:32" pos:end="889:37">strlen</name><argument_list pos:start="889:38" pos:end="889:46">(<argument pos:start="889:39" pos:end="889:45"><expr pos:start="889:39" pos:end="889:45"><name pos:start="889:39" pos:end="889:45">rfc1766</name></expr></argument>)</argument_list></call> <operator pos:start="889:48" pos:end="889:48">&gt;</operator> <literal type="number" pos:start="889:50" pos:end="889:50">1</literal></expr>)</condition> <block pos:start="889:53" pos:end="899:17">{<block_content pos:start="891:21" pos:end="897:80">

                    <decl_stmt pos:start="891:21" pos:end="891:81"><decl pos:start="891:21" pos:end="891:80"><type pos:start="891:21" pos:end="891:30"><specifier pos:start="891:21" pos:end="891:25">const</specifier> <name pos:start="891:27" pos:end="891:30">char</name></type> <name pos:start="891:32" pos:end="891:45"><name pos:start="891:32" pos:end="891:42">primary_tag</name><index pos:start="891:43" pos:end="891:45">[<expr pos:start="891:44" pos:end="891:44"><literal type="number" pos:start="891:44" pos:end="891:44">3</literal></expr>]</index></name> <init pos:start="891:47" pos:end="891:80">= <expr pos:start="891:49" pos:end="891:80"><block pos:start="891:49" pos:end="891:80">{ <expr pos:start="891:51" pos:end="891:60"><name pos:start="891:51" pos:end="891:60"><name pos:start="891:51" pos:end="891:57">rfc1766</name><index pos:start="891:58" pos:end="891:60">[<expr pos:start="891:59" pos:end="891:59"><literal type="number" pos:start="891:59" pos:end="891:59">0</literal></expr>]</index></name></expr>, <expr pos:start="891:63" pos:end="891:72"><name pos:start="891:63" pos:end="891:72"><name pos:start="891:63" pos:end="891:69">rfc1766</name><index pos:start="891:70" pos:end="891:72">[<expr pos:start="891:71" pos:end="891:71"><literal type="number" pos:start="891:71" pos:end="891:71">1</literal></expr>]</index></name></expr>, <expr pos:start="891:75" pos:end="891:78"><literal type="char" pos:start="891:75" pos:end="891:78">'\0'</literal></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="891:83" pos:end="891:111">// ignore country code if any</comment>

                    <decl_stmt pos:start="893:21" pos:end="893:97"><decl pos:start="893:21" pos:end="893:96"><type pos:start="893:21" pos:end="893:32"><specifier pos:start="893:21" pos:end="893:25">const</specifier> <name pos:start="893:27" pos:end="893:30">char</name> <modifier pos:start="893:32" pos:end="893:32">*</modifier></type><name pos:start="893:33" pos:end="893:39">iso6392</name> <init pos:start="893:41" pos:end="893:96">= <expr pos:start="893:43" pos:end="893:96"><call pos:start="893:43" pos:end="893:96"><name pos:start="893:43" pos:end="893:60">av_convert_lang_to</name><argument_list pos:start="893:61" pos:end="893:96">(<argument pos:start="893:62" pos:end="893:72"><expr pos:start="893:62" pos:end="893:72"><name pos:start="893:62" pos:end="893:72">primary_tag</name></expr></argument>, <argument pos:start="893:75" pos:end="893:95"><expr pos:start="893:75" pos:end="893:95"><name pos:start="893:75" pos:end="893:95">AV_LANG_ISO639_2_BIBL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="895:21" pos:end="897:80"><if pos:start="895:21" pos:end="897:80">if <condition pos:start="895:24" pos:end="895:32">(<expr pos:start="895:25" pos:end="895:31"><name pos:start="895:25" pos:end="895:31">iso6392</name></expr>)</condition><block type="pseudo" pos:start="897:25" pos:end="897:80"><block_content pos:start="897:25" pos:end="897:80">

                        <expr_stmt pos:start="897:25" pos:end="897:80"><expr pos:start="897:25" pos:end="897:79"><call pos:start="897:25" pos:end="897:79"><name pos:start="897:25" pos:end="897:40">av_metadata_set2</name><argument_list pos:start="897:41" pos:end="897:79">(<argument pos:start="897:42" pos:end="897:54"><expr pos:start="897:42" pos:end="897:54"><operator pos:start="897:42" pos:end="897:42">&amp;</operator><name pos:start="897:43" pos:end="897:54"><name pos:start="897:43" pos:end="897:44">st</name><operator pos:start="897:45" pos:end="897:46">-&gt;</operator><name pos:start="897:47" pos:end="897:54">metadata</name></name></expr></argument>, <argument pos:start="897:57" pos:end="897:66"><expr pos:start="897:57" pos:end="897:66"><literal type="string" pos:start="897:57" pos:end="897:66">"language"</literal></expr></argument>, <argument pos:start="897:69" pos:end="897:75"><expr pos:start="897:69" pos:end="897:75"><name pos:start="897:69" pos:end="897:75">iso6392</name></expr></argument>, <argument pos:start="897:78" pos:end="897:78"><expr pos:start="897:78" pos:end="897:78"><literal type="number" pos:start="897:78" pos:end="897:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="909:5" pos:end="909:13">return <expr pos:start="909:12" pos:end="909:12"><literal type="number" pos:start="909:12" pos:end="909:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
