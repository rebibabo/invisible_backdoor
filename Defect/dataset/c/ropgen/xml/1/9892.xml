<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9892.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">usb_msd_realize_storage</name><parameter_list pos:start="1:36" pos:end="1:65">(<parameter pos:start="1:37" pos:end="1:50"><decl pos:start="1:37" pos:end="1:50"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:45">USBDevice</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">dev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:5">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MSDState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:47">= <expr pos:start="5:19" pos:end="5:47"><call pos:start="5:19" pos:end="5:47"><name pos:start="5:19" pos:end="5:27">DO_UPCAST</name><argument_list pos:start="5:28" pos:end="5:47">(<argument pos:start="5:29" pos:end="5:36"><expr pos:start="5:29" pos:end="5:36"><name pos:start="5:29" pos:end="5:36">MSDState</name></expr></argument>, <argument pos:start="5:39" pos:end="5:41"><expr pos:start="5:39" pos:end="5:41"><name pos:start="5:39" pos:end="5:41">dev</name></expr></argument>, <argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name> <init pos:start="7:26" pos:end="7:37">= <expr pos:start="7:28" pos:end="7:37"><name pos:start="7:28" pos:end="7:37"><name pos:start="7:28" pos:end="7:28">s</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:34">conf</name><operator pos:start="7:35" pos:end="7:35">.</operator><name pos:start="7:36" pos:end="7:37">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">SCSIDevice</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:24">scsi_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:11">bs</name></expr>)</condition> <block pos:start="15:14" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:51"><expr pos:start="17:9" pos:end="17:50"><call pos:start="17:9" pos:end="17:50"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:50">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:49"><expr pos:start="17:26" pos:end="17:49"><literal type="string" pos:start="17:26" pos:end="17:49">"drive property not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:43"><expr pos:start="25:5" pos:end="25:42"><call pos:start="25:5" pos:end="25:42"><name pos:start="25:5" pos:end="25:18">blkconf_serial</name><argument_list pos:start="25:19" pos:end="25:42">(<argument pos:start="25:20" pos:end="25:27"><expr pos:start="25:20" pos:end="25:27"><operator pos:start="25:20" pos:end="25:20">&amp;</operator><name pos:start="25:21" pos:end="25:27"><name pos:start="25:21" pos:end="25:21">s</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">conf</name></name></expr></argument>, <argument pos:start="25:30" pos:end="25:41"><expr pos:start="25:30" pos:end="25:41"><operator pos:start="25:30" pos:end="25:30">&amp;</operator><name pos:start="25:31" pos:end="25:41"><name pos:start="25:31" pos:end="25:33">dev</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:41">serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="45:7">/*

     * Hack alert: this pretends to be a block device, but it's really

     * a SCSI bus that can serve only a single device, which it

     * creates automatically.  But first it needs to detach from its

     * blockdev, or else scsi_bus_legacy_add_drive() dies when it

     * attaches again.

     *

     * The hack is probably a bad idea.

     */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:38"><expr pos:start="47:5" pos:end="47:37"><call pos:start="47:5" pos:end="47:37"><name pos:start="47:5" pos:end="47:19">bdrv_detach_dev</name><argument_list pos:start="47:20" pos:end="47:37">(<argument pos:start="47:21" pos:end="47:22"><expr pos:start="47:21" pos:end="47:22"><name pos:start="47:21" pos:end="47:22">bs</name></expr></argument>, <argument pos:start="47:25" pos:end="47:36"><expr pos:start="47:25" pos:end="47:36"><operator pos:start="47:25" pos:end="47:25">&amp;</operator><name pos:start="47:26" pos:end="47:36"><name pos:start="47:26" pos:end="47:26">s</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:31">dev</name><operator pos:start="47:32" pos:end="47:32">.</operator><name pos:start="47:33" pos:end="47:36">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:11">conf</name><operator pos:start="49:12" pos:end="49:12">.</operator><name pos:start="49:13" pos:end="49:14">bs</name></name> <operator pos:start="49:16" pos:end="49:16">=</operator> <name pos:start="49:18" pos:end="49:21">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><call pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:26">usb_desc_create_serial</name><argument_list pos:start="53:27" pos:end="53:31">(<argument pos:start="53:28" pos:end="53:30"><expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:30">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><call pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:17">usb_desc_init</name><argument_list pos:start="55:18" pos:end="55:22">(<argument pos:start="55:19" pos:end="55:21"><expr pos:start="55:19" pos:end="55:21"><name pos:start="55:19" pos:end="55:21">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="59:51"><expr pos:start="57:5" pos:end="59:50"><call pos:start="57:5" pos:end="59:50"><name pos:start="57:5" pos:end="57:16">scsi_bus_new</name><argument_list pos:start="57:17" pos:end="59:50">(<argument pos:start="57:18" pos:end="57:24"><expr pos:start="57:18" pos:end="57:24"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:24"><name pos:start="57:19" pos:end="57:19">s</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:24">bus</name></name></expr></argument>, <argument pos:start="57:27" pos:end="57:40"><expr pos:start="57:27" pos:end="57:40"><sizeof pos:start="57:27" pos:end="57:40">sizeof<argument_list pos:start="57:33" pos:end="57:40">(<argument pos:start="57:34" pos:end="57:39"><expr pos:start="57:34" pos:end="57:39"><name pos:start="57:34" pos:end="57:39"><name pos:start="57:34" pos:end="57:34">s</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:39">bus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="57:43" pos:end="57:53"><expr pos:start="57:43" pos:end="57:53"><call pos:start="57:43" pos:end="57:53"><name pos:start="57:43" pos:end="57:48">DEVICE</name><argument_list pos:start="57:49" pos:end="57:53">(<argument pos:start="57:50" pos:end="57:52"><expr pos:start="57:50" pos:end="57:52"><name pos:start="57:50" pos:end="57:52">dev</name></expr></argument>)</argument_list></call></expr></argument>,

                 <argument pos:start="59:18" pos:end="59:43"><expr pos:start="59:18" pos:end="59:43"><operator pos:start="59:18" pos:end="59:18">&amp;</operator><name pos:start="59:19" pos:end="59:43">usb_msd_scsi_info_storage</name></expr></argument>, <argument pos:start="59:46" pos:end="59:49"><expr pos:start="59:46" pos:end="59:49"><name pos:start="59:46" pos:end="59:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="65:47"><expr pos:start="61:5" pos:end="65:46"><name pos:start="61:5" pos:end="61:12">scsi_dev</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="65:46"><name pos:start="61:16" pos:end="61:40">scsi_bus_legacy_add_drive</name><argument_list pos:start="61:41" pos:end="65:46">(<argument pos:start="61:42" pos:end="61:48"><expr pos:start="61:42" pos:end="61:48"><operator pos:start="61:42" pos:end="61:42">&amp;</operator><name pos:start="61:43" pos:end="61:48"><name pos:start="61:43" pos:end="61:43">s</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:48">bus</name></name></expr></argument>, <argument pos:start="61:51" pos:end="61:52"><expr pos:start="61:51" pos:end="61:52"><name pos:start="61:51" pos:end="61:52">bs</name></expr></argument>, <argument pos:start="61:55" pos:end="61:55"><expr pos:start="61:55" pos:end="61:55"><literal type="number" pos:start="61:55" pos:end="61:55">0</literal></expr></argument>, <argument pos:start="61:58" pos:end="61:71"><expr pos:start="61:58" pos:end="61:71"><operator pos:start="61:58" pos:end="61:58">!</operator><operator pos:start="61:59" pos:end="61:59">!</operator><name pos:start="61:60" pos:end="61:71"><name pos:start="61:60" pos:end="61:60">s</name><operator pos:start="61:61" pos:end="61:62">-&gt;</operator><name pos:start="61:63" pos:end="61:71">removable</name></name></expr></argument>,

                                         <argument pos:start="63:42" pos:end="63:58"><expr pos:start="63:42" pos:end="63:58"><name pos:start="63:42" pos:end="63:58"><name pos:start="63:42" pos:end="63:42">s</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:48">conf</name><operator pos:start="63:49" pos:end="63:49">.</operator><name pos:start="63:50" pos:end="63:58">bootindex</name></name></expr></argument>, <argument pos:start="63:61" pos:end="63:71"><expr pos:start="63:61" pos:end="63:71"><name pos:start="63:61" pos:end="63:71"><name pos:start="63:61" pos:end="63:63">dev</name><operator pos:start="63:64" pos:end="63:65">-&gt;</operator><name pos:start="63:66" pos:end="63:71">serial</name></name></expr></argument>,

                                         <argument pos:start="65:42" pos:end="65:45"><expr pos:start="65:42" pos:end="65:45"><operator pos:start="65:42" pos:end="65:42">&amp;</operator><name pos:start="65:43" pos:end="65:45">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:18">(<expr pos:start="67:9" pos:end="67:17"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:17">scsi_dev</name></expr>)</condition> <block pos:start="67:20" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:15">

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><call pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:23">error_propagate</name><argument_list pos:start="69:24" pos:end="69:34">(<argument pos:start="69:25" pos:end="69:28"><expr pos:start="69:25" pos:end="69:28"><name pos:start="69:25" pos:end="69:28">errp</name></expr></argument>, <argument pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:34"><expr pos:start="75:5" pos:end="75:33"><name pos:start="75:5" pos:end="75:29"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:10">bus</name><operator pos:start="75:11" pos:end="75:11">.</operator><name pos:start="75:12" pos:end="75:15">qbus</name><operator pos:start="75:16" pos:end="75:16">.</operator><name pos:start="75:17" pos:end="75:29">allow_hotplug</name></name> <operator pos:start="75:31" pos:end="75:31">=</operator> <literal type="number" pos:start="75:33" pos:end="75:33">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:30"><expr pos:start="77:5" pos:end="77:29"><call pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:24">usb_msd_handle_reset</name><argument_list pos:start="77:25" pos:end="77:29">(<argument pos:start="77:26" pos:end="77:28"><expr pos:start="77:26" pos:end="77:28"><name pos:start="77:26" pos:end="77:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="95:5"><if pos:start="81:5" pos:end="95:5">if <condition pos:start="81:8" pos:end="81:30">(<expr pos:start="81:9" pos:end="81:29"><call pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:25">bdrv_key_required</name><argument_list pos:start="81:26" pos:end="81:29">(<argument pos:start="81:27" pos:end="81:28"><expr pos:start="81:27" pos:end="81:28"><name pos:start="81:27" pos:end="81:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:32" pos:end="95:5">{<block_content pos:start="83:9" pos:end="93:9">

        <if_stmt pos:start="83:9" pos:end="93:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:20">(<expr pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:19">cur_mon</name></expr>)</condition> <block pos:start="83:22" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:35">

            <expr_stmt pos:start="85:13" pos:end="85:77"><expr pos:start="85:13" pos:end="85:76"><call pos:start="85:13" pos:end="85:76"><name pos:start="85:13" pos:end="85:39">monitor_read_bdrv_key_start</name><argument_list pos:start="85:40" pos:end="85:76">(<argument pos:start="85:41" pos:end="85:47"><expr pos:start="85:41" pos:end="85:47"><name pos:start="85:41" pos:end="85:47">cur_mon</name></expr></argument>, <argument pos:start="85:50" pos:end="85:51"><expr pos:start="85:50" pos:end="85:51"><name pos:start="85:50" pos:end="85:51">bs</name></expr></argument>, <argument pos:start="85:54" pos:end="85:72"><expr pos:start="85:54" pos:end="85:72"><name pos:start="85:54" pos:end="85:72">usb_msd_password_cb</name></expr></argument>, <argument pos:start="85:75" pos:end="85:75"><expr pos:start="85:75" pos:end="85:75"><name pos:start="85:75" pos:end="85:75">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:18">dev</name><operator pos:start="87:19" pos:end="87:19">.</operator><name pos:start="87:20" pos:end="87:30">auto_attach</name></name> <operator pos:start="87:32" pos:end="87:32">=</operator> <literal type="number" pos:start="87:34" pos:end="87:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="93:9">else <block pos:start="89:16" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:26">

            <expr_stmt pos:start="91:13" pos:end="91:26"><expr pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:21">autostart</name> <operator pos:start="91:23" pos:end="91:23">=</operator> <literal type="number" pos:start="91:25" pos:end="91:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
