<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11997.c" pos:tabs="8"><function pos:start="1:1" pos:end="116:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">xio3130_downstream_realize</name><parameter_list pos:start="1:39" pos:end="1:66">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:48">PCIDevice</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">d</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:58">Error</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier><modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="116:1">{<block_content pos:start="5:5" pos:end="114:25">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">PCIEPort</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">p</name> <init pos:start="5:17" pos:end="5:30">= <expr pos:start="5:19" pos:end="5:30"><call pos:start="5:19" pos:end="5:30"><name pos:start="5:19" pos:end="5:27">PCIE_PORT</name><argument_list pos:start="5:28" pos:end="5:30">(<argument pos:start="5:29" pos:end="5:29"><expr pos:start="5:29" pos:end="5:29"><name pos:start="5:29" pos:end="5:29">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PCIESlot</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:30">= <expr pos:start="7:19" pos:end="7:30"><call pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:27">PCIE_SLOT</name><argument_list pos:start="7:28" pos:end="7:30">(<argument pos:start="7:29" pos:end="7:29"><expr pos:start="7:29" pos:end="7:29"><name pos:start="7:29" pos:end="7:29">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><call pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:21">pci_bridge_initfn</name><argument_list pos:start="13:22" pos:end="13:39">(<argument pos:start="13:23" pos:end="13:23"><expr pos:start="13:23" pos:end="13:23"><name pos:start="13:23" pos:end="13:23">d</name></expr></argument>, <argument pos:start="13:26" pos:end="13:38"><expr pos:start="13:26" pos:end="13:38"><name pos:start="13:26" pos:end="13:38">TYPE_PCIE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:22">pcie_port_init_reg</name><argument_list pos:start="15:23" pos:end="15:25">(<argument pos:start="15:24" pos:end="15:24"><expr pos:start="15:24" pos:end="15:24"><name pos:start="15:24" pos:end="15:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="25:24"><expr pos:start="19:5" pos:end="25:23"><name pos:start="19:5" pos:end="19:6">rc</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="25:23"><name pos:start="19:10" pos:end="19:17">msi_init</name><argument_list pos:start="19:18" pos:end="25:23">(<argument pos:start="19:19" pos:end="19:19"><expr pos:start="19:19" pos:end="19:19"><name pos:start="19:19" pos:end="19:19">d</name></expr></argument>, <argument pos:start="19:22" pos:end="19:39"><expr pos:start="19:22" pos:end="19:39"><name pos:start="19:22" pos:end="19:39">XIO3130_MSI_OFFSET</name></expr></argument>, <argument pos:start="19:42" pos:end="19:62"><expr pos:start="19:42" pos:end="19:62"><name pos:start="19:42" pos:end="19:62">XIO3130_MSI_NR_VECTOR</name></expr></argument>,

                  <argument pos:start="21:19" pos:end="21:67"><expr pos:start="21:19" pos:end="21:67"><name pos:start="21:19" pos:end="21:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="21:47" pos:end="21:47">&amp;</operator> <name pos:start="21:49" pos:end="21:67">PCI_MSI_FLAGS_64BIT</name></expr></argument>,

                  <argument pos:start="23:19" pos:end="23:69"><expr pos:start="23:19" pos:end="23:69"><name pos:start="23:19" pos:end="23:45">XIO3130_MSI_SUPPORTED_FLAGS</name> <operator pos:start="23:47" pos:end="23:47">&amp;</operator> <name pos:start="23:49" pos:end="23:69">PCI_MSI_FLAGS_MASKBIT</name></expr></argument>,

                  <argument pos:start="25:19" pos:end="25:22"><expr pos:start="25:19" pos:end="25:22"><name pos:start="25:19" pos:end="25:22">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">rc</name> <operator pos:start="27:12" pos:end="27:12">&lt;</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>)</condition> <block pos:start="27:17" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:24">

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><call pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:14">assert</name><argument_list pos:start="29:15" pos:end="29:30">(<argument pos:start="29:16" pos:end="29:29"><expr pos:start="29:16" pos:end="29:29"><name pos:start="29:16" pos:end="29:17">rc</name> <operator pos:start="29:19" pos:end="29:20">==</operator> <operator pos:start="29:22" pos:end="29:22">-</operator><name pos:start="29:23" pos:end="29:29">ENOTSUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:24">goto <name pos:start="31:14" pos:end="31:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="41:37"><expr pos:start="37:5" pos:end="41:36"><name pos:start="37:5" pos:end="37:6">rc</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="41:36"><name pos:start="37:10" pos:end="37:30">pci_bridge_ssvid_init</name><argument_list pos:start="37:31" pos:end="41:36">(<argument pos:start="37:32" pos:end="37:32"><expr pos:start="37:32" pos:end="37:32"><name pos:start="37:32" pos:end="37:32">d</name></expr></argument>, <argument pos:start="37:35" pos:end="37:54"><expr pos:start="37:35" pos:end="37:54"><name pos:start="37:35" pos:end="37:54">XIO3130_SSVID_OFFSET</name></expr></argument>,

                               <argument pos:start="39:32" pos:end="39:49"><expr pos:start="39:32" pos:end="39:49"><name pos:start="39:32" pos:end="39:49">XIO3130_SSVID_SVID</name></expr></argument>, <argument pos:start="39:52" pos:end="39:69"><expr pos:start="39:52" pos:end="39:69"><name pos:start="39:52" pos:end="39:69">XIO3130_SSVID_SSID</name></expr></argument>,

                               <argument pos:start="41:32" pos:end="41:35"><expr pos:start="41:32" pos:end="41:35"><name pos:start="41:32" pos:end="41:35">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:15">(<expr pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:10">rc</name> <operator pos:start="43:12" pos:end="43:12">&lt;</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>)</condition> <block pos:start="43:17" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:24">

        <goto pos:start="45:9" pos:end="45:24">goto <name pos:start="45:14" pos:end="45:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="53:38"><expr pos:start="51:5" pos:end="53:37"><name pos:start="51:5" pos:end="51:6">rc</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="53:37"><name pos:start="51:10" pos:end="51:22">pcie_cap_init</name><argument_list pos:start="51:23" pos:end="53:37">(<argument pos:start="51:24" pos:end="51:24"><expr pos:start="51:24" pos:end="51:24"><name pos:start="51:24" pos:end="51:24">d</name></expr></argument>, <argument pos:start="51:27" pos:end="51:44"><expr pos:start="51:27" pos:end="51:44"><name pos:start="51:27" pos:end="51:44">XIO3130_EXP_OFFSET</name></expr></argument>, <argument pos:start="51:47" pos:end="51:69"><expr pos:start="51:47" pos:end="51:69"><name pos:start="51:47" pos:end="51:69">PCI_EXP_TYPE_DOWNSTREAM</name></expr></argument>,

                       <argument pos:start="53:24" pos:end="53:30"><expr pos:start="53:24" pos:end="53:30"><name pos:start="53:24" pos:end="53:30"><name pos:start="53:24" pos:end="53:24">p</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:30">port</name></name></expr></argument>, <argument pos:start="53:33" pos:end="53:36"><expr pos:start="53:33" pos:end="53:36"><name pos:start="53:33" pos:end="53:36">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:15">(<expr pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:10">rc</name> <operator pos:start="55:12" pos:end="55:12">&lt;</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>)</condition> <block pos:start="55:17" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:21">

        <goto pos:start="57:9" pos:end="57:21">goto <name pos:start="57:14" pos:end="57:20">err_msi</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:25"><expr pos:start="61:5" pos:end="61:24"><call pos:start="61:5" pos:end="61:24"><name pos:start="61:5" pos:end="61:21">pcie_cap_flr_init</name><argument_list pos:start="61:22" pos:end="61:24">(<argument pos:start="61:23" pos:end="61:23"><expr pos:start="61:23" pos:end="61:23"><name pos:start="61:23" pos:end="61:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><call pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:24">pcie_cap_deverr_init</name><argument_list pos:start="63:25" pos:end="63:27">(<argument pos:start="63:26" pos:end="63:26"><expr pos:start="63:26" pos:end="63:26"><name pos:start="63:26" pos:end="63:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:35"><expr pos:start="65:5" pos:end="65:34"><call pos:start="65:5" pos:end="65:34"><name pos:start="65:5" pos:end="65:22">pcie_cap_slot_init</name><argument_list pos:start="65:23" pos:end="65:34">(<argument pos:start="65:24" pos:end="65:24"><expr pos:start="65:24" pos:end="65:24"><name pos:start="65:24" pos:end="65:24">d</name></expr></argument>, <argument pos:start="65:27" pos:end="65:33"><expr pos:start="65:27" pos:end="65:33"><name pos:start="65:27" pos:end="65:33"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:33">slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:28"><expr pos:start="67:5" pos:end="67:27"><call pos:start="67:5" pos:end="67:27"><name pos:start="67:5" pos:end="67:24">pcie_cap_arifwd_init</name><argument_list pos:start="67:25" pos:end="67:27">(<argument pos:start="67:26" pos:end="67:26"><expr pos:start="67:26" pos:end="67:26"><name pos:start="67:26" pos:end="67:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:36"><expr pos:start="71:5" pos:end="71:35"><call pos:start="71:5" pos:end="71:35"><name pos:start="71:5" pos:end="71:23">pcie_chassis_create</name><argument_list pos:start="71:24" pos:end="71:35">(<argument pos:start="71:25" pos:end="71:34"><expr pos:start="71:25" pos:end="71:34"><name pos:start="71:25" pos:end="71:34"><name pos:start="71:25" pos:end="71:25">s</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:34">chassis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:34"><expr pos:start="73:5" pos:end="73:33"><name pos:start="73:5" pos:end="73:6">rc</name> <operator pos:start="73:8" pos:end="73:8">=</operator> <call pos:start="73:10" pos:end="73:33"><name pos:start="73:10" pos:end="73:30">pcie_chassis_add_slot</name><argument_list pos:start="73:31" pos:end="73:33">(<argument pos:start="73:32" pos:end="73:32"><expr pos:start="73:32" pos:end="73:32"><name pos:start="73:32" pos:end="73:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="80:5"><if pos:start="75:5" pos:end="80:5">if <condition pos:start="75:8" pos:end="75:15">(<expr pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:10">rc</name> <operator pos:start="75:12" pos:end="75:12">&lt;</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>)</condition> <block pos:start="75:17" pos:end="80:5">{<block_content pos:start="78:9" pos:end="78:26">


        <goto pos:start="78:9" pos:end="78:26">goto <name pos:start="78:14" pos:end="78:25">err_pcie_cap</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="84:5" pos:end="86:45"><expr pos:start="84:5" pos:end="86:44"><name pos:start="84:5" pos:end="84:6">rc</name> <operator pos:start="84:8" pos:end="84:8">=</operator> <call pos:start="84:10" pos:end="86:44"><name pos:start="84:10" pos:end="84:22">pcie_aer_init</name><argument_list pos:start="84:23" pos:end="86:44">(<argument pos:start="84:24" pos:end="84:24"><expr pos:start="84:24" pos:end="84:24"><name pos:start="84:24" pos:end="84:24">d</name></expr></argument>, <argument pos:start="84:27" pos:end="84:37"><expr pos:start="84:27" pos:end="84:37"><name pos:start="84:27" pos:end="84:37">PCI_ERR_VER</name></expr></argument>, <argument pos:start="84:40" pos:end="84:57"><expr pos:start="84:40" pos:end="84:57"><name pos:start="84:40" pos:end="84:57">XIO3130_AER_OFFSET</name></expr></argument>,

                       <argument pos:start="86:24" pos:end="86:37"><expr pos:start="86:24" pos:end="86:37"><name pos:start="86:24" pos:end="86:37">PCI_ERR_SIZEOF</name></expr></argument>, <argument pos:start="86:40" pos:end="86:43"><expr pos:start="86:40" pos:end="86:43"><name pos:start="86:40" pos:end="86:43">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="88:5" pos:end="92:5"><if pos:start="88:5" pos:end="92:5">if <condition pos:start="88:8" pos:end="88:15">(<expr pos:start="88:9" pos:end="88:14"><name pos:start="88:9" pos:end="88:10">rc</name> <operator pos:start="88:12" pos:end="88:12">&lt;</operator> <literal type="number" pos:start="88:14" pos:end="88:14">0</literal></expr>)</condition> <block pos:start="88:17" pos:end="92:5">{<block_content pos:start="90:9" pos:end="90:17">

        <goto pos:start="90:9" pos:end="90:17">goto <name pos:start="90:14" pos:end="90:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="96:5" pos:end="96:11">return;</return>



<label pos:start="100:1" pos:end="100:4"><name pos:start="100:1" pos:end="100:3">err</name>:</label>

    <expr_stmt pos:start="102:5" pos:end="102:29"><expr pos:start="102:5" pos:end="102:28"><call pos:start="102:5" pos:end="102:28"><name pos:start="102:5" pos:end="102:25">pcie_chassis_del_slot</name><argument_list pos:start="102:26" pos:end="102:28">(<argument pos:start="102:27" pos:end="102:27"><expr pos:start="102:27" pos:end="102:27"><name pos:start="102:27" pos:end="102:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="104:1" pos:end="104:13"><name pos:start="104:1" pos:end="104:12">err_pcie_cap</name>:</label>

    <expr_stmt pos:start="106:5" pos:end="106:21"><expr pos:start="106:5" pos:end="106:20"><call pos:start="106:5" pos:end="106:20"><name pos:start="106:5" pos:end="106:17">pcie_cap_exit</name><argument_list pos:start="106:18" pos:end="106:20">(<argument pos:start="106:19" pos:end="106:19"><expr pos:start="106:19" pos:end="106:19"><name pos:start="106:19" pos:end="106:19">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="108:1" pos:end="108:8"><name pos:start="108:1" pos:end="108:7">err_msi</name>:</label>

    <expr_stmt pos:start="110:5" pos:end="110:18"><expr pos:start="110:5" pos:end="110:17"><call pos:start="110:5" pos:end="110:17"><name pos:start="110:5" pos:end="110:14">msi_uninit</name><argument_list pos:start="110:15" pos:end="110:17">(<argument pos:start="110:16" pos:end="110:16"><expr pos:start="110:16" pos:end="110:16"><name pos:start="110:16" pos:end="110:16">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="112:1" pos:end="112:11"><name pos:start="112:1" pos:end="112:10">err_bridge</name>:</label>

    <expr_stmt pos:start="114:5" pos:end="114:25"><expr pos:start="114:5" pos:end="114:24"><call pos:start="114:5" pos:end="114:24"><name pos:start="114:5" pos:end="114:21">pci_bridge_exitfn</name><argument_list pos:start="114:22" pos:end="114:24">(<argument pos:start="114:23" pos:end="114:23"><expr pos:start="114:23" pos:end="114:23"><name pos:start="114:23" pos:end="114:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
