<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9149.c" pos:tabs="8"><function pos:start="1:1" pos:end="420:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">load_elf_image</name><parameter_list pos:start="1:27" pos:end="5:56">(<parameter pos:start="1:28" pos:end="1:49"><decl pos:start="1:28" pos:end="1:49"><type pos:start="1:28" pos:end="1:49"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:49">image_name</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:63">image_fd</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:50"><decl pos:start="3:28" pos:end="3:50"><type pos:start="3:28" pos:end="3:50"><name pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:33">struct</name> <name pos:start="3:35" pos:end="3:44">image_info</name></name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">info</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:71"><decl pos:start="3:53" pos:end="3:71"><type pos:start="3:53" pos:end="3:71"><name pos:start="3:53" pos:end="3:56">char</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier><modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:71">pinterp_name</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:55"><decl pos:start="5:28" pos:end="5:55"><type pos:start="5:28" pos:end="5:40"><name pos:start="5:28" pos:end="5:31">char</name></type> <name pos:start="5:33" pos:end="5:55"><name pos:start="5:33" pos:end="5:40">bprm_buf</name><index pos:start="5:41" pos:end="5:55">[<expr pos:start="5:42" pos:end="5:54"><name pos:start="5:42" pos:end="5:54">BPRM_BUF_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="420:1">{<block_content pos:start="9:5" pos:end="418:13">

    <decl_stmt pos:start="9:5" pos:end="9:52"><decl pos:start="9:5" pos:end="9:51"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">elfhdr</name></name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:23">ehdr</name> <init pos:start="9:25" pos:end="9:51">= <expr pos:start="9:27" pos:end="9:51"><operator pos:start="9:27" pos:end="9:27">(</operator>struct <name pos:start="9:35" pos:end="9:40">elfhdr</name> <operator pos:start="9:42" pos:end="9:42">*</operator><operator pos:start="9:43" pos:end="9:43">)</operator><name pos:start="9:44" pos:end="9:51">bprm_buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:19">elf_phdr</name></name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:25">phdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:58"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">abi_ulong</name></type> <name pos:start="13:15" pos:end="13:23">load_addr</name></decl>, <decl pos:start="13:26" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:26" pos:end="13:34">load_bias</name></decl>, <decl pos:start="13:37" pos:end="13:42"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:37" pos:end="13:42">loaddr</name></decl>, <decl pos:start="13:45" pos:end="13:50"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:45" pos:end="13:50">hiaddr</name></decl>, <decl pos:start="13:53" pos:end="13:57"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:53" pos:end="13:57">error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:17">retval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:22">errmsg</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:54">/* First of all, some simple consistency checks */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:55"><expr pos:start="23:5" pos:end="23:54"><name pos:start="23:5" pos:end="23:10">errmsg</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="string" pos:start="23:14" pos:end="23:54">"Invalid ELF image for this architecture"</literal></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:31">(<expr pos:start="25:9" pos:end="25:30"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:30"><name pos:start="25:10" pos:end="25:24">elf_check_ident</name><argument_list pos:start="25:25" pos:end="25:30">(<argument pos:start="25:26" pos:end="25:29"><expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">ehdr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:33" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:25">

        <goto pos:start="27:9" pos:end="27:25">goto <name pos:start="27:14" pos:end="27:24">exit_errmsg</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><call pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:14">bswap_ehdr</name><argument_list pos:start="31:15" pos:end="31:20">(<argument pos:start="31:16" pos:end="31:19"><expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">ehdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:30">(<expr pos:start="33:9" pos:end="33:29"><operator pos:start="33:9" pos:end="33:9">!</operator><call pos:start="33:10" pos:end="33:29"><name pos:start="33:10" pos:end="33:23">elf_check_ehdr</name><argument_list pos:start="33:24" pos:end="33:29">(<argument pos:start="33:25" pos:end="33:28"><expr pos:start="33:25" pos:end="33:28"><name pos:start="33:25" pos:end="33:28">ehdr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:32" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:25">

        <goto pos:start="35:9" pos:end="35:25">goto <name pos:start="35:14" pos:end="35:24">exit_errmsg</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:5">i</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:12">ehdr</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:21">e_phnum</name></name> <operator pos:start="41:23" pos:end="41:23">*</operator> <sizeof pos:start="41:25" pos:end="41:47">sizeof<argument_list pos:start="41:31" pos:end="41:47">(<argument pos:start="41:32" pos:end="41:46"><expr pos:start="41:32" pos:end="41:46">struct <name pos:start="41:39" pos:end="41:46">elf_phdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="59:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:43">(<expr pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:12">ehdr</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:21">e_phoff</name></name> <operator pos:start="43:23" pos:end="43:23">+</operator> <name pos:start="43:25" pos:end="43:25">i</name> <operator pos:start="43:27" pos:end="43:28">&lt;=</operator> <name pos:start="43:30" pos:end="43:42">BPRM_BUF_SIZE</name></expr>)</condition> <block pos:start="43:45" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:61">

        <expr_stmt pos:start="45:9" pos:end="45:61"><expr pos:start="45:9" pos:end="45:60"><name pos:start="45:9" pos:end="45:12">phdr</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <operator pos:start="45:16" pos:end="45:16">(</operator>struct <name pos:start="45:24" pos:end="45:31">elf_phdr</name> <operator pos:start="45:33" pos:end="45:33">*</operator><operator pos:start="45:34" pos:end="45:34">)</operator><operator pos:start="45:35" pos:end="45:35">(</operator><name pos:start="45:36" pos:end="45:43">bprm_buf</name> <operator pos:start="45:45" pos:end="45:45">+</operator> <name pos:start="45:47" pos:end="45:59"><name pos:start="45:47" pos:end="45:50">ehdr</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:59">e_phoff</name></name><operator pos:start="45:60" pos:end="45:60">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="59:5">else <block pos:start="47:12" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:9">

        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:12">phdr</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <operator pos:start="49:16" pos:end="49:16">(</operator>struct <name pos:start="49:24" pos:end="49:31">elf_phdr</name> <operator pos:start="49:33" pos:end="49:33">*</operator><operator pos:start="49:34" pos:end="49:34">)</operator> <call pos:start="49:36" pos:end="49:44"><name pos:start="49:36" pos:end="49:41">alloca</name><argument_list pos:start="49:42" pos:end="49:44">(<argument pos:start="49:43" pos:end="49:43"><expr pos:start="49:43" pos:end="49:43"><name pos:start="49:43" pos:end="49:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:57"><expr pos:start="51:9" pos:end="51:56"><name pos:start="51:9" pos:end="51:14">retval</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:56"><name pos:start="51:18" pos:end="51:22">pread</name><argument_list pos:start="51:23" pos:end="51:56">(<argument pos:start="51:24" pos:end="51:31"><expr pos:start="51:24" pos:end="51:31"><name pos:start="51:24" pos:end="51:31">image_fd</name></expr></argument>, <argument pos:start="51:34" pos:end="51:37"><expr pos:start="51:34" pos:end="51:37"><name pos:start="51:34" pos:end="51:37">phdr</name></expr></argument>, <argument pos:start="51:40" pos:end="51:40"><expr pos:start="51:40" pos:end="51:40"><name pos:start="51:40" pos:end="51:40">i</name></expr></argument>, <argument pos:start="51:43" pos:end="51:55"><expr pos:start="51:43" pos:end="51:55"><name pos:start="51:43" pos:end="51:55"><name pos:start="51:43" pos:end="51:46">ehdr</name><operator pos:start="51:47" pos:end="51:48">-&gt;</operator><name pos:start="51:49" pos:end="51:55">e_phoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:24">(<expr pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:18">retval</name> <operator pos:start="53:20" pos:end="53:21">!=</operator> <name pos:start="53:23" pos:end="53:23">i</name></expr>)</condition> <block pos:start="53:26" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:27">

            <goto pos:start="55:13" pos:end="55:27">goto <name pos:start="55:18" pos:end="55:26">exit_read</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="66:0"><expr pos:start="61:5" pos:end="61:35"><call pos:start="61:5" pos:end="61:35"><name pos:start="61:5" pos:end="61:14">bswap_phdr</name><argument_list pos:start="61:15" pos:end="61:35">(<argument pos:start="61:16" pos:end="61:19"><expr pos:start="61:16" pos:end="61:19"><name pos:start="61:16" pos:end="61:19">phdr</name></expr></argument>, <argument pos:start="61:22" pos:end="61:34"><expr pos:start="61:22" pos:end="61:34"><name pos:start="61:22" pos:end="61:34"><name pos:start="61:22" pos:end="61:25">ehdr</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:34">e_phnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="65:1" pos:end="65:23">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:23">CONFIG_USE_FDPIC</name></cpp:ifdef>

    <expr_stmt pos:start="67:5" pos:end="67:20"><expr pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:8">info</name><operator pos:start="67:9" pos:end="67:10">-&gt;</operator><name pos:start="67:11" pos:end="67:15">nsegs</name></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="72:0"><expr pos:start="69:5" pos:end="69:29"><name pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:8">info</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:25">pt_dynamic_addr</name></name> <operator pos:start="69:27" pos:end="69:27">=</operator> <literal type="number" pos:start="69:29" pos:end="69:29">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="75:5" pos:end="77:43">/* Find the maximum size of the image and allocate an appropriate

       amount of memory to handle that.  */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:28"><expr pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:10">loaddr</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <operator pos:start="79:14" pos:end="79:14">-</operator><literal type="number" pos:start="79:15" pos:end="79:15">1</literal></expr><operator pos:start="79:16" pos:end="79:16">,</operator> <expr pos:start="79:18" pos:end="79:27"><name pos:start="79:18" pos:end="79:23">hiaddr</name> <operator pos:start="79:25" pos:end="79:25">=</operator> <literal type="number" pos:start="79:27" pos:end="79:27">0</literal></expr>;</expr_stmt>

    <for pos:start="81:5" pos:end="109:5">for <control pos:start="81:9" pos:end="81:39">(<init pos:start="81:10" pos:end="81:15"><expr pos:start="81:10" pos:end="81:14"><name pos:start="81:10" pos:end="81:10">i</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <literal type="number" pos:start="81:14" pos:end="81:14">0</literal></expr>;</init> <condition pos:start="81:17" pos:end="81:34"><expr pos:start="81:17" pos:end="81:33"><name pos:start="81:17" pos:end="81:17">i</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <name pos:start="81:21" pos:end="81:33"><name pos:start="81:21" pos:end="81:24">ehdr</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:33">e_phnum</name></name></expr>;</condition> <incr pos:start="81:36" pos:end="81:38"><expr pos:start="81:36" pos:end="81:38"><operator pos:start="81:36" pos:end="81:37">++</operator><name pos:start="81:38" pos:end="81:38">i</name></expr></incr>)</control> <block pos:start="81:41" pos:end="109:5">{<block_content pos:start="83:9" pos:end="107:9">

        <if_stmt pos:start="83:9" pos:end="107:9"><if pos:start="83:9" pos:end="107:9">if <condition pos:start="83:12" pos:end="83:38">(<expr pos:start="83:13" pos:end="83:37"><name pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:16">phdr</name><index pos:start="83:17" pos:end="83:19">[<expr pos:start="83:18" pos:end="83:18"><name pos:start="83:18" pos:end="83:18">i</name></expr>]</index></name><operator pos:start="83:20" pos:end="83:20">.</operator><name pos:start="83:21" pos:end="83:26">p_type</name> <operator pos:start="83:28" pos:end="83:29">==</operator> <name pos:start="83:31" pos:end="83:37">PT_LOAD</name></expr>)</condition> <block pos:start="83:40" pos:end="107:9">{<block_content pos:start="85:13" pos:end="106:0">

            <decl_stmt pos:start="85:13" pos:end="85:42"><decl pos:start="85:13" pos:end="85:41"><type pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:21">abi_ulong</name></type> <name pos:start="85:23" pos:end="85:23">a</name> <init pos:start="85:25" pos:end="85:41">= <expr pos:start="85:27" pos:end="85:41"><name pos:start="85:27" pos:end="85:33"><name pos:start="85:27" pos:end="85:30">phdr</name><index pos:start="85:31" pos:end="85:33">[<expr pos:start="85:32" pos:end="85:32"><name pos:start="85:32" pos:end="85:32">i</name></expr>]</index></name><operator pos:start="85:34" pos:end="85:34">.</operator><name pos:start="85:35" pos:end="85:41">p_vaddr</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="87:13" pos:end="91:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:27">(<expr pos:start="87:17" pos:end="87:26"><name pos:start="87:17" pos:end="87:17">a</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <name pos:start="87:21" pos:end="87:26">loaddr</name></expr>)</condition> <block pos:start="87:29" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:27">

                <expr_stmt pos:start="89:17" pos:end="89:27"><expr pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:22">loaddr</name> <operator pos:start="89:24" pos:end="89:24">=</operator> <name pos:start="89:26" pos:end="89:26">a</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:33"><expr pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:13">a</name> <operator pos:start="93:15" pos:end="93:16">+=</operator> <name pos:start="93:18" pos:end="93:24"><name pos:start="93:18" pos:end="93:21">phdr</name><index pos:start="93:22" pos:end="93:24">[<expr pos:start="93:23" pos:end="93:23"><name pos:start="93:23" pos:end="93:23">i</name></expr>]</index></name><operator pos:start="93:25" pos:end="93:25">.</operator><name pos:start="93:26" pos:end="93:32">p_memsz</name></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="102:0"><if pos:start="95:13" pos:end="102:0">if <condition pos:start="95:16" pos:end="95:27">(<expr pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:17">a</name> <operator pos:start="95:19" pos:end="95:19">&gt;</operator> <name pos:start="95:21" pos:end="95:26">hiaddr</name></expr>)</condition> <block pos:start="95:29" pos:end="102:0">{<block_content pos:start="97:17" pos:end="97:27">

                <expr_stmt pos:start="97:17" pos:end="97:27"><expr pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:22">hiaddr</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:26">a</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="101:1" pos:end="101:23">#<cpp:directive pos:start="101:2" pos:end="101:6">ifdef</cpp:directive> <name pos:start="101:8" pos:end="101:23">CONFIG_USE_FDPIC</name></cpp:ifdef>

            <expr_stmt pos:start="103:13" pos:end="106:0"><expr pos:start="103:13" pos:end="103:25"><operator pos:start="103:13" pos:end="103:14">++</operator><name pos:start="103:15" pos:end="103:25"><name pos:start="103:15" pos:end="103:18">info</name><operator pos:start="103:19" pos:end="103:20">-&gt;</operator><name pos:start="103:21" pos:end="103:25">nsegs</name></name></expr>;</expr_stmt>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="113:5" pos:end="113:23"><expr pos:start="113:5" pos:end="113:22"><name pos:start="113:5" pos:end="113:13">load_addr</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <name pos:start="113:17" pos:end="113:22">loaddr</name></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="149:5"><if pos:start="115:5" pos:end="139:5">if <condition pos:start="115:8" pos:end="115:31">(<expr pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:12">ehdr</name><operator pos:start="115:13" pos:end="115:14">-&gt;</operator><name pos:start="115:15" pos:end="115:20">e_type</name></name> <operator pos:start="115:22" pos:end="115:23">==</operator> <name pos:start="115:25" pos:end="115:30">ET_DYN</name></expr>)</condition> <block pos:start="115:33" pos:end="139:5">{<block_content pos:start="127:9" pos:end="137:9">

        <comment type="block" pos:start="117:9" pos:end="125:44">/* The image indicates that it can be loaded anywhere.  Find a

           location that can hold the memory space required.  If the

           image is pre-linked, LOADDR will be non-zero.  Since we do

           not supply MAP_FIXED here we'll use that address if and

           only if it remains available.  */</comment>

        <expr_stmt pos:start="127:9" pos:end="131:39"><expr pos:start="127:9" pos:end="131:38"><name pos:start="127:9" pos:end="127:17">load_addr</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <call pos:start="127:21" pos:end="131:38"><name pos:start="127:21" pos:end="127:31">target_mmap</name><argument_list pos:start="127:32" pos:end="131:38">(<argument pos:start="127:33" pos:end="127:38"><expr pos:start="127:33" pos:end="127:38"><name pos:start="127:33" pos:end="127:38">loaddr</name></expr></argument>, <argument pos:start="127:41" pos:end="127:55"><expr pos:start="127:41" pos:end="127:55"><name pos:start="127:41" pos:end="127:46">hiaddr</name> <operator pos:start="127:48" pos:end="127:48">-</operator> <name pos:start="127:50" pos:end="127:55">loaddr</name></expr></argument>, <argument pos:start="127:58" pos:end="127:66"><expr pos:start="127:58" pos:end="127:66"><name pos:start="127:58" pos:end="127:66">PROT_NONE</name></expr></argument>,

                                <argument pos:start="129:33" pos:end="129:70"><expr pos:start="129:33" pos:end="129:70"><name pos:start="129:33" pos:end="129:43">MAP_PRIVATE</name> <operator pos:start="129:45" pos:end="129:45">|</operator> <name pos:start="129:47" pos:end="129:54">MAP_ANON</name> <operator pos:start="129:56" pos:end="129:56">|</operator> <name pos:start="129:58" pos:end="129:70">MAP_NORESERVE</name></expr></argument>,

                                <argument pos:start="131:33" pos:end="131:34"><expr pos:start="131:33" pos:end="131:34"><operator pos:start="131:33" pos:end="131:33">-</operator><literal type="number" pos:start="131:34" pos:end="131:34">1</literal></expr></argument>, <argument pos:start="131:37" pos:end="131:37"><expr pos:start="131:37" pos:end="131:37"><literal type="number" pos:start="131:37" pos:end="131:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="137:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:28">(<expr pos:start="133:13" pos:end="133:27"><name pos:start="133:13" pos:end="133:21">load_addr</name> <operator pos:start="133:23" pos:end="133:24">==</operator> <operator pos:start="133:26" pos:end="133:26">-</operator><literal type="number" pos:start="133:27" pos:end="133:27">1</literal></expr>)</condition> <block pos:start="133:30" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:29">

            <goto pos:start="135:13" pos:end="135:29">goto <name pos:start="135:18" pos:end="135:28">exit_perror</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="149:5">else if <condition pos:start="139:15" pos:end="139:36">(<expr pos:start="139:16" pos:end="139:35"><name pos:start="139:16" pos:end="139:27">pinterp_name</name> <operator pos:start="139:29" pos:end="139:30">!=</operator> <name pos:start="139:32" pos:end="139:35">NULL</name></expr>)</condition> <block pos:start="139:38" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:53">

        <comment type="block" pos:start="141:9" pos:end="145:39">/* This is the main executable.  Make sure that the low

           address does not conflict with MMAP_MIN_ADDR or the

           QEMU application itself.  */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:53"><expr pos:start="147:9" pos:end="147:52"><call pos:start="147:9" pos:end="147:52"><name pos:start="147:9" pos:end="147:24">probe_guest_base</name><argument_list pos:start="147:25" pos:end="147:52">(<argument pos:start="147:26" pos:end="147:35"><expr pos:start="147:26" pos:end="147:35"><name pos:start="147:26" pos:end="147:35">image_name</name></expr></argument>, <argument pos:start="147:38" pos:end="147:43"><expr pos:start="147:38" pos:end="147:43"><name pos:start="147:38" pos:end="147:43">loaddr</name></expr></argument>, <argument pos:start="147:46" pos:end="147:51"><expr pos:start="147:46" pos:end="147:51"><name pos:start="147:46" pos:end="147:51">hiaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="151:5" pos:end="156:0"><expr pos:start="151:5" pos:end="151:34"><name pos:start="151:5" pos:end="151:13">load_bias</name> <operator pos:start="151:15" pos:end="151:15">=</operator> <name pos:start="151:17" pos:end="151:25">load_addr</name> <operator pos:start="151:27" pos:end="151:27">-</operator> <name pos:start="151:29" pos:end="151:34">loaddr</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="155:1" pos:end="155:23">#<cpp:directive pos:start="155:2" pos:end="155:6">ifdef</cpp:directive> <name pos:start="155:8" pos:end="155:23">CONFIG_USE_FDPIC</name></cpp:ifdef>

    <block pos:start="157:5" pos:end="194:0">{<block_content pos:start="159:9" pos:end="189:9">

        <decl_stmt pos:start="159:9" pos:end="161:54"><decl pos:start="159:9" pos:end="161:53"><type pos:start="159:9" pos:end="159:36"><name pos:start="159:9" pos:end="159:34"><name pos:start="159:9" pos:end="159:14">struct</name> <name pos:start="159:16" pos:end="159:34">elf32_fdpic_loadseg</name></name> <modifier pos:start="159:36" pos:end="159:36">*</modifier></type><name pos:start="159:37" pos:end="159:44">loadsegs</name> <init pos:start="159:46" pos:end="161:53">= <expr pos:start="159:48" pos:end="161:53"><name pos:start="159:48" pos:end="159:61"><name pos:start="159:48" pos:end="159:51">info</name><operator pos:start="159:52" pos:end="159:53">-&gt;</operator><name pos:start="159:54" pos:end="159:61">loadsegs</name></name> <operator pos:start="159:63" pos:end="159:63">=</operator>

            <call pos:start="161:13" pos:end="161:53"><name pos:start="161:13" pos:end="161:20">g_malloc</name><argument_list pos:start="161:21" pos:end="161:53">(<argument pos:start="161:22" pos:end="161:52"><expr pos:start="161:22" pos:end="161:52"><sizeof pos:start="161:22" pos:end="161:38">sizeof<argument_list pos:start="161:28" pos:end="161:38">(<argument pos:start="161:29" pos:end="161:37"><expr pos:start="161:29" pos:end="161:37"><operator pos:start="161:29" pos:end="161:29">*</operator><name pos:start="161:30" pos:end="161:37">loadsegs</name></expr></argument>)</argument_list></sizeof> <operator pos:start="161:40" pos:end="161:40">*</operator> <name pos:start="161:42" pos:end="161:52"><name pos:start="161:42" pos:end="161:45">info</name><operator pos:start="161:46" pos:end="161:47">-&gt;</operator><name pos:start="161:48" pos:end="161:52">nsegs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <for pos:start="165:9" pos:end="189:9">for <control pos:start="165:13" pos:end="165:43">(<init pos:start="165:14" pos:end="165:19"><expr pos:start="165:14" pos:end="165:18"><name pos:start="165:14" pos:end="165:14">i</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <literal type="number" pos:start="165:18" pos:end="165:18">0</literal></expr>;</init> <condition pos:start="165:21" pos:end="165:38"><expr pos:start="165:21" pos:end="165:37"><name pos:start="165:21" pos:end="165:21">i</name> <operator pos:start="165:23" pos:end="165:23">&lt;</operator> <name pos:start="165:25" pos:end="165:37"><name pos:start="165:25" pos:end="165:28">ehdr</name><operator pos:start="165:29" pos:end="165:30">-&gt;</operator><name pos:start="165:31" pos:end="165:37">e_phnum</name></name></expr>;</condition> <incr pos:start="165:40" pos:end="165:42"><expr pos:start="165:40" pos:end="165:42"><operator pos:start="165:40" pos:end="165:41">++</operator><name pos:start="165:42" pos:end="165:42">i</name></expr></incr>)</control> <block pos:start="165:45" pos:end="189:9">{<block_content pos:start="167:13" pos:end="187:13">

            <switch pos:start="167:13" pos:end="187:13">switch <condition pos:start="167:20" pos:end="167:35">(<expr pos:start="167:21" pos:end="167:34"><name pos:start="167:21" pos:end="167:27"><name pos:start="167:21" pos:end="167:24">phdr</name><index pos:start="167:25" pos:end="167:27">[<expr pos:start="167:26" pos:end="167:26"><name pos:start="167:26" pos:end="167:26">i</name></expr>]</index></name><operator pos:start="167:28" pos:end="167:28">.</operator><name pos:start="167:29" pos:end="167:34">p_type</name></expr>)</condition> <block pos:start="167:37" pos:end="187:13">{<block_content pos:start="169:13" pos:end="185:22">

            <case pos:start="169:13" pos:end="169:28">case <expr pos:start="169:18" pos:end="169:27"><name pos:start="169:18" pos:end="169:27">PT_DYNAMIC</name></expr>:</case>

                <expr_stmt pos:start="171:17" pos:end="171:68"><expr pos:start="171:17" pos:end="171:67"><name pos:start="171:17" pos:end="171:37"><name pos:start="171:17" pos:end="171:20">info</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:37">pt_dynamic_addr</name></name> <operator pos:start="171:39" pos:end="171:39">=</operator> <name pos:start="171:41" pos:end="171:47"><name pos:start="171:41" pos:end="171:44">phdr</name><index pos:start="171:45" pos:end="171:47">[<expr pos:start="171:46" pos:end="171:46"><name pos:start="171:46" pos:end="171:46">i</name></expr>]</index></name><operator pos:start="171:48" pos:end="171:48">.</operator><name pos:start="171:49" pos:end="171:55">p_vaddr</name> <operator pos:start="171:57" pos:end="171:57">+</operator> <name pos:start="171:59" pos:end="171:67">load_bias</name></expr>;</expr_stmt>

                <break pos:start="173:17" pos:end="173:22">break;</break>

            <case pos:start="175:13" pos:end="175:25">case <expr pos:start="175:18" pos:end="175:24"><name pos:start="175:18" pos:end="175:24">PT_LOAD</name></expr>:</case>

                <expr_stmt pos:start="177:17" pos:end="177:61"><expr pos:start="177:17" pos:end="177:60"><name pos:start="177:17" pos:end="177:30"><name pos:start="177:17" pos:end="177:24">loadsegs</name><operator pos:start="177:25" pos:end="177:26">-&gt;</operator><name pos:start="177:27" pos:end="177:30">addr</name></name> <operator pos:start="177:32" pos:end="177:32">=</operator> <name pos:start="177:34" pos:end="177:40"><name pos:start="177:34" pos:end="177:37">phdr</name><index pos:start="177:38" pos:end="177:40">[<expr pos:start="177:39" pos:end="177:39"><name pos:start="177:39" pos:end="177:39">i</name></expr>]</index></name><operator pos:start="177:41" pos:end="177:41">.</operator><name pos:start="177:42" pos:end="177:48">p_vaddr</name> <operator pos:start="177:50" pos:end="177:50">+</operator> <name pos:start="177:52" pos:end="177:60">load_bias</name></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:52"><expr pos:start="179:17" pos:end="179:51"><name pos:start="179:17" pos:end="179:33"><name pos:start="179:17" pos:end="179:24">loadsegs</name><operator pos:start="179:25" pos:end="179:26">-&gt;</operator><name pos:start="179:27" pos:end="179:33">p_vaddr</name></name> <operator pos:start="179:35" pos:end="179:35">=</operator> <name pos:start="179:37" pos:end="179:43"><name pos:start="179:37" pos:end="179:40">phdr</name><index pos:start="179:41" pos:end="179:43">[<expr pos:start="179:42" pos:end="179:42"><name pos:start="179:42" pos:end="179:42">i</name></expr>]</index></name><operator pos:start="179:44" pos:end="179:44">.</operator><name pos:start="179:45" pos:end="179:51">p_vaddr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:52"><expr pos:start="181:17" pos:end="181:51"><name pos:start="181:17" pos:end="181:33"><name pos:start="181:17" pos:end="181:24">loadsegs</name><operator pos:start="181:25" pos:end="181:26">-&gt;</operator><name pos:start="181:27" pos:end="181:33">p_memsz</name></name> <operator pos:start="181:35" pos:end="181:35">=</operator> <name pos:start="181:37" pos:end="181:43"><name pos:start="181:37" pos:end="181:40">phdr</name><index pos:start="181:41" pos:end="181:43">[<expr pos:start="181:42" pos:end="181:42"><name pos:start="181:42" pos:end="181:42">i</name></expr>]</index></name><operator pos:start="181:44" pos:end="181:44">.</operator><name pos:start="181:45" pos:end="181:51">p_memsz</name></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:27"><expr pos:start="183:17" pos:end="183:26"><operator pos:start="183:17" pos:end="183:18">++</operator><name pos:start="183:19" pos:end="183:26">loadsegs</name></expr>;</expr_stmt>

                <break pos:start="185:17" pos:end="185:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></for>

    </block_content>}</block>

<cpp:endif pos:start="193:1" pos:end="193:6">#<cpp:directive pos:start="193:2" pos:end="193:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="197:5" pos:end="197:32"><expr pos:start="197:5" pos:end="197:31"><name pos:start="197:5" pos:end="197:19"><name pos:start="197:5" pos:end="197:8">info</name><operator pos:start="197:9" pos:end="197:10">-&gt;</operator><name pos:start="197:11" pos:end="197:19">load_bias</name></name> <operator pos:start="197:21" pos:end="197:21">=</operator> <name pos:start="197:23" pos:end="197:31">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:32"><expr pos:start="199:5" pos:end="199:31"><name pos:start="199:5" pos:end="199:19"><name pos:start="199:5" pos:end="199:8">info</name><operator pos:start="199:9" pos:end="199:10">-&gt;</operator><name pos:start="199:11" pos:end="199:19">load_addr</name></name> <operator pos:start="199:21" pos:end="199:21">=</operator> <name pos:start="199:23" pos:end="199:31">load_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:44"><expr pos:start="201:5" pos:end="201:43"><name pos:start="201:5" pos:end="201:15"><name pos:start="201:5" pos:end="201:8">info</name><operator pos:start="201:9" pos:end="201:10">-&gt;</operator><name pos:start="201:11" pos:end="201:15">entry</name></name> <operator pos:start="201:17" pos:end="201:17">=</operator> <name pos:start="201:19" pos:end="201:31"><name pos:start="201:19" pos:end="201:22">ehdr</name><operator pos:start="201:23" pos:end="201:24">-&gt;</operator><name pos:start="201:25" pos:end="201:31">e_entry</name></name> <operator pos:start="201:33" pos:end="201:33">+</operator> <name pos:start="201:35" pos:end="201:43">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:26"><expr pos:start="203:5" pos:end="203:25"><name pos:start="203:5" pos:end="203:20"><name pos:start="203:5" pos:end="203:8">info</name><operator pos:start="203:9" pos:end="203:10">-&gt;</operator><name pos:start="203:11" pos:end="203:20">start_code</name></name> <operator pos:start="203:22" pos:end="203:22">=</operator> <operator pos:start="203:24" pos:end="203:24">-</operator><literal type="number" pos:start="203:25" pos:end="203:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:23"><expr pos:start="205:5" pos:end="205:22"><name pos:start="205:5" pos:end="205:18"><name pos:start="205:5" pos:end="205:8">info</name><operator pos:start="205:9" pos:end="205:10">-&gt;</operator><name pos:start="205:11" pos:end="205:18">end_code</name></name> <operator pos:start="205:20" pos:end="205:20">=</operator> <literal type="number" pos:start="205:22" pos:end="205:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:26"><expr pos:start="207:5" pos:end="207:25"><name pos:start="207:5" pos:end="207:20"><name pos:start="207:5" pos:end="207:8">info</name><operator pos:start="207:9" pos:end="207:10">-&gt;</operator><name pos:start="207:11" pos:end="207:20">start_data</name></name> <operator pos:start="207:22" pos:end="207:22">=</operator> <operator pos:start="207:24" pos:end="207:24">-</operator><literal type="number" pos:start="207:25" pos:end="207:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:23"><expr pos:start="209:5" pos:end="209:22"><name pos:start="209:5" pos:end="209:18"><name pos:start="209:5" pos:end="209:8">info</name><operator pos:start="209:9" pos:end="209:10">-&gt;</operator><name pos:start="209:11" pos:end="209:18">end_data</name></name> <operator pos:start="209:20" pos:end="209:20">=</operator> <literal type="number" pos:start="209:22" pos:end="209:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:18"><expr pos:start="211:5" pos:end="211:17"><name pos:start="211:5" pos:end="211:13"><name pos:start="211:5" pos:end="211:8">info</name><operator pos:start="211:9" pos:end="211:10">-&gt;</operator><name pos:start="211:11" pos:end="211:13">brk</name></name> <operator pos:start="211:15" pos:end="211:15">=</operator> <literal type="number" pos:start="211:17" pos:end="211:17">0</literal></expr>;</expr_stmt>




    <for pos:start="216:5" pos:end="370:5">for <control pos:start="216:9" pos:end="216:39">(<init pos:start="216:10" pos:end="216:15"><expr pos:start="216:10" pos:end="216:14"><name pos:start="216:10" pos:end="216:10">i</name> <operator pos:start="216:12" pos:end="216:12">=</operator> <literal type="number" pos:start="216:14" pos:end="216:14">0</literal></expr>;</init> <condition pos:start="216:17" pos:end="216:34"><expr pos:start="216:17" pos:end="216:33"><name pos:start="216:17" pos:end="216:17">i</name> <operator pos:start="216:19" pos:end="216:19">&lt;</operator> <name pos:start="216:21" pos:end="216:33"><name pos:start="216:21" pos:end="216:24">ehdr</name><operator pos:start="216:25" pos:end="216:26">-&gt;</operator><name pos:start="216:27" pos:end="216:33">e_phnum</name></name></expr>;</condition> <incr pos:start="216:36" pos:end="216:38"><expr pos:start="216:36" pos:end="216:38"><name pos:start="216:36" pos:end="216:36">i</name><operator pos:start="216:37" pos:end="216:38">++</operator></expr></incr>)</control> <block pos:start="216:41" pos:end="370:5">{<block_content pos:start="218:9" pos:end="368:9">

        <decl_stmt pos:start="218:9" pos:end="218:42"><decl pos:start="218:9" pos:end="218:41"><type pos:start="218:9" pos:end="218:25"><name pos:start="218:9" pos:end="218:23"><name pos:start="218:9" pos:end="218:14">struct</name> <name pos:start="218:16" pos:end="218:23">elf_phdr</name></name> <modifier pos:start="218:25" pos:end="218:25">*</modifier></type><name pos:start="218:26" pos:end="218:30">eppnt</name> <init pos:start="218:32" pos:end="218:41">= <expr pos:start="218:34" pos:end="218:41"><name pos:start="218:34" pos:end="218:37">phdr</name> <operator pos:start="218:39" pos:end="218:39">+</operator> <name pos:start="218:41" pos:end="218:41">i</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="220:9" pos:end="368:9"><if pos:start="220:9" pos:end="314:9">if <condition pos:start="220:12" pos:end="220:37">(<expr pos:start="220:13" pos:end="220:36"><name pos:start="220:13" pos:end="220:25"><name pos:start="220:13" pos:end="220:17">eppnt</name><operator pos:start="220:18" pos:end="220:19">-&gt;</operator><name pos:start="220:20" pos:end="220:25">p_type</name></name> <operator pos:start="220:27" pos:end="220:28">==</operator> <name pos:start="220:30" pos:end="220:36">PT_LOAD</name></expr>)</condition> <block pos:start="220:39" pos:end="314:9">{<block_content pos:start="222:13" pos:end="312:13">

            <decl_stmt pos:start="222:13" pos:end="222:68"><decl pos:start="222:13" pos:end="222:27"><type pos:start="222:13" pos:end="222:21"><name pos:start="222:13" pos:end="222:21">abi_ulong</name></type> <name pos:start="222:23" pos:end="222:27">vaddr</name></decl>, <decl pos:start="222:30" pos:end="222:37"><type ref="prev" pos:start="222:13" pos:end="222:21"/><name pos:start="222:30" pos:end="222:37">vaddr_po</name></decl>, <decl pos:start="222:40" pos:end="222:47"><type ref="prev" pos:start="222:13" pos:end="222:21"/><name pos:start="222:40" pos:end="222:47">vaddr_ps</name></decl>, <decl pos:start="222:50" pos:end="222:57"><type ref="prev" pos:start="222:13" pos:end="222:21"/><name pos:start="222:50" pos:end="222:57">vaddr_ef</name></decl>, <decl pos:start="222:60" pos:end="222:67"><type ref="prev" pos:start="222:13" pos:end="222:21"/><name pos:start="222:60" pos:end="222:67">vaddr_em</name></decl>;</decl_stmt>

            <decl_stmt pos:start="224:13" pos:end="224:29"><decl pos:start="224:13" pos:end="224:28"><type pos:start="224:13" pos:end="224:15"><name pos:start="224:13" pos:end="224:15">int</name></type> <name pos:start="224:17" pos:end="224:24">elf_prot</name> <init pos:start="224:26" pos:end="224:28">= <expr pos:start="224:28" pos:end="224:28"><literal type="number" pos:start="224:28" pos:end="224:28">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="228:13" pos:end="228:61"><if pos:start="228:13" pos:end="228:61">if <condition pos:start="228:16" pos:end="228:38">(<expr pos:start="228:17" pos:end="228:37"><name pos:start="228:17" pos:end="228:30"><name pos:start="228:17" pos:end="228:21">eppnt</name><operator pos:start="228:22" pos:end="228:23">-&gt;</operator><name pos:start="228:24" pos:end="228:30">p_flags</name></name> <operator pos:start="228:32" pos:end="228:32">&amp;</operator> <name pos:start="228:34" pos:end="228:37">PF_R</name></expr>)</condition><block type="pseudo" pos:start="228:40" pos:end="228:61"><block_content pos:start="228:40" pos:end="228:61"> <expr_stmt pos:start="228:40" pos:end="228:61"><expr pos:start="228:40" pos:end="228:60"><name pos:start="228:40" pos:end="228:47">elf_prot</name> <operator pos:start="228:49" pos:end="228:49">=</operator>  <name pos:start="228:52" pos:end="228:60">PROT_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="230:13" pos:end="230:62"><if pos:start="230:13" pos:end="230:62">if <condition pos:start="230:16" pos:end="230:38">(<expr pos:start="230:17" pos:end="230:37"><name pos:start="230:17" pos:end="230:30"><name pos:start="230:17" pos:end="230:21">eppnt</name><operator pos:start="230:22" pos:end="230:23">-&gt;</operator><name pos:start="230:24" pos:end="230:30">p_flags</name></name> <operator pos:start="230:32" pos:end="230:32">&amp;</operator> <name pos:start="230:34" pos:end="230:37">PF_W</name></expr>)</condition><block type="pseudo" pos:start="230:40" pos:end="230:62"><block_content pos:start="230:40" pos:end="230:62"> <expr_stmt pos:start="230:40" pos:end="230:62"><expr pos:start="230:40" pos:end="230:61"><name pos:start="230:40" pos:end="230:47">elf_prot</name> <operator pos:start="230:49" pos:end="230:50">|=</operator> <name pos:start="230:52" pos:end="230:61">PROT_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="232:13" pos:end="232:61"><if pos:start="232:13" pos:end="232:61">if <condition pos:start="232:16" pos:end="232:38">(<expr pos:start="232:17" pos:end="232:37"><name pos:start="232:17" pos:end="232:30"><name pos:start="232:17" pos:end="232:21">eppnt</name><operator pos:start="232:22" pos:end="232:23">-&gt;</operator><name pos:start="232:24" pos:end="232:30">p_flags</name></name> <operator pos:start="232:32" pos:end="232:32">&amp;</operator> <name pos:start="232:34" pos:end="232:37">PF_X</name></expr>)</condition><block type="pseudo" pos:start="232:40" pos:end="232:61"><block_content pos:start="232:40" pos:end="232:61"> <expr_stmt pos:start="232:40" pos:end="232:61"><expr pos:start="232:40" pos:end="232:60"><name pos:start="232:40" pos:end="232:47">elf_prot</name> <operator pos:start="232:49" pos:end="232:50">|=</operator> <name pos:start="232:52" pos:end="232:60">PROT_EXEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="236:13" pos:end="236:47"><expr pos:start="236:13" pos:end="236:46"><name pos:start="236:13" pos:end="236:17">vaddr</name> <operator pos:start="236:19" pos:end="236:19">=</operator> <name pos:start="236:21" pos:end="236:29">load_bias</name> <operator pos:start="236:31" pos:end="236:31">+</operator> <name pos:start="236:33" pos:end="236:46"><name pos:start="236:33" pos:end="236:37">eppnt</name><operator pos:start="236:38" pos:end="236:39">-&gt;</operator><name pos:start="236:40" pos:end="236:46">p_vaddr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="238:13" pos:end="238:52"><expr pos:start="238:13" pos:end="238:51"><name pos:start="238:13" pos:end="238:20">vaddr_po</name> <operator pos:start="238:22" pos:end="238:22">=</operator> <call pos:start="238:24" pos:end="238:51"><name pos:start="238:24" pos:end="238:44">TARGET_ELF_PAGEOFFSET</name><argument_list pos:start="238:45" pos:end="238:51">(<argument pos:start="238:46" pos:end="238:50"><expr pos:start="238:46" pos:end="238:50"><name pos:start="238:46" pos:end="238:50">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="240:13" pos:end="240:51"><expr pos:start="240:13" pos:end="240:50"><name pos:start="240:13" pos:end="240:20">vaddr_ps</name> <operator pos:start="240:22" pos:end="240:22">=</operator> <call pos:start="240:24" pos:end="240:50"><name pos:start="240:24" pos:end="240:43">TARGET_ELF_PAGESTART</name><argument_list pos:start="240:44" pos:end="240:50">(<argument pos:start="240:45" pos:end="240:49"><expr pos:start="240:45" pos:end="240:49"><name pos:start="240:45" pos:end="240:49">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="244:13" pos:end="248:70"><expr pos:start="244:13" pos:end="248:69"><name pos:start="244:13" pos:end="244:17">error</name> <operator pos:start="244:19" pos:end="244:19">=</operator> <call pos:start="244:21" pos:end="248:69"><name pos:start="244:21" pos:end="244:31">target_mmap</name><argument_list pos:start="244:32" pos:end="248:69">(<argument pos:start="244:33" pos:end="244:40"><expr pos:start="244:33" pos:end="244:40"><name pos:start="244:33" pos:end="244:40">vaddr_ps</name></expr></argument>, <argument pos:start="244:43" pos:end="244:68"><expr pos:start="244:43" pos:end="244:68"><name pos:start="244:43" pos:end="244:57"><name pos:start="244:43" pos:end="244:47">eppnt</name><operator pos:start="244:48" pos:end="244:49">-&gt;</operator><name pos:start="244:50" pos:end="244:57">p_filesz</name></name> <operator pos:start="244:59" pos:end="244:59">+</operator> <name pos:start="244:61" pos:end="244:68">vaddr_po</name></expr></argument>,

                                <argument pos:start="246:33" pos:end="246:40"><expr pos:start="246:33" pos:end="246:40"><name pos:start="246:33" pos:end="246:40">elf_prot</name></expr></argument>, <argument pos:start="246:43" pos:end="246:65"><expr pos:start="246:43" pos:end="246:65"><name pos:start="246:43" pos:end="246:53">MAP_PRIVATE</name> <operator pos:start="246:55" pos:end="246:55">|</operator> <name pos:start="246:57" pos:end="246:65">MAP_FIXED</name></expr></argument>,

                                <argument pos:start="248:33" pos:end="248:40"><expr pos:start="248:33" pos:end="248:40"><name pos:start="248:33" pos:end="248:40">image_fd</name></expr></argument>, <argument pos:start="248:43" pos:end="248:68"><expr pos:start="248:43" pos:end="248:68"><name pos:start="248:43" pos:end="248:57"><name pos:start="248:43" pos:end="248:47">eppnt</name><operator pos:start="248:48" pos:end="248:49">-&gt;</operator><name pos:start="248:50" pos:end="248:57">p_offset</name></name> <operator pos:start="248:59" pos:end="248:59">-</operator> <name pos:start="248:61" pos:end="248:68">vaddr_po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="250:13" pos:end="254:13"><if pos:start="250:13" pos:end="254:13">if <condition pos:start="250:16" pos:end="250:28">(<expr pos:start="250:17" pos:end="250:27"><name pos:start="250:17" pos:end="250:21">error</name> <operator pos:start="250:23" pos:end="250:24">==</operator> <operator pos:start="250:26" pos:end="250:26">-</operator><literal type="number" pos:start="250:27" pos:end="250:27">1</literal></expr>)</condition> <block pos:start="250:30" pos:end="254:13">{<block_content pos:start="252:17" pos:end="252:33">

                <goto pos:start="252:17" pos:end="252:33">goto <name pos:start="252:22" pos:end="252:32">exit_perror</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="258:13" pos:end="258:47"><expr pos:start="258:13" pos:end="258:46"><name pos:start="258:13" pos:end="258:20">vaddr_ef</name> <operator pos:start="258:22" pos:end="258:22">=</operator> <name pos:start="258:24" pos:end="258:28">vaddr</name> <operator pos:start="258:30" pos:end="258:30">+</operator> <name pos:start="258:32" pos:end="258:46"><name pos:start="258:32" pos:end="258:36">eppnt</name><operator pos:start="258:37" pos:end="258:38">-&gt;</operator><name pos:start="258:39" pos:end="258:46">p_filesz</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="260:13" pos:end="260:46"><expr pos:start="260:13" pos:end="260:45"><name pos:start="260:13" pos:end="260:20">vaddr_em</name> <operator pos:start="260:22" pos:end="260:22">=</operator> <name pos:start="260:24" pos:end="260:28">vaddr</name> <operator pos:start="260:30" pos:end="260:30">+</operator> <name pos:start="260:32" pos:end="260:45"><name pos:start="260:32" pos:end="260:36">eppnt</name><operator pos:start="260:37" pos:end="260:38">-&gt;</operator><name pos:start="260:39" pos:end="260:45">p_memsz</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="264:13" pos:end="264:79">/* If the load segment requests extra zeros (e.g. bss), map it.  */</comment>

            <if_stmt pos:start="266:13" pos:end="270:13"><if pos:start="266:13" pos:end="270:13">if <condition pos:start="266:16" pos:end="266:36">(<expr pos:start="266:17" pos:end="266:35"><name pos:start="266:17" pos:end="266:24">vaddr_ef</name> <operator pos:start="266:26" pos:end="266:26">&lt;</operator> <name pos:start="266:28" pos:end="266:35">vaddr_em</name></expr>)</condition> <block pos:start="266:38" pos:end="270:13">{<block_content pos:start="268:17" pos:end="268:55">

                <expr_stmt pos:start="268:17" pos:end="268:55"><expr pos:start="268:17" pos:end="268:54"><call pos:start="268:17" pos:end="268:54"><name pos:start="268:17" pos:end="268:24">zero_bss</name><argument_list pos:start="268:25" pos:end="268:54">(<argument pos:start="268:26" pos:end="268:33"><expr pos:start="268:26" pos:end="268:33"><name pos:start="268:26" pos:end="268:33">vaddr_ef</name></expr></argument>, <argument pos:start="268:36" pos:end="268:43"><expr pos:start="268:36" pos:end="268:43"><name pos:start="268:36" pos:end="268:43">vaddr_em</name></expr></argument>, <argument pos:start="268:46" pos:end="268:53"><expr pos:start="268:46" pos:end="268:53"><name pos:start="268:46" pos:end="268:53">elf_prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="274:13" pos:end="274:52">/* Find the full program boundaries.  */</comment>

            <if_stmt pos:start="276:13" pos:end="290:13"><if pos:start="276:13" pos:end="290:13">if <condition pos:start="276:16" pos:end="276:37">(<expr pos:start="276:17" pos:end="276:36"><name pos:start="276:17" pos:end="276:24">elf_prot</name> <operator pos:start="276:26" pos:end="276:26">&amp;</operator> <name pos:start="276:28" pos:end="276:36">PROT_EXEC</name></expr>)</condition> <block pos:start="276:39" pos:end="290:13">{<block_content pos:start="278:17" pos:end="288:17">

                <if_stmt pos:start="278:17" pos:end="282:17"><if pos:start="278:17" pos:end="282:17">if <condition pos:start="278:20" pos:end="278:45">(<expr pos:start="278:21" pos:end="278:44"><name pos:start="278:21" pos:end="278:25">vaddr</name> <operator pos:start="278:27" pos:end="278:27">&lt;</operator> <name pos:start="278:29" pos:end="278:44"><name pos:start="278:29" pos:end="278:32">info</name><operator pos:start="278:33" pos:end="278:34">-&gt;</operator><name pos:start="278:35" pos:end="278:44">start_code</name></name></expr>)</condition> <block pos:start="278:47" pos:end="282:17">{<block_content pos:start="280:21" pos:end="280:45">

                    <expr_stmt pos:start="280:21" pos:end="280:45"><expr pos:start="280:21" pos:end="280:44"><name pos:start="280:21" pos:end="280:36"><name pos:start="280:21" pos:end="280:24">info</name><operator pos:start="280:25" pos:end="280:26">-&gt;</operator><name pos:start="280:27" pos:end="280:36">start_code</name></name> <operator pos:start="280:38" pos:end="280:38">=</operator> <name pos:start="280:40" pos:end="280:44">vaddr</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="284:17" pos:end="288:17"><if pos:start="284:17" pos:end="288:17">if <condition pos:start="284:20" pos:end="284:46">(<expr pos:start="284:21" pos:end="284:45"><name pos:start="284:21" pos:end="284:28">vaddr_ef</name> <operator pos:start="284:30" pos:end="284:30">&gt;</operator> <name pos:start="284:32" pos:end="284:45"><name pos:start="284:32" pos:end="284:35">info</name><operator pos:start="284:36" pos:end="284:37">-&gt;</operator><name pos:start="284:38" pos:end="284:45">end_code</name></name></expr>)</condition> <block pos:start="284:48" pos:end="288:17">{<block_content pos:start="286:21" pos:end="286:46">

                    <expr_stmt pos:start="286:21" pos:end="286:46"><expr pos:start="286:21" pos:end="286:45"><name pos:start="286:21" pos:end="286:34"><name pos:start="286:21" pos:end="286:24">info</name><operator pos:start="286:25" pos:end="286:26">-&gt;</operator><name pos:start="286:27" pos:end="286:34">end_code</name></name> <operator pos:start="286:36" pos:end="286:36">=</operator> <name pos:start="286:38" pos:end="286:45">vaddr_ef</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="292:13" pos:end="312:13"><if pos:start="292:13" pos:end="312:13">if <condition pos:start="292:16" pos:end="292:38">(<expr pos:start="292:17" pos:end="292:37"><name pos:start="292:17" pos:end="292:24">elf_prot</name> <operator pos:start="292:26" pos:end="292:26">&amp;</operator> <name pos:start="292:28" pos:end="292:37">PROT_WRITE</name></expr>)</condition> <block pos:start="292:40" pos:end="312:13">{<block_content pos:start="294:17" pos:end="310:17">

                <if_stmt pos:start="294:17" pos:end="298:17"><if pos:start="294:17" pos:end="298:17">if <condition pos:start="294:20" pos:end="294:45">(<expr pos:start="294:21" pos:end="294:44"><name pos:start="294:21" pos:end="294:25">vaddr</name> <operator pos:start="294:27" pos:end="294:27">&lt;</operator> <name pos:start="294:29" pos:end="294:44"><name pos:start="294:29" pos:end="294:32">info</name><operator pos:start="294:33" pos:end="294:34">-&gt;</operator><name pos:start="294:35" pos:end="294:44">start_data</name></name></expr>)</condition> <block pos:start="294:47" pos:end="298:17">{<block_content pos:start="296:21" pos:end="296:45">

                    <expr_stmt pos:start="296:21" pos:end="296:45"><expr pos:start="296:21" pos:end="296:44"><name pos:start="296:21" pos:end="296:36"><name pos:start="296:21" pos:end="296:24">info</name><operator pos:start="296:25" pos:end="296:26">-&gt;</operator><name pos:start="296:27" pos:end="296:36">start_data</name></name> <operator pos:start="296:38" pos:end="296:38">=</operator> <name pos:start="296:40" pos:end="296:44">vaddr</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="300:17" pos:end="304:17"><if pos:start="300:17" pos:end="304:17">if <condition pos:start="300:20" pos:end="300:46">(<expr pos:start="300:21" pos:end="300:45"><name pos:start="300:21" pos:end="300:28">vaddr_ef</name> <operator pos:start="300:30" pos:end="300:30">&gt;</operator> <name pos:start="300:32" pos:end="300:45"><name pos:start="300:32" pos:end="300:35">info</name><operator pos:start="300:36" pos:end="300:37">-&gt;</operator><name pos:start="300:38" pos:end="300:45">end_data</name></name></expr>)</condition> <block pos:start="300:48" pos:end="304:17">{<block_content pos:start="302:21" pos:end="302:46">

                    <expr_stmt pos:start="302:21" pos:end="302:46"><expr pos:start="302:21" pos:end="302:45"><name pos:start="302:21" pos:end="302:34"><name pos:start="302:21" pos:end="302:24">info</name><operator pos:start="302:25" pos:end="302:26">-&gt;</operator><name pos:start="302:27" pos:end="302:34">end_data</name></name> <operator pos:start="302:36" pos:end="302:36">=</operator> <name pos:start="302:38" pos:end="302:45">vaddr_ef</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="306:17" pos:end="310:17"><if pos:start="306:17" pos:end="310:17">if <condition pos:start="306:20" pos:end="306:41">(<expr pos:start="306:21" pos:end="306:40"><name pos:start="306:21" pos:end="306:28">vaddr_em</name> <operator pos:start="306:30" pos:end="306:30">&gt;</operator> <name pos:start="306:32" pos:end="306:40"><name pos:start="306:32" pos:end="306:35">info</name><operator pos:start="306:36" pos:end="306:37">-&gt;</operator><name pos:start="306:38" pos:end="306:40">brk</name></name></expr>)</condition> <block pos:start="306:43" pos:end="310:17">{<block_content pos:start="308:21" pos:end="308:41">

                    <expr_stmt pos:start="308:21" pos:end="308:41"><expr pos:start="308:21" pos:end="308:40"><name pos:start="308:21" pos:end="308:29"><name pos:start="308:21" pos:end="308:24">info</name><operator pos:start="308:25" pos:end="308:26">-&gt;</operator><name pos:start="308:27" pos:end="308:29">brk</name></name> <operator pos:start="308:31" pos:end="308:31">=</operator> <name pos:start="308:33" pos:end="308:40">vaddr_em</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="314:11" pos:end="368:9">else if <condition pos:start="314:19" pos:end="314:62">(<expr pos:start="314:20" pos:end="314:61"><name pos:start="314:20" pos:end="314:32"><name pos:start="314:20" pos:end="314:24">eppnt</name><operator pos:start="314:25" pos:end="314:26">-&gt;</operator><name pos:start="314:27" pos:end="314:32">p_type</name></name> <operator pos:start="314:34" pos:end="314:35">==</operator> <name pos:start="314:37" pos:end="314:45">PT_INTERP</name> <operator pos:start="314:47" pos:end="314:48">&amp;&amp;</operator> <name pos:start="314:50" pos:end="314:61">pinterp_name</name></expr>)</condition> <block pos:start="314:64" pos:end="368:9">{<block_content pos:start="316:13" pos:end="366:40">

            <decl_stmt pos:start="316:13" pos:end="316:30"><decl pos:start="316:13" pos:end="316:29"><type pos:start="316:13" pos:end="316:18"><name pos:start="316:13" pos:end="316:16">char</name> <modifier pos:start="316:18" pos:end="316:18">*</modifier></type><name pos:start="316:19" pos:end="316:29">interp_name</name></decl>;</decl_stmt>



            <if_stmt pos:start="320:13" pos:end="326:13"><if pos:start="320:13" pos:end="326:13">if <condition pos:start="320:16" pos:end="320:30">(<expr pos:start="320:17" pos:end="320:29"><operator pos:start="320:17" pos:end="320:17">*</operator><name pos:start="320:18" pos:end="320:29">pinterp_name</name></expr>)</condition> <block pos:start="320:32" pos:end="326:13">{<block_content pos:start="322:17" pos:end="324:33">

                <expr_stmt pos:start="322:17" pos:end="322:54"><expr pos:start="322:17" pos:end="322:53"><name pos:start="322:17" pos:end="322:22">errmsg</name> <operator pos:start="322:24" pos:end="322:24">=</operator> <literal type="string" pos:start="322:26" pos:end="322:53">"Multiple PT_INTERP entries"</literal></expr>;</expr_stmt>

                <goto pos:start="324:17" pos:end="324:33">goto <name pos:start="324:22" pos:end="324:32">exit_errmsg</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="328:13" pos:end="328:50"><expr pos:start="328:13" pos:end="328:49"><name pos:start="328:13" pos:end="328:23">interp_name</name> <operator pos:start="328:25" pos:end="328:25">=</operator> <call pos:start="328:27" pos:end="328:49"><name pos:start="328:27" pos:end="328:32">malloc</name><argument_list pos:start="328:33" pos:end="328:49">(<argument pos:start="328:34" pos:end="328:48"><expr pos:start="328:34" pos:end="328:48"><name pos:start="328:34" pos:end="328:48"><name pos:start="328:34" pos:end="328:38">eppnt</name><operator pos:start="328:39" pos:end="328:40">-&gt;</operator><name pos:start="328:41" pos:end="328:48">p_filesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="330:13" pos:end="334:13"><if pos:start="330:13" pos:end="334:13">if <condition pos:start="330:16" pos:end="330:29">(<expr pos:start="330:17" pos:end="330:28"><operator pos:start="330:17" pos:end="330:17">!</operator><name pos:start="330:18" pos:end="330:28">interp_name</name></expr>)</condition> <block pos:start="330:31" pos:end="334:13">{<block_content pos:start="332:17" pos:end="332:33">

                <goto pos:start="332:17" pos:end="332:33">goto <name pos:start="332:22" pos:end="332:32">exit_perror</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="338:13" pos:end="356:13"><if pos:start="338:13" pos:end="344:13">if <condition pos:start="338:16" pos:end="338:67">(<expr pos:start="338:17" pos:end="338:66"><name pos:start="338:17" pos:end="338:31"><name pos:start="338:17" pos:end="338:21">eppnt</name><operator pos:start="338:22" pos:end="338:23">-&gt;</operator><name pos:start="338:24" pos:end="338:31">p_offset</name></name> <operator pos:start="338:33" pos:end="338:33">+</operator> <name pos:start="338:35" pos:end="338:49"><name pos:start="338:35" pos:end="338:39">eppnt</name><operator pos:start="338:40" pos:end="338:41">-&gt;</operator><name pos:start="338:42" pos:end="338:49">p_filesz</name></name> <operator pos:start="338:51" pos:end="338:52">&lt;=</operator> <name pos:start="338:54" pos:end="338:66">BPRM_BUF_SIZE</name></expr>)</condition> <block pos:start="338:69" pos:end="344:13">{<block_content pos:start="340:17" pos:end="342:40">

                <expr_stmt pos:start="340:17" pos:end="342:40"><expr pos:start="340:17" pos:end="342:39"><call pos:start="340:17" pos:end="342:39"><name pos:start="340:17" pos:end="340:22">memcpy</name><argument_list pos:start="340:23" pos:end="342:39">(<argument pos:start="340:24" pos:end="340:34"><expr pos:start="340:24" pos:end="340:34"><name pos:start="340:24" pos:end="340:34">interp_name</name></expr></argument>, <argument pos:start="340:37" pos:end="340:62"><expr pos:start="340:37" pos:end="340:62"><name pos:start="340:37" pos:end="340:44">bprm_buf</name> <operator pos:start="340:46" pos:end="340:46">+</operator> <name pos:start="340:48" pos:end="340:62"><name pos:start="340:48" pos:end="340:52">eppnt</name><operator pos:start="340:53" pos:end="340:54">-&gt;</operator><name pos:start="340:55" pos:end="340:62">p_offset</name></name></expr></argument>,

                       <argument pos:start="342:24" pos:end="342:38"><expr pos:start="342:24" pos:end="342:38"><name pos:start="342:24" pos:end="342:38"><name pos:start="342:24" pos:end="342:28">eppnt</name><operator pos:start="342:29" pos:end="342:30">-&gt;</operator><name pos:start="342:31" pos:end="342:38">p_filesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="344:15" pos:end="356:13">else <block pos:start="344:20" pos:end="356:13">{<block_content pos:start="346:17" pos:end="354:17">

                <expr_stmt pos:start="346:17" pos:end="348:48"><expr pos:start="346:17" pos:end="348:47"><name pos:start="346:17" pos:end="346:22">retval</name> <operator pos:start="346:24" pos:end="346:24">=</operator> <call pos:start="346:26" pos:end="348:47"><name pos:start="346:26" pos:end="346:30">pread</name><argument_list pos:start="346:31" pos:end="348:47">(<argument pos:start="346:32" pos:end="346:39"><expr pos:start="346:32" pos:end="346:39"><name pos:start="346:32" pos:end="346:39">image_fd</name></expr></argument>, <argument pos:start="346:42" pos:end="346:52"><expr pos:start="346:42" pos:end="346:52"><name pos:start="346:42" pos:end="346:52">interp_name</name></expr></argument>, <argument pos:start="346:55" pos:end="346:69"><expr pos:start="346:55" pos:end="346:69"><name pos:start="346:55" pos:end="346:69"><name pos:start="346:55" pos:end="346:59">eppnt</name><operator pos:start="346:60" pos:end="346:61">-&gt;</operator><name pos:start="346:62" pos:end="346:69">p_filesz</name></name></expr></argument>,

                               <argument pos:start="348:32" pos:end="348:46"><expr pos:start="348:32" pos:end="348:46"><name pos:start="348:32" pos:end="348:46"><name pos:start="348:32" pos:end="348:36">eppnt</name><operator pos:start="348:37" pos:end="348:38">-&gt;</operator><name pos:start="348:39" pos:end="348:46">p_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="350:17" pos:end="354:17"><if pos:start="350:17" pos:end="354:17">if <condition pos:start="350:20" pos:end="350:46">(<expr pos:start="350:21" pos:end="350:45"><name pos:start="350:21" pos:end="350:26">retval</name> <operator pos:start="350:28" pos:end="350:29">!=</operator> <name pos:start="350:31" pos:end="350:45"><name pos:start="350:31" pos:end="350:35">eppnt</name><operator pos:start="350:36" pos:end="350:37">-&gt;</operator><name pos:start="350:38" pos:end="350:45">p_filesz</name></name></expr>)</condition> <block pos:start="350:48" pos:end="354:17">{<block_content pos:start="352:21" pos:end="352:37">

                    <goto pos:start="352:21" pos:end="352:37">goto <name pos:start="352:26" pos:end="352:36">exit_perror</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="358:13" pos:end="364:13"><if pos:start="358:13" pos:end="364:13">if <condition pos:start="358:16" pos:end="358:54">(<expr pos:start="358:17" pos:end="358:53"><name pos:start="358:17" pos:end="358:48"><name pos:start="358:17" pos:end="358:27">interp_name</name><index pos:start="358:28" pos:end="358:48">[<expr pos:start="358:29" pos:end="358:47"><name pos:start="358:29" pos:end="358:43"><name pos:start="358:29" pos:end="358:33">eppnt</name><operator pos:start="358:34" pos:end="358:35">-&gt;</operator><name pos:start="358:36" pos:end="358:43">p_filesz</name></name> <operator pos:start="358:45" pos:end="358:45">-</operator> <literal type="number" pos:start="358:47" pos:end="358:47">1</literal></expr>]</index></name> <operator pos:start="358:50" pos:end="358:51">!=</operator> <literal type="number" pos:start="358:53" pos:end="358:53">0</literal></expr>)</condition> <block pos:start="358:56" pos:end="364:13">{<block_content pos:start="360:17" pos:end="362:33">

                <expr_stmt pos:start="360:17" pos:end="360:51"><expr pos:start="360:17" pos:end="360:50"><name pos:start="360:17" pos:end="360:22">errmsg</name> <operator pos:start="360:24" pos:end="360:24">=</operator> <literal type="string" pos:start="360:26" pos:end="360:50">"Invalid PT_INTERP entry"</literal></expr>;</expr_stmt>

                <goto pos:start="362:17" pos:end="362:33">goto <name pos:start="362:22" pos:end="362:32">exit_errmsg</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="366:13" pos:end="366:40"><expr pos:start="366:13" pos:end="366:39"><operator pos:start="366:13" pos:end="366:13">*</operator><name pos:start="366:14" pos:end="366:25">pinterp_name</name> <operator pos:start="366:27" pos:end="366:27">=</operator> <name pos:start="366:29" pos:end="366:39">interp_name</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="374:5" pos:end="382:5"><if pos:start="374:5" pos:end="382:5">if <condition pos:start="374:8" pos:end="374:28">(<expr pos:start="374:9" pos:end="374:27"><name pos:start="374:9" pos:end="374:22"><name pos:start="374:9" pos:end="374:12">info</name><operator pos:start="374:13" pos:end="374:14">-&gt;</operator><name pos:start="374:15" pos:end="374:22">end_data</name></name> <operator pos:start="374:24" pos:end="374:25">==</operator> <literal type="number" pos:start="374:27" pos:end="374:27">0</literal></expr>)</condition> <block pos:start="374:30" pos:end="382:5">{<block_content pos:start="376:9" pos:end="380:35">

        <expr_stmt pos:start="376:9" pos:end="376:42"><expr pos:start="376:9" pos:end="376:41"><name pos:start="376:9" pos:end="376:24"><name pos:start="376:9" pos:end="376:12">info</name><operator pos:start="376:13" pos:end="376:14">-&gt;</operator><name pos:start="376:15" pos:end="376:24">start_data</name></name> <operator pos:start="376:26" pos:end="376:26">=</operator> <name pos:start="376:28" pos:end="376:41"><name pos:start="376:28" pos:end="376:31">info</name><operator pos:start="376:32" pos:end="376:33">-&gt;</operator><name pos:start="376:34" pos:end="376:41">end_code</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="378:9" pos:end="378:40"><expr pos:start="378:9" pos:end="378:39"><name pos:start="378:9" pos:end="378:22"><name pos:start="378:9" pos:end="378:12">info</name><operator pos:start="378:13" pos:end="378:14">-&gt;</operator><name pos:start="378:15" pos:end="378:22">end_data</name></name> <operator pos:start="378:24" pos:end="378:24">=</operator> <name pos:start="378:26" pos:end="378:39"><name pos:start="378:26" pos:end="378:29">info</name><operator pos:start="378:30" pos:end="378:31">-&gt;</operator><name pos:start="378:32" pos:end="378:39">end_code</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="380:9" pos:end="380:35"><expr pos:start="380:9" pos:end="380:34"><name pos:start="380:9" pos:end="380:17"><name pos:start="380:9" pos:end="380:12">info</name><operator pos:start="380:13" pos:end="380:14">-&gt;</operator><name pos:start="380:15" pos:end="380:17">brk</name></name> <operator pos:start="380:19" pos:end="380:19">=</operator> <name pos:start="380:21" pos:end="380:34"><name pos:start="380:21" pos:end="380:24">info</name><operator pos:start="380:25" pos:end="380:26">-&gt;</operator><name pos:start="380:27" pos:end="380:34">end_code</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="386:5" pos:end="390:5"><if pos:start="386:5" pos:end="390:5">if <condition pos:start="386:8" pos:end="386:27">(<expr pos:start="386:9" pos:end="386:26"><call pos:start="386:9" pos:end="386:26"><name pos:start="386:9" pos:end="386:24">qemu_log_enabled</name><argument_list pos:start="386:25" pos:end="386:26">()</argument_list></call></expr>)</condition> <block pos:start="386:29" pos:end="390:5">{<block_content pos:start="388:9" pos:end="388:48">

        <expr_stmt pos:start="388:9" pos:end="388:48"><expr pos:start="388:9" pos:end="388:47"><call pos:start="388:9" pos:end="388:47"><name pos:start="388:9" pos:end="388:20">load_symbols</name><argument_list pos:start="388:21" pos:end="388:47">(<argument pos:start="388:22" pos:end="388:25"><expr pos:start="388:22" pos:end="388:25"><name pos:start="388:22" pos:end="388:25">ehdr</name></expr></argument>, <argument pos:start="388:28" pos:end="388:35"><expr pos:start="388:28" pos:end="388:35"><name pos:start="388:28" pos:end="388:35">image_fd</name></expr></argument>, <argument pos:start="388:38" pos:end="388:46"><expr pos:start="388:38" pos:end="388:46"><name pos:start="388:38" pos:end="388:46">load_bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="394:5" pos:end="394:20"><expr pos:start="394:5" pos:end="394:19"><call pos:start="394:5" pos:end="394:19"><name pos:start="394:5" pos:end="394:9">close</name><argument_list pos:start="394:10" pos:end="394:19">(<argument pos:start="394:11" pos:end="394:18"><expr pos:start="394:11" pos:end="394:18"><name pos:start="394:11" pos:end="394:18">image_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="396:5" pos:end="396:11">return;</return>



 <label pos:start="400:2" pos:end="400:11"><name pos:start="400:2" pos:end="400:10">exit_read</name>:</label>

    <if_stmt pos:start="402:5" pos:end="408:5"><if pos:start="402:5" pos:end="408:5">if <condition pos:start="402:8" pos:end="402:20">(<expr pos:start="402:9" pos:end="402:19"><name pos:start="402:9" pos:end="402:14">retval</name> <operator pos:start="402:16" pos:end="402:17">&gt;=</operator> <literal type="number" pos:start="402:19" pos:end="402:19">0</literal></expr>)</condition> <block pos:start="402:22" pos:end="408:5">{<block_content pos:start="404:9" pos:end="406:25">

        <expr_stmt pos:start="404:9" pos:end="404:50"><expr pos:start="404:9" pos:end="404:49"><name pos:start="404:9" pos:end="404:14">errmsg</name> <operator pos:start="404:16" pos:end="404:16">=</operator> <literal type="string" pos:start="404:18" pos:end="404:49">"Incomplete read of file header"</literal></expr>;</expr_stmt>

        <goto pos:start="406:9" pos:end="406:25">goto <name pos:start="406:14" pos:end="406:24">exit_errmsg</name>;</goto>

    </block_content>}</block></if></if_stmt>

 <label pos:start="410:2" pos:end="410:13"><name pos:start="410:2" pos:end="410:12">exit_perror</name>:</label>

    <expr_stmt pos:start="412:5" pos:end="412:29"><expr pos:start="412:5" pos:end="412:28"><name pos:start="412:5" pos:end="412:10">errmsg</name> <operator pos:start="412:12" pos:end="412:12">=</operator> <call pos:start="412:14" pos:end="412:28"><name pos:start="412:14" pos:end="412:21">strerror</name><argument_list pos:start="412:22" pos:end="412:28">(<argument pos:start="412:23" pos:end="412:27"><expr pos:start="412:23" pos:end="412:27"><name pos:start="412:23" pos:end="412:27">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="414:2" pos:end="414:13"><name pos:start="414:2" pos:end="414:12">exit_errmsg</name>:</label>

    <expr_stmt pos:start="416:5" pos:end="416:52"><expr pos:start="416:5" pos:end="416:51"><call pos:start="416:5" pos:end="416:51"><name pos:start="416:5" pos:end="416:11">fprintf</name><argument_list pos:start="416:12" pos:end="416:51">(<argument pos:start="416:13" pos:end="416:18"><expr pos:start="416:13" pos:end="416:18"><name pos:start="416:13" pos:end="416:18">stderr</name></expr></argument>, <argument pos:start="416:21" pos:end="416:30"><expr pos:start="416:21" pos:end="416:30"><literal type="string" pos:start="416:21" pos:end="416:30">"%s: %s\n"</literal></expr></argument>, <argument pos:start="416:33" pos:end="416:42"><expr pos:start="416:33" pos:end="416:42"><name pos:start="416:33" pos:end="416:42">image_name</name></expr></argument>, <argument pos:start="416:45" pos:end="416:50"><expr pos:start="416:45" pos:end="416:50"><name pos:start="416:45" pos:end="416:50">errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="418:5" pos:end="418:13"><expr pos:start="418:5" pos:end="418:12"><call pos:start="418:5" pos:end="418:12"><name pos:start="418:5" pos:end="418:8">exit</name><argument_list pos:start="418:9" pos:end="418:12">(<argument pos:start="418:10" pos:end="418:11"><expr pos:start="418:10" pos:end="418:11"><operator pos:start="418:10" pos:end="418:10">-</operator><literal type="number" pos:start="418:11" pos:end="418:11">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
