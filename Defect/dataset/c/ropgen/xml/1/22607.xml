<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22607.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">url_alloc_for_protocol</name><parameter_list pos:start="1:34" pos:end="5:64">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:44">URLContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier><modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">puc</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:74"><decl pos:start="1:53" pos:end="1:74"><type pos:start="1:53" pos:end="1:74"><name pos:start="1:53" pos:end="1:70"><name pos:start="1:53" pos:end="1:58">struct</name> <name pos:start="1:60" pos:end="1:70">URLProtocol</name></name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">up</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:54"><decl pos:start="3:35" pos:end="3:54"><type pos:start="3:35" pos:end="3:54"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:44">char</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:54">filename</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:65"><decl pos:start="3:57" pos:end="3:65"><type pos:start="3:57" pos:end="3:65"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:65">flags</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:63"><decl pos:start="5:35" pos:end="5:63"><type pos:start="5:35" pos:end="5:63"><specifier pos:start="5:35" pos:end="5:39">const</specifier> <name pos:start="5:41" pos:end="5:55">AVIOInterruptCB</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:63">int_cb</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="169:1">{<block_content pos:start="9:5" pos:end="167:15">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">URLContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:18">uc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:18">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18">CONFIG_NETWORK</name></expr></cpp:if>

    <if_stmt pos:start="17:5" pos:end="22:0"><if pos:start="17:5" pos:end="22:0">if <condition pos:start="17:8" pos:end="17:68">(<expr pos:start="17:9" pos:end="17:67"><name pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:10">up</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:17">flags</name></name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <name pos:start="17:21" pos:end="17:45">URL_PROTOCOL_FLAG_NETWORK</name> <operator pos:start="17:47" pos:end="17:48">&amp;&amp;</operator> <operator pos:start="17:50" pos:end="17:50">!</operator><call pos:start="17:51" pos:end="17:67"><name pos:start="17:51" pos:end="17:65">ff_network_init</name><argument_list pos:start="17:66" pos:end="17:67">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="22:0"><block_content pos:start="19:9" pos:end="22:0">

        <return pos:start="19:9" pos:end="22:0">return <expr pos:start="19:16" pos:end="19:27"><call pos:start="19:16" pos:end="19:27"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:27">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:50">(<expr pos:start="23:9" pos:end="23:49"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:14">flags</name> <operator pos:start="23:16" pos:end="23:16">&amp;</operator> <name pos:start="23:18" pos:end="23:31">AVIO_FLAG_READ</name><operator pos:start="23:32" pos:end="23:32">)</operator> <operator pos:start="23:34" pos:end="23:35">&amp;&amp;</operator> <operator pos:start="23:37" pos:end="23:37">!</operator><name pos:start="23:38" pos:end="23:49"><name pos:start="23:38" pos:end="23:39">up</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:49">url_read</name></name></expr>)</condition> <block pos:start="23:52" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:28">

        <expr_stmt pos:start="25:9" pos:end="27:79"><expr pos:start="25:9" pos:end="27:78"><call pos:start="25:9" pos:end="27:78"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="27:78">(<argument pos:start="25:16" pos:end="25:19"><expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">NULL</name></expr></argument>, <argument pos:start="25:22" pos:end="25:33"><expr pos:start="25:22" pos:end="25:33"><name pos:start="25:22" pos:end="25:33">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="27:16" pos:end="27:67"><expr pos:start="27:16" pos:end="27:67"><literal type="string" pos:start="27:16" pos:end="27:67">"Impossible to open the '%s' protocol for reading\n"</literal></expr></argument>, <argument pos:start="27:70" pos:end="27:77"><expr pos:start="27:70" pos:end="27:77"><name pos:start="27:70" pos:end="27:77"><name pos:start="27:70" pos:end="27:71">up</name><operator pos:start="27:72" pos:end="27:73">-&gt;</operator><name pos:start="27:74" pos:end="27:77">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:28">return <expr pos:start="29:16" pos:end="29:27"><call pos:start="29:16" pos:end="29:27"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:27">(<argument pos:start="29:24" pos:end="29:26"><expr pos:start="29:24" pos:end="29:26"><name pos:start="29:24" pos:end="29:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:52">(<expr pos:start="33:9" pos:end="33:51"><operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:14">flags</name> <operator pos:start="33:16" pos:end="33:16">&amp;</operator> <name pos:start="33:18" pos:end="33:32">AVIO_FLAG_WRITE</name><operator pos:start="33:33" pos:end="33:33">)</operator> <operator pos:start="33:35" pos:end="33:36">&amp;&amp;</operator> <operator pos:start="33:38" pos:end="33:38">!</operator><name pos:start="33:39" pos:end="33:51"><name pos:start="33:39" pos:end="33:40">up</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:51">url_write</name></name></expr>)</condition> <block pos:start="33:54" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:28">

        <expr_stmt pos:start="35:9" pos:end="37:79"><expr pos:start="35:9" pos:end="37:78"><call pos:start="35:9" pos:end="37:78"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="37:78">(<argument pos:start="35:16" pos:end="35:19"><expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr></argument>, <argument pos:start="35:22" pos:end="35:33"><expr pos:start="35:22" pos:end="35:33"><name pos:start="35:22" pos:end="35:33">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="37:16" pos:end="37:67"><expr pos:start="37:16" pos:end="37:67"><literal type="string" pos:start="37:16" pos:end="37:67">"Impossible to open the '%s' protocol for writing\n"</literal></expr></argument>, <argument pos:start="37:70" pos:end="37:77"><expr pos:start="37:70" pos:end="37:77"><name pos:start="37:70" pos:end="37:77"><name pos:start="37:70" pos:end="37:71">up</name><operator pos:start="37:72" pos:end="37:73">-&gt;</operator><name pos:start="37:74" pos:end="37:77">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:28">return <expr pos:start="39:16" pos:end="39:27"><call pos:start="39:16" pos:end="39:27"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:27">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:63"><expr pos:start="43:5" pos:end="43:62"><name pos:start="43:5" pos:end="43:6">uc</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <call pos:start="43:10" pos:end="43:62"><name pos:start="43:10" pos:end="43:19">av_mallocz</name><argument_list pos:start="43:20" pos:end="43:62">(<argument pos:start="43:21" pos:end="43:61"><expr pos:start="43:21" pos:end="43:61"><sizeof pos:start="43:21" pos:end="43:38">sizeof<argument_list pos:start="43:27" pos:end="43:38">(<argument pos:start="43:28" pos:end="43:37"><expr pos:start="43:28" pos:end="43:37"><name pos:start="43:28" pos:end="43:37">URLContext</name></expr></argument>)</argument_list></sizeof> <operator pos:start="43:40" pos:end="43:40">+</operator> <call pos:start="43:42" pos:end="43:57"><name pos:start="43:42" pos:end="43:47">strlen</name><argument_list pos:start="43:48" pos:end="43:57">(<argument pos:start="43:49" pos:end="43:56"><expr pos:start="43:49" pos:end="43:56"><name pos:start="43:49" pos:end="43:56">filename</name></expr></argument>)</argument_list></call> <operator pos:start="43:59" pos:end="43:59">+</operator> <literal type="number" pos:start="43:61" pos:end="43:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:12">(<expr pos:start="45:9" pos:end="45:11"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:11">uc</name></expr>)</condition> <block pos:start="45:14" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:18">

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:11">err</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:29"><name pos:start="47:15" pos:end="47:21">AVERROR</name><argument_list pos:start="47:22" pos:end="47:29">(<argument pos:start="47:23" pos:end="47:28"><expr pos:start="47:23" pos:end="47:28"><name pos:start="47:23" pos:end="47:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:6">uc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:16">av_class</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <operator pos:start="53:20" pos:end="53:20">&amp;</operator><name pos:start="53:21" pos:end="53:39">ffurl_context_class</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:34"><expr pos:start="55:5" pos:end="55:33"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:6">uc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:16">filename</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <operator pos:start="55:20" pos:end="55:20">(</operator><name pos:start="55:21" pos:end="55:24">char</name> <operator pos:start="55:26" pos:end="55:26">*</operator><operator pos:start="55:27" pos:end="55:27">)</operator><operator pos:start="55:28" pos:end="55:28">&amp;</operator><name pos:start="55:29" pos:end="55:33"><name pos:start="55:29" pos:end="55:30">uc</name><index pos:start="55:31" pos:end="55:33">[<expr pos:start="55:32" pos:end="55:32"><literal type="number" pos:start="55:32" pos:end="55:32">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><call pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:10">strcpy</name><argument_list pos:start="57:11" pos:end="57:34">(<argument pos:start="57:12" pos:end="57:23"><expr pos:start="57:12" pos:end="57:23"><name pos:start="57:12" pos:end="57:23"><name pos:start="57:12" pos:end="57:13">uc</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:23">filename</name></name></expr></argument>, <argument pos:start="57:26" pos:end="57:33"><expr pos:start="57:26" pos:end="57:33"><name pos:start="57:26" pos:end="57:33">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:12"><name pos:start="59:5" pos:end="59:6">uc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:12">prot</name></name>            <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:28">up</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:32"><expr pos:start="61:5" pos:end="61:31"><name pos:start="61:5" pos:end="61:13"><name pos:start="61:5" pos:end="61:6">uc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:13">flags</name></name>           <operator pos:start="61:25" pos:end="61:25">=</operator> <name pos:start="61:27" pos:end="61:31">flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:6">uc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:19">is_streamed</name></name>     <operator pos:start="63:25" pos:end="63:25">=</operator> <literal type="number" pos:start="63:27" pos:end="63:27">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="63:30" pos:end="63:57">/* default = not streamed */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:28"><expr pos:start="65:5" pos:end="65:27"><name pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:6">uc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:23">max_packet_size</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="65:30" pos:end="65:55">/* default: stream file */</comment>

    <if_stmt pos:start="67:5" pos:end="137:5"><if pos:start="67:5" pos:end="137:5">if <condition pos:start="67:8" pos:end="67:27">(<expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:10">up</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:26">priv_data_size</name></name></expr>)</condition> <block pos:start="67:29" pos:end="137:5">{<block_content pos:start="69:9" pos:end="135:9">

        <expr_stmt pos:start="69:9" pos:end="69:55"><expr pos:start="69:9" pos:end="69:54"><name pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:10">uc</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:21">priv_data</name></name> <operator pos:start="69:23" pos:end="69:23">=</operator> <call pos:start="69:25" pos:end="69:54"><name pos:start="69:25" pos:end="69:34">av_mallocz</name><argument_list pos:start="69:35" pos:end="69:54">(<argument pos:start="69:36" pos:end="69:53"><expr pos:start="69:36" pos:end="69:53"><name pos:start="69:36" pos:end="69:53"><name pos:start="69:36" pos:end="69:37">up</name><operator pos:start="69:38" pos:end="69:39">-&gt;</operator><name pos:start="69:40" pos:end="69:53">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:27">(<expr pos:start="71:13" pos:end="71:26"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:26"><name pos:start="71:14" pos:end="71:15">uc</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:26">priv_data</name></name></expr>)</condition> <block pos:start="71:29" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:22">

            <expr_stmt pos:start="73:13" pos:end="73:34"><expr pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:15">err</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:33"><name pos:start="73:19" pos:end="73:25">AVERROR</name><argument_list pos:start="73:26" pos:end="73:33">(<argument pos:start="73:27" pos:end="73:32"><expr pos:start="73:27" pos:end="73:32"><name pos:start="73:27" pos:end="73:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="75:13" pos:end="75:22">goto <name pos:start="75:18" pos:end="75:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="135:9"><if pos:start="79:9" pos:end="135:9">if <condition pos:start="79:12" pos:end="79:32">(<expr pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:14">up</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:31">priv_data_class</name></name></expr>)</condition> <block pos:start="79:34" pos:end="135:9">{<block_content pos:start="81:13" pos:end="133:13">

            <decl_stmt pos:start="81:13" pos:end="81:44"><decl pos:start="81:13" pos:end="81:43"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:25">proto_len</name><init pos:start="81:26" pos:end="81:43">= <expr pos:start="81:28" pos:end="81:43"><call pos:start="81:28" pos:end="81:43"><name pos:start="81:28" pos:end="81:33">strlen</name><argument_list pos:start="81:34" pos:end="81:43">(<argument pos:start="81:35" pos:end="81:42"><expr pos:start="81:35" pos:end="81:42"><name pos:start="81:35" pos:end="81:42"><name pos:start="81:35" pos:end="81:36">up</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:42">name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="83:13" pos:end="83:52"><decl pos:start="83:13" pos:end="83:51"><type pos:start="83:13" pos:end="83:18"><name pos:start="83:13" pos:end="83:16">char</name> <modifier pos:start="83:18" pos:end="83:18">*</modifier></type><name pos:start="83:19" pos:end="83:23">start</name> <init pos:start="83:25" pos:end="83:51">= <expr pos:start="83:27" pos:end="83:51"><call pos:start="83:27" pos:end="83:51"><name pos:start="83:27" pos:end="83:32">strchr</name><argument_list pos:start="83:33" pos:end="83:51">(<argument pos:start="83:34" pos:end="83:45"><expr pos:start="83:34" pos:end="83:45"><name pos:start="83:34" pos:end="83:45"><name pos:start="83:34" pos:end="83:35">uc</name><operator pos:start="83:36" pos:end="83:37">-&gt;</operator><name pos:start="83:38" pos:end="83:45">filename</name></name></expr></argument>, <argument pos:start="83:48" pos:end="83:50"><expr pos:start="83:48" pos:end="83:50"><literal type="char" pos:start="83:48" pos:end="83:50">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:67"><expr pos:start="85:13" pos:end="85:66"><operator pos:start="85:13" pos:end="85:13">*</operator><operator pos:start="85:14" pos:end="85:14">(</operator><specifier pos:start="85:15" pos:end="85:19">const</specifier> <name pos:start="85:21" pos:end="85:27">AVClass</name> <operator pos:start="85:29" pos:end="85:29">*</operator><operator pos:start="85:30" pos:end="85:30">*</operator><operator pos:start="85:31" pos:end="85:31">)</operator><name pos:start="85:32" pos:end="85:44"><name pos:start="85:32" pos:end="85:33">uc</name><operator pos:start="85:34" pos:end="85:35">-&gt;</operator><name pos:start="85:36" pos:end="85:44">priv_data</name></name> <operator pos:start="85:46" pos:end="85:46">=</operator> <name pos:start="85:48" pos:end="85:66"><name pos:start="85:48" pos:end="85:49">up</name><operator pos:start="85:50" pos:end="85:51">-&gt;</operator><name pos:start="85:52" pos:end="85:66">priv_data_class</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:47"><expr pos:start="87:13" pos:end="87:46"><call pos:start="87:13" pos:end="87:46"><name pos:start="87:13" pos:end="87:31">av_opt_set_defaults</name><argument_list pos:start="87:32" pos:end="87:46">(<argument pos:start="87:33" pos:end="87:45"><expr pos:start="87:33" pos:end="87:45"><name pos:start="87:33" pos:end="87:45"><name pos:start="87:33" pos:end="87:34">uc</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:45">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="133:13"><if pos:start="89:13" pos:end="133:13">if<condition pos:start="89:15" pos:end="89:96">(<expr pos:start="89:16" pos:end="89:95"><operator pos:start="89:16" pos:end="89:16">!</operator><call pos:start="89:17" pos:end="89:58"><name pos:start="89:17" pos:end="89:23">strncmp</name><argument_list pos:start="89:24" pos:end="89:58">(<argument pos:start="89:25" pos:end="89:32"><expr pos:start="89:25" pos:end="89:32"><name pos:start="89:25" pos:end="89:32"><name pos:start="89:25" pos:end="89:26">up</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:32">name</name></name></expr></argument>, <argument pos:start="89:35" pos:end="89:46"><expr pos:start="89:35" pos:end="89:46"><name pos:start="89:35" pos:end="89:46"><name pos:start="89:35" pos:end="89:36">uc</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:46">filename</name></name></expr></argument>, <argument pos:start="89:49" pos:end="89:57"><expr pos:start="89:49" pos:end="89:57"><name pos:start="89:49" pos:end="89:57">proto_len</name></expr></argument>)</argument_list></call> <operator pos:start="89:60" pos:end="89:61">&amp;&amp;</operator> <name pos:start="89:63" pos:end="89:74"><name pos:start="89:63" pos:end="89:64">uc</name><operator pos:start="89:65" pos:end="89:66">-&gt;</operator><name pos:start="89:67" pos:end="89:74">filename</name></name> <operator pos:start="89:76" pos:end="89:76">+</operator> <name pos:start="89:78" pos:end="89:86">proto_len</name> <operator pos:start="89:88" pos:end="89:89">==</operator> <name pos:start="89:91" pos:end="89:95">start</name></expr>)</condition><block pos:start="89:97" pos:end="133:13">{<block_content pos:start="91:17" pos:end="131:51">

                <decl_stmt pos:start="91:17" pos:end="91:27"><decl pos:start="91:17" pos:end="91:26"><type pos:start="91:17" pos:end="91:19"><name pos:start="91:17" pos:end="91:19">int</name></type> <name pos:start="91:21" pos:end="91:23">ret</name><init pos:start="91:24" pos:end="91:26">= <expr pos:start="91:26" pos:end="91:26"><literal type="number" pos:start="91:26" pos:end="91:26">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="93:17" pos:end="93:31"><decl pos:start="93:17" pos:end="93:30"><type pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:20">char</name> <modifier pos:start="93:22" pos:end="93:22">*</modifier></type><name pos:start="93:23" pos:end="93:23">p</name><init pos:start="93:24" pos:end="93:30">= <expr pos:start="93:26" pos:end="93:30"><name pos:start="93:26" pos:end="93:30">start</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="95:17" pos:end="95:31"><decl pos:start="95:17" pos:end="95:30"><type pos:start="95:17" pos:end="95:20"><name pos:start="95:17" pos:end="95:20">char</name></type> <name pos:start="95:22" pos:end="95:24">sep</name><init pos:start="95:25" pos:end="95:30">= <expr pos:start="95:27" pos:end="95:30"><operator pos:start="95:27" pos:end="95:27">*</operator><operator pos:start="95:28" pos:end="95:29">++</operator><name pos:start="95:30" pos:end="95:30">p</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="97:17" pos:end="97:32"><decl pos:start="97:17" pos:end="97:25"><type pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:20">char</name> <modifier pos:start="97:22" pos:end="97:22">*</modifier></type><name pos:start="97:23" pos:end="97:25">key</name></decl>, <decl pos:start="97:28" pos:end="97:31"><type ref="prev" pos:start="97:17" pos:end="97:22"><modifier pos:start="97:28" pos:end="97:28">*</modifier></type><name pos:start="97:29" pos:end="97:31">val</name></decl>;</decl_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:20"><expr pos:start="99:17" pos:end="99:19"><name pos:start="99:17" pos:end="99:17">p</name><operator pos:start="99:18" pos:end="99:19">++</operator></expr>;</expr_stmt>

                <while pos:start="101:17" pos:end="115:17">while<condition pos:start="101:22" pos:end="101:95">(<expr pos:start="101:23" pos:end="101:94"><name pos:start="101:23" pos:end="101:25">ret</name> <operator pos:start="101:27" pos:end="101:28">&gt;=</operator> <literal type="number" pos:start="101:30" pos:end="101:30">0</literal> <operator pos:start="101:32" pos:end="101:33">&amp;&amp;</operator> <operator pos:start="101:35" pos:end="101:35">(</operator><name pos:start="101:36" pos:end="101:38">key</name><operator pos:start="101:39" pos:end="101:39">=</operator> <call pos:start="101:41" pos:end="101:54"><name pos:start="101:41" pos:end="101:46">strchr</name><argument_list pos:start="101:47" pos:end="101:54">(<argument pos:start="101:48" pos:end="101:48"><expr pos:start="101:48" pos:end="101:48"><name pos:start="101:48" pos:end="101:48">p</name></expr></argument>, <argument pos:start="101:51" pos:end="101:53"><expr pos:start="101:51" pos:end="101:53"><name pos:start="101:51" pos:end="101:53">sep</name></expr></argument>)</argument_list></call><operator pos:start="101:55" pos:end="101:55">)</operator> <operator pos:start="101:57" pos:end="101:58">&amp;&amp;</operator> <name pos:start="101:60" pos:end="101:60">p</name><operator pos:start="101:61" pos:end="101:61">&lt;</operator><name pos:start="101:62" pos:end="101:64">key</name> <operator pos:start="101:66" pos:end="101:67">&amp;&amp;</operator> <operator pos:start="101:69" pos:end="101:69">(</operator><name pos:start="101:70" pos:end="101:72">val</name> <operator pos:start="101:74" pos:end="101:74">=</operator> <call pos:start="101:76" pos:end="101:93"><name pos:start="101:76" pos:end="101:81">strchr</name><argument_list pos:start="101:82" pos:end="101:93">(<argument pos:start="101:83" pos:end="101:87"><expr pos:start="101:83" pos:end="101:87"><name pos:start="101:83" pos:end="101:85">key</name><operator pos:start="101:86" pos:end="101:86">+</operator><literal type="number" pos:start="101:87" pos:end="101:87">1</literal></expr></argument>, <argument pos:start="101:90" pos:end="101:92"><expr pos:start="101:90" pos:end="101:92"><name pos:start="101:90" pos:end="101:92">sep</name></expr></argument>)</argument_list></call><operator pos:start="101:94" pos:end="101:94">)</operator></expr>)</condition><block pos:start="101:96" pos:end="115:17">{<block_content pos:start="103:21" pos:end="113:29">

                    <expr_stmt pos:start="103:21" pos:end="103:34"><expr pos:start="103:21" pos:end="103:33"><operator pos:start="103:21" pos:end="103:21">*</operator><name pos:start="103:22" pos:end="103:24">val</name><operator pos:start="103:25" pos:end="103:25">=</operator> <operator pos:start="103:27" pos:end="103:27">*</operator><name pos:start="103:28" pos:end="103:30">key</name><operator pos:start="103:31" pos:end="103:31">=</operator> <literal type="number" pos:start="103:33" pos:end="103:33">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:64"><expr pos:start="105:21" pos:end="105:63"><name pos:start="105:21" pos:end="105:23">ret</name><operator pos:start="105:24" pos:end="105:24">=</operator> <call pos:start="105:26" pos:end="105:63"><name pos:start="105:26" pos:end="105:35">av_opt_set</name><argument_list pos:start="105:36" pos:end="105:63">(<argument pos:start="105:37" pos:end="105:49"><expr pos:start="105:37" pos:end="105:49"><name pos:start="105:37" pos:end="105:49"><name pos:start="105:37" pos:end="105:38">uc</name><operator pos:start="105:39" pos:end="105:40">-&gt;</operator><name pos:start="105:41" pos:end="105:49">priv_data</name></name></expr></argument>, <argument pos:start="105:52" pos:end="105:52"><expr pos:start="105:52" pos:end="105:52"><name pos:start="105:52" pos:end="105:52">p</name></expr></argument>, <argument pos:start="105:55" pos:end="105:59"><expr pos:start="105:55" pos:end="105:59"><name pos:start="105:55" pos:end="105:57">key</name><operator pos:start="105:58" pos:end="105:58">+</operator><literal type="number" pos:start="105:59" pos:end="105:59">1</literal></expr></argument>, <argument pos:start="105:62" pos:end="105:62"><expr pos:start="105:62" pos:end="105:62"><literal type="number" pos:start="105:62" pos:end="105:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="107:21" pos:end="109:77"><if pos:start="107:21" pos:end="109:77">if <condition pos:start="107:24" pos:end="107:56">(<expr pos:start="107:25" pos:end="107:55"><name pos:start="107:25" pos:end="107:27">ret</name> <operator pos:start="107:29" pos:end="107:30">==</operator> <name pos:start="107:32" pos:end="107:55">AVERROR_OPTION_NOT_FOUND</name></expr>)</condition><block type="pseudo" pos:start="109:25" pos:end="109:77"><block_content pos:start="109:25" pos:end="109:77">

                        <expr_stmt pos:start="109:25" pos:end="109:77"><expr pos:start="109:25" pos:end="109:76"><call pos:start="109:25" pos:end="109:76"><name pos:start="109:25" pos:end="109:30">av_log</name><argument_list pos:start="109:31" pos:end="109:76">(<argument pos:start="109:32" pos:end="109:33"><expr pos:start="109:32" pos:end="109:33"><name pos:start="109:32" pos:end="109:33">uc</name></expr></argument>, <argument pos:start="109:36" pos:end="109:47"><expr pos:start="109:36" pos:end="109:47"><name pos:start="109:36" pos:end="109:47">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:50" pos:end="109:72"><expr pos:start="109:50" pos:end="109:72"><literal type="string" pos:start="109:50" pos:end="109:72">"Key '%s' not found.\n"</literal></expr></argument>, <argument pos:start="109:75" pos:end="109:75"><expr pos:start="109:75" pos:end="109:75"><name pos:start="109:75" pos:end="109:75">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="111:21" pos:end="111:36"><expr pos:start="111:21" pos:end="111:35"><operator pos:start="111:21" pos:end="111:21">*</operator><name pos:start="111:22" pos:end="111:24">val</name><operator pos:start="111:25" pos:end="111:25">=</operator> <operator pos:start="111:27" pos:end="111:27">*</operator><name pos:start="111:28" pos:end="111:30">key</name><operator pos:start="111:31" pos:end="111:31">=</operator> <name pos:start="111:33" pos:end="111:35">sep</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="113:21" pos:end="113:29"><expr pos:start="113:21" pos:end="113:28"><name pos:start="113:21" pos:end="113:21">p</name><operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:26">val</name><operator pos:start="113:27" pos:end="113:27">+</operator><literal type="number" pos:start="113:28" pos:end="113:28">1</literal></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="117:17" pos:end="129:17"><if pos:start="117:17" pos:end="129:17">if<condition pos:start="117:19" pos:end="117:35">(<expr pos:start="117:20" pos:end="117:34"><name pos:start="117:20" pos:end="117:22">ret</name><operator pos:start="117:23" pos:end="117:23">&lt;</operator><literal type="number" pos:start="117:24" pos:end="117:24">0</literal> <operator pos:start="117:26" pos:end="117:27">||</operator> <name pos:start="117:29" pos:end="117:29">p</name><operator pos:start="117:30" pos:end="117:31">!=</operator><name pos:start="117:32" pos:end="117:34">key</name></expr>)</condition><block pos:start="117:36" pos:end="129:17">{<block_content pos:start="119:21" pos:end="127:30">

                    <expr_stmt pos:start="119:21" pos:end="119:89"><expr pos:start="119:21" pos:end="119:88"><call pos:start="119:21" pos:end="119:88"><name pos:start="119:21" pos:end="119:26">av_log</name><argument_list pos:start="119:27" pos:end="119:88">(<argument pos:start="119:28" pos:end="119:29"><expr pos:start="119:28" pos:end="119:29"><name pos:start="119:28" pos:end="119:29">uc</name></expr></argument>, <argument pos:start="119:32" pos:end="119:43"><expr pos:start="119:32" pos:end="119:43"><name pos:start="119:32" pos:end="119:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:46" pos:end="119:80"><expr pos:start="119:46" pos:end="119:80"><literal type="string" pos:start="119:46" pos:end="119:80">"Error parsing options string %s\n"</literal></expr></argument>, <argument pos:start="119:83" pos:end="119:87"><expr pos:start="119:83" pos:end="119:87"><name pos:start="119:83" pos:end="119:87">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="121:21" pos:end="121:45"><expr pos:start="121:21" pos:end="121:44"><call pos:start="121:21" pos:end="121:44"><name pos:start="121:21" pos:end="121:28">av_freep</name><argument_list pos:start="121:29" pos:end="121:44">(<argument pos:start="121:30" pos:end="121:43"><expr pos:start="121:30" pos:end="121:43"><operator pos:start="121:30" pos:end="121:30">&amp;</operator><name pos:start="121:31" pos:end="121:43"><name pos:start="121:31" pos:end="121:32">uc</name><operator pos:start="121:33" pos:end="121:34">-&gt;</operator><name pos:start="121:35" pos:end="121:43">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:34"><expr pos:start="123:21" pos:end="123:33"><call pos:start="123:21" pos:end="123:33"><name pos:start="123:21" pos:end="123:28">av_freep</name><argument_list pos:start="123:29" pos:end="123:33">(<argument pos:start="123:30" pos:end="123:32"><expr pos:start="123:30" pos:end="123:32"><operator pos:start="123:30" pos:end="123:30">&amp;</operator><name pos:start="123:31" pos:end="123:32">uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:42"><expr pos:start="125:21" pos:end="125:41"><name pos:start="125:21" pos:end="125:23">err</name> <operator pos:start="125:25" pos:end="125:25">=</operator> <call pos:start="125:27" pos:end="125:41"><name pos:start="125:27" pos:end="125:33">AVERROR</name><argument_list pos:start="125:34" pos:end="125:41">(<argument pos:start="125:35" pos:end="125:40"><expr pos:start="125:35" pos:end="125:40"><name pos:start="125:35" pos:end="125:40">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="127:21" pos:end="127:30">goto <name pos:start="127:26" pos:end="127:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:51"><expr pos:start="131:17" pos:end="131:50"><call pos:start="131:17" pos:end="131:50"><name pos:start="131:17" pos:end="131:23">memmove</name><argument_list pos:start="131:24" pos:end="131:50">(<argument pos:start="131:25" pos:end="131:29"><expr pos:start="131:25" pos:end="131:29"><name pos:start="131:25" pos:end="131:29">start</name></expr></argument>, <argument pos:start="131:32" pos:end="131:36"><expr pos:start="131:32" pos:end="131:36"><name pos:start="131:32" pos:end="131:34">key</name><operator pos:start="131:35" pos:end="131:35">+</operator><literal type="number" pos:start="131:36" pos:end="131:36">1</literal></expr></argument>, <argument pos:start="131:39" pos:end="131:49"><expr pos:start="131:39" pos:end="131:49"><call pos:start="131:39" pos:end="131:49"><name pos:start="131:39" pos:end="131:44">strlen</name><argument_list pos:start="131:45" pos:end="131:49">(<argument pos:start="131:46" pos:end="131:48"><expr pos:start="131:46" pos:end="131:48"><name pos:start="131:46" pos:end="131:48">key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="139:5" pos:end="141:41"><if pos:start="139:5" pos:end="141:41">if <condition pos:start="139:8" pos:end="139:15">(<expr pos:start="139:9" pos:end="139:14"><name pos:start="139:9" pos:end="139:14">int_cb</name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:41"><block_content pos:start="141:9" pos:end="141:41">

        <expr_stmt pos:start="141:9" pos:end="141:41"><expr pos:start="141:9" pos:end="141:40"><name pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:10">uc</name><operator pos:start="141:11" pos:end="141:12">-&gt;</operator><name pos:start="141:13" pos:end="141:30">interrupt_callback</name></name> <operator pos:start="141:32" pos:end="141:32">=</operator> <operator pos:start="141:34" pos:end="141:34">*</operator><name pos:start="141:35" pos:end="141:40">int_cb</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:14"><expr pos:start="145:5" pos:end="145:13"><operator pos:start="145:5" pos:end="145:5">*</operator><name pos:start="145:6" pos:end="145:8">puc</name> <operator pos:start="145:10" pos:end="145:10">=</operator> <name pos:start="145:12" pos:end="145:13">uc</name></expr>;</expr_stmt>

    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

<label pos:start="149:1" pos:end="149:5"><name pos:start="149:1" pos:end="149:4">fail</name>:</label>

    <expr_stmt pos:start="151:5" pos:end="151:16"><expr pos:start="151:5" pos:end="151:15"><operator pos:start="151:5" pos:end="151:5">*</operator><name pos:start="151:6" pos:end="151:8">puc</name> <operator pos:start="151:10" pos:end="151:10">=</operator> <name pos:start="151:12" pos:end="151:15">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="155:33"><if pos:start="153:5" pos:end="155:33">if <condition pos:start="153:8" pos:end="153:11">(<expr pos:start="153:9" pos:end="153:10"><name pos:start="153:9" pos:end="153:10">uc</name></expr>)</condition><block type="pseudo" pos:start="155:9" pos:end="155:33"><block_content pos:start="155:9" pos:end="155:33">

        <expr_stmt pos:start="155:9" pos:end="155:33"><expr pos:start="155:9" pos:end="155:32"><call pos:start="155:9" pos:end="155:32"><name pos:start="155:9" pos:end="155:16">av_freep</name><argument_list pos:start="155:17" pos:end="155:32">(<argument pos:start="155:18" pos:end="155:31"><expr pos:start="155:18" pos:end="155:31"><operator pos:start="155:18" pos:end="155:18">&amp;</operator><name pos:start="155:19" pos:end="155:31"><name pos:start="155:19" pos:end="155:20">uc</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:31">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="157:5" pos:end="160:0"><expr pos:start="157:5" pos:end="157:17"><call pos:start="157:5" pos:end="157:17"><name pos:start="157:5" pos:end="157:12">av_freep</name><argument_list pos:start="157:13" pos:end="157:17">(<argument pos:start="157:14" pos:end="157:16"><expr pos:start="157:14" pos:end="157:16"><operator pos:start="157:14" pos:end="157:14">&amp;</operator><name pos:start="157:15" pos:end="157:16">uc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="159:1" pos:end="159:18">#<cpp:directive pos:start="159:2" pos:end="159:3">if</cpp:directive> <expr pos:start="159:5" pos:end="159:18"><name pos:start="159:5" pos:end="159:18">CONFIG_NETWORK</name></expr></cpp:if>

    <if_stmt pos:start="161:5" pos:end="166:0"><if pos:start="161:5" pos:end="166:0">if <condition pos:start="161:8" pos:end="161:46">(<expr pos:start="161:9" pos:end="161:45"><name pos:start="161:9" pos:end="161:17"><name pos:start="161:9" pos:end="161:10">up</name><operator pos:start="161:11" pos:end="161:12">-&gt;</operator><name pos:start="161:13" pos:end="161:17">flags</name></name> <operator pos:start="161:19" pos:end="161:19">&amp;</operator> <name pos:start="161:21" pos:end="161:45">URL_PROTOCOL_FLAG_NETWORK</name></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="166:0"><block_content pos:start="163:9" pos:end="166:0">

        <expr_stmt pos:start="163:9" pos:end="166:0"><expr pos:start="163:9" pos:end="163:26"><call pos:start="163:9" pos:end="163:26"><name pos:start="163:9" pos:end="163:24">ff_network_close</name><argument_list pos:start="163:25" pos:end="163:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>

    <return pos:start="167:5" pos:end="167:15">return <expr pos:start="167:12" pos:end="167:14"><name pos:start="167:12" pos:end="167:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
