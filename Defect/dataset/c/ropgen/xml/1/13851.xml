<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13851.c" pos:tabs="8"><function pos:start="1:1" pos:end="160:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">xwma_read_header</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="160:13">{<block_content pos:start="3:5" pos:end="160:13">
    <decl_stmt pos:start="3:5" pos:end="3:17"><decl pos:start="3:5" pos:end="3:16"><type pos:start="3:5" pos:end="3:11"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:16">size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:12"><decl pos:start="4:5" pos:end="4:11"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:28">dpds_table_size</name> <init pos:start="5:30" pos:end="5:32">= <expr pos:start="5:32" pos:end="5:32"><literal type="number" pos:start="5:32" pos:end="5:32">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:29"><decl pos:start="6:5" pos:end="6:28"><type pos:start="6:5" pos:end="6:14"><name pos:start="6:5" pos:end="6:12">uint32_t</name> <modifier pos:start="6:14" pos:end="6:14">*</modifier></type><name pos:start="6:15" pos:end="6:24">dpds_table</name> <init pos:start="6:26" pos:end="6:28">= <expr pos:start="6:28" pos:end="6:28"><literal type="number" pos:start="6:28" pos:end="6:28">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:20">tag</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:17"><name pos:start="8:5" pos:end="8:15">AVIOContext</name> <modifier pos:start="8:17" pos:end="8:17">*</modifier></type><name pos:start="8:18" pos:end="8:19">pb</name> <init pos:start="8:21" pos:end="8:27">= <expr pos:start="8:23" pos:end="8:27"><name pos:start="8:23" pos:end="8:27"><name pos:start="8:23" pos:end="8:23">s</name><operator pos:start="8:24" pos:end="8:25">-&gt;</operator><name pos:start="8:26" pos:end="8:27">pb</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVStream</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">st</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:37"><decl pos:start="10:5" pos:end="10:36"><type pos:start="10:5" pos:end="10:17"><name pos:start="10:5" pos:end="10:15">XWMAContext</name> <modifier pos:start="10:17" pos:end="10:17">*</modifier></type><name pos:start="10:18" pos:end="10:21">xwma</name> <init pos:start="10:23" pos:end="10:36">= <expr pos:start="10:25" pos:end="10:36"><name pos:start="10:25" pos:end="10:36"><name pos:start="10:25" pos:end="10:25">s</name><operator pos:start="10:26" pos:end="10:27">-&gt;</operator><name pos:start="10:28" pos:end="10:36">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>
    <comment type="block" pos:start="12:5" pos:end="14:7">/* The following code is mostly copied from wav.c, with some
     * minor alterations.
     */</comment>
    <comment type="block" pos:start="15:5" pos:end="15:27">/* check RIFF header */</comment>
    <expr_stmt pos:start="16:5" pos:end="16:24"><expr pos:start="16:5" pos:end="16:23"><name pos:start="16:5" pos:end="16:7">tag</name> <operator pos:start="16:9" pos:end="16:9">=</operator> <call pos:start="16:11" pos:end="16:23"><name pos:start="16:11" pos:end="16:19">avio_rl32</name><argument_list pos:start="16:20" pos:end="16:23">(<argument pos:start="16:21" pos:end="16:22"><expr pos:start="16:21" pos:end="16:22"><name pos:start="16:21" pos:end="16:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="18:18"><if pos:start="17:5" pos:end="18:18">if <condition pos:start="17:8" pos:end="17:41">(<expr pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:11">tag</name> <operator pos:start="17:13" pos:end="17:14">!=</operator> <call pos:start="17:16" pos:end="17:40"><name pos:start="17:16" pos:end="17:20">MKTAG</name><argument_list pos:start="17:21" pos:end="17:40">(<argument pos:start="17:22" pos:end="17:24"><expr pos:start="17:22" pos:end="17:24"><literal type="char" pos:start="17:22" pos:end="17:24">'R'</literal></expr></argument>, <argument pos:start="17:27" pos:end="17:29"><expr pos:start="17:27" pos:end="17:29"><literal type="char" pos:start="17:27" pos:end="17:29">'I'</literal></expr></argument>, <argument pos:start="17:32" pos:end="17:34"><expr pos:start="17:32" pos:end="17:34"><literal type="char" pos:start="17:32" pos:end="17:34">'F'</literal></expr></argument>, <argument pos:start="17:37" pos:end="17:39"><expr pos:start="17:37" pos:end="17:39"><literal type="char" pos:start="17:37" pos:end="17:39">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="18:9" pos:end="18:18"><block_content pos:start="18:9" pos:end="18:18">
        <return pos:start="18:9" pos:end="18:18">return <expr pos:start="18:16" pos:end="18:17"><operator pos:start="18:16" pos:end="18:16">-</operator><literal type="number" pos:start="18:17" pos:end="18:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:18"><expr pos:start="19:5" pos:end="19:17"><call pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:13">avio_rl32</name><argument_list pos:start="19:14" pos:end="19:17">(<argument pos:start="19:15" pos:end="19:16"><expr pos:start="19:15" pos:end="19:16"><name pos:start="19:15" pos:end="19:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="19:20" pos:end="19:34">/* file size */</comment>
    <expr_stmt pos:start="20:5" pos:end="20:24"><expr pos:start="20:5" pos:end="20:23"><name pos:start="20:5" pos:end="20:7">tag</name> <operator pos:start="20:9" pos:end="20:9">=</operator> <call pos:start="20:11" pos:end="20:23"><name pos:start="20:11" pos:end="20:19">avio_rl32</name><argument_list pos:start="20:20" pos:end="20:23">(<argument pos:start="20:21" pos:end="20:22"><expr pos:start="20:21" pos:end="20:22"><name pos:start="20:21" pos:end="20:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="21:5" pos:end="22:18"><if pos:start="21:5" pos:end="22:18">if <condition pos:start="21:8" pos:end="21:41">(<expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:11">tag</name> <operator pos:start="21:13" pos:end="21:14">!=</operator> <call pos:start="21:16" pos:end="21:40"><name pos:start="21:16" pos:end="21:20">MKTAG</name><argument_list pos:start="21:21" pos:end="21:40">(<argument pos:start="21:22" pos:end="21:24"><expr pos:start="21:22" pos:end="21:24"><literal type="char" pos:start="21:22" pos:end="21:24">'X'</literal></expr></argument>, <argument pos:start="21:27" pos:end="21:29"><expr pos:start="21:27" pos:end="21:29"><literal type="char" pos:start="21:27" pos:end="21:29">'W'</literal></expr></argument>, <argument pos:start="21:32" pos:end="21:34"><expr pos:start="21:32" pos:end="21:34"><literal type="char" pos:start="21:32" pos:end="21:34">'M'</literal></expr></argument>, <argument pos:start="21:37" pos:end="21:39"><expr pos:start="21:37" pos:end="21:39"><literal type="char" pos:start="21:37" pos:end="21:39">'A'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="22:9" pos:end="22:18"><block_content pos:start="22:9" pos:end="22:18">
        <return pos:start="22:9" pos:end="22:18">return <expr pos:start="22:16" pos:end="22:17"><operator pos:start="22:16" pos:end="22:16">-</operator><literal type="number" pos:start="22:17" pos:end="22:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="23:5" pos:end="23:26">/* parse fmt header */</comment>
    <expr_stmt pos:start="24:5" pos:end="24:24"><expr pos:start="24:5" pos:end="24:23"><name pos:start="24:5" pos:end="24:7">tag</name> <operator pos:start="24:9" pos:end="24:9">=</operator> <call pos:start="24:11" pos:end="24:23"><name pos:start="24:11" pos:end="24:19">avio_rl32</name><argument_list pos:start="24:20" pos:end="24:23">(<argument pos:start="24:21" pos:end="24:22"><expr pos:start="24:21" pos:end="24:22"><name pos:start="24:21" pos:end="24:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="25:5" pos:end="26:18"><if pos:start="25:5" pos:end="26:18">if <condition pos:start="25:8" pos:end="25:41">(<expr pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:11">tag</name> <operator pos:start="25:13" pos:end="25:14">!=</operator> <call pos:start="25:16" pos:end="25:40"><name pos:start="25:16" pos:end="25:20">MKTAG</name><argument_list pos:start="25:21" pos:end="25:40">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><literal type="char" pos:start="25:22" pos:end="25:24">'f'</literal></expr></argument>, <argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><literal type="char" pos:start="25:27" pos:end="25:29">'m'</literal></expr></argument>, <argument pos:start="25:32" pos:end="25:34"><expr pos:start="25:32" pos:end="25:34"><literal type="char" pos:start="25:32" pos:end="25:34">'t'</literal></expr></argument>, <argument pos:start="25:37" pos:end="25:39"><expr pos:start="25:37" pos:end="25:39"><literal type="char" pos:start="25:37" pos:end="25:39">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="26:9" pos:end="26:18"><block_content pos:start="26:9" pos:end="26:18">
        <return pos:start="26:9" pos:end="26:18">return <expr pos:start="26:16" pos:end="26:17"><operator pos:start="26:16" pos:end="26:16">-</operator><literal type="number" pos:start="26:17" pos:end="26:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:8">size</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:24"><name pos:start="27:12" pos:end="27:20">avio_rl32</name><argument_list pos:start="27:21" pos:end="27:24">(<argument pos:start="27:22" pos:end="27:23"><expr pos:start="27:22" pos:end="27:23"><name pos:start="27:22" pos:end="27:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:38"><expr pos:start="28:5" pos:end="28:37"><name pos:start="28:5" pos:end="28:6">st</name> <operator pos:start="28:8" pos:end="28:8">=</operator> <call pos:start="28:10" pos:end="28:37"><name pos:start="28:10" pos:end="28:28">avformat_new_stream</name><argument_list pos:start="28:29" pos:end="28:37">(<argument pos:start="28:30" pos:end="28:30"><expr pos:start="28:30" pos:end="28:30"><name pos:start="28:30" pos:end="28:30">s</name></expr></argument>, <argument pos:start="28:33" pos:end="28:36"><expr pos:start="28:33" pos:end="28:36"><name pos:start="28:33" pos:end="28:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="29:5" pos:end="30:31"><if pos:start="29:5" pos:end="30:31">if <condition pos:start="29:8" pos:end="29:12">(<expr pos:start="29:9" pos:end="29:11"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:11">st</name></expr>)</condition><block type="pseudo" pos:start="30:9" pos:end="30:31"><block_content pos:start="30:9" pos:end="30:31">
        <return pos:start="30:9" pos:end="30:31">return <expr pos:start="30:16" pos:end="30:30"><call pos:start="30:16" pos:end="30:30"><name pos:start="30:16" pos:end="30:22">AVERROR</name><argument_list pos:start="30:23" pos:end="30:30">(<argument pos:start="30:24" pos:end="30:29"><expr pos:start="30:24" pos:end="30:29"><name pos:start="30:24" pos:end="30:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:49"><expr pos:start="31:5" pos:end="31:48"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:48"><name pos:start="31:11" pos:end="31:27">ff_get_wav_header</name><argument_list pos:start="31:28" pos:end="31:48">(<argument pos:start="31:29" pos:end="31:30"><expr pos:start="31:29" pos:end="31:30"><name pos:start="31:29" pos:end="31:30">pb</name></expr></argument>, <argument pos:start="31:33" pos:end="31:41"><expr pos:start="31:33" pos:end="31:41"><name pos:start="31:33" pos:end="31:41"><name pos:start="31:33" pos:end="31:34">st</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:41">codec</name></name></expr></argument>, <argument pos:start="31:44" pos:end="31:47"><expr pos:start="31:44" pos:end="31:47"><name pos:start="31:44" pos:end="31:47">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="32:5" pos:end="33:19"><if pos:start="32:5" pos:end="33:19">if <condition pos:start="32:8" pos:end="32:16">(<expr pos:start="32:9" pos:end="32:15"><name pos:start="32:9" pos:end="32:11">ret</name> <operator pos:start="32:13" pos:end="32:13">&lt;</operator> <literal type="number" pos:start="32:15" pos:end="32:15">0</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:19"><block_content pos:start="33:9" pos:end="33:19">
        <return pos:start="33:9" pos:end="33:19">return <expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:43"><expr pos:start="34:5" pos:end="34:42"><name pos:start="34:5" pos:end="34:20"><name pos:start="34:5" pos:end="34:6">st</name><operator pos:start="34:7" pos:end="34:8">-&gt;</operator><name pos:start="34:9" pos:end="34:20">need_parsing</name></name> <operator pos:start="34:22" pos:end="34:22">=</operator> <name pos:start="34:24" pos:end="34:42">AVSTREAM_PARSE_NONE</name></expr>;</expr_stmt>
    <comment type="block" pos:start="35:5" pos:end="39:7">/* All xWMA files I have seen contained WMAv2 data. If there are files
     * using WMA Pro or some other codec, then we need to figure out the right
     * extradata for that. Thus, ask the user for feedback, but try to go on
     * anyway.
     */</comment>
    <if_stmt pos:start="40:5" pos:end="160:13"><if pos:start="40:5" pos:end="44:5">if <condition pos:start="40:8" pos:end="40:49">(<expr pos:start="40:9" pos:end="40:48"><name pos:start="40:9" pos:end="40:27"><name pos:start="40:9" pos:end="40:10">st</name><operator pos:start="40:11" pos:end="40:12">-&gt;</operator><name pos:start="40:13" pos:end="40:17">codec</name><operator pos:start="40:18" pos:end="40:19">-&gt;</operator><name pos:start="40:20" pos:end="40:27">codec_id</name></name> <operator pos:start="40:29" pos:end="40:30">!=</operator> <name pos:start="40:32" pos:end="40:48">AV_CODEC_ID_WMAV2</name></expr>)</condition> <block pos:start="40:51" pos:end="44:5">{<block_content pos:start="41:9" pos:end="43:39">
        <expr_stmt pos:start="41:9" pos:end="42:73"><expr pos:start="41:9" pos:end="42:72"><call pos:start="41:9" pos:end="42:72"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="42:72">(<argument pos:start="41:16" pos:end="41:16"><expr pos:start="41:16" pos:end="41:16"><name pos:start="41:16" pos:end="41:16">s</name></expr></argument>, <argument pos:start="41:19" pos:end="41:32"><expr pos:start="41:19" pos:end="41:32"><name pos:start="41:19" pos:end="41:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="41:35" pos:end="41:74"><expr pos:start="41:35" pos:end="41:74"><literal type="string" pos:start="41:35" pos:end="41:74">"unexpected codec (tag 0x04%x; id %d)\n"</literal></expr></argument>,
                              <argument pos:start="42:31" pos:end="42:50"><expr pos:start="42:31" pos:end="42:50"><name pos:start="42:31" pos:end="42:50"><name pos:start="42:31" pos:end="42:32">st</name><operator pos:start="42:33" pos:end="42:34">-&gt;</operator><name pos:start="42:35" pos:end="42:39">codec</name><operator pos:start="42:40" pos:end="42:41">-&gt;</operator><name pos:start="42:42" pos:end="42:50">codec_tag</name></name></expr></argument>, <argument pos:start="42:53" pos:end="42:71"><expr pos:start="42:53" pos:end="42:71"><name pos:start="42:53" pos:end="42:71"><name pos:start="42:53" pos:end="42:54">st</name><operator pos:start="42:55" pos:end="42:56">-&gt;</operator><name pos:start="42:57" pos:end="42:61">codec</name><operator pos:start="42:62" pos:end="42:63">-&gt;</operator><name pos:start="42:64" pos:end="42:71">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><call pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:29">av_log_ask_for_sample</name><argument_list pos:start="43:30" pos:end="43:38">(<argument pos:start="43:31" pos:end="43:31"><expr pos:start="43:31" pos:end="43:31"><name pos:start="43:31" pos:end="43:31">s</name></expr></argument>, <argument pos:start="43:34" pos:end="43:37"><expr pos:start="43:34" pos:end="43:37"><name pos:start="43:34" pos:end="43:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="44:7" pos:end="160:13">else <block pos:start="44:12" pos:end="160:13">{<block_content pos:start="52:9" pos:end="160:13">
        <comment type="block" pos:start="45:9" pos:end="51:11">/* In all xWMA files I have seen, there is no extradata. But the WMA
         * codecs require extradata, so we provide our own fake extradata.
         *
         * First, check that there really was no extradata in the header. If
         * there was, then try to use it, after asking the user to provide a
         * sample of this unusual file.
         */</comment>
        <if_stmt pos:start="52:9" pos:end="160:13"><if pos:start="52:9" pos:end="60:9">if <condition pos:start="52:12" pos:end="52:43">(<expr pos:start="52:13" pos:end="52:42"><name pos:start="52:13" pos:end="52:37"><name pos:start="52:13" pos:end="52:14">st</name><operator pos:start="52:15" pos:end="52:16">-&gt;</operator><name pos:start="52:17" pos:end="52:21">codec</name><operator pos:start="52:22" pos:end="52:23">-&gt;</operator><name pos:start="52:24" pos:end="52:37">extradata_size</name></name> <operator pos:start="52:39" pos:end="52:40">!=</operator> <literal type="number" pos:start="52:42" pos:end="52:42">0</literal></expr>)</condition> <block pos:start="52:45" pos:end="60:9">{<block_content pos:start="57:13" pos:end="59:43">
            <comment type="block" pos:start="53:13" pos:end="56:15">/* Surprise, surprise: We *did* get some extradata. No idea
             * if it will work, but just go on and try it, after asking
             * the user for a sample.
             */</comment>
            <expr_stmt pos:start="57:13" pos:end="58:61"><expr pos:start="57:13" pos:end="58:60"><call pos:start="57:13" pos:end="58:60"><name pos:start="57:13" pos:end="57:18">av_log</name><argument_list pos:start="57:19" pos:end="58:60">(<argument pos:start="57:20" pos:end="57:20"><expr pos:start="57:20" pos:end="57:20"><name pos:start="57:20" pos:end="57:20">s</name></expr></argument>, <argument pos:start="57:23" pos:end="57:36"><expr pos:start="57:23" pos:end="57:36"><name pos:start="57:23" pos:end="57:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="57:39" pos:end="57:73"><expr pos:start="57:39" pos:end="57:73"><literal type="string" pos:start="57:39" pos:end="57:73">"unexpected extradata (%d bytes)\n"</literal></expr></argument>,
                                  <argument pos:start="58:35" pos:end="58:59"><expr pos:start="58:35" pos:end="58:59"><name pos:start="58:35" pos:end="58:59"><name pos:start="58:35" pos:end="58:36">st</name><operator pos:start="58:37" pos:end="58:38">-&gt;</operator><name pos:start="58:39" pos:end="58:43">codec</name><operator pos:start="58:44" pos:end="58:45">-&gt;</operator><name pos:start="58:46" pos:end="58:59">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="59:13" pos:end="59:43"><expr pos:start="59:13" pos:end="59:42"><call pos:start="59:13" pos:end="59:42"><name pos:start="59:13" pos:end="59:33">av_log_ask_for_sample</name><argument_list pos:start="59:34" pos:end="59:42">(<argument pos:start="59:35" pos:end="59:35"><expr pos:start="59:35" pos:end="59:35"><name pos:start="59:35" pos:end="59:35">s</name></expr></argument>, <argument pos:start="59:38" pos:end="59:41"><expr pos:start="59:38" pos:end="59:41"><name pos:start="59:38" pos:end="59:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="60:11" pos:end="160:13">else <block pos:start="60:16" pos:end="160:13">{<block_content pos:start="61:13" pos:end="160:13">
            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:37"><name pos:start="61:13" pos:end="61:14">st</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:21">codec</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:37">extradata_size</name></name> <operator pos:start="61:39" pos:end="61:39">=</operator> <literal type="number" pos:start="61:41" pos:end="61:41">6</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="62:13" pos:end="62:85"><expr pos:start="62:13" pos:end="62:84"><name pos:start="62:13" pos:end="62:32"><name pos:start="62:13" pos:end="62:14">st</name><operator pos:start="62:15" pos:end="62:16">-&gt;</operator><name pos:start="62:17" pos:end="62:21">codec</name><operator pos:start="62:22" pos:end="62:23">-&gt;</operator><name pos:start="62:24" pos:end="62:32">extradata</name></name>      <operator pos:start="62:39" pos:end="62:39">=</operator> <call pos:start="62:41" pos:end="62:84"><name pos:start="62:41" pos:end="62:50">av_mallocz</name><argument_list pos:start="62:51" pos:end="62:84">(<argument pos:start="62:52" pos:end="62:83"><expr pos:start="62:52" pos:end="62:83"><literal type="number" pos:start="62:52" pos:end="62:54">6</literal> <operator pos:start="62:54" pos:end="62:54">+</operator> <name pos:start="62:56" pos:end="62:83">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="63:13" pos:end="64:39"><if pos:start="63:13" pos:end="64:39">if <condition pos:start="63:16" pos:end="63:38">(<expr pos:start="63:17" pos:end="63:37"><operator pos:start="63:17" pos:end="63:17">!</operator><name pos:start="63:18" pos:end="63:37"><name pos:start="63:18" pos:end="63:19">st</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:26">codec</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:37">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="64:17" pos:end="64:39"><block_content pos:start="64:17" pos:end="64:39">
                <return pos:start="64:17" pos:end="64:39">return <expr pos:start="64:24" pos:end="64:38"><call pos:start="64:24" pos:end="64:38"><name pos:start="64:24" pos:end="64:30">AVERROR</name><argument_list pos:start="64:31" pos:end="64:38">(<argument pos:start="64:32" pos:end="64:37"><expr pos:start="64:32" pos:end="64:37"><name pos:start="64:32" pos:end="64:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <comment type="block" pos:start="65:13" pos:end="65:72">/* setup extradata with our experimentally obtained value */</comment>
            <expr_stmt pos:start="66:13" pos:end="66:41"><expr pos:start="66:13" pos:end="66:40"><name pos:start="66:13" pos:end="66:35"><name pos:start="66:13" pos:end="66:14">st</name><operator pos:start="66:15" pos:end="66:16">-&gt;</operator><name pos:start="66:17" pos:end="66:21">codec</name><operator pos:start="66:22" pos:end="66:23">-&gt;</operator><name pos:start="66:24" pos:end="66:32">extradata</name><index pos:start="66:33" pos:end="66:35">[<expr pos:start="66:34" pos:end="66:34"><literal type="number" pos:start="66:34" pos:end="66:34">4</literal></expr>]</index></name> <operator pos:start="66:37" pos:end="66:37">=</operator> <literal type="number" pos:start="66:39" pos:end="66:40">31</literal></expr>;</expr_stmt>
    <if_stmt pos:start="67:5" pos:end="160:13"><if pos:start="67:5" pos:end="160:13">if <condition pos:start="67:8" pos:end="67:29">(<expr pos:start="67:9" pos:end="67:28"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:28"><name pos:start="67:10" pos:end="67:11">st</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:18">codec</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:28">channels</name></name></expr>)</condition> <block pos:start="67:31" pos:end="160:13">{<block_content pos:start="68:9" pos:end="160:13">
        <expr_stmt pos:start="68:9" pos:end="69:36"><expr pos:start="68:9" pos:end="69:35"><call pos:start="68:9" pos:end="69:35"><name pos:start="68:9" pos:end="68:14">av_log</name><argument_list pos:start="68:15" pos:end="69:35">(<argument pos:start="68:16" pos:end="68:16"><expr pos:start="68:16" pos:end="68:16"><name pos:start="68:16" pos:end="68:16">s</name></expr></argument>, <argument pos:start="68:19" pos:end="68:32"><expr pos:start="68:19" pos:end="68:32"><name pos:start="68:19" pos:end="68:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="68:35" pos:end="68:63"><expr pos:start="68:35" pos:end="68:63"><literal type="string" pos:start="68:35" pos:end="68:63">"Invalid channel count: %d\n"</literal></expr></argument>,
               <argument pos:start="69:16" pos:end="69:34"><expr pos:start="69:16" pos:end="69:34"><name pos:start="69:16" pos:end="69:34"><name pos:start="69:16" pos:end="69:17">st</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:24">codec</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:34">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="70:5" pos:end="160:13"><if pos:start="70:5" pos:end="160:13">if <condition pos:start="70:8" pos:end="70:42">(<expr pos:start="70:9" pos:end="70:41"><operator pos:start="70:9" pos:end="70:9">!</operator><name pos:start="70:10" pos:end="70:41"><name pos:start="70:10" pos:end="70:11">st</name><operator pos:start="70:12" pos:end="70:13">-&gt;</operator><name pos:start="70:14" pos:end="70:18">codec</name><operator pos:start="70:19" pos:end="70:20">-&gt;</operator><name pos:start="70:21" pos:end="70:41">bits_per_coded_sample</name></name></expr>)</condition> <block pos:start="70:44" pos:end="160:13">{<block_content pos:start="71:9" pos:end="160:13">
        <expr_stmt pos:start="71:9" pos:end="72:49"><expr pos:start="71:9" pos:end="72:48"><call pos:start="71:9" pos:end="72:48"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="72:48">(<argument pos:start="71:16" pos:end="71:16"><expr pos:start="71:16" pos:end="71:16"><name pos:start="71:16" pos:end="71:16">s</name></expr></argument>, <argument pos:start="71:19" pos:end="71:32"><expr pos:start="71:19" pos:end="71:32"><name pos:start="71:19" pos:end="71:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="71:35" pos:end="71:71"><expr pos:start="71:35" pos:end="71:71"><literal type="string" pos:start="71:35" pos:end="71:71">"Invalid bits_per_coded_sample: %d\n"</literal></expr></argument>,
               <argument pos:start="72:16" pos:end="72:47"><expr pos:start="72:16" pos:end="72:47"><name pos:start="72:16" pos:end="72:47"><name pos:start="72:16" pos:end="72:17">st</name><operator pos:start="72:18" pos:end="72:19">-&gt;</operator><name pos:start="72:20" pos:end="72:24">codec</name><operator pos:start="72:25" pos:end="72:26">-&gt;</operator><name pos:start="72:27" pos:end="72:47">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="73:5" pos:end="73:29">/* set the sample rate */</comment>
    <expr_stmt pos:start="74:5" pos:end="74:59"><expr pos:start="74:5" pos:end="74:58"><call pos:start="74:5" pos:end="74:58"><name pos:start="74:5" pos:end="74:23">avpriv_set_pts_info</name><argument_list pos:start="74:24" pos:end="74:58">(<argument pos:start="74:25" pos:end="74:26"><expr pos:start="74:25" pos:end="74:26"><name pos:start="74:25" pos:end="74:26">st</name></expr></argument>, <argument pos:start="74:29" pos:end="74:30"><expr pos:start="74:29" pos:end="74:30"><literal type="number" pos:start="74:29" pos:end="74:30">64</literal></expr></argument>, <argument pos:start="74:33" pos:end="74:33"><expr pos:start="74:33" pos:end="74:33"><literal type="number" pos:start="74:33" pos:end="74:33">1</literal></expr></argument>, <argument pos:start="74:36" pos:end="74:57"><expr pos:start="74:36" pos:end="74:57"><name pos:start="74:36" pos:end="74:57"><name pos:start="74:36" pos:end="74:37">st</name><operator pos:start="74:38" pos:end="74:39">-&gt;</operator><name pos:start="74:40" pos:end="74:44">codec</name><operator pos:start="74:45" pos:end="74:46">-&gt;</operator><name pos:start="74:47" pos:end="74:57">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="75:5" pos:end="75:41">/* parse the remaining RIFF chunks */</comment>
    <for pos:start="76:5" pos:end="160:13">for <control pos:start="76:9" pos:end="76:12">(<init pos:start="76:10" pos:end="76:10">;</init><condition pos:start="76:11" pos:end="76:11">;</condition><incr/>)</control> <block pos:start="76:14" pos:end="160:13">{<block_content pos:start="77:9" pos:end="160:13">
        <if_stmt pos:start="77:9" pos:end="78:22"><if pos:start="77:9" pos:end="78:22">if <condition pos:start="77:12" pos:end="77:28">(<expr pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:14">pb</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:27">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="78:13" pos:end="78:22"><block_content pos:start="78:13" pos:end="78:22">
            <return pos:start="78:13" pos:end="78:22">return <expr pos:start="78:20" pos:end="78:21"><operator pos:start="78:20" pos:end="78:20">-</operator><literal type="number" pos:start="78:21" pos:end="78:21">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block" pos:start="79:9" pos:end="79:33">/* read next chunk tag */</comment>
        <expr_stmt pos:start="80:9" pos:end="80:28"><expr pos:start="80:9" pos:end="80:27"><name pos:start="80:9" pos:end="80:11">tag</name> <operator pos:start="80:13" pos:end="80:13">=</operator> <call pos:start="80:15" pos:end="80:27"><name pos:start="80:15" pos:end="80:23">avio_rl32</name><argument_list pos:start="80:24" pos:end="80:27">(<argument pos:start="80:25" pos:end="80:26"><expr pos:start="80:25" pos:end="80:26"><name pos:start="80:25" pos:end="80:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="81:9" pos:end="81:29"><expr pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:12">size</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <call pos:start="81:16" pos:end="81:28"><name pos:start="81:16" pos:end="81:24">avio_rl32</name><argument_list pos:start="81:25" pos:end="81:28">(<argument pos:start="81:26" pos:end="81:27"><expr pos:start="81:26" pos:end="81:27"><name pos:start="81:26" pos:end="81:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="82:9" pos:end="160:13"><if pos:start="82:9" pos:end="85:9">if <condition pos:start="82:12" pos:end="82:45">(<expr pos:start="82:13" pos:end="82:44"><name pos:start="82:13" pos:end="82:15">tag</name> <operator pos:start="82:17" pos:end="82:18">==</operator> <call pos:start="82:20" pos:end="82:44"><name pos:start="82:20" pos:end="82:24">MKTAG</name><argument_list pos:start="82:25" pos:end="82:44">(<argument pos:start="82:26" pos:end="82:28"><expr pos:start="82:26" pos:end="82:28"><literal type="char" pos:start="82:26" pos:end="82:28">'d'</literal></expr></argument>, <argument pos:start="82:31" pos:end="82:33"><expr pos:start="82:31" pos:end="82:33"><literal type="char" pos:start="82:31" pos:end="82:33">'a'</literal></expr></argument>, <argument pos:start="82:36" pos:end="82:38"><expr pos:start="82:36" pos:end="82:38"><literal type="char" pos:start="82:36" pos:end="82:38">'t'</literal></expr></argument>, <argument pos:start="82:41" pos:end="82:43"><expr pos:start="82:41" pos:end="82:43"><literal type="char" pos:start="82:41" pos:end="82:43">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="82:47" pos:end="85:9">{<block_content pos:start="84:13" pos:end="84:18">
            <comment type="block" pos:start="83:13" pos:end="83:59">/* We assume that the data chunk comes last. */</comment>
            <break pos:start="84:13" pos:end="84:18">break;</break>
        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="160:13">else if <condition pos:start="85:19" pos:end="85:49">(<expr pos:start="85:20" pos:end="85:48"><name pos:start="85:20" pos:end="85:22">tag</name> <operator pos:start="85:24" pos:end="85:25">==</operator> <call pos:start="85:27" pos:end="85:48"><name pos:start="85:27" pos:end="85:31">MKTAG</name><argument_list pos:start="85:32" pos:end="85:48">(<argument pos:start="85:33" pos:end="85:35"><expr pos:start="85:33" pos:end="85:35"><literal type="char" pos:start="85:33" pos:end="85:35">'d'</literal></expr></argument>,<argument pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><literal type="char" pos:start="85:37" pos:end="85:39">'p'</literal></expr></argument>,<argument pos:start="85:41" pos:end="85:43"><expr pos:start="85:41" pos:end="85:43"><literal type="char" pos:start="85:41" pos:end="85:43">'d'</literal></expr></argument>,<argument pos:start="85:45" pos:end="85:47"><expr pos:start="85:45" pos:end="85:47"><literal type="char" pos:start="85:45" pos:end="85:47">'s'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:51" pos:end="160:13">{<block_content pos:start="96:13" pos:end="160:13">
            <comment type="block" pos:start="86:13" pos:end="94:15">/* Quoting the MSDN xWMA docs on the dpds chunk: "Contains the
             * decoded packet cumulative data size array, each element is the
             * number of bytes accumulated after the corresponding xWMA packet
             * is decoded in order."
             *
             * Each packet has size equal to st-&gt;codec-&gt;block_align, which in
             * all cases I saw so far was always 2230. Thus, we can use the
             * dpds data to compute a seeking index.
             */</comment>
            <comment type="block" pos:start="95:13" pos:end="95:65">/* Error out if there is more than one dpds chunk. */</comment>
            <if_stmt pos:start="96:13" pos:end="160:13"><if pos:start="96:13" pos:end="160:13">if <condition pos:start="96:16" pos:end="96:27">(<expr pos:start="96:17" pos:end="96:26"><name pos:start="96:17" pos:end="96:26">dpds_table</name></expr>)</condition> <block pos:start="96:29" pos:end="160:13">{<block_content pos:start="97:17" pos:end="160:13">
                <expr_stmt pos:start="97:17" pos:end="97:69"><expr pos:start="97:17" pos:end="97:68"><call pos:start="97:17" pos:end="97:68"><name pos:start="97:17" pos:end="97:22">av_log</name><argument_list pos:start="97:23" pos:end="97:68">(<argument pos:start="97:24" pos:end="97:24"><expr pos:start="97:24" pos:end="97:24"><name pos:start="97:24" pos:end="97:24">s</name></expr></argument>, <argument pos:start="97:27" pos:end="97:38"><expr pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:41" pos:end="97:67"><expr pos:start="97:41" pos:end="97:67"><literal type="string" pos:start="97:41" pos:end="97:67">"two dpds chunks present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="98:17" pos:end="98:26">return <expr pos:start="98:24" pos:end="98:25"><operator pos:start="98:24" pos:end="98:24">-</operator><literal type="number" pos:start="98:25" pos:end="98:25">1</literal></expr>;</return>
            <comment type="block" pos:start="99:13" pos:end="99:66">/* Compute the number of entries in the dpds chunk. */</comment>
            <if_stmt pos:start="100:13" pos:end="160:13"><if pos:start="100:13" pos:end="160:13">if <condition pos:start="100:16" pos:end="100:25">(<expr pos:start="100:17" pos:end="100:24"><name pos:start="100:17" pos:end="100:20">size</name> <operator pos:start="100:22" pos:end="100:22">&amp;</operator> <literal type="number" pos:start="100:24" pos:end="100:24">3</literal></expr>)</condition> <block pos:start="100:27" pos:end="160:13">{<block_content pos:start="101:17" pos:end="160:13">  <comment type="block" pos:start="100:30" pos:end="100:67">/* Size should be divisible by four */</comment>
                <expr_stmt pos:start="101:17" pos:end="102:79"><expr pos:start="101:17" pos:end="102:78"><call pos:start="101:17" pos:end="102:78"><name pos:start="101:17" pos:end="101:22">av_log</name><argument_list pos:start="101:23" pos:end="102:78">(<argument pos:start="101:24" pos:end="101:24"><expr pos:start="101:24" pos:end="101:24"><name pos:start="101:24" pos:end="101:24">s</name></expr></argument>, <argument pos:start="101:27" pos:end="101:40"><expr pos:start="101:27" pos:end="101:40"><name pos:start="101:27" pos:end="101:40">AV_LOG_WARNING</name></expr></argument>,
                       <argument pos:start="102:24" pos:end="102:71"><expr pos:start="102:24" pos:end="102:71"><literal type="string" pos:start="102:24" pos:end="102:42">"dpds chunk size %"</literal><name pos:start="102:43" pos:end="102:48">PRId64</name><literal type="string" pos:start="102:49" pos:end="102:71">" not divisible by 4\n"</literal></expr></argument>, <argument pos:start="102:74" pos:end="102:77"><expr pos:start="102:74" pos:end="102:77"><name pos:start="102:74" pos:end="102:77">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="103:13" pos:end="103:39"><expr pos:start="103:13" pos:end="103:38"><name pos:start="103:13" pos:end="103:27">dpds_table_size</name> <operator pos:start="103:29" pos:end="103:29">=</operator> <name pos:start="103:31" pos:end="103:34">size</name> <operator pos:start="103:36" pos:end="103:36">/</operator> <literal type="number" pos:start="103:38" pos:end="103:38">4</literal></expr>;</expr_stmt>
            <if_stmt pos:start="104:13" pos:end="160:13"><if pos:start="104:13" pos:end="160:13">if <condition pos:start="104:16" pos:end="104:71">(<expr pos:start="104:17" pos:end="104:70"><name pos:start="104:17" pos:end="104:31">dpds_table_size</name> <operator pos:start="104:33" pos:end="104:34">==</operator> <literal type="number" pos:start="104:36" pos:end="104:36">0</literal> <operator pos:start="104:38" pos:end="104:39">||</operator> <name pos:start="104:41" pos:end="104:55">dpds_table_size</name> <operator pos:start="104:57" pos:end="104:58">&gt;=</operator> <name pos:start="104:60" pos:end="104:66">INT_MAX</name> <operator pos:start="104:68" pos:end="104:68">/</operator> <literal type="number" pos:start="104:70" pos:end="104:70">4</literal></expr>)</condition> <block pos:start="104:73" pos:end="160:13">{<block_content pos:start="105:17" pos:end="160:13">
                <expr_stmt pos:start="105:17" pos:end="106:68"><expr pos:start="105:17" pos:end="106:67"><call pos:start="105:17" pos:end="106:67"><name pos:start="105:17" pos:end="105:22">av_log</name><argument_list pos:start="105:23" pos:end="106:67">(<argument pos:start="105:24" pos:end="105:24"><expr pos:start="105:24" pos:end="105:24"><name pos:start="105:24" pos:end="105:24">s</name></expr></argument>, <argument pos:start="105:27" pos:end="105:38"><expr pos:start="105:27" pos:end="105:38"><name pos:start="105:27" pos:end="105:38">AV_LOG_ERROR</name></expr></argument>,
                       <argument pos:start="106:24" pos:end="106:60"><expr pos:start="106:24" pos:end="106:60"><literal type="string" pos:start="106:24" pos:end="106:42">"dpds chunk size %"</literal><name pos:start="106:43" pos:end="106:48">PRId64</name><literal type="string" pos:start="106:49" pos:end="106:60">" invalid\n"</literal></expr></argument>, <argument pos:start="106:63" pos:end="106:66"><expr pos:start="106:63" pos:end="106:66"><name pos:start="106:63" pos:end="106:66">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="107:17" pos:end="107:26">return <expr pos:start="107:24" pos:end="107:25"><operator pos:start="107:24" pos:end="107:24">-</operator><literal type="number" pos:start="107:25" pos:end="107:25">1</literal></expr>;</return>
            <comment type="block" pos:start="108:13" pos:end="110:15">/* Allocate some temporary storage to keep the dpds data around.
             * for processing later on.
             */</comment>
            <expr_stmt pos:start="111:13" pos:end="111:71"><expr pos:start="111:13" pos:end="111:70"><name pos:start="111:13" pos:end="111:22">dpds_table</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <call pos:start="111:26" pos:end="111:70"><name pos:start="111:26" pos:end="111:34">av_malloc</name><argument_list pos:start="111:35" pos:end="111:70">(<argument pos:start="111:36" pos:end="111:69"><expr pos:start="111:36" pos:end="111:69"><name pos:start="111:36" pos:end="111:50">dpds_table_size</name> <operator pos:start="111:52" pos:end="111:52">*</operator> <sizeof pos:start="111:54" pos:end="111:69">sizeof<argument_list pos:start="111:60" pos:end="111:69">(<argument pos:start="111:61" pos:end="111:68"><expr pos:start="111:61" pos:end="111:68"><name pos:start="111:61" pos:end="111:68">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="112:13" pos:end="160:13"><if pos:start="112:13" pos:end="160:13">if <condition pos:start="112:16" pos:end="112:28">(<expr pos:start="112:17" pos:end="112:27"><operator pos:start="112:17" pos:end="112:17">!</operator><name pos:start="112:18" pos:end="112:27">dpds_table</name></expr>)</condition> <block pos:start="112:30" pos:end="160:13">{<block_content pos:start="113:17" pos:end="160:13">
                <return pos:start="113:17" pos:end="113:39">return <expr pos:start="113:24" pos:end="113:38"><call pos:start="113:24" pos:end="113:38"><name pos:start="113:24" pos:end="113:30">AVERROR</name><argument_list pos:start="113:31" pos:end="113:38">(<argument pos:start="113:32" pos:end="113:37"><expr pos:start="113:32" pos:end="113:37"><name pos:start="113:32" pos:end="113:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>
            <for pos:start="114:13" pos:end="160:13">for <control pos:start="114:17" pos:end="114:49">(<init pos:start="114:18" pos:end="114:23"><expr pos:start="114:18" pos:end="114:22"><name pos:start="114:18" pos:end="114:18">i</name> <operator pos:start="114:20" pos:end="114:20">=</operator> <literal type="number" pos:start="114:22" pos:end="114:22">0</literal></expr>;</init> <condition pos:start="114:25" pos:end="114:44"><expr pos:start="114:25" pos:end="114:43"><name pos:start="114:25" pos:end="114:25">i</name> <operator pos:start="114:27" pos:end="114:27">&lt;</operator> <name pos:start="114:29" pos:end="114:43">dpds_table_size</name></expr>;</condition> <incr pos:start="114:46" pos:end="114:48"><expr pos:start="114:46" pos:end="114:48"><operator pos:start="114:46" pos:end="114:47">++</operator><name pos:start="114:48" pos:end="114:48">i</name></expr></incr>)</control> <block pos:start="114:51" pos:end="160:13">{<block_content pos:start="115:17" pos:end="160:13">
                <expr_stmt pos:start="115:17" pos:end="115:46"><expr pos:start="115:17" pos:end="115:45"><name pos:start="115:17" pos:end="115:29"><name pos:start="115:17" pos:end="115:26">dpds_table</name><index pos:start="115:27" pos:end="115:29">[<expr pos:start="115:28" pos:end="115:28"><name pos:start="115:28" pos:end="115:28">i</name></expr>]</index></name> <operator pos:start="115:31" pos:end="115:31">=</operator> <call pos:start="115:33" pos:end="115:45"><name pos:start="115:33" pos:end="115:41">avio_rl32</name><argument_list pos:start="115:42" pos:end="115:45">(<argument pos:start="115:43" pos:end="115:44"><expr pos:start="115:43" pos:end="115:44"><name pos:start="115:43" pos:end="115:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="116:17" pos:end="116:26"><expr pos:start="116:17" pos:end="116:25"><name pos:start="116:17" pos:end="116:20">size</name> <operator pos:start="116:22" pos:end="116:23">-=</operator> <literal type="number" pos:start="116:25" pos:end="116:25">4</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="117:9" pos:end="117:28"><expr pos:start="117:9" pos:end="117:27"><call pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:17">avio_skip</name><argument_list pos:start="117:18" pos:end="117:27">(<argument pos:start="117:19" pos:end="117:20"><expr pos:start="117:19" pos:end="117:20"><name pos:start="117:19" pos:end="117:20">pb</name></expr></argument>, <argument pos:start="117:23" pos:end="117:26"><expr pos:start="117:23" pos:end="117:26"><name pos:start="117:23" pos:end="117:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="118:5" pos:end="118:39">/* Determine overall data length */</comment>
    <if_stmt pos:start="119:5" pos:end="120:18"><if pos:start="119:5" pos:end="120:18">if <condition pos:start="119:8" pos:end="119:17">(<expr pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:12">size</name> <operator pos:start="119:14" pos:end="119:14">&lt;</operator> <literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>)</condition><block type="pseudo" pos:start="120:9" pos:end="120:18"><block_content pos:start="120:9" pos:end="120:18">
        <return pos:start="120:9" pos:end="120:18">return <expr pos:start="120:16" pos:end="120:17"><operator pos:start="120:16" pos:end="120:16">-</operator><literal type="number" pos:start="120:17" pos:end="120:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="121:5" pos:end="124:46"><if pos:start="121:5" pos:end="123:5">if <condition pos:start="121:8" pos:end="121:14">(<expr pos:start="121:9" pos:end="121:13"><operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:13">size</name></expr>)</condition> <block pos:start="121:16" pos:end="123:5">{<block_content pos:start="122:9" pos:end="122:35">
        <expr_stmt pos:start="122:9" pos:end="122:35"><expr pos:start="122:9" pos:end="122:34"><name pos:start="122:9" pos:end="122:22"><name pos:start="122:9" pos:end="122:12">xwma</name><operator pos:start="122:13" pos:end="122:14">-&gt;</operator><name pos:start="122:15" pos:end="122:22">data_end</name></name> <operator pos:start="122:24" pos:end="122:24">=</operator> <name pos:start="122:26" pos:end="122:34">INT64_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="123:7" pos:end="124:46">else<block type="pseudo" pos:start="124:9" pos:end="124:46"><block_content pos:start="124:9" pos:end="124:46">
        <expr_stmt pos:start="124:9" pos:end="124:46"><expr pos:start="124:9" pos:end="124:45"><name pos:start="124:9" pos:end="124:22"><name pos:start="124:9" pos:end="124:12">xwma</name><operator pos:start="124:13" pos:end="124:14">-&gt;</operator><name pos:start="124:15" pos:end="124:22">data_end</name></name> <operator pos:start="124:24" pos:end="124:24">=</operator> <call pos:start="124:26" pos:end="124:38"><name pos:start="124:26" pos:end="124:34">avio_tell</name><argument_list pos:start="124:35" pos:end="124:38">(<argument pos:start="124:36" pos:end="124:37"><expr pos:start="124:36" pos:end="124:37"><name pos:start="124:36" pos:end="124:37">pb</name></expr></argument>)</argument_list></call> <operator pos:start="124:40" pos:end="124:40">+</operator> <name pos:start="124:42" pos:end="124:45">size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt pos:start="125:5" pos:end="160:13"><if pos:start="125:5" pos:end="160:13">if <condition pos:start="125:8" pos:end="125:38">(<expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:18">dpds_table</name> <operator pos:start="125:20" pos:end="125:21">&amp;&amp;</operator> <name pos:start="125:23" pos:end="125:37">dpds_table_size</name></expr>)</condition> <block pos:start="125:40" pos:end="160:13">{<block_content pos:start="126:9" pos:end="160:13">
        <decl_stmt pos:start="126:9" pos:end="126:24"><decl pos:start="126:9" pos:end="126:23"><type pos:start="126:9" pos:end="126:15"><name pos:start="126:9" pos:end="126:15">int64_t</name></type> <name pos:start="126:17" pos:end="126:23">cur_pos</name></decl>;</decl_stmt>
        <decl_stmt pos:start="127:9" pos:end="128:80"><decl pos:start="127:9" pos:end="128:79"><type pos:start="127:9" pos:end="127:22"><specifier pos:start="127:9" pos:end="127:13">const</specifier> <name pos:start="127:15" pos:end="127:22">uint32_t</name></type> <name pos:start="127:24" pos:end="127:39">bytes_per_sample</name>
                <init pos:start="128:17" pos:end="128:79">= <expr pos:start="128:19" pos:end="128:79"><operator pos:start="128:19" pos:end="128:19">(</operator><name pos:start="128:20" pos:end="128:38"><name pos:start="128:20" pos:end="128:21">st</name><operator pos:start="128:22" pos:end="128:23">-&gt;</operator><name pos:start="128:24" pos:end="128:28">codec</name><operator pos:start="128:29" pos:end="128:30">-&gt;</operator><name pos:start="128:31" pos:end="128:38">channels</name></name> <operator pos:start="128:40" pos:end="128:40">*</operator> <name pos:start="128:42" pos:end="128:73"><name pos:start="128:42" pos:end="128:43">st</name><operator pos:start="128:44" pos:end="128:45">-&gt;</operator><name pos:start="128:46" pos:end="128:50">codec</name><operator pos:start="128:51" pos:end="128:52">-&gt;</operator><name pos:start="128:53" pos:end="128:73">bits_per_coded_sample</name></name><operator pos:start="128:74" pos:end="128:74">)</operator> <operator pos:start="128:76" pos:end="128:77">&gt;&gt;</operator> <literal type="number" pos:start="128:79" pos:end="128:79">3</literal></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="129:9" pos:end="129:74">/* Estimate the duration from the total number of output bytes. */</comment>
        <decl_stmt pos:start="130:9" pos:end="130:77"><decl pos:start="130:9" pos:end="130:76"><type pos:start="130:9" pos:end="130:22"><specifier pos:start="130:9" pos:end="130:13">const</specifier> <name pos:start="130:15" pos:end="130:22">uint64_t</name></type> <name pos:start="130:24" pos:end="130:42">total_decoded_bytes</name> <init pos:start="130:44" pos:end="130:76">= <expr pos:start="130:46" pos:end="130:76"><name pos:start="130:46" pos:end="130:76"><name pos:start="130:46" pos:end="130:55">dpds_table</name><index pos:start="130:56" pos:end="130:76">[<expr pos:start="130:57" pos:end="130:75"><name pos:start="130:57" pos:end="130:71">dpds_table_size</name> <operator pos:start="130:73" pos:end="130:73">-</operator> <literal type="number" pos:start="130:75" pos:end="130:75">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="131:9" pos:end="131:62"><expr pos:start="131:9" pos:end="131:61"><name pos:start="131:9" pos:end="131:20"><name pos:start="131:9" pos:end="131:10">st</name><operator pos:start="131:11" pos:end="131:12">-&gt;</operator><name pos:start="131:13" pos:end="131:20">duration</name></name> <operator pos:start="131:22" pos:end="131:22">=</operator> <name pos:start="131:24" pos:end="131:42">total_decoded_bytes</name> <operator pos:start="131:44" pos:end="131:44">/</operator> <name pos:start="131:46" pos:end="131:61">bytes_per_sample</name></expr>;</expr_stmt>
        <comment type="block" pos:start="132:9" pos:end="140:11">/* Use the dpds data to build a seek table.  We can only do this after
         * we know the offset to the data chunk, as we need that to determine
         * the actual offset to each input block.
         * Note: If we allowed ourselves to assume that the data chunk always
         * follows immediately after the dpds block, we could of course guess
         * the data block's start offset already while reading the dpds chunk.
         * I decided against that, just in case other chunks ever are
         * discovered.
         */</comment>
        <expr_stmt pos:start="141:9" pos:end="141:32"><expr pos:start="141:9" pos:end="141:31"><name pos:start="141:9" pos:end="141:15">cur_pos</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="141:31"><name pos:start="141:19" pos:end="141:27">avio_tell</name><argument_list pos:start="141:28" pos:end="141:31">(<argument pos:start="141:29" pos:end="141:30"><expr pos:start="141:29" pos:end="141:30"><name pos:start="141:29" pos:end="141:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="142:9" pos:end="153:5">for <control pos:start="142:13" pos:end="142:45">(<init pos:start="142:14" pos:end="142:19"><expr pos:start="142:14" pos:end="142:18"><name pos:start="142:14" pos:end="142:14">i</name> <operator pos:start="142:16" pos:end="142:16">=</operator> <literal type="number" pos:start="142:18" pos:end="142:18">0</literal></expr>;</init> <condition pos:start="142:21" pos:end="142:40"><expr pos:start="142:21" pos:end="142:39"><name pos:start="142:21" pos:end="142:21">i</name> <operator pos:start="142:23" pos:end="142:23">&lt;</operator> <name pos:start="142:25" pos:end="142:39">dpds_table_size</name></expr>;</condition> <incr pos:start="142:42" pos:end="142:44"><expr pos:start="142:42" pos:end="142:44"><operator pos:start="142:42" pos:end="142:43">++</operator><name pos:start="142:44" pos:end="142:44">i</name></expr></incr>)</control> <block pos:start="142:47" pos:end="153:5">{<block_content pos:start="147:13" pos:end="152:49">
            <comment type="block" pos:start="143:13" pos:end="146:15">/* From the number of output bytes that would accumulate in the
             * output buffer after decoding the first (i+1) packets, we compute
             * an offset / timestamp pair.
             */</comment>
            <expr_stmt pos:start="147:13" pos:end="152:49"><expr pos:start="147:13" pos:end="152:48"><call pos:start="147:13" pos:end="152:48"><name pos:start="147:13" pos:end="147:30">av_add_index_entry</name><argument_list pos:start="147:31" pos:end="152:48">(<argument pos:start="147:32" pos:end="147:33"><expr pos:start="147:32" pos:end="147:33"><name pos:start="147:32" pos:end="147:33">st</name></expr></argument>,
                               <argument pos:start="148:32" pos:end="148:71"><expr pos:start="148:32" pos:end="148:71"><name pos:start="148:32" pos:end="148:38">cur_pos</name> <operator pos:start="148:40" pos:end="148:40">+</operator> <operator pos:start="148:42" pos:end="148:42">(</operator><name pos:start="148:43" pos:end="148:43">i</name><operator pos:start="148:44" pos:end="148:44">+</operator><literal type="number" pos:start="148:45" pos:end="148:45">1</literal><operator pos:start="148:46" pos:end="148:46">)</operator> <operator pos:start="148:48" pos:end="148:48">*</operator> <name pos:start="148:50" pos:end="148:71"><name pos:start="148:50" pos:end="148:51">st</name><operator pos:start="148:52" pos:end="148:53">-&gt;</operator><name pos:start="148:54" pos:end="148:58">codec</name><operator pos:start="148:59" pos:end="148:60">-&gt;</operator><name pos:start="148:61" pos:end="148:71">block_align</name></name></expr></argument>, <comment type="block" pos:start="148:74" pos:end="148:82">/* pos */</comment>
                               <argument pos:start="149:32" pos:end="149:63"><expr pos:start="149:32" pos:end="149:63"><name pos:start="149:32" pos:end="149:44"><name pos:start="149:32" pos:end="149:41">dpds_table</name><index pos:start="149:42" pos:end="149:44">[<expr pos:start="149:43" pos:end="149:43"><name pos:start="149:43" pos:end="149:43">i</name></expr>]</index></name> <operator pos:start="149:46" pos:end="149:46">/</operator> <name pos:start="149:48" pos:end="149:63">bytes_per_sample</name></expr></argument>,         <comment type="block" pos:start="149:74" pos:end="149:88">/* timestamp */</comment>
                               <argument pos:start="150:32" pos:end="150:53"><expr pos:start="150:32" pos:end="150:53"><name pos:start="150:32" pos:end="150:53"><name pos:start="150:32" pos:end="150:33">st</name><operator pos:start="150:34" pos:end="150:35">-&gt;</operator><name pos:start="150:36" pos:end="150:40">codec</name><operator pos:start="150:41" pos:end="150:42">-&gt;</operator><name pos:start="150:43" pos:end="150:53">block_align</name></name></expr></argument>,                   <comment type="block" pos:start="150:74" pos:end="150:83">/* size */</comment>
                               <argument pos:start="151:32" pos:end="151:32"><expr pos:start="151:32" pos:end="151:32"><literal type="number" pos:start="151:32" pos:end="151:32">0</literal></expr></argument>,                                        <comment type="block" pos:start="151:74" pos:end="151:87">/* duration */</comment>
                               <argument pos:start="152:32" pos:end="152:47"><expr pos:start="152:32" pos:end="152:47"><name pos:start="152:32" pos:end="152:47">AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for> <if_stmt pos:start="153:7" pos:end="160:13"><if type="elseif" pos:start="153:7" pos:end="160:13">else if <condition pos:start="153:15" pos:end="153:35">(<expr pos:start="153:16" pos:end="153:34"><name pos:start="153:16" pos:end="153:34"><name pos:start="153:16" pos:end="153:17">st</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:24">codec</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:34">bit_rate</name></name></expr>)</condition> <block pos:start="153:37" pos:end="160:13">{<block_content pos:start="158:9" pos:end="160:13">
        <comment type="block" pos:start="154:9" pos:end="157:11">/* No dpds chunk was present (or only an empty one), so estimate
         * the total duration using the average bits per sample and the
         * total data length.
         */</comment>
        <expr_stmt pos:start="158:9" pos:end="158:80"><expr pos:start="158:9" pos:end="158:79"><name pos:start="158:9" pos:end="158:20"><name pos:start="158:9" pos:end="158:10">st</name><operator pos:start="158:11" pos:end="158:12">-&gt;</operator><name pos:start="158:13" pos:end="158:20">duration</name></name> <operator pos:start="158:22" pos:end="158:22">=</operator> <operator pos:start="158:24" pos:end="158:24">(</operator><name pos:start="158:25" pos:end="158:28">size</name><operator pos:start="158:29" pos:end="158:30">&lt;&lt;</operator><literal type="number" pos:start="158:31" pos:end="158:31">3</literal><operator pos:start="158:32" pos:end="158:32">)</operator> <operator pos:start="158:34" pos:end="158:34">*</operator> <name pos:start="158:36" pos:end="158:57"><name pos:start="158:36" pos:end="158:37">st</name><operator pos:start="158:38" pos:end="158:39">-&gt;</operator><name pos:start="158:40" pos:end="158:44">codec</name><operator pos:start="158:45" pos:end="158:46">-&gt;</operator><name pos:start="158:47" pos:end="158:57">sample_rate</name></name> <operator pos:start="158:59" pos:end="158:59">/</operator> <name pos:start="158:61" pos:end="158:79"><name pos:start="158:61" pos:end="158:62">st</name><operator pos:start="158:63" pos:end="158:64">-&gt;</operator><name pos:start="158:65" pos:end="158:69">codec</name><operator pos:start="158:70" pos:end="158:71">-&gt;</operator><name pos:start="158:72" pos:end="158:79">bit_rate</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="159:5" pos:end="159:24"><expr pos:start="159:5" pos:end="159:23"><call pos:start="159:5" pos:end="159:23"><name pos:start="159:5" pos:end="159:11">av_free</name><argument_list pos:start="159:12" pos:end="159:23">(<argument pos:start="159:13" pos:end="159:22"><expr pos:start="159:13" pos:end="159:22"><name pos:start="159:13" pos:end="159:22">dpds_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="160:5" pos:end="160:13">return <expr pos:start="160:12" pos:end="160:12"><literal type="number" pos:start="160:12" pos:end="160:12">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></function></unit>
