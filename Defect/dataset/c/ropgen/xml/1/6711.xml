<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6711.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">net_init_nic</name><parameter_list pos:start="1:24" pos:end="1:74">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:32">QemuOpts</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">opts</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">name</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:73"><decl pos:start="1:59" pos:end="1:73"><type pos:start="1:59" pos:end="1:73"><name pos:start="1:59" pos:end="1:67">VLANState</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">vlan</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:15">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">NICInfo</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">netdev</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:7">idx</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:28"><name pos:start="13:11" pos:end="13:26">nic_get_free_idx</name><argument_list pos:start="13:27" pos:end="13:28">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:11">idx</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal> <operator pos:start="15:19" pos:end="15:20">||</operator> <name pos:start="15:22" pos:end="15:28">nb_nics</name> <operator pos:start="15:30" pos:end="15:31">&gt;=</operator> <name pos:start="15:33" pos:end="15:40">MAX_NICS</name></expr>)</condition> <block pos:start="15:43" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:38"><expr pos:start="17:9" pos:end="17:37"><call pos:start="17:9" pos:end="17:37"><name pos:start="17:9" pos:end="17:20">error_report</name><argument_list pos:start="17:21" pos:end="17:37">(<argument pos:start="17:22" pos:end="17:36"><expr pos:start="17:22" pos:end="17:36"><literal type="string" pos:start="17:22" pos:end="17:36">"Too Many NICs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:24"><expr pos:start="25:5" pos:end="25:23"><name pos:start="25:5" pos:end="25:6">nd</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <operator pos:start="25:10" pos:end="25:10">&amp;</operator><name pos:start="25:11" pos:end="25:23"><name pos:start="25:11" pos:end="25:18">nd_table</name><index pos:start="25:19" pos:end="25:23">[<expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">idx</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><call pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:10">memset</name><argument_list pos:start="29:11" pos:end="29:30">(<argument pos:start="29:12" pos:end="29:13"><expr pos:start="29:12" pos:end="29:13"><name pos:start="29:12" pos:end="29:13">nd</name></expr></argument>, <argument pos:start="29:16" pos:end="29:16"><expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr></argument>, <argument pos:start="29:19" pos:end="29:29"><expr pos:start="29:19" pos:end="29:29"><sizeof pos:start="29:19" pos:end="29:29">sizeof<argument_list pos:start="29:25" pos:end="29:29">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><operator pos:start="29:26" pos:end="29:26">*</operator><name pos:start="29:27" pos:end="29:28">nd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:48">(<expr pos:start="33:9" pos:end="33:47"><operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:15">netdev</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:46"><name pos:start="33:19" pos:end="33:30">qemu_opt_get</name><argument_list pos:start="33:31" pos:end="33:46">(<argument pos:start="33:32" pos:end="33:35"><expr pos:start="33:32" pos:end="33:35"><name pos:start="33:32" pos:end="33:35">opts</name></expr></argument>, <argument pos:start="33:38" pos:end="33:45"><expr pos:start="33:38" pos:end="33:45"><literal type="string" pos:start="33:38" pos:end="33:45">"netdev"</literal></expr></argument>)</argument_list></call><operator pos:start="33:47" pos:end="33:47">)</operator></expr>)</condition> <block pos:start="33:50" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <expr_stmt pos:start="35:9" pos:end="35:46"><expr pos:start="35:9" pos:end="35:45"><name pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:10">nd</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:18">netdev</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:45"><name pos:start="35:22" pos:end="35:37">qemu_find_netdev</name><argument_list pos:start="35:38" pos:end="35:45">(<argument pos:start="35:39" pos:end="35:44"><expr pos:start="35:39" pos:end="35:44"><name pos:start="35:39" pos:end="35:44">netdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:24">(<expr pos:start="37:13" pos:end="37:23"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:23"><name pos:start="37:14" pos:end="37:15">nd</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:23">netdev</name></name></expr>)</condition> <block pos:start="37:26" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:22">

            <expr_stmt pos:start="39:13" pos:end="39:58"><expr pos:start="39:13" pos:end="39:57"><call pos:start="39:13" pos:end="39:57"><name pos:start="39:13" pos:end="39:24">error_report</name><argument_list pos:start="39:25" pos:end="39:57">(<argument pos:start="39:26" pos:end="39:48"><expr pos:start="39:26" pos:end="39:48"><literal type="string" pos:start="39:26" pos:end="39:48">"netdev '%s' not found"</literal></expr></argument>, <argument pos:start="39:51" pos:end="39:56"><expr pos:start="39:51" pos:end="39:56"><name pos:start="39:51" pos:end="39:56">netdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:22">return <expr pos:start="41:20" pos:end="41:21"><operator pos:start="41:20" pos:end="41:20">-</operator><literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="51:5">else <block pos:start="45:12" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:24">

        <expr_stmt pos:start="47:9" pos:end="47:21"><expr pos:start="47:9" pos:end="47:20"><call pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:14">assert</name><argument_list pos:start="47:15" pos:end="47:20">(<argument pos:start="47:16" pos:end="47:19"><expr pos:start="47:16" pos:end="47:19"><name pos:start="47:16" pos:end="47:19">vlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:24"><expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:10">nd</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:16">vlan</name></name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:23">vlan</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><name pos:start="53:9" pos:end="53:12">name</name></expr>)</condition> <block pos:start="53:15" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:34">

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:10">nd</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:16">name</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:33"><name pos:start="55:20" pos:end="55:27">g_strdup</name><argument_list pos:start="55:28" pos:end="55:33">(<argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><name pos:start="55:29" pos:end="55:32">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:36">(<expr pos:start="59:9" pos:end="59:35"><call pos:start="59:9" pos:end="59:35"><name pos:start="59:9" pos:end="59:20">qemu_opt_get</name><argument_list pos:start="59:21" pos:end="59:35">(<argument pos:start="59:22" pos:end="59:25"><expr pos:start="59:22" pos:end="59:25"><name pos:start="59:22" pos:end="59:25">opts</name></expr></argument>, <argument pos:start="59:28" pos:end="59:34"><expr pos:start="59:28" pos:end="59:34"><literal type="string" pos:start="59:28" pos:end="59:34">"model"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:38" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:58">

        <expr_stmt pos:start="61:9" pos:end="61:58"><expr pos:start="61:9" pos:end="61:57"><name pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:10">nd</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:17">model</name></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <call pos:start="61:21" pos:end="61:57"><name pos:start="61:21" pos:end="61:28">g_strdup</name><argument_list pos:start="61:29" pos:end="61:57">(<argument pos:start="61:30" pos:end="61:56"><expr pos:start="61:30" pos:end="61:56"><call pos:start="61:30" pos:end="61:56"><name pos:start="61:30" pos:end="61:41">qemu_opt_get</name><argument_list pos:start="61:42" pos:end="61:56">(<argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><name pos:start="61:43" pos:end="61:46">opts</name></expr></argument>, <argument pos:start="61:49" pos:end="61:55"><expr pos:start="61:49" pos:end="61:55"><literal type="string" pos:start="61:49" pos:end="61:55">"model"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:35">(<expr pos:start="65:9" pos:end="65:34"><call pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:20">qemu_opt_get</name><argument_list pos:start="65:21" pos:end="65:34">(<argument pos:start="65:22" pos:end="65:25"><expr pos:start="65:22" pos:end="65:25"><name pos:start="65:22" pos:end="65:25">opts</name></expr></argument>, <argument pos:start="65:28" pos:end="65:33"><expr pos:start="65:28" pos:end="65:33"><literal type="string" pos:start="65:28" pos:end="65:33">"addr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:37" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:59">

        <expr_stmt pos:start="67:9" pos:end="67:59"><expr pos:start="67:9" pos:end="67:58"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:10">nd</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:19">devaddr</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:58"><name pos:start="67:23" pos:end="67:30">g_strdup</name><argument_list pos:start="67:31" pos:end="67:58">(<argument pos:start="67:32" pos:end="67:57"><expr pos:start="67:32" pos:end="67:57"><call pos:start="67:32" pos:end="67:57"><name pos:start="67:32" pos:end="67:43">qemu_opt_get</name><argument_list pos:start="67:44" pos:end="67:57">(<argument pos:start="67:45" pos:end="67:48"><expr pos:start="67:45" pos:end="67:48"><name pos:start="67:45" pos:end="67:48">opts</name></expr></argument>, <argument pos:start="67:51" pos:end="67:56"><expr pos:start="67:51" pos:end="67:56"><literal type="string" pos:start="67:51" pos:end="67:56">"addr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="75:76">(<expr pos:start="73:9" pos:end="75:75"><call pos:start="73:9" pos:end="73:37"><name pos:start="73:9" pos:end="73:20">qemu_opt_get</name><argument_list pos:start="73:21" pos:end="73:37">(<argument pos:start="73:22" pos:end="73:25"><expr pos:start="73:22" pos:end="73:25"><name pos:start="73:22" pos:end="73:25">opts</name></expr></argument>, <argument pos:start="73:28" pos:end="73:36"><expr pos:start="73:28" pos:end="73:36"><literal type="string" pos:start="73:28" pos:end="73:36">"macaddr"</literal></expr></argument>)</argument_list></call> <operator pos:start="73:39" pos:end="73:40">&amp;&amp;</operator>

        <call pos:start="75:9" pos:end="75:71"><name pos:start="75:9" pos:end="75:25">net_parse_macaddr</name><argument_list pos:start="75:26" pos:end="75:71">(<argument pos:start="75:27" pos:end="75:39"><expr pos:start="75:27" pos:end="75:39"><name pos:start="75:27" pos:end="75:39"><name pos:start="75:27" pos:end="75:28">nd</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:37">macaddr</name><operator pos:start="75:38" pos:end="75:38">.</operator><name pos:start="75:39" pos:end="75:39">a</name></name></expr></argument>, <argument pos:start="75:42" pos:end="75:70"><expr pos:start="75:42" pos:end="75:70"><call pos:start="75:42" pos:end="75:70"><name pos:start="75:42" pos:end="75:53">qemu_opt_get</name><argument_list pos:start="75:54" pos:end="75:70">(<argument pos:start="75:55" pos:end="75:58"><expr pos:start="75:55" pos:end="75:58"><name pos:start="75:55" pos:end="75:58">opts</name></expr></argument>, <argument pos:start="75:61" pos:end="75:69"><expr pos:start="75:61" pos:end="75:69"><literal type="string" pos:start="75:61" pos:end="75:69">"macaddr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="75:73" pos:end="75:73">&lt;</operator> <literal type="number" pos:start="75:75" pos:end="75:75">0</literal></expr>)</condition> <block pos:start="75:78" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:60"><expr pos:start="77:9" pos:end="77:59"><call pos:start="77:9" pos:end="77:59"><name pos:start="77:9" pos:end="77:20">error_report</name><argument_list pos:start="77:21" pos:end="77:59">(<argument pos:start="77:22" pos:end="77:58"><expr pos:start="77:22" pos:end="77:58"><literal type="string" pos:start="77:22" pos:end="77:58">"invalid syntax for ethernet address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:18">return <expr pos:start="79:16" pos:end="79:17"><operator pos:start="79:16" pos:end="79:16">-</operator><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:48"><expr pos:start="83:5" pos:end="83:47"><call pos:start="83:5" pos:end="83:47"><name pos:start="83:5" pos:end="83:33">qemu_macaddr_default_if_unset</name><argument_list pos:start="83:34" pos:end="83:47">(<argument pos:start="83:35" pos:end="83:46"><expr pos:start="83:35" pos:end="83:46"><operator pos:start="83:35" pos:end="83:35">&amp;</operator><name pos:start="83:36" pos:end="83:46"><name pos:start="83:36" pos:end="83:37">nd</name><operator pos:start="83:38" pos:end="83:39">-&gt;</operator><name pos:start="83:40" pos:end="83:46">macaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="89:65"><expr pos:start="87:5" pos:end="89:64"><name pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:6">nd</name><operator pos:start="87:7" pos:end="87:8">-&gt;</operator><name pos:start="87:9" pos:end="87:16">nvectors</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="89:64"><name pos:start="87:20" pos:end="87:38">qemu_opt_get_number</name><argument_list pos:start="87:39" pos:end="89:64">(<argument pos:start="87:40" pos:end="87:43"><expr pos:start="87:40" pos:end="87:43"><name pos:start="87:40" pos:end="87:43">opts</name></expr></argument>, <argument pos:start="87:46" pos:end="87:54"><expr pos:start="87:46" pos:end="87:54"><literal type="string" pos:start="87:46" pos:end="87:54">"vectors"</literal></expr></argument>,

                                       <argument pos:start="89:40" pos:end="89:63"><expr pos:start="89:40" pos:end="89:63"><name pos:start="89:40" pos:end="89:63">DEV_NVECTORS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="99:5"><if pos:start="91:5" pos:end="99:5">if <condition pos:start="91:8" pos:end="93:55">(<expr pos:start="91:9" pos:end="93:54"><name pos:start="91:9" pos:end="91:20"><name pos:start="91:9" pos:end="91:10">nd</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:20">nvectors</name></name> <operator pos:start="91:22" pos:end="91:23">!=</operator> <name pos:start="91:25" pos:end="91:48">DEV_NVECTORS_UNSPECIFIED</name> <operator pos:start="91:50" pos:end="91:51">&amp;&amp;</operator>

        <operator pos:start="93:9" pos:end="93:9">(</operator><name pos:start="93:10" pos:end="93:21"><name pos:start="93:10" pos:end="93:11">nd</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:21">nvectors</name></name> <operator pos:start="93:23" pos:end="93:23">&lt;</operator> <literal type="number" pos:start="93:25" pos:end="93:25">0</literal> <operator pos:start="93:27" pos:end="93:28">||</operator> <name pos:start="93:30" pos:end="93:41"><name pos:start="93:30" pos:end="93:31">nd</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:41">nvectors</name></name> <operator pos:start="93:43" pos:end="93:43">&gt;</operator> <literal type="number" pos:start="93:45" pos:end="93:53">0x7ffffff</literal><operator pos:start="93:54" pos:end="93:54">)</operator></expr>)</condition> <block pos:start="93:57" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:18">

        <expr_stmt pos:start="95:9" pos:end="95:63"><expr pos:start="95:9" pos:end="95:62"><call pos:start="95:9" pos:end="95:62"><name pos:start="95:9" pos:end="95:20">error_report</name><argument_list pos:start="95:21" pos:end="95:62">(<argument pos:start="95:22" pos:end="95:47"><expr pos:start="95:22" pos:end="95:47"><literal type="string" pos:start="95:22" pos:end="95:47">"invalid # of vectors: %d"</literal></expr></argument>, <argument pos:start="95:50" pos:end="95:61"><expr pos:start="95:50" pos:end="95:61"><name pos:start="95:50" pos:end="95:61"><name pos:start="95:50" pos:end="95:51">nd</name><operator pos:start="95:52" pos:end="95:53">-&gt;</operator><name pos:start="95:54" pos:end="95:61">nvectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:18">return <expr pos:start="97:16" pos:end="97:17"><operator pos:start="97:16" pos:end="97:16">-</operator><literal type="number" pos:start="97:17" pos:end="97:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:17"><expr pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:12"><name pos:start="103:5" pos:end="103:6">nd</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:12">used</name></name> <operator pos:start="103:14" pos:end="103:14">=</operator> <literal type="number" pos:start="103:16" pos:end="103:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:14"><expr pos:start="105:5" pos:end="105:13"><name pos:start="105:5" pos:end="105:11">nb_nics</name><operator pos:start="105:12" pos:end="105:13">++</operator></expr>;</expr_stmt>



    <return pos:start="109:5" pos:end="109:15">return <expr pos:start="109:12" pos:end="109:14"><name pos:start="109:12" pos:end="109:14">idx</name></expr>;</return>

</block_content>}</block></function>
</unit>
