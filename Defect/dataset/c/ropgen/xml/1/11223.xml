<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11223.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">test_hmac_speed</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:40"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:15">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:21">chunk_size</name> <init pos:start="5:23" pos:end="5:38">= <expr pos:start="5:25" pos:end="5:38"><operator pos:start="5:25" pos:end="5:25">(</operator><name pos:start="5:26" pos:end="5:31">size_t</name><operator pos:start="5:32" pos:end="5:32">)</operator><name pos:start="5:33" pos:end="5:38">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">QCryptoHmac</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:21">hmac</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:15">in</name> <init pos:start="9:17" pos:end="9:22">= <expr pos:start="9:19" pos:end="9:22"><name pos:start="9:19" pos:end="9:22">NULL</name></expr></init></decl>, <decl pos:start="9:25" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:28">out</name> <init pos:start="9:30" pos:end="9:35">= <expr pos:start="9:32" pos:end="9:35"><name pos:start="9:32" pos:end="9:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:18">out_len</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">double</name></type> <name pos:start="13:12" pos:end="13:16">total</name> <init pos:start="13:18" pos:end="13:22">= <expr pos:start="13:20" pos:end="13:22"><literal type="number" pos:start="13:20" pos:end="13:22">0.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:16">iovec</name></name></type> <name pos:start="15:18" pos:end="15:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">Error</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:14">err</name> <init pos:start="17:16" pos:end="17:21">= <expr pos:start="17:18" pos:end="17:21"><name pos:start="17:18" pos:end="17:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:56">(<expr pos:start="23:9" pos:end="23:55"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:55"><name pos:start="23:10" pos:end="23:30">qcrypto_hmac_supports</name><argument_list pos:start="23:31" pos:end="23:55">(<argument pos:start="23:32" pos:end="23:54"><expr pos:start="23:32" pos:end="23:54"><name pos:start="23:32" pos:end="23:54">QCRYPTO_HASH_ALG_SHA256</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:58" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:6">in</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:36"><name pos:start="31:10" pos:end="31:15">g_new0</name><argument_list pos:start="31:16" pos:end="31:36">(<argument pos:start="31:17" pos:end="31:23"><expr pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:23">uint8_t</name></expr></argument>, <argument pos:start="31:26" pos:end="31:35"><expr pos:start="31:26" pos:end="31:35"><name pos:start="31:26" pos:end="31:35">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><call pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:10">memset</name><argument_list pos:start="33:11" pos:end="33:45">(<argument pos:start="33:12" pos:end="33:13"><expr pos:start="33:12" pos:end="33:13"><name pos:start="33:12" pos:end="33:13">in</name></expr></argument>, <argument pos:start="33:16" pos:end="33:32"><expr pos:start="33:16" pos:end="33:32"><call pos:start="33:16" pos:end="33:32"><name pos:start="33:16" pos:end="33:30">g_test_rand_int</name><argument_list pos:start="33:31" pos:end="33:32">()</argument_list></call></expr></argument>, <argument pos:start="33:35" pos:end="33:44"><expr pos:start="33:35" pos:end="33:44"><name pos:start="33:35" pos:end="33:44">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:7">iov</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:16">iov_base</name></name> <operator pos:start="37:18" pos:end="37:18">=</operator> <operator pos:start="37:20" pos:end="37:20">(</operator><name pos:start="37:21" pos:end="37:24">char</name> <operator pos:start="37:26" pos:end="37:26">*</operator><operator pos:start="37:27" pos:end="37:27">)</operator><name pos:start="37:28" pos:end="37:29">in</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:7">iov</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:15">iov_len</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:28">chunk_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:22">g_test_timer_start</name><argument_list pos:start="43:23" pos:end="43:24">()</argument_list></call></expr>;</expr_stmt>

    <do pos:start="45:5" pos:end="71:43">do <block pos:start="45:8" pos:end="71:5">{<block_content pos:start="47:9" pos:end="69:28">

        <expr_stmt pos:start="47:9" pos:end="49:73"><expr pos:start="47:9" pos:end="49:72"><name pos:start="47:9" pos:end="47:12">hmac</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="49:72"><name pos:start="47:16" pos:end="47:31">qcrypto_hmac_new</name><argument_list pos:start="47:32" pos:end="49:72">(<argument pos:start="47:33" pos:end="47:55"><expr pos:start="47:33" pos:end="47:55"><name pos:start="47:33" pos:end="47:55">QCRYPTO_HASH_ALG_SHA256</name></expr></argument>,

                                <argument pos:start="49:33" pos:end="49:52"><expr pos:start="49:33" pos:end="49:52"><operator pos:start="49:33" pos:end="49:33">(</operator><specifier pos:start="49:34" pos:end="49:38">const</specifier> <name pos:start="49:40" pos:end="49:46">uint8_t</name> <operator pos:start="49:48" pos:end="49:48">*</operator><operator pos:start="49:49" pos:end="49:49">)</operator><name pos:start="49:50" pos:end="49:52">KEY</name></expr></argument>, <argument pos:start="49:55" pos:end="49:65"><expr pos:start="49:55" pos:end="49:65"><call pos:start="49:55" pos:end="49:65"><name pos:start="49:55" pos:end="49:60">strlen</name><argument_list pos:start="49:61" pos:end="49:65">(<argument pos:start="49:62" pos:end="49:64"><expr pos:start="49:62" pos:end="49:64"><name pos:start="49:62" pos:end="49:64">KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:68" pos:end="49:71"><expr pos:start="49:68" pos:end="49:71"><operator pos:start="49:68" pos:end="49:68">&amp;</operator><name pos:start="49:69" pos:end="49:71">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><call pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:16">g_assert</name><argument_list pos:start="51:17" pos:end="51:29">(<argument pos:start="51:18" pos:end="51:28"><expr pos:start="51:18" pos:end="51:28"><name pos:start="51:18" pos:end="51:20">err</name> <operator pos:start="51:22" pos:end="51:23">==</operator> <name pos:start="51:25" pos:end="51:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:31"><expr pos:start="53:9" pos:end="53:30"><call pos:start="53:9" pos:end="53:30"><name pos:start="53:9" pos:end="53:16">g_assert</name><argument_list pos:start="53:17" pos:end="53:30">(<argument pos:start="53:18" pos:end="53:29"><expr pos:start="53:18" pos:end="53:29"><name pos:start="53:18" pos:end="53:21">hmac</name> <operator pos:start="53:23" pos:end="53:24">!=</operator> <name pos:start="53:26" pos:end="53:29">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:71"><expr pos:start="57:9" pos:end="57:70"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:70"><name pos:start="57:15" pos:end="57:33">qcrypto_hmac_bytesv</name><argument_list pos:start="57:34" pos:end="57:70">(<argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><name pos:start="57:35" pos:end="57:38">hmac</name></expr></argument>, <argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><operator pos:start="57:41" pos:end="57:41">&amp;</operator><name pos:start="57:42" pos:end="57:44">iov</name></expr></argument>, <argument pos:start="57:47" pos:end="57:47"><expr pos:start="57:47" pos:end="57:47"><literal type="number" pos:start="57:47" pos:end="57:47">1</literal></expr></argument>, <argument pos:start="57:50" pos:end="57:53"><expr pos:start="57:50" pos:end="57:53"><operator pos:start="57:50" pos:end="57:50">&amp;</operator><name pos:start="57:51" pos:end="57:53">out</name></expr></argument>, <argument pos:start="57:56" pos:end="57:63"><expr pos:start="57:56" pos:end="57:63"><operator pos:start="57:56" pos:end="57:56">&amp;</operator><name pos:start="57:57" pos:end="57:63">out_len</name></expr></argument>, <argument pos:start="57:66" pos:end="57:69"><expr pos:start="57:66" pos:end="57:69"><operator pos:start="57:66" pos:end="57:66">&amp;</operator><name pos:start="57:67" pos:end="57:69">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><call pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:16">g_assert</name><argument_list pos:start="59:17" pos:end="59:26">(<argument pos:start="59:18" pos:end="59:25"><expr pos:start="59:18" pos:end="59:25"><name pos:start="59:18" pos:end="59:20">ret</name> <operator pos:start="59:22" pos:end="59:23">==</operator> <literal type="number" pos:start="59:25" pos:end="59:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><call pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:16">g_assert</name><argument_list pos:start="61:17" pos:end="61:29">(<argument pos:start="61:18" pos:end="61:28"><expr pos:start="61:18" pos:end="61:28"><name pos:start="61:18" pos:end="61:20">err</name> <operator pos:start="61:22" pos:end="61:23">==</operator> <name pos:start="61:25" pos:end="61:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:32"><expr pos:start="65:9" pos:end="65:31"><call pos:start="65:9" pos:end="65:31"><name pos:start="65:9" pos:end="65:25">qcrypto_hmac_free</name><argument_list pos:start="65:26" pos:end="65:31">(<argument pos:start="65:27" pos:end="65:30"><expr pos:start="65:27" pos:end="65:30"><name pos:start="65:27" pos:end="65:30">hmac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:13">total</name> <operator pos:start="69:15" pos:end="69:16">+=</operator> <name pos:start="69:18" pos:end="69:27">chunk_size</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="71:13" pos:end="71:42">(<expr pos:start="71:14" pos:end="71:41"><call pos:start="71:14" pos:end="71:35"><name pos:start="71:14" pos:end="71:33">g_test_timer_elapsed</name><argument_list pos:start="71:34" pos:end="71:35">()</argument_list></call> <operator pos:start="71:37" pos:end="71:37">&lt;</operator> <literal type="number" pos:start="71:39" pos:end="71:41">5.0</literal></expr>)</condition>;</do>



    <expr_stmt pos:start="75:5" pos:end="75:25"><expr pos:start="75:5" pos:end="75:24"><name pos:start="75:5" pos:end="75:9">total</name> <operator pos:start="75:11" pos:end="75:12">/=</operator> <literal type="number" pos:start="75:14" pos:end="75:17">1024</literal> <operator pos:start="75:19" pos:end="75:19">*</operator> <literal type="number" pos:start="75:21" pos:end="75:24">1024</literal></expr>;</expr_stmt> <comment type="block" pos:start="75:27" pos:end="75:37">/* to MB */</comment>



    <expr_stmt pos:start="79:5" pos:end="79:30"><expr pos:start="79:5" pos:end="79:29"><call pos:start="79:5" pos:end="79:29"><name pos:start="79:5" pos:end="79:11">g_print</name><argument_list pos:start="79:12" pos:end="79:29">(<argument pos:start="79:13" pos:end="79:28"><expr pos:start="79:13" pos:end="79:28"><literal type="string" pos:start="79:13" pos:end="79:28">"hmac(sha256): "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:57"><expr pos:start="81:5" pos:end="81:56"><call pos:start="81:5" pos:end="81:56"><name pos:start="81:5" pos:end="81:11">g_print</name><argument_list pos:start="81:12" pos:end="81:56">(<argument pos:start="81:13" pos:end="81:43"><expr pos:start="81:13" pos:end="81:43"><literal type="string" pos:start="81:13" pos:end="81:43">"Testing chunk_size %ld bytes "</literal></expr></argument>, <argument pos:start="81:46" pos:end="81:55"><expr pos:start="81:46" pos:end="81:55"><name pos:start="81:46" pos:end="81:55">chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:72"><expr pos:start="83:5" pos:end="83:71"><call pos:start="83:5" pos:end="83:71"><name pos:start="83:5" pos:end="83:11">g_print</name><argument_list pos:start="83:12" pos:end="83:71">(<argument pos:start="83:13" pos:end="83:42"><expr pos:start="83:13" pos:end="83:42"><literal type="string" pos:start="83:13" pos:end="83:42">"done: %.2f MB in %.2f secs: "</literal></expr></argument>, <argument pos:start="83:45" pos:end="83:49"><expr pos:start="83:45" pos:end="83:49"><name pos:start="83:45" pos:end="83:49">total</name></expr></argument>, <argument pos:start="83:52" pos:end="83:70"><expr pos:start="83:52" pos:end="83:70"><call pos:start="83:52" pos:end="83:70"><name pos:start="83:52" pos:end="83:68">g_test_timer_last</name><argument_list pos:start="83:69" pos:end="83:70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:58"><expr pos:start="85:5" pos:end="85:57"><call pos:start="85:5" pos:end="85:57"><name pos:start="85:5" pos:end="85:11">g_print</name><argument_list pos:start="85:12" pos:end="85:57">(<argument pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:27"><literal type="string" pos:start="85:13" pos:end="85:27">"%.2f MB/sec\n"</literal></expr></argument>, <argument pos:start="85:30" pos:end="85:56"><expr pos:start="85:30" pos:end="85:56"><name pos:start="85:30" pos:end="85:34">total</name> <operator pos:start="85:36" pos:end="85:36">/</operator> <call pos:start="85:38" pos:end="85:56"><name pos:start="85:38" pos:end="85:54">g_test_timer_last</name><argument_list pos:start="85:55" pos:end="85:56">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:16"><expr pos:start="89:5" pos:end="89:15"><call pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:10">g_free</name><argument_list pos:start="89:11" pos:end="89:15">(<argument pos:start="89:12" pos:end="89:14"><expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:15"><expr pos:start="91:5" pos:end="91:14"><call pos:start="91:5" pos:end="91:14"><name pos:start="91:5" pos:end="91:10">g_free</name><argument_list pos:start="91:11" pos:end="91:14">(<argument pos:start="91:12" pos:end="91:13"><expr pos:start="91:12" pos:end="91:13"><name pos:start="91:12" pos:end="91:13">in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
