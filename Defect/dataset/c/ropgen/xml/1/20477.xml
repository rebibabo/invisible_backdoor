<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20477.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">target_get_monitor_def</name><parameter_list pos:start="1:27" pos:end="1:74">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">cs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">name</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:67">uint64_t</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">pval</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:19">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:17">regnum</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PowerPCCPU</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">cpu</name> <init pos:start="7:21" pos:end="7:37">= <expr pos:start="7:23" pos:end="7:37"><call pos:start="7:23" pos:end="7:37"><name pos:start="7:23" pos:end="7:33">POWERPC_CPU</name><argument_list pos:start="7:34" pos:end="7:37">(<argument pos:start="7:35" pos:end="7:36"><expr pos:start="7:35" pos:end="7:36"><name pos:start="7:35" pos:end="7:36">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUPPCState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:32">= <expr pos:start="9:24" pos:end="9:32"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:32"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">env</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:35">/* General purpose registers */</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="17:69">(<expr pos:start="15:9" pos:end="17:68"><operator pos:start="15:9" pos:end="15:9">(</operator><call pos:start="15:10" pos:end="15:25"><name pos:start="15:10" pos:end="15:16">tolower</name><argument_list pos:start="15:17" pos:end="15:25">(<argument pos:start="15:18" pos:end="15:24"><expr pos:start="15:18" pos:end="15:24"><name pos:start="15:18" pos:end="15:24"><name pos:start="15:18" pos:end="15:21">name</name><index pos:start="15:22" pos:end="15:24">[<expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="15:27" pos:end="15:28">==</operator> <literal type="char" pos:start="15:30" pos:end="15:32">'r'</literal><operator pos:start="15:33" pos:end="15:33">)</operator> <operator pos:start="15:35" pos:end="15:36">&amp;&amp;</operator>

        <call pos:start="17:9" pos:end="17:68"><name pos:start="17:9" pos:end="17:27">ppc_cpu_get_reg_num</name><argument_list pos:start="17:28" pos:end="17:68">(<argument pos:start="17:29" pos:end="17:36"><expr pos:start="17:29" pos:end="17:36"><name pos:start="17:29" pos:end="17:32">name</name> <operator pos:start="17:34" pos:end="17:34">+</operator> <literal type="number" pos:start="17:36" pos:end="17:36">1</literal></expr></argument>, <argument pos:start="17:39" pos:end="17:58"><expr pos:start="17:39" pos:end="17:58"><call pos:start="17:39" pos:end="17:58"><name pos:start="17:39" pos:end="17:48">ARRAY_SIZE</name><argument_list pos:start="17:49" pos:end="17:58">(<argument pos:start="17:50" pos:end="17:57"><expr pos:start="17:50" pos:end="17:57"><name pos:start="17:50" pos:end="17:57"><name pos:start="17:50" pos:end="17:52">env</name><operator pos:start="17:53" pos:end="17:54">-&gt;</operator><name pos:start="17:55" pos:end="17:57">gpr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:61" pos:end="17:67"><expr pos:start="17:61" pos:end="17:67"><operator pos:start="17:61" pos:end="17:61">&amp;</operator><name pos:start="17:62" pos:end="17:67">regnum</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:71" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:17">

        <expr_stmt pos:start="19:9" pos:end="19:33"><expr pos:start="19:9" pos:end="19:32"><operator pos:start="19:9" pos:end="19:9">*</operator><name pos:start="19:10" pos:end="19:13">pval</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <name pos:start="19:17" pos:end="19:32"><name pos:start="19:17" pos:end="19:19">env</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:24">gpr</name><index pos:start="19:25" pos:end="19:32">[<expr pos:start="19:26" pos:end="19:31"><name pos:start="19:26" pos:end="19:31">regnum</name></expr>]</index></name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:34">/* Floating point registers */</comment>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="31:69">(<expr pos:start="29:9" pos:end="31:68"><operator pos:start="29:9" pos:end="29:9">(</operator><call pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:16">tolower</name><argument_list pos:start="29:17" pos:end="29:25">(<argument pos:start="29:18" pos:end="29:24"><expr pos:start="29:18" pos:end="29:24"><name pos:start="29:18" pos:end="29:24"><name pos:start="29:18" pos:end="29:21">name</name><index pos:start="29:22" pos:end="29:24">[<expr pos:start="29:23" pos:end="29:23"><literal type="number" pos:start="29:23" pos:end="29:23">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="29:27" pos:end="29:28">==</operator> <literal type="char" pos:start="29:30" pos:end="29:32">'f'</literal><operator pos:start="29:33" pos:end="29:33">)</operator> <operator pos:start="29:35" pos:end="29:36">&amp;&amp;</operator>

        <call pos:start="31:9" pos:end="31:68"><name pos:start="31:9" pos:end="31:27">ppc_cpu_get_reg_num</name><argument_list pos:start="31:28" pos:end="31:68">(<argument pos:start="31:29" pos:end="31:36"><expr pos:start="31:29" pos:end="31:36"><name pos:start="31:29" pos:end="31:32">name</name> <operator pos:start="31:34" pos:end="31:34">+</operator> <literal type="number" pos:start="31:36" pos:end="31:36">1</literal></expr></argument>, <argument pos:start="31:39" pos:end="31:58"><expr pos:start="31:39" pos:end="31:58"><call pos:start="31:39" pos:end="31:58"><name pos:start="31:39" pos:end="31:48">ARRAY_SIZE</name><argument_list pos:start="31:49" pos:end="31:58">(<argument pos:start="31:50" pos:end="31:57"><expr pos:start="31:50" pos:end="31:57"><name pos:start="31:50" pos:end="31:57"><name pos:start="31:50" pos:end="31:52">env</name><operator pos:start="31:53" pos:end="31:54">-&gt;</operator><name pos:start="31:55" pos:end="31:57">fpr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:61" pos:end="31:67"><expr pos:start="31:61" pos:end="31:67"><operator pos:start="31:61" pos:end="31:61">&amp;</operator><name pos:start="31:62" pos:end="31:67">regnum</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:71" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:17">

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:13">pval</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <name pos:start="33:17" pos:end="33:32"><name pos:start="33:17" pos:end="33:19">env</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:24">fpr</name><index pos:start="33:25" pos:end="33:32">[<expr pos:start="33:26" pos:end="33:31"><name pos:start="33:26" pos:end="33:31">regnum</name></expr>]</index></name></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:35">/* Special purpose registers */</comment>

    <for pos:start="43:5" pos:end="64:0">for <control pos:start="43:9" pos:end="43:49">(<init pos:start="43:10" pos:end="43:15"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>;</init> <condition pos:start="43:17" pos:end="43:44"><expr pos:start="43:17" pos:end="43:43"><name pos:start="43:17" pos:end="43:17">i</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <call pos:start="43:21" pos:end="43:43"><name pos:start="43:21" pos:end="43:30">ARRAY_SIZE</name><argument_list pos:start="43:31" pos:end="43:43">(<argument pos:start="43:32" pos:end="43:42"><expr pos:start="43:32" pos:end="43:42"><name pos:start="43:32" pos:end="43:42"><name pos:start="43:32" pos:end="43:34">env</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:42">spr_cb</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="43:46" pos:end="43:48"><expr pos:start="43:46" pos:end="43:48"><operator pos:start="43:46" pos:end="43:47">++</operator><name pos:start="43:48" pos:end="43:48">i</name></expr></incr>)</control> <block pos:start="43:51" pos:end="64:0">{<block_content pos:start="45:9" pos:end="55:9">

        <decl_stmt pos:start="45:9" pos:end="45:41"><decl pos:start="45:9" pos:end="45:40"><type pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:17">ppc_spr_t</name> <modifier pos:start="45:19" pos:end="45:19">*</modifier></type><name pos:start="45:20" pos:end="45:22">spr</name> <init pos:start="45:24" pos:end="45:40">= <expr pos:start="45:26" pos:end="45:40"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:40"><name pos:start="45:27" pos:end="45:29">env</name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:37">spr_cb</name><index pos:start="45:38" pos:end="45:40">[<expr pos:start="45:39" pos:end="45:39"><name pos:start="45:39" pos:end="45:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:60">(<expr pos:start="49:13" pos:end="49:59"><name pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:15">spr</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:21">name</name></name> <operator pos:start="49:23" pos:end="49:24">&amp;&amp;</operator> <operator pos:start="49:26" pos:end="49:26">(</operator><call pos:start="49:27" pos:end="49:53"><name pos:start="49:27" pos:end="49:36">strcasecmp</name><argument_list pos:start="49:37" pos:end="49:53">(<argument pos:start="49:38" pos:end="49:41"><expr pos:start="49:38" pos:end="49:41"><name pos:start="49:38" pos:end="49:41">name</name></expr></argument>, <argument pos:start="49:44" pos:end="49:52"><expr pos:start="49:44" pos:end="49:52"><name pos:start="49:44" pos:end="49:52"><name pos:start="49:44" pos:end="49:46">spr</name><operator pos:start="49:47" pos:end="49:48">-&gt;</operator><name pos:start="49:49" pos:end="49:52">name</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:55" pos:end="49:56">==</operator> <literal type="number" pos:start="49:58" pos:end="49:58">0</literal><operator pos:start="49:59" pos:end="49:59">)</operator></expr>)</condition> <block pos:start="49:62" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:21">

            <expr_stmt pos:start="51:13" pos:end="51:32"><expr pos:start="51:13" pos:end="51:31"><operator pos:start="51:13" pos:end="51:13">*</operator><name pos:start="51:14" pos:end="51:17">pval</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:31"><name pos:start="51:21" pos:end="51:23">env</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:28">spr</name><index pos:start="51:29" pos:end="51:31">[<expr pos:start="51:30" pos:end="51:30"><name pos:start="51:30" pos:end="51:30">i</name></expr>]</index></name></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:21">return <expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="61:5" pos:end="61:27">/* Segment registers */</comment>

<cpp:if pos:start="63:1" pos:end="63:30">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:30"><operator pos:start="63:5" pos:end="63:5">!</operator><call pos:start="63:6" pos:end="63:30"><name pos:start="63:6" pos:end="63:12">defined</name><argument_list pos:start="63:13" pos:end="63:30">(<argument pos:start="63:14" pos:end="63:29"><expr pos:start="63:14" pos:end="63:29"><name pos:start="63:14" pos:end="63:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="65:5" pos:end="76:0"><if pos:start="65:5" pos:end="76:0">if <condition pos:start="65:8" pos:end="67:68">(<expr pos:start="65:9" pos:end="67:67"><operator pos:start="65:9" pos:end="65:9">(</operator><call pos:start="65:10" pos:end="65:35"><name pos:start="65:10" pos:end="65:20">strncasecmp</name><argument_list pos:start="65:21" pos:end="65:35">(<argument pos:start="65:22" pos:end="65:25"><expr pos:start="65:22" pos:end="65:25"><name pos:start="65:22" pos:end="65:25">name</name></expr></argument>, <argument pos:start="65:28" pos:end="65:31"><expr pos:start="65:28" pos:end="65:31"><literal type="string" pos:start="65:28" pos:end="65:31">"sr"</literal></expr></argument>, <argument pos:start="65:34" pos:end="65:34"><expr pos:start="65:34" pos:end="65:34"><literal type="number" pos:start="65:34" pos:end="65:34">2</literal></expr></argument>)</argument_list></call> <operator pos:start="65:37" pos:end="65:38">==</operator> <literal type="number" pos:start="65:40" pos:end="65:40">0</literal><operator pos:start="65:41" pos:end="65:41">)</operator> <operator pos:start="65:43" pos:end="65:44">&amp;&amp;</operator>

        <call pos:start="67:9" pos:end="67:67"><name pos:start="67:9" pos:end="67:27">ppc_cpu_get_reg_num</name><argument_list pos:start="67:28" pos:end="67:67">(<argument pos:start="67:29" pos:end="67:36"><expr pos:start="67:29" pos:end="67:36"><name pos:start="67:29" pos:end="67:32">name</name> <operator pos:start="67:34" pos:end="67:34">+</operator> <literal type="number" pos:start="67:36" pos:end="67:36">2</literal></expr></argument>, <argument pos:start="67:39" pos:end="67:57"><expr pos:start="67:39" pos:end="67:57"><call pos:start="67:39" pos:end="67:57"><name pos:start="67:39" pos:end="67:48">ARRAY_SIZE</name><argument_list pos:start="67:49" pos:end="67:57">(<argument pos:start="67:50" pos:end="67:56"><expr pos:start="67:50" pos:end="67:56"><name pos:start="67:50" pos:end="67:56"><name pos:start="67:50" pos:end="67:52">env</name><operator pos:start="67:53" pos:end="67:54">-&gt;</operator><name pos:start="67:55" pos:end="67:56">sr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:60" pos:end="67:66"><expr pos:start="67:60" pos:end="67:66"><operator pos:start="67:60" pos:end="67:60">&amp;</operator><name pos:start="67:61" pos:end="67:66">regnum</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:70" pos:end="76:0">{<block_content pos:start="69:9" pos:end="71:17">

        <expr_stmt pos:start="69:9" pos:end="69:32"><expr pos:start="69:9" pos:end="69:31"><operator pos:start="69:9" pos:end="69:9">*</operator><name pos:start="69:10" pos:end="69:13">pval</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:19">env</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:23">sr</name><index pos:start="69:24" pos:end="69:31">[<expr pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:30">regnum</name></expr>]</index></name></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:17">return <expr pos:start="71:16" pos:end="71:16"><literal type="number" pos:start="71:16" pos:end="71:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>



    <return pos:start="79:5" pos:end="79:19">return <expr pos:start="79:12" pos:end="79:18"><operator pos:start="79:12" pos:end="79:12">-</operator><name pos:start="79:13" pos:end="79:18">EINVAL</name></expr>;</return>

</block_content>}</block></function>
</unit>
