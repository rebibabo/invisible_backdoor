<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22129.c" pos:tabs="8"><function pos:start="1:1" pos:end="1187:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parse_ffconfig</name><parameter_list pos:start="1:26" pos:end="1:47">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:38"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:46">filename</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1187:1">{<block_content pos:start="5:5" pos:end="1185:17">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">FILE</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:19"><name pos:start="7:10" pos:end="7:13">line</name><index pos:start="7:14" pos:end="7:19">[<expr pos:start="7:15" pos:end="7:18"><literal type="number" pos:start="7:15" pos:end="7:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:16"><name pos:start="9:10" pos:end="9:12">cmd</name><index pos:start="9:13" pos:end="9:16">[<expr pos:start="9:14" pos:end="9:15"><literal type="number" pos:start="9:14" pos:end="9:15">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">arg</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">val</name></decl>, <decl pos:start="15:14" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:19">errors</name></decl>, <decl pos:start="15:22" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:29">line_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:12">FFStream</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier><modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:26">last_stream</name></decl>, <decl pos:start="17:29" pos:end="17:35"><type ref="prev" pos:start="17:5" pos:end="17:15"><modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:35">stream</name></decl>, <decl pos:start="17:38" pos:end="17:46"><type ref="prev" pos:start="17:5" pos:end="17:15"><modifier pos:start="17:38" pos:end="17:38">*</modifier></type><name pos:start="17:39" pos:end="17:46">redirect</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:12">FFStream</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier><modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:24">last_feed</name></decl>, <decl pos:start="19:27" pos:end="19:31"><type ref="prev" pos:start="19:5" pos:end="19:15"><modifier pos:start="19:27" pos:end="19:27">*</modifier></type><name pos:start="19:28" pos:end="19:31">feed</name></decl>, <decl pos:start="19:34" pos:end="19:35"><type ref="prev" pos:start="19:5" pos:end="19:15"><modifier pos:start="19:34" pos:end="19:34">*</modifier></type><name pos:start="19:35" pos:end="19:35">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:18">AVCodecContext</name></type> <name pos:start="21:20" pos:end="21:28">audio_enc</name></decl>, <decl pos:start="21:31" pos:end="21:39"><type ref="prev" pos:start="21:5" pos:end="21:18"/><name pos:start="21:31" pos:end="21:39">video_enc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:38"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:8">enum</name> <name pos:start="23:10" pos:end="23:18">AVCodecID</name></name></type> <name pos:start="23:20" pos:end="23:27">audio_id</name></decl>, <decl pos:start="23:30" pos:end="23:37"><type ref="prev" pos:start="23:5" pos:end="23:18"/><name pos:start="23:30" pos:end="23:37">video_id</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:5">f</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:13">fopen</name><argument_list pos:start="27:14" pos:end="27:28">(<argument pos:start="27:15" pos:end="27:22"><expr pos:start="27:15" pos:end="27:22"><name pos:start="27:15" pos:end="27:22">filename</name></expr></argument>, <argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><literal type="string" pos:start="27:25" pos:end="27:27">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:11">(<expr pos:start="29:9" pos:end="29:10"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:10">f</name></expr>)</condition> <block pos:start="29:13" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:25"><expr pos:start="31:9" pos:end="31:24"><call pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:14">perror</name><argument_list pos:start="31:15" pos:end="31:24">(<argument pos:start="31:16" pos:end="31:23"><expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:15"><expr pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:10">errors</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:17"><expr pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:12">line_num</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:16">first_stream</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:23">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:32"><expr pos:start="45:5" pos:end="45:31"><name pos:start="45:5" pos:end="45:15">last_stream</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:31">first_stream</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:14">first_feed</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:13">last_feed</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <operator pos:start="49:17" pos:end="49:17">&amp;</operator><name pos:start="49:18" pos:end="49:27">first_feed</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:18"><expr pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:10">stream</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <name pos:start="51:14" pos:end="51:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:16"><expr pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:8">feed</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <name pos:start="53:12" pos:end="53:15">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:12">redirect</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:12">audio_id</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:31">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="64:0"><expr pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:12">video_id</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:31">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>



<cpp:define pos:start="63:1" pos:end="63:80">#<cpp:directive pos:start="63:2" pos:end="63:7">define</cpp:directive> <cpp:macro pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:13">ERROR</name><parameter_list pos:start="63:14" pos:end="63:18">(<parameter pos:start="63:15" pos:end="63:17"><type pos:start="63:15" pos:end="63:17"><modifier pos:start="63:15" pos:end="63:17">...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="63:20" pos:end="63:80">report_config_error(filename, line_num, &amp;errors, __VA_ARGS__)</cpp:value></cpp:define>

    <for pos:start="65:5" pos:end="1174:0">for<control pos:start="65:8" pos:end="65:11">(<init pos:start="65:9" pos:end="65:9">;</init><condition pos:start="65:10" pos:end="65:10">;</condition><incr/>)</control> <block pos:start="65:13" pos:end="1174:0">{<block_content pos:start="67:9" pos:end="1169:9">

        <if_stmt pos:start="67:9" pos:end="69:18"><if pos:start="67:9" pos:end="69:18">if <condition pos:start="67:12" pos:end="67:49">(<expr pos:start="67:13" pos:end="67:48"><call pos:start="67:13" pos:end="67:40"><name pos:start="67:13" pos:end="67:17">fgets</name><argument_list pos:start="67:18" pos:end="67:40">(<argument pos:start="67:19" pos:end="67:22"><expr pos:start="67:19" pos:end="67:22"><name pos:start="67:19" pos:end="67:22">line</name></expr></argument>, <argument pos:start="67:25" pos:end="67:36"><expr pos:start="67:25" pos:end="67:36"><sizeof pos:start="67:25" pos:end="67:36">sizeof<argument_list pos:start="67:31" pos:end="67:36">(<argument pos:start="67:32" pos:end="67:35"><expr pos:start="67:32" pos:end="67:35"><name pos:start="67:32" pos:end="67:35">line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:39" pos:end="67:39"><expr pos:start="67:39" pos:end="67:39"><name pos:start="67:39" pos:end="67:39">f</name></expr></argument>)</argument_list></call> <operator pos:start="67:42" pos:end="67:43">==</operator> <name pos:start="67:45" pos:end="67:48">NULL</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:18"><block_content pos:start="69:13" pos:end="69:18">

            <break pos:start="69:13" pos:end="69:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:19"><expr pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:16">line_num</name><operator pos:start="71:17" pos:end="71:18">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:17"><expr pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:9">p</name> <operator pos:start="73:11" pos:end="73:11">=</operator> <name pos:start="73:13" pos:end="73:16">line</name></expr>;</expr_stmt>

        <while pos:start="75:9" pos:end="77:16">while <condition pos:start="75:15" pos:end="75:30">(<expr pos:start="75:16" pos:end="75:29"><call pos:start="75:16" pos:end="75:29"><name pos:start="75:16" pos:end="75:25">av_isspace</name><argument_list pos:start="75:26" pos:end="75:29">(<argument pos:start="75:27" pos:end="75:28"><expr pos:start="75:27" pos:end="75:28"><operator pos:start="75:27" pos:end="75:27">*</operator><name pos:start="75:28" pos:end="75:28">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:16"><block_content pos:start="77:13" pos:end="77:16">

            <expr_stmt pos:start="77:13" pos:end="77:16"><expr pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:13">p</name><operator pos:start="77:14" pos:end="77:15">++</operator></expr>;</expr_stmt></block_content></block></while>

        <if_stmt pos:start="79:9" pos:end="81:21"><if pos:start="79:9" pos:end="81:21">if <condition pos:start="79:12" pos:end="79:36">(<expr pos:start="79:13" pos:end="79:35"><operator pos:start="79:13" pos:end="79:13">*</operator><name pos:start="79:14" pos:end="79:14">p</name> <operator pos:start="79:16" pos:end="79:17">==</operator> <literal type="char" pos:start="79:19" pos:end="79:22">'\0'</literal> <operator pos:start="79:24" pos:end="79:25">||</operator> <operator pos:start="79:27" pos:end="79:27">*</operator><name pos:start="79:28" pos:end="79:28">p</name> <operator pos:start="79:30" pos:end="79:31">==</operator> <literal type="char" pos:start="79:33" pos:end="79:35">'#'</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:21"><block_content pos:start="81:13" pos:end="81:21">

            <continue pos:start="81:13" pos:end="81:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="85:38"><expr pos:start="85:9" pos:end="85:37"><call pos:start="85:9" pos:end="85:37"><name pos:start="85:9" pos:end="85:15">get_arg</name><argument_list pos:start="85:16" pos:end="85:37">(<argument pos:start="85:17" pos:end="85:19"><expr pos:start="85:17" pos:end="85:19"><name pos:start="85:17" pos:end="85:19">cmd</name></expr></argument>, <argument pos:start="85:22" pos:end="85:32"><expr pos:start="85:22" pos:end="85:32"><sizeof pos:start="85:22" pos:end="85:32">sizeof<argument_list pos:start="85:28" pos:end="85:32">(<argument pos:start="85:29" pos:end="85:31"><expr pos:start="85:29" pos:end="85:31"><name pos:start="85:29" pos:end="85:31">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="85:35" pos:end="85:36"><expr pos:start="85:35" pos:end="85:36"><operator pos:start="85:35" pos:end="85:35">&amp;</operator><name pos:start="85:36" pos:end="85:36">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="89:9" pos:end="1169:9"><if pos:start="89:9" pos:end="103:9">if <condition pos:start="89:12" pos:end="89:40">(<expr pos:start="89:13" pos:end="89:39"><operator pos:start="89:13" pos:end="89:13">!</operator><call pos:start="89:14" pos:end="89:39"><name pos:start="89:14" pos:end="89:26">av_strcasecmp</name><argument_list pos:start="89:27" pos:end="89:39">(<argument pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:30">cmd</name></expr></argument>, <argument pos:start="89:33" pos:end="89:38"><expr pos:start="89:33" pos:end="89:38"><literal type="string" pos:start="89:33" pos:end="89:38">"Port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:42" pos:end="103:9">{<block_content pos:start="91:13" pos:end="101:47">

            <expr_stmt pos:start="91:13" pos:end="91:42"><expr pos:start="91:13" pos:end="91:41"><call pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:19">get_arg</name><argument_list pos:start="91:20" pos:end="91:41">(<argument pos:start="91:21" pos:end="91:23"><expr pos:start="91:21" pos:end="91:23"><name pos:start="91:21" pos:end="91:23">arg</name></expr></argument>, <argument pos:start="91:26" pos:end="91:36"><expr pos:start="91:26" pos:end="91:36"><sizeof pos:start="91:26" pos:end="91:36">sizeof<argument_list pos:start="91:32" pos:end="91:36">(<argument pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="91:39" pos:end="91:40"><expr pos:start="91:39" pos:end="91:40"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:28"><expr pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:15">val</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:27"><name pos:start="93:19" pos:end="93:22">atoi</name><argument_list pos:start="93:23" pos:end="93:27">(<argument pos:start="93:24" pos:end="93:26"><expr pos:start="93:24" pos:end="93:26"><name pos:start="93:24" pos:end="93:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="99:13"><if pos:start="95:13" pos:end="99:13">if <condition pos:start="95:16" pos:end="95:39">(<expr pos:start="95:17" pos:end="95:38"><name pos:start="95:17" pos:end="95:32"><name pos:start="95:17" pos:end="95:19">val</name> <argument_list type="generic" pos:start="95:21" pos:end="95:32">&lt; <argument pos:start="95:23" pos:end="95:30"><expr pos:start="95:23" pos:end="95:30"><literal type="number" pos:start="95:23" pos:end="95:23">1</literal> <operator pos:start="95:25" pos:end="95:26">||</operator> <name pos:start="95:28" pos:end="95:30">val</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="95:34" pos:end="95:38">65536</literal></expr>)</condition> <block pos:start="95:41" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:49">

                <expr_stmt pos:start="97:17" pos:end="97:49"><expr pos:start="97:17" pos:end="97:48"><call pos:start="97:17" pos:end="97:48"><name pos:start="97:17" pos:end="97:21">ERROR</name><argument_list pos:start="97:22" pos:end="97:48">(<argument pos:start="97:23" pos:end="97:42"><expr pos:start="97:23" pos:end="97:42"><literal type="string" pos:start="97:23" pos:end="97:42">"Invalid_port: %s\n"</literal></expr></argument>, <argument pos:start="97:45" pos:end="97:47"><expr pos:start="97:45" pos:end="97:47"><name pos:start="97:45" pos:end="97:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:47"><expr pos:start="101:13" pos:end="101:46"><name pos:start="101:13" pos:end="101:33"><name pos:start="101:13" pos:end="101:24">my_http_addr</name><operator pos:start="101:25" pos:end="101:25">.</operator><name pos:start="101:26" pos:end="101:33">sin_port</name></name> <operator pos:start="101:35" pos:end="101:35">=</operator> <call pos:start="101:37" pos:end="101:46"><name pos:start="101:37" pos:end="101:41">htons</name><argument_list pos:start="101:42" pos:end="101:46">(<argument pos:start="101:43" pos:end="101:45"><expr pos:start="101:43" pos:end="101:45"><name pos:start="101:43" pos:end="101:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="103:11" pos:end="113:9">else if <condition pos:start="103:19" pos:end="103:54">(<expr pos:start="103:20" pos:end="103:53"><operator pos:start="103:20" pos:end="103:20">!</operator><call pos:start="103:21" pos:end="103:53"><name pos:start="103:21" pos:end="103:33">av_strcasecmp</name><argument_list pos:start="103:34" pos:end="103:53">(<argument pos:start="103:35" pos:end="103:37"><expr pos:start="103:35" pos:end="103:37"><name pos:start="103:35" pos:end="103:37">cmd</name></expr></argument>, <argument pos:start="103:40" pos:end="103:52"><expr pos:start="103:40" pos:end="103:52"><literal type="string" pos:start="103:40" pos:end="103:52">"BindAddress"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:56" pos:end="113:9">{<block_content pos:start="105:13" pos:end="111:13">

            <expr_stmt pos:start="105:13" pos:end="105:42"><expr pos:start="105:13" pos:end="105:41"><call pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:19">get_arg</name><argument_list pos:start="105:20" pos:end="105:41">(<argument pos:start="105:21" pos:end="105:23"><expr pos:start="105:21" pos:end="105:23"><name pos:start="105:21" pos:end="105:23">arg</name></expr></argument>, <argument pos:start="105:26" pos:end="105:36"><expr pos:start="105:26" pos:end="105:36"><sizeof pos:start="105:26" pos:end="105:36">sizeof<argument_list pos:start="105:32" pos:end="105:36">(<argument pos:start="105:33" pos:end="105:35"><expr pos:start="105:33" pos:end="105:35"><name pos:start="105:33" pos:end="105:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="105:39" pos:end="105:40"><expr pos:start="105:39" pos:end="105:40"><operator pos:start="105:39" pos:end="105:39">&amp;</operator><name pos:start="105:40" pos:end="105:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="111:13"><if pos:start="107:13" pos:end="111:13">if <condition pos:start="107:16" pos:end="107:63">(<expr pos:start="107:17" pos:end="107:62"><call pos:start="107:17" pos:end="107:57"><name pos:start="107:17" pos:end="107:28">resolve_host</name><argument_list pos:start="107:29" pos:end="107:57">(<argument pos:start="107:30" pos:end="107:51"><expr pos:start="107:30" pos:end="107:51"><operator pos:start="107:30" pos:end="107:30">&amp;</operator><name pos:start="107:31" pos:end="107:51"><name pos:start="107:31" pos:end="107:42">my_http_addr</name><operator pos:start="107:43" pos:end="107:43">.</operator><name pos:start="107:44" pos:end="107:51">sin_addr</name></name></expr></argument>, <argument pos:start="107:54" pos:end="107:56"><expr pos:start="107:54" pos:end="107:56"><name pos:start="107:54" pos:end="107:56">arg</name></expr></argument>)</argument_list></call> <operator pos:start="107:59" pos:end="107:60">!=</operator> <literal type="number" pos:start="107:62" pos:end="107:62">0</literal></expr>)</condition> <block pos:start="107:65" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:67">

                <expr_stmt pos:start="109:17" pos:end="109:67"><expr pos:start="109:17" pos:end="109:66"><call pos:start="109:17" pos:end="109:66"><name pos:start="109:17" pos:end="109:21">ERROR</name><argument_list pos:start="109:22" pos:end="109:66">(<argument pos:start="109:23" pos:end="109:60"><expr pos:start="109:23" pos:end="109:60"><literal type="string" pos:start="109:23" pos:end="109:60">"%s:%d: Invalid host/IP address: %s\n"</literal></expr></argument>, <argument pos:start="109:63" pos:end="109:65"><expr pos:start="109:63" pos:end="109:65"><name pos:start="109:63" pos:end="109:65">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="117:9">else if <condition pos:start="113:19" pos:end="113:51">(<expr pos:start="113:20" pos:end="113:50"><operator pos:start="113:20" pos:end="113:20">!</operator><call pos:start="113:21" pos:end="113:50"><name pos:start="113:21" pos:end="113:33">av_strcasecmp</name><argument_list pos:start="113:34" pos:end="113:50">(<argument pos:start="113:35" pos:end="113:37"><expr pos:start="113:35" pos:end="113:37"><name pos:start="113:35" pos:end="113:37">cmd</name></expr></argument>, <argument pos:start="113:40" pos:end="113:49"><expr pos:start="113:40" pos:end="113:49"><literal type="string" pos:start="113:40" pos:end="113:49">"NoDaemon"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:53" pos:end="117:9">{<block_content>

            <comment type="line" pos:start="115:13" pos:end="115:51">// do nothing here, its the default now</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="117:11" pos:end="131:9">else if <condition pos:start="117:19" pos:end="117:51">(<expr pos:start="117:20" pos:end="117:50"><operator pos:start="117:20" pos:end="117:20">!</operator><call pos:start="117:21" pos:end="117:50"><name pos:start="117:21" pos:end="117:33">av_strcasecmp</name><argument_list pos:start="117:34" pos:end="117:50">(<argument pos:start="117:35" pos:end="117:37"><expr pos:start="117:35" pos:end="117:37"><name pos:start="117:35" pos:end="117:37">cmd</name></expr></argument>, <argument pos:start="117:40" pos:end="117:49"><expr pos:start="117:40" pos:end="117:49"><literal type="string" pos:start="117:40" pos:end="117:49">"RTSPPort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:53" pos:end="131:9">{<block_content pos:start="119:13" pos:end="129:53">

            <expr_stmt pos:start="119:13" pos:end="119:42"><expr pos:start="119:13" pos:end="119:41"><call pos:start="119:13" pos:end="119:41"><name pos:start="119:13" pos:end="119:19">get_arg</name><argument_list pos:start="119:20" pos:end="119:41">(<argument pos:start="119:21" pos:end="119:23"><expr pos:start="119:21" pos:end="119:23"><name pos:start="119:21" pos:end="119:23">arg</name></expr></argument>, <argument pos:start="119:26" pos:end="119:36"><expr pos:start="119:26" pos:end="119:36"><sizeof pos:start="119:26" pos:end="119:36">sizeof<argument_list pos:start="119:32" pos:end="119:36">(<argument pos:start="119:33" pos:end="119:35"><expr pos:start="119:33" pos:end="119:35"><name pos:start="119:33" pos:end="119:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="119:39" pos:end="119:40"><expr pos:start="119:39" pos:end="119:40"><operator pos:start="119:39" pos:end="119:39">&amp;</operator><name pos:start="119:40" pos:end="119:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:28"><expr pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:15">val</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:27"><name pos:start="121:19" pos:end="121:22">atoi</name><argument_list pos:start="121:23" pos:end="121:27">(<argument pos:start="121:24" pos:end="121:26"><expr pos:start="121:24" pos:end="121:26"><name pos:start="121:24" pos:end="121:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="127:13"><if pos:start="123:13" pos:end="127:13">if <condition pos:start="123:16" pos:end="123:39">(<expr pos:start="123:17" pos:end="123:38"><name pos:start="123:17" pos:end="123:32"><name pos:start="123:17" pos:end="123:19">val</name> <argument_list type="generic" pos:start="123:21" pos:end="123:32">&lt; <argument pos:start="123:23" pos:end="123:30"><expr pos:start="123:23" pos:end="123:30"><literal type="number" pos:start="123:23" pos:end="123:23">1</literal> <operator pos:start="123:25" pos:end="123:26">||</operator> <name pos:start="123:28" pos:end="123:30">val</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="123:34" pos:end="123:38">65536</literal></expr>)</condition> <block pos:start="123:41" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:56">

                <expr_stmt pos:start="125:17" pos:end="125:56"><expr pos:start="125:17" pos:end="125:55"><call pos:start="125:17" pos:end="125:55"><name pos:start="125:17" pos:end="125:21">ERROR</name><argument_list pos:start="125:22" pos:end="125:55">(<argument pos:start="125:23" pos:end="125:49"><expr pos:start="125:23" pos:end="125:49"><literal type="string" pos:start="125:23" pos:end="125:49">"%s:%d: Invalid port: %s\n"</literal></expr></argument>, <argument pos:start="125:52" pos:end="125:54"><expr pos:start="125:52" pos:end="125:54"><name pos:start="125:52" pos:end="125:54">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:53"><expr pos:start="129:13" pos:end="129:52"><name pos:start="129:13" pos:end="129:33"><name pos:start="129:13" pos:end="129:24">my_rtsp_addr</name><operator pos:start="129:25" pos:end="129:25">.</operator><name pos:start="129:26" pos:end="129:33">sin_port</name></name> <operator pos:start="129:35" pos:end="129:35">=</operator> <call pos:start="129:37" pos:end="129:52"><name pos:start="129:37" pos:end="129:41">htons</name><argument_list pos:start="129:42" pos:end="129:52">(<argument pos:start="129:43" pos:end="129:51"><expr pos:start="129:43" pos:end="129:51"><call pos:start="129:43" pos:end="129:51"><name pos:start="129:43" pos:end="129:46">atoi</name><argument_list pos:start="129:47" pos:end="129:51">(<argument pos:start="129:48" pos:end="129:50"><expr pos:start="129:48" pos:end="129:50"><name pos:start="129:48" pos:end="129:50">arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="131:11" pos:end="141:9">else if <condition pos:start="131:19" pos:end="131:58">(<expr pos:start="131:20" pos:end="131:57"><operator pos:start="131:20" pos:end="131:20">!</operator><call pos:start="131:21" pos:end="131:57"><name pos:start="131:21" pos:end="131:33">av_strcasecmp</name><argument_list pos:start="131:34" pos:end="131:57">(<argument pos:start="131:35" pos:end="131:37"><expr pos:start="131:35" pos:end="131:37"><name pos:start="131:35" pos:end="131:37">cmd</name></expr></argument>, <argument pos:start="131:40" pos:end="131:56"><expr pos:start="131:40" pos:end="131:56"><literal type="string" pos:start="131:40" pos:end="131:56">"RTSPBindAddress"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:60" pos:end="141:9">{<block_content pos:start="133:13" pos:end="139:13">

            <expr_stmt pos:start="133:13" pos:end="133:42"><expr pos:start="133:13" pos:end="133:41"><call pos:start="133:13" pos:end="133:41"><name pos:start="133:13" pos:end="133:19">get_arg</name><argument_list pos:start="133:20" pos:end="133:41">(<argument pos:start="133:21" pos:end="133:23"><expr pos:start="133:21" pos:end="133:23"><name pos:start="133:21" pos:end="133:23">arg</name></expr></argument>, <argument pos:start="133:26" pos:end="133:36"><expr pos:start="133:26" pos:end="133:36"><sizeof pos:start="133:26" pos:end="133:36">sizeof<argument_list pos:start="133:32" pos:end="133:36">(<argument pos:start="133:33" pos:end="133:35"><expr pos:start="133:33" pos:end="133:35"><name pos:start="133:33" pos:end="133:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="133:39" pos:end="133:40"><expr pos:start="133:39" pos:end="133:40"><operator pos:start="133:39" pos:end="133:39">&amp;</operator><name pos:start="133:40" pos:end="133:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="139:13"><if pos:start="135:13" pos:end="139:13">if <condition pos:start="135:16" pos:end="135:63">(<expr pos:start="135:17" pos:end="135:62"><call pos:start="135:17" pos:end="135:57"><name pos:start="135:17" pos:end="135:28">resolve_host</name><argument_list pos:start="135:29" pos:end="135:57">(<argument pos:start="135:30" pos:end="135:51"><expr pos:start="135:30" pos:end="135:51"><operator pos:start="135:30" pos:end="135:30">&amp;</operator><name pos:start="135:31" pos:end="135:51"><name pos:start="135:31" pos:end="135:42">my_rtsp_addr</name><operator pos:start="135:43" pos:end="135:43">.</operator><name pos:start="135:44" pos:end="135:51">sin_addr</name></name></expr></argument>, <argument pos:start="135:54" pos:end="135:56"><expr pos:start="135:54" pos:end="135:56"><name pos:start="135:54" pos:end="135:56">arg</name></expr></argument>)</argument_list></call> <operator pos:start="135:59" pos:end="135:60">!=</operator> <literal type="number" pos:start="135:62" pos:end="135:62">0</literal></expr>)</condition> <block pos:start="135:65" pos:end="139:13">{<block_content pos:start="137:17" pos:end="137:60">

                <expr_stmt pos:start="137:17" pos:end="137:60"><expr pos:start="137:17" pos:end="137:59"><call pos:start="137:17" pos:end="137:59"><name pos:start="137:17" pos:end="137:21">ERROR</name><argument_list pos:start="137:22" pos:end="137:59">(<argument pos:start="137:23" pos:end="137:53"><expr pos:start="137:23" pos:end="137:53"><literal type="string" pos:start="137:23" pos:end="137:53">"Invalid host/IP address: %s\n"</literal></expr></argument>, <argument pos:start="137:56" pos:end="137:58"><expr pos:start="137:56" pos:end="137:58"><name pos:start="137:56" pos:end="137:58">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="141:11" pos:end="155:9">else if <condition pos:start="141:19" pos:end="141:61">(<expr pos:start="141:20" pos:end="141:60"><operator pos:start="141:20" pos:end="141:20">!</operator><call pos:start="141:21" pos:end="141:60"><name pos:start="141:21" pos:end="141:33">av_strcasecmp</name><argument_list pos:start="141:34" pos:end="141:60">(<argument pos:start="141:35" pos:end="141:37"><expr pos:start="141:35" pos:end="141:37"><name pos:start="141:35" pos:end="141:37">cmd</name></expr></argument>, <argument pos:start="141:40" pos:end="141:59"><expr pos:start="141:40" pos:end="141:59"><literal type="string" pos:start="141:40" pos:end="141:59">"MaxHTTPConnections"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:63" pos:end="155:9">{<block_content pos:start="143:13" pos:end="153:42">

            <expr_stmt pos:start="143:13" pos:end="143:42"><expr pos:start="143:13" pos:end="143:41"><call pos:start="143:13" pos:end="143:41"><name pos:start="143:13" pos:end="143:19">get_arg</name><argument_list pos:start="143:20" pos:end="143:41">(<argument pos:start="143:21" pos:end="143:23"><expr pos:start="143:21" pos:end="143:23"><name pos:start="143:21" pos:end="143:23">arg</name></expr></argument>, <argument pos:start="143:26" pos:end="143:36"><expr pos:start="143:26" pos:end="143:36"><sizeof pos:start="143:26" pos:end="143:36">sizeof<argument_list pos:start="143:32" pos:end="143:36">(<argument pos:start="143:33" pos:end="143:35"><expr pos:start="143:33" pos:end="143:35"><name pos:start="143:33" pos:end="143:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="143:39" pos:end="143:40"><expr pos:start="143:39" pos:end="143:40"><operator pos:start="143:39" pos:end="143:39">&amp;</operator><name pos:start="143:40" pos:end="143:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:28"><expr pos:start="145:13" pos:end="145:27"><name pos:start="145:13" pos:end="145:15">val</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <call pos:start="145:19" pos:end="145:27"><name pos:start="145:19" pos:end="145:22">atoi</name><argument_list pos:start="145:23" pos:end="145:27">(<argument pos:start="145:24" pos:end="145:26"><expr pos:start="145:24" pos:end="145:26"><name pos:start="145:24" pos:end="145:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="147:13" pos:end="151:13"><if pos:start="147:13" pos:end="151:13">if <condition pos:start="147:16" pos:end="147:39">(<expr pos:start="147:17" pos:end="147:38"><name pos:start="147:17" pos:end="147:32"><name pos:start="147:17" pos:end="147:19">val</name> <argument_list type="generic" pos:start="147:21" pos:end="147:32">&lt; <argument pos:start="147:23" pos:end="147:30"><expr pos:start="147:23" pos:end="147:30"><literal type="number" pos:start="147:23" pos:end="147:23">1</literal> <operator pos:start="147:25" pos:end="147:26">||</operator> <name pos:start="147:28" pos:end="147:30">val</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="147:34" pos:end="147:38">65536</literal></expr>)</condition> <block pos:start="147:41" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:63">

                <expr_stmt pos:start="149:17" pos:end="149:63"><expr pos:start="149:17" pos:end="149:62"><call pos:start="149:17" pos:end="149:62"><name pos:start="149:17" pos:end="149:21">ERROR</name><argument_list pos:start="149:22" pos:end="149:62">(<argument pos:start="149:23" pos:end="149:56"><expr pos:start="149:23" pos:end="149:56"><literal type="string" pos:start="149:23" pos:end="149:56">"Invalid MaxHTTPConnections: %s\n"</literal></expr></argument>, <argument pos:start="149:59" pos:end="149:61"><expr pos:start="149:59" pos:end="149:61"><name pos:start="149:59" pos:end="149:61">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:42"><expr pos:start="153:13" pos:end="153:41"><name pos:start="153:13" pos:end="153:35">nb_max_http_connections</name> <operator pos:start="153:37" pos:end="153:37">=</operator> <name pos:start="153:39" pos:end="153:41">val</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="155:11" pos:end="171:9">else if <condition pos:start="155:19" pos:end="155:53">(<expr pos:start="155:20" pos:end="155:52"><operator pos:start="155:20" pos:end="155:20">!</operator><call pos:start="155:21" pos:end="155:52"><name pos:start="155:21" pos:end="155:33">av_strcasecmp</name><argument_list pos:start="155:34" pos:end="155:52">(<argument pos:start="155:35" pos:end="155:37"><expr pos:start="155:35" pos:end="155:37"><name pos:start="155:35" pos:end="155:37">cmd</name></expr></argument>, <argument pos:start="155:40" pos:end="155:51"><expr pos:start="155:40" pos:end="155:51"><literal type="string" pos:start="155:40" pos:end="155:51">"MaxClients"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:55" pos:end="171:9">{<block_content pos:start="157:13" pos:end="169:13">

            <expr_stmt pos:start="157:13" pos:end="157:42"><expr pos:start="157:13" pos:end="157:41"><call pos:start="157:13" pos:end="157:41"><name pos:start="157:13" pos:end="157:19">get_arg</name><argument_list pos:start="157:20" pos:end="157:41">(<argument pos:start="157:21" pos:end="157:23"><expr pos:start="157:21" pos:end="157:23"><name pos:start="157:21" pos:end="157:23">arg</name></expr></argument>, <argument pos:start="157:26" pos:end="157:36"><expr pos:start="157:26" pos:end="157:36"><sizeof pos:start="157:26" pos:end="157:36">sizeof<argument_list pos:start="157:32" pos:end="157:36">(<argument pos:start="157:33" pos:end="157:35"><expr pos:start="157:33" pos:end="157:35"><name pos:start="157:33" pos:end="157:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="157:39" pos:end="157:40"><expr pos:start="157:39" pos:end="157:40"><operator pos:start="157:39" pos:end="157:39">&amp;</operator><name pos:start="157:40" pos:end="157:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:28"><expr pos:start="159:13" pos:end="159:27"><name pos:start="159:13" pos:end="159:15">val</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:27"><name pos:start="159:19" pos:end="159:22">atoi</name><argument_list pos:start="159:23" pos:end="159:27">(<argument pos:start="159:24" pos:end="159:26"><expr pos:start="159:24" pos:end="159:26"><name pos:start="159:24" pos:end="159:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="169:13"><if pos:start="161:13" pos:end="165:13">if <condition pos:start="161:16" pos:end="161:57">(<expr pos:start="161:17" pos:end="161:56"><name pos:start="161:17" pos:end="161:32"><name pos:start="161:17" pos:end="161:19">val</name> <argument_list type="generic" pos:start="161:21" pos:end="161:32">&lt; <argument pos:start="161:23" pos:end="161:30"><expr pos:start="161:23" pos:end="161:30"><literal type="number" pos:start="161:23" pos:end="161:23">1</literal> <operator pos:start="161:25" pos:end="161:26">||</operator> <name pos:start="161:28" pos:end="161:30">val</name></expr></argument> &gt;</argument_list></name> <name pos:start="161:34" pos:end="161:56">nb_max_http_connections</name></expr>)</condition> <block pos:start="161:59" pos:end="165:13">{<block_content pos:start="163:17" pos:end="163:55">

                <expr_stmt pos:start="163:17" pos:end="163:55"><expr pos:start="163:17" pos:end="163:54"><call pos:start="163:17" pos:end="163:54"><name pos:start="163:17" pos:end="163:21">ERROR</name><argument_list pos:start="163:22" pos:end="163:54">(<argument pos:start="163:23" pos:end="163:48"><expr pos:start="163:23" pos:end="163:48"><literal type="string" pos:start="163:23" pos:end="163:48">"Invalid MaxClients: %s\n"</literal></expr></argument>, <argument pos:start="163:51" pos:end="163:53"><expr pos:start="163:51" pos:end="163:53"><name pos:start="163:51" pos:end="163:53">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="165:15" pos:end="169:13">else <block pos:start="165:20" pos:end="169:13">{<block_content pos:start="167:17" pos:end="167:41">

                <expr_stmt pos:start="167:17" pos:end="167:41"><expr pos:start="167:17" pos:end="167:40"><name pos:start="167:17" pos:end="167:34">nb_max_connections</name> <operator pos:start="167:36" pos:end="167:36">=</operator> <name pos:start="167:38" pos:end="167:40">val</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="171:11" pos:end="187:9">else if <condition pos:start="171:19" pos:end="171:55">(<expr pos:start="171:20" pos:end="171:54"><operator pos:start="171:20" pos:end="171:20">!</operator><call pos:start="171:21" pos:end="171:54"><name pos:start="171:21" pos:end="171:33">av_strcasecmp</name><argument_list pos:start="171:34" pos:end="171:54">(<argument pos:start="171:35" pos:end="171:37"><expr pos:start="171:35" pos:end="171:37"><name pos:start="171:35" pos:end="171:37">cmd</name></expr></argument>, <argument pos:start="171:40" pos:end="171:53"><expr pos:start="171:40" pos:end="171:53"><literal type="string" pos:start="171:40" pos:end="171:53">"MaxBandwidth"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:57" pos:end="187:9">{<block_content pos:start="173:13" pos:end="185:38">

            <decl_stmt pos:start="173:13" pos:end="173:26"><decl pos:start="173:13" pos:end="173:25"><type pos:start="173:13" pos:end="173:19"><name pos:start="173:13" pos:end="173:19">int64_t</name></type> <name pos:start="173:21" pos:end="173:25">llval</name></decl>;</decl_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:42"><expr pos:start="175:13" pos:end="175:41"><call pos:start="175:13" pos:end="175:41"><name pos:start="175:13" pos:end="175:19">get_arg</name><argument_list pos:start="175:20" pos:end="175:41">(<argument pos:start="175:21" pos:end="175:23"><expr pos:start="175:21" pos:end="175:23"><name pos:start="175:21" pos:end="175:23">arg</name></expr></argument>, <argument pos:start="175:26" pos:end="175:36"><expr pos:start="175:26" pos:end="175:36"><sizeof pos:start="175:26" pos:end="175:36">sizeof<argument_list pos:start="175:32" pos:end="175:36">(<argument pos:start="175:33" pos:end="175:35"><expr pos:start="175:33" pos:end="175:35"><name pos:start="175:33" pos:end="175:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="175:39" pos:end="175:40"><expr pos:start="175:39" pos:end="175:40"><operator pos:start="175:39" pos:end="175:39">&amp;</operator><name pos:start="175:40" pos:end="175:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:43"><expr pos:start="177:13" pos:end="177:42"><name pos:start="177:13" pos:end="177:17">llval</name> <operator pos:start="177:19" pos:end="177:19">=</operator> <call pos:start="177:21" pos:end="177:42"><name pos:start="177:21" pos:end="177:27">strtoll</name><argument_list pos:start="177:28" pos:end="177:42">(<argument pos:start="177:29" pos:end="177:31"><expr pos:start="177:29" pos:end="177:31"><name pos:start="177:29" pos:end="177:31">arg</name></expr></argument>, <argument pos:start="177:34" pos:end="177:37"><expr pos:start="177:34" pos:end="177:37"><name pos:start="177:34" pos:end="177:37">NULL</name></expr></argument>, <argument pos:start="177:40" pos:end="177:41"><expr pos:start="177:40" pos:end="177:41"><literal type="number" pos:start="177:40" pos:end="177:41">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="185:38"><if pos:start="179:13" pos:end="183:13">if <condition pos:start="179:16" pos:end="179:47">(<expr pos:start="179:17" pos:end="179:46"><name pos:start="179:17" pos:end="179:37"><name pos:start="179:17" pos:end="179:21">llval</name> <argument_list type="generic" pos:start="179:23" pos:end="179:37">&lt; <argument pos:start="179:25" pos:end="179:35"><expr pos:start="179:25" pos:end="179:35"><literal type="number" pos:start="179:25" pos:end="179:26">10</literal> <operator pos:start="179:28" pos:end="179:29">||</operator> <name pos:start="179:31" pos:end="179:35">llval</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="179:39" pos:end="179:46">10000000</literal></expr>)</condition> <block pos:start="179:49" pos:end="183:13">{<block_content pos:start="181:17" pos:end="181:57">

                <expr_stmt pos:start="181:17" pos:end="181:57"><expr pos:start="181:17" pos:end="181:56"><call pos:start="181:17" pos:end="181:56"><name pos:start="181:17" pos:end="181:21">ERROR</name><argument_list pos:start="181:22" pos:end="181:56">(<argument pos:start="181:23" pos:end="181:50"><expr pos:start="181:23" pos:end="181:50"><literal type="string" pos:start="181:23" pos:end="181:50">"Invalid MaxBandwidth: %s\n"</literal></expr></argument>, <argument pos:start="181:53" pos:end="181:55"><expr pos:start="181:53" pos:end="181:55"><name pos:start="181:53" pos:end="181:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="183:15" pos:end="185:38">else<block type="pseudo" pos:start="185:17" pos:end="185:38"><block_content pos:start="185:17" pos:end="185:38">

                <expr_stmt pos:start="185:17" pos:end="185:38"><expr pos:start="185:17" pos:end="185:37"><name pos:start="185:17" pos:end="185:29">max_bandwidth</name> <operator pos:start="185:31" pos:end="185:31">=</operator> <name pos:start="185:33" pos:end="185:37">llval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="187:11" pos:end="193:9">else if <condition pos:start="187:19" pos:end="187:52">(<expr pos:start="187:20" pos:end="187:51"><operator pos:start="187:20" pos:end="187:20">!</operator><call pos:start="187:21" pos:end="187:51"><name pos:start="187:21" pos:end="187:33">av_strcasecmp</name><argument_list pos:start="187:34" pos:end="187:51">(<argument pos:start="187:35" pos:end="187:37"><expr pos:start="187:35" pos:end="187:37"><name pos:start="187:35" pos:end="187:37">cmd</name></expr></argument>, <argument pos:start="187:40" pos:end="187:50"><expr pos:start="187:40" pos:end="187:50"><literal type="string" pos:start="187:40" pos:end="187:50">"CustomLog"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:54" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:62">

            <if_stmt pos:start="189:13" pos:end="191:62"><if pos:start="189:13" pos:end="191:62">if <condition pos:start="189:16" pos:end="189:32">(<expr pos:start="189:17" pos:end="189:31"><operator pos:start="189:17" pos:end="189:17">!</operator><name pos:start="189:18" pos:end="189:31">ffserver_debug</name></expr>)</condition><block type="pseudo" pos:start="191:17" pos:end="191:62"><block_content pos:start="191:17" pos:end="191:62">

                <expr_stmt pos:start="191:17" pos:end="191:62"><expr pos:start="191:17" pos:end="191:61"><call pos:start="191:17" pos:end="191:61"><name pos:start="191:17" pos:end="191:23">get_arg</name><argument_list pos:start="191:24" pos:end="191:61">(<argument pos:start="191:25" pos:end="191:35"><expr pos:start="191:25" pos:end="191:35"><name pos:start="191:25" pos:end="191:35">logfilename</name></expr></argument>, <argument pos:start="191:38" pos:end="191:56"><expr pos:start="191:38" pos:end="191:56"><sizeof pos:start="191:38" pos:end="191:56">sizeof<argument_list pos:start="191:44" pos:end="191:56">(<argument pos:start="191:45" pos:end="191:55"><expr pos:start="191:45" pos:end="191:55"><name pos:start="191:45" pos:end="191:55">logfilename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="191:59" pos:end="191:60"><expr pos:start="191:59" pos:end="191:60"><operator pos:start="191:59" pos:end="191:59">&amp;</operator><name pos:start="191:60" pos:end="191:60">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="193:11" pos:end="261:9">else if <condition pos:start="193:19" pos:end="193:48">(<expr pos:start="193:20" pos:end="193:47"><operator pos:start="193:20" pos:end="193:20">!</operator><call pos:start="193:21" pos:end="193:47"><name pos:start="193:21" pos:end="193:33">av_strcasecmp</name><argument_list pos:start="193:34" pos:end="193:47">(<argument pos:start="193:35" pos:end="193:37"><expr pos:start="193:35" pos:end="193:37"><name pos:start="193:35" pos:end="193:37">cmd</name></expr></argument>, <argument pos:start="193:40" pos:end="193:46"><expr pos:start="193:40" pos:end="193:46"><literal type="string" pos:start="193:40" pos:end="193:46">"&lt;Feed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:50" pos:end="261:9">{<block_content pos:start="199:13" pos:end="259:13">

            <comment type="block" format="doxygen" pos:start="195:13" pos:end="195:59">/*********************************************/</comment>

            <comment type="block" pos:start="197:13" pos:end="197:38">/* Feed related options */</comment>

            <decl_stmt pos:start="199:13" pos:end="199:20"><decl pos:start="199:13" pos:end="199:19"><type pos:start="199:13" pos:end="199:18"><name pos:start="199:13" pos:end="199:16">char</name> <modifier pos:start="199:18" pos:end="199:18">*</modifier></type><name pos:start="199:19" pos:end="199:19">q</name></decl>;</decl_stmt>

            <if_stmt pos:start="201:13" pos:end="259:13"><if pos:start="201:13" pos:end="205:13">if <condition pos:start="201:16" pos:end="201:31">(<expr pos:start="201:17" pos:end="201:30"><name pos:start="201:17" pos:end="201:22">stream</name> <operator pos:start="201:24" pos:end="201:25">||</operator> <name pos:start="201:27" pos:end="201:30">feed</name></expr>)</condition> <block pos:start="201:33" pos:end="205:13">{<block_content pos:start="203:17" pos:end="203:44">

                <expr_stmt pos:start="203:17" pos:end="203:44"><expr pos:start="203:17" pos:end="203:43"><call pos:start="203:17" pos:end="203:43"><name pos:start="203:17" pos:end="203:21">ERROR</name><argument_list pos:start="203:22" pos:end="203:43">(<argument pos:start="203:23" pos:end="203:42"><expr pos:start="203:23" pos:end="203:42"><literal type="string" pos:start="203:23" pos:end="203:42">"Already in a tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="205:15" pos:end="259:13">else <block pos:start="205:20" pos:end="259:13">{<block_content pos:start="207:17" pos:end="257:45">

                <expr_stmt pos:start="207:17" pos:end="207:52"><expr pos:start="207:17" pos:end="207:51"><name pos:start="207:17" pos:end="207:20">feed</name> <operator pos:start="207:22" pos:end="207:22">=</operator> <call pos:start="207:24" pos:end="207:51"><name pos:start="207:24" pos:end="207:33">av_mallocz</name><argument_list pos:start="207:34" pos:end="207:51">(<argument pos:start="207:35" pos:end="207:50"><expr pos:start="207:35" pos:end="207:50"><sizeof pos:start="207:35" pos:end="207:50">sizeof<argument_list pos:start="207:41" pos:end="207:50">(<argument pos:start="207:42" pos:end="207:49"><expr pos:start="207:42" pos:end="207:49"><name pos:start="207:42" pos:end="207:49">FFStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:68"><expr pos:start="209:17" pos:end="209:67"><call pos:start="209:17" pos:end="209:67"><name pos:start="209:17" pos:end="209:23">get_arg</name><argument_list pos:start="209:24" pos:end="209:67">(<argument pos:start="209:25" pos:end="209:38"><expr pos:start="209:25" pos:end="209:38"><name pos:start="209:25" pos:end="209:38"><name pos:start="209:25" pos:end="209:28">feed</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:38">filename</name></name></expr></argument>, <argument pos:start="209:41" pos:end="209:62"><expr pos:start="209:41" pos:end="209:62"><sizeof pos:start="209:41" pos:end="209:62">sizeof<argument_list pos:start="209:47" pos:end="209:62">(<argument pos:start="209:48" pos:end="209:61"><expr pos:start="209:48" pos:end="209:61"><name pos:start="209:48" pos:end="209:61"><name pos:start="209:48" pos:end="209:51">feed</name><operator pos:start="209:52" pos:end="209:53">-&gt;</operator><name pos:start="209:54" pos:end="209:61">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="209:65" pos:end="209:66"><expr pos:start="209:65" pos:end="209:66"><operator pos:start="209:65" pos:end="209:65">&amp;</operator><name pos:start="209:66" pos:end="209:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:49"><expr pos:start="211:17" pos:end="211:48"><name pos:start="211:17" pos:end="211:17">q</name> <operator pos:start="211:19" pos:end="211:19">=</operator> <call pos:start="211:21" pos:end="211:48"><name pos:start="211:21" pos:end="211:27">strrchr</name><argument_list pos:start="211:28" pos:end="211:48">(<argument pos:start="211:29" pos:end="211:42"><expr pos:start="211:29" pos:end="211:42"><name pos:start="211:29" pos:end="211:42"><name pos:start="211:29" pos:end="211:32">feed</name><operator pos:start="211:33" pos:end="211:34">-&gt;</operator><name pos:start="211:35" pos:end="211:42">filename</name></name></expr></argument>, <argument pos:start="211:45" pos:end="211:47"><expr pos:start="211:45" pos:end="211:47"><literal type="char" pos:start="211:45" pos:end="211:47">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="213:17" pos:end="215:30"><if pos:start="213:17" pos:end="215:30">if <condition pos:start="213:20" pos:end="213:23">(<expr pos:start="213:21" pos:end="213:22"><operator pos:start="213:21" pos:end="213:21">*</operator><name pos:start="213:22" pos:end="213:22">q</name></expr>)</condition><block type="pseudo" pos:start="215:21" pos:end="215:30"><block_content pos:start="215:21" pos:end="215:30">

                    <expr_stmt pos:start="215:21" pos:end="215:30"><expr pos:start="215:21" pos:end="215:29"><operator pos:start="215:21" pos:end="215:21">*</operator><name pos:start="215:22" pos:end="215:22">q</name> <operator pos:start="215:24" pos:end="215:24">=</operator> <literal type="char" pos:start="215:26" pos:end="215:29">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <for pos:start="219:17" pos:end="227:17">for <control pos:start="219:21" pos:end="219:52">(<init pos:start="219:22" pos:end="219:36"><expr pos:start="219:22" pos:end="219:35"><name pos:start="219:22" pos:end="219:22">s</name> <operator pos:start="219:24" pos:end="219:24">=</operator> <name pos:start="219:26" pos:end="219:35">first_feed</name></expr>;</init> <condition pos:start="219:38" pos:end="219:39"><expr pos:start="219:38" pos:end="219:38"><name pos:start="219:38" pos:end="219:38">s</name></expr>;</condition> <incr pos:start="219:41" pos:end="219:51"><expr pos:start="219:41" pos:end="219:51"><name pos:start="219:41" pos:end="219:41">s</name> <operator pos:start="219:43" pos:end="219:43">=</operator> <name pos:start="219:45" pos:end="219:51"><name pos:start="219:45" pos:end="219:45">s</name><operator pos:start="219:46" pos:end="219:47">-&gt;</operator><name pos:start="219:48" pos:end="219:51">next</name></name></expr></incr>)</control> <block pos:start="219:54" pos:end="227:17">{<block_content pos:start="221:21" pos:end="225:21">

                    <if_stmt pos:start="221:21" pos:end="225:21"><if pos:start="221:21" pos:end="225:21">if <condition pos:start="221:24" pos:end="221:61">(<expr pos:start="221:25" pos:end="221:60"><operator pos:start="221:25" pos:end="221:25">!</operator><call pos:start="221:26" pos:end="221:60"><name pos:start="221:26" pos:end="221:31">strcmp</name><argument_list pos:start="221:32" pos:end="221:60">(<argument pos:start="221:33" pos:end="221:46"><expr pos:start="221:33" pos:end="221:46"><name pos:start="221:33" pos:end="221:46"><name pos:start="221:33" pos:end="221:36">feed</name><operator pos:start="221:37" pos:end="221:38">-&gt;</operator><name pos:start="221:39" pos:end="221:46">filename</name></name></expr></argument>, <argument pos:start="221:49" pos:end="221:59"><expr pos:start="221:49" pos:end="221:59"><name pos:start="221:49" pos:end="221:59"><name pos:start="221:49" pos:end="221:49">s</name><operator pos:start="221:50" pos:end="221:51">-&gt;</operator><name pos:start="221:52" pos:end="221:59">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:63" pos:end="225:21">{<block_content pos:start="223:25" pos:end="223:77">

                        <expr_stmt pos:start="223:25" pos:end="223:77"><expr pos:start="223:25" pos:end="223:76"><call pos:start="223:25" pos:end="223:76"><name pos:start="223:25" pos:end="223:29">ERROR</name><argument_list pos:start="223:30" pos:end="223:76">(<argument pos:start="223:31" pos:end="223:62"><expr pos:start="223:31" pos:end="223:62"><literal type="string" pos:start="223:31" pos:end="223:62">"Feed '%s' already registered\n"</literal></expr></argument>, <argument pos:start="223:65" pos:end="223:75"><expr pos:start="223:65" pos:end="223:75"><name pos:start="223:65" pos:end="223:75"><name pos:start="223:65" pos:end="223:65">s</name><operator pos:start="223:66" pos:end="223:67">-&gt;</operator><name pos:start="223:68" pos:end="223:75">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="231:17" pos:end="231:63"><expr pos:start="231:17" pos:end="231:62"><name pos:start="231:17" pos:end="231:25"><name pos:start="231:17" pos:end="231:20">feed</name><operator pos:start="231:21" pos:end="231:22">-&gt;</operator><name pos:start="231:23" pos:end="231:25">fmt</name></name> <operator pos:start="231:27" pos:end="231:27">=</operator> <call pos:start="231:29" pos:end="231:62"><name pos:start="231:29" pos:end="231:43">av_guess_format</name><argument_list pos:start="231:44" pos:end="231:62">(<argument pos:start="231:45" pos:end="231:49"><expr pos:start="231:45" pos:end="231:49"><literal type="string" pos:start="231:45" pos:end="231:49">"ffm"</literal></expr></argument>, <argument pos:start="231:52" pos:end="231:55"><expr pos:start="231:52" pos:end="231:55"><name pos:start="231:52" pos:end="231:55">NULL</name></expr></argument>, <argument pos:start="231:58" pos:end="231:61"><expr pos:start="231:58" pos:end="231:61"><name pos:start="231:58" pos:end="231:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="233:17" pos:end="233:38">/* defaut feed file */</comment>

                <expr_stmt pos:start="235:17" pos:end="237:56"><expr pos:start="235:17" pos:end="237:55"><call pos:start="235:17" pos:end="237:55"><name pos:start="235:17" pos:end="235:24">snprintf</name><argument_list pos:start="235:25" pos:end="237:55">(<argument pos:start="235:26" pos:end="235:44"><expr pos:start="235:26" pos:end="235:44"><name pos:start="235:26" pos:end="235:44"><name pos:start="235:26" pos:end="235:29">feed</name><operator pos:start="235:30" pos:end="235:31">-&gt;</operator><name pos:start="235:32" pos:end="235:44">feed_filename</name></name></expr></argument>, <argument pos:start="235:47" pos:end="235:73"><expr pos:start="235:47" pos:end="235:73"><sizeof pos:start="235:47" pos:end="235:73">sizeof<argument_list pos:start="235:53" pos:end="235:73">(<argument pos:start="235:54" pos:end="235:72"><expr pos:start="235:54" pos:end="235:72"><name pos:start="235:54" pos:end="235:72"><name pos:start="235:54" pos:end="235:57">feed</name><operator pos:start="235:58" pos:end="235:59">-&gt;</operator><name pos:start="235:60" pos:end="235:72">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="237:26" pos:end="237:38"><expr pos:start="237:26" pos:end="237:38"><literal type="string" pos:start="237:26" pos:end="237:38">"/tmp/%s.ffm"</literal></expr></argument>, <argument pos:start="237:41" pos:end="237:54"><expr pos:start="237:41" pos:end="237:54"><name pos:start="237:41" pos:end="237:54"><name pos:start="237:41" pos:end="237:44">feed</name><operator pos:start="237:45" pos:end="237:46">-&gt;</operator><name pos:start="237:47" pos:end="237:54">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:54"><expr pos:start="239:17" pos:end="239:53"><name pos:start="239:17" pos:end="239:35"><name pos:start="239:17" pos:end="239:20">feed</name><operator pos:start="239:21" pos:end="239:22">-&gt;</operator><name pos:start="239:23" pos:end="239:35">feed_max_size</name></name> <operator pos:start="239:37" pos:end="239:37">=</operator> <literal type="number" pos:start="239:39" pos:end="239:39">5</literal> <operator pos:start="239:41" pos:end="239:41">*</operator> <literal type="number" pos:start="239:43" pos:end="239:46">1024</literal> <operator pos:start="239:48" pos:end="239:48">*</operator> <literal type="number" pos:start="239:50" pos:end="239:53">1024</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:34"><expr pos:start="241:17" pos:end="241:33"><name pos:start="241:17" pos:end="241:29"><name pos:start="241:17" pos:end="241:20">feed</name><operator pos:start="241:21" pos:end="241:22">-&gt;</operator><name pos:start="241:23" pos:end="241:29">is_feed</name></name> <operator pos:start="241:31" pos:end="241:31">=</operator> <literal type="number" pos:start="241:33" pos:end="241:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:34"><expr pos:start="243:17" pos:end="243:33"><name pos:start="243:17" pos:end="243:26"><name pos:start="243:17" pos:end="243:20">feed</name><operator pos:start="243:21" pos:end="243:22">-&gt;</operator><name pos:start="243:23" pos:end="243:26">feed</name></name> <operator pos:start="243:28" pos:end="243:28">=</operator> <name pos:start="243:30" pos:end="243:33">feed</name></expr>;</expr_stmt> <comment type="block" pos:start="243:36" pos:end="243:57">/* self feeding :-) */</comment>



                <comment type="block" pos:start="247:17" pos:end="247:40">/* add in stream list */</comment>

                <expr_stmt pos:start="249:17" pos:end="249:36"><expr pos:start="249:17" pos:end="249:35"><operator pos:start="249:17" pos:end="249:17">*</operator><name pos:start="249:18" pos:end="249:28">last_stream</name> <operator pos:start="249:30" pos:end="249:30">=</operator> <name pos:start="249:32" pos:end="249:35">feed</name></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:42"><expr pos:start="251:17" pos:end="251:41"><name pos:start="251:17" pos:end="251:27">last_stream</name> <operator pos:start="251:29" pos:end="251:29">=</operator> <operator pos:start="251:31" pos:end="251:31">&amp;</operator><name pos:start="251:32" pos:end="251:41"><name pos:start="251:32" pos:end="251:35">feed</name><operator pos:start="251:36" pos:end="251:37">-&gt;</operator><name pos:start="251:38" pos:end="251:41">next</name></name></expr>;</expr_stmt>

                <comment type="block" pos:start="253:17" pos:end="253:38">/* add in feed list */</comment>

                <expr_stmt pos:start="255:17" pos:end="255:34"><expr pos:start="255:17" pos:end="255:33"><operator pos:start="255:17" pos:end="255:17">*</operator><name pos:start="255:18" pos:end="255:26">last_feed</name> <operator pos:start="255:28" pos:end="255:28">=</operator> <name pos:start="255:30" pos:end="255:33">feed</name></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:45"><expr pos:start="257:17" pos:end="257:44"><name pos:start="257:17" pos:end="257:25">last_feed</name> <operator pos:start="257:27" pos:end="257:27">=</operator> <operator pos:start="257:29" pos:end="257:29">&amp;</operator><name pos:start="257:30" pos:end="257:44"><name pos:start="257:30" pos:end="257:33">feed</name><operator pos:start="257:34" pos:end="257:35">-&gt;</operator><name pos:start="257:36" pos:end="257:44">next_feed</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="261:11" pos:end="299:9">else if <condition pos:start="261:19" pos:end="261:49">(<expr pos:start="261:20" pos:end="261:48"><operator pos:start="261:20" pos:end="261:20">!</operator><call pos:start="261:21" pos:end="261:48"><name pos:start="261:21" pos:end="261:33">av_strcasecmp</name><argument_list pos:start="261:34" pos:end="261:48">(<argument pos:start="261:35" pos:end="261:37"><expr pos:start="261:35" pos:end="261:37"><name pos:start="261:35" pos:end="261:37">cmd</name></expr></argument>, <argument pos:start="261:40" pos:end="261:47"><expr pos:start="261:40" pos:end="261:47"><literal type="string" pos:start="261:40" pos:end="261:47">"Launch"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="261:51" pos:end="299:9">{<block_content pos:start="263:13" pos:end="297:13">

            <if_stmt pos:start="263:13" pos:end="297:13"><if pos:start="263:13" pos:end="297:13">if <condition pos:start="263:16" pos:end="263:21">(<expr pos:start="263:17" pos:end="263:20"><name pos:start="263:17" pos:end="263:20">feed</name></expr>)</condition> <block pos:start="263:23" pos:end="297:13">{<block_content pos:start="265:17" pos:end="295:66">

                <decl_stmt pos:start="265:17" pos:end="265:22"><decl pos:start="265:17" pos:end="265:21"><type pos:start="265:17" pos:end="265:19"><name pos:start="265:17" pos:end="265:19">int</name></type> <name pos:start="265:21" pos:end="265:21">i</name></decl>;</decl_stmt>



                <expr_stmt pos:start="269:17" pos:end="269:67"><expr pos:start="269:17" pos:end="269:66"><name pos:start="269:17" pos:end="269:32"><name pos:start="269:17" pos:end="269:20">feed</name><operator pos:start="269:21" pos:end="269:22">-&gt;</operator><name pos:start="269:23" pos:end="269:32">child_argv</name></name> <operator pos:start="269:34" pos:end="269:34">=</operator> <call pos:start="269:36" pos:end="269:66"><name pos:start="269:36" pos:end="269:45">av_mallocz</name><argument_list pos:start="269:46" pos:end="269:66">(<argument pos:start="269:47" pos:end="269:65"><expr pos:start="269:47" pos:end="269:65"><literal type="number" pos:start="269:47" pos:end="269:48">64</literal> <operator pos:start="269:50" pos:end="269:50">*</operator> <sizeof pos:start="269:52" pos:end="269:65">sizeof<argument_list pos:start="269:58" pos:end="269:65">(<argument pos:start="269:59" pos:end="269:64"><expr pos:start="269:59" pos:end="269:64"><name pos:start="269:59" pos:end="269:62">char</name> <operator pos:start="269:64" pos:end="269:64">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <for pos:start="273:17" pos:end="285:17">for <control pos:start="273:21" pos:end="273:40">(<init pos:start="273:22" pos:end="273:27"><expr pos:start="273:22" pos:end="273:26"><name pos:start="273:22" pos:end="273:22">i</name> <operator pos:start="273:24" pos:end="273:24">=</operator> <literal type="number" pos:start="273:26" pos:end="273:26">0</literal></expr>;</init> <condition pos:start="273:29" pos:end="273:35"><expr pos:start="273:29" pos:end="273:34"><name pos:start="273:29" pos:end="273:29">i</name> <operator pos:start="273:31" pos:end="273:31">&lt;</operator> <literal type="number" pos:start="273:33" pos:end="273:34">62</literal></expr>;</condition> <incr pos:start="273:37" pos:end="273:39"><expr pos:start="273:37" pos:end="273:39"><name pos:start="273:37" pos:end="273:37">i</name><operator pos:start="273:38" pos:end="273:39">++</operator></expr></incr>)</control> <block pos:start="273:42" pos:end="285:17">{<block_content pos:start="275:21" pos:end="283:57">

                    <expr_stmt pos:start="275:21" pos:end="275:50"><expr pos:start="275:21" pos:end="275:49"><call pos:start="275:21" pos:end="275:49"><name pos:start="275:21" pos:end="275:27">get_arg</name><argument_list pos:start="275:28" pos:end="275:49">(<argument pos:start="275:29" pos:end="275:31"><expr pos:start="275:29" pos:end="275:31"><name pos:start="275:29" pos:end="275:31">arg</name></expr></argument>, <argument pos:start="275:34" pos:end="275:44"><expr pos:start="275:34" pos:end="275:44"><sizeof pos:start="275:34" pos:end="275:44">sizeof<argument_list pos:start="275:40" pos:end="275:44">(<argument pos:start="275:41" pos:end="275:43"><expr pos:start="275:41" pos:end="275:43"><name pos:start="275:41" pos:end="275:43">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="275:47" pos:end="275:48"><expr pos:start="275:47" pos:end="275:48"><operator pos:start="275:47" pos:end="275:47">&amp;</operator><name pos:start="275:48" pos:end="275:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="277:21" pos:end="279:30"><if pos:start="277:21" pos:end="279:30">if <condition pos:start="277:24" pos:end="277:32">(<expr pos:start="277:25" pos:end="277:31"><operator pos:start="277:25" pos:end="277:25">!</operator><name pos:start="277:26" pos:end="277:31"><name pos:start="277:26" pos:end="277:28">arg</name><index pos:start="277:29" pos:end="277:31">[<expr pos:start="277:30" pos:end="277:30"><literal type="number" pos:start="277:30" pos:end="277:30">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="279:25" pos:end="279:30"><block_content pos:start="279:25" pos:end="279:30">

                        <break pos:start="279:25" pos:end="279:30">break;</break></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="283:21" pos:end="283:57"><expr pos:start="283:21" pos:end="283:56"><name pos:start="283:21" pos:end="283:39"><name pos:start="283:21" pos:end="283:24">feed</name><operator pos:start="283:25" pos:end="283:26">-&gt;</operator><name pos:start="283:27" pos:end="283:36">child_argv</name><index pos:start="283:37" pos:end="283:39">[<expr pos:start="283:38" pos:end="283:38"><name pos:start="283:38" pos:end="283:38">i</name></expr>]</index></name> <operator pos:start="283:41" pos:end="283:41">=</operator> <call pos:start="283:43" pos:end="283:56"><name pos:start="283:43" pos:end="283:51">av_strdup</name><argument_list pos:start="283:52" pos:end="283:56">(<argument pos:start="283:53" pos:end="283:55"><expr pos:start="283:53" pos:end="283:55"><name pos:start="283:53" pos:end="283:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="289:17" pos:end="295:66"><expr pos:start="289:17" pos:end="295:65"><name pos:start="289:17" pos:end="289:35"><name pos:start="289:17" pos:end="289:20">feed</name><operator pos:start="289:21" pos:end="289:22">-&gt;</operator><name pos:start="289:23" pos:end="289:32">child_argv</name><index pos:start="289:33" pos:end="289:35">[<expr pos:start="289:34" pos:end="289:34"><name pos:start="289:34" pos:end="289:34">i</name></expr>]</index></name> <operator pos:start="289:37" pos:end="289:37">=</operator> <call pos:start="289:39" pos:end="295:65"><name pos:start="289:39" pos:end="289:49">av_asprintf</name><argument_list pos:start="289:50" pos:end="295:65">(<argument pos:start="289:51" pos:end="289:67"><expr pos:start="289:51" pos:end="289:67"><literal type="string" pos:start="289:51" pos:end="289:67">"http://%s:%d/%s"</literal></expr></argument>,

                        <argument pos:start="291:25" pos:end="293:52"><expr pos:start="291:25" pos:end="293:52"><ternary pos:start="291:25" pos:end="293:52"><condition pos:start="291:25" pos:end="291:70"><expr pos:start="291:25" pos:end="291:68"><operator pos:start="291:25" pos:end="291:25">(</operator><name pos:start="291:26" pos:end="291:53"><name pos:start="291:26" pos:end="291:37">my_http_addr</name><operator pos:start="291:38" pos:end="291:38">.</operator><name pos:start="291:39" pos:end="291:46">sin_addr</name><operator pos:start="291:47" pos:end="291:47">.</operator><name pos:start="291:48" pos:end="291:53">s_addr</name></name> <operator pos:start="291:55" pos:end="291:56">==</operator> <name pos:start="291:58" pos:end="291:67">INADDR_ANY</name><operator pos:start="291:68" pos:end="291:68">)</operator></expr> ?</condition><then pos:start="291:72" pos:end="291:82"> <expr pos:start="291:72" pos:end="291:82"><literal type="string" pos:start="291:72" pos:end="291:82">"127.0.0.1"</literal></expr> </then><else pos:start="291:84" pos:end="293:52">:

                    <expr pos:start="293:21" pos:end="293:52"><call pos:start="293:21" pos:end="293:52"><name pos:start="293:21" pos:end="293:29">inet_ntoa</name><argument_list pos:start="293:30" pos:end="293:52">(<argument pos:start="293:31" pos:end="293:51"><expr pos:start="293:31" pos:end="293:51"><name pos:start="293:31" pos:end="293:51"><name pos:start="293:31" pos:end="293:42">my_http_addr</name><operator pos:start="293:43" pos:end="293:43">.</operator><name pos:start="293:44" pos:end="293:51">sin_addr</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

                    <argument pos:start="295:21" pos:end="295:48"><expr pos:start="295:21" pos:end="295:48"><call pos:start="295:21" pos:end="295:48"><name pos:start="295:21" pos:end="295:25">ntohs</name><argument_list pos:start="295:26" pos:end="295:48">(<argument pos:start="295:27" pos:end="295:47"><expr pos:start="295:27" pos:end="295:47"><name pos:start="295:27" pos:end="295:47"><name pos:start="295:27" pos:end="295:38">my_http_addr</name><operator pos:start="295:39" pos:end="295:39">.</operator><name pos:start="295:40" pos:end="295:47">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="295:51" pos:end="295:64"><expr pos:start="295:51" pos:end="295:64"><name pos:start="295:51" pos:end="295:64"><name pos:start="295:51" pos:end="295:54">feed</name><operator pos:start="295:55" pos:end="295:56">-&gt;</operator><name pos:start="295:57" pos:end="295:64">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="299:11" pos:end="313:9">else if <condition pos:start="299:19" pos:end="299:55">(<expr pos:start="299:20" pos:end="299:54"><operator pos:start="299:20" pos:end="299:20">!</operator><call pos:start="299:21" pos:end="299:54"><name pos:start="299:21" pos:end="299:33">av_strcasecmp</name><argument_list pos:start="299:34" pos:end="299:54">(<argument pos:start="299:35" pos:end="299:37"><expr pos:start="299:35" pos:end="299:37"><name pos:start="299:35" pos:end="299:37">cmd</name></expr></argument>, <argument pos:start="299:40" pos:end="299:53"><expr pos:start="299:40" pos:end="299:53"><literal type="string" pos:start="299:40" pos:end="299:53">"ReadOnlyFile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="299:57" pos:end="313:9">{<block_content pos:start="301:13" pos:end="311:13">

            <if_stmt pos:start="301:13" pos:end="311:13"><if pos:start="301:13" pos:end="307:13">if <condition pos:start="301:16" pos:end="301:21">(<expr pos:start="301:17" pos:end="301:20"><name pos:start="301:17" pos:end="301:20">feed</name></expr>)</condition> <block pos:start="301:23" pos:end="307:13">{<block_content pos:start="303:17" pos:end="305:35">

                <expr_stmt pos:start="303:17" pos:end="303:78"><expr pos:start="303:17" pos:end="303:77"><call pos:start="303:17" pos:end="303:77"><name pos:start="303:17" pos:end="303:23">get_arg</name><argument_list pos:start="303:24" pos:end="303:77">(<argument pos:start="303:25" pos:end="303:43"><expr pos:start="303:25" pos:end="303:43"><name pos:start="303:25" pos:end="303:43"><name pos:start="303:25" pos:end="303:28">feed</name><operator pos:start="303:29" pos:end="303:30">-&gt;</operator><name pos:start="303:31" pos:end="303:43">feed_filename</name></name></expr></argument>, <argument pos:start="303:46" pos:end="303:72"><expr pos:start="303:46" pos:end="303:72"><sizeof pos:start="303:46" pos:end="303:72">sizeof<argument_list pos:start="303:52" pos:end="303:72">(<argument pos:start="303:53" pos:end="303:71"><expr pos:start="303:53" pos:end="303:71"><name pos:start="303:53" pos:end="303:71"><name pos:start="303:53" pos:end="303:56">feed</name><operator pos:start="303:57" pos:end="303:58">-&gt;</operator><name pos:start="303:59" pos:end="303:71">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="303:75" pos:end="303:76"><expr pos:start="303:75" pos:end="303:76"><operator pos:start="303:75" pos:end="303:75">&amp;</operator><name pos:start="303:76" pos:end="303:76">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="305:17" pos:end="305:35"><expr pos:start="305:17" pos:end="305:34"><name pos:start="305:17" pos:end="305:30"><name pos:start="305:17" pos:end="305:20">feed</name><operator pos:start="305:21" pos:end="305:22">-&gt;</operator><name pos:start="305:23" pos:end="305:30">readonly</name></name> <operator pos:start="305:32" pos:end="305:32">=</operator> <literal type="number" pos:start="305:34" pos:end="305:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="307:15" pos:end="311:13">else if <condition pos:start="307:23" pos:end="307:30">(<expr pos:start="307:24" pos:end="307:29"><name pos:start="307:24" pos:end="307:29">stream</name></expr>)</condition> <block pos:start="307:32" pos:end="311:13">{<block_content pos:start="309:17" pos:end="309:82">

                <expr_stmt pos:start="309:17" pos:end="309:82"><expr pos:start="309:17" pos:end="309:81"><call pos:start="309:17" pos:end="309:81"><name pos:start="309:17" pos:end="309:23">get_arg</name><argument_list pos:start="309:24" pos:end="309:81">(<argument pos:start="309:25" pos:end="309:45"><expr pos:start="309:25" pos:end="309:45"><name pos:start="309:25" pos:end="309:45"><name pos:start="309:25" pos:end="309:30">stream</name><operator pos:start="309:31" pos:end="309:32">-&gt;</operator><name pos:start="309:33" pos:end="309:45">feed_filename</name></name></expr></argument>, <argument pos:start="309:48" pos:end="309:76"><expr pos:start="309:48" pos:end="309:76"><sizeof pos:start="309:48" pos:end="309:76">sizeof<argument_list pos:start="309:54" pos:end="309:76">(<argument pos:start="309:55" pos:end="309:75"><expr pos:start="309:55" pos:end="309:75"><name pos:start="309:55" pos:end="309:75"><name pos:start="309:55" pos:end="309:60">stream</name><operator pos:start="309:61" pos:end="309:62">-&gt;</operator><name pos:start="309:63" pos:end="309:75">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="309:79" pos:end="309:80"><expr pos:start="309:79" pos:end="309:80"><operator pos:start="309:79" pos:end="309:79">&amp;</operator><name pos:start="309:80" pos:end="309:80">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="313:11" pos:end="323:9">else if <condition pos:start="313:19" pos:end="313:47">(<expr pos:start="313:20" pos:end="313:46"><operator pos:start="313:20" pos:end="313:20">!</operator><call pos:start="313:21" pos:end="313:46"><name pos:start="313:21" pos:end="313:33">av_strcasecmp</name><argument_list pos:start="313:34" pos:end="313:46">(<argument pos:start="313:35" pos:end="313:37"><expr pos:start="313:35" pos:end="313:37"><name pos:start="313:35" pos:end="313:37">cmd</name></expr></argument>, <argument pos:start="313:40" pos:end="313:45"><expr pos:start="313:40" pos:end="313:45"><literal type="string" pos:start="313:40" pos:end="313:45">"File"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:49" pos:end="323:9">{<block_content pos:start="315:13" pos:end="321:82">

            <if_stmt pos:start="315:13" pos:end="321:82"><if pos:start="315:13" pos:end="319:13">if <condition pos:start="315:16" pos:end="315:21">(<expr pos:start="315:17" pos:end="315:20"><name pos:start="315:17" pos:end="315:20">feed</name></expr>)</condition> <block pos:start="315:23" pos:end="319:13">{<block_content pos:start="317:17" pos:end="317:78">

                <expr_stmt pos:start="317:17" pos:end="317:78"><expr pos:start="317:17" pos:end="317:77"><call pos:start="317:17" pos:end="317:77"><name pos:start="317:17" pos:end="317:23">get_arg</name><argument_list pos:start="317:24" pos:end="317:77">(<argument pos:start="317:25" pos:end="317:43"><expr pos:start="317:25" pos:end="317:43"><name pos:start="317:25" pos:end="317:43"><name pos:start="317:25" pos:end="317:28">feed</name><operator pos:start="317:29" pos:end="317:30">-&gt;</operator><name pos:start="317:31" pos:end="317:43">feed_filename</name></name></expr></argument>, <argument pos:start="317:46" pos:end="317:72"><expr pos:start="317:46" pos:end="317:72"><sizeof pos:start="317:46" pos:end="317:72">sizeof<argument_list pos:start="317:52" pos:end="317:72">(<argument pos:start="317:53" pos:end="317:71"><expr pos:start="317:53" pos:end="317:71"><name pos:start="317:53" pos:end="317:71"><name pos:start="317:53" pos:end="317:56">feed</name><operator pos:start="317:57" pos:end="317:58">-&gt;</operator><name pos:start="317:59" pos:end="317:71">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="317:75" pos:end="317:76"><expr pos:start="317:75" pos:end="317:76"><operator pos:start="317:75" pos:end="317:75">&amp;</operator><name pos:start="317:76" pos:end="317:76">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="319:15" pos:end="321:82">else if <condition pos:start="319:23" pos:end="319:30">(<expr pos:start="319:24" pos:end="319:29"><name pos:start="319:24" pos:end="319:29">stream</name></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:82"><block_content pos:start="321:17" pos:end="321:82">

                <expr_stmt pos:start="321:17" pos:end="321:82"><expr pos:start="321:17" pos:end="321:81"><call pos:start="321:17" pos:end="321:81"><name pos:start="321:17" pos:end="321:23">get_arg</name><argument_list pos:start="321:24" pos:end="321:81">(<argument pos:start="321:25" pos:end="321:45"><expr pos:start="321:25" pos:end="321:45"><name pos:start="321:25" pos:end="321:45"><name pos:start="321:25" pos:end="321:30">stream</name><operator pos:start="321:31" pos:end="321:32">-&gt;</operator><name pos:start="321:33" pos:end="321:45">feed_filename</name></name></expr></argument>, <argument pos:start="321:48" pos:end="321:76"><expr pos:start="321:48" pos:end="321:76"><sizeof pos:start="321:48" pos:end="321:76">sizeof<argument_list pos:start="321:54" pos:end="321:76">(<argument pos:start="321:55" pos:end="321:75"><expr pos:start="321:55" pos:end="321:75"><name pos:start="321:55" pos:end="321:75"><name pos:start="321:55" pos:end="321:60">stream</name><operator pos:start="321:61" pos:end="321:62">-&gt;</operator><name pos:start="321:63" pos:end="321:75">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="321:79" pos:end="321:80"><expr pos:start="321:79" pos:end="321:80"><operator pos:start="321:79" pos:end="321:79">&amp;</operator><name pos:start="321:80" pos:end="321:80">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="323:11" pos:end="333:9">else if <condition pos:start="323:19" pos:end="323:51">(<expr pos:start="323:20" pos:end="323:50"><operator pos:start="323:20" pos:end="323:20">!</operator><call pos:start="323:21" pos:end="323:50"><name pos:start="323:21" pos:end="323:33">av_strcasecmp</name><argument_list pos:start="323:34" pos:end="323:50">(<argument pos:start="323:35" pos:end="323:37"><expr pos:start="323:35" pos:end="323:37"><name pos:start="323:35" pos:end="323:37">cmd</name></expr></argument>, <argument pos:start="323:40" pos:end="323:49"><expr pos:start="323:40" pos:end="323:49"><literal type="string" pos:start="323:40" pos:end="323:49">"Truncate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="323:53" pos:end="333:9">{<block_content pos:start="325:13" pos:end="331:13">

            <if_stmt pos:start="325:13" pos:end="331:13"><if pos:start="325:13" pos:end="331:13">if <condition pos:start="325:16" pos:end="325:21">(<expr pos:start="325:17" pos:end="325:20"><name pos:start="325:17" pos:end="325:20">feed</name></expr>)</condition> <block pos:start="325:23" pos:end="331:13">{<block_content pos:start="327:17" pos:end="329:51">

                <expr_stmt pos:start="327:17" pos:end="327:46"><expr pos:start="327:17" pos:end="327:45"><call pos:start="327:17" pos:end="327:45"><name pos:start="327:17" pos:end="327:23">get_arg</name><argument_list pos:start="327:24" pos:end="327:45">(<argument pos:start="327:25" pos:end="327:27"><expr pos:start="327:25" pos:end="327:27"><name pos:start="327:25" pos:end="327:27">arg</name></expr></argument>, <argument pos:start="327:30" pos:end="327:40"><expr pos:start="327:30" pos:end="327:40"><sizeof pos:start="327:30" pos:end="327:40">sizeof<argument_list pos:start="327:36" pos:end="327:40">(<argument pos:start="327:37" pos:end="327:39"><expr pos:start="327:37" pos:end="327:39"><name pos:start="327:37" pos:end="327:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="327:43" pos:end="327:44"><expr pos:start="327:43" pos:end="327:44"><operator pos:start="327:43" pos:end="327:43">&amp;</operator><name pos:start="327:44" pos:end="327:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:51"><expr pos:start="329:17" pos:end="329:50"><name pos:start="329:17" pos:end="329:30"><name pos:start="329:17" pos:end="329:20">feed</name><operator pos:start="329:21" pos:end="329:22">-&gt;</operator><name pos:start="329:23" pos:end="329:30">truncate</name></name> <operator pos:start="329:32" pos:end="329:32">=</operator> <call pos:start="329:34" pos:end="329:50"><name pos:start="329:34" pos:end="329:39">strtod</name><argument_list pos:start="329:40" pos:end="329:50">(<argument pos:start="329:41" pos:end="329:43"><expr pos:start="329:41" pos:end="329:43"><name pos:start="329:41" pos:end="329:43">arg</name></expr></argument>, <argument pos:start="329:46" pos:end="329:49"><expr pos:start="329:46" pos:end="329:49"><name pos:start="329:46" pos:end="329:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="333:11" pos:end="381:9">else if <condition pos:start="333:19" pos:end="333:54">(<expr pos:start="333:20" pos:end="333:53"><operator pos:start="333:20" pos:end="333:20">!</operator><call pos:start="333:21" pos:end="333:53"><name pos:start="333:21" pos:end="333:33">av_strcasecmp</name><argument_list pos:start="333:34" pos:end="333:53">(<argument pos:start="333:35" pos:end="333:37"><expr pos:start="333:35" pos:end="333:37"><name pos:start="333:35" pos:end="333:37">cmd</name></expr></argument>, <argument pos:start="333:40" pos:end="333:52"><expr pos:start="333:40" pos:end="333:52"><literal type="string" pos:start="333:40" pos:end="333:52">"FileMaxSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="333:56" pos:end="381:9">{<block_content pos:start="335:13" pos:end="379:13">

            <if_stmt pos:start="335:13" pos:end="379:13"><if pos:start="335:13" pos:end="379:13">if <condition pos:start="335:16" pos:end="335:21">(<expr pos:start="335:17" pos:end="335:20"><name pos:start="335:17" pos:end="335:20">feed</name></expr>)</condition> <block pos:start="335:23" pos:end="379:13">{<block_content pos:start="337:17" pos:end="377:17">

                <decl_stmt pos:start="337:17" pos:end="337:25"><decl pos:start="337:17" pos:end="337:24"><type pos:start="337:17" pos:end="337:22"><name pos:start="337:17" pos:end="337:20">char</name> <modifier pos:start="337:22" pos:end="337:22">*</modifier></type><name pos:start="337:23" pos:end="337:24">p1</name></decl>;</decl_stmt>

                <decl_stmt pos:start="339:17" pos:end="339:29"><decl pos:start="339:17" pos:end="339:28"><type pos:start="339:17" pos:end="339:22"><name pos:start="339:17" pos:end="339:22">double</name></type> <name pos:start="339:24" pos:end="339:28">fsize</name></decl>;</decl_stmt>



                <expr_stmt pos:start="343:17" pos:end="343:46"><expr pos:start="343:17" pos:end="343:45"><call pos:start="343:17" pos:end="343:45"><name pos:start="343:17" pos:end="343:23">get_arg</name><argument_list pos:start="343:24" pos:end="343:45">(<argument pos:start="343:25" pos:end="343:27"><expr pos:start="343:25" pos:end="343:27"><name pos:start="343:25" pos:end="343:27">arg</name></expr></argument>, <argument pos:start="343:30" pos:end="343:40"><expr pos:start="343:30" pos:end="343:40"><sizeof pos:start="343:30" pos:end="343:40">sizeof<argument_list pos:start="343:36" pos:end="343:40">(<argument pos:start="343:37" pos:end="343:39"><expr pos:start="343:37" pos:end="343:39"><name pos:start="343:37" pos:end="343:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="343:43" pos:end="343:44"><expr pos:start="343:43" pos:end="343:44"><operator pos:start="343:43" pos:end="343:43">&amp;</operator><name pos:start="343:44" pos:end="343:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="345:25"><expr pos:start="345:17" pos:end="345:24"><name pos:start="345:17" pos:end="345:18">p1</name> <operator pos:start="345:20" pos:end="345:20">=</operator> <name pos:start="345:22" pos:end="345:24">arg</name></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:40"><expr pos:start="347:17" pos:end="347:39"><name pos:start="347:17" pos:end="347:21">fsize</name> <operator pos:start="347:23" pos:end="347:23">=</operator> <call pos:start="347:25" pos:end="347:39"><name pos:start="347:25" pos:end="347:30">strtod</name><argument_list pos:start="347:31" pos:end="347:39">(<argument pos:start="347:32" pos:end="347:33"><expr pos:start="347:32" pos:end="347:33"><name pos:start="347:32" pos:end="347:33">p1</name></expr></argument>, <argument pos:start="347:36" pos:end="347:38"><expr pos:start="347:36" pos:end="347:38"><operator pos:start="347:36" pos:end="347:36">&amp;</operator><name pos:start="347:37" pos:end="347:38">p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="349:17" pos:end="369:17">switch<condition pos:start="349:23" pos:end="349:39">(<expr pos:start="349:24" pos:end="349:38"><call pos:start="349:24" pos:end="349:38"><name pos:start="349:24" pos:end="349:33">av_toupper</name><argument_list pos:start="349:34" pos:end="349:38">(<argument pos:start="349:35" pos:end="349:37"><expr pos:start="349:35" pos:end="349:37"><operator pos:start="349:35" pos:end="349:35">*</operator><name pos:start="349:36" pos:end="349:37">p1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="349:41" pos:end="369:17">{<block_content pos:start="351:17" pos:end="367:26">

                <case pos:start="351:17" pos:end="351:25">case <expr pos:start="351:22" pos:end="351:24"><literal type="char" pos:start="351:22" pos:end="351:24">'K'</literal></expr>:</case>

                    <expr_stmt pos:start="353:21" pos:end="353:34"><expr pos:start="353:21" pos:end="353:33"><name pos:start="353:21" pos:end="353:25">fsize</name> <operator pos:start="353:27" pos:end="353:28">*=</operator> <literal type="number" pos:start="353:30" pos:end="353:33">1024</literal></expr>;</expr_stmt>

                    <break pos:start="355:21" pos:end="355:26">break;</break>

                <case pos:start="357:17" pos:end="357:25">case <expr pos:start="357:22" pos:end="357:24"><literal type="char" pos:start="357:22" pos:end="357:24">'M'</literal></expr>:</case>

                    <expr_stmt pos:start="359:21" pos:end="359:41"><expr pos:start="359:21" pos:end="359:40"><name pos:start="359:21" pos:end="359:25">fsize</name> <operator pos:start="359:27" pos:end="359:28">*=</operator> <literal type="number" pos:start="359:30" pos:end="359:33">1024</literal> <operator pos:start="359:35" pos:end="359:35">*</operator> <literal type="number" pos:start="359:37" pos:end="359:40">1024</literal></expr>;</expr_stmt>

                    <break pos:start="361:21" pos:end="361:26">break;</break>

                <case pos:start="363:17" pos:end="363:25">case <expr pos:start="363:22" pos:end="363:24"><literal type="char" pos:start="363:22" pos:end="363:24">'G'</literal></expr>:</case>

                    <expr_stmt pos:start="365:21" pos:end="365:48"><expr pos:start="365:21" pos:end="365:47"><name pos:start="365:21" pos:end="365:25">fsize</name> <operator pos:start="365:27" pos:end="365:28">*=</operator> <literal type="number" pos:start="365:30" pos:end="365:33">1024</literal> <operator pos:start="365:35" pos:end="365:35">*</operator> <literal type="number" pos:start="365:37" pos:end="365:40">1024</literal> <operator pos:start="365:42" pos:end="365:42">*</operator> <literal type="number" pos:start="365:44" pos:end="365:47">1024</literal></expr>;</expr_stmt>

                    <break pos:start="367:21" pos:end="367:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="371:17" pos:end="371:53"><expr pos:start="371:17" pos:end="371:52"><name pos:start="371:17" pos:end="371:35"><name pos:start="371:17" pos:end="371:20">feed</name><operator pos:start="371:21" pos:end="371:22">-&gt;</operator><name pos:start="371:23" pos:end="371:35">feed_max_size</name></name> <operator pos:start="371:37" pos:end="371:37">=</operator> <operator pos:start="371:39" pos:end="371:39">(</operator><name pos:start="371:40" pos:end="371:46">int64_t</name><operator pos:start="371:47" pos:end="371:47">)</operator><name pos:start="371:48" pos:end="371:52">fsize</name></expr>;</expr_stmt>

                <if_stmt pos:start="373:17" pos:end="377:17"><if pos:start="373:17" pos:end="377:17">if <condition pos:start="373:20" pos:end="373:60">(<expr pos:start="373:21" pos:end="373:59"><name pos:start="373:21" pos:end="373:39"><name pos:start="373:21" pos:end="373:24">feed</name><operator pos:start="373:25" pos:end="373:26">-&gt;</operator><name pos:start="373:27" pos:end="373:39">feed_max_size</name></name> <operator pos:start="373:41" pos:end="373:41">&lt;</operator> <name pos:start="373:43" pos:end="373:57">FFM_PACKET_SIZE</name><operator pos:start="373:58" pos:end="373:58">*</operator><literal type="number" pos:start="373:59" pos:end="373:59">4</literal></expr>)</condition> <block pos:start="373:62" pos:end="377:17">{<block_content pos:start="375:21" pos:end="375:103">

                    <expr_stmt pos:start="375:21" pos:end="375:103"><expr pos:start="375:21" pos:end="375:102"><call pos:start="375:21" pos:end="375:102"><name pos:start="375:21" pos:end="375:25">ERROR</name><argument_list pos:start="375:26" pos:end="375:102">(<argument pos:start="375:27" pos:end="375:82"><expr pos:start="375:27" pos:end="375:82"><literal type="string" pos:start="375:27" pos:end="375:82">"Feed max file size is too small, must be at least %d\n"</literal></expr></argument>, <argument pos:start="375:85" pos:end="375:101"><expr pos:start="375:85" pos:end="375:101"><name pos:start="375:85" pos:end="375:99">FFM_PACKET_SIZE</name><operator pos:start="375:100" pos:end="375:100">*</operator><literal type="number" pos:start="375:101" pos:end="375:101">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="381:11" pos:end="391:9">else if <condition pos:start="381:19" pos:end="381:50">(<expr pos:start="381:20" pos:end="381:49"><operator pos:start="381:20" pos:end="381:20">!</operator><call pos:start="381:21" pos:end="381:49"><name pos:start="381:21" pos:end="381:33">av_strcasecmp</name><argument_list pos:start="381:34" pos:end="381:49">(<argument pos:start="381:35" pos:end="381:37"><expr pos:start="381:35" pos:end="381:37"><name pos:start="381:35" pos:end="381:37">cmd</name></expr></argument>, <argument pos:start="381:40" pos:end="381:48"><expr pos:start="381:40" pos:end="381:48"><literal type="string" pos:start="381:40" pos:end="381:48">"&lt;/Feed&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="381:52" pos:end="391:9">{<block_content pos:start="383:13" pos:end="389:24">

            <if_stmt pos:start="383:13" pos:end="387:13"><if pos:start="383:13" pos:end="387:13">if <condition pos:start="383:16" pos:end="383:22">(<expr pos:start="383:17" pos:end="383:21"><operator pos:start="383:17" pos:end="383:17">!</operator><name pos:start="383:18" pos:end="383:21">feed</name></expr>)</condition> <block pos:start="383:24" pos:end="387:13">{<block_content pos:start="385:17" pos:end="385:63">

                <expr_stmt pos:start="385:17" pos:end="385:63"><expr pos:start="385:17" pos:end="385:62"><call pos:start="385:17" pos:end="385:62"><name pos:start="385:17" pos:end="385:21">ERROR</name><argument_list pos:start="385:22" pos:end="385:62">(<argument pos:start="385:23" pos:end="385:61"><expr pos:start="385:23" pos:end="385:61"><literal type="string" pos:start="385:23" pos:end="385:61">"No corresponding &lt;Feed&gt; for &lt;/Feed&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:24"><expr pos:start="389:13" pos:end="389:23"><name pos:start="389:13" pos:end="389:16">feed</name> <operator pos:start="389:18" pos:end="389:18">=</operator> <name pos:start="389:20" pos:end="389:23">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="391:11" pos:end="459:9">else if <condition pos:start="391:19" pos:end="391:50">(<expr pos:start="391:20" pos:end="391:49"><operator pos:start="391:20" pos:end="391:20">!</operator><call pos:start="391:21" pos:end="391:49"><name pos:start="391:21" pos:end="391:33">av_strcasecmp</name><argument_list pos:start="391:34" pos:end="391:49">(<argument pos:start="391:35" pos:end="391:37"><expr pos:start="391:35" pos:end="391:37"><name pos:start="391:35" pos:end="391:37">cmd</name></expr></argument>, <argument pos:start="391:40" pos:end="391:48"><expr pos:start="391:40" pos:end="391:48"><literal type="string" pos:start="391:40" pos:end="391:48">"&lt;Stream"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="391:52" pos:end="459:9">{<block_content pos:start="397:13" pos:end="457:13">

            <comment type="block" format="doxygen" pos:start="393:13" pos:end="393:59">/*********************************************/</comment>

            <comment type="block" pos:start="395:13" pos:end="395:40">/* Stream related options */</comment>

            <decl_stmt pos:start="397:13" pos:end="397:20"><decl pos:start="397:13" pos:end="397:19"><type pos:start="397:13" pos:end="397:18"><name pos:start="397:13" pos:end="397:16">char</name> <modifier pos:start="397:18" pos:end="397:18">*</modifier></type><name pos:start="397:19" pos:end="397:19">q</name></decl>;</decl_stmt>

            <if_stmt pos:start="399:13" pos:end="457:13"><if pos:start="399:13" pos:end="403:13">if <condition pos:start="399:16" pos:end="399:31">(<expr pos:start="399:17" pos:end="399:30"><name pos:start="399:17" pos:end="399:22">stream</name> <operator pos:start="399:24" pos:end="399:25">||</operator> <name pos:start="399:27" pos:end="399:30">feed</name></expr>)</condition> <block pos:start="399:33" pos:end="403:13">{<block_content pos:start="401:17" pos:end="401:44">

                <expr_stmt pos:start="401:17" pos:end="401:44"><expr pos:start="401:17" pos:end="401:43"><call pos:start="401:17" pos:end="401:43"><name pos:start="401:17" pos:end="401:21">ERROR</name><argument_list pos:start="401:22" pos:end="401:43">(<argument pos:start="401:23" pos:end="401:42"><expr pos:start="401:23" pos:end="401:42"><literal type="string" pos:start="401:23" pos:end="401:42">"Already in a tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="403:15" pos:end="457:13">else <block pos:start="403:20" pos:end="457:13">{<block_content pos:start="405:17" pos:end="455:44">

                <decl_stmt pos:start="405:17" pos:end="405:28"><decl pos:start="405:17" pos:end="405:27"><type pos:start="405:17" pos:end="405:26"><name pos:start="405:17" pos:end="405:24">FFStream</name> <modifier pos:start="405:26" pos:end="405:26">*</modifier></type><name pos:start="405:27" pos:end="405:27">s</name></decl>;</decl_stmt>

                <expr_stmt pos:start="407:17" pos:end="407:54"><expr pos:start="407:17" pos:end="407:53"><name pos:start="407:17" pos:end="407:22">stream</name> <operator pos:start="407:24" pos:end="407:24">=</operator> <call pos:start="407:26" pos:end="407:53"><name pos:start="407:26" pos:end="407:35">av_mallocz</name><argument_list pos:start="407:36" pos:end="407:53">(<argument pos:start="407:37" pos:end="407:52"><expr pos:start="407:37" pos:end="407:52"><sizeof pos:start="407:37" pos:end="407:52">sizeof<argument_list pos:start="407:43" pos:end="407:52">(<argument pos:start="407:44" pos:end="407:51"><expr pos:start="407:44" pos:end="407:51"><name pos:start="407:44" pos:end="407:51">FFStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:72"><expr pos:start="409:17" pos:end="409:71"><call pos:start="409:17" pos:end="409:71"><name pos:start="409:17" pos:end="409:23">get_arg</name><argument_list pos:start="409:24" pos:end="409:71">(<argument pos:start="409:25" pos:end="409:40"><expr pos:start="409:25" pos:end="409:40"><name pos:start="409:25" pos:end="409:40"><name pos:start="409:25" pos:end="409:30">stream</name><operator pos:start="409:31" pos:end="409:32">-&gt;</operator><name pos:start="409:33" pos:end="409:40">filename</name></name></expr></argument>, <argument pos:start="409:43" pos:end="409:66"><expr pos:start="409:43" pos:end="409:66"><sizeof pos:start="409:43" pos:end="409:66">sizeof<argument_list pos:start="409:49" pos:end="409:66">(<argument pos:start="409:50" pos:end="409:65"><expr pos:start="409:50" pos:end="409:65"><name pos:start="409:50" pos:end="409:65"><name pos:start="409:50" pos:end="409:55">stream</name><operator pos:start="409:56" pos:end="409:57">-&gt;</operator><name pos:start="409:58" pos:end="409:65">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="409:69" pos:end="409:70"><expr pos:start="409:69" pos:end="409:70"><operator pos:start="409:69" pos:end="409:69">&amp;</operator><name pos:start="409:70" pos:end="409:70">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="411:17" pos:end="411:51"><expr pos:start="411:17" pos:end="411:50"><name pos:start="411:17" pos:end="411:17">q</name> <operator pos:start="411:19" pos:end="411:19">=</operator> <call pos:start="411:21" pos:end="411:50"><name pos:start="411:21" pos:end="411:27">strrchr</name><argument_list pos:start="411:28" pos:end="411:50">(<argument pos:start="411:29" pos:end="411:44"><expr pos:start="411:29" pos:end="411:44"><name pos:start="411:29" pos:end="411:44"><name pos:start="411:29" pos:end="411:34">stream</name><operator pos:start="411:35" pos:end="411:36">-&gt;</operator><name pos:start="411:37" pos:end="411:44">filename</name></name></expr></argument>, <argument pos:start="411:47" pos:end="411:49"><expr pos:start="411:47" pos:end="411:49"><literal type="char" pos:start="411:47" pos:end="411:49">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="413:17" pos:end="415:30"><if pos:start="413:17" pos:end="415:30">if <condition pos:start="413:20" pos:end="413:22">(<expr pos:start="413:21" pos:end="413:21"><name pos:start="413:21" pos:end="413:21">q</name></expr>)</condition><block type="pseudo" pos:start="415:21" pos:end="415:30"><block_content pos:start="415:21" pos:end="415:30">

                    <expr_stmt pos:start="415:21" pos:end="415:30"><expr pos:start="415:21" pos:end="415:29"><operator pos:start="415:21" pos:end="415:21">*</operator><name pos:start="415:22" pos:end="415:22">q</name> <operator pos:start="415:24" pos:end="415:24">=</operator> <literal type="char" pos:start="415:26" pos:end="415:29">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <for pos:start="419:17" pos:end="427:17">for <control pos:start="419:21" pos:end="419:54">(<init pos:start="419:22" pos:end="419:38"><expr pos:start="419:22" pos:end="419:37"><name pos:start="419:22" pos:end="419:22">s</name> <operator pos:start="419:24" pos:end="419:24">=</operator> <name pos:start="419:26" pos:end="419:37">first_stream</name></expr>;</init> <condition pos:start="419:40" pos:end="419:41"><expr pos:start="419:40" pos:end="419:40"><name pos:start="419:40" pos:end="419:40">s</name></expr>;</condition> <incr pos:start="419:43" pos:end="419:53"><expr pos:start="419:43" pos:end="419:53"><name pos:start="419:43" pos:end="419:43">s</name> <operator pos:start="419:45" pos:end="419:45">=</operator> <name pos:start="419:47" pos:end="419:53"><name pos:start="419:47" pos:end="419:47">s</name><operator pos:start="419:48" pos:end="419:49">-&gt;</operator><name pos:start="419:50" pos:end="419:53">next</name></name></expr></incr>)</control> <block pos:start="419:56" pos:end="427:17">{<block_content pos:start="421:21" pos:end="425:21">

                    <if_stmt pos:start="421:21" pos:end="425:21"><if pos:start="421:21" pos:end="425:21">if <condition pos:start="421:24" pos:end="421:63">(<expr pos:start="421:25" pos:end="421:62"><operator pos:start="421:25" pos:end="421:25">!</operator><call pos:start="421:26" pos:end="421:62"><name pos:start="421:26" pos:end="421:31">strcmp</name><argument_list pos:start="421:32" pos:end="421:62">(<argument pos:start="421:33" pos:end="421:48"><expr pos:start="421:33" pos:end="421:48"><name pos:start="421:33" pos:end="421:48"><name pos:start="421:33" pos:end="421:38">stream</name><operator pos:start="421:39" pos:end="421:40">-&gt;</operator><name pos:start="421:41" pos:end="421:48">filename</name></name></expr></argument>, <argument pos:start="421:51" pos:end="421:61"><expr pos:start="421:51" pos:end="421:61"><name pos:start="421:51" pos:end="421:61"><name pos:start="421:51" pos:end="421:51">s</name><operator pos:start="421:52" pos:end="421:53">-&gt;</operator><name pos:start="421:54" pos:end="421:61">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="421:65" pos:end="425:21">{<block_content pos:start="423:25" pos:end="423:79">

                        <expr_stmt pos:start="423:25" pos:end="423:79"><expr pos:start="423:25" pos:end="423:78"><call pos:start="423:25" pos:end="423:78"><name pos:start="423:25" pos:end="423:29">ERROR</name><argument_list pos:start="423:30" pos:end="423:78">(<argument pos:start="423:31" pos:end="423:64"><expr pos:start="423:31" pos:end="423:64"><literal type="string" pos:start="423:31" pos:end="423:64">"Stream '%s' already registered\n"</literal></expr></argument>, <argument pos:start="423:67" pos:end="423:77"><expr pos:start="423:67" pos:end="423:77"><name pos:start="423:67" pos:end="423:77"><name pos:start="423:67" pos:end="423:67">s</name><operator pos:start="423:68" pos:end="423:69">-&gt;</operator><name pos:start="423:70" pos:end="423:77">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="431:17" pos:end="431:82"><expr pos:start="431:17" pos:end="431:81"><name pos:start="431:17" pos:end="431:27"><name pos:start="431:17" pos:end="431:22">stream</name><operator pos:start="431:23" pos:end="431:24">-&gt;</operator><name pos:start="431:25" pos:end="431:27">fmt</name></name> <operator pos:start="431:29" pos:end="431:29">=</operator> <call pos:start="431:31" pos:end="431:81"><name pos:start="431:31" pos:end="431:51">ffserver_guess_format</name><argument_list pos:start="431:52" pos:end="431:81">(<argument pos:start="431:53" pos:end="431:56"><expr pos:start="431:53" pos:end="431:56"><name pos:start="431:53" pos:end="431:56">NULL</name></expr></argument>, <argument pos:start="431:59" pos:end="431:74"><expr pos:start="431:59" pos:end="431:74"><name pos:start="431:59" pos:end="431:74"><name pos:start="431:59" pos:end="431:64">stream</name><operator pos:start="431:65" pos:end="431:66">-&gt;</operator><name pos:start="431:67" pos:end="431:74">filename</name></name></expr></argument>, <argument pos:start="431:77" pos:end="431:80"><expr pos:start="431:77" pos:end="431:80"><name pos:start="431:77" pos:end="431:80">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="433:17" pos:end="433:64"><expr pos:start="433:17" pos:end="433:63"><call pos:start="433:17" pos:end="433:63"><name pos:start="433:17" pos:end="433:45">avcodec_get_context_defaults3</name><argument_list pos:start="433:46" pos:end="433:63">(<argument pos:start="433:47" pos:end="433:56"><expr pos:start="433:47" pos:end="433:56"><operator pos:start="433:47" pos:end="433:47">&amp;</operator><name pos:start="433:48" pos:end="433:56">video_enc</name></expr></argument>, <argument pos:start="433:59" pos:end="433:62"><expr pos:start="433:59" pos:end="433:62"><name pos:start="433:59" pos:end="433:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="435:17" pos:end="435:64"><expr pos:start="435:17" pos:end="435:63"><call pos:start="435:17" pos:end="435:63"><name pos:start="435:17" pos:end="435:45">avcodec_get_context_defaults3</name><argument_list pos:start="435:46" pos:end="435:63">(<argument pos:start="435:47" pos:end="435:56"><expr pos:start="435:47" pos:end="435:56"><operator pos:start="435:47" pos:end="435:47">&amp;</operator><name pos:start="435:48" pos:end="435:56">audio_enc</name></expr></argument>, <argument pos:start="435:59" pos:end="435:62"><expr pos:start="435:59" pos:end="435:62"><name pos:start="435:59" pos:end="435:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="439:17" pos:end="439:44"><expr pos:start="439:17" pos:end="439:43"><name pos:start="439:17" pos:end="439:24">audio_id</name> <operator pos:start="439:26" pos:end="439:26">=</operator> <name pos:start="439:28" pos:end="439:43">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="441:17" pos:end="441:44"><expr pos:start="441:17" pos:end="441:43"><name pos:start="441:17" pos:end="441:24">video_id</name> <operator pos:start="441:26" pos:end="441:26">=</operator> <name pos:start="441:28" pos:end="441:43">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

                <if_stmt pos:start="443:17" pos:end="449:17"><if pos:start="443:17" pos:end="449:17">if <condition pos:start="443:20" pos:end="443:32">(<expr pos:start="443:21" pos:end="443:31"><name pos:start="443:21" pos:end="443:31"><name pos:start="443:21" pos:end="443:26">stream</name><operator pos:start="443:27" pos:end="443:28">-&gt;</operator><name pos:start="443:29" pos:end="443:31">fmt</name></name></expr>)</condition> <block pos:start="443:34" pos:end="449:17">{<block_content pos:start="445:21" pos:end="447:56">

                    <expr_stmt pos:start="445:21" pos:end="445:56"><expr pos:start="445:21" pos:end="445:55"><name pos:start="445:21" pos:end="445:28">audio_id</name> <operator pos:start="445:30" pos:end="445:30">=</operator> <name pos:start="445:32" pos:end="445:55"><name pos:start="445:32" pos:end="445:37">stream</name><operator pos:start="445:38" pos:end="445:39">-&gt;</operator><name pos:start="445:40" pos:end="445:42">fmt</name><operator pos:start="445:43" pos:end="445:44">-&gt;</operator><name pos:start="445:45" pos:end="445:55">audio_codec</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="447:21" pos:end="447:56"><expr pos:start="447:21" pos:end="447:55"><name pos:start="447:21" pos:end="447:28">video_id</name> <operator pos:start="447:30" pos:end="447:30">=</operator> <name pos:start="447:32" pos:end="447:55"><name pos:start="447:32" pos:end="447:37">stream</name><operator pos:start="447:38" pos:end="447:39">-&gt;</operator><name pos:start="447:40" pos:end="447:42">fmt</name><operator pos:start="447:43" pos:end="447:44">-&gt;</operator><name pos:start="447:45" pos:end="447:55">video_codec</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="453:17" pos:end="453:38"><expr pos:start="453:17" pos:end="453:37"><operator pos:start="453:17" pos:end="453:17">*</operator><name pos:start="453:18" pos:end="453:28">last_stream</name> <operator pos:start="453:30" pos:end="453:30">=</operator> <name pos:start="453:32" pos:end="453:37">stream</name></expr>;</expr_stmt>

                <expr_stmt pos:start="455:17" pos:end="455:44"><expr pos:start="455:17" pos:end="455:43"><name pos:start="455:17" pos:end="455:27">last_stream</name> <operator pos:start="455:29" pos:end="455:29">=</operator> <operator pos:start="455:31" pos:end="455:31">&amp;</operator><name pos:start="455:32" pos:end="455:43"><name pos:start="455:32" pos:end="455:37">stream</name><operator pos:start="455:38" pos:end="455:39">-&gt;</operator><name pos:start="455:40" pos:end="455:43">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="459:11" pos:end="491:9">else if <condition pos:start="459:19" pos:end="459:47">(<expr pos:start="459:20" pos:end="459:46"><operator pos:start="459:20" pos:end="459:20">!</operator><call pos:start="459:21" pos:end="459:46"><name pos:start="459:21" pos:end="459:33">av_strcasecmp</name><argument_list pos:start="459:34" pos:end="459:46">(<argument pos:start="459:35" pos:end="459:37"><expr pos:start="459:35" pos:end="459:37"><name pos:start="459:35" pos:end="459:37">cmd</name></expr></argument>, <argument pos:start="459:40" pos:end="459:45"><expr pos:start="459:40" pos:end="459:45"><literal type="string" pos:start="459:40" pos:end="459:45">"Feed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="459:49" pos:end="491:9">{<block_content pos:start="461:13" pos:end="489:13">

            <expr_stmt pos:start="461:13" pos:end="461:42"><expr pos:start="461:13" pos:end="461:41"><call pos:start="461:13" pos:end="461:41"><name pos:start="461:13" pos:end="461:19">get_arg</name><argument_list pos:start="461:20" pos:end="461:41">(<argument pos:start="461:21" pos:end="461:23"><expr pos:start="461:21" pos:end="461:23"><name pos:start="461:21" pos:end="461:23">arg</name></expr></argument>, <argument pos:start="461:26" pos:end="461:36"><expr pos:start="461:26" pos:end="461:36"><sizeof pos:start="461:26" pos:end="461:36">sizeof<argument_list pos:start="461:32" pos:end="461:36">(<argument pos:start="461:33" pos:end="461:35"><expr pos:start="461:33" pos:end="461:35"><name pos:start="461:33" pos:end="461:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="461:39" pos:end="461:40"><expr pos:start="461:39" pos:end="461:40"><operator pos:start="461:39" pos:end="461:39">&amp;</operator><name pos:start="461:40" pos:end="461:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="463:13" pos:end="489:13"><if pos:start="463:13" pos:end="489:13">if <condition pos:start="463:16" pos:end="463:23">(<expr pos:start="463:17" pos:end="463:22"><name pos:start="463:17" pos:end="463:22">stream</name></expr>)</condition> <block pos:start="463:25" pos:end="489:13">{<block_content pos:start="465:17" pos:end="487:41">

                <decl_stmt pos:start="465:17" pos:end="465:32"><decl pos:start="465:17" pos:end="465:31"><type pos:start="465:17" pos:end="465:26"><name pos:start="465:17" pos:end="465:24">FFStream</name> <modifier pos:start="465:26" pos:end="465:26">*</modifier></type><name pos:start="465:27" pos:end="465:31">sfeed</name></decl>;</decl_stmt>



                <expr_stmt pos:start="469:17" pos:end="469:35"><expr pos:start="469:17" pos:end="469:34"><name pos:start="469:17" pos:end="469:21">sfeed</name> <operator pos:start="469:23" pos:end="469:23">=</operator> <name pos:start="469:25" pos:end="469:34">first_feed</name></expr>;</expr_stmt>

                <while pos:start="471:17" pos:end="479:17">while <condition pos:start="471:23" pos:end="471:37">(<expr pos:start="471:24" pos:end="471:36"><name pos:start="471:24" pos:end="471:28">sfeed</name> <operator pos:start="471:30" pos:end="471:31">!=</operator> <name pos:start="471:33" pos:end="471:36">NULL</name></expr>)</condition> <block pos:start="471:39" pos:end="479:17">{<block_content pos:start="473:21" pos:end="477:45">

                    <if_stmt pos:start="473:21" pos:end="475:30"><if pos:start="473:21" pos:end="475:30">if <condition pos:start="473:24" pos:end="473:54">(<expr pos:start="473:25" pos:end="473:53"><operator pos:start="473:25" pos:end="473:25">!</operator><call pos:start="473:26" pos:end="473:53"><name pos:start="473:26" pos:end="473:31">strcmp</name><argument_list pos:start="473:32" pos:end="473:53">(<argument pos:start="473:33" pos:end="473:47"><expr pos:start="473:33" pos:end="473:47"><name pos:start="473:33" pos:end="473:47"><name pos:start="473:33" pos:end="473:37">sfeed</name><operator pos:start="473:38" pos:end="473:39">-&gt;</operator><name pos:start="473:40" pos:end="473:47">filename</name></name></expr></argument>, <argument pos:start="473:50" pos:end="473:52"><expr pos:start="473:50" pos:end="473:52"><name pos:start="473:50" pos:end="473:52">arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="475:25" pos:end="475:30"><block_content pos:start="475:25" pos:end="475:30">

                        <break pos:start="475:25" pos:end="475:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="477:21" pos:end="477:45"><expr pos:start="477:21" pos:end="477:44"><name pos:start="477:21" pos:end="477:25">sfeed</name> <operator pos:start="477:27" pos:end="477:27">=</operator> <name pos:start="477:29" pos:end="477:44"><name pos:start="477:29" pos:end="477:33">sfeed</name><operator pos:start="477:34" pos:end="477:35">-&gt;</operator><name pos:start="477:36" pos:end="477:44">next_feed</name></name></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="481:17" pos:end="487:41"><if pos:start="481:17" pos:end="483:58">if <condition pos:start="481:20" pos:end="481:27">(<expr pos:start="481:21" pos:end="481:26"><operator pos:start="481:21" pos:end="481:21">!</operator><name pos:start="481:22" pos:end="481:26">sfeed</name></expr>)</condition><block type="pseudo" pos:start="483:21" pos:end="483:58"><block_content pos:start="483:21" pos:end="483:58">

                    <expr_stmt pos:start="483:21" pos:end="483:58"><expr pos:start="483:21" pos:end="483:57"><call pos:start="483:21" pos:end="483:57"><name pos:start="483:21" pos:end="483:25">ERROR</name><argument_list pos:start="483:26" pos:end="483:57">(<argument pos:start="483:27" pos:end="483:51"><expr pos:start="483:27" pos:end="483:51"><literal type="string" pos:start="483:27" pos:end="483:51">"feed '%s' not defined\n"</literal></expr></argument>, <argument pos:start="483:54" pos:end="483:56"><expr pos:start="483:54" pos:end="483:56"><name pos:start="483:54" pos:end="483:56">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="485:17" pos:end="487:41">else<block type="pseudo" pos:start="487:21" pos:end="487:41"><block_content pos:start="487:21" pos:end="487:41">

                    <expr_stmt pos:start="487:21" pos:end="487:41"><expr pos:start="487:21" pos:end="487:40"><name pos:start="487:21" pos:end="487:32"><name pos:start="487:21" pos:end="487:26">stream</name><operator pos:start="487:27" pos:end="487:28">-&gt;</operator><name pos:start="487:29" pos:end="487:32">feed</name></name> <operator pos:start="487:34" pos:end="487:34">=</operator> <name pos:start="487:36" pos:end="487:40">sfeed</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="491:11" pos:end="533:9">else if <condition pos:start="491:19" pos:end="491:49">(<expr pos:start="491:20" pos:end="491:48"><operator pos:start="491:20" pos:end="491:20">!</operator><call pos:start="491:21" pos:end="491:48"><name pos:start="491:21" pos:end="491:33">av_strcasecmp</name><argument_list pos:start="491:34" pos:end="491:48">(<argument pos:start="491:35" pos:end="491:37"><expr pos:start="491:35" pos:end="491:37"><name pos:start="491:35" pos:end="491:37">cmd</name></expr></argument>, <argument pos:start="491:40" pos:end="491:47"><expr pos:start="491:40" pos:end="491:47"><literal type="string" pos:start="491:40" pos:end="491:47">"Format"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="491:51" pos:end="533:9">{<block_content pos:start="493:13" pos:end="531:13">

            <expr_stmt pos:start="493:13" pos:end="493:42"><expr pos:start="493:13" pos:end="493:41"><call pos:start="493:13" pos:end="493:41"><name pos:start="493:13" pos:end="493:19">get_arg</name><argument_list pos:start="493:20" pos:end="493:41">(<argument pos:start="493:21" pos:end="493:23"><expr pos:start="493:21" pos:end="493:23"><name pos:start="493:21" pos:end="493:23">arg</name></expr></argument>, <argument pos:start="493:26" pos:end="493:36"><expr pos:start="493:26" pos:end="493:36"><sizeof pos:start="493:26" pos:end="493:36">sizeof<argument_list pos:start="493:32" pos:end="493:36">(<argument pos:start="493:33" pos:end="493:35"><expr pos:start="493:33" pos:end="493:35"><name pos:start="493:33" pos:end="493:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="493:39" pos:end="493:40"><expr pos:start="493:39" pos:end="493:40"><operator pos:start="493:39" pos:end="493:39">&amp;</operator><name pos:start="493:40" pos:end="493:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="495:13" pos:end="531:13"><if pos:start="495:13" pos:end="531:13">if <condition pos:start="495:16" pos:end="495:23">(<expr pos:start="495:17" pos:end="495:22"><name pos:start="495:17" pos:end="495:22">stream</name></expr>)</condition> <block pos:start="495:25" pos:end="531:13">{<block_content pos:start="497:17" pos:end="529:17">

                <if_stmt pos:start="497:17" pos:end="521:17"><if pos:start="497:17" pos:end="503:17">if <condition pos:start="497:20" pos:end="497:43">(<expr pos:start="497:21" pos:end="497:42"><operator pos:start="497:21" pos:end="497:21">!</operator><call pos:start="497:22" pos:end="497:42"><name pos:start="497:22" pos:end="497:27">strcmp</name><argument_list pos:start="497:28" pos:end="497:42">(<argument pos:start="497:29" pos:end="497:31"><expr pos:start="497:29" pos:end="497:31"><name pos:start="497:29" pos:end="497:31">arg</name></expr></argument>, <argument pos:start="497:34" pos:end="497:41"><expr pos:start="497:34" pos:end="497:41"><literal type="string" pos:start="497:34" pos:end="497:41">"status"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="497:45" pos:end="503:17">{<block_content pos:start="499:21" pos:end="501:39">

                    <expr_stmt pos:start="499:21" pos:end="499:61"><expr pos:start="499:21" pos:end="499:60"><name pos:start="499:21" pos:end="499:39"><name pos:start="499:21" pos:end="499:26">stream</name><operator pos:start="499:27" pos:end="499:28">-&gt;</operator><name pos:start="499:29" pos:end="499:39">stream_type</name></name> <operator pos:start="499:41" pos:end="499:41">=</operator> <name pos:start="499:43" pos:end="499:60">STREAM_TYPE_STATUS</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="501:21" pos:end="501:39"><expr pos:start="501:21" pos:end="501:38"><name pos:start="501:21" pos:end="501:31"><name pos:start="501:21" pos:end="501:26">stream</name><operator pos:start="501:27" pos:end="501:28">-&gt;</operator><name pos:start="501:29" pos:end="501:31">fmt</name></name> <operator pos:start="501:33" pos:end="501:33">=</operator> <name pos:start="501:35" pos:end="501:38">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="503:19" pos:end="521:17">else <block pos:start="503:24" pos:end="521:17">{<block_content pos:start="505:21" pos:end="519:21">

                    <expr_stmt pos:start="505:21" pos:end="505:59"><expr pos:start="505:21" pos:end="505:58"><name pos:start="505:21" pos:end="505:39"><name pos:start="505:21" pos:end="505:26">stream</name><operator pos:start="505:27" pos:end="505:28">-&gt;</operator><name pos:start="505:29" pos:end="505:39">stream_type</name></name> <operator pos:start="505:41" pos:end="505:41">=</operator> <name pos:start="505:43" pos:end="505:58">STREAM_TYPE_LIVE</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="507:21" pos:end="507:76">/* jpeg cannot be used here, so use single frame jpeg */</comment>

                    <if_stmt pos:start="509:21" pos:end="511:45"><if pos:start="509:21" pos:end="511:45">if <condition pos:start="509:24" pos:end="509:45">(<expr pos:start="509:25" pos:end="509:44"><operator pos:start="509:25" pos:end="509:25">!</operator><call pos:start="509:26" pos:end="509:44"><name pos:start="509:26" pos:end="509:31">strcmp</name><argument_list pos:start="509:32" pos:end="509:44">(<argument pos:start="509:33" pos:end="509:35"><expr pos:start="509:33" pos:end="509:35"><name pos:start="509:33" pos:end="509:35">arg</name></expr></argument>, <argument pos:start="509:38" pos:end="509:43"><expr pos:start="509:38" pos:end="509:43"><literal type="string" pos:start="509:38" pos:end="509:43">"jpeg"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="511:25" pos:end="511:45"><block_content pos:start="511:25" pos:end="511:45">

                        <expr_stmt pos:start="511:25" pos:end="511:45"><expr pos:start="511:25" pos:end="511:44"><call pos:start="511:25" pos:end="511:44"><name pos:start="511:25" pos:end="511:30">strcpy</name><argument_list pos:start="511:31" pos:end="511:44">(<argument pos:start="511:32" pos:end="511:34"><expr pos:start="511:32" pos:end="511:34"><name pos:start="511:32" pos:end="511:34">arg</name></expr></argument>, <argument pos:start="511:37" pos:end="511:43"><expr pos:start="511:37" pos:end="511:43"><literal type="string" pos:start="511:37" pos:end="511:43">"mjpeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="513:21" pos:end="513:73"><expr pos:start="513:21" pos:end="513:72"><name pos:start="513:21" pos:end="513:31"><name pos:start="513:21" pos:end="513:26">stream</name><operator pos:start="513:27" pos:end="513:28">-&gt;</operator><name pos:start="513:29" pos:end="513:31">fmt</name></name> <operator pos:start="513:33" pos:end="513:33">=</operator> <call pos:start="513:35" pos:end="513:72"><name pos:start="513:35" pos:end="513:55">ffserver_guess_format</name><argument_list pos:start="513:56" pos:end="513:72">(<argument pos:start="513:57" pos:end="513:59"><expr pos:start="513:57" pos:end="513:59"><name pos:start="513:57" pos:end="513:59">arg</name></expr></argument>, <argument pos:start="513:62" pos:end="513:65"><expr pos:start="513:62" pos:end="513:65"><name pos:start="513:62" pos:end="513:65">NULL</name></expr></argument>, <argument pos:start="513:68" pos:end="513:71"><expr pos:start="513:68" pos:end="513:71"><name pos:start="513:68" pos:end="513:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="515:21" pos:end="519:21"><if pos:start="515:21" pos:end="519:21">if <condition pos:start="515:24" pos:end="515:37">(<expr pos:start="515:25" pos:end="515:36"><operator pos:start="515:25" pos:end="515:25">!</operator><name pos:start="515:26" pos:end="515:36"><name pos:start="515:26" pos:end="515:31">stream</name><operator pos:start="515:32" pos:end="515:33">-&gt;</operator><name pos:start="515:34" pos:end="515:36">fmt</name></name></expr>)</condition> <block pos:start="515:39" pos:end="519:21">{<block_content pos:start="517:25" pos:end="517:59">

                        <expr_stmt pos:start="517:25" pos:end="517:59"><expr pos:start="517:25" pos:end="517:58"><call pos:start="517:25" pos:end="517:58"><name pos:start="517:25" pos:end="517:29">ERROR</name><argument_list pos:start="517:30" pos:end="517:58">(<argument pos:start="517:31" pos:end="517:52"><expr pos:start="517:31" pos:end="517:52"><literal type="string" pos:start="517:31" pos:end="517:52">"Unknown Format: %s\n"</literal></expr></argument>, <argument pos:start="517:55" pos:end="517:57"><expr pos:start="517:55" pos:end="517:57"><name pos:start="517:55" pos:end="517:57">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="523:17" pos:end="529:17"><if pos:start="523:17" pos:end="529:17">if <condition pos:start="523:20" pos:end="523:32">(<expr pos:start="523:21" pos:end="523:31"><name pos:start="523:21" pos:end="523:31"><name pos:start="523:21" pos:end="523:26">stream</name><operator pos:start="523:27" pos:end="523:28">-&gt;</operator><name pos:start="523:29" pos:end="523:31">fmt</name></name></expr>)</condition> <block pos:start="523:34" pos:end="529:17">{<block_content pos:start="525:21" pos:end="527:56">

                    <expr_stmt pos:start="525:21" pos:end="525:56"><expr pos:start="525:21" pos:end="525:55"><name pos:start="525:21" pos:end="525:28">audio_id</name> <operator pos:start="525:30" pos:end="525:30">=</operator> <name pos:start="525:32" pos:end="525:55"><name pos:start="525:32" pos:end="525:37">stream</name><operator pos:start="525:38" pos:end="525:39">-&gt;</operator><name pos:start="525:40" pos:end="525:42">fmt</name><operator pos:start="525:43" pos:end="525:44">-&gt;</operator><name pos:start="525:45" pos:end="525:55">audio_codec</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="527:21" pos:end="527:56"><expr pos:start="527:21" pos:end="527:55"><name pos:start="527:21" pos:end="527:28">video_id</name> <operator pos:start="527:30" pos:end="527:30">=</operator> <name pos:start="527:32" pos:end="527:55"><name pos:start="527:32" pos:end="527:37">stream</name><operator pos:start="527:38" pos:end="527:39">-&gt;</operator><name pos:start="527:40" pos:end="527:42">fmt</name><operator pos:start="527:43" pos:end="527:44">-&gt;</operator><name pos:start="527:45" pos:end="527:55">video_codec</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="533:11" pos:end="549:9">else if <condition pos:start="533:19" pos:end="533:54">(<expr pos:start="533:20" pos:end="533:53"><operator pos:start="533:20" pos:end="533:20">!</operator><call pos:start="533:21" pos:end="533:53"><name pos:start="533:21" pos:end="533:33">av_strcasecmp</name><argument_list pos:start="533:34" pos:end="533:53">(<argument pos:start="533:35" pos:end="533:37"><expr pos:start="533:35" pos:end="533:37"><name pos:start="533:35" pos:end="533:37">cmd</name></expr></argument>, <argument pos:start="533:40" pos:end="533:52"><expr pos:start="533:40" pos:end="533:52"><literal type="string" pos:start="533:40" pos:end="533:52">"InputFormat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="533:56" pos:end="549:9">{<block_content pos:start="535:13" pos:end="547:13">

            <expr_stmt pos:start="535:13" pos:end="535:42"><expr pos:start="535:13" pos:end="535:41"><call pos:start="535:13" pos:end="535:41"><name pos:start="535:13" pos:end="535:19">get_arg</name><argument_list pos:start="535:20" pos:end="535:41">(<argument pos:start="535:21" pos:end="535:23"><expr pos:start="535:21" pos:end="535:23"><name pos:start="535:21" pos:end="535:23">arg</name></expr></argument>, <argument pos:start="535:26" pos:end="535:36"><expr pos:start="535:26" pos:end="535:36"><sizeof pos:start="535:26" pos:end="535:36">sizeof<argument_list pos:start="535:32" pos:end="535:36">(<argument pos:start="535:33" pos:end="535:35"><expr pos:start="535:33" pos:end="535:35"><name pos:start="535:33" pos:end="535:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="535:39" pos:end="535:40"><expr pos:start="535:39" pos:end="535:40"><operator pos:start="535:39" pos:end="535:39">&amp;</operator><name pos:start="535:40" pos:end="535:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="537:13" pos:end="547:13"><if pos:start="537:13" pos:end="547:13">if <condition pos:start="537:16" pos:end="537:23">(<expr pos:start="537:17" pos:end="537:22"><name pos:start="537:17" pos:end="537:22">stream</name></expr>)</condition> <block pos:start="537:25" pos:end="547:13">{<block_content pos:start="539:17" pos:end="545:17">

                <expr_stmt pos:start="539:17" pos:end="539:57"><expr pos:start="539:17" pos:end="539:56"><name pos:start="539:17" pos:end="539:28"><name pos:start="539:17" pos:end="539:22">stream</name><operator pos:start="539:23" pos:end="539:24">-&gt;</operator><name pos:start="539:25" pos:end="539:28">ifmt</name></name> <operator pos:start="539:30" pos:end="539:30">=</operator> <call pos:start="539:32" pos:end="539:56"><name pos:start="539:32" pos:end="539:51">av_find_input_format</name><argument_list pos:start="539:52" pos:end="539:56">(<argument pos:start="539:53" pos:end="539:55"><expr pos:start="539:53" pos:end="539:55"><name pos:start="539:53" pos:end="539:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="541:17" pos:end="545:17"><if pos:start="541:17" pos:end="545:17">if <condition pos:start="541:20" pos:end="541:34">(<expr pos:start="541:21" pos:end="541:33"><operator pos:start="541:21" pos:end="541:21">!</operator><name pos:start="541:22" pos:end="541:33"><name pos:start="541:22" pos:end="541:27">stream</name><operator pos:start="541:28" pos:end="541:29">-&gt;</operator><name pos:start="541:30" pos:end="541:33">ifmt</name></name></expr>)</condition> <block pos:start="541:36" pos:end="545:17">{<block_content pos:start="543:21" pos:end="543:61">

                    <expr_stmt pos:start="543:21" pos:end="543:61"><expr pos:start="543:21" pos:end="543:60"><call pos:start="543:21" pos:end="543:60"><name pos:start="543:21" pos:end="543:25">ERROR</name><argument_list pos:start="543:26" pos:end="543:60">(<argument pos:start="543:27" pos:end="543:54"><expr pos:start="543:27" pos:end="543:54"><literal type="string" pos:start="543:27" pos:end="543:54">"Unknown input format: %s\n"</literal></expr></argument>, <argument pos:start="543:57" pos:end="543:59"><expr pos:start="543:57" pos:end="543:59"><name pos:start="543:57" pos:end="543:59">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="549:11" pos:end="561:9">else if <condition pos:start="549:19" pos:end="549:53">(<expr pos:start="549:20" pos:end="549:52"><operator pos:start="549:20" pos:end="549:20">!</operator><call pos:start="549:21" pos:end="549:52"><name pos:start="549:21" pos:end="549:33">av_strcasecmp</name><argument_list pos:start="549:34" pos:end="549:52">(<argument pos:start="549:35" pos:end="549:37"><expr pos:start="549:35" pos:end="549:37"><name pos:start="549:35" pos:end="549:37">cmd</name></expr></argument>, <argument pos:start="549:40" pos:end="549:51"><expr pos:start="549:40" pos:end="549:51"><literal type="string" pos:start="549:40" pos:end="549:51">"FaviconURL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="549:55" pos:end="561:9">{<block_content pos:start="551:13" pos:end="559:13">

            <if_stmt pos:start="551:13" pos:end="559:13"><if pos:start="551:13" pos:end="555:13">if <condition pos:start="551:16" pos:end="551:68">(<expr pos:start="551:17" pos:end="551:67"><name pos:start="551:17" pos:end="551:22">stream</name> <operator pos:start="551:24" pos:end="551:25">&amp;&amp;</operator> <name pos:start="551:27" pos:end="551:45"><name pos:start="551:27" pos:end="551:32">stream</name><operator pos:start="551:33" pos:end="551:34">-&gt;</operator><name pos:start="551:35" pos:end="551:45">stream_type</name></name> <operator pos:start="551:47" pos:end="551:48">==</operator> <name pos:start="551:50" pos:end="551:67">STREAM_TYPE_STATUS</name></expr>)</condition> <block pos:start="551:70" pos:end="555:13">{<block_content pos:start="553:17" pos:end="553:82">

                <expr_stmt pos:start="553:17" pos:end="553:82"><expr pos:start="553:17" pos:end="553:81"><call pos:start="553:17" pos:end="553:81"><name pos:start="553:17" pos:end="553:23">get_arg</name><argument_list pos:start="553:24" pos:end="553:81">(<argument pos:start="553:25" pos:end="553:45"><expr pos:start="553:25" pos:end="553:45"><name pos:start="553:25" pos:end="553:45"><name pos:start="553:25" pos:end="553:30">stream</name><operator pos:start="553:31" pos:end="553:32">-&gt;</operator><name pos:start="553:33" pos:end="553:45">feed_filename</name></name></expr></argument>, <argument pos:start="553:48" pos:end="553:76"><expr pos:start="553:48" pos:end="553:76"><sizeof pos:start="553:48" pos:end="553:76">sizeof<argument_list pos:start="553:54" pos:end="553:76">(<argument pos:start="553:55" pos:end="553:75"><expr pos:start="553:55" pos:end="553:75"><name pos:start="553:55" pos:end="553:75"><name pos:start="553:55" pos:end="553:60">stream</name><operator pos:start="553:61" pos:end="553:62">-&gt;</operator><name pos:start="553:63" pos:end="553:75">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="553:79" pos:end="553:80"><expr pos:start="553:79" pos:end="553:80"><operator pos:start="553:79" pos:end="553:79">&amp;</operator><name pos:start="553:80" pos:end="553:80">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="555:15" pos:end="559:13">else <block pos:start="555:20" pos:end="559:13">{<block_content pos:start="557:17" pos:end="557:72">

                <expr_stmt pos:start="557:17" pos:end="557:72"><expr pos:start="557:17" pos:end="557:71"><call pos:start="557:17" pos:end="557:71"><name pos:start="557:17" pos:end="557:21">ERROR</name><argument_list pos:start="557:22" pos:end="557:71">(<argument pos:start="557:23" pos:end="557:70"><expr pos:start="557:23" pos:end="557:70"><literal type="string" pos:start="557:23" pos:end="557:70">"FaviconURL only permitted for status streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="561:11" pos:end="567:9">else if <condition pos:start="561:19" pos:end="561:49">(<expr pos:start="561:20" pos:end="561:48"><operator pos:start="561:20" pos:end="561:20">!</operator><call pos:start="561:21" pos:end="561:48"><name pos:start="561:21" pos:end="561:33">av_strcasecmp</name><argument_list pos:start="561:34" pos:end="561:48">(<argument pos:start="561:35" pos:end="561:37"><expr pos:start="561:35" pos:end="561:37"><name pos:start="561:35" pos:end="561:37">cmd</name></expr></argument>, <argument pos:start="561:40" pos:end="561:47"><expr pos:start="561:40" pos:end="561:47"><literal type="string" pos:start="561:40" pos:end="561:47">"Author"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="561:51" pos:end="567:9">{<block_content pos:start="563:13" pos:end="565:68">

            <if_stmt pos:start="563:13" pos:end="565:68"><if pos:start="563:13" pos:end="565:68">if <condition pos:start="563:16" pos:end="563:23">(<expr pos:start="563:17" pos:end="563:22"><name pos:start="563:17" pos:end="563:22">stream</name></expr>)</condition><block type="pseudo" pos:start="565:17" pos:end="565:68"><block_content pos:start="565:17" pos:end="565:68">

                <expr_stmt pos:start="565:17" pos:end="565:68"><expr pos:start="565:17" pos:end="565:67"><call pos:start="565:17" pos:end="565:67"><name pos:start="565:17" pos:end="565:23">get_arg</name><argument_list pos:start="565:24" pos:end="565:67">(<argument pos:start="565:25" pos:end="565:38"><expr pos:start="565:25" pos:end="565:38"><name pos:start="565:25" pos:end="565:38"><name pos:start="565:25" pos:end="565:30">stream</name><operator pos:start="565:31" pos:end="565:32">-&gt;</operator><name pos:start="565:33" pos:end="565:38">author</name></name></expr></argument>, <argument pos:start="565:41" pos:end="565:62"><expr pos:start="565:41" pos:end="565:62"><sizeof pos:start="565:41" pos:end="565:62">sizeof<argument_list pos:start="565:47" pos:end="565:62">(<argument pos:start="565:48" pos:end="565:61"><expr pos:start="565:48" pos:end="565:61"><name pos:start="565:48" pos:end="565:61"><name pos:start="565:48" pos:end="565:53">stream</name><operator pos:start="565:54" pos:end="565:55">-&gt;</operator><name pos:start="565:56" pos:end="565:61">author</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="565:65" pos:end="565:66"><expr pos:start="565:65" pos:end="565:66"><operator pos:start="565:65" pos:end="565:65">&amp;</operator><name pos:start="565:66" pos:end="565:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="567:11" pos:end="573:9">else if <condition pos:start="567:19" pos:end="567:50">(<expr pos:start="567:20" pos:end="567:49"><operator pos:start="567:20" pos:end="567:20">!</operator><call pos:start="567:21" pos:end="567:49"><name pos:start="567:21" pos:end="567:33">av_strcasecmp</name><argument_list pos:start="567:34" pos:end="567:49">(<argument pos:start="567:35" pos:end="567:37"><expr pos:start="567:35" pos:end="567:37"><name pos:start="567:35" pos:end="567:37">cmd</name></expr></argument>, <argument pos:start="567:40" pos:end="567:48"><expr pos:start="567:40" pos:end="567:48"><literal type="string" pos:start="567:40" pos:end="567:48">"Comment"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="567:52" pos:end="573:9">{<block_content pos:start="569:13" pos:end="571:70">

            <if_stmt pos:start="569:13" pos:end="571:70"><if pos:start="569:13" pos:end="571:70">if <condition pos:start="569:16" pos:end="569:23">(<expr pos:start="569:17" pos:end="569:22"><name pos:start="569:17" pos:end="569:22">stream</name></expr>)</condition><block type="pseudo" pos:start="571:17" pos:end="571:70"><block_content pos:start="571:17" pos:end="571:70">

                <expr_stmt pos:start="571:17" pos:end="571:70"><expr pos:start="571:17" pos:end="571:69"><call pos:start="571:17" pos:end="571:69"><name pos:start="571:17" pos:end="571:23">get_arg</name><argument_list pos:start="571:24" pos:end="571:69">(<argument pos:start="571:25" pos:end="571:39"><expr pos:start="571:25" pos:end="571:39"><name pos:start="571:25" pos:end="571:39"><name pos:start="571:25" pos:end="571:30">stream</name><operator pos:start="571:31" pos:end="571:32">-&gt;</operator><name pos:start="571:33" pos:end="571:39">comment</name></name></expr></argument>, <argument pos:start="571:42" pos:end="571:64"><expr pos:start="571:42" pos:end="571:64"><sizeof pos:start="571:42" pos:end="571:64">sizeof<argument_list pos:start="571:48" pos:end="571:64">(<argument pos:start="571:49" pos:end="571:63"><expr pos:start="571:49" pos:end="571:63"><name pos:start="571:49" pos:end="571:63"><name pos:start="571:49" pos:end="571:54">stream</name><operator pos:start="571:55" pos:end="571:56">-&gt;</operator><name pos:start="571:57" pos:end="571:63">comment</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="571:67" pos:end="571:68"><expr pos:start="571:67" pos:end="571:68"><operator pos:start="571:67" pos:end="571:67">&amp;</operator><name pos:start="571:68" pos:end="571:68">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="573:11" pos:end="579:9">else if <condition pos:start="573:19" pos:end="573:52">(<expr pos:start="573:20" pos:end="573:51"><operator pos:start="573:20" pos:end="573:20">!</operator><call pos:start="573:21" pos:end="573:51"><name pos:start="573:21" pos:end="573:33">av_strcasecmp</name><argument_list pos:start="573:34" pos:end="573:51">(<argument pos:start="573:35" pos:end="573:37"><expr pos:start="573:35" pos:end="573:37"><name pos:start="573:35" pos:end="573:37">cmd</name></expr></argument>, <argument pos:start="573:40" pos:end="573:50"><expr pos:start="573:40" pos:end="573:50"><literal type="string" pos:start="573:40" pos:end="573:50">"Copyright"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="573:54" pos:end="579:9">{<block_content pos:start="575:13" pos:end="577:74">

            <if_stmt pos:start="575:13" pos:end="577:74"><if pos:start="575:13" pos:end="577:74">if <condition pos:start="575:16" pos:end="575:23">(<expr pos:start="575:17" pos:end="575:22"><name pos:start="575:17" pos:end="575:22">stream</name></expr>)</condition><block type="pseudo" pos:start="577:17" pos:end="577:74"><block_content pos:start="577:17" pos:end="577:74">

                <expr_stmt pos:start="577:17" pos:end="577:74"><expr pos:start="577:17" pos:end="577:73"><call pos:start="577:17" pos:end="577:73"><name pos:start="577:17" pos:end="577:23">get_arg</name><argument_list pos:start="577:24" pos:end="577:73">(<argument pos:start="577:25" pos:end="577:41"><expr pos:start="577:25" pos:end="577:41"><name pos:start="577:25" pos:end="577:41"><name pos:start="577:25" pos:end="577:30">stream</name><operator pos:start="577:31" pos:end="577:32">-&gt;</operator><name pos:start="577:33" pos:end="577:41">copyright</name></name></expr></argument>, <argument pos:start="577:44" pos:end="577:68"><expr pos:start="577:44" pos:end="577:68"><sizeof pos:start="577:44" pos:end="577:68">sizeof<argument_list pos:start="577:50" pos:end="577:68">(<argument pos:start="577:51" pos:end="577:67"><expr pos:start="577:51" pos:end="577:67"><name pos:start="577:51" pos:end="577:67"><name pos:start="577:51" pos:end="577:56">stream</name><operator pos:start="577:57" pos:end="577:58">-&gt;</operator><name pos:start="577:59" pos:end="577:67">copyright</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="577:71" pos:end="577:72"><expr pos:start="577:71" pos:end="577:72"><operator pos:start="577:71" pos:end="577:71">&amp;</operator><name pos:start="577:72" pos:end="577:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="579:11" pos:end="585:9">else if <condition pos:start="579:19" pos:end="579:48">(<expr pos:start="579:20" pos:end="579:47"><operator pos:start="579:20" pos:end="579:20">!</operator><call pos:start="579:21" pos:end="579:47"><name pos:start="579:21" pos:end="579:33">av_strcasecmp</name><argument_list pos:start="579:34" pos:end="579:47">(<argument pos:start="579:35" pos:end="579:37"><expr pos:start="579:35" pos:end="579:37"><name pos:start="579:35" pos:end="579:37">cmd</name></expr></argument>, <argument pos:start="579:40" pos:end="579:46"><expr pos:start="579:40" pos:end="579:46"><literal type="string" pos:start="579:40" pos:end="579:46">"Title"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="579:50" pos:end="585:9">{<block_content pos:start="581:13" pos:end="583:66">

            <if_stmt pos:start="581:13" pos:end="583:66"><if pos:start="581:13" pos:end="583:66">if <condition pos:start="581:16" pos:end="581:23">(<expr pos:start="581:17" pos:end="581:22"><name pos:start="581:17" pos:end="581:22">stream</name></expr>)</condition><block type="pseudo" pos:start="583:17" pos:end="583:66"><block_content pos:start="583:17" pos:end="583:66">

                <expr_stmt pos:start="583:17" pos:end="583:66"><expr pos:start="583:17" pos:end="583:65"><call pos:start="583:17" pos:end="583:65"><name pos:start="583:17" pos:end="583:23">get_arg</name><argument_list pos:start="583:24" pos:end="583:65">(<argument pos:start="583:25" pos:end="583:37"><expr pos:start="583:25" pos:end="583:37"><name pos:start="583:25" pos:end="583:37"><name pos:start="583:25" pos:end="583:30">stream</name><operator pos:start="583:31" pos:end="583:32">-&gt;</operator><name pos:start="583:33" pos:end="583:37">title</name></name></expr></argument>, <argument pos:start="583:40" pos:end="583:60"><expr pos:start="583:40" pos:end="583:60"><sizeof pos:start="583:40" pos:end="583:60">sizeof<argument_list pos:start="583:46" pos:end="583:60">(<argument pos:start="583:47" pos:end="583:59"><expr pos:start="583:47" pos:end="583:59"><name pos:start="583:47" pos:end="583:59"><name pos:start="583:47" pos:end="583:52">stream</name><operator pos:start="583:53" pos:end="583:54">-&gt;</operator><name pos:start="583:55" pos:end="583:59">title</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="583:63" pos:end="583:64"><expr pos:start="583:63" pos:end="583:64"><operator pos:start="583:63" pos:end="583:63">&amp;</operator><name pos:start="583:64" pos:end="583:64">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="585:11" pos:end="593:9">else if <condition pos:start="585:19" pos:end="585:50">(<expr pos:start="585:20" pos:end="585:49"><operator pos:start="585:20" pos:end="585:20">!</operator><call pos:start="585:21" pos:end="585:49"><name pos:start="585:21" pos:end="585:33">av_strcasecmp</name><argument_list pos:start="585:34" pos:end="585:49">(<argument pos:start="585:35" pos:end="585:37"><expr pos:start="585:35" pos:end="585:37"><name pos:start="585:35" pos:end="585:37">cmd</name></expr></argument>, <argument pos:start="585:40" pos:end="585:48"><expr pos:start="585:40" pos:end="585:48"><literal type="string" pos:start="585:40" pos:end="585:48">"Preroll"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="585:52" pos:end="593:9">{<block_content pos:start="587:13" pos:end="591:53">

            <expr_stmt pos:start="587:13" pos:end="587:42"><expr pos:start="587:13" pos:end="587:41"><call pos:start="587:13" pos:end="587:41"><name pos:start="587:13" pos:end="587:19">get_arg</name><argument_list pos:start="587:20" pos:end="587:41">(<argument pos:start="587:21" pos:end="587:23"><expr pos:start="587:21" pos:end="587:23"><name pos:start="587:21" pos:end="587:23">arg</name></expr></argument>, <argument pos:start="587:26" pos:end="587:36"><expr pos:start="587:26" pos:end="587:36"><sizeof pos:start="587:26" pos:end="587:36">sizeof<argument_list pos:start="587:32" pos:end="587:36">(<argument pos:start="587:33" pos:end="587:35"><expr pos:start="587:33" pos:end="587:35"><name pos:start="587:33" pos:end="587:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="587:39" pos:end="587:40"><expr pos:start="587:39" pos:end="587:40"><operator pos:start="587:39" pos:end="587:39">&amp;</operator><name pos:start="587:40" pos:end="587:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="589:13" pos:end="591:53"><if pos:start="589:13" pos:end="591:53">if <condition pos:start="589:16" pos:end="589:23">(<expr pos:start="589:17" pos:end="589:22"><name pos:start="589:17" pos:end="589:22">stream</name></expr>)</condition><block type="pseudo" pos:start="591:17" pos:end="591:53"><block_content pos:start="591:17" pos:end="591:53">

                <expr_stmt pos:start="591:17" pos:end="591:53"><expr pos:start="591:17" pos:end="591:52"><name pos:start="591:17" pos:end="591:33"><name pos:start="591:17" pos:end="591:22">stream</name><operator pos:start="591:23" pos:end="591:24">-&gt;</operator><name pos:start="591:25" pos:end="591:33">prebuffer</name></name> <operator pos:start="591:35" pos:end="591:35">=</operator> <call pos:start="591:37" pos:end="591:45"><name pos:start="591:37" pos:end="591:40">atof</name><argument_list pos:start="591:41" pos:end="591:45">(<argument pos:start="591:42" pos:end="591:44"><expr pos:start="591:42" pos:end="591:44"><name pos:start="591:42" pos:end="591:44">arg</name></expr></argument>)</argument_list></call> <operator pos:start="591:47" pos:end="591:47">*</operator> <literal type="number" pos:start="591:49" pos:end="591:52">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="593:11" pos:end="599:9">else if <condition pos:start="593:19" pos:end="593:57">(<expr pos:start="593:20" pos:end="593:56"><operator pos:start="593:20" pos:end="593:20">!</operator><call pos:start="593:21" pos:end="593:56"><name pos:start="593:21" pos:end="593:33">av_strcasecmp</name><argument_list pos:start="593:34" pos:end="593:56">(<argument pos:start="593:35" pos:end="593:37"><expr pos:start="593:35" pos:end="593:37"><name pos:start="593:35" pos:end="593:37">cmd</name></expr></argument>, <argument pos:start="593:40" pos:end="593:55"><expr pos:start="593:40" pos:end="593:55"><literal type="string" pos:start="593:40" pos:end="593:55">"StartSendOnKey"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="593:59" pos:end="599:9">{<block_content pos:start="595:13" pos:end="597:40">

            <if_stmt pos:start="595:13" pos:end="597:40"><if pos:start="595:13" pos:end="597:40">if <condition pos:start="595:16" pos:end="595:23">(<expr pos:start="595:17" pos:end="595:22"><name pos:start="595:17" pos:end="595:22">stream</name></expr>)</condition><block type="pseudo" pos:start="597:17" pos:end="597:40"><block_content pos:start="597:17" pos:end="597:40">

                <expr_stmt pos:start="597:17" pos:end="597:40"><expr pos:start="597:17" pos:end="597:39"><name pos:start="597:17" pos:end="597:35"><name pos:start="597:17" pos:end="597:22">stream</name><operator pos:start="597:23" pos:end="597:24">-&gt;</operator><name pos:start="597:25" pos:end="597:35">send_on_key</name></name> <operator pos:start="597:37" pos:end="597:37">=</operator> <literal type="number" pos:start="597:39" pos:end="597:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="599:11" pos:end="611:9">else if <condition pos:start="599:19" pos:end="599:53">(<expr pos:start="599:20" pos:end="599:52"><operator pos:start="599:20" pos:end="599:20">!</operator><call pos:start="599:21" pos:end="599:52"><name pos:start="599:21" pos:end="599:33">av_strcasecmp</name><argument_list pos:start="599:34" pos:end="599:52">(<argument pos:start="599:35" pos:end="599:37"><expr pos:start="599:35" pos:end="599:37"><name pos:start="599:35" pos:end="599:37">cmd</name></expr></argument>, <argument pos:start="599:40" pos:end="599:51"><expr pos:start="599:40" pos:end="599:51"><literal type="string" pos:start="599:40" pos:end="599:51">"AudioCodec"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="599:55" pos:end="611:9">{<block_content pos:start="601:13" pos:end="609:13">

            <expr_stmt pos:start="601:13" pos:end="601:42"><expr pos:start="601:13" pos:end="601:41"><call pos:start="601:13" pos:end="601:41"><name pos:start="601:13" pos:end="601:19">get_arg</name><argument_list pos:start="601:20" pos:end="601:41">(<argument pos:start="601:21" pos:end="601:23"><expr pos:start="601:21" pos:end="601:23"><name pos:start="601:21" pos:end="601:23">arg</name></expr></argument>, <argument pos:start="601:26" pos:end="601:36"><expr pos:start="601:26" pos:end="601:36"><sizeof pos:start="601:26" pos:end="601:36">sizeof<argument_list pos:start="601:32" pos:end="601:36">(<argument pos:start="601:33" pos:end="601:35"><expr pos:start="601:33" pos:end="601:35"><name pos:start="601:33" pos:end="601:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="601:39" pos:end="601:40"><expr pos:start="601:39" pos:end="601:40"><operator pos:start="601:39" pos:end="601:39">&amp;</operator><name pos:start="601:40" pos:end="601:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="603:13" pos:end="603:58"><expr pos:start="603:13" pos:end="603:57"><name pos:start="603:13" pos:end="603:20">audio_id</name> <operator pos:start="603:22" pos:end="603:22">=</operator> <call pos:start="603:24" pos:end="603:57"><name pos:start="603:24" pos:end="603:32">opt_codec</name><argument_list pos:start="603:33" pos:end="603:57">(<argument pos:start="603:34" pos:end="603:36"><expr pos:start="603:34" pos:end="603:36"><name pos:start="603:34" pos:end="603:36">arg</name></expr></argument>, <argument pos:start="603:39" pos:end="603:56"><expr pos:start="603:39" pos:end="603:56"><name pos:start="603:39" pos:end="603:56">AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="605:13" pos:end="609:13"><if pos:start="605:13" pos:end="609:13">if <condition pos:start="605:16" pos:end="605:45">(<expr pos:start="605:17" pos:end="605:44"><name pos:start="605:17" pos:end="605:24">audio_id</name> <operator pos:start="605:26" pos:end="605:27">==</operator> <name pos:start="605:29" pos:end="605:44">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="605:47" pos:end="609:13">{<block_content pos:start="607:17" pos:end="607:55">

                <expr_stmt pos:start="607:17" pos:end="607:55"><expr pos:start="607:17" pos:end="607:54"><call pos:start="607:17" pos:end="607:54"><name pos:start="607:17" pos:end="607:21">ERROR</name><argument_list pos:start="607:22" pos:end="607:54">(<argument pos:start="607:23" pos:end="607:48"><expr pos:start="607:23" pos:end="607:48"><literal type="string" pos:start="607:23" pos:end="607:48">"Unknown AudioCodec: %s\n"</literal></expr></argument>, <argument pos:start="607:51" pos:end="607:53"><expr pos:start="607:51" pos:end="607:53"><name pos:start="607:51" pos:end="607:53">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="611:11" pos:end="623:9">else if <condition pos:start="611:19" pos:end="611:53">(<expr pos:start="611:20" pos:end="611:52"><operator pos:start="611:20" pos:end="611:20">!</operator><call pos:start="611:21" pos:end="611:52"><name pos:start="611:21" pos:end="611:33">av_strcasecmp</name><argument_list pos:start="611:34" pos:end="611:52">(<argument pos:start="611:35" pos:end="611:37"><expr pos:start="611:35" pos:end="611:37"><name pos:start="611:35" pos:end="611:37">cmd</name></expr></argument>, <argument pos:start="611:40" pos:end="611:51"><expr pos:start="611:40" pos:end="611:51"><literal type="string" pos:start="611:40" pos:end="611:51">"VideoCodec"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="611:55" pos:end="623:9">{<block_content pos:start="613:13" pos:end="621:13">

            <expr_stmt pos:start="613:13" pos:end="613:42"><expr pos:start="613:13" pos:end="613:41"><call pos:start="613:13" pos:end="613:41"><name pos:start="613:13" pos:end="613:19">get_arg</name><argument_list pos:start="613:20" pos:end="613:41">(<argument pos:start="613:21" pos:end="613:23"><expr pos:start="613:21" pos:end="613:23"><name pos:start="613:21" pos:end="613:23">arg</name></expr></argument>, <argument pos:start="613:26" pos:end="613:36"><expr pos:start="613:26" pos:end="613:36"><sizeof pos:start="613:26" pos:end="613:36">sizeof<argument_list pos:start="613:32" pos:end="613:36">(<argument pos:start="613:33" pos:end="613:35"><expr pos:start="613:33" pos:end="613:35"><name pos:start="613:33" pos:end="613:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="613:39" pos:end="613:40"><expr pos:start="613:39" pos:end="613:40"><operator pos:start="613:39" pos:end="613:39">&amp;</operator><name pos:start="613:40" pos:end="613:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="615:13" pos:end="615:58"><expr pos:start="615:13" pos:end="615:57"><name pos:start="615:13" pos:end="615:20">video_id</name> <operator pos:start="615:22" pos:end="615:22">=</operator> <call pos:start="615:24" pos:end="615:57"><name pos:start="615:24" pos:end="615:32">opt_codec</name><argument_list pos:start="615:33" pos:end="615:57">(<argument pos:start="615:34" pos:end="615:36"><expr pos:start="615:34" pos:end="615:36"><name pos:start="615:34" pos:end="615:36">arg</name></expr></argument>, <argument pos:start="615:39" pos:end="615:56"><expr pos:start="615:39" pos:end="615:56"><name pos:start="615:39" pos:end="615:56">AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="617:13" pos:end="621:13"><if pos:start="617:13" pos:end="621:13">if <condition pos:start="617:16" pos:end="617:45">(<expr pos:start="617:17" pos:end="617:44"><name pos:start="617:17" pos:end="617:24">video_id</name> <operator pos:start="617:26" pos:end="617:27">==</operator> <name pos:start="617:29" pos:end="617:44">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="617:47" pos:end="621:13">{<block_content pos:start="619:17" pos:end="619:55">

                <expr_stmt pos:start="619:17" pos:end="619:55"><expr pos:start="619:17" pos:end="619:54"><call pos:start="619:17" pos:end="619:54"><name pos:start="619:17" pos:end="619:21">ERROR</name><argument_list pos:start="619:22" pos:end="619:54">(<argument pos:start="619:23" pos:end="619:48"><expr pos:start="619:23" pos:end="619:48"><literal type="string" pos:start="619:23" pos:end="619:48">"Unknown VideoCodec: %s\n"</literal></expr></argument>, <argument pos:start="619:51" pos:end="619:53"><expr pos:start="619:51" pos:end="619:53"><name pos:start="619:51" pos:end="619:53">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="623:11" pos:end="631:9">else if <condition pos:start="623:19" pos:end="623:50">(<expr pos:start="623:20" pos:end="623:49"><operator pos:start="623:20" pos:end="623:20">!</operator><call pos:start="623:21" pos:end="623:49"><name pos:start="623:21" pos:end="623:33">av_strcasecmp</name><argument_list pos:start="623:34" pos:end="623:49">(<argument pos:start="623:35" pos:end="623:37"><expr pos:start="623:35" pos:end="623:37"><name pos:start="623:35" pos:end="623:37">cmd</name></expr></argument>, <argument pos:start="623:40" pos:end="623:48"><expr pos:start="623:40" pos:end="623:48"><literal type="string" pos:start="623:40" pos:end="623:48">"MaxTime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="623:52" pos:end="631:9">{<block_content pos:start="625:13" pos:end="629:52">

            <expr_stmt pos:start="625:13" pos:end="625:42"><expr pos:start="625:13" pos:end="625:41"><call pos:start="625:13" pos:end="625:41"><name pos:start="625:13" pos:end="625:19">get_arg</name><argument_list pos:start="625:20" pos:end="625:41">(<argument pos:start="625:21" pos:end="625:23"><expr pos:start="625:21" pos:end="625:23"><name pos:start="625:21" pos:end="625:23">arg</name></expr></argument>, <argument pos:start="625:26" pos:end="625:36"><expr pos:start="625:26" pos:end="625:36"><sizeof pos:start="625:26" pos:end="625:36">sizeof<argument_list pos:start="625:32" pos:end="625:36">(<argument pos:start="625:33" pos:end="625:35"><expr pos:start="625:33" pos:end="625:35"><name pos:start="625:33" pos:end="625:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="625:39" pos:end="625:40"><expr pos:start="625:39" pos:end="625:40"><operator pos:start="625:39" pos:end="625:39">&amp;</operator><name pos:start="625:40" pos:end="625:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="627:13" pos:end="629:52"><if pos:start="627:13" pos:end="629:52">if <condition pos:start="627:16" pos:end="627:23">(<expr pos:start="627:17" pos:end="627:22"><name pos:start="627:17" pos:end="627:22">stream</name></expr>)</condition><block type="pseudo" pos:start="629:17" pos:end="629:52"><block_content pos:start="629:17" pos:end="629:52">

                <expr_stmt pos:start="629:17" pos:end="629:52"><expr pos:start="629:17" pos:end="629:51"><name pos:start="629:17" pos:end="629:32"><name pos:start="629:17" pos:end="629:22">stream</name><operator pos:start="629:23" pos:end="629:24">-&gt;</operator><name pos:start="629:25" pos:end="629:32">max_time</name></name> <operator pos:start="629:34" pos:end="629:34">=</operator> <call pos:start="629:36" pos:end="629:44"><name pos:start="629:36" pos:end="629:39">atof</name><argument_list pos:start="629:40" pos:end="629:44">(<argument pos:start="629:41" pos:end="629:43"><expr pos:start="629:41" pos:end="629:43"><name pos:start="629:41" pos:end="629:43">arg</name></expr></argument>)</argument_list></call> <operator pos:start="629:46" pos:end="629:46">*</operator> <literal type="number" pos:start="629:48" pos:end="629:51">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="631:11" pos:end="639:9">else if <condition pos:start="631:19" pos:end="631:55">(<expr pos:start="631:20" pos:end="631:54"><operator pos:start="631:20" pos:end="631:20">!</operator><call pos:start="631:21" pos:end="631:54"><name pos:start="631:21" pos:end="631:33">av_strcasecmp</name><argument_list pos:start="631:34" pos:end="631:54">(<argument pos:start="631:35" pos:end="631:37"><expr pos:start="631:35" pos:end="631:37"><name pos:start="631:35" pos:end="631:37">cmd</name></expr></argument>, <argument pos:start="631:40" pos:end="631:53"><expr pos:start="631:40" pos:end="631:53"><literal type="string" pos:start="631:40" pos:end="631:53">"AudioBitRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="631:57" pos:end="639:9">{<block_content pos:start="633:13" pos:end="637:62">

            <expr_stmt pos:start="633:13" pos:end="633:42"><expr pos:start="633:13" pos:end="633:41"><call pos:start="633:13" pos:end="633:41"><name pos:start="633:13" pos:end="633:19">get_arg</name><argument_list pos:start="633:20" pos:end="633:41">(<argument pos:start="633:21" pos:end="633:23"><expr pos:start="633:21" pos:end="633:23"><name pos:start="633:21" pos:end="633:23">arg</name></expr></argument>, <argument pos:start="633:26" pos:end="633:36"><expr pos:start="633:26" pos:end="633:36"><sizeof pos:start="633:26" pos:end="633:36">sizeof<argument_list pos:start="633:32" pos:end="633:36">(<argument pos:start="633:33" pos:end="633:35"><expr pos:start="633:33" pos:end="633:35"><name pos:start="633:33" pos:end="633:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="633:39" pos:end="633:40"><expr pos:start="633:39" pos:end="633:40"><operator pos:start="633:39" pos:end="633:39">&amp;</operator><name pos:start="633:40" pos:end="633:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="635:13" pos:end="637:62"><if pos:start="635:13" pos:end="637:62">if <condition pos:start="635:16" pos:end="635:23">(<expr pos:start="635:17" pos:end="635:22"><name pos:start="635:17" pos:end="635:22">stream</name></expr>)</condition><block type="pseudo" pos:start="637:17" pos:end="637:62"><block_content pos:start="637:17" pos:end="637:62">

                <expr_stmt pos:start="637:17" pos:end="637:62"><expr pos:start="637:17" pos:end="637:61"><name pos:start="637:17" pos:end="637:34"><name pos:start="637:17" pos:end="637:25">audio_enc</name><operator pos:start="637:26" pos:end="637:26">.</operator><name pos:start="637:27" pos:end="637:34">bit_rate</name></name> <operator pos:start="637:36" pos:end="637:36">=</operator> <call pos:start="637:38" pos:end="637:61"><name pos:start="637:38" pos:end="637:43">lrintf</name><argument_list pos:start="637:44" pos:end="637:61">(<argument pos:start="637:45" pos:end="637:60"><expr pos:start="637:45" pos:end="637:60"><call pos:start="637:45" pos:end="637:53"><name pos:start="637:45" pos:end="637:48">atof</name><argument_list pos:start="637:49" pos:end="637:53">(<argument pos:start="637:50" pos:end="637:52"><expr pos:start="637:50" pos:end="637:52"><name pos:start="637:50" pos:end="637:52">arg</name></expr></argument>)</argument_list></call> <operator pos:start="637:55" pos:end="637:55">*</operator> <literal type="number" pos:start="637:57" pos:end="637:60">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="639:11" pos:end="647:9">else if <condition pos:start="639:19" pos:end="639:56">(<expr pos:start="639:20" pos:end="639:55"><operator pos:start="639:20" pos:end="639:20">!</operator><call pos:start="639:21" pos:end="639:55"><name pos:start="639:21" pos:end="639:33">av_strcasecmp</name><argument_list pos:start="639:34" pos:end="639:55">(<argument pos:start="639:35" pos:end="639:37"><expr pos:start="639:35" pos:end="639:37"><name pos:start="639:35" pos:end="639:37">cmd</name></expr></argument>, <argument pos:start="639:40" pos:end="639:54"><expr pos:start="639:40" pos:end="639:54"><literal type="string" pos:start="639:40" pos:end="639:54">"AudioChannels"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="639:58" pos:end="647:9">{<block_content pos:start="641:13" pos:end="645:47">

            <expr_stmt pos:start="641:13" pos:end="641:42"><expr pos:start="641:13" pos:end="641:41"><call pos:start="641:13" pos:end="641:41"><name pos:start="641:13" pos:end="641:19">get_arg</name><argument_list pos:start="641:20" pos:end="641:41">(<argument pos:start="641:21" pos:end="641:23"><expr pos:start="641:21" pos:end="641:23"><name pos:start="641:21" pos:end="641:23">arg</name></expr></argument>, <argument pos:start="641:26" pos:end="641:36"><expr pos:start="641:26" pos:end="641:36"><sizeof pos:start="641:26" pos:end="641:36">sizeof<argument_list pos:start="641:32" pos:end="641:36">(<argument pos:start="641:33" pos:end="641:35"><expr pos:start="641:33" pos:end="641:35"><name pos:start="641:33" pos:end="641:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="641:39" pos:end="641:40"><expr pos:start="641:39" pos:end="641:40"><operator pos:start="641:39" pos:end="641:39">&amp;</operator><name pos:start="641:40" pos:end="641:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="643:13" pos:end="645:47"><if pos:start="643:13" pos:end="645:47">if <condition pos:start="643:16" pos:end="643:23">(<expr pos:start="643:17" pos:end="643:22"><name pos:start="643:17" pos:end="643:22">stream</name></expr>)</condition><block type="pseudo" pos:start="645:17" pos:end="645:47"><block_content pos:start="645:17" pos:end="645:47">

                <expr_stmt pos:start="645:17" pos:end="645:47"><expr pos:start="645:17" pos:end="645:46"><name pos:start="645:17" pos:end="645:34"><name pos:start="645:17" pos:end="645:25">audio_enc</name><operator pos:start="645:26" pos:end="645:26">.</operator><name pos:start="645:27" pos:end="645:34">channels</name></name> <operator pos:start="645:36" pos:end="645:36">=</operator> <call pos:start="645:38" pos:end="645:46"><name pos:start="645:38" pos:end="645:41">atoi</name><argument_list pos:start="645:42" pos:end="645:46">(<argument pos:start="645:43" pos:end="645:45"><expr pos:start="645:43" pos:end="645:45"><name pos:start="645:43" pos:end="645:45">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="647:11" pos:end="655:9">else if <condition pos:start="647:19" pos:end="647:58">(<expr pos:start="647:20" pos:end="647:57"><operator pos:start="647:20" pos:end="647:20">!</operator><call pos:start="647:21" pos:end="647:57"><name pos:start="647:21" pos:end="647:33">av_strcasecmp</name><argument_list pos:start="647:34" pos:end="647:57">(<argument pos:start="647:35" pos:end="647:37"><expr pos:start="647:35" pos:end="647:37"><name pos:start="647:35" pos:end="647:37">cmd</name></expr></argument>, <argument pos:start="647:40" pos:end="647:56"><expr pos:start="647:40" pos:end="647:56"><literal type="string" pos:start="647:40" pos:end="647:56">"AudioSampleRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="647:60" pos:end="655:9">{<block_content pos:start="649:13" pos:end="653:50">

            <expr_stmt pos:start="649:13" pos:end="649:42"><expr pos:start="649:13" pos:end="649:41"><call pos:start="649:13" pos:end="649:41"><name pos:start="649:13" pos:end="649:19">get_arg</name><argument_list pos:start="649:20" pos:end="649:41">(<argument pos:start="649:21" pos:end="649:23"><expr pos:start="649:21" pos:end="649:23"><name pos:start="649:21" pos:end="649:23">arg</name></expr></argument>, <argument pos:start="649:26" pos:end="649:36"><expr pos:start="649:26" pos:end="649:36"><sizeof pos:start="649:26" pos:end="649:36">sizeof<argument_list pos:start="649:32" pos:end="649:36">(<argument pos:start="649:33" pos:end="649:35"><expr pos:start="649:33" pos:end="649:35"><name pos:start="649:33" pos:end="649:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="649:39" pos:end="649:40"><expr pos:start="649:39" pos:end="649:40"><operator pos:start="649:39" pos:end="649:39">&amp;</operator><name pos:start="649:40" pos:end="649:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="651:13" pos:end="653:50"><if pos:start="651:13" pos:end="653:50">if <condition pos:start="651:16" pos:end="651:23">(<expr pos:start="651:17" pos:end="651:22"><name pos:start="651:17" pos:end="651:22">stream</name></expr>)</condition><block type="pseudo" pos:start="653:17" pos:end="653:50"><block_content pos:start="653:17" pos:end="653:50">

                <expr_stmt pos:start="653:17" pos:end="653:50"><expr pos:start="653:17" pos:end="653:49"><name pos:start="653:17" pos:end="653:37"><name pos:start="653:17" pos:end="653:25">audio_enc</name><operator pos:start="653:26" pos:end="653:26">.</operator><name pos:start="653:27" pos:end="653:37">sample_rate</name></name> <operator pos:start="653:39" pos:end="653:39">=</operator> <call pos:start="653:41" pos:end="653:49"><name pos:start="653:41" pos:end="653:44">atoi</name><argument_list pos:start="653:45" pos:end="653:49">(<argument pos:start="653:46" pos:end="653:48"><expr pos:start="653:46" pos:end="653:48"><name pos:start="653:46" pos:end="653:48">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="655:11" pos:end="665:9">else if <condition pos:start="655:19" pos:end="655:55">(<expr pos:start="655:20" pos:end="655:54"><operator pos:start="655:20" pos:end="655:20">!</operator><call pos:start="655:21" pos:end="655:54"><name pos:start="655:21" pos:end="655:33">av_strcasecmp</name><argument_list pos:start="655:34" pos:end="655:54">(<argument pos:start="655:35" pos:end="655:37"><expr pos:start="655:35" pos:end="655:37"><name pos:start="655:35" pos:end="655:37">cmd</name></expr></argument>, <argument pos:start="655:40" pos:end="655:53"><expr pos:start="655:40" pos:end="655:53"><literal type="string" pos:start="655:40" pos:end="655:53">"AudioQuality"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="655:57" pos:end="665:9">{<block_content pos:start="657:13" pos:end="663:13">

            <expr_stmt pos:start="657:13" pos:end="657:42"><expr pos:start="657:13" pos:end="657:41"><call pos:start="657:13" pos:end="657:41"><name pos:start="657:13" pos:end="657:19">get_arg</name><argument_list pos:start="657:20" pos:end="657:41">(<argument pos:start="657:21" pos:end="657:23"><expr pos:start="657:21" pos:end="657:23"><name pos:start="657:21" pos:end="657:23">arg</name></expr></argument>, <argument pos:start="657:26" pos:end="657:36"><expr pos:start="657:26" pos:end="657:36"><sizeof pos:start="657:26" pos:end="657:36">sizeof<argument_list pos:start="657:32" pos:end="657:36">(<argument pos:start="657:33" pos:end="657:35"><expr pos:start="657:33" pos:end="657:35"><name pos:start="657:33" pos:end="657:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="657:39" pos:end="657:40"><expr pos:start="657:39" pos:end="657:40"><operator pos:start="657:39" pos:end="657:39">&amp;</operator><name pos:start="657:40" pos:end="657:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="659:13" pos:end="663:13"><if pos:start="659:13" pos:end="663:13">if <condition pos:start="659:16" pos:end="659:23">(<expr pos:start="659:17" pos:end="659:22"><name pos:start="659:17" pos:end="659:22">stream</name></expr>)</condition> <block pos:start="659:25" pos:end="663:13">{<block_content>

<comment type="line" pos:start="661:1" pos:end="661:55">//                audio_enc.quality = atof(arg) * 1000;</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="665:11" pos:end="691:9">else if <condition pos:start="665:19" pos:end="665:60">(<expr pos:start="665:20" pos:end="665:59"><operator pos:start="665:20" pos:end="665:20">!</operator><call pos:start="665:21" pos:end="665:59"><name pos:start="665:21" pos:end="665:33">av_strcasecmp</name><argument_list pos:start="665:34" pos:end="665:59">(<argument pos:start="665:35" pos:end="665:37"><expr pos:start="665:35" pos:end="665:37"><name pos:start="665:35" pos:end="665:37">cmd</name></expr></argument>, <argument pos:start="665:40" pos:end="665:58"><expr pos:start="665:40" pos:end="665:58"><literal type="string" pos:start="665:40" pos:end="665:58">"VideoBitRateRange"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="665:62" pos:end="691:9">{<block_content pos:start="667:13" pos:end="689:13">

            <if_stmt pos:start="667:13" pos:end="689:13"><if pos:start="667:13" pos:end="689:13">if <condition pos:start="667:16" pos:end="667:23">(<expr pos:start="667:17" pos:end="667:22"><name pos:start="667:17" pos:end="667:22">stream</name></expr>)</condition> <block pos:start="667:25" pos:end="689:13">{<block_content pos:start="669:17" pos:end="687:17">

                <decl_stmt pos:start="669:17" pos:end="669:37"><decl pos:start="669:17" pos:end="669:27"><type pos:start="669:17" pos:end="669:19"><name pos:start="669:17" pos:end="669:19">int</name></type> <name pos:start="669:21" pos:end="669:27">minrate</name></decl>, <decl pos:start="669:30" pos:end="669:36"><type ref="prev" pos:start="669:17" pos:end="669:19"/><name pos:start="669:30" pos:end="669:36">maxrate</name></decl>;</decl_stmt>



                <expr_stmt pos:start="673:17" pos:end="673:46"><expr pos:start="673:17" pos:end="673:45"><call pos:start="673:17" pos:end="673:45"><name pos:start="673:17" pos:end="673:23">get_arg</name><argument_list pos:start="673:24" pos:end="673:45">(<argument pos:start="673:25" pos:end="673:27"><expr pos:start="673:25" pos:end="673:27"><name pos:start="673:25" pos:end="673:27">arg</name></expr></argument>, <argument pos:start="673:30" pos:end="673:40"><expr pos:start="673:30" pos:end="673:40"><sizeof pos:start="673:30" pos:end="673:40">sizeof<argument_list pos:start="673:36" pos:end="673:40">(<argument pos:start="673:37" pos:end="673:39"><expr pos:start="673:37" pos:end="673:39"><name pos:start="673:37" pos:end="673:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="673:43" pos:end="673:44"><expr pos:start="673:43" pos:end="673:44"><operator pos:start="673:43" pos:end="673:43">&amp;</operator><name pos:start="673:44" pos:end="673:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="677:17" pos:end="687:17"><if pos:start="677:17" pos:end="683:17">if <condition pos:start="677:20" pos:end="677:66">(<expr pos:start="677:21" pos:end="677:65"><call pos:start="677:21" pos:end="677:60"><name pos:start="677:21" pos:end="677:26">sscanf</name><argument_list pos:start="677:27" pos:end="677:60">(<argument pos:start="677:28" pos:end="677:30"><expr pos:start="677:28" pos:end="677:30"><name pos:start="677:28" pos:end="677:30">arg</name></expr></argument>, <argument pos:start="677:33" pos:end="677:39"><expr pos:start="677:33" pos:end="677:39"><literal type="string" pos:start="677:33" pos:end="677:39">"%d-%d"</literal></expr></argument>, <argument pos:start="677:42" pos:end="677:49"><expr pos:start="677:42" pos:end="677:49"><operator pos:start="677:42" pos:end="677:42">&amp;</operator><name pos:start="677:43" pos:end="677:49">minrate</name></expr></argument>, <argument pos:start="677:52" pos:end="677:59"><expr pos:start="677:52" pos:end="677:59"><operator pos:start="677:52" pos:end="677:52">&amp;</operator><name pos:start="677:53" pos:end="677:59">maxrate</name></expr></argument>)</argument_list></call> <operator pos:start="677:62" pos:end="677:63">==</operator> <literal type="number" pos:start="677:65" pos:end="677:65">2</literal></expr>)</condition> <block pos:start="677:68" pos:end="683:17">{<block_content pos:start="679:21" pos:end="681:59">

                    <expr_stmt pos:start="679:21" pos:end="679:59"><expr pos:start="679:21" pos:end="679:58"><name pos:start="679:21" pos:end="679:41"><name pos:start="679:21" pos:end="679:29">video_enc</name><operator pos:start="679:30" pos:end="679:30">.</operator><name pos:start="679:31" pos:end="679:41">rc_min_rate</name></name> <operator pos:start="679:43" pos:end="679:43">=</operator> <name pos:start="679:45" pos:end="679:51">minrate</name> <operator pos:start="679:53" pos:end="679:53">*</operator> <literal type="number" pos:start="679:55" pos:end="679:58">1000</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="681:21" pos:end="681:59"><expr pos:start="681:21" pos:end="681:58"><name pos:start="681:21" pos:end="681:41"><name pos:start="681:21" pos:end="681:29">video_enc</name><operator pos:start="681:30" pos:end="681:30">.</operator><name pos:start="681:31" pos:end="681:41">rc_max_rate</name></name> <operator pos:start="681:43" pos:end="681:43">=</operator> <name pos:start="681:45" pos:end="681:51">maxrate</name> <operator pos:start="681:53" pos:end="681:53">*</operator> <literal type="number" pos:start="681:55" pos:end="681:58">1000</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="683:19" pos:end="687:17">else <block pos:start="683:24" pos:end="687:17">{<block_content pos:start="685:21" pos:end="685:104">

                    <expr_stmt pos:start="685:21" pos:end="685:104"><expr pos:start="685:21" pos:end="685:103"><call pos:start="685:21" pos:end="685:103"><name pos:start="685:21" pos:end="685:25">ERROR</name><argument_list pos:start="685:26" pos:end="685:103">(<argument pos:start="685:27" pos:end="685:97"><expr pos:start="685:27" pos:end="685:97"><literal type="string" pos:start="685:27" pos:end="685:97">"Incorrect format for VideoBitRateRange -- should be &lt;min&gt;-&lt;max&gt;: %s\n"</literal></expr></argument>, <argument pos:start="685:100" pos:end="685:102"><expr pos:start="685:100" pos:end="685:102"><name pos:start="685:100" pos:end="685:102">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="691:11" pos:end="701:9">else if <condition pos:start="691:19" pos:end="691:48">(<expr pos:start="691:20" pos:end="691:47"><operator pos:start="691:20" pos:end="691:20">!</operator><call pos:start="691:21" pos:end="691:47"><name pos:start="691:21" pos:end="691:33">av_strcasecmp</name><argument_list pos:start="691:34" pos:end="691:47">(<argument pos:start="691:35" pos:end="691:37"><expr pos:start="691:35" pos:end="691:37"><name pos:start="691:35" pos:end="691:37">cmd</name></expr></argument>, <argument pos:start="691:40" pos:end="691:46"><expr pos:start="691:40" pos:end="691:46"><literal type="string" pos:start="691:40" pos:end="691:46">"Debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="691:50" pos:end="701:9">{<block_content pos:start="693:13" pos:end="699:13">

            <if_stmt pos:start="693:13" pos:end="699:13"><if pos:start="693:13" pos:end="699:13">if <condition pos:start="693:16" pos:end="693:23">(<expr pos:start="693:17" pos:end="693:22"><name pos:start="693:17" pos:end="693:22">stream</name></expr>)</condition> <block pos:start="693:25" pos:end="699:13">{<block_content pos:start="695:17" pos:end="697:50">

                <expr_stmt pos:start="695:17" pos:end="695:46"><expr pos:start="695:17" pos:end="695:45"><call pos:start="695:17" pos:end="695:45"><name pos:start="695:17" pos:end="695:23">get_arg</name><argument_list pos:start="695:24" pos:end="695:45">(<argument pos:start="695:25" pos:end="695:27"><expr pos:start="695:25" pos:end="695:27"><name pos:start="695:25" pos:end="695:27">arg</name></expr></argument>, <argument pos:start="695:30" pos:end="695:40"><expr pos:start="695:30" pos:end="695:40"><sizeof pos:start="695:30" pos:end="695:40">sizeof<argument_list pos:start="695:36" pos:end="695:40">(<argument pos:start="695:37" pos:end="695:39"><expr pos:start="695:37" pos:end="695:39"><name pos:start="695:37" pos:end="695:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="695:43" pos:end="695:44"><expr pos:start="695:43" pos:end="695:44"><operator pos:start="695:43" pos:end="695:43">&amp;</operator><name pos:start="695:44" pos:end="695:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="697:50"><expr pos:start="697:17" pos:end="697:49"><name pos:start="697:17" pos:end="697:31"><name pos:start="697:17" pos:end="697:25">video_enc</name><operator pos:start="697:26" pos:end="697:26">.</operator><name pos:start="697:27" pos:end="697:31">debug</name></name> <operator pos:start="697:33" pos:end="697:33">=</operator> <call pos:start="697:35" pos:end="697:49"><name pos:start="697:35" pos:end="697:40">strtol</name><argument_list pos:start="697:41" pos:end="697:49">(<argument pos:start="697:42" pos:end="697:44"><expr pos:start="697:42" pos:end="697:44"><name pos:start="697:42" pos:end="697:44">arg</name></expr></argument>,<argument pos:start="697:46" pos:end="697:46"><expr pos:start="697:46" pos:end="697:46"><literal type="number" pos:start="697:46" pos:end="697:46">0</literal></expr></argument>,<argument pos:start="697:48" pos:end="697:48"><expr pos:start="697:48" pos:end="697:48"><literal type="number" pos:start="697:48" pos:end="697:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="701:11" pos:end="711:9">else if <condition pos:start="701:19" pos:end="701:49">(<expr pos:start="701:20" pos:end="701:48"><operator pos:start="701:20" pos:end="701:20">!</operator><call pos:start="701:21" pos:end="701:48"><name pos:start="701:21" pos:end="701:33">av_strcasecmp</name><argument_list pos:start="701:34" pos:end="701:48">(<argument pos:start="701:35" pos:end="701:37"><expr pos:start="701:35" pos:end="701:37"><name pos:start="701:35" pos:end="701:37">cmd</name></expr></argument>, <argument pos:start="701:40" pos:end="701:47"><expr pos:start="701:40" pos:end="701:47"><literal type="string" pos:start="701:40" pos:end="701:47">"Strict"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="701:51" pos:end="711:9">{<block_content pos:start="703:13" pos:end="709:13">

            <if_stmt pos:start="703:13" pos:end="709:13"><if pos:start="703:13" pos:end="709:13">if <condition pos:start="703:16" pos:end="703:23">(<expr pos:start="703:17" pos:end="703:22"><name pos:start="703:17" pos:end="703:22">stream</name></expr>)</condition> <block pos:start="703:25" pos:end="709:13">{<block_content pos:start="705:17" pos:end="707:60">

                <expr_stmt pos:start="705:17" pos:end="705:46"><expr pos:start="705:17" pos:end="705:45"><call pos:start="705:17" pos:end="705:45"><name pos:start="705:17" pos:end="705:23">get_arg</name><argument_list pos:start="705:24" pos:end="705:45">(<argument pos:start="705:25" pos:end="705:27"><expr pos:start="705:25" pos:end="705:27"><name pos:start="705:25" pos:end="705:27">arg</name></expr></argument>, <argument pos:start="705:30" pos:end="705:40"><expr pos:start="705:30" pos:end="705:40"><sizeof pos:start="705:30" pos:end="705:40">sizeof<argument_list pos:start="705:36" pos:end="705:40">(<argument pos:start="705:37" pos:end="705:39"><expr pos:start="705:37" pos:end="705:39"><name pos:start="705:37" pos:end="705:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="705:43" pos:end="705:44"><expr pos:start="705:43" pos:end="705:44"><operator pos:start="705:43" pos:end="705:43">&amp;</operator><name pos:start="705:44" pos:end="705:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="707:17" pos:end="707:60"><expr pos:start="707:17" pos:end="707:59"><name pos:start="707:17" pos:end="707:47"><name pos:start="707:17" pos:end="707:25">video_enc</name><operator pos:start="707:26" pos:end="707:26">.</operator><name pos:start="707:27" pos:end="707:47">strict_std_compliance</name></name> <operator pos:start="707:49" pos:end="707:49">=</operator> <call pos:start="707:51" pos:end="707:59"><name pos:start="707:51" pos:end="707:54">atoi</name><argument_list pos:start="707:55" pos:end="707:59">(<argument pos:start="707:56" pos:end="707:58"><expr pos:start="707:56" pos:end="707:58"><name pos:start="707:56" pos:end="707:58">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="711:11" pos:end="721:9">else if <condition pos:start="711:19" pos:end="711:58">(<expr pos:start="711:20" pos:end="711:57"><operator pos:start="711:20" pos:end="711:20">!</operator><call pos:start="711:21" pos:end="711:57"><name pos:start="711:21" pos:end="711:33">av_strcasecmp</name><argument_list pos:start="711:34" pos:end="711:57">(<argument pos:start="711:35" pos:end="711:37"><expr pos:start="711:35" pos:end="711:37"><name pos:start="711:35" pos:end="711:37">cmd</name></expr></argument>, <argument pos:start="711:40" pos:end="711:56"><expr pos:start="711:40" pos:end="711:56"><literal type="string" pos:start="711:40" pos:end="711:56">"VideoBufferSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="711:60" pos:end="721:9">{<block_content pos:start="713:13" pos:end="719:13">

            <if_stmt pos:start="713:13" pos:end="719:13"><if pos:start="713:13" pos:end="719:13">if <condition pos:start="713:16" pos:end="713:23">(<expr pos:start="713:17" pos:end="713:22"><name pos:start="713:17" pos:end="713:22">stream</name></expr>)</condition> <block pos:start="713:25" pos:end="719:13">{<block_content pos:start="715:17" pos:end="717:62">

                <expr_stmt pos:start="715:17" pos:end="715:46"><expr pos:start="715:17" pos:end="715:45"><call pos:start="715:17" pos:end="715:45"><name pos:start="715:17" pos:end="715:23">get_arg</name><argument_list pos:start="715:24" pos:end="715:45">(<argument pos:start="715:25" pos:end="715:27"><expr pos:start="715:25" pos:end="715:27"><name pos:start="715:25" pos:end="715:27">arg</name></expr></argument>, <argument pos:start="715:30" pos:end="715:40"><expr pos:start="715:30" pos:end="715:40"><sizeof pos:start="715:30" pos:end="715:40">sizeof<argument_list pos:start="715:36" pos:end="715:40">(<argument pos:start="715:37" pos:end="715:39"><expr pos:start="715:37" pos:end="715:39"><name pos:start="715:37" pos:end="715:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="715:43" pos:end="715:44"><expr pos:start="715:43" pos:end="715:44"><operator pos:start="715:43" pos:end="715:43">&amp;</operator><name pos:start="715:44" pos:end="715:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="717:17" pos:end="717:62"><expr pos:start="717:17" pos:end="717:61"><name pos:start="717:17" pos:end="717:40"><name pos:start="717:17" pos:end="717:25">video_enc</name><operator pos:start="717:26" pos:end="717:26">.</operator><name pos:start="717:27" pos:end="717:40">rc_buffer_size</name></name> <operator pos:start="717:42" pos:end="717:42">=</operator> <call pos:start="717:44" pos:end="717:52"><name pos:start="717:44" pos:end="717:47">atoi</name><argument_list pos:start="717:48" pos:end="717:52">(<argument pos:start="717:49" pos:end="717:51"><expr pos:start="717:49" pos:end="717:51"><name pos:start="717:49" pos:end="717:51">arg</name></expr></argument>)</argument_list></call> <operator pos:start="717:54" pos:end="717:54">*</operator> <literal type="number" pos:start="717:56" pos:end="717:56">8</literal><operator pos:start="717:57" pos:end="717:57">*</operator><literal type="number" pos:start="717:58" pos:end="717:61">1024</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="721:11" pos:end="731:9">else if <condition pos:start="721:19" pos:end="721:64">(<expr pos:start="721:20" pos:end="721:63"><operator pos:start="721:20" pos:end="721:20">!</operator><call pos:start="721:21" pos:end="721:63"><name pos:start="721:21" pos:end="721:33">av_strcasecmp</name><argument_list pos:start="721:34" pos:end="721:63">(<argument pos:start="721:35" pos:end="721:37"><expr pos:start="721:35" pos:end="721:37"><name pos:start="721:35" pos:end="721:37">cmd</name></expr></argument>, <argument pos:start="721:40" pos:end="721:62"><expr pos:start="721:40" pos:end="721:62"><literal type="string" pos:start="721:40" pos:end="721:62">"VideoBitRateTolerance"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="721:66" pos:end="731:9">{<block_content pos:start="723:13" pos:end="729:13">

            <if_stmt pos:start="723:13" pos:end="729:13"><if pos:start="723:13" pos:end="729:13">if <condition pos:start="723:16" pos:end="723:23">(<expr pos:start="723:17" pos:end="723:22"><name pos:start="723:17" pos:end="723:22">stream</name></expr>)</condition> <block pos:start="723:25" pos:end="729:13">{<block_content pos:start="725:17" pos:end="727:64">

                <expr_stmt pos:start="725:17" pos:end="725:46"><expr pos:start="725:17" pos:end="725:45"><call pos:start="725:17" pos:end="725:45"><name pos:start="725:17" pos:end="725:23">get_arg</name><argument_list pos:start="725:24" pos:end="725:45">(<argument pos:start="725:25" pos:end="725:27"><expr pos:start="725:25" pos:end="725:27"><name pos:start="725:25" pos:end="725:27">arg</name></expr></argument>, <argument pos:start="725:30" pos:end="725:40"><expr pos:start="725:30" pos:end="725:40"><sizeof pos:start="725:30" pos:end="725:40">sizeof<argument_list pos:start="725:36" pos:end="725:40">(<argument pos:start="725:37" pos:end="725:39"><expr pos:start="725:37" pos:end="725:39"><name pos:start="725:37" pos:end="725:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="725:43" pos:end="725:44"><expr pos:start="725:43" pos:end="725:44"><operator pos:start="725:43" pos:end="725:43">&amp;</operator><name pos:start="725:44" pos:end="725:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="727:17" pos:end="727:64"><expr pos:start="727:17" pos:end="727:63"><name pos:start="727:17" pos:end="727:44"><name pos:start="727:17" pos:end="727:25">video_enc</name><operator pos:start="727:26" pos:end="727:26">.</operator><name pos:start="727:27" pos:end="727:44">bit_rate_tolerance</name></name> <operator pos:start="727:46" pos:end="727:46">=</operator> <call pos:start="727:48" pos:end="727:56"><name pos:start="727:48" pos:end="727:51">atoi</name><argument_list pos:start="727:52" pos:end="727:56">(<argument pos:start="727:53" pos:end="727:55"><expr pos:start="727:53" pos:end="727:55"><name pos:start="727:53" pos:end="727:55">arg</name></expr></argument>)</argument_list></call> <operator pos:start="727:58" pos:end="727:58">*</operator> <literal type="number" pos:start="727:60" pos:end="727:63">1000</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="731:11" pos:end="741:9">else if <condition pos:start="731:19" pos:end="731:55">(<expr pos:start="731:20" pos:end="731:54"><operator pos:start="731:20" pos:end="731:20">!</operator><call pos:start="731:21" pos:end="731:54"><name pos:start="731:21" pos:end="731:33">av_strcasecmp</name><argument_list pos:start="731:34" pos:end="731:54">(<argument pos:start="731:35" pos:end="731:37"><expr pos:start="731:35" pos:end="731:37"><name pos:start="731:35" pos:end="731:37">cmd</name></expr></argument>, <argument pos:start="731:40" pos:end="731:53"><expr pos:start="731:40" pos:end="731:53"><literal type="string" pos:start="731:40" pos:end="731:53">"VideoBitRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="731:57" pos:end="741:9">{<block_content pos:start="733:13" pos:end="739:13">

            <expr_stmt pos:start="733:13" pos:end="733:42"><expr pos:start="733:13" pos:end="733:41"><call pos:start="733:13" pos:end="733:41"><name pos:start="733:13" pos:end="733:19">get_arg</name><argument_list pos:start="733:20" pos:end="733:41">(<argument pos:start="733:21" pos:end="733:23"><expr pos:start="733:21" pos:end="733:23"><name pos:start="733:21" pos:end="733:23">arg</name></expr></argument>, <argument pos:start="733:26" pos:end="733:36"><expr pos:start="733:26" pos:end="733:36"><sizeof pos:start="733:26" pos:end="733:36">sizeof<argument_list pos:start="733:32" pos:end="733:36">(<argument pos:start="733:33" pos:end="733:35"><expr pos:start="733:33" pos:end="733:35"><name pos:start="733:33" pos:end="733:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="733:39" pos:end="733:40"><expr pos:start="733:39" pos:end="733:40"><operator pos:start="733:39" pos:end="733:39">&amp;</operator><name pos:start="733:40" pos:end="733:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="735:13" pos:end="739:13"><if pos:start="735:13" pos:end="739:13">if <condition pos:start="735:16" pos:end="735:23">(<expr pos:start="735:17" pos:end="735:22"><name pos:start="735:17" pos:end="735:22">stream</name></expr>)</condition> <block pos:start="735:25" pos:end="739:13">{<block_content pos:start="737:17" pos:end="737:54">

                <expr_stmt pos:start="737:17" pos:end="737:54"><expr pos:start="737:17" pos:end="737:53"><name pos:start="737:17" pos:end="737:34"><name pos:start="737:17" pos:end="737:25">video_enc</name><operator pos:start="737:26" pos:end="737:26">.</operator><name pos:start="737:27" pos:end="737:34">bit_rate</name></name> <operator pos:start="737:36" pos:end="737:36">=</operator> <call pos:start="737:38" pos:end="737:46"><name pos:start="737:38" pos:end="737:41">atoi</name><argument_list pos:start="737:42" pos:end="737:46">(<argument pos:start="737:43" pos:end="737:45"><expr pos:start="737:43" pos:end="737:45"><name pos:start="737:43" pos:end="737:45">arg</name></expr></argument>)</argument_list></call> <operator pos:start="737:48" pos:end="737:48">*</operator> <literal type="number" pos:start="737:50" pos:end="737:53">1000</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="741:11" pos:end="759:9">else if <condition pos:start="741:19" pos:end="741:52">(<expr pos:start="741:20" pos:end="741:51"><operator pos:start="741:20" pos:end="741:20">!</operator><call pos:start="741:21" pos:end="741:51"><name pos:start="741:21" pos:end="741:33">av_strcasecmp</name><argument_list pos:start="741:34" pos:end="741:51">(<argument pos:start="741:35" pos:end="741:37"><expr pos:start="741:35" pos:end="741:37"><name pos:start="741:35" pos:end="741:37">cmd</name></expr></argument>, <argument pos:start="741:40" pos:end="741:50"><expr pos:start="741:40" pos:end="741:50"><literal type="string" pos:start="741:40" pos:end="741:50">"VideoSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="741:54" pos:end="759:9">{<block_content pos:start="743:13" pos:end="757:13">

            <expr_stmt pos:start="743:13" pos:end="743:42"><expr pos:start="743:13" pos:end="743:41"><call pos:start="743:13" pos:end="743:41"><name pos:start="743:13" pos:end="743:19">get_arg</name><argument_list pos:start="743:20" pos:end="743:41">(<argument pos:start="743:21" pos:end="743:23"><expr pos:start="743:21" pos:end="743:23"><name pos:start="743:21" pos:end="743:23">arg</name></expr></argument>, <argument pos:start="743:26" pos:end="743:36"><expr pos:start="743:26" pos:end="743:36"><sizeof pos:start="743:26" pos:end="743:36">sizeof<argument_list pos:start="743:32" pos:end="743:36">(<argument pos:start="743:33" pos:end="743:35"><expr pos:start="743:33" pos:end="743:35"><name pos:start="743:33" pos:end="743:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="743:39" pos:end="743:40"><expr pos:start="743:39" pos:end="743:40"><operator pos:start="743:39" pos:end="743:39">&amp;</operator><name pos:start="743:40" pos:end="743:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="745:13" pos:end="757:13"><if pos:start="745:13" pos:end="757:13">if <condition pos:start="745:16" pos:end="745:23">(<expr pos:start="745:17" pos:end="745:22"><name pos:start="745:17" pos:end="745:22">stream</name></expr>)</condition> <block pos:start="745:25" pos:end="757:13">{<block_content pos:start="747:17" pos:end="755:17">

                <expr_stmt pos:start="747:17" pos:end="747:78"><expr pos:start="747:17" pos:end="747:77"><call pos:start="747:17" pos:end="747:77"><name pos:start="747:17" pos:end="747:35">av_parse_video_size</name><argument_list pos:start="747:36" pos:end="747:77">(<argument pos:start="747:37" pos:end="747:52"><expr pos:start="747:37" pos:end="747:52"><operator pos:start="747:37" pos:end="747:37">&amp;</operator><name pos:start="747:38" pos:end="747:52"><name pos:start="747:38" pos:end="747:46">video_enc</name><operator pos:start="747:47" pos:end="747:47">.</operator><name pos:start="747:48" pos:end="747:52">width</name></name></expr></argument>, <argument pos:start="747:55" pos:end="747:71"><expr pos:start="747:55" pos:end="747:71"><operator pos:start="747:55" pos:end="747:55">&amp;</operator><name pos:start="747:56" pos:end="747:71"><name pos:start="747:56" pos:end="747:64">video_enc</name><operator pos:start="747:65" pos:end="747:65">.</operator><name pos:start="747:66" pos:end="747:71">height</name></name></expr></argument>, <argument pos:start="747:74" pos:end="747:76"><expr pos:start="747:74" pos:end="747:76"><name pos:start="747:74" pos:end="747:76">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="749:17" pos:end="755:17"><if pos:start="749:17" pos:end="755:17">if <condition pos:start="749:20" pos:end="751:49">(<expr pos:start="749:21" pos:end="751:48"><operator pos:start="749:21" pos:end="749:21">(</operator><name pos:start="749:22" pos:end="749:36"><name pos:start="749:22" pos:end="749:30">video_enc</name><operator pos:start="749:31" pos:end="749:31">.</operator><name pos:start="749:32" pos:end="749:36">width</name></name> <operator pos:start="749:38" pos:end="749:38">%</operator> <literal type="number" pos:start="749:40" pos:end="749:41">16</literal><operator pos:start="749:42" pos:end="749:42">)</operator> <operator pos:start="749:44" pos:end="749:45">!=</operator> <literal type="number" pos:start="749:47" pos:end="749:47">0</literal> <operator pos:start="749:49" pos:end="749:50">||</operator>

                    <operator pos:start="751:21" pos:end="751:21">(</operator><name pos:start="751:22" pos:end="751:37"><name pos:start="751:22" pos:end="751:30">video_enc</name><operator pos:start="751:31" pos:end="751:31">.</operator><name pos:start="751:32" pos:end="751:37">height</name></name> <operator pos:start="751:39" pos:end="751:39">%</operator> <literal type="number" pos:start="751:41" pos:end="751:42">16</literal><operator pos:start="751:43" pos:end="751:43">)</operator> <operator pos:start="751:45" pos:end="751:46">!=</operator> <literal type="number" pos:start="751:48" pos:end="751:48">0</literal></expr>)</condition> <block pos:start="751:51" pos:end="755:17">{<block_content pos:start="753:21" pos:end="753:67">

                    <expr_stmt pos:start="753:21" pos:end="753:67"><expr pos:start="753:21" pos:end="753:66"><call pos:start="753:21" pos:end="753:66"><name pos:start="753:21" pos:end="753:25">ERROR</name><argument_list pos:start="753:26" pos:end="753:66">(<argument pos:start="753:27" pos:end="753:65"><expr pos:start="753:27" pos:end="753:65"><literal type="string" pos:start="753:27" pos:end="753:65">"Image size must be a multiple of 16\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="759:11" pos:end="781:9">else if <condition pos:start="759:19" pos:end="759:57">(<expr pos:start="759:20" pos:end="759:56"><operator pos:start="759:20" pos:end="759:20">!</operator><call pos:start="759:21" pos:end="759:56"><name pos:start="759:21" pos:end="759:33">av_strcasecmp</name><argument_list pos:start="759:34" pos:end="759:56">(<argument pos:start="759:35" pos:end="759:37"><expr pos:start="759:35" pos:end="759:37"><name pos:start="759:35" pos:end="759:37">cmd</name></expr></argument>, <argument pos:start="759:40" pos:end="759:55"><expr pos:start="759:40" pos:end="759:55"><literal type="string" pos:start="759:40" pos:end="759:55">"VideoFrameRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="759:59" pos:end="781:9">{<block_content pos:start="761:13" pos:end="779:13">

            <expr_stmt pos:start="761:13" pos:end="761:42"><expr pos:start="761:13" pos:end="761:41"><call pos:start="761:13" pos:end="761:41"><name pos:start="761:13" pos:end="761:19">get_arg</name><argument_list pos:start="761:20" pos:end="761:41">(<argument pos:start="761:21" pos:end="761:23"><expr pos:start="761:21" pos:end="761:23"><name pos:start="761:21" pos:end="761:23">arg</name></expr></argument>, <argument pos:start="761:26" pos:end="761:36"><expr pos:start="761:26" pos:end="761:36"><sizeof pos:start="761:26" pos:end="761:36">sizeof<argument_list pos:start="761:32" pos:end="761:36">(<argument pos:start="761:33" pos:end="761:35"><expr pos:start="761:33" pos:end="761:35"><name pos:start="761:33" pos:end="761:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="761:39" pos:end="761:40"><expr pos:start="761:39" pos:end="761:40"><operator pos:start="761:39" pos:end="761:39">&amp;</operator><name pos:start="761:40" pos:end="761:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="763:13" pos:end="779:13"><if pos:start="763:13" pos:end="779:13">if <condition pos:start="763:16" pos:end="763:23">(<expr pos:start="763:17" pos:end="763:22"><name pos:start="763:17" pos:end="763:22">stream</name></expr>)</condition> <block pos:start="763:25" pos:end="779:13">{<block_content pos:start="765:17" pos:end="777:17">

                <decl_stmt pos:start="765:17" pos:end="765:38"><decl pos:start="765:17" pos:end="765:37"><type pos:start="765:17" pos:end="765:26"><name pos:start="765:17" pos:end="765:26">AVRational</name></type> <name pos:start="765:28" pos:end="765:37">frame_rate</name></decl>;</decl_stmt>

                <if_stmt pos:start="767:17" pos:end="777:17"><if pos:start="767:17" pos:end="771:17">if <condition pos:start="767:20" pos:end="767:62">(<expr pos:start="767:21" pos:end="767:61"><call pos:start="767:21" pos:end="767:57"><name pos:start="767:21" pos:end="767:39">av_parse_video_rate</name><argument_list pos:start="767:40" pos:end="767:57">(<argument pos:start="767:41" pos:end="767:51"><expr pos:start="767:41" pos:end="767:51"><operator pos:start="767:41" pos:end="767:41">&amp;</operator><name pos:start="767:42" pos:end="767:51">frame_rate</name></expr></argument>, <argument pos:start="767:54" pos:end="767:56"><expr pos:start="767:54" pos:end="767:56"><name pos:start="767:54" pos:end="767:56">arg</name></expr></argument>)</argument_list></call> <operator pos:start="767:59" pos:end="767:59">&lt;</operator> <literal type="number" pos:start="767:61" pos:end="767:61">0</literal></expr>)</condition> <block pos:start="767:64" pos:end="771:17">{<block_content pos:start="769:21" pos:end="769:61">

                    <expr_stmt pos:start="769:21" pos:end="769:61"><expr pos:start="769:21" pos:end="769:60"><call pos:start="769:21" pos:end="769:60"><name pos:start="769:21" pos:end="769:25">ERROR</name><argument_list pos:start="769:26" pos:end="769:60">(<argument pos:start="769:27" pos:end="769:54"><expr pos:start="769:27" pos:end="769:54"><literal type="string" pos:start="769:27" pos:end="769:54">"Incorrect frame rate: %s\n"</literal></expr></argument>, <argument pos:start="769:57" pos:end="769:59"><expr pos:start="769:57" pos:end="769:59"><name pos:start="769:57" pos:end="769:59">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="771:19" pos:end="777:17">else <block pos:start="771:24" pos:end="777:17">{<block_content pos:start="773:21" pos:end="775:61">

                    <expr_stmt pos:start="773:21" pos:end="773:61"><expr pos:start="773:21" pos:end="773:60"><name pos:start="773:21" pos:end="773:43"><name pos:start="773:21" pos:end="773:29">video_enc</name><operator pos:start="773:30" pos:end="773:30">.</operator><name pos:start="773:31" pos:end="773:39">time_base</name><operator pos:start="773:40" pos:end="773:40">.</operator><name pos:start="773:41" pos:end="773:43">num</name></name> <operator pos:start="773:45" pos:end="773:45">=</operator> <name pos:start="773:47" pos:end="773:60"><name pos:start="773:47" pos:end="773:56">frame_rate</name><operator pos:start="773:57" pos:end="773:57">.</operator><name pos:start="773:58" pos:end="773:60">den</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="775:21" pos:end="775:61"><expr pos:start="775:21" pos:end="775:60"><name pos:start="775:21" pos:end="775:43"><name pos:start="775:21" pos:end="775:29">video_enc</name><operator pos:start="775:30" pos:end="775:30">.</operator><name pos:start="775:31" pos:end="775:39">time_base</name><operator pos:start="775:40" pos:end="775:40">.</operator><name pos:start="775:41" pos:end="775:43">den</name></name> <operator pos:start="775:45" pos:end="775:45">=</operator> <name pos:start="775:47" pos:end="775:60"><name pos:start="775:47" pos:end="775:56">frame_rate</name><operator pos:start="775:57" pos:end="775:57">.</operator><name pos:start="775:58" pos:end="775:60">num</name></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="781:11" pos:end="797:9">else if <condition pos:start="781:19" pos:end="781:54">(<expr pos:start="781:20" pos:end="781:53"><operator pos:start="781:20" pos:end="781:20">!</operator><call pos:start="781:21" pos:end="781:53"><name pos:start="781:21" pos:end="781:33">av_strcasecmp</name><argument_list pos:start="781:34" pos:end="781:53">(<argument pos:start="781:35" pos:end="781:37"><expr pos:start="781:35" pos:end="781:37"><name pos:start="781:35" pos:end="781:37">cmd</name></expr></argument>, <argument pos:start="781:40" pos:end="781:52"><expr pos:start="781:40" pos:end="781:52"><literal type="string" pos:start="781:40" pos:end="781:52">"PixelFormat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="781:56" pos:end="797:9">{<block_content pos:start="783:13" pos:end="795:13">

            <expr_stmt pos:start="783:13" pos:end="783:42"><expr pos:start="783:13" pos:end="783:41"><call pos:start="783:13" pos:end="783:41"><name pos:start="783:13" pos:end="783:19">get_arg</name><argument_list pos:start="783:20" pos:end="783:41">(<argument pos:start="783:21" pos:end="783:23"><expr pos:start="783:21" pos:end="783:23"><name pos:start="783:21" pos:end="783:23">arg</name></expr></argument>, <argument pos:start="783:26" pos:end="783:36"><expr pos:start="783:26" pos:end="783:36"><sizeof pos:start="783:26" pos:end="783:36">sizeof<argument_list pos:start="783:32" pos:end="783:36">(<argument pos:start="783:33" pos:end="783:35"><expr pos:start="783:33" pos:end="783:35"><name pos:start="783:33" pos:end="783:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="783:39" pos:end="783:40"><expr pos:start="783:39" pos:end="783:40"><operator pos:start="783:39" pos:end="783:39">&amp;</operator><name pos:start="783:40" pos:end="783:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="785:13" pos:end="795:13"><if pos:start="785:13" pos:end="795:13">if <condition pos:start="785:16" pos:end="785:23">(<expr pos:start="785:17" pos:end="785:22"><name pos:start="785:17" pos:end="785:22">stream</name></expr>)</condition> <block pos:start="785:25" pos:end="795:13">{<block_content pos:start="787:17" pos:end="793:17">

                <expr_stmt pos:start="787:17" pos:end="787:56"><expr pos:start="787:17" pos:end="787:55"><name pos:start="787:17" pos:end="787:33"><name pos:start="787:17" pos:end="787:25">video_enc</name><operator pos:start="787:26" pos:end="787:26">.</operator><name pos:start="787:27" pos:end="787:33">pix_fmt</name></name> <operator pos:start="787:35" pos:end="787:35">=</operator> <call pos:start="787:37" pos:end="787:55"><name pos:start="787:37" pos:end="787:50">av_get_pix_fmt</name><argument_list pos:start="787:51" pos:end="787:55">(<argument pos:start="787:52" pos:end="787:54"><expr pos:start="787:52" pos:end="787:54"><name pos:start="787:52" pos:end="787:54">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="789:17" pos:end="793:17"><if pos:start="789:17" pos:end="793:17">if <condition pos:start="789:20" pos:end="789:57">(<expr pos:start="789:21" pos:end="789:56"><name pos:start="789:21" pos:end="789:37"><name pos:start="789:21" pos:end="789:29">video_enc</name><operator pos:start="789:30" pos:end="789:30">.</operator><name pos:start="789:31" pos:end="789:37">pix_fmt</name></name> <operator pos:start="789:39" pos:end="789:40">==</operator> <name pos:start="789:42" pos:end="789:56">AV_PIX_FMT_NONE</name></expr>)</condition> <block pos:start="789:59" pos:end="793:17">{<block_content pos:start="791:21" pos:end="791:61">

                    <expr_stmt pos:start="791:21" pos:end="791:61"><expr pos:start="791:21" pos:end="791:60"><call pos:start="791:21" pos:end="791:60"><name pos:start="791:21" pos:end="791:25">ERROR</name><argument_list pos:start="791:26" pos:end="791:60">(<argument pos:start="791:27" pos:end="791:54"><expr pos:start="791:27" pos:end="791:54"><literal type="string" pos:start="791:27" pos:end="791:54">"Unknown pixel format: %s\n"</literal></expr></argument>, <argument pos:start="791:57" pos:end="791:59"><expr pos:start="791:57" pos:end="791:59"><name pos:start="791:57" pos:end="791:59">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="797:11" pos:end="805:9">else if <condition pos:start="797:19" pos:end="797:55">(<expr pos:start="797:20" pos:end="797:54"><operator pos:start="797:20" pos:end="797:20">!</operator><call pos:start="797:21" pos:end="797:54"><name pos:start="797:21" pos:end="797:33">av_strcasecmp</name><argument_list pos:start="797:34" pos:end="797:54">(<argument pos:start="797:35" pos:end="797:37"><expr pos:start="797:35" pos:end="797:37"><name pos:start="797:35" pos:end="797:37">cmd</name></expr></argument>, <argument pos:start="797:40" pos:end="797:53"><expr pos:start="797:40" pos:end="797:53"><literal type="string" pos:start="797:40" pos:end="797:53">"VideoGopSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="797:57" pos:end="805:9">{<block_content pos:start="799:13" pos:end="803:47">

            <expr_stmt pos:start="799:13" pos:end="799:42"><expr pos:start="799:13" pos:end="799:41"><call pos:start="799:13" pos:end="799:41"><name pos:start="799:13" pos:end="799:19">get_arg</name><argument_list pos:start="799:20" pos:end="799:41">(<argument pos:start="799:21" pos:end="799:23"><expr pos:start="799:21" pos:end="799:23"><name pos:start="799:21" pos:end="799:23">arg</name></expr></argument>, <argument pos:start="799:26" pos:end="799:36"><expr pos:start="799:26" pos:end="799:36"><sizeof pos:start="799:26" pos:end="799:36">sizeof<argument_list pos:start="799:32" pos:end="799:36">(<argument pos:start="799:33" pos:end="799:35"><expr pos:start="799:33" pos:end="799:35"><name pos:start="799:33" pos:end="799:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="799:39" pos:end="799:40"><expr pos:start="799:39" pos:end="799:40"><operator pos:start="799:39" pos:end="799:39">&amp;</operator><name pos:start="799:40" pos:end="799:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="801:13" pos:end="803:47"><if pos:start="801:13" pos:end="803:47">if <condition pos:start="801:16" pos:end="801:23">(<expr pos:start="801:17" pos:end="801:22"><name pos:start="801:17" pos:end="801:22">stream</name></expr>)</condition><block type="pseudo" pos:start="803:17" pos:end="803:47"><block_content pos:start="803:17" pos:end="803:47">

                <expr_stmt pos:start="803:17" pos:end="803:47"><expr pos:start="803:17" pos:end="803:46"><name pos:start="803:17" pos:end="803:34"><name pos:start="803:17" pos:end="803:25">video_enc</name><operator pos:start="803:26" pos:end="803:26">.</operator><name pos:start="803:27" pos:end="803:34">gop_size</name></name> <operator pos:start="803:36" pos:end="803:36">=</operator> <call pos:start="803:38" pos:end="803:46"><name pos:start="803:38" pos:end="803:41">atoi</name><argument_list pos:start="803:42" pos:end="803:46">(<argument pos:start="803:43" pos:end="803:45"><expr pos:start="803:43" pos:end="803:45"><name pos:start="803:43" pos:end="803:45">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="805:11" pos:end="811:9">else if <condition pos:start="805:19" pos:end="805:57">(<expr pos:start="805:20" pos:end="805:56"><operator pos:start="805:20" pos:end="805:20">!</operator><call pos:start="805:21" pos:end="805:56"><name pos:start="805:21" pos:end="805:33">av_strcasecmp</name><argument_list pos:start="805:34" pos:end="805:56">(<argument pos:start="805:35" pos:end="805:37"><expr pos:start="805:35" pos:end="805:37"><name pos:start="805:35" pos:end="805:37">cmd</name></expr></argument>, <argument pos:start="805:40" pos:end="805:55"><expr pos:start="805:40" pos:end="805:55"><literal type="string" pos:start="805:40" pos:end="805:55">"VideoIntraOnly"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="805:59" pos:end="811:9">{<block_content pos:start="807:13" pos:end="809:39">

            <if_stmt pos:start="807:13" pos:end="809:39"><if pos:start="807:13" pos:end="809:39">if <condition pos:start="807:16" pos:end="807:23">(<expr pos:start="807:17" pos:end="807:22"><name pos:start="807:17" pos:end="807:22">stream</name></expr>)</condition><block type="pseudo" pos:start="809:17" pos:end="809:39"><block_content pos:start="809:17" pos:end="809:39">

                <expr_stmt pos:start="809:17" pos:end="809:39"><expr pos:start="809:17" pos:end="809:38"><name pos:start="809:17" pos:end="809:34"><name pos:start="809:17" pos:end="809:25">video_enc</name><operator pos:start="809:26" pos:end="809:26">.</operator><name pos:start="809:27" pos:end="809:34">gop_size</name></name> <operator pos:start="809:36" pos:end="809:36">=</operator> <literal type="number" pos:start="809:38" pos:end="809:38">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="811:11" pos:end="817:9">else if <condition pos:start="811:19" pos:end="811:59">(<expr pos:start="811:20" pos:end="811:58"><operator pos:start="811:20" pos:end="811:20">!</operator><call pos:start="811:21" pos:end="811:58"><name pos:start="811:21" pos:end="811:33">av_strcasecmp</name><argument_list pos:start="811:34" pos:end="811:58">(<argument pos:start="811:35" pos:end="811:37"><expr pos:start="811:35" pos:end="811:37"><name pos:start="811:35" pos:end="811:37">cmd</name></expr></argument>, <argument pos:start="811:40" pos:end="811:57"><expr pos:start="811:40" pos:end="811:57"><literal type="string" pos:start="811:40" pos:end="811:57">"VideoHighQuality"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="811:61" pos:end="817:9">{<block_content pos:start="813:13" pos:end="815:60">

            <if_stmt pos:start="813:13" pos:end="815:60"><if pos:start="813:13" pos:end="815:60">if <condition pos:start="813:16" pos:end="813:23">(<expr pos:start="813:17" pos:end="813:22"><name pos:start="813:17" pos:end="813:22">stream</name></expr>)</condition><block type="pseudo" pos:start="815:17" pos:end="815:60"><block_content pos:start="815:17" pos:end="815:60">

                <expr_stmt pos:start="815:17" pos:end="815:60"><expr pos:start="815:17" pos:end="815:59"><name pos:start="815:17" pos:end="815:37"><name pos:start="815:17" pos:end="815:25">video_enc</name><operator pos:start="815:26" pos:end="815:26">.</operator><name pos:start="815:27" pos:end="815:37">mb_decision</name></name> <operator pos:start="815:39" pos:end="815:39">=</operator> <name pos:start="815:41" pos:end="815:59">FF_MB_DECISION_BITS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="817:11" pos:end="827:9">else if <condition pos:start="817:19" pos:end="817:61">(<expr pos:start="817:20" pos:end="817:60"><operator pos:start="817:20" pos:end="817:20">!</operator><call pos:start="817:21" pos:end="817:60"><name pos:start="817:21" pos:end="817:33">av_strcasecmp</name><argument_list pos:start="817:34" pos:end="817:60">(<argument pos:start="817:35" pos:end="817:37"><expr pos:start="817:35" pos:end="817:37"><name pos:start="817:35" pos:end="817:37">cmd</name></expr></argument>, <argument pos:start="817:40" pos:end="817:59"><expr pos:start="817:40" pos:end="817:59"><literal type="string" pos:start="817:40" pos:end="817:59">"Video4MotionVector"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="817:63" pos:end="827:9">{<block_content pos:start="819:13" pos:end="825:13">

            <if_stmt pos:start="819:13" pos:end="825:13"><if pos:start="819:13" pos:end="825:13">if <condition pos:start="819:16" pos:end="819:23">(<expr pos:start="819:17" pos:end="819:22"><name pos:start="819:17" pos:end="819:22">stream</name></expr>)</condition> <block pos:start="819:25" pos:end="825:13">{<block_content pos:start="821:17" pos:end="823:50">

                <expr_stmt pos:start="821:17" pos:end="821:60"><expr pos:start="821:17" pos:end="821:59"><name pos:start="821:17" pos:end="821:37"><name pos:start="821:17" pos:end="821:25">video_enc</name><operator pos:start="821:26" pos:end="821:26">.</operator><name pos:start="821:27" pos:end="821:37">mb_decision</name></name> <operator pos:start="821:39" pos:end="821:39">=</operator> <name pos:start="821:41" pos:end="821:59">FF_MB_DECISION_BITS</name></expr>;</expr_stmt> <comment type="line" pos:start="821:62" pos:end="821:75">//FIXME remove</comment>

                <expr_stmt pos:start="823:17" pos:end="823:50"><expr pos:start="823:17" pos:end="823:49"><name pos:start="823:17" pos:end="823:31"><name pos:start="823:17" pos:end="823:25">video_enc</name><operator pos:start="823:26" pos:end="823:26">.</operator><name pos:start="823:27" pos:end="823:31">flags</name></name> <operator pos:start="823:33" pos:end="823:34">|=</operator> <name pos:start="823:36" pos:end="823:49">CODEC_FLAG_4MV</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="827:11" pos:end="861:9">else if <condition pos:start="827:19" pos:end="829:56">(<expr pos:start="827:20" pos:end="829:55"><operator pos:start="827:20" pos:end="827:20">!</operator><call pos:start="827:21" pos:end="827:55"><name pos:start="827:21" pos:end="827:33">av_strcasecmp</name><argument_list pos:start="827:34" pos:end="827:55">(<argument pos:start="827:35" pos:end="827:37"><expr pos:start="827:35" pos:end="827:37"><name pos:start="827:35" pos:end="827:37">cmd</name></expr></argument>, <argument pos:start="827:40" pos:end="827:54"><expr pos:start="827:40" pos:end="827:54"><literal type="string" pos:start="827:40" pos:end="827:54">"AVOptionVideo"</literal></expr></argument>)</argument_list></call> <operator pos:start="827:57" pos:end="827:58">||</operator>

                   <operator pos:start="829:20" pos:end="829:20">!</operator><call pos:start="829:21" pos:end="829:55"><name pos:start="829:21" pos:end="829:33">av_strcasecmp</name><argument_list pos:start="829:34" pos:end="829:55">(<argument pos:start="829:35" pos:end="829:37"><expr pos:start="829:35" pos:end="829:37"><name pos:start="829:35" pos:end="829:37">cmd</name></expr></argument>, <argument pos:start="829:40" pos:end="829:54"><expr pos:start="829:40" pos:end="829:54"><literal type="string" pos:start="829:40" pos:end="829:54">"AVOptionAudio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="829:58" pos:end="861:9">{<block_content pos:start="831:13" pos:end="859:13">

            <decl_stmt pos:start="831:13" pos:end="831:28"><decl pos:start="831:13" pos:end="831:27"><type pos:start="831:13" pos:end="831:16"><name pos:start="831:13" pos:end="831:16">char</name></type> <name pos:start="831:18" pos:end="831:27"><name pos:start="831:18" pos:end="831:21">arg2</name><index pos:start="831:22" pos:end="831:27">[<expr pos:start="831:23" pos:end="831:26"><literal type="number" pos:start="831:23" pos:end="831:26">1024</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="833:13" pos:end="833:34"><decl pos:start="833:13" pos:end="833:33"><type pos:start="833:13" pos:end="833:28"><name pos:start="833:13" pos:end="833:26">AVCodecContext</name> <modifier pos:start="833:28" pos:end="833:28">*</modifier></type><name pos:start="833:29" pos:end="833:33">avctx</name></decl>;</decl_stmt>

            <decl_stmt pos:start="835:13" pos:end="835:21"><decl pos:start="835:13" pos:end="835:20"><type pos:start="835:13" pos:end="835:15"><name pos:start="835:13" pos:end="835:15">int</name></type> <name pos:start="835:17" pos:end="835:20">type</name></decl>;</decl_stmt>

            <expr_stmt pos:start="837:13" pos:end="837:42"><expr pos:start="837:13" pos:end="837:41"><call pos:start="837:13" pos:end="837:41"><name pos:start="837:13" pos:end="837:19">get_arg</name><argument_list pos:start="837:20" pos:end="837:41">(<argument pos:start="837:21" pos:end="837:23"><expr pos:start="837:21" pos:end="837:23"><name pos:start="837:21" pos:end="837:23">arg</name></expr></argument>, <argument pos:start="837:26" pos:end="837:36"><expr pos:start="837:26" pos:end="837:36"><sizeof pos:start="837:26" pos:end="837:36">sizeof<argument_list pos:start="837:32" pos:end="837:36">(<argument pos:start="837:33" pos:end="837:35"><expr pos:start="837:33" pos:end="837:35"><name pos:start="837:33" pos:end="837:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="837:39" pos:end="837:40"><expr pos:start="837:39" pos:end="837:40"><operator pos:start="837:39" pos:end="837:39">&amp;</operator><name pos:start="837:40" pos:end="837:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="839:13" pos:end="839:44"><expr pos:start="839:13" pos:end="839:43"><call pos:start="839:13" pos:end="839:43"><name pos:start="839:13" pos:end="839:19">get_arg</name><argument_list pos:start="839:20" pos:end="839:43">(<argument pos:start="839:21" pos:end="839:24"><expr pos:start="839:21" pos:end="839:24"><name pos:start="839:21" pos:end="839:24">arg2</name></expr></argument>, <argument pos:start="839:27" pos:end="839:38"><expr pos:start="839:27" pos:end="839:38"><sizeof pos:start="839:27" pos:end="839:38">sizeof<argument_list pos:start="839:33" pos:end="839:38">(<argument pos:start="839:34" pos:end="839:37"><expr pos:start="839:34" pos:end="839:37"><name pos:start="839:34" pos:end="839:37">arg2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="839:41" pos:end="839:42"><expr pos:start="839:41" pos:end="839:42"><operator pos:start="839:41" pos:end="839:41">&amp;</operator><name pos:start="839:42" pos:end="839:42">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="841:13" pos:end="853:13"><if pos:start="841:13" pos:end="847:13">if <condition pos:start="841:16" pos:end="841:53">(<expr pos:start="841:17" pos:end="841:52"><operator pos:start="841:17" pos:end="841:17">!</operator><call pos:start="841:18" pos:end="841:52"><name pos:start="841:18" pos:end="841:30">av_strcasecmp</name><argument_list pos:start="841:31" pos:end="841:52">(<argument pos:start="841:32" pos:end="841:34"><expr pos:start="841:32" pos:end="841:34"><name pos:start="841:32" pos:end="841:34">cmd</name></expr></argument>, <argument pos:start="841:37" pos:end="841:51"><expr pos:start="841:37" pos:end="841:51"><literal type="string" pos:start="841:37" pos:end="841:51">"AVOptionVideo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="841:55" pos:end="847:13">{<block_content pos:start="843:17" pos:end="845:47">

                <expr_stmt pos:start="843:17" pos:end="843:35"><expr pos:start="843:17" pos:end="843:34"><name pos:start="843:17" pos:end="843:21">avctx</name> <operator pos:start="843:23" pos:end="843:23">=</operator> <operator pos:start="843:25" pos:end="843:25">&amp;</operator><name pos:start="843:26" pos:end="843:34">video_enc</name></expr>;</expr_stmt>

                <expr_stmt pos:start="845:17" pos:end="845:47"><expr pos:start="845:17" pos:end="845:46"><name pos:start="845:17" pos:end="845:20">type</name> <operator pos:start="845:22" pos:end="845:22">=</operator> <name pos:start="845:24" pos:end="845:46">AV_OPT_FLAG_VIDEO_PARAM</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="847:15" pos:end="853:13">else <block pos:start="847:20" pos:end="853:13">{<block_content pos:start="849:17" pos:end="851:47">

                <expr_stmt pos:start="849:17" pos:end="849:35"><expr pos:start="849:17" pos:end="849:34"><name pos:start="849:17" pos:end="849:21">avctx</name> <operator pos:start="849:23" pos:end="849:23">=</operator> <operator pos:start="849:25" pos:end="849:25">&amp;</operator><name pos:start="849:26" pos:end="849:34">audio_enc</name></expr>;</expr_stmt>

                <expr_stmt pos:start="851:17" pos:end="851:47"><expr pos:start="851:17" pos:end="851:46"><name pos:start="851:17" pos:end="851:20">type</name> <operator pos:start="851:22" pos:end="851:22">=</operator> <name pos:start="851:24" pos:end="851:46">AV_OPT_FLAG_AUDIO_PARAM</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="855:13" pos:end="859:13"><if pos:start="855:13" pos:end="859:13">if <condition pos:start="855:16" pos:end="855:88">(<expr pos:start="855:17" pos:end="855:87"><call pos:start="855:17" pos:end="855:87"><name pos:start="855:17" pos:end="855:36">ffserver_opt_default</name><argument_list pos:start="855:37" pos:end="855:87">(<argument pos:start="855:38" pos:end="855:40"><expr pos:start="855:38" pos:end="855:40"><name pos:start="855:38" pos:end="855:40">arg</name></expr></argument>, <argument pos:start="855:43" pos:end="855:46"><expr pos:start="855:43" pos:end="855:46"><name pos:start="855:43" pos:end="855:46">arg2</name></expr></argument>, <argument pos:start="855:49" pos:end="855:53"><expr pos:start="855:49" pos:end="855:53"><name pos:start="855:49" pos:end="855:53">avctx</name></expr></argument>, <argument pos:start="855:56" pos:end="855:86"><expr pos:start="855:56" pos:end="855:86"><name pos:start="855:56" pos:end="855:59">type</name><operator pos:start="855:60" pos:end="855:60">|</operator><name pos:start="855:61" pos:end="855:86">AV_OPT_FLAG_ENCODING_PARAM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="855:90" pos:end="859:13">{<block_content pos:start="857:17" pos:end="857:76">

                <expr_stmt pos:start="857:17" pos:end="857:76"><expr pos:start="857:17" pos:end="857:75"><call pos:start="857:17" pos:end="857:75"><name pos:start="857:17" pos:end="857:21">ERROR</name><argument_list pos:start="857:22" pos:end="857:75">(<argument pos:start="857:23" pos:end="857:58"><expr pos:start="857:23" pos:end="857:58"><literal type="string" pos:start="857:23" pos:end="857:58">"Error setting %s option to %s %s\n"</literal></expr></argument>, <argument pos:start="857:61" pos:end="857:63"><expr pos:start="857:61" pos:end="857:63"><name pos:start="857:61" pos:end="857:63">cmd</name></expr></argument>, <argument pos:start="857:66" pos:end="857:68"><expr pos:start="857:66" pos:end="857:68"><name pos:start="857:66" pos:end="857:68">arg</name></expr></argument>, <argument pos:start="857:71" pos:end="857:74"><expr pos:start="857:71" pos:end="857:74"><name pos:start="857:71" pos:end="857:74">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="861:11" pos:end="895:9">else if <condition pos:start="861:19" pos:end="863:56">(<expr pos:start="861:20" pos:end="863:55"><operator pos:start="861:20" pos:end="861:20">!</operator><call pos:start="861:21" pos:end="861:55"><name pos:start="861:21" pos:end="861:33">av_strcasecmp</name><argument_list pos:start="861:34" pos:end="861:55">(<argument pos:start="861:35" pos:end="861:37"><expr pos:start="861:35" pos:end="861:37"><name pos:start="861:35" pos:end="861:37">cmd</name></expr></argument>, <argument pos:start="861:40" pos:end="861:54"><expr pos:start="861:40" pos:end="861:54"><literal type="string" pos:start="861:40" pos:end="861:54">"AVPresetVideo"</literal></expr></argument>)</argument_list></call> <operator pos:start="861:57" pos:end="861:58">||</operator>

                   <operator pos:start="863:20" pos:end="863:20">!</operator><call pos:start="863:21" pos:end="863:55"><name pos:start="863:21" pos:end="863:33">av_strcasecmp</name><argument_list pos:start="863:34" pos:end="863:55">(<argument pos:start="863:35" pos:end="863:37"><expr pos:start="863:35" pos:end="863:37"><name pos:start="863:35" pos:end="863:37">cmd</name></expr></argument>, <argument pos:start="863:40" pos:end="863:54"><expr pos:start="863:40" pos:end="863:54"><literal type="string" pos:start="863:40" pos:end="863:54">"AVPresetAudio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="863:58" pos:end="895:9">{<block_content pos:start="865:13" pos:end="893:13">

            <decl_stmt pos:start="865:13" pos:end="865:34"><decl pos:start="865:13" pos:end="865:33"><type pos:start="865:13" pos:end="865:28"><name pos:start="865:13" pos:end="865:26">AVCodecContext</name> <modifier pos:start="865:28" pos:end="865:28">*</modifier></type><name pos:start="865:29" pos:end="865:33">avctx</name></decl>;</decl_stmt>

            <decl_stmt pos:start="867:13" pos:end="867:21"><decl pos:start="867:13" pos:end="867:20"><type pos:start="867:13" pos:end="867:15"><name pos:start="867:13" pos:end="867:15">int</name></type> <name pos:start="867:17" pos:end="867:20">type</name></decl>;</decl_stmt>

            <expr_stmt pos:start="869:13" pos:end="869:42"><expr pos:start="869:13" pos:end="869:41"><call pos:start="869:13" pos:end="869:41"><name pos:start="869:13" pos:end="869:19">get_arg</name><argument_list pos:start="869:20" pos:end="869:41">(<argument pos:start="869:21" pos:end="869:23"><expr pos:start="869:21" pos:end="869:23"><name pos:start="869:21" pos:end="869:23">arg</name></expr></argument>, <argument pos:start="869:26" pos:end="869:36"><expr pos:start="869:26" pos:end="869:36"><sizeof pos:start="869:26" pos:end="869:36">sizeof<argument_list pos:start="869:32" pos:end="869:36">(<argument pos:start="869:33" pos:end="869:35"><expr pos:start="869:33" pos:end="869:35"><name pos:start="869:33" pos:end="869:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="869:39" pos:end="869:40"><expr pos:start="869:39" pos:end="869:40"><operator pos:start="869:39" pos:end="869:39">&amp;</operator><name pos:start="869:40" pos:end="869:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="871:13" pos:end="887:13"><if pos:start="871:13" pos:end="879:13">if <condition pos:start="871:16" pos:end="871:53">(<expr pos:start="871:17" pos:end="871:52"><operator pos:start="871:17" pos:end="871:17">!</operator><call pos:start="871:18" pos:end="871:52"><name pos:start="871:18" pos:end="871:30">av_strcasecmp</name><argument_list pos:start="871:31" pos:end="871:52">(<argument pos:start="871:32" pos:end="871:34"><expr pos:start="871:32" pos:end="871:34"><name pos:start="871:32" pos:end="871:34">cmd</name></expr></argument>, <argument pos:start="871:37" pos:end="871:51"><expr pos:start="871:37" pos:end="871:51"><literal type="string" pos:start="871:37" pos:end="871:51">"AVPresetVideo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="871:55" pos:end="879:13">{<block_content pos:start="873:17" pos:end="877:47">

                <expr_stmt pos:start="873:17" pos:end="873:35"><expr pos:start="873:17" pos:end="873:34"><name pos:start="873:17" pos:end="873:21">avctx</name> <operator pos:start="873:23" pos:end="873:23">=</operator> <operator pos:start="873:25" pos:end="873:25">&amp;</operator><name pos:start="873:26" pos:end="873:34">video_enc</name></expr>;</expr_stmt>

                <expr_stmt pos:start="875:17" pos:end="875:46"><expr pos:start="875:17" pos:end="875:45"><name pos:start="875:17" pos:end="875:34"><name pos:start="875:17" pos:end="875:25">video_enc</name><operator pos:start="875:26" pos:end="875:26">.</operator><name pos:start="875:27" pos:end="875:34">codec_id</name></name> <operator pos:start="875:36" pos:end="875:36">=</operator> <name pos:start="875:38" pos:end="875:45">video_id</name></expr>;</expr_stmt>

                <expr_stmt pos:start="877:17" pos:end="877:47"><expr pos:start="877:17" pos:end="877:46"><name pos:start="877:17" pos:end="877:20">type</name> <operator pos:start="877:22" pos:end="877:22">=</operator> <name pos:start="877:24" pos:end="877:46">AV_OPT_FLAG_VIDEO_PARAM</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="879:15" pos:end="887:13">else <block pos:start="879:20" pos:end="887:13">{<block_content pos:start="881:17" pos:end="885:47">

                <expr_stmt pos:start="881:17" pos:end="881:35"><expr pos:start="881:17" pos:end="881:34"><name pos:start="881:17" pos:end="881:21">avctx</name> <operator pos:start="881:23" pos:end="881:23">=</operator> <operator pos:start="881:25" pos:end="881:25">&amp;</operator><name pos:start="881:26" pos:end="881:34">audio_enc</name></expr>;</expr_stmt>

                <expr_stmt pos:start="883:17" pos:end="883:46"><expr pos:start="883:17" pos:end="883:45"><name pos:start="883:17" pos:end="883:34"><name pos:start="883:17" pos:end="883:25">audio_enc</name><operator pos:start="883:26" pos:end="883:26">.</operator><name pos:start="883:27" pos:end="883:34">codec_id</name></name> <operator pos:start="883:36" pos:end="883:36">=</operator> <name pos:start="883:38" pos:end="883:45">audio_id</name></expr>;</expr_stmt>

                <expr_stmt pos:start="885:17" pos:end="885:47"><expr pos:start="885:17" pos:end="885:46"><name pos:start="885:17" pos:end="885:20">type</name> <operator pos:start="885:22" pos:end="885:22">=</operator> <name pos:start="885:24" pos:end="885:46">AV_OPT_FLAG_AUDIO_PARAM</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="889:13" pos:end="893:13"><if pos:start="889:13" pos:end="893:13">if <condition pos:start="889:16" pos:end="889:103">(<expr pos:start="889:17" pos:end="889:102"><call pos:start="889:17" pos:end="889:102"><name pos:start="889:17" pos:end="889:35">ffserver_opt_preset</name><argument_list pos:start="889:36" pos:end="889:102">(<argument pos:start="889:37" pos:end="889:39"><expr pos:start="889:37" pos:end="889:39"><name pos:start="889:37" pos:end="889:39">arg</name></expr></argument>, <argument pos:start="889:42" pos:end="889:46"><expr pos:start="889:42" pos:end="889:46"><name pos:start="889:42" pos:end="889:46">avctx</name></expr></argument>, <argument pos:start="889:49" pos:end="889:79"><expr pos:start="889:49" pos:end="889:79"><name pos:start="889:49" pos:end="889:52">type</name><operator pos:start="889:53" pos:end="889:53">|</operator><name pos:start="889:54" pos:end="889:79">AV_OPT_FLAG_ENCODING_PARAM</name></expr></argument>, <argument pos:start="889:82" pos:end="889:90"><expr pos:start="889:82" pos:end="889:90"><operator pos:start="889:82" pos:end="889:82">&amp;</operator><name pos:start="889:83" pos:end="889:90">audio_id</name></expr></argument>, <argument pos:start="889:93" pos:end="889:101"><expr pos:start="889:93" pos:end="889:101"><operator pos:start="889:93" pos:end="889:93">&amp;</operator><name pos:start="889:94" pos:end="889:101">video_id</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="889:105" pos:end="893:13">{<block_content pos:start="891:17" pos:end="891:51">

                <expr_stmt pos:start="891:17" pos:end="891:51"><expr pos:start="891:17" pos:end="891:50"><call pos:start="891:17" pos:end="891:50"><name pos:start="891:17" pos:end="891:21">ERROR</name><argument_list pos:start="891:22" pos:end="891:50">(<argument pos:start="891:23" pos:end="891:44"><expr pos:start="891:23" pos:end="891:44"><literal type="string" pos:start="891:23" pos:end="891:44">"AVPreset error: %s\n"</literal></expr></argument>, <argument pos:start="891:47" pos:end="891:49"><expr pos:start="891:47" pos:end="891:49"><name pos:start="891:47" pos:end="891:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="895:11" pos:end="903:9">else if <condition pos:start="895:19" pos:end="895:51">(<expr pos:start="895:20" pos:end="895:50"><operator pos:start="895:20" pos:end="895:20">!</operator><call pos:start="895:21" pos:end="895:50"><name pos:start="895:21" pos:end="895:33">av_strcasecmp</name><argument_list pos:start="895:34" pos:end="895:50">(<argument pos:start="895:35" pos:end="895:37"><expr pos:start="895:35" pos:end="895:37"><name pos:start="895:35" pos:end="895:37">cmd</name></expr></argument>, <argument pos:start="895:40" pos:end="895:49"><expr pos:start="895:40" pos:end="895:49"><literal type="string" pos:start="895:40" pos:end="895:49">"VideoTag"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="895:53" pos:end="903:9">{<block_content pos:start="897:13" pos:end="901:76">

            <expr_stmt pos:start="897:13" pos:end="897:42"><expr pos:start="897:13" pos:end="897:41"><call pos:start="897:13" pos:end="897:41"><name pos:start="897:13" pos:end="897:19">get_arg</name><argument_list pos:start="897:20" pos:end="897:41">(<argument pos:start="897:21" pos:end="897:23"><expr pos:start="897:21" pos:end="897:23"><name pos:start="897:21" pos:end="897:23">arg</name></expr></argument>, <argument pos:start="897:26" pos:end="897:36"><expr pos:start="897:26" pos:end="897:36"><sizeof pos:start="897:26" pos:end="897:36">sizeof<argument_list pos:start="897:32" pos:end="897:36">(<argument pos:start="897:33" pos:end="897:35"><expr pos:start="897:33" pos:end="897:35"><name pos:start="897:33" pos:end="897:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="897:39" pos:end="897:40"><expr pos:start="897:39" pos:end="897:40"><operator pos:start="897:39" pos:end="897:39">&amp;</operator><name pos:start="897:40" pos:end="897:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="899:13" pos:end="901:76"><if pos:start="899:13" pos:end="901:76">if <condition pos:start="899:16" pos:end="899:45">(<expr pos:start="899:17" pos:end="899:44"><operator pos:start="899:17" pos:end="899:17">(</operator><call pos:start="899:18" pos:end="899:28"><name pos:start="899:18" pos:end="899:23">strlen</name><argument_list pos:start="899:24" pos:end="899:28">(<argument pos:start="899:25" pos:end="899:27"><expr pos:start="899:25" pos:end="899:27"><name pos:start="899:25" pos:end="899:27">arg</name></expr></argument>)</argument_list></call> <operator pos:start="899:30" pos:end="899:31">==</operator> <literal type="number" pos:start="899:33" pos:end="899:33">4</literal><operator pos:start="899:34" pos:end="899:34">)</operator> <operator pos:start="899:36" pos:end="899:37">&amp;&amp;</operator> <name pos:start="899:39" pos:end="899:44">stream</name></expr>)</condition><block type="pseudo" pos:start="901:17" pos:end="901:76"><block_content pos:start="901:17" pos:end="901:76">

                <expr_stmt pos:start="901:17" pos:end="901:76"><expr pos:start="901:17" pos:end="901:75"><name pos:start="901:17" pos:end="901:35"><name pos:start="901:17" pos:end="901:25">video_enc</name><operator pos:start="901:26" pos:end="901:26">.</operator><name pos:start="901:27" pos:end="901:35">codec_tag</name></name> <operator pos:start="901:37" pos:end="901:37">=</operator> <call pos:start="901:39" pos:end="901:75"><name pos:start="901:39" pos:end="901:43">MKTAG</name><argument_list pos:start="901:44" pos:end="901:75">(<argument pos:start="901:45" pos:end="901:50"><expr pos:start="901:45" pos:end="901:50"><name pos:start="901:45" pos:end="901:50"><name pos:start="901:45" pos:end="901:47">arg</name><index pos:start="901:48" pos:end="901:50">[<expr pos:start="901:49" pos:end="901:49"><literal type="number" pos:start="901:49" pos:end="901:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="901:53" pos:end="901:58"><expr pos:start="901:53" pos:end="901:58"><name pos:start="901:53" pos:end="901:58"><name pos:start="901:53" pos:end="901:55">arg</name><index pos:start="901:56" pos:end="901:58">[<expr pos:start="901:57" pos:end="901:57"><literal type="number" pos:start="901:57" pos:end="901:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="901:61" pos:end="901:66"><expr pos:start="901:61" pos:end="901:66"><name pos:start="901:61" pos:end="901:66"><name pos:start="901:61" pos:end="901:63">arg</name><index pos:start="901:64" pos:end="901:66">[<expr pos:start="901:65" pos:end="901:65"><literal type="number" pos:start="901:65" pos:end="901:65">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="901:69" pos:end="901:74"><expr pos:start="901:69" pos:end="901:74"><name pos:start="901:69" pos:end="901:74"><name pos:start="901:69" pos:end="901:71">arg</name><index pos:start="901:72" pos:end="901:74">[<expr pos:start="901:73" pos:end="901:73"><literal type="number" pos:start="901:73" pos:end="901:73">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="903:11" pos:end="909:9">else if <condition pos:start="903:19" pos:end="903:51">(<expr pos:start="903:20" pos:end="903:50"><operator pos:start="903:20" pos:end="903:20">!</operator><call pos:start="903:21" pos:end="903:50"><name pos:start="903:21" pos:end="903:33">av_strcasecmp</name><argument_list pos:start="903:34" pos:end="903:50">(<argument pos:start="903:35" pos:end="903:37"><expr pos:start="903:35" pos:end="903:37"><name pos:start="903:35" pos:end="903:37">cmd</name></expr></argument>, <argument pos:start="903:40" pos:end="903:49"><expr pos:start="903:40" pos:end="903:49"><literal type="string" pos:start="903:40" pos:end="903:49">"BitExact"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="903:53" pos:end="909:9">{<block_content pos:start="905:13" pos:end="907:55">

            <if_stmt pos:start="905:13" pos:end="907:55"><if pos:start="905:13" pos:end="907:55">if <condition pos:start="905:16" pos:end="905:23">(<expr pos:start="905:17" pos:end="905:22"><name pos:start="905:17" pos:end="905:22">stream</name></expr>)</condition><block type="pseudo" pos:start="907:17" pos:end="907:55"><block_content pos:start="907:17" pos:end="907:55">

                <expr_stmt pos:start="907:17" pos:end="907:55"><expr pos:start="907:17" pos:end="907:54"><name pos:start="907:17" pos:end="907:31"><name pos:start="907:17" pos:end="907:25">video_enc</name><operator pos:start="907:26" pos:end="907:26">.</operator><name pos:start="907:27" pos:end="907:31">flags</name></name> <operator pos:start="907:33" pos:end="907:34">|=</operator> <name pos:start="907:36" pos:end="907:54">CODEC_FLAG_BITEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="909:11" pos:end="915:9">else if <condition pos:start="909:19" pos:end="909:53">(<expr pos:start="909:20" pos:end="909:52"><operator pos:start="909:20" pos:end="909:20">!</operator><call pos:start="909:21" pos:end="909:52"><name pos:start="909:21" pos:end="909:33">av_strcasecmp</name><argument_list pos:start="909:34" pos:end="909:52">(<argument pos:start="909:35" pos:end="909:37"><expr pos:start="909:35" pos:end="909:37"><name pos:start="909:35" pos:end="909:37">cmd</name></expr></argument>, <argument pos:start="909:40" pos:end="909:51"><expr pos:start="909:40" pos:end="909:51"><literal type="string" pos:start="909:40" pos:end="909:51">"DctFastint"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="909:55" pos:end="915:9">{<block_content pos:start="911:13" pos:end="913:53">

            <if_stmt pos:start="911:13" pos:end="913:53"><if pos:start="911:13" pos:end="913:53">if <condition pos:start="911:16" pos:end="911:23">(<expr pos:start="911:17" pos:end="911:22"><name pos:start="911:17" pos:end="911:22">stream</name></expr>)</condition><block type="pseudo" pos:start="913:17" pos:end="913:53"><block_content pos:start="913:17" pos:end="913:53">

                <expr_stmt pos:start="913:17" pos:end="913:53"><expr pos:start="913:17" pos:end="913:52"><name pos:start="913:17" pos:end="913:34"><name pos:start="913:17" pos:end="913:25">video_enc</name><operator pos:start="913:26" pos:end="913:26">.</operator><name pos:start="913:27" pos:end="913:34">dct_algo</name></name>  <operator pos:start="913:37" pos:end="913:37">=</operator> <name pos:start="913:39" pos:end="913:52">FF_DCT_FASTINT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="915:11" pos:end="921:9">else if <condition pos:start="915:19" pos:end="915:53">(<expr pos:start="915:20" pos:end="915:52"><operator pos:start="915:20" pos:end="915:20">!</operator><call pos:start="915:21" pos:end="915:52"><name pos:start="915:21" pos:end="915:33">av_strcasecmp</name><argument_list pos:start="915:34" pos:end="915:52">(<argument pos:start="915:35" pos:end="915:37"><expr pos:start="915:35" pos:end="915:37"><name pos:start="915:35" pos:end="915:37">cmd</name></expr></argument>, <argument pos:start="915:40" pos:end="915:51"><expr pos:start="915:40" pos:end="915:51"><literal type="string" pos:start="915:40" pos:end="915:51">"IdctSimple"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="915:55" pos:end="921:9">{<block_content pos:start="917:13" pos:end="919:53">

            <if_stmt pos:start="917:13" pos:end="919:53"><if pos:start="917:13" pos:end="919:53">if <condition pos:start="917:16" pos:end="917:23">(<expr pos:start="917:17" pos:end="917:22"><name pos:start="917:17" pos:end="917:22">stream</name></expr>)</condition><block type="pseudo" pos:start="919:17" pos:end="919:53"><block_content pos:start="919:17" pos:end="919:53">

                <expr_stmt pos:start="919:17" pos:end="919:53"><expr pos:start="919:17" pos:end="919:52"><name pos:start="919:17" pos:end="919:35"><name pos:start="919:17" pos:end="919:25">video_enc</name><operator pos:start="919:26" pos:end="919:26">.</operator><name pos:start="919:27" pos:end="919:35">idct_algo</name></name> <operator pos:start="919:37" pos:end="919:37">=</operator> <name pos:start="919:39" pos:end="919:52">FF_IDCT_SIMPLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="921:11" pos:end="933:9">else if <condition pos:start="921:19" pos:end="921:49">(<expr pos:start="921:20" pos:end="921:48"><operator pos:start="921:20" pos:end="921:20">!</operator><call pos:start="921:21" pos:end="921:48"><name pos:start="921:21" pos:end="921:33">av_strcasecmp</name><argument_list pos:start="921:34" pos:end="921:48">(<argument pos:start="921:35" pos:end="921:37"><expr pos:start="921:35" pos:end="921:37"><name pos:start="921:35" pos:end="921:37">cmd</name></expr></argument>, <argument pos:start="921:40" pos:end="921:47"><expr pos:start="921:40" pos:end="921:47"><literal type="string" pos:start="921:40" pos:end="921:47">"Qscale"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="921:51" pos:end="933:9">{<block_content pos:start="923:13" pos:end="931:13">

            <expr_stmt pos:start="923:13" pos:end="923:42"><expr pos:start="923:13" pos:end="923:41"><call pos:start="923:13" pos:end="923:41"><name pos:start="923:13" pos:end="923:19">get_arg</name><argument_list pos:start="923:20" pos:end="923:41">(<argument pos:start="923:21" pos:end="923:23"><expr pos:start="923:21" pos:end="923:23"><name pos:start="923:21" pos:end="923:23">arg</name></expr></argument>, <argument pos:start="923:26" pos:end="923:36"><expr pos:start="923:26" pos:end="923:36"><sizeof pos:start="923:26" pos:end="923:36">sizeof<argument_list pos:start="923:32" pos:end="923:36">(<argument pos:start="923:33" pos:end="923:35"><expr pos:start="923:33" pos:end="923:35"><name pos:start="923:33" pos:end="923:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="923:39" pos:end="923:40"><expr pos:start="923:39" pos:end="923:40"><operator pos:start="923:39" pos:end="923:39">&amp;</operator><name pos:start="923:40" pos:end="923:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="925:13" pos:end="931:13"><if pos:start="925:13" pos:end="931:13">if <condition pos:start="925:16" pos:end="925:23">(<expr pos:start="925:17" pos:end="925:22"><name pos:start="925:17" pos:end="925:22">stream</name></expr>)</condition> <block pos:start="925:25" pos:end="931:13">{<block_content pos:start="927:17" pos:end="929:68">

                <expr_stmt pos:start="927:17" pos:end="927:53"><expr pos:start="927:17" pos:end="927:52"><name pos:start="927:17" pos:end="927:31"><name pos:start="927:17" pos:end="927:25">video_enc</name><operator pos:start="927:26" pos:end="927:26">.</operator><name pos:start="927:27" pos:end="927:31">flags</name></name> <operator pos:start="927:33" pos:end="927:34">|=</operator> <name pos:start="927:36" pos:end="927:52">CODEC_FLAG_QSCALE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="929:17" pos:end="929:68"><expr pos:start="929:17" pos:end="929:67"><name pos:start="929:17" pos:end="929:40"><name pos:start="929:17" pos:end="929:25">video_enc</name><operator pos:start="929:26" pos:end="929:26">.</operator><name pos:start="929:27" pos:end="929:40">global_quality</name></name> <operator pos:start="929:42" pos:end="929:42">=</operator> <name pos:start="929:44" pos:end="929:55">FF_QP2LAMBDA</name> <operator pos:start="929:57" pos:end="929:57">*</operator> <call pos:start="929:59" pos:end="929:67"><name pos:start="929:59" pos:end="929:62">atoi</name><argument_list pos:start="929:63" pos:end="929:67">(<argument pos:start="929:64" pos:end="929:66"><expr pos:start="929:64" pos:end="929:66"><name pos:start="929:64" pos:end="929:66">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="933:11" pos:end="949:9">else if <condition pos:start="933:19" pos:end="933:53">(<expr pos:start="933:20" pos:end="933:52"><operator pos:start="933:20" pos:end="933:20">!</operator><call pos:start="933:21" pos:end="933:52"><name pos:start="933:21" pos:end="933:33">av_strcasecmp</name><argument_list pos:start="933:34" pos:end="933:52">(<argument pos:start="933:35" pos:end="933:37"><expr pos:start="933:35" pos:end="933:37"><name pos:start="933:35" pos:end="933:37">cmd</name></expr></argument>, <argument pos:start="933:40" pos:end="933:51"><expr pos:start="933:40" pos:end="933:51"><literal type="string" pos:start="933:40" pos:end="933:51">"VideoQDiff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="933:55" pos:end="949:9">{<block_content pos:start="935:13" pos:end="947:13">

            <expr_stmt pos:start="935:13" pos:end="935:42"><expr pos:start="935:13" pos:end="935:41"><call pos:start="935:13" pos:end="935:41"><name pos:start="935:13" pos:end="935:19">get_arg</name><argument_list pos:start="935:20" pos:end="935:41">(<argument pos:start="935:21" pos:end="935:23"><expr pos:start="935:21" pos:end="935:23"><name pos:start="935:21" pos:end="935:23">arg</name></expr></argument>, <argument pos:start="935:26" pos:end="935:36"><expr pos:start="935:26" pos:end="935:36"><sizeof pos:start="935:26" pos:end="935:36">sizeof<argument_list pos:start="935:32" pos:end="935:36">(<argument pos:start="935:33" pos:end="935:35"><expr pos:start="935:33" pos:end="935:35"><name pos:start="935:33" pos:end="935:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="935:39" pos:end="935:40"><expr pos:start="935:39" pos:end="935:40"><operator pos:start="935:39" pos:end="935:39">&amp;</operator><name pos:start="935:40" pos:end="935:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="937:13" pos:end="947:13"><if pos:start="937:13" pos:end="947:13">if <condition pos:start="937:16" pos:end="937:23">(<expr pos:start="937:17" pos:end="937:22"><name pos:start="937:17" pos:end="937:22">stream</name></expr>)</condition> <block pos:start="937:25" pos:end="947:13">{<block_content pos:start="939:17" pos:end="945:17">

                <expr_stmt pos:start="939:17" pos:end="939:48"><expr pos:start="939:17" pos:end="939:47"><name pos:start="939:17" pos:end="939:35"><name pos:start="939:17" pos:end="939:25">video_enc</name><operator pos:start="939:26" pos:end="939:26">.</operator><name pos:start="939:27" pos:end="939:35">max_qdiff</name></name> <operator pos:start="939:37" pos:end="939:37">=</operator> <call pos:start="939:39" pos:end="939:47"><name pos:start="939:39" pos:end="939:42">atoi</name><argument_list pos:start="939:43" pos:end="939:47">(<argument pos:start="939:44" pos:end="939:46"><expr pos:start="939:44" pos:end="939:46"><name pos:start="939:44" pos:end="939:46">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="941:17" pos:end="945:17"><if pos:start="941:17" pos:end="945:17">if <condition pos:start="941:20" pos:end="941:72">(<expr pos:start="941:21" pos:end="941:71"><name pos:start="941:21" pos:end="941:39"><name pos:start="941:21" pos:end="941:29">video_enc</name><operator pos:start="941:30" pos:end="941:30">.</operator><name pos:start="941:31" pos:end="941:39">max_qdiff</name></name> <operator pos:start="941:41" pos:end="941:41">&lt;</operator> <literal type="number" pos:start="941:43" pos:end="941:43">1</literal> <operator pos:start="941:45" pos:end="941:46">||</operator> <name pos:start="941:48" pos:end="941:66"><name pos:start="941:48" pos:end="941:56">video_enc</name><operator pos:start="941:57" pos:end="941:57">.</operator><name pos:start="941:58" pos:end="941:66">max_qdiff</name></name> <operator pos:start="941:68" pos:end="941:68">&gt;</operator> <literal type="number" pos:start="941:70" pos:end="941:71">31</literal></expr>)</condition> <block pos:start="941:74" pos:end="945:17">{<block_content pos:start="943:21" pos:end="943:55">

                    <expr_stmt pos:start="943:21" pos:end="943:55"><expr pos:start="943:21" pos:end="943:54"><call pos:start="943:21" pos:end="943:54"><name pos:start="943:21" pos:end="943:25">ERROR</name><argument_list pos:start="943:26" pos:end="943:54">(<argument pos:start="943:27" pos:end="943:53"><expr pos:start="943:27" pos:end="943:53"><literal type="string" pos:start="943:27" pos:end="943:53">"VideoQDiff out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="949:11" pos:end="965:9">else if <condition pos:start="949:19" pos:end="949:52">(<expr pos:start="949:20" pos:end="949:51"><operator pos:start="949:20" pos:end="949:20">!</operator><call pos:start="949:21" pos:end="949:51"><name pos:start="949:21" pos:end="949:33">av_strcasecmp</name><argument_list pos:start="949:34" pos:end="949:51">(<argument pos:start="949:35" pos:end="949:37"><expr pos:start="949:35" pos:end="949:37"><name pos:start="949:35" pos:end="949:37">cmd</name></expr></argument>, <argument pos:start="949:40" pos:end="949:50"><expr pos:start="949:40" pos:end="949:50"><literal type="string" pos:start="949:40" pos:end="949:50">"VideoQMax"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="949:54" pos:end="965:9">{<block_content pos:start="951:13" pos:end="963:13">

            <expr_stmt pos:start="951:13" pos:end="951:42"><expr pos:start="951:13" pos:end="951:41"><call pos:start="951:13" pos:end="951:41"><name pos:start="951:13" pos:end="951:19">get_arg</name><argument_list pos:start="951:20" pos:end="951:41">(<argument pos:start="951:21" pos:end="951:23"><expr pos:start="951:21" pos:end="951:23"><name pos:start="951:21" pos:end="951:23">arg</name></expr></argument>, <argument pos:start="951:26" pos:end="951:36"><expr pos:start="951:26" pos:end="951:36"><sizeof pos:start="951:26" pos:end="951:36">sizeof<argument_list pos:start="951:32" pos:end="951:36">(<argument pos:start="951:33" pos:end="951:35"><expr pos:start="951:33" pos:end="951:35"><name pos:start="951:33" pos:end="951:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="951:39" pos:end="951:40"><expr pos:start="951:39" pos:end="951:40"><operator pos:start="951:39" pos:end="951:39">&amp;</operator><name pos:start="951:40" pos:end="951:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="953:13" pos:end="963:13"><if pos:start="953:13" pos:end="963:13">if <condition pos:start="953:16" pos:end="953:23">(<expr pos:start="953:17" pos:end="953:22"><name pos:start="953:17" pos:end="953:22">stream</name></expr>)</condition> <block pos:start="953:25" pos:end="963:13">{<block_content pos:start="955:17" pos:end="961:17">

                <expr_stmt pos:start="955:17" pos:end="955:43"><expr pos:start="955:17" pos:end="955:42"><name pos:start="955:17" pos:end="955:30"><name pos:start="955:17" pos:end="955:25">video_enc</name><operator pos:start="955:26" pos:end="955:26">.</operator><name pos:start="955:27" pos:end="955:30">qmax</name></name> <operator pos:start="955:32" pos:end="955:32">=</operator> <call pos:start="955:34" pos:end="955:42"><name pos:start="955:34" pos:end="955:37">atoi</name><argument_list pos:start="955:38" pos:end="955:42">(<argument pos:start="955:39" pos:end="955:41"><expr pos:start="955:39" pos:end="955:41"><name pos:start="955:39" pos:end="955:41">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="957:17" pos:end="961:17"><if pos:start="957:17" pos:end="961:17">if <condition pos:start="957:20" pos:end="957:62">(<expr pos:start="957:21" pos:end="957:61"><name pos:start="957:21" pos:end="957:34"><name pos:start="957:21" pos:end="957:29">video_enc</name><operator pos:start="957:30" pos:end="957:30">.</operator><name pos:start="957:31" pos:end="957:34">qmax</name></name> <operator pos:start="957:36" pos:end="957:36">&lt;</operator> <literal type="number" pos:start="957:38" pos:end="957:38">1</literal> <operator pos:start="957:40" pos:end="957:41">||</operator> <name pos:start="957:43" pos:end="957:56"><name pos:start="957:43" pos:end="957:51">video_enc</name><operator pos:start="957:52" pos:end="957:52">.</operator><name pos:start="957:53" pos:end="957:56">qmax</name></name> <operator pos:start="957:58" pos:end="957:58">&gt;</operator> <literal type="number" pos:start="957:60" pos:end="957:61">31</literal></expr>)</condition> <block pos:start="957:64" pos:end="961:17">{<block_content pos:start="959:21" pos:end="959:54">

                    <expr_stmt pos:start="959:21" pos:end="959:54"><expr pos:start="959:21" pos:end="959:53"><call pos:start="959:21" pos:end="959:53"><name pos:start="959:21" pos:end="959:25">ERROR</name><argument_list pos:start="959:26" pos:end="959:53">(<argument pos:start="959:27" pos:end="959:52"><expr pos:start="959:27" pos:end="959:52"><literal type="string" pos:start="959:27" pos:end="959:52">"VideoQMax out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="965:11" pos:end="981:9">else if <condition pos:start="965:19" pos:end="965:52">(<expr pos:start="965:20" pos:end="965:51"><operator pos:start="965:20" pos:end="965:20">!</operator><call pos:start="965:21" pos:end="965:51"><name pos:start="965:21" pos:end="965:33">av_strcasecmp</name><argument_list pos:start="965:34" pos:end="965:51">(<argument pos:start="965:35" pos:end="965:37"><expr pos:start="965:35" pos:end="965:37"><name pos:start="965:35" pos:end="965:37">cmd</name></expr></argument>, <argument pos:start="965:40" pos:end="965:50"><expr pos:start="965:40" pos:end="965:50"><literal type="string" pos:start="965:40" pos:end="965:50">"VideoQMin"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="965:54" pos:end="981:9">{<block_content pos:start="967:13" pos:end="979:13">

            <expr_stmt pos:start="967:13" pos:end="967:42"><expr pos:start="967:13" pos:end="967:41"><call pos:start="967:13" pos:end="967:41"><name pos:start="967:13" pos:end="967:19">get_arg</name><argument_list pos:start="967:20" pos:end="967:41">(<argument pos:start="967:21" pos:end="967:23"><expr pos:start="967:21" pos:end="967:23"><name pos:start="967:21" pos:end="967:23">arg</name></expr></argument>, <argument pos:start="967:26" pos:end="967:36"><expr pos:start="967:26" pos:end="967:36"><sizeof pos:start="967:26" pos:end="967:36">sizeof<argument_list pos:start="967:32" pos:end="967:36">(<argument pos:start="967:33" pos:end="967:35"><expr pos:start="967:33" pos:end="967:35"><name pos:start="967:33" pos:end="967:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="967:39" pos:end="967:40"><expr pos:start="967:39" pos:end="967:40"><operator pos:start="967:39" pos:end="967:39">&amp;</operator><name pos:start="967:40" pos:end="967:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="969:13" pos:end="979:13"><if pos:start="969:13" pos:end="979:13">if <condition pos:start="969:16" pos:end="969:23">(<expr pos:start="969:17" pos:end="969:22"><name pos:start="969:17" pos:end="969:22">stream</name></expr>)</condition> <block pos:start="969:25" pos:end="979:13">{<block_content pos:start="971:17" pos:end="977:17">

                <expr_stmt pos:start="971:17" pos:end="971:43"><expr pos:start="971:17" pos:end="971:42"><name pos:start="971:17" pos:end="971:30"><name pos:start="971:17" pos:end="971:25">video_enc</name><operator pos:start="971:26" pos:end="971:26">.</operator><name pos:start="971:27" pos:end="971:30">qmin</name></name> <operator pos:start="971:32" pos:end="971:32">=</operator> <call pos:start="971:34" pos:end="971:42"><name pos:start="971:34" pos:end="971:37">atoi</name><argument_list pos:start="971:38" pos:end="971:42">(<argument pos:start="971:39" pos:end="971:41"><expr pos:start="971:39" pos:end="971:41"><name pos:start="971:39" pos:end="971:41">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="973:17" pos:end="977:17"><if pos:start="973:17" pos:end="977:17">if <condition pos:start="973:20" pos:end="973:62">(<expr pos:start="973:21" pos:end="973:61"><name pos:start="973:21" pos:end="973:34"><name pos:start="973:21" pos:end="973:29">video_enc</name><operator pos:start="973:30" pos:end="973:30">.</operator><name pos:start="973:31" pos:end="973:34">qmin</name></name> <operator pos:start="973:36" pos:end="973:36">&lt;</operator> <literal type="number" pos:start="973:38" pos:end="973:38">1</literal> <operator pos:start="973:40" pos:end="973:41">||</operator> <name pos:start="973:43" pos:end="973:56"><name pos:start="973:43" pos:end="973:51">video_enc</name><operator pos:start="973:52" pos:end="973:52">.</operator><name pos:start="973:53" pos:end="973:56">qmin</name></name> <operator pos:start="973:58" pos:end="973:58">&gt;</operator> <literal type="number" pos:start="973:60" pos:end="973:61">31</literal></expr>)</condition> <block pos:start="973:64" pos:end="977:17">{<block_content pos:start="975:21" pos:end="975:54">

                    <expr_stmt pos:start="975:21" pos:end="975:54"><expr pos:start="975:21" pos:end="975:53"><call pos:start="975:21" pos:end="975:53"><name pos:start="975:21" pos:end="975:25">ERROR</name><argument_list pos:start="975:26" pos:end="975:53">(<argument pos:start="975:27" pos:end="975:52"><expr pos:start="975:27" pos:end="975:52"><literal type="string" pos:start="975:27" pos:end="975:52">"VideoQMin out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="981:11" pos:end="989:9">else if <condition pos:start="981:19" pos:end="981:51">(<expr pos:start="981:20" pos:end="981:50"><operator pos:start="981:20" pos:end="981:20">!</operator><call pos:start="981:21" pos:end="981:50"><name pos:start="981:21" pos:end="981:33">av_strcasecmp</name><argument_list pos:start="981:34" pos:end="981:50">(<argument pos:start="981:35" pos:end="981:37"><expr pos:start="981:35" pos:end="981:37"><name pos:start="981:35" pos:end="981:37">cmd</name></expr></argument>, <argument pos:start="981:40" pos:end="981:49"><expr pos:start="981:40" pos:end="981:49"><literal type="string" pos:start="981:40" pos:end="981:49">"LumiMask"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="981:53" pos:end="989:9">{<block_content pos:start="983:13" pos:end="987:51">

            <expr_stmt pos:start="983:13" pos:end="983:42"><expr pos:start="983:13" pos:end="983:41"><call pos:start="983:13" pos:end="983:41"><name pos:start="983:13" pos:end="983:19">get_arg</name><argument_list pos:start="983:20" pos:end="983:41">(<argument pos:start="983:21" pos:end="983:23"><expr pos:start="983:21" pos:end="983:23"><name pos:start="983:21" pos:end="983:23">arg</name></expr></argument>, <argument pos:start="983:26" pos:end="983:36"><expr pos:start="983:26" pos:end="983:36"><sizeof pos:start="983:26" pos:end="983:36">sizeof<argument_list pos:start="983:32" pos:end="983:36">(<argument pos:start="983:33" pos:end="983:35"><expr pos:start="983:33" pos:end="983:35"><name pos:start="983:33" pos:end="983:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="983:39" pos:end="983:40"><expr pos:start="983:39" pos:end="983:40"><operator pos:start="983:39" pos:end="983:39">&amp;</operator><name pos:start="983:40" pos:end="983:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="985:13" pos:end="987:51"><if pos:start="985:13" pos:end="987:51">if <condition pos:start="985:16" pos:end="985:23">(<expr pos:start="985:17" pos:end="985:22"><name pos:start="985:17" pos:end="985:22">stream</name></expr>)</condition><block type="pseudo" pos:start="987:17" pos:end="987:51"><block_content pos:start="987:17" pos:end="987:51">

                <expr_stmt pos:start="987:17" pos:end="987:51"><expr pos:start="987:17" pos:end="987:50"><name pos:start="987:17" pos:end="987:38"><name pos:start="987:17" pos:end="987:25">video_enc</name><operator pos:start="987:26" pos:end="987:26">.</operator><name pos:start="987:27" pos:end="987:38">lumi_masking</name></name> <operator pos:start="987:40" pos:end="987:40">=</operator> <call pos:start="987:42" pos:end="987:50"><name pos:start="987:42" pos:end="987:45">atof</name><argument_list pos:start="987:46" pos:end="987:50">(<argument pos:start="987:47" pos:end="987:49"><expr pos:start="987:47" pos:end="987:49"><name pos:start="987:47" pos:end="987:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="989:11" pos:end="997:9">else if <condition pos:start="989:19" pos:end="989:51">(<expr pos:start="989:20" pos:end="989:50"><operator pos:start="989:20" pos:end="989:20">!</operator><call pos:start="989:21" pos:end="989:50"><name pos:start="989:21" pos:end="989:33">av_strcasecmp</name><argument_list pos:start="989:34" pos:end="989:50">(<argument pos:start="989:35" pos:end="989:37"><expr pos:start="989:35" pos:end="989:37"><name pos:start="989:35" pos:end="989:37">cmd</name></expr></argument>, <argument pos:start="989:40" pos:end="989:49"><expr pos:start="989:40" pos:end="989:49"><literal type="string" pos:start="989:40" pos:end="989:49">"DarkMask"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="989:53" pos:end="997:9">{<block_content pos:start="991:13" pos:end="995:51">

            <expr_stmt pos:start="991:13" pos:end="991:42"><expr pos:start="991:13" pos:end="991:41"><call pos:start="991:13" pos:end="991:41"><name pos:start="991:13" pos:end="991:19">get_arg</name><argument_list pos:start="991:20" pos:end="991:41">(<argument pos:start="991:21" pos:end="991:23"><expr pos:start="991:21" pos:end="991:23"><name pos:start="991:21" pos:end="991:23">arg</name></expr></argument>, <argument pos:start="991:26" pos:end="991:36"><expr pos:start="991:26" pos:end="991:36"><sizeof pos:start="991:26" pos:end="991:36">sizeof<argument_list pos:start="991:32" pos:end="991:36">(<argument pos:start="991:33" pos:end="991:35"><expr pos:start="991:33" pos:end="991:35"><name pos:start="991:33" pos:end="991:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="991:39" pos:end="991:40"><expr pos:start="991:39" pos:end="991:40"><operator pos:start="991:39" pos:end="991:39">&amp;</operator><name pos:start="991:40" pos:end="991:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="993:13" pos:end="995:51"><if pos:start="993:13" pos:end="995:51">if <condition pos:start="993:16" pos:end="993:23">(<expr pos:start="993:17" pos:end="993:22"><name pos:start="993:17" pos:end="993:22">stream</name></expr>)</condition><block type="pseudo" pos:start="995:17" pos:end="995:51"><block_content pos:start="995:17" pos:end="995:51">

                <expr_stmt pos:start="995:17" pos:end="995:51"><expr pos:start="995:17" pos:end="995:50"><name pos:start="995:17" pos:end="995:38"><name pos:start="995:17" pos:end="995:25">video_enc</name><operator pos:start="995:26" pos:end="995:26">.</operator><name pos:start="995:27" pos:end="995:38">dark_masking</name></name> <operator pos:start="995:40" pos:end="995:40">=</operator> <call pos:start="995:42" pos:end="995:50"><name pos:start="995:42" pos:end="995:45">atof</name><argument_list pos:start="995:46" pos:end="995:50">(<argument pos:start="995:47" pos:end="995:49"><expr pos:start="995:47" pos:end="995:49"><name pos:start="995:47" pos:end="995:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="997:11" pos:end="1001:9">else if <condition pos:start="997:19" pos:end="997:50">(<expr pos:start="997:20" pos:end="997:49"><operator pos:start="997:20" pos:end="997:20">!</operator><call pos:start="997:21" pos:end="997:49"><name pos:start="997:21" pos:end="997:33">av_strcasecmp</name><argument_list pos:start="997:34" pos:end="997:49">(<argument pos:start="997:35" pos:end="997:37"><expr pos:start="997:35" pos:end="997:37"><name pos:start="997:35" pos:end="997:37">cmd</name></expr></argument>, <argument pos:start="997:40" pos:end="997:48"><expr pos:start="997:40" pos:end="997:48"><literal type="string" pos:start="997:40" pos:end="997:48">"NoVideo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="997:52" pos:end="1001:9">{<block_content pos:start="999:13" pos:end="999:40">

            <expr_stmt pos:start="999:13" pos:end="999:40"><expr pos:start="999:13" pos:end="999:39"><name pos:start="999:13" pos:end="999:20">video_id</name> <operator pos:start="999:22" pos:end="999:22">=</operator> <name pos:start="999:24" pos:end="999:39">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1001:11" pos:end="1005:9">else if <condition pos:start="1001:19" pos:end="1001:50">(<expr pos:start="1001:20" pos:end="1001:49"><operator pos:start="1001:20" pos:end="1001:20">!</operator><call pos:start="1001:21" pos:end="1001:49"><name pos:start="1001:21" pos:end="1001:33">av_strcasecmp</name><argument_list pos:start="1001:34" pos:end="1001:49">(<argument pos:start="1001:35" pos:end="1001:37"><expr pos:start="1001:35" pos:end="1001:37"><name pos:start="1001:35" pos:end="1001:37">cmd</name></expr></argument>, <argument pos:start="1001:40" pos:end="1001:48"><expr pos:start="1001:40" pos:end="1001:48"><literal type="string" pos:start="1001:40" pos:end="1001:48">"NoAudio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1001:52" pos:end="1005:9">{<block_content pos:start="1003:13" pos:end="1003:40">

            <expr_stmt pos:start="1003:13" pos:end="1003:40"><expr pos:start="1003:13" pos:end="1003:39"><name pos:start="1003:13" pos:end="1003:20">audio_id</name> <operator pos:start="1003:22" pos:end="1003:22">=</operator> <name pos:start="1003:24" pos:end="1003:39">AV_CODEC_ID_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1005:11" pos:end="1009:9">else if <condition pos:start="1005:19" pos:end="1005:46">(<expr pos:start="1005:20" pos:end="1005:45"><operator pos:start="1005:20" pos:end="1005:20">!</operator><call pos:start="1005:21" pos:end="1005:45"><name pos:start="1005:21" pos:end="1005:33">av_strcasecmp</name><argument_list pos:start="1005:34" pos:end="1005:45">(<argument pos:start="1005:35" pos:end="1005:37"><expr pos:start="1005:35" pos:end="1005:37"><name pos:start="1005:35" pos:end="1005:37">cmd</name></expr></argument>, <argument pos:start="1005:40" pos:end="1005:44"><expr pos:start="1005:40" pos:end="1005:44"><literal type="string" pos:start="1005:40" pos:end="1005:44">"ACL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1005:48" pos:end="1009:9">{<block_content pos:start="1007:13" pos:end="1007:69">

            <expr_stmt pos:start="1007:13" pos:end="1007:69"><expr pos:start="1007:13" pos:end="1007:68"><call pos:start="1007:13" pos:end="1007:68"><name pos:start="1007:13" pos:end="1007:25">parse_acl_row</name><argument_list pos:start="1007:26" pos:end="1007:68">(<argument pos:start="1007:27" pos:end="1007:32"><expr pos:start="1007:27" pos:end="1007:32"><name pos:start="1007:27" pos:end="1007:32">stream</name></expr></argument>, <argument pos:start="1007:35" pos:end="1007:38"><expr pos:start="1007:35" pos:end="1007:38"><name pos:start="1007:35" pos:end="1007:38">feed</name></expr></argument>, <argument pos:start="1007:41" pos:end="1007:44"><expr pos:start="1007:41" pos:end="1007:44"><name pos:start="1007:41" pos:end="1007:44">NULL</name></expr></argument>, <argument pos:start="1007:47" pos:end="1007:47"><expr pos:start="1007:47" pos:end="1007:47"><name pos:start="1007:47" pos:end="1007:47">p</name></expr></argument>, <argument pos:start="1007:50" pos:end="1007:57"><expr pos:start="1007:50" pos:end="1007:57"><name pos:start="1007:50" pos:end="1007:57">filename</name></expr></argument>, <argument pos:start="1007:60" pos:end="1007:67"><expr pos:start="1007:60" pos:end="1007:67"><name pos:start="1007:60" pos:end="1007:67">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1009:11" pos:end="1017:9">else if <condition pos:start="1009:19" pos:end="1009:53">(<expr pos:start="1009:20" pos:end="1009:52"><operator pos:start="1009:20" pos:end="1009:20">!</operator><call pos:start="1009:21" pos:end="1009:52"><name pos:start="1009:21" pos:end="1009:33">av_strcasecmp</name><argument_list pos:start="1009:34" pos:end="1009:52">(<argument pos:start="1009:35" pos:end="1009:37"><expr pos:start="1009:35" pos:end="1009:37"><name pos:start="1009:35" pos:end="1009:37">cmd</name></expr></argument>, <argument pos:start="1009:40" pos:end="1009:51"><expr pos:start="1009:40" pos:end="1009:51"><literal type="string" pos:start="1009:40" pos:end="1009:51">"DynamicACL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1009:55" pos:end="1017:9">{<block_content pos:start="1011:13" pos:end="1015:13">

            <if_stmt pos:start="1011:13" pos:end="1015:13"><if pos:start="1011:13" pos:end="1015:13">if <condition pos:start="1011:16" pos:end="1011:23">(<expr pos:start="1011:17" pos:end="1011:22"><name pos:start="1011:17" pos:end="1011:22">stream</name></expr>)</condition> <block pos:start="1011:25" pos:end="1015:13">{<block_content pos:start="1013:17" pos:end="1013:78">

                <expr_stmt pos:start="1013:17" pos:end="1013:78"><expr pos:start="1013:17" pos:end="1013:77"><call pos:start="1013:17" pos:end="1013:77"><name pos:start="1013:17" pos:end="1013:23">get_arg</name><argument_list pos:start="1013:24" pos:end="1013:77">(<argument pos:start="1013:25" pos:end="1013:43"><expr pos:start="1013:25" pos:end="1013:43"><name pos:start="1013:25" pos:end="1013:43"><name pos:start="1013:25" pos:end="1013:30">stream</name><operator pos:start="1013:31" pos:end="1013:32">-&gt;</operator><name pos:start="1013:33" pos:end="1013:43">dynamic_acl</name></name></expr></argument>, <argument pos:start="1013:46" pos:end="1013:72"><expr pos:start="1013:46" pos:end="1013:72"><sizeof pos:start="1013:46" pos:end="1013:72">sizeof<argument_list pos:start="1013:52" pos:end="1013:72">(<argument pos:start="1013:53" pos:end="1013:71"><expr pos:start="1013:53" pos:end="1013:71"><name pos:start="1013:53" pos:end="1013:71"><name pos:start="1013:53" pos:end="1013:58">stream</name><operator pos:start="1013:59" pos:end="1013:60">-&gt;</operator><name pos:start="1013:61" pos:end="1013:71">dynamic_acl</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1013:75" pos:end="1013:76"><expr pos:start="1013:75" pos:end="1013:76"><operator pos:start="1013:75" pos:end="1013:75">&amp;</operator><name pos:start="1013:76" pos:end="1013:76">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1017:11" pos:end="1029:9">else if <condition pos:start="1017:19" pos:end="1017:53">(<expr pos:start="1017:20" pos:end="1017:52"><operator pos:start="1017:20" pos:end="1017:20">!</operator><call pos:start="1017:21" pos:end="1017:52"><name pos:start="1017:21" pos:end="1017:33">av_strcasecmp</name><argument_list pos:start="1017:34" pos:end="1017:52">(<argument pos:start="1017:35" pos:end="1017:37"><expr pos:start="1017:35" pos:end="1017:37"><name pos:start="1017:35" pos:end="1017:37">cmd</name></expr></argument>, <argument pos:start="1017:40" pos:end="1017:51"><expr pos:start="1017:40" pos:end="1017:51"><literal type="string" pos:start="1017:40" pos:end="1017:51">"RTSPOption"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1017:55" pos:end="1029:9">{<block_content pos:start="1019:13" pos:end="1027:13">

            <expr_stmt pos:start="1019:13" pos:end="1019:42"><expr pos:start="1019:13" pos:end="1019:41"><call pos:start="1019:13" pos:end="1019:41"><name pos:start="1019:13" pos:end="1019:19">get_arg</name><argument_list pos:start="1019:20" pos:end="1019:41">(<argument pos:start="1019:21" pos:end="1019:23"><expr pos:start="1019:21" pos:end="1019:23"><name pos:start="1019:21" pos:end="1019:23">arg</name></expr></argument>, <argument pos:start="1019:26" pos:end="1019:36"><expr pos:start="1019:26" pos:end="1019:36"><sizeof pos:start="1019:26" pos:end="1019:36">sizeof<argument_list pos:start="1019:32" pos:end="1019:36">(<argument pos:start="1019:33" pos:end="1019:35"><expr pos:start="1019:33" pos:end="1019:35"><name pos:start="1019:33" pos:end="1019:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1019:39" pos:end="1019:40"><expr pos:start="1019:39" pos:end="1019:40"><operator pos:start="1019:39" pos:end="1019:39">&amp;</operator><name pos:start="1019:40" pos:end="1019:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1021:13" pos:end="1027:13"><if pos:start="1021:13" pos:end="1027:13">if <condition pos:start="1021:16" pos:end="1021:23">(<expr pos:start="1021:17" pos:end="1021:22"><name pos:start="1021:17" pos:end="1021:22">stream</name></expr>)</condition> <block pos:start="1021:25" pos:end="1027:13">{<block_content pos:start="1023:17" pos:end="1025:53">

                <expr_stmt pos:start="1023:17" pos:end="1023:47"><expr pos:start="1023:17" pos:end="1023:46"><call pos:start="1023:17" pos:end="1023:46"><name pos:start="1023:17" pos:end="1023:24">av_freep</name><argument_list pos:start="1023:25" pos:end="1023:46">(<argument pos:start="1023:26" pos:end="1023:45"><expr pos:start="1023:26" pos:end="1023:45"><operator pos:start="1023:26" pos:end="1023:26">&amp;</operator><name pos:start="1023:27" pos:end="1023:45"><name pos:start="1023:27" pos:end="1023:32">stream</name><operator pos:start="1023:33" pos:end="1023:34">-&gt;</operator><name pos:start="1023:35" pos:end="1023:45">rtsp_option</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1025:17" pos:end="1025:53"><expr pos:start="1025:17" pos:end="1025:52"><name pos:start="1025:17" pos:end="1025:35"><name pos:start="1025:17" pos:end="1025:22">stream</name><operator pos:start="1025:23" pos:end="1025:24">-&gt;</operator><name pos:start="1025:25" pos:end="1025:35">rtsp_option</name></name> <operator pos:start="1025:37" pos:end="1025:37">=</operator> <call pos:start="1025:39" pos:end="1025:52"><name pos:start="1025:39" pos:end="1025:47">av_strdup</name><argument_list pos:start="1025:48" pos:end="1025:52">(<argument pos:start="1025:49" pos:end="1025:51"><expr pos:start="1025:49" pos:end="1025:51"><name pos:start="1025:49" pos:end="1025:51">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1029:11" pos:end="1047:9">else if <condition pos:start="1029:19" pos:end="1029:59">(<expr pos:start="1029:20" pos:end="1029:58"><operator pos:start="1029:20" pos:end="1029:20">!</operator><call pos:start="1029:21" pos:end="1029:58"><name pos:start="1029:21" pos:end="1029:33">av_strcasecmp</name><argument_list pos:start="1029:34" pos:end="1029:58">(<argument pos:start="1029:35" pos:end="1029:37"><expr pos:start="1029:35" pos:end="1029:37"><name pos:start="1029:35" pos:end="1029:37">cmd</name></expr></argument>, <argument pos:start="1029:40" pos:end="1029:57"><expr pos:start="1029:40" pos:end="1029:57"><literal type="string" pos:start="1029:40" pos:end="1029:57">"MulticastAddress"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1029:61" pos:end="1047:9">{<block_content pos:start="1031:13" pos:end="1045:13">

            <expr_stmt pos:start="1031:13" pos:end="1031:42"><expr pos:start="1031:13" pos:end="1031:41"><call pos:start="1031:13" pos:end="1031:41"><name pos:start="1031:13" pos:end="1031:19">get_arg</name><argument_list pos:start="1031:20" pos:end="1031:41">(<argument pos:start="1031:21" pos:end="1031:23"><expr pos:start="1031:21" pos:end="1031:23"><name pos:start="1031:21" pos:end="1031:23">arg</name></expr></argument>, <argument pos:start="1031:26" pos:end="1031:36"><expr pos:start="1031:26" pos:end="1031:36"><sizeof pos:start="1031:26" pos:end="1031:36">sizeof<argument_list pos:start="1031:32" pos:end="1031:36">(<argument pos:start="1031:33" pos:end="1031:35"><expr pos:start="1031:33" pos:end="1031:35"><name pos:start="1031:33" pos:end="1031:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1031:39" pos:end="1031:40"><expr pos:start="1031:39" pos:end="1031:40"><operator pos:start="1031:39" pos:end="1031:39">&amp;</operator><name pos:start="1031:40" pos:end="1031:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1033:13" pos:end="1045:13"><if pos:start="1033:13" pos:end="1045:13">if <condition pos:start="1033:16" pos:end="1033:23">(<expr pos:start="1033:17" pos:end="1033:22"><name pos:start="1033:17" pos:end="1033:22">stream</name></expr>)</condition> <block pos:start="1033:25" pos:end="1045:13">{<block_content pos:start="1035:17" pos:end="1043:33">

                <if_stmt pos:start="1035:17" pos:end="1039:17"><if pos:start="1035:17" pos:end="1039:17">if <condition pos:start="1035:20" pos:end="1035:66">(<expr pos:start="1035:21" pos:end="1035:65"><call pos:start="1035:21" pos:end="1035:60"><name pos:start="1035:21" pos:end="1035:32">resolve_host</name><argument_list pos:start="1035:33" pos:end="1035:60">(<argument pos:start="1035:34" pos:end="1035:54"><expr pos:start="1035:34" pos:end="1035:54"><operator pos:start="1035:34" pos:end="1035:34">&amp;</operator><name pos:start="1035:35" pos:end="1035:54"><name pos:start="1035:35" pos:end="1035:40">stream</name><operator pos:start="1035:41" pos:end="1035:42">-&gt;</operator><name pos:start="1035:43" pos:end="1035:54">multicast_ip</name></name></expr></argument>, <argument pos:start="1035:57" pos:end="1035:59"><expr pos:start="1035:57" pos:end="1035:59"><name pos:start="1035:57" pos:end="1035:59">arg</name></expr></argument>)</argument_list></call> <operator pos:start="1035:62" pos:end="1035:63">!=</operator> <literal type="number" pos:start="1035:65" pos:end="1035:65">0</literal></expr>)</condition> <block pos:start="1035:68" pos:end="1039:17">{<block_content pos:start="1037:21" pos:end="1037:64">

                    <expr_stmt pos:start="1037:21" pos:end="1037:64"><expr pos:start="1037:21" pos:end="1037:63"><call pos:start="1037:21" pos:end="1037:63"><name pos:start="1037:21" pos:end="1037:25">ERROR</name><argument_list pos:start="1037:26" pos:end="1037:63">(<argument pos:start="1037:27" pos:end="1037:57"><expr pos:start="1037:27" pos:end="1037:57"><literal type="string" pos:start="1037:27" pos:end="1037:57">"Invalid host/IP address: %s\n"</literal></expr></argument>, <argument pos:start="1037:60" pos:end="1037:62"><expr pos:start="1037:60" pos:end="1037:62"><name pos:start="1037:60" pos:end="1037:62">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1041:17" pos:end="1041:41"><expr pos:start="1041:17" pos:end="1041:40"><name pos:start="1041:17" pos:end="1041:36"><name pos:start="1041:17" pos:end="1041:22">stream</name><operator pos:start="1041:23" pos:end="1041:24">-&gt;</operator><name pos:start="1041:25" pos:end="1041:36">is_multicast</name></name> <operator pos:start="1041:38" pos:end="1041:38">=</operator> <literal type="number" pos:start="1041:40" pos:end="1041:40">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1043:17" pos:end="1043:33"><expr pos:start="1043:17" pos:end="1043:32"><name pos:start="1043:17" pos:end="1043:28"><name pos:start="1043:17" pos:end="1043:22">stream</name><operator pos:start="1043:23" pos:end="1043:24">-&gt;</operator><name pos:start="1043:25" pos:end="1043:28">loop</name></name> <operator pos:start="1043:30" pos:end="1043:30">=</operator> <literal type="number" pos:start="1043:32" pos:end="1043:32">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="1043:35" pos:end="1043:58">/* default is looping */</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1047:11" pos:end="1055:9">else if <condition pos:start="1047:19" pos:end="1047:56">(<expr pos:start="1047:20" pos:end="1047:55"><operator pos:start="1047:20" pos:end="1047:20">!</operator><call pos:start="1047:21" pos:end="1047:55"><name pos:start="1047:21" pos:end="1047:33">av_strcasecmp</name><argument_list pos:start="1047:34" pos:end="1047:55">(<argument pos:start="1047:35" pos:end="1047:37"><expr pos:start="1047:35" pos:end="1047:37"><name pos:start="1047:35" pos:end="1047:37">cmd</name></expr></argument>, <argument pos:start="1047:40" pos:end="1047:54"><expr pos:start="1047:40" pos:end="1047:54"><literal type="string" pos:start="1047:40" pos:end="1047:54">"MulticastPort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1047:58" pos:end="1055:9">{<block_content pos:start="1049:13" pos:end="1053:51">

            <expr_stmt pos:start="1049:13" pos:end="1049:42"><expr pos:start="1049:13" pos:end="1049:41"><call pos:start="1049:13" pos:end="1049:41"><name pos:start="1049:13" pos:end="1049:19">get_arg</name><argument_list pos:start="1049:20" pos:end="1049:41">(<argument pos:start="1049:21" pos:end="1049:23"><expr pos:start="1049:21" pos:end="1049:23"><name pos:start="1049:21" pos:end="1049:23">arg</name></expr></argument>, <argument pos:start="1049:26" pos:end="1049:36"><expr pos:start="1049:26" pos:end="1049:36"><sizeof pos:start="1049:26" pos:end="1049:36">sizeof<argument_list pos:start="1049:32" pos:end="1049:36">(<argument pos:start="1049:33" pos:end="1049:35"><expr pos:start="1049:33" pos:end="1049:35"><name pos:start="1049:33" pos:end="1049:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1049:39" pos:end="1049:40"><expr pos:start="1049:39" pos:end="1049:40"><operator pos:start="1049:39" pos:end="1049:39">&amp;</operator><name pos:start="1049:40" pos:end="1049:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1051:13" pos:end="1053:51"><if pos:start="1051:13" pos:end="1053:51">if <condition pos:start="1051:16" pos:end="1051:23">(<expr pos:start="1051:17" pos:end="1051:22"><name pos:start="1051:17" pos:end="1051:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1053:17" pos:end="1053:51"><block_content pos:start="1053:17" pos:end="1053:51">

                <expr_stmt pos:start="1053:17" pos:end="1053:51"><expr pos:start="1053:17" pos:end="1053:50"><name pos:start="1053:17" pos:end="1053:38"><name pos:start="1053:17" pos:end="1053:22">stream</name><operator pos:start="1053:23" pos:end="1053:24">-&gt;</operator><name pos:start="1053:25" pos:end="1053:38">multicast_port</name></name> <operator pos:start="1053:40" pos:end="1053:40">=</operator> <call pos:start="1053:42" pos:end="1053:50"><name pos:start="1053:42" pos:end="1053:45">atoi</name><argument_list pos:start="1053:46" pos:end="1053:50">(<argument pos:start="1053:47" pos:end="1053:49"><expr pos:start="1053:47" pos:end="1053:49"><name pos:start="1053:47" pos:end="1053:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1055:11" pos:end="1063:9">else if <condition pos:start="1055:19" pos:end="1055:55">(<expr pos:start="1055:20" pos:end="1055:54"><operator pos:start="1055:20" pos:end="1055:20">!</operator><call pos:start="1055:21" pos:end="1055:54"><name pos:start="1055:21" pos:end="1055:33">av_strcasecmp</name><argument_list pos:start="1055:34" pos:end="1055:54">(<argument pos:start="1055:35" pos:end="1055:37"><expr pos:start="1055:35" pos:end="1055:37"><name pos:start="1055:35" pos:end="1055:37">cmd</name></expr></argument>, <argument pos:start="1055:40" pos:end="1055:53"><expr pos:start="1055:40" pos:end="1055:53"><literal type="string" pos:start="1055:40" pos:end="1055:53">"MulticastTTL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1055:57" pos:end="1063:9">{<block_content pos:start="1057:13" pos:end="1061:50">

            <expr_stmt pos:start="1057:13" pos:end="1057:42"><expr pos:start="1057:13" pos:end="1057:41"><call pos:start="1057:13" pos:end="1057:41"><name pos:start="1057:13" pos:end="1057:19">get_arg</name><argument_list pos:start="1057:20" pos:end="1057:41">(<argument pos:start="1057:21" pos:end="1057:23"><expr pos:start="1057:21" pos:end="1057:23"><name pos:start="1057:21" pos:end="1057:23">arg</name></expr></argument>, <argument pos:start="1057:26" pos:end="1057:36"><expr pos:start="1057:26" pos:end="1057:36"><sizeof pos:start="1057:26" pos:end="1057:36">sizeof<argument_list pos:start="1057:32" pos:end="1057:36">(<argument pos:start="1057:33" pos:end="1057:35"><expr pos:start="1057:33" pos:end="1057:35"><name pos:start="1057:33" pos:end="1057:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1057:39" pos:end="1057:40"><expr pos:start="1057:39" pos:end="1057:40"><operator pos:start="1057:39" pos:end="1057:39">&amp;</operator><name pos:start="1057:40" pos:end="1057:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1059:13" pos:end="1061:50"><if pos:start="1059:13" pos:end="1061:50">if <condition pos:start="1059:16" pos:end="1059:23">(<expr pos:start="1059:17" pos:end="1059:22"><name pos:start="1059:17" pos:end="1059:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1061:17" pos:end="1061:50"><block_content pos:start="1061:17" pos:end="1061:50">

                <expr_stmt pos:start="1061:17" pos:end="1061:50"><expr pos:start="1061:17" pos:end="1061:49"><name pos:start="1061:17" pos:end="1061:37"><name pos:start="1061:17" pos:end="1061:22">stream</name><operator pos:start="1061:23" pos:end="1061:24">-&gt;</operator><name pos:start="1061:25" pos:end="1061:37">multicast_ttl</name></name> <operator pos:start="1061:39" pos:end="1061:39">=</operator> <call pos:start="1061:41" pos:end="1061:49"><name pos:start="1061:41" pos:end="1061:44">atoi</name><argument_list pos:start="1061:45" pos:end="1061:49">(<argument pos:start="1061:46" pos:end="1061:48"><expr pos:start="1061:46" pos:end="1061:48"><name pos:start="1061:46" pos:end="1061:48">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1063:11" pos:end="1069:9">else if <condition pos:start="1063:19" pos:end="1063:49">(<expr pos:start="1063:20" pos:end="1063:48"><operator pos:start="1063:20" pos:end="1063:20">!</operator><call pos:start="1063:21" pos:end="1063:48"><name pos:start="1063:21" pos:end="1063:33">av_strcasecmp</name><argument_list pos:start="1063:34" pos:end="1063:48">(<argument pos:start="1063:35" pos:end="1063:37"><expr pos:start="1063:35" pos:end="1063:37"><name pos:start="1063:35" pos:end="1063:37">cmd</name></expr></argument>, <argument pos:start="1063:40" pos:end="1063:47"><expr pos:start="1063:40" pos:end="1063:47"><literal type="string" pos:start="1063:40" pos:end="1063:47">"NoLoop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1063:51" pos:end="1069:9">{<block_content pos:start="1065:13" pos:end="1067:33">

            <if_stmt pos:start="1065:13" pos:end="1067:33"><if pos:start="1065:13" pos:end="1067:33">if <condition pos:start="1065:16" pos:end="1065:23">(<expr pos:start="1065:17" pos:end="1065:22"><name pos:start="1065:17" pos:end="1065:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1067:17" pos:end="1067:33"><block_content pos:start="1067:17" pos:end="1067:33">

                <expr_stmt pos:start="1067:17" pos:end="1067:33"><expr pos:start="1067:17" pos:end="1067:32"><name pos:start="1067:17" pos:end="1067:28"><name pos:start="1067:17" pos:end="1067:22">stream</name><operator pos:start="1067:23" pos:end="1067:24">-&gt;</operator><name pos:start="1067:25" pos:end="1067:28">loop</name></name> <operator pos:start="1067:30" pos:end="1067:30">=</operator> <literal type="number" pos:start="1067:32" pos:end="1067:32">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1069:11" pos:end="1105:9">else if <condition pos:start="1069:19" pos:end="1069:52">(<expr pos:start="1069:20" pos:end="1069:51"><operator pos:start="1069:20" pos:end="1069:20">!</operator><call pos:start="1069:21" pos:end="1069:51"><name pos:start="1069:21" pos:end="1069:33">av_strcasecmp</name><argument_list pos:start="1069:34" pos:end="1069:51">(<argument pos:start="1069:35" pos:end="1069:37"><expr pos:start="1069:35" pos:end="1069:37"><name pos:start="1069:35" pos:end="1069:37">cmd</name></expr></argument>, <argument pos:start="1069:40" pos:end="1069:50"><expr pos:start="1069:40" pos:end="1069:50"><literal type="string" pos:start="1069:40" pos:end="1069:50">"&lt;/Stream&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1069:54" pos:end="1105:9">{<block_content pos:start="1071:13" pos:end="1103:13">

            <if_stmt pos:start="1071:13" pos:end="1103:13"><if pos:start="1071:13" pos:end="1075:13">if <condition pos:start="1071:16" pos:end="1071:24">(<expr pos:start="1071:17" pos:end="1071:23"><operator pos:start="1071:17" pos:end="1071:17">!</operator><name pos:start="1071:18" pos:end="1071:23">stream</name></expr>)</condition> <block pos:start="1071:26" pos:end="1075:13">{<block_content pos:start="1073:17" pos:end="1073:67">

                <expr_stmt pos:start="1073:17" pos:end="1073:67"><expr pos:start="1073:17" pos:end="1073:66"><call pos:start="1073:17" pos:end="1073:66"><name pos:start="1073:17" pos:end="1073:21">ERROR</name><argument_list pos:start="1073:22" pos:end="1073:66">(<argument pos:start="1073:23" pos:end="1073:65"><expr pos:start="1073:23" pos:end="1073:65"><literal type="string" pos:start="1073:23" pos:end="1073:65">"No corresponding &lt;Stream&gt; for &lt;/Stream&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1075:15" pos:end="1103:13">else <block pos:start="1075:20" pos:end="1103:13">{<block_content pos:start="1077:17" pos:end="1101:30">

                <if_stmt pos:start="1077:17" pos:end="1099:17"><if pos:start="1077:17" pos:end="1099:17">if <condition pos:start="1077:20" pos:end="1077:89">(<expr pos:start="1077:21" pos:end="1077:88"><name pos:start="1077:21" pos:end="1077:32"><name pos:start="1077:21" pos:end="1077:26">stream</name><operator pos:start="1077:27" pos:end="1077:28">-&gt;</operator><name pos:start="1077:29" pos:end="1077:32">feed</name></name> <operator pos:start="1077:34" pos:end="1077:35">&amp;&amp;</operator> <name pos:start="1077:37" pos:end="1077:47"><name pos:start="1077:37" pos:end="1077:42">stream</name><operator pos:start="1077:43" pos:end="1077:44">-&gt;</operator><name pos:start="1077:45" pos:end="1077:47">fmt</name></name> <operator pos:start="1077:49" pos:end="1077:50">&amp;&amp;</operator> <call pos:start="1077:52" pos:end="1077:83"><name pos:start="1077:52" pos:end="1077:57">strcmp</name><argument_list pos:start="1077:58" pos:end="1077:83">(<argument pos:start="1077:59" pos:end="1077:75"><expr pos:start="1077:59" pos:end="1077:75"><name pos:start="1077:59" pos:end="1077:75"><name pos:start="1077:59" pos:end="1077:64">stream</name><operator pos:start="1077:65" pos:end="1077:66">-&gt;</operator><name pos:start="1077:67" pos:end="1077:69">fmt</name><operator pos:start="1077:70" pos:end="1077:71">-&gt;</operator><name pos:start="1077:72" pos:end="1077:75">name</name></name></expr></argument>, <argument pos:start="1077:78" pos:end="1077:82"><expr pos:start="1077:78" pos:end="1077:82"><literal type="string" pos:start="1077:78" pos:end="1077:82">"ffm"</literal></expr></argument>)</argument_list></call> <operator pos:start="1077:85" pos:end="1077:86">!=</operator> <literal type="number" pos:start="1077:88" pos:end="1077:88">0</literal></expr>)</condition> <block pos:start="1077:91" pos:end="1099:17">{<block_content pos:start="1079:21" pos:end="1097:21">

                    <if_stmt pos:start="1079:21" pos:end="1087:21"><if pos:start="1079:21" pos:end="1087:21">if <condition pos:start="1079:24" pos:end="1079:53">(<expr pos:start="1079:25" pos:end="1079:52"><name pos:start="1079:25" pos:end="1079:32">audio_id</name> <operator pos:start="1079:34" pos:end="1079:35">!=</operator> <name pos:start="1079:37" pos:end="1079:52">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="1079:55" pos:end="1087:21">{<block_content pos:start="1081:25" pos:end="1085:54">

                        <expr_stmt pos:start="1081:25" pos:end="1081:66"><expr pos:start="1081:25" pos:end="1081:65"><name pos:start="1081:25" pos:end="1081:44"><name pos:start="1081:25" pos:end="1081:33">audio_enc</name><operator pos:start="1081:34" pos:end="1081:34">.</operator><name pos:start="1081:35" pos:end="1081:44">codec_type</name></name> <operator pos:start="1081:46" pos:end="1081:46">=</operator> <name pos:start="1081:48" pos:end="1081:65">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1083:25" pos:end="1083:54"><expr pos:start="1083:25" pos:end="1083:53"><name pos:start="1083:25" pos:end="1083:42"><name pos:start="1083:25" pos:end="1083:33">audio_enc</name><operator pos:start="1083:34" pos:end="1083:34">.</operator><name pos:start="1083:35" pos:end="1083:42">codec_id</name></name> <operator pos:start="1083:44" pos:end="1083:44">=</operator> <name pos:start="1083:46" pos:end="1083:53">audio_id</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1085:25" pos:end="1085:54"><expr pos:start="1085:25" pos:end="1085:53"><call pos:start="1085:25" pos:end="1085:53"><name pos:start="1085:25" pos:end="1085:33">add_codec</name><argument_list pos:start="1085:34" pos:end="1085:53">(<argument pos:start="1085:35" pos:end="1085:40"><expr pos:start="1085:35" pos:end="1085:40"><name pos:start="1085:35" pos:end="1085:40">stream</name></expr></argument>, <argument pos:start="1085:43" pos:end="1085:52"><expr pos:start="1085:43" pos:end="1085:52"><operator pos:start="1085:43" pos:end="1085:43">&amp;</operator><name pos:start="1085:44" pos:end="1085:52">audio_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="1089:21" pos:end="1097:21"><if pos:start="1089:21" pos:end="1097:21">if <condition pos:start="1089:24" pos:end="1089:53">(<expr pos:start="1089:25" pos:end="1089:52"><name pos:start="1089:25" pos:end="1089:32">video_id</name> <operator pos:start="1089:34" pos:end="1089:35">!=</operator> <name pos:start="1089:37" pos:end="1089:52">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="1089:55" pos:end="1097:21">{<block_content pos:start="1091:25" pos:end="1095:54">

                        <expr_stmt pos:start="1091:25" pos:end="1091:66"><expr pos:start="1091:25" pos:end="1091:65"><name pos:start="1091:25" pos:end="1091:44"><name pos:start="1091:25" pos:end="1091:33">video_enc</name><operator pos:start="1091:34" pos:end="1091:34">.</operator><name pos:start="1091:35" pos:end="1091:44">codec_type</name></name> <operator pos:start="1091:46" pos:end="1091:46">=</operator> <name pos:start="1091:48" pos:end="1091:65">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1093:25" pos:end="1093:54"><expr pos:start="1093:25" pos:end="1093:53"><name pos:start="1093:25" pos:end="1093:42"><name pos:start="1093:25" pos:end="1093:33">video_enc</name><operator pos:start="1093:34" pos:end="1093:34">.</operator><name pos:start="1093:35" pos:end="1093:42">codec_id</name></name> <operator pos:start="1093:44" pos:end="1093:44">=</operator> <name pos:start="1093:46" pos:end="1093:53">video_id</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1095:25" pos:end="1095:54"><expr pos:start="1095:25" pos:end="1095:53"><call pos:start="1095:25" pos:end="1095:53"><name pos:start="1095:25" pos:end="1095:33">add_codec</name><argument_list pos:start="1095:34" pos:end="1095:53">(<argument pos:start="1095:35" pos:end="1095:40"><expr pos:start="1095:35" pos:end="1095:40"><name pos:start="1095:35" pos:end="1095:40">stream</name></expr></argument>, <argument pos:start="1095:43" pos:end="1095:52"><expr pos:start="1095:43" pos:end="1095:52"><operator pos:start="1095:43" pos:end="1095:43">&amp;</operator><name pos:start="1095:44" pos:end="1095:52">video_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1101:17" pos:end="1101:30"><expr pos:start="1101:17" pos:end="1101:29"><name pos:start="1101:17" pos:end="1101:22">stream</name> <operator pos:start="1101:24" pos:end="1101:24">=</operator> <name pos:start="1101:26" pos:end="1101:29">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1105:11" pos:end="1137:9">else if <condition pos:start="1105:19" pos:end="1105:52">(<expr pos:start="1105:20" pos:end="1105:51"><operator pos:start="1105:20" pos:end="1105:20">!</operator><call pos:start="1105:21" pos:end="1105:51"><name pos:start="1105:21" pos:end="1105:33">av_strcasecmp</name><argument_list pos:start="1105:34" pos:end="1105:51">(<argument pos:start="1105:35" pos:end="1105:37"><expr pos:start="1105:35" pos:end="1105:37"><name pos:start="1105:35" pos:end="1105:37">cmd</name></expr></argument>, <argument pos:start="1105:40" pos:end="1105:50"><expr pos:start="1105:40" pos:end="1105:50"><literal type="string" pos:start="1105:40" pos:end="1105:50">"&lt;Redirect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1105:54" pos:end="1137:9">{<block_content pos:start="1109:13" pos:end="1135:13">

            <comment type="block" format="doxygen" pos:start="1107:13" pos:end="1107:59">/*********************************************/</comment>

            <decl_stmt pos:start="1109:13" pos:end="1109:20"><decl pos:start="1109:13" pos:end="1109:19"><type pos:start="1109:13" pos:end="1109:18"><name pos:start="1109:13" pos:end="1109:16">char</name> <modifier pos:start="1109:18" pos:end="1109:18">*</modifier></type><name pos:start="1109:19" pos:end="1109:19">q</name></decl>;</decl_stmt>

            <if_stmt pos:start="1111:13" pos:end="1135:13"><if pos:start="1111:13" pos:end="1115:13">if <condition pos:start="1111:16" pos:end="1111:43">(<expr pos:start="1111:17" pos:end="1111:42"><name pos:start="1111:17" pos:end="1111:22">stream</name> <operator pos:start="1111:24" pos:end="1111:25">||</operator> <name pos:start="1111:27" pos:end="1111:30">feed</name> <operator pos:start="1111:32" pos:end="1111:33">||</operator> <name pos:start="1111:35" pos:end="1111:42">redirect</name></expr>)</condition> <block pos:start="1111:45" pos:end="1115:13">{<block_content pos:start="1113:17" pos:end="1113:44">

                <expr_stmt pos:start="1113:17" pos:end="1113:44"><expr pos:start="1113:17" pos:end="1113:43"><call pos:start="1113:17" pos:end="1113:43"><name pos:start="1113:17" pos:end="1113:21">ERROR</name><argument_list pos:start="1113:22" pos:end="1113:43">(<argument pos:start="1113:23" pos:end="1113:42"><expr pos:start="1113:23" pos:end="1113:42"><literal type="string" pos:start="1113:23" pos:end="1113:42">"Already in a tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1115:15" pos:end="1135:13">else <block pos:start="1115:20" pos:end="1135:13">{<block_content pos:start="1117:17" pos:end="1133:61">

                <expr_stmt pos:start="1117:17" pos:end="1117:56"><expr pos:start="1117:17" pos:end="1117:55"><name pos:start="1117:17" pos:end="1117:24">redirect</name> <operator pos:start="1117:26" pos:end="1117:26">=</operator> <call pos:start="1117:28" pos:end="1117:55"><name pos:start="1117:28" pos:end="1117:37">av_mallocz</name><argument_list pos:start="1117:38" pos:end="1117:55">(<argument pos:start="1117:39" pos:end="1117:54"><expr pos:start="1117:39" pos:end="1117:54"><sizeof pos:start="1117:39" pos:end="1117:54">sizeof<argument_list pos:start="1117:45" pos:end="1117:54">(<argument pos:start="1117:46" pos:end="1117:53"><expr pos:start="1117:46" pos:end="1117:53"><name pos:start="1117:46" pos:end="1117:53">FFStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1119:17" pos:end="1119:40"><expr pos:start="1119:17" pos:end="1119:39"><operator pos:start="1119:17" pos:end="1119:17">*</operator><name pos:start="1119:18" pos:end="1119:28">last_stream</name> <operator pos:start="1119:30" pos:end="1119:30">=</operator> <name pos:start="1119:32" pos:end="1119:39">redirect</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1121:17" pos:end="1121:46"><expr pos:start="1121:17" pos:end="1121:45"><name pos:start="1121:17" pos:end="1121:27">last_stream</name> <operator pos:start="1121:29" pos:end="1121:29">=</operator> <operator pos:start="1121:31" pos:end="1121:31">&amp;</operator><name pos:start="1121:32" pos:end="1121:45"><name pos:start="1121:32" pos:end="1121:39">redirect</name><operator pos:start="1121:40" pos:end="1121:41">-&gt;</operator><name pos:start="1121:42" pos:end="1121:45">next</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="1125:17" pos:end="1125:76"><expr pos:start="1125:17" pos:end="1125:75"><call pos:start="1125:17" pos:end="1125:75"><name pos:start="1125:17" pos:end="1125:23">get_arg</name><argument_list pos:start="1125:24" pos:end="1125:75">(<argument pos:start="1125:25" pos:end="1125:42"><expr pos:start="1125:25" pos:end="1125:42"><name pos:start="1125:25" pos:end="1125:42"><name pos:start="1125:25" pos:end="1125:32">redirect</name><operator pos:start="1125:33" pos:end="1125:34">-&gt;</operator><name pos:start="1125:35" pos:end="1125:42">filename</name></name></expr></argument>, <argument pos:start="1125:45" pos:end="1125:70"><expr pos:start="1125:45" pos:end="1125:70"><sizeof pos:start="1125:45" pos:end="1125:70">sizeof<argument_list pos:start="1125:51" pos:end="1125:70">(<argument pos:start="1125:52" pos:end="1125:69"><expr pos:start="1125:52" pos:end="1125:69"><name pos:start="1125:52" pos:end="1125:69"><name pos:start="1125:52" pos:end="1125:59">redirect</name><operator pos:start="1125:60" pos:end="1125:61">-&gt;</operator><name pos:start="1125:62" pos:end="1125:69">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1125:73" pos:end="1125:74"><expr pos:start="1125:73" pos:end="1125:74"><operator pos:start="1125:73" pos:end="1125:73">&amp;</operator><name pos:start="1125:74" pos:end="1125:74">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1127:17" pos:end="1127:53"><expr pos:start="1127:17" pos:end="1127:52"><name pos:start="1127:17" pos:end="1127:17">q</name> <operator pos:start="1127:19" pos:end="1127:19">=</operator> <call pos:start="1127:21" pos:end="1127:52"><name pos:start="1127:21" pos:end="1127:27">strrchr</name><argument_list pos:start="1127:28" pos:end="1127:52">(<argument pos:start="1127:29" pos:end="1127:46"><expr pos:start="1127:29" pos:end="1127:46"><name pos:start="1127:29" pos:end="1127:46"><name pos:start="1127:29" pos:end="1127:36">redirect</name><operator pos:start="1127:37" pos:end="1127:38">-&gt;</operator><name pos:start="1127:39" pos:end="1127:46">filename</name></name></expr></argument>, <argument pos:start="1127:49" pos:end="1127:51"><expr pos:start="1127:49" pos:end="1127:51"><literal type="char" pos:start="1127:49" pos:end="1127:51">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1129:17" pos:end="1131:30"><if pos:start="1129:17" pos:end="1131:30">if <condition pos:start="1129:20" pos:end="1129:23">(<expr pos:start="1129:21" pos:end="1129:22"><operator pos:start="1129:21" pos:end="1129:21">*</operator><name pos:start="1129:22" pos:end="1129:22">q</name></expr>)</condition><block type="pseudo" pos:start="1131:21" pos:end="1131:30"><block_content pos:start="1131:21" pos:end="1131:30">

                    <expr_stmt pos:start="1131:21" pos:end="1131:30"><expr pos:start="1131:21" pos:end="1131:29"><operator pos:start="1131:21" pos:end="1131:21">*</operator><name pos:start="1131:22" pos:end="1131:22">q</name> <operator pos:start="1131:24" pos:end="1131:24">=</operator> <literal type="char" pos:start="1131:26" pos:end="1131:29">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1133:17" pos:end="1133:61"><expr pos:start="1133:17" pos:end="1133:60"><name pos:start="1133:17" pos:end="1133:37"><name pos:start="1133:17" pos:end="1133:24">redirect</name><operator pos:start="1133:25" pos:end="1133:26">-&gt;</operator><name pos:start="1133:27" pos:end="1133:37">stream_type</name></name> <operator pos:start="1133:39" pos:end="1133:39">=</operator> <name pos:start="1133:41" pos:end="1133:60">STREAM_TYPE_REDIRECT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1137:11" pos:end="1143:9">else if <condition pos:start="1137:19" pos:end="1137:46">(<expr pos:start="1137:20" pos:end="1137:45"><operator pos:start="1137:20" pos:end="1137:20">!</operator><call pos:start="1137:21" pos:end="1137:45"><name pos:start="1137:21" pos:end="1137:33">av_strcasecmp</name><argument_list pos:start="1137:34" pos:end="1137:45">(<argument pos:start="1137:35" pos:end="1137:37"><expr pos:start="1137:35" pos:end="1137:37"><name pos:start="1137:35" pos:end="1137:37">cmd</name></expr></argument>, <argument pos:start="1137:40" pos:end="1137:44"><expr pos:start="1137:40" pos:end="1137:44"><literal type="string" pos:start="1137:40" pos:end="1137:44">"URL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1137:48" pos:end="1143:9">{<block_content pos:start="1139:13" pos:end="1141:86">

            <if_stmt pos:start="1139:13" pos:end="1141:86"><if pos:start="1139:13" pos:end="1141:86">if <condition pos:start="1139:16" pos:end="1139:25">(<expr pos:start="1139:17" pos:end="1139:24"><name pos:start="1139:17" pos:end="1139:24">redirect</name></expr>)</condition><block type="pseudo" pos:start="1141:17" pos:end="1141:86"><block_content pos:start="1141:17" pos:end="1141:86">

                <expr_stmt pos:start="1141:17" pos:end="1141:86"><expr pos:start="1141:17" pos:end="1141:85"><call pos:start="1141:17" pos:end="1141:85"><name pos:start="1141:17" pos:end="1141:23">get_arg</name><argument_list pos:start="1141:24" pos:end="1141:85">(<argument pos:start="1141:25" pos:end="1141:47"><expr pos:start="1141:25" pos:end="1141:47"><name pos:start="1141:25" pos:end="1141:47"><name pos:start="1141:25" pos:end="1141:32">redirect</name><operator pos:start="1141:33" pos:end="1141:34">-&gt;</operator><name pos:start="1141:35" pos:end="1141:47">feed_filename</name></name></expr></argument>, <argument pos:start="1141:50" pos:end="1141:80"><expr pos:start="1141:50" pos:end="1141:80"><sizeof pos:start="1141:50" pos:end="1141:80">sizeof<argument_list pos:start="1141:56" pos:end="1141:80">(<argument pos:start="1141:57" pos:end="1141:79"><expr pos:start="1141:57" pos:end="1141:79"><name pos:start="1141:57" pos:end="1141:79"><name pos:start="1141:57" pos:end="1141:64">redirect</name><operator pos:start="1141:65" pos:end="1141:66">-&gt;</operator><name pos:start="1141:67" pos:end="1141:79">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1141:83" pos:end="1141:84"><expr pos:start="1141:83" pos:end="1141:84"><operator pos:start="1141:83" pos:end="1141:83">&amp;</operator><name pos:start="1141:84" pos:end="1141:84">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1143:11" pos:end="1161:9">else if <condition pos:start="1143:19" pos:end="1143:54">(<expr pos:start="1143:20" pos:end="1143:53"><operator pos:start="1143:20" pos:end="1143:20">!</operator><call pos:start="1143:21" pos:end="1143:53"><name pos:start="1143:21" pos:end="1143:33">av_strcasecmp</name><argument_list pos:start="1143:34" pos:end="1143:53">(<argument pos:start="1143:35" pos:end="1143:37"><expr pos:start="1143:35" pos:end="1143:37"><name pos:start="1143:35" pos:end="1143:37">cmd</name></expr></argument>, <argument pos:start="1143:40" pos:end="1143:52"><expr pos:start="1143:40" pos:end="1143:52"><literal type="string" pos:start="1143:40" pos:end="1143:52">"&lt;/Redirect&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1143:56" pos:end="1161:9">{<block_content pos:start="1145:13" pos:end="1159:13">

            <if_stmt pos:start="1145:13" pos:end="1159:13"><if pos:start="1145:13" pos:end="1149:13">if <condition pos:start="1145:16" pos:end="1145:26">(<expr pos:start="1145:17" pos:end="1145:25"><operator pos:start="1145:17" pos:end="1145:17">!</operator><name pos:start="1145:18" pos:end="1145:25">redirect</name></expr>)</condition> <block pos:start="1145:28" pos:end="1149:13">{<block_content pos:start="1147:17" pos:end="1147:71">

                <expr_stmt pos:start="1147:17" pos:end="1147:71"><expr pos:start="1147:17" pos:end="1147:70"><call pos:start="1147:17" pos:end="1147:70"><name pos:start="1147:17" pos:end="1147:21">ERROR</name><argument_list pos:start="1147:22" pos:end="1147:70">(<argument pos:start="1147:23" pos:end="1147:69"><expr pos:start="1147:23" pos:end="1147:69"><literal type="string" pos:start="1147:23" pos:end="1147:69">"No corresponding &lt;Redirect&gt; for &lt;/Redirect&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1149:15" pos:end="1159:13">else <block pos:start="1149:20" pos:end="1159:13">{<block_content pos:start="1151:17" pos:end="1157:32">

                <if_stmt pos:start="1151:17" pos:end="1155:17"><if pos:start="1151:17" pos:end="1155:17">if <condition pos:start="1151:20" pos:end="1151:48">(<expr pos:start="1151:21" pos:end="1151:47"><operator pos:start="1151:21" pos:end="1151:21">!</operator><name pos:start="1151:22" pos:end="1151:47"><name pos:start="1151:22" pos:end="1151:29">redirect</name><operator pos:start="1151:30" pos:end="1151:31">-&gt;</operator><name pos:start="1151:32" pos:end="1151:44">feed_filename</name><index pos:start="1151:45" pos:end="1151:47">[<expr pos:start="1151:46" pos:end="1151:46"><literal type="number" pos:start="1151:46" pos:end="1151:46">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="1151:50" pos:end="1155:17">{<block_content pos:start="1153:21" pos:end="1153:59">

                    <expr_stmt pos:start="1153:21" pos:end="1153:59"><expr pos:start="1153:21" pos:end="1153:58"><call pos:start="1153:21" pos:end="1153:58"><name pos:start="1153:21" pos:end="1153:25">ERROR</name><argument_list pos:start="1153:26" pos:end="1153:58">(<argument pos:start="1153:27" pos:end="1153:57"><expr pos:start="1153:27" pos:end="1153:57"><literal type="string" pos:start="1153:27" pos:end="1153:57">"No URL found for &lt;Redirect&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1157:17" pos:end="1157:32"><expr pos:start="1157:17" pos:end="1157:31"><name pos:start="1157:17" pos:end="1157:24">redirect</name> <operator pos:start="1157:26" pos:end="1157:26">=</operator> <name pos:start="1157:28" pos:end="1157:31">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1161:11" pos:end="1165:9">else if <condition pos:start="1161:19" pos:end="1161:53">(<expr pos:start="1161:20" pos:end="1161:52"><operator pos:start="1161:20" pos:end="1161:20">!</operator><call pos:start="1161:21" pos:end="1161:52"><name pos:start="1161:21" pos:end="1161:33">av_strcasecmp</name><argument_list pos:start="1161:34" pos:end="1161:52">(<argument pos:start="1161:35" pos:end="1161:37"><expr pos:start="1161:35" pos:end="1161:37"><name pos:start="1161:35" pos:end="1161:37">cmd</name></expr></argument>, <argument pos:start="1161:40" pos:end="1161:51"><expr pos:start="1161:40" pos:end="1161:51"><literal type="string" pos:start="1161:40" pos:end="1161:51">"LoadModule"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1161:55" pos:end="1165:9">{<block_content pos:start="1163:13" pos:end="1163:60">

            <expr_stmt pos:start="1163:13" pos:end="1163:60"><expr pos:start="1163:13" pos:end="1163:59"><call pos:start="1163:13" pos:end="1163:59"><name pos:start="1163:13" pos:end="1163:17">ERROR</name><argument_list pos:start="1163:18" pos:end="1163:59">(<argument pos:start="1163:19" pos:end="1163:58"><expr pos:start="1163:19" pos:end="1163:58"><literal type="string" pos:start="1163:19" pos:end="1163:58">"Loadable modules no longer supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1165:11" pos:end="1169:9">else <block pos:start="1165:16" pos:end="1169:9">{<block_content pos:start="1167:13" pos:end="1167:52">

            <expr_stmt pos:start="1167:13" pos:end="1167:52"><expr pos:start="1167:13" pos:end="1167:51"><call pos:start="1167:13" pos:end="1167:51"><name pos:start="1167:13" pos:end="1167:17">ERROR</name><argument_list pos:start="1167:18" pos:end="1167:51">(<argument pos:start="1167:19" pos:end="1167:45"><expr pos:start="1167:19" pos:end="1167:45"><literal type="string" pos:start="1167:19" pos:end="1167:45">"Incorrect keyword: '%s'\n"</literal></expr></argument>, <argument pos:start="1167:48" pos:end="1167:50"><expr pos:start="1167:48" pos:end="1167:50"><name pos:start="1167:48" pos:end="1167:50">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

<cpp:undef pos:start="1173:1" pos:end="1173:12">#<cpp:directive pos:start="1173:2" pos:end="1173:6">undef</cpp:directive> <name pos:start="1173:8" pos:end="1173:12">ERROR</name></cpp:undef>



    <expr_stmt pos:start="1177:5" pos:end="1177:14"><expr pos:start="1177:5" pos:end="1177:13"><call pos:start="1177:5" pos:end="1177:13"><name pos:start="1177:5" pos:end="1177:10">fclose</name><argument_list pos:start="1177:11" pos:end="1177:13">(<argument pos:start="1177:12" pos:end="1177:12"><expr pos:start="1177:12" pos:end="1177:12"><name pos:start="1177:12" pos:end="1177:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1179:5" pos:end="1185:17"><if pos:start="1179:5" pos:end="1181:18">if <condition pos:start="1179:8" pos:end="1179:15">(<expr pos:start="1179:9" pos:end="1179:14"><name pos:start="1179:9" pos:end="1179:14">errors</name></expr>)</condition><block type="pseudo" pos:start="1181:9" pos:end="1181:18"><block_content pos:start="1181:9" pos:end="1181:18">

        <return pos:start="1181:9" pos:end="1181:18">return <expr pos:start="1181:16" pos:end="1181:17"><operator pos:start="1181:16" pos:end="1181:16">-</operator><literal type="number" pos:start="1181:17" pos:end="1181:17">1</literal></expr>;</return></block_content></block></if>

    <else pos:start="1183:5" pos:end="1185:17">else<block type="pseudo" pos:start="1185:9" pos:end="1185:17"><block_content pos:start="1185:9" pos:end="1185:17">

        <return pos:start="1185:9" pos:end="1185:17">return <expr pos:start="1185:16" pos:end="1185:16"><literal type="number" pos:start="1185:16" pos:end="1185:16">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
