<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9838.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">initMMX2HScaler</name><parameter_list pos:start="1:28" pos:end="1:67">(<parameter pos:start="1:29" pos:end="1:36"><decl pos:start="1:29" pos:end="1:36"><type pos:start="1:29" pos:end="1:36"><name pos:start="1:29" pos:end="1:31">int</name></type> <name pos:start="1:33" pos:end="1:36">dstW</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:46"><decl pos:start="1:39" pos:end="1:46"><type pos:start="1:39" pos:end="1:46"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:46">xInc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:55">uint8_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:66">funnyCode</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:9" pos:end="163:9">

	<decl_stmt pos:start="5:9" pos:end="5:26"><decl pos:start="5:9" pos:end="5:25"><type pos:start="5:9" pos:end="5:17"><name pos:start="5:9" pos:end="5:15">uint8_t</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:25">fragment</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:26"><decl pos:start="7:9" pos:end="7:25"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:25">imm8OfPShufW1</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:26"><decl pos:start="9:9" pos:end="9:25"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:25">imm8OfPShufW2</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:27"><decl pos:start="11:9" pos:end="11:26"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:26">fragmentLength</name></decl>;</decl_stmt>



	<decl_stmt pos:start="15:9" pos:end="15:20"><decl pos:start="15:9" pos:end="15:16"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:16">xpos</name></decl>, <decl pos:start="15:19" pos:end="15:19"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:19" pos:end="15:19">i</name></decl>;</decl_stmt>



	<comment type="line" pos:start="19:9" pos:end="19:57">// create an optimized horizontal scaling routine</comment>



	<comment type="line" pos:start="23:9" pos:end="23:23">//code fragment</comment>



	<asm pos:start="27:9" pos:end="107:10">asm <specifier pos:start="27:13" pos:end="27:20">volatile</specifier>(

		"jmp 9f				\n\t"

	<comment type="line" pos:start="31:9" pos:end="31:16">// Begin</comment>

		"0:				\n\t"

		"movq (%%esi), %%mm0		\n\t" <comment type="line" pos:start="35:55" pos:end="35:71">//FIXME Alignment</comment>

		"movq %%mm0, %%mm1		\n\t"

		"psrlq $8, %%mm0		\n\t"

		"punpcklbw %%mm7, %%mm1	\n\t"

		"movq %%mm2, %%mm3		\n\t"

		"punpcklbw %%mm7, %%mm0	\n\t"

		"addw %%bx, %%cx		\n\t" <comment type="line" pos:start="47:55" pos:end="47:86">//2*xalpha += (4*lumXInc)&amp;0xFFFF</comment>

		"pshufw $0xFF, %%mm1, %%mm1	\n\t"

		"1:				\n\t"

		"adcl %%edx, %%esi		\n\t" <comment type="line" pos:start="53:55" pos:end="53:84">//xx+= (4*lumXInc)&gt;&gt;16 + carry</comment>

		"pshufw $0xFF, %%mm0, %%mm0	\n\t"

		"2:				\n\t"

		"psrlw $9, %%mm3		\n\t"

		"psubw %%mm1, %%mm0		\n\t"

		"pmullw %%mm3, %%mm0		\n\t"

		"paddw %%mm6, %%mm2		\n\t" <comment type="line" pos:start="65:55" pos:end="65:79">// 2*alpha += xpos&amp;0xFFFF</comment>

		"psllw $7, %%mm1		\n\t"

		"paddw %%mm1, %%mm0		\n\t"



		"movq %%mm0, (%%edi, %%eax)	\n\t"



		"addl $8, %%eax			\n\t"

	<comment type="line" pos:start="79:9" pos:end="79:14">// End</comment>

		"9:				\n\t"

<comment type="line" pos:start="83:1" pos:end="83:28">//		"int $3\n\t"</comment>

		"leal 0b, %0			\n\t"

		"leal 1b, %1			\n\t"

		"leal 2b, %2			\n\t"

		"decl %1			\n\t"

		"decl %2			\n\t"

		"subl %0, %1			\n\t"

		"subl %0, %2			\n\t"

		"leal 9b, %3			\n\t"

		"subl %0, %3			\n\t"

		:"=r" (fragment), "=r" (imm8OfPShufW1), "=r" (imm8OfPShufW2),

		"=r" (fragmentLength)

	);</asm>



	<expr_stmt pos:start="111:9" pos:end="111:16"><expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:12">xpos</name><operator pos:start="111:13" pos:end="111:13">=</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="111:18" pos:end="111:74">//lumXInc/2 - 0x8000; // difference between pixel centers</comment>



	<for pos:start="115:9" pos:end="163:9">for<control pos:start="115:12" pos:end="115:31">(<init pos:start="115:13" pos:end="115:16"><expr pos:start="115:13" pos:end="115:15"><name pos:start="115:13" pos:end="115:13">i</name><operator pos:start="115:14" pos:end="115:14">=</operator><literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>;</init> <condition pos:start="115:18" pos:end="115:26"><expr pos:start="115:18" pos:end="115:25"><name pos:start="115:18" pos:end="115:18">i</name><operator pos:start="115:19" pos:end="115:19">&lt;</operator><name pos:start="115:20" pos:end="115:23">dstW</name><operator pos:start="115:24" pos:end="115:24">/</operator><literal type="number" pos:start="115:25" pos:end="115:25">8</literal></expr>;</condition> <incr pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:28">i</name><operator pos:start="115:29" pos:end="115:30">++</operator></expr></incr>)</control>

	<block pos:start="117:9" pos:end="163:9">{<block_content pos:start="119:17" pos:end="161:27">

		<decl_stmt pos:start="119:17" pos:end="119:32"><decl pos:start="119:17" pos:end="119:31"><type pos:start="119:17" pos:end="119:19"><name pos:start="119:17" pos:end="119:19">int</name></type> <name pos:start="119:21" pos:end="119:22">xx</name><init pos:start="119:23" pos:end="119:31">=<expr pos:start="119:24" pos:end="119:31"><name pos:start="119:24" pos:end="119:27">xpos</name><operator pos:start="119:28" pos:end="119:29">&gt;&gt;</operator><literal type="number" pos:start="119:30" pos:end="119:31">16</literal></expr></init></decl>;</decl_stmt>



		<if_stmt pos:start="123:17" pos:end="159:17"><if pos:start="123:17" pos:end="159:17">if<condition pos:start="123:19" pos:end="123:30">(<expr pos:start="123:20" pos:end="123:29"><operator pos:start="123:20" pos:end="123:20">(</operator><name pos:start="123:21" pos:end="123:21">i</name><operator pos:start="123:22" pos:end="123:22">&amp;</operator><literal type="number" pos:start="123:23" pos:end="123:23">3</literal><operator pos:start="123:24" pos:end="123:24">)</operator> <operator pos:start="123:26" pos:end="123:27">==</operator> <literal type="number" pos:start="123:29" pos:end="123:29">0</literal></expr>)</condition>

		<block pos:start="125:17" pos:end="159:17">{<block_content pos:start="127:25" pos:end="157:63">

			<decl_stmt pos:start="127:25" pos:end="127:32"><decl pos:start="127:25" pos:end="127:31"><type pos:start="127:25" pos:end="127:27"><name pos:start="127:25" pos:end="127:27">int</name></type> <name pos:start="127:29" pos:end="127:29">a</name><init pos:start="127:30" pos:end="127:31">=<expr pos:start="127:31" pos:end="127:31"><literal type="number" pos:start="127:31" pos:end="127:31">0</literal></expr></init></decl>;</decl_stmt>

			<decl_stmt pos:start="129:25" pos:end="129:53"><decl pos:start="129:25" pos:end="129:52"><type pos:start="129:25" pos:end="129:27"><name pos:start="129:25" pos:end="129:27">int</name></type> <name pos:start="129:29" pos:end="129:29">b</name><init pos:start="129:30" pos:end="129:52">=<expr pos:start="129:31" pos:end="129:52"><operator pos:start="129:31" pos:end="129:31">(</operator><operator pos:start="129:32" pos:end="129:32">(</operator><name pos:start="129:33" pos:end="129:36">xpos</name><operator pos:start="129:37" pos:end="129:37">+</operator><name pos:start="129:38" pos:end="129:41">xInc</name><operator pos:start="129:42" pos:end="129:42">)</operator><operator pos:start="129:43" pos:end="129:44">&gt;&gt;</operator><literal type="number" pos:start="129:45" pos:end="129:46">16</literal><operator pos:start="129:47" pos:end="129:47">)</operator> <operator pos:start="129:49" pos:end="129:49">-</operator> <name pos:start="129:51" pos:end="129:52">xx</name></expr></init></decl>;</decl_stmt>

			<decl_stmt pos:start="131:25" pos:end="131:55"><decl pos:start="131:25" pos:end="131:54"><type pos:start="131:25" pos:end="131:27"><name pos:start="131:25" pos:end="131:27">int</name></type> <name pos:start="131:29" pos:end="131:29">c</name><init pos:start="131:30" pos:end="131:54">=<expr pos:start="131:31" pos:end="131:54"><operator pos:start="131:31" pos:end="131:31">(</operator><operator pos:start="131:32" pos:end="131:32">(</operator><name pos:start="131:33" pos:end="131:36">xpos</name><operator pos:start="131:37" pos:end="131:37">+</operator><name pos:start="131:38" pos:end="131:41">xInc</name><operator pos:start="131:42" pos:end="131:42">*</operator><literal type="number" pos:start="131:43" pos:end="131:43">2</literal><operator pos:start="131:44" pos:end="131:44">)</operator><operator pos:start="131:45" pos:end="131:46">&gt;&gt;</operator><literal type="number" pos:start="131:47" pos:end="131:48">16</literal><operator pos:start="131:49" pos:end="131:49">)</operator> <operator pos:start="131:51" pos:end="131:51">-</operator> <name pos:start="131:53" pos:end="131:54">xx</name></expr></init></decl>;</decl_stmt>

			<decl_stmt pos:start="133:25" pos:end="133:55"><decl pos:start="133:25" pos:end="133:54"><type pos:start="133:25" pos:end="133:27"><name pos:start="133:25" pos:end="133:27">int</name></type> <name pos:start="133:29" pos:end="133:29">d</name><init pos:start="133:30" pos:end="133:54">=<expr pos:start="133:31" pos:end="133:54"><operator pos:start="133:31" pos:end="133:31">(</operator><operator pos:start="133:32" pos:end="133:32">(</operator><name pos:start="133:33" pos:end="133:36">xpos</name><operator pos:start="133:37" pos:end="133:37">+</operator><name pos:start="133:38" pos:end="133:41">xInc</name><operator pos:start="133:42" pos:end="133:42">*</operator><literal type="number" pos:start="133:43" pos:end="133:43">3</literal><operator pos:start="133:44" pos:end="133:44">)</operator><operator pos:start="133:45" pos:end="133:46">&gt;&gt;</operator><literal type="number" pos:start="133:47" pos:end="133:48">16</literal><operator pos:start="133:49" pos:end="133:49">)</operator> <operator pos:start="133:51" pos:end="133:51">-</operator> <name pos:start="133:53" pos:end="133:54">xx</name></expr></init></decl>;</decl_stmt>



			<expr_stmt pos:start="137:25" pos:end="137:89"><expr pos:start="137:25" pos:end="137:88"><call pos:start="137:25" pos:end="137:88"><name pos:start="137:25" pos:end="137:30">memcpy</name><argument_list pos:start="137:31" pos:end="137:88">(<argument pos:start="137:32" pos:end="137:61"><expr pos:start="137:32" pos:end="137:61"><name pos:start="137:32" pos:end="137:40">funnyCode</name> <operator pos:start="137:42" pos:end="137:42">+</operator> <name pos:start="137:44" pos:end="137:57">fragmentLength</name><operator pos:start="137:58" pos:end="137:58">*</operator><name pos:start="137:59" pos:end="137:59">i</name><operator pos:start="137:60" pos:end="137:60">/</operator><literal type="number" pos:start="137:61" pos:end="137:61">4</literal></expr></argument>, <argument pos:start="137:64" pos:end="137:71"><expr pos:start="137:64" pos:end="137:71"><name pos:start="137:64" pos:end="137:71">fragment</name></expr></argument>, <argument pos:start="137:74" pos:end="137:87"><expr pos:start="137:74" pos:end="137:87"><name pos:start="137:74" pos:end="137:87">fragmentLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



			<expr_stmt pos:start="141:25" pos:end="145:61"><expr pos:start="141:25" pos:end="145:60"><name pos:start="141:25" pos:end="141:69"><name pos:start="141:25" pos:end="141:33">funnyCode</name><index pos:start="141:34" pos:end="141:69">[<expr pos:start="141:35" pos:end="141:68"><name pos:start="141:35" pos:end="141:48">fragmentLength</name><operator pos:start="141:49" pos:end="141:49">*</operator><name pos:start="141:50" pos:end="141:50">i</name><operator pos:start="141:51" pos:end="141:51">/</operator><literal type="number" pos:start="141:52" pos:end="141:52">4</literal> <operator pos:start="141:54" pos:end="141:54">+</operator> <name pos:start="141:56" pos:end="141:68">imm8OfPShufW1</name></expr>]</index></name><operator pos:start="141:70" pos:end="141:70">=</operator>

			<name pos:start="143:25" pos:end="143:69"><name pos:start="143:25" pos:end="143:33">funnyCode</name><index pos:start="143:34" pos:end="143:69">[<expr pos:start="143:35" pos:end="143:68"><name pos:start="143:35" pos:end="143:48">fragmentLength</name><operator pos:start="143:49" pos:end="143:49">*</operator><name pos:start="143:50" pos:end="143:50">i</name><operator pos:start="143:51" pos:end="143:51">/</operator><literal type="number" pos:start="143:52" pos:end="143:54">4</literal> <operator pos:start="143:54" pos:end="143:54">+</operator> <name pos:start="143:56" pos:end="143:68">imm8OfPShufW2</name></expr>]</index></name><operator pos:start="143:70" pos:end="143:70">=</operator>

				<name pos:start="145:33" pos:end="145:33">a</name> <operator pos:start="145:35" pos:end="145:35">|</operator> <operator pos:start="145:37" pos:end="145:37">(</operator><name pos:start="145:38" pos:end="145:38">b</name><operator pos:start="145:39" pos:end="145:40">&lt;&lt;</operator><literal type="number" pos:start="145:41" pos:end="145:41">2</literal><operator pos:start="145:42" pos:end="145:42">)</operator> <operator pos:start="145:44" pos:end="145:44">|</operator> <operator pos:start="145:46" pos:end="145:46">(</operator><name pos:start="145:47" pos:end="145:47">c</name><operator pos:start="145:48" pos:end="145:49">&lt;&lt;</operator><literal type="number" pos:start="145:50" pos:end="145:50">4</literal><operator pos:start="145:51" pos:end="145:51">)</operator> <operator pos:start="145:53" pos:end="145:53">|</operator> <operator pos:start="145:55" pos:end="145:55">(</operator><name pos:start="145:56" pos:end="145:56">d</name><operator pos:start="145:57" pos:end="145:58">&lt;&lt;</operator><literal type="number" pos:start="145:59" pos:end="145:59">6</literal><operator pos:start="145:60" pos:end="145:60">)</operator></expr>;</expr_stmt>



			<comment type="line" pos:start="149:25" pos:end="149:94">// if we dont need to read 8 bytes than dont :), reduces the chance of</comment>

			<comment type="line" pos:start="151:25" pos:end="151:48">// crossing a cache line</comment>

			<if_stmt pos:start="153:25" pos:end="153:72"><if pos:start="153:25" pos:end="153:72">if<condition pos:start="153:27" pos:end="153:31">(<expr pos:start="153:28" pos:end="153:30"><name pos:start="153:28" pos:end="153:28">d</name><operator pos:start="153:29" pos:end="153:29">&lt;</operator><literal type="number" pos:start="153:30" pos:end="153:30">3</literal></expr>)</condition><block type="pseudo" pos:start="153:33" pos:end="153:72"><block_content pos:start="153:33" pos:end="153:72"> <expr_stmt pos:start="153:33" pos:end="153:72"><expr pos:start="153:33" pos:end="153:71"><name pos:start="153:33" pos:end="153:65"><name pos:start="153:33" pos:end="153:41">funnyCode</name><index pos:start="153:42" pos:end="153:65">[<expr pos:start="153:43" pos:end="153:64"><name pos:start="153:43" pos:end="153:56">fragmentLength</name><operator pos:start="153:57" pos:end="153:57">*</operator><name pos:start="153:58" pos:end="153:58">i</name><operator pos:start="153:59" pos:end="153:59">/</operator><literal type="number" pos:start="153:60" pos:end="153:60">4</literal> <operator pos:start="153:62" pos:end="153:62">+</operator> <literal type="number" pos:start="153:64" pos:end="153:64">1</literal></expr>]</index></name><operator pos:start="153:66" pos:end="153:66">=</operator> <literal type="number" pos:start="153:68" pos:end="153:71">0x6E</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



			<expr_stmt pos:start="157:25" pos:end="157:63"><expr pos:start="157:25" pos:end="157:62"><name pos:start="157:25" pos:end="157:57"><name pos:start="157:25" pos:end="157:33">funnyCode</name><index pos:start="157:34" pos:end="157:57">[<expr pos:start="157:35" pos:end="157:56"><name pos:start="157:35" pos:end="157:48">fragmentLength</name><operator pos:start="157:49" pos:end="157:49">*</operator><operator pos:start="157:50" pos:end="157:50">(</operator><name pos:start="157:51" pos:end="157:51">i</name><operator pos:start="157:52" pos:end="157:52">+</operator><literal type="number" pos:start="157:53" pos:end="157:53">4</literal><operator pos:start="157:54" pos:end="157:54">)</operator><operator pos:start="157:55" pos:end="157:55">/</operator><literal type="number" pos:start="157:56" pos:end="157:56">4</literal></expr>]</index></name><operator pos:start="157:58" pos:end="157:58">=</operator> <name pos:start="157:60" pos:end="157:62">RET</name></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="161:17" pos:end="161:27"><expr pos:start="161:17" pos:end="161:26"><name pos:start="161:17" pos:end="161:20">xpos</name><operator pos:start="161:21" pos:end="161:22">+=</operator><name pos:start="161:23" pos:end="161:26">xInc</name></expr>;</expr_stmt>

	</block_content>}</block></for>

</block_content>}</block></function>
</unit>
