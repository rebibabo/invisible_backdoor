<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3420.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">build_filter</name><parameter_list pos:start="1:24" pos:end="3:57">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:39">ResampleContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">c</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:48">void</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">filter</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:71"><decl pos:start="1:59" pos:end="1:71"><type pos:start="1:59" pos:end="1:71"><name pos:start="1:59" pos:end="1:64">double</name></type> <name pos:start="1:66" pos:end="1:71">factor</name></decl></parameter>, <parameter pos:start="1:74" pos:end="1:86"><decl pos:start="1:74" pos:end="1:86"><type pos:start="1:74" pos:end="1:86"><name pos:start="1:74" pos:end="1:76">int</name></type> <name pos:start="1:78" pos:end="1:86">tap_count</name></decl></parameter>, <parameter pos:start="1:89" pos:end="1:97"><decl pos:start="1:89" pos:end="1:97"><type pos:start="1:89" pos:end="1:97"><name pos:start="1:89" pos:end="1:91">int</name></type> <name pos:start="1:93" pos:end="1:97">alloc</name></decl></parameter>, <parameter pos:start="1:100" pos:end="1:114"><decl pos:start="1:100" pos:end="1:114"><type pos:start="1:100" pos:end="1:114"><name pos:start="1:100" pos:end="1:102">int</name></type> <name pos:start="1:104" pos:end="1:114">phase_count</name></decl></parameter>, <parameter pos:start="1:117" pos:end="1:125"><decl pos:start="1:117" pos:end="1:125"><type pos:start="1:117" pos:end="1:125"><name pos:start="1:117" pos:end="1:119">int</name></type> <name pos:start="1:121" pos:end="1:125">scale</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:39">filter_type</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:56"><decl pos:start="3:42" pos:end="3:56"><type pos:start="3:42" pos:end="3:56"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:56">kaiser_beta</name></decl></parameter>)</parameter_list><block pos:start="3:58" pos:end="205:1">{<block_content pos:start="5:5" pos:end="203:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">ph</name></decl>, <decl pos:start="5:13" pos:end="5:13"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">double</name></type> <name pos:start="7:12" pos:end="7:12">x</name></decl>, <decl pos:start="7:15" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:15" pos:end="7:15">y</name></decl>, <decl pos:start="7:18" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:18" pos:end="7:18">w</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:60"><decl pos:start="9:5" pos:end="9:59"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">double</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:15">tab</name> <init pos:start="9:17" pos:end="9:59">= <expr pos:start="9:19" pos:end="9:59"><call pos:start="9:19" pos:end="9:59"><name pos:start="9:19" pos:end="9:33">av_malloc_array</name><argument_list pos:start="9:34" pos:end="9:59">(<argument pos:start="9:35" pos:end="9:43"><expr pos:start="9:35" pos:end="9:43"><name pos:start="9:35" pos:end="9:43">tap_count</name></expr></argument>,  <argument pos:start="9:47" pos:end="9:58"><expr pos:start="9:47" pos:end="9:58"><sizeof pos:start="9:47" pos:end="9:58">sizeof<argument_list pos:start="9:53" pos:end="9:58">(<argument pos:start="9:54" pos:end="9:57"><expr pos:start="9:54" pos:end="9:57"><operator pos:start="9:54" pos:end="9:54">*</operator><name pos:start="9:55" pos:end="9:57">tab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:13"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name></type> <name pos:start="11:15" pos:end="11:20">center</name><init pos:start="11:21" pos:end="11:37">= <expr pos:start="11:23" pos:end="11:37"><operator pos:start="11:23" pos:end="11:23">(</operator><name pos:start="11:24" pos:end="11:32">tap_count</name><operator pos:start="11:33" pos:end="11:33">-</operator><literal type="number" pos:start="11:34" pos:end="11:34">1</literal><operator pos:start="11:35" pos:end="11:35">)</operator><operator pos:start="11:36" pos:end="11:36">/</operator><literal type="number" pos:start="11:37" pos:end="11:37">2</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:31"><if pos:start="15:5" pos:end="17:31">if <condition pos:start="15:8" pos:end="15:13">(<expr pos:start="15:9" pos:end="15:12"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">tab</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:60">/* if upsampling, only need to interpolate, no filter */</comment>

    <if_stmt pos:start="23:5" pos:end="25:21"><if pos:start="23:5" pos:end="25:21">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:14">factor</name> <operator pos:start="23:16" pos:end="23:16">&gt;</operator> <literal type="number" pos:start="23:18" pos:end="23:20">1.0</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:21"><block_content pos:start="25:9" pos:end="25:21">

        <expr_stmt pos:start="25:9" pos:end="25:21"><expr pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:14">factor</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:20">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="29:5" pos:end="198:0">for<control pos:start="29:8" pos:end="29:33">(<init pos:start="29:9" pos:end="29:13"><expr pos:start="29:9" pos:end="29:12"><name pos:start="29:9" pos:end="29:10">ph</name><operator pos:start="29:11" pos:end="29:11">=</operator><literal type="number" pos:start="29:12" pos:end="29:12">0</literal></expr>;</init><condition pos:start="29:14" pos:end="29:28"><expr pos:start="29:14" pos:end="29:27"><name pos:start="29:14" pos:end="29:15">ph</name><operator pos:start="29:16" pos:end="29:16">&lt;</operator><name pos:start="29:17" pos:end="29:27">phase_count</name></expr>;</condition><incr pos:start="29:29" pos:end="29:32"><expr pos:start="29:29" pos:end="29:32"><name pos:start="29:29" pos:end="29:30">ph</name><operator pos:start="29:31" pos:end="29:32">++</operator></expr></incr>)</control> <block pos:start="29:35" pos:end="198:0">{<block_content pos:start="31:9" pos:end="123:9">

        <decl_stmt pos:start="31:9" pos:end="31:24"><decl pos:start="31:9" pos:end="31:23"><type pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:14">double</name></type> <name pos:start="31:16" pos:end="31:19">norm</name> <init pos:start="31:21" pos:end="31:23">= <expr pos:start="31:23" pos:end="31:23"><literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="33:9" pos:end="83:9">for<control pos:start="33:12" pos:end="33:32">(<init pos:start="33:13" pos:end="33:16"><expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:13">i</name><operator pos:start="33:14" pos:end="33:14">=</operator><literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>;</init><condition pos:start="33:17" pos:end="33:28"><expr pos:start="33:17" pos:end="33:27"><name pos:start="33:17" pos:end="33:17">i</name><operator pos:start="33:18" pos:end="33:18">&lt;</operator><name pos:start="33:19" pos:end="33:27">tap_count</name></expr>;</condition><incr pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:29">i</name><operator pos:start="33:30" pos:end="33:31">++</operator></expr></incr>)</control> <block pos:start="33:34" pos:end="83:9">{<block_content pos:start="35:13" pos:end="81:22">

            <expr_stmt pos:start="35:13" pos:end="35:82"><expr pos:start="35:13" pos:end="35:81"><name pos:start="35:13" pos:end="35:13">x</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:20">M_PI</name> <operator pos:start="35:22" pos:end="35:22">*</operator> <operator pos:start="35:24" pos:end="35:24">(</operator><operator pos:start="35:25" pos:end="35:25">(</operator><name pos:start="35:26" pos:end="35:31">double</name><operator pos:start="35:32" pos:end="35:32">)</operator><operator pos:start="35:33" pos:end="35:33">(</operator><name pos:start="35:34" pos:end="35:34">i</name> <operator pos:start="35:36" pos:end="35:36">-</operator> <name pos:start="35:38" pos:end="35:43">center</name><operator pos:start="35:44" pos:end="35:44">)</operator> <operator pos:start="35:46" pos:end="35:46">-</operator> <operator pos:start="35:48" pos:end="35:48">(</operator><name pos:start="35:49" pos:end="35:54">double</name><operator pos:start="35:55" pos:end="35:55">)</operator><name pos:start="35:56" pos:end="35:57">ph</name> <operator pos:start="35:59" pos:end="35:59">/</operator> <name pos:start="35:61" pos:end="35:71">phase_count</name><operator pos:start="35:72" pos:end="35:72">)</operator> <operator pos:start="35:74" pos:end="35:74">*</operator> <name pos:start="35:76" pos:end="35:81">factor</name></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="39:39"><if pos:start="37:13" pos:end="37:32">if <condition pos:start="37:16" pos:end="37:23">(<expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:17">x</name> <operator pos:start="37:19" pos:end="37:20">==</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>)</condition><block type="pseudo" pos:start="37:25" pos:end="37:32"><block_content pos:start="37:25" pos:end="37:32"> <expr_stmt pos:start="37:25" pos:end="37:32"><expr pos:start="37:25" pos:end="37:31"><name pos:start="37:25" pos:end="37:25">y</name> <operator pos:start="37:27" pos:end="37:27">=</operator> <literal type="number" pos:start="37:29" pos:end="37:31">1.0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="39:13" pos:end="39:39">else<block type="pseudo" pos:start="39:25" pos:end="39:39"><block_content pos:start="39:25" pos:end="39:39">        <expr_stmt pos:start="39:25" pos:end="39:39"><expr pos:start="39:25" pos:end="39:38"><name pos:start="39:25" pos:end="39:25">y</name> <operator pos:start="39:27" pos:end="39:27">=</operator> <call pos:start="39:29" pos:end="39:34"><name pos:start="39:29" pos:end="39:31">sin</name><argument_list pos:start="39:32" pos:end="39:34">(<argument pos:start="39:33" pos:end="39:33"><expr pos:start="39:33" pos:end="39:33"><name pos:start="39:33" pos:end="39:33">x</name></expr></argument>)</argument_list></call> <operator pos:start="39:36" pos:end="39:36">/</operator> <name pos:start="39:38" pos:end="39:38">x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <switch pos:start="41:13" pos:end="75:13">switch<condition pos:start="41:19" pos:end="41:31">(<expr pos:start="41:20" pos:end="41:30"><name pos:start="41:20" pos:end="41:30">filter_type</name></expr>)</condition><block pos:start="41:32" pos:end="75:13">{<block_content pos:start="43:13" pos:end="73:30">

            <case pos:start="43:13" pos:end="43:39">case <expr pos:start="43:18" pos:end="43:38"><name pos:start="43:18" pos:end="43:38">SWR_FILTER_TYPE_CUBIC</name></expr>:</case><block pos:start="43:40" pos:end="53:23">{<block_content pos:start="45:17" pos:end="53:22">

                <decl_stmt pos:start="45:17" pos:end="45:36"><decl pos:start="45:17" pos:end="45:35"><type pos:start="45:17" pos:end="45:27"><specifier pos:start="45:17" pos:end="45:21">const</specifier> <name pos:start="45:23" pos:end="45:27">float</name></type> <name pos:start="45:29" pos:end="45:29">d</name><init pos:start="45:30" pos:end="45:35">= <expr pos:start="45:32" pos:end="45:35"><operator pos:start="45:32" pos:end="45:32">-</operator><literal type="number" pos:start="45:33" pos:end="45:35">0.5</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="45:38" pos:end="45:68">//first order derivative = -0.5</comment>

                <expr_stmt pos:start="47:17" pos:end="47:85"><expr pos:start="47:17" pos:end="47:84"><name pos:start="47:17" pos:end="47:17">x</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:84"><name pos:start="47:21" pos:end="47:24">fabs</name><argument_list pos:start="47:25" pos:end="47:84">(<argument pos:start="47:26" pos:end="47:83"><expr pos:start="47:26" pos:end="47:83"><operator pos:start="47:26" pos:end="47:26">(</operator><operator pos:start="47:27" pos:end="47:27">(</operator><name pos:start="47:28" pos:end="47:33">double</name><operator pos:start="47:34" pos:end="47:34">)</operator><operator pos:start="47:35" pos:end="47:35">(</operator><name pos:start="47:36" pos:end="47:36">i</name> <operator pos:start="47:38" pos:end="47:38">-</operator> <name pos:start="47:40" pos:end="47:45">center</name><operator pos:start="47:46" pos:end="47:46">)</operator> <operator pos:start="47:48" pos:end="47:48">-</operator> <operator pos:start="47:50" pos:end="47:50">(</operator><name pos:start="47:51" pos:end="47:56">double</name><operator pos:start="47:57" pos:end="47:57">)</operator><name pos:start="47:58" pos:end="47:59">ph</name> <operator pos:start="47:61" pos:end="47:61">/</operator> <name pos:start="47:63" pos:end="47:73">phase_count</name><operator pos:start="47:74" pos:end="47:74">)</operator> <operator pos:start="47:76" pos:end="47:76">*</operator> <name pos:start="47:78" pos:end="47:83">factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="49:17" pos:end="51:80"><if pos:start="49:17" pos:end="49:80">if<condition pos:start="49:19" pos:end="49:25">(<expr pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:20">x</name><operator pos:start="49:21" pos:end="49:21">&lt;</operator><literal type="number" pos:start="49:22" pos:end="49:24">1.0</literal></expr>)</condition><block type="pseudo" pos:start="49:27" pos:end="49:80"><block_content pos:start="49:27" pos:end="49:80"> <expr_stmt pos:start="49:27" pos:end="49:80"><expr pos:start="49:27" pos:end="49:79"><name pos:start="49:27" pos:end="49:27">y</name><operator pos:start="49:28" pos:end="49:28">=</operator> <literal type="number" pos:start="49:30" pos:end="49:32">1</literal> <operator pos:start="49:32" pos:end="49:32">-</operator> <literal type="number" pos:start="49:34" pos:end="49:34">3</literal><operator pos:start="49:35" pos:end="49:35">*</operator><name pos:start="49:36" pos:end="49:36">x</name><operator pos:start="49:37" pos:end="49:37">*</operator><name pos:start="49:38" pos:end="49:38">x</name> <operator pos:start="49:40" pos:end="49:40">+</operator> <literal type="number" pos:start="49:42" pos:end="49:42">2</literal><operator pos:start="49:43" pos:end="49:43">*</operator><name pos:start="49:44" pos:end="49:44">x</name><operator pos:start="49:45" pos:end="49:45">*</operator><name pos:start="49:46" pos:end="49:46">x</name><operator pos:start="49:47" pos:end="49:47">*</operator><name pos:start="49:48" pos:end="49:48">x</name> <operator pos:start="49:50" pos:end="49:50">+</operator> <name pos:start="49:52" pos:end="49:52">d</name><operator pos:start="49:53" pos:end="49:53">*</operator><operator pos:start="49:54" pos:end="49:54">(</operator>            <operator pos:start="49:67" pos:end="49:67">-</operator><name pos:start="49:68" pos:end="49:68">x</name><operator pos:start="49:69" pos:end="49:69">*</operator><name pos:start="49:70" pos:end="49:70">x</name> <operator pos:start="49:72" pos:end="49:72">+</operator> <name pos:start="49:74" pos:end="49:74">x</name><operator pos:start="49:75" pos:end="49:75">*</operator><name pos:start="49:76" pos:end="49:76">x</name><operator pos:start="49:77" pos:end="49:77">*</operator><name pos:start="49:78" pos:end="49:78">x</name><operator pos:start="49:79" pos:end="49:79">)</operator></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="51:17" pos:end="51:80">else<block type="pseudo" pos:start="51:27" pos:end="51:80"><block_content pos:start="51:27" pos:end="51:80">      <expr_stmt pos:start="51:27" pos:end="51:80"><expr pos:start="51:27" pos:end="51:79"><name pos:start="51:27" pos:end="51:27">y</name><operator pos:start="51:28" pos:end="51:28">=</operator>                       <name pos:start="51:52" pos:end="51:52">d</name><operator pos:start="51:53" pos:end="51:53">*</operator><operator pos:start="51:54" pos:end="51:54">(</operator><operator pos:start="51:55" pos:end="51:55">-</operator><literal type="number" pos:start="51:56" pos:end="51:58">4</literal> <operator pos:start="51:58" pos:end="51:58">+</operator> <literal type="number" pos:start="51:60" pos:end="51:60">8</literal><operator pos:start="51:61" pos:end="51:61">*</operator><name pos:start="51:62" pos:end="51:62">x</name> <operator pos:start="51:64" pos:end="51:64">-</operator> <literal type="number" pos:start="51:66" pos:end="51:66">5</literal><operator pos:start="51:67" pos:end="51:67">*</operator><name pos:start="51:68" pos:end="51:68">x</name><operator pos:start="51:69" pos:end="51:69">*</operator><name pos:start="51:70" pos:end="51:70">x</name> <operator pos:start="51:72" pos:end="51:72">+</operator> <name pos:start="51:74" pos:end="51:74">x</name><operator pos:start="51:75" pos:end="51:75">*</operator><name pos:start="51:76" pos:end="51:76">x</name><operator pos:start="51:77" pos:end="51:77">*</operator><name pos:start="51:78" pos:end="51:78">x</name><operator pos:start="51:79" pos:end="51:79">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="53:17" pos:end="53:22">break;</break></block_content>}</block>

            <case pos:start="55:13" pos:end="55:50">case <expr pos:start="55:18" pos:end="55:49"><name pos:start="55:18" pos:end="55:49">SWR_FILTER_TYPE_BLACKMAN_NUTTALL</name></expr>:</case>

                <expr_stmt pos:start="57:17" pos:end="57:54"><expr pos:start="57:17" pos:end="57:53"><name pos:start="57:17" pos:end="57:17">w</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="number" pos:start="57:21" pos:end="57:23">2.0</literal><operator pos:start="57:24" pos:end="57:24">*</operator><name pos:start="57:25" pos:end="57:25">x</name> <operator pos:start="57:27" pos:end="57:27">/</operator> <operator pos:start="57:29" pos:end="57:29">(</operator><name pos:start="57:30" pos:end="57:35">factor</name><operator pos:start="57:36" pos:end="57:36">*</operator><name pos:start="57:37" pos:end="57:45">tap_count</name><operator pos:start="57:46" pos:end="57:46">)</operator> <operator pos:start="57:48" pos:end="57:48">+</operator> <name pos:start="57:50" pos:end="57:53">M_PI</name></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:98"><expr pos:start="59:17" pos:end="59:97"><name pos:start="59:17" pos:end="59:17">y</name> <operator pos:start="59:19" pos:end="59:20">*=</operator> <literal type="number" pos:start="59:22" pos:end="59:32">0.3635819</literal> <operator pos:start="59:32" pos:end="59:32">-</operator> <literal type="number" pos:start="59:34" pos:end="59:42">0.4891775</literal> <operator pos:start="59:44" pos:end="59:44">*</operator> <call pos:start="59:46" pos:end="59:51"><name pos:start="59:46" pos:end="59:48">cos</name><argument_list pos:start="59:49" pos:end="59:51">(<argument pos:start="59:50" pos:end="59:50"><expr pos:start="59:50" pos:end="59:50"><name pos:start="59:50" pos:end="59:50">w</name></expr></argument>)</argument_list></call> <operator pos:start="59:53" pos:end="59:53">+</operator> <literal type="number" pos:start="59:55" pos:end="59:63">0.1365995</literal> <operator pos:start="59:65" pos:end="59:65">*</operator> <call pos:start="59:67" pos:end="59:74"><name pos:start="59:67" pos:end="59:69">cos</name><argument_list pos:start="59:70" pos:end="59:74">(<argument pos:start="59:71" pos:end="59:73"><expr pos:start="59:71" pos:end="59:73"><literal type="number" pos:start="59:71" pos:end="59:71">2</literal><operator pos:start="59:72" pos:end="59:72">*</operator><name pos:start="59:73" pos:end="59:73">w</name></expr></argument>)</argument_list></call> <operator pos:start="59:76" pos:end="59:76">-</operator> <literal type="number" pos:start="59:78" pos:end="59:86">0.0106411</literal> <operator pos:start="59:88" pos:end="59:88">*</operator> <call pos:start="59:90" pos:end="59:97"><name pos:start="59:90" pos:end="59:92">cos</name><argument_list pos:start="59:93" pos:end="59:97">(<argument pos:start="59:94" pos:end="59:96"><expr pos:start="59:94" pos:end="59:96"><literal type="number" pos:start="59:94" pos:end="59:94">3</literal><operator pos:start="59:95" pos:end="59:95">*</operator><name pos:start="59:96" pos:end="59:96">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="61:17" pos:end="61:22">break;</break>

            <case pos:start="63:13" pos:end="63:40">case <expr pos:start="63:18" pos:end="63:39"><name pos:start="63:18" pos:end="63:39">SWR_FILTER_TYPE_KAISER</name></expr>:</case>

                <expr_stmt pos:start="65:17" pos:end="65:52"><expr pos:start="65:17" pos:end="65:51"><name pos:start="65:17" pos:end="65:17">w</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <literal type="number" pos:start="65:21" pos:end="65:23">2.0</literal><operator pos:start="65:24" pos:end="65:24">*</operator><name pos:start="65:25" pos:end="65:25">x</name> <operator pos:start="65:27" pos:end="65:27">/</operator> <operator pos:start="65:29" pos:end="65:29">(</operator><name pos:start="65:30" pos:end="65:35">factor</name><operator pos:start="65:36" pos:end="65:36">*</operator><name pos:start="65:37" pos:end="65:45">tap_count</name><operator pos:start="65:46" pos:end="65:46">*</operator><name pos:start="65:47" pos:end="65:50">M_PI</name><operator pos:start="65:51" pos:end="65:51">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:63"><expr pos:start="67:17" pos:end="67:62"><name pos:start="67:17" pos:end="67:17">y</name> <operator pos:start="67:19" pos:end="67:20">*=</operator> <call pos:start="67:22" pos:end="67:62"><name pos:start="67:22" pos:end="67:27">bessel</name><argument_list pos:start="67:28" pos:end="67:62">(<argument pos:start="67:29" pos:end="67:61"><expr pos:start="67:29" pos:end="67:61"><name pos:start="67:29" pos:end="67:39">kaiser_beta</name><operator pos:start="67:40" pos:end="67:40">*</operator><call pos:start="67:41" pos:end="67:61"><name pos:start="67:41" pos:end="67:44">sqrt</name><argument_list pos:start="67:45" pos:end="67:61">(<argument pos:start="67:46" pos:end="67:60"><expr pos:start="67:46" pos:end="67:60"><call pos:start="67:46" pos:end="67:60"><name pos:start="67:46" pos:end="67:50">FFMAX</name><argument_list pos:start="67:51" pos:end="67:60">(<argument pos:start="67:52" pos:end="67:56"><expr pos:start="67:52" pos:end="67:56"><literal type="number" pos:start="67:52" pos:end="67:53">1</literal><operator pos:start="67:53" pos:end="67:53">-</operator><name pos:start="67:54" pos:end="67:54">w</name><operator pos:start="67:55" pos:end="67:55">*</operator><name pos:start="67:56" pos:end="67:56">w</name></expr></argument>, <argument pos:start="67:59" pos:end="67:59"><expr pos:start="67:59" pos:end="67:59"><literal type="number" pos:start="67:59" pos:end="67:59">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="69:17" pos:end="69:22">break;</break>

            <default pos:start="71:13" pos:end="71:20">default:</default>

                <expr_stmt pos:start="73:17" pos:end="73:30"><expr pos:start="73:17" pos:end="73:29"><call pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:26">av_assert0</name><argument_list pos:start="73:27" pos:end="73:29">(<argument pos:start="73:28" pos:end="73:28"><expr pos:start="73:28" pos:end="73:28"><literal type="number" pos:start="73:28" pos:end="73:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>



            <expr_stmt pos:start="79:13" pos:end="79:23"><expr pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:18"><name pos:start="79:13" pos:end="79:15">tab</name><index pos:start="79:16" pos:end="79:18">[<expr pos:start="79:17" pos:end="79:17"><name pos:start="79:17" pos:end="79:17">i</name></expr>]</index></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <name pos:start="79:22" pos:end="79:22">y</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:22"><expr pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:16">norm</name> <operator pos:start="81:18" pos:end="81:19">+=</operator> <name pos:start="81:21" pos:end="81:21">y</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="87:9" pos:end="87:65">/* normalize so that an uniform color remains the same */</comment>

        <switch pos:start="89:9" pos:end="123:9">switch<condition pos:start="89:15" pos:end="89:25">(<expr pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:16">c</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:24">format</name></name></expr>)</condition><block pos:start="89:26" pos:end="123:9">{<block_content pos:start="91:9" pos:end="121:18">

        <case pos:start="91:9" pos:end="91:32">case <expr pos:start="91:14" pos:end="91:31"><name pos:start="91:14" pos:end="91:31">AV_SAMPLE_FMT_S16P</name></expr>:</case>

            <for pos:start="93:13" pos:end="95:114">for<control pos:start="93:16" pos:end="93:36">(<init pos:start="93:17" pos:end="93:20"><expr pos:start="93:17" pos:end="93:19"><name pos:start="93:17" pos:end="93:17">i</name><operator pos:start="93:18" pos:end="93:18">=</operator><literal type="number" pos:start="93:19" pos:end="93:19">0</literal></expr>;</init><condition pos:start="93:21" pos:end="93:32"><expr pos:start="93:21" pos:end="93:31"><name pos:start="93:21" pos:end="93:21">i</name><operator pos:start="93:22" pos:end="93:22">&lt;</operator><name pos:start="93:23" pos:end="93:31">tap_count</name></expr>;</condition><incr pos:start="93:33" pos:end="93:35"><expr pos:start="93:33" pos:end="93:35"><name pos:start="93:33" pos:end="93:33">i</name><operator pos:start="93:34" pos:end="93:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="95:17" pos:end="95:114"><block_content pos:start="95:17" pos:end="95:114">

                <expr_stmt pos:start="95:17" pos:end="95:114"><expr pos:start="95:17" pos:end="95:113"><operator pos:start="95:17" pos:end="95:17">(</operator><operator pos:start="95:18" pos:end="95:18">(</operator><name pos:start="95:19" pos:end="95:25">int16_t</name><operator pos:start="95:26" pos:end="95:26">*</operator><operator pos:start="95:27" pos:end="95:27">)</operator><name pos:start="95:28" pos:end="95:33">filter</name><operator pos:start="95:34" pos:end="95:34">)</operator><index pos:start="95:35" pos:end="95:50">[<expr pos:start="95:36" pos:end="95:49"><name pos:start="95:36" pos:end="95:37">ph</name> <operator pos:start="95:39" pos:end="95:39">*</operator> <name pos:start="95:41" pos:end="95:45">alloc</name> <operator pos:start="95:47" pos:end="95:47">+</operator> <name pos:start="95:49" pos:end="95:49">i</name></expr>]</index> <operator pos:start="95:52" pos:end="95:52">=</operator> <call pos:start="95:54" pos:end="95:113"><name pos:start="95:54" pos:end="95:60">av_clip</name><argument_list pos:start="95:61" pos:end="95:113">(<argument pos:start="95:62" pos:end="95:90"><expr pos:start="95:62" pos:end="95:90"><call pos:start="95:62" pos:end="95:90"><name pos:start="95:62" pos:end="95:67">lrintf</name><argument_list pos:start="95:68" pos:end="95:90">(<argument pos:start="95:69" pos:end="95:89"><expr pos:start="95:69" pos:end="95:89"><name pos:start="95:69" pos:end="95:74"><name pos:start="95:69" pos:end="95:71">tab</name><index pos:start="95:72" pos:end="95:74">[<expr pos:start="95:73" pos:end="95:73"><name pos:start="95:73" pos:end="95:73">i</name></expr>]</index></name> <operator pos:start="95:76" pos:end="95:76">*</operator> <name pos:start="95:78" pos:end="95:82">scale</name> <operator pos:start="95:84" pos:end="95:84">/</operator> <name pos:start="95:86" pos:end="95:89">norm</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:93" pos:end="95:101"><expr pos:start="95:93" pos:end="95:101"><name pos:start="95:93" pos:end="95:101">INT16_MIN</name></expr></argument>, <argument pos:start="95:104" pos:end="95:112"><expr pos:start="95:104" pos:end="95:112"><name pos:start="95:104" pos:end="95:112">INT16_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:32">case <expr pos:start="99:14" pos:end="99:31"><name pos:start="99:14" pos:end="99:31">AV_SAMPLE_FMT_S32P</name></expr>:</case>

            <for pos:start="101:13" pos:end="103:99">for<control pos:start="101:16" pos:end="101:36">(<init pos:start="101:17" pos:end="101:20"><expr pos:start="101:17" pos:end="101:19"><name pos:start="101:17" pos:end="101:17">i</name><operator pos:start="101:18" pos:end="101:18">=</operator><literal type="number" pos:start="101:19" pos:end="101:19">0</literal></expr>;</init><condition pos:start="101:21" pos:end="101:32"><expr pos:start="101:21" pos:end="101:31"><name pos:start="101:21" pos:end="101:21">i</name><operator pos:start="101:22" pos:end="101:22">&lt;</operator><name pos:start="101:23" pos:end="101:31">tap_count</name></expr>;</condition><incr pos:start="101:33" pos:end="101:35"><expr pos:start="101:33" pos:end="101:35"><name pos:start="101:33" pos:end="101:33">i</name><operator pos:start="101:34" pos:end="101:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="103:17" pos:end="103:99"><block_content pos:start="103:17" pos:end="103:99">

                <expr_stmt pos:start="103:17" pos:end="103:99"><expr pos:start="103:17" pos:end="103:98"><operator pos:start="103:17" pos:end="103:17">(</operator><operator pos:start="103:18" pos:end="103:18">(</operator><name pos:start="103:19" pos:end="103:25">int32_t</name><operator pos:start="103:26" pos:end="103:26">*</operator><operator pos:start="103:27" pos:end="103:27">)</operator><name pos:start="103:28" pos:end="103:33">filter</name><operator pos:start="103:34" pos:end="103:34">)</operator><index pos:start="103:35" pos:end="103:50">[<expr pos:start="103:36" pos:end="103:49"><name pos:start="103:36" pos:end="103:37">ph</name> <operator pos:start="103:39" pos:end="103:39">*</operator> <name pos:start="103:41" pos:end="103:45">alloc</name> <operator pos:start="103:47" pos:end="103:47">+</operator> <name pos:start="103:49" pos:end="103:49">i</name></expr>]</index> <operator pos:start="103:52" pos:end="103:52">=</operator> <call pos:start="103:54" pos:end="103:98"><name pos:start="103:54" pos:end="103:67">av_clipl_int32</name><argument_list pos:start="103:68" pos:end="103:98">(<argument pos:start="103:69" pos:end="103:97"><expr pos:start="103:69" pos:end="103:97"><call pos:start="103:69" pos:end="103:97"><name pos:start="103:69" pos:end="103:74">llrint</name><argument_list pos:start="103:75" pos:end="103:97">(<argument pos:start="103:76" pos:end="103:96"><expr pos:start="103:76" pos:end="103:96"><name pos:start="103:76" pos:end="103:81"><name pos:start="103:76" pos:end="103:78">tab</name><index pos:start="103:79" pos:end="103:81">[<expr pos:start="103:80" pos:end="103:80"><name pos:start="103:80" pos:end="103:80">i</name></expr>]</index></name> <operator pos:start="103:83" pos:end="103:83">*</operator> <name pos:start="103:85" pos:end="103:89">scale</name> <operator pos:start="103:91" pos:end="103:91">/</operator> <name pos:start="103:93" pos:end="103:96">norm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <case pos:start="107:9" pos:end="107:32">case <expr pos:start="107:14" pos:end="107:31"><name pos:start="107:14" pos:end="107:31">AV_SAMPLE_FMT_FLTP</name></expr>:</case>

            <for pos:start="109:13" pos:end="111:73">for<control pos:start="109:16" pos:end="109:36">(<init pos:start="109:17" pos:end="109:20"><expr pos:start="109:17" pos:end="109:19"><name pos:start="109:17" pos:end="109:17">i</name><operator pos:start="109:18" pos:end="109:18">=</operator><literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>;</init><condition pos:start="109:21" pos:end="109:32"><expr pos:start="109:21" pos:end="109:31"><name pos:start="109:21" pos:end="109:21">i</name><operator pos:start="109:22" pos:end="109:22">&lt;</operator><name pos:start="109:23" pos:end="109:31">tap_count</name></expr>;</condition><incr pos:start="109:33" pos:end="109:35"><expr pos:start="109:33" pos:end="109:35"><name pos:start="109:33" pos:end="109:33">i</name><operator pos:start="109:34" pos:end="109:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:17" pos:end="111:73"><block_content pos:start="111:17" pos:end="111:73">

                <expr_stmt pos:start="111:17" pos:end="111:73"><expr pos:start="111:17" pos:end="111:72"><operator pos:start="111:17" pos:end="111:17">(</operator><operator pos:start="111:18" pos:end="111:18">(</operator><name pos:start="111:19" pos:end="111:23">float</name><operator pos:start="111:24" pos:end="111:24">*</operator><operator pos:start="111:25" pos:end="111:25">)</operator><name pos:start="111:26" pos:end="111:31">filter</name><operator pos:start="111:32" pos:end="111:32">)</operator><index pos:start="111:33" pos:end="111:48">[<expr pos:start="111:34" pos:end="111:47"><name pos:start="111:34" pos:end="111:35">ph</name> <operator pos:start="111:37" pos:end="111:37">*</operator> <name pos:start="111:39" pos:end="111:43">alloc</name> <operator pos:start="111:45" pos:end="111:45">+</operator> <name pos:start="111:47" pos:end="111:47">i</name></expr>]</index> <operator pos:start="111:50" pos:end="111:50">=</operator> <name pos:start="111:52" pos:end="111:57"><name pos:start="111:52" pos:end="111:54">tab</name><index pos:start="111:55" pos:end="111:57">[<expr pos:start="111:56" pos:end="111:56"><name pos:start="111:56" pos:end="111:56">i</name></expr>]</index></name> <operator pos:start="111:59" pos:end="111:59">*</operator> <name pos:start="111:61" pos:end="111:65">scale</name> <operator pos:start="111:67" pos:end="111:67">/</operator> <name pos:start="111:69" pos:end="111:72">norm</name></expr>;</expr_stmt></block_content></block></for>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <case pos:start="115:9" pos:end="115:32">case <expr pos:start="115:14" pos:end="115:31"><name pos:start="115:14" pos:end="115:31">AV_SAMPLE_FMT_DBLP</name></expr>:</case>

            <for pos:start="117:13" pos:end="119:74">for<control pos:start="117:16" pos:end="117:36">(<init pos:start="117:17" pos:end="117:20"><expr pos:start="117:17" pos:end="117:19"><name pos:start="117:17" pos:end="117:17">i</name><operator pos:start="117:18" pos:end="117:18">=</operator><literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr>;</init><condition pos:start="117:21" pos:end="117:32"><expr pos:start="117:21" pos:end="117:31"><name pos:start="117:21" pos:end="117:21">i</name><operator pos:start="117:22" pos:end="117:22">&lt;</operator><name pos:start="117:23" pos:end="117:31">tap_count</name></expr>;</condition><incr pos:start="117:33" pos:end="117:35"><expr pos:start="117:33" pos:end="117:35"><name pos:start="117:33" pos:end="117:33">i</name><operator pos:start="117:34" pos:end="117:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="119:17" pos:end="119:74"><block_content pos:start="119:17" pos:end="119:74">

                <expr_stmt pos:start="119:17" pos:end="119:74"><expr pos:start="119:17" pos:end="119:73"><operator pos:start="119:17" pos:end="119:17">(</operator><operator pos:start="119:18" pos:end="119:18">(</operator><name pos:start="119:19" pos:end="119:24">double</name><operator pos:start="119:25" pos:end="119:25">*</operator><operator pos:start="119:26" pos:end="119:26">)</operator><name pos:start="119:27" pos:end="119:32">filter</name><operator pos:start="119:33" pos:end="119:33">)</operator><index pos:start="119:34" pos:end="119:49">[<expr pos:start="119:35" pos:end="119:48"><name pos:start="119:35" pos:end="119:36">ph</name> <operator pos:start="119:38" pos:end="119:38">*</operator> <name pos:start="119:40" pos:end="119:44">alloc</name> <operator pos:start="119:46" pos:end="119:46">+</operator> <name pos:start="119:48" pos:end="119:48">i</name></expr>]</index> <operator pos:start="119:51" pos:end="119:51">=</operator> <name pos:start="119:53" pos:end="119:58"><name pos:start="119:53" pos:end="119:55">tab</name><index pos:start="119:56" pos:end="119:58">[<expr pos:start="119:57" pos:end="119:57"><name pos:start="119:57" pos:end="119:57">i</name></expr>]</index></name> <operator pos:start="119:60" pos:end="119:60">*</operator> <name pos:start="119:62" pos:end="119:66">scale</name> <operator pos:start="119:68" pos:end="119:68">/</operator> <name pos:start="119:70" pos:end="119:73">norm</name></expr>;</expr_stmt></block_content></block></for>

            <break pos:start="121:13" pos:end="121:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

<cpp:if pos:start="127:1" pos:end="127:5">#<cpp:directive pos:start="127:2" pos:end="127:3">if</cpp:directive> <expr pos:start="127:5" pos:end="127:5"><literal type="number" pos:start="127:5" pos:end="127:5">0</literal></expr></cpp:if>

    {

<cpp:define pos:start="131:1" pos:end="131:16">#<cpp:directive pos:start="131:2" pos:end="131:7">define</cpp:directive> <cpp:macro pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">LEN</name></cpp:macro> <cpp:value pos:start="131:13" pos:end="131:16">1024</cpp:value></cpp:define>

        int j,k;

        double sine[LEN + tap_count];

        double filtered[LEN];

        double maxff=-2, minff=2, maxsf=-2, minsf=2;

        for(i=0; i&lt;LEN; i++){

            double ss=0, sf=0, ff=0;

            for(j=0; j&lt;LEN+tap_count; j++)

                sine[j]= cos(i*j*M_PI/LEN);

            for(j=0; j&lt;LEN; j++){

                double sum=0;

                ph=0;

                for(k=0; k&lt;tap_count; k++)

                    sum += filter[ph * tap_count + k] * sine[k+j];

                filtered[j]= sum / (1&lt;&lt;FILTER_SHIFT);

                ss+= sine[j + center] * sine[j + center];

                ff+= filtered[j] * filtered[j];

                sf+= sine[j + center] * filtered[j];

            }

            ss= sqrt(2*ss/LEN);

            ff= sqrt(2*ff/LEN);

            sf= 2*sf/LEN;

            maxff= FFMAX(maxff, ff);

            minff= FFMIN(minff, ff);

            maxsf= FFMAX(maxsf, sf);

            minsf= FFMIN(minsf, sf);

            if(i%11==0){

                av_log(NULL, AV_LOG_ERROR, "i:%4d ss:%f ff:%13.6e-%13.6e sf:%13.6e-%13.6e\n", i, ss, maxff, minff, maxsf, minsf);

                minff=minsf= 2;

                maxff=maxsf= -2;

            }

        }

    }

<cpp:endif pos:start="197:1" pos:end="197:6">#<cpp:directive pos:start="197:2" pos:end="197:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="201:5" pos:end="201:17"><expr pos:start="201:5" pos:end="201:16"><call pos:start="201:5" pos:end="201:16"><name pos:start="201:5" pos:end="201:11">av_free</name><argument_list pos:start="201:12" pos:end="201:16">(<argument pos:start="201:13" pos:end="201:15"><expr pos:start="201:13" pos:end="201:15"><name pos:start="201:13" pos:end="201:15">tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="203:5" pos:end="203:13">return <expr pos:start="203:12" pos:end="203:12"><literal type="number" pos:start="203:12" pos:end="203:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
