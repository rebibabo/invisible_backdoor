<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21509.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">av_parse_color</name><parameter_list pos:start="1:19" pos:end="3:33">(<parameter pos:start="1:20" pos:end="1:38"><decl pos:start="1:20" pos:end="1:38"><type pos:start="1:20" pos:end="1:38"><name pos:start="1:20" pos:end="1:26">uint8_t</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:38">rgba_color</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:64"><decl pos:start="1:41" pos:end="1:64"><type pos:start="1:41" pos:end="1:64"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:64">color_string</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:74"><decl pos:start="1:67" pos:end="1:74"><type pos:start="1:67" pos:end="1:74"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:74">slen</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:32"><decl pos:start="3:20" pos:end="3:32"><type pos:start="3:20" pos:end="3:32"><name pos:start="3:20" pos:end="3:23">void</name> <modifier pos:start="3:25" pos:end="3:25">*</modifier></type><name pos:start="3:26" pos:end="3:32">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="149:1">{<block_content pos:start="7:5" pos:end="147:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:14">tail</name></decl>, <decl pos:start="7:17" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:17" pos:end="7:34"><name pos:start="7:17" pos:end="7:29">color_string2</name><index pos:start="7:30" pos:end="7:34">[<expr pos:start="7:31" pos:end="7:33"><literal type="number" pos:start="7:31" pos:end="7:33">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:20">ColorEntry</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:27">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name></decl>, <decl pos:start="11:14" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:23">hex_offset</name> <init pos:start="11:25" pos:end="11:27">= <expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:23"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:31">(<expr pos:start="15:9" pos:end="15:30"><name pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:20">color_string</name><index pos:start="15:21" pos:end="15:23">[<expr pos:start="15:22" pos:end="15:22"><literal type="number" pos:start="15:22" pos:end="15:22">0</literal></expr>]</index></name> <operator pos:start="15:25" pos:end="15:26">==</operator> <literal type="char" pos:start="15:28" pos:end="15:30">'#'</literal></expr>)</condition> <block pos:start="15:33" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:23">

        <expr_stmt pos:start="17:9" pos:end="17:23"><expr pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:18">hex_offset</name> <operator pos:start="17:20" pos:end="17:20">=</operator> <literal type="number" pos:start="17:22" pos:end="17:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="19:7" pos:end="21:23">else if <condition pos:start="19:15" pos:end="19:47">(<expr pos:start="19:16" pos:end="19:46"><operator pos:start="19:16" pos:end="19:16">!</operator><call pos:start="19:17" pos:end="19:46"><name pos:start="19:17" pos:end="19:23">strncmp</name><argument_list pos:start="19:24" pos:end="19:46">(<argument pos:start="19:25" pos:end="19:36"><expr pos:start="19:25" pos:end="19:36"><name pos:start="19:25" pos:end="19:36">color_string</name></expr></argument>, <argument pos:start="19:39" pos:end="19:42"><expr pos:start="19:39" pos:end="19:42"><literal type="string" pos:start="19:39" pos:end="19:42">"0x"</literal></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:23"><block_content pos:start="21:9" pos:end="21:23">

        <expr_stmt pos:start="21:9" pos:end="21:23"><expr pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:18">hex_offset</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <literal type="number" pos:start="21:22" pos:end="21:22">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="27:36"><if pos:start="25:5" pos:end="27:36">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:12">slen</name> <operator pos:start="25:14" pos:end="25:14">&lt;</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:36"><block_content pos:start="27:9" pos:end="27:36">

        <expr_stmt pos:start="27:9" pos:end="27:36"><expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:12">slen</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:35"><name pos:start="27:16" pos:end="27:21">strlen</name><argument_list pos:start="27:22" pos:end="27:35">(<argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">color_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:64"><expr pos:start="29:5" pos:end="31:63"><call pos:start="29:5" pos:end="31:63"><name pos:start="29:5" pos:end="29:14">av_strlcpy</name><argument_list pos:start="29:15" pos:end="31:63">(<argument pos:start="29:16" pos:end="29:28"><expr pos:start="29:16" pos:end="29:28"><name pos:start="29:16" pos:end="29:28">color_string2</name></expr></argument>, <argument pos:start="29:31" pos:end="29:55"><expr pos:start="29:31" pos:end="29:55"><name pos:start="29:31" pos:end="29:42">color_string</name> <operator pos:start="29:44" pos:end="29:44">+</operator> <name pos:start="29:46" pos:end="29:55">hex_offset</name></expr></argument>,

               <argument pos:start="31:16" pos:end="31:62"><expr pos:start="31:16" pos:end="31:62"><call pos:start="31:16" pos:end="31:62"><name pos:start="31:16" pos:end="31:20">FFMIN</name><argument_list pos:start="31:21" pos:end="31:62">(<argument pos:start="31:22" pos:end="31:38"><expr pos:start="31:22" pos:end="31:38"><name pos:start="31:22" pos:end="31:25">slen</name><operator pos:start="31:26" pos:end="31:26">-</operator><name pos:start="31:27" pos:end="31:36">hex_offset</name><operator pos:start="31:37" pos:end="31:37">+</operator><literal type="number" pos:start="31:38" pos:end="31:38">1</literal></expr></argument>, <argument pos:start="31:41" pos:end="31:61"><expr pos:start="31:41" pos:end="31:61"><sizeof pos:start="31:41" pos:end="31:61">sizeof<argument_list pos:start="31:47" pos:end="31:61">(<argument pos:start="31:48" pos:end="31:60"><expr pos:start="31:48" pos:end="31:60"><name pos:start="31:48" pos:end="31:60">color_string2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:20"><if pos:start="33:5" pos:end="35:20">if <condition pos:start="33:8" pos:end="33:50">(<expr pos:start="33:9" pos:end="33:49"><operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:13">tail</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:48"><name pos:start="33:17" pos:end="33:22">strchr</name><argument_list pos:start="33:23" pos:end="33:48">(<argument pos:start="33:24" pos:end="33:36"><expr pos:start="33:24" pos:end="33:36"><name pos:start="33:24" pos:end="33:36">color_string2</name></expr></argument>, <argument pos:start="33:39" pos:end="33:47"><expr pos:start="33:39" pos:end="33:47"><name pos:start="33:39" pos:end="33:47">ALPHA_SEP</name></expr></argument>)</argument_list></call><operator pos:start="33:49" pos:end="33:49">)</operator></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:20"><block_content pos:start="35:9" pos:end="35:20">

        <expr_stmt pos:start="35:9" pos:end="35:20"><expr pos:start="35:9" pos:end="35:19"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:13">tail</name><operator pos:start="35:14" pos:end="35:15">++</operator> <operator pos:start="35:17" pos:end="35:17">=</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:7">len</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:31"><name pos:start="37:11" pos:end="37:16">strlen</name><argument_list pos:start="37:17" pos:end="37:31">(<argument pos:start="37:18" pos:end="37:30"><expr pos:start="37:18" pos:end="37:30"><name pos:start="37:18" pos:end="37:30">color_string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:14">rgba_color</name><index pos:start="39:15" pos:end="39:17">[<expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">3</literal></expr>]</index></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:23">255</literal></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="109:5"><if pos:start="43:5" pos:end="55:5">if <condition pos:start="43:8" pos:end="43:93">(<expr pos:start="43:9" pos:end="43:92"><operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:47"><name pos:start="43:10" pos:end="43:22">av_strcasecmp</name><argument_list pos:start="43:23" pos:end="43:47">(<argument pos:start="43:24" pos:end="43:36"><expr pos:start="43:24" pos:end="43:36"><name pos:start="43:24" pos:end="43:36">color_string2</name></expr></argument>, <argument pos:start="43:39" pos:end="43:46"><expr pos:start="43:39" pos:end="43:46"><literal type="string" pos:start="43:39" pos:end="43:46">"random"</literal></expr></argument>)</argument_list></call> <operator pos:start="43:49" pos:end="43:50">||</operator> <operator pos:start="43:52" pos:end="43:52">!</operator><call pos:start="43:53" pos:end="43:92"><name pos:start="43:53" pos:end="43:65">av_strcasecmp</name><argument_list pos:start="43:66" pos:end="43:92">(<argument pos:start="43:67" pos:end="43:79"><expr pos:start="43:67" pos:end="43:79"><name pos:start="43:67" pos:end="43:79">color_string2</name></expr></argument>, <argument pos:start="43:82" pos:end="43:91"><expr pos:start="43:82" pos:end="43:91"><literal type="string" pos:start="43:82" pos:end="43:91">"bikeshed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:95" pos:end="55:5">{<block_content pos:start="45:9" pos:end="53:29">

        <decl_stmt pos:start="45:9" pos:end="45:40"><decl pos:start="45:9" pos:end="45:39"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:16">rgba</name> <init pos:start="45:18" pos:end="45:39">= <expr pos:start="45:20" pos:end="45:39"><call pos:start="45:20" pos:end="45:39"><name pos:start="45:20" pos:end="45:37">av_get_random_seed</name><argument_list pos:start="45:38" pos:end="45:39">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:35"><expr pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:18">rgba_color</name><index pos:start="47:19" pos:end="47:21">[<expr pos:start="47:20" pos:end="47:20"><literal type="number" pos:start="47:20" pos:end="47:20">0</literal></expr>]</index></name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:28">rgba</name> <operator pos:start="47:30" pos:end="47:31">&gt;&gt;</operator> <literal type="number" pos:start="47:33" pos:end="47:34">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:35"><expr pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:18">rgba_color</name><index pos:start="49:19" pos:end="49:21">[<expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">1</literal></expr>]</index></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:28">rgba</name> <operator pos:start="49:30" pos:end="49:31">&gt;&gt;</operator> <literal type="number" pos:start="49:33" pos:end="49:34">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:18">rgba_color</name><index pos:start="51:19" pos:end="51:21">[<expr pos:start="51:20" pos:end="51:20"><literal type="number" pos:start="51:20" pos:end="51:20">2</literal></expr>]</index></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:28">rgba</name> <operator pos:start="51:30" pos:end="51:31">&gt;&gt;</operator> <literal type="number" pos:start="51:33" pos:end="51:33">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:18">rgba_color</name><index pos:start="53:19" pos:end="53:21">[<expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">3</literal></expr>]</index></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:28">rgba</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="55:7" pos:end="87:5">else if <condition pos:start="55:15" pos:end="57:70">(<expr pos:start="55:16" pos:end="57:69"><name pos:start="55:16" pos:end="55:25">hex_offset</name> <operator pos:start="55:27" pos:end="55:28">||</operator>

               <call pos:start="57:16" pos:end="57:62"><name pos:start="57:16" pos:end="57:21">strspn</name><argument_list pos:start="57:22" pos:end="57:62">(<argument pos:start="57:23" pos:end="57:35"><expr pos:start="57:23" pos:end="57:35"><name pos:start="57:23" pos:end="57:35">color_string2</name></expr></argument>, <argument pos:start="57:38" pos:end="57:61"><expr pos:start="57:38" pos:end="57:61"><literal type="string" pos:start="57:38" pos:end="57:61">"0123456789ABCDEFabcdef"</literal></expr></argument>)</argument_list></call> <operator pos:start="57:64" pos:end="57:65">==</operator> <name pos:start="57:67" pos:end="57:69">len</name></expr>)</condition> <block pos:start="57:72" pos:end="87:5">{<block_content pos:start="59:9" pos:end="85:29">

        <decl_stmt pos:start="59:9" pos:end="59:19"><decl pos:start="59:9" pos:end="59:18"><type pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:12">char</name> <modifier pos:start="59:14" pos:end="59:14">*</modifier></type><name pos:start="59:15" pos:end="59:18">tail</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:62"><decl pos:start="61:9" pos:end="61:61"><type pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:16">unsigned</name> <name pos:start="61:18" pos:end="61:20">int</name></type> <name pos:start="61:22" pos:end="61:25">rgba</name> <init pos:start="61:27" pos:end="61:61">= <expr pos:start="61:29" pos:end="61:61"><call pos:start="61:29" pos:end="61:61"><name pos:start="61:29" pos:end="61:35">strtoul</name><argument_list pos:start="61:36" pos:end="61:61">(<argument pos:start="61:37" pos:end="61:49"><expr pos:start="61:37" pos:end="61:49"><name pos:start="61:37" pos:end="61:49">color_string2</name></expr></argument>, <argument pos:start="61:52" pos:end="61:56"><expr pos:start="61:52" pos:end="61:56"><operator pos:start="61:52" pos:end="61:52">&amp;</operator><name pos:start="61:53" pos:end="61:56">tail</name></expr></argument>, <argument pos:start="61:59" pos:end="61:60"><expr pos:start="61:59" pos:end="61:60"><literal type="number" pos:start="61:59" pos:end="61:60">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:44">(<expr pos:start="65:13" pos:end="65:43"><operator pos:start="65:13" pos:end="65:13">*</operator><name pos:start="65:14" pos:end="65:17">tail</name> <operator pos:start="65:19" pos:end="65:20">||</operator> <operator pos:start="65:22" pos:end="65:22">(</operator><name pos:start="65:23" pos:end="65:25">len</name> <operator pos:start="65:27" pos:end="65:28">!=</operator> <literal type="number" pos:start="65:30" pos:end="65:30">6</literal> <operator pos:start="65:32" pos:end="65:33">&amp;&amp;</operator> <name pos:start="65:35" pos:end="65:37">len</name> <operator pos:start="65:39" pos:end="65:40">!=</operator> <literal type="number" pos:start="65:42" pos:end="65:42">8</literal><operator pos:start="65:43" pos:end="65:43">)</operator></expr>)</condition> <block pos:start="65:46" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:35">

            <expr_stmt pos:start="67:13" pos:end="67:102"><expr pos:start="67:13" pos:end="67:101"><call pos:start="67:13" pos:end="67:101"><name pos:start="67:13" pos:end="67:18">av_log</name><argument_list pos:start="67:19" pos:end="67:101">(<argument pos:start="67:20" pos:end="67:26"><expr pos:start="67:20" pos:end="67:26"><name pos:start="67:20" pos:end="67:26">log_ctx</name></expr></argument>, <argument pos:start="67:29" pos:end="67:40"><expr pos:start="67:29" pos:end="67:40"><name pos:start="67:29" pos:end="67:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:43" pos:end="67:85"><expr pos:start="67:43" pos:end="67:85"><literal type="string" pos:start="67:43" pos:end="67:85">"Invalid 0xRRGGBB[AA] color string: '%s'\n"</literal></expr></argument>, <argument pos:start="67:88" pos:end="67:100"><expr pos:start="67:88" pos:end="67:100"><name pos:start="67:88" pos:end="67:100">color_string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:35">return <expr pos:start="69:20" pos:end="69:34"><call pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:26">AVERROR</name><argument_list pos:start="69:27" pos:end="69:34">(<argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><name pos:start="69:28" pos:end="69:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:21">(<expr pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:15">len</name> <operator pos:start="73:17" pos:end="73:18">==</operator> <literal type="number" pos:start="73:20" pos:end="73:20">8</literal></expr>)</condition> <block pos:start="73:23" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:23">

            <expr_stmt pos:start="75:13" pos:end="75:33"><expr pos:start="75:13" pos:end="75:32"><name pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:22">rgba_color</name><index pos:start="75:23" pos:end="75:25">[<expr pos:start="75:24" pos:end="75:24"><literal type="number" pos:start="75:24" pos:end="75:24">3</literal></expr>]</index></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <name pos:start="75:29" pos:end="75:32">rgba</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:23"><expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:16">rgba</name> <operator pos:start="77:18" pos:end="77:20">&gt;&gt;=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:35"><expr pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:18">rgba_color</name><index pos:start="81:19" pos:end="81:21">[<expr pos:start="81:20" pos:end="81:20"><literal type="number" pos:start="81:20" pos:end="81:20">0</literal></expr>]</index></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <name pos:start="81:25" pos:end="81:28">rgba</name> <operator pos:start="81:30" pos:end="81:31">&gt;&gt;</operator> <literal type="number" pos:start="81:33" pos:end="81:34">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:34"><expr pos:start="83:9" pos:end="83:33"><name pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:18">rgba_color</name><index pos:start="83:19" pos:end="83:21">[<expr pos:start="83:20" pos:end="83:20"><literal type="number" pos:start="83:20" pos:end="83:20">1</literal></expr>]</index></name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:28">rgba</name> <operator pos:start="83:30" pos:end="83:31">&gt;&gt;</operator> <literal type="number" pos:start="83:33" pos:end="83:33">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:29"><expr pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:18">rgba_color</name><index pos:start="85:19" pos:end="85:21">[<expr pos:start="85:20" pos:end="85:20"><literal type="number" pos:start="85:20" pos:end="85:20">2</literal></expr>]</index></name> <operator pos:start="85:23" pos:end="85:23">=</operator> <name pos:start="85:25" pos:end="85:28">rgba</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="109:5">else <block pos:start="87:12" pos:end="109:5">{<block_content pos:start="89:9" pos:end="107:48">

        <expr_stmt pos:start="89:9" pos:end="97:45"><expr pos:start="89:9" pos:end="97:44"><name pos:start="89:9" pos:end="89:13">entry</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <call pos:start="89:17" pos:end="97:44"><name pos:start="89:17" pos:end="89:23">bsearch</name><argument_list pos:start="89:24" pos:end="97:44">(<argument pos:start="89:25" pos:end="89:37"><expr pos:start="89:25" pos:end="89:37"><name pos:start="89:25" pos:end="89:37">color_string2</name></expr></argument>,

                        <argument pos:start="91:25" pos:end="91:35"><expr pos:start="91:25" pos:end="91:35"><name pos:start="91:25" pos:end="91:35">color_table</name></expr></argument>,

                        <argument pos:start="93:25" pos:end="93:51"><expr pos:start="93:25" pos:end="93:51"><call pos:start="93:25" pos:end="93:51"><name pos:start="93:25" pos:end="93:38">FF_ARRAY_ELEMS</name><argument_list pos:start="93:39" pos:end="93:51">(<argument pos:start="93:40" pos:end="93:50"><expr pos:start="93:40" pos:end="93:50"><name pos:start="93:40" pos:end="93:50">color_table</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="95:25" pos:end="95:42"><expr pos:start="95:25" pos:end="95:42"><sizeof pos:start="95:25" pos:end="95:42">sizeof<argument_list pos:start="95:31" pos:end="95:42">(<argument pos:start="95:32" pos:end="95:41"><expr pos:start="95:32" pos:end="95:41"><name pos:start="95:32" pos:end="95:41">ColorEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                        <argument pos:start="97:25" pos:end="97:43"><expr pos:start="97:25" pos:end="97:43"><name pos:start="97:25" pos:end="97:43">color_table_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:19">(<expr pos:start="99:13" pos:end="99:18"><operator pos:start="99:13" pos:end="99:13">!</operator><name pos:start="99:14" pos:end="99:18">entry</name></expr>)</condition> <block pos:start="99:21" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:35">

            <expr_stmt pos:start="101:13" pos:end="101:85"><expr pos:start="101:13" pos:end="101:84"><call pos:start="101:13" pos:end="101:84"><name pos:start="101:13" pos:end="101:18">av_log</name><argument_list pos:start="101:19" pos:end="101:84">(<argument pos:start="101:20" pos:end="101:26"><expr pos:start="101:20" pos:end="101:26"><name pos:start="101:20" pos:end="101:26">log_ctx</name></expr></argument>, <argument pos:start="101:29" pos:end="101:40"><expr pos:start="101:29" pos:end="101:40"><name pos:start="101:29" pos:end="101:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:43" pos:end="101:68"><expr pos:start="101:43" pos:end="101:68"><literal type="string" pos:start="101:43" pos:end="101:68">"Cannot find color '%s'\n"</literal></expr></argument>, <argument pos:start="101:71" pos:end="101:83"><expr pos:start="101:71" pos:end="101:83"><name pos:start="101:71" pos:end="101:83">color_string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:35">return <expr pos:start="103:20" pos:end="103:34"><call pos:start="103:20" pos:end="103:34"><name pos:start="103:20" pos:end="103:26">AVERROR</name><argument_list pos:start="103:27" pos:end="103:34">(<argument pos:start="103:28" pos:end="103:33"><expr pos:start="103:28" pos:end="103:33"><name pos:start="103:28" pos:end="103:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:48"><expr pos:start="107:9" pos:end="107:47"><call pos:start="107:9" pos:end="107:47"><name pos:start="107:9" pos:end="107:14">memcpy</name><argument_list pos:start="107:15" pos:end="107:47">(<argument pos:start="107:16" pos:end="107:25"><expr pos:start="107:16" pos:end="107:25"><name pos:start="107:16" pos:end="107:25">rgba_color</name></expr></argument>, <argument pos:start="107:28" pos:end="107:43"><expr pos:start="107:28" pos:end="107:43"><name pos:start="107:28" pos:end="107:43"><name pos:start="107:28" pos:end="107:32">entry</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:43">rgb_color</name></name></expr></argument>, <argument pos:start="107:46" pos:end="107:46"><expr pos:start="107:46" pos:end="107:46"><literal type="number" pos:start="107:46" pos:end="107:46">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="113:5" pos:end="143:5"><if pos:start="113:5" pos:end="143:5">if <condition pos:start="113:8" pos:end="113:13">(<expr pos:start="113:9" pos:end="113:12"><name pos:start="113:9" pos:end="113:12">tail</name></expr>)</condition> <block pos:start="113:15" pos:end="143:5">{<block_content pos:start="115:9" pos:end="141:30">

        <decl_stmt pos:start="115:9" pos:end="115:32"><decl pos:start="115:9" pos:end="115:31"><type pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:16">unsigned</name> <name pos:start="115:18" pos:end="115:21">long</name> <name pos:start="115:23" pos:end="115:25">int</name></type> <name pos:start="115:27" pos:end="115:31">alpha</name></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:40"><decl pos:start="117:9" pos:end="117:39"><type pos:start="117:9" pos:end="117:20"><specifier pos:start="117:9" pos:end="117:13">const</specifier> <name pos:start="117:15" pos:end="117:18">char</name> <modifier pos:start="117:20" pos:end="117:20">*</modifier></type><name pos:start="117:21" pos:end="117:32">alpha_string</name> <init pos:start="117:34" pos:end="117:39">= <expr pos:start="117:36" pos:end="117:39"><name pos:start="117:36" pos:end="117:39">tail</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:44">(<expr pos:start="119:13" pos:end="119:43"><operator pos:start="119:13" pos:end="119:13">!</operator><call pos:start="119:14" pos:end="119:43"><name pos:start="119:14" pos:end="119:20">strncmp</name><argument_list pos:start="119:21" pos:end="119:43">(<argument pos:start="119:22" pos:end="119:33"><expr pos:start="119:22" pos:end="119:33"><name pos:start="119:22" pos:end="119:33">alpha_string</name></expr></argument>, <argument pos:start="119:36" pos:end="119:39"><expr pos:start="119:36" pos:end="119:39"><literal type="string" pos:start="119:36" pos:end="119:39">"0x"</literal></expr></argument>, <argument pos:start="119:42" pos:end="119:42"><expr pos:start="119:42" pos:end="119:42"><literal type="number" pos:start="119:42" pos:end="119:42">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:46" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:53">

            <expr_stmt pos:start="121:13" pos:end="121:53"><expr pos:start="121:13" pos:end="121:52"><name pos:start="121:13" pos:end="121:17">alpha</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <call pos:start="121:21" pos:end="121:52"><name pos:start="121:21" pos:end="121:27">strtoul</name><argument_list pos:start="121:28" pos:end="121:52">(<argument pos:start="121:29" pos:end="121:40"><expr pos:start="121:29" pos:end="121:40"><name pos:start="121:29" pos:end="121:40">alpha_string</name></expr></argument>, <argument pos:start="121:43" pos:end="121:47"><expr pos:start="121:43" pos:end="121:47"><operator pos:start="121:43" pos:end="121:43">&amp;</operator><name pos:start="121:44" pos:end="121:47">tail</name></expr></argument>, <argument pos:start="121:50" pos:end="121:51"><expr pos:start="121:50" pos:end="121:51"><literal type="number" pos:start="121:50" pos:end="121:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="127:9">else <block pos:start="123:16" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:54">

            <expr_stmt pos:start="125:13" pos:end="125:54"><expr pos:start="125:13" pos:end="125:53"><name pos:start="125:13" pos:end="125:17">alpha</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <literal type="number" pos:start="125:21" pos:end="125:23">255</literal> <operator pos:start="125:25" pos:end="125:25">*</operator> <call pos:start="125:27" pos:end="125:53"><name pos:start="125:27" pos:end="125:32">strtod</name><argument_list pos:start="125:33" pos:end="125:53">(<argument pos:start="125:34" pos:end="125:45"><expr pos:start="125:34" pos:end="125:45"><name pos:start="125:34" pos:end="125:45">alpha_string</name></expr></argument>, <argument pos:start="125:48" pos:end="125:52"><expr pos:start="125:48" pos:end="125:52"><operator pos:start="125:48" pos:end="125:48">&amp;</operator><name pos:start="125:49" pos:end="125:52">tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="139:9">if <condition pos:start="131:12" pos:end="131:57">(<expr pos:start="131:13" pos:end="131:56"><name pos:start="131:13" pos:end="131:16">tail</name> <operator pos:start="131:18" pos:end="131:19">==</operator> <name pos:start="131:21" pos:end="131:32">alpha_string</name> <operator pos:start="131:34" pos:end="131:35">||</operator> <operator pos:start="131:37" pos:end="131:37">*</operator><name pos:start="131:38" pos:end="131:41">tail</name> <operator pos:start="131:43" pos:end="131:44">||</operator> <name pos:start="131:46" pos:end="131:50">alpha</name> <operator pos:start="131:52" pos:end="131:52">&gt;</operator> <literal type="number" pos:start="131:54" pos:end="131:56">255</literal></expr>)</condition> <block pos:start="131:59" pos:end="139:9">{<block_content pos:start="133:13" pos:end="137:35">

            <expr_stmt pos:start="133:13" pos:end="135:47"><expr pos:start="133:13" pos:end="135:46"><call pos:start="133:13" pos:end="135:46"><name pos:start="133:13" pos:end="133:18">av_log</name><argument_list pos:start="133:19" pos:end="135:46">(<argument pos:start="133:20" pos:end="133:26"><expr pos:start="133:20" pos:end="133:26"><name pos:start="133:20" pos:end="133:26">log_ctx</name></expr></argument>, <argument pos:start="133:29" pos:end="133:40"><expr pos:start="133:29" pos:end="133:40"><name pos:start="133:29" pos:end="133:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:43" pos:end="133:88"><expr pos:start="133:43" pos:end="133:88"><literal type="string" pos:start="133:43" pos:end="133:88">"Invalid alpha value specifier '%s' in '%s'\n"</literal></expr></argument>,

                   <argument pos:start="135:20" pos:end="135:31"><expr pos:start="135:20" pos:end="135:31"><name pos:start="135:20" pos:end="135:31">alpha_string</name></expr></argument>, <argument pos:start="135:34" pos:end="135:45"><expr pos:start="135:34" pos:end="135:45"><name pos:start="135:34" pos:end="135:45">color_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="137:13" pos:end="137:35">return <expr pos:start="137:20" pos:end="137:34"><call pos:start="137:20" pos:end="137:34"><name pos:start="137:20" pos:end="137:26">AVERROR</name><argument_list pos:start="137:27" pos:end="137:34">(<argument pos:start="137:28" pos:end="137:33"><expr pos:start="137:28" pos:end="137:33"><name pos:start="137:28" pos:end="137:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:30"><expr pos:start="141:9" pos:end="141:29"><name pos:start="141:9" pos:end="141:21"><name pos:start="141:9" pos:end="141:18">rgba_color</name><index pos:start="141:19" pos:end="141:21">[<expr pos:start="141:20" pos:end="141:20"><literal type="number" pos:start="141:20" pos:end="141:20">3</literal></expr>]</index></name> <operator pos:start="141:23" pos:end="141:23">=</operator> <name pos:start="141:25" pos:end="141:29">alpha</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
