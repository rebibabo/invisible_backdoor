<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2323.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">pci_info_device</name><parameter_list pos:start="1:28" pos:end="1:54">(<parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:34">PCIBus</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">bus</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:50">PCIDevice</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">Monitor</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">mon</name> <init pos:start="5:18" pos:end="5:26">= <expr pos:start="5:20" pos:end="5:26"><name pos:start="5:20" pos:end="5:26">cur_mon</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:16">class</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">PCIIORegion</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:26"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:24">pci_class_desc</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:30">desc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="19:59"><expr pos:start="15:5" pos:end="19:58"><call pos:start="15:5" pos:end="19:58"><name pos:start="15:5" pos:end="15:18">monitor_printf</name><argument_list pos:start="15:19" pos:end="19:58">(<argument pos:start="15:20" pos:end="15:22"><expr pos:start="15:20" pos:end="15:22"><name pos:start="15:20" pos:end="15:22">mon</name></expr></argument>, <argument pos:start="15:25" pos:end="15:63"><expr pos:start="15:25" pos:end="15:63"><literal type="string" pos:start="15:25" pos:end="15:63">"  Bus %2d, device %3d, function %d:\n"</literal></expr></argument>,

                   <argument pos:start="17:20" pos:end="17:38"><expr pos:start="17:20" pos:end="17:38"><call pos:start="17:20" pos:end="17:38"><name pos:start="17:20" pos:end="17:30">pci_bus_num</name><argument_list pos:start="17:31" pos:end="17:38">(<argument pos:start="17:32" pos:end="17:37"><expr pos:start="17:32" pos:end="17:37"><name pos:start="17:32" pos:end="17:37"><name pos:start="17:32" pos:end="17:32">d</name><operator pos:start="17:33" pos:end="17:34">-&gt;</operator><name pos:start="17:35" pos:end="17:37">bus</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="19:20" pos:end="19:37"><expr pos:start="19:20" pos:end="19:37"><call pos:start="19:20" pos:end="19:37"><name pos:start="19:20" pos:end="19:27">PCI_SLOT</name><argument_list pos:start="19:28" pos:end="19:37">(<argument pos:start="19:29" pos:end="19:36"><expr pos:start="19:29" pos:end="19:36"><name pos:start="19:29" pos:end="19:36"><name pos:start="19:29" pos:end="19:29">d</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:36">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:40" pos:end="19:57"><expr pos:start="19:40" pos:end="19:57"><call pos:start="19:40" pos:end="19:57"><name pos:start="19:40" pos:end="19:47">PCI_FUNC</name><argument_list pos:start="19:48" pos:end="19:57">(<argument pos:start="19:49" pos:end="19:56"><expr pos:start="19:49" pos:end="19:56"><name pos:start="19:49" pos:end="19:56"><name pos:start="19:49" pos:end="19:49">d</name><operator pos:start="19:50" pos:end="19:51">-&gt;</operator><name pos:start="19:52" pos:end="19:56">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:55"><expr pos:start="21:5" pos:end="21:54"><name pos:start="21:5" pos:end="21:9">class</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="21:54"><name pos:start="21:13" pos:end="21:24">pci_get_word</name><argument_list pos:start="21:25" pos:end="21:54">(<argument pos:start="21:26" pos:end="21:53"><expr pos:start="21:26" pos:end="21:53"><name pos:start="21:26" pos:end="21:34"><name pos:start="21:26" pos:end="21:26">d</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:34">config</name></name> <operator pos:start="21:36" pos:end="21:36">+</operator> <name pos:start="21:38" pos:end="21:53">PCI_CLASS_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><call pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:18">monitor_printf</name><argument_list pos:start="23:19" pos:end="23:31">(<argument pos:start="23:20" pos:end="23:22"><expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">mon</name></expr></argument>, <argument pos:start="23:25" pos:end="23:30"><expr pos:start="23:25" pos:end="23:30"><literal type="string" pos:start="23:25" pos:end="23:30">"    "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:34"><expr pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:8">desc</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <name pos:start="25:12" pos:end="25:33">pci_class_descriptions</name></expr>;</expr_stmt>

    <while pos:start="27:5" pos:end="29:15">while <condition pos:start="27:11" pos:end="27:46">(<expr pos:start="27:12" pos:end="27:45"><name pos:start="27:12" pos:end="27:21"><name pos:start="27:12" pos:end="27:15">desc</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:21">desc</name></name> <operator pos:start="27:23" pos:end="27:24">&amp;&amp;</operator> <name pos:start="27:26" pos:end="27:30">class</name> <operator pos:start="27:32" pos:end="27:33">!=</operator> <name pos:start="27:35" pos:end="27:45"><name pos:start="27:35" pos:end="27:38">desc</name><operator pos:start="27:39" pos:end="27:40">-&gt;</operator><name pos:start="27:41" pos:end="27:45">class</name></name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:15"><block_content pos:start="29:9" pos:end="29:15">

        <expr_stmt pos:start="29:9" pos:end="29:15"><expr pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:12">desc</name><operator pos:start="29:13" pos:end="29:14">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:19">(<expr pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:12">desc</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:18">desc</name></name></expr>)</condition> <block pos:start="31:21" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:46">

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><call pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:22">monitor_printf</name><argument_list pos:start="33:23" pos:end="33:45">(<argument pos:start="33:24" pos:end="33:26"><expr pos:start="33:24" pos:end="33:26"><name pos:start="33:24" pos:end="33:26">mon</name></expr></argument>, <argument pos:start="33:29" pos:end="33:32"><expr pos:start="33:29" pos:end="33:32"><literal type="string" pos:start="33:29" pos:end="33:32">"%s"</literal></expr></argument>, <argument pos:start="33:35" pos:end="33:44"><expr pos:start="33:35" pos:end="33:44"><name pos:start="33:35" pos:end="33:44"><name pos:start="33:35" pos:end="33:38">desc</name><operator pos:start="33:39" pos:end="33:40">-&gt;</operator><name pos:start="33:41" pos:end="33:44">desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:49">

        <expr_stmt pos:start="37:9" pos:end="37:49"><expr pos:start="37:9" pos:end="37:48"><call pos:start="37:9" pos:end="37:48"><name pos:start="37:9" pos:end="37:22">monitor_printf</name><argument_list pos:start="37:23" pos:end="37:48">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">mon</name></expr></argument>, <argument pos:start="37:29" pos:end="37:40"><expr pos:start="37:29" pos:end="37:40"><literal type="string" pos:start="37:29" pos:end="37:40">"Class %04x"</literal></expr></argument>, <argument pos:start="37:43" pos:end="37:47"><expr pos:start="37:43" pos:end="37:47"><name pos:start="37:43" pos:end="37:47">class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="45:52"><expr pos:start="41:5" pos:end="45:51"><call pos:start="41:5" pos:end="45:51"><name pos:start="41:5" pos:end="41:18">monitor_printf</name><argument_list pos:start="41:19" pos:end="45:51">(<argument pos:start="41:20" pos:end="41:22"><expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:22">mon</name></expr></argument>, <argument pos:start="41:25" pos:end="41:50"><expr pos:start="41:25" pos:end="41:50"><literal type="string" pos:start="41:25" pos:end="41:50">": PCI device %04x:%04x\n"</literal></expr></argument>,

           <argument pos:start="43:12" pos:end="43:50"><expr pos:start="43:12" pos:end="43:50"><call pos:start="43:12" pos:end="43:50"><name pos:start="43:12" pos:end="43:23">pci_get_word</name><argument_list pos:start="43:24" pos:end="43:50">(<argument pos:start="43:25" pos:end="43:49"><expr pos:start="43:25" pos:end="43:49"><name pos:start="43:25" pos:end="43:33"><name pos:start="43:25" pos:end="43:25">d</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:33">config</name></name> <operator pos:start="43:35" pos:end="43:35">+</operator> <name pos:start="43:37" pos:end="43:49">PCI_VENDOR_ID</name></expr></argument>)</argument_list></call></expr></argument>,

           <argument pos:start="45:12" pos:end="45:50"><expr pos:start="45:12" pos:end="45:50"><call pos:start="45:12" pos:end="45:50"><name pos:start="45:12" pos:end="45:23">pci_get_word</name><argument_list pos:start="45:24" pos:end="45:50">(<argument pos:start="45:25" pos:end="45:49"><expr pos:start="45:25" pos:end="45:49"><name pos:start="45:25" pos:end="45:33"><name pos:start="45:25" pos:end="45:25">d</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:33">config</name></name> <operator pos:start="45:35" pos:end="45:35">+</operator> <name pos:start="45:37" pos:end="45:49">PCI_DEVICE_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:42">(<expr pos:start="49:9" pos:end="49:41"><name pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:9">d</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:17">config</name><index pos:start="49:18" pos:end="49:36">[<expr pos:start="49:19" pos:end="49:35"><name pos:start="49:19" pos:end="49:35">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="49:38" pos:end="49:39">!=</operator> <literal type="number" pos:start="49:41" pos:end="49:41">0</literal></expr>)</condition> <block pos:start="49:44" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:54">

        <expr_stmt pos:start="51:9" pos:end="53:54"><expr pos:start="51:9" pos:end="53:53"><call pos:start="51:9" pos:end="53:53"><name pos:start="51:9" pos:end="51:22">monitor_printf</name><argument_list pos:start="51:23" pos:end="53:53">(<argument pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:26">mon</name></expr></argument>, <argument pos:start="51:29" pos:end="51:45"><expr pos:start="51:29" pos:end="51:45"><literal type="string" pos:start="51:29" pos:end="51:45">"      IRQ %d.\n"</literal></expr></argument>,

                       <argument pos:start="53:24" pos:end="53:52"><expr pos:start="53:24" pos:end="53:52"><name pos:start="53:24" pos:end="53:52"><name pos:start="53:24" pos:end="53:24">d</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:32">config</name><index pos:start="53:33" pos:end="53:52">[<expr pos:start="53:34" pos:end="53:51"><name pos:start="53:34" pos:end="53:51">PCI_INTERRUPT_LINE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="111:5"><if pos:start="57:5" pos:end="111:5">if <condition pos:start="57:8" pos:end="57:24">(<expr pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:13">class</name> <operator pos:start="57:15" pos:end="57:16">==</operator> <literal type="number" pos:start="57:18" pos:end="57:23">0x0604</literal></expr>)</condition> <block pos:start="57:26" pos:end="111:5">{<block_content pos:start="59:9" pos:end="109:72">

        <decl_stmt pos:start="59:9" pos:end="59:22"><decl pos:start="59:9" pos:end="59:21"><type pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:16">uint64_t</name></type> <name pos:start="59:18" pos:end="59:21">base</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:23"><decl pos:start="61:9" pos:end="61:22"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint64_t</name></type> <name pos:start="61:18" pos:end="61:22">limit</name></decl>;</decl_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:64"><expr pos:start="65:9" pos:end="65:63"><call pos:start="65:9" pos:end="65:63"><name pos:start="65:9" pos:end="65:22">monitor_printf</name><argument_list pos:start="65:23" pos:end="65:63">(<argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">mon</name></expr></argument>, <argument pos:start="65:29" pos:end="65:45"><expr pos:start="65:29" pos:end="65:45"><literal type="string" pos:start="65:29" pos:end="65:45">"      BUS %d.\n"</literal></expr></argument>, <argument pos:start="65:48" pos:end="65:62"><expr pos:start="65:48" pos:end="65:62"><name pos:start="65:48" pos:end="65:62"><name pos:start="65:48" pos:end="65:48">d</name><operator pos:start="65:49" pos:end="65:50">-&gt;</operator><name pos:start="65:51" pos:end="65:56">config</name><index pos:start="65:57" pos:end="65:62">[<expr pos:start="65:58" pos:end="65:61"><literal type="number" pos:start="65:58" pos:end="65:61">0x19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="69:53"><expr pos:start="67:9" pos:end="69:52"><call pos:start="67:9" pos:end="69:52"><name pos:start="67:9" pos:end="67:22">monitor_printf</name><argument_list pos:start="67:23" pos:end="69:52">(<argument pos:start="67:24" pos:end="67:26"><expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">mon</name></expr></argument>, <argument pos:start="67:29" pos:end="67:55"><expr pos:start="67:29" pos:end="67:55"><literal type="string" pos:start="67:29" pos:end="67:55">"      secondary bus %d.\n"</literal></expr></argument>,

                       <argument pos:start="69:24" pos:end="69:51"><expr pos:start="69:24" pos:end="69:51"><name pos:start="69:24" pos:end="69:51"><name pos:start="69:24" pos:end="69:24">d</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:32">config</name><index pos:start="69:33" pos:end="69:51">[<expr pos:start="69:34" pos:end="69:50"><name pos:start="69:34" pos:end="69:50">PCI_SECONDARY_BUS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="73:55"><expr pos:start="71:9" pos:end="73:54"><call pos:start="71:9" pos:end="73:54"><name pos:start="71:9" pos:end="71:22">monitor_printf</name><argument_list pos:start="71:23" pos:end="73:54">(<argument pos:start="71:24" pos:end="71:26"><expr pos:start="71:24" pos:end="71:26"><name pos:start="71:24" pos:end="71:26">mon</name></expr></argument>, <argument pos:start="71:29" pos:end="71:57"><expr pos:start="71:29" pos:end="71:57"><literal type="string" pos:start="71:29" pos:end="71:57">"      subordinate bus %d.\n"</literal></expr></argument>,

                       <argument pos:start="73:24" pos:end="73:53"><expr pos:start="73:24" pos:end="73:53"><name pos:start="73:24" pos:end="73:53"><name pos:start="73:24" pos:end="73:24">d</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:32">config</name><index pos:start="73:33" pos:end="73:53">[<expr pos:start="73:34" pos:end="73:52"><name pos:start="73:34" pos:end="73:52">PCI_SUBORDINATE_BUS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:65"><expr pos:start="77:9" pos:end="77:64"><name pos:start="77:9" pos:end="77:12">base</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:64"><name pos:start="77:16" pos:end="77:34">pci_bridge_get_base</name><argument_list pos:start="77:35" pos:end="77:64">(<argument pos:start="77:36" pos:end="77:36"><expr pos:start="77:36" pos:end="77:36"><name pos:start="77:36" pos:end="77:36">d</name></expr></argument>, <argument pos:start="77:39" pos:end="77:63"><expr pos:start="77:39" pos:end="77:63"><name pos:start="77:39" pos:end="77:63">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:67"><expr pos:start="79:9" pos:end="79:66"><name pos:start="79:9" pos:end="79:13">limit</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:66"><name pos:start="79:17" pos:end="79:36">pci_bridge_get_limit</name><argument_list pos:start="79:37" pos:end="79:66">(<argument pos:start="79:38" pos:end="79:38"><expr pos:start="79:38" pos:end="79:38"><name pos:start="79:38" pos:end="79:38">d</name></expr></argument>, <argument pos:start="79:41" pos:end="79:65"><expr pos:start="79:41" pos:end="79:65"><name pos:start="79:41" pos:end="79:65">PCI_BASE_ADDRESS_SPACE_IO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="83:36"><expr pos:start="81:9" pos:end="83:35"><call pos:start="81:9" pos:end="83:35"><name pos:start="81:9" pos:end="81:22">monitor_printf</name><argument_list pos:start="81:23" pos:end="83:35">(<argument pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">mon</name></expr></argument>, <argument pos:start="81:29" pos:end="81:77"><expr pos:start="81:29" pos:end="81:77"><literal type="string" pos:start="81:29" pos:end="81:51">"      IO range [0x%04"</literal><name pos:start="81:52" pos:end="81:57">PRIx64</name><literal type="string" pos:start="81:58" pos:end="81:66">", 0x%04"</literal><name pos:start="81:67" pos:end="81:72">PRIx64</name><literal type="string" pos:start="81:73" pos:end="81:77">"]\n"</literal></expr></argument>,

                       <argument pos:start="83:24" pos:end="83:27"><expr pos:start="83:24" pos:end="83:27"><name pos:start="83:24" pos:end="83:27">base</name></expr></argument>, <argument pos:start="83:30" pos:end="83:34"><expr pos:start="83:30" pos:end="83:34"><name pos:start="83:30" pos:end="83:34">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:69"><expr pos:start="87:9" pos:end="87:68"><name pos:start="87:9" pos:end="87:12">base</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <call pos:start="87:16" pos:end="87:68"><name pos:start="87:16" pos:end="87:34">pci_bridge_get_base</name><argument_list pos:start="87:35" pos:end="87:68">(<argument pos:start="87:36" pos:end="87:36"><expr pos:start="87:36" pos:end="87:36"><name pos:start="87:36" pos:end="87:36">d</name></expr></argument>, <argument pos:start="87:39" pos:end="87:67"><expr pos:start="87:39" pos:end="87:67"><name pos:start="87:39" pos:end="87:67">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:76"><expr pos:start="89:9" pos:end="89:75"><name pos:start="89:9" pos:end="89:13">limit</name><operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="89:75"><name pos:start="89:16" pos:end="89:41">pci_config_get_memory_base</name><argument_list pos:start="89:42" pos:end="89:75">(<argument pos:start="89:43" pos:end="89:43"><expr pos:start="89:43" pos:end="89:43"><name pos:start="89:43" pos:end="89:43">d</name></expr></argument>, <argument pos:start="89:46" pos:end="89:74"><expr pos:start="89:46" pos:end="89:74"><name pos:start="89:46" pos:end="89:74">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="95:36"><expr pos:start="91:9" pos:end="95:35"><call pos:start="91:9" pos:end="95:35"><name pos:start="91:9" pos:end="91:22">monitor_printf</name><argument_list pos:start="91:23" pos:end="95:35">(<argument pos:start="91:24" pos:end="91:26"><expr pos:start="91:24" pos:end="91:26"><name pos:start="91:24" pos:end="91:26">mon</name></expr></argument>,

                       <argument pos:start="93:24" pos:end="93:76"><expr pos:start="93:24" pos:end="93:76"><literal type="string" pos:start="93:24" pos:end="93:50">"      memory range [0x%08"</literal><name pos:start="93:51" pos:end="93:56">PRIx64</name><literal type="string" pos:start="93:57" pos:end="93:65">", 0x%08"</literal><name pos:start="93:66" pos:end="93:71">PRIx64</name><literal type="string" pos:start="93:72" pos:end="93:76">"]\n"</literal></expr></argument>,

                       <argument pos:start="95:24" pos:end="95:27"><expr pos:start="95:24" pos:end="95:27"><name pos:start="95:24" pos:end="95:27">base</name></expr></argument>, <argument pos:start="95:30" pos:end="95:34"><expr pos:start="95:30" pos:end="95:34"><name pos:start="95:30" pos:end="95:34">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="99:9" pos:end="101:66"><expr pos:start="99:9" pos:end="101:65"><name pos:start="99:9" pos:end="99:12">base</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <call pos:start="99:16" pos:end="101:65"><name pos:start="99:16" pos:end="99:34">pci_bridge_get_base</name><argument_list pos:start="99:35" pos:end="101:65">(<argument pos:start="99:36" pos:end="99:36"><expr pos:start="99:36" pos:end="99:36"><name pos:start="99:36" pos:end="99:36">d</name></expr></argument>, <argument pos:start="99:39" pos:end="101:64"><expr pos:start="99:39" pos:end="101:64"><name pos:start="99:39" pos:end="99:67">PCI_BASE_ADDRESS_SPACE_MEMORY</name> <operator pos:start="99:69" pos:end="99:69">|</operator>

                                   <name pos:start="101:36" pos:end="101:64">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="105:68"><expr pos:start="103:9" pos:end="105:67"><name pos:start="103:9" pos:end="103:13">limit</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <call pos:start="103:17" pos:end="105:67"><name pos:start="103:17" pos:end="103:36">pci_bridge_get_limit</name><argument_list pos:start="103:37" pos:end="105:67">(<argument pos:start="103:38" pos:end="103:38"><expr pos:start="103:38" pos:end="103:38"><name pos:start="103:38" pos:end="103:38">d</name></expr></argument>, <argument pos:start="103:41" pos:end="105:66"><expr pos:start="103:41" pos:end="105:66"><name pos:start="103:41" pos:end="103:69">PCI_BASE_ADDRESS_SPACE_MEMORY</name> <operator pos:start="103:71" pos:end="103:71">|</operator>

                                     <name pos:start="105:38" pos:end="105:66">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:72"><expr pos:start="107:9" pos:end="109:71"><call pos:start="107:9" pos:end="109:71"><name pos:start="107:9" pos:end="107:22">monitor_printf</name><argument_list pos:start="107:23" pos:end="109:71">(<argument pos:start="107:24" pos:end="107:26"><expr pos:start="107:24" pos:end="107:26"><name pos:start="107:24" pos:end="107:26">mon</name></expr></argument>, <argument pos:start="107:29" pos:end="109:57"><expr pos:start="107:29" pos:end="109:57"><literal type="string" pos:start="107:29" pos:end="107:62">"      prefetchable memory range "</literal>

                       <literal type="string" pos:start="109:24" pos:end="109:31">"[0x%08"</literal><name pos:start="109:32" pos:end="109:37">PRIx64</name><literal type="string" pos:start="109:38" pos:end="109:46">", 0x%08"</literal><name pos:start="109:47" pos:end="109:52">PRIx64</name><literal type="string" pos:start="109:53" pos:end="109:57">"]\n"</literal></expr></argument>, <argument pos:start="109:60" pos:end="109:63"><expr pos:start="109:60" pos:end="109:63"><name pos:start="109:60" pos:end="109:63">base</name></expr></argument>, <argument pos:start="109:66" pos:end="109:70"><expr pos:start="109:66" pos:end="109:70"><name pos:start="109:66" pos:end="109:70">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="113:5" pos:end="155:5">for<control pos:start="113:8" pos:end="113:39">(<init pos:start="113:9" pos:end="113:14"><expr pos:start="113:9" pos:end="113:13"><name pos:start="113:9" pos:end="113:9">i</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <literal type="number" pos:start="113:13" pos:end="113:13">0</literal></expr>;</init><condition pos:start="113:15" pos:end="113:34"><expr pos:start="113:15" pos:end="113:33"><name pos:start="113:15" pos:end="113:15">i</name> <operator pos:start="113:17" pos:end="113:17">&lt;</operator> <name pos:start="113:19" pos:end="113:33">PCI_NUM_REGIONS</name></expr>;</condition> <incr pos:start="113:36" pos:end="113:38"><expr pos:start="113:36" pos:end="113:38"><name pos:start="113:36" pos:end="113:36">i</name><operator pos:start="113:37" pos:end="113:38">++</operator></expr></incr>)</control> <block pos:start="113:41" pos:end="155:5">{<block_content pos:start="115:9" pos:end="153:9">

        <expr_stmt pos:start="115:9" pos:end="115:30"><expr pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:9">r</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <operator pos:start="115:13" pos:end="115:13">&amp;</operator><name pos:start="115:14" pos:end="115:29"><name pos:start="115:14" pos:end="115:14">d</name><operator pos:start="115:15" pos:end="115:16">-&gt;</operator><name pos:start="115:17" pos:end="115:26">io_regions</name><index pos:start="115:27" pos:end="115:29">[<expr pos:start="115:28" pos:end="115:28"><name pos:start="115:28" pos:end="115:28">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="153:9"><if pos:start="117:9" pos:end="153:9">if <condition pos:start="117:12" pos:end="117:25">(<expr pos:start="117:13" pos:end="117:24"><name pos:start="117:13" pos:end="117:19"><name pos:start="117:13" pos:end="117:13">r</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:19">size</name></name> <operator pos:start="117:21" pos:end="117:22">!=</operator> <literal type="number" pos:start="117:24" pos:end="117:24">0</literal></expr>)</condition> <block pos:start="117:27" pos:end="153:9">{<block_content pos:start="119:13" pos:end="151:13">

            <expr_stmt pos:start="119:13" pos:end="119:52"><expr pos:start="119:13" pos:end="119:51"><call pos:start="119:13" pos:end="119:51"><name pos:start="119:13" pos:end="119:26">monitor_printf</name><argument_list pos:start="119:27" pos:end="119:51">(<argument pos:start="119:28" pos:end="119:30"><expr pos:start="119:28" pos:end="119:30"><name pos:start="119:28" pos:end="119:30">mon</name></expr></argument>, <argument pos:start="119:33" pos:end="119:47"><expr pos:start="119:33" pos:end="119:47"><literal type="string" pos:start="119:33" pos:end="119:47">"      BAR%d: "</literal></expr></argument>, <argument pos:start="119:50" pos:end="119:50"><expr pos:start="119:50" pos:end="119:50"><name pos:start="119:50" pos:end="119:50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="151:13"><if pos:start="121:13" pos:end="129:13">if <condition pos:start="121:16" pos:end="121:52">(<expr pos:start="121:17" pos:end="121:51"><name pos:start="121:17" pos:end="121:23"><name pos:start="121:17" pos:end="121:17">r</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:23">type</name></name> <operator pos:start="121:25" pos:end="121:25">&amp;</operator> <name pos:start="121:27" pos:end="121:51">PCI_BASE_ADDRESS_SPACE_IO</name></expr>)</condition> <block pos:start="121:54" pos:end="129:13">{<block_content pos:start="123:17" pos:end="127:63">

                <expr_stmt pos:start="123:17" pos:end="127:63"><expr pos:start="123:17" pos:end="127:62"><call pos:start="123:17" pos:end="127:62"><name pos:start="123:17" pos:end="123:30">monitor_printf</name><argument_list pos:start="123:31" pos:end="127:62">(<argument pos:start="123:32" pos:end="123:34"><expr pos:start="123:32" pos:end="123:34"><name pos:start="123:32" pos:end="123:34">mon</name></expr></argument>, <argument pos:start="123:37" pos:end="125:56"><expr pos:start="123:37" pos:end="125:56"><literal type="string" pos:start="123:37" pos:end="123:50">"I/O at 0x%04"</literal><name pos:start="123:51" pos:end="123:60">FMT_PCIBUS</name>

                               <literal type="string" pos:start="125:32" pos:end="125:40">" [0x%04"</literal><name pos:start="125:41" pos:end="125:50">FMT_PCIBUS</name><literal type="string" pos:start="125:51" pos:end="125:56">"].\n"</literal></expr></argument>,

                               <argument pos:start="127:32" pos:end="127:38"><expr pos:start="127:32" pos:end="127:38"><name pos:start="127:32" pos:end="127:38"><name pos:start="127:32" pos:end="127:32">r</name><operator pos:start="127:33" pos:end="127:34">-&gt;</operator><name pos:start="127:35" pos:end="127:38">addr</name></name></expr></argument>, <argument pos:start="127:41" pos:end="127:61"><expr pos:start="127:41" pos:end="127:61"><name pos:start="127:41" pos:end="127:47"><name pos:start="127:41" pos:end="127:41">r</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:47">addr</name></name> <operator pos:start="127:49" pos:end="127:49">+</operator> <name pos:start="127:51" pos:end="127:57"><name pos:start="127:51" pos:end="127:51">r</name><operator pos:start="127:52" pos:end="127:53">-&gt;</operator><name pos:start="127:54" pos:end="127:57">size</name></name> <operator pos:start="127:59" pos:end="127:59">-</operator> <literal type="number" pos:start="127:61" pos:end="127:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="129:15" pos:end="151:13">else <block pos:start="129:20" pos:end="151:13">{<block_content pos:start="131:17" pos:end="149:63">

                <decl_stmt pos:start="131:17" pos:end="133:40"><decl pos:start="131:17" pos:end="133:39"><type pos:start="131:17" pos:end="131:28"><specifier pos:start="131:17" pos:end="131:21">const</specifier> <name pos:start="131:23" pos:end="131:26">char</name> <modifier pos:start="131:28" pos:end="131:28">*</modifier></type><name pos:start="131:29" pos:end="131:32">type</name> <init pos:start="131:34" pos:end="133:39">= <expr pos:start="131:36" pos:end="133:39"><ternary pos:start="131:36" pos:end="133:39"><condition pos:start="131:36" pos:end="131:75"><expr pos:start="131:36" pos:end="131:73"><name pos:start="131:36" pos:end="131:42"><name pos:start="131:36" pos:end="131:36">r</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:42">type</name></name> <operator pos:start="131:44" pos:end="131:44">&amp;</operator> <name pos:start="131:46" pos:end="131:73">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr> ?</condition><then pos:start="133:21" pos:end="133:28">

                    <expr pos:start="133:21" pos:end="133:28"><literal type="string" pos:start="133:21" pos:end="133:28">"64 bit"</literal></expr> </then><else pos:start="133:30" pos:end="133:39">: <expr pos:start="133:32" pos:end="133:39"><literal type="string" pos:start="133:32" pos:end="133:39">"32 bit"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="135:17" pos:end="139:41"><decl pos:start="135:17" pos:end="139:40"><type pos:start="135:17" pos:end="135:28"><specifier pos:start="135:17" pos:end="135:21">const</specifier> <name pos:start="135:23" pos:end="135:26">char</name> <modifier pos:start="135:28" pos:end="135:28">*</modifier></type><name pos:start="135:29" pos:end="135:36">prefetch</name> <init pos:start="135:38" pos:end="139:40">=

                    <expr pos:start="137:21" pos:end="139:40"><ternary pos:start="137:21" pos:end="139:40"><condition pos:start="137:21" pos:end="137:61"><expr pos:start="137:21" pos:end="137:59"><name pos:start="137:21" pos:end="137:27"><name pos:start="137:21" pos:end="137:21">r</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:27">type</name></name> <operator pos:start="137:29" pos:end="137:29">&amp;</operator> <name pos:start="137:31" pos:end="137:59">PCI_BASE_ADDRESS_MEM_PREFETCH</name></expr> ?</condition><then pos:start="139:21" pos:end="139:35">

                    <expr pos:start="139:21" pos:end="139:35"><literal type="string" pos:start="139:21" pos:end="139:35">" prefetchable"</literal></expr> </then><else pos:start="139:37" pos:end="139:40">: <expr pos:start="139:39" pos:end="139:40"><literal type="string" pos:start="139:39" pos:end="139:40">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="143:17" pos:end="149:63"><expr pos:start="143:17" pos:end="149:62"><call pos:start="143:17" pos:end="149:62"><name pos:start="143:17" pos:end="143:30">monitor_printf</name><argument_list pos:start="143:31" pos:end="149:62">(<argument pos:start="143:32" pos:end="143:34"><expr pos:start="143:32" pos:end="143:34"><name pos:start="143:32" pos:end="143:34">mon</name></expr></argument>, <argument pos:start="143:37" pos:end="145:56"><expr pos:start="143:37" pos:end="145:56"><literal type="string" pos:start="143:37" pos:end="143:58">"%s%s memory at 0x%08"</literal><name pos:start="143:59" pos:end="143:68">FMT_PCIBUS</name>

                               <literal type="string" pos:start="145:32" pos:end="145:40">" [0x%08"</literal><name pos:start="145:41" pos:end="145:50">FMT_PCIBUS</name><literal type="string" pos:start="145:51" pos:end="145:56">"].\n"</literal></expr></argument>,

                               <argument pos:start="147:32" pos:end="147:35"><expr pos:start="147:32" pos:end="147:35"><name pos:start="147:32" pos:end="147:35">type</name></expr></argument>, <argument pos:start="147:38" pos:end="147:45"><expr pos:start="147:38" pos:end="147:45"><name pos:start="147:38" pos:end="147:45">prefetch</name></expr></argument>,

                               <argument pos:start="149:32" pos:end="149:38"><expr pos:start="149:32" pos:end="149:38"><name pos:start="149:32" pos:end="149:38"><name pos:start="149:32" pos:end="149:32">r</name><operator pos:start="149:33" pos:end="149:34">-&gt;</operator><name pos:start="149:35" pos:end="149:38">addr</name></name></expr></argument>, <argument pos:start="149:41" pos:end="149:61"><expr pos:start="149:41" pos:end="149:61"><name pos:start="149:41" pos:end="149:47"><name pos:start="149:41" pos:end="149:41">r</name><operator pos:start="149:42" pos:end="149:43">-&gt;</operator><name pos:start="149:44" pos:end="149:47">addr</name></name> <operator pos:start="149:49" pos:end="149:49">+</operator> <name pos:start="149:51" pos:end="149:57"><name pos:start="149:51" pos:end="149:51">r</name><operator pos:start="149:52" pos:end="149:53">-&gt;</operator><name pos:start="149:54" pos:end="149:57">size</name></name> <operator pos:start="149:59" pos:end="149:59">-</operator> <literal type="number" pos:start="149:61" pos:end="149:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="157:5" pos:end="157:75"><expr pos:start="157:5" pos:end="157:74"><call pos:start="157:5" pos:end="157:74"><name pos:start="157:5" pos:end="157:18">monitor_printf</name><argument_list pos:start="157:19" pos:end="157:74">(<argument pos:start="157:20" pos:end="157:22"><expr pos:start="157:20" pos:end="157:22"><name pos:start="157:20" pos:end="157:22">mon</name></expr></argument>, <argument pos:start="157:25" pos:end="157:43"><expr pos:start="157:25" pos:end="157:43"><literal type="string" pos:start="157:25" pos:end="157:43">"      id \"%s\"\n"</literal></expr></argument>, <argument pos:start="157:46" pos:end="157:73"><expr pos:start="157:46" pos:end="157:73"><ternary pos:start="157:46" pos:end="157:73"><condition pos:start="157:46" pos:end="157:57"><expr pos:start="157:46" pos:end="157:55"><name pos:start="157:46" pos:end="157:55"><name pos:start="157:46" pos:end="157:46">d</name><operator pos:start="157:47" pos:end="157:48">-&gt;</operator><name pos:start="157:49" pos:end="157:52">qdev</name><operator pos:start="157:53" pos:end="157:53">.</operator><name pos:start="157:54" pos:end="157:55">id</name></name></expr> ?</condition><then pos:start="157:59" pos:end="157:68"> <expr pos:start="157:59" pos:end="157:68"><name pos:start="157:59" pos:end="157:68"><name pos:start="157:59" pos:end="157:59">d</name><operator pos:start="157:60" pos:end="157:61">-&gt;</operator><name pos:start="157:62" pos:end="157:65">qdev</name><operator pos:start="157:66" pos:end="157:66">.</operator><name pos:start="157:67" pos:end="157:68">id</name></name></expr> </then><else pos:start="157:70" pos:end="157:73">: <expr pos:start="157:72" pos:end="157:73"><literal type="string" pos:start="157:72" pos:end="157:73">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:48">(<expr pos:start="159:9" pos:end="159:47"><name pos:start="159:9" pos:end="159:13">class</name> <operator pos:start="159:15" pos:end="159:16">==</operator> <literal type="number" pos:start="159:18" pos:end="159:23">0x0604</literal> <operator pos:start="159:25" pos:end="159:26">&amp;&amp;</operator> <name pos:start="159:28" pos:end="159:42"><name pos:start="159:28" pos:end="159:28">d</name><operator pos:start="159:29" pos:end="159:30">-&gt;</operator><name pos:start="159:31" pos:end="159:36">config</name><index pos:start="159:37" pos:end="159:42">[<expr pos:start="159:38" pos:end="159:41"><literal type="number" pos:start="159:38" pos:end="159:41">0x19</literal></expr>]</index></name> <operator pos:start="159:44" pos:end="159:45">!=</operator> <literal type="number" pos:start="159:47" pos:end="159:47">0</literal></expr>)</condition> <block pos:start="159:50" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:67">

        <expr_stmt pos:start="161:9" pos:end="161:67"><expr pos:start="161:9" pos:end="161:66"><call pos:start="161:9" pos:end="161:66"><name pos:start="161:9" pos:end="161:27">pci_for_each_device</name><argument_list pos:start="161:28" pos:end="161:66">(<argument pos:start="161:29" pos:end="161:31"><expr pos:start="161:29" pos:end="161:31"><name pos:start="161:29" pos:end="161:31">bus</name></expr></argument>, <argument pos:start="161:34" pos:end="161:48"><expr pos:start="161:34" pos:end="161:48"><name pos:start="161:34" pos:end="161:48"><name pos:start="161:34" pos:end="161:34">d</name><operator pos:start="161:35" pos:end="161:36">-&gt;</operator><name pos:start="161:37" pos:end="161:42">config</name><index pos:start="161:43" pos:end="161:48">[<expr pos:start="161:44" pos:end="161:47"><literal type="number" pos:start="161:44" pos:end="161:47">0x19</literal></expr>]</index></name></expr></argument>, <argument pos:start="161:51" pos:end="161:65"><expr pos:start="161:51" pos:end="161:65"><name pos:start="161:51" pos:end="161:65">pci_info_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
