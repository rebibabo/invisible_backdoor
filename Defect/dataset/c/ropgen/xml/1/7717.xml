<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7717.c" pos:tabs="8"><function pos:start="1:1" pos:end="142:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">disas_coproc_insn</name><parameter_list pos:start="1:29" pos:end="1:79">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:40">CPUARMState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type> <name pos:start="1:44" pos:end="1:46">env</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><name pos:start="1:49" pos:end="1:60">DisasContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">s</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:73">uint32_t</name></type> <name pos:start="1:75" pos:end="1:78">insn</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="126:69">{<block_content pos:start="3:5" pos:end="126:69">
    <decl_stmt pos:start="3:5" pos:end="3:59"><decl pos:start="3:5" pos:end="3:13"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:13">cpnum</name></decl>, <decl pos:start="3:16" pos:end="3:19"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:16" pos:end="3:19">is64</name></decl>, <decl pos:start="3:22" pos:end="3:24"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:22" pos:end="3:24">crn</name></decl>, <decl pos:start="3:27" pos:end="3:29"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:27" pos:end="3:29">crm</name></decl>, <decl pos:start="3:32" pos:end="3:35"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:32" pos:end="3:35">opc1</name></decl>, <decl pos:start="3:38" pos:end="3:41"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:38" pos:end="3:41">opc2</name></decl>, <decl pos:start="3:44" pos:end="3:49"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:44" pos:end="3:49">isread</name></decl>, <decl pos:start="3:52" pos:end="3:53"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:52" pos:end="3:53">rt</name></decl>, <decl pos:start="3:56" pos:end="3:58"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:56" pos:end="3:58">rt2</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:27"><decl pos:start="4:5" pos:end="4:26"><type pos:start="4:5" pos:end="4:24"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:22">ARMCPRegInfo</name> <modifier pos:start="4:24" pos:end="4:24">*</modifier></type><name pos:start="4:25" pos:end="4:26">ri</name></decl>;</decl_stmt>
    <expr_stmt pos:start="5:5" pos:end="5:30"><expr pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:9">cpnum</name> <operator pos:start="5:11" pos:end="5:11">=</operator> <operator pos:start="5:13" pos:end="5:13">(</operator><name pos:start="5:14" pos:end="5:17">insn</name> <operator pos:start="5:19" pos:end="5:20">&gt;&gt;</operator> <literal type="number" pos:start="5:22" pos:end="5:22">8</literal><operator pos:start="5:23" pos:end="5:23">)</operator> <operator pos:start="5:25" pos:end="5:25">&amp;</operator> <literal type="number" pos:start="5:27" pos:end="5:29">0xf</literal></expr>;</expr_stmt>
    <if_stmt pos:start="6:5" pos:end="8:17"><if pos:start="6:5" pos:end="8:17">if <condition pos:start="6:8" pos:end="7:62">(<expr pos:start="6:9" pos:end="7:61"><call pos:start="6:9" pos:end="6:44"><name pos:start="6:9" pos:end="6:19">arm_feature</name><argument_list pos:start="6:20" pos:end="6:44">(<argument pos:start="6:21" pos:end="6:23"><expr pos:start="6:21" pos:end="6:23"><name pos:start="6:21" pos:end="6:23">env</name></expr></argument>, <argument pos:start="6:26" pos:end="6:43"><expr pos:start="6:26" pos:end="6:43"><name pos:start="6:26" pos:end="6:43">ARM_FEATURE_XSCALE</name></expr></argument>)</argument_list></call>
	    <operator pos:start="7:13" pos:end="7:14">&amp;&amp;</operator> <operator pos:start="7:16" pos:end="7:16">(</operator><operator pos:start="7:17" pos:end="7:17">(</operator><name pos:start="7:18" pos:end="7:35"><name pos:start="7:18" pos:end="7:20">env</name><operator pos:start="7:21" pos:end="7:22">-&gt;</operator><name pos:start="7:23" pos:end="7:26">cp15</name><operator pos:start="7:27" pos:end="7:27">.</operator><name pos:start="7:28" pos:end="7:35">c15_cpar</name></name> <operator pos:start="7:37" pos:end="7:37">^</operator> <literal type="number" pos:start="7:39" pos:end="7:44">0x3fff</literal><operator pos:start="7:45" pos:end="7:45">)</operator> <operator pos:start="7:47" pos:end="7:47">&amp;</operator> <operator pos:start="7:49" pos:end="7:49">(</operator><literal type="number" pos:start="7:50" pos:end="7:50">1</literal> <operator pos:start="7:52" pos:end="7:53">&lt;&lt;</operator> <name pos:start="7:55" pos:end="7:59">cpnum</name><operator pos:start="7:60" pos:end="7:60">)</operator><operator pos:start="7:61" pos:end="7:61">)</operator></expr>)</condition><block type="pseudo" pos:start="8:9" pos:end="8:17"><block_content pos:start="8:9" pos:end="8:17">
	<return pos:start="8:9" pos:end="8:17">return <expr pos:start="8:16" pos:end="8:16"><literal type="number" pos:start="8:16" pos:end="8:16">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="9:5" pos:end="9:72">/* First check for coprocessor space used for actual instructions */</comment>
    <switch pos:start="10:5" pos:end="126:69">switch <condition pos:start="10:12" pos:end="10:18">(<expr pos:start="10:13" pos:end="10:17"><name pos:start="10:13" pos:end="10:17">cpnum</name></expr>)</condition> <block pos:start="10:20" pos:end="126:69">{<block_content pos:start="11:7" pos:end="126:69">
      <case pos:start="11:7" pos:end="11:13">case <expr pos:start="11:12" pos:end="11:12"><literal type="number" pos:start="11:12" pos:end="11:12">0</literal></expr>:</case>
      <case pos:start="12:7" pos:end="12:13">case <expr pos:start="12:12" pos:end="12:12"><literal type="number" pos:start="12:12" pos:end="12:12">1</literal></expr>:</case>
	<if_stmt pos:start="13:9" pos:end="126:69"><if pos:start="13:9" pos:end="15:9">if <condition pos:start="13:12" pos:end="13:49">(<expr pos:start="13:13" pos:end="13:48"><call pos:start="13:13" pos:end="13:48"><name pos:start="13:13" pos:end="13:23">arm_feature</name><argument_list pos:start="13:24" pos:end="13:48">(<argument pos:start="13:25" pos:end="13:27"><expr pos:start="13:25" pos:end="13:27"><name pos:start="13:25" pos:end="13:27">env</name></expr></argument>, <argument pos:start="13:30" pos:end="13:47"><expr pos:start="13:30" pos:end="13:47"><name pos:start="13:30" pos:end="13:47">ARM_FEATURE_IWMMXT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:51" pos:end="15:9">{<block_content pos:start="14:13" pos:end="14:51">
	    <return pos:start="14:13" pos:end="14:51">return <expr pos:start="14:20" pos:end="14:50"><call pos:start="14:20" pos:end="14:50"><name pos:start="14:20" pos:end="14:36">disas_iwmmxt_insn</name><argument_list pos:start="14:37" pos:end="14:50">(<argument pos:start="14:38" pos:end="14:40"><expr pos:start="14:38" pos:end="14:40"><name pos:start="14:38" pos:end="14:40">env</name></expr></argument>, <argument pos:start="14:43" pos:end="14:43"><expr pos:start="14:43" pos:end="14:43"><name pos:start="14:43" pos:end="14:43">s</name></expr></argument>, <argument pos:start="14:46" pos:end="14:49"><expr pos:start="14:46" pos:end="14:49"><name pos:start="14:46" pos:end="14:49">insn</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if> <if type="elseif" pos:start="15:11" pos:end="126:69">else if <condition pos:start="15:19" pos:end="15:56">(<expr pos:start="15:20" pos:end="15:55"><call pos:start="15:20" pos:end="15:55"><name pos:start="15:20" pos:end="15:30">arm_feature</name><argument_list pos:start="15:31" pos:end="15:55">(<argument pos:start="15:32" pos:end="15:34"><expr pos:start="15:32" pos:end="15:34"><name pos:start="15:32" pos:end="15:34">env</name></expr></argument>, <argument pos:start="15:37" pos:end="15:54"><expr pos:start="15:37" pos:end="15:54"><name pos:start="15:37" pos:end="15:54">ARM_FEATURE_XSCALE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:58" pos:end="126:69">{<block_content pos:start="16:13" pos:end="126:69">
	    <return pos:start="16:13" pos:end="16:48">return <expr pos:start="16:20" pos:end="16:47"><call pos:start="16:20" pos:end="16:47"><name pos:start="16:20" pos:end="16:33">disas_dsp_insn</name><argument_list pos:start="16:34" pos:end="16:47">(<argument pos:start="16:35" pos:end="16:37"><expr pos:start="16:35" pos:end="16:37"><name pos:start="16:35" pos:end="16:37">env</name></expr></argument>, <argument pos:start="16:40" pos:end="16:40"><expr pos:start="16:40" pos:end="16:40"><name pos:start="16:40" pos:end="16:40">s</name></expr></argument>, <argument pos:start="16:43" pos:end="16:46"><expr pos:start="16:43" pos:end="16:46"><name pos:start="16:43" pos:end="16:46">insn</name></expr></argument>)</argument_list></call></expr>;</return>
	<return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">1</literal></expr>;</return>
    <default pos:start="18:5" pos:end="18:12">default:</default>
        <break pos:start="19:9" pos:end="19:14">break;</break>
    <comment type="block" pos:start="20:5" pos:end="20:54">/* Otherwise treat as a generic register access */</comment>
    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:8">is64</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:16">insn</name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <operator pos:start="21:20" pos:end="21:20">(</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal> <operator pos:start="21:23" pos:end="21:24">&lt;&lt;</operator> <literal type="number" pos:start="21:26" pos:end="21:27">25</literal><operator pos:start="21:28" pos:end="21:28">)</operator><operator pos:start="21:29" pos:end="21:29">)</operator> <operator pos:start="21:31" pos:end="21:32">==</operator> <literal type="number" pos:start="21:34" pos:end="21:34">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="126:69"><if pos:start="22:5" pos:end="126:69">if <condition pos:start="22:8" pos:end="22:42">(<expr pos:start="22:9" pos:end="22:41"><operator pos:start="22:9" pos:end="22:9">!</operator><name pos:start="22:10" pos:end="22:13">is64</name> <operator pos:start="22:15" pos:end="22:16">&amp;&amp;</operator> <operator pos:start="22:18" pos:end="22:18">(</operator><operator pos:start="22:19" pos:end="22:19">(</operator><name pos:start="22:20" pos:end="22:23">insn</name> <operator pos:start="22:25" pos:end="22:25">&amp;</operator> <operator pos:start="22:27" pos:end="22:27">(</operator><literal type="number" pos:start="22:28" pos:end="22:28">1</literal> <operator pos:start="22:30" pos:end="22:31">&lt;&lt;</operator> <literal type="number" pos:start="22:33" pos:end="22:33">4</literal><operator pos:start="22:34" pos:end="22:34">)</operator><operator pos:start="22:35" pos:end="22:35">)</operator> <operator pos:start="22:37" pos:end="22:38">==</operator> <literal type="number" pos:start="22:40" pos:end="22:40">0</literal><operator pos:start="22:41" pos:end="22:41">)</operator></expr>)</condition> <block pos:start="22:44" pos:end="126:69">{<block_content pos:start="24:9" pos:end="126:69">
        <comment type="block" pos:start="23:9" pos:end="23:17">/* cdp */</comment>
        <return pos:start="24:9" pos:end="24:17">return <expr pos:start="24:16" pos:end="24:16"><literal type="number" pos:start="24:16" pos:end="24:16">1</literal></expr>;</return>
    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:7">crm</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:14">insn</name> <operator pos:start="25:16" pos:end="25:16">&amp;</operator> <literal type="number" pos:start="25:18" pos:end="25:20">0xf</literal></expr>;</expr_stmt>
    <if_stmt pos:start="26:5" pos:end="126:69"><if pos:start="26:5" pos:end="31:5">if <condition pos:start="26:8" pos:end="26:13">(<expr pos:start="26:9" pos:end="26:12"><name pos:start="26:9" pos:end="26:12">is64</name></expr>)</condition> <block pos:start="26:15" pos:end="31:5">{<block_content pos:start="27:9" pos:end="30:33">
        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">crn</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:33"><expr pos:start="28:9" pos:end="28:32"><name pos:start="28:9" pos:end="28:12">opc1</name> <operator pos:start="28:14" pos:end="28:14">=</operator> <operator pos:start="28:16" pos:end="28:16">(</operator><name pos:start="28:17" pos:end="28:20">insn</name> <operator pos:start="28:22" pos:end="28:23">&gt;&gt;</operator> <literal type="number" pos:start="28:25" pos:end="28:25">4</literal><operator pos:start="28:26" pos:end="28:26">)</operator> <operator pos:start="28:28" pos:end="28:28">&amp;</operator> <literal type="number" pos:start="28:30" pos:end="28:32">0xf</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:17"><expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:12">opc2</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:33"><expr pos:start="30:9" pos:end="30:32"><name pos:start="30:9" pos:end="30:11">rt2</name> <operator pos:start="30:13" pos:end="30:13">=</operator> <operator pos:start="30:15" pos:end="30:15">(</operator><name pos:start="30:16" pos:end="30:19">insn</name> <operator pos:start="30:21" pos:end="30:22">&gt;&gt;</operator> <literal type="number" pos:start="30:24" pos:end="30:25">16</literal><operator pos:start="30:26" pos:end="30:26">)</operator> <operator pos:start="30:28" pos:end="30:28">&amp;</operator> <literal type="number" pos:start="30:30" pos:end="30:32">0xf</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="31:7" pos:end="126:69">else <block pos:start="31:12" pos:end="126:69">{<block_content pos:start="32:9" pos:end="126:69">
        <expr_stmt pos:start="32:9" pos:end="32:33"><expr pos:start="32:9" pos:end="32:32"><name pos:start="32:9" pos:end="32:11">crn</name> <operator pos:start="32:13" pos:end="32:13">=</operator> <operator pos:start="32:15" pos:end="32:15">(</operator><name pos:start="32:16" pos:end="32:19">insn</name> <operator pos:start="32:21" pos:end="32:22">&gt;&gt;</operator> <literal type="number" pos:start="32:24" pos:end="32:25">16</literal><operator pos:start="32:26" pos:end="32:26">)</operator> <operator pos:start="32:28" pos:end="32:28">&amp;</operator> <literal type="number" pos:start="32:30" pos:end="32:32">0xf</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:12">opc1</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <operator pos:start="33:16" pos:end="33:16">(</operator><name pos:start="33:17" pos:end="33:20">insn</name> <operator pos:start="33:22" pos:end="33:23">&gt;&gt;</operator> <literal type="number" pos:start="33:25" pos:end="33:26">21</literal><operator pos:start="33:27" pos:end="33:27">)</operator> <operator pos:start="33:29" pos:end="33:29">&amp;</operator> <literal type="number" pos:start="33:31" pos:end="33:31">7</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:31"><expr pos:start="34:9" pos:end="34:30"><name pos:start="34:9" pos:end="34:12">opc2</name> <operator pos:start="34:14" pos:end="34:14">=</operator> <operator pos:start="34:16" pos:end="34:16">(</operator><name pos:start="34:17" pos:end="34:20">insn</name> <operator pos:start="34:22" pos:end="34:23">&gt;&gt;</operator> <literal type="number" pos:start="34:25" pos:end="34:25">5</literal><operator pos:start="34:26" pos:end="34:26">)</operator> <operator pos:start="34:28" pos:end="34:28">&amp;</operator> <literal type="number" pos:start="34:30" pos:end="34:30">7</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">rt2</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:30"><expr pos:start="36:5" pos:end="36:29"><name pos:start="36:5" pos:end="36:10">isread</name> <operator pos:start="36:12" pos:end="36:12">=</operator> <operator pos:start="36:14" pos:end="36:14">(</operator><name pos:start="36:15" pos:end="36:18">insn</name> <operator pos:start="36:20" pos:end="36:21">&gt;&gt;</operator> <literal type="number" pos:start="36:23" pos:end="36:24">20</literal><operator pos:start="36:25" pos:end="36:25">)</operator> <operator pos:start="36:27" pos:end="36:27">&amp;</operator> <literal type="number" pos:start="36:29" pos:end="36:29">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:28"><expr pos:start="37:5" pos:end="37:27"><name pos:start="37:5" pos:end="37:6">rt</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:14">insn</name> <operator pos:start="37:16" pos:end="37:17">&gt;&gt;</operator> <literal type="number" pos:start="37:19" pos:end="37:20">12</literal><operator pos:start="37:21" pos:end="37:21">)</operator> <operator pos:start="37:23" pos:end="37:23">&amp;</operator> <literal type="number" pos:start="37:25" pos:end="37:27">0xf</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="39:78"><expr pos:start="38:5" pos:end="39:77"><name pos:start="38:5" pos:end="38:6">ri</name> <operator pos:start="38:8" pos:end="38:8">=</operator> <call pos:start="38:10" pos:end="39:77"><name pos:start="38:10" pos:end="38:27">get_arm_cp_reginfo</name><argument_list pos:start="38:28" pos:end="39:77">(<argument pos:start="38:29" pos:end="38:38"><expr pos:start="38:29" pos:end="38:38"><name pos:start="38:29" pos:end="38:38"><name pos:start="38:29" pos:end="38:29">s</name><operator pos:start="38:30" pos:end="38:31">-&gt;</operator><name pos:start="38:32" pos:end="38:38">cp_regs</name></name></expr></argument>,
                            <argument pos:start="39:29" pos:end="39:76"><expr pos:start="39:29" pos:end="39:76"><call pos:start="39:29" pos:end="39:76"><name pos:start="39:29" pos:end="39:41">ENCODE_CP_REG</name><argument_list pos:start="39:42" pos:end="39:76">(<argument pos:start="39:43" pos:end="39:47"><expr pos:start="39:43" pos:end="39:47"><name pos:start="39:43" pos:end="39:47">cpnum</name></expr></argument>, <argument pos:start="39:50" pos:end="39:53"><expr pos:start="39:50" pos:end="39:53"><name pos:start="39:50" pos:end="39:53">is64</name></expr></argument>, <argument pos:start="39:56" pos:end="39:58"><expr pos:start="39:56" pos:end="39:58"><name pos:start="39:56" pos:end="39:58">crn</name></expr></argument>, <argument pos:start="39:61" pos:end="39:63"><expr pos:start="39:61" pos:end="39:63"><name pos:start="39:61" pos:end="39:63">crm</name></expr></argument>, <argument pos:start="39:66" pos:end="39:69"><expr pos:start="39:66" pos:end="39:69"><name pos:start="39:66" pos:end="39:69">opc1</name></expr></argument>, <argument pos:start="39:72" pos:end="39:75"><expr pos:start="39:72" pos:end="39:75"><name pos:start="39:72" pos:end="39:75">opc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="40:5" pos:end="126:69"><if pos:start="40:5" pos:end="126:69">if <condition pos:start="40:8" pos:end="40:11">(<expr pos:start="40:9" pos:end="40:10"><name pos:start="40:9" pos:end="40:10">ri</name></expr>)</condition> <block pos:start="40:13" pos:end="126:69">{<block_content pos:start="42:9" pos:end="126:69">
        <comment type="block" pos:start="41:9" pos:end="41:38">/* Check access permissions */</comment>
        <if_stmt pos:start="42:9" pos:end="126:69"><if pos:start="42:9" pos:end="126:69">if <condition pos:start="42:12" pos:end="42:53">(<expr pos:start="42:13" pos:end="42:52"><operator pos:start="42:13" pos:end="42:13">!</operator><call pos:start="42:14" pos:end="42:52"><name pos:start="42:14" pos:end="42:25">cp_access_ok</name><argument_list pos:start="42:26" pos:end="42:52">(<argument pos:start="42:27" pos:end="42:39"><expr pos:start="42:27" pos:end="42:39"><name pos:start="42:27" pos:end="42:39"><name pos:start="42:27" pos:end="42:27">s</name><operator pos:start="42:28" pos:end="42:29">-&gt;</operator><name pos:start="42:30" pos:end="42:39">current_pl</name></name></expr></argument>, <argument pos:start="42:42" pos:end="42:43"><expr pos:start="42:42" pos:end="42:43"><name pos:start="42:42" pos:end="42:43">ri</name></expr></argument>, <argument pos:start="42:46" pos:end="42:51"><expr pos:start="42:46" pos:end="42:51"><name pos:start="42:46" pos:end="42:51">isread</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="42:55" pos:end="126:69">{<block_content pos:start="43:13" pos:end="126:69">
            <return pos:start="43:13" pos:end="43:21">return <expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">1</literal></expr>;</return>
        <comment type="block" pos:start="44:9" pos:end="44:40">/* Handle special cases first */</comment>
        <switch pos:start="45:9" pos:end="126:69">switch <condition pos:start="45:16" pos:end="45:65">(<expr pos:start="45:17" pos:end="45:64"><name pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:18">ri</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:24">type</name></name> <operator pos:start="45:26" pos:end="45:26">&amp;</operator> <operator pos:start="45:28" pos:end="45:28">~</operator><operator pos:start="45:29" pos:end="45:29">(</operator><name pos:start="45:30" pos:end="45:45">ARM_CP_FLAG_MASK</name> <operator pos:start="45:47" pos:end="45:47">&amp;</operator> <operator pos:start="45:49" pos:end="45:49">~</operator><name pos:start="45:50" pos:end="45:63">ARM_CP_SPECIAL</name><operator pos:start="45:64" pos:end="45:64">)</operator></expr>)</condition> <block pos:start="45:67" pos:end="126:69">{<block_content pos:start="46:9" pos:end="126:69">
        <case pos:start="46:9" pos:end="46:24">case <expr pos:start="46:14" pos:end="46:23"><name pos:start="46:14" pos:end="46:23">ARM_CP_NOP</name></expr>:</case>
            <return pos:start="47:13" pos:end="47:21">return <expr pos:start="47:20" pos:end="47:20"><literal type="number" pos:start="47:20" pos:end="47:20">0</literal></expr>;</return>
        <case pos:start="48:9" pos:end="48:24">case <expr pos:start="48:14" pos:end="48:23"><name pos:start="48:14" pos:end="48:23">ARM_CP_WFI</name></expr>:</case>
            <if_stmt pos:start="49:13" pos:end="126:69"><if pos:start="49:13" pos:end="126:69">if <condition pos:start="49:16" pos:end="49:23">(<expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">isread</name></expr>)</condition> <block pos:start="49:25" pos:end="126:69">{<block_content pos:start="50:17" pos:end="126:69">
                <return pos:start="50:17" pos:end="50:25">return <expr pos:start="50:24" pos:end="50:24"><literal type="number" pos:start="50:24" pos:end="50:24">1</literal></expr>;</return>
            <expr_stmt pos:start="51:13" pos:end="51:34"><expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">is_jmp</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:33">DISAS_WFI</name></expr>;</expr_stmt>
            <return pos:start="52:13" pos:end="52:21">return <expr pos:start="52:20" pos:end="52:20"><literal type="number" pos:start="52:20" pos:end="52:20">0</literal></expr>;</return>
        <default pos:start="53:9" pos:end="53:16">default:</default>
            <break pos:start="54:13" pos:end="54:18">break;</break>
        <if_stmt pos:start="55:9" pos:end="126:69"><if pos:start="55:9" pos:end="126:69">if <condition pos:start="55:12" pos:end="55:49">(<expr pos:start="55:13" pos:end="55:48"><name pos:start="55:13" pos:end="55:22">use_icount</name> <operator pos:start="55:24" pos:end="55:25">&amp;&amp;</operator> <operator pos:start="55:27" pos:end="55:27">(</operator><name pos:start="55:28" pos:end="55:35"><name pos:start="55:28" pos:end="55:29">ri</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:35">type</name></name> <operator pos:start="55:37" pos:end="55:37">&amp;</operator> <name pos:start="55:39" pos:end="55:47">ARM_CP_IO</name><operator pos:start="55:48" pos:end="55:48">)</operator></expr>)</condition> <block pos:start="55:51" pos:end="126:69">{<block_content pos:start="56:13" pos:end="126:69">
            <expr_stmt pos:start="56:13" pos:end="56:27"><expr pos:start="56:13" pos:end="56:26"><call pos:start="56:13" pos:end="56:26"><name pos:start="56:13" pos:end="56:24">gen_io_start</name><argument_list pos:start="56:25" pos:end="56:26">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="57:9" pos:end="126:69"><if pos:start="57:9" pos:end="126:69">if <condition pos:start="57:12" pos:end="57:19">(<expr pos:start="57:13" pos:end="57:18"><name pos:start="57:13" pos:end="57:18">isread</name></expr>)</condition> <block pos:start="57:21" pos:end="126:69">{<block_content pos:start="59:13" pos:end="126:69">
            <comment type="block" pos:start="58:13" pos:end="58:22">/* Read */</comment>
            <if_stmt pos:start="59:13" pos:end="126:69"><if pos:start="59:13" pos:end="126:69">if <condition pos:start="59:16" pos:end="59:21">(<expr pos:start="59:17" pos:end="59:20"><name pos:start="59:17" pos:end="59:20">is64</name></expr>)</condition> <block pos:start="59:23" pos:end="126:69">{<block_content pos:start="60:17" pos:end="126:69">
                <decl_stmt pos:start="60:17" pos:end="60:31"><decl pos:start="60:17" pos:end="60:30"><type pos:start="60:17" pos:end="60:24"><name pos:start="60:17" pos:end="60:24">TCGv_i64</name></type> <name pos:start="60:26" pos:end="60:30">tmp64</name></decl>;</decl_stmt>
                <decl_stmt pos:start="61:17" pos:end="61:29"><decl pos:start="61:17" pos:end="61:28"><type pos:start="61:17" pos:end="61:24"><name pos:start="61:17" pos:end="61:24">TCGv_i32</name></type> <name pos:start="61:26" pos:end="61:28">tmp</name></decl>;</decl_stmt>
                <if_stmt pos:start="62:17" pos:end="78:13"><if pos:start="62:17" pos:end="64:17">if <condition pos:start="62:20" pos:end="62:44">(<expr pos:start="62:21" pos:end="62:43"><name pos:start="62:21" pos:end="62:28"><name pos:start="62:21" pos:end="62:22">ri</name><operator pos:start="62:23" pos:end="62:24">-&gt;</operator><name pos:start="62:25" pos:end="62:28">type</name></name> <operator pos:start="62:30" pos:end="62:30">&amp;</operator> <name pos:start="62:32" pos:end="62:43">ARM_CP_CONST</name></expr>)</condition> <block pos:start="62:46" pos:end="64:17">{<block_content pos:start="63:21" pos:end="63:58">
                    <expr_stmt pos:start="63:21" pos:end="63:58"><expr pos:start="63:21" pos:end="63:57"><name pos:start="63:21" pos:end="63:25">tmp64</name> <operator pos:start="63:27" pos:end="63:27">=</operator> <call pos:start="63:29" pos:end="63:57"><name pos:start="63:29" pos:end="63:41">tcg_const_i64</name><argument_list pos:start="63:42" pos:end="63:57">(<argument pos:start="63:43" pos:end="63:56"><expr pos:start="63:43" pos:end="63:56"><name pos:start="63:43" pos:end="63:56"><name pos:start="63:43" pos:end="63:44">ri</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:56">resetvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="64:19" pos:end="67:17">else if <condition pos:start="64:27" pos:end="64:38">(<expr pos:start="64:28" pos:end="64:37"><name pos:start="64:28" pos:end="64:37"><name pos:start="64:28" pos:end="64:29">ri</name><operator pos:start="64:30" pos:end="64:31">-&gt;</operator><name pos:start="64:32" pos:end="64:37">readfn</name></name></expr>)</condition> <block pos:start="64:40" pos:end="67:17">{<block_content pos:start="65:21" pos:end="66:68">
                    <expr_stmt pos:start="65:21" pos:end="65:47"><expr pos:start="65:21" pos:end="65:46"><name pos:start="65:21" pos:end="65:25">tmp64</name> <operator pos:start="65:27" pos:end="65:27">=</operator> <call pos:start="65:29" pos:end="65:46"><name pos:start="65:29" pos:end="65:44">tcg_temp_new_i64</name><argument_list pos:start="65:45" pos:end="65:46">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="66:21" pos:end="66:68"><expr pos:start="66:21" pos:end="66:67"><call pos:start="66:21" pos:end="66:67"><name pos:start="66:21" pos:end="66:43">gen_helper_get_cp_reg64</name><argument_list pos:start="66:44" pos:end="66:67">(<argument pos:start="66:45" pos:end="66:49"><expr pos:start="66:45" pos:end="66:49"><name pos:start="66:45" pos:end="66:49">tmp64</name></expr></argument>, <argument pos:start="66:52" pos:end="66:58"><expr pos:start="66:52" pos:end="66:58"><name pos:start="66:52" pos:end="66:58">cpu_env</name></expr></argument>, <argument pos:start="66:61" pos:end="66:66"><expr pos:start="66:61" pos:end="66:66"><name pos:start="66:61" pos:end="66:66">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="67:19" pos:end="78:13">else <block pos:start="67:24" pos:end="78:13">{<block_content pos:start="68:21" pos:end="77:39">
                    <expr_stmt pos:start="68:21" pos:end="68:47"><expr pos:start="68:21" pos:end="68:46"><name pos:start="68:21" pos:end="68:25">tmp64</name> <operator pos:start="68:27" pos:end="68:27">=</operator> <call pos:start="68:29" pos:end="68:46"><name pos:start="68:29" pos:end="68:44">tcg_temp_new_i64</name><argument_list pos:start="68:45" pos:end="68:46">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="69:21" pos:end="69:68"><expr pos:start="69:21" pos:end="69:67"><call pos:start="69:21" pos:end="69:67"><name pos:start="69:21" pos:end="69:34">tcg_gen_ld_i64</name><argument_list pos:start="69:35" pos:end="69:67">(<argument pos:start="69:36" pos:end="69:40"><expr pos:start="69:36" pos:end="69:40"><name pos:start="69:36" pos:end="69:40">tmp64</name></expr></argument>, <argument pos:start="69:43" pos:end="69:49"><expr pos:start="69:43" pos:end="69:49"><name pos:start="69:43" pos:end="69:49">cpu_env</name></expr></argument>, <argument pos:start="69:52" pos:end="69:66"><expr pos:start="69:52" pos:end="69:66"><name pos:start="69:52" pos:end="69:66"><name pos:start="69:52" pos:end="69:53">ri</name><operator pos:start="69:54" pos:end="69:55">-&gt;</operator><name pos:start="69:56" pos:end="69:66">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="70:17" pos:end="70:41"><expr pos:start="70:17" pos:end="70:40"><name pos:start="70:17" pos:end="70:19">tmp</name> <operator pos:start="70:21" pos:end="70:21">=</operator> <call pos:start="70:23" pos:end="70:40"><name pos:start="70:23" pos:end="70:38">tcg_temp_new_i32</name><argument_list pos:start="70:39" pos:end="70:40">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="71:17" pos:end="71:50"><expr pos:start="71:17" pos:end="71:49"><call pos:start="71:17" pos:end="71:49"><name pos:start="71:17" pos:end="71:37">tcg_gen_trunc_i64_i32</name><argument_list pos:start="71:38" pos:end="71:49">(<argument pos:start="71:39" pos:end="71:41"><expr pos:start="71:39" pos:end="71:41"><name pos:start="71:39" pos:end="71:41">tmp</name></expr></argument>, <argument pos:start="71:44" pos:end="71:48"><expr pos:start="71:44" pos:end="71:48"><name pos:start="71:44" pos:end="71:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="72:17" pos:end="72:38"><expr pos:start="72:17" pos:end="72:37"><call pos:start="72:17" pos:end="72:37"><name pos:start="72:17" pos:end="72:25">store_reg</name><argument_list pos:start="72:26" pos:end="72:37">(<argument pos:start="72:27" pos:end="72:27"><expr pos:start="72:27" pos:end="72:27"><name pos:start="72:27" pos:end="72:27">s</name></expr></argument>, <argument pos:start="72:30" pos:end="72:31"><expr pos:start="72:30" pos:end="72:31"><name pos:start="72:30" pos:end="72:31">rt</name></expr></argument>, <argument pos:start="72:34" pos:end="72:36"><expr pos:start="72:34" pos:end="72:36"><name pos:start="72:34" pos:end="72:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="73:17" pos:end="73:51"><expr pos:start="73:17" pos:end="73:50"><call pos:start="73:17" pos:end="73:50"><name pos:start="73:17" pos:end="73:32">tcg_gen_shri_i64</name><argument_list pos:start="73:33" pos:end="73:50">(<argument pos:start="73:34" pos:end="73:38"><expr pos:start="73:34" pos:end="73:38"><name pos:start="73:34" pos:end="73:38">tmp64</name></expr></argument>, <argument pos:start="73:41" pos:end="73:45"><expr pos:start="73:41" pos:end="73:45"><name pos:start="73:41" pos:end="73:45">tmp64</name></expr></argument>, <argument pos:start="73:48" pos:end="73:49"><expr pos:start="73:48" pos:end="73:49"><literal type="number" pos:start="73:48" pos:end="73:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="74:17" pos:end="74:41"><expr pos:start="74:17" pos:end="74:40"><name pos:start="74:17" pos:end="74:19">tmp</name> <operator pos:start="74:21" pos:end="74:21">=</operator> <call pos:start="74:23" pos:end="74:40"><name pos:start="74:23" pos:end="74:38">tcg_temp_new_i32</name><argument_list pos:start="74:39" pos:end="74:40">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="75:17" pos:end="75:50"><expr pos:start="75:17" pos:end="75:49"><call pos:start="75:17" pos:end="75:49"><name pos:start="75:17" pos:end="75:37">tcg_gen_trunc_i64_i32</name><argument_list pos:start="75:38" pos:end="75:49">(<argument pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><name pos:start="75:39" pos:end="75:41">tmp</name></expr></argument>, <argument pos:start="75:44" pos:end="75:48"><expr pos:start="75:44" pos:end="75:48"><name pos:start="75:44" pos:end="75:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="76:17" pos:end="76:41"><expr pos:start="76:17" pos:end="76:40"><call pos:start="76:17" pos:end="76:40"><name pos:start="76:17" pos:end="76:33">tcg_temp_free_i64</name><argument_list pos:start="76:34" pos:end="76:40">(<argument pos:start="76:35" pos:end="76:39"><expr pos:start="76:35" pos:end="76:39"><name pos:start="76:35" pos:end="76:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="77:17" pos:end="77:39"><expr pos:start="77:17" pos:end="77:38"><call pos:start="77:17" pos:end="77:38"><name pos:start="77:17" pos:end="77:25">store_reg</name><argument_list pos:start="77:26" pos:end="77:38">(<argument pos:start="77:27" pos:end="77:27"><expr pos:start="77:27" pos:end="77:27"><name pos:start="77:27" pos:end="77:27">s</name></expr></argument>, <argument pos:start="77:30" pos:end="77:32"><expr pos:start="77:30" pos:end="77:32"><name pos:start="77:30" pos:end="77:32">rt2</name></expr></argument>, <argument pos:start="77:35" pos:end="77:37"><expr pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="78:15" pos:end="126:69"><else pos:start="78:15" pos:end="126:69">else <block pos:start="78:20" pos:end="126:69">{<block_content pos:start="79:17" pos:end="126:69">
                <decl_stmt pos:start="79:17" pos:end="79:29"><decl pos:start="79:17" pos:end="79:28"><type pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:24">TCGv_i32</name></type> <name pos:start="79:26" pos:end="79:28">tmp</name></decl>;</decl_stmt>
                <if_stmt pos:start="80:17" pos:end="126:69"><if pos:start="80:17" pos:end="82:17">if <condition pos:start="80:20" pos:end="80:44">(<expr pos:start="80:21" pos:end="80:43"><name pos:start="80:21" pos:end="80:28"><name pos:start="80:21" pos:end="80:22">ri</name><operator pos:start="80:23" pos:end="80:24">-&gt;</operator><name pos:start="80:25" pos:end="80:28">type</name></name> <operator pos:start="80:30" pos:end="80:30">&amp;</operator> <name pos:start="80:32" pos:end="80:43">ARM_CP_CONST</name></expr>)</condition> <block pos:start="80:46" pos:end="82:17">{<block_content pos:start="81:21" pos:end="81:56">
                    <expr_stmt pos:start="81:21" pos:end="81:56"><expr pos:start="81:21" pos:end="81:55"><name pos:start="81:21" pos:end="81:23">tmp</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <call pos:start="81:27" pos:end="81:55"><name pos:start="81:27" pos:end="81:39">tcg_const_i32</name><argument_list pos:start="81:40" pos:end="81:55">(<argument pos:start="81:41" pos:end="81:54"><expr pos:start="81:41" pos:end="81:54"><name pos:start="81:41" pos:end="81:54"><name pos:start="81:41" pos:end="81:42">ri</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:54">resetvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="82:19" pos:end="85:17">else if <condition pos:start="82:27" pos:end="82:38">(<expr pos:start="82:28" pos:end="82:37"><name pos:start="82:28" pos:end="82:37"><name pos:start="82:28" pos:end="82:29">ri</name><operator pos:start="82:30" pos:end="82:31">-&gt;</operator><name pos:start="82:32" pos:end="82:37">readfn</name></name></expr>)</condition> <block pos:start="82:40" pos:end="85:17">{<block_content pos:start="83:21" pos:end="84:64">
                    <expr_stmt pos:start="83:21" pos:end="83:45"><expr pos:start="83:21" pos:end="83:44"><name pos:start="83:21" pos:end="83:23">tmp</name> <operator pos:start="83:25" pos:end="83:25">=</operator> <call pos:start="83:27" pos:end="83:44"><name pos:start="83:27" pos:end="83:42">tcg_temp_new_i32</name><argument_list pos:start="83:43" pos:end="83:44">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="84:21" pos:end="84:64"><expr pos:start="84:21" pos:end="84:63"><call pos:start="84:21" pos:end="84:63"><name pos:start="84:21" pos:end="84:41">gen_helper_get_cp_reg</name><argument_list pos:start="84:42" pos:end="84:63">(<argument pos:start="84:43" pos:end="84:45"><expr pos:start="84:43" pos:end="84:45"><name pos:start="84:43" pos:end="84:45">tmp</name></expr></argument>, <argument pos:start="84:48" pos:end="84:54"><expr pos:start="84:48" pos:end="84:54"><name pos:start="84:48" pos:end="84:54">cpu_env</name></expr></argument>, <argument pos:start="84:57" pos:end="84:62"><expr pos:start="84:57" pos:end="84:62"><name pos:start="84:57" pos:end="84:62">tmpptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="85:19" pos:end="126:69">else <block pos:start="85:24" pos:end="126:69">{<block_content pos:start="86:21" pos:end="126:69">
                    <expr_stmt pos:start="86:21" pos:end="86:59"><expr pos:start="86:21" pos:end="86:58"><name pos:start="86:21" pos:end="86:23">tmp</name> <operator pos:start="86:25" pos:end="86:25">=</operator> <call pos:start="86:27" pos:end="86:58"><name pos:start="86:27" pos:end="86:41">load_cpu_offset</name><argument_list pos:start="86:42" pos:end="86:58">(<argument pos:start="86:43" pos:end="86:57"><expr pos:start="86:43" pos:end="86:57"><name pos:start="86:43" pos:end="86:57"><name pos:start="86:43" pos:end="86:44">ri</name><operator pos:start="86:45" pos:end="86:46">-&gt;</operator><name pos:start="86:47" pos:end="86:57">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="87:17" pos:end="126:69"><if pos:start="87:17" pos:end="126:69">if <condition pos:start="87:20" pos:end="87:29">(<expr pos:start="87:21" pos:end="87:28"><name pos:start="87:21" pos:end="87:22">rt</name> <operator pos:start="87:24" pos:end="87:25">==</operator> <literal type="number" pos:start="87:27" pos:end="87:28">15</literal></expr>)</condition> <block pos:start="87:31" pos:end="126:69">{<block_content pos:start="96:13" pos:end="126:69">
                    <comment type="block" pos:start="88:21" pos:end="95:23">/* Destination register of r15 for 32 bit loads sets
                     * the condition codes from the high 4 bits of the value
                    gen_set_nzcv(tmp);
                    tcg_temp_free_i32(tmp);
                } else {
                    store_reg(s, rt, tmp);
        } else {
            /* Write */</comment>
            <if_stmt pos:start="96:13" pos:end="126:69"><if pos:start="96:13" pos:end="126:69">if <condition pos:start="96:16" pos:end="96:40">(<expr pos:start="96:17" pos:end="96:39"><name pos:start="96:17" pos:end="96:24"><name pos:start="96:17" pos:end="96:18">ri</name><operator pos:start="96:19" pos:end="96:20">-&gt;</operator><name pos:start="96:21" pos:end="96:24">type</name></name> <operator pos:start="96:26" pos:end="96:26">&amp;</operator> <name pos:start="96:28" pos:end="96:39">ARM_CP_CONST</name></expr>)</condition> <block pos:start="96:42" pos:end="126:69">{<block_content pos:start="98:17" pos:end="126:69">
                <comment type="block" pos:start="97:17" pos:end="97:73">/* If not forbidden by access permissions, treat as WI */</comment>
                <return pos:start="98:17" pos:end="98:25">return <expr pos:start="98:24" pos:end="98:24"><literal type="number" pos:start="98:24" pos:end="98:24">0</literal></expr>;</return>
            <if_stmt pos:start="99:13" pos:end="126:69"><if pos:start="99:13" pos:end="126:69">if <condition pos:start="99:16" pos:end="99:21">(<expr pos:start="99:17" pos:end="99:20"><name pos:start="99:17" pos:end="99:20">is64</name></expr>)</condition> <block pos:start="99:23" pos:end="126:69">{<block_content pos:start="100:17" pos:end="126:69">
                <decl_stmt pos:start="100:17" pos:end="100:38"><decl pos:start="100:17" pos:end="100:30"><type pos:start="100:17" pos:end="100:24"><name pos:start="100:17" pos:end="100:24">TCGv_i32</name></type> <name pos:start="100:26" pos:end="100:30">tmplo</name></decl>, <decl pos:start="100:33" pos:end="100:37"><type ref="prev" pos:start="100:17" pos:end="100:24"/><name pos:start="100:33" pos:end="100:37">tmphi</name></decl>;</decl_stmt>
                <decl_stmt pos:start="101:17" pos:end="101:52"><decl pos:start="101:17" pos:end="101:51"><type pos:start="101:17" pos:end="101:24"><name pos:start="101:17" pos:end="101:24">TCGv_i64</name></type> <name pos:start="101:26" pos:end="101:30">tmp64</name> <init pos:start="101:32" pos:end="101:51">= <expr pos:start="101:34" pos:end="101:51"><call pos:start="101:34" pos:end="101:51"><name pos:start="101:34" pos:end="101:49">tcg_temp_new_i64</name><argument_list pos:start="101:50" pos:end="101:51">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt pos:start="102:17" pos:end="102:40"><expr pos:start="102:17" pos:end="102:39"><name pos:start="102:17" pos:end="102:21">tmplo</name> <operator pos:start="102:23" pos:end="102:23">=</operator> <call pos:start="102:25" pos:end="102:39"><name pos:start="102:25" pos:end="102:32">load_reg</name><argument_list pos:start="102:33" pos:end="102:39">(<argument pos:start="102:34" pos:end="102:34"><expr pos:start="102:34" pos:end="102:34"><name pos:start="102:34" pos:end="102:34">s</name></expr></argument>, <argument pos:start="102:37" pos:end="102:38"><expr pos:start="102:37" pos:end="102:38"><name pos:start="102:37" pos:end="102:38">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="103:17" pos:end="103:41"><expr pos:start="103:17" pos:end="103:40"><name pos:start="103:17" pos:end="103:21">tmphi</name> <operator pos:start="103:23" pos:end="103:23">=</operator> <call pos:start="103:25" pos:end="103:40"><name pos:start="103:25" pos:end="103:32">load_reg</name><argument_list pos:start="103:33" pos:end="103:40">(<argument pos:start="103:34" pos:end="103:34"><expr pos:start="103:34" pos:end="103:34"><name pos:start="103:34" pos:end="103:34">s</name></expr></argument>, <argument pos:start="103:37" pos:end="103:39"><expr pos:start="103:37" pos:end="103:39"><name pos:start="103:37" pos:end="103:39">rt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="104:17" pos:end="104:60"><expr pos:start="104:17" pos:end="104:59"><call pos:start="104:17" pos:end="104:59"><name pos:start="104:17" pos:end="104:38">tcg_gen_concat_i32_i64</name><argument_list pos:start="104:39" pos:end="104:59">(<argument pos:start="104:40" pos:end="104:44"><expr pos:start="104:40" pos:end="104:44"><name pos:start="104:40" pos:end="104:44">tmp64</name></expr></argument>, <argument pos:start="104:47" pos:end="104:51"><expr pos:start="104:47" pos:end="104:51"><name pos:start="104:47" pos:end="104:51">tmplo</name></expr></argument>, <argument pos:start="104:54" pos:end="104:58"><expr pos:start="104:54" pos:end="104:58"><name pos:start="104:54" pos:end="104:58">tmphi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="105:17" pos:end="105:41"><expr pos:start="105:17" pos:end="105:40"><call pos:start="105:17" pos:end="105:40"><name pos:start="105:17" pos:end="105:33">tcg_temp_free_i32</name><argument_list pos:start="105:34" pos:end="105:40">(<argument pos:start="105:35" pos:end="105:39"><expr pos:start="105:35" pos:end="105:39"><name pos:start="105:35" pos:end="105:39">tmplo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="106:17" pos:end="106:41"><expr pos:start="106:17" pos:end="106:40"><call pos:start="106:17" pos:end="106:40"><name pos:start="106:17" pos:end="106:33">tcg_temp_free_i32</name><argument_list pos:start="106:34" pos:end="106:40">(<argument pos:start="106:35" pos:end="106:39"><expr pos:start="106:35" pos:end="106:39"><name pos:start="106:35" pos:end="106:39">tmphi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="107:17" pos:end="113:13"><if pos:start="107:17" pos:end="110:17">if <condition pos:start="107:20" pos:end="107:32">(<expr pos:start="107:21" pos:end="107:31"><name pos:start="107:21" pos:end="107:31"><name pos:start="107:21" pos:end="107:22">ri</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:31">writefn</name></name></expr>)</condition> <block pos:start="107:34" pos:end="110:17">{<block_content pos:start="108:21" pos:end="109:68">
                    <decl_stmt pos:start="108:21" pos:end="108:56"><decl pos:start="108:21" pos:end="108:55"><type pos:start="108:21" pos:end="108:28"><name pos:start="108:21" pos:end="108:28">TCGv_ptr</name></type> <name pos:start="108:30" pos:end="108:35">tmpptr</name> <init pos:start="108:37" pos:end="108:55">= <expr pos:start="108:39" pos:end="108:55"><call pos:start="108:39" pos:end="108:55"><name pos:start="108:39" pos:end="108:51">tcg_const_ptr</name><argument_list pos:start="108:52" pos:end="108:55">(<argument pos:start="108:53" pos:end="108:54"><expr pos:start="108:53" pos:end="108:54"><name pos:start="108:53" pos:end="108:54">ri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="109:21" pos:end="109:68"><expr pos:start="109:21" pos:end="109:67"><call pos:start="109:21" pos:end="109:67"><name pos:start="109:21" pos:end="109:43">gen_helper_set_cp_reg64</name><argument_list pos:start="109:44" pos:end="109:67">(<argument pos:start="109:45" pos:end="109:51"><expr pos:start="109:45" pos:end="109:51"><name pos:start="109:45" pos:end="109:51">cpu_env</name></expr></argument>, <argument pos:start="109:54" pos:end="109:59"><expr pos:start="109:54" pos:end="109:59"><name pos:start="109:54" pos:end="109:59">tmpptr</name></expr></argument>, <argument pos:start="109:62" pos:end="109:66"><expr pos:start="109:62" pos:end="109:66"><name pos:start="109:62" pos:end="109:66">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="110:19" pos:end="113:13">else <block pos:start="110:24" pos:end="113:13">{<block_content pos:start="111:21" pos:end="112:41">
                    <expr_stmt pos:start="111:21" pos:end="111:68"><expr pos:start="111:21" pos:end="111:67"><call pos:start="111:21" pos:end="111:67"><name pos:start="111:21" pos:end="111:34">tcg_gen_st_i64</name><argument_list pos:start="111:35" pos:end="111:67">(<argument pos:start="111:36" pos:end="111:40"><expr pos:start="111:36" pos:end="111:40"><name pos:start="111:36" pos:end="111:40">tmp64</name></expr></argument>, <argument pos:start="111:43" pos:end="111:49"><expr pos:start="111:43" pos:end="111:49"><name pos:start="111:43" pos:end="111:49">cpu_env</name></expr></argument>, <argument pos:start="111:52" pos:end="111:66"><expr pos:start="111:52" pos:end="111:66"><name pos:start="111:52" pos:end="111:66"><name pos:start="111:52" pos:end="111:53">ri</name><operator pos:start="111:54" pos:end="111:55">-&gt;</operator><name pos:start="111:56" pos:end="111:66">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="112:17" pos:end="112:41"><expr pos:start="112:17" pos:end="112:40"><call pos:start="112:17" pos:end="112:40"><name pos:start="112:17" pos:end="112:33">tcg_temp_free_i64</name><argument_list pos:start="112:34" pos:end="112:40">(<argument pos:start="112:35" pos:end="112:39"><expr pos:start="112:35" pos:end="112:39"><name pos:start="112:35" pos:end="112:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="113:15" pos:end="126:69"><else pos:start="113:15" pos:end="126:69">else <block pos:start="113:20" pos:end="126:69">{<block_content pos:start="114:17" pos:end="126:69">
                <if_stmt pos:start="114:17" pos:end="126:69"><if pos:start="114:17" pos:end="119:17">if <condition pos:start="114:20" pos:end="114:32">(<expr pos:start="114:21" pos:end="114:31"><name pos:start="114:21" pos:end="114:31"><name pos:start="114:21" pos:end="114:22">ri</name><operator pos:start="114:23" pos:end="114:24">-&gt;</operator><name pos:start="114:25" pos:end="114:31">writefn</name></name></expr>)</condition> <block pos:start="114:34" pos:end="119:17">{<block_content pos:start="115:21" pos:end="118:43">
                    <decl_stmt pos:start="115:21" pos:end="115:33"><decl pos:start="115:21" pos:end="115:32"><type pos:start="115:21" pos:end="115:28"><name pos:start="115:21" pos:end="115:28">TCGv_i32</name></type> <name pos:start="115:30" pos:end="115:32">tmp</name></decl>;</decl_stmt>
                    <expr_stmt pos:start="116:21" pos:end="116:42"><expr pos:start="116:21" pos:end="116:41"><name pos:start="116:21" pos:end="116:23">tmp</name> <operator pos:start="116:25" pos:end="116:25">=</operator> <call pos:start="116:27" pos:end="116:41"><name pos:start="116:27" pos:end="116:34">load_reg</name><argument_list pos:start="116:35" pos:end="116:41">(<argument pos:start="116:36" pos:end="116:36"><expr pos:start="116:36" pos:end="116:36"><name pos:start="116:36" pos:end="116:36">s</name></expr></argument>, <argument pos:start="116:39" pos:end="116:40"><expr pos:start="116:39" pos:end="116:40"><name pos:start="116:39" pos:end="116:40">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="117:21" pos:end="117:64"><expr pos:start="117:21" pos:end="117:63"><call pos:start="117:21" pos:end="117:63"><name pos:start="117:21" pos:end="117:41">gen_helper_set_cp_reg</name><argument_list pos:start="117:42" pos:end="117:63">(<argument pos:start="117:43" pos:end="117:49"><expr pos:start="117:43" pos:end="117:49"><name pos:start="117:43" pos:end="117:49">cpu_env</name></expr></argument>, <argument pos:start="117:52" pos:end="117:57"><expr pos:start="117:52" pos:end="117:57"><name pos:start="117:52" pos:end="117:57">tmpptr</name></expr></argument>, <argument pos:start="117:60" pos:end="117:62"><expr pos:start="117:60" pos:end="117:62"><name pos:start="117:60" pos:end="117:62">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="118:21" pos:end="118:43"><expr pos:start="118:21" pos:end="118:42"><call pos:start="118:21" pos:end="118:42"><name pos:start="118:21" pos:end="118:37">tcg_temp_free_i32</name><argument_list pos:start="118:38" pos:end="118:42">(<argument pos:start="118:39" pos:end="118:41"><expr pos:start="118:39" pos:end="118:41"><name pos:start="118:39" pos:end="118:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="119:19" pos:end="126:69">else <block pos:start="119:24" pos:end="126:69">{<block_content pos:start="120:21" pos:end="126:69">
                    <decl_stmt pos:start="120:21" pos:end="120:51"><decl pos:start="120:21" pos:end="120:50"><type pos:start="120:21" pos:end="120:28"><name pos:start="120:21" pos:end="120:28">TCGv_i32</name></type> <name pos:start="120:30" pos:end="120:32">tmp</name> <init pos:start="120:34" pos:end="120:50">= <expr pos:start="120:36" pos:end="120:50"><call pos:start="120:36" pos:end="120:50"><name pos:start="120:36" pos:end="120:43">load_reg</name><argument_list pos:start="120:44" pos:end="120:50">(<argument pos:start="120:45" pos:end="120:45"><expr pos:start="120:45" pos:end="120:45"><name pos:start="120:45" pos:end="120:45">s</name></expr></argument>, <argument pos:start="120:48" pos:end="120:49"><expr pos:start="120:48" pos:end="120:49"><name pos:start="120:48" pos:end="120:49">rt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt pos:start="121:21" pos:end="121:59"><expr pos:start="121:21" pos:end="121:58"><call pos:start="121:21" pos:end="121:58"><name pos:start="121:21" pos:end="121:36">store_cpu_offset</name><argument_list pos:start="121:37" pos:end="121:58">(<argument pos:start="121:38" pos:end="121:40"><expr pos:start="121:38" pos:end="121:40"><name pos:start="121:38" pos:end="121:40">tmp</name></expr></argument>, <argument pos:start="121:43" pos:end="121:57"><expr pos:start="121:43" pos:end="121:57"><name pos:start="121:43" pos:end="121:57"><name pos:start="121:43" pos:end="121:44">ri</name><operator pos:start="121:45" pos:end="121:46">-&gt;</operator><name pos:start="121:47" pos:end="121:57">fieldoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="122:9" pos:end="126:69"><if pos:start="122:9" pos:end="126:9">if <condition pos:start="122:12" pos:end="122:49">(<expr pos:start="122:13" pos:end="122:48"><name pos:start="122:13" pos:end="122:22">use_icount</name> <operator pos:start="122:24" pos:end="122:25">&amp;&amp;</operator> <operator pos:start="122:27" pos:end="122:27">(</operator><name pos:start="122:28" pos:end="122:35"><name pos:start="122:28" pos:end="122:29">ri</name><operator pos:start="122:30" pos:end="122:31">-&gt;</operator><name pos:start="122:32" pos:end="122:35">type</name></name> <operator pos:start="122:37" pos:end="122:37">&amp;</operator> <name pos:start="122:39" pos:end="122:47">ARM_CP_IO</name><operator pos:start="122:48" pos:end="122:48">)</operator></expr>)</condition> <block pos:start="122:51" pos:end="126:9">{<block_content pos:start="124:13" pos:end="125:29">
            <comment type="block" pos:start="123:13" pos:end="123:77">/* I/O operations must end the TB here (whether read or write) */</comment>
            <expr_stmt pos:start="124:13" pos:end="124:25"><expr pos:start="124:13" pos:end="124:24"><call pos:start="124:13" pos:end="124:24"><name pos:start="124:13" pos:end="124:22">gen_io_end</name><argument_list pos:start="124:23" pos:end="124:24">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="125:13" pos:end="125:29"><expr pos:start="125:13" pos:end="125:28"><call pos:start="125:13" pos:end="125:28"><name pos:start="125:13" pos:end="125:25">gen_lookup_tb</name><argument_list pos:start="125:26" pos:end="125:28">(<argument pos:start="125:27" pos:end="125:27"><expr pos:start="125:27" pos:end="125:27"><name pos:start="125:27" pos:end="125:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="126:11" pos:end="126:69">else if <condition pos:start="126:19" pos:end="126:67">(<expr pos:start="126:20" pos:end="126:66"><operator pos:start="126:20" pos:end="126:20">!</operator><name pos:start="126:21" pos:end="126:26">isread</name> <operator pos:start="126:28" pos:end="126:29">&amp;&amp;</operator> <operator pos:start="126:31" pos:end="126:31">!</operator><operator pos:start="126:32" pos:end="126:32">(</operator><name pos:start="126:33" pos:end="126:40"><name pos:start="126:33" pos:end="126:34">ri</name><operator pos:start="126:35" pos:end="126:36">-&gt;</operator><name pos:start="126:37" pos:end="126:40">type</name></name> <operator pos:start="126:42" pos:end="126:42">&amp;</operator> <name pos:start="126:44" pos:end="126:65">ARM_CP_SUPPRESS_TB_END</name><operator pos:start="126:66" pos:end="126:66">)</operator></expr>)</condition> <block pos:start="126:69" pos:end="126:69">{<block_content/></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></function>
            <comment type="block">/* We default to ending the TB on a coprocessor register write,
             * but allow this to be suppressed by the register definition
             * (usually only necessary to work around guest bugs).
            gen_lookup_tb(s);
        return 0;
    /* Unknown register; this might be a guest error or a QEMU
     * unimplemented feature.
    if (is64) {
        qemu_log_mask(LOG_UNIMP, "%s access to unsupported AArch32 "
                      "64 bit system register cp:%d opc1: %d crm:%d\n",
                      isread ? "read" : "write", cpnum, opc1, crm);
    } else {
        qemu_log_mask(LOG_UNIMP, "%s access to unsupported AArch32 "
                      "system register cp:%d opc1:%d crn:%d crm:%d opc2:%d\n",
                      isread ? "read" : "write", cpnum, opc1, crn, crm, opc2);
    return 1;</comment></unit>
