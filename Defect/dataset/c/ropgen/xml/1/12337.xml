<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12337.c" pos:tabs="8"><function pos:start="1:1" pos:end="285:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">write_f</name><parameter_list pos:start="1:19" pos:end="1:60">(<parameter pos:start="1:20" pos:end="1:36"><decl pos:start="1:20" pos:end="1:36"><type pos:start="1:20" pos:end="1:36"><name pos:start="1:20" pos:end="1:31">BlockBackend</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">blk</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:46"><decl pos:start="1:39" pos:end="1:46"><type pos:start="1:39" pos:end="1:46"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:46">argc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="285:1">{<block_content pos:start="5:5" pos:end="283:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">timeval</name></name></type> <name pos:start="5:20" pos:end="5:21">t1</name></decl>, <decl pos:start="5:24" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:18"/><name pos:start="5:24" pos:end="5:25">t2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:14">Cflag</name> <init pos:start="7:16" pos:end="7:22">= <expr pos:start="7:18" pos:end="7:22"><name pos:start="7:18" pos:end="7:22">false</name></expr></init></decl>, <decl pos:start="7:25" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:25" pos:end="7:29">qflag</name> <init pos:start="7:31" pos:end="7:37">= <expr pos:start="7:33" pos:end="7:37"><name pos:start="7:33" pos:end="7:37">false</name></expr></init></decl>, <decl pos:start="7:40" pos:end="7:52"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:40" pos:end="7:44">bflag</name> <init pos:start="7:46" pos:end="7:52">= <expr pos:start="7:48" pos:end="7:52"><name pos:start="7:48" pos:end="7:52">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">Pflag</name> <init pos:start="9:16" pos:end="9:22">= <expr pos:start="9:18" pos:end="9:22"><name pos:start="9:18" pos:end="9:22">false</name></expr></init></decl>, <decl pos:start="9:25" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:25" pos:end="9:29">zflag</name> <init pos:start="9:31" pos:end="9:37">= <expr pos:start="9:33" pos:end="9:37"><name pos:start="9:33" pos:end="9:37">false</name></expr></init></decl>, <decl pos:start="9:40" pos:end="9:52"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:40" pos:end="9:44">cflag</name> <init pos:start="9:46" pos:end="9:52">= <expr pos:start="9:48" pos:end="9:52"><name pos:start="9:48" pos:end="9:52">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">flags</name> <init pos:start="11:15" pos:end="11:17">= <expr pos:start="11:17" pos:end="11:17"><literal type="number" pos:start="11:17" pos:end="11:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">c</name></decl>, <decl pos:start="13:12" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">cnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">buf</name> <init pos:start="15:15" pos:end="15:20">= <expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:17">count</name></decl>;</decl_stmt>

    <comment type="block" pos:start="21:5" pos:end="21:75">/* Some compilers get confused and warn if this is not initialized.  */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:17">total</name> <init pos:start="23:19" pos:end="23:21">= <expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:15">pattern</name> <init pos:start="25:17" pos:end="25:22">= <expr pos:start="25:19" pos:end="25:22"><literal type="number" pos:start="25:19" pos:end="25:22">0xcd</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="29:5" pos:end="101:5">while <condition pos:start="29:11" pos:end="29:56">(<expr pos:start="29:12" pos:end="29:55"><operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:13">c</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:48"><name pos:start="29:17" pos:end="29:22">getopt</name><argument_list pos:start="29:23" pos:end="29:48">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">argc</name></expr></argument>, <argument pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><name pos:start="29:30" pos:end="29:33">argv</name></expr></argument>, <argument pos:start="29:36" pos:end="29:47"><expr pos:start="29:36" pos:end="29:47"><literal type="string" pos:start="29:36" pos:end="29:47">"bcCfpP:quz"</literal></expr></argument>)</argument_list></call><operator pos:start="29:49" pos:end="29:49">)</operator> <operator pos:start="29:51" pos:end="29:52">!=</operator> <operator pos:start="29:54" pos:end="29:54">-</operator><literal type="number" pos:start="29:55" pos:end="29:55">1</literal></expr>)</condition> <block pos:start="29:58" pos:end="101:5">{<block_content pos:start="31:9" pos:end="99:9">

        <switch pos:start="31:9" pos:end="99:9">switch <condition pos:start="31:16" pos:end="31:18">(<expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">c</name></expr>)</condition> <block pos:start="31:20" pos:end="99:9">{<block_content pos:start="33:9" pos:end="97:52">

        <case pos:start="33:9" pos:end="33:17">case <expr pos:start="33:14" pos:end="33:16"><literal type="char" pos:start="33:14" pos:end="33:16">'b'</literal></expr>:</case>

            <expr_stmt pos:start="35:13" pos:end="35:25"><expr pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:17">bflag</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:24">true</name></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        <case pos:start="39:9" pos:end="39:17">case <expr pos:start="39:14" pos:end="39:16"><literal type="char" pos:start="39:14" pos:end="39:16">'c'</literal></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:25"><expr pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:17">cflag</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:24">true</name></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="47:13" pos:end="47:25"><expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:17">Cflag</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:24">true</name></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <case pos:start="51:9" pos:end="51:17">case <expr pos:start="51:14" pos:end="51:16"><literal type="char" pos:start="51:14" pos:end="51:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:17">flags</name> <operator pos:start="53:19" pos:end="53:20">|=</operator> <name pos:start="53:22" pos:end="53:33">BDRV_REQ_FUA</name></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:17">case <expr pos:start="57:14" pos:end="57:16"><literal type="char" pos:start="57:14" pos:end="57:16">'p'</literal></expr>:</case>

            <comment type="block" pos:start="59:13" pos:end="59:53">/* Ignored for backwards compatibility */</comment>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:17">case <expr pos:start="63:14" pos:end="63:16"><literal type="char" pos:start="63:14" pos:end="63:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:25"><expr pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:17">Pflag</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <name pos:start="65:21" pos:end="65:24">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:44"><expr pos:start="67:13" pos:end="67:43"><name pos:start="67:13" pos:end="67:19">pattern</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:43"><name pos:start="67:23" pos:end="67:35">parse_pattern</name><argument_list pos:start="67:36" pos:end="67:43">(<argument pos:start="67:37" pos:end="67:42"><expr pos:start="67:37" pos:end="67:42"><name pos:start="67:37" pos:end="67:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="73:13"><if pos:start="69:13" pos:end="73:13">if <condition pos:start="69:16" pos:end="69:28">(<expr pos:start="69:17" pos:end="69:27"><name pos:start="69:17" pos:end="69:23">pattern</name> <operator pos:start="69:25" pos:end="69:25">&lt;</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>)</condition> <block pos:start="69:30" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:25">

                <return pos:start="71:17" pos:end="71:25">return <expr pos:start="71:24" pos:end="71:24"><literal type="number" pos:start="71:24" pos:end="71:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:17">case <expr pos:start="77:14" pos:end="77:16"><literal type="char" pos:start="77:14" pos:end="77:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:25"><expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:17">qflag</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <name pos:start="79:21" pos:end="79:24">true</name></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <case pos:start="83:9" pos:end="83:17">case <expr pos:start="83:14" pos:end="83:16"><literal type="char" pos:start="83:14" pos:end="83:16">'u'</literal></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="85:40"><expr pos:start="85:13" pos:end="85:39"><name pos:start="85:13" pos:end="85:17">flags</name> <operator pos:start="85:19" pos:end="85:20">|=</operator> <name pos:start="85:22" pos:end="85:39">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        <case pos:start="89:9" pos:end="89:17">case <expr pos:start="89:14" pos:end="89:16"><literal type="char" pos:start="89:14" pos:end="89:16">'z'</literal></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:25"><expr pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:17">zflag</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <name pos:start="91:21" pos:end="91:24">true</name></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <default pos:start="95:9" pos:end="95:16">default:</default>

            <return pos:start="97:13" pos:end="97:52">return <expr pos:start="97:20" pos:end="97:51"><call pos:start="97:20" pos:end="97:51"><name pos:start="97:20" pos:end="97:39">qemuio_command_usage</name><argument_list pos:start="97:40" pos:end="97:51">(<argument pos:start="97:41" pos:end="97:50"><expr pos:start="97:41" pos:end="97:50"><operator pos:start="97:41" pos:end="97:41">&amp;</operator><name pos:start="97:42" pos:end="97:50">write_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:27">(<expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:14">optind</name> <operator pos:start="105:16" pos:end="105:17">!=</operator> <name pos:start="105:19" pos:end="105:22">argc</name> <operator pos:start="105:24" pos:end="105:24">-</operator> <literal type="number" pos:start="105:26" pos:end="105:26">2</literal></expr>)</condition> <block pos:start="105:29" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:48">

        <return pos:start="107:9" pos:end="107:48">return <expr pos:start="107:16" pos:end="107:47"><call pos:start="107:16" pos:end="107:47"><name pos:start="107:16" pos:end="107:35">qemuio_command_usage</name><argument_list pos:start="107:36" pos:end="107:47">(<argument pos:start="107:37" pos:end="107:46"><expr pos:start="107:37" pos:end="107:46"><operator pos:start="107:37" pos:end="107:37">&amp;</operator><name pos:start="107:38" pos:end="107:46">write_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:23">(<expr pos:start="113:9" pos:end="113:22"><name pos:start="113:9" pos:end="113:13">bflag</name> <operator pos:start="113:15" pos:end="113:16">&amp;&amp;</operator> <name pos:start="113:18" pos:end="113:22">zflag</name></expr>)</condition> <block pos:start="113:25" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:17">

        <expr_stmt pos:start="115:9" pos:end="115:67"><expr pos:start="115:9" pos:end="115:66"><call pos:start="115:9" pos:end="115:66"><name pos:start="115:9" pos:end="115:14">printf</name><argument_list pos:start="115:15" pos:end="115:66">(<argument pos:start="115:16" pos:end="115:65"><expr pos:start="115:16" pos:end="115:65"><literal type="string" pos:start="115:16" pos:end="115:65">"-b and -z cannot be specified at the same time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:17">return <expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:51">(<expr pos:start="123:9" pos:end="123:50"><operator pos:start="123:9" pos:end="123:9">(</operator><name pos:start="123:10" pos:end="123:14">flags</name> <operator pos:start="123:16" pos:end="123:16">&amp;</operator> <name pos:start="123:18" pos:end="123:29">BDRV_REQ_FUA</name><operator pos:start="123:30" pos:end="123:30">)</operator> <operator pos:start="123:32" pos:end="123:33">&amp;&amp;</operator> <operator pos:start="123:35" pos:end="123:35">(</operator><name pos:start="123:36" pos:end="123:40">bflag</name> <operator pos:start="123:42" pos:end="123:43">||</operator> <name pos:start="123:45" pos:end="123:49">cflag</name><operator pos:start="123:50" pos:end="123:50">)</operator></expr>)</condition> <block pos:start="123:53" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:17">

        <expr_stmt pos:start="125:9" pos:end="125:73"><expr pos:start="125:9" pos:end="125:72"><call pos:start="125:9" pos:end="125:72"><name pos:start="125:9" pos:end="125:14">printf</name><argument_list pos:start="125:15" pos:end="125:72">(<argument pos:start="125:16" pos:end="125:71"><expr pos:start="125:16" pos:end="125:71"><literal type="string" pos:start="125:16" pos:end="125:71">"-f and -b or -c cannot be specified at the same time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:17">return <expr pos:start="127:16" pos:end="127:16"><literal type="number" pos:start="127:16" pos:end="127:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:47">(<expr pos:start="133:9" pos:end="133:46"><operator pos:start="133:9" pos:end="133:9">(</operator><name pos:start="133:10" pos:end="133:14">flags</name> <operator pos:start="133:16" pos:end="133:16">&amp;</operator> <name pos:start="133:18" pos:end="133:35">BDRV_REQ_MAY_UNMAP</name><operator pos:start="133:36" pos:end="133:36">)</operator> <operator pos:start="133:38" pos:end="133:39">&amp;&amp;</operator> <operator pos:start="133:41" pos:end="133:41">!</operator><name pos:start="133:42" pos:end="133:46">zflag</name></expr>)</condition> <block pos:start="133:49" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:17">

        <expr_stmt pos:start="135:9" pos:end="135:51"><expr pos:start="135:9" pos:end="135:50"><call pos:start="135:9" pos:end="135:50"><name pos:start="135:9" pos:end="135:14">printf</name><argument_list pos:start="135:15" pos:end="135:50">(<argument pos:start="135:16" pos:end="135:49"><expr pos:start="135:16" pos:end="135:49"><literal type="string" pos:start="135:16" pos:end="135:49">"-u requires -z to be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="137:9" pos:end="137:17">return <expr pos:start="137:16" pos:end="137:16"><literal type="number" pos:start="137:16" pos:end="137:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="143:5" pos:end="149:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:23">(<expr pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:13">zflag</name> <operator pos:start="143:15" pos:end="143:16">&amp;&amp;</operator> <name pos:start="143:18" pos:end="143:22">Pflag</name></expr>)</condition> <block pos:start="143:25" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:17">

        <expr_stmt pos:start="145:9" pos:end="145:67"><expr pos:start="145:9" pos:end="145:66"><call pos:start="145:9" pos:end="145:66"><name pos:start="145:9" pos:end="145:14">printf</name><argument_list pos:start="145:15" pos:end="145:66">(<argument pos:start="145:16" pos:end="145:65"><expr pos:start="145:16" pos:end="145:65"><literal type="string" pos:start="145:16" pos:end="145:65">"-z and -P cannot be specified at the same time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="147:9" pos:end="147:17">return <expr pos:start="147:16" pos:end="147:16"><literal type="number" pos:start="147:16" pos:end="147:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:34"><expr pos:start="153:5" pos:end="153:33"><name pos:start="153:5" pos:end="153:10">offset</name> <operator pos:start="153:12" pos:end="153:12">=</operator> <call pos:start="153:14" pos:end="153:33"><name pos:start="153:14" pos:end="153:19">cvtnum</name><argument_list pos:start="153:20" pos:end="153:33">(<argument pos:start="153:21" pos:end="153:32"><expr pos:start="153:21" pos:end="153:32"><name pos:start="153:21" pos:end="153:32"><name pos:start="153:21" pos:end="153:24">argv</name><index pos:start="153:25" pos:end="153:32">[<expr pos:start="153:26" pos:end="153:31"><name pos:start="153:26" pos:end="153:31">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="161:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:19">(<expr pos:start="155:9" pos:end="155:18"><name pos:start="155:9" pos:end="155:14">offset</name> <operator pos:start="155:16" pos:end="155:16">&lt;</operator> <literal type="number" pos:start="155:18" pos:end="155:18">0</literal></expr>)</condition> <block pos:start="155:21" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:17">

        <expr_stmt pos:start="157:9" pos:end="157:47"><expr pos:start="157:9" pos:end="157:46"><call pos:start="157:9" pos:end="157:46"><name pos:start="157:9" pos:end="157:24">print_cvtnum_err</name><argument_list pos:start="157:25" pos:end="157:46">(<argument pos:start="157:26" pos:end="157:31"><expr pos:start="157:26" pos:end="157:31"><name pos:start="157:26" pos:end="157:31">offset</name></expr></argument>, <argument pos:start="157:34" pos:end="157:45"><expr pos:start="157:34" pos:end="157:45"><name pos:start="157:34" pos:end="157:45"><name pos:start="157:34" pos:end="157:37">argv</name><index pos:start="157:38" pos:end="157:45">[<expr pos:start="157:39" pos:end="157:44"><name pos:start="157:39" pos:end="157:44">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="159:9" pos:end="159:17">return <expr pos:start="159:16" pos:end="159:16"><literal type="number" pos:start="159:16" pos:end="159:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:13"><expr pos:start="165:5" pos:end="165:12"><name pos:start="165:5" pos:end="165:10">optind</name><operator pos:start="165:11" pos:end="165:12">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:33"><expr pos:start="167:5" pos:end="167:32"><name pos:start="167:5" pos:end="167:9">count</name> <operator pos:start="167:11" pos:end="167:11">=</operator> <call pos:start="167:13" pos:end="167:32"><name pos:start="167:13" pos:end="167:18">cvtnum</name><argument_list pos:start="167:19" pos:end="167:32">(<argument pos:start="167:20" pos:end="167:31"><expr pos:start="167:20" pos:end="167:31"><name pos:start="167:20" pos:end="167:31"><name pos:start="167:20" pos:end="167:23">argv</name><index pos:start="167:24" pos:end="167:31">[<expr pos:start="167:25" pos:end="167:30"><name pos:start="167:25" pos:end="167:30">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="183:5"><if pos:start="169:5" pos:end="175:5">if <condition pos:start="169:8" pos:end="169:18">(<expr pos:start="169:9" pos:end="169:17"><name pos:start="169:9" pos:end="169:13">count</name> <operator pos:start="169:15" pos:end="169:15">&lt;</operator> <literal type="number" pos:start="169:17" pos:end="169:17">0</literal></expr>)</condition> <block pos:start="169:20" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:17">

        <expr_stmt pos:start="171:9" pos:end="171:46"><expr pos:start="171:9" pos:end="171:45"><call pos:start="171:9" pos:end="171:45"><name pos:start="171:9" pos:end="171:24">print_cvtnum_err</name><argument_list pos:start="171:25" pos:end="171:45">(<argument pos:start="171:26" pos:end="171:30"><expr pos:start="171:26" pos:end="171:30"><name pos:start="171:26" pos:end="171:30">count</name></expr></argument>, <argument pos:start="171:33" pos:end="171:44"><expr pos:start="171:33" pos:end="171:44"><name pos:start="171:33" pos:end="171:44"><name pos:start="171:33" pos:end="171:36">argv</name><index pos:start="171:37" pos:end="171:44">[<expr pos:start="171:38" pos:end="171:43"><name pos:start="171:38" pos:end="171:43">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="173:9" pos:end="173:17">return <expr pos:start="173:16" pos:end="173:16"><literal type="number" pos:start="173:16" pos:end="173:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="175:7" pos:end="183:5">else if <condition pos:start="175:15" pos:end="175:32">(<expr pos:start="175:16" pos:end="175:31"><name pos:start="175:16" pos:end="175:20">count</name> <operator pos:start="175:22" pos:end="175:22">&gt;</operator> <name pos:start="175:24" pos:end="175:31">SIZE_MAX</name></expr>)</condition> <block pos:start="175:34" pos:end="183:5">{<block_content pos:start="177:9" pos:end="181:17">

        <expr_stmt pos:start="177:9" pos:end="179:50"><expr pos:start="177:9" pos:end="179:49"><call pos:start="177:9" pos:end="179:49"><name pos:start="177:9" pos:end="177:14">printf</name><argument_list pos:start="177:15" pos:end="179:49">(<argument pos:start="177:16" pos:end="177:61"><expr pos:start="177:16" pos:end="177:61"><literal type="string" pos:start="177:16" pos:end="177:39">"length cannot exceed %"</literal> <name pos:start="177:41" pos:end="177:46">PRIu64</name> <literal type="string" pos:start="177:48" pos:end="177:61">", given %s\n"</literal></expr></argument>,

               <argument pos:start="179:16" pos:end="179:34"><expr pos:start="179:16" pos:end="179:34"><operator pos:start="179:16" pos:end="179:16">(</operator><name pos:start="179:17" pos:end="179:24">uint64_t</name><operator pos:start="179:25" pos:end="179:25">)</operator> <name pos:start="179:27" pos:end="179:34">SIZE_MAX</name></expr></argument>, <argument pos:start="179:37" pos:end="179:48"><expr pos:start="179:37" pos:end="179:48"><name pos:start="179:37" pos:end="179:48"><name pos:start="179:37" pos:end="179:40">argv</name><index pos:start="179:41" pos:end="179:48">[<expr pos:start="179:42" pos:end="179:47"><name pos:start="179:42" pos:end="179:47">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="181:9" pos:end="181:17">return <expr pos:start="181:16" pos:end="181:16"><literal type="number" pos:start="181:16" pos:end="181:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="187:5" pos:end="211:5"><if pos:start="187:5" pos:end="211:5">if <condition pos:start="187:8" pos:end="187:23">(<expr pos:start="187:9" pos:end="187:22"><name pos:start="187:9" pos:end="187:13">bflag</name> <operator pos:start="187:15" pos:end="187:16">||</operator> <name pos:start="187:18" pos:end="187:22">cflag</name></expr>)</condition> <block pos:start="187:25" pos:end="211:5">{<block_content pos:start="189:9" pos:end="209:9">

        <if_stmt pos:start="189:9" pos:end="197:9"><if pos:start="189:9" pos:end="197:9">if <condition pos:start="189:12" pos:end="189:27">(<expr pos:start="189:13" pos:end="189:26"><name pos:start="189:13" pos:end="189:18">offset</name> <operator pos:start="189:20" pos:end="189:20">&amp;</operator> <literal type="number" pos:start="189:22" pos:end="189:26">0x1ff</literal></expr>)</condition> <block pos:start="189:29" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:21">

            <expr_stmt pos:start="191:13" pos:end="193:27"><expr pos:start="191:13" pos:end="193:26"><call pos:start="191:13" pos:end="193:26"><name pos:start="191:13" pos:end="191:18">printf</name><argument_list pos:start="191:19" pos:end="193:26">(<argument pos:start="191:20" pos:end="191:63"><expr pos:start="191:20" pos:end="191:63"><literal type="string" pos:start="191:20" pos:end="191:29">"offset %"</literal> <name pos:start="191:31" pos:end="191:36">PRId64</name> <literal type="string" pos:start="191:38" pos:end="191:63">" is not sector aligned\n"</literal></expr></argument>,

                   <argument pos:start="193:20" pos:end="193:25"><expr pos:start="193:20" pos:end="193:25"><name pos:start="193:20" pos:end="193:25">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="195:13" pos:end="195:21">return <expr pos:start="195:20" pos:end="195:20"><literal type="number" pos:start="195:20" pos:end="195:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="201:9" pos:end="209:9"><if pos:start="201:9" pos:end="209:9">if <condition pos:start="201:12" pos:end="201:26">(<expr pos:start="201:13" pos:end="201:25"><name pos:start="201:13" pos:end="201:17">count</name> <operator pos:start="201:19" pos:end="201:19">&amp;</operator> <literal type="number" pos:start="201:21" pos:end="201:25">0x1ff</literal></expr>)</condition> <block pos:start="201:28" pos:end="209:9">{<block_content pos:start="203:13" pos:end="207:21">

            <expr_stmt pos:start="203:13" pos:end="205:26"><expr pos:start="203:13" pos:end="205:25"><call pos:start="203:13" pos:end="205:25"><name pos:start="203:13" pos:end="203:18">printf</name><argument_list pos:start="203:19" pos:end="205:25">(<argument pos:start="203:20" pos:end="203:60"><expr pos:start="203:20" pos:end="203:60"><literal type="string" pos:start="203:20" pos:end="203:28">"count %"</literal><name pos:start="203:29" pos:end="203:34">PRId64</name><literal type="string" pos:start="203:35" pos:end="203:60">" is not sector aligned\n"</literal></expr></argument>,

                   <argument pos:start="205:20" pos:end="205:24"><expr pos:start="205:20" pos:end="205:24"><name pos:start="205:20" pos:end="205:24">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="207:13" pos:end="207:21">return <expr pos:start="207:20" pos:end="207:20"><literal type="number" pos:start="207:20" pos:end="207:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="215:5" pos:end="219:5"><if pos:start="215:5" pos:end="219:5">if <condition pos:start="215:8" pos:end="215:15">(<expr pos:start="215:9" pos:end="215:14"><operator pos:start="215:9" pos:end="215:9">!</operator><name pos:start="215:10" pos:end="215:14">zflag</name></expr>)</condition> <block pos:start="215:17" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:49">

        <expr_stmt pos:start="217:9" pos:end="217:49"><expr pos:start="217:9" pos:end="217:48"><name pos:start="217:9" pos:end="217:11">buf</name> <operator pos:start="217:13" pos:end="217:13">=</operator> <call pos:start="217:15" pos:end="217:48"><name pos:start="217:15" pos:end="217:27">qemu_io_alloc</name><argument_list pos:start="217:28" pos:end="217:48">(<argument pos:start="217:29" pos:end="217:31"><expr pos:start="217:29" pos:end="217:31"><name pos:start="217:29" pos:end="217:31">blk</name></expr></argument>, <argument pos:start="217:34" pos:end="217:38"><expr pos:start="217:34" pos:end="217:38"><name pos:start="217:34" pos:end="217:38">count</name></expr></argument>, <argument pos:start="217:41" pos:end="217:47"><expr pos:start="217:41" pos:end="217:47"><name pos:start="217:41" pos:end="217:47">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:28"><expr pos:start="223:5" pos:end="223:27"><call pos:start="223:5" pos:end="223:27"><name pos:start="223:5" pos:end="223:16">gettimeofday</name><argument_list pos:start="223:17" pos:end="223:27">(<argument pos:start="223:18" pos:end="223:20"><expr pos:start="223:18" pos:end="223:20"><operator pos:start="223:18" pos:end="223:18">&amp;</operator><name pos:start="223:19" pos:end="223:20">t1</name></expr></argument>, <argument pos:start="223:23" pos:end="223:26"><expr pos:start="223:23" pos:end="223:26"><name pos:start="223:23" pos:end="223:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="241:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:14">(<expr pos:start="225:9" pos:end="225:13"><name pos:start="225:9" pos:end="225:13">bflag</name></expr>)</condition> <block pos:start="225:16" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:63">

        <expr_stmt pos:start="227:9" pos:end="227:63"><expr pos:start="227:9" pos:end="227:62"><name pos:start="227:9" pos:end="227:11">cnt</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <call pos:start="227:15" pos:end="227:62"><name pos:start="227:15" pos:end="227:29">do_save_vmstate</name><argument_list pos:start="227:30" pos:end="227:62">(<argument pos:start="227:31" pos:end="227:33"><expr pos:start="227:31" pos:end="227:33"><name pos:start="227:31" pos:end="227:33">blk</name></expr></argument>, <argument pos:start="227:36" pos:end="227:38"><expr pos:start="227:36" pos:end="227:38"><name pos:start="227:36" pos:end="227:38">buf</name></expr></argument>, <argument pos:start="227:41" pos:end="227:46"><expr pos:start="227:41" pos:end="227:46"><name pos:start="227:41" pos:end="227:46">offset</name></expr></argument>, <argument pos:start="227:49" pos:end="227:53"><expr pos:start="227:49" pos:end="227:53"><name pos:start="227:49" pos:end="227:53">count</name></expr></argument>, <argument pos:start="227:56" pos:end="227:61"><expr pos:start="227:56" pos:end="227:61"><operator pos:start="227:56" pos:end="227:56">&amp;</operator><name pos:start="227:57" pos:end="227:61">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="229:7" pos:end="233:5">else if <condition pos:start="229:15" pos:end="229:21">(<expr pos:start="229:16" pos:end="229:20"><name pos:start="229:16" pos:end="229:20">zflag</name></expr>)</condition> <block pos:start="229:23" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:69">

        <expr_stmt pos:start="231:9" pos:end="231:69"><expr pos:start="231:9" pos:end="231:68"><name pos:start="231:9" pos:end="231:11">cnt</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <call pos:start="231:15" pos:end="231:68"><name pos:start="231:15" pos:end="231:33">do_co_pwrite_zeroes</name><argument_list pos:start="231:34" pos:end="231:68">(<argument pos:start="231:35" pos:end="231:37"><expr pos:start="231:35" pos:end="231:37"><name pos:start="231:35" pos:end="231:37">blk</name></expr></argument>, <argument pos:start="231:40" pos:end="231:45"><expr pos:start="231:40" pos:end="231:45"><name pos:start="231:40" pos:end="231:45">offset</name></expr></argument>, <argument pos:start="231:48" pos:end="231:52"><expr pos:start="231:48" pos:end="231:52"><name pos:start="231:48" pos:end="231:52">count</name></expr></argument>, <argument pos:start="231:55" pos:end="231:59"><expr pos:start="231:55" pos:end="231:59"><name pos:start="231:55" pos:end="231:59">flags</name></expr></argument>, <argument pos:start="231:62" pos:end="231:67"><expr pos:start="231:62" pos:end="231:67"><operator pos:start="231:62" pos:end="231:62">&amp;</operator><name pos:start="231:63" pos:end="231:67">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="233:7" pos:end="237:5">else if <condition pos:start="233:15" pos:end="233:21">(<expr pos:start="233:16" pos:end="233:20"><name pos:start="233:16" pos:end="233:20">cflag</name></expr>)</condition> <block pos:start="233:23" pos:end="237:5">{<block_content pos:start="235:9" pos:end="235:67">

        <expr_stmt pos:start="235:9" pos:end="235:67"><expr pos:start="235:9" pos:end="235:66"><name pos:start="235:9" pos:end="235:11">cnt</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <call pos:start="235:15" pos:end="235:66"><name pos:start="235:15" pos:end="235:33">do_write_compressed</name><argument_list pos:start="235:34" pos:end="235:66">(<argument pos:start="235:35" pos:end="235:37"><expr pos:start="235:35" pos:end="235:37"><name pos:start="235:35" pos:end="235:37">blk</name></expr></argument>, <argument pos:start="235:40" pos:end="235:42"><expr pos:start="235:40" pos:end="235:42"><name pos:start="235:40" pos:end="235:42">buf</name></expr></argument>, <argument pos:start="235:45" pos:end="235:50"><expr pos:start="235:45" pos:end="235:50"><name pos:start="235:45" pos:end="235:50">offset</name></expr></argument>, <argument pos:start="235:53" pos:end="235:57"><expr pos:start="235:53" pos:end="235:57"><name pos:start="235:53" pos:end="235:57">count</name></expr></argument>, <argument pos:start="235:60" pos:end="235:65"><expr pos:start="235:60" pos:end="235:65"><operator pos:start="235:60" pos:end="235:60">&amp;</operator><name pos:start="235:61" pos:end="235:65">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="237:7" pos:end="241:5">else <block pos:start="237:12" pos:end="241:5">{<block_content pos:start="239:9" pos:end="239:64">

        <expr_stmt pos:start="239:9" pos:end="239:64"><expr pos:start="239:9" pos:end="239:63"><name pos:start="239:9" pos:end="239:11">cnt</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <call pos:start="239:15" pos:end="239:63"><name pos:start="239:15" pos:end="239:23">do_pwrite</name><argument_list pos:start="239:24" pos:end="239:63">(<argument pos:start="239:25" pos:end="239:27"><expr pos:start="239:25" pos:end="239:27"><name pos:start="239:25" pos:end="239:27">blk</name></expr></argument>, <argument pos:start="239:30" pos:end="239:32"><expr pos:start="239:30" pos:end="239:32"><name pos:start="239:30" pos:end="239:32">buf</name></expr></argument>, <argument pos:start="239:35" pos:end="239:40"><expr pos:start="239:35" pos:end="239:40"><name pos:start="239:35" pos:end="239:40">offset</name></expr></argument>, <argument pos:start="239:43" pos:end="239:47"><expr pos:start="239:43" pos:end="239:47"><name pos:start="239:43" pos:end="239:47">count</name></expr></argument>, <argument pos:start="239:50" pos:end="239:54"><expr pos:start="239:50" pos:end="239:54"><name pos:start="239:50" pos:end="239:54">flags</name></expr></argument>, <argument pos:start="239:57" pos:end="239:62"><expr pos:start="239:57" pos:end="239:62"><operator pos:start="239:57" pos:end="239:57">&amp;</operator><name pos:start="239:58" pos:end="239:62">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:28"><expr pos:start="243:5" pos:end="243:27"><call pos:start="243:5" pos:end="243:27"><name pos:start="243:5" pos:end="243:16">gettimeofday</name><argument_list pos:start="243:17" pos:end="243:27">(<argument pos:start="243:18" pos:end="243:20"><expr pos:start="243:18" pos:end="243:20"><operator pos:start="243:18" pos:end="243:18">&amp;</operator><name pos:start="243:19" pos:end="243:20">t2</name></expr></argument>, <argument pos:start="243:23" pos:end="243:26"><expr pos:start="243:23" pos:end="243:26"><name pos:start="243:23" pos:end="243:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="247:5" pos:end="253:5"><if pos:start="247:5" pos:end="253:5">if <condition pos:start="247:8" pos:end="247:16">(<expr pos:start="247:9" pos:end="247:15"><name pos:start="247:9" pos:end="247:11">cnt</name> <operator pos:start="247:13" pos:end="247:13">&lt;</operator> <literal type="number" pos:start="247:15" pos:end="247:15">0</literal></expr>)</condition> <block pos:start="247:18" pos:end="253:5">{<block_content pos:start="249:9" pos:end="251:17">

        <expr_stmt pos:start="249:9" pos:end="249:53"><expr pos:start="249:9" pos:end="249:52"><call pos:start="249:9" pos:end="249:52"><name pos:start="249:9" pos:end="249:14">printf</name><argument_list pos:start="249:15" pos:end="249:52">(<argument pos:start="249:16" pos:end="249:35"><expr pos:start="249:16" pos:end="249:35"><literal type="string" pos:start="249:16" pos:end="249:35">"write failed: %s\n"</literal></expr></argument>, <argument pos:start="249:38" pos:end="249:51"><expr pos:start="249:38" pos:end="249:51"><call pos:start="249:38" pos:end="249:51"><name pos:start="249:38" pos:end="249:45">strerror</name><argument_list pos:start="249:46" pos:end="249:51">(<argument pos:start="249:47" pos:end="249:50"><expr pos:start="249:47" pos:end="249:50"><operator pos:start="249:47" pos:end="249:47">-</operator><name pos:start="249:48" pos:end="249:50">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="251:9" pos:end="251:17">goto <name pos:start="251:14" pos:end="251:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="257:5" pos:end="261:5"><if pos:start="257:5" pos:end="261:5">if <condition pos:start="257:8" pos:end="257:14">(<expr pos:start="257:9" pos:end="257:13"><name pos:start="257:9" pos:end="257:13">qflag</name></expr>)</condition> <block pos:start="257:16" pos:end="261:5">{<block_content pos:start="259:9" pos:end="259:17">

        <goto pos:start="259:9" pos:end="259:17">goto <name pos:start="259:14" pos:end="259:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="265:5" pos:end="265:60">/* Finally, report back -- -C gives a parsable format */</comment>

    <expr_stmt pos:start="267:5" pos:end="267:22"><expr pos:start="267:5" pos:end="267:21"><name pos:start="267:5" pos:end="267:6">t2</name> <operator pos:start="267:8" pos:end="267:8">=</operator> <call pos:start="267:10" pos:end="267:21"><name pos:start="267:10" pos:end="267:13">tsub</name><argument_list pos:start="267:14" pos:end="267:21">(<argument pos:start="267:15" pos:end="267:16"><expr pos:start="267:15" pos:end="267:16"><name pos:start="267:15" pos:end="267:16">t2</name></expr></argument>, <argument pos:start="267:19" pos:end="267:20"><expr pos:start="267:19" pos:end="267:20"><name pos:start="267:19" pos:end="267:20">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:65"><expr pos:start="269:5" pos:end="269:64"><call pos:start="269:5" pos:end="269:64"><name pos:start="269:5" pos:end="269:16">print_report</name><argument_list pos:start="269:17" pos:end="269:64">(<argument pos:start="269:18" pos:end="269:24"><expr pos:start="269:18" pos:end="269:24"><literal type="string" pos:start="269:18" pos:end="269:24">"wrote"</literal></expr></argument>, <argument pos:start="269:27" pos:end="269:29"><expr pos:start="269:27" pos:end="269:29"><operator pos:start="269:27" pos:end="269:27">&amp;</operator><name pos:start="269:28" pos:end="269:29">t2</name></expr></argument>, <argument pos:start="269:32" pos:end="269:37"><expr pos:start="269:32" pos:end="269:37"><name pos:start="269:32" pos:end="269:37">offset</name></expr></argument>, <argument pos:start="269:40" pos:end="269:44"><expr pos:start="269:40" pos:end="269:44"><name pos:start="269:40" pos:end="269:44">count</name></expr></argument>, <argument pos:start="269:47" pos:end="269:51"><expr pos:start="269:47" pos:end="269:51"><name pos:start="269:47" pos:end="269:51">total</name></expr></argument>, <argument pos:start="269:54" pos:end="269:56"><expr pos:start="269:54" pos:end="269:56"><name pos:start="269:54" pos:end="269:56">cnt</name></expr></argument>, <argument pos:start="269:59" pos:end="269:63"><expr pos:start="269:59" pos:end="269:63"><name pos:start="269:59" pos:end="269:63">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="273:1" pos:end="273:4"><name pos:start="273:1" pos:end="273:3">out</name>:</label>

    <if_stmt pos:start="275:5" pos:end="279:5"><if pos:start="275:5" pos:end="279:5">if <condition pos:start="275:8" pos:end="275:15">(<expr pos:start="275:9" pos:end="275:14"><operator pos:start="275:9" pos:end="275:9">!</operator><name pos:start="275:10" pos:end="275:14">zflag</name></expr>)</condition> <block pos:start="275:17" pos:end="279:5">{<block_content pos:start="277:9" pos:end="277:26">

        <expr_stmt pos:start="277:9" pos:end="277:26"><expr pos:start="277:9" pos:end="277:25"><call pos:start="277:9" pos:end="277:25"><name pos:start="277:9" pos:end="277:20">qemu_io_free</name><argument_list pos:start="277:21" pos:end="277:25">(<argument pos:start="277:22" pos:end="277:24"><expr pos:start="277:22" pos:end="277:24"><name pos:start="277:22" pos:end="277:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="283:5" pos:end="283:13">return <expr pos:start="283:12" pos:end="283:12"><literal type="number" pos:start="283:12" pos:end="283:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
