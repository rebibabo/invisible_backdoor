<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8688.c" pos:tabs="8"><function pos:start="1:1" pos:end="507:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:30">decode_init</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="507:1">{<block_content pos:start="5:5" pos:end="505:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">WMAProDecodeCtx</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:22">edata_ptr</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">extradata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:29">channel_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:15">bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:30">log2_max_num_subframes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:32">num_possible_block_sizes</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:34"><if pos:start="19:5" pos:end="21:34">if <condition pos:start="19:8" pos:end="19:83">(<expr pos:start="19:9" pos:end="19:82"><name pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:13">avctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:23">codec_id</name></name> <operator pos:start="19:25" pos:end="19:26">==</operator> <name pos:start="19:28" pos:end="19:43">AV_CODEC_ID_XMA1</name> <operator pos:start="19:45" pos:end="19:46">||</operator> <name pos:start="19:48" pos:end="19:62"><name pos:start="19:48" pos:end="19:52">avctx</name><operator pos:start="19:53" pos:end="19:54">-&gt;</operator><name pos:start="19:55" pos:end="19:62">codec_id</name></name> <operator pos:start="19:64" pos:end="19:65">==</operator> <name pos:start="19:67" pos:end="19:82">AV_CODEC_ID_XMA2</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:34"><block_content pos:start="21:9" pos:end="21:34">

        <expr_stmt pos:start="21:9" pos:end="21:34"><expr pos:start="21:9" pos:end="21:33"><name pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:13">avctx</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:26">block_align</name></name> <operator pos:start="21:28" pos:end="21:28">=</operator> <literal type="number" pos:start="21:30" pos:end="21:33">2048</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:28">(<expr pos:start="25:9" pos:end="25:27"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:27"><name pos:start="25:10" pos:end="25:14">avctx</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:27">block_align</name></name></expr>)</condition> <block pos:start="25:30" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:31">

        <expr_stmt pos:start="27:9" pos:end="27:64"><expr pos:start="27:9" pos:end="27:63"><call pos:start="27:9" pos:end="27:63"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:63">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:62"><expr pos:start="27:37" pos:end="27:62"><literal type="string" pos:start="27:37" pos:end="27:62">"block_align is not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:31">return <expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:21"><expr pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:12">avctx</name></name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:20">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:76"><expr pos:start="37:5" pos:end="37:75"><name pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:11">fdsp</name></name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:75"><name pos:start="37:15" pos:end="37:36">avpriv_float_dsp_alloc</name><argument_list pos:start="37:37" pos:end="37:75">(<argument pos:start="37:38" pos:end="37:74"><expr pos:start="37:38" pos:end="37:74"><name pos:start="37:38" pos:end="37:49"><name pos:start="37:38" pos:end="37:42">avctx</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:49">flags</name></name> <operator pos:start="37:51" pos:end="37:51">&amp;</operator> <name pos:start="37:53" pos:end="37:74">AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:31"><if pos:start="39:5" pos:end="41:31">if <condition pos:start="39:8" pos:end="39:17">(<expr pos:start="39:9" pos:end="39:16"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:16"><name pos:start="39:10" pos:end="39:10">s</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:16">fdsp</name></name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:31"><block_content pos:start="41:9" pos:end="41:31">

        <return pos:start="41:9" pos:end="41:31">return <expr pos:start="41:16" pos:end="41:30"><call pos:start="41:16" pos:end="41:30"><name pos:start="41:16" pos:end="41:22">AVERROR</name><argument_list pos:start="41:23" pos:end="41:30">(<argument pos:start="41:24" pos:end="41:29"><expr pos:start="41:24" pos:end="41:29"><name pos:start="41:24" pos:end="41:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:56"><expr pos:start="45:5" pos:end="45:55"><call pos:start="45:5" pos:end="45:55"><name pos:start="45:5" pos:end="45:17">init_put_bits</name><argument_list pos:start="45:18" pos:end="45:55">(<argument pos:start="45:19" pos:end="45:24"><expr pos:start="45:19" pos:end="45:24"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:24"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:24">pb</name></name></expr></argument>, <argument pos:start="45:27" pos:end="45:39"><expr pos:start="45:27" pos:end="45:39"><name pos:start="45:27" pos:end="45:39"><name pos:start="45:27" pos:end="45:27">s</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:39">frame_data</name></name></expr></argument>, <argument pos:start="45:42" pos:end="45:54"><expr pos:start="45:42" pos:end="45:54"><name pos:start="45:42" pos:end="45:54">MAX_FRAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:9">avctx</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:21">sample_fmt</name></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:42">AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="113:5"><if pos:start="53:5" pos:end="71:6">if <condition pos:start="53:8" pos:end="53:75">(<expr pos:start="53:9" pos:end="53:74"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:13">avctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:23">codec_id</name></name> <operator pos:start="53:25" pos:end="53:26">==</operator> <name pos:start="53:28" pos:end="53:43">AV_CODEC_ID_XMA2</name> <operator pos:start="53:45" pos:end="53:46">&amp;&amp;</operator> <name pos:start="53:48" pos:end="53:68"><name pos:start="53:48" pos:end="53:52">avctx</name><operator pos:start="53:53" pos:end="53:54">-&gt;</operator><name pos:start="53:55" pos:end="53:68">extradata_size</name></name> <operator pos:start="53:70" pos:end="53:71">&gt;=</operator> <literal type="number" pos:start="53:73" pos:end="53:74">34</literal></expr>)</condition> <block pos:start="53:77" pos:end="71:6">{<block_content pos:start="55:9" pos:end="67:29">

        <expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:23">decode_flags</name></name>    <operator pos:start="55:28" pos:end="55:28">=</operator> <literal type="number" pos:start="55:30" pos:end="55:35">0x10d6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:50"><expr pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:20">channel_mask</name>       <operator pos:start="57:28" pos:end="57:28">=</operator> <call pos:start="57:30" pos:end="57:49"><name pos:start="57:30" pos:end="57:36">AV_RL32</name><argument_list pos:start="57:37" pos:end="57:49">(<argument pos:start="57:38" pos:end="57:48"><expr pos:start="57:38" pos:end="57:48"><name pos:start="57:38" pos:end="57:46">edata_ptr</name><operator pos:start="57:47" pos:end="57:47">+</operator><literal type="number" pos:start="57:48" pos:end="57:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:32"><expr pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:26">bits_per_sample</name></name> <operator pos:start="59:28" pos:end="59:28">=</operator> <literal type="number" pos:start="59:30" pos:end="59:31">16</literal></expr>;</expr_stmt>

        <comment type="block" format="doxygen" pos:start="61:9" pos:end="61:33">/** dump the extradata */</comment>

        <for pos:start="63:9" pos:end="65:57">for <control pos:start="63:13" pos:end="63:51">(<init pos:start="63:14" pos:end="63:19"><expr pos:start="63:14" pos:end="63:18"><name pos:start="63:14" pos:end="63:14">i</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">0</literal></expr>;</init> <condition pos:start="63:21" pos:end="63:46"><expr pos:start="63:21" pos:end="63:45"><name pos:start="63:21" pos:end="63:21">i</name> <operator pos:start="63:23" pos:end="63:23">&lt;</operator> <name pos:start="63:25" pos:end="63:45"><name pos:start="63:25" pos:end="63:29">avctx</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:45">extradata_size</name></name></expr>;</condition> <incr pos:start="63:48" pos:end="63:50"><expr pos:start="63:48" pos:end="63:50"><name pos:start="63:48" pos:end="63:48">i</name><operator pos:start="63:49" pos:end="63:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="65:13" pos:end="65:57"><block_content pos:start="65:13" pos:end="65:57">

            <expr_stmt pos:start="65:13" pos:end="65:57"><expr pos:start="65:13" pos:end="65:56"><call pos:start="65:13" pos:end="65:56"><name pos:start="65:13" pos:end="65:19">ff_dlog</name><argument_list pos:start="65:20" pos:end="65:56">(<argument pos:start="65:21" pos:end="65:25"><expr pos:start="65:21" pos:end="65:25"><name pos:start="65:21" pos:end="65:25">avctx</name></expr></argument>, <argument pos:start="65:28" pos:end="65:34"><expr pos:start="65:28" pos:end="65:34"><literal type="string" pos:start="65:28" pos:end="65:34">"[%x] "</literal></expr></argument>, <argument pos:start="65:37" pos:end="65:55"><expr pos:start="65:37" pos:end="65:55"><name pos:start="65:37" pos:end="65:55"><name pos:start="65:37" pos:end="65:41">avctx</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:52">extradata</name><index pos:start="65:53" pos:end="65:55">[<expr pos:start="65:54" pos:end="65:54"><name pos:start="65:54" pos:end="65:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="67:9" pos:end="67:29"><expr pos:start="67:9" pos:end="67:28"><call pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:15">ff_dlog</name><argument_list pos:start="67:16" pos:end="67:28">(<argument pos:start="67:17" pos:end="67:21"><expr pos:start="67:17" pos:end="67:21"><name pos:start="67:17" pos:end="67:21">avctx</name></expr></argument>, <argument pos:start="67:24" pos:end="67:27"><expr pos:start="67:24" pos:end="67:27"><literal type="string" pos:start="67:24" pos:end="67:27">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     </block_content>}</block></if> <if type="elseif" pos:start="71:8" pos:end="89:6">else if <condition pos:start="71:16" pos:end="71:83">(<expr pos:start="71:17" pos:end="71:82"><name pos:start="71:17" pos:end="71:31"><name pos:start="71:17" pos:end="71:21">avctx</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:31">codec_id</name></name> <operator pos:start="71:33" pos:end="71:34">==</operator> <name pos:start="71:36" pos:end="71:51">AV_CODEC_ID_XMA1</name> <operator pos:start="71:53" pos:end="71:54">&amp;&amp;</operator> <name pos:start="71:56" pos:end="71:76"><name pos:start="71:56" pos:end="71:60">avctx</name><operator pos:start="71:61" pos:end="71:62">-&gt;</operator><name pos:start="71:63" pos:end="71:76">extradata_size</name></name> <operator pos:start="71:78" pos:end="71:79">&gt;=</operator> <literal type="number" pos:start="71:81" pos:end="71:82">28</literal></expr>)</condition> <block pos:start="71:85" pos:end="89:6">{<block_content pos:start="73:9" pos:end="85:29">

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:23">decode_flags</name></name>    <operator pos:start="73:28" pos:end="73:28">=</operator> <literal type="number" pos:start="73:30" pos:end="73:35">0x10d6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:32"><expr pos:start="75:9" pos:end="75:31"><name pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:26">bits_per_sample</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <literal type="number" pos:start="75:30" pos:end="75:31">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:20">channel_mask</name>       <operator pos:start="77:28" pos:end="77:28">=</operator> <literal type="number" pos:start="77:30" pos:end="77:30">0</literal></expr>;</expr_stmt>

        <comment type="block" format="doxygen" pos:start="79:9" pos:end="79:33">/** dump the extradata */</comment>

        <for pos:start="81:9" pos:end="83:57">for <control pos:start="81:13" pos:end="81:51">(<init pos:start="81:14" pos:end="81:19"><expr pos:start="81:14" pos:end="81:18"><name pos:start="81:14" pos:end="81:14">i</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <literal type="number" pos:start="81:18" pos:end="81:18">0</literal></expr>;</init> <condition pos:start="81:21" pos:end="81:46"><expr pos:start="81:21" pos:end="81:45"><name pos:start="81:21" pos:end="81:21">i</name> <operator pos:start="81:23" pos:end="81:23">&lt;</operator> <name pos:start="81:25" pos:end="81:45"><name pos:start="81:25" pos:end="81:29">avctx</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:45">extradata_size</name></name></expr>;</condition> <incr pos:start="81:48" pos:end="81:50"><expr pos:start="81:48" pos:end="81:50"><name pos:start="81:48" pos:end="81:48">i</name><operator pos:start="81:49" pos:end="81:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="83:13" pos:end="83:57"><block_content pos:start="83:13" pos:end="83:57">

            <expr_stmt pos:start="83:13" pos:end="83:57"><expr pos:start="83:13" pos:end="83:56"><call pos:start="83:13" pos:end="83:56"><name pos:start="83:13" pos:end="83:19">ff_dlog</name><argument_list pos:start="83:20" pos:end="83:56">(<argument pos:start="83:21" pos:end="83:25"><expr pos:start="83:21" pos:end="83:25"><name pos:start="83:21" pos:end="83:25">avctx</name></expr></argument>, <argument pos:start="83:28" pos:end="83:34"><expr pos:start="83:28" pos:end="83:34"><literal type="string" pos:start="83:28" pos:end="83:34">"[%x] "</literal></expr></argument>, <argument pos:start="83:37" pos:end="83:55"><expr pos:start="83:37" pos:end="83:55"><name pos:start="83:37" pos:end="83:55"><name pos:start="83:37" pos:end="83:41">avctx</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:52">extradata</name><index pos:start="83:53" pos:end="83:55">[<expr pos:start="83:54" pos:end="83:54"><name pos:start="83:54" pos:end="83:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="85:9" pos:end="85:29"><expr pos:start="85:9" pos:end="85:28"><call pos:start="85:9" pos:end="85:28"><name pos:start="85:9" pos:end="85:15">ff_dlog</name><argument_list pos:start="85:16" pos:end="85:28">(<argument pos:start="85:17" pos:end="85:21"><expr pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:21">avctx</name></expr></argument>, <argument pos:start="85:24" pos:end="85:27"><expr pos:start="85:24" pos:end="85:27"><literal type="string" pos:start="85:24" pos:end="85:27">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     </block_content>}</block></if> <if type="elseif" pos:start="89:8" pos:end="107:5">else if <condition pos:start="89:16" pos:end="89:44">(<expr pos:start="89:17" pos:end="89:43"><name pos:start="89:17" pos:end="89:37"><name pos:start="89:17" pos:end="89:21">avctx</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:37">extradata_size</name></name> <operator pos:start="89:39" pos:end="89:40">&gt;=</operator> <literal type="number" pos:start="89:42" pos:end="89:43">18</literal></expr>)</condition> <block pos:start="89:46" pos:end="107:5">{<block_content pos:start="91:9" pos:end="103:29">

        <expr_stmt pos:start="91:9" pos:end="91:51"><expr pos:start="91:9" pos:end="91:50"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:23">decode_flags</name></name>    <operator pos:start="91:28" pos:end="91:28">=</operator> <call pos:start="91:30" pos:end="91:50"><name pos:start="91:30" pos:end="91:36">AV_RL16</name><argument_list pos:start="91:37" pos:end="91:50">(<argument pos:start="91:38" pos:end="91:49"><expr pos:start="91:38" pos:end="91:49"><name pos:start="91:38" pos:end="91:46">edata_ptr</name><operator pos:start="91:47" pos:end="91:47">+</operator><literal type="number" pos:start="91:48" pos:end="91:49">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:50"><expr pos:start="93:9" pos:end="93:49"><name pos:start="93:9" pos:end="93:20">channel_mask</name>       <operator pos:start="93:28" pos:end="93:28">=</operator> <call pos:start="93:30" pos:end="93:49"><name pos:start="93:30" pos:end="93:36">AV_RL32</name><argument_list pos:start="93:37" pos:end="93:49">(<argument pos:start="93:38" pos:end="93:48"><expr pos:start="93:38" pos:end="93:48"><name pos:start="93:38" pos:end="93:46">edata_ptr</name><operator pos:start="93:47" pos:end="93:47">+</operator><literal type="number" pos:start="93:48" pos:end="93:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:48"><expr pos:start="95:9" pos:end="95:47"><name pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:26">bits_per_sample</name></name> <operator pos:start="95:28" pos:end="95:28">=</operator> <call pos:start="95:30" pos:end="95:47"><name pos:start="95:30" pos:end="95:36">AV_RL16</name><argument_list pos:start="95:37" pos:end="95:47">(<argument pos:start="95:38" pos:end="95:46"><expr pos:start="95:38" pos:end="95:46"><name pos:start="95:38" pos:end="95:46">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" format="doxygen" pos:start="97:9" pos:end="97:33">/** dump the extradata */</comment>

        <for pos:start="99:9" pos:end="101:57">for <control pos:start="99:13" pos:end="99:51">(<init pos:start="99:14" pos:end="99:19"><expr pos:start="99:14" pos:end="99:18"><name pos:start="99:14" pos:end="99:14">i</name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>;</init> <condition pos:start="99:21" pos:end="99:46"><expr pos:start="99:21" pos:end="99:45"><name pos:start="99:21" pos:end="99:21">i</name> <operator pos:start="99:23" pos:end="99:23">&lt;</operator> <name pos:start="99:25" pos:end="99:45"><name pos:start="99:25" pos:end="99:29">avctx</name><operator pos:start="99:30" pos:end="99:31">-&gt;</operator><name pos:start="99:32" pos:end="99:45">extradata_size</name></name></expr>;</condition> <incr pos:start="99:48" pos:end="99:50"><expr pos:start="99:48" pos:end="99:50"><name pos:start="99:48" pos:end="99:48">i</name><operator pos:start="99:49" pos:end="99:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="101:13" pos:end="101:57"><block_content pos:start="101:13" pos:end="101:57">

            <expr_stmt pos:start="101:13" pos:end="101:57"><expr pos:start="101:13" pos:end="101:56"><call pos:start="101:13" pos:end="101:56"><name pos:start="101:13" pos:end="101:19">ff_dlog</name><argument_list pos:start="101:20" pos:end="101:56">(<argument pos:start="101:21" pos:end="101:25"><expr pos:start="101:21" pos:end="101:25"><name pos:start="101:21" pos:end="101:25">avctx</name></expr></argument>, <argument pos:start="101:28" pos:end="101:34"><expr pos:start="101:28" pos:end="101:34"><literal type="string" pos:start="101:28" pos:end="101:34">"[%x] "</literal></expr></argument>, <argument pos:start="101:37" pos:end="101:55"><expr pos:start="101:37" pos:end="101:55"><name pos:start="101:37" pos:end="101:55"><name pos:start="101:37" pos:end="101:41">avctx</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:52">extradata</name><index pos:start="101:53" pos:end="101:55">[<expr pos:start="101:54" pos:end="101:54"><name pos:start="101:54" pos:end="101:54">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="103:9" pos:end="103:29"><expr pos:start="103:9" pos:end="103:28"><call pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:15">ff_dlog</name><argument_list pos:start="103:16" pos:end="103:28">(<argument pos:start="103:17" pos:end="103:21"><expr pos:start="103:17" pos:end="103:21"><name pos:start="103:17" pos:end="103:21">avctx</name></expr></argument>, <argument pos:start="103:24" pos:end="103:27"><expr pos:start="103:24" pos:end="103:27"><literal type="string" pos:start="103:24" pos:end="103:27">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="107:7" pos:end="113:5">else <block pos:start="107:12" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:36">

        <expr_stmt pos:start="109:9" pos:end="109:63"><expr pos:start="109:9" pos:end="109:62"><call pos:start="109:9" pos:end="109:62"><name pos:start="109:9" pos:end="109:29">avpriv_request_sample</name><argument_list pos:start="109:30" pos:end="109:62">(<argument pos:start="109:31" pos:end="109:35"><expr pos:start="109:31" pos:end="109:35"><name pos:start="109:31" pos:end="109:35">avctx</name></expr></argument>, <argument pos:start="109:38" pos:end="109:61"><expr pos:start="109:38" pos:end="109:61"><literal type="string" pos:start="109:38" pos:end="109:61">"Unknown extradata size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:36">return <expr pos:start="111:16" pos:end="111:35"><name pos:start="111:16" pos:end="111:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:69">(<expr pos:start="117:9" pos:end="117:68"><name pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:13">avctx</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:23">codec_id</name></name> <operator pos:start="117:25" pos:end="117:26">!=</operator> <name pos:start="117:28" pos:end="117:45">AV_CODEC_ID_WMAPRO</name> <operator pos:start="117:47" pos:end="117:48">&amp;&amp;</operator> <name pos:start="117:50" pos:end="117:64"><name pos:start="117:50" pos:end="117:54">avctx</name><operator pos:start="117:55" pos:end="117:56">-&gt;</operator><name pos:start="117:57" pos:end="117:64">channels</name></name> <operator pos:start="117:66" pos:end="117:66">&gt;</operator> <literal type="number" pos:start="117:68" pos:end="117:68">2</literal></expr>)</condition> <block pos:start="117:71" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:36">

        <expr_stmt pos:start="119:9" pos:end="119:68"><expr pos:start="119:9" pos:end="119:67"><call pos:start="119:9" pos:end="119:67"><name pos:start="119:9" pos:end="119:37">avpriv_report_missing_feature</name><argument_list pos:start="119:38" pos:end="119:67">(<argument pos:start="119:39" pos:end="119:43"><expr pos:start="119:39" pos:end="119:43"><name pos:start="119:39" pos:end="119:43">avctx</name></expr></argument>, <argument pos:start="119:46" pos:end="119:66"><expr pos:start="119:46" pos:end="119:66"><literal type="string" pos:start="119:46" pos:end="119:66">"&gt;2 channels support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:36">return <expr pos:start="121:16" pos:end="121:35"><name pos:start="121:16" pos:end="121:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="127:5" pos:end="127:23">/** generic init */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:57"><expr pos:start="129:5" pos:end="129:56"><name pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:22">log2_frame_size</name></name> <operator pos:start="129:24" pos:end="129:24">=</operator> <call pos:start="129:26" pos:end="129:52"><name pos:start="129:26" pos:end="129:32">av_log2</name><argument_list pos:start="129:33" pos:end="129:52">(<argument pos:start="129:34" pos:end="129:51"><expr pos:start="129:34" pos:end="129:51"><name pos:start="129:34" pos:end="129:51"><name pos:start="129:34" pos:end="129:38">avctx</name><operator pos:start="129:39" pos:end="129:40">-&gt;</operator><name pos:start="129:41" pos:end="129:51">block_align</name></name></expr></argument>)</argument_list></call> <operator pos:start="129:54" pos:end="129:54">+</operator> <literal type="number" pos:start="129:56" pos:end="129:56">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="137:5"><if pos:start="131:5" pos:end="137:5">if <condition pos:start="131:8" pos:end="131:32">(<expr pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:26">log2_frame_size</name></name> <operator pos:start="131:28" pos:end="131:28">&gt;</operator> <literal type="number" pos:start="131:30" pos:end="131:31">25</literal></expr>)</condition> <block pos:start="131:34" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:36">

        <expr_stmt pos:start="133:9" pos:end="133:58"><expr pos:start="133:9" pos:end="133:57"><call pos:start="133:9" pos:end="133:57"><name pos:start="133:9" pos:end="133:29">avpriv_request_sample</name><argument_list pos:start="133:30" pos:end="133:57">(<argument pos:start="133:31" pos:end="133:35"><expr pos:start="133:31" pos:end="133:35"><name pos:start="133:31" pos:end="133:35">avctx</name></expr></argument>, <argument pos:start="133:38" pos:end="133:56"><expr pos:start="133:38" pos:end="133:56"><literal type="string" pos:start="133:38" pos:end="133:56">"Large block align"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="135:9" pos:end="135:36">return <expr pos:start="135:16" pos:end="135:35"><name pos:start="135:16" pos:end="135:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="141:5" pos:end="141:21">/** frame info */</comment>

    <if_stmt pos:start="143:5" pos:end="149:26"><if pos:start="143:5" pos:end="145:26">if <condition pos:start="143:8" pos:end="143:46">(<expr pos:start="143:9" pos:end="143:45"><name pos:start="143:9" pos:end="143:23"><name pos:start="143:9" pos:end="143:13">avctx</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:23">codec_id</name></name> <operator pos:start="143:25" pos:end="143:26">!=</operator> <name pos:start="143:28" pos:end="143:45">AV_CODEC_ID_WMAPRO</name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:26"><block_content pos:start="145:9" pos:end="145:26">

        <expr_stmt pos:start="145:9" pos:end="145:26"><expr pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:21"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:21">skip_frame</name></name> <operator pos:start="145:23" pos:end="145:23">=</operator> <literal type="number" pos:start="145:25" pos:end="145:25">0</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="147:5" pos:end="149:26">else<block type="pseudo" pos:start="149:9" pos:end="149:26"><block_content pos:start="149:9" pos:end="149:26">

        <expr_stmt pos:start="149:9" pos:end="149:26"><expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:21"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:21">skip_frame</name></name> <operator pos:start="149:23" pos:end="149:23">=</operator> <literal type="number" pos:start="149:25" pos:end="149:25">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="149:28" pos:end="149:49">/* skip first frame */</comment>



    <expr_stmt pos:start="153:5" pos:end="153:23"><expr pos:start="153:5" pos:end="153:22"><name pos:start="153:5" pos:end="153:18"><name pos:start="153:5" pos:end="153:5">s</name><operator pos:start="153:6" pos:end="153:7">-&gt;</operator><name pos:start="153:8" pos:end="153:18">packet_loss</name></name> <operator pos:start="153:20" pos:end="153:20">=</operator> <literal type="number" pos:start="153:22" pos:end="153:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:46"><expr pos:start="155:5" pos:end="155:45"><name pos:start="155:5" pos:end="155:17"><name pos:start="155:5" pos:end="155:5">s</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:17">len_prefix</name></name>  <operator pos:start="155:20" pos:end="155:20">=</operator> <operator pos:start="155:22" pos:end="155:22">(</operator><name pos:start="155:23" pos:end="155:37"><name pos:start="155:23" pos:end="155:23">s</name><operator pos:start="155:24" pos:end="155:25">-&gt;</operator><name pos:start="155:26" pos:end="155:37">decode_flags</name></name> <operator pos:start="155:39" pos:end="155:39">&amp;</operator> <literal type="number" pos:start="155:41" pos:end="155:44">0x40</literal><operator pos:start="155:45" pos:end="155:45">)</operator></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="159:5" pos:end="159:24">/** get frame len */</comment>

    <if_stmt pos:start="161:5" pos:end="179:5"><if pos:start="161:5" pos:end="175:5">if <condition pos:start="161:8" pos:end="161:46">(<expr pos:start="161:9" pos:end="161:45"><name pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:13">avctx</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:23">codec_id</name></name> <operator pos:start="161:25" pos:end="161:26">==</operator> <name pos:start="161:28" pos:end="161:45">AV_CODEC_ID_WMAPRO</name></expr>)</condition> <block pos:start="161:48" pos:end="175:5">{<block_content pos:start="163:9" pos:end="173:41">

        <expr_stmt pos:start="163:9" pos:end="163:81"><expr pos:start="163:9" pos:end="163:80"><name pos:start="163:9" pos:end="163:12">bits</name> <operator pos:start="163:14" pos:end="163:14">=</operator> <call pos:start="163:16" pos:end="163:80"><name pos:start="163:16" pos:end="163:40">ff_wma_get_frame_len_bits</name><argument_list pos:start="163:41" pos:end="163:80">(<argument pos:start="163:42" pos:end="163:59"><expr pos:start="163:42" pos:end="163:59"><name pos:start="163:42" pos:end="163:59"><name pos:start="163:42" pos:end="163:46">avctx</name><operator pos:start="163:47" pos:end="163:48">-&gt;</operator><name pos:start="163:49" pos:end="163:59">sample_rate</name></name></expr></argument>, <argument pos:start="163:62" pos:end="163:62"><expr pos:start="163:62" pos:end="163:62"><literal type="number" pos:start="163:62" pos:end="163:62">3</literal></expr></argument>, <argument pos:start="163:65" pos:end="163:79"><expr pos:start="163:65" pos:end="163:79"><name pos:start="163:65" pos:end="163:79"><name pos:start="163:65" pos:end="163:65">s</name><operator pos:start="163:66" pos:end="163:67">-&gt;</operator><name pos:start="163:68" pos:end="163:79">decode_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="171:9"><if pos:start="165:9" pos:end="171:9">if <condition pos:start="165:12" pos:end="165:41">(<expr pos:start="165:13" pos:end="165:40"><name pos:start="165:13" pos:end="165:16">bits</name> <operator pos:start="165:18" pos:end="165:18">&gt;</operator> <name pos:start="165:20" pos:end="165:40">WMAPRO_BLOCK_MAX_BITS</name></expr>)</condition> <block pos:start="165:43" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:40">

            <expr_stmt pos:start="167:13" pos:end="167:63"><expr pos:start="167:13" pos:end="167:62"><call pos:start="167:13" pos:end="167:62"><name pos:start="167:13" pos:end="167:33">avpriv_request_sample</name><argument_list pos:start="167:34" pos:end="167:62">(<argument pos:start="167:35" pos:end="167:39"><expr pos:start="167:35" pos:end="167:39"><name pos:start="167:35" pos:end="167:39">avctx</name></expr></argument>, <argument pos:start="167:42" pos:end="167:61"><expr pos:start="167:42" pos:end="167:61"><literal type="string" pos:start="167:42" pos:end="167:61">"14-bit block sizes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="169:13" pos:end="169:40">return <expr pos:start="169:20" pos:end="169:39"><name pos:start="169:20" pos:end="169:39">AVERROR_PATCHWELCOME</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:41"><expr pos:start="173:9" pos:end="173:40"><name pos:start="173:9" pos:end="173:28"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:28">samples_per_frame</name></name> <operator pos:start="173:30" pos:end="173:30">=</operator> <literal type="number" pos:start="173:32" pos:end="173:32">1</literal> <operator pos:start="173:34" pos:end="173:35">&lt;&lt;</operator> <name pos:start="173:37" pos:end="173:40">bits</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="175:7" pos:end="179:5">else <block pos:start="175:12" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:35">

        <expr_stmt pos:start="177:9" pos:end="177:35"><expr pos:start="177:9" pos:end="177:34"><name pos:start="177:9" pos:end="177:28"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:28">samples_per_frame</name></name> <operator pos:start="177:30" pos:end="177:30">=</operator> <literal type="number" pos:start="177:32" pos:end="177:34">512</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" format="doxygen" pos:start="183:5" pos:end="183:24">/** subframe info */</comment>

    <expr_stmt pos:start="185:5" pos:end="185:67"><expr pos:start="185:5" pos:end="185:66"><name pos:start="185:5" pos:end="185:26">log2_max_num_subframes</name>       <operator pos:start="185:34" pos:end="185:34">=</operator> <operator pos:start="185:36" pos:end="185:36">(</operator><operator pos:start="185:37" pos:end="185:37">(</operator><name pos:start="185:38" pos:end="185:52"><name pos:start="185:38" pos:end="185:38">s</name><operator pos:start="185:39" pos:end="185:40">-&gt;</operator><name pos:start="185:41" pos:end="185:52">decode_flags</name></name> <operator pos:start="185:54" pos:end="185:54">&amp;</operator> <literal type="number" pos:start="185:56" pos:end="185:59">0x38</literal><operator pos:start="185:60" pos:end="185:60">)</operator> <operator pos:start="185:62" pos:end="185:63">&gt;&gt;</operator> <literal type="number" pos:start="185:65" pos:end="185:65">3</literal><operator pos:start="185:66" pos:end="185:66">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:63"><expr pos:start="187:5" pos:end="187:62"><name pos:start="187:5" pos:end="187:24"><name pos:start="187:5" pos:end="187:5">s</name><operator pos:start="187:6" pos:end="187:7">-&gt;</operator><name pos:start="187:8" pos:end="187:24">max_num_subframes</name></name>         <operator pos:start="187:34" pos:end="187:34">=</operator> <literal type="number" pos:start="187:36" pos:end="187:36">1</literal> <operator pos:start="187:38" pos:end="187:39">&lt;&lt;</operator> <name pos:start="187:41" pos:end="187:62">log2_max_num_subframes</name></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="191:36"><if pos:start="189:5" pos:end="191:36">if <condition pos:start="189:8" pos:end="189:64">(<expr pos:start="189:9" pos:end="189:63"><name pos:start="189:9" pos:end="189:28"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:28">max_num_subframes</name></name> <operator pos:start="189:30" pos:end="189:31">==</operator> <literal type="number" pos:start="189:33" pos:end="189:34">16</literal> <operator pos:start="189:36" pos:end="189:37">||</operator> <name pos:start="189:39" pos:end="189:58"><name pos:start="189:39" pos:end="189:39">s</name><operator pos:start="189:40" pos:end="189:41">-&gt;</operator><name pos:start="189:42" pos:end="189:58">max_num_subframes</name></name> <operator pos:start="189:60" pos:end="189:61">==</operator> <literal type="number" pos:start="189:63" pos:end="189:63">4</literal></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:36"><block_content pos:start="191:9" pos:end="191:36">

        <expr_stmt pos:start="191:9" pos:end="191:36"><expr pos:start="191:9" pos:end="191:35"><name pos:start="191:9" pos:end="191:31"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:31">max_subframe_len_bit</name></name> <operator pos:start="191:33" pos:end="191:33">=</operator> <literal type="number" pos:start="191:35" pos:end="191:35">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:63"><expr pos:start="193:5" pos:end="193:62"><name pos:start="193:5" pos:end="193:24"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:24">subframe_len_bits</name></name> <operator pos:start="193:26" pos:end="193:26">=</operator> <call pos:start="193:28" pos:end="193:58"><name pos:start="193:28" pos:end="193:34">av_log2</name><argument_list pos:start="193:35" pos:end="193:58">(<argument pos:start="193:36" pos:end="193:57"><expr pos:start="193:36" pos:end="193:57"><name pos:start="193:36" pos:end="193:57">log2_max_num_subframes</name></expr></argument>)</argument_list></call> <operator pos:start="193:60" pos:end="193:60">+</operator> <literal type="number" pos:start="193:62" pos:end="193:62">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:62"><expr pos:start="197:5" pos:end="197:61"><name pos:start="197:5" pos:end="197:28">num_possible_block_sizes</name>     <operator pos:start="197:34" pos:end="197:34">=</operator> <name pos:start="197:36" pos:end="197:57">log2_max_num_subframes</name> <operator pos:start="197:59" pos:end="197:59">+</operator> <literal type="number" pos:start="197:61" pos:end="197:61">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:79"><expr pos:start="199:5" pos:end="199:78"><name pos:start="199:5" pos:end="199:31"><name pos:start="199:5" pos:end="199:5">s</name><operator pos:start="199:6" pos:end="199:7">-&gt;</operator><name pos:start="199:8" pos:end="199:31">min_samples_per_subframe</name></name>  <operator pos:start="199:34" pos:end="199:34">=</operator> <name pos:start="199:36" pos:end="199:55"><name pos:start="199:36" pos:end="199:36">s</name><operator pos:start="199:37" pos:end="199:38">-&gt;</operator><name pos:start="199:39" pos:end="199:55">samples_per_frame</name></name> <operator pos:start="199:57" pos:end="199:57">/</operator> <name pos:start="199:59" pos:end="199:78"><name pos:start="199:59" pos:end="199:59">s</name><operator pos:start="199:60" pos:end="199:61">-&gt;</operator><name pos:start="199:62" pos:end="199:78">max_num_subframes</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:60"><expr pos:start="201:5" pos:end="201:59"><name pos:start="201:5" pos:end="201:32"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:32">dynamic_range_compression</name></name> <operator pos:start="201:34" pos:end="201:34">=</operator> <operator pos:start="201:36" pos:end="201:36">(</operator><name pos:start="201:37" pos:end="201:51"><name pos:start="201:37" pos:end="201:37">s</name><operator pos:start="201:38" pos:end="201:39">-&gt;</operator><name pos:start="201:40" pos:end="201:51">decode_flags</name></name> <operator pos:start="201:53" pos:end="201:53">&amp;</operator> <literal type="number" pos:start="201:55" pos:end="201:58">0x80</literal><operator pos:start="201:59" pos:end="201:59">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="205:5" pos:end="213:5"><if pos:start="205:5" pos:end="213:5">if <condition pos:start="205:8" pos:end="205:45">(<expr pos:start="205:9" pos:end="205:44"><name pos:start="205:9" pos:end="205:28"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:28">max_num_subframes</name></name> <operator pos:start="205:30" pos:end="205:30">&gt;</operator> <name pos:start="205:32" pos:end="205:44">MAX_SUBFRAMES</name></expr>)</condition> <block pos:start="205:47" pos:end="213:5">{<block_content pos:start="207:9" pos:end="211:35">

        <expr_stmt pos:start="207:9" pos:end="209:37"><expr pos:start="207:9" pos:end="209:36"><call pos:start="207:9" pos:end="209:36"><name pos:start="207:9" pos:end="207:14">av_log</name><argument_list pos:start="207:15" pos:end="209:36">(<argument pos:start="207:16" pos:end="207:20"><expr pos:start="207:16" pos:end="207:20"><name pos:start="207:16" pos:end="207:20">avctx</name></expr></argument>, <argument pos:start="207:23" pos:end="207:34"><expr pos:start="207:23" pos:end="207:34"><name pos:start="207:23" pos:end="207:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="207:37" pos:end="207:76"><expr pos:start="207:37" pos:end="207:76"><literal type="string" pos:start="207:37" pos:end="207:67">"invalid number of subframes %"</literal><name pos:start="207:68" pos:end="207:72">PRId8</name><literal type="string" pos:start="207:73" pos:end="207:76">"\n"</literal></expr></argument>,

               <argument pos:start="209:16" pos:end="209:35"><expr pos:start="209:16" pos:end="209:35"><name pos:start="209:16" pos:end="209:35"><name pos:start="209:16" pos:end="209:16">s</name><operator pos:start="209:17" pos:end="209:18">-&gt;</operator><name pos:start="209:19" pos:end="209:35">max_num_subframes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="211:9" pos:end="211:35">return <expr pos:start="211:16" pos:end="211:34"><name pos:start="211:16" pos:end="211:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="217:5" pos:end="225:5"><if pos:start="217:5" pos:end="225:5">if <condition pos:start="217:8" pos:end="217:60">(<expr pos:start="217:9" pos:end="217:59"><name pos:start="217:9" pos:end="217:35"><name pos:start="217:9" pos:end="217:9">s</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:35">min_samples_per_subframe</name></name> <operator pos:start="217:37" pos:end="217:37">&lt;</operator> <name pos:start="217:39" pos:end="217:59">WMAPRO_BLOCK_MIN_SIZE</name></expr>)</condition> <block pos:start="217:62" pos:end="225:5">{<block_content pos:start="219:9" pos:end="223:35">

        <expr_stmt pos:start="219:9" pos:end="221:44"><expr pos:start="219:9" pos:end="221:43"><call pos:start="219:9" pos:end="221:43"><name pos:start="219:9" pos:end="219:14">av_log</name><argument_list pos:start="219:15" pos:end="221:43">(<argument pos:start="219:16" pos:end="219:20"><expr pos:start="219:16" pos:end="219:20"><name pos:start="219:16" pos:end="219:20">avctx</name></expr></argument>, <argument pos:start="219:23" pos:end="219:34"><expr pos:start="219:23" pos:end="219:34"><name pos:start="219:23" pos:end="219:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="219:37" pos:end="219:80"><expr pos:start="219:37" pos:end="219:80"><literal type="string" pos:start="219:37" pos:end="219:80">"min_samples_per_subframe of %d too small\n"</literal></expr></argument>,

               <argument pos:start="221:16" pos:end="221:42"><expr pos:start="221:16" pos:end="221:42"><name pos:start="221:16" pos:end="221:42"><name pos:start="221:16" pos:end="221:16">s</name><operator pos:start="221:17" pos:end="221:18">-&gt;</operator><name pos:start="221:19" pos:end="221:42">min_samples_per_subframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="223:9" pos:end="223:35">return <expr pos:start="223:16" pos:end="223:34"><name pos:start="223:16" pos:end="223:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="229:5" pos:end="235:5"><if pos:start="229:5" pos:end="235:5">if <condition pos:start="229:8" pos:end="229:35">(<expr pos:start="229:9" pos:end="229:34"><name pos:start="229:9" pos:end="229:29"><name pos:start="229:9" pos:end="229:9">s</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:16">avctx</name><operator pos:start="229:17" pos:end="229:18">-&gt;</operator><name pos:start="229:19" pos:end="229:29">sample_rate</name></name> <operator pos:start="229:31" pos:end="229:32">&lt;=</operator> <literal type="number" pos:start="229:34" pos:end="229:34">0</literal></expr>)</condition> <block pos:start="229:37" pos:end="235:5">{<block_content pos:start="231:9" pos:end="233:35">

        <expr_stmt pos:start="231:9" pos:end="231:61"><expr pos:start="231:9" pos:end="231:60"><call pos:start="231:9" pos:end="231:60"><name pos:start="231:9" pos:end="231:14">av_log</name><argument_list pos:start="231:15" pos:end="231:60">(<argument pos:start="231:16" pos:end="231:20"><expr pos:start="231:16" pos:end="231:20"><name pos:start="231:16" pos:end="231:20">avctx</name></expr></argument>, <argument pos:start="231:23" pos:end="231:34"><expr pos:start="231:23" pos:end="231:34"><name pos:start="231:23" pos:end="231:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:37" pos:end="231:59"><expr pos:start="231:37" pos:end="231:59"><literal type="string" pos:start="231:37" pos:end="231:59">"invalid sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="233:9" pos:end="233:35">return <expr pos:start="233:16" pos:end="233:34"><name pos:start="233:16" pos:end="233:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="255:5"><if pos:start="239:5" pos:end="247:5">if <condition pos:start="239:8" pos:end="239:28">(<expr pos:start="239:9" pos:end="239:27"><name pos:start="239:9" pos:end="239:23"><name pos:start="239:9" pos:end="239:13">avctx</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:23">channels</name></name> <operator pos:start="239:25" pos:end="239:25">&lt;</operator> <literal type="number" pos:start="239:27" pos:end="239:27">0</literal></expr>)</condition> <block pos:start="239:30" pos:end="247:5">{<block_content pos:start="241:9" pos:end="245:35">

        <expr_stmt pos:start="241:9" pos:end="243:32"><expr pos:start="241:9" pos:end="243:31"><call pos:start="241:9" pos:end="243:31"><name pos:start="241:9" pos:end="241:14">av_log</name><argument_list pos:start="241:15" pos:end="243:31">(<argument pos:start="241:16" pos:end="241:20"><expr pos:start="241:16" pos:end="241:20"><name pos:start="241:16" pos:end="241:20">avctx</name></expr></argument>, <argument pos:start="241:23" pos:end="241:34"><expr pos:start="241:23" pos:end="241:34"><name pos:start="241:23" pos:end="241:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="241:37" pos:end="241:69"><expr pos:start="241:37" pos:end="241:69"><literal type="string" pos:start="241:37" pos:end="241:69">"invalid number of channels %d\n"</literal></expr></argument>,

               <argument pos:start="243:16" pos:end="243:30"><expr pos:start="243:16" pos:end="243:30"><name pos:start="243:16" pos:end="243:30"><name pos:start="243:16" pos:end="243:20">avctx</name><operator pos:start="243:21" pos:end="243:22">-&gt;</operator><name pos:start="243:23" pos:end="243:30">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="245:9" pos:end="245:35">return <expr pos:start="245:16" pos:end="245:34"><name pos:start="245:16" pos:end="245:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="247:7" pos:end="255:5">else if <condition pos:start="247:15" pos:end="247:53">(<expr pos:start="247:16" pos:end="247:52"><name pos:start="247:16" pos:end="247:30"><name pos:start="247:16" pos:end="247:20">avctx</name><operator pos:start="247:21" pos:end="247:22">-&gt;</operator><name pos:start="247:23" pos:end="247:30">channels</name></name> <operator pos:start="247:32" pos:end="247:32">&gt;</operator> <name pos:start="247:34" pos:end="247:52">WMAPRO_MAX_CHANNELS</name></expr>)</condition> <block pos:start="247:55" pos:end="255:5">{<block_content pos:start="249:9" pos:end="253:36">

        <expr_stmt pos:start="249:9" pos:end="251:76"><expr pos:start="249:9" pos:end="251:75"><call pos:start="249:9" pos:end="251:75"><name pos:start="249:9" pos:end="249:29">avpriv_request_sample</name><argument_list pos:start="249:30" pos:end="251:75">(<argument pos:start="249:31" pos:end="249:35"><expr pos:start="249:31" pos:end="249:35"><name pos:start="249:31" pos:end="249:35">avctx</name></expr></argument>,

                              <argument pos:start="251:31" pos:end="251:53"><expr pos:start="251:31" pos:end="251:53"><literal type="string" pos:start="251:31" pos:end="251:53">"More than %d channels"</literal></expr></argument>, <argument pos:start="251:56" pos:end="251:74"><expr pos:start="251:56" pos:end="251:74"><name pos:start="251:56" pos:end="251:74">WMAPRO_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="253:9" pos:end="253:36">return <expr pos:start="253:16" pos:end="253:35"><name pos:start="253:16" pos:end="253:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" format="doxygen" pos:start="259:5" pos:end="259:34">/** init previous block len */</comment>

    <for pos:start="261:5" pos:end="263:60">for <control pos:start="261:9" pos:end="261:41">(<init pos:start="261:10" pos:end="261:15"><expr pos:start="261:10" pos:end="261:14"><name pos:start="261:10" pos:end="261:10">i</name> <operator pos:start="261:12" pos:end="261:12">=</operator> <literal type="number" pos:start="261:14" pos:end="261:14">0</literal></expr>;</init> <condition pos:start="261:17" pos:end="261:36"><expr pos:start="261:17" pos:end="261:35"><name pos:start="261:17" pos:end="261:17">i</name> <operator pos:start="261:19" pos:end="261:19">&lt;</operator> <name pos:start="261:21" pos:end="261:35"><name pos:start="261:21" pos:end="261:25">avctx</name><operator pos:start="261:26" pos:end="261:27">-&gt;</operator><name pos:start="261:28" pos:end="261:35">channels</name></name></expr>;</condition> <incr pos:start="261:38" pos:end="261:40"><expr pos:start="261:38" pos:end="261:40"><name pos:start="261:38" pos:end="261:38">i</name><operator pos:start="261:39" pos:end="261:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="263:9" pos:end="263:60"><block_content pos:start="263:9" pos:end="263:60">

        <expr_stmt pos:start="263:9" pos:end="263:60"><expr pos:start="263:9" pos:end="263:59"><name pos:start="263:9" pos:end="263:21"><name pos:start="263:9" pos:end="263:9">s</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:18">channel</name><index pos:start="263:19" pos:end="263:21">[<expr pos:start="263:20" pos:end="263:20"><name pos:start="263:20" pos:end="263:20">i</name></expr>]</index></name><operator pos:start="263:22" pos:end="263:22">.</operator><name pos:start="263:23" pos:end="263:36">prev_block_len</name> <operator pos:start="263:38" pos:end="263:38">=</operator> <name pos:start="263:40" pos:end="263:59"><name pos:start="263:40" pos:end="263:40">s</name><operator pos:start="263:41" pos:end="263:42">-&gt;</operator><name pos:start="263:43" pos:end="263:59">samples_per_frame</name></name></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" format="doxygen" pos:start="267:5" pos:end="267:39">/** extract lfe channel position */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:24"><expr pos:start="269:5" pos:end="269:23"><name pos:start="269:5" pos:end="269:18"><name pos:start="269:5" pos:end="269:5">s</name><operator pos:start="269:6" pos:end="269:7">-&gt;</operator><name pos:start="269:8" pos:end="269:18">lfe_channel</name></name> <operator pos:start="269:20" pos:end="269:20">=</operator> <operator pos:start="269:22" pos:end="269:22">-</operator><literal type="number" pos:start="269:23" pos:end="269:23">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="273:5" pos:end="285:5"><if pos:start="273:5" pos:end="285:5">if <condition pos:start="273:8" pos:end="273:25">(<expr pos:start="273:9" pos:end="273:24"><name pos:start="273:9" pos:end="273:20">channel_mask</name> <operator pos:start="273:22" pos:end="273:22">&amp;</operator> <literal type="number" pos:start="273:24" pos:end="273:24">8</literal></expr>)</condition> <block pos:start="273:27" pos:end="285:5">{<block_content pos:start="275:9" pos:end="283:9">

        <decl_stmt pos:start="275:9" pos:end="275:26"><decl pos:start="275:9" pos:end="275:25"><type pos:start="275:9" pos:end="275:20"><name pos:start="275:9" pos:end="275:16">unsigned</name> <name pos:start="275:18" pos:end="275:20">int</name></type> <name pos:start="275:22" pos:end="275:25">mask</name></decl>;</decl_stmt>

        <for pos:start="277:9" pos:end="283:9">for <control pos:start="277:13" pos:end="277:45">(<init pos:start="277:14" pos:end="277:22"><expr pos:start="277:14" pos:end="277:21"><name pos:start="277:14" pos:end="277:17">mask</name> <operator pos:start="277:19" pos:end="277:19">=</operator> <literal type="number" pos:start="277:21" pos:end="277:21">1</literal></expr>;</init> <condition pos:start="277:24" pos:end="277:33"><expr pos:start="277:24" pos:end="277:32"><name pos:start="277:24" pos:end="277:27">mask</name> <operator pos:start="277:29" pos:end="277:29">&lt;</operator> <literal type="number" pos:start="277:31" pos:end="277:32">16</literal></expr>;</condition> <incr pos:start="277:35" pos:end="277:44"><expr pos:start="277:35" pos:end="277:44"><name pos:start="277:35" pos:end="277:38">mask</name> <operator pos:start="277:40" pos:end="277:42">&lt;&lt;=</operator> <literal type="number" pos:start="277:44" pos:end="277:44">1</literal></expr></incr>)</control> <block pos:start="277:47" pos:end="283:9">{<block_content pos:start="279:13" pos:end="281:33">

            <if_stmt pos:start="279:13" pos:end="281:33"><if pos:start="279:13" pos:end="281:33">if <condition pos:start="279:16" pos:end="279:36">(<expr pos:start="279:17" pos:end="279:35"><name pos:start="279:17" pos:end="279:28">channel_mask</name> <operator pos:start="279:30" pos:end="279:30">&amp;</operator> <name pos:start="279:32" pos:end="279:35">mask</name></expr>)</condition><block type="pseudo" pos:start="281:17" pos:end="281:33"><block_content pos:start="281:17" pos:end="281:33">

                <expr_stmt pos:start="281:17" pos:end="281:33"><expr pos:start="281:17" pos:end="281:32"><operator pos:start="281:17" pos:end="281:18">++</operator><name pos:start="281:19" pos:end="281:32"><name pos:start="281:19" pos:end="281:19">s</name><operator pos:start="281:20" pos:end="281:21">-&gt;</operator><name pos:start="281:22" pos:end="281:32">lfe_channel</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="289:5" pos:end="293:48"><expr pos:start="289:5" pos:end="293:47"><call pos:start="289:5" pos:end="293:47"><name pos:start="289:5" pos:end="289:19">INIT_VLC_STATIC</name><argument_list pos:start="289:20" pos:end="293:47">(<argument pos:start="289:21" pos:end="289:27"><expr pos:start="289:21" pos:end="289:27"><operator pos:start="289:21" pos:end="289:21">&amp;</operator><name pos:start="289:22" pos:end="289:27">sf_vlc</name></expr></argument>, <argument pos:start="289:30" pos:end="289:41"><expr pos:start="289:30" pos:end="289:41"><name pos:start="289:30" pos:end="289:41">SCALEVLCBITS</name></expr></argument>, <argument pos:start="289:44" pos:end="289:58"><expr pos:start="289:44" pos:end="289:58"><name pos:start="289:44" pos:end="289:58">HUFF_SCALE_SIZE</name></expr></argument>,

                    <argument pos:start="291:21" pos:end="291:34"><expr pos:start="291:21" pos:end="291:34"><name pos:start="291:21" pos:end="291:34">scale_huffbits</name></expr></argument>, <argument pos:start="291:37" pos:end="291:37"><expr pos:start="291:37" pos:end="291:37"><literal type="number" pos:start="291:37" pos:end="291:37">1</literal></expr></argument>, <argument pos:start="291:40" pos:end="291:40"><expr pos:start="291:40" pos:end="291:40"><literal type="number" pos:start="291:40" pos:end="291:40">1</literal></expr></argument>,

                    <argument pos:start="293:21" pos:end="293:35"><expr pos:start="293:21" pos:end="293:35"><name pos:start="293:21" pos:end="293:35">scale_huffcodes</name></expr></argument>, <argument pos:start="293:38" pos:end="293:38"><expr pos:start="293:38" pos:end="293:38"><literal type="number" pos:start="293:38" pos:end="293:38">2</literal></expr></argument>, <argument pos:start="293:41" pos:end="293:41"><expr pos:start="293:41" pos:end="293:41"><literal type="number" pos:start="293:41" pos:end="293:41">2</literal></expr></argument>, <argument pos:start="293:44" pos:end="293:46"><expr pos:start="293:44" pos:end="293:46"><literal type="number" pos:start="293:44" pos:end="293:46">616</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="297:5" pos:end="301:52"><expr pos:start="297:5" pos:end="301:51"><call pos:start="297:5" pos:end="301:51"><name pos:start="297:5" pos:end="297:19">INIT_VLC_STATIC</name><argument_list pos:start="297:20" pos:end="301:51">(<argument pos:start="297:21" pos:end="297:30"><expr pos:start="297:21" pos:end="297:30"><operator pos:start="297:21" pos:end="297:21">&amp;</operator><name pos:start="297:22" pos:end="297:30">sf_rl_vlc</name></expr></argument>, <argument pos:start="297:33" pos:end="297:39"><expr pos:start="297:33" pos:end="297:39"><name pos:start="297:33" pos:end="297:39">VLCBITS</name></expr></argument>, <argument pos:start="297:42" pos:end="297:59"><expr pos:start="297:42" pos:end="297:59"><name pos:start="297:42" pos:end="297:59">HUFF_SCALE_RL_SIZE</name></expr></argument>,

                    <argument pos:start="299:21" pos:end="299:37"><expr pos:start="299:21" pos:end="299:37"><name pos:start="299:21" pos:end="299:37">scale_rl_huffbits</name></expr></argument>, <argument pos:start="299:40" pos:end="299:40"><expr pos:start="299:40" pos:end="299:40"><literal type="number" pos:start="299:40" pos:end="299:40">1</literal></expr></argument>, <argument pos:start="299:43" pos:end="299:43"><expr pos:start="299:43" pos:end="299:43"><literal type="number" pos:start="299:43" pos:end="299:43">1</literal></expr></argument>,

                    <argument pos:start="301:21" pos:end="301:38"><expr pos:start="301:21" pos:end="301:38"><name pos:start="301:21" pos:end="301:38">scale_rl_huffcodes</name></expr></argument>, <argument pos:start="301:41" pos:end="301:41"><expr pos:start="301:41" pos:end="301:41"><literal type="number" pos:start="301:41" pos:end="301:41">4</literal></expr></argument>, <argument pos:start="301:44" pos:end="301:44"><expr pos:start="301:44" pos:end="301:44"><literal type="number" pos:start="301:44" pos:end="301:44">4</literal></expr></argument>, <argument pos:start="301:47" pos:end="301:50"><expr pos:start="301:47" pos:end="301:50"><literal type="number" pos:start="301:47" pos:end="301:50">1406</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="305:5" pos:end="309:49"><expr pos:start="305:5" pos:end="309:48"><call pos:start="305:5" pos:end="309:48"><name pos:start="305:5" pos:end="305:19">INIT_VLC_STATIC</name><argument_list pos:start="305:20" pos:end="309:48">(<argument pos:start="305:21" pos:end="305:32"><expr pos:start="305:21" pos:end="305:32"><operator pos:start="305:21" pos:end="305:21">&amp;</operator><name pos:start="305:22" pos:end="305:32"><name pos:start="305:22" pos:end="305:29">coef_vlc</name><index pos:start="305:30" pos:end="305:32">[<expr pos:start="305:31" pos:end="305:31"><literal type="number" pos:start="305:31" pos:end="305:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="305:35" pos:end="305:41"><expr pos:start="305:35" pos:end="305:41"><name pos:start="305:35" pos:end="305:41">VLCBITS</name></expr></argument>, <argument pos:start="305:44" pos:end="305:58"><expr pos:start="305:44" pos:end="305:58"><name pos:start="305:44" pos:end="305:58">HUFF_COEF0_SIZE</name></expr></argument>,

                    <argument pos:start="307:21" pos:end="307:34"><expr pos:start="307:21" pos:end="307:34"><name pos:start="307:21" pos:end="307:34">coef0_huffbits</name></expr></argument>, <argument pos:start="307:37" pos:end="307:37"><expr pos:start="307:37" pos:end="307:37"><literal type="number" pos:start="307:37" pos:end="307:37">1</literal></expr></argument>, <argument pos:start="307:40" pos:end="307:40"><expr pos:start="307:40" pos:end="307:40"><literal type="number" pos:start="307:40" pos:end="307:40">1</literal></expr></argument>,

                    <argument pos:start="309:21" pos:end="309:35"><expr pos:start="309:21" pos:end="309:35"><name pos:start="309:21" pos:end="309:35">coef0_huffcodes</name></expr></argument>, <argument pos:start="309:38" pos:end="309:38"><expr pos:start="309:38" pos:end="309:38"><literal type="number" pos:start="309:38" pos:end="309:38">4</literal></expr></argument>, <argument pos:start="309:41" pos:end="309:41"><expr pos:start="309:41" pos:end="309:41"><literal type="number" pos:start="309:41" pos:end="309:41">4</literal></expr></argument>, <argument pos:start="309:44" pos:end="309:47"><expr pos:start="309:44" pos:end="309:47"><literal type="number" pos:start="309:44" pos:end="309:47">2108</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="313:5" pos:end="317:49"><expr pos:start="313:5" pos:end="317:48"><call pos:start="313:5" pos:end="317:48"><name pos:start="313:5" pos:end="313:19">INIT_VLC_STATIC</name><argument_list pos:start="313:20" pos:end="317:48">(<argument pos:start="313:21" pos:end="313:32"><expr pos:start="313:21" pos:end="313:32"><operator pos:start="313:21" pos:end="313:21">&amp;</operator><name pos:start="313:22" pos:end="313:32"><name pos:start="313:22" pos:end="313:29">coef_vlc</name><index pos:start="313:30" pos:end="313:32">[<expr pos:start="313:31" pos:end="313:31"><literal type="number" pos:start="313:31" pos:end="313:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="313:35" pos:end="313:41"><expr pos:start="313:35" pos:end="313:41"><name pos:start="313:35" pos:end="313:41">VLCBITS</name></expr></argument>, <argument pos:start="313:44" pos:end="313:58"><expr pos:start="313:44" pos:end="313:58"><name pos:start="313:44" pos:end="313:58">HUFF_COEF1_SIZE</name></expr></argument>,

                    <argument pos:start="315:21" pos:end="315:34"><expr pos:start="315:21" pos:end="315:34"><name pos:start="315:21" pos:end="315:34">coef1_huffbits</name></expr></argument>, <argument pos:start="315:37" pos:end="315:37"><expr pos:start="315:37" pos:end="315:37"><literal type="number" pos:start="315:37" pos:end="315:37">1</literal></expr></argument>, <argument pos:start="315:40" pos:end="315:40"><expr pos:start="315:40" pos:end="315:40"><literal type="number" pos:start="315:40" pos:end="315:40">1</literal></expr></argument>,

                    <argument pos:start="317:21" pos:end="317:35"><expr pos:start="317:21" pos:end="317:35"><name pos:start="317:21" pos:end="317:35">coef1_huffcodes</name></expr></argument>, <argument pos:start="317:38" pos:end="317:38"><expr pos:start="317:38" pos:end="317:38"><literal type="number" pos:start="317:38" pos:end="317:38">4</literal></expr></argument>, <argument pos:start="317:41" pos:end="317:41"><expr pos:start="317:41" pos:end="317:41"><literal type="number" pos:start="317:41" pos:end="317:41">4</literal></expr></argument>, <argument pos:start="317:44" pos:end="317:47"><expr pos:start="317:44" pos:end="317:47"><literal type="number" pos:start="317:44" pos:end="317:47">3912</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="321:5" pos:end="325:47"><expr pos:start="321:5" pos:end="325:46"><call pos:start="321:5" pos:end="325:46"><name pos:start="321:5" pos:end="321:19">INIT_VLC_STATIC</name><argument_list pos:start="321:20" pos:end="325:46">(<argument pos:start="321:21" pos:end="321:29"><expr pos:start="321:21" pos:end="321:29"><operator pos:start="321:21" pos:end="321:21">&amp;</operator><name pos:start="321:22" pos:end="321:29">vec4_vlc</name></expr></argument>, <argument pos:start="321:32" pos:end="321:38"><expr pos:start="321:32" pos:end="321:38"><name pos:start="321:32" pos:end="321:38">VLCBITS</name></expr></argument>, <argument pos:start="321:41" pos:end="321:54"><expr pos:start="321:41" pos:end="321:54"><name pos:start="321:41" pos:end="321:54">HUFF_VEC4_SIZE</name></expr></argument>,

                    <argument pos:start="323:21" pos:end="323:33"><expr pos:start="323:21" pos:end="323:33"><name pos:start="323:21" pos:end="323:33">vec4_huffbits</name></expr></argument>, <argument pos:start="323:36" pos:end="323:36"><expr pos:start="323:36" pos:end="323:36"><literal type="number" pos:start="323:36" pos:end="323:36">1</literal></expr></argument>, <argument pos:start="323:39" pos:end="323:39"><expr pos:start="323:39" pos:end="323:39"><literal type="number" pos:start="323:39" pos:end="323:39">1</literal></expr></argument>,

                    <argument pos:start="325:21" pos:end="325:34"><expr pos:start="325:21" pos:end="325:34"><name pos:start="325:21" pos:end="325:34">vec4_huffcodes</name></expr></argument>, <argument pos:start="325:37" pos:end="325:37"><expr pos:start="325:37" pos:end="325:37"><literal type="number" pos:start="325:37" pos:end="325:37">2</literal></expr></argument>, <argument pos:start="325:40" pos:end="325:40"><expr pos:start="325:40" pos:end="325:40"><literal type="number" pos:start="325:40" pos:end="325:40">2</literal></expr></argument>, <argument pos:start="325:43" pos:end="325:45"><expr pos:start="325:43" pos:end="325:45"><literal type="number" pos:start="325:43" pos:end="325:45">604</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="333:47"><expr pos:start="329:5" pos:end="333:46"><call pos:start="329:5" pos:end="333:46"><name pos:start="329:5" pos:end="329:19">INIT_VLC_STATIC</name><argument_list pos:start="329:20" pos:end="333:46">(<argument pos:start="329:21" pos:end="329:29"><expr pos:start="329:21" pos:end="329:29"><operator pos:start="329:21" pos:end="329:21">&amp;</operator><name pos:start="329:22" pos:end="329:29">vec2_vlc</name></expr></argument>, <argument pos:start="329:32" pos:end="329:38"><expr pos:start="329:32" pos:end="329:38"><name pos:start="329:32" pos:end="329:38">VLCBITS</name></expr></argument>, <argument pos:start="329:41" pos:end="329:54"><expr pos:start="329:41" pos:end="329:54"><name pos:start="329:41" pos:end="329:54">HUFF_VEC2_SIZE</name></expr></argument>,

                    <argument pos:start="331:21" pos:end="331:33"><expr pos:start="331:21" pos:end="331:33"><name pos:start="331:21" pos:end="331:33">vec2_huffbits</name></expr></argument>, <argument pos:start="331:36" pos:end="331:36"><expr pos:start="331:36" pos:end="331:36"><literal type="number" pos:start="331:36" pos:end="331:36">1</literal></expr></argument>, <argument pos:start="331:39" pos:end="331:39"><expr pos:start="331:39" pos:end="331:39"><literal type="number" pos:start="331:39" pos:end="331:39">1</literal></expr></argument>,

                    <argument pos:start="333:21" pos:end="333:34"><expr pos:start="333:21" pos:end="333:34"><name pos:start="333:21" pos:end="333:34">vec2_huffcodes</name></expr></argument>, <argument pos:start="333:37" pos:end="333:37"><expr pos:start="333:37" pos:end="333:37"><literal type="number" pos:start="333:37" pos:end="333:37">2</literal></expr></argument>, <argument pos:start="333:40" pos:end="333:40"><expr pos:start="333:40" pos:end="333:40"><literal type="number" pos:start="333:40" pos:end="333:40">2</literal></expr></argument>, <argument pos:start="333:43" pos:end="333:45"><expr pos:start="333:43" pos:end="333:45"><literal type="number" pos:start="333:43" pos:end="333:45">562</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="337:5" pos:end="341:47"><expr pos:start="337:5" pos:end="341:46"><call pos:start="337:5" pos:end="341:46"><name pos:start="337:5" pos:end="337:19">INIT_VLC_STATIC</name><argument_list pos:start="337:20" pos:end="341:46">(<argument pos:start="337:21" pos:end="337:29"><expr pos:start="337:21" pos:end="337:29"><operator pos:start="337:21" pos:end="337:21">&amp;</operator><name pos:start="337:22" pos:end="337:29">vec1_vlc</name></expr></argument>, <argument pos:start="337:32" pos:end="337:38"><expr pos:start="337:32" pos:end="337:38"><name pos:start="337:32" pos:end="337:38">VLCBITS</name></expr></argument>, <argument pos:start="337:41" pos:end="337:54"><expr pos:start="337:41" pos:end="337:54"><name pos:start="337:41" pos:end="337:54">HUFF_VEC1_SIZE</name></expr></argument>,

                    <argument pos:start="339:21" pos:end="339:33"><expr pos:start="339:21" pos:end="339:33"><name pos:start="339:21" pos:end="339:33">vec1_huffbits</name></expr></argument>, <argument pos:start="339:36" pos:end="339:36"><expr pos:start="339:36" pos:end="339:36"><literal type="number" pos:start="339:36" pos:end="339:36">1</literal></expr></argument>, <argument pos:start="339:39" pos:end="339:39"><expr pos:start="339:39" pos:end="339:39"><literal type="number" pos:start="339:39" pos:end="339:39">1</literal></expr></argument>,

                    <argument pos:start="341:21" pos:end="341:34"><expr pos:start="341:21" pos:end="341:34"><name pos:start="341:21" pos:end="341:34">vec1_huffcodes</name></expr></argument>, <argument pos:start="341:37" pos:end="341:37"><expr pos:start="341:37" pos:end="341:37"><literal type="number" pos:start="341:37" pos:end="341:37">2</literal></expr></argument>, <argument pos:start="341:40" pos:end="341:40"><expr pos:start="341:40" pos:end="341:40"><literal type="number" pos:start="341:40" pos:end="341:40">2</literal></expr></argument>, <argument pos:start="341:43" pos:end="341:45"><expr pos:start="341:43" pos:end="341:45"><literal type="number" pos:start="341:43" pos:end="341:45">562</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="345:5" pos:end="347:40">/** calculate number of scale factor bands and their offsets

        for every possible block size */</comment>

    <for pos:start="349:5" pos:end="395:5">for <control pos:start="349:9" pos:end="349:50">(<init pos:start="349:10" pos:end="349:15"><expr pos:start="349:10" pos:end="349:14"><name pos:start="349:10" pos:end="349:10">i</name> <operator pos:start="349:12" pos:end="349:12">=</operator> <literal type="number" pos:start="349:14" pos:end="349:14">0</literal></expr>;</init> <condition pos:start="349:17" pos:end="349:45"><expr pos:start="349:17" pos:end="349:44"><name pos:start="349:17" pos:end="349:17">i</name> <operator pos:start="349:19" pos:end="349:19">&lt;</operator> <name pos:start="349:21" pos:end="349:44">num_possible_block_sizes</name></expr>;</condition> <incr pos:start="349:47" pos:end="349:49"><expr pos:start="349:47" pos:end="349:49"><name pos:start="349:47" pos:end="349:47">i</name><operator pos:start="349:48" pos:end="349:49">++</operator></expr></incr>)</control> <block pos:start="349:52" pos:end="395:5">{<block_content pos:start="351:9" pos:end="393:9">

        <decl_stmt pos:start="351:9" pos:end="351:53"><decl pos:start="351:9" pos:end="351:52"><type pos:start="351:9" pos:end="351:11"><name pos:start="351:9" pos:end="351:11">int</name></type> <name pos:start="351:13" pos:end="351:24">subframe_len</name> <init pos:start="351:26" pos:end="351:52">= <expr pos:start="351:28" pos:end="351:52"><name pos:start="351:28" pos:end="351:47"><name pos:start="351:28" pos:end="351:28">s</name><operator pos:start="351:29" pos:end="351:30">-&gt;</operator><name pos:start="351:31" pos:end="351:47">samples_per_frame</name></name> <operator pos:start="351:49" pos:end="351:50">&gt;&gt;</operator> <name pos:start="351:52" pos:end="351:52">i</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="353:9" pos:end="353:14"><decl pos:start="353:9" pos:end="353:13"><type pos:start="353:9" pos:end="353:11"><name pos:start="353:9" pos:end="353:11">int</name></type> <name pos:start="353:13" pos:end="353:13">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="355:9" pos:end="355:21"><decl pos:start="355:9" pos:end="355:20"><type pos:start="355:9" pos:end="355:11"><name pos:start="355:9" pos:end="355:11">int</name></type> <name pos:start="355:13" pos:end="355:16">band</name> <init pos:start="355:18" pos:end="355:20">= <expr pos:start="355:20" pos:end="355:20"><literal type="number" pos:start="355:20" pos:end="355:20">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="357:9" pos:end="357:35"><decl pos:start="357:9" pos:end="357:34"><type pos:start="357:9" pos:end="357:11"><name pos:start="357:9" pos:end="357:11">int</name></type> <name pos:start="357:13" pos:end="357:16">rate</name> <init pos:start="357:18" pos:end="357:34">= <expr pos:start="357:20" pos:end="357:34"><call pos:start="357:20" pos:end="357:34"><name pos:start="357:20" pos:end="357:27">get_rate</name><argument_list pos:start="357:28" pos:end="357:34">(<argument pos:start="357:29" pos:end="357:33"><expr pos:start="357:29" pos:end="357:33"><name pos:start="357:29" pos:end="357:33">avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="361:9" pos:end="361:33"><expr pos:start="361:9" pos:end="361:32"><name pos:start="361:9" pos:end="361:28"><name pos:start="361:9" pos:end="361:9">s</name><operator pos:start="361:10" pos:end="361:11">-&gt;</operator><name pos:start="361:12" pos:end="361:22">sfb_offsets</name><index pos:start="361:23" pos:end="361:25">[<expr pos:start="361:24" pos:end="361:24"><name pos:start="361:24" pos:end="361:24">i</name></expr>]</index><index pos:start="361:26" pos:end="361:28">[<expr pos:start="361:27" pos:end="361:27"><literal type="number" pos:start="361:27" pos:end="361:27">0</literal></expr>]</index></name> <operator pos:start="361:30" pos:end="361:30">=</operator> <literal type="number" pos:start="361:32" pos:end="361:32">0</literal></expr>;</expr_stmt>



        <for pos:start="365:9" pos:end="381:9">for <control pos:start="365:13" pos:end="365:87">(<init pos:start="365:14" pos:end="365:19"><expr pos:start="365:14" pos:end="365:18"><name pos:start="365:14" pos:end="365:14">x</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <literal type="number" pos:start="365:18" pos:end="365:18">0</literal></expr>;</init> <condition pos:start="365:21" pos:end="365:82"><expr pos:start="365:21" pos:end="365:81"><name pos:start="365:21" pos:end="365:21">x</name> <operator pos:start="365:23" pos:end="365:23">&lt;</operator> <name pos:start="365:25" pos:end="365:33">MAX_BANDS</name><operator pos:start="365:34" pos:end="365:34">-</operator><literal type="number" pos:start="365:35" pos:end="365:35">1</literal> <operator pos:start="365:37" pos:end="365:38">&amp;&amp;</operator> <name pos:start="365:40" pos:end="365:66"><name pos:start="365:40" pos:end="365:40">s</name><operator pos:start="365:41" pos:end="365:42">-&gt;</operator><name pos:start="365:43" pos:end="365:53">sfb_offsets</name><index pos:start="365:54" pos:end="365:56">[<expr pos:start="365:55" pos:end="365:55"><name pos:start="365:55" pos:end="365:55">i</name></expr>]</index><index pos:start="365:57" pos:end="365:66">[<expr pos:start="365:58" pos:end="365:65"><name pos:start="365:58" pos:end="365:61">band</name> <operator pos:start="365:63" pos:end="365:63">-</operator> <literal type="number" pos:start="365:65" pos:end="365:65">1</literal></expr>]</index></name> <operator pos:start="365:68" pos:end="365:68">&lt;</operator> <name pos:start="365:70" pos:end="365:81">subframe_len</name></expr>;</condition> <incr pos:start="365:84" pos:end="365:86"><expr pos:start="365:84" pos:end="365:86"><name pos:start="365:84" pos:end="365:84">x</name><operator pos:start="365:85" pos:end="365:86">++</operator></expr></incr>)</control> <block pos:start="365:89" pos:end="381:9">{<block_content pos:start="367:13" pos:end="379:22">

            <decl_stmt pos:start="367:13" pos:end="367:74"><decl pos:start="367:13" pos:end="367:73"><type pos:start="367:13" pos:end="367:15"><name pos:start="367:13" pos:end="367:15">int</name></type> <name pos:start="367:17" pos:end="367:22">offset</name> <init pos:start="367:24" pos:end="367:73">= <expr pos:start="367:26" pos:end="367:73"><operator pos:start="367:26" pos:end="367:26">(</operator><name pos:start="367:27" pos:end="367:38">subframe_len</name> <operator pos:start="367:40" pos:end="367:40">*</operator> <literal type="number" pos:start="367:42" pos:end="367:42">2</literal> <operator pos:start="367:44" pos:end="367:44">*</operator> <name pos:start="367:46" pos:end="367:61"><name pos:start="367:46" pos:end="367:58">critical_freq</name><index pos:start="367:59" pos:end="367:61">[<expr pos:start="367:60" pos:end="367:60"><name pos:start="367:60" pos:end="367:60">x</name></expr>]</index></name><operator pos:start="367:62" pos:end="367:62">)</operator> <operator pos:start="367:64" pos:end="367:64">/</operator> <name pos:start="367:66" pos:end="367:69">rate</name> <operator pos:start="367:71" pos:end="367:71">+</operator> <literal type="number" pos:start="367:73" pos:end="367:73">2</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:25"><expr pos:start="369:13" pos:end="369:24"><name pos:start="369:13" pos:end="369:18">offset</name> <operator pos:start="369:20" pos:end="369:21">&amp;=</operator> <operator pos:start="369:23" pos:end="369:23">~</operator><literal type="number" pos:start="369:24" pos:end="369:24">3</literal></expr>;</expr_stmt>

            <if_stmt pos:start="371:13" pos:end="373:51"><if pos:start="371:13" pos:end="373:51">if <condition pos:start="371:16" pos:end="371:53">(<expr pos:start="371:17" pos:end="371:52"><name pos:start="371:17" pos:end="371:22">offset</name> <operator pos:start="371:24" pos:end="371:24">&gt;</operator> <name pos:start="371:26" pos:end="371:52"><name pos:start="371:26" pos:end="371:26">s</name><operator pos:start="371:27" pos:end="371:28">-&gt;</operator><name pos:start="371:29" pos:end="371:39">sfb_offsets</name><index pos:start="371:40" pos:end="371:42">[<expr pos:start="371:41" pos:end="371:41"><name pos:start="371:41" pos:end="371:41">i</name></expr>]</index><index pos:start="371:43" pos:end="371:52">[<expr pos:start="371:44" pos:end="371:51"><name pos:start="371:44" pos:end="371:47">band</name> <operator pos:start="371:49" pos:end="371:49">-</operator> <literal type="number" pos:start="371:51" pos:end="371:51">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="373:17" pos:end="373:51"><block_content pos:start="373:17" pos:end="373:51">

                <expr_stmt pos:start="373:17" pos:end="373:51"><expr pos:start="373:17" pos:end="373:50"><name pos:start="373:17" pos:end="373:41"><name pos:start="373:17" pos:end="373:17">s</name><operator pos:start="373:18" pos:end="373:19">-&gt;</operator><name pos:start="373:20" pos:end="373:30">sfb_offsets</name><index pos:start="373:31" pos:end="373:33">[<expr pos:start="373:32" pos:end="373:32"><name pos:start="373:32" pos:end="373:32">i</name></expr>]</index><index pos:start="373:34" pos:end="373:41">[<expr pos:start="373:35" pos:end="373:40"><name pos:start="373:35" pos:end="373:38">band</name><operator pos:start="373:39" pos:end="373:40">++</operator></expr>]</index></name> <operator pos:start="373:43" pos:end="373:43">=</operator> <name pos:start="373:45" pos:end="373:50">offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="377:13" pos:end="379:22"><if pos:start="377:13" pos:end="379:22">if <condition pos:start="377:16" pos:end="377:39">(<expr pos:start="377:17" pos:end="377:38"><name pos:start="377:17" pos:end="377:22">offset</name> <operator pos:start="377:24" pos:end="377:25">&gt;=</operator> <name pos:start="377:27" pos:end="377:38">subframe_len</name></expr>)</condition><block type="pseudo" pos:start="379:17" pos:end="379:22"><block_content pos:start="379:17" pos:end="379:22">

                <break pos:start="379:17" pos:end="379:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="383:9" pos:end="383:51"><expr pos:start="383:9" pos:end="383:50"><name pos:start="383:9" pos:end="383:35"><name pos:start="383:9" pos:end="383:9">s</name><operator pos:start="383:10" pos:end="383:11">-&gt;</operator><name pos:start="383:12" pos:end="383:22">sfb_offsets</name><index pos:start="383:23" pos:end="383:25">[<expr pos:start="383:24" pos:end="383:24"><name pos:start="383:24" pos:end="383:24">i</name></expr>]</index><index pos:start="383:26" pos:end="383:35">[<expr pos:start="383:27" pos:end="383:34"><name pos:start="383:27" pos:end="383:30">band</name> <operator pos:start="383:32" pos:end="383:32">-</operator> <literal type="number" pos:start="383:34" pos:end="383:34">1</literal></expr>]</index></name> <operator pos:start="383:37" pos:end="383:37">=</operator> <name pos:start="383:39" pos:end="383:50">subframe_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:47"><expr pos:start="385:9" pos:end="385:46"><name pos:start="385:9" pos:end="385:21"><name pos:start="385:9" pos:end="385:9">s</name><operator pos:start="385:10" pos:end="385:11">-&gt;</operator><name pos:start="385:12" pos:end="385:18">num_sfb</name><index pos:start="385:19" pos:end="385:21">[<expr pos:start="385:20" pos:end="385:20"><name pos:start="385:20" pos:end="385:20">i</name></expr>]</index></name>               <operator pos:start="385:37" pos:end="385:37">=</operator> <name pos:start="385:39" pos:end="385:42">band</name> <operator pos:start="385:44" pos:end="385:44">-</operator> <literal type="number" pos:start="385:46" pos:end="385:46">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="387:9" pos:end="393:9"><if pos:start="387:9" pos:end="393:9">if <condition pos:start="387:12" pos:end="387:31">(<expr pos:start="387:13" pos:end="387:30"><name pos:start="387:13" pos:end="387:25"><name pos:start="387:13" pos:end="387:13">s</name><operator pos:start="387:14" pos:end="387:15">-&gt;</operator><name pos:start="387:16" pos:end="387:22">num_sfb</name><index pos:start="387:23" pos:end="387:25">[<expr pos:start="387:24" pos:end="387:24"><name pos:start="387:24" pos:end="387:24">i</name></expr>]</index></name> <operator pos:start="387:27" pos:end="387:28">&lt;=</operator> <literal type="number" pos:start="387:30" pos:end="387:30">0</literal></expr>)</condition> <block pos:start="387:33" pos:end="393:9">{<block_content pos:start="389:13" pos:end="391:39">

            <expr_stmt pos:start="389:13" pos:end="389:61"><expr pos:start="389:13" pos:end="389:60"><call pos:start="389:13" pos:end="389:60"><name pos:start="389:13" pos:end="389:18">av_log</name><argument_list pos:start="389:19" pos:end="389:60">(<argument pos:start="389:20" pos:end="389:24"><expr pos:start="389:20" pos:end="389:24"><name pos:start="389:20" pos:end="389:24">avctx</name></expr></argument>, <argument pos:start="389:27" pos:end="389:38"><expr pos:start="389:27" pos:end="389:38"><name pos:start="389:27" pos:end="389:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="389:41" pos:end="389:59"><expr pos:start="389:41" pos:end="389:59"><literal type="string" pos:start="389:41" pos:end="389:59">"num_sfb invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="391:13" pos:end="391:39">return <expr pos:start="391:20" pos:end="391:38"><name pos:start="391:20" pos:end="391:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>





    <comment type="block" format="doxygen" pos:start="401:5" pos:end="407:7">/** Scale factors can be shared between blocks of different size

        as every block has a different scale factor band layout.

        The matrix sf_offsets is needed to find the correct scale factor.

     */</comment>



    <for pos:start="411:5" pos:end="441:5">for <control pos:start="411:9" pos:end="411:50">(<init pos:start="411:10" pos:end="411:15"><expr pos:start="411:10" pos:end="411:14"><name pos:start="411:10" pos:end="411:10">i</name> <operator pos:start="411:12" pos:end="411:12">=</operator> <literal type="number" pos:start="411:14" pos:end="411:14">0</literal></expr>;</init> <condition pos:start="411:17" pos:end="411:45"><expr pos:start="411:17" pos:end="411:44"><name pos:start="411:17" pos:end="411:17">i</name> <operator pos:start="411:19" pos:end="411:19">&lt;</operator> <name pos:start="411:21" pos:end="411:44">num_possible_block_sizes</name></expr>;</condition> <incr pos:start="411:47" pos:end="411:49"><expr pos:start="411:47" pos:end="411:49"><name pos:start="411:47" pos:end="411:47">i</name><operator pos:start="411:48" pos:end="411:49">++</operator></expr></incr>)</control> <block pos:start="411:52" pos:end="441:5">{<block_content pos:start="413:9" pos:end="439:9">

        <decl_stmt pos:start="413:9" pos:end="413:14"><decl pos:start="413:9" pos:end="413:13"><type pos:start="413:9" pos:end="413:11"><name pos:start="413:9" pos:end="413:11">int</name></type> <name pos:start="413:13" pos:end="413:13">b</name></decl>;</decl_stmt>

        <for pos:start="415:9" pos:end="439:9">for <control pos:start="415:13" pos:end="415:43">(<init pos:start="415:14" pos:end="415:19"><expr pos:start="415:14" pos:end="415:18"><name pos:start="415:14" pos:end="415:14">b</name> <operator pos:start="415:16" pos:end="415:16">=</operator> <literal type="number" pos:start="415:18" pos:end="415:18">0</literal></expr>;</init> <condition pos:start="415:21" pos:end="415:38"><expr pos:start="415:21" pos:end="415:37"><name pos:start="415:21" pos:end="415:21">b</name> <operator pos:start="415:23" pos:end="415:23">&lt;</operator> <name pos:start="415:25" pos:end="415:37"><name pos:start="415:25" pos:end="415:25">s</name><operator pos:start="415:26" pos:end="415:27">-&gt;</operator><name pos:start="415:28" pos:end="415:34">num_sfb</name><index pos:start="415:35" pos:end="415:37">[<expr pos:start="415:36" pos:end="415:36"><name pos:start="415:36" pos:end="415:36">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="415:40" pos:end="415:42"><expr pos:start="415:40" pos:end="415:42"><name pos:start="415:40" pos:end="415:40">b</name><operator pos:start="415:41" pos:end="415:42">++</operator></expr></incr>)</control> <block pos:start="415:45" pos:end="439:9">{<block_content pos:start="417:13" pos:end="437:13">

            <decl_stmt pos:start="417:13" pos:end="417:18"><decl pos:start="417:13" pos:end="417:17"><type pos:start="417:13" pos:end="417:15"><name pos:start="417:13" pos:end="417:15">int</name></type> <name pos:start="417:17" pos:end="417:17">x</name></decl>;</decl_stmt>

            <decl_stmt pos:start="419:13" pos:end="421:70"><decl pos:start="419:13" pos:end="421:69"><type pos:start="419:13" pos:end="419:15"><name pos:start="419:13" pos:end="419:15">int</name></type> <name pos:start="419:17" pos:end="419:22">offset</name> <init pos:start="419:24" pos:end="421:69">= <expr pos:start="419:26" pos:end="421:69"><operator pos:start="419:26" pos:end="419:26">(</operator><operator pos:start="419:27" pos:end="419:27">(</operator><name pos:start="419:28" pos:end="419:47"><name pos:start="419:28" pos:end="419:28">s</name><operator pos:start="419:29" pos:end="419:30">-&gt;</operator><name pos:start="419:31" pos:end="419:41">sfb_offsets</name><index pos:start="419:42" pos:end="419:44">[<expr pos:start="419:43" pos:end="419:43"><name pos:start="419:43" pos:end="419:43">i</name></expr>]</index><index pos:start="419:45" pos:end="419:47">[<expr pos:start="419:46" pos:end="419:46"><name pos:start="419:46" pos:end="419:46">b</name></expr>]</index></name>

                           <operator pos:start="421:28" pos:end="421:28">+</operator> <name pos:start="421:30" pos:end="421:53"><name pos:start="421:30" pos:end="421:30">s</name><operator pos:start="421:31" pos:end="421:32">-&gt;</operator><name pos:start="421:33" pos:end="421:43">sfb_offsets</name><index pos:start="421:44" pos:end="421:46">[<expr pos:start="421:45" pos:end="421:45"><name pos:start="421:45" pos:end="421:45">i</name></expr>]</index><index pos:start="421:47" pos:end="421:53">[<expr pos:start="421:48" pos:end="421:52"><name pos:start="421:48" pos:end="421:48">b</name> <operator pos:start="421:50" pos:end="421:50">+</operator> <literal type="number" pos:start="421:52" pos:end="421:52">1</literal></expr>]</index></name> <operator pos:start="421:55" pos:end="421:55">-</operator> <literal type="number" pos:start="421:57" pos:end="421:57">1</literal><operator pos:start="421:58" pos:end="421:58">)</operator> <operator pos:start="421:60" pos:end="421:61">&lt;&lt;</operator> <name pos:start="421:63" pos:end="421:63">i</name><operator pos:start="421:64" pos:end="421:64">)</operator> <operator pos:start="421:66" pos:end="421:67">&gt;&gt;</operator> <literal type="number" pos:start="421:69" pos:end="421:69">1</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="423:13" pos:end="437:13">for <control pos:start="423:17" pos:end="423:58">(<init pos:start="423:18" pos:end="423:23"><expr pos:start="423:18" pos:end="423:22"><name pos:start="423:18" pos:end="423:18">x</name> <operator pos:start="423:20" pos:end="423:20">=</operator> <literal type="number" pos:start="423:22" pos:end="423:22">0</literal></expr>;</init> <condition pos:start="423:25" pos:end="423:53"><expr pos:start="423:25" pos:end="423:52"><name pos:start="423:25" pos:end="423:25">x</name> <operator pos:start="423:27" pos:end="423:27">&lt;</operator> <name pos:start="423:29" pos:end="423:52">num_possible_block_sizes</name></expr>;</condition> <incr pos:start="423:55" pos:end="423:57"><expr pos:start="423:55" pos:end="423:57"><name pos:start="423:55" pos:end="423:55">x</name><operator pos:start="423:56" pos:end="423:57">++</operator></expr></incr>)</control> <block pos:start="423:60" pos:end="437:13">{<block_content pos:start="425:17" pos:end="435:43">

                <decl_stmt pos:start="425:17" pos:end="425:26"><decl pos:start="425:17" pos:end="425:25"><type pos:start="425:17" pos:end="425:19"><name pos:start="425:17" pos:end="425:19">int</name></type> <name pos:start="425:21" pos:end="425:21">v</name> <init pos:start="425:23" pos:end="425:25">= <expr pos:start="425:25" pos:end="425:25"><literal type="number" pos:start="425:25" pos:end="425:25">0</literal></expr></init></decl>;</decl_stmt>

                <while pos:start="427:17" pos:end="433:17">while <condition pos:start="427:23" pos:end="427:62">(<expr pos:start="427:24" pos:end="427:61"><name pos:start="427:24" pos:end="427:47"><name pos:start="427:24" pos:end="427:24">s</name><operator pos:start="427:25" pos:end="427:26">-&gt;</operator><name pos:start="427:27" pos:end="427:37">sfb_offsets</name><index pos:start="427:38" pos:end="427:40">[<expr pos:start="427:39" pos:end="427:39"><name pos:start="427:39" pos:end="427:39">x</name></expr>]</index><index pos:start="427:41" pos:end="427:47">[<expr pos:start="427:42" pos:end="427:46"><name pos:start="427:42" pos:end="427:42">v</name> <operator pos:start="427:44" pos:end="427:44">+</operator> <literal type="number" pos:start="427:46" pos:end="427:46">1</literal></expr>]</index></name> <operator pos:start="427:49" pos:end="427:50">&lt;&lt;</operator> <name pos:start="427:52" pos:end="427:52">x</name> <operator pos:start="427:54" pos:end="427:54">&lt;</operator> <name pos:start="427:56" pos:end="427:61">offset</name></expr>)</condition> <block pos:start="427:64" pos:end="433:17">{<block_content pos:start="429:21" pos:end="431:46">

                    <expr_stmt pos:start="429:21" pos:end="429:24"><expr pos:start="429:21" pos:end="429:23"><name pos:start="429:21" pos:end="429:21">v</name><operator pos:start="429:22" pos:end="429:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="431:21" pos:end="431:46"><expr pos:start="431:21" pos:end="431:45"><call pos:start="431:21" pos:end="431:45"><name pos:start="431:21" pos:end="431:30">av_assert0</name><argument_list pos:start="431:31" pos:end="431:45">(<argument pos:start="431:32" pos:end="431:44"><expr pos:start="431:32" pos:end="431:44"><name pos:start="431:32" pos:end="431:32">v</name> <operator pos:start="431:34" pos:end="431:34">&lt;</operator> <name pos:start="431:36" pos:end="431:44">MAX_BANDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="435:17" pos:end="435:43"><expr pos:start="435:17" pos:end="435:42"><name pos:start="435:17" pos:end="435:38"><name pos:start="435:17" pos:end="435:17">s</name><operator pos:start="435:18" pos:end="435:19">-&gt;</operator><name pos:start="435:20" pos:end="435:29">sf_offsets</name><index pos:start="435:30" pos:end="435:32">[<expr pos:start="435:31" pos:end="435:31"><name pos:start="435:31" pos:end="435:31">i</name></expr>]</index><index pos:start="435:33" pos:end="435:35">[<expr pos:start="435:34" pos:end="435:34"><name pos:start="435:34" pos:end="435:34">x</name></expr>]</index><index pos:start="435:36" pos:end="435:38">[<expr pos:start="435:37" pos:end="435:37"><name pos:start="435:37" pos:end="435:37">b</name></expr>]</index></name> <operator pos:start="435:40" pos:end="435:40">=</operator> <name pos:start="435:42" pos:end="435:42">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="445:5" pos:end="445:51">/** init MDCT, FIXME: only init needed sizes */</comment>

    <for pos:start="447:5" pos:end="453:56">for <control pos:start="447:9" pos:end="447:44">(<init pos:start="447:10" pos:end="447:15"><expr pos:start="447:10" pos:end="447:14"><name pos:start="447:10" pos:end="447:10">i</name> <operator pos:start="447:12" pos:end="447:12">=</operator> <literal type="number" pos:start="447:14" pos:end="447:14">0</literal></expr>;</init> <condition pos:start="447:17" pos:end="447:39"><expr pos:start="447:17" pos:end="447:38"><name pos:start="447:17" pos:end="447:17">i</name> <operator pos:start="447:19" pos:end="447:19">&lt;</operator> <name pos:start="447:21" pos:end="447:38">WMAPRO_BLOCK_SIZES</name></expr>;</condition> <incr pos:start="447:41" pos:end="447:43"><expr pos:start="447:41" pos:end="447:43"><name pos:start="447:41" pos:end="447:41">i</name><operator pos:start="447:42" pos:end="447:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="449:9" pos:end="453:56"><block_content pos:start="449:9" pos:end="453:56">

        <expr_stmt pos:start="449:9" pos:end="453:56"><expr pos:start="449:9" pos:end="453:55"><call pos:start="449:9" pos:end="453:55"><name pos:start="449:9" pos:end="449:20">ff_mdct_init</name><argument_list pos:start="449:21" pos:end="453:55">(<argument pos:start="449:22" pos:end="449:36"><expr pos:start="449:22" pos:end="449:36"><operator pos:start="449:22" pos:end="449:22">&amp;</operator><name pos:start="449:23" pos:end="449:36"><name pos:start="449:23" pos:end="449:23">s</name><operator pos:start="449:24" pos:end="449:25">-&gt;</operator><name pos:start="449:26" pos:end="449:33">mdct_ctx</name><index pos:start="449:34" pos:end="449:36">[<expr pos:start="449:35" pos:end="449:35"><name pos:start="449:35" pos:end="449:35">i</name></expr>]</index></name></expr></argument>, <argument pos:start="449:39" pos:end="449:63"><expr pos:start="449:39" pos:end="449:63"><name pos:start="449:39" pos:end="449:59">WMAPRO_BLOCK_MIN_BITS</name><operator pos:start="449:60" pos:end="449:60">+</operator><literal type="number" pos:start="449:61" pos:end="449:62">1</literal><operator pos:start="449:62" pos:end="449:62">+</operator><name pos:start="449:63" pos:end="449:63">i</name></expr></argument>, <argument pos:start="449:66" pos:end="449:66"><expr pos:start="449:66" pos:end="449:66"><literal type="number" pos:start="449:66" pos:end="449:66">1</literal></expr></argument>,

                     <argument pos:start="451:22" pos:end="453:54"><expr pos:start="451:22" pos:end="453:54"><literal type="number" pos:start="451:22" pos:end="451:24">1.0</literal> <operator pos:start="451:26" pos:end="451:26">/</operator> <operator pos:start="451:28" pos:end="451:28">(</operator><literal type="number" pos:start="451:29" pos:end="451:29">1</literal> <operator pos:start="451:31" pos:end="451:32">&lt;&lt;</operator> <operator pos:start="451:34" pos:end="451:34">(</operator><name pos:start="451:35" pos:end="451:55">WMAPRO_BLOCK_MIN_BITS</name> <operator pos:start="451:57" pos:end="451:57">+</operator> <name pos:start="451:59" pos:end="451:59">i</name> <operator pos:start="451:61" pos:end="451:61">-</operator> <literal type="number" pos:start="451:63" pos:end="451:63">1</literal><operator pos:start="451:64" pos:end="451:64">)</operator><operator pos:start="451:65" pos:end="451:65">)</operator>

                     <operator pos:start="453:22" pos:end="453:22">/</operator> <operator pos:start="453:24" pos:end="453:24">(</operator><literal type="number" pos:start="453:25" pos:end="453:25">1</literal> <operator pos:start="453:27" pos:end="453:28">&lt;&lt;</operator> <operator pos:start="453:30" pos:end="453:30">(</operator><name pos:start="453:31" pos:end="453:48"><name pos:start="453:31" pos:end="453:31">s</name><operator pos:start="453:32" pos:end="453:33">-&gt;</operator><name pos:start="453:34" pos:end="453:48">bits_per_sample</name></name> <operator pos:start="453:50" pos:end="453:50">-</operator> <literal type="number" pos:start="453:52" pos:end="453:52">1</literal><operator pos:start="453:53" pos:end="453:53">)</operator><operator pos:start="453:54" pos:end="453:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" format="doxygen" pos:start="457:5" pos:end="457:48">/** init MDCT windows: simple sine window */</comment>

    <for pos:start="459:5" pos:end="467:5">for <control pos:start="459:9" pos:end="459:44">(<init pos:start="459:10" pos:end="459:15"><expr pos:start="459:10" pos:end="459:14"><name pos:start="459:10" pos:end="459:10">i</name> <operator pos:start="459:12" pos:end="459:12">=</operator> <literal type="number" pos:start="459:14" pos:end="459:14">0</literal></expr>;</init> <condition pos:start="459:17" pos:end="459:39"><expr pos:start="459:17" pos:end="459:38"><name pos:start="459:17" pos:end="459:17">i</name> <operator pos:start="459:19" pos:end="459:19">&lt;</operator> <name pos:start="459:21" pos:end="459:38">WMAPRO_BLOCK_SIZES</name></expr>;</condition> <incr pos:start="459:41" pos:end="459:43"><expr pos:start="459:41" pos:end="459:43"><name pos:start="459:41" pos:end="459:41">i</name><operator pos:start="459:42" pos:end="459:43">++</operator></expr></incr>)</control> <block pos:start="459:46" pos:end="467:5">{<block_content pos:start="461:9" pos:end="465:74">

        <decl_stmt pos:start="461:9" pos:end="461:54"><decl pos:start="461:9" pos:end="461:53"><type pos:start="461:9" pos:end="461:17"><specifier pos:start="461:9" pos:end="461:13">const</specifier> <name pos:start="461:15" pos:end="461:17">int</name></type> <name pos:start="461:19" pos:end="461:25">win_idx</name> <init pos:start="461:27" pos:end="461:53">= <expr pos:start="461:29" pos:end="461:53"><name pos:start="461:29" pos:end="461:49">WMAPRO_BLOCK_MAX_BITS</name> <operator pos:start="461:51" pos:end="461:51">-</operator> <name pos:start="461:53" pos:end="461:53">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="463:9" pos:end="463:41"><expr pos:start="463:9" pos:end="463:40"><call pos:start="463:9" pos:end="463:40"><name pos:start="463:9" pos:end="463:31">ff_init_ff_sine_windows</name><argument_list pos:start="463:32" pos:end="463:40">(<argument pos:start="463:33" pos:end="463:39"><expr pos:start="463:33" pos:end="463:39"><name pos:start="463:33" pos:end="463:39">win_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:74"><expr pos:start="465:9" pos:end="465:73"><name pos:start="465:9" pos:end="465:46"><name pos:start="465:9" pos:end="465:9">s</name><operator pos:start="465:10" pos:end="465:11">-&gt;</operator><name pos:start="465:12" pos:end="465:18">windows</name><index pos:start="465:19" pos:end="465:46">[<expr pos:start="465:20" pos:end="465:45"><name pos:start="465:20" pos:end="465:37">WMAPRO_BLOCK_SIZES</name> <operator pos:start="465:39" pos:end="465:39">-</operator> <name pos:start="465:41" pos:end="465:41">i</name> <operator pos:start="465:43" pos:end="465:43">-</operator> <literal type="number" pos:start="465:45" pos:end="465:45">1</literal></expr>]</index></name> <operator pos:start="465:48" pos:end="465:48">=</operator> <name pos:start="465:50" pos:end="465:73"><name pos:start="465:50" pos:end="465:64">ff_sine_windows</name><index pos:start="465:65" pos:end="465:73">[<expr pos:start="465:66" pos:end="465:72"><name pos:start="465:66" pos:end="465:72">win_idx</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="471:5" pos:end="471:44">/** calculate subwoofer cutoff values */</comment>

    <for pos:start="473:5" pos:end="483:5">for <control pos:start="473:9" pos:end="473:50">(<init pos:start="473:10" pos:end="473:15"><expr pos:start="473:10" pos:end="473:14"><name pos:start="473:10" pos:end="473:10">i</name> <operator pos:start="473:12" pos:end="473:12">=</operator> <literal type="number" pos:start="473:14" pos:end="473:14">0</literal></expr>;</init> <condition pos:start="473:17" pos:end="473:45"><expr pos:start="473:17" pos:end="473:44"><name pos:start="473:17" pos:end="473:17">i</name> <operator pos:start="473:19" pos:end="473:19">&lt;</operator> <name pos:start="473:21" pos:end="473:44">num_possible_block_sizes</name></expr>;</condition> <incr pos:start="473:47" pos:end="473:49"><expr pos:start="473:47" pos:end="473:49"><name pos:start="473:47" pos:end="473:47">i</name><operator pos:start="473:48" pos:end="473:49">++</operator></expr></incr>)</control> <block pos:start="473:52" pos:end="483:5">{<block_content pos:start="475:9" pos:end="481:65">

        <decl_stmt pos:start="475:9" pos:end="475:51"><decl pos:start="475:9" pos:end="475:50"><type pos:start="475:9" pos:end="475:11"><name pos:start="475:9" pos:end="475:11">int</name></type> <name pos:start="475:13" pos:end="475:22">block_size</name> <init pos:start="475:24" pos:end="475:50">= <expr pos:start="475:26" pos:end="475:50"><name pos:start="475:26" pos:end="475:45"><name pos:start="475:26" pos:end="475:26">s</name><operator pos:start="475:27" pos:end="475:28">-&gt;</operator><name pos:start="475:29" pos:end="475:45">samples_per_frame</name></name> <operator pos:start="475:47" pos:end="475:48">&gt;&gt;</operator> <name pos:start="475:50" pos:end="475:50">i</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="477:9" pos:end="479:45"><decl pos:start="477:9" pos:end="479:44"><type pos:start="477:9" pos:end="477:11"><name pos:start="477:9" pos:end="477:11">int</name></type> <name pos:start="477:13" pos:end="477:18">cutoff</name> <init pos:start="477:20" pos:end="479:44">= <expr pos:start="477:22" pos:end="479:44"><operator pos:start="477:22" pos:end="477:22">(</operator><literal type="number" pos:start="477:23" pos:end="477:25">440</literal><operator pos:start="477:26" pos:end="477:26">*</operator><name pos:start="477:27" pos:end="477:36">block_size</name> <operator pos:start="477:38" pos:end="477:38">+</operator> <literal type="number" pos:start="477:40" pos:end="477:40">3</literal> <operator pos:start="477:42" pos:end="477:42">*</operator> <operator pos:start="477:44" pos:end="477:44">(</operator><name pos:start="477:45" pos:end="477:65"><name pos:start="477:45" pos:end="477:45">s</name><operator pos:start="477:46" pos:end="477:47">-&gt;</operator><name pos:start="477:48" pos:end="477:52">avctx</name><operator pos:start="477:53" pos:end="477:54">-&gt;</operator><name pos:start="477:55" pos:end="477:65">sample_rate</name></name> <operator pos:start="477:67" pos:end="477:68">&gt;&gt;</operator> <literal type="number" pos:start="477:70" pos:end="477:70">1</literal><operator pos:start="477:71" pos:end="477:71">)</operator> <operator pos:start="477:73" pos:end="477:73">-</operator> <literal type="number" pos:start="477:75" pos:end="477:75">1</literal><operator pos:start="477:76" pos:end="477:76">)</operator>

                     <operator pos:start="479:22" pos:end="479:22">/</operator> <name pos:start="479:24" pos:end="479:44"><name pos:start="479:24" pos:end="479:24">s</name><operator pos:start="479:25" pos:end="479:26">-&gt;</operator><name pos:start="479:27" pos:end="479:31">avctx</name><operator pos:start="479:32" pos:end="479:33">-&gt;</operator><name pos:start="479:34" pos:end="479:44">sample_rate</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="481:9" pos:end="481:65"><expr pos:start="481:9" pos:end="481:64"><name pos:start="481:9" pos:end="481:31"><name pos:start="481:9" pos:end="481:9">s</name><operator pos:start="481:10" pos:end="481:11">-&gt;</operator><name pos:start="481:12" pos:end="481:28">subwoofer_cutoffs</name><index pos:start="481:29" pos:end="481:31">[<expr pos:start="481:30" pos:end="481:30"><name pos:start="481:30" pos:end="481:30">i</name></expr>]</index></name> <operator pos:start="481:33" pos:end="481:33">=</operator> <call pos:start="481:35" pos:end="481:64"><name pos:start="481:35" pos:end="481:41">av_clip</name><argument_list pos:start="481:42" pos:end="481:64">(<argument pos:start="481:43" pos:end="481:48"><expr pos:start="481:43" pos:end="481:48"><name pos:start="481:43" pos:end="481:48">cutoff</name></expr></argument>, <argument pos:start="481:51" pos:end="481:51"><expr pos:start="481:51" pos:end="481:51"><literal type="number" pos:start="481:51" pos:end="481:51">4</literal></expr></argument>, <argument pos:start="481:54" pos:end="481:63"><expr pos:start="481:54" pos:end="481:63"><name pos:start="481:54" pos:end="481:63">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" format="doxygen" pos:start="487:5" pos:end="487:61">/** calculate sine values for the decorrelation matrix */</comment>

    <for pos:start="489:5" pos:end="491:38">for <control pos:start="489:9" pos:end="489:28">(<init pos:start="489:10" pos:end="489:15"><expr pos:start="489:10" pos:end="489:14"><name pos:start="489:10" pos:end="489:10">i</name> <operator pos:start="489:12" pos:end="489:12">=</operator> <literal type="number" pos:start="489:14" pos:end="489:14">0</literal></expr>;</init> <condition pos:start="489:17" pos:end="489:23"><expr pos:start="489:17" pos:end="489:22"><name pos:start="489:17" pos:end="489:17">i</name> <operator pos:start="489:19" pos:end="489:19">&lt;</operator> <literal type="number" pos:start="489:21" pos:end="489:22">33</literal></expr>;</condition> <incr pos:start="489:25" pos:end="489:27"><expr pos:start="489:25" pos:end="489:27"><name pos:start="489:25" pos:end="489:25">i</name><operator pos:start="489:26" pos:end="489:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="491:9" pos:end="491:38"><block_content pos:start="491:9" pos:end="491:38">

        <expr_stmt pos:start="491:9" pos:end="491:38"><expr pos:start="491:9" pos:end="491:37"><name pos:start="491:9" pos:end="491:16"><name pos:start="491:9" pos:end="491:13">sin64</name><index pos:start="491:14" pos:end="491:16">[<expr pos:start="491:15" pos:end="491:15"><name pos:start="491:15" pos:end="491:15">i</name></expr>]</index></name> <operator pos:start="491:18" pos:end="491:18">=</operator> <call pos:start="491:20" pos:end="491:37"><name pos:start="491:20" pos:end="491:22">sin</name><argument_list pos:start="491:23" pos:end="491:37">(<argument pos:start="491:24" pos:end="491:36"><expr pos:start="491:24" pos:end="491:36"><name pos:start="491:24" pos:end="491:24">i</name><operator pos:start="491:25" pos:end="491:25">*</operator><name pos:start="491:26" pos:end="491:29">M_PI</name> <operator pos:start="491:31" pos:end="491:31">/</operator> <literal type="number" pos:start="491:33" pos:end="491:36">64.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="495:5" pos:end="497:24"><if pos:start="495:5" pos:end="497:24">if <condition pos:start="495:8" pos:end="495:42">(<expr pos:start="495:9" pos:end="495:41"><name pos:start="495:9" pos:end="495:20"><name pos:start="495:9" pos:end="495:13">avctx</name><operator pos:start="495:14" pos:end="495:15">-&gt;</operator><name pos:start="495:16" pos:end="495:20">debug</name></name> <operator pos:start="495:22" pos:end="495:22">&amp;</operator> <name pos:start="495:24" pos:end="495:41">FF_DEBUG_BITSTREAM</name></expr>)</condition><block type="pseudo" pos:start="497:9" pos:end="497:24"><block_content pos:start="497:9" pos:end="497:24">

        <expr_stmt pos:start="497:9" pos:end="497:24"><expr pos:start="497:9" pos:end="497:23"><call pos:start="497:9" pos:end="497:23"><name pos:start="497:9" pos:end="497:20">dump_context</name><argument_list pos:start="497:21" pos:end="497:23">(<argument pos:start="497:22" pos:end="497:22"><expr pos:start="497:22" pos:end="497:22"><name pos:start="497:22" pos:end="497:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="501:5" pos:end="501:41"><expr pos:start="501:5" pos:end="501:40"><name pos:start="501:5" pos:end="501:25"><name pos:start="501:5" pos:end="501:9">avctx</name><operator pos:start="501:10" pos:end="501:11">-&gt;</operator><name pos:start="501:12" pos:end="501:25">channel_layout</name></name> <operator pos:start="501:27" pos:end="501:27">=</operator> <name pos:start="501:29" pos:end="501:40">channel_mask</name></expr>;</expr_stmt>



    <return pos:start="505:5" pos:end="505:13">return <expr pos:start="505:12" pos:end="505:12"><literal type="number" pos:start="505:12" pos:end="505:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
