<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3181.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">vmdaudio_decode_frame</name><parameter_list pos:start="1:33" pos:end="3:69">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:66"><decl pos:start="1:57" pos:end="1:66"><type pos:start="1:57" pos:end="1:66"><name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">data</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:36">int</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:51">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:61">AVPacket</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:68">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="177:1">{<block_content pos:start="7:5" pos:end="175:23">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name>     <init pos:start="7:24" pos:end="7:29">= <expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:26">buf_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">buf_size</name> <init pos:start="13:18" pos:end="13:30">= <expr pos:start="13:20" pos:end="13:30"><name pos:start="13:20" pos:end="13:30"><name pos:start="13:20" pos:end="13:24">avpkt</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:42"><decl pos:start="15:5" pos:end="15:41"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">VmdAudioContext</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:22">s</name> <init pos:start="15:24" pos:end="15:41">= <expr pos:start="15:26" pos:end="15:41"><name pos:start="15:26" pos:end="15:41"><name pos:start="15:26" pos:end="15:30">avctx</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:48"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">block_type</name></decl>, <decl pos:start="17:21" pos:end="17:33"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:21" pos:end="17:33">silent_chunks</name></decl>, <decl pos:start="17:36" pos:end="17:47"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:36" pos:end="17:47">audio_chunks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:30">output_samples_u8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:31"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">int16_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:31">output_samples_s16</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <literal type="number" pos:start="27:20" pos:end="27:21">16</literal></expr>)</condition> <block pos:start="27:24" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:24">

        <expr_stmt pos:start="29:9" pos:end="29:70"><expr pos:start="29:9" pos:end="29:69"><call pos:start="29:9" pos:end="29:69"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:69">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:36"><expr pos:start="29:23" pos:end="29:36"><name pos:start="29:23" pos:end="29:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="29:39" pos:end="29:68"><expr pos:start="29:39" pos:end="29:68"><literal type="string" pos:start="29:39" pos:end="29:68">"skipping small junk packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:27"><expr pos:start="31:9" pos:end="31:26"><operator pos:start="31:9" pos:end="31:9">*</operator><name pos:start="31:10" pos:end="31:22">got_frame_ptr</name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:24">return <expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:14">block_type</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:23"><name pos:start="39:18" pos:end="39:20">buf</name><index pos:start="39:21" pos:end="39:23">[<expr pos:start="39:22" pos:end="39:22"><literal type="number" pos:start="39:22" pos:end="39:22">6</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:73">(<expr pos:start="41:9" pos:end="41:72"><name pos:start="41:9" pos:end="41:53"><name pos:start="41:9" pos:end="41:18">block_type</name> <argument_list type="generic" pos:start="41:20" pos:end="41:53">&lt; <argument pos:start="41:22" pos:end="41:51"><expr pos:start="41:22" pos:end="41:51"><name pos:start="41:22" pos:end="41:37">BLOCK_TYPE_AUDIO</name> <operator pos:start="41:39" pos:end="41:40">||</operator> <name pos:start="41:42" pos:end="41:51">block_type</name></expr></argument> &gt;</argument_list></name> <name pos:start="41:55" pos:end="41:72">BLOCK_TYPE_SILENCE</name></expr>)</condition> <block pos:start="41:75" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:31">

        <expr_stmt pos:start="43:9" pos:end="43:76"><expr pos:start="43:9" pos:end="43:75"><call pos:start="43:9" pos:end="43:75"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:75">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:62"><expr pos:start="43:37" pos:end="43:62"><literal type="string" pos:start="43:37" pos:end="43:62">"unknown block type: %d\n"</literal></expr></argument>, <argument pos:start="43:65" pos:end="43:74"><expr pos:start="43:65" pos:end="43:74"><name pos:start="43:65" pos:end="43:74">block_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:31">return <expr pos:start="45:16" pos:end="45:30"><call pos:start="45:16" pos:end="45:30"><name pos:start="45:16" pos:end="45:22">AVERROR</name><argument_list pos:start="45:23" pos:end="45:30">(<argument pos:start="45:24" pos:end="45:29"><expr pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:19"><expr pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:7">buf</name>      <operator pos:start="49:14" pos:end="49:15">+=</operator> <literal type="number" pos:start="49:17" pos:end="49:18">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:19"><expr pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:12">buf_size</name> <operator pos:start="51:14" pos:end="51:15">-=</operator> <literal type="number" pos:start="51:17" pos:end="51:18">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:37">/* get number of silent chunks */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:17">silent_chunks</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="number" pos:start="57:21" pos:end="57:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="85:5"><if pos:start="59:5" pos:end="79:5">if <condition pos:start="59:8" pos:end="59:41">(<expr pos:start="59:9" pos:end="59:40"><name pos:start="59:9" pos:end="59:18">block_type</name> <operator pos:start="59:20" pos:end="59:21">==</operator> <name pos:start="59:23" pos:end="59:40">BLOCK_TYPE_INITIAL</name></expr>)</condition> <block pos:start="59:43" pos:end="79:5">{<block_content pos:start="61:9" pos:end="77:22">

        <decl_stmt pos:start="61:9" pos:end="61:23"><decl pos:start="61:9" pos:end="61:22"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint32_t</name></type> <name pos:start="61:18" pos:end="61:22">flags</name></decl>;</decl_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:25">(<expr pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:20">buf_size</name> <operator pos:start="63:22" pos:end="63:22">&lt;</operator> <literal type="number" pos:start="63:24" pos:end="63:24">4</literal></expr>)</condition> <block pos:start="63:27" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:35">

            <expr_stmt pos:start="65:13" pos:end="65:65"><expr pos:start="65:13" pos:end="65:64"><call pos:start="65:13" pos:end="65:64"><name pos:start="65:13" pos:end="65:18">av_log</name><argument_list pos:start="65:19" pos:end="65:64">(<argument pos:start="65:20" pos:end="65:24"><expr pos:start="65:20" pos:end="65:24"><name pos:start="65:20" pos:end="65:24">avctx</name></expr></argument>, <argument pos:start="65:27" pos:end="65:38"><expr pos:start="65:27" pos:end="65:38"><name pos:start="65:27" pos:end="65:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:41" pos:end="65:63"><expr pos:start="65:41" pos:end="65:63"><literal type="string" pos:start="65:41" pos:end="65:63">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:35">return <expr pos:start="67:20" pos:end="67:34"><call pos:start="67:20" pos:end="67:34"><name pos:start="67:20" pos:end="67:26">AVERROR</name><argument_list pos:start="67:27" pos:end="67:34">(<argument pos:start="67:28" pos:end="67:33"><expr pos:start="67:28" pos:end="67:33"><name pos:start="67:28" pos:end="67:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:37"><expr pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:13">flags</name>         <operator pos:start="71:23" pos:end="71:23">=</operator> <call pos:start="71:25" pos:end="71:36"><name pos:start="71:25" pos:end="71:31">AV_RB32</name><argument_list pos:start="71:32" pos:end="71:36">(<argument pos:start="71:33" pos:end="71:35"><expr pos:start="71:33" pos:end="71:35"><name pos:start="71:33" pos:end="71:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:21">silent_chunks</name> <operator pos:start="73:23" pos:end="73:23">=</operator> <call pos:start="73:25" pos:end="73:42"><name pos:start="73:25" pos:end="73:35">av_popcount</name><argument_list pos:start="73:36" pos:end="73:42">(<argument pos:start="73:37" pos:end="73:41"><expr pos:start="73:37" pos:end="73:41"><name pos:start="73:37" pos:end="73:41">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:22"><expr pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:11">buf</name>      <operator pos:start="75:18" pos:end="75:19">+=</operator> <literal type="number" pos:start="75:21" pos:end="75:21">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:16">buf_size</name> <operator pos:start="77:18" pos:end="77:19">-=</operator> <literal type="number" pos:start="77:21" pos:end="77:21">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="79:7" pos:end="85:5">else if <condition pos:start="79:15" pos:end="79:48">(<expr pos:start="79:16" pos:end="79:47"><name pos:start="79:16" pos:end="79:25">block_type</name> <operator pos:start="79:27" pos:end="79:28">==</operator> <name pos:start="79:30" pos:end="79:47">BLOCK_TYPE_SILENCE</name></expr>)</condition> <block pos:start="79:50" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:21">

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:21">silent_chunks</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <literal type="number" pos:start="81:25" pos:end="81:25">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:21"><expr pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:16">buf_size</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <literal type="number" pos:start="83:20" pos:end="83:20">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="83:23" pos:end="83:74">// should already be zero but set it just to be sure</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:46">/* ensure output buffer is large enough */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:44"><expr pos:start="91:5" pos:end="91:43"><name pos:start="91:5" pos:end="91:16">audio_chunks</name> <operator pos:start="91:18" pos:end="91:18">=</operator> <name pos:start="91:20" pos:end="91:27">buf_size</name> <operator pos:start="91:29" pos:end="91:29">/</operator> <name pos:start="91:31" pos:end="91:43"><name pos:start="91:31" pos:end="91:31">s</name><operator pos:start="91:32" pos:end="91:33">-&gt;</operator><name pos:start="91:34" pos:end="91:43">chunk_size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:27">/* get output buffer */</comment>

    <expr_stmt pos:start="97:5" pos:end="99:40"><expr pos:start="97:5" pos:end="99:39"><name pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:9">frame</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:21">nb_samples</name></name> <operator pos:start="97:23" pos:end="97:23">=</operator> <operator pos:start="97:25" pos:end="97:25">(</operator><operator pos:start="97:26" pos:end="97:26">(</operator><name pos:start="97:27" pos:end="97:39">silent_chunks</name> <operator pos:start="97:41" pos:end="97:41">+</operator> <name pos:start="97:43" pos:end="97:54">audio_chunks</name><operator pos:start="97:55" pos:end="97:55">)</operator> <operator pos:start="97:57" pos:end="97:57">*</operator> <name pos:start="97:59" pos:end="97:76"><name pos:start="97:59" pos:end="97:63">avctx</name><operator pos:start="97:64" pos:end="97:65">-&gt;</operator><name pos:start="97:66" pos:end="97:76">block_align</name></name><operator pos:start="97:77" pos:end="97:77">)</operator> <operator pos:start="97:79" pos:end="97:79">/</operator>

                        <name pos:start="99:25" pos:end="99:39"><name pos:start="99:25" pos:end="99:29">avctx</name><operator pos:start="99:30" pos:end="99:31">-&gt;</operator><name pos:start="99:32" pos:end="99:39">channels</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:51">(<expr pos:start="101:9" pos:end="101:50"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:12">ret</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:45"><name pos:start="101:16" pos:end="101:28">ff_get_buffer</name><argument_list pos:start="101:29" pos:end="101:45">(<argument pos:start="101:30" pos:end="101:34"><expr pos:start="101:30" pos:end="101:34"><name pos:start="101:30" pos:end="101:34">avctx</name></expr></argument>, <argument pos:start="101:37" pos:end="101:41"><expr pos:start="101:37" pos:end="101:41"><name pos:start="101:37" pos:end="101:41">frame</name></expr></argument>, <argument pos:start="101:44" pos:end="101:44"><expr pos:start="101:44" pos:end="101:44"><literal type="number" pos:start="101:44" pos:end="101:44">0</literal></expr></argument>)</argument_list></call><operator pos:start="101:46" pos:end="101:46">)</operator> <operator pos:start="101:48" pos:end="101:48">&lt;</operator> <literal type="number" pos:start="101:50" pos:end="101:50">0</literal></expr>)</condition> <block pos:start="101:53" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:19">

        <expr_stmt pos:start="103:9" pos:end="103:61"><expr pos:start="103:9" pos:end="103:60"><call pos:start="103:9" pos:end="103:60"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="103:60">(<argument pos:start="103:16" pos:end="103:20"><expr pos:start="103:16" pos:end="103:20"><name pos:start="103:16" pos:end="103:20">avctx</name></expr></argument>, <argument pos:start="103:23" pos:end="103:34"><expr pos:start="103:23" pos:end="103:34"><name pos:start="103:23" pos:end="103:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:37" pos:end="103:59"><expr pos:start="103:37" pos:end="103:59"><literal type="string" pos:start="103:37" pos:end="103:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:19">return <expr pos:start="105:16" pos:end="105:18"><name pos:start="105:16" pos:end="105:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:51"><expr pos:start="109:5" pos:end="109:50"><name pos:start="109:5" pos:end="109:21">output_samples_u8</name>  <operator pos:start="109:24" pos:end="109:24">=</operator>            <name pos:start="109:37" pos:end="109:50"><name pos:start="109:37" pos:end="109:41">frame</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:47">data</name><index pos:start="109:48" pos:end="109:50">[<expr pos:start="109:49" pos:end="109:49"><literal type="number" pos:start="109:49" pos:end="109:49">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:51"><expr pos:start="111:5" pos:end="111:50"><name pos:start="111:5" pos:end="111:22">output_samples_s16</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <operator pos:start="111:26" pos:end="111:26">(</operator><name pos:start="111:27" pos:end="111:33">int16_t</name> <operator pos:start="111:35" pos:end="111:35">*</operator><operator pos:start="111:36" pos:end="111:36">)</operator><name pos:start="111:37" pos:end="111:50"><name pos:start="111:37" pos:end="111:41">frame</name><operator pos:start="111:42" pos:end="111:43">-&gt;</operator><name pos:start="111:44" pos:end="111:47">data</name><index pos:start="111:48" pos:end="111:50">[<expr pos:start="111:49" pos:end="111:49"><literal type="number" pos:start="111:49" pos:end="111:49">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:30">/* decode silent chunks */</comment>

    <if_stmt pos:start="117:5" pos:end="135:5"><if pos:start="117:5" pos:end="135:5">if <condition pos:start="117:8" pos:end="117:26">(<expr pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:21">silent_chunks</name> <operator pos:start="117:23" pos:end="117:23">&gt;</operator> <literal type="number" pos:start="117:25" pos:end="117:25">0</literal></expr>)</condition> <block pos:start="117:28" pos:end="135:5">{<block_content pos:start="119:9" pos:end="133:9">

        <decl_stmt pos:start="119:9" pos:end="119:61"><decl pos:start="119:9" pos:end="119:60"><type pos:start="119:9" pos:end="119:11"><name pos:start="119:9" pos:end="119:11">int</name></type> <name pos:start="119:13" pos:end="119:23">silent_size</name> <init pos:start="119:25" pos:end="119:60">= <expr pos:start="119:27" pos:end="119:60"><name pos:start="119:27" pos:end="119:44"><name pos:start="119:27" pos:end="119:31">avctx</name><operator pos:start="119:32" pos:end="119:33">-&gt;</operator><name pos:start="119:34" pos:end="119:44">block_align</name></name> <operator pos:start="119:46" pos:end="119:46">*</operator> <name pos:start="119:48" pos:end="119:60">silent_chunks</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="121:9" pos:end="133:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:28">(<expr pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:13">s</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:22">out_bps</name></name> <operator pos:start="121:24" pos:end="121:25">==</operator> <literal type="number" pos:start="121:27" pos:end="121:27">2</literal></expr>)</condition> <block pos:start="121:30" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:46">

            <expr_stmt pos:start="123:13" pos:end="123:62"><expr pos:start="123:13" pos:end="123:61"><call pos:start="123:13" pos:end="123:61"><name pos:start="123:13" pos:end="123:18">memset</name><argument_list pos:start="123:19" pos:end="123:61">(<argument pos:start="123:20" pos:end="123:37"><expr pos:start="123:20" pos:end="123:37"><name pos:start="123:20" pos:end="123:37">output_samples_s16</name></expr></argument>, <argument pos:start="123:40" pos:end="123:43"><expr pos:start="123:40" pos:end="123:43"><literal type="number" pos:start="123:40" pos:end="123:43">0x00</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:60"><expr pos:start="123:46" pos:end="123:60"><name pos:start="123:46" pos:end="123:56">silent_size</name> <operator pos:start="123:58" pos:end="123:58">*</operator> <literal type="number" pos:start="123:60" pos:end="123:60">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:46"><expr pos:start="125:13" pos:end="125:45"><name pos:start="125:13" pos:end="125:30">output_samples_s16</name> <operator pos:start="125:32" pos:end="125:33">+=</operator> <name pos:start="125:35" pos:end="125:45">silent_size</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="133:9">else <block pos:start="127:16" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:45">

            <expr_stmt pos:start="129:13" pos:end="129:58"><expr pos:start="129:13" pos:end="129:57"><call pos:start="129:13" pos:end="129:57"><name pos:start="129:13" pos:end="129:18">memset</name><argument_list pos:start="129:19" pos:end="129:57">(<argument pos:start="129:20" pos:end="129:36"><expr pos:start="129:20" pos:end="129:36"><name pos:start="129:20" pos:end="129:36">output_samples_u8</name></expr></argument>,  <argument pos:start="129:40" pos:end="129:43"><expr pos:start="129:40" pos:end="129:43"><literal type="number" pos:start="129:40" pos:end="129:43">0x80</literal></expr></argument>, <argument pos:start="129:46" pos:end="129:56"><expr pos:start="129:46" pos:end="129:56"><name pos:start="129:46" pos:end="129:56">silent_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:45"><expr pos:start="131:13" pos:end="131:44"><name pos:start="131:13" pos:end="131:29">output_samples_u8</name> <operator pos:start="131:31" pos:end="131:32">+=</operator> <name pos:start="131:34" pos:end="131:44">silent_size</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:29">/* decode audio chunks */</comment>

    <if_stmt pos:start="141:5" pos:end="167:5"><if pos:start="141:5" pos:end="167:5">if <condition pos:start="141:8" pos:end="141:25">(<expr pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:20">audio_chunks</name> <operator pos:start="141:22" pos:end="141:22">&gt;</operator> <literal type="number" pos:start="141:24" pos:end="141:24">0</literal></expr>)</condition> <block pos:start="141:27" pos:end="167:5">{<block_content pos:start="143:9" pos:end="165:9">

        <expr_stmt pos:start="143:9" pos:end="143:33"><expr pos:start="143:9" pos:end="143:32"><name pos:start="143:9" pos:end="143:15">buf_end</name> <operator pos:start="143:17" pos:end="143:17">=</operator> <name pos:start="143:19" pos:end="143:21">buf</name> <operator pos:start="143:23" pos:end="143:23">+</operator> <name pos:start="143:25" pos:end="143:32">buf_size</name></expr>;</expr_stmt>

        <while pos:start="145:9" pos:end="165:9">while <condition pos:start="145:15" pos:end="145:29">(<expr pos:start="145:16" pos:end="145:28"><name pos:start="145:16" pos:end="145:18">buf</name> <operator pos:start="145:20" pos:end="145:20">&lt;</operator> <name pos:start="145:22" pos:end="145:28">buf_end</name></expr>)</condition> <block pos:start="145:31" pos:end="165:9">{<block_content pos:start="147:13" pos:end="163:33">

            <if_stmt pos:start="147:13" pos:end="161:13"><if pos:start="147:13" pos:end="155:13">if <condition pos:start="147:16" pos:end="147:32">(<expr pos:start="147:17" pos:end="147:31"><name pos:start="147:17" pos:end="147:26"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:26">out_bps</name></name> <operator pos:start="147:28" pos:end="147:29">==</operator> <literal type="number" pos:start="147:31" pos:end="147:31">2</literal></expr>)</condition> <block pos:start="147:34" pos:end="155:13">{<block_content pos:start="149:17" pos:end="153:57">

                <expr_stmt pos:start="149:17" pos:end="151:50"><expr pos:start="149:17" pos:end="151:49"><call pos:start="149:17" pos:end="151:49"><name pos:start="149:17" pos:end="149:32">decode_audio_s16</name><argument_list pos:start="149:33" pos:end="151:49">(<argument pos:start="149:34" pos:end="149:51"><expr pos:start="149:34" pos:end="149:51"><name pos:start="149:34" pos:end="149:51">output_samples_s16</name></expr></argument>, <argument pos:start="149:54" pos:end="149:56"><expr pos:start="149:54" pos:end="149:56"><name pos:start="149:54" pos:end="149:56">buf</name></expr></argument>, <argument pos:start="149:59" pos:end="149:71"><expr pos:start="149:59" pos:end="149:71"><name pos:start="149:59" pos:end="149:71"><name pos:start="149:59" pos:end="149:59">s</name><operator pos:start="149:60" pos:end="149:61">-&gt;</operator><name pos:start="149:62" pos:end="149:71">chunk_size</name></name></expr></argument>,

                                 <argument pos:start="151:34" pos:end="151:48"><expr pos:start="151:34" pos:end="151:48"><name pos:start="151:34" pos:end="151:48"><name pos:start="151:34" pos:end="151:38">avctx</name><operator pos:start="151:39" pos:end="151:40">-&gt;</operator><name pos:start="151:41" pos:end="151:48">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:57"><expr pos:start="153:17" pos:end="153:56"><name pos:start="153:17" pos:end="153:34">output_samples_s16</name> <operator pos:start="153:36" pos:end="153:37">+=</operator> <name pos:start="153:39" pos:end="153:56"><name pos:start="153:39" pos:end="153:43">avctx</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:56">block_align</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="155:15" pos:end="161:13">else <block pos:start="155:20" pos:end="161:13">{<block_content pos:start="157:17" pos:end="159:57">

                <expr_stmt pos:start="157:17" pos:end="157:62"><expr pos:start="157:17" pos:end="157:61"><call pos:start="157:17" pos:end="157:61"><name pos:start="157:17" pos:end="157:22">memcpy</name><argument_list pos:start="157:23" pos:end="157:61">(<argument pos:start="157:24" pos:end="157:40"><expr pos:start="157:24" pos:end="157:40"><name pos:start="157:24" pos:end="157:40">output_samples_u8</name></expr></argument>, <argument pos:start="157:43" pos:end="157:45"><expr pos:start="157:43" pos:end="157:45"><name pos:start="157:43" pos:end="157:45">buf</name></expr></argument>, <argument pos:start="157:48" pos:end="157:60"><expr pos:start="157:48" pos:end="157:60"><name pos:start="157:48" pos:end="157:60"><name pos:start="157:48" pos:end="157:48">s</name><operator pos:start="157:49" pos:end="157:50">-&gt;</operator><name pos:start="157:51" pos:end="157:60">chunk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:57"><expr pos:start="159:17" pos:end="159:56"><name pos:start="159:17" pos:end="159:33">output_samples_u8</name>  <operator pos:start="159:36" pos:end="159:37">+=</operator> <name pos:start="159:39" pos:end="159:56"><name pos:start="159:39" pos:end="159:43">avctx</name><operator pos:start="159:44" pos:end="159:45">-&gt;</operator><name pos:start="159:46" pos:end="159:56">block_align</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:33"><expr pos:start="163:13" pos:end="163:32"><name pos:start="163:13" pos:end="163:15">buf</name> <operator pos:start="163:17" pos:end="163:18">+=</operator> <name pos:start="163:20" pos:end="163:32"><name pos:start="163:20" pos:end="163:20">s</name><operator pos:start="163:21" pos:end="163:22">-&gt;</operator><name pos:start="163:23" pos:end="163:32">chunk_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:23"><expr pos:start="171:5" pos:end="171:22"><operator pos:start="171:5" pos:end="171:5">*</operator><name pos:start="171:6" pos:end="171:18">got_frame_ptr</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <literal type="number" pos:start="171:22" pos:end="171:22">1</literal></expr>;</expr_stmt>



    <return pos:start="175:5" pos:end="175:23">return <expr pos:start="175:12" pos:end="175:22"><name pos:start="175:12" pos:end="175:22"><name pos:start="175:12" pos:end="175:16">avpkt</name><operator pos:start="175:17" pos:end="175:18">-&gt;</operator><name pos:start="175:19" pos:end="175:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
