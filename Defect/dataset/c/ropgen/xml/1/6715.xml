<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6715.c" pos:tabs="8"><function pos:start="1:1" pos:end="661:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">bmp_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">got_frame</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="661:1">{<block_content pos:start="9:5" pos:end="659:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name>       <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:14">p</name>         <init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:22">fsize</name></decl>, <decl pos:start="15:25" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:25" pos:end="15:29">hsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">width</name></decl>, <decl pos:start="17:16" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:16" pos:end="17:21">height</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:22">depth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:17">BiCompression</name></type> <name pos:start="21:19" pos:end="21:22">comp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:23">ihsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>, <decl pos:start="25:12" pos:end="25:12"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:12" pos:end="25:12">j</name></decl>, <decl pos:start="25:15" pos:end="25:15"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:15" pos:end="25:15">n</name></decl>, <decl pos:start="25:18" pos:end="25:25"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:18" pos:end="25:25">linesize</name></decl>, <decl pos:start="25:28" pos:end="25:30"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:28" pos:end="25:30">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint32_t</name></type> <name pos:start="27:14" pos:end="27:19"><name pos:start="27:14" pos:end="27:16">rgb</name><index pos:start="27:17" pos:end="27:19">[<expr pos:start="27:18" pos:end="27:18"><literal type="number" pos:start="27:18" pos:end="27:18">3</literal></expr>]</index></name> <init pos:start="27:21" pos:end="27:25">= <expr pos:start="27:23" pos:end="27:25"><block pos:start="27:23" pos:end="27:25">{<expr pos:start="27:24" pos:end="27:24"><literal type="number" pos:start="27:24" pos:end="27:24">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:18">alpha</name> <init pos:start="29:20" pos:end="29:22">= <expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:17"><decl pos:start="31:5" pos:end="31:16"><type pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:11">uint8_t</name> <modifier pos:start="31:13" pos:end="31:13">*</modifier></type><name pos:start="31:14" pos:end="31:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:14"><decl pos:start="33:5" pos:end="33:13"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:13">dsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:30"><decl pos:start="35:5" pos:end="35:29"><type pos:start="35:5" pos:end="35:19"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:17">uint8_t</name> <modifier pos:start="35:19" pos:end="35:19">*</modifier></type><name pos:start="35:20" pos:end="35:23">buf0</name> <init pos:start="35:25" pos:end="35:29">= <expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:29">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:22"><decl pos:start="37:5" pos:end="37:21"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:18">GetByteContext</name></type> <name pos:start="37:20" pos:end="37:21">gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:22">(<expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:16">buf_size</name> <operator pos:start="41:18" pos:end="41:18">&lt;</operator> <literal type="number" pos:start="41:20" pos:end="41:21">14</literal></expr>)</condition> <block pos:start="41:24" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:35">

        <expr_stmt pos:start="43:9" pos:end="43:75"><expr pos:start="43:9" pos:end="43:74"><call pos:start="43:9" pos:end="43:74"><name pos:start="43:9" pos:end="43:14">av_log</name><argument_list pos:start="43:15" pos:end="43:74">(<argument pos:start="43:16" pos:end="43:20"><expr pos:start="43:16" pos:end="43:20"><name pos:start="43:16" pos:end="43:20">avctx</name></expr></argument>, <argument pos:start="43:23" pos:end="43:34"><expr pos:start="43:23" pos:end="43:34"><name pos:start="43:23" pos:end="43:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:37" pos:end="43:63"><expr pos:start="43:37" pos:end="43:63"><literal type="string" pos:start="43:37" pos:end="43:63">"buf size too small (%d)\n"</literal></expr></argument>, <argument pos:start="43:66" pos:end="43:73"><expr pos:start="43:66" pos:end="43:73"><name pos:start="43:66" pos:end="43:73">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="53:41">(<expr pos:start="51:9" pos:end="53:40"><call pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:27">bytestream_get_byte</name><argument_list pos:start="51:28" pos:end="51:33">(<argument pos:start="51:29" pos:end="51:32"><expr pos:start="51:29" pos:end="51:32"><operator pos:start="51:29" pos:end="51:29">&amp;</operator><name pos:start="51:30" pos:end="51:32">buf</name></expr></argument>)</argument_list></call> <operator pos:start="51:35" pos:end="51:36">!=</operator> <literal type="char" pos:start="51:38" pos:end="51:40">'B'</literal> <operator pos:start="51:42" pos:end="51:43">||</operator>

        <call pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:27">bytestream_get_byte</name><argument_list pos:start="53:28" pos:end="53:33">(<argument pos:start="53:29" pos:end="53:32"><expr pos:start="53:29" pos:end="53:32"><operator pos:start="53:29" pos:end="53:29">&amp;</operator><name pos:start="53:30" pos:end="53:32">buf</name></expr></argument>)</argument_list></call> <operator pos:start="53:35" pos:end="53:36">!=</operator> <literal type="char" pos:start="53:38" pos:end="53:40">'M'</literal></expr>)</condition> <block pos:start="53:43" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:35">

        <expr_stmt pos:start="55:9" pos:end="55:58"><expr pos:start="55:9" pos:end="55:57"><call pos:start="55:9" pos:end="55:57"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:57">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:56"><expr pos:start="55:37" pos:end="55:56"><literal type="string" pos:start="55:37" pos:end="55:56">"bad magic number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:35">return <expr pos:start="57:16" pos:end="57:34"><name pos:start="57:16" pos:end="57:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:38"><expr pos:start="63:5" pos:end="63:37"><name pos:start="63:5" pos:end="63:9">fsize</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:31">bytestream_get_le32</name><argument_list pos:start="63:32" pos:end="63:37">(<argument pos:start="63:33" pos:end="63:36"><expr pos:start="63:33" pos:end="63:36"><operator pos:start="63:33" pos:end="63:33">&amp;</operator><name pos:start="63:34" pos:end="63:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:25">(<expr pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:16">buf_size</name> <operator pos:start="65:18" pos:end="65:18">&lt;</operator> <name pos:start="65:20" pos:end="65:24">fsize</name></expr>)</condition> <block pos:start="65:27" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:25">

        <expr_stmt pos:start="67:9" pos:end="69:32"><expr pos:start="67:9" pos:end="69:31"><call pos:start="67:9" pos:end="69:31"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="69:31">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20">avctx</name></expr></argument>, <argument pos:start="67:23" pos:end="67:34"><expr pos:start="67:23" pos:end="67:34"><name pos:start="67:23" pos:end="67:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:37" pos:end="67:90"><expr pos:start="67:37" pos:end="67:90"><literal type="string" pos:start="67:37" pos:end="67:90">"not enough data (%d &lt; %u), trying to decode anyway\n"</literal></expr></argument>,

               <argument pos:start="69:16" pos:end="69:23"><expr pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:23">buf_size</name></expr></argument>, <argument pos:start="69:26" pos:end="69:30"><expr pos:start="69:26" pos:end="69:30"><name pos:start="69:26" pos:end="69:30">fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:25"><expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:13">fsize</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <name pos:start="71:17" pos:end="71:24">buf_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:13"><expr pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:7">buf</name> <operator pos:start="77:9" pos:end="77:10">+=</operator> <literal type="number" pos:start="77:12" pos:end="77:12">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="77:15" pos:end="77:29">/* reserved1 */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:13"><expr pos:start="79:5" pos:end="79:12"><name pos:start="79:5" pos:end="79:7">buf</name> <operator pos:start="79:9" pos:end="79:10">+=</operator> <literal type="number" pos:start="79:12" pos:end="79:12">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="79:15" pos:end="79:29">/* reserved2 */</comment>



    <expr_stmt pos:start="83:5" pos:end="83:39"><expr pos:start="83:5" pos:end="83:38"><name pos:start="83:5" pos:end="83:9">hsize</name>  <operator pos:start="83:12" pos:end="83:12">=</operator> <call pos:start="83:14" pos:end="83:38"><name pos:start="83:14" pos:end="83:32">bytestream_get_le32</name><argument_list pos:start="83:33" pos:end="83:38">(<argument pos:start="83:34" pos:end="83:37"><expr pos:start="83:34" pos:end="83:37"><operator pos:start="83:34" pos:end="83:34">&amp;</operator><name pos:start="83:35" pos:end="83:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="83:41" pos:end="83:57">/* header size */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:39"><expr pos:start="85:5" pos:end="85:38"><name pos:start="85:5" pos:end="85:10">ihsize</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="85:38"><name pos:start="85:14" pos:end="85:32">bytestream_get_le32</name><argument_list pos:start="85:33" pos:end="85:38">(<argument pos:start="85:34" pos:end="85:37"><expr pos:start="85:34" pos:end="85:37"><operator pos:start="85:34" pos:end="85:34">&amp;</operator><name pos:start="85:35" pos:end="85:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="85:41" pos:end="85:62">/* more header size */</comment>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:30">(<expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:14">ihsize</name> <operator pos:start="87:16" pos:end="87:16">+</operator> <literal type="number" pos:start="87:18" pos:end="87:21">14LL</literal> <operator pos:start="87:23" pos:end="87:23">&gt;</operator> <name pos:start="87:25" pos:end="87:29">hsize</name></expr>)</condition> <block pos:start="87:32" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:35">

        <expr_stmt pos:start="89:9" pos:end="89:71"><expr pos:start="89:9" pos:end="89:70"><call pos:start="89:9" pos:end="89:70"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="89:70">(<argument pos:start="89:16" pos:end="89:20"><expr pos:start="89:16" pos:end="89:20"><name pos:start="89:16" pos:end="89:20">avctx</name></expr></argument>, <argument pos:start="89:23" pos:end="89:34"><expr pos:start="89:23" pos:end="89:34"><name pos:start="89:23" pos:end="89:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:37" pos:end="89:62"><expr pos:start="89:37" pos:end="89:62"><literal type="string" pos:start="89:37" pos:end="89:62">"invalid header size %u\n"</literal></expr></argument>, <argument pos:start="89:65" pos:end="89:69"><expr pos:start="89:65" pos:end="89:69"><name pos:start="89:65" pos:end="89:69">hsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:35">return <expr pos:start="91:16" pos:end="91:34"><name pos:start="91:16" pos:end="91:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:87">/* sometimes file size is set to some headers size, set a real size in that case */</comment>

    <if_stmt pos:start="99:5" pos:end="101:29"><if pos:start="99:5" pos:end="101:29">if <condition pos:start="99:8" pos:end="99:44">(<expr pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:13">fsize</name> <operator pos:start="99:15" pos:end="99:16">==</operator> <literal type="number" pos:start="99:18" pos:end="99:19">14</literal> <operator pos:start="99:21" pos:end="99:22">||</operator> <name pos:start="99:24" pos:end="99:28">fsize</name> <operator pos:start="99:30" pos:end="99:31">==</operator> <name pos:start="99:33" pos:end="99:38">ihsize</name> <operator pos:start="99:40" pos:end="99:40">+</operator> <literal type="number" pos:start="99:42" pos:end="99:43">14</literal></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:29"><block_content pos:start="101:9" pos:end="101:29">

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:13">fsize</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <name pos:start="101:17" pos:end="101:24">buf_size</name> <operator pos:start="101:26" pos:end="101:26">-</operator> <literal type="number" pos:start="101:28" pos:end="101:28">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="115:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:23">(<expr pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:13">fsize</name> <operator pos:start="105:15" pos:end="105:16">&lt;=</operator> <name pos:start="105:18" pos:end="105:22">hsize</name></expr>)</condition> <block pos:start="105:25" pos:end="115:5">{<block_content pos:start="107:9" pos:end="113:35">

        <expr_stmt pos:start="107:9" pos:end="111:29"><expr pos:start="107:9" pos:end="111:28"><call pos:start="107:9" pos:end="111:28"><name pos:start="107:9" pos:end="107:14">av_log</name><argument_list pos:start="107:15" pos:end="111:28">(<argument pos:start="107:16" pos:end="107:20"><expr pos:start="107:16" pos:end="107:20"><name pos:start="107:16" pos:end="107:20">avctx</name></expr></argument>, <argument pos:start="107:23" pos:end="107:34"><expr pos:start="107:23" pos:end="107:34"><name pos:start="107:23" pos:end="107:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="109:16" pos:end="109:72"><expr pos:start="109:16" pos:end="109:72"><literal type="string" pos:start="109:16" pos:end="109:72">"Declared file size is less than header size (%u &lt; %u)\n"</literal></expr></argument>,

               <argument pos:start="111:16" pos:end="111:20"><expr pos:start="111:16" pos:end="111:20"><name pos:start="111:16" pos:end="111:20">fsize</name></expr></argument>, <argument pos:start="111:23" pos:end="111:27"><expr pos:start="111:23" pos:end="111:27"><name pos:start="111:23" pos:end="111:27">hsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:35">return <expr pos:start="113:16" pos:end="113:34"><name pos:start="113:16" pos:end="113:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="119:5" pos:end="153:5">switch <condition pos:start="119:12" pos:end="119:19">(<expr pos:start="119:13" pos:end="119:18"><name pos:start="119:13" pos:end="119:18">ihsize</name></expr>)</condition> <block pos:start="119:21" pos:end="153:5">{<block_content pos:start="121:5" pos:end="151:36">

    <case pos:start="121:5" pos:end="121:13">case  <expr pos:start="121:11" pos:end="121:12"><literal type="number" pos:start="121:11" pos:end="121:12">40</literal></expr>:</case> <comment type="line" pos:start="121:15" pos:end="121:23">// windib</comment>

    <case pos:start="123:5" pos:end="123:13">case  <expr pos:start="123:11" pos:end="123:12"><literal type="number" pos:start="123:11" pos:end="123:12">56</literal></expr>:</case> <comment type="line" pos:start="123:15" pos:end="123:26">// windib v3</comment>

    <case pos:start="125:5" pos:end="125:13">case  <expr pos:start="125:11" pos:end="125:12"><literal type="number" pos:start="125:11" pos:end="125:12">64</literal></expr>:</case> <comment type="line" pos:start="125:15" pos:end="125:24">// OS/2 v2</comment>

    <case pos:start="127:5" pos:end="127:13">case <expr pos:start="127:10" pos:end="127:12"><literal type="number" pos:start="127:10" pos:end="127:12">108</literal></expr>:</case> <comment type="line" pos:start="127:15" pos:end="127:26">// windib v4</comment>

    <case pos:start="129:5" pos:end="129:13">case <expr pos:start="129:10" pos:end="129:12"><literal type="number" pos:start="129:10" pos:end="129:12">124</literal></expr>:</case> <comment type="line" pos:start="129:15" pos:end="129:26">// windib v5</comment>

        <expr_stmt pos:start="131:9" pos:end="131:43"><expr pos:start="131:9" pos:end="131:42"><name pos:start="131:9" pos:end="131:13">width</name>  <operator pos:start="131:16" pos:end="131:16">=</operator> <call pos:start="131:18" pos:end="131:42"><name pos:start="131:18" pos:end="131:36">bytestream_get_le32</name><argument_list pos:start="131:37" pos:end="131:42">(<argument pos:start="131:38" pos:end="131:41"><expr pos:start="131:38" pos:end="131:41"><operator pos:start="131:38" pos:end="131:38">&amp;</operator><name pos:start="131:39" pos:end="131:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:43"><expr pos:start="133:9" pos:end="133:42"><name pos:start="133:9" pos:end="133:14">height</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <call pos:start="133:18" pos:end="133:42"><name pos:start="133:18" pos:end="133:36">bytestream_get_le32</name><argument_list pos:start="133:37" pos:end="133:42">(<argument pos:start="133:38" pos:end="133:41"><expr pos:start="133:38" pos:end="133:41"><operator pos:start="133:38" pos:end="133:38">&amp;</operator><name pos:start="133:39" pos:end="133:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:13">case  <expr pos:start="137:11" pos:end="137:12"><literal type="number" pos:start="137:11" pos:end="137:12">12</literal></expr>:</case> <comment type="line" pos:start="137:15" pos:end="137:24">// OS/2 v1</comment>

        <expr_stmt pos:start="139:9" pos:end="139:43"><expr pos:start="139:9" pos:end="139:42"><name pos:start="139:9" pos:end="139:13">width</name>  <operator pos:start="139:16" pos:end="139:16">=</operator> <call pos:start="139:18" pos:end="139:42"><name pos:start="139:18" pos:end="139:36">bytestream_get_le16</name><argument_list pos:start="139:37" pos:end="139:42">(<argument pos:start="139:38" pos:end="139:41"><expr pos:start="139:38" pos:end="139:41"><operator pos:start="139:38" pos:end="139:38">&amp;</operator><name pos:start="139:39" pos:end="139:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:43"><expr pos:start="141:9" pos:end="141:42"><name pos:start="141:9" pos:end="141:14">height</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <call pos:start="141:18" pos:end="141:42"><name pos:start="141:18" pos:end="141:36">bytestream_get_le16</name><argument_list pos:start="141:37" pos:end="141:42">(<argument pos:start="141:38" pos:end="141:41"><expr pos:start="141:38" pos:end="141:41"><operator pos:start="141:38" pos:end="141:38">&amp;</operator><name pos:start="141:39" pos:end="141:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <default pos:start="145:5" pos:end="145:12">default:</default>

        <expr_stmt pos:start="147:9" pos:end="149:46"><expr pos:start="147:9" pos:end="149:45"><call pos:start="147:9" pos:end="149:45"><name pos:start="147:9" pos:end="147:37">avpriv_report_missing_feature</name><argument_list pos:start="147:38" pos:end="149:45">(<argument pos:start="147:39" pos:end="147:43"><expr pos:start="147:39" pos:end="147:43"><name pos:start="147:39" pos:end="147:43">avctx</name></expr></argument>, <argument pos:start="147:46" pos:end="147:73"><expr pos:start="147:46" pos:end="147:73"><literal type="string" pos:start="147:46" pos:end="147:73">"Information header size %u"</literal></expr></argument>,

                                      <argument pos:start="149:39" pos:end="149:44"><expr pos:start="149:39" pos:end="149:44"><name pos:start="149:39" pos:end="149:44">ihsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="151:9" pos:end="151:36">return <expr pos:start="151:16" pos:end="151:35"><name pos:start="151:16" pos:end="151:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="157:5" pos:end="157:16">/* planes */</comment>

    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:39">(<expr pos:start="159:9" pos:end="159:38"><call pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:27">bytestream_get_le16</name><argument_list pos:start="159:28" pos:end="159:33">(<argument pos:start="159:29" pos:end="159:32"><expr pos:start="159:29" pos:end="159:32"><operator pos:start="159:29" pos:end="159:29">&amp;</operator><name pos:start="159:30" pos:end="159:32">buf</name></expr></argument>)</argument_list></call> <operator pos:start="159:35" pos:end="159:36">!=</operator> <literal type="number" pos:start="159:38" pos:end="159:38">1</literal></expr>)</condition> <block pos:start="159:41" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:35">

        <expr_stmt pos:start="161:9" pos:end="161:60"><expr pos:start="161:9" pos:end="161:59"><call pos:start="161:9" pos:end="161:59"><name pos:start="161:9" pos:end="161:14">av_log</name><argument_list pos:start="161:15" pos:end="161:59">(<argument pos:start="161:16" pos:end="161:20"><expr pos:start="161:16" pos:end="161:20"><name pos:start="161:16" pos:end="161:20">avctx</name></expr></argument>, <argument pos:start="161:23" pos:end="161:34"><expr pos:start="161:23" pos:end="161:34"><name pos:start="161:23" pos:end="161:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:37" pos:end="161:58"><expr pos:start="161:37" pos:end="161:58"><literal type="string" pos:start="161:37" pos:end="161:58">"invalid BMP header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:35">return <expr pos:start="163:16" pos:end="163:34"><name pos:start="163:16" pos:end="163:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:38"><expr pos:start="169:5" pos:end="169:37"><name pos:start="169:5" pos:end="169:9">depth</name> <operator pos:start="169:11" pos:end="169:11">=</operator> <call pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:31">bytestream_get_le16</name><argument_list pos:start="169:32" pos:end="169:37">(<argument pos:start="169:33" pos:end="169:36"><expr pos:start="169:33" pos:end="169:36"><operator pos:start="169:33" pos:end="169:33">&amp;</operator><name pos:start="169:34" pos:end="169:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="173:5" pos:end="179:23"><if pos:start="173:5" pos:end="175:41">if <condition pos:start="173:8" pos:end="173:21">(<expr pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:14">ihsize</name> <operator pos:start="173:16" pos:end="173:17">&gt;=</operator> <literal type="number" pos:start="173:19" pos:end="173:20">40</literal></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:41"><block_content pos:start="175:9" pos:end="175:41">

        <expr_stmt pos:start="175:9" pos:end="175:41"><expr pos:start="175:9" pos:end="175:40"><name pos:start="175:9" pos:end="175:12">comp</name> <operator pos:start="175:14" pos:end="175:14">=</operator> <call pos:start="175:16" pos:end="175:40"><name pos:start="175:16" pos:end="175:34">bytestream_get_le32</name><argument_list pos:start="175:35" pos:end="175:40">(<argument pos:start="175:36" pos:end="175:39"><expr pos:start="175:36" pos:end="175:39"><operator pos:start="175:36" pos:end="175:36">&amp;</operator><name pos:start="175:37" pos:end="175:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="177:5" pos:end="179:23">else<block type="pseudo" pos:start="179:9" pos:end="179:23"><block_content pos:start="179:9" pos:end="179:23">

        <expr_stmt pos:start="179:9" pos:end="179:23"><expr pos:start="179:9" pos:end="179:22"><name pos:start="179:9" pos:end="179:12">comp</name> <operator pos:start="179:14" pos:end="179:14">=</operator> <name pos:start="179:16" pos:end="179:22">BMP_RGB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="183:5" pos:end="191:5"><if pos:start="183:5" pos:end="191:5">if <condition pos:start="183:8" pos:end="185:25">(<expr pos:start="183:9" pos:end="185:24"><name pos:start="183:9" pos:end="183:12">comp</name> <operator pos:start="183:14" pos:end="183:15">!=</operator> <name pos:start="183:17" pos:end="183:23">BMP_RGB</name> <operator pos:start="183:25" pos:end="183:26">&amp;&amp;</operator> <name pos:start="183:28" pos:end="183:31">comp</name> <operator pos:start="183:33" pos:end="183:34">!=</operator> <name pos:start="183:36" pos:end="183:48">BMP_BITFIELDS</name> <operator pos:start="183:50" pos:end="183:51">&amp;&amp;</operator> <name pos:start="183:53" pos:end="183:56">comp</name> <operator pos:start="183:58" pos:end="183:59">!=</operator> <name pos:start="183:61" pos:end="183:68">BMP_RLE4</name> <operator pos:start="183:70" pos:end="183:71">&amp;&amp;</operator>

        <name pos:start="185:9" pos:end="185:12">comp</name> <operator pos:start="185:14" pos:end="185:15">!=</operator> <name pos:start="185:17" pos:end="185:24">BMP_RLE8</name></expr>)</condition> <block pos:start="185:27" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:35">

        <expr_stmt pos:start="187:9" pos:end="187:75"><expr pos:start="187:9" pos:end="187:74"><call pos:start="187:9" pos:end="187:74"><name pos:start="187:9" pos:end="187:14">av_log</name><argument_list pos:start="187:15" pos:end="187:74">(<argument pos:start="187:16" pos:end="187:20"><expr pos:start="187:16" pos:end="187:20"><name pos:start="187:16" pos:end="187:20">avctx</name></expr></argument>, <argument pos:start="187:23" pos:end="187:34"><expr pos:start="187:23" pos:end="187:34"><name pos:start="187:23" pos:end="187:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="187:37" pos:end="187:67"><expr pos:start="187:37" pos:end="187:67"><literal type="string" pos:start="187:37" pos:end="187:67">"BMP coding %d not supported\n"</literal></expr></argument>, <argument pos:start="187:70" pos:end="187:73"><expr pos:start="187:70" pos:end="187:73"><name pos:start="187:70" pos:end="187:73">comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="189:9" pos:end="189:35">return <expr pos:start="189:16" pos:end="189:34"><name pos:start="189:16" pos:end="189:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="195:5" pos:end="209:5"><if pos:start="195:5" pos:end="209:5">if <condition pos:start="195:8" pos:end="195:30">(<expr pos:start="195:9" pos:end="195:29"><name pos:start="195:9" pos:end="195:12">comp</name> <operator pos:start="195:14" pos:end="195:15">==</operator> <name pos:start="195:17" pos:end="195:29">BMP_BITFIELDS</name></expr>)</condition> <block pos:start="195:32" pos:end="209:5">{<block_content pos:start="197:9" pos:end="207:42">

        <expr_stmt pos:start="197:9" pos:end="197:18"><expr pos:start="197:9" pos:end="197:17"><name pos:start="197:9" pos:end="197:11">buf</name> <operator pos:start="197:13" pos:end="197:14">+=</operator> <literal type="number" pos:start="197:16" pos:end="197:17">20</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:43"><expr pos:start="199:9" pos:end="199:42"><name pos:start="199:9" pos:end="199:14"><name pos:start="199:9" pos:end="199:11">rgb</name><index pos:start="199:12" pos:end="199:14">[<expr pos:start="199:13" pos:end="199:13"><literal type="number" pos:start="199:13" pos:end="199:13">0</literal></expr>]</index></name> <operator pos:start="199:16" pos:end="199:16">=</operator> <call pos:start="199:18" pos:end="199:42"><name pos:start="199:18" pos:end="199:36">bytestream_get_le32</name><argument_list pos:start="199:37" pos:end="199:42">(<argument pos:start="199:38" pos:end="199:41"><expr pos:start="199:38" pos:end="199:41"><operator pos:start="199:38" pos:end="199:38">&amp;</operator><name pos:start="199:39" pos:end="199:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:43"><expr pos:start="201:9" pos:end="201:42"><name pos:start="201:9" pos:end="201:14"><name pos:start="201:9" pos:end="201:11">rgb</name><index pos:start="201:12" pos:end="201:14">[<expr pos:start="201:13" pos:end="201:13"><literal type="number" pos:start="201:13" pos:end="201:13">1</literal></expr>]</index></name> <operator pos:start="201:16" pos:end="201:16">=</operator> <call pos:start="201:18" pos:end="201:42"><name pos:start="201:18" pos:end="201:36">bytestream_get_le32</name><argument_list pos:start="201:37" pos:end="201:42">(<argument pos:start="201:38" pos:end="201:41"><expr pos:start="201:38" pos:end="201:41"><operator pos:start="201:38" pos:end="201:38">&amp;</operator><name pos:start="201:39" pos:end="201:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:43"><expr pos:start="203:9" pos:end="203:42"><name pos:start="203:9" pos:end="203:14"><name pos:start="203:9" pos:end="203:11">rgb</name><index pos:start="203:12" pos:end="203:14">[<expr pos:start="203:13" pos:end="203:13"><literal type="number" pos:start="203:13" pos:end="203:13">2</literal></expr>]</index></name> <operator pos:start="203:16" pos:end="203:16">=</operator> <call pos:start="203:18" pos:end="203:42"><name pos:start="203:18" pos:end="203:36">bytestream_get_le32</name><argument_list pos:start="203:37" pos:end="203:42">(<argument pos:start="203:38" pos:end="203:41"><expr pos:start="203:38" pos:end="203:41"><operator pos:start="203:38" pos:end="203:38">&amp;</operator><name pos:start="203:39" pos:end="203:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="207:42"><if pos:start="205:9" pos:end="207:42">if <condition pos:start="205:12" pos:end="205:24">(<expr pos:start="205:13" pos:end="205:23"><name pos:start="205:13" pos:end="205:18">ihsize</name> <operator pos:start="205:20" pos:end="205:20">&gt;</operator> <literal type="number" pos:start="205:22" pos:end="205:23">40</literal></expr>)</condition><block type="pseudo" pos:start="207:9" pos:end="207:42"><block_content pos:start="207:9" pos:end="207:42">

        <expr_stmt pos:start="207:9" pos:end="207:42"><expr pos:start="207:9" pos:end="207:41"><name pos:start="207:9" pos:end="207:13">alpha</name> <operator pos:start="207:15" pos:end="207:15">=</operator> <call pos:start="207:17" pos:end="207:41"><name pos:start="207:17" pos:end="207:35">bytestream_get_le32</name><argument_list pos:start="207:36" pos:end="207:41">(<argument pos:start="207:37" pos:end="207:40"><expr pos:start="207:37" pos:end="207:40"><operator pos:start="207:37" pos:end="207:37">&amp;</operator><name pos:start="207:38" pos:end="207:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:26"><expr pos:start="213:5" pos:end="213:25"><name pos:start="213:5" pos:end="213:16"><name pos:start="213:5" pos:end="213:9">avctx</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:16">width</name></name>  <operator pos:start="213:19" pos:end="213:19">=</operator> <name pos:start="213:21" pos:end="213:25">width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:60"><expr pos:start="215:5" pos:end="215:59"><name pos:start="215:5" pos:end="215:17"><name pos:start="215:5" pos:end="215:9">avctx</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:17">height</name></name> <operator pos:start="215:19" pos:end="215:19">=</operator> <ternary pos:start="215:21" pos:end="215:59"><condition pos:start="215:21" pos:end="215:32"><expr pos:start="215:21" pos:end="215:30"><name pos:start="215:21" pos:end="215:26">height</name> <operator pos:start="215:28" pos:end="215:28">&gt;</operator> <literal type="number" pos:start="215:30" pos:end="215:30">0</literal></expr> ?</condition><then pos:start="215:34" pos:end="215:39"> <expr pos:start="215:34" pos:end="215:39"><name pos:start="215:34" pos:end="215:39">height</name></expr> </then><else pos:start="215:41" pos:end="215:59">: <expr pos:start="215:43" pos:end="215:59"><operator pos:start="215:43" pos:end="215:43">-</operator><operator pos:start="215:44" pos:end="215:44">(</operator><name pos:start="215:45" pos:end="215:52">unsigned</name><operator pos:start="215:53" pos:end="215:53">)</operator><name pos:start="215:54" pos:end="215:59">height</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:37"><expr pos:start="219:5" pos:end="219:36"><name pos:start="219:5" pos:end="219:18"><name pos:start="219:5" pos:end="219:9">avctx</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:18">pix_fmt</name></name> <operator pos:start="219:20" pos:end="219:20">=</operator> <name pos:start="219:22" pos:end="219:36">AV_PIX_FMT_NONE</name></expr>;</expr_stmt>



    <switch pos:start="223:5" pos:end="343:5">switch <condition pos:start="223:12" pos:end="223:18">(<expr pos:start="223:13" pos:end="223:17"><name pos:start="223:13" pos:end="223:17">depth</name></expr>)</condition> <block pos:start="223:20" pos:end="343:5">{<block_content pos:start="225:5" pos:end="341:35">

    <case pos:start="225:5" pos:end="225:12">case <expr pos:start="225:10" pos:end="225:11"><literal type="number" pos:start="225:10" pos:end="225:11">32</literal></expr>:</case>

        <if_stmt pos:start="227:9" pos:end="259:9"><if pos:start="227:9" pos:end="255:9">if <condition pos:start="227:12" pos:end="227:34">(<expr pos:start="227:13" pos:end="227:33"><name pos:start="227:13" pos:end="227:16">comp</name> <operator pos:start="227:18" pos:end="227:19">==</operator> <name pos:start="227:21" pos:end="227:33">BMP_BITFIELDS</name></expr>)</condition> <block pos:start="227:36" pos:end="255:9">{<block_content pos:start="229:13" pos:end="253:13">

            <if_stmt pos:start="229:13" pos:end="253:13"><if pos:start="229:13" pos:end="231:75">if <condition pos:start="229:16" pos:end="229:85">(<expr pos:start="229:17" pos:end="229:84"><name pos:start="229:17" pos:end="229:22"><name pos:start="229:17" pos:end="229:19">rgb</name><index pos:start="229:20" pos:end="229:22">[<expr pos:start="229:21" pos:end="229:21"><literal type="number" pos:start="229:21" pos:end="229:21">0</literal></expr>]</index></name> <operator pos:start="229:24" pos:end="229:25">==</operator> <literal type="number" pos:start="229:27" pos:end="229:36">0xFF000000</literal> <operator pos:start="229:38" pos:end="229:39">&amp;&amp;</operator> <name pos:start="229:41" pos:end="229:46"><name pos:start="229:41" pos:end="229:43">rgb</name><index pos:start="229:44" pos:end="229:46">[<expr pos:start="229:45" pos:end="229:45"><literal type="number" pos:start="229:45" pos:end="229:45">1</literal></expr>]</index></name> <operator pos:start="229:48" pos:end="229:49">==</operator> <literal type="number" pos:start="229:51" pos:end="229:60">0x00FF0000</literal> <operator pos:start="229:62" pos:end="229:63">&amp;&amp;</operator> <name pos:start="229:65" pos:end="229:70"><name pos:start="229:65" pos:end="229:67">rgb</name><index pos:start="229:68" pos:end="229:70">[<expr pos:start="229:69" pos:end="229:69"><literal type="number" pos:start="229:69" pos:end="229:69">2</literal></expr>]</index></name> <operator pos:start="229:72" pos:end="229:73">==</operator> <literal type="number" pos:start="229:75" pos:end="229:84">0x0000FF00</literal></expr>)</condition><block type="pseudo" pos:start="231:17" pos:end="231:75"><block_content pos:start="231:17" pos:end="231:75">

                <expr_stmt pos:start="231:17" pos:end="231:75"><expr pos:start="231:17" pos:end="231:74"><name pos:start="231:17" pos:end="231:30"><name pos:start="231:17" pos:end="231:21">avctx</name><operator pos:start="231:22" pos:end="231:23">-&gt;</operator><name pos:start="231:24" pos:end="231:30">pix_fmt</name></name> <operator pos:start="231:32" pos:end="231:32">=</operator> <ternary pos:start="231:34" pos:end="231:74"><condition pos:start="231:34" pos:end="231:40"><expr pos:start="231:34" pos:end="231:38"><name pos:start="231:34" pos:end="231:38">alpha</name></expr> ?</condition><then pos:start="231:42" pos:end="231:56"> <expr pos:start="231:42" pos:end="231:56"><name pos:start="231:42" pos:end="231:56">AV_PIX_FMT_ABGR</name></expr> </then><else pos:start="231:58" pos:end="231:74">: <expr pos:start="231:60" pos:end="231:74"><name pos:start="231:60" pos:end="231:74">AV_PIX_FMT_0BGR</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="233:13" pos:end="235:75">else if <condition pos:start="233:21" pos:end="233:90">(<expr pos:start="233:22" pos:end="233:89"><name pos:start="233:22" pos:end="233:27"><name pos:start="233:22" pos:end="233:24">rgb</name><index pos:start="233:25" pos:end="233:27">[<expr pos:start="233:26" pos:end="233:26"><literal type="number" pos:start="233:26" pos:end="233:26">0</literal></expr>]</index></name> <operator pos:start="233:29" pos:end="233:30">==</operator> <literal type="number" pos:start="233:32" pos:end="233:41">0x00FF0000</literal> <operator pos:start="233:43" pos:end="233:44">&amp;&amp;</operator> <name pos:start="233:46" pos:end="233:51"><name pos:start="233:46" pos:end="233:48">rgb</name><index pos:start="233:49" pos:end="233:51">[<expr pos:start="233:50" pos:end="233:50"><literal type="number" pos:start="233:50" pos:end="233:50">1</literal></expr>]</index></name> <operator pos:start="233:53" pos:end="233:54">==</operator> <literal type="number" pos:start="233:56" pos:end="233:65">0x0000FF00</literal> <operator pos:start="233:67" pos:end="233:68">&amp;&amp;</operator> <name pos:start="233:70" pos:end="233:75"><name pos:start="233:70" pos:end="233:72">rgb</name><index pos:start="233:73" pos:end="233:75">[<expr pos:start="233:74" pos:end="233:74"><literal type="number" pos:start="233:74" pos:end="233:74">2</literal></expr>]</index></name> <operator pos:start="233:77" pos:end="233:78">==</operator> <literal type="number" pos:start="233:80" pos:end="233:89">0x000000FF</literal></expr>)</condition><block type="pseudo" pos:start="235:17" pos:end="235:75"><block_content pos:start="235:17" pos:end="235:75">

                <expr_stmt pos:start="235:17" pos:end="235:75"><expr pos:start="235:17" pos:end="235:74"><name pos:start="235:17" pos:end="235:30"><name pos:start="235:17" pos:end="235:21">avctx</name><operator pos:start="235:22" pos:end="235:23">-&gt;</operator><name pos:start="235:24" pos:end="235:30">pix_fmt</name></name> <operator pos:start="235:32" pos:end="235:32">=</operator> <ternary pos:start="235:34" pos:end="235:74"><condition pos:start="235:34" pos:end="235:40"><expr pos:start="235:34" pos:end="235:38"><name pos:start="235:34" pos:end="235:38">alpha</name></expr> ?</condition><then pos:start="235:42" pos:end="235:56"> <expr pos:start="235:42" pos:end="235:56"><name pos:start="235:42" pos:end="235:56">AV_PIX_FMT_BGRA</name></expr> </then><else pos:start="235:58" pos:end="235:74">: <expr pos:start="235:60" pos:end="235:74"><name pos:start="235:60" pos:end="235:74">AV_PIX_FMT_BGR0</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="237:13" pos:end="239:75">else if <condition pos:start="237:21" pos:end="237:90">(<expr pos:start="237:22" pos:end="237:89"><name pos:start="237:22" pos:end="237:27"><name pos:start="237:22" pos:end="237:24">rgb</name><index pos:start="237:25" pos:end="237:27">[<expr pos:start="237:26" pos:end="237:26"><literal type="number" pos:start="237:26" pos:end="237:26">0</literal></expr>]</index></name> <operator pos:start="237:29" pos:end="237:30">==</operator> <literal type="number" pos:start="237:32" pos:end="237:41">0x0000FF00</literal> <operator pos:start="237:43" pos:end="237:44">&amp;&amp;</operator> <name pos:start="237:46" pos:end="237:51"><name pos:start="237:46" pos:end="237:48">rgb</name><index pos:start="237:49" pos:end="237:51">[<expr pos:start="237:50" pos:end="237:50"><literal type="number" pos:start="237:50" pos:end="237:50">1</literal></expr>]</index></name> <operator pos:start="237:53" pos:end="237:54">==</operator> <literal type="number" pos:start="237:56" pos:end="237:65">0x00FF0000</literal> <operator pos:start="237:67" pos:end="237:68">&amp;&amp;</operator> <name pos:start="237:70" pos:end="237:75"><name pos:start="237:70" pos:end="237:72">rgb</name><index pos:start="237:73" pos:end="237:75">[<expr pos:start="237:74" pos:end="237:74"><literal type="number" pos:start="237:74" pos:end="237:74">2</literal></expr>]</index></name> <operator pos:start="237:77" pos:end="237:78">==</operator> <literal type="number" pos:start="237:80" pos:end="237:89">0xFF000000</literal></expr>)</condition><block type="pseudo" pos:start="239:17" pos:end="239:75"><block_content pos:start="239:17" pos:end="239:75">

                <expr_stmt pos:start="239:17" pos:end="239:75"><expr pos:start="239:17" pos:end="239:74"><name pos:start="239:17" pos:end="239:30"><name pos:start="239:17" pos:end="239:21">avctx</name><operator pos:start="239:22" pos:end="239:23">-&gt;</operator><name pos:start="239:24" pos:end="239:30">pix_fmt</name></name> <operator pos:start="239:32" pos:end="239:32">=</operator> <ternary pos:start="239:34" pos:end="239:74"><condition pos:start="239:34" pos:end="239:40"><expr pos:start="239:34" pos:end="239:38"><name pos:start="239:34" pos:end="239:38">alpha</name></expr> ?</condition><then pos:start="239:42" pos:end="239:56"> <expr pos:start="239:42" pos:end="239:56"><name pos:start="239:42" pos:end="239:56">AV_PIX_FMT_ARGB</name></expr> </then><else pos:start="239:58" pos:end="239:74">: <expr pos:start="239:60" pos:end="239:74"><name pos:start="239:60" pos:end="239:74">AV_PIX_FMT_0RGB</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="241:13" pos:end="243:75">else if <condition pos:start="241:21" pos:end="241:90">(<expr pos:start="241:22" pos:end="241:89"><name pos:start="241:22" pos:end="241:27"><name pos:start="241:22" pos:end="241:24">rgb</name><index pos:start="241:25" pos:end="241:27">[<expr pos:start="241:26" pos:end="241:26"><literal type="number" pos:start="241:26" pos:end="241:26">0</literal></expr>]</index></name> <operator pos:start="241:29" pos:end="241:30">==</operator> <literal type="number" pos:start="241:32" pos:end="241:41">0x000000FF</literal> <operator pos:start="241:43" pos:end="241:44">&amp;&amp;</operator> <name pos:start="241:46" pos:end="241:51"><name pos:start="241:46" pos:end="241:48">rgb</name><index pos:start="241:49" pos:end="241:51">[<expr pos:start="241:50" pos:end="241:50"><literal type="number" pos:start="241:50" pos:end="241:50">1</literal></expr>]</index></name> <operator pos:start="241:53" pos:end="241:54">==</operator> <literal type="number" pos:start="241:56" pos:end="241:65">0x0000FF00</literal> <operator pos:start="241:67" pos:end="241:68">&amp;&amp;</operator> <name pos:start="241:70" pos:end="241:75"><name pos:start="241:70" pos:end="241:72">rgb</name><index pos:start="241:73" pos:end="241:75">[<expr pos:start="241:74" pos:end="241:74"><literal type="number" pos:start="241:74" pos:end="241:74">2</literal></expr>]</index></name> <operator pos:start="241:77" pos:end="241:78">==</operator> <literal type="number" pos:start="241:80" pos:end="241:89">0x00FF0000</literal></expr>)</condition><block type="pseudo" pos:start="243:17" pos:end="243:75"><block_content pos:start="243:17" pos:end="243:75">

                <expr_stmt pos:start="243:17" pos:end="243:75"><expr pos:start="243:17" pos:end="243:74"><name pos:start="243:17" pos:end="243:30"><name pos:start="243:17" pos:end="243:21">avctx</name><operator pos:start="243:22" pos:end="243:23">-&gt;</operator><name pos:start="243:24" pos:end="243:30">pix_fmt</name></name> <operator pos:start="243:32" pos:end="243:32">=</operator> <ternary pos:start="243:34" pos:end="243:74"><condition pos:start="243:34" pos:end="243:40"><expr pos:start="243:34" pos:end="243:38"><name pos:start="243:34" pos:end="243:38">alpha</name></expr> ?</condition><then pos:start="243:42" pos:end="243:56"> <expr pos:start="243:42" pos:end="243:56"><name pos:start="243:42" pos:end="243:56">AV_PIX_FMT_RGBA</name></expr> </then><else pos:start="243:58" pos:end="243:74">: <expr pos:start="243:60" pos:end="243:74"><name pos:start="243:60" pos:end="243:74">AV_PIX_FMT_RGB0</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="245:13" pos:end="253:13">else <block pos:start="245:18" pos:end="253:13">{<block_content pos:start="247:17" pos:end="251:39">

                <expr_stmt pos:start="247:17" pos:end="249:85"><expr pos:start="247:17" pos:end="249:84"><call pos:start="247:17" pos:end="249:84"><name pos:start="247:17" pos:end="247:22">av_log</name><argument_list pos:start="247:23" pos:end="249:84">(<argument pos:start="247:24" pos:end="247:28"><expr pos:start="247:24" pos:end="247:28"><name pos:start="247:24" pos:end="247:28">avctx</name></expr></argument>, <argument pos:start="247:31" pos:end="247:42"><expr pos:start="247:31" pos:end="247:42"><name pos:start="247:31" pos:end="247:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="247:45" pos:end="249:59"><expr pos:start="247:45" pos:end="249:59"><literal type="string" pos:start="247:45" pos:end="247:64">"Unknown bitfields "</literal>

                       <literal type="string" pos:start="249:24" pos:end="249:27">"%0"</literal><name pos:start="249:28" pos:end="249:33">PRIX32</name><literal type="string" pos:start="249:34" pos:end="249:38">" %0"</literal><name pos:start="249:39" pos:end="249:44">PRIX32</name><literal type="string" pos:start="249:45" pos:end="249:49">" %0"</literal><name pos:start="249:50" pos:end="249:55">PRIX32</name><literal type="string" pos:start="249:56" pos:end="249:59">"\n"</literal></expr></argument>, <argument pos:start="249:62" pos:end="249:67"><expr pos:start="249:62" pos:end="249:67"><name pos:start="249:62" pos:end="249:67"><name pos:start="249:62" pos:end="249:64">rgb</name><index pos:start="249:65" pos:end="249:67">[<expr pos:start="249:66" pos:end="249:66"><literal type="number" pos:start="249:66" pos:end="249:66">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="249:70" pos:end="249:75"><expr pos:start="249:70" pos:end="249:75"><name pos:start="249:70" pos:end="249:75"><name pos:start="249:70" pos:end="249:72">rgb</name><index pos:start="249:73" pos:end="249:75">[<expr pos:start="249:74" pos:end="249:74"><literal type="number" pos:start="249:74" pos:end="249:74">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="249:78" pos:end="249:83"><expr pos:start="249:78" pos:end="249:83"><name pos:start="249:78" pos:end="249:83"><name pos:start="249:78" pos:end="249:80">rgb</name><index pos:start="249:81" pos:end="249:83">[<expr pos:start="249:82" pos:end="249:82"><literal type="number" pos:start="249:82" pos:end="249:82">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="251:17" pos:end="251:39">return <expr pos:start="251:24" pos:end="251:38"><call pos:start="251:24" pos:end="251:38"><name pos:start="251:24" pos:end="251:30">AVERROR</name><argument_list pos:start="251:31" pos:end="251:38">(<argument pos:start="251:32" pos:end="251:37"><expr pos:start="251:32" pos:end="251:37"><name pos:start="251:32" pos:end="251:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="255:11" pos:end="259:9">else <block pos:start="255:16" pos:end="259:9">{<block_content pos:start="257:13" pos:end="257:45">

            <expr_stmt pos:start="257:13" pos:end="257:45"><expr pos:start="257:13" pos:end="257:44"><name pos:start="257:13" pos:end="257:26"><name pos:start="257:13" pos:end="257:17">avctx</name><operator pos:start="257:18" pos:end="257:19">-&gt;</operator><name pos:start="257:20" pos:end="257:26">pix_fmt</name></name> <operator pos:start="257:28" pos:end="257:28">=</operator> <name pos:start="257:30" pos:end="257:44">AV_PIX_FMT_BGRA</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="261:9" pos:end="261:14">break;</break>

    <case pos:start="263:5" pos:end="263:12">case <expr pos:start="263:10" pos:end="263:11"><literal type="number" pos:start="263:10" pos:end="263:11">24</literal></expr>:</case>

        <expr_stmt pos:start="265:9" pos:end="265:42"><expr pos:start="265:9" pos:end="265:41"><name pos:start="265:9" pos:end="265:22"><name pos:start="265:9" pos:end="265:13">avctx</name><operator pos:start="265:14" pos:end="265:15">-&gt;</operator><name pos:start="265:16" pos:end="265:22">pix_fmt</name></name> <operator pos:start="265:24" pos:end="265:24">=</operator> <name pos:start="265:26" pos:end="265:41">AV_PIX_FMT_BGR24</name></expr>;</expr_stmt>

        <break pos:start="267:9" pos:end="267:14">break;</break>

    <case pos:start="269:5" pos:end="269:12">case <expr pos:start="269:10" pos:end="269:11"><literal type="number" pos:start="269:10" pos:end="269:11">16</literal></expr>:</case>

        <if_stmt pos:start="271:9" pos:end="301:9"><if pos:start="271:9" pos:end="273:47">if <condition pos:start="271:12" pos:end="271:28">(<expr pos:start="271:13" pos:end="271:27"><name pos:start="271:13" pos:end="271:16">comp</name> <operator pos:start="271:18" pos:end="271:19">==</operator> <name pos:start="271:21" pos:end="271:27">BMP_RGB</name></expr>)</condition><block type="pseudo" pos:start="273:13" pos:end="273:47"><block_content pos:start="273:13" pos:end="273:47">

            <expr_stmt pos:start="273:13" pos:end="273:47"><expr pos:start="273:13" pos:end="273:46"><name pos:start="273:13" pos:end="273:26"><name pos:start="273:13" pos:end="273:17">avctx</name><operator pos:start="273:18" pos:end="273:19">-&gt;</operator><name pos:start="273:20" pos:end="273:26">pix_fmt</name></name> <operator pos:start="273:28" pos:end="273:28">=</operator> <name pos:start="273:30" pos:end="273:46">AV_PIX_FMT_RGB555</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="275:9" pos:end="301:9">else if <condition pos:start="275:17" pos:end="275:39">(<expr pos:start="275:18" pos:end="275:38"><name pos:start="275:18" pos:end="275:21">comp</name> <operator pos:start="275:23" pos:end="275:24">==</operator> <name pos:start="275:26" pos:end="275:38">BMP_BITFIELDS</name></expr>)</condition> <block pos:start="275:41" pos:end="301:9">{<block_content pos:start="277:13" pos:end="299:13">

            <if_stmt pos:start="277:13" pos:end="299:13"><if pos:start="277:13" pos:end="279:50">if <condition pos:start="277:16" pos:end="277:73">(<expr pos:start="277:17" pos:end="277:72"><name pos:start="277:17" pos:end="277:22"><name pos:start="277:17" pos:end="277:19">rgb</name><index pos:start="277:20" pos:end="277:22">[<expr pos:start="277:21" pos:end="277:21"><literal type="number" pos:start="277:21" pos:end="277:21">0</literal></expr>]</index></name> <operator pos:start="277:24" pos:end="277:25">==</operator> <literal type="number" pos:start="277:27" pos:end="277:32">0xF800</literal> <operator pos:start="277:34" pos:end="277:35">&amp;&amp;</operator> <name pos:start="277:37" pos:end="277:42"><name pos:start="277:37" pos:end="277:39">rgb</name><index pos:start="277:40" pos:end="277:42">[<expr pos:start="277:41" pos:end="277:41"><literal type="number" pos:start="277:41" pos:end="277:41">1</literal></expr>]</index></name> <operator pos:start="277:44" pos:end="277:45">==</operator> <literal type="number" pos:start="277:47" pos:end="277:52">0x07E0</literal> <operator pos:start="277:54" pos:end="277:55">&amp;&amp;</operator> <name pos:start="277:57" pos:end="277:62"><name pos:start="277:57" pos:end="277:59">rgb</name><index pos:start="277:60" pos:end="277:62">[<expr pos:start="277:61" pos:end="277:61"><literal type="number" pos:start="277:61" pos:end="277:61">2</literal></expr>]</index></name> <operator pos:start="277:64" pos:end="277:65">==</operator> <literal type="number" pos:start="277:67" pos:end="277:72">0x001F</literal></expr>)</condition><block type="pseudo" pos:start="279:16" pos:end="279:50"><block_content pos:start="279:16" pos:end="279:50">

               <expr_stmt pos:start="279:16" pos:end="279:50"><expr pos:start="279:16" pos:end="279:49"><name pos:start="279:16" pos:end="279:29"><name pos:start="279:16" pos:end="279:20">avctx</name><operator pos:start="279:21" pos:end="279:22">-&gt;</operator><name pos:start="279:23" pos:end="279:29">pix_fmt</name></name> <operator pos:start="279:31" pos:end="279:31">=</operator> <name pos:start="279:33" pos:end="279:49">AV_PIX_FMT_RGB565</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="281:13" pos:end="283:50">else if <condition pos:start="281:21" pos:end="281:78">(<expr pos:start="281:22" pos:end="281:77"><name pos:start="281:22" pos:end="281:27"><name pos:start="281:22" pos:end="281:24">rgb</name><index pos:start="281:25" pos:end="281:27">[<expr pos:start="281:26" pos:end="281:26"><literal type="number" pos:start="281:26" pos:end="281:26">0</literal></expr>]</index></name> <operator pos:start="281:29" pos:end="281:30">==</operator> <literal type="number" pos:start="281:32" pos:end="281:37">0x7C00</literal> <operator pos:start="281:39" pos:end="281:40">&amp;&amp;</operator> <name pos:start="281:42" pos:end="281:47"><name pos:start="281:42" pos:end="281:44">rgb</name><index pos:start="281:45" pos:end="281:47">[<expr pos:start="281:46" pos:end="281:46"><literal type="number" pos:start="281:46" pos:end="281:46">1</literal></expr>]</index></name> <operator pos:start="281:49" pos:end="281:50">==</operator> <literal type="number" pos:start="281:52" pos:end="281:57">0x03E0</literal> <operator pos:start="281:59" pos:end="281:60">&amp;&amp;</operator> <name pos:start="281:62" pos:end="281:67"><name pos:start="281:62" pos:end="281:64">rgb</name><index pos:start="281:65" pos:end="281:67">[<expr pos:start="281:66" pos:end="281:66"><literal type="number" pos:start="281:66" pos:end="281:66">2</literal></expr>]</index></name> <operator pos:start="281:69" pos:end="281:70">==</operator> <literal type="number" pos:start="281:72" pos:end="281:77">0x001F</literal></expr>)</condition><block type="pseudo" pos:start="283:16" pos:end="283:50"><block_content pos:start="283:16" pos:end="283:50">

               <expr_stmt pos:start="283:16" pos:end="283:50"><expr pos:start="283:16" pos:end="283:49"><name pos:start="283:16" pos:end="283:29"><name pos:start="283:16" pos:end="283:20">avctx</name><operator pos:start="283:21" pos:end="283:22">-&gt;</operator><name pos:start="283:23" pos:end="283:29">pix_fmt</name></name> <operator pos:start="283:31" pos:end="283:31">=</operator> <name pos:start="283:33" pos:end="283:49">AV_PIX_FMT_RGB555</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="285:13" pos:end="287:50">else if <condition pos:start="285:21" pos:end="285:78">(<expr pos:start="285:22" pos:end="285:77"><name pos:start="285:22" pos:end="285:27"><name pos:start="285:22" pos:end="285:24">rgb</name><index pos:start="285:25" pos:end="285:27">[<expr pos:start="285:26" pos:end="285:26"><literal type="number" pos:start="285:26" pos:end="285:26">0</literal></expr>]</index></name> <operator pos:start="285:29" pos:end="285:30">==</operator> <literal type="number" pos:start="285:32" pos:end="285:37">0x0F00</literal> <operator pos:start="285:39" pos:end="285:40">&amp;&amp;</operator> <name pos:start="285:42" pos:end="285:47"><name pos:start="285:42" pos:end="285:44">rgb</name><index pos:start="285:45" pos:end="285:47">[<expr pos:start="285:46" pos:end="285:46"><literal type="number" pos:start="285:46" pos:end="285:46">1</literal></expr>]</index></name> <operator pos:start="285:49" pos:end="285:50">==</operator> <literal type="number" pos:start="285:52" pos:end="285:57">0x00F0</literal> <operator pos:start="285:59" pos:end="285:60">&amp;&amp;</operator> <name pos:start="285:62" pos:end="285:67"><name pos:start="285:62" pos:end="285:64">rgb</name><index pos:start="285:65" pos:end="285:67">[<expr pos:start="285:66" pos:end="285:66"><literal type="number" pos:start="285:66" pos:end="285:66">2</literal></expr>]</index></name> <operator pos:start="285:69" pos:end="285:70">==</operator> <literal type="number" pos:start="285:72" pos:end="285:77">0x000F</literal></expr>)</condition><block type="pseudo" pos:start="287:16" pos:end="287:50"><block_content pos:start="287:16" pos:end="287:50">

               <expr_stmt pos:start="287:16" pos:end="287:50"><expr pos:start="287:16" pos:end="287:49"><name pos:start="287:16" pos:end="287:29"><name pos:start="287:16" pos:end="287:20">avctx</name><operator pos:start="287:21" pos:end="287:22">-&gt;</operator><name pos:start="287:23" pos:end="287:29">pix_fmt</name></name> <operator pos:start="287:31" pos:end="287:31">=</operator> <name pos:start="287:33" pos:end="287:49">AV_PIX_FMT_RGB444</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="289:13" pos:end="299:13">else <block pos:start="289:18" pos:end="299:13">{<block_content pos:start="291:16" pos:end="297:38">

               <expr_stmt pos:start="291:16" pos:end="295:46"><expr pos:start="291:16" pos:end="295:45"><call pos:start="291:16" pos:end="295:45"><name pos:start="291:16" pos:end="291:21">av_log</name><argument_list pos:start="291:22" pos:end="295:45">(<argument pos:start="291:23" pos:end="291:27"><expr pos:start="291:23" pos:end="291:27"><name pos:start="291:23" pos:end="291:27">avctx</name></expr></argument>, <argument pos:start="291:30" pos:end="291:41"><expr pos:start="291:30" pos:end="291:41"><name pos:start="291:30" pos:end="291:41">AV_LOG_ERROR</name></expr></argument>,

                      <argument pos:start="293:23" pos:end="293:76"><expr pos:start="293:23" pos:end="293:76"><literal type="string" pos:start="293:23" pos:end="293:44">"Unknown bitfields %0"</literal><name pos:start="293:45" pos:end="293:50">PRIX32</name><literal type="string" pos:start="293:51" pos:end="293:55">" %0"</literal><name pos:start="293:56" pos:end="293:61">PRIX32</name><literal type="string" pos:start="293:62" pos:end="293:66">" %0"</literal><name pos:start="293:67" pos:end="293:72">PRIX32</name><literal type="string" pos:start="293:73" pos:end="293:76">"\n"</literal></expr></argument>,

                      <argument pos:start="295:23" pos:end="295:28"><expr pos:start="295:23" pos:end="295:28"><name pos:start="295:23" pos:end="295:28"><name pos:start="295:23" pos:end="295:25">rgb</name><index pos:start="295:26" pos:end="295:28">[<expr pos:start="295:27" pos:end="295:27"><literal type="number" pos:start="295:27" pos:end="295:27">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="295:31" pos:end="295:36"><expr pos:start="295:31" pos:end="295:36"><name pos:start="295:31" pos:end="295:36"><name pos:start="295:31" pos:end="295:33">rgb</name><index pos:start="295:34" pos:end="295:36">[<expr pos:start="295:35" pos:end="295:35"><literal type="number" pos:start="295:35" pos:end="295:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="295:39" pos:end="295:44"><expr pos:start="295:39" pos:end="295:44"><name pos:start="295:39" pos:end="295:44"><name pos:start="295:39" pos:end="295:41">rgb</name><index pos:start="295:42" pos:end="295:44">[<expr pos:start="295:43" pos:end="295:43"><literal type="number" pos:start="295:43" pos:end="295:43">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <return pos:start="297:16" pos:end="297:38">return <expr pos:start="297:23" pos:end="297:37"><call pos:start="297:23" pos:end="297:37"><name pos:start="297:23" pos:end="297:29">AVERROR</name><argument_list pos:start="297:30" pos:end="297:37">(<argument pos:start="297:31" pos:end="297:36"><expr pos:start="297:31" pos:end="297:36"><name pos:start="297:31" pos:end="297:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="303:9" pos:end="303:14">break;</break>

    <case pos:start="305:5" pos:end="305:11">case <expr pos:start="305:10" pos:end="305:10"><literal type="number" pos:start="305:10" pos:end="305:10">8</literal></expr>:</case>

        <if_stmt pos:start="307:9" pos:end="313:46"><if pos:start="307:9" pos:end="309:45">if <condition pos:start="307:12" pos:end="307:36">(<expr pos:start="307:13" pos:end="307:35"><name pos:start="307:13" pos:end="307:17">hsize</name> <operator pos:start="307:19" pos:end="307:19">-</operator> <name pos:start="307:21" pos:end="307:26">ihsize</name> <operator pos:start="307:28" pos:end="307:28">-</operator> <literal type="number" pos:start="307:30" pos:end="307:31">14</literal> <operator pos:start="307:33" pos:end="307:33">&gt;</operator> <literal type="number" pos:start="307:35" pos:end="307:35">0</literal></expr>)</condition><block type="pseudo" pos:start="309:13" pos:end="309:45"><block_content pos:start="309:13" pos:end="309:45">

            <expr_stmt pos:start="309:13" pos:end="309:45"><expr pos:start="309:13" pos:end="309:44"><name pos:start="309:13" pos:end="309:26"><name pos:start="309:13" pos:end="309:17">avctx</name><operator pos:start="309:18" pos:end="309:19">-&gt;</operator><name pos:start="309:20" pos:end="309:26">pix_fmt</name></name> <operator pos:start="309:28" pos:end="309:28">=</operator> <name pos:start="309:30" pos:end="309:44">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="311:9" pos:end="313:46">else<block type="pseudo" pos:start="313:13" pos:end="313:46"><block_content pos:start="313:13" pos:end="313:46">

            <expr_stmt pos:start="313:13" pos:end="313:46"><expr pos:start="313:13" pos:end="313:45"><name pos:start="313:13" pos:end="313:26"><name pos:start="313:13" pos:end="313:17">avctx</name><operator pos:start="313:18" pos:end="313:19">-&gt;</operator><name pos:start="313:20" pos:end="313:26">pix_fmt</name></name> <operator pos:start="313:28" pos:end="313:28">=</operator> <name pos:start="313:30" pos:end="313:45">AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="315:9" pos:end="315:14">break;</break>

    <case pos:start="317:5" pos:end="317:11">case <expr pos:start="317:10" pos:end="317:10"><literal type="number" pos:start="317:10" pos:end="317:10">1</literal></expr>:</case>

    <case pos:start="319:5" pos:end="319:11">case <expr pos:start="319:10" pos:end="319:10"><literal type="number" pos:start="319:10" pos:end="319:10">4</literal></expr>:</case>

        <if_stmt pos:start="321:9" pos:end="333:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:36">(<expr pos:start="321:13" pos:end="321:35"><name pos:start="321:13" pos:end="321:17">hsize</name> <operator pos:start="321:19" pos:end="321:19">-</operator> <name pos:start="321:21" pos:end="321:26">ihsize</name> <operator pos:start="321:28" pos:end="321:28">-</operator> <literal type="number" pos:start="321:30" pos:end="321:31">14</literal> <operator pos:start="321:33" pos:end="321:33">&gt;</operator> <literal type="number" pos:start="321:35" pos:end="321:35">0</literal></expr>)</condition> <block pos:start="321:38" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:45">

            <expr_stmt pos:start="323:13" pos:end="323:45"><expr pos:start="323:13" pos:end="323:44"><name pos:start="323:13" pos:end="323:26"><name pos:start="323:13" pos:end="323:17">avctx</name><operator pos:start="323:18" pos:end="323:19">-&gt;</operator><name pos:start="323:20" pos:end="323:26">pix_fmt</name></name> <operator pos:start="323:28" pos:end="323:28">=</operator> <name pos:start="323:30" pos:end="323:44">AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="325:11" pos:end="333:9">else <block pos:start="325:16" pos:end="333:9">{<block_content pos:start="327:13" pos:end="331:39">

            <expr_stmt pos:start="327:13" pos:end="329:31"><expr pos:start="327:13" pos:end="329:30"><call pos:start="327:13" pos:end="329:30"><name pos:start="327:13" pos:end="327:18">av_log</name><argument_list pos:start="327:19" pos:end="329:30">(<argument pos:start="327:20" pos:end="327:24"><expr pos:start="327:20" pos:end="327:24"><name pos:start="327:20" pos:end="327:24">avctx</name></expr></argument>, <argument pos:start="327:27" pos:end="327:38"><expr pos:start="327:27" pos:end="327:38"><name pos:start="327:27" pos:end="327:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="327:41" pos:end="327:77"><expr pos:start="327:41" pos:end="327:77"><literal type="string" pos:start="327:41" pos:end="327:77">"Unknown palette for %u-colour BMP\n"</literal></expr></argument>,

                   <argument pos:start="329:20" pos:end="329:29"><expr pos:start="329:20" pos:end="329:29"><literal type="number" pos:start="329:20" pos:end="329:20">1</literal> <operator pos:start="329:22" pos:end="329:23">&lt;&lt;</operator> <name pos:start="329:25" pos:end="329:29">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="331:13" pos:end="331:39">return <expr pos:start="331:20" pos:end="331:38"><name pos:start="331:20" pos:end="331:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <break pos:start="335:9" pos:end="335:14">break;</break>

    <default pos:start="337:5" pos:end="337:12">default:</default>

        <expr_stmt pos:start="339:9" pos:end="339:71"><expr pos:start="339:9" pos:end="339:70"><call pos:start="339:9" pos:end="339:70"><name pos:start="339:9" pos:end="339:14">av_log</name><argument_list pos:start="339:15" pos:end="339:70">(<argument pos:start="339:16" pos:end="339:20"><expr pos:start="339:16" pos:end="339:20"><name pos:start="339:16" pos:end="339:20">avctx</name></expr></argument>, <argument pos:start="339:23" pos:end="339:34"><expr pos:start="339:23" pos:end="339:34"><name pos:start="339:23" pos:end="339:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="339:37" pos:end="339:62"><expr pos:start="339:37" pos:end="339:62"><literal type="string" pos:start="339:37" pos:end="339:62">"depth %u not supported\n"</literal></expr></argument>, <argument pos:start="339:65" pos:end="339:69"><expr pos:start="339:65" pos:end="339:69"><name pos:start="339:65" pos:end="339:69">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="341:9" pos:end="341:35">return <expr pos:start="341:16" pos:end="341:34"><name pos:start="341:16" pos:end="341:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="347:5" pos:end="353:5"><if pos:start="347:5" pos:end="353:5">if <condition pos:start="347:8" pos:end="347:42">(<expr pos:start="347:9" pos:end="347:41"><name pos:start="347:9" pos:end="347:22"><name pos:start="347:9" pos:end="347:13">avctx</name><operator pos:start="347:14" pos:end="347:15">-&gt;</operator><name pos:start="347:16" pos:end="347:22">pix_fmt</name></name> <operator pos:start="347:24" pos:end="347:25">==</operator> <name pos:start="347:27" pos:end="347:41">AV_PIX_FMT_NONE</name></expr>)</condition> <block pos:start="347:44" pos:end="353:5">{<block_content pos:start="349:9" pos:end="351:35">

        <expr_stmt pos:start="349:9" pos:end="349:66"><expr pos:start="349:9" pos:end="349:65"><call pos:start="349:9" pos:end="349:65"><name pos:start="349:9" pos:end="349:14">av_log</name><argument_list pos:start="349:15" pos:end="349:65">(<argument pos:start="349:16" pos:end="349:20"><expr pos:start="349:16" pos:end="349:20"><name pos:start="349:16" pos:end="349:20">avctx</name></expr></argument>, <argument pos:start="349:23" pos:end="349:34"><expr pos:start="349:23" pos:end="349:34"><name pos:start="349:23" pos:end="349:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="349:37" pos:end="349:64"><expr pos:start="349:37" pos:end="349:64"><literal type="string" pos:start="349:37" pos:end="349:64">"unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="351:9" pos:end="351:35">return <expr pos:start="351:16" pos:end="351:34"><name pos:start="351:16" pos:end="351:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="357:5" pos:end="359:19"><if pos:start="357:5" pos:end="359:19">if <condition pos:start="357:8" pos:end="357:47">(<expr pos:start="357:9" pos:end="357:46"><operator pos:start="357:9" pos:end="357:9">(</operator><name pos:start="357:10" pos:end="357:12">ret</name> <operator pos:start="357:14" pos:end="357:14">=</operator> <call pos:start="357:16" pos:end="357:41"><name pos:start="357:16" pos:end="357:28">ff_get_buffer</name><argument_list pos:start="357:29" pos:end="357:41">(<argument pos:start="357:30" pos:end="357:34"><expr pos:start="357:30" pos:end="357:34"><name pos:start="357:30" pos:end="357:34">avctx</name></expr></argument>, <argument pos:start="357:37" pos:end="357:37"><expr pos:start="357:37" pos:end="357:37"><name pos:start="357:37" pos:end="357:37">p</name></expr></argument>, <argument pos:start="357:40" pos:end="357:40"><expr pos:start="357:40" pos:end="357:40"><literal type="number" pos:start="357:40" pos:end="357:40">0</literal></expr></argument>)</argument_list></call><operator pos:start="357:42" pos:end="357:42">)</operator> <operator pos:start="357:44" pos:end="357:44">&lt;</operator> <literal type="number" pos:start="357:46" pos:end="357:46">0</literal></expr>)</condition><block type="pseudo" pos:start="359:9" pos:end="359:19"><block_content pos:start="359:9" pos:end="359:19">

        <return pos:start="359:9" pos:end="359:19">return <expr pos:start="359:16" pos:end="359:18"><name pos:start="359:16" pos:end="359:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:37"><expr pos:start="361:5" pos:end="361:36"><name pos:start="361:5" pos:end="361:16"><name pos:start="361:5" pos:end="361:5">p</name><operator pos:start="361:6" pos:end="361:7">-&gt;</operator><name pos:start="361:8" pos:end="361:16">pict_type</name></name> <operator pos:start="361:18" pos:end="361:18">=</operator> <name pos:start="361:20" pos:end="361:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:21"><expr pos:start="363:5" pos:end="363:20"><name pos:start="363:5" pos:end="363:16"><name pos:start="363:5" pos:end="363:5">p</name><operator pos:start="363:6" pos:end="363:7">-&gt;</operator><name pos:start="363:8" pos:end="363:16">key_frame</name></name> <operator pos:start="363:18" pos:end="363:18">=</operator> <literal type="number" pos:start="363:20" pos:end="363:20">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="367:5" pos:end="367:25"><expr pos:start="367:5" pos:end="367:24"><name pos:start="367:5" pos:end="367:7">buf</name>   <operator pos:start="367:11" pos:end="367:11">=</operator> <name pos:start="367:13" pos:end="367:16">buf0</name> <operator pos:start="367:18" pos:end="367:18">+</operator> <name pos:start="367:20" pos:end="367:24">hsize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:29"><expr pos:start="369:5" pos:end="369:28"><name pos:start="369:5" pos:end="369:9">dsize</name> <operator pos:start="369:11" pos:end="369:11">=</operator> <name pos:start="369:13" pos:end="369:20">buf_size</name> <operator pos:start="369:22" pos:end="369:22">-</operator> <name pos:start="369:24" pos:end="369:28">hsize</name></expr>;</expr_stmt>



    <comment type="block" pos:start="373:5" pos:end="373:41">/* Line size in file multiple of 4 */</comment>

    <expr_stmt pos:start="375:5" pos:end="375:47"><expr pos:start="375:5" pos:end="375:46"><name pos:start="375:5" pos:end="375:5">n</name> <operator pos:start="375:7" pos:end="375:7">=</operator> <operator pos:start="375:9" pos:end="375:9">(</operator><operator pos:start="375:10" pos:end="375:10">(</operator><name pos:start="375:11" pos:end="375:22"><name pos:start="375:11" pos:end="375:15">avctx</name><operator pos:start="375:16" pos:end="375:17">-&gt;</operator><name pos:start="375:18" pos:end="375:22">width</name></name> <operator pos:start="375:24" pos:end="375:24">*</operator> <name pos:start="375:26" pos:end="375:30">depth</name> <operator pos:start="375:32" pos:end="375:32">+</operator> <literal type="number" pos:start="375:34" pos:end="375:35">31</literal><operator pos:start="375:36" pos:end="375:36">)</operator> <operator pos:start="375:38" pos:end="375:38">/</operator> <literal type="number" pos:start="375:40" pos:end="375:40">8</literal><operator pos:start="375:41" pos:end="375:41">)</operator> <operator pos:start="375:43" pos:end="375:43">&amp;</operator> <operator pos:start="375:45" pos:end="375:45">~</operator><literal type="number" pos:start="375:46" pos:end="375:46">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="379:5" pos:end="395:5"><if pos:start="379:5" pos:end="395:5">if <condition pos:start="379:8" pos:end="379:74">(<expr pos:start="379:9" pos:end="379:73"><name pos:start="379:9" pos:end="379:9">n</name> <operator pos:start="379:11" pos:end="379:11">*</operator> <name pos:start="379:13" pos:end="379:25"><name pos:start="379:13" pos:end="379:17">avctx</name><operator pos:start="379:18" pos:end="379:19">-&gt;</operator><name pos:start="379:20" pos:end="379:25">height</name></name> <operator pos:start="379:27" pos:end="379:27">&gt;</operator> <name pos:start="379:29" pos:end="379:33">dsize</name> <operator pos:start="379:35" pos:end="379:36">&amp;&amp;</operator> <name pos:start="379:38" pos:end="379:41">comp</name> <operator pos:start="379:43" pos:end="379:44">!=</operator> <name pos:start="379:46" pos:end="379:53">BMP_RLE4</name> <operator pos:start="379:55" pos:end="379:56">&amp;&amp;</operator> <name pos:start="379:58" pos:end="379:61">comp</name> <operator pos:start="379:63" pos:end="379:64">!=</operator> <name pos:start="379:66" pos:end="379:73">BMP_RLE8</name></expr>)</condition> <block pos:start="379:76" pos:end="395:5">{<block_content pos:start="381:9" pos:end="393:94">

        <expr_stmt pos:start="381:9" pos:end="381:43"><expr pos:start="381:9" pos:end="381:42"><name pos:start="381:9" pos:end="381:9">n</name> <operator pos:start="381:11" pos:end="381:11">=</operator> <operator pos:start="381:13" pos:end="381:13">(</operator><name pos:start="381:14" pos:end="381:25"><name pos:start="381:14" pos:end="381:18">avctx</name><operator pos:start="381:19" pos:end="381:20">-&gt;</operator><name pos:start="381:21" pos:end="381:25">width</name></name> <operator pos:start="381:27" pos:end="381:27">*</operator> <name pos:start="381:29" pos:end="381:33">depth</name> <operator pos:start="381:35" pos:end="381:35">+</operator> <literal type="number" pos:start="381:37" pos:end="381:37">7</literal><operator pos:start="381:38" pos:end="381:38">)</operator> <operator pos:start="381:40" pos:end="381:40">/</operator> <literal type="number" pos:start="381:42" pos:end="381:42">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="383:9" pos:end="391:9"><if pos:start="383:9" pos:end="391:9">if <condition pos:start="383:12" pos:end="383:38">(<expr pos:start="383:13" pos:end="383:37"><name pos:start="383:13" pos:end="383:13">n</name> <operator pos:start="383:15" pos:end="383:15">*</operator> <name pos:start="383:17" pos:end="383:29"><name pos:start="383:17" pos:end="383:21">avctx</name><operator pos:start="383:22" pos:end="383:23">-&gt;</operator><name pos:start="383:24" pos:end="383:29">height</name></name> <operator pos:start="383:31" pos:end="383:31">&gt;</operator> <name pos:start="383:33" pos:end="383:37">dsize</name></expr>)</condition> <block pos:start="383:40" pos:end="391:9">{<block_content pos:start="385:13" pos:end="389:39">

            <expr_stmt pos:start="385:13" pos:end="387:45"><expr pos:start="385:13" pos:end="387:44"><call pos:start="385:13" pos:end="387:44"><name pos:start="385:13" pos:end="385:18">av_log</name><argument_list pos:start="385:19" pos:end="387:44">(<argument pos:start="385:20" pos:end="385:24"><expr pos:start="385:20" pos:end="385:24"><name pos:start="385:20" pos:end="385:24">avctx</name></expr></argument>, <argument pos:start="385:27" pos:end="385:38"><expr pos:start="385:27" pos:end="385:38"><name pos:start="385:27" pos:end="385:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="385:41" pos:end="385:69"><expr pos:start="385:41" pos:end="385:69"><literal type="string" pos:start="385:41" pos:end="385:69">"not enough data (%d &lt; %d)\n"</literal></expr></argument>,

                   <argument pos:start="387:20" pos:end="387:24"><expr pos:start="387:20" pos:end="387:24"><name pos:start="387:20" pos:end="387:24">dsize</name></expr></argument>, <argument pos:start="387:27" pos:end="387:43"><expr pos:start="387:27" pos:end="387:43"><name pos:start="387:27" pos:end="387:27">n</name> <operator pos:start="387:29" pos:end="387:29">*</operator> <name pos:start="387:31" pos:end="387:43"><name pos:start="387:31" pos:end="387:35">avctx</name><operator pos:start="387:36" pos:end="387:37">-&gt;</operator><name pos:start="387:38" pos:end="387:43">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="389:13" pos:end="389:39">return <expr pos:start="389:20" pos:end="389:38"><name pos:start="389:20" pos:end="389:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:94"><expr pos:start="393:9" pos:end="393:93"><call pos:start="393:9" pos:end="393:93"><name pos:start="393:9" pos:end="393:14">av_log</name><argument_list pos:start="393:15" pos:end="393:93">(<argument pos:start="393:16" pos:end="393:20"><expr pos:start="393:16" pos:end="393:20"><name pos:start="393:16" pos:end="393:20">avctx</name></expr></argument>, <argument pos:start="393:23" pos:end="393:34"><expr pos:start="393:23" pos:end="393:34"><name pos:start="393:23" pos:end="393:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="393:37" pos:end="393:92"><expr pos:start="393:37" pos:end="393:92"><literal type="string" pos:start="393:37" pos:end="393:92">"data size too small, assuming missing line alignment\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="399:5" pos:end="399:81">// RLE may skip decoding some picture areas, so blank picture before decoding</comment>

    <if_stmt pos:start="401:5" pos:end="403:62"><if pos:start="401:5" pos:end="403:62">if <condition pos:start="401:8" pos:end="401:45">(<expr pos:start="401:9" pos:end="401:44"><name pos:start="401:9" pos:end="401:12">comp</name> <operator pos:start="401:14" pos:end="401:15">==</operator> <name pos:start="401:17" pos:end="401:24">BMP_RLE4</name> <operator pos:start="401:26" pos:end="401:27">||</operator> <name pos:start="401:29" pos:end="401:32">comp</name> <operator pos:start="401:34" pos:end="401:35">==</operator> <name pos:start="401:37" pos:end="401:44">BMP_RLE8</name></expr>)</condition><block type="pseudo" pos:start="403:9" pos:end="403:62"><block_content pos:start="403:9" pos:end="403:62">

        <expr_stmt pos:start="403:9" pos:end="403:62"><expr pos:start="403:9" pos:end="403:61"><call pos:start="403:9" pos:end="403:61"><name pos:start="403:9" pos:end="403:14">memset</name><argument_list pos:start="403:15" pos:end="403:61">(<argument pos:start="403:16" pos:end="403:25"><expr pos:start="403:16" pos:end="403:25"><name pos:start="403:16" pos:end="403:25"><name pos:start="403:16" pos:end="403:16">p</name><operator pos:start="403:17" pos:end="403:18">-&gt;</operator><name pos:start="403:19" pos:end="403:22">data</name><index pos:start="403:23" pos:end="403:25">[<expr pos:start="403:24" pos:end="403:24"><literal type="number" pos:start="403:24" pos:end="403:24">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="403:28" pos:end="403:28"><expr pos:start="403:28" pos:end="403:28"><literal type="number" pos:start="403:28" pos:end="403:28">0</literal></expr></argument>, <argument pos:start="403:31" pos:end="403:60"><expr pos:start="403:31" pos:end="403:60"><name pos:start="403:31" pos:end="403:43"><name pos:start="403:31" pos:end="403:35">avctx</name><operator pos:start="403:36" pos:end="403:37">-&gt;</operator><name pos:start="403:38" pos:end="403:43">height</name></name> <operator pos:start="403:45" pos:end="403:45">*</operator> <name pos:start="403:47" pos:end="403:60"><name pos:start="403:47" pos:end="403:47">p</name><operator pos:start="403:48" pos:end="403:49">-&gt;</operator><name pos:start="403:50" pos:end="403:57">linesize</name><index pos:start="403:58" pos:end="403:60">[<expr pos:start="403:59" pos:end="403:59"><literal type="number" pos:start="403:59" pos:end="403:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="407:5" pos:end="419:5"><if pos:start="407:5" pos:end="413:5">if <condition pos:start="407:8" pos:end="407:19">(<expr pos:start="407:9" pos:end="407:18"><name pos:start="407:9" pos:end="407:14">height</name> <operator pos:start="407:16" pos:end="407:16">&gt;</operator> <literal type="number" pos:start="407:18" pos:end="407:18">0</literal></expr>)</condition> <block pos:start="407:21" pos:end="413:5">{<block_content pos:start="409:9" pos:end="411:35">

        <expr_stmt pos:start="409:9" pos:end="409:69"><expr pos:start="409:9" pos:end="409:68"><name pos:start="409:9" pos:end="409:11">ptr</name>      <operator pos:start="409:18" pos:end="409:18">=</operator> <name pos:start="409:20" pos:end="409:29"><name pos:start="409:20" pos:end="409:20">p</name><operator pos:start="409:21" pos:end="409:22">-&gt;</operator><name pos:start="409:23" pos:end="409:26">data</name><index pos:start="409:27" pos:end="409:29">[<expr pos:start="409:28" pos:end="409:28"><literal type="number" pos:start="409:28" pos:end="409:28">0</literal></expr>]</index></name> <operator pos:start="409:31" pos:end="409:31">+</operator> <operator pos:start="409:33" pos:end="409:33">(</operator><name pos:start="409:34" pos:end="409:46"><name pos:start="409:34" pos:end="409:38">avctx</name><operator pos:start="409:39" pos:end="409:40">-&gt;</operator><name pos:start="409:41" pos:end="409:46">height</name></name> <operator pos:start="409:48" pos:end="409:48">-</operator> <literal type="number" pos:start="409:50" pos:end="409:50">1</literal><operator pos:start="409:51" pos:end="409:51">)</operator> <operator pos:start="409:53" pos:end="409:53">*</operator> <name pos:start="409:55" pos:end="409:68"><name pos:start="409:55" pos:end="409:55">p</name><operator pos:start="409:56" pos:end="409:57">-&gt;</operator><name pos:start="409:58" pos:end="409:65">linesize</name><index pos:start="409:66" pos:end="409:68">[<expr pos:start="409:67" pos:end="409:67"><literal type="number" pos:start="409:67" pos:end="409:67">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="411:9" pos:end="411:35"><expr pos:start="411:9" pos:end="411:34"><name pos:start="411:9" pos:end="411:16">linesize</name> <operator pos:start="411:18" pos:end="411:18">=</operator> <operator pos:start="411:20" pos:end="411:20">-</operator><name pos:start="411:21" pos:end="411:34"><name pos:start="411:21" pos:end="411:21">p</name><operator pos:start="411:22" pos:end="411:23">-&gt;</operator><name pos:start="411:24" pos:end="411:31">linesize</name><index pos:start="411:32" pos:end="411:34">[<expr pos:start="411:33" pos:end="411:33"><literal type="number" pos:start="411:33" pos:end="411:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="413:7" pos:end="419:5">else <block pos:start="413:12" pos:end="419:5">{<block_content pos:start="415:9" pos:end="417:34">

        <expr_stmt pos:start="415:9" pos:end="415:30"><expr pos:start="415:9" pos:end="415:29"><name pos:start="415:9" pos:end="415:11">ptr</name>      <operator pos:start="415:18" pos:end="415:18">=</operator> <name pos:start="415:20" pos:end="415:29"><name pos:start="415:20" pos:end="415:20">p</name><operator pos:start="415:21" pos:end="415:22">-&gt;</operator><name pos:start="415:23" pos:end="415:26">data</name><index pos:start="415:27" pos:end="415:29">[<expr pos:start="415:28" pos:end="415:28"><literal type="number" pos:start="415:28" pos:end="415:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="417:34"><expr pos:start="417:9" pos:end="417:33"><name pos:start="417:9" pos:end="417:16">linesize</name> <operator pos:start="417:18" pos:end="417:18">=</operator> <name pos:start="417:20" pos:end="417:33"><name pos:start="417:20" pos:end="417:20">p</name><operator pos:start="417:21" pos:end="417:22">-&gt;</operator><name pos:start="417:23" pos:end="417:30">linesize</name><index pos:start="417:31" pos:end="417:33">[<expr pos:start="417:32" pos:end="417:32"><literal type="number" pos:start="417:32" pos:end="417:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="423:5" pos:end="489:5"><if pos:start="423:5" pos:end="489:5">if <condition pos:start="423:8" pos:end="423:42">(<expr pos:start="423:9" pos:end="423:41"><name pos:start="423:9" pos:end="423:22"><name pos:start="423:9" pos:end="423:13">avctx</name><operator pos:start="423:14" pos:end="423:15">-&gt;</operator><name pos:start="423:16" pos:end="423:22">pix_fmt</name></name> <operator pos:start="423:24" pos:end="423:25">==</operator> <name pos:start="423:27" pos:end="423:41">AV_PIX_FMT_PAL8</name></expr>)</condition> <block pos:start="423:44" pos:end="489:5">{<block_content pos:start="425:9" pos:end="487:27">

        <decl_stmt pos:start="425:9" pos:end="425:32"><decl pos:start="425:9" pos:end="425:31"><type pos:start="425:9" pos:end="425:11"><name pos:start="425:9" pos:end="425:11">int</name></type> <name pos:start="425:13" pos:end="425:18">colors</name> <init pos:start="425:20" pos:end="425:31">= <expr pos:start="425:22" pos:end="425:31"><literal type="number" pos:start="425:22" pos:end="425:22">1</literal> <operator pos:start="425:24" pos:end="425:25">&lt;&lt;</operator> <name pos:start="425:27" pos:end="425:31">depth</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="429:9" pos:end="429:36"><expr pos:start="429:9" pos:end="429:35"><call pos:start="429:9" pos:end="429:35"><name pos:start="429:9" pos:end="429:14">memset</name><argument_list pos:start="429:15" pos:end="429:35">(<argument pos:start="429:16" pos:end="429:25"><expr pos:start="429:16" pos:end="429:25"><name pos:start="429:16" pos:end="429:25"><name pos:start="429:16" pos:end="429:16">p</name><operator pos:start="429:17" pos:end="429:18">-&gt;</operator><name pos:start="429:19" pos:end="429:22">data</name><index pos:start="429:23" pos:end="429:25">[<expr pos:start="429:24" pos:end="429:24"><literal type="number" pos:start="429:24" pos:end="429:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="429:28" pos:end="429:28"><expr pos:start="429:28" pos:end="429:28"><literal type="number" pos:start="429:28" pos:end="429:28">0</literal></expr></argument>, <argument pos:start="429:31" pos:end="429:34"><expr pos:start="429:31" pos:end="429:34"><literal type="number" pos:start="429:31" pos:end="429:34">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="433:9" pos:end="459:9"><if pos:start="433:9" pos:end="455:9">if <condition pos:start="433:12" pos:end="433:25">(<expr pos:start="433:13" pos:end="433:24"><name pos:start="433:13" pos:end="433:18">ihsize</name> <operator pos:start="433:20" pos:end="433:21">&gt;=</operator> <literal type="number" pos:start="433:23" pos:end="433:24">36</literal></expr>)</condition> <block pos:start="433:27" pos:end="455:9">{<block_content pos:start="435:13" pos:end="453:13">

            <decl_stmt pos:start="435:13" pos:end="435:18"><decl pos:start="435:13" pos:end="435:17"><type pos:start="435:13" pos:end="435:15"><name pos:start="435:13" pos:end="435:15">int</name></type> <name pos:start="435:17" pos:end="435:17">t</name></decl>;</decl_stmt>

            <expr_stmt pos:start="437:13" pos:end="437:28"><expr pos:start="437:13" pos:end="437:27"><name pos:start="437:13" pos:end="437:15">buf</name> <operator pos:start="437:17" pos:end="437:17">=</operator> <name pos:start="437:19" pos:end="437:22">buf0</name> <operator pos:start="437:24" pos:end="437:24">+</operator> <literal type="number" pos:start="437:26" pos:end="437:27">46</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="439:13" pos:end="439:44"><expr pos:start="439:13" pos:end="439:43"><name pos:start="439:13" pos:end="439:13">t</name>   <operator pos:start="439:17" pos:end="439:17">=</operator> <call pos:start="439:19" pos:end="439:43"><name pos:start="439:19" pos:end="439:37">bytestream_get_le32</name><argument_list pos:start="439:38" pos:end="439:43">(<argument pos:start="439:39" pos:end="439:42"><expr pos:start="439:39" pos:end="439:42"><operator pos:start="439:39" pos:end="439:39">&amp;</operator><name pos:start="439:40" pos:end="439:42">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="441:13" pos:end="453:13"><if pos:start="441:13" pos:end="449:13">if <condition pos:start="441:16" pos:end="441:42">(<expr pos:start="441:17" pos:end="441:41"><call pos:start="441:17" pos:end="441:41"><name pos:start="441:17" pos:end="441:28"><name pos:start="441:17" pos:end="441:17">t</name> <argument_list type="generic" pos:start="441:19" pos:end="441:28">&lt; <argument pos:start="441:21" pos:end="441:26"><expr pos:start="441:21" pos:end="441:26"><literal type="number" pos:start="441:21" pos:end="441:21">0</literal> <operator pos:start="441:23" pos:end="441:24">||</operator> <name pos:start="441:26" pos:end="441:26">t</name></expr></argument> &gt;</argument_list></name> <argument_list pos:start="441:30" pos:end="441:41">(<argument pos:start="441:31" pos:end="441:40"><expr pos:start="441:31" pos:end="441:40"><literal type="number" pos:start="441:31" pos:end="441:31">1</literal> <operator pos:start="441:33" pos:end="441:34">&lt;&lt;</operator> <name pos:start="441:36" pos:end="441:40">depth</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="441:44" pos:end="449:13">{<block_content pos:start="443:17" pos:end="447:33">

                <expr_stmt pos:start="443:17" pos:end="447:33"><expr pos:start="443:17" pos:end="447:32"><call pos:start="443:17" pos:end="447:32"><name pos:start="443:17" pos:end="443:22">av_log</name><argument_list pos:start="443:23" pos:end="447:32">(<argument pos:start="443:24" pos:end="443:28"><expr pos:start="443:24" pos:end="443:28"><name pos:start="443:24" pos:end="443:28">avctx</name></expr></argument>, <argument pos:start="443:31" pos:end="443:42"><expr pos:start="443:31" pos:end="443:42"><name pos:start="443:31" pos:end="443:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="445:24" pos:end="445:74"><expr pos:start="445:24" pos:end="445:74"><literal type="string" pos:start="445:24" pos:end="445:74">"Incorrect number of colors - %X for bitdepth %u\n"</literal></expr></argument>,

                       <argument pos:start="447:24" pos:end="447:24"><expr pos:start="447:24" pos:end="447:24"><name pos:start="447:24" pos:end="447:24">t</name></expr></argument>, <argument pos:start="447:27" pos:end="447:31"><expr pos:start="447:27" pos:end="447:31"><name pos:start="447:27" pos:end="447:31">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="449:15" pos:end="453:13">else if <condition pos:start="449:23" pos:end="449:25">(<expr pos:start="449:24" pos:end="449:24"><name pos:start="449:24" pos:end="449:24">t</name></expr>)</condition> <block pos:start="449:27" pos:end="453:13">{<block_content pos:start="451:17" pos:end="451:27">

                <expr_stmt pos:start="451:17" pos:end="451:27"><expr pos:start="451:17" pos:end="451:26"><name pos:start="451:17" pos:end="451:22">colors</name> <operator pos:start="451:24" pos:end="451:24">=</operator> <name pos:start="451:26" pos:end="451:26">t</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="455:11" pos:end="459:9">else <block pos:start="455:16" pos:end="459:9">{<block_content pos:start="457:13" pos:end="457:55">

            <expr_stmt pos:start="457:13" pos:end="457:55"><expr pos:start="457:13" pos:end="457:54"><name pos:start="457:13" pos:end="457:18">colors</name> <operator pos:start="457:20" pos:end="457:20">=</operator> <call pos:start="457:22" pos:end="457:54"><name pos:start="457:22" pos:end="457:26">FFMIN</name><argument_list pos:start="457:27" pos:end="457:54">(<argument pos:start="457:28" pos:end="457:30"><expr pos:start="457:28" pos:end="457:30"><literal type="number" pos:start="457:28" pos:end="457:30">256</literal></expr></argument>, <argument pos:start="457:33" pos:end="457:53"><expr pos:start="457:33" pos:end="457:53"><operator pos:start="457:33" pos:end="457:33">(</operator><name pos:start="457:34" pos:end="457:38">hsize</name><operator pos:start="457:39" pos:end="457:39">-</operator><name pos:start="457:40" pos:end="457:45">ihsize</name><operator pos:start="457:46" pos:end="457:46">-</operator><literal type="number" pos:start="457:47" pos:end="457:48">14</literal><operator pos:start="457:49" pos:end="457:49">)</operator> <operator pos:start="457:51" pos:end="457:51">/</operator> <literal type="number" pos:start="457:53" pos:end="457:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="461:9" pos:end="461:33"><expr pos:start="461:9" pos:end="461:32"><name pos:start="461:9" pos:end="461:11">buf</name> <operator pos:start="461:13" pos:end="461:13">=</operator> <name pos:start="461:15" pos:end="461:18">buf0</name> <operator pos:start="461:20" pos:end="461:20">+</operator> <literal type="number" pos:start="461:22" pos:end="461:25">14</literal> <operator pos:start="461:25" pos:end="461:25">+</operator> <name pos:start="461:27" pos:end="461:32">ihsize</name></expr>;</expr_stmt> <comment type="line" pos:start="461:35" pos:end="461:52">//palette location</comment>

        <comment type="line" pos:start="463:9" pos:end="463:49">// OS/2 bitmap, 3 bytes per palette entry</comment>

        <if_stmt pos:start="465:9" pos:end="485:9"><if pos:start="465:9" pos:end="479:9">if <condition pos:start="465:12" pos:end="465:46">(<expr pos:start="465:13" pos:end="465:45"><operator pos:start="465:13" pos:end="465:13">(</operator><name pos:start="465:14" pos:end="465:18">hsize</name><operator pos:start="465:19" pos:end="465:19">-</operator><name pos:start="465:20" pos:end="465:25">ihsize</name><operator pos:start="465:26" pos:end="465:26">-</operator><literal type="number" pos:start="465:27" pos:end="465:28">14</literal><operator pos:start="465:29" pos:end="465:29">)</operator> <operator pos:start="465:31" pos:end="465:31">&lt;</operator> <operator pos:start="465:33" pos:end="465:33">(</operator><name pos:start="465:34" pos:end="465:39">colors</name> <operator pos:start="465:41" pos:end="465:42">&lt;&lt;</operator> <literal type="number" pos:start="465:44" pos:end="465:44">2</literal><operator pos:start="465:45" pos:end="465:45">)</operator></expr>)</condition> <block pos:start="465:48" pos:end="479:9">{<block_content pos:start="467:13" pos:end="477:85">

            <if_stmt pos:start="467:13" pos:end="473:13"><if pos:start="467:13" pos:end="473:13">if <condition pos:start="467:16" pos:end="467:47">(<expr pos:start="467:17" pos:end="467:46"><operator pos:start="467:17" pos:end="467:17">(</operator><name pos:start="467:18" pos:end="467:22">hsize</name><operator pos:start="467:23" pos:end="467:23">-</operator><name pos:start="467:24" pos:end="467:29">ihsize</name><operator pos:start="467:30" pos:end="467:30">-</operator><literal type="number" pos:start="467:31" pos:end="467:32">14</literal><operator pos:start="467:33" pos:end="467:33">)</operator> <operator pos:start="467:35" pos:end="467:35">&lt;</operator> <name pos:start="467:37" pos:end="467:42">colors</name> <operator pos:start="467:44" pos:end="467:44">*</operator> <literal type="number" pos:start="467:46" pos:end="467:46">3</literal></expr>)</condition> <block pos:start="467:49" pos:end="473:13">{<block_content pos:start="469:17" pos:end="471:43">

                <expr_stmt pos:start="469:17" pos:end="469:79"><expr pos:start="469:17" pos:end="469:78"><call pos:start="469:17" pos:end="469:78"><name pos:start="469:17" pos:end="469:22">av_log</name><argument_list pos:start="469:23" pos:end="469:78">(<argument pos:start="469:24" pos:end="469:28"><expr pos:start="469:24" pos:end="469:28"><name pos:start="469:24" pos:end="469:28">avctx</name></expr></argument>, <argument pos:start="469:31" pos:end="469:42"><expr pos:start="469:31" pos:end="469:42"><name pos:start="469:31" pos:end="469:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="469:45" pos:end="469:77"><expr pos:start="469:45" pos:end="469:77"><literal type="string" pos:start="469:45" pos:end="469:77">"palette doesn't fit in packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="471:17" pos:end="471:43">return <expr pos:start="471:24" pos:end="471:42"><name pos:start="471:24" pos:end="471:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <for pos:start="475:13" pos:end="477:85">for <control pos:start="475:17" pos:end="475:40">(<init pos:start="475:18" pos:end="475:23"><expr pos:start="475:18" pos:end="475:22"><name pos:start="475:18" pos:end="475:18">i</name> <operator pos:start="475:20" pos:end="475:20">=</operator> <literal type="number" pos:start="475:22" pos:end="475:22">0</literal></expr>;</init> <condition pos:start="475:25" pos:end="475:35"><expr pos:start="475:25" pos:end="475:34"><name pos:start="475:25" pos:end="475:25">i</name> <operator pos:start="475:27" pos:end="475:27">&lt;</operator> <name pos:start="475:29" pos:end="475:34">colors</name></expr>;</condition> <incr pos:start="475:37" pos:end="475:39"><expr pos:start="475:37" pos:end="475:39"><name pos:start="475:37" pos:end="475:37">i</name><operator pos:start="475:38" pos:end="475:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="477:17" pos:end="477:85"><block_content pos:start="477:17" pos:end="477:85">

                <expr_stmt pos:start="477:17" pos:end="477:85"><expr pos:start="477:17" pos:end="477:84"><operator pos:start="477:17" pos:end="477:17">(</operator><operator pos:start="477:18" pos:end="477:18">(</operator><name pos:start="477:19" pos:end="477:26">uint32_t</name><operator pos:start="477:27" pos:end="477:27">*</operator><operator pos:start="477:28" pos:end="477:28">)</operator><name pos:start="477:29" pos:end="477:38"><name pos:start="477:29" pos:end="477:29">p</name><operator pos:start="477:30" pos:end="477:31">-&gt;</operator><name pos:start="477:32" pos:end="477:35">data</name><index pos:start="477:36" pos:end="477:38">[<expr pos:start="477:37" pos:end="477:37"><literal type="number" pos:start="477:37" pos:end="477:37">1</literal></expr>]</index></name><operator pos:start="477:39" pos:end="477:39">)</operator><index pos:start="477:40" pos:end="477:42">[<expr pos:start="477:41" pos:end="477:41"><name pos:start="477:41" pos:end="477:41">i</name></expr>]</index> <operator pos:start="477:44" pos:end="477:44">=</operator> <operator pos:start="477:46" pos:end="477:46">(</operator><literal type="number" pos:start="477:47" pos:end="477:51">0xFFU</literal><operator pos:start="477:52" pos:end="477:53">&lt;&lt;</operator><literal type="number" pos:start="477:54" pos:end="477:55">24</literal><operator pos:start="477:56" pos:end="477:56">)</operator> <operator pos:start="477:58" pos:end="477:58">|</operator> <call pos:start="477:60" pos:end="477:84"><name pos:start="477:60" pos:end="477:78">bytestream_get_le24</name><argument_list pos:start="477:79" pos:end="477:84">(<argument pos:start="477:80" pos:end="477:83"><expr pos:start="477:80" pos:end="477:83"><operator pos:start="477:80" pos:end="477:80">&amp;</operator><name pos:start="477:81" pos:end="477:83">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="479:11" pos:end="485:9">else <block pos:start="479:16" pos:end="485:9">{<block_content pos:start="481:13" pos:end="483:85">

            <for pos:start="481:13" pos:end="483:85">for <control pos:start="481:17" pos:end="481:40">(<init pos:start="481:18" pos:end="481:23"><expr pos:start="481:18" pos:end="481:22"><name pos:start="481:18" pos:end="481:18">i</name> <operator pos:start="481:20" pos:end="481:20">=</operator> <literal type="number" pos:start="481:22" pos:end="481:22">0</literal></expr>;</init> <condition pos:start="481:25" pos:end="481:35"><expr pos:start="481:25" pos:end="481:34"><name pos:start="481:25" pos:end="481:25">i</name> <operator pos:start="481:27" pos:end="481:27">&lt;</operator> <name pos:start="481:29" pos:end="481:34">colors</name></expr>;</condition> <incr pos:start="481:37" pos:end="481:39"><expr pos:start="481:37" pos:end="481:39"><name pos:start="481:37" pos:end="481:37">i</name><operator pos:start="481:38" pos:end="481:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="483:17" pos:end="483:85"><block_content pos:start="483:17" pos:end="483:85">

                <expr_stmt pos:start="483:17" pos:end="483:85"><expr pos:start="483:17" pos:end="483:84"><operator pos:start="483:17" pos:end="483:17">(</operator><operator pos:start="483:18" pos:end="483:18">(</operator><name pos:start="483:19" pos:end="483:26">uint32_t</name><operator pos:start="483:27" pos:end="483:27">*</operator><operator pos:start="483:28" pos:end="483:28">)</operator><name pos:start="483:29" pos:end="483:38"><name pos:start="483:29" pos:end="483:29">p</name><operator pos:start="483:30" pos:end="483:31">-&gt;</operator><name pos:start="483:32" pos:end="483:35">data</name><index pos:start="483:36" pos:end="483:38">[<expr pos:start="483:37" pos:end="483:37"><literal type="number" pos:start="483:37" pos:end="483:37">1</literal></expr>]</index></name><operator pos:start="483:39" pos:end="483:39">)</operator><index pos:start="483:40" pos:end="483:42">[<expr pos:start="483:41" pos:end="483:41"><name pos:start="483:41" pos:end="483:41">i</name></expr>]</index> <operator pos:start="483:44" pos:end="483:44">=</operator> <literal type="number" pos:start="483:46" pos:end="483:50">0xFFU</literal> <operator pos:start="483:52" pos:end="483:53">&lt;&lt;</operator> <literal type="number" pos:start="483:55" pos:end="483:56">24</literal> <operator pos:start="483:58" pos:end="483:58">|</operator> <call pos:start="483:60" pos:end="483:84"><name pos:start="483:60" pos:end="483:78">bytestream_get_le32</name><argument_list pos:start="483:79" pos:end="483:84">(<argument pos:start="483:80" pos:end="483:83"><expr pos:start="483:80" pos:end="483:83"><operator pos:start="483:80" pos:end="483:80">&amp;</operator><name pos:start="483:81" pos:end="483:83">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="487:9" pos:end="487:27"><expr pos:start="487:9" pos:end="487:26"><name pos:start="487:9" pos:end="487:11">buf</name> <operator pos:start="487:13" pos:end="487:13">=</operator> <name pos:start="487:15" pos:end="487:18">buf0</name> <operator pos:start="487:20" pos:end="487:20">+</operator> <name pos:start="487:22" pos:end="487:26">hsize</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="491:5" pos:end="623:5"><if pos:start="491:5" pos:end="513:5">if <condition pos:start="491:8" pos:end="491:45">(<expr pos:start="491:9" pos:end="491:44"><name pos:start="491:9" pos:end="491:12">comp</name> <operator pos:start="491:14" pos:end="491:15">==</operator> <name pos:start="491:17" pos:end="491:24">BMP_RLE4</name> <operator pos:start="491:26" pos:end="491:27">||</operator> <name pos:start="491:29" pos:end="491:32">comp</name> <operator pos:start="491:34" pos:end="491:35">==</operator> <name pos:start="491:37" pos:end="491:44">BMP_RLE8</name></expr>)</condition> <block pos:start="491:47" pos:end="513:5">{<block_content pos:start="493:9" pos:end="511:9">

        <if_stmt pos:start="493:9" pos:end="499:9"><if pos:start="493:9" pos:end="499:9">if <condition pos:start="493:12" pos:end="493:43">(<expr pos:start="493:13" pos:end="493:42"><name pos:start="493:13" pos:end="493:16">comp</name> <operator pos:start="493:18" pos:end="493:19">==</operator> <name pos:start="493:21" pos:end="493:28">BMP_RLE8</name> <operator pos:start="493:30" pos:end="493:31">&amp;&amp;</operator> <name pos:start="493:33" pos:end="493:38">height</name> <operator pos:start="493:40" pos:end="493:40">&lt;</operator> <literal type="number" pos:start="493:42" pos:end="493:42">0</literal></expr>)</condition> <block pos:start="493:45" pos:end="499:9">{<block_content pos:start="495:13" pos:end="497:45">

            <expr_stmt pos:start="495:13" pos:end="495:67"><expr pos:start="495:13" pos:end="495:66"><name pos:start="495:13" pos:end="495:22"><name pos:start="495:13" pos:end="495:13">p</name><operator pos:start="495:14" pos:end="495:15">-&gt;</operator><name pos:start="495:16" pos:end="495:19">data</name><index pos:start="495:20" pos:end="495:22">[<expr pos:start="495:21" pos:end="495:21"><literal type="number" pos:start="495:21" pos:end="495:21">0</literal></expr>]</index></name>    <operator pos:start="495:27" pos:end="495:28">+=</operator>  <name pos:start="495:31" pos:end="495:44"><name pos:start="495:31" pos:end="495:31">p</name><operator pos:start="495:32" pos:end="495:33">-&gt;</operator><name pos:start="495:34" pos:end="495:41">linesize</name><index pos:start="495:42" pos:end="495:44">[<expr pos:start="495:43" pos:end="495:43"><literal type="number" pos:start="495:43" pos:end="495:43">0</literal></expr>]</index></name> <operator pos:start="495:46" pos:end="495:46">*</operator> <operator pos:start="495:48" pos:end="495:48">(</operator><name pos:start="495:49" pos:end="495:61"><name pos:start="495:49" pos:end="495:53">avctx</name><operator pos:start="495:54" pos:end="495:55">-&gt;</operator><name pos:start="495:56" pos:end="495:61">height</name></name> <operator pos:start="495:63" pos:end="495:63">-</operator> <literal type="number" pos:start="495:65" pos:end="495:65">1</literal><operator pos:start="495:66" pos:end="495:66">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="497:13" pos:end="497:45"><expr pos:start="497:13" pos:end="497:44"><name pos:start="497:13" pos:end="497:26"><name pos:start="497:13" pos:end="497:13">p</name><operator pos:start="497:14" pos:end="497:15">-&gt;</operator><name pos:start="497:16" pos:end="497:23">linesize</name><index pos:start="497:24" pos:end="497:26">[<expr pos:start="497:25" pos:end="497:25"><literal type="number" pos:start="497:25" pos:end="497:25">0</literal></expr>]</index></name> <operator pos:start="497:28" pos:end="497:28">=</operator> <operator pos:start="497:30" pos:end="497:30">-</operator><name pos:start="497:31" pos:end="497:44"><name pos:start="497:31" pos:end="497:31">p</name><operator pos:start="497:32" pos:end="497:33">-&gt;</operator><name pos:start="497:34" pos:end="497:41">linesize</name><index pos:start="497:42" pos:end="497:44">[<expr pos:start="497:43" pos:end="497:43"><literal type="number" pos:start="497:43" pos:end="497:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="501:9" pos:end="501:42"><expr pos:start="501:9" pos:end="501:41"><call pos:start="501:9" pos:end="501:41"><name pos:start="501:9" pos:end="501:24">bytestream2_init</name><argument_list pos:start="501:25" pos:end="501:41">(<argument pos:start="501:26" pos:end="501:28"><expr pos:start="501:26" pos:end="501:28"><operator pos:start="501:26" pos:end="501:26">&amp;</operator><name pos:start="501:27" pos:end="501:28">gb</name></expr></argument>, <argument pos:start="501:31" pos:end="501:33"><expr pos:start="501:31" pos:end="501:33"><name pos:start="501:31" pos:end="501:33">buf</name></expr></argument>, <argument pos:start="501:36" pos:end="501:40"><expr pos:start="501:36" pos:end="501:40"><name pos:start="501:36" pos:end="501:40">dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="503:9" pos:end="503:46"><expr pos:start="503:9" pos:end="503:45"><call pos:start="503:9" pos:end="503:45"><name pos:start="503:9" pos:end="503:23">ff_msrle_decode</name><argument_list pos:start="503:24" pos:end="503:45">(<argument pos:start="503:25" pos:end="503:29"><expr pos:start="503:25" pos:end="503:29"><name pos:start="503:25" pos:end="503:29">avctx</name></expr></argument>, <argument pos:start="503:32" pos:end="503:32"><expr pos:start="503:32" pos:end="503:32"><name pos:start="503:32" pos:end="503:32">p</name></expr></argument>, <argument pos:start="503:35" pos:end="503:39"><expr pos:start="503:35" pos:end="503:39"><name pos:start="503:35" pos:end="503:39">depth</name></expr></argument>, <argument pos:start="503:42" pos:end="503:44"><expr pos:start="503:42" pos:end="503:44"><operator pos:start="503:42" pos:end="503:42">&amp;</operator><name pos:start="503:43" pos:end="503:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="505:9" pos:end="511:9"><if pos:start="505:9" pos:end="511:9">if <condition pos:start="505:12" pos:end="505:23">(<expr pos:start="505:13" pos:end="505:22"><name pos:start="505:13" pos:end="505:18">height</name> <operator pos:start="505:20" pos:end="505:20">&lt;</operator> <literal type="number" pos:start="505:22" pos:end="505:22">0</literal></expr>)</condition> <block pos:start="505:25" pos:end="511:9">{<block_content pos:start="507:13" pos:end="509:45">

            <expr_stmt pos:start="507:13" pos:end="507:67"><expr pos:start="507:13" pos:end="507:66"><name pos:start="507:13" pos:end="507:22"><name pos:start="507:13" pos:end="507:13">p</name><operator pos:start="507:14" pos:end="507:15">-&gt;</operator><name pos:start="507:16" pos:end="507:19">data</name><index pos:start="507:20" pos:end="507:22">[<expr pos:start="507:21" pos:end="507:21"><literal type="number" pos:start="507:21" pos:end="507:21">0</literal></expr>]</index></name>    <operator pos:start="507:27" pos:end="507:28">+=</operator>  <name pos:start="507:31" pos:end="507:44"><name pos:start="507:31" pos:end="507:31">p</name><operator pos:start="507:32" pos:end="507:33">-&gt;</operator><name pos:start="507:34" pos:end="507:41">linesize</name><index pos:start="507:42" pos:end="507:44">[<expr pos:start="507:43" pos:end="507:43"><literal type="number" pos:start="507:43" pos:end="507:43">0</literal></expr>]</index></name> <operator pos:start="507:46" pos:end="507:46">*</operator> <operator pos:start="507:48" pos:end="507:48">(</operator><name pos:start="507:49" pos:end="507:61"><name pos:start="507:49" pos:end="507:53">avctx</name><operator pos:start="507:54" pos:end="507:55">-&gt;</operator><name pos:start="507:56" pos:end="507:61">height</name></name> <operator pos:start="507:63" pos:end="507:63">-</operator> <literal type="number" pos:start="507:65" pos:end="507:65">1</literal><operator pos:start="507:66" pos:end="507:66">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:45"><expr pos:start="509:13" pos:end="509:44"><name pos:start="509:13" pos:end="509:26"><name pos:start="509:13" pos:end="509:13">p</name><operator pos:start="509:14" pos:end="509:15">-&gt;</operator><name pos:start="509:16" pos:end="509:23">linesize</name><index pos:start="509:24" pos:end="509:26">[<expr pos:start="509:25" pos:end="509:25"><literal type="number" pos:start="509:25" pos:end="509:25">0</literal></expr>]</index></name> <operator pos:start="509:28" pos:end="509:28">=</operator> <operator pos:start="509:30" pos:end="509:30">-</operator><name pos:start="509:31" pos:end="509:44"><name pos:start="509:31" pos:end="509:31">p</name><operator pos:start="509:32" pos:end="509:33">-&gt;</operator><name pos:start="509:34" pos:end="509:41">linesize</name><index pos:start="509:42" pos:end="509:44">[<expr pos:start="509:43" pos:end="509:43"><literal type="number" pos:start="509:43" pos:end="509:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="513:7" pos:end="623:5">else <block pos:start="513:12" pos:end="623:5">{<block_content pos:start="515:9" pos:end="621:9">

        <switch pos:start="515:9" pos:end="621:9">switch <condition pos:start="515:16" pos:end="515:22">(<expr pos:start="515:17" pos:end="515:21"><name pos:start="515:17" pos:end="515:21">depth</name></expr>)</condition> <block pos:start="515:24" pos:end="621:9">{<block_content pos:start="517:9" pos:end="619:39">

        <case pos:start="517:9" pos:end="517:15">case <expr pos:start="517:14" pos:end="517:14"><literal type="number" pos:start="517:14" pos:end="517:14">1</literal></expr>:</case>

            <for pos:start="519:13" pos:end="547:13">for <control pos:start="519:17" pos:end="519:47">(<init pos:start="519:18" pos:end="519:23"><expr pos:start="519:18" pos:end="519:22"><name pos:start="519:18" pos:end="519:18">i</name> <operator pos:start="519:20" pos:end="519:20">=</operator> <literal type="number" pos:start="519:22" pos:end="519:22">0</literal></expr>;</init> <condition pos:start="519:25" pos:end="519:42"><expr pos:start="519:25" pos:end="519:41"><name pos:start="519:25" pos:end="519:25">i</name> <operator pos:start="519:27" pos:end="519:27">&lt;</operator> <name pos:start="519:29" pos:end="519:41"><name pos:start="519:29" pos:end="519:33">avctx</name><operator pos:start="519:34" pos:end="519:35">-&gt;</operator><name pos:start="519:36" pos:end="519:41">height</name></name></expr>;</condition> <incr pos:start="519:44" pos:end="519:46"><expr pos:start="519:44" pos:end="519:46"><name pos:start="519:44" pos:end="519:44">i</name><operator pos:start="519:45" pos:end="519:46">++</operator></expr></incr>)</control> <block pos:start="519:49" pos:end="547:13">{<block_content pos:start="521:17" pos:end="545:32">

                <decl_stmt pos:start="521:17" pos:end="521:22"><decl pos:start="521:17" pos:end="521:21"><type pos:start="521:17" pos:end="521:19"><name pos:start="521:17" pos:end="521:19">int</name></type> <name pos:start="521:21" pos:end="521:21">j</name></decl>;</decl_stmt>

                <for pos:start="523:17" pos:end="541:17">for <control pos:start="523:21" pos:end="523:39">(<init pos:start="523:22" pos:end="523:27"><expr pos:start="523:22" pos:end="523:26"><name pos:start="523:22" pos:end="523:22">j</name> <operator pos:start="523:24" pos:end="523:24">=</operator> <literal type="number" pos:start="523:26" pos:end="523:26">0</literal></expr>;</init> <condition pos:start="523:29" pos:end="523:34"><expr pos:start="523:29" pos:end="523:33"><name pos:start="523:29" pos:end="523:29">j</name> <operator pos:start="523:31" pos:end="523:31">&lt;</operator> <name pos:start="523:33" pos:end="523:33">n</name></expr>;</condition> <incr pos:start="523:36" pos:end="523:38"><expr pos:start="523:36" pos:end="523:38"><name pos:start="523:36" pos:end="523:36">j</name><operator pos:start="523:37" pos:end="523:38">++</operator></expr></incr>)</control> <block pos:start="523:41" pos:end="541:17">{<block_content pos:start="525:21" pos:end="539:51">

                    <expr_stmt pos:start="525:21" pos:end="525:46"><expr pos:start="525:21" pos:end="525:45"><name pos:start="525:21" pos:end="525:30"><name pos:start="525:21" pos:end="525:23">ptr</name><index pos:start="525:24" pos:end="525:30">[<expr pos:start="525:25" pos:end="525:29"><name pos:start="525:25" pos:end="525:25">j</name><operator pos:start="525:26" pos:end="525:26">*</operator><literal type="number" pos:start="525:27" pos:end="525:27">8</literal><operator pos:start="525:28" pos:end="525:28">+</operator><literal type="number" pos:start="525:29" pos:end="525:29">0</literal></expr>]</index></name> <operator pos:start="525:32" pos:end="525:32">=</operator>  <name pos:start="525:35" pos:end="525:40"><name pos:start="525:35" pos:end="525:37">buf</name><index pos:start="525:38" pos:end="525:40">[<expr pos:start="525:39" pos:end="525:39"><name pos:start="525:39" pos:end="525:39">j</name></expr>]</index></name> <operator pos:start="525:42" pos:end="525:43">&gt;&gt;</operator> <literal type="number" pos:start="525:45" pos:end="525:45">7</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="527:21" pos:end="527:51"><expr pos:start="527:21" pos:end="527:50"><name pos:start="527:21" pos:end="527:30"><name pos:start="527:21" pos:end="527:23">ptr</name><index pos:start="527:24" pos:end="527:30">[<expr pos:start="527:25" pos:end="527:29"><name pos:start="527:25" pos:end="527:25">j</name><operator pos:start="527:26" pos:end="527:26">*</operator><literal type="number" pos:start="527:27" pos:end="527:27">8</literal><operator pos:start="527:28" pos:end="527:28">+</operator><literal type="number" pos:start="527:29" pos:end="527:29">1</literal></expr>]</index></name> <operator pos:start="527:32" pos:end="527:32">=</operator> <operator pos:start="527:34" pos:end="527:34">(</operator><name pos:start="527:35" pos:end="527:40"><name pos:start="527:35" pos:end="527:37">buf</name><index pos:start="527:38" pos:end="527:40">[<expr pos:start="527:39" pos:end="527:39"><name pos:start="527:39" pos:end="527:39">j</name></expr>]</index></name> <operator pos:start="527:42" pos:end="527:43">&gt;&gt;</operator> <literal type="number" pos:start="527:45" pos:end="527:45">6</literal><operator pos:start="527:46" pos:end="527:46">)</operator> <operator pos:start="527:48" pos:end="527:48">&amp;</operator> <literal type="number" pos:start="527:50" pos:end="527:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="529:21" pos:end="529:51"><expr pos:start="529:21" pos:end="529:50"><name pos:start="529:21" pos:end="529:30"><name pos:start="529:21" pos:end="529:23">ptr</name><index pos:start="529:24" pos:end="529:30">[<expr pos:start="529:25" pos:end="529:29"><name pos:start="529:25" pos:end="529:25">j</name><operator pos:start="529:26" pos:end="529:26">*</operator><literal type="number" pos:start="529:27" pos:end="529:27">8</literal><operator pos:start="529:28" pos:end="529:28">+</operator><literal type="number" pos:start="529:29" pos:end="529:29">2</literal></expr>]</index></name> <operator pos:start="529:32" pos:end="529:32">=</operator> <operator pos:start="529:34" pos:end="529:34">(</operator><name pos:start="529:35" pos:end="529:40"><name pos:start="529:35" pos:end="529:37">buf</name><index pos:start="529:38" pos:end="529:40">[<expr pos:start="529:39" pos:end="529:39"><name pos:start="529:39" pos:end="529:39">j</name></expr>]</index></name> <operator pos:start="529:42" pos:end="529:43">&gt;&gt;</operator> <literal type="number" pos:start="529:45" pos:end="529:45">5</literal><operator pos:start="529:46" pos:end="529:46">)</operator> <operator pos:start="529:48" pos:end="529:48">&amp;</operator> <literal type="number" pos:start="529:50" pos:end="529:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="531:21" pos:end="531:51"><expr pos:start="531:21" pos:end="531:50"><name pos:start="531:21" pos:end="531:30"><name pos:start="531:21" pos:end="531:23">ptr</name><index pos:start="531:24" pos:end="531:30">[<expr pos:start="531:25" pos:end="531:29"><name pos:start="531:25" pos:end="531:25">j</name><operator pos:start="531:26" pos:end="531:26">*</operator><literal type="number" pos:start="531:27" pos:end="531:27">8</literal><operator pos:start="531:28" pos:end="531:28">+</operator><literal type="number" pos:start="531:29" pos:end="531:29">3</literal></expr>]</index></name> <operator pos:start="531:32" pos:end="531:32">=</operator> <operator pos:start="531:34" pos:end="531:34">(</operator><name pos:start="531:35" pos:end="531:40"><name pos:start="531:35" pos:end="531:37">buf</name><index pos:start="531:38" pos:end="531:40">[<expr pos:start="531:39" pos:end="531:39"><name pos:start="531:39" pos:end="531:39">j</name></expr>]</index></name> <operator pos:start="531:42" pos:end="531:43">&gt;&gt;</operator> <literal type="number" pos:start="531:45" pos:end="531:45">4</literal><operator pos:start="531:46" pos:end="531:46">)</operator> <operator pos:start="531:48" pos:end="531:48">&amp;</operator> <literal type="number" pos:start="531:50" pos:end="531:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="533:21" pos:end="533:51"><expr pos:start="533:21" pos:end="533:50"><name pos:start="533:21" pos:end="533:30"><name pos:start="533:21" pos:end="533:23">ptr</name><index pos:start="533:24" pos:end="533:30">[<expr pos:start="533:25" pos:end="533:29"><name pos:start="533:25" pos:end="533:25">j</name><operator pos:start="533:26" pos:end="533:26">*</operator><literal type="number" pos:start="533:27" pos:end="533:27">8</literal><operator pos:start="533:28" pos:end="533:28">+</operator><literal type="number" pos:start="533:29" pos:end="533:29">4</literal></expr>]</index></name> <operator pos:start="533:32" pos:end="533:32">=</operator> <operator pos:start="533:34" pos:end="533:34">(</operator><name pos:start="533:35" pos:end="533:40"><name pos:start="533:35" pos:end="533:37">buf</name><index pos:start="533:38" pos:end="533:40">[<expr pos:start="533:39" pos:end="533:39"><name pos:start="533:39" pos:end="533:39">j</name></expr>]</index></name> <operator pos:start="533:42" pos:end="533:43">&gt;&gt;</operator> <literal type="number" pos:start="533:45" pos:end="533:45">3</literal><operator pos:start="533:46" pos:end="533:46">)</operator> <operator pos:start="533:48" pos:end="533:48">&amp;</operator> <literal type="number" pos:start="533:50" pos:end="533:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="535:21" pos:end="535:51"><expr pos:start="535:21" pos:end="535:50"><name pos:start="535:21" pos:end="535:30"><name pos:start="535:21" pos:end="535:23">ptr</name><index pos:start="535:24" pos:end="535:30">[<expr pos:start="535:25" pos:end="535:29"><name pos:start="535:25" pos:end="535:25">j</name><operator pos:start="535:26" pos:end="535:26">*</operator><literal type="number" pos:start="535:27" pos:end="535:27">8</literal><operator pos:start="535:28" pos:end="535:28">+</operator><literal type="number" pos:start="535:29" pos:end="535:29">5</literal></expr>]</index></name> <operator pos:start="535:32" pos:end="535:32">=</operator> <operator pos:start="535:34" pos:end="535:34">(</operator><name pos:start="535:35" pos:end="535:40"><name pos:start="535:35" pos:end="535:37">buf</name><index pos:start="535:38" pos:end="535:40">[<expr pos:start="535:39" pos:end="535:39"><name pos:start="535:39" pos:end="535:39">j</name></expr>]</index></name> <operator pos:start="535:42" pos:end="535:43">&gt;&gt;</operator> <literal type="number" pos:start="535:45" pos:end="535:45">2</literal><operator pos:start="535:46" pos:end="535:46">)</operator> <operator pos:start="535:48" pos:end="535:48">&amp;</operator> <literal type="number" pos:start="535:50" pos:end="535:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="537:21" pos:end="537:51"><expr pos:start="537:21" pos:end="537:50"><name pos:start="537:21" pos:end="537:30"><name pos:start="537:21" pos:end="537:23">ptr</name><index pos:start="537:24" pos:end="537:30">[<expr pos:start="537:25" pos:end="537:29"><name pos:start="537:25" pos:end="537:25">j</name><operator pos:start="537:26" pos:end="537:26">*</operator><literal type="number" pos:start="537:27" pos:end="537:27">8</literal><operator pos:start="537:28" pos:end="537:28">+</operator><literal type="number" pos:start="537:29" pos:end="537:29">6</literal></expr>]</index></name> <operator pos:start="537:32" pos:end="537:32">=</operator> <operator pos:start="537:34" pos:end="537:34">(</operator><name pos:start="537:35" pos:end="537:40"><name pos:start="537:35" pos:end="537:37">buf</name><index pos:start="537:38" pos:end="537:40">[<expr pos:start="537:39" pos:end="537:39"><name pos:start="537:39" pos:end="537:39">j</name></expr>]</index></name> <operator pos:start="537:42" pos:end="537:43">&gt;&gt;</operator> <literal type="number" pos:start="537:45" pos:end="537:45">1</literal><operator pos:start="537:46" pos:end="537:46">)</operator> <operator pos:start="537:48" pos:end="537:48">&amp;</operator> <literal type="number" pos:start="537:50" pos:end="537:50">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="539:21" pos:end="539:51"><expr pos:start="539:21" pos:end="539:50"><name pos:start="539:21" pos:end="539:30"><name pos:start="539:21" pos:end="539:23">ptr</name><index pos:start="539:24" pos:end="539:30">[<expr pos:start="539:25" pos:end="539:29"><name pos:start="539:25" pos:end="539:25">j</name><operator pos:start="539:26" pos:end="539:26">*</operator><literal type="number" pos:start="539:27" pos:end="539:27">8</literal><operator pos:start="539:28" pos:end="539:28">+</operator><literal type="number" pos:start="539:29" pos:end="539:29">7</literal></expr>]</index></name> <operator pos:start="539:32" pos:end="539:32">=</operator>  <name pos:start="539:35" pos:end="539:40"><name pos:start="539:35" pos:end="539:37">buf</name><index pos:start="539:38" pos:end="539:40">[<expr pos:start="539:39" pos:end="539:39"><name pos:start="539:39" pos:end="539:39">j</name></expr>]</index></name>       <operator pos:start="539:48" pos:end="539:48">&amp;</operator> <literal type="number" pos:start="539:50" pos:end="539:50">1</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="543:17" pos:end="543:25"><expr pos:start="543:17" pos:end="543:24"><name pos:start="543:17" pos:end="543:19">buf</name> <operator pos:start="543:21" pos:end="543:22">+=</operator> <name pos:start="543:24" pos:end="543:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="545:17" pos:end="545:32"><expr pos:start="545:17" pos:end="545:31"><name pos:start="545:17" pos:end="545:19">ptr</name> <operator pos:start="545:21" pos:end="545:22">+=</operator> <name pos:start="545:24" pos:end="545:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="549:13" pos:end="549:18">break;</break>

        <case pos:start="551:9" pos:end="551:15">case <expr pos:start="551:14" pos:end="551:14"><literal type="number" pos:start="551:14" pos:end="551:14">8</literal></expr>:</case>

        <case pos:start="553:9" pos:end="553:16">case <expr pos:start="553:14" pos:end="553:15"><literal type="number" pos:start="553:14" pos:end="553:15">24</literal></expr>:</case>

        <case pos:start="555:9" pos:end="555:16">case <expr pos:start="555:14" pos:end="555:15"><literal type="number" pos:start="555:14" pos:end="555:15">32</literal></expr>:</case>

            <for pos:start="557:13" pos:end="565:13">for <control pos:start="557:17" pos:end="557:47">(<init pos:start="557:18" pos:end="557:23"><expr pos:start="557:18" pos:end="557:22"><name pos:start="557:18" pos:end="557:18">i</name> <operator pos:start="557:20" pos:end="557:20">=</operator> <literal type="number" pos:start="557:22" pos:end="557:22">0</literal></expr>;</init> <condition pos:start="557:25" pos:end="557:42"><expr pos:start="557:25" pos:end="557:41"><name pos:start="557:25" pos:end="557:25">i</name> <operator pos:start="557:27" pos:end="557:27">&lt;</operator> <name pos:start="557:29" pos:end="557:41"><name pos:start="557:29" pos:end="557:33">avctx</name><operator pos:start="557:34" pos:end="557:35">-&gt;</operator><name pos:start="557:36" pos:end="557:41">height</name></name></expr>;</condition> <incr pos:start="557:44" pos:end="557:46"><expr pos:start="557:44" pos:end="557:46"><name pos:start="557:44" pos:end="557:44">i</name><operator pos:start="557:45" pos:end="557:46">++</operator></expr></incr>)</control> <block pos:start="557:49" pos:end="565:13">{<block_content pos:start="559:17" pos:end="563:32">

                <expr_stmt pos:start="559:17" pos:end="559:36"><expr pos:start="559:17" pos:end="559:35"><call pos:start="559:17" pos:end="559:35"><name pos:start="559:17" pos:end="559:22">memcpy</name><argument_list pos:start="559:23" pos:end="559:35">(<argument pos:start="559:24" pos:end="559:26"><expr pos:start="559:24" pos:end="559:26"><name pos:start="559:24" pos:end="559:26">ptr</name></expr></argument>, <argument pos:start="559:29" pos:end="559:31"><expr pos:start="559:29" pos:end="559:31"><name pos:start="559:29" pos:end="559:31">buf</name></expr></argument>, <argument pos:start="559:34" pos:end="559:34"><expr pos:start="559:34" pos:end="559:34"><name pos:start="559:34" pos:end="559:34">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="561:17" pos:end="561:25"><expr pos:start="561:17" pos:end="561:24"><name pos:start="561:17" pos:end="561:19">buf</name> <operator pos:start="561:21" pos:end="561:22">+=</operator> <name pos:start="561:24" pos:end="561:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="563:17" pos:end="563:32"><expr pos:start="563:17" pos:end="563:31"><name pos:start="563:17" pos:end="563:19">ptr</name> <operator pos:start="563:21" pos:end="563:22">+=</operator> <name pos:start="563:24" pos:end="563:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="567:13" pos:end="567:18">break;</break>

        <case pos:start="569:9" pos:end="569:15">case <expr pos:start="569:14" pos:end="569:14"><literal type="number" pos:start="569:14" pos:end="569:14">4</literal></expr>:</case>

            <for pos:start="571:13" pos:end="587:13">for <control pos:start="571:17" pos:end="571:47">(<init pos:start="571:18" pos:end="571:23"><expr pos:start="571:18" pos:end="571:22"><name pos:start="571:18" pos:end="571:18">i</name> <operator pos:start="571:20" pos:end="571:20">=</operator> <literal type="number" pos:start="571:22" pos:end="571:22">0</literal></expr>;</init> <condition pos:start="571:25" pos:end="571:42"><expr pos:start="571:25" pos:end="571:41"><name pos:start="571:25" pos:end="571:25">i</name> <operator pos:start="571:27" pos:end="571:27">&lt;</operator> <name pos:start="571:29" pos:end="571:41"><name pos:start="571:29" pos:end="571:33">avctx</name><operator pos:start="571:34" pos:end="571:35">-&gt;</operator><name pos:start="571:36" pos:end="571:41">height</name></name></expr>;</condition> <incr pos:start="571:44" pos:end="571:46"><expr pos:start="571:44" pos:end="571:46"><name pos:start="571:44" pos:end="571:44">i</name><operator pos:start="571:45" pos:end="571:46">++</operator></expr></incr>)</control> <block pos:start="571:49" pos:end="587:13">{<block_content pos:start="573:17" pos:end="585:32">

                <decl_stmt pos:start="573:17" pos:end="573:22"><decl pos:start="573:17" pos:end="573:21"><type pos:start="573:17" pos:end="573:19"><name pos:start="573:17" pos:end="573:19">int</name></type> <name pos:start="573:21" pos:end="573:21">j</name></decl>;</decl_stmt>

                <for pos:start="575:17" pos:end="581:17">for <control pos:start="575:21" pos:end="575:39">(<init pos:start="575:22" pos:end="575:27"><expr pos:start="575:22" pos:end="575:26"><name pos:start="575:22" pos:end="575:22">j</name> <operator pos:start="575:24" pos:end="575:24">=</operator> <literal type="number" pos:start="575:26" pos:end="575:26">0</literal></expr>;</init> <condition pos:start="575:29" pos:end="575:34"><expr pos:start="575:29" pos:end="575:33"><name pos:start="575:29" pos:end="575:29">j</name> <operator pos:start="575:31" pos:end="575:31">&lt;</operator> <name pos:start="575:33" pos:end="575:33">n</name></expr>;</condition> <incr pos:start="575:36" pos:end="575:38"><expr pos:start="575:36" pos:end="575:38"><name pos:start="575:36" pos:end="575:36">j</name><operator pos:start="575:37" pos:end="575:38">++</operator></expr></incr>)</control> <block pos:start="575:41" pos:end="581:17">{<block_content pos:start="577:21" pos:end="579:46">

                    <expr_stmt pos:start="577:21" pos:end="577:53"><expr pos:start="577:21" pos:end="577:52"><name pos:start="577:21" pos:end="577:30"><name pos:start="577:21" pos:end="577:23">ptr</name><index pos:start="577:24" pos:end="577:30">[<expr pos:start="577:25" pos:end="577:29"><name pos:start="577:25" pos:end="577:25">j</name><operator pos:start="577:26" pos:end="577:26">*</operator><literal type="number" pos:start="577:27" pos:end="577:27">2</literal><operator pos:start="577:28" pos:end="577:28">+</operator><literal type="number" pos:start="577:29" pos:end="577:29">0</literal></expr>]</index></name> <operator pos:start="577:32" pos:end="577:32">=</operator> <operator pos:start="577:34" pos:end="577:34">(</operator><name pos:start="577:35" pos:end="577:40"><name pos:start="577:35" pos:end="577:37">buf</name><index pos:start="577:38" pos:end="577:40">[<expr pos:start="577:39" pos:end="577:39"><name pos:start="577:39" pos:end="577:39">j</name></expr>]</index></name> <operator pos:start="577:42" pos:end="577:43">&gt;&gt;</operator> <literal type="number" pos:start="577:45" pos:end="577:45">4</literal><operator pos:start="577:46" pos:end="577:46">)</operator> <operator pos:start="577:48" pos:end="577:48">&amp;</operator> <literal type="number" pos:start="577:50" pos:end="577:52">0xF</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="579:21" pos:end="579:46"><expr pos:start="579:21" pos:end="579:45"><name pos:start="579:21" pos:end="579:30"><name pos:start="579:21" pos:end="579:23">ptr</name><index pos:start="579:24" pos:end="579:30">[<expr pos:start="579:25" pos:end="579:29"><name pos:start="579:25" pos:end="579:25">j</name><operator pos:start="579:26" pos:end="579:26">*</operator><literal type="number" pos:start="579:27" pos:end="579:27">2</literal><operator pos:start="579:28" pos:end="579:28">+</operator><literal type="number" pos:start="579:29" pos:end="579:29">1</literal></expr>]</index></name> <operator pos:start="579:32" pos:end="579:32">=</operator> <name pos:start="579:34" pos:end="579:39"><name pos:start="579:34" pos:end="579:36">buf</name><index pos:start="579:37" pos:end="579:39">[<expr pos:start="579:38" pos:end="579:38"><name pos:start="579:38" pos:end="579:38">j</name></expr>]</index></name> <operator pos:start="579:41" pos:end="579:41">&amp;</operator> <literal type="number" pos:start="579:43" pos:end="579:45">0xF</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="583:17" pos:end="583:25"><expr pos:start="583:17" pos:end="583:24"><name pos:start="583:17" pos:end="583:19">buf</name> <operator pos:start="583:21" pos:end="583:22">+=</operator> <name pos:start="583:24" pos:end="583:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="585:17" pos:end="585:32"><expr pos:start="585:17" pos:end="585:31"><name pos:start="585:17" pos:end="585:19">ptr</name> <operator pos:start="585:21" pos:end="585:22">+=</operator> <name pos:start="585:24" pos:end="585:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="589:13" pos:end="589:18">break;</break>

        <case pos:start="591:9" pos:end="591:16">case <expr pos:start="591:14" pos:end="591:15"><literal type="number" pos:start="591:14" pos:end="591:15">16</literal></expr>:</case>

            <for pos:start="593:13" pos:end="611:13">for <control pos:start="593:17" pos:end="593:47">(<init pos:start="593:18" pos:end="593:23"><expr pos:start="593:18" pos:end="593:22"><name pos:start="593:18" pos:end="593:18">i</name> <operator pos:start="593:20" pos:end="593:20">=</operator> <literal type="number" pos:start="593:22" pos:end="593:22">0</literal></expr>;</init> <condition pos:start="593:25" pos:end="593:42"><expr pos:start="593:25" pos:end="593:41"><name pos:start="593:25" pos:end="593:25">i</name> <operator pos:start="593:27" pos:end="593:27">&lt;</operator> <name pos:start="593:29" pos:end="593:41"><name pos:start="593:29" pos:end="593:33">avctx</name><operator pos:start="593:34" pos:end="593:35">-&gt;</operator><name pos:start="593:36" pos:end="593:41">height</name></name></expr>;</condition> <incr pos:start="593:44" pos:end="593:46"><expr pos:start="593:44" pos:end="593:46"><name pos:start="593:44" pos:end="593:44">i</name><operator pos:start="593:45" pos:end="593:46">++</operator></expr></incr>)</control> <block pos:start="593:49" pos:end="611:13">{<block_content pos:start="595:17" pos:end="609:32">

                <decl_stmt pos:start="595:17" pos:end="595:61"><decl pos:start="595:17" pos:end="595:60"><type pos:start="595:17" pos:end="595:32"><specifier pos:start="595:17" pos:end="595:21">const</specifier> <name pos:start="595:23" pos:end="595:30">uint16_t</name> <modifier pos:start="595:32" pos:end="595:32">*</modifier></type><name pos:start="595:33" pos:end="595:35">src</name> <init pos:start="595:37" pos:end="595:60">= <expr pos:start="595:39" pos:end="595:60"><operator pos:start="595:39" pos:end="595:39">(</operator><specifier pos:start="595:40" pos:end="595:44">const</specifier> <name pos:start="595:46" pos:end="595:53">uint16_t</name> <operator pos:start="595:55" pos:end="595:55">*</operator><operator pos:start="595:56" pos:end="595:56">)</operator> <name pos:start="595:58" pos:end="595:60">buf</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="597:17" pos:end="597:55"><decl pos:start="597:17" pos:end="597:54"><type pos:start="597:17" pos:end="597:26"><name pos:start="597:17" pos:end="597:24">uint16_t</name> <modifier pos:start="597:26" pos:end="597:26">*</modifier></type><name pos:start="597:27" pos:end="597:29">dst</name>       <init pos:start="597:37" pos:end="597:54">= <expr pos:start="597:39" pos:end="597:54"><operator pos:start="597:39" pos:end="597:39">(</operator><name pos:start="597:40" pos:end="597:47">uint16_t</name> <operator pos:start="597:49" pos:end="597:49">*</operator><operator pos:start="597:50" pos:end="597:50">)</operator> <name pos:start="597:52" pos:end="597:54">ptr</name></expr></init></decl>;</decl_stmt>



                <for pos:start="601:17" pos:end="603:48">for <control pos:start="601:21" pos:end="601:50">(<init pos:start="601:22" pos:end="601:27"><expr pos:start="601:22" pos:end="601:26"><name pos:start="601:22" pos:end="601:22">j</name> <operator pos:start="601:24" pos:end="601:24">=</operator> <literal type="number" pos:start="601:26" pos:end="601:26">0</literal></expr>;</init> <condition pos:start="601:29" pos:end="601:45"><expr pos:start="601:29" pos:end="601:44"><name pos:start="601:29" pos:end="601:29">j</name> <operator pos:start="601:31" pos:end="601:31">&lt;</operator> <name pos:start="601:33" pos:end="601:44"><name pos:start="601:33" pos:end="601:37">avctx</name><operator pos:start="601:38" pos:end="601:39">-&gt;</operator><name pos:start="601:40" pos:end="601:44">width</name></name></expr>;</condition> <incr pos:start="601:47" pos:end="601:49"><expr pos:start="601:47" pos:end="601:49"><name pos:start="601:47" pos:end="601:47">j</name><operator pos:start="601:48" pos:end="601:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="603:21" pos:end="603:48"><block_content pos:start="603:21" pos:end="603:48">

                    <expr_stmt pos:start="603:21" pos:end="603:48"><expr pos:start="603:21" pos:end="603:47"><operator pos:start="603:21" pos:end="603:21">*</operator><name pos:start="603:22" pos:end="603:24">dst</name><operator pos:start="603:25" pos:end="603:26">++</operator> <operator pos:start="603:28" pos:end="603:28">=</operator> <call pos:start="603:30" pos:end="603:47"><name pos:start="603:30" pos:end="603:39">av_le2ne16</name><argument_list pos:start="603:40" pos:end="603:47">(<argument pos:start="603:41" pos:end="603:46"><expr pos:start="603:41" pos:end="603:46"><operator pos:start="603:41" pos:end="603:41">*</operator><name pos:start="603:42" pos:end="603:44">src</name><operator pos:start="603:45" pos:end="603:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



                <expr_stmt pos:start="607:17" pos:end="607:25"><expr pos:start="607:17" pos:end="607:24"><name pos:start="607:17" pos:end="607:19">buf</name> <operator pos:start="607:21" pos:end="607:22">+=</operator> <name pos:start="607:24" pos:end="607:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="609:17" pos:end="609:32"><expr pos:start="609:17" pos:end="609:31"><name pos:start="609:17" pos:end="609:19">ptr</name> <operator pos:start="609:21" pos:end="609:22">+=</operator> <name pos:start="609:24" pos:end="609:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="613:13" pos:end="613:18">break;</break>

        <default pos:start="615:9" pos:end="615:16">default:</default>

            <expr_stmt pos:start="617:13" pos:end="617:67"><expr pos:start="617:13" pos:end="617:66"><call pos:start="617:13" pos:end="617:66"><name pos:start="617:13" pos:end="617:18">av_log</name><argument_list pos:start="617:19" pos:end="617:66">(<argument pos:start="617:20" pos:end="617:24"><expr pos:start="617:20" pos:end="617:24"><name pos:start="617:20" pos:end="617:24">avctx</name></expr></argument>, <argument pos:start="617:27" pos:end="617:38"><expr pos:start="617:27" pos:end="617:38"><name pos:start="617:27" pos:end="617:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="617:41" pos:end="617:65"><expr pos:start="617:41" pos:end="617:65"><literal type="string" pos:start="617:41" pos:end="617:65">"BMP decoder is broken\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="619:13" pos:end="619:39">return <expr pos:start="619:20" pos:end="619:38"><name pos:start="619:20" pos:end="619:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="625:5" pos:end="651:5"><if pos:start="625:5" pos:end="651:5">if <condition pos:start="625:8" pos:end="625:42">(<expr pos:start="625:9" pos:end="625:41"><name pos:start="625:9" pos:end="625:22"><name pos:start="625:9" pos:end="625:13">avctx</name><operator pos:start="625:14" pos:end="625:15">-&gt;</operator><name pos:start="625:16" pos:end="625:22">pix_fmt</name></name> <operator pos:start="625:24" pos:end="625:25">==</operator> <name pos:start="625:27" pos:end="625:41">AV_PIX_FMT_BGRA</name></expr>)</condition> <block pos:start="625:44" pos:end="651:5">{<block_content pos:start="627:9" pos:end="649:57">

        <for pos:start="627:9" pos:end="645:9">for <control pos:start="627:13" pos:end="627:43">(<init pos:start="627:14" pos:end="627:19"><expr pos:start="627:14" pos:end="627:18"><name pos:start="627:14" pos:end="627:14">i</name> <operator pos:start="627:16" pos:end="627:16">=</operator> <literal type="number" pos:start="627:18" pos:end="627:18">0</literal></expr>;</init> <condition pos:start="627:21" pos:end="627:38"><expr pos:start="627:21" pos:end="627:37"><name pos:start="627:21" pos:end="627:21">i</name> <operator pos:start="627:23" pos:end="627:23">&lt;</operator> <name pos:start="627:25" pos:end="627:37"><name pos:start="627:25" pos:end="627:29">avctx</name><operator pos:start="627:30" pos:end="627:31">-&gt;</operator><name pos:start="627:32" pos:end="627:37">height</name></name></expr>;</condition> <incr pos:start="627:40" pos:end="627:42"><expr pos:start="627:40" pos:end="627:42"><name pos:start="627:40" pos:end="627:40">i</name><operator pos:start="627:41" pos:end="627:42">++</operator></expr></incr>)</control> <block pos:start="627:45" pos:end="645:9">{<block_content pos:start="629:13" pos:end="643:22">

            <decl_stmt pos:start="629:13" pos:end="629:18"><decl pos:start="629:13" pos:end="629:17"><type pos:start="629:13" pos:end="629:15"><name pos:start="629:13" pos:end="629:15">int</name></type> <name pos:start="629:17" pos:end="629:17">j</name></decl>;</decl_stmt>

            <decl_stmt pos:start="631:13" pos:end="631:61"><decl pos:start="631:13" pos:end="631:60"><type pos:start="631:13" pos:end="631:21"><name pos:start="631:13" pos:end="631:19">uint8_t</name> <modifier pos:start="631:21" pos:end="631:21">*</modifier></type><name pos:start="631:22" pos:end="631:24">ptr</name> <init pos:start="631:26" pos:end="631:60">= <expr pos:start="631:28" pos:end="631:60"><name pos:start="631:28" pos:end="631:37"><name pos:start="631:28" pos:end="631:28">p</name><operator pos:start="631:29" pos:end="631:30">-&gt;</operator><name pos:start="631:31" pos:end="631:34">data</name><index pos:start="631:35" pos:end="631:37">[<expr pos:start="631:36" pos:end="631:36"><literal type="number" pos:start="631:36" pos:end="631:36">0</literal></expr>]</index></name> <operator pos:start="631:39" pos:end="631:39">+</operator> <name pos:start="631:41" pos:end="631:54"><name pos:start="631:41" pos:end="631:41">p</name><operator pos:start="631:42" pos:end="631:43">-&gt;</operator><name pos:start="631:44" pos:end="631:51">linesize</name><index pos:start="631:52" pos:end="631:54">[<expr pos:start="631:53" pos:end="631:53"><literal type="number" pos:start="631:53" pos:end="631:53">0</literal></expr>]</index></name><operator pos:start="631:55" pos:end="631:55">*</operator><name pos:start="631:56" pos:end="631:56">i</name> <operator pos:start="631:58" pos:end="631:58">+</operator> <literal type="number" pos:start="631:60" pos:end="631:60">3</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="633:13" pos:end="639:13">for <control pos:start="633:17" pos:end="633:46">(<init pos:start="633:18" pos:end="633:23"><expr pos:start="633:18" pos:end="633:22"><name pos:start="633:18" pos:end="633:18">j</name> <operator pos:start="633:20" pos:end="633:20">=</operator> <literal type="number" pos:start="633:22" pos:end="633:22">0</literal></expr>;</init> <condition pos:start="633:25" pos:end="633:41"><expr pos:start="633:25" pos:end="633:40"><name pos:start="633:25" pos:end="633:25">j</name> <operator pos:start="633:27" pos:end="633:27">&lt;</operator> <name pos:start="633:29" pos:end="633:40"><name pos:start="633:29" pos:end="633:33">avctx</name><operator pos:start="633:34" pos:end="633:35">-&gt;</operator><name pos:start="633:36" pos:end="633:40">width</name></name></expr>;</condition> <incr pos:start="633:43" pos:end="633:45"><expr pos:start="633:43" pos:end="633:45"><name pos:start="633:43" pos:end="633:43">j</name><operator pos:start="633:44" pos:end="633:45">++</operator></expr></incr>)</control> <block pos:start="633:48" pos:end="639:13">{<block_content pos:start="635:17" pos:end="637:26">

                <if_stmt pos:start="635:17" pos:end="637:26"><if pos:start="635:17" pos:end="637:26">if <condition pos:start="635:20" pos:end="635:29">(<expr pos:start="635:21" pos:end="635:28"><name pos:start="635:21" pos:end="635:28"><name pos:start="635:21" pos:end="635:23">ptr</name><index pos:start="635:24" pos:end="635:28">[<expr pos:start="635:25" pos:end="635:27"><literal type="number" pos:start="635:25" pos:end="635:25">4</literal><operator pos:start="635:26" pos:end="635:26">*</operator><name pos:start="635:27" pos:end="635:27">j</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="637:21" pos:end="637:26"><block_content pos:start="637:21" pos:end="637:26">

                    <break pos:start="637:21" pos:end="637:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="641:13" pos:end="643:22"><if pos:start="641:13" pos:end="643:22">if <condition pos:start="641:16" pos:end="641:33">(<expr pos:start="641:17" pos:end="641:32"><name pos:start="641:17" pos:end="641:17">j</name> <operator pos:start="641:19" pos:end="641:19">&lt;</operator> <name pos:start="641:21" pos:end="641:32"><name pos:start="641:21" pos:end="641:25">avctx</name><operator pos:start="641:26" pos:end="641:27">-&gt;</operator><name pos:start="641:28" pos:end="641:32">width</name></name></expr>)</condition><block type="pseudo" pos:start="643:17" pos:end="643:22"><block_content pos:start="643:17" pos:end="643:22">

                <break pos:start="643:17" pos:end="643:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="647:9" pos:end="649:57"><if pos:start="647:9" pos:end="649:57">if <condition pos:start="647:12" pos:end="647:31">(<expr pos:start="647:13" pos:end="647:30"><name pos:start="647:13" pos:end="647:13">i</name> <operator pos:start="647:15" pos:end="647:16">==</operator> <name pos:start="647:18" pos:end="647:30"><name pos:start="647:18" pos:end="647:22">avctx</name><operator pos:start="647:23" pos:end="647:24">-&gt;</operator><name pos:start="647:25" pos:end="647:30">height</name></name></expr>)</condition><block type="pseudo" pos:start="649:13" pos:end="649:57"><block_content pos:start="649:13" pos:end="649:57">

            <expr_stmt pos:start="649:13" pos:end="649:57"><expr pos:start="649:13" pos:end="649:56"><name pos:start="649:13" pos:end="649:26"><name pos:start="649:13" pos:end="649:17">avctx</name><operator pos:start="649:18" pos:end="649:19">-&gt;</operator><name pos:start="649:20" pos:end="649:26">pix_fmt</name></name> <operator pos:start="649:28" pos:end="649:28">=</operator> <name pos:start="649:30" pos:end="649:38"><name pos:start="649:30" pos:end="649:30">p</name><operator pos:start="649:31" pos:end="649:32">-&gt;</operator><name pos:start="649:33" pos:end="649:38">format</name></name> <operator pos:start="649:40" pos:end="649:40">=</operator> <name pos:start="649:42" pos:end="649:56">AV_PIX_FMT_BGR0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="655:5" pos:end="655:19"><expr pos:start="655:5" pos:end="655:18"><operator pos:start="655:5" pos:end="655:5">*</operator><name pos:start="655:6" pos:end="655:14">got_frame</name> <operator pos:start="655:16" pos:end="655:16">=</operator> <literal type="number" pos:start="655:18" pos:end="655:18">1</literal></expr>;</expr_stmt>



    <return pos:start="659:5" pos:end="659:20">return <expr pos:start="659:12" pos:end="659:19"><name pos:start="659:12" pos:end="659:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
