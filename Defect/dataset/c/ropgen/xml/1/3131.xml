<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3131.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">ide_atapi_cmd_read_dma_cb</name><parameter_list pos:start="1:38" pos:end="1:60">(<parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">opaque</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:59"><decl pos:start="1:53" pos:end="1:59"><type pos:start="1:53" pos:end="1:59"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:59">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:31">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IDEState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">data_offset</name></decl>, <decl pos:start="7:22" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:22">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:16">(<expr pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:11">ret</name> <operator pos:start="11:13" pos:end="11:13">&lt;</operator> <literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr>)</condition> <block pos:start="11:18" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:17">

        <expr_stmt pos:start="13:9" pos:end="13:35"><expr pos:start="13:9" pos:end="13:34"><call pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:26">ide_atapi_io_error</name><argument_list pos:start="13:27" pos:end="13:34">(<argument pos:start="13:28" pos:end="13:28"><expr pos:start="13:28" pos:end="13:28"><name pos:start="13:28" pos:end="13:28">s</name></expr></argument>, <argument pos:start="13:31" pos:end="13:33"><expr pos:start="13:31" pos:end="13:33"><name pos:start="13:31" pos:end="13:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="15:9" pos:end="15:17">goto <name pos:start="15:14" pos:end="15:16">eot</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="61:5"><if pos:start="21:5" pos:end="61:5">if <condition pos:start="21:8" pos:end="21:30">(<expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:25">io_buffer_size</name></name> <operator pos:start="21:27" pos:end="21:27">&gt;</operator> <literal type="number" pos:start="21:29" pos:end="21:29">0</literal></expr>)</condition> <block pos:start="21:32" pos:end="61:5">{<block_content pos:start="37:9" pos:end="59:21">

        <comment type="block" pos:start="23:9" pos:end="35:11">/*

         * For a cdrom read sector command (s-&gt;lba != -1),

         * adjust the lba for the next s-&gt;io_buffer_size chunk

         * and dma the current chunk.

         * For a command != read (s-&gt;lba == -1), just transfer

         * the reply data.

         */</comment>

        <if_stmt pos:start="37:9" pos:end="53:9"><if pos:start="37:9" pos:end="53:9">if <condition pos:start="37:12" pos:end="37:25">(<expr pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:18">lba</name></name> <operator pos:start="37:20" pos:end="37:21">!=</operator> <operator pos:start="37:23" pos:end="37:23">-</operator><literal type="number" pos:start="37:24" pos:end="37:24">1</literal></expr>)</condition> <block pos:start="37:27" pos:end="53:9">{<block_content pos:start="39:13" pos:end="51:24">

            <if_stmt pos:start="39:13" pos:end="49:13"><if pos:start="39:13" pos:end="45:13">if <condition pos:start="39:16" pos:end="39:42">(<expr pos:start="39:17" pos:end="39:41"><name pos:start="39:17" pos:end="39:33"><name pos:start="39:17" pos:end="39:17">s</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:33">cd_sector_size</name></name> <operator pos:start="39:35" pos:end="39:36">==</operator> <literal type="number" pos:start="39:38" pos:end="39:41">2352</literal></expr>)</condition> <block pos:start="39:44" pos:end="45:13">{<block_content pos:start="41:17" pos:end="43:53">

                <expr_stmt pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:21"><name pos:start="41:17" pos:end="41:17">n</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:53"><expr pos:start="43:17" pos:end="43:52"><call pos:start="43:17" pos:end="43:52"><name pos:start="43:17" pos:end="43:30">cd_data_to_raw</name><argument_list pos:start="43:31" pos:end="43:52">(<argument pos:start="43:32" pos:end="43:43"><expr pos:start="43:32" pos:end="43:43"><name pos:start="43:32" pos:end="43:43"><name pos:start="43:32" pos:end="43:32">s</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:43">io_buffer</name></name></expr></argument>, <argument pos:start="43:46" pos:end="43:51"><expr pos:start="43:46" pos:end="43:51"><name pos:start="43:46" pos:end="43:51"><name pos:start="43:46" pos:end="43:46">s</name><operator pos:start="43:47" pos:end="43:48">-&gt;</operator><name pos:start="43:49" pos:end="43:51">lba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="45:15" pos:end="49:13">else <block pos:start="45:20" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:44">

                <expr_stmt pos:start="47:17" pos:end="47:44"><expr pos:start="47:17" pos:end="47:43"><name pos:start="47:17" pos:end="47:17">n</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:37"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:37">io_buffer_size</name></name> <operator pos:start="47:39" pos:end="47:40">&gt;&gt;</operator> <literal type="number" pos:start="47:42" pos:end="47:43">11</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:24"><expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:18">lba</name></name> <operator pos:start="51:20" pos:end="51:21">+=</operator> <name pos:start="51:23" pos:end="51:23">n</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:53"><expr pos:start="55:9" pos:end="55:52"><name pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:31">packet_transfer_size</name></name> <operator pos:start="55:33" pos:end="55:34">-=</operator> <name pos:start="55:36" pos:end="55:52"><name pos:start="55:36" pos:end="55:36">s</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:52">io_buffer_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="59:21"><if pos:start="57:9" pos:end="59:21">if <condition pos:start="57:12" pos:end="57:58">(<expr pos:start="57:13" pos:end="57:57"><call pos:start="57:13" pos:end="57:52"><name pos:start="57:13" pos:end="57:36"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:18">bus</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:23">dma</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:28">ops</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:36">rw_buf</name></name><argument_list pos:start="57:37" pos:end="57:52">(<argument pos:start="57:38" pos:end="57:48"><expr pos:start="57:38" pos:end="57:48"><name pos:start="57:38" pos:end="57:48"><name pos:start="57:38" pos:end="57:38">s</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:43">bus</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:48">dma</name></name></expr></argument>, <argument pos:start="57:51" pos:end="57:51"><expr pos:start="57:51" pos:end="57:51"><literal type="number" pos:start="57:51" pos:end="57:51">1</literal></expr></argument>)</argument_list></call> <operator pos:start="57:54" pos:end="57:55">==</operator> <literal type="number" pos:start="57:57" pos:end="57:57">0</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:21"><block_content pos:start="59:13" pos:end="59:21">

            <goto pos:start="59:13" pos:end="59:21">goto <name pos:start="59:18" pos:end="59:20">eot</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="75:5"><if pos:start="65:5" pos:end="75:5">if <condition pos:start="65:8" pos:end="65:37">(<expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:31"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:31">packet_transfer_size</name></name> <operator pos:start="65:33" pos:end="65:34">&lt;=</operator> <literal type="number" pos:start="65:36" pos:end="65:36">0</literal></expr>)</condition> <block pos:start="65:39" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:17">

        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">status</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:30">READY_STAT</name> <operator pos:start="67:32" pos:end="67:32">|</operator> <name pos:start="67:34" pos:end="67:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:83"><expr pos:start="69:9" pos:end="69:82"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:18">nsector</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <operator pos:start="69:22" pos:end="69:22">(</operator><name pos:start="69:23" pos:end="69:32"><name pos:start="69:23" pos:end="69:23">s</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:32">nsector</name></name> <operator pos:start="69:34" pos:end="69:34">&amp;</operator> <operator pos:start="69:36" pos:end="69:36">~</operator><literal type="number" pos:start="69:37" pos:end="69:37">7</literal><operator pos:start="69:38" pos:end="69:38">)</operator> <operator pos:start="69:40" pos:end="69:40">|</operator> <name pos:start="69:42" pos:end="69:60">ATAPI_INT_REASON_IO</name> <operator pos:start="69:62" pos:end="69:62">|</operator> <name pos:start="69:64" pos:end="69:82">ATAPI_INT_REASON_CD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:28"><expr pos:start="71:9" pos:end="71:27"><call pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:19">ide_set_irq</name><argument_list pos:start="71:20" pos:end="71:27">(<argument pos:start="71:21" pos:end="71:26"><expr pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:26"><name pos:start="71:21" pos:end="71:21">s</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">eot</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:27"><expr pos:start="79:5" pos:end="79:26"><name pos:start="79:5" pos:end="79:22"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:22">io_buffer_index</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <literal type="number" pos:start="79:26" pos:end="79:26">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="104:0"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:34">(<expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:25">cd_sector_size</name></name> <operator pos:start="81:27" pos:end="81:28">==</operator> <literal type="number" pos:start="81:30" pos:end="81:33">2352</literal></expr>)</condition> <block pos:start="81:36" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:25">

        <expr_stmt pos:start="83:9" pos:end="83:14"><expr pos:start="83:9" pos:end="83:13"><name pos:start="83:9" pos:end="83:9">n</name> <operator pos:start="83:11" pos:end="83:11">=</operator> <literal type="number" pos:start="83:13" pos:end="83:13">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:46"><expr pos:start="85:9" pos:end="85:45"><name pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:25">io_buffer_size</name></name> <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:45"><name pos:start="85:29" pos:end="85:29">s</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:45">cd_sector_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:25"><expr pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:19">data_offset</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <literal type="number" pos:start="87:23" pos:end="87:24">16</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="104:0">else <block pos:start="89:12" pos:end="104:0">{<block_content pos:start="91:9" pos:end="99:24">

        <expr_stmt pos:start="91:9" pos:end="91:42"><expr pos:start="91:9" pos:end="91:41"><name pos:start="91:9" pos:end="91:9">n</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <name pos:start="91:13" pos:end="91:35"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:35">packet_transfer_size</name></name> <operator pos:start="91:37" pos:end="91:38">&gt;&gt;</operator> <literal type="number" pos:start="91:40" pos:end="91:41">11</literal></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="95:42"><if pos:start="93:9" pos:end="95:42">if <condition pos:start="93:12" pos:end="93:42">(<expr pos:start="93:13" pos:end="93:41"><name pos:start="93:13" pos:end="93:13">n</name> <operator pos:start="93:15" pos:end="93:15">&gt;</operator> <operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:36">IDE_DMA_BUF_SECTORS</name> <operator pos:start="93:38" pos:end="93:38">/</operator> <literal type="number" pos:start="93:40" pos:end="93:40">4</literal><operator pos:start="93:41" pos:end="93:41">)</operator></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:42"><block_content pos:start="95:13" pos:end="95:42">

            <expr_stmt pos:start="95:13" pos:end="95:42"><expr pos:start="95:13" pos:end="95:41"><name pos:start="95:13" pos:end="95:13">n</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <operator pos:start="95:17" pos:end="95:17">(</operator><name pos:start="95:18" pos:end="95:36">IDE_DMA_BUF_SECTORS</name> <operator pos:start="95:38" pos:end="95:38">/</operator> <literal type="number" pos:start="95:40" pos:end="95:40">4</literal><operator pos:start="95:41" pos:end="95:41">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:37"><expr pos:start="97:9" pos:end="97:36"><name pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:25">io_buffer_size</name></name> <operator pos:start="97:27" pos:end="97:27">=</operator> <name pos:start="97:29" pos:end="97:29">n</name> <operator pos:start="97:31" pos:end="97:31">*</operator> <literal type="number" pos:start="97:33" pos:end="97:36">2048</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:19">data_offset</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <literal type="number" pos:start="99:23" pos:end="99:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="103:1" pos:end="103:16">#<cpp:directive pos:start="103:2" pos:end="103:6">ifdef</cpp:directive> <name pos:start="103:8" pos:end="103:16">DEBUG_AIO</name></cpp:ifdef>

    <expr_stmt pos:start="105:5" pos:end="108:0"><expr pos:start="105:5" pos:end="105:51"><call pos:start="105:5" pos:end="105:51"><name pos:start="105:5" pos:end="105:10">printf</name><argument_list pos:start="105:11" pos:end="105:51">(<argument pos:start="105:12" pos:end="105:39"><expr pos:start="105:12" pos:end="105:39"><literal type="string" pos:start="105:12" pos:end="105:39">"aio_read_cd: lba=%u n=%d\n"</literal></expr></argument>, <argument pos:start="105:42" pos:end="105:47"><expr pos:start="105:42" pos:end="105:47"><name pos:start="105:42" pos:end="105:47"><name pos:start="105:42" pos:end="105:42">s</name><operator pos:start="105:43" pos:end="105:44">-&gt;</operator><name pos:start="105:45" pos:end="105:47">lba</name></name></expr></argument>, <argument pos:start="105:50" pos:end="105:50"><expr pos:start="105:50" pos:end="105:50"><name pos:start="105:50" pos:end="105:50">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="107:1" pos:end="107:6">#<cpp:directive pos:start="107:2" pos:end="107:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="111:5" pos:end="111:69"><expr pos:start="111:5" pos:end="111:68"><name pos:start="111:5" pos:end="111:29"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:10">bus</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:15">dma</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:20">iov</name><operator pos:start="111:21" pos:end="111:21">.</operator><name pos:start="111:22" pos:end="111:29">iov_base</name></name> <operator pos:start="111:31" pos:end="111:31">=</operator> <operator pos:start="111:33" pos:end="111:33">(</operator><name pos:start="111:34" pos:end="111:37">void</name> <operator pos:start="111:39" pos:end="111:39">*</operator><operator pos:start="111:40" pos:end="111:40">)</operator><operator pos:start="111:41" pos:end="111:41">(</operator><name pos:start="111:42" pos:end="111:53"><name pos:start="111:42" pos:end="111:42">s</name><operator pos:start="111:43" pos:end="111:44">-&gt;</operator><name pos:start="111:45" pos:end="111:53">io_buffer</name></name> <operator pos:start="111:55" pos:end="111:55">+</operator> <name pos:start="111:57" pos:end="111:67">data_offset</name><operator pos:start="111:68" pos:end="111:68">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:43"><expr pos:start="113:5" pos:end="113:42"><name pos:start="113:5" pos:end="113:28"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:10">bus</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:15">dma</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:20">iov</name><operator pos:start="113:21" pos:end="113:21">.</operator><name pos:start="113:22" pos:end="113:28">iov_len</name></name> <operator pos:start="113:30" pos:end="113:30">=</operator> <name pos:start="113:32" pos:end="113:32">n</name> <operator pos:start="113:34" pos:end="113:34">*</operator> <literal type="number" pos:start="113:36" pos:end="113:36">4</literal> <operator pos:start="113:38" pos:end="113:38">*</operator> <literal type="number" pos:start="113:40" pos:end="113:42">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:71"><expr pos:start="115:5" pos:end="115:70"><call pos:start="115:5" pos:end="115:70"><name pos:start="115:5" pos:end="115:28">qemu_iovec_init_external</name><argument_list pos:start="115:29" pos:end="115:70">(<argument pos:start="115:30" pos:end="115:47"><expr pos:start="115:30" pos:end="115:47"><operator pos:start="115:30" pos:end="115:30">&amp;</operator><name pos:start="115:31" pos:end="115:47"><name pos:start="115:31" pos:end="115:31">s</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:36">bus</name><operator pos:start="115:37" pos:end="115:38">-&gt;</operator><name pos:start="115:39" pos:end="115:41">dma</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:47">qiov</name></name></expr></argument>, <argument pos:start="115:50" pos:end="115:66"><expr pos:start="115:50" pos:end="115:66"><operator pos:start="115:50" pos:end="115:50">&amp;</operator><name pos:start="115:51" pos:end="115:66"><name pos:start="115:51" pos:end="115:51">s</name><operator pos:start="115:52" pos:end="115:53">-&gt;</operator><name pos:start="115:54" pos:end="115:56">bus</name><operator pos:start="115:57" pos:end="115:58">-&gt;</operator><name pos:start="115:59" pos:end="115:61">dma</name><operator pos:start="115:62" pos:end="115:63">-&gt;</operator><name pos:start="115:64" pos:end="115:66">iov</name></name></expr></argument>, <argument pos:start="115:69" pos:end="115:69"><expr pos:start="115:69" pos:end="115:69"><literal type="number" pos:start="115:69" pos:end="115:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="119:5" pos:end="123:69"><expr pos:start="119:5" pos:end="123:68"><name pos:start="119:5" pos:end="119:22"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:10">bus</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:15">dma</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:22">aiocb</name></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <call pos:start="119:26" pos:end="123:68"><name pos:start="119:26" pos:end="119:38">blk_aio_readv</name><argument_list pos:start="119:39" pos:end="123:68">(<argument pos:start="119:40" pos:end="119:45"><expr pos:start="119:40" pos:end="119:45"><name pos:start="119:40" pos:end="119:45"><name pos:start="119:40" pos:end="119:40">s</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:45">blk</name></name></expr></argument>, <argument pos:start="119:48" pos:end="119:67"><expr pos:start="119:48" pos:end="119:67"><operator pos:start="119:48" pos:end="119:48">(</operator><name pos:start="119:49" pos:end="119:55">int64_t</name><operator pos:start="119:56" pos:end="119:56">)</operator><name pos:start="119:57" pos:end="119:62"><name pos:start="119:57" pos:end="119:57">s</name><operator pos:start="119:58" pos:end="119:59">-&gt;</operator><name pos:start="119:60" pos:end="119:62">lba</name></name> <operator pos:start="119:64" pos:end="119:65">&lt;&lt;</operator> <literal type="number" pos:start="119:67" pos:end="119:67">2</literal></expr></argument>,

                                       <argument pos:start="121:40" pos:end="121:57"><expr pos:start="121:40" pos:end="121:57"><operator pos:start="121:40" pos:end="121:40">&amp;</operator><name pos:start="121:41" pos:end="121:57"><name pos:start="121:41" pos:end="121:41">s</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:46">bus</name><operator pos:start="121:47" pos:end="121:48">-&gt;</operator><name pos:start="121:49" pos:end="121:51">dma</name><operator pos:start="121:52" pos:end="121:53">-&gt;</operator><name pos:start="121:54" pos:end="121:57">qiov</name></name></expr></argument>, <argument pos:start="121:60" pos:end="121:64"><expr pos:start="121:60" pos:end="121:64"><name pos:start="121:60" pos:end="121:60">n</name> <operator pos:start="121:62" pos:end="121:62">*</operator> <literal type="number" pos:start="121:64" pos:end="121:64">4</literal></expr></argument>,

                                       <argument pos:start="123:40" pos:end="123:64"><expr pos:start="123:40" pos:end="123:64"><name pos:start="123:40" pos:end="123:64">ide_atapi_cmd_read_dma_cb</name></expr></argument>, <argument pos:start="123:67" pos:end="123:67"><expr pos:start="123:67" pos:end="123:67"><name pos:start="123:67" pos:end="123:67">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:11">return;</return>



<label pos:start="129:1" pos:end="129:4"><name pos:start="129:1" pos:end="129:3">eot</name>:</label>

    <expr_stmt pos:start="131:5" pos:end="131:53"><expr pos:start="131:5" pos:end="131:52"><call pos:start="131:5" pos:end="131:52"><name pos:start="131:5" pos:end="131:19">block_acct_done</name><argument_list pos:start="131:20" pos:end="131:52">(<argument pos:start="131:21" pos:end="131:41"><expr pos:start="131:21" pos:end="131:41"><call pos:start="131:21" pos:end="131:41"><name pos:start="131:21" pos:end="131:33">blk_get_stats</name><argument_list pos:start="131:34" pos:end="131:41">(<argument pos:start="131:35" pos:end="131:40"><expr pos:start="131:35" pos:end="131:40"><name pos:start="131:35" pos:end="131:40"><name pos:start="131:35" pos:end="131:35">s</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:40">blk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="131:44" pos:end="131:51"><expr pos:start="131:44" pos:end="131:51"><operator pos:start="131:44" pos:end="131:44">&amp;</operator><name pos:start="131:45" pos:end="131:51"><name pos:start="131:45" pos:end="131:45">s</name><operator pos:start="131:46" pos:end="131:47">-&gt;</operator><name pos:start="131:48" pos:end="131:51">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:31"><expr pos:start="133:5" pos:end="133:30"><call pos:start="133:5" pos:end="133:30"><name pos:start="133:5" pos:end="133:20">ide_set_inactive</name><argument_list pos:start="133:21" pos:end="133:30">(<argument pos:start="133:22" pos:end="133:22"><expr pos:start="133:22" pos:end="133:22"><name pos:start="133:22" pos:end="133:22">s</name></expr></argument>, <argument pos:start="133:25" pos:end="133:29"><expr pos:start="133:25" pos:end="133:29"><name pos:start="133:25" pos:end="133:29">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
