<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/846.c" pos:tabs="8"><function pos:start="1:1" pos:end="140:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name></type> <name pos:start="1:16" pos:end="1:26">load_kernel</name><parameter_list pos:start="1:27" pos:end="1:32">(<parameter pos:start="1:28" pos:end="1:31"><decl pos:start="1:28" pos:end="1:31"><type pos:start="1:28" pos:end="1:31"><name pos:start="1:28" pos:end="1:31">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="140:1">{<block_content pos:start="5:5" pos:end="138:17">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:17">entry</name></decl>, <decl pos:start="5:20" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:20" pos:end="5:30">kernel_high</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">long</name></type> <name pos:start="7:10" pos:end="7:20">kernel_size</name></decl>, <decl pos:start="7:23" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:23" pos:end="7:33">initrd_size</name></decl>, <decl pos:start="7:36" pos:end="7:46"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:36" pos:end="7:46">params_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ram_addr_t</name></type> <name pos:start="9:16" pos:end="9:28">initrd_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint32_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:24">params_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">big_endian</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="17:1" pos:end="17:29">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:14">big_endian</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="21:1" pos:end="21:5">#<cpp:directive pos:start="21:2" pos:end="21:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:14">big_endian</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <literal type="number" pos:start="23:18" pos:end="23:18">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="27:5" pos:end="33:43"><expr pos:start="27:5" pos:end="33:42"><name pos:start="27:5" pos:end="27:15">kernel_size</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="33:42"><name pos:start="27:19" pos:end="27:26">load_elf</name><argument_list pos:start="27:27" pos:end="33:42">(<argument pos:start="27:28" pos:end="27:55"><expr pos:start="27:28" pos:end="27:55"><name pos:start="27:28" pos:end="27:55"><name pos:start="27:28" pos:end="27:39">loaderparams</name><operator pos:start="27:40" pos:end="27:40">.</operator><name pos:start="27:41" pos:end="27:55">kernel_filename</name></name></expr></argument>, <argument pos:start="27:58" pos:end="27:79"><expr pos:start="27:58" pos:end="27:79"><name pos:start="27:58" pos:end="27:79">cpu_mips_kseg0_to_phys</name></expr></argument>,

                           <argument pos:start="29:28" pos:end="29:31"><expr pos:start="29:28" pos:end="29:31"><name pos:start="29:28" pos:end="29:31">NULL</name></expr></argument>, <argument pos:start="29:34" pos:end="29:51"><expr pos:start="29:34" pos:end="29:51"><operator pos:start="29:34" pos:end="29:34">(</operator><name pos:start="29:35" pos:end="29:42">uint64_t</name> <operator pos:start="29:44" pos:end="29:44">*</operator><operator pos:start="29:45" pos:end="29:45">)</operator><operator pos:start="29:46" pos:end="29:46">&amp;</operator><name pos:start="29:47" pos:end="29:51">entry</name></expr></argument>, <argument pos:start="29:54" pos:end="29:57"><expr pos:start="29:54" pos:end="29:57"><name pos:start="29:54" pos:end="29:57">NULL</name></expr></argument>,

                           <argument pos:start="31:28" pos:end="31:51"><expr pos:start="31:28" pos:end="31:51"><operator pos:start="31:28" pos:end="31:28">(</operator><name pos:start="31:29" pos:end="31:36">uint64_t</name> <operator pos:start="31:38" pos:end="31:38">*</operator><operator pos:start="31:39" pos:end="31:39">)</operator><operator pos:start="31:40" pos:end="31:40">&amp;</operator><name pos:start="31:41" pos:end="31:51">kernel_high</name></expr></argument>, <argument pos:start="31:54" pos:end="31:63"><expr pos:start="31:54" pos:end="31:63"><name pos:start="31:54" pos:end="31:63">big_endian</name></expr></argument>,

                           <argument pos:start="33:28" pos:end="33:38"><expr pos:start="33:28" pos:end="33:38"><name pos:start="33:28" pos:end="33:38">ELF_MACHINE</name></expr></argument>, <argument pos:start="33:41" pos:end="33:41"><expr pos:start="33:41" pos:end="33:41"><literal type="number" pos:start="33:41" pos:end="33:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="49:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:25">(<expr pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:19">kernel_size</name> <operator pos:start="35:21" pos:end="35:22">&gt;=</operator> <literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>)</condition> <block pos:start="35:27" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:35">

        <if_stmt pos:start="37:9" pos:end="39:35"><if pos:start="37:9" pos:end="39:35">if <condition pos:start="37:12" pos:end="37:51">(<expr pos:start="37:13" pos:end="37:50"><operator pos:start="37:13" pos:end="37:13">(</operator><name pos:start="37:14" pos:end="37:18">entry</name> <operator pos:start="37:20" pos:end="37:20">&amp;</operator> <operator pos:start="37:22" pos:end="37:22">~</operator><literal type="number" pos:start="37:23" pos:end="37:35">0x7fffffffULL</literal><operator pos:start="37:36" pos:end="37:36">)</operator> <operator pos:start="37:38" pos:end="37:39">==</operator> <literal type="number" pos:start="37:41" pos:end="37:50">0x80000000</literal></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:35"><block_content pos:start="39:13" pos:end="39:35">

            <expr_stmt pos:start="39:13" pos:end="39:35"><expr pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:17">entry</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:28">int32_t</name><operator pos:start="39:29" pos:end="39:29">)</operator><name pos:start="39:30" pos:end="39:34">entry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="49:5">else <block pos:start="41:12" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:16">

        <expr_stmt pos:start="43:9" pos:end="45:46"><expr pos:start="43:9" pos:end="45:45"><call pos:start="43:9" pos:end="45:45"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="45:45">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:60"><expr pos:start="43:25" pos:end="43:60"><literal type="string" pos:start="43:25" pos:end="43:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                <argument pos:start="45:17" pos:end="45:44"><expr pos:start="45:17" pos:end="45:44"><name pos:start="45:17" pos:end="45:44"><name pos:start="45:17" pos:end="45:28">loaderparams</name><operator pos:start="45:29" pos:end="45:29">.</operator><name pos:start="45:30" pos:end="45:44">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><call pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:12">exit</name><argument_list pos:start="47:13" pos:end="47:15">(<argument pos:start="47:14" pos:end="47:14"><expr pos:start="47:14" pos:end="47:14"><literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:21">/* load initrd */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:15">initrd_size</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:22"><expr pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:17">initrd_offset</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="number" pos:start="57:21" pos:end="57:21">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="97:5"><if pos:start="59:5" pos:end="97:5">if <condition pos:start="59:8" pos:end="59:37">(<expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:20">loaderparams</name><operator pos:start="59:21" pos:end="59:21">.</operator><name pos:start="59:22" pos:end="59:36">initrd_filename</name></name></expr>)</condition> <block pos:start="59:39" pos:end="97:5">{<block_content pos:start="61:9" pos:end="95:9">

        <expr_stmt pos:start="61:9" pos:end="61:68"><expr pos:start="61:9" pos:end="61:67"><name pos:start="61:9" pos:end="61:19">initrd_size</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:67"><name pos:start="61:23" pos:end="61:36">get_image_size</name> <argument_list pos:start="61:38" pos:end="61:67">(<argument pos:start="61:39" pos:end="61:66"><expr pos:start="61:39" pos:end="61:66"><name pos:start="61:39" pos:end="61:66"><name pos:start="61:39" pos:end="61:50">loaderparams</name><operator pos:start="61:51" pos:end="61:51">.</operator><name pos:start="61:52" pos:end="61:66">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="85:9"><if pos:start="63:9" pos:end="85:9">if <condition pos:start="63:12" pos:end="63:28">(<expr pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:23">initrd_size</name> <operator pos:start="63:25" pos:end="63:25">&gt;</operator> <literal type="number" pos:start="63:27" pos:end="63:27">0</literal></expr>)</condition> <block pos:start="63:30" pos:end="85:9">{<block_content pos:start="65:13" pos:end="83:72">

            <expr_stmt pos:start="65:13" pos:end="65:81"><expr pos:start="65:13" pos:end="65:80"><name pos:start="65:13" pos:end="65:25">initrd_offset</name> <operator pos:start="65:27" pos:end="65:27">=</operator> <operator pos:start="65:29" pos:end="65:29">(</operator><name pos:start="65:30" pos:end="65:40">kernel_high</name> <operator pos:start="65:42" pos:end="65:42">+</operator> <operator pos:start="65:44" pos:end="65:44">~</operator><name pos:start="65:45" pos:end="65:60">INITRD_PAGE_MASK</name><operator pos:start="65:61" pos:end="65:61">)</operator> <operator pos:start="65:63" pos:end="65:63">&amp;</operator> <name pos:start="65:65" pos:end="65:80">INITRD_PAGE_MASK</name></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="77:13"><if pos:start="67:13" pos:end="77:13">if <condition pos:start="67:16" pos:end="67:55">(<expr pos:start="67:17" pos:end="67:54"><name pos:start="67:17" pos:end="67:29">initrd_offset</name> <operator pos:start="67:31" pos:end="67:31">+</operator> <name pos:start="67:33" pos:end="67:43">initrd_size</name> <operator pos:start="67:45" pos:end="67:45">&gt;</operator> <name pos:start="67:47" pos:end="67:54">ram_size</name></expr>)</condition> <block pos:start="67:57" pos:end="77:13">{<block_content pos:start="69:17" pos:end="75:24">

                <expr_stmt pos:start="69:17" pos:end="73:54"><expr pos:start="69:17" pos:end="73:53"><call pos:start="69:17" pos:end="73:53"><name pos:start="69:17" pos:end="69:23">fprintf</name><argument_list pos:start="69:24" pos:end="73:53">(<argument pos:start="69:25" pos:end="69:30"><expr pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:30">stderr</name></expr></argument>,

                        <argument pos:start="71:25" pos:end="71:76"><expr pos:start="71:25" pos:end="71:76"><literal type="string" pos:start="71:25" pos:end="71:76">"qemu: memory too small for initial ram disk '%s'\n"</literal></expr></argument>,

                        <argument pos:start="73:25" pos:end="73:52"><expr pos:start="73:25" pos:end="73:52"><name pos:start="73:25" pos:end="73:52"><name pos:start="73:25" pos:end="73:36">loaderparams</name><operator pos:start="73:37" pos:end="73:37">.</operator><name pos:start="73:38" pos:end="73:52">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:24"><expr pos:start="75:17" pos:end="75:23"><call pos:start="75:17" pos:end="75:23"><name pos:start="75:17" pos:end="75:20">exit</name><argument_list pos:start="75:21" pos:end="75:23">(<argument pos:start="75:22" pos:end="75:22"><expr pos:start="75:22" pos:end="75:22"><literal type="number" pos:start="75:22" pos:end="75:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="83:72"><expr pos:start="79:13" pos:end="83:71"><name pos:start="79:13" pos:end="79:23">initrd_size</name> <operator pos:start="79:25" pos:end="79:25">=</operator> <call pos:start="79:27" pos:end="83:71"><name pos:start="79:27" pos:end="79:45">load_image_targphys</name><argument_list pos:start="79:46" pos:end="83:71">(<argument pos:start="79:47" pos:end="79:74"><expr pos:start="79:47" pos:end="79:74"><name pos:start="79:47" pos:end="79:74"><name pos:start="79:47" pos:end="79:58">loaderparams</name><operator pos:start="79:59" pos:end="79:59">.</operator><name pos:start="79:60" pos:end="79:74">initrd_filename</name></name></expr></argument>,

                                              <argument pos:start="81:47" pos:end="81:59"><expr pos:start="81:47" pos:end="81:59"><name pos:start="81:47" pos:end="81:59">initrd_offset</name></expr></argument>,

                                              <argument pos:start="83:47" pos:end="83:70"><expr pos:start="83:47" pos:end="83:70"><name pos:start="83:47" pos:end="83:54">ram_size</name> <operator pos:start="83:56" pos:end="83:56">-</operator> <name pos:start="83:58" pos:end="83:70">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="95:9"><if pos:start="87:9" pos:end="95:9">if <condition pos:start="87:12" pos:end="87:45">(<expr pos:start="87:13" pos:end="87:44"><name pos:start="87:13" pos:end="87:23">initrd_size</name> <operator pos:start="87:25" pos:end="87:26">==</operator> <operator pos:start="87:28" pos:end="87:28">(</operator><name pos:start="87:29" pos:end="87:40">target_ulong</name><operator pos:start="87:41" pos:end="87:41">)</operator> <operator pos:start="87:43" pos:end="87:43">-</operator><literal type="number" pos:start="87:44" pos:end="87:44">1</literal></expr>)</condition> <block pos:start="87:47" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:20">

            <expr_stmt pos:start="89:13" pos:end="91:50"><expr pos:start="89:13" pos:end="91:49"><call pos:start="89:13" pos:end="91:49"><name pos:start="89:13" pos:end="89:19">fprintf</name><argument_list pos:start="89:20" pos:end="91:49">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">stderr</name></expr></argument>, <argument pos:start="89:29" pos:end="89:74"><expr pos:start="89:29" pos:end="89:74"><literal type="string" pos:start="89:29" pos:end="89:74">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                    <argument pos:start="91:21" pos:end="91:48"><expr pos:start="91:21" pos:end="91:48"><name pos:start="91:21" pos:end="91:48"><name pos:start="91:21" pos:end="91:32">loaderparams</name><operator pos:start="91:33" pos:end="91:33">.</operator><name pos:start="91:34" pos:end="91:48">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:20"><expr pos:start="93:13" pos:end="93:19"><call pos:start="93:13" pos:end="93:19"><name pos:start="93:13" pos:end="93:16">exit</name><argument_list pos:start="93:17" pos:end="93:19">(<argument pos:start="93:18" pos:end="93:18"><expr pos:start="93:18" pos:end="93:18"><literal type="number" pos:start="93:18" pos:end="93:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:30">/* Store command line.  */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:22"><expr pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:15">params_size</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <literal type="number" pos:start="103:19" pos:end="103:21">264</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:39"><expr pos:start="105:5" pos:end="105:38"><name pos:start="105:5" pos:end="105:14">params_buf</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="105:38"><name pos:start="105:18" pos:end="105:25">g_malloc</name><argument_list pos:start="105:26" pos:end="105:38">(<argument pos:start="105:27" pos:end="105:37"><expr pos:start="105:27" pos:end="105:37"><name pos:start="105:27" pos:end="105:37">params_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:38"><expr pos:start="109:5" pos:end="109:37"><name pos:start="109:5" pos:end="109:17"><name pos:start="109:5" pos:end="109:14">params_buf</name><index pos:start="109:15" pos:end="109:17">[<expr pos:start="109:16" pos:end="109:16"><literal type="number" pos:start="109:16" pos:end="109:16">0</literal></expr>]</index></name> <operator pos:start="109:19" pos:end="109:19">=</operator> <call pos:start="109:21" pos:end="109:37"><name pos:start="109:21" pos:end="109:27">tswap32</name><argument_list pos:start="109:28" pos:end="109:37">(<argument pos:start="109:29" pos:end="109:36"><expr pos:start="109:29" pos:end="109:36"><name pos:start="109:29" pos:end="109:36">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:40"><expr pos:start="111:5" pos:end="111:39"><name pos:start="111:5" pos:end="111:17"><name pos:start="111:5" pos:end="111:14">params_buf</name><index pos:start="111:15" pos:end="111:17">[<expr pos:start="111:16" pos:end="111:16"><literal type="number" pos:start="111:16" pos:end="111:16">1</literal></expr>]</index></name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:39"><name pos:start="111:21" pos:end="111:27">tswap32</name><argument_list pos:start="111:28" pos:end="111:39">(<argument pos:start="111:29" pos:end="111:38"><expr pos:start="111:29" pos:end="111:38"><literal type="number" pos:start="111:29" pos:end="111:38">0x12345678</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="127:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:24">(<expr pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:19">initrd_size</name> <operator pos:start="115:21" pos:end="115:21">&gt;</operator> <literal type="number" pos:start="115:23" pos:end="115:23">0</literal></expr>)</condition> <block pos:start="115:26" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:59">

        <expr_stmt pos:start="117:9" pos:end="121:59"><expr pos:start="117:9" pos:end="121:58"><call pos:start="117:9" pos:end="121:58"><name pos:start="117:9" pos:end="117:16">snprintf</name><argument_list pos:start="117:17" pos:end="121:58">(<argument pos:start="117:18" pos:end="117:39"><expr pos:start="117:18" pos:end="117:39"><operator pos:start="117:18" pos:end="117:18">(</operator><name pos:start="117:19" pos:end="117:22">char</name> <operator pos:start="117:24" pos:end="117:24">*</operator><operator pos:start="117:25" pos:end="117:25">)</operator><name pos:start="117:26" pos:end="117:35">params_buf</name> <operator pos:start="117:37" pos:end="117:37">+</operator> <literal type="number" pos:start="117:39" pos:end="117:39">8</literal></expr></argument>, <argument pos:start="117:42" pos:end="117:44"><expr pos:start="117:42" pos:end="117:44"><literal type="number" pos:start="117:42" pos:end="117:44">256</literal></expr></argument>, <argument pos:start="117:47" pos:end="117:85"><expr pos:start="117:47" pos:end="117:85"><literal type="string" pos:start="117:47" pos:end="117:60">"rd_start=0x%"</literal> <name pos:start="117:62" pos:end="117:67">PRIx64</name> <literal type="string" pos:start="117:69" pos:end="117:85">" rd_size=%li %s"</literal></expr></argument>,

                 <argument pos:start="119:18" pos:end="119:60"><expr pos:start="119:18" pos:end="119:60"><call pos:start="119:18" pos:end="119:60"><name pos:start="119:18" pos:end="119:39">cpu_mips_phys_to_kseg0</name><argument_list pos:start="119:40" pos:end="119:60">(<argument pos:start="119:41" pos:end="119:44"><expr pos:start="119:41" pos:end="119:44"><name pos:start="119:41" pos:end="119:44">NULL</name></expr></argument>, <argument pos:start="119:47" pos:end="119:59"><expr pos:start="119:47" pos:end="119:59"><name pos:start="119:47" pos:end="119:59">initrd_offset</name></expr></argument>)</argument_list></call></expr></argument>,

                 <argument pos:start="121:18" pos:end="121:28"><expr pos:start="121:18" pos:end="121:28"><name pos:start="121:18" pos:end="121:28">initrd_size</name></expr></argument>, <argument pos:start="121:31" pos:end="121:57"><expr pos:start="121:31" pos:end="121:57"><name pos:start="121:31" pos:end="121:57"><name pos:start="121:31" pos:end="121:42">loaderparams</name><operator pos:start="121:43" pos:end="121:43">.</operator><name pos:start="121:44" pos:end="121:57">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="123:7" pos:end="127:5">else <block pos:start="123:12" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:81">

        <expr_stmt pos:start="125:9" pos:end="125:81"><expr pos:start="125:9" pos:end="125:80"><call pos:start="125:9" pos:end="125:80"><name pos:start="125:9" pos:end="125:16">snprintf</name><argument_list pos:start="125:17" pos:end="125:80">(<argument pos:start="125:18" pos:end="125:39"><expr pos:start="125:18" pos:end="125:39"><operator pos:start="125:18" pos:end="125:18">(</operator><name pos:start="125:19" pos:end="125:22">char</name> <operator pos:start="125:24" pos:end="125:24">*</operator><operator pos:start="125:25" pos:end="125:25">)</operator><name pos:start="125:26" pos:end="125:35">params_buf</name> <operator pos:start="125:37" pos:end="125:37">+</operator> <literal type="number" pos:start="125:39" pos:end="125:39">8</literal></expr></argument>, <argument pos:start="125:42" pos:end="125:44"><expr pos:start="125:42" pos:end="125:44"><literal type="number" pos:start="125:42" pos:end="125:44">256</literal></expr></argument>, <argument pos:start="125:47" pos:end="125:50"><expr pos:start="125:47" pos:end="125:50"><literal type="string" pos:start="125:47" pos:end="125:50">"%s"</literal></expr></argument>, <argument pos:start="125:53" pos:end="125:79"><expr pos:start="125:53" pos:end="125:79"><name pos:start="125:53" pos:end="125:79"><name pos:start="125:53" pos:end="125:64">loaderparams</name><operator pos:start="125:65" pos:end="125:65">.</operator><name pos:start="125:66" pos:end="125:79">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="133:41"><expr pos:start="131:5" pos:end="133:40"><call pos:start="131:5" pos:end="133:40"><name pos:start="131:5" pos:end="131:22">rom_add_blob_fixed</name><argument_list pos:start="131:23" pos:end="133:40">(<argument pos:start="131:24" pos:end="131:31"><expr pos:start="131:24" pos:end="131:31"><literal type="string" pos:start="131:24" pos:end="131:31">"params"</literal></expr></argument>, <argument pos:start="131:34" pos:end="131:43"><expr pos:start="131:34" pos:end="131:43"><name pos:start="131:34" pos:end="131:43">params_buf</name></expr></argument>, <argument pos:start="131:46" pos:end="131:56"><expr pos:start="131:46" pos:end="131:56"><name pos:start="131:46" pos:end="131:56">params_size</name></expr></argument>,

                       <argument pos:start="133:24" pos:end="133:39"><expr pos:start="133:24" pos:end="133:39"><operator pos:start="133:24" pos:end="133:24">(</operator><literal type="number" pos:start="133:25" pos:end="133:26">16</literal> <operator pos:start="133:28" pos:end="133:29">&lt;&lt;</operator> <literal type="number" pos:start="133:31" pos:end="133:32">20</literal><operator pos:start="133:33" pos:end="133:33">)</operator> <operator pos:start="133:35" pos:end="133:35">-</operator> <literal type="number" pos:start="133:37" pos:end="133:39">264</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <return pos:start="138:5" pos:end="138:17">return <expr pos:start="138:12" pos:end="138:16"><name pos:start="138:12" pos:end="138:16">entry</name></expr>;</return>

</block_content>}</block></function></unit>
