<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11583.c" pos:tabs="8"><function pos:start="1:1" pos:end="711:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="1:58">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:57"><decl pos:start="1:39" pos:end="1:57"><type pos:start="1:39" pos:end="1:57"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:57">default_to_scsi</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="711:1">{<block_content pos:start="5:5" pos:end="709:16">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">file</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:16">devname</name><index pos:start="9:17" pos:end="9:21">[<expr pos:start="9:18" pos:end="9:20"><literal type="number" pos:start="9:18" pos:end="9:20">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:24">mediastr</name> <init pos:start="13:26" pos:end="13:29">= <expr pos:start="13:28" pos:end="13:29"><literal type="string" pos:start="13:28" pos:end="13:29">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">BlockInterfaceType</name></type> <name pos:start="15:24" pos:end="15:27">type</name></decl>;</decl_stmt>

    <enum pos:start="17:5" pos:end="17:43">enum <block pos:start="17:10" pos:end="17:36">{ <decl pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:21">MEDIA_DISK</name></decl>, <decl pos:start="17:24" pos:end="17:34"><name pos:start="17:24" pos:end="17:34">MEDIA_CDROM</name></decl> }</block> <decl pos:start="17:38" pos:end="17:42"><name pos:start="17:38" pos:end="17:42">media</name></decl>;</enum>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">bus_id</name></decl>, <decl pos:start="19:17" pos:end="19:23"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:17" pos:end="19:23">unit_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:12"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:12">cyls</name></decl>, <decl pos:start="21:15" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:15" pos:end="21:19">heads</name></decl>, <decl pos:start="21:22" pos:end="21:25"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:22" pos:end="21:25">secs</name></decl>, <decl pos:start="21:28" pos:end="21:38"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:28" pos:end="21:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">BlockDriver</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:20">drv</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">max_devs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:14"><decl pos:start="27:5" pos:end="27:13"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:15"><decl pos:start="29:5" pos:end="29:14"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:10">ro</name> <init pos:start="29:12" pos:end="29:14">= <expr pos:start="29:14" pos:end="29:14"><literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:18">bdrv_flags</name> <init pos:start="31:20" pos:end="31:22">= <expr pos:start="31:22" pos:end="31:22"><literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:38"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:21">on_read_error</name></decl>, <decl pos:start="33:24" pos:end="33:37"><type ref="prev" pos:start="33:5" pos:end="33:7"/><name pos:start="33:24" pos:end="33:37">on_write_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:21"><decl pos:start="37:5" pos:end="37:20"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">DriveInfo</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:27"><decl pos:start="39:5" pos:end="39:26"><type pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:16">BlockIOLimit</name></type> <name pos:start="39:18" pos:end="39:26">io_limits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:21"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:16">snapshot</name> <init pos:start="41:18" pos:end="41:20">= <expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:8"><name pos:start="43:5" pos:end="43:8">bool</name></type> <name pos:start="43:10" pos:end="43:21">copy_on_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:12"><decl pos:start="45:5" pos:end="45:11"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:15">translation</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:23"><expr pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:9">media</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <name pos:start="51:13" pos:end="51:22">MEDIA_DISK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:28">/* extract parameters */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:50"><expr pos:start="57:5" pos:end="57:49"><name pos:start="57:5" pos:end="57:10">bus_id</name>  <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:49"><name pos:start="57:15" pos:end="57:33">qemu_opt_get_number</name><argument_list pos:start="57:34" pos:end="57:49">(<argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><name pos:start="57:35" pos:end="57:38">opts</name></expr></argument>, <argument pos:start="57:41" pos:end="57:45"><expr pos:start="57:41" pos:end="57:45"><literal type="string" pos:start="57:41" pos:end="57:45">"bus"</literal></expr></argument>, <argument pos:start="57:48" pos:end="57:48"><expr pos:start="57:48" pos:end="57:48"><literal type="number" pos:start="57:48" pos:end="57:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:52"><expr pos:start="59:5" pos:end="59:51"><name pos:start="59:5" pos:end="59:11">unit_id</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:51"><name pos:start="59:15" pos:end="59:33">qemu_opt_get_number</name><argument_list pos:start="59:34" pos:end="59:51">(<argument pos:start="59:35" pos:end="59:38"><expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">opts</name></expr></argument>, <argument pos:start="59:41" pos:end="59:46"><expr pos:start="59:41" pos:end="59:46"><literal type="string" pos:start="59:41" pos:end="59:46">"unit"</literal></expr></argument>, <argument pos:start="59:49" pos:end="59:50"><expr pos:start="59:49" pos:end="59:50"><operator pos:start="59:49" pos:end="59:49">-</operator><literal type="number" pos:start="59:50" pos:end="59:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:53"><expr pos:start="61:5" pos:end="61:52"><name pos:start="61:5" pos:end="61:9">index</name>   <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:52"><name pos:start="61:15" pos:end="61:33">qemu_opt_get_number</name><argument_list pos:start="61:34" pos:end="61:52">(<argument pos:start="61:35" pos:end="61:38"><expr pos:start="61:35" pos:end="61:38"><name pos:start="61:35" pos:end="61:38">opts</name></expr></argument>, <argument pos:start="61:41" pos:end="61:47"><expr pos:start="61:41" pos:end="61:47"><literal type="string" pos:start="61:41" pos:end="61:47">"index"</literal></expr></argument>, <argument pos:start="61:50" pos:end="61:51"><expr pos:start="61:50" pos:end="61:51"><operator pos:start="61:50" pos:end="61:50">-</operator><literal type="number" pos:start="61:51" pos:end="61:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:49"><expr pos:start="65:5" pos:end="65:48"><name pos:start="65:5" pos:end="65:8">cyls</name>  <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:48"><name pos:start="65:13" pos:end="65:31">qemu_opt_get_number</name><argument_list pos:start="65:32" pos:end="65:48">(<argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">opts</name></expr></argument>, <argument pos:start="65:39" pos:end="65:44"><expr pos:start="65:39" pos:end="65:44"><literal type="string" pos:start="65:39" pos:end="65:44">"cyls"</literal></expr></argument>, <argument pos:start="65:47" pos:end="65:47"><expr pos:start="65:47" pos:end="65:47"><literal type="number" pos:start="65:47" pos:end="65:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:50"><expr pos:start="67:5" pos:end="67:49"><name pos:start="67:5" pos:end="67:9">heads</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:49"><name pos:start="67:13" pos:end="67:31">qemu_opt_get_number</name><argument_list pos:start="67:32" pos:end="67:49">(<argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">opts</name></expr></argument>, <argument pos:start="67:39" pos:end="67:45"><expr pos:start="67:39" pos:end="67:45"><literal type="string" pos:start="67:39" pos:end="67:45">"heads"</literal></expr></argument>, <argument pos:start="67:48" pos:end="67:48"><expr pos:start="67:48" pos:end="67:48"><literal type="number" pos:start="67:48" pos:end="67:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:49"><expr pos:start="69:5" pos:end="69:48"><name pos:start="69:5" pos:end="69:8">secs</name>  <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:48"><name pos:start="69:13" pos:end="69:31">qemu_opt_get_number</name><argument_list pos:start="69:32" pos:end="69:48">(<argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">opts</name></expr></argument>, <argument pos:start="69:39" pos:end="69:44"><expr pos:start="69:39" pos:end="69:44"><literal type="string" pos:start="69:39" pos:end="69:44">"secs"</literal></expr></argument>, <argument pos:start="69:47" pos:end="69:47"><expr pos:start="69:47" pos:end="69:47"><literal type="number" pos:start="69:47" pos:end="69:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:54"><expr pos:start="73:5" pos:end="73:53"><name pos:start="73:5" pos:end="73:12">snapshot</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:53"><name pos:start="73:16" pos:end="73:32">qemu_opt_get_bool</name><argument_list pos:start="73:33" pos:end="73:53">(<argument pos:start="73:34" pos:end="73:37"><expr pos:start="73:34" pos:end="73:37"><name pos:start="73:34" pos:end="73:37">opts</name></expr></argument>, <argument pos:start="73:40" pos:end="73:49"><expr pos:start="73:40" pos:end="73:49"><literal type="string" pos:start="73:40" pos:end="73:49">"snapshot"</literal></expr></argument>, <argument pos:start="73:52" pos:end="73:52"><expr pos:start="73:52" pos:end="73:52"><literal type="number" pos:start="73:52" pos:end="73:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:48"><expr pos:start="75:5" pos:end="75:47"><name pos:start="75:5" pos:end="75:6">ro</name> <operator pos:start="75:8" pos:end="75:8">=</operator> <call pos:start="75:10" pos:end="75:47"><name pos:start="75:10" pos:end="75:26">qemu_opt_get_bool</name><argument_list pos:start="75:27" pos:end="75:47">(<argument pos:start="75:28" pos:end="75:31"><expr pos:start="75:28" pos:end="75:31"><name pos:start="75:28" pos:end="75:31">opts</name></expr></argument>, <argument pos:start="75:34" pos:end="75:43"><expr pos:start="75:34" pos:end="75:43"><literal type="string" pos:start="75:34" pos:end="75:43">"readonly"</literal></expr></argument>, <argument pos:start="75:46" pos:end="75:46"><expr pos:start="75:46" pos:end="75:46"><literal type="number" pos:start="75:46" pos:end="75:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:66"><expr pos:start="77:5" pos:end="77:65"><name pos:start="77:5" pos:end="77:16">copy_on_read</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <call pos:start="77:20" pos:end="77:65"><name pos:start="77:20" pos:end="77:36">qemu_opt_get_bool</name><argument_list pos:start="77:37" pos:end="77:65">(<argument pos:start="77:38" pos:end="77:41"><expr pos:start="77:38" pos:end="77:41"><name pos:start="77:38" pos:end="77:41">opts</name></expr></argument>, <argument pos:start="77:44" pos:end="77:57"><expr pos:start="77:44" pos:end="77:57"><literal type="string" pos:start="77:44" pos:end="77:57">"copy-on-read"</literal></expr></argument>, <argument pos:start="77:60" pos:end="77:64"><expr pos:start="77:60" pos:end="77:64"><name pos:start="77:60" pos:end="77:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:38"><expr pos:start="81:5" pos:end="81:37"><name pos:start="81:5" pos:end="81:8">file</name> <operator pos:start="81:10" pos:end="81:10">=</operator> <call pos:start="81:12" pos:end="81:37"><name pos:start="81:12" pos:end="81:23">qemu_opt_get</name><argument_list pos:start="81:24" pos:end="81:37">(<argument pos:start="81:25" pos:end="81:28"><expr pos:start="81:25" pos:end="81:28"><name pos:start="81:25" pos:end="81:28">opts</name></expr></argument>, <argument pos:start="81:31" pos:end="81:36"><expr pos:start="81:31" pos:end="81:36"><literal type="string" pos:start="81:31" pos:end="81:36">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:42"><expr pos:start="83:5" pos:end="83:41"><name pos:start="83:5" pos:end="83:10">serial</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <call pos:start="83:14" pos:end="83:41"><name pos:start="83:14" pos:end="83:25">qemu_opt_get</name><argument_list pos:start="83:26" pos:end="83:41">(<argument pos:start="83:27" pos:end="83:30"><expr pos:start="83:27" pos:end="83:30"><name pos:start="83:27" pos:end="83:30">opts</name></expr></argument>, <argument pos:start="83:33" pos:end="83:40"><expr pos:start="83:33" pos:end="83:40"><literal type="string" pos:start="83:33" pos:end="83:40">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="109:5"><if pos:start="87:5" pos:end="103:5">if <condition pos:start="87:8" pos:end="87:49">(<expr pos:start="87:9" pos:end="87:48"><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:12">buf</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <call pos:start="87:16" pos:end="87:39"><name pos:start="87:16" pos:end="87:27">qemu_opt_get</name><argument_list pos:start="87:28" pos:end="87:39">(<argument pos:start="87:29" pos:end="87:32"><expr pos:start="87:29" pos:end="87:32"><name pos:start="87:29" pos:end="87:32">opts</name></expr></argument>, <argument pos:start="87:35" pos:end="87:38"><expr pos:start="87:35" pos:end="87:38"><literal type="string" pos:start="87:35" pos:end="87:38">"if"</literal></expr></argument>)</argument_list></call><operator pos:start="87:40" pos:end="87:40">)</operator> <operator pos:start="87:42" pos:end="87:43">!=</operator> <name pos:start="87:45" pos:end="87:48">NULL</name></expr>)</condition> <block pos:start="87:51" pos:end="103:5">{<block_content pos:start="89:9" pos:end="101:9">

        <expr_stmt pos:start="89:9" pos:end="89:47"><expr pos:start="89:9" pos:end="89:46"><call pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:15">pstrcpy</name><argument_list pos:start="89:16" pos:end="89:46">(<argument pos:start="89:17" pos:end="89:23"><expr pos:start="89:17" pos:end="89:23"><name pos:start="89:17" pos:end="89:23">devname</name></expr></argument>, <argument pos:start="89:26" pos:end="89:40"><expr pos:start="89:26" pos:end="89:40"><sizeof pos:start="89:26" pos:end="89:40">sizeof<argument_list pos:start="89:32" pos:end="89:40">(<argument pos:start="89:33" pos:end="89:39"><expr pos:start="89:33" pos:end="89:39"><name pos:start="89:33" pos:end="89:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="89:43" pos:end="89:45"><expr pos:start="89:43" pos:end="89:45"><name pos:start="89:43" pos:end="89:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="91:9" pos:end="93:13">for <control pos:start="91:13" pos:end="91:77">(<init pos:start="91:14" pos:end="91:22"><expr pos:start="91:14" pos:end="91:21"><name pos:start="91:14" pos:end="91:17">type</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <literal type="number" pos:start="91:21" pos:end="91:21">0</literal></expr>;</init> <condition pos:start="91:24" pos:end="91:69"><expr pos:start="91:24" pos:end="91:68"><name pos:start="91:24" pos:end="91:27">type</name> <operator pos:start="91:29" pos:end="91:29">&lt;</operator> <name pos:start="91:31" pos:end="91:38">IF_COUNT</name> <operator pos:start="91:40" pos:end="91:41">&amp;&amp;</operator> <call pos:start="91:43" pos:end="91:68"><name pos:start="91:43" pos:end="91:48">strcmp</name><argument_list pos:start="91:49" pos:end="91:68">(<argument pos:start="91:50" pos:end="91:52"><expr pos:start="91:50" pos:end="91:52"><name pos:start="91:50" pos:end="91:52">buf</name></expr></argument>, <argument pos:start="91:55" pos:end="91:67"><expr pos:start="91:55" pos:end="91:67"><name pos:start="91:55" pos:end="91:67"><name pos:start="91:55" pos:end="91:61">if_name</name><index pos:start="91:62" pos:end="91:67">[<expr pos:start="91:63" pos:end="91:66"><name pos:start="91:63" pos:end="91:66">type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="91:71" pos:end="91:76"><expr pos:start="91:71" pos:end="91:76"><name pos:start="91:71" pos:end="91:74">type</name><operator pos:start="91:75" pos:end="91:76">++</operator></expr></incr>)</control><block type="pseudo" pos:start="93:13" pos:end="93:13"><block_content pos:start="93:13" pos:end="93:13">

            <empty_stmt pos:start="93:13" pos:end="93:13">;</empty_stmt></block_content></block></for>

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:29">(<expr pos:start="95:13" pos:end="95:28"><name pos:start="95:13" pos:end="95:16">type</name> <operator pos:start="95:18" pos:end="95:19">==</operator> <name pos:start="95:21" pos:end="95:28">IF_COUNT</name></expr>)</condition> <block pos:start="95:31" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:24">

            <expr_stmt pos:start="97:13" pos:end="97:59"><expr pos:start="97:13" pos:end="97:58"><call pos:start="97:13" pos:end="97:58"><name pos:start="97:13" pos:end="97:24">error_report</name><argument_list pos:start="97:25" pos:end="97:58">(<argument pos:start="97:26" pos:end="97:52"><expr pos:start="97:26" pos:end="97:52"><literal type="string" pos:start="97:26" pos:end="97:52">"unsupported bus type '%s'"</literal></expr></argument>, <argument pos:start="97:55" pos:end="97:57"><expr pos:start="97:55" pos:end="97:57"><name pos:start="97:55" pos:end="97:57">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:24">return <expr pos:start="99:20" pos:end="99:23"><name pos:start="99:20" pos:end="99:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="109:5">else <block pos:start="103:12" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:57">

        <expr_stmt pos:start="105:9" pos:end="105:50"><expr pos:start="105:9" pos:end="105:49"><name pos:start="105:9" pos:end="105:12">type</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <ternary pos:start="105:16" pos:end="105:49"><condition pos:start="105:16" pos:end="105:32"><expr pos:start="105:16" pos:end="105:30"><name pos:start="105:16" pos:end="105:30">default_to_scsi</name></expr> ?</condition><then pos:start="105:34" pos:end="105:40"> <expr pos:start="105:34" pos:end="105:40"><name pos:start="105:34" pos:end="105:40">IF_SCSI</name></expr> </then><else pos:start="105:42" pos:end="105:49">: <expr pos:start="105:44" pos:end="105:49"><name pos:start="105:44" pos:end="105:49">IF_IDE</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:57"><expr pos:start="107:9" pos:end="107:56"><call pos:start="107:9" pos:end="107:56"><name pos:start="107:9" pos:end="107:15">pstrcpy</name><argument_list pos:start="107:16" pos:end="107:56">(<argument pos:start="107:17" pos:end="107:23"><expr pos:start="107:17" pos:end="107:23"><name pos:start="107:17" pos:end="107:23">devname</name></expr></argument>, <argument pos:start="107:26" pos:end="107:40"><expr pos:start="107:26" pos:end="107:40"><sizeof pos:start="107:26" pos:end="107:40">sizeof<argument_list pos:start="107:32" pos:end="107:40">(<argument pos:start="107:33" pos:end="107:39"><expr pos:start="107:33" pos:end="107:39"><name pos:start="107:33" pos:end="107:39">devname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="107:43" pos:end="107:55"><expr pos:start="107:43" pos:end="107:55"><name pos:start="107:43" pos:end="107:55"><name pos:start="107:43" pos:end="107:49">if_name</name><index pos:start="107:50" pos:end="107:55">[<expr pos:start="107:51" pos:end="107:54"><name pos:start="107:51" pos:end="107:54">type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:33"><expr pos:start="113:5" pos:end="113:32"><name pos:start="113:5" pos:end="113:12">max_devs</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <name pos:start="113:16" pos:end="113:32"><name pos:start="113:16" pos:end="113:26">if_max_devs</name><index pos:start="113:27" pos:end="113:32">[<expr pos:start="113:28" pos:end="113:31"><name pos:start="113:28" pos:end="113:31">type</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="143:5"><if pos:start="117:5" pos:end="143:5">if <condition pos:start="117:8" pos:end="117:30">(<expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:12">cyls</name> <operator pos:start="117:14" pos:end="117:15">||</operator> <name pos:start="117:17" pos:end="117:21">heads</name> <operator pos:start="117:23" pos:end="117:24">||</operator> <name pos:start="117:26" pos:end="117:29">secs</name></expr>)</condition> <block pos:start="117:32" pos:end="143:5">{<block_content pos:start="119:9" pos:end="141:9">

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:57">(<expr pos:start="119:13" pos:end="119:56"><name pos:start="119:13" pos:end="119:16">cyls</name> <operator pos:start="119:18" pos:end="119:18">&lt;</operator> <literal type="number" pos:start="119:20" pos:end="119:20">1</literal> <operator pos:start="119:22" pos:end="119:23">||</operator> <operator pos:start="119:25" pos:end="119:25">(</operator><name pos:start="119:26" pos:end="119:29">type</name> <operator pos:start="119:31" pos:end="119:32">==</operator> <name pos:start="119:34" pos:end="119:39">IF_IDE</name> <operator pos:start="119:41" pos:end="119:42">&amp;&amp;</operator> <name pos:start="119:44" pos:end="119:47">cyls</name> <operator pos:start="119:49" pos:end="119:49">&gt;</operator> <literal type="number" pos:start="119:51" pos:end="119:55">16383</literal><operator pos:start="119:56" pos:end="119:56">)</operator></expr>)</condition> <block pos:start="119:59" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:24">

            <expr_stmt pos:start="121:13" pos:end="121:57"><expr pos:start="121:13" pos:end="121:56"><call pos:start="121:13" pos:end="121:56"><name pos:start="121:13" pos:end="121:24">error_report</name><argument_list pos:start="121:25" pos:end="121:56">(<argument pos:start="121:26" pos:end="121:55"><expr pos:start="121:26" pos:end="121:55"><literal type="string" pos:start="121:26" pos:end="121:55">"invalid physical cyls number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="123:13" pos:end="123:24">return <expr pos:start="123:20" pos:end="123:23"><name pos:start="123:20" pos:end="123:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:56">(<expr pos:start="127:13" pos:end="127:55"><name pos:start="127:13" pos:end="127:17">heads</name> <operator pos:start="127:19" pos:end="127:19">&lt;</operator> <literal type="number" pos:start="127:21" pos:end="127:21">1</literal> <operator pos:start="127:23" pos:end="127:24">||</operator> <operator pos:start="127:26" pos:end="127:26">(</operator><name pos:start="127:27" pos:end="127:30">type</name> <operator pos:start="127:32" pos:end="127:33">==</operator> <name pos:start="127:35" pos:end="127:40">IF_IDE</name> <operator pos:start="127:42" pos:end="127:43">&amp;&amp;</operator> <name pos:start="127:45" pos:end="127:49">heads</name> <operator pos:start="127:51" pos:end="127:51">&gt;</operator> <literal type="number" pos:start="127:53" pos:end="127:54">16</literal><operator pos:start="127:55" pos:end="127:55">)</operator></expr>)</condition> <block pos:start="127:58" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:24">

            <expr_stmt pos:start="129:13" pos:end="129:58"><expr pos:start="129:13" pos:end="129:57"><call pos:start="129:13" pos:end="129:57"><name pos:start="129:13" pos:end="129:24">error_report</name><argument_list pos:start="129:25" pos:end="129:57">(<argument pos:start="129:26" pos:end="129:56"><expr pos:start="129:26" pos:end="129:56"><literal type="string" pos:start="129:26" pos:end="129:56">"invalid physical heads number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="131:13" pos:end="131:24">return <expr pos:start="131:20" pos:end="131:23"><name pos:start="131:20" pos:end="131:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:54">(<expr pos:start="135:13" pos:end="135:53"><name pos:start="135:13" pos:end="135:16">secs</name> <operator pos:start="135:18" pos:end="135:18">&lt;</operator> <literal type="number" pos:start="135:20" pos:end="135:20">1</literal> <operator pos:start="135:22" pos:end="135:23">||</operator> <operator pos:start="135:25" pos:end="135:25">(</operator><name pos:start="135:26" pos:end="135:29">type</name> <operator pos:start="135:31" pos:end="135:32">==</operator> <name pos:start="135:34" pos:end="135:39">IF_IDE</name> <operator pos:start="135:41" pos:end="135:42">&amp;&amp;</operator> <name pos:start="135:44" pos:end="135:47">secs</name> <operator pos:start="135:49" pos:end="135:49">&gt;</operator> <literal type="number" pos:start="135:51" pos:end="135:52">63</literal><operator pos:start="135:53" pos:end="135:53">)</operator></expr>)</condition> <block pos:start="135:56" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:24">

            <expr_stmt pos:start="137:13" pos:end="137:57"><expr pos:start="137:13" pos:end="137:56"><call pos:start="137:13" pos:end="137:56"><name pos:start="137:13" pos:end="137:24">error_report</name><argument_list pos:start="137:25" pos:end="137:56">(<argument pos:start="137:26" pos:end="137:55"><expr pos:start="137:26" pos:end="137:55"><literal type="string" pos:start="137:26" pos:end="137:55">"invalid physical secs number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="139:13" pos:end="139:24">return <expr pos:start="139:20" pos:end="139:23"><name pos:start="139:20" pos:end="139:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="147:5" pos:end="179:5"><if pos:start="147:5" pos:end="179:5">if <condition pos:start="147:8" pos:end="147:52">(<expr pos:start="147:9" pos:end="147:51"><operator pos:start="147:9" pos:end="147:9">(</operator><name pos:start="147:10" pos:end="147:12">buf</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <call pos:start="147:16" pos:end="147:42"><name pos:start="147:16" pos:end="147:27">qemu_opt_get</name><argument_list pos:start="147:28" pos:end="147:42">(<argument pos:start="147:29" pos:end="147:32"><expr pos:start="147:29" pos:end="147:32"><name pos:start="147:29" pos:end="147:32">opts</name></expr></argument>, <argument pos:start="147:35" pos:end="147:41"><expr pos:start="147:35" pos:end="147:41"><literal type="string" pos:start="147:35" pos:end="147:41">"trans"</literal></expr></argument>)</argument_list></call><operator pos:start="147:43" pos:end="147:43">)</operator> <operator pos:start="147:45" pos:end="147:46">!=</operator> <name pos:start="147:48" pos:end="147:51">NULL</name></expr>)</condition> <block pos:start="147:54" pos:end="179:5">{<block_content pos:start="149:9" pos:end="177:9">

        <if_stmt pos:start="149:9" pos:end="157:9"><if pos:start="149:9" pos:end="157:9">if <condition pos:start="149:12" pos:end="149:18">(<expr pos:start="149:13" pos:end="149:17"><operator pos:start="149:13" pos:end="149:13">!</operator><name pos:start="149:14" pos:end="149:17">cyls</name></expr>)</condition> <block pos:start="149:20" pos:end="157:9">{<block_content pos:start="151:13" pos:end="155:24">

            <expr_stmt pos:start="151:13" pos:end="153:30"><expr pos:start="151:13" pos:end="153:29"><call pos:start="151:13" pos:end="153:29"><name pos:start="151:13" pos:end="151:24">error_report</name><argument_list pos:start="151:25" pos:end="153:29">(<argument pos:start="151:26" pos:end="151:76"><expr pos:start="151:26" pos:end="151:76"><literal type="string" pos:start="151:26" pos:end="151:76">"'%s' trans must be used with cyls, heads and secs"</literal></expr></argument>,

                         <argument pos:start="153:26" pos:end="153:28"><expr pos:start="153:26" pos:end="153:28"><name pos:start="153:26" pos:end="153:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="155:13" pos:end="155:24">return <expr pos:start="155:20" pos:end="155:23"><name pos:start="155:20" pos:end="155:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="159:9" pos:end="177:9"><if pos:start="159:9" pos:end="161:52">if <condition pos:start="159:12" pos:end="159:33">(<expr pos:start="159:13" pos:end="159:32"><operator pos:start="159:13" pos:end="159:13">!</operator><call pos:start="159:14" pos:end="159:32"><name pos:start="159:14" pos:end="159:19">strcmp</name><argument_list pos:start="159:20" pos:end="159:32">(<argument pos:start="159:21" pos:end="159:23"><expr pos:start="159:21" pos:end="159:23"><name pos:start="159:21" pos:end="159:23">buf</name></expr></argument>, <argument pos:start="159:26" pos:end="159:31"><expr pos:start="159:26" pos:end="159:31"><literal type="string" pos:start="159:26" pos:end="159:31">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:52"><block_content pos:start="161:13" pos:end="161:52">

            <expr_stmt pos:start="161:13" pos:end="161:52"><expr pos:start="161:13" pos:end="161:51"><name pos:start="161:13" pos:end="161:23">translation</name> <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="163:9" pos:end="165:51">else if <condition pos:start="163:17" pos:end="163:37">(<expr pos:start="163:18" pos:end="163:36"><operator pos:start="163:18" pos:end="163:18">!</operator><call pos:start="163:19" pos:end="163:36"><name pos:start="163:19" pos:end="163:24">strcmp</name><argument_list pos:start="163:25" pos:end="163:36">(<argument pos:start="163:26" pos:end="163:28"><expr pos:start="163:26" pos:end="163:28"><name pos:start="163:26" pos:end="163:28">buf</name></expr></argument>, <argument pos:start="163:31" pos:end="163:35"><expr pos:start="163:31" pos:end="163:35"><literal type="string" pos:start="163:31" pos:end="163:35">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:51"><block_content pos:start="165:13" pos:end="165:51">

            <expr_stmt pos:start="165:13" pos:end="165:51"><expr pos:start="165:13" pos:end="165:50"><name pos:start="165:13" pos:end="165:23">translation</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <name pos:start="165:27" pos:end="165:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="167:9" pos:end="169:52">else if <condition pos:start="167:17" pos:end="167:38">(<expr pos:start="167:18" pos:end="167:37"><operator pos:start="167:18" pos:end="167:18">!</operator><call pos:start="167:19" pos:end="167:37"><name pos:start="167:19" pos:end="167:24">strcmp</name><argument_list pos:start="167:25" pos:end="167:37">(<argument pos:start="167:26" pos:end="167:28"><expr pos:start="167:26" pos:end="167:28"><name pos:start="167:26" pos:end="167:28">buf</name></expr></argument>, <argument pos:start="167:31" pos:end="167:36"><expr pos:start="167:31" pos:end="167:36"><literal type="string" pos:start="167:31" pos:end="167:36">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:52"><block_content pos:start="169:13" pos:end="169:52">

            <expr_stmt pos:start="169:13" pos:end="169:52"><expr pos:start="169:13" pos:end="169:51"><name pos:start="169:13" pos:end="169:23">translation</name> <operator pos:start="169:25" pos:end="169:25">=</operator> <name pos:start="169:27" pos:end="169:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="171:9" pos:end="177:9">else <block pos:start="171:14" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:24">

            <expr_stmt pos:start="173:13" pos:end="173:63"><expr pos:start="173:13" pos:end="173:62"><call pos:start="173:13" pos:end="173:62"><name pos:start="173:13" pos:end="173:24">error_report</name><argument_list pos:start="173:25" pos:end="173:62">(<argument pos:start="173:26" pos:end="173:56"><expr pos:start="173:26" pos:end="173:56"><literal type="string" pos:start="173:26" pos:end="173:56">"'%s' invalid translation type"</literal></expr></argument>, <argument pos:start="173:59" pos:end="173:61"><expr pos:start="173:59" pos:end="173:61"><name pos:start="173:59" pos:end="173:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="175:13" pos:end="175:24">return <expr pos:start="175:20" pos:end="175:23"><name pos:start="175:20" pos:end="175:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="183:5" pos:end="209:5"><if pos:start="183:5" pos:end="209:5">if <condition pos:start="183:8" pos:end="183:52">(<expr pos:start="183:9" pos:end="183:51"><operator pos:start="183:9" pos:end="183:9">(</operator><name pos:start="183:10" pos:end="183:12">buf</name> <operator pos:start="183:14" pos:end="183:14">=</operator> <call pos:start="183:16" pos:end="183:42"><name pos:start="183:16" pos:end="183:27">qemu_opt_get</name><argument_list pos:start="183:28" pos:end="183:42">(<argument pos:start="183:29" pos:end="183:32"><expr pos:start="183:29" pos:end="183:32"><name pos:start="183:29" pos:end="183:32">opts</name></expr></argument>, <argument pos:start="183:35" pos:end="183:41"><expr pos:start="183:35" pos:end="183:41"><literal type="string" pos:start="183:35" pos:end="183:41">"media"</literal></expr></argument>)</argument_list></call><operator pos:start="183:43" pos:end="183:43">)</operator> <operator pos:start="183:45" pos:end="183:46">!=</operator> <name pos:start="183:48" pos:end="183:51">NULL</name></expr>)</condition> <block pos:start="183:54" pos:end="209:5">{<block_content pos:start="185:9" pos:end="207:9">

        <if_stmt pos:start="185:9" pos:end="207:9"><if pos:start="185:9" pos:end="189:9">if <condition pos:start="185:12" pos:end="185:33">(<expr pos:start="185:13" pos:end="185:32"><operator pos:start="185:13" pos:end="185:13">!</operator><call pos:start="185:14" pos:end="185:32"><name pos:start="185:14" pos:end="185:19">strcmp</name><argument_list pos:start="185:20" pos:end="185:32">(<argument pos:start="185:21" pos:end="185:23"><expr pos:start="185:21" pos:end="185:23"><name pos:start="185:21" pos:end="185:23">buf</name></expr></argument>, <argument pos:start="185:26" pos:end="185:31"><expr pos:start="185:26" pos:end="185:31"><literal type="string" pos:start="185:26" pos:end="185:31">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:35" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:31">

	    <expr_stmt pos:start="187:13" pos:end="187:31"><expr pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:17">media</name> <operator pos:start="187:19" pos:end="187:19">=</operator> <name pos:start="187:21" pos:end="187:30">MEDIA_DISK</name></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="189:11" pos:end="201:9">else if <condition pos:start="189:19" pos:end="189:41">(<expr pos:start="189:20" pos:end="189:40"><operator pos:start="189:20" pos:end="189:20">!</operator><call pos:start="189:21" pos:end="189:40"><name pos:start="189:21" pos:end="189:26">strcmp</name><argument_list pos:start="189:27" pos:end="189:40">(<argument pos:start="189:28" pos:end="189:30"><expr pos:start="189:28" pos:end="189:30"><name pos:start="189:28" pos:end="189:30">buf</name></expr></argument>, <argument pos:start="189:33" pos:end="189:39"><expr pos:start="189:33" pos:end="189:39"><literal type="string" pos:start="189:33" pos:end="189:39">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:43" pos:end="201:9">{<block_content pos:start="191:13" pos:end="199:32">

            <if_stmt pos:start="191:13" pos:end="197:13"><if pos:start="191:13" pos:end="197:13">if <condition pos:start="191:16" pos:end="191:38">(<expr pos:start="191:17" pos:end="191:37"><name pos:start="191:17" pos:end="191:20">cyls</name> <operator pos:start="191:22" pos:end="191:23">||</operator> <name pos:start="191:25" pos:end="191:28">secs</name> <operator pos:start="191:30" pos:end="191:31">||</operator> <name pos:start="191:33" pos:end="191:37">heads</name></expr>)</condition> <block pos:start="191:40" pos:end="197:13">{<block_content pos:start="193:17" pos:end="195:28">

                <expr_stmt pos:start="193:17" pos:end="193:68"><expr pos:start="193:17" pos:end="193:67"><call pos:start="193:17" pos:end="193:67"><name pos:start="193:17" pos:end="193:28">error_report</name><argument_list pos:start="193:29" pos:end="193:67">(<argument pos:start="193:30" pos:end="193:61"><expr pos:start="193:30" pos:end="193:61"><literal type="string" pos:start="193:30" pos:end="193:61">"CHS can't be set with media=%s"</literal></expr></argument>, <argument pos:start="193:64" pos:end="193:66"><expr pos:start="193:64" pos:end="193:66"><name pos:start="193:64" pos:end="193:66">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <return pos:start="195:17" pos:end="195:28">return <expr pos:start="195:24" pos:end="195:27"><name pos:start="195:24" pos:end="195:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="199:13" pos:end="199:32"><expr pos:start="199:13" pos:end="199:31"><name pos:start="199:13" pos:end="199:17">media</name> <operator pos:start="199:19" pos:end="199:19">=</operator> <name pos:start="199:21" pos:end="199:31">MEDIA_CDROM</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="201:11" pos:end="207:9">else <block pos:start="201:16" pos:end="207:9">{<block_content pos:start="203:13" pos:end="205:24">

	    <expr_stmt pos:start="203:13" pos:end="203:52"><expr pos:start="203:13" pos:end="203:51"><call pos:start="203:13" pos:end="203:51"><name pos:start="203:13" pos:end="203:24">error_report</name><argument_list pos:start="203:25" pos:end="203:51">(<argument pos:start="203:26" pos:end="203:45"><expr pos:start="203:26" pos:end="203:45"><literal type="string" pos:start="203:26" pos:end="203:45">"'%s' invalid media"</literal></expr></argument>, <argument pos:start="203:48" pos:end="203:50"><expr pos:start="203:48" pos:end="203:50"><name pos:start="203:48" pos:end="203:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="205:13" pos:end="205:24">return <expr pos:start="205:20" pos:end="205:23"><name pos:start="205:20" pos:end="205:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="213:5" pos:end="228:0"><if pos:start="213:5" pos:end="228:0">if <condition pos:start="213:8" pos:end="213:52">(<expr pos:start="213:9" pos:end="213:51"><operator pos:start="213:9" pos:end="213:9">(</operator><name pos:start="213:10" pos:end="213:12">buf</name> <operator pos:start="213:14" pos:end="213:14">=</operator> <call pos:start="213:16" pos:end="213:42"><name pos:start="213:16" pos:end="213:27">qemu_opt_get</name><argument_list pos:start="213:28" pos:end="213:42">(<argument pos:start="213:29" pos:end="213:32"><expr pos:start="213:29" pos:end="213:32"><name pos:start="213:29" pos:end="213:32">opts</name></expr></argument>, <argument pos:start="213:35" pos:end="213:41"><expr pos:start="213:35" pos:end="213:41"><literal type="string" pos:start="213:35" pos:end="213:41">"cache"</literal></expr></argument>)</argument_list></call><operator pos:start="213:43" pos:end="213:43">)</operator> <operator pos:start="213:45" pos:end="213:46">!=</operator> <name pos:start="213:48" pos:end="213:51">NULL</name></expr>)</condition> <block pos:start="213:54" pos:end="228:0">{<block_content pos:start="215:9" pos:end="221:9">

        <if_stmt pos:start="215:9" pos:end="221:9"><if pos:start="215:9" pos:end="221:9">if <condition pos:start="215:12" pos:end="215:58">(<expr pos:start="215:13" pos:end="215:57"><call pos:start="215:13" pos:end="215:52"><name pos:start="215:13" pos:end="215:34">bdrv_parse_cache_flags</name><argument_list pos:start="215:35" pos:end="215:52">(<argument pos:start="215:36" pos:end="215:38"><expr pos:start="215:36" pos:end="215:38"><name pos:start="215:36" pos:end="215:38">buf</name></expr></argument>, <argument pos:start="215:41" pos:end="215:51"><expr pos:start="215:41" pos:end="215:51"><operator pos:start="215:41" pos:end="215:41">&amp;</operator><name pos:start="215:42" pos:end="215:51">bdrv_flags</name></expr></argument>)</argument_list></call> <operator pos:start="215:54" pos:end="215:55">!=</operator> <literal type="number" pos:start="215:57" pos:end="215:57">0</literal></expr>)</condition> <block pos:start="215:60" pos:end="221:9">{<block_content pos:start="217:13" pos:end="219:24">

            <expr_stmt pos:start="217:13" pos:end="217:49"><expr pos:start="217:13" pos:end="217:48"><call pos:start="217:13" pos:end="217:48"><name pos:start="217:13" pos:end="217:24">error_report</name><argument_list pos:start="217:25" pos:end="217:48">(<argument pos:start="217:26" pos:end="217:47"><expr pos:start="217:26" pos:end="217:47"><literal type="string" pos:start="217:26" pos:end="217:47">"invalid cache option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="219:13" pos:end="219:24">return <expr pos:start="219:20" pos:end="219:23"><name pos:start="219:20" pos:end="219:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="227:1" pos:end="227:23">#<cpp:directive pos:start="227:2" pos:end="227:6">ifdef</cpp:directive> <name pos:start="227:8" pos:end="227:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="229:5" pos:end="250:0"><if pos:start="229:5" pos:end="250:0">if <condition pos:start="229:8" pos:end="229:50">(<expr pos:start="229:9" pos:end="229:49"><operator pos:start="229:9" pos:end="229:9">(</operator><name pos:start="229:10" pos:end="229:12">buf</name> <operator pos:start="229:14" pos:end="229:14">=</operator> <call pos:start="229:16" pos:end="229:40"><name pos:start="229:16" pos:end="229:27">qemu_opt_get</name><argument_list pos:start="229:28" pos:end="229:40">(<argument pos:start="229:29" pos:end="229:32"><expr pos:start="229:29" pos:end="229:32"><name pos:start="229:29" pos:end="229:32">opts</name></expr></argument>, <argument pos:start="229:35" pos:end="229:39"><expr pos:start="229:35" pos:end="229:39"><literal type="string" pos:start="229:35" pos:end="229:39">"aio"</literal></expr></argument>)</argument_list></call><operator pos:start="229:41" pos:end="229:41">)</operator> <operator pos:start="229:43" pos:end="229:44">!=</operator> <name pos:start="229:46" pos:end="229:49">NULL</name></expr>)</condition> <block pos:start="229:52" pos:end="250:0">{<block_content pos:start="231:9" pos:end="245:9">

        <if_stmt pos:start="231:9" pos:end="245:9"><if pos:start="231:9" pos:end="235:9">if <condition pos:start="231:12" pos:end="231:35">(<expr pos:start="231:13" pos:end="231:34"><operator pos:start="231:13" pos:end="231:13">!</operator><call pos:start="231:14" pos:end="231:34"><name pos:start="231:14" pos:end="231:19">strcmp</name><argument_list pos:start="231:20" pos:end="231:34">(<argument pos:start="231:21" pos:end="231:23"><expr pos:start="231:21" pos:end="231:23"><name pos:start="231:21" pos:end="231:23">buf</name></expr></argument>, <argument pos:start="231:26" pos:end="231:33"><expr pos:start="231:26" pos:end="231:33"><literal type="string" pos:start="231:26" pos:end="231:33">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="231:37" pos:end="235:9">{<block_content pos:start="233:13" pos:end="233:44">

            <expr_stmt pos:start="233:13" pos:end="233:44"><expr pos:start="233:13" pos:end="233:43"><name pos:start="233:13" pos:end="233:22">bdrv_flags</name> <operator pos:start="233:24" pos:end="233:25">|=</operator> <name pos:start="233:27" pos:end="233:43">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="235:11" pos:end="239:9">else if <condition pos:start="235:19" pos:end="235:43">(<expr pos:start="235:20" pos:end="235:42"><operator pos:start="235:20" pos:end="235:20">!</operator><call pos:start="235:21" pos:end="235:42"><name pos:start="235:21" pos:end="235:26">strcmp</name><argument_list pos:start="235:27" pos:end="235:42">(<argument pos:start="235:28" pos:end="235:30"><expr pos:start="235:28" pos:end="235:30"><name pos:start="235:28" pos:end="235:30">buf</name></expr></argument>, <argument pos:start="235:33" pos:end="235:41"><expr pos:start="235:33" pos:end="235:41"><literal type="string" pos:start="235:33" pos:end="235:41">"threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="235:45" pos:end="239:9">{<block_content>

            <comment type="block" pos:start="237:13" pos:end="237:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="239:11" pos:end="245:9">else <block pos:start="239:16" pos:end="245:9">{<block_content pos:start="241:12" pos:end="243:23">

           <expr_stmt pos:start="241:12" pos:end="241:46"><expr pos:start="241:12" pos:end="241:45"><call pos:start="241:12" pos:end="241:45"><name pos:start="241:12" pos:end="241:23">error_report</name><argument_list pos:start="241:24" pos:end="241:45">(<argument pos:start="241:25" pos:end="241:44"><expr pos:start="241:25" pos:end="241:44"><literal type="string" pos:start="241:25" pos:end="241:44">"invalid aio option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="243:12" pos:end="243:23">return <expr pos:start="243:19" pos:end="243:22"><name pos:start="243:19" pos:end="243:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="249:1" pos:end="249:6">#<cpp:directive pos:start="249:2" pos:end="249:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="253:5" pos:end="277:5"><if pos:start="253:5" pos:end="277:5">if <condition pos:start="253:8" pos:end="253:53">(<expr pos:start="253:9" pos:end="253:52"><operator pos:start="253:9" pos:end="253:9">(</operator><name pos:start="253:10" pos:end="253:12">buf</name> <operator pos:start="253:14" pos:end="253:14">=</operator> <call pos:start="253:16" pos:end="253:43"><name pos:start="253:16" pos:end="253:27">qemu_opt_get</name><argument_list pos:start="253:28" pos:end="253:43">(<argument pos:start="253:29" pos:end="253:32"><expr pos:start="253:29" pos:end="253:32"><name pos:start="253:29" pos:end="253:32">opts</name></expr></argument>, <argument pos:start="253:35" pos:end="253:42"><expr pos:start="253:35" pos:end="253:42"><literal type="string" pos:start="253:35" pos:end="253:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="253:44" pos:end="253:44">)</operator> <operator pos:start="253:46" pos:end="253:47">!=</operator> <name pos:start="253:49" pos:end="253:52">NULL</name></expr>)</condition> <block pos:start="253:55" pos:end="277:5">{<block_content pos:start="255:8" pos:end="275:9">

       <if_stmt pos:start="255:8" pos:end="265:9"><if pos:start="255:8" pos:end="265:9">if <condition pos:start="255:11" pos:end="255:33">(<expr pos:start="255:12" pos:end="255:32"><call pos:start="255:12" pos:end="255:27"><name pos:start="255:12" pos:end="255:17">strcmp</name><argument_list pos:start="255:18" pos:end="255:27">(<argument pos:start="255:19" pos:end="255:21"><expr pos:start="255:19" pos:end="255:21"><name pos:start="255:19" pos:end="255:21">buf</name></expr></argument>, <argument pos:start="255:24" pos:end="255:26"><expr pos:start="255:24" pos:end="255:26"><literal type="string" pos:start="255:24" pos:end="255:26">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="255:29" pos:end="255:30">==</operator> <literal type="number" pos:start="255:32" pos:end="255:32">0</literal></expr>)</condition> <block pos:start="255:35" pos:end="265:9">{<block_content pos:start="257:12" pos:end="263:23">

           <expr_stmt pos:start="257:12" pos:end="257:46"><expr pos:start="257:12" pos:end="257:45"><call pos:start="257:12" pos:end="257:45"><name pos:start="257:12" pos:end="257:23">error_printf</name><argument_list pos:start="257:24" pos:end="257:45">(<argument pos:start="257:25" pos:end="257:44"><expr pos:start="257:25" pos:end="257:44"><literal type="string" pos:start="257:25" pos:end="257:44">"Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="259:12" pos:end="259:56"><expr pos:start="259:12" pos:end="259:55"><call pos:start="259:12" pos:end="259:55"><name pos:start="259:12" pos:end="259:30">bdrv_iterate_format</name><argument_list pos:start="259:31" pos:end="259:55">(<argument pos:start="259:32" pos:end="259:48"><expr pos:start="259:32" pos:end="259:48"><name pos:start="259:32" pos:end="259:48">bdrv_format_print</name></expr></argument>, <argument pos:start="259:51" pos:end="259:54"><expr pos:start="259:51" pos:end="259:54"><name pos:start="259:51" pos:end="259:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="261:12" pos:end="261:30"><expr pos:start="261:12" pos:end="261:29"><call pos:start="261:12" pos:end="261:29"><name pos:start="261:12" pos:end="261:23">error_printf</name><argument_list pos:start="261:24" pos:end="261:29">(<argument pos:start="261:25" pos:end="261:28"><expr pos:start="261:25" pos:end="261:28"><literal type="string" pos:start="261:25" pos:end="261:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="263:12" pos:end="263:23">return <expr pos:start="263:19" pos:end="263:22"><name pos:start="263:19" pos:end="263:22">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:48"><expr pos:start="267:9" pos:end="267:47"><name pos:start="267:9" pos:end="267:11">drv</name> <operator pos:start="267:13" pos:end="267:13">=</operator> <call pos:start="267:15" pos:end="267:47"><name pos:start="267:15" pos:end="267:42">bdrv_find_whitelisted_format</name><argument_list pos:start="267:43" pos:end="267:47">(<argument pos:start="267:44" pos:end="267:46"><expr pos:start="267:44" pos:end="267:46"><name pos:start="267:44" pos:end="267:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="269:9" pos:end="275:9"><if pos:start="269:9" pos:end="275:9">if <condition pos:start="269:12" pos:end="269:17">(<expr pos:start="269:13" pos:end="269:16"><operator pos:start="269:13" pos:end="269:13">!</operator><name pos:start="269:14" pos:end="269:16">drv</name></expr>)</condition> <block pos:start="269:19" pos:end="275:9">{<block_content pos:start="271:13" pos:end="273:24">

            <expr_stmt pos:start="271:13" pos:end="271:53"><expr pos:start="271:13" pos:end="271:52"><call pos:start="271:13" pos:end="271:52"><name pos:start="271:13" pos:end="271:24">error_report</name><argument_list pos:start="271:25" pos:end="271:52">(<argument pos:start="271:26" pos:end="271:46"><expr pos:start="271:26" pos:end="271:46"><literal type="string" pos:start="271:26" pos:end="271:46">"'%s' invalid format"</literal></expr></argument>, <argument pos:start="271:49" pos:end="271:51"><expr pos:start="271:49" pos:end="271:51"><name pos:start="271:49" pos:end="271:51">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="273:13" pos:end="273:24">return <expr pos:start="273:20" pos:end="273:23"><name pos:start="273:20" pos:end="273:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="281:5" pos:end="281:29">/* disk I/O throttling */</comment>

    <expr_stmt pos:start="283:5" pos:end="285:63"><expr pos:start="283:5" pos:end="285:62"><name pos:start="283:5" pos:end="283:39"><name pos:start="283:5" pos:end="283:13">io_limits</name><operator pos:start="283:14" pos:end="283:14">.</operator><name pos:start="283:15" pos:end="283:17">bps</name><index pos:start="283:18" pos:end="283:39">[<expr pos:start="283:19" pos:end="283:38"><name pos:start="283:19" pos:end="283:38">BLOCK_IO_LIMIT_TOTAL</name></expr>]</index></name>  <operator pos:start="283:42" pos:end="283:42">=</operator>

                           <call pos:start="285:28" pos:end="285:62"><name pos:start="285:28" pos:end="285:46">qemu_opt_get_number</name><argument_list pos:start="285:47" pos:end="285:62">(<argument pos:start="285:48" pos:end="285:51"><expr pos:start="285:48" pos:end="285:51"><name pos:start="285:48" pos:end="285:51">opts</name></expr></argument>, <argument pos:start="285:54" pos:end="285:58"><expr pos:start="285:54" pos:end="285:58"><literal type="string" pos:start="285:54" pos:end="285:58">"bps"</literal></expr></argument>, <argument pos:start="285:61" pos:end="285:61"><expr pos:start="285:61" pos:end="285:61"><literal type="number" pos:start="285:61" pos:end="285:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="289:66"><expr pos:start="287:5" pos:end="289:65"><name pos:start="287:5" pos:end="287:38"><name pos:start="287:5" pos:end="287:13">io_limits</name><operator pos:start="287:14" pos:end="287:14">.</operator><name pos:start="287:15" pos:end="287:17">bps</name><index pos:start="287:18" pos:end="287:38">[<expr pos:start="287:19" pos:end="287:37"><name pos:start="287:19" pos:end="287:37">BLOCK_IO_LIMIT_READ</name></expr>]</index></name>   <operator pos:start="287:42" pos:end="287:42">=</operator>

                           <call pos:start="289:28" pos:end="289:65"><name pos:start="289:28" pos:end="289:46">qemu_opt_get_number</name><argument_list pos:start="289:47" pos:end="289:65">(<argument pos:start="289:48" pos:end="289:51"><expr pos:start="289:48" pos:end="289:51"><name pos:start="289:48" pos:end="289:51">opts</name></expr></argument>, <argument pos:start="289:54" pos:end="289:61"><expr pos:start="289:54" pos:end="289:61"><literal type="string" pos:start="289:54" pos:end="289:61">"bps_rd"</literal></expr></argument>, <argument pos:start="289:64" pos:end="289:64"><expr pos:start="289:64" pos:end="289:64"><literal type="number" pos:start="289:64" pos:end="289:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="293:66"><expr pos:start="291:5" pos:end="293:65"><name pos:start="291:5" pos:end="291:39"><name pos:start="291:5" pos:end="291:13">io_limits</name><operator pos:start="291:14" pos:end="291:14">.</operator><name pos:start="291:15" pos:end="291:17">bps</name><index pos:start="291:18" pos:end="291:39">[<expr pos:start="291:19" pos:end="291:38"><name pos:start="291:19" pos:end="291:38">BLOCK_IO_LIMIT_WRITE</name></expr>]</index></name>  <operator pos:start="291:42" pos:end="291:42">=</operator>

                           <call pos:start="293:28" pos:end="293:65"><name pos:start="293:28" pos:end="293:46">qemu_opt_get_number</name><argument_list pos:start="293:47" pos:end="293:65">(<argument pos:start="293:48" pos:end="293:51"><expr pos:start="293:48" pos:end="293:51"><name pos:start="293:48" pos:end="293:51">opts</name></expr></argument>, <argument pos:start="293:54" pos:end="293:61"><expr pos:start="293:54" pos:end="293:61"><literal type="string" pos:start="293:54" pos:end="293:61">"bps_wr"</literal></expr></argument>, <argument pos:start="293:64" pos:end="293:64"><expr pos:start="293:64" pos:end="293:64"><literal type="number" pos:start="293:64" pos:end="293:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="297:64"><expr pos:start="295:5" pos:end="297:63"><name pos:start="295:5" pos:end="295:40"><name pos:start="295:5" pos:end="295:13">io_limits</name><operator pos:start="295:14" pos:end="295:14">.</operator><name pos:start="295:15" pos:end="295:18">iops</name><index pos:start="295:19" pos:end="295:40">[<expr pos:start="295:20" pos:end="295:39"><name pos:start="295:20" pos:end="295:39">BLOCK_IO_LIMIT_TOTAL</name></expr>]</index></name> <operator pos:start="295:42" pos:end="295:42">=</operator>

                           <call pos:start="297:28" pos:end="297:63"><name pos:start="297:28" pos:end="297:46">qemu_opt_get_number</name><argument_list pos:start="297:47" pos:end="297:63">(<argument pos:start="297:48" pos:end="297:51"><expr pos:start="297:48" pos:end="297:51"><name pos:start="297:48" pos:end="297:51">opts</name></expr></argument>, <argument pos:start="297:54" pos:end="297:59"><expr pos:start="297:54" pos:end="297:59"><literal type="string" pos:start="297:54" pos:end="297:59">"iops"</literal></expr></argument>, <argument pos:start="297:62" pos:end="297:62"><expr pos:start="297:62" pos:end="297:62"><literal type="number" pos:start="297:62" pos:end="297:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="301:67"><expr pos:start="299:5" pos:end="301:66"><name pos:start="299:5" pos:end="299:39"><name pos:start="299:5" pos:end="299:13">io_limits</name><operator pos:start="299:14" pos:end="299:14">.</operator><name pos:start="299:15" pos:end="299:18">iops</name><index pos:start="299:19" pos:end="299:39">[<expr pos:start="299:20" pos:end="299:38"><name pos:start="299:20" pos:end="299:38">BLOCK_IO_LIMIT_READ</name></expr>]</index></name>  <operator pos:start="299:42" pos:end="299:42">=</operator>

                           <call pos:start="301:28" pos:end="301:66"><name pos:start="301:28" pos:end="301:46">qemu_opt_get_number</name><argument_list pos:start="301:47" pos:end="301:66">(<argument pos:start="301:48" pos:end="301:51"><expr pos:start="301:48" pos:end="301:51"><name pos:start="301:48" pos:end="301:51">opts</name></expr></argument>, <argument pos:start="301:54" pos:end="301:62"><expr pos:start="301:54" pos:end="301:62"><literal type="string" pos:start="301:54" pos:end="301:62">"iops_rd"</literal></expr></argument>, <argument pos:start="301:65" pos:end="301:65"><expr pos:start="301:65" pos:end="301:65"><literal type="number" pos:start="301:65" pos:end="301:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="305:67"><expr pos:start="303:5" pos:end="305:66"><name pos:start="303:5" pos:end="303:40"><name pos:start="303:5" pos:end="303:13">io_limits</name><operator pos:start="303:14" pos:end="303:14">.</operator><name pos:start="303:15" pos:end="303:18">iops</name><index pos:start="303:19" pos:end="303:40">[<expr pos:start="303:20" pos:end="303:39"><name pos:start="303:20" pos:end="303:39">BLOCK_IO_LIMIT_WRITE</name></expr>]</index></name> <operator pos:start="303:42" pos:end="303:42">=</operator>

                           <call pos:start="305:28" pos:end="305:66"><name pos:start="305:28" pos:end="305:46">qemu_opt_get_number</name><argument_list pos:start="305:47" pos:end="305:66">(<argument pos:start="305:48" pos:end="305:51"><expr pos:start="305:48" pos:end="305:51"><name pos:start="305:48" pos:end="305:51">opts</name></expr></argument>, <argument pos:start="305:54" pos:end="305:62"><expr pos:start="305:54" pos:end="305:62"><literal type="string" pos:start="305:54" pos:end="305:62">"iops_wr"</literal></expr></argument>, <argument pos:start="305:65" pos:end="305:65"><expr pos:start="305:65" pos:end="305:65"><literal type="number" pos:start="305:65" pos:end="305:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="309:5" pos:end="317:5"><if pos:start="309:5" pos:end="317:5">if <condition pos:start="309:8" pos:end="309:40">(<expr pos:start="309:9" pos:end="309:39"><operator pos:start="309:9" pos:end="309:9">!</operator><call pos:start="309:10" pos:end="309:39"><name pos:start="309:10" pos:end="309:27">do_check_io_limits</name><argument_list pos:start="309:28" pos:end="309:39">(<argument pos:start="309:29" pos:end="309:38"><expr pos:start="309:29" pos:end="309:38"><operator pos:start="309:29" pos:end="309:29">&amp;</operator><name pos:start="309:30" pos:end="309:38">io_limits</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="309:42" pos:end="317:5">{<block_content pos:start="311:9" pos:end="315:20">

        <expr_stmt pos:start="311:9" pos:end="313:56"><expr pos:start="311:9" pos:end="313:55"><call pos:start="311:9" pos:end="313:55"><name pos:start="311:9" pos:end="311:20">error_report</name><argument_list pos:start="311:21" pos:end="313:55">(<argument pos:start="311:22" pos:end="313:54"><expr pos:start="311:22" pos:end="313:54"><literal type="string" pos:start="311:22" pos:end="311:68">"bps(iops) and bps_rd/bps_wr(iops_rd/iops_wr) "</literal>

                     <literal type="string" pos:start="313:22" pos:end="313:54">"cannot be used at the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="315:9" pos:end="315:20">return <expr pos:start="315:16" pos:end="315:19"><name pos:start="315:16" pos:end="315:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="321:5" pos:end="321:43"><expr pos:start="321:5" pos:end="321:42"><name pos:start="321:5" pos:end="321:18">on_write_error</name> <operator pos:start="321:20" pos:end="321:20">=</operator> <name pos:start="321:22" pos:end="321:42">BLOCK_ERR_STOP_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="323:5" pos:end="343:5"><if pos:start="323:5" pos:end="343:5">if <condition pos:start="323:8" pos:end="323:53">(<expr pos:start="323:9" pos:end="323:52"><operator pos:start="323:9" pos:end="323:9">(</operator><name pos:start="323:10" pos:end="323:12">buf</name> <operator pos:start="323:14" pos:end="323:14">=</operator> <call pos:start="323:16" pos:end="323:43"><name pos:start="323:16" pos:end="323:27">qemu_opt_get</name><argument_list pos:start="323:28" pos:end="323:43">(<argument pos:start="323:29" pos:end="323:32"><expr pos:start="323:29" pos:end="323:32"><name pos:start="323:29" pos:end="323:32">opts</name></expr></argument>, <argument pos:start="323:35" pos:end="323:42"><expr pos:start="323:35" pos:end="323:42"><literal type="string" pos:start="323:35" pos:end="323:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="323:44" pos:end="323:44">)</operator> <operator pos:start="323:46" pos:end="323:47">!=</operator> <name pos:start="323:49" pos:end="323:52">NULL</name></expr>)</condition> <block pos:start="323:55" pos:end="343:5">{<block_content pos:start="325:9" pos:end="341:9">

        <if_stmt pos:start="325:9" pos:end="331:9"><if pos:start="325:9" pos:end="331:9">if <condition pos:start="325:12" pos:end="325:86">(<expr pos:start="325:13" pos:end="325:85"><name pos:start="325:13" pos:end="325:16">type</name> <operator pos:start="325:18" pos:end="325:19">!=</operator> <name pos:start="325:21" pos:end="325:26">IF_IDE</name> <operator pos:start="325:28" pos:end="325:29">&amp;&amp;</operator> <name pos:start="325:31" pos:end="325:34">type</name> <operator pos:start="325:36" pos:end="325:37">!=</operator> <name pos:start="325:39" pos:end="325:45">IF_SCSI</name> <operator pos:start="325:47" pos:end="325:48">&amp;&amp;</operator> <name pos:start="325:50" pos:end="325:53">type</name> <operator pos:start="325:55" pos:end="325:56">!=</operator> <name pos:start="325:58" pos:end="325:66">IF_VIRTIO</name> <operator pos:start="325:68" pos:end="325:69">&amp;&amp;</operator> <name pos:start="325:71" pos:end="325:74">type</name> <operator pos:start="325:76" pos:end="325:77">!=</operator> <name pos:start="325:79" pos:end="325:85">IF_NONE</name></expr>)</condition> <block pos:start="325:88" pos:end="331:9">{<block_content pos:start="327:13" pos:end="329:24">

            <expr_stmt pos:start="327:13" pos:end="327:69"><expr pos:start="327:13" pos:end="327:68"><call pos:start="327:13" pos:end="327:68"><name pos:start="327:13" pos:end="327:24">error_report</name><argument_list pos:start="327:25" pos:end="327:68">(<argument pos:start="327:26" pos:end="327:67"><expr pos:start="327:26" pos:end="327:67"><literal type="string" pos:start="327:26" pos:end="327:67">"werror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="329:13" pos:end="329:24">return <expr pos:start="329:20" pos:end="329:23"><name pos:start="329:20" pos:end="329:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:58"><expr pos:start="335:9" pos:end="335:57"><name pos:start="335:9" pos:end="335:22">on_write_error</name> <operator pos:start="335:24" pos:end="335:24">=</operator> <call pos:start="335:26" pos:end="335:57"><name pos:start="335:26" pos:end="335:49">parse_block_error_action</name><argument_list pos:start="335:50" pos:end="335:57">(<argument pos:start="335:51" pos:end="335:53"><expr pos:start="335:51" pos:end="335:53"><name pos:start="335:51" pos:end="335:53">buf</name></expr></argument>, <argument pos:start="335:56" pos:end="335:56"><expr pos:start="335:56" pos:end="335:56"><literal type="number" pos:start="335:56" pos:end="335:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="337:9" pos:end="341:9"><if pos:start="337:9" pos:end="341:9">if <condition pos:start="337:12" pos:end="337:31">(<expr pos:start="337:13" pos:end="337:30"><name pos:start="337:13" pos:end="337:26">on_write_error</name> <operator pos:start="337:28" pos:end="337:28">&lt;</operator> <literal type="number" pos:start="337:30" pos:end="337:30">0</literal></expr>)</condition> <block pos:start="337:33" pos:end="341:9">{<block_content pos:start="339:13" pos:end="339:24">

            <return pos:start="339:13" pos:end="339:24">return <expr pos:start="339:20" pos:end="339:23"><name pos:start="339:20" pos:end="339:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="347:5" pos:end="347:37"><expr pos:start="347:5" pos:end="347:36"><name pos:start="347:5" pos:end="347:17">on_read_error</name> <operator pos:start="347:19" pos:end="347:19">=</operator> <name pos:start="347:21" pos:end="347:36">BLOCK_ERR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="349:5" pos:end="369:5"><if pos:start="349:5" pos:end="369:5">if <condition pos:start="349:8" pos:end="349:53">(<expr pos:start="349:9" pos:end="349:52"><operator pos:start="349:9" pos:end="349:9">(</operator><name pos:start="349:10" pos:end="349:12">buf</name> <operator pos:start="349:14" pos:end="349:14">=</operator> <call pos:start="349:16" pos:end="349:43"><name pos:start="349:16" pos:end="349:27">qemu_opt_get</name><argument_list pos:start="349:28" pos:end="349:43">(<argument pos:start="349:29" pos:end="349:32"><expr pos:start="349:29" pos:end="349:32"><name pos:start="349:29" pos:end="349:32">opts</name></expr></argument>, <argument pos:start="349:35" pos:end="349:42"><expr pos:start="349:35" pos:end="349:42"><literal type="string" pos:start="349:35" pos:end="349:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="349:44" pos:end="349:44">)</operator> <operator pos:start="349:46" pos:end="349:47">!=</operator> <name pos:start="349:49" pos:end="349:52">NULL</name></expr>)</condition> <block pos:start="349:55" pos:end="369:5">{<block_content pos:start="351:9" pos:end="367:9">

        <if_stmt pos:start="351:9" pos:end="357:9"><if pos:start="351:9" pos:end="357:9">if <condition pos:start="351:12" pos:end="351:86">(<expr pos:start="351:13" pos:end="351:85"><name pos:start="351:13" pos:end="351:16">type</name> <operator pos:start="351:18" pos:end="351:19">!=</operator> <name pos:start="351:21" pos:end="351:26">IF_IDE</name> <operator pos:start="351:28" pos:end="351:29">&amp;&amp;</operator> <name pos:start="351:31" pos:end="351:34">type</name> <operator pos:start="351:36" pos:end="351:37">!=</operator> <name pos:start="351:39" pos:end="351:47">IF_VIRTIO</name> <operator pos:start="351:49" pos:end="351:50">&amp;&amp;</operator> <name pos:start="351:52" pos:end="351:55">type</name> <operator pos:start="351:57" pos:end="351:58">!=</operator> <name pos:start="351:60" pos:end="351:66">IF_SCSI</name> <operator pos:start="351:68" pos:end="351:69">&amp;&amp;</operator> <name pos:start="351:71" pos:end="351:74">type</name> <operator pos:start="351:76" pos:end="351:77">!=</operator> <name pos:start="351:79" pos:end="351:85">IF_NONE</name></expr>)</condition> <block pos:start="351:88" pos:end="357:9">{<block_content pos:start="353:13" pos:end="355:24">

            <expr_stmt pos:start="353:13" pos:end="353:69"><expr pos:start="353:13" pos:end="353:68"><call pos:start="353:13" pos:end="353:68"><name pos:start="353:13" pos:end="353:24">error_report</name><argument_list pos:start="353:25" pos:end="353:68">(<argument pos:start="353:26" pos:end="353:67"><expr pos:start="353:26" pos:end="353:67"><literal type="string" pos:start="353:26" pos:end="353:67">"rerror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="355:13" pos:end="355:24">return <expr pos:start="355:20" pos:end="355:23"><name pos:start="355:20" pos:end="355:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="361:9" pos:end="361:57"><expr pos:start="361:9" pos:end="361:56"><name pos:start="361:9" pos:end="361:21">on_read_error</name> <operator pos:start="361:23" pos:end="361:23">=</operator> <call pos:start="361:25" pos:end="361:56"><name pos:start="361:25" pos:end="361:48">parse_block_error_action</name><argument_list pos:start="361:49" pos:end="361:56">(<argument pos:start="361:50" pos:end="361:52"><expr pos:start="361:50" pos:end="361:52"><name pos:start="361:50" pos:end="361:52">buf</name></expr></argument>, <argument pos:start="361:55" pos:end="361:55"><expr pos:start="361:55" pos:end="361:55"><literal type="number" pos:start="361:55" pos:end="361:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="363:9" pos:end="367:9"><if pos:start="363:9" pos:end="367:9">if <condition pos:start="363:12" pos:end="363:30">(<expr pos:start="363:13" pos:end="363:29"><name pos:start="363:13" pos:end="363:25">on_read_error</name> <operator pos:start="363:27" pos:end="363:27">&lt;</operator> <literal type="number" pos:start="363:29" pos:end="363:29">0</literal></expr>)</condition> <block pos:start="363:32" pos:end="367:9">{<block_content pos:start="365:13" pos:end="365:24">

            <return pos:start="365:13" pos:end="365:24">return <expr pos:start="365:20" pos:end="365:23"><name pos:start="365:20" pos:end="365:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="373:5" pos:end="383:5"><if pos:start="373:5" pos:end="383:5">if <condition pos:start="373:8" pos:end="373:55">(<expr pos:start="373:9" pos:end="373:54"><operator pos:start="373:9" pos:end="373:9">(</operator><name pos:start="373:10" pos:end="373:16">devaddr</name> <operator pos:start="373:18" pos:end="373:18">=</operator> <call pos:start="373:20" pos:end="373:45"><name pos:start="373:20" pos:end="373:31">qemu_opt_get</name><argument_list pos:start="373:32" pos:end="373:45">(<argument pos:start="373:33" pos:end="373:36"><expr pos:start="373:33" pos:end="373:36"><name pos:start="373:33" pos:end="373:36">opts</name></expr></argument>, <argument pos:start="373:39" pos:end="373:44"><expr pos:start="373:39" pos:end="373:44"><literal type="string" pos:start="373:39" pos:end="373:44">"addr"</literal></expr></argument>)</argument_list></call><operator pos:start="373:46" pos:end="373:46">)</operator> <operator pos:start="373:48" pos:end="373:49">!=</operator> <name pos:start="373:51" pos:end="373:54">NULL</name></expr>)</condition> <block pos:start="373:57" pos:end="383:5">{<block_content pos:start="375:9" pos:end="381:9">

        <if_stmt pos:start="375:9" pos:end="381:9"><if pos:start="375:9" pos:end="381:9">if <condition pos:start="375:12" pos:end="375:30">(<expr pos:start="375:13" pos:end="375:29"><name pos:start="375:13" pos:end="375:16">type</name> <operator pos:start="375:18" pos:end="375:19">!=</operator> <name pos:start="375:21" pos:end="375:29">IF_VIRTIO</name></expr>)</condition> <block pos:start="375:32" pos:end="381:9">{<block_content pos:start="377:13" pos:end="379:24">

            <expr_stmt pos:start="377:13" pos:end="377:67"><expr pos:start="377:13" pos:end="377:66"><call pos:start="377:13" pos:end="377:66"><name pos:start="377:13" pos:end="377:24">error_report</name><argument_list pos:start="377:25" pos:end="377:66">(<argument pos:start="377:26" pos:end="377:65"><expr pos:start="377:26" pos:end="377:65"><literal type="string" pos:start="377:26" pos:end="377:65">"addr is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="379:13" pos:end="379:24">return <expr pos:start="379:20" pos:end="379:23"><name pos:start="379:20" pos:end="379:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="387:5" pos:end="387:46">/* compute bus and unit according index */</comment>



    <if_stmt pos:start="391:5" pos:end="405:5"><if pos:start="391:5" pos:end="405:5">if <condition pos:start="391:8" pos:end="391:20">(<expr pos:start="391:9" pos:end="391:19"><name pos:start="391:9" pos:end="391:13">index</name> <operator pos:start="391:15" pos:end="391:16">!=</operator> <operator pos:start="391:18" pos:end="391:18">-</operator><literal type="number" pos:start="391:19" pos:end="391:19">1</literal></expr>)</condition> <block pos:start="391:22" pos:end="405:5">{<block_content pos:start="393:9" pos:end="403:54">

        <if_stmt pos:start="393:9" pos:end="399:9"><if pos:start="393:9" pos:end="399:9">if <condition pos:start="393:12" pos:end="393:41">(<expr pos:start="393:13" pos:end="393:40"><name pos:start="393:13" pos:end="393:18">bus_id</name> <operator pos:start="393:20" pos:end="393:21">!=</operator> <literal type="number" pos:start="393:23" pos:end="393:23">0</literal> <operator pos:start="393:25" pos:end="393:26">||</operator> <name pos:start="393:28" pos:end="393:34">unit_id</name> <operator pos:start="393:36" pos:end="393:37">!=</operator> <operator pos:start="393:39" pos:end="393:39">-</operator><literal type="number" pos:start="393:40" pos:end="393:40">1</literal></expr>)</condition> <block pos:start="393:43" pos:end="399:9">{<block_content pos:start="395:13" pos:end="397:24">

            <expr_stmt pos:start="395:13" pos:end="395:67"><expr pos:start="395:13" pos:end="395:66"><call pos:start="395:13" pos:end="395:66"><name pos:start="395:13" pos:end="395:24">error_report</name><argument_list pos:start="395:25" pos:end="395:66">(<argument pos:start="395:26" pos:end="395:65"><expr pos:start="395:26" pos:end="395:65"><literal type="string" pos:start="395:26" pos:end="395:65">"index cannot be used with bus and unit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="397:13" pos:end="397:24">return <expr pos:start="397:20" pos:end="397:23"><name pos:start="397:20" pos:end="397:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:52"><expr pos:start="401:9" pos:end="401:51"><name pos:start="401:9" pos:end="401:14">bus_id</name> <operator pos:start="401:16" pos:end="401:16">=</operator> <call pos:start="401:18" pos:end="401:51"><name pos:start="401:18" pos:end="401:38">drive_index_to_bus_id</name><argument_list pos:start="401:39" pos:end="401:51">(<argument pos:start="401:40" pos:end="401:43"><expr pos:start="401:40" pos:end="401:43"><name pos:start="401:40" pos:end="401:43">type</name></expr></argument>, <argument pos:start="401:46" pos:end="401:50"><expr pos:start="401:46" pos:end="401:50"><name pos:start="401:46" pos:end="401:50">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:54"><expr pos:start="403:9" pos:end="403:53"><name pos:start="403:9" pos:end="403:15">unit_id</name> <operator pos:start="403:17" pos:end="403:17">=</operator> <call pos:start="403:19" pos:end="403:53"><name pos:start="403:19" pos:end="403:40">drive_index_to_unit_id</name><argument_list pos:start="403:41" pos:end="403:53">(<argument pos:start="403:42" pos:end="403:45"><expr pos:start="403:42" pos:end="403:45"><name pos:start="403:42" pos:end="403:45">type</name></expr></argument>, <argument pos:start="403:48" pos:end="403:52"><expr pos:start="403:48" pos:end="403:52"><name pos:start="403:48" pos:end="403:52">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="409:5" pos:end="413:7">/* if user doesn't specify a unit_id,

     * try to find the first free

     */</comment>



    <if_stmt pos:start="417:5" pos:end="435:5"><if pos:start="417:5" pos:end="435:5">if <condition pos:start="417:8" pos:end="417:22">(<expr pos:start="417:9" pos:end="417:21"><name pos:start="417:9" pos:end="417:15">unit_id</name> <operator pos:start="417:17" pos:end="417:18">==</operator> <operator pos:start="417:20" pos:end="417:20">-</operator><literal type="number" pos:start="417:21" pos:end="417:21">1</literal></expr>)</condition> <block pos:start="417:24" pos:end="435:5">{<block_content pos:start="419:8" pos:end="433:8">

       <expr_stmt pos:start="419:8" pos:end="419:19"><expr pos:start="419:8" pos:end="419:18"><name pos:start="419:8" pos:end="419:14">unit_id</name> <operator pos:start="419:16" pos:end="419:16">=</operator> <literal type="number" pos:start="419:18" pos:end="419:18">0</literal></expr>;</expr_stmt>

       <while pos:start="421:8" pos:end="433:8">while <condition pos:start="421:14" pos:end="421:55">(<expr pos:start="421:15" pos:end="421:54"><call pos:start="421:15" pos:end="421:46"><name pos:start="421:15" pos:end="421:23">drive_get</name><argument_list pos:start="421:24" pos:end="421:46">(<argument pos:start="421:25" pos:end="421:28"><expr pos:start="421:25" pos:end="421:28"><name pos:start="421:25" pos:end="421:28">type</name></expr></argument>, <argument pos:start="421:31" pos:end="421:36"><expr pos:start="421:31" pos:end="421:36"><name pos:start="421:31" pos:end="421:36">bus_id</name></expr></argument>, <argument pos:start="421:39" pos:end="421:45"><expr pos:start="421:39" pos:end="421:45"><name pos:start="421:39" pos:end="421:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="421:48" pos:end="421:49">!=</operator> <name pos:start="421:51" pos:end="421:54">NULL</name></expr>)</condition> <block pos:start="421:57" pos:end="433:8">{<block_content pos:start="423:12" pos:end="431:12">

           <expr_stmt pos:start="423:12" pos:end="423:21"><expr pos:start="423:12" pos:end="423:20"><name pos:start="423:12" pos:end="423:18">unit_id</name><operator pos:start="423:19" pos:end="423:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="425:12" pos:end="431:12"><if pos:start="425:12" pos:end="431:12">if <condition pos:start="425:15" pos:end="425:47">(<expr pos:start="425:16" pos:end="425:46"><name pos:start="425:16" pos:end="425:23">max_devs</name> <operator pos:start="425:25" pos:end="425:26">&amp;&amp;</operator> <name pos:start="425:28" pos:end="425:34">unit_id</name> <operator pos:start="425:36" pos:end="425:37">&gt;=</operator> <name pos:start="425:39" pos:end="425:46">max_devs</name></expr>)</condition> <block pos:start="425:49" pos:end="431:12">{<block_content pos:start="427:16" pos:end="429:24">

               <expr_stmt pos:start="427:16" pos:end="427:35"><expr pos:start="427:16" pos:end="427:34"><name pos:start="427:16" pos:end="427:22">unit_id</name> <operator pos:start="427:24" pos:end="427:25">-=</operator> <name pos:start="427:27" pos:end="427:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="429:16" pos:end="429:24"><expr pos:start="429:16" pos:end="429:23"><name pos:start="429:16" pos:end="429:21">bus_id</name><operator pos:start="429:22" pos:end="429:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="439:5" pos:end="439:23">/* check unit id */</comment>



    <if_stmt pos:start="443:5" pos:end="451:5"><if pos:start="443:5" pos:end="451:5">if <condition pos:start="443:8" pos:end="443:40">(<expr pos:start="443:9" pos:end="443:39"><name pos:start="443:9" pos:end="443:16">max_devs</name> <operator pos:start="443:18" pos:end="443:19">&amp;&amp;</operator> <name pos:start="443:21" pos:end="443:27">unit_id</name> <operator pos:start="443:29" pos:end="443:30">&gt;=</operator> <name pos:start="443:32" pos:end="443:39">max_devs</name></expr>)</condition> <block pos:start="443:42" pos:end="451:5">{<block_content pos:start="445:9" pos:end="449:20">

        <expr_stmt pos:start="445:9" pos:end="447:44"><expr pos:start="445:9" pos:end="447:43"><call pos:start="445:9" pos:end="447:43"><name pos:start="445:9" pos:end="445:20">error_report</name><argument_list pos:start="445:21" pos:end="447:43">(<argument pos:start="445:22" pos:end="445:50"><expr pos:start="445:22" pos:end="445:50"><literal type="string" pos:start="445:22" pos:end="445:50">"unit %d too big (max is %d)"</literal></expr></argument>,

                     <argument pos:start="447:22" pos:end="447:28"><expr pos:start="447:22" pos:end="447:28"><name pos:start="447:22" pos:end="447:28">unit_id</name></expr></argument>, <argument pos:start="447:31" pos:end="447:42"><expr pos:start="447:31" pos:end="447:42"><name pos:start="447:31" pos:end="447:38">max_devs</name> <operator pos:start="447:40" pos:end="447:40">-</operator> <literal type="number" pos:start="447:42" pos:end="447:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="449:9" pos:end="449:20">return <expr pos:start="449:16" pos:end="449:19"><name pos:start="449:16" pos:end="449:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="455:5" pos:end="459:7">/*

     * catch multiple definitions

     */</comment>



    <if_stmt pos:start="463:5" pos:end="471:5"><if pos:start="463:5" pos:end="471:5">if <condition pos:start="463:8" pos:end="463:49">(<expr pos:start="463:9" pos:end="463:48"><call pos:start="463:9" pos:end="463:40"><name pos:start="463:9" pos:end="463:17">drive_get</name><argument_list pos:start="463:18" pos:end="463:40">(<argument pos:start="463:19" pos:end="463:22"><expr pos:start="463:19" pos:end="463:22"><name pos:start="463:19" pos:end="463:22">type</name></expr></argument>, <argument pos:start="463:25" pos:end="463:30"><expr pos:start="463:25" pos:end="463:30"><name pos:start="463:25" pos:end="463:30">bus_id</name></expr></argument>, <argument pos:start="463:33" pos:end="463:39"><expr pos:start="463:33" pos:end="463:39"><name pos:start="463:33" pos:end="463:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="463:42" pos:end="463:43">!=</operator> <name pos:start="463:45" pos:end="463:48">NULL</name></expr>)</condition> <block pos:start="463:51" pos:end="471:5">{<block_content pos:start="465:9" pos:end="469:20">

        <expr_stmt pos:start="465:9" pos:end="467:45"><expr pos:start="465:9" pos:end="467:44"><call pos:start="465:9" pos:end="467:44"><name pos:start="465:9" pos:end="465:20">error_report</name><argument_list pos:start="465:21" pos:end="467:44">(<argument pos:start="465:22" pos:end="465:67"><expr pos:start="465:22" pos:end="465:67"><literal type="string" pos:start="465:22" pos:end="465:67">"drive with bus=%d, unit=%d (index=%d) exists"</literal></expr></argument>,

                     <argument pos:start="467:22" pos:end="467:27"><expr pos:start="467:22" pos:end="467:27"><name pos:start="467:22" pos:end="467:27">bus_id</name></expr></argument>, <argument pos:start="467:30" pos:end="467:36"><expr pos:start="467:30" pos:end="467:36"><name pos:start="467:30" pos:end="467:36">unit_id</name></expr></argument>, <argument pos:start="467:39" pos:end="467:43"><expr pos:start="467:39" pos:end="467:43"><name pos:start="467:39" pos:end="467:43">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="469:9" pos:end="469:20">return <expr pos:start="469:16" pos:end="469:19"><name pos:start="469:16" pos:end="469:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="475:5" pos:end="475:14">/* init */</comment>



    <expr_stmt pos:start="479:5" pos:end="479:38"><expr pos:start="479:5" pos:end="479:37"><name pos:start="479:5" pos:end="479:9">dinfo</name> <operator pos:start="479:11" pos:end="479:11">=</operator> <call pos:start="479:13" pos:end="479:37"><name pos:start="479:13" pos:end="479:21">g_malloc0</name><argument_list pos:start="479:22" pos:end="479:37">(<argument pos:start="479:23" pos:end="479:36"><expr pos:start="479:23" pos:end="479:36"><sizeof pos:start="479:23" pos:end="479:36">sizeof<argument_list pos:start="479:29" pos:end="479:36">(<argument pos:start="479:30" pos:end="479:35"><expr pos:start="479:30" pos:end="479:35"><operator pos:start="479:30" pos:end="479:30">*</operator><name pos:start="479:31" pos:end="479:35">dinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="481:5" pos:end="507:5"><if pos:start="481:5" pos:end="485:5">if <condition pos:start="481:8" pos:end="481:43">(<expr pos:start="481:9" pos:end="481:42"><operator pos:start="481:9" pos:end="481:9">(</operator><name pos:start="481:10" pos:end="481:12">buf</name> <operator pos:start="481:14" pos:end="481:14">=</operator> <call pos:start="481:16" pos:end="481:33"><name pos:start="481:16" pos:end="481:27">qemu_opts_id</name><argument_list pos:start="481:28" pos:end="481:33">(<argument pos:start="481:29" pos:end="481:32"><expr pos:start="481:29" pos:end="481:32"><name pos:start="481:29" pos:end="481:32">opts</name></expr></argument>)</argument_list></call><operator pos:start="481:34" pos:end="481:34">)</operator> <operator pos:start="481:36" pos:end="481:37">!=</operator> <name pos:start="481:39" pos:end="481:42">NULL</name></expr>)</condition> <block pos:start="481:45" pos:end="485:5">{<block_content pos:start="483:9" pos:end="483:34">

        <expr_stmt pos:start="483:9" pos:end="483:34"><expr pos:start="483:9" pos:end="483:33"><name pos:start="483:9" pos:end="483:17"><name pos:start="483:9" pos:end="483:13">dinfo</name><operator pos:start="483:14" pos:end="483:15">-&gt;</operator><name pos:start="483:16" pos:end="483:17">id</name></name> <operator pos:start="483:19" pos:end="483:19">=</operator> <call pos:start="483:21" pos:end="483:33"><name pos:start="483:21" pos:end="483:28">g_strdup</name><argument_list pos:start="483:29" pos:end="483:33">(<argument pos:start="483:30" pos:end="483:32"><expr pos:start="483:30" pos:end="483:32"><name pos:start="483:30" pos:end="483:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="485:7" pos:end="507:5">else <block pos:start="485:12" pos:end="507:5">{<block_content pos:start="489:9" pos:end="505:49">

        <comment type="block" pos:start="487:9" pos:end="487:42">/* no id supplied -&gt; create one */</comment>

        <expr_stmt pos:start="489:9" pos:end="489:34"><expr pos:start="489:9" pos:end="489:33"><name pos:start="489:9" pos:end="489:17"><name pos:start="489:9" pos:end="489:13">dinfo</name><operator pos:start="489:14" pos:end="489:15">-&gt;</operator><name pos:start="489:16" pos:end="489:17">id</name></name> <operator pos:start="489:19" pos:end="489:19">=</operator> <call pos:start="489:21" pos:end="489:33"><name pos:start="489:21" pos:end="489:29">g_malloc0</name><argument_list pos:start="489:30" pos:end="489:33">(<argument pos:start="489:31" pos:end="489:32"><expr pos:start="489:31" pos:end="489:32"><literal type="number" pos:start="489:31" pos:end="489:32">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="491:9" pos:end="493:62"><if pos:start="491:9" pos:end="493:62">if <condition pos:start="491:12" pos:end="491:46">(<expr pos:start="491:13" pos:end="491:45"><name pos:start="491:13" pos:end="491:16">type</name> <operator pos:start="491:18" pos:end="491:19">==</operator> <name pos:start="491:21" pos:end="491:26">IF_IDE</name> <operator pos:start="491:28" pos:end="491:29">||</operator> <name pos:start="491:31" pos:end="491:34">type</name> <operator pos:start="491:36" pos:end="491:37">==</operator> <name pos:start="491:39" pos:end="491:45">IF_SCSI</name></expr>)</condition><block type="pseudo" pos:start="493:13" pos:end="493:62"><block_content pos:start="493:13" pos:end="493:62">

            <expr_stmt pos:start="493:13" pos:end="493:62"><expr pos:start="493:13" pos:end="493:61"><name pos:start="493:13" pos:end="493:20">mediastr</name> <operator pos:start="493:22" pos:end="493:22">=</operator> <ternary pos:start="493:24" pos:end="493:61"><condition pos:start="493:24" pos:end="493:47"><expr pos:start="493:24" pos:end="493:45"><operator pos:start="493:24" pos:end="493:24">(</operator><name pos:start="493:25" pos:end="493:29">media</name> <operator pos:start="493:31" pos:end="493:32">==</operator> <name pos:start="493:34" pos:end="493:44">MEDIA_CDROM</name><operator pos:start="493:45" pos:end="493:45">)</operator></expr> ?</condition><then pos:start="493:49" pos:end="493:53"> <expr pos:start="493:49" pos:end="493:53"><literal type="string" pos:start="493:49" pos:end="493:53">"-cd"</literal></expr> </then><else pos:start="493:55" pos:end="493:61">: <expr pos:start="493:57" pos:end="493:61"><literal type="string" pos:start="493:57" pos:end="493:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="495:9" pos:end="505:49"><if pos:start="495:9" pos:end="499:57">if <condition pos:start="495:12" pos:end="495:21">(<expr pos:start="495:13" pos:end="495:20"><name pos:start="495:13" pos:end="495:20">max_devs</name></expr>)</condition><block type="pseudo" pos:start="497:13" pos:end="499:57"><block_content pos:start="497:13" pos:end="499:57">

            <expr_stmt pos:start="497:13" pos:end="499:57"><expr pos:start="497:13" pos:end="499:56"><call pos:start="497:13" pos:end="499:56"><name pos:start="497:13" pos:end="497:20">snprintf</name><argument_list pos:start="497:21" pos:end="499:56">(<argument pos:start="497:22" pos:end="497:30"><expr pos:start="497:22" pos:end="497:30"><name pos:start="497:22" pos:end="497:30"><name pos:start="497:22" pos:end="497:26">dinfo</name><operator pos:start="497:27" pos:end="497:28">-&gt;</operator><name pos:start="497:29" pos:end="497:30">id</name></name></expr></argument>, <argument pos:start="497:33" pos:end="497:34"><expr pos:start="497:33" pos:end="497:34"><literal type="number" pos:start="497:33" pos:end="497:34">32</literal></expr></argument>, <argument pos:start="497:37" pos:end="497:46"><expr pos:start="497:37" pos:end="497:46"><literal type="string" pos:start="497:37" pos:end="497:46">"%s%i%s%i"</literal></expr></argument>,

                     <argument pos:start="499:22" pos:end="499:28"><expr pos:start="499:22" pos:end="499:28"><name pos:start="499:22" pos:end="499:28">devname</name></expr></argument>, <argument pos:start="499:31" pos:end="499:36"><expr pos:start="499:31" pos:end="499:36"><name pos:start="499:31" pos:end="499:36">bus_id</name></expr></argument>, <argument pos:start="499:39" pos:end="499:46"><expr pos:start="499:39" pos:end="499:46"><name pos:start="499:39" pos:end="499:46">mediastr</name></expr></argument>, <argument pos:start="499:49" pos:end="499:55"><expr pos:start="499:49" pos:end="499:55"><name pos:start="499:49" pos:end="499:55">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="501:9" pos:end="505:49">else<block type="pseudo" pos:start="503:13" pos:end="505:49"><block_content pos:start="503:13" pos:end="505:49">

            <expr_stmt pos:start="503:13" pos:end="505:49"><expr pos:start="503:13" pos:end="505:48"><call pos:start="503:13" pos:end="505:48"><name pos:start="503:13" pos:end="503:20">snprintf</name><argument_list pos:start="503:21" pos:end="505:48">(<argument pos:start="503:22" pos:end="503:30"><expr pos:start="503:22" pos:end="503:30"><name pos:start="503:22" pos:end="503:30"><name pos:start="503:22" pos:end="503:26">dinfo</name><operator pos:start="503:27" pos:end="503:28">-&gt;</operator><name pos:start="503:29" pos:end="503:30">id</name></name></expr></argument>, <argument pos:start="503:33" pos:end="503:34"><expr pos:start="503:33" pos:end="503:34"><literal type="number" pos:start="503:33" pos:end="503:34">32</literal></expr></argument>, <argument pos:start="503:37" pos:end="503:44"><expr pos:start="503:37" pos:end="503:44"><literal type="string" pos:start="503:37" pos:end="503:44">"%s%s%i"</literal></expr></argument>,

                     <argument pos:start="505:22" pos:end="505:28"><expr pos:start="505:22" pos:end="505:28"><name pos:start="505:22" pos:end="505:28">devname</name></expr></argument>, <argument pos:start="505:31" pos:end="505:38"><expr pos:start="505:31" pos:end="505:38"><name pos:start="505:31" pos:end="505:38">mediastr</name></expr></argument>, <argument pos:start="505:41" pos:end="505:47"><expr pos:start="505:41" pos:end="505:47"><name pos:start="505:41" pos:end="505:47">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="509:5" pos:end="509:38"><expr pos:start="509:5" pos:end="509:37"><name pos:start="509:5" pos:end="509:15"><name pos:start="509:5" pos:end="509:9">dinfo</name><operator pos:start="509:10" pos:end="509:11">-&gt;</operator><name pos:start="509:12" pos:end="509:15">bdrv</name></name> <operator pos:start="509:17" pos:end="509:17">=</operator> <call pos:start="509:19" pos:end="509:37"><name pos:start="509:19" pos:end="509:26">bdrv_new</name><argument_list pos:start="509:27" pos:end="509:37">(<argument pos:start="509:28" pos:end="509:36"><expr pos:start="509:28" pos:end="509:36"><name pos:start="509:28" pos:end="509:36"><name pos:start="509:28" pos:end="509:32">dinfo</name><operator pos:start="509:33" pos:end="509:34">-&gt;</operator><name pos:start="509:35" pos:end="509:36">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="511:5" pos:end="511:29"><expr pos:start="511:5" pos:end="511:28"><name pos:start="511:5" pos:end="511:18"><name pos:start="511:5" pos:end="511:9">dinfo</name><operator pos:start="511:10" pos:end="511:11">-&gt;</operator><name pos:start="511:12" pos:end="511:18">devaddr</name></name> <operator pos:start="511:20" pos:end="511:20">=</operator> <name pos:start="511:22" pos:end="511:28">devaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:23"><expr pos:start="513:5" pos:end="513:22"><name pos:start="513:5" pos:end="513:15"><name pos:start="513:5" pos:end="513:9">dinfo</name><operator pos:start="513:10" pos:end="513:11">-&gt;</operator><name pos:start="513:12" pos:end="513:15">type</name></name> <operator pos:start="513:17" pos:end="513:17">=</operator> <name pos:start="513:19" pos:end="513:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="515:5" pos:end="515:24"><expr pos:start="515:5" pos:end="515:23"><name pos:start="515:5" pos:end="515:14"><name pos:start="515:5" pos:end="515:9">dinfo</name><operator pos:start="515:10" pos:end="515:11">-&gt;</operator><name pos:start="515:12" pos:end="515:14">bus</name></name> <operator pos:start="515:16" pos:end="515:16">=</operator> <name pos:start="515:18" pos:end="515:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="517:5" pos:end="517:26"><expr pos:start="517:5" pos:end="517:25"><name pos:start="517:5" pos:end="517:15"><name pos:start="517:5" pos:end="517:9">dinfo</name><operator pos:start="517:10" pos:end="517:11">-&gt;</operator><name pos:start="517:12" pos:end="517:15">unit</name></name> <operator pos:start="517:17" pos:end="517:17">=</operator> <name pos:start="517:19" pos:end="517:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="519:5" pos:end="519:23"><expr pos:start="519:5" pos:end="519:22"><name pos:start="519:5" pos:end="519:15"><name pos:start="519:5" pos:end="519:9">dinfo</name><operator pos:start="519:10" pos:end="519:11">-&gt;</operator><name pos:start="519:12" pos:end="519:15">opts</name></name> <operator pos:start="519:17" pos:end="519:17">=</operator> <name pos:start="519:19" pos:end="519:22">opts</name></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:24"><expr pos:start="521:5" pos:end="521:23"><name pos:start="521:5" pos:end="521:19"><name pos:start="521:5" pos:end="521:9">dinfo</name><operator pos:start="521:10" pos:end="521:11">-&gt;</operator><name pos:start="521:12" pos:end="521:19">refcount</name></name> <operator pos:start="521:21" pos:end="521:21">=</operator> <literal type="number" pos:start="521:23" pos:end="521:23">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="523:5" pos:end="527:5"><if pos:start="523:5" pos:end="527:5">if <condition pos:start="523:8" pos:end="523:15">(<expr pos:start="523:9" pos:end="523:14"><name pos:start="523:9" pos:end="523:14">serial</name></expr>)</condition> <block pos:start="523:17" pos:end="527:5">{<block_content pos:start="525:9" pos:end="525:62">

        <expr_stmt pos:start="525:9" pos:end="525:62"><expr pos:start="525:9" pos:end="525:61"><call pos:start="525:9" pos:end="525:61"><name pos:start="525:9" pos:end="525:15">pstrcpy</name><argument_list pos:start="525:16" pos:end="525:61">(<argument pos:start="525:17" pos:end="525:29"><expr pos:start="525:17" pos:end="525:29"><name pos:start="525:17" pos:end="525:29"><name pos:start="525:17" pos:end="525:21">dinfo</name><operator pos:start="525:22" pos:end="525:23">-&gt;</operator><name pos:start="525:24" pos:end="525:29">serial</name></name></expr></argument>, <argument pos:start="525:32" pos:end="525:52"><expr pos:start="525:32" pos:end="525:52"><sizeof pos:start="525:32" pos:end="525:52">sizeof<argument_list pos:start="525:38" pos:end="525:52">(<argument pos:start="525:39" pos:end="525:51"><expr pos:start="525:39" pos:end="525:51"><name pos:start="525:39" pos:end="525:51"><name pos:start="525:39" pos:end="525:43">dinfo</name><operator pos:start="525:44" pos:end="525:45">-&gt;</operator><name pos:start="525:46" pos:end="525:51">serial</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="525:55" pos:end="525:60"><expr pos:start="525:55" pos:end="525:60"><name pos:start="525:55" pos:end="525:60">serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="529:5" pos:end="529:45"><expr pos:start="529:5" pos:end="529:44"><call pos:start="529:5" pos:end="529:44"><name pos:start="529:5" pos:end="529:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="529:23" pos:end="529:44">(<argument pos:start="529:24" pos:end="529:30"><expr pos:start="529:24" pos:end="529:30"><operator pos:start="529:24" pos:end="529:24">&amp;</operator><name pos:start="529:25" pos:end="529:30">drives</name></expr></argument>, <argument pos:start="529:33" pos:end="529:37"><expr pos:start="529:33" pos:end="529:37"><name pos:start="529:33" pos:end="529:37">dinfo</name></expr></argument>, <argument pos:start="529:40" pos:end="529:43"><expr pos:start="529:40" pos:end="529:43"><name pos:start="529:40" pos:end="529:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="533:5" pos:end="533:66"><expr pos:start="533:5" pos:end="533:65"><call pos:start="533:5" pos:end="533:65"><name pos:start="533:5" pos:end="533:21">bdrv_set_on_error</name><argument_list pos:start="533:22" pos:end="533:65">(<argument pos:start="533:23" pos:end="533:33"><expr pos:start="533:23" pos:end="533:33"><name pos:start="533:23" pos:end="533:33"><name pos:start="533:23" pos:end="533:27">dinfo</name><operator pos:start="533:28" pos:end="533:29">-&gt;</operator><name pos:start="533:30" pos:end="533:33">bdrv</name></name></expr></argument>, <argument pos:start="533:36" pos:end="533:48"><expr pos:start="533:36" pos:end="533:48"><name pos:start="533:36" pos:end="533:48">on_read_error</name></expr></argument>, <argument pos:start="533:51" pos:end="533:64"><expr pos:start="533:51" pos:end="533:64"><name pos:start="533:51" pos:end="533:64">on_write_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="537:5" pos:end="537:29">/* disk I/O throttling */</comment>

    <expr_stmt pos:start="539:5" pos:end="539:48"><expr pos:start="539:5" pos:end="539:47"><call pos:start="539:5" pos:end="539:47"><name pos:start="539:5" pos:end="539:22">bdrv_set_io_limits</name><argument_list pos:start="539:23" pos:end="539:47">(<argument pos:start="539:24" pos:end="539:34"><expr pos:start="539:24" pos:end="539:34"><name pos:start="539:24" pos:end="539:34"><name pos:start="539:24" pos:end="539:28">dinfo</name><operator pos:start="539:29" pos:end="539:30">-&gt;</operator><name pos:start="539:31" pos:end="539:34">bdrv</name></name></expr></argument>, <argument pos:start="539:37" pos:end="539:46"><expr pos:start="539:37" pos:end="539:46"><operator pos:start="539:37" pos:end="539:37">&amp;</operator><name pos:start="539:38" pos:end="539:46">io_limits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="543:5" pos:end="615:5">switch<condition pos:start="543:11" pos:end="543:16">(<expr pos:start="543:12" pos:end="543:15"><name pos:start="543:12" pos:end="543:15">type</name></expr>)</condition> <block pos:start="543:18" pos:end="615:5">{<block_content pos:start="545:5" pos:end="613:16">

    <case pos:start="545:5" pos:end="545:16">case <expr pos:start="545:10" pos:end="545:15"><name pos:start="545:10" pos:end="545:15">IF_IDE</name></expr>:</case>

    <case pos:start="547:5" pos:end="547:17">case <expr pos:start="547:10" pos:end="547:16"><name pos:start="547:10" pos:end="547:16">IF_SCSI</name></expr>:</case>

    <case pos:start="549:5" pos:end="549:16">case <expr pos:start="549:10" pos:end="549:15"><name pos:start="549:10" pos:end="549:15">IF_XEN</name></expr>:</case>

    <case pos:start="551:5" pos:end="551:17">case <expr pos:start="551:10" pos:end="551:16"><name pos:start="551:10" pos:end="551:16">IF_NONE</name></expr>:</case>

        <switch pos:start="553:9" pos:end="573:9">switch<condition pos:start="553:15" pos:end="553:21">(<expr pos:start="553:16" pos:end="553:20"><name pos:start="553:16" pos:end="553:20">media</name></expr>)</condition> <block pos:start="553:23" pos:end="573:9">{<block_content pos:start="555:9" pos:end="571:18">

	<case pos:start="555:9" pos:end="555:24">case <expr pos:start="555:14" pos:end="555:23"><name pos:start="555:14" pos:end="555:23">MEDIA_DISK</name></expr>:</case>

            <if_stmt pos:start="557:13" pos:end="563:13"><if pos:start="557:13" pos:end="563:13">if <condition pos:start="557:16" pos:end="557:26">(<expr pos:start="557:17" pos:end="557:25"><name pos:start="557:17" pos:end="557:20">cyls</name> <operator pos:start="557:22" pos:end="557:23">!=</operator> <literal type="number" pos:start="557:25" pos:end="557:25">0</literal></expr>)</condition> <block pos:start="557:28" pos:end="563:13">{<block_content pos:start="559:17" pos:end="561:68">

                <expr_stmt pos:start="559:17" pos:end="559:71"><expr pos:start="559:17" pos:end="559:70"><call pos:start="559:17" pos:end="559:70"><name pos:start="559:17" pos:end="559:38">bdrv_set_geometry_hint</name><argument_list pos:start="559:39" pos:end="559:70">(<argument pos:start="559:40" pos:end="559:50"><expr pos:start="559:40" pos:end="559:50"><name pos:start="559:40" pos:end="559:50"><name pos:start="559:40" pos:end="559:44">dinfo</name><operator pos:start="559:45" pos:end="559:46">-&gt;</operator><name pos:start="559:47" pos:end="559:50">bdrv</name></name></expr></argument>, <argument pos:start="559:53" pos:end="559:56"><expr pos:start="559:53" pos:end="559:56"><name pos:start="559:53" pos:end="559:56">cyls</name></expr></argument>, <argument pos:start="559:59" pos:end="559:63"><expr pos:start="559:59" pos:end="559:63"><name pos:start="559:59" pos:end="559:63">heads</name></expr></argument>, <argument pos:start="559:66" pos:end="559:69"><expr pos:start="559:66" pos:end="559:69"><name pos:start="559:66" pos:end="559:69">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="561:17" pos:end="561:68"><expr pos:start="561:17" pos:end="561:67"><call pos:start="561:17" pos:end="561:67"><name pos:start="561:17" pos:end="561:41">bdrv_set_translation_hint</name><argument_list pos:start="561:42" pos:end="561:67">(<argument pos:start="561:43" pos:end="561:53"><expr pos:start="561:43" pos:end="561:53"><name pos:start="561:43" pos:end="561:53"><name pos:start="561:43" pos:end="561:47">dinfo</name><operator pos:start="561:48" pos:end="561:49">-&gt;</operator><name pos:start="561:50" pos:end="561:53">bdrv</name></name></expr></argument>, <argument pos:start="561:56" pos:end="561:66"><expr pos:start="561:56" pos:end="561:66"><name pos:start="561:56" pos:end="561:66">translation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

	    <break pos:start="565:13" pos:end="565:18">break;</break>

	<case pos:start="567:9" pos:end="567:25">case <expr pos:start="567:14" pos:end="567:24"><name pos:start="567:14" pos:end="567:24">MEDIA_CDROM</name></expr>:</case>

            <expr_stmt pos:start="569:13" pos:end="569:32"><expr pos:start="569:13" pos:end="569:31"><name pos:start="569:13" pos:end="569:27"><name pos:start="569:13" pos:end="569:17">dinfo</name><operator pos:start="569:18" pos:end="569:19">-&gt;</operator><name pos:start="569:20" pos:end="569:27">media_cd</name></name> <operator pos:start="569:29" pos:end="569:29">=</operator> <literal type="number" pos:start="569:31" pos:end="569:31">1</literal></expr>;</expr_stmt>

	    <break pos:start="571:13" pos:end="571:18">break;</break>

	</block_content>}</block></switch>

        <break pos:start="575:9" pos:end="575:14">break;</break>

    <case pos:start="577:5" pos:end="577:15">case <expr pos:start="577:10" pos:end="577:14"><name pos:start="577:10" pos:end="577:14">IF_SD</name></expr>:</case>

    <case pos:start="579:5" pos:end="579:19">case <expr pos:start="579:10" pos:end="579:18"><name pos:start="579:10" pos:end="579:18">IF_FLOPPY</name></expr>:</case>

    <case pos:start="581:5" pos:end="581:19">case <expr pos:start="581:10" pos:end="581:18"><name pos:start="581:10" pos:end="581:18">IF_PFLASH</name></expr>:</case>

    <case pos:start="583:5" pos:end="583:16">case <expr pos:start="583:10" pos:end="583:15"><name pos:start="583:10" pos:end="583:15">IF_MTD</name></expr>:</case>

        <break pos:start="585:9" pos:end="585:14">break;</break>

    <case pos:start="587:5" pos:end="587:19">case <expr pos:start="587:10" pos:end="587:18"><name pos:start="587:10" pos:end="587:18">IF_VIRTIO</name></expr>:</case>

        <comment type="block" pos:start="589:9" pos:end="589:37">/* add virtio block device */</comment>

        <expr_stmt pos:start="591:9" pos:end="591:67"><expr pos:start="591:9" pos:end="591:66"><name pos:start="591:9" pos:end="591:12">opts</name> <operator pos:start="591:14" pos:end="591:14">=</operator> <call pos:start="591:16" pos:end="591:66"><name pos:start="591:16" pos:end="591:31">qemu_opts_create</name><argument_list pos:start="591:32" pos:end="591:66">(<argument pos:start="591:33" pos:end="591:56"><expr pos:start="591:33" pos:end="591:56"><call pos:start="591:33" pos:end="591:56"><name pos:start="591:33" pos:end="591:46">qemu_find_opts</name><argument_list pos:start="591:47" pos:end="591:56">(<argument pos:start="591:48" pos:end="591:55"><expr pos:start="591:48" pos:end="591:55"><literal type="string" pos:start="591:48" pos:end="591:55">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="591:59" pos:end="591:62"><expr pos:start="591:59" pos:end="591:62"><name pos:start="591:59" pos:end="591:62">NULL</name></expr></argument>, <argument pos:start="591:65" pos:end="591:65"><expr pos:start="591:65" pos:end="591:65"><literal type="number" pos:start="591:65" pos:end="591:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="593:9" pos:end="601:9"><if pos:start="593:9" pos:end="597:9">if <condition pos:start="593:12" pos:end="593:41">(<expr pos:start="593:13" pos:end="593:40"><name pos:start="593:13" pos:end="593:21">arch_type</name> <operator pos:start="593:23" pos:end="593:24">==</operator> <name pos:start="593:26" pos:end="593:40">QEMU_ARCH_S390X</name></expr>)</condition> <block pos:start="593:43" pos:end="597:9">{<block_content pos:start="595:13" pos:end="595:60">

            <expr_stmt pos:start="595:13" pos:end="595:60"><expr pos:start="595:13" pos:end="595:59"><call pos:start="595:13" pos:end="595:59"><name pos:start="595:13" pos:end="595:24">qemu_opt_set</name><argument_list pos:start="595:25" pos:end="595:59">(<argument pos:start="595:26" pos:end="595:29"><expr pos:start="595:26" pos:end="595:29"><name pos:start="595:26" pos:end="595:29">opts</name></expr></argument>, <argument pos:start="595:32" pos:end="595:39"><expr pos:start="595:32" pos:end="595:39"><literal type="string" pos:start="595:32" pos:end="595:39">"driver"</literal></expr></argument>, <argument pos:start="595:42" pos:end="595:58"><expr pos:start="595:42" pos:end="595:58"><literal type="string" pos:start="595:42" pos:end="595:58">"virtio-blk-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="597:11" pos:end="601:9">else <block pos:start="597:16" pos:end="601:9">{<block_content pos:start="599:13" pos:end="599:59">

            <expr_stmt pos:start="599:13" pos:end="599:59"><expr pos:start="599:13" pos:end="599:58"><call pos:start="599:13" pos:end="599:58"><name pos:start="599:13" pos:end="599:24">qemu_opt_set</name><argument_list pos:start="599:25" pos:end="599:58">(<argument pos:start="599:26" pos:end="599:29"><expr pos:start="599:26" pos:end="599:29"><name pos:start="599:26" pos:end="599:29">opts</name></expr></argument>, <argument pos:start="599:32" pos:end="599:39"><expr pos:start="599:32" pos:end="599:39"><literal type="string" pos:start="599:32" pos:end="599:39">"driver"</literal></expr></argument>, <argument pos:start="599:42" pos:end="599:57"><expr pos:start="599:42" pos:end="599:57"><literal type="string" pos:start="599:42" pos:end="599:57">"virtio-blk-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="603:9" pos:end="603:47"><expr pos:start="603:9" pos:end="603:46"><call pos:start="603:9" pos:end="603:46"><name pos:start="603:9" pos:end="603:20">qemu_opt_set</name><argument_list pos:start="603:21" pos:end="603:46">(<argument pos:start="603:22" pos:end="603:25"><expr pos:start="603:22" pos:end="603:25"><name pos:start="603:22" pos:end="603:25">opts</name></expr></argument>, <argument pos:start="603:28" pos:end="603:34"><expr pos:start="603:28" pos:end="603:34"><literal type="string" pos:start="603:28" pos:end="603:34">"drive"</literal></expr></argument>, <argument pos:start="603:37" pos:end="603:45"><expr pos:start="603:37" pos:end="603:45"><name pos:start="603:37" pos:end="603:45"><name pos:start="603:37" pos:end="603:41">dinfo</name><operator pos:start="603:42" pos:end="603:43">-&gt;</operator><name pos:start="603:44" pos:end="603:45">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="605:9" pos:end="607:48"><if pos:start="605:9" pos:end="607:48">if <condition pos:start="605:12" pos:end="605:20">(<expr pos:start="605:13" pos:end="605:19"><name pos:start="605:13" pos:end="605:19">devaddr</name></expr>)</condition><block type="pseudo" pos:start="607:13" pos:end="607:48"><block_content pos:start="607:13" pos:end="607:48">

            <expr_stmt pos:start="607:13" pos:end="607:48"><expr pos:start="607:13" pos:end="607:47"><call pos:start="607:13" pos:end="607:47"><name pos:start="607:13" pos:end="607:24">qemu_opt_set</name><argument_list pos:start="607:25" pos:end="607:47">(<argument pos:start="607:26" pos:end="607:29"><expr pos:start="607:26" pos:end="607:29"><name pos:start="607:26" pos:end="607:29">opts</name></expr></argument>, <argument pos:start="607:32" pos:end="607:37"><expr pos:start="607:32" pos:end="607:37"><literal type="string" pos:start="607:32" pos:end="607:37">"addr"</literal></expr></argument>, <argument pos:start="607:40" pos:end="607:46"><expr pos:start="607:40" pos:end="607:46"><name pos:start="607:40" pos:end="607:46">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="609:9" pos:end="609:14">break;</break>

    <default pos:start="611:5" pos:end="611:12">default:</default>

        <expr_stmt pos:start="613:9" pos:end="613:16"><expr pos:start="613:9" pos:end="613:15"><call pos:start="613:9" pos:end="613:15"><name pos:start="613:9" pos:end="613:13">abort</name><argument_list pos:start="613:14" pos:end="613:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="617:5" pos:end="621:5"><if pos:start="617:5" pos:end="621:5">if <condition pos:start="617:8" pos:end="617:24">(<expr pos:start="617:9" pos:end="617:23"><operator pos:start="617:9" pos:end="617:9">!</operator><name pos:start="617:10" pos:end="617:13">file</name> <operator pos:start="617:15" pos:end="617:16">||</operator> <operator pos:start="617:18" pos:end="617:18">!</operator><operator pos:start="617:19" pos:end="617:19">*</operator><name pos:start="617:20" pos:end="617:23">file</name></expr>)</condition> <block pos:start="617:26" pos:end="621:5">{<block_content pos:start="619:9" pos:end="619:21">

        <return pos:start="619:9" pos:end="619:21">return <expr pos:start="619:16" pos:end="619:20"><name pos:start="619:16" pos:end="619:20">dinfo</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="623:5" pos:end="631:5"><if pos:start="623:5" pos:end="631:5">if <condition pos:start="623:8" pos:end="623:17">(<expr pos:start="623:9" pos:end="623:16"><name pos:start="623:9" pos:end="623:16">snapshot</name></expr>)</condition> <block pos:start="623:19" pos:end="631:5">{<block_content pos:start="627:9" pos:end="629:72">

        <comment type="block" pos:start="625:9" pos:end="625:51">/* always use cache=unsafe with snapshot */</comment>

        <expr_stmt pos:start="627:9" pos:end="627:41"><expr pos:start="627:9" pos:end="627:40"><name pos:start="627:9" pos:end="627:18">bdrv_flags</name> <operator pos:start="627:20" pos:end="627:21">&amp;=</operator> <operator pos:start="627:23" pos:end="627:23">~</operator><name pos:start="627:24" pos:end="627:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="629:9" pos:end="629:72"><expr pos:start="629:9" pos:end="629:71"><name pos:start="629:9" pos:end="629:18">bdrv_flags</name> <operator pos:start="629:20" pos:end="629:21">|=</operator> <operator pos:start="629:23" pos:end="629:23">(</operator><name pos:start="629:24" pos:end="629:38">BDRV_O_SNAPSHOT</name><operator pos:start="629:39" pos:end="629:39">|</operator><name pos:start="629:40" pos:end="629:54">BDRV_O_CACHE_WB</name><operator pos:start="629:55" pos:end="629:55">|</operator><name pos:start="629:56" pos:end="629:70">BDRV_O_NO_FLUSH</name><operator pos:start="629:71" pos:end="629:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="635:5" pos:end="639:5"><if pos:start="635:5" pos:end="639:5">if <condition pos:start="635:8" pos:end="635:21">(<expr pos:start="635:9" pos:end="635:20"><name pos:start="635:9" pos:end="635:20">copy_on_read</name></expr>)</condition> <block pos:start="635:23" pos:end="639:5">{<block_content pos:start="637:9" pos:end="637:42">

        <expr_stmt pos:start="637:9" pos:end="637:42"><expr pos:start="637:9" pos:end="637:41"><name pos:start="637:9" pos:end="637:18">bdrv_flags</name> <operator pos:start="637:20" pos:end="637:21">|=</operator> <name pos:start="637:23" pos:end="637:41">BDRV_O_COPY_ON_READ</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="643:5" pos:end="647:5"><if pos:start="643:5" pos:end="647:5">if <condition pos:start="643:8" pos:end="643:44">(<expr pos:start="643:9" pos:end="643:43"><call pos:start="643:9" pos:end="643:43"><name pos:start="643:9" pos:end="643:22">runstate_check</name><argument_list pos:start="643:23" pos:end="643:43">(<argument pos:start="643:24" pos:end="643:42"><expr pos:start="643:24" pos:end="643:42"><name pos:start="643:24" pos:end="643:42">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="643:46" pos:end="647:5">{<block_content pos:start="645:9" pos:end="645:38">

        <expr_stmt pos:start="645:9" pos:end="645:38"><expr pos:start="645:9" pos:end="645:37"><name pos:start="645:9" pos:end="645:18">bdrv_flags</name> <operator pos:start="645:20" pos:end="645:21">|=</operator> <name pos:start="645:23" pos:end="645:37">BDRV_O_INCOMING</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="651:5" pos:end="669:5"><if pos:start="651:5" pos:end="657:5">if <condition pos:start="651:8" pos:end="651:29">(<expr pos:start="651:9" pos:end="651:28"><name pos:start="651:9" pos:end="651:13">media</name> <operator pos:start="651:15" pos:end="651:16">==</operator> <name pos:start="651:18" pos:end="651:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="651:31" pos:end="657:5">{<block_content pos:start="655:9" pos:end="655:15">

        <comment type="block" pos:start="653:9" pos:end="653:60">/* CDROM is fine for any interface, don't check.  */</comment>

        <expr_stmt pos:start="655:9" pos:end="655:15"><expr pos:start="655:9" pos:end="655:14"><name pos:start="655:9" pos:end="655:10">ro</name> <operator pos:start="655:12" pos:end="655:12">=</operator> <literal type="number" pos:start="655:14" pos:end="655:14">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="657:7" pos:end="669:5">else if <condition pos:start="657:15" pos:end="657:23">(<expr pos:start="657:16" pos:end="657:22"><name pos:start="657:16" pos:end="657:17">ro</name> <operator pos:start="657:19" pos:end="657:20">==</operator> <literal type="number" pos:start="657:22" pos:end="657:22">1</literal></expr>)</condition> <block pos:start="657:25" pos:end="669:5">{<block_content pos:start="659:9" pos:end="667:9">

        <if_stmt pos:start="659:9" pos:end="667:9"><if pos:start="659:9" pos:end="667:9">if <condition pos:start="659:12" pos:end="661:49">(<expr pos:start="659:13" pos:end="661:48"><name pos:start="659:13" pos:end="659:16">type</name> <operator pos:start="659:18" pos:end="659:19">!=</operator> <name pos:start="659:21" pos:end="659:27">IF_SCSI</name> <operator pos:start="659:29" pos:end="659:30">&amp;&amp;</operator> <name pos:start="659:32" pos:end="659:35">type</name> <operator pos:start="659:37" pos:end="659:38">!=</operator> <name pos:start="659:40" pos:end="659:48">IF_VIRTIO</name> <operator pos:start="659:50" pos:end="659:51">&amp;&amp;</operator> <name pos:start="659:53" pos:end="659:56">type</name> <operator pos:start="659:58" pos:end="659:59">!=</operator> <name pos:start="659:61" pos:end="659:69">IF_FLOPPY</name> <operator pos:start="659:71" pos:end="659:72">&amp;&amp;</operator>

            <name pos:start="661:13" pos:end="661:16">type</name> <operator pos:start="661:18" pos:end="661:19">!=</operator> <name pos:start="661:21" pos:end="661:27">IF_NONE</name> <operator pos:start="661:29" pos:end="661:30">&amp;&amp;</operator> <name pos:start="661:32" pos:end="661:35">type</name> <operator pos:start="661:37" pos:end="661:38">!=</operator> <name pos:start="661:40" pos:end="661:48">IF_PFLASH</name></expr>)</condition> <block pos:start="661:51" pos:end="667:9">{<block_content pos:start="663:13" pos:end="665:21">

            <expr_stmt pos:start="663:13" pos:end="663:68"><expr pos:start="663:13" pos:end="663:67"><call pos:start="663:13" pos:end="663:67"><name pos:start="663:13" pos:end="663:24">error_report</name><argument_list pos:start="663:25" pos:end="663:67">(<argument pos:start="663:26" pos:end="663:66"><expr pos:start="663:26" pos:end="663:66"><literal type="string" pos:start="663:26" pos:end="663:66">"readonly not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="665:13" pos:end="665:21">goto <name pos:start="665:18" pos:end="665:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="673:5" pos:end="673:39"><expr pos:start="673:5" pos:end="673:38"><name pos:start="673:5" pos:end="673:14">bdrv_flags</name> <operator pos:start="673:16" pos:end="673:17">|=</operator> <ternary pos:start="673:19" pos:end="673:38"><condition pos:start="673:19" pos:end="673:22"><expr pos:start="673:19" pos:end="673:20"><name pos:start="673:19" pos:end="673:20">ro</name></expr> ?</condition><then pos:start="673:24" pos:end="673:24"> <expr pos:start="673:24" pos:end="673:24"><literal type="number" pos:start="673:24" pos:end="673:24">0</literal></expr> </then><else pos:start="673:26" pos:end="673:38">: <expr pos:start="673:28" pos:end="673:38"><name pos:start="673:28" pos:end="673:38">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="677:5" pos:end="677:56"><expr pos:start="677:5" pos:end="677:55"><name pos:start="677:5" pos:end="677:7">ret</name> <operator pos:start="677:9" pos:end="677:9">=</operator> <call pos:start="677:11" pos:end="677:55"><name pos:start="677:11" pos:end="677:19">bdrv_open</name><argument_list pos:start="677:20" pos:end="677:55">(<argument pos:start="677:21" pos:end="677:31"><expr pos:start="677:21" pos:end="677:31"><name pos:start="677:21" pos:end="677:31"><name pos:start="677:21" pos:end="677:25">dinfo</name><operator pos:start="677:26" pos:end="677:27">-&gt;</operator><name pos:start="677:28" pos:end="677:31">bdrv</name></name></expr></argument>, <argument pos:start="677:34" pos:end="677:37"><expr pos:start="677:34" pos:end="677:37"><name pos:start="677:34" pos:end="677:37">file</name></expr></argument>, <argument pos:start="677:40" pos:end="677:49"><expr pos:start="677:40" pos:end="677:49"><name pos:start="677:40" pos:end="677:49">bdrv_flags</name></expr></argument>, <argument pos:start="677:52" pos:end="677:54"><expr pos:start="677:52" pos:end="677:54"><name pos:start="677:52" pos:end="677:54">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="679:5" pos:end="687:5"><if pos:start="679:5" pos:end="687:5">if <condition pos:start="679:8" pos:end="679:16">(<expr pos:start="679:9" pos:end="679:15"><name pos:start="679:9" pos:end="679:11">ret</name> <operator pos:start="679:13" pos:end="679:13">&lt;</operator> <literal type="number" pos:start="679:15" pos:end="679:15">0</literal></expr>)</condition> <block pos:start="679:18" pos:end="687:5">{<block_content pos:start="681:9" pos:end="685:17">

        <expr_stmt pos:start="681:9" pos:end="683:43"><expr pos:start="681:9" pos:end="683:42"><call pos:start="681:9" pos:end="683:42"><name pos:start="681:9" pos:end="681:20">error_report</name><argument_list pos:start="681:21" pos:end="683:42">(<argument pos:start="681:22" pos:end="681:55"><expr pos:start="681:22" pos:end="681:55"><literal type="string" pos:start="681:22" pos:end="681:55">"could not open disk image %s: %s"</literal></expr></argument>,

                     <argument pos:start="683:22" pos:end="683:25"><expr pos:start="683:22" pos:end="683:25"><name pos:start="683:22" pos:end="683:25">file</name></expr></argument>, <argument pos:start="683:28" pos:end="683:41"><expr pos:start="683:28" pos:end="683:41"><call pos:start="683:28" pos:end="683:41"><name pos:start="683:28" pos:end="683:35">strerror</name><argument_list pos:start="683:36" pos:end="683:41">(<argument pos:start="683:37" pos:end="683:40"><expr pos:start="683:37" pos:end="683:40"><operator pos:start="683:37" pos:end="683:37">-</operator><name pos:start="683:38" pos:end="683:40">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="685:9" pos:end="685:17">goto <name pos:start="685:14" pos:end="685:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="691:5" pos:end="693:22"><if pos:start="691:5" pos:end="693:22">if <condition pos:start="691:8" pos:end="691:39">(<expr pos:start="691:9" pos:end="691:38"><call pos:start="691:9" pos:end="691:38"><name pos:start="691:9" pos:end="691:25">bdrv_key_required</name><argument_list pos:start="691:26" pos:end="691:38">(<argument pos:start="691:27" pos:end="691:37"><expr pos:start="691:27" pos:end="691:37"><name pos:start="691:27" pos:end="691:37"><name pos:start="691:27" pos:end="691:31">dinfo</name><operator pos:start="691:32" pos:end="691:33">-&gt;</operator><name pos:start="691:34" pos:end="691:37">bdrv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="693:9" pos:end="693:22"><block_content pos:start="693:9" pos:end="693:22">

        <expr_stmt pos:start="693:9" pos:end="693:22"><expr pos:start="693:9" pos:end="693:21"><name pos:start="693:9" pos:end="693:17">autostart</name> <operator pos:start="693:19" pos:end="693:19">=</operator> <literal type="number" pos:start="693:21" pos:end="693:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="695:5" pos:end="695:17">return <expr pos:start="695:12" pos:end="695:16"><name pos:start="695:12" pos:end="695:16">dinfo</name></expr>;</return>



<label pos:start="699:1" pos:end="699:4"><name pos:start="699:1" pos:end="699:3">err</name>:</label>

    <expr_stmt pos:start="701:5" pos:end="701:29"><expr pos:start="701:5" pos:end="701:28"><call pos:start="701:5" pos:end="701:28"><name pos:start="701:5" pos:end="701:15">bdrv_delete</name><argument_list pos:start="701:16" pos:end="701:28">(<argument pos:start="701:17" pos:end="701:27"><expr pos:start="701:17" pos:end="701:27"><name pos:start="701:17" pos:end="701:27"><name pos:start="701:17" pos:end="701:21">dinfo</name><operator pos:start="701:22" pos:end="701:23">-&gt;</operator><name pos:start="701:24" pos:end="701:27">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="703:5" pos:end="703:22"><expr pos:start="703:5" pos:end="703:21"><call pos:start="703:5" pos:end="703:21"><name pos:start="703:5" pos:end="703:10">g_free</name><argument_list pos:start="703:11" pos:end="703:21">(<argument pos:start="703:12" pos:end="703:20"><expr pos:start="703:12" pos:end="703:20"><name pos:start="703:12" pos:end="703:20"><name pos:start="703:12" pos:end="703:16">dinfo</name><operator pos:start="703:17" pos:end="703:18">-&gt;</operator><name pos:start="703:19" pos:end="703:20">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="705:5" pos:end="705:40"><expr pos:start="705:5" pos:end="705:39"><call pos:start="705:5" pos:end="705:39"><name pos:start="705:5" pos:end="705:17">QTAILQ_REMOVE</name><argument_list pos:start="705:18" pos:end="705:39">(<argument pos:start="705:19" pos:end="705:25"><expr pos:start="705:19" pos:end="705:25"><operator pos:start="705:19" pos:end="705:19">&amp;</operator><name pos:start="705:20" pos:end="705:25">drives</name></expr></argument>, <argument pos:start="705:28" pos:end="705:32"><expr pos:start="705:28" pos:end="705:32"><name pos:start="705:28" pos:end="705:32">dinfo</name></expr></argument>, <argument pos:start="705:35" pos:end="705:38"><expr pos:start="705:35" pos:end="705:38"><name pos:start="705:35" pos:end="705:38">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="707:5" pos:end="707:18"><expr pos:start="707:5" pos:end="707:17"><call pos:start="707:5" pos:end="707:17"><name pos:start="707:5" pos:end="707:10">g_free</name><argument_list pos:start="707:11" pos:end="707:17">(<argument pos:start="707:12" pos:end="707:16"><expr pos:start="707:12" pos:end="707:16"><name pos:start="707:12" pos:end="707:16">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="709:5" pos:end="709:16">return <expr pos:start="709:12" pos:end="709:15"><name pos:start="709:12" pos:end="709:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
