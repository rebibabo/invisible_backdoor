<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16194.c" pos:tabs="8"><function pos:start="1:1" pos:end="409:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">mips_malta_init</name> <parameter_list pos:start="1:22" pos:end="7:73">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:32">ram_addr_t</name></type> <name pos:start="1:34" pos:end="1:41">ram_size</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:45"><decl pos:start="3:23" pos:end="3:45"><type pos:start="3:23" pos:end="3:45"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:32">char</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:45">boot_device</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:49"><decl pos:start="5:23" pos:end="5:49"><type pos:start="5:23" pos:end="5:49"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:32">char</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:49">kernel_filename</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:77"><decl pos:start="5:52" pos:end="5:77"><type pos:start="5:52" pos:end="5:77"><specifier pos:start="5:52" pos:end="5:56">const</specifier> <name pos:start="5:58" pos:end="5:61">char</name> <modifier pos:start="5:63" pos:end="5:63">*</modifier></type><name pos:start="5:64" pos:end="5:77">kernel_cmdline</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:49"><decl pos:start="7:23" pos:end="7:49"><type pos:start="7:23" pos:end="7:49"><specifier pos:start="7:23" pos:end="7:27">const</specifier> <name pos:start="7:29" pos:end="7:32">char</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:49">initrd_filename</name></decl></parameter>, <parameter pos:start="7:52" pos:end="7:72"><decl pos:start="7:52" pos:end="7:72"><type pos:start="7:52" pos:end="7:72"><specifier pos:start="7:52" pos:end="7:56">const</specifier> <name pos:start="7:58" pos:end="7:61">char</name> <modifier pos:start="7:63" pos:end="7:63">*</modifier></type><name pos:start="7:64" pos:end="7:72">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="409:1">{<block_content pos:start="11:5" pos:end="407:5">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:25">ram_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:26">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:15">target_long</name></type> <name pos:start="17:17" pos:end="17:25">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:24">kernel_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">PCIBus</name> <modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:13">ISADevice</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:22">isa_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">CPUState</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">RTCState</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:23">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">fdctrl_t</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:31">floppy_controller</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:30"><type pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:18">MaltaFPGAState</name> <modifier pos:start="31:20" pos:end="31:20">*</modifier></type><name pos:start="31:21" pos:end="31:30">malta_fpga</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:20"><decl pos:start="35:5" pos:end="35:19"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:19">piix4_devfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:24"><decl pos:start="37:5" pos:end="37:23"><type pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:11">uint8_t</name> <modifier pos:start="37:13" pos:end="37:13">*</modifier></type><name pos:start="37:14" pos:end="37:23">eeprom_buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:19"><decl pos:start="39:5" pos:end="39:18"><type pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:11">i2c_bus</name> <modifier pos:start="39:13" pos:end="39:13">*</modifier></type><name pos:start="39:14" pos:end="39:18">smbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:10"><decl pos:start="41:5" pos:end="41:9"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:21"><decl pos:start="43:5" pos:end="43:20"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">DriveInfo</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:46"><decl pos:start="45:5" pos:end="45:45"><type pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:13">DriveInfo</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier></type><name pos:start="45:16" pos:end="45:45"><name pos:start="45:16" pos:end="45:17">hd</name><index pos:start="45:18" pos:end="45:45">[<expr pos:start="45:19" pos:end="45:44"><name pos:start="45:19" pos:end="45:29">MAX_IDE_BUS</name> <operator pos:start="45:31" pos:end="45:31">*</operator> <name pos:start="45:33" pos:end="45:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:26"><decl pos:start="47:5" pos:end="47:25"><type pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:13">DriveInfo</name> <modifier pos:start="47:15" pos:end="47:15">*</modifier></type><name pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:17">fd</name><index pos:start="47:18" pos:end="47:25">[<expr pos:start="47:19" pos:end="47:24"><name pos:start="47:19" pos:end="47:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:19"><decl pos:start="49:5" pos:end="49:18"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:14">fl_idx</name> <init pos:start="49:16" pos:end="49:18">= <expr pos:start="49:18" pos:end="49:18"><literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:23"><decl pos:start="51:5" pos:end="51:22"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:18">fl_sectors</name> <init pos:start="51:20" pos:end="51:22">= <expr pos:start="51:22" pos:end="51:22"><literal type="number" pos:start="51:22" pos:end="51:22">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:74">/* Make sure the first 3 serial ports are associated with a device. */</comment>

    <for pos:start="57:5" pos:end="69:5">for<control pos:start="57:8" pos:end="57:26">(<init pos:start="57:9" pos:end="57:14"><expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:9">i</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <literal type="number" pos:start="57:13" pos:end="57:13">0</literal></expr>;</init> <condition pos:start="57:16" pos:end="57:21"><expr pos:start="57:16" pos:end="57:20"><name pos:start="57:16" pos:end="57:16">i</name> <operator pos:start="57:18" pos:end="57:18">&lt;</operator> <literal type="number" pos:start="57:20" pos:end="57:20">3</literal></expr>;</condition> <incr pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:23">i</name><operator pos:start="57:24" pos:end="57:25">++</operator></expr></incr>)</control> <block pos:start="57:28" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:9">

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:27">(<expr pos:start="59:13" pos:end="59:26"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:26"><name pos:start="59:14" pos:end="59:23">serial_hds</name><index pos:start="59:24" pos:end="59:26">[<expr pos:start="59:25" pos:end="59:25"><name pos:start="59:25" pos:end="59:25">i</name></expr>]</index></name></expr>)</condition> <block pos:start="59:29" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:63">

            <decl_stmt pos:start="61:13" pos:end="61:27"><decl pos:start="61:13" pos:end="61:26"><type pos:start="61:13" pos:end="61:16"><name pos:start="61:13" pos:end="61:16">char</name></type> <name pos:start="61:18" pos:end="61:26"><name pos:start="61:18" pos:end="61:22">label</name><index pos:start="61:23" pos:end="61:26">[<expr pos:start="61:24" pos:end="61:25"><literal type="number" pos:start="61:24" pos:end="61:25">32</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:58"><expr pos:start="63:13" pos:end="63:57"><call pos:start="63:13" pos:end="63:57"><name pos:start="63:13" pos:end="63:20">snprintf</name><argument_list pos:start="63:21" pos:end="63:57">(<argument pos:start="63:22" pos:end="63:26"><expr pos:start="63:22" pos:end="63:26"><name pos:start="63:22" pos:end="63:26">label</name></expr></argument>, <argument pos:start="63:29" pos:end="63:41"><expr pos:start="63:29" pos:end="63:41"><sizeof pos:start="63:29" pos:end="63:41">sizeof<argument_list pos:start="63:35" pos:end="63:41">(<argument pos:start="63:36" pos:end="63:40"><expr pos:start="63:36" pos:end="63:40"><name pos:start="63:36" pos:end="63:40">label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="63:44" pos:end="63:53"><expr pos:start="63:44" pos:end="63:53"><literal type="string" pos:start="63:44" pos:end="63:53">"serial%d"</literal></expr></argument>, <argument pos:start="63:56" pos:end="63:56"><expr pos:start="63:56" pos:end="63:56"><name pos:start="63:56" pos:end="63:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:63"><expr pos:start="65:13" pos:end="65:62"><name pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:22">serial_hds</name><index pos:start="65:23" pos:end="65:25">[<expr pos:start="65:24" pos:end="65:24"><name pos:start="65:24" pos:end="65:24">i</name></expr>]</index></name> <operator pos:start="65:27" pos:end="65:27">=</operator> <call pos:start="65:29" pos:end="65:62"><name pos:start="65:29" pos:end="65:41">qemu_chr_open</name><argument_list pos:start="65:42" pos:end="65:62">(<argument pos:start="65:43" pos:end="65:47"><expr pos:start="65:43" pos:end="65:47"><name pos:start="65:43" pos:end="65:47">label</name></expr></argument>, <argument pos:start="65:50" pos:end="65:55"><expr pos:start="65:50" pos:end="65:55"><literal type="string" pos:start="65:50" pos:end="65:55">"null"</literal></expr></argument>, <argument pos:start="65:58" pos:end="65:61"><expr pos:start="65:58" pos:end="65:61"><name pos:start="65:58" pos:end="65:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="73:5" pos:end="73:19">/* init CPUs */</comment>

    <if_stmt pos:start="75:5" pos:end="87:5"><if pos:start="75:5" pos:end="87:5">if <condition pos:start="75:8" pos:end="75:26">(<expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:17">cpu_model</name> <operator pos:start="75:19" pos:end="75:20">==</operator> <name pos:start="75:22" pos:end="75:25">NULL</name></expr>)</condition> <block pos:start="75:28" pos:end="87:5">{<block_content pos:start="79:9" pos:end="86:0">

<cpp:ifdef pos:start="77:1" pos:end="77:20">#<cpp:directive pos:start="77:2" pos:end="77:6">ifdef</cpp:directive> <name pos:start="77:8" pos:end="77:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="79:9" pos:end="82:0"><expr pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:17">cpu_model</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <literal type="string" pos:start="79:21" pos:end="79:26">"20Kc"</literal></expr>;</expr_stmt>

<cpp:else pos:start="81:1" pos:end="81:5">#<cpp:directive pos:start="81:2" pos:end="81:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="83:9" pos:end="86:0"><expr pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:17">cpu_model</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <literal type="string" pos:start="83:21" pos:end="83:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:30"><expr pos:start="89:5" pos:end="89:29"><name pos:start="89:5" pos:end="89:7">env</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:29"><name pos:start="89:11" pos:end="89:18">cpu_init</name><argument_list pos:start="89:19" pos:end="89:29">(<argument pos:start="89:20" pos:end="89:28"><expr pos:start="89:20" pos:end="89:28"><name pos:start="89:20" pos:end="89:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:13">(<expr pos:start="91:9" pos:end="91:12"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:12">env</name></expr>)</condition> <block pos:start="91:15" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:16">

        <expr_stmt pos:start="93:9" pos:end="93:59"><expr pos:start="93:9" pos:end="93:58"><call pos:start="93:9" pos:end="93:58"><name pos:start="93:9" pos:end="93:15">fprintf</name><argument_list pos:start="93:16" pos:end="93:58">(<argument pos:start="93:17" pos:end="93:22"><expr pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:22">stderr</name></expr></argument>, <argument pos:start="93:25" pos:end="93:57"><expr pos:start="93:25" pos:end="93:57"><literal type="string" pos:start="93:25" pos:end="93:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:16"><expr pos:start="95:9" pos:end="95:15"><call pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:12">exit</name><argument_list pos:start="95:13" pos:end="95:15">(<argument pos:start="95:14" pos:end="95:14"><expr pos:start="95:14" pos:end="95:14"><literal type="number" pos:start="95:14" pos:end="95:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:45"><expr pos:start="99:5" pos:end="99:44"><call pos:start="99:5" pos:end="99:44"><name pos:start="99:5" pos:end="99:23">qemu_register_reset</name><argument_list pos:start="99:24" pos:end="99:44">(<argument pos:start="99:25" pos:end="99:38"><expr pos:start="99:25" pos:end="99:38"><name pos:start="99:25" pos:end="99:38">main_cpu_reset</name></expr></argument>, <argument pos:start="99:41" pos:end="99:43"><expr pos:start="99:41" pos:end="99:43"><name pos:start="99:41" pos:end="99:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:22">/* allocate RAM */</comment>

    <if_stmt pos:start="105:5" pos:end="115:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:31">(<expr pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:16">ram_size</name> <operator pos:start="105:18" pos:end="105:18">&gt;</operator> <operator pos:start="105:20" pos:end="105:20">(</operator><literal type="number" pos:start="105:21" pos:end="105:23">256</literal> <operator pos:start="105:25" pos:end="105:26">&lt;&lt;</operator> <literal type="number" pos:start="105:28" pos:end="105:29">20</literal><operator pos:start="105:30" pos:end="105:30">)</operator></expr>)</condition> <block pos:start="105:33" pos:end="115:5">{<block_content pos:start="107:9" pos:end="113:16">

        <expr_stmt pos:start="107:9" pos:end="111:54"><expr pos:start="107:9" pos:end="111:53"><call pos:start="107:9" pos:end="111:53"><name pos:start="107:9" pos:end="107:15">fprintf</name><argument_list pos:start="107:16" pos:end="111:53">(<argument pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:22">stderr</name></expr></argument>,

                <argument pos:start="109:17" pos:end="109:81"><expr pos:start="109:17" pos:end="109:81"><literal type="string" pos:start="109:17" pos:end="109:81">"qemu: Too much memory for this machine: %d MB, maximum 256 MB\n"</literal></expr></argument>,

                <argument pos:start="111:17" pos:end="111:52"><expr pos:start="111:17" pos:end="111:52"><operator pos:start="111:17" pos:end="111:17">(</operator><operator pos:start="111:18" pos:end="111:18">(</operator><name pos:start="111:19" pos:end="111:26">unsigned</name> <name pos:start="111:28" pos:end="111:30">int</name><operator pos:start="111:31" pos:end="111:31">)</operator><name pos:start="111:32" pos:end="111:39">ram_size</name> <operator pos:start="111:41" pos:end="111:41">/</operator> <operator pos:start="111:43" pos:end="111:43">(</operator><literal type="number" pos:start="111:44" pos:end="111:44">1</literal> <operator pos:start="111:46" pos:end="111:47">&lt;&lt;</operator> <literal type="number" pos:start="111:49" pos:end="111:50">20</literal><operator pos:start="111:51" pos:end="111:51">)</operator><operator pos:start="111:52" pos:end="111:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:16"><expr pos:start="113:9" pos:end="113:15"><call pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:12">exit</name><argument_list pos:start="113:13" pos:end="113:15">(<argument pos:start="113:14" pos:end="113:14"><expr pos:start="113:14" pos:end="113:14"><literal type="number" pos:start="113:14" pos:end="113:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:42"><expr pos:start="117:5" pos:end="117:41"><name pos:start="117:5" pos:end="117:14">ram_offset</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <call pos:start="117:18" pos:end="117:41"><name pos:start="117:18" pos:end="117:31">qemu_ram_alloc</name><argument_list pos:start="117:32" pos:end="117:41">(<argument pos:start="117:33" pos:end="117:40"><expr pos:start="117:33" pos:end="117:40"><name pos:start="117:33" pos:end="117:40">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:44"><expr pos:start="119:5" pos:end="119:43"><name pos:start="119:5" pos:end="119:15">bios_offset</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <call pos:start="119:19" pos:end="119:43"><name pos:start="119:19" pos:end="119:32">qemu_ram_alloc</name><argument_list pos:start="119:33" pos:end="119:43">(<argument pos:start="119:34" pos:end="119:42"><expr pos:start="119:34" pos:end="119:42"><name pos:start="119:34" pos:end="119:42">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="125:5" pos:end="125:71"><expr pos:start="125:5" pos:end="125:70"><call pos:start="125:5" pos:end="125:70"><name pos:start="125:5" pos:end="125:32">cpu_register_physical_memory</name><argument_list pos:start="125:33" pos:end="125:70">(<argument pos:start="125:34" pos:end="125:34"><expr pos:start="125:34" pos:end="125:34"><literal type="number" pos:start="125:34" pos:end="125:34">0</literal></expr></argument>, <argument pos:start="125:37" pos:end="125:44"><expr pos:start="125:37" pos:end="125:44"><name pos:start="125:37" pos:end="125:44">ram_size</name></expr></argument>, <argument pos:start="125:47" pos:end="125:69"><expr pos:start="125:47" pos:end="125:69"><name pos:start="125:47" pos:end="125:56">ram_offset</name> <operator pos:start="125:58" pos:end="125:58">|</operator> <name pos:start="125:60" pos:end="125:69">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:71">/* Map the bios at two physical locations, as on the real board. */</comment>

    <expr_stmt pos:start="131:5" pos:end="133:70"><expr pos:start="131:5" pos:end="133:69"><call pos:start="131:5" pos:end="133:69"><name pos:start="131:5" pos:end="131:32">cpu_register_physical_memory</name><argument_list pos:start="131:33" pos:end="133:69">(<argument pos:start="131:34" pos:end="131:45"><expr pos:start="131:34" pos:end="131:45"><literal type="number" pos:start="131:34" pos:end="131:45">0x1e000000LL</literal></expr></argument>,

                                 <argument pos:start="133:34" pos:end="133:42"><expr pos:start="133:34" pos:end="133:42"><name pos:start="133:34" pos:end="133:42">BIOS_SIZE</name></expr></argument>, <argument pos:start="133:45" pos:end="133:68"><expr pos:start="133:45" pos:end="133:68"><name pos:start="133:45" pos:end="133:55">bios_offset</name> <operator pos:start="133:57" pos:end="133:57">|</operator> <name pos:start="133:59" pos:end="133:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="137:70"><expr pos:start="135:5" pos:end="137:69"><call pos:start="135:5" pos:end="137:69"><name pos:start="135:5" pos:end="135:32">cpu_register_physical_memory</name><argument_list pos:start="135:33" pos:end="137:69">(<argument pos:start="135:34" pos:end="135:45"><expr pos:start="135:34" pos:end="135:45"><literal type="number" pos:start="135:34" pos:end="135:45">0x1fc00000LL</literal></expr></argument>,

                                 <argument pos:start="137:34" pos:end="137:42"><expr pos:start="137:34" pos:end="137:42"><name pos:start="137:34" pos:end="137:42">BIOS_SIZE</name></expr></argument>, <argument pos:start="137:45" pos:end="137:68"><expr pos:start="137:45" pos:end="137:68"><name pos:start="137:45" pos:end="137:55">bios_offset</name> <operator pos:start="137:57" pos:end="137:57">|</operator> <name pos:start="137:59" pos:end="137:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:14">/* FPGA */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:75"><expr pos:start="143:5" pos:end="143:74"><name pos:start="143:5" pos:end="143:14">malta_fpga</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:74"><name pos:start="143:18" pos:end="143:32">malta_fpga_init</name><argument_list pos:start="143:33" pos:end="143:74">(<argument pos:start="143:34" pos:end="143:45"><expr pos:start="143:34" pos:end="143:45"><literal type="number" pos:start="143:34" pos:end="143:45">0x1f000000LL</literal></expr></argument>, <argument pos:start="143:48" pos:end="143:58"><expr pos:start="143:48" pos:end="143:58"><name pos:start="143:48" pos:end="143:58"><name pos:start="143:48" pos:end="143:50">env</name><operator pos:start="143:51" pos:end="143:52">-&gt;</operator><name pos:start="143:53" pos:end="143:55">irq</name><index pos:start="143:56" pos:end="143:58">[<expr pos:start="143:57" pos:end="143:57"><literal type="number" pos:start="143:57" pos:end="143:57">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="143:61" pos:end="143:73"><expr pos:start="143:61" pos:end="143:73"><name pos:start="143:61" pos:end="143:73"><name pos:start="143:61" pos:end="143:70">serial_hds</name><index pos:start="143:71" pos:end="143:73">[<expr pos:start="143:72" pos:end="143:72"><literal type="number" pos:start="143:72" pos:end="143:72">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:78">/* Load firmware in flash / BIOS unless we boot directly into a kernel. */</comment>

    <if_stmt pos:start="149:5" pos:end="259:5"><if pos:start="149:5" pos:end="167:5">if <condition pos:start="149:8" pos:end="149:24">(<expr pos:start="149:9" pos:end="149:23"><name pos:start="149:9" pos:end="149:23">kernel_filename</name></expr>)</condition> <block pos:start="149:26" pos:end="167:5">{<block_content pos:start="153:9" pos:end="165:75">

        <comment type="block" pos:start="151:9" pos:end="151:61">/* Write a small bootloader to the flash location. */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:41"><expr pos:start="153:9" pos:end="153:40"><name pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:20">loaderparams</name><operator pos:start="153:21" pos:end="153:21">.</operator><name pos:start="153:22" pos:end="153:29">ram_size</name></name> <operator pos:start="153:31" pos:end="153:31">=</operator> <name pos:start="153:33" pos:end="153:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:55"><expr pos:start="155:9" pos:end="155:54"><name pos:start="155:9" pos:end="155:36"><name pos:start="155:9" pos:end="155:20">loaderparams</name><operator pos:start="155:21" pos:end="155:21">.</operator><name pos:start="155:22" pos:end="155:36">kernel_filename</name></name> <operator pos:start="155:38" pos:end="155:38">=</operator> <name pos:start="155:40" pos:end="155:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:53"><expr pos:start="157:9" pos:end="157:52"><name pos:start="157:9" pos:end="157:35"><name pos:start="157:9" pos:end="157:20">loaderparams</name><operator pos:start="157:21" pos:end="157:21">.</operator><name pos:start="157:22" pos:end="157:35">kernel_cmdline</name></name> <operator pos:start="157:37" pos:end="157:37">=</operator> <name pos:start="157:39" pos:end="157:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:55"><expr pos:start="159:9" pos:end="159:54"><name pos:start="159:9" pos:end="159:36"><name pos:start="159:9" pos:end="159:20">loaderparams</name><operator pos:start="159:21" pos:end="159:21">.</operator><name pos:start="159:22" pos:end="159:36">initrd_filename</name></name> <operator pos:start="159:38" pos:end="159:38">=</operator> <name pos:start="159:40" pos:end="159:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:40"><expr pos:start="161:9" pos:end="161:39"><name pos:start="161:9" pos:end="161:20">kernel_entry</name> <operator pos:start="161:22" pos:end="161:22">=</operator> <call pos:start="161:24" pos:end="161:39"><name pos:start="161:24" pos:end="161:34">load_kernel</name><argument_list pos:start="161:35" pos:end="161:39">(<argument pos:start="161:36" pos:end="161:38"><expr pos:start="161:36" pos:end="161:38"><name pos:start="161:36" pos:end="161:38">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:66"><expr pos:start="163:9" pos:end="163:65"><name pos:start="163:9" pos:end="163:23"><name pos:start="163:9" pos:end="163:11">env</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:23">CP0_Status</name></name> <operator pos:start="163:25" pos:end="163:26">&amp;=</operator> <operator pos:start="163:28" pos:end="163:28">~</operator><operator pos:start="163:29" pos:end="163:29">(</operator><operator pos:start="163:30" pos:end="163:30">(</operator><literal type="number" pos:start="163:31" pos:end="163:31">1</literal> <operator pos:start="163:33" pos:end="163:34">&lt;&lt;</operator> <name pos:start="163:36" pos:end="163:44">CP0St_BEV</name><operator pos:start="163:45" pos:end="163:45">)</operator> <operator pos:start="163:47" pos:end="163:47">|</operator> <operator pos:start="163:49" pos:end="163:49">(</operator><literal type="number" pos:start="163:50" pos:end="163:50">1</literal> <operator pos:start="163:52" pos:end="163:53">&lt;&lt;</operator> <name pos:start="163:55" pos:end="163:63">CP0St_ERL</name><operator pos:start="163:64" pos:end="163:64">)</operator><operator pos:start="163:65" pos:end="163:65">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:75"><expr pos:start="165:9" pos:end="165:74"><call pos:start="165:9" pos:end="165:74"><name pos:start="165:9" pos:end="165:24">write_bootloader</name><argument_list pos:start="165:25" pos:end="165:74">(<argument pos:start="165:26" pos:end="165:28"><expr pos:start="165:26" pos:end="165:28"><name pos:start="165:26" pos:end="165:28">env</name></expr></argument>, <argument pos:start="165:31" pos:end="165:59"><expr pos:start="165:31" pos:end="165:59"><call pos:start="165:31" pos:end="165:59"><name pos:start="165:31" pos:end="165:46">qemu_get_ram_ptr</name><argument_list pos:start="165:47" pos:end="165:59">(<argument pos:start="165:48" pos:end="165:58"><expr pos:start="165:48" pos:end="165:58"><name pos:start="165:48" pos:end="165:58">bios_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="165:62" pos:end="165:73"><expr pos:start="165:62" pos:end="165:73"><name pos:start="165:62" pos:end="165:73">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="167:7" pos:end="259:5">else <block pos:start="167:12" pos:end="259:5">{<block_content pos:start="169:9" pos:end="258:0">

        <expr_stmt pos:start="169:9" pos:end="169:48"><expr pos:start="169:9" pos:end="169:47"><name pos:start="169:9" pos:end="169:13">dinfo</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <call pos:start="169:17" pos:end="169:47"><name pos:start="169:17" pos:end="169:25">drive_get</name><argument_list pos:start="169:26" pos:end="169:47">(<argument pos:start="169:27" pos:end="169:35"><expr pos:start="169:27" pos:end="169:35"><name pos:start="169:27" pos:end="169:35">IF_PFLASH</name></expr></argument>, <argument pos:start="169:38" pos:end="169:38"><expr pos:start="169:38" pos:end="169:38"><literal type="number" pos:start="169:38" pos:end="169:38">0</literal></expr></argument>, <argument pos:start="169:41" pos:end="169:46"><expr pos:start="169:41" pos:end="169:46"><name pos:start="169:41" pos:end="169:46">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="242:0"><if pos:start="171:9" pos:end="199:9">if <condition pos:start="171:12" pos:end="171:18">(<expr pos:start="171:13" pos:end="171:17"><name pos:start="171:13" pos:end="171:17">dinfo</name></expr>)</condition> <block pos:start="171:20" pos:end="199:9">{<block_content pos:start="175:13" pos:end="197:21">

            <comment type="block" pos:start="173:13" pos:end="173:43">/* Load firmware from flash. */</comment>

            <expr_stmt pos:start="175:13" pos:end="175:33"><expr pos:start="175:13" pos:end="175:32"><name pos:start="175:13" pos:end="175:21">bios_size</name> <operator pos:start="175:23" pos:end="175:23">=</operator> <literal type="number" pos:start="175:25" pos:end="175:32">0x400000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="180:0"><expr pos:start="177:13" pos:end="177:40"><name pos:start="177:13" pos:end="177:22">fl_sectors</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <name pos:start="177:26" pos:end="177:34">bios_size</name> <operator pos:start="177:36" pos:end="177:37">&gt;&gt;</operator> <literal type="number" pos:start="177:39" pos:end="177:40">16</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="179:1" pos:end="179:23">#<cpp:directive pos:start="179:2" pos:end="179:6">ifdef</cpp:directive> <name pos:start="179:8" pos:end="179:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

            <expr_stmt pos:start="181:13" pos:end="190:0"><expr pos:start="181:13" pos:end="187:65"><call pos:start="181:13" pos:end="187:65"><name pos:start="181:13" pos:end="181:18">printf</name><argument_list pos:start="181:19" pos:end="187:65">(<argument pos:start="181:20" pos:end="183:55"><expr pos:start="181:20" pos:end="183:55"><literal type="string" pos:start="181:20" pos:end="181:53">"Register parallel flash %d size "</literal> <name pos:start="181:55" pos:end="181:67">TARGET_FMT_lx</name> <literal type="string" pos:start="181:69" pos:end="181:74">" at "</literal>

                   <literal type="string" pos:start="183:20" pos:end="183:55">"offset %08lx addr %08llx '%s' %x\n"</literal></expr></argument>,

                   <argument pos:start="185:20" pos:end="185:25"><expr pos:start="185:20" pos:end="185:25"><name pos:start="185:20" pos:end="185:25">fl_idx</name></expr></argument>, <argument pos:start="185:28" pos:end="185:36"><expr pos:start="185:28" pos:end="185:36"><name pos:start="185:28" pos:end="185:36">bios_size</name></expr></argument>, <argument pos:start="185:39" pos:end="185:49"><expr pos:start="185:39" pos:end="185:49"><name pos:start="185:39" pos:end="185:49">bios_offset</name></expr></argument>, <argument pos:start="185:52" pos:end="185:63"><expr pos:start="185:52" pos:end="185:63"><literal type="number" pos:start="185:52" pos:end="185:63">0x1e000000LL</literal></expr></argument>,

                   <argument pos:start="187:20" pos:end="187:52"><expr pos:start="187:20" pos:end="187:52"><call pos:start="187:20" pos:end="187:52"><name pos:start="187:20" pos:end="187:39">bdrv_get_device_name</name><argument_list pos:start="187:40" pos:end="187:52">(<argument pos:start="187:41" pos:end="187:51"><expr pos:start="187:41" pos:end="187:51"><name pos:start="187:41" pos:end="187:51"><name pos:start="187:41" pos:end="187:45">dinfo</name><operator pos:start="187:46" pos:end="187:47">-&gt;</operator><name pos:start="187:48" pos:end="187:51">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="187:55" pos:end="187:64"><expr pos:start="187:55" pos:end="187:64"><name pos:start="187:55" pos:end="187:64">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="191:13" pos:end="195:69"><expr pos:start="191:13" pos:end="195:68"><call pos:start="191:13" pos:end="195:68"><name pos:start="191:13" pos:end="191:33">pflash_cfi01_register</name><argument_list pos:start="191:34" pos:end="195:68">(<argument pos:start="191:35" pos:end="191:46"><expr pos:start="191:35" pos:end="191:46"><literal type="number" pos:start="191:35" pos:end="191:46">0x1e000000LL</literal></expr></argument>, <argument pos:start="191:49" pos:end="191:59"><expr pos:start="191:49" pos:end="191:59"><name pos:start="191:49" pos:end="191:59">bios_offset</name></expr></argument>,

                                  <argument pos:start="193:35" pos:end="193:45"><expr pos:start="193:35" pos:end="193:45"><name pos:start="193:35" pos:end="193:45"><name pos:start="193:35" pos:end="193:39">dinfo</name><operator pos:start="193:40" pos:end="193:41">-&gt;</operator><name pos:start="193:42" pos:end="193:45">bdrv</name></name></expr></argument>, <argument pos:start="193:48" pos:end="193:52"><expr pos:start="193:48" pos:end="193:52"><literal type="number" pos:start="193:48" pos:end="193:52">65536</literal></expr></argument>, <argument pos:start="193:55" pos:end="193:64"><expr pos:start="193:55" pos:end="193:64"><name pos:start="193:55" pos:end="193:64">fl_sectors</name></expr></argument>,

                                  <argument pos:start="195:35" pos:end="195:35"><expr pos:start="195:35" pos:end="195:35"><literal type="number" pos:start="195:35" pos:end="195:35">4</literal></expr></argument>, <argument pos:start="195:38" pos:end="195:43"><expr pos:start="195:38" pos:end="195:43"><literal type="number" pos:start="195:38" pos:end="195:43">0x0000</literal></expr></argument>, <argument pos:start="195:46" pos:end="195:51"><expr pos:start="195:46" pos:end="195:51"><literal type="number" pos:start="195:46" pos:end="195:51">0x0000</literal></expr></argument>, <argument pos:start="195:54" pos:end="195:59"><expr pos:start="195:54" pos:end="195:59"><literal type="number" pos:start="195:54" pos:end="195:59">0x0000</literal></expr></argument>, <argument pos:start="195:62" pos:end="195:67"><expr pos:start="195:62" pos:end="195:67"><literal type="number" pos:start="195:62" pos:end="195:67">0x0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:21"><expr pos:start="197:13" pos:end="197:20"><name pos:start="197:13" pos:end="197:18">fl_idx</name><operator pos:start="197:19" pos:end="197:20">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="199:11" pos:end="242:0">else <block pos:start="199:16" pos:end="242:0">{<block_content pos:start="203:13" pos:end="233:13">

            <comment type="block" pos:start="201:13" pos:end="201:36">/* Load a BIOS image. */</comment>

            <if_stmt pos:start="203:13" pos:end="205:42"><if pos:start="203:13" pos:end="205:42">if <condition pos:start="203:16" pos:end="203:34">(<expr pos:start="203:17" pos:end="203:33"><name pos:start="203:17" pos:end="203:25">bios_name</name> <operator pos:start="203:27" pos:end="203:28">==</operator> <name pos:start="203:30" pos:end="203:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="205:17" pos:end="205:42"><block_content pos:start="205:17" pos:end="205:42">

                <expr_stmt pos:start="205:17" pos:end="205:42"><expr pos:start="205:17" pos:end="205:41"><name pos:start="205:17" pos:end="205:25">bios_name</name> <operator pos:start="205:27" pos:end="205:27">=</operator> <name pos:start="205:29" pos:end="205:41">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:70"><expr pos:start="207:13" pos:end="207:69"><name pos:start="207:13" pos:end="207:20">filename</name> <operator pos:start="207:22" pos:end="207:22">=</operator> <call pos:start="207:24" pos:end="207:69"><name pos:start="207:24" pos:end="207:37">qemu_find_file</name><argument_list pos:start="207:38" pos:end="207:69">(<argument pos:start="207:39" pos:end="207:57"><expr pos:start="207:39" pos:end="207:57"><name pos:start="207:39" pos:end="207:57">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="207:60" pos:end="207:68"><expr pos:start="207:60" pos:end="207:68"><name pos:start="207:60" pos:end="207:68">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="209:13" pos:end="221:13"><if pos:start="209:13" pos:end="217:13">if <condition pos:start="209:16" pos:end="209:25">(<expr pos:start="209:17" pos:end="209:24"><name pos:start="209:17" pos:end="209:24">filename</name></expr>)</condition> <block pos:start="209:27" pos:end="217:13">{<block_content pos:start="211:17" pos:end="215:36">

                <expr_stmt pos:start="211:17" pos:end="213:59"><expr pos:start="211:17" pos:end="213:58"><name pos:start="211:17" pos:end="211:25">bios_size</name> <operator pos:start="211:27" pos:end="211:27">=</operator> <call pos:start="211:29" pos:end="213:58"><name pos:start="211:29" pos:end="211:47">load_image_targphys</name><argument_list pos:start="211:48" pos:end="213:58">(<argument pos:start="211:49" pos:end="211:56"><expr pos:start="211:49" pos:end="211:56"><name pos:start="211:49" pos:end="211:56">filename</name></expr></argument>, <argument pos:start="211:59" pos:end="211:70"><expr pos:start="211:59" pos:end="211:70"><literal type="number" pos:start="211:59" pos:end="211:70">0x1fc00000LL</literal></expr></argument>,

                                                <argument pos:start="213:49" pos:end="213:57"><expr pos:start="213:49" pos:end="213:57"><name pos:start="213:49" pos:end="213:57">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:36"><expr pos:start="215:17" pos:end="215:35"><call pos:start="215:17" pos:end="215:35"><name pos:start="215:17" pos:end="215:25">qemu_free</name><argument_list pos:start="215:26" pos:end="215:35">(<argument pos:start="215:27" pos:end="215:34"><expr pos:start="215:27" pos:end="215:34"><name pos:start="215:27" pos:end="215:34">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="217:15" pos:end="221:13">else <block pos:start="217:20" pos:end="221:13">{<block_content pos:start="219:17" pos:end="219:31">

                <expr_stmt pos:start="219:17" pos:end="219:31"><expr pos:start="219:17" pos:end="219:30"><name pos:start="219:17" pos:end="219:25">bios_size</name> <operator pos:start="219:27" pos:end="219:27">=</operator> <operator pos:start="219:29" pos:end="219:29">-</operator><literal type="number" pos:start="219:30" pos:end="219:30">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="223:13" pos:end="233:13"><if pos:start="223:13" pos:end="233:13">if <condition pos:start="223:16" pos:end="223:77">(<expr pos:start="223:17" pos:end="223:76"><operator pos:start="223:17" pos:end="223:17">(</operator><name pos:start="223:18" pos:end="223:45"><name pos:start="223:18" pos:end="223:26">bios_size</name> <argument_list type="generic" pos:start="223:28" pos:end="223:45">&lt; <argument pos:start="223:30" pos:end="223:43"><expr pos:start="223:30" pos:end="223:43"><literal type="number" pos:start="223:30" pos:end="223:30">0</literal> <operator pos:start="223:32" pos:end="223:33">||</operator> <name pos:start="223:35" pos:end="223:43">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="223:47" pos:end="223:55">BIOS_SIZE</name><operator pos:start="223:56" pos:end="223:56">)</operator> <operator pos:start="223:58" pos:end="223:59">&amp;&amp;</operator> <operator pos:start="223:61" pos:end="223:61">!</operator><name pos:start="223:62" pos:end="223:76">kernel_filename</name></expr>)</condition> <block pos:start="223:79" pos:end="233:13">{<block_content pos:start="225:17" pos:end="231:24">

                <expr_stmt pos:start="225:17" pos:end="229:35"><expr pos:start="225:17" pos:end="229:34"><call pos:start="225:17" pos:end="229:34"><name pos:start="225:17" pos:end="225:23">fprintf</name><argument_list pos:start="225:24" pos:end="229:34">(<argument pos:start="225:25" pos:end="225:30"><expr pos:start="225:25" pos:end="225:30"><name pos:start="225:25" pos:end="225:30">stderr</name></expr></argument>,

                        <argument pos:start="227:25" pos:end="227:102"><expr pos:start="227:25" pos:end="227:102"><literal type="string" pos:start="227:25" pos:end="227:102">"qemu: Could not load MIPS bios '%s', and no -kernel argument was specified\n"</literal></expr></argument>,

                        <argument pos:start="229:25" pos:end="229:33"><expr pos:start="229:25" pos:end="229:33"><name pos:start="229:25" pos:end="229:33">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:24"><expr pos:start="231:17" pos:end="231:23"><call pos:start="231:17" pos:end="231:23"><name pos:start="231:17" pos:end="231:20">exit</name><argument_list pos:start="231:21" pos:end="231:23">(<argument pos:start="231:22" pos:end="231:22"><expr pos:start="231:22" pos:end="231:22"><literal type="number" pos:start="231:22" pos:end="231:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="237:9" pos:end="239:59">/* In little endian mode the 32bit words in the bios are swapped,

           a neat trick which allows bi-endian firmware. */</comment>

<cpp:ifndef pos:start="241:1" pos:end="241:30">#<cpp:directive pos:start="241:2" pos:end="241:7">ifndef</cpp:directive> <name pos:start="241:9" pos:end="241:30">TARGET_WORDS_BIGENDIAN</name></cpp:ifndef>

        <block pos:start="243:9" pos:end="258:0">{<block_content pos:start="245:13" pos:end="253:13">

            <decl_stmt pos:start="245:13" pos:end="245:59"><decl pos:start="245:13" pos:end="245:58"><type pos:start="245:13" pos:end="245:22"><name pos:start="245:13" pos:end="245:20">uint32_t</name> <modifier pos:start="245:22" pos:end="245:22">*</modifier></type><name pos:start="245:23" pos:end="245:26">addr</name> <init pos:start="245:28" pos:end="245:58">= <expr pos:start="245:30" pos:end="245:58"><call pos:start="245:30" pos:end="245:58"><name pos:start="245:30" pos:end="245:45">qemu_get_ram_ptr</name><argument_list pos:start="245:46" pos:end="245:58">(<argument pos:start="245:47" pos:end="245:57"><expr pos:start="245:47" pos:end="245:57"><name pos:start="245:47" pos:end="245:57">bios_offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt pos:start="245:60" pos:end="245:60">;</empty_stmt>

            <decl_stmt pos:start="247:13" pos:end="247:45"><decl pos:start="247:13" pos:end="247:44"><type pos:start="247:13" pos:end="247:22"><name pos:start="247:13" pos:end="247:20">uint32_t</name> <modifier pos:start="247:22" pos:end="247:22">*</modifier></type><name pos:start="247:23" pos:end="247:25">end</name> <init pos:start="247:27" pos:end="247:44">= <expr pos:start="247:29" pos:end="247:44"><name pos:start="247:29" pos:end="247:32">addr</name> <operator pos:start="247:34" pos:end="247:34">+</operator> <name pos:start="247:36" pos:end="247:44">bios_size</name></expr></init></decl>;</decl_stmt>

            <while pos:start="249:13" pos:end="253:13">while <condition pos:start="249:19" pos:end="249:30">(<expr pos:start="249:20" pos:end="249:29"><name pos:start="249:20" pos:end="249:23">addr</name> <operator pos:start="249:25" pos:end="249:25">&lt;</operator> <name pos:start="249:27" pos:end="249:29">end</name></expr>)</condition> <block pos:start="249:32" pos:end="253:13">{<block_content pos:start="251:17" pos:end="251:31">

                <expr_stmt pos:start="251:17" pos:end="251:31"><expr pos:start="251:17" pos:end="251:30"><call pos:start="251:17" pos:end="251:30"><name pos:start="251:17" pos:end="251:24">bswap32s</name><argument_list pos:start="251:25" pos:end="251:30">(<argument pos:start="251:26" pos:end="251:29"><expr pos:start="251:26" pos:end="251:29"><name pos:start="251:26" pos:end="251:29">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block>

<cpp:endif pos:start="257:1" pos:end="257:6">#<cpp:directive pos:start="257:2" pos:end="257:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="263:5" pos:end="267:30">/* Board ID = 0x420 (Malta Board with CoreLV)

       XXX: theoretically 0x1e000010 should map to flash and 0x1fc00010 should

       map to the board ID. */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:39"><expr pos:start="269:5" pos:end="269:38"><call pos:start="269:5" pos:end="269:38"><name pos:start="269:5" pos:end="269:12">stl_phys</name><argument_list pos:start="269:13" pos:end="269:38">(<argument pos:start="269:14" pos:end="269:25"><expr pos:start="269:14" pos:end="269:25"><literal type="number" pos:start="269:14" pos:end="269:25">0x1fc00010LL</literal></expr></argument>, <argument pos:start="269:28" pos:end="269:37"><expr pos:start="269:28" pos:end="269:37"><literal type="number" pos:start="269:28" pos:end="269:37">0x00000420</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="273:5" pos:end="273:31">/* Init internal devices */</comment>

    <expr_stmt pos:start="275:5" pos:end="275:31"><expr pos:start="275:5" pos:end="275:30"><call pos:start="275:5" pos:end="275:30"><name pos:start="275:5" pos:end="275:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="275:26" pos:end="275:30">(<argument pos:start="275:27" pos:end="275:29"><expr pos:start="275:27" pos:end="275:29"><name pos:start="275:27" pos:end="275:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:29"><expr pos:start="277:5" pos:end="277:28"><call pos:start="277:5" pos:end="277:28"><name pos:start="277:5" pos:end="277:23">cpu_mips_clock_init</name><argument_list pos:start="277:24" pos:end="277:28">(<argument pos:start="277:25" pos:end="277:27"><expr pos:start="277:25" pos:end="277:27"><name pos:start="277:25" pos:end="277:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="281:5" pos:end="281:30">/* Interrupt controller */</comment>

    <comment type="block" pos:start="283:5" pos:end="283:71">/* The 8259 is attached to the MIPS CPU INT0 pin, ie interrupt 2 */</comment>

    <expr_stmt pos:start="285:5" pos:end="285:36"><expr pos:start="285:5" pos:end="285:35"><name pos:start="285:5" pos:end="285:9">i8259</name> <operator pos:start="285:11" pos:end="285:11">=</operator> <call pos:start="285:13" pos:end="285:35"><name pos:start="285:13" pos:end="285:22">i8259_init</name><argument_list pos:start="285:23" pos:end="285:35">(<argument pos:start="285:24" pos:end="285:34"><expr pos:start="285:24" pos:end="285:34"><name pos:start="285:24" pos:end="285:34"><name pos:start="285:24" pos:end="285:26">env</name><operator pos:start="285:27" pos:end="285:28">-&gt;</operator><name pos:start="285:29" pos:end="285:31">irq</name><index pos:start="285:32" pos:end="285:34">[<expr pos:start="285:33" pos:end="285:33"><literal type="number" pos:start="285:33" pos:end="285:33">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="289:5" pos:end="289:21">/* Northbridge */</comment>

    <expr_stmt pos:start="291:5" pos:end="291:38"><expr pos:start="291:5" pos:end="291:37"><name pos:start="291:5" pos:end="291:11">pci_bus</name> <operator pos:start="291:13" pos:end="291:13">=</operator> <call pos:start="291:15" pos:end="291:37"><name pos:start="291:15" pos:end="291:30">pci_gt64120_init</name><argument_list pos:start="291:31" pos:end="291:37">(<argument pos:start="291:32" pos:end="291:36"><expr pos:start="291:32" pos:end="291:36"><name pos:start="291:32" pos:end="291:36">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="295:5" pos:end="295:21">/* Southbridge */</comment>



    <if_stmt pos:start="299:5" pos:end="305:5"><if pos:start="299:5" pos:end="305:5">if <condition pos:start="299:8" pos:end="299:49">(<expr pos:start="299:9" pos:end="299:48"><call pos:start="299:9" pos:end="299:33"><name pos:start="299:9" pos:end="299:25">drive_get_max_bus</name><argument_list pos:start="299:26" pos:end="299:33">(<argument pos:start="299:27" pos:end="299:32"><expr pos:start="299:27" pos:end="299:32"><name pos:start="299:27" pos:end="299:32">IF_IDE</name></expr></argument>)</argument_list></call> <operator pos:start="299:35" pos:end="299:36">&gt;=</operator> <name pos:start="299:38" pos:end="299:48">MAX_IDE_BUS</name></expr>)</condition> <block pos:start="299:51" pos:end="305:5">{<block_content pos:start="301:9" pos:end="303:16">

        <expr_stmt pos:start="301:9" pos:end="301:52"><expr pos:start="301:9" pos:end="301:51"><call pos:start="301:9" pos:end="301:51"><name pos:start="301:9" pos:end="301:15">fprintf</name><argument_list pos:start="301:16" pos:end="301:51">(<argument pos:start="301:17" pos:end="301:22"><expr pos:start="301:17" pos:end="301:22"><name pos:start="301:17" pos:end="301:22">stderr</name></expr></argument>, <argument pos:start="301:25" pos:end="301:50"><expr pos:start="301:25" pos:end="301:50"><literal type="string" pos:start="301:25" pos:end="301:50">"qemu: too many IDE bus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:16"><expr pos:start="303:9" pos:end="303:15"><call pos:start="303:9" pos:end="303:15"><name pos:start="303:9" pos:end="303:12">exit</name><argument_list pos:start="303:13" pos:end="303:15">(<argument pos:start="303:14" pos:end="303:14"><expr pos:start="303:14" pos:end="303:14"><literal type="number" pos:start="303:14" pos:end="303:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="309:5" pos:end="313:5">for<control pos:start="309:8" pos:end="309:51">(<init pos:start="309:9" pos:end="309:14"><expr pos:start="309:9" pos:end="309:13"><name pos:start="309:9" pos:end="309:9">i</name> <operator pos:start="309:11" pos:end="309:11">=</operator> <literal type="number" pos:start="309:13" pos:end="309:13">0</literal></expr>;</init> <condition pos:start="309:16" pos:end="309:46"><expr pos:start="309:16" pos:end="309:45"><name pos:start="309:16" pos:end="309:16">i</name> <operator pos:start="309:18" pos:end="309:18">&lt;</operator> <name pos:start="309:20" pos:end="309:30">MAX_IDE_BUS</name> <operator pos:start="309:32" pos:end="309:32">*</operator> <name pos:start="309:34" pos:end="309:45">MAX_IDE_DEVS</name></expr>;</condition> <incr pos:start="309:48" pos:end="309:50"><expr pos:start="309:48" pos:end="309:50"><name pos:start="309:48" pos:end="309:48">i</name><operator pos:start="309:49" pos:end="309:50">++</operator></expr></incr>)</control> <block pos:start="309:53" pos:end="313:5">{<block_content pos:start="311:9" pos:end="311:70">

        <expr_stmt pos:start="311:9" pos:end="311:70"><expr pos:start="311:9" pos:end="311:69"><name pos:start="311:9" pos:end="311:13"><name pos:start="311:9" pos:end="311:10">hd</name><index pos:start="311:11" pos:end="311:13">[<expr pos:start="311:12" pos:end="311:12"><name pos:start="311:12" pos:end="311:12">i</name></expr>]</index></name> <operator pos:start="311:15" pos:end="311:15">=</operator> <call pos:start="311:17" pos:end="311:69"><name pos:start="311:17" pos:end="311:25">drive_get</name><argument_list pos:start="311:26" pos:end="311:69">(<argument pos:start="311:27" pos:end="311:32"><expr pos:start="311:27" pos:end="311:32"><name pos:start="311:27" pos:end="311:32">IF_IDE</name></expr></argument>, <argument pos:start="311:35" pos:end="311:50"><expr pos:start="311:35" pos:end="311:50"><name pos:start="311:35" pos:end="311:35">i</name> <operator pos:start="311:37" pos:end="311:37">/</operator> <name pos:start="311:39" pos:end="311:50">MAX_IDE_DEVS</name></expr></argument>, <argument pos:start="311:53" pos:end="311:68"><expr pos:start="311:53" pos:end="311:68"><name pos:start="311:53" pos:end="311:53">i</name> <operator pos:start="311:55" pos:end="311:55">%</operator> <name pos:start="311:57" pos:end="311:68">MAX_IDE_DEVS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="317:5" pos:end="317:42"><expr pos:start="317:5" pos:end="317:41"><name pos:start="317:5" pos:end="317:15">piix4_devfn</name> <operator pos:start="317:17" pos:end="317:17">=</operator> <call pos:start="317:19" pos:end="317:41"><name pos:start="317:19" pos:end="317:28">piix4_init</name><argument_list pos:start="317:29" pos:end="317:41">(<argument pos:start="317:30" pos:end="317:36"><expr pos:start="317:30" pos:end="317:36"><name pos:start="317:30" pos:end="317:36">pci_bus</name></expr></argument>, <argument pos:start="317:39" pos:end="317:40"><expr pos:start="317:39" pos:end="317:40"><literal type="number" pos:start="317:39" pos:end="317:40">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:24"><expr pos:start="319:5" pos:end="319:23"><call pos:start="319:5" pos:end="319:23"><name pos:start="319:5" pos:end="319:16">isa_bus_irqs</name><argument_list pos:start="319:17" pos:end="319:23">(<argument pos:start="319:18" pos:end="319:22"><expr pos:start="319:18" pos:end="319:22"><name pos:start="319:18" pos:end="319:22">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="321:5" pos:end="321:53"><expr pos:start="321:5" pos:end="321:52"><call pos:start="321:5" pos:end="321:52"><name pos:start="321:5" pos:end="321:22">pci_piix4_ide_init</name><argument_list pos:start="321:23" pos:end="321:52">(<argument pos:start="321:24" pos:end="321:30"><expr pos:start="321:24" pos:end="321:30"><name pos:start="321:24" pos:end="321:30">pci_bus</name></expr></argument>, <argument pos:start="321:33" pos:end="321:34"><expr pos:start="321:33" pos:end="321:34"><name pos:start="321:33" pos:end="321:34">hd</name></expr></argument>, <argument pos:start="321:37" pos:end="321:51"><expr pos:start="321:37" pos:end="321:51"><name pos:start="321:37" pos:end="321:47">piix4_devfn</name> <operator pos:start="321:49" pos:end="321:49">+</operator> <literal type="number" pos:start="321:51" pos:end="321:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:50"><expr pos:start="323:5" pos:end="323:49"><call pos:start="323:5" pos:end="323:49"><name pos:start="323:5" pos:end="323:23">usb_uhci_piix4_init</name><argument_list pos:start="323:24" pos:end="323:49">(<argument pos:start="323:25" pos:end="323:31"><expr pos:start="323:25" pos:end="323:31"><name pos:start="323:25" pos:end="323:31">pci_bus</name></expr></argument>, <argument pos:start="323:34" pos:end="323:48"><expr pos:start="323:34" pos:end="323:48"><name pos:start="323:34" pos:end="323:44">piix4_devfn</name> <operator pos:start="323:46" pos:end="323:46">+</operator> <literal type="number" pos:start="323:48" pos:end="323:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:80"><expr pos:start="325:5" pos:end="325:79"><name pos:start="325:5" pos:end="325:9">smbus</name> <operator pos:start="325:11" pos:end="325:11">=</operator> <call pos:start="325:13" pos:end="325:79"><name pos:start="325:13" pos:end="325:25">piix4_pm_init</name><argument_list pos:start="325:26" pos:end="325:79">(<argument pos:start="325:27" pos:end="325:33"><expr pos:start="325:27" pos:end="325:33"><name pos:start="325:27" pos:end="325:33">pci_bus</name></expr></argument>, <argument pos:start="325:36" pos:end="325:50"><expr pos:start="325:36" pos:end="325:50"><name pos:start="325:36" pos:end="325:46">piix4_devfn</name> <operator pos:start="325:48" pos:end="325:48">+</operator> <literal type="number" pos:start="325:50" pos:end="325:50">3</literal></expr></argument>, <argument pos:start="325:53" pos:end="325:58"><expr pos:start="325:53" pos:end="325:58"><literal type="number" pos:start="325:53" pos:end="325:58">0x1100</literal></expr></argument>, <argument pos:start="325:61" pos:end="325:78"><expr pos:start="325:61" pos:end="325:78"><call pos:start="325:61" pos:end="325:78"><name pos:start="325:61" pos:end="325:75">isa_reserve_irq</name><argument_list pos:start="325:76" pos:end="325:78">(<argument pos:start="325:77" pos:end="325:77"><expr pos:start="325:77" pos:end="325:77"><literal type="number" pos:start="325:77" pos:end="325:77">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:39"><expr pos:start="327:5" pos:end="327:38"><name pos:start="327:5" pos:end="327:14">eeprom_buf</name> <operator pos:start="327:16" pos:end="327:16">=</operator> <call pos:start="327:18" pos:end="327:38"><name pos:start="327:18" pos:end="327:29">qemu_mallocz</name><argument_list pos:start="327:30" pos:end="327:38">(<argument pos:start="327:31" pos:end="327:37"><expr pos:start="327:31" pos:end="327:37"><literal type="number" pos:start="327:31" pos:end="327:31">8</literal> <operator pos:start="327:33" pos:end="327:33">*</operator> <literal type="number" pos:start="327:35" pos:end="327:37">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="327:41" pos:end="327:71">/* XXX: make this persistent */</comment>

    <for pos:start="329:5" pos:end="343:5">for <control pos:start="329:9" pos:end="329:27">(<init pos:start="329:10" pos:end="329:15"><expr pos:start="329:10" pos:end="329:14"><name pos:start="329:10" pos:end="329:10">i</name> <operator pos:start="329:12" pos:end="329:12">=</operator> <literal type="number" pos:start="329:14" pos:end="329:14">0</literal></expr>;</init> <condition pos:start="329:17" pos:end="329:22"><expr pos:start="329:17" pos:end="329:21"><name pos:start="329:17" pos:end="329:17">i</name> <operator pos:start="329:19" pos:end="329:19">&lt;</operator> <literal type="number" pos:start="329:21" pos:end="329:21">8</literal></expr>;</condition> <incr pos:start="329:24" pos:end="329:26"><expr pos:start="329:24" pos:end="329:26"><name pos:start="329:24" pos:end="329:24">i</name><operator pos:start="329:25" pos:end="329:26">++</operator></expr></incr>)</control> <block pos:start="329:29" pos:end="343:5">{<block_content pos:start="333:9" pos:end="341:26">

        <comment type="block" pos:start="331:9" pos:end="331:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <decl_stmt pos:start="333:9" pos:end="333:28"><decl pos:start="333:9" pos:end="333:27"><type pos:start="333:9" pos:end="333:21"><name pos:start="333:9" pos:end="333:19">DeviceState</name> <modifier pos:start="333:21" pos:end="333:21">*</modifier></type><name pos:start="333:22" pos:end="333:27">eeprom</name></decl>;</decl_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:64"><expr pos:start="335:9" pos:end="335:63"><name pos:start="335:9" pos:end="335:14">eeprom</name> <operator pos:start="335:16" pos:end="335:16">=</operator> <call pos:start="335:18" pos:end="335:63"><name pos:start="335:18" pos:end="335:28">qdev_create</name><argument_list pos:start="335:29" pos:end="335:63">(<argument pos:start="335:30" pos:end="335:46"><expr pos:start="335:30" pos:end="335:46"><operator pos:start="335:30" pos:end="335:30">(</operator><name pos:start="335:31" pos:end="335:38">BusState</name> <operator pos:start="335:40" pos:end="335:40">*</operator><operator pos:start="335:41" pos:end="335:41">)</operator><name pos:start="335:42" pos:end="335:46">smbus</name></expr></argument>, <argument pos:start="335:49" pos:end="335:62"><expr pos:start="335:49" pos:end="335:62"><literal type="string" pos:start="335:49" pos:end="335:62">"smbus-eeprom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:57"><expr pos:start="337:9" pos:end="337:56"><call pos:start="337:9" pos:end="337:56"><name pos:start="337:9" pos:end="337:27">qdev_prop_set_uint8</name><argument_list pos:start="337:28" pos:end="337:56">(<argument pos:start="337:29" pos:end="337:34"><expr pos:start="337:29" pos:end="337:34"><name pos:start="337:29" pos:end="337:34">eeprom</name></expr></argument>, <argument pos:start="337:37" pos:end="337:45"><expr pos:start="337:37" pos:end="337:45"><literal type="string" pos:start="337:37" pos:end="337:45">"address"</literal></expr></argument>, <argument pos:start="337:48" pos:end="337:55"><expr pos:start="337:48" pos:end="337:55"><literal type="number" pos:start="337:48" pos:end="337:53">0x50</literal> <operator pos:start="337:53" pos:end="337:53">+</operator> <name pos:start="337:55" pos:end="337:55">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:66"><expr pos:start="339:9" pos:end="339:65"><call pos:start="339:9" pos:end="339:65"><name pos:start="339:9" pos:end="339:25">qdev_prop_set_ptr</name><argument_list pos:start="339:26" pos:end="339:65">(<argument pos:start="339:27" pos:end="339:32"><expr pos:start="339:27" pos:end="339:32"><name pos:start="339:27" pos:end="339:32">eeprom</name></expr></argument>, <argument pos:start="339:35" pos:end="339:40"><expr pos:start="339:35" pos:end="339:40"><literal type="string" pos:start="339:35" pos:end="339:40">"data"</literal></expr></argument>, <argument pos:start="339:43" pos:end="339:64"><expr pos:start="339:43" pos:end="339:64"><name pos:start="339:43" pos:end="339:52">eeprom_buf</name> <operator pos:start="339:54" pos:end="339:54">+</operator> <operator pos:start="339:56" pos:end="339:56">(</operator><name pos:start="339:57" pos:end="339:57">i</name> <operator pos:start="339:59" pos:end="339:59">*</operator> <literal type="number" pos:start="339:61" pos:end="339:63">256</literal><operator pos:start="339:64" pos:end="339:64">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:26"><expr pos:start="341:9" pos:end="341:25"><call pos:start="341:9" pos:end="341:25"><name pos:start="341:9" pos:end="341:17">qdev_init</name><argument_list pos:start="341:18" pos:end="341:25">(<argument pos:start="341:19" pos:end="341:24"><expr pos:start="341:19" pos:end="341:24"><name pos:start="341:19" pos:end="341:24">eeprom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="345:5" pos:end="345:45"><expr pos:start="345:5" pos:end="345:44"><name pos:start="345:5" pos:end="345:7">pit</name> <operator pos:start="345:9" pos:end="345:9">=</operator> <call pos:start="345:11" pos:end="345:44"><name pos:start="345:11" pos:end="345:18">pit_init</name><argument_list pos:start="345:19" pos:end="345:44">(<argument pos:start="345:20" pos:end="345:23"><expr pos:start="345:20" pos:end="345:23"><literal type="number" pos:start="345:20" pos:end="345:23">0x40</literal></expr></argument>, <argument pos:start="345:26" pos:end="345:43"><expr pos:start="345:26" pos:end="345:43"><call pos:start="345:26" pos:end="345:43"><name pos:start="345:26" pos:end="345:40">isa_reserve_irq</name><argument_list pos:start="345:41" pos:end="345:43">(<argument pos:start="345:42" pos:end="345:42"><expr pos:start="345:42" pos:end="345:42"><literal type="number" pos:start="345:42" pos:end="345:42">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:16"><expr pos:start="347:5" pos:end="347:15"><call pos:start="347:5" pos:end="347:15"><name pos:start="347:5" pos:end="347:12">DMA_init</name><argument_list pos:start="347:13" pos:end="347:15">(<argument pos:start="347:14" pos:end="347:14"><expr pos:start="347:14" pos:end="347:14"><literal type="number" pos:start="347:14" pos:end="347:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="351:5" pos:end="351:19">/* Super I/O */</comment>

    <expr_stmt pos:start="353:5" pos:end="353:41"><expr pos:start="353:5" pos:end="353:40"><name pos:start="353:5" pos:end="353:11">isa_dev</name> <operator pos:start="353:13" pos:end="353:13">=</operator> <call pos:start="353:15" pos:end="353:40"><name pos:start="353:15" pos:end="353:31">isa_create_simple</name><argument_list pos:start="353:32" pos:end="353:40">(<argument pos:start="353:33" pos:end="353:39"><expr pos:start="353:33" pos:end="353:39"><literal type="string" pos:start="353:33" pos:end="353:39">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 

    <expr_stmt pos:start="357:5" pos:end="357:31"><expr pos:start="357:5" pos:end="357:30"><name pos:start="357:5" pos:end="357:13">rtc_state</name> <operator pos:start="357:15" pos:end="357:15">=</operator> <call pos:start="357:17" pos:end="357:30"><name pos:start="357:17" pos:end="357:24">rtc_init</name><argument_list pos:start="357:25" pos:end="357:30">(<argument pos:start="357:26" pos:end="357:29"><expr pos:start="357:26" pos:end="357:29"><literal type="number" pos:start="357:26" pos:end="357:29">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:38"><expr pos:start="359:5" pos:end="359:37"><call pos:start="359:5" pos:end="359:37"><name pos:start="359:5" pos:end="359:19">serial_isa_init</name><argument_list pos:start="359:20" pos:end="359:37">(<argument pos:start="359:21" pos:end="359:21"><expr pos:start="359:21" pos:end="359:21"><literal type="number" pos:start="359:21" pos:end="359:21">0</literal></expr></argument>, <argument pos:start="359:24" pos:end="359:36"><expr pos:start="359:24" pos:end="359:36"><name pos:start="359:24" pos:end="359:36"><name pos:start="359:24" pos:end="359:33">serial_hds</name><index pos:start="359:34" pos:end="359:36">[<expr pos:start="359:35" pos:end="359:35"><literal type="number" pos:start="359:35" pos:end="359:35">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:38"><expr pos:start="361:5" pos:end="361:37"><call pos:start="361:5" pos:end="361:37"><name pos:start="361:5" pos:end="361:19">serial_isa_init</name><argument_list pos:start="361:20" pos:end="361:37">(<argument pos:start="361:21" pos:end="361:21"><expr pos:start="361:21" pos:end="361:21"><literal type="number" pos:start="361:21" pos:end="361:21">1</literal></expr></argument>, <argument pos:start="361:24" pos:end="361:36"><expr pos:start="361:24" pos:end="361:36"><name pos:start="361:24" pos:end="361:36"><name pos:start="361:24" pos:end="361:33">serial_hds</name><index pos:start="361:34" pos:end="361:36">[<expr pos:start="361:35" pos:end="361:35"><literal type="number" pos:start="361:35" pos:end="361:35">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="363:5" pos:end="365:42"><if pos:start="363:5" pos:end="365:42">if <condition pos:start="363:8" pos:end="363:24">(<expr pos:start="363:9" pos:end="363:23"><name pos:start="363:9" pos:end="363:23"><name pos:start="363:9" pos:end="363:20">parallel_hds</name><index pos:start="363:21" pos:end="363:23">[<expr pos:start="363:22" pos:end="363:22"><literal type="number" pos:start="363:22" pos:end="363:22">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="365:9" pos:end="365:42"><block_content pos:start="365:9" pos:end="365:42">

        <expr_stmt pos:start="365:9" pos:end="365:42"><expr pos:start="365:9" pos:end="365:41"><call pos:start="365:9" pos:end="365:41"><name pos:start="365:9" pos:end="365:21">parallel_init</name><argument_list pos:start="365:22" pos:end="365:41">(<argument pos:start="365:23" pos:end="365:23"><expr pos:start="365:23" pos:end="365:23"><literal type="number" pos:start="365:23" pos:end="365:23">0</literal></expr></argument>, <argument pos:start="365:26" pos:end="365:40"><expr pos:start="365:26" pos:end="365:40"><name pos:start="365:26" pos:end="365:40"><name pos:start="365:26" pos:end="365:37">parallel_hds</name><index pos:start="365:38" pos:end="365:40">[<expr pos:start="365:39" pos:end="365:39"><literal type="number" pos:start="365:39" pos:end="365:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="367:5" pos:end="371:5">for<control pos:start="367:8" pos:end="367:31">(<init pos:start="367:9" pos:end="367:14"><expr pos:start="367:9" pos:end="367:13"><name pos:start="367:9" pos:end="367:9">i</name> <operator pos:start="367:11" pos:end="367:11">=</operator> <literal type="number" pos:start="367:13" pos:end="367:13">0</literal></expr>;</init> <condition pos:start="367:16" pos:end="367:26"><expr pos:start="367:16" pos:end="367:25"><name pos:start="367:16" pos:end="367:16">i</name> <operator pos:start="367:18" pos:end="367:18">&lt;</operator> <name pos:start="367:20" pos:end="367:25">MAX_FD</name></expr>;</condition> <incr pos:start="367:28" pos:end="367:30"><expr pos:start="367:28" pos:end="367:30"><name pos:start="367:28" pos:end="367:28">i</name><operator pos:start="367:29" pos:end="367:30">++</operator></expr></incr>)</control> <block pos:start="367:33" pos:end="371:5">{<block_content pos:start="369:9" pos:end="369:43">

        <expr_stmt pos:start="369:9" pos:end="369:43"><expr pos:start="369:9" pos:end="369:42"><name pos:start="369:9" pos:end="369:13"><name pos:start="369:9" pos:end="369:10">fd</name><index pos:start="369:11" pos:end="369:13">[<expr pos:start="369:12" pos:end="369:12"><name pos:start="369:12" pos:end="369:12">i</name></expr>]</index></name> <operator pos:start="369:15" pos:end="369:15">=</operator> <call pos:start="369:17" pos:end="369:42"><name pos:start="369:17" pos:end="369:25">drive_get</name><argument_list pos:start="369:26" pos:end="369:42">(<argument pos:start="369:27" pos:end="369:35"><expr pos:start="369:27" pos:end="369:35"><name pos:start="369:27" pos:end="369:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="369:38" pos:end="369:38"><expr pos:start="369:38" pos:end="369:38"><literal type="number" pos:start="369:38" pos:end="369:38">0</literal></expr></argument>, <argument pos:start="369:41" pos:end="369:41"><expr pos:start="369:41" pos:end="369:41"><name pos:start="369:41" pos:end="369:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="373:5" pos:end="380:0"><expr pos:start="373:5" pos:end="373:43"><name pos:start="373:5" pos:end="373:21">floppy_controller</name> <operator pos:start="373:23" pos:end="373:23">=</operator> <call pos:start="373:25" pos:end="373:43"><name pos:start="373:25" pos:end="373:39">fdctrl_init_isa</name><argument_list pos:start="373:40" pos:end="373:43">(<argument pos:start="373:41" pos:end="373:42"><expr pos:start="373:41" pos:end="373:42"><name pos:start="373:41" pos:end="373:42">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="377:5" pos:end="377:20">/* Sound card */</comment>

<cpp:ifdef pos:start="379:1" pos:end="379:16">#<cpp:directive pos:start="379:2" pos:end="379:6">ifdef</cpp:directive> <name pos:start="379:8" pos:end="379:16">HAS_AUDIO</name></cpp:ifdef>

    <expr_stmt pos:start="381:5" pos:end="384:0"><expr pos:start="381:5" pos:end="381:23"><call pos:start="381:5" pos:end="381:23"><name pos:start="381:5" pos:end="381:14">audio_init</name><argument_list pos:start="381:15" pos:end="381:23">(<argument pos:start="381:16" pos:end="381:22"><expr pos:start="381:16" pos:end="381:22"><name pos:start="381:16" pos:end="381:22">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="383:1" pos:end="383:6">#<cpp:directive pos:start="383:2" pos:end="383:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="387:5" pos:end="387:22">/* Network card */</comment>

    <expr_stmt pos:start="389:5" pos:end="389:19"><expr pos:start="389:5" pos:end="389:18"><call pos:start="389:5" pos:end="389:18"><name pos:start="389:5" pos:end="389:16">network_init</name><argument_list pos:start="389:17" pos:end="389:18">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="393:5" pos:end="393:33">/* Optional PCI video card */</comment>

    <if_stmt pos:start="395:5" pos:end="407:5"><if pos:start="395:5" pos:end="399:5">if <condition pos:start="395:8" pos:end="395:27">(<expr pos:start="395:9" pos:end="395:26"><name pos:start="395:9" pos:end="395:26">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="395:29" pos:end="399:5">{<block_content pos:start="397:9" pos:end="397:37">

        <expr_stmt pos:start="397:9" pos:end="397:37"><expr pos:start="397:9" pos:end="397:36"><call pos:start="397:9" pos:end="397:36"><name pos:start="397:9" pos:end="397:27">pci_cirrus_vga_init</name><argument_list pos:start="397:28" pos:end="397:36">(<argument pos:start="397:29" pos:end="397:35"><expr pos:start="397:29" pos:end="397:35"><name pos:start="397:29" pos:end="397:35">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="399:7" pos:end="403:5">else if <condition pos:start="399:15" pos:end="399:30">(<expr pos:start="399:16" pos:end="399:29"><name pos:start="399:16" pos:end="399:29">vmsvga_enabled</name></expr>)</condition> <block pos:start="399:32" pos:end="403:5">{<block_content pos:start="401:9" pos:end="401:33">

        <expr_stmt pos:start="401:9" pos:end="401:33"><expr pos:start="401:9" pos:end="401:32"><call pos:start="401:9" pos:end="401:32"><name pos:start="401:9" pos:end="401:23">pci_vmsvga_init</name><argument_list pos:start="401:24" pos:end="401:32">(<argument pos:start="401:25" pos:end="401:31"><expr pos:start="401:25" pos:end="401:31"><name pos:start="401:25" pos:end="401:31">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="403:7" pos:end="407:5">else if <condition pos:start="403:15" pos:end="403:31">(<expr pos:start="403:16" pos:end="403:30"><name pos:start="403:16" pos:end="403:30">std_vga_enabled</name></expr>)</condition> <block pos:start="403:33" pos:end="407:5">{<block_content pos:start="405:9" pos:end="405:36">

        <expr_stmt pos:start="405:9" pos:end="405:36"><expr pos:start="405:9" pos:end="405:35"><call pos:start="405:9" pos:end="405:35"><name pos:start="405:9" pos:end="405:20">pci_vga_init</name><argument_list pos:start="405:21" pos:end="405:35">(<argument pos:start="405:22" pos:end="405:28"><expr pos:start="405:22" pos:end="405:28"><name pos:start="405:22" pos:end="405:28">pci_bus</name></expr></argument>, <argument pos:start="405:31" pos:end="405:31"><expr pos:start="405:31" pos:end="405:31"><literal type="number" pos:start="405:31" pos:end="405:31">0</literal></expr></argument>, <argument pos:start="405:34" pos:end="405:34"><expr pos:start="405:34" pos:end="405:34"><literal type="number" pos:start="405:34" pos:end="405:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
