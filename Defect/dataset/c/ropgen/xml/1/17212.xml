<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17212.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">msix_write_config</name><parameter_list pos:start="1:23" pos:end="3:45">(<parameter pos:start="1:24" pos:end="1:37"><decl pos:start="1:24" pos:end="1:37"><type pos:start="1:24" pos:end="1:37"><name pos:start="1:24" pos:end="1:32">PCIDevice</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">dev</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:52"><name pos:start="1:40" pos:end="1:47">uint32_t</name></type> <name pos:start="1:49" pos:end="1:52">addr</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:31">uint32_t</name></type> <name pos:start="3:33" pos:end="3:35">val</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:44"><decl pos:start="3:38" pos:end="3:44"><type pos:start="3:38" pos:end="3:44"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:44">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:5">

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:23">enable_pos</name> <init pos:start="7:25" pos:end="7:61">= <expr pos:start="7:27" pos:end="7:61"><name pos:start="7:27" pos:end="7:39"><name pos:start="7:27" pos:end="7:29">dev</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:39">msix_cap</name></name> <operator pos:start="7:41" pos:end="7:41">+</operator> <name pos:start="7:43" pos:end="7:61">MSIX_CONTROL_OFFSET</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">vector</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:19">was_masked</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:50">(<expr pos:start="15:9" pos:end="15:49"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:49"><name pos:start="15:10" pos:end="15:26">range_covers_byte</name><argument_list pos:start="15:27" pos:end="15:49">(<argument pos:start="15:28" pos:end="15:31"><expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">addr</name></expr></argument>, <argument pos:start="15:34" pos:end="15:36"><expr pos:start="15:34" pos:end="15:36"><name pos:start="15:34" pos:end="15:36">len</name></expr></argument>, <argument pos:start="15:39" pos:end="15:48"><expr pos:start="15:39" pos:end="15:48"><name pos:start="15:39" pos:end="15:48">enable_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:52" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:43"><expr pos:start="23:5" pos:end="23:42"><name pos:start="23:5" pos:end="23:14">was_masked</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:42"><name pos:start="23:18" pos:end="23:20">dev</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:42">msix_function_masked</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><call pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:31">msix_update_function_masked</name><argument_list pos:start="25:32" pos:end="25:36">(<argument pos:start="25:33" pos:end="25:35"><expr pos:start="25:33" pos:end="25:35"><name pos:start="25:33" pos:end="25:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:27">(<expr pos:start="29:9" pos:end="29:26"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:26"><name pos:start="29:10" pos:end="29:21">msix_enabled</name><argument_list pos:start="29:22" pos:end="29:26">(<argument pos:start="29:23" pos:end="29:25"><expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:29" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:34"><expr pos:start="37:5" pos:end="37:33"><call pos:start="37:5" pos:end="37:33"><name pos:start="37:5" pos:end="37:28">pci_device_deassert_intx</name><argument_list pos:start="37:29" pos:end="37:33">(<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:48">(<expr pos:start="41:9" pos:end="41:47"><name pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:11">dev</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:33">msix_function_masked</name></name> <operator pos:start="41:35" pos:end="41:36">==</operator> <name pos:start="41:38" pos:end="41:47">was_masked</name></expr>)</condition> <block pos:start="41:50" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:15">

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="49:5" pos:end="53:5">for <control pos:start="49:9" pos:end="49:61">(<init pos:start="49:10" pos:end="49:20"><expr pos:start="49:10" pos:end="49:19"><name pos:start="49:10" pos:end="49:15">vector</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>;</init> <condition pos:start="49:22" pos:end="49:51"><expr pos:start="49:22" pos:end="49:50"><name pos:start="49:22" pos:end="49:27">vector</name> <operator pos:start="49:29" pos:end="49:29">&lt;</operator> <name pos:start="49:31" pos:end="49:50"><name pos:start="49:31" pos:end="49:33">dev</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:50">msix_entries_nr</name></name></expr>;</condition> <incr pos:start="49:53" pos:end="49:60"><expr pos:start="49:53" pos:end="49:60"><operator pos:start="49:53" pos:end="49:54">++</operator><name pos:start="49:55" pos:end="49:60">vector</name></expr></incr>)</control> <block pos:start="49:63" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:45">

        <expr_stmt pos:start="51:9" pos:end="51:45"><expr pos:start="51:9" pos:end="51:44"><call pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:31">msix_handle_mask_update</name><argument_list pos:start="51:32" pos:end="51:44">(<argument pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:35">dev</name></expr></argument>, <argument pos:start="51:38" pos:end="51:43"><expr pos:start="51:38" pos:end="51:43"><name pos:start="51:38" pos:end="51:43">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
