<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20426.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:16">qmp_migrate</name><parameter_list pos:start="1:17" pos:end="5:30">(<parameter pos:start="1:18" pos:end="1:32"><decl pos:start="1:18" pos:end="1:32"><type pos:start="1:18" pos:end="1:32"><specifier pos:start="1:18" pos:end="1:22">const</specifier> <name pos:start="1:24" pos:end="1:27">char</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">uri</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">bool</name></type> <name pos:start="1:40" pos:end="1:46">has_blk</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:52">bool</name></type> <name pos:start="1:54" pos:end="1:56">blk</name></decl></parameter>,

                 <parameter pos:start="3:18" pos:end="3:29"><decl pos:start="3:18" pos:end="3:29"><type pos:start="3:18" pos:end="3:29"><name pos:start="3:18" pos:end="3:21">bool</name></type> <name pos:start="3:23" pos:end="3:29">has_inc</name></decl></parameter>, <parameter pos:start="3:32" pos:end="3:39"><decl pos:start="3:32" pos:end="3:39"><type pos:start="3:32" pos:end="3:39"><name pos:start="3:32" pos:end="3:35">bool</name></type> <name pos:start="3:37" pos:end="3:39">inc</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:56"><decl pos:start="3:42" pos:end="3:56"><type pos:start="3:42" pos:end="3:56"><name pos:start="3:42" pos:end="3:45">bool</name></type> <name pos:start="3:47" pos:end="3:56">has_detach</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:69"><decl pos:start="3:59" pos:end="3:69"><type pos:start="3:59" pos:end="3:69"><name pos:start="3:59" pos:end="3:62">bool</name></type> <name pos:start="3:64" pos:end="3:69">detach</name></decl></parameter>,

                 <parameter pos:start="5:18" pos:end="5:29"><decl pos:start="5:18" pos:end="5:29"><type pos:start="5:18" pos:end="5:29"><name pos:start="5:18" pos:end="5:22">Error</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier><modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:29">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="121:1">{<block_content pos:start="9:5" pos:end="119:5">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MigrationState</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:45">= <expr pos:start="11:25" pos:end="11:45"><call pos:start="11:25" pos:end="11:45"><name pos:start="11:25" pos:end="11:43">migrate_get_current</name><argument_list pos:start="11:44" pos:end="11:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19">MigrationParams</name></type> <name pos:start="13:21" pos:end="13:26">params</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:17">p</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:10">params</name><operator pos:start="19:11" pos:end="19:11">.</operator><name pos:start="19:12" pos:end="19:14">blk</name></name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:24">has_blk</name> <operator pos:start="19:26" pos:end="19:27">&amp;&amp;</operator> <name pos:start="19:29" pos:end="19:31">blk</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:10">params</name><operator pos:start="21:11" pos:end="21:11">.</operator><name pos:start="21:12" pos:end="21:17">shared</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:27">has_inc</name> <operator pos:start="21:29" pos:end="21:30">&amp;&amp;</operator> <name pos:start="21:32" pos:end="21:34">inc</name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="27:48">(<expr pos:start="25:9" pos:end="27:47"><call pos:start="25:9" pos:end="25:46"><name pos:start="25:9" pos:end="25:36">migration_is_setup_or_active</name><argument_list pos:start="25:37" pos:end="25:46">(<argument pos:start="25:38" pos:end="25:45"><expr pos:start="25:38" pos:end="25:45"><name pos:start="25:38" pos:end="25:45"><name pos:start="25:38" pos:end="25:38">s</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:45">state</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:48" pos:end="25:49">||</operator>

        <name pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:16">state</name></name> <operator pos:start="27:18" pos:end="27:19">==</operator> <name pos:start="27:21" pos:end="27:47">MIGRATION_STATUS_CANCELLING</name></expr>)</condition> <block pos:start="27:50" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:15">

        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><call pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="29:47">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>, <argument pos:start="29:26" pos:end="29:46"><expr pos:start="29:26" pos:end="29:46"><name pos:start="29:26" pos:end="29:46">QERR_MIGRATION_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:44">(<expr pos:start="35:9" pos:end="35:43"><call pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:22">runstate_check</name><argument_list pos:start="35:23" pos:end="35:43">(<argument pos:start="35:24" pos:end="35:42"><expr pos:start="35:24" pos:end="35:42"><name pos:start="35:24" pos:end="35:42">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:46" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:71"><expr pos:start="37:9" pos:end="37:70"><call pos:start="37:9" pos:end="37:70"><name pos:start="37:9" pos:end="37:18">error_setg</name><argument_list pos:start="37:19" pos:end="37:70">(<argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">errp</name></expr></argument>, <argument pos:start="37:26" pos:end="37:69"><expr pos:start="37:26" pos:end="37:69"><literal type="string" pos:start="37:26" pos:end="37:69">"Guest is waiting for an incoming migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:40">(<expr pos:start="45:9" pos:end="45:39"><call pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:33">qemu_savevm_state_blocked</name><argument_list pos:start="45:34" pos:end="45:39">(<argument pos:start="45:35" pos:end="45:38"><expr pos:start="45:35" pos:end="45:38"><name pos:start="45:35" pos:end="45:38">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:42" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:15">

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:27">(<expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:26">migration_blockers</name></expr>)</condition> <block pos:start="53:29" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:15">

        <expr_stmt pos:start="55:9" pos:end="55:53"><expr pos:start="55:9" pos:end="55:52"><operator pos:start="55:9" pos:end="55:9">*</operator><name pos:start="55:10" pos:end="55:13">errp</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <call pos:start="55:17" pos:end="55:52"><name pos:start="55:17" pos:end="55:26">error_copy</name><argument_list pos:start="55:27" pos:end="55:52">(<argument pos:start="55:28" pos:end="55:51"><expr pos:start="55:28" pos:end="55:51"><name pos:start="55:28" pos:end="55:51"><name pos:start="55:28" pos:end="55:45">migration_blockers</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:51">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:30"><expr pos:start="63:5" pos:end="63:29"><name pos:start="63:5" pos:end="63:5">s</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <call pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:20">migrate_init</name><argument_list pos:start="63:21" pos:end="63:29">(<argument pos:start="63:22" pos:end="63:28"><expr pos:start="63:22" pos:end="63:28"><operator pos:start="63:22" pos:end="63:22">&amp;</operator><name pos:start="63:23" pos:end="63:28">params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="107:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:34">(<expr pos:start="67:9" pos:end="67:33"><call pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:16">strstart</name><argument_list pos:start="67:17" pos:end="67:33">(<argument pos:start="67:18" pos:end="67:20"><expr pos:start="67:18" pos:end="67:20"><name pos:start="67:18" pos:end="67:20">uri</name></expr></argument>, <argument pos:start="67:23" pos:end="67:28"><expr pos:start="67:23" pos:end="67:28"><literal type="string" pos:start="67:23" pos:end="67:28">"tcp:"</literal></expr></argument>, <argument pos:start="67:31" pos:end="67:32"><expr pos:start="67:31" pos:end="67:32"><operator pos:start="67:31" pos:end="67:31">&amp;</operator><name pos:start="67:32" pos:end="67:32">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:36" pos:end="73:5">{<block_content pos:start="69:9" pos:end="72:0">

        <expr_stmt pos:start="69:9" pos:end="72:0"><expr pos:start="69:9" pos:end="69:54"><call pos:start="69:9" pos:end="69:54"><name pos:start="69:9" pos:end="69:36">tcp_start_outgoing_migration</name><argument_list pos:start="69:37" pos:end="69:54">(<argument pos:start="69:38" pos:end="69:38"><expr pos:start="69:38" pos:end="69:38"><name pos:start="69:38" pos:end="69:38">s</name></expr></argument>, <argument pos:start="69:41" pos:end="69:41"><expr pos:start="69:41" pos:end="69:41"><name pos:start="69:41" pos:end="69:41">p</name></expr></argument>, <argument pos:start="69:44" pos:end="69:53"><expr pos:start="69:44" pos:end="69:53"><operator pos:start="69:44" pos:end="69:44">&amp;</operator><name pos:start="69:45" pos:end="69:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="71:1" pos:end="71:18">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:18">CONFIG_RDMA</name></cpp:ifdef>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="81:5">else if <condition pos:start="73:15" pos:end="73:42">(<expr pos:start="73:16" pos:end="73:41"><call pos:start="73:16" pos:end="73:41"><name pos:start="73:16" pos:end="73:23">strstart</name><argument_list pos:start="73:24" pos:end="73:41">(<argument pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:27">uri</name></expr></argument>, <argument pos:start="73:30" pos:end="73:36"><expr pos:start="73:30" pos:end="73:36"><literal type="string" pos:start="73:30" pos:end="73:36">"rdma:"</literal></expr></argument>, <argument pos:start="73:39" pos:end="73:40"><expr pos:start="73:39" pos:end="73:40"><operator pos:start="73:39" pos:end="73:39">&amp;</operator><name pos:start="73:40" pos:end="73:40">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:44" pos:end="81:5">{<block_content pos:start="75:9" pos:end="80:0">

        <expr_stmt pos:start="75:9" pos:end="80:0"><expr pos:start="75:9" pos:end="75:55"><call pos:start="75:9" pos:end="75:55"><name pos:start="75:9" pos:end="75:37">rdma_start_outgoing_migration</name><argument_list pos:start="75:38" pos:end="75:55">(<argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><name pos:start="75:39" pos:end="75:39">s</name></expr></argument>, <argument pos:start="75:42" pos:end="75:42"><expr pos:start="75:42" pos:end="75:42"><name pos:start="75:42" pos:end="75:42">p</name></expr></argument>, <argument pos:start="75:45" pos:end="75:54"><expr pos:start="75:45" pos:end="75:54"><operator pos:start="75:45" pos:end="75:45">&amp;</operator><name pos:start="75:46" pos:end="75:54">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="79:1" pos:end="79:19">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:19"><operator pos:start="79:5" pos:end="79:5">!</operator><call pos:start="79:6" pos:end="79:19"><name pos:start="79:6" pos:end="79:12">defined</name><argument_list pos:start="79:13" pos:end="79:19">(<argument pos:start="79:14" pos:end="79:18"><expr pos:start="79:14" pos:end="79:18"><name pos:start="79:14" pos:end="79:18">WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

    </block_content>}</block></if> <if type="elseif" pos:start="81:7" pos:end="85:5">else if <condition pos:start="81:15" pos:end="81:42">(<expr pos:start="81:16" pos:end="81:41"><call pos:start="81:16" pos:end="81:41"><name pos:start="81:16" pos:end="81:23">strstart</name><argument_list pos:start="81:24" pos:end="81:41">(<argument pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><name pos:start="81:25" pos:end="81:27">uri</name></expr></argument>, <argument pos:start="81:30" pos:end="81:36"><expr pos:start="81:30" pos:end="81:36"><literal type="string" pos:start="81:30" pos:end="81:36">"exec:"</literal></expr></argument>, <argument pos:start="81:39" pos:end="81:40"><expr pos:start="81:39" pos:end="81:40"><operator pos:start="81:39" pos:end="81:39">&amp;</operator><name pos:start="81:40" pos:end="81:40">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:44" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:56">

        <expr_stmt pos:start="83:9" pos:end="83:56"><expr pos:start="83:9" pos:end="83:55"><call pos:start="83:9" pos:end="83:55"><name pos:start="83:9" pos:end="83:37">exec_start_outgoing_migration</name><argument_list pos:start="83:38" pos:end="83:55">(<argument pos:start="83:39" pos:end="83:39"><expr pos:start="83:39" pos:end="83:39"><name pos:start="83:39" pos:end="83:39">s</name></expr></argument>, <argument pos:start="83:42" pos:end="83:42"><expr pos:start="83:42" pos:end="83:42"><name pos:start="83:42" pos:end="83:42">p</name></expr></argument>, <argument pos:start="83:45" pos:end="83:54"><expr pos:start="83:45" pos:end="83:54"><operator pos:start="83:45" pos:end="83:45">&amp;</operator><name pos:start="83:46" pos:end="83:54">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="85:7" pos:end="89:5">else if <condition pos:start="85:15" pos:end="85:42">(<expr pos:start="85:16" pos:end="85:41"><call pos:start="85:16" pos:end="85:41"><name pos:start="85:16" pos:end="85:23">strstart</name><argument_list pos:start="85:24" pos:end="85:41">(<argument pos:start="85:25" pos:end="85:27"><expr pos:start="85:25" pos:end="85:27"><name pos:start="85:25" pos:end="85:27">uri</name></expr></argument>, <argument pos:start="85:30" pos:end="85:36"><expr pos:start="85:30" pos:end="85:36"><literal type="string" pos:start="85:30" pos:end="85:36">"unix:"</literal></expr></argument>, <argument pos:start="85:39" pos:end="85:40"><expr pos:start="85:39" pos:end="85:40"><operator pos:start="85:39" pos:end="85:39">&amp;</operator><name pos:start="85:40" pos:end="85:40">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:44" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:56">

        <expr_stmt pos:start="87:9" pos:end="87:56"><expr pos:start="87:9" pos:end="87:55"><call pos:start="87:9" pos:end="87:55"><name pos:start="87:9" pos:end="87:37">unix_start_outgoing_migration</name><argument_list pos:start="87:38" pos:end="87:55">(<argument pos:start="87:39" pos:end="87:39"><expr pos:start="87:39" pos:end="87:39"><name pos:start="87:39" pos:end="87:39">s</name></expr></argument>, <argument pos:start="87:42" pos:end="87:42"><expr pos:start="87:42" pos:end="87:42"><name pos:start="87:42" pos:end="87:42">p</name></expr></argument>, <argument pos:start="87:45" pos:end="87:54"><expr pos:start="87:45" pos:end="87:54"><operator pos:start="87:45" pos:end="87:45">&amp;</operator><name pos:start="87:46" pos:end="87:54">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="89:7" pos:end="95:5">else if <condition pos:start="89:15" pos:end="89:40">(<expr pos:start="89:16" pos:end="89:39"><call pos:start="89:16" pos:end="89:39"><name pos:start="89:16" pos:end="89:23">strstart</name><argument_list pos:start="89:24" pos:end="89:39">(<argument pos:start="89:25" pos:end="89:27"><expr pos:start="89:25" pos:end="89:27"><name pos:start="89:25" pos:end="89:27">uri</name></expr></argument>, <argument pos:start="89:30" pos:end="89:34"><expr pos:start="89:30" pos:end="89:34"><literal type="string" pos:start="89:30" pos:end="89:34">"fd:"</literal></expr></argument>, <argument pos:start="89:37" pos:end="89:38"><expr pos:start="89:37" pos:end="89:38"><operator pos:start="89:37" pos:end="89:37">&amp;</operator><name pos:start="89:38" pos:end="89:38">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:42" pos:end="95:5">{<block_content pos:start="91:9" pos:end="94:0">

        <expr_stmt pos:start="91:9" pos:end="94:0"><expr pos:start="91:9" pos:end="91:53"><call pos:start="91:9" pos:end="91:53"><name pos:start="91:9" pos:end="91:35">fd_start_outgoing_migration</name><argument_list pos:start="91:36" pos:end="91:53">(<argument pos:start="91:37" pos:end="91:37"><expr pos:start="91:37" pos:end="91:37"><name pos:start="91:37" pos:end="91:37">s</name></expr></argument>, <argument pos:start="91:40" pos:end="91:40"><expr pos:start="91:40" pos:end="91:40"><name pos:start="91:40" pos:end="91:40">p</name></expr></argument>, <argument pos:start="91:43" pos:end="91:52"><expr pos:start="91:43" pos:end="91:52"><operator pos:start="91:43" pos:end="91:43">&amp;</operator><name pos:start="91:44" pos:end="91:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="107:5">else <block pos:start="95:12" pos:end="107:5">{<block_content pos:start="97:9" pos:end="105:15">

        <expr_stmt pos:start="97:9" pos:end="99:49"><expr pos:start="97:9" pos:end="99:48"><call pos:start="97:9" pos:end="99:48"><name pos:start="97:9" pos:end="97:18">error_setg</name><argument_list pos:start="97:19" pos:end="99:48">(<argument pos:start="97:20" pos:end="97:23"><expr pos:start="97:20" pos:end="97:23"><name pos:start="97:20" pos:end="97:23">errp</name></expr></argument>, <argument pos:start="97:26" pos:end="97:53"><expr pos:start="97:26" pos:end="97:53"><name pos:start="97:26" pos:end="97:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="97:56" pos:end="97:60"><expr pos:start="97:56" pos:end="97:60"><literal type="string" pos:start="97:56" pos:end="97:60">"uri"</literal></expr></argument>,

                   <argument pos:start="99:20" pos:end="99:47"><expr pos:start="99:20" pos:end="99:47"><literal type="string" pos:start="99:20" pos:end="99:47">"a valid migration protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="103:51"><expr pos:start="101:9" pos:end="103:50"><call pos:start="101:9" pos:end="103:50"><name pos:start="101:9" pos:end="101:25">migrate_set_state</name><argument_list pos:start="101:26" pos:end="103:50">(<argument pos:start="101:27" pos:end="101:35"><expr pos:start="101:27" pos:end="101:35"><operator pos:start="101:27" pos:end="101:27">&amp;</operator><name pos:start="101:28" pos:end="101:35"><name pos:start="101:28" pos:end="101:28">s</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:35">state</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:59"><expr pos:start="101:38" pos:end="101:59"><name pos:start="101:38" pos:end="101:59">MIGRATION_STATUS_SETUP</name></expr></argument>,

                          <argument pos:start="103:27" pos:end="103:49"><expr pos:start="103:27" pos:end="103:49"><name pos:start="103:27" pos:end="103:49">MIGRATION_STATUS_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:15">return;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="111:5" pos:end="119:5"><if pos:start="111:5" pos:end="119:5">if <condition pos:start="111:8" pos:end="111:18">(<expr pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:17">local_err</name></expr>)</condition> <block pos:start="111:20" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:15">

        <expr_stmt pos:start="113:9" pos:end="113:28"><expr pos:start="113:9" pos:end="113:27"><call pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:24">migrate_fd_error</name><argument_list pos:start="113:25" pos:end="113:27">(<argument pos:start="113:26" pos:end="113:26"><expr pos:start="113:26" pos:end="113:26"><name pos:start="113:26" pos:end="113:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:41"><expr pos:start="115:9" pos:end="115:40"><call pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:23">error_propagate</name><argument_list pos:start="115:24" pos:end="115:40">(<argument pos:start="115:25" pos:end="115:28"><expr pos:start="115:25" pos:end="115:28"><name pos:start="115:25" pos:end="115:28">errp</name></expr></argument>, <argument pos:start="115:31" pos:end="115:39"><expr pos:start="115:31" pos:end="115:39"><name pos:start="115:31" pos:end="115:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
