<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13980.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">disas_cp15_insn</name><parameter_list pos:start="1:27" pos:end="1:73">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:35">CPUState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:57"><decl pos:start="1:43" pos:end="1:57"><type pos:start="1:43" pos:end="1:57"><name pos:start="1:43" pos:end="1:54">DisasContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:72"><decl pos:start="1:60" pos:end="1:72"><type pos:start="1:60" pos:end="1:72"><name pos:start="1:60" pos:end="1:67">uint32_t</name></type> <name pos:start="1:69" pos:end="1:72">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">rd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">TCGv</name></type> <name pos:start="7:10" pos:end="7:12">tmp</name></decl>, <decl pos:start="7:15" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:15" pos:end="7:18">tmp2</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:71">/* M profile cores use memory mapped registers instead of cp15.  */</comment>

    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:40">(<expr pos:start="13:9" pos:end="13:39"><call pos:start="13:9" pos:end="13:39"><name pos:start="13:9" pos:end="13:19">arm_feature</name><argument_list pos:start="13:20" pos:end="13:39">(<argument pos:start="13:21" pos:end="13:23"><expr pos:start="13:21" pos:end="13:23"><name pos:start="13:21" pos:end="13:23">env</name></expr></argument>, <argument pos:start="13:26" pos:end="13:38"><expr pos:start="13:26" pos:end="13:38"><name pos:start="13:26" pos:end="13:38">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

	<return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="33:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="19:32">(<expr pos:start="19:9" pos:end="19:31"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:13">insn</name> <operator pos:start="19:15" pos:end="19:15">&amp;</operator> <operator pos:start="19:17" pos:end="19:17">(</operator><literal type="number" pos:start="19:18" pos:end="19:18">1</literal> <operator pos:start="19:20" pos:end="19:21">&lt;&lt;</operator> <literal type="number" pos:start="19:23" pos:end="19:24">25</literal><operator pos:start="19:25" pos:end="19:25">)</operator><operator pos:start="19:26" pos:end="19:26">)</operator> <operator pos:start="19:28" pos:end="19:29">==</operator> <literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr>)</condition> <block pos:start="19:34" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:17">

        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:29">(<expr pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:16">insn</name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <operator pos:start="21:20" pos:end="21:20">(</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal> <operator pos:start="21:23" pos:end="21:24">&lt;&lt;</operator> <literal type="number" pos:start="21:26" pos:end="21:27">20</literal><operator pos:start="21:28" pos:end="21:28">)</operator></expr>)</condition> <block pos:start="21:31" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:21">

            <comment type="block" pos:start="23:13" pos:end="23:22">/* mrrc */</comment>

            <return pos:start="25:13" pos:end="25:21">return <expr pos:start="25:20" pos:end="25:20"><literal type="number" pos:start="25:20" pos:end="25:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="29:77">/* mcrr.  Used for block cache operations, so implement as no-op.  */</comment>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:31">(<expr pos:start="35:9" pos:end="35:30"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:13">insn</name> <operator pos:start="35:15" pos:end="35:15">&amp;</operator> <operator pos:start="35:17" pos:end="35:17">(</operator><literal type="number" pos:start="35:18" pos:end="35:18">1</literal> <operator pos:start="35:20" pos:end="35:21">&lt;&lt;</operator> <literal type="number" pos:start="35:23" pos:end="35:23">4</literal><operator pos:start="35:24" pos:end="35:24">)</operator><operator pos:start="35:25" pos:end="35:25">)</operator> <operator pos:start="35:27" pos:end="35:28">==</operator> <literal type="number" pos:start="35:30" pos:end="35:30">0</literal></expr>)</condition> <block pos:start="35:33" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:17">

        <comment type="block" pos:start="37:9" pos:end="37:17">/* cdp */</comment>

        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:42">(<expr pos:start="43:9" pos:end="43:41"><call pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:15">IS_USER</name><argument_list pos:start="43:16" pos:end="43:18">(<argument pos:start="43:17" pos:end="43:17"><expr pos:start="43:17" pos:end="43:17"><name pos:start="43:17" pos:end="43:17">s</name></expr></argument>)</argument_list></call> <operator pos:start="43:20" pos:end="43:21">&amp;&amp;</operator> <operator pos:start="43:23" pos:end="43:23">!</operator><call pos:start="43:24" pos:end="43:41"><name pos:start="43:24" pos:end="43:35">cp15_user_ok</name><argument_list pos:start="43:36" pos:end="43:41">(<argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><name pos:start="43:37" pos:end="43:40">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:44" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:17">

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="55:7">/* Pre-v7 versions of the architecture implemented WFI via coprocessor

     * instructions rather than a separate instruction.

     */</comment>

    <if_stmt pos:start="57:5" pos:end="77:5"><if pos:start="57:5" pos:end="77:5">if <condition pos:start="57:8" pos:end="57:42">(<expr pos:start="57:9" pos:end="57:41"><operator pos:start="57:9" pos:end="57:9">(</operator><name pos:start="57:10" pos:end="57:13">insn</name> <operator pos:start="57:15" pos:end="57:15">&amp;</operator> <literal type="number" pos:start="57:17" pos:end="57:26">0x0fff0fff</literal><operator pos:start="57:27" pos:end="57:27">)</operator> <operator pos:start="57:29" pos:end="57:30">==</operator> <literal type="number" pos:start="57:32" pos:end="57:41">0x0e070f90</literal></expr>)</condition> <block pos:start="57:44" pos:end="77:5">{<block_content pos:start="65:9" pos:end="75:17">

        <comment type="block" pos:start="59:9" pos:end="63:11">/* 0,c7,c0,4: Standard v6 WFI (also used in some pre-v6 cores).

         * In v7, this must NOP.

         */</comment>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:46">(<expr pos:start="65:13" pos:end="65:45"><operator pos:start="65:13" pos:end="65:13">!</operator><call pos:start="65:14" pos:end="65:45"><name pos:start="65:14" pos:end="65:24">arm_feature</name><argument_list pos:start="65:25" pos:end="65:45">(<argument pos:start="65:26" pos:end="65:28"><expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:28">env</name></expr></argument>, <argument pos:start="65:31" pos:end="65:44"><expr pos:start="65:31" pos:end="65:44"><name pos:start="65:31" pos:end="65:44">ARM_FEATURE_V7</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:48" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:34">

            <comment type="block" pos:start="67:13" pos:end="67:38">/* Wait for interrupt.  */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:33"><expr pos:start="69:13" pos:end="69:32"><call pos:start="69:13" pos:end="69:32"><name pos:start="69:13" pos:end="69:25">gen_set_pc_im</name><argument_list pos:start="69:26" pos:end="69:32">(<argument pos:start="69:27" pos:end="69:31"><expr pos:start="69:27" pos:end="69:31"><name pos:start="69:27" pos:end="69:31"><name pos:start="69:27" pos:end="69:27">s</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:31">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:34"><expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:13">s</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:21">is_jmp</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:33">DISAS_WFI</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="75:9" pos:end="75:17">return <expr pos:start="75:16" pos:end="75:16"><literal type="number" pos:start="75:16" pos:end="75:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="109:5"><if pos:start="81:5" pos:end="109:5">if <condition pos:start="81:8" pos:end="81:42">(<expr pos:start="81:9" pos:end="81:41"><operator pos:start="81:9" pos:end="81:9">(</operator><name pos:start="81:10" pos:end="81:13">insn</name> <operator pos:start="81:15" pos:end="81:15">&amp;</operator> <literal type="number" pos:start="81:17" pos:end="81:26">0x0fff0fff</literal><operator pos:start="81:27" pos:end="81:27">)</operator> <operator pos:start="81:29" pos:end="81:30">==</operator> <literal type="number" pos:start="81:32" pos:end="81:41">0x0e070f58</literal></expr>)</condition> <block pos:start="81:44" pos:end="109:5">{<block_content pos:start="89:9" pos:end="99:9">

        <comment type="block" pos:start="83:9" pos:end="87:11">/* 0,c7,c8,2: Not all pre-v6 cores implemented this WFI,

         * so this is slightly over-broad.

         */</comment>

        <if_stmt pos:start="89:9" pos:end="99:9"><if pos:start="89:9" pos:end="99:9">if <condition pos:start="89:12" pos:end="89:46">(<expr pos:start="89:13" pos:end="89:45"><operator pos:start="89:13" pos:end="89:13">!</operator><call pos:start="89:14" pos:end="89:45"><name pos:start="89:14" pos:end="89:24">arm_feature</name><argument_list pos:start="89:25" pos:end="89:45">(<argument pos:start="89:26" pos:end="89:28"><expr pos:start="89:26" pos:end="89:28"><name pos:start="89:26" pos:end="89:28">env</name></expr></argument>, <argument pos:start="89:31" pos:end="89:44"><expr pos:start="89:31" pos:end="89:44"><name pos:start="89:31" pos:end="89:44">ARM_FEATURE_V6</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:48" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:21">

            <comment type="block" pos:start="91:13" pos:end="91:38">/* Wait for interrupt.  */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:33"><expr pos:start="93:13" pos:end="93:32"><call pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:25">gen_set_pc_im</name><argument_list pos:start="93:26" pos:end="93:32">(<argument pos:start="93:27" pos:end="93:31"><expr pos:start="93:27" pos:end="93:31"><name pos:start="93:27" pos:end="93:31"><name pos:start="93:27" pos:end="93:27">s</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:31">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:34"><expr pos:start="95:13" pos:end="95:33"><name pos:start="95:13" pos:end="95:21"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:21">is_jmp</name></name> <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:33">DISAS_WFI</name></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:21">return <expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="101:9" pos:end="107:11">/* Otherwise fall through to handle via helper function.

         * In particular, on v7 and some v6 cores this is one of

         * the VA-PA registers.

         */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:28"><expr pos:start="113:5" pos:end="113:27"><name pos:start="113:5" pos:end="113:6">rd</name> <operator pos:start="113:8" pos:end="113:8">=</operator> <operator pos:start="113:10" pos:end="113:10">(</operator><name pos:start="113:11" pos:end="113:14">insn</name> <operator pos:start="113:16" pos:end="113:17">&gt;&gt;</operator> <literal type="number" pos:start="113:19" pos:end="113:20">12</literal><operator pos:start="113:21" pos:end="113:21">)</operator> <operator pos:start="113:23" pos:end="113:23">&amp;</operator> <literal type="number" pos:start="113:25" pos:end="113:27">0xf</literal></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="119:17"><if pos:start="117:5" pos:end="119:17">if <condition pos:start="117:8" pos:end="117:46">(<expr pos:start="117:9" pos:end="117:45"><call pos:start="117:9" pos:end="117:45"><name pos:start="117:9" pos:end="117:27">cp15_tls_load_store</name><argument_list pos:start="117:28" pos:end="117:45">(<argument pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:31">env</name></expr></argument>, <argument pos:start="117:34" pos:end="117:34"><expr pos:start="117:34" pos:end="117:34"><name pos:start="117:34" pos:end="117:34">s</name></expr></argument>, <argument pos:start="117:37" pos:end="117:40"><expr pos:start="117:37" pos:end="117:40"><name pos:start="117:37" pos:end="117:40">insn</name></expr></argument>, <argument pos:start="117:43" pos:end="117:44"><expr pos:start="117:43" pos:end="117:44"><name pos:start="117:43" pos:end="117:44">rd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:17"><block_content pos:start="119:9" pos:end="119:17">

        <return pos:start="119:9" pos:end="119:17">return <expr pos:start="119:16" pos:end="119:16"><literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:31"><expr pos:start="123:5" pos:end="123:30"><name pos:start="123:5" pos:end="123:8">tmp2</name> <operator pos:start="123:10" pos:end="123:10">=</operator> <call pos:start="123:12" pos:end="123:30"><name pos:start="123:12" pos:end="123:24">tcg_const_i32</name><argument_list pos:start="123:25" pos:end="123:30">(<argument pos:start="123:26" pos:end="123:29"><expr pos:start="123:26" pos:end="123:29"><name pos:start="123:26" pos:end="123:29">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="161:5"><if pos:start="125:5" pos:end="141:5">if <condition pos:start="125:8" pos:end="125:29">(<expr pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:12">insn</name> <operator pos:start="125:14" pos:end="125:14">&amp;</operator> <name pos:start="125:16" pos:end="125:28">ARM_CP_RW_BIT</name></expr>)</condition> <block pos:start="125:31" pos:end="141:5">{<block_content pos:start="127:9" pos:end="139:26">

        <expr_stmt pos:start="127:9" pos:end="127:24"><expr pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:11">tmp</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:23"><name pos:start="127:15" pos:end="127:21">new_tmp</name><argument_list pos:start="127:22" pos:end="127:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:48"><expr pos:start="129:9" pos:end="129:47"><call pos:start="129:9" pos:end="129:47"><name pos:start="129:9" pos:end="129:27">gen_helper_get_cp15</name><argument_list pos:start="129:28" pos:end="129:47">(<argument pos:start="129:29" pos:end="129:31"><expr pos:start="129:29" pos:end="129:31"><name pos:start="129:29" pos:end="129:31">tmp</name></expr></argument>, <argument pos:start="129:34" pos:end="129:40"><expr pos:start="129:34" pos:end="129:40"><name pos:start="129:34" pos:end="129:40">cpu_env</name></expr></argument>, <argument pos:start="129:43" pos:end="129:46"><expr pos:start="129:43" pos:end="129:46"><name pos:start="129:43" pos:end="129:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="131:9" pos:end="131:76">/* If the destination register is r15 then sets condition codes.  */</comment>

        <if_stmt pos:start="133:9" pos:end="139:26"><if pos:start="133:9" pos:end="135:34">if <condition pos:start="133:12" pos:end="133:21">(<expr pos:start="133:13" pos:end="133:20"><name pos:start="133:13" pos:end="133:14">rd</name> <operator pos:start="133:16" pos:end="133:17">!=</operator> <literal type="number" pos:start="133:19" pos:end="133:20">15</literal></expr>)</condition><block type="pseudo" pos:start="135:13" pos:end="135:34"><block_content pos:start="135:13" pos:end="135:34">

            <expr_stmt pos:start="135:13" pos:end="135:34"><expr pos:start="135:13" pos:end="135:33"><call pos:start="135:13" pos:end="135:33"><name pos:start="135:13" pos:end="135:21">store_reg</name><argument_list pos:start="135:22" pos:end="135:33">(<argument pos:start="135:23" pos:end="135:23"><expr pos:start="135:23" pos:end="135:23"><name pos:start="135:23" pos:end="135:23">s</name></expr></argument>, <argument pos:start="135:26" pos:end="135:27"><expr pos:start="135:26" pos:end="135:27"><name pos:start="135:26" pos:end="135:27">rd</name></expr></argument>, <argument pos:start="135:30" pos:end="135:32"><expr pos:start="135:30" pos:end="135:32"><name pos:start="135:30" pos:end="135:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="137:9" pos:end="139:26">else<block type="pseudo" pos:start="139:13" pos:end="139:26"><block_content pos:start="139:13" pos:end="139:26">

            <expr_stmt pos:start="139:13" pos:end="139:26"><expr pos:start="139:13" pos:end="139:25"><call pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:20">dead_tmp</name><argument_list pos:start="139:21" pos:end="139:25">(<argument pos:start="139:22" pos:end="139:24"><expr pos:start="139:22" pos:end="139:24"><name pos:start="139:22" pos:end="139:24">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="161:5">else <block pos:start="141:12" pos:end="161:5">{<block_content pos:start="143:9" pos:end="159:29">

        <expr_stmt pos:start="143:9" pos:end="143:30"><expr pos:start="143:9" pos:end="143:29"><name pos:start="143:9" pos:end="143:11">tmp</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <call pos:start="143:15" pos:end="143:29"><name pos:start="143:15" pos:end="143:22">load_reg</name><argument_list pos:start="143:23" pos:end="143:29">(<argument pos:start="143:24" pos:end="143:24"><expr pos:start="143:24" pos:end="143:24"><name pos:start="143:24" pos:end="143:24">s</name></expr></argument>, <argument pos:start="143:27" pos:end="143:28"><expr pos:start="143:27" pos:end="143:28"><name pos:start="143:27" pos:end="143:28">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:48"><expr pos:start="145:9" pos:end="145:47"><call pos:start="145:9" pos:end="145:47"><name pos:start="145:9" pos:end="145:27">gen_helper_set_cp15</name><argument_list pos:start="145:28" pos:end="145:47">(<argument pos:start="145:29" pos:end="145:35"><expr pos:start="145:29" pos:end="145:35"><name pos:start="145:29" pos:end="145:35">cpu_env</name></expr></argument>, <argument pos:start="145:38" pos:end="145:41"><expr pos:start="145:38" pos:end="145:41"><name pos:start="145:38" pos:end="145:41">tmp2</name></expr></argument>, <argument pos:start="145:44" pos:end="145:46"><expr pos:start="145:44" pos:end="145:46"><name pos:start="145:44" pos:end="145:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:22"><expr pos:start="147:9" pos:end="147:21"><call pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:16">dead_tmp</name><argument_list pos:start="147:17" pos:end="147:21">(<argument pos:start="147:18" pos:end="147:20"><expr pos:start="147:18" pos:end="147:20"><name pos:start="147:18" pos:end="147:20">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="149:9" pos:end="153:76">/* Normally we would always end the TB here, but Linux

         * arch/arm/mach-pxa/sleep.S expects two instructions following

         * an MMU enable to execute from cache.  Imitate this behaviour.  */</comment>

        <if_stmt pos:start="155:9" pos:end="159:29"><if pos:start="155:9" pos:end="159:29">if <condition pos:start="155:12" pos:end="157:50">(<expr pos:start="155:13" pos:end="157:49"><operator pos:start="155:13" pos:end="155:13">!</operator><call pos:start="155:14" pos:end="155:49"><name pos:start="155:14" pos:end="155:24">arm_feature</name><argument_list pos:start="155:25" pos:end="155:49">(<argument pos:start="155:26" pos:end="155:28"><expr pos:start="155:26" pos:end="155:28"><name pos:start="155:26" pos:end="155:28">env</name></expr></argument>, <argument pos:start="155:31" pos:end="155:48"><expr pos:start="155:31" pos:end="155:48"><name pos:start="155:31" pos:end="155:48">ARM_FEATURE_XSCALE</name></expr></argument>)</argument_list></call> <operator pos:start="155:51" pos:end="155:52">||</operator>

                <operator pos:start="157:17" pos:end="157:17">(</operator><name pos:start="157:18" pos:end="157:21">insn</name> <operator pos:start="157:23" pos:end="157:23">&amp;</operator> <literal type="number" pos:start="157:25" pos:end="157:34">0x0fff0fff</literal><operator pos:start="157:35" pos:end="157:35">)</operator> <operator pos:start="157:37" pos:end="157:38">!=</operator> <literal type="number" pos:start="157:40" pos:end="157:49">0x0e010f10</literal></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:29"><block_content pos:start="159:13" pos:end="159:29">

            <expr_stmt pos:start="159:13" pos:end="159:29"><expr pos:start="159:13" pos:end="159:28"><call pos:start="159:13" pos:end="159:28"><name pos:start="159:13" pos:end="159:25">gen_lookup_tb</name><argument_list pos:start="159:26" pos:end="159:28">(<argument pos:start="159:27" pos:end="159:27"><expr pos:start="159:27" pos:end="159:27"><name pos:start="159:27" pos:end="159:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:28"><expr pos:start="163:5" pos:end="163:27"><call pos:start="163:5" pos:end="163:27"><name pos:start="163:5" pos:end="163:21">tcg_temp_free_i32</name><argument_list pos:start="163:22" pos:end="163:27">(<argument pos:start="163:23" pos:end="163:26"><expr pos:start="163:23" pos:end="163:26"><name pos:start="163:23" pos:end="163:26">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="165:5" pos:end="165:13">return <expr pos:start="165:12" pos:end="165:12"><literal type="number" pos:start="165:12" pos:end="165:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
