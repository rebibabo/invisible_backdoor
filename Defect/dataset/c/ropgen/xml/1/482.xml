<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/482.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">gen_tlbre_440</name><parameter_list pos:start="1:26" pos:end="1:44">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">DisasContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="50:0">

<cpp:if pos:start="5:1" pos:end="5:29">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:29"><call pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:29">(<argument pos:start="5:13" pos:end="5:28"><expr pos:start="5:13" pos:end="5:28"><name pos:start="5:13" pos:end="5:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="7:5" pos:end="10:0"><expr pos:start="7:5" pos:end="7:51"><call pos:start="7:5" pos:end="7:51"><name pos:start="7:5" pos:end="7:23">gen_inval_exception</name><argument_list pos:start="7:24" pos:end="7:51">(<argument pos:start="7:25" pos:end="7:27"><expr pos:start="7:25" pos:end="7:27"><name pos:start="7:25" pos:end="7:27">ctx</name></expr></argument>, <argument pos:start="7:30" pos:end="7:50"><expr pos:start="7:30" pos:end="7:50"><name pos:start="7:30" pos:end="7:50">POWERPC_EXCP_PRIV_OPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:26">(<expr pos:start="11:9" pos:end="11:25"><call pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:16">unlikely</name><argument_list pos:start="11:17" pos:end="11:25">(<argument pos:start="11:18" pos:end="11:24"><expr pos:start="11:18" pos:end="11:24"><name pos:start="11:18" pos:end="11:24"><name pos:start="11:18" pos:end="11:20">ctx</name><operator pos:start="11:21" pos:end="11:22">-&gt;</operator><name pos:start="11:23" pos:end="11:24">pr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:28" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:15">

        <expr_stmt pos:start="13:9" pos:end="13:56"><expr pos:start="13:9" pos:end="13:55"><call pos:start="13:9" pos:end="13:55"><name pos:start="13:9" pos:end="13:27">gen_inval_exception</name><argument_list pos:start="13:28" pos:end="13:55">(<argument pos:start="13:29" pos:end="13:31"><expr pos:start="13:29" pos:end="13:31"><name pos:start="13:29" pos:end="13:31">ctx</name></expr></argument>, <argument pos:start="13:34" pos:end="13:54"><expr pos:start="13:34" pos:end="13:54"><name pos:start="13:34" pos:end="13:54">POWERPC_EXCP_PRIV_OPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="19:5" pos:end="50:0">switch <condition pos:start="19:12" pos:end="19:28">(<expr pos:start="19:13" pos:end="19:27"><call pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:14">rB</name><argument_list pos:start="19:15" pos:end="19:27">(<argument pos:start="19:16" pos:end="19:26"><expr pos:start="19:16" pos:end="19:26"><name pos:start="19:16" pos:end="19:26"><name pos:start="19:16" pos:end="19:18">ctx</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:26">opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:30" pos:end="50:0">{<block_content pos:start="21:5" pos:end="45:14">

    <case pos:start="21:5" pos:end="21:11">case <expr pos:start="21:10" pos:end="21:10"><literal type="number" pos:start="21:10" pos:end="21:10">0</literal></expr>:</case>

    <case pos:start="23:5" pos:end="23:11">case <expr pos:start="23:10" pos:end="23:10"><literal type="number" pos:start="23:10" pos:end="23:10">1</literal></expr>:</case>

    <case pos:start="25:5" pos:end="25:11">case <expr pos:start="25:10" pos:end="25:10"><literal type="number" pos:start="25:10" pos:end="25:10">2</literal></expr>:</case>

        <block pos:start="27:9" pos:end="37:9">{<block_content pos:start="29:13" pos:end="35:34">

            <decl_stmt pos:start="29:13" pos:end="29:57"><decl pos:start="29:13" pos:end="29:56"><type pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:20">TCGv_i32</name></type> <name pos:start="29:22" pos:end="29:23">t0</name> <init pos:start="29:25" pos:end="29:56">= <expr pos:start="29:27" pos:end="29:56"><call pos:start="29:27" pos:end="29:56"><name pos:start="29:27" pos:end="29:39">tcg_const_i32</name><argument_list pos:start="29:40" pos:end="29:56">(<argument pos:start="29:41" pos:end="29:55"><expr pos:start="29:41" pos:end="29:55"><call pos:start="29:41" pos:end="29:55"><name pos:start="29:41" pos:end="29:42">rB</name><argument_list pos:start="29:43" pos:end="29:55">(<argument pos:start="29:44" pos:end="29:54"><expr pos:start="29:44" pos:end="29:54"><name pos:start="29:44" pos:end="29:54"><name pos:start="29:44" pos:end="29:46">ctx</name><operator pos:start="29:47" pos:end="29:48">-&gt;</operator><name pos:start="29:49" pos:end="29:54">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="31:13" pos:end="33:63"><expr pos:start="31:13" pos:end="33:62"><call pos:start="31:13" pos:end="33:62"><name pos:start="31:13" pos:end="31:32">gen_helper_440_tlbre</name><argument_list pos:start="31:33" pos:end="33:62">(<argument pos:start="31:34" pos:end="31:57"><expr pos:start="31:34" pos:end="31:57"><name pos:start="31:34" pos:end="31:57"><name pos:start="31:34" pos:end="31:40">cpu_gpr</name><index pos:start="31:41" pos:end="31:57">[<expr pos:start="31:42" pos:end="31:56"><call pos:start="31:42" pos:end="31:56"><name pos:start="31:42" pos:end="31:43">rD</name><argument_list pos:start="31:44" pos:end="31:56">(<argument pos:start="31:45" pos:end="31:55"><expr pos:start="31:45" pos:end="31:55"><name pos:start="31:45" pos:end="31:55"><name pos:start="31:45" pos:end="31:47">ctx</name><operator pos:start="31:48" pos:end="31:49">-&gt;</operator><name pos:start="31:50" pos:end="31:55">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument pos:start="31:60" pos:end="31:66"><expr pos:start="31:60" pos:end="31:66"><name pos:start="31:60" pos:end="31:66">cpu_env</name></expr></argument>,

                                 <argument pos:start="33:34" pos:end="33:35"><expr pos:start="33:34" pos:end="33:35"><name pos:start="33:34" pos:end="33:35">t0</name></expr></argument>, <argument pos:start="33:38" pos:end="33:61"><expr pos:start="33:38" pos:end="33:61"><name pos:start="33:38" pos:end="33:61"><name pos:start="33:38" pos:end="33:44">cpu_gpr</name><index pos:start="33:45" pos:end="33:61">[<expr pos:start="33:46" pos:end="33:60"><call pos:start="33:46" pos:end="33:60"><name pos:start="33:46" pos:end="33:47">rA</name><argument_list pos:start="33:48" pos:end="33:60">(<argument pos:start="33:49" pos:end="33:59"><expr pos:start="33:49" pos:end="33:59"><name pos:start="33:49" pos:end="33:59"><name pos:start="33:49" pos:end="33:51">ctx</name><operator pos:start="33:52" pos:end="33:53">-&gt;</operator><name pos:start="33:54" pos:end="33:59">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:34"><expr pos:start="35:13" pos:end="35:33"><call pos:start="35:13" pos:end="35:33"><name pos:start="35:13" pos:end="35:29">tcg_temp_free_i32</name><argument_list pos:start="35:30" pos:end="35:33">(<argument pos:start="35:31" pos:end="35:32"><expr pos:start="35:31" pos:end="35:32"><name pos:start="35:31" pos:end="35:32">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <default pos:start="41:5" pos:end="41:12">default:</default>

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><call pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:27">gen_inval_exception</name><argument_list pos:start="43:28" pos:end="43:58">(<argument pos:start="43:29" pos:end="43:31"><expr pos:start="43:29" pos:end="43:31"><name pos:start="43:29" pos:end="43:31">ctx</name></expr></argument>, <argument pos:start="43:34" pos:end="43:57"><expr pos:start="43:34" pos:end="43:57"><name pos:start="43:34" pos:end="43:57">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
