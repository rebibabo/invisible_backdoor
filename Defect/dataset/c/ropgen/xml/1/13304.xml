<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13304.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">qemu_sem_wait</name><parameter_list pos:start="1:19" pos:end="1:38">(<parameter pos:start="1:20" pos:end="1:37"><decl pos:start="1:20" pos:end="1:37"><type pos:start="1:20" pos:end="1:34"><name pos:start="1:20" pos:end="1:32">QemuSemaphore</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">sem</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="7:5" pos:end="38:0">

<cpp:if pos:start="5:1" pos:end="5:45">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:45"><call pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:22">(<argument pos:start="5:13" pos:end="5:21"><expr pos:start="5:13" pos:end="5:21"><name pos:start="5:13" pos:end="5:21">__APPLE__</name></expr></argument>)</argument_list></call> <operator pos:start="5:24" pos:end="5:25">||</operator> <call pos:start="5:27" pos:end="5:45"><name pos:start="5:27" pos:end="5:33">defined</name><argument_list pos:start="5:34" pos:end="5:45">(<argument pos:start="5:35" pos:end="5:44"><expr pos:start="5:35" pos:end="5:44"><name pos:start="5:35" pos:end="5:44">__NetBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="7:5" pos:end="7:35"><expr pos:start="7:5" pos:end="7:34"><call pos:start="7:5" pos:end="7:34"><name pos:start="7:5" pos:end="7:22">pthread_mutex_lock</name><argument_list pos:start="7:23" pos:end="7:34">(<argument pos:start="7:24" pos:end="7:33"><expr pos:start="7:24" pos:end="7:33"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:33"><name pos:start="7:25" pos:end="7:27">sem</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:17"><expr pos:start="9:5" pos:end="9:16"><operator pos:start="9:5" pos:end="9:6">--</operator><name pos:start="9:7" pos:end="9:16"><name pos:start="9:7" pos:end="9:9">sem</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:16">count</name></name></expr>;</expr_stmt>

    <while pos:start="11:5" pos:end="15:5">while <condition pos:start="11:11" pos:end="11:26">(<expr pos:start="11:12" pos:end="11:25"><name pos:start="11:12" pos:end="11:21"><name pos:start="11:12" pos:end="11:14">sem</name><operator pos:start="11:15" pos:end="11:16">-&gt;</operator><name pos:start="11:17" pos:end="11:21">count</name></name> <operator pos:start="11:23" pos:end="11:23">&lt;</operator> <literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr>)</condition> <block pos:start="11:28" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:50">

        <expr_stmt pos:start="13:9" pos:end="13:50"><expr pos:start="13:9" pos:end="13:49"><call pos:start="13:9" pos:end="13:49"><name pos:start="13:9" pos:end="13:25">pthread_cond_wait</name><argument_list pos:start="13:26" pos:end="13:49">(<argument pos:start="13:27" pos:end="13:36"><expr pos:start="13:27" pos:end="13:36"><operator pos:start="13:27" pos:end="13:27">&amp;</operator><name pos:start="13:28" pos:end="13:36"><name pos:start="13:28" pos:end="13:30">sem</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:36">cond</name></name></expr></argument>, <argument pos:start="13:39" pos:end="13:48"><expr pos:start="13:39" pos:end="13:48"><operator pos:start="13:39" pos:end="13:39">&amp;</operator><name pos:start="13:40" pos:end="13:48"><name pos:start="13:40" pos:end="13:42">sem</name><operator pos:start="13:43" pos:end="13:44">-&gt;</operator><name pos:start="13:45" pos:end="13:48">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:36"><call pos:start="17:5" pos:end="17:36"><name pos:start="17:5" pos:end="17:24">pthread_mutex_unlock</name><argument_list pos:start="17:25" pos:end="17:36">(<argument pos:start="17:26" pos:end="17:35"><expr pos:start="17:26" pos:end="17:35"><operator pos:start="17:26" pos:end="17:26">&amp;</operator><name pos:start="17:27" pos:end="17:35"><name pos:start="17:27" pos:end="17:29">sem</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="21:5" pos:end="21:11"><decl pos:start="21:5" pos:end="21:10"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">rc</name></decl>;</decl_stmt>



    <do pos:start="25:5" pos:end="29:41">do <block pos:start="25:8" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:33">

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:10">rc</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:32"><name pos:start="27:14" pos:end="27:21">sem_wait</name><argument_list pos:start="27:22" pos:end="27:32">(<argument pos:start="27:23" pos:end="27:31"><expr pos:start="27:23" pos:end="27:31"><operator pos:start="27:23" pos:end="27:23">&amp;</operator><name pos:start="27:24" pos:end="27:31"><name pos:start="27:24" pos:end="27:26">sem</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:31">sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="29:13" pos:end="29:40">(<expr pos:start="29:14" pos:end="29:39"><name pos:start="29:14" pos:end="29:15">rc</name> <operator pos:start="29:17" pos:end="29:18">==</operator> <operator pos:start="29:20" pos:end="29:20">-</operator><literal type="number" pos:start="29:21" pos:end="29:21">1</literal> <operator pos:start="29:23" pos:end="29:24">&amp;&amp;</operator> <name pos:start="29:26" pos:end="29:30">errno</name> <operator pos:start="29:32" pos:end="29:33">==</operator> <name pos:start="29:35" pos:end="29:39">EINTR</name></expr>)</condition>;</do>

    <if_stmt pos:start="31:5" pos:end="38:0"><if pos:start="31:5" pos:end="38:0">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:10">rc</name> <operator pos:start="31:12" pos:end="31:12">&lt;</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>)</condition> <block pos:start="31:17" pos:end="38:0">{<block_content pos:start="33:9" pos:end="33:36">

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><call pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:18">error_exit</name><argument_list pos:start="33:19" pos:end="33:35">(<argument pos:start="33:20" pos:end="33:24"><expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:24">errno</name></expr></argument>, <argument pos:start="33:27" pos:end="33:34"><expr pos:start="33:27" pos:end="33:34"><name pos:start="33:27" pos:end="33:34">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
