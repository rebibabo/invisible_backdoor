<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3428.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:22">pci_data_read</name><parameter_list pos:start="1:23" pos:end="1:57">(<parameter pos:start="1:24" pos:end="1:32"><decl pos:start="1:24" pos:end="1:32"><type pos:start="1:24" pos:end="1:32"><name pos:start="1:24" pos:end="1:29">PCIBus</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:32">s</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:47"><name pos:start="1:35" pos:end="1:42">uint32_t</name></type> <name pos:start="1:44" pos:end="1:47">addr</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:56"><decl pos:start="1:50" pos:end="1:56"><type pos:start="1:50" pos:end="1:56"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:56">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:15">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:22">pci_dev</name> <init pos:start="5:24" pos:end="5:54">= <expr pos:start="5:26" pos:end="5:54"><call pos:start="5:26" pos:end="5:54"><name pos:start="5:26" pos:end="5:45">pci_dev_find_by_addr</name><argument_list pos:start="5:46" pos:end="5:54">(<argument pos:start="5:47" pos:end="5:47"><expr pos:start="5:47" pos:end="5:47"><name pos:start="5:47" pos:end="5:47">s</name></expr></argument>, <argument pos:start="5:50" pos:end="5:53"><expr pos:start="5:50" pos:end="5:53"><name pos:start="5:50" pos:end="5:53">addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:24">config_addr</name> <init pos:start="7:26" pos:end="7:61">= <expr pos:start="7:28" pos:end="7:61"><name pos:start="7:28" pos:end="7:31">addr</name> <operator pos:start="7:33" pos:end="7:33">&amp;</operator> <operator pos:start="7:35" pos:end="7:35">(</operator><name pos:start="7:36" pos:end="7:56">PCI_CONFIG_SPACE_SIZE</name> <operator pos:start="7:58" pos:end="7:58">-</operator> <literal type="number" pos:start="7:60" pos:end="7:60">1</literal><operator pos:start="7:61" pos:end="7:61">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><call pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:44">(<argument pos:start="13:12" pos:end="13:43"><expr pos:start="13:12" pos:end="13:43"><name pos:start="13:12" pos:end="13:14">len</name> <operator pos:start="13:16" pos:end="13:17">==</operator> <literal type="number" pos:start="13:19" pos:end="13:19">1</literal> <operator pos:start="13:21" pos:end="13:22">||</operator> <name pos:start="13:24" pos:end="13:26">len</name> <operator pos:start="13:28" pos:end="13:29">==</operator> <literal type="number" pos:start="13:31" pos:end="13:31">2</literal> <operator pos:start="13:33" pos:end="13:34">||</operator> <name pos:start="13:36" pos:end="13:38">len</name> <operator pos:start="13:40" pos:end="13:41">==</operator> <literal type="number" pos:start="13:43" pos:end="13:43">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:16">pci_dev</name></expr>)</condition> <block pos:start="15:19" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:20">

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><operator pos:start="17:16" pos:end="17:16">~</operator><literal type="number" pos:start="17:17" pos:end="17:19">0x0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:58"><expr pos:start="23:5" pos:end="23:57"><name pos:start="23:5" pos:end="23:7">val</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:57"><name pos:start="23:11" pos:end="23:30"><name pos:start="23:11" pos:end="23:17">pci_dev</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:30">config_read</name></name><argument_list pos:start="23:31" pos:end="23:57">(<argument pos:start="23:32" pos:end="23:38"><expr pos:start="23:32" pos:end="23:38"><name pos:start="23:32" pos:end="23:38">pci_dev</name></expr></argument>, <argument pos:start="23:41" pos:end="23:51"><expr pos:start="23:41" pos:end="23:51"><name pos:start="23:41" pos:end="23:51">config_addr</name></expr></argument>, <argument pos:start="23:54" pos:end="23:56"><expr pos:start="23:54" pos:end="23:56"><name pos:start="23:54" pos:end="23:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="27:64"><expr pos:start="25:5" pos:end="27:63"><call pos:start="25:5" pos:end="27:63"><name pos:start="25:5" pos:end="25:15">PCI_DPRINTF</name><argument_list pos:start="25:16" pos:end="27:63">(<argument pos:start="25:17" pos:end="25:67"><expr pos:start="25:17" pos:end="25:67"><literal type="string" pos:start="25:17" pos:end="25:34">"%s: %s: addr=%02"</literal><name pos:start="25:35" pos:end="25:40">PRIx32</name><literal type="string" pos:start="25:41" pos:end="25:50">" val=%08"</literal><name pos:start="25:51" pos:end="25:56">PRIx32</name><literal type="string" pos:start="25:57" pos:end="25:67">" len=%d\n"</literal></expr></argument>,

                <argument pos:start="27:17" pos:end="27:24"><expr pos:start="27:17" pos:end="27:24"><name pos:start="27:17" pos:end="27:24">__func__</name></expr></argument>, <argument pos:start="27:27" pos:end="27:39"><expr pos:start="27:27" pos:end="27:39"><name pos:start="27:27" pos:end="27:39"><name pos:start="27:27" pos:end="27:33">pci_dev</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:39">name</name></name></expr></argument>, <argument pos:start="27:42" pos:end="27:52"><expr pos:start="27:42" pos:end="27:52"><name pos:start="27:42" pos:end="27:52">config_addr</name></expr></argument>, <argument pos:start="27:55" pos:end="27:57"><expr pos:start="27:55" pos:end="27:57"><name pos:start="27:55" pos:end="27:57">val</name></expr></argument>, <argument pos:start="27:60" pos:end="27:62"><expr pos:start="27:60" pos:end="27:62"><name pos:start="27:60" pos:end="27:62">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="31:5" pos:end="31:15">return <expr pos:start="31:12" pos:end="31:14"><name pos:start="31:12" pos:end="31:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
