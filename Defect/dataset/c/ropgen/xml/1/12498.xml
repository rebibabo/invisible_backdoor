<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12498.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">ff_amf_tag_contents</name><parameter_list pos:start="1:32" pos:end="1:88">(<parameter pos:start="1:33" pos:end="1:41"><decl pos:start="1:33" pos:end="1:41"><type pos:start="1:33" pos:end="1:41"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ctx</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:62"><decl pos:start="1:44" pos:end="1:62"><type pos:start="1:44" pos:end="1:62"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:87"><decl pos:start="1:65" pos:end="1:87"><type pos:start="1:65" pos:end="1:87"><specifier pos:start="1:65" pos:end="1:69">const</specifier> <name pos:start="1:71" pos:end="1:77">uint8_t</name> <modifier pos:start="1:79" pos:end="1:79">*</modifier></type><name pos:start="1:80" pos:end="1:87">data_end</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:5">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:18"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:18">[<expr pos:start="7:14" pos:end="7:17"><literal type="number" pos:start="7:14" pos:end="7:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:15"><if pos:start="11:5" pos:end="13:15">if <condition pos:start="11:8" pos:end="11:25">(<expr pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:12">data</name> <operator pos:start="11:14" pos:end="11:15">&gt;=</operator> <name pos:start="11:17" pos:end="11:24">data_end</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:15"><block_content pos:start="13:9" pos:end="13:15">

        <return pos:start="13:9" pos:end="13:15">return;</return></block_content></block></if></if_stmt>

    <switch pos:start="15:5" pos:end="119:5">switch <condition pos:start="15:12" pos:end="15:20">(<expr pos:start="15:13" pos:end="15:19"><operator pos:start="15:13" pos:end="15:13">*</operator><name pos:start="15:14" pos:end="15:17">data</name><operator pos:start="15:18" pos:end="15:19">++</operator></expr>)</condition> <block pos:start="15:22" pos:end="119:5">{<block_content pos:start="17:5" pos:end="117:15">

    <case pos:start="17:5" pos:end="17:30">case <expr pos:start="17:10" pos:end="17:29"><name pos:start="17:10" pos:end="17:29">AMF_DATA_TYPE_NUMBER</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:80"><expr pos:start="19:9" pos:end="19:79"><call pos:start="19:9" pos:end="19:79"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:79">(<argument pos:start="19:16" pos:end="19:18"><expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">ctx</name></expr></argument>, <argument pos:start="19:21" pos:end="19:32"><expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="19:35" pos:end="19:48"><expr pos:start="19:35" pos:end="19:48"><literal type="string" pos:start="19:35" pos:end="19:48">" number %g\n"</literal></expr></argument>, <argument pos:start="19:51" pos:end="19:78"><expr pos:start="19:51" pos:end="19:78"><call pos:start="19:51" pos:end="19:78"><name pos:start="19:51" pos:end="19:63">av_int2double</name><argument_list pos:start="19:64" pos:end="19:78">(<argument pos:start="19:65" pos:end="19:77"><expr pos:start="19:65" pos:end="19:77"><call pos:start="19:65" pos:end="19:77"><name pos:start="19:65" pos:end="19:71">AV_RB64</name><argument_list pos:start="19:72" pos:end="19:77">(<argument pos:start="19:73" pos:end="19:76"><expr pos:start="19:73" pos:end="19:76"><name pos:start="19:73" pos:end="19:76">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    <case pos:start="23:5" pos:end="23:28">case <expr pos:start="23:10" pos:end="23:27"><name pos:start="23:10" pos:end="23:27">AMF_DATA_TYPE_BOOL</name></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:55"><expr pos:start="25:9" pos:end="25:54"><call pos:start="25:9" pos:end="25:54"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:54">(<argument pos:start="25:16" pos:end="25:18"><expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">ctx</name></expr></argument>, <argument pos:start="25:21" pos:end="25:32"><expr pos:start="25:21" pos:end="25:32"><name pos:start="25:21" pos:end="25:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="25:35" pos:end="25:46"><expr pos:start="25:35" pos:end="25:46"><literal type="string" pos:start="25:35" pos:end="25:46">" bool %d\n"</literal></expr></argument>, <argument pos:start="25:49" pos:end="25:53"><expr pos:start="25:49" pos:end="25:53"><operator pos:start="25:49" pos:end="25:49">*</operator><name pos:start="25:50" pos:end="25:53">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    <case pos:start="29:5" pos:end="29:30">case <expr pos:start="29:10" pos:end="29:29"><name pos:start="29:10" pos:end="29:29">AMF_DATA_TYPE_STRING</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:35">case <expr pos:start="31:10" pos:end="31:34"><name pos:start="31:10" pos:end="31:34">AMF_DATA_TYPE_LONG_STRING</name></expr>:</case>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:45">(<expr pos:start="33:13" pos:end="33:44"><name pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:16">data</name><index pos:start="33:17" pos:end="33:20">[<expr pos:start="33:18" pos:end="33:19"><operator pos:start="33:18" pos:end="33:18">-</operator><literal type="number" pos:start="33:19" pos:end="33:19">1</literal></expr>]</index></name> <operator pos:start="33:22" pos:end="33:23">==</operator> <name pos:start="33:25" pos:end="33:44">AMF_DATA_TYPE_STRING</name></expr>)</condition> <block pos:start="33:47" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:46">

            <expr_stmt pos:start="35:13" pos:end="35:46"><expr pos:start="35:13" pos:end="35:45"><name pos:start="35:13" pos:end="35:16">size</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:45"><name pos:start="35:20" pos:end="35:38">bytestream_get_be16</name><argument_list pos:start="35:39" pos:end="35:45">(<argument pos:start="35:40" pos:end="35:44"><expr pos:start="35:40" pos:end="35:44"><operator pos:start="35:40" pos:end="35:40">&amp;</operator><name pos:start="35:41" pos:end="35:44">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="41:9">else <block pos:start="37:16" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:46">

            <expr_stmt pos:start="39:13" pos:end="39:46"><expr pos:start="39:13" pos:end="39:45"><name pos:start="39:13" pos:end="39:16">size</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:45"><name pos:start="39:20" pos:end="39:38">bytestream_get_be32</name><argument_list pos:start="39:39" pos:end="39:45">(<argument pos:start="39:40" pos:end="39:44"><expr pos:start="39:40" pos:end="39:44"><operator pos:start="39:40" pos:end="39:40">&amp;</operator><name pos:start="39:41" pos:end="39:44">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:12">size</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:32"><name pos:start="43:16" pos:end="43:20">FFMIN</name><argument_list pos:start="43:21" pos:end="43:32">(<argument pos:start="43:22" pos:end="43:25"><expr pos:start="43:22" pos:end="43:25"><name pos:start="43:22" pos:end="43:25">size</name></expr></argument>, <argument pos:start="43:28" pos:end="43:31"><expr pos:start="43:28" pos:end="43:31"><literal type="number" pos:start="43:28" pos:end="43:31">1023</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:32"><expr pos:start="45:9" pos:end="45:31"><call pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:14">memcpy</name><argument_list pos:start="45:15" pos:end="45:31">(<argument pos:start="45:16" pos:end="45:18"><expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">buf</name></expr></argument>, <argument pos:start="45:21" pos:end="45:24"><expr pos:start="45:21" pos:end="45:24"><name pos:start="45:21" pos:end="45:24">data</name></expr></argument>, <argument pos:start="45:27" pos:end="45:30"><expr pos:start="45:27" pos:end="45:30"><name pos:start="45:27" pos:end="45:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:22"><expr pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:11">buf</name><index pos:start="47:12" pos:end="47:17">[<expr pos:start="47:13" pos:end="47:16"><name pos:start="47:13" pos:end="47:16">size</name></expr>]</index></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="number" pos:start="47:21" pos:end="47:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:57"><expr pos:start="49:9" pos:end="49:56"><call pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:56">(<argument pos:start="49:16" pos:end="49:18"><expr pos:start="49:16" pos:end="49:18"><name pos:start="49:16" pos:end="49:18">ctx</name></expr></argument>, <argument pos:start="49:21" pos:end="49:32"><expr pos:start="49:21" pos:end="49:32"><name pos:start="49:21" pos:end="49:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="49:35" pos:end="49:50"><expr pos:start="49:35" pos:end="49:50"><literal type="string" pos:start="49:35" pos:end="49:50">" string '%s'\n"</literal></expr></argument>, <argument pos:start="49:53" pos:end="49:55"><expr pos:start="49:53" pos:end="49:55"><name pos:start="49:53" pos:end="49:55">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    <case pos:start="53:5" pos:end="53:28">case <expr pos:start="53:10" pos:end="53:27"><name pos:start="53:10" pos:end="53:27">AMF_DATA_TYPE_NULL</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><call pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:44">(<argument pos:start="55:16" pos:end="55:18"><expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">ctx</name></expr></argument>, <argument pos:start="55:21" pos:end="55:32"><expr pos:start="55:21" pos:end="55:32"><name pos:start="55:21" pos:end="55:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="55:35" pos:end="55:43"><expr pos:start="55:35" pos:end="55:43"><literal type="string" pos:start="55:35" pos:end="55:43">" NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    <case pos:start="59:5" pos:end="59:29">case <expr pos:start="59:10" pos:end="59:28"><name pos:start="59:10" pos:end="59:28">AMF_DATA_TYPE_ARRAY</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:18"><expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:12">data</name> <operator pos:start="61:14" pos:end="61:15">+=</operator> <literal type="number" pos:start="61:17" pos:end="61:17">4</literal></expr>;</expr_stmt>

    <case pos:start="63:5" pos:end="63:30">case <expr pos:start="63:10" pos:end="63:29"><name pos:start="63:10" pos:end="63:29">AMF_DATA_TYPE_OBJECT</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><call pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:41">(<argument pos:start="65:16" pos:end="65:18"><expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ctx</name></expr></argument>, <argument pos:start="65:21" pos:end="65:32"><expr pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="65:35" pos:end="65:40"><expr pos:start="65:35" pos:end="65:40"><literal type="string" pos:start="65:35" pos:end="65:40">" {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="67:9" pos:end="105:9">for <control pos:start="67:13" pos:end="67:16">(<init pos:start="67:14" pos:end="67:14">;</init><condition pos:start="67:15" pos:end="67:15">;</condition><incr/>)</control> <block pos:start="67:18" pos:end="105:9">{<block_content pos:start="69:13" pos:end="103:22">

            <decl_stmt pos:start="69:13" pos:end="69:50"><decl pos:start="69:13" pos:end="69:49"><type pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">int</name></type> <name pos:start="69:17" pos:end="69:20">size</name> <init pos:start="69:22" pos:end="69:49">= <expr pos:start="69:24" pos:end="69:49"><call pos:start="69:24" pos:end="69:49"><name pos:start="69:24" pos:end="69:42">bytestream_get_be16</name><argument_list pos:start="69:43" pos:end="69:49">(<argument pos:start="69:44" pos:end="69:48"><expr pos:start="69:44" pos:end="69:48"><operator pos:start="69:44" pos:end="69:44">&amp;</operator><name pos:start="69:45" pos:end="69:48">data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="71:13" pos:end="71:18"><decl pos:start="71:13" pos:end="71:17"><type pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">int</name></type> <name pos:start="71:17" pos:end="71:17">t</name></decl>;</decl_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:36"><expr pos:start="73:13" pos:end="73:35"><call pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:18">memcpy</name><argument_list pos:start="73:19" pos:end="73:35">(<argument pos:start="73:20" pos:end="73:22"><expr pos:start="73:20" pos:end="73:22"><name pos:start="73:20" pos:end="73:22">buf</name></expr></argument>, <argument pos:start="73:25" pos:end="73:28"><expr pos:start="73:25" pos:end="73:28"><name pos:start="73:25" pos:end="73:28">data</name></expr></argument>, <argument pos:start="73:31" pos:end="73:34"><expr pos:start="73:31" pos:end="73:34"><name pos:start="73:31" pos:end="73:34">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:15">buf</name><index pos:start="75:16" pos:end="75:21">[<expr pos:start="75:17" pos:end="75:20"><name pos:start="75:17" pos:end="75:20">size</name></expr>]</index></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="85:13"><if pos:start="77:13" pos:end="85:13">if <condition pos:start="77:16" pos:end="77:22">(<expr pos:start="77:17" pos:end="77:21"><operator pos:start="77:17" pos:end="77:17">!</operator><name pos:start="77:18" pos:end="77:21">size</name></expr>)</condition> <block pos:start="77:24" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:22">

                <expr_stmt pos:start="79:17" pos:end="79:50"><expr pos:start="79:17" pos:end="79:49"><call pos:start="79:17" pos:end="79:49"><name pos:start="79:17" pos:end="79:22">av_log</name><argument_list pos:start="79:23" pos:end="79:49">(<argument pos:start="79:24" pos:end="79:26"><expr pos:start="79:24" pos:end="79:26"><name pos:start="79:24" pos:end="79:26">ctx</name></expr></argument>, <argument pos:start="79:29" pos:end="79:40"><expr pos:start="79:29" pos:end="79:40"><name pos:start="79:29" pos:end="79:40">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="79:43" pos:end="79:48"><expr pos:start="79:43" pos:end="79:48"><literal type="string" pos:start="79:43" pos:end="79:48">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:23"><expr pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:20">data</name><operator pos:start="81:21" pos:end="81:22">++</operator></expr>;</expr_stmt>

                <break pos:start="83:17" pos:end="83:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="87:13" pos:end="89:23"><if pos:start="87:13" pos:end="89:23">if <condition pos:start="87:16" pos:end="87:52">(<expr pos:start="87:17" pos:end="87:51"><name pos:start="87:17" pos:end="87:20">size</name> <operator pos:start="87:22" pos:end="87:22">&lt;</operator> <literal type="number" pos:start="87:24" pos:end="87:24">0</literal> <operator pos:start="87:26" pos:end="87:27">||</operator> <name pos:start="87:29" pos:end="87:32">size</name> <operator pos:start="87:34" pos:end="87:35">&gt;=</operator> <name pos:start="87:37" pos:end="87:44">data_end</name> <operator pos:start="87:46" pos:end="87:46">-</operator> <name pos:start="87:48" pos:end="87:51">data</name></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:23"><block_content pos:start="89:17" pos:end="89:23">

                <return pos:start="89:17" pos:end="89:23">return;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:25"><expr pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:16">data</name> <operator pos:start="91:18" pos:end="91:19">+=</operator> <name pos:start="91:21" pos:end="91:24">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:53"><expr pos:start="93:13" pos:end="93:52"><call pos:start="93:13" pos:end="93:52"><name pos:start="93:13" pos:end="93:18">av_log</name><argument_list pos:start="93:19" pos:end="93:52">(<argument pos:start="93:20" pos:end="93:22"><expr pos:start="93:20" pos:end="93:22"><name pos:start="93:20" pos:end="93:22">ctx</name></expr></argument>, <argument pos:start="93:25" pos:end="93:36"><expr pos:start="93:25" pos:end="93:36"><name pos:start="93:25" pos:end="93:36">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="93:39" pos:end="93:46"><expr pos:start="93:39" pos:end="93:46"><literal type="string" pos:start="93:39" pos:end="93:46">"  %s: "</literal></expr></argument>, <argument pos:start="93:49" pos:end="93:51"><expr pos:start="93:49" pos:end="93:51"><name pos:start="93:49" pos:end="93:51">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:53"><expr pos:start="95:13" pos:end="95:52"><call pos:start="95:13" pos:end="95:52"><name pos:start="95:13" pos:end="95:31">ff_amf_tag_contents</name><argument_list pos:start="95:32" pos:end="95:52">(<argument pos:start="95:33" pos:end="95:35"><expr pos:start="95:33" pos:end="95:35"><name pos:start="95:33" pos:end="95:35">ctx</name></expr></argument>, <argument pos:start="95:38" pos:end="95:41"><expr pos:start="95:38" pos:end="95:41"><name pos:start="95:38" pos:end="95:41">data</name></expr></argument>, <argument pos:start="95:44" pos:end="95:51"><expr pos:start="95:44" pos:end="95:51"><name pos:start="95:44" pos:end="95:51">data_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:48"><expr pos:start="97:13" pos:end="97:47"><name pos:start="97:13" pos:end="97:13">t</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <call pos:start="97:17" pos:end="97:47"><name pos:start="97:17" pos:end="97:31">ff_amf_tag_size</name><argument_list pos:start="97:32" pos:end="97:47">(<argument pos:start="97:33" pos:end="97:36"><expr pos:start="97:33" pos:end="97:36"><name pos:start="97:33" pos:end="97:36">data</name></expr></argument>, <argument pos:start="97:39" pos:end="97:46"><expr pos:start="97:39" pos:end="97:46"><name pos:start="97:39" pos:end="97:46">data_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="101:23"><if pos:start="99:13" pos:end="101:23">if <condition pos:start="99:16" pos:end="99:46">(<expr pos:start="99:17" pos:end="99:45"><name pos:start="99:17" pos:end="99:17">t</name> <operator pos:start="99:19" pos:end="99:19">&lt;</operator> <literal type="number" pos:start="99:21" pos:end="99:21">0</literal> <operator pos:start="99:23" pos:end="99:24">||</operator> <name pos:start="99:26" pos:end="99:26">t</name> <operator pos:start="99:28" pos:end="99:29">&gt;=</operator> <name pos:start="99:31" pos:end="99:38">data_end</name> <operator pos:start="99:40" pos:end="99:40">-</operator> <name pos:start="99:42" pos:end="99:45">data</name></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:23"><block_content pos:start="101:17" pos:end="101:23">

                <return pos:start="101:17" pos:end="101:23">return;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:22"><expr pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:16">data</name> <operator pos:start="103:18" pos:end="103:19">+=</operator> <name pos:start="103:21" pos:end="103:21">t</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <return pos:start="107:9" pos:end="107:15">return;</return>

    <case pos:start="109:5" pos:end="109:34">case <expr pos:start="109:10" pos:end="109:33"><name pos:start="109:10" pos:end="109:33">AMF_DATA_TYPE_OBJECT_END</name></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:42"><expr pos:start="111:9" pos:end="111:41"><call pos:start="111:9" pos:end="111:41"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="111:41">(<argument pos:start="111:16" pos:end="111:18"><expr pos:start="111:16" pos:end="111:18"><name pos:start="111:16" pos:end="111:18">ctx</name></expr></argument>, <argument pos:start="111:21" pos:end="111:32"><expr pos:start="111:21" pos:end="111:32"><name pos:start="111:21" pos:end="111:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="111:35" pos:end="111:40"><expr pos:start="111:35" pos:end="111:40"><literal type="string" pos:start="111:35" pos:end="111:40">" }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    <default pos:start="115:5" pos:end="115:12">default:</default>

        <return pos:start="117:9" pos:end="117:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
