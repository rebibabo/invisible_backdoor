<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26282.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">PowerPCCPU</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:23">ppc4xx_init</name><parameter_list pos:start="1:24" pos:end="5:40">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:45">cpu_model</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:44"><decl pos:start="3:25" pos:end="3:44"><type pos:start="3:25" pos:end="3:44"><name pos:start="3:25" pos:end="3:35">clk_setup_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:44">cpu_clk</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:65"><decl pos:start="3:47" pos:end="3:65"><type pos:start="3:47" pos:end="3:65"><name pos:start="3:47" pos:end="3:57">clk_setup_t</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:65">tb_clk</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:39"><decl pos:start="5:25" pos:end="5:39"><type pos:start="5:25" pos:end="5:39"><name pos:start="5:25" pos:end="5:32">uint32_t</name></type> <name pos:start="5:34" pos:end="5:39">sysclk</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="53:1">{<block_content pos:start="9:5" pos:end="51:15">

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">PowerPCCPU</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUPPCState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:19">/* init CPUs */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:69"><expr pos:start="17:5" pos:end="17:68"><name pos:start="17:5" pos:end="17:7">cpu</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:68"><name pos:start="17:11" pos:end="17:21">POWERPC_CPU</name><argument_list pos:start="17:22" pos:end="17:68">(<argument pos:start="17:23" pos:end="17:67"><expr pos:start="17:23" pos:end="17:67"><call pos:start="17:23" pos:end="17:67"><name pos:start="17:23" pos:end="17:38">cpu_generic_init</name><argument_list pos:start="17:39" pos:end="17:67">(<argument pos:start="17:40" pos:end="17:55"><expr pos:start="17:40" pos:end="17:55"><name pos:start="17:40" pos:end="17:55">TYPE_POWERPC_CPU</name></expr></argument>, <argument pos:start="17:58" pos:end="17:66"><expr pos:start="17:58" pos:end="17:66"><name pos:start="17:58" pos:end="17:66">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:11">cpu</name> <operator pos:start="19:13" pos:end="19:14">==</operator> <name pos:start="19:16" pos:end="19:19">NULL</name></expr>)</condition> <block pos:start="19:22" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:16">

        <expr_stmt pos:start="21:9" pos:end="23:27"><expr pos:start="21:9" pos:end="23:26"><call pos:start="21:9" pos:end="23:26"><name pos:start="21:9" pos:end="21:15">fprintf</name><argument_list pos:start="21:16" pos:end="23:26">(<argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:22">stderr</name></expr></argument>, <argument pos:start="21:25" pos:end="21:68"><expr pos:start="21:25" pos:end="21:68"><literal type="string" pos:start="21:25" pos:end="21:68">"Unable to find PowerPC %s CPU definition\n"</literal></expr></argument>,

                <argument pos:start="23:17" pos:end="23:25"><expr pos:start="23:17" pos:end="23:25"><name pos:start="23:17" pos:end="23:25">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:16"><expr pos:start="25:9" pos:end="25:15"><call pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:12">exit</name><argument_list pos:start="25:13" pos:end="25:15">(<argument pos:start="25:14" pos:end="25:14"><expr pos:start="25:14" pos:end="25:14"><literal type="number" pos:start="25:14" pos:end="25:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:20"><expr pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:7">env</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <operator pos:start="29:11" pos:end="29:11">&amp;</operator><name pos:start="29:12" pos:end="29:19"><name pos:start="29:12" pos:end="29:14">cpu</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:11">cpu_clk</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:15">cb</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:22">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="33:25" pos:end="33:77">/* We don't care about CPU clock frequency changes */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:11">cpu_clk</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:19">opaque</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <name pos:start="35:23" pos:end="35:25">env</name></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="37:43">/* Set time-base frequency to sysclk */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:69"><expr pos:start="39:5" pos:end="39:68"><name pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:10">tb_clk</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:14">cb</name></name> <operator pos:start="39:16" pos:end="39:16">=</operator> <call pos:start="39:18" pos:end="39:68"><name pos:start="39:18" pos:end="39:36">ppc_40x_timers_init</name><argument_list pos:start="39:37" pos:end="39:68">(<argument pos:start="39:38" pos:end="39:40"><expr pos:start="39:38" pos:end="39:40"><name pos:start="39:38" pos:end="39:40">env</name></expr></argument>, <argument pos:start="39:43" pos:end="39:48"><expr pos:start="39:43" pos:end="39:48"><name pos:start="39:43" pos:end="39:48">sysclk</name></expr></argument>, <argument pos:start="39:51" pos:end="39:67"><expr pos:start="39:51" pos:end="39:67"><name pos:start="39:51" pos:end="39:67">PPC_INTERRUPT_PIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:10">tb_clk</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:18">opaque</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:24">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><call pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:16">ppc_dcr_init</name><argument_list pos:start="43:17" pos:end="43:33">(<argument pos:start="43:18" pos:end="43:20"><expr pos:start="43:18" pos:end="43:20"><name pos:start="43:18" pos:end="43:20">env</name></expr></argument>, <argument pos:start="43:23" pos:end="43:26"><expr pos:start="43:23" pos:end="43:26"><name pos:start="43:23" pos:end="43:26">NULL</name></expr></argument>, <argument pos:start="43:29" pos:end="43:32"><expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:33">/* Register qemu callbacks */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><call pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:23">qemu_register_reset</name><argument_list pos:start="47:24" pos:end="47:42">(<argument pos:start="47:25" pos:end="47:36"><expr pos:start="47:25" pos:end="47:36"><name pos:start="47:25" pos:end="47:36">ppc4xx_reset</name></expr></argument>, <argument pos:start="47:39" pos:end="47:41"><expr pos:start="47:39" pos:end="47:41"><name pos:start="47:39" pos:end="47:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="51:5" pos:end="51:15">return <expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">cpu</name></expr>;</return>

</block_content>}</block></function>
</unit>
