<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22984.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">x86_cpu_reset</name><parameter_list pos:start="1:26" pos:end="1:38">(<parameter pos:start="1:27" pos:end="1:37"><decl pos:start="1:27" pos:end="1:37"><type pos:start="1:27" pos:end="1:36"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="67:1">{<block_content pos:start="3:5" pos:end="67:0">
    <decl_stmt pos:start="3:5" pos:end="3:29"><decl pos:start="3:5" pos:end="3:28"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:10">X86CPU</name> <modifier pos:start="3:12" pos:end="3:12">*</modifier></type><name pos:start="3:13" pos:end="3:15">cpu</name> <init pos:start="3:17" pos:end="3:28">= <expr pos:start="3:19" pos:end="3:28"><call pos:start="3:19" pos:end="3:28"><name pos:start="3:19" pos:end="3:25">X86_CPU</name><argument_list pos:start="3:26" pos:end="3:28">(<argument pos:start="3:27" pos:end="3:27"><expr pos:start="3:27" pos:end="3:27"><name pos:start="3:27" pos:end="3:27">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:46"><decl pos:start="4:5" pos:end="4:45"><type pos:start="4:5" pos:end="4:17"><name pos:start="4:5" pos:end="4:15">X86CPUClass</name> <modifier pos:start="4:17" pos:end="4:17">*</modifier></type><name pos:start="4:18" pos:end="4:20">xcc</name> <init pos:start="4:22" pos:end="4:45">= <expr pos:start="4:24" pos:end="4:45"><call pos:start="4:24" pos:end="4:45"><name pos:start="4:24" pos:end="4:40">X86_CPU_GET_CLASS</name><argument_list pos:start="4:41" pos:end="4:45">(<argument pos:start="4:42" pos:end="4:44"><expr pos:start="4:42" pos:end="4:44"><name pos:start="4:42" pos:end="4:44">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUX86State</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:32">= <expr pos:start="5:24" pos:end="5:32"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:32"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:32">env</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:10"><decl pos:start="6:5" pos:end="6:9"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:9">i</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:25"><expr pos:start="7:5" pos:end="7:24"><call pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:7">xcc</name><operator pos:start="7:8" pos:end="7:9">-&gt;</operator><name pos:start="7:10" pos:end="7:21">parent_reset</name></name><argument_list pos:start="7:22" pos:end="7:24">(<argument pos:start="7:23" pos:end="7:23"><expr pos:start="7:23" pos:end="7:23"><name pos:start="7:23" pos:end="7:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:55"><expr pos:start="8:5" pos:end="8:54"><call pos:start="8:5" pos:end="8:54"><name pos:start="8:5" pos:end="8:10">memset</name><argument_list pos:start="8:11" pos:end="8:54">(<argument pos:start="8:12" pos:end="8:14"><expr pos:start="8:12" pos:end="8:14"><name pos:start="8:12" pos:end="8:14">env</name></expr></argument>, <argument pos:start="8:17" pos:end="8:17"><expr pos:start="8:17" pos:end="8:17"><literal type="number" pos:start="8:17" pos:end="8:17">0</literal></expr></argument>, <argument pos:start="8:20" pos:end="8:53"><expr pos:start="8:20" pos:end="8:53"><call pos:start="8:20" pos:end="8:53"><name pos:start="8:20" pos:end="8:27">offsetof</name><argument_list pos:start="8:28" pos:end="8:53">(<argument pos:start="8:29" pos:end="8:39"><expr pos:start="8:29" pos:end="8:39"><name pos:start="8:29" pos:end="8:39">CPUX86State</name></expr></argument>, <argument pos:start="8:42" pos:end="8:52"><expr pos:start="8:42" pos:end="8:52"><name pos:start="8:42" pos:end="8:52">breakpoints</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:22"><expr pos:start="9:5" pos:end="9:21"><call pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:13">tlb_flush</name><argument_list pos:start="9:14" pos:end="9:21">(<argument pos:start="9:15" pos:end="9:17"><expr pos:start="9:15" pos:end="9:17"><name pos:start="9:15" pos:end="9:17">env</name></expr></argument>, <argument pos:start="9:20" pos:end="9:20"><expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="10:5" pos:end="13:0"><expr pos:start="10:5" pos:end="10:27"><name pos:start="10:5" pos:end="10:22"><name pos:start="10:5" pos:end="10:7">env</name><operator pos:start="10:8" pos:end="10:9">-&gt;</operator><name pos:start="10:10" pos:end="10:22">old_exception</name></name> <operator pos:start="10:24" pos:end="10:24">=</operator> <operator pos:start="10:26" pos:end="10:26">-</operator><literal type="number" pos:start="10:27" pos:end="10:27">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="11:5" pos:end="11:29">/* init to reset state */</comment>
<cpp:ifdef pos:start="12:1" pos:end="12:21">#<cpp:directive pos:start="12:2" pos:end="12:6">ifdef</cpp:directive> <name pos:start="12:8" pos:end="12:21">CONFIG_SOFTMMU</name></cpp:ifdef>
    <expr_stmt pos:start="13:5" pos:end="15:0"><expr pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:7">env</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:15">hflags</name></name> <operator pos:start="13:17" pos:end="13:18">|=</operator> <name pos:start="13:20" pos:end="13:34">HF_SOFTMMU_MASK</name></expr>;</expr_stmt>
<cpp:endif pos:start="14:1" pos:end="14:6">#<cpp:directive pos:start="14:2" pos:end="14:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="15:5" pos:end="15:33"><expr pos:start="15:5" pos:end="15:32"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:7">env</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:16">hflags2</name></name> <operator pos:start="15:18" pos:end="15:19">|=</operator> <name pos:start="15:21" pos:end="15:32">HF2_GIF_MASK</name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:40"><expr pos:start="16:5" pos:end="16:39"><call pos:start="16:5" pos:end="16:39"><name pos:start="16:5" pos:end="16:22">cpu_x86_update_cr0</name><argument_list pos:start="16:23" pos:end="16:39">(<argument pos:start="16:24" pos:end="16:26"><expr pos:start="16:24" pos:end="16:26"><name pos:start="16:24" pos:end="16:26">env</name></expr></argument>, <argument pos:start="16:29" pos:end="16:38"><expr pos:start="16:29" pos:end="16:38"><literal type="number" pos:start="16:29" pos:end="16:38">0x60000010</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:7">env</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:17">a20_mask</name></name> <operator pos:start="17:19" pos:end="17:19">=</operator> <operator pos:start="17:21" pos:end="17:21">~</operator><literal type="number" pos:start="17:22" pos:end="17:24">0x0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:26"><expr pos:start="18:5" pos:end="18:25"><name pos:start="18:5" pos:end="18:15"><name pos:start="18:5" pos:end="18:7">env</name><operator pos:start="18:8" pos:end="18:9">-&gt;</operator><name pos:start="18:10" pos:end="18:15">smbase</name></name> <operator pos:start="18:17" pos:end="18:17">=</operator> <literal type="number" pos:start="18:19" pos:end="18:25">0x30000</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:28"><expr pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:7">env</name><operator pos:start="19:8" pos:end="19:9">-&gt;</operator><name pos:start="19:10" pos:end="19:12">idt</name><operator pos:start="19:13" pos:end="19:13">.</operator><name pos:start="19:14" pos:end="19:18">limit</name></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <literal type="number" pos:start="19:22" pos:end="19:27">0xffff</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:28"><expr pos:start="20:5" pos:end="20:27"><name pos:start="20:5" pos:end="20:18"><name pos:start="20:5" pos:end="20:7">env</name><operator pos:start="20:8" pos:end="20:9">-&gt;</operator><name pos:start="20:10" pos:end="20:12">gdt</name><operator pos:start="20:13" pos:end="20:13">.</operator><name pos:start="20:14" pos:end="20:18">limit</name></name> <operator pos:start="20:20" pos:end="20:20">=</operator> <literal type="number" pos:start="20:22" pos:end="20:27">0xffff</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:28"><expr pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:7">env</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:12">ldt</name><operator pos:start="21:13" pos:end="21:13">.</operator><name pos:start="21:14" pos:end="21:18">limit</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <literal type="number" pos:start="21:22" pos:end="21:27">0xffff</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:58"><expr pos:start="22:5" pos:end="22:57"><name pos:start="22:5" pos:end="22:18"><name pos:start="22:5" pos:end="22:7">env</name><operator pos:start="22:8" pos:end="22:9">-&gt;</operator><name pos:start="22:10" pos:end="22:12">ldt</name><operator pos:start="22:13" pos:end="22:13">.</operator><name pos:start="22:14" pos:end="22:18">flags</name></name> <operator pos:start="22:20" pos:end="22:20">=</operator> <name pos:start="22:22" pos:end="22:32">DESC_P_MASK</name> <operator pos:start="22:34" pos:end="22:34">|</operator> <operator pos:start="22:36" pos:end="22:36">(</operator><literal type="number" pos:start="22:37" pos:end="22:37">2</literal> <operator pos:start="22:39" pos:end="22:40">&lt;&lt;</operator> <name pos:start="22:42" pos:end="22:56">DESC_TYPE_SHIFT</name><operator pos:start="22:57" pos:end="22:57">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:27"><expr pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:7">env</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:11">tr</name><operator pos:start="23:12" pos:end="23:12">.</operator><name pos:start="23:13" pos:end="23:17">limit</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <literal type="number" pos:start="23:21" pos:end="23:26">0xffff</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:58"><expr pos:start="24:5" pos:end="24:57"><name pos:start="24:5" pos:end="24:17"><name pos:start="24:5" pos:end="24:7">env</name><operator pos:start="24:8" pos:end="24:9">-&gt;</operator><name pos:start="24:10" pos:end="24:11">tr</name><operator pos:start="24:12" pos:end="24:12">.</operator><name pos:start="24:13" pos:end="24:17">flags</name></name> <operator pos:start="24:19" pos:end="24:19">=</operator> <name pos:start="24:21" pos:end="24:31">DESC_P_MASK</name> <operator pos:start="24:33" pos:end="24:33">|</operator> <operator pos:start="24:35" pos:end="24:35">(</operator><literal type="number" pos:start="24:36" pos:end="24:37">11</literal> <operator pos:start="24:39" pos:end="24:40">&lt;&lt;</operator> <name pos:start="24:42" pos:end="24:56">DESC_TYPE_SHIFT</name><operator pos:start="24:57" pos:end="24:57">)</operator></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="27:54"><expr pos:start="25:5" pos:end="27:53"><call pos:start="25:5" pos:end="27:53"><name pos:start="25:5" pos:end="25:26">cpu_x86_load_seg_cache</name><argument_list pos:start="25:27" pos:end="27:53">(<argument pos:start="25:28" pos:end="25:30"><expr pos:start="25:28" pos:end="25:30"><name pos:start="25:28" pos:end="25:30">env</name></expr></argument>, <argument pos:start="25:33" pos:end="25:36"><expr pos:start="25:33" pos:end="25:36"><name pos:start="25:33" pos:end="25:36">R_CS</name></expr></argument>, <argument pos:start="25:39" pos:end="25:44"><expr pos:start="25:39" pos:end="25:44"><literal type="number" pos:start="25:39" pos:end="25:44">0xf000</literal></expr></argument>, <argument pos:start="25:47" pos:end="25:56"><expr pos:start="25:47" pos:end="25:56"><literal type="number" pos:start="25:47" pos:end="25:56">0xffff0000</literal></expr></argument>, <argument pos:start="25:59" pos:end="25:64"><expr pos:start="25:59" pos:end="25:64"><literal type="number" pos:start="25:59" pos:end="25:64">0xffff</literal></expr></argument>,
                           <argument pos:start="26:28" pos:end="27:52"><expr pos:start="26:28" pos:end="27:52"><name pos:start="26:28" pos:end="26:38">DESC_P_MASK</name> <operator pos:start="26:40" pos:end="26:40">|</operator> <name pos:start="26:42" pos:end="26:52">DESC_S_MASK</name> <operator pos:start="26:54" pos:end="26:54">|</operator> <name pos:start="26:56" pos:end="26:67">DESC_CS_MASK</name> <operator pos:start="26:69" pos:end="26:69">|</operator>
                           <name pos:start="27:28" pos:end="27:38">DESC_R_MASK</name> <operator pos:start="27:40" pos:end="27:40">|</operator> <name pos:start="27:42" pos:end="27:52">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="30:40"><expr pos:start="28:5" pos:end="30:39"><call pos:start="28:5" pos:end="30:39"><name pos:start="28:5" pos:end="28:26">cpu_x86_load_seg_cache</name><argument_list pos:start="28:27" pos:end="30:39">(<argument pos:start="28:28" pos:end="28:30"><expr pos:start="28:28" pos:end="28:30"><name pos:start="28:28" pos:end="28:30">env</name></expr></argument>, <argument pos:start="28:33" pos:end="28:36"><expr pos:start="28:33" pos:end="28:36"><name pos:start="28:33" pos:end="28:36">R_DS</name></expr></argument>, <argument pos:start="28:39" pos:end="28:39"><expr pos:start="28:39" pos:end="28:39"><literal type="number" pos:start="28:39" pos:end="28:39">0</literal></expr></argument>, <argument pos:start="28:42" pos:end="28:42"><expr pos:start="28:42" pos:end="28:42"><literal type="number" pos:start="28:42" pos:end="28:42">0</literal></expr></argument>, <argument pos:start="28:45" pos:end="28:50"><expr pos:start="28:45" pos:end="28:50"><literal type="number" pos:start="28:45" pos:end="28:50">0xffff</literal></expr></argument>,
                           <argument pos:start="29:28" pos:end="30:38"><expr pos:start="29:28" pos:end="30:38"><name pos:start="29:28" pos:end="29:38">DESC_P_MASK</name> <operator pos:start="29:40" pos:end="29:40">|</operator> <name pos:start="29:42" pos:end="29:52">DESC_S_MASK</name> <operator pos:start="29:54" pos:end="29:54">|</operator> <name pos:start="29:56" pos:end="29:66">DESC_W_MASK</name> <operator pos:start="29:68" pos:end="29:68">|</operator>
                           <name pos:start="30:28" pos:end="30:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="33:40"><expr pos:start="31:5" pos:end="33:39"><call pos:start="31:5" pos:end="33:39"><name pos:start="31:5" pos:end="31:26">cpu_x86_load_seg_cache</name><argument_list pos:start="31:27" pos:end="33:39">(<argument pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">env</name></expr></argument>, <argument pos:start="31:33" pos:end="31:36"><expr pos:start="31:33" pos:end="31:36"><name pos:start="31:33" pos:end="31:36">R_ES</name></expr></argument>, <argument pos:start="31:39" pos:end="31:39"><expr pos:start="31:39" pos:end="31:39"><literal type="number" pos:start="31:39" pos:end="31:39">0</literal></expr></argument>, <argument pos:start="31:42" pos:end="31:42"><expr pos:start="31:42" pos:end="31:42"><literal type="number" pos:start="31:42" pos:end="31:42">0</literal></expr></argument>, <argument pos:start="31:45" pos:end="31:50"><expr pos:start="31:45" pos:end="31:50"><literal type="number" pos:start="31:45" pos:end="31:50">0xffff</literal></expr></argument>,
                           <argument pos:start="32:28" pos:end="33:38"><expr pos:start="32:28" pos:end="33:38"><name pos:start="32:28" pos:end="32:38">DESC_P_MASK</name> <operator pos:start="32:40" pos:end="32:40">|</operator> <name pos:start="32:42" pos:end="32:52">DESC_S_MASK</name> <operator pos:start="32:54" pos:end="32:54">|</operator> <name pos:start="32:56" pos:end="32:66">DESC_W_MASK</name> <operator pos:start="32:68" pos:end="32:68">|</operator>
                           <name pos:start="33:28" pos:end="33:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="36:40"><expr pos:start="34:5" pos:end="36:39"><call pos:start="34:5" pos:end="36:39"><name pos:start="34:5" pos:end="34:26">cpu_x86_load_seg_cache</name><argument_list pos:start="34:27" pos:end="36:39">(<argument pos:start="34:28" pos:end="34:30"><expr pos:start="34:28" pos:end="34:30"><name pos:start="34:28" pos:end="34:30">env</name></expr></argument>, <argument pos:start="34:33" pos:end="34:36"><expr pos:start="34:33" pos:end="34:36"><name pos:start="34:33" pos:end="34:36">R_SS</name></expr></argument>, <argument pos:start="34:39" pos:end="34:39"><expr pos:start="34:39" pos:end="34:39"><literal type="number" pos:start="34:39" pos:end="34:39">0</literal></expr></argument>, <argument pos:start="34:42" pos:end="34:42"><expr pos:start="34:42" pos:end="34:42"><literal type="number" pos:start="34:42" pos:end="34:42">0</literal></expr></argument>, <argument pos:start="34:45" pos:end="34:50"><expr pos:start="34:45" pos:end="34:50"><literal type="number" pos:start="34:45" pos:end="34:50">0xffff</literal></expr></argument>,
                           <argument pos:start="35:28" pos:end="36:38"><expr pos:start="35:28" pos:end="36:38"><name pos:start="35:28" pos:end="35:38">DESC_P_MASK</name> <operator pos:start="35:40" pos:end="35:40">|</operator> <name pos:start="35:42" pos:end="35:52">DESC_S_MASK</name> <operator pos:start="35:54" pos:end="35:54">|</operator> <name pos:start="35:56" pos:end="35:66">DESC_W_MASK</name> <operator pos:start="35:68" pos:end="35:68">|</operator>
                           <name pos:start="36:28" pos:end="36:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="39:40"><expr pos:start="37:5" pos:end="39:39"><call pos:start="37:5" pos:end="39:39"><name pos:start="37:5" pos:end="37:26">cpu_x86_load_seg_cache</name><argument_list pos:start="37:27" pos:end="39:39">(<argument pos:start="37:28" pos:end="37:30"><expr pos:start="37:28" pos:end="37:30"><name pos:start="37:28" pos:end="37:30">env</name></expr></argument>, <argument pos:start="37:33" pos:end="37:36"><expr pos:start="37:33" pos:end="37:36"><name pos:start="37:33" pos:end="37:36">R_FS</name></expr></argument>, <argument pos:start="37:39" pos:end="37:39"><expr pos:start="37:39" pos:end="37:39"><literal type="number" pos:start="37:39" pos:end="37:39">0</literal></expr></argument>, <argument pos:start="37:42" pos:end="37:42"><expr pos:start="37:42" pos:end="37:42"><literal type="number" pos:start="37:42" pos:end="37:42">0</literal></expr></argument>, <argument pos:start="37:45" pos:end="37:50"><expr pos:start="37:45" pos:end="37:50"><literal type="number" pos:start="37:45" pos:end="37:50">0xffff</literal></expr></argument>,
                           <argument pos:start="38:28" pos:end="39:38"><expr pos:start="38:28" pos:end="39:38"><name pos:start="38:28" pos:end="38:38">DESC_P_MASK</name> <operator pos:start="38:40" pos:end="38:40">|</operator> <name pos:start="38:42" pos:end="38:52">DESC_S_MASK</name> <operator pos:start="38:54" pos:end="38:54">|</operator> <name pos:start="38:56" pos:end="38:66">DESC_W_MASK</name> <operator pos:start="38:68" pos:end="38:68">|</operator>
                           <name pos:start="39:28" pos:end="39:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="40:5" pos:end="42:40"><expr pos:start="40:5" pos:end="42:39"><call pos:start="40:5" pos:end="42:39"><name pos:start="40:5" pos:end="40:26">cpu_x86_load_seg_cache</name><argument_list pos:start="40:27" pos:end="42:39">(<argument pos:start="40:28" pos:end="40:30"><expr pos:start="40:28" pos:end="40:30"><name pos:start="40:28" pos:end="40:30">env</name></expr></argument>, <argument pos:start="40:33" pos:end="40:36"><expr pos:start="40:33" pos:end="40:36"><name pos:start="40:33" pos:end="40:36">R_GS</name></expr></argument>, <argument pos:start="40:39" pos:end="40:39"><expr pos:start="40:39" pos:end="40:39"><literal type="number" pos:start="40:39" pos:end="40:39">0</literal></expr></argument>, <argument pos:start="40:42" pos:end="40:42"><expr pos:start="40:42" pos:end="40:42"><literal type="number" pos:start="40:42" pos:end="40:42">0</literal></expr></argument>, <argument pos:start="40:45" pos:end="40:50"><expr pos:start="40:45" pos:end="40:50"><literal type="number" pos:start="40:45" pos:end="40:50">0xffff</literal></expr></argument>,
                           <argument pos:start="41:28" pos:end="42:38"><expr pos:start="41:28" pos:end="42:38"><name pos:start="41:28" pos:end="41:38">DESC_P_MASK</name> <operator pos:start="41:40" pos:end="41:40">|</operator> <name pos:start="41:42" pos:end="41:52">DESC_S_MASK</name> <operator pos:start="41:54" pos:end="41:54">|</operator> <name pos:start="41:56" pos:end="41:66">DESC_W_MASK</name> <operator pos:start="41:68" pos:end="41:68">|</operator>
                           <name pos:start="42:28" pos:end="42:38">DESC_A_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:12">eip</name></name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:21">0xfff0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:42"><expr pos:start="44:5" pos:end="44:41"><name pos:start="44:5" pos:end="44:20"><name pos:start="44:5" pos:end="44:7">env</name><operator pos:start="44:8" pos:end="44:9">-&gt;</operator><name pos:start="44:10" pos:end="44:13">regs</name><index pos:start="44:14" pos:end="44:20">[<expr pos:start="44:15" pos:end="44:19"><name pos:start="44:15" pos:end="44:19">R_EDX</name></expr>]</index></name> <operator pos:start="44:22" pos:end="44:22">=</operator> <name pos:start="44:24" pos:end="44:41"><name pos:start="44:24" pos:end="44:26">env</name><operator pos:start="44:27" pos:end="44:28">-&gt;</operator><name pos:start="44:29" pos:end="44:41">cpuid_version</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="45:5" pos:end="45:22"><expr pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:7">env</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:15">eflags</name></name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:21">0x2</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="46:5" pos:end="46:18">/* FPU init */</comment>
    <for pos:start="47:5" pos:end="49:5">for <control pos:start="47:9" pos:end="47:27">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">i</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:21"><name pos:start="47:17" pos:end="47:17">i</name> <operator pos:start="47:19" pos:end="47:19">&lt;</operator> <literal type="number" pos:start="47:21" pos:end="47:21">8</literal></expr>;</condition> <incr pos:start="47:24" pos:end="47:26"><expr pos:start="47:24" pos:end="47:26"><name pos:start="47:24" pos:end="47:24">i</name><operator pos:start="47:25" pos:end="47:26">++</operator></expr></incr>)</control> <block pos:start="47:29" pos:end="49:5">{<block_content pos:start="48:9" pos:end="48:27">
        <expr_stmt pos:start="48:9" pos:end="48:27"><expr pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:22"><name pos:start="48:9" pos:end="48:11">env</name><operator pos:start="48:12" pos:end="48:13">-&gt;</operator><name pos:start="48:14" pos:end="48:19">fptags</name><index pos:start="48:20" pos:end="48:22">[<expr pos:start="48:21" pos:end="48:21"><name pos:start="48:21" pos:end="48:21">i</name></expr>]</index></name> <operator pos:start="48:24" pos:end="48:24">=</operator> <literal type="number" pos:start="48:26" pos:end="48:26">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="50:5" pos:end="50:22"><expr pos:start="50:5" pos:end="50:21"><name pos:start="50:5" pos:end="50:13"><name pos:start="50:5" pos:end="50:7">env</name><operator pos:start="50:8" pos:end="50:9">-&gt;</operator><name pos:start="50:10" pos:end="50:13">fpuc</name></name> <operator pos:start="50:15" pos:end="50:15">=</operator> <literal type="number" pos:start="50:17" pos:end="50:21">0x37f</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:7">env</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:14">mxcsr</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:23">0x1f80</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="52:5" pos:end="52:44"><expr pos:start="52:5" pos:end="52:43"><name pos:start="52:5" pos:end="52:18"><name pos:start="52:5" pos:end="52:7">env</name><operator pos:start="52:8" pos:end="52:9">-&gt;</operator><name pos:start="52:10" pos:end="52:18">xstate_bv</name></name> <operator pos:start="52:20" pos:end="52:20">=</operator> <name pos:start="52:22" pos:end="52:30">XSTATE_FP</name> <operator pos:start="52:32" pos:end="52:32">|</operator> <name pos:start="52:34" pos:end="52:43">XSTATE_SSE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:7">env</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:12">pat</name></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <literal type="number" pos:start="53:16" pos:end="53:36">0x0007040600070406ULL</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="54:5" pos:end="54:61"><expr pos:start="54:5" pos:end="54:60"><name pos:start="54:5" pos:end="54:29"><name pos:start="54:5" pos:end="54:7">env</name><operator pos:start="54:8" pos:end="54:9">-&gt;</operator><name pos:start="54:10" pos:end="54:29">msr_ia32_misc_enable</name></name> <operator pos:start="54:31" pos:end="54:31">=</operator> <name pos:start="54:33" pos:end="54:60">MSR_IA32_MISC_ENABLE_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><call pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:10">memset</name><argument_list pos:start="55:11" pos:end="55:39">(<argument pos:start="55:12" pos:end="55:18"><expr pos:start="55:12" pos:end="55:18"><name pos:start="55:12" pos:end="55:18"><name pos:start="55:12" pos:end="55:14">env</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:18">dr</name></name></expr></argument>, <argument pos:start="55:21" pos:end="55:21"><expr pos:start="55:21" pos:end="55:21"><literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr></argument>, <argument pos:start="55:24" pos:end="55:38"><expr pos:start="55:24" pos:end="55:38"><sizeof pos:start="55:24" pos:end="55:38">sizeof<argument_list pos:start="55:30" pos:end="55:38">(<argument pos:start="55:31" pos:end="55:37"><expr pos:start="55:31" pos:end="55:37"><name pos:start="55:31" pos:end="55:37"><name pos:start="55:31" pos:end="55:33">env</name><operator pos:start="55:34" pos:end="55:35">-&gt;</operator><name pos:start="55:36" pos:end="55:37">dr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:29"><expr pos:start="56:5" pos:end="56:28"><name pos:start="56:5" pos:end="56:14"><name pos:start="56:5" pos:end="56:7">env</name><operator pos:start="56:8" pos:end="56:9">-&gt;</operator><name pos:start="56:10" pos:end="56:11">dr</name><index pos:start="56:12" pos:end="56:14">[<expr pos:start="56:13" pos:end="56:13"><literal type="number" pos:start="56:13" pos:end="56:13">6</literal></expr>]</index></name> <operator pos:start="56:16" pos:end="56:16">=</operator> <name pos:start="56:18" pos:end="56:28">DR6_FIXED_1</name></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:7">env</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:11">dr</name><index pos:start="57:12" pos:end="57:14">[<expr pos:start="57:13" pos:end="57:13"><literal type="number" pos:start="57:13" pos:end="57:13">7</literal></expr>]</index></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:28">DR7_FIXED_1</name></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:43"><expr pos:start="58:5" pos:end="58:42"><call pos:start="58:5" pos:end="58:42"><name pos:start="58:5" pos:end="58:29">cpu_breakpoint_remove_all</name><argument_list pos:start="58:30" pos:end="58:42">(<argument pos:start="58:31" pos:end="58:33"><expr pos:start="58:31" pos:end="58:33"><name pos:start="58:31" pos:end="58:33">env</name></expr></argument>, <argument pos:start="58:36" pos:end="58:41"><expr pos:start="58:36" pos:end="58:41"><name pos:start="58:36" pos:end="58:41">BP_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="61:0"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:29">cpu_watchpoint_remove_all</name><argument_list pos:start="59:30" pos:end="59:42">(<argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">env</name></expr></argument>, <argument pos:start="59:36" pos:end="59:41"><expr pos:start="59:36" pos:end="59:41"><name pos:start="59:36" pos:end="59:41">BP_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="60:1" pos:end="60:30">#<cpp:directive pos:start="60:2" pos:end="60:3">if</cpp:directive> <expr pos:start="60:5" pos:end="60:30"><operator pos:start="60:5" pos:end="60:5">!</operator><call pos:start="60:6" pos:end="60:30"><name pos:start="60:6" pos:end="60:12">defined</name><argument_list pos:start="60:13" pos:end="60:30">(<argument pos:start="60:14" pos:end="60:29"><expr pos:start="60:14" pos:end="60:29"><name pos:start="60:14" pos:end="60:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <comment type="block" pos:start="61:5" pos:end="61:48">/* We hard-wire the BSP to the first CPU. */</comment>
    <if_stmt pos:start="62:5" pos:end="64:5"><if pos:start="62:5" pos:end="64:5">if <condition pos:start="62:8" pos:end="62:26">(<expr pos:start="62:9" pos:end="62:25"><name pos:start="62:9" pos:end="62:20"><name pos:start="62:9" pos:end="62:9">s</name><operator pos:start="62:10" pos:end="62:11">-&gt;</operator><name pos:start="62:12" pos:end="62:20">cpu_index</name></name> <operator pos:start="62:22" pos:end="62:23">==</operator> <literal type="number" pos:start="62:25" pos:end="62:25">0</literal></expr>)</condition> <block pos:start="62:28" pos:end="64:5">{<block_content pos:start="63:9" pos:end="63:44">
        <expr_stmt pos:start="63:9" pos:end="63:44"><expr pos:start="63:9" pos:end="63:43"><call pos:start="63:9" pos:end="63:43"><name pos:start="63:9" pos:end="63:26">apic_designate_bsp</name><argument_list pos:start="63:27" pos:end="63:43">(<argument pos:start="63:28" pos:end="63:42"><expr pos:start="63:28" pos:end="63:42"><name pos:start="63:28" pos:end="63:42"><name pos:start="63:28" pos:end="63:30">env</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:42">apic_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="65:5" pos:end="67:0"><expr pos:start="65:5" pos:end="65:32"><name pos:start="65:5" pos:end="65:13"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:13">halted</name></name> <operator pos:start="65:15" pos:end="65:15">=</operator> <operator pos:start="65:17" pos:end="65:17">!</operator><call pos:start="65:18" pos:end="65:32"><name pos:start="65:18" pos:end="65:27">cpu_is_bsp</name><argument_list pos:start="65:28" pos:end="65:32">(<argument pos:start="65:29" pos:end="65:31"><expr pos:start="65:29" pos:end="65:31"><name pos:start="65:29" pos:end="65:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="66:1" pos:end="66:6">#<cpp:directive pos:start="66:2" pos:end="66:6">endif</cpp:directive></cpp:endif>
</block_content>}</block></function></unit>
