<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6554.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">test_blk_read</name><parameter_list pos:start="1:26" pos:end="7:45">(<parameter pos:start="1:27" pos:end="1:43"><decl pos:start="1:27" pos:end="1:43"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:38">BlockBackend</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">blk</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:57"><decl pos:start="1:46" pos:end="1:57"><type pos:start="1:46" pos:end="1:57"><name pos:start="1:46" pos:end="1:49">long</name></type> <name pos:start="1:51" pos:end="1:57">pattern</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:48"><decl pos:start="3:27" pos:end="3:48"><type pos:start="3:27" pos:end="3:48"><name pos:start="3:27" pos:end="3:33">int64_t</name></type> <name pos:start="3:35" pos:end="3:48">pattern_offset</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:71"><decl pos:start="3:51" pos:end="3:71"><type pos:start="3:51" pos:end="3:71"><name pos:start="3:51" pos:end="3:57">int64_t</name></type> <name pos:start="3:59" pos:end="3:71">pattern_count</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:40"><decl pos:start="5:27" pos:end="5:40"><type pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:33">int64_t</name></type> <name pos:start="5:35" pos:end="5:40">offset</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:55"><decl pos:start="5:43" pos:end="5:55"><type pos:start="5:43" pos:end="5:55"><name pos:start="5:43" pos:end="5:49">int64_t</name></type> <name pos:start="5:51" pos:end="5:55">count</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:44"><decl pos:start="7:27" pos:end="7:44"><type pos:start="7:27" pos:end="7:44"><name pos:start="7:27" pos:end="7:30">bool</name></type> <name pos:start="7:32" pos:end="7:44">expect_failed</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="85:1">{<block_content pos:start="11:5" pos:end="81:24">

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:21">pattern_buf</name> <init pos:start="11:23" pos:end="11:28">= <expr pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">QEMUIOVector</name></type> <name pos:start="13:18" pos:end="13:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:17">cmp_buf</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">async_ret</name> <init pos:start="17:19" pos:end="17:28">= <expr pos:start="17:21" pos:end="17:28"><name pos:start="17:21" pos:end="17:28">NOT_DONE</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:15">pattern</name></expr>)</condition> <block pos:start="21:18" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:48">

        <expr_stmt pos:start="23:9" pos:end="23:42"><expr pos:start="23:9" pos:end="23:41"><name pos:start="23:9" pos:end="23:15">cmp_buf</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <call pos:start="23:19" pos:end="23:41"><name pos:start="23:19" pos:end="23:26">g_malloc</name><argument_list pos:start="23:27" pos:end="23:41">(<argument pos:start="23:28" pos:end="23:40"><expr pos:start="23:28" pos:end="23:40"><name pos:start="23:28" pos:end="23:40">pattern_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:48"><expr pos:start="25:9" pos:end="25:47"><call pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:14">memset</name><argument_list pos:start="25:15" pos:end="25:47">(<argument pos:start="25:16" pos:end="25:22"><expr pos:start="25:16" pos:end="25:22"><name pos:start="25:16" pos:end="25:22">cmp_buf</name></expr></argument>, <argument pos:start="25:25" pos:end="25:31"><expr pos:start="25:25" pos:end="25:31"><name pos:start="25:25" pos:end="25:31">pattern</name></expr></argument>, <argument pos:start="25:34" pos:end="25:46"><expr pos:start="25:34" pos:end="25:46"><name pos:start="25:34" pos:end="25:46">pattern_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:15">pattern_buf</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:33"><name pos:start="31:19" pos:end="31:26">g_malloc</name><argument_list pos:start="31:27" pos:end="31:33">(<argument pos:start="31:28" pos:end="31:32"><expr pos:start="31:28" pos:end="31:32"><name pos:start="31:28" pos:end="31:32">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">pattern</name></expr>)</condition> <block pos:start="33:18" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:44">

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><call pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:14">memset</name><argument_list pos:start="35:15" pos:end="35:43">(<argument pos:start="35:16" pos:end="35:26"><expr pos:start="35:16" pos:end="35:26"><name pos:start="35:16" pos:end="35:26">pattern_buf</name></expr></argument>, <argument pos:start="35:29" pos:end="35:35"><expr pos:start="35:29" pos:end="35:35"><name pos:start="35:29" pos:end="35:35">pattern</name></expr></argument>, <argument pos:start="35:38" pos:end="35:42"><expr pos:start="35:38" pos:end="35:42"><name pos:start="35:38" pos:end="35:42">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="41:5">else <block pos:start="37:12" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:41">

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><call pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:14">memset</name><argument_list pos:start="39:15" pos:end="39:40">(<argument pos:start="39:16" pos:end="39:26"><expr pos:start="39:16" pos:end="39:26"><name pos:start="39:16" pos:end="39:26">pattern_buf</name></expr></argument>, <argument pos:start="39:29" pos:end="39:32"><expr pos:start="39:29" pos:end="39:32"><literal type="number" pos:start="39:29" pos:end="39:32">0x00</literal></expr></argument>, <argument pos:start="39:35" pos:end="39:39"><expr pos:start="39:35" pos:end="39:39"><name pos:start="39:35" pos:end="39:39">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><call pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:19">qemu_iovec_init</name><argument_list pos:start="45:20" pos:end="45:29">(<argument pos:start="45:21" pos:end="45:25"><expr pos:start="45:21" pos:end="45:25"><operator pos:start="45:21" pos:end="45:21">&amp;</operator><name pos:start="45:22" pos:end="45:25">qiov</name></expr></argument>, <argument pos:start="45:28" pos:end="45:28"><expr pos:start="45:28" pos:end="45:28"><literal type="number" pos:start="45:28" pos:end="45:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:46"><expr pos:start="47:5" pos:end="47:45"><call pos:start="47:5" pos:end="47:45"><name pos:start="47:5" pos:end="47:18">qemu_iovec_add</name><argument_list pos:start="47:19" pos:end="47:45">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><operator pos:start="47:20" pos:end="47:20">&amp;</operator><name pos:start="47:21" pos:end="47:24">qiov</name></expr></argument>, <argument pos:start="47:27" pos:end="47:37"><expr pos:start="47:27" pos:end="47:37"><name pos:start="47:27" pos:end="47:37">pattern_buf</name></expr></argument>, <argument pos:start="47:40" pos:end="47:44"><expr pos:start="47:40" pos:end="47:44"><name pos:start="47:40" pos:end="47:44">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:67"><expr pos:start="51:5" pos:end="51:66"><call pos:start="51:5" pos:end="51:66"><name pos:start="51:5" pos:end="51:18">blk_aio_preadv</name><argument_list pos:start="51:19" pos:end="51:66">(<argument pos:start="51:20" pos:end="51:22"><expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">blk</name></expr></argument>, <argument pos:start="51:25" pos:end="51:30"><expr pos:start="51:25" pos:end="51:30"><name pos:start="51:25" pos:end="51:30">offset</name></expr></argument>, <argument pos:start="51:33" pos:end="51:37"><expr pos:start="51:33" pos:end="51:37"><operator pos:start="51:33" pos:end="51:33">&amp;</operator><name pos:start="51:34" pos:end="51:37">qiov</name></expr></argument>, <argument pos:start="51:40" pos:end="51:40"><expr pos:start="51:40" pos:end="51:40"><literal type="number" pos:start="51:40" pos:end="51:40">0</literal></expr></argument>, <argument pos:start="51:43" pos:end="51:53"><expr pos:start="51:43" pos:end="51:53"><name pos:start="51:43" pos:end="51:53">blk_rw_done</name></expr></argument>, <argument pos:start="51:56" pos:end="51:65"><expr pos:start="51:56" pos:end="51:65"><operator pos:start="51:56" pos:end="51:56">&amp;</operator><name pos:start="51:57" pos:end="51:65">async_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="53:5" pos:end="57:5">while <condition pos:start="53:11" pos:end="53:33">(<expr pos:start="53:12" pos:end="53:32"><name pos:start="53:12" pos:end="53:20">async_ret</name> <operator pos:start="53:22" pos:end="53:23">==</operator> <name pos:start="53:25" pos:end="53:32">NOT_DONE</name></expr>)</condition> <block pos:start="53:35" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:30">

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><call pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:22">main_loop_wait</name><argument_list pos:start="55:23" pos:end="55:29">(<argument pos:start="55:24" pos:end="55:28"><expr pos:start="55:24" pos:end="55:28"><name pos:start="55:24" pos:end="55:28">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="61:5" pos:end="77:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:22">(<expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:21">expect_failed</name></expr>)</condition> <block pos:start="61:24" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:33">

        <expr_stmt pos:start="63:9" pos:end="63:33"><expr pos:start="63:9" pos:end="63:32"><call pos:start="63:9" pos:end="63:32"><name pos:start="63:9" pos:end="63:16">g_assert</name><argument_list pos:start="63:17" pos:end="63:32">(<argument pos:start="63:18" pos:end="63:31"><expr pos:start="63:18" pos:end="63:31"><name pos:start="63:18" pos:end="63:26">async_ret</name> <operator pos:start="63:28" pos:end="63:29">!=</operator> <literal type="number" pos:start="63:31" pos:end="63:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="77:5">else <block pos:start="65:12" pos:end="77:5">{<block_content pos:start="67:9" pos:end="75:9">

        <expr_stmt pos:start="67:9" pos:end="67:33"><expr pos:start="67:9" pos:end="67:32"><call pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:16">g_assert</name><argument_list pos:start="67:17" pos:end="67:32">(<argument pos:start="67:18" pos:end="67:31"><expr pos:start="67:18" pos:end="67:31"><name pos:start="67:18" pos:end="67:26">async_ret</name> <operator pos:start="67:28" pos:end="67:29">==</operator> <literal type="number" pos:start="67:31" pos:end="67:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:20">(<expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:19">pattern</name></expr>)</condition> <block pos:start="69:22" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:58">

            <expr_stmt pos:start="71:13" pos:end="73:58"><expr pos:start="71:13" pos:end="73:57"><call pos:start="71:13" pos:end="73:57"><name pos:start="71:13" pos:end="71:20">g_assert</name><argument_list pos:start="71:21" pos:end="73:57">(<argument pos:start="71:22" pos:end="73:56"><expr pos:start="71:22" pos:end="73:56"><call pos:start="71:22" pos:end="73:51"><name pos:start="71:22" pos:end="71:27">memcmp</name><argument_list pos:start="71:28" pos:end="73:51">(<argument pos:start="71:29" pos:end="71:56"><expr pos:start="71:29" pos:end="71:56"><name pos:start="71:29" pos:end="71:39">pattern_buf</name> <operator pos:start="71:41" pos:end="71:41">+</operator> <name pos:start="71:43" pos:end="71:56">pattern_offset</name></expr></argument>,

                            <argument pos:start="73:29" pos:end="73:35"><expr pos:start="73:29" pos:end="73:35"><name pos:start="73:29" pos:end="73:35">cmp_buf</name></expr></argument>, <argument pos:start="73:38" pos:end="73:50"><expr pos:start="73:38" pos:end="73:50"><name pos:start="73:38" pos:end="73:50">pattern_count</name></expr></argument>)</argument_list></call> <operator pos:start="73:53" pos:end="73:54">&lt;=</operator> <literal type="number" pos:start="73:56" pos:end="73:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:24"><expr pos:start="81:5" pos:end="81:23"><call pos:start="81:5" pos:end="81:23"><name pos:start="81:5" pos:end="81:10">g_free</name><argument_list pos:start="81:11" pos:end="81:23">(<argument pos:start="81:12" pos:end="81:22"><expr pos:start="81:12" pos:end="81:22"><name pos:start="81:12" pos:end="81:22">pattern_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



</block_content>}</block></function></unit>
